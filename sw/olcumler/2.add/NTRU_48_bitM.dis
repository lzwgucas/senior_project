
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	5d50006f          	j	e50 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	5d50006f          	j	e54 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	5cd0006f          	j	e50 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	5c90006f          	j	e50 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78f63          	beq	a5,a3,d8 <array_add+0x46>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_add+0x20>
      a4:	ebb1                	bnez	a5,f8 <array_add+0x66>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c763          	blt	a5,a2,fa <array_add+0x68>
      b0:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
	    break;      
	case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	06d7c063          	blt	a5,a3,11e <array_add+0x8c>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c50733          	add	a4,a0,a2
      ca:	00c586b3          	add	a3,a1,a2
      ce:	431c                	lw	a5,0(a4)
      d0:	4294                	lw	a3,0(a3)
      d2:	97b6                	add	a5,a5,a3
      d4:	c31c                	sw	a5,0(a4)
      d6:	a811                	j	ea <array_add+0x58>
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	fff60693          	addi	a3,a2,-1
      dc:	02e6c6b3          	div	a3,a3,a4
      e0:	4781                	li	a5,0
      e2:	48b1                	li	a7,12
      e4:	02d7c463          	blt	a5,a3,10c <array_add+0x7a>
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	1671                	addi	a2,a2,-4
      ec:	9532                	add	a0,a0,a2
      ee:	962e                	add	a2,a2,a1
      f0:	411c                	lw	a5,0(a0)
      f2:	4218                	lw	a4,0(a2)
      f4:	97ba                	add	a5,a5,a4
      f6:	c11c                	sw	a5,0(a0)
	    break;
    } //end of switch case
} //end of function
      f8:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	03078733          	mul	a4,a5,a6
    asm volatile(
      fe:	00e506b3          	add	a3,a0,a4
     102:	972e                	add	a4,a4,a1
     104:	06e6f70b          	0x6e6f70b
            for (i = 0; i < (length / 3); i++) {
     108:	0785                	addi	a5,a5,1
     10a:	b74d                	j	ac <array_add+0x1a>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	03178733          	mul	a4,a5,a7
    asm volatile(
     110:	00e50833          	add	a6,a0,a4
     114:	972e                	add	a4,a4,a1
     116:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0785                	addi	a5,a5,1
     11c:	b7e1                	j	e4 <array_add+0x52>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	03178733          	mul	a4,a5,a7
    asm volatile(
     122:	00e50833          	add	a6,a0,a4
     126:	972e                	add	a4,a4,a1
     128:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0785                	addi	a5,a5,1
     12e:	bf41                	j	be <array_add+0x2c>

00000130 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     130:	7179                	addi	sp,sp,-48
     132:	d226                	sw	s1,36(sp)
     134:	84b6                	mv	s1,a3
     136:	00249813          	slli	a6,s1,0x2


    int line[size_b][size_a + size_b];
     13a:	96ae                	add	a3,a3,a1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13c:	ce4e                	sw	s3,28(sp)
     13e:	cc52                	sw	s4,24(sp)
    int line[size_b][size_a + size_b];
     140:	00269993          	slli	s3,a3,0x2
     144:	fff68a13          	addi	s4,a3,-1
     148:	030686b3          	mul	a3,a3,a6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     14c:	8e3e                	mv	t3,a5
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     14e:	00259793          	slli	a5,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	d422                	sw	s0,40(sp)
     154:	d04a                	sw	s2,32(sp)
     156:	ca56                	sw	s5,20(sp)
     158:	c85a                	sw	s6,16(sp)
     15a:	d606                	sw	ra,44(sp)
     15c:	c65e                	sw	s7,12(sp)
     15e:	1800                	addi	s0,sp,48
    int line[size_b][size_a + size_b];
     160:	06bd                	addi	a3,a3,15
     162:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     164:	07bd                	addi	a5,a5,15
     166:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     168:	40d10133          	sub	sp,sp,a3
     16c:	868a                	mv	a3,sp
    int pola[size_a];
     16e:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     172:	00f80793          	addi	a5,a6,15
     176:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     178:	830a                	mv	t1,sp
    int polb[size_b];
     17a:	40f10133          	sub	sp,sp,a5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	893a                	mv	s2,a4
    int line[size_b][size_a + size_b];
     180:	fff48893          	addi	a7,s1,-1
    int pola[size_a];
     184:	fff58e93          	addi	t4,a1,-1
    int polb[size_b];
     188:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     18a:	8ab6                	mv	s5,a3
     18c:	8fb6                	mv	t6,a3
     18e:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     190:	00001b17          	auipc	s6,0x1
     194:	148b0b13          	addi	s6,s6,328 # 12d8 <_bss_start>
    for (i = 0; i < size_b; ++i){
     198:	049f4463          	blt	t5,s1,1e0 <polymult+0xb0>
     19c:	8f1a                	mv	t5,t1
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     19e:	4f81                	li	t6,0
     1a0:	04bfc363          	blt	t6,a1,1e6 <polymult+0xb6>
     1a4:	853e                	mv	a0,a5
        }
        pola[i] = pola[i] % mod;
    }

//
    for (i = 0; i < size_b; ++i){
     1a6:	4581                	li	a1,0
     1a8:	0695c263          	blt	a1,s1,20c <polymult+0xdc>
        polb[i] = polb[i] % mod;
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1ac:	4705                	li	a4,1
     1ae:	97c2                	add	a5,a5,a6
     1b0:	06ee0f63          	beq	t3,a4,22e <polymult+0xfe>
     1b4:	1871                	addi	a6,a6,-4
     1b6:	ffc98593          	addi	a1,s3,-4
     1ba:	9836                	add	a6,a6,a3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	0608cc63          	bltz	a7,234 <polymult+0x104>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	8776                	mv	a4,t4
     1c2:	a8dd                	j	2b8 <polymult+0x188>
            product[j] = 0;
     1c4:	00271393          	slli	t2,a4,0x2
     1c8:	93da                	add	t2,t2,s6
            line[i][j] = 0;
     1ca:	0002a023          	sw	zero,0(t0)
            product[j] = 0;
     1ce:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0705                	addi	a4,a4,1
     1d4:	0291                	addi	t0,t0,4
     1d6:	ff4747e3          	blt	a4,s4,1c4 <polymult+0x94>
    for (i = 0; i < size_b; ++i){
     1da:	0f05                	addi	t5,t5,1
     1dc:	9fce                	add	t6,t6,s3
     1de:	bf6d                	j	198 <polymult+0x68>
     1e0:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	4701                	li	a4,0
     1e4:	bfcd                	j	1d6 <polymult+0xa6>
        pola[i] = a[i];
     1e6:	002f9713          	slli	a4,t6,0x2
     1ea:	972a                	add	a4,a4,a0
     1ec:	4318                	lw	a4,0(a4)
            pola[i] = pola[i] + mod;
     1ee:	00ef2023          	sw	a4,0(t5)
        while (pola[i] < 0){
     1f2:	000f2703          	lw	a4,0(t5)
     1f6:	00074963          	bltz	a4,208 <polymult+0xd8>
        pola[i] = pola[i] % mod;
     1fa:	03276733          	rem	a4,a4,s2
    for (i = 0; i < size_a; ++i){
     1fe:	0f85                	addi	t6,t6,1
     200:	0f11                	addi	t5,t5,4
        pola[i] = pola[i] % mod;
     202:	feef2e23          	sw	a4,-4(t5)
    for (i = 0; i < size_a; ++i){
     206:	bf69                	j	1a0 <polymult+0x70>
            pola[i] = pola[i] + mod;
     208:	974a                	add	a4,a4,s2
     20a:	b7d5                	j	1ee <polymult+0xbe>
        polb[i] = b[i];
     20c:	00259713          	slli	a4,a1,0x2
     210:	9732                	add	a4,a4,a2
     212:	4318                	lw	a4,0(a4)
            polb[i] = polb[i] + mod;
     214:	c118                	sw	a4,0(a0)
        while (polb[i] < 0){
     216:	4118                	lw	a4,0(a0)
     218:	00074963          	bltz	a4,22a <polymult+0xfa>
        polb[i] = polb[i] % mod;
     21c:	03276733          	rem	a4,a4,s2
    for (i = 0; i < size_b; ++i){
     220:	0585                	addi	a1,a1,1
     222:	0511                	addi	a0,a0,4
        polb[i] = polb[i] % mod;
     224:	fee52e23          	sw	a4,-4(a0)
    for (i = 0; i < size_b; ++i){
     228:	b741                	j	1a8 <polymult+0x78>
            polb[i] = polb[i] + mod;
     22a:	974a                	add	a4,a4,s2
     22c:	b7e5                	j	214 <polymult+0xe4>
    if(star_mult == 1){
     22e:	85b6                	mv	a1,a3
        for (j = size_b -1; j >= 0; j = j-1){
     230:	0608d663          	bgez	a7,29c <polymult+0x16c>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     234:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     236:	0a974363          	blt	a4,s1,2dc <polymult+0x1ac>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(i = 0; i < size_b; ++i){
     23a:	4b01                	li	s6,0
        //for(j = 0; j < size_a + size_b -1; ++j){
            //product[j] += line[i][j];
		array_add(product,line[i],size_a+size_b-1);
     23c:	00001b97          	auipc	s7,0x1
     240:	09cb8b93          	addi	s7,s7,156 # 12d8 <_bss_start>
    for(i = 0; i < size_b; ++i){
     244:	089b4f63          	blt	s6,s1,2e2 <polymult+0x1b2>
     248:	00001797          	auipc	a5,0x1
     24c:	09078793          	addi	a5,a5,144 # 12d8 <_bss_start>
	
	
    }	

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     250:	4701                	li	a4,0
     252:	09474f63          	blt	a4,s4,2f0 <polymult+0x1c0>


    return_address1 = &product[0];

    return return_address1;
}
     256:	fd040113          	addi	sp,s0,-48
     25a:	50b2                	lw	ra,44(sp)
     25c:	5422                	lw	s0,40(sp)
     25e:	5492                	lw	s1,36(sp)
     260:	5902                	lw	s2,32(sp)
     262:	49f2                	lw	s3,28(sp)
     264:	4a62                	lw	s4,24(sp)
     266:	4ad2                	lw	s5,20(sp)
     268:	4b42                	lw	s6,16(sp)
     26a:	4bb2                	lw	s7,12(sp)
     26c:	00001517          	auipc	a0,0x1
     270:	06c50513          	addi	a0,a0,108 # 12d8 <_bss_start>
     274:	6145                	addi	sp,sp,48
     276:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     278:	00271613          	slli	a2,a4,0x2
     27c:	00c58533          	add	a0,a1,a2
     280:	961a                	add	a2,a2,t1
     282:	4210                	lw	a2,0(a2)
     284:	ffc7a803          	lw	a6,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     28a:	03060633          	mul	a2,a2,a6
     28e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     290:	fe0754e3          	bgez	a4,278 <polymult+0x148>
        for (j = size_b -1; j >= 0; j = j-1){
     294:	18fd                	addi	a7,a7,-1
     296:	17f1                	addi	a5,a5,-4
     298:	95ce                	add	a1,a1,s3
     29a:	bf59                	j	230 <polymult+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     29c:	8776                	mv	a4,t4
     29e:	bfcd                	j	290 <polymult+0x160>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a0:	00271613          	slli	a2,a4,0x2
     2a4:	00c80533          	add	a0,a6,a2
     2a8:	961a                	add	a2,a2,t1
     2aa:	4210                	lw	a2,0(a2)
     2ac:	ffc7ae03          	lw	t3,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b0:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b2:	03c60633          	mul	a2,a2,t3
     2b6:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	fe0754e3          	bgez	a4,2a0 <polymult+0x170>
        for (j = size_b -1; j >= 0; j = j-1){
     2bc:	18fd                	addi	a7,a7,-1
     2be:	17f1                	addi	a5,a5,-4
     2c0:	982e                	add	a6,a6,a1
     2c2:	bded                	j	1bc <polymult+0x8c>
            line[i][j] = line[i][j] % mod;
     2c4:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2c6:	0605                	addi	a2,a2,1
     2c8:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     2ca:	0325e5b3          	rem	a1,a1,s2
     2ce:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2d2:	ff4649e3          	blt	a2,s4,2c4 <polymult+0x194>
    for (i = 0; i < size_b; ++i){
     2d6:	0705                	addi	a4,a4,1
     2d8:	96ce                	add	a3,a3,s3
     2da:	bfb1                	j	236 <polymult+0x106>
     2dc:	87b6                	mv	a5,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     2de:	4601                	li	a2,0
     2e0:	bfcd                	j	2d2 <polymult+0x1a2>
		array_add(product,line[i],size_a+size_b-1);
     2e2:	85d6                	mv	a1,s5
     2e4:	8652                	mv	a2,s4
     2e6:	855e                	mv	a0,s7
     2e8:	336d                	jal	92 <array_add>
    for(i = 0; i < size_b; ++i){
     2ea:	0b05                	addi	s6,s6,1
     2ec:	9ace                	add	s5,s5,s3
     2ee:	bf99                	j	244 <polymult+0x114>
        product[j] = product[j] % mod;
     2f0:	4394                	lw	a3,0(a5)
    for(j = 0; j < size_a + size_b -1; ++j){
     2f2:	0705                	addi	a4,a4,1
     2f4:	0791                	addi	a5,a5,4
        product[j] = product[j] % mod;
     2f6:	0326e6b3          	rem	a3,a3,s2
     2fa:	fed7ae23          	sw	a3,-4(a5)
    for(j = 0; j < size_a + size_b -1; ++j){
     2fe:	bf91                	j	252 <polymult+0x122>

00000300 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	1101                	addi	sp,sp,-32
     302:	ca26                	sw	s1,20(sp)
     304:	84b6                	mv	s1,a3

    int line[size_b][size_a + size_b];
     306:	00d587b3          	add	a5,a1,a3
     30a:	00249893          	slli	a7,s1,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	c84a                	sw	s2,16(sp)
     310:	c64e                	sw	s3,12(sp)
    int line[size_b][size_a + size_b];
     312:	00279913          	slli	s2,a5,0x2
     316:	fff78993          	addi	s3,a5,-1
     31a:	02f887b3          	mul	a5,a7,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31e:	cc22                	sw	s0,24(sp)
     320:	c452                	sw	s4,8(sp)
     322:	c256                	sw	s5,4(sp)
     324:	ce06                	sw	ra,28(sp)
     326:	c05a                	sw	s6,0(sp)
     328:	1000                	addi	s0,sp,32
     32a:	832e                	mv	t1,a1
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     32c:	fff58e13          	addi	t3,a1,-1
    int line[size_b][size_a + size_b];
     330:	07bd                	addi	a5,a5,15
     332:	9bc1                	andi	a5,a5,-16
     334:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
     338:	00259793          	slli	a5,a1,0x2
     33c:	07bd                	addi	a5,a5,15
     33e:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     340:	880a                	mv	a6,sp
    int pola[size_a];
     342:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     346:	00f88793          	addi	a5,a7,15
     34a:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     34c:	858a                	mv	a1,sp
    int polb[size_b];
     34e:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     352:	16fd                	addi	a3,a3,-1
    int polb[size_b];
     354:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     356:	8a42                	mv	s4,a6
     358:	8fc2                	mv	t6,a6
     35a:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     35c:	00001a97          	auipc	s5,0x1
     360:	1d4a8a93          	addi	s5,s5,468 # 1530 <product2>
    for (i = 0; i < size_b; ++i){
     364:	049f4263          	blt	t5,s1,3a8 <polymult2+0xa8>
        }
    }

    for(i = 0; i < size_a; ++i){
     368:	4e81                	li	t4,0
     36a:	046ec263          	blt	t4,t1,3ae <polymult2+0xae>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     36e:	4501                	li	a0,0
     370:	04954a63          	blt	a0,s1,3c4 <polymult2+0xc4>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     374:	4605                	li	a2,1
     376:	97c6                	add	a5,a5,a7
     378:	08c70263          	beq	a4,a2,3fc <polymult2+0xfc>
     37c:	18f1                	addi	a7,a7,-4
     37e:	ffc90313          	addi	t1,s2,-4
     382:	9846                	add	a6,a6,a7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     384:	0606ce63          	bltz	a3,400 <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	8772                	mv	a4,t3
     38a:	a0c9                	j	44c <polymult2+0x14c>
            product2[j] = 0;
     38c:	002e9393          	slli	t2,t4,0x2
     390:	93d6                	add	t2,t2,s5
            line[i][j] = 0;
     392:	0002a023          	sw	zero,0(t0)
            product2[j] = 0;
     396:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
     39a:	0e85                	addi	t4,t4,1
     39c:	0291                	addi	t0,t0,4
     39e:	ff3ec7e3          	blt	t4,s3,38c <polymult2+0x8c>
    for (i = 0; i < size_b; ++i){
     3a2:	0f05                	addi	t5,t5,1
     3a4:	9fca                	add	t6,t6,s2
     3a6:	bf7d                	j	364 <polymult2+0x64>
     3a8:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     3aa:	4e81                	li	t4,0
     3ac:	bfcd                	j	39e <polymult2+0x9e>
        pola[i] = a[i];
     3ae:	002e9f13          	slli	t5,t4,0x2
     3b2:	01e58fb3          	add	t6,a1,t5
     3b6:	9f2a                	add	t5,t5,a0
     3b8:	000f2f03          	lw	t5,0(t5)
    for(i = 0; i < size_a; ++i){
     3bc:	0e85                	addi	t4,t4,1
        pola[i] = a[i];
     3be:	01efa023          	sw	t5,0(t6)
    for(i = 0; i < size_a; ++i){
     3c2:	b765                	j	36a <polymult2+0x6a>
        polb[i] = b[i];
     3c4:	00251313          	slli	t1,a0,0x2
     3c8:	00678eb3          	add	t4,a5,t1
     3cc:	9332                	add	t1,t1,a2
     3ce:	00032303          	lw	t1,0(t1)
    for(i = 0; i < size_b; ++i){
     3d2:	0505                	addi	a0,a0,1
        polb[i] = b[i];
     3d4:	006ea023          	sw	t1,0(t4)
    for(i = 0; i < size_b; ++i){
     3d8:	bf61                	j	370 <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3da:	00271613          	slli	a2,a4,0x2
     3de:	00c80533          	add	a0,a6,a2
     3e2:	962e                	add	a2,a2,a1
     3e4:	4210                	lw	a2,0(a2)
     3e6:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ea:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ec:	03160633          	mul	a2,a2,a7
     3f0:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f2:	fe0754e3          	bgez	a4,3da <polymult2+0xda>
        for (j = size_b -1; j >= 0; j = j-1){
     3f6:	16fd                	addi	a3,a3,-1
     3f8:	17f1                	addi	a5,a5,-4
     3fa:	984a                	add	a6,a6,s2
     3fc:	0206d963          	bgez	a3,42e <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	4a81                	li	s5,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //  product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
     402:	00001b17          	auipc	s6,0x1
     406:	12eb0b13          	addi	s6,s6,302 # 1530 <product2>
    for(i=0;i<size_b;++i){
     40a:	049ac763          	blt	s5,s1,458 <polymult2+0x158>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     40e:	fe040113          	addi	sp,s0,-32
     412:	40f2                	lw	ra,28(sp)
     414:	4462                	lw	s0,24(sp)
     416:	44d2                	lw	s1,20(sp)
     418:	4942                	lw	s2,16(sp)
     41a:	49b2                	lw	s3,12(sp)
     41c:	4a22                	lw	s4,8(sp)
     41e:	4a92                	lw	s5,4(sp)
     420:	4b02                	lw	s6,0(sp)
     422:	00001517          	auipc	a0,0x1
     426:	10e50513          	addi	a0,a0,270 # 1530 <product2>
     42a:	6105                	addi	sp,sp,32
     42c:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     42e:	8772                	mv	a4,t3
     430:	b7c9                	j	3f2 <polymult2+0xf2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     432:	00271513          	slli	a0,a4,0x2
     436:	00a808b3          	add	a7,a6,a0
     43a:	952e                	add	a0,a0,a1
     43c:	4110                	lw	a2,0(a0)
     43e:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     442:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     444:	02a60633          	mul	a2,a2,a0
     448:	00c8a023          	sw	a2,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	fe0753e3          	bgez	a4,432 <polymult2+0x132>
        for (j = size_b -1; j >= 0; j = j-1){
     450:	16fd                	addi	a3,a3,-1
     452:	17f1                	addi	a5,a5,-4
     454:	981a                	add	a6,a6,t1
     456:	b73d                	j	384 <polymult2+0x84>
        array_add(product2,line[i],size_a+size_b-1);
     458:	85d2                	mv	a1,s4
     45a:	864e                	mv	a2,s3
     45c:	855a                	mv	a0,s6
     45e:	3915                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     460:	0a85                	addi	s5,s5,1
     462:	9a4a                	add	s4,s4,s2
     464:	b75d                	j	40a <polymult2+0x10a>

00000466 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     466:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46a:	7139                	addi	sp,sp,-64
    int v[size_N];
     46c:	07bd                	addi	a5,a5,15
     46e:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     470:	dc22                	sw	s0,56(sp)
     472:	da26                	sw	s1,52(sp)
     474:	d84a                	sw	s2,48(sp)
     476:	d64e                	sw	s3,44(sp)
     478:	d452                	sw	s4,40(sp)
     47a:	d256                	sw	s5,36(sp)
     47c:	d05a                	sw	s6,32(sp)
     47e:	ce5e                	sw	s7,28(sp)
     480:	ca66                	sw	s9,20(sp)
     482:	c86a                	sw	s10,16(sp)
     484:	c66e                	sw	s11,12(sp)
     486:	de06                	sw	ra,60(sp)
     488:	cc62                	sw	s8,24(sp)
     48a:	0080                	addi	s0,sp,64
    int v[size_N];
     48c:	40f10133          	sub	sp,sp,a5
     490:	8a8a                	mv	s5,sp
    int q[size_N];
     492:	40f10133          	sub	sp,sp,a5
     496:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
     498:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     49c:	00269793          	slli	a5,a3,0x2
     4a0:	07bd                	addi	a5,a5,15
     4a2:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     4a4:	8b0a                	mv	s6,sp
    int denum_temp[size_D];
     4a6:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	89b6                	mv	s3,a3
     4ac:	893a                	mv	s2,a4
    int denum_temp[size_D];
     4ae:	fff68a13          	addi	s4,a3,-1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4b2:	84ae                	mv	s1,a1
    int v[size_N];
     4b4:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     4b8:	8d8a                	mv	s11,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     4ba:	8cda                	mv	s9,s6
     4bc:	875a                	mv	a4,s6
     4be:	4681                	li	a3,0
     4c0:	0296c663          	blt	a3,s1,4ec <polydiv+0x86>
     4c4:	876e                	mv	a4,s11
        num_temp[i] = num_temp[i] % mod;
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     4c6:	4681                	li	a3,0
     4c8:	0536c363          	blt	a3,s3,50e <polydiv+0xa8>
        }
        denum_temp[i] = denum_temp[i] % mod;
    }


    for (i = 0; i < size_N; ++i){
     4cc:	4781                	li	a5,0
     4ce:	0697c163          	blt	a5,s1,530 <polydiv+0xca>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4d2:	002a1793          	slli	a5,s4,0x2
     4d6:	97ee                	add	a5,a5,s11
     4d8:	4398                	lw	a4,0(a5)
     4da:	060a5663          	bgez	s4,546 <polydiv+0xe0>
    for (i = 0; i < size_N; ++i){
     4de:	4781                	li	a5,0
     4e0:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4e2:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4e4:	072c4463          	blt	s8,s2,54c <polydiv+0xe6>
     4e8:	87ea                	mv	a5,s10
     4ea:	a895                	j	55e <polydiv+0xf8>
        num_temp[i] = num[i];
     4ec:	00269793          	slli	a5,a3,0x2
     4f0:	97aa                	add	a5,a5,a0
     4f2:	439c                	lw	a5,0(a5)
            num_temp[i] = num_temp[i] + mod;
     4f4:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     4f6:	431c                	lw	a5,0(a4)
     4f8:	0007c963          	bltz	a5,50a <polydiv+0xa4>
        num_temp[i] = num_temp[i] % mod;
     4fc:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     500:	0685                	addi	a3,a3,1
     502:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     504:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     508:	bf65                	j	4c0 <polydiv+0x5a>
            num_temp[i] = num_temp[i] + mod;
     50a:	97ca                	add	a5,a5,s2
     50c:	b7e5                	j	4f4 <polydiv+0x8e>
        denum_temp[i] = denum[i];
     50e:	00269793          	slli	a5,a3,0x2
     512:	97b2                	add	a5,a5,a2
     514:	439c                	lw	a5,0(a5)
            denum_temp[i] = denum_temp[i] + mod;
     516:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     518:	431c                	lw	a5,0(a4)
     51a:	0007c963          	bltz	a5,52c <polydiv+0xc6>
        denum_temp[i] = denum_temp[i] % mod;
     51e:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     522:	0685                	addi	a3,a3,1
     524:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     526:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     52a:	bf79                	j	4c8 <polydiv+0x62>
            denum_temp[i] = denum_temp[i] + mod;
     52c:	97ca                	add	a5,a5,s2
     52e:	b7e5                	j	516 <polydiv+0xb0>
        q[i] = 0;
     530:	00279713          	slli	a4,a5,0x2
     534:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
     538:	9756                	add	a4,a4,s5
        q[i] = 0;
     53a:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     53e:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     542:	0785                	addi	a5,a5,1
     544:	b769                	j	4ce <polydiv+0x68>
        if( denum_temp[i] != 0 )
     546:	ff41                	bnez	a4,4de <polydiv+0x78>
    for (i = size_D-1; i >= 0; i = i-1){
     548:	1a7d                	addi	s4,s4,-1
     54a:	b761                	j	4d2 <polydiv+0x6c>
        if ( (b_N*u)%mod == 1 )
     54c:	0327e633          	rem	a2,a5,s2
     550:	97ba                	add	a5,a5,a4
     552:	f8d60be3          	beq	a2,a3,4e8 <polydiv+0x82>
    for (u = 0; u < mod; ++u){
     556:	0c05                	addi	s8,s8,1
     558:	b771                	j	4e4 <polydiv+0x7e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     55a:	eb01                	bnez	a4,56a <polydiv+0x104>
    for (i = size_N-1; i >= 0; i = i-1){
     55c:	17fd                	addi	a5,a5,-1
     55e:	00279713          	slli	a4,a5,0x2
     562:	975a                	add	a4,a4,s6
     564:	4318                	lw	a4,0(a4)
     566:	fe07dae3          	bgez	a5,55a <polydiv+0xf4>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     56a:	0547d663          	bge	a5,s4,5b6 <polydiv+0x150>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     56e:	4781                	li	a5,0
        result[i] = q[i];
     570:	00001697          	auipc	a3,0x1
     574:	21868693          	addi	a3,a3,536 # 1788 <result>
    for(i = 0; i < size_N; ++i){
     578:	1097cd63          	blt	a5,s1,692 <polydiv+0x22c>
    }
   
    for(i = size_N; i < (2*size_N); ++i){
     57c:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     580:	00001697          	auipc	a3,0x1
     584:	20868693          	addi	a3,a3,520 # 1788 <result>
    for(i = size_N; i < (2*size_N); ++i){
     588:	10e4ce63          	blt	s1,a4,6a4 <polydiv+0x23e>
    }

    return_address3 = &result[0];

    return return_address3;
}
     58c:	fc040113          	addi	sp,s0,-64
     590:	50f2                	lw	ra,60(sp)
     592:	5462                	lw	s0,56(sp)
     594:	54d2                	lw	s1,52(sp)
     596:	5942                	lw	s2,48(sp)
     598:	59b2                	lw	s3,44(sp)
     59a:	5a22                	lw	s4,40(sp)
     59c:	5a92                	lw	s5,36(sp)
     59e:	5b02                	lw	s6,32(sp)
     5a0:	4bf2                	lw	s7,28(sp)
     5a2:	4c62                	lw	s8,24(sp)
     5a4:	4cd2                	lw	s9,20(sp)
     5a6:	4d42                	lw	s10,16(sp)
     5a8:	4db2                	lw	s11,12(sp)
     5aa:	00001517          	auipc	a0,0x1
     5ae:	1de50513          	addi	a0,a0,478 # 1788 <result>
     5b2:	6121                	addi	sp,sp,64
     5b4:	8082                	ret
        v[(d-d2)] = u*r_d;
     5b6:	03870733          	mul	a4,a4,s8
     5ba:	414787b3          	sub	a5,a5,s4
     5be:	078a                	slli	a5,a5,0x2
     5c0:	97d6                	add	a5,a5,s5
     5c2:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     5c4:	87d6                	mv	a5,s5
     5c6:	4701                	li	a4,0
     5c8:	04974663          	blt	a4,s1,614 <polydiv+0x1ae>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5cc:	874a                	mv	a4,s2
     5ce:	86ce                	mv	a3,s3
     5d0:	4781                	li	a5,0
     5d2:	8656                	mv	a2,s5
     5d4:	85ce                	mv	a1,s3
     5d6:	856e                	mv	a0,s11
     5d8:	3ea1                	jal	130 <polymult>
        for (i = 0; i < size_N; ++i){
     5da:	872a                	mv	a4,a0
     5dc:	4681                	li	a3,0
     5de:	0496c563          	blt	a3,s1,628 <polydiv+0x1c2>
     5e2:	875a                	mv	a4,s6
        for (i = 0; i < size_N; ++i){
     5e4:	4781                	li	a5,0
     5e6:	0497cb63          	blt	a5,s1,63c <polydiv+0x1d6>
     5ea:	875a                	mv	a4,s6
        for (i = 0; i < size_N; ++i){
     5ec:	4681                	li	a3,0
     5ee:	0696c463          	blt	a3,s1,656 <polydiv+0x1f0>
        array_add(q, v, size_N);
     5f2:	8626                	mv	a2,s1
     5f4:	85d6                	mv	a1,s5
     5f6:	855e                	mv	a0,s7
     5f8:	3c69                	jal	92 <array_add>
        for(i = 0; i < size_N; ++i){
     5fa:	87de                	mv	a5,s7
     5fc:	4701                	li	a4,0
     5fe:	06974663          	blt	a4,s1,66a <polydiv+0x204>
        for (i = size_N-1; i >= 0; i = i-1){
     602:	87ea                	mv	a5,s10
     604:	00279713          	slli	a4,a5,0x2
     608:	975a                	add	a4,a4,s6
     60a:	4318                	lw	a4,0(a4)
     60c:	0607d763          	bgez	a5,67a <polydiv+0x214>
     610:	4681                	li	a3,0
     612:	a8ad                	j	68c <polydiv+0x226>
            v[i] = v[i] % mod;
     614:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     616:	0705                	addi	a4,a4,1
     618:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     61a:	0326e6b3          	rem	a3,a3,s2
     61e:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     622:	b75d                	j	5c8 <polydiv+0x162>
                product[i] = product[i] + mod;
     624:	97ca                	add	a5,a5,s2
     626:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     628:	431c                	lw	a5,0(a4)
     62a:	fe07cde3          	bltz	a5,624 <polydiv+0x1be>
            product[i] = product[i] % mod;
     62e:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     632:	0685                	addi	a3,a3,1
     634:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     636:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     63a:	b755                	j	5de <polydiv+0x178>
            num_temp[i] = num_temp[i] - product[i];
     63c:	00279613          	slli	a2,a5,0x2
     640:	962a                	add	a2,a2,a0
     642:	4314                	lw	a3,0(a4)
     644:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     646:	0785                	addi	a5,a5,1
     648:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     64a:	8e91                	sub	a3,a3,a2
     64c:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     650:	bf59                	j	5e6 <polydiv+0x180>
                num_temp[i] = num_temp[i] + mod;
     652:	97ca                	add	a5,a5,s2
     654:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     656:	431c                	lw	a5,0(a4)
     658:	fe07cde3          	bltz	a5,652 <polydiv+0x1ec>
            num_temp[i] = num_temp[i] % mod;
     65c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     660:	0685                	addi	a3,a3,1
     662:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     664:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     668:	b759                	j	5ee <polydiv+0x188>
            q[i] = q[i] % mod;
     66a:	4394                	lw	a3,0(a5)
        for(i = 0; i < size_N; ++i){
     66c:	0705                	addi	a4,a4,1
     66e:	0791                	addi	a5,a5,4
            q[i] = q[i] % mod;
     670:	0326e6b3          	rem	a3,a3,s2
     674:	fed7ae23          	sw	a3,-4(a5)
        for(i = 0; i < size_N; ++i){
     678:	b759                	j	5fe <polydiv+0x198>
            if( num_temp[i] != 0 )
     67a:	fb59                	bnez	a4,610 <polydiv+0x1aa>
        for (i = size_N-1; i >= 0; i = i-1){
     67c:	17fd                	addi	a5,a5,-1
     67e:	b759                	j	604 <polydiv+0x19e>
            v[i] = 0;
     680:	00269613          	slli	a2,a3,0x2
     684:	9656                	add	a2,a2,s5
     686:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     68a:	0685                	addi	a3,a3,1
     68c:	fe96cae3          	blt	a3,s1,680 <polydiv+0x21a>
     690:	bde9                	j	56a <polydiv+0x104>
        result[i] = q[i];
     692:	00279713          	slli	a4,a5,0x2
     696:	00e68633          	add	a2,a3,a4
     69a:	975e                	add	a4,a4,s7
     69c:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     69e:	0785                	addi	a5,a5,1
        result[i] = q[i];
     6a0:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     6a2:	bdd9                	j	578 <polydiv+0x112>
        result[i] = num_temp[i-size_N];
     6a4:	000ca603          	lw	a2,0(s9)
     6a8:	00249793          	slli	a5,s1,0x2
     6ac:	97b6                	add	a5,a5,a3
     6ae:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6b0:	0485                	addi	s1,s1,1
     6b2:	0c91                	addi	s9,s9,4
     6b4:	bdd1                	j	588 <polydiv+0x122>

000006b6 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6b6:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6bc:	07bd                	addi	a5,a5,15
     6be:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c0:	c4a2                	sw	s0,72(sp)
     6c2:	c2a6                	sw	s1,68(sp)
     6c4:	c0ca                	sw	s2,64(sp)
     6c6:	de4e                	sw	s3,60(sp)
     6c8:	dc52                	sw	s4,56(sp)
     6ca:	da56                	sw	s5,52(sp)
     6cc:	d85a                	sw	s6,48(sp)
     6ce:	d65e                	sw	s7,44(sp)
     6d0:	d266                	sw	s9,36(sp)
     6d2:	d06a                	sw	s10,32(sp)
     6d4:	ce6e                	sw	s11,28(sp)
     6d6:	c686                	sw	ra,76(sp)
     6d8:	d462                	sw	s8,40(sp)
     6da:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6dc:	40f10133          	sub	sp,sp,a5
     6e0:	8d0a                	mv	s10,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e2:	40f10133          	sub	sp,sp,a5
     6e6:	8d8a                	mv	s11,sp
    int ri[size];
     6e8:	40f10133          	sub	sp,sp,a5
     6ec:	8b0a                	mv	s6,sp

    int ti_1[size]; // ti_1[0] = 1
     6ee:	40f10133          	sub	sp,sp,a5
     6f2:	8a0a                	mv	s4,sp
    int ti[size];
     6f4:	40f10133          	sub	sp,sp,a5
     6f8:	8b8a                	mv	s7,sp
    int qi_1[size];
     6fa:	40f10133          	sub	sp,sp,a5
     6fe:	8a8a                	mv	s5,sp
    int temp[size];
     700:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     704:	84b6                	mv	s1,a3
     706:	8932                	mv	s2,a2
    int ri_2[size]; // MX-ring poly, a
     708:	fff60993          	addi	s3,a2,-1
    int temp[size];
     70c:	8c8a                	mv	s9,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     70e:	4781                	li	a5,0
     710:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     712:	00001697          	auipc	a3,0x1
     716:	2ce68693          	addi	a3,a3,718 # 19e0 <ti_2>
    for (i = 0; i < size; ++i) {
     71a:	01274b63          	blt	a4,s2,730 <ext_euclid+0x7a>

///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     71e:	4785                	li	a5,1
     720:	00fa2023          	sw	a5,0(s4)
            }
            ri_1[i] = ri_1[i] % mod;
        }

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     724:	00191793          	slli	a5,s2,0x1
     728:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     72c:	4681                	li	a3,0
     72e:	a0a9                	j	778 <ext_euclid+0xc2>
        ri_2[i] = polyR[i];
     730:	00f508b3          	add	a7,a0,a5
     734:	0008a883          	lw	a7,0(a7)
     738:	00fd0633          	add	a2,s10,a5
    for (i = 0; i < size; ++i) {
     73c:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     73e:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     742:	00f588b3          	add	a7,a1,a5
     746:	0008a883          	lw	a7,0(a7)
     74a:	00fd8633          	add	a2,s11,a5
     74e:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     752:	00f68633          	add	a2,a3,a5
     756:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     75a:	00fa0633          	add	a2,s4,a5
     75e:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     762:	0791                	addi	a5,a5,4
     764:	bf5d                	j	71a <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     766:	97a6                	add	a5,a5,s1
     768:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     76a:	431c                	lw	a5,0(a4)
     76c:	fe07cde3          	bltz	a5,766 <ext_euclid+0xb0>
            ri_2[i] = ri_2[i] % mod;
     770:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     774:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     776:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     778:	00d9c663          	blt	s3,a3,784 <ext_euclid+0xce>
     77c:	00269713          	slli	a4,a3,0x2
     780:	976a                	add	a4,a4,s10
     782:	b7e5                	j	76a <ext_euclid+0xb4>
     784:	876e                	mv	a4,s11
        for (i = 0; i < N + 1; ++i) {
     786:	4681                	li	a3,0
     788:	0cd9d063          	bge	s3,a3,848 <ext_euclid+0x192>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     78c:	8726                	mv	a4,s1
     78e:	86ca                	mv	a3,s2
     790:	866e                	mv	a2,s11
     792:	85ca                	mv	a1,s2
     794:	856a                	mv	a0,s10
     796:	39c1                	jal	466 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     798:	875a                	mv	a4,s6
     79a:	87ca                	mv	a5,s2
     79c:	fbc42683          	lw	a3,-68(s0)
     7a0:	0ad7ce63          	blt	a5,a3,85c <ext_euclid+0x1a6>
     7a4:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     7a6:	4701                	li	a4,0
     7a8:	0ce9d363          	bge	s3,a4,86e <ext_euclid+0x1b8>
     7ac:	8c66                	mv	s8,s9
     7ae:	8766                	mv	a4,s9
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7b0:	4681                	li	a3,0
     7b2:	0cd9dd63          	bge	s3,a3,88c <ext_euclid+0x1d6>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7b6:	8726                	mv	a4,s1
     7b8:	86ca                	mv	a3,s2
     7ba:	866e                	mv	a2,s11
     7bc:	85ca                	mv	a1,s2
     7be:	8566                	mv	a0,s9
     7c0:	315d                	jal	466 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     7c2:	4781                	li	a5,0
     7c4:	0cf9de63          	bge	s3,a5,8a0 <ext_euclid+0x1ea>
     7c8:	8756                	mv	a4,s5
            qi_1[i] = res1[i];
        }

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7ca:	4681                	li	a3,0
     7cc:	0ed9d563          	bge	s3,a3,8b6 <ext_euclid+0x200>
            qi_1[i] = qi_1[i] % mod;
        }

/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7d0:	4781                	li	a5,0
     7d2:	8726                	mv	a4,s1
     7d4:	86ca                	mv	a3,s2
     7d6:	8652                	mv	a2,s4
     7d8:	85ca                	mv	a1,s2
     7da:	8556                	mv	a0,s5
     7dc:	3a91                	jal	130 <polymult>
        for (i = 0; i < N + 1; ++i) {
     7de:	4781                	li	a5,0
     7e0:	0ef9d563          	bge	s3,a5,8ca <ext_euclid+0x214>
            temp[i] = res2[i];
        }

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     7e4:	4701                	li	a4,0
     7e6:	0ee9de63          	bge	s3,a4,8e2 <ext_euclid+0x22c>
     7ea:	4781                	li	a5,0
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        for (i = 0; i < N + 1; ++i) {
     7ec:	4701                	li	a4,0
     7ee:	10e9d563          	bge	s3,a4,8f8 <ext_euclid+0x242>
     7f2:	875e                	mv	a4,s7
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     7f4:	4681                	li	a3,0
     7f6:	12d9d363          	bge	s3,a3,91c <ext_euclid+0x266>
     7fa:	4781                	li	a5,0
        controlR = 0;
     7fc:	4701                	li	a4,0
        }

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///


        for (i = 0; i < N + 1; ++i) {
     7fe:	4681                	li	a3,0
     800:	12d9d863          	bge	s3,a3,930 <ext_euclid+0x27a>
    while (controlR != 0) {
     804:	f705                	bnez	a4,72c <ext_euclid+0x76>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     806:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     808:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     80a:	1697c463          	blt	a5,s1,972 <ext_euclid+0x2bc>
     80e:	00001617          	auipc	a2,0x1
     812:	1d260613          	addi	a2,a2,466 # 19e0 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     816:	16e9d863          	bge	s3,a4,986 <ext_euclid+0x2d0>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     81a:	fb040113          	addi	sp,s0,-80
     81e:	40b6                	lw	ra,76(sp)
     820:	4426                	lw	s0,72(sp)
     822:	4496                	lw	s1,68(sp)
     824:	4906                	lw	s2,64(sp)
     826:	59f2                	lw	s3,60(sp)
     828:	5a62                	lw	s4,56(sp)
     82a:	5ad2                	lw	s5,52(sp)
     82c:	5b42                	lw	s6,48(sp)
     82e:	5bb2                	lw	s7,44(sp)
     830:	5c22                	lw	s8,40(sp)
     832:	5c92                	lw	s9,36(sp)
     834:	5d02                	lw	s10,32(sp)
     836:	4df2                	lw	s11,28(sp)
     838:	00001517          	auipc	a0,0x1
     83c:	1a850513          	addi	a0,a0,424 # 19e0 <ti_2>
     840:	6161                	addi	sp,sp,80
     842:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     844:	97a6                	add	a5,a5,s1
     846:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     848:	431c                	lw	a5,0(a4)
     84a:	fe07cde3          	bltz	a5,844 <ext_euclid+0x18e>
            ri_1[i] = ri_1[i] % mod;
     84e:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     852:	0685                	addi	a3,a3,1
     854:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     856:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     85a:	b73d                	j	788 <ext_euclid+0xd2>
            ri[i - (N + 1)] = res[i];
     85c:	00279693          	slli	a3,a5,0x2
     860:	96aa                	add	a3,a3,a0
     862:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0785                	addi	a5,a5,1
     866:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     868:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	bf05                	j	79c <ext_euclid+0xe6>
            temp[i] = ri_2[i] - ri[i];
     86e:	00fd06b3          	add	a3,s10,a5
     872:	00fb05b3          	add	a1,s6,a5
     876:	4294                	lw	a3,0(a3)
     878:	418c                	lw	a1,0(a1)
     87a:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     87e:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     880:	8e8d                	sub	a3,a3,a1
     882:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     884:	0791                	addi	a5,a5,4
     886:	b70d                	j	7a8 <ext_euclid+0xf2>
                temp[i] = temp[i] + mod;
     888:	97a6                	add	a5,a5,s1
     88a:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     88c:	431c                	lw	a5,0(a4)
     88e:	fe07cde3          	bltz	a5,888 <ext_euclid+0x1d2>
            temp[i] = temp[i] % mod;
     892:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     896:	0685                	addi	a3,a3,1
     898:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     89a:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     89e:	bf11                	j	7b2 <ext_euclid+0xfc>
            qi_1[i] = res1[i];
     8a0:	00279713          	slli	a4,a5,0x2
     8a4:	00e506b3          	add	a3,a0,a4
     8a8:	4294                	lw	a3,0(a3)
     8aa:	9756                	add	a4,a4,s5
        for (i = 0; i < N + 1; ++i) {
     8ac:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     8ae:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     8b0:	bf11                	j	7c4 <ext_euclid+0x10e>
                qi_1[i] = qi_1[i] + mod;
     8b2:	97a6                	add	a5,a5,s1
     8b4:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     8b6:	431c                	lw	a5,0(a4)
     8b8:	fe07cde3          	bltz	a5,8b2 <ext_euclid+0x1fc>
            qi_1[i] = qi_1[i] % mod;
     8bc:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     8c0:	0685                	addi	a3,a3,1
     8c2:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     8c4:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8c8:	b711                	j	7cc <ext_euclid+0x116>
            temp[i] = res2[i];
     8ca:	00279713          	slli	a4,a5,0x2
     8ce:	00e506b3          	add	a3,a0,a4
     8d2:	4294                	lw	a3,0(a3)
     8d4:	9766                	add	a4,a4,s9
        for (i = 0; i < N + 1; ++i) {
     8d6:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     8d8:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     8da:	b719                	j	7e0 <ext_euclid+0x12a>
                temp[i] = temp[i] + mod;
     8dc:	97a6                	add	a5,a5,s1
     8de:	00fc2023          	sw	a5,0(s8)
            while (temp[i] < 0) {
     8e2:	000c2783          	lw	a5,0(s8)
     8e6:	fe07cbe3          	bltz	a5,8dc <ext_euclid+0x226>
            temp[i] = temp[i] % mod;
     8ea:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     8ee:	0705                	addi	a4,a4,1
     8f0:	0c11                	addi	s8,s8,4
            temp[i] = temp[i] % mod;
     8f2:	fefc2e23          	sw	a5,-4(s8)
        for (i = 0; i < N + 1; ++i) {
     8f6:	bdc5                	j	7e6 <ext_euclid+0x130>
            ti[i] = ti_2[i] - temp[i];
     8f8:	00001697          	auipc	a3,0x1
     8fc:	0e868693          	addi	a3,a3,232 # 19e0 <ti_2>
     900:	96be                	add	a3,a3,a5
     902:	00fc85b3          	add	a1,s9,a5
     906:	4294                	lw	a3,0(a3)
     908:	418c                	lw	a1,0(a1)
     90a:	00fb8633          	add	a2,s7,a5
        for (i = 0; i < N + 1; ++i) {
     90e:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     910:	8e8d                	sub	a3,a3,a1
     912:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     914:	0791                	addi	a5,a5,4
     916:	bde1                	j	7ee <ext_euclid+0x138>
                ti[i] = ti[i] + mod;
     918:	97a6                	add	a5,a5,s1
     91a:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     91c:	431c                	lw	a5,0(a4)
     91e:	fe07cde3          	bltz	a5,918 <ext_euclid+0x262>
            ti[i] = ti[i] % mod;
     922:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     926:	0685                	addi	a3,a3,1
     928:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     92a:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     92e:	b5e1                	j	7f6 <ext_euclid+0x140>
            ri_2[i] = ri_1[i];
     930:	00fd85b3          	add	a1,s11,a5
     934:	4188                	lw	a0,0(a1)
     936:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     93a:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     93c:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     93e:	00fb0633          	add	a2,s6,a5
     942:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     944:	00001517          	auipc	a0,0x1
     948:	09c50513          	addi	a0,a0,156 # 19e0 <ti_2>
     94c:	953e                	add	a0,a0,a5
            ri_1[i] = ri[i];
     94e:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     950:	00fa05b3          	add	a1,s4,a5
     954:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     958:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     95a:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     95e:	00fb8533          	add	a0,s7,a5
     962:	4108                	lw	a0,0(a0)
     964:	c188                	sw	a0,0(a1)
              qi_1[i] = 0;
     966:	00fa85b3          	add	a1,s5,a5
     96a:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     96e:	0791                	addi	a5,a5,4
     970:	bd41                	j	800 <ext_euclid+0x14a>
            if (((ri_2[0] * j) % mod) == 1)
     972:	000d2683          	lw	a3,0(s10)
     976:	02d786b3          	mul	a3,a5,a3
     97a:	0296e6b3          	rem	a3,a3,s1
     97e:	e8c688e3          	beq	a3,a2,80e <ext_euclid+0x158>
        for (j = 0; j < mod; ++j) {
     982:	0785                	addi	a5,a5,1
     984:	b559                	j	80a <ext_euclid+0x154>
            ti_2[i] = (ti_2[i] * j) % mod;
     986:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     988:	0705                	addi	a4,a4,1
     98a:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     98c:	02d786b3          	mul	a3,a5,a3
     990:	0296e6b3          	rem	a3,a3,s1
     994:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     998:	bdbd                	j	816 <ext_euclid+0x160>

0000099a <generate_keys>:




int* generate_keys(int N, int p, int q){
     99a:	7101                	addi	sp,sp,-512
     99c:	1e112e23          	sw	ra,508(sp)
     9a0:	1e812c23          	sw	s0,504(sp)
     9a4:	1e912a23          	sw	s1,500(sp)
     9a8:	0400                	addi	s0,sp,512
     9aa:	1f212823          	sw	s2,496(sp)
     9ae:	1f312623          	sw	s3,492(sp)
     9b2:	1f412423          	sw	s4,488(sp)
     9b6:	1f512223          	sw	s5,484(sp)
     9ba:	1f612023          	sw	s6,480(sp)
     9be:	1d712e23          	sw	s7,476(sp)
     9c2:	1d812c23          	sw	s8,472(sp)
     9c6:	1db12623          	sw	s11,460(sp)
     9ca:	1d912a23          	sw	s9,468(sp)
     9ce:	1da12823          	sw	s10,464(sp)
    resultkon[0] = 0xaaaaaaa0;
     9d2:	aaaab7b7          	lui	a5,0xaaaab
     9d6:	aa078793          	addi	a5,a5,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
int* generate_keys(int N, int p, int q){
     9da:	892a                	mv	s2,a0
     9dc:	8c2e                	mv	s8,a1
     9de:	8bb2                	mv	s7,a2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e0:	4581                	li	a1,0
     9e2:	0d000613          	li	a2,208
    resultkon[0] = 0xaaaaaaa0;
     9e6:	00001a97          	auipc	s5,0x1
     9ea:	8eea8a93          	addi	s5,s5,-1810 # 12d4 <_edata>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ee:	e1440513          	addi	a0,s0,-492
    resultkon[0] = 0xaaaaaaa0;
     9f2:	00faa023          	sw	a5,0(s5)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9f6:	237d                	jal	fa4 <memset>
     9f8:	4485                	li	s1,1
     9fa:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fc:	0d800613          	li	a2,216
     a00:	4581                	li	a1,0
     a02:	ee840513          	addi	a0,s0,-280
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a06:	e1342423          	sw	s3,-504(s0)
     a0a:	e0942623          	sw	s1,-500(s0)
     a0e:	e0942823          	sw	s1,-496(s0)
     a12:	e1342c23          	sw	s3,-488(s0)
     a16:	e2942023          	sw	s1,-480(s0)
     a1a:	e2942623          	sw	s1,-468(s0)
     a1e:	e3342823          	sw	s3,-464(s0)
     a22:	e3342a23          	sw	s3,-460(s0)
     a26:	e2942e23          	sw	s1,-452(s0)
     a2a:	e5342223          	sw	s3,-444(s0)
     a2e:	e4942623          	sw	s1,-436(s0)
     a32:	e4942823          	sw	s1,-432(s0)
     a36:	e5342e23          	sw	s3,-420(s0)
     a3a:	e6942223          	sw	s1,-412(s0)
     a3e:	e6942823          	sw	s1,-400(s0)
     a42:	e6942a23          	sw	s1,-396(s0)
     a46:	e6942c23          	sw	s1,-392(s0)
     a4a:	e7342e23          	sw	s3,-388(s0)
     a4e:	e8942223          	sw	s1,-380(s0)
     a52:	e8942823          	sw	s1,-368(s0)
     a56:	e8942a23          	sw	s1,-364(s0)
     a5a:	e8942c23          	sw	s1,-360(s0)
     a5e:	e9342e23          	sw	s3,-356(s0)
     a62:	ea942223          	sw	s1,-348(s0)
     a66:	ea942823          	sw	s1,-336(s0)
     a6a:	ea942a23          	sw	s1,-332(s0)
     a6e:	ea942c23          	sw	s1,-328(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     a72:	00190b13          	addi	s6,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a76:	233d                	jal	fa4 <memset>
    int polyR[N+1];
     a78:	002b1793          	slli	a5,s6,0x2
     a7c:	07bd                	addi	a5,a5,15
     a7e:	9bc1                	andi	a5,a5,-16
     a80:	40f10133          	sub	sp,sp,a5
     a84:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a86:	00291d93          	slli	s11,s2,0x2
     a8a:	01ba07b3          	add	a5,s4,s11
     a8e:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a90:	ef342223          	sw	s3,-284(s0)
     a94:	ee942623          	sw	s1,-276(s0)
     a98:	ee942823          	sw	s1,-272(s0)
     a9c:	ee942c23          	sw	s1,-264(s0)
     aa0:	f1342223          	sw	s3,-252(s0)
     aa4:	f1342623          	sw	s3,-244(s0)
     aa8:	f1342823          	sw	s3,-240(s0)
     aac:	f0942c23          	sw	s1,-232(s0)
     ab0:	f3342023          	sw	s3,-224(s0)
     ab4:	f2942423          	sw	s1,-216(s0)
     ab8:	f2942a23          	sw	s1,-204(s0)
     abc:	f3342c23          	sw	s3,-200(s0)
     ac0:	f4942023          	sw	s1,-192(s0)
     ac4:	f4942623          	sw	s1,-180(s0)
     ac8:	f5342823          	sw	s3,-176(s0)
     acc:	f4942c23          	sw	s1,-168(s0)
     ad0:	f6942223          	sw	s1,-156(s0)
     ad4:	f7342423          	sw	s3,-152(s0)
     ad8:	f6942823          	sw	s1,-144(s0)
     adc:	f6942c23          	sw	s1,-136(s0)
     ae0:	f6942e23          	sw	s1,-132(s0)
     ae4:	f8942423          	sw	s1,-120(s0)
     ae8:	f9342623          	sw	s3,-116(s0)
     aec:	f8942a23          	sw	s1,-108(s0)
     af0:	f8942e23          	sw	s1,-100(s0)
    polyR[0] = -1;
     af4:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     af8:	4785                	li	a5,1
     afa:	1127cb63          	blt	a5,s2,c10 <generate_keys+0x276>
     afe:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     b00:	03600693          	li	a3,54
     b04:	10f6dd63          	bge	a3,a5,c1e <generate_keys+0x284>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     b08:	4781                	li	a5,0
        random_keys[i] = f[i];
     b0a:	00001697          	auipc	a3,0x1
     b0e:	06668693          	addi	a3,a3,102 # 1b70 <random_keys>
    for(i = 0; i < N; ++i){
     b12:	1327c463          	blt	a5,s2,c3a <generate_keys+0x2a0>
     b16:	ee440713          	addi	a4,s0,-284
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     b1a:	00191993          	slli	s3,s2,0x1
     b1e:	87ca                	mv	a5,s2
     b20:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     b22:	00001617          	auipc	a2,0x1
     b26:	04e60613          	addi	a2,a2,78 # 1b70 <random_keys>
    for(i = N; i < (2*N); ++i){
     b2a:	1337c363          	blt	a5,s3,c50 <generate_keys+0x2b6>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     b2e:	448d                	li	s1,3
     b30:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     b34:	86e2                	mv	a3,s8
     b36:	865a                	mv	a2,s6
     b38:	e0840593          	addi	a1,s0,-504
     b3c:	8552                	mv	a0,s4
     b3e:	3ea5                	jal	6b6 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     b40:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     b42:	00001697          	auipc	a3,0x1
     b46:	02e68693          	addi	a3,a3,46 # 1b70 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     b4a:	1097cb63          	blt	a5,s1,c60 <generate_keys+0x2c6>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     b4e:	865a                	mv	a2,s6
     b50:	86de                	mv	a3,s7
     b52:	e0840593          	addi	a1,s0,-504
     b56:	8552                	mv	a0,s4
     b58:	3eb9                	jal	6b6 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     b5a:	5751                	li	a4,-12
     b5c:	02e90733          	mul	a4,s2,a4
     b60:	8d6e                	mv	s10,s11
        random_keys[i] = fq[i-(3*N)];
     b62:	00001617          	auipc	a2,0x1
     b66:	00e60613          	addi	a2,a2,14 # 1b70 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     b6a:	11b4c363          	blt	s1,s11,c70 <generate_keys+0x2d6>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     b6e:	4701                	li	a4,0
     b70:	85ca                	mv	a1,s2
     b72:	86ca                	mv	a3,s2
     b74:	8666                	mv	a2,s9
     b76:	f8aff0ef          	jal	ra,300 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     b7a:	87aa                	mv	a5,a0
     b7c:	4701                	li	a4,0
     b7e:	fff98593          	addi	a1,s3,-1
     b82:	10b74163          	blt	a4,a1,c84 <generate_keys+0x2ea>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b86:	86da                	mv	a3,s6
     b88:	875e                	mv	a4,s7
     b8a:	8652                	mv	a2,s4
     b8c:	38e9                	jal	466 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b8e:	4795                	li	a5,5
     b90:	02f907b3          	mul	a5,s2,a5
     b94:	098a                	slli	s3,s3,0x2
     b96:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b98:	00001697          	auipc	a3,0x1
     b9c:	fd868693          	addi	a3,a3,-40 # 1b70 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     ba0:	0991                	addi	s3,s3,4
     ba2:	0efd4963          	blt	s10,a5,c94 <generate_keys+0x2fa>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	4699                	li	a3,6
     ba8:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     baa:	00001617          	auipc	a2,0x1
     bae:	fc660613          	addi	a2,a2,-58 # 1b70 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     bb2:	02d906b3          	mul	a3,s2,a3
     bb6:	02a90933          	mul	s2,s2,a0
     bba:	0ef6d563          	bge	a3,a5,ca4 <generate_keys+0x30a>
    }
    //////// RANDOM KEYS TAŞTI? ARRAY 300LÜK YERE SAHİP AMA 318'E KADAR DOLDURULUYOR? ///////


    return_address5 = &random_keys[0];
    resultkon[0] = 0xaaaaaaa1;
     bbe:	aaaab7b7          	lui	a5,0xaaaab
     bc2:	aa178793          	addi	a5,a5,-1375 # aaaaaaa1 <_stack_start+0xaaa9aaa1>
     bc6:	00faa023          	sw	a5,0(s5)
    return return_address5;
}
     bca:	e0040113          	addi	sp,s0,-512
     bce:	1fc12083          	lw	ra,508(sp)
     bd2:	1f812403          	lw	s0,504(sp)
     bd6:	1f412483          	lw	s1,500(sp)
     bda:	1f012903          	lw	s2,496(sp)
     bde:	1ec12983          	lw	s3,492(sp)
     be2:	1e812a03          	lw	s4,488(sp)
     be6:	1e412a83          	lw	s5,484(sp)
     bea:	1e012b03          	lw	s6,480(sp)
     bee:	1dc12b83          	lw	s7,476(sp)
     bf2:	1d812c03          	lw	s8,472(sp)
     bf6:	1d412c83          	lw	s9,468(sp)
     bfa:	1d012d03          	lw	s10,464(sp)
     bfe:	1cc12d83          	lw	s11,460(sp)
     c02:	00001517          	auipc	a0,0x1
     c06:	f6e50513          	addi	a0,a0,-146 # 1b70 <random_keys>
     c0a:	20010113          	addi	sp,sp,512
     c0e:	8082                	ret
        polyR[i] = 0;
     c10:	00279713          	slli	a4,a5,0x2
     c14:	9752                	add	a4,a4,s4
     c16:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     c1a:	0785                	addi	a5,a5,1
     c1c:	bdf9                	j	afa <generate_keys+0x160>
        f[i] = 0;
     c1e:	00279713          	slli	a4,a5,0x2
     c22:	e0840613          	addi	a2,s0,-504
     c26:	963a                	add	a2,a2,a4
     c28:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     c2c:	ee440613          	addi	a2,s0,-284
     c30:	9732                	add	a4,a4,a2
     c32:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     c36:	0785                	addi	a5,a5,1
     c38:	b5f1                	j	b04 <generate_keys+0x16a>
        random_keys[i] = f[i];
     c3a:	00279713          	slli	a4,a5,0x2
     c3e:	e0840593          	addi	a1,s0,-504
     c42:	00e68633          	add	a2,a3,a4
     c46:	972e                	add	a4,a4,a1
     c48:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     c4a:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     c4c:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     c4e:	b5d1                	j	b12 <generate_keys+0x178>
        random_keys[i] = g[i-N];
     c50:	430c                	lw	a1,0(a4)
     c52:	00279693          	slli	a3,a5,0x2
     c56:	96b2                	add	a3,a3,a2
     c58:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     c5a:	0785                	addi	a5,a5,1
     c5c:	0711                	addi	a4,a4,4
     c5e:	b5f1                	j	b2a <generate_keys+0x190>
        random_keys[i] = fp[i-(2*N)];
     c60:	4110                	lw	a2,0(a0)
     c62:	00279713          	slli	a4,a5,0x2
     c66:	9736                	add	a4,a4,a3
     c68:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c6a:	0785                	addi	a5,a5,1
     c6c:	0511                	addi	a0,a0,4
     c6e:	bdf1                	j	b4a <generate_keys+0x1b0>
        random_keys[i] = fq[i-(3*N)];
     c70:	00249793          	slli	a5,s1,0x2
     c74:	00f706b3          	add	a3,a4,a5
     c78:	96aa                	add	a3,a3,a0
     c7a:	4294                	lw	a3,0(a3)
     c7c:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     c7e:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     c80:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     c82:	b5e5                	j	b6a <generate_keys+0x1d0>
        fg[i] = fg[i]*p;
     c84:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     c86:	0705                	addi	a4,a4,1
     c88:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     c8a:	038686b3          	mul	a3,a3,s8
     c8e:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     c92:	bdc5                	j	b82 <generate_keys+0x1e8>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c94:	ff89a603          	lw	a2,-8(s3)
     c98:	002d1713          	slli	a4,s10,0x2
     c9c:	9736                	add	a4,a4,a3
     c9e:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     ca0:	0d05                	addi	s10,s10,1
     ca2:	bdfd                	j	ba0 <generate_keys+0x206>
        random_keys[i] = polyR[i-(5*N)];
     ca4:	00279713          	slli	a4,a5,0x2
     ca8:	00e605b3          	add	a1,a2,a4
     cac:	974a                	add	a4,a4,s2
     cae:	9752                	add	a4,a4,s4
     cb0:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     cb2:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     cb4:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     cb6:	b711                	j	bba <generate_keys+0x220>

00000cb8 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	7115                	addi	sp,sp,-224
    resultkon[0] = 0xbbbbbbb0;
     cba:	bbbbc7b7          	lui	a5,0xbbbbc
     cbe:	bb078793          	addi	a5,a5,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cc2:	cda2                	sw	s0,216(sp)
     cc4:	cba6                	sw	s1,212(sp)
     cc6:	842a                	mv	s0,a0
     cc8:	84b2                	mv	s1,a2
     cca:	c9ca                	sw	s2,208(sp)
     ccc:	c7ce                	sw	s3,204(sp)
    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cce:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cd2:	89ae                	mv	s3,a1
    resultkon[0] = 0xbbbbbbb0;
     cd4:	00000917          	auipc	s2,0x0
     cd8:	60090913          	addi	s2,s2,1536 # 12d4 <_edata>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cdc:	00000597          	auipc	a1,0x0
     ce0:	47858593          	addi	a1,a1,1144 # 1154 <__DTOR_END__>
     ce4:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ce6:	cf86                	sw	ra,220(sp)
     ce8:	c5d2                	sw	s4,200(sp)
     cea:	c3d6                	sw	s5,196(sp)
     cec:	8a36                	mv	s4,a3
     cee:	8aba                	mv	s5,a4
    resultkon[0] = 0xbbbbbbb0;
     cf0:	00f92023          	sw	a5,0(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cf4:	2ac9                	jal	ec6 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     cf6:	4781                	li	a5,0
     cf8:	874e                	mv	a4,s3
     cfa:	03000693          	li	a3,48
     cfe:	85a2                	mv	a1,s0
     d00:	860a                	mv	a2,sp
     d02:	8552                	mv	a0,s4
     d04:	c2cff0ef          	jal	ra,130 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     d08:	85a6                	mv	a1,s1
     d0a:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     d0e:	8a2a                	mv	s4,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d10:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     d14:	b7eff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d18:	00140693          	addi	a3,s0,1
     d1c:	874e                	mv	a4,s3
     d1e:	8656                	mv	a2,s5
     d20:	85a6                	mv	a1,s1
     d22:	8552                	mv	a0,s4
     d24:	f42ff0ef          	jal	ra,466 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     d28:	478d                	li	a5,3
     d2a:	02f40433          	mul	s0,s0,a5
     d2e:	87aa                	mv	a5,a0
     d30:	0284c163          	blt	s1,s0,d52 <ntru_encyrpt+0x9a>


    return_address6 = &CT[0];
    resultkon[0] = 0xbbbbbbb1;
    return return_address6;
}
     d34:	40fe                	lw	ra,220(sp)
     d36:	446e                	lw	s0,216(sp)
    resultkon[0] = 0xbbbbbbb1;
     d38:	bbbbc7b7          	lui	a5,0xbbbbc
     d3c:	bb178793          	addi	a5,a5,-1103 # bbbbbbb1 <_stack_start+0xbbbabbb1>
     d40:	00f92023          	sw	a5,0(s2)
}
     d44:	44de                	lw	s1,212(sp)
     d46:	494e                	lw	s2,208(sp)
     d48:	49be                	lw	s3,204(sp)
     d4a:	4a2e                	lw	s4,200(sp)
     d4c:	4a9e                	lw	s5,196(sp)
     d4e:	612d                	addi	sp,sp,224
     d50:	8082                	ret
        CT[i-(2*N)] = CT[i];
     d52:	00249713          	slli	a4,s1,0x2
     d56:	972a                	add	a4,a4,a0
     d58:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     d5a:	0485                	addi	s1,s1,1
     d5c:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     d5e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     d62:	b7f9                	j	d30 <ntru_encyrpt+0x78>

00000d64 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d64:	7179                	addi	sp,sp,-48
     d66:	d422                	sw	s0,40(sp)
     d68:	cc52                	sw	s4,24(sp)
     d6a:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	4a0d                	li	s4,3
     d6e:	03440a33          	mul	s4,s0,s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d72:	c462                	sw	s8,8(sp)
     d74:	8c3a                	mv	s8,a4
 resultkon[0] = 0xccccccc0;
     d76:	ccccd737          	lui	a4,0xccccd
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7a:	ce4e                	sw	s3,28(sp)
 resultkon[0] = 0xccccccc0;
     d7c:	cc070713          	addi	a4,a4,-832 # ccccccc0 <_stack_start+0xcccbccc0>
     d80:	00000997          	auipc	s3,0x0
     d84:	55498993          	addi	s3,s3,1364 # 12d4 <_edata>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d88:	d04a                	sw	s2,32(sp)
     d8a:	c85a                	sw	s6,16(sp)
     d8c:	8932                	mv	s2,a2
     d8e:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d90:	863e                	mv	a2,a5
 resultkon[0] = 0xccccccc0;
     d92:	00e9a023          	sw	a4,0(s3)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d96:	86a2                	mv	a3,s0
     d98:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9a:	8b2e                	mv	s6,a1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9c:	85a2                	mv	a1,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	d606                	sw	ra,44(sp)
     da0:	d226                	sw	s1,36(sp)
     da2:	ca56                	sw	s5,20(sp)
     da4:	c65e                	sw	s7,12(sp)
     da6:	8ac2                	mv	s5,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     da8:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dac:	d54ff0ef          	jal	ra,300 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db0:	00140b93          	addi	s7,s0,1
     db4:	874a                	mv	a4,s2
     db6:	86de                	mv	a3,s7
     db8:	8656                	mv	a2,s5
     dba:	85a6                	mv	a1,s1
     dbc:	eaaff0ef          	jal	ra,466 <polydiv>
     dc0:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc2:	87aa                	mv	a5,a0
     dc4:	872a                	mv	a4,a0
     dc6:	86a6                	mv	a3,s1
     dc8:	0546c963          	blt	a3,s4,e1a <ntru_deceypt+0xb6>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     dcc:	4589                	li	a1,2
     dce:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     dd2:	4701                	li	a4,0
     dd4:	04874c63          	blt	a4,s0,e2c <ntru_deceypt+0xc8>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     dd8:	4701                	li	a4,0
     dda:	86a2                	mv	a3,s0
     ddc:	85a2                	mv	a1,s0
     dde:	8562                	mv	a0,s8
     de0:	d20ff0ef          	jal	ra,300 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de4:	875a                	mv	a4,s6
     de6:	86de                	mv	a3,s7
     de8:	8656                	mv	a2,s5
     dea:	85a6                	mv	a1,s1
     dec:	e7aff0ef          	jal	ra,466 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     df0:	87aa                	mv	a5,a0
     df2:	0544c663          	blt	s1,s4,e3e <ntru_deceypt+0xda>
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    resultkon[0] = 0xccccccc1;	
    return return_address7;
}
     df6:	50b2                	lw	ra,44(sp)
     df8:	5422                	lw	s0,40(sp)
    resultkon[0] = 0xccccccc1;	
     dfa:	ccccd7b7          	lui	a5,0xccccd
     dfe:	cc178793          	addi	a5,a5,-831 # ccccccc1 <_stack_start+0xcccbccc1>
     e02:	00f9a023          	sw	a5,0(s3)
}
     e06:	5492                	lw	s1,36(sp)
     e08:	5902                	lw	s2,32(sp)
     e0a:	49f2                	lw	s3,28(sp)
     e0c:	4a62                	lw	s4,24(sp)
     e0e:	4ad2                	lw	s5,20(sp)
     e10:	4b42                	lw	s6,16(sp)
     e12:	4bb2                	lw	s7,12(sp)
     e14:	4c22                	lw	s8,8(sp)
     e16:	6145                	addi	sp,sp,48
     e18:	8082                	ret
        a2[i-(2*N)] = a2[i];
     e1a:	00269593          	slli	a1,a3,0x2
     e1e:	95b2                	add	a1,a1,a2
     e20:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e22:	0685                	addi	a3,a3,1
     e24:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     e26:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	bf79                	j	dc8 <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     e2c:	4394                	lw	a3,0(a5)
     e2e:	00d5d563          	bge	a1,a3,e38 <ntru_deceypt+0xd4>
            a2[i] = (-1)*(q-a2[i]);
     e32:	412686b3          	sub	a3,a3,s2
     e36:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     e38:	0705                	addi	a4,a4,1
     e3a:	0791                	addi	a5,a5,4
     e3c:	bf61                	j	dd4 <ntru_deceypt+0x70>
        c2[i-(2*N)] = c2[i];
     e3e:	00249713          	slli	a4,s1,0x2
     e42:	972a                	add	a4,a4,a0
     e44:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e46:	0485                	addi	s1,s1,1
     e48:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     e4a:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4e:	b755                	j	df2 <ntru_deceypt+0x8e>

00000e50 <default_exc_handler>:
  jal x0, default_exc_handler
     e50:	0000006f          	j	e50 <default_exc_handler>

00000e54 <reset_handler>:
  mv  x1, x0
     e54:	00000093          	li	ra,0
  mv  x2, x1
     e58:	8106                	mv	sp,ra
  mv  x3, x1
     e5a:	8186                	mv	gp,ra
  mv  x4, x1
     e5c:	8206                	mv	tp,ra
  mv  x5, x1
     e5e:	8286                	mv	t0,ra
  mv  x6, x1
     e60:	8306                	mv	t1,ra
  mv  x7, x1
     e62:	8386                	mv	t2,ra
  mv  x8, x1
     e64:	8406                	mv	s0,ra
  mv  x9, x1
     e66:	8486                	mv	s1,ra
  mv x10, x1
     e68:	8506                	mv	a0,ra
  mv x11, x1
     e6a:	8586                	mv	a1,ra
  mv x12, x1
     e6c:	8606                	mv	a2,ra
  mv x13, x1
     e6e:	8686                	mv	a3,ra
  mv x14, x1
     e70:	8706                	mv	a4,ra
  mv x15, x1
     e72:	8786                	mv	a5,ra
  mv x16, x1
     e74:	8806                	mv	a6,ra
  mv x17, x1
     e76:	8886                	mv	a7,ra
  mv x18, x1
     e78:	8906                	mv	s2,ra
  mv x19, x1
     e7a:	8986                	mv	s3,ra
  mv x20, x1
     e7c:	8a06                	mv	s4,ra
  mv x21, x1
     e7e:	8a86                	mv	s5,ra
  mv x22, x1
     e80:	8b06                	mv	s6,ra
  mv x23, x1
     e82:	8b86                	mv	s7,ra
  mv x24, x1
     e84:	8c06                	mv	s8,ra
  mv x25, x1
     e86:	8c86                	mv	s9,ra
  mv x26, x1
     e88:	8d06                	mv	s10,ra
  mv x27, x1
     e8a:	8d86                	mv	s11,ra
  mv x28, x1
     e8c:	8e06                	mv	t3,ra
  mv x29, x1
     e8e:	8e86                	mv	t4,ra
  mv x30, x1
     e90:	8f06                	mv	t5,ra
  mv x31, x1
     e92:	8f86                	mv	t6,ra
  la   x2, _stack_start
     e94:	0000f117          	auipc	sp,0xf
     e98:	16c10113          	addi	sp,sp,364 # 10000 <_stack_start>

00000e9c <_start>:
  la x26, _bss_start
     e9c:	00000d17          	auipc	s10,0x0
     ea0:	43cd0d13          	addi	s10,s10,1084 # 12d8 <_bss_start>
  la x27, _bss_end
     ea4:	00001d97          	auipc	s11,0x1
     ea8:	1c4d8d93          	addi	s11,s11,452 # 2068 <_bss_end>
  bge x26, x27, zero_loop_end
     eac:	01bd5763          	bge	s10,s11,eba <main_entry>

00000eb0 <zero_loop>:
  sw x0, 0(x26)
     eb0:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     eb4:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     eb6:	ffaddde3          	bge	s11,s10,eb0 <zero_loop>

00000eba <main_entry>:
  addi x10, x0, 0
     eba:	00000513          	li	a0,0
  addi x11, x0, 0
     ebe:	00000593          	li	a1,0
  jal x1, main
     ec2:	18a000ef          	jal	ra,104c <main>

00000ec6 <memcpy>:
     ec6:	00a5c7b3          	xor	a5,a1,a0
     eca:	8b8d                	andi	a5,a5,3
     ecc:	00c508b3          	add	a7,a0,a2
     ed0:	e7a1                	bnez	a5,f18 <memcpy+0x52>
     ed2:	478d                	li	a5,3
     ed4:	04c7f263          	bgeu	a5,a2,f18 <memcpy+0x52>
     ed8:	00357793          	andi	a5,a0,3
     edc:	872a                	mv	a4,a0
     ede:	eba9                	bnez	a5,f30 <memcpy+0x6a>
     ee0:	ffc8f613          	andi	a2,a7,-4
     ee4:	fe060793          	addi	a5,a2,-32
     ee8:	06f76763          	bltu	a4,a5,f56 <memcpy+0x90>
     eec:	02c77363          	bgeu	a4,a2,f12 <memcpy+0x4c>
     ef0:	86ae                	mv	a3,a1
     ef2:	87ba                	mv	a5,a4
     ef4:	0006a803          	lw	a6,0(a3)
     ef8:	0791                	addi	a5,a5,4
     efa:	0691                	addi	a3,a3,4
     efc:	ff07ae23          	sw	a6,-4(a5)
     f00:	fec7eae3          	bltu	a5,a2,ef4 <memcpy+0x2e>
     f04:	fff60793          	addi	a5,a2,-1
     f08:	8f99                	sub	a5,a5,a4
     f0a:	9bf1                	andi	a5,a5,-4
     f0c:	0791                	addi	a5,a5,4
     f0e:	973e                	add	a4,a4,a5
     f10:	95be                	add	a1,a1,a5
     f12:	01176663          	bltu	a4,a7,f1e <memcpy+0x58>
     f16:	8082                	ret
     f18:	872a                	mv	a4,a0
     f1a:	ff157ee3          	bgeu	a0,a7,f16 <memcpy+0x50>
     f1e:	0005c783          	lbu	a5,0(a1)
     f22:	0705                	addi	a4,a4,1
     f24:	0585                	addi	a1,a1,1
     f26:	fef70fa3          	sb	a5,-1(a4)
     f2a:	ff176ae3          	bltu	a4,a7,f1e <memcpy+0x58>
     f2e:	8082                	ret
     f30:	0005c683          	lbu	a3,0(a1)
     f34:	0705                	addi	a4,a4,1
     f36:	00377793          	andi	a5,a4,3
     f3a:	fed70fa3          	sb	a3,-1(a4)
     f3e:	0585                	addi	a1,a1,1
     f40:	d3c5                	beqz	a5,ee0 <memcpy+0x1a>
     f42:	0005c683          	lbu	a3,0(a1)
     f46:	0705                	addi	a4,a4,1
     f48:	00377793          	andi	a5,a4,3
     f4c:	fed70fa3          	sb	a3,-1(a4)
     f50:	0585                	addi	a1,a1,1
     f52:	fff9                	bnez	a5,f30 <memcpy+0x6a>
     f54:	b771                	j	ee0 <memcpy+0x1a>
     f56:	41d4                	lw	a3,4(a1)
     f58:	0005a283          	lw	t0,0(a1)
     f5c:	0085af83          	lw	t6,8(a1)
     f60:	00c5af03          	lw	t5,12(a1)
     f64:	0105ae83          	lw	t4,16(a1)
     f68:	0145ae03          	lw	t3,20(a1)
     f6c:	0185a303          	lw	t1,24(a1)
     f70:	01c5a803          	lw	a6,28(a1)
     f74:	c354                	sw	a3,4(a4)
     f76:	5194                	lw	a3,32(a1)
     f78:	00572023          	sw	t0,0(a4)
     f7c:	01f72423          	sw	t6,8(a4)
     f80:	01e72623          	sw	t5,12(a4)
     f84:	01d72823          	sw	t4,16(a4)
     f88:	01c72a23          	sw	t3,20(a4)
     f8c:	00672c23          	sw	t1,24(a4)
     f90:	01072e23          	sw	a6,28(a4)
     f94:	d314                	sw	a3,32(a4)
     f96:	02470713          	addi	a4,a4,36
     f9a:	02458593          	addi	a1,a1,36
     f9e:	faf76ce3          	bltu	a4,a5,f56 <memcpy+0x90>
     fa2:	b7a9                	j	eec <memcpy+0x26>

00000fa4 <memset>:
     fa4:	433d                	li	t1,15
     fa6:	872a                	mv	a4,a0
     fa8:	02c37363          	bgeu	t1,a2,fce <memset+0x2a>
     fac:	00f77793          	andi	a5,a4,15
     fb0:	efbd                	bnez	a5,102e <memset+0x8a>
     fb2:	e5ad                	bnez	a1,101c <memset+0x78>
     fb4:	ff067693          	andi	a3,a2,-16
     fb8:	8a3d                	andi	a2,a2,15
     fba:	96ba                	add	a3,a3,a4
     fbc:	c30c                	sw	a1,0(a4)
     fbe:	c34c                	sw	a1,4(a4)
     fc0:	c70c                	sw	a1,8(a4)
     fc2:	c74c                	sw	a1,12(a4)
     fc4:	0741                	addi	a4,a4,16
     fc6:	fed76be3          	bltu	a4,a3,fbc <memset+0x18>
     fca:	e211                	bnez	a2,fce <memset+0x2a>
     fcc:	8082                	ret
     fce:	40c306b3          	sub	a3,t1,a2
     fd2:	068a                	slli	a3,a3,0x2
     fd4:	00000297          	auipc	t0,0x0
     fd8:	9696                	add	a3,a3,t0
     fda:	00a68067          	jr	10(a3)
     fde:	00b70723          	sb	a1,14(a4)
     fe2:	00b706a3          	sb	a1,13(a4)
     fe6:	00b70623          	sb	a1,12(a4)
     fea:	00b705a3          	sb	a1,11(a4)
     fee:	00b70523          	sb	a1,10(a4)
     ff2:	00b704a3          	sb	a1,9(a4)
     ff6:	00b70423          	sb	a1,8(a4)
     ffa:	00b703a3          	sb	a1,7(a4)
     ffe:	00b70323          	sb	a1,6(a4)
    1002:	00b702a3          	sb	a1,5(a4)
    1006:	00b70223          	sb	a1,4(a4)
    100a:	00b701a3          	sb	a1,3(a4)
    100e:	00b70123          	sb	a1,2(a4)
    1012:	00b700a3          	sb	a1,1(a4)
    1016:	00b70023          	sb	a1,0(a4)
    101a:	8082                	ret
    101c:	0ff5f593          	andi	a1,a1,255
    1020:	00859693          	slli	a3,a1,0x8
    1024:	8dd5                	or	a1,a1,a3
    1026:	01059693          	slli	a3,a1,0x10
    102a:	8dd5                	or	a1,a1,a3
    102c:	b761                	j	fb4 <memset+0x10>
    102e:	00279693          	slli	a3,a5,0x2
    1032:	00000297          	auipc	t0,0x0
    1036:	9696                	add	a3,a3,t0
    1038:	8286                	mv	t0,ra
    103a:	fa8680e7          	jalr	-88(a3)
    103e:	8096                	mv	ra,t0
    1040:	17c1                	addi	a5,a5,-16
    1042:	8f1d                	sub	a4,a4,a5
    1044:	963e                	add	a2,a2,a5
    1046:	f8c374e3          	bgeu	t1,a2,fce <memset+0x2a>
    104a:	b7a5                	j	fb2 <memset+0xe>

0000104c <main>:

int main(){
    104c:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1050:	0c000613          	li	a2,192
    1054:	00000597          	auipc	a1,0x0
    1058:	1c058593          	addi	a1,a1,448 # 1214 <__DTOR_END__+0xc0>
    105c:	0068                	addi	a0,sp,12
int main(){
    105e:	42112623          	sw	ra,1068(sp)
    1062:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1066:	3585                	jal	ec6 <memcpy>
    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();

    keys = generate_keys(N, p, q);
    1068:	06500613          	li	a2,101
    106c:	458d                	li	a1,3
    106e:	03500513          	li	a0,53
    1072:	3225                	jal	99a <generate_keys>
    1074:	4781                	li	a5,0

   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
    1076:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
    107a:	00f506b3          	add	a3,a0,a5
    107e:	4290                	lw	a2,0(a3)
    1080:	1314                	addi	a3,sp,416
    1082:	96be                	add	a3,a3,a5
    1084:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
    1086:	0791                	addi	a5,a5,4
    1088:	fee799e3          	bne	a5,a4,107a <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
    108c:	1cd8                	addi	a4,sp,628
    108e:	1a850793          	addi	a5,a0,424
    1092:	27c50693          	addi	a3,a0,636
    1096:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
    1098:	4390                	lw	a2,0(a5)
    109a:	0791                	addi	a5,a5,4
    109c:	0711                	addi	a4,a4,4
    109e:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
    10a2:	fed79be3          	bne	a5,a3,1098 <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
    10a6:	01f8                	addi	a4,sp,204
    10a8:	35050793          	addi	a5,a0,848
    10ac:	42450613          	addi	a2,a0,1060
    10b0:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    10b2:	438c                	lw	a1,0(a5)
    10b4:	0791                	addi	a5,a5,4
    10b6:	0711                	addi	a4,a4,4
    10b8:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    10bc:	fec79be3          	bne	a5,a2,10b2 <main+0x66>
    10c0:	06b0                	addi	a2,sp,840
    10c2:	4fc50513          	addi	a0,a0,1276
    10c6:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    10c8:	4398                	lw	a4,0(a5)
    10ca:	0791                	addi	a5,a5,4
    10cc:	0611                	addi	a2,a2,4
    10ce:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    10d2:	fea79be3          	bne	a5,a0,10c8 <main+0x7c>
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");

    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10d6:	8742                	mv	a4,a6
    10d8:	0070                	addi	a2,sp,12
    10da:	06500593          	li	a1,101
    10de:	03500513          	li	a0,53
    10e2:	3ed9                	jal	cb8 <ntru_encyrpt>
    10e4:	87aa                	mv	a5,a0
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
   
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10e6:	34810813          	addi	a6,sp,840
    10ea:	8722                	mv	a4,s0
    10ec:	458d                	li	a1,3
    10ee:	1314                	addi	a3,sp,416
    10f0:	06500613          	li	a2,101
    10f4:	03500513          	li	a0,53
    10f8:	31b5                	jal	d64 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    10fa:	dedee737          	lui	a4,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10fe:	4781                	li	a5,0
    1100:	00000597          	auipc	a1,0x0
    1104:	1d458593          	addi	a1,a1,468 # 12d4 <_edata>
            resultkon[0] = 0xDEDEDEDE;
    1108:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    110c:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
    1110:	0070                	addi	a2,sp,12
    1112:	00f506b3          	add	a3,a0,a5
    1116:	963e                	add	a2,a2,a5
    1118:	4210                	lw	a2,0(a2)
    111a:	4294                	lw	a3,0(a3)
    111c:	00d60f63          	beq	a2,a3,113a <main+0xee>
            resultkon[0] = 0xBABABABA;
    1120:	babac7b7          	lui	a5,0xbabac
    1124:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1128:	c19c                	sw	a5,0(a1)
		}
    }
			

    return 0;
}
    112a:	42c12083          	lw	ra,1068(sp)
    112e:	42812403          	lw	s0,1064(sp)
    1132:	4501                	li	a0,0
    1134:	43010113          	addi	sp,sp,1072
    1138:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    113a:	c198                	sw	a4,0(a1)
    for(i = 0; i < 32; ++i){
    113c:	0791                	addi	a5,a5,4
    113e:	fd0799e3          	bne	a5,a6,1110 <main+0xc4>
    1142:	b7e5                	j	112a <main+0xde>

00001144 <__CTOR_LIST__>:
	...

0000114c <__CTOR_END__>:
	...

Disassembly of section .rodata:

00001154 <.rodata>:
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	ffff                	0xffff
    115a:	ffff                	0xffff
    115c:	0000                	unimp
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	ffff                	0xffff
    1166:	ffff                	0xffff
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	ffff                	0xffff
    116e:	ffff                	0xffff
    1170:	0000                	unimp
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0000                	unimp
    117e:	0000                	unimp
    1180:	ffff                	0xffff
    1182:	ffff                	0xffff
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	ffff                	0xffff
    118a:	ffff                	0xffff
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0000                	unimp
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0000                	unimp
    119e:	0000                	unimp
    11a0:	ffff                	0xffff
    11a2:	ffff                	0xffff
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	ffff                	0xffff
    11aa:	ffff                	0xffff
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0000                	unimp
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0000                	unimp
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	ffff                	0xffff
    11c6:	ffff                	0xffff
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	ffff                	0xffff
    11ce:	ffff                	0xffff
    11d0:	0000                	unimp
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	ffff                	0xffff
    11da:	ffff                	0xffff
    11dc:	0000                	unimp
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	ffff                	0xffff
    11e6:	ffff                	0xffff
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	ffff                	0xffff
    11ee:	ffff                	0xffff
    11f0:	0000                	unimp
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0000                	unimp
    11fe:	0000                	unimp
    1200:	ffff                	0xffff
    1202:	ffff                	0xffff
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	ffff                	0xffff
    120a:	ffff                	0xffff
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0000                	unimp
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0002                	c.slli64	zero
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0001                	nop
    123a:	0000                	unimp
    123c:	0000                	unimp
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	0001                	nop
    1246:	0000                	unimp
    1248:	0002                	c.slli64	zero
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0000                	unimp
    1250:	0000                	unimp
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	0000                	unimp
    1258:	0002                	c.slli64	zero
    125a:	0000                	unimp
    125c:	0000                	unimp
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	0000                	unimp
    1264:	0001                	nop
    1266:	0000                	unimp
    1268:	0001                	nop
    126a:	0000                	unimp
    126c:	0001                	nop
    126e:	0000                	unimp
    1270:	0000                	unimp
    1272:	0000                	unimp
    1274:	0001                	nop
    1276:	0000                	unimp
    1278:	0001                	nop
    127a:	0000                	unimp
    127c:	0000                	unimp
    127e:	0000                	unimp
    1280:	0002                	c.slli64	zero
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	0000                	unimp
    1288:	0002                	c.slli64	zero
    128a:	0000                	unimp
    128c:	0001                	nop
    128e:	0000                	unimp
    1290:	0000                	unimp
    1292:	0000                	unimp
    1294:	0001                	nop
    1296:	0000                	unimp
    1298:	0001                	nop
    129a:	0000                	unimp
    129c:	0002                	c.slli64	zero
    129e:	0000                	unimp
    12a0:	0001                	nop
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	0000                	unimp
    12a8:	0001                	nop
    12aa:	0000                	unimp
    12ac:	0001                	nop
    12ae:	0000                	unimp
    12b0:	0002                	c.slli64	zero
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	0000                	unimp
    12b8:	0001                	nop
    12ba:	0000                	unimp
    12bc:	0002                	c.slli64	zero
    12be:	0000                	unimp
    12c0:	0001                	nop
    12c2:	0000                	unimp
    12c4:	0001                	nop
    12c6:	0000                	unimp
    12c8:	0001                	nop
    12ca:	0000                	unimp
    12cc:	0001                	nop
    12ce:	0000                	unimp
    12d0:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000012d4 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    12d4:	bebe                	fsd	fa5,376(sp)
    12d6:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

000012d8 <_bss_start>:
	...

00001530 <product2>:
	...

00001788 <result>:
	...

000019e0 <ti_2>:
	...

00001b70 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	18e5                	addi	a7,a7,-7
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05c9                	addi	a1,a1,18
       e:	0000                	unimp
      10:	300c                	fld	fa1,32(s0)
      12:	89000003          	lb	zero,-1904(zero) # fffff890 <_stack_start+0xfffef890>
      16:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0459                	addi	s0,s0,22
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	5708                	lw	a0,40(a4)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0478                	addi	a4,sp,524
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002c107          	flq	ft2,0(t0) # 1032 <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7d04                	flw	fs1,56(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0304                	addi	s1,sp,384
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	0b06                	slli	s6,s6,0x1
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4b06                	lw	s6,64(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	5f06                	lw	t5,96(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	02fe                	slli	t0,t0,0x1f
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0225                	addi	tp,tp,9
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x1ac>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	0535                	addi	a0,a0,13
      e6:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	5d07a403          	lw	s0,1488(a5)
            a1[length-2] = a1[length-2] + a2[length-2];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	3d0c                	fld	fa1,56(a0)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
} //end of function
      f8:	00a8                	addi	a0,sp,72
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0004                	0x4
    asm volatile(
      fe:	a806                	fsd	ft1,16(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
            for (i = 0; i < (length / 3); i++) {
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	9c06                	add	s8,s8,ra
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	3b06                	fld	fs6,96(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    asm volatile(
     122:	0000                	unimp
     124:	dd06                	sw	ra,184(sp)
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
            for (i = 0; i < ((length-2) / 3); i++) {
     12e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     130:	ee0e                	fsw	ft3,28(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13c:	0c00                	addi	s0,sp,528
     13e:	04c9                	addi	s1,s1,18
    int line[size_b][size_a + size_b];
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
    int pola[size_a];
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     154:	0400                	addi	s0,sp,512
     156:	110c                	addi	a1,sp,160
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    int line[size_b][size_a + size_b];
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
    int pola[size_a];
     164:	000001d7          	0x1d7
    int line[size_b][size_a + size_b];
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
    int pola[size_a];
     16e:	0c00                	addi	s0,sp,528
     170:	3d0c                	fld	fa1,56(a0)
    int polb[size_b];
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	785f 0400 0b38      	0xb380400785f
    int pola[size_a];
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
    int polb[size_b];
     188:	0014                	0x14
    for (i = 0; i < size_b; ++i){
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
            product[j] = 0;
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
    for (i = 0; i < size_b; ++i){
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     19e:	0000                	unimp
     1a0:	150e                	slli	a0,a0,0x23
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
    if(star_mult == 1){
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <polymult+0x7e>
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	5a0c                	lw	a1,48(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	005d093f 0c040000 	0xc040000005d093f
            product[j] = 0;
     1c8:	0122                	slli	sp,sp,0x8
            line[i][j] = 0;
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
            product[j] = 0;
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0800                	addi	s0,sp,16
     1d4:	db0c                	sw	a1,48(a4)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	03d5                	addi	t2,t2,21
     1e4:	0000                	unimp
        pola[i] = a[i];
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
            pola[i] = pola[i] + mod;
     1ee:	5a0c                	lw	a1,48(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
        while (pola[i] < 0){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
     1f8:	0000                	unimp
        pola[i] = pola[i] % mod;
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0642                	slli	a2,a2,0x10
    for (i = 0; i < size_a; ++i){
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
        pola[i] = pola[i] % mod;
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     206:	1800                	addi	s0,sp,48
            pola[i] = pola[i] + mod;
     208:	820c                	0x820c
     20a:	0004                	0x4
        polb[i] = b[i];
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
            polb[i] = polb[i] + mod;
     214:	0c1c                	addi	a5,sp,528
        while (polb[i] < 0){
     216:	069d                	addi	a3,a3,7
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
        polb[i] = polb[i] % mod;
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
        polb[i] = polb[i] % mod;
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     228:	0108                	addi	a0,sp,128
            polb[i] = polb[i] + mod;
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
    if(star_mult == 1){
     22e:	0002                	c.slli64	zero
        for (j = size_b -1; j >= 0; j = j-1){
     230:	0c00                	addi	s0,sp,528
     232:	01bd                	addi	gp,gp,15
        for(j = 0; j < size_a + size_b -1; ++j){
     234:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
    for(i = 0; i < size_b; ++i){
     23a:	0002                	c.slli64	zero
		array_add(product,line[i],size_a+size_b-1);
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
    for(i = 0; i < size_b; ++i){
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0585                	addi	a1,a1,1
     24e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
}
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	0160                	addi	s0,sp,140
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f ee11 0003      	0x3ee11001f
                line[size_b-1-j][k] = pola[k]*polb[j];
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	c90c                	sw	a1,16(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x180>
            for (k = size_a-1; k >= 0; k = k-1 ){
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     294:	04e1                	addi	s1,s1,24
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a0:	d20c                	sw	a1,32(a2)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0131                	addi	sp,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b0:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
        for (j = size_b -1; j >= 0; j = j-1){
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
            line[i][j] = line[i][j] % mod;
     2c4:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
        for(j = 0; j < size_a + size_b -1; ++j){
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     2d6:	1300                	addi	s0,sp,416
     2d8:	8c0e                	mv	s8,gp
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
        for(j = 0; j < size_a + size_b -1; ++j){
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
		array_add(product,line[i],size_a+size_b-1);
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for(j = 0; j < size_a + size_b -1; ++j){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
        product[j] = product[j] % mod;
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     2fe:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
    int line[size_b][size_a + size_b];
     306:	b30e                	fsd	ft3,416(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
    int line[size_b][size_a + size_b];
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
    int pola[size_a];
     32c:	775f 0400 07bd      	0x7bd0400775f
    int line[size_b][size_a + size_b];
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
    int pola[size_a];
     338:	0159                	addi	sp,sp,22
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
    int line[size_b][size_a + size_b];
     340:	0000                	unimp
    int pola[size_a];
     342:	0c00                	addi	s0,sp,528
     344:	540c                	lw	a1,40(s0)
    int polb[size_b];
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
    int line[size_b][size_a + size_b];
     352:	625f 0066 c004      	0xc0040066625f
    for (i = 0; i < size_b; ++i){
     358:	d811                	beqz	s0,26c <polymult+0x13c>
     35a:	0002                	c.slli64	zero
            product2[j] = 0;
     35c:	1000                	addi	s0,sp,32
     35e:	980c                	0x980c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    for(i = 0; i < size_a; ++i){
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
    if(star_mult == 1){
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	050c                	addi	a1,sp,640
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     384:	0c20                	addi	s0,sp,536
     386:	00000353          	fadd.s	ft6,ft0,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     38a:	cc04                	sw	s1,24(s0)
            product2[j] = 0;
     38c:	f71d                	bnez	a4,2ba <polymult+0x18a>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
            line[i][j] = 0;
     392:	450c                	lw	a1,8(a0)
     394:	0005                	c.nop	1
            product2[j] = 0;
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
        for(j = 0; j < size_a + size_b -1; ++j){
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	000006b7          	lui	a3,0x0
    for (i = 0; i < size_b; ++i){
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0x78>
     3a8:	0006                	c.slli	zero,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
        pola[i] = a[i];
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
    for(i = 0; i < size_a; ++i){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x80>
        polb[i] = b[i];
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     3d2:	0c3c                	addi	a5,sp,536
        polb[i] = b[i];
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     3d8:	d804                	sw	s1,48(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     3da:	3b11                	jal	ee <array_add+0x5c>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	820c                	0x820c
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x8>
        for (j = size_b -1; j >= 0; j = j-1){
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	6f0c                	flw	fa1,24(a4)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	07df 005d 0000      	0x5d07df
        array_add(product2,line[i],size_a+size_b-1);
     406:	0c4c                	addi	a1,sp,532
     408:	0196                	slli	gp,gp,0x5
    for(i=0;i<size_b;++i){
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
}
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <generate_keys+0x2c4>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	032a                	slli	t1,t1,0xa
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     42e:	bb0c                	fsd	fa1,48(a4)
     430:	0004                	0x4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	00000493          	li	s1,0
     440:	ea04                	fsw	fs1,16(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     442:	5d09                	li	s10,-30
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (j = size_b -1; j >= 0; j = j-1){
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
        array_add(product2,line[i],size_a+size_b-1);
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0x60>
     45e:	0005                	c.nop	1
    for(i=0;i<size_b;++i){
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
    int v[size_N];
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46a:	0004                	0x4
    int v[size_N];
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     472:	00051917          	auipc	s2,0x51
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	0471                	addi	s0,s0,28
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
    int v[size_N];
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0168                	addi	a0,sp,140
    int q[size_N];
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
    int num_temp[size_N];
     498:	000006a7          	0x6a7
    int denum_temp[size_D];
     49c:	1804                	addi	s1,sp,48
     49e:	0236                	slli	tp,tp,0xd
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
    int num_temp[size_N];
     4a4:	1402                	slli	s0,s0,0x20
    int denum_temp[size_D];
     4a6:	000006a7          	0x6a7
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	1808                	addi	a0,sp,48
     4ac:	01e6                	slli	gp,gp,0x19
    int denum_temp[size_D];
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4b2:	1e02                	slli	t3,t3,0x20
    int v[size_N];
     4b4:	000006a7          	0x6a7
    int denum_temp[size_D];
     4b8:	180c                	addi	a1,sp,48
    for (i = 0; i < size_N; ++i){
     4ba:	04dc                	addi	a5,sp,580
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for (i = 0; i < size_N; ++i){
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
    for (i = size_D-1; i >= 0; i = i-1){
     4d4:	1814                	addi	a3,sp,48
     4d6:	04f8                	addi	a4,sp,588
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
    for (i = 0; i < size_N; ++i){
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     4e2:	1830                	addi	a2,sp,56
    for (u = 0; u < mod; ++u){
     4e4:	04e6                	slli	s1,s1,0x19
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
        num_temp[i] = num[i];
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	0400                	addi	s0,sp,512
            num_temp[i] = num_temp[i] + mod;
     4f4:	0000                	unimp
        while (num_temp[i] < 0) {
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
        num_temp[i] = num_temp[i] % mod;
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
    for (i = 0; i < size_N; ++i){
     500:	04ee                	slli	s1,s1,0x1b
     502:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
    for (i = 0; i < size_N; ++i){
     508:	08cd                	addi	a7,a7,19
            num_temp[i] = num_temp[i] + mod;
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
        denum_temp[i] = denum[i];
     50e:	02f6                	slli	t0,t0,0x1d
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
            denum_temp[i] = denum_temp[i] + mod;
     516:	018a                	slli	gp,gp,0x2
        while (denum_temp[i] < 0) {
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0000020b          	0x20b
        denum_temp[i] = denum_temp[i] % mod;
     520:	7b04                	flw	fs1,48(a4)
    for (i = 0; i < size_D; ++i) {
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
        denum_temp[i] = denum_temp[i] % mod;
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
    for (i = 0; i < size_D; ++i) {
     52a:	06d1                	addi	a3,a3,20
            denum_temp[i] = denum_temp[i] + mod;
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
        q[i] = 0;
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
        v[i] = 0;
     538:	00000427          	0x427
        q[i] = 0;
     53c:	7d04                	flw	fs1,56(a0)
        v[i] = 0;
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    for (i = 0; i < size_N; ++i){
     544:	184c                	addi	a1,sp,52
        if( denum_temp[i] != 0 )
     546:	023e                	slli	tp,tp,0xf
    for (i = size_D-1; i >= 0; i = i-1){
     548:	0000                	unimp
     54a:	8004                	0x8004
        if ( (b_N*u)%mod == 1 )
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	018e                	slli	gp,gp,0x3
    for (u = 0; u < mod; ++u){
     556:	0000                	unimp
     558:	8104                	0x8104
        if( num_temp[i] != 0 )
     55a:	0902                	c.slli64	s2
    for (i = size_N-1; i >= 0; i = i-1){
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
     562:	046a                	slli	s0,s0,0x1a
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    while (d >= d2){
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     56e:	1958                	addi	a4,sp,180
        result[i] = q[i];
     570:	03ee                	slli	t2,t2,0x1b
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
    for(i = 0; i < size_N; ++i){
     578:	000002bb          	0x2bb
    for(i = size_N; i < (2*size_N); ++i){
     57c:	0148                	addi	a0,sp,132
     57e:	d419                	beqz	s0,48c <polydiv+0x26>
        result[i] = num_temp[i-size_N];
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
    for(i = size_N; i < (2*size_N); ++i){
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
}
     58c:	1901                	addi	s2,s2,-32
     58e:	0678                	addi	a4,sp,780
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	4719                	li	a4,6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	012c                	addi	a1,sp,136
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
        v[(d-d2)] = u*r_d;
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
        for (i = 0; i < size_N; ++i){
     5c4:	0460                	addi	s0,sp,524
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
        for (i = 0; i < size_N; ++i){
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
        for (i = 0; i < size_N; ++i){
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xa4>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        array_add(q, v, size_N);
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
        for(i = 0; i < size_N; ++i){
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
            v[i] = v[i] % mod;
     614:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     616:	005d                	c.nop	23
     618:	0000                	unimp
            v[i] = v[i] % mod;
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
        for (i = 0; i < size_N; ++i){
     622:	005d                	c.nop	23
                product[i] = product[i] + mod;
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
            while (product[i] < 0) {
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
            product[i] = product[i] % mod;
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
        for (i = 0; i < size_N; ++i){
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
            product[i] = product[i] % mod;
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
        for (i = 0; i < size_N; ++i){
     63a:	0900                	addi	s0,sp,144
            num_temp[i] = num_temp[i] - product[i];
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
        for (i = 0; i < size_N; ++i){
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
            num_temp[i] = num_temp[i] - product[i];
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     650:	0000065b          	0x65b
                num_temp[i] = num_temp[i] + mod;
     654:	690a                	flw	fs2,128(sp)
            while (num_temp[i] < 0){
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
            num_temp[i] = num_temp[i] % mod;
     65c:	04a1                	addi	s1,s1,8
     65e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
            num_temp[i] = num_temp[i] % mod;
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     668:	4c1a                	lw	s8,132(sp)
            q[i] = q[i] % mod;
     66a:	0006                	c.slli	zero,0x1
        for(i = 0; i < size_N; ++i){
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
            q[i] = q[i] % mod;
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	c918                	sw	a4,16(a0)
        for(i = 0; i < size_N; ++i){
     678:	0004                	0x4
            if( num_temp[i] != 0 )
     67a:	0400                	addi	s0,sp,512
        for (i = size_N-1; i >= 0; i = i-1){
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0xe8>
            v[i] = 0;
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	9a18                	0x9a18
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
        result[i] = q[i];
     692:	9b18                	0x9b18
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
    for(i = 0; i < size_N; ++i){
     69e:	0800                	addi	s0,sp,16
        result[i] = q[i];
     6a0:	1000                	addi	s0,sp,32
    for(i = 0; i < size_N; ++i){
     6a2:	6804                	flw	fs1,16(s0)
        result[i] = num_temp[i-size_N];
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
    for(i = size_N; i < (2*size_N); ++i){
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
    int ri_2[size]; // MX-ring poly, a
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	1800                	addi	s0,sp,48
    int ri_2[size]; // MX-ring poly, a
     6bc:	052a                	slli	a0,a0,0xa
     6be:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0524                	addi	s1,sp,648
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000003f 12014704 	0x120147040000003f
    int ri_2[size]; // MX-ring poly, a
     6e0:	003a                	c.slli	zero,0xe
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
    int ri[size];
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
    int ti[size];
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
    int qi_1[size];
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
    int temp[size];
     700:	2b18                	fld	fa4,16(a4)
     702:	0006                	c.slli	zero,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ri_2[size]; // MX-ring poly, a
     70a:	0000                	unimp
    int temp[size];
     70c:	0000                	unimp
    for (i = 0; i < size; ++i) {
     70e:	7818                	flw	fa4,48(s0)
     710:	0005                	c.nop	1
        ti_2[i] = 0;
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
    for (i = 0; i < size; ++i) {
     71a:	0400                	addi	s0,sp,512
     71c:	e918                	fsw	fa4,16(a0)
    ti_1[0] = 1;
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	a818                	fsd	fa4,16(s0)
        for (i = 0; i < N + 1; ++i) {
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
        ri_2[i] = polyR[i];
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
     736:	2400                	fld	fs0,8(s0)
     738:	f618                	fsw	fa4,40(a2)
     73a:	0001                	nop
    for (i = 0; i < size; ++i) {
     73c:	0400                	addi	s0,sp,512
        ri_2[i] = polyR[i];
     73e:	5d0f028b          	0x5d0f028b
        ri_1[i] = polyf[i];
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	c418                	sw	a4,8(s0)
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
        ti_2[i] = 0;
     752:	5000                	lw	s0,32(s0)
     754:	be18                	fsd	fa4,56(a2)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
        ti_1[i] = 0;
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
    for (i = 0; i < size; ++i) {
     762:	cf18                	sw	a4,24(a4)
     764:	0004                	0x4
                ri_2[i] = ri_2[i] + mod;
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
            while (ri_2[i] < 0) {
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
            ri_2[i] = ri_2[i] % mod;
     770:	c318                	sw	a4,0(a4)
     772:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     774:	0400                	addi	s0,sp,512
            ri_2[i] = ri_2[i] % mod;
     776:	fe16028f          	0xfe16028f
        for (i = 0; i < N + 1; ++i) {
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
        for (i = 0; i < N + 1; ++i) {
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     78c:	6818                	flw	fa4,16(s0)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
        for (i = N + 1; i < (2 * N + 2); ++i) {
     798:	8000                	0x8000
     79a:	dd18                	sw	a4,56(a0)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     7a6:	8800                	0x8800
     7a8:	a918                	fsd	fa4,16(a0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
        for (i = 0; i < N + 1; ++i) {
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7b6:	af18                	fsd	fa4,24(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9e18                	0x9e18
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
     7e2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        controlR = 0;
     7fc:	6f18                	flw	fa4,24(a4)
        for (i = 0; i < N + 1; ++i) {
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
    while (controlR != 0) {
     804:	5d08                	lw	a0,56(a0)
        for (j = 0; j < mod; ++j) {
     806:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     808:	cc00                	sw	s0,24(s0)
        for (j = 0; j < mod; ++j) {
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
        for (i = 0; i < N + 1; ++i) {
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
    }
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
                ri_1[i] = ri_1[i] + mod;
     844:	1800                	addi	s0,sp,48
     846:	03c6                	slli	t2,t2,0x11
            while (ri_1[i] < 0) {
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
            ri_1[i] = ri_1[i] % mod;
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     852:	1800                	addi	s0,sp,48
     854:	0374                	addi	a3,sp,396
            ri_1[i] = ri_1[i] % mod;
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
        for (i = 0; i < N + 1; ++i) {
     85a:	1802                	slli	a6,a6,0x20
            ri[i - (N + 1)] = res[i];
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x6a>
            ri[i - (N + 1)] = res[i];
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0069                	c.nop	26
            temp[i] = ri_2[i] - ri[i];
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     87e:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
        for (i = 0; i < N + 1; ++i) {
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
                temp[i] = temp[i] + mod;
     888:	000008a7          	0x8a7
            while (temp[i] < 0) {
     88c:	191d                	addi	s2,s2,-25
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
            temp[i] = temp[i] % mod;
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
        for (i = 0; i < N + 1; ++i) {
     898:	1d00                	addi	s0,sp,688
            temp[i] = temp[i] % mod;
     89a:	0688                	addi	a0,sp,832
     89c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     89e:	a304                	fsd	fs1,0(a4)
            qi_1[i] = res1[i];
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
                qi_1[i] = qi_1[i] + mod;
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
            while (qi_1[i] < 0) {
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            temp[i] = res2[i];
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
        for (i = 0; i < N + 1; ++i) {
     8d6:	0001                	nop
            temp[i] = res2[i];
     8d8:	1f00                	addi	s0,sp,944
        for (i = 0; i < N + 1; ++i) {
     8da:	08e4                	addi	s1,sp,92
                temp[i] = temp[i] + mod;
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
            while (temp[i] < 0) {
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
            temp[i] = temp[i] % mod;
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
        for (i = 0; i < N + 1; ++i) {
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
            temp[i] = temp[i] % mod;
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8f6:	0009                	c.nop	2
            ti[i] = ti_2[i] - temp[i];
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	bd20                	fsd	fs0,120(a0)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
        for (i = 0; i < N + 1; ++i) {
     90e:	05b6                	slli	a1,a1,0xd
            ti[i] = ti_2[i] - temp[i];
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
        for (i = 0; i < N + 1; ++i) {
     914:	046d1d03          	lh	s10,70(s10)
                ti[i] = ti[i] + mod;
     918:	0000                	unimp
     91a:	f621                	bnez	a2,862 <ext_euclid+0x1ac>
            while (ti[i] < 0) {
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
            ti[i] = ti[i] % mod;
     924:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
            ti[i] = ti[i] % mod;
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     92e:	0a00                	addi	s0,sp,272
            ri_2[i] = ri_1[i];
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	7822                	flw	fa6,40(sp)
     938:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     93a:	0100                	addi	s0,sp,128
            ri_2[i] = ri_1[i];
     93c:	0c06                	slli	s8,s8,0x1
            ri_1[i] = ri[i];
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
            ti_2[i] = ti_1[i];
     944:	12d8                	addi	a4,sp,356
     946:	0000                	unimp
     948:	3f22                	fld	ft10,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
            ri_1[i] = ri[i];
     94e:	09260c07          	0x9260c07
            ti_2[i] = ti_1[i];
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1530                	addi	a2,sp,680
            controlR += ri[i];
     958:	0000                	unimp
            ti_2[i] = ti_1[i];
     95a:	f722                	fsw	fs0,172(sp)
     95c:	0002                	c.slli64	zero
            ti_1[i] = ti[i];
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
              qi_1[i] = 0;
     966:	0305                	addi	t1,t1,1
     968:	1788                	addi	a0,sp,992
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
        for (i = 0; i < N + 1; ++i) {
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
            if (((ri_2[0] * j) % mod) == 1)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	52220063          	beq	tp,sp,e9a <reset_handler+0x46>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
            ti_2[i] = (ti_2[i] * j) % mod;
     986:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     988:	0305                	addi	t1,t1,1
     98a:	19e0                	addi	s0,sp,252
            ti_2[i] = (ti_2[i] * j) % mod;
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
        for (i = 0; i < N + 1; ++i) {
     998:	0069                	c.nop	26
int* generate_keys(int N, int p, int q){
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001b7003          	0x1b7003
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	2c24                	fld	fs1,88(s0)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     9d2:	0305                	addi	t1,t1,1
     9d4:	12d4                	addi	a3,sp,356
     9d6:	0000                	unimp
     9d8:	d625                	beqz	a2,940 <ext_euclid+0x28a>
int* generate_keys(int N, int p, int q){
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	0291                	addi	t0,t0,4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	4c00                	lw	s0,24(s0)
    resultkon[0] = 0xaaaaaaa0;
     9e6:	0010                	0x10
     9e8:	f800                	fsw	fs0,48(s0)
     9ea:	0000                	unimp
     9ec:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
    resultkon[0] = 0xaaaaaaa0;
     9f4:	0412                	slli	s0,s0,0x4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9f6:	0000                	unimp
     9f8:	9201                	srli	a2,a2,0x20
     9fa:	0a02                	c.slli64	s4
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x78>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	630a0293          	addi	t0,s4,1584
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0314                	addi	a3,sp,384
     a18:	0000                	unimp
     a1a:	9401                	srai	s0,s0,0x20
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x9a>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	0295                	addi	t0,t0,5
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	0296                	slli	t0,t0,0x5
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	5d090297          	auipc	t0,0x5d090
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	cd28                	sw	a0,88(a0)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	0299                	addi	t0,t0,6
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <ext_euclid+0x2be>
     a5a:	05632677          	0x5632677
     a5e:	0000                	unimp
     a60:	9a01                	andi	a2,a2,-32
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    int polyR[N+1];
     a72:	8b09029b          	0x8b09029b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a76:	b100000b          	0xb100000b
    int polyR[N+1];
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
     a82:	9c01                	0x9c01
     a84:	0902                	c.slli64	s2
    polyR[N] = 1;
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	8e26                	mv	t3,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a90:	029d                	addi	t0,t0,7
     a92:	af09                	j	11a4 <__DTOR_END__+0x50>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0246                	slli	tp,tp,0x11
     a9e:	0000                	unimp
     aa0:	9e01                	0x9e01
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	3126                	fld	ft2,104(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	029f d309 000b      	0xbd309029f
     ab4:	6500                	flw	fs0,8(a0)
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	a001                	j	abc <generate_keys+0x122>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	0010682b          	0x10682b
     acc:	d200                	sw	s0,32(a2)
     ace:	0018                	0x18
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	1403055b          	0x1403055b
     ae2:	0012                	c.slli	zero,0x4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	0010742b          	0x10742b
     af0:	c400                	sw	s0,8(s0)
     af2:	000e                	c.slli	zero,0x3
    polyR[0] = -1;
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = 1; i < N; ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_encyrpt+0x82>
    for (i = N; i < 55; ++i ){
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x14c>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
    for(i = 0; i < N; ++i){
     b08:	6508                	flw	fa0,8(a0)
        random_keys[i] = f[i];
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	10e4                	addi	s1,sp,108
     b0e:	0000                	unimp
     b10:	0d6a                	slli	s10,s10,0x1a
    for(i = 0; i < N; ++i){
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
    for(i = N; i < (2*N); ++i){
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
        random_keys[i] = g[i-N];
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0xaa>
    for(i = N; i < (2*N); ++i){
     b2a:	5e012c77          	0x5e012c77
    for(i = (2*N); i < (3*N); ++i){
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x133>
     b32:	2d00                	fld	fs0,24(a0)
    fp = ext_euclid(polyR, f, (N+1), p);
     b34:	10fa                	slli	ra,ra,0x3e
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
    for(i = (2*N); i < (3*N); ++i){
     b40:	3508                	fld	fa0,40(a0)
        random_keys[i] = fp[i-(2*N)];
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
    for(i = (2*N); i < (3*N); ++i){
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <ntru_deceypt+0xa0>
    fq = ext_euclid(polyR, f, (N+1), q);
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0078                	addi	a4,sp,12
    for(i = (3*N); i < (4*N); ++i){
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
        random_keys[i] = fq[i-(3*N)];
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
    for(i = (3*N); i < (4*N); ++i){
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
    for(i = 0; i < (2*N-1); ++i){
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
    for(i = (4*N); i < (5*N); ++i){
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
    for(i = (4*N); i < (5*N); ++i){
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
    for(i = (5*N); i < (6*N+1); ++i){
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa1;
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
}
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c5                	addi	gp,gp,17
     be8:	0000                	unimp
     bea:	6401                	0x6401
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x26a>
     bf2:	0d64                	addi	s1,sp,668
     bf4:	0000                	unimp
     bf6:	00ec                	addi	a1,sp,76
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d6a                	slli	s10,s10,0x1a
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	0264                	addi	s1,sp,268
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
        polyR[i] = 0;
     c10:	0070                	addi	a2,sp,12
     c12:	6401                	0x6401
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
    for(i = 1; i < N; ++i){
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
        f[i] = 0;
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	0264                	addi	s1,sp,268
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
        g[i] = 0;
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
     c30:	0000                	unimp
     c32:	6401                	0x6401
     c34:	2d02                	fld	fs10,0(sp)
    for (i = N; i < 55; ++i ){
     c36:	00000b63          	beqz	zero,c4c <generate_keys+0x2b2>
        random_keys[i] = f[i];
     c3a:	0000028b          	0x28b
     c3e:	8e31                	xor	a2,a2,a2
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	0264                	addi	s1,sp,268
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
    for(i = 0; i < N; ++i){
     c4e:	3100                	fld	fs0,32(a0)
        random_keys[i] = g[i-N];
     c50:	0412                	slli	s0,s0,0x4
     c52:	0000                	unimp
     c54:	6401                	0x6401
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <generate_keys+0x2d4>
    for(i = N; i < (2*N); ++i){
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     c60:	9031                	srli	s0,s0,0x2c
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	0264                	addi	s1,sp,268
     c68:	6366                	flw	ft6,88(sp)
    for(i = (2*N); i < (3*N); ++i){
     c6a:	0f00000b          	0xf00000b
     c6e:	26000003          	lb	zero,608(zero) # 260 <polymult+0x130>
        random_keys[i] = fq[i-(3*N)];
     c72:	02b1                	addi	t0,t0,12
     c74:	0000                	unimp
     c76:	6601                	0x6601
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <generate_keys+0x2f6>
    for(i = (3*N); i < (4*N); ++i){
     c7e:	0346                	slli	t1,t1,0x11
        random_keys[i] = fq[i-(3*N)];
     c80:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     c82:	612a                	flw	ft2,136(sp)
        fg[i] = fg[i]*p;
     c84:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     c86:	630a0267          	jalr	tp,1584(s4)
        fg[i] = fg[i]*p;
     c8a:	5900000b          	0x5900000b
     c8e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x170>
    for(i = 0; i < (2*N-1); ++i){
     c92:	3261                	jal	61a <polydiv+0x1b4>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c94:	0100                	addi	s0,sp,128
     c96:	0268                	addi	a0,sp,268
     c98:	630a                	flw	ft6,128(sp)
     c9a:	6c00000b          	0x6c00000b
     c9e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x170>
    for(i = (4*N); i < (5*N); ++i){
     ca2:	69010063          	beq	sp,a6,1322 <_bss_start+0x4a>
        random_keys[i] = polyR[i-(5*N)];
     ca6:	0a02                	c.slli64	s4
     ca8:	00000b63          	beqz	zero,cbe <ntru_encyrpt+0x6>
     cac:	0395                	addi	t2,t2,5
     cae:	0000                	unimp
     cb0:	632a                	flw	ft6,136(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     cb2:	0032                	c.slli	zero,0xc
        random_keys[i] = polyR[i-(5*N)];
     cb4:	6a01                	0x6a01
    for(i = (5*N); i < (6*N+1); ++i){
     cb6:	0a02                	c.slli64	s4
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	00000b63          	beqz	zero,cce <ntru_encyrpt+0x16>
    resultkon[0] = 0xbbbbbbb0;
     cbc:	03a8                	addi	a0,sp,456
     cbe:	0000                	unimp
     cc0:	692a                	flw	fs2,136(sp)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cc2:	0100                	addi	s0,sp,128
     cc4:	5d09026b          	0x5d09026b
     cc8:	0000                	unimp
     cca:	c600                	sw	s0,8(a2)
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x180>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cd0:	0db0                	addi	a2,sp,728
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cd2:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     cd4:	150c                	addi	a1,sp,672
     cd6:	0000                	unimp
     cd8:	0cfc                	addi	a5,sp,604
     cda:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cdc:	012c                	addi	a1,sp,136
     cde:	035a                	slli	t1,t1,0x16
     ce0:	2c5d01f3          	0x2c5d01f3
     ce4:	5b01                	li	s6,-32
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ce6:	7802                	flw	fa6,32(sp)
     ce8:	2c00                	fld	fs0,24(s0)
     cea:	5c01                	li	s8,-32
     cec:	5f01f303          	0x5f01f303
    resultkon[0] = 0xbbbbbbb0;
     cf0:	012c                	addi	a1,sp,136
     cf2:	025d                	addi	tp,tp,23
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cf4:	0078                	addi	a4,sp,12
    temp = polymult(public_key,N,random_val,48,q,0);
     cf6:	012c                	addi	a1,sp,136
     cf8:	015e                	slli	sp,sp,0x17
     cfa:	0030                	addi	a2,sp,8
     cfc:	000dc02b          	0xdc02b
     d00:	3700                	fld	fs0,40(a4)
     d02:	22000013          	li	zero,544
     d06:	000d                	c.nop	3
array_add(temp,message,48);
     d08:	2c00                	fld	fs0,24(s0)
     d0a:	5b01                	li	s6,-32
     d0c:	7902                	flw	fs2,32(sp)
    temp = polymult(public_key,N,random_val,48,q,0);
     d0e:	2c00                	fld	fs0,24(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d10:	5c01                	li	s8,-32
     d12:	8502                	jr	a0
array_add(temp,message,48);
     d14:	2c00                	fld	fs0,24(s0)
     d16:	5d01                	li	s10,-32
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d18:	8702                	jr	a4
     d1a:	2c00                	fld	fs0,24(s0)
     d1c:	5e01                	li	t3,-32
     d1e:	8202                	jr	tp
     d20:	0000                	unimp
     d22:	000de42b          	0xde42b
     d26:	0c00                	addi	s0,sp,528
    for(i = (2*N); i < (3*N); ++i){
     d28:	0015                	c.nop	5
     d2a:	4700                	lw	s0,8(a4)
     d2c:	000d                	c.nop	3
     d2e:	2c00                	fld	fs0,24(s0)
     d30:	5a01                	li	s4,-32
     d32:	8802                	jr	a6
}
     d34:	2c00                	fld	fs0,24(s0)
     d36:	5b01                	li	s6,-32
    resultkon[0] = 0xbbbbbbb1;
     d38:	7802                	flw	fa6,32(sp)
     d3a:	2c00                	fld	fs0,24(s0)
     d3c:	5d01                	li	s10,-32
     d3e:	7802                	flw	fa6,32(sp)
     d40:	2c00                	fld	fs0,24(s0)
     d42:	5e01                	li	t3,-32
}
     d44:	3001                	jal	544 <polydiv+0xde>
     d46:	2d00                	fld	fs0,24(a0)
     d48:	0df0                	addi	a2,sp,732
     d4a:	0000                	unimp
     d4c:	00001337          	lui	t1,0x1
     d50:	012c                	addi	a1,sp,136
        CT[i-(2*N)] = CT[i];
     d52:	0079025b          	0x79025b
     d56:	012c                	addi	a1,sp,136
     d58:	025c                	addi	a5,sp,260
    for(i = (2*N); i < (3*N); ++i){
     d5a:	0085                	addi	ra,ra,1
     d5c:	012c                	addi	a1,sp,136
        CT[i-(2*N)] = CT[i];
     d5e:	025d                	addi	tp,tp,23
     d60:	012c0087          	0x12c0087
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d64:	025e                	slli	tp,tp,0x17
     d66:	0086                	slli	ra,ra,0x1
     d68:	0000                	unimp
     d6a:	0006522f          	0x6522f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6e:	0100                	addi	s0,sp,128
     d70:	0241                	addi	tp,tp,16
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d72:	6306                	flw	ft6,64(sp)
     d74:	b800000b          	0xb800000b
 resultkon[0] = 0xccccccc0;
     d78:	000c                	0xc
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7a:	ac00                	fsd	fs0,24(s0)
 resultkon[0] = 0xccccccc0;
     d7c:	0000                	unimp
     d7e:	0100                	addi	s0,sp,128
     d80:	c49c                	sw	a5,8(s1)
     d82:	000e                	c.slli	zero,0x3
     d84:	3000                	fld	fs0,32(s0)
     d86:	004e                	c.slli	zero,0x13
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d88:	4101                	li	sp,0
     d8a:	1702                	slli	a4,a4,0x20
     d8c:	005d                	c.nop	23
     d8e:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d90:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
 resultkon[0] = 0xccccccc0;
     d94:	7130                	flw	fa2,96(a0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d96:	0100                	addi	s0,sp,128
     d98:	0241                	addi	tp,tp,16
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9a:	5d1e                	lw	s10,228(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9c:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	7700                	flw	fs0,40(a4)
     da0:	0004                	0x4
     da2:	3100                	fld	fs0,32(a0)
     da4:	03cd                	addi	t2,t2,19
     da6:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     da8:	4101                	li	sp,0
     daa:	2602                	fld	fa2,0(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dac:	00000b63          	beqz	zero,dc2 <ntru_deceypt+0x5e>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db0:	04ae                	slli	s1,s1,0xb
     db2:	0000                	unimp
     db4:	6331                	lui	t1,0xc
     db6:	0005                	c.nop	1
     db8:	0100                	addi	s0,sp,128
     dba:	0241                	addi	tp,tp,16
     dbc:	6334                	flw	fa3,64(a4)
     dbe:	e500000b          	0xe500000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc2:	0004                	0x4
     dc4:	3100                	fld	fs0,32(a0)
     dc6:	0690                	addi	a2,sp,832
     dc8:	0000                	unimp
     dca:	4101                	li	sp,0
        if(a2[i] <= q/2)
     dcc:	4502                	lw	a0,0(sp)
     dce:	00000b63          	beqz	zero,de4 <ntru_deceypt+0x80>
    for (i = 0; i < N; ++i){
     dd2:	0511                	addi	a0,a0,4
     dd4:	0000                	unimp
     dd6:	a126                	fsd	fs1,128(sp)
    c = polymult2(secret_key_fp,N,a2,N,0);
     dd8:	0002                	c.slli64	zero
     dda:	0100                	addi	s0,sp,128
     ddc:	630a0243          	fmadd.d	ft4,fs4,fa6,fa2,rne
     de0:	4800000b          	0x4800000b
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de4:	0005                	c.nop	1
     de6:	3200                	fld	fs0,32(a2)
     de8:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     dec:	0244                	addi	s1,sp,260
     dee:	630a                	flw	ft6,128(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     df0:	0100000b          	0x100000b
     df4:	285a                	fld	fa6,400(sp)
}
     df6:	0369                	addi	t1,t1,26
     df8:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
     dfa:	4601                	li	a2,0
     dfc:	0902                	c.slli64	s2
     dfe:	0b69                	addi	s6,s6,26
     e00:	0000                	unimp
     e02:	7ea09103          	lh	sp,2026(ra)
}
     e06:	2026                	fld	ft0,72(sp)
     e08:	0002                	c.slli64	zero
     e0a:	0100                	addi	s0,sp,128
     e0c:	630a0247          	fmsub.d	ft4,fs4,fa6,fa2,rne
     e10:	5b00000b          	0x5b00000b
     e14:	0005                	c.nop	1
     e16:	2a00                	fld	fs0,16(a2)
     e18:	0069                	c.nop	26
        a2[i-(2*N)] = a2[i];
     e1a:	4801                	li	a6,0
     e1c:	0902                	c.slli64	s2
     e1e:	005d                	c.nop	23
     e20:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e22:	0584                	addi	s1,sp,704
     e24:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     e26:	000cf62b          	0xcf62b
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	d200                	sw	s0,32(a2)
        if(a2[i] <= q/2)
     e2c:	0018                	0x18
     e2e:	4900                	lw	s0,16(a0)
     e30:	000e                	c.slli	zero,0x3
            a2[i] = (-1)*(q-a2[i]);
     e32:	2c00                	fld	fs0,24(s0)
     e34:	5a01                	li	s4,-32
     e36:	7202                	flw	ft4,32(sp)
    for (i = 0; i < N; ++i){
     e38:	2c00                	fld	fs0,24(s0)
     e3a:	5b01                	li	s6,-32
     e3c:	0305                	addi	t1,t1,1
        c2[i-(2*N)] = c2[i];
     e3e:	1154                	addi	a3,sp,164
     e40:	0000                	unimp
     e42:	012c                	addi	a1,sp,136
     e44:	025c                	addi	a5,sp,260
    for(i = (2*N); i < ((2*N)+N); ++i){
     e46:	c008                	sw	a0,0(s0)
     e48:	2b00                	fld	fs0,16(a4)
        c2[i-(2*N)] = c2[i];
     e4a:	0d08                	addi	a0,sp,656
     e4c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4e:	165f 0000 0e7a      	0xe7a0000165f
  mv  x1, x0
     e54:	0000                	unimp
     e56:	012c                	addi	a1,sp,136
  mv  x2, x1
     e58:	025a                	slli	tp,tp,0x16
  mv  x3, x1
     e5a:	0084                	addi	s1,sp,64
  mv  x4, x1
     e5c:	012c                	addi	a1,sp,136
  mv  x5, x1
     e5e:	0078025b          	0x78025b
  mv  x7, x1
     e62:	012c                	addi	a1,sp,136
  mv  x8, x1
     e64:	025c                	addi	a5,sp,260
  mv  x9, x1
     e66:	0072                	c.slli	zero,0x1c
  mv x10, x1
     e68:	012c                	addi	a1,sp,136
  mv x11, x1
     e6a:	025d                	addi	tp,tp,23
  mv x12, x1
     e6c:	3008                	fld	fa0,32(s0)
  mv x13, x1
     e6e:	012c                	addi	a1,sp,136
  mv x14, x1
     e70:	025e                	slli	tp,tp,0x17
  mv x15, x1
     e72:	012c0083          	lb	ra,18(s8)
  mv x17, x1
     e76:	015f 0030 182b      	0x182b0030015f
  mv x20, x1
     e7c:	000d                	c.nop	3
  mv x21, x1
     e7e:	c200                	sw	s0,0(a2)
  mv x22, x1
     e80:	9b000017          	auipc	zero,0x9b000
  mv x24, x1
     e84:	000e                	c.slli	zero,0x3
  mv x25, x1
     e86:	2c00                	fld	fs0,24(s0)
  mv x26, x1
     e88:	5a01                	li	s4,-32
  mv x27, x1
     e8a:	8402                	jr	s0
  mv x28, x1
     e8c:	2c00                	fld	fs0,24(s0)
  mv x29, x1
     e8e:	5b01                	li	s6,-32
  mv x30, x1
     e90:	5c01f303          	0x5c01f303
  la   x2, _stack_start
     e94:	012c                	addi	a1,sp,136
     e96:	025c                	addi	a5,sp,260
     e98:	3008                	fld	fa0,32(s0)
     e9a:	2d00                	fld	fs0,24(a0)
  la x26, _bss_start
     e9c:	0d28                	addi	a0,sp,664
     e9e:	0000                	unimp
     ea0:	00001337          	lui	t1,0x1
  la x27, _bss_end
     ea4:	012c                	addi	a1,sp,136
     ea6:	025a                	slli	tp,tp,0x16
     ea8:	0084                	addi	s1,sp,64
     eaa:	012c                	addi	a1,sp,136
  bge x26, x27, zero_loop_end
     eac:	0079025b          	0x79025b
  sw x0, 0(x26)
     eb0:	012c                	addi	a1,sp,136
     eb2:	025c                	addi	a5,sp,260
  addi x26, x26, 4
     eb4:	0085                	addi	ra,ra,1
  ble x26, x27, zero_loop
     eb6:	012c                	addi	a1,sp,136
     eb8:	025d                	addi	tp,tp,23
  addi x10, x0, 0
     eba:	0178                	addi	a4,sp,140
     ebc:	012c                	addi	a1,sp,136
  addi x11, x0, 0
     ebe:	025e                	slli	tp,tp,0x17
     ec0:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
  jal x1, main
     ec4:	00030b2f          	0x30b2f
     ec8:	0100                	addi	s0,sp,128
     eca:	01e9                	addi	gp,gp,26
     ecc:	6306                	flw	ft6,64(sp)
     ece:	9a00000b          	0x9a00000b
     ed2:	0009                	c.nop	2
     ed4:	1e00                	addi	s0,sp,816
     ed6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     eda:	749c                	flw	fa5,40(s1)
     edc:	0010                	0x10
     ede:	3000                	fld	fs0,32(s0)
     ee0:	004e                	c.slli	zero,0x13
     ee2:	e901                	bnez	a0,ef2 <memcpy+0x2c>
     ee4:	1801                	addi	a6,a6,-32
     ee6:	005d                	c.nop	23
     ee8:	0000                	unimp
     eea:	05ba                	slli	a1,a1,0xe
     eec:	0000                	unimp
     eee:	7030                	flw	fa2,96(s0)
     ef0:	0100                	addi	s0,sp,128
     ef2:	01e9                	addi	gp,gp,26
     ef4:	5d1f 0000 0b00      	0xb0000005d1f
     efa:	0006                	c.slli	zero,0x1
     efc:	3000                	fld	fs0,32(s0)
     efe:	0071                	c.nop	28
     f00:	e901                	bnez	a0,f10 <memcpy+0x4a>
     f02:	2601                	jal	1202 <__DTOR_END__+0xae>
     f04:	005d                	c.nop	23
     f06:	0000                	unimp
     f08:	0642                	slli	a2,a2,0x10
     f0a:	0000                	unimp
     f0c:	6632                	flw	fa2,12(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	740901eb          	0x740901eb
     f14:	0010                	0x10
     f16:	0300                	addi	s0,sp,384
     f18:	8891                	andi	s1,s1,4
     f1a:	327c                	fld	fa5,224(a2)
     f1c:	ec010067          	jr	-320(sp)
     f20:	0901                	addi	s2,s2,0
     f22:	1074                	addi	a3,sp,44
     f24:	0000                	unimp
     f26:	7de49103          	lh	sp,2014(s1)
     f2a:	662a                	flw	fa2,136(sp)
     f2c:	0070                	addi	a2,sp,12
     f2e:	ee01                	bnez	a2,f46 <memcpy+0x80>
     f30:	0a01                	addi	s4,s4,0
     f32:	00000b63          	beqz	zero,f48 <memcpy+0x82>
     f36:	0679                	addi	a2,a2,30
     f38:	0000                	unimp
     f3a:	662a                	flw	fa2,136(sp)
     f3c:	0071                	c.nop	28
     f3e:	ef01                	bnez	a4,f56 <memcpy+0x90>
     f40:	0a01                	addi	s4,s4,0
     f42:	00000b63          	beqz	zero,f58 <memcpy+0x92>
     f46:	068c                	addi	a1,sp,832
     f48:	0000                	unimp
     f4a:	662a                	flw	fa2,136(sp)
     f4c:	f0010067          	jr	-256(sp)
     f50:	0a01                	addi	s4,s4,0
     f52:	00000b63          	beqz	zero,f68 <memcpy+0xa2>
     f56:	06aa                	slli	a3,a3,0xa
     f58:	0000                	unimp
     f5a:	702a                	flw	ft0,168(sp)
     f5c:	f101006b          	0xf101006b
     f60:	0a01                	addi	s4,s4,0
     f62:	00000b63          	beqz	zero,f78 <memcpy+0xb2>
     f66:	06c8                	addi	a0,sp,836
     f68:	0000                	unimp
     f6a:	9026                	c.add	zero,s1
     f6c:	0006                	c.slli	zero,0x1
     f6e:	0100                	addi	s0,sp,128
     f70:	01f2                	slli	gp,gp,0x1c
     f72:	8409                	srai	s0,s0,0x2
     f74:	0010                	0x10
     f76:	e600                	fsw	fs0,8(a2)
     f78:	0006                	c.slli	zero,0x1
     f7a:	2a00                	fld	fs0,16(a2)
     f7c:	0069                	c.nop	26
     f7e:	f301                	bnez	a4,e7e <reset_handler+0x2a>
     f80:	0901                	addi	s2,s2,0
     f82:	005d                	c.nop	23
     f84:	0000                	unimp
     f86:	0749                	addi	a4,a4,18
     f88:	0000                	unimp
     f8a:	de26                	sw	s1,60(sp)
     f8c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f90:	01f4                	addi	a3,sp,204
     f92:	630a                	flw	ft6,128(sp)
     f94:	9000000b          	0x9000000b
     f98:	0008                	0x8
     f9a:	3300                	fld	fs0,32(a4)
     f9c:	0069                	c.nop	26
     f9e:	0000                	unimp
     fa0:	08a8                	addi	a0,sp,88
     fa2:	0000                	unimp
     fa4:	0009f82b          	0x9f82b
     fa8:	dd00                	sw	s0,56(a0)
     faa:	0018                	0x18
     fac:	c400                	sw	s0,8(s0)
     fae:	2c00000f          	0x2c00000f
     fb2:	5a01                	li	s4,-32
     fb4:	7c947803          	0x7c947803
     fb8:	012c                	addi	a1,sp,136
     fba:	2c30015b          	0x2c30015b
     fbe:	5c01                	li	s8,-32
     fc0:	0802                	c.slli64	a6
     fc2:	00d0                	addi	a2,sp,68
     fc4:	000a782b          	0xa782b
     fc8:	dd00                	sw	s0,56(a0)
     fca:	0018                	0x18
     fcc:	e400                	fsw	fs0,8(s0)
     fce:	2c00000f          	0x2c00000f
     fd2:	5a01                	li	s4,-32
     fd4:	7de87803          	0x7de87803
     fd8:	012c                	addi	a1,sp,136
     fda:	2c30015b          	0x2c30015b
     fde:	5c01                	li	s8,-32
     fe0:	0802                	c.slli64	a6
     fe2:	00d8                	addi	a4,sp,68
     fe4:	000b402b          	0xb402b
     fe8:	9700                	0x9700
     fea:	0010                	0x10
     fec:	0b00                	addi	s0,sp,400
     fee:	0010                	0x10
     ff0:	2c00                	fld	fs0,24(s0)
     ff2:	5a01                	li	s4,-32
     ff4:	7202                	flw	ft4,32(sp)
     ff6:	2c00                	fld	fs0,24(s0)
     ff8:	5b01                	li	s6,-32
     ffa:	7c887803          	0x7c887803
     ffe:	012c                	addi	a1,sp,136
    1000:	025c                	addi	a5,sp,260
    1002:	0086                	slli	ra,ra,0x1
    1004:	012c                	addi	a1,sp,136
    1006:	025d                	addi	tp,tp,23
    1008:	0088                	addi	a0,sp,64
    100a:	2b00                	fld	fs0,16(a4)
    100c:	0b5a                	slli	s6,s6,0x16
    100e:	0000                	unimp
    1010:	00001097          	auipc	ra,0x1
    1014:	1032                	c.slli	zero,0x2c
    1016:	0000                	unimp
    1018:	012c                	addi	a1,sp,136
    101a:	025a                	slli	tp,tp,0x16
    101c:	0072                	c.slli	zero,0x1c
    101e:	012c                	addi	a1,sp,136
    1020:	8878035b          	0x8878035b
    1024:	2c7c                	fld	fa5,216(s0)
    1026:	5c01                	li	s8,-32
    1028:	8602                	jr	a2
    102a:	2c00                	fld	fs0,24(s0)
    102c:	5d01                	li	s10,-32
    102e:	8702                	jr	a4
    1030:	0000                	unimp
    1032:	000b7a2b          	0xb7a2b
    1036:	0c00                	addi	s0,sp,528
    1038:	0015                	c.nop	5
    103a:	5700                	lw	s0,40(a4)
    103c:	0010                	0x10
    103e:	2c00                	fld	fs0,24(s0)
    1040:	5b01                	li	s6,-32
    1042:	8202                	jr	tp
    1044:	2c00                	fld	fs0,24(s0)
    1046:	5c01                	li	s8,-32
    1048:	8902                	jr	s2
    104a:	2c00                	fld	fs0,24(s0)
int main(){
    104c:	5d01                	li	s10,-32
    104e:	8202                	jr	tp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1050:	2c00                	fld	fs0,24(s0)
    1052:	5e01                	li	t3,-32
    1054:	3001                	jal	854 <ext_euclid+0x19e>
    1056:	2d00                	fld	fs0,24(a0)
    1058:	0b8e                	slli	s7,s7,0x3
    105a:	0000                	unimp
    105c:	00001337          	lui	t1,0x1
int main(){
    1060:	012c                	addi	a1,sp,136
    1062:	025c                	addi	a5,sp,260
    1064:	0072                	c.slli	zero,0x1c
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1066:	012c                	addi	a1,sp,136
    keys = generate_keys(N, p, q);
    1068:	025d                	addi	tp,tp,23
    106a:	0086                	slli	ra,ra,0x1
    106c:	012c                	addi	a1,sp,136
    106e:	025e                	slli	tp,tp,0x17
    1070:	00000087          	0x87
    1074:	5d09                	li	s10,-30
    for(i = 0; i < N; ++i){
    1076:	0000                	unimp
    1078:	8400                	0x8400
        secret_key_f[i] = keys[i];
    107a:	0010                	0x10
    107c:	0a00                	addi	s0,sp,272
    107e:	0069                	c.nop	26
    1080:	0000                	unimp
    1082:	0036                	c.slli	zero,0xd
    1084:	5d09                	li	s10,-30
    for(i = 0; i < N; ++i){
    1086:	0000                	unimp
    1088:	9700                	0x9700
    108a:	0010                	0x10
    for(i = N; i < (2*N); ++i){
    108c:	3400                	fld	fs0,40(s0)
    108e:	0069                	c.nop	26
    1090:	0000                	unimp
    1092:	00000f9b          	0xf9b
    1096:	2f00                	fld	fs0,24(a4)
        secret_key_fp[i-(2*N)] = keys[i];
    1098:	0348                	addi	a0,sp,388
    109a:	0000                	unimp
    109c:	5401                	li	s0,-32
    109e:	0601                	addi	a2,a2,0
    10a0:	00000b63          	beqz	zero,10b6 <main+0x6a>
    for(i = (2*N); i < (3*N); ++i){
    10a4:	06b6                	slli	a3,a3,0xd
    for(i = (3*N); i < (4*N); ++i){
    10a6:	0000                	unimp
    10a8:	02e4                	addi	s1,sp,332
    10aa:	0000                	unimp
    10ac:	9c01                	0x9c01
    10ae:	12b2                	slli	t0,t0,0x2c
    10b0:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
    10b2:	9031                	srli	s0,s0,0x2c
    10b4:	0006                	c.slli	zero,0x1
    10b6:	0100                	addi	s0,sp,128
    10b8:	0154                	addi	a3,sp,132
    10ba:	6316                	flw	ft6,68(sp)
    for(i = (4*N); i < (5*N); ++i){
    10bc:	ee00000b          	0xee00000b
    10c0:	0008                	0x8
    10c2:	3100                	fld	fs0,32(a0)
    10c4:	0188                	addi	a0,sp,192
    10c6:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
    10c8:	5401                	li	s0,-32
    10ca:	2201                	jal	11ca <__DTOR_END__+0x76>
    10cc:	00000b63          	beqz	zero,10e2 <main+0x96>
    10d0:	0928                	addi	a0,sp,152
    for(i = (5*N); i < (6*N+1); ++i){
    10d2:	0000                	unimp
    10d4:	1231                	addi	tp,tp,-20
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10d6:	0000                	unimp
    10d8:	0100                	addi	s0,sp,128
    10da:	0154                	addi	a3,sp,132
    10dc:	5d2d                	li	s10,-21
    10de:	0000                	unimp
    10e0:	6200                	flw	fs0,0(a2)
    10e2:	0009                	c.nop	2
    10e4:	3000                	fld	fs0,32(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10e6:	6f6d                	lui	t5,0x1b
    10e8:	0064                	addi	s1,sp,12
    10ea:	5401                	li	s0,-32
    10ec:	3701                	jal	fec <memset+0x48>
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09a6                	slli	s3,s3,0x9
    10f4:	0000                	unimp
    10f6:	8a26                	mv	s4,s1
    10f8:	0002                	c.slli64	zero
            resultkon[0] = 0xDEDEDEDE;
    10fa:	0100                	addi	s0,sp,128
    10fc:	0156                	slli	sp,sp,0x15
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10fe:	630a                	flw	ft6,128(sp)
    1100:	dd00000b          	0xdd00000b
    1104:	0009                	c.nop	2
    1106:	2a00                	fld	fs0,16(a2)
            resultkon[0] = 0xDEDEDEDE;
    1108:	004e                	c.slli	zero,0x13
    110a:	5701                	li	a4,-32
    for(i = 0; i < 32; ++i){
    110c:	0901                	addi	s2,s2,0
    110e:	005d                	c.nop	23
        if(!(message[i] == Dec_Message[i])){
    1110:	0000                	unimp
    1112:	09f5                	addi	s3,s3,29
    1114:	0000                	unimp
    1116:	692a                	flw	fs2,136(sp)
    1118:	0100                	addi	s0,sp,128
    111a:	5d0c0157          	0x5d0c0157
    111e:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    1120:	2300                	fld	fs0,0(a4)
    1122:	000a                	c.slli	zero,0x2
    1124:	2a00                	fld	fs0,16(a2)
    1126:	006a                	c.slli	zero,0x1a
    1128:	5701                	li	a4,-32
}
    112a:	0f01                	addi	t5,t5,0
    112c:	005d                	c.nop	23
    112e:	0000                	unimp
    1130:	0c9c                	addi	a5,sp,592
    1132:	0000                	unimp
    1134:	3026                	fld	ft0,104(sp)
    1136:	0005                	c.nop	1
    1138:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    113a:	0158                	addi	a4,sp,132
    for(i = 0; i < 32; ++i){
    113c:	b209                	j	a3e <generate_keys+0xa4>
    113e:	0012                	c.slli	zero,0x4
    1140:	ba00                	fsd	fs0,48(a2)
    1142:	000c                	0xc
    1144:	2600                	fld	fs0,8(a2)
    1146:	05a4                	addi	s1,sp,712
    1148:	0000                	unimp
    114a:	5901                	li	s2,-32
    114c:	0901                	addi	s2,s2,0
    114e:	12c5                	addi	t0,t0,-15
    1150:	0000                	unimp
    1152:	0cda                	slli	s9,s9,0x16
    1154:	0000                	unimp
    1156:	722a                	flw	ft4,168(sp)
    1158:	0069                	c.nop	26
    115a:	5a01                	li	s4,-32
    115c:	0901                	addi	s2,s2,0
    115e:	12d8                	addi	a4,sp,356
    1160:	0000                	unimp
    1162:	0cfa                	slli	s9,s9,0x1e
    1164:	0000                	unimp
    1166:	4d26                	lw	s10,72(sp)
    1168:	0004                	0x4
    116a:	0100                	addi	s0,sp,128
    116c:	015c                	addi	a5,sp,132
    116e:	eb09                	bnez	a4,1180 <__DTOR_END__+0x2c>
    1170:	0012                	c.slli	zero,0x4
    1172:	3100                	fld	fs0,32(a0)
    1174:	000d                	c.nop	3
    1176:	2a00                	fld	fs0,16(a2)
    1178:	6974                	flw	fa3,84(a0)
    117a:	0100                	addi	s0,sp,128
    117c:	015d                	addi	sp,sp,23
    117e:	fe09                	bnez	a2,1098 <main+0x4c>
    1180:	0012                	c.slli	zero,0x4
    1182:	8100                	0x8100
    1184:	000d                	c.nop	3
    1186:	2600                	fld	fs0,8(a2)
    1188:	0465                	addi	s0,s0,25
    118a:	0000                	unimp
    118c:	5e01                	li	t3,-32
    118e:	0901                	addi	s2,s2,0
    1190:	1311                	addi	t1,t1,-28
    1192:	0000                	unimp
    1194:	0dba                	slli	s11,s11,0xe
    1196:	0000                	unimp
    1198:	2026                	fld	ft0,72(sp)
    119a:	0002                	c.slli64	zero
    119c:	0100                	addi	s0,sp,128
    119e:	015f 2409 0013      	0x132409015f
    11a4:	0a00                	addi	s0,sp,272
    11a6:	000e                	c.slli	zero,0x3
    11a8:	2a00                	fld	fs0,16(a2)
    11aa:	6572                	flw	fa0,28(sp)
    11ac:	60010073          	0x60010073
    11b0:	0a01                	addi	s4,s4,0
    11b2:	00000b63          	beqz	zero,11c8 <__DTOR_END__+0x74>
    11b6:	00000e4f          	fnmadd.s	ft8,ft0,ft0,ft0,rne
    11ba:	4f26                	lw	t5,72(sp)
    11bc:	0001                	nop
    11be:	0100                	addi	s0,sp,128
    11c0:	0161                	addi	sp,sp,24
    11c2:	630a                	flw	ft6,128(sp)
    11c4:	6d00000b          	0x6d00000b
    11c8:	000e                	c.slli	zero,0x3
    11ca:	2600                	fld	fs0,8(a2)
    11cc:	0154                	addi	a3,sp,132
    11ce:	0000                	unimp
    11d0:	6201                	0x6201
    11d2:	0a01                	addi	s4,s4,0
    11d4:	00000b63          	beqz	zero,11ea <__DTOR_END__+0x96>
    11d8:	00000e8b          	0xe8b
    11dc:	1e26                	slli	t3,t3,0x29
    11de:	0004                	0x4
    11e0:	0100                	addi	s0,sp,128
    11e2:	5d090163          	beq	s2,a6,17a4 <result+0x1c>
    11e6:	0000                	unimp
    11e8:	a900                	fsd	fs0,16(a0)
    11ea:	000e                	c.slli	zero,0x3
    11ec:	3300                	fld	fs0,32(a4)
    11ee:	0069                	c.nop	26
    11f0:	0000                	unimp
    11f2:	0eea                	slli	t4,t4,0x1a
    11f4:	0000                	unimp
    11f6:	00006933          	or	s2,zero,zero
    11fa:	1800                	addi	s0,sp,48
    11fc:	3300000f          	0x3300000f
    1200:	0069                	c.nop	26
    1202:	0000                	unimp
    1204:	0f46                	slli	t5,t5,0x11
    1206:	0000                	unimp
    1208:	00006933          	or	s2,zero,zero
    120c:	7400                	flw	fs0,40(s0)
    120e:	3300000f          	0x3300000f
    1212:	0069                	c.nop	26
    1214:	0000                	unimp
    1216:	0fa2                	slli	t6,t6,0x8
    1218:	0000                	unimp
    121a:	00006933          	or	s2,zero,zero
    121e:	d000                	sw	s0,32(s0)
    1220:	3300000f          	0x3300000f
    1224:	0069                	c.nop	26
    1226:	0000                	unimp
    1228:	0ffe                	slli	t6,t6,0x1f
    122a:	0000                	unimp
    122c:	0007982b          	0x7982b
    1230:	3700                	fld	fs0,40(a4)
    1232:	58000013          	li	zero,1408
    1236:	0012                	c.slli	zero,0x4
    1238:	2c00                	fld	fs0,24(s0)
    123a:	5a01                	li	s4,-32
    123c:	8a02                	jr	s4
    123e:	2c00                	fld	fs0,24(s0)
    1240:	5b01                	li	s6,-32
    1242:	8202                	jr	tp
    1244:	2c00                	fld	fs0,24(s0)
    1246:	5c01                	li	s8,-32
    1248:	8b02                	jr	s6
    124a:	2c00                	fld	fs0,24(s0)
    124c:	5d01                	li	s10,-32
    124e:	8202                	jr	tp
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5e01                	li	t3,-32
    1254:	7902                	flw	fs2,32(sp)
    1256:	0000                	unimp
    1258:	0007c22b          	0x7c22b
    125c:	3700                	fld	fs0,40(a4)
    125e:	84000013          	li	zero,-1984
    1262:	0012                	c.slli	zero,0x4
    1264:	2c00                	fld	fs0,24(s0)
    1266:	5a01                	li	s4,-32
    1268:	7202                	flw	ft4,32(sp)
    126a:	2c00                	fld	fs0,24(s0)
    126c:	5b01                	li	s6,-32
    126e:	8202                	jr	tp
    1270:	2c00                	fld	fs0,24(s0)
    1272:	5c01                	li	s8,-32
    1274:	8b02                	jr	s6
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5d01                	li	s10,-32
    127a:	8202                	jr	tp
    127c:	2c00                	fld	fs0,24(s0)
    127e:	5e01                	li	t3,-32
    1280:	7902                	flw	fs2,32(sp)
    1282:	0000                	unimp
    1284:	de2d                	beqz	a2,11fe <__DTOR_END__+0xaa>
    1286:	5f000007          	0x5f000007
    128a:	0016                	c.slli	zero,0x5
    128c:	2c00                	fld	fs0,24(s0)
    128e:	5a01                	li	s4,-32
    1290:	8502                	jr	a0
    1292:	2c00                	fld	fs0,24(s0)
    1294:	5b01                	li	s6,-32
    1296:	8202                	jr	tp
    1298:	2c00                	fld	fs0,24(s0)
    129a:	5c01                	li	s8,-32
    129c:	8402                	jr	s0
    129e:	2c00                	fld	fs0,24(s0)
    12a0:	5d01                	li	s10,-32
    12a2:	8202                	jr	tp
    12a4:	2c00                	fld	fs0,24(s0)
    12a6:	5e01                	li	t3,-32
    12a8:	7902                	flw	fs2,32(sp)
    12aa:	2c00                	fld	fs0,24(s0)
    12ac:	5f01                	li	t5,-32
    12ae:	3001                	jal	aae <generate_keys+0x114>
    12b0:	0000                	unimp
    12b2:	5d09                	li	s10,-30
    12b4:	0000                	unimp
    12b6:	c500                	sw	s0,8(a0)
    12b8:	0012                	c.slli	zero,0x4
    12ba:	3400                	fld	fs0,40(s0)
    12bc:	0069                	c.nop	26
    12be:	0000                	unimp
    12c0:	11ed                	addi	gp,gp,-5
    12c2:	0000                	unimp
    12c4:	0900                	addi	s0,sp,144
    12c6:	005d                	c.nop	23
    12c8:	0000                	unimp
    12ca:	12d8                	addi	a4,sp,356
    12cc:	0000                	unimp
    12ce:	6934                	flw	fa3,80(a0)
    12d0:	0000                	unimp
    12d2:	f600                	fsw	fs0,40(a2)
    12d4:	0011                	c.nop	4
    12d6:	0000                	unimp
    12d8:	5d09                	li	s10,-30
    12da:	0000                	unimp
    12dc:	eb00                	fsw	fs0,16(a4)
    12de:	0012                	c.slli	zero,0x4
    12e0:	3400                	fld	fs0,40(s0)
    12e2:	0069                	c.nop	26
    12e4:	0000                	unimp
    12e6:	11ff                	0x11ff
    12e8:	0000                	unimp
    12ea:	0900                	addi	s0,sp,144
    12ec:	005d                	c.nop	23
    12ee:	0000                	unimp
    12f0:	12fe                	slli	t0,t0,0x3f
    12f2:	0000                	unimp
    12f4:	6934                	flw	fa3,80(a0)
    12f6:	0000                	unimp
    12f8:	0800                	addi	s0,sp,16
    12fa:	0012                	c.slli	zero,0x4
    12fc:	0000                	unimp
    12fe:	5d09                	li	s10,-30
    1300:	0000                	unimp
    1302:	1100                	addi	s0,sp,160
    1304:	34000013          	li	zero,832
    1308:	0069                	c.nop	26
    130a:	0000                	unimp
    130c:	1211                	addi	tp,tp,-28
    130e:	0000                	unimp
    1310:	0900                	addi	s0,sp,144
    1312:	005d                	c.nop	23
    1314:	0000                	unimp
    1316:	1324                	addi	s1,sp,424
    1318:	0000                	unimp
    131a:	6934                	flw	fa3,80(a0)
    131c:	0000                	unimp
    131e:	1a00                	addi	s0,sp,304
    1320:	0012                	c.slli	zero,0x4
    1322:	0000                	unimp
    1324:	5d09                	li	s10,-30
    1326:	0000                	unimp
    1328:	3700                	fld	fs0,40(a4)
    132a:	34000013          	li	zero,832
    132e:	0069                	c.nop	26
    1330:	0000                	unimp
    1332:	00001223          	sh	zero,4(zero) # 4 <__DYNAMIC+0x4>
    1336:	3500                	fld	fs0,40(a0)
    1338:	0180                	addi	s0,sp,192
    133a:	0000                	unimp
    133c:	c801                	beqz	s0,134c <_bss_start+0x74>
    133e:	6306                	flw	ft6,64(sp)
    1340:	6600000b          	0x6600000b
    1344:	0004                	0x4
    1346:	5000                	lw	s0,32(s0)
    1348:	0002                	c.slli64	zero
    134a:	0100                	addi	s0,sp,128
    134c:	c09c                	sw	a5,0(s1)
    134e:	0014                	0x14
    1350:	3600                	fld	fs0,40(a2)
    1352:	756e                	flw	fa0,248(sp)
    1354:	006d                	c.nop	27
    1356:	c801                	beqz	s0,1366 <_bss_start+0x8e>
    1358:	000b6313          	ori	t1,s6,0
    135c:	2c00                	fld	fs0,24(s0)
    135e:	0010                	0x10
    1360:	3700                	fld	fs0,40(a4)
    1362:	0106                	slli	sp,sp,0x1
    1364:	0000                	unimp
    1366:	c801                	beqz	s0,1376 <_bss_start+0x9e>
    1368:	5d1c                	lw	a5,56(a0)
    136a:	0000                	unimp
    136c:	4d00                	lw	s0,24(a0)
    136e:	0010                	0x10
    1370:	3700                	fld	fs0,40(a4)
    1372:	0672                	slli	a2,a2,0x1c
    1374:	0000                	unimp
    1376:	c801                	beqz	s0,1386 <_bss_start+0xae>
    1378:	6328                	flw	fa0,64(a4)
    137a:	9e00000b          	0x9e00000b
    137e:	0010                	0x10
    1380:	3700                	fld	fs0,40(a4)
    1382:	0696                	slli	a3,a3,0x5
    1384:	0000                	unimp
    1386:	c801                	beqz	s0,1396 <_bss_start+0xbe>
    1388:	00005d33          	srl	s10,zero,zero
    138c:	d800                	sw	s0,48(s0)
    138e:	0010                	0x10
    1390:	3600                	fld	fs0,40(a2)
    1392:	6f6d                	lui	t5,0x1b
    1394:	0064                	addi	s1,sp,12
    1396:	c801                	beqz	s0,13a6 <_bss_start+0xce>
    1398:	00005d3f 00110f00 	0x110f0000005d3f
    13a0:	3800                	fld	fs0,48(s0)
    13a2:	0075                	c.nop	29
    13a4:	ca01                	beqz	a2,13b4 <_bss_start+0xdc>
    13a6:	5d09                	li	s10,-30
    13a8:	0000                	unimp
    13aa:	4600                	lw	s0,8(a2)
    13ac:	0011                	c.nop	4
    13ae:	3800                	fld	fs0,48(s0)
    13b0:	0064                	addi	s1,sp,12
    13b2:	ca01                	beqz	a2,13c2 <_bss_start+0xea>
    13b4:	00005d0b          	0x5d0b
    13b8:	6f00                	flw	fs0,24(a4)
    13ba:	0011                	c.nop	4
    13bc:	3900                	fld	fs0,48(a0)
    13be:	3264                	fld	fs1,224(a2)
    13c0:	0100                	addi	s0,sp,128
    13c2:	0dca                	slli	s11,s11,0x12
    13c4:	005d                	c.nop	23
    13c6:	0000                	unimp
    13c8:	6938                	flw	fa4,80(a0)
    13ca:	0100                	addi	s0,sp,128
    13cc:	10ca                	slli	ra,ra,0x32
    13ce:	005d                	c.nop	23
    13d0:	0000                	unimp
    13d2:	118d                	addi	gp,gp,-29
    13d4:	0000                	unimp
    13d6:	6239                	lui	tp,0xe
    13d8:	4e5f 0100 12ca      	0x12ca01004e5f
    13de:	005d                	c.nop	23
    13e0:	0000                	unimp
    13e2:	7238                	flw	fa4,96(a2)
    13e4:	645f 0100 16ca      	0x16ca0100645f
    13ea:	005d                	c.nop	23
    13ec:	0000                	unimp
    13ee:	138d                	addi	t2,t2,-29
    13f0:	0000                	unimp
    13f2:	7a3a                	flw	fs4,172(sp)
    13f4:	0002                	c.slli64	zero
    13f6:	0100                	addi	s0,sp,128
    13f8:	0b630acb          	fnmsub.d	fs5,ft6,fs6,ft1,rne
    13fc:	0000                	unimp
    13fe:	000013ab          	0x13ab
    1402:	7638                	flw	fa4,104(a2)
    1404:	0100                	addi	s0,sp,128
    1406:	09cd                	addi	s3,s3,19
    1408:	14c0                	addi	s0,sp,612
    140a:	0000                	unimp
    140c:	000013c3          	fmadd.s	ft7,ft0,ft0,ft0,rtz
    1410:	7138                	flw	fa4,96(a0)
    1412:	0100                	addi	s0,sp,128
    1414:	09ce                	slli	s3,s3,0x13
    1416:	000014d3          	fadd.s	fs1,ft0,ft0,rtz
    141a:	000013e3          	bnez	zero,1c20 <random_keys+0xb0>
    141e:	783a                	flw	fa6,172(sp)
    1420:	0001                	nop
    1422:	0100                	addi	s0,sp,128
    1424:	0b630acf          	fnmadd.d	fs5,ft6,fs6,ft1,rne
    1428:	0000                	unimp
    142a:	00001403          	lh	s0,0(zero) # 0 <__DYNAMIC>
    142e:	1c3a                	slli	s8,s8,0x2e
    1430:	0002                	c.slli64	zero
    1432:	0100                	addi	s0,sp,128
    1434:	09d0                	addi	a2,sp,212
    1436:	14e6                	slli	s1,s1,0x39
    1438:	0000                	unimp
    143a:	1421                	addi	s0,s0,-24
    143c:	0000                	unimp
    143e:	1a3a                	slli	s4,s4,0x2e
    1440:	0002                	c.slli64	zero
    1442:	0100                	addi	s0,sp,128
    1444:	09d1                	addi	s3,s3,20
    1446:	14f9                	addi	s1,s1,-2
    1448:	0000                	unimp
    144a:	00001457          	0x1457
    144e:	00006933          	or	s2,zero,zero
    1452:	8300                	0x8300
    1454:	0014                	0x14
    1456:	3300                	fld	fs0,32(a4)
    1458:	0069                	c.nop	26
    145a:	0000                	unimp
    145c:	14b1                	addi	s1,s1,-20
    145e:	0000                	unimp
    1460:	00006933          	or	s2,zero,zero
    1464:	df00                	sw	s0,56(a4)
    1466:	0014                	0x14
    1468:	3300                	fld	fs0,32(a4)
    146a:	0069                	c.nop	26
    146c:	0000                	unimp
    146e:	150d                	addi	a0,a0,-29
    1470:	0000                	unimp
    1472:	0005da2b          	0x5da2b
    1476:	5f00                	lw	s0,56(a4)
    1478:	0016                	c.slli	zero,0x5
    147a:	a300                	fsd	fs0,0(a4)
    147c:	0014                	0x14
    147e:	2c00                	fld	fs0,24(s0)
    1480:	5a01                	li	s4,-32
    1482:	7202                	flw	ft4,32(sp)
    1484:	2c00                	fld	fs0,24(s0)
    1486:	5b01                	li	s6,-32
    1488:	8302                	jr	t1
    148a:	2c00                	fld	fs0,24(s0)
    148c:	5c01                	li	s8,-32
    148e:	8502                	jr	a0
    1490:	2c00                	fld	fs0,24(s0)
    1492:	5d01                	li	s10,-32
    1494:	8302                	jr	t1
    1496:	2c00                	fld	fs0,24(s0)
    1498:	5e01                	li	t3,-32
    149a:	8202                	jr	tp
    149c:	2c00                	fld	fs0,24(s0)
    149e:	5f01                	li	t5,-32
    14a0:	3001                	jal	ca0 <generate_keys+0x306>
    14a2:	2d00                	fld	fs0,24(a0)
    14a4:	05fa                	slli	a1,a1,0x1e
    14a6:	0000                	unimp
    14a8:	17c2                	slli	a5,a5,0x30
    14aa:	0000                	unimp
    14ac:	012c                	addi	a1,sp,136
    14ae:	025a                	slli	tp,tp,0x16
    14b0:	012c0087          	0x12c0087
    14b4:	0085025b          	0x85025b
    14b8:	012c                	addi	a1,sp,136
    14ba:	025c                	addi	a5,sp,260
    14bc:	0079                	c.nop	30
    14be:	0000                	unimp
    14c0:	5d09                	li	s10,-30
    14c2:	0000                	unimp
    14c4:	d300                	sw	s0,32(a4)
    14c6:	0014                	0x14
    14c8:	3400                	fld	fs0,40(s0)
    14ca:	0069                	c.nop	26
    14cc:	0000                	unimp
    14ce:	144e                	slli	s0,s0,0x33
    14d0:	0000                	unimp
    14d2:	0900                	addi	s0,sp,144
    14d4:	005d                	c.nop	23
    14d6:	0000                	unimp
    14d8:	14e6                	slli	s1,s1,0x39
    14da:	0000                	unimp
    14dc:	6934                	flw	fa3,80(a0)
    14de:	0000                	unimp
    14e0:	5700                	lw	s0,40(a4)
    14e2:	0014                	0x14
    14e4:	0000                	unimp
    14e6:	5d09                	li	s10,-30
    14e8:	0000                	unimp
    14ea:	f900                	fsw	fs0,48(a0)
    14ec:	0014                	0x14
    14ee:	3400                	fld	fs0,40(s0)
    14f0:	0069                	c.nop	26
    14f2:	0000                	unimp
    14f4:	1460                	addi	s0,sp,556
    14f6:	0000                	unimp
    14f8:	0900                	addi	s0,sp,144
    14fa:	005d                	c.nop	23
    14fc:	0000                	unimp
    14fe:	150c                	addi	a1,sp,672
    1500:	0000                	unimp
    1502:	6934                	flw	fa3,80(a0)
    1504:	0000                	unimp
    1506:	6900                	flw	fs0,16(a0)
    1508:	0014                	0x14
    150a:	0000                	unimp
    150c:	2a35                	jal	1648 <product2+0x118>
    150e:	0000                	unimp
    1510:	0100                	addi	s0,sp,128
    1512:	0691                	addi	a3,a3,4
    1514:	00000b63          	beqz	zero,152a <_bss_start+0x252>
    1518:	0300                	addi	s0,sp,384
    151a:	0000                	unimp
    151c:	0166                	slli	sp,sp,0x19
    151e:	0000                	unimp
    1520:	9c01                	0x9c01
    1522:	161d                	addi	a2,a2,-25
    1524:	0000                	unimp
    1526:	6136                	flw	ft2,76(sp)
    1528:	0100                	addi	s0,sp,128
    152a:	1591                	addi	a1,a1,-28
    152c:	00000b63          	beqz	zero,1542 <product2+0x12>
    1530:	1562                	slli	a0,a0,0x38
    1532:	0000                	unimp
    1534:	0006e537          	lui	a0,0x6e
    1538:	0100                	addi	s0,sp,128
    153a:	1c91                	addi	s9,s9,-28
    153c:	005d                	c.nop	23
    153e:	0000                	unimp
    1540:	159c                	addi	a5,sp,736
    1542:	0000                	unimp
    1544:	6236                	flw	ft4,76(sp)
    1546:	0100                	addi	s0,sp,128
    1548:	2991                	jal	199c <result+0x214>
    154a:	00000b63          	beqz	zero,1560 <product2+0x30>
    154e:	15ed                	addi	a1,a1,-5
    1550:	0000                	unimp
    1552:	0006ec37          	lui	s8,0x6e
    1556:	0100                	addi	s0,sp,128
    1558:	3091                	jal	d9c <ntru_deceypt+0x38>
    155a:	005d                	c.nop	23
    155c:	0000                	unimp
    155e:	00001627          	0x1627
    1562:	00052037          	lui	zero,0x52
    1566:	0100                	addi	s0,sp,128
    1568:	3c91                	jal	fbc <memset+0x18>
    156a:	005d                	c.nop	23
    156c:	0000                	unimp
    156e:	165e                	slli	a2,a2,0x37
    1570:	0000                	unimp
    1572:	383a                	fld	fa6,424(sp)
    1574:	0006                	c.slli	zero,0x1
    1576:	0100                	addi	s0,sp,128
    1578:	161d0993          	addi	s3,s10,353 # 5d67 <_stack_len+0x1d67>
    157c:	0000                	unimp
    157e:	1698                	addi	a4,sp,864
    1580:	0000                	unimp
    1582:	6938                	flw	fa4,80(a0)
    1584:	0100                	addi	s0,sp,128
    1586:	0994                	addi	a3,sp,208
    1588:	005d                	c.nop	23
    158a:	0000                	unimp
    158c:	16dc                	addi	a5,sp,868
    158e:	0000                	unimp
    1590:	6a38                	flw	fa4,80(a2)
    1592:	0100                	addi	s0,sp,128
    1594:	0b94                	addi	a3,sp,464
    1596:	005d                	c.nop	23
    1598:	0000                	unimp
    159a:	1778                	addi	a4,sp,940
    159c:	0000                	unimp
    159e:	6b38                	flw	fa4,80(a4)
    15a0:	0100                	addi	s0,sp,128
    15a2:	0d94                	addi	a3,sp,720
    15a4:	005d                	c.nop	23
    15a6:	0000                	unimp
    15a8:	17ac                	addi	a1,sp,1000
    15aa:	0000                	unimp
    15ac:	6a3a                	flw	fs4,140(sp)
    15ae:	0002                	c.slli64	zero
    15b0:	0100                	addi	s0,sp,128
    15b2:	0a95                	addi	s5,s5,5
    15b4:	00000b63          	beqz	zero,15ca <product2+0x9a>
    15b8:	17fa                	slli	a5,a5,0x3e
    15ba:	0000                	unimp
    15bc:	0c3a                	slli	s8,s8,0xe
    15be:	0000                	unimp
    15c0:	0100                	addi	s0,sp,128
    15c2:	0996                	slli	s3,s3,0x5
    15c4:	1639                	addi	a2,a2,-18
    15c6:	0000                	unimp
    15c8:	1812                	slli	a6,a6,0x24
    15ca:	0000                	unimp
    15cc:	643a                	flw	fs0,140(sp)
    15ce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15d2:	164c0997          	auipc	s3,0x164c0
    15d6:	0000                	unimp
    15d8:	1832                	slli	a6,a6,0x2c
    15da:	0000                	unimp
    15dc:	00006933          	or	s2,zero,zero
    15e0:	5200                	lw	s0,32(a2)
    15e2:	0018                	0x18
    15e4:	3300                	fld	fs0,32(a4)
    15e6:	0069                	c.nop	26
    15e8:	0000                	unimp
    15ea:	000018a7          	0x18a7
    15ee:	00006933          	or	s2,zero,zero
    15f2:	d900                	sw	s0,48(a0)
    15f4:	0018                	0x18
    15f6:	3300                	fld	fs0,32(a4)
    15f8:	0069                	c.nop	26
    15fa:	0000                	unimp
    15fc:	00001917          	auipc	s2,0x1
    1600:	602d                	c.lui	zero,0xb
    1602:	0004                	0x4
    1604:	c200                	sw	s0,0(a2)
    1606:	2c000017          	auipc	zero,0x2c000
    160a:	5a01                	li	s4,-32
    160c:	8602                	jr	a2
    160e:	2c00                	fld	fs0,24(s0)
    1610:	5b01                	li	s6,-32
    1612:	8402                	jr	s0
    1614:	2c00                	fld	fs0,24(s0)
    1616:	5c01                	li	s8,-32
    1618:	8302                	jr	t1
    161a:	0000                	unimp
    161c:	0900                	addi	s0,sp,144
    161e:	005d                	c.nop	23
    1620:	0000                	unimp
    1622:	1639                	addi	a2,a2,-18
    1624:	0000                	unimp
    1626:	6934                	flw	fa3,80(a0)
    1628:	0000                	unimp
    162a:	dc00                	sw	s0,56(s0)
    162c:	0015                	c.nop	5
    162e:	3400                	fld	fs0,40(s0)
    1630:	0069                	c.nop	26
    1632:	0000                	unimp
    1634:	15e5                	addi	a1,a1,-7
    1636:	0000                	unimp
    1638:	0900                	addi	s0,sp,144
    163a:	005d                	c.nop	23
    163c:	0000                	unimp
    163e:	164c                	addi	a1,sp,804
    1640:	0000                	unimp
    1642:	6934                	flw	fa3,80(a0)
    1644:	0000                	unimp
    1646:	ee00                	fsw	fs0,24(a2)
    1648:	0015                	c.nop	5
    164a:	0000                	unimp
    164c:	5d09                	li	s10,-30
    164e:	0000                	unimp
    1650:	5f00                	lw	s0,56(a4)
    1652:	0016                	c.slli	zero,0x5
    1654:	3400                	fld	fs0,40(s0)
    1656:	0069                	c.nop	26
    1658:	0000                	unimp
    165a:	000015f7          	0x15f7
    165e:	3500                	fld	fs0,40(a0)
    1660:	010d                	addi	sp,sp,3
    1662:	0000                	unimp
    1664:	4101                	li	sp,0
    1666:	6306                	flw	ft6,64(sp)
    1668:	3000000b          	0x3000000b
    166c:	0001                	nop
    166e:	d000                	sw	s0,32(s0)
    1670:	0001                	nop
    1672:	0100                	addi	s0,sp,128
    1674:	809c                	0x809c
    1676:	36000017          	auipc	zero,0x36000
    167a:	0061                	c.nop	24
    167c:	4101                	li	sp,0
    167e:	6314                	flw	fa3,0(a4)
    1680:	6c00000b          	0x6c00000b
    1684:	0019                	c.nop	6
    1686:	3700                	fld	fs0,40(a4)
    1688:	06e5                	addi	a3,a3,25
    168a:	0000                	unimp
    168c:	4101                	li	sp,0
    168e:	00005d1b          	0x5d1b
    1692:	a600                	fsd	fs0,8(a2)
    1694:	0019                	c.nop	6
    1696:	3600                	fld	fs0,40(a2)
    1698:	0062                	c.slli	zero,0x18
    169a:	4101                	li	sp,0
    169c:	6328                	flw	fa0,64(a4)
    169e:	ec00000b          	0xec00000b
    16a2:	0019                	c.nop	6
    16a4:	3700                	fld	fs0,40(a4)
    16a6:	06ec                	addi	a1,sp,844
    16a8:	0000                	unimp
    16aa:	4101                	li	sp,0
    16ac:	00005d2f          	0x5d2f
    16b0:	2600                	fld	fs0,8(a2)
    16b2:	001a                	c.slli	zero,0x6
    16b4:	3600                	fld	fs0,40(a2)
    16b6:	6f6d                	lui	t5,0x1b
    16b8:	0064                	addi	s1,sp,12
    16ba:	4101                	li	sp,0
    16bc:	00005d3b          	0x5d3b
    16c0:	5d00                	lw	s0,56(a0)
    16c2:	001a                	c.slli	zero,0x6
    16c4:	3700                	fld	fs0,40(a4)
    16c6:	0520                	addi	s0,sp,648
    16c8:	0000                	unimp
    16ca:	4101                	li	sp,0
    16cc:	5d44                	lw	s1,60(a0)
    16ce:	0000                	unimp
    16d0:	9400                	0x9400
    16d2:	001a                	c.slli	zero,0x6
    16d4:	3a00                	fld	fs0,48(a2)
    16d6:	0638                	addi	a4,sp,776
    16d8:	0000                	unimp
    16da:	4401                	li	s0,0
    16dc:	8009                	srli	s0,s0,0x2
    16de:	f2000017          	auipc	zero,0xf2000
    16e2:	001a                	c.slli	zero,0x6
    16e4:	3800                	fld	fs0,48(s0)
    16e6:	0069                	c.nop	26
    16e8:	4501                	li	a0,0
    16ea:	5d09                	li	s10,-30
    16ec:	0000                	unimp
    16ee:	2a00                	fld	fs0,16(a2)
    16f0:	3800001b          	0x3800001b
    16f4:	006a                	c.slli	zero,0x1a
    16f6:	4501                	li	a0,0
    16f8:	00005d0b          	0x5d0b
    16fc:	dc00                	sw	s0,56(s0)
    16fe:	3800001b          	0x3800001b
    1702:	4501006b          	0x4501006b
    1706:	5d0d                	li	s10,-29
    1708:	0000                	unimp
    170a:	6100                	flw	fs0,0(a0)
    170c:	001c                	0x1c
    170e:	3a00                	fld	fs0,48(a2)
    1710:	025a                	slli	tp,tp,0x16
    1712:	0000                	unimp
    1714:	4601                	li	a2,0
    1716:	630a                	flw	ft6,128(sp)
    1718:	af00000b          	0xaf00000b
    171c:	001c                	0x1c
    171e:	3a00                	fld	fs0,48(a2)
    1720:	000c                	0xc
    1722:	0000                	unimp
    1724:	4701                	li	a4,0
    1726:	9c09                	0x9c09
    1728:	c7000017          	auipc	zero,0xc7000
    172c:	001c                	0x1c
    172e:	3a00                	fld	fs0,48(a2)
    1730:	0364                	addi	s1,sp,396
    1732:	0000                	unimp
    1734:	4801                	li	a6,0
    1736:	af09                	j	1e48 <random_keys+0x2d8>
    1738:	e7000017          	auipc	zero,0xe7000
    173c:	001c                	0x1c
    173e:	3300                	fld	fs0,32(a4)
    1740:	0069                	c.nop	26
    1742:	0000                	unimp
    1744:	00001d07          	0x1d07
    1748:	00006933          	or	s2,zero,zero
    174c:	5c00                	lw	s0,56(s0)
    174e:	001d                	c.nop	7
    1750:	3300                	fld	fs0,32(a4)
    1752:	0069                	c.nop	26
    1754:	0000                	unimp
    1756:	1d8e                	slli	s11,s11,0x23
    1758:	0000                	unimp
    175a:	00006933          	or	s2,zero,zero
    175e:	cc00                	sw	s0,24(s0)
    1760:	001d                	c.nop	7
    1762:	2d00                	fld	fs0,24(a0)
    1764:	02ea                	slli	t0,t0,0x1a
    1766:	0000                	unimp
    1768:	17c2                	slli	a5,a5,0x30
    176a:	0000                	unimp
    176c:	012c                	addi	a1,sp,136
    176e:	025a                	slli	tp,tp,0x16
    1770:	012c0087          	0x12c0087
    1774:	0085025b          	0x85025b
    1778:	012c                	addi	a1,sp,136
    177a:	025c                	addi	a5,sp,260
    177c:	0084                	addi	s1,sp,64
    177e:	0000                	unimp
    1780:	5d09                	li	s10,-30
    1782:	0000                	unimp
    1784:	9c00                	0x9c00
    1786:	34000017          	auipc	zero,0x34000
    178a:	0069                	c.nop	26
    178c:	0000                	unimp
    178e:	0000173f 00006934 	0x69340000173f
    1796:	4800                	lw	s0,16(s0)
    1798:	00000017          	auipc	zero,0x0
    179c:	5d09                	li	s10,-30
    179e:	0000                	unimp
    17a0:	af00                	fsd	fs0,24(a4)
    17a2:	34000017          	auipc	zero,0x34000
    17a6:	0069                	c.nop	26
    17a8:	0000                	unimp
    17aa:	1751                	addi	a4,a4,-12
    17ac:	0000                	unimp
    17ae:	0900                	addi	s0,sp,144
    17b0:	005d                	c.nop	23
    17b2:	0000                	unimp
    17b4:	17c2                	slli	a5,a5,0x30
    17b6:	0000                	unimp
    17b8:	6934                	flw	fa3,80(a0)
    17ba:	0000                	unimp
    17bc:	5a00                	lw	s0,48(a2)
    17be:	00000017          	auipc	zero,0x0
    17c2:	00056e3b          	0x56e3b
    17c6:	0100                	addi	s0,sp,128
    17c8:	00920623          	sb	s1,12(tp) # e00c <_stack+0xc>
    17cc:	0000                	unimp
    17ce:	009e                	slli	ra,ra,0x7
    17d0:	0000                	unimp
    17d2:	9c01                	0x9c01
    17d4:	1884                	addi	s1,sp,112
    17d6:	0000                	unimp
    17d8:	6136                	flw	ft2,76(sp)
    17da:	0031                	c.nop	12
    17dc:	2301                	jal	1cdc <random_keys+0x16c>
    17de:	6315                	lui	t1,0x5
    17e0:	2100000b          	0x2100000b
    17e4:	001e                	c.slli	zero,0x7
    17e6:	3c00                	fld	fs0,56(s0)
    17e8:	3261                	jal	1170 <__DTOR_END__+0x1c>
    17ea:	0100                	addi	s0,sp,128
    17ec:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    17f0:	0000                	unimp
    17f2:	5b01                	li	s6,-32
    17f4:	00055337          	lui	t1,0x55
    17f8:	0100                	addi	s0,sp,128
    17fa:	005d2623          	sw	t0,12(s10)
    17fe:	0000                	unimp
    1800:	1e4d                	addi	t3,t3,-13
    1802:	0000                	unimp
    1804:	6938                	flw	fa4,80(a0)
    1806:	0100                	addi	s0,sp,128
    1808:	0524                	addi	s1,sp,648
    180a:	005d                	c.nop	23
    180c:	0000                	unimp
    180e:	00001eab          	0x1eab
    1812:	843d                	srai	s0,s0,0xf
    1814:	0018                	0x18
    1816:	fe00                	fsw	fs0,56(a2)
    1818:	0000                	unimp
    181a:	0a00                	addi	s0,sp,272
    181c:	0000                	unimp
    181e:	0100                	addi	s0,sp,128
    1820:	1129                	addi	sp,sp,-22
    1822:	1839                	addi	a6,a6,-18
    1824:	0000                	unimp
    1826:	9c3e                	add	s8,s8,a5
    1828:	0018                	0x18
    182a:	0300                	addi	s0,sp,384
    182c:	001f 3e00 1891      	0x18913e00001f
    1832:	0000                	unimp
    1834:	1f26                	slli	t5,t5,0x29
    1836:	0000                	unimp
    1838:	3d00                	fld	fs0,56(a0)
    183a:	1884                	addi	s1,sp,112
    183c:	0000                	unimp
    183e:	0110                	addi	a2,sp,128
    1840:	0000                	unimp
    1842:	000a                	c.slli	zero,0x2
    1844:	0000                	unimp
    1846:	2e01                	jal	1b56 <ti_2+0x176>
    1848:	6011                	c.lui	zero,0x4
    184a:	0018                	0x18
    184c:	3e00                	fld	fs0,56(a2)
    184e:	189c                	addi	a5,sp,112
    1850:	0000                	unimp
    1852:	1f49                	addi	t5,t5,-14
    1854:	0000                	unimp
    1856:	913e                	add	sp,sp,a5
    1858:	0018                	0x18
    185a:	6c00                	flw	fs0,24(s0)
    185c:	001f 0000 843f      	0x843f0000001f
    1862:	0018                	0x18
    1864:	2200                	fld	fs0,0(a2)
    1866:	0001                	nop
    1868:	0a00                	addi	s0,sp,272
    186a:	0000                	unimp
    186c:	0100                	addi	s0,sp,128
    186e:	1134                	addi	a3,sp,168
    1870:	9c3e                	add	s8,s8,a5
    1872:	0018                	0x18
    1874:	8f00                	0x8f00
    1876:	001f 3e00 1891      	0x18913e00001f
    187c:	0000                	unimp
    187e:	1fb2                	slli	t6,t6,0x2c
    1880:	0000                	unimp
    1882:	0000                	unimp
    1884:	3a40                	fld	fs0,176(a2)
    1886:	0000                	unimp
    1888:	0100                	addi	s0,sp,128
    188a:	a801060f          	0xa801060f
    188e:	0018                	0x18
    1890:	4100                	lw	s0,0(a0)
    1892:	3161                	jal	151a <_bss_start+0x242>
    1894:	0100                	addi	s0,sp,128
    1896:	18a81e0f          	0x18a81e0f
    189a:	0000                	unimp
    189c:	6141                	addi	sp,sp,16
    189e:	0032                	c.slli	zero,0xc
    18a0:	0f01                	addi	t5,t5,0
    18a2:	a830                	fsd	fa2,80(s0)
    18a4:	0018                	0x18
    18a6:	0000                	unimp
    18a8:	0410                	addi	a2,sp,512
    18aa:	0069                	c.nop	26
    18ac:	0000                	unimp
    18ae:	8442                	mv	s0,a6
    18b0:	0018                	0x18
    18b2:	8c00                	0x8c00
    18b4:	0000                	unimp
    18b6:	0600                	addi	s0,sp,768
    18b8:	0000                	unimp
    18ba:	0100                	addi	s0,sp,128
    18bc:	d29c                	sw	a5,32(a3)
    18be:	0018                	0x18
    18c0:	3e00                	fld	fs0,56(a2)
    18c2:	1891                	addi	a7,a7,-28
    18c4:	0000                	unimp
    18c6:	1fd5                	addi	t6,t6,-11
    18c8:	0000                	unimp
    18ca:	00189c43          	fmadd.s	fs8,fa7,ft1,ft0,rtz
    18ce:	0100                	addi	s0,sp,128
    18d0:	2344005b          	0x2344005b
    18d4:	19000003          	lb	zero,400(zero) # 190 <polymult+0x60>
    18d8:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    18dc:	4400                	lw	s0,8(s0)
    18de:	006e                	c.slli	zero,0x1b
    18e0:	0000                	unimp
    18e2:	0064                	addi	s1,sp,12
    18e4:	0000                	unimp
    18e6:	1e000007          	0x1e000007
    18ea:	0000                	unimp
    18ec:	0200                	addi	s0,sp,256
    18ee:	0500                	addi	s0,sp,640
    18f0:	0004                	0x4
    18f2:	0400                	addi	s0,sp,512
    18f4:	6401                	0x6401
    18f6:	002a                	c.slli	zero,0xa
    18f8:	1800                	addi	s0,sp,48
    18fa:	0000                	unimp
    18fc:	f300                	fsw	fs0,32(a4)
    18fe:	0006                	c.slli	zero,0x1
    1900:	fa00                	fsw	fs0,48(a2)
    1902:	0006                	c.slli	zero,0x1
    1904:	2400                	fld	fs0,8(s0)
    1906:	01000007          	0x1000007
    190a:	80              	Address 0x000000000000190a is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x19c>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 55001 <_stack_start+0x45001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	0b390b3b          	0xb390b3b
            a1[length-2] = a1[length-2] + a2[length-2];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
} //end of function
  f8:	1400                	addi	s0,sp,544
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    asm volatile(
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
            for (i = 0; i < (length / 3); i++) {
 108:	16000013          	li	zero,352
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	39053b0b          	0x39053b0b
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0013010b          	0x13010b
    asm volatile(
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-2) / 3); i++) {
 12e:	1349                	addi	t1,t1,-14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13e:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
    int pola[size_a];
 14e:	0b39053b          	0xb39053b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    int line[size_b][size_a + size_b];
 160:	0013010b          	0x13010b
    int pola[size_a];
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
    int line[size_b][size_a + size_b];
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
    int pola[size_a];
 170:	1301                	addi	t1,t1,-32
    int polb[size_b];
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
    int pola[size_a];
 178:	3a0e                	fld	fs4,224(sp)
    int polb[size_b];
 17a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0013490b          	0x13490b
    int line[size_b][size_a + size_b];
 182:	1e00                	addi	s0,sp,816
    int pola[size_a];
 184:	0e030013          	addi	zero,t1,224
    int polb[size_b];
 188:	193c                	addi	a5,sp,184
    for (i = 0; i < size_b; ++i){
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
            product[j] = 0;
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
    for (i = 0; i < size_b; ++i){
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
    for (i = 0; i < size_a; ++i){
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    for (i = 0; i < size_b; ++i){
 1aa:	0300                	addi	s0,sp,384
    if(star_mult == 1){
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c2:	0b390b3b          	0xb390b3b
            product[j] = 0;
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
            line[i][j] = 0;
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x1c>
            product[j] = 0;
 1d0:	00052f13          	slti	t5,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 1e2:	1802193f 2e250000 	0x2e2500001802193f
        pola[i] = a[i];
 1ea:	3f01                	jal	fa <array_add+0x68>
 1ec:	0319                	addi	t1,t1,6
            pola[i] = pola[i] + mod;
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
        while (pola[i] < 0){
 1f4:	1113490b          	0x1113490b
 1f8:	1201                	addi	tp,tp,-32
        pola[i] = pola[i] % mod;
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
    for (i = 0; i < size_a; ++i){
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
        pola[i] = pola[i] % mod;
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
    for (i = 0; i < size_a; ++i){
 206:	0300                	addi	s0,sp,384
            pola[i] = pola[i] + mod;
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
        polb[i] = b[i];
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
        while (polb[i] < 0){
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
        polb[i] = polb[i] % mod;
 21c:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
        polb[i] = polb[i] % mod;
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
    for (i = 0; i < size_b; ++i){
 228:	0300                	addi	s0,sp,384
            polb[i] = polb[i] + mod;
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
        for (j = size_b -1; j >= 0; j = j-1){
 230:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 234:	0018                	0x18
    for (i = 0; i < size_b; ++i){
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
    for(i = 0; i < size_b; ++i){
 23a:	0b3a0e03          	lb	t3,179(s4)
		array_add(product,line[i],size_a+size_b-1);
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
    for(i = 0; i < size_b; ++i){
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
    for(j = 0; j < size_a + size_b -1; ++j){
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
}
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
                line[size_b-1-j][k] = pola[k]*polb[j];
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
                line[size_b-1-j][k] = pola[k]*polb[j];
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 290:	4919270b          	0x4919270b
        for (j = size_b -1; j >= 0; j = j-1){
 294:	12011113          	0x12011113
 298:	4006                	0x4006
 29a:	9718                	0x9718
            for (k = size_a-1; k >= 0; k = k-1 ){
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b0:	31000017          	auipc	zero,0x31000
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ba:	0b39053b          	0xb39053b
        for (j = size_b -1; j >= 0; j = j-1){
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 2c4:	3432                	fld	fs0,296(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
            line[i][j] = line[i][j] % mod;
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
    for (i = 0; i < size_b; ++i){
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
        for(j = 0; j < size_a + size_b -1; ++j){
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
		array_add(product,line[i],size_a+size_b-1);
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
    for(i = 0; i < size_b; ++i){
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for(j = 0; j < size_a + size_b -1; ++j){
 2f4:	0b39                	addi	s6,s6,14
        product[j] = product[j] % mod;
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
    for(j = 0; j < size_a + size_b -1; ++j){
 2fe:	1840                	addi	s0,sp,52
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
    int line[size_b][size_a + size_b];
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 30e:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
 31c:	3a0e                	fld	fs4,224(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
    int pola[size_a];
 32c:	0b3a0803          	lb	a6,179(s4)
    int line[size_b][size_a + size_b];
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
    int pola[size_a];
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
 340:	390b3b0b          	0x390b3b0b
    int pola[size_a];
 344:	0013490b          	0x13490b
    int polb[size_b];
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
    int pola[size_a];
 34c:	0b3a0e03          	lb	t3,179(s4)
    int polb[size_b];
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_b; ++i){
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
            product2[j] = 0;
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_b; ++i){
 366:	1119270b          	0x1119270b
    for(i = 0; i < size_a; ++i){
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
    for(i = 0; i < size_b; ++i){
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
    if(star_mult == 1){
 374:	0000                	unimp
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
            product2[j] = 0;
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
 390:	0b58                	addi	a4,sp,404
            line[i][j] = 0;
 392:	0b59                	addi	s6,s6,22
 394:	13010b57          	0x13010b57
            product2[j] = 0;
 398:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 39a:	053e                	slli	a0,a0,0xf
 39c:	3100                	fld	fs0,32(a0)
 39e:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
    for (i = 0; i < size_b; ++i){
 3a2:	3f00                	fld	fs0,56(a4)
 3a4:	011d                	addi	sp,sp,7
 3a6:	1331                	addi	t1,t1,-20
 3a8:	0111                	addi	sp,sp,4
        for(j = 0; j < size_a + size_b -1; ++j){
 3aa:	0612                	slli	a2,a2,0x4
 3ac:	0b58                	addi	a4,sp,404
        pola[i] = a[i];
 3ae:	0b59                	addi	s6,s6,22
 3b0:	00000b57          	0xb57
 3b4:	2e40                	fld	fs0,152(a2)
 3b6:	3f01                	jal	2c6 <polymult+0x196>
 3b8:	0319                	addi	t1,t1,6
 3ba:	3a0e                	fld	fs4,224(sp)
    for(i = 0; i < size_a; ++i){
 3bc:	390b3b0b          	0x390b3b0b
        pola[i] = a[i];
 3c0:	2019270b          	0x2019270b
        polb[i] = b[i];
 3c4:	0013010b          	0x13010b
 3c8:	4100                	lw	s0,0(a0)
 3ca:	0005                	c.nop	1
 3cc:	0b3a0803          	lb	a6,179(s4)
 3d0:	0b390b3b          	0xb390b3b
 3d4:	1349                	addi	t1,t1,-14
 3d6:	0000                	unimp
    for(i = 0; i < size_b; ++i){
 3d8:	2e42                	fld	ft8,16(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 3da:	3101                	jal	ffffffda <_stack_start+0xfffeffda>
 3dc:	12011113          	0x12011113
 3e0:	4006                	0x4006
 3e2:	9718                	0x9718
 3e4:	1942                	slli	s2,s2,0x30
 3e6:	1301                	addi	t1,t1,-32
 3e8:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ea:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ee:	00180213          	addi	tp,a6,1
            for (k = size_a-1; k >= 0; k = k-1 ){
 3f2:	4400                	lw	s0,8(s0)
 3f4:	002e                	c.slli	zero,0xb
        for (j = size_b -1; j >= 0; j = j-1){
 3f6:	193c193f 0e030e6e 	0xe030e6e193c193f
 3fe:	0b3a                	slli	s6,s6,0xe
            for (k = size_a-1; k >= 0; k = k-1 ){
 400:	00000b3b          	0xb3b
        array_add(product2,line[i],size_a+size_b-1);
 404:	0100                	addi	s0,sp,128
 406:	0011                	c.nop	4
 408:	0610                	addi	a2,sp,768
    for(i=0;i<size_b;++i){
 40a:	0655                	addi	a2,a2,21
 40c:	0e1b0e03          	lb	t3,225(s6)
}
 410:	0e25                	addi	t3,t3,9
 412:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	10e6                	slli	ra,ra,0x39
       2:	0000                	unimp
       4:	10f8                	addi	a4,sp,108
       6:	0000                	unimp
       8:	0001                	nop
       a:	f85a                	fsw	fs6,48(sp)
       c:	0010                	0x10
       e:	f900                	fsw	fs0,48(a0)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	10fa                	slli	ra,ra,0x3e
      20:	0000                	unimp
      22:	1134                	addi	a3,sp,168
      24:	0000                	unimp
      26:	0001                	nop
      28:	3a5a                	fld	fs4,432(sp)
      2a:	0011                	c.nop	4
      2c:	4400                	lw	s0,8(s0)
      2e:	0011                	c.nop	4
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	1074                	addi	a3,sp,44
      3e:	0000                	unimp
      40:	10c6                	slli	ra,ra,0x31
      42:	0000                	unimp
      44:	0001                	nop
      46:	c65a                	sw	s6,12(sp)
      48:	0010                	0x10
      4a:	e200                	fsw	fs0,0(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	6800                	flw	fs0,16(s0)
      5e:	0010                	0x10
      60:	a800                	fsd	fs0,16(s0)
      62:	0010                	0x10
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	10a8                	addi	a0,sp,104
      6c:	0000                	unimp
      6e:	10b2                	slli	ra,ra,0x2c
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	10b2                	slli	ra,ra,0x2c
      78:	0000                	unimp
      7a:	000010e3          	bnez	zero,87a <ext_euclid+0x1c4>
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	000010e3          	bnez	zero,882 <ext_euclid+0x1cc>
  jal x0, default_exc_handler
      86:	1138                	addi	a4,sp,168
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	3879                	jal	fffff92c <_stack_start+0xfffef92c>
}
      90:	0011                	c.nop	4
    switch(length%3) {
      92:	3a00                	fld	fs0,48(a2)
      94:	0011                	c.nop	4
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	113a                	slli	sp,sp,0x2e
      9e:	0000                	unimp
      a0:	1144                	addi	s1,sp,164
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	6800                	flw	fs0,16(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0010                	0x10
      b4:	8200                	0x8200
      b6:	0010                	0x10
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	1082                	slli	ra,ra,0x20
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	1084                	addi	s1,sp,96
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	1084                	addi	s1,sp,96
      cc:	0000                	unimp
      ce:	10f0                	addi	a2,sp,108
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	f07a                	fsw	ft10,32(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	0010                	0x10
      da:	f900                	fsw	fs0,48(a0)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	f900                	fsw	fs0,48(a0)
      e4:	0010                	0x10
      e6:	3800                	fld	fs0,48(s0)
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	0011                	c.nop	4
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	1138                	addi	a4,sp,168
      f2:	0000                	unimp
      f4:	113a                	slli	sp,sp,0x2e
      f6:	0000                	unimp
} //end of function
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fc:	3a7a                	fld	fs4,440(sp)
    asm volatile(
      fe:	0011                	c.nop	4
     100:	4400                	lw	s0,8(s0)
     102:	0011                	c.nop	4
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     108:	7af0                	flw	fa2,116(a3)
	...
    asm volatile(
     112:	1068                	addi	a0,sp,44
     114:	0000                	unimp
     116:	108e                	slli	ra,ra,0x23
     118:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	c4910003          	lb	zero,-951(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	8e7c                	0x8e7c
     120:	0010                	0x10
    asm volatile(
     122:	9800                	0x9800
     124:	0010                	0x10
     126:	0200                	addi	s0,sp,256
     128:	7e00                	flw	fs0,56(a2)
     12a:	9800                	0x9800
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0010                	0x10
     12e:	3200                	fld	fs0,32(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     130:	0011                	c.nop	4
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
     136:	3200                	fld	fs0,32(a2)
     138:	0011                	c.nop	4
    int line[size_b][size_a + size_b];
     13a:	3800                	fld	fs0,48(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13c:	0011                	c.nop	4
     13e:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	1138                	addi	a4,sp,168
     146:	0000                	unimp
     148:	113a                	slli	sp,sp,0x2e
     14a:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    int pola[size_a];
     150:	3a7c                	fld	fa5,240(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	0011                	c.nop	4
     154:	4400                	lw	s0,8(s0)
     156:	0011                	c.nop	4
     158:	0200                	addi	s0,sp,256
     15a:	7800                	flw	fs0,48(s0)
	...
    int pola[size_a];
     164:	6800                	flw	fs0,16(s0)
     166:	0010                	0x10
    int line[size_b][size_a + size_b];
     168:	c200                	sw	s0,0(a2)
     16a:	0010                	0x10
     16c:	0300                	addi	s0,sp,384
    int pola[size_a];
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
    int polb[size_b];
     172:	10c2                	slli	ra,ra,0x30
     174:	0000                	unimp
     176:	10c8                	addi	a0,sp,100
    int pola[size_a];
     178:	0000                	unimp
    int polb[size_b];
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	10c8                	addi	a0,sp,100
    int line[size_b][size_a + size_b];
     180:	0000                	unimp
     182:	000010e3          	bnez	zero,982 <ext_euclid+0x2cc>
    int pola[size_a];
     186:	0002                	c.slli64	zero
    int polb[size_b];
     188:	0080                	addi	s0,sp,64
    for (i = 0; i < size_b; ++i){
     18a:	000010e3          	bnez	zero,98a <ext_euclid+0x2d4>
     18e:	1138                	addi	a4,sp,168
            product[j] = 0;
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	387e                	fld	fa6,504(sp)
    for (i = 0; i < size_b; ++i){
     198:	0011                	c.nop	4
     19a:	3a00                	fld	fs0,48(a2)
     19c:	0011                	c.nop	4
    for (i = 0; i < size_a; ++i){
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	113a                	slli	sp,sp,0x2e
    for (i = 0; i < size_b; ++i){
     1a6:	0000                	unimp
     1a8:	1144                	addi	s1,sp,164
     1aa:	0000                	unimp
    if(star_mult == 1){
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	7400                	flw	fs0,40(s0)
     1ba:	0010                	0x10
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	7a00                	flw	fs0,48(a2)
     1be:	0010                	0x10
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
            product[j] = 0;
     1c4:	fa9f 0010 1000      	0x10000010fa9f
            line[i][j] = 0;
     1ca:	0011                	c.nop	4
     1cc:	0200                	addi	s0,sp,256
            product[j] = 0;
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     1d6:	0000                	unimp
     1d8:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
     1da:	000d                	c.nop	3
     1dc:	9000                	0x9000
     1de:	000d                	c.nop	3
     1e0:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0d90                	addi	a2,sp,720
        pola[i] = a[i];
     1e6:	0000                	unimp
     1e8:	0dfa                	slli	s11,s11,0x1e
     1ea:	0000                	unimp
     1ec:	0001                	nop
            pola[i] = pola[i] + mod;
     1ee:	fa58                	fsw	fa4,52(a2)
     1f0:	000d                	c.nop	3
        while (pola[i] < 0){
     1f2:	1400                	addi	s0,sp,544
     1f4:	000e                	c.slli	zero,0x3
     1f6:	0300                	addi	s0,sp,384
     1f8:	8700                	0x8700
        pola[i] = pola[i] % mod;
     1fa:	9f7f                	0x9f7f
     1fc:	0e14                	addi	a3,sp,784
    for (i = 0; i < size_a; ++i){
     1fe:	0000                	unimp
     200:	0e1a                	slli	t3,t3,0x6
        pola[i] = pola[i] % mod;
     202:	0000                	unimp
     204:	0004                	0x4
    for (i = 0; i < size_a; ++i){
     206:	9f5a01f3          	0x9f5a01f3
            pola[i] = pola[i] + mod;
     20a:	0e1a                	slli	t3,t3,0x6
        polb[i] = b[i];
     20c:	0000                	unimp
     20e:	0e50                	addi	a2,sp,788
     210:	0000                	unimp
     212:	0001                	nop
            polb[i] = polb[i] + mod;
     214:	0058                	addi	a4,sp,4
        while (polb[i] < 0){
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
        polb[i] = polb[i] % mod;
     21c:	6400                	flw	fs0,8(s0)
     21e:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     220:	9e00                	0x9e00
     222:	000d                	c.nop	3
        polb[i] = polb[i] % mod;
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
    for (i = 0; i < size_b; ++i){
     228:	0d9e                	slli	s11,s11,0x7
            polb[i] = polb[i] + mod;
     22a:	0000                	unimp
     22c:	0e12                	slli	t3,t3,0x4
    if(star_mult == 1){
     22e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     230:	0001                	nop
     232:	1266                	slli	tp,tp,0x39
        for(j = 0; j < size_a + size_b -1; ++j){
     234:	000e                	c.slli	zero,0x3
    for (i = 0; i < size_b; ++i){
     236:	1a00                	addi	s0,sp,304
     238:	000e                	c.slli	zero,0x3
    for(i = 0; i < size_b; ++i){
     23a:	0400                	addi	s0,sp,512
		array_add(product,line[i],size_a+size_b-1);
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	1a9f 000e 5000      	0x5000000e1a9f
    for(i = 0; i < size_b; ++i){
     246:	000e                	c.slli	zero,0x3
     248:	0100                	addi	s0,sp,128
     24a:	6600                	flw	fs0,8(a2)
	...
    for(j = 0; j < size_a + size_b -1; ++j){
     254:	0d64                	addi	s1,sp,668
}
     256:	0000                	unimp
     258:	0d92                	slli	s11,s11,0x4
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	925c                	0x925c
     260:	000d                	c.nop	3
     262:	0a00                	addi	s0,sp,272
     264:	000e                	c.slli	zero,0x3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0e0a                	slli	t3,t3,0x2
     26c:	0000                	unimp
     26e:	0e1a                	slli	t3,t3,0x6
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
                line[size_b-1-j][k] = pola[k]*polb[j];
     278:	0e1a                	slli	t3,t3,0x6
     27a:	0000                	unimp
     27c:	0e50                	addi	a2,sp,788
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     28a:	6400                	flw	fs0,8(s0)
     28c:	000d                	c.nop	3
     28e:	9800                	0x9800
            for (k = size_a-1; k >= 0; k = k-1 ){
     290:	000d                	c.nop	3
     292:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     294:	5d00                	lw	s0,56(a0)
     296:	0d98                	addi	a4,sp,720
     298:	0000                	unimp
     29a:	00000daf          	0xdaf
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a0:	af5a                	fsd	fs6,408(sp)
     2a2:	000d                	c.nop	3
     2a4:	5000                	lw	s0,32(s0)
     2a6:	000e                	c.slli	zero,0x3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
     2b6:	6400                	flw	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	000d                	c.nop	3
     2ba:	7a00                	flw	fs0,48(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     2bc:	000d                	c.nop	3
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0d7a                	slli	s10,s10,0x1e
            line[i][j] = line[i][j] % mod;
     2c4:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     2c6:	0e16                	slli	t3,t3,0x5
     2c8:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     2ca:	0001                	nop
     2cc:	1668                	addi	a0,sp,812
     2ce:	000e                	c.slli	zero,0x3
     2d0:	1a00                	addi	s0,sp,304
        for(j = 0; j < size_a + size_b -1; ++j){
     2d2:	000e                	c.slli	zero,0x3
     2d4:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	1a9f 000e 5000      	0x5000000e1a9f
        for(j = 0; j < size_a + size_b -1; ++j){
     2e0:	000e                	c.slli	zero,0x3
		array_add(product,line[i],size_a+size_b-1);
     2e2:	0100                	addi	s0,sp,128
     2e4:	6800                	flw	fs0,16(s0)
	...
    for(i = 0; i < size_b; ++i){
     2ee:	0d64                	addi	s1,sp,668
        product[j] = product[j] % mod;
     2f0:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     2f2:	00000daf          	0xdaf
        product[j] = product[j] % mod;
     2f6:	0001                	nop
     2f8:	af5f 000d 5000      	0x5000000daf5f
    for(j = 0; j < size_a + size_b -1; ++j){
     2fe:	000e                	c.slli	zero,0x3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
    int line[size_b][size_a + size_b];
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	6400                	flw	fs0,8(s0)
     310:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     312:	af00                	fsd	fs0,24(a4)
     314:	000d                	c.nop	3
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	00000daf          	0xdaf
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31e:	0e10                	addi	a2,sp,784
     320:	0000                	unimp
     322:	0001                	nop
     324:	1065                	c.nop	-7
     326:	000e                	c.slli	zero,0x3
     328:	1a00                	addi	s0,sp,304
     32a:	000e                	c.slli	zero,0x3
    int pola[size_a];
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
    int line[size_b][size_a + size_b];
     330:	6001                	0x6001
     332:	1a9f 000e 5000      	0x5000000e1a9f
    int pola[size_a];
     338:	000e                	c.slli	zero,0x3
     33a:	0100                	addi	s0,sp,128
     33c:	6500                	flw	fs0,8(a0)
	...
    int polb[size_b];
     346:	0df6                	slli	s11,s11,0x1d
     348:	0000                	unimp
     34a:	0e1a                	slli	t3,t3,0x6
    int pola[size_a];
     34c:	0000                	unimp
    int polb[size_b];
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
    int line[size_b][size_a + size_b];
     352:	0000                	unimp
    int polb[size_b];
     354:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     356:	0000                	unimp
     358:	b000                	fsd	fs0,32(s0)
     35a:	000d                	c.nop	3
            product2[j] = 0;
     35c:	bf00                	fsd	fs0,56(a4)
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
	...
    for(i = 0; i < size_a; ++i){
     36c:	0dc2                	slli	s11,s11,0x10
    for(i = 0; i < size_b; ++i){
     36e:	0000                	unimp
     370:	0de0                	addi	s0,sp,732
     372:	0000                	unimp
    if(star_mult == 1){
     374:	0001                	nop
     376:	e05a                	fsw	fs6,0(sp)
     378:	000d                	c.nop	3
     37a:	e300                	fsw	fs0,0(a4)
     37c:	000d                	c.nop	3
     37e:	0100                	addi	s0,sp,128
     380:	5c00                	lw	s0,56(s0)
     382:	0e1a                	slli	t3,t3,0x6
        for (j = size_b -1; j >= 0; j = j-1){
     384:	0000                	unimp
     386:	0e3e                	slli	t3,t3,0xf
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	0000                	unimp
     38a:	0001                	nop
            product2[j] = 0;
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
            line[i][j] = 0;
     392:	0000                	unimp
     394:	e400                	fsw	fs0,8(s0)
            product2[j] = 0;
     396:	000d                	c.nop	3
     398:	ef00                	fsw	fs0,24(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
	...
    for (i = 0; i < size_b; ++i){
     3a8:	0df0                	addi	a2,sp,732
        for(j = 0; j < size_a + size_b -1; ++j){
     3aa:	0000                	unimp
     3ac:	0e1a                	slli	t3,t3,0x6
        pola[i] = a[i];
     3ae:	0000                	unimp
     3b0:	0001                	nop
     3b2:	3e5a                	fld	ft8,432(sp)
     3b4:	000e                	c.slli	zero,0x3
     3b6:	5000                	lw	s0,32(s0)
     3b8:	000e                	c.slli	zero,0x3
     3ba:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     3bc:	5a00                	lw	s0,48(a2)
	...
        polb[i] = b[i];
     3c6:	0dc2                	slli	s11,s11,0x10
     3c8:	0000                	unimp
     3ca:	0dc8                	addi	a0,sp,724
     3cc:	0000                	unimp
     3ce:	0001                	nop
     3d0:	c859                	beqz	s0,466 <polydiv>
    for(i = 0; i < size_b; ++i){
     3d2:	000d                	c.nop	3
        polb[i] = b[i];
     3d4:	d400                	sw	s0,40(s0)
     3d6:	000d                	c.nop	3
    for(i = 0; i < size_b; ++i){
     3d8:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     3da:	5d00                	lw	s0,56(a0)
     3dc:	0dd4                	addi	a3,sp,724
     3de:	0000                	unimp
     3e0:	0dda                	slli	s11,s11,0x16
     3e2:	0000                	unimp
     3e4:	0001                	nop
     3e6:	f05e                	fsw	fs7,32(sp)
     3e8:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ea:	0800                	addi	s0,sp,16
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ec:	000e                	c.slli	zero,0x3
     3ee:	0100                	addi	s0,sp,128
     3f0:	5900                	lw	s0,48(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f2:	0e1a                	slli	t3,t3,0x6
     3f4:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     3f6:	0e24                	addi	s1,sp,792
     3f8:	0000                	unimp
     3fa:	0001                	nop
     3fc:	245d                	jal	6a2 <polydiv+0x23c>
     3fe:	000e                	c.slli	zero,0x3
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	2a00                	fld	fs0,16(a2)
        array_add(product2,line[i],size_a+size_b-1);
     402:	000e                	c.slli	zero,0x3
     404:	0300                	addi	s0,sp,384
     406:	7d00                	flw	fs0,56(a0)
     408:	9f7f                	0x9f7f
    for(i=0;i<size_b;++i){
     40a:	0e2a                	slli	t3,t3,0xa
     40c:	0000                	unimp
}
     40e:	0e2c                	addi	a1,sp,792
     410:	0000                	unimp
     412:	0001                	nop
     414:	2c5d                	jal	6ca <ext_euclid+0x14>
     416:	000e                	c.slli	zero,0x3
     418:	3e00                	fld	fs0,56(a2)
     41a:	000e                	c.slli	zero,0x3
     41c:	0100                	addi	s0,sp,128
     41e:	5e00                	lw	s0,56(a2)
     420:	0e3e                	slli	t3,t3,0xf
     422:	0000                	unimp
     424:	0e48                	addi	a0,sp,788
     426:	0000                	unimp
     428:	0001                	nop
     42a:	4859                	li	a6,22
     42c:	000e                	c.slli	zero,0x3
            for (k = size_a-1; k >= 0; k = k-1 ){
     42e:	4e00                	lw	s0,24(a2)
     430:	000e                	c.slli	zero,0x3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     432:	0300                	addi	s0,sp,384
     434:	7900                	flw	fs0,48(a0)
     436:	9f7f                	0x9f7f
     438:	0e4e                	slli	t3,t3,0x13
     43a:	0000                	unimp
     43c:	0e50                	addi	a2,sp,788
     43e:	0000                	unimp
     440:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     442:	0059                	c.nop	22
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     444:	0000                	unimp
     446:	0000                	unimp
     448:	0000                	unimp
     44a:	b800                	fsd	fs0,48(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	000c                	0xc
     44e:	e600                	fsw	fs0,8(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     450:	000c                	0xc
     452:	0100                	addi	s0,sp,128
     454:	5a00                	lw	s0,48(a2)
     456:	0ce6                	slli	s9,s9,0x19
        array_add(product2,line[i],size_a+size_b-1);
     458:	0000                	unimp
     45a:	0d2e                	slli	s10,s10,0xb
     45c:	0000                	unimp
     45e:	0001                	nop
    for(i=0;i<size_b;++i){
     460:	2e58                	fld	fa4,152(a2)
     462:	000d                	c.nop	3
     464:	6400                	flw	fs0,8(s0)
    int v[size_N];
     466:	000d                	c.nop	3
     468:	0400                	addi	s0,sp,512
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46a:	f300                	fsw	fs0,32(a4)
    int v[size_N];
     46c:	5a01                	li	s4,-32
     46e:	009f 0000 0000      	0x9f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	0000                	unimp
     476:	b800                	fsd	fs0,48(s0)
     478:	000c                	0xc
     47a:	e400                	fsw	fs0,8(s0)
     47c:	000c                	0xc
     47e:	0100                	addi	s0,sp,128
     480:	5b00                	lw	s0,48(a4)
     482:	0ce4                	addi	s1,sp,604
     484:	0000                	unimp
     486:	0d4a                	slli	s10,s10,0x12
     488:	0000                	unimp
     48a:	0001                	nop
    int v[size_N];
     48c:	000d4a63          	bltz	s10,4a0 <polydiv+0x3a>
     490:	5200                	lw	s0,32(a2)
    int q[size_N];
     492:	000d                	c.nop	3
     494:	0400                	addi	s0,sp,512
     496:	f300                	fsw	fs0,32(a4)
    int num_temp[size_N];
     498:	5b01                	li	s6,-32
     49a:	529f 000d 6400      	0x6400000d529f
    int denum_temp[size_D];
     4a0:	000d                	c.nop	3
     4a2:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     4a4:	6300                	flw	fs0,0(a4)
	...
    int denum_temp[size_D];
     4ae:	0cb8                	addi	a4,sp,600
     4b0:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4b2:	0cd2                	slli	s9,s9,0x14
    int v[size_N];
     4b4:	0000                	unimp
     4b6:	0001                	nop
    int denum_temp[size_D];
     4b8:	d25c                	sw	a5,36(a2)
    for (i = 0; i < size_N; ++i){
     4ba:	000c                	0xc
     4bc:	1400                	addi	s0,sp,544
     4be:	000d                	c.nop	3
     4c0:	0100                	addi	s0,sp,128
     4c2:	5900                	lw	s0,48(a0)
     4c4:	0d14                	addi	a3,sp,656
    for (i = 0; i < size_D; ++i) {
     4c6:	0000                	unimp
     4c8:	00000d17          	auipc	s10,0x0
    for (i = 0; i < size_N; ++i){
     4cc:	0001                	nop
     4ce:	000d175b          	0xd175b
    for (i = size_D-1; i >= 0; i = i-1){
     4d2:	6400                	flw	fs0,8(s0)
     4d4:	000d                	c.nop	3
     4d6:	0400                	addi	s0,sp,512
     4d8:	f300                	fsw	fs0,32(a4)
     4da:	5c01                	li	s8,-32
     4dc:	009f 0000 0000      	0x9f
        if ( (b_N*u)%mod == 1 )
     4e2:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4e4:	b800                	fsd	fs0,48(s0)
     4e6:	000c                	0xc
     4e8:	f500                	fsw	fs0,40(a0)
     4ea:	000c                	0xc
        num_temp[i] = num[i];
     4ec:	0100                	addi	s0,sp,128
     4ee:	5d00                	lw	s0,56(a0)
     4f0:	0cf5                	addi	s9,s9,29
     4f2:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     4f4:	0d10                	addi	a2,sp,656
        while (num_temp[i] < 0) {
     4f6:	0000                	unimp
     4f8:	0001                	nop
     4fa:	1064                	addi	s1,sp,44
        num_temp[i] = num_temp[i] % mod;
     4fc:	000d                	c.nop	3
     4fe:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_N; ++i){
     500:	000d                	c.nop	3
     502:	0400                	addi	s0,sp,512
        num_temp[i] = num_temp[i] % mod;
     504:	f300                	fsw	fs0,32(a4)
     506:	5d01                	li	s10,-32
    for (i = 0; i < size_N; ++i){
     508:	009f 0000 0000      	0x9f
        denum_temp[i] = denum[i];
     50e:	0000                	unimp
     510:	b800                	fsd	fs0,48(s0)
     512:	000c                	0xc
     514:	f500                	fsw	fs0,40(a0)
            denum_temp[i] = denum_temp[i] + mod;
     516:	000c                	0xc
        while (denum_temp[i] < 0) {
     518:	0100                	addi	s0,sp,128
     51a:	5e00                	lw	s0,56(a2)
     51c:	0cf5                	addi	s9,s9,29
        denum_temp[i] = denum_temp[i] % mod;
     51e:	0000                	unimp
     520:	0d4e                	slli	s10,s10,0x13
    for (i = 0; i < size_D; ++i) {
     522:	0000                	unimp
     524:	0001                	nop
        denum_temp[i] = denum_temp[i] % mod;
     526:	4e65                	li	t3,25
     528:	000d                	c.nop	3
    for (i = 0; i < size_D; ++i) {
     52a:	5200                	lw	s0,32(a2)
            denum_temp[i] = denum_temp[i] + mod;
     52c:	000d                	c.nop	3
     52e:	0400                	addi	s0,sp,512
        q[i] = 0;
     530:	f300                	fsw	fs0,32(a4)
     532:	5e01                	li	t3,-32
     534:	529f 000d 6400      	0x6400000d529f
     53a:	000d                	c.nop	3
     53c:	0100                	addi	s0,sp,128
        v[i] = 0;
     53e:	6500                	flw	fs0,8(a0)
	...
    for (i = size_D-1; i >= 0; i = i-1){
     548:	0d34                	addi	a3,sp,664
     54a:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     54c:	0d52                	slli	s10,s10,0x14
     54e:	0000                	unimp
     550:	0001                	nop
     552:	005a                	c.slli	zero,0x16
     554:	0000                	unimp
    for (u = 0; u < mod; ++u){
     556:	0000                	unimp
     558:	0000                	unimp
        if( num_temp[i] != 0 )
     55a:	1000                	addi	s0,sp,32
    for (i = size_N-1; i >= 0; i = i-1){
     55c:	000d                	c.nop	3
     55e:	1700                	addi	s0,sp,928
     560:	000d                	c.nop	3
     562:	0100                	addi	s0,sp,128
     564:	5a00                	lw	s0,48(a2)
     566:	00000d17          	auipc	s10,0x0
    while (d >= d2){
     56a:	0d4c                	addi	a1,sp,660
     56c:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     56e:	0001                	nop
        result[i] = q[i];
     570:	5264                	lw	s1,100(a2)
     572:	000d                	c.nop	3
     574:	6400                	flw	fs0,8(s0)
     576:	000d                	c.nop	3
    for(i = 0; i < size_N; ++i){
     578:	0100                	addi	s0,sp,128
     57a:	6400                	flw	fs0,8(s0)
	...
        result[i] = num_temp[i-size_N];
     584:	0d28                	addi	a0,sp,664
     586:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     588:	0d46                	slli	s10,s10,0x11
     58a:	0000                	unimp
}
     58c:	0001                	nop
     58e:	5259                	li	tp,-10
     590:	000d                	c.nop	3
     592:	5c00                	lw	s0,56(s0)
     594:	000d                	c.nop	3
     596:	0100                	addi	s0,sp,128
     598:	5900                	lw	s0,48(a0)
     59a:	0d5c                	addi	a5,sp,660
     59c:	0000                	unimp
     59e:	0d62                	slli	s10,s10,0x18
     5a0:	0000                	unimp
     5a2:	7f790003          	lb	zero,2039(s2) # 2df3 <_bss_end+0xd8b>
     5a6:	629f 000d 6400      	0x6400000d629f
     5ac:	000d                	c.nop	3
     5ae:	0100                	addi	s0,sp,128
     5b0:	5900                	lw	s0,48(a0)
	...
        v[(d-d2)] = u*r_d;
     5ba:	099a                	slli	s3,s3,0x6
     5bc:	0000                	unimp
     5be:	09f2                	slli	s3,s3,0x1c
     5c0:	0000                	unimp
     5c2:	0001                	nop
        for (i = 0; i < size_N; ++i){
     5c4:	f25a                	fsw	fs6,36(sp)
     5c6:	0009                	c.nop	2
     5c8:	ba00                	fsd	fs0,48(a2)
     5ca:	0100000b          	0x100000b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0bba                	slli	s7,s7,0xe
     5d2:	0000                	unimp
     5d4:	0bee                	slli	s7,s7,0x1b
     5d6:	0000                	unimp
     5d8:	7f860003          	lb	zero,2040(a2)
        for (i = 0; i < size_N; ++i){
     5dc:	ee9f 000b 1000      	0x1000000bee9f
     5e2:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     5e4:	0400                	addi	s0,sp,512
     5e6:	f300                	fsw	fs0,32(a4)
     5e8:	5a01                	li	s4,-32
     5ea:	109f 000c a400      	0xa400000c109f
        for (i = 0; i < size_N; ++i){
     5f0:	000c                	0xc
        array_add(q, v, size_N);
     5f2:	0100                	addi	s0,sp,128
     5f4:	6200                	flw	fs0,0(a2)
     5f6:	0ca4                	addi	s1,sp,600
     5f8:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     5fa:	0cb8                	addi	a4,sp,600
     5fc:	0000                	unimp
     5fe:	7f860003          	lb	zero,2040(a2)
        for (i = size_N-1; i >= 0; i = i-1){
     602:	009f 0000 0000      	0x9f
     608:	0000                	unimp
     60a:	9a00                	0x9a00
     60c:	0009                	c.nop	2
     60e:	e200                	fsw	fs0,0(a2)
     610:	0009                	c.nop	2
     612:	0100                	addi	s0,sp,128
            v[i] = v[i] % mod;
     614:	5b00                	lw	s0,48(a4)
        for (i = 0; i < size_N; ++i){
     616:	09e2                	slli	s3,s3,0x18
     618:	0000                	unimp
            v[i] = v[i] % mod;
     61a:	0bf6                	slli	s7,s7,0x1d
     61c:	0000                	unimp
     61e:	0001                	nop
     620:	f668                	fsw	fa0,108(a2)
        for (i = 0; i < size_N; ++i){
     622:	1000000b          	0x1000000b
                product[i] = product[i] + mod;
     626:	000c                	0xc
            while (product[i] < 0) {
     628:	0400                	addi	s0,sp,512
     62a:	f300                	fsw	fs0,32(a4)
     62c:	5b01                	li	s6,-32
            product[i] = product[i] % mod;
     62e:	109f 000c b800      	0xb800000c109f
        for (i = 0; i < size_N; ++i){
     634:	000c                	0xc
            product[i] = product[i] % mod;
     636:	0100                	addi	s0,sp,128
     638:	6800                	flw	fs0,16(s0)
	...
            num_temp[i] = num_temp[i] - product[i];
     642:	099a                	slli	s3,s3,0x6
     644:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     646:	09e6                	slli	s3,s3,0x19
     648:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     64a:	0001                	nop
     64c:	e65c                	fsw	fa5,12(a2)
     64e:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     650:	f200                	fsw	fs0,32(a2)
                num_temp[i] = num_temp[i] + mod;
     652:	0100000b          	0x100000b
            while (num_temp[i] < 0){
     656:	6700                	flw	fs0,8(a4)
     658:	0bf2                	slli	s7,s7,0x1c
     65a:	0000                	unimp
            num_temp[i] = num_temp[i] % mod;
     65c:	0c10                	addi	a2,sp,528
     65e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     660:	0004                	0x4
     662:	9f5c01f3          	0x9f5c01f3
            num_temp[i] = num_temp[i] % mod;
     666:	0c10                	addi	a2,sp,528
        for (i = 0; i < size_N; ++i){
     668:	0000                	unimp
            q[i] = q[i] % mod;
     66a:	0cb8                	addi	a4,sp,600
        for(i = 0; i < size_N; ++i){
     66c:	0000                	unimp
     66e:	0001                	nop
            q[i] = q[i] % mod;
     670:	00000067          	jr	zero # 0 <__DYNAMIC>
     674:	0000                	unimp
     676:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     678:	4000                	lw	s0,0(s0)
            if( num_temp[i] != 0 )
     67a:	4a00000b          	0x4a00000b
        for (i = size_N-1; i >= 0; i = i-1){
     67e:	0100000b          	0x100000b
            v[i] = 0;
     682:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     68c:	0b5a                	slli	s6,s6,0x16
     68e:	0000                	unimp
     690:	0b79                	addi	s6,s6,30
        result[i] = q[i];
     692:	0000                	unimp
     694:	0001                	nop
     696:	705a                	flw	ft0,180(sp)
     698:	000c                	0xc
     69a:	8400                	0x8400
     69c:	000c                	0xc
    for(i = 0; i < size_N; ++i){
     69e:	0100                	addi	s0,sp,128
        result[i] = q[i];
     6a0:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     6aa:	0b7a                	slli	s6,s6,0x1e
     6ac:	0000                	unimp
     6ae:	0b8d                	addi	s7,s7,3
    for(i = size_N; i < (2*size_N); ++i){
     6b0:	0000                	unimp
     6b2:	0001                	nop
     6b4:	845a                	mv	s0,s6
    int ri_2[size]; // MX-ring poly, a
     6b6:	000c                	0xc
     6b8:	9400                	0x9400
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	000c                	0xc
    int ri_2[size]; // MX-ring poly, a
     6bc:	0100                	addi	s0,sp,128
     6be:	5a00                	lw	s0,48(a2)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c8:	0b8e                	slli	s7,s7,0x3
     6ca:	0000                	unimp
     6cc:	0baa                	slli	s7,s7,0xa
     6ce:	0000                	unimp
     6d0:	0001                	nop
     6d2:	945a                	add	s0,s0,s6
     6d4:	000c                	0xc
     6d6:	a400                	fsd	fs0,8(s0)
     6d8:	000c                	0xc
     6da:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     6dc:	5a00                	lw	s0,48(a2)
	...
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e6:	0af4                	addi	a3,sp,348
    int ri[size];
     6e8:	0000                	unimp
     6ea:	0bce                	slli	s7,s7,0x13
     6ec:	0000                	unimp
    int ti_1[size]; // ti_1[0] = 1
     6ee:	0002                	c.slli64	zero
     6f0:	0072                	c.slli	zero,0x1c
     6f2:	0bce                	slli	s7,s7,0x13
    int ti[size];
     6f4:	0000                	unimp
     6f6:	0be6                	slli	s7,s7,0x19
     6f8:	0000                	unimp
    int qi_1[size];
     6fa:	0002                	c.slli64	zero
     6fc:	0084                	addi	s1,sp,64
     6fe:	0be6                	slli	s7,s7,0x19
    int temp[size];
     700:	0000                	unimp
     702:	0bee                	slli	s7,s7,0x1b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     704:	0000                	unimp
     706:	0010                	0x10
    int ri_2[size]; // MX-ring poly, a
     708:	0091                	addi	ra,ra,4
     70a:	0086                	slli	ra,ra,0x1
    int temp[size];
     70c:	2432                	fld	fs0,264(sp)
    for (i = 0; i < size; ++i) {
     70e:	f0090f23          	sb	zero,-226(s2)
        ti_2[i] = 0;
     712:	1c1a                	slli	s8,s8,0x26
     714:	000a                	c.slli	zero,0x2
     716:	1c02                	slli	s8,s8,0x20
     718:	0bee                	slli	s7,s7,0x1b
    for (i = 0; i < size; ++i) {
     71a:	0000                	unimp
     71c:	0c10                	addi	a2,sp,528
    ti_1[0] = 1;
     71e:	0000                	unimp
     720:	00910013          	addi	zero,sp,9
        for (i = N + 1; i < (2 * N + 2); ++i) {
     724:	235a01f3          	0x235a01f3
     728:	3201                	jal	28 <__DYNAMIC+0x28>
     72a:	2324                	fld	fs1,64(a4)
        for (i = 0; i < N + 1; ++i) {
     72c:	1af0090f          	0x1af0090f
        ri_2[i] = polyR[i];
     730:	0a1c                	addi	a5,sp,272
     732:	0200                	addi	s0,sp,256
     734:	101c                	addi	a5,sp,32
     736:	000c                	0xc
     738:	b800                	fsd	fs0,48(s0)
     73a:	000c                	0xc
    for (i = 0; i < size; ++i) {
     73c:	0200                	addi	s0,sp,256
        ri_2[i] = polyR[i];
     73e:	7200                	flw	fs0,32(a2)
	...
        ri_1[i] = polyf[i];
     748:	f800                	fsw	fs0,48(s0)
     74a:	000a                	c.slli	zero,0x2
     74c:	fa00                	fsw	fs0,48(a2)
     74e:	000a                	c.slli	zero,0x2
     750:	0200                	addi	s0,sp,256
        ti_2[i] = 0;
     752:	3100                	fld	fs0,32(a0)
     754:	fa9f 000a 0000      	0xafa9f
        ti_1[i] = 0;
     75a:	0100000b          	0x100000b
     75e:	5f00                	lw	s0,56(a4)
     760:	0b04                	addi	s1,sp,400
    for (i = 0; i < size; ++i) {
     762:	0000                	unimp
     764:	0b0a                	slli	s6,s6,0x2
                ri_2[i] = ri_2[i] + mod;
     766:	0000                	unimp
     768:	0001                	nop
            while (ri_2[i] < 0) {
     76a:	125f 000b 2000      	0x2000000b125f
            ri_2[i] = ri_2[i] % mod;
     770:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     774:	5f00                	lw	s0,56(a4)
            ri_2[i] = ri_2[i] % mod;
     776:	0b2a                	slli	s6,s6,0xa
        for (i = 0; i < N + 1; ++i) {
     778:	0000                	unimp
     77a:	00000b3f 405f0001 	0x405f000100000b3f
     782:	4a00000b          	0x4a00000b
        for (i = 0; i < N + 1; ++i) {
     786:	0500000b          	0x500000b
     78a:	8200                	0x8200
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     78c:	3100                	fld	fs0,32(a0)
     78e:	9f24                	0x9f24
     790:	0b4a                	slli	s6,s6,0x12
     792:	0000                	unimp
     794:	0b59                	addi	s6,s6,22
     796:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     798:	0001                	nop
     79a:	5a5f 000b 6a00      	0x6a00000b5a5f
     7a0:	0500000b          	0x500000b
     7a4:	8200                	0x8200
        for (i = 0; i < N + 1; ++i) {
     7a6:	3300                	fld	fs0,32(a4)
     7a8:	9f1e                	add	t5,t5,t2
     7aa:	0b6a                	slli	s6,s6,0x1a
     7ac:	0000                	unimp
     7ae:	0b7a                	slli	s6,s6,0x1e
        for (i = 0; i < N + 1; ++i) {
     7b0:	0000                	unimp
     7b2:	0001                	nop
     7b4:	7a59                	lui	s4,0xffff6
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7b6:	8200000b          	0x8200000b
     7ba:	0200000b          	0x200000b
     7be:	3000                	fld	fs0,32(s0)
     7c0:	829f 000b 8a00      	0x8a00000b829f
        for (i = 0; i < N + 1; ++i) {
     7c6:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7ca:	5e00                	lw	s0,56(a2)
     7cc:	0b8e                	slli	s7,s7,0x3
     7ce:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7d0:	0ba0                	addi	s0,sp,472
     7d2:	0000                	unimp
     7d4:	0005                	c.nop	1
     7d6:	0082                	c.slli64	ra
     7d8:	2432                	fld	fs0,264(sp)
     7da:	a09f 000b ba00      	0xba00000ba09f
        for (i = 0; i < N + 1; ++i) {
     7e0:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7e4:	6a00                	flw	fs0,16(a2)
     7e6:	0bba                	slli	s7,s7,0xe
     7e8:	0000                	unimp
     7ea:	0bc2                	slli	s7,s7,0x10
        for (i = 0; i < N + 1; ++i) {
     7ec:	0000                	unimp
     7ee:	0001                	nop
     7f0:	105f 000c 4c00      	0x4c00000c105f
        for (i = 0; i < N + 1; ++i) {
     7f6:	000c                	0xc
     7f8:	0100                	addi	s0,sp,128
     7fa:	5f00                	lw	s0,56(a4)
        controlR = 0;
     7fc:	0c4c                	addi	a1,sp,532
        for (i = 0; i < N + 1; ++i) {
     7fe:	0000                	unimp
     800:	0c4e                	slli	s8,s8,0x13
     802:	0000                	unimp
    while (controlR != 0) {
     804:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
            if (((ri_2[0] * j) % mod) == 1)
     808:	4e9f 000c 7000      	0x7000000c4e9f
        for (j = 0; j < mod; ++j) {
     80e:	000c                	0xc
     810:	0100                	addi	s0,sp,128
     812:	5f00                	lw	s0,56(a4)
     814:	0c70                	addi	a2,sp,540
        for (i = 0; i < N + 1; ++i) {
     816:	0000                	unimp
     818:	0c80                	addi	s0,sp,592
    }
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	8059                	srli	s0,s0,0x16
     820:	000c                	0xc
     822:	8200                	0x8200
     824:	000c                	0xc
     826:	0300                	addi	s0,sp,384
     828:	7900                	flw	fs0,48(a0)
     82a:	9f7f                	0x9f7f
     82c:	0c82                	c.slli64	s9
     82e:	0000                	unimp
     830:	0c84                	addi	s1,sp,592
     832:	0000                	unimp
     834:	0001                	nop
     836:	8459                	srai	s0,s0,0x16
     838:	000c                	0xc
     83a:	8800                	0x8800
     83c:	000c                	0xc
     83e:	0100                	addi	s0,sp,128
     840:	5e00                	lw	s0,56(a2)
     842:	0c88                	addi	a0,sp,592
                ri_1[i] = ri_1[i] + mod;
     844:	0000                	unimp
     846:	0c92                	slli	s9,s9,0x4
            while (ri_1[i] < 0) {
     848:	0000                	unimp
     84a:	7f7e0003          	lb	zero,2039(t3) # 1a7f7 <_stack_start+0xa7f7>
            ri_1[i] = ri_1[i] % mod;
     84e:	929f 000c 9400      	0x9400000c929f
        for (i = 0; i < N + 1; ++i) {
     854:	000c                	0xc
            ri_1[i] = ri_1[i] % mod;
     856:	0100                	addi	s0,sp,128
     858:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     85a:	0c94                	addi	a3,sp,592
            ri[i - (N + 1)] = res[i];
     85c:	0000                	unimp
     85e:	0ca4                	addi	s1,sp,600
     860:	0000                	unimp
     862:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	a46a                	fsd	fs10,8(sp)
     866:	000c                	0xc
            ri[i - (N + 1)] = res[i];
     868:	b400                	fsd	fs0,40(s0)
     86a:	000c                	0xc
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     86e:	5f00                	lw	s0,56(a4)
     870:	0cb4                	addi	a3,sp,600
     872:	0000                	unimp
     874:	0cb6                	slli	s9,s9,0xd
     876:	0000                	unimp
     878:	7f7f0003          	lb	zero,2039(t5)
     87c:	b69f 000c b800      	0xb800000cb69f
     882:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     884:	0100                	addi	s0,sp,128
     886:	5f00                	lw	s0,56(a4)
	...
            while (temp[i] < 0) {
     890:	0bbe                	slli	s7,s7,0xf
            temp[i] = temp[i] % mod;
     892:	0000                	unimp
     894:	0c10                	addi	a2,sp,528
        for (i = 0; i < N + 1; ++i) {
     896:	0000                	unimp
     898:	0006                	c.slli	zero,0x1
            temp[i] = temp[i] % mod;
     89a:	001b7003          	0x1b7003
        for (i = 0; i < N + 1; ++i) {
     89e:	9f00                	0x9f00
	...
            qi_1[i] = res1[i];
     8a8:	0af4                	addi	a3,sp,348
     8aa:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ac:	0bba                	slli	s7,s7,0xe
            qi_1[i] = res1[i];
     8ae:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b0:	0001                	nop
                qi_1[i] = qi_1[i] + mod;
     8b2:	ba62                	fsd	fs8,304(sp)
     8b4:	ee00000b          	0xee00000b
            while (qi_1[i] < 0) {
     8b8:	0300000b          	0x300000b
            qi_1[i] = qi_1[i] % mod;
     8bc:	8600                	0x8600
     8be:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     8c0:	0bee                	slli	s7,s7,0x1b
     8c2:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     8c4:	0c10                	addi	a2,sp,528
     8c6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8c8:	0004                	0x4
            temp[i] = res2[i];
     8ca:	9f5a01f3          	0x9f5a01f3
     8ce:	0c10                	addi	a2,sp,528
     8d0:	0000                	unimp
     8d2:	0ca4                	addi	s1,sp,600
     8d4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8d6:	0001                	nop
            temp[i] = res2[i];
     8d8:	a462                	fsd	fs8,8(sp)
        for (i = 0; i < N + 1; ++i) {
     8da:	000c                	0xc
                temp[i] = temp[i] + mod;
     8dc:	b800                	fsd	fs0,48(s0)
     8de:	000c                	0xc
     8e0:	0300                	addi	s0,sp,384
            while (temp[i] < 0) {
     8e2:	8600                	0x8600
     8e4:	9f7f                	0x9f7f
	...
        for (i = 0; i < N + 1; ++i) {
     8ee:	06b6                	slli	a3,a3,0xd
     8f0:	0000                	unimp
            temp[i] = temp[i] % mod;
     8f2:	072c                	addi	a1,sp,904
     8f4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8f6:	0001                	nop
            ti[i] = ti_2[i] - temp[i];
     8f8:	2c5a                	fld	fs8,400(sp)
     8fa:	30000007          	0x30000007
     8fe:	04000007          	0x4000007
     902:	f300                	fsw	fs0,32(a4)
     904:	5a01                	li	s4,-32
     906:	309f 0007 6600      	0x66000007309f
     90c:	01000007          	0x1000007
     910:	5a00                	lw	s0,48(a2)
     912:	0766                	slli	a4,a4,0x19
        for (i = 0; i < N + 1; ++i) {
     914:	0000                	unimp
     916:	099a                	slli	s3,s3,0x6
                ti[i] = ti[i] + mod;
     918:	0000                	unimp
     91a:	0004                	0x4
            while (ti[i] < 0) {
     91c:	9f5a01f3          	0x9f5a01f3
	...
        for (i = 0; i < N + 1; ++i) {
     928:	06b6                	slli	a3,a3,0xd
            ti[i] = ti[i] % mod;
     92a:	0000                	unimp
     92c:	072c                	addi	a1,sp,904
        for (i = 0; i < N + 1; ++i) {
     92e:	0000                	unimp
            ri_2[i] = ri_1[i];
     930:	0001                	nop
     932:	00072c5b          	0x72c5b
     936:	3000                	fld	fs0,32(s0)
     938:	04000007          	0x4000007
     93c:	f300                	fsw	fs0,32(a4)
            ri_1[i] = ri[i];
     93e:	5b01                	li	s6,-32
     940:	309f 0007 6600      	0x66000007309f
            ti_2[i] = ti_1[i];
     946:	01000007          	0x1000007
     94a:	5b00                	lw	s0,48(a4)
     94c:	0766                	slli	a4,a4,0x19
            ri_1[i] = ri[i];
     94e:	0000                	unimp
            ti_2[i] = ti_1[i];
     950:	099a                	slli	s3,s3,0x6
     952:	0000                	unimp
     954:	0004                	0x4
     956:	9f5b01f3          	0x9f5b01f3
	...
            ti_1[i] = ti[i];
     962:	06b6                	slli	a3,a3,0xd
     964:	0000                	unimp
              qi_1[i] = 0;
     966:	071a                	slli	a4,a4,0x6
     968:	0000                	unimp
     96a:	0001                	nop
     96c:	1a5c                	addi	a5,sp,308
        for (i = 0; i < N + 1; ++i) {
     96e:	26000007          	0x26000007
            if (((ri_2[0] * j) % mod) == 1)
     972:	0008                	0x8
     974:	0100                	addi	s0,sp,128
     976:	6200                	flw	fs0,0(a2)
     978:	0826                	slli	a6,a6,0x9
     97a:	0000                	unimp
     97c:	0828                	addi	a0,sp,24
     97e:	0000                	unimp
     980:	01830003          	lb	zero,24(t1)
        for (j = 0; j < mod; ++j) {
     984:	289f 0008 4400      	0x44000008289f
        for (i = 0; i < N + 1; ++i) {
     98a:	0008                	0x8
            ti_2[i] = (ti_2[i] * j) % mod;
     98c:	0400                	addi	s0,sp,512
     98e:	f300                	fsw	fs0,32(a4)
     990:	5c01                	li	s8,-32
     992:	449f 0008 9a00      	0x9a000008449f
        for (i = 0; i < N + 1; ++i) {
     998:	0009                	c.nop	2
int* generate_keys(int N, int p, int q){
     99a:	0100                	addi	s0,sp,128
     99c:	6200                	flw	fs0,0(a2)
	...
     9a6:	06b6                	slli	a3,a3,0xd
     9a8:	0000                	unimp
     9aa:	071a                	slli	a4,a4,0x6
     9ac:	0000                	unimp
     9ae:	0001                	nop
     9b0:	1a5d                	addi	s4,s4,-9
     9b2:	24000007          	0x24000007
     9b6:	0008                	0x8
     9b8:	0100                	addi	s0,sp,128
     9ba:	5900                	lw	s0,48(a0)
     9bc:	0824                	addi	s1,sp,24
     9be:	0000                	unimp
     9c0:	0844                	addi	s1,sp,20
     9c2:	0000                	unimp
     9c4:	0004                	0x4
     9c6:	9f5d01f3          	0x9f5d01f3
     9ca:	0844                	addi	s1,sp,20
     9cc:	0000                	unimp
     9ce:	099a                	slli	s3,s3,0x6
     9d0:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     9d2:	0001                	nop
     9d4:	0059                	c.nop	22
     9d6:	0000                	unimp
     9d8:	0000                	unimp
int* generate_keys(int N, int p, int q){
     9da:	0000                	unimp
     9dc:	1a00                	addi	s0,sp,304
     9de:	0008                	0x8
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e0:	4400                	lw	s0,8(s0)
     9e2:	0008                	0x8
     9e4:	0600                	addi	s0,sp,768
    resultkon[0] = 0xaaaaaaa0;
     9e6:	0300                	addi	s0,sp,384
     9e8:	19e0                	addi	s0,sp,252
     9ea:	0000                	unimp
     9ec:	009f 0000 0000      	0x9f
     9f2:	0000                	unimp
     9f4:	0e00                	addi	s0,sp,784
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9f6:	28000007          	0x28000007
     9fa:	0008                	0x8
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fc:	0100                	addi	s0,sp,128
     9fe:	6300                	flw	fs0,0(a4)
     a00:	0828                	addi	a0,sp,24
     a02:	0000                	unimp
     a04:	0844                	addi	s1,sp,20
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a06:	0000                	unimp
     a08:	0006                	c.slli	zero,0x1
     a0a:	315c01f3          	0x315c01f3
     a0e:	9f1c                	0x9f1c
     a10:	0844                	addi	s1,sp,20
     a12:	0000                	unimp
     a14:	099a                	slli	s3,s3,0x6
     a16:	0000                	unimp
     a18:	0001                	nop
     a1a:	00000063          	beqz	zero,a1a <generate_keys+0x80>
     a1e:	0000                	unimp
     a20:	0000                	unimp
     a22:	0e00                	addi	s0,sp,784
     a24:	1a000007          	0x1a000007
     a28:	02000007          	0x2000007
     a2c:	3000                	fld	fs0,32(s0)
     a2e:	1a9f 0007 2c00      	0x2c0000071a9f
     a34:	01000007          	0x1000007
     a38:	5e00                	lw	s0,56(a2)
     a3a:	0730                	addi	a2,sp,904
     a3c:	0000                	unimp
     a3e:	073e                	slli	a4,a4,0xf
     a40:	0000                	unimp
     a42:	0001                	nop
     a44:	3e5e                	fld	ft8,496(sp)
     a46:	62000007          	0x62000007
     a4a:	03000007          	0x3000007
     a4e:	7e00                	flw	fs0,56(a2)
     a50:	9f7f                	0x9f7f
     a52:	0762                	slli	a4,a4,0x18
     a54:	0000                	unimp
     a56:	0766                	slli	a4,a4,0x19
     a58:	0000                	unimp
     a5a:	0001                	nop
     a5c:	665e                	flw	fa2,212(sp)
     a5e:	76000007          	0x76000007
     a62:	01000007          	0x1000007
     a66:	5d00                	lw	s0,56(a0)
     a68:	0776                	slli	a4,a4,0x1d
     a6a:	0000                	unimp
     a6c:	0778                	addi	a4,sp,908
     a6e:	0000                	unimp
     a70:	7f7d0003          	lb	zero,2039(s10) # d5d <ntru_encyrpt+0xa5>
    int polyR[N+1];
     a74:	789f 0007 9000      	0x90000007789f
     a7a:	01000007          	0x1000007
     a7e:	5d00                	lw	s0,56(a0)
     a80:	0798                	addi	a4,sp,960
     a82:	0000                	unimp
     a84:	079c                	addi	a5,sp,960
    polyR[N] = 1;
     a86:	0000                	unimp
     a88:	0001                	nop
     a8a:	9c62                	add	s8,s8,s8
     a8c:	a6000007          	0xa6000007
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a90:	01000007          	0x1000007
     a94:	5f00                	lw	s0,56(a4)
     a96:	07a8                	addi	a0,sp,968
     a98:	0000                	unimp
     a9a:	07b0                	addi	a2,sp,968
     a9c:	0000                	unimp
     a9e:	0001                	nop
     aa0:	b25e                	fsd	fs7,288(sp)
     aa2:	ba000007          	0xba000007
     aa6:	01000007          	0x1000007
     aaa:	5d00                	lw	s0,56(a0)
     aac:	07c2                	slli	a5,a5,0x10
     aae:	0000                	unimp
     ab0:	07c4                	addi	s1,sp,964
     ab2:	0000                	unimp
     ab4:	0002                	c.slli64	zero
     ab6:	9f30                	0x9f30
     ab8:	07c4                	addi	s1,sp,964
     aba:	0000                	unimp
     abc:	07cc                	addi	a1,sp,964
     abe:	0000                	unimp
     ac0:	0001                	nop
     ac2:	cc5f 0007 d600      	0xd6000007cc5f
     ac8:	01000007          	0x1000007
     acc:	5d00                	lw	s0,56(a0)
     ace:	07de                	slli	a5,a5,0x17
     ad0:	0000                	unimp
     ad2:	07e0                	addi	s0,sp,972
     ad4:	0000                	unimp
     ad6:	0002                	c.slli64	zero
     ad8:	9f30                	0x9f30
     ada:	07e0                	addi	s0,sp,972
     adc:	0000                	unimp
     ade:	07e6                	slli	a5,a5,0x19
     ae0:	0000                	unimp
     ae2:	0001                	nop
     ae4:	e65f 0007 f400      	0xf4000007e65f
     aea:	01000007          	0x1000007
     aee:	5e00                	lw	s0,56(a2)
     af0:	07f6                	slli	a5,a5,0x1d
     af2:	0000                	unimp
    polyR[0] = -1;
     af4:	080a                	slli	a6,a6,0x2
     af6:	0000                	unimp
    for(i = 1; i < N; ++i){
     af8:	0001                	nop
     afa:	165d                	addi	a2,a2,-9
     afc:	0008                	0x8
     afe:	4400                	lw	s0,8(s0)
    for (i = N; i < 55; ++i ){
     b00:	0008                	0x8
     b02:	0100                	addi	s0,sp,128
     b04:	5e00                	lw	s0,56(a2)
     b06:	0844                	addi	s1,sp,20
    for(i = 0; i < N; ++i){
     b08:	0000                	unimp
        random_keys[i] = f[i];
     b0a:	0854                	addi	a3,sp,20
     b0c:	0000                	unimp
     b0e:	0001                	nop
     b10:	545d                	li	s0,-9
    for(i = 0; i < N; ++i){
     b12:	0008                	0x8
     b14:	5a00                	lw	s0,48(a2)
     b16:	0008                	0x8
     b18:	0300                	addi	s0,sp,384
    for(i = N; i < (2*N); ++i){
     b1a:	7d00                	flw	fs0,56(a0)
     b1c:	9f7f                	0x9f7f
     b1e:	085a                	slli	a6,a6,0x16
     b20:	0000                	unimp
        random_keys[i] = g[i-N];
     b22:	085c                	addi	a5,sp,20
     b24:	0000                	unimp
     b26:	0001                	nop
     b28:	5c5d                	li	s8,-9
    for(i = N; i < (2*N); ++i){
     b2a:	0008                	0x8
     b2c:	6600                	flw	fs0,8(a2)
    for(i = (2*N); i < (3*N); ++i){
     b2e:	0008                	0x8
     b30:	0100                	addi	s0,sp,128
     b32:	5f00                	lw	s0,56(a4)
    fp = ext_euclid(polyR, f, (N+1), p);
     b34:	0866                	slli	a6,a6,0x19
     b36:	0000                	unimp
     b38:	086c                	addi	a1,sp,28
     b3a:	0000                	unimp
     b3c:	7f7f0003          	lb	zero,2039(t5)
    for(i = (2*N); i < (3*N); ++i){
     b40:	6c9f 0008 6e00      	0x6e0000086c9f
        random_keys[i] = fp[i-(2*N)];
     b46:	0008                	0x8
     b48:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     b4a:	5f00                	lw	s0,56(a4)
     b4c:	086e                	slli	a6,a6,0x1b
    fq = ext_euclid(polyR, f, (N+1), q);
     b4e:	0000                	unimp
     b50:	0880                	addi	s0,sp,80
     b52:	0000                	unimp
     b54:	0001                	nop
     b56:	805e                	c.mv	zero,s7
     b58:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     b5a:	8400                	0x8400
     b5c:	0008                	0x8
     b5e:	0300                	addi	s0,sp,384
     b60:	7e00                	flw	fs0,56(a2)
        random_keys[i] = fq[i-(3*N)];
     b62:	9f7f                	0x9f7f
     b64:	0884                	addi	s1,sp,80
     b66:	0000                	unimp
     b68:	0888                	addi	a0,sp,80
    for(i = (3*N); i < (4*N); ++i){
     b6a:	0000                	unimp
     b6c:	0001                	nop
    fg = polymult2(fq, N, g, N, 0);
     b6e:	885e                	mv	a6,s7
     b70:	0008                	0x8
     b72:	9800                	0x9800
     b74:	0008                	0x8
     b76:	0100                	addi	s0,sp,128
     b78:	5d00                	lw	s0,56(a0)
    for(i = 0; i < (2*N-1); ++i){
     b7a:	0898                	addi	a4,sp,80
     b7c:	0000                	unimp
     b7e:	089e                	slli	a7,a7,0x7
     b80:	0000                	unimp
     b82:	7f7d0003          	lb	zero,2039(s10)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b86:	9e9f 0008 a000      	0xa00000089e9f
     b8c:	0008                	0x8
    for(i = (4*N); i < (5*N); ++i){
     b8e:	0100                	addi	s0,sp,128
     b90:	5d00                	lw	s0,56(a0)
     b92:	08a0                	addi	s0,sp,88
     b94:	0000                	unimp
     b96:	08ae                	slli	a7,a7,0xb
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b98:	0000                	unimp
     b9a:	0001                	nop
     b9c:	ae5f 0008 b000      	0xb0000008ae5f
    for(i = (4*N); i < (5*N); ++i){
     ba2:	0008                	0x8
     ba4:	0300                	addi	s0,sp,384
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	7f00                	flw	fs0,56(a4)
     ba8:	9f7f                	0x9f7f
        random_keys[i] = polyR[i-(5*N)];
     baa:	08b0                	addi	a2,sp,88
     bac:	0000                	unimp
     bae:	08b2                	slli	a7,a7,0xc
     bb0:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     bb2:	0001                	nop
     bb4:	b25f 0008 c200      	0xc2000008b25f
     bba:	0008                	0x8
     bbc:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa1;
     bbe:	5d00                	lw	s0,56(a0)
     bc0:	08c2                	slli	a7,a7,0x10
     bc2:	0000                	unimp
     bc4:	08c8                	addi	a0,sp,84
     bc6:	0000                	unimp
     bc8:	7f7d0003          	lb	zero,2039(s10)
}
     bcc:	c89f 0008 ca00      	0xca000008c89f
     bd2:	0008                	0x8
     bd4:	0100                	addi	s0,sp,128
     bd6:	5d00                	lw	s0,56(a0)
     bd8:	08ca                	slli	a7,a7,0x12
     bda:	0000                	unimp
     bdc:	08d8                	addi	a4,sp,84
     bde:	0000                	unimp
     be0:	0001                	nop
     be2:	d85f 0008 da00      	0xda000008d85f
     be8:	0008                	0x8
     bea:	0300                	addi	s0,sp,384
     bec:	7f00                	flw	fs0,56(a4)
     bee:	9f7f                	0x9f7f
     bf0:	08da                	slli	a7,a7,0x16
     bf2:	0000                	unimp
     bf4:	08dc                	addi	a5,sp,84
     bf6:	0000                	unimp
     bf8:	0001                	nop
     bfa:	dc5f 0008 f000      	0xf0000008dc5f
     c00:	0008                	0x8
     c02:	0100                	addi	s0,sp,128
     c04:	5e00                	lw	s0,56(a2)
     c06:	08f0                	addi	a2,sp,92
     c08:	0000                	unimp
     c0a:	08f6                	slli	a7,a7,0x1d
     c0c:	0000                	unimp
     c0e:	7f7e0003          	lb	zero,2039(t3)
        polyR[i] = 0;
     c12:	f69f 0008 1000      	0x10000008f69f
     c18:	0009                	c.nop	2
    for(i = 1; i < N; ++i){
     c1a:	0100                	addi	s0,sp,128
     c1c:	5e00                	lw	s0,56(a2)
        f[i] = 0;
     c1e:	0910                	addi	a2,sp,144
     c20:	0000                	unimp
     c22:	0914                	addi	a3,sp,144
     c24:	0000                	unimp
     c26:	7f7e0003          	lb	zero,2039(t3)
     c2a:	149f 0009 1800      	0x18000009149f
        g[i] = 0;
     c30:	0009                	c.nop	2
     c32:	0100                	addi	s0,sp,128
     c34:	5e00                	lw	s0,56(a2)
    for (i = N; i < 55; ++i ){
     c36:	0918                	addi	a4,sp,144
     c38:	0000                	unimp
        random_keys[i] = f[i];
     c3a:	0928                	addi	a0,sp,152
     c3c:	0000                	unimp
     c3e:	0001                	nop
     c40:	285d                	jal	cf6 <ntru_encyrpt+0x3e>
     c42:	0009                	c.nop	2
     c44:	2e00                	fld	fs0,24(a2)
     c46:	0009                	c.nop	2
     c48:	0300                	addi	s0,sp,384
    for(i = 0; i < N; ++i){
     c4a:	7d00                	flw	fs0,56(a0)
        random_keys[i] = f[i];
     c4c:	9f7f                	0x9f7f
    for(i = 0; i < N; ++i){
     c4e:	092e                	slli	s2,s2,0xb
        random_keys[i] = g[i-N];
     c50:	0000                	unimp
     c52:	093c                	addi	a5,sp,152
     c54:	0000                	unimp
     c56:	0001                	nop
     c58:	3c5d                	jal	70e <ext_euclid+0x58>
    for(i = N; i < (2*N); ++i){
     c5a:	0009                	c.nop	2
     c5c:	6e00                	flw	fs0,24(a2)
     c5e:	0009                	c.nop	2
        random_keys[i] = fp[i-(2*N)];
     c60:	0300                	addi	s0,sp,384
     c62:	7d00                	flw	fs0,56(a0)
     c64:	9f7f                	0x9f7f
     c66:	096e                	slli	s2,s2,0x1b
     c68:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c6a:	0972                	slli	s2,s2,0x1c
     c6c:	0000                	unimp
     c6e:	0001                	nop
        random_keys[i] = fq[i-(3*N)];
     c70:	865d                	srai	a2,a2,0x17
     c72:	0009                	c.nop	2
     c74:	8a00                	0x8a00
     c76:	0009                	c.nop	2
     c78:	0100                	addi	s0,sp,128
     c7a:	5e00                	lw	s0,56(a2)
     c7c:	098a                	slli	s3,s3,0x2
    for(i = (3*N); i < (4*N); ++i){
     c7e:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     c80:	0998                	addi	a4,sp,208
    for(i = (3*N); i < (4*N); ++i){
     c82:	0000                	unimp
        fg[i] = fg[i]*p;
     c84:	7f7e0003          	lb	zero,2039(t3)
    for(i = 0; i < (2*N-1); ++i){
     c88:	989f 0009 9a00      	0x9a000009989f
        fg[i] = fg[i]*p;
     c8e:	0009                	c.nop	2
     c90:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     c92:	5e00                	lw	s0,56(a2)
	...
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c9c:	080a                	slli	a6,a6,0x2
     c9e:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     ca0:	0844                	addi	s1,sp,20
     ca2:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     ca4:	0001                	nop
     ca6:	725f 0009 9a00      	0x9a000009725f
     cac:	0009                	c.nop	2
     cae:	0100                	addi	s0,sp,128
     cb0:	5f00                	lw	s0,56(a4)
	...
    resultkon[0] = 0xbbbbbbb0;
     cba:	070c                	addi	a1,sp,896
     cbc:	0000                	unimp
     cbe:	0836                	slli	a6,a6,0xd
     cc0:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cc2:	0002                	c.slli64	zero
     cc4:	008a                	slli	ra,ra,0x2
     cc6:	0844                	addi	s1,sp,20
     cc8:	0000                	unimp
     cca:	099a                	slli	s3,s3,0x6
     ccc:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cce:	0002                	c.slli64	zero
     cd0:	008a                	slli	ra,ra,0x2
	...
    resultkon[0] = 0xbbbbbbb0;
     cda:	070c                	addi	a1,sp,896
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cdc:	0000                	unimp
     cde:	0838                	addi	a4,sp,24
     ce0:	0000                	unimp
     ce2:	0002                	c.slli64	zero
     ce4:	0844008b          	0x844008b
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ce8:	0000                	unimp
     cea:	099a                	slli	s3,s3,0x6
     cec:	0000                	unimp
     cee:	0002                	c.slli64	zero
    resultkon[0] = 0xbbbbbbb0;
     cf0:	0000008b          	0x8b
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cf4:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     cf6:	0000                	unimp
     cf8:	0000                	unimp
     cfa:	070c                	addi	a1,sp,896
     cfc:	0000                	unimp
     cfe:	082e                	slli	a6,a6,0xb
     d00:	0000                	unimp
     d02:	0002                	c.slli64	zero
     d04:	0086                	slli	ra,ra,0x1
     d06:	082e                	slli	a6,a6,0xb
array_add(temp,message,48);
     d08:	0000                	unimp
     d0a:	0838                	addi	a4,sp,24
     d0c:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     d0e:	000d                	c.nop	3
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d10:	01f3008b          	0x1f3008b
array_add(temp,message,48);
     d14:	325c                	fld	fa5,160(a2)
     d16:	2324                	fld	fs1,64(a4)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d18:	1af0090f          	0x1af0090f
     d1c:	441c                	lw	a5,8(s0)
     d1e:	0008                	0x8
     d20:	9a00                	0x9a00
     d22:	0009                	c.nop	2
     d24:	0200                	addi	s0,sp,256
     d26:	8600                	0x8600
	...
    for(i = (2*N); i < (3*N); ++i){
     d30:	0c00                	addi	s0,sp,528
     d32:	2a000007          	0x2a000007
}
     d36:	0008                	0x8
    resultkon[0] = 0xbbbbbbb1;
     d38:	0200                	addi	s0,sp,256
     d3a:	8400                	0x8400
     d3c:	2a00                	fld	fs0,16(a2)
     d3e:	0008                	0x8
     d40:	2e00                	fld	fs0,24(a2)
     d42:	0008                	0x8
}
     d44:	0d00                	addi	s0,sp,656
     d46:	8600                	0x8600
     d48:	f300                	fsw	fs0,32(a4)
     d4a:	5c01                	li	s8,-32
     d4c:	2432                	fld	fs0,264(sp)
     d4e:	f0090f23          	sb	zero,-226(s2)
        CT[i-(2*N)] = CT[i];
     d52:	1c1a                	slli	s8,s8,0x26
     d54:	082e                	slli	a6,a6,0xb
     d56:	0000                	unimp
     d58:	0838                	addi	a4,sp,24
    for(i = (2*N); i < (3*N); ++i){
     d5a:	0000                	unimp
     d5c:	008b000f          	0x8b000f
        CT[i-(2*N)] = CT[i];
     d60:	325c01f3          	0x325c01f3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d64:	2324                	fld	fs1,64(a4)
     d66:	1af0090f          	0x1af0090f
     d6a:	2431                	jal	f76 <memcpy+0xb0>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	441c                	lw	a5,8(s0)
     d6e:	0008                	0x8
     d70:	9a00                	0x9a00
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d72:	0009                	c.nop	2
     d74:	0200                	addi	s0,sp,256
 resultkon[0] = 0xccccccc0;
     d76:	8400                	0x8400
	...
     d80:	0c00                	addi	s0,sp,528
     d82:	30000007          	0x30000007
     d86:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d88:	0200                	addi	s0,sp,256
     d8a:	8700                	0x8700
     d8c:	3000                	fld	fs0,32(s0)
     d8e:	0008                	0x8
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d90:	3800                	fld	fs0,48(s0)
 resultkon[0] = 0xccccccc0;
     d92:	0008                	0x8
     d94:	0f00                	addi	s0,sp,912
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d96:	8b00                	0x8b00
     d98:	f300                	fsw	fs0,32(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9a:	5c01                	li	s8,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9c:	2432                	fld	fs0,264(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	f0090f23          	sb	zero,-226(s2)
     da2:	331a                	fld	ft6,416(sp)
     da4:	1c1e                	slli	s8,s8,0x27
     da6:	0844                	addi	s1,sp,20
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     da8:	0000                	unimp
     daa:	099a                	slli	s3,s3,0x6
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dac:	0000                	unimp
     dae:	0002                	c.slli64	zero
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db0:	00000087          	0x87
     db4:	0000                	unimp
     db6:	0000                	unimp
     db8:	0000                	unimp
     dba:	070c                	addi	a1,sp,896
     dbc:	0000                	unimp
     dbe:	082c                	addi	a1,sp,24
     dc0:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc2:	0002                	c.slli64	zero
     dc4:	0085                	addi	ra,ra,1
     dc6:	082c                	addi	a1,sp,24
     dc8:	0000                	unimp
     dca:	0830                	addi	a2,sp,24
        if(a2[i] <= q/2)
     dcc:	0000                	unimp
     dce:	000d                	c.nop	3
     dd0:	01f30087          	0x1f30087
    for (i = 0; i < N; ++i){
     dd4:	325c                	fld	fa5,160(a2)
     dd6:	2324                	fld	fs1,64(a4)
    c = polymult2(secret_key_fp,N,a2,N,0);
     dd8:	1af0090f          	0x1af0090f
     ddc:	301c                	fld	fa5,32(s0)
     dde:	0008                	0x8
     de0:	3800                	fld	fs0,48(s0)
     de2:	0008                	0x8
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de4:	0f00                	addi	s0,sp,912
     de6:	8b00                	0x8b00
     de8:	f300                	fsw	fs0,32(a4)
     dea:	5c01                	li	s8,-32
     dec:	2432                	fld	fs0,264(sp)
     dee:	f0090f23          	sb	zero,-226(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     df2:	321a                	fld	ft4,416(sp)
     df4:	1c24                	addi	s1,sp,568
}
     df6:	0844                	addi	s1,sp,20
     df8:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
     dfa:	099a                	slli	s3,s3,0x6
     dfc:	0000                	unimp
     dfe:	0002                	c.slli64	zero
     e00:	0085                	addi	ra,ra,1
	...
}
     e0a:	070e                	slli	a4,a4,0x3
     e0c:	0000                	unimp
     e0e:	081e                	slli	a6,a6,0x7
     e10:	0000                	unimp
     e12:	0002                	c.slli64	zero
     e14:	0072                	c.slli	zero,0x1c
     e16:	081e                	slli	a6,a6,0x7
     e18:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     e1a:	0834                	addi	a3,sp,24
     e1c:	0000                	unimp
     e1e:	0002                	c.slli64	zero
     e20:	0089                	addi	ra,ra,2
    for(i = (2*N); i < ((2*N)+N); ++i){
     e22:	0834                	addi	a3,sp,24
     e24:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     e26:	0838                	addi	a4,sp,24
     e28:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	008b000f          	0x8b000f
        if(a2[i] <= q/2)
     e2e:	325c01f3          	0x325c01f3
            a2[i] = (-1)*(q-a2[i]);
     e32:	2324                	fld	fs1,64(a4)
     e34:	1af0090f          	0x1af0090f
    for (i = 0; i < N; ++i){
     e38:	1e35                	addi	t3,t3,-19
     e3a:	441c                	lw	a5,8(s0)
     e3c:	0008                	0x8
        c2[i-(2*N)] = c2[i];
     e3e:	9a00                	0x9a00
     e40:	0009                	c.nop	2
     e42:	0200                	addi	s0,sp,256
     e44:	7200                	flw	fs0,32(a2)
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4e:	9800                	0x9800
  jal x0, default_exc_handler
     e50:	c0000007          	0xc0000007
  mv  x1, x0
     e54:	01000007          	0x1000007
  mv  x2, x1
     e58:	5a00                	lw	s0,48(a2)
  mv  x3, x1
     e5a:	085c                	addi	a5,sp,20
  mv  x4, x1
     e5c:	0000                	unimp
  mv  x5, x1
     e5e:	08a0                	addi	s0,sp,88
  mv  x6, x1
     e60:	0000                	unimp
  mv  x7, x1
     e62:	0001                	nop
  mv  x8, x1
     e64:	005a                	c.slli	zero,0x16
  mv  x9, x1
     e66:	0000                	unimp
  mv x10, x1
     e68:	0000                	unimp
  mv x11, x1
     e6a:	0000                	unimp
  mv x12, x1
     e6c:	c200                	sw	s0,0(a2)
  mv x13, x1
     e6e:	dc000007          	0xdc000007
  mv x15, x1
     e72:	01000007          	0x1000007
  mv x17, x1
     e76:	5a00                	lw	s0,48(a2)
  mv x18, x1
     e78:	08a0                	addi	s0,sp,88
  mv x19, x1
     e7a:	0000                	unimp
  mv x20, x1
     e7c:	08ca                	slli	a7,a7,0x12
  mv x21, x1
     e7e:	0000                	unimp
  mv x22, x1
     e80:	0001                	nop
  mv x23, x1
     e82:	005a                	c.slli	zero,0x16
  mv x24, x1
     e84:	0000                	unimp
  mv x25, x1
     e86:	0000                	unimp
  mv x26, x1
     e88:	0000                	unimp
  mv x27, x1
     e8a:	de00                	sw	s0,56(a2)
  mv x28, x1
     e8c:	00000007          	0x7
  mv x30, x1
     e90:	0008                	0x8
  mv x31, x1
     e92:	0100                	addi	s0,sp,128
  la   x2, _stack_start
     e94:	5a00                	lw	s0,48(a2)
     e96:	08ca                	slli	a7,a7,0x12
     e98:	0000                	unimp
     e9a:	0930                	addi	a2,sp,152
  la x26, _bss_start
     e9c:	0000                	unimp
     e9e:	0001                	nop
     ea0:	005a                	c.slli	zero,0x16
     ea2:	0000                	unimp
  la x27, _bss_end
     ea4:	0000                	unimp
     ea6:	0000                	unimp
     ea8:	0e00                	addi	s0,sp,784
     eaa:	2c000007          	0x2c000007
  bge x26, x27, zero_loop_end
     eae:	02000007          	0x2000007
  sw x0, 0(x26)
     eb2:	3100                	fld	fs0,32(a0)
  addi x26, x26, 4
     eb4:	309f 0007 6600      	0x66000007309f
  addi x10, x0, 0
     eba:	02000007          	0x2000007
  addi x11, x0, 0
     ebe:	3100                	fld	fs0,32(a0)
     ec0:	009f 0008 1600      	0x16000008009f
     ec6:	0008                	0x8
     ec8:	0100                	addi	s0,sp,128
     eca:	5e00                	lw	s0,56(a2)
     ecc:	0930                	addi	a2,sp,152
     ece:	0000                	unimp
     ed0:	095a                	slli	s2,s2,0x16
     ed2:	0000                	unimp
     ed4:	0001                	nop
     ed6:	6e5e                	flw	ft8,212(sp)
     ed8:	0009                	c.nop	2
     eda:	8600                	0x8600
     edc:	0009                	c.nop	2
     ede:	0100                	addi	s0,sp,128
     ee0:	5e00                	lw	s0,56(a2)
	...
     eea:	070c                	addi	a1,sp,896
     eec:	0000                	unimp
     eee:	0828                	addi	a0,sp,24
     ef0:	0000                	unimp
     ef2:	0001                	nop
     ef4:	00082863          	0x82863
     ef8:	4400                	lw	s0,8(s0)
     efa:	0008                	0x8
     efc:	0600                	addi	s0,sp,768
     efe:	f300                	fsw	fs0,32(a4)
     f00:	5c01                	li	s8,-32
     f02:	1c31                	addi	s8,s8,-20
     f04:	449f 0008 9a00      	0x9a000008449f
     f0a:	0009                	c.nop	2
     f0c:	0100                	addi	s0,sp,128
     f0e:	6300                	flw	fs0,0(a4)
	...
     f18:	070c                	addi	a1,sp,896
     f1a:	0000                	unimp
     f1c:	0828                	addi	a0,sp,24
     f1e:	0000                	unimp
     f20:	0001                	nop
     f22:	00082863          	0x82863
     f26:	4400                	lw	s0,8(s0)
     f28:	0008                	0x8
     f2a:	0600                	addi	s0,sp,768
     f2c:	f300                	fsw	fs0,32(a4)
     f2e:	5c01                	li	s8,-32
     f30:	1c31                	addi	s8,s8,-20
     f32:	449f 0008 9a00      	0x9a000008449f
     f38:	0009                	c.nop	2
     f3a:	0100                	addi	s0,sp,128
     f3c:	6300                	flw	fs0,0(a4)
	...
     f46:	070c                	addi	a1,sp,896
     f48:	0000                	unimp
     f4a:	0828                	addi	a0,sp,24
     f4c:	0000                	unimp
     f4e:	0001                	nop
     f50:	00082863          	0x82863
     f54:	4400                	lw	s0,8(s0)
     f56:	0008                	0x8
     f58:	0600                	addi	s0,sp,768
     f5a:	f300                	fsw	fs0,32(a4)
     f5c:	5c01                	li	s8,-32
     f5e:	1c31                	addi	s8,s8,-20
     f60:	449f 0008 9a00      	0x9a000008449f
     f66:	0009                	c.nop	2
     f68:	0100                	addi	s0,sp,128
     f6a:	6300                	flw	fs0,0(a4)
	...
     f74:	070c                	addi	a1,sp,896
     f76:	0000                	unimp
     f78:	0828                	addi	a0,sp,24
     f7a:	0000                	unimp
     f7c:	0001                	nop
     f7e:	00082863          	0x82863
     f82:	4400                	lw	s0,8(s0)
     f84:	0008                	0x8
     f86:	0600                	addi	s0,sp,768
     f88:	f300                	fsw	fs0,32(a4)
     f8a:	5c01                	li	s8,-32
     f8c:	1c31                	addi	s8,s8,-20
     f8e:	449f 0008 9a00      	0x9a000008449f
     f94:	0009                	c.nop	2
     f96:	0100                	addi	s0,sp,128
     f98:	6300                	flw	fs0,0(a4)
	...
     fa2:	070c                	addi	a1,sp,896
     fa4:	0000                	unimp
     fa6:	0828                	addi	a0,sp,24
     fa8:	0000                	unimp
     faa:	0001                	nop
     fac:	00082863          	0x82863
     fb0:	4400                	lw	s0,8(s0)
     fb2:	0008                	0x8
     fb4:	0600                	addi	s0,sp,768
     fb6:	f300                	fsw	fs0,32(a4)
     fb8:	5c01                	li	s8,-32
     fba:	1c31                	addi	s8,s8,-20
     fbc:	449f 0008 9a00      	0x9a000008449f
     fc2:	0009                	c.nop	2
     fc4:	0100                	addi	s0,sp,128
     fc6:	6300                	flw	fs0,0(a4)
	...
     fd0:	070c                	addi	a1,sp,896
     fd2:	0000                	unimp
     fd4:	0828                	addi	a0,sp,24
     fd6:	0000                	unimp
     fd8:	0001                	nop
     fda:	00082863          	0x82863
     fde:	4400                	lw	s0,8(s0)
     fe0:	0008                	0x8
     fe2:	0600                	addi	s0,sp,768
     fe4:	f300                	fsw	fs0,32(a4)
     fe6:	5c01                	li	s8,-32
     fe8:	1c31                	addi	s8,s8,-20
     fea:	449f 0008 9a00      	0x9a000008449f
     ff0:	0009                	c.nop	2
     ff2:	0100                	addi	s0,sp,128
     ff4:	6300                	flw	fs0,0(a4)
	...
     ffe:	070c                	addi	a1,sp,896
    1000:	0000                	unimp
    1002:	0828                	addi	a0,sp,24
    1004:	0000                	unimp
    1006:	0001                	nop
    1008:	00082863          	0x82863
    100c:	4400                	lw	s0,8(s0)
    100e:	0008                	0x8
    1010:	0600                	addi	s0,sp,768
    1012:	f300                	fsw	fs0,32(a4)
    1014:	5c01                	li	s8,-32
    1016:	1c31                	addi	s8,s8,-20
    1018:	449f 0008 9a00      	0x9a000008449f
    101e:	0009                	c.nop	2
    1020:	0100                	addi	s0,sp,128
    1022:	6300                	flw	fs0,0(a4)
	...
    102c:	0466                	slli	s0,s0,0x19
    102e:	0000                	unimp
    1030:	056a                	slli	a0,a0,0x1a
    1032:	0000                	unimp
    1034:	0001                	nop
    1036:	6a5a                	flw	fs4,148(sp)
    1038:	0005                	c.nop	1
    103a:	b600                	fsd	fs0,40(a2)
    103c:	0006                	c.slli	zero,0x1
    103e:	0400                	addi	s0,sp,512
    1040:	f300                	fsw	fs0,32(a4)
    1042:	5a01                	li	s4,-32
    1044:	009f 0000 0000      	0x9f
    104a:	0000                	unimp
int main(){
    104c:	6600                	flw	fs0,8(a2)
    104e:	0004                	0x4
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1050:	6a00                	flw	fs0,16(a2)
    1052:	0005                	c.nop	1
    1054:	0100                	addi	s0,sp,128
    1056:	5b00                	lw	s0,48(a4)
    1058:	056a                	slli	a0,a0,0x1a
    105a:	0000                	unimp
    105c:	0588                	addi	a0,sp,704
int main(){
    105e:	0000                	unimp
    1060:	0001                	nop
    1062:	8859                	andi	s0,s0,22
    1064:	0005                	c.nop	1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1066:	a800                	fsd	fs0,16(s0)
    keys = generate_keys(N, p, q);
    1068:	0005                	c.nop	1
    106a:	0300                	addi	s0,sp,384
    106c:	8a00                	0x8a00
    106e:	9f01                	0x9f01
    1070:	05a8                	addi	a0,sp,712
    1072:	0000                	unimp
    1074:	05b6                	slli	a1,a1,0xd
    for(i = 0; i < N; ++i){
    1076:	0000                	unimp
    1078:	0004                	0x4
        secret_key_f[i] = keys[i];
    107a:	9f5b01f3          	0x9f5b01f3
    107e:	05b6                	slli	a1,a1,0xd
    1080:	0000                	unimp
    1082:	06a4                	addi	s1,sp,840
    1084:	0000                	unimp
    for(i = 0; i < N; ++i){
    1086:	0001                	nop
    1088:	a459                	j	130e <_bss_start+0x36>
    108a:	0006                	c.slli	zero,0x1
    for(i = N; i < (2*N); ++i){
    108c:	b600                	fsd	fs0,40(a2)
    108e:	0006                	c.slli	zero,0x1
    1090:	0300                	addi	s0,sp,384
    1092:	8a00                	0x8a00
    1094:	9f01                	0x9f01
	...
        secret_key_fp[i-(2*N)] = keys[i];
    109e:	0466                	slli	s0,s0,0x19
    10a0:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
    10a2:	04e4                	addi	s1,sp,588
    10a4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
    10a6:	0001                	nop
    10a8:	e45c                	fsw	fa5,12(s0)
    10aa:	0004                	0x4
    10ac:	ec00                	fsw	fs0,24(s0)
    10ae:	0004                	0x4
    10b0:	0400                	addi	s0,sp,512
        public_key[i-(4*N)] = keys[i];
    10b2:	f300                	fsw	fs0,32(a4)
    10b4:	5c01                	li	s8,-32
    10b6:	ec9f 0004 4c00      	0x4c000004ec9f
    for(i = (4*N); i < (5*N); ++i){
    10bc:	0005                	c.nop	1
    10be:	0100                	addi	s0,sp,128
    10c0:	5c00                	lw	s0,56(s0)
    10c2:	054c                	addi	a1,sp,644
    10c4:	0000                	unimp
    10c6:	06b6                	slli	a3,a3,0xd
        ring_poly[i-(5*N)] = keys[i];
    10c8:	0000                	unimp
    10ca:	0004                	0x4
    10cc:	9f5c01f3          	0x9f5c01f3
	...
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10d8:	0466                	slli	s0,s0,0x19
    10da:	0000                	unimp
    10dc:	04c0                	addi	s0,sp,580
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	c05d                	beqz	s0,1188 <__DTOR_END__+0x34>
    10e4:	0004                	0x4
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10e6:	9a00                	0x9a00
    10e8:	0005                	c.nop	1
    10ea:	0100                	addi	s0,sp,128
    10ec:	6300                	flw	fs0,0(a4)
    10ee:	059a                	slli	a1,a1,0x6
    10f0:	0000                	unimp
    10f2:	05b6                	slli	a1,a1,0xd
    10f4:	0000                	unimp
    10f6:	0004                	0x4
    10f8:	9f5d01f3          	0x9f5d01f3
            resultkon[0] = 0xDEDEDEDE;
    10fc:	05b6                	slli	a1,a1,0xd
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10fe:	0000                	unimp
    1100:	06b6                	slli	a3,a3,0xd
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	00000063          	beqz	zero,1106 <main+0xba>
            resultkon[0] = 0xDEDEDEDE;
    110a:	0000                	unimp
    for(i = 0; i < 32; ++i){
    110c:	0000                	unimp
    110e:	6600                	flw	fs0,8(a2)
        if(!(message[i] == Dec_Message[i])){
    1110:	0004                	0x4
    1112:	be00                	fsd	fs0,56(a2)
    1114:	0004                	0x4
    1116:	0100                	addi	s0,sp,128
    1118:	5e00                	lw	s0,56(a2)
    111a:	04be                	slli	s1,s1,0xf
    111c:	0000                	unimp
    111e:	0598                	addi	a4,sp,704
            resultkon[0] = 0xBABABABA;
    1120:	0000                	unimp
    1122:	0001                	nop
    1124:	9862                	add	a6,a6,s8
    1126:	0005                	c.nop	1
    1128:	b600                	fsd	fs0,40(a2)
}
    112a:	0005                	c.nop	1
    112c:	0400                	addi	s0,sp,512
    112e:	f300                	fsw	fs0,32(a4)
    1130:	5e01                	li	t3,-32
    1132:	b69f 0005 b600      	0xb6000005b69f
    1138:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xDEDEDEDE;
    113a:	0100                	addi	s0,sp,128
    for(i = 0; i < 32; ++i){
    113c:	6200                	flw	fs0,0(a2)
	...
    1146:	04e4                	addi	s1,sp,588
    1148:	0000                	unimp
    114a:	04ec                	addi	a1,sp,588
    114c:	0000                	unimp
    114e:	0001                	nop
    1150:	4c68                	lw	a0,92(s0)
    1152:	0005                	c.nop	1
    1154:	a400                	fsd	fs0,8(s0)
    1156:	0005                	c.nop	1
    1158:	0100                	addi	s0,sp,128
    115a:	6800                	flw	fs0,16(s0)
    115c:	05b6                	slli	a1,a1,0xd
    115e:	0000                	unimp
    1160:	06b6                	slli	a3,a3,0xd
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0068                	addi	a0,sp,12
    1168:	0000                	unimp
    116a:	0000                	unimp
    116c:	0000                	unimp
    116e:	6a00                	flw	fs0,16(a2)
    1170:	0005                	c.nop	1
    1172:	7000                	flw	fs0,32(s0)
    1174:	0005                	c.nop	1
    1176:	0100                	addi	s0,sp,128
    1178:	5f00                	lw	s0,56(a4)
    117a:	05b6                	slli	a1,a1,0xd
    117c:	0000                	unimp
    117e:	05be                	slli	a1,a1,0xf
    1180:	0000                	unimp
    1182:	0001                	nop
    1184:	005f 0000 0000      	0x5f
    118a:	0000                	unimp
    118c:	ba00                	fsd	fs0,48(a2)
    118e:	0004                	0x4
    1190:	c000                	sw	s0,0(s0)
    1192:	0004                	0x4
    1194:	0200                	addi	s0,sp,256
    1196:	3000                	fld	fs0,32(s0)
    1198:	c09f 0004 ce00      	0xce000004c09f
    119e:	0004                	0x4
    11a0:	0100                	addi	s0,sp,128
    11a2:	5d00                	lw	s0,56(a0)
    11a4:	04ce                	slli	s1,s1,0x13
    11a6:	0000                	unimp
    11a8:	04d2                	slli	s1,s1,0x14
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	d25f 0004 ec00      	0xec000004d25f
    11b4:	0004                	0x4
    11b6:	0100                	addi	s0,sp,128
    11b8:	6400                	flw	fs0,8(s0)
    11ba:	04ec                	addi	a1,sp,588
    11bc:	0000                	unimp
    11be:	0502                	c.slli64	a0
    11c0:	0000                	unimp
    11c2:	0001                	nop
    11c4:	025d                	addi	tp,tp,23
    11c6:	0005                	c.nop	1
    11c8:	0800                	addi	s0,sp,16
    11ca:	0005                	c.nop	1
    11cc:	0300                	addi	s0,sp,384
    11ce:	7d00                	flw	fs0,56(a0)
    11d0:	9f7f                	0x9f7f
    11d2:	0508                	addi	a0,sp,640
    11d4:	0000                	unimp
    11d6:	0524                	addi	s1,sp,648
    11d8:	0000                	unimp
    11da:	0001                	nop
    11dc:	245d                	jal	1482 <_bss_start+0x1aa>
    11de:	0005                	c.nop	1
    11e0:	2a00                	fld	fs0,16(a2)
    11e2:	0005                	c.nop	1
    11e4:	0300                	addi	s0,sp,384
    11e6:	7d00                	flw	fs0,56(a0)
    11e8:	9f7f                	0x9f7f
    11ea:	052a                	slli	a0,a0,0xa
    11ec:	0000                	unimp
    11ee:	0530                	addi	a2,sp,648
    11f0:	0000                	unimp
    11f2:	0001                	nop
    11f4:	305d                	jal	a9a <generate_keys+0x100>
    11f6:	0005                	c.nop	1
    11f8:	4600                	lw	s0,8(a2)
    11fa:	0005                	c.nop	1
    11fc:	0100                	addi	s0,sp,128
    11fe:	5f00                	lw	s0,56(a4)
    1200:	0546                	slli	a0,a0,0x11
    1202:	0000                	unimp
    1204:	055a                	slli	a0,a0,0x16
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	5a64                	lw	s1,116(a2)
    120c:	0005                	c.nop	1
    120e:	6a00                	flw	fs0,16(a2)
    1210:	0005                	c.nop	1
    1212:	0100                	addi	s0,sp,128
    1214:	5f00                	lw	s0,56(a4)
    1216:	0578                	addi	a4,sp,652
    1218:	0000                	unimp
    121a:	0588                	addi	a0,sp,704
    121c:	0000                	unimp
    121e:	0001                	nop
    1220:	885f 0005 9600      	0x96000005885f
    1226:	0005                	c.nop	1
    1228:	0100                	addi	s0,sp,128
    122a:	5900                	lw	s0,48(a0)
    122c:	05c4                	addi	s1,sp,708
    122e:	0000                	unimp
    1230:	05c8                	addi	a0,sp,708
    1232:	0000                	unimp
    1234:	0002                	c.slli64	zero
    1236:	9f30                	0x9f30
    1238:	05c8                	addi	a0,sp,708
    123a:	0000                	unimp
    123c:	05ce                	slli	a1,a1,0x13
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	da5e                	sw	s7,52(sp)
    1244:	0005                	c.nop	1
    1246:	de00                	sw	s0,56(a2)
    1248:	0005                	c.nop	1
    124a:	0200                	addi	s0,sp,256
    124c:	3000                	fld	fs0,32(s0)
    124e:	de9f 0005 e600      	0xe6000005de9f
    1254:	0005                	c.nop	1
    1256:	0100                	addi	s0,sp,128
    1258:	5d00                	lw	s0,56(a0)
    125a:	05e6                	slli	a1,a1,0x19
    125c:	0000                	unimp
    125e:	05ee                	slli	a1,a1,0x1b
    1260:	0000                	unimp
    1262:	0001                	nop
    1264:	ee5f 0005 f900      	0xf9000005ee5f
    126a:	0005                	c.nop	1
    126c:	0100                	addi	s0,sp,128
    126e:	5d00                	lw	s0,56(a0)
    1270:	05fa                	slli	a1,a1,0x1e
    1272:	0000                	unimp
    1274:	05fe                	slli	a1,a1,0x1f
    1276:	0000                	unimp
    1278:	0002                	c.slli64	zero
    127a:	9f30                	0x9f30
    127c:	05fe                	slli	a1,a1,0x1f
    127e:	0000                	unimp
    1280:	0604                	addi	s1,sp,768
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	045e                	slli	s0,s0,0x17
    1288:	0006                	c.slli	zero,0x1
    128a:	1400                	addi	s0,sp,544
    128c:	0006                	c.slli	zero,0x1
    128e:	0100                	addi	s0,sp,128
    1290:	5f00                	lw	s0,56(a4)
    1292:	0614                	addi	a3,sp,768
    1294:	0000                	unimp
    1296:	0618                	addi	a4,sp,768
    1298:	0000                	unimp
    129a:	0001                	nop
    129c:	185e                	slli	a6,a6,0x37
    129e:	0006                	c.slli	zero,0x1
    12a0:	2200                	fld	fs0,0(a2)
    12a2:	0006                	c.slli	zero,0x1
    12a4:	0300                	addi	s0,sp,384
    12a6:	7e00                	flw	fs0,56(a2)
    12a8:	9f7f                	0x9f7f
    12aa:	0622                	slli	a2,a2,0x8
    12ac:	0000                	unimp
    12ae:	0624                	addi	s1,sp,776
    12b0:	0000                	unimp
    12b2:	0001                	nop
    12b4:	245e                	fld	fs0,464(sp)
    12b6:	0006                	c.slli	zero,0x1
    12b8:	3400                	fld	fs0,40(s0)
    12ba:	0006                	c.slli	zero,0x1
    12bc:	0100                	addi	s0,sp,128
    12be:	5d00                	lw	s0,56(a0)
    12c0:	0634                	addi	a3,sp,776
    12c2:	0000                	unimp
    12c4:	063a                	slli	a2,a2,0xe
    12c6:	0000                	unimp
    12c8:	7f7d0003          	lb	zero,2039(s10)
    12cc:	3a9f 0006 3c00      	0x3c0000063a9f
    12d2:	0006                	c.slli	zero,0x1
    12d4:	0100                	addi	s0,sp,128
    12d6:	5d00                	lw	s0,56(a0)
    12d8:	063c                	addi	a5,sp,776
    12da:	0000                	unimp
    12dc:	0648                	addi	a0,sp,772
    12de:	0000                	unimp
    12e0:	0001                	nop
    12e2:	485f 0006 5000      	0x50000006485f
    12e8:	0006                	c.slli	zero,0x1
    12ea:	0300                	addi	s0,sp,384
    12ec:	7f00                	flw	fs0,56(a4)
    12ee:	9f7f                	0x9f7f
    12f0:	0650                	addi	a2,sp,772
    12f2:	0000                	unimp
    12f4:	0652                	slli	a2,a2,0x14
    12f6:	0000                	unimp
    12f8:	0001                	nop
    12fa:	525f 0006 6200      	0x62000006525f
    1300:	0006                	c.slli	zero,0x1
    1302:	0100                	addi	s0,sp,128
    1304:	5d00                	lw	s0,56(a0)
    1306:	0662                	slli	a2,a2,0x18
    1308:	0000                	unimp
    130a:	0668                	addi	a0,sp,780
    130c:	0000                	unimp
    130e:	7f7d0003          	lb	zero,2039(s10)
    1312:	689f 0006 6a00      	0x6a000006689f
    1318:	0006                	c.slli	zero,0x1
    131a:	0100                	addi	s0,sp,128
    131c:	5d00                	lw	s0,56(a0)
    131e:	066a                	slli	a2,a2,0x1a
    1320:	0000                	unimp
    1322:	066e                	slli	a2,a2,0x1b
    1324:	0000                	unimp
    1326:	0001                	nop
    1328:	6e5e                	flw	ft8,212(sp)
    132a:	0006                	c.slli	zero,0x1
    132c:	7800                	flw	fs0,48(s0)
    132e:	0006                	c.slli	zero,0x1
    1330:	0300                	addi	s0,sp,384
    1332:	7e00                	flw	fs0,56(a2)
    1334:	9f7f                	0x9f7f
    1336:	0678                	addi	a4,sp,780
    1338:	0000                	unimp
    133a:	067a                	slli	a2,a2,0x1e
    133c:	0000                	unimp
    133e:	0001                	nop
    1340:	7a5e                	flw	fs4,244(sp)
    1342:	0006                	c.slli	zero,0x1
    1344:	8000                	0x8000
    1346:	0006                	c.slli	zero,0x1
    1348:	0100                	addi	s0,sp,128
    134a:	5f00                	lw	s0,56(a4)
    134c:	0680                	addi	s0,sp,832
    134e:	0000                	unimp
    1350:	0692                	slli	a3,a3,0x4
    1352:	0000                	unimp
    1354:	0001                	nop
    1356:	925d                	srli	a2,a2,0x37
    1358:	0006                	c.slli	zero,0x1
    135a:	a000                	fsd	fs0,0(s0)
    135c:	0006                	c.slli	zero,0x1
    135e:	0100                	addi	s0,sp,128
    1360:	5f00                	lw	s0,56(a4)
    1362:	06a0                	addi	s0,sp,840
    1364:	0000                	unimp
    1366:	06a2                	slli	a3,a3,0x8
    1368:	0000                	unimp
    136a:	7f7f0003          	lb	zero,2039(t5)
    136e:	a29f 0006 a400      	0xa4000006a29f
    1374:	0006                	c.slli	zero,0x1
    1376:	0100                	addi	s0,sp,128
    1378:	5f00                	lw	s0,56(a4)
    137a:	06a4                	addi	s1,sp,840
    137c:	0000                	unimp
    137e:	06b6                	slli	a3,a3,0xd
    1380:	0000                	unimp
    1382:	0001                	nop
    1384:	0059                	c.nop	22
    1386:	0000                	unimp
    1388:	0000                	unimp
    138a:	0000                	unimp
    138c:	6a00                	flw	fs0,16(a2)
    138e:	0005                	c.nop	1
    1390:	7800                	flw	fs0,48(s0)
    1392:	0005                	c.nop	1
    1394:	0100                	addi	s0,sp,128
    1396:	5e00                	lw	s0,56(a2)
    1398:	05b6                	slli	a1,a1,0xd
    139a:	0000                	unimp
    139c:	05ba                	slli	a1,a1,0xe
    139e:	0000                	unimp
    13a0:	0001                	nop
    13a2:	005e                	c.slli	zero,0x17
    13a4:	0000                	unimp
    13a6:	0000                	unimp
    13a8:	0000                	unimp
    13aa:	8c00                	0x8c00
    13ac:	0005                	c.nop	1
    13ae:	b600                	fsd	fs0,40(a2)
    13b0:	0005                	c.nop	1
    13b2:	0600                	addi	s0,sp,768
    13b4:	0300                	addi	s0,sp,384
    13b6:	1788                	addi	a0,sp,992
    13b8:	0000                	unimp
    13ba:	009f 0000 0000      	0x9f
    13c0:	0000                	unimp
    13c2:	b800                	fsd	fs0,48(s0)
    13c4:	0004                	0x4
    13c6:	9e00                	0x9e00
    13c8:	0005                	c.nop	1
    13ca:	0200                	addi	s0,sp,256
    13cc:	8500                	0x8500
    13ce:	b600                	fsd	fs0,40(a2)
    13d0:	0005                	c.nop	1
    13d2:	b600                	fsd	fs0,40(a2)
    13d4:	0006                	c.slli	zero,0x1
    13d6:	0200                	addi	s0,sp,256
    13d8:	8500                	0x8500
	...
    13e2:	b800                	fsd	fs0,48(s0)
    13e4:	0004                	0x4
    13e6:	a200                	fsd	fs0,0(a2)
    13e8:	0005                	c.nop	1
    13ea:	0200                	addi	s0,sp,256
    13ec:	8700                	0x8700
    13ee:	b600                	fsd	fs0,40(a2)
    13f0:	0005                	c.nop	1
    13f2:	b600                	fsd	fs0,40(a2)
    13f4:	0006                	c.slli	zero,0x1
    13f6:	0200                	addi	s0,sp,256
    13f8:	8700                	0x8700
	...
    1402:	da00                	sw	s0,48(a2)
    1404:	0005                	c.nop	1
    1406:	f800                	fsw	fs0,48(s0)
    1408:	0005                	c.nop	1
    140a:	0100                	addi	s0,sp,128
    140c:	5a00                	lw	s0,48(a2)
    140e:	0624                	addi	s1,sp,776
    1410:	0000                	unimp
    1412:	066a                	slli	a2,a2,0x1a
    1414:	0000                	unimp
    1416:	0001                	nop
    1418:	005a                	c.slli	zero,0x16
    141a:	0000                	unimp
    141c:	0000                	unimp
    141e:	0000                	unimp
    1420:	b800                	fsd	fs0,48(s0)
    1422:	0004                	0x4
    1424:	a000                	fsd	fs0,0(s0)
    1426:	0005                	c.nop	1
    1428:	0200                	addi	s0,sp,256
    142a:	8600                	0x8600
    142c:	a000                	fsd	fs0,0(s0)
    142e:	0005                	c.nop	1
    1430:	a200                	fsd	fs0,0(a2)
    1432:	0005                	c.nop	1
    1434:	0c00                	addi	s0,sp,528
    1436:	8700                	0x8700
    1438:	8a00                	0x8a00
    143a:	3201                	jal	d3a <ntru_encyrpt+0x82>
    143c:	2324                	fld	fs1,64(a4)
    143e:	1af0090f          	0x1af0090f
    1442:	b61c                	fsd	fa5,40(a2)
    1444:	0005                	c.nop	1
    1446:	b600                	fsd	fs0,40(a2)
    1448:	0006                	c.slli	zero,0x1
    144a:	0200                	addi	s0,sp,256
    144c:	8600                	0x8600
	...
    1456:	ba00                	fsd	fs0,48(a2)
    1458:	0004                	0x4
    145a:	9000                	0x9000
    145c:	0005                	c.nop	1
    145e:	0200                	addi	s0,sp,256
    1460:	7200                	flw	fs0,32(a2)
    1462:	9000                	0x9000
    1464:	0005                	c.nop	1
    1466:	aa00                	fsd	fs0,16(a2)
    1468:	0005                	c.nop	1
    146a:	0200                	addi	s0,sp,256
    146c:	8b00                	0x8b00
    146e:	b600                	fsd	fs0,40(a2)
    1470:	0005                	c.nop	1
    1472:	b600                	fsd	fs0,40(a2)
    1474:	0006                	c.slli	zero,0x1
    1476:	0200                	addi	s0,sp,256
    1478:	7200                	flw	fs0,32(a2)
	...
    1482:	b800                	fsd	fs0,48(s0)
    1484:	0004                	0x4
    1486:	a800                	fsd	fs0,16(s0)
    1488:	0005                	c.nop	1
    148a:	0100                	addi	s0,sp,128
    148c:	6a00                	flw	fs0,16(a2)
    148e:	05a8                	addi	a0,sp,712
    1490:	0000                	unimp
    1492:	05b6                	slli	a1,a1,0xd
    1494:	0000                	unimp
    1496:	0006                	c.slli	zero,0x1
    1498:	315b01f3          	0x315b01f3
    149c:	9f1c                	0x9f1c
    149e:	05b6                	slli	a1,a1,0xd
    14a0:	0000                	unimp
    14a2:	06b6                	slli	a3,a3,0xd
    14a4:	0000                	unimp
    14a6:	0001                	nop
    14a8:	006a                	c.slli	zero,0x1a
    14aa:	0000                	unimp
    14ac:	0000                	unimp
    14ae:	0000                	unimp
    14b0:	b800                	fsd	fs0,48(s0)
    14b2:	0004                	0x4
    14b4:	a800                	fsd	fs0,16(s0)
    14b6:	0005                	c.nop	1
    14b8:	0100                	addi	s0,sp,128
    14ba:	6a00                	flw	fs0,16(a2)
    14bc:	05a8                	addi	a0,sp,712
    14be:	0000                	unimp
    14c0:	05b6                	slli	a1,a1,0xd
    14c2:	0000                	unimp
    14c4:	0006                	c.slli	zero,0x1
    14c6:	315b01f3          	0x315b01f3
    14ca:	9f1c                	0x9f1c
    14cc:	05b6                	slli	a1,a1,0xd
    14ce:	0000                	unimp
    14d0:	06b6                	slli	a3,a3,0xd
    14d2:	0000                	unimp
    14d4:	0001                	nop
    14d6:	006a                	c.slli	zero,0x1a
    14d8:	0000                	unimp
    14da:	0000                	unimp
    14dc:	0000                	unimp
    14de:	b800                	fsd	fs0,48(s0)
    14e0:	0004                	0x4
    14e2:	a800                	fsd	fs0,16(s0)
    14e4:	0005                	c.nop	1
    14e6:	0100                	addi	s0,sp,128
    14e8:	6a00                	flw	fs0,16(a2)
    14ea:	05a8                	addi	a0,sp,712
    14ec:	0000                	unimp
    14ee:	05b6                	slli	a1,a1,0xd
    14f0:	0000                	unimp
    14f2:	0006                	c.slli	zero,0x1
    14f4:	315b01f3          	0x315b01f3
    14f8:	9f1c                	0x9f1c
    14fa:	05b6                	slli	a1,a1,0xd
    14fc:	0000                	unimp
    14fe:	06b6                	slli	a3,a3,0xd
    1500:	0000                	unimp
    1502:	0001                	nop
    1504:	006a                	c.slli	zero,0x1a
    1506:	0000                	unimp
    1508:	0000                	unimp
    150a:	0000                	unimp
    150c:	b800                	fsd	fs0,48(s0)
    150e:	0004                	0x4
    1510:	d200                	sw	s0,32(a2)
    1512:	0004                	0x4
    1514:	0100                	addi	s0,sp,128
    1516:	6400                	flw	fs0,8(s0)
    1518:	04d2                	slli	s1,s1,0x14
    151a:	0000                	unimp
    151c:	04ec                	addi	a1,sp,588
    151e:	0000                	unimp
    1520:	7f830003          	lb	zero,2040(t1)
    1524:	ec9f 0004 4600      	0x46000004ec9f
    152a:	0005                	c.nop	1
    152c:	0100                	addi	s0,sp,128
    152e:	6400                	flw	fs0,8(s0)
    1530:	0546                	slli	a0,a0,0x11
    1532:	0000                	unimp
    1534:	059a                	slli	a1,a1,0x6
    1536:	0000                	unimp
    1538:	7f830003          	lb	zero,2040(t1)
    153c:	9a9f 0005 b600      	0xb60000059a9f
    1542:	0005                	c.nop	1
    1544:	0600                	addi	s0,sp,768
    1546:	f300                	fsw	fs0,32(a4)
    1548:	5d01                	li	s10,-32
    154a:	1c31                	addi	s8,s8,-20
    154c:	b69f 0005 b600      	0xb6000005b69f
    1552:	0006                	c.slli	zero,0x1
    1554:	0300                	addi	s0,sp,384
    1556:	8300                	0x8300
    1558:	9f7f                	0x9f7f
	...
    1562:	0300                	addi	s0,sp,384
    1564:	0000                	unimp
    1566:	0370                	addi	a2,sp,396
    1568:	0000                	unimp
    156a:	0001                	nop
    156c:	705a                	flw	ft0,180(sp)
    156e:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1572:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1576:	f300                	fsw	fs0,32(a4)
    1578:	5a01                	li	s4,-32
    157a:	8c9f 0003 c400      	0xc40000038c9f
    1580:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1584:	5a00                	lw	s0,48(a2)
    1586:	03c4                	addi	s1,sp,452
    1588:	0000                	unimp
    158a:	0466                	slli	s0,s0,0x19
    158c:	0000                	unimp
    158e:	0004                	0x4
    1590:	9f5a01f3          	0x9f5a01f3
	...
    159c:	0300                	addi	s0,sp,384
    159e:	0000                	unimp
    15a0:	034e                	slli	t1,t1,0x13
    15a2:	0000                	unimp
    15a4:	0001                	nop
    15a6:	00034e5b          	0x34e5b
    15aa:	7000                	flw	fs0,32(s0)
    15ac:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15b0:	5600                	lw	s0,40(a2)
    15b2:	0370                	addi	a2,sp,396
    15b4:	0000                	unimp
    15b6:	038c                	addi	a1,sp,448
    15b8:	0000                	unimp
    15ba:	018c0003          	lb	zero,24(s8) # 6e018 <_stack_start+0x5e018>
    15be:	8c9f 0003 c400      	0xc40000038c9f
    15c4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15c8:	5600                	lw	s0,40(a2)
    15ca:	03c4                	addi	s1,sp,452
    15cc:	0000                	unimp
    15ce:	040a                	slli	s0,s0,0x2
    15d0:	0000                	unimp
    15d2:	018c0003          	lb	zero,24(s8)
    15d6:	0a9f 0004 6600      	0x660000040a9f
    15dc:	0004                	0x4
    15de:	0400                	addi	s0,sp,512
    15e0:	f300                	fsw	fs0,32(a4)
    15e2:	5b01                	li	s6,-32
    15e4:	009f 0000 0000      	0x9f
    15ea:	0000                	unimp
    15ec:	0000                	unimp
    15ee:	76000003          	lb	zero,1888(zero) # 760 <ext_euclid+0xaa>
    15f2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15f6:	5c00                	lw	s0,56(s0)
    15f8:	0376                	slli	t1,t1,0x1d
    15fa:	0000                	unimp
    15fc:	038c                	addi	a1,sp,448
    15fe:	0000                	unimp
    1600:	0004                	0x4
    1602:	9f5c01f3          	0x9f5c01f3
    1606:	038c                	addi	a1,sp,448
    1608:	0000                	unimp
    160a:	03da                	slli	t2,t2,0x16
    160c:	0000                	unimp
    160e:	0001                	nop
    1610:	da5c                	sw	a5,52(a2)
    1612:	66000003          	lb	zero,1632(zero) # 660 <polydiv+0x1fa>
    1616:	0004                	0x4
    1618:	0400                	addi	s0,sp,512
    161a:	f300                	fsw	fs0,32(a4)
    161c:	5c01                	li	s8,-32
    161e:	009f 0000 0000      	0x9f
    1624:	0000                	unimp
    1626:	0000                	unimp
    1628:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0xda>
    162c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1630:	5d00                	lw	s0,56(a0)
    1632:	0354                	addi	a3,sp,388
    1634:	0000                	unimp
    1636:	0418                	addi	a4,sp,512
    1638:	0000                	unimp
    163a:	0001                	nop
    163c:	1859                	addi	a6,a6,-10
    163e:	0004                	0x4
    1640:	2e00                	fld	fs0,24(a2)
    1642:	0004                	0x4
    1644:	0400                	addi	s0,sp,512
    1646:	f300                	fsw	fs0,32(a4)
    1648:	5d01                	li	s10,-32
    164a:	2e9f 0004 6600      	0x660000042e9f
    1650:	0004                	0x4
    1652:	0100                	addi	s0,sp,128
    1654:	5900                	lw	s0,48(a0)
	...
    165e:	0300                	addi	s0,sp,384
    1660:	0000                	unimp
    1662:	0384                	addi	s1,sp,448
    1664:	0000                	unimp
    1666:	0001                	nop
    1668:	845e                	mv	s0,s7
    166a:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    166e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1672:	f300                	fsw	fs0,32(a4)
    1674:	5e01                	li	t3,-32
    1676:	8c9f 0003 da00      	0xda0000038c9f
    167c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1680:	5e00                	lw	s0,56(a2)
    1682:	03da                	slli	t2,t2,0x16
    1684:	0000                	unimp
    1686:	0466                	slli	s0,s0,0x19
    1688:	0000                	unimp
    168a:	0004                	0x4
    168c:	9f5e01f3          	0x9f5e01f3
	...
    1698:	0354                	addi	a3,sp,388
    169a:	0000                	unimp
    169c:	0384                	addi	s1,sp,448
    169e:	0000                	unimp
    16a0:	0002                	c.slli64	zero
    16a2:	0080                	addi	s0,sp,64
    16a4:	0384                	addi	s1,sp,448
    16a6:	0000                	unimp
    16a8:	038c                	addi	a1,sp,448
    16aa:	0000                	unimp
    16ac:	0002                	c.slli64	zero
    16ae:	0084                	addi	s1,sp,64
    16b0:	038c                	addi	a1,sp,448
    16b2:	0000                	unimp
    16b4:	03da                	slli	t2,t2,0x16
    16b6:	0000                	unimp
    16b8:	0002                	c.slli64	zero
    16ba:	0080                	addi	s0,sp,64
    16bc:	03da                	slli	t2,t2,0x16
    16be:	0000                	unimp
    16c0:	040a                	slli	s0,s0,0x2
    16c2:	0000                	unimp
    16c4:	0002                	c.slli64	zero
    16c6:	0084                	addi	s1,sp,64
    16c8:	042e                	slli	s0,s0,0xb
    16ca:	0000                	unimp
    16cc:	0458                	addi	a4,sp,516
    16ce:	0000                	unimp
    16d0:	0002                	c.slli64	zero
    16d2:	0084                	addi	s1,sp,64
	...
    16dc:	0356                	slli	t1,t1,0x15
    16de:	0000                	unimp
    16e0:	0364                	addi	s1,sp,396
    16e2:	0000                	unimp
    16e4:	0002                	c.slli64	zero
    16e6:	9f30                	0x9f30
    16e8:	0364                	addi	s1,sp,396
    16ea:	0000                	unimp
    16ec:	036a                	slli	t1,t1,0x1a
    16ee:	0000                	unimp
    16f0:	0001                	nop
    16f2:	6a6e                	flw	fs4,216(sp)
    16f4:	70000003          	lb	zero,1792(zero) # 700 <ext_euclid+0x4a>
    16f8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16fc:	6d00                	flw	fs0,24(a0)
    16fe:	0370                	addi	a2,sp,396
    1700:	0000                	unimp
    1702:	0384                	addi	s1,sp,448
    1704:	0000                	unimp
    1706:	0001                	nop
    1708:	8c5a                	mv	s8,s6
    170a:	ae000003          	lb	zero,-1312(zero) # fffffae0 <_stack_start+0xfffefae0>
    170e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1712:	6e00                	flw	fs0,24(a2)
    1714:	03ae                	slli	t2,t2,0xb
    1716:	0000                	unimp
    1718:	03be                	slli	t2,t2,0xf
    171a:	0000                	unimp
    171c:	0001                	nop
    171e:	be6d                	j	12d8 <_bss_start>
    1720:	c2000003          	lb	zero,-992(zero) # fffffc20 <_stack_start+0xfffefc20>
    1724:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1728:	8d00                	0x8d00
    172a:	9f7f                	0x9f7f
    172c:	03c2                	slli	t2,t2,0x10
    172e:	0000                	unimp
    1730:	03c4                	addi	s1,sp,452
    1732:	0000                	unimp
    1734:	0001                	nop
    1736:	c46d                	beqz	s0,1820 <result+0x98>
    1738:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    173c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1740:	5a00                	lw	s0,48(a2)
    1742:	03d4                	addi	a3,sp,452
    1744:	0000                	unimp
    1746:	03d8                	addi	a4,sp,452
    1748:	0000                	unimp
    174a:	7f7a0003          	lb	zero,2039(s4) # ffff67f7 <_stack_start+0xfffe67f7>
    174e:	d89f 0003 da00      	0xda000003d89f
    1754:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1758:	5a00                	lw	s0,48(a2)
    175a:	040a                	slli	s0,s0,0x2
    175c:	0000                	unimp
    175e:	0420                	addi	s0,sp,520
    1760:	0000                	unimp
    1762:	0001                	nop
    1764:	5865                	li	a6,-7
    1766:	0004                	0x4
    1768:	6600                	flw	fs0,8(a2)
    176a:	0004                	0x4
    176c:	0100                	addi	s0,sp,128
    176e:	6500                	flw	fs0,8(a0)
	...
    1778:	0384                	addi	s1,sp,448
    177a:	0000                	unimp
    177c:	038c                	addi	a1,sp,448
    177e:	0000                	unimp
    1780:	0001                	nop
    1782:	8c5d                	or	s0,s0,a5
    1784:	a8000003          	lb	zero,-1408(zero) # fffffa80 <_stack_start+0xfffefa80>
    1788:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    178c:	6d00                	flw	fs0,24(a0)
    178e:	03da                	slli	t2,t2,0x16
    1790:	0000                	unimp
    1792:	040a                	slli	s0,s0,0x2
    1794:	0000                	unimp
    1796:	0001                	nop
    1798:	2e5d                	jal	1b4e <ti_2+0x16e>
    179a:	0004                	0x4
    179c:	5800                	lw	s0,48(s0)
    179e:	0004                	0x4
    17a0:	0100                	addi	s0,sp,128
    17a2:	5d00                	lw	s0,56(a0)
	...
    17ac:	03da                	slli	t2,t2,0x16
    17ae:	0000                	unimp
    17b0:	03ec                	addi	a1,sp,460
    17b2:	0000                	unimp
    17b4:	0001                	nop
    17b6:	ec5e                	fsw	fs7,24(sp)
    17b8:	f2000003          	lb	zero,-224(zero) # ffffff20 <_stack_start+0xfffeff20>
    17bc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17c0:	7e00                	flw	fs0,56(a2)
    17c2:	9f01                	0x9f01
    17c4:	03f2                	slli	t2,t2,0x1c
    17c6:	0000                	unimp
    17c8:	03fc                	addi	a5,sp,460
    17ca:	0000                	unimp
    17cc:	0001                	nop
    17ce:	325e                	fld	ft4,496(sp)
    17d0:	0004                	0x4
    17d2:	4400                	lw	s0,8(s0)
    17d4:	0004                	0x4
    17d6:	0100                	addi	s0,sp,128
    17d8:	5e00                	lw	s0,56(a2)
    17da:	0444                	addi	s1,sp,516
    17dc:	0000                	unimp
    17de:	044c                	addi	a1,sp,516
    17e0:	0000                	unimp
    17e2:	017e0003          	lb	zero,23(t3)
    17e6:	4c9f 0004 5800      	0x580000044c9f
    17ec:	0004                	0x4
    17ee:	0100                	addi	s0,sp,128
    17f0:	5e00                	lw	s0,56(a2)
	...
    17fa:	040e                	slli	s0,s0,0x3
    17fc:	0000                	unimp
    17fe:	042e                	slli	s0,s0,0xb
    1800:	0000                	unimp
    1802:	0006                	c.slli	zero,0x1
    1804:	00153003          	0x153003
    1808:	9f00                	0x9f00
	...
    1812:	0354                	addi	a3,sp,388
    1814:	0000                	unimp
    1816:	040a                	slli	s0,s0,0x2
    1818:	0000                	unimp
    181a:	0002                	c.slli64	zero
    181c:	042e007b          	0x42e007b
    1820:	0000                	unimp
    1822:	0458                	addi	a4,sp,516
    1824:	0000                	unimp
    1826:	0002                	c.slli64	zero
    1828:	0000007b          	0x7b
    182c:	0000                	unimp
    182e:	0000                	unimp
    1830:	0000                	unimp
    1832:	0356                	slli	t1,t1,0x15
    1834:	0000                	unimp
    1836:	0412                	slli	s0,s0,0x4
    1838:	0000                	unimp
    183a:	0002                	c.slli64	zero
    183c:	0072                	c.slli	zero,0x1c
    183e:	042e                	slli	s0,s0,0xb
    1840:	0000                	unimp
    1842:	0466                	slli	s0,s0,0x19
    1844:	0000                	unimp
    1846:	0002                	c.slli64	zero
    1848:	0072                	c.slli	zero,0x1c
	...
    1852:	0354                	addi	a3,sp,388
    1854:	0000                	unimp
    1856:	0384                	addi	s1,sp,448
    1858:	0000                	unimp
    185a:	0001                	nop
    185c:	845d                	srai	s0,s0,0x17
    185e:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1862:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1866:	7900                	flw	fs0,48(a0)
    1868:	9f7f                	0x9f7f
    186a:	038c                	addi	a1,sp,448
    186c:	0000                	unimp
    186e:	03da                	slli	t2,t2,0x16
    1870:	0000                	unimp
    1872:	0001                	nop
    1874:	da5d                	beqz	a2,182a <result+0xa2>
    1876:	18000003          	lb	zero,384(zero) # 180 <polymult+0x50>
    187a:	0004                	0x4
    187c:	0300                	addi	s0,sp,384
    187e:	7900                	flw	fs0,48(a0)
    1880:	9f7f                	0x9f7f
    1882:	0418                	addi	a4,sp,512
    1884:	0000                	unimp
    1886:	042e                	slli	s0,s0,0xb
    1888:	0000                	unimp
    188a:	0006                	c.slli	zero,0x1
    188c:	315d01f3          	0x315d01f3
    1890:	9f1c                	0x9f1c
    1892:	042e                	slli	s0,s0,0xb
    1894:	0000                	unimp
    1896:	0466                	slli	s0,s0,0x19
    1898:	0000                	unimp
    189a:	7f790003          	lb	zero,2039(s2)
    189e:	009f 0000 0000      	0x9f
    18a4:	0000                	unimp
    18a6:	1a00                	addi	s0,sp,304
    18a8:	1c000003          	lb	zero,448(zero) # 1c0 <polymult+0x90>
    18ac:	0004                	0x4
    18ae:	0100                	addi	s0,sp,128
    18b0:	6300                	flw	fs0,0(a4)
    18b2:	041c                	addi	a5,sp,512
    18b4:	0000                	unimp
    18b6:	042e                	slli	s0,s0,0xb
    18b8:	0000                	unimp
    18ba:	000a                	c.slli	zero,0x2
    18bc:	f35b01f3          	0xf35b01f3
    18c0:	5d01                	li	s10,-32
    18c2:	3122                	fld	ft2,40(sp)
    18c4:	9f1c                	0x9f1c
    18c6:	042e                	slli	s0,s0,0xb
    18c8:	0000                	unimp
    18ca:	0466                	slli	s0,s0,0x19
    18cc:	0000                	unimp
    18ce:	0001                	nop
    18d0:	00000063          	beqz	zero,18d0 <result+0x148>
    18d4:	0000                	unimp
    18d6:	0000                	unimp
    18d8:	5400                	lw	s0,40(s0)
    18da:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    18de:	0004                	0x4
    18e0:	0100                	addi	s0,sp,128
    18e2:	6c00                	flw	fs0,24(s0)
    18e4:	040a                	slli	s0,s0,0x2
    18e6:	0000                	unimp
    18e8:	042e                	slli	s0,s0,0xb
    18ea:	0000                	unimp
    18ec:	0006                	c.slli	zero,0x1
    18ee:	315b01f3          	0x315b01f3
    18f2:	9f1c                	0x9f1c
    18f4:	042e                	slli	s0,s0,0xb
    18f6:	0000                	unimp
    18f8:	0458                	addi	a4,sp,516
    18fa:	0000                	unimp
    18fc:	0001                	nop
    18fe:	586c                	lw	a1,116(s0)
    1900:	0004                	0x4
    1902:	6600                	flw	fs0,8(a2)
    1904:	0004                	0x4
    1906:	0600                	addi	s0,sp,768
    1908:	f300                	fsw	fs0,32(a4)
    190a:	5b01                	li	s6,-32
    190c:	1c31                	addi	s8,s8,-20
    190e:	009f 0000 0000      	0x9f
    1914:	0000                	unimp
    1916:	5400                	lw	s0,40(s0)
    1918:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    191c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1920:	5d00                	lw	s0,56(a0)
    1922:	0384                	addi	s1,sp,448
    1924:	0000                	unimp
    1926:	038c                	addi	a1,sp,448
    1928:	0000                	unimp
    192a:	7f790003          	lb	zero,2039(s2)
    192e:	8c9f 0003 da00      	0xda0000038c9f
    1934:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1938:	5d00                	lw	s0,56(a0)
    193a:	03da                	slli	t2,t2,0x16
    193c:	0000                	unimp
    193e:	0418                	addi	a4,sp,512
    1940:	0000                	unimp
    1942:	7f790003          	lb	zero,2039(s2)
    1946:	189f 0004 2e00      	0x2e000004189f
    194c:	0004                	0x4
    194e:	0600                	addi	s0,sp,768
    1950:	f300                	fsw	fs0,32(a4)
    1952:	5d01                	li	s10,-32
    1954:	1c31                	addi	s8,s8,-20
    1956:	2e9f 0004 6600      	0x660000042e9f
    195c:	0004                	0x4
    195e:	0300                	addi	s0,sp,384
    1960:	7900                	flw	fs0,48(a0)
    1962:	9f7f                	0x9f7f
	...
    196c:	0130                	addi	a2,sp,136
    196e:	0000                	unimp
    1970:	01a6                	slli	gp,gp,0x9
    1972:	0000                	unimp
    1974:	0001                	nop
    1976:	a65a                	fsd	fs6,264(sp)
    1978:	0001                	nop
    197a:	c400                	sw	s0,8(s0)
    197c:	0001                	nop
    197e:	0400                	addi	s0,sp,512
    1980:	f300                	fsw	fs0,32(a4)
    1982:	5a01                	li	s4,-32
    1984:	c49f 0001 0c00      	0xc000001c49f
    198a:	0002                	c.slli64	zero
    198c:	0100                	addi	s0,sp,128
    198e:	5a00                	lw	s0,48(a2)
    1990:	020c                	addi	a1,sp,256
    1992:	0000                	unimp
    1994:	0300                	addi	s0,sp,384
    1996:	0000                	unimp
    1998:	0004                	0x4
    199a:	9f5a01f3          	0x9f5a01f3
	...
    19a6:	0130                	addi	a2,sp,136
    19a8:	0000                	unimp
    19aa:	01a8                	addi	a0,sp,200
    19ac:	0000                	unimp
    19ae:	0001                	nop
    19b0:	0001a85b          	0x1a85b
    19b4:	c400                	sw	s0,8(s0)
    19b6:	0001                	nop
    19b8:	0300                	addi	s0,sp,384
    19ba:	8d00                	0x8d00
    19bc:	9f01                	0x9f01
    19be:	01c4                	addi	s1,sp,196
    19c0:	0000                	unimp
    19c2:	020c                	addi	a1,sp,256
    19c4:	0000                	unimp
    19c6:	0001                	nop
    19c8:	00020c5b          	0x20c5b
    19cc:	4400                	lw	s0,8(s0)
    19ce:	0002                	c.slli64	zero
    19d0:	0300                	addi	s0,sp,384
    19d2:	8d00                	0x8d00
    19d4:	9f01                	0x9f01
    19d6:	0244                	addi	s1,sp,260
    19d8:	0000                	unimp
    19da:	0300                	addi	s0,sp,384
    19dc:	0000                	unimp
    19de:	0004                	0x4
    19e0:	9f5b01f3          	0x9f5b01f3
	...
    19ec:	0130                	addi	a2,sp,136
    19ee:	0000                	unimp
    19f0:	01bc                	addi	a5,sp,200
    19f2:	0000                	unimp
    19f4:	0001                	nop
    19f6:	bc5c                	fsd	fa5,184(s0)
    19f8:	0001                	nop
    19fa:	c400                	sw	s0,8(s0)
    19fc:	0001                	nop
    19fe:	0400                	addi	s0,sp,512
    1a00:	f300                	fsw	fs0,32(a4)
    1a02:	5c01                	li	s8,-32
    1a04:	c49f 0001 3000      	0x30000001c49f
    1a0a:	0002                	c.slli64	zero
    1a0c:	0100                	addi	s0,sp,128
    1a0e:	5c00                	lw	s0,56(s0)
    1a10:	0230                	addi	a2,sp,264
    1a12:	0000                	unimp
    1a14:	0300                	addi	s0,sp,384
    1a16:	0000                	unimp
    1a18:	0004                	0x4
    1a1a:	9f5c01f3          	0x9f5c01f3
	...
    1a26:	0130                	addi	a2,sp,136
    1a28:	0000                	unimp
    1a2a:	013c                	addi	a5,sp,136
    1a2c:	0000                	unimp
    1a2e:	0001                	nop
    1a30:	3c5d                	jal	14e6 <_bss_start+0x20e>
    1a32:	0001                	nop
    1a34:	6000                	flw	fs0,0(s0)
    1a36:	0002                	c.slli64	zero
    1a38:	0100                	addi	s0,sp,128
    1a3a:	5900                	lw	s0,48(a0)
    1a3c:	0260                	addi	s0,sp,268
    1a3e:	0000                	unimp
    1a40:	0278                	addi	a4,sp,268
    1a42:	0000                	unimp
    1a44:	0004                	0x4
    1a46:	9f5d01f3          	0x9f5d01f3
    1a4a:	0278                	addi	a4,sp,268
    1a4c:	0000                	unimp
    1a4e:	0300                	addi	s0,sp,384
    1a50:	0000                	unimp
    1a52:	0001                	nop
    1a54:	0059                	c.nop	22
    1a56:	0000                	unimp
    1a58:	0000                	unimp
    1a5a:	0000                	unimp
    1a5c:	3000                	fld	fs0,32(s0)
    1a5e:	0001                	nop
    1a60:	9800                	0x9800
    1a62:	0001                	nop
    1a64:	0100                	addi	s0,sp,128
    1a66:	5e00                	lw	s0,56(a2)
    1a68:	0198                	addi	a4,sp,192
    1a6a:	0000                	unimp
    1a6c:	0262                	slli	tp,tp,0x18
    1a6e:	0000                	unimp
    1a70:	0001                	nop
    1a72:	6262                	flw	ft4,24(sp)
    1a74:	0002                	c.slli64	zero
    1a76:	7800                	flw	fs0,48(s0)
    1a78:	0002                	c.slli64	zero
    1a7a:	0400                	addi	s0,sp,512
    1a7c:	f300                	fsw	fs0,32(a4)
    1a7e:	5e01                	li	t3,-32
    1a80:	789f 0002 0000      	0x2789f
    1a86:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a8a:	6200                	flw	fs0,0(a2)
	...
    1a94:	0130                	addi	a2,sp,136
    1a96:	0000                	unimp
    1a98:	0152                	slli	sp,sp,0x14
    1a9a:	0000                	unimp
    1a9c:	0001                	nop
    1a9e:	525f 0001 bc00      	0xbc000001525f
    1aa4:	0001                	nop
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	6c00                	flw	fs0,24(s0)
    1aaa:	01bc                	addi	a5,sp,200
    1aac:	0000                	unimp
    1aae:	01c4                	addi	s1,sp,196
    1ab0:	0000                	unimp
    1ab2:	0004                	0x4
    1ab4:	9f5f01f3          	0x9f5f01f3
    1ab8:	01c4                	addi	s1,sp,196
    1aba:	0000                	unimp
    1abc:	0234                	addi	a3,sp,264
    1abe:	0000                	unimp
    1ac0:	0001                	nop
    1ac2:	346c                	fld	fa1,232(s0)
    1ac4:	0002                	c.slli64	zero
    1ac6:	7800                	flw	fs0,48(s0)
    1ac8:	0002                	c.slli64	zero
    1aca:	0400                	addi	s0,sp,512
    1acc:	f300                	fsw	fs0,32(a4)
    1ace:	5f01                	li	t5,-32
    1ad0:	789f 0002 a000      	0xa0000002789f
    1ad6:	0002                	c.slli64	zero
    1ad8:	0100                	addi	s0,sp,128
    1ada:	6c00                	flw	fs0,24(s0)
    1adc:	02a0                	addi	s0,sp,328
    1ade:	0000                	unimp
    1ae0:	0300                	addi	s0,sp,384
    1ae2:	0000                	unimp
    1ae4:	0004                	0x4
    1ae6:	9f5f01f3          	0x9f5f01f3
	...
    1af2:	0184                	addi	s1,sp,192
    1af4:	0000                	unimp
    1af6:	0236                	slli	tp,tp,0xd
    1af8:	0000                	unimp
    1afa:	0002                	c.slli64	zero
    1afc:	007d                	c.nop	31
    1afe:	0236                	slli	tp,tp,0xd
    1b00:	0000                	unimp
    1b02:	0244                	addi	s1,sp,260
    1b04:	0000                	unimp
    1b06:	0002                	c.slli64	zero
    1b08:	0085                	addi	ra,ra,1
    1b0a:	0278                	addi	a4,sp,268
    1b0c:	0000                	unimp
    1b0e:	02c4                	addi	s1,sp,324
    1b10:	0000                	unimp
    1b12:	0002                	c.slli64	zero
    1b14:	007d                	c.nop	31
    1b16:	02c4                	addi	s1,sp,324
    1b18:	0000                	unimp
    1b1a:	02e2                	slli	t0,t0,0x18
    1b1c:	0000                	unimp
    1b1e:	0002                	c.slli64	zero
    1b20:	0085                	addi	ra,ra,1
	...
    1b2a:	018a                	slli	gp,gp,0x2
    1b2c:	0000                	unimp
    1b2e:	0198                	addi	a4,sp,192
    1b30:	0000                	unimp
    1b32:	0002                	c.slli64	zero
    1b34:	9f30                	0x9f30
    1b36:	0198                	addi	a4,sp,192
    1b38:	0000                	unimp
    1b3a:	019e                	slli	gp,gp,0x7
    1b3c:	0000                	unimp
    1b3e:	0001                	nop
    1b40:	a06e                	fsd	fs11,0(sp)
    1b42:	0001                	nop
    1b44:	a800                	fsd	fs0,16(s0)
    1b46:	0001                	nop
    1b48:	0100                	addi	s0,sp,128
    1b4a:	6f00                	flw	fs0,24(a4)
    1b4c:	01a8                	addi	a0,sp,200
    1b4e:	0000                	unimp
    1b50:	01ba                	slli	gp,gp,0xe
    1b52:	0000                	unimp
    1b54:	0001                	nop
    1b56:	0001c45b          	0x1c45b
    1b5a:	e600                	fsw	fs0,8(a2)
    1b5c:	0001                	nop
    1b5e:	0100                	addi	s0,sp,128
    1b60:	6e00                	flw	fs0,24(a2)
    1b62:	01e6                	slli	gp,gp,0x19
    1b64:	0000                	unimp
    1b66:	0200                	addi	s0,sp,256
    1b68:	0000                	unimp
    1b6a:	0001                	nop
    1b6c:	0002006f          	j	21b6c <_stack_start+0x11b6c>
    1b70:	0600                	addi	s0,sp,768
    1b72:	0002                	c.slli64	zero
    1b74:	0300                	addi	s0,sp,384
    1b76:	8f00                	0x8f00
    1b78:	9f7f                	0x9f7f
    1b7a:	0206                	slli	tp,tp,0x1
    1b7c:	0000                	unimp
    1b7e:	020c                	addi	a1,sp,256
    1b80:	0000                	unimp
    1b82:	0001                	nop
    1b84:	00020c6f          	jal	s8,21b84 <_stack_start+0x11b84>
    1b88:	2200                	fld	fs0,0(a2)
    1b8a:	0002                	c.slli64	zero
    1b8c:	0100                	addi	s0,sp,128
    1b8e:	5b00                	lw	s0,48(a4)
    1b90:	0222                	slli	tp,tp,0x8
    1b92:	0000                	unimp
    1b94:	0228                	addi	a0,sp,264
    1b96:	0000                	unimp
    1b98:	7f7b0003          	lb	zero,2039(s6)
    1b9c:	289f 0002 3000      	0x30000002289f
    1ba2:	0002                	c.slli64	zero
    1ba4:	0100                	addi	s0,sp,128
    1ba6:	5b00                	lw	s0,48(a4)
    1ba8:	0236                	slli	tp,tp,0xd
    1baa:	0000                	unimp
    1bac:	0244                	addi	s1,sp,260
    1bae:	0000                	unimp
    1bb0:	0001                	nop
    1bb2:	445e                	lw	s0,212(sp)
    1bb4:	0002                	c.slli64	zero
    1bb6:	6a00                	flw	fs0,16(a2)
    1bb8:	0002                	c.slli64	zero
    1bba:	0100                	addi	s0,sp,128
    1bbc:	6600                	flw	fs0,8(a2)
    1bbe:	02c4                	addi	s1,sp,324
    1bc0:	0000                	unimp
    1bc2:	02e2                	slli	t0,t0,0x18
    1bc4:	0000                	unimp
    1bc6:	0001                	nop
    1bc8:	e25e                	fsw	fs7,4(sp)
    1bca:	0002                	c.slli64	zero
    1bcc:	0000                	unimp
    1bce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1bd2:	6600                	flw	fs0,8(a2)
	...
    1bdc:	01bc                	addi	a5,sp,200
    1bde:	0000                	unimp
    1be0:	01c4                	addi	s1,sp,196
    1be2:	0000                	unimp
    1be4:	0001                	nop
    1be6:	c461                	beqz	s0,1cae <random_keys+0x13e>
    1be8:	0001                	nop
    1bea:	e000                	fsw	fs0,0(s0)
    1bec:	0001                	nop
    1bee:	0100                	addi	s0,sp,128
    1bf0:	5e00                	lw	s0,56(a2)
    1bf2:	0230                	addi	a2,sp,264
    1bf4:	0000                	unimp
    1bf6:	0236                	slli	tp,tp,0xd
    1bf8:	0000                	unimp
    1bfa:	0001                	nop
    1bfc:	5261                	li	tp,-8
    1bfe:	0002                	c.slli64	zero
    1c00:	7800                	flw	fs0,48(s0)
    1c02:	0002                	c.slli64	zero
    1c04:	0100                	addi	s0,sp,128
    1c06:	5e00                	lw	s0,56(a2)
    1c08:	0278                	addi	a4,sp,268
    1c0a:	0000                	unimp
    1c0c:	02c4                	addi	s1,sp,324
    1c0e:	0000                	unimp
    1c10:	0001                	nop
    1c12:	c461                	beqz	s0,1cda <random_keys+0x16a>
    1c14:	0002                	c.slli64	zero
    1c16:	c800                	sw	s0,16(s0)
    1c18:	0002                	c.slli64	zero
    1c1a:	0100                	addi	s0,sp,128
    1c1c:	5c00                	lw	s0,56(s0)
    1c1e:	02c8                	addi	a0,sp,324
    1c20:	0000                	unimp
    1c22:	02d2                	slli	t0,t0,0x14
    1c24:	0000                	unimp
    1c26:	7f7c0003          	lb	zero,2039(s8)
    1c2a:	d29f 0002 dc00      	0xdc000002d29f
    1c30:	0002                	c.slli64	zero
    1c32:	0100                	addi	s0,sp,128
    1c34:	5c00                	lw	s0,56(s0)
    1c36:	02f0                	addi	a2,sp,332
    1c38:	0000                	unimp
    1c3a:	02f4                	addi	a3,sp,332
    1c3c:	0000                	unimp
    1c3e:	0001                	nop
    1c40:	f45e                	fsw	fs7,40(sp)
    1c42:	0002                	c.slli64	zero
    1c44:	fe00                	fsw	fs0,56(a2)
    1c46:	0002                	c.slli64	zero
    1c48:	0300                	addi	s0,sp,384
    1c4a:	7e00                	flw	fs0,56(a2)
    1c4c:	9f7f                	0x9f7f
    1c4e:	02fe                	slli	t0,t0,0x1f
    1c50:	0000                	unimp
    1c52:	0300                	addi	s0,sp,384
    1c54:	0000                	unimp
    1c56:	0001                	nop
    1c58:	005e                	c.slli	zero,0x17
    1c5a:	0000                	unimp
    1c5c:	0000                	unimp
    1c5e:	0000                	unimp
    1c60:	7800                	flw	fs0,48(s0)
    1c62:	0002                	c.slli64	zero
    1c64:	8a00                	0x8a00
    1c66:	0002                	c.slli64	zero
    1c68:	0100                	addi	s0,sp,128
    1c6a:	5e00                	lw	s0,56(a2)
    1c6c:	028a                	slli	t0,t0,0x2
    1c6e:	0000                	unimp
    1c70:	0290                	addi	a2,sp,320
    1c72:	0000                	unimp
    1c74:	017e0003          	lb	zero,23(t3)
    1c78:	909f 0002 9c00      	0x9c000002909f
    1c7e:	0002                	c.slli64	zero
    1c80:	0100                	addi	s0,sp,128
    1c82:	5e00                	lw	s0,56(a2)
    1c84:	02a0                	addi	s0,sp,328
    1c86:	0000                	unimp
    1c88:	02b2                	slli	t0,t0,0xc
    1c8a:	0000                	unimp
    1c8c:	0001                	nop
    1c8e:	b25e                	fsd	fs7,288(sp)
    1c90:	0002                	c.slli64	zero
    1c92:	b800                	fsd	fs0,48(s0)
    1c94:	0002                	c.slli64	zero
    1c96:	0300                	addi	s0,sp,384
    1c98:	7e00                	flw	fs0,56(a2)
    1c9a:	9f01                	0x9f01
    1c9c:	02b8                	addi	a4,sp,328
    1c9e:	0000                	unimp
    1ca0:	02c4                	addi	s1,sp,324
    1ca2:	0000                	unimp
    1ca4:	0001                	nop
    1ca6:	005e                	c.slli	zero,0x17
    1ca8:	0000                	unimp
    1caa:	0000                	unimp
    1cac:	0000                	unimp
    1cae:	5600                	lw	s0,40(a2)
    1cb0:	0002                	c.slli64	zero
    1cb2:	7800                	flw	fs0,48(s0)
    1cb4:	0002                	c.slli64	zero
    1cb6:	0600                	addi	s0,sp,768
    1cb8:	0300                	addi	s0,sp,384
    1cba:	12d8                	addi	a4,sp,356
    1cbc:	0000                	unimp
    1cbe:	009f 0000 0000      	0x9f
    1cc4:	0000                	unimp
    1cc6:	8800                	0x8800
    1cc8:	0001                	nop
    1cca:	4400                	lw	s0,8(s0)
    1ccc:	0002                	c.slli64	zero
    1cce:	0200                	addi	s0,sp,256
    1cd0:	7600                	flw	fs0,40(a2)
    1cd2:	7800                	flw	fs0,48(s0)
    1cd4:	0002                	c.slli64	zero
    1cd6:	e200                	fsw	fs0,0(a2)
    1cd8:	0002                	c.slli64	zero
    1cda:	0200                	addi	s0,sp,256
    1cdc:	7600                	flw	fs0,40(a2)
	...
    1ce6:	8a00                	0x8a00
    1ce8:	0001                	nop
    1cea:	5a00                	lw	s0,48(a2)
    1cec:	0002                	c.slli64	zero
    1cee:	0200                	addi	s0,sp,256
    1cf0:	7200                	flw	fs0,32(a2)
    1cf2:	7800                	flw	fs0,48(s0)
    1cf4:	0002                	c.slli64	zero
    1cf6:	0000                	unimp
    1cf8:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1cfc:	7200                	flw	fs0,32(a2)
	...
    1d06:	8400                	0x8400
    1d08:	0001                	nop
    1d0a:	bc00                	fsd	fs0,56(s0)
    1d0c:	0001                	nop
    1d0e:	0100                	addi	s0,sp,128
    1d10:	6100                	flw	fs0,0(a0)
    1d12:	01bc                	addi	a5,sp,200
    1d14:	0000                	unimp
    1d16:	01c4                	addi	s1,sp,196
    1d18:	0000                	unimp
    1d1a:	7f790003          	lb	zero,2039(s2)
    1d1e:	c49f 0001 3000      	0x30000001c49f
    1d24:	0002                	c.slli64	zero
    1d26:	0100                	addi	s0,sp,128
    1d28:	6100                	flw	fs0,0(a0)
    1d2a:	0230                	addi	a2,sp,264
    1d2c:	0000                	unimp
    1d2e:	0260                	addi	s0,sp,268
    1d30:	0000                	unimp
    1d32:	7f790003          	lb	zero,2039(s2)
    1d36:	609f 0002 7800      	0x78000002609f
    1d3c:	0002                	c.slli64	zero
    1d3e:	0600                	addi	s0,sp,768
    1d40:	f300                	fsw	fs0,32(a4)
    1d42:	5d01                	li	s10,-32
    1d44:	1c31                	addi	s8,s8,-20
    1d46:	789f 0002 0000      	0x2789f
    1d4c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1d50:	7900                	flw	fs0,48(a0)
    1d52:	9f7f                	0x9f7f
	...
    1d5c:	0148                	addi	a0,sp,132
    1d5e:	0000                	unimp
    1d60:	0266                	slli	tp,tp,0x19
    1d62:	0000                	unimp
    1d64:	0001                	nop
    1d66:	6664                	flw	fs1,76(a2)
    1d68:	0002                	c.slli64	zero
    1d6a:	7800                	flw	fs0,48(s0)
    1d6c:	0002                	c.slli64	zero
    1d6e:	0a00                	addi	s0,sp,272
    1d70:	f300                	fsw	fs0,32(a4)
    1d72:	5b01                	li	s6,-32
    1d74:	225d01f3          	0x225d01f3
    1d78:	1c31                	addi	s8,s8,-20
    1d7a:	789f 0002 0000      	0x2789f
    1d80:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1d84:	6400                	flw	fs0,8(s0)
	...
    1d8e:	0188                	addi	a0,sp,192
    1d90:	0000                	unimp
    1d92:	0244                	addi	s1,sp,260
    1d94:	0000                	unimp
    1d96:	0001                	nop
    1d98:	446d                	li	s0,27
    1d9a:	0002                	c.slli64	zero
    1d9c:	7800                	flw	fs0,48(s0)
    1d9e:	0002                	c.slli64	zero
    1da0:	0600                	addi	s0,sp,768
    1da2:	f300                	fsw	fs0,32(a4)
    1da4:	5b01                	li	s6,-32
    1da6:	1c31                	addi	s8,s8,-20
    1da8:	789f 0002 e200      	0xe2000002789f
    1dae:	0002                	c.slli64	zero
    1db0:	0100                	addi	s0,sp,128
    1db2:	6d00                	flw	fs0,24(a0)
    1db4:	02e2                	slli	t0,t0,0x18
    1db6:	0000                	unimp
    1db8:	0300                	addi	s0,sp,384
    1dba:	0000                	unimp
    1dbc:	0006                	c.slli	zero,0x1
    1dbe:	315b01f3          	0x315b01f3
    1dc2:	9f1c                	0x9f1c
	...
    1dcc:	0188                	addi	a0,sp,192
    1dce:	0000                	unimp
    1dd0:	01bc                	addi	a5,sp,200
    1dd2:	0000                	unimp
    1dd4:	0001                	nop
    1dd6:	bc61                	j	186e <result+0xe6>
    1dd8:	0001                	nop
    1dda:	c400                	sw	s0,8(s0)
    1ddc:	0001                	nop
    1dde:	0300                	addi	s0,sp,384
    1de0:	7900                	flw	fs0,48(a0)
    1de2:	9f7f                	0x9f7f
    1de4:	01c4                	addi	s1,sp,196
    1de6:	0000                	unimp
    1de8:	0230                	addi	a2,sp,264
    1dea:	0000                	unimp
    1dec:	0001                	nop
    1dee:	3061                	jal	1676 <product2+0x146>
    1df0:	0002                	c.slli64	zero
    1df2:	6000                	flw	fs0,0(s0)
    1df4:	0002                	c.slli64	zero
    1df6:	0300                	addi	s0,sp,384
    1df8:	7900                	flw	fs0,48(a0)
    1dfa:	9f7f                	0x9f7f
    1dfc:	0260                	addi	s0,sp,268
    1dfe:	0000                	unimp
    1e00:	0278                	addi	a4,sp,268
    1e02:	0000                	unimp
    1e04:	0006                	c.slli	zero,0x1
    1e06:	315d01f3          	0x315d01f3
    1e0a:	9f1c                	0x9f1c
    1e0c:	0278                	addi	a4,sp,268
    1e0e:	0000                	unimp
    1e10:	0300                	addi	s0,sp,384
    1e12:	0000                	unimp
    1e14:	7f790003          	lb	zero,2039(s2)
    1e18:	009f 0000 0000      	0x9f
    1e1e:	0000                	unimp
    1e20:	9200                	0x9200
    1e22:	0000                	unimp
    1e24:	ee00                	fsw	fs0,24(a2)
    1e26:	0000                	unimp
    1e28:	0100                	addi	s0,sp,128
    1e2a:	5a00                	lw	s0,48(a2)
    1e2c:	00ee                	slli	ra,ra,0x1b
    1e2e:	0000                	unimp
    1e30:	00fa                	slli	ra,ra,0x1e
    1e32:	0000                	unimp
    1e34:	0004                	0x4
    1e36:	9f5a01f3          	0x9f5a01f3
    1e3a:	00fa                	slli	ra,ra,0x1e
    1e3c:	0000                	unimp
    1e3e:	0130                	addi	a2,sp,136
    1e40:	0000                	unimp
    1e42:	0001                	nop
    1e44:	005a                	c.slli	zero,0x16
    1e46:	0000                	unimp
    1e48:	0000                	unimp
    1e4a:	0000                	unimp
    1e4c:	9200                	0x9200
    1e4e:	0000                	unimp
    1e50:	aa00                	fsd	fs0,16(a2)
    1e52:	0000                	unimp
    1e54:	0100                	addi	s0,sp,128
    1e56:	5c00                	lw	s0,56(s0)
    1e58:	00aa                	slli	ra,ra,0xa
    1e5a:	0000                	unimp
    1e5c:	00b2                	slli	ra,ra,0xc
    1e5e:	0000                	unimp
    1e60:	0004                	0x4
    1e62:	9f5c01f3          	0x9f5c01f3
    1e66:	00b2                	slli	ra,ra,0xc
    1e68:	0000                	unimp
    1e6a:	00c4                	addi	s1,sp,68
    1e6c:	0000                	unimp
    1e6e:	0001                	nop
    1e70:	c45c                	sw	a5,12(s0)
    1e72:	0000                	unimp
    1e74:	d800                	sw	s0,48(s0)
    1e76:	0000                	unimp
    1e78:	0400                	addi	s0,sp,512
    1e7a:	f300                	fsw	fs0,32(a4)
    1e7c:	5c01                	li	s8,-32
    1e7e:	d89f 0000 ea00      	0xea000000d89f
    1e84:	0000                	unimp
    1e86:	0100                	addi	s0,sp,128
    1e88:	5c00                	lw	s0,56(s0)
    1e8a:	00ea                	slli	ra,ra,0x1a
    1e8c:	0000                	unimp
    1e8e:	010c                	addi	a1,sp,128
    1e90:	0000                	unimp
    1e92:	0004                	0x4
    1e94:	9f5c01f3          	0x9f5c01f3
    1e98:	010c                	addi	a1,sp,128
    1e9a:	0000                	unimp
    1e9c:	0130                	addi	a2,sp,136
    1e9e:	0000                	unimp
    1ea0:	0001                	nop
    1ea2:	005c                	addi	a5,sp,4
    1ea4:	0000                	unimp
    1ea6:	0000                	unimp
    1ea8:	0000                	unimp
    1eaa:	9200                	0x9200
    1eac:	0000                	unimp
    1eae:	ac00                	fsd	fs0,24(s0)
    1eb0:	0000                	unimp
    1eb2:	0200                	addi	s0,sp,256
    1eb4:	3000                	fld	fs0,32(s0)
    1eb6:	ac9f 0000 b200      	0xb2000000ac9f
    1ebc:	0000                	unimp
    1ebe:	0100                	addi	s0,sp,128
    1ec0:	5f00                	lw	s0,56(a4)
    1ec2:	00b2                	slli	ra,ra,0xc
    1ec4:	0000                	unimp
    1ec6:	00be                	slli	ra,ra,0xf
    1ec8:	0000                	unimp
    1eca:	0002                	c.slli64	zero
    1ecc:	9f30                	0x9f30
    1ece:	00be                	slli	ra,ra,0xf
    1ed0:	0000                	unimp
    1ed2:	00d0                	addi	a2,sp,68
    1ed4:	0000                	unimp
    1ed6:	0001                	nop
    1ed8:	d85f 0000 e400      	0xe4000000d85f
    1ede:	0000                	unimp
    1ee0:	0200                	addi	s0,sp,256
    1ee2:	3000                	fld	fs0,32(s0)
    1ee4:	e49f 0000 ea00      	0xea000000e49f
    1eea:	0000                	unimp
    1eec:	0100                	addi	s0,sp,128
    1eee:	5f00                	lw	s0,56(a4)
    1ef0:	00fa                	slli	ra,ra,0x1e
    1ef2:	0000                	unimp
    1ef4:	0130                	addi	a2,sp,136
    1ef6:	0000                	unimp
    1ef8:	0001                	nop
    1efa:	005f 0000 0000      	0x5f
    1f00:	0000                	unimp
    1f02:	fe00                	fsw	fs0,56(a2)
    1f04:	0000                	unimp
    1f06:	0400                	addi	s0,sp,512
    1f08:	0001                	nop
    1f0a:	0600                	addi	s0,sp,768
    1f0c:	7b00                	flw	fs0,48(a4)
    1f0e:	7e00                	flw	fs0,56(a2)
    1f10:	2200                	fld	fs0,0(a2)
    1f12:	049f 0001 0800      	0x8000001049f
    1f18:	0001                	nop
    1f1a:	0100                	addi	s0,sp,128
    1f1c:	5e00                	lw	s0,56(a2)
	...
    1f26:	00fe                	slli	ra,ra,0x1f
    1f28:	0000                	unimp
    1f2a:	0102                	c.slli64	sp
    1f2c:	0000                	unimp
    1f2e:	0006                	c.slli	zero,0x1
    1f30:	007a                	c.slli	zero,0x1e
    1f32:	007e                	c.slli	zero,0x1f
    1f34:	9f22                	add	t5,t5,s0
    1f36:	0102                	c.slli64	sp
    1f38:	0000                	unimp
    1f3a:	0108                	addi	a0,sp,128
    1f3c:	0000                	unimp
    1f3e:	0001                	nop
    1f40:	005d                	c.nop	23
    1f42:	0000                	unimp
    1f44:	0000                	unimp
    1f46:	0000                	unimp
    1f48:	1000                	addi	s0,sp,32
    1f4a:	0001                	nop
    1f4c:	1600                	addi	s0,sp,800
    1f4e:	0001                	nop
    1f50:	0600                	addi	s0,sp,768
    1f52:	7b00                	flw	fs0,48(a4)
    1f54:	7e00                	flw	fs0,56(a2)
    1f56:	2200                	fld	fs0,0(a2)
    1f58:	169f 0001 1a00      	0x1a000001169f
    1f5e:	0001                	nop
    1f60:	0100                	addi	s0,sp,128
    1f62:	5e00                	lw	s0,56(a2)
	...
    1f6c:	0110                	addi	a2,sp,128
    1f6e:	0000                	unimp
    1f70:	0114                	addi	a3,sp,128
    1f72:	0000                	unimp
    1f74:	0006                	c.slli	zero,0x1
    1f76:	007a                	c.slli	zero,0x1e
    1f78:	007e                	c.slli	zero,0x1f
    1f7a:	9f22                	add	t5,t5,s0
    1f7c:	0114                	addi	a3,sp,128
    1f7e:	0000                	unimp
    1f80:	011a                	slli	sp,sp,0x6
    1f82:	0000                	unimp
    1f84:	0001                	nop
    1f86:	0060                	addi	s0,sp,12
    1f88:	0000                	unimp
    1f8a:	0000                	unimp
    1f8c:	0000                	unimp
    1f8e:	2200                	fld	fs0,0(a2)
    1f90:	0001                	nop
    1f92:	2800                	fld	fs0,16(s0)
    1f94:	0001                	nop
    1f96:	0600                	addi	s0,sp,768
    1f98:	7b00                	flw	fs0,48(a4)
    1f9a:	7e00                	flw	fs0,56(a2)
    1f9c:	2200                	fld	fs0,0(a2)
    1f9e:	289f 0001 2c00      	0x2c000001289f
    1fa4:	0001                	nop
    1fa6:	0100                	addi	s0,sp,128
    1fa8:	5e00                	lw	s0,56(a2)
	...
    1fb2:	0122                	slli	sp,sp,0x8
    1fb4:	0000                	unimp
    1fb6:	0126                	slli	sp,sp,0x9
    1fb8:	0000                	unimp
    1fba:	0006                	c.slli	zero,0x1
    1fbc:	007a                	c.slli	zero,0x1e
    1fbe:	007e                	c.slli	zero,0x1f
    1fc0:	9f22                	add	t5,t5,s0
    1fc2:	0126                	slli	sp,sp,0x9
    1fc4:	0000                	unimp
    1fc6:	012c                	addi	a1,sp,136
    1fc8:	0000                	unimp
    1fca:	0001                	nop
    1fcc:	0060                	addi	s0,sp,12
    1fce:	0000                	unimp
    1fd0:	0000                	unimp
    1fd2:	0000                	unimp
    1fd4:	8c00                	0x8c00
    1fd6:	0000                	unimp
    1fd8:	9000                	0x9000
    1fda:	0000                	unimp
    1fdc:	0100                	addi	s0,sp,128
    1fde:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0dc4                	addi	s1,sp,724
  16:	0000                	unimp
  18:	104c                	addi	a1,sp,36
  1a:	0000                	unimp
  1c:	00f8                	addi	a4,sp,76
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	18e9                	addi	a7,a7,-6
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0e50                	addi	a2,sp,788
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0e50                	addi	a2,sp,788
   6:	0000                	unimp
   8:	104c                	addi	a1,sp,36
   a:	0000                	unimp
   c:	1144                	addi	s1,sp,164
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0e50                	addi	a2,sp,788
  22:	0000                	unimp
  24:	0ec6                	slli	t4,t4,0x11
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2a60                	fld	fs0,208(a2)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x74>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x60>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x23c>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xce>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x8a>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x3e>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0xba>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	682e                	flw	fa6,200(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
} //end of function
      f8:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
    asm volatile(
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
            for (i = 0; i < (length / 3); i++) {
     10a:	0305                	addi	t1,t1,1
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	00000907          	0x907
    asm volatile(
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polymult2+0x150>
    asm volatile(
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0612                	slli	a2,a2,0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13c:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0xb4>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     14c:	0e090303          	lb	t1,224(s2)
    int pola[size_a];
     150:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
     15e:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
    int pola[size_a];
     164:	0601                	addi	a2,a2,0
     166:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0xd6>
    int pola[size_a];
     16e:	06090b03          	lb	s6,96(s2)
    int polb[size_b];
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0x13e>
     176:	04090003          	lb	zero,64(s2)
     17a:	0100                	addi	s0,sp,128
     17c:	1405                	addi	s0,s0,-31
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     17e:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     182:	0100                	addi	s0,sp,128
    int pola[size_a];
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
    int polb[size_b];
     188:	0104                	addi	s1,sp,128
    for (i = 0; i < size_b; ++i){
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
     18e:	0004                	0x4
            product[j] = 0;
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
     194:	0402                	c.slli64	s0
     196:	0601                	addi	a2,a2,0
    for (i = 0; i < size_b; ++i){
     198:	00090003          	lb	zero,0(s2)
     19c:	0100                	addi	s0,sp,128
    for (i = 0; i < size_a; ++i){
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0)
     1a4:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1a6:	061e                	slli	a2,a2,0x7
     1a8:	00090003          	lb	zero,0(s2)
    if(star_mult == 1){
     1ac:	0100                	addi	s0,sp,128
     1ae:	2d05                	jal	7de <ext_euclid+0x128>
     1b0:	08090003          	lb	zero,128(s2)
     1b4:	0100                	addi	s0,sp,128
     1b6:	2905                	jal	5e6 <polydiv+0x180>
     1b8:	04090003          	lb	zero,64(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     1bc:	0100                	addi	s0,sp,128
     1be:	1a05                	addi	s4,s4,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     1c0:	06090003          	lb	zero,96(s2)
            product[j] = 0;
     1c4:	0100                	addi	s0,sp,128
     1c6:	2505                	jal	7e6 <ext_euclid+0x130>
     1c8:	04097703          	0x4097703
            line[i][j] = 0;
     1cc:	0100                	addi	s0,sp,128
            product[j] = 0;
     1ce:	2905                	jal	5fe <polydiv+0x198>
     1d0:	04090003          	lb	zero,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1d4:	0100                	addi	s0,sp,128
     1d6:	1405                	addi	s0,s0,-31
     1d8:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size_b; ++i){
     1dc:	0100                	addi	s0,sp,128
     1de:	1905                	addi	s2,s2,-31
     1e0:	0200                	addi	s0,sp,256
        for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	0104                	addi	s1,sp,128
     1e4:	0306                	slli	t1,t1,0x1
        pola[i] = a[i];
     1e6:	0900                	addi	s0,sp,144
     1e8:	0004                	0x4
     1ea:	0501                	addi	a0,a0,0
     1ec:	000d                	c.nop	3
            pola[i] = pola[i] + mod;
     1ee:	0402                	c.slli64	s0
     1f0:	0601                	addi	a2,a2,0
        while (pola[i] < 0){
     1f2:	00090003          	lb	zero,0(s2)
     1f6:	0100                	addi	s0,sp,128
     1f8:	0306                	slli	t1,t1,0x1
        pola[i] = pola[i] % mod;
     1fa:	00040903          	lb	s2,0(s0)
    for (i = 0; i < size_a; ++i){
     1fe:	0501                	addi	a0,a0,0
     200:	061e                	slli	a2,a2,0x7
        pola[i] = pola[i] % mod;
     202:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_a; ++i){
     206:	0100                	addi	s0,sp,128
            pola[i] = pola[i] + mod;
     208:	0d05                	addi	s10,s10,1
     20a:	0306                	slli	t1,t1,0x1
        polb[i] = b[i];
     20c:	00020907          	0x20907
     210:	0501                	addi	a0,a0,0
     212:	061e                	slli	a2,a2,0x7
            polb[i] = polb[i] + mod;
     214:	00090003          	lb	zero,0(s2)
        while (polb[i] < 0){
     218:	0100                	addi	s0,sp,128
     21a:	2d05                	jal	84a <ext_euclid+0x194>
        polb[i] = polb[i] % mod;
     21c:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size_b; ++i){
     220:	0100                	addi	s0,sp,128
     222:	2905                	jal	652 <polydiv+0x1ec>
        polb[i] = polb[i] % mod;
     224:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size_b; ++i){
     228:	0100                	addi	s0,sp,128
            polb[i] = polb[i] + mod;
     22a:	1a05                	addi	s4,s4,-31
     22c:	06090003          	lb	zero,96(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     230:	0100                	addi	s0,sp,128
     232:	0605                	addi	a2,a2,1
        for(j = 0; j < size_a + size_b -1; ++j){
     234:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     236:	0901                	addi	s2,s2,0
     238:	0002                	c.slli64	zero
    for(i = 0; i < size_b; ++i){
     23a:	0501                	addi	a0,a0,0
		array_add(product,line[i],size_a+size_b-1);
     23c:	0601                	addi	a2,a2,0
     23e:	00090203          	lb	tp,0(s2)
     242:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     244:	1105                	addi	sp,sp,-31
     246:	0200                	addi	s0,sp,256
     248:	0304                	addi	s1,sp,384
     24a:	0306                	slli	t1,t1,0x1
     24c:	0002096f          	jal	s2,2024c <_stack_start+0x1024c>
    for(j = 0; j < size_a + size_b -1; ++j){
     250:	0501                	addi	a0,a0,0
     252:	0005                	c.nop	1
     254:	0402                	c.slli64	s0
}
     256:	096d0303          	lb	t1,150(s10)
     25a:	0004                	0x4
     25c:	0001                	nop
     25e:	0402                	c.slli64	s0
     260:	09090303          	lb	t1,144(s2)
     264:	000a                	c.slli	zero,0x2
     266:	0501                	addi	a0,a0,0
     268:	0402002b          	0x402002b
     26c:	09090303          	lb	t1,144(s2)
     270:	0000                	unimp
     272:	0501                	addi	a0,a0,0
     274:	002c                	addi	a1,sp,8
     276:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     278:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     27c:	0009                	c.nop	2
     27e:	0100                	addi	s0,sp,128
     280:	1105                	addi	sp,sp,-31
     282:	0200                	addi	s0,sp,256
     284:	0304                	addi	s1,sp,384
     286:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0906                	slli	s2,s2,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     28a:	0004                	0x4
     28c:	0501                	addi	a0,a0,0
     28e:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     290:	0402                	c.slli64	s0
     292:	09680303          	lb	t1,150(a6)
        for (j = size_b -1; j >= 0; j = j-1){
     296:	0004                	0x4
     298:	0001                	nop
     29a:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     29c:	09090303          	lb	t1,144(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a0:	000a                	c.slli	zero,0x2
     2a2:	0501                	addi	a0,a0,0
     2a4:	0402002f          	0x402002f
     2a8:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
     2ac:	0000                	unimp
     2ae:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b0:	0030                	addi	a2,sp,8
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b2:	0402                	c.slli64	s0
     2b4:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	0009                	c.nop	2
     2ba:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     2bc:	1105                	addi	sp,sp,-31
     2be:	0200                	addi	s0,sp,256
     2c0:	0304                	addi	s1,sp,384
     2c2:	0306                	slli	t1,t1,0x1
            line[i][j] = line[i][j] % mod;
     2c4:	00040907          	0x40907
        for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0501                	addi	a0,a0,0
            line[i][j] = line[i][j] % mod;
     2ca:	0005                	c.nop	1
     2cc:	0402                	c.slli64	s0
     2ce:	09620303          	lb	t1,150(tp) # 1a096 <_stack_start+0xa096>
        for(j = 0; j < size_a + size_b -1; ++j){
     2d2:	0004                	0x4
     2d4:	0001                	nop
    for (i = 0; i < size_b; ++i){
     2d6:	0402                	c.slli64	s0
     2d8:	09090303          	lb	t1,144(s2)
     2dc:	000a                	c.slli	zero,0x2
        for(j = 0; j < size_a + size_b -1; ++j){
     2de:	0501                	addi	a0,a0,0
     2e0:	0402002f          	0x402002f
		array_add(product,line[i],size_a+size_b-1);
     2e4:	09140303          	lb	t1,145(s0)
     2e8:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     2ea:	0501                	addi	a0,a0,0
     2ec:	0030                	addi	a2,sp,8
     2ee:	0402                	c.slli64	s0
        product[j] = product[j] % mod;
     2f0:	00030603          	lb	a2,0(t1)
    for(j = 0; j < size_a + size_b -1; ++j){
     2f4:	0009                	c.nop	2
        product[j] = product[j] % mod;
     2f6:	0100                	addi	s0,sp,128
     2f8:	4e05                	li	t3,1
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	090e                	slli	s2,s2,0x3
    for(j = 0; j < size_a + size_b -1; ++j){
     2fe:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     300:	0501                	addi	a0,a0,0
     302:	0305                	addi	t1,t1,1
     304:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    int line[size_b][size_a + size_b];
     308:	0501                	addi	a0,a0,0
     30a:	064e                	slli	a2,a2,0x13
     30c:	00097d03          	0x97d03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     310:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     312:	1d05                	addi	s10,s10,-31
     314:	0a090303          	lb	t1,160(s2)
     318:	0100                	addi	s0,sp,128
     31a:	4e05                	li	t3,1
     31c:	02097d03          	0x2097d03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     320:	0100                	addi	s0,sp,128
     322:	0905                	addi	s2,s2,1
     324:	04090303          	lb	t1,64(s2)
     328:	0100                	addi	s0,sp,128
     32a:	4e05                	li	t3,1
    int pola[size_a];
     32c:	0c097d03          	0xc097d03
    int line[size_b][size_a + size_b];
     330:	0100                	addi	s0,sp,128
     332:	0905                	addi	s2,s2,1
     334:	02090603          	lb	a2,32(s2)
    int pola[size_a];
     338:	0100                	addi	s0,sp,128
     33a:	4e05                	li	t3,1
     33c:	04097a03          	0x4097a03
    int line[size_b][size_a + size_b];
     340:	0100                	addi	s0,sp,128
    int pola[size_a];
     342:	0905                	addi	s2,s2,1
     344:	0e090303          	lb	t1,224(s2)
    int polb[size_b];
     348:	0100                	addi	s0,sp,128
     34a:	04090303          	lb	t1,64(s2)
     34e:	0100                	addi	s0,sp,128
     350:	4e05                	li	t3,1
    int line[size_b][size_a + size_b];
     352:	04097a03          	0x4097a03
    for (i = 0; i < size_b; ++i){
     356:	0100                	addi	s0,sp,128
     358:	0905                	addi	s2,s2,1
     35a:	00090303          	lb	t1,0(s2)
            product2[j] = 0;
     35e:	0100                	addi	s0,sp,128
     360:	06090303          	lb	t1,96(s2)
    for (i = 0; i < size_b; ++i){
     364:	0100                	addi	s0,sp,128
     366:	04090103          	lb	sp,64(s2)
    for(i = 0; i < size_a; ++i){
     36a:	0100                	addi	s0,sp,128
     36c:	06097f03          	0x6097f03
    for(i = 0; i < size_b; ++i){
     370:	0100                	addi	s0,sp,128
     372:	02090103          	lb	sp,32(s2)
    if(star_mult == 1){
     376:	0100                	addi	s0,sp,128
     378:	4e05                	li	t3,1
     37a:	04097903          	0x4097903
     37e:	0100                	addi	s0,sp,128
     380:	0905                	addi	s2,s2,1
     382:	02090303          	lb	t1,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     386:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     388:	0505                	addi	a0,a0,1
     38a:	0306                	slli	t1,t1,0x1
            product2[j] = 0;
     38c:	0901                	addi	s2,s2,0
     38e:	0004                	0x4
     390:	0301                	addi	t1,t1,0
            line[i][j] = 0;
     392:	0901                	addi	s2,s2,0
     394:	0000                	unimp
            product2[j] = 0;
     396:	0301                	addi	t1,t1,0
     398:	0901                	addi	s2,s2,0
        for(j = 0; j < size_a + size_b -1; ++j){
     39a:	0000                	unimp
     39c:	0501                	addi	a0,a0,0
     39e:	0609                	addi	a2,a2,2
     3a0:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     3a4:	0100                	addi	s0,sp,128
     3a6:	0505                	addi	a0,a0,1
     3a8:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     3aa:	0901                	addi	s2,s2,0
     3ac:	0004                	0x4
        pola[i] = a[i];
     3ae:	0501                	addi	a0,a0,0
     3b0:	0609                	addi	a2,a2,2
     3b2:	00090003          	lb	zero,0(s2)
     3b6:	0100                	addi	s0,sp,128
     3b8:	0505                	addi	a0,a0,1
     3ba:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_a; ++i){
     3bc:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
        pola[i] = a[i];
     3c0:	0501                	addi	a0,a0,0
    for(i = 0; i < size_a; ++i){
     3c2:	060c                	addi	a1,sp,768
        polb[i] = b[i];
     3c4:	04090003          	lb	zero,64(s2)
     3c8:	0100                	addi	s0,sp,128
     3ca:	1805                	addi	a6,a6,-31
     3cc:	02090303          	lb	t1,32(s2)
     3d0:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     3d2:	1105                	addi	sp,sp,-31
        polb[i] = b[i];
     3d4:	0200                	addi	s0,sp,256
     3d6:	0104                	addi	s1,sp,128
    for(i = 0; i < size_b; ++i){
     3d8:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3da:	097d                	addi	s2,s2,31
     3dc:	0008                	0x8
     3de:	0501                	addi	a0,a0,0
     3e0:	0005                	c.nop	1
     3e2:	0402                	c.slli64	s0
     3e4:	0601                	addi	a2,a2,0
     3e6:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ea:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ec:	0c05                	addi	s8,s8,1
     3ee:	06090803          	lb	a6,96(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f2:	0100                	addi	s0,sp,128
     3f4:	1105                	addi	sp,sp,-31
        for (j = size_b -1; j >= 0; j = j-1){
     3f6:	0200                	addi	s0,sp,256
     3f8:	0104                	addi	s1,sp,128
     3fa:	0306                	slli	t1,t1,0x1
     3fc:	0900                	addi	s0,sp,144
     3fe:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     400:	0501                	addi	a0,a0,0
        array_add(product2,line[i],size_a+size_b-1);
     402:	0005                	c.nop	1
     404:	0402                	c.slli64	s0
     406:	0601                	addi	a2,a2,0
     408:	00090003          	lb	zero,0(s2)
    for(i=0;i<size_b;++i){
     40c:	0100                	addi	s0,sp,128
}
     40e:	0c05                	addi	s8,s8,1
     410:	06090903          	lb	s2,96(s2)
     414:	0100                	addi	s0,sp,128
     416:	1105                	addi	sp,sp,-31
     418:	0200                	addi	s0,sp,256
     41a:	0104                	addi	s1,sp,128
     41c:	0306                	slli	t1,t1,0x1
     41e:	0900                	addi	s0,sp,144
     420:	0002                	c.slli64	zero
     422:	0501                	addi	a0,a0,0
     424:	0005                	c.nop	1
     426:	0402                	c.slli64	s0
     428:	0601                	addi	a2,a2,0
     42a:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     42e:	0100                	addi	s0,sp,128
     430:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     432:	090a                	slli	s2,s2,0x2
     434:	0004                	0x4
     436:	0501                	addi	a0,a0,0
     438:	00030607          	0x30607
     43c:	0009                	c.nop	2
     43e:	0100                	addi	s0,sp,128
     440:	1d05                	addi	s10,s10,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     442:	0200                	addi	s0,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     444:	0104                	addi	s1,sp,128
     446:	0306                	slli	t1,t1,0x1
     448:	0908                	addi	a0,sp,144
     44a:	0010                	0x10
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	0501                	addi	a0,a0,0
     44e:	0009                	c.nop	2
        for (j = size_b -1; j >= 0; j = j-1){
     450:	0402                	c.slli64	s0
     452:	0601                	addi	a2,a2,0
     454:	00090003          	lb	zero,0(s2)
        array_add(product2,line[i],size_a+size_b-1);
     458:	0100                	addi	s0,sp,128
     45a:	1405                	addi	s0,s0,-31
     45c:	04090103          	lb	sp,64(s2)
    for(i=0;i<size_b;++i){
     460:	0100                	addi	s0,sp,128
     462:	0d05                	addi	s10,s10,1
     464:	0200                	addi	s0,sp,256
    int v[size_N];
     466:	0304                	addi	s1,sp,384
     468:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46a:	095e                	slli	s2,s2,0x17
    int v[size_N];
     46c:	0004                	0x4
     46e:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     470:	0018                	0x18
     472:	0402                	c.slli64	s0
     474:	01030603          	lb	a2,16(t1)
     478:	0009                	c.nop	2
     47a:	0100                	addi	s0,sp,128
     47c:	0200                	addi	s0,sp,256
     47e:	0304                	addi	s1,sp,384
     480:	06097f03          	0x6097f03
     484:	0100                	addi	s0,sp,128
     486:	0d05                	addi	s10,s10,1
     488:	0200                	addi	s0,sp,256
     48a:	0304                	addi	s1,sp,384
    int v[size_N];
     48c:	0306                	slli	t1,t1,0x1
     48e:	0901                	addi	s2,s2,0
     490:	0004                	0x4
    int q[size_N];
     492:	0501                	addi	a0,a0,0
     494:	0018                	0x18
     496:	0402                	c.slli64	s0
    int num_temp[size_N];
     498:	00030603          	lb	a2,0(t1)
    int denum_temp[size_D];
     49c:	0009                	c.nop	2
     49e:	0100                	addi	s0,sp,128
     4a0:	2c05                	jal	6d0 <ext_euclid+0x1a>
     4a2:	0200                	addi	s0,sp,256
    int num_temp[size_N];
     4a4:	0304                	addi	s1,sp,384
    int denum_temp[size_D];
     4a6:	0306                	slli	t1,t1,0x1
     4a8:	097e                	slli	s2,s2,0x1f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4aa:	0004                	0x4
     4ac:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     4ae:	0014                	0x14
     4b0:	0402                	c.slli64	s0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4b2:	0301                	addi	t1,t1,0
    int v[size_N];
     4b4:	0900                	addi	s0,sp,144
     4b6:	0004                	0x4
    int denum_temp[size_D];
     4b8:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     4ba:	0009                	c.nop	2
     4bc:	0402                	c.slli64	s0
     4be:	0601                	addi	a2,a2,0
     4c0:	00090003          	lb	zero,0(s2)
     4c4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_D; ++i) {
     4c6:	1d05                	addi	s10,s10,-31
     4c8:	0200                	addi	s0,sp,256
     4ca:	0204                	addi	s1,sp,256
    for (i = 0; i < size_N; ++i){
     4cc:	0306                	slli	t1,t1,0x1
     4ce:	097f                	0x97f
     4d0:	0004                	0x4
    for (i = size_D-1; i >= 0; i = i-1){
     4d2:	0501                	addi	a0,a0,0
     4d4:	0103060f          	0x103060f
     4d8:	0809                	addi	a6,a6,2
     4da:	0100                	addi	s0,sp,128
     4dc:	0905                	addi	s2,s2,1
    for (i = 0; i < size_N; ++i){
     4de:	0306                	slli	t1,t1,0x1
     4e0:	0908                	addi	a0,sp,144
        if ( (b_N*u)%mod == 1 )
     4e2:	0004                	0x4
    for (u = 0; u < mod; ++u){
     4e4:	0501                	addi	a0,a0,0
     4e6:	0614                	addi	a3,sp,768
     4e8:	00090003          	lb	zero,0(s2)
        num_temp[i] = num[i];
     4ec:	0100                	addi	s0,sp,128
     4ee:	1105                	addi	sp,sp,-31
     4f0:	06090003          	lb	zero,96(s2)
            num_temp[i] = num_temp[i] + mod;
     4f4:	0100                	addi	s0,sp,128
        while (num_temp[i] < 0) {
     4f6:	1505                	addi	a0,a0,-31
     4f8:	02090203          	lb	tp,32(s2)
        num_temp[i] = num_temp[i] % mod;
     4fc:	0100                	addi	s0,sp,128
     4fe:	0f05                	addi	t5,t5,1
    for (i = 0; i < size_N; ++i){
     500:	0306                	slli	t1,t1,0x1
     502:	097f                	0x97f
        num_temp[i] = num_temp[i] % mod;
     504:	0004                	0x4
     506:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     508:	0614                	addi	a3,sp,768
            num_temp[i] = num_temp[i] + mod;
     50a:	00090003          	lb	zero,0(s2)
        denum_temp[i] = denum[i];
     50e:	0100                	addi	s0,sp,128
     510:	0f05                	addi	t5,t5,1
     512:	04090003          	lb	zero,64(s2)
            denum_temp[i] = denum_temp[i] + mod;
     516:	0100                	addi	s0,sp,128
        while (denum_temp[i] < 0) {
     518:	0905                	addi	s2,s2,1
     51a:	0200                	addi	s0,sp,256
     51c:	0204                	addi	s1,sp,256
        denum_temp[i] = denum_temp[i] % mod;
     51e:	0306                	slli	t1,t1,0x1
     520:	00040903          	lb	s2,0(s0)
    for (i = 0; i < size_D; ++i) {
     524:	0501                	addi	a0,a0,0
        denum_temp[i] = denum_temp[i] % mod;
     526:	0402001b          	0x402001b
    for (i = 0; i < size_D; ++i) {
     52a:	0602                	c.slli64	a2
            denum_temp[i] = denum_temp[i] + mod;
     52c:	00090003          	lb	zero,0(s2)
        q[i] = 0;
     530:	0100                	addi	s0,sp,128
     532:	1d05                	addi	s10,s10,-31
     534:	0200                	addi	s0,sp,256
     536:	0204                	addi	s1,sp,256
        v[i] = 0;
     538:	04097b03          	0x4097b03
        q[i] = 0;
     53c:	0100                	addi	s0,sp,128
        v[i] = 0;
     53e:	1105                	addi	sp,sp,-31
     540:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     542:	0204                	addi	s1,sp,256
     544:	04090503          	lb	a0,64(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     548:	0100                	addi	s0,sp,128
     54a:	1d05                	addi	s10,s10,-31
        if ( (b_N*u)%mod == 1 )
     54c:	0200                	addi	s0,sp,256
     54e:	0204                	addi	s1,sp,256
     550:	0306                	slli	t1,t1,0x1
     552:	0004097b          	0x4097b
    for (u = 0; u < mod; ++u){
     556:	0501                	addi	a0,a0,0
     558:	030d                	addi	t1,t1,3
        if( num_temp[i] != 0 )
     55a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    for (i = size_N-1; i >= 0; i = i-1){
     55e:	0501                	addi	a0,a0,0
     560:	061f 0003 0009      	0x90003061f
     566:	0100                	addi	s0,sp,128
     568:	0905                	addi	s2,s2,1
    while (d >= d2){
     56a:	0306                	slli	t1,t1,0x1
     56c:	00040907          	0x40907
        result[i] = q[i];
     570:	0501                	addi	a0,a0,0
     572:	0614                	addi	a3,sp,768
     574:	00090003          	lb	zero,0(s2)
    for(i = 0; i < size_N; ++i){
     578:	0100                	addi	s0,sp,128
     57a:	1105                	addi	sp,sp,-31
    for(i = size_N; i < (2*size_N); ++i){
     57c:	06090003          	lb	zero,96(s2)
        result[i] = num_temp[i-size_N];
     580:	0100                	addi	s0,sp,128
     582:	1505                	addi	a0,a0,-31
     584:	02090203          	lb	tp,32(s2)
    for(i = size_N; i < (2*size_N); ++i){
     588:	0100                	addi	s0,sp,128
     58a:	0f05                	addi	t5,t5,1
}
     58c:	0306                	slli	t1,t1,0x1
     58e:	097f                	0x97f
     590:	0002                	c.slli64	zero
     592:	0501                	addi	a0,a0,0
     594:	0614                	addi	a3,sp,768
     596:	00090003          	lb	zero,0(s2)
     59a:	0100                	addi	s0,sp,128
     59c:	0f05                	addi	t5,t5,1
     59e:	02090003          	lb	zero,32(s2)
     5a2:	0100                	addi	s0,sp,128
     5a4:	0905                	addi	s2,s2,1
     5a6:	0200                	addi	s0,sp,256
     5a8:	0204                	addi	s1,sp,256
     5aa:	0306                	slli	t1,t1,0x1
     5ac:	00040903          	lb	s2,0(s0)
     5b0:	0501                	addi	a0,a0,0
     5b2:	0402001b          	0x402001b
        v[(d-d2)] = u*r_d;
     5b6:	0602                	c.slli64	a2
     5b8:	00090003          	lb	zero,0(s2)
     5bc:	0100                	addi	s0,sp,128
     5be:	1d05                	addi	s10,s10,-31
     5c0:	0200                	addi	s0,sp,256
     5c2:	0204                	addi	s1,sp,256
        for (i = 0; i < size_N; ++i){
     5c4:	04097b03          	0x4097b03
     5c8:	0100                	addi	s0,sp,128
     5ca:	1105                	addi	sp,sp,-31
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5cc:	0200                	addi	s0,sp,256
     5ce:	0204                	addi	s1,sp,256
     5d0:	04090503          	lb	a0,64(s2)
     5d4:	0100                	addi	s0,sp,128
     5d6:	1d05                	addi	s10,s10,-31
     5d8:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5da:	0204                	addi	s1,sp,256
     5dc:	0306                	slli	t1,t1,0x1
     5de:	0004097b          	0x4097b
     5e2:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     5e4:	030d                	addi	t1,t1,3
     5e6:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     5ea:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     5ec:	061f 0003 0009      	0x90003061f
        array_add(q, v, size_N);
     5f2:	0100                	addi	s0,sp,128
     5f4:	0705                	addi	a4,a4,1
     5f6:	04090703          	lb	a4,64(s2)
        for(i = 0; i < size_N; ++i){
     5fa:	0100                	addi	s0,sp,128
     5fc:	1d05                	addi	s10,s10,-31
     5fe:	0200                	addi	s0,sp,256
     600:	0104                	addi	s1,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     602:	0306                	slli	t1,t1,0x1
     604:	0901                	addi	s2,s2,0
     606:	0002                	c.slli64	zero
     608:	0501                	addi	a0,a0,0
     60a:	0009                	c.nop	2
     60c:	0402                	c.slli64	s0
     60e:	0601                	addi	a2,a2,0
     610:	00090003          	lb	zero,0(s2)
            v[i] = v[i] % mod;
     614:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     616:	0f05                	addi	t5,t5,1
     618:	04091003          	lh	zero,64(s2)
            v[i] = v[i] % mod;
     61c:	0100                	addi	s0,sp,128
     61e:	1105                	addi	sp,sp,-31
     620:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     622:	0104                	addi	s1,sp,128
                product[i] = product[i] + mod;
     624:	0306                	slli	t1,t1,0x1
     626:	097f                	0x97f
            while (product[i] < 0) {
     628:	0002                	c.slli64	zero
     62a:	0501                	addi	a0,a0,0
     62c:	0005                	c.nop	1
            product[i] = product[i] % mod;
     62e:	0402                	c.slli64	s0
     630:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     632:	00090003          	lb	zero,0(s2)
            product[i] = product[i] % mod;
     636:	0100                	addi	s0,sp,128
     638:	0b05                	addi	s6,s6,1
        for (i = 0; i < size_N; ++i){
     63a:	04090703          	lb	a4,64(s2)
            num_temp[i] = num_temp[i] - product[i];
     63e:	0100                	addi	s0,sp,128
     640:	0305                	addi	t1,t1,1
     642:	02090303          	lb	t1,32(s2)
        for (i = 0; i < size_N; ++i){
     646:	0100                	addi	s0,sp,128
     648:	1005                	c.nop	-31
            num_temp[i] = num_temp[i] - product[i];
     64a:	0200                	addi	s0,sp,256
     64c:	0104                	addi	s1,sp,128
     64e:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     650:	097d                	addi	s2,s2,31
                num_temp[i] = num_temp[i] + mod;
     652:	0008                	0x8
     654:	0501                	addi	a0,a0,0
            while (num_temp[i] < 0){
     656:	0005                	c.nop	1
     658:	0402                	c.slli64	s0
     65a:	0601                	addi	a2,a2,0
            num_temp[i] = num_temp[i] % mod;
     65c:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     660:	0100                	addi	s0,sp,128
     662:	0b05                	addi	s6,s6,1
            num_temp[i] = num_temp[i] % mod;
     664:	0c090a03          	lb	s4,192(s2)
        for (i = 0; i < size_N; ++i){
     668:	0100                	addi	s0,sp,128
            q[i] = q[i] % mod;
     66a:	1005                	c.nop	-31
        for(i = 0; i < size_N; ++i){
     66c:	0200                	addi	s0,sp,256
     66e:	0104                	addi	s1,sp,128
            q[i] = q[i] % mod;
     670:	0306                	slli	t1,t1,0x1
     672:	0900                	addi	s0,sp,144
     674:	0002                	c.slli64	zero
     676:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     678:	0005                	c.nop	1
            if( num_temp[i] != 0 )
     67a:	0402                	c.slli64	s0
        for (i = size_N-1; i >= 0; i = i-1){
     67c:	0601                	addi	a2,a2,0
     67e:	00090003          	lb	zero,0(s2)
            v[i] = 0;
     682:	0100                	addi	s0,sp,128
     684:	0306                	slli	t1,t1,0x1
     686:	0905                	addi	s2,s2,1
     688:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     68a:	0301                	addi	t1,t1,0
     68c:	0902                	c.slli64	s2
     68e:	0000                	unimp
     690:	0501                	addi	a0,a0,0
        result[i] = q[i];
     692:	0601                	addi	a2,a2,0
     694:	00090103          	lb	sp,0(s2)
     698:	0100                	addi	s0,sp,128
     69a:	1105                	addi	sp,sp,-31
     69c:	0200                	addi	s0,sp,256
    for(i = 0; i < size_N; ++i){
     69e:	0304                	addi	s1,sp,384
        result[i] = q[i];
     6a0:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_N; ++i){
     6a2:	095a                	slli	s2,s2,0x16
        result[i] = num_temp[i-size_N];
     6a4:	0022                	c.slli	zero,0x8
     6a6:	0501                	addi	a0,a0,0
     6a8:	0025                	c.nop	9
     6aa:	0402                	c.slli64	s0
     6ac:	00030603          	lb	a2,0(t1)
    for(i = size_N; i < (2*size_N); ++i){
     6b0:	0409                	addi	s0,s0,2
     6b2:	0100                	addi	s0,sp,128
     6b4:	2b05                	jal	be4 <generate_keys+0x24a>
    int ri_2[size]; // MX-ring poly, a
     6b6:	0200                	addi	s0,sp,256
     6b8:	0304                	addi	s1,sp,384
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	04090003          	lb	zero,64(s2)
    int ri_2[size]; // MX-ring poly, a
     6be:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6c0:	2e05                	jal	9f0 <generate_keys+0x56>
     6c2:	0200                	addi	s0,sp,256
     6c4:	0304                	addi	s1,sp,384
     6c6:	02090003          	lb	zero,32(s2)
     6ca:	0100                	addi	s0,sp,128
     6cc:	2a05                	jal	7fc <ext_euclid+0x146>
     6ce:	0200                	addi	s0,sp,256
     6d0:	0304                	addi	s1,sp,384
     6d2:	06097f03          	0x6097f03
     6d6:	0100                	addi	s0,sp,128
     6d8:	2e05                	jal	a08 <generate_keys+0x6e>
     6da:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6dc:	0304                	addi	s1,sp,384
     6de:	02090103          	lb	sp,32(s2)
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6e2:	0100                	addi	s0,sp,128
     6e4:	2505                	jal	d04 <ntru_encyrpt+0x4c>
     6e6:	0200                	addi	s0,sp,256
    int ri[size];
     6e8:	0304                	addi	s1,sp,384
     6ea:	04090003          	lb	zero,64(s2)
    int ti_1[size]; // ti_1[0] = 1
     6ee:	0100                	addi	s0,sp,128
     6f0:	2805                	jal	720 <ext_euclid+0x6a>
     6f2:	0200                	addi	s0,sp,256
    int ti[size];
     6f4:	0304                	addi	s1,sp,384
     6f6:	0306                	slli	t1,t1,0x1
     6f8:	097f                	0x97f
    int qi_1[size];
     6fa:	0002                	c.slli64	zero
     6fc:	0501                	addi	a0,a0,0
     6fe:	0020                	addi	s0,sp,8
    int temp[size];
     700:	0402                	c.slli64	s0
     702:	0301                	addi	t1,t1,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     704:	0900                	addi	s0,sp,144
     706:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     708:	0501                	addi	a0,a0,0
     70a:	000d                	c.nop	3
    int temp[size];
     70c:	0402                	c.slli64	s0
    for (i = 0; i < size; ++i) {
     70e:	0601                	addi	a2,a2,0
     710:	00090003          	lb	zero,0(s2)
        ti_2[i] = 0;
     714:	0100                	addi	s0,sp,128
     716:	2505                	jal	d36 <ntru_encyrpt+0x7e>
     718:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     71a:	0204                	addi	s1,sp,256
     71c:	0306                	slli	t1,t1,0x1
    ti_1[0] = 1;
     71e:	097f                	0x97f
     720:	0004                	0x4
     722:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     724:	04020027          	0x4020027
     728:	0602                	c.slli64	a2
     72a:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     72e:	0100                	addi	s0,sp,128
        ri_2[i] = polyR[i];
     730:	1405                	addi	s0,s0,-31
     732:	08090103          	lb	sp,128(s2)
     736:	0100                	addi	s0,sp,128
     738:	1105                	addi	sp,sp,-31
     73a:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     73c:	0304                	addi	s1,sp,384
        ri_2[i] = polyR[i];
     73e:	0306                	slli	t1,t1,0x1
     740:	0908                	addi	a0,sp,144
        ri_1[i] = polyf[i];
     742:	0004                	0x4
     744:	0501                	addi	a0,a0,0
     746:	0029                	c.nop	10
     748:	0402                	c.slli64	s0
     74a:	00030603          	lb	a2,0(t1)
     74e:	0409                	addi	s0,s0,2
     750:	0100                	addi	s0,sp,128
        ti_2[i] = 0;
     752:	2f05                	jal	e82 <reset_handler+0x2e>
     754:	0200                	addi	s0,sp,256
     756:	0304                	addi	s1,sp,384
     758:	04090003          	lb	zero,64(s2)
        ti_1[i] = 0;
     75c:	0100                	addi	s0,sp,128
     75e:	3205                	jal	7e <__DYNAMIC+0x7e>
     760:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     762:	0304                	addi	s1,sp,384
     764:	02090003          	lb	zero,32(s2)
                ri_2[i] = ri_2[i] + mod;
     768:	0100                	addi	s0,sp,128
            while (ri_2[i] < 0) {
     76a:	2a05                	jal	89a <ext_euclid+0x1e4>
     76c:	0200                	addi	s0,sp,256
     76e:	0304                	addi	s1,sp,384
            ri_2[i] = ri_2[i] % mod;
     770:	06097f03          	0x6097f03
        for (i = 0; i < N + 1; ++i) {
     774:	0100                	addi	s0,sp,128
            ri_2[i] = ri_2[i] % mod;
     776:	3205                	jal	96 <array_add+0x4>
        for (i = 0; i < N + 1; ++i) {
     778:	0200                	addi	s0,sp,256
     77a:	0304                	addi	s1,sp,384
     77c:	02090103          	lb	sp,32(s2)
     780:	0100                	addi	s0,sp,128
     782:	2905                	jal	bb2 <generate_keys+0x218>
     784:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     786:	0304                	addi	s1,sp,384
     788:	04090003          	lb	zero,64(s2)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     78c:	0100                	addi	s0,sp,128
     78e:	2805                	jal	7be <ext_euclid+0x108>
     790:	0200                	addi	s0,sp,256
     792:	0304                	addi	s1,sp,384
     794:	0306                	slli	t1,t1,0x1
     796:	097f                	0x97f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     798:	0002                	c.slli64	zero
     79a:	0501                	addi	a0,a0,0
     79c:	0020                	addi	s0,sp,8
     79e:	0402                	c.slli64	s0
     7a0:	0301                	addi	t1,t1,0
     7a2:	0900                	addi	s0,sp,144
     7a4:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7a6:	0501                	addi	a0,a0,0
     7a8:	000d                	c.nop	3
     7aa:	0402                	c.slli64	s0
     7ac:	0601                	addi	a2,a2,0
     7ae:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7b2:	0100                	addi	s0,sp,128
     7b4:	2505                	jal	dd4 <ntru_deceypt+0x70>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7b6:	0200                	addi	s0,sp,256
     7b8:	0204                	addi	s1,sp,256
     7ba:	0306                	slli	t1,t1,0x1
     7bc:	097f                	0x97f
     7be:	0004                	0x4
     7c0:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7c2:	04020027          	0x4020027
     7c6:	0602                	c.slli64	a2
     7c8:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7cc:	0100                	addi	s0,sp,128
     7ce:	0d05                	addi	s10,s10,1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7d0:	0200                	addi	s0,sp,256
     7d2:	0304                	addi	s1,sp,384
     7d4:	0306                	slli	t1,t1,0x1
     7d6:	090a                	slli	s2,s2,0x2
     7d8:	0008                	0x8
     7da:	0501                	addi	a0,a0,0
     7dc:	0025                	c.nop	9
        for (i = 0; i < N + 1; ++i) {
     7de:	0402                	c.slli64	s0
     7e0:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     7e4:	0009                	c.nop	2
     7e6:	0100                	addi	s0,sp,128
     7e8:	2c05                	jal	a18 <generate_keys+0x7e>
     7ea:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7ec:	0304                	addi	s1,sp,384
     7ee:	02097f03          	0x2097f03
     7f2:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7f4:	2505                	jal	e14 <ntru_deceypt+0xb0>
     7f6:	0200                	addi	s0,sp,256
     7f8:	0304                	addi	s1,sp,384
     7fa:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     7fe:	0100                	addi	s0,sp,128
     800:	1805                	addi	a6,a6,-31
     802:	0200                	addi	s0,sp,256
    while (controlR != 0) {
     804:	0304                	addi	s1,sp,384
        for (j = 0; j < mod; ++j) {
     806:	04090003          	lb	zero,64(s2)
     80a:	0100                	addi	s0,sp,128
     80c:	2c05                	jal	a3c <generate_keys+0xa2>
     80e:	0200                	addi	s0,sp,256
     810:	0304                	addi	s1,sp,384
     812:	0306                	slli	t1,t1,0x1
     814:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     816:	0004                	0x4
     818:	0501                	addi	a0,a0,0
    }
     81a:	0014                	0x14
     81c:	0402                	c.slli64	s0
     81e:	0301                	addi	t1,t1,0
     820:	0900                	addi	s0,sp,144
     822:	0000                	unimp
     824:	0501                	addi	a0,a0,0
     826:	0009                	c.nop	2
     828:	0402                	c.slli64	s0
     82a:	0601                	addi	a2,a2,0
     82c:	00090003          	lb	zero,0(s2)
     830:	0100                	addi	s0,sp,128
     832:	1d05                	addi	s10,s10,-31
     834:	0200                	addi	s0,sp,256
     836:	0204                	addi	s1,sp,256
     838:	0306                	slli	t1,t1,0x1
     83a:	097f                	0x97f
     83c:	0004                	0x4
     83e:	0501                	addi	a0,a0,0
     840:	0103060f          	0x103060f
                ri_1[i] = ri_1[i] + mod;
     844:	0809                	addi	a6,a6,2
     846:	0100                	addi	s0,sp,128
            while (ri_1[i] < 0) {
     848:	0305                	addi	t1,t1,1
     84a:	0200                	addi	s0,sp,256
     84c:	0304                	addi	s1,sp,384
            ri_1[i] = ri_1[i] % mod;
     84e:	0306                	slli	t1,t1,0x1
     850:	0909                	addi	s2,s2,2
        for (i = 0; i < N + 1; ++i) {
     852:	0004                	0x4
     854:	0501                	addi	a0,a0,0
            ri_1[i] = ri_1[i] % mod;
     856:	001c                	0x1c
     858:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     85a:	097d0303          	lb	t1,151(s10)
            ri[i - (N + 1)] = res[i];
     85e:	0008                	0x8
     860:	0501                	addi	a0,a0,0
     862:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0402                	c.slli64	s0
     866:	090b0303          	lb	t1,144(s6)
            ri[i - (N + 1)] = res[i];
     86a:	0006                	c.slli	zero,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0501                	addi	a0,a0,0
            temp[i] = ri_2[i] - ri[i];
     86e:	0021                	c.nop	8
     870:	0402                	c.slli64	s0
     872:	00030603          	lb	a2,0(t1)
     876:	0009                	c.nop	2
     878:	0100                	addi	s0,sp,128
     87a:	2805                	jal	8aa <ext_euclid+0x1f4>
     87c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     87e:	0304                	addi	s1,sp,384
            temp[i] = ri_2[i] - ri[i];
     880:	02097f03          	0x2097f03
        for (i = 0; i < N + 1; ++i) {
     884:	0100                	addi	s0,sp,128
     886:	2105                	jal	ca6 <generate_keys+0x30c>
                temp[i] = temp[i] + mod;
     888:	0200                	addi	s0,sp,256
     88a:	0304                	addi	s1,sp,384
            while (temp[i] < 0) {
     88c:	04090103          	lb	sp,64(s2)
     890:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     892:	1405                	addi	s0,s0,-31
     894:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     896:	0304                	addi	s1,sp,384
     898:	04090003          	lb	zero,64(s2)
            temp[i] = temp[i] % mod;
     89c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     89e:	2805                	jal	8ce <ext_euclid+0x218>
            qi_1[i] = res1[i];
     8a0:	0200                	addi	s0,sp,256
     8a2:	0304                	addi	s1,sp,384
     8a4:	0306                	slli	t1,t1,0x1
     8a6:	097f                	0x97f
     8a8:	0004                	0x4
     8aa:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     8ac:	0346                	slli	t1,t1,0x11
            qi_1[i] = res1[i];
     8ae:	090a                	slli	s2,s2,0x2
        for (i = 0; i < N + 1; ++i) {
     8b0:	0002                	c.slli64	zero
                qi_1[i] = qi_1[i] + mod;
     8b2:	0501                	addi	a0,a0,0
     8b4:	0305                	addi	t1,t1,1
            while (qi_1[i] < 0) {
     8b6:	0902                	c.slli64	s2
     8b8:	0000                	unimp
     8ba:	0501                	addi	a0,a0,0
            qi_1[i] = qi_1[i] % mod;
     8bc:	0646                	slli	a2,a2,0x11
     8be:	00097e03          	0x97e03
        for (i = 0; i < N + 1; ++i) {
     8c2:	0100                	addi	s0,sp,128
            qi_1[i] = qi_1[i] % mod;
     8c4:	1d05                	addi	s10,s10,-31
     8c6:	06090203          	lb	tp,96(s2)
            temp[i] = res2[i];
     8ca:	0100                	addi	s0,sp,128
     8cc:	4605                	li	a2,1
     8ce:	08097e03          	0x8097e03
     8d2:	0100                	addi	s0,sp,128
     8d4:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     8d6:	04090203          	lb	tp,64(s2)
     8da:	0100                	addi	s0,sp,128
                temp[i] = temp[i] + mod;
     8dc:	4605                	li	a2,1
     8de:	0c097e03          	0xc097e03
            while (temp[i] < 0) {
     8e2:	0100                	addi	s0,sp,128
     8e4:	0c090003          	lb	zero,192(s2)
     8e8:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     8ea:	0905                	addi	s2,s2,1
     8ec:	02090503          	lb	a0,32(s2)
        for (i = 0; i < N + 1; ++i) {
     8f0:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     8f2:	04097d03          	0x4097d03
        for (i = 0; i < N + 1; ++i) {
     8f6:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     8f8:	08090303          	lb	t1,128(s2)
     8fc:	0100                	addi	s0,sp,128
     8fe:	08097d03          	0x8097d03
     902:	0100                	addi	s0,sp,128
     904:	02090303          	lb	t1,32(s2)
     908:	0100                	addi	s0,sp,128
     90a:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     90e:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     910:	06097f03          	0x6097f03
        for (i = 0; i < N + 1; ++i) {
     914:	0100                	addi	s0,sp,128
     916:	02090103          	lb	sp,32(s2)
                ti[i] = ti[i] + mod;
     91a:	0100                	addi	s0,sp,128
            while (ti[i] < 0) {
     91c:	04097c03          	0x4097c03
     920:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     922:	0505                	addi	a0,a0,1
     924:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     926:	0901                	addi	s2,s2,0
     928:	0002                	c.slli64	zero
            ti[i] = ti[i] % mod;
     92a:	0301                	addi	t1,t1,0
     92c:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     92e:	0000                	unimp
            ri_2[i] = ri_1[i];
     930:	0301                	addi	t1,t1,0
     932:	0901                	addi	s2,s2,0
     934:	0000                	unimp
     936:	0301                	addi	t1,t1,0
     938:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     93a:	0000                	unimp
            ri_2[i] = ri_1[i];
     93c:	0501                	addi	a0,a0,0
            ri_1[i] = ri[i];
     93e:	0609                	addi	a2,a2,2
     940:	00090003          	lb	zero,0(s2)
            ti_2[i] = ti_1[i];
     944:	0100                	addi	s0,sp,128
     946:	0505                	addi	a0,a0,1
     948:	0306                	slli	t1,t1,0x1
     94a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
            ri_1[i] = ri[i];
     94e:	0501                	addi	a0,a0,0
            ti_2[i] = ti_1[i];
     950:	060c                	addi	a1,sp,768
     952:	04090003          	lb	zero,64(s2)
     956:	0100                	addi	s0,sp,128
            controlR += ri[i];
     958:	1905                	addi	s2,s2,-31
            ti_2[i] = ti_1[i];
     95a:	02090303          	lb	t1,32(s2)
            ti_1[i] = ti[i];
     95e:	0100                	addi	s0,sp,128
     960:	1105                	addi	sp,sp,-31
     962:	0200                	addi	s0,sp,256
     964:	0104                	addi	s1,sp,128
              qi_1[i] = 0;
     966:	0306                	slli	t1,t1,0x1
     968:	097d                	addi	s2,s2,31
     96a:	0008                	0x8
     96c:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     96e:	0005                	c.nop	1
     970:	0402                	c.slli64	s0
            if (((ri_2[0] * j) % mod) == 1)
     972:	0601                	addi	a2,a2,0
     974:	00090003          	lb	zero,0(s2)
     978:	0100                	addi	s0,sp,128
     97a:	0b05                	addi	s6,s6,1
     97c:	04090703          	lb	a4,64(s2)
     980:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     982:	1005                	c.nop	-31
     984:	0200                	addi	s0,sp,256
            ti_2[i] = (ti_2[i] * j) % mod;
     986:	0104                	addi	s1,sp,128
        for (i = 0; i < N + 1; ++i) {
     988:	0306                	slli	t1,t1,0x1
     98a:	0900                	addi	s0,sp,144
            ti_2[i] = (ti_2[i] * j) % mod;
     98c:	0002                	c.slli64	zero
     98e:	0501                	addi	a0,a0,0
     990:	0005                	c.nop	1
     992:	0402                	c.slli64	s0
     994:	0601                	addi	a2,a2,0
     996:	00090003          	lb	zero,0(s2)
int* generate_keys(int N, int p, int q){
     99a:	0100                	addi	s0,sp,128
     99c:	0b05                	addi	s6,s6,1
     99e:	04090503          	lb	a0,64(s2)
     9a2:	0100                	addi	s0,sp,128
     9a4:	1005                	c.nop	-31
     9a6:	0200                	addi	s0,sp,256
     9a8:	0104                	addi	s1,sp,128
     9aa:	0306                	slli	t1,t1,0x1
     9ac:	0900                	addi	s0,sp,144
     9ae:	0002                	c.slli64	zero
     9b0:	0501                	addi	a0,a0,0
     9b2:	0005                	c.nop	1
     9b4:	0402                	c.slli64	s0
     9b6:	0601                	addi	a2,a2,0
     9b8:	00090003          	lb	zero,0(s2)
     9bc:	0100                	addi	s0,sp,128
     9be:	0306                	slli	t1,t1,0x1
     9c0:	0906                	slli	s2,s2,0x1
     9c2:	0004                	0x4
     9c4:	0501                	addi	a0,a0,0
     9c6:	00030607          	0x30607
     9ca:	0009                	c.nop	2
     9cc:	0100                	addi	s0,sp,128
     9ce:	1d05                	addi	s10,s10,-31
     9d0:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa0;
     9d2:	0104                	addi	s1,sp,128
     9d4:	0306                	slli	t1,t1,0x1
     9d6:	0908                	addi	a0,sp,144
     9d8:	0010                	0x10
int* generate_keys(int N, int p, int q){
     9da:	0501                	addi	a0,a0,0
     9dc:	0009                	c.nop	2
     9de:	0402                	c.slli64	s0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e0:	0601                	addi	a2,a2,0
     9e2:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xaaaaaaa0;
     9e6:	0100                	addi	s0,sp,128
     9e8:	1405                	addi	s0,s0,-31
     9ea:	04090103          	lb	sp,64(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ee:	0100                	addi	s0,sp,128
     9f0:	0d05                	addi	s10,s10,1
    resultkon[0] = 0xaaaaaaa0;
     9f2:	0200                	addi	s0,sp,256
     9f4:	0304                	addi	s1,sp,384
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9f6:	0306                	slli	t1,t1,0x1
     9f8:	00040967          	jalr	s2,s0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fc:	0501                	addi	a0,a0,0
     9fe:	0019                	c.nop	6
     a00:	0402                	c.slli64	s0
     a02:	01030603          	lb	a2,16(t1)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     a06:	0009                	c.nop	2
     a08:	0100                	addi	s0,sp,128
     a0a:	1805                	addi	a6,a6,-31
     a0c:	0200                	addi	s0,sp,256
     a0e:	0304                	addi	s1,sp,384
     a10:	06097f03          	0x6097f03
     a14:	0100                	addi	s0,sp,128
     a16:	0d05                	addi	s10,s10,1
     a18:	0200                	addi	s0,sp,256
     a1a:	0304                	addi	s1,sp,384
     a1c:	0306                	slli	t1,t1,0x1
     a1e:	0901                	addi	s2,s2,0
     a20:	0004                	0x4
     a22:	0501                	addi	a0,a0,0
     a24:	0019                	c.nop	6
     a26:	0402                	c.slli64	s0
     a28:	00030603          	lb	a2,0(t1)
     a2c:	0009                	c.nop	2
     a2e:	0100                	addi	s0,sp,128
     a30:	2c05                	jal	c60 <generate_keys+0x2c6>
     a32:	0200                	addi	s0,sp,256
     a34:	0304                	addi	s1,sp,384
     a36:	0306                	slli	t1,t1,0x1
     a38:	097e                	slli	s2,s2,0x1f
     a3a:	0004                	0x4
     a3c:	0501                	addi	a0,a0,0
     a3e:	0014                	0x14
     a40:	0402                	c.slli64	s0
     a42:	0301                	addi	t1,t1,0
     a44:	0900                	addi	s0,sp,144
     a46:	0004                	0x4
     a48:	0501                	addi	a0,a0,0
     a4a:	0009                	c.nop	2
     a4c:	0402                	c.slli64	s0
     a4e:	0601                	addi	a2,a2,0
     a50:	00090003          	lb	zero,0(s2)
     a54:	0100                	addi	s0,sp,128
     a56:	1d05                	addi	s10,s10,-31
     a58:	0200                	addi	s0,sp,256
     a5a:	0204                	addi	s1,sp,256
     a5c:	0306                	slli	t1,t1,0x1
     a5e:	097f                	0x97f
     a60:	0004                	0x4
     a62:	0501                	addi	a0,a0,0
     a64:	0103060f          	0x103060f
     a68:	0809                	addi	a6,a6,2
     a6a:	0100                	addi	s0,sp,128
     a6c:	0905                	addi	s2,s2,1
     a6e:	0200                	addi	s0,sp,256
     a70:	0304                	addi	s1,sp,384
    int polyR[N+1];
     a72:	0306                	slli	t1,t1,0x1
     a74:	00040907          	0x40907
     a78:	0501                	addi	a0,a0,0
     a7a:	0011                	c.nop	4
     a7c:	0402                	c.slli64	s0
     a7e:	00030603          	lb	a2,0(t1)
     a82:	0409                	addi	s0,s0,2
     a84:	0100                	addi	s0,sp,128
    polyR[N] = 1;
     a86:	1405                	addi	s0,s0,-31
     a88:	0200                	addi	s0,sp,256
     a8a:	0304                	addi	s1,sp,384
     a8c:	04090003          	lb	zero,64(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a90:	0100                	addi	s0,sp,128
     a92:	1105                	addi	sp,sp,-31
     a94:	0200                	addi	s0,sp,256
     a96:	0304                	addi	s1,sp,384
     a98:	02090003          	lb	zero,32(s2)
     a9c:	0100                	addi	s0,sp,128
     a9e:	1c05                	addi	s8,s8,-31
     aa0:	0200                	addi	s0,sp,256
     aa2:	0304                	addi	s1,sp,384
     aa4:	04097f03          	0x4097f03
     aa8:	0100                	addi	s0,sp,128
     aaa:	1105                	addi	sp,sp,-31
     aac:	0200                	addi	s0,sp,256
     aae:	0304                	addi	s1,sp,384
     ab0:	02090103          	lb	sp,32(s2)
     ab4:	0100                	addi	s0,sp,128
     ab6:	1c05                	addi	s8,s8,-31
     ab8:	0200                	addi	s0,sp,256
     aba:	0304                	addi	s1,sp,384
     abc:	0306                	slli	t1,t1,0x1
     abe:	097f                	0x97f
     ac0:	0004                	0x4
     ac2:	0501                	addi	a0,a0,0
     ac4:	0009                	c.nop	2
     ac6:	0402                	c.slli64	s0
     ac8:	09060303          	lb	t1,144(a2)
     acc:	0002                	c.slli64	zero
     ace:	0501                	addi	a0,a0,0
     ad0:	0011                	c.nop	4
     ad2:	0402                	c.slli64	s0
     ad4:	00030603          	lb	a2,0(t1)
     ad8:	0409                	addi	s0,s0,2
     ada:	0100                	addi	s0,sp,128
     adc:	1405                	addi	s0,s0,-31
     ade:	0200                	addi	s0,sp,256
     ae0:	0304                	addi	s1,sp,384
     ae2:	04090003          	lb	zero,64(s2)
     ae6:	0100                	addi	s0,sp,128
     ae8:	1105                	addi	sp,sp,-31
     aea:	0200                	addi	s0,sp,256
     aec:	0304                	addi	s1,sp,384
     aee:	02090003          	lb	zero,32(s2)
     af2:	0100                	addi	s0,sp,128
    polyR[0] = -1;
     af4:	1c05                	addi	s8,s8,-31
     af6:	0200                	addi	s0,sp,256
    for(i = 1; i < N; ++i){
     af8:	0304                	addi	s1,sp,384
     afa:	04097f03          	0x4097f03
     afe:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     b00:	1105                	addi	sp,sp,-31
     b02:	0200                	addi	s0,sp,256
     b04:	0304                	addi	s1,sp,384
     b06:	02090103          	lb	sp,32(s2)
        random_keys[i] = f[i];
     b0a:	0100                	addi	s0,sp,128
     b0c:	1c05                	addi	s8,s8,-31
     b0e:	0200                	addi	s0,sp,256
     b10:	0304                	addi	s1,sp,384
    for(i = 0; i < N; ++i){
     b12:	0306                	slli	t1,t1,0x1
     b14:	097f                	0x97f
     b16:	0004                	0x4
     b18:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     b1a:	0011                	c.nop	4
     b1c:	0402                	c.slli64	s0
     b1e:	09090303          	lb	t1,144(s2)
        random_keys[i] = g[i-N];
     b22:	0002                	c.slli64	zero
     b24:	0501                	addi	a0,a0,0
     b26:	0025                	c.nop	9
     b28:	0402                	c.slli64	s0
    for(i = N; i < (2*N); ++i){
     b2a:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < (3*N); ++i){
     b2e:	0409                	addi	s0,s0,2
     b30:	0100                	addi	s0,sp,128
     b32:	2b05                	jal	1062 <main+0x16>
    fp = ext_euclid(polyR, f, (N+1), p);
     b34:	0200                	addi	s0,sp,256
     b36:	0304                	addi	s1,sp,384
     b38:	04090003          	lb	zero,64(s2)
     b3c:	0100                	addi	s0,sp,128
     b3e:	2e05                	jal	e6e <reset_handler+0x1a>
    for(i = (2*N); i < (3*N); ++i){
     b40:	0200                	addi	s0,sp,256
        random_keys[i] = fp[i-(2*N)];
     b42:	0304                	addi	s1,sp,384
     b44:	02090003          	lb	zero,32(s2)
     b48:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     b4a:	2a05                	jal	c7a <generate_keys+0x2e0>
     b4c:	0200                	addi	s0,sp,256
    fq = ext_euclid(polyR, f, (N+1), q);
     b4e:	0304                	addi	s1,sp,384
     b50:	06097f03          	0x6097f03
     b54:	0100                	addi	s0,sp,128
     b56:	2e05                	jal	e86 <reset_handler+0x32>
     b58:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     b5a:	0304                	addi	s1,sp,384
     b5c:	02090103          	lb	sp,32(s2)
     b60:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     b62:	2505                	jal	1182 <__DTOR_END__+0x2e>
     b64:	0200                	addi	s0,sp,256
     b66:	0304                	addi	s1,sp,384
     b68:	04090003          	lb	zero,64(s2)
    for(i = (3*N); i < (4*N); ++i){
     b6c:	0100                	addi	s0,sp,128
    fg = polymult2(fq, N, g, N, 0);
     b6e:	2805                	jal	b9e <generate_keys+0x204>
     b70:	0200                	addi	s0,sp,256
     b72:	0304                	addi	s1,sp,384
     b74:	0306                	slli	t1,t1,0x1
     b76:	097f                	0x97f
     b78:	0002                	c.slli64	zero
    for(i = 0; i < (2*N-1); ++i){
     b7a:	0501                	addi	a0,a0,0
     b7c:	0020                	addi	s0,sp,8
     b7e:	0402                	c.slli64	s0
     b80:	0301                	addi	t1,t1,0
     b82:	0900                	addi	s0,sp,144
     b84:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b86:	0501                	addi	a0,a0,0
     b88:	000d                	c.nop	3
     b8a:	0402                	c.slli64	s0
     b8c:	0601                	addi	a2,a2,0
    for(i = (4*N); i < (5*N); ++i){
     b8e:	00090003          	lb	zero,0(s2)
     b92:	0100                	addi	s0,sp,128
     b94:	2505                	jal	11b4 <__DTOR_END__+0x60>
     b96:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b98:	0204                	addi	s1,sp,256
     b9a:	0306                	slli	t1,t1,0x1
     b9c:	097f                	0x97f
     b9e:	0004                	0x4
    for(i = (4*N); i < (5*N); ++i){
     ba0:	0501                	addi	a0,a0,0
     ba2:	04020027          	0x4020027
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	0602                	c.slli64	a2
     ba8:	00090003          	lb	zero,0(s2)
        random_keys[i] = polyR[i-(5*N)];
     bac:	0100                	addi	s0,sp,128
     bae:	1d05                	addi	s10,s10,-31
     bb0:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     bb2:	0104                	addi	s1,sp,128
     bb4:	0306                	slli	t1,t1,0x1
     bb6:	0900                	addi	s0,sp,144
     bb8:	0006                	c.slli	zero,0x1
     bba:	0501                	addi	a0,a0,0
     bbc:	0009                	c.nop	2
    resultkon[0] = 0xaaaaaaa1;
     bbe:	0402                	c.slli64	s0
     bc0:	0601                	addi	a2,a2,0
     bc2:	00090003          	lb	zero,0(s2)
     bc6:	0100                	addi	s0,sp,128
     bc8:	1405                	addi	s0,s0,-31
}
     bca:	04090803          	lb	a6,64(s2)
     bce:	0100                	addi	s0,sp,128
     bd0:	0905                	addi	s2,s2,1
     bd2:	02090a03          	lb	s4,32(s2)
     bd6:	0100                	addi	s0,sp,128
     bd8:	0d05                	addi	s10,s10,1
     bda:	0200                	addi	s0,sp,256
     bdc:	0104                	addi	s1,sp,128
     bde:	0306                	slli	t1,t1,0x1
     be0:	097d                	addi	s2,s2,31
     be2:	0008                	0x8
     be4:	0501                	addi	a0,a0,0
     be6:	0005                	c.nop	1
     be8:	0402                	c.slli64	s0
     bea:	0601                	addi	a2,a2,0
     bec:	00090003          	lb	zero,0(s2)
     bf0:	0100                	addi	s0,sp,128
     bf2:	0306                	slli	t1,t1,0x1
     bf4:	00040907          	0x40907
     bf8:	0301                	addi	t1,t1,0
     bfa:	0902                	c.slli64	s2
     bfc:	0000                	unimp
     bfe:	0501                	addi	a0,a0,0
     c00:	0601                	addi	a2,a2,0
     c02:	00090103          	lb	sp,0(s2)
     c06:	0100                	addi	s0,sp,128
     c08:	1405                	addi	s0,s0,-31
     c0a:	20096803          	0x20096803
     c0e:	0100                	addi	s0,sp,128
        polyR[i] = 0;
     c10:	1105                	addi	sp,sp,-31
     c12:	0200                	addi	s0,sp,256
     c14:	0304                	addi	s1,sp,384
     c16:	0306                	slli	t1,t1,0x1
     c18:	0908                	addi	a0,sp,144
    for(i = 1; i < N; ++i){
     c1a:	0004                	0x4
     c1c:	0501                	addi	a0,a0,0
        f[i] = 0;
     c1e:	0029                	c.nop	10
     c20:	0402                	c.slli64	s0
     c22:	00030603          	lb	a2,0(t1)
     c26:	0409                	addi	s0,s0,2
     c28:	0100                	addi	s0,sp,128
     c2a:	2f05                	jal	135a <_bss_start+0x82>
        g[i] = 0;
     c2c:	0200                	addi	s0,sp,256
     c2e:	0304                	addi	s1,sp,384
     c30:	04090003          	lb	zero,64(s2)
     c34:	0100                	addi	s0,sp,128
    for (i = N; i < 55; ++i ){
     c36:	3205                	jal	556 <polydiv+0xf0>
     c38:	0200                	addi	s0,sp,256
        random_keys[i] = f[i];
     c3a:	0304                	addi	s1,sp,384
     c3c:	02090003          	lb	zero,32(s2)
     c40:	0100                	addi	s0,sp,128
     c42:	2a05                	jal	d72 <ntru_deceypt+0xe>
     c44:	0200                	addi	s0,sp,256
     c46:	0304                	addi	s1,sp,384
     c48:	06097f03          	0x6097f03
     c4c:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     c4e:	3205                	jal	56e <polydiv+0x108>
        random_keys[i] = g[i-N];
     c50:	0200                	addi	s0,sp,256
     c52:	0304                	addi	s1,sp,384
     c54:	02090103          	lb	sp,32(s2)
     c58:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     c5a:	2905                	jal	108a <main+0x3e>
     c5c:	0200                	addi	s0,sp,256
     c5e:	0304                	addi	s1,sp,384
        random_keys[i] = fp[i-(2*N)];
     c60:	04090003          	lb	zero,64(s2)
     c64:	0100                	addi	s0,sp,128
     c66:	2805                	jal	c96 <generate_keys+0x2fc>
     c68:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     c6a:	0304                	addi	s1,sp,384
     c6c:	0306                	slli	t1,t1,0x1
     c6e:	097f                	0x97f
        random_keys[i] = fq[i-(3*N)];
     c70:	0004                	0x4
     c72:	0501                	addi	a0,a0,0
     c74:	0020                	addi	s0,sp,8
     c76:	0402                	c.slli64	s0
     c78:	0301                	addi	t1,t1,0
     c7a:	0900                	addi	s0,sp,144
     c7c:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     c7e:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     c80:	000d                	c.nop	3
    for(i = (3*N); i < (4*N); ++i){
     c82:	0402                	c.slli64	s0
        fg[i] = fg[i]*p;
     c84:	0601                	addi	a2,a2,0
    for(i = 0; i < (2*N-1); ++i){
     c86:	00090003          	lb	zero,0(s2)
        fg[i] = fg[i]*p;
     c8a:	0100                	addi	s0,sp,128
     c8c:	2505                	jal	12ac <__DTOR_END__+0x158>
     c8e:	0200                	addi	s0,sp,256
     c90:	0204                	addi	s1,sp,256
    for(i = 0; i < (2*N-1); ++i){
     c92:	0306                	slli	t1,t1,0x1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c94:	097f                	0x97f
     c96:	0004                	0x4
     c98:	0501                	addi	a0,a0,0
     c9a:	04020027          	0x4020027
     c9e:	0602                	c.slli64	a2
    for(i = (4*N); i < (5*N); ++i){
     ca0:	00090003          	lb	zero,0(s2)
        random_keys[i] = polyR[i-(5*N)];
     ca4:	0100                	addi	s0,sp,128
     ca6:	0905                	addi	s2,s2,1
     ca8:	0200                	addi	s0,sp,256
     caa:	0304                	addi	s1,sp,384
     cac:	0306                	slli	t1,t1,0x1
     cae:	0008090b          	0x8090b
    for(i = (5*N); i < (6*N+1); ++i){
     cb2:	0501                	addi	a0,a0,0
        random_keys[i] = polyR[i-(5*N)];
     cb4:	0016                	c.slli	zero,0x5
    for(i = (5*N); i < (6*N+1); ++i){
     cb6:	0402                	c.slli64	s0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	097d0303          	lb	t1,151(s10)
    resultkon[0] = 0xbbbbbbb0;
     cbc:	0008                	0x8
     cbe:	0501                	addi	a0,a0,0
     cc0:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cc4:	0006                	c.slli	zero,0x1
     cc6:	0501                	addi	a0,a0,0
     cc8:	0305                	addi	t1,t1,1
     cca:	0902                	c.slli64	s2
     ccc:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cce:	0301                	addi	t1,t1,0
     cd0:	0901                	addi	s2,s2,0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cd2:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     cd4:	0301                	addi	t1,t1,0
     cd6:	0902                	c.slli64	s2
     cd8:	0000                	unimp
     cda:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cdc:	0609                	addi	a2,a2,2
     cde:	00090003          	lb	zero,0(s2)
     ce2:	0100                	addi	s0,sp,128
     ce4:	4305                	li	t1,1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ce6:	04097b03          	0x4097b03
     cea:	0100                	addi	s0,sp,128
     cec:	0905                	addi	s2,s2,1
     cee:	02090503          	lb	a0,32(s2)
    resultkon[0] = 0xbbbbbbb0;
     cf2:	0100                	addi	s0,sp,128
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cf4:	4305                	li	t1,1
    temp = polymult(public_key,N,random_val,48,q,0);
     cf6:	04097b03          	0x4097b03
     cfa:	0100                	addi	s0,sp,128
     cfc:	0905                	addi	s2,s2,1
     cfe:	1c090503          	lb	a0,448(s2)
     d02:	0100                	addi	s0,sp,128
     d04:	06090103          	lb	sp,96(s2)
array_add(temp,message,48);
     d08:	0100                	addi	s0,sp,128
     d0a:	06090203          	lb	tp,96(s2)
    temp = polymult(public_key,N,random_val,48,q,0);
     d0e:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d10:	04090103          	lb	sp,64(s2)
array_add(temp,message,48);
     d14:	0100                	addi	s0,sp,128
     d16:	08097f03          	0x8097f03
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d1a:	0100                	addi	s0,sp,128
     d1c:	02090103          	lb	sp,32(s2)
     d20:	0100                	addi	s0,sp,128
     d22:	4305                	li	t1,1
     d24:	04097703          	0x4097703
    for(i = (2*N); i < (3*N); ++i){
     d28:	0100                	addi	s0,sp,128
     d2a:	0905                	addi	s2,s2,1
     d2c:	04090903          	lb	s2,64(s2)
     d30:	0100                	addi	s0,sp,128
     d32:	4305                	li	t1,1
}
     d34:	04097703          	0x4097703
    resultkon[0] = 0xbbbbbbb1;
     d38:	0100                	addi	s0,sp,128
     d3a:	0905                	addi	s2,s2,1
     d3c:	02090503          	lb	a0,32(s2)
     d40:	0100                	addi	s0,sp,128
     d42:	0505                	addi	a0,a0,1
}
     d44:	0306                	slli	t1,t1,0x1
     d46:	0901                	addi	s2,s2,0
     d48:	0004                	0x4
     d4a:	0301                	addi	t1,t1,0
     d4c:	0901                	addi	s2,s2,0
     d4e:	0000                	unimp
     d50:	0301                	addi	t1,t1,0
        CT[i-(2*N)] = CT[i];
     d52:	0901                	addi	s2,s2,0
     d54:	0000                	unimp
     d56:	0301                	addi	t1,t1,0
     d58:	0901                	addi	s2,s2,0
    for(i = (2*N); i < (3*N); ++i){
     d5a:	0000                	unimp
     d5c:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     d5e:	0609                	addi	a2,a2,2
     d60:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d64:	0100                	addi	s0,sp,128
     d66:	0505                	addi	a0,a0,1
     d68:	0306                	slli	t1,t1,0x1
     d6a:	0904                	addi	s1,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	0002                	c.slli64	zero
     d6e:	0501                	addi	a0,a0,0
     d70:	060c                	addi	a1,sp,768
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d72:	04090003          	lb	zero,64(s2)
 resultkon[0] = 0xccccccc0;
     d76:	0100                	addi	s0,sp,128
     d78:	1105                	addi	sp,sp,-31
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7a:	0200                	addi	s0,sp,256
 resultkon[0] = 0xccccccc0;
     d7c:	0104                	addi	s1,sp,128
     d7e:	0306                	slli	t1,t1,0x1
     d80:	0900                	addi	s0,sp,144
     d82:	0002                	c.slli64	zero
     d84:	0501                	addi	a0,a0,0
     d86:	0005                	c.nop	1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d88:	0402                	c.slli64	s0
     d8a:	0601                	addi	a2,a2,0
     d8c:	00090003          	lb	zero,0(s2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d90:	0100                	addi	s0,sp,128
 resultkon[0] = 0xccccccc0;
     d92:	0c05                	addi	s8,s8,1
     d94:	06090a03          	lb	s4,96(s2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d98:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9a:	1105                	addi	sp,sp,-31
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9c:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	0104                	addi	s1,sp,128
     da0:	0306                	slli	t1,t1,0x1
     da2:	0900                	addi	s0,sp,144
     da4:	0002                	c.slli64	zero
     da6:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     da8:	0005                	c.nop	1
     daa:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     dac:	0601                	addi	a2,a2,0
     dae:	00090003          	lb	zero,0(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db2:	0100                	addi	s0,sp,128
     db4:	0c05                	addi	s8,s8,1
     db6:	04090903          	lb	s2,64(s2)
     dba:	0100                	addi	s0,sp,128
     dbc:	1105                	addi	sp,sp,-31
     dbe:	0200                	addi	s0,sp,256
     dc0:	0104                	addi	s1,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc2:	0306                	slli	t1,t1,0x1
     dc4:	0900                	addi	s0,sp,144
     dc6:	0002                	c.slli64	zero
     dc8:	0501                	addi	a0,a0,0
     dca:	0005                	c.nop	1
        if(a2[i] <= q/2)
     dcc:	0402                	c.slli64	s0
     dce:	0601                	addi	a2,a2,0
     dd0:	00090003          	lb	zero,0(s2)
    for (i = 0; i < N; ++i){
     dd4:	0100                	addi	s0,sp,128
     dd6:	1805                	addi	a6,a6,-31
    c = polymult2(secret_key_fp,N,a2,N,0);
     dd8:	0200                	addi	s0,sp,256
     dda:	0104                	addi	s1,sp,128
     ddc:	0306                	slli	t1,t1,0x1
     dde:	0906                	slli	s2,s2,0x1
     de0:	0004                	0x4
     de2:	0501                	addi	a0,a0,0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de4:	0005                	c.nop	1
     de6:	0402                	c.slli64	s0
     de8:	0601                	addi	a2,a2,0
     dea:	08090003          	lb	zero,128(s2)
     dee:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     df0:	0c05                	addi	s8,s8,1
     df2:	0200                	addi	s0,sp,256
     df4:	0104                	addi	s1,sp,128
}
     df6:	04097a03          	0x4097a03
    resultkon[0] = 0xccccccc1;	
     dfa:	0100                	addi	s0,sp,128
     dfc:	0200                	addi	s0,sp,256
     dfe:	0104                	addi	s1,sp,128
     e00:	04090f03          	lb	t5,64(s2)
     e04:	0100                	addi	s0,sp,128
}
     e06:	1105                	addi	sp,sp,-31
     e08:	0200                	addi	s0,sp,256
     e0a:	0104                	addi	s1,sp,128
     e0c:	0306                	slli	t1,t1,0x1
     e0e:	097f                	0x97f
     e10:	0002                	c.slli64	zero
     e12:	0501                	addi	a0,a0,0
     e14:	0005                	c.nop	1
     e16:	0402                	c.slli64	s0
     e18:	0601                	addi	a2,a2,0
        a2[i-(2*N)] = a2[i];
     e1a:	00090003          	lb	zero,0(s2)
     e1e:	0100                	addi	s0,sp,128
     e20:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     e22:	0306                	slli	t1,t1,0x1
     e24:	0960                	addi	s0,sp,156
        a2[i-(2*N)] = a2[i];
     e26:	0008                	0x8
     e28:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2a:	061a                	slli	a2,a2,0x6
        if(a2[i] <= q/2)
     e2c:	00090003          	lb	zero,0(s2)
     e30:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     e32:	1505                	addi	a0,a0,-31
     e34:	06090003          	lb	zero,96(s2)
    for (i = 0; i < N; ++i){
     e38:	0100                	addi	s0,sp,128
     e3a:	1905                	addi	s2,s2,-31
     e3c:	02090203          	lb	tp,32(s2)
        c2[i-(2*N)] = c2[i];
     e40:	0100                	addi	s0,sp,128
     e42:	0f05                	addi	t5,t5,1
     e44:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     e46:	097f                	0x97f
     e48:	0002                	c.slli64	zero
        c2[i-(2*N)] = c2[i];
     e4a:	0501                	addi	a0,a0,0
     e4c:	0618                	addi	a4,sp,768
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4e:	00090003          	lb	zero,0(s2)
  jal x0, default_exc_handler
     e52:	0100                	addi	s0,sp,128
  mv  x1, x0
     e54:	0f05                	addi	t5,t5,1
     e56:	02090003          	lb	zero,32(s2)
  mv  x3, x1
     e5a:	0100                	addi	s0,sp,128
  mv  x4, x1
     e5c:	0905                	addi	s2,s2,1
  mv  x5, x1
     e5e:	0200                	addi	s0,sp,256
  mv  x6, x1
     e60:	0204                	addi	s1,sp,256
  mv  x7, x1
     e62:	0306                	slli	t1,t1,0x1
  mv  x8, x1
     e64:	00040903          	lb	s2,0(s0)
  mv x10, x1
     e68:	0501                	addi	a0,a0,0
  mv x11, x1
     e6a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
  mv x13, x1
     e6e:	0602                	c.slli64	a2
  mv x14, x1
     e70:	00090003          	lb	zero,0(s2)
  mv x16, x1
     e74:	0100                	addi	s0,sp,128
  mv x17, x1
     e76:	1d05                	addi	s10,s10,-31
  mv x18, x1
     e78:	0200                	addi	s0,sp,256
  mv x19, x1
     e7a:	0204                	addi	s1,sp,256
  mv x20, x1
     e7c:	04097b03          	0x4097b03
  mv x22, x1
     e80:	0100                	addi	s0,sp,128
  mv x23, x1
     e82:	1505                	addi	a0,a0,-31
  mv x24, x1
     e84:	0200                	addi	s0,sp,256
  mv x25, x1
     e86:	0204                	addi	s1,sp,256
  mv x26, x1
     e88:	04090503          	lb	a0,64(s2)
  mv x28, x1
     e8c:	0100                	addi	s0,sp,128
  mv x29, x1
     e8e:	1d05                	addi	s10,s10,-31
  mv x30, x1
     e90:	0200                	addi	s0,sp,256
  mv x31, x1
     e92:	0204                	addi	s1,sp,256
  la   x2, _stack_start
     e94:	0306                	slli	t1,t1,0x1
     e96:	0004097b          	0x4097b
     e9a:	0501                	addi	a0,a0,0
  la x26, _bss_start
     e9c:	030d                	addi	t1,t1,3
     e9e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     ea2:	0501                	addi	a0,a0,0
  la x27, _bss_end
     ea4:	00030627          	0x30627
     ea8:	0009                	c.nop	2
     eaa:	0100                	addi	s0,sp,128
  bge x26, x27, zero_loop_end
     eac:	0905                	addi	s2,s2,1
     eae:	0306                	slli	t1,t1,0x1
  sw x0, 0(x26)
     eb0:	0908                	addi	a0,sp,144
     eb2:	0004                	0x4
  addi x26, x26, 4
     eb4:	0501                	addi	a0,a0,0
  ble x26, x27, zero_loop
     eb6:	061e                	slli	a2,a2,0x7
     eb8:	00090003          	lb	zero,0(s2)
  addi x10, x0, 0
     ebc:	0100                	addi	s0,sp,128
  addi x11, x0, 0
     ebe:	1705                	addi	a4,a4,-31
     ec0:	06090003          	lb	zero,96(s2)
  jal x1, main
     ec4:	0100                	addi	s0,sp,128
     ec6:	1b05                	addi	s6,s6,-31
     ec8:	02090203          	lb	tp,32(s2)
     ecc:	0100                	addi	s0,sp,128
     ece:	0f05                	addi	t5,t5,1
     ed0:	0306                	slli	t1,t1,0x1
     ed2:	097f                	0x97f
     ed4:	0002                	c.slli64	zero
     ed6:	0501                	addi	a0,a0,0
     ed8:	061a                	slli	a2,a2,0x6
     eda:	00090003          	lb	zero,0(s2)
     ede:	0100                	addi	s0,sp,128
     ee0:	0f05                	addi	t5,t5,1
     ee2:	02090003          	lb	zero,32(s2)
     ee6:	0100                	addi	s0,sp,128
     ee8:	0905                	addi	s2,s2,1
     eea:	0200                	addi	s0,sp,256
     eec:	0204                	addi	s1,sp,256
     eee:	0306                	slli	t1,t1,0x1
     ef0:	00040903          	lb	s2,0(s0)
     ef4:	0501                	addi	a0,a0,0
     ef6:	04020027          	0x4020027
     efa:	0602                	c.slli64	a2
     efc:	00090003          	lb	zero,0(s2)
     f00:	0100                	addi	s0,sp,128
     f02:	1d05                	addi	s10,s10,-31
     f04:	0200                	addi	s0,sp,256
     f06:	0204                	addi	s1,sp,256
     f08:	04097b03          	0x4097b03
     f0c:	0100                	addi	s0,sp,128
     f0e:	1705                	addi	a4,a4,-31
     f10:	0200                	addi	s0,sp,256
     f12:	0204                	addi	s1,sp,256
     f14:	04090503          	lb	a0,64(s2)
     f18:	0100                	addi	s0,sp,128
     f1a:	1d05                	addi	s10,s10,-31
     f1c:	0200                	addi	s0,sp,256
     f1e:	0204                	addi	s1,sp,256
     f20:	0306                	slli	t1,t1,0x1
     f22:	0004097b          	0x4097b
     f26:	0501                	addi	a0,a0,0
     f28:	030d                	addi	t1,t1,3
     f2a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     f2e:	0501                	addi	a0,a0,0
     f30:	0003062b          	0x3062b
     f34:	0009                	c.nop	2
     f36:	0100                	addi	s0,sp,128
     f38:	0905                	addi	s2,s2,1
     f3a:	0200                	addi	s0,sp,256
     f3c:	0304                	addi	s1,sp,384
     f3e:	0306                	slli	t1,t1,0x1
     f40:	00040907          	0x40907
     f44:	0501                	addi	a0,a0,0
     f46:	000e                	c.slli	zero,0x3
     f48:	0402                	c.slli64	s0
     f4a:	00030603          	lb	a2,0(t1)
     f4e:	0409                	addi	s0,s0,2
     f50:	0100                	addi	s0,sp,128
     f52:	0200                	addi	s0,sp,256
     f54:	0304                	addi	s1,sp,384
     f56:	04090103          	lb	sp,64(s2)
     f5a:	0100                	addi	s0,sp,128
     f5c:	0200                	addi	s0,sp,256
     f5e:	0304                	addi	s1,sp,384
     f60:	02097f03          	0x2097f03
     f64:	0100                	addi	s0,sp,128
     f66:	0905                	addi	s2,s2,1
     f68:	0200                	addi	s0,sp,256
     f6a:	0304                	addi	s1,sp,384
     f6c:	0306                	slli	t1,t1,0x1
     f6e:	0901                	addi	s2,s2,0
     f70:	0004                	0x4
     f72:	0501                	addi	a0,a0,0
     f74:	000e                	c.slli	zero,0x3
     f76:	0402                	c.slli64	s0
     f78:	00030603          	lb	a2,0(t1)
     f7c:	0009                	c.nop	2
     f7e:	0100                	addi	s0,sp,128
     f80:	1d05                	addi	s10,s10,-31
     f82:	0200                	addi	s0,sp,256
     f84:	0304                	addi	s1,sp,384
     f86:	0306                	slli	t1,t1,0x1
     f88:	097e                	slli	s2,s2,0x1f
     f8a:	0004                	0x4
     f8c:	0501                	addi	a0,a0,0
     f8e:	0309                	addi	t1,t1,2
     f90:	00040907          	0x40907
     f94:	0501                	addi	a0,a0,0
     f96:	0003060b          	0x3060b
     f9a:	0009                	c.nop	2
     f9c:	0100                	addi	s0,sp,128
     f9e:	2005                	jal	fbe <memset+0x1a>
     fa0:	0200                	addi	s0,sp,256
     fa2:	0204                	addi	s1,sp,256
     fa4:	0306                	slli	t1,t1,0x1
     fa6:	097f                	0x97f
     fa8:	0002                	c.slli64	zero
     faa:	0501                	addi	a0,a0,0
     fac:	0022                	c.slli	zero,0x8
     fae:	0402                	c.slli64	s0
     fb0:	0602                	c.slli64	a2
     fb2:	00090003          	lb	zero,0(s2)
     fb6:	0100                	addi	s0,sp,128
     fb8:	0905                	addi	s2,s2,1
     fba:	0306                	slli	t1,t1,0x1
     fbc:	0909                	addi	s2,s2,2
     fbe:	0004                	0x4
     fc0:	0501                	addi	a0,a0,0
     fc2:	0615                	addi	a2,a2,5
     fc4:	00090003          	lb	zero,0(s2)
     fc8:	0100                	addi	s0,sp,128
     fca:	0c05                	addi	s8,s8,1
     fcc:	06090003          	lb	zero,96(s2)
     fd0:	0100                	addi	s0,sp,128
     fd2:	1a05                	addi	s4,s4,-31
     fd4:	0200                	addi	s0,sp,256
     fd6:	0204                	addi	s1,sp,256
     fd8:	0306                	slli	t1,t1,0x1
     fda:	097f                	0x97f
     fdc:	0004                	0x4
     fde:	0501                	addi	a0,a0,0
     fe0:	0309                	addi	t1,t1,2
     fe2:	00040907          	0x40907
     fe6:	0501                	addi	a0,a0,0
     fe8:	0003060b          	0x3060b
     fec:	0009                	c.nop	2
     fee:	0100                	addi	s0,sp,128
     ff0:	2005                	jal	1010 <memset+0x6c>
     ff2:	0200                	addi	s0,sp,256
     ff4:	0204                	addi	s1,sp,256
     ff6:	0306                	slli	t1,t1,0x1
     ff8:	097f                	0x97f
     ffa:	0002                	c.slli64	zero
     ffc:	0501                	addi	a0,a0,0
     ffe:	0022                	c.slli	zero,0x8
    1000:	0402                	c.slli64	s0
    1002:	0602                	c.slli64	a2
    1004:	00090003          	lb	zero,0(s2)
    1008:	0100                	addi	s0,sp,128
    100a:	1805                	addi	a6,a6,-31
    100c:	0200                	addi	s0,sp,256
    100e:	0104                	addi	s1,sp,128
    1010:	0306                	slli	t1,t1,0x1
    1012:	0900                	addi	s0,sp,144
    1014:	0002                	c.slli64	zero
    1016:	0501                	addi	a0,a0,0
    1018:	0005                	c.nop	1
    101a:	0402                	c.slli64	s0
    101c:	0601                	addi	a2,a2,0
    101e:	08090003          	lb	zero,128(s2)
    1022:	0100                	addi	s0,sp,128
    1024:	0b05                	addi	s6,s6,1
    1026:	0306                	slli	t1,t1,0x1
    1028:	090c                	addi	a1,sp,144
    102a:	0004                	0x4
    102c:	0601                	addi	a2,a2,0
    102e:	04093e03          	0x4093e03
    1032:	0100                	addi	s0,sp,128
    1034:	1305                	addi	t1,t1,-31
    1036:	02090103          	lb	sp,32(s2)
    103a:	0100                	addi	s0,sp,128
    103c:	1005                	c.nop	-31
    103e:	0200                	addi	s0,sp,256
    1040:	0104                	addi	s1,sp,128
    1042:	0306                	slli	t1,t1,0x1
    1044:	097f                	0x97f
    1046:	0008                	0x8
    1048:	0501                	addi	a0,a0,0
    104a:	0005                	c.nop	1
int main(){
    104c:	0402                	c.slli64	s0
    104e:	0601                	addi	a2,a2,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1050:	00090003          	lb	zero,0(s2)
    1054:	0100                	addi	s0,sp,128
    1056:	1b05                	addi	s6,s6,-31
    1058:	04090403          	lb	s0,64(s2)
    105c:	0100                	addi	s0,sp,128
int main(){
    105e:	1305                	addi	t1,t1,-31
    1060:	04090103          	lb	sp,64(s2)
    1064:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1066:	1505                	addi	a0,a0,-31
    keys = generate_keys(N, p, q);
    1068:	0200                	addi	s0,sp,256
    106a:	0104                	addi	s1,sp,128
    106c:	0306                	slli	t1,t1,0x1
    106e:	097f                	0x97f
    1070:	0008                	0x8
    1072:	0501                	addi	a0,a0,0
    1074:	0005                	c.nop	1
    for(i = 0; i < N; ++i){
    1076:	0402                	c.slli64	s0
    1078:	0601                	addi	a2,a2,0
        secret_key_f[i] = keys[i];
    107a:	00090003          	lb	zero,0(s2)
    107e:	0100                	addi	s0,sp,128
    1080:	0306                	slli	t1,t1,0x1
    1082:	0904                	addi	s1,sp,144
    1084:	0004                	0x4
    for(i = 0; i < N; ++i){
    1086:	0301                	addi	t1,t1,0
    1088:	0902                	c.slli64	s2
    108a:	0000                	unimp
    for(i = N; i < (2*N); ++i){
    108c:	0501                	addi	a0,a0,0
    108e:	0601                	addi	a2,a2,0
    1090:	00090103          	lb	sp,0(s2)
    1094:	0100                	addi	s0,sp,128
    1096:	0905                	addi	s2,s2,1
        secret_key_fp[i-(2*N)] = keys[i];
    1098:	0306                	slli	t1,t1,0x1
    109a:	7fba                	flw	ft11,172(sp)
    109c:	2a09                	jal	11ae <__DTOR_END__+0x5a>
    109e:	0100                	addi	s0,sp,128
    10a0:	1605                	addi	a2,a2,-31
    for(i = (2*N); i < (3*N); ++i){
    10a2:	0306                	slli	t1,t1,0x1
    10a4:	0900                	addi	s0,sp,144
    for(i = (3*N); i < (4*N); ++i){
    10a6:	0000                	unimp
    10a8:	0501                	addi	a0,a0,0
    10aa:	030d                	addi	t1,t1,3
    10ac:	0900                	addi	s0,sp,144
    10ae:	0004                	0x4
    10b0:	0501                	addi	a0,a0,0
        public_key[i-(4*N)] = keys[i];
    10b2:	09000313          	li	t1,144
    10b6:	0004                	0x4
    10b8:	0501                	addi	a0,a0,0
    10ba:	0609                	addi	a2,a2,2
    for(i = (4*N); i < (5*N); ++i){
    10bc:	06090203          	lb	tp,96(s2)
    10c0:	0100                	addi	s0,sp,128
    10c2:	1005                	c.nop	-31
    10c4:	0306                	slli	t1,t1,0x1
    10c6:	0900                	addi	s0,sp,144
        ring_poly[i-(5*N)] = keys[i];
    10c8:	0002                	c.slli64	zero
    10ca:	0501                	addi	a0,a0,0
    10cc:	0015                	c.nop	5
    10ce:	0402                	c.slli64	s0
    10d0:	0601                	addi	a2,a2,0
    for(i = (5*N); i < (6*N+1); ++i){
    10d2:	02090003          	lb	zero,32(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10d6:	0100                	addi	s0,sp,128
    10d8:	0905                	addi	s2,s2,1
    10da:	0200                	addi	s0,sp,256
    10dc:	0104                	addi	s1,sp,128
    10de:	0306                	slli	t1,t1,0x1
    10e0:	0900                	addi	s0,sp,144
    10e2:	0000                	unimp
    10e4:	0601                	addi	a2,a2,0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10e6:	04090603          	lb	a2,64(s2)
    10ea:	0100                	addi	s0,sp,128
    10ec:	1305                	addi	t1,t1,-31
    10ee:	0306                	slli	t1,t1,0x1
    10f0:	0900                	addi	s0,sp,144
    10f2:	0000                	unimp
    10f4:	0501                	addi	a0,a0,0
    10f6:	0609                	addi	a2,a2,2
    10f8:	0e090303          	lb	t1,224(s2)
            resultkon[0] = 0xDEDEDEDE;
    10fc:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10fe:	1005                	c.nop	-31
    1100:	0306                	slli	t1,t1,0x1
    1102:	0900                	addi	s0,sp,144
    1104:	0002                	c.slli64	zero
    1106:	0501                	addi	a0,a0,0
            resultkon[0] = 0xDEDEDEDE;
    1108:	0015                	c.nop	5
    110a:	0402                	c.slli64	s0
    for(i = 0; i < 32; ++i){
    110c:	0601                	addi	a2,a2,0
    110e:	02090003          	lb	zero,32(s2)
        if(!(message[i] == Dec_Message[i])){
    1112:	0100                	addi	s0,sp,128
    1114:	0905                	addi	s2,s2,1
    1116:	0200                	addi	s0,sp,256
    1118:	0104                	addi	s1,sp,128
    111a:	0306                	slli	t1,t1,0x1
    111c:	0900                	addi	s0,sp,144
    111e:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    1120:	0501                	addi	a0,a0,0
    1122:	0310                	addi	a2,sp,384
    1124:	0908                	addi	a0,sp,144
    1126:	0006                	c.slli	zero,0x1
    1128:	0501                	addi	a0,a0,0
}
    112a:	0015                	c.nop	5
    112c:	0402                	c.slli64	s0
    112e:	0601                	addi	a2,a2,0
    1130:	02090003          	lb	zero,32(s2)
    1134:	0100                	addi	s0,sp,128
    1136:	0905                	addi	s2,s2,1
    1138:	0200                	addi	s0,sp,256
            resultkon[0] = 0xDEDEDEDE;
    113a:	0104                	addi	s1,sp,128
    for(i = 0; i < 32; ++i){
    113c:	0306                	slli	t1,t1,0x1
    113e:	0900                	addi	s0,sp,144
    1140:	0000                	unimp
    1142:	0501                	addi	a0,a0,0
    1144:	0310                	addi	a2,sp,384
    1146:	0906                	slli	s2,s2,0x1
    1148:	0006                	c.slli	zero,0x1
    114a:	0501                	addi	a0,a0,0
    114c:	0015                	c.nop	5
    114e:	0402                	c.slli64	s0
    1150:	0601                	addi	a2,a2,0
    1152:	02090003          	lb	zero,32(s2)
    1156:	0100                	addi	s0,sp,128
    1158:	0905                	addi	s2,s2,1
    115a:	0200                	addi	s0,sp,256
    115c:	0104                	addi	s1,sp,128
    115e:	0306                	slli	t1,t1,0x1
    1160:	0900                	addi	s0,sp,144
    1162:	0000                	unimp
    1164:	0601                	addi	a2,a2,0
    1166:	04090903          	lb	s2,64(s2)
    116a:	0100                	addi	s0,sp,128
    116c:	08090303          	lb	t1,128(s2)
    1170:	0100                	addi	s0,sp,128
    1172:	0f05                	addi	t5,t5,1
    1174:	0306                	slli	t1,t1,0x1
    1176:	0900                	addi	s0,sp,144
    1178:	0002                	c.slli64	zero
    117a:	0501                	addi	a0,a0,0
    117c:	0014                	0x14
    117e:	0402                	c.slli64	s0
    1180:	0601                	addi	a2,a2,0
    1182:	02090003          	lb	zero,32(s2)
    1186:	0100                	addi	s0,sp,128
    1188:	0905                	addi	s2,s2,1
    118a:	0200                	addi	s0,sp,256
    118c:	0104                	addi	s1,sp,128
    118e:	0306                	slli	t1,t1,0x1
    1190:	0900                	addi	s0,sp,144
    1192:	0000                	unimp
    1194:	0501                	addi	a0,a0,0
    1196:	0310                	addi	a2,sp,384
    1198:	00040907          	0x40907
    119c:	0501                	addi	a0,a0,0
    119e:	001c                	0x1c
    11a0:	0402                	c.slli64	s0
    11a2:	0601                	addi	a2,a2,0
    11a4:	02090003          	lb	zero,32(s2)
    11a8:	0100                	addi	s0,sp,128
    11aa:	0905                	addi	s2,s2,1
    11ac:	0200                	addi	s0,sp,256
    11ae:	0104                	addi	s1,sp,128
    11b0:	0306                	slli	t1,t1,0x1
    11b2:	0900                	addi	s0,sp,144
    11b4:	0008                	0x8
    11b6:	0501                	addi	a0,a0,0
    11b8:	000d                	c.nop	3
    11ba:	0402                	c.slli64	s0
    11bc:	57030603          	lb	a2,1392(t1)
    11c0:	0809                	addi	a6,a6,2
    11c2:	0100                	addi	s0,sp,128
    11c4:	1905                	addi	s2,s2,-31
    11c6:	0200                	addi	s0,sp,256
    11c8:	0304                	addi	s1,sp,384
    11ca:	0306                	slli	t1,t1,0x1
    11cc:	0900                	addi	s0,sp,144
    11ce:	0000                	unimp
    11d0:	0501                	addi	a0,a0,0
    11d2:	0021                	c.nop	8
    11d4:	0402                	c.slli64	s0
    11d6:	097f0303          	lb	t1,151(t5)
    11da:	0002                	c.slli64	zero
    11dc:	0501                	addi	a0,a0,0
    11de:	0019                	c.nop	6
    11e0:	0402                	c.slli64	s0
    11e2:	09010303          	lb	t1,144(sp)
    11e6:	0004                	0x4
    11e8:	0501                	addi	a0,a0,0
    11ea:	0012                	c.slli	zero,0x4
    11ec:	0402                	c.slli64	s0
    11ee:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11f2:	0004                	0x4
    11f4:	0501                	addi	a0,a0,0
    11f6:	0021                	c.nop	8
    11f8:	0402                	c.slli64	s0
    11fa:	7f030603          	lb	a2,2032(t1)
    11fe:	0409                	addi	s0,s0,2
    1200:	0100                	addi	s0,sp,128
    1202:	1105                	addi	sp,sp,-31
    1204:	02090b03          	lb	s6,32(s2)
    1208:	0100                	addi	s0,sp,128
    120a:	2905                	jal	163a <product2+0x10a>
    120c:	0306                	slli	t1,t1,0x1
    120e:	0900                	addi	s0,sp,144
    1210:	0000                	unimp
    1212:	0501                	addi	a0,a0,0
    1214:	031c                	addi	a5,sp,384
    1216:	0900                	addi	s0,sp,144
    1218:	0002                	c.slli64	zero
    121a:	0501                	addi	a0,a0,0
    121c:	7f030613          	addi	a2,t1,2032
    1220:	0209                	addi	tp,tp,2
    1222:	0100                	addi	s0,sp,128
    1224:	1b05                	addi	s6,s6,-31
    1226:	0306                	slli	t1,t1,0x1
    1228:	0900                	addi	s0,sp,144
    122a:	0000                	unimp
    122c:	0501                	addi	a0,a0,0
    122e:	09000313          	li	t1,144
    1232:	0002                	c.slli64	zero
    1234:	0501                	addi	a0,a0,0
    1236:	000d                	c.nop	3
    1238:	0402                	c.slli64	s0
    123a:	0602                	c.slli64	a2
    123c:	04090303          	lb	t1,64(s2)
    1240:	0100                	addi	s0,sp,128
    1242:	2505                	jal	1862 <result+0xda>
    1244:	0200                	addi	s0,sp,256
    1246:	0204                	addi	s1,sp,256
    1248:	0306                	slli	t1,t1,0x1
    124a:	0900                	addi	s0,sp,144
    124c:	0000                	unimp
    124e:	0501                	addi	a0,a0,0
    1250:	0021                	c.nop	8
    1252:	0402                	c.slli64	s0
    1254:	0302                	c.slli64	t1
    1256:	097c                	addi	a5,sp,156
    1258:	0004                	0x4
    125a:	0501                	addi	a0,a0,0
    125c:	0018                	0x18
    125e:	0402                	c.slli64	s0
    1260:	0302                	c.slli64	t1
    1262:	0904                	addi	s1,sp,144
    1264:	0004                	0x4
    1266:	0501                	addi	a0,a0,0
    1268:	0021                	c.nop	8
    126a:	0402                	c.slli64	s0
    126c:	0602                	c.slli64	a2
    126e:	04097c03          	0x4097c03
    1272:	0100                	addi	s0,sp,128
    1274:	0d05                	addi	s10,s10,1
    1276:	0200                	addi	s0,sp,256
    1278:	0304                	addi	s1,sp,384
    127a:	02090903          	lb	s2,32(s2)
    127e:	0100                	addi	s0,sp,128
    1280:	3005                	jal	aa0 <generate_keys+0x106>
    1282:	0200                	addi	s0,sp,256
    1284:	0304                	addi	s1,sp,384
    1286:	0306                	slli	t1,t1,0x1
    1288:	0900                	addi	s0,sp,144
    128a:	0000                	unimp
    128c:	0501                	addi	a0,a0,0
    128e:	04020027          	0x4020027
    1292:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1296:	0006                	c.slli	zero,0x1
    1298:	0501                	addi	a0,a0,0
    129a:	0021                	c.nop	8
    129c:	0402                	c.slli64	s0
    129e:	097f0303          	lb	t1,151(t5)
    12a2:	0004                	0x4
    12a4:	0501                	addi	a0,a0,0
    12a6:	04020027          	0x4020027
    12aa:	09010303          	lb	t1,144(sp)
    12ae:	0004                	0x4
    12b0:	0501                	addi	a0,a0,0
    12b2:	0019                	c.nop	6
    12b4:	0402                	c.slli64	s0
    12b6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    12ba:	0002                	c.slli64	zero
    12bc:	0501                	addi	a0,a0,0
    12be:	0021                	c.nop	8
    12c0:	0402                	c.slli64	s0
    12c2:	7f030603          	lb	a2,2032(t1)
    12c6:	0409                	addi	s0,s0,2
    12c8:	0100                	addi	s0,sp,128
    12ca:	1105                	addi	sp,sp,-31
    12cc:	02090803          	lb	a6,32(s2)
    12d0:	0100                	addi	s0,sp,128
    12d2:	2b05                	jal	1802 <result+0x7a>
    12d4:	0306                	slli	t1,t1,0x1
    12d6:	0900                	addi	s0,sp,144
    12d8:	0000                	unimp
    12da:	0501                	addi	a0,a0,0
    12dc:	031d                	addi	t1,t1,7
    12de:	0900                	addi	s0,sp,144
    12e0:	0002                	c.slli64	zero
    12e2:	0501                	addi	a0,a0,0
    12e4:	7f030613          	addi	a2,t1,2032
    12e8:	0209                	addi	tp,tp,2
    12ea:	0100                	addi	s0,sp,128
    12ec:	1c05                	addi	s8,s8,-31
    12ee:	0306                	slli	t1,t1,0x1
    12f0:	0900                	addi	s0,sp,144
    12f2:	0000                	unimp
    12f4:	0501                	addi	a0,a0,0
    12f6:	09000313          	li	t1,144
    12fa:	0002                	c.slli64	zero
    12fc:	0501                	addi	a0,a0,0
    12fe:	000d                	c.nop	3
    1300:	0402                	c.slli64	s0
    1302:	0602                	c.slli64	a2
    1304:	04090303          	lb	t1,64(s2)
    1308:	0100                	addi	s0,sp,128
    130a:	2705                	jal	1a2a <ti_2+0x4a>
    130c:	0200                	addi	s0,sp,256
    130e:	0204                	addi	s1,sp,256
    1310:	0306                	slli	t1,t1,0x1
    1312:	0900                	addi	s0,sp,144
    1314:	0000                	unimp
    1316:	0501                	addi	a0,a0,0
    1318:	0021                	c.nop	8
    131a:	0402                	c.slli64	s0
    131c:	0302                	c.slli64	t1
    131e:	097c                	addi	a5,sp,156
    1320:	0004                	0x4
    1322:	0501                	addi	a0,a0,0
    1324:	0019                	c.nop	6
    1326:	0402                	c.slli64	s0
    1328:	0302                	c.slli64	t1
    132a:	0904                	addi	s1,sp,144
    132c:	0004                	0x4
    132e:	0501                	addi	a0,a0,0
    1330:	0021                	c.nop	8
    1332:	0402                	c.slli64	s0
    1334:	0602                	c.slli64	a2
    1336:	04097c03          	0x4097c03
    133a:	0100                	addi	s0,sp,128
    133c:	0d05                	addi	s10,s10,1
    133e:	0200                	addi	s0,sp,256
    1340:	0304                	addi	s1,sp,384
    1342:	02090d03          	lb	s10,32(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	1905                	addi	s2,s2,-31
    134a:	0200                	addi	s0,sp,256
    134c:	0304                	addi	s1,sp,384
    134e:	0306                	slli	t1,t1,0x1
    1350:	0900                	addi	s0,sp,144
    1352:	0000                	unimp
    1354:	0501                	addi	a0,a0,0
    1356:	0020                	addi	s0,sp,8
    1358:	0402                	c.slli64	s0
    135a:	097f0303          	lb	t1,151(t5)
    135e:	0002                	c.slli64	zero
    1360:	0501                	addi	a0,a0,0
    1362:	0019                	c.nop	6
    1364:	0402                	c.slli64	s0
    1366:	09010303          	lb	t1,144(sp)
    136a:	0004                	0x4
    136c:	0501                	addi	a0,a0,0
    136e:	0012                	c.slli	zero,0x4
    1370:	0402                	c.slli64	s0
    1372:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1376:	0004                	0x4
    1378:	0501                	addi	a0,a0,0
    137a:	0020                	addi	s0,sp,8
    137c:	0402                	c.slli64	s0
    137e:	7f030603          	lb	a2,2032(t1)
    1382:	0409                	addi	s0,s0,2
    1384:	0100                	addi	s0,sp,128
    1386:	0d05                	addi	s10,s10,1
    1388:	02090803          	lb	a6,32(s2)
    138c:	0100                	addi	s0,sp,128
    138e:	0f05                	addi	t5,t5,1
    1390:	0306                	slli	t1,t1,0x1
    1392:	0900                	addi	s0,sp,144
    1394:	0000                	unimp
    1396:	0501                	addi	a0,a0,0
    1398:	0024                	addi	s1,sp,8
    139a:	0402                	c.slli64	s0
    139c:	0602                	c.slli64	a2
    139e:	02097f03          	0x2097f03
    13a2:	0100                	addi	s0,sp,128
    13a4:	2605                	jal	16c4 <product2+0x194>
    13a6:	0200                	addi	s0,sp,256
    13a8:	0204                	addi	s1,sp,256
    13aa:	0306                	slli	t1,t1,0x1
    13ac:	0900                	addi	s0,sp,144
    13ae:	0000                	unimp
    13b0:	0501                	addi	a0,a0,0
    13b2:	000d                	c.nop	3
    13b4:	0402                	c.slli64	s0
    13b6:	09030603          	lb	a2,144(t1)
    13ba:	0409                	addi	s0,s0,2
    13bc:	0100                	addi	s0,sp,128
    13be:	1205                	addi	tp,tp,-31
    13c0:	0200                	addi	s0,sp,256
    13c2:	0304                	addi	s1,sp,384
    13c4:	0306                	slli	t1,t1,0x1
    13c6:	0900                	addi	s0,sp,144
    13c8:	0000                	unimp
    13ca:	0501                	addi	a0,a0,0
    13cc:	0021                	c.nop	8
    13ce:	0402                	c.slli64	s0
    13d0:	7f030603          	lb	a2,2032(t1)
    13d4:	0a09                	addi	s4,s4,2
    13d6:	0100                	addi	s0,sp,128
    13d8:	1505                	addi	a0,a0,-31
    13da:	0200                	addi	s0,sp,256
    13dc:	0104                	addi	s1,sp,128
    13de:	02090003          	lb	zero,32(s2)
    13e2:	0100                	addi	s0,sp,128
    13e4:	0905                	addi	s2,s2,1
    13e6:	0200                	addi	s0,sp,256
    13e8:	0104                	addi	s1,sp,128
    13ea:	0306                	slli	t1,t1,0x1
    13ec:	0900                	addi	s0,sp,144
    13ee:	0000                	unimp
    13f0:	0001                	nop
    13f2:	0402                	c.slli64	s0
    13f4:	08030603          	lb	a2,128(t1)
    13f8:	0609                	addi	a2,a2,2
    13fa:	0100                	addi	s0,sp,128
    13fc:	1305                	addi	t1,t1,-31
    13fe:	0200                	addi	s0,sp,256
    1400:	0304                	addi	s1,sp,384
    1402:	0306                	slli	t1,t1,0x1
    1404:	0900                	addi	s0,sp,144
    1406:	0004                	0x4
    1408:	0501                	addi	a0,a0,0
    140a:	0016                	c.slli	zero,0x5
    140c:	0402                	c.slli64	s0
    140e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1412:	0004                	0x4
    1414:	0501                	addi	a0,a0,0
    1416:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    141a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    141e:	0002                	c.slli64	zero
    1420:	0501                	addi	a0,a0,0
    1422:	001c                	0x1c
    1424:	0402                	c.slli64	s0
    1426:	097f0303          	lb	t1,151(t5)
    142a:	0002                	c.slli64	zero
    142c:	0501                	addi	a0,a0,0
    142e:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1432:	09010303          	lb	t1,144(sp)
    1436:	0002                	c.slli64	zero
    1438:	0501                	addi	a0,a0,0
    143a:	001c                	0x1c
    143c:	0402                	c.slli64	s0
    143e:	7f030603          	lb	a2,2032(t1)
    1442:	0209                	addi	tp,tp,2
    1444:	0100                	addi	s0,sp,128
    1446:	0905                	addi	s2,s2,1
    1448:	0200                	addi	s0,sp,256
    144a:	0304                	addi	s1,sp,384
    144c:	02090503          	lb	a0,32(s2)
    1450:	0100                	addi	s0,sp,128
    1452:	1305                	addi	t1,t1,-31
    1454:	0200                	addi	s0,sp,256
    1456:	0304                	addi	s1,sp,384
    1458:	0306                	slli	t1,t1,0x1
    145a:	0900                	addi	s0,sp,144
    145c:	0000                	unimp
    145e:	0501                	addi	a0,a0,0
    1460:	0025                	c.nop	9
    1462:	0402                	c.slli64	s0
    1464:	7f030603          	lb	a2,2032(t1)
    1468:	0c09                	addi	s8,s8,2
    146a:	0100                	addi	s0,sp,128
    146c:	3c05                	jal	e9c <_start>
    146e:	06090a03          	lb	s4,96(s2)
    1472:	0100                	addi	s0,sp,128
    1474:	0505                	addi	a0,a0,1
    1476:	00090203          	lb	tp,0(s2)
    147a:	0100                	addi	s0,sp,128
    147c:	00090103          	lb	sp,0(s2)
    1480:	0100                	addi	s0,sp,128
    1482:	00090103          	lb	sp,0(s2)
    1486:	0100                	addi	s0,sp,128
    1488:	0905                	addi	s2,s2,1
    148a:	0306                	slli	t1,t1,0x1
    148c:	0900                	addi	s0,sp,144
    148e:	0000                	unimp
    1490:	0501                	addi	a0,a0,0
    1492:	033c                	addi	a5,sp,392
    1494:	097c                	addi	a5,sp,156
    1496:	0004                	0x4
    1498:	0501                	addi	a0,a0,0
    149a:	0309                	addi	t1,t1,2
    149c:	0904                	addi	s1,sp,144
    149e:	0002                	c.slli64	zero
    14a0:	0501                	addi	a0,a0,0
    14a2:	033c                	addi	a5,sp,392
    14a4:	097c                	addi	a5,sp,156
    14a6:	0004                	0x4
    14a8:	0501                	addi	a0,a0,0
    14aa:	0309                	addi	t1,t1,2
    14ac:	0904                	addi	s1,sp,144
    14ae:	001c                	0x1c
    14b0:	0301                	addi	t1,t1,0
    14b2:	0901                	addi	s2,s2,0
    14b4:	0006                	c.slli	zero,0x1
    14b6:	0301                	addi	t1,t1,0
    14b8:	0901                	addi	s2,s2,0
    14ba:	0006                	c.slli	zero,0x1
    14bc:	0301                	addi	t1,t1,0
    14be:	0902                	c.slli64	s2
    14c0:	0006                	c.slli	zero,0x1
    14c2:	0301                	addi	t1,t1,0
    14c4:	0901                	addi	s2,s2,0
    14c6:	0006                	c.slli	zero,0x1
    14c8:	0301                	addi	t1,t1,0
    14ca:	0901                	addi	s2,s2,0
    14cc:	0006                	c.slli	zero,0x1
    14ce:	0301                	addi	t1,t1,0
    14d0:	0901                	addi	s2,s2,0
    14d2:	0006                	c.slli	zero,0x1
    14d4:	0501                	addi	a0,a0,0
    14d6:	033c                	addi	a5,sp,392
    14d8:	0975                	addi	s2,s2,29
    14da:	0004                	0x4
    14dc:	0501                	addi	a0,a0,0
    14de:	0309                	addi	t1,t1,2
    14e0:	0904                	addi	s1,sp,144
    14e2:	0004                	0x4
    14e4:	0501                	addi	a0,a0,0
    14e6:	0605                	addi	a2,a2,1
    14e8:	04090103          	lb	sp,64(s2)
    14ec:	0100                	addi	s0,sp,128
    14ee:	00090103          	lb	sp,0(s2)
    14f2:	0100                	addi	s0,sp,128
    14f4:	00090203          	lb	tp,0(s2)
    14f8:	0100                	addi	s0,sp,128
    14fa:	00090103          	lb	sp,0(s2)
    14fe:	0100                	addi	s0,sp,128
    1500:	00090103          	lb	sp,0(s2)
    1504:	0100                	addi	s0,sp,128
    1506:	00090103          	lb	sp,0(s2)
    150a:	0100                	addi	s0,sp,128
    150c:	0905                	addi	s2,s2,1
    150e:	0306                	slli	t1,t1,0x1
    1510:	0900                	addi	s0,sp,144
    1512:	0000                	unimp
    1514:	0501                	addi	a0,a0,0
    1516:	0605                	addi	a2,a2,1
    1518:	02090103          	lb	sp,32(s2)
    151c:	0100                	addi	s0,sp,128
    151e:	00090103          	lb	sp,0(s2)
    1522:	0100                	addi	s0,sp,128
    1524:	00090103          	lb	sp,0(s2)
    1528:	0100                	addi	s0,sp,128
    152a:	00090103          	lb	sp,0(s2)
    152e:	0100                	addi	s0,sp,128
    1530:	00090203          	lb	tp,0(s2)
    1534:	0100                	addi	s0,sp,128
    1536:	00090103          	lb	sp,0(s2)
    153a:	0100                	addi	s0,sp,128
    153c:	0c05                	addi	s8,s8,1
    153e:	0306                	slli	t1,t1,0x1
    1540:	0900                	addi	s0,sp,144
    1542:	0002                	c.slli64	zero
    1544:	0501                	addi	a0,a0,0
    1546:	0311                	addi	t1,t1,4
    1548:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    154c:	0001                	nop
    154e:	0402                	c.slli64	s0
    1550:	0601                	addi	a2,a2,0
    1552:	08097d03          	0x8097d03
    1556:	0100                	addi	s0,sp,128
    1558:	0505                	addi	a0,a0,1
    155a:	0200                	addi	s0,sp,256
    155c:	0104                	addi	s1,sp,128
    155e:	0306                	slli	t1,t1,0x1
    1560:	0900                	addi	s0,sp,144
    1562:	0000                	unimp
    1564:	0601                	addi	a2,a2,0
    1566:	04090b03          	lb	s6,64(s2)
    156a:	0100                	addi	s0,sp,128
    156c:	0d05                	addi	s10,s10,1
    156e:	0306                	slli	t1,t1,0x1
    1570:	0900                	addi	s0,sp,144
    1572:	0000                	unimp
    1574:	0501                	addi	a0,a0,0
    1576:	0605                	addi	a2,a2,1
    1578:	06090303          	lb	t1,96(s2)
    157c:	0100                	addi	s0,sp,128
    157e:	0b05                	addi	s6,s6,1
    1580:	00090003          	lb	zero,0(s2)
    1584:	0100                	addi	s0,sp,128
    1586:	2405                	jal	17a6 <result+0x1e>
    1588:	0306                	slli	t1,t1,0x1
    158a:	0914                	addi	a3,sp,144
    158c:	0000                	unimp
    158e:	0501                	addi	a0,a0,0
    1590:	0310                	addi	a2,sp,384
    1592:	0970                	addi	a2,sp,156
    1594:	0008                	0x8
    1596:	0501                	addi	a0,a0,0
    1598:	0009                	c.nop	2
    159a:	0402                	c.slli64	s0
    159c:	6f030603          	lb	a2,1776(t1)
    15a0:	0409                	addi	s0,s0,2
    15a2:	0100                	addi	s0,sp,128
    15a4:	1805                	addi	a6,a6,-31
    15a6:	0200                	addi	s0,sp,256
    15a8:	0304                	addi	s1,sp,384
    15aa:	0306                	slli	t1,t1,0x1
    15ac:	0900                	addi	s0,sp,144
    15ae:	0000                	unimp
    15b0:	0501                	addi	a0,a0,0
    15b2:	0011                	c.nop	4
    15b4:	0402                	c.slli64	s0
    15b6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    15ba:	0004                	0x4
    15bc:	0501                	addi	a0,a0,0
    15be:	0402001b          	0x402001b
    15c2:	097f0303          	lb	t1,151(t5)
    15c6:	0008                	0x8
    15c8:	0501                	addi	a0,a0,0
    15ca:	0011                	c.nop	4
    15cc:	0402                	c.slli64	s0
    15ce:	09010303          	lb	t1,144(sp)
    15d2:	0002                	c.slli64	zero
    15d4:	0501                	addi	a0,a0,0
    15d6:	0009                	c.nop	2
    15d8:	0402                	c.slli64	s0
    15da:	01030603          	lb	a2,16(t1)
    15de:	0409                	addi	s0,s0,2
    15e0:	0100                	addi	s0,sp,128
    15e2:	1805                	addi	a6,a6,-31
    15e4:	0200                	addi	s0,sp,256
    15e6:	0304                	addi	s1,sp,384
    15e8:	0306                	slli	t1,t1,0x1
    15ea:	0900                	addi	s0,sp,144
    15ec:	0000                	unimp
    15ee:	0501                	addi	a0,a0,0
    15f0:	0011                	c.nop	4
    15f2:	0402                	c.slli64	s0
    15f4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    15f8:	0004                	0x4
    15fa:	0501                	addi	a0,a0,0
    15fc:	0009                	c.nop	2
    15fe:	0402                	c.slli64	s0
    1600:	01030603          	lb	a2,16(t1)
    1604:	0c09                	addi	s8,s8,2
    1606:	0100                	addi	s0,sp,128
    1608:	1105                	addi	sp,sp,-31
    160a:	0200                	addi	s0,sp,256
    160c:	0304                	addi	s1,sp,384
    160e:	0306                	slli	t1,t1,0x1
    1610:	0900                	addi	s0,sp,144
    1612:	0000                	unimp
    1614:	0501                	addi	a0,a0,0
    1616:	0009                	c.nop	2
    1618:	0402                	c.slli64	s0
    161a:	01030603          	lb	a2,16(t1)
    161e:	0809                	addi	a6,a6,2
    1620:	0100                	addi	s0,sp,128
    1622:	1105                	addi	sp,sp,-31
    1624:	0200                	addi	s0,sp,256
    1626:	0304                	addi	s1,sp,384
    1628:	0306                	slli	t1,t1,0x1
    162a:	0900                	addi	s0,sp,144
    162c:	0000                	unimp
    162e:	0501                	addi	a0,a0,0
    1630:	0402001b          	0x402001b
    1634:	7c030603          	lb	a2,1984(t1)
    1638:	0809                	addi	a6,a6,2
    163a:	0100                	addi	s0,sp,128
    163c:	1105                	addi	sp,sp,-31
    163e:	04091403          	lh	s0,64(s2)
    1642:	0100                	addi	s0,sp,128
    1644:	2305                	jal	1b64 <ti_2+0x184>
    1646:	0306                	slli	t1,t1,0x1
    1648:	0900                	addi	s0,sp,144
    164a:	0000                	unimp
    164c:	0501                	addi	a0,a0,0
    164e:	0319                	addi	t1,t1,6
    1650:	0900                	addi	s0,sp,144
    1652:	0002                	c.slli64	zero
    1654:	0501                	addi	a0,a0,0
    1656:	7f030613          	addi	a2,t1,2032
    165a:	0209                	addi	tp,tp,2
    165c:	0100                	addi	s0,sp,128
    165e:	1805                	addi	a6,a6,-31
    1660:	0306                	slli	t1,t1,0x1
    1662:	0900                	addi	s0,sp,144
    1664:	0000                	unimp
    1666:	0501                	addi	a0,a0,0
    1668:	09000313          	li	t1,144
    166c:	0002                	c.slli64	zero
    166e:	0501                	addi	a0,a0,0
    1670:	000d                	c.nop	3
    1672:	0402                	c.slli64	s0
    1674:	0602                	c.slli64	a2
    1676:	04090303          	lb	t1,64(s2)
    167a:	0100                	addi	s0,sp,128
    167c:	1f05                	addi	t5,t5,-31
    167e:	0200                	addi	s0,sp,256
    1680:	0204                	addi	s1,sp,256
    1682:	0306                	slli	t1,t1,0x1
    1684:	0900                	addi	s0,sp,144
    1686:	0000                	unimp
    1688:	0501                	addi	a0,a0,0
    168a:	0020                	addi	s0,sp,8
    168c:	0402                	c.slli64	s0
    168e:	0302                	c.slli64	t1
    1690:	097c                	addi	a5,sp,156
    1692:	0004                	0x4
    1694:	0501                	addi	a0,a0,0
    1696:	0015                	c.nop	5
    1698:	0402                	c.slli64	s0
    169a:	0302                	c.slli64	t1
    169c:	0904                	addi	s1,sp,144
    169e:	0002                	c.slli64	zero
    16a0:	0501                	addi	a0,a0,0
    16a2:	0020                	addi	s0,sp,8
    16a4:	0402                	c.slli64	s0
    16a6:	0602                	c.slli64	a2
    16a8:	02097c03          	0x2097c03
    16ac:	0100                	addi	s0,sp,128
    16ae:	1505                	addi	a0,a0,-31
    16b0:	0200                	addi	s0,sp,256
    16b2:	0104                	addi	s1,sp,128
    16b4:	00090003          	lb	zero,0(s2)
    16b8:	0100                	addi	s0,sp,128
    16ba:	0905                	addi	s2,s2,1
    16bc:	0200                	addi	s0,sp,256
    16be:	0104                	addi	s1,sp,128
    16c0:	0306                	slli	t1,t1,0x1
    16c2:	0900                	addi	s0,sp,144
    16c4:	0000                	unimp
    16c6:	0501                	addi	a0,a0,0
    16c8:	0310                	addi	a2,sp,384
    16ca:	0908                	addi	a0,sp,144
    16cc:	000e                	c.slli	zero,0x3
    16ce:	0501                	addi	a0,a0,0
    16d0:	0015                	c.nop	5
    16d2:	0402                	c.slli64	s0
    16d4:	0601                	addi	a2,a2,0
    16d6:	02090003          	lb	zero,32(s2)
    16da:	0100                	addi	s0,sp,128
    16dc:	0905                	addi	s2,s2,1
    16de:	0200                	addi	s0,sp,256
    16e0:	0104                	addi	s1,sp,128
    16e2:	0306                	slli	t1,t1,0x1
    16e4:	0900                	addi	s0,sp,144
    16e6:	0000                	unimp
    16e8:	0601                	addi	a2,a2,0
    16ea:	04090703          	lb	a4,64(s2)
    16ee:	0100                	addi	s0,sp,128
    16f0:	0f05                	addi	t5,t5,1
    16f2:	0306                	slli	t1,t1,0x1
    16f4:	0900                	addi	s0,sp,144
    16f6:	0000                	unimp
    16f8:	0501                	addi	a0,a0,0
    16fa:	0609                	addi	a2,a2,2
    16fc:	0c090103          	lb	sp,192(s2)
    1700:	0100                	addi	s0,sp,128
    1702:	1905                	addi	s2,s2,-31
    1704:	0200                	addi	s0,sp,256
    1706:	0104                	addi	s1,sp,128
    1708:	04090003          	lb	zero,64(s2)
    170c:	0100                	addi	s0,sp,128
    170e:	0905                	addi	s2,s2,1
    1710:	0200                	addi	s0,sp,256
    1712:	0104                	addi	s1,sp,128
    1714:	0306                	slli	t1,t1,0x1
    1716:	0900                	addi	s0,sp,144
    1718:	0000                	unimp
    171a:	0501                	addi	a0,a0,0
    171c:	0310                	addi	a2,sp,384
    171e:	0906                	slli	s2,s2,0x1
    1720:	000a                	c.slli	zero,0x2
    1722:	0501                	addi	a0,a0,0
    1724:	0015                	c.nop	5
    1726:	0402                	c.slli64	s0
    1728:	0601                	addi	a2,a2,0
    172a:	02090003          	lb	zero,32(s2)
    172e:	0100                	addi	s0,sp,128
    1730:	0905                	addi	s2,s2,1
    1732:	0200                	addi	s0,sp,256
    1734:	0104                	addi	s1,sp,128
    1736:	0306                	slli	t1,t1,0x1
    1738:	0900                	addi	s0,sp,144
    173a:	0000                	unimp
    173c:	0301                	addi	t1,t1,0
    173e:	0900                	addi	s0,sp,144
    1740:	0006                	c.slli	zero,0x1
    1742:	0501                	addi	a0,a0,0
    1744:	0310                	addi	a2,sp,384
    1746:	0906                	slli	s2,s2,0x1
    1748:	0002                	c.slli64	zero
    174a:	0501                	addi	a0,a0,0
    174c:	0015                	c.nop	5
    174e:	0402                	c.slli64	s0
    1750:	0601                	addi	a2,a2,0
    1752:	02090003          	lb	zero,32(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	0905                	addi	s2,s2,1
    175a:	0200                	addi	s0,sp,256
    175c:	0104                	addi	s1,sp,128
    175e:	0306                	slli	t1,t1,0x1
    1760:	0900                	addi	s0,sp,144
    1762:	0000                	unimp
    1764:	0601                	addi	a2,a2,0
    1766:	04090703          	lb	a4,64(s2)
    176a:	0100                	addi	s0,sp,128
    176c:	1005                	c.nop	-31
    176e:	0306                	slli	t1,t1,0x1
    1770:	0900                	addi	s0,sp,144
    1772:	0000                	unimp
    1774:	0501                	addi	a0,a0,0
    1776:	0609                	addi	a2,a2,2
    1778:	0c090103          	lb	sp,192(s2)
    177c:	0100                	addi	s0,sp,128
    177e:	1005                	c.nop	-31
    1780:	0306                	slli	t1,t1,0x1
    1782:	0900                	addi	s0,sp,144
    1784:	0000                	unimp
    1786:	0501                	addi	a0,a0,0
    1788:	0015                	c.nop	5
    178a:	0402                	c.slli64	s0
    178c:	0601                	addi	a2,a2,0
    178e:	02090003          	lb	zero,32(s2)
    1792:	0100                	addi	s0,sp,128
    1794:	0905                	addi	s2,s2,1
    1796:	0200                	addi	s0,sp,256
    1798:	0104                	addi	s1,sp,128
    179a:	0306                	slli	t1,t1,0x1
    179c:	0900                	addi	s0,sp,144
    179e:	0000                	unimp
    17a0:	0501                	addi	a0,a0,0
    17a2:	0310                	addi	a2,sp,384
    17a4:	0905                	addi	s2,s2,1
    17a6:	0006                	c.slli	zero,0x1
    17a8:	0501                	addi	a0,a0,0
    17aa:	0015                	c.nop	5
    17ac:	0402                	c.slli64	s0
    17ae:	0601                	addi	a2,a2,0
    17b0:	02090003          	lb	zero,32(s2)
    17b4:	0100                	addi	s0,sp,128
    17b6:	0905                	addi	s2,s2,1
    17b8:	0200                	addi	s0,sp,256
    17ba:	0104                	addi	s1,sp,128
    17bc:	0306                	slli	t1,t1,0x1
    17be:	0900                	addi	s0,sp,144
    17c0:	0000                	unimp
    17c2:	0601                	addi	a2,a2,0
    17c4:	04090903          	lb	s2,64(s2)
    17c8:	0100                	addi	s0,sp,128
    17ca:	1005                	c.nop	-31
    17cc:	0306                	slli	t1,t1,0x1
    17ce:	0900                	addi	s0,sp,144
    17d0:	0000                	unimp
    17d2:	0501                	addi	a0,a0,0
    17d4:	0609                	addi	a2,a2,2
    17d6:	0e090103          	lb	sp,224(s2)
    17da:	0100                	addi	s0,sp,128
    17dc:	1005                	c.nop	-31
    17de:	0306                	slli	t1,t1,0x1
    17e0:	0900                	addi	s0,sp,144
    17e2:	0000                	unimp
    17e4:	0501                	addi	a0,a0,0
    17e6:	0015                	c.nop	5
    17e8:	0402                	c.slli64	s0
    17ea:	0601                	addi	a2,a2,0
    17ec:	02090003          	lb	zero,32(s2)
    17f0:	0100                	addi	s0,sp,128
    17f2:	0905                	addi	s2,s2,1
    17f4:	0200                	addi	s0,sp,256
    17f6:	0104                	addi	s1,sp,128
    17f8:	0306                	slli	t1,t1,0x1
    17fa:	0900                	addi	s0,sp,144
    17fc:	0000                	unimp
    17fe:	0501                	addi	a0,a0,0
    1800:	0310                	addi	a2,sp,384
    1802:	0905                	addi	s2,s2,1
    1804:	0004                	0x4
    1806:	0501                	addi	a0,a0,0
    1808:	0015                	c.nop	5
    180a:	0402                	c.slli64	s0
    180c:	0601                	addi	a2,a2,0
    180e:	02090003          	lb	zero,32(s2)
    1812:	0100                	addi	s0,sp,128
    1814:	0905                	addi	s2,s2,1
    1816:	0200                	addi	s0,sp,256
    1818:	0104                	addi	s1,sp,128
    181a:	0306                	slli	t1,t1,0x1
    181c:	0900                	addi	s0,sp,144
    181e:	0000                	unimp
    1820:	0501                	addi	a0,a0,0
    1822:	0310                	addi	a2,sp,384
    1824:	00060907          	0x60907
    1828:	0501                	addi	a0,a0,0
    182a:	0015                	c.nop	5
    182c:	0402                	c.slli64	s0
    182e:	0601                	addi	a2,a2,0
    1830:	02090003          	lb	zero,32(s2)
    1834:	0100                	addi	s0,sp,128
    1836:	0905                	addi	s2,s2,1
    1838:	0200                	addi	s0,sp,256
    183a:	0104                	addi	s1,sp,128
    183c:	0306                	slli	t1,t1,0x1
    183e:	0900                	addi	s0,sp,144
    1840:	0000                	unimp
    1842:	0501                	addi	a0,a0,0
    1844:	0310                	addi	a2,sp,384
    1846:	0905                	addi	s2,s2,1
    1848:	0006                	c.slli	zero,0x1
    184a:	0501                	addi	a0,a0,0
    184c:	0015                	c.nop	5
    184e:	0402                	c.slli64	s0
    1850:	0601                	addi	a2,a2,0
    1852:	02090003          	lb	zero,32(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	0905                	addi	s2,s2,1
    185a:	0200                	addi	s0,sp,256
    185c:	0104                	addi	s1,sp,128
    185e:	0306                	slli	t1,t1,0x1
    1860:	0900                	addi	s0,sp,144
    1862:	0000                	unimp
    1864:	0501                	addi	a0,a0,0
    1866:	0312                	slli	t1,t1,0x4
    1868:	7fba                	flw	ft11,172(sp)
    186a:	0609                	addi	a2,a2,2
    186c:	0100                	addi	s0,sp,128
    186e:	1005                	c.nop	-31
    1870:	0900d003          	lhu	zero,144(ra) # 20a0 <_bss_end+0x38>
    1874:	0002                	c.slli64	zero
    1876:	0501                	addi	a0,a0,0
    1878:	0015                	c.nop	5
    187a:	0402                	c.slli64	s0
    187c:	0601                	addi	a2,a2,0
    187e:	02090003          	lb	zero,32(s2)
    1882:	0100                	addi	s0,sp,128
    1884:	0905                	addi	s2,s2,1
    1886:	0200                	addi	s0,sp,256
    1888:	0104                	addi	s1,sp,128
    188a:	0306                	slli	t1,t1,0x1
    188c:	0900                	addi	s0,sp,144
    188e:	0000                	unimp
    1890:	0501                	addi	a0,a0,0
    1892:	ae03060b          	0xae03060b
    1896:	097f                	0x97f
    1898:	0004                	0x4
    189a:	0501                	addi	a0,a0,0
    189c:	0610                	addi	a2,sp,768
    189e:	0900dd03          	lhu	s10,144(ra)
    18a2:	0002                	c.slli64	zero
    18a4:	0301                	addi	t1,t1,0
    18a6:	0901                	addi	s2,s2,0
    18a8:	0002                	c.slli64	zero
    18aa:	0501                	addi	a0,a0,0
    18ac:	0015                	c.nop	5
    18ae:	0402                	c.slli64	s0
    18b0:	0601                	addi	a2,a2,0
    18b2:	02097f03          	0x2097f03
    18b6:	0100                	addi	s0,sp,128
    18b8:	0905                	addi	s2,s2,1
    18ba:	0200                	addi	s0,sp,256
    18bc:	0104                	addi	s1,sp,128
    18be:	0306                	slli	t1,t1,0x1
    18c0:	0900                	addi	s0,sp,144
    18c2:	0000                	unimp
    18c4:	0501                	addi	a0,a0,0
    18c6:	0015                	c.nop	5
    18c8:	0402                	c.slli64	s0
    18ca:	0601                	addi	a2,a2,0
    18cc:	0c090c03          	lb	s8,192(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	0905                	addi	s2,s2,1
    18d4:	0200                	addi	s0,sp,256
    18d6:	0104                	addi	s1,sp,128
    18d8:	0306                	slli	t1,t1,0x1
    18da:	0900                	addi	s0,sp,144
    18dc:	0000                	unimp
    18de:	0601                	addi	a2,a2,0
    18e0:	04090503          	lb	a0,64(s2)
    18e4:	0100                	addi	s0,sp,128
    18e6:	00090103          	lb	sp,0(s2)
    18ea:	0100                	addi	s0,sp,128
    18ec:	0505                	addi	a0,a0,1
    18ee:	0306                	slli	t1,t1,0x1
    18f0:	0901                	addi	s2,s2,0
    18f2:	0000                	unimp
    18f4:	0501                	addi	a0,a0,0
    18f6:	0611                	addi	a2,a2,4
    18f8:	097f9e03          	lh	t3,151(t6)
    18fc:	002a                	c.slli	zero,0xa
    18fe:	0501                	addi	a0,a0,0
    1900:	00030623          	sb	zero,12(t1)
    1904:	0009                	c.nop	2
    1906:	0100                	addi	s0,sp,128
    1908:	1905                	addi	s2,s2,-31
    190a:	02090003          	lb	zero,32(s2)
    190e:	0100                	addi	s0,sp,128
    1910:	1305                	addi	t1,t1,-31
    1912:	0306                	slli	t1,t1,0x1
    1914:	097f                	0x97f
    1916:	0002                	c.slli64	zero
    1918:	0501                	addi	a0,a0,0
    191a:	0618                	addi	a4,sp,768
    191c:	00090003          	lb	zero,0(s2)
    1920:	0100                	addi	s0,sp,128
    1922:	1305                	addi	t1,t1,-31
    1924:	02090003          	lb	zero,32(s2)
    1928:	0100                	addi	s0,sp,128
    192a:	0d05                	addi	s10,s10,1
    192c:	0200                	addi	s0,sp,256
    192e:	0204                	addi	s1,sp,256
    1930:	0306                	slli	t1,t1,0x1
    1932:	00040903          	lb	s2,0(s0)
    1936:	0501                	addi	a0,a0,0
    1938:	001f 0402 0602      	0x6020402001f
    193e:	00090003          	lb	zero,0(s2)
    1942:	0100                	addi	s0,sp,128
    1944:	2005                	jal	1964 <result+0x1dc>
    1946:	0200                	addi	s0,sp,256
    1948:	0204                	addi	s1,sp,256
    194a:	04097c03          	0x4097c03
    194e:	0100                	addi	s0,sp,128
    1950:	1505                	addi	a0,a0,-31
    1952:	0200                	addi	s0,sp,256
    1954:	0204                	addi	s1,sp,256
    1956:	04090403          	lb	s0,64(s2)
    195a:	0100                	addi	s0,sp,128
    195c:	2005                	jal	197c <result+0x1f4>
    195e:	0200                	addi	s0,sp,256
    1960:	0204                	addi	s1,sp,256
    1962:	0306                	slli	t1,t1,0x1
    1964:	097c                	addi	a5,sp,156
    1966:	0004                	0x4
    1968:	0501                	addi	a0,a0,0
    196a:	000d                	c.nop	3
    196c:	0402                	c.slli64	s0
    196e:	09090303          	lb	t1,144(s2)
    1972:	0002                	c.slli64	zero
    1974:	0501                	addi	a0,a0,0
    1976:	0022                	c.slli	zero,0x8
    1978:	0402                	c.slli64	s0
    197a:	00030603          	lb	a2,0(t1)
    197e:	0009                	c.nop	2
    1980:	0100                	addi	s0,sp,128
    1982:	1d05                	addi	s10,s10,-31
    1984:	0200                	addi	s0,sp,256
    1986:	0304                	addi	s1,sp,384
    1988:	06090003          	lb	zero,96(s2)
    198c:	0100                	addi	s0,sp,128
    198e:	2a05                	jal	1abe <ti_2+0xde>
    1990:	0200                	addi	s0,sp,256
    1992:	0304                	addi	s1,sp,384
    1994:	02097f03          	0x2097f03
    1998:	0100                	addi	s0,sp,128
    199a:	1d05                	addi	s10,s10,-31
    199c:	0200                	addi	s0,sp,256
    199e:	0304                	addi	s1,sp,384
    19a0:	04090103          	lb	sp,64(s2)
    19a4:	0100                	addi	s0,sp,128
    19a6:	2a05                	jal	1ad6 <ti_2+0xf6>
    19a8:	0200                	addi	s0,sp,256
    19aa:	0304                	addi	s1,sp,384
    19ac:	0306                	slli	t1,t1,0x1
    19ae:	097f                	0x97f
    19b0:	0004                	0x4
    19b2:	0501                	addi	a0,a0,0
    19b4:	000d                	c.nop	3
    19b6:	0402                	c.slli64	s0
    19b8:	09070303          	lb	t1,144(a4)
    19bc:	0002                	c.slli64	zero
    19be:	0501                	addi	a0,a0,0
    19c0:	0402001b          	0x402001b
    19c4:	00030603          	lb	a2,0(t1)
    19c8:	0009                	c.nop	2
    19ca:	0100                	addi	s0,sp,128
    19cc:	2305                	jal	1eec <random_keys+0x37c>
    19ce:	0200                	addi	s0,sp,256
    19d0:	0304                	addi	s1,sp,384
    19d2:	04090003          	lb	zero,64(s2)
    19d6:	0100                	addi	s0,sp,128
    19d8:	1f05                	addi	t5,t5,-31
    19da:	0200                	addi	s0,sp,256
    19dc:	0304                	addi	s1,sp,384
    19de:	04090003          	lb	zero,64(s2)
    19e2:	0100                	addi	s0,sp,128
    19e4:	1505                	addi	a0,a0,-31
    19e6:	0200                	addi	s0,sp,256
    19e8:	0304                	addi	s1,sp,384
    19ea:	04090003          	lb	zero,64(s2)
    19ee:	0100                	addi	s0,sp,128
    19f0:	2005                	jal	1a10 <ti_2+0x30>
    19f2:	0200                	addi	s0,sp,256
    19f4:	0304                	addi	s1,sp,384
    19f6:	04097f03          	0x4097f03
    19fa:	0100                	addi	s0,sp,128
    19fc:	1f05                	addi	t5,t5,-31
    19fe:	0200                	addi	s0,sp,256
    1a00:	0304                	addi	s1,sp,384
    1a02:	02090103          	lb	sp,32(s2)
    1a06:	0100                	addi	s0,sp,128
    1a08:	1505                	addi	a0,a0,-31
    1a0a:	0200                	addi	s0,sp,256
    1a0c:	0304                	addi	s1,sp,384
    1a0e:	02090003          	lb	zero,32(s2)
    1a12:	0100                	addi	s0,sp,128
    1a14:	2005                	jal	1a34 <ti_2+0x54>
    1a16:	0200                	addi	s0,sp,256
    1a18:	0304                	addi	s1,sp,384
    1a1a:	0306                	slli	t1,t1,0x1
    1a1c:	097f                	0x97f
    1a1e:	0002                	c.slli64	zero
    1a20:	0501                	addi	a0,a0,0
    1a22:	0311                	addi	t1,t1,4
    1a24:	0908                	addi	a0,sp,144
    1a26:	0004                	0x4
    1a28:	0501                	addi	a0,a0,0
    1a2a:	00030623          	sb	zero,12(t1)
    1a2e:	0009                	c.nop	2
    1a30:	0100                	addi	s0,sp,128
    1a32:	1905                	addi	s2,s2,-31
    1a34:	02090003          	lb	zero,32(s2)
    1a38:	0100                	addi	s0,sp,128
    1a3a:	1305                	addi	t1,t1,-31
    1a3c:	0306                	slli	t1,t1,0x1
    1a3e:	097f                	0x97f
    1a40:	0002                	c.slli64	zero
    1a42:	0501                	addi	a0,a0,0
    1a44:	0618                	addi	a4,sp,768
    1a46:	00090003          	lb	zero,0(s2)
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	1305                	addi	t1,t1,-31
    1a4e:	02090003          	lb	zero,32(s2)
    1a52:	0100                	addi	s0,sp,128
    1a54:	0d05                	addi	s10,s10,1
    1a56:	0200                	addi	s0,sp,256
    1a58:	0204                	addi	s1,sp,256
    1a5a:	0306                	slli	t1,t1,0x1
    1a5c:	00040903          	lb	s2,0(s0)
    1a60:	0501                	addi	a0,a0,0
    1a62:	001f 0402 0602      	0x6020402001f
    1a68:	00090003          	lb	zero,0(s2)
    1a6c:	0100                	addi	s0,sp,128
    1a6e:	2005                	jal	1a8e <ti_2+0xae>
    1a70:	0200                	addi	s0,sp,256
    1a72:	0204                	addi	s1,sp,256
    1a74:	04097c03          	0x4097c03
    1a78:	0100                	addi	s0,sp,128
    1a7a:	1505                	addi	a0,a0,-31
    1a7c:	0200                	addi	s0,sp,256
    1a7e:	0204                	addi	s1,sp,256
    1a80:	04090403          	lb	s0,64(s2)
    1a84:	0100                	addi	s0,sp,128
    1a86:	2005                	jal	1aa6 <ti_2+0xc6>
    1a88:	0200                	addi	s0,sp,256
    1a8a:	0204                	addi	s1,sp,256
    1a8c:	0306                	slli	t1,t1,0x1
    1a8e:	097c                	addi	a5,sp,156
    1a90:	0004                	0x4
    1a92:	0501                	addi	a0,a0,0
    1a94:	000d                	c.nop	3
    1a96:	0402                	c.slli64	s0
    1a98:	09090303          	lb	t1,144(s2)
    1a9c:	0002                	c.slli64	zero
    1a9e:	0501                	addi	a0,a0,0
    1aa0:	0402001b          	0x402001b
    1aa4:	00030603          	lb	a2,0(t1)
    1aa8:	0409                	addi	s0,s0,2
    1aaa:	0100                	addi	s0,sp,128
    1aac:	1505                	addi	a0,a0,-31
    1aae:	0200                	addi	s0,sp,256
    1ab0:	0304                	addi	s1,sp,384
    1ab2:	06090003          	lb	zero,96(s2)
    1ab6:	0100                	addi	s0,sp,128
    1ab8:	2005                	jal	1ad8 <ti_2+0xf8>
    1aba:	0200                	addi	s0,sp,256
    1abc:	0304                	addi	s1,sp,384
    1abe:	02097f03          	0x2097f03
    1ac2:	0100                	addi	s0,sp,128
    1ac4:	1505                	addi	a0,a0,-31
    1ac6:	0200                	addi	s0,sp,256
    1ac8:	0304                	addi	s1,sp,384
    1aca:	02090103          	lb	sp,32(s2)
    1ace:	0100                	addi	s0,sp,128
    1ad0:	2005                	jal	1af0 <ti_2+0x110>
    1ad2:	0200                	addi	s0,sp,256
    1ad4:	0304                	addi	s1,sp,384
    1ad6:	0306                	slli	t1,t1,0x1
    1ad8:	097f                	0x97f
    1ada:	0002                	c.slli64	zero
    1adc:	0501                	addi	a0,a0,0
    1ade:	0311                	addi	t1,t1,4
    1ae0:	00020907          	0x20907
    1ae4:	0501                	addi	a0,a0,0
    1ae6:	00030623          	sb	zero,12(t1)
    1aea:	0009                	c.nop	2
    1aec:	0100                	addi	s0,sp,128
    1aee:	1905                	addi	s2,s2,-31
    1af0:	02090003          	lb	zero,32(s2)
    1af4:	0100                	addi	s0,sp,128
    1af6:	1305                	addi	t1,t1,-31
    1af8:	0306                	slli	t1,t1,0x1
    1afa:	097f                	0x97f
    1afc:	0002                	c.slli64	zero
    1afe:	0501                	addi	a0,a0,0
    1b00:	0618                	addi	a4,sp,768
    1b02:	00090003          	lb	zero,0(s2)
    1b06:	0100                	addi	s0,sp,128
    1b08:	1305                	addi	t1,t1,-31
    1b0a:	02090003          	lb	zero,32(s2)
    1b0e:	0100                	addi	s0,sp,128
    1b10:	0d05                	addi	s10,s10,1
    1b12:	0200                	addi	s0,sp,256
    1b14:	0204                	addi	s1,sp,256
    1b16:	0306                	slli	t1,t1,0x1
    1b18:	00040903          	lb	s2,0(s0)
    1b1c:	0501                	addi	a0,a0,0
    1b1e:	001f 0402 0602      	0x6020402001f
    1b24:	00090003          	lb	zero,0(s2)
    1b28:	0100                	addi	s0,sp,128
    1b2a:	2005                	jal	1b4a <ti_2+0x16a>
    1b2c:	0200                	addi	s0,sp,256
    1b2e:	0204                	addi	s1,sp,256
    1b30:	04097c03          	0x4097c03
    1b34:	0100                	addi	s0,sp,128
    1b36:	1505                	addi	a0,a0,-31
    1b38:	0200                	addi	s0,sp,256
    1b3a:	0204                	addi	s1,sp,256
    1b3c:	04090403          	lb	s0,64(s2)
    1b40:	0100                	addi	s0,sp,128
    1b42:	2005                	jal	1b62 <ti_2+0x182>
    1b44:	0200                	addi	s0,sp,256
    1b46:	0204                	addi	s1,sp,256
    1b48:	0306                	slli	t1,t1,0x1
    1b4a:	097c                	addi	a5,sp,156
    1b4c:	0004                	0x4
    1b4e:	0501                	addi	a0,a0,0
    1b50:	000d                	c.nop	3
    1b52:	0402                	c.slli64	s0
    1b54:	090b0303          	lb	t1,144(s6)
    1b58:	0002                	c.slli64	zero
    1b5a:	0501                	addi	a0,a0,0
    1b5c:	0402001b          	0x402001b
    1b60:	00030603          	lb	a2,0(t1)
    1b64:	0409                	addi	s0,s0,2
    1b66:	0100                	addi	s0,sp,128
    1b68:	1505                	addi	a0,a0,-31
    1b6a:	0200                	addi	s0,sp,256
    1b6c:	0304                	addi	s1,sp,384
    1b6e:	06090003          	lb	zero,96(s2)
    1b72:	0100                	addi	s0,sp,128
    1b74:	2005                	jal	1b94 <random_keys+0x24>
    1b76:	0200                	addi	s0,sp,256
    1b78:	0304                	addi	s1,sp,384
    1b7a:	02097f03          	0x2097f03
    1b7e:	0100                	addi	s0,sp,128
    1b80:	1505                	addi	a0,a0,-31
    1b82:	0200                	addi	s0,sp,256
    1b84:	0304                	addi	s1,sp,384
    1b86:	02090103          	lb	sp,32(s2)
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	2005                	jal	1bac <random_keys+0x3c>
    1b8e:	0200                	addi	s0,sp,256
    1b90:	0304                	addi	s1,sp,384
    1b92:	0306                	slli	t1,t1,0x1
    1b94:	097f                	0x97f
    1b96:	0002                	c.slli64	zero
    1b98:	0501                	addi	a0,a0,0
    1b9a:	0311                	addi	t1,t1,4
    1b9c:	00020907          	0x20907
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	00030623          	sb	zero,12(t1)
    1ba6:	0009                	c.nop	2
    1ba8:	0100                	addi	s0,sp,128
    1baa:	1905                	addi	s2,s2,-31
    1bac:	02090003          	lb	zero,32(s2)
    1bb0:	0100                	addi	s0,sp,128
    1bb2:	1305                	addi	t1,t1,-31
    1bb4:	0306                	slli	t1,t1,0x1
    1bb6:	097f                	0x97f
    1bb8:	0004                	0x4
    1bba:	0501                	addi	a0,a0,0
    1bbc:	0618                	addi	a4,sp,768
    1bbe:	00090003          	lb	zero,0(s2)
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	1305                	addi	t1,t1,-31
    1bc6:	04090003          	lb	zero,64(s2)
    1bca:	0100                	addi	s0,sp,128
    1bcc:	0d05                	addi	s10,s10,1
    1bce:	0200                	addi	s0,sp,256
    1bd0:	0204                	addi	s1,sp,256
    1bd2:	0306                	slli	t1,t1,0x1
    1bd4:	00040903          	lb	s2,0(s0)
    1bd8:	0501                	addi	a0,a0,0
    1bda:	001f 0402 0602      	0x6020402001f
    1be0:	00090003          	lb	zero,0(s2)
    1be4:	0100                	addi	s0,sp,128
    1be6:	2005                	jal	1c06 <random_keys+0x96>
    1be8:	0200                	addi	s0,sp,256
    1bea:	0204                	addi	s1,sp,256
    1bec:	04097c03          	0x4097c03
    1bf0:	0100                	addi	s0,sp,128
    1bf2:	1505                	addi	a0,a0,-31
    1bf4:	0200                	addi	s0,sp,256
    1bf6:	0204                	addi	s1,sp,256
    1bf8:	04090403          	lb	s0,64(s2)
    1bfc:	0100                	addi	s0,sp,128
    1bfe:	2005                	jal	1c1e <random_keys+0xae>
    1c00:	0200                	addi	s0,sp,256
    1c02:	0204                	addi	s1,sp,256
    1c04:	0306                	slli	t1,t1,0x1
    1c06:	097c                	addi	a5,sp,156
    1c08:	0004                	0x4
    1c0a:	0501                	addi	a0,a0,0
    1c0c:	000d                	c.nop	3
    1c0e:	0402                	c.slli64	s0
    1c10:	09080303          	lb	t1,144(a6)
    1c14:	0002                	c.slli64	zero
    1c16:	0501                	addi	a0,a0,0
    1c18:	0019                	c.nop	6
    1c1a:	0402                	c.slli64	s0
    1c1c:	00030603          	lb	a2,0(t1)
    1c20:	0009                	c.nop	2
    1c22:	0100                	addi	s0,sp,128
    1c24:	2305                	jal	2144 <_bss_end+0xdc>
    1c26:	0200                	addi	s0,sp,256
    1c28:	0304                	addi	s1,sp,384
    1c2a:	0a090003          	lb	zero,160(s2)
    1c2e:	0100                	addi	s0,sp,128
    1c30:	1d05                	addi	s10,s10,-31
    1c32:	0200                	addi	s0,sp,256
    1c34:	0304                	addi	s1,sp,384
    1c36:	04090003          	lb	zero,64(s2)
    1c3a:	0100                	addi	s0,sp,128
    1c3c:	1305                	addi	t1,t1,-31
    1c3e:	0200                	addi	s0,sp,256
    1c40:	0304                	addi	s1,sp,384
    1c42:	04090003          	lb	zero,64(s2)
    1c46:	0100                	addi	s0,sp,128
    1c48:	2005                	jal	1c68 <random_keys+0xf8>
    1c4a:	0200                	addi	s0,sp,256
    1c4c:	0304                	addi	s1,sp,384
    1c4e:	04097f03          	0x4097f03
    1c52:	0100                	addi	s0,sp,128
    1c54:	1d05                	addi	s10,s10,-31
    1c56:	0200                	addi	s0,sp,256
    1c58:	0304                	addi	s1,sp,384
    1c5a:	02090103          	lb	sp,32(s2)
    1c5e:	0100                	addi	s0,sp,128
    1c60:	1305                	addi	t1,t1,-31
    1c62:	0200                	addi	s0,sp,256
    1c64:	0304                	addi	s1,sp,384
    1c66:	02090003          	lb	zero,32(s2)
    1c6a:	0100                	addi	s0,sp,128
    1c6c:	2005                	jal	1c8c <random_keys+0x11c>
    1c6e:	0200                	addi	s0,sp,256
    1c70:	0304                	addi	s1,sp,384
    1c72:	0306                	slli	t1,t1,0x1
    1c74:	097f                	0x97f
    1c76:	0002                	c.slli64	zero
    1c78:	0501                	addi	a0,a0,0
    1c7a:	0311                	addi	t1,t1,4
    1c7c:	00040907          	0x40907
    1c80:	0501                	addi	a0,a0,0
    1c82:	061f 0003 0009      	0x90003061f
    1c88:	0100                	addi	s0,sp,128
    1c8a:	1705                	addi	a4,a4,-31
    1c8c:	02090003          	lb	zero,32(s2)
    1c90:	0100                	addi	s0,sp,128
    1c92:	1305                	addi	t1,t1,-31
    1c94:	0306                	slli	t1,t1,0x1
    1c96:	097f                	0x97f
    1c98:	0002                	c.slli64	zero
    1c9a:	0501                	addi	a0,a0,0
    1c9c:	0616                	slli	a2,a2,0x5
    1c9e:	00090003          	lb	zero,0(s2)
    1ca2:	0100                	addi	s0,sp,128
    1ca4:	1305                	addi	t1,t1,-31
    1ca6:	02090003          	lb	zero,32(s2)
    1caa:	0100                	addi	s0,sp,128
    1cac:	0d05                	addi	s10,s10,1
    1cae:	0200                	addi	s0,sp,256
    1cb0:	0204                	addi	s1,sp,256
    1cb2:	0306                	slli	t1,t1,0x1
    1cb4:	00040903          	lb	s2,0(s0)
    1cb8:	0501                	addi	a0,a0,0
    1cba:	0402001b          	0x402001b
    1cbe:	0602                	c.slli64	a2
    1cc0:	00090003          	lb	zero,0(s2)
    1cc4:	0100                	addi	s0,sp,128
    1cc6:	2005                	jal	1ce6 <random_keys+0x176>
    1cc8:	0200                	addi	s0,sp,256
    1cca:	0204                	addi	s1,sp,256
    1ccc:	04097c03          	0x4097c03
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	1305                	addi	t1,t1,-31
    1cd4:	0200                	addi	s0,sp,256
    1cd6:	0204                	addi	s1,sp,256
    1cd8:	04090403          	lb	s0,64(s2)
    1cdc:	0100                	addi	s0,sp,128
    1cde:	2005                	jal	1cfe <random_keys+0x18e>
    1ce0:	0200                	addi	s0,sp,256
    1ce2:	0204                	addi	s1,sp,256
    1ce4:	0306                	slli	t1,t1,0x1
    1ce6:	097c                	addi	a5,sp,156
    1ce8:	0004                	0x4
    1cea:	0501                	addi	a0,a0,0
    1cec:	000d                	c.nop	3
    1cee:	0402                	c.slli64	s0
    1cf0:	090b0303          	lb	t1,144(s6)
    1cf4:	0002                	c.slli64	zero
    1cf6:	0501                	addi	a0,a0,0
    1cf8:	0015                	c.nop	5
    1cfa:	0402                	c.slli64	s0
    1cfc:	00030603          	lb	a2,0(t1)
    1d00:	0409                	addi	s0,s0,2
    1d02:	0100                	addi	s0,sp,128
    1d04:	2005                	jal	1d24 <random_keys+0x1b4>
    1d06:	0200                	addi	s0,sp,256
    1d08:	0304                	addi	s1,sp,384
    1d0a:	06097f03          	0x6097f03
    1d0e:	0100                	addi	s0,sp,128
    1d10:	1505                	addi	a0,a0,-31
    1d12:	0200                	addi	s0,sp,256
    1d14:	0304                	addi	s1,sp,384
    1d16:	02090103          	lb	sp,32(s2)
    1d1a:	0100                	addi	s0,sp,128
    1d1c:	0d05                	addi	s10,s10,1
    1d1e:	0200                	addi	s0,sp,256
    1d20:	0304                	addi	s1,sp,384
    1d22:	0306                	slli	t1,t1,0x1
    1d24:	0901                	addi	s2,s2,0
    1d26:	0002                	c.slli64	zero
    1d28:	0501                	addi	a0,a0,0
    1d2a:	0019                	c.nop	6
    1d2c:	0402                	c.slli64	s0
    1d2e:	00030603          	lb	a2,0(t1)
    1d32:	0009                	c.nop	2
    1d34:	0100                	addi	s0,sp,128
    1d36:	1505                	addi	a0,a0,-31
    1d38:	0200                	addi	s0,sp,256
    1d3a:	0304                	addi	s1,sp,384
    1d3c:	06090103          	lb	sp,96(s2)
    1d40:	0100                	addi	s0,sp,128
    1d42:	0200                	addi	s0,sp,256
    1d44:	0304                	addi	s1,sp,384
    1d46:	0a097f03          	0xa097f03
    1d4a:	0100                	addi	s0,sp,128
    1d4c:	0d05                	addi	s10,s10,1
    1d4e:	0200                	addi	s0,sp,256
    1d50:	0304                	addi	s1,sp,384
    1d52:	0306                	slli	t1,t1,0x1
    1d54:	0901                	addi	s2,s2,0
    1d56:	0002                	c.slli64	zero
    1d58:	0501                	addi	a0,a0,0
    1d5a:	0015                	c.nop	5
    1d5c:	0402                	c.slli64	s0
    1d5e:	00030603          	lb	a2,0(t1)
    1d62:	0409                	addi	s0,s0,2
    1d64:	0100                	addi	s0,sp,128
    1d66:	1605                	addi	a2,a2,-31
    1d68:	0200                	addi	s0,sp,256
    1d6a:	0304                	addi	s1,sp,384
    1d6c:	04090303          	lb	t1,64(s2)
    1d70:	0100                	addi	s0,sp,128
    1d72:	1505                	addi	a0,a0,-31
    1d74:	0200                	addi	s0,sp,256
    1d76:	0304                	addi	s1,sp,384
    1d78:	02097d03          	0x2097d03
    1d7c:	0100                	addi	s0,sp,128
    1d7e:	0d05                	addi	s10,s10,1
    1d80:	0200                	addi	s0,sp,256
    1d82:	0304                	addi	s1,sp,384
    1d84:	0306                	slli	t1,t1,0x1
    1d86:	0901                	addi	s2,s2,0
    1d88:	0004                	0x4
    1d8a:	0501                	addi	a0,a0,0
    1d8c:	0019                	c.nop	6
    1d8e:	0402                	c.slli64	s0
    1d90:	00030603          	lb	a2,0(t1)
    1d94:	0009                	c.nop	2
    1d96:	0100                	addi	s0,sp,128
    1d98:	1505                	addi	a0,a0,-31
    1d9a:	0200                	addi	s0,sp,256
    1d9c:	0304                	addi	s1,sp,384
    1d9e:	04090003          	lb	zero,64(s2)
    1da2:	0100                	addi	s0,sp,128
    1da4:	0f05                	addi	t5,t5,1
    1da6:	0200                	addi	s0,sp,256
    1da8:	0304                	addi	s1,sp,384
    1daa:	0306                	slli	t1,t1,0x1
    1dac:	0901                	addi	s2,s2,0
    1dae:	0004                	0x4
    1db0:	0501                	addi	a0,a0,0
    1db2:	04020017          	auipc	zero,0x4020
    1db6:	00030603          	lb	a2,0(t1)
    1dba:	0009                	c.nop	2
    1dbc:	0100                	addi	s0,sp,128
    1dbe:	0d05                	addi	s10,s10,1
    1dc0:	0200                	addi	s0,sp,256
    1dc2:	0304                	addi	s1,sp,384
    1dc4:	0306                	slli	t1,t1,0x1
    1dc6:	0901                	addi	s2,s2,0
    1dc8:	0008                	0x8
    1dca:	0501                	addi	a0,a0,0
    1dcc:	0020                	addi	s0,sp,8
    1dce:	0402                	c.slli64	s0
    1dd0:	097a0303          	lb	t1,151(s4)
    1dd4:	0000                	unimp
    1dd6:	0501                	addi	a0,a0,0
    1dd8:	030d                	addi	t1,t1,3
    1dda:	090c                	addi	a1,sp,144
    1ddc:	0004                	0x4
    1dde:	0501                	addi	a0,a0,0
    1de0:	0003061b          	0x3061b
    1de4:	0009                	c.nop	2
    1de6:	0100                	addi	s0,sp,128
    1de8:	2005                	jal	1e08 <random_keys+0x298>
    1dea:	08090003          	lb	zero,128(s2)
    1dee:	0100                	addi	s0,sp,128
    1df0:	1005                	c.nop	-31
    1df2:	04090003          	lb	zero,64(s2)
    1df6:	0100                	addi	s0,sp,128
    1df8:	1e05                	addi	t3,t3,-31
    1dfa:	0200                	addi	s0,sp,256
    1dfc:	0204                	addi	s1,sp,256
    1dfe:	0306                	slli	t1,t1,0x1
    1e00:	097f                	0x97f
    1e02:	0004                	0x4
    1e04:	0501                	addi	a0,a0,0
    1e06:	000d                	c.nop	3
    1e08:	0402                	c.slli64	s0
    1e0a:	090d0303          	lb	t1,144(s10)
    1e0e:	0004                	0x4
    1e10:	0501                	addi	a0,a0,0
    1e12:	0020                	addi	s0,sp,8
    1e14:	0402                	c.slli64	s0
    1e16:	00030603          	lb	a2,0(t1)
    1e1a:	0009                	c.nop	2
    1e1c:	0100                	addi	s0,sp,128
    1e1e:	0200                	addi	s0,sp,256
    1e20:	0304                	addi	s1,sp,384
    1e22:	02097f03          	0x2097f03
    1e26:	0100                	addi	s0,sp,128
    1e28:	0200                	addi	s0,sp,256
    1e2a:	0304                	addi	s1,sp,384
    1e2c:	04090103          	lb	sp,64(s2)
    1e30:	0100                	addi	s0,sp,128
    1e32:	2505                	jal	2452 <_bss_end+0x3ea>
    1e34:	0200                	addi	s0,sp,256
    1e36:	0304                	addi	s1,sp,384
    1e38:	04090003          	lb	zero,64(s2)
    1e3c:	0100                	addi	s0,sp,128
    1e3e:	1505                	addi	a0,a0,-31
    1e40:	0200                	addi	s0,sp,256
    1e42:	0304                	addi	s1,sp,384
    1e44:	04090003          	lb	zero,64(s2)
    1e48:	0100                	addi	s0,sp,128
    1e4a:	2005                	jal	1e6a <random_keys+0x2fa>
    1e4c:	0200                	addi	s0,sp,256
    1e4e:	0304                	addi	s1,sp,384
    1e50:	0306                	slli	t1,t1,0x1
    1e52:	097f                	0x97f
    1e54:	0004                	0x4
    1e56:	0501                	addi	a0,a0,0
    1e58:	0328                	addi	a0,sp,392
    1e5a:	090c                	addi	a1,sp,144
    1e5c:	0002                	c.slli64	zero
    1e5e:	0501                	addi	a0,a0,0
    1e60:	0305                	addi	t1,t1,1
    1e62:	0901                	addi	s2,s2,0
    1e64:	0000                	unimp
    1e66:	0501                	addi	a0,a0,0
    1e68:	0628                	addi	a0,sp,776
    1e6a:	00097f03          	0x97f03
    1e6e:	0100                	addi	s0,sp,128
    1e70:	1205                	addi	tp,tp,-31
    1e72:	38090103          	lb	sp,896(s2)
    1e76:	0100                	addi	s0,sp,128
    1e78:	2805                	jal	1ea8 <random_keys+0x338>
    1e7a:	08097f03          	0x8097f03
    1e7e:	0100                	addi	s0,sp,128
    1e80:	00090003          	lb	zero,0(s2)
    1e84:	0100                	addi	s0,sp,128
    1e86:	0905                	addi	s2,s2,1
    1e88:	06090203          	lb	tp,96(s2)
    1e8c:	0100                	addi	s0,sp,128
    1e8e:	1205                	addi	tp,tp,-31
    1e90:	06097f03          	0x6097f03
    1e94:	0100                	addi	s0,sp,128
    1e96:	0905                	addi	s2,s2,1
    1e98:	08090103          	lb	sp,128(s2)
    1e9c:	0100                	addi	s0,sp,128
    1e9e:	1205                	addi	tp,tp,-31
    1ea0:	04097f03          	0x4097f03
    1ea4:	0100                	addi	s0,sp,128
    1ea6:	0505                	addi	a0,a0,1
    1ea8:	0306                	slli	t1,t1,0x1
    1eaa:	0901                	addi	s2,s2,0
    1eac:	0004                	0x4
    1eae:	0501                	addi	a0,a0,0
    1eb0:	0609                	addi	a2,a2,2
    1eb2:	00090003          	lb	zero,0(s2)
    1eb6:	0100                	addi	s0,sp,128
    1eb8:	06090103          	lb	sp,96(s2)
    1ebc:	0100                	addi	s0,sp,128
    1ebe:	0a097f03          	0xa097f03
    1ec2:	0100                	addi	s0,sp,128
    1ec4:	0505                	addi	a0,a0,1
    1ec6:	0306                	slli	t1,t1,0x1
    1ec8:	0901                	addi	s2,s2,0
    1eca:	006c                	addi	a1,sp,12
    1ecc:	0501                	addi	a0,a0,0
    1ece:	0610                	addi	a2,sp,768
    1ed0:	00090603          	lb	a2,0(s2)
    1ed4:	0100                	addi	s0,sp,128
    1ed6:	0905                	addi	s2,s2,1
    1ed8:	04097a03          	0x4097a03
    1edc:	0100                	addi	s0,sp,128
    1ede:	02090603          	lb	a2,32(s2)
    1ee2:	0100                	addi	s0,sp,128
    1ee4:	0e05                	addi	t3,t3,1
    1ee6:	0e090503          	lb	a0,224(s2)
    1eea:	0100                	addi	s0,sp,128
    1eec:	0905                	addi	s2,s2,1
    1eee:	0a097503          	0xa097503
    1ef2:	0100                	addi	s0,sp,128
    1ef4:	0505                	addi	a0,a0,1
    1ef6:	0306                	slli	t1,t1,0x1
    1ef8:	0902                	c.slli64	s2
    1efa:	0064                	addi	s1,sp,12
    1efc:	0301                	addi	t1,t1,0
    1efe:	0901                	addi	s2,s2,0
    1f00:	0000                	unimp
    1f02:	0301                	addi	t1,t1,0
    1f04:	0901                	addi	s2,s2,0
    1f06:	0000                	unimp
    1f08:	0301                	addi	t1,t1,0
    1f0a:	0901                	addi	s2,s2,0
    1f0c:	0000                	unimp
    1f0e:	0301                	addi	t1,t1,0
    1f10:	0901                	addi	s2,s2,0
    1f12:	0000                	unimp
    1f14:	0301                	addi	t1,t1,0
    1f16:	0901                	addi	s2,s2,0
    1f18:	0000                	unimp
    1f1a:	0301                	addi	t1,t1,0
    1f1c:	0901                	addi	s2,s2,0
    1f1e:	0000                	unimp
    1f20:	0301                	addi	t1,t1,0
    1f22:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1f26:	0301                	addi	t1,t1,0
    1f28:	0901                	addi	s2,s2,0
    1f2a:	0000                	unimp
    1f2c:	0501                	addi	a0,a0,0
    1f2e:	060e                	slli	a2,a2,0x3
    1f30:	00090003          	lb	zero,0(s2)
    1f34:	0100                	addi	s0,sp,128
    1f36:	0505                	addi	a0,a0,1
    1f38:	0306                	slli	t1,t1,0x1
    1f3a:	0902                	c.slli64	s2
    1f3c:	0004                	0x4
    1f3e:	0501                	addi	a0,a0,0
    1f40:	0003060b          	0x3060b
    1f44:	0009                	c.nop	2
    1f46:	0100                	addi	s0,sp,128
    1f48:	1005                	c.nop	-31
    1f4a:	0200                	addi	s0,sp,256
    1f4c:	0104                	addi	s1,sp,128
    1f4e:	0306                	slli	t1,t1,0x1
    1f50:	0900                	addi	s0,sp,144
    1f52:	0002                	c.slli64	zero
    1f54:	0501                	addi	a0,a0,0
    1f56:	0005                	c.nop	1
    1f58:	0402                	c.slli64	s0
    1f5a:	0601                	addi	a2,a2,0
    1f5c:	00090003          	lb	zero,0(s2)
    1f60:	0100                	addi	s0,sp,128
    1f62:	06090603          	lb	a2,96(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	1105                	addi	sp,sp,-31
    1f6a:	0200                	addi	s0,sp,256
    1f6c:	0104                	addi	s1,sp,128
    1f6e:	0306                	slli	t1,t1,0x1
    1f70:	0900                	addi	s0,sp,144
    1f72:	0004                	0x4
    1f74:	0501                	addi	a0,a0,0
    1f76:	0005                	c.nop	1
    1f78:	0402                	c.slli64	s0
    1f7a:	0601                	addi	a2,a2,0
    1f7c:	00090003          	lb	zero,0(s2)
    1f80:	0100                	addi	s0,sp,128
    1f82:	0b05                	addi	s6,s6,1
    1f84:	04090703          	lb	a4,64(s2)
    1f88:	0100                	addi	s0,sp,128
    1f8a:	1805                	addi	a6,a6,-31
    1f8c:	02090103          	lb	sp,32(s2)
    1f90:	0100                	addi	s0,sp,128
    1f92:	1005                	c.nop	-31
    1f94:	0200                	addi	s0,sp,256
    1f96:	0104                	addi	s1,sp,128
    1f98:	0306                	slli	t1,t1,0x1
    1f9a:	097f                	0x97f
    1f9c:	0008                	0x8
    1f9e:	0501                	addi	a0,a0,0
    1fa0:	0005                	c.nop	1
    1fa2:	0402                	c.slli64	s0
    1fa4:	0601                	addi	a2,a2,0
    1fa6:	00090003          	lb	zero,0(s2)
    1faa:	0100                	addi	s0,sp,128
    1fac:	1605                	addi	a2,a2,-31
    1fae:	08090503          	lb	a0,128(s2)
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	1805                	addi	a6,a6,-31
    1fb6:	08090103          	lb	sp,128(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	1005                	c.nop	-31
    1fbe:	0200                	addi	s0,sp,256
    1fc0:	0104                	addi	s1,sp,128
    1fc2:	0306                	slli	t1,t1,0x1
    1fc4:	097f                	0x97f
    1fc6:	0008                	0x8
    1fc8:	0501                	addi	a0,a0,0
    1fca:	0005                	c.nop	1
    1fcc:	0402                	c.slli64	s0
    1fce:	0601                	addi	a2,a2,0
    1fd0:	00090003          	lb	zero,0(s2)
    1fd4:	0100                	addi	s0,sp,128
    1fd6:	0306                	slli	t1,t1,0x1
    1fd8:	0905                	addi	s2,s2,1
    1fda:	0004                	0x4
    1fdc:	0501                	addi	a0,a0,0
    1fde:	061a                	slli	a2,a2,0x6
    1fe0:	00090303          	lb	t1,0(s2)
    1fe4:	0100                	addi	s0,sp,128
    1fe6:	0a05                	addi	s4,s4,1
    1fe8:	06097d03          	0x6097d03
    1fec:	0100                	addi	s0,sp,128
    1fee:	0505                	addi	a0,a0,1
    1ff0:	0306                	slli	t1,t1,0x1
    1ff2:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	0618                	addi	a4,sp,768
    1ffa:	02090103          	lb	sp,32(s2)
    1ffe:	0100                	addi	s0,sp,128
    2000:	1405                	addi	s0,s0,-31
    2002:	0200                	addi	s0,sp,256
    2004:	0104                	addi	s1,sp,128
    2006:	0306                	slli	t1,t1,0x1
    2008:	097f                	0x97f
    200a:	0008                	0x8
    200c:	0501                	addi	a0,a0,0
    200e:	0005                	c.nop	1
    2010:	0402                	c.slli64	s0
    2012:	0601                	addi	a2,a2,0
    2014:	00090003          	lb	zero,0(s2)
    2018:	0100                	addi	s0,sp,128
    201a:	0306                	slli	t1,t1,0x1
    201c:	0906                	slli	s2,s2,0x1
    201e:	0004                	0x4
    2020:	0501                	addi	a0,a0,0
    2022:	060a                	slli	a2,a2,0x2
    2024:	00090003          	lb	zero,0(s2)
    2028:	0100                	addi	s0,sp,128
    202a:	0505                	addi	a0,a0,1
    202c:	0306                	slli	t1,t1,0x1
    202e:	0904                	addi	s1,sp,144
    2030:	000c                	0xc
    2032:	0501                	addi	a0,a0,0
    2034:	061a                	slli	a2,a2,0x6
    2036:	06090003          	lb	zero,96(s2)
    203a:	0100                	addi	s0,sp,128
    203c:	1805                	addi	a6,a6,-31
    203e:	02090103          	lb	sp,32(s2)
    2042:	0100                	addi	s0,sp,128
    2044:	1405                	addi	s0,s0,-31
    2046:	0200                	addi	s0,sp,256
    2048:	0104                	addi	s1,sp,128
    204a:	0306                	slli	t1,t1,0x1
    204c:	097f                	0x97f
    204e:	0008                	0x8
    2050:	0501                	addi	a0,a0,0
    2052:	0005                	c.nop	1
    2054:	0402                	c.slli64	s0
    2056:	0601                	addi	a2,a2,0
    2058:	00090003          	lb	zero,0(s2)
    205c:	0100                	addi	s0,sp,128
    205e:	0306                	slli	t1,t1,0x1
    2060:	0905                	addi	s2,s2,1
    2062:	0004                	0x4
    2064:	0501                	addi	a0,a0,0
    2066:	060a                	slli	a2,a2,0x2
    2068:	00090003          	lb	zero,0(s2)
    206c:	0100                	addi	s0,sp,128
    206e:	0505                	addi	a0,a0,1
    2070:	0306                	slli	t1,t1,0x1
    2072:	000c0903          	lb	s2,0(s8)
    2076:	0501                	addi	a0,a0,0
    2078:	0003060b          	0x3060b
    207c:	0209                	addi	tp,tp,2
    207e:	0100                	addi	s0,sp,128
    2080:	1805                	addi	a6,a6,-31
    2082:	02090003          	lb	zero,32(s2)
    2086:	0100                	addi	s0,sp,128
    2088:	1005                	c.nop	-31
    208a:	0200                	addi	s0,sp,256
    208c:	0104                	addi	s1,sp,128
    208e:	0306                	slli	t1,t1,0x1
    2090:	0900                	addi	s0,sp,144
    2092:	0004                	0x4
    2094:	0501                	addi	a0,a0,0
    2096:	0005                	c.nop	1
    2098:	0402                	c.slli64	s0
    209a:	0601                	addi	a2,a2,0
    209c:	00090003          	lb	zero,0(s2)
    20a0:	0100                	addi	s0,sp,128
    20a2:	0306                	slli	t1,t1,0x1
    20a4:	0906                	slli	s2,s2,0x1
    20a6:	0004                	0x4
    20a8:	0501                	addi	a0,a0,0
    20aa:	060a                	slli	a2,a2,0x2
    20ac:	00090003          	lb	zero,0(s2)
    20b0:	0100                	addi	s0,sp,128
    20b2:	0505                	addi	a0,a0,1
    20b4:	0306                	slli	t1,t1,0x1
    20b6:	0904                	addi	s1,sp,144
    20b8:	0008                	0x8
    20ba:	0501                	addi	a0,a0,0
    20bc:	061a                	slli	a2,a2,0x6
    20be:	00090003          	lb	zero,0(s2)
    20c2:	0100                	addi	s0,sp,128
    20c4:	1805                	addi	a6,a6,-31
    20c6:	0a090103          	lb	sp,160(s2)
    20ca:	0100                	addi	s0,sp,128
    20cc:	1405                	addi	s0,s0,-31
    20ce:	0200                	addi	s0,sp,256
    20d0:	0104                	addi	s1,sp,128
    20d2:	0306                	slli	t1,t1,0x1
    20d4:	097f                	0x97f
    20d6:	0008                	0x8
    20d8:	0501                	addi	a0,a0,0
    20da:	0005                	c.nop	1
    20dc:	0402                	c.slli64	s0
    20de:	0601                	addi	a2,a2,0
    20e0:	02090003          	lb	zero,32(s2)
    20e4:	0100                	addi	s0,sp,128
    20e6:	1a05                	addi	s4,s4,-31
    20e8:	04090503          	lb	a0,64(s2)
    20ec:	0100                	addi	s0,sp,128
    20ee:	1805                	addi	a6,a6,-31
    20f0:	04090103          	lb	sp,64(s2)
    20f4:	0100                	addi	s0,sp,128
    20f6:	1a05                	addi	s4,s4,-31
    20f8:	08097f03          	0x8097f03
    20fc:	0100                	addi	s0,sp,128
    20fe:	1405                	addi	s0,s0,-31
    2100:	0200                	addi	s0,sp,256
    2102:	0104                	addi	s1,sp,128
    2104:	0306                	slli	t1,t1,0x1
    2106:	0900                	addi	s0,sp,144
    2108:	0008                	0x8
    210a:	0501                	addi	a0,a0,0
    210c:	0005                	c.nop	1
    210e:	0402                	c.slli64	s0
    2110:	0601                	addi	a2,a2,0
    2112:	00090003          	lb	zero,0(s2)
    2116:	0100                	addi	s0,sp,128
    2118:	0306                	slli	t1,t1,0x1
    211a:	0906                	slli	s2,s2,0x1
    211c:	0004                	0x4
    211e:	0301                	addi	t1,t1,0
    2120:	0901                	addi	s2,s2,0
    2122:	0000                	unimp
    2124:	0501                	addi	a0,a0,0
    2126:	0612                	slli	a2,a2,0x4
    2128:	00090003          	lb	zero,0(s2)
    212c:	0100                	addi	s0,sp,128
    212e:	0505                	addi	a0,a0,1
    2130:	0306                	slli	t1,t1,0x1
    2132:	0901                	addi	s2,s2,0
    2134:	000c                	0xc
    2136:	0501                	addi	a0,a0,0
    2138:	0601                	addi	a2,a2,0
    213a:	00090103          	lb	sp,0(s2)
    213e:	0100                	addi	s0,sp,128
    2140:	0905                	addi	s2,s2,1
    2142:	0200                	addi	s0,sp,256
    2144:	0304                	addi	s1,sp,384
    2146:	0306                	slli	t1,t1,0x1
    2148:	7fbd                	lui	t6,0xfffef
    214a:	4609                	li	a2,2
    214c:	0100                	addi	s0,sp,128
    214e:	1205                	addi	tp,tp,-31
    2150:	0200                	addi	s0,sp,256
    2152:	0304                	addi	s1,sp,384
    2154:	0306                	slli	t1,t1,0x1
    2156:	0900                	addi	s0,sp,144
    2158:	0000                	unimp
    215a:	0501                	addi	a0,a0,0
    215c:	04020017          	auipc	zero,0x4020
    2160:	7f030603          	lb	a2,2032(t1)
    2164:	0a09                	addi	s4,s4,2
    2166:	0100                	addi	s0,sp,128
    2168:	0905                	addi	s2,s2,1
    216a:	0200                	addi	s0,sp,256
    216c:	0304                	addi	s1,sp,384
    216e:	04090703          	lb	a4,64(s2)
    2172:	0100                	addi	s0,sp,128
    2174:	0e05                	addi	t3,t3,1
    2176:	0200                	addi	s0,sp,256
    2178:	0304                	addi	s1,sp,384
    217a:	0306                	slli	t1,t1,0x1
    217c:	0900                	addi	s0,sp,144
    217e:	0004                	0x4
    2180:	0501                	addi	a0,a0,0
    2182:	0009                	c.nop	2
    2184:	0402                	c.slli64	s0
    2186:	01030603          	lb	a2,16(t1)
    218a:	0a09                	addi	s4,s4,2
    218c:	0100                	addi	s0,sp,128
    218e:	0e05                	addi	t3,t3,1
    2190:	0200                	addi	s0,sp,256
    2192:	0304                	addi	s1,sp,384
    2194:	0306                	slli	t1,t1,0x1
    2196:	0900                	addi	s0,sp,144
    2198:	0000                	unimp
    219a:	0501                	addi	a0,a0,0
    219c:	0019                	c.nop	6
    219e:	0402                	c.slli64	s0
    21a0:	7e030603          	lb	a2,2016(t1)
    21a4:	0a09                	addi	s4,s4,2
    21a6:	0100                	addi	s0,sp,128
    21a8:	0905                	addi	s2,s2,1
    21aa:	0200                	addi	s0,sp,256
    21ac:	0304                	addi	s1,sp,384
    21ae:	04090803          	lb	a6,64(s2)
    21b2:	0100                	addi	s0,sp,128
    21b4:	1b05                	addi	s6,s6,-31
    21b6:	0200                	addi	s0,sp,256
    21b8:	0304                	addi	s1,sp,384
    21ba:	0306                	slli	t1,t1,0x1
    21bc:	0900                	addi	s0,sp,144
    21be:	0004                	0x4
    21c0:	0501                	addi	a0,a0,0
    21c2:	0018                	0x18
    21c4:	0402                	c.slli64	s0
    21c6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21ca:	0004                	0x4
    21cc:	0501                	addi	a0,a0,0
    21ce:	0402001b          	0x402001b
    21d2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21d6:	0004                	0x4
    21d8:	0501                	addi	a0,a0,0
    21da:	0018                	0x18
    21dc:	0402                	c.slli64	s0
    21de:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21e2:	0002                	c.slli64	zero
    21e4:	0501                	addi	a0,a0,0
    21e6:	04020017          	auipc	zero,0x4020
    21ea:	097f0303          	lb	t1,151(t5)
    21ee:	0002                	c.slli64	zero
    21f0:	0501                	addi	a0,a0,0
    21f2:	0018                	0x18
    21f4:	0402                	c.slli64	s0
    21f6:	09010303          	lb	t1,144(sp)
    21fa:	0002                	c.slli64	zero
    21fc:	0501                	addi	a0,a0,0
    21fe:	04020017          	auipc	zero,0x4020
    2202:	7f030603          	lb	a2,2032(t1)
    2206:	0209                	addi	tp,tp,2
    2208:	0100                	addi	s0,sp,128
    220a:	0905                	addi	s2,s2,1
    220c:	0200                	addi	s0,sp,256
    220e:	0304                	addi	s1,sp,384
    2210:	02090603          	lb	a2,32(s2)
    2214:	0100                	addi	s0,sp,128
    2216:	1805                	addi	a6,a6,-31
    2218:	0200                	addi	s0,sp,256
    221a:	0304                	addi	s1,sp,384
    221c:	0306                	slli	t1,t1,0x1
    221e:	0900                	addi	s0,sp,144
    2220:	0000                	unimp
    2222:	0501                	addi	a0,a0,0
    2224:	0402001b          	0x402001b
    2228:	7f030603          	lb	a2,2032(t1)
    222c:	0a09                	addi	s4,s4,2
    222e:	0100                	addi	s0,sp,128
    2230:	0905                	addi	s2,s2,1
    2232:	0200                	addi	s0,sp,256
    2234:	0304                	addi	s1,sp,384
    2236:	06090903          	lb	s2,96(s2)
    223a:	0100                	addi	s0,sp,128
    223c:	1c05                	addi	s8,s8,-31
    223e:	0200                	addi	s0,sp,256
    2240:	0304                	addi	s1,sp,384
    2242:	0306                	slli	t1,t1,0x1
    2244:	0900                	addi	s0,sp,144
    2246:	0000                	unimp
    2248:	0501                	addi	a0,a0,0
    224a:	0018                	0x18
    224c:	0402                	c.slli64	s0
    224e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2252:	0002                	c.slli64	zero
    2254:	0501                	addi	a0,a0,0
    2256:	001f 0402 0603      	0x6030402001f
    225c:	08097f03          	0x8097f03
    2260:	0100                	addi	s0,sp,128
    2262:	0905                	addi	s2,s2,1
    2264:	0200                	addi	s0,sp,256
    2266:	0304                	addi	s1,sp,384
    2268:	06090b03          	lb	s6,96(s2)
    226c:	0100                	addi	s0,sp,128
    226e:	1c05                	addi	s8,s8,-31
    2270:	0200                	addi	s0,sp,256
    2272:	0304                	addi	s1,sp,384
    2274:	0306                	slli	t1,t1,0x1
    2276:	0900                	addi	s0,sp,144
    2278:	0004                	0x4
    227a:	0501                	addi	a0,a0,0
    227c:	0018                	0x18
    227e:	0402                	c.slli64	s0
    2280:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2284:	0008                	0x8
    2286:	0501                	addi	a0,a0,0
    2288:	001f 0402 0303      	0x3030402001f
    228e:	097f                	0x97f
    2290:	0002                	c.slli64	zero
    2292:	0501                	addi	a0,a0,0
    2294:	0018                	0x18
    2296:	0402                	c.slli64	s0
    2298:	09010303          	lb	t1,144(sp)
    229c:	0002                	c.slli64	zero
    229e:	0501                	addi	a0,a0,0
    22a0:	001f 0402 0603      	0x6030402001f
    22a6:	02097f03          	0x2097f03
    22aa:	0100                	addi	s0,sp,128
    22ac:	0905                	addi	s2,s2,1
    22ae:	0200                	addi	s0,sp,256
    22b0:	0304                	addi	s1,sp,384
    22b2:	02090903          	lb	s2,32(s2)
    22b6:	0100                	addi	s0,sp,128
    22b8:	1605                	addi	a2,a2,-31
    22ba:	0200                	addi	s0,sp,256
    22bc:	0304                	addi	s1,sp,384
    22be:	0306                	slli	t1,t1,0x1
    22c0:	0900                	addi	s0,sp,144
    22c2:	0000                	unimp
    22c4:	0501                	addi	a0,a0,0
    22c6:	001d                	c.nop	7
    22c8:	0402                	c.slli64	s0
    22ca:	097f0303          	lb	t1,151(t5)
    22ce:	0002                	c.slli64	zero
    22d0:	0501                	addi	a0,a0,0
    22d2:	0016                	c.slli	zero,0x5
    22d4:	0402                	c.slli64	s0
    22d6:	09010303          	lb	t1,144(sp)
    22da:	0004                	0x4
    22dc:	0501                	addi	a0,a0,0
    22de:	0402000f          	0x402000f
    22e2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    22e6:	0004                	0x4
    22e8:	0501                	addi	a0,a0,0
    22ea:	001d                	c.nop	7
    22ec:	0402                	c.slli64	s0
    22ee:	7f030603          	lb	a2,2032(t1)
    22f2:	0409                	addi	s0,s0,2
    22f4:	0100                	addi	s0,sp,128
    22f6:	0905                	addi	s2,s2,1
    22f8:	0200                	addi	s0,sp,256
    22fa:	0304                	addi	s1,sp,384
    22fc:	02090b03          	lb	s6,32(s2)
    2300:	0100                	addi	s0,sp,128
    2302:	1c05                	addi	s8,s8,-31
    2304:	0200                	addi	s0,sp,256
    2306:	0304                	addi	s1,sp,384
    2308:	0306                	slli	t1,t1,0x1
    230a:	0900                	addi	s0,sp,144
    230c:	0000                	unimp
    230e:	0501                	addi	a0,a0,0
    2310:	0018                	0x18
    2312:	0402                	c.slli64	s0
    2314:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2318:	0004                	0x4
    231a:	0501                	addi	a0,a0,0
    231c:	001f 0402 0603      	0x6030402001f
    2322:	08097f03          	0x8097f03
    2326:	0100                	addi	s0,sp,128
    2328:	0905                	addi	s2,s2,1
    232a:	0200                	addi	s0,sp,256
    232c:	0304                	addi	s1,sp,384
    232e:	04090603          	lb	a2,64(s2)
    2332:	0100                	addi	s0,sp,128
    2334:	1805                	addi	a6,a6,-31
    2336:	0200                	addi	s0,sp,256
    2338:	0304                	addi	s1,sp,384
    233a:	0306                	slli	t1,t1,0x1
    233c:	0900                	addi	s0,sp,144
    233e:	0004                	0x4
    2340:	0501                	addi	a0,a0,0
    2342:	001f 0402 0303      	0x3030402001f
    2348:	0900                	addi	s0,sp,144
    234a:	0004                	0x4
    234c:	0501                	addi	a0,a0,0
    234e:	0018                	0x18
    2350:	0402                	c.slli64	s0
    2352:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2356:	0004                	0x4
    2358:	0501                	addi	a0,a0,0
    235a:	0021                	c.nop	8
    235c:	0402                	c.slli64	s0
    235e:	097f0303          	lb	t1,151(t5)
    2362:	0002                	c.slli64	zero
    2364:	0501                	addi	a0,a0,0
    2366:	0018                	0x18
    2368:	0402                	c.slli64	s0
    236a:	09010303          	lb	t1,144(sp)
    236e:	0002                	c.slli64	zero
    2370:	0501                	addi	a0,a0,0
    2372:	0021                	c.nop	8
    2374:	0402                	c.slli64	s0
    2376:	7f030603          	lb	a2,2032(t1)
    237a:	0209                	addi	tp,tp,2
    237c:	0100                	addi	s0,sp,128
    237e:	4b05                	li	s6,1
    2380:	02090c03          	lb	s8,32(s2)
    2384:	0100                	addi	s0,sp,128
    2386:	0505                	addi	a0,a0,1
    2388:	00090103          	lb	sp,0(s2)
    238c:	0100                	addi	s0,sp,128
    238e:	4b05                	li	s6,1
    2390:	0306                	slli	t1,t1,0x1
    2392:	097f                	0x97f
    2394:	0000                	unimp
    2396:	0501                	addi	a0,a0,0
    2398:	0312                	slli	t1,t1,0x4
    239a:	0901                	addi	s2,s2,0
    239c:	0002                	c.slli64	zero
    239e:	0501                	addi	a0,a0,0
    23a0:	097f034b          	fnmsub.s	ft6,ft10,fs7,ft1,rne
    23a4:	0008                	0x8
    23a6:	0501                	addi	a0,a0,0
    23a8:	0309                	addi	t1,t1,2
    23aa:	0905                	addi	s2,s2,1
    23ac:	000c                	0xc
    23ae:	0501                	addi	a0,a0,0
    23b0:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    23b4:	0004                	0x4
    23b6:	0501                	addi	a0,a0,0
    23b8:	0312                	slli	t1,t1,0x4
    23ba:	0901                	addi	s2,s2,0
    23bc:	0002                	c.slli64	zero
    23be:	0501                	addi	a0,a0,0
    23c0:	0309                	addi	t1,t1,2
    23c2:	0904                	addi	s1,sp,144
    23c4:	0008                	0x8
    23c6:	0501                	addi	a0,a0,0
    23c8:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    23cc:	000a                	c.slli	zero,0x2
    23ce:	0301                	addi	t1,t1,0
    23d0:	0900                	addi	s0,sp,144
    23d2:	0006                	c.slli	zero,0x1
    23d4:	0501                	addi	a0,a0,0
    23d6:	0312                	slli	t1,t1,0x4
    23d8:	0901                	addi	s2,s2,0
    23da:	0004                	0x4
    23dc:	0501                	addi	a0,a0,0
    23de:	0605                	addi	a2,a2,1
    23e0:	04090103          	lb	sp,64(s2)
    23e4:	0100                	addi	s0,sp,128
    23e6:	00090103          	lb	sp,0(s2)
    23ea:	0100                	addi	s0,sp,128
    23ec:	00090203          	lb	tp,0(s2)
    23f0:	0100                	addi	s0,sp,128
    23f2:	0905                	addi	s2,s2,1
    23f4:	0306                	slli	t1,t1,0x1
    23f6:	0900                	addi	s0,sp,144
    23f8:	0000                	unimp
    23fa:	0501                	addi	a0,a0,0
    23fc:	0605                	addi	a2,a2,1
    23fe:	02090103          	lb	sp,32(s2)
    2402:	0100                	addi	s0,sp,128
    2404:	00090103          	lb	sp,0(s2)
    2408:	0100                	addi	s0,sp,128
    240a:	00090303          	lb	t1,0(s2)
    240e:	0100                	addi	s0,sp,128
    2410:	0c05                	addi	s8,s8,1
    2412:	0306                	slli	t1,t1,0x1
    2414:	0900                	addi	s0,sp,144
    2416:	0000                	unimp
    2418:	0501                	addi	a0,a0,0
    241a:	0301                	addi	t1,t1,0
    241c:	00120907          	0x120907
    2420:	0501                	addi	a0,a0,0
    2422:	030c                	addi	a1,sp,384
    2424:	0979                	addi	s2,s2,30
    2426:	0006                	c.slli	zero,0x1
    2428:	0501                	addi	a0,a0,0
    242a:	0601                	addi	a2,a2,0
    242c:	02090703          	lb	a4,32(s2)
    2430:	0100                	addi	s0,sp,128
    2432:	0a05                	addi	s4,s4,1
    2434:	0306                	slli	t1,t1,0x1
    2436:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    243a:	0501                	addi	a0,a0,0
    243c:	0301                	addi	t1,t1,0
    243e:	097d                	addi	s2,s2,31
    2440:	0004                	0x4
    2442:	0501                	addi	a0,a0,0
    2444:	0605                	addi	a2,a2,1
    2446:	04090303          	lb	t1,64(s2)
    244a:	0100                	addi	s0,sp,128
    244c:	0a05                	addi	s4,s4,1
    244e:	0306                	slli	t1,t1,0x1
    2450:	0900                	addi	s0,sp,144
    2452:	0000                	unimp
    2454:	0501                	addi	a0,a0,0
    2456:	0605                	addi	a2,a2,1
    2458:	10090203          	lb	tp,256(s2)
    245c:	0100                	addi	s0,sp,128
    245e:	1a05                	addi	s4,s4,-31
    2460:	0306                	slli	t1,t1,0x1
    2462:	0900                	addi	s0,sp,144
    2464:	0000                	unimp
    2466:	0501                	addi	a0,a0,0
    2468:	0014                	0x14
    246a:	0402                	c.slli64	s0
    246c:	0601                	addi	a2,a2,0
    246e:	08090003          	lb	zero,128(s2)
    2472:	0100                	addi	s0,sp,128
    2474:	0505                	addi	a0,a0,1
    2476:	0200                	addi	s0,sp,256
    2478:	0104                	addi	s1,sp,128
    247a:	0306                	slli	t1,t1,0x1
    247c:	0900                	addi	s0,sp,144
    247e:	0000                	unimp
    2480:	0601                	addi	a2,a2,0
    2482:	04090703          	lb	a4,64(s2)
    2486:	0100                	addi	s0,sp,128
    2488:	00090103          	lb	sp,0(s2)
    248c:	0100                	addi	s0,sp,128
    248e:	0105                	addi	sp,sp,1
    2490:	0306                	slli	t1,t1,0x1
    2492:	0902                	c.slli64	s2
    2494:	0000                	unimp
    2496:	0501                	addi	a0,a0,0
    2498:	0312                	slli	t1,t1,0x4
    249a:	097e                	slli	s2,s2,0x1f
    249c:	0004                	0x4
    249e:	0501                	addi	a0,a0,0
    24a0:	0605                	addi	a2,a2,1
    24a2:	0c090103          	lb	sp,192(s2)
    24a6:	0100                	addi	s0,sp,128
    24a8:	0105                	addi	sp,sp,1
    24aa:	0306                	slli	t1,t1,0x1
    24ac:	0901                	addi	s2,s2,0
    24ae:	0000                	unimp
    24b0:	0501                	addi	a0,a0,0
    24b2:	0009                	c.nop	2
    24b4:	0402                	c.slli64	s0
    24b6:	77030603          	lb	a2,1904(t1)
    24ba:	0e09                	addi	t3,t3,2
    24bc:	0100                	addi	s0,sp,128
    24be:	1905                	addi	s2,s2,-31
    24c0:	0200                	addi	s0,sp,256
    24c2:	0304                	addi	s1,sp,384
    24c4:	0306                	slli	t1,t1,0x1
    24c6:	0900                	addi	s0,sp,144
    24c8:	0000                	unimp
    24ca:	0501                	addi	a0,a0,0
    24cc:	001f 0402 0303      	0x3030402001f
    24d2:	097f                	0x97f
    24d4:	0008                	0x8
    24d6:	0501                	addi	a0,a0,0
    24d8:	0015                	c.nop	5
    24da:	0402                	c.slli64	s0
    24dc:	09010303          	lb	t1,144(sp)
    24e0:	0004                	0x4
    24e2:	0501                	addi	a0,a0,0
    24e4:	001f 0402 0603      	0x6030402001f
    24ea:	04097f03          	0x4097f03
    24ee:	0100                	addi	s0,sp,128
    24f0:	6c05                	lui	s8,0x1
    24f2:	02090d03          	lb	s10,32(s2)
    24f6:	0100                	addi	s0,sp,128
    24f8:	0205                	addi	tp,tp,1
    24fa:	00090103          	lb	sp,0(s2)
    24fe:	0100                	addi	s0,sp,128
    2500:	6c05                	lui	s8,0x1
    2502:	0306                	slli	t1,t1,0x1
    2504:	097f                	0x97f
    2506:	0000                	unimp
    2508:	0501                	addi	a0,a0,0
    250a:	031e                	slli	t1,t1,0x7
    250c:	0911                	addi	s2,s2,4
    250e:	0008                	0x8
    2510:	0501                	addi	a0,a0,0
    2512:	036c                	addi	a1,sp,396
    2514:	0006096f          	jal	s2,62514 <_stack_start+0x52514>
    2518:	0501                	addi	a0,a0,0
    251a:	0901030f          	0x901030f
    251e:	0004                	0x4
    2520:	0501                	addi	a0,a0,0
    2522:	036c                	addi	a1,sp,396
    2524:	097f                	0x97f
    2526:	0004                	0x4
    2528:	0501                	addi	a0,a0,0
    252a:	0901030f          	0x901030f
    252e:	0002                	c.slli64	zero
    2530:	0501                	addi	a0,a0,0
    2532:	036c                	addi	a1,sp,396
    2534:	097f                	0x97f
    2536:	000c                	0xc
    2538:	0501                	addi	a0,a0,0
    253a:	0309                	addi	t1,t1,2
    253c:	090a                	slli	s2,s2,0x2
    253e:	0008                	0x8
    2540:	0501                	addi	a0,a0,0
    2542:	0977030f          	0x977030f
    2546:	0002                	c.slli64	zero
    2548:	0501                	addi	a0,a0,0
    254a:	0605                	addi	a2,a2,1
    254c:	04090103          	lb	sp,64(s2)
    2550:	0100                	addi	s0,sp,128
    2552:	00090103          	lb	sp,0(s2)
    2556:	0100                	addi	s0,sp,128
    2558:	00090103          	lb	sp,0(s2)
    255c:	0100                	addi	s0,sp,128
    255e:	00090103          	lb	sp,0(s2)
    2562:	0100                	addi	s0,sp,128
    2564:	00090103          	lb	sp,0(s2)
    2568:	0100                	addi	s0,sp,128
    256a:	00090103          	lb	sp,0(s2)
    256e:	0100                	addi	s0,sp,128
    2570:	00090303          	lb	t1,0(s2)
    2574:	0100                	addi	s0,sp,128
    2576:	0905                	addi	s2,s2,1
    2578:	0306                	slli	t1,t1,0x1
    257a:	0900                	addi	s0,sp,144
    257c:	0000                	unimp
    257e:	0501                	addi	a0,a0,0
    2580:	036c                	addi	a1,sp,396
    2582:	0976                	slli	s2,s2,0x1d
    2584:	0004                	0x4
    2586:	0501                	addi	a0,a0,0
    2588:	0309                	addi	t1,t1,2
    258a:	090a                	slli	s2,s2,0x2
    258c:	0002                	c.slli64	zero
    258e:	0501                	addi	a0,a0,0
    2590:	036c                	addi	a1,sp,396
    2592:	0976                	slli	s2,s2,0x1d
    2594:	0002                	c.slli64	zero
    2596:	0301                	addi	t1,t1,0
    2598:	0900                	addi	s0,sp,144
    259a:	0008                	0x8
    259c:	0501                	addi	a0,a0,0
    259e:	030a                	slli	t1,t1,0x2
    25a0:	090e                	slli	s2,s2,0x3
    25a2:	0002                	c.slli64	zero
    25a4:	0501                	addi	a0,a0,0
    25a6:	0309                	addi	t1,t1,2
    25a8:	097c                	addi	a5,sp,156
    25aa:	0004                	0x4
    25ac:	0501                	addi	a0,a0,0
    25ae:	0605                	addi	a2,a2,1
    25b0:	04090403          	lb	s0,64(s2)
    25b4:	0100                	addi	s0,sp,128
    25b6:	0a05                	addi	s4,s4,1
    25b8:	0306                	slli	t1,t1,0x1
    25ba:	0900                	addi	s0,sp,144
    25bc:	0000                	unimp
    25be:	0501                	addi	a0,a0,0
    25c0:	0605                	addi	a2,a2,1
    25c2:	12090303          	lb	t1,288(s2)
    25c6:	0100                	addi	s0,sp,128
    25c8:	0b05                	addi	s6,s6,1
    25ca:	0306                	slli	t1,t1,0x1
    25cc:	0900                	addi	s0,sp,144
    25ce:	0004                	0x4
    25d0:	0501                	addi	a0,a0,0
    25d2:	0014                	0x14
    25d4:	0402                	c.slli64	s0
    25d6:	0601                	addi	a2,a2,0
    25d8:	02090003          	lb	zero,32(s2)
    25dc:	0100                	addi	s0,sp,128
    25de:	0505                	addi	a0,a0,1
    25e0:	0200                	addi	s0,sp,256
    25e2:	0104                	addi	s1,sp,128
    25e4:	0306                	slli	t1,t1,0x1
    25e6:	0900                	addi	s0,sp,144
    25e8:	0000                	unimp
    25ea:	0501                	addi	a0,a0,0
    25ec:	0316                	slli	t1,t1,0x5
    25ee:	0906                	slli	s2,s2,0x1
    25f0:	0004                	0x4
    25f2:	0501                	addi	a0,a0,0
    25f4:	030c                	addi	a1,sp,384
    25f6:	097f                	0x97f
    25f8:	0006                	c.slli	zero,0x1
    25fa:	0501                	addi	a0,a0,0
    25fc:	0011                	c.nop	4
    25fe:	0402                	c.slli64	s0
    2600:	0601                	addi	a2,a2,0
    2602:	02090003          	lb	zero,32(s2)
    2606:	0100                	addi	s0,sp,128
    2608:	0505                	addi	a0,a0,1
    260a:	0200                	addi	s0,sp,256
    260c:	0104                	addi	s1,sp,128
    260e:	0306                	slli	t1,t1,0x1
    2610:	0900                	addi	s0,sp,144
    2612:	0000                	unimp
    2614:	0601                	addi	a2,a2,0
    2616:	04090803          	lb	a6,64(s2)
    261a:	0100                	addi	s0,sp,128
    261c:	0905                	addi	s2,s2,1
    261e:	0306                	slli	t1,t1,0x1
    2620:	0900                	addi	s0,sp,144
    2622:	0000                	unimp
    2624:	0501                	addi	a0,a0,0
    2626:	0605                	addi	a2,a2,1
    2628:	0c090403          	lb	s0,192(s2)
    262c:	0100                	addi	s0,sp,128
    262e:	0a05                	addi	s4,s4,1
    2630:	0306                	slli	t1,t1,0x1
    2632:	0900                	addi	s0,sp,144
    2634:	0000                	unimp
    2636:	0501                	addi	a0,a0,0
    2638:	0605                	addi	a2,a2,1
    263a:	0c090103          	lb	sp,192(s2)
    263e:	0100                	addi	s0,sp,128
    2640:	1405                	addi	s0,s0,-31
    2642:	0200                	addi	s0,sp,256
    2644:	0104                	addi	s1,sp,128
    2646:	02090003          	lb	zero,32(s2)
    264a:	0100                	addi	s0,sp,128
    264c:	0505                	addi	a0,a0,1
    264e:	0200                	addi	s0,sp,256
    2650:	0104                	addi	s1,sp,128
    2652:	0306                	slli	t1,t1,0x1
    2654:	0900                	addi	s0,sp,144
    2656:	0000                	unimp
    2658:	0601                	addi	a2,a2,0
    265a:	04090503          	lb	a0,64(s2)
    265e:	0100                	addi	s0,sp,128
    2660:	00090103          	lb	sp,0(s2)
    2664:	0100                	addi	s0,sp,128
    2666:	0105                	addi	sp,sp,1
    2668:	0306                	slli	t1,t1,0x1
    266a:	0902                	c.slli64	s2
    266c:	0000                	unimp
    266e:	0501                	addi	a0,a0,0
    2670:	0312                	slli	t1,t1,0x4
    2672:	097e                	slli	s2,s2,0x1f
    2674:	0004                	0x4
    2676:	0501                	addi	a0,a0,0
    2678:	0605                	addi	a2,a2,1
    267a:	0c090103          	lb	sp,192(s2)
    267e:	0100                	addi	s0,sp,128
    2680:	0105                	addi	sp,sp,1
    2682:	0306                	slli	t1,t1,0x1
    2684:	0901                	addi	s2,s2,0
    2686:	0000                	unimp
    2688:	0501                	addi	a0,a0,0
    268a:	0009                	c.nop	2
    268c:	0402                	c.slli64	s0
    268e:	67030603          	lb	a2,1648(t1)
    2692:	1409                	addi	s0,s0,-30
    2694:	0100                	addi	s0,sp,128
    2696:	1905                	addi	s2,s2,-31
    2698:	0200                	addi	s0,sp,256
    269a:	0304                	addi	s1,sp,384
    269c:	0306                	slli	t1,t1,0x1
    269e:	0900                	addi	s0,sp,144
    26a0:	0000                	unimp
    26a2:	0501                	addi	a0,a0,0
    26a4:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    26a8:	097f0303          	lb	t1,151(t5)
    26ac:	0008                	0x8
    26ae:	0501                	addi	a0,a0,0
    26b0:	0015                	c.nop	5
    26b2:	0402                	c.slli64	s0
    26b4:	09010303          	lb	t1,144(sp)
    26b8:	0004                	0x4
    26ba:	0501                	addi	a0,a0,0
    26bc:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    26c0:	7f030603          	lb	a2,2032(t1)
    26c4:	0409                	addi	s0,s0,2
    26c6:	0100                	addi	s0,sp,128
    26c8:	0905                	addi	s2,s2,1
    26ca:	02090603          	lb	a2,32(s2)
    26ce:	0100                	addi	s0,sp,128
    26d0:	0e05                	addi	t3,t3,1
    26d2:	0306                	slli	t1,t1,0x1
    26d4:	0900                	addi	s0,sp,144
    26d6:	0000                	unimp
    26d8:	0501                	addi	a0,a0,0
    26da:	0900030b          	0x900030b
    26de:	0002                	c.slli64	zero
    26e0:	0501                	addi	a0,a0,0
    26e2:	060d                	addi	a2,a2,3
    26e4:	04090303          	lb	t1,64(s2)
    26e8:	0100                	addi	s0,sp,128
    26ea:	1905                	addi	s2,s2,-31
    26ec:	0306                	slli	t1,t1,0x1
    26ee:	0900                	addi	s0,sp,144
    26f0:	0000                	unimp
    26f2:	0501                	addi	a0,a0,0
    26f4:	09000313          	li	t1,144
    26f8:	0004                	0x4
    26fa:	0501                	addi	a0,a0,0
    26fc:	0018                	0x18
    26fe:	0402                	c.slli64	s0
    2700:	0602                	c.slli64	a2
    2702:	02097c03          	0x2097c03
    2706:	0100                	addi	s0,sp,128
    2708:	0905                	addi	s2,s2,1
    270a:	0200                	addi	s0,sp,256
    270c:	0304                	addi	s1,sp,384
    270e:	06090e03          	lb	t3,96(s2)
    2712:	0100                	addi	s0,sp,128
    2714:	1905                	addi	s2,s2,-31
    2716:	0200                	addi	s0,sp,256
    2718:	0304                	addi	s1,sp,384
    271a:	0306                	slli	t1,t1,0x1
    271c:	0900                	addi	s0,sp,144
    271e:	0000                	unimp
    2720:	0501                	addi	a0,a0,0
    2722:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2726:	097f0303          	lb	t1,151(t5)
    272a:	0008                	0x8
    272c:	0501                	addi	a0,a0,0
    272e:	0015                	c.nop	5
    2730:	0402                	c.slli64	s0
    2732:	09010303          	lb	t1,144(sp)
    2736:	0004                	0x4
    2738:	0501                	addi	a0,a0,0
    273a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    273e:	7f030603          	lb	a2,2032(t1)
    2742:	0409                	addi	s0,s0,2
    2744:	0100                	addi	s0,sp,128
    2746:	0209                	addi	tp,tp,2
    2748:	0000                	unimp
    274a:	0101                	addi	sp,sp,0
    274c:	0b05                	addi	s6,s6,1
    274e:	0500                	addi	s0,sp,640
    2750:	4c02                	lw	s8,0(sp)
    2752:	0010                	0x10
    2754:	0300                	addi	s0,sp,384
    2756:	0590                	addi	a2,sp,704
    2758:	0501                	addi	a0,a0,0
    275a:	0305                	addi	t1,t1,1
    275c:	0901                	addi	s2,s2,0
    275e:	0000                	unimp
    2760:	0301                	addi	t1,t1,0
    2762:	0901                	addi	s2,s2,0
    2764:	0000                	unimp
    2766:	0301                	addi	t1,t1,0
    2768:	0901                	addi	s2,s2,0
    276a:	0000                	unimp
    276c:	0301                	addi	t1,t1,0
    276e:	0901                	addi	s2,s2,0
    2770:	0000                	unimp
    2772:	0301                	addi	t1,t1,0
    2774:	0901                	addi	s2,s2,0
    2776:	0000                	unimp
    2778:	0301                	addi	t1,t1,0
    277a:	0901                	addi	s2,s2,0
    277c:	0000                	unimp
    277e:	0301                	addi	t1,t1,0
    2780:	0902                	c.slli64	s2
    2782:	0000                	unimp
    2784:	0501                	addi	a0,a0,0
    2786:	7803060b          	0x7803060b
    278a:	0009                	c.nop	2
    278c:	0100                	addi	s0,sp,128
    278e:	0905                	addi	s2,s2,1
    2790:	04090803          	lb	a6,64(s2)
    2794:	0100                	addi	s0,sp,128
    2796:	0b05                	addi	s6,s6,1
    2798:	0e097803          	0xe097803
    279c:	0100                	addi	s0,sp,128
    279e:	0905                	addi	s2,s2,1
    27a0:	08090803          	lb	a6,128(s2)
    27a4:	0100                	addi	s0,sp,128
    27a6:	0505                	addi	a0,a0,1
    27a8:	0306                	slli	t1,t1,0x1
    27aa:	0901                	addi	s2,s2,0
    27ac:	0002                	c.slli64	zero
    27ae:	0301                	addi	t1,t1,0
    27b0:	0901                	addi	s2,s2,0
    27b2:	0000                	unimp
    27b4:	0301                	addi	t1,t1,0
    27b6:	0901                	addi	s2,s2,0
    27b8:	0000                	unimp
    27ba:	0301                	addi	t1,t1,0
    27bc:	0901                	addi	s2,s2,0
    27be:	0000                	unimp
    27c0:	0301                	addi	t1,t1,0
    27c2:	0901                	addi	s2,s2,0
    27c4:	0000                	unimp
    27c6:	0301                	addi	t1,t1,0
    27c8:	0901                	addi	s2,s2,0
    27ca:	0000                	unimp
    27cc:	0301                	addi	t1,t1,0
    27ce:	0901                	addi	s2,s2,0
    27d0:	0000                	unimp
    27d2:	0301                	addi	t1,t1,0
    27d4:	090a                	slli	s2,s2,0x2
    27d6:	0000                	unimp
    27d8:	0501                	addi	a0,a0,0
    27da:	060c                	addi	a1,sp,768
    27dc:	00090003          	lb	zero,0(s2)
    27e0:	0100                	addi	s0,sp,128
    27e2:	0505                	addi	a0,a0,1
    27e4:	0306                	slli	t1,t1,0x1
    27e6:	000c0903          	lb	s2,0(s8) # 1000 <memset+0x5c>
    27ea:	0501                	addi	a0,a0,0
    27ec:	0310                	addi	a2,sp,384
    27ee:	0900                	addi	s0,sp,144
    27f0:	0000                	unimp
    27f2:	0501                	addi	a0,a0,0
    27f4:	060c                	addi	a1,sp,768
    27f6:	00097d03          	0x97d03
    27fa:	0100                	addi	s0,sp,128
    27fc:	0505                	addi	a0,a0,1
    27fe:	02090303          	lb	t1,32(s2)
    2802:	0100                	addi	s0,sp,128
    2804:	0905                	addi	s2,s2,1
    2806:	0200                	addi	s0,sp,256
    2808:	0304                	addi	s1,sp,384
    280a:	0306                	slli	t1,t1,0x1
    280c:	0902                	c.slli64	s2
    280e:	0004                	0x4
    2810:	0501                	addi	a0,a0,0
    2812:	001f 0402 0603      	0x6030402001f
    2818:	00090003          	lb	zero,0(s2)
    281c:	0100                	addi	s0,sp,128
    281e:	1905                	addi	s2,s2,-31
    2820:	0200                	addi	s0,sp,256
    2822:	0304                	addi	s1,sp,384
    2824:	06090003          	lb	zero,96(s2)
    2828:	0100                	addi	s0,sp,128
    282a:	1705                	addi	a4,a4,-31
    282c:	0200                	addi	s0,sp,256
    282e:	0304                	addi	s1,sp,384
    2830:	0306                	slli	t1,t1,0x1
    2832:	097e                	slli	s2,s2,0x1f
    2834:	0006                	c.slli	zero,0x1
    2836:	0501                	addi	a0,a0,0
    2838:	0010                	0x10
    283a:	0402                	c.slli64	s0
    283c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2840:	0000                	unimp
    2842:	0501                	addi	a0,a0,0
    2844:	0005                	c.nop	1
    2846:	0402                	c.slli64	s0
    2848:	00030603          	lb	a2,0(t1)
    284c:	0209                	addi	tp,tp,2
    284e:	0100                	addi	s0,sp,128
    2850:	0905                	addi	s2,s2,1
    2852:	0200                	addi	s0,sp,256
    2854:	0304                	addi	s1,sp,384
    2856:	0306                	slli	t1,t1,0x1
    2858:	0909                	addi	s2,s2,2
    285a:	0004                	0x4
    285c:	0501                	addi	a0,a0,0
    285e:	0402001b          	0x402001b
    2862:	097e0303          	lb	t1,151(t3)
    2866:	0000                	unimp
    2868:	0501                	addi	a0,a0,0
    286a:	0010                	0x10
    286c:	0402                	c.slli64	s0
    286e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2872:	0000                	unimp
    2874:	0501                	addi	a0,a0,0
    2876:	0009                	c.nop	2
    2878:	0402                	c.slli64	s0
    287a:	09090303          	lb	t1,144(s2)
    287e:	000c                	0xc
    2880:	0501                	addi	a0,a0,0
    2882:	0026                	c.slli	zero,0x9
    2884:	0402                	c.slli64	s0
    2886:	00030603          	lb	a2,0(t1)
    288a:	0009                	c.nop	2
    288c:	0100                	addi	s0,sp,128
    288e:	2005                	jal	28ae <_bss_end+0x846>
    2890:	0200                	addi	s0,sp,256
    2892:	0304                	addi	s1,sp,384
    2894:	06090003          	lb	zero,96(s2)
    2898:	0100                	addi	s0,sp,128
    289a:	1f05                	addi	t5,t5,-31
    289c:	0200                	addi	s0,sp,256
    289e:	0304                	addi	s1,sp,384
    28a0:	0306                	slli	t1,t1,0x1
    28a2:	097e                	slli	s2,s2,0x1f
    28a4:	0004                	0x4
    28a6:	0501                	addi	a0,a0,0
    28a8:	0014                	0x14
    28aa:	0402                	c.slli64	s0
    28ac:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    28b0:	0000                	unimp
    28b2:	0501                	addi	a0,a0,0
    28b4:	0005                	c.nop	1
    28b6:	0402                	c.slli64	s0
    28b8:	00030603          	lb	a2,0(t1)
    28bc:	0009                	c.nop	2
    28be:	0100                	addi	s0,sp,128
    28c0:	0905                	addi	s2,s2,1
    28c2:	0200                	addi	s0,sp,256
    28c4:	0304                	addi	s1,sp,384
    28c6:	0306                	slli	t1,t1,0x1
    28c8:	0909                	addi	s2,s2,2
    28ca:	0004                	0x4
    28cc:	0501                	addi	a0,a0,0
    28ce:	001f 0402 0303      	0x3030402001f
    28d4:	097e                	slli	s2,s2,0x1f
    28d6:	0000                	unimp
    28d8:	0501                	addi	a0,a0,0
    28da:	0014                	0x14
    28dc:	0402                	c.slli64	s0
    28de:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    28e2:	0000                	unimp
    28e4:	0501                	addi	a0,a0,0
    28e6:	0009                	c.nop	2
    28e8:	0402                	c.slli64	s0
    28ea:	09090303          	lb	t1,144(s2)
    28ee:	000c                	0xc
    28f0:	0501                	addi	a0,a0,0
    28f2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    28f6:	00030603          	lb	a2,0(t1)
    28fa:	0009                	c.nop	2
    28fc:	0100                	addi	s0,sp,128
    28fe:	1d05                	addi	s10,s10,-31
    2900:	0200                	addi	s0,sp,256
    2902:	0304                	addi	s1,sp,384
    2904:	06090003          	lb	zero,96(s2)
    2908:	0100                	addi	s0,sp,128
    290a:	1f05                	addi	t5,t5,-31
    290c:	0200                	addi	s0,sp,256
    290e:	0304                	addi	s1,sp,384
    2910:	0306                	slli	t1,t1,0x1
    2912:	097e                	slli	s2,s2,0x1f
    2914:	0004                	0x4
    2916:	0501                	addi	a0,a0,0
    2918:	0014                	0x14
    291a:	0402                	c.slli64	s0
    291c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2920:	0000                	unimp
    2922:	0501                	addi	a0,a0,0
    2924:	0005                	c.nop	1
    2926:	0402                	c.slli64	s0
    2928:	00030603          	lb	a2,0(t1)
    292c:	0009                	c.nop	2
    292e:	0100                	addi	s0,sp,128
    2930:	0905                	addi	s2,s2,1
    2932:	0200                	addi	s0,sp,256
    2934:	0304                	addi	s1,sp,384
    2936:	0306                	slli	t1,t1,0x1
    2938:	0909                	addi	s2,s2,2
    293a:	000c                	0xc
    293c:	0501                	addi	a0,a0,0
    293e:	0022                	c.slli	zero,0x8
    2940:	0402                	c.slli64	s0
    2942:	00030603          	lb	a2,0(t1)
    2946:	0009                	c.nop	2
    2948:	0100                	addi	s0,sp,128
    294a:	1c05                	addi	s8,s8,-31
    294c:	0200                	addi	s0,sp,256
    294e:	0304                	addi	s1,sp,384
    2950:	06090003          	lb	zero,96(s2)
    2954:	0100                	addi	s0,sp,128
    2956:	2105                	jal	2d76 <_bss_end+0xd0e>
    2958:	0200                	addi	s0,sp,256
    295a:	0304                	addi	s1,sp,384
    295c:	0306                	slli	t1,t1,0x1
    295e:	097e                	slli	s2,s2,0x1f
    2960:	0004                	0x4
    2962:	0501                	addi	a0,a0,0
    2964:	0014                	0x14
    2966:	0402                	c.slli64	s0
    2968:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    296c:	0000                	unimp
    296e:	0501                	addi	a0,a0,0
    2970:	0005                	c.nop	1
    2972:	0402                	c.slli64	s0
    2974:	00030603          	lb	a2,0(t1)
    2978:	0009                	c.nop	2
    297a:	0100                	addi	s0,sp,128
    297c:	0306                	slli	t1,t1,0x1
    297e:	0909                	addi	s2,s2,2
    2980:	0004                	0x4
    2982:	0501                	addi	a0,a0,0
    2984:	00030613          	mv	a2,t1
    2988:	0009                	c.nop	2
    298a:	0100                	addi	s0,sp,128
    298c:	0505                	addi	a0,a0,1
    298e:	0306                	slli	t1,t1,0x1
    2990:	0010090b          	0x10090b
    2994:	0501                	addi	a0,a0,0
    2996:	00030613          	mv	a2,t1
    299a:	0009                	c.nop	2
    299c:	0100                	addi	s0,sp,128
    299e:	0505                	addi	a0,a0,1
    29a0:	0306                	slli	t1,t1,0x1
    29a2:	0914                	addi	a3,sp,144
    29a4:	0014                	0x14
    29a6:	0501                	addi	a0,a0,0
    29a8:	0310                	addi	a2,sp,384
    29aa:	0900                	addi	s0,sp,144
    29ac:	0000                	unimp
    29ae:	0501                	addi	a0,a0,0
    29b0:	061a                	slli	a2,a2,0x6
    29b2:	00090803          	lb	a6,0(s2)
    29b6:	0100                	addi	s0,sp,128
    29b8:	1305                	addi	t1,t1,-31
    29ba:	04096403          	0x4096403
    29be:	0100                	addi	s0,sp,128
    29c0:	1a05                	addi	s4,s4,-31
    29c2:	0a091c03          	lh	s8,160(s2)
    29c6:	0100                	addi	s0,sp,128
    29c8:	0505                	addi	a0,a0,1
    29ca:	04097803          	0x4097803
    29ce:	0100                	addi	s0,sp,128
    29d0:	0905                	addi	s2,s2,1
    29d2:	0306                	slli	t1,t1,0x1
    29d4:	0901                	addi	s2,s2,0
    29d6:	0004                	0x4
    29d8:	0501                	addi	a0,a0,0
    29da:	0003060b          	0x3060b
    29de:	0009                	c.nop	2
    29e0:	0100                	addi	s0,sp,128
    29e2:	2705                	jal	3102 <_bss_end+0x109a>
    29e4:	02090003          	lb	zero,32(s2)
    29e8:	0100                	addi	s0,sp,128
    29ea:	0b05                	addi	s6,s6,1
    29ec:	04090003          	lb	zero,64(s2)
    29f0:	0100                	addi	s0,sp,128
    29f2:	0d05                	addi	s10,s10,1
    29f4:	0306                	slli	t1,t1,0x1
    29f6:	0902                	c.slli64	s2
    29f8:	000a                	c.slli	zero,0x2
    29fa:	0501                	addi	a0,a0,0
    29fc:	061a                	slli	a2,a2,0x6
    29fe:	00090003          	lb	zero,0(s2)
    2a02:	0100                	addi	s0,sp,128
    2a04:	0d05                	addi	s10,s10,1
    2a06:	0306                	slli	t1,t1,0x1
    2a08:	0902                	c.slli64	s2
    2a0a:	000a                	c.slli	zero,0x2
    2a0c:	0501                	addi	a0,a0,0
    2a0e:	0305                	addi	t1,t1,1
    2a10:	0909                	addi	s2,s2,2
    2a12:	0000                	unimp
    2a14:	0501                	addi	a0,a0,0
    2a16:	0601                	addi	a2,a2,0
    2a18:	00090103          	lb	sp,0(s2)
    2a1c:	0100                	addi	s0,sp,128
    2a1e:	0d05                	addi	s10,s10,1
    2a20:	0200                	addi	s0,sp,256
    2a22:	0204                	addi	s1,sp,256
    2a24:	0306                	slli	t1,t1,0x1
    2a26:	0979                	addi	s2,s2,30
    2a28:	0010                	0x10
    2a2a:	0501                	addi	a0,a0,0
    2a2c:	001a                	c.slli	zero,0x6
    2a2e:	0402                	c.slli64	s0
    2a30:	0602                	c.slli64	a2
    2a32:	00090003          	lb	zero,0(s2)
    2a36:	0100                	addi	s0,sp,128
    2a38:	1805                	addi	a6,a6,-31
    2a3a:	0200                	addi	s0,sp,256
    2a3c:	0204                	addi	s1,sp,256
    2a3e:	0306                	slli	t1,t1,0x1
    2a40:	0978                	addi	a4,sp,156
    2a42:	0002                	c.slli64	zero
    2a44:	0501                	addi	a0,a0,0
    2a46:	0010                	0x10
    2a48:	0402                	c.slli64	s0
    2a4a:	0302                	c.slli64	t1
    2a4c:	0900                	addi	s0,sp,144
    2a4e:	0000                	unimp
    2a50:	0501                	addi	a0,a0,0
    2a52:	0005                	c.nop	1
    2a54:	0402                	c.slli64	s0
    2a56:	0602                	c.slli64	a2
    2a58:	02090003          	lb	zero,32(s2)
    2a5c:	0100                	addi	s0,sp,128
    2a5e:	0609                	addi	a2,a2,2
    2a60:	0000                	unimp
    2a62:	0101                	addi	sp,sp,0
    2a64:	0150                	addi	a2,sp,132
    2a66:	0000                	unimp
    2a68:	001d0003          	lb	zero,1(s10)
    2a6c:	0000                	unimp
    2a6e:	0101                	addi	sp,sp,0
    2a70:	000d0efb          	0xd0efb
    2a74:	0101                	addi	sp,sp,0
    2a76:	0101                	addi	sp,sp,0
    2a78:	0000                	unimp
    2a7a:	0100                	addi	s0,sp,128
    2a7c:	0000                	unimp
    2a7e:	0001                	nop
    2a80:	30747263          	bgeu	s0,t2,2d84 <_bss_end+0xd1c>
    2a84:	532e                	lw	t1,232(sp)
    2a86:	0000                	unimp
    2a88:	0000                	unimp
    2a8a:	0000                	unimp
    2a8c:	0205                	addi	tp,tp,1
    2a8e:	0e50                	addi	a2,sp,788
    2a90:	0000                	unimp
    2a92:	0315                	addi	t1,t1,5
    2a94:	0904                	addi	s1,sp,144
    2a96:	0004                	0x4
    2a98:	0301                	addi	t1,t1,0
    2a9a:	0901                	addi	s2,s2,0
    2a9c:	0004                	0x4
    2a9e:	0301                	addi	t1,t1,0
    2aa0:	0901                	addi	s2,s2,0
    2aa2:	0002                	c.slli64	zero
    2aa4:	0301                	addi	t1,t1,0
    2aa6:	0901                	addi	s2,s2,0
    2aa8:	0002                	c.slli64	zero
    2aaa:	0301                	addi	t1,t1,0
    2aac:	0901                	addi	s2,s2,0
    2aae:	0002                	c.slli64	zero
    2ab0:	0301                	addi	t1,t1,0
    2ab2:	0901                	addi	s2,s2,0
    2ab4:	0002                	c.slli64	zero
    2ab6:	0301                	addi	t1,t1,0
    2ab8:	0901                	addi	s2,s2,0
    2aba:	0002                	c.slli64	zero
    2abc:	0301                	addi	t1,t1,0
    2abe:	0901                	addi	s2,s2,0
    2ac0:	0002                	c.slli64	zero
    2ac2:	0301                	addi	t1,t1,0
    2ac4:	0901                	addi	s2,s2,0
    2ac6:	0002                	c.slli64	zero
    2ac8:	0301                	addi	t1,t1,0
    2aca:	0901                	addi	s2,s2,0
    2acc:	0002                	c.slli64	zero
    2ace:	0301                	addi	t1,t1,0
    2ad0:	0901                	addi	s2,s2,0
    2ad2:	0002                	c.slli64	zero
    2ad4:	0301                	addi	t1,t1,0
    2ad6:	0901                	addi	s2,s2,0
    2ad8:	0002                	c.slli64	zero
    2ada:	0301                	addi	t1,t1,0
    2adc:	0901                	addi	s2,s2,0
    2ade:	0002                	c.slli64	zero
    2ae0:	0301                	addi	t1,t1,0
    2ae2:	0901                	addi	s2,s2,0
    2ae4:	0002                	c.slli64	zero
    2ae6:	0301                	addi	t1,t1,0
    2ae8:	0901                	addi	s2,s2,0
    2aea:	0002                	c.slli64	zero
    2aec:	0301                	addi	t1,t1,0
    2aee:	0901                	addi	s2,s2,0
    2af0:	0002                	c.slli64	zero
    2af2:	0301                	addi	t1,t1,0
    2af4:	0901                	addi	s2,s2,0
    2af6:	0002                	c.slli64	zero
    2af8:	0301                	addi	t1,t1,0
    2afa:	0901                	addi	s2,s2,0
    2afc:	0002                	c.slli64	zero
    2afe:	0301                	addi	t1,t1,0
    2b00:	0901                	addi	s2,s2,0
    2b02:	0002                	c.slli64	zero
    2b04:	0301                	addi	t1,t1,0
    2b06:	0901                	addi	s2,s2,0
    2b08:	0002                	c.slli64	zero
    2b0a:	0301                	addi	t1,t1,0
    2b0c:	0901                	addi	s2,s2,0
    2b0e:	0002                	c.slli64	zero
    2b10:	0301                	addi	t1,t1,0
    2b12:	0901                	addi	s2,s2,0
    2b14:	0002                	c.slli64	zero
    2b16:	0301                	addi	t1,t1,0
    2b18:	0901                	addi	s2,s2,0
    2b1a:	0002                	c.slli64	zero
    2b1c:	0301                	addi	t1,t1,0
    2b1e:	0901                	addi	s2,s2,0
    2b20:	0002                	c.slli64	zero
    2b22:	0301                	addi	t1,t1,0
    2b24:	0901                	addi	s2,s2,0
    2b26:	0002                	c.slli64	zero
    2b28:	0301                	addi	t1,t1,0
    2b2a:	0901                	addi	s2,s2,0
    2b2c:	0002                	c.slli64	zero
    2b2e:	0301                	addi	t1,t1,0
    2b30:	0901                	addi	s2,s2,0
    2b32:	0002                	c.slli64	zero
    2b34:	0301                	addi	t1,t1,0
    2b36:	0901                	addi	s2,s2,0
    2b38:	0002                	c.slli64	zero
    2b3a:	0301                	addi	t1,t1,0
    2b3c:	0901                	addi	s2,s2,0
    2b3e:	0002                	c.slli64	zero
    2b40:	0301                	addi	t1,t1,0
    2b42:	0901                	addi	s2,s2,0
    2b44:	0002                	c.slli64	zero
    2b46:	0301                	addi	t1,t1,0
    2b48:	0901                	addi	s2,s2,0
    2b4a:	0002                	c.slli64	zero
    2b4c:	0301                	addi	t1,t1,0
    2b4e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2b52:	0301                	addi	t1,t1,0
    2b54:	0906                	slli	s2,s2,0x1
    2b56:	0008                	0x8
    2b58:	0301                	addi	t1,t1,0
    2b5a:	0901                	addi	s2,s2,0
    2b5c:	0008                	0x8
    2b5e:	0301                	addi	t1,t1,0
    2b60:	0902                	c.slli64	s2
    2b62:	0008                	0x8
    2b64:	0301                	addi	t1,t1,0
    2b66:	00040903          	lb	s2,0(s0)
    2b6a:	0301                	addi	t1,t1,0
    2b6c:	0901                	addi	s2,s2,0
    2b6e:	0004                	0x4
    2b70:	0301                	addi	t1,t1,0
    2b72:	0901                	addi	s2,s2,0
    2b74:	0002                	c.slli64	zero
    2b76:	0301                	addi	t1,t1,0
    2b78:	0906                	slli	s2,s2,0x1
    2b7a:	0004                	0x4
    2b7c:	0301                	addi	t1,t1,0
    2b7e:	0901                	addi	s2,s2,0
    2b80:	0004                	0x4
    2b82:	0301                	addi	t1,t1,0
    2b84:	0901                	addi	s2,s2,0
    2b86:	0004                	0x4
    2b88:	0901                	addi	s2,s2,0
    2b8a:	0004                	0x4
    2b8c:	0100                	addi	s0,sp,128
    2b8e:	0001                	nop
    2b90:	0205                	addi	tp,tp,1
    2b92:	0000                	unimp
    2b94:	0000                	unimp
    2b96:	0100cb03          	lbu	s6,16(ra)
    2b9a:	7c090103          	lb	sp,1984(s2)
    2b9e:	0100                	addi	s0,sp,128
    2ba0:	04090403          	lb	s0,64(s2)
    2ba4:	0100                	addi	s0,sp,128
    2ba6:	04090403          	lb	s0,64(s2)
    2baa:	0100                	addi	s0,sp,128
    2bac:	04090403          	lb	s0,64(s2)
    2bb0:	0100                	addi	s0,sp,128
    2bb2:	0409                	addi	s0,s0,2
    2bb4:	0000                	unimp
    2bb6:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0x36>
    switch(length%3) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
  a0:	7200                	flw	fs0,32(a2)
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
            for (i = 0; i < (length / 3); i++) {
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < ((length-2) / 3); i++) {
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
  c8:	6572                	flw	fa0,28(sp)
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	735f6377          	0x735f6377
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	735f 6174 6574      	0x65746174735f
            a1[length-2] = a1[length-2] + a2[length-2];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x120>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
    asm volatile(
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 10a:	4e5f 7000 6c6f      	0x6c6f70004e5f
    asm volatile(
 110:	6d79                	lui	s10,0x1e
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
            for (i = 0; i < ((length-1) / 3); i++) {
 11c:	625f 7361 0065      	0x657361625f
    asm volatile(
 122:	5f5f 6d74 685f      	0x685f6d745f5f
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
    int line[size_b][size_a + size_b];
 13a:	7261                	lui	tp,0xffff8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13c:	5f007367          	0x5f007367
    int line[size_b][size_a + size_b];
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0x148>
 144:	6569                	lui	a0,0x1a
 146:	5f00                	lw	s0,56(a4)
 148:	735f 6c67 6575      	0x65756c67735f
    int pola[size_a];
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 152:	0031                	c.nop	12
 154:	6572                	flw	fa0,28(sp)
 156:	5f003273          	csrrc	tp,0x5f0,zero
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
 15e:	695f0073          	0x695f0073
    int line[size_b][size_a + size_b];
 162:	78635f73          	csrrwi	t5,0x786,6
    int pola[size_a];
 166:	0061                	c.nop	24
    int line[size_b][size_a + size_b];
 168:	735f 6474 6e69      	0x6e696474735f
    int pola[size_a];
 16e:	5f00                	lw	s0,56(a4)
 170:	6c62                	flw	fs8,24(sp)
    int polb[size_b];
 172:	7a69736b          	0x7a69736b
 176:	0065                	c.nop	25
    int pola[size_a];
 178:	7270                	flw	fa2,100(a2)
    int polb[size_b];
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0074                	addi	a3,sp,12
    int line[size_b][size_a + size_b];
 180:	6f70                	flw	fa2,92(a4)
 182:	796c                	flw	fa1,116(a0)
    int pola[size_a];
 184:	6964                	flw	fs1,84(a0)
 186:	0076                	c.slli	zero,0x1d
    int polb[size_b];
 188:	6f70                	flw	fa2,92(a4)
    for (i = 0; i < size_b; ++i){
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
 18e:	635f 7476 7562      	0x75627476635f
            product[j] = 0;
 194:	0066                	c.slli	zero,0x19
 196:	6f5f 6666 6573      	0x657366666f5f
    for (i = 0; i < size_b; ++i){
 19c:	0074                	addi	a3,sp,12
    for (i = 0; i < size_a; ++i){
 19e:	6d5f 7362 7472      	0x747273626d5f
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
    for (i = 0; i < size_b; ++i){
 1a8:	735f 6174 6574      	0x65746174735f
    if(star_mult == 1){
 1ae:	5f00                	lw	s0,56(a4)
 1b0:	626d                	lui	tp,0x1b
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
 1b6:	735f 6174 6574      	0x65746174735f
        for (j = size_b -1; j >= 0; j = j-1){
 1bc:	5f00                	lw	s0,56(a4)
 1be:	6e66                	flw	ft8,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c0:	7261                	lui	tp,0xffff8
 1c2:	6e007367          	0x6e007367
            product[j] = 0;
 1c6:	7274                	flw	fa3,100(a2)
 1c8:	5f75                	li	t5,-3
            line[i][j] = 0;
 1ca:	6564                	flw	fs1,76(a0)
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x220>
            product[j] = 0;
 1d0:	0074                	addi	a3,sp,12
        for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	665f 736e 5f00      	0x5f00736e665f
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
    for (i = 0; i < size_b; ++i){
 1dc:	5f00                	lw	s0,56(a4)
 1de:	6c66                	flw	fs8,88(sp)
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
        for(j = 0; j < size_a + size_b -1; ++j){
 1e4:	0074                	addi	a3,sp,12
        pola[i] = a[i];
 1e6:	735f 6474 7265      	0x72656474735f
 1ec:	0072                	c.slli	zero,0x1c
            pola[i] = pola[i] + mod;
 1ee:	425f 6769 6e69      	0x6e696769425f
        while (pola[i] < 0){
 1f4:	0074                	addi	a3,sp,12
 1f6:	675f 6d61 616d      	0x616d6d61675f
        pola[i] = pola[i] % mod;
 1fc:	735f 6769 676e      	0x676e6769735f
 202:	6d61                	lui	s10,0x18
 204:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_a; ++i){
 206:	6572                	flw	fa0,28(sp)
            pola[i] = pola[i] + mod;
 208:	6461                	lui	s0,0x18
 20a:	5f00                	lw	s0,56(a4)
        polb[i] = b[i];
 20c:	6572                	flw	fa0,28(sp)
 20e:	746c7573          	csrrci	a0,0x746,24
 212:	6b5f 5f00 745f      	0x745f5f006b5f
        while (polb[i] < 0){
 218:	006d                	c.nop	27
 21a:	6564                	flw	fs1,76(a0)
        polb[i] = polb[i] % mod;
 21c:	756e                	flw	fa0,248(sp)
 21e:	5f6d                	li	t5,-5
    for (i = 0; i < size_b; ++i){
 220:	6574                	flw	fa3,76(a0)
 222:	706d                	c.lui	zero,0xffffb
        polb[i] = polb[i] % mod;
 224:	5f00                	lw	s0,56(a4)
 226:	775f 6863 0062      	0x626863775f
            polb[i] = polb[i] + mod;
 22c:	6572                	flw	fa0,28(sp)
    if(star_mult == 1){
 22e:	746c7573          	csrrci	a0,0x746,24
        for (j = size_b -1; j >= 0; j = j-1){
 232:	006e6f6b          	0x6e6f6b
    for (i = 0; i < size_b; ++i){
 236:	735f 6474 756f      	0x756f6474735f
		array_add(product,line[i],size_a+size_b-1);
 23c:	0074                	addi	a3,sp,12
 23e:	635f 7476 656c      	0x656c7476635f
    for(i = 0; i < size_b; ++i){
 244:	006e                	c.slli	zero,0x1b
 246:	72636573          	csrrsi	a0,0x726,6
 24a:	7465                	lui	s0,0xffff9
 24c:	6b5f 7965 665f      	0x665f79656b5f
    for(j = 0; j < size_a + size_b -1; ++j){
 252:	0071                	c.nop	28
 254:	665f 6c69 0065      	0x656c69665f
}
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
 25e:	6e72                	flw	ft8,28(sp)
 260:	615f 6464 6572      	0x65726464615f
 266:	00317373          	csrrci	t1,fcsr,2
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
 26e:	6e72                	flw	ft8,28(sp)
 270:	615f 6464 6572      	0x65726464615f
 276:	00327373          	csrrci	t1,fcsr,4
                line[size_b-1-j][k] = pola[k]*polb[j];
 27a:	6572                	flw	fa0,28(sp)
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
 280:	615f 6464 6572      	0x65726464615f
 286:	00337373          	csrrci	t1,fcsr,6
 28a:	6572                	flw	fa0,28(sp)
 28c:	7574                	flw	fa3,108(a0)
 28e:	6e72                	flw	ft8,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 290:	615f 6464 6572      	0x65726464615f
        for (j = size_b -1; j >= 0; j = j-1){
 296:	00347373          	csrrci	t1,fcsr,8
 29a:	6e5f 6f69 7362      	0x73626f696e5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a0:	7200                	flw	fs0,32(a2)
 2a2:	7465                	lui	s0,0xffff9
 2a4:	7275                	lui	tp,0xffffd
 2a6:	5f6e                	lw	t5,248(sp)
 2a8:	6461                	lui	s0,0x18
 2aa:	7264                	flw	fs1,100(a2)
 2ac:	7365                	lui	t1,0xffff9
 2ae:	72003673          	csrrc	a2,0x720,zero
 2b2:	7465                	lui	s0,0xffff9
 2b4:	7275                	lui	tp,0xffffd
 2b6:	5f6e                	lw	t5,248(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b8:	6461                	lui	s0,0x18
 2ba:	7264                	flw	fs1,100(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 2bc:	7365                	lui	t1,0xffff9
 2be:	73003773          	csrrc	a4,0x730,zero
 2c2:	6f68                	flw	fa0,92(a4)
            line[i][j] = line[i][j] % mod;
 2c4:	7472                	flw	fs0,60(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2c6:	7520                	flw	fs0,104(a0)
 2c8:	736e                	flw	ft6,248(sp)
            line[i][j] = line[i][j] % mod;
 2ca:	6769                	lui	a4,0x1a
 2cc:	656e                	flw	fa0,216(sp)
 2ce:	2064                	fld	fs1,192(s0)
 2d0:	6e69                	lui	t3,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
 2d2:	0074                	addi	a3,sp,12
 2d4:	615f 6574 6978      	0x69786574615f
    for (i = 0; i < size_b; ++i){
 2da:	3074                	fld	fa3,224(s0)
 2dc:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 2de:	6e676973          	csrrsi	s2,0x6e6,14
		array_add(product,line[i],size_a+size_b-1);
 2e2:	6c61                	lui	s8,0x18
 2e4:	625f 6675 5f00      	0x5f006675625f
    for(i = 0; i < size_b; ++i){
 2ea:	7361                	lui	t1,0xffff8
 2ec:	6d697463          	bgeu	s2,s6,9b4 <generate_keys+0x1a>
        product[j] = product[j] % mod;
 2f0:	5f65                	li	t5,-7
    for(j = 0; j < size_a + size_b -1; ++j){
 2f2:	7562                	flw	fa0,56(sp)
 2f4:	0066                	c.slli	zero,0x19
        product[j] = product[j] % mod;
 2f6:	725f 7365 6c75      	0x6c757365725f
 2fc:	0074                	addi	a3,sp,12
    for(j = 0; j < size_a + size_b -1; ++j){
 2fe:	5f5f 6377 0068      	0x6863775f5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 304:	746e6977          	0x746e6977
    int line[size_b][size_a + size_b];
 308:	745f 6700 6e65      	0x6e656700745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 30e:	7265                	lui	tp,0xffff9
 310:	7461                	lui	s0,0xffff8
    int line[size_b][size_a + size_b];
 312:	5f65                	li	t5,-7
 314:	7379656b          	0x7379656b
 318:	5f00                	lw	s0,56(a4)
 31a:	625f 6975 746c      	0x746c6975625f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 320:	6e69                	lui	t3,0x1a
 322:	6d5f 6d65 7063      	0x70636d656d5f
 328:	0079                	c.nop	30
 32a:	6c5f 636f 006b      	0x6b636f6c5f
    int line[size_b][size_a + size_b];
 330:	544e                	lw	s0,240(sp)
 332:	5552                	lw	a0,52(sp)
 334:	345f 5f38 6962      	0x69625f38345f
    int pola[size_a];
 33a:	4d74                	lw	a3,92(a0)
 33c:	632e                	flw	ft6,200(sp)
 33e:	7000                	flw	fs0,32(s0)
    int line[size_b][size_a + size_b];
 340:	6f72                	flw	ft10,28(sp)
    int pola[size_a];
 342:	7564                	flw	fs1,108(a0)
 344:	00327463          	bgeu	tp,gp,34c <polymult2+0x4c>
    int polb[size_b];
 348:	7865                	lui	a6,0xffff9
 34a:	5f74                	lw	a3,124(a4)
    int pola[size_a];
 34c:	7565                	lui	a0,0xffff9
    int polb[size_b];
 34e:	64696c63          	bltu	s2,t1,9a6 <generate_keys+0xc>
    int line[size_b][size_a + size_b];
 352:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 354:	74697277          	0x74697277
    for (i = 0; i < size_b; ++i){
 358:	0065                	c.nop	25
 35a:	5f5f 6d74 795f      	0x795f6d745f5f
            product2[j] = 0;
 360:	6165                	addi	sp,sp,112
 362:	0072                	c.slli	zero,0x1c
    for (i = 0; i < size_b; ++i){
 364:	6f70                	flw	fa2,92(a4)
 366:	626c                	flw	fa1,68(a2)
    for(i = 0; i < size_a; ++i){
 368:	7200                	flw	fs0,32(a2)
 36a:	6e61                	lui	t3,0x18
 36c:	6f64                	flw	fs1,92(a4)
    for(i = 0; i < size_b; ++i){
 36e:	5f6d                	li	t5,-5
 370:	6176                	flw	ft2,92(sp)
 372:	006c                	addi	a1,sp,12
    if(star_mult == 1){
 374:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 37a:	6c00636f          	jal	t1,6a3a <_stack_len+0x2a3a>
 37e:	20676e6f          	jal	t3,76584 <_stack_start+0x66584>
 382:	6f64                	flw	fs1,92(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 384:	6275                	lui	tp,0x1d
 386:	656c                	flw	fa1,76(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 388:	2f00                	fld	fs0,24(a4)
 38a:	6f68                	flw	fa0,92(a4)
            product2[j] = 0;
 38c:	656d                	lui	a0,0x1b
 38e:	706f742f          	0x706f742f
            line[i][j] = 0;
 392:	6c61                	lui	s8,0x18
 394:	65442f63          	0x65442f63
            product2[j] = 0;
 398:	6f746b73          	csrrsi	s6,0x6f7,8
        for(j = 0; j < size_a + size_b -1; ++j){
 39c:	2f70                	fld	fa2,216(a4)
 39e:	68746967          	0x68746967
    for (i = 0; i < size_b; ++i){
 3a2:	6275                	lui	tp,0x1d
 3a4:	6e65732f          	0x6e65732f
 3a8:	6f69                	lui	t5,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
 3aa:	5f72                	lw	t5,60(sp)
 3ac:	7270                	flw	fa2,100(a2)
        pola[i] = a[i];
 3ae:	63656a6f          	jal	s4,569e4 <_stack_start+0x469e4>
 3b2:	2f74                	fld	fa3,216(a4)
 3b4:	6f2f7773          	csrrci	a4,0x6f2,30
 3b8:	636c                	flw	fa1,68(a4)
 3ba:	6d75                	lui	s10,0x1d
    for(i = 0; i < size_a; ++i){
 3bc:	656c                	flw	fa1,76(a0)
        pola[i] = a[i];
 3be:	2f72                	fld	ft10,280(sp)
 3c0:	2e32                	fld	ft8,264(sp)
    for(i = 0; i < size_a; ++i){
 3c2:	6461                	lui	s0,0x18
        polb[i] = b[i];
 3c4:	0064                	addi	s1,sp,12
 3c6:	6e5f 7865 6674      	0x667478656e5f
 3cc:	6d00                	flw	fs0,24(a0)
 3ce:	7365                	lui	t1,0xffff9
 3d0:	65676173          	csrrsi	sp,0x656,14
 3d4:	5f00                	lw	s0,56(a4)
 3d6:	745f 5f6d 6f6d      	0x6f6d5f6d745f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3dc:	006e                	c.slli	zero,0x1b
 3de:	6572                	flw	fa0,28(sp)
 3e0:	7574                	flw	fa3,108(a0)
 3e2:	6e72                	flw	ft8,28(sp)
 3e4:	615f 6464 6572      	0x65726464615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ea:	00357373          	csrrci	t1,fcsr,10
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ee:	615f 6574 6978      	0x69786574615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3f4:	0074                	addi	a3,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
 3f6:	6f627573          	csrrci	a0,0x6f6,4
 3fa:	7470                	flw	fa2,108(s0)
 3fc:	7261                	lui	tp,0xffff8
 3fe:	5f5f0067          	jr	1525(t5) # 1a5f5 <_stack_start+0xa5f5>
        array_add(product2,line[i],size_a+size_b-1);
 402:	64696473          	csrrsi	s0,0x646,18
 406:	6e69                	lui	t3,0x1a
 408:	7469                	lui	s0,0xffffa
    for(i=0;i<size_b;++i){
 40a:	5f00                	lw	s0,56(a4)
 40c:	5f66666f          	jal	a2,66a02 <_stack_start+0x56a02>
}
 410:	0074                	addi	a3,sp,12
 412:	6e45                	lui	t3,0x11
 414:	654d5f63          	bge	s10,s4,a72 <generate_keys+0xd8>
 418:	67617373          	csrrci	t1,0x676,2
 41c:	0065                	c.nop	25
 41e:	746e6f63          	bltu	t3,t1,b7c <generate_keys+0x1e2>
 422:	6f72                	flw	ft10,28(sp)
 424:	526c                	lw	a1,100(a2)
 426:	5f00                	lw	s0,56(a4)
 428:	7266                	flw	ft4,120(sp)
 42a:	6565                	lui	a0,0x19
 42c:	696c                	flw	fa1,84(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 42e:	72007473          	csrrci	s0,0x720,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 432:	6e69                	lui	t3,0x1a
 434:	6f705f67          	0x6f705f67
 438:	796c                	flw	fa1,116(a0)
 43a:	5f00                	lw	s0,56(a4)
 43c:	4f4c                	lw	a1,28(a4)
 43e:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
            for (k = size_a-1; k >= 0; k = k-1 ){
 442:	4345                	li	t1,17
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 444:	5255                	li	tp,-11
 446:	45564953          	0x45564953
 44a:	545f 7400 5f69      	0x5f697400545f
        for (j = size_b -1; j >= 0; j = j-1){
 450:	0031                	c.nop	12
 452:	6974                	flw	fa3,84(a0)
 454:	325f 7500 736e      	0x736e7500325f
        array_add(product2,line[i],size_a+size_b-1);
 45a:	6769                	lui	a4,0x1a
 45c:	656e                	flw	fa0,216(sp)
 45e:	2064                	fld	fs1,192(s0)
    for(i=0;i<size_b;++i){
 460:	72616863          	bltu	sp,t1,b90 <generate_keys+0x1f6>
 464:	7100                	flw	fs0,32(a0)
    int v[size_N];
 466:	5f69                	li	t5,-6
 468:	0031                	c.nop	12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 46a:	6e5f 7765 5f00      	0x5f0077656e5f
 470:	5f68                	lw	a0,124(a4)
 472:	7265                	lui	tp,0xffff9
 474:	6e72                	flw	ft8,28(sp)
 476:	6873006f          	j	312fc <_stack_start+0x212fc>
 47a:	2074726f          	jal	tp,47e80 <_stack_start+0x37e80>
 47e:	6e69                	lui	t3,0x1a
 480:	0074                	addi	a3,sp,12
 482:	5f5f 6d74 795f      	0x795f6d745f5f
 488:	6164                	flw	fs1,68(a0)
 48a:	0079                	c.nop	30
    int v[size_N];
 48c:	5f5f 6273 6675      	0x667562735f5f
    int q[size_N];
 492:	5f00                	lw	s0,56(a4)
 494:	6c66                	flw	fs8,88(sp)
 496:	6761                	lui	a4,0x18
    int num_temp[size_N];
 498:	5f003273          	csrrc	tp,0x5f0,zero
    int denum_temp[size_D];
 49c:	6f69                	lui	t5,0x1a
 49e:	7362                	flw	ft6,56(sp)
 4a0:	5f00                	lw	s0,56(a4)
 4a2:	465f 4c49 0045      	0x454c49465f
 4a8:	6d5f 7362 6174      	0x617473626d5f
 4ae:	6574                	flw	fa3,76(a0)
 4b0:	745f 5f00 735f      	0x735f5f00745f
    int v[size_N];
 4b6:	4946                	lw	s2,80(sp)
    int denum_temp[size_D];
 4b8:	454c                	lw	a1,12(a0)
    for (i = 0; i < size_N; ++i){
 4ba:	5f00                	lw	s0,56(a4)
 4bc:	626d                	lui	tp,0x1b
 4be:	74617473          	csrrci	s0,0x746,2
 4c2:	0065                	c.nop	25
 4c4:	725f 6e61 5f64      	0x5f646e61725f
    for (i = 0; i < size_D; ++i) {
 4ca:	656e                	flw	fa0,216(sp)
    for (i = 0; i < size_N; ++i){
 4cc:	7478                	flw	fa4,108(s0)
 4ce:	5f00                	lw	s0,56(a4)
 4d0:	626d                	lui	tp,0x1b
    for (i = size_D-1; i >= 0; i = i-1){
 4d2:	656c                	flw	fa1,76(a0)
 4d4:	5f6e                	lw	t5,248(sp)
 4d6:	74617473          	csrrci	s0,0x746,2
 4da:	0065                	c.nop	25
 4dc:	695f 636e 5f00      	0x5f00636e695f
        if ( (b_N*u)%mod == 1 )
 4e2:	6e69                	lui	t3,0x1a
    for (u = 0; u < mod; ++u){
 4e4:	0064                	addi	s1,sp,12
 4e6:	6c5f 636f 6c61      	0x6c61636f6c5f
        num_temp[i] = num[i];
 4ec:	0065                	c.nop	25
 4ee:	5f5f 6c63 6165      	0x61656c635f5f
            num_temp[i] = num_temp[i] + mod;
 4f4:	756e                	flw	fa0,248(sp)
        while (num_temp[i] < 0) {
 4f6:	0070                	addi	a2,sp,12
 4f8:	755f 736e 6570      	0x6570736e755f
        num_temp[i] = num_temp[i] % mod;
 4fe:	69666963          	bltu	a2,s6,b90 <generate_keys+0x1f6>
    for (i = 0; i < size_N; ++i){
 502:	6465                	lui	s0,0x19
        num_temp[i] = num_temp[i] % mod;
 504:	6c5f 636f 6c61      	0x6c61636f6c5f
            num_temp[i] = num_temp[i] + mod;
 50a:	5f65                	li	t5,-7
 50c:	6e69                	lui	t3,0x1a
        denum_temp[i] = denum[i];
 50e:	6f66                	flw	ft10,88(sp)
 510:	5f00                	lw	s0,56(a4)
 512:	616d                	addi	sp,sp,240
 514:	7778                	flw	fa4,108(a4)
            denum_temp[i] = denum_temp[i] + mod;
 516:	7364                	flw	fs1,100(a4)
        while (denum_temp[i] < 0) {
 518:	5f00                	lw	s0,56(a4)
 51a:	6572                	flw	fa0,28(sp)
 51c:	6e65                	lui	t3,0x19
        denum_temp[i] = denum_temp[i] % mod;
 51e:	0074                	addi	a3,sp,12
 520:	72617473          	csrrci	s0,0x726,2
    for (i = 0; i < size_D; ++i) {
 524:	6d5f 6c75 0074      	0x746c756d5f
 52a:	735f 6565 0064      	0x646565735f
        q[i] = 0;
 530:	6972                	flw	fs2,28(sp)
 532:	325f 5f00 635f      	0x635f5f00325f
        v[i] = 0;
 538:	746e756f          	jal	a0,e7c7e <_stack_start+0xd7c7e>
        q[i] = 0;
 53c:	5f00                	lw	s0,56(a4)
        v[i] = 0;
 53e:	765f 6c61 6575      	0x65756c61765f
    for (i = 0; i < size_N; ++i){
 544:	5f00                	lw	s0,56(a4)
        if( denum_temp[i] != 0 )
 546:	6b656573          	csrrsi	a0,0x6b6,10
    for (i = size_D-1; i >= 0; i = i-1){
 54a:	5f00                	lw	s0,56(a4)
        if ( (b_N*u)%mod == 1 )
 54c:	7066                	flw	ft0,120(sp)
 54e:	745f736f          	jal	t1,f8492 <_stack_start+0xe8492>
 552:	6c00                	flw	fs0,24(s0)
 554:	6e65                	lui	t3,0x19
    for (u = 0; u < mod; ++u){
 556:	00687467          	0x687467
        if( num_temp[i] != 0 )
 55a:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    for (i = size_N-1; i >= 0; i = i-1){
 560:	6e69                	lui	t3,0x1a
 562:	7000                	flw	fs0,32(s0)
 564:	6275                	lui	tp,0x1d
 566:	696c                	flw	fa1,84(a0)
 568:	656b5f63          	bge	s6,s6,bc6 <generate_keys+0x22c>
    while (d >= d2){
 56c:	0079                	c.nop	30
    for(i = 0; i < size_N; ++i){
 56e:	7261                	lui	tp,0xffff8
        result[i] = q[i];
 570:	6172                	flw	ft2,28(sp)
 572:	5f79                	li	t5,-2
 574:	6461                	lui	s0,0x18
 576:	0064                	addi	s1,sp,12
    for(i = 0; i < size_N; ++i){
 578:	735f 7274 6f74      	0x6f747274735f
    for(i = size_N; i < (2*size_N); ++i){
 57e:	616c5f6b          	0x616c5f6b
        result[i] = num_temp[i-size_N];
 582:	5f007473          	csrrci	s0,0x5f0,0
 586:	6e66                	flw	ft8,88(sp)
    for(i = size_N; i < (2*size_N); ++i){
 588:	7974                	flw	fa3,116(a0)
 58a:	6570                	flw	fa2,76(a0)
}
 58c:	65730073          	0x65730073
 590:	74657263          	bgeu	a0,t1,cd4 <ntru_encyrpt+0x1c>
 594:	6b5f 7965 665f      	0x665f79656b5f
 59a:	0070                	addi	a2,sp,12
 59c:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5a2:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
 5a6:	315f 5f00 6567      	0x65675f00315f
 5ac:	6474                	flw	fa3,76(s0)
 5ae:	7461                	lui	s0,0xffff8
 5b0:	5f65                	li	t5,-7
 5b2:	7265                	lui	tp,0xffff9
 5b4:	0072                	c.slli	zero,0x1c
        v[(d-d2)] = u*r_d;
 5b6:	675f 6f6c 6162      	0x61626f6c675f
 5bc:	5f6c                	lw	a1,124(a4)
 5be:	6d69                	lui	s10,0x1a
 5c0:	7570                	flw	fa2,108(a0)
 5c2:	6572                	flw	fa0,28(sp)
        for (i = 0; i < size_N; ++i){
 5c4:	705f 7274 4700      	0x47007274705f
 5ca:	554e                	lw	a0,240(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 5cc:	4320                	lw	s0,64(a4)
 5ce:	3731                	jal	4da <polydiv+0x74>
 5d0:	3920                	fld	fs0,112(a0)
 5d2:	322e                	fld	ft4,232(sp)
 5d4:	302e                	fld	ft0,232(sp)
 5d6:	2d20                	fld	fs0,88(a0)
 5d8:	616d                	addi	sp,sp,240
        for (i = 0; i < size_N; ++i){
 5da:	6372                	flw	ft6,28(sp)
 5dc:	3d68                	fld	fa0,248(a0)
 5de:	7672                	flw	fa2,60(sp)
 5e0:	6d693233          	0x6d693233
        for (i = 0; i < size_N; ++i){
 5e4:	6d2d2063          	0x6d2d2063
 5e8:	6261                	lui	tp,0x18
 5ea:	3d69                	jal	484 <polydiv+0x1e>
        for (i = 0; i < size_N; ++i){
 5ec:	6c69                	lui	s8,0x1a
 5ee:	3370                	fld	fa2,224(a4)
 5f0:	2032                	fld	ft0,264(sp)
        array_add(q, v, size_N);
 5f2:	6d2d                	lui	s10,0xb
 5f4:	646f6d63          	bltu	t5,t1,c4e <generate_keys+0x2b4>
 5f8:	6c65                	lui	s8,0x19
        for(i = 0; i < size_N; ++i){
 5fa:	6d3d                	lui	s10,0xf
 5fc:	6465                	lui	s0,0x19
 5fe:	6e61                	lui	t3,0x18
 600:	2079                	jal	68e <polydiv+0x228>
        for (i = size_N-1; i >= 0; i = i-1){
 602:	6d2d                	lui	s10,0xb
 604:	7574                	flw	fa3,108(a0)
 606:	656e                	flw	fa0,216(sp)
 608:	723d                	lui	tp,0xfffef
 60a:	656b636f          	jal	t1,b6c60 <_stack_start+0xa6c60>
 60e:	2074                	fld	fa3,192(s0)
 610:	672d                	lui	a4,0xb
 612:	2d20                	fld	fs0,88(a0)
            v[i] = v[i] % mod;
 614:	2d20734f          	0x2d20734f
        for (i = 0; i < size_N; ++i){
 618:	7666                	flw	fa2,120(sp)
            v[i] = v[i] % mod;
 61a:	7369                	lui	t1,0xffffa
 61c:	6269                	lui	tp,0x1a
 61e:	6c69                	lui	s8,0x1a
 620:	7469                	lui	s0,0xffffa
        for (i = 0; i < size_N; ++i){
 622:	3d79                	jal	4c0 <polydiv+0x5a>
                product[i] = product[i] + mod;
 624:	6968                	flw	fa0,84(a0)
 626:	6464                	flw	fs1,76(s0)
            while (product[i] < 0) {
 628:	6e65                	lui	t3,0x19
 62a:	5f00                	lw	s0,56(a4)
 62c:	6e75                	lui	t3,0x1d
            product[i] = product[i] % mod;
 62e:	7375                	lui	t1,0xffffd
 630:	6465                	lui	s0,0x19
        for (i = 0; i < size_N; ++i){
 632:	725f 6e61 0064      	0x646e61725f
            product[i] = product[i] % mod;
 638:	696c                	flw	fa1,84(a0)
        for (i = 0; i < size_N; ++i){
 63a:	656e                	flw	fa0,216(sp)
            num_temp[i] = num_temp[i] - product[i];
 63c:	5f00                	lw	s0,56(a4)
 63e:	00736477          	0x736477
 642:	5f5f 6d74 775f      	0x775f6d745f5f
        for (i = 0; i < size_N; ++i){
 648:	6164                	flw	fs1,68(a0)
            num_temp[i] = num_temp[i] - product[i];
 64a:	0079                	c.nop	30
 64c:	675f 756c 0065      	0x65756c675f
                num_temp[i] = num_temp[i] + mod;
 652:	746e                	flw	fs0,248(sp)
 654:	7572                	flw	fa0,60(sp)
            while (num_temp[i] < 0){
 656:	655f 636e 7279      	0x7279636e655f
            num_temp[i] = num_temp[i] % mod;
 65c:	7470                	flw	fa2,108(s0)
 65e:	5f00                	lw	s0,56(a4)
        for (i = 0; i < size_N; ++i){
 660:	7a697373          	csrrci	t1,0x7a6,18
            num_temp[i] = num_temp[i] % mod;
 664:	5f65                	li	t5,-7
 666:	0074                	addi	a3,sp,12
        for (i = 0; i < size_N; ++i){
 668:	6c5f 3436 5f61      	0x5f6134366c5f
        for(i = 0; i < size_N; ++i){
 66e:	7562                	flw	fa0,56(sp)
            q[i] = q[i] % mod;
 670:	0066                	c.slli	zero,0x19
 672:	6564                	flw	fs1,76(a0)
 674:	756e                	flw	fa0,248(sp)
 676:	006d                	c.nop	27
        for(i = 0; i < size_N; ++i){
 678:	735f 6769 665f      	0x665f6769735f
        for (i = size_N-1; i >= 0; i = i-1){
 67e:	6e75                	lui	t3,0x1d
            v[i] = 0;
 680:	6e5f0063          	beq	t5,t0,d60 <ntru_encyrpt+0xa8>
 684:	7562                	flw	fa0,56(sp)
 686:	0066                	c.slli	zero,0x19
 688:	755f 756e 6573      	0x6573756e755f
        for (i = 0; i < size_N; ++i){
 68e:	0064                	addi	s1,sp,12
 690:	6f70                	flw	fa2,92(a4)
        result[i] = q[i];
 692:	796c                	flw	fa1,116(a0)
 694:	0052                	c.slli	zero,0x14
 696:	657a6973          	csrrsi	s2,0x657,20
 69a:	445f 5f00 745f      	0x745f5f00445f
 6a0:	5f6d                	li	t5,-5
    for(i = 0; i < size_N; ++i){
 6a2:	7369                	lui	t1,0xffffa
        result[i] = num_temp[i-size_N];
 6a4:	7364                	flw	fs1,100(a4)
 6a6:	0074                	addi	a3,sp,12
 6a8:	6c5f 636f 6c61      	0x6c61636f6c5f
 6ae:	6974                	flw	fa3,84(a0)
    for(i = size_N; i < (2*size_N); ++i){
 6b0:	656d                	lui	a0,0x1b
 6b2:	625f 6675 5f00      	0x5f006675625f
    int ri_2[size]; // MX-ring poly, a
 6b8:	736f6c63          	bltu	t5,s6,df0 <ntru_deceypt+0x8c>
 6bc:	0065                	c.nop	25
 6be:	725f 3834 5f00      	0x5f003834725f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6c4:	626d                	lui	tp,0x1b
 6c6:	6f74                	flw	fa3,92(a4)
 6c8:	735f6377          	0x735f6377
 6cc:	6174                	flw	fa3,68(a0)
 6ce:	6574                	flw	fa3,76(a0)
 6d0:	5f00                	lw	s0,56(a4)
 6d2:	3570                	fld	fa2,232(a0)
 6d4:	616d0073          	0x616d0073
 6d8:	6e69                	lui	t3,0x1a
 6da:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 6dc:	745f 5f6d 646d      	0x646d5f6d745f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6e2:	7961                	lui	s2,0xffff8
 6e4:	7300                	flw	fs0,32(a4)
 6e6:	7a69                	lui	s4,0xffffa
    int ri[size];
 6e8:	5f65                	li	t5,-7
 6ea:	0061                	c.nop	24
 6ec:	657a6973          	csrrsi	s2,0x657,20
    int ti_1[size]; // ti_1[0] = 1
 6f0:	625f 6300 7472      	0x74726300625f
    int ti[size];
 6f6:	2e30                	fld	fa2,88(a2)
 6f8:	682f0053          	0x682f0053
    int qi_1[size];
 6fc:	2f656d6f          	jal	s10,569f2 <_stack_start+0x469f2>
    int temp[size];
 700:	6f74                	flw	fa3,92(a4)
 702:	6170                	flw	fa2,68(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 704:	636c                	flw	fa1,68(a4)
 706:	7365442f          	0x7365442f
    int ri_2[size]; // MX-ring poly, a
 70a:	706f746b          	0x706f746b
    for (i = 0; i < size; ++i) {
 70e:	6f72702f          	0x6f72702f
        ti_2[i] = 0;
 712:	656a                	flw	fa0,152(sp)
 714:	656c                	flw	fa1,76(a0)
 716:	2f72                	fld	ft10,280(sp)
 718:	75636c6f          	jal	s8,36e6e <_stack_start+0x26e6e>
    for (i = 0; i < size; ++i) {
 71c:	2f6d                	jal	ed6 <memcpy+0x10>
    ti_1[0] = 1;
 71e:	2e32                	fld	ft8,264(sp)
 720:	6461                	lui	s0,0x18
 722:	0064                	addi	s1,sp,12
        for (i = N + 1; i < (2 * N + 2); ++i) {
 724:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 728:	5341                	li	t1,-16
 72a:	3220                	fld	fs0,96(a2)
        for (i = 0; i < N + 1; ++i) {
 72c:	332e                	fld	ft6,232(sp)
 72e:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x21a>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	009e                	slli	ra,ra,0x7
  2e:	0000                	unimp
  30:	0048                	addi	a0,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0130                	addi	a2,sp,136
  3a:	0000                	unimp
  3c:	01d0                	addi	a2,sp,196
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4230                	lw	a2,64(a2)
  44:	0389                	addi	t2,t2,2
  46:	934c                	0x934c
  48:	9405                	srai	s0,s0,0x21
  4a:	5e06                	lw	t3,96(sp)
  4c:	0288                	addi	a0,sp,320
  4e:	0492                	slli	s1,s1,0x4
  50:	0795                	addi	a5,a5,5
  52:	0896                	slli	a7,a7,0x5
  54:	0181                	addi	gp,gp,0
  56:	0c420997          	auipc	s3,0xc420
  5a:	0008                	0x8
  5c:	fa02                	fsw	ft0,52(sp)
  5e:	0c0a                	slli	s8,s8,0x2
  60:	3002                	fld	ft0,32(sp)
  62:	c142                	sw	a6,128(sp)
  64:	c842                	sw	a6,16(sp)
  66:	c942                	sw	a6,144(sp)
  68:	d242                	sw	a6,36(sp)
  6a:	d342                	sw	a6,164(sp)
  6c:	d442                	sw	a6,40(sp)
  6e:	d542                	sw	a6,168(sp)
  70:	d642                	sw	a6,44(sp)
  72:	d742                	sw	a6,172(sp)
  74:	0e4a                	slli	t3,t3,0x12
  76:	4200                	lw	s0,0(a2)
  78:	0000000b          	0xb
  jal x0, default_exc_handler
  7c:	0044                	addi	s1,sp,4
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0000                	unimp
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0300                	addi	s0,sp,384
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	0166                	slli	sp,sp,0x19
  8a:	0000                	unimp
    asm volatile(
  8c:	0e42                	slli	t3,t3,0x10
  8e:	4220                	lw	s0,64(a2)
}
  90:	0389                	addi	t2,t2,2
    switch(length%3) {
  92:	924e                	add	tp,tp,s3
  94:	9304                	0x9304
  96:	5605                	li	a2,-31
  98:	0288                	addi	a0,sp,320
  9a:	0694                	addi	a3,sp,832
  9c:	0795                	addi	a5,a5,5
  9e:	0181                	addi	gp,gp,0
  a0:	0896                	slli	a7,a7,0x5
  a2:	0c42                	slli	s8,s8,0x10
  a4:	0008                	0x8
            for (i = 0; i < (length / 3); i++) {
  a6:	e802                	fsw	ft0,16(sp)
  a8:	0c0a                	slli	s8,s8,0x2
  aa:	2002                	fld	ft0,0(sp)
  ac:	c142                	sw	a6,128(sp)
  ae:	c842                	sw	a6,16(sp)
  b0:	c942                	sw	a6,144(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	d242                	sw	a6,36(sp)
  b4:	d342                	sw	a6,164(sp)
  b6:	d442                	sw	a6,40(sp)
  b8:	d542                	sw	a6,168(sp)
  ba:	d642                	sw	a6,44(sp)
  bc:	0e4a                	slli	t3,t3,0x12
  be:	4200                	lw	s0,0(a2)
  c0:	0000000b          	0xb
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	0054                	addi	a3,sp,4
  c6:	0000                	unimp
  c8:	0000                	unimp
  ca:	0000                	unimp
  cc:	0466                	slli	s0,s0,0x19
  ce:	0000                	unimp
  d0:	0250                	addi	a2,sp,260
  d2:	0000                	unimp
  d4:	0e46                	slli	t3,t3,0x11
  d6:	5e40                	lw	s0,60(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	0288                	addi	a0,sp,320
  da:	0389                	addi	t2,t2,2
  dc:	0492                	slli	s1,s1,0x4
  de:	06940593          	addi	a1,s0,105 # 18069 <_stack_start+0x8069>
  e2:	0795                	addi	a5,a5,5
  e4:	0896                	slli	a7,a7,0x5
  e6:	0b990997          	auipc	s3,0xb990
            a1[length-2] = a1[length-2] + a2[length-2];
  ea:	0c9a                	slli	s9,s9,0x6
  ec:	01810d9b          	0x1810d9b
  f0:	0a98                	addi	a4,sp,336
  f2:	0c42                	slli	s8,s8,0x10
  f4:	0008                	0x8
  f6:	0a010403          	lb	s0,160(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	020c                	addi	a1,sp,256
  fc:	4240                	lw	s0,4(a2)
    asm volatile(
  fe:	42c1                	li	t0,16
 100:	42c8                	lw	a0,4(a3)
 102:	42c9                	li	t0,18
 104:	42d2                	lw	t0,20(sp)
 106:	42d442d3          	0x42d442d3
            for (i = 0; i < (length / 3); i++) {
 10a:	42d5                	li	t0,21
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	42d6                	lw	t0,84(sp)
 10e:	42d842d7          	0x42d842d7
    asm volatile(
 112:	42d9                	li	t0,22
 114:	42da                	lw	t0,148(sp)
 116:	000e4adb          	0xe4adb
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	0b42                	slli	s6,s6,0x10
 11c:	0054                	addi	a3,sp,4
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0000                	unimp
 120:	0000                	unimp
    asm volatile(
 122:	0000                	unimp
 124:	06b6                	slli	a3,a3,0xd
 126:	0000                	unimp
 128:	02e4                	addi	s1,sp,332
 12a:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	0e46                	slli	t3,t3,0x11
 12e:	5e50                	lw	a2,60(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 130:	0288                	addi	a0,sp,320
 132:	0389                	addi	t2,t2,2
 134:	0492                	slli	s1,s1,0x4
 136:	06940593          	addi	a1,s0,105
    int line[size_b][size_a + size_b];
 13a:	0795                	addi	a5,a5,5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13c:	0896                	slli	a7,a7,0x5
 13e:	0b990997          	auipc	s3,0xb990
    int line[size_b][size_a + size_b];
 142:	0c9a                	slli	s9,s9,0x6
 144:	01810d9b          	0x1810d9b
 148:	0a98                	addi	a4,sp,336
 14a:	0c42                	slli	s8,s8,0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 14c:	0008                	0x8
    int pola[size_a];
 14e:	0a014203          	lbu	tp,160(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 152:	020c                	addi	a1,sp,256
 154:	4250                	lw	a2,4(a2)
 156:	42c1                	li	t0,16
 158:	42c8                	lw	a0,4(a3)
 15a:	42c9                	li	t0,18
 15c:	42d2                	lw	t0,20(sp)
 15e:	42d442d3          	0x42d442d3
    int line[size_b][size_a + size_b];
 162:	42d5                	li	t0,21
    int pola[size_a];
 164:	42d6                	lw	t0,84(sp)
 166:	42d842d7          	0x42d842d7
    int line[size_b][size_a + size_b];
 16a:	42d9                	li	t0,22
 16c:	42da                	lw	t0,148(sp)
    int pola[size_a];
 16e:	000e4adb          	0xe4adb
    int polb[size_b];
 172:	0b42                	slli	s6,s6,0x10
 174:	0058                	addi	a4,sp,4
 176:	0000                	unimp
    int pola[size_a];
 178:	0000                	unimp
    int polb[size_b];
 17a:	0000                	unimp
 17c:	099a                	slli	s3,s3,0x6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 17e:	0000                	unimp
    int line[size_b][size_a + size_b];
 180:	031e                	slli	t1,t1,0x7
 182:	0000                	unimp
    int pola[size_a];
 184:	0e42                	slli	t3,t3,0x10
 186:	0480                	addi	s0,sp,576
    int polb[size_b];
 188:	814c                	0x814c
    for (i = 0; i < size_b; ++i){
 18a:	8801                	andi	s0,s0,0
 18c:	8902                	jr	s2
 18e:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
            product[j] = 0;
 192:	7000                	flw	fs0,32(s0)
 194:	0492                	slli	s1,s1,0x4
 196:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_b; ++i){
 19a:	0795                	addi	a5,a5,5
 19c:	0896                	slli	a7,a7,0x5
    for (i = 0; i < size_a; ++i){
 19e:	0a980997          	auipc	s3,0xa980
 1a2:	0b990d9b          	0xb990d9b
    for (i = 0; i < size_b; ++i){
 1a6:	0c9a                	slli	s9,s9,0x6
 1a8:	0a01f403          	0xa01f403
    if(star_mult == 1){
 1ac:	020c                	addi	a1,sp,256
 1ae:	0480                	addi	s0,sp,576
 1b0:	c144                	sw	s1,4(a0)
 1b2:	c844                	sw	s1,20(s0)
 1b4:	c944                	sw	s1,20(a0)
 1b6:	d244                	sw	s1,36(a2)
 1b8:	d344                	sw	s1,36(a4)
 1ba:	d444                	sw	s1,44(s0)
        for (j = size_b -1; j >= 0; j = j-1){
 1bc:	d544                	sw	s1,44(a0)
 1be:	d644                	sw	s1,44(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1c0:	d744                	sw	s1,44(a4)
 1c2:	d844                	sw	s1,52(s0)
            product[j] = 0;
 1c4:	d944                	sw	s1,52(a0)
 1c6:	da44                	sw	s1,52(a2)
 1c8:	db44                	sw	s1,52(a4)
            line[i][j] = 0;
 1ca:	0e4c                	addi	a1,sp,788
 1cc:	4200                	lw	s0,0(a2)
            product[j] = 0;
 1ce:	0038000b          	0x38000b
        for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	0000                	unimp
 1d4:	0000                	unimp
 1d6:	0000                	unimp
 1d8:	0cb8                	addi	a4,sp,600
    for (i = 0; i < size_b; ++i){
 1da:	0000                	unimp
 1dc:	00ac                	addi	a1,sp,72
 1de:	0000                	unimp
 1e0:	0e42                	slli	t3,t3,0x10
        for(j = 0; j < size_a + size_b -1; ++j){
 1e2:	01e0                	addi	s0,sp,204
 1e4:	884c                	0x884c
        pola[i] = a[i];
 1e6:	8902                	jr	s2
 1e8:	04924c03          	lbu	s8,73(tp) # fffe1049 <_stack_start+0xfffd1049>
 1ec:	815a0593          	addi	a1,s4,-2027 # ffff9815 <_stack_start+0xfffe9815>
            pola[i] = pola[i] + mod;
 1f0:	9401                	srai	s0,s0,0x20
        while (pola[i] < 0){
 1f2:	9506                	add	a0,a0,ra
 1f4:	0a4a0207          	0xa4a0207
 1f8:	42c1                	li	t0,16
        pola[i] = pola[i] % mod;
 1fa:	4ec8                	lw	a0,28(a3)
 1fc:	42c9                	li	t0,18
    for (i = 0; i < size_a; ++i){
 1fe:	42d2                	lw	t0,20(sp)
 200:	42d442d3          	0x42d442d3
        pola[i] = pola[i] % mod;
 204:	42d5                	li	t0,21
    for (i = 0; i < size_a; ++i){
 206:	000e                	c.slli	zero,0x3
            pola[i] = pola[i] + mod;
 208:	0b42                	slli	s6,s6,0x10
 20a:	0000                	unimp
        polb[i] = b[i];
 20c:	0044                	addi	s1,sp,4
 20e:	0000                	unimp
 210:	0000                	unimp
 212:	0000                	unimp
            polb[i] = polb[i] + mod;
 214:	0d64                	addi	s1,sp,668
        while (polb[i] < 0){
 216:	0000                	unimp
 218:	00ec                	addi	a1,sp,76
 21a:	0000                	unimp
        polb[i] = polb[i] % mod;
 21c:	0e42                	slli	t3,t3,0x10
 21e:	4430                	lw	a2,72(s0)
    for (i = 0; i < size_b; ++i){
 220:	0288                	addi	a0,sp,320
 222:	0694                	addi	a3,sp,832
        polb[i] = polb[i] % mod;
 224:	984a                	add	a6,a6,s2
 226:	4c0a                	lw	s8,128(sp)
    for (i = 0; i < size_b; ++i){
 228:	924c0593          	addi	a1,s8,-1756
            polb[i] = polb[i] + mod;
 22c:	9604                	0x9604
    if(star_mult == 1){
 22e:	5a08                	lw	a0,48(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 230:	0181                	addi	gp,gp,0
 232:	0389                	addi	t2,t2,2
        for(j = 0; j < size_a + size_b -1; ++j){
 234:	0795                	addi	a5,a5,5
    for (i = 0; i < size_b; ++i){
 236:	52020997          	auipc	s3,0x52020
    for(i = 0; i < size_b; ++i){
 23a:	c10a                	sw	sp,128(sp)
		array_add(product,line[i],size_a+size_b-1);
 23c:	c842                	sw	a6,16(sp)
 23e:	c94e                	sw	s3,144(sp)
 240:	d242                	sw	a6,36(sp)
 242:	d342                	sw	a6,164(sp)
    for(i = 0; i < size_b; ++i){
 244:	d442                	sw	a6,40(sp)
 246:	d542                	sw	a6,168(sp)
 248:	d642                	sw	a6,44(sp)
 24a:	d742                	sw	a6,172(sp)
 24c:	d842                	sw	a6,48(sp)
 24e:	0e42                	slli	t3,t3,0x10
    for(j = 0; j < size_a + size_b -1; ++j){
 250:	4200                	lw	s0,0(a2)
 252:	0020000b          	0x20000b
}
 256:	0000                	unimp
 258:	0000                	unimp
 25a:	0000                	unimp
 25c:	104c                	addi	a1,sp,36
 25e:	0000                	unimp
 260:	00f8                	addi	a4,sp,76
 262:	0000                	unimp
 264:	0e44                	addi	s1,sp,788
 266:	08b0                	addi	a2,sp,88
 268:	8156                	mv	sp,s5
 26a:	8801                	andi	s0,s0,0
 26c:	0202                	c.slli64	tp
 26e:	0ac8                	addi	a0,sp,340
 270:	44c1                	li	s1,16
 272:	46c8                	lw	a0,12(a3)
 274:	000e                	c.slli	zero,0x3
 276:	0b42                	slli	s6,s6,0x10

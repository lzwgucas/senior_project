
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4fd0006f          	j	d78 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4fd0006f          	j	d7c <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4f50006f          	j	d78 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4f10006f          	j	d78 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <polymult>:


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){


    int line[size_b][size_a + size_b];
      b4:	00d588b3          	add	a7,a1,a3
      b8:	00269813          	slli	a6,a3,0x2
      bc:	00289f13          	slli	t5,a7,0x2
      c0:	fff88e93          	addi	t4,a7,-1
      c4:	030888b3          	mul	a7,a7,a6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c8:	1101                	addi	sp,sp,-32
      ca:	cc26                	sw	s1,24(sp)
      cc:	84be                	mv	s1,a5
    int i,j,k;
    int *return_address1;
    int pola[size_a];
      ce:	00259793          	slli	a5,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	ce22                	sw	s0,28(sp)
      d4:	ca4a                	sw	s2,20(sp)
      d6:	c84e                	sw	s3,16(sp)
      d8:	c652                	sw	s4,12(sp)
      da:	c05e                	sw	s7,0(sp)
    int line[size_b][size_a + size_b];
      dc:	08bd                	addi	a7,a7,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      de:	c456                	sw	s5,8(sp)
      e0:	c25a                	sw	s6,4(sp)
      e2:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
      e4:	ff08f893          	andi	a7,a7,-16
    int pola[size_a];
      e8:	07bd                	addi	a5,a5,15
      ea:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
      ec:	41110133          	sub	sp,sp,a7
      f0:	8e0a                	mv	t3,sp
    int pola[size_a];
      f2:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
      f6:	00f80793          	addi	a5,a6,15
      fa:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
      fc:	828a                	mv	t0,sp
    int polb[size_b];
      fe:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     102:	fff68313          	addi	t1,a3,-1
    int pola[size_a];
     106:	fff58913          	addi	s2,a1,-1
    int polb[size_b];
     10a:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     10c:	002f5393          	srli	t2,t5,0x2
     110:	8ff2                	mv	t6,t3
    for (i = 0; i < size_b; ++i){
     112:	8a72                	mv	s4,t3
     114:	4981                	li	s3,0
            product[j] = 0;
     116:	00001b97          	auipc	s7,0x1
     11a:	12ab8b93          	addi	s7,s7,298 # 1240 <_bss_start>
    for (i = 0; i < size_b; ++i){
     11e:	04d9c463          	blt	s3,a3,166 <polymult+0xb2>
     122:	8996                	mv	s3,t0
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     124:	4a01                	li	s4,0
     126:	04ba4363          	blt	s4,a1,16c <polymult+0xb8>
     12a:	853e                	mv	a0,a5
        }
        pola[i] = pola[i] % mod;
    }

//
    for (i = 0; i < size_b; ++i){
     12c:	4881                	li	a7,0
     12e:	06d8c363          	blt	a7,a3,194 <polymult+0xe0>
        polb[i] = polb[i] % mod;
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     132:	4605                	li	a2,1
     134:	97c2                	add	a5,a5,a6
     136:	08c48063          	beq	s1,a2,1b6 <polymult+0x102>
     13a:	1871                	addi	a6,a6,-4
     13c:	ffcf0513          	addi	a0,t5,-4
     140:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     142:	06034d63          	bltz	t1,1bc <polymult+0x108>
            for (k = size_a-1; k >= 0; k = k-1 ){
     146:	864a                	mv	a2,s2
     148:	a8d5                	j	23c <polymult+0x188>
            product[j] = 0;
     14a:	00289b13          	slli	s6,a7,0x2
     14e:	9b5e                	add	s6,s6,s7
            line[i][j] = 0;
     150:	000aa023          	sw	zero,0(s5)
            product[j] = 0;
     154:	000b2023          	sw	zero,0(s6)
        for(j = 0; j < size_a + size_b -1; ++j){
     158:	0885                	addi	a7,a7,1
     15a:	0a91                	addi	s5,s5,4
     15c:	ffd8c7e3          	blt	a7,t4,14a <polymult+0x96>
    for (i = 0; i < size_b; ++i){
     160:	0985                	addi	s3,s3,1
     162:	9a7a                	add	s4,s4,t5
     164:	bf6d                	j	11e <polymult+0x6a>
     166:	8ad2                	mv	s5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     168:	4881                	li	a7,0
     16a:	bfcd                	j	15c <polymult+0xa8>
        pola[i] = a[i];
     16c:	002a1893          	slli	a7,s4,0x2
     170:	98aa                	add	a7,a7,a0
     172:	0008a883          	lw	a7,0(a7)
            pola[i] = pola[i] + mod;
     176:	0119a023          	sw	a7,0(s3)
        while (pola[i] < 0){
     17a:	0009a883          	lw	a7,0(s3)
     17e:	0008c963          	bltz	a7,190 <polymult+0xdc>
        pola[i] = pola[i] % mod;
     182:	02e8e8b3          	rem	a7,a7,a4
    for (i = 0; i < size_a; ++i){
     186:	0a05                	addi	s4,s4,1
     188:	0991                	addi	s3,s3,4
        pola[i] = pola[i] % mod;
     18a:	ff19ae23          	sw	a7,-4(s3)
    for (i = 0; i < size_a; ++i){
     18e:	bf61                	j	126 <polymult+0x72>
            pola[i] = pola[i] + mod;
     190:	98ba                	add	a7,a7,a4
     192:	b7d5                	j	176 <polymult+0xc2>
        polb[i] = b[i];
     194:	00289593          	slli	a1,a7,0x2
     198:	95b2                	add	a1,a1,a2
     19a:	418c                	lw	a1,0(a1)
            polb[i] = polb[i] + mod;
     19c:	c10c                	sw	a1,0(a0)
        while (polb[i] < 0){
     19e:	410c                	lw	a1,0(a0)
     1a0:	0005c963          	bltz	a1,1b2 <polymult+0xfe>
        polb[i] = polb[i] % mod;
     1a4:	02e5e5b3          	rem	a1,a1,a4
    for (i = 0; i < size_b; ++i){
     1a8:	0885                	addi	a7,a7,1
     1aa:	0511                	addi	a0,a0,4
        polb[i] = polb[i] % mod;
     1ac:	feb52e23          	sw	a1,-4(a0)
    for (i = 0; i < size_b; ++i){
     1b0:	bfbd                	j	12e <polymult+0x7a>
            polb[i] = polb[i] + mod;
     1b2:	95ba                	add	a1,a1,a4
     1b4:	b7e5                	j	19c <polymult+0xe8>
    if(star_mult == 1){
     1b6:	8572                	mv	a0,t3
        for (j = size_b -1; j >= 0; j = j-1){
     1b8:	06035363          	bgez	t1,21e <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	4601                	li	a2,0
    for (i = 0; i < size_b; ++i){
     1be:	0ad64163          	blt	a2,a3,260 <polymult+0x1ac>
     1c2:	00001617          	auipc	a2,0x1
     1c6:	07e60613          	addi	a2,a2,126 # 1240 <_bss_start>
     1ca:	8532                	mv	a0,a2
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     1cc:	4581                	li	a1,0
     1ce:	0bd5cc63          	blt	a1,t4,286 <polymult+0x1d2>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	4781                	li	a5,0
     1d4:	0bd7cb63          	blt	a5,t4,28a <polymult+0x1d6>


    return_address1 = &product[0];

    return return_address1;
}
     1d8:	fe040113          	addi	sp,s0,-32
     1dc:	4472                	lw	s0,28(sp)
     1de:	44e2                	lw	s1,24(sp)
     1e0:	4952                	lw	s2,20(sp)
     1e2:	49c2                	lw	s3,16(sp)
     1e4:	4a32                	lw	s4,12(sp)
     1e6:	4aa2                	lw	s5,8(sp)
     1e8:	4b12                	lw	s6,4(sp)
     1ea:	4b82                	lw	s7,0(sp)
     1ec:	00001517          	auipc	a0,0x1
     1f0:	05450513          	addi	a0,a0,84 # 1240 <_bss_start>
     1f4:	6105                	addi	sp,sp,32
     1f6:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     1f8:	00261593          	slli	a1,a2,0x2
     1fc:	00b50833          	add	a6,a0,a1
     200:	9596                	add	a1,a1,t0
     202:	418c                	lw	a1,0(a1)
     204:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     208:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     20a:	031585b3          	mul	a1,a1,a7
     20e:	00b82023          	sw	a1,0(a6)
            for (k = size_a-1; k >= 0; k = k-1 ){
     212:	fe0653e3          	bgez	a2,1f8 <polymult+0x144>
        for (j = size_b -1; j >= 0; j = j-1){
     216:	137d                	addi	t1,t1,-1
     218:	17f1                	addi	a5,a5,-4
     21a:	957a                	add	a0,a0,t5
     21c:	bf71                	j	1b8 <polymult+0x104>
            for (k = size_a-1; k >= 0; k = k-1 ){
     21e:	864a                	mv	a2,s2
     220:	bfcd                	j	212 <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     222:	00261593          	slli	a1,a2,0x2
     226:	00b808b3          	add	a7,a6,a1
     22a:	9596                	add	a1,a1,t0
     22c:	418c                	lw	a1,0(a1)
     22e:	ffc7a483          	lw	s1,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     232:	167d                	addi	a2,a2,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	029585b3          	mul	a1,a1,s1
     238:	00b8a023          	sw	a1,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     23c:	fe0653e3          	bgez	a2,222 <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
     240:	137d                	addi	t1,t1,-1
     242:	17f1                	addi	a5,a5,-4
     244:	982a                	add	a6,a6,a0
     246:	bdf5                	j	142 <polymult+0x8e>
            line[i][j] = line[i][j] % mod;
     248:	4388                	lw	a0,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     24a:	0585                	addi	a1,a1,1
     24c:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     24e:	02e56533          	rem	a0,a0,a4
     252:	fea7ae23          	sw	a0,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     256:	ffd5c9e3          	blt	a1,t4,248 <polymult+0x194>
    for (i = 0; i < size_b; ++i){
     25a:	0605                	addi	a2,a2,1
     25c:	9ffa                	add	t6,t6,t5
     25e:	b785                	j	1be <polymult+0x10a>
     260:	87fe                	mv	a5,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     262:	4581                	li	a1,0
     264:	bfcd                	j	256 <polymult+0x1a2>
            product[j] += line[i][j];
     266:	027807b3          	mul	a5,a6,t2
     26a:	00052883          	lw	a7,0(a0)
        for(i = 0; i < size_b; ++i){
     26e:	0805                	addi	a6,a6,1
            product[j] += line[i][j];
     270:	97ae                	add	a5,a5,a1
     272:	078a                	slli	a5,a5,0x2
     274:	97f2                	add	a5,a5,t3
     276:	439c                	lw	a5,0(a5)
     278:	97c6                	add	a5,a5,a7
     27a:	c11c                	sw	a5,0(a0)
        for(i = 0; i < size_b; ++i){
     27c:	fed845e3          	blt	a6,a3,266 <polymult+0x1b2>
    for(j = 0; j < size_a + size_b -1; ++j){
     280:	0585                	addi	a1,a1,1
     282:	0511                	addi	a0,a0,4
     284:	b7a9                	j	1ce <polymult+0x11a>
        for(i = 0; i < size_b; ++i){
     286:	4801                	li	a6,0
     288:	bfd5                	j	27c <polymult+0x1c8>
        product[j] = product[j] % mod;
     28a:	4214                	lw	a3,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     28c:	0785                	addi	a5,a5,1
     28e:	0611                	addi	a2,a2,4
        product[j] = product[j] % mod;
     290:	02e6e6b3          	rem	a3,a3,a4
     294:	fed62e23          	sw	a3,-4(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     298:	bf35                	j	1d4 <polymult+0x120>

0000029a <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29a:	1101                	addi	sp,sp,-32
     29c:	ca26                	sw	s1,20(sp)
     29e:	84b6                	mv	s1,a3

    int line[size_b][size_a + size_b];
     2a0:	00d587b3          	add	a5,a1,a3
     2a4:	00249893          	slli	a7,s1,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a8:	c84a                	sw	s2,16(sp)
     2aa:	c64e                	sw	s3,12(sp)
    int line[size_b][size_a + size_b];
     2ac:	00279913          	slli	s2,a5,0x2
     2b0:	fff78993          	addi	s3,a5,-1
     2b4:	02f887b3          	mul	a5,a7,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b8:	cc22                	sw	s0,24(sp)
     2ba:	c452                	sw	s4,8(sp)
     2bc:	c256                	sw	s5,4(sp)
     2be:	ce06                	sw	ra,28(sp)
     2c0:	c05a                	sw	s6,0(sp)
     2c2:	1000                	addi	s0,sp,32
     2c4:	832e                	mv	t1,a1
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2c6:	fff58e13          	addi	t3,a1,-1
    int line[size_b][size_a + size_b];
     2ca:	07bd                	addi	a5,a5,15
     2cc:	9bc1                	andi	a5,a5,-16
     2ce:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
     2d2:	00259793          	slli	a5,a1,0x2
     2d6:	07bd                	addi	a5,a5,15
     2d8:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     2da:	880a                	mv	a6,sp
    int pola[size_a];
     2dc:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     2e0:	00f88793          	addi	a5,a7,15
     2e4:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     2e6:	858a                	mv	a1,sp
    int polb[size_b];
     2e8:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     2ec:	16fd                	addi	a3,a3,-1
    int polb[size_b];
     2ee:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     2f0:	8a42                	mv	s4,a6
     2f2:	8fc2                	mv	t6,a6
     2f4:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     2f6:	00001a97          	auipc	s5,0x1
     2fa:	1a2a8a93          	addi	s5,s5,418 # 1498 <product2>
    for (i = 0; i < size_b; ++i){
     2fe:	049f4263          	blt	t5,s1,342 <polymult2+0xa8>
        }
    }

    for(i = 0; i < size_a; ++i){
     302:	4e81                	li	t4,0
     304:	046ec263          	blt	t4,t1,348 <polymult2+0xae>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     308:	4501                	li	a0,0
     30a:	04954a63          	blt	a0,s1,35e <polymult2+0xc4>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     30e:	4605                	li	a2,1
     310:	97c6                	add	a5,a5,a7
     312:	08c70263          	beq	a4,a2,396 <polymult2+0xfc>
     316:	18f1                	addi	a7,a7,-4
     318:	ffc90313          	addi	t1,s2,-4
     31c:	9846                	add	a6,a6,a7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0606ce63          	bltz	a3,39a <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	8772                	mv	a4,t3
     324:	a0c9                	j	3e6 <polymult2+0x14c>
            product2[j] = 0;
     326:	002e9393          	slli	t2,t4,0x2
     32a:	93d6                	add	t2,t2,s5
            line[i][j] = 0;
     32c:	0002a023          	sw	zero,0(t0)
            product2[j] = 0;
     330:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0e85                	addi	t4,t4,1
     336:	0291                	addi	t0,t0,4
     338:	ff3ec7e3          	blt	t4,s3,326 <polymult2+0x8c>
    for (i = 0; i < size_b; ++i){
     33c:	0f05                	addi	t5,t5,1
     33e:	9fca                	add	t6,t6,s2
     340:	bf7d                	j	2fe <polymult2+0x64>
     342:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	4e81                	li	t4,0
     346:	bfcd                	j	338 <polymult2+0x9e>
        pola[i] = a[i];
     348:	002e9f13          	slli	t5,t4,0x2
     34c:	01e58fb3          	add	t6,a1,t5
     350:	9f2a                	add	t5,t5,a0
     352:	000f2f03          	lw	t5,0(t5)
    for(i = 0; i < size_a; ++i){
     356:	0e85                	addi	t4,t4,1
        pola[i] = a[i];
     358:	01efa023          	sw	t5,0(t6)
    for(i = 0; i < size_a; ++i){
     35c:	b765                	j	304 <polymult2+0x6a>
        polb[i] = b[i];
     35e:	00251313          	slli	t1,a0,0x2
     362:	00678eb3          	add	t4,a5,t1
     366:	9332                	add	t1,t1,a2
     368:	00032303          	lw	t1,0(t1)
    for(i = 0; i < size_b; ++i){
     36c:	0505                	addi	a0,a0,1
        polb[i] = b[i];
     36e:	006ea023          	sw	t1,0(t4)
    for(i = 0; i < size_b; ++i){
     372:	bf61                	j	30a <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	00271613          	slli	a2,a4,0x2
     378:	00c80533          	add	a0,a6,a2
     37c:	962e                	add	a2,a2,a1
     37e:	4210                	lw	a2,0(a2)
     380:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	03160633          	mul	a2,a2,a7
     38a:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	fe0754e3          	bgez	a4,374 <polymult2+0xda>
        for (j = size_b -1; j >= 0; j = j-1){
     390:	16fd                	addi	a3,a3,-1
     392:	17f1                	addi	a5,a5,-4
     394:	984a                	add	a6,a6,s2
     396:	0206d963          	bgez	a3,3c8 <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	4a81                	li	s5,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
     39c:	00001b17          	auipc	s6,0x1
     3a0:	0fcb0b13          	addi	s6,s6,252 # 1498 <product2>
    for(i=0;i<size_b;++i){
     3a4:	049ac763          	blt	s5,s1,3f2 <polymult2+0x158>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     3a8:	fe040113          	addi	sp,s0,-32
     3ac:	40f2                	lw	ra,28(sp)
     3ae:	4462                	lw	s0,24(sp)
     3b0:	44d2                	lw	s1,20(sp)
     3b2:	4942                	lw	s2,16(sp)
     3b4:	49b2                	lw	s3,12(sp)
     3b6:	4a22                	lw	s4,8(sp)
     3b8:	4a92                	lw	s5,4(sp)
     3ba:	4b02                	lw	s6,0(sp)
     3bc:	00001517          	auipc	a0,0x1
     3c0:	0dc50513          	addi	a0,a0,220 # 1498 <product2>
     3c4:	6105                	addi	sp,sp,32
     3c6:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c8:	8772                	mv	a4,t3
     3ca:	b7c9                	j	38c <polymult2+0xf2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	00271513          	slli	a0,a4,0x2
     3d0:	00a808b3          	add	a7,a6,a0
     3d4:	952e                	add	a0,a0,a1
     3d6:	4110                	lw	a2,0(a0)
     3d8:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	02a60633          	mul	a2,a2,a0
     3e2:	00c8a023          	sw	a2,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	fe0753e3          	bgez	a4,3cc <polymult2+0x132>
        for (j = size_b -1; j >= 0; j = j-1){
     3ea:	16fd                	addi	a3,a3,-1
     3ec:	17f1                	addi	a5,a5,-4
     3ee:	981a                	add	a6,a6,t1
     3f0:	b73d                	j	31e <polymult2+0x84>
        array_add(product2,line[i],size_a+size_b-1);
     3f2:	85d2                	mv	a1,s4
     3f4:	864e                	mv	a2,s3
     3f6:	855a                	mv	a0,s6
     3f8:	3969                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     3fa:	0a85                	addi	s5,s5,1
     3fc:	9a4a                	add	s4,s4,s2
     3fe:	b75d                	j	3a4 <polymult2+0x10a>

00000400 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     400:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     404:	7139                	addi	sp,sp,-64
    int v[size_N];
     406:	07bd                	addi	a5,a5,15
     408:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     40a:	dc22                	sw	s0,56(sp)
     40c:	da26                	sw	s1,52(sp)
     40e:	d84a                	sw	s2,48(sp)
     410:	d64e                	sw	s3,44(sp)
     412:	d452                	sw	s4,40(sp)
     414:	d256                	sw	s5,36(sp)
     416:	d05a                	sw	s6,32(sp)
     418:	ce5e                	sw	s7,28(sp)
     41a:	ca66                	sw	s9,20(sp)
     41c:	c86a                	sw	s10,16(sp)
     41e:	c66e                	sw	s11,12(sp)
     420:	de06                	sw	ra,60(sp)
     422:	cc62                	sw	s8,24(sp)
     424:	0080                	addi	s0,sp,64
    int v[size_N];
     426:	40f10133          	sub	sp,sp,a5
     42a:	8a8a                	mv	s5,sp
    int q[size_N];
     42c:	40f10133          	sub	sp,sp,a5
     430:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
     432:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     436:	00269793          	slli	a5,a3,0x2
     43a:	07bd                	addi	a5,a5,15
     43c:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     43e:	8b0a                	mv	s6,sp
    int denum_temp[size_D];
     440:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     444:	89b6                	mv	s3,a3
     446:	893a                	mv	s2,a4
    int denum_temp[size_D];
     448:	fff68a13          	addi	s4,a3,-1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44c:	84ae                	mv	s1,a1
    int v[size_N];
     44e:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     452:	8d8a                	mv	s11,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     454:	8cda                	mv	s9,s6
     456:	875a                	mv	a4,s6
     458:	4681                	li	a3,0
     45a:	0296c663          	blt	a3,s1,486 <polydiv+0x86>
     45e:	876e                	mv	a4,s11
        num_temp[i] = num_temp[i] % mod;
    }


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     460:	4681                	li	a3,0
     462:	0536c363          	blt	a3,s3,4a8 <polydiv+0xa8>
        }
        denum_temp[i] = denum_temp[i] % mod;
    }


    for (i = 0; i < size_N; ++i){
     466:	4781                	li	a5,0
     468:	0697c163          	blt	a5,s1,4ca <polydiv+0xca>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     46c:	002a1793          	slli	a5,s4,0x2
     470:	97ee                	add	a5,a5,s11
     472:	4398                	lw	a4,0(a5)
     474:	060a5663          	bgez	s4,4e0 <polydiv+0xe0>
    for (i = 0; i < size_N; ++i){
     478:	4781                	li	a5,0
     47a:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     47c:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     47e:	072c4463          	blt	s8,s2,4e6 <polydiv+0xe6>
     482:	87ea                	mv	a5,s10
     484:	a895                	j	4f8 <polydiv+0xf8>
        num_temp[i] = num[i];
     486:	00269793          	slli	a5,a3,0x2
     48a:	97aa                	add	a5,a5,a0
     48c:	439c                	lw	a5,0(a5)
            num_temp[i] = num_temp[i] + mod;
     48e:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     490:	431c                	lw	a5,0(a4)
     492:	0007c963          	bltz	a5,4a4 <polydiv+0xa4>
        num_temp[i] = num_temp[i] % mod;
     496:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     49a:	0685                	addi	a3,a3,1
     49c:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     49e:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     4a2:	bf65                	j	45a <polydiv+0x5a>
            num_temp[i] = num_temp[i] + mod;
     4a4:	97ca                	add	a5,a5,s2
     4a6:	b7e5                	j	48e <polydiv+0x8e>
        denum_temp[i] = denum[i];
     4a8:	00269793          	slli	a5,a3,0x2
     4ac:	97b2                	add	a5,a5,a2
     4ae:	439c                	lw	a5,0(a5)
            denum_temp[i] = denum_temp[i] + mod;
     4b0:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     4b2:	431c                	lw	a5,0(a4)
     4b4:	0007c963          	bltz	a5,4c6 <polydiv+0xc6>
        denum_temp[i] = denum_temp[i] % mod;
     4b8:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     4bc:	0685                	addi	a3,a3,1
     4be:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     4c0:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     4c4:	bf79                	j	462 <polydiv+0x62>
            denum_temp[i] = denum_temp[i] + mod;
     4c6:	97ca                	add	a5,a5,s2
     4c8:	b7e5                	j	4b0 <polydiv+0xb0>
        q[i] = 0;
     4ca:	00279713          	slli	a4,a5,0x2
     4ce:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
     4d2:	9756                	add	a4,a4,s5
        q[i] = 0;
     4d4:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     4d8:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     4dc:	0785                	addi	a5,a5,1
     4de:	b769                	j	468 <polydiv+0x68>
        if( denum_temp[i] != 0 )
     4e0:	ff41                	bnez	a4,478 <polydiv+0x78>
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	1a7d                	addi	s4,s4,-1
     4e4:	b761                	j	46c <polydiv+0x6c>
        if ( (b_N*u)%mod == 1 )
     4e6:	0327e633          	rem	a2,a5,s2
     4ea:	97ba                	add	a5,a5,a4
     4ec:	f8d60be3          	beq	a2,a3,482 <polydiv+0x82>
    for (u = 0; u < mod; ++u){
     4f0:	0c05                	addi	s8,s8,1
     4f2:	b771                	j	47e <polydiv+0x7e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     4f4:	eb01                	bnez	a4,504 <polydiv+0x104>
    for (i = size_N-1; i >= 0; i = i-1){
     4f6:	17fd                	addi	a5,a5,-1
     4f8:	00279713          	slli	a4,a5,0x2
     4fc:	975a                	add	a4,a4,s6
     4fe:	4318                	lw	a4,0(a4)
     500:	fe07dae3          	bgez	a5,4f4 <polydiv+0xf4>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     504:	0547d663          	bge	a5,s4,550 <polydiv+0x150>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     508:	4781                	li	a5,0
        result[i] = q[i];
     50a:	00001697          	auipc	a3,0x1
     50e:	1e668693          	addi	a3,a3,486 # 16f0 <result>
    for(i = 0; i < size_N; ++i){
     512:	1097cd63          	blt	a5,s1,62c <polydiv+0x22c>
    }
   
    for(i = size_N; i < (2*size_N); ++i){
     516:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     51a:	00001697          	auipc	a3,0x1
     51e:	1d668693          	addi	a3,a3,470 # 16f0 <result>
    for(i = size_N; i < (2*size_N); ++i){
     522:	10e4ce63          	blt	s1,a4,63e <polydiv+0x23e>
    }

    return_address3 = &result[0];

    return return_address3;
}
     526:	fc040113          	addi	sp,s0,-64
     52a:	50f2                	lw	ra,60(sp)
     52c:	5462                	lw	s0,56(sp)
     52e:	54d2                	lw	s1,52(sp)
     530:	5942                	lw	s2,48(sp)
     532:	59b2                	lw	s3,44(sp)
     534:	5a22                	lw	s4,40(sp)
     536:	5a92                	lw	s5,36(sp)
     538:	5b02                	lw	s6,32(sp)
     53a:	4bf2                	lw	s7,28(sp)
     53c:	4c62                	lw	s8,24(sp)
     53e:	4cd2                	lw	s9,20(sp)
     540:	4d42                	lw	s10,16(sp)
     542:	4db2                	lw	s11,12(sp)
     544:	00001517          	auipc	a0,0x1
     548:	1ac50513          	addi	a0,a0,428 # 16f0 <result>
     54c:	6121                	addi	sp,sp,64
     54e:	8082                	ret
        v[(d-d2)] = u*r_d;
     550:	03870733          	mul	a4,a4,s8
     554:	414787b3          	sub	a5,a5,s4
     558:	078a                	slli	a5,a5,0x2
     55a:	97d6                	add	a5,a5,s5
     55c:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     55e:	87d6                	mv	a5,s5
     560:	4701                	li	a4,0
     562:	04974663          	blt	a4,s1,5ae <polydiv+0x1ae>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     566:	874a                	mv	a4,s2
     568:	86ce                	mv	a3,s3
     56a:	4781                	li	a5,0
     56c:	8656                	mv	a2,s5
     56e:	85ce                	mv	a1,s3
     570:	856e                	mv	a0,s11
     572:	3689                	jal	b4 <polymult>
        for (i = 0; i < size_N; ++i){
     574:	872a                	mv	a4,a0
     576:	4681                	li	a3,0
     578:	0496c563          	blt	a3,s1,5c2 <polydiv+0x1c2>
     57c:	875a                	mv	a4,s6
        for (i = 0; i < size_N; ++i){
     57e:	4781                	li	a5,0
     580:	0497cb63          	blt	a5,s1,5d6 <polydiv+0x1d6>
     584:	875a                	mv	a4,s6
        for (i = 0; i < size_N; ++i){
     586:	4681                	li	a3,0
     588:	0696c463          	blt	a3,s1,5f0 <polydiv+0x1f0>
    array_add(q,v,size_N);
     58c:	8626                	mv	a2,s1
     58e:	85d6                	mv	a1,s5
     590:	855e                	mv	a0,s7
     592:	3601                	jal	92 <array_add>
        for(i = 0; i < size_N; ++i){
     594:	87de                	mv	a5,s7
     596:	4701                	li	a4,0
     598:	06974663          	blt	a4,s1,604 <polydiv+0x204>
        for (i = size_N-1; i >= 0; i = i-1){
     59c:	87ea                	mv	a5,s10
     59e:	00279713          	slli	a4,a5,0x2
     5a2:	975a                	add	a4,a4,s6
     5a4:	4318                	lw	a4,0(a4)
     5a6:	0607d763          	bgez	a5,614 <polydiv+0x214>
     5aa:	4681                	li	a3,0
     5ac:	a8ad                	j	626 <polydiv+0x226>
            v[i] = v[i] % mod;
     5ae:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     5b0:	0705                	addi	a4,a4,1
     5b2:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     5b4:	0326e6b3          	rem	a3,a3,s2
     5b8:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     5bc:	b75d                	j	562 <polydiv+0x162>
                product[i] = product[i] + mod;
     5be:	97ca                	add	a5,a5,s2
     5c0:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     5c2:	431c                	lw	a5,0(a4)
     5c4:	fe07cde3          	bltz	a5,5be <polydiv+0x1be>
            product[i] = product[i] % mod;
     5c8:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5cc:	0685                	addi	a3,a3,1
     5ce:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     5d0:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5d4:	b755                	j	578 <polydiv+0x178>
            num_temp[i] = num_temp[i] - product[i];
     5d6:	00279613          	slli	a2,a5,0x2
     5da:	962a                	add	a2,a2,a0
     5dc:	4314                	lw	a3,0(a4)
     5de:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     5e0:	0785                	addi	a5,a5,1
     5e2:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     5e4:	8e91                	sub	a3,a3,a2
     5e6:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     5ea:	bf59                	j	580 <polydiv+0x180>
                num_temp[i] = num_temp[i] + mod;
     5ec:	97ca                	add	a5,a5,s2
     5ee:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     5f0:	431c                	lw	a5,0(a4)
     5f2:	fe07cde3          	bltz	a5,5ec <polydiv+0x1ec>
            num_temp[i] = num_temp[i] % mod;
     5f6:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5fa:	0685                	addi	a3,a3,1
     5fc:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     5fe:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     602:	b759                	j	588 <polydiv+0x188>
            q[i] = q[i] % mod;
     604:	4394                	lw	a3,0(a5)
        for(i = 0; i < size_N; ++i){
     606:	0705                	addi	a4,a4,1
     608:	0791                	addi	a5,a5,4
            q[i] = q[i] % mod;
     60a:	0326e6b3          	rem	a3,a3,s2
     60e:	fed7ae23          	sw	a3,-4(a5)
        for(i = 0; i < size_N; ++i){
     612:	b759                	j	598 <polydiv+0x198>
            if( num_temp[i] != 0 )
     614:	fb59                	bnez	a4,5aa <polydiv+0x1aa>
        for (i = size_N-1; i >= 0; i = i-1){
     616:	17fd                	addi	a5,a5,-1
     618:	b759                	j	59e <polydiv+0x19e>
            v[i] = 0;
     61a:	00269613          	slli	a2,a3,0x2
     61e:	9656                	add	a2,a2,s5
     620:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     624:	0685                	addi	a3,a3,1
     626:	fe96cae3          	blt	a3,s1,61a <polydiv+0x21a>
     62a:	bde9                	j	504 <polydiv+0x104>
        result[i] = q[i];
     62c:	00279713          	slli	a4,a5,0x2
     630:	00e68633          	add	a2,a3,a4
     634:	975e                	add	a4,a4,s7
     636:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     638:	0785                	addi	a5,a5,1
        result[i] = q[i];
     63a:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     63c:	bdd9                	j	512 <polydiv+0x112>
        result[i] = num_temp[i-size_N];
     63e:	000ca603          	lw	a2,0(s9)
     642:	00249793          	slli	a5,s1,0x2
     646:	97b6                	add	a5,a5,a3
     648:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     64a:	0485                	addi	s1,s1,1
     64c:	0c91                	addi	s9,s9,4
     64e:	bdd1                	j	522 <polydiv+0x122>

00000650 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     650:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     654:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     656:	07bd                	addi	a5,a5,15
     658:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     65a:	c4a2                	sw	s0,72(sp)
     65c:	c2a6                	sw	s1,68(sp)
     65e:	c0ca                	sw	s2,64(sp)
     660:	de4e                	sw	s3,60(sp)
     662:	dc52                	sw	s4,56(sp)
     664:	da56                	sw	s5,52(sp)
     666:	d85a                	sw	s6,48(sp)
     668:	d65e                	sw	s7,44(sp)
     66a:	d266                	sw	s9,36(sp)
     66c:	d06a                	sw	s10,32(sp)
     66e:	ce6e                	sw	s11,28(sp)
     670:	c686                	sw	ra,76(sp)
     672:	d462                	sw	s8,40(sp)
     674:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     676:	40f10133          	sub	sp,sp,a5
     67a:	8d0a                	mv	s10,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     67c:	40f10133          	sub	sp,sp,a5
     680:	8d8a                	mv	s11,sp
    int ri[size];
     682:	40f10133          	sub	sp,sp,a5
     686:	8b0a                	mv	s6,sp

    int ti_1[size]; // ti_1[0] = 1
     688:	40f10133          	sub	sp,sp,a5
     68c:	8a0a                	mv	s4,sp
    int ti[size];
     68e:	40f10133          	sub	sp,sp,a5
     692:	8b8a                	mv	s7,sp
    int qi_1[size];
     694:	40f10133          	sub	sp,sp,a5
     698:	8a8a                	mv	s5,sp
    int temp[size];
     69a:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     69e:	84b6                	mv	s1,a3
     6a0:	8932                	mv	s2,a2
    int ri_2[size]; // MX-ring poly, a
     6a2:	fff60993          	addi	s3,a2,-1
    int temp[size];
     6a6:	8c8a                	mv	s9,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     6a8:	4781                	li	a5,0
     6aa:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     6ac:	00001697          	auipc	a3,0x1
     6b0:	29c68693          	addi	a3,a3,668 # 1948 <ti_2>
    for (i = 0; i < size; ++i) {
     6b4:	01274b63          	blt	a4,s2,6ca <ext_euclid+0x7a>

///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     6b8:	4785                	li	a5,1
     6ba:	00fa2023          	sw	a5,0(s4)
            }
            ri_1[i] = ri_1[i] % mod;
        }

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6be:	00191793          	slli	a5,s2,0x1
     6c2:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     6c6:	4681                	li	a3,0
     6c8:	a0a9                	j	712 <ext_euclid+0xc2>
        ri_2[i] = polyR[i];
     6ca:	00f508b3          	add	a7,a0,a5
     6ce:	0008a883          	lw	a7,0(a7)
     6d2:	00fd0633          	add	a2,s10,a5
    for (i = 0; i < size; ++i) {
     6d6:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     6d8:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     6dc:	00f588b3          	add	a7,a1,a5
     6e0:	0008a883          	lw	a7,0(a7)
     6e4:	00fd8633          	add	a2,s11,a5
     6e8:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     6ec:	00f68633          	add	a2,a3,a5
     6f0:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     6f4:	00fa0633          	add	a2,s4,a5
     6f8:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     6fc:	0791                	addi	a5,a5,4
     6fe:	bf5d                	j	6b4 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     700:	97a6                	add	a5,a5,s1
     702:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     704:	431c                	lw	a5,0(a4)
     706:	fe07cde3          	bltz	a5,700 <ext_euclid+0xb0>
            ri_2[i] = ri_2[i] % mod;
     70a:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     70e:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     710:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     712:	00d9c663          	blt	s3,a3,71e <ext_euclid+0xce>
     716:	00269713          	slli	a4,a3,0x2
     71a:	976a                	add	a4,a4,s10
     71c:	b7e5                	j	704 <ext_euclid+0xb4>
     71e:	876e                	mv	a4,s11
        for (i = 0; i < N + 1; ++i) {
     720:	4681                	li	a3,0
     722:	0cd9d063          	bge	s3,a3,7e2 <ext_euclid+0x192>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     726:	8726                	mv	a4,s1
     728:	86ca                	mv	a3,s2
     72a:	866e                	mv	a2,s11
     72c:	85ca                	mv	a1,s2
     72e:	856a                	mv	a0,s10
     730:	39c1                	jal	400 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     732:	875a                	mv	a4,s6
     734:	87ca                	mv	a5,s2
     736:	fbc42683          	lw	a3,-68(s0)
     73a:	0ad7ce63          	blt	a5,a3,7f6 <ext_euclid+0x1a6>
     73e:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     740:	4701                	li	a4,0
     742:	0ce9d363          	bge	s3,a4,808 <ext_euclid+0x1b8>
     746:	8c66                	mv	s8,s9
     748:	8766                	mv	a4,s9
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     74a:	4681                	li	a3,0
     74c:	0cd9dd63          	bge	s3,a3,826 <ext_euclid+0x1d6>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     750:	8726                	mv	a4,s1
     752:	86ca                	mv	a3,s2
     754:	866e                	mv	a2,s11
     756:	85ca                	mv	a1,s2
     758:	8566                	mv	a0,s9
     75a:	315d                	jal	400 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     75c:	4781                	li	a5,0
     75e:	0cf9de63          	bge	s3,a5,83a <ext_euclid+0x1ea>
     762:	8756                	mv	a4,s5
            qi_1[i] = res1[i];
        }

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     764:	4681                	li	a3,0
     766:	0ed9d563          	bge	s3,a3,850 <ext_euclid+0x200>
            qi_1[i] = qi_1[i] % mod;
        }

/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     76a:	4781                	li	a5,0
     76c:	8726                	mv	a4,s1
     76e:	86ca                	mv	a3,s2
     770:	8652                	mv	a2,s4
     772:	85ca                	mv	a1,s2
     774:	8556                	mv	a0,s5
     776:	3a3d                	jal	b4 <polymult>
        for (i = 0; i < N + 1; ++i) {
     778:	4781                	li	a5,0
     77a:	0ef9d563          	bge	s3,a5,864 <ext_euclid+0x214>
            temp[i] = res2[i];
        }

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     77e:	4701                	li	a4,0
     780:	0ee9de63          	bge	s3,a4,87c <ext_euclid+0x22c>
     784:	4781                	li	a5,0
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        for (i = 0; i < N + 1; ++i) {
     786:	4701                	li	a4,0
     788:	10e9d563          	bge	s3,a4,892 <ext_euclid+0x242>
     78c:	875e                	mv	a4,s7
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     78e:	4681                	li	a3,0
     790:	12d9d363          	bge	s3,a3,8b6 <ext_euclid+0x266>
     794:	4781                	li	a5,0
        controlR = 0;
     796:	4701                	li	a4,0
        }

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///


        for (i = 0; i < N + 1; ++i) {
     798:	4681                	li	a3,0
     79a:	12d9d863          	bge	s3,a3,8ca <ext_euclid+0x27a>
    while (controlR != 0) {
     79e:	f705                	bnez	a4,6c6 <ext_euclid+0x76>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7a0:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     7a2:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7a4:	1697c463          	blt	a5,s1,90c <ext_euclid+0x2bc>
     7a8:	00001617          	auipc	a2,0x1
     7ac:	1a060613          	addi	a2,a2,416 # 1948 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7b0:	16e9d863          	bge	s3,a4,920 <ext_euclid+0x2d0>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     7b4:	fb040113          	addi	sp,s0,-80
     7b8:	40b6                	lw	ra,76(sp)
     7ba:	4426                	lw	s0,72(sp)
     7bc:	4496                	lw	s1,68(sp)
     7be:	4906                	lw	s2,64(sp)
     7c0:	59f2                	lw	s3,60(sp)
     7c2:	5a62                	lw	s4,56(sp)
     7c4:	5ad2                	lw	s5,52(sp)
     7c6:	5b42                	lw	s6,48(sp)
     7c8:	5bb2                	lw	s7,44(sp)
     7ca:	5c22                	lw	s8,40(sp)
     7cc:	5c92                	lw	s9,36(sp)
     7ce:	5d02                	lw	s10,32(sp)
     7d0:	4df2                	lw	s11,28(sp)
     7d2:	00001517          	auipc	a0,0x1
     7d6:	17650513          	addi	a0,a0,374 # 1948 <ti_2>
     7da:	6161                	addi	sp,sp,80
     7dc:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     7de:	97a6                	add	a5,a5,s1
     7e0:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     7e2:	431c                	lw	a5,0(a4)
     7e4:	fe07cde3          	bltz	a5,7de <ext_euclid+0x18e>
            ri_1[i] = ri_1[i] % mod;
     7e8:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     7ec:	0685                	addi	a3,a3,1
     7ee:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     7f0:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     7f4:	b73d                	j	722 <ext_euclid+0xd2>
            ri[i - (N + 1)] = res[i];
     7f6:	00279693          	slli	a3,a5,0x2
     7fa:	96aa                	add	a3,a3,a0
     7fc:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7fe:	0785                	addi	a5,a5,1
     800:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     802:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     806:	bf05                	j	736 <ext_euclid+0xe6>
            temp[i] = ri_2[i] - ri[i];
     808:	00fd06b3          	add	a3,s10,a5
     80c:	00fb05b3          	add	a1,s6,a5
     810:	4294                	lw	a3,0(a3)
     812:	418c                	lw	a1,0(a1)
     814:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     818:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     81a:	8e8d                	sub	a3,a3,a1
     81c:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     81e:	0791                	addi	a5,a5,4
     820:	b70d                	j	742 <ext_euclid+0xf2>
                temp[i] = temp[i] + mod;
     822:	97a6                	add	a5,a5,s1
     824:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     826:	431c                	lw	a5,0(a4)
     828:	fe07cde3          	bltz	a5,822 <ext_euclid+0x1d2>
            temp[i] = temp[i] % mod;
     82c:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     830:	0685                	addi	a3,a3,1
     832:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     834:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     838:	bf11                	j	74c <ext_euclid+0xfc>
            qi_1[i] = res1[i];
     83a:	00279713          	slli	a4,a5,0x2
     83e:	00e506b3          	add	a3,a0,a4
     842:	4294                	lw	a3,0(a3)
     844:	9756                	add	a4,a4,s5
        for (i = 0; i < N + 1; ++i) {
     846:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     848:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     84a:	bf11                	j	75e <ext_euclid+0x10e>
                qi_1[i] = qi_1[i] + mod;
     84c:	97a6                	add	a5,a5,s1
     84e:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     850:	431c                	lw	a5,0(a4)
     852:	fe07cde3          	bltz	a5,84c <ext_euclid+0x1fc>
            qi_1[i] = qi_1[i] % mod;
     856:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     85a:	0685                	addi	a3,a3,1
     85c:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     85e:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     862:	b711                	j	766 <ext_euclid+0x116>
            temp[i] = res2[i];
     864:	00279713          	slli	a4,a5,0x2
     868:	00e506b3          	add	a3,a0,a4
     86c:	4294                	lw	a3,0(a3)
     86e:	9766                	add	a4,a4,s9
        for (i = 0; i < N + 1; ++i) {
     870:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     872:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     874:	b719                	j	77a <ext_euclid+0x12a>
                temp[i] = temp[i] + mod;
     876:	97a6                	add	a5,a5,s1
     878:	00fc2023          	sw	a5,0(s8)
            while (temp[i] < 0) {
     87c:	000c2783          	lw	a5,0(s8)
     880:	fe07cbe3          	bltz	a5,876 <ext_euclid+0x226>
            temp[i] = temp[i] % mod;
     884:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     888:	0705                	addi	a4,a4,1
     88a:	0c11                	addi	s8,s8,4
            temp[i] = temp[i] % mod;
     88c:	fefc2e23          	sw	a5,-4(s8)
        for (i = 0; i < N + 1; ++i) {
     890:	bdc5                	j	780 <ext_euclid+0x130>
            ti[i] = ti_2[i] - temp[i];
     892:	00001697          	auipc	a3,0x1
     896:	0b668693          	addi	a3,a3,182 # 1948 <ti_2>
     89a:	96be                	add	a3,a3,a5
     89c:	00fc85b3          	add	a1,s9,a5
     8a0:	4294                	lw	a3,0(a3)
     8a2:	418c                	lw	a1,0(a1)
     8a4:	00fb8633          	add	a2,s7,a5
        for (i = 0; i < N + 1; ++i) {
     8a8:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8aa:	8e8d                	sub	a3,a3,a1
     8ac:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ae:	0791                	addi	a5,a5,4
     8b0:	bde1                	j	788 <ext_euclid+0x138>
                ti[i] = ti[i] + mod;
     8b2:	97a6                	add	a5,a5,s1
     8b4:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     8b6:	431c                	lw	a5,0(a4)
     8b8:	fe07cde3          	bltz	a5,8b2 <ext_euclid+0x262>
            ti[i] = ti[i] % mod;
     8bc:	0297e7b3          	rem	a5,a5,s1
        for (i = 0; i < N + 1; ++i) {
     8c0:	0685                	addi	a3,a3,1
     8c2:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     8c4:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8c8:	b5e1                	j	790 <ext_euclid+0x140>
            ri_2[i] = ri_1[i];
     8ca:	00fd85b3          	add	a1,s11,a5
     8ce:	4188                	lw	a0,0(a1)
     8d0:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     8d4:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8d6:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8d8:	00fb0633          	add	a2,s6,a5
     8dc:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8de:	00001517          	auipc	a0,0x1
     8e2:	06a50513          	addi	a0,a0,106 # 1948 <ti_2>
     8e6:	953e                	add	a0,a0,a5
            ri_1[i] = ri[i];
     8e8:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8ea:	00fa05b3          	add	a1,s4,a5
     8ee:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8f2:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8f4:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8f8:	00fb8533          	add	a0,s7,a5
     8fc:	4108                	lw	a0,0(a0)
     8fe:	c188                	sw	a0,0(a1)
              qi_1[i] = 0;
     900:	00fa85b3          	add	a1,s5,a5
     904:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     908:	0791                	addi	a5,a5,4
     90a:	bd41                	j	79a <ext_euclid+0x14a>
            if (((ri_2[0] * j) % mod) == 1)
     90c:	000d2683          	lw	a3,0(s10)
     910:	02d786b3          	mul	a3,a5,a3
     914:	0296e6b3          	rem	a3,a3,s1
     918:	e8c688e3          	beq	a3,a2,7a8 <ext_euclid+0x158>
        for (j = 0; j < mod; ++j) {
     91c:	0785                	addi	a5,a5,1
     91e:	b559                	j	7a4 <ext_euclid+0x154>
            ti_2[i] = (ti_2[i] * j) % mod;
     920:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     922:	0705                	addi	a4,a4,1
     924:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     926:	02d786b3          	mul	a3,a5,a3
     92a:	0296e6b3          	rem	a3,a3,s1
     92e:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     932:	bdbd                	j	7b0 <ext_euclid+0x160>

00000934 <generate_keys>:




int* generate_keys(int N, int p, int q){
     934:	7141                	addi	sp,sp,-496
     936:	1e112623          	sw	ra,492(sp)
     93a:	1e812423          	sw	s0,488(sp)
     93e:	1e912223          	sw	s1,484(sp)
     942:	1b80                	addi	s0,sp,496
     944:	1f212023          	sw	s2,480(sp)
     948:	1d312e23          	sw	s3,476(sp)
     94c:	1d412c23          	sw	s4,472(sp)
     950:	1d512a23          	sw	s5,468(sp)
     954:	1d612823          	sw	s6,464(sp)
     958:	1d712623          	sw	s7,460(sp)
     95c:	1da12023          	sw	s10,448(sp)
     960:	1d812423          	sw	s8,456(sp)
     964:	1d912223          	sw	s9,452(sp)
     968:	892a                	mv	s2,a0
     96a:	8bae                	mv	s7,a1
     96c:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96e:	4581                	li	a1,0
     970:	0d000613          	li	a2,208
     974:	e2440513          	addi	a0,s0,-476
     978:	2b91                	jal	ecc <memset>
     97a:	4485                	li	s1,1
     97c:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97e:	0d800613          	li	a2,216
     982:	4581                	li	a1,0
     984:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     988:	e1342c23          	sw	s3,-488(s0)
     98c:	e0942e23          	sw	s1,-484(s0)
     990:	e2942023          	sw	s1,-480(s0)
     994:	e3342423          	sw	s3,-472(s0)
     998:	e2942823          	sw	s1,-464(s0)
     99c:	e2942e23          	sw	s1,-452(s0)
     9a0:	e5342023          	sw	s3,-448(s0)
     9a4:	e5342223          	sw	s3,-444(s0)
     9a8:	e4942623          	sw	s1,-436(s0)
     9ac:	e5342a23          	sw	s3,-428(s0)
     9b0:	e4942e23          	sw	s1,-420(s0)
     9b4:	e6942023          	sw	s1,-416(s0)
     9b8:	e7342623          	sw	s3,-404(s0)
     9bc:	e6942a23          	sw	s1,-396(s0)
     9c0:	e8942023          	sw	s1,-384(s0)
     9c4:	e8942223          	sw	s1,-380(s0)
     9c8:	e8942423          	sw	s1,-376(s0)
     9cc:	e9342623          	sw	s3,-372(s0)
     9d0:	e8942a23          	sw	s1,-364(s0)
     9d4:	ea942023          	sw	s1,-352(s0)
     9d8:	ea942223          	sw	s1,-348(s0)
     9dc:	ea942423          	sw	s1,-344(s0)
     9e0:	eb342623          	sw	s3,-340(s0)
     9e4:	ea942a23          	sw	s1,-332(s0)
     9e8:	ec942023          	sw	s1,-320(s0)
     9ec:	ec942223          	sw	s1,-316(s0)
     9f0:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9f4:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f8:	29d1                	jal	ecc <memset>
    int polyR[N+1];
     9fa:	002a9793          	slli	a5,s5,0x2
     9fe:	07bd                	addi	a5,a5,15
     a00:	9bc1                	andi	a5,a5,-16
     a02:	40f10133          	sub	sp,sp,a5
     a06:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a08:	00291d13          	slli	s10,s2,0x2
     a0c:	01aa07b3          	add	a5,s4,s10
     a10:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a12:	ef342a23          	sw	s3,-268(s0)
     a16:	ee942e23          	sw	s1,-260(s0)
     a1a:	f0942023          	sw	s1,-256(s0)
     a1e:	f0942423          	sw	s1,-248(s0)
     a22:	f1342a23          	sw	s3,-236(s0)
     a26:	f1342e23          	sw	s3,-228(s0)
     a2a:	f3342023          	sw	s3,-224(s0)
     a2e:	f2942423          	sw	s1,-216(s0)
     a32:	f3342823          	sw	s3,-208(s0)
     a36:	f2942c23          	sw	s1,-200(s0)
     a3a:	f4942223          	sw	s1,-188(s0)
     a3e:	f5342423          	sw	s3,-184(s0)
     a42:	f4942823          	sw	s1,-176(s0)
     a46:	f4942e23          	sw	s1,-164(s0)
     a4a:	f7342023          	sw	s3,-160(s0)
     a4e:	f6942423          	sw	s1,-152(s0)
     a52:	f6942a23          	sw	s1,-140(s0)
     a56:	f7342c23          	sw	s3,-136(s0)
     a5a:	f8942023          	sw	s1,-128(s0)
     a5e:	f8942423          	sw	s1,-120(s0)
     a62:	f8942623          	sw	s1,-116(s0)
     a66:	f8942c23          	sw	s1,-104(s0)
     a6a:	f9342e23          	sw	s3,-100(s0)
     a6e:	fa942223          	sw	s1,-92(s0)
     a72:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a76:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a7a:	4785                	li	a5,1
     a7c:	1127c263          	blt	a5,s2,b80 <generate_keys+0x24c>
     a80:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a82:	03600693          	li	a3,54
     a86:	10f6d463          	bge	a3,a5,b8e <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a8a:	4781                	li	a5,0
        random_keys[i] = f[i];
     a8c:	00001697          	auipc	a3,0x1
     a90:	04c68693          	addi	a3,a3,76 # 1ad8 <random_keys>
    for(i = 0; i < N; ++i){
     a94:	1127cb63          	blt	a5,s2,baa <generate_keys+0x276>
     a98:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a9c:	00191993          	slli	s3,s2,0x1
     aa0:	87ca                	mv	a5,s2
     aa2:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     aa4:	00001617          	auipc	a2,0x1
     aa8:	03460613          	addi	a2,a2,52 # 1ad8 <random_keys>
    for(i = N; i < (2*N); ++i){
     aac:	1137ca63          	blt	a5,s3,bc0 <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     ab0:	448d                	li	s1,3
     ab2:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     ab6:	86de                	mv	a3,s7
     ab8:	8656                	mv	a2,s5
     aba:	e1840593          	addi	a1,s0,-488
     abe:	8552                	mv	a0,s4
     ac0:	3e41                	jal	650 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     ac2:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     ac4:	00001697          	auipc	a3,0x1
     ac8:	01468693          	addi	a3,a3,20 # 1ad8 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     acc:	1097c263          	blt	a5,s1,bd0 <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     ad0:	8656                	mv	a2,s5
     ad2:	86da                	mv	a3,s6
     ad4:	e1840593          	addi	a1,s0,-488
     ad8:	8552                	mv	a0,s4
     ada:	3e9d                	jal	650 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     adc:	5751                	li	a4,-12
     ade:	02e90733          	mul	a4,s2,a4
     ae2:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ae4:	00001617          	auipc	a2,0x1
     ae8:	ff460613          	addi	a2,a2,-12 # 1ad8 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     aec:	0fa4ca63          	blt	s1,s10,be0 <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     af0:	4701                	li	a4,0
     af2:	85ca                	mv	a1,s2
     af4:	86ca                	mv	a3,s2
     af6:	8666                	mv	a2,s9
     af8:	fa2ff0ef          	jal	ra,29a <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     afc:	87aa                	mv	a5,a0
     afe:	4701                	li	a4,0
     b00:	fff98593          	addi	a1,s3,-1
     b04:	0eb74863          	blt	a4,a1,bf4 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b08:	86d6                	mv	a3,s5
     b0a:	875a                	mv	a4,s6
     b0c:	8652                	mv	a2,s4
     b0e:	38cd                	jal	400 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b10:	4795                	li	a5,5
     b12:	02f907b3          	mul	a5,s2,a5
     b16:	098a                	slli	s3,s3,0x2
     b18:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b1a:	00001697          	auipc	a3,0x1
     b1e:	fbe68693          	addi	a3,a3,-66 # 1ad8 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b22:	0991                	addi	s3,s3,4
     b24:	0efc4063          	blt	s8,a5,c04 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b28:	4699                	li	a3,6
     b2a:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b2c:	00001617          	auipc	a2,0x1
     b30:	fac60613          	addi	a2,a2,-84 # 1ad8 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b34:	02d906b3          	mul	a3,s2,a3
     b38:	02a90933          	mul	s2,s2,a0
     b3c:	0cf6dc63          	bge	a3,a5,c14 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b40:	e1040113          	addi	sp,s0,-496
     b44:	1ec12083          	lw	ra,492(sp)
     b48:	1e812403          	lw	s0,488(sp)
     b4c:	1e412483          	lw	s1,484(sp)
     b50:	1e012903          	lw	s2,480(sp)
     b54:	1dc12983          	lw	s3,476(sp)
     b58:	1d812a03          	lw	s4,472(sp)
     b5c:	1d412a83          	lw	s5,468(sp)
     b60:	1d012b03          	lw	s6,464(sp)
     b64:	1cc12b83          	lw	s7,460(sp)
     b68:	1c812c03          	lw	s8,456(sp)
     b6c:	1c412c83          	lw	s9,452(sp)
     b70:	1c012d03          	lw	s10,448(sp)
     b74:	00001517          	auipc	a0,0x1
     b78:	f6450513          	addi	a0,a0,-156 # 1ad8 <random_keys>
     b7c:	617d                	addi	sp,sp,496
     b7e:	8082                	ret
        polyR[i] = 0;
     b80:	00279713          	slli	a4,a5,0x2
     b84:	9752                	add	a4,a4,s4
     b86:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b8a:	0785                	addi	a5,a5,1
     b8c:	bdc5                	j	a7c <generate_keys+0x148>
        f[i] = 0;
     b8e:	00279713          	slli	a4,a5,0x2
     b92:	e1840613          	addi	a2,s0,-488
     b96:	963a                	add	a2,a2,a4
     b98:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b9c:	ef440613          	addi	a2,s0,-268
     ba0:	9732                	add	a4,a4,a2
     ba2:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     ba6:	0785                	addi	a5,a5,1
     ba8:	bdf9                	j	a86 <generate_keys+0x152>
        random_keys[i] = f[i];
     baa:	00279713          	slli	a4,a5,0x2
     bae:	e1840593          	addi	a1,s0,-488
     bb2:	00e68633          	add	a2,a3,a4
     bb6:	972e                	add	a4,a4,a1
     bb8:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     bba:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     bbc:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     bbe:	bdd9                	j	a94 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     bc0:	430c                	lw	a1,0(a4)
     bc2:	00279693          	slli	a3,a5,0x2
     bc6:	96b2                	add	a3,a3,a2
     bc8:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bca:	0785                	addi	a5,a5,1
     bcc:	0711                	addi	a4,a4,4
     bce:	bdf9                	j	aac <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bd0:	4110                	lw	a2,0(a0)
     bd2:	00279713          	slli	a4,a5,0x2
     bd6:	9736                	add	a4,a4,a3
     bd8:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bda:	0785                	addi	a5,a5,1
     bdc:	0511                	addi	a0,a0,4
     bde:	b5fd                	j	acc <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     be0:	00249793          	slli	a5,s1,0x2
     be4:	00f706b3          	add	a3,a4,a5
     be8:	96aa                	add	a3,a3,a0
     bea:	4294                	lw	a3,0(a3)
     bec:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bee:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bf0:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bf2:	bded                	j	aec <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bf4:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bf6:	0705                	addi	a4,a4,1
     bf8:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bfa:	037686b3          	mul	a3,a3,s7
     bfe:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     c02:	b709                	j	b04 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	ff89a603          	lw	a2,-8(s3)
     c08:	002c1713          	slli	a4,s8,0x2
     c0c:	9736                	add	a4,a4,a3
     c0e:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c10:	0c05                	addi	s8,s8,1
     c12:	bf01                	j	b22 <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     c14:	00279713          	slli	a4,a5,0x2
     c18:	00e605b3          	add	a1,a2,a4
     c1c:	974a                	add	a4,a4,s2
     c1e:	9752                	add	a4,a4,s4
     c20:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c22:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c24:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c26:	bf19                	j	b3c <generate_keys+0x208>

00000c28 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c28:	7115                	addi	sp,sp,-224
     c2a:	cda2                	sw	s0,216(sp)
     c2c:	cba6                	sw	s1,212(sp)
     c2e:	842a                	mv	s0,a0
     c30:	84b2                	mv	s1,a2
     c32:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c34:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c38:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3a:	850a                	mv	a0,sp
     c3c:	00000597          	auipc	a1,0x0
     c40:	48058593          	addi	a1,a1,1152 # 10bc <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c44:	cf86                	sw	ra,220(sp)
     c46:	c7ce                	sw	s3,204(sp)
     c48:	c5d2                	sw	s4,200(sp)
     c4a:	89b6                	mv	s3,a3
     c4c:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	2245                	jal	dee <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c50:	4781                	li	a5,0
     c52:	874a                	mv	a4,s2
     c54:	03000693          	li	a3,48
     c58:	85a2                	mv	a1,s0
     c5a:	860a                	mv	a2,sp
     c5c:	854e                	mv	a0,s3
     c5e:	c56ff0ef          	jal	ra,b4 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     c62:	85a6                	mv	a1,s1
     c64:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c68:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     c6e:	c24ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c72:	00140693          	addi	a3,s0,1
     c76:	874a                	mv	a4,s2
     c78:	8652                	mv	a2,s4
     c7a:	85a6                	mv	a1,s1
     c7c:	854e                	mv	a0,s3
     c7e:	f82ff0ef          	jal	ra,400 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c82:	478d                	li	a5,3
     c84:	02f40433          	mul	s0,s0,a5
     c88:	87aa                	mv	a5,a0
     c8a:	0084ca63          	blt	s1,s0,c9e <ntru_encyrpt+0x76>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c8e:	40fe                	lw	ra,220(sp)
     c90:	446e                	lw	s0,216(sp)
     c92:	44de                	lw	s1,212(sp)
     c94:	494e                	lw	s2,208(sp)
     c96:	49be                	lw	s3,204(sp)
     c98:	4a2e                	lw	s4,200(sp)
     c9a:	612d                	addi	sp,sp,224
     c9c:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c9e:	00249713          	slli	a4,s1,0x2
     ca2:	972a                	add	a4,a4,a0
     ca4:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     ca6:	0485                	addi	s1,s1,1
     ca8:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     caa:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     cae:	bff1                	j	c8a <ntru_encyrpt+0x62>

00000cb0 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	7179                	addi	sp,sp,-48
     cb2:	d422                	sw	s0,40(sp)
     cb4:	ce4e                	sw	s3,28(sp)
     cb6:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cb8:	498d                	li	s3,3
     cba:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	d04a                	sw	s2,32(sp)
     cc0:	ca56                	sw	s5,20(sp)
     cc2:	c65e                	sw	s7,12(sp)
     cc4:	8932                	mv	s2,a2
     cc6:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc8:	863e                	mv	a2,a5
     cca:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ccc:	8aae                	mv	s5,a1
     cce:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd0:	85a2                	mv	a1,s0
     cd2:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd4:	d606                	sw	ra,44(sp)
     cd6:	d226                	sw	s1,36(sp)
     cd8:	cc52                	sw	s4,24(sp)
     cda:	c85a                	sw	s6,16(sp)
     cdc:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cde:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce2:	db8ff0ef          	jal	ra,29a <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce6:	00140b13          	addi	s6,s0,1
     cea:	874a                	mv	a4,s2
     cec:	86da                	mv	a3,s6
     cee:	8652                	mv	a2,s4
     cf0:	85a6                	mv	a1,s1
     cf2:	f0eff0ef          	jal	ra,400 <polydiv>
     cf6:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	87aa                	mv	a5,a0
     cfa:	872a                	mv	a4,a0
     cfc:	86a6                	mv	a3,s1
     cfe:	0536c263          	blt	a3,s3,d42 <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     d02:	4589                	li	a1,2
     d04:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d08:	4701                	li	a4,0
     d0a:	04874563          	blt	a4,s0,d54 <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d0e:	4701                	li	a4,0
     d10:	86a2                	mv	a3,s0
     d12:	85a2                	mv	a1,s0
     d14:	855e                	mv	a0,s7
     d16:	d84ff0ef          	jal	ra,29a <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d1a:	8756                	mv	a4,s5
     d1c:	86da                	mv	a3,s6
     d1e:	8652                	mv	a2,s4
     d20:	85a6                	mv	a1,s1
     d22:	edeff0ef          	jal	ra,400 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	87aa                	mv	a5,a0
     d28:	0334cf63          	blt	s1,s3,d66 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d2c:	50b2                	lw	ra,44(sp)
     d2e:	5422                	lw	s0,40(sp)
     d30:	5492                	lw	s1,36(sp)
     d32:	5902                	lw	s2,32(sp)
     d34:	49f2                	lw	s3,28(sp)
     d36:	4a62                	lw	s4,24(sp)
     d38:	4ad2                	lw	s5,20(sp)
     d3a:	4b42                	lw	s6,16(sp)
     d3c:	4bb2                	lw	s7,12(sp)
     d3e:	6145                	addi	sp,sp,48
     d40:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d42:	00269593          	slli	a1,a3,0x2
     d46:	95b2                	add	a1,a1,a2
     d48:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4a:	0685                	addi	a3,a3,1
     d4c:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d4e:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	b775                	j	cfe <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d54:	4394                	lw	a3,0(a5)
     d56:	00d5d563          	bge	a1,a3,d60 <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d5a:	412686b3          	sub	a3,a3,s2
     d5e:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d60:	0705                	addi	a4,a4,1
     d62:	0791                	addi	a5,a5,4
     d64:	b75d                	j	d0a <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d66:	00249713          	slli	a4,s1,0x2
     d6a:	972a                	add	a4,a4,a0
     d6c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6e:	0485                	addi	s1,s1,1
     d70:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d72:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d76:	bf4d                	j	d28 <ntru_deceypt+0x78>

00000d78 <default_exc_handler>:
  jal x0, default_exc_handler
     d78:	0000006f          	j	d78 <default_exc_handler>

00000d7c <reset_handler>:
  mv  x1, x0
     d7c:	00000093          	li	ra,0
  mv  x2, x1
     d80:	8106                	mv	sp,ra
  mv  x3, x1
     d82:	8186                	mv	gp,ra
  mv  x4, x1
     d84:	8206                	mv	tp,ra
  mv  x5, x1
     d86:	8286                	mv	t0,ra
  mv  x6, x1
     d88:	8306                	mv	t1,ra
  mv  x7, x1
     d8a:	8386                	mv	t2,ra
  mv  x8, x1
     d8c:	8406                	mv	s0,ra
  mv  x9, x1
     d8e:	8486                	mv	s1,ra
  mv x10, x1
     d90:	8506                	mv	a0,ra
  mv x11, x1
     d92:	8586                	mv	a1,ra
  mv x12, x1
     d94:	8606                	mv	a2,ra
  mv x13, x1
     d96:	8686                	mv	a3,ra
  mv x14, x1
     d98:	8706                	mv	a4,ra
  mv x15, x1
     d9a:	8786                	mv	a5,ra
  mv x16, x1
     d9c:	8806                	mv	a6,ra
  mv x17, x1
     d9e:	8886                	mv	a7,ra
  mv x18, x1
     da0:	8906                	mv	s2,ra
  mv x19, x1
     da2:	8986                	mv	s3,ra
  mv x20, x1
     da4:	8a06                	mv	s4,ra
  mv x21, x1
     da6:	8a86                	mv	s5,ra
  mv x22, x1
     da8:	8b06                	mv	s6,ra
  mv x23, x1
     daa:	8b86                	mv	s7,ra
  mv x24, x1
     dac:	8c06                	mv	s8,ra
  mv x25, x1
     dae:	8c86                	mv	s9,ra
  mv x26, x1
     db0:	8d06                	mv	s10,ra
  mv x27, x1
     db2:	8d86                	mv	s11,ra
  mv x28, x1
     db4:	8e06                	mv	t3,ra
  mv x29, x1
     db6:	8e86                	mv	t4,ra
  mv x30, x1
     db8:	8f06                	mv	t5,ra
  mv x31, x1
     dba:	8f86                	mv	t6,ra
  la   x2, _stack_start
     dbc:	0000f117          	auipc	sp,0xf
     dc0:	24410113          	addi	sp,sp,580 # 10000 <_stack_start>

00000dc4 <_start>:
  la x26, _bss_start
     dc4:	00000d17          	auipc	s10,0x0
     dc8:	47cd0d13          	addi	s10,s10,1148 # 1240 <_bss_start>
  la x27, _bss_end
     dcc:	00001d97          	auipc	s11,0x1
     dd0:	204d8d93          	addi	s11,s11,516 # 1fd0 <_bss_end>
  bge x26, x27, zero_loop_end
     dd4:	01bd5763          	bge	s10,s11,de2 <main_entry>

00000dd8 <zero_loop>:
  sw x0, 0(x26)
     dd8:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     ddc:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dde:	ffaddde3          	bge	s11,s10,dd8 <zero_loop>

00000de2 <main_entry>:
  addi x10, x0, 0
     de2:	00000513          	li	a0,0
  addi x11, x0, 0
     de6:	00000593          	li	a1,0
  jal x1, main
     dea:	18a000ef          	jal	ra,f74 <main>

00000dee <memcpy>:
     dee:	00a5c7b3          	xor	a5,a1,a0
     df2:	8b8d                	andi	a5,a5,3
     df4:	00c508b3          	add	a7,a0,a2
     df8:	e7a1                	bnez	a5,e40 <memcpy+0x52>
     dfa:	478d                	li	a5,3
     dfc:	04c7f263          	bgeu	a5,a2,e40 <memcpy+0x52>
     e00:	00357793          	andi	a5,a0,3
     e04:	872a                	mv	a4,a0
     e06:	eba9                	bnez	a5,e58 <memcpy+0x6a>
     e08:	ffc8f613          	andi	a2,a7,-4
     e0c:	fe060793          	addi	a5,a2,-32
     e10:	06f76763          	bltu	a4,a5,e7e <memcpy+0x90>
     e14:	02c77363          	bgeu	a4,a2,e3a <memcpy+0x4c>
     e18:	86ae                	mv	a3,a1
     e1a:	87ba                	mv	a5,a4
     e1c:	0006a803          	lw	a6,0(a3)
     e20:	0791                	addi	a5,a5,4
     e22:	0691                	addi	a3,a3,4
     e24:	ff07ae23          	sw	a6,-4(a5)
     e28:	fec7eae3          	bltu	a5,a2,e1c <memcpy+0x2e>
     e2c:	fff60793          	addi	a5,a2,-1
     e30:	8f99                	sub	a5,a5,a4
     e32:	9bf1                	andi	a5,a5,-4
     e34:	0791                	addi	a5,a5,4
     e36:	973e                	add	a4,a4,a5
     e38:	95be                	add	a1,a1,a5
     e3a:	01176663          	bltu	a4,a7,e46 <memcpy+0x58>
     e3e:	8082                	ret
     e40:	872a                	mv	a4,a0
     e42:	ff157ee3          	bgeu	a0,a7,e3e <memcpy+0x50>
     e46:	0005c783          	lbu	a5,0(a1)
     e4a:	0705                	addi	a4,a4,1
     e4c:	0585                	addi	a1,a1,1
     e4e:	fef70fa3          	sb	a5,-1(a4)
     e52:	ff176ae3          	bltu	a4,a7,e46 <memcpy+0x58>
     e56:	8082                	ret
     e58:	0005c683          	lbu	a3,0(a1)
     e5c:	0705                	addi	a4,a4,1
     e5e:	00377793          	andi	a5,a4,3
     e62:	fed70fa3          	sb	a3,-1(a4)
     e66:	0585                	addi	a1,a1,1
     e68:	d3c5                	beqz	a5,e08 <memcpy+0x1a>
     e6a:	0005c683          	lbu	a3,0(a1)
     e6e:	0705                	addi	a4,a4,1
     e70:	00377793          	andi	a5,a4,3
     e74:	fed70fa3          	sb	a3,-1(a4)
     e78:	0585                	addi	a1,a1,1
     e7a:	fff9                	bnez	a5,e58 <memcpy+0x6a>
     e7c:	b771                	j	e08 <memcpy+0x1a>
     e7e:	41d4                	lw	a3,4(a1)
     e80:	0005a283          	lw	t0,0(a1)
     e84:	0085af83          	lw	t6,8(a1)
     e88:	00c5af03          	lw	t5,12(a1)
     e8c:	0105ae83          	lw	t4,16(a1)
     e90:	0145ae03          	lw	t3,20(a1)
     e94:	0185a303          	lw	t1,24(a1)
     e98:	01c5a803          	lw	a6,28(a1)
     e9c:	c354                	sw	a3,4(a4)
     e9e:	5194                	lw	a3,32(a1)
     ea0:	00572023          	sw	t0,0(a4)
     ea4:	01f72423          	sw	t6,8(a4)
     ea8:	01e72623          	sw	t5,12(a4)
     eac:	01d72823          	sw	t4,16(a4)
     eb0:	01c72a23          	sw	t3,20(a4)
     eb4:	00672c23          	sw	t1,24(a4)
     eb8:	01072e23          	sw	a6,28(a4)
     ebc:	d314                	sw	a3,32(a4)
     ebe:	02470713          	addi	a4,a4,36
     ec2:	02458593          	addi	a1,a1,36
     ec6:	faf76ce3          	bltu	a4,a5,e7e <memcpy+0x90>
     eca:	b7a9                	j	e14 <memcpy+0x26>

00000ecc <memset>:
     ecc:	433d                	li	t1,15
     ece:	872a                	mv	a4,a0
     ed0:	02c37363          	bgeu	t1,a2,ef6 <memset+0x2a>
     ed4:	00f77793          	andi	a5,a4,15
     ed8:	efbd                	bnez	a5,f56 <memset+0x8a>
     eda:	e5ad                	bnez	a1,f44 <memset+0x78>
     edc:	ff067693          	andi	a3,a2,-16
     ee0:	8a3d                	andi	a2,a2,15
     ee2:	96ba                	add	a3,a3,a4
     ee4:	c30c                	sw	a1,0(a4)
     ee6:	c34c                	sw	a1,4(a4)
     ee8:	c70c                	sw	a1,8(a4)
     eea:	c74c                	sw	a1,12(a4)
     eec:	0741                	addi	a4,a4,16
     eee:	fed76be3          	bltu	a4,a3,ee4 <memset+0x18>
     ef2:	e211                	bnez	a2,ef6 <memset+0x2a>
     ef4:	8082                	ret
     ef6:	40c306b3          	sub	a3,t1,a2
     efa:	068a                	slli	a3,a3,0x2
     efc:	00000297          	auipc	t0,0x0
     f00:	9696                	add	a3,a3,t0
     f02:	00a68067          	jr	10(a3)
     f06:	00b70723          	sb	a1,14(a4)
     f0a:	00b706a3          	sb	a1,13(a4)
     f0e:	00b70623          	sb	a1,12(a4)
     f12:	00b705a3          	sb	a1,11(a4)
     f16:	00b70523          	sb	a1,10(a4)
     f1a:	00b704a3          	sb	a1,9(a4)
     f1e:	00b70423          	sb	a1,8(a4)
     f22:	00b703a3          	sb	a1,7(a4)
     f26:	00b70323          	sb	a1,6(a4)
     f2a:	00b702a3          	sb	a1,5(a4)
     f2e:	00b70223          	sb	a1,4(a4)
     f32:	00b701a3          	sb	a1,3(a4)
     f36:	00b70123          	sb	a1,2(a4)
     f3a:	00b700a3          	sb	a1,1(a4)
     f3e:	00b70023          	sb	a1,0(a4)
     f42:	8082                	ret
     f44:	0ff5f593          	andi	a1,a1,255
     f48:	00859693          	slli	a3,a1,0x8
     f4c:	8dd5                	or	a1,a1,a3
     f4e:	01059693          	slli	a3,a1,0x10
     f52:	8dd5                	or	a1,a1,a3
     f54:	b761                	j	edc <memset+0x10>
     f56:	00279693          	slli	a3,a5,0x2
     f5a:	00000297          	auipc	t0,0x0
     f5e:	9696                	add	a3,a3,t0
     f60:	8286                	mv	t0,ra
     f62:	fa8680e7          	jalr	-88(a3)
     f66:	8096                	mv	ra,t0
     f68:	17c1                	addi	a5,a5,-16
     f6a:	8f1d                	sub	a4,a4,a5
     f6c:	963e                	add	a2,a2,a5
     f6e:	f8c374e3          	bgeu	t1,a2,ef6 <memset+0x2a>
     f72:	b7a5                	j	eda <memset+0xe>

00000f74 <main>:

int main(){
     f74:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f78:	0c000613          	li	a2,192
     f7c:	00000597          	auipc	a1,0x0
     f80:	20058593          	addi	a1,a1,512 # 117c <__DTOR_END__+0xc0>
     f84:	0068                	addi	a0,sp,12
int main(){
     f86:	42112623          	sw	ra,1068(sp)
     f8a:	42812423          	sw	s0,1064(sp)
     f8e:	42912223          	sw	s1,1060(sp)
     f92:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f96:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f9a:	3d91                	jal	dee <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f9c:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     fa0:	00000417          	auipc	s0,0x0
     fa4:	29c40413          	addi	s0,s0,668 # 123c <_edata>
    keys = generate_keys(N, p, q);
     fa8:	06500613          	li	a2,101
     fac:	458d                	li	a1,3
     fae:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     fb2:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     fb4:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     fb8:	3ab5                	jal	934 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     fba:	4781                	li	a5,0
     fbc:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fbe:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fc2:	00f506b3          	add	a3,a0,a5
     fc6:	4290                	lw	a2,0(a3)
     fc8:	1314                	addi	a3,sp,416
     fca:	96be                	add	a3,a3,a5
     fcc:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fce:	0791                	addi	a5,a5,4
     fd0:	fee799e3          	bne	a5,a4,fc2 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fd4:	1cd8                	addi	a4,sp,628
     fd6:	1a850793          	addi	a5,a0,424
     fda:	27c50693          	addi	a3,a0,636
     fde:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fe0:	4390                	lw	a2,0(a5)
     fe2:	0791                	addi	a5,a5,4
     fe4:	0711                	addi	a4,a4,4
     fe6:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fea:	fed79be3          	bne	a5,a3,fe0 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fee:	01f8                	addi	a4,sp,204
     ff0:	35050793          	addi	a5,a0,848
     ff4:	42450613          	addi	a2,a0,1060
     ff8:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     ffa:	438c                	lw	a1,0(a5)
     ffc:	0791                	addi	a5,a5,4
     ffe:	0711                	addi	a4,a4,4
    1000:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    1004:	fec79be3          	bne	a5,a2,ffa <main+0x86>
    1008:	06b0                	addi	a2,sp,840
    100a:	4fc50513          	addi	a0,a0,1276
    100e:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1010:	4398                	lw	a4,0(a5)
    1012:	0791                	addi	a5,a5,4
    1014:	0611                	addi	a2,a2,4
    1016:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    101a:	fea79be3          	bne	a5,a0,1010 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    101e:	bbbbc4b7          	lui	s1,0xbbbbc
    1022:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	8742                	mv	a4,a6
    1028:	0070                	addi	a2,sp,12
    102a:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    102e:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1032:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    1036:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1038:	3ec5                	jal	c28 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    103a:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    103c:	ccccd4b7          	lui	s1,0xccccd
    1040:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1044:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    1046:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1048:	458d                	li	a1,3
    104a:	874a                	mv	a4,s2
    104c:	34810813          	addi	a6,sp,840
    1050:	1314                	addi	a3,sp,416
    1052:	06500613          	li	a2,101
    1056:	03500513          	li	a0,53
    105a:	3999                	jal	cb0 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    105c:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1060:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    1064:	c004                	sw	s1,0(s0)
    1066:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    1068:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    106c:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    1070:	0070                	addi	a2,sp,12
    1072:	00f506b3          	add	a3,a0,a5
    1076:	963e                	add	a2,a2,a5
    1078:	4210                	lw	a2,0(a2)
    107a:	4294                	lw	a3,0(a3)
    107c:	02d60363          	beq	a2,a3,10a2 <main+0x12e>
            resultkon[0] = 0xBABABABA;
    1080:	babac7b7          	lui	a5,0xbabac
    1084:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1088:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    108a:	42c12083          	lw	ra,1068(sp)
    108e:	42812403          	lw	s0,1064(sp)
    1092:	42412483          	lw	s1,1060(sp)
    1096:	42012903          	lw	s2,1056(sp)
    109a:	4501                	li	a0,0
    109c:	43010113          	addi	sp,sp,1072
    10a0:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    10a2:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    10a4:	0791                	addi	a5,a5,4
    10a6:	fcb795e3          	bne	a5,a1,1070 <main+0xfc>
    10aa:	b7c5                	j	108a <main+0x116>

000010ac <__CTOR_LIST__>:
	...

000010b4 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010bc <.rodata>:
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	ffff                	0xffff
    10c2:	ffff                	0xffff
    10c4:	0000                	unimp
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	ffff                	0xffff
    10d6:	ffff                	0xffff
    10d8:	0000                	unimp
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	0000                	unimp
    10e6:	0000                	unimp
    10e8:	ffff                	0xffff
    10ea:	ffff                	0xffff
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	ffff                	0xffff
    10f2:	ffff                	0xffff
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0000                	unimp
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	ffff                	0xffff
    1112:	ffff                	0xffff
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0000                	unimp
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0000                	unimp
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	ffff                	0xffff
    112e:	ffff                	0xffff
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	ffff                	0xffff
    1136:	ffff                	0xffff
    1138:	0000                	unimp
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	ffff                	0xffff
    1142:	ffff                	0xffff
    1144:	0000                	unimp
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	ffff                	0xffff
    114e:	ffff                	0xffff
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	ffff                	0xffff
    1156:	ffff                	0xffff
    1158:	0000                	unimp
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0000                	unimp
    1166:	0000                	unimp
    1168:	ffff                	0xffff
    116a:	ffff                	0xffff
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	ffff                	0xffff
    1172:	ffff                	0xffff
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0000                	unimp
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0002                	c.slli64	zero
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0002                	c.slli64	zero
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0000                	unimp
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0002                	c.slli64	zero
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0000                	unimp
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0002                	c.slli64	zero
    11c2:	0000                	unimp
    11c4:	0000                	unimp
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0000                	unimp
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0000                	unimp
    11e6:	0000                	unimp
    11e8:	0002                	c.slli64	zero
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0002                	c.slli64	zero
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0000                	unimp
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0002                	c.slli64	zero
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0002                	c.slli64	zero
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0002                	c.slli64	zero
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

0000123c <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    123c:	bebe                	fsd	fa5,376(sp)
    123e:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001240 <_bss_start>:
	...

00001498 <product2>:
	...

000016f0 <result>:
	...

00001948 <ti_2>:
	...

00001ad8 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	00001863          	bnez	zero,10 <__DYNAMIC+0x10>
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	058c                	addi	a1,sp,704
       e:	0000                	unimp
      10:	300c                	fld	fa1,32(s0)
      12:	45000003          	lb	zero,1104(zero) # 450 <polydiv+0x50>
      16:	0006                	c.slli	zero,0x1
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	041c                	addi	a5,sp,512
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	1a08                	addi	a0,sp,304
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0000043b          	0x43b
      3a:	0202                	c.slli64	tp
      3c:	0002c107          	flq	ft2,0(t0) # f5a <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7d04                	flw	fs1,56(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0304                	addi	s1,sp,384
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	ce06                	sw	ra,28(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	0e06                	slli	t3,t3,0x1
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	2206                	fld	ft4,64(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	02fe                	slli	t0,t0,0x1f
    int line[size_b][size_a + size_b];
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0225                	addi	tp,tp,9
      c0:	0000                	unimp
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult2+0x42>
      cc:	0000                	unimp
    int pola[size_a];
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
    int line[size_b][size_a + size_b];
      dc:	fe09a203          	lw	tp,-32(s3)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
    int line[size_b][size_a + size_b];
      e4:	04f8                	addi	a4,sp,588
      e6:	0000                	unimp
    int pola[size_a];
      e8:	5d07a403          	lw	s0,1488(a5)
    int line[size_b][size_a + size_b];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	000c                	0xc
    int pola[size_a];
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    int polb[size_b];
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
    int pola[size_a];
      fc:	0004                	0x4
    int polb[size_b];
      fe:	6b06                	flw	fs6,64(sp)
     100:	0004                	0x4
    int line[size_b][size_a + size_b];
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
    int pola[size_a];
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
    int polb[size_b];
     10a:	040d                	addi	s0,s0,3
            line[i][j] = 0;
     10c:	5f06                	lw	t5,96(sp)
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
            product[j] = 0;
     116:	0000                	unimp
     118:	fe06                	fsw	ft1,60(sp)
     11a:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
    for (i = 0; i < size_b; ++i){
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     124:	dd06                	sw	ra,184(sp)
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
    for (i = 0; i < size_b; ++i){
     12e:	0000                	unimp
     130:	ee0e                	fsw	ft3,28(sp)
    if(star_mult == 1){
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	048c                	addi	a1,sp,576
     140:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
            for (k = size_a-1; k >= 0; k = k-1 ){
     148:	0000                	unimp
            product[j] = 0;
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
            line[i][j] = 0;
     150:	00005d07          	0x5d07
            product[j] = 0;
     154:	0400                	addi	s0,sp,512
     156:	d40c                	sw	a1,40(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     158:	0004                	0x4
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    for (i = 0; i < size_b; ++i){
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	000001d7          	0x1d7
        for(j = 0; j < size_a + size_b -1; ++j){
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
        pola[i] = a[i];
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	000c                	0xc
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
            pola[i] = pola[i] + mod;
     176:	005d1b37          	lui	s6,0x5d1
        while (pola[i] < 0){
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
        pola[i] = pola[i] % mod;
     184:	0190                	addi	a2,sp,192
    for (i = 0; i < size_a; ++i){
     186:	0000                	unimp
     188:	0014                	0x14
        pola[i] = pola[i] % mod;
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
    for (i = 0; i < size_a; ++i){
     18e:	0000                	unimp
            pola[i] = pola[i] + mod;
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
        polb[i] = b[i];
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
            polb[i] = polb[i] + mod;
     19c:	0000                	unimp
        while (polb[i] < 0){
     19e:	0000                	unimp
     1a0:	150e                	slli	a0,a0,0x23
     1a2:	0002                	c.slli64	zero
        polb[i] = polb[i] % mod;
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
    for (i = 0; i < size_b; ++i){
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
        polb[i] = polb[i] % mod;
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <polymult+0xfa>
            polb[i] = polb[i] + mod;
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
    if(star_mult == 1){
     1b6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     1b8:	0000                	unimp
     1ba:	1d0c                	addi	a1,sp,688
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	0122                	slli	sp,sp,0x8
     1ca:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0800                	addi	s0,sp,16
     1d4:	c80c                	sw	a1,16(s0)
     1d6:	0006                	c.slli	zero,0x1
}
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	0398                	addi	a4,sp,448
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	5a0c                	lw	a1,48(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
                line[size_b-1-j][k] = pola[k]*polb[j];
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0605                	addi	a2,a2,1
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     208:	450c                	lw	a1,8(a0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
            for (k = size_a-1; k >= 0; k = k-1 ){
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     216:	068a                	slli	a3,a3,0x2
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
            for (k = size_a-1; k >= 0; k = k-1 ){
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     222:	1100                	addi	s0,sp,160
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     232:	01bd                	addi	gp,gp,15
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     23c:	0000                	unimp
     23e:	000c                	0xc
        for (j = size_b -1; j >= 0; j = j-1){
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
            line[i][j] = line[i][j] % mod;
     248:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     24a:	1280                	addi	s0,sp,352
     24c:	0548                	addi	a0,sp,644
            line[i][j] = line[i][j] % mod;
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
    for (i = 0; i < size_b; ++i){
     25a:	0160                	addi	s0,sp,140
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
        for(j = 0; j < size_a + size_b -1; ++j){
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
            product[j] += line[i][j];
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
        for(i = 0; i < size_b; ++i){
     26e:	0002                	c.slli64	zero
            product[j] += line[i][j];
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f b111 0003      	0x3b111001f
        for(i = 0; i < size_b; ++i){
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
    for(j = 0; j < size_a + size_b -1; ++j){
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
        for(i = 0; i < size_b; ++i){
     286:	8c0c                	0x8c0c
     288:	0004                	0x4
        product[j] = product[j] % mod;
     28a:	0400                	addi	s0,sp,512
    for(j = 0; j < size_a + size_b -1; ++j){
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult2+0x16>
        product[j] = product[j] % mod;
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
     294:	04a4                	addi	s1,sp,584
     296:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     298:	6404                	flw	fs1,8(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     2a0:	d20c                	sw	a1,32(a2)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
    int line[size_b][size_a + size_b];
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0131                	addi	sp,sp,12
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
    int pola[size_a];
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
    int line[size_b][size_a + size_b];
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
    int pola[size_a];
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
     2d8:	4f0e                	lw	t5,192(sp)
    int line[size_b][size_a + size_b];
     2da:	0004                	0x4
    int pola[size_a];
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
    int polb[size_b];
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <polymult+0xc>
    int pola[size_a];
     2e6:	011c                	addi	a5,sp,128
    int polb[size_b];
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
    int line[size_b][size_a + size_b];
     2ec:	0011                	c.nop	4
    int polb[size_b];
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
            product2[j] = 0;
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
    for(i = 0; i < size_a; ++i){
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	760e                	flw	fa2,224(sp)
    for(i = 0; i < size_b; ++i){
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
    if(star_mult == 1){
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
            product2[j] = 0;
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
            line[i][j] = 0;
     32c:	775f 0400 07bd      	0x7bd0400775f
            product2[j] = 0;
     332:	005d                	c.nop	23
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
     338:	0159                	addi	sp,sp,22
     33a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	540c                	lw	a1,40(s0)
     346:	0002                	c.slli64	zero
        pola[i] = a[i];
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x1b8>
     35a:	0002                	c.slli64	zero
    for(i = 0; i < size_a; ++i){
     35c:	1000                	addi	s0,sp,32
        polb[i] = b[i];
     35e:	980c                	0x980c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
    for(i = 0; i < size_b; ++i){
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	050c                	addi	a1,sp,640
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	0c20                	addi	s0,sp,536
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	00000353          	fadd.s	ft6,ft0,ft0,rne
     38a:	cc04                	sw	s1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	f71d                	bnez	a4,2ba <polymult2+0x20>
     38e:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     390:	2400                	fld	fs0,8(s0)
     392:	080c                	addi	a1,sp,16
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
        array_add(product2,line[i],size_a+size_b-1);
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06a4                	addi	s1,sp,840
     3a2:	0000                	unimp
    for(i=0;i<size_b;++i){
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0xf4>
}
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xe6>
     3c6:	72755f0f          	0x72755f0f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0400                	addi	s0,sp,512
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <polymult+0x3a>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0006                	c.slli	zero,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	4000                	lw	s0,0(s0)
     3e0:	6f0c                	flw	fa1,24(a4)
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for (j = size_b -1; j >= 0; j = j-1){
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
        array_add(product2,line[i],size_a+size_b-1);
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x6e>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
    for(i=0;i<size_b;++i){
     3fa:	6f0c                	flw	fa1,24(a4)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
    int v[size_N];
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	0196                	slli	gp,gp,0x5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x36>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	032a                	slli	t1,t1,0xa
     424:	0000                	unimp
    int v[size_N];
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
    int q[size_N];
     42c:	5800                	lw	s0,48(s0)
     42e:	7e0c                	flw	fa1,56(a2)
     430:	0004                	0x4
    int num_temp[size_N];
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
    int denum_temp[size_D];
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	0456                	slli	s0,s0,0x15
    int num_temp[size_N];
     43e:	0000                	unimp
    int denum_temp[size_D];
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
    int denum_temp[size_D];
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44c:	0000                	unimp
    int v[size_N];
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int denum_temp[size_D];
     452:	6715                	lui	a4,0x5
    for (i = 0; i < size_N; ++i){
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0xdc>
     45e:	0005                	c.nop	1
    for (i = 0; i < size_D; ++i) {
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
    for (i = size_D-1; i >= 0; i = i-1){
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     472:	0004dc17          	auipc	s8,0x4d
     476:	2800                	fld	fs0,16(s0)
    for (i = 0; i < size_N; ++i){
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
        if ( (b_N*u)%mod == 1 )
     47c:	bb08                	fsd	fa0,48(a4)
    for (u = 0; u < mod; ++u){
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	0434                	addi	a3,sp,520
     484:	0000                	unimp
        num_temp[i] = num[i];
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     48e:	1800                	addi	s0,sp,48
        while (num_temp[i] < 0) {
     490:	0168                	addi	a0,sp,140
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
        num_temp[i] = num_temp[i] % mod;
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
    for (i = 0; i < size_N; ++i){
     49c:	1804                	addi	s1,sp,48
        num_temp[i] = num_temp[i] % mod;
     49e:	0236                	slli	tp,tp,0xd
     4a0:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4a2:	6c04                	flw	fs1,24(s0)
            num_temp[i] = num_temp[i] + mod;
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
        denum_temp[i] = denum[i];
     4aa:	1808                	addi	a0,sp,48
     4ac:	01e6                	slli	gp,gp,0x19
     4ae:	0000                	unimp
            denum_temp[i] = denum_temp[i] + mod;
     4b0:	6c04                	flw	fs1,24(s0)
        while (denum_temp[i] < 0) {
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
        denum_temp[i] = denum_temp[i] % mod;
     4b8:	180c                	addi	a1,sp,48
     4ba:	049f 0000 6e04      	0x6e040000049f
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
    for (i = 0; i < size_D; ++i) {
     4c4:	0000                	unimp
            denum_temp[i] = denum_temp[i] + mod;
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
        q[i] = 0;
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
     4d6:	000004bb          	0x4bb
        v[i] = 0;
     4da:	7204                	flw	fs1,32(a2)
    for (i = 0; i < size_N; ++i){
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
        if( denum_temp[i] != 0 )
     4e0:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	1830                	addi	a2,sp,56
     4e4:	04a9                	addi	s1,s1,10
        if ( (b_N*u)%mod == 1 )
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4f0:	1834                	addi	a3,sp,56
     4f2:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    for (i = size_N-1; i >= 0; i = i-1){
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
     500:	04b1                	addi	s1,s1,12
     502:	0000                	unimp
    while (d >= d2){
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
    for(i = 0; i < size_N; ++i){
     508:	08cd                	addi	a7,a7,19
        result[i] = q[i];
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	02f6                	slli	t0,t0,0x1d
     510:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
    for(i = size_N; i < (2*size_N); ++i){
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
        result[i] = num_temp[i-size_N];
     51a:	1840                	addi	s0,sp,52
     51c:	0000020b          	0x20b
     520:	7b04                	flw	fs1,48(a4)
    for(i = size_N; i < (2*size_N); ++i){
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
}
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06be                	slli	a3,a3,0xf
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	03ea                	slli	t2,t2,0x1a
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
     546:	023e                	slli	tp,tp,0xf
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
        v[(d-d2)] = u*r_d;
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	018e                	slli	gp,gp,0x3
     556:	0000                	unimp
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        for (i = 0; i < size_N; ++i){
     560:	1854                	addi	a3,sp,52
     562:	042d                	addi	s0,s0,11
     564:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03b1                	addi	t2,t2,12
     572:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
        for (i = 0; i < size_N; ++i){
     57e:	d419                	beqz	s0,48c <polydiv+0x8c>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
        for (i = 0; i < size_N; ++i){
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
    array_add(q,v,size_N);
     58c:	1901                	addi	s2,s2,-32
     58e:	0000063b          	0x63b
     592:	ad04                	fsd	fs1,24(a0)
        for(i = 0; i < size_N; ++i){
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
        for (i = size_N-1; i >= 0; i = i-1){
     59c:	4719                	li	a4,6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	012c                	addi	a1,sp,136
            v[i] = v[i] % mod;
     5ae:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
            v[i] = v[i] % mod;
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        for (i = 0; i < size_N; ++i){
     5bc:	c104                	sw	s1,0(a0)
                product[i] = product[i] + mod;
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
            while (product[i] < 0) {
     5c2:	0801                	addi	a6,a6,0
     5c4:	00000423          	sb	zero,8(zero) # 8 <__DYNAMIC+0x8>
            product[i] = product[i] % mod;
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
            product[i] = product[i] % mod;
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
        for (i = 0; i < size_N; ++i){
     5d4:	009c                	addi	a5,sp,64
            num_temp[i] = num_temp[i] - product[i];
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
            num_temp[i] = num_temp[i] - product[i];
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0x10a>
     5e8:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     5ea:	1500                	addi	s0,sp,672
                num_temp[i] = num_temp[i] + mod;
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
            while (num_temp[i] < 0){
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
            num_temp[i] = num_temp[i] % mod;
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
        for (i = 0; i < size_N; ++i){
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
            num_temp[i] = num_temp[i] % mod;
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     602:	0000061b          	0x61b
        for(i = 0; i < size_N; ++i){
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
            q[i] = q[i] % mod;
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
        for(i = 0; i < size_N; ++i){
     612:	0000                	unimp
            if( num_temp[i] != 0 )
     614:	1500                	addi	s0,sp,672
        for (i = size_N-1; i >= 0; i = i-1){
     616:	005d                	c.nop	23
     618:	0000                	unimp
            v[i] = 0;
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
        for (i = 0; i < size_N; ++i){
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
        result[i] = q[i];
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
    for(i = 0; i < size_N; ++i){
     638:	0006                	c.slli	zero,0x1
        result[i] = q[i];
     63a:	0900                	addi	s0,sp,144
    for(i = 0; i < size_N; ++i){
     63c:	002c                	addi	a1,sp,8
        result[i] = num_temp[i-size_N];
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     650:	0000065b          	0x65b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     654:	690a                	flw	fs2,128(sp)
    int ri_2[size]; // MX-ring poly, a
     656:	0000                	unimp
     658:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     65a:	0500                	addi	s0,sp,640
     65c:	0464                	addi	s1,sp,524
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	0f1a                	slli	t5,t5,0x6
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     676:	8c18                	0x8c18
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
    int ri_1[size]; // f-random poly, f[N] = 0, b
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x14e>
     680:	0006                	c.slli	zero,0x1
    int ri[size];
     682:	0000                	unimp
     684:	9a18                	0x9a18
     686:	0002                	c.slli64	zero
    int ti_1[size]; // ti_1[0] = 1
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
    int ti[size];
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	5e18                	lw	a4,56(a2)
    int qi_1[size];
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
    int temp[size];
     69a:	0006a70b          	0x6a70b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
    int ri_2[size]; // MX-ring poly, a
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
    int temp[size];
     6a6:	1000                	addi	s0,sp,32
    for (i = 0; i < size; ++i) {
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
        ti_2[i] = 0;
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
    for (i = 0; i < size; ++i) {
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
    ti_1[0] = 1;
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	04ed                	addi	s1,s1,27
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
        for (i = 0; i < N + 1; ++i) {
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
        ri_2[i] = polyR[i];
     6ca:	000004e7          	jalr	s1,zero # 0 <__DYNAMIC>
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6d6:	1806                	slli	a6,a6,0x21
        ri_2[i] = polyR[i];
     6d8:	0000003f 12014704 	0x120147040000003f
        ri_1[i] = polyf[i];
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
        ti_2[i] = 0;
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
        ti_1[i] = 0;
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
    for (i = 0; i < size; ++i) {
     6fc:	0000080b          	0x80b
                ri_2[i] = ri_2[i] + mod;
     700:	ee18                	fsw	fa4,24(a2)
     702:	0005                	c.nop	1
            while (ri_2[i] < 0) {
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
            ri_2[i] = ri_2[i] % mod;
     70a:	0000                	unimp
     70c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     70e:	3b18                	fld	fa4,48(a4)
            ri_2[i] = ri_2[i] % mod;
     710:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
     71c:	e918                	fsw	fa4,16(a0)
     71e:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	9518                	0x9518
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     732:	0001a017          	auipc	zero,0x1a
     736:	2400                	fld	fs0,8(s0)
     738:	f618                	fsw	fa4,40(a2)
     73a:	0001                	nop
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
        for (i = 0; i < N + 1; ++i) {
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	8718                	0x8718
     748:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	ab18                	fsd	fa4,16(a4)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
        for (i = 0; i < N + 1; ++i) {
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	9218                	0x9218
        for (i = 0; i < N + 1; ++i) {
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	b018                	fsd	fa4,32(s0)
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
        for (i = 0; i < N + 1; ++i) {
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
        for (i = 0; i < N + 1; ++i) {
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
        for (i = 0; i < N + 1; ++i) {
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	2b18                	fld	fa4,16(a4)
        for (i = 0; i < N + 1; ++i) {
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
        controlR = 0;
     796:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     798:	8000                	0x8000
     79a:	dd18                	sw	a4,56(a0)
     79c:	0002                	c.slli64	zero
    while (controlR != 0) {
     79e:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     7a0:	0292                	slli	t0,t0,0x4
            if (((ri_2[0] * j) % mod) == 1)
     7a2:	2b10                	fld	fa2,16(a4)
        for (j = 0; j < mod; ++j) {
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	6c18                	flw	fa4,24(s0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
        for (i = 0; i < N + 1; ++i) {
     7b2:	0000                	unimp
    }
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	af18                	fsd	fa4,24(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9e18                	0x9e18
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
                ri_1[i] = ri_1[i] + mod;
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
            while (ri_1[i] < 0) {
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
            ri_1[i] = ri_1[i] % mod;
     7ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
            ri_1[i] = ri_1[i] % mod;
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7f4:	0298                	addi	a4,sp,320
            ri[i - (N + 1)] = res[i];
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	3218                	fld	fa4,32(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
            ri[i - (N + 1)] = res[i];
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     806:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	1900                	addi	s0,sp,176
            temp[i] = ri_2[i] - ri[i];
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
        for (i = 0; i < N + 1; ++i) {
     81e:	0000                	unimp
     820:	0000082b          	0x82b
                temp[i] = temp[i] + mod;
     824:	690a                	flw	fs2,128(sp)
            while (temp[i] < 0) {
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
            temp[i] = temp[i] % mod;
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     830:	0000083b          	0x83b
            temp[i] = temp[i] % mod;
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     838:	1700                	addi	s0,sp,928
            qi_1[i] = res1[i];
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     846:	0389                	addi	t2,t2,2
            qi_1[i] = res1[i];
     848:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     84a:	a104                	fsd	fs1,0(a0)
                qi_1[i] = qi_1[i] + mod;
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
            while (qi_1[i] < 0) {
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	0374                	addi	a3,sp,396
            qi_1[i] = qi_1[i] % mod;
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
        for (i = 0; i < N + 1; ++i) {
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
            qi_1[i] = qi_1[i] % mod;
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
        for (i = 0; i < N + 1; ++i) {
     862:	0009                	c.nop	2
            temp[i] = res2[i];
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0xd0>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     870:	001d                	c.nop	7
            temp[i] = res2[i];
     872:	6909                	lui	s2,0x2
        for (i = 0; i < N + 1; ++i) {
     874:	0000                	unimp
                temp[i] = temp[i] + mod;
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
            while (temp[i] < 0) {
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
            temp[i] = temp[i] % mod;
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
        for (i = 0; i < N + 1; ++i) {
     888:	000008a7          	0x8a7
            temp[i] = temp[i] % mod;
     88c:	dc1d                	beqz	s0,7ca <ext_euclid+0x17a>
     88e:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     890:	0400                	addi	s0,sp,512
            ti[i] = ti_2[i] - temp[i];
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	0675                	addi	a2,a2,29
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     8a8:	05c1                	addi	a1,a1,16
            ti[i] = ti_2[i] - temp[i];
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8b0:	690a                	flw	fs2,128(sp)
                ti[i] = ti[i] + mod;
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
            while (ti[i] < 0) {
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
            ti[i] = ti[i] % mod;
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            ri_2[i] = ri_1[i];
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     8d4:	8a04                	0x8a04
            ri_2[i] = ri_1[i];
     8d6:	0001                	nop
            ri_1[i] = ri[i];
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
            ti_2[i] = ti_1[i];
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
            ri_1[i] = ri[i];
     8e8:	0000                	unimp
            ti_2[i] = ti_1[i];
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
            controlR += ri[i];
     8f2:	0006                	c.slli	zero,0x1
            ti_2[i] = ti_1[i];
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
            ti_1[i] = ti[i];
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
              qi_1[i] = 0;
     900:	8020                	0x8020
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
        for (i = 0; i < N + 1; ++i) {
     90a:	0004                	0x4
            if (((ri_2[0] * j) % mod) == 1)
     90c:	2000                	fld	fs0,0(s0)
     90e:	0579                	addi	a0,a0,30
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
     91a:	b921                	j	532 <polydiv+0x132>
        for (j = 0; j < mod; ++j) {
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
            ti_2[i] = (ti_2[i] * j) % mod;
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
        for (i = 0; i < N + 1; ++i) {
     924:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     932:	0000                	unimp
int* generate_keys(int N, int p, int q){
     934:	0095                	addi	ra,ra,5
     936:	7822                	flw	fa6,40(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	1240                	addi	s0,sp,292
     946:	0000                	unimp
     948:	3f22                	fld	ft10,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1498                	addi	a4,sp,608
     958:	0000                	unimp
     95a:	f722                	fsw	fs0,172(sp)
     95c:	0002                	c.slli64	zero
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	16f0                	addi	a2,sp,876
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	15220063          	beq	tp,s2,aba <generate_keys+0x186>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     988:	0305                	addi	t1,t1,1
     98a:	1948                	addi	a0,sp,180
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ad803          	lhu	a6,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	2c24                	fld	fs1,88(s0)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	123c                	addi	a5,sp,296
     9d6:	0000                	unimp
     9d8:	c325                	beqz	a4,a38 <generate_keys+0x104>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	5d050277          	0x5d050277
     9e2:	0000                	unimp
     9e4:	7400                	flw	fs0,40(s0)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
    int polyR[N+1];
     9f4:	03d5                	addi	t2,t2,21
     9f6:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f8:	7801                	lui	a6,0xfffe0
    int polyR[N+1];
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xde>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
    polyR[N] = 1;
     a08:	0100                	addi	s0,sp,128
     a0a:	0279                	addi	tp,tp,30
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0314                	addi	a3,sp,384
     a18:	0000                	unimp
     a1a:	7a01                	lui	s4,0xfffe0
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x100>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	5d09027b          	0x5d09027b
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	027c                	addi	a5,sp,268
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	027d                	addi	tp,tp,31
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9028                	0x9028
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	027f                	0x27f
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x40>
     a5a:	05262677          	0x5262677
     a5e:	0000                	unimp
     a60:	8001                	c.srli64	s0
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
     a72:	0281                	addi	t0,t0,0
     a74:	8b09                	andi	a4,a4,2
    polyR[0] = -1;
     a76:	b100000b          	0xb100000b
    for(i = 1; i < N; ++i){
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
    for (i = N; i < 55; ++i ){
     a82:	8201                	c.srli64	a2
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
    for(i = 0; i < N; ++i){
     a8a:	5126                	lw	sp,104(sp)
        random_keys[i] = f[i];
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	af090283          	lb	t0,-1296(s2) # 1af0 <random_keys+0x18>
    for(i = 0; i < N; ++i){
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
    for(i = N; i < (2*N); ++i){
     a9c:	0246                	slli	tp,tp,0x11
     a9e:	0000                	unimp
     aa0:	8401                	c.srai64	s0
     aa2:	0902                	c.slli64	s2
        random_keys[i] = g[i-N];
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	f426                	fsw	fs1,40(sp)
     aaa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for(i = N; i < (2*N); ++i){
     aae:	0285                	addi	t0,t0,1
    for(i = (2*N); i < (3*N); ++i){
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x7e>
     ab2:	6500000b          	0x6500000b
    fp = ext_euclid(polyR, f, (N+1), p);
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	8601                	c.srai64	a2
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
    for(i = (2*N); i < (3*N); ++i){
     ac2:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000f9c2b          	0xf9c2b
    for(i = (2*N); i < (3*N); ++i){
     acc:	5000                	lw	s0,32(s0)
     ace:	0018                	0x18
    fq = ext_euclid(polyR, f, (N+1), q);
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
    for(i = (3*N); i < (4*N); ++i){
     adc:	012c                	addi	a1,sp,136
     ade:	7c03055b          	0x7c03055b
     ae2:	0011                	c.nop	4
        random_keys[i] = fq[i-(3*N)];
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
    for(i = (3*N); i < (4*N); ++i){
     aec:	000fba2b          	0xfba2b
    fg = polymult2(fq, N, g, N, 0);
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
    for(i = 0; i < (2*N-1); ++i){
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x8a>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x1b2>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	103a                	c.slli	zero,0x2e
     b0e:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
    for(i = (4*N); i < (5*N); ++i){
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
    for(i = (5*N); i < (6*N+1); ++i){
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x110>
     b2a:	5e012c77          	0x5e012c77
        random_keys[i] = polyR[i-(5*N)];
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x199>
     b32:	2d00                	fld	fs0,24(a0)
    for(i = (5*N); i < (6*N+1); ++i){
     b34:	105c                	addi	a5,sp,36
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
}
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x16>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
        polyR[i] = 0;
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
    for(i = 1; i < N; ++i){
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
        f[i] = 0;
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
        g[i] = 0;
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
    for (i = N; i < 55; ++i ){
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
        random_keys[i] = f[i];
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    for(i = 0; i < N; ++i){
     bba:	0000                	unimp
        random_keys[i] = f[i];
     bbc:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     bbe:	3408                	fld	fa0,40(s0)
        random_keys[i] = g[i-N];
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
    for(i = N; i < (2*N); ++i){
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
        random_keys[i] = fp[i-(2*N)];
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
    for(i = (2*N); i < (3*N); ++i){
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c5                	addi	gp,gp,17
     be8:	0000                	unimp
     bea:	4b01                	li	s6,0
     bec:	0602                	c.slli64	a2
    for(i = (3*N); i < (4*N); ++i){
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2d0>
     bf2:	0cb0                	addi	a2,sp,600
        fg[i] = fg[i]*p;
     bf4:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bf6:	00c8                	addi	a0,sp,68
     bf8:	0000                	unimp
        fg[i] = fg[i]*p;
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
    for(i = 0; i < (2*N-1); ++i){
     c02:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	5d17024b          	0x5d17024b
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
    for(i = (4*N); i < (5*N); ++i){
     c10:	0070                	addi	a2,sp,12
     c12:	4b01                	li	s6,0
        random_keys[i] = polyR[i-(5*N)];
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c22:	5d25024b          	0x5d25024b
     c26:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
     c30:	0000                	unimp
     c32:	4b01                	li	s6,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x24>
     c3a:	0000028b          	0x28b
     c3e:	5131                	li	sp,-20
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c44:	6340024b          	fnmsub.d	ft4,ft0,fs4,fa2,rne
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	3100                	fld	fs0,32(a0)
    temp = polymult(public_key,N,random_val,48,q,0);
     c50:	03d5                	addi	t2,t2,21
     c52:	0000                	unimp
     c54:	4b01                	li	s6,0
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x46>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	7d31                	lui	s10,0xfffec
array_add(temp,message,48);
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	6366024b          	fnmsub.d	ft4,fa2,fs6,fa2,rne
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0f00000b          	0xf00000b
array_add(temp,message,48);
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x1dc>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c72:	02b1                	addi	t0,t0,12
     c74:	0000                	unimp
     c76:	4d01                	li	s10,0
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x68>
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     c82:	024e                	slli	tp,tp,0x13
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult2+0x6>
}
     c8e:	3261                	jal	616 <polydiv+0x216>
     c90:	0100                	addi	s0,sp,128
     c92:	630a024f          	fnmadd.d	ft4,fs4,fa6,fa2,rne
     c96:	5900000b          	0x5900000b
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult2+0x6>
        CT[i-(2*N)] = CT[i];
     c9e:	50010063          	beqz	sp,119e <__DTOR_END__+0xe2>
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0xa>
    for(i = (2*N); i < (3*N); ++i){
     ca8:	0382                	c.slli64	t2
        CT[i-(2*N)] = CT[i];
     caa:	0000                	unimp
     cac:	632a                	flw	ft6,136(sp)
    for(i = (2*N); i < (3*N); ++i){
     cae:	0032                	c.slli	zero,0xc
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb0:	5101                	li	sp,-32
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x1a>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	0100                	addi	s0,sp,128
     cc0:	0252                	slli	tp,tp,0x14
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x16>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ccc:	0ce6                	slli	s9,s9,0x19
     cce:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd0:	1504                	addi	s1,sp,672
     cd2:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce0:	5b01                	li	s6,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	000cf62b          	0xcf62b
     cfc:	2f00                	fld	fs0,24(a4)
     cfe:	1e000013          	li	zero,480
        if(a2[i] <= q/2)
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
    for (i = 0; i < N; ++i){
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
    c = polymult2(secret_key_fp,N,a2,N,0);
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000d1a2b          	0xd1a2b
     d22:	0400                	addi	s0,sp,512
     d24:	0015                	c.nop	5
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
}
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x140>
        a2[i-(2*N)] = a2[i];
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0d26                	slli	s10,s10,0x9
     d46:	0000                	unimp
     d48:	0000132f          	0x132f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	012c                	addi	a1,sp,136
        a2[i-(2*N)] = a2[i];
     d4e:	0079025b          	0x79025b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	012c                	addi	a1,sp,136
        if(a2[i] <= q/2)
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
            a2[i] = (-1)*(q-a2[i]);
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
    for (i = 0; i < N; ++i){
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     d66:	0006152f          	0x6152f
     d6a:	0100                	addi	s0,sp,128
     d6c:	0229                	addi	tp,tp,10
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6e:	6306                	flw	ft6,64(sp)
     d70:	2800000b          	0x2800000b
        c2[i-(2*N)] = c2[i];
     d74:	000c                	0xc
    for(i = (2*N); i < ((2*N)+N); ++i){
     d76:	8800                	0x8800
  jal x0, default_exc_handler
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
  mv  x1, x0
     d7c:	bc9c                	fsd	fa5,56(s1)
     d7e:	000e                	c.slli	zero,0x3
  mv  x2, x1
     d80:	3000                	fld	fs0,32(s0)
  mv  x3, x1
     d82:	004e                	c.slli	zero,0x13
  mv  x4, x1
     d84:	2901                	jal	1194 <__DTOR_END__+0xd8>
  mv  x5, x1
     d86:	1702                	slli	a4,a4,0x20
  mv  x6, x1
     d88:	005d                	c.nop	23
  mv  x7, x1
     d8a:	0000                	unimp
  mv  x8, x1
     d8c:	0438                	addi	a4,sp,520
  mv  x9, x1
     d8e:	0000                	unimp
  mv x10, x1
     d90:	7130                	flw	fa2,96(a0)
  mv x11, x1
     d92:	0100                	addi	s0,sp,128
  mv x12, x1
     d94:	0229                	addi	tp,tp,10
  mv x13, x1
     d96:	5d1e                	lw	s10,228(sp)
  mv x14, x1
     d98:	0000                	unimp
  mv x15, x1
     d9a:	6400                	flw	fs0,8(s0)
  mv x16, x1
     d9c:	0004                	0x4
  mv x17, x1
     d9e:	3100                	fld	fs0,32(a0)
  mv x18, x1
     da0:	0390                	addi	a2,sp,448
  mv x19, x1
     da2:	0000                	unimp
  mv x20, x1
     da4:	2901                	jal	11b4 <__DTOR_END__+0xf8>
  mv x21, x1
     da6:	2602                	fld	fa2,0(sp)
  mv x22, x1
     da8:	00000b63          	beqz	zero,dbe <reset_handler+0x42>
  mv x24, x1
     dac:	0000049b          	0x49b
  mv x26, x1
     db0:	2631                	jal	10bc <__DTOR_END__>
  mv x27, x1
     db2:	0005                	c.nop	1
  mv x28, x1
     db4:	0100                	addi	s0,sp,128
  mv x29, x1
     db6:	0229                	addi	tp,tp,10
  mv x30, x1
     db8:	6334                	flw	fa3,64(a4)
  mv x31, x1
     dba:	d200000b          	0xd200000b
  la   x2, _stack_start
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	067d                	addi	a2,a2,31
  la x26, _bss_start
     dc4:	0000                	unimp
     dc6:	2901                	jal	11d6 <__DTOR_END__+0x11a>
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <zero_loop+0x8>
  la x27, _bss_end
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	a129                	j	11dc <__DTOR_END__+0x120>
  bge x26, x27, zero_loop_end
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
  sw x0, 0(x26)
     dd8:	630a022b          	0x630a022b
  addi x26, x26, 4
     ddc:	3200000b          	0x3200000b
  ble x26, x27, zero_loop
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
  addi x10, x0, 0
     de4:	022c                	addi	a1,sp,264
  addi x11, x0, 0
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
  jal x1, main
     dec:	285a                	fld	fa6,400(sp)
     dee:	0369                	addi	t1,t1,26
     df0:	0000                	unimp
     df2:	2e01                	jal	1102 <__DTOR_END__+0x46>
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2026                	fld	ft0,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	630a022f          	0x630a022f
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	3001                	jal	612 <polydiv+0x212>
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000c502b          	0xc502b
     e22:	5000                	lw	s0,32(s0)
     e24:	0018                	0x18
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	10bc                	addi	a5,sp,104
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c62                	slli	s8,s8,0x18
     e44:	0000                	unimp
     e46:	00001657          	0x1657
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8) # 4d484 <_stack_start+0x3d484>
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 722b      	0x722b0030015f
     e74:	000c                	0xc
     e76:	9000                	0x9000
     e78:	93000017          	auipc	zero,0x93000
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0c82                	c.slli64	s9
     e96:	0000                	unimp
     e98:	0000132f          	0x132f
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
     ebc:	00030b2f          	0x30b2f
     ec0:	0100                	addi	s0,sp,128
     ec2:	01d1                	addi	gp,gp,20
     ec4:	6306                	flw	ft6,64(sp)
     ec6:	3400000b          	0x3400000b
     eca:	0009                	c.nop	2
     ecc:	f400                	fsw	fs0,40(s0)
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	d101                	beqz	a0,dda <zero_loop+0x2>
     edc:	1801                	addi	a6,a6,-32
     ede:	005d                	c.nop	23
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
     ee4:	0000                	unimp
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
     eea:	01d1                	addi	gp,gp,20
     eec:	5d1f 0000 e500      	0xe50000005d1f
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	d101                	beqz	a0,df8 <memcpy+0xa>
     efa:	2601                	jal	11fa <__DTOR_END__+0x13e>
     efc:	005d                	c.nop	23
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	6c0901d3          	0x6c0901d3
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	d4010067          	jr	-704(sp)
     f18:	0901                	addi	s2,s2,0
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
     f26:	d601                	beqz	a2,e2e <memcpy+0x40>
     f28:	0a01                	addi	s4,s4,0
     f2a:	00000b63          	beqz	zero,f40 <memset+0x74>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	d701                	beqz	a4,e3e <memcpy+0x50>
     f38:	0a01                	addi	s4,s4,0
     f3a:	00000b63          	beqz	zero,f50 <memset+0x84>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	d8010067          	jr	-640(sp)
     f48:	0a01                	addi	s4,s4,0
     f4a:	00000b63          	beqz	zero,f60 <memset+0x94>
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
     f54:	d901006b          	0xd901006b
     f58:	0a01                	addi	s4,s4,0
     f5a:	00000b63          	beqz	zero,f70 <memset+0xa4>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
     f62:	7d26                	flw	fs10,104(sp)
     f64:	0006                	c.slli	zero,0x1
     f66:	0100                	addi	s0,sp,128
     f68:	01da                	slli	gp,gp,0x16
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
     f70:	0006                	c.slli	zero,0x1
     f72:	2a00                	fld	fs0,16(a2)
int main(){
     f74:	0069                	c.nop	26
     f76:	db01                	beqz	a4,e86 <memcpy+0x98>
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f78:	0901                	addi	s2,s2,0
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	a126                	fsd	fs1,128(sp)
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
int main(){
     f88:	01dc                	addi	a5,sp,196
     f8a:	630a                	flw	ft6,128(sp)
     f8c:	5f00000b          	0x5f00000b
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
     f94:	0069                	c.nop	26
    resultkon[0] = 0xaaaaaaa0;
     f96:	0000                	unimp
     f98:	00000877          	0x877
     f9c:	00097a2b          	0x97a2b
     fa0:	5b00                	lw	s0,48(a4)
     fa2:	0018                	0x18
     fa4:	bc00                	fsd	fs0,56(s0)
     fa6:	2c00000f          	0x2c00000f
    keys = generate_keys(N, p, q);
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
     fb0:	012c                	addi	a1,sp,136
    resultkon[0] = 0xaaaaaaa0;
     fb2:	2c30015b          	0x2c30015b
    resultkon[0] = 0xaaaaaaa1;
     fb6:	5c01                	li	s8,-32
    keys = generate_keys(N, p, q);
     fb8:	0802                	c.slli64	a6
    resultkon[0] = 0xaaaaaaa1;
     fba:	00d0                	addi	a2,sp,68
     fbc:	0009fa2b          	0x9fa2b
    for(i = 0; i < N; ++i){
     fc0:	5b00                	lw	s0,48(a4)
        secret_key_f[i] = keys[i];
     fc2:	0018                	0x18
     fc4:	dc00                	sw	s0,56(s0)
     fc6:	2c00000f          	0x2c00000f
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
    for(i = 0; i < N; ++i){
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
    for(i = N; i < (2*N); ++i){
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
     fdc:	000ac22b          	0xac22b
        secret_key_fp[i-(2*N)] = keys[i];
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
    for(i = (2*N); i < (3*N); ++i){
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
    for(i = (3*N); i < (4*N); ++i){
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
        public_key[i-(4*N)] = keys[i];
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	2b000087          	0x2b000087
    for(i = (4*N); i < (5*N); ++i){
    1004:	0adc                	addi	a5,sp,340
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    100c:	102a                	c.slli	zero,0x2a
    100e:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    for(i = (5*N); i < (6*N+1); ++i){
    101c:	2c7c                	fld	fa5,216(s0)
    resultkon[0] = 0xbbbbbbb0;
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    102a:	000afc2b          	0xafc2b
    resultkon[0] = 0xbbbbbbb1;
    102e:	0400                	addi	s0,sp,512
    1030:	0015                	c.nop	5
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1032:	4f00                	lw	s0,24(a4)
    1034:	0010                	0x10
    resultkon[0] = 0xbbbbbbb0;
    1036:	2c00                	fld	fs0,24(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1038:	5b01                	li	s6,-32
    resultkon[0] = 0xbbbbbbb1;
    103a:	8202                	jr	tp
    resultkon[0] = 0xccccccc0;
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1044:	5d01                	li	s10,-32
    resultkon[0] = 0xccccccc0;
    1046:	8202                	jr	tp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    104c:	3001                	jal	84c <ext_euclid+0x1fc>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	0b10                	addi	a2,sp,400
    1052:	0000                	unimp
    1054:	0000132f          	0x132f
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
    resultkon[0] = 0xccccccc1;	
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
            resultkon[0] = 0xDEDEDEDE;
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    resultkon[0] = 0xccccccc1;	
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
            resultkon[0] = 0xDEDEDEDE;
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    for(i = 0; i < 32; ++i){
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
}
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	0348                	addi	a0,sp,388
    1092:	0000                	unimp
    1094:	3c01                	jal	aa4 <generate_keys+0x170>
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <__CTOR_LIST__+0x2>
    109c:	0650                	addi	a2,sp,772
    109e:	0000                	unimp
    10a0:	02e4                	addi	s1,sp,332
            resultkon[0] = 0xDEDEDEDE;
    10a2:	0000                	unimp
    for(i = 0; i < 32; ++i){
    10a4:	9c01                	0x9c01
    10a6:	12aa                	slli	t0,t0,0x2a
    10a8:	0000                	unimp
    10aa:	7d31                	lui	s10,0xfffec
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	013c                	addi	a5,sp,136
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0188                	addi	a0,sp,192
    10be:	0000                	unimp
    10c0:	3c01                	jal	ad0 <generate_keys+0x19c>
    10c2:	2201                	jal	11c2 <__DTOR_END__+0x106>
    10c4:	00000b63          	beqz	zero,10da <__DTOR_END__+0x1e>
    10c8:	000008f7          	0x8f7
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	013c                	addi	a5,sp,136
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	3100                	fld	fs0,32(a0)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	3c01                	jal	af2 <generate_keys+0x1be>
    10e4:	3701                	jal	fe4 <main+0x70>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0975                	addi	s2,s2,29
    10ec:	0000                	unimp
    10ee:	8a26                	mv	s4,s1
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	013e                	slli	sp,sp,0xf
    10f6:	630a                	flw	ft6,128(sp)
    10f8:	ac00000b          	0xac00000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	3f01                	jal	1012 <main+0x9e>
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	09c4                	addi	s1,sp,212
    110c:	0000                	unimp
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	5d0c013f f2000000 	0xf20000005d0c013f
    111a:	0009                	c.nop	2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	3f01                	jal	1030 <main+0xbc>
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	00000c6b          	0xc6b
    112c:	f326                	fsw	fs1,164(sp)
    112e:	0004                	0x4
    1130:	0100                	addi	s0,sp,128
    1132:	0140                	addi	s0,sp,132
    1134:	aa09                	j	1246 <_bss_start+0x6>
    1136:	0012                	c.slli	zero,0x4
    1138:	8900                	0x8900
    113a:	000c                	0xc
    113c:	2600                	fld	fs0,8(a2)
    113e:	00000567          	jalr	a0,zero # 0 <__DYNAMIC>
    1142:	4101                	li	sp,0
    1144:	0901                	addi	s2,s2,0
    1146:	12bd                	addi	t0,t0,-17
    1148:	0000                	unimp
    114a:	0ca9                	addi	s9,s9,10
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	4201                	li	tp,0
    1154:	0901                	addi	s2,s2,0
    1156:	12d0                	addi	a2,sp,356
    1158:	0000                	unimp
    115a:	0cc9                	addi	s9,s9,18
    115c:	0000                	unimp
    115e:	1026                	c.slli	zero,0x29
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	0144                	addi	s1,sp,132
    1166:	e309                	bnez	a4,1168 <__DTOR_END__+0xac>
    1168:	0012                	c.slli	zero,0x4
    116a:	0000                	unimp
    116c:	000d                	c.nop	3
    116e:	2a00                	fld	fs0,16(a2)
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	0145                	addi	sp,sp,17
    1176:	f609                	bnez	a2,1080 <main+0x10c>
    1178:	0012                	c.slli	zero,0x4
    117a:	5000                	lw	s0,32(s0)
    117c:	000d                	c.nop	3
    117e:	2600                	fld	fs0,8(a2)
    1180:	0428                	addi	a0,sp,520
    1182:	0000                	unimp
    1184:	4601                	li	a2,0
    1186:	0901                	addi	s2,s2,0
    1188:	1309                	addi	t1,t1,-30
    118a:	0000                	unimp
    118c:	0d89                	addi	s11,s11,2
    118e:	0000                	unimp
    1190:	2026                	fld	ft0,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	1c090147          	0x1c090147
    119a:	d9000013          	li	zero,-624
    119e:	000d                	c.nop	3
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	48010073          	0x48010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <__DTOR_END__+0x104>
    11ae:	0e1e                	slli	t3,t3,0x7
    11b0:	0000                	unimp
    11b2:	4f26                	lw	t5,72(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	0149                	addi	sp,sp,18
    11ba:	630a                	flw	ft6,128(sp)
    11bc:	3c00000b          	0x3c00000b
    11c0:	000e                	c.slli	zero,0x3
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	0154                	addi	a3,sp,132
    11c6:	0000                	unimp
    11c8:	4a01                	li	s4,0
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <__DTOR_END__+0x126>
    11d0:	0e5a                	slli	t3,t3,0x16
    11d2:	0000                	unimp
    11d4:	e126                	fsw	fs1,128(sp)
    11d6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    11da:	5d09014b          	0x5d09014b
    11de:	0000                	unimp
    11e0:	7800                	flw	fs0,48(s0)
    11e2:	000e                	c.slli	zero,0x3
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	0eb9                	addi	t4,t4,14
    11ec:	0000                	unimp
    11ee:	00006933          	or	s2,zero,zero
    11f2:	e700                	fsw	fs0,8(a4)
    11f4:	000e                	c.slli	zero,0x3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	0f15                	addi	t5,t5,5
    11fe:	0000                	unimp
    1200:	00006933          	or	s2,zero,zero
    1204:	4300                	lw	s0,0(a4)
    1206:	3300000f          	0x3300000f
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	0f71                	addi	t5,t5,28
    1210:	0000                	unimp
    1212:	00006933          	or	s2,zero,zero
    1216:	9f00                	0x9f00
    1218:	3300000f          	0x3300000f
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0fcd                	addi	t6,t6,19
    1222:	0000                	unimp
    1224:	0007322b          	0x7322b
    1228:	2f00                	fld	fs0,24(a4)
    122a:	50000013          	li	zero,1280
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8a02                	jr	s4
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	8202                	jr	tp
    123c:	2c00                	fld	fs0,24(s0)
    123e:	5c01                	li	s8,-32
    1240:	8b02                	jr	s6
    1242:	2c00                	fld	fs0,24(s0)
    1244:	5d01                	li	s10,-32
    1246:	8202                	jr	tp
    1248:	2c00                	fld	fs0,24(s0)
    124a:	5e01                	li	t3,-32
    124c:	7902                	flw	fs2,32(sp)
    124e:	0000                	unimp
    1250:	00075c2b          	0x75c2b
    1254:	2f00                	fld	fs0,24(a4)
    1256:	7c000013          	li	zero,1984
    125a:	0012                	c.slli	zero,0x4
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5a01                	li	s4,-32
    1260:	7202                	flw	ft4,32(sp)
    1262:	2c00                	fld	fs0,24(s0)
    1264:	5b01                	li	s6,-32
    1266:	8202                	jr	tp
    1268:	2c00                	fld	fs0,24(s0)
    126a:	5c01                	li	s8,-32
    126c:	8b02                	jr	s6
    126e:	2c00                	fld	fs0,24(s0)
    1270:	5d01                	li	s10,-32
    1272:	8202                	jr	tp
    1274:	2c00                	fld	fs0,24(s0)
    1276:	5e01                	li	t3,-32
    1278:	7902                	flw	fs2,32(sp)
    127a:	0000                	unimp
    127c:	782d                	lui	a6,0xfffeb
    127e:	57000007          	0x57000007
    1282:	0016                	c.slli	zero,0x5
    1284:	2c00                	fld	fs0,24(s0)
    1286:	5a01                	li	s4,-32
    1288:	8502                	jr	a0
    128a:	2c00                	fld	fs0,24(s0)
    128c:	5b01                	li	s6,-32
    128e:	8202                	jr	tp
    1290:	2c00                	fld	fs0,24(s0)
    1292:	5c01                	li	s8,-32
    1294:	8402                	jr	s0
    1296:	2c00                	fld	fs0,24(s0)
    1298:	5d01                	li	s10,-32
    129a:	8202                	jr	tp
    129c:	2c00                	fld	fs0,24(s0)
    129e:	5e01                	li	t3,-32
    12a0:	7902                	flw	fs2,32(sp)
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5f01                	li	t5,-32
    12a6:	3001                	jal	aa6 <generate_keys+0x172>
    12a8:	0000                	unimp
    12aa:	5d09                	li	s10,-30
    12ac:	0000                	unimp
    12ae:	bd00                	fsd	fs0,56(a0)
    12b0:	0012                	c.slli	zero,0x4
    12b2:	3400                	fld	fs0,40(s0)
    12b4:	0069                	c.nop	26
    12b6:	0000                	unimp
    12b8:	11e5                	addi	gp,gp,-7
    12ba:	0000                	unimp
    12bc:	0900                	addi	s0,sp,144
    12be:	005d                	c.nop	23
    12c0:	0000                	unimp
    12c2:	12d0                	addi	a2,sp,356
    12c4:	0000                	unimp
    12c6:	6934                	flw	fa3,80(a0)
    12c8:	0000                	unimp
    12ca:	ee00                	fsw	fs0,24(a2)
    12cc:	0011                	c.nop	4
    12ce:	0000                	unimp
    12d0:	5d09                	li	s10,-30
    12d2:	0000                	unimp
    12d4:	e300                	fsw	fs0,0(a4)
    12d6:	0012                	c.slli	zero,0x4
    12d8:	3400                	fld	fs0,40(s0)
    12da:	0069                	c.nop	26
    12dc:	0000                	unimp
    12de:	000011f7          	0x11f7
    12e2:	0900                	addi	s0,sp,144
    12e4:	005d                	c.nop	23
    12e6:	0000                	unimp
    12e8:	12f6                	slli	t0,t0,0x3d
    12ea:	0000                	unimp
    12ec:	6934                	flw	fa3,80(a0)
    12ee:	0000                	unimp
    12f0:	0000                	unimp
    12f2:	0012                	c.slli	zero,0x4
    12f4:	0000                	unimp
    12f6:	5d09                	li	s10,-30
    12f8:	0000                	unimp
    12fa:	0900                	addi	s0,sp,144
    12fc:	34000013          	li	zero,832
    1300:	0069                	c.nop	26
    1302:	0000                	unimp
    1304:	1209                	addi	tp,tp,-30
    1306:	0000                	unimp
    1308:	0900                	addi	s0,sp,144
    130a:	005d                	c.nop	23
    130c:	0000                	unimp
    130e:	131c                	addi	a5,sp,416
    1310:	0000                	unimp
    1312:	6934                	flw	fa3,80(a0)
    1314:	0000                	unimp
    1316:	1200                	addi	s0,sp,288
    1318:	0012                	c.slli	zero,0x4
    131a:	0000                	unimp
    131c:	5d09                	li	s10,-30
    131e:	0000                	unimp
    1320:	2f00                	fld	fs0,24(a4)
    1322:	34000013          	li	zero,832
    1326:	0069                	c.nop	26
    1328:	0000                	unimp
    132a:	0000121b          	0x121b
    132e:	3500                	fld	fs0,40(a0)
    1330:	0180                	addi	s0,sp,192
    1332:	0000                	unimp
    1334:	b301                	j	1034 <main+0xc0>
    1336:	6306                	flw	ft6,64(sp)
    1338:	0000000b          	0xb
    133c:	0004                	0x4
    133e:	5000                	lw	s0,32(s0)
    1340:	0002                	c.slli64	zero
    1342:	0100                	addi	s0,sp,128
    1344:	b89c                	fsd	fa5,48(s1)
    1346:	0014                	0x14
    1348:	3600                	fld	fs0,40(a2)
    134a:	756e                	flw	fa0,248(sp)
    134c:	006d                	c.nop	27
    134e:	b301                	j	104e <main+0xda>
    1350:	000b6313          	ori	t1,s6,0
    1354:	fb00                	fsw	fs0,48(a4)
    1356:	3700000f          	0x3700000f
    135a:	0106                	slli	sp,sp,0x1
    135c:	0000                	unimp
    135e:	b301                	j	105e <main+0xea>
    1360:	5d1c                	lw	a5,56(a0)
    1362:	0000                	unimp
    1364:	1c00                	addi	s0,sp,560
    1366:	0010                	0x10
    1368:	3700                	fld	fs0,40(a4)
    136a:	0635                	addi	a2,a2,13
    136c:	0000                	unimp
    136e:	b301                	j	106e <main+0xfa>
    1370:	6328                	flw	fa0,64(a4)
    1372:	6d00000b          	0x6d00000b
    1376:	0010                	0x10
    1378:	3700                	fld	fs0,40(a4)
    137a:	00000683          	lb	a3,0(zero) # 0 <__DYNAMIC>
    137e:	b301                	j	107e <main+0x10a>
    1380:	00005d33          	srl	s10,zero,zero
    1384:	a700                	fsd	fs0,8(a4)
    1386:	0010                	0x10
    1388:	3600                	fld	fs0,40(a2)
    138a:	6f6d                	lui	t5,0x1b
    138c:	0064                	addi	s1,sp,12
    138e:	b301                	j	108e <main+0x11a>
    1390:	00005d3f 0010de00 	0x10de0000005d3f
    1398:	3800                	fld	fs0,48(s0)
    139a:	0075                	c.nop	29
    139c:	b501                	j	119c <__DTOR_END__+0xe0>
    139e:	5d09                	li	s10,-30
    13a0:	0000                	unimp
    13a2:	1500                	addi	s0,sp,672
    13a4:	0011                	c.nop	4
    13a6:	3800                	fld	fs0,48(s0)
    13a8:	0064                	addi	s1,sp,12
    13aa:	b501                	j	11aa <__DTOR_END__+0xee>
    13ac:	00005d0b          	0x5d0b
    13b0:	3e00                	fld	fs0,56(a2)
    13b2:	0011                	c.nop	4
    13b4:	3900                	fld	fs0,48(a0)
    13b6:	3264                	fld	fs1,224(a2)
    13b8:	0100                	addi	s0,sp,128
    13ba:	0db5                	addi	s11,s11,13
    13bc:	005d                	c.nop	23
    13be:	0000                	unimp
    13c0:	6938                	flw	fa4,80(a0)
    13c2:	0100                	addi	s0,sp,128
    13c4:	10b5                	addi	ra,ra,-19
    13c6:	005d                	c.nop	23
    13c8:	0000                	unimp
    13ca:	115c                	addi	a5,sp,164
    13cc:	0000                	unimp
    13ce:	6239                	lui	tp,0xe
    13d0:	4e5f 0100 12b5      	0x12b501004e5f
    13d6:	005d                	c.nop	23
    13d8:	0000                	unimp
    13da:	7238                	flw	fa4,96(a2)
    13dc:	645f 0100 16b5      	0x16b50100645f
    13e2:	005d                	c.nop	23
    13e4:	0000                	unimp
    13e6:	135c                	addi	a5,sp,420
    13e8:	0000                	unimp
    13ea:	7a3a                	flw	fs4,172(sp)
    13ec:	0002                	c.slli64	zero
    13ee:	0100                	addi	s0,sp,128
    13f0:	0ab6                	slli	s5,s5,0xd
    13f2:	00000b63          	beqz	zero,1408 <_bss_start+0x1c8>
    13f6:	137a                	slli	t1,t1,0x3e
    13f8:	0000                	unimp
    13fa:	7638                	flw	fa4,104(a2)
    13fc:	0100                	addi	s0,sp,128
    13fe:	09b8                	addi	a4,sp,216
    1400:	14b8                	addi	a4,sp,616
    1402:	0000                	unimp
    1404:	1392                	slli	t2,t2,0x24
    1406:	0000                	unimp
    1408:	7138                	flw	fa4,96(a0)
    140a:	0100                	addi	s0,sp,128
    140c:	09b9                	addi	s3,s3,14
    140e:	000014cb          	fnmsub.s	fs1,ft0,ft0,ft0,rtz
    1412:	13b2                	slli	t2,t2,0x2c
    1414:	0000                	unimp
    1416:	783a                	flw	fa6,172(sp)
    1418:	0001                	nop
    141a:	0100                	addi	s0,sp,128
    141c:	0aba                	slli	s5,s5,0xe
    141e:	00000b63          	beqz	zero,1434 <_bss_start+0x1f4>
    1422:	13d2                	slli	t2,t2,0x34
    1424:	0000                	unimp
    1426:	1c3a                	slli	s8,s8,0x2e
    1428:	0002                	c.slli64	zero
    142a:	0100                	addi	s0,sp,128
    142c:	14de09bb          	0x14de09bb
    1430:	0000                	unimp
    1432:	13f0                	addi	a2,sp,492
    1434:	0000                	unimp
    1436:	1a3a                	slli	s4,s4,0x2e
    1438:	0002                	c.slli64	zero
    143a:	0100                	addi	s0,sp,128
    143c:	09bc                	addi	a5,sp,216
    143e:	14f1                	addi	s1,s1,-4
    1440:	0000                	unimp
    1442:	1426                	slli	s0,s0,0x29
    1444:	0000                	unimp
    1446:	00006933          	or	s2,zero,zero
    144a:	5200                	lw	s0,32(a2)
    144c:	0014                	0x14
    144e:	3300                	fld	fs0,32(a4)
    1450:	0069                	c.nop	26
    1452:	0000                	unimp
    1454:	1480                	addi	s0,sp,608
    1456:	0000                	unimp
    1458:	00006933          	or	s2,zero,zero
    145c:	ae00                	fsd	fs0,24(a2)
    145e:	0014                	0x14
    1460:	3300                	fld	fs0,32(a4)
    1462:	0069                	c.nop	26
    1464:	0000                	unimp
    1466:	14dc                	addi	a5,sp,612
    1468:	0000                	unimp
    146a:	0005742b          	0x5742b
    146e:	5700                	lw	s0,40(a4)
    1470:	0016                	c.slli	zero,0x5
    1472:	9b00                	0x9b00
    1474:	0014                	0x14
    1476:	2c00                	fld	fs0,24(s0)
    1478:	5a01                	li	s4,-32
    147a:	7202                	flw	ft4,32(sp)
    147c:	2c00                	fld	fs0,24(s0)
    147e:	5b01                	li	s6,-32
    1480:	8302                	jr	t1
    1482:	2c00                	fld	fs0,24(s0)
    1484:	5c01                	li	s8,-32
    1486:	8502                	jr	a0
    1488:	2c00                	fld	fs0,24(s0)
    148a:	5d01                	li	s10,-32
    148c:	8302                	jr	t1
    148e:	2c00                	fld	fs0,24(s0)
    1490:	5e01                	li	t3,-32
    1492:	8202                	jr	tp
    1494:	2c00                	fld	fs0,24(s0)
    1496:	5f01                	li	t5,-32
    1498:	3001                	jal	c98 <ntru_encyrpt+0x70>
    149a:	2d00                	fld	fs0,24(a0)
    149c:	0594                	addi	a3,sp,704
    149e:	0000                	unimp
    14a0:	1790                	addi	a2,sp,992
    14a2:	0000                	unimp
    14a4:	012c                	addi	a1,sp,136
    14a6:	025a                	slli	tp,tp,0x16
    14a8:	012c0087          	0x12c0087
    14ac:	0085025b          	0x85025b
    14b0:	012c                	addi	a1,sp,136
    14b2:	025c                	addi	a5,sp,260
    14b4:	0079                	c.nop	30
    14b6:	0000                	unimp
    14b8:	5d09                	li	s10,-30
    14ba:	0000                	unimp
    14bc:	cb00                	sw	s0,16(a4)
    14be:	0014                	0x14
    14c0:	3400                	fld	fs0,40(s0)
    14c2:	0069                	c.nop	26
    14c4:	0000                	unimp
    14c6:	1446                	slli	s0,s0,0x31
    14c8:	0000                	unimp
    14ca:	0900                	addi	s0,sp,144
    14cc:	005d                	c.nop	23
    14ce:	0000                	unimp
    14d0:	14de                	slli	s1,s1,0x37
    14d2:	0000                	unimp
    14d4:	6934                	flw	fa3,80(a0)
    14d6:	0000                	unimp
    14d8:	4f00                	lw	s0,24(a4)
    14da:	0014                	0x14
    14dc:	0000                	unimp
    14de:	5d09                	li	s10,-30
    14e0:	0000                	unimp
    14e2:	f100                	fsw	fs0,32(a0)
    14e4:	0014                	0x14
    14e6:	3400                	fld	fs0,40(s0)
    14e8:	0069                	c.nop	26
    14ea:	0000                	unimp
    14ec:	1458                	addi	a4,sp,548
    14ee:	0000                	unimp
    14f0:	0900                	addi	s0,sp,144
    14f2:	005d                	c.nop	23
    14f4:	0000                	unimp
    14f6:	1504                	addi	s1,sp,672
    14f8:	0000                	unimp
    14fa:	6934                	flw	fa3,80(a0)
    14fc:	0000                	unimp
    14fe:	6100                	flw	fs0,0(a0)
    1500:	0014                	0x14
    1502:	0000                	unimp
    1504:	2a35                	jal	1640 <product2+0x1a8>
    1506:	0000                	unimp
    1508:	0100                	addi	s0,sp,128
    150a:	067c                	addi	a5,sp,780
    150c:	00000b63          	beqz	zero,1522 <product2+0x8a>
    1510:	029a                	slli	t0,t0,0x6
    1512:	0000                	unimp
    1514:	0166                	slli	sp,sp,0x19
    1516:	0000                	unimp
    1518:	9c01                	0x9c01
    151a:	1615                	addi	a2,a2,-27
    151c:	0000                	unimp
    151e:	6136                	flw	ft2,76(sp)
    1520:	0100                	addi	s0,sp,128
    1522:	157c                	addi	a5,sp,684
    1524:	00000b63          	beqz	zero,153a <product2+0xa2>
    1528:	1531                	addi	a0,a0,-20
    152a:	0000                	unimp
    152c:	0006d237          	lui	tp,0x6d
    1530:	0100                	addi	s0,sp,128
    1532:	1c7c                	addi	a5,sp,572
    1534:	005d                	c.nop	23
    1536:	0000                	unimp
    1538:	0000156b          	0x156b
    153c:	6236                	flw	ft4,76(sp)
    153e:	0100                	addi	s0,sp,128
    1540:	297c                	fld	fa5,208(a0)
    1542:	00000b63          	beqz	zero,1558 <product2+0xc0>
    1546:	15bc                	addi	a5,sp,744
    1548:	0000                	unimp
    154a:	0006d937          	lui	s2,0x6d
    154e:	0100                	addi	s0,sp,128
    1550:	307c                	fld	fa5,224(s0)
    1552:	005d                	c.nop	23
    1554:	0000                	unimp
    1556:	15f6                	slli	a1,a1,0x3d
    1558:	0000                	unimp
    155a:	0004e337          	lui	t1,0x4e
    155e:	0100                	addi	s0,sp,128
    1560:	3c7c                	fld	fa5,248(s0)
    1562:	005d                	c.nop	23
    1564:	0000                	unimp
    1566:	162d                	addi	a2,a2,-21
    1568:	0000                	unimp
    156a:	fb3a                	fsw	fa4,180(sp)
    156c:	0005                	c.nop	1
    156e:	0100                	addi	s0,sp,128
    1570:	097e                	slli	s2,s2,0x1f
    1572:	1615                	addi	a2,a2,-27
    1574:	0000                	unimp
    1576:	00001667          	0x1667
    157a:	6938                	flw	fa4,80(a0)
    157c:	0100                	addi	s0,sp,128
    157e:	097f                	0x97f
    1580:	005d                	c.nop	23
    1582:	0000                	unimp
    1584:	000016ab          	0x16ab
    1588:	6a38                	flw	fa4,80(a2)
    158a:	0100                	addi	s0,sp,128
    158c:	0b7f                	0xb7f
    158e:	005d                	c.nop	23
    1590:	0000                	unimp
    1592:	00001747          	fmsub.s	fa4,ft0,ft0,ft0,rtz
    1596:	6b38                	flw	fa4,80(a4)
    1598:	0100                	addi	s0,sp,128
    159a:	0d7f                	0xd7f
    159c:	005d                	c.nop	23
    159e:	0000                	unimp
    15a0:	0000177b          	0x177b
    15a4:	6a3a                	flw	fs4,140(sp)
    15a6:	0002                	c.slli64	zero
    15a8:	0100                	addi	s0,sp,128
    15aa:	0a80                	addi	s0,sp,336
    15ac:	00000b63          	beqz	zero,15c2 <product2+0x12a>
    15b0:	17c9                	addi	a5,a5,-14
    15b2:	0000                	unimp
    15b4:	0c3a                	slli	s8,s8,0xe
    15b6:	0000                	unimp
    15b8:	0100                	addi	s0,sp,128
    15ba:	0981                	addi	s3,s3,0
    15bc:	1631                	addi	a2,a2,-20
    15be:	0000                	unimp
    15c0:	17e1                	addi	a5,a5,-8
    15c2:	0000                	unimp
    15c4:	643a                	flw	fs0,140(sp)
    15c6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ca:	0982                	c.slli64	s3
    15cc:	1644                	addi	s1,sp,804
    15ce:	0000                	unimp
    15d0:	1801                	addi	a6,a6,-32
    15d2:	0000                	unimp
    15d4:	00006933          	or	s2,zero,zero
    15d8:	2100                	fld	fs0,0(a0)
    15da:	0018                	0x18
    15dc:	3300                	fld	fs0,32(a4)
    15de:	0069                	c.nop	26
    15e0:	0000                	unimp
    15e2:	1876                	slli	a6,a6,0x3d
    15e4:	0000                	unimp
    15e6:	00006933          	or	s2,zero,zero
    15ea:	a800                	fsd	fs0,16(s0)
    15ec:	0018                	0x18
    15ee:	3300                	fld	fs0,32(a4)
    15f0:	0069                	c.nop	26
    15f2:	0000                	unimp
    15f4:	18e6                	slli	a7,a7,0x39
    15f6:	0000                	unimp
    15f8:	fa2d                	bnez	a2,156a <product2+0xd2>
    15fa:	90000003          	lb	zero,-1792(zero) # fffff900 <_stack_start+0xfffef900>
    15fe:	2c000017          	auipc	zero,0x2c000
    1602:	5a01                	li	s4,-32
    1604:	8602                	jr	a2
    1606:	2c00                	fld	fs0,24(s0)
    1608:	5b01                	li	s6,-32
    160a:	8402                	jr	s0
    160c:	2c00                	fld	fs0,24(s0)
    160e:	5c01                	li	s8,-32
    1610:	8302                	jr	t1
    1612:	0000                	unimp
    1614:	0900                	addi	s0,sp,144
    1616:	005d                	c.nop	23
    1618:	0000                	unimp
    161a:	1631                	addi	a2,a2,-20
    161c:	0000                	unimp
    161e:	6934                	flw	fa3,80(a0)
    1620:	0000                	unimp
    1622:	d400                	sw	s0,40(s0)
    1624:	0015                	c.nop	5
    1626:	3400                	fld	fs0,40(s0)
    1628:	0069                	c.nop	26
    162a:	0000                	unimp
    162c:	15dd                	addi	a1,a1,-9
    162e:	0000                	unimp
    1630:	0900                	addi	s0,sp,144
    1632:	005d                	c.nop	23
    1634:	0000                	unimp
    1636:	1644                	addi	s1,sp,804
    1638:	0000                	unimp
    163a:	6934                	flw	fa3,80(a0)
    163c:	0000                	unimp
    163e:	e600                	fsw	fs0,8(a2)
    1640:	0015                	c.nop	5
    1642:	0000                	unimp
    1644:	5d09                	li	s10,-30
    1646:	0000                	unimp
    1648:	5700                	lw	s0,40(a4)
    164a:	0016                	c.slli	zero,0x5
    164c:	3400                	fld	fs0,40(s0)
    164e:	0069                	c.nop	26
    1650:	0000                	unimp
    1652:	000015ef          	jal	a1,2652 <_min_stack+0x652>
    1656:	3500                	fld	fs0,40(a0)
    1658:	010d                	addi	sp,sp,3
    165a:	0000                	unimp
    165c:	2f01                	jal	1d6c <random_keys+0x294>
    165e:	6306                	flw	ft6,64(sp)
    1660:	b400000b          	0xb400000b
    1664:	0000                	unimp
    1666:	e600                	fsw	fs0,8(a2)
    1668:	0001                	nop
    166a:	0100                	addi	s0,sp,128
    166c:	4f9c                	lw	a5,24(a5)
    166e:	36000017          	auipc	zero,0x36000
    1672:	0061                	c.nop	24
    1674:	2f01                	jal	1d84 <random_keys+0x2ac>
    1676:	6314                	flw	fa3,0(a4)
    1678:	3b00000b          	0x3b00000b
    167c:	0019                	c.nop	6
    167e:	3700                	fld	fs0,40(a4)
    1680:	06d2                	slli	a3,a3,0x14
    1682:	0000                	unimp
    1684:	2f01                	jal	1d94 <random_keys+0x2bc>
    1686:	00005d1b          	0x5d1b
    168a:	7500                	flw	fs0,40(a0)
    168c:	0019                	c.nop	6
    168e:	3600                	fld	fs0,40(a2)
    1690:	0062                	c.slli	zero,0x18
    1692:	2f01                	jal	1da2 <random_keys+0x2ca>
    1694:	6328                	flw	fa0,64(a4)
    1696:	bb00000b          	0xbb00000b
    169a:	0019                	c.nop	6
    169c:	3700                	fld	fs0,40(a4)
    169e:	06d9                	addi	a3,a3,22
    16a0:	0000                	unimp
    16a2:	2f01                	jal	1db2 <random_keys+0x2da>
    16a4:	00005d2f          	0x5d2f
    16a8:	f500                	fsw	fs0,40(a0)
    16aa:	0019                	c.nop	6
    16ac:	3b00                	fld	fs0,48(a4)
    16ae:	6f6d                	lui	t5,0x1b
    16b0:	0064                	addi	s1,sp,12
    16b2:	2f01                	jal	1dc2 <random_keys+0x2ea>
    16b4:	00005d3b          	0x5d3b
    16b8:	0100                	addi	s0,sp,128
    16ba:	375e                	fld	fa4,496(sp)
    16bc:	000004e3          	beqz	zero,1ec4 <random_keys+0x3ec>
    16c0:	2f01                	jal	1dd0 <random_keys+0x2f8>
    16c2:	5d44                	lw	s1,60(a0)
    16c4:	0000                	unimp
    16c6:	2f00                	fld	fs0,24(a4)
    16c8:	001a                	c.slli	zero,0x6
    16ca:	2200                	fld	fs0,0(a2)
    16cc:	000005fb          	0x5fb
    16d0:	3201                	jal	fd0 <main+0x5c>
    16d2:	4f09                	li	t5,2
    16d4:	02000017          	auipc	zero,0x2000
    16d8:	008c                	addi	a1,sp,64
    16da:	6938                	flw	fa4,80(a0)
    16dc:	0100                	addi	s0,sp,128
    16de:	005d0933          	add	s2,s10,t0
    16e2:	0000                	unimp
    16e4:	1a8d                	addi	s5,s5,-29
    16e6:	0000                	unimp
    16e8:	6a38                	flw	fa4,80(a2)
    16ea:	0100                	addi	s0,sp,128
    16ec:	005d0b33          	add	s6,s10,t0
    16f0:	0000                	unimp
    16f2:	1b4c                	addi	a1,sp,436
    16f4:	0000                	unimp
    16f6:	6b38                	flw	fa4,80(a4)
    16f8:	0100                	addi	s0,sp,128
    16fa:	005d0d33          	add	s10,s10,t0
    16fe:	0000                	unimp
    1700:	00001be7          	0x1be7
    1704:	5a3a                	lw	s4,172(sp)
    1706:	0002                	c.slli64	zero
    1708:	0100                	addi	s0,sp,128
    170a:	0a34                	addi	a3,sp,280
    170c:	00000b63          	beqz	zero,1722 <result+0x32>
    1710:	1c35                	addi	s8,s8,-19
    1712:	0000                	unimp
    1714:	0c22                	slli	s8,s8,0x8
    1716:	0000                	unimp
    1718:	0100                	addi	s0,sp,128
    171a:	0935                	addi	s2,s2,13
    171c:	176a                	slli	a4,a4,0x3a
    171e:	0000                	unimp
    1720:	7502                	flw	fa0,32(sp)
    1722:	3a00                	fld	fs0,48(a2)
    1724:	0364                	addi	s1,sp,396
    1726:	0000                	unimp
    1728:	3601                	jal	1228 <__DTOR_END__+0x16c>
    172a:	7d09                	lui	s10,0xfffe2
    172c:	4d000017          	auipc	zero,0x4d000
    1730:	001c                	0x1c
    1732:	3300                	fld	fs0,32(a4)
    1734:	0069                	c.nop	26
    1736:	0000                	unimp
    1738:	1c84                	addi	s1,sp,624
    173a:	0000                	unimp
    173c:	00006933          	or	s2,zero,zero
    1740:	e900                	fsw	fs0,16(a0)
    1742:	001c                	0x1c
    1744:	3300                	fld	fs0,32(a4)
    1746:	0069                	c.nop	26
    1748:	0000                	unimp
    174a:	00001d17          	auipc	s10,0x1
    174e:	0900                	addi	s0,sp,144
    1750:	005d                	c.nop	23
    1752:	0000                	unimp
    1754:	176a                	slli	a4,a4,0x3a
    1756:	0000                	unimp
    1758:	6934                	flw	fa3,80(a0)
    175a:	0000                	unimp
    175c:	3300                	fld	fs0,32(a4)
    175e:	2e000017          	auipc	zero,0x2e000
    1762:	0069                	c.nop	26
    1764:	0000                	unimp
    1766:	8d02                	jr	s10
    1768:	0000                	unimp
    176a:	5d09                	li	s10,-30
    176c:	0000                	unimp
    176e:	7d00                	flw	fs0,56(a0)
    1770:	34000017          	auipc	zero,0x34000
    1774:	0069                	c.nop	26
    1776:	0000                	unimp
    1778:	173c                	addi	a5,sp,936
    177a:	0000                	unimp
    177c:	0900                	addi	s0,sp,144
    177e:	005d                	c.nop	23
    1780:	0000                	unimp
    1782:	1790                	addi	a2,sp,992
    1784:	0000                	unimp
    1786:	6934                	flw	fa3,80(a0)
    1788:	0000                	unimp
    178a:	4500                	lw	s0,8(a0)
    178c:	00000017          	auipc	zero,0x0
    1790:	313c                	fld	fa5,96(a0)
    1792:	0005                	c.nop	1
    1794:	0100                	addi	s0,sp,128
    1796:	00920623          	sb	s1,12(tp) # 6d00c <_stack_start+0x5d00c>
    179a:	0000                	unimp
    179c:	0022                	c.slli	zero,0x8
    179e:	0000                	unimp
    17a0:	9c01                	0x9c01
    17a2:	1802                	slli	a6,a6,0x20
    17a4:	0000                	unimp
    17a6:	0031613b          	0x31613b
    17aa:	2301                	jal	1caa <random_keys+0x1d2>
    17ac:	6315                	lui	t1,0x5
    17ae:	0100000b          	0x100000b
    17b2:	3b5a                	fld	fs6,432(sp)
    17b4:	3261                	jal	113c <__DTOR_END__+0x80>
    17b6:	0100                	addi	s0,sp,128
    17b8:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    17bc:	0000                	unimp
    17be:	5b01                	li	s6,-32
    17c0:	00051637          	lui	a2,0x51
    17c4:	0100                	addi	s0,sp,128
    17c6:	005d2623          	sw	t0,12(s10) # 2756 <_min_stack+0x756>
    17ca:	0000                	unimp
    17cc:	1d7c                	addi	a5,sp,700
    17ce:	0000                	unimp
    17d0:	6938                	flw	fa4,80(a0)
    17d2:	0100                	addi	s0,sp,128
    17d4:	0524                	addi	s1,sp,648
    17d6:	005d                	c.nop	23
    17d8:	0000                	unimp
    17da:	1d9d                	addi	s11,s11,-25
    17dc:	0000                	unimp
    17de:	023d                	addi	tp,tp,15
    17e0:	0018                	0x18
    17e2:	a600                	fsd	fs0,8(a2)
    17e4:	0000                	unimp
    17e6:	0a00                	addi	s0,sp,272
    17e8:	0000                	unimp
    17ea:	0100                	addi	s0,sp,128
    17ec:	0926                	slli	s2,s2,0x9
    17ee:	1a3e                	slli	s4,s4,0x2f
    17f0:	0018                	0x18
    17f2:	bc00                	fsd	fs0,56(s0)
    17f4:	001d                	c.nop	7
    17f6:	3e00                	fld	fs0,56(a2)
    17f8:	0000180f          	0x180f
    17fc:	1ddf 0000 0000      	0x1ddf
    1802:	00003a3f 060f0100 	0x60f010000003a3f
    180a:	2601                	jal	1b0a <random_keys+0x32>
    180c:	0018                	0x18
    180e:	4000                	lw	s0,0(s0)
    1810:	3161                	jal	1498 <product2>
    1812:	0100                	addi	s0,sp,128
    1814:	18261e0f          	0x18261e0f
    1818:	0000                	unimp
    181a:	6140                	flw	fs0,4(a0)
    181c:	0032                	c.slli	zero,0xc
    181e:	0f01                	addi	t5,t5,0
    1820:	2630                	fld	fa2,72(a2)
    1822:	0018                	0x18
    1824:	0000                	unimp
    1826:	0410                	addi	a2,sp,512
    1828:	0069                	c.nop	26
    182a:	0000                	unimp
    182c:	0241                	addi	tp,tp,16
    182e:	0018                	0x18
    1830:	8c00                	0x8c00
    1832:	0000                	unimp
    1834:	0600                	addi	s0,sp,768
    1836:	0000                	unimp
    1838:	0100                	addi	s0,sp,128
    183a:	509c                	lw	a5,32(s1)
    183c:	0018                	0x18
    183e:	3e00                	fld	fs0,56(a2)
    1840:	0000180f          	0x180f
    1844:	1e02                	slli	t3,t3,0x20
    1846:	0000                	unimp
    1848:	1a42                	slli	s4,s4,0x30
    184a:	0018                	0x18
    184c:	0100                	addi	s0,sp,128
    184e:	2343005b          	0x2343005b
    1852:	19000003          	lb	zero,400(zero) # 190 <polymult+0xdc>
    1856:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    185a:	4300                	lw	s0,0(a4)
    185c:	006e                	c.slli	zero,0x1b
    185e:	0000                	unimp
    1860:	0064                	addi	s1,sp,12
    1862:	0000                	unimp
    1864:	1e000007          	0x1e000007
    1868:	0000                	unimp
    186a:	0200                	addi	s0,sp,256
    186c:	f200                	fsw	fs0,32(a2)
    186e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1872:	4001                	c.li	zero,0
    1874:	0029                	c.nop	10
    1876:	1800                	addi	s0,sp,48
    1878:	0000                	unimp
    187a:	e000                	fsw	fs0,0(s0)
    187c:	0006                	c.slli	zero,0x1
    187e:	4500                	lw	s0,8(a0)
    1880:	0006                	c.slli	zero,0x1
    1882:	e700                	fsw	fs0,8(a4)
    1884:	0006                	c.slli	zero,0x1
    1886:	0100                	addi	s0,sp,128
    1888:	80              	Address 0x0000000000001888 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x202>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # fffe00b3 <_stack_start+0xfffd00b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
    int pola[size_a];
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
  dc:	0013010b          	0x13010b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
  e4:	0b3a0e03          	lb	t3,179(s4)
    int pola[size_a];
  e8:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
    int pola[size_a];
  f2:	27001513          	0x27001513
    int polb[size_b];
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
    int pola[size_a];
  fc:	13491927          	0x13491927
    int polb[size_b];
 100:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
    int pola[size_a];
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
            line[i][j] = 0;
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 112:	03011317          	auipc	t1,0x3011
            product[j] = 0;
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
 11a:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
    for (i = 0; i < size_a; ++i){
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
    for (i = 0; i < size_b; ++i){
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    if(star_mult == 1){
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
        for (j = size_b -1; j >= 0; j = j-1){
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
            for (k = size_a-1; k >= 0; k = k-1 ){
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            product[j] = 0;
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
            line[i][j] = 0;
 152:	1301                	addi	t1,t1,-32
            product[j] = 0;
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
        for(j = 0; j < size_a + size_b -1; ++j){
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    for (i = 0; i < size_b; ++i){
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
        for(j = 0; j < size_a + size_b -1; ++j){
 16a:	0b3a                	slli	s6,s6,0xe
        pola[i] = a[i];
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
            pola[i] = pola[i] + mod;
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
        while (pola[i] < 0){
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
        pola[i] = pola[i] % mod;
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
    for (i = 0; i < size_a; ++i){
 188:	193c                	addi	a5,sp,184
        pola[i] = pola[i] % mod;
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
            pola[i] = pola[i] + mod;
 192:	20000013          	li	zero,512
        polb[i] = b[i];
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
            polb[i] = polb[i] + mod;
 19c:	0b39053b          	0xb39053b
        while (polb[i] < 0){
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    for (i = 0; i < size_b; ++i){
 1aa:	0300                	addi	s0,sp,384
        polb[i] = polb[i] % mod;
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
            polb[i] = polb[i] + mod;
 1b2:	3f13490b          	0x3f13490b
    if(star_mult == 1){
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
        for (j = size_b -1; j >= 0; j = j-1){
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	0034                	addi	a3,sp,8
    for (i = 0; i < size_b; ++i){
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x82>
 1d0:	00052f13          	slti	t5,a0,0
    for(j = 0; j < size_a + size_b -1; ++j){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
}
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <polymult+0x46>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
            for (k = size_a-1; k >= 0; k = k-1 ){
 208:	3a0e                	fld	fs4,224(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 212:	27000017          	auipc	zero,0x27000
        for (j = size_b -1; j >= 0; j = j-1){
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 220:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 23e:	0b39053b          	0xb39053b
        for (j = size_b -1; j >= 0; j = j-1){
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
            line[i][j] = line[i][j] % mod;
 248:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
            line[i][j] = line[i][j] % mod;
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
        for(j = 0; j < size_a + size_b -1; ++j){
 258:	8289                	srli	a3,a3,0x2
    for (i = 0; i < size_b; ++i){
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
            product[j] += line[i][j];
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
        for(i = 0; i < size_b; ++i){
 26e:	0000                	unimp
            product[j] += line[i][j];
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
        for(i = 0; i < size_b; ++i){
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
    for(j = 0; j < size_a + size_b -1; ++j){
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
        for(i = 0; i < size_b; ++i){
 288:	0319                	addi	t1,t1,6
        product[j] = product[j] % mod;
 28a:	3a0e                	fld	fs4,224(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 28c:	39053b0b          	0x39053b0b
        product[j] = product[j] % mod;
 290:	4919270b          	0x4919270b
 294:	12011113          	0x12011113
    for(j = 0; j < size_a + size_b -1; ++j){
 298:	4006                	0x4006
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2a8:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 2ac:	0213490b          	0x213490b
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
    int pola[size_a];
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
    int pola[size_a];
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 2da:	1934                	addi	a3,sp,184
    int pola[size_a];
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
    int polb[size_b];
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
    int line[size_b][size_a + size_b];
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for (i = 0; i < size_b; ++i){
 2f4:	0b39                	addi	s6,s6,14
            product2[j] = 0;
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
    for (i = 0; i < size_b; ++i){
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
    for(i = 0; i < size_a; ++i){
 304:	36000013          	li	zero,864
    for(i = 0; i < size_b; ++i){
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
    if(star_mult == 1){
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
 31c:	3a0e                	fld	fs4,224(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 31e:	390b3b0b          	0x390b3b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 322:	0213490b          	0x213490b
            product2[j] = 0;
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
            line[i][j] = 0;
 32c:	0b3a0803          	lb	a6,179(s4)
            product2[j] = 0;
 330:	0b390b3b          	0xb390b3b
        for(j = 0; j < size_a + size_b -1; ++j){
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
    for (i = 0; i < size_b; ++i){
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 344:	0013490b          	0x13490b
        pola[i] = a[i];
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
    for(i = 0; i < size_a; ++i){
 356:	1702                	slli	a4,a4,0x20
        pola[i] = a[i];
 358:	0000                	unimp
 35a:	0300053b          	0x300053b
        polb[i] = b[i];
 35e:	3a08                	fld	fa0,48(a2)
 360:	390b3b0b          	0x390b3b0b
 364:	0213490b          	0x213490b
 368:	0018                	0x18
 36a:	3c00                	fld	fs0,56(s0)
    for(i = 0; i < size_b; ++i){
 36c:	012e                	slli	sp,sp,0xb
        polb[i] = b[i];
 36e:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
                line[size_b-1-j][k] = pola[k]*polb[j];
 376:	0b39                	addi	s6,s6,14
 378:	01111927          	0x1111927
 37c:	0612                	slli	a2,a2,0x4
 37e:	1840                	addi	s0,sp,52
 380:	01194297          	auipc	t0,0x1194
            for (k = size_a-1; k >= 0; k = k-1 ){
 384:	3d000013          	li	zero,976
                line[size_b-1-j][k] = pola[k]*polb[j];
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
        for (j = size_b -1; j >= 0; j = j-1){
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
 398:	053e                	slli	a0,a0,0xf
            for (k = size_a-1; k >= 0; k = k-1 ){
 39a:	3100                	fld	fs0,32(a0)
        array_add(product2,line[i],size_a+size_b-1);
 39c:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
 3a0:	3f00                	fld	fs0,56(a4)
 3a2:	012e                	slli	sp,sp,0xb
    for(i=0;i<size_b;++i){
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
}
 3ac:	0b39                	addi	s6,s6,14
 3ae:	0b201927          	0xb201927
 3b2:	1301                	addi	t1,t1,-32
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	0013490b          	0x13490b
 3c4:	4100                	lw	s0,0(a0)
 3c6:	012e                	slli	sp,sp,0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c8:	1331                	addi	t1,t1,-20
 3ca:	0111                	addi	sp,sp,4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3cc:	0612                	slli	a2,a2,0x4
 3ce:	1840                	addi	s0,sp,52
 3d0:	01194297          	auipc	t0,0x1194
 3d4:	42000013          	li	zero,1056
 3d8:	0005                	c.nop	1
 3da:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 3dc:	1802                	slli	a6,a6,0x20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3de:	0000                	unimp
 3e0:	3f002e43          	fmadd.q	ft8,ft0,fa6,ft7,rdn
 3e4:	3c19                	jal	fffffdfa <_stack_start+0xfffefdfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e6:	6e19                	lui	t3,0x6
 3e8:	030e                	slli	t1,t1,0x3
        for (j = size_b -1; j >= 0; j = j-1){
 3ea:	3a0e                	fld	fs4,224(sp)
 3ec:	000b3b0b          	0xb3b0b
 3f0:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
 3f2:	1101                	addi	sp,sp,-32
 3f4:	1000                	addi	s0,sp,32
 3f6:	5506                	lw	a0,96(sp)
 3f8:	0306                	slli	t1,t1,0x1
    for(i=0;i<size_b;++i){
 3fa:	1b0e                	slli	s6,s6,0x23
 3fc:	250e                	fld	fa0,192(sp)
 3fe:	130e                	slli	t1,t1,0x23
    int v[size_N];
 400:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	1046                	c.slli	zero,0x31
       2:	0000                	unimp
       4:	105a                	c.slli	zero,0x36
       6:	0000                	unimp
       8:	0001                	nop
       a:	5a5a                	lw	s4,180(sp)
       c:	0010                	0x10
       e:	5b00                	lw	s0,48(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	105c                	addi	a5,sp,36
      20:	0000                	unimp
      22:	109c                	addi	a5,sp,96
      24:	0000                	unimp
      26:	0001                	nop
      28:	a25a                	fsd	fs6,256(sp)
      2a:	0010                	0x10
      2c:	ac00                	fsd	fs0,24(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0fba                	slli	t6,t6,0xe
      3e:	0000                	unimp
      40:	100e                	c.slli	zero,0x23
      42:	0000                	unimp
      44:	0001                	nop
      46:	0e5a                	slli	t3,t3,0x16
      48:	0010                	0x10
      4a:	3600                	fld	fs0,40(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	9c00                	0x9c00
      5e:	f000000f          	0xf000000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0ff0                	addi	a2,sp,988
      6c:	0000                	unimp
      6e:	0ffa                	slli	t6,t6,0x1e
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0ffa                	slli	t6,t6,0x1e
      78:	0000                	unimp
      7a:	1039                	c.nop	-18
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1039                	c.nop	-18
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	10a0                	addi	s0,sp,104
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	a079                	j	11c <polymult+0x68>
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	a200                	fsd	fs0,0(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	10a2                	slli	ra,ra,0x28
      9e:	0000                	unimp
}
      a0:	10ac                	addi	a1,sp,104
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	9c00                	0x9c00
      b2:	ca00000f          	0xca00000f
    int line[size_b][size_a + size_b];
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fca                	slli	t6,t6,0x12
      c0:	0000                	unimp
      c2:	0fcc                	addi	a1,sp,980
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c8:	007d                	c.nop	31
      ca:	0fcc                	addi	a1,sp,980
      cc:	0000                	unimp
    int pola[size_a];
      ce:	1052                	c.slli	zero,0x34
      d0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	527a                	lw	tp,188(sp)
      d8:	0010                	0x10
      da:	5b00                	lw	s0,48(a4)
    int line[size_b][size_a + size_b];
      dc:	0010                	0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	5b00                	lw	s0,48(a4)
    int line[size_b][size_a + size_b];
      e4:	0010                	0x10
      e6:	a000                	fsd	fs0,0(s0)
    int pola[size_a];
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	10a0                	addi	s0,sp,104
    int pola[size_a];
      f2:	0000                	unimp
      f4:	10a2                	slli	ra,ra,0x28
    int polb[size_b];
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
    int pola[size_a];
      fc:	a27a                	fsd	ft10,256(sp)
    int polb[size_b];
      fe:	0010                	0x10
     100:	ac00                	fsd	fs0,24(s0)
    int line[size_b][size_a + size_b];
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
    int pola[size_a];
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    for (i = 0; i < size_b; ++i){
     112:	0f9c                	addi	a5,sp,976
     114:	0000                	unimp
            product[j] = 0;
     116:	0fd6                	slli	t6,t6,0x15
     118:	0000                	unimp
     11a:	c4910003          	lb	zero,-951(sp)
    for (i = 0; i < size_b; ++i){
     11e:	d67c                	sw	a5,108(a2)
     120:	e000000f          	0xe000000f
    for (i = 0; i < size_a; ++i){
     124:	0200000f          	fence	r,unknown
     128:	7e00                	flw	fs0,56(a2)
     12a:	e000                	fsw	fs0,0(s0)
    for (i = 0; i < size_b; ++i){
     12c:	9a00000f          	0x9a00000f
     130:	0010                	0x10
    if(star_mult == 1){
     132:	0200                	addi	s0,sp,256
     134:	8200                	0x8200
     136:	9a00                	0x9a00
     138:	0010                	0x10
     13a:	a000                	fsd	fs0,0(s0)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
        for (j = size_b -1; j >= 0; j = j-1){
     142:	7cc4                	flw	fs1,60(s1)
     144:	10a0                	addi	s0,sp,104
            for (k = size_a-1; k >= 0; k = k-1 ){
     146:	0000                	unimp
     148:	10a2                	slli	ra,ra,0x28
            product[j] = 0;
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            line[i][j] = 0;
     150:	a27c                	fsd	fa5,192(a2)
     152:	0010                	0x10
            product[j] = 0;
     154:	ac00                	fsd	fs0,24(s0)
     156:	0010                	0x10
        for(j = 0; j < size_a + size_b -1; ++j){
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
    for (i = 0; i < size_b; ++i){
     164:	9c00                	0x9c00
     166:	0a00000f          	fence	ir,unknown
        for(j = 0; j < size_a + size_b -1; ++j){
     16a:	0010                	0x10
        pola[i] = a[i];
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	100a                	c.slli	zero,0x22
     174:	0000                	unimp
            pola[i] = pola[i] + mod;
     176:	1010                	addi	a2,sp,32
     178:	0000                	unimp
        while (pola[i] < 0){
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	1010                	addi	a2,sp,32
     180:	0000                	unimp
        pola[i] = pola[i] % mod;
     182:	1039                	c.nop	-18
     184:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
        pola[i] = pola[i] % mod;
     18a:	1039                	c.nop	-18
     18c:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     18e:	10a0                	addi	s0,sp,104
            pola[i] = pola[i] + mod;
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
        polb[i] = b[i];
     196:	a07e                	fsd	ft11,0(sp)
     198:	0010                	0x10
     19a:	a200                	fsd	fs0,0(a2)
            polb[i] = polb[i] + mod;
     19c:	0010                	0x10
        while (polb[i] < 0){
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
        polb[i] = polb[i] % mod;
     1a4:	10a2                	slli	ra,ra,0x28
     1a6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1a8:	10ac                	addi	a1,sp,104
     1aa:	0000                	unimp
        polb[i] = polb[i] % mod;
     1ac:	98910003          	lb	zero,-1655(sp)
    for (i = 0; i < size_b; ++i){
     1b0:	007e                	c.slli	zero,0x1f
            polb[i] = polb[i] + mod;
     1b2:	0000                	unimp
     1b4:	0000                	unimp
    if(star_mult == 1){
     1b6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     1b8:	be00                	fsd	fs0,56(a2)
     1ba:	c200000f          	0xc200000f
    for (i = 0; i < size_b; ++i){
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	669f 0010 7000      	0x70000010669f
     1ca:	0010                	0x10
    for(j = 0; j < size_a + size_b -1; ++j){
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    for(j = 0; j < size_a + size_b -1; ++j){
     1d6:	0000                	unimp
}
     1d8:	b000                	fsd	fs0,32(s0)
     1da:	000c                	0xc
     1dc:	c800                	sw	s0,16(s0)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0cc8                	addi	a0,sp,596
     1e6:	0000                	unimp
     1e8:	0d30                	addi	a2,sp,664
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	3058                	fld	fa4,160(s0)
     1f0:	000d                	c.nop	3
     1f2:	3c00                	fld	fs0,56(s0)
     1f4:	000d                	c.nop	3
     1f6:	0300                	addi	s0,sp,384
                line[size_b-1-j][k] = pola[k]*polb[j];
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0d3c                	addi	a5,sp,664
     1fe:	0000                	unimp
     200:	0d42                	slli	s10,s10,0x10
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0d42                	slli	s10,s10,0x10
     20c:	0000                	unimp
     20e:	0d78                	addi	a4,sp,668
     210:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
        for (j = size_b -1; j >= 0; j = j-1){
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	b000                	fsd	fs0,32(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     21e:	000c                	0xc
     220:	d200                	sw	s0,32(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0cd2                	slli	s9,s9,0x14
     22a:	0000                	unimp
     22c:	0d3a                	slli	s10,s10,0xe
     22e:	0000                	unimp
     230:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     232:	3a65                	jal	fffffbea <_stack_start+0xfffefbea>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	000d                	c.nop	3
     236:	4200                	lw	s0,0(a2)
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
        for (j = size_b -1; j >= 0; j = j-1){
     240:	429f 000d 7800      	0x7800000d429f
     246:	000d                	c.nop	3
            line[i][j] = line[i][j] % mod;
     248:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     24a:	6500                	flw	fs0,8(a0)
	...
            line[i][j] = line[i][j] % mod;
     254:	0cb0                	addi	a2,sp,600
        for(j = 0; j < size_a + size_b -1; ++j){
     256:	0000                	unimp
     258:	0cca                	slli	s9,s9,0x12
    for (i = 0; i < size_b; ++i){
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	ca5c                	sw	a5,20(a2)
     260:	000c                	0xc
        for(j = 0; j < size_a + size_b -1; ++j){
     262:	3400                	fld	fs0,40(s0)
     264:	000d                	c.nop	3
            product[j] += line[i][j];
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d34                	addi	a3,sp,664
     26c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     26e:	0d42                	slli	s10,s10,0x10
            product[j] += line[i][j];
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d42                	slli	s10,s10,0x10
     27a:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     27c:	0d78                	addi	a4,sp,668
     27e:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     286:	0000                	unimp
     288:	0000                	unimp
        product[j] = product[j] % mod;
     28a:	b000                	fsd	fs0,32(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     28c:	000c                	0xc
     28e:	cc00                	sw	s0,24(s0)
        product[j] = product[j] % mod;
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0ccc                	addi	a1,sp,596
    for(j = 0; j < size_a + size_b -1; ++j){
     298:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29a:	0ce5                	addi	s9,s9,25
     29c:	0000                	unimp
     29e:	0001                	nop
    int line[size_b][size_a + size_b];
     2a0:	e55a                	fsw	fs6,136(sp)
     2a2:	000c                	0xc
     2a4:	7800                	flw	fs0,48(s0)
     2a6:	000d                	c.nop	3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
    int line[size_b][size_a + size_b];
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
     2b6:	b000                	fsd	fs0,32(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b8:	000c                	0xc
     2ba:	d400                	sw	s0,40(s0)
     2bc:	000c                	0xc
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0cd4                	addi	a3,sp,596
     2c4:	0000                	unimp
    int pola[size_a];
     2c6:	0d3e                	slli	s10,s10,0xf
     2c8:	0000                	unimp
    int line[size_b][size_a + size_b];
     2ca:	0001                	nop
     2cc:	000d3e67          	0xd3e67
     2d0:	4200                	lw	s0,0(a2)
    int pola[size_a];
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
    int line[size_b][size_a + size_b];
     2da:	429f 000d 7800      	0x7800000d429f
    int polb[size_b];
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0cb0                	addi	a2,sp,600
    for (i = 0; i < size_b; ++i){
     2f0:	0000                	unimp
     2f2:	0ce5                	addi	s9,s9,25
     2f4:	0000                	unimp
            product2[j] = 0;
     2f6:	0001                	nop
     2f8:	e55f 000c 7800      	0x7800000ce55f
    for (i = 0; i < size_b; ++i){
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
    for(i = 0; i < size_a; ++i){
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
    for(i = 0; i < size_b; ++i){
     30c:	0000                	unimp
    if(star_mult == 1){
     30e:	b000                	fsd	fs0,32(s0)
     310:	000c                	0xc
     312:	e500                	fsw	fs0,8(a0)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	0ce5                	addi	s9,s9,25
     31c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0d38                	addi	a4,sp,664
     320:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	0001                	nop
     324:	3864                	fld	fs1,240(s0)
            product2[j] = 0;
     326:	000d                	c.nop	3
     328:	4200                	lw	s0,0(a2)
     32a:	000d                	c.nop	3
            line[i][j] = 0;
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
            product2[j] = 0;
     330:	6001                	0x6001
     332:	429f 000d 7800      	0x7800000d429f
        for(j = 0; j < size_a + size_b -1; ++j){
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     33c:	6400                	flw	fs0,8(s0)
	...
        for(j = 0; j < size_a + size_b -1; ++j){
     346:	0ce6                	slli	s9,s9,0x19
        pola[i] = a[i];
     348:	0000                	unimp
     34a:	0cf5                	addi	s9,s9,29
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     356:	0000                	unimp
        pola[i] = a[i];
     358:	f800                	fsw	fs0,48(s0)
     35a:	000c                	0xc
    for(i = 0; i < size_a; ++i){
     35c:	1600                	addi	s0,sp,800
        polb[i] = b[i];
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0d16                	slli	s10,s10,0x5
     366:	0000                	unimp
     368:	0d19                	addi	s10,s10,6
     36a:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     36c:	0001                	nop
        polb[i] = b[i];
     36e:	425c                	lw	a5,4(a2)
     370:	000d                	c.nop	3
    for(i = 0; i < size_b; ++i){
     372:	6600                	flw	fs0,8(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0d1a                	slli	s10,s10,0x6
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	0d25                	addi	s10,s10,9
     388:	0000                	unimp
     38a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     390:	0000                	unimp
     392:	0000                	unimp
     394:	2600                	fld	fs0,8(a2)
     396:	000d                	c.nop	3
     398:	4200                	lw	s0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	000d                	c.nop	3
        array_add(product2,line[i],size_a+size_b-1);
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d66                	slli	s10,s10,0x19
     3a2:	0000                	unimp
    for(i=0;i<size_b;++i){
     3a4:	0d78                	addi	a4,sp,668
     3a6:	0000                	unimp
}
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	f800                	fsw	fs0,48(s0)
     3b4:	000c                	0xc
     3b6:	fe00                	fsw	fs0,56(a2)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cfe                	slli	s9,s9,0x1f
     3c0:	0000                	unimp
     3c2:	0d0a                	slli	s10,s10,0x2
     3c4:	0000                	unimp
     3c6:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c8:	0a5d                	addi	s4,s4,23
     3ca:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	1000                	addi	s0,sp,32
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0d26                	slli	s10,s10,0x9
     3d6:	0000                	unimp
     3d8:	0d32                	slli	s10,s10,0xc
     3da:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	4259                	li	tp,22
     3e0:	000d                	c.nop	3
     3e2:	4c00                	lw	s0,24(s0)
     3e4:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
        for (j = size_b -1; j >= 0; j = j-1){
     3ea:	0d4c                	addi	a1,sp,660
     3ec:	0000                	unimp
     3ee:	0d52                	slli	s10,s10,0x14
     3f0:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	529f 000d 5400      	0x5400000d529f
    for(i=0;i<size_b;++i){
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
    int v[size_N];
     400:	5d00                	lw	s0,56(a0)
     402:	0d54                	addi	a3,sp,660
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     404:	0000                	unimp
    int v[size_N];
     406:	0d66                	slli	s10,s10,0x19
     408:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     40a:	0001                	nop
     40c:	665e                	flw	fa2,212(sp)
     40e:	000d                	c.nop	3
     410:	7000                	flw	fs0,32(s0)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d70                	addi	a2,sp,668
     41a:	0000                	unimp
     41c:	0d76                	slli	s10,s10,0x1d
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 6d7f7 <_stack_start+0x5d7f7>
     424:	769f 000d 7800      	0x7800000d769f
    int v[size_N];
     42a:	000d                	c.nop	3
    int q[size_N];
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
    int denum_temp[size_D];
     438:	0c28                	addi	a0,sp,536
     43a:	0000                	unimp
     43c:	0c3c                	addi	a5,sp,536
    int num_temp[size_N];
     43e:	0000                	unimp
    int denum_temp[size_D];
     440:	0001                	nop
     442:	3c5a                	fld	fs8,432(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     444:	000c                	0xc
     446:	8800                	0x8800
    int denum_temp[size_D];
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44c:	5800                	lw	s0,48(s0)
    int v[size_N];
     44e:	0c88                	addi	a0,sp,592
     450:	0000                	unimp
    int denum_temp[size_D];
     452:	0cb0                	addi	a2,sp,600
    for (i = 0; i < size_N; ++i){
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    for (i = 0; i < size_D; ++i) {
     464:	0c28                	addi	a0,sp,536
    for (i = 0; i < size_N; ++i){
     466:	0000                	unimp
     468:	0c44                	addi	s1,sp,532
     46a:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     46c:	0001                	nop
     46e:	000c445b          	0xc445b
     472:	9600                	0x9600
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     478:	6200                	flw	fs0,0(a2)
     47a:	0c96                	slli	s9,s9,0x5
        if ( (b_N*u)%mod == 1 )
     47c:	0000                	unimp
    for (u = 0; u < mod; ++u){
     47e:	0c9e                	slli	s9,s9,0x7
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
        num_temp[i] = num[i];
     488:	0c9e                	slli	s9,s9,0x7
     48a:	0000                	unimp
     48c:	0cb0                	addi	a2,sp,600
            num_temp[i] = num_temp[i] + mod;
     48e:	0000                	unimp
        while (num_temp[i] < 0) {
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     496:	0000                	unimp
     498:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     49a:	2800                	fld	fs0,16(s0)
     49c:	000c                	0xc
        num_temp[i] = num_temp[i] % mod;
     49e:	3800                	fld	fs0,48(s0)
     4a0:	000c                	0xc
    for (i = 0; i < size_N; ++i){
     4a2:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] + mod;
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c38                	addi	a4,sp,536
        denum_temp[i] = denum[i];
     4a8:	0000                	unimp
     4aa:	0c6e                	slli	s8,s8,0x1b
     4ac:	0000                	unimp
     4ae:	0001                	nop
            denum_temp[i] = denum_temp[i] + mod;
     4b0:	6e59                	lui	t3,0x16
        while (denum_temp[i] < 0) {
     4b2:	000c                	0xc
     4b4:	7100                	flw	fs0,32(a0)
     4b6:	000c                	0xc
        denum_temp[i] = denum_temp[i] % mod;
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
    for (i = 0; i < size_D; ++i) {
     4bc:	0c71                	addi	s8,s8,28
     4be:	0000                	unimp
        denum_temp[i] = denum_temp[i] % mod;
     4c0:	0cb0                	addi	a2,sp,600
     4c2:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     4c4:	0004                	0x4
            denum_temp[i] = denum_temp[i] + mod;
     4c6:	9f5c01f3          	0x9f5c01f3
	...
        v[i] = 0;
     4d2:	0c28                	addi	a0,sp,536
        q[i] = 0;
     4d4:	0000                	unimp
     4d6:	00000c4f          	fnmadd.s	fs8,ft0,ft0,ft0,rne
        v[i] = 0;
     4da:	0001                	nop
    for (i = 0; i < size_N; ++i){
     4dc:	4f5d                	li	t5,23
     4de:	000c                	0xc
        if( denum_temp[i] != 0 )
     4e0:	6a00                	flw	fs0,16(a2)
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
        if ( (b_N*u)%mod == 1 )
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0c6a                	slli	s8,s8,0x1a
     4ea:	0000                	unimp
     4ec:	0cb0                	addi	a2,sp,600
     4ee:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
    for (i = size_N-1; i >= 0; i = i-1){
     4fe:	0c28                	addi	a0,sp,536
     500:	0000                	unimp
     502:	00000c4f          	fnmadd.s	fs8,ft0,ft0,ft0,rne
    while (d >= d2){
     506:	0001                	nop
    for(i = 0; i < size_N; ++i){
     508:	4f5e                	lw	t5,212(sp)
        result[i] = q[i];
     50a:	000c                	0xc
     50c:	9a00                	0x9a00
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     512:	6400                	flw	fs0,8(s0)
     514:	0c9a                	slli	s9,s9,0x6
    for(i = size_N; i < (2*size_N); ++i){
     516:	0000                	unimp
     518:	0c9e                	slli	s9,s9,0x7
        result[i] = num_temp[i-size_N];
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
    for(i = size_N; i < (2*size_N); ++i){
     522:	0c9e                	slli	s9,s9,0x7
     524:	0000                	unimp
}
     526:	0cb0                	addi	a2,sp,600
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	6a00                	flw	fs0,16(a2)
     536:	000c                	0xc
     538:	7100                	flw	fs0,32(a0)
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
     540:	0c71                	addi	s8,s8,28
     542:	0000                	unimp
     544:	0c98                	addi	a4,sp,592
     546:	0000                	unimp
     548:	0001                	nop
     54a:	000c9e63          	bnez	s9,566 <polydiv+0x166>
     54e:	b000                	fsd	fs0,32(s0)
        v[(d-d2)] = u*r_d;
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
        for (i = 0; i < size_N; ++i){
     55e:	0c82                	c.slli64	s9
     560:	0000                	unimp
     562:	0c94                	addi	a3,sp,592
     564:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     566:	0001                	nop
     568:	9e59                	0x9e59
     56a:	000c                	0xc
     56c:	a800                	fsd	fs0,16(s0)
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
        for (i = 0; i < size_N; ++i){
     574:	0ca8                	addi	a0,sp,600
     576:	0000                	unimp
     578:	0cae                	slli	s9,s9,0xb
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
        for (i = 0; i < size_N; ++i){
     580:	ae9f 000c b000      	0xb000000cae9f
        for (i = 0; i < size_N; ++i){
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
     58a:	5900                	lw	s0,48(a0)
	...
        for(i = 0; i < size_N; ++i){
     594:	0934                	addi	a3,sp,152
     596:	0000                	unimp
     598:	0978                	addi	a4,sp,156
     59a:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     59c:	0001                	nop
     59e:	785a                	flw	fa6,180(sp)
     5a0:	0009                	c.nop	2
     5a2:	3c00                	fld	fs0,56(s0)
     5a4:	0100000b          	0x100000b
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	0b3c                	addi	a5,sp,408
     5ac:	0000                	unimp
            v[i] = v[i] % mod;
     5ae:	0b60                	addi	s0,sp,412
        for (i = 0; i < size_N; ++i){
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
            v[i] = v[i] % mod;
     5b6:	609f 000b 8000      	0x8000000b609f
        for (i = 0; i < size_N; ++i){
     5bc:	0400000b          	0x400000b
                product[i] = product[i] + mod;
     5c0:	f300                	fsw	fs0,32(a4)
            while (product[i] < 0) {
     5c2:	5a01                	li	s4,-32
     5c4:	809f 000b 1400      	0x1400000b809f
            product[i] = product[i] % mod;
     5ca:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
            product[i] = product[i] % mod;
     5d0:	0c14                	addi	a3,sp,528
     5d2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5d4:	0c28                	addi	a0,sp,536
            num_temp[i] = num_temp[i] - product[i];
     5d6:	0000                	unimp
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
        for (i = 0; i < size_N; ++i){
     5e2:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5e4:	3400                	fld	fs0,40(s0)
     5e6:	0009                	c.nop	2
     5e8:	7000                	flw	fs0,32(s0)
        for (i = 0; i < size_N; ++i){
     5ea:	0009                	c.nop	2
                num_temp[i] = num_temp[i] + mod;
     5ec:	0100                	addi	s0,sp,128
     5ee:	5b00                	lw	s0,48(a4)
            while (num_temp[i] < 0){
     5f0:	0970                	addi	a2,sp,156
     5f2:	0000                	unimp
     5f4:	0b68                	addi	a0,sp,412
            num_temp[i] = num_temp[i] % mod;
     5f6:	0000                	unimp
     5f8:	0001                	nop
        for (i = 0; i < size_N; ++i){
     5fa:	000b6867          	0xb6867
            num_temp[i] = num_temp[i] % mod;
     5fe:	8000                	0x8000
     600:	0400000b          	0x400000b
            q[i] = q[i] % mod;
     604:	f300                	fsw	fs0,32(a4)
        for(i = 0; i < size_N; ++i){
     606:	5b01                	li	s6,-32
     608:	809f 000b 2800      	0x2800000b809f
            q[i] = q[i] % mod;
     60e:	000c                	0xc
     610:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     612:	6700                	flw	fs0,8(a4)
	...
            v[i] = 0;
     61c:	0934                	addi	a3,sp,152
     61e:	0000                	unimp
     620:	0974                	addi	a3,sp,156
     622:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     624:	0001                	nop
     626:	745c                	flw	fa5,44(s0)
     628:	0009                	c.nop	2
     62a:	6400                	flw	fs0,8(s0)
        result[i] = q[i];
     62c:	0100000b          	0x100000b
     630:	6600                	flw	fs0,8(a2)
     632:	0b64                	addi	s1,sp,412
     634:	0000                	unimp
     636:	0b80                	addi	s0,sp,464
    for(i = 0; i < size_N; ++i){
     638:	0000                	unimp
        result[i] = q[i];
     63a:	0004                	0x4
    for(i = 0; i < size_N; ++i){
     63c:	9f5c01f3          	0x9f5c01f3
        result[i] = num_temp[i-size_N];
     640:	0b80                	addi	s0,sp,464
     642:	0000                	unimp
     644:	0c28                	addi	a0,sp,536
     646:	0000                	unimp
     648:	0001                	nop
    for(i = size_N; i < (2*size_N); ++i){
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
     64e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     650:	0000                	unimp
     652:	c200                	sw	s0,0(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     654:	000a                	c.slli	zero,0x2
    int ri_2[size]; // MX-ring poly, a
     656:	cc00                	sw	s0,24(s0)
     658:	000a                	c.slli	zero,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
     666:	0adc                	addi	a5,sp,340
     668:	0000                	unimp
     66a:	00000afb          	0xafb
     66e:	0001                	nop
     670:	e05a                	fsw	fs6,0(sp)
     672:	f400000b          	0xf400000b
    int ri_2[size]; // MX-ring poly, a
     676:	0100000b          	0x100000b
     67a:	5a00                	lw	s0,48(a2)
	...
    int ri[size];
     684:	0afc                	addi	a5,sp,348
     686:	0000                	unimp
    int ti_1[size]; // ti_1[0] = 1
     688:	00000b0f          	0xb0f
     68c:	0001                	nop
    int ti[size];
     68e:	f45a                	fsw	fs6,40(sp)
     690:	0400000b          	0x400000b
    int qi_1[size];
     694:	000c                	0xc
     696:	0100                	addi	s0,sp,128
     698:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     6a2:	0b10                	addi	a2,sp,400
     6a4:	0000                	unimp
    int temp[size];
     6a6:	0b2c                	addi	a1,sp,408
    for (i = 0; i < size; ++i) {
     6a8:	0000                	unimp
     6aa:	0001                	nop
        ti_2[i] = 0;
     6ac:	045a                	slli	s0,s0,0x16
     6ae:	000c                	0xc
     6b0:	1400                	addi	s0,sp,544
     6b2:	000c                	0xc
    for (i = 0; i < size; ++i) {
     6b4:	0100                	addi	s0,sp,128
     6b6:	5a00                	lw	s0,48(a2)
	...
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6c0:	0a76                	slli	s4,s4,0x1d
     6c2:	0000                	unimp
     6c4:	0b44                	addi	s1,sp,404
        for (i = 0; i < N + 1; ++i) {
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
        ri_2[i] = polyR[i];
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0b44                	addi	s1,sp,404
     6ce:	0000                	unimp
     6d0:	0b5c                	addi	a5,sp,404
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
    for (i = 0; i < size; ++i) {
     6d6:	0084                	addi	s1,sp,64
        ri_2[i] = polyR[i];
     6d8:	0b5c                	addi	a5,sp,404
     6da:	0000                	unimp
        ri_1[i] = polyf[i];
     6dc:	0b60                	addi	s0,sp,412
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
        ti_2[i] = 0;
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
     6f2:	0b60                	addi	s0,sp,412
        ti_1[i] = 0;
     6f4:	0000                	unimp
     6f6:	0b80                	addi	s0,sp,464
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
    for (i = 0; i < size; ++i) {
     6fe:	235a01f3          	0x235a01f3
                ri_2[i] = ri_2[i] + mod;
     702:	3201                	jal	2 <__DYNAMIC+0x2>
            while (ri_2[i] < 0) {
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
            ri_2[i] = ri_2[i] % mod;
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
        for (i = 0; i < N + 1; ++i) {
     70e:	801c                	0x801c
            ri_2[i] = ri_2[i] % mod;
     710:	2800000b          	0x2800000b
        for (i = 0; i < N + 1; ++i) {
     714:	000c                	0xc
     716:	0200                	addi	s0,sp,256
     718:	7200                	flw	fs0,32(a2)
	...
        for (i = 0; i < N + 1; ++i) {
     722:	7a00                	flw	fs0,48(a2)
     724:	000a                	c.slli	zero,0x2
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     726:	7c00                	flw	fs0,56(s0)
     728:	000a                	c.slli	zero,0x2
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	7c9f 000a 8200      	0x8200000a7c9f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
     73a:	0a86                	slli	s5,s5,0x1
     73c:	0000                	unimp
     73e:	0a8c                	addi	a1,sp,336
        for (i = 0; i < N + 1; ++i) {
     740:	0000                	unimp
     742:	0001                	nop
     744:	945f 000a a200      	0xa200000a945f
        for (i = 0; i < N + 1; ++i) {
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     750:	0aac                	addi	a1,sp,344
     752:	0000                	unimp
     754:	0ac1                	addi	s5,s5,16
     756:	0000                	unimp
     758:	0001                	nop
     75a:	c25f 000a cc00      	0xcc00000ac25f
        for (i = 0; i < N + 1; ++i) {
     760:	000a                	c.slli	zero,0x2
     762:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     76a:	0acc                	addi	a1,sp,340
     76c:	0000                	unimp
     76e:	00000adb          	0xadb
     772:	0001                	nop
     774:	dc5f 000a ec00      	0xec00000adc5f
        for (i = 0; i < N + 1; ++i) {
     77a:	000a                	c.slli	zero,0x2
     77c:	0500                	addi	s0,sp,640
        for (i = 0; i < N + 1; ++i) {
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
     784:	0aec                	addi	a1,sp,348
        for (i = 0; i < N + 1; ++i) {
     786:	0000                	unimp
     788:	0afc                	addi	a5,sp,348
     78a:	0000                	unimp
     78c:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     78e:	fc59                	bnez	s0,72c <ext_euclid+0xdc>
     790:	000a                	c.slli	zero,0x2
     792:	0400                	addi	s0,sp,512
     794:	0200000b          	0x200000b
        for (i = 0; i < N + 1; ++i) {
     798:	3000                	fld	fs0,32(s0)
     79a:	049f 000b 0c00      	0xc00000b049f
        for (j = 0; j < mod; ++j) {
     7a0:	0100000b          	0x100000b
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0b10                	addi	a2,sp,400
     7a8:	0000                	unimp
     7aa:	0b22                	slli	s6,s6,0x8
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
    }
     7b4:	229f 000b 3c00      	0x3c00000b229f
     7ba:	0100000b          	0x100000b
     7be:	6800                	flw	fs0,16(s0)
     7c0:	0b3c                	addi	a5,sp,408
     7c2:	0000                	unimp
     7c4:	0bbc                	addi	a5,sp,472
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	bc5f 000b be00      	0xbe00000bbc5f
     7d0:	0300000b          	0x300000b
     7d4:	7f00                	flw	fs0,56(a4)
     7d6:	9f7f                	0x9f7f
     7d8:	0bbe                	slli	s7,s7,0xf
     7da:	0000                	unimp
     7dc:	0be0                	addi	s0,sp,476
                ri_1[i] = ri_1[i] + mod;
     7de:	0000                	unimp
     7e0:	0001                	nop
            while (ri_1[i] < 0) {
     7e2:	e05f 000b f000      	0xf000000be05f
            ri_1[i] = ri_1[i] % mod;
     7e8:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0bf0                	addi	a2,sp,476
            ri_1[i] = ri_1[i] % mod;
     7f0:	0000                	unimp
     7f2:	0bf2                	slli	s7,s7,0x1c
        for (i = 0; i < N + 1; ++i) {
     7f4:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	f29f 000b f400      	0xf400000bf29f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     800:	0100000b          	0x100000b
            ri[i - (N + 1)] = res[i];
     804:	5900                	lw	s0,48(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     806:	0bf4                	addi	a3,sp,476
            temp[i] = ri_2[i] - ri[i];
     808:	0000                	unimp
     80a:	0bf8                	addi	a4,sp,476
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	f85e                	fsw	fs7,48(sp)
     812:	0200000b          	0x200000b
     816:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     818:	0300                	addi	s0,sp,384
            temp[i] = ri_2[i] - ri[i];
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     81e:	0c02                	c.slli64	s8
     820:	0000                	unimp
                temp[i] = temp[i] + mod;
     822:	0c04                	addi	s1,sp,528
     824:	0000                	unimp
            while (temp[i] < 0) {
     826:	0001                	nop
     828:	045e                	slli	s0,s0,0x17
     82a:	000c                	0xc
            temp[i] = temp[i] % mod;
     82c:	1400                	addi	s0,sp,544
     82e:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     830:	0100                	addi	s0,sp,128
     832:	6800                	flw	fs0,16(s0)
            temp[i] = temp[i] % mod;
     834:	0c14                	addi	a3,sp,528
     836:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     838:	0c24                	addi	s1,sp,536
            qi_1[i] = res1[i];
     83a:	0000                	unimp
     83c:	0001                	nop
     83e:	245f 000c 2600      	0x2600000c245f
     844:	000c                	0xc
        for (i = 0; i < N + 1; ++i) {
     846:	0300                	addi	s0,sp,384
            qi_1[i] = res1[i];
     848:	7f00                	flw	fs0,56(a4)
        for (i = 0; i < N + 1; ++i) {
     84a:	9f7f                	0x9f7f
                qi_1[i] = qi_1[i] + mod;
     84c:	0c26                	slli	s8,s8,0x9
     84e:	0000                	unimp
            while (qi_1[i] < 0) {
     850:	0c28                	addi	a0,sp,536
     852:	0000                	unimp
     854:	0001                	nop
            qi_1[i] = qi_1[i] % mod;
     856:	005f 0000 0000      	0x5f
        for (i = 0; i < N + 1; ++i) {
     85c:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     85e:	4000                	lw	s0,0(s0)
     860:	8000000b          	0x8000000b
            temp[i] = res2[i];
     864:	0600000b          	0x600000b
     868:	0300                	addi	s0,sp,384
     86a:	1ad8                	addi	a4,sp,372
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
        for (i = 0; i < N + 1; ++i) {
     874:	0000                	unimp
                temp[i] = temp[i] + mod;
     876:	7600                	flw	fs0,40(a2)
     878:	000a                	c.slli	zero,0x2
     87a:	3c00                	fld	fs0,56(s0)
            while (temp[i] < 0) {
     87c:	0100000b          	0x100000b
     880:	6200                	flw	fs0,0(a2)
     882:	0b3c                	addi	a5,sp,408
            temp[i] = temp[i] % mod;
     884:	0000                	unimp
     886:	0b60                	addi	s0,sp,412
        for (i = 0; i < N + 1; ++i) {
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
            temp[i] = temp[i] % mod;
     88e:	609f 000b 8000      	0x8000000b609f
            ti[i] = ti_2[i] - temp[i];
     894:	0400000b          	0x400000b
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
     89c:	809f 000b 1400      	0x1400000b809f
     8a2:	000c                	0xc
     8a4:	0100                	addi	s0,sp,128
     8a6:	6200                	flw	fs0,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8a8:	0c14                	addi	a3,sp,528
            ti[i] = ti_2[i] - temp[i];
     8aa:	0000                	unimp
     8ac:	0c28                	addi	a0,sp,536
        for (i = 0; i < N + 1; ++i) {
     8ae:	0000                	unimp
     8b0:	7f850003          	lb	zero,2040(a0)
                ti[i] = ti[i] + mod;
     8b4:	009f 0000 0000      	0x9f
            while (ti[i] < 0) {
     8ba:	0000                	unimp
            ti[i] = ti[i] % mod;
     8bc:	5000                	lw	s0,32(s0)
     8be:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     8c0:	c600                	sw	s0,8(a2)
     8c2:	0006                	c.slli	zero,0x1
            ti[i] = ti[i] % mod;
     8c4:	0100                	addi	s0,sp,128
     8c6:	5a00                	lw	s0,48(a2)
        for (i = 0; i < N + 1; ++i) {
     8c8:	06c6                	slli	a3,a3,0x11
            ri_2[i] = ri_1[i];
     8ca:	0000                	unimp
     8cc:	06ca                	slli	a3,a3,0x12
     8ce:	0000                	unimp
     8d0:	0004                	0x4
     8d2:	9f5a01f3          	0x9f5a01f3
     8d6:	06ca                	slli	a3,a3,0x12
            ri_1[i] = ri[i];
     8d8:	0000                	unimp
     8da:	0700                	addi	s0,sp,896
     8dc:	0000                	unimp
            ti_2[i] = ti_1[i];
     8de:	0001                	nop
     8e0:	005a                	c.slli	zero,0x16
     8e2:	34000007          	0x34000007
     8e6:	0009                	c.nop	2
            ri_1[i] = ri[i];
     8e8:	0400                	addi	s0,sp,512
            ti_2[i] = ti_1[i];
     8ea:	f300                	fsw	fs0,32(a4)
     8ec:	5a01                	li	s4,-32
     8ee:	009f 0000 0000      	0x9f
     8f4:	0000                	unimp
     8f6:	5000                	lw	s0,32(s0)
            ti_1[i] = ti[i];
     8f8:	0006                	c.slli	zero,0x1
     8fa:	c600                	sw	s0,8(a2)
     8fc:	0006                	c.slli	zero,0x1
     8fe:	0100                	addi	s0,sp,128
              qi_1[i] = 0;
     900:	5b00                	lw	s0,48(a4)
     902:	06c6                	slli	a3,a3,0x11
     904:	0000                	unimp
     906:	06ca                	slli	a3,a3,0x12
        for (i = 0; i < N + 1; ++i) {
     908:	0000                	unimp
     90a:	0004                	0x4
            if (((ri_2[0] * j) % mod) == 1)
     90c:	9f5b01f3          	0x9f5b01f3
     910:	06ca                	slli	a3,a3,0x12
     912:	0000                	unimp
     914:	0700                	addi	s0,sp,896
     916:	0000                	unimp
     918:	0001                	nop
     91a:	0007005b          	0x7005b
        for (j = 0; j < mod; ++j) {
     91e:	3400                	fld	fs0,40(s0)
            ti_2[i] = (ti_2[i] * j) % mod;
     920:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     922:	0400                	addi	s0,sp,512
     924:	f300                	fsw	fs0,32(a4)
            ti_2[i] = (ti_2[i] * j) % mod;
     926:	5b01                	li	s6,-32
     928:	009f 0000 0000      	0x9f
     92e:	0000                	unimp
     930:	5000                	lw	s0,32(s0)
        for (i = 0; i < N + 1; ++i) {
     932:	0006                	c.slli	zero,0x1
int* generate_keys(int N, int p, int q){
     934:	b400                	fsd	fs0,40(s0)
     936:	0006                	c.slli	zero,0x1
     938:	0100                	addi	s0,sp,128
     93a:	5c00                	lw	s0,56(s0)
     93c:	06b4                	addi	a3,sp,840
     93e:	0000                	unimp
     940:	07c0                	addi	s0,sp,964
     942:	0000                	unimp
     944:	0001                	nop
     946:	c062                	sw	s8,0(sp)
     948:	c2000007          	0xc2000007
     94c:	03000007          	0x3000007
     950:	8300                	0x8300
     952:	9f01                	0x9f01
     954:	07c2                	slli	a5,a5,0x10
     956:	0000                	unimp
     958:	07de                	slli	a5,a5,0x17
     95a:	0000                	unimp
     95c:	0004                	0x4
     95e:	9f5c01f3          	0x9f5c01f3
     962:	07de                	slli	a5,a5,0x17
     964:	0000                	unimp
     966:	0934                	addi	a3,sp,152
     968:	0000                	unimp
     96a:	0001                	nop
     96c:	0062                	c.slli	zero,0x18
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96e:	0000                	unimp
     970:	0000                	unimp
     972:	0000                	unimp
     974:	5000                	lw	s0,32(s0)
     976:	0006                	c.slli	zero,0x1
     978:	b400                	fsd	fs0,40(s0)
     97a:	0006                	c.slli	zero,0x1
     97c:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97e:	5d00                	lw	s0,56(a0)
     980:	06b4                	addi	a3,sp,840
     982:	0000                	unimp
     984:	07be                	slli	a5,a5,0xf
     986:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     988:	0001                	nop
     98a:	be59                	j	520 <polydiv+0x120>
     98c:	de000007          	0xde000007
     990:	04000007          	0x4000007
     994:	f300                	fsw	fs0,32(a4)
     996:	5d01                	li	s10,-32
     998:	de9f 0007 3400      	0x34000007de9f
     99e:	0009                	c.nop	2
     9a0:	0100                	addi	s0,sp,128
     9a2:	5900                	lw	s0,48(a0)
	...
     9ac:	07b4                	addi	a3,sp,968
     9ae:	0000                	unimp
     9b0:	07de                	slli	a5,a5,0x17
     9b2:	0000                	unimp
     9b4:	0006                	c.slli	zero,0x1
     9b6:	00194803          	lbu	a6,1(s2)
     9ba:	9f00                	0x9f00
	...
     9c4:	06a8                	addi	a0,sp,840
     9c6:	0000                	unimp
     9c8:	07c2                	slli	a5,a5,0x10
     9ca:	0000                	unimp
     9cc:	0001                	nop
     9ce:	0007c263          	bltz	a5,9d2 <generate_keys+0x9e>
     9d2:	de00                	sw	s0,56(a2)
     9d4:	06000007          	0x6000007
     9d8:	f300                	fsw	fs0,32(a4)
     9da:	5c01                	li	s8,-32
     9dc:	1c31                	addi	s8,s8,-20
     9de:	de9f 0007 3400      	0x34000007de9f
     9e4:	0009                	c.nop	2
     9e6:	0100                	addi	s0,sp,128
     9e8:	6300                	flw	fs0,0(a4)
	...
     9f2:	06a8                	addi	a0,sp,840
    int polyR[N+1];
     9f4:	0000                	unimp
     9f6:	06b4                	addi	a3,sp,840
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f8:	0000                	unimp
    int polyR[N+1];
     9fa:	0002                	c.slli64	zero
     9fc:	9f30                	0x9f30
     9fe:	06b4                	addi	a3,sp,840
     a00:	0000                	unimp
     a02:	06c6                	slli	a3,a3,0x11
     a04:	0000                	unimp
     a06:	0001                	nop
    polyR[N] = 1;
     a08:	ca5e                	sw	s7,20(sp)
     a0a:	0006                	c.slli	zero,0x1
     a0c:	d800                	sw	s0,48(s0)
     a0e:	0006                	c.slli	zero,0x1
     a10:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a12:	5e00                	lw	s0,56(a2)
     a14:	06d8                	addi	a4,sp,836
     a16:	0000                	unimp
     a18:	06fc                	addi	a5,sp,844
     a1a:	0000                	unimp
     a1c:	7f7e0003          	lb	zero,2039(t3) # 167f7 <_stack_start+0x67f7>
     a20:	fc9f 0006 0000      	0x6fc9f
     a26:	01000007          	0x1000007
     a2a:	5e00                	lw	s0,56(a2)
     a2c:	0700                	addi	s0,sp,896
     a2e:	0000                	unimp
     a30:	0710                	addi	a2,sp,896
     a32:	0000                	unimp
     a34:	0001                	nop
     a36:	105d                	c.nop	-9
     a38:	12000007          	0x12000007
     a3c:	03000007          	0x3000007
     a40:	7d00                	flw	fs0,56(a0)
     a42:	9f7f                	0x9f7f
     a44:	0712                	slli	a4,a4,0x4
     a46:	0000                	unimp
     a48:	072a                	slli	a4,a4,0xa
     a4a:	0000                	unimp
     a4c:	0001                	nop
     a4e:	325d                	jal	3f4 <polymult2+0x15a>
     a50:	36000007          	0x36000007
     a54:	01000007          	0x1000007
     a58:	6200                	flw	fs0,0(a2)
     a5a:	0736                	slli	a4,a4,0xd
     a5c:	0000                	unimp
     a5e:	0740                	addi	s0,sp,900
     a60:	0000                	unimp
     a62:	0001                	nop
     a64:	425f 0007 4a00      	0x4a000007425f
     a6a:	01000007          	0x1000007
     a6e:	5e00                	lw	s0,56(a2)
     a70:	074c                	addi	a1,sp,900
     a72:	0000                	unimp
     a74:	0754                	addi	a3,sp,900
    polyR[0] = -1;
     a76:	0000                	unimp
     a78:	0001                	nop
    for(i = 1; i < N; ++i){
     a7a:	5c5d                	li	s8,-9
     a7c:	5e000007          	0x5e000007
     a80:	02000007          	0x2000007
    for (i = N; i < 55; ++i ){
     a84:	3000                	fld	fs0,32(s0)
     a86:	5e9f 0007 6600      	0x660000075e9f
        random_keys[i] = f[i];
     a8c:	01000007          	0x1000007
     a90:	5f00                	lw	s0,56(a4)
     a92:	0766                	slli	a4,a4,0x19
    for(i = 0; i < N; ++i){
     a94:	0000                	unimp
     a96:	0770                	addi	a2,sp,908
     a98:	0000                	unimp
     a9a:	0001                	nop
    for(i = N; i < (2*N); ++i){
     a9c:	785d                	lui	a6,0xffff7
     a9e:	7a000007          	0x7a000007
     aa2:	02000007          	0x2000007
        random_keys[i] = g[i-N];
     aa6:	3000                	fld	fs0,32(s0)
     aa8:	7a9f 0007 8000      	0x800000077a9f
    for(i = N; i < (2*N); ++i){
     aae:	01000007          	0x1000007
    for(i = (2*N); i < (3*N); ++i){
     ab2:	5f00                	lw	s0,56(a4)
     ab4:	0780                	addi	s0,sp,960
    fp = ext_euclid(polyR, f, (N+1), p);
     ab6:	0000                	unimp
     ab8:	078e                	slli	a5,a5,0x3
     aba:	0000                	unimp
     abc:	0001                	nop
     abe:	905e                	c.add	zero,s7
     ac0:	a4000007          	0xa4000007
        random_keys[i] = fp[i-(2*N)];
     ac4:	01000007          	0x1000007
     ac8:	5d00                	lw	s0,56(a0)
     aca:	07b0                	addi	a2,sp,968
    for(i = (2*N); i < (3*N); ++i){
     acc:	0000                	unimp
     ace:	07de                	slli	a5,a5,0x17
    fq = ext_euclid(polyR, f, (N+1), q);
     ad0:	0000                	unimp
     ad2:	0001                	nop
     ad4:	de5e                	sw	s7,60(sp)
     ad6:	ee000007          	0xee000007
     ada:	01000007          	0x1000007
    for(i = (3*N); i < (4*N); ++i){
     ade:	5d00                	lw	s0,56(a0)
     ae0:	07ee                	slli	a5,a5,0x1b
     ae2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     ae4:	07f4                	addi	a3,sp,972
     ae6:	0000                	unimp
     ae8:	7f7d0003          	lb	zero,2039(s10)
    for(i = (3*N); i < (4*N); ++i){
     aec:	f49f 0007 f600      	0xf6000007f49f
    fg = polymult2(fq, N, g, N, 0);
     af2:	01000007          	0x1000007
     af6:	5d00                	lw	s0,56(a0)
     af8:	07f6                	slli	a5,a5,0x1d
     afa:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     afc:	0800                	addi	s0,sp,16
     afe:	0000                	unimp
     b00:	0001                	nop
     b02:	005f 0008 0600      	0x6000008005f
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b08:	0008                	0x8
     b0a:	0300                	addi	s0,sp,384
     b0c:	7f00                	flw	fs0,56(a4)
     b0e:	9f7f                	0x9f7f
    for(i = (4*N); i < (5*N); ++i){
     b10:	0806                	slli	a6,a6,0x1
     b12:	0000                	unimp
     b14:	0808                	addi	a0,sp,16
     b16:	0000                	unimp
     b18:	0001                	nop
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b1a:	085f 0008 1a00      	0x1a000008085f
     b20:	0008                	0x8
    for(i = (4*N); i < (5*N); ++i){
     b22:	0100                	addi	s0,sp,128
     b24:	5e00                	lw	s0,56(a2)
     b26:	081a                	slli	a6,a6,0x6
    for(i = (5*N); i < (6*N+1); ++i){
     b28:	0000                	unimp
     b2a:	081e                	slli	a6,a6,0x7
        random_keys[i] = polyR[i-(5*N)];
     b2c:	0000                	unimp
     b2e:	7f7e0003          	lb	zero,2039(t3)
     b32:	1e9f 0008 2200      	0x220000081e9f
    for(i = (5*N); i < (6*N+1); ++i){
     b38:	0008                	0x8
     b3a:	0100                	addi	s0,sp,128
     b3c:	5e00                	lw	s0,56(a2)
     b3e:	0822                	slli	a6,a6,0x8
}
     b40:	0000                	unimp
     b42:	0832                	slli	a6,a6,0xc
     b44:	0000                	unimp
     b46:	0001                	nop
     b48:	325d                	jal	4ee <polydiv+0xee>
     b4a:	0008                	0x8
     b4c:	3800                	fld	fs0,48(s0)
     b4e:	0008                	0x8
     b50:	0300                	addi	s0,sp,384
     b52:	7d00                	flw	fs0,56(a0)
     b54:	9f7f                	0x9f7f
     b56:	0838                	addi	a4,sp,24
     b58:	0000                	unimp
     b5a:	083a                	slli	a6,a6,0xe
     b5c:	0000                	unimp
     b5e:	0001                	nop
     b60:	3a5d                	jal	516 <polydiv+0x116>
     b62:	0008                	0x8
     b64:	4800                	lw	s0,16(s0)
     b66:	0008                	0x8
     b68:	0100                	addi	s0,sp,128
     b6a:	5f00                	lw	s0,56(a4)
     b6c:	0848                	addi	a0,sp,20
     b6e:	0000                	unimp
     b70:	084a                	slli	a6,a6,0x12
     b72:	0000                	unimp
     b74:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
     b78:	4a9f 0008 4c00      	0x4c0000084a9f
     b7e:	0008                	0x8
        polyR[i] = 0;
     b80:	0100                	addi	s0,sp,128
     b82:	5f00                	lw	s0,56(a4)
     b84:	084c                	addi	a1,sp,20
     b86:	0000                	unimp
     b88:	085c                	addi	a5,sp,20
    for(i = 1; i < N; ++i){
     b8a:	0000                	unimp
     b8c:	0001                	nop
        f[i] = 0;
     b8e:	5c5d                	li	s8,-9
     b90:	0008                	0x8
     b92:	6200                	flw	fs0,0(a2)
     b94:	0008                	0x8
     b96:	0300                	addi	s0,sp,384
     b98:	7d00                	flw	fs0,56(a0)
     b9a:	9f7f                	0x9f7f
        g[i] = 0;
     b9c:	0862                	slli	a6,a6,0x18
     b9e:	0000                	unimp
     ba0:	0864                	addi	s1,sp,28
     ba2:	0000                	unimp
     ba4:	0001                	nop
    for (i = N; i < 55; ++i ){
     ba6:	645d                	lui	s0,0x17
     ba8:	0008                	0x8
        random_keys[i] = f[i];
     baa:	7200                	flw	fs0,32(a2)
     bac:	0008                	0x8
     bae:	0100                	addi	s0,sp,128
     bb0:	5f00                	lw	s0,56(a4)
     bb2:	0872                	slli	a6,a6,0x1c
     bb4:	0000                	unimp
     bb6:	0874                	addi	a3,sp,28
     bb8:	0000                	unimp
    for(i = 0; i < N; ++i){
     bba:	7f7f0003          	lb	zero,2039(t5)
     bbe:	749f 0008 7600      	0x76000008749f
        random_keys[i] = g[i-N];
     bc4:	0008                	0x8
     bc6:	0100                	addi	s0,sp,128
     bc8:	5f00                	lw	s0,56(a4)
    for(i = N; i < (2*N); ++i){
     bca:	0876                	slli	a6,a6,0x1d
     bcc:	0000                	unimp
     bce:	088a                	slli	a7,a7,0x2
        random_keys[i] = fp[i-(2*N)];
     bd0:	0000                	unimp
     bd2:	0001                	nop
     bd4:	8a5e                	mv	s4,s7
     bd6:	0008                	0x8
     bd8:	9000                	0x9000
    for(i = (2*N); i < (3*N); ++i){
     bda:	0008                	0x8
     bdc:	0300                	addi	s0,sp,384
     bde:	7e00                	flw	fs0,56(a2)
        random_keys[i] = fq[i-(3*N)];
     be0:	9f7f                	0x9f7f
     be2:	0890                	addi	a2,sp,80
     be4:	0000                	unimp
     be6:	08aa                	slli	a7,a7,0xa
     be8:	0000                	unimp
     bea:	0001                	nop
     bec:	aa5e                	fsd	fs7,272(sp)
    for(i = (3*N); i < (4*N); ++i){
     bee:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     bf0:	ae00                	fsd	fs0,24(a2)
    for(i = (3*N); i < (4*N); ++i){
     bf2:	0008                	0x8
        fg[i] = fg[i]*p;
     bf4:	0300                	addi	s0,sp,384
    for(i = 0; i < (2*N-1); ++i){
     bf6:	7e00                	flw	fs0,56(a2)
     bf8:	9f7f                	0x9f7f
        fg[i] = fg[i]*p;
     bfa:	08ae                	slli	a7,a7,0xb
     bfc:	0000                	unimp
     bfe:	08b2                	slli	a7,a7,0xc
     c00:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     c02:	0001                	nop
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	b25e                	fsd	fs7,288(sp)
     c06:	0008                	0x8
     c08:	c200                	sw	s0,0(a2)
     c0a:	0008                	0x8
     c0c:	0100                	addi	s0,sp,128
     c0e:	5d00                	lw	s0,56(a0)
    for(i = (4*N); i < (5*N); ++i){
     c10:	08c2                	slli	a7,a7,0x10
     c12:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c14:	08c8                	addi	a0,sp,84
     c16:	0000                	unimp
     c18:	7f7d0003          	lb	zero,2039(s10)
     c1c:	c89f 0008 d600      	0xd6000008c89f
    for(i = (5*N); i < (6*N+1); ++i){
     c22:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     c24:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c26:	5d00                	lw	s0,56(a0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c28:	08d6                	slli	a7,a7,0x15
     c2a:	0000                	unimp
     c2c:	0908                	addi	a0,sp,144
     c2e:	0000                	unimp
     c30:	7f7d0003          	lb	zero,2039(s10)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c34:	089f 0009 0c00      	0xc000009089f
     c3a:	0009                	c.nop	2
     c3c:	0100                	addi	s0,sp,128
     c3e:	5d00                	lw	s0,56(a0)
     c40:	0920                	addi	s0,sp,152
     c42:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c44:	0924                	addi	s1,sp,152
     c46:	0000                	unimp
     c48:	0001                	nop
     c4a:	245e                	fld	fs0,464(sp)
     c4c:	0009                	c.nop	2
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	3200                	fld	fs0,32(a2)
    temp = polymult(public_key,N,random_val,48,q,0);
     c50:	0009                	c.nop	2
     c52:	0300                	addi	s0,sp,384
     c54:	7e00                	flw	fs0,56(a2)
     c56:	9f7f                	0x9f7f
     c58:	0932                	slli	s2,s2,0xc
     c5a:	0000                	unimp
     c5c:	0934                	addi	a3,sp,152
     c5e:	0000                	unimp
     c60:	0001                	nop
array_add(temp,message,48);
     c62:	005e                	c.slli	zero,0x17
     c64:	0000                	unimp
     c66:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     c68:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	a400                	fsd	fs0,8(s0)
     c6c:	de000007          	0xde000007
array_add(temp,message,48);
     c70:	01000007          	0x1000007
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c74:	5f00                	lw	s0,56(a4)
     c76:	090c                	addi	a1,sp,144
     c78:	0000                	unimp
     c7a:	0934                	addi	a3,sp,152
     c7c:	0000                	unimp
     c7e:	0001                	nop
     c80:	005f 0000 0000      	0x5f
    for(i = (2*N); i < (3*N); ++i){
     c86:	0000                	unimp
     c88:	a600                	fsd	fs0,8(a2)
     c8a:	0006                	c.slli	zero,0x1
     c8c:	d000                	sw	s0,32(s0)
}
     c8e:	02000007          	0x2000007
     c92:	8a00                	0x8a00
     c94:	de00                	sw	s0,56(a2)
     c96:	34000007          	0x34000007
     c9a:	0009                	c.nop	2
     c9c:	0200                	addi	s0,sp,256
        CT[i-(2*N)] = CT[i];
     c9e:	8a00                	0x8a00
	...
    for(i = (2*N); i < (3*N); ++i){
     ca8:	a600                	fsd	fs0,8(a2)
        CT[i-(2*N)] = CT[i];
     caa:	0006                	c.slli	zero,0x1
     cac:	d200                	sw	s0,32(a2)
    for(i = (2*N); i < (3*N); ++i){
     cae:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	8b00                	0x8b00
     cb4:	de00                	sw	s0,56(a2)
     cb6:	34000007          	0x34000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     cba:	0009                	c.nop	2
     cbc:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	8b00                	0x8b00
	...
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc8:	a600                	fsd	fs0,8(a2)
     cca:	0006                	c.slli	zero,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ccc:	c800                	sw	s0,16(s0)
     cce:	02000007          	0x2000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd2:	8600                	0x8600
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd4:	c800                	sw	s0,16(s0)
     cd6:	d2000007          	0xd2000007
     cda:	0d000007          	0xd000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cde:	8b00                	0x8b00
     ce0:	f300                	fsw	fs0,32(a4)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce2:	5c01                	li	s8,-32
     ce4:	2432                	fld	fs0,264(sp)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce6:	f0090f23          	sb	zero,-226(s2)
     cea:	1c1a                	slli	s8,s8,0x26
     cec:	07de                	slli	a5,a5,0x17
     cee:	0000                	unimp
     cf0:	0934                	addi	a3,sp,152
     cf2:	0000                	unimp
     cf4:	0002                	c.slli64	zero
     cf6:	0086                	slli	ra,ra,0x1
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     d00:	06a6                	slli	a3,a3,0x9
        if(a2[i] <= q/2)
     d02:	0000                	unimp
     d04:	07c4                	addi	s1,sp,964
     d06:	0000                	unimp
    for (i = 0; i < N; ++i){
     d08:	0002                	c.slli64	zero
     d0a:	0084                	addi	s1,sp,64
     d0c:	07c4                	addi	s1,sp,964
    c = polymult2(secret_key_fp,N,a2,N,0);
     d0e:	0000                	unimp
     d10:	07c8                	addi	a0,sp,964
     d12:	0000                	unimp
     d14:	000d                	c.nop	3
     d16:	0086                	slli	ra,ra,0x1
     d18:	325c01f3          	0x325c01f3
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d1c:	2324                	fld	fs1,64(a4)
     d1e:	1af0090f          	0x1af0090f
     d22:	c81c                	sw	a5,16(s0)
     d24:	d2000007          	0xd2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d28:	0f000007          	0xf000007
}
     d2c:	8b00                	0x8b00
     d2e:	f300                	fsw	fs0,32(a4)
     d30:	5c01                	li	s8,-32
     d32:	2432                	fld	fs0,264(sp)
     d34:	f0090f23          	sb	zero,-226(s2)
     d38:	311a                	fld	ft2,416(sp)
     d3a:	1c24                	addi	s1,sp,568
     d3c:	07de                	slli	a5,a5,0x17
     d3e:	0000                	unimp
     d40:	0934                	addi	a3,sp,152
        a2[i-(2*N)] = a2[i];
     d42:	0000                	unimp
     d44:	0002                	c.slli64	zero
     d46:	0084                	addi	s1,sp,64
	...
     d50:	06a6                	slli	a3,a3,0x9
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	0000                	unimp
        if(a2[i] <= q/2)
     d54:	07ca                	slli	a5,a5,0x12
     d56:	0000                	unimp
     d58:	0002                	c.slli64	zero
            a2[i] = (-1)*(q-a2[i]);
     d5a:	07ca0087          	0x7ca0087
     d5e:	0000                	unimp
    for (i = 0; i < N; ++i){
     d60:	07d2                	slli	a5,a5,0x14
     d62:	0000                	unimp
     d64:	008b000f          	0x8b000f
        c2[i-(2*N)] = c2[i];
     d68:	325c01f3          	0x325c01f3
     d6c:	2324                	fld	fs1,64(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6e:	1af0090f          	0x1af0090f
        c2[i-(2*N)] = c2[i];
     d72:	de1c1e33          	0xde1c1e33
    for(i = (2*N); i < ((2*N)+N); ++i){
     d76:	34000007          	0x34000007
  jal x0, default_exc_handler
     d7a:	0009                	c.nop	2
  mv  x1, x0
     d7c:	0200                	addi	s0,sp,256
     d7e:	8700                	0x8700
	...
  mv  x6, x1
     d88:	a600                	fsd	fs0,8(a2)
  mv  x7, x1
     d8a:	0006                	c.slli	zero,0x1
  mv  x8, x1
     d8c:	c600                	sw	s0,8(a2)
  mv  x9, x1
     d8e:	02000007          	0x2000007
  mv x11, x1
     d92:	8500                	0x8500
  mv x12, x1
     d94:	c600                	sw	s0,8(a2)
  mv x13, x1
     d96:	ca000007          	0xca000007
  mv x15, x1
     d9a:	0d000007          	0xd000007
  mv x17, x1
     d9e:	8700                	0x8700
  mv x18, x1
     da0:	f300                	fsw	fs0,32(a4)
  mv x19, x1
     da2:	5c01                	li	s8,-32
  mv x20, x1
     da4:	2432                	fld	fs0,264(sp)
  mv x21, x1
     da6:	f0090f23          	sb	zero,-226(s2)
  mv x23, x1
     daa:	1c1a                	slli	s8,s8,0x26
  mv x24, x1
     dac:	07ca                	slli	a5,a5,0x12
  mv x25, x1
     dae:	0000                	unimp
  mv x26, x1
     db0:	07d2                	slli	a5,a5,0x14
  mv x27, x1
     db2:	0000                	unimp
  mv x28, x1
     db4:	008b000f          	0x8b000f
  mv x30, x1
     db8:	325c01f3          	0x325c01f3
  la   x2, _stack_start
     dbc:	2324                	fld	fs1,64(a4)
     dbe:	1af0090f          	0x1af0090f
     dc2:	2432                	fld	fs0,264(sp)
  la x26, _bss_start
     dc4:	de1c                	sw	a5,56(a2)
     dc6:	34000007          	0x34000007
     dca:	0009                	c.nop	2
  la x27, _bss_end
     dcc:	0200                	addi	s0,sp,256
     dce:	8500                	0x8500
	...
  sw x0, 0(x26)
     dd8:	a800                	fsd	fs0,16(s0)
     dda:	0006                	c.slli	zero,0x1
  addi x26, x26, 4
     ddc:	b800                	fsd	fs0,48(s0)
  ble x26, x27, zero_loop
     dde:	02000007          	0x2000007
  addi x10, x0, 0
     de2:	7200                	flw	fs0,32(a2)
     de4:	b800                	fsd	fs0,48(s0)
  addi x11, x0, 0
     de6:	ce000007          	0xce000007
  jal x1, main
     dea:	02000007          	0x2000007
     dee:	8900                	0x8900
     df0:	ce00                	sw	s0,24(a2)
     df2:	d2000007          	0xd2000007
     df6:	0f000007          	0xf000007
     dfa:	8b00                	0x8b00
     dfc:	f300                	fsw	fs0,32(a4)
     dfe:	5c01                	li	s8,-32
     e00:	2432                	fld	fs0,264(sp)
     e02:	f0090f23          	sb	zero,-226(s2)
     e06:	351a                	fld	fa0,416(sp)
     e08:	1c1e                	slli	s8,s8,0x27
     e0a:	07de                	slli	a5,a5,0x17
     e0c:	0000                	unimp
     e0e:	0934                	addi	a3,sp,152
     e10:	0000                	unimp
     e12:	0002                	c.slli64	zero
     e14:	0072                	c.slli	zero,0x1c
	...
     e1e:	0732                	slli	a4,a4,0xc
     e20:	0000                	unimp
     e22:	075a                	slli	a4,a4,0x16
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	f65a                	fsw	fs6,44(sp)
     e2a:	3a000007          	0x3a000007
     e2e:	0008                	0x8
     e30:	0100                	addi	s0,sp,128
     e32:	5a00                	lw	s0,48(a2)
	...
     e3c:	075c                	addi	a5,sp,900
     e3e:	0000                	unimp
     e40:	0776                	slli	a4,a4,0x1d
     e42:	0000                	unimp
     e44:	0001                	nop
     e46:	3a5a                	fld	fs4,432(sp)
     e48:	0008                	0x8
     e4a:	6400                	flw	fs0,8(s0)
     e4c:	0008                	0x8
     e4e:	0100                	addi	s0,sp,128
     e50:	5a00                	lw	s0,48(a2)
	...
     e5a:	0778                	addi	a4,sp,908
     e5c:	0000                	unimp
     e5e:	079a                	slli	a5,a5,0x6
     e60:	0000                	unimp
     e62:	0001                	nop
     e64:	645a                	flw	fs0,148(sp)
     e66:	0008                	0x8
     e68:	ca00                	sw	s0,16(a2)
     e6a:	0008                	0x8
     e6c:	0100                	addi	s0,sp,128
     e6e:	5a00                	lw	s0,48(a2)
	...
     e78:	06a8                	addi	a0,sp,840
     e7a:	0000                	unimp
     e7c:	06c6                	slli	a3,a3,0x11
     e7e:	0000                	unimp
     e80:	0002                	c.slli64	zero
     e82:	9f31                	0x9f31
     e84:	06ca                	slli	a3,a3,0x12
     e86:	0000                	unimp
     e88:	0700                	addi	s0,sp,896
     e8a:	0000                	unimp
     e8c:	0002                	c.slli64	zero
     e8e:	9f31                	0x9f31
     e90:	079a                	slli	a5,a5,0x6
     e92:	0000                	unimp
     e94:	07b0                	addi	a2,sp,968
     e96:	0000                	unimp
     e98:	0001                	nop
     e9a:	ca5e                	sw	s7,20(sp)
     e9c:	0008                	0x8
     e9e:	f400                	fsw	fs0,40(s0)
     ea0:	0008                	0x8
     ea2:	0100                	addi	s0,sp,128
     ea4:	5e00                	lw	s0,56(a2)
     ea6:	0908                	addi	a0,sp,144
     ea8:	0000                	unimp
     eaa:	0920                	addi	s0,sp,152
     eac:	0000                	unimp
     eae:	0001                	nop
     eb0:	005e                	c.slli	zero,0x17
     eb2:	0000                	unimp
     eb4:	0000                	unimp
     eb6:	0000                	unimp
     eb8:	a600                	fsd	fs0,8(a2)
     eba:	0006                	c.slli	zero,0x1
     ebc:	c200                	sw	s0,0(a2)
     ebe:	01000007          	0x1000007
     ec2:	6300                	flw	fs0,0(a4)
     ec4:	07c2                	slli	a5,a5,0x10
     ec6:	0000                	unimp
     ec8:	07de                	slli	a5,a5,0x17
     eca:	0000                	unimp
     ecc:	0006                	c.slli	zero,0x1
     ece:	315c01f3          	0x315c01f3
     ed2:	9f1c                	0x9f1c
     ed4:	07de                	slli	a5,a5,0x17
     ed6:	0000                	unimp
     ed8:	0934                	addi	a3,sp,152
     eda:	0000                	unimp
     edc:	0001                	nop
     ede:	00000063          	beqz	zero,ede <memset+0x12>
     ee2:	0000                	unimp
     ee4:	0000                	unimp
     ee6:	a600                	fsd	fs0,8(a2)
     ee8:	0006                	c.slli	zero,0x1
     eea:	c200                	sw	s0,0(a2)
     eec:	01000007          	0x1000007
     ef0:	6300                	flw	fs0,0(a4)
     ef2:	07c2                	slli	a5,a5,0x10
     ef4:	0000                	unimp
     ef6:	07de                	slli	a5,a5,0x17
     ef8:	0000                	unimp
     efa:	0006                	c.slli	zero,0x1
     efc:	315c01f3          	0x315c01f3
     f00:	9f1c                	0x9f1c
     f02:	07de                	slli	a5,a5,0x17
     f04:	0000                	unimp
     f06:	0934                	addi	a3,sp,152
     f08:	0000                	unimp
     f0a:	0001                	nop
     f0c:	00000063          	beqz	zero,f0c <memset+0x40>
     f10:	0000                	unimp
     f12:	0000                	unimp
     f14:	a600                	fsd	fs0,8(a2)
     f16:	0006                	c.slli	zero,0x1
     f18:	c200                	sw	s0,0(a2)
     f1a:	01000007          	0x1000007
     f1e:	6300                	flw	fs0,0(a4)
     f20:	07c2                	slli	a5,a5,0x10
     f22:	0000                	unimp
     f24:	07de                	slli	a5,a5,0x17
     f26:	0000                	unimp
     f28:	0006                	c.slli	zero,0x1
     f2a:	315c01f3          	0x315c01f3
     f2e:	9f1c                	0x9f1c
     f30:	07de                	slli	a5,a5,0x17
     f32:	0000                	unimp
     f34:	0934                	addi	a3,sp,152
     f36:	0000                	unimp
     f38:	0001                	nop
     f3a:	00000063          	beqz	zero,f3a <memset+0x6e>
     f3e:	0000                	unimp
     f40:	0000                	unimp
     f42:	a600                	fsd	fs0,8(a2)
     f44:	0006                	c.slli	zero,0x1
     f46:	c200                	sw	s0,0(a2)
     f48:	01000007          	0x1000007
     f4c:	6300                	flw	fs0,0(a4)
     f4e:	07c2                	slli	a5,a5,0x10
     f50:	0000                	unimp
     f52:	07de                	slli	a5,a5,0x17
     f54:	0000                	unimp
     f56:	0006                	c.slli	zero,0x1
     f58:	315c01f3          	0x315c01f3
     f5c:	9f1c                	0x9f1c
     f5e:	07de                	slli	a5,a5,0x17
     f60:	0000                	unimp
     f62:	0934                	addi	a3,sp,152
     f64:	0000                	unimp
     f66:	0001                	nop
     f68:	00000063          	beqz	zero,f68 <memset+0x9c>
     f6c:	0000                	unimp
     f6e:	0000                	unimp
     f70:	a600                	fsd	fs0,8(a2)
     f72:	0006                	c.slli	zero,0x1
int main(){
     f74:	c200                	sw	s0,0(a2)
     f76:	01000007          	0x1000007
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f7a:	6300                	flw	fs0,0(a4)
     f7c:	07c2                	slli	a5,a5,0x10
     f7e:	0000                	unimp
     f80:	07de                	slli	a5,a5,0x17
     f82:	0000                	unimp
     f84:	0006                	c.slli	zero,0x1
int main(){
     f86:	315c01f3          	0x315c01f3
     f8a:	9f1c                	0x9f1c
     f8c:	07de                	slli	a5,a5,0x17
     f8e:	0000                	unimp
     f90:	0934                	addi	a3,sp,152
     f92:	0000                	unimp
     f94:	0001                	nop
    resultkon[0] = 0xaaaaaaa0;
     f96:	00000063          	beqz	zero,f96 <main+0x22>
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f9a:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     f9c:	0000                	unimp
     f9e:	a600                	fsd	fs0,8(a2)
     fa0:	0006                	c.slli	zero,0x1
     fa2:	c200                	sw	s0,0(a2)
     fa4:	01000007          	0x1000007
    keys = generate_keys(N, p, q);
     fa8:	6300                	flw	fs0,0(a4)
     faa:	07c2                	slli	a5,a5,0x10
     fac:	0000                	unimp
     fae:	07de                	slli	a5,a5,0x17
     fb0:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     fb2:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xaaaaaaa1;
     fb4:	315c01f3          	0x315c01f3
    keys = generate_keys(N, p, q);
     fb8:	9f1c                	0x9f1c
    resultkon[0] = 0xaaaaaaa1;
     fba:	07de                	slli	a5,a5,0x17
     fbc:	0000                	unimp
    for(i = 0; i < N; ++i){
     fbe:	0934                	addi	a3,sp,152
     fc0:	0000                	unimp
        secret_key_f[i] = keys[i];
     fc2:	0001                	nop
     fc4:	00000063          	beqz	zero,fc4 <main+0x50>
     fc8:	0000                	unimp
     fca:	0000                	unimp
     fcc:	a600                	fsd	fs0,8(a2)
    for(i = 0; i < N; ++i){
     fce:	0006                	c.slli	zero,0x1
     fd0:	c200                	sw	s0,0(a2)
     fd2:	01000007          	0x1000007
    for(i = N; i < (2*N); ++i){
     fd6:	6300                	flw	fs0,0(a4)
     fd8:	07c2                	slli	a5,a5,0x10
     fda:	0000                	unimp
     fdc:	07de                	slli	a5,a5,0x17
     fde:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     fe0:	0006                	c.slli	zero,0x1
     fe2:	315c01f3          	0x315c01f3
     fe6:	9f1c                	0x9f1c
     fe8:	07de                	slli	a5,a5,0x17
    for(i = (2*N); i < (3*N); ++i){
     fea:	0000                	unimp
     fec:	0934                	addi	a3,sp,152
    for(i = (3*N); i < (4*N); ++i){
     fee:	0000                	unimp
     ff0:	0001                	nop
     ff2:	00000063          	beqz	zero,ff2 <main+0x7e>
     ff6:	0000                	unimp
     ff8:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
     ffa:	0000                	unimp
     ffc:	0004                	0x4
     ffe:	0400                	addi	s0,sp,512
    1000:	0005                	c.nop	1
    1002:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
    1004:	5a00                	lw	s0,48(a2)
    1006:	0504                	addi	s1,sp,640
    1008:	0000                	unimp
    100a:	0650                	addi	a2,sp,772
    100c:	0000                	unimp
    100e:	0004                	0x4
        ring_poly[i-(5*N)] = keys[i];
    1010:	9f5a01f3          	0x9f5a01f3
	...
    for(i = (5*N); i < (6*N+1); ++i){
    101c:	0400                	addi	s0,sp,512
    resultkon[0] = 0xbbbbbbb0;
    101e:	0000                	unimp
    1020:	0504                	addi	s1,sp,640
    1022:	0000                	unimp
    1024:	0001                	nop
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	0005045b          	0x5045b
    102a:	2200                	fld	fs0,0(a2)
    102c:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb1;
    102e:	0100                	addi	s0,sp,128
    1030:	5900                	lw	s0,48(a0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1032:	0522                	slli	a0,a0,0x8
    1034:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    1036:	0542                	slli	a0,a0,0x10
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1038:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    103a:	018a0003          	lb	zero,24(s4)
    resultkon[0] = 0xccccccc0;
    103e:	429f 0005 5000      	0x50000005429f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1044:	0005                	c.nop	1
    resultkon[0] = 0xccccccc0;
    1046:	0400                	addi	s0,sp,512
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1048:	f300                	fsw	fs0,32(a4)
    104a:	5b01                	li	s6,-32
    104c:	509f 0005 3e00      	0x3e000005509f
    1052:	0006                	c.slli	zero,0x1
    1054:	0100                	addi	s0,sp,128
    1056:	5900                	lw	s0,48(a0)
    1058:	063e                	slli	a2,a2,0xf
    105a:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    105c:	0650                	addi	a2,sp,772
    105e:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    1060:	018a0003          	lb	zero,24(s4)
    resultkon[0] = 0xccccccc1;	
    1064:	009f 0000 0000      	0x9f
            resultkon[0] = 0xDEDEDEDE;
    106a:	0000                	unimp
    for(i = 0; i < 32; ++i){
    106c:	0000                	unimp
    106e:	0004                	0x4
        if(!(message[i] == Dec_Message[i])){
    1070:	7e00                	flw	fs0,56(a2)
    1072:	0004                	0x4
    1074:	0100                	addi	s0,sp,128
    1076:	5c00                	lw	s0,56(s0)
    1078:	047e                	slli	s0,s0,0x1f
    107a:	0000                	unimp
    107c:	0486                	slli	s1,s1,0x1
    107e:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    1080:	0004                	0x4
    1082:	9f5c01f3          	0x9f5c01f3
    1086:	0486                	slli	s1,s1,0x1
    1088:	0000                	unimp
}
    108a:	04e6                	slli	s1,s1,0x19
    108c:	0000                	unimp
    108e:	0001                	nop
    1090:	e65c                	fsw	fa5,12(a2)
    1092:	0004                	0x4
    1094:	5000                	lw	s0,32(s0)
    1096:	0006                	c.slli	zero,0x1
    1098:	0400                	addi	s0,sp,512
    109a:	f300                	fsw	fs0,32(a4)
    109c:	5c01                	li	s8,-32
    109e:	009f 0000 0000      	0x9f
    for(i = 0; i < 32; ++i){
    10a4:	0000                	unimp
    10a6:	0000                	unimp
    10a8:	0004                	0x4
    10aa:	5a00                	lw	s0,48(a2)
    10ac:	0004                	0x4
    10ae:	0100                	addi	s0,sp,128
    10b0:	5d00                	lw	s0,56(a0)
    10b2:	045a                	slli	s0,s0,0x16
    10b4:	0000                	unimp
    10b6:	0534                	addi	a3,sp,648
    10b8:	0000                	unimp
    10ba:	0001                	nop
    10bc:	00053463          	0x53463
    10c0:	5000                	lw	s0,32(s0)
    10c2:	0005                	c.nop	1
    10c4:	0400                	addi	s0,sp,512
    10c6:	f300                	fsw	fs0,32(a4)
    10c8:	5d01                	li	s10,-32
    10ca:	509f 0005 5000      	0x50000005509f
    10d0:	0006                	c.slli	zero,0x1
    10d2:	0100                	addi	s0,sp,128
    10d4:	6300                	flw	fs0,0(a4)
	...
    10de:	0400                	addi	s0,sp,512
    10e0:	0000                	unimp
    10e2:	0458                	addi	a4,sp,516
    10e4:	0000                	unimp
    10e6:	0001                	nop
    10e8:	585e                	lw	a6,244(sp)
    10ea:	0004                	0x4
    10ec:	3200                	fld	fs0,32(a2)
    10ee:	0005                	c.nop	1
    10f0:	0100                	addi	s0,sp,128
    10f2:	6200                	flw	fs0,0(a2)
    10f4:	0532                	slli	a0,a0,0xc
    10f6:	0000                	unimp
    10f8:	0550                	addi	a2,sp,644
    10fa:	0000                	unimp
    10fc:	0004                	0x4
    10fe:	9f5e01f3          	0x9f5e01f3
    1102:	0550                	addi	a2,sp,644
    1104:	0000                	unimp
    1106:	0650                	addi	a2,sp,772
    1108:	0000                	unimp
    110a:	0001                	nop
    110c:	0062                	c.slli	zero,0x18
    110e:	0000                	unimp
    1110:	0000                	unimp
    1112:	0000                	unimp
    1114:	7e00                	flw	fs0,56(a2)
    1116:	0004                	0x4
    1118:	8600                	0x8600
    111a:	0004                	0x4
    111c:	0100                	addi	s0,sp,128
    111e:	6800                	flw	fs0,16(s0)
    1120:	04e6                	slli	s1,s1,0x19
    1122:	0000                	unimp
    1124:	053e                	slli	a0,a0,0xf
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	5068                	lw	a0,100(s0)
    112c:	0005                	c.nop	1
    112e:	5000                	lw	s0,32(s0)
    1130:	0006                	c.slli	zero,0x1
    1132:	0100                	addi	s0,sp,128
    1134:	6800                	flw	fs0,16(s0)
	...
    113e:	0504                	addi	s1,sp,640
    1140:	0000                	unimp
    1142:	050a                	slli	a0,a0,0x2
    1144:	0000                	unimp
    1146:	0001                	nop
    1148:	505f 0005 5800      	0x58000005505f
    114e:	0005                	c.nop	1
    1150:	0100                	addi	s0,sp,128
    1152:	5f00                	lw	s0,56(a4)
	...
    115c:	0454                	addi	a3,sp,516
    115e:	0000                	unimp
    1160:	045a                	slli	s0,s0,0x16
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
    1166:	9f30                	0x9f30
    1168:	045a                	slli	s0,s0,0x16
    116a:	0000                	unimp
    116c:	0468                	addi	a0,sp,524
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	685d                	lui	a6,0x17
    1174:	0004                	0x4
    1176:	6c00                	flw	fs0,24(s0)
    1178:	0004                	0x4
    117a:	0100                	addi	s0,sp,128
    117c:	5f00                	lw	s0,56(a4)
    117e:	046c                	addi	a1,sp,524
    1180:	0000                	unimp
    1182:	0486                	slli	s1,s1,0x1
    1184:	0000                	unimp
    1186:	0001                	nop
    1188:	8664                	0x8664
    118a:	0004                	0x4
    118c:	9c00                	0x9c00
    118e:	0004                	0x4
    1190:	0100                	addi	s0,sp,128
    1192:	5d00                	lw	s0,56(a0)
    1194:	049c                	addi	a5,sp,576
    1196:	0000                	unimp
    1198:	04a2                	slli	s1,s1,0x8
    119a:	0000                	unimp
    119c:	7f7d0003          	lb	zero,2039(s10)
    11a0:	a29f 0004 be00      	0xbe000004a29f
    11a6:	0004                	0x4
    11a8:	0100                	addi	s0,sp,128
    11aa:	5d00                	lw	s0,56(a0)
    11ac:	04be                	slli	s1,s1,0xf
    11ae:	0000                	unimp
    11b0:	04c4                	addi	s1,sp,580
    11b2:	0000                	unimp
    11b4:	7f7d0003          	lb	zero,2039(s10)
    11b8:	c49f 0004 ca00      	0xca000004c49f
    11be:	0004                	0x4
    11c0:	0100                	addi	s0,sp,128
    11c2:	5d00                	lw	s0,56(a0)
    11c4:	04ca                	slli	s1,s1,0x12
    11c6:	0000                	unimp
    11c8:	04e0                	addi	s0,sp,588
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	e05f 0004 f400      	0xf4000004e05f
    11d4:	0004                	0x4
    11d6:	0100                	addi	s0,sp,128
    11d8:	6400                	flw	fs0,8(s0)
    11da:	04f4                	addi	a3,sp,588
    11dc:	0000                	unimp
    11de:	0504                	addi	s1,sp,640
    11e0:	0000                	unimp
    11e2:	0001                	nop
    11e4:	125f 0005 2200      	0x22000005125f
    11ea:	0005                	c.nop	1
    11ec:	0100                	addi	s0,sp,128
    11ee:	5f00                	lw	s0,56(a4)
    11f0:	0522                	slli	a0,a0,0x8
    11f2:	0000                	unimp
    11f4:	0530                	addi	a2,sp,648
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	5e59                	li	t3,-10
    11fc:	0005                	c.nop	1
    11fe:	6200                	flw	fs0,0(a2)
    1200:	0005                	c.nop	1
    1202:	0200                	addi	s0,sp,256
    1204:	3000                	fld	fs0,32(s0)
    1206:	629f 0005 6800      	0x68000005629f
    120c:	0005                	c.nop	1
    120e:	0100                	addi	s0,sp,128
    1210:	5e00                	lw	s0,56(a2)
    1212:	0574                	addi	a3,sp,652
    1214:	0000                	unimp
    1216:	0578                	addi	a4,sp,652
    1218:	0000                	unimp
    121a:	0002                	c.slli64	zero
    121c:	9f30                	0x9f30
    121e:	0578                	addi	a4,sp,652
    1220:	0000                	unimp
    1222:	0580                	addi	s0,sp,704
    1224:	0000                	unimp
    1226:	0001                	nop
    1228:	805d                	srli	s0,s0,0x17
    122a:	0005                	c.nop	1
    122c:	8800                	0x8800
    122e:	0005                	c.nop	1
    1230:	0100                	addi	s0,sp,128
    1232:	5f00                	lw	s0,56(a4)
    1234:	0588                	addi	a0,sp,704
    1236:	0000                	unimp
    1238:	00000593          	li	a1,0
    123c:	0001                	nop
    123e:	945d                	srai	s0,s0,0x37
    1240:	0005                	c.nop	1
    1242:	9800                	0x9800
    1244:	0005                	c.nop	1
    1246:	0200                	addi	s0,sp,256
    1248:	3000                	fld	fs0,32(s0)
    124a:	989f 0005 9e00      	0x9e000005989f
    1250:	0005                	c.nop	1
    1252:	0100                	addi	s0,sp,128
    1254:	5e00                	lw	s0,56(a2)
    1256:	059e                	slli	a1,a1,0x7
    1258:	0000                	unimp
    125a:	05ae                	slli	a1,a1,0xb
    125c:	0000                	unimp
    125e:	0001                	nop
    1260:	ae5f 0005 b200      	0xb2000005ae5f
    1266:	0005                	c.nop	1
    1268:	0100                	addi	s0,sp,128
    126a:	5e00                	lw	s0,56(a2)
    126c:	05b2                	slli	a1,a1,0xc
    126e:	0000                	unimp
    1270:	05bc                	addi	a5,sp,712
    1272:	0000                	unimp
    1274:	7f7e0003          	lb	zero,2039(t3)
    1278:	bc9f 0005 be00      	0xbe000005bc9f
    127e:	0005                	c.nop	1
    1280:	0100                	addi	s0,sp,128
    1282:	5e00                	lw	s0,56(a2)
    1284:	05be                	slli	a1,a1,0xf
    1286:	0000                	unimp
    1288:	05ce                	slli	a1,a1,0x13
    128a:	0000                	unimp
    128c:	0001                	nop
    128e:	ce5d                	beqz	a2,134c <_bss_start+0x10c>
    1290:	0005                	c.nop	1
    1292:	d400                	sw	s0,40(s0)
    1294:	0005                	c.nop	1
    1296:	0300                	addi	s0,sp,384
    1298:	7d00                	flw	fs0,56(a0)
    129a:	9f7f                	0x9f7f
    129c:	05d4                	addi	a3,sp,708
    129e:	0000                	unimp
    12a0:	05d6                	slli	a1,a1,0x15
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	d65d                	beqz	a2,1254 <_bss_start+0x14>
    12a8:	0005                	c.nop	1
    12aa:	e200                	fsw	fs0,0(a2)
    12ac:	0005                	c.nop	1
    12ae:	0100                	addi	s0,sp,128
    12b0:	5f00                	lw	s0,56(a4)
    12b2:	05e2                	slli	a1,a1,0x18
    12b4:	0000                	unimp
    12b6:	05ea                	slli	a1,a1,0x1a
    12b8:	0000                	unimp
    12ba:	7f7f0003          	lb	zero,2039(t5)
    12be:	ea9f 0005 ec00      	0xec000005ea9f
    12c4:	0005                	c.nop	1
    12c6:	0100                	addi	s0,sp,128
    12c8:	5f00                	lw	s0,56(a4)
    12ca:	05ec                	addi	a1,sp,716
    12cc:	0000                	unimp
    12ce:	05fc                	addi	a5,sp,716
    12d0:	0000                	unimp
    12d2:	0001                	nop
    12d4:	fc5d                	bnez	s0,1292 <_bss_start+0x52>
    12d6:	0005                	c.nop	1
    12d8:	0200                	addi	s0,sp,256
    12da:	0006                	c.slli	zero,0x1
    12dc:	0300                	addi	s0,sp,384
    12de:	7d00                	flw	fs0,56(a0)
    12e0:	9f7f                	0x9f7f
    12e2:	0602                	c.slli64	a2
    12e4:	0000                	unimp
    12e6:	0604                	addi	s1,sp,768
    12e8:	0000                	unimp
    12ea:	0001                	nop
    12ec:	045d                	addi	s0,s0,23
    12ee:	0006                	c.slli	zero,0x1
    12f0:	0800                	addi	s0,sp,16
    12f2:	0006                	c.slli	zero,0x1
    12f4:	0100                	addi	s0,sp,128
    12f6:	5e00                	lw	s0,56(a2)
    12f8:	0608                	addi	a0,sp,768
    12fa:	0000                	unimp
    12fc:	0612                	slli	a2,a2,0x4
    12fe:	0000                	unimp
    1300:	7f7e0003          	lb	zero,2039(t3)
    1304:	129f 0006 1400      	0x14000006129f
    130a:	0006                	c.slli	zero,0x1
    130c:	0100                	addi	s0,sp,128
    130e:	5e00                	lw	s0,56(a2)
    1310:	0614                	addi	a3,sp,768
    1312:	0000                	unimp
    1314:	061a                	slli	a2,a2,0x6
    1316:	0000                	unimp
    1318:	0001                	nop
    131a:	1a5f 0006 2c00      	0x2c0000061a5f
    1320:	0006                	c.slli	zero,0x1
    1322:	0100                	addi	s0,sp,128
    1324:	5d00                	lw	s0,56(a0)
    1326:	062c                	addi	a1,sp,776
    1328:	0000                	unimp
    132a:	063a                	slli	a2,a2,0xe
    132c:	0000                	unimp
    132e:	0001                	nop
    1330:	3a5f 0006 3c00      	0x3c0000063a5f
    1336:	0006                	c.slli	zero,0x1
    1338:	0300                	addi	s0,sp,384
    133a:	7f00                	flw	fs0,56(a4)
    133c:	9f7f                	0x9f7f
    133e:	063c                	addi	a5,sp,776
    1340:	0000                	unimp
    1342:	063e                	slli	a2,a2,0xf
    1344:	0000                	unimp
    1346:	0001                	nop
    1348:	3e5f 0006 5000      	0x500000063e5f
    134e:	0006                	c.slli	zero,0x1
    1350:	0100                	addi	s0,sp,128
    1352:	5900                	lw	s0,48(a0)
	...
    135c:	0504                	addi	s1,sp,640
    135e:	0000                	unimp
    1360:	0512                	slli	a0,a0,0x4
    1362:	0000                	unimp
    1364:	0001                	nop
    1366:	505e                	0x505e
    1368:	0005                	c.nop	1
    136a:	5400                	lw	s0,40(s0)
    136c:	0005                	c.nop	1
    136e:	0100                	addi	s0,sp,128
    1370:	5e00                	lw	s0,56(a2)
	...
    137a:	0526                	slli	a0,a0,0x9
    137c:	0000                	unimp
    137e:	0550                	addi	a2,sp,644
    1380:	0000                	unimp
    1382:	0006                	c.slli	zero,0x1
    1384:	0016f003          	0x16f003
    1388:	9f00                	0x9f00
	...
    1392:	0452                	slli	s0,s0,0x14
    1394:	0000                	unimp
    1396:	0538                	addi	a4,sp,648
    1398:	0000                	unimp
    139a:	0002                	c.slli64	zero
    139c:	0085                	addi	ra,ra,1
    139e:	0550                	addi	a2,sp,644
    13a0:	0000                	unimp
    13a2:	0650                	addi	a2,sp,772
    13a4:	0000                	unimp
    13a6:	0002                	c.slli64	zero
    13a8:	0085                	addi	ra,ra,1
	...
    13b2:	0452                	slli	s0,s0,0x14
    13b4:	0000                	unimp
    13b6:	053c                	addi	a5,sp,648
    13b8:	0000                	unimp
    13ba:	0002                	c.slli64	zero
    13bc:	05500087          	0x5500087
    13c0:	0000                	unimp
    13c2:	0650                	addi	a2,sp,772
    13c4:	0000                	unimp
    13c6:	0002                	c.slli64	zero
    13c8:	00000087          	0x87
    13cc:	0000                	unimp
    13ce:	0000                	unimp
    13d0:	0000                	unimp
    13d2:	0574                	addi	a3,sp,652
    13d4:	0000                	unimp
    13d6:	0592                	slli	a1,a1,0x4
    13d8:	0000                	unimp
    13da:	0001                	nop
    13dc:	be5a                	fsd	fs6,312(sp)
    13de:	0005                	c.nop	1
    13e0:	0400                	addi	s0,sp,512
    13e2:	0006                	c.slli	zero,0x1
    13e4:	0100                	addi	s0,sp,128
    13e6:	5a00                	lw	s0,48(a2)
	...
    13f0:	0452                	slli	s0,s0,0x14
    13f2:	0000                	unimp
    13f4:	053a                	slli	a0,a0,0xe
    13f6:	0000                	unimp
    13f8:	0002                	c.slli64	zero
    13fa:	0086                	slli	ra,ra,0x1
    13fc:	053a                	slli	a0,a0,0xe
    13fe:	0000                	unimp
    1400:	053c                	addi	a5,sp,648
    1402:	0000                	unimp
    1404:	000c                	0xc
    1406:	018a0087          	0x18a0087
    140a:	2432                	fld	fs0,264(sp)
    140c:	f0090f23          	sb	zero,-226(s2)
    1410:	1c1a                	slli	s8,s8,0x26
    1412:	0550                	addi	a2,sp,644
    1414:	0000                	unimp
    1416:	0650                	addi	a2,sp,772
    1418:	0000                	unimp
    141a:	0002                	c.slli64	zero
    141c:	0086                	slli	ra,ra,0x1
	...
    1426:	0454                	addi	a3,sp,516
    1428:	0000                	unimp
    142a:	052a                	slli	a0,a0,0xa
    142c:	0000                	unimp
    142e:	0002                	c.slli64	zero
    1430:	0072                	c.slli	zero,0x1c
    1432:	052a                	slli	a0,a0,0xa
    1434:	0000                	unimp
    1436:	0544                	addi	s1,sp,644
    1438:	0000                	unimp
    143a:	0002                	c.slli64	zero
    143c:	0550008b          	0x550008b
    1440:	0000                	unimp
    1442:	0650                	addi	a2,sp,772
    1444:	0000                	unimp
    1446:	0002                	c.slli64	zero
    1448:	0072                	c.slli	zero,0x1c
	...
    1452:	0452                	slli	s0,s0,0x14
    1454:	0000                	unimp
    1456:	0542                	slli	a0,a0,0x10
    1458:	0000                	unimp
    145a:	0001                	nop
    145c:	426a                	lw	tp,152(sp)
    145e:	0005                	c.nop	1
    1460:	5000                	lw	s0,32(s0)
    1462:	0005                	c.nop	1
    1464:	0600                	addi	s0,sp,768
    1466:	f300                	fsw	fs0,32(a4)
    1468:	5b01                	li	s6,-32
    146a:	1c31                	addi	s8,s8,-20
    146c:	509f 0005 5000      	0x50000005509f
    1472:	0006                	c.slli	zero,0x1
    1474:	0100                	addi	s0,sp,128
    1476:	6a00                	flw	fs0,16(a2)
	...
    1480:	0452                	slli	s0,s0,0x14
    1482:	0000                	unimp
    1484:	0542                	slli	a0,a0,0x10
    1486:	0000                	unimp
    1488:	0001                	nop
    148a:	426a                	lw	tp,152(sp)
    148c:	0005                	c.nop	1
    148e:	5000                	lw	s0,32(s0)
    1490:	0005                	c.nop	1
    1492:	0600                	addi	s0,sp,768
    1494:	f300                	fsw	fs0,32(a4)
    1496:	5b01                	li	s6,-32
    1498:	1c31                	addi	s8,s8,-20
    149a:	509f 0005 5000      	0x50000005509f
    14a0:	0006                	c.slli	zero,0x1
    14a2:	0100                	addi	s0,sp,128
    14a4:	6a00                	flw	fs0,16(a2)
	...
    14ae:	0452                	slli	s0,s0,0x14
    14b0:	0000                	unimp
    14b2:	0542                	slli	a0,a0,0x10
    14b4:	0000                	unimp
    14b6:	0001                	nop
    14b8:	426a                	lw	tp,152(sp)
    14ba:	0005                	c.nop	1
    14bc:	5000                	lw	s0,32(s0)
    14be:	0005                	c.nop	1
    14c0:	0600                	addi	s0,sp,768
    14c2:	f300                	fsw	fs0,32(a4)
    14c4:	5b01                	li	s6,-32
    14c6:	1c31                	addi	s8,s8,-20
    14c8:	509f 0005 5000      	0x50000005509f
    14ce:	0006                	c.slli	zero,0x1
    14d0:	0100                	addi	s0,sp,128
    14d2:	6a00                	flw	fs0,16(a2)
	...
    14dc:	0452                	slli	s0,s0,0x14
    14de:	0000                	unimp
    14e0:	046c                	addi	a1,sp,524
    14e2:	0000                	unimp
    14e4:	0001                	nop
    14e6:	6c64                	flw	fs1,92(s0)
    14e8:	0004                	0x4
    14ea:	8600                	0x8600
    14ec:	0004                	0x4
    14ee:	0300                	addi	s0,sp,384
    14f0:	8300                	0x8300
    14f2:	9f7f                	0x9f7f
    14f4:	0486                	slli	s1,s1,0x1
    14f6:	0000                	unimp
    14f8:	04e0                	addi	s0,sp,588
    14fa:	0000                	unimp
    14fc:	0001                	nop
    14fe:	e064                	fsw	fs1,68(s0)
    1500:	0004                	0x4
    1502:	3400                	fld	fs0,40(s0)
    1504:	0005                	c.nop	1
    1506:	0300                	addi	s0,sp,384
    1508:	8300                	0x8300
    150a:	9f7f                	0x9f7f
    150c:	0534                	addi	a3,sp,648
    150e:	0000                	unimp
    1510:	0550                	addi	a2,sp,644
    1512:	0000                	unimp
    1514:	0006                	c.slli	zero,0x1
    1516:	315d01f3          	0x315d01f3
    151a:	9f1c                	0x9f1c
    151c:	0550                	addi	a2,sp,644
    151e:	0000                	unimp
    1520:	0650                	addi	a2,sp,772
    1522:	0000                	unimp
    1524:	7f830003          	lb	zero,2040(t1)
    1528:	009f 0000 0000      	0x9f
    152e:	0000                	unimp
    1530:	9a00                	0x9a00
    1532:	0002                	c.slli64	zero
    1534:	0a00                	addi	s0,sp,272
    1536:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    153a:	5a00                	lw	s0,48(a2)
    153c:	030a                	slli	t1,t1,0x2
    153e:	0000                	unimp
    1540:	0326                	slli	t1,t1,0x9
    1542:	0000                	unimp
    1544:	0004                	0x4
    1546:	9f5a01f3          	0x9f5a01f3
    154a:	0326                	slli	t1,t1,0x9
    154c:	0000                	unimp
    154e:	035e                	slli	t1,t1,0x17
    1550:	0000                	unimp
    1552:	0001                	nop
    1554:	5e5a                	lw	t3,180(sp)
    1556:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    155a:	0004                	0x4
    155c:	0400                	addi	s0,sp,512
    155e:	f300                	fsw	fs0,32(a4)
    1560:	5a01                	li	s4,-32
    1562:	009f 0000 0000      	0x9f
    1568:	0000                	unimp
    156a:	9a00                	0x9a00
    156c:	0002                	c.slli64	zero
    156e:	e800                	fsw	fs0,16(s0)
    1570:	0002                	c.slli64	zero
    1572:	0100                	addi	s0,sp,128
    1574:	5b00                	lw	s0,48(a4)
    1576:	02e8                	addi	a0,sp,332
    1578:	0000                	unimp
    157a:	030a                	slli	t1,t1,0x2
    157c:	0000                	unimp
    157e:	0001                	nop
    1580:	0a56                	slli	s4,s4,0x15
    1582:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1ac>
    1586:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    158a:	8c00                	0x8c00
    158c:	9f01                	0x9f01
    158e:	0326                	slli	t1,t1,0x9
    1590:	0000                	unimp
    1592:	035e                	slli	t1,t1,0x17
    1594:	0000                	unimp
    1596:	0001                	nop
    1598:	5e56                	lw	t3,116(sp)
    159a:	a4000003          	lb	zero,-1472(zero) # fffffa40 <_stack_start+0xfffefa40>
    159e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    15a2:	8c00                	0x8c00
    15a4:	9f01                	0x9f01
    15a6:	03a4                	addi	s1,sp,456
    15a8:	0000                	unimp
    15aa:	0400                	addi	s0,sp,512
    15ac:	0000                	unimp
    15ae:	0004                	0x4
    15b0:	9f5b01f3          	0x9f5b01f3
	...
    15bc:	029a                	slli	t0,t0,0x6
    15be:	0000                	unimp
    15c0:	0310                	addi	a2,sp,384
    15c2:	0000                	unimp
    15c4:	0001                	nop
    15c6:	105c                	addi	a5,sp,36
    15c8:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1ac>
    15cc:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    15d0:	f300                	fsw	fs0,32(a4)
    15d2:	5c01                	li	s8,-32
    15d4:	269f 0003 7400      	0x74000003269f
    15da:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15de:	5c00                	lw	s0,56(s0)
    15e0:	0374                	addi	a3,sp,396
    15e2:	0000                	unimp
    15e4:	0400                	addi	s0,sp,512
    15e6:	0000                	unimp
    15e8:	0004                	0x4
    15ea:	9f5c01f3          	0x9f5c01f3
	...
    15f6:	029a                	slli	t0,t0,0x6
    15f8:	0000                	unimp
    15fa:	02ee                	slli	t0,t0,0x1b
    15fc:	0000                	unimp
    15fe:	0001                	nop
    1600:	ee5d                	bnez	a2,16be <product2+0x226>
    1602:	0002                	c.slli64	zero
    1604:	b200                	fsd	fs0,32(a2)
    1606:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    160a:	5900                	lw	s0,48(a0)
    160c:	03b2                	slli	t2,t2,0xc
    160e:	0000                	unimp
    1610:	03c8                	addi	a0,sp,452
    1612:	0000                	unimp
    1614:	0004                	0x4
    1616:	9f5d01f3          	0x9f5d01f3
    161a:	03c8                	addi	a0,sp,452
    161c:	0000                	unimp
    161e:	0400                	addi	s0,sp,512
    1620:	0000                	unimp
    1622:	0001                	nop
    1624:	0059                	c.nop	22
    1626:	0000                	unimp
    1628:	0000                	unimp
    162a:	0000                	unimp
    162c:	9a00                	0x9a00
    162e:	0002                	c.slli64	zero
    1630:	1e00                	addi	s0,sp,816
    1632:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1636:	5e00                	lw	s0,56(a2)
    1638:	031e                	slli	t1,t1,0x7
    163a:	0000                	unimp
    163c:	0326                	slli	t1,t1,0x9
    163e:	0000                	unimp
    1640:	0004                	0x4
    1642:	9f5e01f3          	0x9f5e01f3
    1646:	0326                	slli	t1,t1,0x9
    1648:	0000                	unimp
    164a:	0374                	addi	a3,sp,396
    164c:	0000                	unimp
    164e:	0001                	nop
    1650:	745e                	flw	fs0,244(sp)
    1652:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    1656:	0004                	0x4
    1658:	0400                	addi	s0,sp,512
    165a:	f300                	fsw	fs0,32(a4)
    165c:	5e01                	li	t3,-32
    165e:	009f 0000 0000      	0x9f
    1664:	0000                	unimp
    1666:	ee00                	fsw	fs0,24(a2)
    1668:	0002                	c.slli64	zero
    166a:	1e00                	addi	s0,sp,816
    166c:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1670:	8000                	0x8000
    1672:	1e00                	addi	s0,sp,816
    1674:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1ac>
    1678:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    167c:	8400                	0x8400
    167e:	2600                	fld	fs0,8(a2)
    1680:	74000003          	lb	zero,1856(zero) # 740 <ext_euclid+0xf0>
    1684:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1688:	8000                	0x8000
    168a:	7400                	flw	fs0,40(s0)
    168c:	a4000003          	lb	zero,-1472(zero) # fffffa40 <_stack_start+0xfffefa40>
    1690:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1694:	8400                	0x8400
    1696:	c800                	sw	s0,16(s0)
    1698:	f2000003          	lb	zero,-224(zero) # ffffff20 <_stack_start+0xfffeff20>
    169c:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16a0:	8400                	0x8400
	...
    16aa:	f000                	fsw	fs0,32(s0)
    16ac:	0002                	c.slli64	zero
    16ae:	fe00                	fsw	fs0,56(a2)
    16b0:	0002                	c.slli64	zero
    16b2:	0200                	addi	s0,sp,256
    16b4:	3000                	fld	fs0,32(s0)
    16b6:	fe9f 0002 0400      	0x4000002fe9f
    16bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16c0:	6e00                	flw	fs0,24(a2)
    16c2:	0304                	addi	s1,sp,384
    16c4:	0000                	unimp
    16c6:	030a                	slli	t1,t1,0x2
    16c8:	0000                	unimp
    16ca:	0001                	nop
    16cc:	0a6d                	addi	s4,s4,27
    16ce:	1e000003          	lb	zero,480(zero) # 1e0 <polymult+0x12c>
    16d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16d6:	5a00                	lw	s0,48(a2)
    16d8:	0326                	slli	t1,t1,0x9
    16da:	0000                	unimp
    16dc:	0348                	addi	a0,sp,388
    16de:	0000                	unimp
    16e0:	0001                	nop
    16e2:	486e                	lw	a6,216(sp)
    16e4:	58000003          	lb	zero,1408(zero) # 580 <polydiv+0x180>
    16e8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ec:	6d00                	flw	fs0,24(a0)
    16ee:	0358                	addi	a4,sp,388
    16f0:	0000                	unimp
    16f2:	035c                	addi	a5,sp,388
    16f4:	0000                	unimp
    16f6:	7f8d0003          	lb	zero,2040(s10)
    16fa:	5c9f 0003 5e00      	0x5e0000035c9f
    1700:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1704:	6d00                	flw	fs0,24(a0)
    1706:	035e                	slli	t1,t1,0x17
    1708:	0000                	unimp
    170a:	036e                	slli	t1,t1,0x1b
    170c:	0000                	unimp
    170e:	0001                	nop
    1710:	6e5a                	flw	ft8,148(sp)
    1712:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0xd0>
    1716:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    171a:	7a00                	flw	fs0,48(a2)
    171c:	9f7f                	0x9f7f
    171e:	0372                	slli	t1,t1,0x1c
    1720:	0000                	unimp
    1722:	0374                	addi	a3,sp,396
    1724:	0000                	unimp
    1726:	0001                	nop
    1728:	a45a                	fsd	fs6,8(sp)
    172a:	ba000003          	lb	zero,-1120(zero) # fffffba0 <_stack_start+0xfffefba0>
    172e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1732:	6500                	flw	fs0,8(a0)
    1734:	03f2                	slli	t2,t2,0x1c
    1736:	0000                	unimp
    1738:	0400                	addi	s0,sp,512
    173a:	0000                	unimp
    173c:	0001                	nop
    173e:	0065                	c.nop	25
    1740:	0000                	unimp
    1742:	0000                	unimp
    1744:	0000                	unimp
    1746:	1e00                	addi	s0,sp,816
    1748:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1ac>
    174c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1750:	5d00                	lw	s0,56(a0)
    1752:	0326                	slli	t1,t1,0x9
    1754:	0000                	unimp
    1756:	0342                	slli	t1,t1,0x10
    1758:	0000                	unimp
    175a:	0001                	nop
    175c:	746d                	lui	s0,0xffffb
    175e:	a4000003          	lb	zero,-1472(zero) # fffffa40 <_stack_start+0xfffefa40>
    1762:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1766:	5d00                	lw	s0,56(a0)
    1768:	03c8                	addi	a0,sp,452
    176a:	0000                	unimp
    176c:	03f2                	slli	t2,t2,0x1c
    176e:	0000                	unimp
    1770:	0001                	nop
    1772:	005d                	c.nop	23
    1774:	0000                	unimp
    1776:	0000                	unimp
    1778:	0000                	unimp
    177a:	7400                	flw	fs0,40(s0)
    177c:	86000003          	lb	zero,-1952(zero) # fffff860 <_stack_start+0xfffef860>
    1780:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1784:	5e00                	lw	s0,56(a2)
    1786:	0386                	slli	t2,t2,0x1
    1788:	0000                	unimp
    178a:	038c                	addi	a1,sp,448
    178c:	0000                	unimp
    178e:	017e0003          	lb	zero,23(t3)
    1792:	8c9f 0003 9600      	0x960000038c9f
    1798:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    179c:	5e00                	lw	s0,56(a2)
    179e:	03cc                	addi	a1,sp,452
    17a0:	0000                	unimp
    17a2:	03de                	slli	t2,t2,0x17
    17a4:	0000                	unimp
    17a6:	0001                	nop
    17a8:	de5e                	sw	s7,60(sp)
    17aa:	e6000003          	lb	zero,-416(zero) # fffffe60 <_stack_start+0xfffefe60>
    17ae:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17b2:	7e00                	flw	fs0,56(a2)
    17b4:	9f01                	0x9f01
    17b6:	03e6                	slli	t2,t2,0x19
    17b8:	0000                	unimp
    17ba:	03f2                	slli	t2,t2,0x1c
    17bc:	0000                	unimp
    17be:	0001                	nop
    17c0:	005e                	c.slli	zero,0x17
    17c2:	0000                	unimp
    17c4:	0000                	unimp
    17c6:	0000                	unimp
    17c8:	a800                	fsd	fs0,16(s0)
    17ca:	c8000003          	lb	zero,-896(zero) # fffffc80 <_stack_start+0xfffefc80>
    17ce:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    17d2:	0300                	addi	s0,sp,384
    17d4:	1498                	addi	a4,sp,608
    17d6:	0000                	unimp
    17d8:	009f 0000 0000      	0x9f
    17de:	0000                	unimp
    17e0:	ee00                	fsw	fs0,24(a2)
    17e2:	0002                	c.slli64	zero
    17e4:	a400                	fsd	fs0,8(s0)
    17e6:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    17ea:	7b00                	flw	fs0,48(a4)
    17ec:	c800                	sw	s0,16(s0)
    17ee:	f2000003          	lb	zero,-224(zero) # ffffff20 <_stack_start+0xfffeff20>
    17f2:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    17f6:	7b00                	flw	fs0,48(a4)
	...
    1800:	f000                	fsw	fs0,32(s0)
    1802:	0002                	c.slli64	zero
    1804:	ac00                	fsd	fs0,24(s0)
    1806:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    180a:	7200                	flw	fs0,32(a2)
    180c:	c800                	sw	s0,16(s0)
    180e:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    1812:	0004                	0x4
    1814:	0200                	addi	s0,sp,256
    1816:	7200                	flw	fs0,32(a2)
	...
    1820:	ee00                	fsw	fs0,24(a2)
    1822:	0002                	c.slli64	zero
    1824:	1e00                	addi	s0,sp,816
    1826:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    182a:	5d00                	lw	s0,56(a0)
    182c:	031e                	slli	t1,t1,0x7
    182e:	0000                	unimp
    1830:	0326                	slli	t1,t1,0x9
    1832:	0000                	unimp
    1834:	7f790003          	lb	zero,2039(s2)
    1838:	269f 0003 7400      	0x74000003269f
    183e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1842:	5d00                	lw	s0,56(a0)
    1844:	0374                	addi	a3,sp,396
    1846:	0000                	unimp
    1848:	03b2                	slli	t2,t2,0xc
    184a:	0000                	unimp
    184c:	7f790003          	lb	zero,2039(s2)
    1850:	b29f 0003 c800      	0xc8000003b29f
    1856:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    185a:	f300                	fsw	fs0,32(a4)
    185c:	5d01                	li	s10,-32
    185e:	1c31                	addi	s8,s8,-20
    1860:	c89f 0003 0000      	0x3c89f
    1866:	0004                	0x4
    1868:	0300                	addi	s0,sp,384
    186a:	7900                	flw	fs0,48(a0)
    186c:	9f7f                	0x9f7f
	...
    1876:	02b4                	addi	a3,sp,328
    1878:	0000                	unimp
    187a:	03b6                	slli	t2,t2,0xd
    187c:	0000                	unimp
    187e:	0001                	nop
    1880:	0003b663          	0x3b663
    1884:	c800                	sw	s0,16(s0)
    1886:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    188a:	f300                	fsw	fs0,32(a4)
    188c:	5b01                	li	s6,-32
    188e:	225d01f3          	0x225d01f3
    1892:	1c31                	addi	s8,s8,-20
    1894:	c89f 0003 0000      	0x3c89f
    189a:	0004                	0x4
    189c:	0100                	addi	s0,sp,128
    189e:	6300                	flw	fs0,0(a4)
	...
    18a8:	02ee                	slli	t0,t0,0x1b
    18aa:	0000                	unimp
    18ac:	03a4                	addi	s1,sp,456
    18ae:	0000                	unimp
    18b0:	0001                	nop
    18b2:	a46c                	fsd	fa1,200(s0)
    18b4:	c8000003          	lb	zero,-896(zero) # fffffc80 <_stack_start+0xfffefc80>
    18b8:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    18bc:	f300                	fsw	fs0,32(a4)
    18be:	5b01                	li	s6,-32
    18c0:	1c31                	addi	s8,s8,-20
    18c2:	c89f 0003 f200      	0xf2000003c89f
    18c8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18cc:	6c00                	flw	fs0,24(s0)
    18ce:	03f2                	slli	t2,t2,0x1c
    18d0:	0000                	unimp
    18d2:	0400                	addi	s0,sp,512
    18d4:	0000                	unimp
    18d6:	0006                	c.slli	zero,0x1
    18d8:	315b01f3          	0x315b01f3
    18dc:	9f1c                	0x9f1c
	...
    18e6:	02ee                	slli	t0,t0,0x1b
    18e8:	0000                	unimp
    18ea:	031e                	slli	t1,t1,0x7
    18ec:	0000                	unimp
    18ee:	0001                	nop
    18f0:	1e5d                	addi	t3,t3,-9
    18f2:	26000003          	lb	zero,608(zero) # 260 <polymult+0x1ac>
    18f6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    18fa:	7900                	flw	fs0,48(a0)
    18fc:	9f7f                	0x9f7f
    18fe:	0326                	slli	t1,t1,0x9
    1900:	0000                	unimp
    1902:	0374                	addi	a3,sp,396
    1904:	0000                	unimp
    1906:	0001                	nop
    1908:	745d                	lui	s0,0xffff7
    190a:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    190e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1912:	7900                	flw	fs0,48(a0)
    1914:	9f7f                	0x9f7f
    1916:	03b2                	slli	t2,t2,0xc
    1918:	0000                	unimp
    191a:	03c8                	addi	a0,sp,452
    191c:	0000                	unimp
    191e:	0006                	c.slli	zero,0x1
    1920:	315d01f3          	0x315d01f3
    1924:	9f1c                	0x9f1c
    1926:	03c8                	addi	a0,sp,452
    1928:	0000                	unimp
    192a:	0400                	addi	s0,sp,512
    192c:	0000                	unimp
    192e:	7f790003          	lb	zero,2039(s2)
    1932:	009f 0000 0000      	0x9f
    1938:	0000                	unimp
    193a:	b400                	fsd	fs0,40(s0)
    193c:	0000                	unimp
    193e:	2c00                	fld	fs0,24(s0)
    1940:	0001                	nop
    1942:	0100                	addi	s0,sp,128
    1944:	5a00                	lw	s0,48(a2)
    1946:	012c                	addi	a1,sp,136
    1948:	0000                	unimp
    194a:	014a                	slli	sp,sp,0x12
    194c:	0000                	unimp
    194e:	0004                	0x4
    1950:	9f5a01f3          	0x9f5a01f3
    1954:	014a                	slli	sp,sp,0x12
    1956:	0000                	unimp
    1958:	0194                	addi	a3,sp,192
    195a:	0000                	unimp
    195c:	0001                	nop
    195e:	945a                	add	s0,s0,s6
    1960:	0001                	nop
    1962:	9a00                	0x9a00
    1964:	0002                	c.slli64	zero
    1966:	0400                	addi	s0,sp,512
    1968:	f300                	fsw	fs0,32(a4)
    196a:	5a01                	li	s4,-32
    196c:	009f 0000 0000      	0x9f
    1972:	0000                	unimp
    1974:	b400                	fsd	fs0,40(s0)
    1976:	0000                	unimp
    1978:	2e00                	fld	fs0,24(a2)
    197a:	0001                	nop
    197c:	0100                	addi	s0,sp,128
    197e:	5b00                	lw	s0,48(a4)
    1980:	012e                	slli	sp,sp,0xb
    1982:	0000                	unimp
    1984:	014a                	slli	sp,sp,0x12
    1986:	0000                	unimp
    1988:	01820003          	lb	zero,24(tp) # 18 <__DYNAMIC+0x18>
    198c:	4a9f 0001 9400      	0x940000014a9f
    1992:	0001                	nop
    1994:	0100                	addi	s0,sp,128
    1996:	5b00                	lw	s0,48(a4)
    1998:	0194                	addi	a3,sp,192
    199a:	0000                	unimp
    199c:	01e2                	slli	gp,gp,0x18
    199e:	0000                	unimp
    19a0:	01820003          	lb	zero,24(tp) # 18 <__DYNAMIC+0x18>
    19a4:	e29f 0001 9a00      	0x9a000001e29f
    19aa:	0002                	c.slli64	zero
    19ac:	0400                	addi	s0,sp,512
    19ae:	f300                	fsw	fs0,32(a4)
    19b0:	5b01                	li	s6,-32
    19b2:	009f 0000 0000      	0x9f
    19b8:	0000                	unimp
    19ba:	b400                	fsd	fs0,40(s0)
    19bc:	0000                	unimp
    19be:	3400                	fld	fs0,40(s0)
    19c0:	0001                	nop
    19c2:	0100                	addi	s0,sp,128
    19c4:	5c00                	lw	s0,56(s0)
    19c6:	0134                	addi	a3,sp,136
    19c8:	0000                	unimp
    19ca:	014a                	slli	sp,sp,0x12
    19cc:	0000                	unimp
    19ce:	0004                	0x4
    19d0:	9f5c01f3          	0x9f5c01f3
    19d4:	014a                	slli	sp,sp,0x12
    19d6:	0000                	unimp
    19d8:	01b6                	slli	gp,gp,0xd
    19da:	0000                	unimp
    19dc:	0001                	nop
    19de:	b65c                	fsd	fa5,168(a2)
    19e0:	0001                	nop
    19e2:	9a00                	0x9a00
    19e4:	0002                	c.slli64	zero
    19e6:	0400                	addi	s0,sp,512
    19e8:	f300                	fsw	fs0,32(a4)
    19ea:	5c01                	li	s8,-32
    19ec:	009f 0000 0000      	0x9f
    19f2:	0000                	unimp
    19f4:	b400                	fsd	fs0,40(s0)
    19f6:	0000                	unimp
    19f8:	d400                	sw	s0,40(s0)
    19fa:	0001                	nop
    19fc:	0100                	addi	s0,sp,128
    19fe:	5d00                	lw	s0,56(a0)
    1a00:	01d4                	addi	a3,sp,196
    1a02:	0000                	unimp
    1a04:	01f8                	addi	a4,sp,204
    1a06:	0000                	unimp
    1a08:	0004                	0x4
    1a0a:	9f5d01f3          	0x9f5d01f3
    1a0e:	01f8                	addi	a4,sp,204
    1a10:	0000                	unimp
    1a12:	028a                	slli	t0,t0,0x2
    1a14:	0000                	unimp
    1a16:	0001                	nop
    1a18:	8a5d                	andi	a2,a2,23
    1a1a:	0002                	c.slli64	zero
    1a1c:	9a00                	0x9a00
    1a1e:	0002                	c.slli64	zero
    1a20:	0400                	addi	s0,sp,512
    1a22:	f300                	fsw	fs0,32(a4)
    1a24:	5d01                	li	s10,-32
    1a26:	009f 0000 0000      	0x9f
    1a2c:	0000                	unimp
    1a2e:	b400                	fsd	fs0,40(s0)
    1a30:	0000                	unimp
    1a32:	d200                	sw	s0,32(a2)
    1a34:	0000                	unimp
    1a36:	0100                	addi	s0,sp,128
    1a38:	5f00                	lw	s0,56(a4)
    1a3a:	00d2                	slli	ra,ra,0x14
    1a3c:	0000                	unimp
    1a3e:	0142                	slli	sp,sp,0x10
    1a40:	0000                	unimp
    1a42:	0001                	nop
    1a44:	4259                	li	tp,22
    1a46:	0001                	nop
    1a48:	4a00                	lw	s0,16(a2)
    1a4a:	0001                	nop
    1a4c:	0400                	addi	s0,sp,512
    1a4e:	f300                	fsw	fs0,32(a4)
    1a50:	5f01                	li	t5,-32
    1a52:	4a9f 0001 bc00      	0xbc0000014a9f
    1a58:	0001                	nop
    1a5a:	0100                	addi	s0,sp,128
    1a5c:	5900                	lw	s0,48(a0)
    1a5e:	01bc                	addi	a5,sp,200
    1a60:	0000                	unimp
    1a62:	01f8                	addi	a4,sp,204
    1a64:	0000                	unimp
    1a66:	0004                	0x4
    1a68:	9f5f01f3          	0x9f5f01f3
    1a6c:	01f8                	addi	a4,sp,204
    1a6e:	0000                	unimp
    1a70:	0222                	slli	tp,tp,0x8
    1a72:	0000                	unimp
    1a74:	0001                	nop
    1a76:	2259                	jal	1bfc <random_keys+0x124>
    1a78:	0002                	c.slli64	zero
    1a7a:	9a00                	0x9a00
    1a7c:	0002                	c.slli64	zero
    1a7e:	0400                	addi	s0,sp,512
    1a80:	f300                	fsw	fs0,32(a4)
    1a82:	5f01                	li	t5,-32
    1a84:	009f 0000 0000      	0x9f
    1a8a:	0000                	unimp
    1a8c:	0c00                	addi	s0,sp,528
    1a8e:	0001                	nop
    1a90:	1e00                	addi	s0,sp,816
    1a92:	0001                	nop
    1a94:	0200                	addi	s0,sp,256
    1a96:	3000                	fld	fs0,32(s0)
    1a98:	1e9f 0001 2400      	0x240000011e9f
    1a9e:	0001                	nop
    1aa0:	0100                	addi	s0,sp,128
    1aa2:	6300                	flw	fs0,0(a4)
    1aa4:	0126                	slli	sp,sp,0x9
    1aa6:	0000                	unimp
    1aa8:	012e                	slli	sp,sp,0xb
    1aaa:	0000                	unimp
    1aac:	0001                	nop
    1aae:	2e64                	fld	fs1,216(a2)
    1ab0:	0001                	nop
    1ab2:	4200                	lw	s0,0(a2)
    1ab4:	0001                	nop
    1ab6:	0100                	addi	s0,sp,128
    1ab8:	6100                	flw	fs0,0(a0)
    1aba:	014a                	slli	sp,sp,0x12
    1abc:	0000                	unimp
    1abe:	016c                	addi	a1,sp,140
    1ac0:	0000                	unimp
    1ac2:	0001                	nop
    1ac4:	00016c63          	bltu	sp,zero,1adc <random_keys+0x4>
    1ac8:	8800                	0x8800
    1aca:	0001                	nop
    1acc:	0100                	addi	s0,sp,128
    1ace:	6400                	flw	fs0,8(s0)
    1ad0:	0188                	addi	a0,sp,192
    1ad2:	0000                	unimp
    1ad4:	018e                	slli	gp,gp,0x3
    1ad6:	0000                	unimp
    1ad8:	7f840003          	lb	zero,2040(s0) # ffff77f8 <_stack_start+0xfffe77f8>
    1adc:	8e9f 0001 9400      	0x940000018e9f
    1ae2:	0001                	nop
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	6400                	flw	fs0,8(s0)
    1ae8:	0194                	addi	a3,sp,192
    1aea:	0000                	unimp
    1aec:	01aa                	slli	gp,gp,0xa
    1aee:	0000                	unimp
    1af0:	0001                	nop
    1af2:	aa61                	j	1c8a <random_keys+0x1b2>
    1af4:	0001                	nop
    1af6:	b000                	fsd	fs0,32(s0)
    1af8:	0001                	nop
    1afa:	0300                	addi	s0,sp,384
    1afc:	8100                	0x8100
    1afe:	9f7f                	0x9f7f
    1b00:	01b0                	addi	a2,sp,200
    1b02:	0000                	unimp
    1b04:	01b8                	addi	a4,sp,200
    1b06:	0000                	unimp
    1b08:	0001                	nop
    1b0a:	be61                	j	16a2 <product2+0x20a>
    1b0c:	0001                	nop
    1b0e:	ca00                	sw	s0,16(a2)
    1b10:	0001                	nop
    1b12:	0100                	addi	s0,sp,128
    1b14:	5c00                	lw	s0,56(s0)
    1b16:	0248                	addi	a0,sp,260
    1b18:	0000                	unimp
    1b1a:	0266                	slli	tp,tp,0x19
    1b1c:	0000                	unimp
    1b1e:	0001                	nop
    1b20:	665c                	flw	fa5,12(a2)
    1b22:	0002                	c.slli64	zero
    1b24:	7000                	flw	fs0,32(s0)
    1b26:	0002                	c.slli64	zero
    1b28:	0100                	addi	s0,sp,128
    1b2a:	6000                	flw	fs0,0(s0)
    1b2c:	0270                	addi	a2,sp,268
    1b2e:	0000                	unimp
    1b30:	027c                	addi	a5,sp,268
    1b32:	0000                	unimp
    1b34:	7f800003          	lb	zero,2040(zero) # 7f8 <ext_euclid+0x1a8>
    1b38:	7c9f 0002 8600      	0x860000027c9f
    1b3e:	0002                	c.slli64	zero
    1b40:	0100                	addi	s0,sp,128
    1b42:	6000                	flw	fs0,0(s0)
	...
    1b4c:	0142                	slli	sp,sp,0x10
    1b4e:	0000                	unimp
    1b50:	014a                	slli	sp,sp,0x12
    1b52:	0000                	unimp
    1b54:	0001                	nop
    1b56:	4a56                	lw	s4,84(sp)
    1b58:	0001                	nop
    1b5a:	6600                	flw	fs0,8(a2)
    1b5c:	0001                	nop
    1b5e:	0100                	addi	s0,sp,128
    1b60:	6100                	flw	fs0,0(a0)
    1b62:	01b8                	addi	a4,sp,200
    1b64:	0000                	unimp
    1b66:	01be                	slli	gp,gp,0xf
    1b68:	0000                	unimp
    1b6a:	0001                	nop
    1b6c:	ce56                	sw	s5,28(sp)
    1b6e:	0001                	nop
    1b70:	d400                	sw	s0,40(s0)
    1b72:	0001                	nop
    1b74:	0100                	addi	s0,sp,128
    1b76:	5b00                	lw	s0,48(a4)
    1b78:	01d4                	addi	a3,sp,196
    1b7a:	0000                	unimp
    1b7c:	01f8                	addi	a4,sp,204
    1b7e:	0000                	unimp
    1b80:	0001                	nop
    1b82:	f85f 0001 4800      	0x48000001f85f
    1b88:	0002                	c.slli64	zero
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	5600                	lw	s0,40(a2)
    1b8e:	0248                	addi	a0,sp,260
    1b90:	0000                	unimp
    1b92:	024c                	addi	a1,sp,260
    1b94:	0000                	unimp
    1b96:	0001                	nop
    1b98:	00024c5b          	0x24c5b
    1b9c:	5600                	lw	s0,40(a2)
    1b9e:	0002                	c.slli64	zero
    1ba0:	0300                	addi	s0,sp,384
    1ba2:	7b00                	flw	fs0,48(a4)
    1ba4:	9f7f                	0x9f7f
    1ba6:	0256                	slli	tp,tp,0x15
    1ba8:	0000                	unimp
    1baa:	0260                	addi	s0,sp,268
    1bac:	0000                	unimp
    1bae:	0001                	nop
    1bb0:	0002665b          	0x2665b
    1bb4:	8a00                	0x8a00
    1bb6:	0002                	c.slli64	zero
    1bb8:	0100                	addi	s0,sp,128
    1bba:	5b00                	lw	s0,48(a4)
    1bbc:	028a                	slli	t0,t0,0x2
    1bbe:	0000                	unimp
    1bc0:	028e                	slli	t0,t0,0x3
    1bc2:	0000                	unimp
    1bc4:	0001                	nop
    1bc6:	8e5f 0002 9800      	0x980000028e5f
    1bcc:	0002                	c.slli64	zero
    1bce:	0300                	addi	s0,sp,384
    1bd0:	7f00                	flw	fs0,56(a4)
    1bd2:	9f7f                	0x9f7f
    1bd4:	0298                	addi	a4,sp,320
    1bd6:	0000                	unimp
    1bd8:	029a                	slli	t0,t0,0x6
    1bda:	0000                	unimp
    1bdc:	0001                	nop
    1bde:	005f 0000 0000      	0x5f
    1be4:	0000                	unimp
    1be6:	f800                	fsw	fs0,48(s0)
    1be8:	0001                	nop
    1bea:	0a00                	addi	s0,sp,272
    1bec:	0002                	c.slli64	zero
    1bee:	0100                	addi	s0,sp,128
    1bf0:	5c00                	lw	s0,56(s0)
    1bf2:	020a                	slli	tp,tp,0x2
    1bf4:	0000                	unimp
    1bf6:	0212                	slli	tp,tp,0x4
    1bf8:	0000                	unimp
    1bfa:	017c0003          	lb	zero,23(s8) # fffe2017 <_stack_start+0xfffd2017>
    1bfe:	129f 0002 1e00      	0x1e000002129f
    1c04:	0002                	c.slli64	zero
    1c06:	0100                	addi	s0,sp,128
    1c08:	5c00                	lw	s0,56(s0)
    1c0a:	0222                	slli	tp,tp,0x8
    1c0c:	0000                	unimp
    1c0e:	0234                	addi	a3,sp,264
    1c10:	0000                	unimp
    1c12:	0001                	nop
    1c14:	345c                	fld	fa5,168(s0)
    1c16:	0002                	c.slli64	zero
    1c18:	3c00                	fld	fs0,56(s0)
    1c1a:	0002                	c.slli64	zero
    1c1c:	0300                	addi	s0,sp,384
    1c1e:	7c00                	flw	fs0,56(s0)
    1c20:	9f01                	0x9f01
    1c22:	023c                	addi	a5,sp,264
    1c24:	0000                	unimp
    1c26:	0248                	addi	a0,sp,260
    1c28:	0000                	unimp
    1c2a:	0001                	nop
    1c2c:	005c                	addi	a5,sp,4
    1c2e:	0000                	unimp
    1c30:	0000                	unimp
    1c32:	0000                	unimp
    1c34:	d800                	sw	s0,48(s0)
    1c36:	0001                	nop
    1c38:	f800                	fsw	fs0,48(s0)
    1c3a:	0001                	nop
    1c3c:	0600                	addi	s0,sp,768
    1c3e:	0300                	addi	s0,sp,384
    1c40:	1240                	addi	s0,sp,292
    1c42:	0000                	unimp
    1c44:	009f 0000 0000      	0x9f
    1c4a:	0000                	unimp
    1c4c:	0c00                	addi	s0,sp,528
    1c4e:	0001                	nop
    1c50:	dc00                	sw	s0,56(s0)
    1c52:	0001                	nop
    1c54:	0200                	addi	s0,sp,256
    1c56:	7200                	flw	fs0,32(a2)
    1c58:	dc00                	sw	s0,56(s0)
    1c5a:	0001                	nop
    1c5c:	f800                	fsw	fs0,48(s0)
    1c5e:	0001                	nop
    1c60:	0d00                	addi	s0,sp,656
    1c62:	7500                	flw	fs0,40(a0)
    1c64:	f300                	fsw	fs0,32(a4)
    1c66:	5d01                	li	s10,-32
    1c68:	2432                	fld	fs0,264(sp)
    1c6a:	f0090f23          	sb	zero,-226(s2)
    1c6e:	1c1a                	slli	s8,s8,0x26
    1c70:	01f8                	addi	a4,sp,204
    1c72:	0000                	unimp
    1c74:	029a                	slli	t0,t0,0x6
    1c76:	0000                	unimp
    1c78:	0002                	c.slli64	zero
    1c7a:	0072                	c.slli	zero,0x1c
	...
    1c84:	0106                	slli	sp,sp,0x1
    1c86:	0000                	unimp
    1c88:	0142                	slli	sp,sp,0x10
    1c8a:	0000                	unimp
    1c8c:	0001                	nop
    1c8e:	4256                	lw	tp,84(sp)
    1c90:	0001                	nop
    1c92:	4a00                	lw	s0,16(a2)
    1c94:	0001                	nop
    1c96:	0300                	addi	s0,sp,384
    1c98:	7d00                	flw	fs0,56(a0)
    1c9a:	9f7f                	0x9f7f
    1c9c:	014a                	slli	sp,sp,0x12
    1c9e:	0000                	unimp
    1ca0:	01b8                	addi	a4,sp,200
    1ca2:	0000                	unimp
    1ca4:	0001                	nop
    1ca6:	b856                	fsd	fs5,48(sp)
    1ca8:	0001                	nop
    1caa:	d400                	sw	s0,40(s0)
    1cac:	0001                	nop
    1cae:	0300                	addi	s0,sp,384
    1cb0:	7d00                	flw	fs0,56(a0)
    1cb2:	9f7f                	0x9f7f
    1cb4:	01d4                	addi	a3,sp,196
    1cb6:	0000                	unimp
    1cb8:	01f8                	addi	a4,sp,204
    1cba:	0000                	unimp
    1cbc:	0006                	c.slli	zero,0x1
    1cbe:	315d01f3          	0x315d01f3
    1cc2:	9f1c                	0x9f1c
    1cc4:	01f8                	addi	a4,sp,204
    1cc6:	0000                	unimp
    1cc8:	028a                	slli	t0,t0,0x2
    1cca:	0000                	unimp
    1ccc:	7f7d0003          	lb	zero,2039(s10)
    1cd0:	8a9f 0002 9a00      	0x9a0000028a9f
    1cd6:	0002                	c.slli64	zero
    1cd8:	0600                	addi	s0,sp,768
    1cda:	f300                	fsw	fs0,32(a4)
    1cdc:	5d01                	li	s10,-32
    1cde:	1c31                	addi	s8,s8,-20
    1ce0:	009f 0000 0000      	0x9f
    1ce6:	0000                	unimp
    1ce8:	0a00                	addi	s0,sp,272
    1cea:	0001                	nop
    1cec:	e200                	fsw	fs0,0(a2)
    1cee:	0001                	nop
    1cf0:	0100                	addi	s0,sp,128
    1cf2:	6200                	flw	fs0,0(a2)
    1cf4:	01e2                	slli	gp,gp,0x18
    1cf6:	0000                	unimp
    1cf8:	01f8                	addi	a4,sp,204
    1cfa:	0000                	unimp
    1cfc:	0006                	c.slli	zero,0x1
    1cfe:	315b01f3          	0x315b01f3
    1d02:	9f1c                	0x9f1c
    1d04:	01f8                	addi	a4,sp,204
    1d06:	0000                	unimp
    1d08:	029a                	slli	t0,t0,0x6
    1d0a:	0000                	unimp
    1d0c:	0001                	nop
    1d0e:	0062                	c.slli	zero,0x18
    1d10:	0000                	unimp
    1d12:	0000                	unimp
    1d14:	0000                	unimp
    1d16:	0a00                	addi	s0,sp,272
    1d18:	0001                	nop
    1d1a:	4200                	lw	s0,0(a2)
    1d1c:	0001                	nop
    1d1e:	0100                	addi	s0,sp,128
    1d20:	5600                	lw	s0,40(a2)
    1d22:	0142                	slli	sp,sp,0x10
    1d24:	0000                	unimp
    1d26:	014a                	slli	sp,sp,0x12
    1d28:	0000                	unimp
    1d2a:	7f7d0003          	lb	zero,2039(s10)
    1d2e:	4a9f 0001 b800      	0xb80000014a9f
    1d34:	0001                	nop
    1d36:	0100                	addi	s0,sp,128
    1d38:	5600                	lw	s0,40(a2)
    1d3a:	01b8                	addi	a4,sp,200
    1d3c:	0000                	unimp
    1d3e:	01d4                	addi	a3,sp,196
    1d40:	0000                	unimp
    1d42:	7f7d0003          	lb	zero,2039(s10)
    1d46:	d49f 0001 f800      	0xf8000001d49f
    1d4c:	0001                	nop
    1d4e:	0600                	addi	s0,sp,768
    1d50:	f300                	fsw	fs0,32(a4)
    1d52:	5d01                	li	s10,-32
    1d54:	1c31                	addi	s8,s8,-20
    1d56:	f89f 0001 8a00      	0x8a000001f89f
    1d5c:	0002                	c.slli64	zero
    1d5e:	0300                	addi	s0,sp,384
    1d60:	7d00                	flw	fs0,56(a0)
    1d62:	9f7f                	0x9f7f
    1d64:	028a                	slli	t0,t0,0x2
    1d66:	0000                	unimp
    1d68:	029a                	slli	t0,t0,0x6
    1d6a:	0000                	unimp
    1d6c:	0006                	c.slli	zero,0x1
    1d6e:	315d01f3          	0x315d01f3
    1d72:	9f1c                	0x9f1c
	...
    1d7c:	0092                	slli	ra,ra,0x4
    1d7e:	0000                	unimp
    1d80:	0098                	addi	a4,sp,64
    1d82:	0000                	unimp
    1d84:	0001                	nop
    1d86:	985c                	0x985c
    1d88:	0000                	unimp
    1d8a:	b400                	fsd	fs0,40(s0)
    1d8c:	0000                	unimp
    1d8e:	0400                	addi	s0,sp,512
    1d90:	f300                	fsw	fs0,32(a4)
    1d92:	5c01                	li	s8,-32
    1d94:	009f 0000 0000      	0x9f
    1d9a:	0000                	unimp
    1d9c:	9200                	0x9200
    1d9e:	0000                	unimp
    1da0:	9c00                	0x9c00
    1da2:	0000                	unimp
    1da4:	0200                	addi	s0,sp,256
    1da6:	3000                	fld	fs0,32(s0)
    1da8:	9c9f 0000 b400      	0xb40000009c9f
    1dae:	0000                	unimp
    1db0:	0100                	addi	s0,sp,128
    1db2:	5f00                	lw	s0,56(a4)
	...
    1dbc:	00a6                	slli	ra,ra,0x9
    1dbe:	0000                	unimp
    1dc0:	00ac                	addi	a1,sp,72
    1dc2:	0000                	unimp
    1dc4:	0006                	c.slli	zero,0x1
    1dc6:	007e007b          	0x7e007b
    1dca:	9f22                	add	t5,t5,s0
    1dcc:	00ac                	addi	a1,sp,72
    1dce:	0000                	unimp
    1dd0:	00b0                	addi	a2,sp,72
    1dd2:	0000                	unimp
    1dd4:	0001                	nop
    1dd6:	005e                	c.slli	zero,0x17
    1dd8:	0000                	unimp
    1dda:	0000                	unimp
    1ddc:	0000                	unimp
    1dde:	a600                	fsd	fs0,8(a2)
    1de0:	0000                	unimp
    1de2:	aa00                	fsd	fs0,16(a2)
    1de4:	0000                	unimp
    1de6:	0600                	addi	s0,sp,768
    1de8:	7a00                	flw	fs0,48(a2)
    1dea:	7e00                	flw	fs0,56(a2)
    1dec:	2200                	fld	fs0,0(a2)
    1dee:	aa9f 0000 b000      	0xb0000000aa9f
    1df4:	0000                	unimp
    1df6:	0100                	addi	s0,sp,128
    1df8:	5d00                	lw	s0,56(a0)
	...
    1e02:	008c                	addi	a1,sp,64
    1e04:	0000                	unimp
    1e06:	0090                	addi	a2,sp,64
    1e08:	0000                	unimp
    1e0a:	0001                	nop
    1e0c:	005a                	c.slli	zero,0x16
    1e0e:	0000                	unimp
    1e10:	0000                	unimp
    1e12:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0cec                	addi	a1,sp,604
  16:	0000                	unimp
  18:	0f74                	addi	a3,sp,924
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	00001867          	0x1867
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d78                	addi	a4,sp,668
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0d78                	addi	a4,sp,668
   6:	0000                	unimp
   8:	0f74                	addi	a3,sp,924
   a:	0000                	unimp
   c:	10ac                	addi	a1,sp,104
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0d78                	addi	a4,sp,668
  22:	0000                	unimp
  24:	0dee                	slli	s11,s11,0x1b
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	293c                	fld	fa5,80(a0)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xda>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0xc6>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x52>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x134>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xf0>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0xa4>
}
      a0:	0065                	c.nop	25
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
    int line[size_b][size_a + size_b];
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
    int pola[size_a];
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x120>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
    int line[size_b][size_a + size_b];
      e6:	6269                	lui	tp,0x1a
    int pola[size_a];
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
    int pola[size_a];
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    int polb[size_b];
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
    int pola[size_a];
      fc:	0500                	addi	s0,sp,640
    int polb[size_b];
      fe:	02050033          	mul	zero,a0,zero
    int line[size_b][size_a + size_b];
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
    int pola[size_a];
     106:	05010e03          	lb	t3,80(sp)
    int polb[size_b];
     10a:	0305                	addi	t1,t1,1
            line[i][j] = 0;
     10c:	00000907          	0x907
     110:	0301                	addi	t1,t1,0
    for (i = 0; i < size_b; ++i){
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
            product[j] = 0;
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
    for (i = 0; i < size_b; ++i){
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polydiv+0x50>
     122:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_a; ++i){
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
    for (i = 0; i < size_b; ++i){
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
    if(star_mult == 1){
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0616                	slli	a2,a2,0x5
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     148:	0100                	addi	s0,sp,128
            product[j] = 0;
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
     14e:	0104                	addi	s1,sp,128
            line[i][j] = 0;
     150:	0306                	slli	t1,t1,0x1
     152:	0900                	addi	s0,sp,144
            product[j] = 0;
     154:	0002                	c.slli64	zero
     156:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     158:	0005                	c.nop	1
     15a:	0402                	c.slli64	s0
     15c:	0601                	addi	a2,a2,0
     15e:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     162:	0100                	addi	s0,sp,128
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     16a:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     16c:	0905                	addi	s2,s2,1
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
            pola[i] = pola[i] + mod;
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
        while (pola[i] < 0){
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
     17e:	09700303          	lb	t1,151(zero) # 97 <array_add+0x5>
        pola[i] = pola[i] % mod;
     182:	0004                	0x4
     184:	0001                	nop
    for (i = 0; i < size_a; ++i){
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
        pola[i] = pola[i] % mod;
     18c:	000a                	c.slli	zero,0x2
    for (i = 0; i < size_a; ++i){
     18e:	0501                	addi	a0,a0,0
            pola[i] = pola[i] + mod;
     190:	001a                	c.slli	zero,0x6
     192:	0402                	c.slli64	s0
        polb[i] = b[i];
     194:	09060303          	lb	t1,144(a2) # 51090 <_stack_start+0x41090>
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
            polb[i] = polb[i] + mod;
     19c:	0402001b          	0x402001b
        while (polb[i] < 0){
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
        polb[i] = polb[i] % mod;
     1a4:	0009                	c.nop	2
     1a6:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     1a8:	4e05                	li	t3,1
     1aa:	0306                	slli	t1,t1,0x1
        polb[i] = polb[i] % mod;
     1ac:	090a                	slli	s2,s2,0x2
     1ae:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     1b0:	0501                	addi	a0,a0,0
            polb[i] = polb[i] + mod;
     1b2:	0305                	addi	t1,t1,1
     1b4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        for (j = size_b -1; j >= 0; j = j-1){
     1b8:	0501                	addi	a0,a0,0
     1ba:	061d                	addi	a2,a2,7
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     1c0:	0100                	addi	s0,sp,128
     1c2:	0905                	addi	s2,s2,1
     1c4:	08090003          	lb	zero,128(s2)
     1c8:	0100                	addi	s0,sp,128
     1ca:	4e05                	li	t3,1
    for(j = 0; j < size_a + size_b -1; ++j){
     1cc:	0c097d03          	0xc097d03
     1d0:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0905                	addi	s2,s2,1
     1d4:	06090603          	lb	a2,96(s2)
}
     1d8:	0100                	addi	s0,sp,128
     1da:	4e05                	li	t3,1
     1dc:	04097a03          	0x4097a03
     1e0:	0100                	addi	s0,sp,128
     1e2:	0905                	addi	s2,s2,1
     1e4:	0a090303          	lb	t1,160(s2)
     1e8:	0100                	addi	s0,sp,128
     1ea:	4e05                	li	t3,1
     1ec:	02097d03          	0x2097d03
     1f0:	0100                	addi	s0,sp,128
     1f2:	0905                	addi	s2,s2,1
     1f4:	06090303          	lb	t1,96(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     1f8:	0100                	addi	s0,sp,128
     1fa:	04090303          	lb	t1,64(s2)
     1fe:	0100                	addi	s0,sp,128
     200:	4e05                	li	t3,1
     202:	04097a03          	0x4097a03
     206:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     208:	0905                	addi	s2,s2,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     20a:	00090303          	lb	t1,0(s2)
     20e:	0100                	addi	s0,sp,128
     210:	06090303          	lb	t1,96(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     214:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     216:	04090103          	lb	sp,64(s2)
     21a:	0100                	addi	s0,sp,128
     21c:	06097f03          	0x6097f03
            for (k = size_a-1; k >= 0; k = k-1 ){
     220:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     222:	02090103          	lb	sp,32(s2)
     226:	0100                	addi	s0,sp,128
     228:	04097c03          	0x4097c03
     22c:	0100                	addi	s0,sp,128
     22e:	0505                	addi	a0,a0,1
     230:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     232:	0901                	addi	s2,s2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     234:	0004                	0x4
     236:	0301                	addi	t1,t1,0
     238:	0901                	addi	s2,s2,0
     23a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     23c:	0301                	addi	t1,t1,0
     23e:	0901                	addi	s2,s2,0
        for (j = size_b -1; j >= 0; j = j-1){
     240:	0000                	unimp
     242:	0501                	addi	a0,a0,0
     244:	0609                	addi	a2,a2,2
     246:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     24a:	0100                	addi	s0,sp,128
     24c:	0505                	addi	a0,a0,1
            line[i][j] = line[i][j] % mod;
     24e:	0306                	slli	t1,t1,0x1
     250:	0901                	addi	s2,s2,0
     252:	0004                	0x4
     254:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     256:	0609                	addi	a2,a2,2
     258:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     25c:	0100                	addi	s0,sp,128
     25e:	0505                	addi	a0,a0,1
     260:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     262:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
            product[j] += line[i][j];
     266:	0501                	addi	a0,a0,0
     268:	0614                	addi	a3,sp,768
     26a:	00090203          	lb	tp,0(s2)
        for(i = 0; i < size_b; ++i){
     26e:	0100                	addi	s0,sp,128
            product[j] += line[i][j];
     270:	0505                	addi	a0,a0,1
     272:	06097e03          	0x6097e03
     276:	0100                	addi	s0,sp,128
     278:	0c05                	addi	s8,s8,1
     27a:	02090003          	lb	zero,32(s2)
        for(i = 0; i < size_b; ++i){
     27e:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     280:	1805                	addi	a6,a6,-31
     282:	02090303          	lb	t1,32(s2)
        for(i = 0; i < size_b; ++i){
     286:	0100                	addi	s0,sp,128
     288:	1105                	addi	sp,sp,-31
        product[j] = product[j] % mod;
     28a:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     28c:	0104                	addi	s1,sp,128
     28e:	0306                	slli	t1,t1,0x1
        product[j] = product[j] % mod;
     290:	097d                	addi	s2,s2,31
     292:	0008                	0x8
     294:	0501                	addi	a0,a0,0
     296:	0005                	c.nop	1
    for(j = 0; j < size_a + size_b -1; ++j){
     298:	0402                	c.slli64	s0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     29a:	0601                	addi	a2,a2,0
     29c:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     2a0:	0100                	addi	s0,sp,128
     2a2:	0c05                	addi	s8,s8,1
     2a4:	06090803          	lb	a6,96(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2a8:	0100                	addi	s0,sp,128
     2aa:	1105                	addi	sp,sp,-31
    int line[size_b][size_a + size_b];
     2ac:	0200                	addi	s0,sp,256
     2ae:	0104                	addi	s1,sp,128
     2b0:	0306                	slli	t1,t1,0x1
     2b2:	0900                	addi	s0,sp,144
     2b4:	0002                	c.slli64	zero
     2b6:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b8:	0005                	c.nop	1
     2ba:	0402                	c.slli64	s0
     2bc:	0601                	addi	a2,a2,0
     2be:	00090003          	lb	zero,0(s2)
     2c2:	0100                	addi	s0,sp,128
     2c4:	0c05                	addi	s8,s8,1
    int pola[size_a];
     2c6:	06090903          	lb	s2,96(s2)
    int line[size_b][size_a + size_b];
     2ca:	0100                	addi	s0,sp,128
     2cc:	1105                	addi	sp,sp,-31
     2ce:	0200                	addi	s0,sp,256
     2d0:	0104                	addi	s1,sp,128
    int pola[size_a];
     2d2:	0306                	slli	t1,t1,0x1
     2d4:	0900                	addi	s0,sp,144
     2d6:	0002                	c.slli64	zero
     2d8:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     2da:	0005                	c.nop	1
    int pola[size_a];
     2dc:	0402                	c.slli64	s0
     2de:	0601                	addi	a2,a2,0
    int polb[size_b];
     2e0:	00090003          	lb	zero,0(s2)
     2e4:	0100                	addi	s0,sp,128
    int pola[size_a];
     2e6:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     2e8:	090a                	slli	s2,s2,0x2
     2ea:	0004                	0x4
    int line[size_b][size_a + size_b];
     2ec:	0501                	addi	a0,a0,0
    int polb[size_b];
     2ee:	00030607          	0x30607
    for (i = 0; i < size_b; ++i){
     2f2:	0009                	c.nop	2
     2f4:	0100                	addi	s0,sp,128
            product2[j] = 0;
     2f6:	1d05                	addi	s10,s10,-31
     2f8:	0200                	addi	s0,sp,256
     2fa:	0104                	addi	s1,sp,128
     2fc:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     2fe:	0908                	addi	a0,sp,144
     300:	0010                	0x10
    for(i = 0; i < size_a; ++i){
     302:	0501                	addi	a0,a0,0
     304:	0009                	c.nop	2
     306:	0402                	c.slli64	s0
    for(i = 0; i < size_b; ++i){
     308:	0601                	addi	a2,a2,0
     30a:	00090003          	lb	zero,0(s2)
    if(star_mult == 1){
     30e:	0100                	addi	s0,sp,128
     310:	1405                	addi	s0,s0,-31
     312:	04090103          	lb	sp,64(s2)
     316:	0100                	addi	s0,sp,128
     318:	0d05                	addi	s10,s10,1
     31a:	0200                	addi	s0,sp,256
     31c:	0304                	addi	s1,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0306                	slli	t1,t1,0x1
     320:	095e                	slli	s2,s2,0x17
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	0004                	0x4
     324:	0501                	addi	a0,a0,0
            product2[j] = 0;
     326:	0018                	0x18
     328:	0402                	c.slli64	s0
     32a:	01030603          	lb	a2,16(t1)
            line[i][j] = 0;
     32e:	0009                	c.nop	2
            product2[j] = 0;
     330:	0100                	addi	s0,sp,128
     332:	0200                	addi	s0,sp,256
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0304                	addi	s1,sp,384
     336:	06097f03          	0x6097f03
     33a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     33c:	0d05                	addi	s10,s10,1
     33e:	0200                	addi	s0,sp,256
     340:	0304                	addi	s1,sp,384
     342:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	0901                	addi	s2,s2,0
     346:	0004                	0x4
        pola[i] = a[i];
     348:	0501                	addi	a0,a0,0
     34a:	0018                	0x18
     34c:	0402                	c.slli64	s0
     34e:	00030603          	lb	a2,0(t1)
     352:	0009                	c.nop	2
     354:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     356:	2c05                	jal	586 <polydiv+0x186>
        pola[i] = a[i];
     358:	0200                	addi	s0,sp,256
     35a:	0304                	addi	s1,sp,384
    for(i = 0; i < size_a; ++i){
     35c:	0306                	slli	t1,t1,0x1
        polb[i] = b[i];
     35e:	097e                	slli	s2,s2,0x1f
     360:	0004                	0x4
     362:	0501                	addi	a0,a0,0
     364:	0014                	0x14
     366:	0402                	c.slli64	s0
     368:	0301                	addi	t1,t1,0
     36a:	0900                	addi	s0,sp,144
    for(i = 0; i < size_b; ++i){
     36c:	0004                	0x4
        polb[i] = b[i];
     36e:	0501                	addi	a0,a0,0
     370:	0009                	c.nop	2
    for(i = 0; i < size_b; ++i){
     372:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	0601                	addi	a2,a2,0
     376:	00090003          	lb	zero,0(s2)
     37a:	0100                	addi	s0,sp,128
     37c:	1d05                	addi	s10,s10,-31
     37e:	0200                	addi	s0,sp,256
     380:	0204                	addi	s1,sp,256
     382:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	097f                	0x97f
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	0004                	0x4
     388:	0501                	addi	a0,a0,0
     38a:	0103060f          	0x103060f
            for (k = size_a-1; k >= 0; k = k-1 ){
     38e:	0809                	addi	a6,a6,2
        for (j = size_b -1; j >= 0; j = j-1){
     390:	0100                	addi	s0,sp,128
     392:	0905                	addi	s2,s2,1
     394:	0306                	slli	t1,t1,0x1
     396:	0908                	addi	a0,sp,144
     398:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	0501                	addi	a0,a0,0
        array_add(product2,line[i],size_a+size_b-1);
     39c:	0614                	addi	a3,sp,768
     39e:	00090003          	lb	zero,0(s2)
     3a2:	0100                	addi	s0,sp,128
    for(i=0;i<size_b;++i){
     3a4:	1105                	addi	sp,sp,-31
     3a6:	06090003          	lb	zero,96(s2)
}
     3aa:	0100                	addi	s0,sp,128
     3ac:	1505                	addi	a0,a0,-31
     3ae:	04090203          	lb	tp,64(s2)
     3b2:	0100                	addi	s0,sp,128
     3b4:	0f05                	addi	t5,t5,1
     3b6:	0306                	slli	t1,t1,0x1
     3b8:	097f                	0x97f
     3ba:	0004                	0x4
     3bc:	0501                	addi	a0,a0,0
     3be:	0614                	addi	a3,sp,768
     3c0:	00090003          	lb	zero,0(s2)
     3c4:	0100                	addi	s0,sp,128
     3c6:	0f05                	addi	t5,t5,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c8:	04090003          	lb	zero,64(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3cc:	0100                	addi	s0,sp,128
     3ce:	0905                	addi	s2,s2,1
     3d0:	0200                	addi	s0,sp,256
     3d2:	0204                	addi	s1,sp,256
     3d4:	0306                	slli	t1,t1,0x1
     3d6:	00040903          	lb	s2,0(s0)
     3da:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3dc:	0402001b          	0x402001b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3e0:	0602                	c.slli64	a2
     3e2:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	0100                	addi	s0,sp,128
     3e8:	1d05                	addi	s10,s10,-31
        for (j = size_b -1; j >= 0; j = j-1){
     3ea:	0200                	addi	s0,sp,256
     3ec:	0204                	addi	s1,sp,256
     3ee:	04097b03          	0x4097b03
        array_add(product2,line[i],size_a+size_b-1);
     3f2:	0100                	addi	s0,sp,128
     3f4:	1105                	addi	sp,sp,-31
     3f6:	0200                	addi	s0,sp,256
     3f8:	0204                	addi	s1,sp,256
    for(i=0;i<size_b;++i){
     3fa:	04090503          	lb	a0,64(s2)
     3fe:	0100                	addi	s0,sp,128
    int v[size_N];
     400:	1d05                	addi	s10,s10,-31
     402:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     404:	0204                	addi	s1,sp,256
    int v[size_N];
     406:	0306                	slli	t1,t1,0x1
     408:	0004097b          	0x4097b
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     40c:	0501                	addi	a0,a0,0
     40e:	030d                	addi	t1,t1,3
     410:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     414:	0501                	addi	a0,a0,0
     416:	061f 0003 0009      	0x90003061f
     41c:	0100                	addi	s0,sp,128
     41e:	0905                	addi	s2,s2,1
     420:	0306                	slli	t1,t1,0x1
     422:	00040907          	0x40907
    int v[size_N];
     426:	0501                	addi	a0,a0,0
     428:	0614                	addi	a3,sp,768
     42a:	00090003          	lb	zero,0(s2)
    int q[size_N];
     42e:	0100                	addi	s0,sp,128
     430:	1105                	addi	sp,sp,-31
    int num_temp[size_N];
     432:	06090003          	lb	zero,96(s2)
    int denum_temp[size_D];
     436:	0100                	addi	s0,sp,128
     438:	1505                	addi	a0,a0,-31
     43a:	02090203          	lb	tp,32(s2)
    int num_temp[size_N];
     43e:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     440:	0f05                	addi	t5,t5,1
     442:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     444:	097f                	0x97f
     446:	0002                	c.slli64	zero
    int denum_temp[size_D];
     448:	0501                	addi	a0,a0,0
     44a:	0614                	addi	a3,sp,768
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44c:	00090003          	lb	zero,0(s2)
    int v[size_N];
     450:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     452:	0f05                	addi	t5,t5,1
    for (i = 0; i < size_N; ++i){
     454:	02090003          	lb	zero,32(s2)
     458:	0100                	addi	s0,sp,128
     45a:	0905                	addi	s2,s2,1
     45c:	0200                	addi	s0,sp,256
     45e:	0204                	addi	s1,sp,256
    for (i = 0; i < size_D; ++i) {
     460:	0306                	slli	t1,t1,0x1
     462:	00040903          	lb	s2,0(s0)
    for (i = 0; i < size_N; ++i){
     466:	0501                	addi	a0,a0,0
     468:	0402001b          	0x402001b
    for (i = size_D-1; i >= 0; i = i-1){
     46c:	0602                	c.slli64	a2
     46e:	00090003          	lb	zero,0(s2)
     472:	0100                	addi	s0,sp,128
     474:	1d05                	addi	s10,s10,-31
     476:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     478:	0204                	addi	s1,sp,256
     47a:	04097b03          	0x4097b03
    for (u = 0; u < mod; ++u){
     47e:	0100                	addi	s0,sp,128
     480:	1105                	addi	sp,sp,-31
     482:	0200                	addi	s0,sp,256
     484:	0204                	addi	s1,sp,256
        num_temp[i] = num[i];
     486:	04090503          	lb	a0,64(s2)
     48a:	0100                	addi	s0,sp,128
     48c:	1d05                	addi	s10,s10,-31
            num_temp[i] = num_temp[i] + mod;
     48e:	0200                	addi	s0,sp,256
        while (num_temp[i] < 0) {
     490:	0204                	addi	s1,sp,256
     492:	0306                	slli	t1,t1,0x1
     494:	0004097b          	0x4097b
        num_temp[i] = num_temp[i] % mod;
     498:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     49a:	030d                	addi	t1,t1,3
     49c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
        num_temp[i] = num_temp[i] % mod;
     4a0:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     4a2:	061f 0003 0009      	0x90003061f
        denum_temp[i] = denum[i];
     4a8:	0100                	addi	s0,sp,128
     4aa:	0705                	addi	a4,a4,1
     4ac:	04090703          	lb	a4,64(s2)
            denum_temp[i] = denum_temp[i] + mod;
     4b0:	0100                	addi	s0,sp,128
        while (denum_temp[i] < 0) {
     4b2:	1d05                	addi	s10,s10,-31
     4b4:	0200                	addi	s0,sp,256
     4b6:	0104                	addi	s1,sp,128
        denum_temp[i] = denum_temp[i] % mod;
     4b8:	0306                	slli	t1,t1,0x1
     4ba:	0901                	addi	s2,s2,0
    for (i = 0; i < size_D; ++i) {
     4bc:	0002                	c.slli64	zero
     4be:	0501                	addi	a0,a0,0
        denum_temp[i] = denum_temp[i] % mod;
     4c0:	0009                	c.nop	2
     4c2:	0402                	c.slli64	s0
    for (i = 0; i < size_D; ++i) {
     4c4:	0601                	addi	a2,a2,0
            denum_temp[i] = denum_temp[i] + mod;
     4c6:	00090003          	lb	zero,0(s2)
        q[i] = 0;
     4ca:	0100                	addi	s0,sp,128
     4cc:	0f05                	addi	t5,t5,1
     4ce:	04091003          	lh	zero,64(s2)
        v[i] = 0;
     4d2:	0100                	addi	s0,sp,128
        q[i] = 0;
     4d4:	1105                	addi	sp,sp,-31
     4d6:	0200                	addi	s0,sp,256
        v[i] = 0;
     4d8:	0104                	addi	s1,sp,128
     4da:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     4dc:	097f                	0x97f
     4de:	0002                	c.slli64	zero
        if( denum_temp[i] != 0 )
     4e0:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	0005                	c.nop	1
     4e4:	0402                	c.slli64	s0
        if ( (b_N*u)%mod == 1 )
     4e6:	0601                	addi	a2,a2,0
     4e8:	00090003          	lb	zero,0(s2)
     4ec:	0100                	addi	s0,sp,128
     4ee:	0c090003          	lb	zero,192(s2)
    for (u = 0; u < mod; ++u){
     4f2:	0100                	addi	s0,sp,128
        if( num_temp[i] != 0 )
     4f4:	0b05                	addi	s6,s6,1
    for (i = size_N-1; i >= 0; i = i-1){
     4f6:	02090703          	lb	a4,32(s2)
     4fa:	0100                	addi	s0,sp,128
     4fc:	1005                	c.nop	-31
     4fe:	0200                	addi	s0,sp,256
     500:	0104                	addi	s1,sp,128
     502:	0306                	slli	t1,t1,0x1
    while (d >= d2){
     504:	0900                	addi	s0,sp,144
     506:	0002                	c.slli64	zero
    for(i = 0; i < size_N; ++i){
     508:	0501                	addi	a0,a0,0
        result[i] = q[i];
     50a:	0005                	c.nop	1
     50c:	0402                	c.slli64	s0
     50e:	0601                	addi	a2,a2,0
     510:	00090003          	lb	zero,0(s2)
    for(i = 0; i < size_N; ++i){
     514:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     516:	0b05                	addi	s6,s6,1
     518:	04090703          	lb	a4,64(s2)
        result[i] = num_temp[i-size_N];
     51c:	0100                	addi	s0,sp,128
     51e:	1005                	c.nop	-31
     520:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     522:	0104                	addi	s1,sp,128
     524:	0306                	slli	t1,t1,0x1
}
     526:	0900                	addi	s0,sp,144
     528:	0002                	c.slli64	zero
     52a:	0501                	addi	a0,a0,0
     52c:	0005                	c.nop	1
     52e:	0402                	c.slli64	s0
     530:	0601                	addi	a2,a2,0
     532:	00090003          	lb	zero,0(s2)
     536:	0100                	addi	s0,sp,128
     538:	0306                	slli	t1,t1,0x1
     53a:	0905                	addi	s2,s2,1
     53c:	0004                	0x4
     53e:	0301                	addi	t1,t1,0
     540:	0902                	c.slli64	s2
     542:	0000                	unimp
     544:	0501                	addi	a0,a0,0
     546:	0601                	addi	a2,a2,0
     548:	00090103          	lb	sp,0(s2)
     54c:	0100                	addi	s0,sp,128
     54e:	1105                	addi	sp,sp,-31
        v[(d-d2)] = u*r_d;
     550:	0200                	addi	s0,sp,256
     552:	0304                	addi	s1,sp,384
     554:	0306                	slli	t1,t1,0x1
     556:	095d                	addi	s2,s2,23
     558:	0020                	addi	s0,sp,8
     55a:	0501                	addi	a0,a0,0
     55c:	0025                	c.nop	9
        for (i = 0; i < size_N; ++i){
     55e:	0402                	c.slli64	s0
     560:	00030603          	lb	a2,0(t1)
     564:	0409                	addi	s0,s0,2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     566:	0100                	addi	s0,sp,128
     568:	2b05                	jal	a98 <generate_keys+0x164>
     56a:	0200                	addi	s0,sp,256
     56c:	0304                	addi	s1,sp,384
     56e:	04090003          	lb	zero,64(s2)
     572:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     574:	2e05                	jal	8a4 <ext_euclid+0x254>
     576:	0200                	addi	s0,sp,256
     578:	0304                	addi	s1,sp,384
     57a:	02090003          	lb	zero,32(s2)
        for (i = 0; i < size_N; ++i){
     57e:	0100                	addi	s0,sp,128
     580:	2a05                	jal	6b0 <ext_euclid+0x60>
     582:	0200                	addi	s0,sp,256
     584:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     586:	06097f03          	0x6097f03
     58a:	0100                	addi	s0,sp,128
    array_add(q,v,size_N);
     58c:	2e05                	jal	8bc <ext_euclid+0x26c>
     58e:	0200                	addi	s0,sp,256
     590:	0304                	addi	s1,sp,384
     592:	02090103          	lb	sp,32(s2)
        for(i = 0; i < size_N; ++i){
     596:	0100                	addi	s0,sp,128
     598:	2505                	jal	bb8 <generate_keys+0x284>
     59a:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     59c:	0304                	addi	s1,sp,384
     59e:	04090003          	lb	zero,64(s2)
     5a2:	0100                	addi	s0,sp,128
     5a4:	2805                	jal	5d4 <polydiv+0x1d4>
     5a6:	0200                	addi	s0,sp,256
     5a8:	0304                	addi	s1,sp,384
     5aa:	0306                	slli	t1,t1,0x1
     5ac:	097f                	0x97f
            v[i] = v[i] % mod;
     5ae:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     5b0:	0501                	addi	a0,a0,0
     5b2:	0020                	addi	s0,sp,8
            v[i] = v[i] % mod;
     5b4:	0402                	c.slli64	s0
     5b6:	0301                	addi	t1,t1,0
     5b8:	0900                	addi	s0,sp,144
     5ba:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5bc:	0501                	addi	a0,a0,0
                product[i] = product[i] + mod;
     5be:	000d                	c.nop	3
     5c0:	0402                	c.slli64	s0
            while (product[i] < 0) {
     5c2:	0601                	addi	a2,a2,0
     5c4:	00090003          	lb	zero,0(s2)
            product[i] = product[i] % mod;
     5c8:	0100                	addi	s0,sp,128
     5ca:	2505                	jal	bea <generate_keys+0x2b6>
        for (i = 0; i < size_N; ++i){
     5cc:	0200                	addi	s0,sp,256
     5ce:	0204                	addi	s1,sp,256
            product[i] = product[i] % mod;
     5d0:	0306                	slli	t1,t1,0x1
     5d2:	097f                	0x97f
        for (i = 0; i < size_N; ++i){
     5d4:	0004                	0x4
            num_temp[i] = num_temp[i] - product[i];
     5d6:	0501                	addi	a0,a0,0
     5d8:	04020027          	0x4020027
     5dc:	0602                	c.slli64	a2
     5de:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     5e2:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] - product[i];
     5e4:	1405                	addi	s0,s0,-31
     5e6:	08090103          	lb	sp,128(s2)
        for (i = 0; i < size_N; ++i){
     5ea:	0100                	addi	s0,sp,128
                num_temp[i] = num_temp[i] + mod;
     5ec:	1105                	addi	sp,sp,-31
     5ee:	0200                	addi	s0,sp,256
            while (num_temp[i] < 0){
     5f0:	0304                	addi	s1,sp,384
     5f2:	0306                	slli	t1,t1,0x1
     5f4:	0908                	addi	a0,sp,144
            num_temp[i] = num_temp[i] % mod;
     5f6:	0004                	0x4
     5f8:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     5fa:	0029                	c.nop	10
     5fc:	0402                	c.slli64	s0
            num_temp[i] = num_temp[i] % mod;
     5fe:	00030603          	lb	a2,0(t1)
        for (i = 0; i < size_N; ++i){
     602:	0409                	addi	s0,s0,2
            q[i] = q[i] % mod;
     604:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     606:	2f05                	jal	d36 <ntru_deceypt+0x86>
     608:	0200                	addi	s0,sp,256
            q[i] = q[i] % mod;
     60a:	0304                	addi	s1,sp,384
     60c:	04090003          	lb	zero,64(s2)
     610:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     612:	3205                	jal	ffffff32 <_stack_start+0xfffeff32>
            if( num_temp[i] != 0 )
     614:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     616:	0304                	addi	s1,sp,384
     618:	02090003          	lb	zero,32(s2)
            v[i] = 0;
     61c:	0100                	addi	s0,sp,128
     61e:	2a05                	jal	74e <ext_euclid+0xfe>
     620:	0200                	addi	s0,sp,256
     622:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     624:	06097f03          	0x6097f03
     628:	0100                	addi	s0,sp,128
     62a:	3205                	jal	ffffff4a <_stack_start+0xfffeff4a>
        result[i] = q[i];
     62c:	0200                	addi	s0,sp,256
     62e:	0304                	addi	s1,sp,384
     630:	02090103          	lb	sp,32(s2)
     634:	0100                	addi	s0,sp,128
     636:	2905                	jal	a66 <generate_keys+0x132>
    for(i = 0; i < size_N; ++i){
     638:	0200                	addi	s0,sp,256
        result[i] = q[i];
     63a:	0304                	addi	s1,sp,384
    for(i = 0; i < size_N; ++i){
     63c:	04090003          	lb	zero,64(s2)
        result[i] = num_temp[i-size_N];
     640:	0100                	addi	s0,sp,128
     642:	2805                	jal	672 <ext_euclid+0x22>
     644:	0200                	addi	s0,sp,256
     646:	0304                	addi	s1,sp,384
     648:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     64a:	097f                	0x97f
     64c:	0004                	0x4
     64e:	0501                	addi	a0,a0,0
    int ri_2[size]; // MX-ring poly, a
     650:	0020                	addi	s0,sp,8
     652:	0402                	c.slli64	s0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     654:	0301                	addi	t1,t1,0
    int ri_2[size]; // MX-ring poly, a
     656:	0900                	addi	s0,sp,144
     658:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     65a:	0501                	addi	a0,a0,0
     65c:	000d                	c.nop	3
     65e:	0402                	c.slli64	s0
     660:	0601                	addi	a2,a2,0
     662:	00090003          	lb	zero,0(s2)
     666:	0100                	addi	s0,sp,128
     668:	2505                	jal	c88 <ntru_encyrpt+0x60>
     66a:	0200                	addi	s0,sp,256
     66c:	0204                	addi	s1,sp,256
     66e:	0306                	slli	t1,t1,0x1
     670:	097f                	0x97f
     672:	0004                	0x4
     674:	0501                	addi	a0,a0,0
    int ri_2[size]; // MX-ring poly, a
     676:	04020027          	0x4020027
     67a:	0602                	c.slli64	a2
    int ri_1[size]; // f-random poly, f[N] = 0, b
     67c:	00090003          	lb	zero,0(s2)
     680:	0100                	addi	s0,sp,128
    int ri[size];
     682:	0d05                	addi	s10,s10,1
     684:	0200                	addi	s0,sp,256
     686:	0304                	addi	s1,sp,384
    int ti_1[size]; // ti_1[0] = 1
     688:	0306                	slli	t1,t1,0x1
     68a:	090a                	slli	s2,s2,0x2
     68c:	0008                	0x8
    int ti[size];
     68e:	0501                	addi	a0,a0,0
     690:	0025                	c.nop	9
     692:	0402                	c.slli64	s0
    int qi_1[size];
     694:	00030603          	lb	a2,0(t1)
     698:	0009                	c.nop	2
    int temp[size];
     69a:	0100                	addi	s0,sp,128
     69c:	2c05                	jal	8cc <ext_euclid+0x27c>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     69e:	0200                	addi	s0,sp,256
     6a0:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     6a2:	02097f03          	0x2097f03
    int temp[size];
     6a6:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     6a8:	2505                	jal	cc8 <ntru_deceypt+0x18>
     6aa:	0200                	addi	s0,sp,256
        ti_2[i] = 0;
     6ac:	0304                	addi	s1,sp,384
     6ae:	04090103          	lb	sp,64(s2)
     6b2:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     6b4:	1805                	addi	a6,a6,-31
     6b6:	0200                	addi	s0,sp,256
    ti_1[0] = 1;
     6b8:	0304                	addi	s1,sp,384
     6ba:	04090003          	lb	zero,64(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6be:	0100                	addi	s0,sp,128
     6c0:	2c05                	jal	8f0 <ext_euclid+0x2a0>
     6c2:	0200                	addi	s0,sp,256
     6c4:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     6c6:	0306                	slli	t1,t1,0x1
     6c8:	097f                	0x97f
        ri_2[i] = polyR[i];
     6ca:	0004                	0x4
     6cc:	0501                	addi	a0,a0,0
     6ce:	0014                	0x14
     6d0:	0402                	c.slli64	s0
     6d2:	0301                	addi	t1,t1,0
     6d4:	0900                	addi	s0,sp,144
    for (i = 0; i < size; ++i) {
     6d6:	0000                	unimp
        ri_2[i] = polyR[i];
     6d8:	0501                	addi	a0,a0,0
     6da:	0009                	c.nop	2
        ri_1[i] = polyf[i];
     6dc:	0402                	c.slli64	s0
     6de:	0601                	addi	a2,a2,0
     6e0:	00090003          	lb	zero,0(s2)
     6e4:	0100                	addi	s0,sp,128
     6e6:	1d05                	addi	s10,s10,-31
     6e8:	0200                	addi	s0,sp,256
     6ea:	0204                	addi	s1,sp,256
        ti_2[i] = 0;
     6ec:	0306                	slli	t1,t1,0x1
     6ee:	097f                	0x97f
     6f0:	0004                	0x4
     6f2:	0501                	addi	a0,a0,0
        ti_1[i] = 0;
     6f4:	0103060f          	0x103060f
     6f8:	0809                	addi	a6,a6,2
     6fa:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     6fc:	0d05                	addi	s10,s10,1
     6fe:	0200                	addi	s0,sp,256
                ri_2[i] = ri_2[i] + mod;
     700:	0304                	addi	s1,sp,384
     702:	0306                	slli	t1,t1,0x1
            while (ri_2[i] < 0) {
     704:	0908                	addi	a0,sp,144
     706:	0004                	0x4
     708:	0501                	addi	a0,a0,0
            ri_2[i] = ri_2[i] % mod;
     70a:	0022                	c.slli	zero,0x8
     70c:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     70e:	00030603          	lb	a2,0(t1)
     712:	0009                	c.nop	2
     714:	0100                	addi	s0,sp,128
     716:	1805                	addi	a6,a6,-31
     718:	0200                	addi	s0,sp,256
     71a:	0304                	addi	s1,sp,384
     71c:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     720:	0100                	addi	s0,sp,128
     722:	2005                	jal	742 <ext_euclid+0xf2>
     724:	0200                	addi	s0,sp,256
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     726:	0304                	addi	s1,sp,384
     728:	04097f03          	0x4097f03
     72c:	0100                	addi	s0,sp,128
     72e:	2205                	jal	84e <ext_euclid+0x1fe>
     730:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     732:	0304                	addi	s1,sp,384
     734:	02090103          	lb	sp,32(s2)
     738:	0100                	addi	s0,sp,128
     73a:	1805                	addi	a6,a6,-31
     73c:	0200                	addi	s0,sp,256
     73e:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     740:	06090003          	lb	zero,96(s2)
     744:	0100                	addi	s0,sp,128
     746:	2005                	jal	766 <ext_euclid+0x116>
     748:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     74a:	0304                	addi	s1,sp,384
     74c:	0306                	slli	t1,t1,0x1
     74e:	097f                	0x97f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     750:	0006                	c.slli	zero,0x1
     752:	0501                	addi	a0,a0,0
     754:	0014                	0x14
     756:	0402                	c.slli64	s0
     758:	0301                	addi	t1,t1,0
     75a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     75c:	0000                	unimp
     75e:	0501                	addi	a0,a0,0
     760:	0009                	c.nop	2
     762:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     764:	0601                	addi	a2,a2,0
     766:	00090003          	lb	zero,0(s2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     76a:	0100                	addi	s0,sp,128
     76c:	2805                	jal	79c <ext_euclid+0x14c>
     76e:	0200                	addi	s0,sp,256
     770:	0204                	addi	s1,sp,256
     772:	0306                	slli	t1,t1,0x1
     774:	097f                	0x97f
     776:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     778:	0501                	addi	a0,a0,0
     77a:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     77e:	0609                	addi	a2,a2,2
     780:	0100                	addi	s0,sp,128
     782:	0905                	addi	s2,s2,1
     784:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     786:	0304                	addi	s1,sp,384
     788:	0306                	slli	t1,t1,0x1
     78a:	00040907          	0x40907
        for (i = 0; i < N + 1; ++i) {
     78e:	0501                	addi	a0,a0,0
     790:	0021                	c.nop	8
     792:	0402                	c.slli64	s0
     794:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     798:	0009                	c.nop	2
     79a:	0100                	addi	s0,sp,128
     79c:	2805                	jal	7cc <ext_euclid+0x17c>
    while (controlR != 0) {
     79e:	0200                	addi	s0,sp,256
        for (j = 0; j < mod; ++j) {
     7a0:	0304                	addi	s1,sp,384
            if (((ri_2[0] * j) % mod) == 1)
     7a2:	02097f03          	0x2097f03
        for (j = 0; j < mod; ++j) {
     7a6:	0100                	addi	s0,sp,128
     7a8:	2105                	jal	bc8 <generate_keys+0x294>
     7aa:	0200                	addi	s0,sp,256
     7ac:	0304                	addi	s1,sp,384
     7ae:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     7b2:	0100                	addi	s0,sp,128
    }
     7b4:	1405                	addi	s0,s0,-31
     7b6:	0200                	addi	s0,sp,256
     7b8:	0304                	addi	s1,sp,384
     7ba:	04090003          	lb	zero,64(s2)
     7be:	0100                	addi	s0,sp,128
     7c0:	2805                	jal	7f0 <ext_euclid+0x1a0>
     7c2:	0200                	addi	s0,sp,256
     7c4:	0304                	addi	s1,sp,384
     7c6:	0306                	slli	t1,t1,0x1
     7c8:	097f                	0x97f
     7ca:	0004                	0x4
     7cc:	0501                	addi	a0,a0,0
     7ce:	0346                	slli	t1,t1,0x11
     7d0:	090a                	slli	s2,s2,0x2
     7d2:	0002                	c.slli64	zero
     7d4:	0501                	addi	a0,a0,0
     7d6:	0305                	addi	t1,t1,1
     7d8:	0902                	c.slli64	s2
     7da:	0000                	unimp
     7dc:	0501                	addi	a0,a0,0
                ri_1[i] = ri_1[i] + mod;
     7de:	0646                	slli	a2,a2,0x11
     7e0:	00097e03          	0x97e03
            while (ri_1[i] < 0) {
     7e4:	0100                	addi	s0,sp,128
     7e6:	1d05                	addi	s10,s10,-31
            ri_1[i] = ri_1[i] % mod;
     7e8:	06090203          	lb	tp,96(s2)
        for (i = 0; i < N + 1; ++i) {
     7ec:	0100                	addi	s0,sp,128
     7ee:	4605                	li	a2,1
            ri_1[i] = ri_1[i] % mod;
     7f0:	08097e03          	0x8097e03
        for (i = 0; i < N + 1; ++i) {
     7f4:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     7f6:	0905                	addi	s2,s2,1
     7f8:	04090203          	lb	tp,64(s2)
     7fc:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7fe:	4605                	li	a2,1
     800:	0c097e03          	0xc097e03
            ri[i - (N + 1)] = res[i];
     804:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     806:	0c090003          	lb	zero,192(s2)
            temp[i] = ri_2[i] - ri[i];
     80a:	0100                	addi	s0,sp,128
     80c:	0905                	addi	s2,s2,1
     80e:	02090503          	lb	a0,32(s2)
     812:	0100                	addi	s0,sp,128
     814:	04097d03          	0x4097d03
        for (i = 0; i < N + 1; ++i) {
     818:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     81a:	08090303          	lb	t1,128(s2)
        for (i = 0; i < N + 1; ++i) {
     81e:	0100                	addi	s0,sp,128
     820:	08097d03          	0x8097d03
                temp[i] = temp[i] + mod;
     824:	0100                	addi	s0,sp,128
            while (temp[i] < 0) {
     826:	02090303          	lb	t1,32(s2)
     82a:	0100                	addi	s0,sp,128
            temp[i] = temp[i] % mod;
     82c:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     830:	0100                	addi	s0,sp,128
     832:	06097f03          	0x6097f03
            temp[i] = temp[i] % mod;
     836:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     838:	02090103          	lb	sp,32(s2)
            qi_1[i] = res1[i];
     83c:	0100                	addi	s0,sp,128
     83e:	04097c03          	0x4097c03
     842:	0100                	addi	s0,sp,128
     844:	0505                	addi	a0,a0,1
        for (i = 0; i < N + 1; ++i) {
     846:	0306                	slli	t1,t1,0x1
            qi_1[i] = res1[i];
     848:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     84a:	0002                	c.slli64	zero
                qi_1[i] = qi_1[i] + mod;
     84c:	0301                	addi	t1,t1,0
     84e:	0901                	addi	s2,s2,0
            while (qi_1[i] < 0) {
     850:	0000                	unimp
     852:	0301                	addi	t1,t1,0
     854:	0901                	addi	s2,s2,0
            qi_1[i] = qi_1[i] % mod;
     856:	0000                	unimp
     858:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     85a:	0901                	addi	s2,s2,0
     85c:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     85e:	0501                	addi	a0,a0,0
     860:	0609                	addi	a2,a2,2
        for (i = 0; i < N + 1; ++i) {
     862:	00090003          	lb	zero,0(s2)
            temp[i] = res2[i];
     866:	0100                	addi	s0,sp,128
     868:	0505                	addi	a0,a0,1
     86a:	0306                	slli	t1,t1,0x1
     86c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
        for (i = 0; i < N + 1; ++i) {
     870:	0501                	addi	a0,a0,0
            temp[i] = res2[i];
     872:	060c                	addi	a1,sp,768
        for (i = 0; i < N + 1; ++i) {
     874:	04090003          	lb	zero,64(s2)
                temp[i] = temp[i] + mod;
     878:	0100                	addi	s0,sp,128
     87a:	1905                	addi	s2,s2,-31
            while (temp[i] < 0) {
     87c:	02090303          	lb	t1,32(s2)
     880:	0100                	addi	s0,sp,128
     882:	1105                	addi	sp,sp,-31
            temp[i] = temp[i] % mod;
     884:	0200                	addi	s0,sp,256
     886:	0104                	addi	s1,sp,128
        for (i = 0; i < N + 1; ++i) {
     888:	0306                	slli	t1,t1,0x1
     88a:	097d                	addi	s2,s2,31
            temp[i] = temp[i] % mod;
     88c:	0008                	0x8
     88e:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     890:	0005                	c.nop	1
            ti[i] = ti_2[i] - temp[i];
     892:	0402                	c.slli64	s0
     894:	0601                	addi	a2,a2,0
     896:	00090003          	lb	zero,0(s2)
     89a:	0100                	addi	s0,sp,128
     89c:	0b05                	addi	s6,s6,1
     89e:	04090703          	lb	a4,64(s2)
     8a2:	0100                	addi	s0,sp,128
     8a4:	1005                	c.nop	-31
     8a6:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8a8:	0104                	addi	s1,sp,128
            ti[i] = ti_2[i] - temp[i];
     8aa:	0306                	slli	t1,t1,0x1
     8ac:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     8ae:	0002                	c.slli64	zero
     8b0:	0501                	addi	a0,a0,0
                ti[i] = ti[i] + mod;
     8b2:	0005                	c.nop	1
     8b4:	0402                	c.slli64	s0
            while (ti[i] < 0) {
     8b6:	0601                	addi	a2,a2,0
     8b8:	00090003          	lb	zero,0(s2)
            ti[i] = ti[i] % mod;
     8bc:	0100                	addi	s0,sp,128
     8be:	0b05                	addi	s6,s6,1
        for (i = 0; i < N + 1; ++i) {
     8c0:	04090503          	lb	a0,64(s2)
            ti[i] = ti[i] % mod;
     8c4:	0100                	addi	s0,sp,128
     8c6:	1005                	c.nop	-31
        for (i = 0; i < N + 1; ++i) {
     8c8:	0200                	addi	s0,sp,256
            ri_2[i] = ri_1[i];
     8ca:	0104                	addi	s1,sp,128
     8cc:	0306                	slli	t1,t1,0x1
     8ce:	0900                	addi	s0,sp,144
     8d0:	0002                	c.slli64	zero
     8d2:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     8d4:	0005                	c.nop	1
            ri_2[i] = ri_1[i];
     8d6:	0402                	c.slli64	s0
            ri_1[i] = ri[i];
     8d8:	0601                	addi	a2,a2,0
     8da:	00090003          	lb	zero,0(s2)
            ti_2[i] = ti_1[i];
     8de:	0100                	addi	s0,sp,128
     8e0:	0306                	slli	t1,t1,0x1
     8e2:	0906                	slli	s2,s2,0x1
     8e4:	0004                	0x4
     8e6:	0501                	addi	a0,a0,0
            ri_1[i] = ri[i];
     8e8:	00030607          	0x30607
            ti_2[i] = ti_1[i];
     8ec:	0009                	c.nop	2
     8ee:	0100                	addi	s0,sp,128
     8f0:	1d05                	addi	s10,s10,-31
            controlR += ri[i];
     8f2:	0200                	addi	s0,sp,256
            ti_2[i] = ti_1[i];
     8f4:	0104                	addi	s1,sp,128
     8f6:	0306                	slli	t1,t1,0x1
            ti_1[i] = ti[i];
     8f8:	0908                	addi	a0,sp,144
     8fa:	0010                	0x10
     8fc:	0501                	addi	a0,a0,0
     8fe:	0009                	c.nop	2
              qi_1[i] = 0;
     900:	0402                	c.slli64	s0
     902:	0601                	addi	a2,a2,0
     904:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     908:	0100                	addi	s0,sp,128
     90a:	1405                	addi	s0,s0,-31
            if (((ri_2[0] * j) % mod) == 1)
     90c:	04090103          	lb	sp,64(s2)
     910:	0100                	addi	s0,sp,128
     912:	0d05                	addi	s10,s10,1
     914:	0200                	addi	s0,sp,256
     916:	0304                	addi	s1,sp,384
     918:	0306                	slli	t1,t1,0x1
     91a:	00040967          	jalr	s2,s0
        for (j = 0; j < mod; ++j) {
     91e:	0501                	addi	a0,a0,0
            ti_2[i] = (ti_2[i] * j) % mod;
     920:	0019                	c.nop	6
        for (i = 0; i < N + 1; ++i) {
     922:	0402                	c.slli64	s0
     924:	01030603          	lb	a2,16(t1)
            ti_2[i] = (ti_2[i] * j) % mod;
     928:	0009                	c.nop	2
     92a:	0100                	addi	s0,sp,128
     92c:	1805                	addi	a6,a6,-31
     92e:	0200                	addi	s0,sp,256
     930:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     932:	06097f03          	0x6097f03
int* generate_keys(int N, int p, int q){
     936:	0100                	addi	s0,sp,128
     938:	0d05                	addi	s10,s10,1
     93a:	0200                	addi	s0,sp,256
     93c:	0304                	addi	s1,sp,384
     93e:	0306                	slli	t1,t1,0x1
     940:	0901                	addi	s2,s2,0
     942:	0004                	0x4
     944:	0501                	addi	a0,a0,0
     946:	0019                	c.nop	6
     948:	0402                	c.slli64	s0
     94a:	00030603          	lb	a2,0(t1)
     94e:	0009                	c.nop	2
     950:	0100                	addi	s0,sp,128
     952:	2c05                	jal	b82 <generate_keys+0x24e>
     954:	0200                	addi	s0,sp,256
     956:	0304                	addi	s1,sp,384
     958:	0306                	slli	t1,t1,0x1
     95a:	097e                	slli	s2,s2,0x1f
     95c:	0004                	0x4
     95e:	0501                	addi	a0,a0,0
     960:	0014                	0x14
     962:	0402                	c.slli64	s0
     964:	0301                	addi	t1,t1,0
     966:	0900                	addi	s0,sp,144
     968:	0004                	0x4
     96a:	0501                	addi	a0,a0,0
     96c:	0009                	c.nop	2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96e:	0402                	c.slli64	s0
     970:	0601                	addi	a2,a2,0
     972:	00090003          	lb	zero,0(s2)
     976:	0100                	addi	s0,sp,128
     978:	1d05                	addi	s10,s10,-31
     97a:	0200                	addi	s0,sp,256
     97c:	0204                	addi	s1,sp,256
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97e:	0306                	slli	t1,t1,0x1
     980:	097f                	0x97f
     982:	0004                	0x4
     984:	0501                	addi	a0,a0,0
     986:	0103060f          	0x103060f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     98a:	0809                	addi	a6,a6,2
     98c:	0100                	addi	s0,sp,128
     98e:	0905                	addi	s2,s2,1
     990:	0200                	addi	s0,sp,256
     992:	0304                	addi	s1,sp,384
     994:	0306                	slli	t1,t1,0x1
     996:	00040907          	0x40907
     99a:	0501                	addi	a0,a0,0
     99c:	0011                	c.nop	4
     99e:	0402                	c.slli64	s0
     9a0:	00030603          	lb	a2,0(t1)
     9a4:	0409                	addi	s0,s0,2
     9a6:	0100                	addi	s0,sp,128
     9a8:	1405                	addi	s0,s0,-31
     9aa:	0200                	addi	s0,sp,256
     9ac:	0304                	addi	s1,sp,384
     9ae:	04090003          	lb	zero,64(s2)
     9b2:	0100                	addi	s0,sp,128
     9b4:	1105                	addi	sp,sp,-31
     9b6:	0200                	addi	s0,sp,256
     9b8:	0304                	addi	s1,sp,384
     9ba:	02090003          	lb	zero,32(s2)
     9be:	0100                	addi	s0,sp,128
     9c0:	1c05                	addi	s8,s8,-31
     9c2:	0200                	addi	s0,sp,256
     9c4:	0304                	addi	s1,sp,384
     9c6:	04097f03          	0x4097f03
     9ca:	0100                	addi	s0,sp,128
     9cc:	1105                	addi	sp,sp,-31
     9ce:	0200                	addi	s0,sp,256
     9d0:	0304                	addi	s1,sp,384
     9d2:	02090103          	lb	sp,32(s2)
     9d6:	0100                	addi	s0,sp,128
     9d8:	1c05                	addi	s8,s8,-31
     9da:	0200                	addi	s0,sp,256
     9dc:	0304                	addi	s1,sp,384
     9de:	0306                	slli	t1,t1,0x1
     9e0:	097f                	0x97f
     9e2:	0004                	0x4
     9e4:	0501                	addi	a0,a0,0
     9e6:	0009                	c.nop	2
     9e8:	0402                	c.slli64	s0
     9ea:	09060303          	lb	t1,144(a2)
     9ee:	0002                	c.slli64	zero
     9f0:	0501                	addi	a0,a0,0
     9f2:	0011                	c.nop	4
    int polyR[N+1];
     9f4:	0402                	c.slli64	s0
     9f6:	00030603          	lb	a2,0(t1)
     9fa:	0409                	addi	s0,s0,2
     9fc:	0100                	addi	s0,sp,128
     9fe:	1405                	addi	s0,s0,-31
     a00:	0200                	addi	s0,sp,256
     a02:	0304                	addi	s1,sp,384
     a04:	04090003          	lb	zero,64(s2)
    polyR[N] = 1;
     a08:	0100                	addi	s0,sp,128
     a0a:	1105                	addi	sp,sp,-31
     a0c:	0200                	addi	s0,sp,256
     a0e:	0304                	addi	s1,sp,384
     a10:	02090003          	lb	zero,32(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a14:	0100                	addi	s0,sp,128
     a16:	1c05                	addi	s8,s8,-31
     a18:	0200                	addi	s0,sp,256
     a1a:	0304                	addi	s1,sp,384
     a1c:	04097f03          	0x4097f03
     a20:	0100                	addi	s0,sp,128
     a22:	1105                	addi	sp,sp,-31
     a24:	0200                	addi	s0,sp,256
     a26:	0304                	addi	s1,sp,384
     a28:	02090103          	lb	sp,32(s2)
     a2c:	0100                	addi	s0,sp,128
     a2e:	1c05                	addi	s8,s8,-31
     a30:	0200                	addi	s0,sp,256
     a32:	0304                	addi	s1,sp,384
     a34:	0306                	slli	t1,t1,0x1
     a36:	097f                	0x97f
     a38:	0004                	0x4
     a3a:	0501                	addi	a0,a0,0
     a3c:	0011                	c.nop	4
     a3e:	0402                	c.slli64	s0
     a40:	09090303          	lb	t1,144(s2)
     a44:	0002                	c.slli64	zero
     a46:	0501                	addi	a0,a0,0
     a48:	0025                	c.nop	9
     a4a:	0402                	c.slli64	s0
     a4c:	00030603          	lb	a2,0(t1)
     a50:	0409                	addi	s0,s0,2
     a52:	0100                	addi	s0,sp,128
     a54:	2b05                	jal	f84 <main+0x10>
     a56:	0200                	addi	s0,sp,256
     a58:	0304                	addi	s1,sp,384
     a5a:	04090003          	lb	zero,64(s2)
     a5e:	0100                	addi	s0,sp,128
     a60:	2e05                	jal	d90 <reset_handler+0x14>
     a62:	0200                	addi	s0,sp,256
     a64:	0304                	addi	s1,sp,384
     a66:	02090003          	lb	zero,32(s2)
     a6a:	0100                	addi	s0,sp,128
     a6c:	2a05                	jal	b9c <generate_keys+0x268>
     a6e:	0200                	addi	s0,sp,256
     a70:	0304                	addi	s1,sp,384
     a72:	06097f03          	0x6097f03
    polyR[0] = -1;
     a76:	0100                	addi	s0,sp,128
     a78:	2e05                	jal	da8 <reset_handler+0x2c>
    for(i = 1; i < N; ++i){
     a7a:	0200                	addi	s0,sp,256
     a7c:	0304                	addi	s1,sp,384
     a7e:	02090103          	lb	sp,32(s2)
    for (i = N; i < 55; ++i ){
     a82:	0100                	addi	s0,sp,128
     a84:	2505                	jal	10a4 <main+0x130>
     a86:	0200                	addi	s0,sp,256
     a88:	0304                	addi	s1,sp,384
    for(i = 0; i < N; ++i){
     a8a:	04090003          	lb	zero,64(s2)
        random_keys[i] = f[i];
     a8e:	0100                	addi	s0,sp,128
     a90:	2805                	jal	ac0 <generate_keys+0x18c>
     a92:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     a94:	0304                	addi	s1,sp,384
     a96:	0306                	slli	t1,t1,0x1
     a98:	097f                	0x97f
     a9a:	0002                	c.slli64	zero
    for(i = N; i < (2*N); ++i){
     a9c:	0501                	addi	a0,a0,0
     a9e:	0020                	addi	s0,sp,8
     aa0:	0402                	c.slli64	s0
     aa2:	0301                	addi	t1,t1,0
        random_keys[i] = g[i-N];
     aa4:	0900                	addi	s0,sp,144
     aa6:	0000                	unimp
     aa8:	0501                	addi	a0,a0,0
     aaa:	000d                	c.nop	3
    for(i = N; i < (2*N); ++i){
     aac:	0402                	c.slli64	s0
     aae:	0601                	addi	a2,a2,0
    for(i = (2*N); i < (3*N); ++i){
     ab0:	00090003          	lb	zero,0(s2)
     ab4:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     ab6:	2505                	jal	10d6 <__DTOR_END__+0x1a>
     ab8:	0200                	addi	s0,sp,256
     aba:	0204                	addi	s1,sp,256
     abc:	0306                	slli	t1,t1,0x1
     abe:	097f                	0x97f
     ac0:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     ac2:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     ac4:	04020027          	0x4020027
     ac8:	0602                	c.slli64	a2
     aca:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     ace:	0100                	addi	s0,sp,128
    fq = ext_euclid(polyR, f, (N+1), q);
     ad0:	1d05                	addi	s10,s10,-31
     ad2:	0200                	addi	s0,sp,256
     ad4:	0104                	addi	s1,sp,128
     ad6:	0306                	slli	t1,t1,0x1
     ad8:	0900                	addi	s0,sp,144
     ada:	0006                	c.slli	zero,0x1
    for(i = (3*N); i < (4*N); ++i){
     adc:	0501                	addi	a0,a0,0
     ade:	0009                	c.nop	2
     ae0:	0402                	c.slli64	s0
     ae2:	0601                	addi	a2,a2,0
        random_keys[i] = fq[i-(3*N)];
     ae4:	00090003          	lb	zero,0(s2)
     ae8:	0100                	addi	s0,sp,128
     aea:	1405                	addi	s0,s0,-31
    for(i = (3*N); i < (4*N); ++i){
     aec:	04090803          	lb	a6,64(s2)
    fg = polymult2(fq, N, g, N, 0);
     af0:	0100                	addi	s0,sp,128
     af2:	0905                	addi	s2,s2,1
     af4:	02090a03          	lb	s4,32(s2)
     af8:	0100                	addi	s0,sp,128
     afa:	0d05                	addi	s10,s10,1
    for(i = 0; i < (2*N-1); ++i){
     afc:	0200                	addi	s0,sp,256
     afe:	0104                	addi	s1,sp,128
     b00:	0306                	slli	t1,t1,0x1
     b02:	097d                	addi	s2,s2,31
     b04:	0008                	0x8
     b06:	0501                	addi	a0,a0,0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b08:	0005                	c.nop	1
     b0a:	0402                	c.slli64	s0
     b0c:	0601                	addi	a2,a2,0
     b0e:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     b12:	0100                	addi	s0,sp,128
     b14:	0306                	slli	t1,t1,0x1
     b16:	00040907          	0x40907
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b1a:	0301                	addi	t1,t1,0
     b1c:	0902                	c.slli64	s2
     b1e:	0000                	unimp
     b20:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     b22:	0601                	addi	a2,a2,0
     b24:	00090103          	lb	sp,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     b28:	0100                	addi	s0,sp,128
     b2a:	1405                	addi	s0,s0,-31
        random_keys[i] = polyR[i-(5*N)];
     b2c:	20096803          	0x20096803
     b30:	0100                	addi	s0,sp,128
     b32:	1105                	addi	sp,sp,-31
    for(i = (5*N); i < (6*N+1); ++i){
     b34:	0200                	addi	s0,sp,256
     b36:	0304                	addi	s1,sp,384
     b38:	0306                	slli	t1,t1,0x1
     b3a:	0908                	addi	a0,sp,144
     b3c:	0004                	0x4
     b3e:	0501                	addi	a0,a0,0
}
     b40:	0029                	c.nop	10
     b42:	0402                	c.slli64	s0
     b44:	00030603          	lb	a2,0(t1)
     b48:	0409                	addi	s0,s0,2
     b4a:	0100                	addi	s0,sp,128
     b4c:	2f05                	jal	127c <_bss_start+0x3c>
     b4e:	0200                	addi	s0,sp,256
     b50:	0304                	addi	s1,sp,384
     b52:	04090003          	lb	zero,64(s2)
     b56:	0100                	addi	s0,sp,128
     b58:	3205                	jal	478 <polydiv+0x78>
     b5a:	0200                	addi	s0,sp,256
     b5c:	0304                	addi	s1,sp,384
     b5e:	02090003          	lb	zero,32(s2)
     b62:	0100                	addi	s0,sp,128
     b64:	2a05                	jal	c94 <ntru_encyrpt+0x6c>
     b66:	0200                	addi	s0,sp,256
     b68:	0304                	addi	s1,sp,384
     b6a:	06097f03          	0x6097f03
     b6e:	0100                	addi	s0,sp,128
     b70:	3205                	jal	490 <polydiv+0x90>
     b72:	0200                	addi	s0,sp,256
     b74:	0304                	addi	s1,sp,384
     b76:	02090103          	lb	sp,32(s2)
     b7a:	0100                	addi	s0,sp,128
     b7c:	2905                	jal	fac <main+0x38>
     b7e:	0200                	addi	s0,sp,256
        polyR[i] = 0;
     b80:	0304                	addi	s1,sp,384
     b82:	04090003          	lb	zero,64(s2)
     b86:	0100                	addi	s0,sp,128
     b88:	2805                	jal	bb8 <generate_keys+0x284>
    for(i = 1; i < N; ++i){
     b8a:	0200                	addi	s0,sp,256
     b8c:	0304                	addi	s1,sp,384
        f[i] = 0;
     b8e:	0306                	slli	t1,t1,0x1
     b90:	097f                	0x97f
     b92:	0004                	0x4
     b94:	0501                	addi	a0,a0,0
     b96:	0020                	addi	s0,sp,8
     b98:	0402                	c.slli64	s0
     b9a:	0301                	addi	t1,t1,0
        g[i] = 0;
     b9c:	0900                	addi	s0,sp,144
     b9e:	0000                	unimp
     ba0:	0501                	addi	a0,a0,0
     ba2:	000d                	c.nop	3
     ba4:	0402                	c.slli64	s0
    for (i = N; i < 55; ++i ){
     ba6:	0601                	addi	a2,a2,0
     ba8:	00090003          	lb	zero,0(s2)
        random_keys[i] = f[i];
     bac:	0100                	addi	s0,sp,128
     bae:	2505                	jal	11ce <__DTOR_END__+0x112>
     bb0:	0200                	addi	s0,sp,256
     bb2:	0204                	addi	s1,sp,256
     bb4:	0306                	slli	t1,t1,0x1
     bb6:	097f                	0x97f
     bb8:	0004                	0x4
    for(i = 0; i < N; ++i){
     bba:	0501                	addi	a0,a0,0
        random_keys[i] = f[i];
     bbc:	04020027          	0x4020027
        random_keys[i] = g[i-N];
     bc0:	0602                	c.slli64	a2
     bc2:	00090003          	lb	zero,0(s2)
     bc6:	0100                	addi	s0,sp,128
     bc8:	0905                	addi	s2,s2,1
    for(i = N; i < (2*N); ++i){
     bca:	0200                	addi	s0,sp,256
     bcc:	0304                	addi	s1,sp,384
     bce:	0306                	slli	t1,t1,0x1
        random_keys[i] = fp[i-(2*N)];
     bd0:	0008090b          	0x8090b
     bd4:	0501                	addi	a0,a0,0
     bd6:	0016                	c.slli	zero,0x5
     bd8:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     bda:	097d0303          	lb	t1,151(s10)
     bde:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     be0:	0501                	addi	a0,a0,0
     be2:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     be6:	0006                	c.slli	zero,0x1
     be8:	0501                	addi	a0,a0,0
     bea:	0305                	addi	t1,t1,1
     bec:	0902                	c.slli64	s2
    for(i = (3*N); i < (4*N); ++i){
     bee:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bf0:	0301                	addi	t1,t1,0
    for(i = (3*N); i < (4*N); ++i){
     bf2:	0901                	addi	s2,s2,0
        fg[i] = fg[i]*p;
     bf4:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bf6:	0301                	addi	t1,t1,0
     bf8:	0902                	c.slli64	s2
        fg[i] = fg[i]*p;
     bfa:	0000                	unimp
     bfc:	0501                	addi	a0,a0,0
     bfe:	0609                	addi	a2,a2,2
     c00:	00090003          	lb	zero,0(s2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c04:	0100                	addi	s0,sp,128
     c06:	4305                	li	t1,1
     c08:	04097b03          	0x4097b03
     c0c:	0100                	addi	s0,sp,128
     c0e:	0905                	addi	s2,s2,1
    for(i = (4*N); i < (5*N); ++i){
     c10:	02090503          	lb	a0,32(s2)
        random_keys[i] = polyR[i-(5*N)];
     c14:	0100                	addi	s0,sp,128
     c16:	4305                	li	t1,1
     c18:	04097b03          	0x4097b03
     c1c:	0100                	addi	s0,sp,128
     c1e:	0905                	addi	s2,s2,1
     c20:	1c090503          	lb	a0,448(s2)
     c24:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c26:	06090103          	lb	sp,96(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	0100                	addi	s0,sp,128
     c2c:	06090203          	lb	tp,96(s2)
     c30:	0100                	addi	s0,sp,128
     c32:	04090103          	lb	sp,64(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c38:	08097f03          	0x8097f03
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c3c:	0100                	addi	s0,sp,128
     c3e:	02090103          	lb	sp,32(s2)
     c42:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c44:	4305                	li	t1,1
     c46:	04097703          	0x4097703
     c4a:	0100                	addi	s0,sp,128
     c4c:	0905                	addi	s2,s2,1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4e:	04090903          	lb	s2,64(s2)
    temp = polymult(public_key,N,random_val,48,q,0);
     c52:	0100                	addi	s0,sp,128
     c54:	4305                	li	t1,1
     c56:	04097703          	0x4097703
     c5a:	0100                	addi	s0,sp,128
     c5c:	0905                	addi	s2,s2,1
     c5e:	02090503          	lb	a0,32(s2)
array_add(temp,message,48);
     c62:	0100                	addi	s0,sp,128
     c64:	0505                	addi	a0,a0,1
     c66:	0306                	slli	t1,t1,0x1
    temp = polymult(public_key,N,random_val,48,q,0);
     c68:	0901                	addi	s2,s2,0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0004                	0x4
     c6c:	0301                	addi	t1,t1,0
array_add(temp,message,48);
     c6e:	0901                	addi	s2,s2,0
     c70:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c72:	0301                	addi	t1,t1,0
     c74:	0901                	addi	s2,s2,0
     c76:	0000                	unimp
     c78:	0301                	addi	t1,t1,0
     c7a:	0901                	addi	s2,s2,0
     c7c:	0000                	unimp
     c7e:	0501                	addi	a0,a0,0
     c80:	0609                	addi	a2,a2,2
    for(i = (2*N); i < (3*N); ++i){
     c82:	00090003          	lb	zero,0(s2)
     c86:	0100                	addi	s0,sp,128
     c88:	0505                	addi	a0,a0,1
     c8a:	0306                	slli	t1,t1,0x1
     c8c:	0904                	addi	s1,sp,144
}
     c8e:	0002                	c.slli64	zero
     c90:	0501                	addi	a0,a0,0
     c92:	060c                	addi	a1,sp,768
     c94:	04090003          	lb	zero,64(s2)
     c98:	0100                	addi	s0,sp,128
     c9a:	1105                	addi	sp,sp,-31
     c9c:	0200                	addi	s0,sp,256
        CT[i-(2*N)] = CT[i];
     c9e:	0104                	addi	s1,sp,128
     ca0:	0306                	slli	t1,t1,0x1
     ca2:	0900                	addi	s0,sp,144
     ca4:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     ca6:	0501                	addi	a0,a0,0
     ca8:	0005                	c.nop	1
        CT[i-(2*N)] = CT[i];
     caa:	0402                	c.slli64	s0
     cac:	0601                	addi	a2,a2,0
    for(i = (2*N); i < (3*N); ++i){
     cae:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	0100                	addi	s0,sp,128
     cb4:	0c05                	addi	s8,s8,1
     cb6:	06090a03          	lb	s4,96(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cba:	0100                	addi	s0,sp,128
     cbc:	1105                	addi	sp,sp,-31
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbe:	0200                	addi	s0,sp,256
     cc0:	0104                	addi	s1,sp,128
     cc2:	0306                	slli	t1,t1,0x1
     cc4:	0900                	addi	s0,sp,144
     cc6:	0002                	c.slli64	zero
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc8:	0501                	addi	a0,a0,0
     cca:	0005                	c.nop	1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ccc:	0402                	c.slli64	s0
     cce:	0601                	addi	a2,a2,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd0:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd4:	0100                	addi	s0,sp,128
     cd6:	0c05                	addi	s8,s8,1
     cd8:	04090903          	lb	s2,64(s2)
     cdc:	0100                	addi	s0,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cde:	1105                	addi	sp,sp,-31
     ce0:	0200                	addi	s0,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce2:	0104                	addi	s1,sp,128
     ce4:	0306                	slli	t1,t1,0x1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce6:	0900                	addi	s0,sp,144
     ce8:	0002                	c.slli64	zero
     cea:	0501                	addi	a0,a0,0
     cec:	0005                	c.nop	1
     cee:	0402                	c.slli64	s0
     cf0:	0601                	addi	a2,a2,0
     cf2:	00090003          	lb	zero,0(s2)
     cf6:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	1805                	addi	a6,a6,-31
     cfa:	0200                	addi	s0,sp,256
     cfc:	0104                	addi	s1,sp,128
     cfe:	0306                	slli	t1,t1,0x1
     d00:	0906                	slli	s2,s2,0x1
        if(a2[i] <= q/2)
     d02:	0004                	0x4
     d04:	0501                	addi	a0,a0,0
     d06:	0005                	c.nop	1
    for (i = 0; i < N; ++i){
     d08:	0402                	c.slli64	s0
     d0a:	0601                	addi	a2,a2,0
     d0c:	08090003          	lb	zero,128(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     d10:	0100                	addi	s0,sp,128
     d12:	0c05                	addi	s8,s8,1
     d14:	0200                	addi	s0,sp,256
     d16:	0104                	addi	s1,sp,128
     d18:	04097a03          	0x4097a03
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d1c:	0100                	addi	s0,sp,128
     d1e:	0200                	addi	s0,sp,256
     d20:	0104                	addi	s1,sp,128
     d22:	04090f03          	lb	t5,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	0100                	addi	s0,sp,128
     d28:	1105                	addi	sp,sp,-31
     d2a:	0200                	addi	s0,sp,256
}
     d2c:	0104                	addi	s1,sp,128
     d2e:	0306                	slli	t1,t1,0x1
     d30:	097f                	0x97f
     d32:	0002                	c.slli64	zero
     d34:	0501                	addi	a0,a0,0
     d36:	0005                	c.nop	1
     d38:	0402                	c.slli64	s0
     d3a:	0601                	addi	a2,a2,0
     d3c:	00090003          	lb	zero,0(s2)
     d40:	0100                	addi	s0,sp,128
        a2[i-(2*N)] = a2[i];
     d42:	0905                	addi	s2,s2,1
     d44:	0306                	slli	t1,t1,0x1
     d46:	0960                	addi	s0,sp,156
     d48:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4a:	0501                	addi	a0,a0,0
     d4c:	061a                	slli	a2,a2,0x6
        a2[i-(2*N)] = a2[i];
     d4e:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     d54:	1505                	addi	a0,a0,-31
     d56:	06090003          	lb	zero,96(s2)
            a2[i] = (-1)*(q-a2[i]);
     d5a:	0100                	addi	s0,sp,128
     d5c:	1905                	addi	s2,s2,-31
     d5e:	02090203          	lb	tp,32(s2)
    for (i = 0; i < N; ++i){
     d62:	0100                	addi	s0,sp,128
     d64:	0f05                	addi	t5,t5,1
        c2[i-(2*N)] = c2[i];
     d66:	0306                	slli	t1,t1,0x1
     d68:	097f                	0x97f
     d6a:	0002                	c.slli64	zero
     d6c:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6e:	0618                	addi	a4,sp,768
     d70:	00090003          	lb	zero,0(s2)
        c2[i-(2*N)] = c2[i];
     d74:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d76:	0f05                	addi	t5,t5,1
  jal x0, default_exc_handler
     d78:	02090003          	lb	zero,32(s2)
  mv  x1, x0
     d7c:	0100                	addi	s0,sp,128
     d7e:	0905                	addi	s2,s2,1
  mv  x2, x1
     d80:	0200                	addi	s0,sp,256
  mv  x3, x1
     d82:	0204                	addi	s1,sp,256
  mv  x4, x1
     d84:	0306                	slli	t1,t1,0x1
  mv  x5, x1
     d86:	00040903          	lb	s2,0(s0)
  mv  x7, x1
     d8a:	0501                	addi	a0,a0,0
  mv  x8, x1
     d8c:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
  mv x10, x1
     d90:	0602                	c.slli64	a2
  mv x11, x1
     d92:	00090003          	lb	zero,0(s2)
  mv x13, x1
     d96:	0100                	addi	s0,sp,128
  mv x14, x1
     d98:	1d05                	addi	s10,s10,-31
  mv x15, x1
     d9a:	0200                	addi	s0,sp,256
  mv x16, x1
     d9c:	0204                	addi	s1,sp,256
  mv x17, x1
     d9e:	04097b03          	0x4097b03
  mv x19, x1
     da2:	0100                	addi	s0,sp,128
  mv x20, x1
     da4:	1505                	addi	a0,a0,-31
  mv x21, x1
     da6:	0200                	addi	s0,sp,256
  mv x22, x1
     da8:	0204                	addi	s1,sp,256
  mv x23, x1
     daa:	04090503          	lb	a0,64(s2)
  mv x25, x1
     dae:	0100                	addi	s0,sp,128
  mv x26, x1
     db0:	1d05                	addi	s10,s10,-31
  mv x27, x1
     db2:	0200                	addi	s0,sp,256
  mv x28, x1
     db4:	0204                	addi	s1,sp,256
  mv x29, x1
     db6:	0306                	slli	t1,t1,0x1
  mv x30, x1
     db8:	0004097b          	0x4097b
  la   x2, _stack_start
     dbc:	0501                	addi	a0,a0,0
     dbe:	030d                	addi	t1,t1,3
     dc0:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
  la x26, _bss_start
     dc4:	0501                	addi	a0,a0,0
     dc6:	00030627          	0x30627
     dca:	0009                	c.nop	2
  la x27, _bss_end
     dcc:	0100                	addi	s0,sp,128
     dce:	0905                	addi	s2,s2,1
     dd0:	0306                	slli	t1,t1,0x1
     dd2:	0908                	addi	a0,sp,144
  bge x26, x27, zero_loop_end
     dd4:	0004                	0x4
     dd6:	0501                	addi	a0,a0,0
  sw x0, 0(x26)
     dd8:	061e                	slli	a2,a2,0x7
     dda:	00090003          	lb	zero,0(s2)
  ble x26, x27, zero_loop
     dde:	0100                	addi	s0,sp,128
     de0:	1705                	addi	a4,a4,-31
  addi x10, x0, 0
     de2:	06090003          	lb	zero,96(s2)
  addi x11, x0, 0
     de6:	0100                	addi	s0,sp,128
     de8:	1b05                	addi	s6,s6,-31
  jal x1, main
     dea:	02090203          	lb	tp,32(s2)
     dee:	0100                	addi	s0,sp,128
     df0:	0f05                	addi	t5,t5,1
     df2:	0306                	slli	t1,t1,0x1
     df4:	097f                	0x97f
     df6:	0002                	c.slli64	zero
     df8:	0501                	addi	a0,a0,0
     dfa:	061a                	slli	a2,a2,0x6
     dfc:	00090003          	lb	zero,0(s2)
     e00:	0100                	addi	s0,sp,128
     e02:	0f05                	addi	t5,t5,1
     e04:	02090003          	lb	zero,32(s2)
     e08:	0100                	addi	s0,sp,128
     e0a:	0905                	addi	s2,s2,1
     e0c:	0200                	addi	s0,sp,256
     e0e:	0204                	addi	s1,sp,256
     e10:	0306                	slli	t1,t1,0x1
     e12:	00040903          	lb	s2,0(s0)
     e16:	0501                	addi	a0,a0,0
     e18:	04020027          	0x4020027
     e1c:	0602                	c.slli64	a2
     e1e:	00090003          	lb	zero,0(s2)
     e22:	0100                	addi	s0,sp,128
     e24:	1d05                	addi	s10,s10,-31
     e26:	0200                	addi	s0,sp,256
     e28:	0204                	addi	s1,sp,256
     e2a:	04097b03          	0x4097b03
     e2e:	0100                	addi	s0,sp,128
     e30:	1705                	addi	a4,a4,-31
     e32:	0200                	addi	s0,sp,256
     e34:	0204                	addi	s1,sp,256
     e36:	04090503          	lb	a0,64(s2)
     e3a:	0100                	addi	s0,sp,128
     e3c:	1d05                	addi	s10,s10,-31
     e3e:	0200                	addi	s0,sp,256
     e40:	0204                	addi	s1,sp,256
     e42:	0306                	slli	t1,t1,0x1
     e44:	0004097b          	0x4097b
     e48:	0501                	addi	a0,a0,0
     e4a:	030d                	addi	t1,t1,3
     e4c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     e50:	0501                	addi	a0,a0,0
     e52:	0003062b          	0x3062b
     e56:	0009                	c.nop	2
     e58:	0100                	addi	s0,sp,128
     e5a:	0905                	addi	s2,s2,1
     e5c:	0200                	addi	s0,sp,256
     e5e:	0304                	addi	s1,sp,384
     e60:	0306                	slli	t1,t1,0x1
     e62:	00040907          	0x40907
     e66:	0501                	addi	a0,a0,0
     e68:	000e                	c.slli	zero,0x3
     e6a:	0402                	c.slli64	s0
     e6c:	00030603          	lb	a2,0(t1)
     e70:	0409                	addi	s0,s0,2
     e72:	0100                	addi	s0,sp,128
     e74:	0200                	addi	s0,sp,256
     e76:	0304                	addi	s1,sp,384
     e78:	04090103          	lb	sp,64(s2)
     e7c:	0100                	addi	s0,sp,128
     e7e:	0200                	addi	s0,sp,256
     e80:	0304                	addi	s1,sp,384
     e82:	02097f03          	0x2097f03
     e86:	0100                	addi	s0,sp,128
     e88:	0905                	addi	s2,s2,1
     e8a:	0200                	addi	s0,sp,256
     e8c:	0304                	addi	s1,sp,384
     e8e:	0306                	slli	t1,t1,0x1
     e90:	0901                	addi	s2,s2,0
     e92:	0004                	0x4
     e94:	0501                	addi	a0,a0,0
     e96:	000e                	c.slli	zero,0x3
     e98:	0402                	c.slli64	s0
     e9a:	00030603          	lb	a2,0(t1)
     e9e:	0009                	c.nop	2
     ea0:	0100                	addi	s0,sp,128
     ea2:	1d05                	addi	s10,s10,-31
     ea4:	0200                	addi	s0,sp,256
     ea6:	0304                	addi	s1,sp,384
     ea8:	0306                	slli	t1,t1,0x1
     eaa:	097e                	slli	s2,s2,0x1f
     eac:	0004                	0x4
     eae:	0501                	addi	a0,a0,0
     eb0:	0309                	addi	t1,t1,2
     eb2:	00040907          	0x40907
     eb6:	0501                	addi	a0,a0,0
     eb8:	0003060b          	0x3060b
     ebc:	0009                	c.nop	2
     ebe:	0100                	addi	s0,sp,128
     ec0:	2005                	jal	ee0 <memset+0x14>
     ec2:	0200                	addi	s0,sp,256
     ec4:	0204                	addi	s1,sp,256
     ec6:	0306                	slli	t1,t1,0x1
     ec8:	097f                	0x97f
     eca:	0002                	c.slli64	zero
     ecc:	0501                	addi	a0,a0,0
     ece:	0022                	c.slli	zero,0x8
     ed0:	0402                	c.slli64	s0
     ed2:	0602                	c.slli64	a2
     ed4:	00090003          	lb	zero,0(s2)
     ed8:	0100                	addi	s0,sp,128
     eda:	0905                	addi	s2,s2,1
     edc:	0306                	slli	t1,t1,0x1
     ede:	0909                	addi	s2,s2,2
     ee0:	0004                	0x4
     ee2:	0501                	addi	a0,a0,0
     ee4:	0615                	addi	a2,a2,5
     ee6:	00090003          	lb	zero,0(s2)
     eea:	0100                	addi	s0,sp,128
     eec:	0c05                	addi	s8,s8,1
     eee:	06090003          	lb	zero,96(s2)
     ef2:	0100                	addi	s0,sp,128
     ef4:	1a05                	addi	s4,s4,-31
     ef6:	0200                	addi	s0,sp,256
     ef8:	0204                	addi	s1,sp,256
     efa:	0306                	slli	t1,t1,0x1
     efc:	097f                	0x97f
     efe:	0004                	0x4
     f00:	0501                	addi	a0,a0,0
     f02:	0309                	addi	t1,t1,2
     f04:	00040907          	0x40907
     f08:	0501                	addi	a0,a0,0
     f0a:	0003060b          	0x3060b
     f0e:	0009                	c.nop	2
     f10:	0100                	addi	s0,sp,128
     f12:	2005                	jal	f32 <memset+0x66>
     f14:	0200                	addi	s0,sp,256
     f16:	0204                	addi	s1,sp,256
     f18:	0306                	slli	t1,t1,0x1
     f1a:	097f                	0x97f
     f1c:	0002                	c.slli64	zero
     f1e:	0501                	addi	a0,a0,0
     f20:	0022                	c.slli	zero,0x8
     f22:	0402                	c.slli64	s0
     f24:	0602                	c.slli64	a2
     f26:	00090003          	lb	zero,0(s2)
     f2a:	0100                	addi	s0,sp,128
     f2c:	1805                	addi	a6,a6,-31
     f2e:	0200                	addi	s0,sp,256
     f30:	0104                	addi	s1,sp,128
     f32:	0306                	slli	t1,t1,0x1
     f34:	0900                	addi	s0,sp,144
     f36:	0002                	c.slli64	zero
     f38:	0501                	addi	a0,a0,0
     f3a:	0005                	c.nop	1
     f3c:	0402                	c.slli64	s0
     f3e:	0601                	addi	a2,a2,0
     f40:	08090003          	lb	zero,128(s2)
     f44:	0100                	addi	s0,sp,128
     f46:	0b05                	addi	s6,s6,1
     f48:	0306                	slli	t1,t1,0x1
     f4a:	090c                	addi	a1,sp,144
     f4c:	0004                	0x4
     f4e:	0601                	addi	a2,a2,0
     f50:	04093b03          	0x4093b03
     f54:	0100                	addi	s0,sp,128
     f56:	1305                	addi	t1,t1,-31
     f58:	02090103          	lb	sp,32(s2)
     f5c:	0100                	addi	s0,sp,128
     f5e:	1005                	c.nop	-31
     f60:	0200                	addi	s0,sp,256
     f62:	0104                	addi	s1,sp,128
     f64:	0306                	slli	t1,t1,0x1
     f66:	097f                	0x97f
     f68:	0008                	0x8
     f6a:	0501                	addi	a0,a0,0
     f6c:	0005                	c.nop	1
     f6e:	0402                	c.slli64	s0
     f70:	0601                	addi	a2,a2,0
     f72:	00090003          	lb	zero,0(s2)
int main(){
     f76:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f78:	1b05                	addi	s6,s6,-31
     f7a:	04090403          	lb	s0,64(s2)
     f7e:	0100                	addi	s0,sp,128
     f80:	1305                	addi	t1,t1,-31
     f82:	04090103          	lb	sp,64(s2)
int main(){
     f86:	0100                	addi	s0,sp,128
     f88:	1505                	addi	a0,a0,-31
     f8a:	0200                	addi	s0,sp,256
     f8c:	0104                	addi	s1,sp,128
     f8e:	0306                	slli	t1,t1,0x1
     f90:	097f                	0x97f
     f92:	0008                	0x8
     f94:	0501                	addi	a0,a0,0
    resultkon[0] = 0xaaaaaaa0;
     f96:	0005                	c.nop	1
     f98:	0402                	c.slli64	s0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f9a:	0601                	addi	a2,a2,0
    resultkon[0] = 0xaaaaaaa0;
     f9c:	00090003          	lb	zero,0(s2)
     fa0:	0100                	addi	s0,sp,128
     fa2:	0306                	slli	t1,t1,0x1
     fa4:	0904                	addi	s1,sp,144
     fa6:	0004                	0x4
    keys = generate_keys(N, p, q);
     fa8:	0301                	addi	t1,t1,0
     faa:	0902                	c.slli64	s2
     fac:	0000                	unimp
     fae:	0501                	addi	a0,a0,0
     fb0:	0601                	addi	a2,a2,0
    resultkon[0] = 0xaaaaaaa0;
     fb2:	00090103          	lb	sp,0(s2)
    resultkon[0] = 0xaaaaaaa1;
     fb6:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     fb8:	0905                	addi	s2,s2,1
    resultkon[0] = 0xaaaaaaa1;
     fba:	0306                	slli	t1,t1,0x1
     fbc:	7fbd                	lui	t6,0xfffef
    for(i = 0; i < N; ++i){
     fbe:	2a09                	jal	10d0 <__DTOR_END__+0x14>
     fc0:	0100                	addi	s0,sp,128
        secret_key_f[i] = keys[i];
     fc2:	1605                	addi	a2,a2,-31
     fc4:	0306                	slli	t1,t1,0x1
     fc6:	0900                	addi	s0,sp,144
     fc8:	0000                	unimp
     fca:	0501                	addi	a0,a0,0
     fcc:	030d                	addi	t1,t1,3
    for(i = 0; i < N; ++i){
     fce:	0900                	addi	s0,sp,144
     fd0:	0004                	0x4
     fd2:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     fd4:	09000313          	li	t1,144
     fd8:	0004                	0x4
     fda:	0501                	addi	a0,a0,0
     fdc:	0609                	addi	a2,a2,2
     fde:	06090203          	lb	tp,96(s2)
        secret_key_fp[i-(2*N)] = keys[i];
     fe2:	0100                	addi	s0,sp,128
     fe4:	1005                	c.nop	-31
     fe6:	0306                	slli	t1,t1,0x1
     fe8:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     fea:	0002                	c.slli64	zero
     fec:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     fee:	0015                	c.nop	5
     ff0:	0402                	c.slli64	s0
     ff2:	0601                	addi	a2,a2,0
     ff4:	02090003          	lb	zero,32(s2)
     ff8:	0100                	addi	s0,sp,128
        public_key[i-(4*N)] = keys[i];
     ffa:	0905                	addi	s2,s2,1
     ffc:	0200                	addi	s0,sp,256
     ffe:	0104                	addi	s1,sp,128
    1000:	0306                	slli	t1,t1,0x1
    1002:	0900                	addi	s0,sp,144
    for(i = (4*N); i < (5*N); ++i){
    1004:	0000                	unimp
    1006:	0601                	addi	a2,a2,0
    1008:	04090603          	lb	a2,64(s2)
    100c:	0100                	addi	s0,sp,128
    100e:	1305                	addi	t1,t1,-31
        ring_poly[i-(5*N)] = keys[i];
    1010:	0306                	slli	t1,t1,0x1
    1012:	0900                	addi	s0,sp,144
    1014:	0000                	unimp
    1016:	0501                	addi	a0,a0,0
    1018:	0609                	addi	a2,a2,2
    for(i = (5*N); i < (6*N+1); ++i){
    101a:	0e090303          	lb	t1,224(s2)
    resultkon[0] = 0xbbbbbbb0;
    101e:	0100                	addi	s0,sp,128
    1020:	1005                	c.nop	-31
    1022:	0306                	slli	t1,t1,0x1
    1024:	0900                	addi	s0,sp,144
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	0002                	c.slli64	zero
    1028:	0501                	addi	a0,a0,0
    102a:	0015                	c.nop	5
    102c:	0402                	c.slli64	s0
    resultkon[0] = 0xbbbbbbb1;
    102e:	0601                	addi	a2,a2,0
    1030:	02090003          	lb	zero,32(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
    1036:	0905                	addi	s2,s2,1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1038:	0200                	addi	s0,sp,256
    resultkon[0] = 0xbbbbbbb1;
    103a:	0104                	addi	s1,sp,128
    resultkon[0] = 0xccccccc0;
    103c:	0306                	slli	t1,t1,0x1
    103e:	0900                	addi	s0,sp,144
    1040:	0000                	unimp
    1042:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1044:	0310                	addi	a2,sp,384
    resultkon[0] = 0xccccccc0;
    1046:	0908                	addi	a0,sp,144
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1048:	0006                	c.slli	zero,0x1
    104a:	0501                	addi	a0,a0,0
    104c:	0015                	c.nop	5
    104e:	0402                	c.slli64	s0
    1050:	0601                	addi	a2,a2,0
    1052:	02090003          	lb	zero,32(s2)
    1056:	0100                	addi	s0,sp,128
    1058:	0905                	addi	s2,s2,1
    105a:	0200                	addi	s0,sp,256
    resultkon[0] = 0xccccccc1;	
    105c:	0104                	addi	s1,sp,128
    105e:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xDEDEDEDE;
    1060:	0900                	addi	s0,sp,144
    1062:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    1064:	0501                	addi	a0,a0,0
    1066:	0310                	addi	a2,sp,384
            resultkon[0] = 0xDEDEDEDE;
    1068:	0906                	slli	s2,s2,0x1
    106a:	0006                	c.slli	zero,0x1
    for(i = 0; i < 32; ++i){
    106c:	0501                	addi	a0,a0,0
    106e:	0015                	c.nop	5
        if(!(message[i] == Dec_Message[i])){
    1070:	0402                	c.slli64	s0
    1072:	0601                	addi	a2,a2,0
    1074:	02090003          	lb	zero,32(s2)
    1078:	0100                	addi	s0,sp,128
    107a:	0905                	addi	s2,s2,1
    107c:	0200                	addi	s0,sp,256
    107e:	0104                	addi	s1,sp,128
            resultkon[0] = 0xBABABABA;
    1080:	0306                	slli	t1,t1,0x1
    1082:	0900                	addi	s0,sp,144
    1084:	0000                	unimp
    1086:	0501                	addi	a0,a0,0
    1088:	0605                	addi	a2,a2,1
}
    108a:	04090803          	lb	a6,64(s2)
    108e:	0100                	addi	s0,sp,128
    1090:	0905                	addi	s2,s2,1
    1092:	08090103          	lb	sp,128(s2)
    1096:	0100                	addi	s0,sp,128
    1098:	0f05                	addi	t5,t5,1
    109a:	0306                	slli	t1,t1,0x1
    109c:	0900                	addi	s0,sp,144
    109e:	0002                	c.slli64	zero
    10a0:	0501                	addi	a0,a0,0
            resultkon[0] = 0xDEDEDEDE;
    10a2:	0014                	0x14
    for(i = 0; i < 32; ++i){
    10a4:	0402                	c.slli64	s0
    10a6:	0601                	addi	a2,a2,0
    10a8:	02090003          	lb	zero,32(s2)
    10ac:	0100                	addi	s0,sp,128
    10ae:	0905                	addi	s2,s2,1
    10b0:	0200                	addi	s0,sp,256
    10b2:	0104                	addi	s1,sp,128
    10b4:	0306                	slli	t1,t1,0x1
    10b6:	0900                	addi	s0,sp,144
    10b8:	0000                	unimp
    10ba:	0501                	addi	a0,a0,0
    10bc:	0310                	addi	a2,sp,384
    10be:	00040907          	0x40907
    10c2:	0501                	addi	a0,a0,0
    10c4:	001c                	0x1c
    10c6:	0402                	c.slli64	s0
    10c8:	0601                	addi	a2,a2,0
    10ca:	02090003          	lb	zero,32(s2)
    10ce:	0100                	addi	s0,sp,128
    10d0:	0905                	addi	s2,s2,1
    10d2:	0200                	addi	s0,sp,256
    10d4:	0104                	addi	s1,sp,128
    10d6:	0306                	slli	t1,t1,0x1
    10d8:	0900                	addi	s0,sp,144
    10da:	0008                	0x8
    10dc:	0501                	addi	a0,a0,0
    10de:	000d                	c.nop	3
    10e0:	0402                	c.slli64	s0
    10e2:	5a030603          	lb	a2,1440(t1)
    10e6:	0809                	addi	a6,a6,2
    10e8:	0100                	addi	s0,sp,128
    10ea:	1905                	addi	s2,s2,-31
    10ec:	0200                	addi	s0,sp,256
    10ee:	0304                	addi	s1,sp,384
    10f0:	0306                	slli	t1,t1,0x1
    10f2:	0900                	addi	s0,sp,144
    10f4:	0000                	unimp
    10f6:	0501                	addi	a0,a0,0
    10f8:	0021                	c.nop	8
    10fa:	0402                	c.slli64	s0
    10fc:	097f0303          	lb	t1,151(t5)
    1100:	0002                	c.slli64	zero
    1102:	0501                	addi	a0,a0,0
    1104:	0019                	c.nop	6
    1106:	0402                	c.slli64	s0
    1108:	09010303          	lb	t1,144(sp)
    110c:	0004                	0x4
    110e:	0501                	addi	a0,a0,0
    1110:	0012                	c.slli	zero,0x4
    1112:	0402                	c.slli64	s0
    1114:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1118:	0004                	0x4
    111a:	0501                	addi	a0,a0,0
    111c:	0021                	c.nop	8
    111e:	0402                	c.slli64	s0
    1120:	7f030603          	lb	a2,2032(t1)
    1124:	0409                	addi	s0,s0,2
    1126:	0100                	addi	s0,sp,128
    1128:	1105                	addi	sp,sp,-31
    112a:	02090b03          	lb	s6,32(s2)
    112e:	0100                	addi	s0,sp,128
    1130:	2905                	jal	1560 <product2+0xc8>
    1132:	0306                	slli	t1,t1,0x1
    1134:	0900                	addi	s0,sp,144
    1136:	0000                	unimp
    1138:	0501                	addi	a0,a0,0
    113a:	031c                	addi	a5,sp,384
    113c:	0900                	addi	s0,sp,144
    113e:	0002                	c.slli64	zero
    1140:	0501                	addi	a0,a0,0
    1142:	7f030613          	addi	a2,t1,2032
    1146:	0209                	addi	tp,tp,2
    1148:	0100                	addi	s0,sp,128
    114a:	1b05                	addi	s6,s6,-31
    114c:	0306                	slli	t1,t1,0x1
    114e:	0900                	addi	s0,sp,144
    1150:	0000                	unimp
    1152:	0501                	addi	a0,a0,0
    1154:	09000313          	li	t1,144
    1158:	0002                	c.slli64	zero
    115a:	0501                	addi	a0,a0,0
    115c:	000d                	c.nop	3
    115e:	0402                	c.slli64	s0
    1160:	0602                	c.slli64	a2
    1162:	04090303          	lb	t1,64(s2)
    1166:	0100                	addi	s0,sp,128
    1168:	2505                	jal	1788 <result+0x98>
    116a:	0200                	addi	s0,sp,256
    116c:	0204                	addi	s1,sp,256
    116e:	0306                	slli	t1,t1,0x1
    1170:	0900                	addi	s0,sp,144
    1172:	0000                	unimp
    1174:	0501                	addi	a0,a0,0
    1176:	0021                	c.nop	8
    1178:	0402                	c.slli64	s0
    117a:	0302                	c.slli64	t1
    117c:	097c                	addi	a5,sp,156
    117e:	0004                	0x4
    1180:	0501                	addi	a0,a0,0
    1182:	0018                	0x18
    1184:	0402                	c.slli64	s0
    1186:	0302                	c.slli64	t1
    1188:	0904                	addi	s1,sp,144
    118a:	0004                	0x4
    118c:	0501                	addi	a0,a0,0
    118e:	0021                	c.nop	8
    1190:	0402                	c.slli64	s0
    1192:	0602                	c.slli64	a2
    1194:	04097c03          	0x4097c03
    1198:	0100                	addi	s0,sp,128
    119a:	0d05                	addi	s10,s10,1
    119c:	0200                	addi	s0,sp,256
    119e:	0304                	addi	s1,sp,384
    11a0:	02090903          	lb	s2,32(s2)
    11a4:	0100                	addi	s0,sp,128
    11a6:	3005                	jal	9c6 <generate_keys+0x92>
    11a8:	0200                	addi	s0,sp,256
    11aa:	0304                	addi	s1,sp,384
    11ac:	0306                	slli	t1,t1,0x1
    11ae:	0900                	addi	s0,sp,144
    11b0:	0000                	unimp
    11b2:	0501                	addi	a0,a0,0
    11b4:	04020027          	0x4020027
    11b8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11bc:	0006                	c.slli	zero,0x1
    11be:	0501                	addi	a0,a0,0
    11c0:	0021                	c.nop	8
    11c2:	0402                	c.slli64	s0
    11c4:	097f0303          	lb	t1,151(t5)
    11c8:	0004                	0x4
    11ca:	0501                	addi	a0,a0,0
    11cc:	04020027          	0x4020027
    11d0:	09010303          	lb	t1,144(sp)
    11d4:	0004                	0x4
    11d6:	0501                	addi	a0,a0,0
    11d8:	0019                	c.nop	6
    11da:	0402                	c.slli64	s0
    11dc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11e0:	0002                	c.slli64	zero
    11e2:	0501                	addi	a0,a0,0
    11e4:	0021                	c.nop	8
    11e6:	0402                	c.slli64	s0
    11e8:	7f030603          	lb	a2,2032(t1)
    11ec:	0409                	addi	s0,s0,2
    11ee:	0100                	addi	s0,sp,128
    11f0:	1105                	addi	sp,sp,-31
    11f2:	02090803          	lb	a6,32(s2)
    11f6:	0100                	addi	s0,sp,128
    11f8:	2b05                	jal	1728 <result+0x38>
    11fa:	0306                	slli	t1,t1,0x1
    11fc:	0900                	addi	s0,sp,144
    11fe:	0000                	unimp
    1200:	0501                	addi	a0,a0,0
    1202:	031d                	addi	t1,t1,7
    1204:	0900                	addi	s0,sp,144
    1206:	0002                	c.slli64	zero
    1208:	0501                	addi	a0,a0,0
    120a:	7f030613          	addi	a2,t1,2032
    120e:	0209                	addi	tp,tp,2
    1210:	0100                	addi	s0,sp,128
    1212:	1c05                	addi	s8,s8,-31
    1214:	0306                	slli	t1,t1,0x1
    1216:	0900                	addi	s0,sp,144
    1218:	0000                	unimp
    121a:	0501                	addi	a0,a0,0
    121c:	09000313          	li	t1,144
    1220:	0002                	c.slli64	zero
    1222:	0501                	addi	a0,a0,0
    1224:	000d                	c.nop	3
    1226:	0402                	c.slli64	s0
    1228:	0602                	c.slli64	a2
    122a:	04090303          	lb	t1,64(s2)
    122e:	0100                	addi	s0,sp,128
    1230:	2705                	jal	1950 <ti_2+0x8>
    1232:	0200                	addi	s0,sp,256
    1234:	0204                	addi	s1,sp,256
    1236:	0306                	slli	t1,t1,0x1
    1238:	0900                	addi	s0,sp,144
    123a:	0000                	unimp
    123c:	0501                	addi	a0,a0,0
    123e:	0021                	c.nop	8
    1240:	0402                	c.slli64	s0
    1242:	0302                	c.slli64	t1
    1244:	097c                	addi	a5,sp,156
    1246:	0004                	0x4
    1248:	0501                	addi	a0,a0,0
    124a:	0019                	c.nop	6
    124c:	0402                	c.slli64	s0
    124e:	0302                	c.slli64	t1
    1250:	0904                	addi	s1,sp,144
    1252:	0004                	0x4
    1254:	0501                	addi	a0,a0,0
    1256:	0021                	c.nop	8
    1258:	0402                	c.slli64	s0
    125a:	0602                	c.slli64	a2
    125c:	04097c03          	0x4097c03
    1260:	0100                	addi	s0,sp,128
    1262:	0d05                	addi	s10,s10,1
    1264:	0200                	addi	s0,sp,256
    1266:	0304                	addi	s1,sp,384
    1268:	02090a03          	lb	s4,32(s2)
    126c:	0100                	addi	s0,sp,128
    126e:	1905                	addi	s2,s2,-31
    1270:	0200                	addi	s0,sp,256
    1272:	0304                	addi	s1,sp,384
    1274:	0306                	slli	t1,t1,0x1
    1276:	0900                	addi	s0,sp,144
    1278:	0000                	unimp
    127a:	0501                	addi	a0,a0,0
    127c:	0020                	addi	s0,sp,8
    127e:	0402                	c.slli64	s0
    1280:	097f0303          	lb	t1,151(t5)
    1284:	0002                	c.slli64	zero
    1286:	0501                	addi	a0,a0,0
    1288:	0019                	c.nop	6
    128a:	0402                	c.slli64	s0
    128c:	09010303          	lb	t1,144(sp)
    1290:	0004                	0x4
    1292:	0501                	addi	a0,a0,0
    1294:	0012                	c.slli	zero,0x4
    1296:	0402                	c.slli64	s0
    1298:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    129c:	0004                	0x4
    129e:	0501                	addi	a0,a0,0
    12a0:	0020                	addi	s0,sp,8
    12a2:	0402                	c.slli64	s0
    12a4:	7f030603          	lb	a2,2032(t1)
    12a8:	0409                	addi	s0,s0,2
    12aa:	0100                	addi	s0,sp,128
    12ac:	0d05                	addi	s10,s10,1
    12ae:	02090803          	lb	a6,32(s2)
    12b2:	0100                	addi	s0,sp,128
    12b4:	0f05                	addi	t5,t5,1
    12b6:	0306                	slli	t1,t1,0x1
    12b8:	0900                	addi	s0,sp,144
    12ba:	0000                	unimp
    12bc:	0501                	addi	a0,a0,0
    12be:	0024                	addi	s1,sp,8
    12c0:	0402                	c.slli64	s0
    12c2:	0602                	c.slli64	a2
    12c4:	02097f03          	0x2097f03
    12c8:	0100                	addi	s0,sp,128
    12ca:	2605                	jal	15ea <product2+0x152>
    12cc:	0200                	addi	s0,sp,256
    12ce:	0204                	addi	s1,sp,256
    12d0:	0306                	slli	t1,t1,0x1
    12d2:	0900                	addi	s0,sp,144
    12d4:	0000                	unimp
    12d6:	0501                	addi	a0,a0,0
    12d8:	000d                	c.nop	3
    12da:	0402                	c.slli64	s0
    12dc:	09030603          	lb	a2,144(t1)
    12e0:	0409                	addi	s0,s0,2
    12e2:	0100                	addi	s0,sp,128
    12e4:	1205                	addi	tp,tp,-31
    12e6:	0200                	addi	s0,sp,256
    12e8:	0304                	addi	s1,sp,384
    12ea:	0306                	slli	t1,t1,0x1
    12ec:	0900                	addi	s0,sp,144
    12ee:	0000                	unimp
    12f0:	0501                	addi	a0,a0,0
    12f2:	0021                	c.nop	8
    12f4:	0402                	c.slli64	s0
    12f6:	7f030603          	lb	a2,2032(t1)
    12fa:	0a09                	addi	s4,s4,2
    12fc:	0100                	addi	s0,sp,128
    12fe:	1505                	addi	a0,a0,-31
    1300:	0200                	addi	s0,sp,256
    1302:	0104                	addi	s1,sp,128
    1304:	02090003          	lb	zero,32(s2)
    1308:	0100                	addi	s0,sp,128
    130a:	0905                	addi	s2,s2,1
    130c:	0200                	addi	s0,sp,256
    130e:	0104                	addi	s1,sp,128
    1310:	0306                	slli	t1,t1,0x1
    1312:	0900                	addi	s0,sp,144
    1314:	0000                	unimp
    1316:	0001                	nop
    1318:	0402                	c.slli64	s0
    131a:	08030603          	lb	a2,128(t1)
    131e:	0609                	addi	a2,a2,2
    1320:	0100                	addi	s0,sp,128
    1322:	1305                	addi	t1,t1,-31
    1324:	0200                	addi	s0,sp,256
    1326:	0304                	addi	s1,sp,384
    1328:	0306                	slli	t1,t1,0x1
    132a:	0900                	addi	s0,sp,144
    132c:	0004                	0x4
    132e:	0501                	addi	a0,a0,0
    1330:	0016                	c.slli	zero,0x5
    1332:	0402                	c.slli64	s0
    1334:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1338:	0004                	0x4
    133a:	0501                	addi	a0,a0,0
    133c:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1340:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1344:	0002                	c.slli64	zero
    1346:	0501                	addi	a0,a0,0
    1348:	001c                	0x1c
    134a:	0402                	c.slli64	s0
    134c:	097f0303          	lb	t1,151(t5)
    1350:	0002                	c.slli64	zero
    1352:	0501                	addi	a0,a0,0
    1354:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1358:	09010303          	lb	t1,144(sp)
    135c:	0002                	c.slli64	zero
    135e:	0501                	addi	a0,a0,0
    1360:	001c                	0x1c
    1362:	0402                	c.slli64	s0
    1364:	7f030603          	lb	a2,2032(t1)
    1368:	0209                	addi	tp,tp,2
    136a:	0100                	addi	s0,sp,128
    136c:	0905                	addi	s2,s2,1
    136e:	0200                	addi	s0,sp,256
    1370:	0304                	addi	s1,sp,384
    1372:	02090503          	lb	a0,32(s2)
    1376:	0100                	addi	s0,sp,128
    1378:	1305                	addi	t1,t1,-31
    137a:	0200                	addi	s0,sp,256
    137c:	0304                	addi	s1,sp,384
    137e:	0306                	slli	t1,t1,0x1
    1380:	0900                	addi	s0,sp,144
    1382:	0000                	unimp
    1384:	0501                	addi	a0,a0,0
    1386:	0025                	c.nop	9
    1388:	0402                	c.slli64	s0
    138a:	7f030603          	lb	a2,2032(t1)
    138e:	0c09                	addi	s8,s8,2
    1390:	0100                	addi	s0,sp,128
    1392:	3c05                	jal	dc2 <reset_handler+0x46>
    1394:	06090a03          	lb	s4,96(s2)
    1398:	0100                	addi	s0,sp,128
    139a:	0505                	addi	a0,a0,1
    139c:	00090203          	lb	tp,0(s2)
    13a0:	0100                	addi	s0,sp,128
    13a2:	00090103          	lb	sp,0(s2)
    13a6:	0100                	addi	s0,sp,128
    13a8:	00090103          	lb	sp,0(s2)
    13ac:	0100                	addi	s0,sp,128
    13ae:	0905                	addi	s2,s2,1
    13b0:	0306                	slli	t1,t1,0x1
    13b2:	0900                	addi	s0,sp,144
    13b4:	0000                	unimp
    13b6:	0501                	addi	a0,a0,0
    13b8:	033c                	addi	a5,sp,392
    13ba:	097c                	addi	a5,sp,156
    13bc:	0004                	0x4
    13be:	0501                	addi	a0,a0,0
    13c0:	0309                	addi	t1,t1,2
    13c2:	0904                	addi	s1,sp,144
    13c4:	0002                	c.slli64	zero
    13c6:	0501                	addi	a0,a0,0
    13c8:	033c                	addi	a5,sp,392
    13ca:	097c                	addi	a5,sp,156
    13cc:	0004                	0x4
    13ce:	0501                	addi	a0,a0,0
    13d0:	0309                	addi	t1,t1,2
    13d2:	0904                	addi	s1,sp,144
    13d4:	001c                	0x1c
    13d6:	0301                	addi	t1,t1,0
    13d8:	0901                	addi	s2,s2,0
    13da:	0006                	c.slli	zero,0x1
    13dc:	0301                	addi	t1,t1,0
    13de:	0901                	addi	s2,s2,0
    13e0:	0006                	c.slli	zero,0x1
    13e2:	0301                	addi	t1,t1,0
    13e4:	0902                	c.slli64	s2
    13e6:	0006                	c.slli	zero,0x1
    13e8:	0301                	addi	t1,t1,0
    13ea:	0901                	addi	s2,s2,0
    13ec:	0006                	c.slli	zero,0x1
    13ee:	0301                	addi	t1,t1,0
    13f0:	0901                	addi	s2,s2,0
    13f2:	0006                	c.slli	zero,0x1
    13f4:	0301                	addi	t1,t1,0
    13f6:	0901                	addi	s2,s2,0
    13f8:	0006                	c.slli	zero,0x1
    13fa:	0501                	addi	a0,a0,0
    13fc:	033c                	addi	a5,sp,392
    13fe:	0975                	addi	s2,s2,29
    1400:	0004                	0x4
    1402:	0501                	addi	a0,a0,0
    1404:	0309                	addi	t1,t1,2
    1406:	0904                	addi	s1,sp,144
    1408:	0004                	0x4
    140a:	0501                	addi	a0,a0,0
    140c:	0605                	addi	a2,a2,1
    140e:	04090103          	lb	sp,64(s2)
    1412:	0100                	addi	s0,sp,128
    1414:	00090103          	lb	sp,0(s2)
    1418:	0100                	addi	s0,sp,128
    141a:	00090203          	lb	tp,0(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	00090103          	lb	sp,0(s2)
    1424:	0100                	addi	s0,sp,128
    1426:	00090103          	lb	sp,0(s2)
    142a:	0100                	addi	s0,sp,128
    142c:	00090103          	lb	sp,0(s2)
    1430:	0100                	addi	s0,sp,128
    1432:	0905                	addi	s2,s2,1
    1434:	0306                	slli	t1,t1,0x1
    1436:	0900                	addi	s0,sp,144
    1438:	0000                	unimp
    143a:	0501                	addi	a0,a0,0
    143c:	0605                	addi	a2,a2,1
    143e:	02090103          	lb	sp,32(s2)
    1442:	0100                	addi	s0,sp,128
    1444:	00090103          	lb	sp,0(s2)
    1448:	0100                	addi	s0,sp,128
    144a:	00090103          	lb	sp,0(s2)
    144e:	0100                	addi	s0,sp,128
    1450:	00090103          	lb	sp,0(s2)
    1454:	0100                	addi	s0,sp,128
    1456:	00090203          	lb	tp,0(s2)
    145a:	0100                	addi	s0,sp,128
    145c:	00090103          	lb	sp,0(s2)
    1460:	0100                	addi	s0,sp,128
    1462:	0c05                	addi	s8,s8,1
    1464:	0306                	slli	t1,t1,0x1
    1466:	0900                	addi	s0,sp,144
    1468:	0002                	c.slli64	zero
    146a:	0501                	addi	a0,a0,0
    146c:	0311                	addi	t1,t1,4
    146e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    1472:	0001                	nop
    1474:	0402                	c.slli64	s0
    1476:	0601                	addi	a2,a2,0
    1478:	08097d03          	0x8097d03
    147c:	0100                	addi	s0,sp,128
    147e:	0505                	addi	a0,a0,1
    1480:	0200                	addi	s0,sp,256
    1482:	0104                	addi	s1,sp,128
    1484:	0306                	slli	t1,t1,0x1
    1486:	0900                	addi	s0,sp,144
    1488:	0000                	unimp
    148a:	0601                	addi	a2,a2,0
    148c:	04090b03          	lb	s6,64(s2)
    1490:	0100                	addi	s0,sp,128
    1492:	0d05                	addi	s10,s10,1
    1494:	0306                	slli	t1,t1,0x1
    1496:	0900                	addi	s0,sp,144
    1498:	0000                	unimp
    149a:	0501                	addi	a0,a0,0
    149c:	0605                	addi	a2,a2,1
    149e:	06090303          	lb	t1,96(s2)
    14a2:	0100                	addi	s0,sp,128
    14a4:	0b05                	addi	s6,s6,1
    14a6:	00090003          	lb	zero,0(s2)
    14aa:	0100                	addi	s0,sp,128
    14ac:	2405                	jal	16cc <product2+0x234>
    14ae:	0306                	slli	t1,t1,0x1
    14b0:	0914                	addi	a3,sp,144
    14b2:	0000                	unimp
    14b4:	0501                	addi	a0,a0,0
    14b6:	0310                	addi	a2,sp,384
    14b8:	0970                	addi	a2,sp,156
    14ba:	0008                	0x8
    14bc:	0501                	addi	a0,a0,0
    14be:	0009                	c.nop	2
    14c0:	0402                	c.slli64	s0
    14c2:	6f030603          	lb	a2,1776(t1)
    14c6:	0409                	addi	s0,s0,2
    14c8:	0100                	addi	s0,sp,128
    14ca:	1805                	addi	a6,a6,-31
    14cc:	0200                	addi	s0,sp,256
    14ce:	0304                	addi	s1,sp,384
    14d0:	0306                	slli	t1,t1,0x1
    14d2:	0900                	addi	s0,sp,144
    14d4:	0000                	unimp
    14d6:	0501                	addi	a0,a0,0
    14d8:	0011                	c.nop	4
    14da:	0402                	c.slli64	s0
    14dc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    14e0:	0004                	0x4
    14e2:	0501                	addi	a0,a0,0
    14e4:	0402001b          	0x402001b
    14e8:	097f0303          	lb	t1,151(t5)
    14ec:	0008                	0x8
    14ee:	0501                	addi	a0,a0,0
    14f0:	0011                	c.nop	4
    14f2:	0402                	c.slli64	s0
    14f4:	09010303          	lb	t1,144(sp)
    14f8:	0002                	c.slli64	zero
    14fa:	0501                	addi	a0,a0,0
    14fc:	0009                	c.nop	2
    14fe:	0402                	c.slli64	s0
    1500:	01030603          	lb	a2,16(t1)
    1504:	0409                	addi	s0,s0,2
    1506:	0100                	addi	s0,sp,128
    1508:	1805                	addi	a6,a6,-31
    150a:	0200                	addi	s0,sp,256
    150c:	0304                	addi	s1,sp,384
    150e:	0306                	slli	t1,t1,0x1
    1510:	0900                	addi	s0,sp,144
    1512:	0000                	unimp
    1514:	0501                	addi	a0,a0,0
    1516:	0011                	c.nop	4
    1518:	0402                	c.slli64	s0
    151a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    151e:	0004                	0x4
    1520:	0501                	addi	a0,a0,0
    1522:	0009                	c.nop	2
    1524:	0402                	c.slli64	s0
    1526:	01030603          	lb	a2,16(t1)
    152a:	0c09                	addi	s8,s8,2
    152c:	0100                	addi	s0,sp,128
    152e:	1105                	addi	sp,sp,-31
    1530:	0200                	addi	s0,sp,256
    1532:	0304                	addi	s1,sp,384
    1534:	0306                	slli	t1,t1,0x1
    1536:	0900                	addi	s0,sp,144
    1538:	0000                	unimp
    153a:	0501                	addi	a0,a0,0
    153c:	0009                	c.nop	2
    153e:	0402                	c.slli64	s0
    1540:	01030603          	lb	a2,16(t1)
    1544:	0809                	addi	a6,a6,2
    1546:	0100                	addi	s0,sp,128
    1548:	1105                	addi	sp,sp,-31
    154a:	0200                	addi	s0,sp,256
    154c:	0304                	addi	s1,sp,384
    154e:	0306                	slli	t1,t1,0x1
    1550:	0900                	addi	s0,sp,144
    1552:	0000                	unimp
    1554:	0501                	addi	a0,a0,0
    1556:	0402001b          	0x402001b
    155a:	7c030603          	lb	a2,1984(t1)
    155e:	0809                	addi	a6,a6,2
    1560:	0100                	addi	s0,sp,128
    1562:	1105                	addi	sp,sp,-31
    1564:	04091403          	lh	s0,64(s2)
    1568:	0100                	addi	s0,sp,128
    156a:	2305                	jal	1a8a <ti_2+0x142>
    156c:	0306                	slli	t1,t1,0x1
    156e:	0900                	addi	s0,sp,144
    1570:	0000                	unimp
    1572:	0501                	addi	a0,a0,0
    1574:	0319                	addi	t1,t1,6
    1576:	0900                	addi	s0,sp,144
    1578:	0002                	c.slli64	zero
    157a:	0501                	addi	a0,a0,0
    157c:	7f030613          	addi	a2,t1,2032
    1580:	0209                	addi	tp,tp,2
    1582:	0100                	addi	s0,sp,128
    1584:	1805                	addi	a6,a6,-31
    1586:	0306                	slli	t1,t1,0x1
    1588:	0900                	addi	s0,sp,144
    158a:	0000                	unimp
    158c:	0501                	addi	a0,a0,0
    158e:	09000313          	li	t1,144
    1592:	0002                	c.slli64	zero
    1594:	0501                	addi	a0,a0,0
    1596:	000d                	c.nop	3
    1598:	0402                	c.slli64	s0
    159a:	0602                	c.slli64	a2
    159c:	04090303          	lb	t1,64(s2)
    15a0:	0100                	addi	s0,sp,128
    15a2:	1f05                	addi	t5,t5,-31
    15a4:	0200                	addi	s0,sp,256
    15a6:	0204                	addi	s1,sp,256
    15a8:	0306                	slli	t1,t1,0x1
    15aa:	0900                	addi	s0,sp,144
    15ac:	0000                	unimp
    15ae:	0501                	addi	a0,a0,0
    15b0:	0020                	addi	s0,sp,8
    15b2:	0402                	c.slli64	s0
    15b4:	0302                	c.slli64	t1
    15b6:	097c                	addi	a5,sp,156
    15b8:	0004                	0x4
    15ba:	0501                	addi	a0,a0,0
    15bc:	0015                	c.nop	5
    15be:	0402                	c.slli64	s0
    15c0:	0302                	c.slli64	t1
    15c2:	0904                	addi	s1,sp,144
    15c4:	0002                	c.slli64	zero
    15c6:	0501                	addi	a0,a0,0
    15c8:	0020                	addi	s0,sp,8
    15ca:	0402                	c.slli64	s0
    15cc:	0602                	c.slli64	a2
    15ce:	02097c03          	0x2097c03
    15d2:	0100                	addi	s0,sp,128
    15d4:	1505                	addi	a0,a0,-31
    15d6:	0200                	addi	s0,sp,256
    15d8:	0104                	addi	s1,sp,128
    15da:	00090003          	lb	zero,0(s2)
    15de:	0100                	addi	s0,sp,128
    15e0:	0905                	addi	s2,s2,1
    15e2:	0200                	addi	s0,sp,256
    15e4:	0104                	addi	s1,sp,128
    15e6:	0306                	slli	t1,t1,0x1
    15e8:	0900                	addi	s0,sp,144
    15ea:	0000                	unimp
    15ec:	0501                	addi	a0,a0,0
    15ee:	0310                	addi	a2,sp,384
    15f0:	0908                	addi	a0,sp,144
    15f2:	000e                	c.slli	zero,0x3
    15f4:	0501                	addi	a0,a0,0
    15f6:	0015                	c.nop	5
    15f8:	0402                	c.slli64	s0
    15fa:	0601                	addi	a2,a2,0
    15fc:	02090003          	lb	zero,32(s2)
    1600:	0100                	addi	s0,sp,128
    1602:	0905                	addi	s2,s2,1
    1604:	0200                	addi	s0,sp,256
    1606:	0104                	addi	s1,sp,128
    1608:	0306                	slli	t1,t1,0x1
    160a:	0900                	addi	s0,sp,144
    160c:	0000                	unimp
    160e:	0601                	addi	a2,a2,0
    1610:	04090703          	lb	a4,64(s2)
    1614:	0100                	addi	s0,sp,128
    1616:	0f05                	addi	t5,t5,1
    1618:	0306                	slli	t1,t1,0x1
    161a:	0900                	addi	s0,sp,144
    161c:	0000                	unimp
    161e:	0501                	addi	a0,a0,0
    1620:	0609                	addi	a2,a2,2
    1622:	0c090103          	lb	sp,192(s2)
    1626:	0100                	addi	s0,sp,128
    1628:	1905                	addi	s2,s2,-31
    162a:	0200                	addi	s0,sp,256
    162c:	0104                	addi	s1,sp,128
    162e:	04090003          	lb	zero,64(s2)
    1632:	0100                	addi	s0,sp,128
    1634:	0905                	addi	s2,s2,1
    1636:	0200                	addi	s0,sp,256
    1638:	0104                	addi	s1,sp,128
    163a:	0306                	slli	t1,t1,0x1
    163c:	0900                	addi	s0,sp,144
    163e:	0000                	unimp
    1640:	0501                	addi	a0,a0,0
    1642:	0310                	addi	a2,sp,384
    1644:	0906                	slli	s2,s2,0x1
    1646:	000a                	c.slli	zero,0x2
    1648:	0501                	addi	a0,a0,0
    164a:	0015                	c.nop	5
    164c:	0402                	c.slli64	s0
    164e:	0601                	addi	a2,a2,0
    1650:	02090003          	lb	zero,32(s2)
    1654:	0100                	addi	s0,sp,128
    1656:	0905                	addi	s2,s2,1
    1658:	0200                	addi	s0,sp,256
    165a:	0104                	addi	s1,sp,128
    165c:	0306                	slli	t1,t1,0x1
    165e:	0900                	addi	s0,sp,144
    1660:	0000                	unimp
    1662:	0301                	addi	t1,t1,0
    1664:	0900                	addi	s0,sp,144
    1666:	0006                	c.slli	zero,0x1
    1668:	0501                	addi	a0,a0,0
    166a:	0310                	addi	a2,sp,384
    166c:	0906                	slli	s2,s2,0x1
    166e:	0002                	c.slli64	zero
    1670:	0501                	addi	a0,a0,0
    1672:	0015                	c.nop	5
    1674:	0402                	c.slli64	s0
    1676:	0601                	addi	a2,a2,0
    1678:	02090003          	lb	zero,32(s2)
    167c:	0100                	addi	s0,sp,128
    167e:	0905                	addi	s2,s2,1
    1680:	0200                	addi	s0,sp,256
    1682:	0104                	addi	s1,sp,128
    1684:	0306                	slli	t1,t1,0x1
    1686:	0900                	addi	s0,sp,144
    1688:	0000                	unimp
    168a:	0601                	addi	a2,a2,0
    168c:	04090703          	lb	a4,64(s2)
    1690:	0100                	addi	s0,sp,128
    1692:	1005                	c.nop	-31
    1694:	0306                	slli	t1,t1,0x1
    1696:	0900                	addi	s0,sp,144
    1698:	0000                	unimp
    169a:	0501                	addi	a0,a0,0
    169c:	0609                	addi	a2,a2,2
    169e:	0c090103          	lb	sp,192(s2)
    16a2:	0100                	addi	s0,sp,128
    16a4:	1005                	c.nop	-31
    16a6:	0306                	slli	t1,t1,0x1
    16a8:	0900                	addi	s0,sp,144
    16aa:	0000                	unimp
    16ac:	0501                	addi	a0,a0,0
    16ae:	0015                	c.nop	5
    16b0:	0402                	c.slli64	s0
    16b2:	0601                	addi	a2,a2,0
    16b4:	02090003          	lb	zero,32(s2)
    16b8:	0100                	addi	s0,sp,128
    16ba:	0905                	addi	s2,s2,1
    16bc:	0200                	addi	s0,sp,256
    16be:	0104                	addi	s1,sp,128
    16c0:	0306                	slli	t1,t1,0x1
    16c2:	0900                	addi	s0,sp,144
    16c4:	0000                	unimp
    16c6:	0501                	addi	a0,a0,0
    16c8:	0310                	addi	a2,sp,384
    16ca:	0905                	addi	s2,s2,1
    16cc:	0006                	c.slli	zero,0x1
    16ce:	0501                	addi	a0,a0,0
    16d0:	0015                	c.nop	5
    16d2:	0402                	c.slli64	s0
    16d4:	0601                	addi	a2,a2,0
    16d6:	02090003          	lb	zero,32(s2)
    16da:	0100                	addi	s0,sp,128
    16dc:	0905                	addi	s2,s2,1
    16de:	0200                	addi	s0,sp,256
    16e0:	0104                	addi	s1,sp,128
    16e2:	0306                	slli	t1,t1,0x1
    16e4:	0900                	addi	s0,sp,144
    16e6:	0000                	unimp
    16e8:	0601                	addi	a2,a2,0
    16ea:	04090903          	lb	s2,64(s2)
    16ee:	0100                	addi	s0,sp,128
    16f0:	1005                	c.nop	-31
    16f2:	0306                	slli	t1,t1,0x1
    16f4:	0900                	addi	s0,sp,144
    16f6:	0000                	unimp
    16f8:	0501                	addi	a0,a0,0
    16fa:	0609                	addi	a2,a2,2
    16fc:	0e090103          	lb	sp,224(s2)
    1700:	0100                	addi	s0,sp,128
    1702:	1005                	c.nop	-31
    1704:	0306                	slli	t1,t1,0x1
    1706:	0900                	addi	s0,sp,144
    1708:	0000                	unimp
    170a:	0501                	addi	a0,a0,0
    170c:	0015                	c.nop	5
    170e:	0402                	c.slli64	s0
    1710:	0601                	addi	a2,a2,0
    1712:	02090003          	lb	zero,32(s2)
    1716:	0100                	addi	s0,sp,128
    1718:	0905                	addi	s2,s2,1
    171a:	0200                	addi	s0,sp,256
    171c:	0104                	addi	s1,sp,128
    171e:	0306                	slli	t1,t1,0x1
    1720:	0900                	addi	s0,sp,144
    1722:	0000                	unimp
    1724:	0501                	addi	a0,a0,0
    1726:	0310                	addi	a2,sp,384
    1728:	0905                	addi	s2,s2,1
    172a:	0004                	0x4
    172c:	0501                	addi	a0,a0,0
    172e:	0015                	c.nop	5
    1730:	0402                	c.slli64	s0
    1732:	0601                	addi	a2,a2,0
    1734:	02090003          	lb	zero,32(s2)
    1738:	0100                	addi	s0,sp,128
    173a:	0905                	addi	s2,s2,1
    173c:	0200                	addi	s0,sp,256
    173e:	0104                	addi	s1,sp,128
    1740:	0306                	slli	t1,t1,0x1
    1742:	0900                	addi	s0,sp,144
    1744:	0000                	unimp
    1746:	0501                	addi	a0,a0,0
    1748:	0310                	addi	a2,sp,384
    174a:	00060907          	0x60907
    174e:	0501                	addi	a0,a0,0
    1750:	0015                	c.nop	5
    1752:	0402                	c.slli64	s0
    1754:	0601                	addi	a2,a2,0
    1756:	02090003          	lb	zero,32(s2)
    175a:	0100                	addi	s0,sp,128
    175c:	0905                	addi	s2,s2,1
    175e:	0200                	addi	s0,sp,256
    1760:	0104                	addi	s1,sp,128
    1762:	0306                	slli	t1,t1,0x1
    1764:	0900                	addi	s0,sp,144
    1766:	0000                	unimp
    1768:	0501                	addi	a0,a0,0
    176a:	0310                	addi	a2,sp,384
    176c:	0905                	addi	s2,s2,1
    176e:	0006                	c.slli	zero,0x1
    1770:	0501                	addi	a0,a0,0
    1772:	0015                	c.nop	5
    1774:	0402                	c.slli64	s0
    1776:	0601                	addi	a2,a2,0
    1778:	02090003          	lb	zero,32(s2)
    177c:	0100                	addi	s0,sp,128
    177e:	0905                	addi	s2,s2,1
    1780:	0200                	addi	s0,sp,256
    1782:	0104                	addi	s1,sp,128
    1784:	0306                	slli	t1,t1,0x1
    1786:	0900                	addi	s0,sp,144
    1788:	0000                	unimp
    178a:	0501                	addi	a0,a0,0
    178c:	0312                	slli	t1,t1,0x4
    178e:	7fba                	flw	ft11,172(sp)
    1790:	0609                	addi	a2,a2,2
    1792:	0100                	addi	s0,sp,128
    1794:	1005                	c.nop	-31
    1796:	0900d003          	lhu	zero,144(ra)
    179a:	0002                	c.slli64	zero
    179c:	0501                	addi	a0,a0,0
    179e:	0015                	c.nop	5
    17a0:	0402                	c.slli64	s0
    17a2:	0601                	addi	a2,a2,0
    17a4:	02090003          	lb	zero,32(s2)
    17a8:	0100                	addi	s0,sp,128
    17aa:	0905                	addi	s2,s2,1
    17ac:	0200                	addi	s0,sp,256
    17ae:	0104                	addi	s1,sp,128
    17b0:	0306                	slli	t1,t1,0x1
    17b2:	0900                	addi	s0,sp,144
    17b4:	0000                	unimp
    17b6:	0501                	addi	a0,a0,0
    17b8:	ae03060b          	0xae03060b
    17bc:	097f                	0x97f
    17be:	0004                	0x4
    17c0:	0501                	addi	a0,a0,0
    17c2:	0610                	addi	a2,sp,768
    17c4:	0900dd03          	lhu	s10,144(ra)
    17c8:	0002                	c.slli64	zero
    17ca:	0301                	addi	t1,t1,0
    17cc:	0901                	addi	s2,s2,0
    17ce:	0002                	c.slli64	zero
    17d0:	0501                	addi	a0,a0,0
    17d2:	0015                	c.nop	5
    17d4:	0402                	c.slli64	s0
    17d6:	0601                	addi	a2,a2,0
    17d8:	02097f03          	0x2097f03
    17dc:	0100                	addi	s0,sp,128
    17de:	0905                	addi	s2,s2,1
    17e0:	0200                	addi	s0,sp,256
    17e2:	0104                	addi	s1,sp,128
    17e4:	0306                	slli	t1,t1,0x1
    17e6:	0900                	addi	s0,sp,144
    17e8:	0000                	unimp
    17ea:	0501                	addi	a0,a0,0
    17ec:	0015                	c.nop	5
    17ee:	0402                	c.slli64	s0
    17f0:	0601                	addi	a2,a2,0
    17f2:	0c090c03          	lb	s8,192(s2)
    17f6:	0100                	addi	s0,sp,128
    17f8:	0905                	addi	s2,s2,1
    17fa:	0200                	addi	s0,sp,256
    17fc:	0104                	addi	s1,sp,128
    17fe:	0306                	slli	t1,t1,0x1
    1800:	0900                	addi	s0,sp,144
    1802:	0000                	unimp
    1804:	0601                	addi	a2,a2,0
    1806:	04090503          	lb	a0,64(s2)
    180a:	0100                	addi	s0,sp,128
    180c:	00090103          	lb	sp,0(s2)
    1810:	0100                	addi	s0,sp,128
    1812:	0505                	addi	a0,a0,1
    1814:	0306                	slli	t1,t1,0x1
    1816:	0901                	addi	s2,s2,0
    1818:	0000                	unimp
    181a:	0501                	addi	a0,a0,0
    181c:	0611                	addi	a2,a2,4
    181e:	097f9e03          	lh	t3,151(t6) # fffef097 <_stack_start+0xfffdf097>
    1822:	002a                	c.slli	zero,0xa
    1824:	0501                	addi	a0,a0,0
    1826:	00030623          	sb	zero,12(t1)
    182a:	0009                	c.nop	2
    182c:	0100                	addi	s0,sp,128
    182e:	1905                	addi	s2,s2,-31
    1830:	02090003          	lb	zero,32(s2)
    1834:	0100                	addi	s0,sp,128
    1836:	1305                	addi	t1,t1,-31
    1838:	0306                	slli	t1,t1,0x1
    183a:	097f                	0x97f
    183c:	0002                	c.slli64	zero
    183e:	0501                	addi	a0,a0,0
    1840:	0618                	addi	a4,sp,768
    1842:	00090003          	lb	zero,0(s2)
    1846:	0100                	addi	s0,sp,128
    1848:	1305                	addi	t1,t1,-31
    184a:	02090003          	lb	zero,32(s2)
    184e:	0100                	addi	s0,sp,128
    1850:	0d05                	addi	s10,s10,1
    1852:	0200                	addi	s0,sp,256
    1854:	0204                	addi	s1,sp,256
    1856:	0306                	slli	t1,t1,0x1
    1858:	00040903          	lb	s2,0(s0)
    185c:	0501                	addi	a0,a0,0
    185e:	001f 0402 0602      	0x6020402001f
    1864:	00090003          	lb	zero,0(s2)
    1868:	0100                	addi	s0,sp,128
    186a:	2005                	jal	188a <result+0x19a>
    186c:	0200                	addi	s0,sp,256
    186e:	0204                	addi	s1,sp,256
    1870:	04097c03          	0x4097c03
    1874:	0100                	addi	s0,sp,128
    1876:	1505                	addi	a0,a0,-31
    1878:	0200                	addi	s0,sp,256
    187a:	0204                	addi	s1,sp,256
    187c:	04090403          	lb	s0,64(s2)
    1880:	0100                	addi	s0,sp,128
    1882:	2005                	jal	18a2 <result+0x1b2>
    1884:	0200                	addi	s0,sp,256
    1886:	0204                	addi	s1,sp,256
    1888:	0306                	slli	t1,t1,0x1
    188a:	097c                	addi	a5,sp,156
    188c:	0004                	0x4
    188e:	0501                	addi	a0,a0,0
    1890:	000d                	c.nop	3
    1892:	0402                	c.slli64	s0
    1894:	09090303          	lb	t1,144(s2)
    1898:	0002                	c.slli64	zero
    189a:	0501                	addi	a0,a0,0
    189c:	0022                	c.slli	zero,0x8
    189e:	0402                	c.slli64	s0
    18a0:	00030603          	lb	a2,0(t1)
    18a4:	0009                	c.nop	2
    18a6:	0100                	addi	s0,sp,128
    18a8:	1d05                	addi	s10,s10,-31
    18aa:	0200                	addi	s0,sp,256
    18ac:	0304                	addi	s1,sp,384
    18ae:	06090003          	lb	zero,96(s2)
    18b2:	0100                	addi	s0,sp,128
    18b4:	2a05                	jal	19e4 <ti_2+0x9c>
    18b6:	0200                	addi	s0,sp,256
    18b8:	0304                	addi	s1,sp,384
    18ba:	02097f03          	0x2097f03
    18be:	0100                	addi	s0,sp,128
    18c0:	1d05                	addi	s10,s10,-31
    18c2:	0200                	addi	s0,sp,256
    18c4:	0304                	addi	s1,sp,384
    18c6:	04090103          	lb	sp,64(s2)
    18ca:	0100                	addi	s0,sp,128
    18cc:	2a05                	jal	19fc <ti_2+0xb4>
    18ce:	0200                	addi	s0,sp,256
    18d0:	0304                	addi	s1,sp,384
    18d2:	0306                	slli	t1,t1,0x1
    18d4:	097f                	0x97f
    18d6:	0004                	0x4
    18d8:	0501                	addi	a0,a0,0
    18da:	000d                	c.nop	3
    18dc:	0402                	c.slli64	s0
    18de:	09070303          	lb	t1,144(a4)
    18e2:	0002                	c.slli64	zero
    18e4:	0501                	addi	a0,a0,0
    18e6:	0402001b          	0x402001b
    18ea:	00030603          	lb	a2,0(t1)
    18ee:	0009                	c.nop	2
    18f0:	0100                	addi	s0,sp,128
    18f2:	2305                	jal	1e12 <random_keys+0x33a>
    18f4:	0200                	addi	s0,sp,256
    18f6:	0304                	addi	s1,sp,384
    18f8:	04090003          	lb	zero,64(s2)
    18fc:	0100                	addi	s0,sp,128
    18fe:	1f05                	addi	t5,t5,-31
    1900:	0200                	addi	s0,sp,256
    1902:	0304                	addi	s1,sp,384
    1904:	04090003          	lb	zero,64(s2)
    1908:	0100                	addi	s0,sp,128
    190a:	1505                	addi	a0,a0,-31
    190c:	0200                	addi	s0,sp,256
    190e:	0304                	addi	s1,sp,384
    1910:	04090003          	lb	zero,64(s2)
    1914:	0100                	addi	s0,sp,128
    1916:	2005                	jal	1936 <result+0x246>
    1918:	0200                	addi	s0,sp,256
    191a:	0304                	addi	s1,sp,384
    191c:	04097f03          	0x4097f03
    1920:	0100                	addi	s0,sp,128
    1922:	1f05                	addi	t5,t5,-31
    1924:	0200                	addi	s0,sp,256
    1926:	0304                	addi	s1,sp,384
    1928:	02090103          	lb	sp,32(s2)
    192c:	0100                	addi	s0,sp,128
    192e:	1505                	addi	a0,a0,-31
    1930:	0200                	addi	s0,sp,256
    1932:	0304                	addi	s1,sp,384
    1934:	02090003          	lb	zero,32(s2)
    1938:	0100                	addi	s0,sp,128
    193a:	2005                	jal	195a <ti_2+0x12>
    193c:	0200                	addi	s0,sp,256
    193e:	0304                	addi	s1,sp,384
    1940:	0306                	slli	t1,t1,0x1
    1942:	097f                	0x97f
    1944:	0002                	c.slli64	zero
    1946:	0501                	addi	a0,a0,0
    1948:	0311                	addi	t1,t1,4
    194a:	0908                	addi	a0,sp,144
    194c:	0004                	0x4
    194e:	0501                	addi	a0,a0,0
    1950:	00030623          	sb	zero,12(t1)
    1954:	0009                	c.nop	2
    1956:	0100                	addi	s0,sp,128
    1958:	1905                	addi	s2,s2,-31
    195a:	02090003          	lb	zero,32(s2)
    195e:	0100                	addi	s0,sp,128
    1960:	1305                	addi	t1,t1,-31
    1962:	0306                	slli	t1,t1,0x1
    1964:	097f                	0x97f
    1966:	0002                	c.slli64	zero
    1968:	0501                	addi	a0,a0,0
    196a:	0618                	addi	a4,sp,768
    196c:	00090003          	lb	zero,0(s2)
    1970:	0100                	addi	s0,sp,128
    1972:	1305                	addi	t1,t1,-31
    1974:	02090003          	lb	zero,32(s2)
    1978:	0100                	addi	s0,sp,128
    197a:	0d05                	addi	s10,s10,1
    197c:	0200                	addi	s0,sp,256
    197e:	0204                	addi	s1,sp,256
    1980:	0306                	slli	t1,t1,0x1
    1982:	00040903          	lb	s2,0(s0)
    1986:	0501                	addi	a0,a0,0
    1988:	001f 0402 0602      	0x6020402001f
    198e:	00090003          	lb	zero,0(s2)
    1992:	0100                	addi	s0,sp,128
    1994:	2005                	jal	19b4 <ti_2+0x6c>
    1996:	0200                	addi	s0,sp,256
    1998:	0204                	addi	s1,sp,256
    199a:	04097c03          	0x4097c03
    199e:	0100                	addi	s0,sp,128
    19a0:	1505                	addi	a0,a0,-31
    19a2:	0200                	addi	s0,sp,256
    19a4:	0204                	addi	s1,sp,256
    19a6:	04090403          	lb	s0,64(s2)
    19aa:	0100                	addi	s0,sp,128
    19ac:	2005                	jal	19cc <ti_2+0x84>
    19ae:	0200                	addi	s0,sp,256
    19b0:	0204                	addi	s1,sp,256
    19b2:	0306                	slli	t1,t1,0x1
    19b4:	097c                	addi	a5,sp,156
    19b6:	0004                	0x4
    19b8:	0501                	addi	a0,a0,0
    19ba:	000d                	c.nop	3
    19bc:	0402                	c.slli64	s0
    19be:	09090303          	lb	t1,144(s2)
    19c2:	0002                	c.slli64	zero
    19c4:	0501                	addi	a0,a0,0
    19c6:	0402001b          	0x402001b
    19ca:	00030603          	lb	a2,0(t1)
    19ce:	0409                	addi	s0,s0,2
    19d0:	0100                	addi	s0,sp,128
    19d2:	1505                	addi	a0,a0,-31
    19d4:	0200                	addi	s0,sp,256
    19d6:	0304                	addi	s1,sp,384
    19d8:	06090003          	lb	zero,96(s2)
    19dc:	0100                	addi	s0,sp,128
    19de:	2005                	jal	19fe <ti_2+0xb6>
    19e0:	0200                	addi	s0,sp,256
    19e2:	0304                	addi	s1,sp,384
    19e4:	02097f03          	0x2097f03
    19e8:	0100                	addi	s0,sp,128
    19ea:	1505                	addi	a0,a0,-31
    19ec:	0200                	addi	s0,sp,256
    19ee:	0304                	addi	s1,sp,384
    19f0:	02090103          	lb	sp,32(s2)
    19f4:	0100                	addi	s0,sp,128
    19f6:	2005                	jal	1a16 <ti_2+0xce>
    19f8:	0200                	addi	s0,sp,256
    19fa:	0304                	addi	s1,sp,384
    19fc:	0306                	slli	t1,t1,0x1
    19fe:	097f                	0x97f
    1a00:	0002                	c.slli64	zero
    1a02:	0501                	addi	a0,a0,0
    1a04:	0311                	addi	t1,t1,4
    1a06:	00020907          	0x20907
    1a0a:	0501                	addi	a0,a0,0
    1a0c:	00030623          	sb	zero,12(t1)
    1a10:	0009                	c.nop	2
    1a12:	0100                	addi	s0,sp,128
    1a14:	1905                	addi	s2,s2,-31
    1a16:	02090003          	lb	zero,32(s2)
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	1305                	addi	t1,t1,-31
    1a1e:	0306                	slli	t1,t1,0x1
    1a20:	097f                	0x97f
    1a22:	0002                	c.slli64	zero
    1a24:	0501                	addi	a0,a0,0
    1a26:	0618                	addi	a4,sp,768
    1a28:	00090003          	lb	zero,0(s2)
    1a2c:	0100                	addi	s0,sp,128
    1a2e:	1305                	addi	t1,t1,-31
    1a30:	02090003          	lb	zero,32(s2)
    1a34:	0100                	addi	s0,sp,128
    1a36:	0d05                	addi	s10,s10,1
    1a38:	0200                	addi	s0,sp,256
    1a3a:	0204                	addi	s1,sp,256
    1a3c:	0306                	slli	t1,t1,0x1
    1a3e:	00040903          	lb	s2,0(s0)
    1a42:	0501                	addi	a0,a0,0
    1a44:	001f 0402 0602      	0x6020402001f
    1a4a:	00090003          	lb	zero,0(s2)
    1a4e:	0100                	addi	s0,sp,128
    1a50:	2005                	jal	1a70 <ti_2+0x128>
    1a52:	0200                	addi	s0,sp,256
    1a54:	0204                	addi	s1,sp,256
    1a56:	04097c03          	0x4097c03
    1a5a:	0100                	addi	s0,sp,128
    1a5c:	1505                	addi	a0,a0,-31
    1a5e:	0200                	addi	s0,sp,256
    1a60:	0204                	addi	s1,sp,256
    1a62:	04090403          	lb	s0,64(s2)
    1a66:	0100                	addi	s0,sp,128
    1a68:	2005                	jal	1a88 <ti_2+0x140>
    1a6a:	0200                	addi	s0,sp,256
    1a6c:	0204                	addi	s1,sp,256
    1a6e:	0306                	slli	t1,t1,0x1
    1a70:	097c                	addi	a5,sp,156
    1a72:	0004                	0x4
    1a74:	0501                	addi	a0,a0,0
    1a76:	000d                	c.nop	3
    1a78:	0402                	c.slli64	s0
    1a7a:	090b0303          	lb	t1,144(s6)
    1a7e:	0002                	c.slli64	zero
    1a80:	0501                	addi	a0,a0,0
    1a82:	0402001b          	0x402001b
    1a86:	00030603          	lb	a2,0(t1)
    1a8a:	0409                	addi	s0,s0,2
    1a8c:	0100                	addi	s0,sp,128
    1a8e:	1505                	addi	a0,a0,-31
    1a90:	0200                	addi	s0,sp,256
    1a92:	0304                	addi	s1,sp,384
    1a94:	06090003          	lb	zero,96(s2)
    1a98:	0100                	addi	s0,sp,128
    1a9a:	2005                	jal	1aba <ti_2+0x172>
    1a9c:	0200                	addi	s0,sp,256
    1a9e:	0304                	addi	s1,sp,384
    1aa0:	02097f03          	0x2097f03
    1aa4:	0100                	addi	s0,sp,128
    1aa6:	1505                	addi	a0,a0,-31
    1aa8:	0200                	addi	s0,sp,256
    1aaa:	0304                	addi	s1,sp,384
    1aac:	02090103          	lb	sp,32(s2)
    1ab0:	0100                	addi	s0,sp,128
    1ab2:	2005                	jal	1ad2 <ti_2+0x18a>
    1ab4:	0200                	addi	s0,sp,256
    1ab6:	0304                	addi	s1,sp,384
    1ab8:	0306                	slli	t1,t1,0x1
    1aba:	097f                	0x97f
    1abc:	0002                	c.slli64	zero
    1abe:	0501                	addi	a0,a0,0
    1ac0:	0311                	addi	t1,t1,4
    1ac2:	00020907          	0x20907
    1ac6:	0501                	addi	a0,a0,0
    1ac8:	00030623          	sb	zero,12(t1)
    1acc:	0009                	c.nop	2
    1ace:	0100                	addi	s0,sp,128
    1ad0:	1905                	addi	s2,s2,-31
    1ad2:	02090003          	lb	zero,32(s2)
    1ad6:	0100                	addi	s0,sp,128
    1ad8:	1305                	addi	t1,t1,-31
    1ada:	0306                	slli	t1,t1,0x1
    1adc:	097f                	0x97f
    1ade:	0004                	0x4
    1ae0:	0501                	addi	a0,a0,0
    1ae2:	0618                	addi	a4,sp,768
    1ae4:	00090003          	lb	zero,0(s2)
    1ae8:	0100                	addi	s0,sp,128
    1aea:	1305                	addi	t1,t1,-31
    1aec:	04090003          	lb	zero,64(s2)
    1af0:	0100                	addi	s0,sp,128
    1af2:	0d05                	addi	s10,s10,1
    1af4:	0200                	addi	s0,sp,256
    1af6:	0204                	addi	s1,sp,256
    1af8:	0306                	slli	t1,t1,0x1
    1afa:	00040903          	lb	s2,0(s0)
    1afe:	0501                	addi	a0,a0,0
    1b00:	001f 0402 0602      	0x6020402001f
    1b06:	00090003          	lb	zero,0(s2)
    1b0a:	0100                	addi	s0,sp,128
    1b0c:	2005                	jal	1b2c <random_keys+0x54>
    1b0e:	0200                	addi	s0,sp,256
    1b10:	0204                	addi	s1,sp,256
    1b12:	04097c03          	0x4097c03
    1b16:	0100                	addi	s0,sp,128
    1b18:	1505                	addi	a0,a0,-31
    1b1a:	0200                	addi	s0,sp,256
    1b1c:	0204                	addi	s1,sp,256
    1b1e:	04090403          	lb	s0,64(s2)
    1b22:	0100                	addi	s0,sp,128
    1b24:	2005                	jal	1b44 <random_keys+0x6c>
    1b26:	0200                	addi	s0,sp,256
    1b28:	0204                	addi	s1,sp,256
    1b2a:	0306                	slli	t1,t1,0x1
    1b2c:	097c                	addi	a5,sp,156
    1b2e:	0004                	0x4
    1b30:	0501                	addi	a0,a0,0
    1b32:	000d                	c.nop	3
    1b34:	0402                	c.slli64	s0
    1b36:	09080303          	lb	t1,144(a6) # 17090 <_stack_start+0x7090>
    1b3a:	0002                	c.slli64	zero
    1b3c:	0501                	addi	a0,a0,0
    1b3e:	0019                	c.nop	6
    1b40:	0402                	c.slli64	s0
    1b42:	00030603          	lb	a2,0(t1)
    1b46:	0009                	c.nop	2
    1b48:	0100                	addi	s0,sp,128
    1b4a:	2305                	jal	206a <_min_stack+0x6a>
    1b4c:	0200                	addi	s0,sp,256
    1b4e:	0304                	addi	s1,sp,384
    1b50:	0a090003          	lb	zero,160(s2)
    1b54:	0100                	addi	s0,sp,128
    1b56:	1d05                	addi	s10,s10,-31
    1b58:	0200                	addi	s0,sp,256
    1b5a:	0304                	addi	s1,sp,384
    1b5c:	04090003          	lb	zero,64(s2)
    1b60:	0100                	addi	s0,sp,128
    1b62:	1305                	addi	t1,t1,-31
    1b64:	0200                	addi	s0,sp,256
    1b66:	0304                	addi	s1,sp,384
    1b68:	04090003          	lb	zero,64(s2)
    1b6c:	0100                	addi	s0,sp,128
    1b6e:	2005                	jal	1b8e <random_keys+0xb6>
    1b70:	0200                	addi	s0,sp,256
    1b72:	0304                	addi	s1,sp,384
    1b74:	04097f03          	0x4097f03
    1b78:	0100                	addi	s0,sp,128
    1b7a:	1d05                	addi	s10,s10,-31
    1b7c:	0200                	addi	s0,sp,256
    1b7e:	0304                	addi	s1,sp,384
    1b80:	02090103          	lb	sp,32(s2)
    1b84:	0100                	addi	s0,sp,128
    1b86:	1305                	addi	t1,t1,-31
    1b88:	0200                	addi	s0,sp,256
    1b8a:	0304                	addi	s1,sp,384
    1b8c:	02090003          	lb	zero,32(s2)
    1b90:	0100                	addi	s0,sp,128
    1b92:	2005                	jal	1bb2 <random_keys+0xda>
    1b94:	0200                	addi	s0,sp,256
    1b96:	0304                	addi	s1,sp,384
    1b98:	0306                	slli	t1,t1,0x1
    1b9a:	097f                	0x97f
    1b9c:	0002                	c.slli64	zero
    1b9e:	0501                	addi	a0,a0,0
    1ba0:	0311                	addi	t1,t1,4
    1ba2:	00040907          	0x40907
    1ba6:	0501                	addi	a0,a0,0
    1ba8:	061f 0003 0009      	0x90003061f
    1bae:	0100                	addi	s0,sp,128
    1bb0:	1705                	addi	a4,a4,-31
    1bb2:	02090003          	lb	zero,32(s2)
    1bb6:	0100                	addi	s0,sp,128
    1bb8:	1305                	addi	t1,t1,-31
    1bba:	0306                	slli	t1,t1,0x1
    1bbc:	097f                	0x97f
    1bbe:	0002                	c.slli64	zero
    1bc0:	0501                	addi	a0,a0,0
    1bc2:	0616                	slli	a2,a2,0x5
    1bc4:	00090003          	lb	zero,0(s2)
    1bc8:	0100                	addi	s0,sp,128
    1bca:	1305                	addi	t1,t1,-31
    1bcc:	02090003          	lb	zero,32(s2)
    1bd0:	0100                	addi	s0,sp,128
    1bd2:	0d05                	addi	s10,s10,1
    1bd4:	0200                	addi	s0,sp,256
    1bd6:	0204                	addi	s1,sp,256
    1bd8:	0306                	slli	t1,t1,0x1
    1bda:	00040903          	lb	s2,0(s0)
    1bde:	0501                	addi	a0,a0,0
    1be0:	0402001b          	0x402001b
    1be4:	0602                	c.slli64	a2
    1be6:	00090003          	lb	zero,0(s2)
    1bea:	0100                	addi	s0,sp,128
    1bec:	2005                	jal	1c0c <random_keys+0x134>
    1bee:	0200                	addi	s0,sp,256
    1bf0:	0204                	addi	s1,sp,256
    1bf2:	04097c03          	0x4097c03
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	1305                	addi	t1,t1,-31
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0204                	addi	s1,sp,256
    1bfe:	04090403          	lb	s0,64(s2)
    1c02:	0100                	addi	s0,sp,128
    1c04:	2005                	jal	1c24 <random_keys+0x14c>
    1c06:	0200                	addi	s0,sp,256
    1c08:	0204                	addi	s1,sp,256
    1c0a:	0306                	slli	t1,t1,0x1
    1c0c:	097c                	addi	a5,sp,156
    1c0e:	0004                	0x4
    1c10:	0501                	addi	a0,a0,0
    1c12:	000d                	c.nop	3
    1c14:	0402                	c.slli64	s0
    1c16:	090b0303          	lb	t1,144(s6)
    1c1a:	0002                	c.slli64	zero
    1c1c:	0501                	addi	a0,a0,0
    1c1e:	0015                	c.nop	5
    1c20:	0402                	c.slli64	s0
    1c22:	00030603          	lb	a2,0(t1)
    1c26:	0409                	addi	s0,s0,2
    1c28:	0100                	addi	s0,sp,128
    1c2a:	2005                	jal	1c4a <random_keys+0x172>
    1c2c:	0200                	addi	s0,sp,256
    1c2e:	0304                	addi	s1,sp,384
    1c30:	06097f03          	0x6097f03
    1c34:	0100                	addi	s0,sp,128
    1c36:	1505                	addi	a0,a0,-31
    1c38:	0200                	addi	s0,sp,256
    1c3a:	0304                	addi	s1,sp,384
    1c3c:	02090103          	lb	sp,32(s2)
    1c40:	0100                	addi	s0,sp,128
    1c42:	0d05                	addi	s10,s10,1
    1c44:	0200                	addi	s0,sp,256
    1c46:	0304                	addi	s1,sp,384
    1c48:	0306                	slli	t1,t1,0x1
    1c4a:	0901                	addi	s2,s2,0
    1c4c:	0002                	c.slli64	zero
    1c4e:	0501                	addi	a0,a0,0
    1c50:	0019                	c.nop	6
    1c52:	0402                	c.slli64	s0
    1c54:	00030603          	lb	a2,0(t1)
    1c58:	0009                	c.nop	2
    1c5a:	0100                	addi	s0,sp,128
    1c5c:	1505                	addi	a0,a0,-31
    1c5e:	0200                	addi	s0,sp,256
    1c60:	0304                	addi	s1,sp,384
    1c62:	06090103          	lb	sp,96(s2)
    1c66:	0100                	addi	s0,sp,128
    1c68:	0200                	addi	s0,sp,256
    1c6a:	0304                	addi	s1,sp,384
    1c6c:	0a097f03          	0xa097f03
    1c70:	0100                	addi	s0,sp,128
    1c72:	0d05                	addi	s10,s10,1
    1c74:	0200                	addi	s0,sp,256
    1c76:	0304                	addi	s1,sp,384
    1c78:	0306                	slli	t1,t1,0x1
    1c7a:	0901                	addi	s2,s2,0
    1c7c:	0002                	c.slli64	zero
    1c7e:	0501                	addi	a0,a0,0
    1c80:	0015                	c.nop	5
    1c82:	0402                	c.slli64	s0
    1c84:	00030603          	lb	a2,0(t1)
    1c88:	0409                	addi	s0,s0,2
    1c8a:	0100                	addi	s0,sp,128
    1c8c:	1605                	addi	a2,a2,-31
    1c8e:	0200                	addi	s0,sp,256
    1c90:	0304                	addi	s1,sp,384
    1c92:	04090303          	lb	t1,64(s2)
    1c96:	0100                	addi	s0,sp,128
    1c98:	1505                	addi	a0,a0,-31
    1c9a:	0200                	addi	s0,sp,256
    1c9c:	0304                	addi	s1,sp,384
    1c9e:	02097d03          	0x2097d03
    1ca2:	0100                	addi	s0,sp,128
    1ca4:	0d05                	addi	s10,s10,1
    1ca6:	0200                	addi	s0,sp,256
    1ca8:	0304                	addi	s1,sp,384
    1caa:	0306                	slli	t1,t1,0x1
    1cac:	0901                	addi	s2,s2,0
    1cae:	0004                	0x4
    1cb0:	0501                	addi	a0,a0,0
    1cb2:	0019                	c.nop	6
    1cb4:	0402                	c.slli64	s0
    1cb6:	00030603          	lb	a2,0(t1)
    1cba:	0009                	c.nop	2
    1cbc:	0100                	addi	s0,sp,128
    1cbe:	1505                	addi	a0,a0,-31
    1cc0:	0200                	addi	s0,sp,256
    1cc2:	0304                	addi	s1,sp,384
    1cc4:	04090003          	lb	zero,64(s2)
    1cc8:	0100                	addi	s0,sp,128
    1cca:	0f05                	addi	t5,t5,1
    1ccc:	0200                	addi	s0,sp,256
    1cce:	0304                	addi	s1,sp,384
    1cd0:	0306                	slli	t1,t1,0x1
    1cd2:	0901                	addi	s2,s2,0
    1cd4:	0004                	0x4
    1cd6:	0501                	addi	a0,a0,0
    1cd8:	04020017          	auipc	zero,0x4020
    1cdc:	00030603          	lb	a2,0(t1)
    1ce0:	0009                	c.nop	2
    1ce2:	0100                	addi	s0,sp,128
    1ce4:	0d05                	addi	s10,s10,1
    1ce6:	0200                	addi	s0,sp,256
    1ce8:	0304                	addi	s1,sp,384
    1cea:	0306                	slli	t1,t1,0x1
    1cec:	0901                	addi	s2,s2,0
    1cee:	0008                	0x8
    1cf0:	0501                	addi	a0,a0,0
    1cf2:	0020                	addi	s0,sp,8
    1cf4:	0402                	c.slli64	s0
    1cf6:	097a0303          	lb	t1,151(s4)
    1cfa:	0000                	unimp
    1cfc:	0501                	addi	a0,a0,0
    1cfe:	030d                	addi	t1,t1,3
    1d00:	090c                	addi	a1,sp,144
    1d02:	0004                	0x4
    1d04:	0501                	addi	a0,a0,0
    1d06:	0003061b          	0x3061b
    1d0a:	0009                	c.nop	2
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	2005                	jal	1d2e <random_keys+0x256>
    1d10:	08090003          	lb	zero,128(s2)
    1d14:	0100                	addi	s0,sp,128
    1d16:	1005                	c.nop	-31
    1d18:	04090003          	lb	zero,64(s2)
    1d1c:	0100                	addi	s0,sp,128
    1d1e:	1e05                	addi	t3,t3,-31
    1d20:	0200                	addi	s0,sp,256
    1d22:	0204                	addi	s1,sp,256
    1d24:	0306                	slli	t1,t1,0x1
    1d26:	097f                	0x97f
    1d28:	0004                	0x4
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	000d                	c.nop	3
    1d2e:	0402                	c.slli64	s0
    1d30:	090d0303          	lb	t1,144(s10)
    1d34:	0004                	0x4
    1d36:	0501                	addi	a0,a0,0
    1d38:	0020                	addi	s0,sp,8
    1d3a:	0402                	c.slli64	s0
    1d3c:	00030603          	lb	a2,0(t1)
    1d40:	0009                	c.nop	2
    1d42:	0100                	addi	s0,sp,128
    1d44:	0200                	addi	s0,sp,256
    1d46:	0304                	addi	s1,sp,384
    1d48:	02097f03          	0x2097f03
    1d4c:	0100                	addi	s0,sp,128
    1d4e:	0200                	addi	s0,sp,256
    1d50:	0304                	addi	s1,sp,384
    1d52:	04090103          	lb	sp,64(s2)
    1d56:	0100                	addi	s0,sp,128
    1d58:	2505                	jal	2378 <_min_stack+0x378>
    1d5a:	0200                	addi	s0,sp,256
    1d5c:	0304                	addi	s1,sp,384
    1d5e:	04090003          	lb	zero,64(s2)
    1d62:	0100                	addi	s0,sp,128
    1d64:	1505                	addi	a0,a0,-31
    1d66:	0200                	addi	s0,sp,256
    1d68:	0304                	addi	s1,sp,384
    1d6a:	04090003          	lb	zero,64(s2)
    1d6e:	0100                	addi	s0,sp,128
    1d70:	2005                	jal	1d90 <random_keys+0x2b8>
    1d72:	0200                	addi	s0,sp,256
    1d74:	0304                	addi	s1,sp,384
    1d76:	0306                	slli	t1,t1,0x1
    1d78:	097f                	0x97f
    1d7a:	0004                	0x4
    1d7c:	0501                	addi	a0,a0,0
    1d7e:	0328                	addi	a0,sp,392
    1d80:	090c                	addi	a1,sp,144
    1d82:	0002                	c.slli64	zero
    1d84:	0501                	addi	a0,a0,0
    1d86:	0305                	addi	t1,t1,1
    1d88:	0902                	c.slli64	s2
    1d8a:	0000                	unimp
    1d8c:	0501                	addi	a0,a0,0
    1d8e:	0628                	addi	a0,sp,776
    1d90:	00097e03          	0x97e03
    1d94:	0100                	addi	s0,sp,128
    1d96:	36090003          	lb	zero,864(s2)
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	0905                	addi	s2,s2,1
    1d9e:	04090203          	lb	tp,64(s2)
    1da2:	0100                	addi	s0,sp,128
    1da4:	10090103          	lb	sp,256(s2)
    1da8:	0100                	addi	s0,sp,128
    1daa:	0a097f03          	0xa097f03
    1dae:	0100                	addi	s0,sp,128
    1db0:	0505                	addi	a0,a0,1
    1db2:	0306                	slli	t1,t1,0x1
    1db4:	0901                	addi	s2,s2,0
    1db6:	006c                	addi	a1,sp,12
    1db8:	0501                	addi	a0,a0,0
    1dba:	0610                	addi	a2,sp,768
    1dbc:	00090603          	lb	a2,0(s2)
    1dc0:	0100                	addi	s0,sp,128
    1dc2:	0905                	addi	s2,s2,1
    1dc4:	04097a03          	0x4097a03
    1dc8:	0100                	addi	s0,sp,128
    1dca:	02090603          	lb	a2,32(s2)
    1dce:	0100                	addi	s0,sp,128
    1dd0:	0e05                	addi	t3,t3,1
    1dd2:	0e090503          	lb	a0,224(s2)
    1dd6:	0100                	addi	s0,sp,128
    1dd8:	0905                	addi	s2,s2,1
    1dda:	0a097503          	0xa097503
    1dde:	0100                	addi	s0,sp,128
    1de0:	0505                	addi	a0,a0,1
    1de2:	0306                	slli	t1,t1,0x1
    1de4:	0902                	c.slli64	s2
    1de6:	0064                	addi	s1,sp,12
    1de8:	0301                	addi	t1,t1,0
    1dea:	0901                	addi	s2,s2,0
    1dec:	0000                	unimp
    1dee:	0301                	addi	t1,t1,0
    1df0:	0901                	addi	s2,s2,0
    1df2:	0000                	unimp
    1df4:	0301                	addi	t1,t1,0
    1df6:	0901                	addi	s2,s2,0
    1df8:	0000                	unimp
    1dfa:	0301                	addi	t1,t1,0
    1dfc:	0901                	addi	s2,s2,0
    1dfe:	0000                	unimp
    1e00:	0301                	addi	t1,t1,0
    1e02:	0901                	addi	s2,s2,0
    1e04:	0000                	unimp
    1e06:	0301                	addi	t1,t1,0
    1e08:	0901                	addi	s2,s2,0
    1e0a:	0000                	unimp
    1e0c:	0301                	addi	t1,t1,0
    1e0e:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1e12:	0301                	addi	t1,t1,0
    1e14:	0901                	addi	s2,s2,0
    1e16:	0000                	unimp
    1e18:	0501                	addi	a0,a0,0
    1e1a:	060e                	slli	a2,a2,0x3
    1e1c:	00090003          	lb	zero,0(s2)
    1e20:	0100                	addi	s0,sp,128
    1e22:	0505                	addi	a0,a0,1
    1e24:	0306                	slli	t1,t1,0x1
    1e26:	0902                	c.slli64	s2
    1e28:	0004                	0x4
    1e2a:	0501                	addi	a0,a0,0
    1e2c:	0003060b          	0x3060b
    1e30:	0009                	c.nop	2
    1e32:	0100                	addi	s0,sp,128
    1e34:	1005                	c.nop	-31
    1e36:	0200                	addi	s0,sp,256
    1e38:	0104                	addi	s1,sp,128
    1e3a:	0306                	slli	t1,t1,0x1
    1e3c:	0900                	addi	s0,sp,144
    1e3e:	0002                	c.slli64	zero
    1e40:	0501                	addi	a0,a0,0
    1e42:	0005                	c.nop	1
    1e44:	0402                	c.slli64	s0
    1e46:	0601                	addi	a2,a2,0
    1e48:	00090003          	lb	zero,0(s2)
    1e4c:	0100                	addi	s0,sp,128
    1e4e:	06090603          	lb	a2,96(s2)
    1e52:	0100                	addi	s0,sp,128
    1e54:	1105                	addi	sp,sp,-31
    1e56:	0200                	addi	s0,sp,256
    1e58:	0104                	addi	s1,sp,128
    1e5a:	0306                	slli	t1,t1,0x1
    1e5c:	0900                	addi	s0,sp,144
    1e5e:	0004                	0x4
    1e60:	0501                	addi	a0,a0,0
    1e62:	0005                	c.nop	1
    1e64:	0402                	c.slli64	s0
    1e66:	0601                	addi	a2,a2,0
    1e68:	00090003          	lb	zero,0(s2)
    1e6c:	0100                	addi	s0,sp,128
    1e6e:	0b05                	addi	s6,s6,1
    1e70:	04090703          	lb	a4,64(s2)
    1e74:	0100                	addi	s0,sp,128
    1e76:	1805                	addi	a6,a6,-31
    1e78:	02090103          	lb	sp,32(s2)
    1e7c:	0100                	addi	s0,sp,128
    1e7e:	1005                	c.nop	-31
    1e80:	0200                	addi	s0,sp,256
    1e82:	0104                	addi	s1,sp,128
    1e84:	0306                	slli	t1,t1,0x1
    1e86:	097f                	0x97f
    1e88:	0008                	0x8
    1e8a:	0501                	addi	a0,a0,0
    1e8c:	0005                	c.nop	1
    1e8e:	0402                	c.slli64	s0
    1e90:	0601                	addi	a2,a2,0
    1e92:	00090003          	lb	zero,0(s2)
    1e96:	0100                	addi	s0,sp,128
    1e98:	1605                	addi	a2,a2,-31
    1e9a:	08090503          	lb	a0,128(s2)
    1e9e:	0100                	addi	s0,sp,128
    1ea0:	1805                	addi	a6,a6,-31
    1ea2:	08090103          	lb	sp,128(s2)
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	1005                	c.nop	-31
    1eaa:	0200                	addi	s0,sp,256
    1eac:	0104                	addi	s1,sp,128
    1eae:	0306                	slli	t1,t1,0x1
    1eb0:	097f                	0x97f
    1eb2:	0008                	0x8
    1eb4:	0501                	addi	a0,a0,0
    1eb6:	0005                	c.nop	1
    1eb8:	0402                	c.slli64	s0
    1eba:	0601                	addi	a2,a2,0
    1ebc:	00090003          	lb	zero,0(s2)
    1ec0:	0100                	addi	s0,sp,128
    1ec2:	0306                	slli	t1,t1,0x1
    1ec4:	0905                	addi	s2,s2,1
    1ec6:	0004                	0x4
    1ec8:	0501                	addi	a0,a0,0
    1eca:	061a                	slli	a2,a2,0x6
    1ecc:	00090303          	lb	t1,0(s2)
    1ed0:	0100                	addi	s0,sp,128
    1ed2:	0a05                	addi	s4,s4,1
    1ed4:	06097d03          	0x6097d03
    1ed8:	0100                	addi	s0,sp,128
    1eda:	0505                	addi	a0,a0,1
    1edc:	0306                	slli	t1,t1,0x1
    1ede:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
    1ee2:	0501                	addi	a0,a0,0
    1ee4:	0618                	addi	a4,sp,768
    1ee6:	02090103          	lb	sp,32(s2)
    1eea:	0100                	addi	s0,sp,128
    1eec:	1405                	addi	s0,s0,-31
    1eee:	0200                	addi	s0,sp,256
    1ef0:	0104                	addi	s1,sp,128
    1ef2:	0306                	slli	t1,t1,0x1
    1ef4:	097f                	0x97f
    1ef6:	0008                	0x8
    1ef8:	0501                	addi	a0,a0,0
    1efa:	0005                	c.nop	1
    1efc:	0402                	c.slli64	s0
    1efe:	0601                	addi	a2,a2,0
    1f00:	00090003          	lb	zero,0(s2)
    1f04:	0100                	addi	s0,sp,128
    1f06:	0306                	slli	t1,t1,0x1
    1f08:	0906                	slli	s2,s2,0x1
    1f0a:	0004                	0x4
    1f0c:	0501                	addi	a0,a0,0
    1f0e:	060a                	slli	a2,a2,0x2
    1f10:	00090003          	lb	zero,0(s2)
    1f14:	0100                	addi	s0,sp,128
    1f16:	0505                	addi	a0,a0,1
    1f18:	0306                	slli	t1,t1,0x1
    1f1a:	0904                	addi	s1,sp,144
    1f1c:	000c                	0xc
    1f1e:	0501                	addi	a0,a0,0
    1f20:	061a                	slli	a2,a2,0x6
    1f22:	06090003          	lb	zero,96(s2)
    1f26:	0100                	addi	s0,sp,128
    1f28:	1805                	addi	a6,a6,-31
    1f2a:	02090103          	lb	sp,32(s2)
    1f2e:	0100                	addi	s0,sp,128
    1f30:	1405                	addi	s0,s0,-31
    1f32:	0200                	addi	s0,sp,256
    1f34:	0104                	addi	s1,sp,128
    1f36:	0306                	slli	t1,t1,0x1
    1f38:	097f                	0x97f
    1f3a:	0008                	0x8
    1f3c:	0501                	addi	a0,a0,0
    1f3e:	0005                	c.nop	1
    1f40:	0402                	c.slli64	s0
    1f42:	0601                	addi	a2,a2,0
    1f44:	00090003          	lb	zero,0(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	0306                	slli	t1,t1,0x1
    1f4c:	0905                	addi	s2,s2,1
    1f4e:	0004                	0x4
    1f50:	0501                	addi	a0,a0,0
    1f52:	060a                	slli	a2,a2,0x2
    1f54:	00090003          	lb	zero,0(s2)
    1f58:	0100                	addi	s0,sp,128
    1f5a:	0505                	addi	a0,a0,1
    1f5c:	0306                	slli	t1,t1,0x1
    1f5e:	000c0903          	lb	s2,0(s8)
    1f62:	0501                	addi	a0,a0,0
    1f64:	0003060b          	0x3060b
    1f68:	0209                	addi	tp,tp,2
    1f6a:	0100                	addi	s0,sp,128
    1f6c:	1805                	addi	a6,a6,-31
    1f6e:	02090003          	lb	zero,32(s2)
    1f72:	0100                	addi	s0,sp,128
    1f74:	1005                	c.nop	-31
    1f76:	0200                	addi	s0,sp,256
    1f78:	0104                	addi	s1,sp,128
    1f7a:	0306                	slli	t1,t1,0x1
    1f7c:	0900                	addi	s0,sp,144
    1f7e:	0004                	0x4
    1f80:	0501                	addi	a0,a0,0
    1f82:	0005                	c.nop	1
    1f84:	0402                	c.slli64	s0
    1f86:	0601                	addi	a2,a2,0
    1f88:	00090003          	lb	zero,0(s2)
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	0306                	slli	t1,t1,0x1
    1f90:	0906                	slli	s2,s2,0x1
    1f92:	0004                	0x4
    1f94:	0501                	addi	a0,a0,0
    1f96:	060a                	slli	a2,a2,0x2
    1f98:	00090003          	lb	zero,0(s2)
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	0505                	addi	a0,a0,1
    1fa0:	0306                	slli	t1,t1,0x1
    1fa2:	0904                	addi	s1,sp,144
    1fa4:	0008                	0x8
    1fa6:	0501                	addi	a0,a0,0
    1fa8:	061a                	slli	a2,a2,0x6
    1faa:	00090003          	lb	zero,0(s2)
    1fae:	0100                	addi	s0,sp,128
    1fb0:	1805                	addi	a6,a6,-31
    1fb2:	0a090103          	lb	sp,160(s2)
    1fb6:	0100                	addi	s0,sp,128
    1fb8:	1405                	addi	s0,s0,-31
    1fba:	0200                	addi	s0,sp,256
    1fbc:	0104                	addi	s1,sp,128
    1fbe:	0306                	slli	t1,t1,0x1
    1fc0:	097f                	0x97f
    1fc2:	0008                	0x8
    1fc4:	0501                	addi	a0,a0,0
    1fc6:	0005                	c.nop	1
    1fc8:	0402                	c.slli64	s0
    1fca:	0601                	addi	a2,a2,0
    1fcc:	02090003          	lb	zero,32(s2)
    1fd0:	0100                	addi	s0,sp,128
    1fd2:	1a05                	addi	s4,s4,-31
    1fd4:	04090503          	lb	a0,64(s2)
    1fd8:	0100                	addi	s0,sp,128
    1fda:	1805                	addi	a6,a6,-31
    1fdc:	04090103          	lb	sp,64(s2)
    1fe0:	0100                	addi	s0,sp,128
    1fe2:	1a05                	addi	s4,s4,-31
    1fe4:	08097f03          	0x8097f03
    1fe8:	0100                	addi	s0,sp,128
    1fea:	1405                	addi	s0,s0,-31
    1fec:	0200                	addi	s0,sp,256
    1fee:	0104                	addi	s1,sp,128
    1ff0:	0306                	slli	t1,t1,0x1
    1ff2:	0900                	addi	s0,sp,144
    1ff4:	0008                	0x8
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	0005                	c.nop	1
    1ffa:	0402                	c.slli64	s0
    1ffc:	0601                	addi	a2,a2,0
    1ffe:	00090003          	lb	zero,0(s2)
    2002:	0100                	addi	s0,sp,128
    2004:	0306                	slli	t1,t1,0x1
    2006:	0906                	slli	s2,s2,0x1
    2008:	0004                	0x4
    200a:	0301                	addi	t1,t1,0
    200c:	0902                	c.slli64	s2
    200e:	0000                	unimp
    2010:	0501                	addi	a0,a0,0
    2012:	0601                	addi	a2,a2,0
    2014:	00090103          	lb	sp,0(s2)
    2018:	0100                	addi	s0,sp,128
    201a:	0905                	addi	s2,s2,1
    201c:	0200                	addi	s0,sp,256
    201e:	0304                	addi	s1,sp,384
    2020:	0306                	slli	t1,t1,0x1
    2022:	7fbd                	lui	t6,0xfffef
    2024:	4009                	c.li	zero,2
    2026:	0100                	addi	s0,sp,128
    2028:	1205                	addi	tp,tp,-31
    202a:	0200                	addi	s0,sp,256
    202c:	0304                	addi	s1,sp,384
    202e:	0306                	slli	t1,t1,0x1
    2030:	0900                	addi	s0,sp,144
    2032:	0000                	unimp
    2034:	0501                	addi	a0,a0,0
    2036:	04020017          	auipc	zero,0x4020
    203a:	7f030603          	lb	a2,2032(t1)
    203e:	0a09                	addi	s4,s4,2
    2040:	0100                	addi	s0,sp,128
    2042:	0905                	addi	s2,s2,1
    2044:	0200                	addi	s0,sp,256
    2046:	0304                	addi	s1,sp,384
    2048:	04090703          	lb	a4,64(s2)
    204c:	0100                	addi	s0,sp,128
    204e:	0e05                	addi	t3,t3,1
    2050:	0200                	addi	s0,sp,256
    2052:	0304                	addi	s1,sp,384
    2054:	0306                	slli	t1,t1,0x1
    2056:	0900                	addi	s0,sp,144
    2058:	0004                	0x4
    205a:	0501                	addi	a0,a0,0
    205c:	0009                	c.nop	2
    205e:	0402                	c.slli64	s0
    2060:	01030603          	lb	a2,16(t1)
    2064:	0a09                	addi	s4,s4,2
    2066:	0100                	addi	s0,sp,128
    2068:	0e05                	addi	t3,t3,1
    206a:	0200                	addi	s0,sp,256
    206c:	0304                	addi	s1,sp,384
    206e:	0306                	slli	t1,t1,0x1
    2070:	0900                	addi	s0,sp,144
    2072:	0000                	unimp
    2074:	0501                	addi	a0,a0,0
    2076:	0019                	c.nop	6
    2078:	0402                	c.slli64	s0
    207a:	7e030603          	lb	a2,2016(t1)
    207e:	0a09                	addi	s4,s4,2
    2080:	0100                	addi	s0,sp,128
    2082:	0905                	addi	s2,s2,1
    2084:	0200                	addi	s0,sp,256
    2086:	0304                	addi	s1,sp,384
    2088:	04090803          	lb	a6,64(s2)
    208c:	0100                	addi	s0,sp,128
    208e:	1b05                	addi	s6,s6,-31
    2090:	0200                	addi	s0,sp,256
    2092:	0304                	addi	s1,sp,384
    2094:	0306                	slli	t1,t1,0x1
    2096:	0900                	addi	s0,sp,144
    2098:	0004                	0x4
    209a:	0501                	addi	a0,a0,0
    209c:	0018                	0x18
    209e:	0402                	c.slli64	s0
    20a0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    20a4:	0004                	0x4
    20a6:	0501                	addi	a0,a0,0
    20a8:	0402001b          	0x402001b
    20ac:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    20b0:	0004                	0x4
    20b2:	0501                	addi	a0,a0,0
    20b4:	0018                	0x18
    20b6:	0402                	c.slli64	s0
    20b8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    20bc:	0002                	c.slli64	zero
    20be:	0501                	addi	a0,a0,0
    20c0:	04020017          	auipc	zero,0x4020
    20c4:	097f0303          	lb	t1,151(t5)
    20c8:	0002                	c.slli64	zero
    20ca:	0501                	addi	a0,a0,0
    20cc:	0018                	0x18
    20ce:	0402                	c.slli64	s0
    20d0:	09010303          	lb	t1,144(sp)
    20d4:	0002                	c.slli64	zero
    20d6:	0501                	addi	a0,a0,0
    20d8:	04020017          	auipc	zero,0x4020
    20dc:	7f030603          	lb	a2,2032(t1)
    20e0:	0209                	addi	tp,tp,2
    20e2:	0100                	addi	s0,sp,128
    20e4:	0905                	addi	s2,s2,1
    20e6:	0200                	addi	s0,sp,256
    20e8:	0304                	addi	s1,sp,384
    20ea:	02090603          	lb	a2,32(s2)
    20ee:	0100                	addi	s0,sp,128
    20f0:	1805                	addi	a6,a6,-31
    20f2:	0200                	addi	s0,sp,256
    20f4:	0304                	addi	s1,sp,384
    20f6:	0306                	slli	t1,t1,0x1
    20f8:	0900                	addi	s0,sp,144
    20fa:	0000                	unimp
    20fc:	0501                	addi	a0,a0,0
    20fe:	0402001b          	0x402001b
    2102:	7f030603          	lb	a2,2032(t1)
    2106:	0a09                	addi	s4,s4,2
    2108:	0100                	addi	s0,sp,128
    210a:	0905                	addi	s2,s2,1
    210c:	0200                	addi	s0,sp,256
    210e:	0304                	addi	s1,sp,384
    2110:	06090903          	lb	s2,96(s2)
    2114:	0100                	addi	s0,sp,128
    2116:	1c05                	addi	s8,s8,-31
    2118:	0200                	addi	s0,sp,256
    211a:	0304                	addi	s1,sp,384
    211c:	0306                	slli	t1,t1,0x1
    211e:	0900                	addi	s0,sp,144
    2120:	0000                	unimp
    2122:	0501                	addi	a0,a0,0
    2124:	0018                	0x18
    2126:	0402                	c.slli64	s0
    2128:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    212c:	0002                	c.slli64	zero
    212e:	0501                	addi	a0,a0,0
    2130:	001f 0402 0603      	0x6030402001f
    2136:	08097f03          	0x8097f03
    213a:	0100                	addi	s0,sp,128
    213c:	0905                	addi	s2,s2,1
    213e:	0200                	addi	s0,sp,256
    2140:	0304                	addi	s1,sp,384
    2142:	06090b03          	lb	s6,96(s2)
    2146:	0100                	addi	s0,sp,128
    2148:	1c05                	addi	s8,s8,-31
    214a:	0200                	addi	s0,sp,256
    214c:	0304                	addi	s1,sp,384
    214e:	0306                	slli	t1,t1,0x1
    2150:	0900                	addi	s0,sp,144
    2152:	0004                	0x4
    2154:	0501                	addi	a0,a0,0
    2156:	0018                	0x18
    2158:	0402                	c.slli64	s0
    215a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    215e:	0008                	0x8
    2160:	0501                	addi	a0,a0,0
    2162:	001f 0402 0303      	0x3030402001f
    2168:	097f                	0x97f
    216a:	0002                	c.slli64	zero
    216c:	0501                	addi	a0,a0,0
    216e:	0018                	0x18
    2170:	0402                	c.slli64	s0
    2172:	09010303          	lb	t1,144(sp)
    2176:	0002                	c.slli64	zero
    2178:	0501                	addi	a0,a0,0
    217a:	001f 0402 0603      	0x6030402001f
    2180:	02097f03          	0x2097f03
    2184:	0100                	addi	s0,sp,128
    2186:	0905                	addi	s2,s2,1
    2188:	0200                	addi	s0,sp,256
    218a:	0304                	addi	s1,sp,384
    218c:	02090903          	lb	s2,32(s2)
    2190:	0100                	addi	s0,sp,128
    2192:	1605                	addi	a2,a2,-31
    2194:	0200                	addi	s0,sp,256
    2196:	0304                	addi	s1,sp,384
    2198:	0306                	slli	t1,t1,0x1
    219a:	0900                	addi	s0,sp,144
    219c:	0000                	unimp
    219e:	0501                	addi	a0,a0,0
    21a0:	001d                	c.nop	7
    21a2:	0402                	c.slli64	s0
    21a4:	097f0303          	lb	t1,151(t5)
    21a8:	0002                	c.slli64	zero
    21aa:	0501                	addi	a0,a0,0
    21ac:	0016                	c.slli	zero,0x5
    21ae:	0402                	c.slli64	s0
    21b0:	09010303          	lb	t1,144(sp)
    21b4:	0004                	0x4
    21b6:	0501                	addi	a0,a0,0
    21b8:	0402000f          	0x402000f
    21bc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21c0:	0004                	0x4
    21c2:	0501                	addi	a0,a0,0
    21c4:	001d                	c.nop	7
    21c6:	0402                	c.slli64	s0
    21c8:	7f030603          	lb	a2,2032(t1)
    21cc:	0409                	addi	s0,s0,2
    21ce:	0100                	addi	s0,sp,128
    21d0:	0905                	addi	s2,s2,1
    21d2:	0200                	addi	s0,sp,256
    21d4:	0304                	addi	s1,sp,384
    21d6:	02090b03          	lb	s6,32(s2)
    21da:	0100                	addi	s0,sp,128
    21dc:	1c05                	addi	s8,s8,-31
    21de:	0200                	addi	s0,sp,256
    21e0:	0304                	addi	s1,sp,384
    21e2:	0306                	slli	t1,t1,0x1
    21e4:	0900                	addi	s0,sp,144
    21e6:	0000                	unimp
    21e8:	0501                	addi	a0,a0,0
    21ea:	0018                	0x18
    21ec:	0402                	c.slli64	s0
    21ee:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21f2:	0004                	0x4
    21f4:	0501                	addi	a0,a0,0
    21f6:	001f 0402 0603      	0x6030402001f
    21fc:	08097f03          	0x8097f03
    2200:	0100                	addi	s0,sp,128
    2202:	0905                	addi	s2,s2,1
    2204:	0200                	addi	s0,sp,256
    2206:	0304                	addi	s1,sp,384
    2208:	04090603          	lb	a2,64(s2)
    220c:	0100                	addi	s0,sp,128
    220e:	1805                	addi	a6,a6,-31
    2210:	0200                	addi	s0,sp,256
    2212:	0304                	addi	s1,sp,384
    2214:	0306                	slli	t1,t1,0x1
    2216:	0900                	addi	s0,sp,144
    2218:	0004                	0x4
    221a:	0501                	addi	a0,a0,0
    221c:	001f 0402 0303      	0x3030402001f
    2222:	0900                	addi	s0,sp,144
    2224:	0004                	0x4
    2226:	0501                	addi	a0,a0,0
    2228:	0018                	0x18
    222a:	0402                	c.slli64	s0
    222c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2230:	0004                	0x4
    2232:	0501                	addi	a0,a0,0
    2234:	0021                	c.nop	8
    2236:	0402                	c.slli64	s0
    2238:	097f0303          	lb	t1,151(t5)
    223c:	0002                	c.slli64	zero
    223e:	0501                	addi	a0,a0,0
    2240:	0018                	0x18
    2242:	0402                	c.slli64	s0
    2244:	09010303          	lb	t1,144(sp)
    2248:	0002                	c.slli64	zero
    224a:	0501                	addi	a0,a0,0
    224c:	0021                	c.nop	8
    224e:	0402                	c.slli64	s0
    2250:	7f030603          	lb	a2,2032(t1)
    2254:	0209                	addi	tp,tp,2
    2256:	0100                	addi	s0,sp,128
    2258:	4b05                	li	s6,1
    225a:	02090c03          	lb	s8,32(s2)
    225e:	0100                	addi	s0,sp,128
    2260:	0505                	addi	a0,a0,1
    2262:	00090203          	lb	tp,0(s2)
    2266:	0100                	addi	s0,sp,128
    2268:	00090103          	lb	sp,0(s2)
    226c:	0100                	addi	s0,sp,128
    226e:	00090203          	lb	tp,0(s2)
    2272:	0100                	addi	s0,sp,128
    2274:	4b05                	li	s6,1
    2276:	0306                	slli	t1,t1,0x1
    2278:	0000097b          	0x97b
    227c:	0501                	addi	a0,a0,0
    227e:	0309                	addi	t1,t1,2
    2280:	0905                	addi	s2,s2,1
    2282:	000c                	0xc
    2284:	0501                	addi	a0,a0,0
    2286:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    228a:	0004                	0x4
    228c:	0501                	addi	a0,a0,0
    228e:	0309                	addi	t1,t1,2
    2290:	0905                	addi	s2,s2,1
    2292:	0002                	c.slli64	zero
    2294:	0501                	addi	a0,a0,0
    2296:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    229a:	000a                	c.slli	zero,0x2
    229c:	0301                	addi	t1,t1,0
    229e:	0900                	addi	s0,sp,144
    22a0:	0006                	c.slli	zero,0x1
    22a2:	0501                	addi	a0,a0,0
    22a4:	0309                	addi	t1,t1,2
    22a6:	0905                	addi	s2,s2,1
    22a8:	0004                	0x4
    22aa:	0501                	addi	a0,a0,0
    22ac:	0605                	addi	a2,a2,1
    22ae:	02090103          	lb	sp,32(s2)
    22b2:	0100                	addi	s0,sp,128
    22b4:	00090103          	lb	sp,0(s2)
    22b8:	0100                	addi	s0,sp,128
    22ba:	00090303          	lb	t1,0(s2)
    22be:	0100                	addi	s0,sp,128
    22c0:	0c05                	addi	s8,s8,1
    22c2:	0306                	slli	t1,t1,0x1
    22c4:	0900                	addi	s0,sp,144
    22c6:	0000                	unimp
    22c8:	0501                	addi	a0,a0,0
    22ca:	0301                	addi	t1,t1,0
    22cc:	00120907          	0x120907
    22d0:	0501                	addi	a0,a0,0
    22d2:	030c                	addi	a1,sp,384
    22d4:	0979                	addi	s2,s2,30
    22d6:	0006                	c.slli	zero,0x1
    22d8:	0501                	addi	a0,a0,0
    22da:	0601                	addi	a2,a2,0
    22dc:	02090703          	lb	a4,32(s2)
    22e0:	0100                	addi	s0,sp,128
    22e2:	0a05                	addi	s4,s4,1
    22e4:	0306                	slli	t1,t1,0x1
    22e6:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    22ea:	0501                	addi	a0,a0,0
    22ec:	0301                	addi	t1,t1,0
    22ee:	097d                	addi	s2,s2,31
    22f0:	0004                	0x4
    22f2:	0501                	addi	a0,a0,0
    22f4:	0605                	addi	a2,a2,1
    22f6:	04090303          	lb	t1,64(s2)
    22fa:	0100                	addi	s0,sp,128
    22fc:	0a05                	addi	s4,s4,1
    22fe:	0306                	slli	t1,t1,0x1
    2300:	0900                	addi	s0,sp,144
    2302:	0000                	unimp
    2304:	0501                	addi	a0,a0,0
    2306:	0605                	addi	a2,a2,1
    2308:	10090203          	lb	tp,256(s2)
    230c:	0100                	addi	s0,sp,128
    230e:	1a05                	addi	s4,s4,-31
    2310:	0306                	slli	t1,t1,0x1
    2312:	0900                	addi	s0,sp,144
    2314:	0000                	unimp
    2316:	0501                	addi	a0,a0,0
    2318:	0014                	0x14
    231a:	0402                	c.slli64	s0
    231c:	0601                	addi	a2,a2,0
    231e:	08090003          	lb	zero,128(s2)
    2322:	0100                	addi	s0,sp,128
    2324:	0505                	addi	a0,a0,1
    2326:	0200                	addi	s0,sp,256
    2328:	0104                	addi	s1,sp,128
    232a:	0306                	slli	t1,t1,0x1
    232c:	0900                	addi	s0,sp,144
    232e:	0000                	unimp
    2330:	0501                	addi	a0,a0,0
    2332:	0301                	addi	t1,t1,0
    2334:	0909                	addi	s2,s2,2
    2336:	0004                	0x4
    2338:	0501                	addi	a0,a0,0
    233a:	0009                	c.nop	2
    233c:	0402                	c.slli64	s0
    233e:	78030603          	lb	a2,1920(t1)
    2342:	1009                	c.nop	-30
    2344:	0100                	addi	s0,sp,128
    2346:	1905                	addi	s2,s2,-31
    2348:	0200                	addi	s0,sp,256
    234a:	0304                	addi	s1,sp,384
    234c:	0306                	slli	t1,t1,0x1
    234e:	0900                	addi	s0,sp,144
    2350:	0000                	unimp
    2352:	0501                	addi	a0,a0,0
    2354:	001f 0402 0303      	0x3030402001f
    235a:	097f                	0x97f
    235c:	0008                	0x8
    235e:	0501                	addi	a0,a0,0
    2360:	0015                	c.nop	5
    2362:	0402                	c.slli64	s0
    2364:	09010303          	lb	t1,144(sp)
    2368:	0004                	0x4
    236a:	0501                	addi	a0,a0,0
    236c:	001f 0402 0603      	0x6030402001f
    2372:	04097f03          	0x4097f03
    2376:	0100                	addi	s0,sp,128
    2378:	6c05                	lui	s8,0x1
    237a:	02090c03          	lb	s8,32(s2)
    237e:	0100                	addi	s0,sp,128
    2380:	0505                	addi	a0,a0,1
    2382:	00090203          	lb	tp,0(s2)
    2386:	0100                	addi	s0,sp,128
    2388:	00090103          	lb	sp,0(s2)
    238c:	0100                	addi	s0,sp,128
    238e:	00090103          	lb	sp,0(s2)
    2392:	0100                	addi	s0,sp,128
    2394:	00090103          	lb	sp,0(s2)
    2398:	0100                	addi	s0,sp,128
    239a:	00090103          	lb	sp,0(s2)
    239e:	0100                	addi	s0,sp,128
    23a0:	00090103          	lb	sp,0(s2)
    23a4:	0100                	addi	s0,sp,128
    23a6:	00090303          	lb	t1,0(s2)
    23aa:	0100                	addi	s0,sp,128
    23ac:	6c05                	lui	s8,0x1
    23ae:	0306                	slli	t1,t1,0x1
    23b0:	0976                	slli	s2,s2,0x1d
    23b2:	0000                	unimp
    23b4:	0501                	addi	a0,a0,0
    23b6:	031e                	slli	t1,t1,0x7
    23b8:	0911                	addi	s2,s2,4
    23ba:	0008                	0x8
    23bc:	0501                	addi	a0,a0,0
    23be:	036c                	addi	a1,sp,396
    23c0:	0006096f          	jal	s2,623c0 <_stack_start+0x523c0>
    23c4:	0501                	addi	a0,a0,0
    23c6:	0309                	addi	t1,t1,2
    23c8:	090a                	slli	s2,s2,0x2
    23ca:	000a                	c.slli	zero,0x2
    23cc:	0501                	addi	a0,a0,0
    23ce:	036c                	addi	a1,sp,396
    23d0:	0976                	slli	s2,s2,0x1d
    23d2:	0004                	0x4
    23d4:	0501                	addi	a0,a0,0
    23d6:	0309                	addi	t1,t1,2
    23d8:	090a                	slli	s2,s2,0x2
    23da:	0004                	0x4
    23dc:	0501                	addi	a0,a0,0
    23de:	036c                	addi	a1,sp,396
    23e0:	0976                	slli	s2,s2,0x1d
    23e2:	0004                	0x4
    23e4:	0301                	addi	t1,t1,0
    23e6:	0900                	addi	s0,sp,144
    23e8:	0008                	0x8
    23ea:	0501                	addi	a0,a0,0
    23ec:	030a                	slli	t1,t1,0x2
    23ee:	090e                	slli	s2,s2,0x3
    23f0:	0002                	c.slli64	zero
    23f2:	0501                	addi	a0,a0,0
    23f4:	0309                	addi	t1,t1,2
    23f6:	097c                	addi	a5,sp,156
    23f8:	0004                	0x4
    23fa:	0501                	addi	a0,a0,0
    23fc:	0605                	addi	a2,a2,1
    23fe:	04090403          	lb	s0,64(s2)
    2402:	0100                	addi	s0,sp,128
    2404:	0a05                	addi	s4,s4,1
    2406:	0306                	slli	t1,t1,0x1
    2408:	0900                	addi	s0,sp,144
    240a:	0000                	unimp
    240c:	0501                	addi	a0,a0,0
    240e:	0605                	addi	a2,a2,1
    2410:	12090303          	lb	t1,288(s2)
    2414:	0100                	addi	s0,sp,128
    2416:	0b05                	addi	s6,s6,1
    2418:	0306                	slli	t1,t1,0x1
    241a:	0900                	addi	s0,sp,144
    241c:	0004                	0x4
    241e:	0501                	addi	a0,a0,0
    2420:	0014                	0x14
    2422:	0402                	c.slli64	s0
    2424:	0601                	addi	a2,a2,0
    2426:	02090003          	lb	zero,32(s2)
    242a:	0100                	addi	s0,sp,128
    242c:	0505                	addi	a0,a0,1
    242e:	0200                	addi	s0,sp,256
    2430:	0104                	addi	s1,sp,128
    2432:	0306                	slli	t1,t1,0x1
    2434:	0900                	addi	s0,sp,144
    2436:	0000                	unimp
    2438:	0501                	addi	a0,a0,0
    243a:	0316                	slli	t1,t1,0x5
    243c:	0906                	slli	s2,s2,0x1
    243e:	0004                	0x4
    2440:	0501                	addi	a0,a0,0
    2442:	030c                	addi	a1,sp,384
    2444:	097f                	0x97f
    2446:	0006                	c.slli	zero,0x1
    2448:	0501                	addi	a0,a0,0
    244a:	0011                	c.nop	4
    244c:	0402                	c.slli64	s0
    244e:	0601                	addi	a2,a2,0
    2450:	02090003          	lb	zero,32(s2)
    2454:	0100                	addi	s0,sp,128
    2456:	0505                	addi	a0,a0,1
    2458:	0200                	addi	s0,sp,256
    245a:	0104                	addi	s1,sp,128
    245c:	0306                	slli	t1,t1,0x1
    245e:	0900                	addi	s0,sp,144
    2460:	0000                	unimp
    2462:	0601                	addi	a2,a2,0
    2464:	04090803          	lb	a6,64(s2)
    2468:	0100                	addi	s0,sp,128
    246a:	0905                	addi	s2,s2,1
    246c:	0306                	slli	t1,t1,0x1
    246e:	0900                	addi	s0,sp,144
    2470:	0000                	unimp
    2472:	0501                	addi	a0,a0,0
    2474:	0605                	addi	a2,a2,1
    2476:	0c090403          	lb	s0,192(s2)
    247a:	0100                	addi	s0,sp,128
    247c:	0a05                	addi	s4,s4,1
    247e:	0306                	slli	t1,t1,0x1
    2480:	0900                	addi	s0,sp,144
    2482:	0000                	unimp
    2484:	0501                	addi	a0,a0,0
    2486:	0605                	addi	a2,a2,1
    2488:	0c090103          	lb	sp,192(s2)
    248c:	0100                	addi	s0,sp,128
    248e:	1405                	addi	s0,s0,-31
    2490:	0200                	addi	s0,sp,256
    2492:	0104                	addi	s1,sp,128
    2494:	02090003          	lb	zero,32(s2)
    2498:	0100                	addi	s0,sp,128
    249a:	0505                	addi	a0,a0,1
    249c:	0200                	addi	s0,sp,256
    249e:	0104                	addi	s1,sp,128
    24a0:	0306                	slli	t1,t1,0x1
    24a2:	0900                	addi	s0,sp,144
    24a4:	0000                	unimp
    24a6:	0501                	addi	a0,a0,0
    24a8:	0301                	addi	t1,t1,0
    24aa:	00040907          	0x40907
    24ae:	0501                	addi	a0,a0,0
    24b0:	0009                	c.nop	2
    24b2:	0402                	c.slli64	s0
    24b4:	68030603          	lb	a2,1664(t1)
    24b8:	1609                	addi	a2,a2,-30
    24ba:	0100                	addi	s0,sp,128
    24bc:	1905                	addi	s2,s2,-31
    24be:	0200                	addi	s0,sp,256
    24c0:	0304                	addi	s1,sp,384
    24c2:	0306                	slli	t1,t1,0x1
    24c4:	0900                	addi	s0,sp,144
    24c6:	0000                	unimp
    24c8:	0501                	addi	a0,a0,0
    24ca:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    24ce:	097f0303          	lb	t1,151(t5)
    24d2:	0008                	0x8
    24d4:	0501                	addi	a0,a0,0
    24d6:	0015                	c.nop	5
    24d8:	0402                	c.slli64	s0
    24da:	09010303          	lb	t1,144(sp)
    24de:	0004                	0x4
    24e0:	0501                	addi	a0,a0,0
    24e2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    24e6:	7f030603          	lb	a2,2032(t1)
    24ea:	0409                	addi	s0,s0,2
    24ec:	0100                	addi	s0,sp,128
    24ee:	0905                	addi	s2,s2,1
    24f0:	02090603          	lb	a2,32(s2)
    24f4:	0100                	addi	s0,sp,128
    24f6:	0e05                	addi	t3,t3,1
    24f8:	0306                	slli	t1,t1,0x1
    24fa:	0900                	addi	s0,sp,144
    24fc:	0000                	unimp
    24fe:	0501                	addi	a0,a0,0
    2500:	0900030b          	0x900030b
    2504:	0002                	c.slli64	zero
    2506:	0501                	addi	a0,a0,0
    2508:	060d                	addi	a2,a2,3
    250a:	04090303          	lb	t1,64(s2)
    250e:	0100                	addi	s0,sp,128
    2510:	1905                	addi	s2,s2,-31
    2512:	0306                	slli	t1,t1,0x1
    2514:	0900                	addi	s0,sp,144
    2516:	0000                	unimp
    2518:	0501                	addi	a0,a0,0
    251a:	09000313          	li	t1,144
    251e:	0004                	0x4
    2520:	0501                	addi	a0,a0,0
    2522:	0018                	0x18
    2524:	0402                	c.slli64	s0
    2526:	0602                	c.slli64	a2
    2528:	02097c03          	0x2097c03
    252c:	0100                	addi	s0,sp,128
    252e:	0905                	addi	s2,s2,1
    2530:	0200                	addi	s0,sp,256
    2532:	0304                	addi	s1,sp,384
    2534:	06090e03          	lb	t3,96(s2)
    2538:	0100                	addi	s0,sp,128
    253a:	1905                	addi	s2,s2,-31
    253c:	0200                	addi	s0,sp,256
    253e:	0304                	addi	s1,sp,384
    2540:	0306                	slli	t1,t1,0x1
    2542:	0900                	addi	s0,sp,144
    2544:	0000                	unimp
    2546:	0501                	addi	a0,a0,0
    2548:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    254c:	097f0303          	lb	t1,151(t5)
    2550:	0008                	0x8
    2552:	0501                	addi	a0,a0,0
    2554:	0015                	c.nop	5
    2556:	0402                	c.slli64	s0
    2558:	09010303          	lb	t1,144(sp)
    255c:	0004                	0x4
    255e:	0501                	addi	a0,a0,0
    2560:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2564:	7f030603          	lb	a2,2032(t1)
    2568:	0409                	addi	s0,s0,2
    256a:	0100                	addi	s0,sp,128
    256c:	0209                	addi	tp,tp,2
    256e:	0000                	unimp
    2570:	0101                	addi	sp,sp,0
    2572:	0b05                	addi	s6,s6,1
    2574:	0500                	addi	s0,sp,640
    2576:	7402                	flw	fs0,32(sp)
    2578:	0300000f          	fence	rw,unknown
    257c:	04f6                	slli	s1,s1,0x1d
    257e:	0501                	addi	a0,a0,0
    2580:	0305                	addi	t1,t1,1
    2582:	0901                	addi	s2,s2,0
    2584:	0000                	unimp
    2586:	0301                	addi	t1,t1,0
    2588:	0901                	addi	s2,s2,0
    258a:	0000                	unimp
    258c:	0301                	addi	t1,t1,0
    258e:	0901                	addi	s2,s2,0
    2590:	0000                	unimp
    2592:	0301                	addi	t1,t1,0
    2594:	0901                	addi	s2,s2,0
    2596:	0000                	unimp
    2598:	0301                	addi	t1,t1,0
    259a:	0901                	addi	s2,s2,0
    259c:	0000                	unimp
    259e:	0301                	addi	t1,t1,0
    25a0:	0901                	addi	s2,s2,0
    25a2:	0000                	unimp
    25a4:	0301                	addi	t1,t1,0
    25a6:	0902                	c.slli64	s2
    25a8:	0000                	unimp
    25aa:	0501                	addi	a0,a0,0
    25ac:	7803060b          	0x7803060b
    25b0:	0009                	c.nop	2
    25b2:	0100                	addi	s0,sp,128
    25b4:	0905                	addi	s2,s2,1
    25b6:	04090803          	lb	a6,64(s2)
    25ba:	0100                	addi	s0,sp,128
    25bc:	0b05                	addi	s6,s6,1
    25be:	0e097803          	0xe097803
    25c2:	0100                	addi	s0,sp,128
    25c4:	1205                	addi	tp,tp,-31
    25c6:	10091803          	lh	a6,256(s2)
    25ca:	0100                	addi	s0,sp,128
    25cc:	0905                	addi	s2,s2,1
    25ce:	04097003          	0x4097003
    25d2:	0100                	addi	s0,sp,128
    25d4:	0505                	addi	a0,a0,1
    25d6:	0306                	slli	t1,t1,0x1
    25d8:	0901                	addi	s2,s2,0
    25da:	0002                	c.slli64	zero
    25dc:	0301                	addi	t1,t1,0
    25de:	0901                	addi	s2,s2,0
    25e0:	0000                	unimp
    25e2:	0301                	addi	t1,t1,0
    25e4:	0901                	addi	s2,s2,0
    25e6:	0000                	unimp
    25e8:	0301                	addi	t1,t1,0
    25ea:	0901                	addi	s2,s2,0
    25ec:	0000                	unimp
    25ee:	0301                	addi	t1,t1,0
    25f0:	0901                	addi	s2,s2,0
    25f2:	0000                	unimp
    25f4:	0301                	addi	t1,t1,0
    25f6:	0901                	addi	s2,s2,0
    25f8:	0000                	unimp
    25fa:	0301                	addi	t1,t1,0
    25fc:	0901                	addi	s2,s2,0
    25fe:	0000                	unimp
    2600:	0301                	addi	t1,t1,0
    2602:	0909                	addi	s2,s2,2
    2604:	0000                	unimp
    2606:	0501                	addi	a0,a0,0
    2608:	0612                	slli	a2,a2,0x4
    260a:	00090003          	lb	zero,0(s2)
    260e:	0100                	addi	s0,sp,128
    2610:	0c05                	addi	s8,s8,1
    2612:	0c090103          	lb	sp,192(s2)
    2616:	0100                	addi	s0,sp,128
    2618:	1205                	addi	tp,tp,-31
    261a:	0a097f03          	0xa097f03
    261e:	0100                	addi	s0,sp,128
    2620:	0505                	addi	a0,a0,1
    2622:	0306                	slli	t1,t1,0x1
    2624:	0901                	addi	s2,s2,0
    2626:	0002                	c.slli64	zero
    2628:	0501                	addi	a0,a0,0
    262a:	0612                	slli	a2,a2,0x4
    262c:	00090103          	lb	sp,0(s2)
    2630:	0100                	addi	s0,sp,128
    2632:	0c05                	addi	s8,s8,1
    2634:	04097f03          	0x4097f03
    2638:	0100                	addi	s0,sp,128
    263a:	0505                	addi	a0,a0,1
    263c:	0306                	slli	t1,t1,0x1
    263e:	0901                	addi	s2,s2,0
    2640:	0002                	c.slli64	zero
    2642:	0501                	addi	a0,a0,0
    2644:	0612                	slli	a2,a2,0x4
    2646:	00090003          	lb	zero,0(s2)
    264a:	0100                	addi	s0,sp,128
    264c:	0505                	addi	a0,a0,1
    264e:	0306                	slli	t1,t1,0x1
    2650:	0902                	c.slli64	s2
    2652:	0004                	0x4
    2654:	0501                	addi	a0,a0,0
    2656:	0310                	addi	a2,sp,384
    2658:	0900                	addi	s0,sp,144
    265a:	0000                	unimp
    265c:	0501                	addi	a0,a0,0
    265e:	0605                	addi	a2,a2,1
    2660:	00090003          	lb	zero,0(s2)
    2664:	0100                	addi	s0,sp,128
    2666:	0905                	addi	s2,s2,1
    2668:	0200                	addi	s0,sp,256
    266a:	0304                	addi	s1,sp,384
    266c:	0306                	slli	t1,t1,0x1
    266e:	0902                	c.slli64	s2
    2670:	0004                	0x4
    2672:	0501                	addi	a0,a0,0
    2674:	001f 0402 0603      	0x6030402001f
    267a:	00090003          	lb	zero,0(s2)
    267e:	0100                	addi	s0,sp,128
    2680:	1905                	addi	s2,s2,-31
    2682:	0200                	addi	s0,sp,256
    2684:	0304                	addi	s1,sp,384
    2686:	06090003          	lb	zero,96(s2)
    268a:	0100                	addi	s0,sp,128
    268c:	1705                	addi	a4,a4,-31
    268e:	0200                	addi	s0,sp,256
    2690:	0304                	addi	s1,sp,384
    2692:	0306                	slli	t1,t1,0x1
    2694:	097e                	slli	s2,s2,0x1f
    2696:	0006                	c.slli	zero,0x1
    2698:	0501                	addi	a0,a0,0
    269a:	0010                	0x10
    269c:	0402                	c.slli64	s0
    269e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    26a2:	0000                	unimp
    26a4:	0501                	addi	a0,a0,0
    26a6:	0005                	c.nop	1
    26a8:	0402                	c.slli64	s0
    26aa:	00030603          	lb	a2,0(t1)
    26ae:	0209                	addi	tp,tp,2
    26b0:	0100                	addi	s0,sp,128
    26b2:	0905                	addi	s2,s2,1
    26b4:	0200                	addi	s0,sp,256
    26b6:	0304                	addi	s1,sp,384
    26b8:	0306                	slli	t1,t1,0x1
    26ba:	0909                	addi	s2,s2,2
    26bc:	0004                	0x4
    26be:	0501                	addi	a0,a0,0
    26c0:	0402001b          	0x402001b
    26c4:	097e0303          	lb	t1,151(t3) # 1a097 <_stack_start+0xa097>
    26c8:	0000                	unimp
    26ca:	0501                	addi	a0,a0,0
    26cc:	0010                	0x10
    26ce:	0402                	c.slli64	s0
    26d0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    26d4:	0000                	unimp
    26d6:	0501                	addi	a0,a0,0
    26d8:	0009                	c.nop	2
    26da:	0402                	c.slli64	s0
    26dc:	09090303          	lb	t1,144(s2)
    26e0:	000c                	0xc
    26e2:	0501                	addi	a0,a0,0
    26e4:	0026                	c.slli	zero,0x9
    26e6:	0402                	c.slli64	s0
    26e8:	00030603          	lb	a2,0(t1)
    26ec:	0009                	c.nop	2
    26ee:	0100                	addi	s0,sp,128
    26f0:	2005                	jal	2710 <_min_stack+0x710>
    26f2:	0200                	addi	s0,sp,256
    26f4:	0304                	addi	s1,sp,384
    26f6:	06090003          	lb	zero,96(s2)
    26fa:	0100                	addi	s0,sp,128
    26fc:	1f05                	addi	t5,t5,-31
    26fe:	0200                	addi	s0,sp,256
    2700:	0304                	addi	s1,sp,384
    2702:	0306                	slli	t1,t1,0x1
    2704:	097e                	slli	s2,s2,0x1f
    2706:	0004                	0x4
    2708:	0501                	addi	a0,a0,0
    270a:	0014                	0x14
    270c:	0402                	c.slli64	s0
    270e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2712:	0000                	unimp
    2714:	0501                	addi	a0,a0,0
    2716:	0005                	c.nop	1
    2718:	0402                	c.slli64	s0
    271a:	00030603          	lb	a2,0(t1)
    271e:	0009                	c.nop	2
    2720:	0100                	addi	s0,sp,128
    2722:	0905                	addi	s2,s2,1
    2724:	0200                	addi	s0,sp,256
    2726:	0304                	addi	s1,sp,384
    2728:	0306                	slli	t1,t1,0x1
    272a:	0909                	addi	s2,s2,2
    272c:	0004                	0x4
    272e:	0501                	addi	a0,a0,0
    2730:	001f 0402 0303      	0x3030402001f
    2736:	097e                	slli	s2,s2,0x1f
    2738:	0000                	unimp
    273a:	0501                	addi	a0,a0,0
    273c:	0014                	0x14
    273e:	0402                	c.slli64	s0
    2740:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2744:	0000                	unimp
    2746:	0501                	addi	a0,a0,0
    2748:	0009                	c.nop	2
    274a:	0402                	c.slli64	s0
    274c:	09090303          	lb	t1,144(s2)
    2750:	000c                	0xc
    2752:	0501                	addi	a0,a0,0
    2754:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2758:	00030603          	lb	a2,0(t1)
    275c:	0009                	c.nop	2
    275e:	0100                	addi	s0,sp,128
    2760:	1d05                	addi	s10,s10,-31
    2762:	0200                	addi	s0,sp,256
    2764:	0304                	addi	s1,sp,384
    2766:	06090003          	lb	zero,96(s2)
    276a:	0100                	addi	s0,sp,128
    276c:	1f05                	addi	t5,t5,-31
    276e:	0200                	addi	s0,sp,256
    2770:	0304                	addi	s1,sp,384
    2772:	0306                	slli	t1,t1,0x1
    2774:	097e                	slli	s2,s2,0x1f
    2776:	0004                	0x4
    2778:	0501                	addi	a0,a0,0
    277a:	0014                	0x14
    277c:	0402                	c.slli64	s0
    277e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2782:	0000                	unimp
    2784:	0501                	addi	a0,a0,0
    2786:	0005                	c.nop	1
    2788:	0402                	c.slli64	s0
    278a:	00030603          	lb	a2,0(t1)
    278e:	0009                	c.nop	2
    2790:	0100                	addi	s0,sp,128
    2792:	0905                	addi	s2,s2,1
    2794:	0200                	addi	s0,sp,256
    2796:	0304                	addi	s1,sp,384
    2798:	0306                	slli	t1,t1,0x1
    279a:	0909                	addi	s2,s2,2
    279c:	000c                	0xc
    279e:	0501                	addi	a0,a0,0
    27a0:	0022                	c.slli	zero,0x8
    27a2:	0402                	c.slli64	s0
    27a4:	00030603          	lb	a2,0(t1)
    27a8:	0009                	c.nop	2
    27aa:	0100                	addi	s0,sp,128
    27ac:	1c05                	addi	s8,s8,-31
    27ae:	0200                	addi	s0,sp,256
    27b0:	0304                	addi	s1,sp,384
    27b2:	06090003          	lb	zero,96(s2)
    27b6:	0100                	addi	s0,sp,128
    27b8:	2105                	jal	2bd8 <_min_stack+0xbd8>
    27ba:	0200                	addi	s0,sp,256
    27bc:	0304                	addi	s1,sp,384
    27be:	0306                	slli	t1,t1,0x1
    27c0:	097e                	slli	s2,s2,0x1f
    27c2:	0004                	0x4
    27c4:	0501                	addi	a0,a0,0
    27c6:	0014                	0x14
    27c8:	0402                	c.slli64	s0
    27ca:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    27ce:	0000                	unimp
    27d0:	0501                	addi	a0,a0,0
    27d2:	0005                	c.nop	1
    27d4:	0402                	c.slli64	s0
    27d6:	00030603          	lb	a2,0(t1)
    27da:	0009                	c.nop	2
    27dc:	0100                	addi	s0,sp,128
    27de:	0306                	slli	t1,t1,0x1
    27e0:	0908                	addi	a0,sp,144
    27e2:	0004                	0x4
    27e4:	0501                	addi	a0,a0,0
    27e6:	0612                	slli	a2,a2,0x4
    27e8:	00090003          	lb	zero,0(s2)
    27ec:	0100                	addi	s0,sp,128
    27ee:	1305                	addi	t1,t1,-31
    27f0:	08090103          	lb	sp,128(s2)
    27f4:	0100                	addi	s0,sp,128
    27f6:	1205                	addi	tp,tp,-31
    27f8:	08090103          	lb	sp,128(s2)
    27fc:	0100                	addi	s0,sp,128
    27fe:	1305                	addi	t1,t1,-31
    2800:	04097f03          	0x4097f03
    2804:	0100                	addi	s0,sp,128
    2806:	1205                	addi	tp,tp,-31
    2808:	04097f03          	0x4097f03
    280c:	0100                	addi	s0,sp,128
    280e:	0505                	addi	a0,a0,1
    2810:	0306                	slli	t1,t1,0x1
    2812:	0901                	addi	s2,s2,0
    2814:	0002                	c.slli64	zero
    2816:	0501                	addi	a0,a0,0
    2818:	00030613          	mv	a2,t1
    281c:	0009                	c.nop	2
    281e:	0100                	addi	s0,sp,128
    2820:	1205                	addi	tp,tp,-31
    2822:	02090103          	lb	sp,32(s2)
    2826:	0100                	addi	s0,sp,128
    2828:	02090903          	lb	s2,32(s2)
    282c:	0100                	addi	s0,sp,128
    282e:	1305                	addi	t1,t1,-31
    2830:	08097603          	0x8097603
    2834:	0100                	addi	s0,sp,128
    2836:	0505                	addi	a0,a0,1
    2838:	0306                	slli	t1,t1,0x1
    283a:	0901                	addi	s2,s2,0
    283c:	0002                	c.slli64	zero
    283e:	0301                	addi	t1,t1,0
    2840:	0909                	addi	s2,s2,2
    2842:	0000                	unimp
    2844:	0501                	addi	a0,a0,0
    2846:	0612                	slli	a2,a2,0x4
    2848:	00090003          	lb	zero,0(s2)
    284c:	0100                	addi	s0,sp,128
    284e:	0505                	addi	a0,a0,1
    2850:	0306                	slli	t1,t1,0x1
    2852:	0901                	addi	s2,s2,0
    2854:	0002                	c.slli64	zero
    2856:	0501                	addi	a0,a0,0
    2858:	00030613          	mv	a2,t1
    285c:	0009                	c.nop	2
    285e:	0100                	addi	s0,sp,128
    2860:	0505                	addi	a0,a0,1
    2862:	0306                	slli	t1,t1,0x1
    2864:	0901                	addi	s2,s2,0
    2866:	0014                	0x14
    2868:	0501                	addi	a0,a0,0
    286a:	0612                	slli	a2,a2,0x4
    286c:	00090003          	lb	zero,0(s2)
    2870:	0100                	addi	s0,sp,128
    2872:	1a05                	addi	s4,s4,-31
    2874:	04091b03          	lh	s6,64(s2)
    2878:	0100                	addi	s0,sp,128
    287a:	1205                	addi	tp,tp,-31
    287c:	04096503          	0x4096503
    2880:	0100                	addi	s0,sp,128
    2882:	0505                	addi	a0,a0,1
    2884:	0306                	slli	t1,t1,0x1
    2886:	00020913          	mv	s2,tp
    288a:	0501                	addi	a0,a0,0
    288c:	0310                	addi	a2,sp,384
    288e:	0900                	addi	s0,sp,144
    2890:	0000                	unimp
    2892:	0501                	addi	a0,a0,0
    2894:	0612                	slli	a2,a2,0x4
    2896:	00096d03          	0x96d03
    289a:	0100                	addi	s0,sp,128
    289c:	1a05                	addi	s4,s4,-31
    289e:	02091b03          	lh	s6,32(s2)
    28a2:	0100                	addi	s0,sp,128
    28a4:	0505                	addi	a0,a0,1
    28a6:	04097803          	0x4097803
    28aa:	0100                	addi	s0,sp,128
    28ac:	0905                	addi	s2,s2,1
    28ae:	0306                	slli	t1,t1,0x1
    28b0:	0901                	addi	s2,s2,0
    28b2:	0004                	0x4
    28b4:	0501                	addi	a0,a0,0
    28b6:	0003060b          	0x3060b
    28ba:	0009                	c.nop	2
    28bc:	0100                	addi	s0,sp,128
    28be:	2705                	jal	2fde <_min_stack+0xfde>
    28c0:	02090003          	lb	zero,32(s2)
    28c4:	0100                	addi	s0,sp,128
    28c6:	0b05                	addi	s6,s6,1
    28c8:	04090003          	lb	zero,64(s2)
    28cc:	0100                	addi	s0,sp,128
    28ce:	0d05                	addi	s10,s10,1
    28d0:	0306                	slli	t1,t1,0x1
    28d2:	0902                	c.slli64	s2
    28d4:	000a                	c.slli	zero,0x2
    28d6:	0501                	addi	a0,a0,0
    28d8:	061a                	slli	a2,a2,0x6
    28da:	00090003          	lb	zero,0(s2)
    28de:	0100                	addi	s0,sp,128
    28e0:	0d05                	addi	s10,s10,1
    28e2:	0306                	slli	t1,t1,0x1
    28e4:	0902                	c.slli64	s2
    28e6:	000a                	c.slli	zero,0x2
    28e8:	0501                	addi	a0,a0,0
    28ea:	0305                	addi	t1,t1,1
    28ec:	0909                	addi	s2,s2,2
    28ee:	0000                	unimp
    28f0:	0501                	addi	a0,a0,0
    28f2:	0601                	addi	a2,a2,0
    28f4:	00090103          	lb	sp,0(s2)
    28f8:	0100                	addi	s0,sp,128
    28fa:	0d05                	addi	s10,s10,1
    28fc:	0200                	addi	s0,sp,256
    28fe:	0204                	addi	s1,sp,256
    2900:	0306                	slli	t1,t1,0x1
    2902:	0979                	addi	s2,s2,30
    2904:	0018                	0x18
    2906:	0501                	addi	a0,a0,0
    2908:	001a                	c.slli	zero,0x6
    290a:	0402                	c.slli64	s0
    290c:	0602                	c.slli64	a2
    290e:	00090003          	lb	zero,0(s2)
    2912:	0100                	addi	s0,sp,128
    2914:	1805                	addi	a6,a6,-31
    2916:	0200                	addi	s0,sp,256
    2918:	0204                	addi	s1,sp,256
    291a:	0306                	slli	t1,t1,0x1
    291c:	0978                	addi	a4,sp,156
    291e:	0002                	c.slli64	zero
    2920:	0501                	addi	a0,a0,0
    2922:	0010                	0x10
    2924:	0402                	c.slli64	s0
    2926:	0302                	c.slli64	t1
    2928:	0900                	addi	s0,sp,144
    292a:	0000                	unimp
    292c:	0501                	addi	a0,a0,0
    292e:	0005                	c.nop	1
    2930:	0402                	c.slli64	s0
    2932:	0602                	c.slli64	a2
    2934:	02090003          	lb	zero,32(s2)
    2938:	0100                	addi	s0,sp,128
    293a:	0609                	addi	a2,a2,2
    293c:	0000                	unimp
    293e:	0101                	addi	sp,sp,0
    2940:	0150                	addi	a2,sp,132
    2942:	0000                	unimp
    2944:	001d0003          	lb	zero,1(s10)
    2948:	0000                	unimp
    294a:	0101                	addi	sp,sp,0
    294c:	000d0efb          	0xd0efb
    2950:	0101                	addi	sp,sp,0
    2952:	0101                	addi	sp,sp,0
    2954:	0000                	unimp
    2956:	0100                	addi	s0,sp,128
    2958:	0000                	unimp
    295a:	0001                	nop
    295c:	30747263          	bgeu	s0,t2,2c60 <_min_stack+0xc60>
    2960:	532e                	lw	t1,232(sp)
    2962:	0000                	unimp
    2964:	0000                	unimp
    2966:	0000                	unimp
    2968:	0205                	addi	tp,tp,1
    296a:	0d78                	addi	a4,sp,668
    296c:	0000                	unimp
    296e:	0315                	addi	t1,t1,5
    2970:	0904                	addi	s1,sp,144
    2972:	0004                	0x4
    2974:	0301                	addi	t1,t1,0
    2976:	0901                	addi	s2,s2,0
    2978:	0004                	0x4
    297a:	0301                	addi	t1,t1,0
    297c:	0901                	addi	s2,s2,0
    297e:	0002                	c.slli64	zero
    2980:	0301                	addi	t1,t1,0
    2982:	0901                	addi	s2,s2,0
    2984:	0002                	c.slli64	zero
    2986:	0301                	addi	t1,t1,0
    2988:	0901                	addi	s2,s2,0
    298a:	0002                	c.slli64	zero
    298c:	0301                	addi	t1,t1,0
    298e:	0901                	addi	s2,s2,0
    2990:	0002                	c.slli64	zero
    2992:	0301                	addi	t1,t1,0
    2994:	0901                	addi	s2,s2,0
    2996:	0002                	c.slli64	zero
    2998:	0301                	addi	t1,t1,0
    299a:	0901                	addi	s2,s2,0
    299c:	0002                	c.slli64	zero
    299e:	0301                	addi	t1,t1,0
    29a0:	0901                	addi	s2,s2,0
    29a2:	0002                	c.slli64	zero
    29a4:	0301                	addi	t1,t1,0
    29a6:	0901                	addi	s2,s2,0
    29a8:	0002                	c.slli64	zero
    29aa:	0301                	addi	t1,t1,0
    29ac:	0901                	addi	s2,s2,0
    29ae:	0002                	c.slli64	zero
    29b0:	0301                	addi	t1,t1,0
    29b2:	0901                	addi	s2,s2,0
    29b4:	0002                	c.slli64	zero
    29b6:	0301                	addi	t1,t1,0
    29b8:	0901                	addi	s2,s2,0
    29ba:	0002                	c.slli64	zero
    29bc:	0301                	addi	t1,t1,0
    29be:	0901                	addi	s2,s2,0
    29c0:	0002                	c.slli64	zero
    29c2:	0301                	addi	t1,t1,0
    29c4:	0901                	addi	s2,s2,0
    29c6:	0002                	c.slli64	zero
    29c8:	0301                	addi	t1,t1,0
    29ca:	0901                	addi	s2,s2,0
    29cc:	0002                	c.slli64	zero
    29ce:	0301                	addi	t1,t1,0
    29d0:	0901                	addi	s2,s2,0
    29d2:	0002                	c.slli64	zero
    29d4:	0301                	addi	t1,t1,0
    29d6:	0901                	addi	s2,s2,0
    29d8:	0002                	c.slli64	zero
    29da:	0301                	addi	t1,t1,0
    29dc:	0901                	addi	s2,s2,0
    29de:	0002                	c.slli64	zero
    29e0:	0301                	addi	t1,t1,0
    29e2:	0901                	addi	s2,s2,0
    29e4:	0002                	c.slli64	zero
    29e6:	0301                	addi	t1,t1,0
    29e8:	0901                	addi	s2,s2,0
    29ea:	0002                	c.slli64	zero
    29ec:	0301                	addi	t1,t1,0
    29ee:	0901                	addi	s2,s2,0
    29f0:	0002                	c.slli64	zero
    29f2:	0301                	addi	t1,t1,0
    29f4:	0901                	addi	s2,s2,0
    29f6:	0002                	c.slli64	zero
    29f8:	0301                	addi	t1,t1,0
    29fa:	0901                	addi	s2,s2,0
    29fc:	0002                	c.slli64	zero
    29fe:	0301                	addi	t1,t1,0
    2a00:	0901                	addi	s2,s2,0
    2a02:	0002                	c.slli64	zero
    2a04:	0301                	addi	t1,t1,0
    2a06:	0901                	addi	s2,s2,0
    2a08:	0002                	c.slli64	zero
    2a0a:	0301                	addi	t1,t1,0
    2a0c:	0901                	addi	s2,s2,0
    2a0e:	0002                	c.slli64	zero
    2a10:	0301                	addi	t1,t1,0
    2a12:	0901                	addi	s2,s2,0
    2a14:	0002                	c.slli64	zero
    2a16:	0301                	addi	t1,t1,0
    2a18:	0901                	addi	s2,s2,0
    2a1a:	0002                	c.slli64	zero
    2a1c:	0301                	addi	t1,t1,0
    2a1e:	0901                	addi	s2,s2,0
    2a20:	0002                	c.slli64	zero
    2a22:	0301                	addi	t1,t1,0
    2a24:	0901                	addi	s2,s2,0
    2a26:	0002                	c.slli64	zero
    2a28:	0301                	addi	t1,t1,0
    2a2a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2a2e:	0301                	addi	t1,t1,0
    2a30:	0906                	slli	s2,s2,0x1
    2a32:	0008                	0x8
    2a34:	0301                	addi	t1,t1,0
    2a36:	0901                	addi	s2,s2,0
    2a38:	0008                	0x8
    2a3a:	0301                	addi	t1,t1,0
    2a3c:	0902                	c.slli64	s2
    2a3e:	0008                	0x8
    2a40:	0301                	addi	t1,t1,0
    2a42:	00040903          	lb	s2,0(s0)
    2a46:	0301                	addi	t1,t1,0
    2a48:	0901                	addi	s2,s2,0
    2a4a:	0004                	0x4
    2a4c:	0301                	addi	t1,t1,0
    2a4e:	0901                	addi	s2,s2,0
    2a50:	0002                	c.slli64	zero
    2a52:	0301                	addi	t1,t1,0
    2a54:	0906                	slli	s2,s2,0x1
    2a56:	0004                	0x4
    2a58:	0301                	addi	t1,t1,0
    2a5a:	0901                	addi	s2,s2,0
    2a5c:	0004                	0x4
    2a5e:	0301                	addi	t1,t1,0
    2a60:	0901                	addi	s2,s2,0
    2a62:	0004                	0x4
    2a64:	0901                	addi	s2,s2,0
    2a66:	0004                	0x4
    2a68:	0100                	addi	s0,sp,128
    2a6a:	0001                	nop
    2a6c:	0205                	addi	tp,tp,1
    2a6e:	0000                	unimp
    2a70:	0000                	unimp
    2a72:	0100cb03          	lbu	s6,16(ra)
    2a76:	7c090103          	lb	sp,1984(s2)
    2a7a:	0100                	addi	s0,sp,128
    2a7c:	04090403          	lb	s0,64(s2)
    2a80:	0100                	addi	s0,sp,128
    2a82:	04090403          	lb	s0,64(s2)
    2a86:	0100                	addi	s0,sp,128
    2a88:	04090403          	lb	s0,64(s2)
    2a8c:	0100                	addi	s0,sp,128
    2a8e:	0409                	addi	s0,s0,2
    2a90:	0000                	unimp
    2a92:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0x9c>
    for(i=0;i<(length/3);i++) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
}
  a0:	7200                	flw	fs0,32(a2)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    asm volatile(
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    int line[size_b][size_a + size_b];
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c8:	6572                	flw	fa0,28(sp)
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
    int pola[size_a];
  d0:	6d5f0067          	jr	1749(t5)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
  d8:	735f6377          	0x735f6377
    int line[size_b][size_a + size_b];
  dc:	6174                	flw	fa3,68(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
    int line[size_b][size_a + size_b];
  e6:	626d                	lui	tp,0x1b
    int pola[size_a];
  e8:	735f 6174 6574      	0x65746174735f
    int line[size_b][size_a + size_b];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
    int polb[size_b];
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x186>
  fa:	676e                	flw	fa4,216(sp)
    int pola[size_a];
  fc:	6c20                	flw	fs0,88(s0)
    int polb[size_b];
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
    int line[size_b][size_a + size_b];
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
    int pola[size_a];
 106:	657a6973          	csrrsi	s2,0x657,20
    int polb[size_b];
 10a:	4e5f 7000 6c6f      	0x6c6f70004e5f
            line[i][j] = 0;
 110:	6d79                	lui	s10,0x1e
    for (i = 0; i < size_b; ++i){
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
            product[j] = 0;
 116:	755f 7562 0066      	0x667562755f
 11c:	625f 7361 0065      	0x657361625f
    for (i = 0; i < size_b; ++i){
 122:	5f5f 6d74 685f      	0x685f6d745f5f
    for (i = 0; i < size_a; ++i){
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
    for (i = 0; i < size_b; ++i){
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
    if(star_mult == 1){
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
 13a:	7261                	lui	tp,0xffff8
 13c:	5f007367          	0x5f007367
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0x1ae>
        for (j = size_b -1; j >= 0; j = j-1){
 144:	6569                	lui	a0,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
 146:	5f00                	lw	s0,56(a4)
 148:	735f 6c67 6575      	0x65756c67735f
            product[j] = 0;
 14e:	7200                	flw	fs0,32(a2)
            line[i][j] = 0;
 150:	7365                	lui	t1,0xffff9
 152:	0031                	c.nop	12
            product[j] = 0;
 154:	6572                	flw	fa0,28(sp)
 156:	5f003273          	csrrc	tp,0x5f0,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
 15e:	695f0073          	0x695f0073
    for (i = 0; i < size_b; ++i){
 162:	78635f73          	csrrwi	t5,0x786,6
 166:	0061                	c.nop	24
        for(j = 0; j < size_a + size_b -1; ++j){
 168:	735f 6474 6e69      	0x6e696474735f
        pola[i] = a[i];
 16e:	5f00                	lw	s0,56(a4)
 170:	6c62                	flw	fs8,24(sp)
 172:	7a69736b          	0x7a69736b
            pola[i] = pola[i] + mod;
 176:	0065                	c.nop	25
 178:	7270                	flw	fa2,100(a2)
        while (pola[i] < 0){
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
 17e:	0074                	addi	a3,sp,12
 180:	6f70                	flw	fa2,92(a4)
        pola[i] = pola[i] % mod;
 182:	796c                	flw	fa1,116(a0)
 184:	6964                	flw	fs1,84(a0)
    for (i = 0; i < size_a; ++i){
 186:	0076                	c.slli	zero,0x1d
 188:	6f70                	flw	fa2,92(a4)
        pola[i] = pola[i] % mod;
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
    for (i = 0; i < size_a; ++i){
 18e:	635f 7476 7562      	0x75627476635f
        polb[i] = b[i];
 194:	0066                	c.slli	zero,0x19
 196:	6f5f 6666 6573      	0x657366666f5f
            polb[i] = polb[i] + mod;
 19c:	0074                	addi	a3,sp,12
        while (polb[i] < 0){
 19e:	6d5f 7362 7472      	0x747273626d5f
        polb[i] = polb[i] % mod;
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
    for (i = 0; i < size_b; ++i){
 1a8:	735f 6174 6574      	0x65746174735f
        polb[i] = polb[i] % mod;
 1ae:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 1b0:	626d                	lui	tp,0x1b
            polb[i] = polb[i] + mod;
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
    if(star_mult == 1){
 1b6:	735f 6174 6574      	0x65746174735f
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 1be:	6e66                	flw	ft8,88(sp)
 1c0:	7261                	lui	tp,0xffff8
 1c2:	6e007367          	0x6e007367
 1c6:	7274                	flw	fa3,100(a2)
 1c8:	5f75                	li	t5,-3
 1ca:	6564                	flw	fs1,76(a0)
    for(j = 0; j < size_a + size_b -1; ++j){
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x286>
 1d0:	0074                	addi	a3,sp,12
    for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	665f 736e 5f00      	0x5f00736e665f
}
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
 1dc:	5f00                	lw	s0,56(a4)
 1de:	6c66                	flw	fs8,88(sp)
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
 1e4:	0074                	addi	a3,sp,12
 1e6:	735f 6474 7265      	0x72656474735f
 1ec:	0072                	c.slli	zero,0x1c
 1ee:	425f 6769 6e69      	0x6e696769425f
 1f4:	0074                	addi	a3,sp,12
 1f6:	675f 6d61 616d      	0x616d6d61675f
                line[size_b-1-j][k] = pola[k]*polb[j];
 1fc:	735f 6769 676e      	0x676e6769735f
 202:	6d61                	lui	s10,0x18
 204:	5f00                	lw	s0,56(a4)
 206:	6572                	flw	fa0,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 208:	6461                	lui	s0,0x18
                line[size_b-1-j][k] = pola[k]*polb[j];
 20a:	5f00                	lw	s0,56(a4)
 20c:	6572                	flw	fa0,28(sp)
 20e:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 212:	6b5f 5f00 745f      	0x745f5f006b5f
        for (j = size_b -1; j >= 0; j = j-1){
 218:	006d                	c.nop	27
 21a:	6564                	flw	fs1,76(a0)
 21c:	756e                	flw	fa0,248(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 21e:	5f6d                	li	t5,-5
 220:	6574                	flw	fa3,76(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 222:	706d                	c.lui	zero,0xffffb
 224:	5f00                	lw	s0,56(a4)
 226:	775f 6863 0062      	0x626863775f
 22c:	6572                	flw	fa0,28(sp)
 22e:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 232:	006e6f6b          	0x6e6f6b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 236:	735f 6474 756f      	0x756f6474735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 23c:	0074                	addi	a3,sp,12
 23e:	635f 7476 656c      	0x656c7476635f
        for (j = size_b -1; j >= 0; j = j-1){
 244:	006e                	c.slli	zero,0x1b
 246:	72636573          	csrrsi	a0,0x726,6
        for(j = 0; j < size_a + size_b -1; ++j){
 24a:	7465                	lui	s0,0xffff9
 24c:	6b5f 7965 665f      	0x665f79656b5f
            line[i][j] = line[i][j] % mod;
 252:	0071                	c.nop	28
 254:	665f 6c69 0065      	0x656c69665f
    for (i = 0; i < size_b; ++i){
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
 25e:	6e72                	flw	ft8,28(sp)
 260:	615f 6464 6572      	0x65726464615f
            product[j] += line[i][j];
 266:	00317373          	csrrci	t1,fcsr,2
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
        for(i = 0; i < size_b; ++i){
 26e:	6e72                	flw	ft8,28(sp)
            product[j] += line[i][j];
 270:	615f 6464 6572      	0x65726464615f
 276:	00327373          	csrrci	t1,fcsr,4
 27a:	6572                	flw	fa0,28(sp)
        for(i = 0; i < size_b; ++i){
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 280:	615f 6464 6572      	0x65726464615f
        for(i = 0; i < size_b; ++i){
 286:	00337373          	csrrci	t1,fcsr,6
        product[j] = product[j] % mod;
 28a:	6572                	flw	fa0,28(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 28c:	7574                	flw	fa3,108(a0)
 28e:	6e72                	flw	ft8,28(sp)
        product[j] = product[j] % mod;
 290:	615f 6464 6572      	0x65726464615f
 296:	00347373          	csrrci	t1,fcsr,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 29a:	6e5f 6f69 7362      	0x73626f696e5f
    int line[size_b][size_a + size_b];
 2a0:	7200                	flw	fs0,32(a2)
 2a2:	7465                	lui	s0,0xffff9
 2a4:	7275                	lui	tp,0xffffd
 2a6:	5f6e                	lw	t5,248(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2a8:	6461                	lui	s0,0x18
 2aa:	7264                	flw	fs1,100(a2)
    int line[size_b][size_a + size_b];
 2ac:	7365                	lui	t1,0xffff9
 2ae:	72003673          	csrrc	a2,0x720,zero
 2b2:	7465                	lui	s0,0xffff9
 2b4:	7275                	lui	tp,0xffffd
 2b6:	5f6e                	lw	t5,248(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2b8:	6461                	lui	s0,0x18
 2ba:	7264                	flw	fs1,100(a2)
 2bc:	7365                	lui	t1,0xffff9
 2be:	73003773          	csrrc	a4,0x730,zero
 2c2:	6f68                	flw	fa0,92(a4)
 2c4:	7472                	flw	fs0,60(sp)
    int pola[size_a];
 2c6:	7520                	flw	fs0,104(a0)
 2c8:	736e                	flw	ft6,248(sp)
    int line[size_b][size_a + size_b];
 2ca:	6769                	lui	a4,0x1a
 2cc:	656e                	flw	fa0,216(sp)
 2ce:	2064                	fld	fs1,192(s0)
 2d0:	6e69                	lui	t3,0x1a
    int pola[size_a];
 2d2:	0074                	addi	a3,sp,12
 2d4:	615f 6574 6978      	0x69786574615f
    int line[size_b][size_a + size_b];
 2da:	3074                	fld	fa3,224(s0)
    int pola[size_a];
 2dc:	5f00                	lw	s0,56(a4)
 2de:	6e676973          	csrrsi	s2,0x6e6,14
    int polb[size_b];
 2e2:	6c61                	lui	s8,0x18
 2e4:	625f 6675 5f00      	0x5f006675625f
 2ea:	7361                	lui	t1,0xffff8
    int line[size_b][size_a + size_b];
 2ec:	6d697463          	bgeu	s2,s6,9b4 <generate_keys+0x80>
    for (i = 0; i < size_b; ++i){
 2f0:	5f65                	li	t5,-7
 2f2:	7562                	flw	fa0,56(sp)
 2f4:	0066                	c.slli	zero,0x19
            product2[j] = 0;
 2f6:	725f 7365 6c75      	0x6c757365725f
 2fc:	0074                	addi	a3,sp,12
    for (i = 0; i < size_b; ++i){
 2fe:	5f5f 6377 0068      	0x6863775f5f
    for(i = 0; i < size_a; ++i){
 304:	746e6977          	0x746e6977
    for(i = 0; i < size_b; ++i){
 308:	745f 6700 6e65      	0x6e656700745f
    if(star_mult == 1){
 30e:	7265                	lui	tp,0xffff9
 310:	7461                	lui	s0,0xffff8
 312:	5f65                	li	t5,-7
 314:	7379656b          	0x7379656b
 318:	5f00                	lw	s0,56(a4)
 31a:	625f 6975 746c      	0x746c6975625f
        for (j = size_b -1; j >= 0; j = j-1){
 320:	6e69                	lui	t3,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
 322:	6d5f 6d65 7063      	0x70636d656d5f
            product2[j] = 0;
 328:	0079                	c.nop	30
 32a:	6c5f 636f 006b      	0x6b636f6c5f
 330:	544e                	lw	s0,240(sp)
 332:	5552                	lw	a0,52(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 334:	345f 5f38 6962      	0x69625f38345f
 33a:	4d74                	lw	a3,92(a0)
    for (i = 0; i < size_b; ++i){
 33c:	632e                	flw	ft6,200(sp)
 33e:	7000                	flw	fs0,32(s0)
 340:	6f72                	flw	ft10,28(sp)
 342:	7564                	flw	fs1,108(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 344:	00327463          	bgeu	tp,gp,34c <polymult2+0xb2>
        pola[i] = a[i];
 348:	7865                	lui	a6,0xffff9
 34a:	5f74                	lw	a3,124(a4)
 34c:	7565                	lui	a0,0xffff9
 34e:	64696c63          	bltu	s2,t1,9a6 <generate_keys+0x72>
 352:	5f00                	lw	s0,56(a4)
 354:	74697277          	0x74697277
 358:	0065                	c.nop	25
 35a:	5f5f 6d74 795f      	0x795f6d745f5f
        polb[i] = b[i];
 360:	6165                	addi	sp,sp,112
 362:	0072                	c.slli	zero,0x1c
 364:	6f70                	flw	fa2,92(a4)
 366:	626c                	flw	fa1,68(a2)
 368:	7200                	flw	fs0,32(a2)
 36a:	6e61                	lui	t3,0x18
    for(i = 0; i < size_b; ++i){
 36c:	6f64                	flw	fs1,92(a4)
        polb[i] = b[i];
 36e:	5f6d                	li	t5,-5
 370:	6176                	flw	ft2,92(sp)
    for(i = 0; i < size_b; ++i){
 372:	006c                	addi	a1,sp,12
                line[size_b-1-j][k] = pola[k]*polb[j];
 374:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 37a:	6c00636f          	jal	t1,6a3a <_stack_len+0x2a3a>
 37e:	20676e6f          	jal	t3,76584 <_stack_start+0x66584>
 382:	6f64                	flw	fs1,92(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 384:	6275                	lui	tp,0x1d
                line[size_b-1-j][k] = pola[k]*polb[j];
 386:	656c                	flw	fa1,76(a0)
 388:	5f00                	lw	s0,56(a4)
 38a:	656e                	flw	fa0,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	7478                	flw	fa4,108(s0)
 38e:	0066                	c.slli	zero,0x19
        for (j = size_b -1; j >= 0; j = j-1){
 390:	656d                	lui	a0,0x1b
 392:	67617373          	csrrci	t1,0x676,2
 396:	0065                	c.nop	25
 398:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        array_add(product2,line[i],size_a+size_b-1);
 39e:	72006e6f          	jal	t3,6abe <_stack_len+0x2abe>
 3a2:	7465                	lui	s0,0xffff9
    for(i=0;i<size_b;++i){
 3a4:	7275                	lui	tp,0xffffd
 3a6:	5f6e                	lw	t5,248(sp)
}
 3a8:	6461                	lui	s0,0x18
 3aa:	7264                	flw	fs1,100(a2)
 3ac:	7365                	lui	t1,0xffff9
 3ae:	5f003573          	csrrc	a0,0x5f0,zero
 3b2:	7461                	lui	s0,0xffff8
 3b4:	7865                	lui	a6,0xffff9
 3b6:	7469                	lui	s0,0xffffa
 3b8:	7300                	flw	fs0,32(a4)
 3ba:	6275                	lui	tp,0x1d
 3bc:	6174706f          	j	481d2 <_stack_start+0x381d2>
 3c0:	6772                	flw	fa4,28(sp)
 3c2:	5f00                	lw	s0,56(a4)
 3c4:	735f 6964 6964      	0x69646964735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	696e                	flw	fs2,216(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3cc:	0074                	addi	a3,sp,12
 3ce:	6f5f 6666 745f      	0x745f66666f5f
 3d4:	4500                	lw	s0,8(a0)
 3d6:	636e                	flw	ft6,216(sp)
 3d8:	4d5f 7365 6173      	0x617373654d5f
 3de:	63006567          	0x63006567
 3e2:	72746e6f          	jal	t3,47308 <_stack_start+0x37308>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e6:	00526c6f          	jal	s8,26bea <_stack_start+0x16bea>
        for (j = size_b -1; j >= 0; j = j-1){
 3ea:	665f 6572 6c65      	0x6c656572665f
 3f0:	7369                	lui	t1,0xffffa
        array_add(product2,line[i],size_a+size_b-1);
 3f2:	0074                	addi	a3,sp,12
 3f4:	6972                	flw	fs2,28(sp)
 3f6:	676e                	flw	fa4,216(sp)
 3f8:	705f 6c6f 0079      	0x796c6f705f
    for(i=0;i<size_b;++i){
 3fe:	4c5f 434f 5f4b      	0x5f4b434f4c5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 404:	4552                	lw	a0,20(sp)
    int v[size_N];
 406:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 40a:	5649                	li	a2,-14
 40c:	5f45                	li	t5,-15
 40e:	0054                	addi	a3,sp,4
 410:	6974                	flw	fa3,84(a0)
 412:	315f 7400 5f69      	0x5f697400315f
 418:	0032                	c.slli	zero,0xc
 41a:	6e75                	lui	t3,0x1d
 41c:	6e676973          	csrrsi	s2,0x6e6,14
 420:	6465                	lui	s0,0x19
 422:	6320                	flw	fs0,64(a4)
 424:	6168                	flw	fa0,68(a0)
    int v[size_N];
 426:	0072                	c.slli	zero,0x1c
 428:	6971                	lui	s2,0x1c
 42a:	315f 5f00 656e      	0x656e5f00315f
    int q[size_N];
 430:	685f0077          	0x685f0077
    int num_temp[size_N];
 434:	655f 7272 6f6e      	0x6f6e7272655f
    int denum_temp[size_D];
 43a:	7300                	flw	fs0,32(a4)
 43c:	6f68                	flw	fa0,92(a4)
    int num_temp[size_N];
 43e:	7472                	flw	fs0,60(sp)
    int denum_temp[size_D];
 440:	6920                	flw	fs0,80(a0)
 442:	746e                	flw	fs0,248(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 444:	5f00                	lw	s0,56(a4)
 446:	745f 5f6d 6479      	0x64795f6d745f
 44c:	7961                	lui	s2,0xffff8
    int v[size_N];
 44e:	5f00                	lw	s0,56(a4)
 450:	735f 7562 0066      	0x667562735f
    for (i = 0; i < size_N; ++i){
 456:	665f 616c 7367      	0x7367616c665f
 45c:	0032                	c.slli	zero,0xc
 45e:	695f 626f 0073      	0x73626f695f
    for (i = 0; i < size_D; ++i) {
 464:	5f5f 4946 454c      	0x454c49465f5f
    for (i = 0; i < size_N; ++i){
 46a:	5f00                	lw	s0,56(a4)
    for (i = size_D-1; i >= 0; i = i-1){
 46c:	626d                	lui	tp,0x1b
 46e:	74617473          	csrrci	s0,0x746,2
 472:	5f65                	li	t5,-7
 474:	0074                	addi	a3,sp,12
 476:	5f5f 4673 4c49      	0x4c4946735f5f
        if ( (b_N*u)%mod == 1 )
 47c:	0045                	c.nop	17
    for (u = 0; u < mod; ++u){
 47e:	6d5f 7362 6174      	0x617473626d5f
 484:	6574                	flw	fa3,76(a0)
        num_temp[i] = num[i];
 486:	5f00                	lw	s0,56(a4)
 488:	6172                	flw	ft2,28(sp)
 48a:	646e                	flw	fs0,216(sp)
 48c:	6e5f 7865 0074      	0x7478656e5f
        while (num_temp[i] < 0) {
 492:	6d5f 6c62 6e65      	0x6e656c626d5f
        num_temp[i] = num_temp[i] % mod;
 498:	735f 6174 6574      	0x65746174735f
 49e:	5f00                	lw	s0,56(a4)
 4a0:	6e69                	lui	t3,0x1a
    for (i = 0; i < size_N; ++i){
 4a2:	695f0063          	beq	t5,s5,b22 <generate_keys+0x1ee>
            num_temp[i] = num_temp[i] + mod;
 4a6:	646e                	flw	fs0,216(sp)
        denum_temp[i] = denum[i];
 4a8:	5f00                	lw	s0,56(a4)
 4aa:	6f6c                	flw	fa1,92(a4)
 4ac:	656c6163          	bltu	s8,s6,aee <generate_keys+0x1ba>
            denum_temp[i] = denum_temp[i] + mod;
 4b0:	5f00                	lw	s0,56(a4)
        while (denum_temp[i] < 0) {
 4b2:	635f 656c 6e61      	0x6e61656c635f
        denum_temp[i] = denum_temp[i] % mod;
 4b8:	7075                	c.lui	zero,0xffffd
 4ba:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_D; ++i) {
 4bc:	6e75                	lui	t3,0x1d
 4be:	63657073          	csrci	0x636,10
        denum_temp[i] = denum_temp[i] % mod;
 4c2:	6669                	lui	a2,0x1a
    for (i = 0; i < size_D; ++i) {
 4c4:	6569                	lui	a0,0x1a
            denum_temp[i] = denum_temp[i] + mod;
 4c6:	5f64                	lw	s1,124(a4)
 4c8:	6f6c                	flw	fa1,92(a4)
        q[i] = 0;
 4ca:	656c6163          	bltu	s8,s6,b0c <generate_keys+0x1d8>
 4ce:	695f 666e 006f      	0x6f666e695f
 4d4:	6d5f 7861 6477      	0x647778616d5f
        v[i] = 0;
 4da:	725f0073          	0x725f0073
    for (i = 0; i < size_N; ++i){
 4de:	6565                	lui	a0,0x19
        if( denum_temp[i] != 0 )
 4e0:	746e                	flw	fs0,248(sp)
    for (i = size_D-1; i >= 0; i = i-1){
 4e2:	7300                	flw	fs0,32(a4)
 4e4:	6174                	flw	fa3,68(a0)
        if ( (b_N*u)%mod == 1 )
 4e6:	5f72                	lw	t5,60(sp)
 4e8:	756d                	lui	a0,0xffffb
 4ea:	746c                	flw	fa1,108(s0)
 4ec:	5f00                	lw	s0,56(a4)
 4ee:	64656573          	csrrsi	a0,0x646,10
    for (u = 0; u < mod; ++u){
 4f2:	7200                	flw	fs0,32(a2)
        if( num_temp[i] != 0 )
 4f4:	5f69                	li	t5,-6
    for (i = size_N-1; i >= 0; i = i-1){
 4f6:	0032                	c.slli	zero,0xc
 4f8:	5f5f 6f63 6e75      	0x6e756f635f5f
 4fe:	0074                	addi	a3,sp,12
 500:	5f5f 6176 756c      	0x756c61765f5f
    while (d >= d2){
 506:	0065                	c.nop	25
    for(i = 0; i < size_N; ++i){
 508:	735f 6565 006b      	0x6b6565735f
        result[i] = q[i];
 50e:	665f 6f70 5f73      	0x5f736f70665f
    for(i = 0; i < size_N; ++i){
 514:	0074                	addi	a3,sp,12
    for(i = size_N; i < (2*size_N); ++i){
 516:	656c                	flw	fa1,76(a0)
 518:	676e                	flw	fa4,216(sp)
        result[i] = num_temp[i-size_N];
 51a:	6874                	flw	fa3,84(s0)
 51c:	5f00                	lw	s0,56(a4)
 51e:	745f 5f6d 696d      	0x696d5f6d745f
    for(i = size_N; i < (2*size_N); ++i){
 524:	006e                	c.slli	zero,0x1b
}
 526:	7570                	flw	fa2,108(a0)
 528:	6c62                	flw	fs8,24(sp)
 52a:	6369                	lui	t1,0x1a
 52c:	6b5f 7965 6100      	0x610079656b5f
 532:	7272                	flw	ft4,60(sp)
 534:	7961                	lui	s2,0xffff8
 536:	615f 6464 5f00      	0x5f006464615f
 53c:	74727473          	csrrci	s0,0x747,4
 540:	6c5f6b6f          	jal	s6,f7404 <_stack_start+0xe7404>
 544:	7361                	lui	t1,0xffff8
 546:	0074                	addi	a3,sp,12
 548:	665f 746e 7079      	0x7079746e665f
 54e:	7365                	lui	t1,0xffff9
        v[(d-d2)] = u*r_d;
 550:	7300                	flw	fs0,32(a4)
 552:	6365                	lui	t1,0x19
 554:	6572                	flw	fa0,28(sp)
 556:	5f74                	lw	a3,124(a4)
 558:	5f79656b          	0x5f79656b
 55c:	7066                	flw	ft0,120(sp)
        for (i = 0; i < size_N; ++i){
 55e:	5f00                	lw	s0,56(a4)
 560:	555f 6f4c 676e      	0x676e6f4c555f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 566:	7200                	flw	fs0,32(a2)
 568:	5f69                	li	t5,-6
 56a:	0031                	c.nop	12
 56c:	675f 7465 6164      	0x61647465675f
 572:	6574                	flw	fa3,76(a0)
        for (i = 0; i < size_N; ++i){
 574:	655f 7272 5f00      	0x5f007272655f
 57a:	626f6c67          	0x626f6c67
        for (i = 0; i < size_N; ++i){
 57e:	6c61                	lui	s8,0x18
 580:	695f 706d 7275      	0x7275706d695f
        for (i = 0; i < size_N; ++i){
 586:	5f65                	li	t5,-7
 588:	7470                	flw	fa2,108(s0)
 58a:	0072                	c.slli	zero,0x1c
    array_add(q,v,size_N);
 58c:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 590:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
        for(i = 0; i < size_N; ++i){
 594:	2e39                	jal	8b2 <ext_euclid+0x262>
 596:	2e32                	fld	ft8,264(sp)
 598:	2030                	fld	fa2,64(s0)
 59a:	6d2d                	lui	s10,0xb
        for (i = size_N-1; i >= 0; i = i-1){
 59c:	7261                	lui	tp,0xffff8
 59e:	723d6863          	bltu	s10,gp,cce <ntru_deceypt+0x1e>
 5a2:	3376                	fld	ft6,376(sp)
 5a4:	6932                	flw	fs2,12(sp)
 5a6:	636d                	lui	t1,0x1b
 5a8:	2d20                	fld	fs0,88(a0)
 5aa:	616d                	addi	sp,sp,240
 5ac:	6962                	flw	fs2,24(sp)
            v[i] = v[i] % mod;
 5ae:	693d                	lui	s2,0xf
        for (i = 0; i < size_N; ++i){
 5b0:	706c                	flw	fa1,100(s0)
 5b2:	2d203233          	0x2d203233
            v[i] = v[i] % mod;
 5b6:	636d                	lui	t1,0x1b
 5b8:	6f6d                	lui	t5,0x1b
 5ba:	6564                	flw	fs1,76(a0)
        for (i = 0; i < size_N; ++i){
 5bc:	3d6c                	fld	fa1,248(a0)
                product[i] = product[i] + mod;
 5be:	656d                	lui	a0,0x1b
 5c0:	6164                	flw	fs1,68(a0)
            while (product[i] < 0) {
 5c2:	796e                	flw	fs2,248(sp)
 5c4:	2d20                	fld	fs0,88(a0)
 5c6:	746d                	lui	s0,0xffffb
            product[i] = product[i] % mod;
 5c8:	6e75                	lui	t3,0x1d
 5ca:	3d65                	jal	482 <polydiv+0x82>
        for (i = 0; i < size_N; ++i){
 5cc:	6f72                	flw	ft10,28(sp)
 5ce:	74656b63          	bltu	a0,t1,d24 <ntru_deceypt+0x74>
            product[i] = product[i] % mod;
 5d2:	2d20                	fld	fs0,88(a0)
        for (i = 0; i < size_N; ++i){
 5d4:	4f2d2067          	0x4f2d2067
            num_temp[i] = num_temp[i] - product[i];
 5d8:	662d2073          	csrs	0x662,s10
 5dc:	6976                	flw	fs2,92(sp)
 5de:	69626973          	csrrsi	s2,0x696,4
        for (i = 0; i < size_N; ++i){
 5e2:	696c                	flw	fa1,84(a0)
            num_temp[i] = num_temp[i] - product[i];
 5e4:	7974                	flw	fa3,116(a0)
 5e6:	683d                	lui	a6,0xf
 5e8:	6469                	lui	s0,0x1a
        for (i = 0; i < size_N; ++i){
 5ea:	6564                	flw	fs1,76(a0)
                num_temp[i] = num_temp[i] + mod;
 5ec:	006e                	c.slli	zero,0x1b
 5ee:	755f 756e 6573      	0x6573756e755f
            while (num_temp[i] < 0){
 5f4:	5f64                	lw	s1,124(a4)
            num_temp[i] = num_temp[i] % mod;
 5f6:	6172                	flw	ft2,28(sp)
 5f8:	646e                	flw	fs0,216(sp)
        for (i = 0; i < size_N; ++i){
 5fa:	6c00                	flw	fs0,24(s0)
 5fc:	6e69                	lui	t3,0x1a
            num_temp[i] = num_temp[i] % mod;
 5fe:	0065                	c.nop	25
 600:	775f 7364 5f00      	0x5f007364775f
        for(i = 0; i < size_N; ++i){
 606:	745f 5f6d 6477      	0x64775f6d745f
            q[i] = q[i] % mod;
 60c:	7961                	lui	s2,0xffff8
 60e:	5f00                	lw	s0,56(a4)
 610:	65756c67          	0x65756c67
            if( num_temp[i] != 0 )
 614:	6e00                	flw	fs0,24(a2)
        for (i = size_N-1; i >= 0; i = i-1){
 616:	7274                	flw	fa3,100(a2)
 618:	5f75                	li	t5,-3
            v[i] = 0;
 61a:	6e65                	lui	t3,0x19
 61c:	70727963          	bgeu	tp,t2,d2e <ntru_deceypt+0x7e>
 620:	0074                	addi	a3,sp,12
 622:	735f 6973 657a      	0x657a6973735f
        for (i = 0; i < size_N; ++i){
 628:	745f 5f00 366c      	0x366c5f00745f
        result[i] = q[i];
 62e:	6134                	flw	fa3,64(a0)
 630:	625f 6675 6400      	0x64006675625f
 636:	6e65                	lui	t3,0x19
    for(i = 0; i < size_N; ++i){
 638:	6d75                	lui	s10,0x1d
        result[i] = q[i];
 63a:	5f00                	lw	s0,56(a4)
    for(i = 0; i < size_N; ++i){
 63c:	5f676973          	csrrsi	s2,0x5f6,14
        result[i] = num_temp[i-size_N];
 640:	7566                	flw	fa0,120(sp)
 642:	636e                	flw	ft6,216(sp)
 644:	2f00                	fld	fs0,24(a4)
 646:	6f68                	flw	fa0,92(a4)
 648:	656d                	lui	a0,0x1b
    for(i = size_N; i < (2*size_N); ++i){
 64a:	706f742f          	0x706f742f
 64e:	6c61                	lui	s8,0x18
    int ri_2[size]; // MX-ring poly, a
 650:	65442f63          	0x65442f63
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 654:	6f746b73          	csrrsi	s6,0x6f7,8
    int ri_2[size]; // MX-ring poly, a
 658:	2f70                	fld	fa2,216(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 65a:	7270                	flw	fa2,100(a2)
 65c:	6c656a6f          	jal	s4,56d22 <_stack_start+0x46d22>
 660:	7265                	lui	tp,0xffff9
 662:	636c6f2f          	0x636c6f2f
 666:	6d75                	lui	s10,0x1d
 668:	612e322f          	0x612e322f
 66c:	6464                	flw	fs1,76(s0)
 66e:	5f00                	lw	s0,56(a4)
 670:	626e                	flw	ft4,216(sp)
 672:	6675                	lui	a2,0x1d
 674:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 676:	6e75                	lui	t3,0x1d
 678:	7375                	lui	t1,0xffffd
 67a:	6465                	lui	s0,0x19
    int ri_1[size]; // f-random poly, f[N] = 0, b
 67c:	7000                	flw	fs0,32(s0)
 67e:	52796c6f          	jal	s8,973a4 <_stack_start+0x873a4>
    int ri[size];
 682:	7300                	flw	fs0,32(a4)
 684:	7a69                	lui	s4,0xffffa
 686:	5f65                	li	t5,-7
    int ti_1[size]; // ti_1[0] = 1
 688:	0044                	addi	s1,sp,4
 68a:	5f5f 6d74 695f      	0x695f6d745f5f
    int ti[size];
 690:	74736473          	csrrsi	s0,0x747,6
    int qi_1[size];
 694:	5f00                	lw	s0,56(a4)
 696:	6f6c                	flw	fa1,92(a4)
 698:	746c6163          	bltu	s8,t1,dda <zero_loop+0x2>
    int temp[size];
 69c:	6d69                	lui	s10,0x1a
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 69e:	5f65                	li	t5,-7
 6a0:	7562                	flw	fa0,56(sp)
    int ri_2[size]; // MX-ring poly, a
 6a2:	0066                	c.slli	zero,0x19
 6a4:	635f 6f6c 6573      	0x65736f6c635f
    for (i = 0; i < size; ++i) {
 6aa:	5f00                	lw	s0,56(a4)
        ti_2[i] = 0;
 6ac:	3472                	fld	fs0,312(sp)
 6ae:	0038                	addi	a4,sp,8
 6b0:	6d5f 7462 776f      	0x776f74626d5f
    for (i = 0; i < size; ++i) {
 6b6:	74735f63          	bge	t1,t2,e14 <memcpy+0x26>
    ti_1[0] = 1;
 6ba:	7461                	lui	s0,0xffff8
 6bc:	0065                	c.nop	25
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6be:	705f 7335 6d00      	0x6d007335705f
 6c4:	6961                	lui	s2,0x18
        for (i = 0; i < N + 1; ++i) {
 6c6:	006e                	c.slli	zero,0x1b
 6c8:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        ri_2[i] = polyR[i];
 6ce:	6164                	flw	fs1,68(a0)
 6d0:	0079                	c.nop	30
 6d2:	657a6973          	csrrsi	s2,0x657,20
    for (i = 0; i < size; ++i) {
 6d6:	615f 7300 7a69      	0x7a697300615f
        ri_1[i] = polyf[i];
 6dc:	5f65                	li	t5,-7
 6de:	0062                	c.slli	zero,0x18
 6e0:	30747263          	bgeu	s0,t2,9e4 <generate_keys+0xb0>
 6e4:	532e                	lw	t1,232(sp)
 6e6:	4700                	lw	s0,8(a4)
 6e8:	554e                	lw	a0,240(sp)
 6ea:	4120                	lw	s0,64(a0)
        ti_2[i] = 0;
 6ec:	2e322053          	0x2e322053
 6f0:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x30>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	0040                	addi	s0,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	01e6                	slli	gp,gp,0x19
  3e:	0000                	unimp
  40:	0e56                	slli	t3,t3,0x15
  42:	4220                	lw	s0,64(a2)
  44:	0289                	addi	t0,t0,2
  46:	8856                	mv	a6,s5
  48:	9201                	srli	a2,a2,0x20
  4a:	94049303          	lh	t1,-1728(s1)
  4e:	9705                	srai	a4,a4,0x21
  50:	9508                	0x9508
  52:	9606                	add	a2,a2,ra
  54:	080c4207          	flq	ft4,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  58:	0200                	addi	s0,sp,256
  5a:	0af8                	addi	a4,sp,348
  5c:	020c                	addi	a1,sp,256
  5e:	4220                	lw	s0,64(a2)
  60:	42c8                	lw	a0,4(a3)
  62:	42c9                	li	t0,18
  64:	42d2                	lw	t0,20(sp)
  66:	42d442d3          	0x42d442d3
  6a:	42d5                	li	t0,21
  6c:	42d6                	lw	t0,84(sp)
  6e:	000e4ad7          	0xe4ad7
  72:	0b42                	slli	s6,s6,0x10
  74:	0044                	addi	s1,sp,4
  76:	0000                	unimp
  78:	0000                	unimp
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	029a                	slli	t0,t0,0x6
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0166                	slli	sp,sp,0x19
  82:	0000                	unimp
  jal x0, default_exc_handler
  84:	0e42                	slli	t3,t3,0x10
  86:	4220                	lw	s0,64(a2)
  jal x0, default_exc_handler
  88:	0389                	addi	t2,t2,2
  8a:	924e                	add	tp,tp,s3
    asm volatile(
  8c:	9304                	0x9304
  8e:	5605                	li	a2,-31
}
  90:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
  92:	0694                	addi	a3,sp,832
  94:	0795                	addi	a5,a5,5
  96:	0181                	addi	gp,gp,0
  98:	0896                	slli	a7,a7,0x5
  9a:	0c42                	slli	s8,s8,0x10
  9c:	0008                	0x8
  9e:	e802                	fsw	ft0,16(sp)
}
  a0:	0c0a                	slli	s8,s8,0x2
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	2002                	fld	ft0,0(sp)
  a4:	c142                	sw	a6,128(sp)
    asm volatile(
  a6:	c842                	sw	a6,16(sp)
  a8:	c942                	sw	a6,144(sp)
  aa:	d242                	sw	a6,36(sp)
  ac:	d342                	sw	a6,164(sp)
  ae:	d442                	sw	a6,40(sp)
    for(i=0;i<(length/3);i++) {
  b0:	d542                	sw	a6,168(sp)
  b2:	d642                	sw	a6,44(sp)
    int line[size_b][size_a + size_b];
  b4:	0e4a                	slli	t3,t3,0x12
  b6:	4200                	lw	s0,0(a2)
  b8:	0000000b          	0xb
  bc:	0054                	addi	a3,sp,4
  be:	0000                	unimp
  c0:	0000                	unimp
  c2:	0000                	unimp
  c4:	0400                	addi	s0,sp,512
  c6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c8:	0250                	addi	a2,sp,260
  ca:	0000                	unimp
  cc:	0e46                	slli	t3,t3,0x11
    int pola[size_a];
  ce:	5e40                	lw	s0,60(a2)
  d0:	0288                	addi	a0,sp,320
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d2:	0389                	addi	t2,t2,2
  d4:	0492                	slli	s1,s1,0x4
  d6:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
  da:	0795                	addi	a5,a5,5
    int line[size_b][size_a + size_b];
  dc:	0896                	slli	a7,a7,0x5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  de:	0b990997          	auipc	s3,0xb990
  e2:	0c9a                	slli	s9,s9,0x6
    int line[size_b][size_a + size_b];
  e4:	01810d9b          	0x1810d9b
    int pola[size_a];
  e8:	0a98                	addi	a4,sp,336
  ea:	0c42                	slli	s8,s8,0x10
    int line[size_b][size_a + size_b];
  ec:	0008                	0x8
  ee:	0a010403          	lb	s0,160(sp)
    int pola[size_a];
  f2:	020c                	addi	a1,sp,256
  f4:	4240                	lw	s0,4(a2)
    int polb[size_b];
  f6:	42c1                	li	t0,16
  f8:	42c8                	lw	a0,4(a3)
  fa:	42c9                	li	t0,18
    int pola[size_a];
  fc:	42d2                	lw	t0,20(sp)
    int polb[size_b];
  fe:	42d442d3          	0x42d442d3
    int line[size_b][size_a + size_b];
 102:	42d5                	li	t0,21
 104:	42d6                	lw	t0,84(sp)
    int pola[size_a];
 106:	42d842d7          	0x42d842d7
    int polb[size_b];
 10a:	42d9                	li	t0,22
            line[i][j] = 0;
 10c:	42da                	lw	t0,148(sp)
 10e:	000e4adb          	0xe4adb
    for (i = 0; i < size_b; ++i){
 112:	0b42                	slli	s6,s6,0x10
 114:	0054                	addi	a3,sp,4
            product[j] = 0;
 116:	0000                	unimp
 118:	0000                	unimp
 11a:	0000                	unimp
 11c:	0650                	addi	a2,sp,772
    for (i = 0; i < size_b; ++i){
 11e:	0000                	unimp
 120:	02e4                	addi	s1,sp,332
 122:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 124:	0e46                	slli	t3,t3,0x11
 126:	5e50                	lw	a2,60(a2)
 128:	0288                	addi	a0,sp,320
 12a:	0389                	addi	t2,t2,2
    for (i = 0; i < size_b; ++i){
 12c:	0492                	slli	s1,s1,0x4
 12e:	06940593          	addi	a1,s0,105
    if(star_mult == 1){
 132:	0795                	addi	a5,a5,5
 134:	0896                	slli	a7,a7,0x5
 136:	0b990997          	auipc	s3,0xb990
 13a:	0c9a                	slli	s9,s9,0x6
 13c:	01810d9b          	0x1810d9b
 140:	0a98                	addi	a4,sp,336
        for (j = size_b -1; j >= 0; j = j-1){
 142:	0c42                	slli	s8,s8,0x10
 144:	0008                	0x8
            for (k = size_a-1; k >= 0; k = k-1 ){
 146:	0a014203          	lbu	tp,160(sp)
            product[j] = 0;
 14a:	020c                	addi	a1,sp,256
 14c:	4250                	lw	a2,4(a2)
 14e:	42c1                	li	t0,16
            line[i][j] = 0;
 150:	42c8                	lw	a0,4(a3)
 152:	42c9                	li	t0,18
            product[j] = 0;
 154:	42d2                	lw	t0,20(sp)
 156:	42d442d3          	0x42d442d3
        for(j = 0; j < size_a + size_b -1; ++j){
 15a:	42d5                	li	t0,21
 15c:	42d6                	lw	t0,84(sp)
 15e:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 162:	42d9                	li	t0,22
 164:	42da                	lw	t0,148(sp)
 166:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 16a:	0b42                	slli	s6,s6,0x10
        pola[i] = a[i];
 16c:	0054                	addi	a3,sp,4
 16e:	0000                	unimp
 170:	0000                	unimp
 172:	0000                	unimp
 174:	0934                	addi	a3,sp,152
            pola[i] = pola[i] + mod;
 176:	0000                	unimp
 178:	02f4                	addi	a3,sp,332
        while (pola[i] < 0){
 17a:	0000                	unimp
 17c:	0e42                	slli	t3,t3,0x10
 17e:	03f0                	addi	a2,sp,460
 180:	814c                	0x814c
        pola[i] = pola[i] % mod;
 182:	8801                	andi	s0,s0,0
 184:	8902                	jr	s2
    for (i = 0; i < size_a; ++i){
 186:	080c4203          	lbu	tp,128(s8)
        pola[i] = pola[i] % mod;
 18a:	6400                	flw	fs0,8(s0)
 18c:	0492                	slli	s1,s1,0x4
    for (i = 0; i < size_a; ++i){
 18e:	06940593          	addi	a1,s0,105
            pola[i] = pola[i] + mod;
 192:	0795                	addi	a5,a5,5
        polb[i] = b[i];
 194:	0896                	slli	a7,a7,0x5
 196:	0c9a0997          	auipc	s3,0xc9a0
 19a:	0a98                	addi	a4,sp,336
            polb[i] = polb[i] + mod;
 19c:	0b99                	addi	s7,s7,6
        while (polb[i] < 0){
 19e:	0a01dc03          	lhu	s8,160(gp)
 1a2:	020c                	addi	a1,sp,256
        polb[i] = polb[i] % mod;
 1a4:	03f0                	addi	a2,sp,460
 1a6:	c144                	sw	s1,4(a0)
    for (i = 0; i < size_b; ++i){
 1a8:	c844                	sw	s1,20(s0)
 1aa:	c944                	sw	s1,20(a0)
        polb[i] = polb[i] % mod;
 1ac:	d244                	sw	s1,36(a2)
 1ae:	d344                	sw	s1,36(a4)
    for (i = 0; i < size_b; ++i){
 1b0:	d444                	sw	s1,44(s0)
            polb[i] = polb[i] + mod;
 1b2:	d544                	sw	s1,44(a0)
 1b4:	d644                	sw	s1,44(a2)
    if(star_mult == 1){
 1b6:	d744                	sw	s1,44(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 1b8:	d844                	sw	s1,52(s0)
 1ba:	d944                	sw	s1,52(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	da44                	sw	s1,52(a2)
    for (i = 0; i < size_b; ++i){
 1be:	0e4a                	slli	t3,t3,0x12
 1c0:	4200                	lw	s0,0(a2)
 1c2:	0034000b          	0x34000b
 1c6:	0000                	unimp
 1c8:	0000                	unimp
 1ca:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 1cc:	0c28                	addi	a0,sp,536
 1ce:	0000                	unimp
 1d0:	0088                	addi	a0,sp,64
    for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	0000                	unimp
 1d4:	0e42                	slli	t3,t3,0x10
 1d6:	01e0                	addi	s0,sp,204
}
 1d8:	8844                	0x8844
 1da:	8902                	jr	s2
 1dc:	04924a03          	lbu	s4,73(tp) # fffe1049 <_stack_start+0xfffd1049>
 1e0:	8152                	mv	sp,s4
 1e2:	9301                	srli	a4,a4,0x20
 1e4:	9405                	srai	s0,s0,0x21
 1e6:	0206                	slli	tp,tp,0x1
 1e8:	0a46                	slli	s4,s4,0x11
 1ea:	42c1                	li	t0,16
 1ec:	42c8                	lw	a0,4(a3)
 1ee:	42c9                	li	t0,18
 1f0:	42d2                	lw	t0,20(sp)
 1f2:	42d442d3          	0x42d442d3
 1f6:	000e                	c.slli	zero,0x3
                line[size_b-1-j][k] = pola[k]*polb[j];
 1f8:	0b42                	slli	s6,s6,0x10
 1fa:	0000                	unimp
 1fc:	0040                	addi	s0,sp,4
 1fe:	0000                	unimp
 200:	0000                	unimp
 202:	0000                	unimp
 204:	0cb0                	addi	a2,sp,600
 206:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 208:	00c8                	addi	a0,sp,68
                line[size_b-1-j][k] = pola[k]*polb[j];
 20a:	0000                	unimp
 20c:	0e42                	slli	t3,t3,0x10
 20e:	4430                	lw	a2,72(s0)
 210:	0288                	addi	a0,sp,320
            for (k = size_a-1; k >= 0; k = k-1 ){
 212:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
        for (j = size_b -1; j >= 0; j = j-1){
 216:	9504                	0x9504
 218:	58099707          	0x58099707
 21c:	0181                	addi	gp,gp,0
            for (k = size_a-1; k >= 0; k = k-1 ){
 21e:	0389                	addi	t2,t2,2
 220:	0694                	addi	a3,sp,832
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 222:	0896                	slli	a7,a7,0x5
 224:	5202                	lw	tp,32(sp)
 226:	c10a                	sw	sp,128(sp)
 228:	c842                	sw	a6,16(sp)
 22a:	c942                	sw	a6,144(sp)
 22c:	d242                	sw	a6,36(sp)
 22e:	d342                	sw	a6,164(sp)
 230:	d442                	sw	a6,40(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 232:	d542                	sw	a6,168(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 234:	d642                	sw	a6,44(sp)
 236:	d742                	sw	a6,172(sp)
 238:	0e42                	slli	t3,t3,0x10
 23a:	4200                	lw	s0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 23c:	0000000b          	0xb
        for (j = size_b -1; j >= 0; j = j-1){
 240:	002c                	addi	a1,sp,8
 242:	0000                	unimp
 244:	0000                	unimp
 246:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 248:	0f74                	addi	a3,sp,924
        for(j = 0; j < size_a + size_b -1; ++j){
 24a:	0000                	unimp
 24c:	0138                	addi	a4,sp,136
            line[i][j] = line[i][j] % mod;
 24e:	0000                	unimp
 250:	0e44                	addi	s1,sp,788
 252:	08b0                	addi	a2,sp,88
 254:	815e                	mv	sp,s7
        for(j = 0; j < size_a + size_b -1; ++j){
 256:	8801                	andi	s0,s0,0
 258:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 25a:	03049203          	lh	tp,48(s1)
 25e:	00f8                	addi	a4,sp,76
 260:	c10a                	sw	sp,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 262:	c844                	sw	s1,20(s0)
 264:	c944                	sw	s1,20(a0)
            product[j] += line[i][j];
 266:	d244                	sw	s1,36(a2)
 268:	0e46                	slli	t3,t3,0x11
 26a:	4200                	lw	s0,0(a2)
 26c:	0000000b          	0xb

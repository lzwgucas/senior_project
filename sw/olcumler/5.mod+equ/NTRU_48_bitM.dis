
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	3cd0006f          	j	c48 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	3cd0006f          	j	c4c <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	3c50006f          	j	c48 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	3c10006f          	j	c48 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  8c:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
  90:	8082                	ret

00000092 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
  92:	478d                	li	a5,3
  94:	02f64633          	div	a2,a2,a5
  98:	4831                	li	a6,12
  9a:	4781                	li	a5,0
  9c:	00c7c363          	blt	a5,a2,a2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
  a0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	03078733          	mul	a4,a5,a6
    asm volatile(
  a6:	00e506b3          	add	a3,a0,a4
  aa:	972e                	add	a4,a4,a1
  ac:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
  b0:	0785                	addi	a5,a5,1
  b2:	b7ed                	j	9c <array_equ+0xa>

000000b4 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
  b4:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  b8:	8082                	ret

000000ba <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
  ba:	478d                	li	a5,3
  bc:	02f64633          	div	a2,a2,a5
    asm volatile(
  c0:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
  c2:	4781                	li	a5,0
  c4:	00c7c363          	blt	a5,a2,ca <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
  c8:	8082                	ret
    asm volatile(
  ca:	02d78733          	mul	a4,a5,a3
  ce:	972a                	add	a4,a4,a0
  d0:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
  d4:	0785                	addi	a5,a5,1
  d6:	b7fd                	j	c4 <array_mod+0xa>

000000d8 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	715d                	addi	sp,sp,-80
  da:	c0ca                	sw	s2,64(sp)
  dc:	8936                	mv	s2,a3
  de:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
  e0:	96ae                	add	a3,a3,a1
  e2:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e6:	d462                	sw	s8,40(sp)
  e8:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
  ea:	00269c13          	slli	s8,a3,0x2
  ee:	fff68c93          	addi	s9,a3,-1
  f2:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f6:	dc52                	sw	s4,56(sp)
  f8:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
  fa:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fe:	c4a2                	sw	s0,72(sp)
 100:	c2a6                	sw	s1,68(sp)
 102:	da56                	sw	s5,52(sp)
 104:	d85a                	sw	s6,48(sp)
 106:	d65e                	sw	s7,44(sp)
 108:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
 10a:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10c:	ce6e                	sw	s11,28(sp)
 10e:	c686                	sw	ra,76(sp)
 110:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 112:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
 114:	073d                	addi	a4,a4,15
 116:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
 118:	40d10133          	sub	sp,sp,a3
 11c:	8b8a                	mv	s7,sp
    int pola[size_a];
 11e:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
 122:	00f98713          	addi	a4,s3,15
 126:	9b41                	andi	a4,a4,-16
    int pola[size_a];
 128:	8d8a                	mv	s11,sp
    int polb[size_b];
 12a:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	8aae                	mv	s5,a1
    int pola[size_a];
 130:	fff58693          	addi	a3,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	8832                	mv	a6,a2
    int line[size_b][size_a + size_b];
 136:	fff90b13          	addi	s6,s2,-1
    int polb[size_b];
 13a:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
 13c:	002c5d13          	srli	s10,s8,0x2
 140:	875e                	mv	a4,s7
    for (i = 0; i < size_b; ++i){
 142:	88de                	mv	a7,s7
 144:	4581                	li	a1,0
            product[j] = 0;
 146:	00001e97          	auipc	t4,0x1
 14a:	fcae8e93          	addi	t4,t4,-54 # 1110 <_bss_start>
    for (i = 0; i < size_b; ++i){
 14e:	0725cc63          	blt	a1,s2,1c6 <polymult+0xee>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
 152:	85aa                	mv	a1,a0
 154:	8656                	mv	a2,s5
 156:	856e                	mv	a0,s11
 158:	faf42823          	sw	a5,-80(s0)
 15c:	fae42c23          	sw	a4,-72(s0)
 160:	fad42e23          	sw	a3,-68(s0)
 164:	fb042a23          	sw	a6,-76(s0)
 168:	372d                	jal	92 <array_equ>
    array_mod(pola,mod,size_a);
 16a:	8656                	mv	a2,s5
 16c:	85d2                	mv	a1,s4
 16e:	856e                	mv	a0,s11
 170:	37a9                	jal	ba <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
 172:	fb442803          	lw	a6,-76(s0)
 176:	8526                	mv	a0,s1
 178:	864a                	mv	a2,s2
 17a:	85c2                	mv	a1,a6
 17c:	3f19                	jal	92 <array_equ>
    array_mod(polb,mod,size_b);
 17e:	864a                	mv	a2,s2
 180:	8526                	mv	a0,s1
 182:	85d2                	mv	a1,s4
 184:	3f1d                	jal	ba <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 186:	fb042783          	lw	a5,-80(s0)
 18a:	4605                	li	a2,1
 18c:	fbc42683          	lw	a3,-68(s0)
 190:	fb842703          	lw	a4,-72(s0)
 194:	94ce                	add	s1,s1,s3
 196:	02c78b63          	beq	a5,a2,1cc <polymult+0xf4>
 19a:	19f1                	addi	s3,s3,-4
 19c:	ffcc0593          	addi	a1,s8,-4
 1a0:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 1a2:	020b4863          	bltz	s6,1d2 <polymult+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
 1a6:	87b6                	mv	a5,a3
 1a8:	a85d                	j	25e <polymult+0x186>
            product[j] = 0;
 1aa:	00261e13          	slli	t3,a2,0x2
 1ae:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
 1b0:	00032023          	sw	zero,0(t1)
            product[j] = 0;
 1b4:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	0605                	addi	a2,a2,1
 1ba:	0311                	addi	t1,t1,4
 1bc:	ff9647e3          	blt	a2,s9,1aa <polymult+0xd2>
    for (i = 0; i < size_b; ++i){
 1c0:	0585                	addi	a1,a1,1
 1c2:	98e2                	add	a7,a7,s8
 1c4:	b769                	j	14e <polymult+0x76>
 1c6:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
 1c8:	4601                	li	a2,0
 1ca:	bfcd                	j	1bc <polymult+0xe4>
    if(star_mult == 1){
 1cc:	85de                	mv	a1,s7
        for (j = size_b -1; j >= 0; j = j-1){
 1ce:	060b5a63          	bgez	s6,242 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	4681                	li	a3,0
    for (i = 0; i < size_b; ++i){
 1d4:	0b26c763          	blt	a3,s2,282 <polymult+0x1aa>
 1d8:	00001697          	auipc	a3,0x1
 1dc:	f3868693          	addi	a3,a3,-200 # 1110 <_bss_start>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
 1e0:	4701                	li	a4,0
 1e2:	0d974263          	blt	a4,s9,2a6 <polymult+0x1ce>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
 1e6:	8666                	mv	a2,s9
 1e8:	85d2                	mv	a1,s4
 1ea:	00001517          	auipc	a0,0x1
 1ee:	f2650513          	addi	a0,a0,-218 # 1110 <_bss_start>
 1f2:	35e1                	jal	ba <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
 1f4:	fb040113          	addi	sp,s0,-80
 1f8:	40b6                	lw	ra,76(sp)
 1fa:	4426                	lw	s0,72(sp)
 1fc:	4496                	lw	s1,68(sp)
 1fe:	4906                	lw	s2,64(sp)
 200:	59f2                	lw	s3,60(sp)
 202:	5a62                	lw	s4,56(sp)
 204:	5ad2                	lw	s5,52(sp)
 206:	5b42                	lw	s6,48(sp)
 208:	5bb2                	lw	s7,44(sp)
 20a:	5c22                	lw	s8,40(sp)
 20c:	5c92                	lw	s9,36(sp)
 20e:	5d02                	lw	s10,32(sp)
 210:	4df2                	lw	s11,28(sp)
 212:	00001517          	auipc	a0,0x1
 216:	efe50513          	addi	a0,a0,-258 # 1110 <_bss_start>
 21a:	6161                	addi	sp,sp,80
 21c:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
 21e:	00279613          	slli	a2,a5,0x2
 222:	00c58533          	add	a0,a1,a2
 226:	966e                	add	a2,a2,s11
 228:	4210                	lw	a2,0(a2)
 22a:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 230:	03060633          	mul	a2,a2,a6
 234:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 236:	fe07d4e3          	bgez	a5,21e <polymult+0x146>
        for (j = size_b -1; j >= 0; j = j-1){
 23a:	1b7d                	addi	s6,s6,-1
 23c:	14f1                	addi	s1,s1,-4
 23e:	95e2                	add	a1,a1,s8
 240:	b779                	j	1ce <polymult+0xf6>
            for (k = size_a-1; k >= 0; k = k-1 ){
 242:	87b6                	mv	a5,a3
 244:	bfcd                	j	236 <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	00279613          	slli	a2,a5,0x2
 24a:	00c98533          	add	a0,s3,a2
 24e:	966e                	add	a2,a2,s11
 250:	4210                	lw	a2,0(a2)
 252:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 258:	03060633          	mul	a2,a2,a6
 25c:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	fe07d4e3          	bgez	a5,246 <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
 262:	1b7d                	addi	s6,s6,-1
 264:	14f1                	addi	s1,s1,-4
 266:	99ae                	add	s3,s3,a1
 268:	bf2d                	j	1a2 <polymult+0xca>
            line[i][j] = line[i][j] % mod;
 26a:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 26c:	0605                	addi	a2,a2,1
 26e:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
 270:	0345e5b3          	rem	a1,a1,s4
 274:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 278:	ff9649e3          	blt	a2,s9,26a <polymult+0x192>
    for (i = 0; i < size_b; ++i){
 27c:	0685                	addi	a3,a3,1
 27e:	9762                	add	a4,a4,s8
 280:	bf91                	j	1d4 <polymult+0xfc>
 282:	87ba                	mv	a5,a4
        for(j = 0; j < size_a + size_b -1; ++j){
 284:	4601                	li	a2,0
 286:	bfcd                	j	278 <polymult+0x1a0>
            product[j] += line[i][j];
 288:	03a607b3          	mul	a5,a2,s10
 28c:	428c                	lw	a1,0(a3)
        for(i = 0; i < size_b; ++i){
 28e:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
 290:	97ba                	add	a5,a5,a4
 292:	078a                	slli	a5,a5,0x2
 294:	97de                	add	a5,a5,s7
 296:	439c                	lw	a5,0(a5)
 298:	97ae                	add	a5,a5,a1
 29a:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
 29c:	ff2646e3          	blt	a2,s2,288 <polymult+0x1b0>
    for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0705                	addi	a4,a4,1
 2a2:	0691                	addi	a3,a3,4
 2a4:	bf3d                	j	1e2 <polymult+0x10a>
        for(i = 0; i < size_b; ++i){
 2a6:	4601                	li	a2,0
 2a8:	bfd5                	j	29c <polymult+0x1c4>

000002aa <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2aa:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
 2ac:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2b0:	da56                	sw	s5,52(sp)
 2b2:	00269a93          	slli	s5,a3,0x2
 2b6:	d85a                	sw	s6,48(sp)
 2b8:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
 2ba:	00279b13          	slli	s6,a5,0x2
 2be:	fff78b93          	addi	s7,a5,-1
 2c2:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c6:	c4a2                	sw	s0,72(sp)
 2c8:	c2a6                	sw	s1,68(sp)
 2ca:	c0ca                	sw	s2,64(sp)
 2cc:	de4e                	sw	s3,60(sp)
 2ce:	dc52                	sw	s4,56(sp)
 2d0:	d462                	sw	s8,40(sp)
 2d2:	d266                	sw	s9,36(sp)
 2d4:	d06a                	sw	s10,32(sp)
 2d6:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
 2d8:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2da:	c686                	sw	ra,76(sp)
 2dc:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 2de:	9bc1                	andi	a5,a5,-16
 2e0:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
 2e4:	00259793          	slli	a5,a1,0x2
 2e8:	07bd                	addi	a5,a5,15
 2ea:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
 2ec:	890a                	mv	s2,sp
    int pola[size_a];
 2ee:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
 2f2:	00fa8793          	addi	a5,s5,15
 2f6:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
 2f8:	8d0a                	mv	s10,sp
    int polb[size_b];
 2fa:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2fe:	89b6                	mv	s3,a3
 300:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
 302:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 306:	8832                	mv	a6,a2
    int pola[size_a];
 308:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
 30c:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
 30e:	8cca                	mv	s9,s2
 310:	86ca                	mv	a3,s2
 312:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
 314:	00001317          	auipc	t1,0x1
 318:	05430313          	addi	t1,t1,84 # 1368 <product2>
    for (i = 0; i < size_b; ++i){
 31c:	05374963          	blt	a4,s3,36e <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
 320:	862e                	mv	a2,a1
 322:	85aa                	mv	a1,a0
 324:	856a                	mv	a0,s10
 326:	fb042e23          	sw	a6,-68(s0)
 32a:	33a5                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
 32c:	fbc42803          	lw	a6,-68(s0)
 330:	8526                	mv	a0,s1
 332:	864e                	mv	a2,s3
 334:	85c2                	mv	a1,a6
 336:	3bb1                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 338:	4785                	li	a5,1
 33a:	01548533          	add	a0,s1,s5
 33e:	04fd8c63          	beq	s11,a5,396 <polymult2+0xec>
 342:	1af1                	addi	s5,s5,-4
 344:	ffcb0693          	addi	a3,s6,-4
 348:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 34a:	040a4863          	bltz	s4,39a <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
 34e:	87e2                	mv	a5,s8
 350:	a8ad                	j	3ca <polymult2+0x120>
            product2[j] = 0;
 352:	00279893          	slli	a7,a5,0x2
 356:	989a                	add	a7,a7,t1
            line[i][j] = 0;
 358:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
 35c:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
 360:	0785                	addi	a5,a5,1
 362:	0611                	addi	a2,a2,4
 364:	ff77c7e3          	blt	a5,s7,352 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
 368:	0705                	addi	a4,a4,1
 36a:	96da                	add	a3,a3,s6
 36c:	bf45                	j	31c <polymult2+0x72>
 36e:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
 370:	4781                	li	a5,0
 372:	bfcd                	j	364 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
 374:	00279713          	slli	a4,a5,0x2
 378:	00e906b3          	add	a3,s2,a4
 37c:	976a                	add	a4,a4,s10
 37e:	4318                	lw	a4,0(a4)
 380:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 384:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 386:	02c70733          	mul	a4,a4,a2
 38a:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	fe07d4e3          	bgez	a5,374 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
 390:	1a7d                	addi	s4,s4,-1
 392:	1571                	addi	a0,a0,-4
 394:	995a                	add	s2,s2,s6
 396:	000a5c63          	bgez	s4,3ae <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
 39a:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
 39c:	05365a63          	bge	a2,s3,3f0 <polymult2+0x146>
 3a0:	00001797          	auipc	a5,0x1
 3a4:	fc878793          	addi	a5,a5,-56 # 1368 <product2>
 3a8:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
 3aa:	4701                	li	a4,0
 3ac:	a82d                	j	3e6 <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ae:	87e2                	mv	a5,s8
 3b0:	bff1                	j	38c <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b2:	00279713          	slli	a4,a5,0x2
 3b6:	00e90633          	add	a2,s2,a4
 3ba:	976a                	add	a4,a4,s10
 3bc:	4318                	lw	a4,0(a4)
 3be:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c2:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c4:	02b70733          	mul	a4,a4,a1
 3c8:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	fe07d4e3          	bgez	a5,3b2 <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	1a7d                	addi	s4,s4,-1
 3d0:	1571                	addi	a0,a0,-4
 3d2:	9936                	add	s2,s2,a3
 3d4:	bf9d                	j	34a <polymult2+0xa0>
            product2[j] += line[i][j];
 3d6:	438c                	lw	a1,0(a5)
 3d8:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
 3da:	0705                	addi	a4,a4,1
 3dc:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
 3de:	95aa                	add	a1,a1,a0
 3e0:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
 3e4:	0691                	addi	a3,a3,4
 3e6:	ff7748e3          	blt	a4,s7,3d6 <polymult2+0x12c>
    for(i=0;i<size_b;++i){
 3ea:	0605                	addi	a2,a2,1
 3ec:	9cda                	add	s9,s9,s6
 3ee:	b77d                	j	39c <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
 3f0:	fb040113          	addi	sp,s0,-80
 3f4:	40b6                	lw	ra,76(sp)
 3f6:	4426                	lw	s0,72(sp)
 3f8:	4496                	lw	s1,68(sp)
 3fa:	4906                	lw	s2,64(sp)
 3fc:	59f2                	lw	s3,60(sp)
 3fe:	5a62                	lw	s4,56(sp)
 400:	5ad2                	lw	s5,52(sp)
 402:	5b42                	lw	s6,48(sp)
 404:	5bb2                	lw	s7,44(sp)
 406:	5c22                	lw	s8,40(sp)
 408:	5c92                	lw	s9,36(sp)
 40a:	5d02                	lw	s10,32(sp)
 40c:	4df2                	lw	s11,28(sp)
 40e:	00001517          	auipc	a0,0x1
 412:	f5a50513          	addi	a0,a0,-166 # 1368 <product2>
 416:	6161                	addi	sp,sp,80
 418:	8082                	ret

0000041a <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
 41a:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 41e:	7139                	addi	sp,sp,-64
    int v[size_N];
 420:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 422:	de06                	sw	ra,60(sp)
 424:	dc22                	sw	s0,56(sp)
 426:	da26                	sw	s1,52(sp)
 428:	0080                	addi	s0,sp,64
 42a:	d84a                	sw	s2,48(sp)
 42c:	d64e                	sw	s3,44(sp)
 42e:	d452                	sw	s4,40(sp)
 430:	d256                	sw	s5,36(sp)
 432:	d05a                	sw	s6,32(sp)
 434:	ce5e                	sw	s7,28(sp)
 436:	cc62                	sw	s8,24(sp)
 438:	ca66                	sw	s9,20(sp)
 43a:	c86a                	sw	s10,16(sp)
    int v[size_N];
 43c:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 43e:	c66e                	sw	s11,12(sp)
    int v[size_N];
 440:	40f10133          	sub	sp,sp,a5
 444:	8b0a                	mv	s6,sp
    int q[size_N];
 446:	40f10133          	sub	sp,sp,a5
 44a:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
 44c:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
 450:	00269793          	slli	a5,a3,0x2
 454:	07bd                	addi	a5,a5,15
 456:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
 458:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 45a:	84ae                	mv	s1,a1
    int denum_temp[size_D];
 45c:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 460:	8c32                	mv	s8,a2
    int v[size_N];
 462:	fff58d13          	addi	s10,a1,-1
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }

    array_equ(num_temp,num,size_N);
 466:	862e                	mv	a2,a1
 468:	85aa                	mv	a1,a0
 46a:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 46c:	8a36                	mv	s4,a3
 46e:	89ba                	mv	s3,a4
    int denum_temp[size_D];
 470:	fff68a93          	addi	s5,a3,-1
    array_equ(num_temp,num,size_N);
 474:	3939                	jal	92 <array_equ>
    array_mod(num_temp,mod,size_N);
 476:	8626                	mv	a2,s1
 478:	85ce                	mv	a1,s3
 47a:	854a                	mv	a0,s2
 47c:	393d                	jal	ba <array_mod>
    int denum_temp[size_D];
 47e:	8c8a                	mv	s9,sp
//            denum_temp[i] = denum_temp[i] + mod;
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    array_equ(denum_temp,denum,size_D);
 480:	8652                	mv	a2,s4
 482:	85e2                	mv	a1,s8
 484:	8566                	mv	a0,s9
 486:	3131                	jal	92 <array_equ>
    array_mod(denum_temp,mod,size_D);
 488:	8652                	mv	a2,s4
 48a:	85ce                	mv	a1,s3
 48c:	8566                	mv	a0,s9
 48e:	3135                	jal	ba <array_mod>

    for (i = 0; i < size_N; ++i){
 490:	4781                	li	a5,0
 492:	0097cf63          	blt	a5,s1,4b0 <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
 496:	002a9793          	slli	a5,s5,0x2
 49a:	97e6                	add	a5,a5,s9
 49c:	4398                	lw	a4,0(a5)
 49e:	020ad463          	bgez	s5,4c6 <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
 4a2:	4781                	li	a5,0
 4a4:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
 4a6:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
 4a8:	033c4263          	blt	s8,s3,4cc <polydiv+0xb2>
 4ac:	87ea                	mv	a5,s10
 4ae:	a805                	j	4de <polydiv+0xc4>
        q[i] = 0;
 4b0:	00279713          	slli	a4,a5,0x2
 4b4:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
 4b8:	975a                	add	a4,a4,s6
        q[i] = 0;
 4ba:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
 4be:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
 4c2:	0785                	addi	a5,a5,1
 4c4:	b7f9                	j	492 <polydiv+0x78>
        if( denum_temp[i] != 0 )
 4c6:	ff71                	bnez	a4,4a2 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
 4c8:	1afd                	addi	s5,s5,-1
 4ca:	b7f1                	j	496 <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
 4cc:	0337e633          	rem	a2,a5,s3
 4d0:	97ba                	add	a5,a5,a4
 4d2:	fcd60de3          	beq	a2,a3,4ac <polydiv+0x92>
    for (u = 0; u < mod; ++u){
 4d6:	0c05                	addi	s8,s8,1
 4d8:	bfc1                	j	4a8 <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
 4da:	eb01                	bnez	a4,4ea <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
 4dc:	17fd                	addi	a5,a5,-1
 4de:	00279713          	slli	a4,a5,0x2
 4e2:	974a                	add	a4,a4,s2
 4e4:	4318                	lw	a4,0(a4)
 4e6:	fe07dae3          	bgez	a5,4da <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
 4ea:	0557d663          	bge	a5,s5,536 <polydiv+0x11c>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    array_equ(result,q,size_N);
 4ee:	8626                	mv	a2,s1
 4f0:	85de                	mv	a1,s7
 4f2:	00001517          	auipc	a0,0x1
 4f6:	0ce50513          	addi	a0,a0,206 # 15c0 <result>
 4fa:	3e61                	jal	92 <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
 4fc:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
 500:	00001697          	auipc	a3,0x1
 504:	0c068693          	addi	a3,a3,192 # 15c0 <result>
    for(i = size_N; i < (2*size_N); ++i){
 508:	0ce4c863          	blt	s1,a4,5d8 <polydiv+0x1be>
    }

    return_address3 = &result[0];

    return return_address3;
}
 50c:	fc040113          	addi	sp,s0,-64
 510:	50f2                	lw	ra,60(sp)
 512:	5462                	lw	s0,56(sp)
 514:	54d2                	lw	s1,52(sp)
 516:	5942                	lw	s2,48(sp)
 518:	59b2                	lw	s3,44(sp)
 51a:	5a22                	lw	s4,40(sp)
 51c:	5a92                	lw	s5,36(sp)
 51e:	5b02                	lw	s6,32(sp)
 520:	4bf2                	lw	s7,28(sp)
 522:	4c62                	lw	s8,24(sp)
 524:	4cd2                	lw	s9,20(sp)
 526:	4d42                	lw	s10,16(sp)
 528:	4db2                	lw	s11,12(sp)
 52a:	00001517          	auipc	a0,0x1
 52e:	09650513          	addi	a0,a0,150 # 15c0 <result>
 532:	6121                	addi	sp,sp,64
 534:	8082                	ret
        v[(d-d2)] = u*r_d;
 536:	03870733          	mul	a4,a4,s8
 53a:	415787b3          	sub	a5,a5,s5
 53e:	078a                	slli	a5,a5,0x2
 540:	97da                	add	a5,a5,s6
    array_mod(v,mod,size_N);
 542:	8626                	mv	a2,s1
 544:	85ce                	mv	a1,s3
 546:	855a                	mv	a0,s6
        v[(d-d2)] = u*r_d;
 548:	c398                	sw	a4,0(a5)
    array_mod(v,mod,size_N);
 54a:	3e85                	jal	ba <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 54c:	4781                	li	a5,0
 54e:	874e                	mv	a4,s3
 550:	86d2                	mv	a3,s4
 552:	865a                	mv	a2,s6
 554:	85d2                	mv	a1,s4
 556:	8566                	mv	a0,s9
 558:	3641                	jal	d8 <polymult>
    array_mod(product,mod,size_N);
 55a:	8626                	mv	a2,s1
 55c:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 55e:	8daa                	mv	s11,a0
    array_mod(product,mod,size_N);
 560:	3ea9                	jal	ba <array_mod>
        for (i = 0; i < size_N; ++i){
 562:	874a                	mv	a4,s2
 564:	4781                	li	a5,0
 566:	0297c763          	blt	a5,s1,594 <polydiv+0x17a>
    array_mod(num_temp,mod,size_N);
 56a:	8626                	mv	a2,s1
 56c:	85ce                	mv	a1,s3
 56e:	854a                	mv	a0,s2
 570:	36a9                	jal	ba <array_mod>
        for(i = 0; i < size_N; ++i){
 572:	875e                	mv	a4,s7
 574:	4781                	li	a5,0
 576:	0297ca63          	blt	a5,s1,5aa <polydiv+0x190>
    array_mod(q,mod,size_N);
 57a:	8626                	mv	a2,s1
 57c:	85ce                	mv	a1,s3
 57e:	855e                	mv	a0,s7
 580:	3e2d                	jal	ba <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
 582:	87ea                	mv	a5,s10
 584:	00279713          	slli	a4,a5,0x2
 588:	974a                	add	a4,a4,s2
 58a:	4318                	lw	a4,0(a4)
 58c:	0207da63          	bgez	a5,5c0 <polydiv+0x1a6>
 590:	4681                	li	a3,0
 592:	a081                	j	5d2 <polydiv+0x1b8>
            num_temp[i] = num_temp[i] - product[i];
 594:	00279613          	slli	a2,a5,0x2
 598:	966e                	add	a2,a2,s11
 59a:	4314                	lw	a3,0(a4)
 59c:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
 59e:	0785                	addi	a5,a5,1
 5a0:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
 5a2:	8e91                	sub	a3,a3,a2
 5a4:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
 5a8:	bf7d                	j	566 <polydiv+0x14c>
            q[i] = q[i] + v[i];
 5aa:	00279613          	slli	a2,a5,0x2
 5ae:	965a                	add	a2,a2,s6
 5b0:	4314                	lw	a3,0(a4)
 5b2:	4210                	lw	a2,0(a2)
        for(i = 0; i < size_N; ++i){
 5b4:	0785                	addi	a5,a5,1
 5b6:	0711                	addi	a4,a4,4
            q[i] = q[i] + v[i];
 5b8:	96b2                	add	a3,a3,a2
 5ba:	fed72e23          	sw	a3,-4(a4)
        for(i = 0; i < size_N; ++i){
 5be:	bf65                	j	576 <polydiv+0x15c>
            if( num_temp[i] != 0 )
 5c0:	fb61                	bnez	a4,590 <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
 5c2:	17fd                	addi	a5,a5,-1
 5c4:	b7c1                	j	584 <polydiv+0x16a>
            v[i] = 0;
 5c6:	00269613          	slli	a2,a3,0x2
 5ca:	965a                	add	a2,a2,s6
 5cc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
 5d0:	0685                	addi	a3,a3,1
 5d2:	fe96cae3          	blt	a3,s1,5c6 <polydiv+0x1ac>
 5d6:	bf11                	j	4ea <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
 5d8:	00092603          	lw	a2,0(s2)
 5dc:	00249793          	slli	a5,s1,0x2
 5e0:	97b6                	add	a5,a5,a3
 5e2:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
 5e4:	0485                	addi	s1,s1,1
 5e6:	0911                	addi	s2,s2,4
 5e8:	b705                	j	508 <polydiv+0xee>

000005ea <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
 5ea:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5ee:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
 5f0:	07bd                	addi	a5,a5,15
 5f2:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5f4:	c4a2                	sw	s0,72(sp)
 5f6:	c2a6                	sw	s1,68(sp)
 5f8:	c0ca                	sw	s2,64(sp)
 5fa:	de4e                	sw	s3,60(sp)
 5fc:	dc52                	sw	s4,56(sp)
 5fe:	da56                	sw	s5,52(sp)
 600:	d85a                	sw	s6,48(sp)
 602:	d65e                	sw	s7,44(sp)
 604:	d462                	sw	s8,40(sp)
 606:	d266                	sw	s9,36(sp)
 608:	d06a                	sw	s10,32(sp)
 60a:	ce6e                	sw	s11,28(sp)
 60c:	c686                	sw	ra,76(sp)
 60e:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
 610:	40f10133          	sub	sp,sp,a5
 614:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
 616:	40f10133          	sub	sp,sp,a5
 61a:	8a0a                	mv	s4,sp
    int ri[size];
 61c:	40f10133          	sub	sp,sp,a5
 620:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
 622:	40f10133          	sub	sp,sp,a5
 626:	8b0a                	mv	s6,sp
    int ti[size];
 628:	40f10133          	sub	sp,sp,a5
 62c:	8d0a                	mv	s10,sp
    int qi_1[size];
 62e:	40f10133          	sub	sp,sp,a5
 632:	8c8a                	mv	s9,sp
    int temp[size];
 634:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 638:	8936                	mv	s2,a3
 63a:	8dae                	mv	s11,a1
 63c:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
 63e:	fff60b93          	addi	s7,a2,-1
    int temp[size];
 642:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
 644:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
 646:	00001697          	auipc	a3,0x1
 64a:	1d268693          	addi	a3,a3,466 # 1818 <ti_2>
    for (i = 0; i < size; ++i) {
 64e:	1097cb63          	blt	a5,s1,764 <ext_euclid+0x17a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
 652:	85aa                	mv	a1,a0
 654:	8626                	mv	a2,s1
 656:	854e                	mv	a0,s3
 658:	3c2d                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
 65a:	85ee                	mv	a1,s11
 65c:	8626                	mv	a2,s1
 65e:	8552                	mv	a0,s4
 660:	3c0d                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
 662:	4785                	li	a5,1
 664:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
 668:	00149793          	slli	a5,s1,0x1
 66c:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
 670:	00001d97          	auipc	s11,0x1
 674:	1a8d8d93          	addi	s11,s11,424 # 1818 <ti_2>
    array_mod(ri_2,mod,size);
 678:	8626                	mv	a2,s1
 67a:	85ca                	mv	a1,s2
 67c:	854e                	mv	a0,s3
 67e:	3c35                	jal	ba <array_mod>
    array_mod(ri_1,mod,size);
 680:	8626                	mv	a2,s1
 682:	85ca                	mv	a1,s2
 684:	8552                	mv	a0,s4
 686:	3c15                	jal	ba <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 688:	874a                	mv	a4,s2
 68a:	86a6                	mv	a3,s1
 68c:	8652                	mv	a2,s4
 68e:	85a6                	mv	a1,s1
 690:	854e                	mv	a0,s3
 692:	3361                	jal	41a <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
 694:	8762                	mv	a4,s8
 696:	87a6                	mv	a5,s1
 698:	fbc42683          	lw	a3,-68(s0)
 69c:	0cd7cf63          	blt	a5,a3,77a <ext_euclid+0x190>
 6a0:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
 6a2:	4701                	li	a4,0
 6a4:	0eebd463          	bge	s7,a4,78c <ext_euclid+0x1a2>
    array_mod(temp,mod,size);
 6a8:	8626                	mv	a2,s1
 6aa:	85ca                	mv	a1,s2
 6ac:	8556                	mv	a0,s5
 6ae:	3431                	jal	ba <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6b0:	874a                	mv	a4,s2
 6b2:	86a6                	mv	a3,s1
 6b4:	8652                	mv	a2,s4
 6b6:	85a6                	mv	a1,s1
 6b8:	8556                	mv	a0,s5
 6ba:	3385                	jal	41a <polydiv>
 6bc:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
 6be:	8626                	mv	a2,s1
 6c0:	8566                	mv	a0,s9
 6c2:	3ac1                	jal	92 <array_equ>
    array_mod(qi_1,mod,size);
 6c4:	8626                	mv	a2,s1
 6c6:	85ca                	mv	a1,s2
 6c8:	8566                	mv	a0,s9
 6ca:	3ac5                	jal	ba <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6cc:	4781                	li	a5,0
 6ce:	874a                	mv	a4,s2
 6d0:	86a6                	mv	a3,s1
 6d2:	865a                	mv	a2,s6
 6d4:	85a6                	mv	a1,s1
 6d6:	8566                	mv	a0,s9
 6d8:	3401                	jal	d8 <polymult>
 6da:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
 6dc:	8626                	mv	a2,s1
 6de:	8556                	mv	a0,s5
 6e0:	3a4d                	jal	92 <array_equ>
    array_mod(temp,mod,size);
 6e2:	8626                	mv	a2,s1
 6e4:	85ca                	mv	a1,s2
 6e6:	8556                	mv	a0,s5
 6e8:	3ac9                	jal	ba <array_mod>
        for (i = 0; i < N + 1; ++i) {
 6ea:	4781                	li	a5,0
 6ec:	4701                	li	a4,0
 6ee:	0aebdc63          	bge	s7,a4,7a6 <ext_euclid+0x1bc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
 6f2:	8626                	mv	a2,s1
 6f4:	85ca                	mv	a1,s2
 6f6:	856a                	mv	a0,s10
 6f8:	32c9                	jal	ba <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
 6fa:	8626                	mv	a2,s1
 6fc:	85d2                	mv	a1,s4
 6fe:	854e                	mv	a0,s3
 700:	3a49                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
 702:	8626                	mv	a2,s1
 704:	85e2                	mv	a1,s8
 706:	8552                	mv	a0,s4
 708:	3269                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
 70a:	8626                	mv	a2,s1
 70c:	85da                	mv	a1,s6
 70e:	856e                	mv	a0,s11
 710:	3249                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
 712:	8626                	mv	a2,s1
 714:	85ea                	mv	a1,s10
 716:	855a                	mv	a0,s6
 718:	3aad                	jal	92 <array_equ>
        controlR = 0;
 71a:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
 71c:	4701                	li	a4,0
 71e:	0aebd163          	bge	s7,a4,7c0 <ext_euclid+0x1d6>
    while (controlR != 0) {
 722:	f4079be3          	bnez	a5,678 <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
 726:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
 728:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
 72a:	0b274663          	blt	a4,s2,7d6 <ext_euclid+0x1ec>
 72e:	00001617          	auipc	a2,0x1
 732:	0ea60613          	addi	a2,a2,234 # 1818 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
 736:	0afbda63          	bge	s7,a5,7ea <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
 73a:	fb040113          	addi	sp,s0,-80
 73e:	40b6                	lw	ra,76(sp)
 740:	4426                	lw	s0,72(sp)
 742:	4496                	lw	s1,68(sp)
 744:	4906                	lw	s2,64(sp)
 746:	59f2                	lw	s3,60(sp)
 748:	5a62                	lw	s4,56(sp)
 74a:	5ad2                	lw	s5,52(sp)
 74c:	5b42                	lw	s6,48(sp)
 74e:	5bb2                	lw	s7,44(sp)
 750:	5c22                	lw	s8,40(sp)
 752:	5c92                	lw	s9,36(sp)
 754:	5d02                	lw	s10,32(sp)
 756:	4df2                	lw	s11,28(sp)
 758:	00001517          	auipc	a0,0x1
 75c:	0c050513          	addi	a0,a0,192 # 1818 <ti_2>
 760:	6161                	addi	sp,sp,80
 762:	8082                	ret
        ti_2[i] = 0;
 764:	00279713          	slli	a4,a5,0x2
 768:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
 76c:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
 76e:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
 772:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
 776:	0785                	addi	a5,a5,1
 778:	bdd9                	j	64e <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
 77a:	00279693          	slli	a3,a5,0x2
 77e:	96aa                	add	a3,a3,a0
 780:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 782:	0785                	addi	a5,a5,1
 784:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
 786:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 78a:	b739                	j	698 <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
 78c:	00f986b3          	add	a3,s3,a5
 790:	00fc05b3          	add	a1,s8,a5
 794:	4294                	lw	a3,0(a3)
 796:	418c                	lw	a1,0(a1)
 798:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
 79c:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
 79e:	8e8d                	sub	a3,a3,a1
 7a0:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7a2:	0791                	addi	a5,a5,4
 7a4:	b701                	j	6a4 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
 7a6:	00fd86b3          	add	a3,s11,a5
 7aa:	00fa85b3          	add	a1,s5,a5
 7ae:	4294                	lw	a3,0(a3)
 7b0:	418c                	lw	a1,0(a1)
 7b2:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
 7b6:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
 7b8:	8e8d                	sub	a3,a3,a1
 7ba:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7bc:	0791                	addi	a5,a5,4
 7be:	bf05                	j	6ee <ext_euclid+0x104>
              qi_1[i] = 0;
 7c0:	00271693          	slli	a3,a4,0x2
 7c4:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
 7c8:	96e2                	add	a3,a3,s8
 7ca:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
 7cc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7d0:	0705                	addi	a4,a4,1
            controlR += ri[i];
 7d2:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
 7d4:	b7a9                	j	71e <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
 7d6:	0009a683          	lw	a3,0(s3)
 7da:	02d706b3          	mul	a3,a4,a3
 7de:	0326e6b3          	rem	a3,a3,s2
 7e2:	f4c686e3          	beq	a3,a2,72e <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
 7e6:	0705                	addi	a4,a4,1
 7e8:	b789                	j	72a <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;
 7ea:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7ec:	0785                	addi	a5,a5,1
 7ee:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
 7f0:	02d706b3          	mul	a3,a4,a3
 7f4:	0326e6b3          	rem	a3,a3,s2
 7f8:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
 7fc:	bf2d                	j	736 <ext_euclid+0x14c>

000007fe <generate_keys>:




int* generate_keys(int N, int p, int q){
 7fe:	7141                	addi	sp,sp,-496
 800:	1e112623          	sw	ra,492(sp)
 804:	1e812423          	sw	s0,488(sp)
 808:	1e912223          	sw	s1,484(sp)
 80c:	1b80                	addi	s0,sp,496
 80e:	1f212023          	sw	s2,480(sp)
 812:	1d312e23          	sw	s3,476(sp)
 816:	1d412c23          	sw	s4,472(sp)
 81a:	1d512a23          	sw	s5,468(sp)
 81e:	1d612823          	sw	s6,464(sp)
 822:	1d712623          	sw	s7,460(sp)
 826:	1da12023          	sw	s10,448(sp)
 82a:	1d812423          	sw	s8,456(sp)
 82e:	1d912223          	sw	s9,452(sp)
 832:	892a                	mv	s2,a0
 834:	8bae                	mv	s7,a1
 836:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 838:	4581                	li	a1,0
 83a:	0d000613          	li	a2,208
 83e:	e2440513          	addi	a0,s0,-476
 842:	2ba9                	jal	d9c <memset>
 844:	4485                	li	s1,1
 846:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 848:	0d800613          	li	a2,216
 84c:	4581                	li	a1,0
 84e:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 852:	e1342c23          	sw	s3,-488(s0)
 856:	e0942e23          	sw	s1,-484(s0)
 85a:	e2942023          	sw	s1,-480(s0)
 85e:	e3342423          	sw	s3,-472(s0)
 862:	e2942823          	sw	s1,-464(s0)
 866:	e2942e23          	sw	s1,-452(s0)
 86a:	e5342023          	sw	s3,-448(s0)
 86e:	e5342223          	sw	s3,-444(s0)
 872:	e4942623          	sw	s1,-436(s0)
 876:	e5342a23          	sw	s3,-428(s0)
 87a:	e4942e23          	sw	s1,-420(s0)
 87e:	e6942023          	sw	s1,-416(s0)
 882:	e7342623          	sw	s3,-404(s0)
 886:	e6942a23          	sw	s1,-396(s0)
 88a:	e8942023          	sw	s1,-384(s0)
 88e:	e8942223          	sw	s1,-380(s0)
 892:	e8942423          	sw	s1,-376(s0)
 896:	e9342623          	sw	s3,-372(s0)
 89a:	e8942a23          	sw	s1,-364(s0)
 89e:	ea942023          	sw	s1,-352(s0)
 8a2:	ea942223          	sw	s1,-348(s0)
 8a6:	ea942423          	sw	s1,-344(s0)
 8aa:	eb342623          	sw	s3,-340(s0)
 8ae:	ea942a23          	sw	s1,-332(s0)
 8b2:	ec942023          	sw	s1,-320(s0)
 8b6:	ec942223          	sw	s1,-316(s0)
 8ba:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
 8be:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8c2:	29e9                	jal	d9c <memset>
    int polyR[N+1];
 8c4:	002a9793          	slli	a5,s5,0x2
 8c8:	07bd                	addi	a5,a5,15
 8ca:	9bc1                	andi	a5,a5,-16
 8cc:	40f10133          	sub	sp,sp,a5
 8d0:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
 8d2:	00291d13          	slli	s10,s2,0x2
 8d6:	01aa07b3          	add	a5,s4,s10
 8da:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8dc:	ef342a23          	sw	s3,-268(s0)
 8e0:	ee942e23          	sw	s1,-260(s0)
 8e4:	f0942023          	sw	s1,-256(s0)
 8e8:	f0942423          	sw	s1,-248(s0)
 8ec:	f1342a23          	sw	s3,-236(s0)
 8f0:	f1342e23          	sw	s3,-228(s0)
 8f4:	f3342023          	sw	s3,-224(s0)
 8f8:	f2942423          	sw	s1,-216(s0)
 8fc:	f3342823          	sw	s3,-208(s0)
 900:	f2942c23          	sw	s1,-200(s0)
 904:	f4942223          	sw	s1,-188(s0)
 908:	f5342423          	sw	s3,-184(s0)
 90c:	f4942823          	sw	s1,-176(s0)
 910:	f4942e23          	sw	s1,-164(s0)
 914:	f7342023          	sw	s3,-160(s0)
 918:	f6942423          	sw	s1,-152(s0)
 91c:	f6942a23          	sw	s1,-140(s0)
 920:	f7342c23          	sw	s3,-136(s0)
 924:	f8942023          	sw	s1,-128(s0)
 928:	f8942423          	sw	s1,-120(s0)
 92c:	f8942623          	sw	s1,-116(s0)
 930:	f8942c23          	sw	s1,-104(s0)
 934:	f9342e23          	sw	s3,-100(s0)
 938:	fa942223          	sw	s1,-92(s0)
 93c:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
 940:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
 944:	4785                	li	a5,1
 946:	1127c163          	blt	a5,s2,a48 <generate_keys+0x24a>
 94a:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
 94c:	03600693          	li	a3,54
 950:	10f6d363          	bge	a3,a5,a56 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
 954:	4781                	li	a5,0
        random_keys[i] = f[i];
 956:	00001697          	auipc	a3,0x1
 95a:	05268693          	addi	a3,a3,82 # 19a8 <random_keys>
    for(i = 0; i < N; ++i){
 95e:	1127ca63          	blt	a5,s2,a72 <generate_keys+0x274>
 962:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
 966:	00191993          	slli	s3,s2,0x1
 96a:	87ca                	mv	a5,s2
 96c:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
 96e:	00001617          	auipc	a2,0x1
 972:	03a60613          	addi	a2,a2,58 # 19a8 <random_keys>
    for(i = N; i < (2*N); ++i){
 976:	1137c963          	blt	a5,s3,a88 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
 97a:	448d                	li	s1,3
 97c:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
 980:	86de                	mv	a3,s7
 982:	8656                	mv	a2,s5
 984:	e1840593          	addi	a1,s0,-488
 988:	8552                	mv	a0,s4
 98a:	3185                	jal	5ea <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
 98c:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
 98e:	00001697          	auipc	a3,0x1
 992:	01a68693          	addi	a3,a3,26 # 19a8 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
 996:	1097c163          	blt	a5,s1,a98 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
 99a:	8656                	mv	a2,s5
 99c:	86da                	mv	a3,s6
 99e:	e1840593          	addi	a1,s0,-488
 9a2:	8552                	mv	a0,s4
 9a4:	3199                	jal	5ea <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
 9a6:	5751                	li	a4,-12
 9a8:	02e90733          	mul	a4,s2,a4
 9ac:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
 9ae:	00001617          	auipc	a2,0x1
 9b2:	ffa60613          	addi	a2,a2,-6 # 19a8 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
 9b6:	0fa4c963          	blt	s1,s10,aa8 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
 9ba:	4701                	li	a4,0
 9bc:	85ca                	mv	a1,s2
 9be:	86ca                	mv	a3,s2
 9c0:	8666                	mv	a2,s9
 9c2:	30e5                	jal	2aa <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
 9c4:	87aa                	mv	a5,a0
 9c6:	4701                	li	a4,0
 9c8:	fff98593          	addi	a1,s3,-1
 9cc:	0eb74863          	blt	a4,a1,abc <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
 9d0:	86d6                	mv	a3,s5
 9d2:	875a                	mv	a4,s6
 9d4:	8652                	mv	a2,s4
 9d6:	3491                	jal	41a <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
 9d8:	4795                	li	a5,5
 9da:	02f907b3          	mul	a5,s2,a5
 9de:	098a                	slli	s3,s3,0x2
 9e0:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 9e2:	00001697          	auipc	a3,0x1
 9e6:	fc668693          	addi	a3,a3,-58 # 19a8 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
 9ea:	0991                	addi	s3,s3,4
 9ec:	0efc4063          	blt	s8,a5,acc <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
 9f0:	4699                	li	a3,6
 9f2:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
 9f4:	00001617          	auipc	a2,0x1
 9f8:	fb460613          	addi	a2,a2,-76 # 19a8 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
 9fc:	02d906b3          	mul	a3,s2,a3
 a00:	02a90933          	mul	s2,s2,a0
 a04:	0cf6dc63          	bge	a3,a5,adc <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
 a08:	e1040113          	addi	sp,s0,-496
 a0c:	1ec12083          	lw	ra,492(sp)
 a10:	1e812403          	lw	s0,488(sp)
 a14:	1e412483          	lw	s1,484(sp)
 a18:	1e012903          	lw	s2,480(sp)
 a1c:	1dc12983          	lw	s3,476(sp)
 a20:	1d812a03          	lw	s4,472(sp)
 a24:	1d412a83          	lw	s5,468(sp)
 a28:	1d012b03          	lw	s6,464(sp)
 a2c:	1cc12b83          	lw	s7,460(sp)
 a30:	1c812c03          	lw	s8,456(sp)
 a34:	1c412c83          	lw	s9,452(sp)
 a38:	1c012d03          	lw	s10,448(sp)
 a3c:	00001517          	auipc	a0,0x1
 a40:	f6c50513          	addi	a0,a0,-148 # 19a8 <random_keys>
 a44:	617d                	addi	sp,sp,496
 a46:	8082                	ret
        polyR[i] = 0;
 a48:	00279713          	slli	a4,a5,0x2
 a4c:	9752                	add	a4,a4,s4
 a4e:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
 a52:	0785                	addi	a5,a5,1
 a54:	bdcd                	j	946 <generate_keys+0x148>
        f[i] = 0;
 a56:	00279713          	slli	a4,a5,0x2
 a5a:	e1840613          	addi	a2,s0,-488
 a5e:	963a                	add	a2,a2,a4
 a60:	00062023          	sw	zero,0(a2)
        g[i] = 0;
 a64:	ef440613          	addi	a2,s0,-268
 a68:	9732                	add	a4,a4,a2
 a6a:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
 a6e:	0785                	addi	a5,a5,1
 a70:	b5c5                	j	950 <generate_keys+0x152>
        random_keys[i] = f[i];
 a72:	00279713          	slli	a4,a5,0x2
 a76:	e1840593          	addi	a1,s0,-488
 a7a:	00e68633          	add	a2,a3,a4
 a7e:	972e                	add	a4,a4,a1
 a80:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
 a82:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
 a84:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
 a86:	bde1                	j	95e <generate_keys+0x160>
        random_keys[i] = g[i-N];
 a88:	430c                	lw	a1,0(a4)
 a8a:	00279693          	slli	a3,a5,0x2
 a8e:	96b2                	add	a3,a3,a2
 a90:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
 a92:	0785                	addi	a5,a5,1
 a94:	0711                	addi	a4,a4,4
 a96:	b5c5                	j	976 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
 a98:	4110                	lw	a2,0(a0)
 a9a:	00279713          	slli	a4,a5,0x2
 a9e:	9736                	add	a4,a4,a3
 aa0:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 aa2:	0785                	addi	a5,a5,1
 aa4:	0511                	addi	a0,a0,4
 aa6:	bdc5                	j	996 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
 aa8:	00249793          	slli	a5,s1,0x2
 aac:	00f706b3          	add	a3,a4,a5
 ab0:	96aa                	add	a3,a3,a0
 ab2:	4294                	lw	a3,0(a3)
 ab4:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
 ab6:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
 ab8:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
 aba:	bdf5                	j	9b6 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
 abc:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
 abe:	0705                	addi	a4,a4,1
 ac0:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
 ac2:	037686b3          	mul	a3,a3,s7
 ac6:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
 aca:	b709                	j	9cc <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 acc:	ff89a603          	lw	a2,-8(s3)
 ad0:	002c1713          	slli	a4,s8,0x2
 ad4:	9736                	add	a4,a4,a3
 ad6:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
 ad8:	0c05                	addi	s8,s8,1
 ada:	bf01                	j	9ea <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
 adc:	00279713          	slli	a4,a5,0x2
 ae0:	00e605b3          	add	a1,a2,a4
 ae4:	974a                	add	a4,a4,s2
 ae6:	9752                	add	a4,a4,s4
 ae8:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
 aea:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
 aec:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
 aee:	bf19                	j	a04 <generate_keys+0x206>

00000af0 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 af0:	7115                	addi	sp,sp,-224
 af2:	cda2                	sw	s0,216(sp)
 af4:	cba6                	sw	s1,212(sp)
 af6:	c9ca                	sw	s2,208(sp)
 af8:	842a                	mv	s0,a0
 afa:	892e                	mv	s2,a1
 afc:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 afe:	00000597          	auipc	a1,0x0
 b02:	48e58593          	addi	a1,a1,1166 # f8c <__DTOR_END__>
 b06:	0c000613          	li	a2,192
 b0a:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b0c:	cf86                	sw	ra,220(sp)
 b0e:	c7ce                	sw	s3,204(sp)
 b10:	c5d2                	sw	s4,200(sp)
 b12:	89ba                	mv	s3,a4
 b14:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b16:	2265                	jal	cbe <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
 b18:	4781                	li	a5,0
 b1a:	860a                	mv	a2,sp
 b1c:	874a                	mv	a4,s2
 b1e:	03000693          	li	a3,48
 b22:	85a2                	mv	a1,s0
 b24:	8552                	mv	a0,s4
 b26:	db2ff0ef          	jal	ra,d8 <polymult>
 b2a:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
 b2c:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
 b30:	00f506b3          	add	a3,a0,a5
 b34:	00f485b3          	add	a1,s1,a5
 b38:	4298                	lw	a4,0(a3)
 b3a:	418c                	lw	a1,0(a1)
 b3c:	0791                	addi	a5,a5,4
 b3e:	972e                	add	a4,a4,a1
 b40:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
 b42:	fec797e3          	bne	a5,a2,b30 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b46:	00141493          	slli	s1,s0,0x1
 b4a:	00140693          	addi	a3,s0,1
 b4e:	874a                	mv	a4,s2
 b50:	864e                	mv	a2,s3
 b52:	85a6                	mv	a1,s1
 b54:	30d9                	jal	41a <polydiv>

    for(i = (2*N); i < (3*N); ++i){
 b56:	478d                	li	a5,3
 b58:	02f40433          	mul	s0,s0,a5
 b5c:	87aa                	mv	a5,a0
 b5e:	0084ca63          	blt	s1,s0,b72 <ntru_encyrpt+0x82>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
 b62:	40fe                	lw	ra,220(sp)
 b64:	446e                	lw	s0,216(sp)
 b66:	44de                	lw	s1,212(sp)
 b68:	494e                	lw	s2,208(sp)
 b6a:	49be                	lw	s3,204(sp)
 b6c:	4a2e                	lw	s4,200(sp)
 b6e:	612d                	addi	sp,sp,224
 b70:	8082                	ret
        CT[i-(2*N)] = CT[i];
 b72:	00249713          	slli	a4,s1,0x2
 b76:	972a                	add	a4,a4,a0
 b78:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 b7a:	0485                	addi	s1,s1,1
 b7c:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
 b7e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
 b82:	bff1                	j	b5e <ntru_encyrpt+0x6e>

00000b84 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b84:	7179                	addi	sp,sp,-48
 b86:	d422                	sw	s0,40(sp)
 b88:	ce4e                	sw	s3,28(sp)
 b8a:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
 b8c:	498d                	li	s3,3
 b8e:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b92:	d04a                	sw	s2,32(sp)
 b94:	ca56                	sw	s5,20(sp)
 b96:	c65e                	sw	s7,12(sp)
 b98:	8932                	mv	s2,a2
 b9a:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b9c:	863e                	mv	a2,a5
 b9e:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 ba0:	8aae                	mv	s5,a1
 ba2:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 ba4:	85a2                	mv	a1,s0
 ba6:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 ba8:	d606                	sw	ra,44(sp)
 baa:	d226                	sw	s1,36(sp)
 bac:	cc52                	sw	s4,24(sp)
 bae:	c85a                	sw	s6,16(sp)
 bb0:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 bb2:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 bb6:	ef4ff0ef          	jal	ra,2aa <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 bba:	00140b13          	addi	s6,s0,1
 bbe:	874a                	mv	a4,s2
 bc0:	86da                	mv	a3,s6
 bc2:	8652                	mv	a2,s4
 bc4:	85a6                	mv	a1,s1
 bc6:	3891                	jal	41a <polydiv>
 bc8:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
 bca:	87aa                	mv	a5,a0
 bcc:	872a                	mv	a4,a0
 bce:	86a6                	mv	a3,s1
 bd0:	0536c163          	blt	a3,s3,c12 <ntru_deceypt+0x8e>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
 bd4:	4589                	li	a1,2
 bd6:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
 bda:	4701                	li	a4,0
 bdc:	04874463          	blt	a4,s0,c24 <ntru_deceypt+0xa0>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
 be0:	4701                	li	a4,0
 be2:	86a2                	mv	a3,s0
 be4:	85a2                	mv	a1,s0
 be6:	855e                	mv	a0,s7
 be8:	ec2ff0ef          	jal	ra,2aa <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
 bec:	8756                	mv	a4,s5
 bee:	86da                	mv	a3,s6
 bf0:	8652                	mv	a2,s4
 bf2:	85a6                	mv	a1,s1
 bf4:	301d                	jal	41a <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
 bf6:	87aa                	mv	a5,a0
 bf8:	0334cf63          	blt	s1,s3,c36 <ntru_deceypt+0xb2>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
 bfc:	50b2                	lw	ra,44(sp)
 bfe:	5422                	lw	s0,40(sp)
 c00:	5492                	lw	s1,36(sp)
 c02:	5902                	lw	s2,32(sp)
 c04:	49f2                	lw	s3,28(sp)
 c06:	4a62                	lw	s4,24(sp)
 c08:	4ad2                	lw	s5,20(sp)
 c0a:	4b42                	lw	s6,16(sp)
 c0c:	4bb2                	lw	s7,12(sp)
 c0e:	6145                	addi	sp,sp,48
 c10:	8082                	ret
        a2[i-(2*N)] = a2[i];
 c12:	00269593          	slli	a1,a3,0x2
 c16:	95b2                	add	a1,a1,a2
 c18:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c1a:	0685                	addi	a3,a3,1
 c1c:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
 c1e:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c22:	b77d                	j	bd0 <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
 c24:	4394                	lw	a3,0(a5)
 c26:	00d5d563          	bge	a1,a3,c30 <ntru_deceypt+0xac>
            a2[i] = (-1)*(q-a2[i]);
 c2a:	412686b3          	sub	a3,a3,s2
 c2e:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
 c30:	0705                	addi	a4,a4,1
 c32:	0791                	addi	a5,a5,4
 c34:	b765                	j	bdc <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
 c36:	00249713          	slli	a4,s1,0x2
 c3a:	972a                	add	a4,a4,a0
 c3c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c3e:	0485                	addi	s1,s1,1
 c40:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
 c42:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c46:	bf4d                	j	bf8 <ntru_deceypt+0x74>

00000c48 <default_exc_handler>:
  jal x0, default_exc_handler
 c48:	0000006f          	j	c48 <default_exc_handler>

00000c4c <reset_handler>:
  mv  x1, x0
 c4c:	00000093          	li	ra,0
  mv  x2, x1
 c50:	8106                	mv	sp,ra
  mv  x3, x1
 c52:	8186                	mv	gp,ra
  mv  x4, x1
 c54:	8206                	mv	tp,ra
  mv  x5, x1
 c56:	8286                	mv	t0,ra
  mv  x6, x1
 c58:	8306                	mv	t1,ra
  mv  x7, x1
 c5a:	8386                	mv	t2,ra
  mv  x8, x1
 c5c:	8406                	mv	s0,ra
  mv  x9, x1
 c5e:	8486                	mv	s1,ra
  mv x10, x1
 c60:	8506                	mv	a0,ra
  mv x11, x1
 c62:	8586                	mv	a1,ra
  mv x12, x1
 c64:	8606                	mv	a2,ra
  mv x13, x1
 c66:	8686                	mv	a3,ra
  mv x14, x1
 c68:	8706                	mv	a4,ra
  mv x15, x1
 c6a:	8786                	mv	a5,ra
  mv x16, x1
 c6c:	8806                	mv	a6,ra
  mv x17, x1
 c6e:	8886                	mv	a7,ra
  mv x18, x1
 c70:	8906                	mv	s2,ra
  mv x19, x1
 c72:	8986                	mv	s3,ra
  mv x20, x1
 c74:	8a06                	mv	s4,ra
  mv x21, x1
 c76:	8a86                	mv	s5,ra
  mv x22, x1
 c78:	8b06                	mv	s6,ra
  mv x23, x1
 c7a:	8b86                	mv	s7,ra
  mv x24, x1
 c7c:	8c06                	mv	s8,ra
  mv x25, x1
 c7e:	8c86                	mv	s9,ra
  mv x26, x1
 c80:	8d06                	mv	s10,ra
  mv x27, x1
 c82:	8d86                	mv	s11,ra
  mv x28, x1
 c84:	8e06                	mv	t3,ra
  mv x29, x1
 c86:	8e86                	mv	t4,ra
  mv x30, x1
 c88:	8f06                	mv	t5,ra
  mv x31, x1
 c8a:	8f86                	mv	t6,ra
  la   x2, _stack_start
 c8c:	0000f117          	auipc	sp,0xf
 c90:	37410113          	addi	sp,sp,884 # 10000 <_stack_start>

00000c94 <_start>:
  la x26, _bss_start
 c94:	00000d17          	auipc	s10,0x0
 c98:	47cd0d13          	addi	s10,s10,1148 # 1110 <_bss_start>
  la x27, _bss_end
 c9c:	00001d97          	auipc	s11,0x1
 ca0:	204d8d93          	addi	s11,s11,516 # 1ea0 <_bss_end>
  bge x26, x27, zero_loop_end
 ca4:	01bd5763          	bge	s10,s11,cb2 <main_entry>

00000ca8 <zero_loop>:
  sw x0, 0(x26)
 ca8:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 cac:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 cae:	ffaddde3          	bge	s11,s10,ca8 <zero_loop>

00000cb2 <main_entry>:
  addi x10, x0, 0
 cb2:	00000513          	li	a0,0
  addi x11, x0, 0
 cb6:	00000593          	li	a1,0
  jal x1, main
 cba:	18a000ef          	jal	ra,e44 <main>

00000cbe <memcpy>:
 cbe:	00a5c7b3          	xor	a5,a1,a0
 cc2:	8b8d                	andi	a5,a5,3
 cc4:	00c508b3          	add	a7,a0,a2
 cc8:	e7a1                	bnez	a5,d10 <memcpy+0x52>
 cca:	478d                	li	a5,3
 ccc:	04c7f263          	bgeu	a5,a2,d10 <memcpy+0x52>
 cd0:	00357793          	andi	a5,a0,3
 cd4:	872a                	mv	a4,a0
 cd6:	eba9                	bnez	a5,d28 <memcpy+0x6a>
 cd8:	ffc8f613          	andi	a2,a7,-4
 cdc:	fe060793          	addi	a5,a2,-32
 ce0:	06f76763          	bltu	a4,a5,d4e <memcpy+0x90>
 ce4:	02c77363          	bgeu	a4,a2,d0a <memcpy+0x4c>
 ce8:	86ae                	mv	a3,a1
 cea:	87ba                	mv	a5,a4
 cec:	0006a803          	lw	a6,0(a3)
 cf0:	0791                	addi	a5,a5,4
 cf2:	0691                	addi	a3,a3,4
 cf4:	ff07ae23          	sw	a6,-4(a5)
 cf8:	fec7eae3          	bltu	a5,a2,cec <memcpy+0x2e>
 cfc:	fff60793          	addi	a5,a2,-1
 d00:	8f99                	sub	a5,a5,a4
 d02:	9bf1                	andi	a5,a5,-4
 d04:	0791                	addi	a5,a5,4
 d06:	973e                	add	a4,a4,a5
 d08:	95be                	add	a1,a1,a5
 d0a:	01176663          	bltu	a4,a7,d16 <memcpy+0x58>
 d0e:	8082                	ret
 d10:	872a                	mv	a4,a0
 d12:	ff157ee3          	bgeu	a0,a7,d0e <memcpy+0x50>
 d16:	0005c783          	lbu	a5,0(a1)
 d1a:	0705                	addi	a4,a4,1
 d1c:	0585                	addi	a1,a1,1
 d1e:	fef70fa3          	sb	a5,-1(a4)
 d22:	ff176ae3          	bltu	a4,a7,d16 <memcpy+0x58>
 d26:	8082                	ret
 d28:	0005c683          	lbu	a3,0(a1)
 d2c:	0705                	addi	a4,a4,1
 d2e:	00377793          	andi	a5,a4,3
 d32:	fed70fa3          	sb	a3,-1(a4)
 d36:	0585                	addi	a1,a1,1
 d38:	d3c5                	beqz	a5,cd8 <memcpy+0x1a>
 d3a:	0005c683          	lbu	a3,0(a1)
 d3e:	0705                	addi	a4,a4,1
 d40:	00377793          	andi	a5,a4,3
 d44:	fed70fa3          	sb	a3,-1(a4)
 d48:	0585                	addi	a1,a1,1
 d4a:	fff9                	bnez	a5,d28 <memcpy+0x6a>
 d4c:	b771                	j	cd8 <memcpy+0x1a>
 d4e:	41d4                	lw	a3,4(a1)
 d50:	0005a283          	lw	t0,0(a1)
 d54:	0085af83          	lw	t6,8(a1)
 d58:	00c5af03          	lw	t5,12(a1)
 d5c:	0105ae83          	lw	t4,16(a1)
 d60:	0145ae03          	lw	t3,20(a1)
 d64:	0185a303          	lw	t1,24(a1)
 d68:	01c5a803          	lw	a6,28(a1)
 d6c:	c354                	sw	a3,4(a4)
 d6e:	5194                	lw	a3,32(a1)
 d70:	00572023          	sw	t0,0(a4)
 d74:	01f72423          	sw	t6,8(a4)
 d78:	01e72623          	sw	t5,12(a4)
 d7c:	01d72823          	sw	t4,16(a4)
 d80:	01c72a23          	sw	t3,20(a4)
 d84:	00672c23          	sw	t1,24(a4)
 d88:	01072e23          	sw	a6,28(a4)
 d8c:	d314                	sw	a3,32(a4)
 d8e:	02470713          	addi	a4,a4,36
 d92:	02458593          	addi	a1,a1,36
 d96:	faf76ce3          	bltu	a4,a5,d4e <memcpy+0x90>
 d9a:	b7a9                	j	ce4 <memcpy+0x26>

00000d9c <memset>:
 d9c:	433d                	li	t1,15
 d9e:	872a                	mv	a4,a0
 da0:	02c37363          	bgeu	t1,a2,dc6 <memset+0x2a>
 da4:	00f77793          	andi	a5,a4,15
 da8:	efbd                	bnez	a5,e26 <memset+0x8a>
 daa:	e5ad                	bnez	a1,e14 <memset+0x78>
 dac:	ff067693          	andi	a3,a2,-16
 db0:	8a3d                	andi	a2,a2,15
 db2:	96ba                	add	a3,a3,a4
 db4:	c30c                	sw	a1,0(a4)
 db6:	c34c                	sw	a1,4(a4)
 db8:	c70c                	sw	a1,8(a4)
 dba:	c74c                	sw	a1,12(a4)
 dbc:	0741                	addi	a4,a4,16
 dbe:	fed76be3          	bltu	a4,a3,db4 <memset+0x18>
 dc2:	e211                	bnez	a2,dc6 <memset+0x2a>
 dc4:	8082                	ret
 dc6:	40c306b3          	sub	a3,t1,a2
 dca:	068a                	slli	a3,a3,0x2
 dcc:	00000297          	auipc	t0,0x0
 dd0:	9696                	add	a3,a3,t0
 dd2:	00a68067          	jr	10(a3)
 dd6:	00b70723          	sb	a1,14(a4)
 dda:	00b706a3          	sb	a1,13(a4)
 dde:	00b70623          	sb	a1,12(a4)
 de2:	00b705a3          	sb	a1,11(a4)
 de6:	00b70523          	sb	a1,10(a4)
 dea:	00b704a3          	sb	a1,9(a4)
 dee:	00b70423          	sb	a1,8(a4)
 df2:	00b703a3          	sb	a1,7(a4)
 df6:	00b70323          	sb	a1,6(a4)
 dfa:	00b702a3          	sb	a1,5(a4)
 dfe:	00b70223          	sb	a1,4(a4)
 e02:	00b701a3          	sb	a1,3(a4)
 e06:	00b70123          	sb	a1,2(a4)
 e0a:	00b700a3          	sb	a1,1(a4)
 e0e:	00b70023          	sb	a1,0(a4)
 e12:	8082                	ret
 e14:	0ff5f593          	andi	a1,a1,255
 e18:	00859693          	slli	a3,a1,0x8
 e1c:	8dd5                	or	a1,a1,a3
 e1e:	01059693          	slli	a3,a1,0x10
 e22:	8dd5                	or	a1,a1,a3
 e24:	b761                	j	dac <memset+0x10>
 e26:	00279693          	slli	a3,a5,0x2
 e2a:	00000297          	auipc	t0,0x0
 e2e:	9696                	add	a3,a3,t0
 e30:	8286                	mv	t0,ra
 e32:	fa8680e7          	jalr	-88(a3)
 e36:	8096                	mv	ra,t0
 e38:	17c1                	addi	a5,a5,-16
 e3a:	8f1d                	sub	a4,a4,a5
 e3c:	963e                	add	a2,a2,a5
 e3e:	f8c374e3          	bgeu	t1,a2,dc6 <memset+0x2a>
 e42:	b7a5                	j	daa <memset+0xe>

00000e44 <main>:

int main(){
 e44:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e48:	0c000613          	li	a2,192
 e4c:	00000597          	auipc	a1,0x0
 e50:	20058593          	addi	a1,a1,512 # 104c <__DTOR_END__+0xc0>
 e54:	0068                	addi	a0,sp,12
int main(){
 e56:	42112623          	sw	ra,1068(sp)
 e5a:	42812423          	sw	s0,1064(sp)
 e5e:	42912223          	sw	s1,1060(sp)
 e62:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
 e66:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e6a:	3d91                	jal	cbe <memcpy>
    resultkon[0] = 0xaaaaaaa0;
 e6c:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
 e70:	00000417          	auipc	s0,0x0
 e74:	29c40413          	addi	s0,s0,668 # 110c <_edata>
    keys = generate_keys(N, p, q);
 e78:	06500613          	li	a2,101
 e7c:	458d                	li	a1,3
 e7e:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
 e82:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
 e84:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
 e88:	3a9d                	jal	7fe <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
 e8a:	4781                	li	a5,0
 e8c:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
 e8e:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
 e92:	00f506b3          	add	a3,a0,a5
 e96:	4290                	lw	a2,0(a3)
 e98:	1314                	addi	a3,sp,416
 e9a:	96be                	add	a3,a3,a5
 e9c:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
 e9e:	0791                	addi	a5,a5,4
 ea0:	fee799e3          	bne	a5,a4,e92 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
 ea4:	1cd8                	addi	a4,sp,628
 ea6:	1a850793          	addi	a5,a0,424
 eaa:	27c50693          	addi	a3,a0,636
 eae:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
 eb0:	4390                	lw	a2,0(a5)
 eb2:	0791                	addi	a5,a5,4
 eb4:	0711                	addi	a4,a4,4
 eb6:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
 eba:	fed79be3          	bne	a5,a3,eb0 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
 ebe:	01f8                	addi	a4,sp,204
 ec0:	35050793          	addi	a5,a0,848
 ec4:	42450613          	addi	a2,a0,1060
 ec8:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
 eca:	438c                	lw	a1,0(a5)
 ecc:	0791                	addi	a5,a5,4
 ece:	0711                	addi	a4,a4,4
 ed0:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
 ed4:	fec79be3          	bne	a5,a2,eca <main+0x86>
 ed8:	06b0                	addi	a2,sp,840
 eda:	4fc50513          	addi	a0,a0,1276
 ede:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
 ee0:	4398                	lw	a4,0(a5)
 ee2:	0791                	addi	a5,a5,4
 ee4:	0611                	addi	a2,a2,4
 ee6:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
 eea:	fea79be3          	bne	a5,a0,ee0 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
 eee:	bbbbc4b7          	lui	s1,0xbbbbc
 ef2:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 ef6:	8742                	mv	a4,a6
 ef8:	0070                	addi	a2,sp,12
 efa:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
 efe:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f02:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
 f06:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f08:	36e5                	jal	af0 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
 f0a:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
 f0c:	ccccd4b7          	lui	s1,0xccccd
 f10:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f14:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
 f16:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
 f18:	458d                	li	a1,3
 f1a:	874a                	mv	a4,s2
 f1c:	34810813          	addi	a6,sp,840
 f20:	1314                	addi	a3,sp,416
 f22:	06500613          	li	a2,101
 f26:	03500513          	li	a0,53
 f2a:	39a9                	jal	b84 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
 f2c:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
 f30:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
 f34:	c004                	sw	s1,0(s0)
 f36:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
 f38:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
 f3c:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
 f40:	0070                	addi	a2,sp,12
 f42:	00f506b3          	add	a3,a0,a5
 f46:	963e                	add	a2,a2,a5
 f48:	4210                	lw	a2,0(a2)
 f4a:	4294                	lw	a3,0(a3)
 f4c:	02d60363          	beq	a2,a3,f72 <main+0x12e>
            resultkon[0] = 0xBABABABA;
 f50:	babac7b7          	lui	a5,0xbabac
 f54:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
 f58:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
 f5a:	42c12083          	lw	ra,1068(sp)
 f5e:	42812403          	lw	s0,1064(sp)
 f62:	42412483          	lw	s1,1060(sp)
 f66:	42012903          	lw	s2,1056(sp)
 f6a:	4501                	li	a0,0
 f6c:	43010113          	addi	sp,sp,1072
 f70:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
 f72:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
 f74:	0791                	addi	a5,a5,4
 f76:	fcb795e3          	bne	a5,a1,f40 <main+0xfc>
 f7a:	b7c5                	j	f5a <main+0x116>

00000f7c <__CTOR_LIST__>:
	...

00000f84 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00000f8c <.rodata>:
     f8c:	0001                	nop
     f8e:	0000                	unimp
     f90:	ffff                	0xffff
     f92:	ffff                	0xffff
     f94:	0000                	unimp
     f96:	0000                	unimp
     f98:	0001                	nop
     f9a:	0000                	unimp
     f9c:	ffff                	0xffff
     f9e:	ffff                	0xffff
     fa0:	0001                	nop
     fa2:	0000                	unimp
     fa4:	ffff                	0xffff
     fa6:	ffff                	0xffff
     fa8:	0000                	unimp
     faa:	0000                	unimp
     fac:	0001                	nop
     fae:	0000                	unimp
     fb0:	0001                	nop
     fb2:	0000                	unimp
     fb4:	0000                	unimp
     fb6:	0000                	unimp
     fb8:	ffff                	0xffff
     fba:	ffff                	0xffff
     fbc:	0001                	nop
     fbe:	0000                	unimp
     fc0:	ffff                	0xffff
     fc2:	ffff                	0xffff
     fc4:	0001                	nop
     fc6:	0000                	unimp
     fc8:	0000                	unimp
     fca:	0000                	unimp
     fcc:	0001                	nop
     fce:	0000                	unimp
     fd0:	0001                	nop
     fd2:	0000                	unimp
     fd4:	0000                	unimp
     fd6:	0000                	unimp
     fd8:	ffff                	0xffff
     fda:	ffff                	0xffff
     fdc:	0001                	nop
     fde:	0000                	unimp
     fe0:	ffff                	0xffff
     fe2:	ffff                	0xffff
     fe4:	0001                	nop
     fe6:	0000                	unimp
     fe8:	0000                	unimp
     fea:	0000                	unimp
     fec:	0001                	nop
     fee:	0000                	unimp
     ff0:	0001                	nop
     ff2:	0000                	unimp
     ff4:	0000                	unimp
     ff6:	0000                	unimp
     ff8:	0001                	nop
     ffa:	0000                	unimp
     ffc:	ffff                	0xffff
     ffe:	ffff                	0xffff
    1000:	0001                	nop
    1002:	0000                	unimp
    1004:	ffff                	0xffff
    1006:	ffff                	0xffff
    1008:	0000                	unimp
    100a:	0000                	unimp
    100c:	0001                	nop
    100e:	0000                	unimp
    1010:	ffff                	0xffff
    1012:	ffff                	0xffff
    1014:	0000                	unimp
    1016:	0000                	unimp
    1018:	0001                	nop
    101a:	0000                	unimp
    101c:	ffff                	0xffff
    101e:	ffff                	0xffff
    1020:	0001                	nop
    1022:	0000                	unimp
    1024:	ffff                	0xffff
    1026:	ffff                	0xffff
    1028:	0000                	unimp
    102a:	0000                	unimp
    102c:	0001                	nop
    102e:	0000                	unimp
    1030:	0001                	nop
    1032:	0000                	unimp
    1034:	0000                	unimp
    1036:	0000                	unimp
    1038:	ffff                	0xffff
    103a:	ffff                	0xffff
    103c:	0001                	nop
    103e:	0000                	unimp
    1040:	ffff                	0xffff
    1042:	ffff                	0xffff
    1044:	0001                	nop
    1046:	0000                	unimp
    1048:	0000                	unimp
    104a:	0000                	unimp
    104c:	0001                	nop
    104e:	0000                	unimp
    1050:	0001                	nop
    1052:	0000                	unimp
    1054:	0002                	c.slli64	zero
    1056:	0000                	unimp
    1058:	0001                	nop
    105a:	0000                	unimp
    105c:	0001                	nop
    105e:	0000                	unimp
    1060:	0001                	nop
    1062:	0000                	unimp
    1064:	0001                	nop
    1066:	0000                	unimp
    1068:	0002                	c.slli64	zero
    106a:	0000                	unimp
    106c:	0001                	nop
    106e:	0000                	unimp
    1070:	0001                	nop
    1072:	0000                	unimp
    1074:	0000                	unimp
    1076:	0000                	unimp
    1078:	0001                	nop
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	0000                	unimp
    1080:	0002                	c.slli64	zero
    1082:	0000                	unimp
    1084:	0001                	nop
    1086:	0000                	unimp
    1088:	0000                	unimp
    108a:	0000                	unimp
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0002                	c.slli64	zero
    1092:	0000                	unimp
    1094:	0000                	unimp
    1096:	0000                	unimp
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	0001                	nop
    109e:	0000                	unimp
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	0000                	unimp
    10aa:	0000                	unimp
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	0000                	unimp
    10b6:	0000                	unimp
    10b8:	0002                	c.slli64	zero
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	0002                	c.slli64	zero
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	0000                	unimp
    10ca:	0000                	unimp
    10cc:	0001                	nop
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0002                	c.slli64	zero
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	0002                	c.slli64	zero
    10ea:	0000                	unimp
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0002                	c.slli64	zero
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

0000110c <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    110c:	bebe                	fsd	fa5,376(sp)
    110e:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001110 <_bss_start>:
	...

00001368 <product2>:
	...

000015c0 <result>:
	...

00001818 <ti_2>:
	...

000019a8 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	00001c87          	0x1c87
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05c9                	addi	a1,a1,18
       e:	0000                	unimp
      10:	300c                	fld	fa1,32(s0)
      12:	18000003          	lb	zero,384(zero) # 180 <polymult+0xa8>
      16:	0005                	c.nop	1
      18:	1800                	addi	s0,sp,48
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0426                	slli	s0,s0,0x9
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	2408                	fld	fa0,8(s0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0445                	addi	s0,s0,17
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002bc07          	fld	fs8,0(t0) # e2a <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7d04                	flw	fs1,56(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0304                	addi	s1,sp,384
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	d806                	sw	ra,48(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4606                	lw	a2,64(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6906                	flw	fs2,64(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	02f9                	addi	t0,t0,30
    asm volatile(
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
    for(i=0;i<(length/3);i++) {
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0220                	addi	s0,sp,264
    asm volatile(
      c0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
}
      c8:	0000                	unimp
    asm volatile(
      ca:	2c09                	jal	2dc <polymult2+0x32>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
    for(i=0;i<(length/3);i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
    int line[size_b][size_a + size_b];
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	0502                	c.slli64	a0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
    int line[size_b][size_a + size_b];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	0a0c                	addi	a1,sp,272
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
    int pola[size_a];
      fa:	0000                	unimp
      fc:	0004                	0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fe:	7506                	flw	fa0,96(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
    int line[size_b][size_a + size_b];
     10a:	040d                	addi	s0,s0,3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10c:	9c06                	add	s8,s8,ra
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     112:	1916                	slli	s2,s2,0x25
    int pola[size_a];
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
    int line[size_b][size_a + size_b];
     118:	0806                	slli	a6,a6,0x1
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
    int pola[size_a];
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    int polb[size_b];
     122:	0000                	unimp
     124:	d806                	sw	ra,48(sp)
     126:	0001                	nop
    int pola[size_a];
     128:	0400                	addi	s0,sp,512
    int polb[size_b];
     12a:	01181b23          	sh	a7,22(a6)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	0000                	unimp
    int pola[size_a];
     130:	e90e                	fsw	ft3,144(sp)
     132:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	1800                	addi	s0,sp,48
    int line[size_b][size_a + size_b];
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int polb[size_b];
     13a:	0001                	nop
            line[i][j] = 0;
     13c:	0c00                	addi	s0,sp,528
     13e:	0496                	slli	s1,s1,0x5
     140:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
            product[j] = 0;
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
    for (i = 0; i < size_b; ++i){
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
    array_equ(pola,a,size_a);
     154:	0400                	addi	s0,sp,512
     156:	de0c                	sw	a1,56(a2)
     158:	0004                	0x4
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	01d2                	slli	gp,gp,0x14
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
    array_mod(pola,mod,size_a);
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	3d0c                	fld	fa1,56(a0)
    array_equ(polb,b,size_b);
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
    array_mod(polb,mod,size_b);
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
    if(star_mult == 1){
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	100e                	c.slli	zero,0x23
        for (j = size_b -1; j >= 0; j = j-1){
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
            product[j] = 0;
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
            line[i][j] = 0;
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
            product[j] = 0;
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	0000                	unimp
     1ba:	550c                	lw	a1,40(a0)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     1c0:	005d093f 0c040000 	0xc040000005d093f
        for(j = 0; j < size_a + size_b -1; ++j){
     1c8:	0122                	slli	sp,sp,0x8
     1ca:	0000                	unimp
    if(star_mult == 1){
     1cc:	4004                	lw	s1,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0800                	addi	s0,sp,16
    for (i = 0; i < size_b; ++i){
     1d4:	e50c                	fsw	fa1,8(a0)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03a2                	slli	t2,t2,0x8
     1e4:	0000                	unimp
    array_mod(product,mod,(size_a+size_b-1));
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	5a0c                	lw	a1,48(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
}
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0642                	slli	a2,a2,0x10
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	4f0c                	lw	a1,24(a4)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	000006a7          	0x6a7
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0002                	c.slli64	zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     230:	0c00                	addi	s0,sp,528
     232:	01b8                	addi	a4,sp,200
     234:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
        for (j = size_b -1; j >= 0; j = j-1){
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0580                	addi	s0,sp,704
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	1201                	addi	tp,tp,-32
     25a:	0000015b          	0x15b
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
        for (j = size_b -1; j >= 0; j = j-1){
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
            line[i][j] = line[i][j] % mod;
     26a:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
            line[i][j] = line[i][j] % mod;
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f bb11 0003      	0x3bb11001f
    for (i = 0; i < size_b; ++i){
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
        for(j = 0; j < size_a + size_b -1; ++j){
     286:	960c                	0x960c
            product[j] += line[i][j];
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult2+0x6>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
     294:	04ae                	slli	s1,s1,0xb
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
        for(i = 0; i < size_b; ++i){
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
    for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	cd0c                	sw	a1,24(a0)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
        for(i = 0; i < size_b; ++i){
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	0000                	unimp
    int line[size_b][size_a + size_b];
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0131                	addi	sp,sp,12
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
    int line[size_b][size_a + size_b];
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
    int line[size_b][size_a + size_b];
     2d8:	590e                	lw	s2,224(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
    int line[size_b][size_a + size_b];
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_mod+0x6>
    int pola[size_a];
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
    int line[size_b][size_a + size_b];
     2ec:	0011                	c.nop	4
    int pola[size_a];
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    int polb[size_b];
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
    int pola[size_a];
     2f8:	067c                	addi	a5,sp,780
    int polb[size_b];
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
    int line[size_b][size_a + size_b];
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     306:	800e                	c.mv	zero,gp
    int pola[size_a];
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
    int polb[size_b];
     30c:	ba04                	fsd	fs1,48(a2)
    for (i = 0; i < size_b; ++i){
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
            product2[j] = 0;
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
    array_equ(pola,a,size_a);
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
    array_equ(polb,b,size_b);
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
    if(star_mult == 1){
     338:	0154                	addi	a3,sp,132
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
     344:	4f0c                	lw	a1,24(a4)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
            product2[j] = 0;
     352:	625f 0066 c004      	0xc0040066625f
            line[i][j] = 0;
     358:	d811                	beqz	s0,26c <polymult+0x194>
     35a:	0002                	c.slli64	zero
            product2[j] = 0;
     35c:	1000                	addi	s0,sp,32
     35e:	8e0c                	0x8e0c
        for(j = 0; j < size_a + size_b -1; ++j){
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    for (i = 0; i < size_b; ++i){
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	000c                	0xc
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	0c20                	addi	s0,sp,536
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	00000353          	fadd.s	ft6,ft0,ft0,rne
     38a:	cc04                	sw	s1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	f71d                	bnez	a4,2ba <polymult2+0x10>
     38e:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     390:	2400                	fld	fs0,8(s0)
     392:	120c                	addi	a1,sp,288
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
    for(i=0;i<size_b;++i){
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06c1                	addi	a3,a3,16
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0xd0>
     3a8:	0006                	c.slli	zero,0x1
        for(j=0;j<size_a+size_b-1;++j){
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b0:	0400                	addi	s0,sp,512
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xd6>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c6:	72755f0f          	0x72755f0f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0116                	slli	sp,sp,0x5
            product2[j] += line[i][j];
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
        for(j=0;j<size_a+size_b-1;++j){
     3da:	3b11                	jal	ee <polymult+0x16>
     3dc:	0006                	c.slli	zero,0x1
            product2[j] += line[i][j];
     3de:	4000                	lw	s0,0(s0)
     3e0:	8c0c                	0x8c0c
     3e2:	0006                	c.slli	zero,0x1
        for(j=0;j<size_a+size_b-1;++j){
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    for(i=0;i<size_b;++i){
     3ec:	6c5f0f43          	0x6c5f0f43
}
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x5e>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	6a0c                	flw	fa1,16(a2)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	0191                	addi	gp,gp,4
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
    int v[size_N];
     41a:	046712e3          	bne	a4,t1,c5e <reset_handler+0x12>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	0000                	unimp
    int v[size_N];
     420:	0c54                	addi	a3,sp,532
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     422:	032a                	slli	t1,t1,0xa
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	880c                	0x880c
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
    int v[size_N];
     43c:	0460                	addi	s0,sp,524
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     43e:	0000                	unimp
    int v[size_N];
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
    int q[size_N];
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
    int num_temp[size_N];
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int denum_temp[size_D];
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
    int num_temp[size_N];
     458:	010a                	slli	sp,sp,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     45a:	0000                	unimp
    int denum_temp[size_D];
     45c:	bb15                	j	190 <polymult+0xb8>
     45e:	0005                	c.nop	1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     460:	1500                	addi	s0,sp,672
    int v[size_N];
     462:	005d                	c.nop	23
     464:	0000                	unimp
    array_equ(num_temp,num,size_N);
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int denum_temp[size_D];
     472:	0004e617          	auipc	a2,0x4e
    array_mod(num_temp,mod,size_N);
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
    int denum_temp[size_D];
     47e:	0005                	c.nop	1
    array_equ(denum_temp,denum,size_D);
     480:	1800                	addi	s0,sp,48
     482:	043e                	slli	s0,s0,0xf
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
    array_mod(denum_temp,mod,size_D);
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
    for (i = 0; i < size_N; ++i){
     490:	00000163          	beqz	zero,492 <polydiv+0x78>
     494:	6c04                	flw	fs1,24(s0)
    for (i = size_D-1; i >= 0; i = i-1){
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	0231                	addi	tp,tp,12
     4a0:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
        if ( (b_N*u)%mod == 1 )
     4a6:	000006a7          	0x6a7
    for (u = 0; u < mod; ++u){
     4aa:	1808                	addi	a0,sp,48
     4ac:	01e1                	addi	gp,gp,24
     4ae:	0000                	unimp
        q[i] = 0;
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
        v[i] = 0;
     4b8:	180c                	addi	a1,sp,48
        q[i] = 0;
     4ba:	04a9                	addi	s1,s1,10
     4bc:	0000                	unimp
        v[i] = 0;
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
    for (i = 0; i < size_N; ++i){
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        if( denum_temp[i] != 0 )
     4c6:	1810                	addi	a2,sp,48
    for (i = size_D-1; i >= 0; i = i-1){
     4c8:	001f 0000 6f04      	0x6f040000001f
        if ( (b_N*u)%mod == 1 )
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
    for (u = 0; u < mod; ++u){
     4d6:	04c5                	addi	s1,s1,17
     4d8:	0000                	unimp
        if( num_temp[i] != 0 )
     4da:	7204                	flw	fs1,32(a2)
    for (i = size_N-1; i >= 0; i = i-1){
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
     4e4:	000004b3          	add	s1,zero,zero
     4e8:	7304                	flw	fs1,32(a4)
    while (d >= d2){
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
    array_equ(result,q,size_N);
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	03cd                	addi	t2,t2,19
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
    for(i = size_N; i < (2*size_N); ++i){
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
        result[i] = num_temp[i-size_N];
     500:	000004bb          	0x4bb
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
    for(i = size_N; i < (2*size_N); ++i){
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
}
     50c:	183c                	addi	a5,sp,56
     50e:	02f1                	addi	t0,t0,28
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0206                	slli	tp,tp,0x1
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	000006db          	0x6db
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
        v[(d-d2)] = u*r_d;
     536:	1848                	addi	a0,sp,52
     538:	03f4                	addi	a3,sp,460
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    array_mod(v,mod,size_N);
     544:	184c                	addi	a1,sp,52
     546:	0239                	addi	tp,tp,14
        v[(d-d2)] = u*r_d;
     548:	0000                	unimp
    array_mod(v,mod,size_N);
     54a:	8004                	0x8004
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0189                	addi	gp,gp,2
     556:	0000                	unimp
     558:	8104                	0x8104
    array_mod(product,mod,size_N);
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
        for (i = 0; i < size_N; ++i){
     562:	00000437          	lui	s0,0x0
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    array_mod(num_temp,mod,size_N);
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	000003bb          	0x3bb
        for(i = 0; i < size_N; ++i){
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
    array_mod(q,mod,size_N);
     57c:	0148                	addi	a0,sp,132
     57e:	cf19                	beqz	a4,59c <polydiv+0x182>
     580:	0002                	c.slli64	zero
        for (i = size_N-1; i >= 0; i = i-1){
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	0682                	c.slli64	a3
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
            num_temp[i] = num_temp[i] - product[i];
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	4719                	li	a4,6
        for (i = 0; i < size_N; ++i){
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
            num_temp[i] = num_temp[i] - product[i];
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
        for (i = 0; i < size_N; ++i){
     5a8:	e000                	fsw	fs0,0(s0)
            q[i] = q[i] + v[i];
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	012c                	addi	a1,sp,136
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
        for(i = 0; i < size_N; ++i){
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
            q[i] = q[i] + v[i];
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
        for(i = 0; i < size_N; ++i){
     5be:	0005                	c.nop	1
            if( num_temp[i] != 0 )
     5c0:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0801                	addi	a6,a6,0
     5c4:	042d                	addi	s0,s0,11
            v[i] = 0;
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
        for (i = 0; i < size_N; ++i){
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
        result[i] = num_temp[i-size_N];
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xf0>
     5e8:	0005                	c.nop	1
    int ri_2[size]; // MX-ring poly, a
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
    int ri_1[size]; // f-random poly, f[N] = 0, b
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
    int ri[size];
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
    int ti_1[size]; // ti_1[0] = 1
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
    int ti[size];
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
    int qi_1[size];
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
    int temp[size];
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
    int ri_2[size]; // MX-ring poly, a
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    for (i = 0; i < size; ++i) {
     644:	690a                	flw	fs2,128(sp)
        ti_2[i] = 0;
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
    for (i = 0; i < size; ++i) {
     64e:	0000                	unimp
     650:	0000065b          	0x65b
    array_equ(ri_2,polyR,size);
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
    array_equ(ri_1,polyf,size);
     65a:	0500                	addi	s0,sp,640
     65c:	046e                	slli	s0,s0,0x1b
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
    ti_1[0] = 1;
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	4c1a                	lw	s8,132(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
            ti[i] = ti_2[i] - temp[i];
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	9618                	0x9618
    array_mod(ri_2,mod,size);
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x284>
    array_mod(ri_1,mod,size);
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	9518                	0x9518
     686:	0002                	c.slli64	zero
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	6818                	flw	fa4,16(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
    array_mod(temp,mod,size);
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	000004f7          	0x4f7
    array_equ(qi_1,res1,size);
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
    array_mod(qi_1,mod,size);
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	04f1                	addi	s1,s1,28
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	00000597          	auipc	a1,0x0
    array_equ(temp,res2,size);
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
    array_mod(temp,mod,size);
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    array_mod(ti,mod,size);
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
array_equ(ri_2,ri_1,size);
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	2b18                	fld	fa4,16(a4)
array_equ(ri_1,ri,size);
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
array_equ(ti_2,ti_1,size);
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	7318                	flw	fa4,32(a4)
     710:	0005                	c.nop	1
array_equ(ti_1,ti,size);
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
        controlR = 0;
     71a:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     71c:	e418                	fsw	fa4,8(s0)
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
    while (controlR != 0) {
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
        for (j = 0; j < mod; ++j) {
     726:	0008                	0x8
            if (((ri_2[0] * j) % mod) == 1)
     728:	0800                	addi	s0,sp,16
        for (j = 0; j < mod; ++j) {
     72a:	b218                	fsd	fa4,32(a2)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
        for (i = 0; i < N + 1; ++i) {
     736:	2400                	fld	fs0,8(s0)
     738:	f118                	fsw	fa4,32(a0)
    }
     73a:	0001                	nop
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	9118                	0x9118
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	c818                	sw	a4,16(s0)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	9c18                	0x9c18
        ti_2[i] = 0;
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
        ti_1[i] = 0;
     76c:	0000                	unimp
        ti_2[i] = 0;
     76e:	6800                	flw	fs0,16(s0)
     770:	cd18                	sw	a4,24(a0)
        ti_1[i] = 0;
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     776:	fe16028f          	0xfe16028f
            ri[i - (N + 1)] = res[i];
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
            ri[i - (N + 1)] = res[i];
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	7800                	flw	fs0,48(s0)
            temp[i] = ri_2[i] - ri[i];
     78c:	7218                	flw	fa4,32(a2)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	d818                	sw	a4,48(s0)
        for (i = 0; i < N + 1; ++i) {
     79c:	0002                	c.slli64	zero
            temp[i] = ri_2[i] - ri[i];
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
        for (i = 0; i < N + 1; ++i) {
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     7a6:	8800                	0x8800
     7a8:	a918                	fsd	fa4,16(a0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
        for (i = 0; i < N + 1; ++i) {
     7b6:	aa18                	fsd	fa4,16(a2)
            ti[i] = ti_2[i] - temp[i];
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
              qi_1[i] = 0;
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
            controlR += ri[i];
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
              qi_1[i] = 0;
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d0:	ac00                	fsd	fs0,24(s0)
            controlR += ri[i];
     7d2:	9918                	0x9918
        for (i = 0; i < N + 1; ++i) {
     7d4:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     7e6:	fe160297          	auipc	t0,0xfe160
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	3c18                	fld	fa4,56(s0)
int* generate_keys(int N, int p, int q){
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	0389                	addi	t2,t2,2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	1800                	addi	s0,sp,48
     854:	0374                	addi	a3,sp,396
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x136>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	e61d                	bnez	a2,8ba <generate_keys+0xbc>
     88e:	0004                	0x4
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	0692                	slli	a3,a3,0x4
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
    int polyR[N+1];
     8be:	000008b7          	lui	a7,0x0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	cd1f 0008 1500      	0x15000008cd1f
    int polyR[N+1];
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
    polyR[N] = 1;
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	bd20                	fsd	fs0,120(a0)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05b6                	slli	a1,a1,0xd
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
     91a:	c321                	beqz	a4,95a <generate_keys+0x15c>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	7322                	flw	ft6,40(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
    polyR[0] = -1;
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
    for(i = 1; i < N; ++i){
     944:	1110                	addi	a2,sp,160
     946:	0000                	unimp
     948:	3f22                	fld	ft10,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for (i = N; i < 55; ++i ){
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
    for(i = 0; i < N; ++i){
     954:	0305                	addi	t1,t1,1
        random_keys[i] = f[i];
     956:	1368                	addi	a0,sp,428
     958:	0000                	unimp
     95a:	f222                	fsw	fs0,36(sp)
     95c:	0002                	c.slli64	zero
    for(i = 0; i < N; ++i){
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     966:	0305                	addi	t1,t1,1
     968:	15c0                	addi	s0,sp,740
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
        random_keys[i] = g[i-N];
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
    for(i = N; i < (2*N); ++i){
     976:	0069                	c.nop	26
     978:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     97a:	1f220063          	beq	tp,s2,b5a <ntru_encyrpt+0x6a>
     97e:	0004                	0x4
    fp = ext_euclid(polyR, f, (N+1), p);
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1818                	addi	a4,sp,48
    for(i = (2*N); i < (3*N); ++i){
     98c:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
    for(i = (2*N); i < (3*N); ++i){
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
    fq = ext_euclid(polyR, f, (N+1), q);
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
    for(i = (3*N); i < (4*N); ++i){
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	0019a803          	lw	a6,1(s3)
        random_keys[i] = fq[i-(3*N)];
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
    for(i = 0; i < (2*N-1); ++i){
     9c4:	0000                	unimp
     9c6:	2724                	fld	fs1,72(a4)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	110c                	addi	a1,sp,160
     9d6:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9d8:	e025                	bnez	s0,a38 <generate_keys+0x23a>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	5d0502a7          	0x5d0502a7
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e2:	0000                	unimp
     9e4:	4400                	lw	s0,8(s0)
     9e6:	000e                	c.slli	zero,0x3
     9e8:	3800                	fld	fs0,48(s0)
    for(i = (4*N); i < (5*N); ++i){
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	2600000b          	0x2600000b
        random_keys[i] = polyR[i-(5*N)];
     9f4:	03df 0000 a801      	0xa801000003df
     9fa:	0a02                	c.slli64	s4
    for(i = (5*N); i < (6*N+1); ++i){
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x214>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
}
     a08:	0100                	addi	s0,sp,128
     a0a:	02a9                	addi	t0,t0,10
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0314                	addi	a3,sp,384
     a18:	0000                	unimp
     a1a:	aa01                	j	b2a <ntru_encyrpt+0x3a>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x236>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	5d0902ab          	0x5d0902ab
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	02ac                	addi	a1,sp,328
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02ad                	addi	t0,t0,11
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
        polyR[i] = 0;
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9a28                	0x9a28
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	690902af          	0x690902af
    for(i = 1; i < N; ++i){
     a54:	0300000b          	0x300000b
        f[i] = 0;
     a58:	dc91                	beqz	s1,974 <generate_keys+0x176>
     a5a:	055e2677          	0x55e2677
     a5e:	0000                	unimp
     a60:	b001                	j	260 <polymult+0x188>
     a62:	0902                	c.slli64	s2
        g[i] = 0;
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
    for (i = N; i < 55; ++i ){
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     a72:	02b1                	addi	t0,t0,12
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
    for(i = 0; i < N; ++i){
     a82:	b201                	j	382 <polymult2+0xd8>
        random_keys[i] = f[i];
     a84:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     a86:	0b9d                	addi	s7,s7,7
        random_keys[i] = g[i-N];
     a88:	0000                	unimp
     a8a:	8926                	mv	s2,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	af0902b3          	0xaf0902b3
    for(i = N; i < (2*N); ++i){
     a94:	1200000b          	0x1200000b
        random_keys[i] = fp[i-(2*N)];
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0241                	addi	tp,tp,16
     a9e:	0000                	unimp
     aa0:	b401                	j	4a0 <polydiv+0x86>
    for(i = (2*N); i < (3*N); ++i){
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     aa8:	fe26                	fsw	fs1,60(sp)
     aaa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     aae:	02b5                	addi	t0,t0,13
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x1b4>
     ab2:	6500000b          	0x6500000b
    for(i = (3*N); i < (4*N); ++i){
     ab6:	0001                	nop
        random_keys[i] = fq[i-(3*N)];
     ab8:	2a00                	fld	fs0,16(a2)
    for(i = (3*N); i < (4*N); ++i){
     aba:	0069                	c.nop	26
        fg[i] = fg[i]*p;
     abc:	b601                	j	5bc <polydiv+0x1a2>
    for(i = 0; i < (2*N-1); ++i){
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
        fg[i] = fg[i]*p;
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000e6c2b          	0xe6c2b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     acc:	7400                	flw	fs0,40(s0)
     ace:	001c                	0x1c
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    for(i = (4*N); i < (5*N); ++i){
     ad8:	77dc9103          	lh	sp,1917(s9)
        random_keys[i] = polyR[i-(5*N)];
     adc:	012c                	addi	a1,sp,136
     ade:	4c03055b          	0x4c03055b
     ae2:	0010                	0x10
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	00c0                	addi	s0,sp,68
        random_keys[i] = polyR[i-(5*N)];
     aec:	000e8a2b          	0xe8a2b
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af0:	9500                	0x9500
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     afe:	2c35                	jal	d3a <memcpy+0x7c>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <generate_keys+0x4>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0c:	0f0a                	slli	t5,t5,0x2
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x246>
     b2a:	5e012c77          	0x5e012c77
    for(i = 0; i < 48; ++i){
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x1ff>
        temp[i] = temp[i] + message[i];
     b32:	2d00                	fld	fs0,24(a0)
     b34:	0f2c                	addi	a1,sp,920
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
    for(i = 0; i < 48; ++i){
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memset+0x68>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra) # 114f <_bss_start+0x3f>
     b54:	012c                	addi	a1,sp,136
    for(i = (2*N); i < (3*N); ++i){
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
}
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     b7e:	00000b8b          	0xb8b
    for(i = (2*N); i < (3*N); ++i){
     b82:	692e                	flw	fs2,200(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba6:	692e                	flw	fs2,200(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
    for(i = (2*N); i < ((2*N)+N); ++i){
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
        if(a2[i] <= q/2)
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
    for (i = 0; i < N; ++i){
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c0                	addi	s0,sp,196
     be8:	0000                	unimp
     bea:	7b01                	lui	s6,0xfffe0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <ntru_deceypt+0x80>
     bf2:	0b84                	addi	s1,sp,464
     bf4:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     bf6:	00c4                	addi	s1,sp,68
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
}
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	5d17027b          	0x5d17027b
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
        a2[i-(2*N)] = a2[i];
     c12:	7b01                	lui	s6,0xfffe0
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c22:	5d25027b          	0x5d25027b
        if(a2[i] <= q/2)
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
            a2[i] = (-1)*(q-a2[i]);
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
    for (i = 0; i < N; ++i){
     c30:	0000                	unimp
     c32:	7b01                	lui	s6,0xfffe0
     c34:	2d02                	fld	fs10,0(sp)
        c2[i-(2*N)] = c2[i];
     c36:	00000b63          	beqz	zero,c4c <reset_handler>
     c3a:	0000028b          	0x28b
    for(i = (2*N); i < ((2*N)+N); ++i){
     c3e:	8931                	andi	a0,a0,12
     c40:	0005                	c.nop	1
        c2[i-(2*N)] = c2[i];
     c42:	0100                	addi	s0,sp,128
     c44:	6340027b          	0x6340027b
  jal x0, default_exc_handler
     c48:	b700000b          	0xb700000b
  mv  x1, x0
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
  mv  x2, x1
     c50:	03df 0000 7b01      	0x7b01000003df
  mv  x5, x1
     c56:	5402                	lw	s0,32(sp)
  mv  x6, x1
     c58:	00000b63          	beqz	zero,c6e <reset_handler+0x22>
  mv  x8, x1
     c5c:	02ee                	slli	t0,t0,0x1b
  mv  x9, x1
     c5e:	0000                	unimp
  mv x10, x1
     c60:	9a31                	andi	a2,a2,-20
  mv x11, x1
     c62:	0006                	c.slli	zero,0x1
  mv x12, x1
     c64:	0100                	addi	s0,sp,128
  mv x13, x1
     c66:	6366027b          	0x6366027b
  mv x15, x1
     c6a:	0f00000b          	0xf00000b
  mv x17, x1
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x1b8>
  mv x19, x1
     c72:	02ac                	addi	a1,sp,328
  mv x20, x1
     c74:	0000                	unimp
  mv x21, x1
     c76:	7d01                	lui	s10,0xfffe0
  mv x22, x1
     c78:	0a02                	c.slli64	s4
  mv x23, x1
     c7a:	00000b63          	beqz	zero,c90 <reset_handler+0x44>
  mv x25, x1
     c7e:	612a                	flw	ft2,136(sp)
  mv x26, x1
     c80:	0100                	addi	s0,sp,128
  mv x27, x1
     c82:	027e                	slli	tp,tp,0x1f
  mv x28, x1
     c84:	630a                	flw	ft6,128(sp)
  mv x29, x1
     c86:	4600000b          	0x4600000b
  mv x31, x1
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c8>
  la   x2, _stack_start
     c8e:	3261                	jal	616 <ext_euclid+0x2c>
     c90:	0100                	addi	s0,sp,128
     c92:	027f                	0x27f
  la x26, _bss_start
     c94:	630a                	flw	ft6,128(sp)
     c96:	5900000b          	0x5900000b
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c8>
  la x27, _bss_end
     c9e:	80010063          	beqz	sp,fffffc9e <_stack_start+0xfffefc9e>
     ca2:	0a02                	c.slli64	s4
  bge x26, x27, zero_loop_end
     ca4:	00000b63          	beqz	zero,cba <main_entry+0x8>
  sw x0, 0(x26)
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
  addi x26, x26, 4
     cac:	632a                	flw	ft6,136(sp)
  ble x26, x27, zero_loop
     cae:	0032                	c.slli	zero,0xc
     cb0:	8101                	c.srli64	a0
  addi x10, x0, 0
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <memcpy+0xc>
  addi x11, x0, 0
     cb8:	0395                	addi	t2,t2,5
  jal x1, main
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	0282                	c.slli64	t0
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult2+0x6>
     ccc:	0bba                	slli	s7,s7,0xe
     cce:	0000                	unimp
     cd0:	1796                	slli	a5,a5,0x25
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000bc82b          	0xbc82b
     cfc:	bd00                	fsd	fs0,56(a0)
     cfe:	0014                	0x14
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000bec2b          	0xbec2b
     d22:	9600                	0x9600
     d24:	43000017          	auipc	zero,0x43000
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x126>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0bf6                	slli	s7,s7,0x1d
     d46:	0000                	unimp
     d48:	14bd                	addi	s1,s1,-17
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	00065c2f          	0x65c2f
     d6a:	0100                	addi	s0,sp,128
     d6c:	0259                	addi	tp,tp,22
     d6e:	6306                	flw	ft6,64(sp)
     d70:	f000000b          	0xf000000b
     d74:	000a                	c.slli	zero,0x2
     d76:	9400                	0x9400
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	959c                	0x959c
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	5901                	li	s2,-32
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0259                	addi	tp,tp,22
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	039a                	slli	t2,t2,0x6
     da2:	0000                	unimp
     da4:	5901                	li	s2,-32
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memset+0x22>
     dac:	0000049b          	0x49b
     db0:	5e31                	li	t3,-20
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	0259                	addi	tp,tp,22
     db8:	6334                	flw	fa3,64(a4)
     dba:	c700000b          	0xc700000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	069a                	slli	a3,a3,0x6
     dc4:	0000                	unimp
     dc6:	5901                	li	s2,-32
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memset+0x44>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	9c29                	0x9c29
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	630a025b          	0x630a025b
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	025c                	addi	a5,sp,260
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	0369                	addi	t1,t1,26
     df0:	0000                	unimp
     df2:	5e01                	li	t3,-32
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	1b26                	slli	s6,s6,0x29
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	025f 630a 000b      	0xb630a025f
     e0a:	3500                	fld	fs0,40(a0)
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	6001                	0x6001
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	0548                	addi	a0,sp,644
     e1c:	0000                	unimp
     e1e:	000b182b          	0xb182b
     e22:	7400                	flw	fs0,40(s0)
     e24:	001c                	0x1c
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	0f8c                	addi	a1,sp,976
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0b2a                	slli	s6,s6,0xa
int main(){
     e44:	0000                	unimp
     e46:	0000190f          	0x190f
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	0084                	addi	s1,sp,64
     e54:	012c                	addi	a1,sp,136
int main(){
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
    resultkon[0] = 0xaaaaaaa0;
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e6a:	0082                	c.slli64	ra
    resultkon[0] = 0xaaaaaaa0;
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 562d      	0x562d0030015f
     e74:	bd00000b          	0xbd00000b
    keys = generate_keys(N, p, q);
     e78:	0014                	0x14
     e7a:	2c00                	fld	fs0,24(s0)
     e7c:	5b01                	li	s6,-32
     e7e:	7902                	flw	fs2,32(sp)
     e80:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xaaaaaaa0;
     e82:	5c01                	li	s8,-32
    resultkon[0] = 0xaaaaaaa1;
     e84:	8302                	jr	t1
     e86:	2c00                	fld	fs0,24(s0)
    keys = generate_keys(N, p, q);
     e88:	5d01                	li	s10,-32
    resultkon[0] = 0xaaaaaaa1;
     e8a:	7802                	flw	fa6,32(sp)
     e8c:	2c01                	jal	109c <__DTOR_END__+0x110>
    for(i = 0; i < N; ++i){
     e8e:	5e01                	li	t3,-32
     e90:	8202                	jr	tp
        secret_key_f[i] = keys[i];
     e92:	0000                	unimp
     e94:	2f00                	fld	fs0,24(a4)
     e96:	0000030b          	0x30b
     e9a:	0101                	addi	sp,sp,0
     e9c:	0602                	c.slli64	a2
    for(i = 0; i < N; ++i){
     e9e:	00000b63          	beqz	zero,eb4 <main+0x70>
     ea2:	07fe                	slli	a5,a5,0x1f
    for(i = N; i < (2*N); ++i){
     ea4:	0000                	unimp
     ea6:	02f2                	slli	t0,t0,0x1c
     ea8:	0000                	unimp
     eaa:	9c01                	0x9c01
     eac:	1045                	c.nop	-15
     eae:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     eb0:	4e30                	lw	a2,88(a2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	0201                	addi	tp,tp,0
     eb6:	5d18                	lw	a4,56(a0)
     eb8:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     eba:	8a00                	0x8a00
     ebc:	0005                	c.nop	1
    for(i = (3*N); i < (4*N); ++i){
     ebe:	3000                	fld	fs0,32(s0)
     ec0:	0070                	addi	a2,sp,12
     ec2:	0101                	addi	sp,sp,0
     ec4:	1f02                	slli	t5,t5,0x20
     ec6:	005d                	c.nop	23
     ec8:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
     eca:	000005db          	0x5db
     ece:	7130                	flw	fa2,96(a0)
     ed0:	0100                	addi	s0,sp,128
     ed2:	0201                	addi	tp,tp,0
    for(i = (4*N); i < (5*N); ++i){
     ed4:	5d26                	lw	s10,104(sp)
     ed6:	0000                	unimp
     ed8:	1200                	addi	s0,sp,288
     eda:	0006                	c.slli	zero,0x1
     edc:	3200                	fld	fs0,32(a2)
     ede:	0066                	c.slli	zero,0x19
        ring_poly[i-(5*N)] = keys[i];
     ee0:	0301                	addi	t1,t1,0
     ee2:	0902                	c.slli64	s2
     ee4:	1045                	c.nop	-15
     ee6:	0000                	unimp
     ee8:	7c989103          	lh	sp,1993(a7)
    for(i = (5*N); i < (6*N+1); ++i){
     eec:	6732                	flw	fa4,12(sp)
    resultkon[0] = 0xbbbbbbb0;
     eee:	0100                	addi	s0,sp,128
     ef0:	0204                	addi	s1,sp,256
     ef2:	4509                	li	a0,2
     ef4:	0010                	0x10
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef6:	0300                	addi	s0,sp,384
     ef8:	f491                	bnez	s1,e04 <memset+0x68>
     efa:	2a7d                	jal	10b8 <__DTOR_END__+0x12c>
     efc:	7066                	flw	ft0,120(sp)
    resultkon[0] = 0xbbbbbbb1;
     efe:	0100                	addi	s0,sp,128
     f00:	0206                	slli	tp,tp,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f02:	630a                	flw	ft6,128(sp)
     f04:	4900000b          	0x4900000b
     f08:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xbbbbbbb1;
     f0a:	2a00                	fld	fs0,16(a2)
    resultkon[0] = 0xccccccc0;
     f0c:	7166                	flw	ft2,120(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	630a0207          	0x630a0207
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f14:	5c00000b          	0x5c00000b
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f18:	0006                	c.slli	zero,0x1
     f1a:	2a00                	fld	fs0,16(a2)
     f1c:	6766                	flw	fa4,88(sp)
     f1e:	0100                	addi	s0,sp,128
     f20:	0208                	addi	a0,sp,256
     f22:	630a                	flw	ft6,128(sp)
     f24:	7a00000b          	0x7a00000b
     f28:	0006                	c.slli	zero,0x1
     f2a:	2a00                	fld	fs0,16(a2)
    resultkon[0] = 0xccccccc1;	
     f2c:	6b70                	flw	fa2,84(a4)
     f2e:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
     f30:	0209                	addi	tp,tp,2
     f32:	630a                	flw	ft6,128(sp)
    resultkon[0] = 0xccccccc1;	
     f34:	9800000b          	0x9800000b
            resultkon[0] = 0xDEDEDEDE;
     f38:	0006                	c.slli	zero,0x1
     f3a:	2600                	fld	fs0,8(a2)
    for(i = 0; i < 32; ++i){
     f3c:	069a                	slli	a3,a3,0x6
     f3e:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
     f40:	0a01                	addi	s4,s4,0
     f42:	0902                	c.slli64	s2
     f44:	1055                	c.nop	-11
     f46:	0000                	unimp
     f48:	06b6                	slli	a3,a3,0xd
     f4a:	0000                	unimp
     f4c:	692a                	flw	fs2,136(sp)
     f4e:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
     f50:	5d09020b          	0x5d09020b
     f54:	0000                	unimp
     f56:	1900                	addi	s0,sp,176
     f58:	26000007          	0x26000007
}
     f5c:	000003ab          	0x3ab
     f60:	0c01                	addi	s8,s8,0
     f62:	0a02                	c.slli64	s4
     f64:	00000b63          	beqz	zero,f7a <main+0x136>
     f68:	0855                	addi	a6,a6,21
     f6a:	0000                	unimp
     f6c:	00006933          	or	s2,zero,zero
     f70:	6d00                	flw	fs0,24(a0)
            resultkon[0] = 0xDEDEDEDE;
     f72:	0008                	0x8
    for(i = 0; i < 32; ++i){
     f74:	2b00                	fld	fs0,16(a4)
     f76:	0844                	addi	s1,sp,20
     f78:	0000                	unimp
     f7a:	1c7f                	0x1c7f
     f7c:	0000                	unimp
     f7e:	0f95                	addi	t6,t6,5
     f80:	0000                	unimp
     f82:	012c                	addi	a1,sp,136
     f84:	035a                	slli	t1,t1,0x16
     f86:	a478                	fsd	fa4,200(s0)
     f88:	2c7c                	fld	fa5,216(s0)
     f8a:	5b01                	li	s6,-32
     f8c:	3001                	jal	78c <ext_euclid+0x1a2>
     f8e:	012c                	addi	a1,sp,136
     f90:	025c                	addi	a5,sp,260
     f92:	d008                	sw	a0,32(s0)
     f94:	2b00                	fld	fs0,16(a4)
     f96:	08c4                	addi	s1,sp,84
     f98:	0000                	unimp
     f9a:	1c7f                	0x1c7f
     f9c:	0000                	unimp
     f9e:	0fb5                	addi	t6,t6,13
     fa0:	0000                	unimp
     fa2:	012c                	addi	a1,sp,136
     fa4:	035a                	slli	t1,t1,0x16
     fa6:	f878                	fsw	fa4,116(s0)
     fa8:	2c7d                	jal	1266 <_bss_start+0x156>
     faa:	5b01                	li	s6,-32
     fac:	3001                	jal	7ac <ext_euclid+0x1c2>
     fae:	012c                	addi	a1,sp,136
     fb0:	025c                	addi	a5,sp,260
     fb2:	d808                	sw	a0,48(s0)
     fb4:	2b00                	fld	fs0,16(a4)
     fb6:	098c                	addi	a1,sp,208
     fb8:	0000                	unimp
     fba:	1068                	addi	a0,sp,44
     fbc:	0000                	unimp
     fbe:	0fdc                	addi	a5,sp,980
     fc0:	0000                	unimp
     fc2:	012c                	addi	a1,sp,136
     fc4:	025a                	slli	tp,tp,0x16
     fc6:	0072                	c.slli	zero,0x1c
     fc8:	012c                	addi	a1,sp,136
     fca:	9878035b          	0x9878035b
     fce:	2c7c                	fld	fa5,216(s0)
     fd0:	5c01                	li	s8,-32
     fd2:	8502                	jr	a0
     fd4:	2c00                	fld	fs0,24(s0)
     fd6:	5d01                	li	s10,-32
     fd8:	8702                	jr	a4
     fda:	0000                	unimp
     fdc:	0009a62b          	0x9a62b
     fe0:	6800                	flw	fs0,16(s0)
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	0086                	slli	ra,ra,0x1
    1002:	2b00                	fld	fs0,16(a4)
    1004:	09c4                	addi	s1,sp,212
    1006:	0000                	unimp
    1008:	1796                	slli	a5,a5,0x25
    100a:	0000                	unimp
    100c:	1028                	addi	a0,sp,40
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	0082025b          	0x82025b
    1016:	012c                	addi	a1,sp,136
    1018:	025c                	addi	a5,sp,260
    101a:	0089                	addi	ra,ra,2
    101c:	012c                	addi	a1,sp,136
    101e:	025d                	addi	tp,tp,23
    1020:	0082                	c.slli64	ra
    1022:	012c                	addi	a1,sp,136
    1024:	015e                	slli	sp,sp,0x17
    1026:	0030                	addi	a2,sp,8
    1028:	d82d                	beqz	s0,f9a <__DTOR_END__+0xe>
    102a:	0009                	c.nop	2
    102c:	bd00                	fsd	fs0,56(a0)
    102e:	0014                	0x14
    1030:	2c00                	fld	fs0,24(s0)
    1032:	5c01                	li	s8,-32
    1034:	7202                	flw	ft4,32(sp)
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5d01                	li	s10,-32
    103a:	8502                	jr	a0
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5e01                	li	t3,-32
    1040:	8602                	jr	a2
    1042:	0000                	unimp
    1044:	0900                	addi	s0,sp,144
    1046:	005d                	c.nop	23
    1048:	0000                	unimp
    104a:	1055                	c.nop	-11
    104c:	0000                	unimp
    104e:	690a                	flw	fs2,128(sp)
    1050:	0000                	unimp
    1052:	3600                	fld	fs0,40(a2)
    1054:	0900                	addi	s0,sp,144
    1056:	005d                	c.nop	23
    1058:	0000                	unimp
    105a:	1068                	addi	a0,sp,44
    105c:	0000                	unimp
    105e:	6934                	flw	fa3,80(a0)
    1060:	0000                	unimp
    1062:	6c00                	flw	fs0,24(s0)
    1064:	0000000f          	fence	unknown,unknown
    1068:	0003482f          	0x3482f
    106c:	0100                	addi	s0,sp,128
    106e:	015f 6306 000b      	0xb6306015f
    1074:	ea00                	fsw	fs0,16(a2)
    1076:	0005                	c.nop	1
    1078:	1400                	addi	s0,sp,544
    107a:	0002                	c.slli64	zero
    107c:	0100                	addi	s0,sp,128
    107e:	389c                	fld	fa5,48(s1)
    1080:	0014                	0x14
    1082:	3100                	fld	fs0,32(a0)
    1084:	069a                	slli	a3,a3,0x6
    1086:	0000                	unimp
    1088:	5f01                	li	t5,-32
    108a:	1601                	addi	a2,a2,-32
    108c:	00000b63          	beqz	zero,10a2 <__DTOR_END__+0x116>
    1090:	000008b3          	add	a7,zero,zero
    1094:	8331                	srli	a4,a4,0xc
    1096:	0001                	nop
    1098:	0100                	addi	s0,sp,128
    109a:	015f 6322 000b      	0xb6322015f
    10a0:	f800                	fsw	fs0,48(s0)
    10a2:	0008                	0x8
    10a4:	3100                	fld	fs0,32(a0)
    10a6:	0012                	c.slli	zero,0x4
    10a8:	0000                	unimp
    10aa:	5f01                	li	t5,-32
    10ac:	2d01                	jal	16bc <result+0xfc>
    10ae:	005d                	c.nop	23
    10b0:	0000                	unimp
    10b2:	093d                	addi	s2,s2,15
    10b4:	0000                	unimp
    10b6:	6d30                	flw	fa2,88(a0)
    10b8:	0100646f          	jal	s0,70c8 <_stack_len+0x30c8>
    10bc:	015f 5d37 0000      	0x5d37015f
    10c2:	8100                	0x8100
    10c4:	0009                	c.nop	2
    10c6:	2600                	fld	fs0,8(a2)
    10c8:	0285                	addi	t0,t0,1
    10ca:	0000                	unimp
    10cc:	6101                	0x6101
    10ce:	0a01                	addi	s4,s4,0
    10d0:	00000b63          	beqz	zero,10e6 <__DTOR_END__+0x15a>
    10d4:	09b8                	addi	a4,sp,216
    10d6:	0000                	unimp
    10d8:	4e2a                	lw	t3,136(sp)
    10da:	0100                	addi	s0,sp,128
    10dc:	0162                	slli	sp,sp,0x18
    10de:	5d09                	li	s10,-30
    10e0:	0000                	unimp
    10e2:	d000                	sw	s0,32(s0)
    10e4:	0009                	c.nop	2
    10e6:	2a00                	fld	fs0,16(a2)
    10e8:	0069                	c.nop	26
    10ea:	6201                	0x6201
    10ec:	0c01                	addi	s8,s8,0
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09fe                	slli	s3,s3,0x1f
    10f4:	0000                	unimp
    10f6:	6a2a                	flw	fs4,136(sp)
    10f8:	0100                	addi	s0,sp,128
    10fa:	0162                	slli	sp,sp,0x18
    10fc:	00005d0f          	0x5d0f
    1100:	0500                	addi	s0,sp,640
    1102:	2600000b          	0x2600000b
    1106:	04fd                	addi	s1,s1,31
    1108:	0000                	unimp
    110a:	6301                	0x6301
    110c:	0901                	addi	s2,s2,0
    110e:	1438                	addi	a4,sp,552
    1110:	0000                	unimp
    1112:	00000b23          	sb	zero,22(zero) # 16 <__DYNAMIC+0x16>
    1116:	a426                	fsd	fs1,8(sp)
    1118:	0005                	c.nop	1
    111a:	0100                	addi	s0,sp,128
    111c:	0164                	addi	s1,sp,140
    111e:	4b09                	li	s6,2
    1120:	0014                	0x14
    1122:	4300                	lw	s0,0(a4)
    1124:	2a00000b          	0x2a00000b
    1128:	6972                	flw	fs2,28(sp)
    112a:	0100                	addi	s0,sp,128
    112c:	0165                	addi	sp,sp,25
    112e:	5e09                	li	t3,-30
    1130:	0014                	0x14
    1132:	6300                	flw	fs0,0(a4)
    1134:	2600000b          	0x2600000b
    1138:	041a                	slli	s0,s0,0x6
    113a:	0000                	unimp
    113c:	6701                	0x6701
    113e:	0901                	addi	s2,s2,0
    1140:	1471                	addi	s0,s0,-4
    1142:	0000                	unimp
    1144:	00000b83          	lb	s7,0(zero) # 0 <__DYNAMIC>
    1148:	742a                	flw	fs0,168(sp)
    114a:	0069                	c.nop	26
    114c:	6801                	0x6801
    114e:	0901                	addi	s2,s2,0
    1150:	1484                	addi	s1,sp,608
    1152:	0000                	unimp
    1154:	0bd0                	addi	a2,sp,468
    1156:	0000                	unimp
    1158:	3226                	fld	ft4,104(sp)
    115a:	0004                	0x4
    115c:	0100                	addi	s0,sp,128
    115e:	0169                	addi	sp,sp,26
    1160:	9709                	srai	a4,a4,0x22
    1162:	0014                	0x14
    1164:	f000                	fsw	fs0,32(s0)
    1166:	2600000b          	0x2600000b
    116a:	0000021b          	0x21b
    116e:	6a01                	0x6a01
    1170:	0901                	addi	s2,s2,0
    1172:	14aa                	slli	s1,s1,0x2a
    1174:	0000                	unimp
    1176:	00000c27          	0xc27
    117a:	722a                	flw	ft4,168(sp)
    117c:	7365                	lui	t1,0xffff9
    117e:	0100                	addi	s0,sp,128
    1180:	630a016b          	0x630a016b
    1184:	9900000b          	0x9900000b
    1188:	000c                	0xc
    118a:	2600                	fld	fs0,8(a2)
    118c:	02ff                	0x2ff
    118e:	0000                	unimp
    1190:	6c01                	0x6c01
    1192:	0a01                	addi	s4,s4,0
    1194:	00000b63          	beqz	zero,11aa <_bss_start+0x9a>
    1198:	00000cb7          	lui	s9,0x0
    119c:	4f26                	lw	t5,72(sp)
    119e:	0001                	nop
    11a0:	0100                	addi	s0,sp,128
    11a2:	016d                	addi	sp,sp,27
    11a4:	630a                	flw	ft6,128(sp)
    11a6:	d500000b          	0xd500000b
    11aa:	000c                	0xc
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	000003eb          	0x3eb
    11b2:	6e01                	0x6e01
    11b4:	0901                	addi	s2,s2,0
    11b6:	005d                	c.nop	23
    11b8:	0000                	unimp
    11ba:	00000cf3          	0xcf3
    11be:	00006933          	or	s2,zero,zero
    11c2:	4100                	lw	s0,0(a0)
    11c4:	000d                	c.nop	3
    11c6:	3300                	fld	fs0,32(a4)
    11c8:	0069                	c.nop	26
    11ca:	0000                	unimp
    11cc:	00000d6f          	jal	s10,11cc <_bss_start+0xbc>
    11d0:	00006933          	or	s2,zero,zero
    11d4:	9d00                	0x9d00
    11d6:	000d                	c.nop	3
    11d8:	3300                	fld	fs0,32(a4)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	00000dcb          	fnmsub.s	fs11,ft0,ft0,ft0,rne
    11e2:	00006933          	or	s2,zero,zero
    11e6:	f900                	fsw	fs0,48(a0)
    11e8:	000d                	c.nop	3
    11ea:	3300                	fld	fs0,32(a4)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	00000e27          	0xe27
    11f4:	00006933          	or	s2,zero,zero
    11f8:	5500                	lw	s0,40(a0)
    11fa:	000e                	c.slli	zero,0x3
    11fc:	2b00                	fld	fs0,16(a4)
    11fe:	065a                	slli	a2,a2,0x16
    1200:	0000                	unimp
    1202:	1b96                	slli	s7,s7,0x25
    1204:	0000                	unimp
    1206:	121e                	slli	tp,tp,0x27
    1208:	0000                	unimp
    120a:	012c                	addi	a1,sp,136
    120c:	025a                	slli	tp,tp,0x16
    120e:	012c0083          	lb	ra,18(s8)
    1212:	01f3035b          	0x1f3035b
    1216:	2c5a                	fld	fs8,400(sp)
    1218:	5c01                	li	s8,-32
    121a:	7902                	flw	fs2,32(sp)
    121c:	0000                	unimp
    121e:	0006622b          	0x6622b
    1222:	9600                	0x9600
    1224:	3e00001b          	0x3e00001b
    1228:	0012                	c.slli	zero,0x4
    122a:	2c00                	fld	fs0,24(s0)
    122c:	5a01                	li	s4,-32
    122e:	8402                	jr	s0
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5b01                	li	s6,-32
    1234:	8b02                	jr	s6
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5c01                	li	s8,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	0000                	unimp
    123e:	0006802b          	0x6802b
    1242:	f800                	fsw	fs0,48(s0)
    1244:	001a                	c.slli	zero,0x6
    1246:	5e00                	lw	s0,56(a2)
    1248:	0012                	c.slli	zero,0x4
    124a:	2c00                	fld	fs0,24(s0)
    124c:	5a01                	li	s4,-32
    124e:	8302                	jr	t1
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5b01                	li	s6,-32
    1254:	8202                	jr	tp
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5c01                	li	s8,-32
    125a:	7902                	flw	fs2,32(sp)
    125c:	0000                	unimp
    125e:	0006882b          	0x6882b
    1262:	f800                	fsw	fs0,48(s0)
    1264:	001a                	c.slli	zero,0x6
    1266:	7e00                	flw	fs0,56(a2)
    1268:	0012                	c.slli	zero,0x4
    126a:	2c00                	fld	fs0,24(s0)
    126c:	5a01                	li	s4,-32
    126e:	8402                	jr	s0
    1270:	2c00                	fld	fs0,24(s0)
    1272:	5b01                	li	s6,-32
    1274:	8202                	jr	tp
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5c01                	li	s8,-32
    127a:	7902                	flw	fs2,32(sp)
    127c:	0000                	unimp
    127e:	0006942b          	0x6942b
    1282:	bd00                	fsd	fs0,56(a0)
    1284:	0014                	0x14
    1286:	aa00                	fsd	fs0,16(a2)
    1288:	0012                	c.slli	zero,0x4
    128a:	2c00                	fld	fs0,24(s0)
    128c:	5a01                	li	s4,-32
    128e:	8302                	jr	t1
    1290:	2c00                	fld	fs0,24(s0)
    1292:	5b01                	li	s6,-32
    1294:	7902                	flw	fs2,32(sp)
    1296:	2c00                	fld	fs0,24(s0)
    1298:	5c01                	li	s8,-32
    129a:	8402                	jr	s0
    129c:	2c00                	fld	fs0,24(s0)
    129e:	5d01                	li	s10,-32
    12a0:	7902                	flw	fs2,32(sp)
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5e01                	li	t3,-32
    12a6:	8202                	jr	tp
    12a8:	0000                	unimp
    12aa:	0006b02b          	0x6b02b
    12ae:	f800                	fsw	fs0,48(s0)
    12b0:	001a                	c.slli	zero,0x6
    12b2:	ca00                	sw	s0,16(a2)
    12b4:	0012                	c.slli	zero,0x4
    12b6:	2c00                	fld	fs0,24(s0)
    12b8:	5a01                	li	s4,-32
    12ba:	7202                	flw	ft4,32(sp)
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5b01                	li	s6,-32
    12c0:	8202                	jr	tp
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5c01                	li	s8,-32
    12c6:	7902                	flw	fs2,32(sp)
    12c8:	0000                	unimp
    12ca:	0006bc2b          	0x6bc2b
    12ce:	bd00                	fsd	fs0,56(a0)
    12d0:	0014                	0x14
    12d2:	f600                	fsw	fs0,40(a2)
    12d4:	0012                	c.slli	zero,0x4
    12d6:	2c00                	fld	fs0,24(s0)
    12d8:	5a01                	li	s4,-32
    12da:	7202                	flw	ft4,32(sp)
    12dc:	2c00                	fld	fs0,24(s0)
    12de:	5b01                	li	s6,-32
    12e0:	7902                	flw	fs2,32(sp)
    12e2:	2c00                	fld	fs0,24(s0)
    12e4:	5c01                	li	s8,-32
    12e6:	8402                	jr	s0
    12e8:	2c00                	fld	fs0,24(s0)
    12ea:	5d01                	li	s10,-32
    12ec:	7902                	flw	fs2,32(sp)
    12ee:	2c00                	fld	fs0,24(s0)
    12f0:	5e01                	li	t3,-32
    12f2:	8202                	jr	tp
    12f4:	0000                	unimp
    12f6:	0006c42b          	0x6c42b
    12fa:	9600                	0x9600
    12fc:	1000001b          	0x1000001b
    1300:	2c000013          	li	zero,704
    1304:	5a01                	li	s4,-32
    1306:	8902                	jr	s2
    1308:	2c00                	fld	fs0,24(s0)
    130a:	5c01                	li	s8,-32
    130c:	7902                	flw	fs2,32(sp)
    130e:	0000                	unimp
    1310:	0006cc2b          	0x6cc2b
    1314:	f800                	fsw	fs0,48(s0)
    1316:	001a                	c.slli	zero,0x6
    1318:	3000                	fld	fs0,32(s0)
    131a:	2c000013          	li	zero,704
    131e:	5a01                	li	s4,-32
    1320:	8902                	jr	s2
    1322:	2c00                	fld	fs0,24(s0)
    1324:	5b01                	li	s6,-32
    1326:	8202                	jr	tp
    1328:	2c00                	fld	fs0,24(s0)
    132a:	5c01                	li	s8,-32
    132c:	7902                	flw	fs2,32(sp)
    132e:	0000                	unimp
    1330:	0006da2b          	0x6da2b
    1334:	0f00                	addi	s0,sp,912
    1336:	0019                	c.nop	6
    1338:	6100                	flw	fs0,0(a0)
    133a:	2c000013          	li	zero,704
    133e:	5a01                	li	s4,-32
    1340:	8902                	jr	s2
    1342:	2c00                	fld	fs0,24(s0)
    1344:	5b01                	li	s6,-32
    1346:	7902                	flw	fs2,32(sp)
    1348:	2c00                	fld	fs0,24(s0)
    134a:	5c01                	li	s8,-32
    134c:	8602                	jr	a2
    134e:	2c00                	fld	fs0,24(s0)
    1350:	5d01                	li	s10,-32
    1352:	7902                	flw	fs2,32(sp)
    1354:	2c00                	fld	fs0,24(s0)
    1356:	5e01                	li	t3,-32
    1358:	8202                	jr	tp
    135a:	2c00                	fld	fs0,24(s0)
    135c:	5f01                	li	t5,-32
    135e:	3001                	jal	b5e <ntru_encyrpt+0x6e>
    1360:	2b00                	fld	fs0,16(a4)
    1362:	06e2                	slli	a3,a3,0x18
    1364:	0000                	unimp
    1366:	1b96                	slli	s7,s7,0x25
    1368:	0000                	unimp
    136a:	0000137b          	0x137b
    136e:	012c                	addi	a1,sp,136
    1370:	025a                	slli	tp,tp,0x16
    1372:	0072                	c.slli	zero,0x1c
    1374:	012c                	addi	a1,sp,136
    1376:	025c                	addi	a5,sp,260
    1378:	0079                	c.nop	30
    137a:	2b00                	fld	fs0,16(a4)
    137c:	06ea                	slli	a3,a3,0x1a
    137e:	0000                	unimp
    1380:	1af8                	addi	a4,sp,380
    1382:	0000                	unimp
    1384:	0000139b          	0x139b
    1388:	012c                	addi	a1,sp,136
    138a:	025a                	slli	tp,tp,0x16
    138c:	0072                	c.slli	zero,0x1c
    138e:	012c                	addi	a1,sp,136
    1390:	0082025b          	0x82025b
    1394:	012c                	addi	a1,sp,136
    1396:	025c                	addi	a5,sp,260
    1398:	0079                	c.nop	30
    139a:	2b00                	fld	fs0,16(a4)
    139c:	06fa                	slli	a3,a3,0x1e
    139e:	0000                	unimp
    13a0:	1af8                	addi	a4,sp,380
    13a2:	0000                	unimp
    13a4:	000013bb          	0x13bb
    13a8:	012c                	addi	a1,sp,136
    13aa:	025a                	slli	tp,tp,0x16
    13ac:	008a                	slli	ra,ra,0x2
    13ae:	012c                	addi	a1,sp,136
    13b0:	0082025b          	0x82025b
    13b4:	012c                	addi	a1,sp,136
    13b6:	025c                	addi	a5,sp,260
    13b8:	0079                	c.nop	30
    13ba:	2b00                	fld	fs0,16(a4)
    13bc:	0702                	c.slli64	a4
    13be:	0000                	unimp
    13c0:	1b96                	slli	s7,s7,0x25
    13c2:	0000                	unimp
    13c4:	000013db          	0x13db
    13c8:	012c                	addi	a1,sp,136
    13ca:	025a                	slli	tp,tp,0x16
    13cc:	012c0083          	lb	ra,18(s8)
    13d0:	0084025b          	0x84025b
    13d4:	012c                	addi	a1,sp,136
    13d6:	025c                	addi	a5,sp,260
    13d8:	0079                	c.nop	30
    13da:	2b00                	fld	fs0,16(a4)
    13dc:	070a                	slli	a4,a4,0x2
    13de:	0000                	unimp
    13e0:	1b96                	slli	s7,s7,0x25
    13e2:	0000                	unimp
    13e4:	000013fb          	0x13fb
    13e8:	012c                	addi	a1,sp,136
    13ea:	025a                	slli	tp,tp,0x16
    13ec:	0084                	addi	s1,sp,64
    13ee:	012c                	addi	a1,sp,136
    13f0:	0088025b          	0x88025b
    13f4:	012c                	addi	a1,sp,136
    13f6:	025c                	addi	a5,sp,260
    13f8:	0079                	c.nop	30
    13fa:	2b00                	fld	fs0,16(a4)
    13fc:	0712                	slli	a4,a4,0x4
    13fe:	0000                	unimp
    1400:	1b96                	slli	s7,s7,0x25
    1402:	0000                	unimp
    1404:	0000141b          	0x141b
    1408:	012c                	addi	a1,sp,136
    140a:	025a                	slli	tp,tp,0x16
    140c:	012c008b          	0x12c008b
    1410:	0086025b          	0x86025b
    1414:	012c                	addi	a1,sp,136
    1416:	025c                	addi	a5,sp,260
    1418:	0079                	c.nop	30
    141a:	2d00                	fld	fs0,24(a0)
    141c:	071a                	slli	a4,a4,0x6
    141e:	0000                	unimp
    1420:	1b96                	slli	s7,s7,0x25
    1422:	0000                	unimp
    1424:	012c                	addi	a1,sp,136
    1426:	025a                	slli	tp,tp,0x16
    1428:	0086                	slli	ra,ra,0x1
    142a:	012c                	addi	a1,sp,136
    142c:	008a025b          	0x8a025b
    1430:	012c                	addi	a1,sp,136
    1432:	025c                	addi	a5,sp,260
    1434:	0079                	c.nop	30
    1436:	0000                	unimp
    1438:	5d09                	li	s10,-30
    143a:	0000                	unimp
    143c:	4b00                	lw	s0,16(a4)
    143e:	0014                	0x14
    1440:	3400                	fld	fs0,40(s0)
    1442:	0069                	c.nop	26
    1444:	0000                	unimp
    1446:	11be                	slli	gp,gp,0x2f
    1448:	0000                	unimp
    144a:	0900                	addi	s0,sp,144
    144c:	005d                	c.nop	23
    144e:	0000                	unimp
    1450:	145e                	slli	s0,s0,0x37
    1452:	0000                	unimp
    1454:	6934                	flw	fa3,80(a0)
    1456:	0000                	unimp
    1458:	c700                	sw	s0,8(a4)
    145a:	0011                	c.nop	4
    145c:	0000                	unimp
    145e:	5d09                	li	s10,-30
    1460:	0000                	unimp
    1462:	7100                	flw	fs0,32(a0)
    1464:	0014                	0x14
    1466:	3400                	fld	fs0,40(s0)
    1468:	0069                	c.nop	26
    146a:	0000                	unimp
    146c:	11d0                	addi	a2,sp,228
    146e:	0000                	unimp
    1470:	0900                	addi	s0,sp,144
    1472:	005d                	c.nop	23
    1474:	0000                	unimp
    1476:	1484                	addi	s1,sp,608
    1478:	0000                	unimp
    147a:	6934                	flw	fa3,80(a0)
    147c:	0000                	unimp
    147e:	d900                	sw	s0,48(a0)
    1480:	0011                	c.nop	4
    1482:	0000                	unimp
    1484:	5d09                	li	s10,-30
    1486:	0000                	unimp
    1488:	9700                	0x9700
    148a:	0014                	0x14
    148c:	3400                	fld	fs0,40(s0)
    148e:	0069                	c.nop	26
    1490:	0000                	unimp
    1492:	11e2                	slli	gp,gp,0x38
    1494:	0000                	unimp
    1496:	0900                	addi	s0,sp,144
    1498:	005d                	c.nop	23
    149a:	0000                	unimp
    149c:	14aa                	slli	s1,s1,0x2a
    149e:	0000                	unimp
    14a0:	6934                	flw	fa3,80(a0)
    14a2:	0000                	unimp
    14a4:	eb00                	fsw	fs0,16(a4)
    14a6:	0011                	c.nop	4
    14a8:	0000                	unimp
    14aa:	5d09                	li	s10,-30
    14ac:	0000                	unimp
    14ae:	bd00                	fsd	fs0,56(a0)
    14b0:	0014                	0x14
    14b2:	3400                	fld	fs0,40(s0)
    14b4:	0069                	c.nop	26
    14b6:	0000                	unimp
    14b8:	11f4                	addi	a3,sp,236
    14ba:	0000                	unimp
    14bc:	3500                	fld	fs0,40(a0)
    14be:	0000017b          	0x17b
    14c2:	cf01                	beqz	a4,14da <product2+0x172>
    14c4:	6306                	flw	ft6,64(sp)
    14c6:	1a00000b          	0x1a00000b
    14ca:	0004                	0x4
    14cc:	d000                	sw	s0,32(s0)
    14ce:	0001                	nop
    14d0:	0100                	addi	s0,sp,128
    14d2:	4a9c                	lw	a5,16(a3)
    14d4:	36000017          	auipc	zero,0x36000
    14d8:	756e                	flw	fa0,248(sp)
    14da:	006d                	c.nop	27
    14dc:	cf01                	beqz	a4,14f4 <product2+0x18c>
    14de:	000b6313          	ori	t1,s6,0
    14e2:	8300                	0x8300
    14e4:	000e                	c.slli	zero,0x3
    14e6:	3700                	fld	fs0,40(a4)
    14e8:	00fc                	addi	a5,sp,76
    14ea:	0000                	unimp
    14ec:	cf01                	beqz	a4,1504 <product2+0x19c>
    14ee:	5d1c                	lw	a5,56(a0)
    14f0:	0000                	unimp
    14f2:	af00                	fsd	fs0,24(a4)
    14f4:	000e                	c.slli	zero,0x3
    14f6:	3700                	fld	fs0,40(a4)
    14f8:	067c                	addi	a5,sp,780
    14fa:	0000                	unimp
    14fc:	cf01                	beqz	a4,1514 <product2+0x1ac>
    14fe:	6328                	flw	fa0,64(a4)
    1500:	0000000b          	0xb
    1504:	3700000f          	0x3700000f
    1508:	06a0                	addi	s0,sp,840
    150a:	0000                	unimp
    150c:	cf01                	beqz	a4,1524 <product2+0x1bc>
    150e:	00005d33          	srl	s10,zero,zero
    1512:	4500                	lw	s0,8(a0)
    1514:	3600000f          	0x3600000f
    1518:	6f6d                	lui	t5,0x1b
    151a:	0064                	addi	s1,sp,12
    151c:	cf01                	beqz	a4,1534 <product2+0x1cc>
    151e:	00005d3f 000f7c00 	0xf7c0000005d3f
    1526:	3800                	fld	fs0,48(s0)
    1528:	0075                	c.nop	29
    152a:	d101                	beqz	a0,142a <product2+0xc2>
    152c:	5d09                	li	s10,-30
    152e:	0000                	unimp
    1530:	b300                	fsd	fs0,32(a4)
    1532:	3800000f          	0x3800000f
    1536:	0064                	addi	s1,sp,12
    1538:	d101                	beqz	a0,1438 <product2+0xd0>
    153a:	00005d0b          	0x5d0b
    153e:	dc00                	sw	s0,56(s0)
    1540:	3900000f          	0x3900000f
    1544:	3264                	fld	fs1,224(a2)
    1546:	0100                	addi	s0,sp,128
    1548:	0dd1                	addi	s11,s11,20
    154a:	005d                	c.nop	23
    154c:	0000                	unimp
    154e:	6938                	flw	fa4,80(a0)
    1550:	0100                	addi	s0,sp,128
    1552:	10d1                	addi	ra,ra,-12
    1554:	005d                	c.nop	23
    1556:	0000                	unimp
    1558:	0ffa                	slli	t6,t6,0x1e
    155a:	0000                	unimp
    155c:	6239                	lui	tp,0xe
    155e:	4e5f 0100 12d1      	0x12d101004e5f
    1564:	005d                	c.nop	23
    1566:	0000                	unimp
    1568:	7238                	flw	fa4,96(a2)
    156a:	645f 0100 16d1      	0x16d10100645f
    1570:	005d                	c.nop	23
    1572:	0000                	unimp
    1574:	10da                	slli	ra,ra,0x36
    1576:	0000                	unimp
    1578:	753a                	flw	fa0,172(sp)
    157a:	0002                	c.slli64	zero
    157c:	0100                	addi	s0,sp,128
    157e:	0ad2                	slli	s5,s5,0x14
    1580:	00000b63          	beqz	zero,1596 <product2+0x22e>
    1584:	10f8                	addi	a4,sp,108
    1586:	0000                	unimp
    1588:	7638                	flw	fa4,104(a2)
    158a:	0100                	addi	s0,sp,128
    158c:	09d4                	addi	a3,sp,212
    158e:	174a                	slli	a4,a4,0x32
    1590:	0000                	unimp
    1592:	1110                	addi	a2,sp,160
    1594:	0000                	unimp
    1596:	7138                	flw	fa4,96(a0)
    1598:	0100                	addi	s0,sp,128
    159a:	09d5                	addi	s3,s3,21
    159c:	175d                	addi	a4,a4,-9
    159e:	0000                	unimp
    15a0:	1130                	addi	a2,sp,168
    15a2:	0000                	unimp
    15a4:	733a                	flw	ft6,172(sp)
    15a6:	0001                	nop
    15a8:	0100                	addi	s0,sp,128
    15aa:	0ad6                	slli	s5,s5,0x15
    15ac:	00000b63          	beqz	zero,15c2 <result+0x2>
    15b0:	1150                	addi	a2,sp,164
    15b2:	0000                	unimp
    15b4:	173a                	slli	a4,a4,0x2e
    15b6:	0002                	c.slli64	zero
    15b8:	0100                	addi	s0,sp,128
    15ba:	177009d7          	0x177009d7
    15be:	0000                	unimp
    15c0:	116e                	slli	sp,sp,0x3b
    15c2:	0000                	unimp
    15c4:	153a                	slli	a0,a0,0x2e
    15c6:	0002                	c.slli64	zero
    15c8:	0100                	addi	s0,sp,128
    15ca:	09d8                	addi	a4,sp,212
    15cc:	00001783          	lh	a5,0(zero) # 0 <__DYNAMIC>
    15d0:	11ba                	slli	gp,gp,0x2e
    15d2:	0000                	unimp
    15d4:	00006933          	or	s2,zero,zero
    15d8:	f200                	fsw	fs0,32(a2)
    15da:	0011                	c.nop	4
    15dc:	3300                	fld	fs0,32(a4)
    15de:	0069                	c.nop	26
    15e0:	0000                	unimp
    15e2:	1220                	addi	s0,sp,296
    15e4:	0000                	unimp
    15e6:	00006933          	or	s2,zero,zero
    15ea:	4e00                	lw	s0,24(a2)
    15ec:	0012                	c.slli	zero,0x4
    15ee:	3300                	fld	fs0,32(a4)
    15f0:	0069                	c.nop	26
    15f2:	0000                	unimp
    15f4:	127c                	addi	a5,sp,300
    15f6:	0000                	unimp
    15f8:	0004762b          	0x4762b
    15fc:	9600                	0x9600
    15fe:	1900001b          	0x1900001b
    1602:	0016                	c.slli	zero,0x5
    1604:	2c00                	fld	fs0,24(s0)
    1606:	5a01                	li	s4,-32
    1608:	8202                	jr	tp
    160a:	2c00                	fld	fs0,24(s0)
    160c:	5b01                	li	s6,-32
    160e:	5a01f303          	0x5a01f303
    1612:	012c                	addi	a1,sp,136
    1614:	025c                	addi	a5,sp,260
    1616:	0079                	c.nop	30
    1618:	2b00                	fld	fs0,16(a4)
    161a:	047e                	slli	s0,s0,0x1f
    161c:	0000                	unimp
    161e:	1af8                	addi	a4,sp,380
    1620:	0000                	unimp
    1622:	1639                	addi	a2,a2,-18
    1624:	0000                	unimp
    1626:	012c                	addi	a1,sp,136
    1628:	025a                	slli	tp,tp,0x16
    162a:	0082                	c.slli64	ra
    162c:	012c                	addi	a1,sp,136
    162e:	0083025b          	0x83025b
    1632:	012c                	addi	a1,sp,136
    1634:	025c                	addi	a5,sp,260
    1636:	0079                	c.nop	30
    1638:	2b00                	fld	fs0,16(a4)
    163a:	0488                	addi	a0,sp,576
    163c:	0000                	unimp
    163e:	1b96                	slli	s7,s7,0x25
    1640:	0000                	unimp
    1642:	1659                	addi	a2,a2,-10
    1644:	0000                	unimp
    1646:	012c                	addi	a1,sp,136
    1648:	025a                	slli	tp,tp,0x16
    164a:	0089                	addi	ra,ra,2
    164c:	012c                	addi	a1,sp,136
    164e:	0088025b          	0x88025b
    1652:	012c                	addi	a1,sp,136
    1654:	025c                	addi	a5,sp,260
    1656:	0084                	addi	s1,sp,64
    1658:	2b00                	fld	fs0,16(a4)
    165a:	0490                	addi	a2,sp,576
    165c:	0000                	unimp
    165e:	1af8                	addi	a4,sp,380
    1660:	0000                	unimp
    1662:	1679                	addi	a2,a2,-2
    1664:	0000                	unimp
    1666:	012c                	addi	a1,sp,136
    1668:	025a                	slli	tp,tp,0x16
    166a:	0089                	addi	ra,ra,2
    166c:	012c                	addi	a1,sp,136
    166e:	0083025b          	0x83025b
    1672:	012c                	addi	a1,sp,136
    1674:	025c                	addi	a5,sp,260
    1676:	0084                	addi	s1,sp,64
    1678:	2b00                	fld	fs0,16(a4)
    167a:	04fc                	addi	a5,sp,588
    167c:	0000                	unimp
    167e:	1b96                	slli	s7,s7,0x25
    1680:	0000                	unimp
    1682:	169c                	addi	a5,sp,864
    1684:	0000                	unimp
    1686:	012c                	addi	a1,sp,136
    1688:	055a                	slli	a0,a0,0x16
    168a:	0015c003          	lbu	zero,1(a1) # 6d9 <ext_euclid+0xef>
    168e:	2c00                	fld	fs0,24(s0)
    1690:	5b01                	li	s6,-32
    1692:	8702                	jr	a4
    1694:	2c00                	fld	fs0,24(s0)
    1696:	5c01                	li	s8,-32
    1698:	7902                	flw	fs2,32(sp)
    169a:	0000                	unimp
    169c:	00054c2b          	0x54c2b
    16a0:	f800                	fsw	fs0,48(s0)
    16a2:	001a                	c.slli	zero,0x6
    16a4:	bc00                	fsd	fs0,56(s0)
    16a6:	0016                	c.slli	zero,0x5
    16a8:	2c00                	fld	fs0,24(s0)
    16aa:	5a01                	li	s4,-32
    16ac:	8602                	jr	a2
    16ae:	2c00                	fld	fs0,24(s0)
    16b0:	5b01                	li	s6,-32
    16b2:	8302                	jr	t1
    16b4:	2c00                	fld	fs0,24(s0)
    16b6:	5c01                	li	s8,-32
    16b8:	7902                	flw	fs2,32(sp)
    16ba:	0000                	unimp
    16bc:	00055a2b          	0x55a2b
    16c0:	0f00                	addi	s0,sp,912
    16c2:	0019                	c.nop	6
    16c4:	ed00                	fsw	fs0,24(a0)
    16c6:	0016                	c.slli	zero,0x5
    16c8:	2c00                	fld	fs0,24(s0)
    16ca:	5a01                	li	s4,-32
    16cc:	7202                	flw	ft4,32(sp)
    16ce:	2c00                	fld	fs0,24(s0)
    16d0:	5b01                	li	s6,-32
    16d2:	8402                	jr	s0
    16d4:	2c00                	fld	fs0,24(s0)
    16d6:	5c01                	li	s8,-32
    16d8:	8602                	jr	a2
    16da:	2c00                	fld	fs0,24(s0)
    16dc:	5d01                	li	s10,-32
    16de:	8402                	jr	s0
    16e0:	2c00                	fld	fs0,24(s0)
    16e2:	5e01                	li	t3,-32
    16e4:	8302                	jr	t1
    16e6:	2c00                	fld	fs0,24(s0)
    16e8:	5f01                	li	t5,-32
    16ea:	3001                	jal	eea <main+0xa6>
    16ec:	2b00                	fld	fs0,16(a4)
    16ee:	0562                	slli	a0,a0,0x18
    16f0:	0000                	unimp
    16f2:	1af8                	addi	a4,sp,380
    16f4:	0000                	unimp
    16f6:	170d                	addi	a4,a4,-29
    16f8:	0000                	unimp
    16fa:	012c                	addi	a1,sp,136
    16fc:	025a                	slli	tp,tp,0x16
    16fe:	012c008b          	0x12c008b
    1702:	0083025b          	0x83025b
    1706:	012c                	addi	a1,sp,136
    1708:	025c                	addi	a5,sp,260
    170a:	0079                	c.nop	30
    170c:	2b00                	fld	fs0,16(a4)
    170e:	0572                	slli	a0,a0,0x1c
    1710:	0000                	unimp
    1712:	1af8                	addi	a4,sp,380
    1714:	0000                	unimp
    1716:	172d                	addi	a4,a4,-21
    1718:	0000                	unimp
    171a:	012c                	addi	a1,sp,136
    171c:	025a                	slli	tp,tp,0x16
    171e:	0082                	c.slli64	ra
    1720:	012c                	addi	a1,sp,136
    1722:	0083025b          	0x83025b
    1726:	012c                	addi	a1,sp,136
    1728:	025c                	addi	a5,sp,260
    172a:	0079                	c.nop	30
    172c:	2d00                	fld	fs0,24(a0)
    172e:	0582                	c.slli64	a1
    1730:	0000                	unimp
    1732:	1af8                	addi	a4,sp,380
    1734:	0000                	unimp
    1736:	012c                	addi	a1,sp,136
    1738:	025a                	slli	tp,tp,0x16
    173a:	012c0087          	0x12c0087
    173e:	0083025b          	0x83025b
    1742:	012c                	addi	a1,sp,136
    1744:	025c                	addi	a5,sp,260
    1746:	0079                	c.nop	30
    1748:	0000                	unimp
    174a:	5d09                	li	s10,-30
    174c:	0000                	unimp
    174e:	5d00                	lw	s0,56(a0)
    1750:	34000017          	auipc	zero,0x34000
    1754:	0069                	c.nop	26
    1756:	0000                	unimp
    1758:	15d4                	addi	a3,sp,740
    175a:	0000                	unimp
    175c:	0900                	addi	s0,sp,144
    175e:	005d                	c.nop	23
    1760:	0000                	unimp
    1762:	1770                	addi	a2,sp,940
    1764:	0000                	unimp
    1766:	6934                	flw	fa3,80(a0)
    1768:	0000                	unimp
    176a:	dd00                	sw	s0,56(a0)
    176c:	0015                	c.nop	5
    176e:	0000                	unimp
    1770:	5d09                	li	s10,-30
    1772:	0000                	unimp
    1774:	8300                	0x8300
    1776:	34000017          	auipc	zero,0x34000
    177a:	0069                	c.nop	26
    177c:	0000                	unimp
    177e:	15e6                	slli	a1,a1,0x39
    1780:	0000                	unimp
    1782:	0900                	addi	s0,sp,144
    1784:	005d                	c.nop	23
    1786:	0000                	unimp
    1788:	1796                	slli	a5,a5,0x25
    178a:	0000                	unimp
    178c:	6934                	flw	fa3,80(a0)
    178e:	0000                	unimp
    1790:	ef00                	fsw	fs0,24(a4)
    1792:	0015                	c.nop	5
    1794:	0000                	unimp
    1796:	2a35                	jal	18d2 <ti_2+0xba>
    1798:	0000                	unimp
    179a:	0100                	addi	s0,sp,128
    179c:	0b630697          	auipc	a3,0xb630
    17a0:	0000                	unimp
    17a2:	02aa                	slli	t0,t0,0xa
    17a4:	0000                	unimp
    17a6:	0170                	addi	a2,sp,140
    17a8:	0000                	unimp
    17aa:	9c01                	0x9c01
    17ac:	18cd                	addi	a7,a7,-13
    17ae:	0000                	unimp
    17b0:	6136                	flw	ft2,76(sp)
    17b2:	0100                	addi	s0,sp,128
    17b4:	0b631597          	auipc	a1,0xb631
    17b8:	0000                	unimp
    17ba:	12d1                	addi	t0,t0,-12
    17bc:	0000                	unimp
    17be:	0006ef37          	lui	t5,0x6e
    17c2:	0100                	addi	s0,sp,128
    17c4:	005d1c97          	auipc	s9,0x5d1
    17c8:	0000                	unimp
    17ca:	1316                	slli	t1,t1,0x25
    17cc:	0000                	unimp
    17ce:	6236                	flw	ft4,76(sp)
    17d0:	0100                	addi	s0,sp,128
    17d2:	0b632997          	auipc	s3,0xb632
    17d6:	0000                	unimp
    17d8:	00001367          	0x1367
    17dc:	0006f637          	lui	a2,0x6f
    17e0:	0100                	addi	s0,sp,128
    17e2:	005d3097          	auipc	ra,0x5d3
    17e6:	0000                	unimp
    17e8:	000013b7          	lui	t2,0x1
    17ec:	0004ed37          	lui	s10,0x4e
    17f0:	0100                	addi	s0,sp,128
    17f2:	005d3c97          	auipc	s9,0x5d3
    17f6:	0000                	unimp
    17f8:	000013e3          	bnez	zero,1ffe <_bss_end+0x15e>
    17fc:	383a                	fld	fa6,424(sp)
    17fe:	0006                	c.slli	zero,0x1
    1800:	0100                	addi	s0,sp,128
    1802:	0999                	addi	s3,s3,6
    1804:	18cd                	addi	a7,a7,-13
    1806:	0000                	unimp
    1808:	0000140f          	0x140f
    180c:	6938                	flw	fa4,80(a0)
    180e:	0100                	addi	s0,sp,128
    1810:	099a                	slli	s3,s3,0x6
    1812:	005d                	c.nop	23
    1814:	0000                	unimp
    1816:	00001453          	fadd.s	fs0,ft0,ft0,rtz
    181a:	6a38                	flw	fa4,80(a2)
    181c:	0100                	addi	s0,sp,128
    181e:	0b9a                	slli	s7,s7,0x6
    1820:	005d                	c.nop	23
    1822:	0000                	unimp
    1824:	00001493          	slli	s1,zero,0x0
    1828:	6b38                	flw	fa4,80(a4)
    182a:	0100                	addi	s0,sp,128
    182c:	0d9a                	slli	s11,s11,0x6
    182e:	005d                	c.nop	23
    1830:	0000                	unimp
    1832:	14ea                	slli	s1,s1,0x3a
    1834:	0000                	unimp
    1836:	6522                	flw	fa0,8(sp)
    1838:	0002                	c.slli64	zero
    183a:	0100                	addi	s0,sp,128
    183c:	0b630a9b          	0xb630a9b
    1840:	0000                	unimp
    1842:	0306                	slli	t1,t1,0x1
    1844:	1368                	addi	a0,sp,428
    1846:	0000                	unimp
    1848:	3a9f 000c 0000      	0xc3a9f
    184e:	9c01                	0x9c01
    1850:	e909                	bnez	a0,1862 <ti_2+0x4a>
    1852:	0018                	0x18
    1854:	3800                	fld	fs0,48(s0)
    1856:	0015                	c.nop	5
    1858:	3a00                	fld	fs0,48(a2)
    185a:	0364                	addi	s1,sp,396
    185c:	0000                	unimp
    185e:	9d01                	0x9d01
    1860:	fc09                	bnez	s0,177a <result+0x1ba>
    1862:	0018                	0x18
    1864:	4c00                	lw	s0,24(s0)
    1866:	0015                	c.nop	5
    1868:	3300                	fld	fs0,32(a4)
    186a:	0069                	c.nop	26
    186c:	0000                	unimp
    186e:	1599                	addi	a1,a1,-26
    1870:	0000                	unimp
    1872:	00006933          	or	s2,zero,zero
    1876:	e100                	fsw	fs0,0(a0)
    1878:	0015                	c.nop	5
    187a:	3300                	fld	fs0,32(a4)
    187c:	0069                	c.nop	26
    187e:	0000                	unimp
    1880:	1619                	addi	a2,a2,-26
    1882:	0000                	unimp
    1884:	00006933          	or	s2,zero,zero
    1888:	3c00                	fld	fs0,56(s0)
    188a:	0016                	c.slli	zero,0x5
    188c:	2b00                	fld	fs0,16(a4)
    188e:	032c                	addi	a1,sp,392
    1890:	0000                	unimp
    1892:	1b96                	slli	s7,s7,0x25
    1894:	0000                	unimp
    1896:	18ae                	slli	a7,a7,0x2b
    1898:	0000                	unimp
    189a:	012c                	addi	a1,sp,136
    189c:	025a                	slli	tp,tp,0x16
    189e:	008a                	slli	ra,ra,0x2
    18a0:	012c                	addi	a1,sp,136
    18a2:	01f3035b          	0x1f3035b
    18a6:	2c5a                	fld	fs8,400(sp)
    18a8:	5c01                	li	s8,-32
    18aa:	8802                	jr	a6
    18ac:	0001                	nop
    18ae:	382d                	jal	10e8 <__DTOR_END__+0x15c>
    18b0:	96000003          	lb	zero,-1696(zero) # fffff960 <_stack_start+0xfffef960>
    18b4:	2c00001b          	0x2c00001b
    18b8:	5a01                	li	s4,-32
    18ba:	7202                	flw	ft4,32(sp)
    18bc:	2c00                	fld	fs0,24(s0)
    18be:	5b01                	li	s6,-32
    18c0:	7804                	flw	fs1,48(s0)
    18c2:	7fbc                	flw	fa5,120(a5)
    18c4:	2c06                	fld	fs8,64(sp)
    18c6:	5c01                	li	s8,-32
    18c8:	8302                	jr	t1
    18ca:	0000                	unimp
    18cc:	0900                	addi	s0,sp,144
    18ce:	005d                	c.nop	23
    18d0:	0000                	unimp
    18d2:	18e9                	addi	a7,a7,-6
    18d4:	0000                	unimp
    18d6:	6934                	flw	fa3,80(a0)
    18d8:	0000                	unimp
    18da:	6900                	flw	fs0,16(a0)
    18dc:	0018                	0x18
    18de:	3400                	fld	fs0,40(s0)
    18e0:	0069                	c.nop	26
    18e2:	0000                	unimp
    18e4:	1872                	slli	a6,a6,0x3c
    18e6:	0000                	unimp
    18e8:	0900                	addi	s0,sp,144
    18ea:	005d                	c.nop	23
    18ec:	0000                	unimp
    18ee:	18fc                	addi	a5,sp,124
    18f0:	0000                	unimp
    18f2:	6934                	flw	fa3,80(a0)
    18f4:	0000                	unimp
    18f6:	7b00                	flw	fs0,48(a4)
    18f8:	0018                	0x18
    18fa:	0000                	unimp
    18fc:	5d09                	li	s10,-30
    18fe:	0000                	unimp
    1900:	0f00                	addi	s0,sp,912
    1902:	0019                	c.nop	6
    1904:	3400                	fld	fs0,40(s0)
    1906:	0069                	c.nop	26
    1908:	0000                	unimp
    190a:	1884                	addi	s1,sp,112
    190c:	0000                	unimp
    190e:	3500                	fld	fs0,40(a0)
    1910:	010d                	addi	sp,sp,3
    1912:	0000                	unimp
    1914:	4601                	li	a2,0
    1916:	6306                	flw	ft6,64(sp)
    1918:	d800000b          	0xd800000b
    191c:	0000                	unimp
    191e:	d200                	sw	s0,32(a2)
    1920:	0001                	nop
    1922:	0100                	addi	s0,sp,128
    1924:	b69c                	fsd	fa5,40(a3)
    1926:	001a                	c.slli	zero,0x6
    1928:	3600                	fld	fs0,40(a2)
    192a:	0061                	c.nop	24
    192c:	4601                	li	a2,0
    192e:	6314                	flw	fa3,0(a4)
    1930:	8400000b          	0x8400000b
    1934:	0016                	c.slli	zero,0x5
    1936:	3700                	fld	fs0,40(a4)
    1938:	000006ef          	jal	a3,1938 <ti_2+0x120>
    193c:	4601                	li	a2,0
    193e:	00005d1b          	0x5d1b
    1942:	c900                	sw	s0,16(a0)
    1944:	0016                	c.slli	zero,0x5
    1946:	3600                	fld	fs0,40(a2)
    1948:	0062                	c.slli	zero,0x18
    194a:	4601                	li	a2,0
    194c:	6328                	flw	fa0,64(a4)
    194e:	0300000b          	0x300000b
    1952:	37000017          	auipc	zero,0x37000
    1956:	06f6                	slli	a3,a3,0x1d
    1958:	0000                	unimp
    195a:	4601                	li	a2,0
    195c:	00005d2f          	0x5d2f
    1960:	5300                	lw	s0,32(a4)
    1962:	36000017          	auipc	zero,0x36000
    1966:	6f6d                	lui	t5,0x1b
    1968:	0064                	addi	s1,sp,12
    196a:	4601                	li	a2,0
    196c:	00005d3b          	0x5d3b
    1970:	8a00                	0x8a00
    1972:	37000017          	auipc	zero,0x37000
    1976:	04ed                	addi	s1,s1,27
    1978:	0000                	unimp
    197a:	4601                	li	a2,0
    197c:	5d44                	lw	s1,60(a0)
    197e:	0000                	unimp
    1980:	c100                	sw	s0,0(a0)
    1982:	3a000017          	auipc	zero,0x3a000
    1986:	0638                	addi	a4,sp,776
    1988:	0000                	unimp
    198a:	4901                	li	s2,0
    198c:	b609                	j	148e <product2+0x126>
    198e:	001a                	c.slli	zero,0x6
    1990:	1f00                	addi	s0,sp,944
    1992:	0018                	0x18
    1994:	3800                	fld	fs0,48(s0)
    1996:	0069                	c.nop	26
    1998:	4a01                	li	s4,0
    199a:	5d09                	li	s10,-30
    199c:	0000                	unimp
    199e:	7d00                	flw	fs0,56(a0)
    19a0:	0018                	0x18
    19a2:	3800                	fld	fs0,48(s0)
    19a4:	006a                	c.slli	zero,0x1a
    19a6:	4a01                	li	s4,0
    19a8:	00005d0b          	0x5d0b
    19ac:	e000                	fsw	fs0,0(s0)
    19ae:	0018                	0x18
    19b0:	3800                	fld	fs0,48(s0)
    19b2:	4a01006b          	0x4a01006b
    19b6:	5d0d                	li	s10,-29
    19b8:	0000                	unimp
    19ba:	4d00                	lw	s0,24(a0)
    19bc:	0019                	c.nop	6
    19be:	3a00                	fld	fs0,48(a2)
    19c0:	0255                	addi	tp,tp,21
    19c2:	0000                	unimp
    19c4:	4b01                	li	s6,0
    19c6:	630a                	flw	ft6,128(sp)
    19c8:	9b00000b          	0x9b00000b
    19cc:	0019                	c.nop	6
    19ce:	3a00                	fld	fs0,48(a2)
    19d0:	000c                	0xc
    19d2:	0000                	unimp
    19d4:	4c01                	li	s8,0
    19d6:	d209                	beqz	a2,18d8 <ti_2+0xc0>
    19d8:	001a                	c.slli	zero,0x6
    19da:	b300                	fsd	fs0,32(a4)
    19dc:	0019                	c.nop	6
    19de:	3a00                	fld	fs0,48(a2)
    19e0:	0364                	addi	s1,sp,396
    19e2:	0000                	unimp
    19e4:	4d01                	li	s10,0
    19e6:	e509                	bnez	a0,19f0 <random_keys+0x48>
    19e8:	001a                	c.slli	zero,0x6
    19ea:	ef00                	fsw	fs0,24(a4)
    19ec:	0019                	c.nop	6
    19ee:	3300                	fld	fs0,32(a4)
    19f0:	0069                	c.nop	26
    19f2:	0000                	unimp
    19f4:	00001a63          	bnez	zero,1a08 <random_keys+0x60>
    19f8:	00006933          	or	s2,zero,zero
    19fc:	b800                	fsd	fs0,48(s0)
    19fe:	001a                	c.slli	zero,0x6
    1a00:	3300                	fld	fs0,32(a4)
    1a02:	0069                	c.nop	26
    1a04:	0000                	unimp
    1a06:	1ae9                	addi	s5,s5,-6
    1a08:	0000                	unimp
    1a0a:	00006933          	or	s2,zero,zero
    1a0e:	2e00                	fld	fs0,24(a2)
    1a10:	2b00001b          	0x2b00001b
    1a14:	016a                	slli	sp,sp,0x1a
    1a16:	0000                	unimp
    1a18:	1b96                	slli	s7,s7,0x25
    1a1a:	0000                	unimp
    1a1c:	1a34                	addi	a3,sp,312
    1a1e:	0000                	unimp
    1a20:	012c                	addi	a1,sp,136
    1a22:	025a                	slli	tp,tp,0x16
    1a24:	012c008b          	0x12c008b
    1a28:	01f3035b          	0x1f3035b
    1a2c:	2c5a                	fld	fs8,400(sp)
    1a2e:	5c01                	li	s8,-32
    1a30:	8502                	jr	a0
    1a32:	0000                	unimp
    1a34:	0001722b          	0x1722b
    1a38:	f800                	fsw	fs0,48(s0)
    1a3a:	001a                	c.slli	zero,0x6
    1a3c:	5400                	lw	s0,40(s0)
    1a3e:	001a                	c.slli	zero,0x6
    1a40:	2c00                	fld	fs0,24(s0)
    1a42:	5a01                	li	s4,-32
    1a44:	8b02                	jr	s6
    1a46:	2c00                	fld	fs0,24(s0)
    1a48:	5b01                	li	s6,-32
    1a4a:	8402                	jr	s0
    1a4c:	2c00                	fld	fs0,24(s0)
    1a4e:	5c01                	li	s8,-32
    1a50:	8502                	jr	a0
    1a52:	0000                	unimp
    1a54:	00017e2b          	0x17e2b
    1a58:	9600                	0x9600
    1a5a:	7600001b          	0x7600001b
    1a5e:	001a                	c.slli	zero,0x6
    1a60:	2c00                	fld	fs0,24(s0)
    1a62:	5a01                	li	s4,-32
    1a64:	7202                	flw	ft4,32(sp)
    1a66:	2c00                	fld	fs0,24(s0)
    1a68:	5b01                	li	s6,-32
    1a6a:	7804                	flw	fs1,48(s0)
    1a6c:	7fb4                	flw	fa3,120(a5)
    1a6e:	2c06                	fld	fs8,64(sp)
    1a70:	5c01                	li	s8,-32
    1a72:	8202                	jr	tp
    1a74:	0000                	unimp
    1a76:	0001862b          	0x1862b
    1a7a:	f800                	fsw	fs0,48(s0)
    1a7c:	001a                	c.slli	zero,0x6
    1a7e:	9600                	0x9600
    1a80:	001a                	c.slli	zero,0x6
    1a82:	2c00                	fld	fs0,24(s0)
    1a84:	5a01                	li	s4,-32
    1a86:	7202                	flw	ft4,32(sp)
    1a88:	2c00                	fld	fs0,24(s0)
    1a8a:	5b01                	li	s6,-32
    1a8c:	8402                	jr	s0
    1a8e:	2c00                	fld	fs0,24(s0)
    1a90:	5c01                	li	s8,-32
    1a92:	8202                	jr	tp
    1a94:	0000                	unimp
    1a96:	f42d                	bnez	s0,1a00 <random_keys+0x58>
    1a98:	0001                	nop
    1a9a:	f800                	fsw	fs0,48(s0)
    1a9c:	001a                	c.slli	zero,0x6
    1a9e:	2c00                	fld	fs0,24(s0)
    1aa0:	5a01                	li	s4,-32
    1aa2:	0305                	addi	t1,t1,1
    1aa4:	1110                	addi	a2,sp,160
    1aa6:	0000                	unimp
    1aa8:	012c                	addi	a1,sp,136
    1aaa:	0084025b          	0x84025b
    1aae:	012c                	addi	a1,sp,136
    1ab0:	025c                	addi	a5,sp,260
    1ab2:	0089                	addi	ra,ra,2
    1ab4:	0000                	unimp
    1ab6:	5d09                	li	s10,-30
    1ab8:	0000                	unimp
    1aba:	d200                	sw	s0,32(a2)
    1abc:	001a                	c.slli	zero,0x6
    1abe:	3400                	fld	fs0,40(s0)
    1ac0:	0069                	c.nop	26
    1ac2:	0000                	unimp
    1ac4:	000019ef          	jal	s3,2ac4 <_min_stack+0xac4>
    1ac8:	6934                	flw	fa3,80(a0)
    1aca:	0000                	unimp
    1acc:	f800                	fsw	fs0,48(s0)
    1ace:	0019                	c.nop	6
    1ad0:	0000                	unimp
    1ad2:	5d09                	li	s10,-30
    1ad4:	0000                	unimp
    1ad6:	e500                	fsw	fs0,8(a0)
    1ad8:	001a                	c.slli	zero,0x6
    1ada:	3400                	fld	fs0,40(s0)
    1adc:	0069                	c.nop	26
    1ade:	0000                	unimp
    1ae0:	1a01                	addi	s4,s4,-32
    1ae2:	0000                	unimp
    1ae4:	0900                	addi	s0,sp,144
    1ae6:	005d                	c.nop	23
    1ae8:	0000                	unimp
    1aea:	1af8                	addi	a4,sp,380
    1aec:	0000                	unimp
    1aee:	6934                	flw	fa3,80(a0)
    1af0:	0000                	unimp
    1af2:	0a00                	addi	s0,sp,272
    1af4:	001a                	c.slli	zero,0x6
    1af6:	0000                	unimp
    1af8:	0005693b          	0x5693b
    1afc:	0100                	addi	s0,sp,128
    1afe:	0635                	addi	a2,a2,13
    1b00:	00ba                	slli	ra,ra,0xe
    1b02:	0000                	unimp
    1b04:	001e                	c.slli	zero,0x7
    1b06:	0000                	unimp
    1b08:	9c01                	0x9c01
    1b0a:	00001b6b          	0x1b6b
    1b0e:	613c                	flw	fa5,64(a0)
    1b10:	0031                	c.nop	12
    1b12:	3501                	jal	1912 <ti_2+0xfa>
    1b14:	6315                	lui	t1,0x5
    1b16:	0100000b          	0x100000b
    1b1a:	3c5a                	fld	fs8,432(sp)
    1b1c:	6f6d                	lui	t5,0x1b
    1b1e:	0064                	addi	s1,sp,12
    1b20:	3501                	jal	1920 <ti_2+0x108>
    1b22:	5d1d                	li	s10,-25
    1b24:	0000                	unimp
    1b26:	0100                	addi	s0,sp,128
    1b28:	054e375b          	0x54e375b
    1b2c:	0000                	unimp
    1b2e:	3501                	jal	192e <ti_2+0x116>
    1b30:	5d25                	li	s10,-23
    1b32:	0000                	unimp
    1b34:	8300                	0x8300
    1b36:	3800001b          	0x3800001b
    1b3a:	0069                	c.nop	26
    1b3c:	3a01                	jal	144c <product2+0xe4>
    1b3e:	5d05                	li	s10,-31
    1b40:	0000                	unimp
    1b42:	a400                	fsd	fs0,8(s0)
    1b44:	3d00001b          	0x3d00001b
    1b48:	00001b6b          	0x1b6b
    1b4c:	00c0                	addi	s0,sp,68
    1b4e:	0000                	unimp
    1b50:	0000                	unimp
    1b52:	0000                	unimp
    1b54:	3d01                	jal	1964 <ti_2+0x14c>
    1b56:	3e09                	jal	1668 <result+0xa8>
    1b58:	00001b83          	lh	s7,0(zero) # 0 <__DYNAMIC>
    1b5c:	00001bc3          	fmadd.s	fs7,ft0,ft0,ft0,rtz
    1b60:	783e                	flw	fa6,236(sp)
    1b62:	d600001b          	0xd600001b
    1b66:	0000001b          	0x1b
    1b6a:	3f00                	fld	fs0,56(a4)
    1b6c:	00000103          	lb	sp,0(zero) # 0 <__DYNAMIC>
    1b70:	2801                	jal	1b80 <random_keys+0x1d8>
    1b72:	0106                	slli	sp,sp,0x1
    1b74:	1b90                	addi	a2,sp,496
    1b76:	0000                	unimp
    1b78:	6140                	flw	fs0,4(a0)
    1b7a:	0031                	c.nop	12
    1b7c:	2801                	jal	1b8c <random_keys+0x1e4>
    1b7e:	901e                	c.add	zero,t2
    1b80:	4000001b          	0x4000001b
    1b84:	6f6d                	lui	t5,0x1b
    1b86:	0064                	addi	s1,sp,12
    1b88:	2801                	jal	1b98 <random_keys+0x1f0>
    1b8a:	0000692f          	0x692f
    1b8e:	0000                	unimp
    1b90:	0410                	addi	a2,sp,512
    1b92:	0069                	c.nop	26
    1b94:	0000                	unimp
    1b96:	0003903b          	0x3903b
    1b9a:	0100                	addi	s0,sp,128
    1b9c:	0621                	addi	a2,a2,8
    1b9e:	0092                	slli	ra,ra,0x4
    1ba0:	0000                	unimp
    1ba2:	0022                	c.slli	zero,0x8
    1ba4:	0000                	unimp
    1ba6:	9c01                	0x9c01
    1ba8:	1c08                	addi	a0,sp,560
    1baa:	0000                	unimp
    1bac:	613c                	flw	fa5,64(a0)
    1bae:	0031                	c.nop	12
    1bb0:	2101                	jal	1fb0 <_bss_end+0x110>
    1bb2:	6315                	lui	t1,0x5
    1bb4:	0100000b          	0x100000b
    1bb8:	3c5a                	fld	fs8,432(sp)
    1bba:	3261                	jal	1542 <product2+0x1da>
    1bbc:	0100                	addi	s0,sp,128
    1bbe:	1d21                	addi	s10,s10,-24
    1bc0:	00000b63          	beqz	zero,1bd6 <random_keys+0x22e>
    1bc4:	5b01                	li	s6,-32
    1bc6:	00054e37          	lui	t3,0x54
    1bca:	0100                	addi	s0,sp,128
    1bcc:	2421                	jal	1dd4 <random_keys+0x42c>
    1bce:	005d                	c.nop	23
    1bd0:	0000                	unimp
    1bd2:	1bf0                	addi	a2,sp,508
    1bd4:	0000                	unimp
    1bd6:	6938                	flw	fa4,80(a0)
    1bd8:	0100                	addi	s0,sp,128
    1bda:	0522                	slli	a0,a0,0x8
    1bdc:	005d                	c.nop	23
    1bde:	0000                	unimp
    1be0:	1c11                	addi	s8,s8,-28
    1be2:	0000                	unimp
    1be4:	0841                	addi	a6,a6,16
    1be6:	001c                	0x1c
    1be8:	a600                	fsd	fs0,8(a2)
    1bea:	0000                	unimp
    1bec:	0a00                	addi	s0,sp,272
    1bee:	0000                	unimp
    1bf0:	0100                	addi	s0,sp,128
    1bf2:	0924                	addi	s1,sp,152
    1bf4:	203e                	fld	ft0,456(sp)
    1bf6:	001c                	0x1c
    1bf8:	3000                	fld	fs0,32(s0)
    1bfa:	001c                	0x1c
    1bfc:	3e00                	fld	fs0,56(a2)
    1bfe:	1c15                	addi	s8,s8,-27
    1c00:	0000                	unimp
    1c02:	00001c53          	fadd.s	fs8,ft0,ft0,rtz
    1c06:	0000                	unimp
    1c08:	0006523f 060f0100 	0x60f01000006523f
    1c10:	2c01                	jal	1e20 <random_keys+0x478>
    1c12:	001c                	0x1c
    1c14:	4000                	lw	s0,0(s0)
    1c16:	3161                	jal	189e <ti_2+0x86>
    1c18:	0100                	addi	s0,sp,128
    1c1a:	1b901e0f          	0x1b901e0f
    1c1e:	0000                	unimp
    1c20:	6140                	flw	fs0,4(a0)
    1c22:	0032                	c.slli	zero,0xc
    1c24:	0f01                	addi	t5,t5,0
    1c26:	9030                	0x9030
    1c28:	0000001b          	0x1b
    1c2c:	0842                	slli	a6,a6,0x10
    1c2e:	001c                	0x1c
    1c30:	8c00                	0x8c00
    1c32:	0000                	unimp
    1c34:	0600                	addi	s0,sp,768
    1c36:	0000                	unimp
    1c38:	0100                	addi	s0,sp,128
    1c3a:	509c                	lw	a5,32(s1)
    1c3c:	001c                	0x1c
    1c3e:	3e00                	fld	fs0,56(a2)
    1c40:	1c15                	addi	s8,s8,-27
    1c42:	0000                	unimp
    1c44:	1c76                	slli	s8,s8,0x3d
    1c46:	0000                	unimp
    1c48:	001c2043          	fmadd.s	ft0,fs8,ft1,ft0,rdn
    1c4c:	0100                	addi	s0,sp,128
    1c4e:	6b42005b          	0x6b42005b
    1c52:	b400001b          	0xb400001b
    1c56:	0000                	unimp
    1c58:	0600                	addi	s0,sp,768
    1c5a:	0000                	unimp
    1c5c:	0100                	addi	s0,sp,128
    1c5e:	749c                	flw	fa5,40(s1)
    1c60:	001c                	0x1c
    1c62:	3e00                	fld	fs0,56(a2)
    1c64:	1b78                	addi	a4,sp,444
    1c66:	0000                	unimp
    1c68:	1c89                	addi	s9,s9,-30
    1c6a:	0000                	unimp
    1c6c:	001b8343          	fmadd.s	ft6,fs7,ft1,ft0,rne
    1c70:	0100                	addi	s0,sp,128
    1c72:	2344005b          	0x2344005b
    1c76:	19000003          	lb	zero,400(zero) # 190 <polymult+0xb8>
    1c7a:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1c7e:	4400                	lw	s0,8(s0)
    1c80:	0064                	addi	s1,sp,12
    1c82:	0000                	unimp
    1c84:	005a                	c.slli	zero,0x16
    1c86:	0000                	unimp
    1c88:	1e000007          	0x1e000007
    1c8c:	0000                	unimp
    1c8e:	0200                	addi	s0,sp,256
    1c90:	0300                	addi	s0,sp,384
    1c92:	0004                	0x4
    1c94:	0400                	addi	s0,sp,512
    1c96:	c001                	beqz	s0,1c96 <random_keys+0x2ee>
    1c98:	0020                	addi	s0,sp,8
    1c9a:	3000                	fld	fs0,32(s0)
    1c9c:	0000                	unimp
    1c9e:	fd00                	fsw	fs0,56(a0)
    1ca0:	0006                	c.slli	zero,0x1
    1ca2:	1800                	addi	s0,sp,48
    1ca4:	0005                	c.nop	1
    1ca6:	0400                	addi	s0,sp,512
    1ca8:	01000007          	0x1000007
    1cac:	80              	Address 0x0000000000001cac is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <ext_euclid+0x18>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 5001 <_stack_len+0x1001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
    asm volatile(
  c0:	3813490b          	0x3813490b
    for(i=0;i<(length/3);i++) {
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
    asm volatile(
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
    for(i=0;i<(length/3);i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
    int line[size_b][size_a + size_b];
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
    int pola[size_a];
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
    int line[size_b][size_a + size_b];
 112:	03011317          	auipc	t1,0x3011
    int pola[size_a];
 116:	0b0e                	slli	s6,s6,0x3
    int line[size_b][size_a + size_b];
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
 11a:	39053b0b          	0x39053b0b
    int pola[size_a];
 11e:	0013010b          	0x13010b
    int polb[size_b];
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	1349                	addi	t1,t1,-14
    int pola[size_a];
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	0d19                	addi	s10,s10,6
    int line[size_b][size_a + size_b];
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int polb[size_b];
 13a:	39053b0b          	0x39053b0b
            line[i][j] = 0;
 13e:	3813490b          	0x3813490b
    for (i = 0; i < size_b; ++i){
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
            product[j] = 0;
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
    for (i = 0; i < size_b; ++i){
 14e:	0b39053b          	0xb39053b
    array_equ(pola,a,size_a);
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
    array_mod(pola,mod,size_a);
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
    array_equ(polb,b,size_b);
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
    array_mod(polb,mod,size_b);
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
    if(star_mult == 1){
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
        for (j = size_b -1; j >= 0; j = j-1){
 1a2:	193c193f 34210000 	0x34210000193c193f
            product[j] = 0;
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
            line[i][j] = 0;
 1b2:	3f13490b          	0x3f13490b
            product[j] = 0;
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    if(star_mult == 1){
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x68>
        for (j = size_b -1; j >= 0; j = j-1){
 1d0:	00052f13          	slti	t5,a0,0
    for (i = 0; i < size_b; ++i){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
    for(j = 0; j < size_a + size_b -1; ++j){
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
    array_mod(product,mod,(size_a+size_b-1));
 1ea:	3f01                	jal	fa <polymult+0x22>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
}
 1f4:	1113490b          	0x1113490b
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
                line[size_b-1-j][k] = pola[k]*polb[j];
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
 234:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
            for (k = size_a-1; k >= 0; k = k-1 ){
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
        for (j = size_b -1; j >= 0; j = j-1){
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
            line[i][j] = line[i][j] % mod;
 26a:	9118                	0x9118
        for(j = 0; j < size_a + size_b -1; ++j){
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
        for(j = 0; j < size_a + size_b -1; ++j){
 278:	2e000013          	li	zero,736
    for (i = 0; i < size_b; ++i){
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
        for(j = 0; j < size_a + size_b -1; ++j){
 284:	3f012e2f          	0x3f012e2f
            product[j] += line[i][j];
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
 294:	12011113          	0x12011113
 298:	4006                	0x4006
 29a:	9718                	0x9718
        for(i = 0; i < size_b; ++i){
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
    for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
        for(i = 0; i < size_b; ++i){
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 2ac:	0213490b          	0x213490b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
    int line[size_b][size_a + size_b];
 2d8:	1349                	addi	t1,t1,-14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
    int line[size_b][size_a + size_b];
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
    int pola[size_a];
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
    int line[size_b][size_a + size_b];
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    int polb[size_b];
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
    int line[size_b][size_a + size_b];
 304:	36000013          	li	zero,864
    int pola[size_a];
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
    for (i = 0; i < size_b; ++i){
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
            product2[j] = 0;
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
    for (i = 0; i < size_b; ++i){
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
    array_equ(pola,a,size_a);
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
    array_equ(polb,b,size_b);
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
    if(star_mult == 1){
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 350:	0b390b3b          	0xb390b3b
            product2[j] = 0;
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
            line[i][j] = 0;
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
            product2[j] = 0;
 35e:	0319                	addi	t1,t1,6
        for(j = 0; j < size_a + size_b -1; ++j){
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
 366:	1119270b          	0x1119270b
    for (i = 0; i < size_b; ++i){
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
 36e:	9718                	0x9718
        for(j = 0; j < size_a + size_b -1; ++j){
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
                line[size_b-1-j][k] = pola[k]*polb[j];
 374:	0000                	unimp
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 384:	0018                	0x18
                line[size_b-1-j][k] = pola[k]*polb[j];
 386:	3d00                	fld	fs0,56(a0)
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	0152                	slli	sp,sp,0x14
 38e:	1755                	addi	a4,a4,-11
        for (j = size_b -1; j >= 0; j = j-1){
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
 398:	053e                	slli	a0,a0,0xf
        for(j=0;j<size_a+size_b-1;++j){
 39a:	3100                	fld	fs0,32(a0)
    for(i=0;i<size_b;++i){
 39c:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
 3a0:	3f00                	fld	fs0,56(a4)
 3a2:	012e                	slli	sp,sp,0xb
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        for(j=0;j<size_a+size_b-1;++j){
 3ac:	0b39                	addi	s6,s6,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ae:	0b201927          	0xb201927
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b2:	1301                	addi	t1,t1,-32
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	0013490b          	0x13490b
 3c4:	4100                	lw	s0,0(a0)
 3c6:	011d                	addi	sp,sp,7
 3c8:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	0111                	addi	sp,sp,4
 3cc:	0612                	slli	a2,a2,0x4
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	0b58                	addi	a4,sp,404
 3d0:	0b59                	addi	s6,s6,22
 3d2:	00000b57          	0xb57
            product2[j] += line[i][j];
 3d6:	2e42                	fld	ft8,16(sp)
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
        for(j=0;j<size_a+size_b-1;++j){
 3da:	12011113          	0x12011113
            product2[j] += line[i][j];
 3de:	4006                	0x4006
 3e0:	9718                	0x9718
 3e2:	1942                	slli	s2,s2,0x30
        for(j=0;j<size_a+size_b-1;++j){
 3e4:	1301                	addi	t1,t1,-32
 3e6:	0000                	unimp
 3e8:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
    for(i=0;i<size_b;++i){
 3ec:	00180213          	addi	tp,a6,1
}
 3f0:	4400                	lw	s0,8(s0)
 3f2:	002e                	c.slli	zero,0xb
 3f4:	193c193f 0e030e6e 	0xe030e6e193c193f
 3fc:	0b3a                	slli	s6,s6,0xe
 3fe:	00000b3b          	0xb3b
 402:	0100                	addi	s0,sp,128
 404:	0011                	c.nop	4
 406:	0610                	addi	a2,sp,768
 408:	0655                	addi	a2,a2,21
 40a:	0e1b0e03          	lb	t3,225(s6) # fffe00e1 <_stack_start+0xfffd00e1>
 40e:	0e25                	addi	t3,t3,9
 410:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0f16                	slli	t5,t5,0x5
       2:	0000                	unimp
       4:	0f2a                	slli	t5,t5,0xa
       6:	0000                	unimp
       8:	0001                	nop
       a:	2a5a                	fld	fs4,400(sp)
       c:	2b00000f          	0x2b00000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0f2c                	addi	a1,sp,920
      20:	0000                	unimp
      22:	0f6c                	addi	a1,sp,924
      24:	0000                	unimp
      26:	0001                	nop
      28:	725a                	flw	ft4,180(sp)
      2a:	7c00000f          	0x7c00000f
      2e:	0100000f          	fence	w,unknown
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0e8a                	slli	t4,t4,0x2
      3e:	0000                	unimp
      40:	0ede                	slli	t4,t4,0x17
      42:	0000                	unimp
      44:	0001                	nop
      46:	de5a                	sw	s6,60(sp)
      48:	000e                	c.slli	zero,0x3
      4a:	0600                	addi	s0,sp,768
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	6c00                	flw	fs0,24(s0)
      5e:	000e                	c.slli	zero,0x3
      60:	c000                	sw	s0,0(s0)
      62:	000e                	c.slli	zero,0x3
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0ec0                	addi	s0,sp,852
      6c:	0000                	unimp
      6e:	0eca                	slli	t4,t4,0x12
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0eca                	slli	t4,t4,0x12
      78:	0000                	unimp
      7a:	0f09                	addi	t5,t5,2
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	0f09                	addi	t5,t5,2
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	0f70                	addi	a2,sp,924
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	7079                	c.lui	zero,0xffffe
}
      90:	7200000f          	0x7200000f
    for(i=0;i<(length/3);i++) {
      94:	0300000f          	fence	rw,unknown
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	0f72                	slli	t5,t5,0x1c
      9e:	0000                	unimp
}
      a0:	0f7c                	addi	a5,sp,924
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	6c00                	flw	fs0,24(s0)
      b2:	000e                	c.slli	zero,0x3
    asm volatile(
      b4:	9a00                	0x9a00
      b6:	000e                	c.slli	zero,0x3
}
      b8:	0300                	addi	s0,sp,384
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0e9a                	slli	t4,t4,0x6
    asm volatile(
      c0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      c2:	0e9c                	addi	a5,sp,848
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
    asm volatile(
      ca:	0e9c                	addi	a5,sp,848
      cc:	0000                	unimp
      ce:	0f22                	slli	t5,t5,0x8
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
    for(i=0;i<(length/3);i++) {
      d6:	227a                	fld	ft4,408(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	2b00000f          	0x2b00000f
      dc:	0200000f          	fence	r,unknown
    int line[size_b][size_a + size_b];
      e0:	7d00                	flw	fs0,56(a0)
      e2:	2b00                	fld	fs0,16(a4)
      e4:	7000000f          	0x7000000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	0300000f          	fence	rw,unknown
    int line[size_b][size_a + size_b];
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	0f70                	addi	a2,sp,924
      f2:	0000                	unimp
      f4:	0f72                	slli	t5,t5,0x1c
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # df07 <_stack_len+0x9f07>
    int pola[size_a];
      fc:	727a                	flw	ft4,188(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fe:	7c00000f          	0x7c00000f
     102:	0300000f          	fence	rw,unknown
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    int line[size_b][size_a + size_b];
     112:	0e6c                	addi	a1,sp,796
    int pola[size_a];
     114:	0000                	unimp
     116:	0ea6                	slli	t4,t4,0x9
    int line[size_b][size_a + size_b];
     118:	0000                	unimp
     11a:	c4910003          	lb	zero,-951(sp)
    int pola[size_a];
     11e:	a67c                	fsd	fa5,200(a2)
     120:	000e                	c.slli	zero,0x3
    int polb[size_b];
     122:	b000                	fsd	fs0,32(s0)
     124:	000e                	c.slli	zero,0x3
     126:	0200                	addi	s0,sp,256
    int pola[size_a];
     128:	7e00                	flw	fs0,56(a2)
    int polb[size_b];
     12a:	b000                	fsd	fs0,32(s0)
     12c:	000e                	c.slli	zero,0x3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	6a00                	flw	fs0,16(a2)
    int pola[size_a];
     130:	0200000f          	fence	r,unknown
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	8200                	0x8200
    int line[size_b][size_a + size_b];
     136:	6a00                	flw	fs0,16(a2)
     138:	7000000f          	0x7000000f
            line[i][j] = 0;
     13c:	0300000f          	fence	rw,unknown
     140:	9100                	0x9100
    for (i = 0; i < size_b; ++i){
     142:	7cc4                	flw	fs1,60(s1)
     144:	0f70                	addi	a2,sp,924
            product[j] = 0;
     146:	0000                	unimp
     148:	0f72                	slli	t5,t5,0x1c
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    for (i = 0; i < size_b; ++i){
     150:	727c                	flw	fa5,100(a2)
    array_equ(pola,a,size_a);
     152:	7c00000f          	0x7c00000f
     156:	0200000f          	fence	r,unknown
     15a:	8200                	0x8200
	...
     164:	6c00                	flw	fs0,24(s0)
     166:	000e                	c.slli	zero,0x3
     168:	da00                	sw	s0,48(a2)
    array_mod(pola,mod,size_a);
     16a:	000e                	c.slli	zero,0x3
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
    array_equ(polb,b,size_b);
     172:	0eda                	slli	t4,t4,0x16
     174:	0000                	unimp
     176:	0ee0                	addi	s0,sp,860
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
    array_mod(polb,mod,size_b);
     17e:	0ee0                	addi	s0,sp,860
     180:	0000                	unimp
     182:	0f09                	addi	t5,t5,2
     184:	0000                	unimp
    if(star_mult == 1){
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	0f09                	addi	t5,t5,2
     18c:	0000                	unimp
     18e:	0f70                	addi	a2,sp,924
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	707e                	flw	ft0,252(sp)
     198:	7200000f          	0x7200000f
     19c:	0300000f          	fence	rw,unknown
     1a0:	7200                	flw	fs0,32(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	0f72                	slli	t5,t5,0x1c
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	0000                	unimp
     1a8:	0f7c                	addi	a5,sp,924
            product[j] = 0;
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
            line[i][j] = 0;
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
            product[j] = 0;
     1b4:	0000                	unimp
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	8e00                	0x8e00
     1ba:	000e                	c.slli	zero,0x3
     1bc:	9200                	0x9200
     1be:	000e                	c.slli	zero,0x3
    for (i = 0; i < size_b; ++i){
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	369f 000f 4000      	0x4000000f369f
        for(j = 0; j < size_a + size_b -1; ++j){
     1ca:	0200000f          	fence	r,unknown
        for (j = size_b -1; j >= 0; j = j-1){
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    for (i = 0; i < size_b; ++i){
     1d6:	0000                	unimp
     1d8:	8400                	0x8400
     1da:	9c00000b          	0x9c00000b
     1de:	0100000b          	0x100000b
    for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0b9c                	addi	a5,sp,464
    array_mod(product,mod,(size_a+size_b-1));
     1e6:	0000                	unimp
     1e8:	0c00                	addi	s0,sp,528
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	0058                	addi	a4,sp,4
     1f0:	000c                	0xc
     1f2:	0c00                	addi	s0,sp,528
}
     1f4:	000c                	0xc
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0c0c                	addi	a1,sp,528
     1fe:	0000                	unimp
     200:	0c12                	slli	s8,s8,0x4
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0c12                	slli	s8,s8,0x4
     20c:	0000                	unimp
     20e:	0c48                	addi	a0,sp,532
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	8400                	0x8400
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	a600000b          	0xa600000b
     222:	0100000b          	0x100000b
     226:	5b00                	lw	s0,48(a4)
     228:	0ba6                	slli	s7,s7,0x9
     22a:	0000                	unimp
     22c:	0c0a                	slli	s8,s8,0x2
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     230:	0001                	nop
     232:	0a65                	addi	s4,s4,25
     234:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     236:	1200                	addi	s0,sp,288
     238:	000c                	0xc
        for (j = size_b -1; j >= 0; j = j-1){
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	129f 000c 4800      	0x4800000c129f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     246:	000c                	0xc
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0b84                	addi	s1,sp,464
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	0b9e                	slli	s7,s7,0x7
     25a:	0000                	unimp
     25c:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	9e5c                	0x9e5c
     260:	0400000b          	0x400000b
        for (j = size_b -1; j >= 0; j = j-1){
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
            line[i][j] = line[i][j] % mod;
     26a:	0c04                	addi	s1,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     26c:	0000                	unimp
     26e:	0c12                	slli	s8,s8,0x4
            line[i][j] = line[i][j] % mod;
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
        for(j = 0; j < size_a + size_b -1; ++j){
     278:	0c12                	slli	s8,s8,0x4
     27a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     27c:	0c48                	addi	a0,sp,532
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
        for(j = 0; j < size_a + size_b -1; ++j){
     284:	0000                	unimp
     286:	0000                	unimp
            product[j] += line[i][j];
     288:	0000                	unimp
     28a:	8400                	0x8400
     28c:	a000000b          	0xa000000b
     290:	0100000b          	0x100000b
     294:	5d00                	lw	s0,56(a0)
     296:	0ba0                	addi	s0,sp,472
     298:	0000                	unimp
     29a:	0bb9                	addi	s7,s7,14
        for(i = 0; i < size_b; ++i){
     29c:	0000                	unimp
     29e:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	b95a                	fsd	fs6,176(sp)
     2a2:	4800000b          	0x4800000b
        for(i = 0; i < size_b; ++i){
     2a6:	000c                	0xc
     2a8:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	f300                	fsw	fs0,32(a4)
    int line[size_b][size_a + size_b];
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b4:	0000                	unimp
     2b6:	8400                	0x8400
     2b8:	a800000b          	0xa800000b
    int line[size_b][size_a + size_b];
     2bc:	0100000b          	0x100000b
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0ba8                	addi	a0,sp,472
     2c4:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	0c0e                	slli	s8,s8,0x3
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000c0e67          	jalr	t3,s8
     2d0:	1200                	addi	s0,sp,288
     2d2:	000c                	0xc
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
    int line[size_b][size_a + size_b];
     2d8:	5e01                	li	t3,-32
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2da:	129f 000c 4800      	0x4800000c129f
    int line[size_b][size_a + size_b];
     2e0:	000c                	0xc
     2e2:	0100                	addi	s0,sp,128
    int pola[size_a];
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0b84                	addi	s1,sp,464
     2f0:	0000                	unimp
    int polb[size_b];
     2f2:	0bb9                	addi	s7,s7,14
     2f4:	0000                	unimp
     2f6:	0001                	nop
    int pola[size_a];
     2f8:	b95f 000b 4800      	0x4800000bb95f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2fe:	000c                	0xc
     300:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     306:	009f 0000 0000      	0x9f
    int polb[size_b];
     30c:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     30e:	8400                	0x8400
     310:	b900000b          	0xb900000b
            product2[j] = 0;
     314:	0100000b          	0x100000b
     318:	6000                	flw	fs0,0(s0)
     31a:	0bb9                	addi	s7,s7,14
    for (i = 0; i < size_b; ++i){
     31c:	0000                	unimp
     31e:	0c08                	addi	a0,sp,528
    array_equ(pola,a,size_a);
     320:	0000                	unimp
     322:	0001                	nop
     324:	0864                	addi	s1,sp,28
     326:	000c                	0xc
     328:	1200                	addi	s0,sp,288
     32a:	000c                	0xc
    array_equ(polb,b,size_b);
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	129f 000c 4800      	0x4800000c129f
    if(star_mult == 1){
     338:	000c                	0xc
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
     346:	0bba                	slli	s7,s7,0xe
     348:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	00000bc7          	fmsub.s	fs7,ft0,ft0,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
            product2[j] = 0;
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
            line[i][j] = 0;
     358:	ca00                	sw	s0,16(a2)
     35a:	e800000b          	0xe800000b
            product2[j] = 0;
     35e:	0100000b          	0x100000b
        for(j = 0; j < size_a + size_b -1; ++j){
     362:	5a00                	lw	s0,48(a2)
     364:	0be8                	addi	a0,sp,476
     366:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     368:	00000beb          	0xbeb
     36c:	0001                	nop
     36e:	125c                	addi	a5,sp,292
        for(j = 0; j < size_a + size_b -1; ++j){
     370:	000c                	0xc
     372:	3600                	fld	fs0,40(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	000c                	0xc
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0bec                	addi	a1,sp,476
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	0bf5                	addi	s7,s7,29
     388:	0000                	unimp
     38a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     390:	0000                	unimp
     392:	0000                	unimp
     394:	f600                	fsw	fs0,40(a2)
     396:	1200000b          	0x1200000b
        for(j=0;j<size_a+size_b-1;++j){
     39a:	000c                	0xc
    for(i=0;i<size_b;++i){
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0c36                	slli	s8,s8,0xd
     3a2:	0000                	unimp
     3a4:	0c48                	addi	a0,sp,532
     3a6:	0000                	unimp
     3a8:	0001                	nop
        for(j=0;j<size_a+size_b-1;++j){
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ae:	0000                	unimp
     3b0:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b2:	ca00                	sw	s0,16(a2)
     3b4:	d000000b          	0xd000000b
     3b8:	0100000b          	0x100000b
     3bc:	5900                	lw	s0,48(a0)
     3be:	0bd0                	addi	a2,sp,468
     3c0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0bdc                	addi	a5,sp,468
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	dc5d                	beqz	s0,386 <polymult2+0xdc>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	e200000b          	0xe200000b
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	0100000b          	0x100000b
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0bf6                	slli	s7,s7,0x1d
            product2[j] += line[i][j];
     3d6:	0000                	unimp
     3d8:	0c02                	c.slli64	s8
        for(j=0;j<size_a+size_b-1;++j){
     3da:	0000                	unimp
     3dc:	0001                	nop
            product2[j] += line[i][j];
     3de:	1259                	addi	tp,tp,-10
     3e0:	000c                	0xc
     3e2:	1c00                	addi	s0,sp,560
        for(j=0;j<size_a+size_b-1;++j){
     3e4:	000c                	0xc
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
    for(i=0;i<size_b;++i){
     3ea:	0c1c                	addi	a5,sp,528
     3ec:	0000                	unimp
     3ee:	0c22                	slli	s8,s8,0x8
}
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # 4e7f7 <_stack_start+0x3e7f7>
     3f6:	229f 000c 2400      	0x2400000c229f
     3fc:	000c                	0xc
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0c24                	addi	s1,sp,536
     404:	0000                	unimp
     406:	0c36                	slli	s8,s8,0xd
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	365e                	fld	fa2,496(sp)
     40e:	000c                	0xc
     410:	4000                	lw	s0,0(s0)
     412:	000c                	0xc
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0c40                	addi	s0,sp,532
    int v[size_N];
     41a:	0000                	unimp
     41c:	0c46                	slli	s8,s8,0x11
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	0000                	unimp
    int v[size_N];
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     424:	469f 000c 4800      	0x4800000c469f
     42a:	000c                	0xc
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0af0                	addi	a2,sp,348
     43a:	0000                	unimp
    int v[size_N];
     43c:	0b0c                	addi	a1,sp,400
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     43e:	0000                	unimp
    int v[size_N];
     440:	0001                	nop
     442:	0c5a                	slli	s8,s8,0x16
     444:	5c00000b          	0x5c00000b
    int q[size_N];
     448:	0100000b          	0x100000b
    int num_temp[size_N];
     44c:	5800                	lw	s0,48(s0)
     44e:	0b5c                	addi	a5,sp,404
    int denum_temp[size_D];
     450:	0000                	unimp
     452:	0b84                	addi	s1,sp,464
     454:	0000                	unimp
     456:	0004                	0x4
    int num_temp[size_N];
     458:	9f5a01f3          	0x9f5a01f3
	...
    int v[size_N];
     464:	0af0                	addi	a2,sp,348
    array_equ(num_temp,num,size_N);
     466:	0000                	unimp
     468:	0b06                	slli	s6,s6,0x1
     46a:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46c:	0001                	nop
     46e:	000b065b          	0xb065b
    int denum_temp[size_D];
     472:	6a00                	flw	fs0,16(a2)
    array_equ(num_temp,num,size_N);
     474:	0100000b          	0x100000b
    array_mod(num_temp,mod,size_N);
     478:	6200                	flw	fs0,0(a2)
     47a:	0b6a                	slli	s6,s6,0x1a
     47c:	0000                	unimp
    int denum_temp[size_D];
     47e:	0b72                	slli	s6,s6,0x1c
    array_equ(denum_temp,denum,size_D);
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    array_mod(denum_temp,mod,size_D);
     488:	0b72                	slli	s6,s6,0x1c
     48a:	0000                	unimp
     48c:	0b84                	addi	s1,sp,464
     48e:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	f000                	fsw	fs0,32(s0)
     49c:	000a                	c.slli	zero,0x2
     49e:	0a00                	addi	s0,sp,272
     4a0:	0100000b          	0x100000b
    for (i = 0; i < size_N; ++i){
     4a4:	5c00                	lw	s0,56(s0)
        if ( (b_N*u)%mod == 1 )
     4a6:	0b0a                	slli	s6,s6,0x2
    for (u = 0; u < mod; ++u){
     4a8:	0000                	unimp
     4aa:	0b4a                	slli	s6,s6,0x12
     4ac:	0000                	unimp
     4ae:	0001                	nop
        q[i] = 0;
     4b0:	4a59                	li	s4,22
     4b2:	8400000b          	0x8400000b
     4b6:	0400000b          	0x400000b
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
        v[i] = 0;
     4be:	009f 0000 0000      	0x9f
    for (i = 0; i < size_N; ++i){
     4c4:	0000                	unimp
        if( denum_temp[i] != 0 )
     4c6:	f000                	fsw	fs0,32(s0)
    for (i = size_D-1; i >= 0; i = i-1){
     4c8:	000a                	c.slli	zero,0x2
     4ca:	1700                	addi	s0,sp,928
        if ( (b_N*u)%mod == 1 )
     4cc:	0100000b          	0x100000b
     4d0:	5d00                	lw	s0,56(a0)
     4d2:	00000b17          	auipc	s6,0x0
    for (u = 0; u < mod; ++u){
     4d6:	0b6e                	slli	s6,s6,0x1b
     4d8:	0000                	unimp
        if( num_temp[i] != 0 )
     4da:	0001                	nop
    for (i = size_N-1; i >= 0; i = i-1){
     4dc:	6e64                	flw	fs1,92(a2)
     4de:	7200000b          	0x7200000b
     4e2:	0400000b          	0x400000b
     4e6:	f300                	fsw	fs0,32(a4)
     4e8:	5d01                	li	s10,-32
    while (d >= d2){
     4ea:	729f 000b 8400      	0x8400000b729f
    array_equ(result,q,size_N);
     4f0:	0100000b          	0x100000b
     4f4:	6400                	flw	fs0,8(s0)
	...
    for(i = size_N; i < (2*size_N); ++i){
     4fe:	0af0                	addi	a2,sp,348
        result[i] = num_temp[i-size_N];
     500:	0000                	unimp
     502:	00000b17          	auipc	s6,0x0
     506:	0001                	nop
    for(i = size_N; i < (2*size_N); ++i){
     508:	175e                	slli	a4,a4,0x37
     50a:	6c00000b          	0x6c00000b
}
     50e:	0100000b          	0x100000b
     512:	6300                	flw	fs0,0(a4)
     514:	0b6c                	addi	a1,sp,412
     516:	0000                	unimp
     518:	0b72                	slli	s6,s6,0x1c
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0b72                	slli	s6,s6,0x1c
     524:	0000                	unimp
     526:	0b84                	addi	s1,sp,464
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0x112>
     530:	0000                	unimp
     532:	0000                	unimp
     534:	2a00                	fld	fs0,16(a2)
        v[(d-d2)] = u*r_d;
     536:	5500000b          	0x5500000b
     53a:	0100000b          	0x100000b
     53e:	5a00                	lw	s0,48(a2)
	...
     548:	0b2a                	slli	s6,s6,0xa
    array_mod(v,mod,size_N);
     54a:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54c:	0b30                	addi	a2,sp,408
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
     552:	9f30                	0x9f30
     554:	0b56                	slli	s6,s6,0x15
     556:	0000                	unimp
     558:	0b68                	addi	a0,sp,412
    array_mod(product,mod,size_N);
     55a:	0000                	unimp
     55c:	0001                	nop
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     55e:	7259                	lui	tp,0xffff6
    array_mod(product,mod,size_N);
     560:	7c00000b          	0x7c00000b
        for (i = 0; i < size_N; ++i){
     564:	0100000b          	0x100000b
     568:	5900                	lw	s0,48(a0)
    array_mod(num_temp,mod,size_N);
     56a:	0b7c                	addi	a5,sp,412
     56c:	0000                	unimp
     56e:	0b82                	c.slli64	s7
     570:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     572:	7f790003          	lb	zero,2039(s2)
     576:	829f 000b 8400      	0x8400000b829f
    array_mod(q,mod,size_N);
     57c:	0100000b          	0x100000b
     580:	5900                	lw	s0,48(a0)
	...
        for (i = size_N-1; i >= 0; i = i-1){
     58a:	07fe                	slli	a5,a5,0x1f
     58c:	0000                	unimp
     58e:	0842                	slli	a6,a6,0x10
     590:	0000                	unimp
     592:	0001                	nop
            num_temp[i] = num_temp[i] - product[i];
     594:	425a                	lw	tp,148(sp)
     596:	0008                	0x8
     598:	0400                	addi	s0,sp,512
     59a:	000a                	c.slli	zero,0x2
     59c:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0a04                	addi	s1,sp,272
            num_temp[i] = num_temp[i] - product[i];
     5a2:	0000                	unimp
     5a4:	0a28                	addi	a0,sp,280
     5a6:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
            q[i] = q[i] + v[i];
     5ac:	289f 000a 4800      	0x4800000a289f
     5b2:	000a                	c.slli	zero,0x2
        for(i = 0; i < size_N; ++i){
     5b4:	0400                	addi	s0,sp,512
     5b6:	f300                	fsw	fs0,32(a4)
            q[i] = q[i] + v[i];
     5b8:	5a01                	li	s4,-32
     5ba:	489f 000a dc00      	0xdc00000a489f
            if( num_temp[i] != 0 )
     5c0:	000a                	c.slli	zero,0x2
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0100                	addi	s0,sp,128
     5c4:	6200                	flw	fs0,0(a2)
            v[i] = 0;
     5c6:	0adc                	addi	a5,sp,340
     5c8:	0000                	unimp
     5ca:	0af0                	addi	a2,sp,348
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
        for (i = 0; i < size_N; ++i){
     5d2:	009f 0000 0000      	0x9f
        result[i] = num_temp[i-size_N];
     5d8:	0000                	unimp
     5da:	fe00                	fsw	fs0,56(a2)
     5dc:	3a000007          	0x3a000007
     5e0:	0008                	0x8
     5e2:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	083a                	slli	a6,a6,0xe
     5e8:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     5ea:	0a30                	addi	a2,sp,280
     5ec:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	0001                	nop
    int ri_2[size]; // MX-ring poly, a
     5f0:	000a3067          	0xa3067
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	4800                	lw	s0,16(s0)
     5f6:	000a                	c.slli	zero,0x2
     5f8:	0400                	addi	s0,sp,512
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	489f 000a f000      	0xf000000a489f
     604:	000a                	c.slli	zero,0x2
     606:	0100                	addi	s0,sp,128
     608:	6700                	flw	fs0,8(a4)
	...
    int ri_2[size]; // MX-ring poly, a
     612:	07fe                	slli	a5,a5,0x1f
     614:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     616:	083e                	slli	a6,a6,0xf
     618:	0000                	unimp
     61a:	0001                	nop
    int ri[size];
     61c:	3e5c                	fld	fa5,184(a2)
     61e:	0008                	0x8
     620:	2c00                	fld	fs0,24(s0)
    int ti_1[size]; // ti_1[0] = 1
     622:	000a                	c.slli	zero,0x2
     624:	0100                	addi	s0,sp,128
     626:	6600                	flw	fs0,8(a2)
    int ti[size];
     628:	0a2c                	addi	a1,sp,280
     62a:	0000                	unimp
     62c:	0a48                	addi	a0,sp,276
    int qi_1[size];
     62e:	0000                	unimp
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
    int temp[size];
     636:	0a48                	addi	a0,sp,276
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0000                	unimp
     63a:	0af0                	addi	a2,sp,348
     63c:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
    int temp[size];
     642:	0000                	unimp
    for (i = 0; i < size; ++i) {
     644:	0000                	unimp
        ti_2[i] = 0;
     646:	0000                	unimp
     648:	8c00                	0x8c00
     64a:	0009                	c.nop	2
     64c:	9600                	0x9600
    for (i = 0; i < size; ++i) {
     64e:	0009                	c.nop	2
     650:	0100                	addi	s0,sp,128
    array_equ(ri_2,polyR,size);
     652:	5a00                	lw	s0,48(a2)
	...
    array_equ(ri_1,polyf,size);
     65c:	09a6                	slli	s3,s3,0x9
     65e:	0000                	unimp
     660:	000009c3          	fmadd.s	fs3,ft0,ft0,ft0,rne
    ti_1[0] = 1;
     664:	0001                	nop
     666:	a85a                	fsd	fs6,16(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	000a                	c.slli	zero,0x2
     66a:	bc00                	fsd	fs0,56(s0)
     66c:	000a                	c.slli	zero,0x2
     66e:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     670:	5a00                	lw	s0,48(a2)
	...
    array_mod(ri_2,mod,size);
     67a:	09c4                	addi	s1,sp,212
     67c:	0000                	unimp
     67e:	000009d7          	0x9d7
    array_mod(ri_1,mod,size);
     682:	0001                	nop
     684:	bc5a                	fsd	fs6,56(sp)
     686:	000a                	c.slli	zero,0x2
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	cc00                	sw	s0,24(s0)
     68a:	000a                	c.slli	zero,0x2
     68c:	0100                	addi	s0,sp,128
     68e:	5a00                	lw	s0,48(a2)
	...
        for (i = N + 1; i < (2 * N + 2); ++i) {
     698:	09d8                	addi	a4,sp,212
     69a:	0000                	unimp
     69c:	09f4                	addi	a3,sp,220
     69e:	0000                	unimp
     6a0:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     6a2:	cc5a                	sw	s6,24(sp)
     6a4:	000a                	c.slli	zero,0x2
     6a6:	dc00                	sw	s0,56(s0)
    array_mod(temp,mod,size);
     6a8:	000a                	c.slli	zero,0x2
     6aa:	0100                	addi	s0,sp,128
     6ac:	5a00                	lw	s0,48(a2)
	...
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b6:	0940                	addi	s0,sp,148
     6b8:	0000                	unimp
     6ba:	0a0c                	addi	a1,sp,272
     6bc:	0000                	unimp
    array_equ(qi_1,res1,size);
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
     6c2:	0a0c                	addi	a1,sp,272
    array_mod(qi_1,mod,size);
     6c4:	0000                	unimp
     6c6:	0a24                	addi	s1,sp,280
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6cc:	0084                	addi	s1,sp,64
     6ce:	0a24                	addi	s1,sp,280
     6d0:	0000                	unimp
     6d2:	0a28                	addi	a0,sp,280
     6d4:	0000                	unimp
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
     6da:	0085                	addi	ra,ra,1
    array_equ(temp,res2,size);
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
    array_mod(temp,mod,size);
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0a28                	addi	a0,sp,280
        for (i = 0; i < N + 1; ++i) {
     6ea:	0000                	unimp
     6ec:	0a48                	addi	a0,sp,276
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
    array_mod(ti,mod,size);
     6f4:	235a01f3          	0x235a01f3
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
array_equ(ri_2,ri_1,size);
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
array_equ(ri_1,ri,size);
     702:	01f0                	addi	a2,sp,204
     704:	481c                	lw	a5,16(s0)
     706:	000a                	c.slli	zero,0x2
     708:	f000                	fsw	fs0,32(s0)
array_equ(ti_2,ti_1,size);
     70a:	000a                	c.slli	zero,0x2
     70c:	0200                	addi	s0,sp,256
     70e:	7200                	flw	fs0,32(a2)
	...
array_equ(ti_1,ti,size);
     718:	4400                	lw	s0,8(s0)
        controlR = 0;
     71a:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     71c:	4600                	lw	s0,8(a2)
     71e:	0009                	c.nop	2
     720:	0200                	addi	s0,sp,256
    while (controlR != 0) {
     722:	3100                	fld	fs0,32(a0)
     724:	469f 0009 4c00      	0x4c000009469f
        for (j = 0; j < mod; ++j) {
     72a:	0009                	c.nop	2
     72c:	0100                	addi	s0,sp,128
     72e:	5f00                	lw	s0,56(a4)
     730:	0950                	addi	a2,sp,148
     732:	0000                	unimp
     734:	0956                	slli	s2,s2,0x15
        for (i = 0; i < N + 1; ++i) {
     736:	0000                	unimp
     738:	0001                	nop
    }
     73a:	5e5f 0009 6c00      	0x6c0000095e5f
     740:	0009                	c.nop	2
     742:	0100                	addi	s0,sp,128
     744:	5f00                	lw	s0,56(a4)
     746:	0976                	slli	s2,s2,0x1d
     748:	0000                	unimp
     74a:	0000098b          	0x98b
     74e:	0001                	nop
     750:	8c5f 0009 9600      	0x960000098c5f
     756:	0009                	c.nop	2
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
     760:	0996                	slli	s3,s3,0x5
     762:	0000                	unimp
        ti_2[i] = 0;
     764:	09a5                	addi	s3,s3,9
     766:	0000                	unimp
     768:	0001                	nop
     76a:	a65f 0009 b600      	0xb6000009a65f
     770:	0009                	c.nop	2
        ti_1[i] = 0;
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
    for (i = 0; i < size; ++i) {
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
            ri[i - (N + 1)] = res[i];
     77a:	09b6                	slli	s3,s3,0xd
     77c:	0000                	unimp
     77e:	09c4                	addi	s1,sp,212
     780:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     782:	0001                	nop
     784:	c459                	beqz	s0,812 <generate_keys+0x14>
            ri[i - (N + 1)] = res[i];
     786:	0009                	c.nop	2
     788:	cc00                	sw	s0,24(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	0009                	c.nop	2
            temp[i] = ri_2[i] - ri[i];
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
     790:	cc9f 0009 d400      	0xd4000009cc9f
     796:	0009                	c.nop	2
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     79c:	09d8                	addi	a4,sp,212
            temp[i] = ri_2[i] - ri[i];
     79e:	0000                	unimp
     7a0:	09ea                	slli	s3,s3,0x1a
        for (i = 0; i < N + 1; ++i) {
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
            ti[i] = ti_2[i] - temp[i];
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	ea9f 0009 0400      	0x4000009ea9f
     7b0:	000a                	c.slli	zero,0x2
     7b2:	0100                	addi	s0,sp,128
     7b4:	6800                	flw	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     7b6:	0a04                	addi	s1,sp,272
            ti[i] = ti_2[i] - temp[i];
     7b8:	0000                	unimp
     7ba:	0a84                	addi	s1,sp,336
        for (i = 0; i < N + 1; ++i) {
     7bc:	0000                	unimp
     7be:	0001                	nop
              qi_1[i] = 0;
     7c0:	845f 000a 8600      	0x8600000a845f
     7c6:	000a                	c.slli	zero,0x2
            controlR += ri[i];
     7c8:	0300                	addi	s0,sp,384
     7ca:	7f00                	flw	fs0,56(a4)
              qi_1[i] = 0;
     7cc:	9f7f                	0x9f7f
     7ce:	0a86                	slli	s5,s5,0x1
        for (i = 0; i < N + 1; ++i) {
     7d0:	0000                	unimp
            controlR += ri[i];
     7d2:	0aa8                	addi	a0,sp,344
        for (i = 0; i < N + 1; ++i) {
     7d4:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	0001                	nop
     7d8:	a85f 000a b800      	0xb800000aa85f
     7de:	000a                	c.slli	zero,0x2
     7e0:	0100                	addi	s0,sp,128
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0ab8                	addi	a4,sp,344
        for (j = 0; j < mod; ++j) {
     7e6:	0000                	unimp
     7e8:	0aba                	slli	s5,s5,0xe
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7ec:	7f790003          	lb	zero,2039(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	ba9f 000a bc00      	0xbc00000aba9f
     7f6:	000a                	c.slli	zero,0x2
     7f8:	0100                	addi	s0,sp,128
     7fa:	5900                	lw	s0,48(a0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	0abc                	addi	a5,sp,344
int* generate_keys(int N, int p, int q){
     7fe:	0000                	unimp
     800:	0ac0                	addi	s0,sp,340
     802:	0000                	unimp
     804:	0001                	nop
     806:	c05e                	sw	s7,0(sp)
     808:	000a                	c.slli	zero,0x2
     80a:	ca00                	sw	s0,16(a2)
     80c:	000a                	c.slli	zero,0x2
     80e:	0300                	addi	s0,sp,384
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
     814:	0aca                	slli	s5,s5,0x12
     816:	0000                	unimp
     818:	0acc                	addi	a1,sp,340
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	cc5e                	sw	s7,24(sp)
     820:	000a                	c.slli	zero,0x2
     822:	dc00                	sw	s0,56(s0)
     824:	000a                	c.slli	zero,0x2
     826:	0100                	addi	s0,sp,128
     828:	6800                	flw	fs0,16(s0)
     82a:	0adc                	addi	a5,sp,340
     82c:	0000                	unimp
     82e:	0aec                	addi	a1,sp,348
     830:	0000                	unimp
     832:	0001                	nop
     834:	ec5f 000a ee00      	0xee00000aec5f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     83a:	000a                	c.slli	zero,0x2
     83c:	0300                	addi	s0,sp,384
     83e:	7f00                	flw	fs0,56(a4)
     840:	9f7f                	0x9f7f
     842:	0aee                	slli	s5,s5,0x1b
     844:	0000                	unimp
     846:	0af0                	addi	a2,sp,348
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	0000                	unimp
     854:	0800                	addi	s0,sp,16
     856:	000a                	c.slli	zero,0x2
     858:	4800                	lw	s0,16(s0)
     85a:	000a                	c.slli	zero,0x2
     85c:	0600                	addi	s0,sp,768
     85e:	0300                	addi	s0,sp,384
     860:	19a8                	addi	a0,sp,248
     862:	0000                	unimp
     864:	009f 0000 0000      	0x9f
     86a:	0000                	unimp
     86c:	4000                	lw	s0,0(s0)
     86e:	0009                	c.nop	2
     870:	0400                	addi	s0,sp,512
     872:	000a                	c.slli	zero,0x2
     874:	0100                	addi	s0,sp,128
     876:	6200                	flw	fs0,0(a2)
     878:	0a04                	addi	s1,sp,272
     87a:	0000                	unimp
     87c:	0a28                	addi	a0,sp,280
     87e:	0000                	unimp
     880:	7f850003          	lb	zero,2040(a0)
     884:	289f 000a 4800      	0x4800000a289f
     88a:	000a                	c.slli	zero,0x2
     88c:	0400                	addi	s0,sp,512
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
     892:	489f 000a dc00      	0xdc00000a489f
     898:	000a                	c.slli	zero,0x2
     89a:	0100                	addi	s0,sp,128
     89c:	6200                	flw	fs0,0(a2)
     89e:	0adc                	addi	a5,sp,340
     8a0:	0000                	unimp
     8a2:	0af0                	addi	a2,sp,348
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
     8aa:	009f 0000 0000      	0x9f
     8b0:	0000                	unimp
     8b2:	ea00                	fsw	fs0,16(a2)
     8b4:	0005                	c.nop	1
     8b6:	5800                	lw	s0,48(s0)
     8b8:	0006                	c.slli	zero,0x1
     8ba:	0100                	addi	s0,sp,128
     8bc:	5a00                	lw	s0,48(a2)
    int polyR[N+1];
     8be:	0658                	addi	a4,sp,772
     8c0:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	0659                	addi	a2,a2,22
    int polyR[N+1];
     8c4:	0000                	unimp
     8c6:	0001                	nop
     8c8:	0006595b          	0x6595b
     8cc:	6400                	flw	fs0,8(s0)
     8ce:	04000007          	0x4000007
    polyR[N] = 1;
     8d2:	f300                	fsw	fs0,32(a4)
     8d4:	5a01                	li	s4,-32
     8d6:	649f 0007 7a00      	0x7a000007649f
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	01000007          	0x1000007
     8e0:	5a00                	lw	s0,48(a2)
     8e2:	077a                	slli	a4,a4,0x1e
     8e4:	0000                	unimp
     8e6:	07fe                	slli	a5,a5,0x1f
     8e8:	0000                	unimp
     8ea:	0004                	0x4
     8ec:	9f5a01f3          	0x9f5a01f3
	...
     8f8:	05ea                	slli	a1,a1,0x1a
     8fa:	0000                	unimp
     8fc:	0654                	addi	a3,sp,772
     8fe:	0000                	unimp
     900:	0001                	nop
     902:	0006545b          	0x6545b
     906:	7800                	flw	fs0,48(s0)
     908:	0006                	c.slli	zero,0x1
     90a:	0100                	addi	s0,sp,128
     90c:	6b00                	flw	fs0,16(a4)
     90e:	0678                	addi	a4,sp,780
     910:	0000                	unimp
     912:	0764                	addi	s1,sp,908
     914:	0000                	unimp
     916:	0004                	0x4
     918:	9f5b01f3          	0x9f5b01f3
     91c:	0764                	addi	s1,sp,908
     91e:	0000                	unimp
     920:	077a                	slli	a4,a4,0x1e
     922:	0000                	unimp
     924:	0001                	nop
     926:	00077a5b          	0x77a5b
     92a:	fe00                	fsw	fs0,56(a2)
     92c:	04000007          	0x4000007
     930:	f300                	fsw	fs0,32(a4)
     932:	5b01                	li	s6,-32
     934:	009f 0000 0000      	0x9f
     93a:	0000                	unimp
     93c:	ea00                	fsw	fs0,16(a2)
     93e:	0005                	c.nop	1
    polyR[0] = -1;
     940:	4e00                	lw	s0,24(a2)
     942:	0006                	c.slli	zero,0x1
    for(i = 1; i < N; ++i){
     944:	0100                	addi	s0,sp,128
     946:	5c00                	lw	s0,56(s0)
     948:	064e                	slli	a2,a2,0x13
     94a:	0000                	unimp
    for (i = N; i < 55; ++i ){
     94c:	0744                	addi	s1,sp,900
     94e:	0000                	unimp
     950:	0001                	nop
     952:	4459                	li	s0,22
    for(i = 0; i < N; ++i){
     954:	50000007          	0x50000007
        random_keys[i] = f[i];
     958:	03000007          	0x3000007
     95c:	8700                	0x8700
    for(i = 0; i < N; ++i){
     95e:	9f01                	0x9f01
     960:	0750                	addi	a2,sp,900
     962:	0000                	unimp
     964:	0764                	addi	s1,sp,908
    for(i = N; i < (2*N); ++i){
     966:	0000                	unimp
     968:	0004                	0x4
     96a:	9f5c01f3          	0x9f5c01f3
        random_keys[i] = g[i-N];
     96e:	0764                	addi	s1,sp,908
     970:	0000                	unimp
     972:	07fe                	slli	a5,a5,0x1f
     974:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     976:	0001                	nop
     978:	0059                	c.nop	22
    for(i = (2*N); i < (3*N); ++i){
     97a:	0000                	unimp
     97c:	0000                	unimp
     97e:	0000                	unimp
    fp = ext_euclid(polyR, f, (N+1), p);
     980:	ea00                	fsw	fs0,16(a2)
     982:	0005                	c.nop	1
     984:	4e00                	lw	s0,24(a2)
     986:	0006                	c.slli	zero,0x1
     988:	0100                	addi	s0,sp,128
     98a:	5d00                	lw	s0,56(a0)
    for(i = (2*N); i < (3*N); ++i){
     98c:	064e                	slli	a2,a2,0x13
        random_keys[i] = fp[i-(2*N)];
     98e:	0000                	unimp
     990:	0746                	slli	a4,a4,0x11
     992:	0000                	unimp
     994:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     996:	4662                	lw	a2,24(sp)
     998:	64000007          	0x64000007
    fq = ext_euclid(polyR, f, (N+1), q);
     99c:	04000007          	0x4000007
     9a0:	f300                	fsw	fs0,32(a4)
     9a2:	5d01                	li	s10,-32
     9a4:	649f 0007 fe00      	0xfe000007649f
    for(i = (3*N); i < (4*N); ++i){
     9aa:	01000007          	0x1000007
        random_keys[i] = fq[i-(3*N)];
     9ae:	6200                	flw	fs0,0(a2)
	...
    for(i = (3*N); i < (4*N); ++i){
     9b8:	073a                	slli	a4,a4,0xe
    fg = polymult2(fq, N, g, N, 0);
     9ba:	0000                	unimp
     9bc:	0764                	addi	s1,sp,908
     9be:	0000                	unimp
     9c0:	0006                	c.slli	zero,0x1
     9c2:	00181803          	lh	a6,1(a6)
    for(i = 0; i < (2*N-1); ++i){
     9c6:	9f00                	0x9f00
	...
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	0644                	addi	s1,sp,772
     9d2:	0000                	unimp
     9d4:	0750                	addi	a2,sp,900
     9d6:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9d8:	0001                	nop
     9da:	00075067          	0x75067
     9de:	6400                	flw	fs0,8(s0)
     9e0:	06000007          	0x6000007
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e4:	f300                	fsw	fs0,32(a4)
     9e6:	5c01                	li	s8,-32
     9e8:	1c31                	addi	s8,s8,-20
    for(i = (4*N); i < (5*N); ++i){
     9ea:	649f 0007 fe00      	0xfe000007649f
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	01000007          	0x1000007
        random_keys[i] = polyR[i-(5*N)];
     9f4:	6700                	flw	fs0,8(a4)
	...
    for(i = (5*N); i < (6*N+1); ++i){
     9fe:	0644                	addi	s1,sp,772
     a00:	0000                	unimp
     a02:	064e                	slli	a2,a2,0x13
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
}
     a08:	9f30                	0x9f30
     a0a:	064e                	slli	a2,a2,0x13
     a0c:	0000                	unimp
     a0e:	0659                	addi	a2,a2,22
     a10:	0000                	unimp
     a12:	0001                	nop
     a14:	945f 0006 9800      	0x98000006945f
     a1a:	0006                	c.slli	zero,0x1
     a1c:	0100                	addi	s0,sp,128
     a1e:	5900                	lw	s0,48(a0)
     a20:	0698                	addi	a4,sp,832
     a22:	0000                	unimp
     a24:	06a2                	slli	a3,a3,0x8
     a26:	0000                	unimp
     a28:	0001                	nop
     a2a:	a45f 0006 af00      	0xaf000006a45f
     a30:	0006                	c.slli	zero,0x1
     a32:	0100                	addi	s0,sp,128
     a34:	5e00                	lw	s0,56(a2)
     a36:	06ea                	slli	a3,a3,0x1a
     a38:	0000                	unimp
     a3a:	06ee                	slli	a3,a3,0x1b
     a3c:	0000                	unimp
     a3e:	0002                	c.slli64	zero
     a40:	9f30                	0x9f30
     a42:	06ee                	slli	a3,a3,0x1b
     a44:	0000                	unimp
     a46:	06f9                	addi	a3,a3,30
        polyR[i] = 0;
     a48:	0000                	unimp
     a4a:	0001                	nop
     a4c:	1a5e                	slli	s4,s4,0x37
     a4e:	1e000007          	0x1e000007
    for(i = 1; i < N; ++i){
     a52:	02000007          	0x2000007
        f[i] = 0;
     a56:	3000                	fld	fs0,32(s0)
     a58:	1e9f 0007 2800      	0x280000071e9f
     a5e:	01000007          	0x1000007
     a62:	5e00                	lw	s0,56(a2)
        g[i] = 0;
     a64:	0736                	slli	a4,a4,0xd
     a66:	0000                	unimp
     a68:	0784                	addi	s1,sp,960
     a6a:	0000                	unimp
     a6c:	0001                	nop
    for (i = N; i < 55; ++i ){
     a6e:	845f 0007 8a00      	0x8a000007845f
        random_keys[i] = f[i];
     a74:	03000007          	0x3000007
     a78:	7f00                	flw	fs0,56(a4)
     a7a:	9f7f                	0x9f7f
     a7c:	078a                	slli	a5,a5,0x2
     a7e:	0000                	unimp
     a80:	078c                	addi	a1,sp,960
    for(i = 0; i < N; ++i){
     a82:	0000                	unimp
        random_keys[i] = f[i];
     a84:	0001                	nop
    for(i = 0; i < N; ++i){
     a86:	8c5f 0007 9e00      	0x9e0000078c5f
        random_keys[i] = g[i-N];
     a8c:	01000007          	0x1000007
     a90:	5e00                	lw	s0,56(a2)
    for(i = N; i < (2*N); ++i){
     a92:	079e                	slli	a5,a5,0x7
     a94:	0000                	unimp
     a96:	07a2                	slli	a5,a5,0x8
        random_keys[i] = fp[i-(2*N)];
     a98:	0000                	unimp
     a9a:	7f7e0003          	lb	zero,2039(t3) # 547f7 <_stack_start+0x447f7>
     a9e:	a29f 0007 b800      	0xb8000007a29f
    for(i = (2*N); i < (3*N); ++i){
     aa4:	01000007          	0x1000007
        random_keys[i] = fq[i-(3*N)];
     aa8:	5e00                	lw	s0,56(a2)
     aaa:	07b8                	addi	a4,sp,968
     aac:	0000                	unimp
     aae:	07bc                	addi	a5,sp,968
     ab0:	0000                	unimp
     ab2:	7f7e0003          	lb	zero,2039(t3)
    for(i = (3*N); i < (4*N); ++i){
     ab6:	bc9f 0007 d200      	0xd2000007bc9f
        fg[i] = fg[i]*p;
     abc:	01000007          	0x1000007
    for(i = 0; i < (2*N-1); ++i){
     ac0:	5e00                	lw	s0,56(a2)
        fg[i] = fg[i]*p;
     ac2:	07d2                	slli	a5,a5,0x14
     ac4:	0000                	unimp
     ac6:	07d4                	addi	a3,sp,964
     ac8:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     aca:	7f7e0003          	lb	zero,2039(t3)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ace:	d49f 0007 d600      	0xd6000007d49f
     ad4:	01000007          	0x1000007
    for(i = (4*N); i < (5*N); ++i){
     ad8:	5e00                	lw	s0,56(a2)
     ada:	07ea                	slli	a5,a5,0x1a
        random_keys[i] = polyR[i-(5*N)];
     adc:	0000                	unimp
     ade:	07ee                	slli	a5,a5,0x1b
     ae0:	0000                	unimp
     ae2:	0001                	nop
     ae4:	ee5f 0007 fc00      	0xfc000007ee5f
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	03000007          	0x3000007
     aee:	7f00                	flw	fs0,56(a4)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af0:	9f7f                	0x9f7f
     af2:	07fc                	addi	a5,sp,972
     af4:	0000                	unimp
     af6:	07fe                	slli	a5,a5,0x1f
     af8:	0000                	unimp
     afa:	0001                	nop
     afc:	005f 0000 0000      	0x5f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b02:	0000                	unimp
     b04:	2a00                	fld	fs0,16(a2)
     b06:	64000007          	0x64000007
     b0a:	01000007          	0x1000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0e:	5e00                	lw	s0,56(a2)
     b10:	07d6                	slli	a5,a5,0x15
     b12:	0000                	unimp
     b14:	07fe                	slli	a5,a5,0x1f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b16:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	0001                	nop
     b1a:	005e                	c.slli	zero,0x17
     b1c:	0000                	unimp
     b1e:	0000                	unimp
     b20:	0000                	unimp
     b22:	4200                	lw	s0,0(a2)
     b24:	0006                	c.slli	zero,0x1
     b26:	4800                	lw	s0,16(s0)
     b28:	02000007          	0x2000007
    for(i = 0; i < 48; ++i){
     b2c:	8300                	0x8300
     b2e:	6400                	flw	fs0,8(s0)
        temp[i] = temp[i] + message[i];
     b30:	fe000007          	0xfe000007
     b34:	02000007          	0x2000007
     b38:	8300                	0x8300
	...
    for(i = 0; i < 48; ++i){
     b42:	4200                	lw	s0,0(a2)
     b44:	0006                	c.slli	zero,0x1
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b46:	4a00                	lw	s0,16(a2)
     b48:	02000007          	0x2000007
     b4c:	8400                	0x8400
     b4e:	6400                	flw	fs0,8(s0)
     b50:	fe000007          	0xfe000007
     b54:	02000007          	0x2000007
    for(i = (2*N); i < (3*N); ++i){
     b58:	8400                	0x8400
	...
}
     b62:	4200                	lw	s0,0(a2)
     b64:	0006                	c.slli	zero,0x1
     b66:	5200                	lw	s0,32(a2)
     b68:	02000007          	0x2000007
     b6c:	8800                	0x8800
     b6e:	6400                	flw	fs0,8(s0)
     b70:	fe000007          	0xfe000007
        CT[i-(2*N)] = CT[i];
     b74:	02000007          	0x2000007
     b78:	8800                	0x8800
	...
    for(i = (2*N); i < (3*N); ++i){
     b82:	4200                	lw	s0,0(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b84:	0006                	c.slli	zero,0x1
     b86:	4e00                	lw	s0,24(a2)
     b88:	02000007          	0x2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     b8c:	8600                	0x8600
     b8e:	4e00                	lw	s0,24(a2)
     b90:	50000007          	0x50000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b94:	0c000007          	0xc000007
     b98:	8800                	0x8800
     b9a:	8700                	0x8700
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b9c:	3201                	jal	49c <polydiv+0x82>
     b9e:	2324                	fld	fs1,64(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ba0:	1af0090f          	0x1af0090f
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba4:	501c                	lw	a5,32(s0)
     ba6:	52000007          	0x52000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     baa:	0d000007          	0xd000007
     bae:	8800                	0x8800
     bb0:	f300                	fsw	fs0,32(a4)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bb2:	5c01                	li	s8,-32
     bb4:	2432                	fld	fs0,264(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bb6:	f0090f23          	sb	zero,-226(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bba:	1c1a                	slli	s8,s8,0x26
     bbc:	0764                	addi	s1,sp,908
     bbe:	0000                	unimp
     bc0:	07fe                	slli	a5,a5,0x1f
     bc2:	0000                	unimp
     bc4:	0002                	c.slli64	zero
     bc6:	0086                	slli	ra,ra,0x1
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     bd0:	0642                	slli	a2,a2,0x10
     bd2:	0000                	unimp
        if(a2[i] <= q/2)
     bd4:	0756                	slli	a4,a4,0x15
     bd6:	0000                	unimp
     bd8:	0002                	c.slli64	zero
    for (i = 0; i < N; ++i){
     bda:	008a                	slli	ra,ra,0x2
     bdc:	0764                	addi	s1,sp,908
     bde:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     be0:	07fe                	slli	a5,a5,0x1f
     be2:	0000                	unimp
     be4:	0002                	c.slli64	zero
     be6:	008a                	slli	ra,ra,0x2
	...
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bf0:	0642                	slli	a2,a2,0x10
     bf2:	0000                	unimp
     bf4:	0754                	addi	a3,sp,900
    for(i = (2*N); i < ((2*N)+N); ++i){
     bf6:	0000                	unimp
     bf8:	0002                	c.slli64	zero
     bfa:	0089                	addi	ra,ra,2
}
     bfc:	0754                	addi	a3,sp,900
     bfe:	0000                	unimp
     c00:	0756                	slli	a4,a4,0x15
     c02:	0000                	unimp
     c04:	000d                	c.nop	3
     c06:	008a                	slli	ra,ra,0x2
     c08:	325c01f3          	0x325c01f3
     c0c:	2324                	fld	fs1,64(a4)
     c0e:	1af0090f          	0x1af0090f
        a2[i-(2*N)] = a2[i];
     c12:	641c                	flw	fa5,8(s0)
     c14:	fe000007          	0xfe000007
     c18:	02000007          	0x2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1c:	8900                	0x8900
	...
        if(a2[i] <= q/2)
     c26:	4400                	lw	s0,8(s0)
     c28:	0006                	c.slli	zero,0x1
            a2[i] = (-1)*(q-a2[i]);
     c2a:	3e00                	fld	fs0,56(a2)
     c2c:	02000007          	0x2000007
    for (i = 0; i < N; ++i){
     c30:	7200                	flw	fs0,32(a2)
     c32:	3e00                	fld	fs0,56(a2)
     c34:	4c000007          	0x4c000007
        c2[i-(2*N)] = c2[i];
     c38:	02000007          	0x2000007
     c3c:	8500                	0x8500
    for(i = (2*N); i < ((2*N)+N); ++i){
     c3e:	4c00                	lw	s0,24(s0)
     c40:	50000007          	0x50000007
        c2[i-(2*N)] = c2[i];
     c44:	0c000007          	0xc000007
  jal x0, default_exc_handler
     c48:	8900                	0x8900
     c4a:	8700                	0x8700
  mv  x1, x0
     c4c:	3201                	jal	54c <polydiv+0x132>
     c4e:	2324                	fld	fs1,64(a4)
  mv  x2, x1
     c50:	1af0090f          	0x1af0090f
  mv  x4, x1
     c54:	501c                	lw	a5,32(s0)
  mv  x5, x1
     c56:	54000007          	0x54000007
  mv  x7, x1
     c5a:	0d000007          	0xd000007
  mv  x9, x1
     c5e:	8900                	0x8900
  mv x10, x1
     c60:	f300                	fsw	fs0,32(a4)
  mv x11, x1
     c62:	5c01                	li	s8,-32
  mv x12, x1
     c64:	2432                	fld	fs0,264(sp)
  mv x13, x1
     c66:	f0090f23          	sb	zero,-226(s2)
  mv x15, x1
     c6a:	1c1a                	slli	s8,s8,0x26
  mv x16, x1
     c6c:	0754                	addi	a3,sp,900
  mv x17, x1
     c6e:	0000                	unimp
  mv x18, x1
     c70:	0756                	slli	a4,a4,0x15
  mv x19, x1
     c72:	0000                	unimp
  mv x20, x1
     c74:	008a000f          	0x8a000f
  mv x22, x1
     c78:	325c01f3          	0x325c01f3
  mv x24, x1
     c7c:	2324                	fld	fs1,64(a4)
  mv x25, x1
     c7e:	1af0090f          	0x1af0090f
  mv x27, x1
     c82:	2431                	jal	e8e <main+0x4a>
  mv x28, x1
     c84:	641c                	flw	fa5,8(s0)
  mv x29, x1
     c86:	fe000007          	0xfe000007
  mv x31, x1
     c8a:	02000007          	0x2000007
  la   x2, _stack_start
     c8e:	7200                	flw	fs0,32(a2)
	...
  la x26, _bss_start
     c98:	9400                	0x9400
     c9a:	0006                	c.slli	zero,0x1
  la x27, _bss_end
     c9c:	ae00                	fsd	fs0,24(a2)
     c9e:	0006                	c.slli	zero,0x1
     ca0:	0100                	addi	s0,sp,128
     ca2:	5a00                	lw	s0,48(a2)
  bge x26, x27, zero_loop_end
     ca4:	077a                	slli	a4,a4,0x1e
     ca6:	0000                	unimp
  sw x0, 0(x26)
     ca8:	07a6                	slli	a5,a5,0x9
     caa:	0000                	unimp
  addi x26, x26, 4
     cac:	0001                	nop
  ble x26, x27, zero_loop
     cae:	005a                	c.slli	zero,0x16
     cb0:	0000                	unimp
  addi x10, x0, 0
     cb2:	0000                	unimp
     cb4:	0000                	unimp
  addi x11, x0, 0
     cb6:	be00                	fsd	fs0,56(a2)
     cb8:	0006                	c.slli	zero,0x1
  jal x1, main
     cba:	c200                	sw	s0,0(a2)
     cbc:	0006                	c.slli	zero,0x1
     cbe:	0100                	addi	s0,sp,128
     cc0:	5a00                	lw	s0,48(a2)
     cc2:	06c2                	slli	a3,a3,0x10
     cc4:	0000                	unimp
     cc6:	000006c3          	fmadd.s	fa3,ft0,ft0,ft0,rne
     cca:	0001                	nop
     ccc:	0000005b          	0x5b
     cd0:	0000                	unimp
     cd2:	0000                	unimp
     cd4:	dc00                	sw	s0,56(s0)
     cd6:	0006                	c.slli	zero,0x1
     cd8:	e000                	fsw	fs0,0(s0)
     cda:	0006                	c.slli	zero,0x1
     cdc:	0100                	addi	s0,sp,128
     cde:	5a00                	lw	s0,48(a2)
     ce0:	06e0                	addi	s0,sp,844
     ce2:	0000                	unimp
     ce4:	06e1                	addi	a3,a3,24
     ce6:	0000                	unimp
     ce8:	0001                	nop
     cea:	0000005b          	0x5b
     cee:	0000                	unimp
     cf0:	0000                	unimp
     cf2:	4400                	lw	s0,8(s0)
     cf4:	0006                	c.slli	zero,0x1
     cf6:	7800                	flw	fs0,48(s0)
     cf8:	0006                	c.slli	zero,0x1
     cfa:	0200                	addi	s0,sp,256
     cfc:	3100                	fld	fs0,32(a0)
     cfe:	789f 0006 1e00      	0x1e000006789f
     d04:	02000007          	0x2000007
     d08:	3000                	fld	fs0,32(s0)
     d0a:	1e9f 0007 3600      	0x360000071e9f
     d10:	01000007          	0x1000007
     d14:	5f00                	lw	s0,56(a4)
     d16:	0764                	addi	s1,sp,908
     d18:	0000                	unimp
     d1a:	077a                	slli	a4,a4,0x1e
     d1c:	0000                	unimp
     d1e:	0002                	c.slli64	zero
     d20:	9f31                	0x9f31
     d22:	077a                	slli	a4,a4,0x1e
     d24:	0000                	unimp
     d26:	07c0                	addi	s0,sp,964
     d28:	0000                	unimp
     d2a:	0002                	c.slli64	zero
     d2c:	9f30                	0x9f30
     d2e:	07c0                	addi	s0,sp,964
     d30:	0000                	unimp
     d32:	07ea                	slli	a5,a5,0x1a
     d34:	0000                	unimp
     d36:	0001                	nop
     d38:	005f 0000 0000      	0x5f
     d3e:	0000                	unimp
     d40:	4200                	lw	s0,0(a2)
     d42:	0006                	c.slli	zero,0x1
     d44:	5000                	lw	s0,32(s0)
     d46:	01000007          	0x1000007
     d4a:	6700                	flw	fs0,8(a4)
     d4c:	0750                	addi	a2,sp,900
     d4e:	0000                	unimp
     d50:	0764                	addi	s1,sp,908
     d52:	0000                	unimp
     d54:	0006                	c.slli	zero,0x1
     d56:	315c01f3          	0x315c01f3
     d5a:	9f1c                	0x9f1c
     d5c:	0764                	addi	s1,sp,908
     d5e:	0000                	unimp
     d60:	07fe                	slli	a5,a5,0x1f
     d62:	0000                	unimp
     d64:	0001                	nop
     d66:	00000067          	jr	zero # 0 <__DYNAMIC>
     d6a:	0000                	unimp
     d6c:	0000                	unimp
     d6e:	4200                	lw	s0,0(a2)
     d70:	0006                	c.slli	zero,0x1
     d72:	5000                	lw	s0,32(s0)
     d74:	01000007          	0x1000007
     d78:	6700                	flw	fs0,8(a4)
     d7a:	0750                	addi	a2,sp,900
     d7c:	0000                	unimp
     d7e:	0764                	addi	s1,sp,908
     d80:	0000                	unimp
     d82:	0006                	c.slli	zero,0x1
     d84:	315c01f3          	0x315c01f3
     d88:	9f1c                	0x9f1c
     d8a:	0764                	addi	s1,sp,908
     d8c:	0000                	unimp
     d8e:	07fe                	slli	a5,a5,0x1f
     d90:	0000                	unimp
     d92:	0001                	nop
     d94:	00000067          	jr	zero # 0 <__DYNAMIC>
     d98:	0000                	unimp
     d9a:	0000                	unimp
     d9c:	4200                	lw	s0,0(a2)
     d9e:	0006                	c.slli	zero,0x1
     da0:	5000                	lw	s0,32(s0)
     da2:	01000007          	0x1000007
     da6:	6700                	flw	fs0,8(a4)
     da8:	0750                	addi	a2,sp,900
     daa:	0000                	unimp
     dac:	0764                	addi	s1,sp,908
     dae:	0000                	unimp
     db0:	0006                	c.slli	zero,0x1
     db2:	315c01f3          	0x315c01f3
     db6:	9f1c                	0x9f1c
     db8:	0764                	addi	s1,sp,908
     dba:	0000                	unimp
     dbc:	07fe                	slli	a5,a5,0x1f
     dbe:	0000                	unimp
     dc0:	0001                	nop
     dc2:	00000067          	jr	zero # 0 <__DYNAMIC>
     dc6:	0000                	unimp
     dc8:	0000                	unimp
     dca:	4200                	lw	s0,0(a2)
     dcc:	0006                	c.slli	zero,0x1
     dce:	5000                	lw	s0,32(s0)
     dd0:	01000007          	0x1000007
     dd4:	6700                	flw	fs0,8(a4)
     dd6:	0750                	addi	a2,sp,900
     dd8:	0000                	unimp
     dda:	0764                	addi	s1,sp,908
     ddc:	0000                	unimp
     dde:	0006                	c.slli	zero,0x1
     de0:	315c01f3          	0x315c01f3
     de4:	9f1c                	0x9f1c
     de6:	0764                	addi	s1,sp,908
     de8:	0000                	unimp
     dea:	07fe                	slli	a5,a5,0x1f
     dec:	0000                	unimp
     dee:	0001                	nop
     df0:	00000067          	jr	zero # 0 <__DYNAMIC>
     df4:	0000                	unimp
     df6:	0000                	unimp
     df8:	4200                	lw	s0,0(a2)
     dfa:	0006                	c.slli	zero,0x1
     dfc:	5000                	lw	s0,32(s0)
     dfe:	01000007          	0x1000007
     e02:	6700                	flw	fs0,8(a4)
     e04:	0750                	addi	a2,sp,900
     e06:	0000                	unimp
     e08:	0764                	addi	s1,sp,908
     e0a:	0000                	unimp
     e0c:	0006                	c.slli	zero,0x1
     e0e:	315c01f3          	0x315c01f3
     e12:	9f1c                	0x9f1c
     e14:	0764                	addi	s1,sp,908
     e16:	0000                	unimp
     e18:	07fe                	slli	a5,a5,0x1f
     e1a:	0000                	unimp
     e1c:	0001                	nop
     e1e:	00000067          	jr	zero # 0 <__DYNAMIC>
     e22:	0000                	unimp
     e24:	0000                	unimp
     e26:	4200                	lw	s0,0(a2)
     e28:	0006                	c.slli	zero,0x1
     e2a:	5000                	lw	s0,32(s0)
     e2c:	01000007          	0x1000007
     e30:	6700                	flw	fs0,8(a4)
     e32:	0750                	addi	a2,sp,900
     e34:	0000                	unimp
     e36:	0764                	addi	s1,sp,908
     e38:	0000                	unimp
     e3a:	0006                	c.slli	zero,0x1
     e3c:	315c01f3          	0x315c01f3
     e40:	9f1c                	0x9f1c
     e42:	0764                	addi	s1,sp,908
int main(){
     e44:	0000                	unimp
     e46:	07fe                	slli	a5,a5,0x1f
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e48:	0000                	unimp
     e4a:	0001                	nop
     e4c:	00000067          	jr	zero # 0 <__DYNAMIC>
     e50:	0000                	unimp
     e52:	0000                	unimp
     e54:	4200                	lw	s0,0(a2)
int main(){
     e56:	0006                	c.slli	zero,0x1
     e58:	5000                	lw	s0,32(s0)
     e5a:	01000007          	0x1000007
     e5e:	6700                	flw	fs0,8(a4)
     e60:	0750                	addi	a2,sp,900
     e62:	0000                	unimp
     e64:	0764                	addi	s1,sp,908
    resultkon[0] = 0xaaaaaaa0;
     e66:	0000                	unimp
     e68:	0006                	c.slli	zero,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e6a:	315c01f3          	0x315c01f3
    resultkon[0] = 0xaaaaaaa0;
     e6e:	9f1c                	0x9f1c
     e70:	0764                	addi	s1,sp,908
     e72:	0000                	unimp
     e74:	07fe                	slli	a5,a5,0x1f
     e76:	0000                	unimp
    keys = generate_keys(N, p, q);
     e78:	0001                	nop
     e7a:	00000067          	jr	zero # 0 <__DYNAMIC>
     e7e:	0000                	unimp
     e80:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     e82:	1a00                	addi	s0,sp,304
    resultkon[0] = 0xaaaaaaa1;
     e84:	0004                	0x4
     e86:	6c00                	flw	fs0,24(s0)
    keys = generate_keys(N, p, q);
     e88:	0004                	0x4
    resultkon[0] = 0xaaaaaaa1;
     e8a:	0100                	addi	s0,sp,128
     e8c:	5a00                	lw	s0,48(a2)
    for(i = 0; i < N; ++i){
     e8e:	046c                	addi	a1,sp,524
     e90:	0000                	unimp
        secret_key_f[i] = keys[i];
     e92:	0475                	addi	s0,s0,29
     e94:	0000                	unimp
     e96:	0001                	nop
     e98:	0004755b          	0x4755b
     e9c:	ea00                	fsw	fs0,16(a2)
    for(i = 0; i < N; ++i){
     e9e:	0005                	c.nop	1
     ea0:	0400                	addi	s0,sp,512
     ea2:	f300                	fsw	fs0,32(a4)
    for(i = N; i < (2*N); ++i){
     ea4:	5a01                	li	s4,-32
     ea6:	009f 0000 0000      	0x9f
     eac:	0000                	unimp
     eae:	1a00                	addi	s0,sp,304
        secret_key_fp[i-(2*N)] = keys[i];
     eb0:	0004                	0x4
     eb2:	6a00                	flw	fs0,16(a2)
     eb4:	0004                	0x4
     eb6:	0100                	addi	s0,sp,128
     eb8:	5b00                	lw	s0,48(a4)
    for(i = (2*N); i < (3*N); ++i){
     eba:	046a                	slli	s0,s0,0x1a
     ebc:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ebe:	0508                	addi	a0,sp,640
     ec0:	0000                	unimp
     ec2:	0001                	nop
     ec4:	0859                	addi	a6,a6,22
     ec6:	0005                	c.nop	1
     ec8:	2800                	fld	fs0,16(s0)
        public_key[i-(4*N)] = keys[i];
     eca:	0005                	c.nop	1
     ecc:	0300                	addi	s0,sp,384
     ece:	8a00                	0x8a00
     ed0:	9f01                	0x9f01
     ed2:	0528                	addi	a0,sp,648
    for(i = (4*N); i < (5*N); ++i){
     ed4:	0000                	unimp
     ed6:	0536                	slli	a0,a0,0xd
     ed8:	0000                	unimp
     eda:	0004                	0x4
     edc:	9f5b01f3          	0x9f5b01f3
        ring_poly[i-(5*N)] = keys[i];
     ee0:	0536                	slli	a0,a0,0xd
     ee2:	0000                	unimp
     ee4:	05d8                	addi	a4,sp,708
     ee6:	0000                	unimp
     ee8:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     eea:	d859                	beqz	s0,e80 <main+0x3c>
     eec:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb0;
     eee:	ea00                	fsw	fs0,16(a2)
     ef0:	0005                	c.nop	1
     ef2:	0300                	addi	s0,sp,384
     ef4:	8a00                	0x8a00
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef6:	9f01                	0x9f01
	...
    resultkon[0] = 0xbbbbbbb1;
     f00:	041a                	slli	s0,s0,0x6
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f02:	0000                	unimp
     f04:	0468                	addi	a0,sp,524
    resultkon[0] = 0xbbbbbbb0;
     f06:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f08:	0001                	nop
    resultkon[0] = 0xbbbbbbb1;
     f0a:	685c                	flw	fa5,20(s0)
    resultkon[0] = 0xccccccc0;
     f0c:	0004                	0x4
     f0e:	a600                	fsd	fs0,8(a2)
     f10:	0004                	0x4
     f12:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f14:	6800                	flw	fs0,16(s0)
    resultkon[0] = 0xccccccc0;
     f16:	04a6                	slli	s1,s1,0x9
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f18:	0000                	unimp
     f1a:	04b0                	addi	a2,sp,584
     f1c:	0000                	unimp
     f1e:	0004                	0x4
     f20:	9f5c01f3          	0x9f5c01f3
     f24:	04b0                	addi	a2,sp,584
     f26:	0000                	unimp
     f28:	04cc                	addi	a1,sp,580
     f2a:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
     f2c:	0001                	nop
     f2e:	cc68                	sw	a0,92(s0)
            resultkon[0] = 0xDEDEDEDE;
     f30:	0004                	0x4
     f32:	ea00                	fsw	fs0,16(a2)
    resultkon[0] = 0xccccccc1;	
     f34:	0005                	c.nop	1
     f36:	0400                	addi	s0,sp,512
            resultkon[0] = 0xDEDEDEDE;
     f38:	f300                	fsw	fs0,32(a4)
     f3a:	5c01                	li	s8,-32
    for(i = 0; i < 32; ++i){
     f3c:	009f 0000 0000      	0x9f
        if(!(message[i] == Dec_Message[i])){
     f42:	0000                	unimp
     f44:	1a00                	addi	s0,sp,304
     f46:	0004                	0x4
     f48:	7500                	flw	fs0,40(a0)
     f4a:	0004                	0x4
     f4c:	0100                	addi	s0,sp,128
     f4e:	5d00                	lw	s0,56(a0)
            resultkon[0] = 0xBABABABA;
     f50:	0475                	addi	s0,s0,29
     f52:	0000                	unimp
     f54:	051c                	addi	a5,sp,640
     f56:	0000                	unimp
     f58:	0001                	nop
}
     f5a:	1c64                	addi	s1,sp,572
     f5c:	0005                	c.nop	1
     f5e:	3600                	fld	fs0,40(a2)
     f60:	0005                	c.nop	1
     f62:	0400                	addi	s0,sp,512
     f64:	f300                	fsw	fs0,32(a4)
     f66:	5d01                	li	s10,-32
     f68:	369f 0005 ea00      	0xea000005369f
     f6e:	0005                	c.nop	1
     f70:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
     f72:	6400                	flw	fs0,8(s0)
	...
     f7c:	041a                	slli	s0,s0,0x6
     f7e:	0000                	unimp
     f80:	0475                	addi	s0,s0,29
     f82:	0000                	unimp
     f84:	0001                	nop
     f86:	755e                	flw	fa0,244(sp)
     f88:	0004                	0x4
     f8a:	1a00                	addi	s0,sp,304
     f8c:	0005                	c.nop	1
     f8e:	0100                	addi	s0,sp,128
     f90:	6300                	flw	fs0,0(a4)
     f92:	051a                	slli	a0,a0,0x6
     f94:	0000                	unimp
     f96:	0536                	slli	a0,a0,0xd
     f98:	0000                	unimp
     f9a:	0004                	0x4
     f9c:	9f5e01f3          	0x9f5e01f3
     fa0:	0536                	slli	a0,a0,0xd
     fa2:	0000                	unimp
     fa4:	05ea                	slli	a1,a1,0x1a
     fa6:	0000                	unimp
     fa8:	0001                	nop
     faa:	00000063          	beqz	zero,faa <__DTOR_END__+0x1e>
     fae:	0000                	unimp
     fb0:	0000                	unimp
     fb2:	a800                	fsd	fs0,16(s0)
     fb4:	0004                	0x4
     fb6:	b000                	fsd	fs0,32(s0)
     fb8:	0004                	0x4
     fba:	0100                	addi	s0,sp,128
     fbc:	6800                	flw	fs0,16(s0)
     fbe:	04cc                	addi	a1,sp,580
     fc0:	0000                	unimp
     fc2:	0524                	addi	s1,sp,648
     fc4:	0000                	unimp
     fc6:	0001                	nop
     fc8:	3668                	fld	fa0,232(a2)
     fca:	0005                	c.nop	1
     fcc:	ea00                	fsw	fs0,16(a2)
     fce:	0005                	c.nop	1
     fd0:	0100                	addi	s0,sp,128
     fd2:	6800                	flw	fs0,16(s0)
	...
     fdc:	04ea                	slli	s1,s1,0x1a
     fde:	0000                	unimp
     fe0:	000004fb          	0x4fb
     fe4:	0001                	nop
     fe6:	365f 0005 3e00      	0x3e000005365f
     fec:	0005                	c.nop	1
     fee:	0100                	addi	s0,sp,128
     ff0:	5f00                	lw	s0,56(a4)
	...
     ffa:	0490                	addi	a2,sp,576
     ffc:	0000                	unimp
     ffe:	0492                	slli	s1,s1,0x4
    1000:	0000                	unimp
    1002:	0002                	c.slli64	zero
    1004:	9f30                	0x9f30
    1006:	0492                	slli	s1,s1,0x4
    1008:	0000                	unimp
    100a:	0496                	slli	s1,s1,0x5
    100c:	0000                	unimp
    100e:	0001                	nop
    1010:	965f 0004 b000      	0xb0000004965f
    1016:	0004                	0x4
    1018:	0100                	addi	s0,sp,128
    101a:	6500                	flw	fs0,8(a0)
    101c:	04b0                	addi	a2,sp,584
    101e:	0000                	unimp
    1020:	04c6                	slli	s1,s1,0x11
    1022:	0000                	unimp
    1024:	0001                	nop
    1026:	c65f 0004 da00      	0xda000004c65f
    102c:	0004                	0x4
    102e:	0100                	addi	s0,sp,128
    1030:	6500                	flw	fs0,8(a0)
    1032:	04da                	slli	s1,s1,0x16
    1034:	0000                	unimp
    1036:	04ea                	slli	s1,s1,0x1a
    1038:	0000                	unimp
    103a:	0001                	nop
    103c:	fc5f 0004 1600      	0x16000004fc5f
    1042:	0005                	c.nop	1
    1044:	0100                	addi	s0,sp,128
    1046:	5900                	lw	s0,48(a0)
    1048:	0562                	slli	a0,a0,0x18
    104a:	0000                	unimp
    104c:	0566                	slli	a0,a0,0x19
    104e:	0000                	unimp
    1050:	0002                	c.slli64	zero
    1052:	9f30                	0x9f30
    1054:	0566                	slli	a0,a0,0x19
    1056:	0000                	unimp
    1058:	0571                	addi	a0,a0,28
    105a:	0000                	unimp
    105c:	0001                	nop
    105e:	725f 0005 7600      	0x76000005725f
    1064:	0005                	c.nop	1
    1066:	0200                	addi	s0,sp,256
    1068:	3000                	fld	fs0,32(s0)
    106a:	769f 0005 8100      	0x81000005769f
    1070:	0005                	c.nop	1
    1072:	0100                	addi	s0,sp,128
    1074:	5f00                	lw	s0,56(a4)
    1076:	0582                	c.slli64	a1
    1078:	0000                	unimp
    107a:	0584                	addi	s1,sp,704
    107c:	0000                	unimp
    107e:	0001                	nop
    1080:	846a                	mv	s0,s10
    1082:	0005                	c.nop	1
    1084:	a000                	fsd	fs0,0(s0)
    1086:	0005                	c.nop	1
    1088:	0100                	addi	s0,sp,128
    108a:	5f00                	lw	s0,56(a4)
    108c:	05a0                	addi	s0,sp,712
    108e:	0000                	unimp
    1090:	05a8                	addi	a0,sp,712
    1092:	0000                	unimp
    1094:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    1098:	a89f 0005 b600      	0xb6000005a89f
    109e:	0005                	c.nop	1
    10a0:	0100                	addi	s0,sp,128
    10a2:	5f00                	lw	s0,56(a4)
    10a4:	05b6                	slli	a1,a1,0xd
    10a6:	0000                	unimp
    10a8:	05be                	slli	a1,a1,0xf
    10aa:	0000                	unimp
    10ac:	7f7f0003          	lb	zero,2039(t5)
    10b0:	be9f 0005 c600      	0xc6000005be9f
    10b6:	0005                	c.nop	1
    10b8:	0100                	addi	s0,sp,128
    10ba:	5f00                	lw	s0,56(a4)
    10bc:	05c6                	slli	a1,a1,0x11
    10be:	0000                	unimp
    10c0:	05d8                	addi	a4,sp,708
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	d85d                	beqz	s0,107c <__DTOR_END__+0xf0>
    10c8:	0005                	c.nop	1
    10ca:	ea00                	fsw	fs0,16(a2)
    10cc:	0005                	c.nop	1
    10ce:	0100                	addi	s0,sp,128
    10d0:	5900                	lw	s0,48(a0)
	...
    10da:	04ea                	slli	s1,s1,0x1a
    10dc:	0000                	unimp
    10de:	000004fb          	0x4fb
    10e2:	0001                	nop
    10e4:	365e                	fld	fa2,496(sp)
    10e6:	0005                	c.nop	1
    10e8:	3a00                	fld	fs0,48(a2)
    10ea:	0005                	c.nop	1
    10ec:	0100                	addi	s0,sp,128
    10ee:	5e00                	lw	s0,56(a2)
	...
    10f8:	050c                	addi	a1,sp,640
    10fa:	0000                	unimp
    10fc:	0536                	slli	a0,a0,0xd
    10fe:	0000                	unimp
    1100:	0006                	c.slli	zero,0x1
    1102:	0015c003          	lbu	zero,1(a1) # b6327b5 <_stack_start+0xb6227b5>
    1106:	9f00                	0x9f00
	...
    1110:	0466                	slli	s0,s0,0x19
    1112:	0000                	unimp
    1114:	0520                	addi	s0,sp,648
    1116:	0000                	unimp
    1118:	0002                	c.slli64	zero
    111a:	0086                	slli	ra,ra,0x1
    111c:	0536                	slli	a0,a0,0xd
    111e:	0000                	unimp
    1120:	05ea                	slli	a1,a1,0x1a
    1122:	0000                	unimp
    1124:	0002                	c.slli64	zero
    1126:	0086                	slli	ra,ra,0x1
	...
    1130:	0466                	slli	s0,s0,0x19
    1132:	0000                	unimp
    1134:	0522                	slli	a0,a0,0x8
    1136:	0000                	unimp
    1138:	0002                	c.slli64	zero
    113a:	05360087          	0x5360087
    113e:	0000                	unimp
    1140:	05ea                	slli	a1,a1,0x1a
    1142:	0000                	unimp
    1144:	0002                	c.slli64	zero
    1146:	00000087          	0x87
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	0560                	addi	s0,sp,652
    1152:	0000                	unimp
    1154:	0561                	addi	a0,a0,24
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	615a                	flw	ft2,148(sp)
    115c:	0005                	c.nop	1
    115e:	d800                	sw	s0,48(s0)
    1160:	0005                	c.nop	1
    1162:	0100                	addi	s0,sp,128
    1164:	6b00                	flw	fs0,16(a4)
	...
    116e:	0466                	slli	s0,s0,0x19
    1170:	0000                	unimp
    1172:	0508                	addi	a0,sp,640
    1174:	0000                	unimp
    1176:	0002                	c.slli64	zero
    1178:	0082                	c.slli64	ra
    117a:	0508                	addi	a0,sp,640
    117c:	0000                	unimp
    117e:	0522                	slli	a0,a0,0x8
    1180:	0000                	unimp
    1182:	000c                	0xc
    1184:	018a0087          	0x18a0087
    1188:	2432                	fld	fs0,264(sp)
    118a:	f0090f23          	sb	zero,-226(s2)
    118e:	1c1a                	slli	s8,s8,0x26
    1190:	0536                	slli	a0,a0,0xd
    1192:	0000                	unimp
    1194:	05d8                	addi	a4,sp,708
    1196:	0000                	unimp
    1198:	0002                	c.slli64	zero
    119a:	0082                	c.slli64	ra
    119c:	05d8                	addi	a4,sp,708
    119e:	0000                	unimp
    11a0:	05ea                	slli	a1,a1,0x1a
    11a2:	0000                	unimp
    11a4:	000c                	0xc
    11a6:	018a0087          	0x18a0087
    11aa:	2432                	fld	fs0,264(sp)
    11ac:	f0090f23          	sb	zero,-226(s2)
    11b0:	1c1a                	slli	s8,s8,0x26
	...
    11ba:	0480                	addi	s0,sp,576
    11bc:	0000                	unimp
    11be:	0492                	slli	s1,s1,0x4
    11c0:	0000                	unimp
    11c2:	0002                	c.slli64	zero
    11c4:	0089                	addi	ra,ra,2
    11c6:	0492                	slli	s1,s1,0x4
    11c8:	0000                	unimp
    11ca:	0510                	addi	a2,sp,640
    11cc:	0000                	unimp
    11ce:	0002                	c.slli64	zero
    11d0:	0072                	c.slli	zero,0x1c
    11d2:	0510                	addi	a2,sp,640
    11d4:	0000                	unimp
    11d6:	0526                	slli	a0,a0,0x9
    11d8:	0000                	unimp
    11da:	0002                	c.slli64	zero
    11dc:	0089                	addi	ra,ra,2
    11de:	0536                	slli	a0,a0,0xd
    11e0:	0000                	unimp
    11e2:	05ea                	slli	a1,a1,0x1a
    11e4:	0000                	unimp
    11e6:	0002                	c.slli64	zero
    11e8:	0072                	c.slli	zero,0x1c
	...
    11f2:	0466                	slli	s0,s0,0x19
    11f4:	0000                	unimp
    11f6:	0528                	addi	a0,sp,648
    11f8:	0000                	unimp
    11fa:	0001                	nop
    11fc:	286a                	fld	fa6,152(sp)
    11fe:	0005                	c.nop	1
    1200:	3600                	fld	fs0,40(a2)
    1202:	0005                	c.nop	1
    1204:	0600                	addi	s0,sp,768
    1206:	f300                	fsw	fs0,32(a4)
    1208:	5b01                	li	s6,-32
    120a:	1c31                	addi	s8,s8,-20
    120c:	369f 0005 ea00      	0xea000005369f
    1212:	0005                	c.nop	1
    1214:	0100                	addi	s0,sp,128
    1216:	6a00                	flw	fs0,16(a2)
	...
    1220:	0466                	slli	s0,s0,0x19
    1222:	0000                	unimp
    1224:	0528                	addi	a0,sp,648
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	286a                	fld	fa6,152(sp)
    122c:	0005                	c.nop	1
    122e:	3600                	fld	fs0,40(a2)
    1230:	0005                	c.nop	1
    1232:	0600                	addi	s0,sp,768
    1234:	f300                	fsw	fs0,32(a4)
    1236:	5b01                	li	s6,-32
    1238:	1c31                	addi	s8,s8,-20
    123a:	369f 0005 ea00      	0xea000005369f
    1240:	0005                	c.nop	1
    1242:	0100                	addi	s0,sp,128
    1244:	6a00                	flw	fs0,16(a2)
	...
    124e:	0466                	slli	s0,s0,0x19
    1250:	0000                	unimp
    1252:	0528                	addi	a0,sp,648
    1254:	0000                	unimp
    1256:	0001                	nop
    1258:	286a                	fld	fa6,152(sp)
    125a:	0005                	c.nop	1
    125c:	3600                	fld	fs0,40(a2)
    125e:	0005                	c.nop	1
    1260:	0600                	addi	s0,sp,768
    1262:	f300                	fsw	fs0,32(a4)
    1264:	5b01                	li	s6,-32
    1266:	1c31                	addi	s8,s8,-20
    1268:	369f 0005 ea00      	0xea000005369f
    126e:	0005                	c.nop	1
    1270:	0100                	addi	s0,sp,128
    1272:	6a00                	flw	fs0,16(a2)
	...
    127c:	0474                	addi	a3,sp,524
    127e:	0000                	unimp
    1280:	0496                	slli	s1,s1,0x5
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	9665                	srai	a2,a2,0x39
    1288:	0004                	0x4
    128a:	b000                	fsd	fs0,32(s0)
    128c:	0004                	0x4
    128e:	0300                	addi	s0,sp,384
    1290:	8400                	0x8400
    1292:	9f7f                	0x9f7f
    1294:	04b0                	addi	a2,sp,584
    1296:	0000                	unimp
    1298:	04c6                	slli	s1,s1,0x11
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	c665                	beqz	a2,1386 <product2+0x1e>
    12a0:	0004                	0x4
    12a2:	1c00                	addi	s0,sp,560
    12a4:	0005                	c.nop	1
    12a6:	0300                	addi	s0,sp,384
    12a8:	8400                	0x8400
    12aa:	9f7f                	0x9f7f
    12ac:	051c                	addi	a5,sp,640
    12ae:	0000                	unimp
    12b0:	0536                	slli	a0,a0,0xd
    12b2:	0000                	unimp
    12b4:	0006                	c.slli	zero,0x1
    12b6:	315d01f3          	0x315d01f3
    12ba:	9f1c                	0x9f1c
    12bc:	0536                	slli	a0,a0,0xd
    12be:	0000                	unimp
    12c0:	05ea                	slli	a1,a1,0x1a
    12c2:	0000                	unimp
    12c4:	7f840003          	lb	zero,2040(s0) # 7f8 <ext_euclid+0x20e>
    12c8:	009f 0000 0000      	0x9f
    12ce:	0000                	unimp
    12d0:	aa00                	fsd	fs0,16(a2)
    12d2:	0002                	c.slli64	zero
    12d4:	2600                	fld	fs0,8(a2)
    12d6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12da:	5a00                	lw	s0,48(a2)
    12dc:	0326                	slli	t1,t1,0x9
    12de:	0000                	unimp
    12e0:	0000032b          	0x32b
    12e4:	0001                	nop
    12e6:	00032b5b          	0x32b5b
    12ea:	5200                	lw	s0,32(a2)
    12ec:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    12f0:	f300                	fsw	fs0,32(a4)
    12f2:	5a01                	li	s4,-32
    12f4:	529f 0003 7400      	0x74000003529f
    12fa:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12fe:	5a00                	lw	s0,48(a2)
    1300:	0374                	addi	a3,sp,396
    1302:	0000                	unimp
    1304:	041a                	slli	s0,s0,0x6
    1306:	0000                	unimp
    1308:	0004                	0x4
    130a:	9f5a01f3          	0x9f5a01f3
	...
    1316:	02aa                	slli	t0,t0,0xa
    1318:	0000                	unimp
    131a:	0324                	addi	s1,sp,392
    131c:	0000                	unimp
    131e:	0001                	nop
    1320:	0003245b          	0x3245b
    1324:	2b00                	fld	fs0,16(a4)
    1326:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    132a:	5c00                	lw	s0,56(s0)
    132c:	0000032b          	0x32b
    1330:	0352                	slli	t1,t1,0x14
    1332:	0000                	unimp
    1334:	01880003          	lb	zero,24(a6)
    1338:	529f 0003 7400      	0x74000003529f
    133e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1342:	5b00                	lw	s0,48(a4)
    1344:	0374                	addi	a3,sp,396
    1346:	0000                	unimp
    1348:	0408                	addi	a0,sp,512
    134a:	0000                	unimp
    134c:	01880003          	lb	zero,24(a6)
    1350:	089f 0004 1a00      	0x1a000004089f
    1356:	0004                	0x4
    1358:	0400                	addi	s0,sp,512
    135a:	f300                	fsw	fs0,32(a4)
    135c:	5b01                	li	s6,-32
    135e:	009f 0000 0000      	0x9f
    1364:	0000                	unimp
    1366:	aa00                	fsd	fs0,16(a2)
    1368:	0002                	c.slli64	zero
    136a:	1c00                	addi	s0,sp,560
    136c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1370:	5c00                	lw	s0,56(s0)
    1372:	031c                	addi	a5,sp,384
    1374:	0000                	unimp
    1376:	0000032b          	0x32b
    137a:	0001                	nop
    137c:	2b60                	fld	fs0,208(a4)
    137e:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x106>
    1382:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1386:	7800                	flw	fs0,48(s0)
    1388:	7fbc                	flw	fa5,120(a5)
    138a:	0352                	slli	t1,t1,0x14
    138c:	0000                	unimp
    138e:	0374                	addi	a3,sp,396
    1390:	0000                	unimp
    1392:	0001                	nop
    1394:	7460                	flw	fs0,108(s0)
    1396:	f8000003          	lb	zero,-128(zero) # ffffff80 <_stack_start+0xfffeff80>
    139a:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    139e:	7800                	flw	fs0,48(s0)
    13a0:	7fbc                	flw	fa5,120(a5)
    13a2:	03f8                	addi	a4,sp,460
    13a4:	0000                	unimp
    13a6:	041a                	slli	s0,s0,0x6
    13a8:	0000                	unimp
    13aa:	bc910003          	lb	zero,-1079(sp)
    13ae:	007f                	0x7f
    13b0:	0000                	unimp
    13b2:	0000                	unimp
    13b4:	0000                	unimp
    13b6:	aa00                	fsd	fs0,16(a2)
    13b8:	0002                	c.slli64	zero
    13ba:	1200                	addi	s0,sp,288
    13bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13c0:	5d00                	lw	s0,56(a0)
    13c2:	0312                	slli	t1,t1,0x4
    13c4:	0000                	unimp
    13c6:	03fe                	slli	t2,t2,0x1f
    13c8:	0000                	unimp
    13ca:	0001                	nop
    13cc:	0003fe63          	bgeu	t2,zero,13e8 <product2+0x80>
    13d0:	1a00                	addi	s0,sp,304
    13d2:	0004                	0x4
    13d4:	0400                	addi	s0,sp,512
    13d6:	f300                	fsw	fs0,32(a4)
    13d8:	5d01                	li	s10,-32
    13da:	009f 0000 0000      	0x9f
    13e0:	0000                	unimp
    13e2:	aa00                	fsd	fs0,16(a2)
    13e4:	0002                	c.slli64	zero
    13e6:	1400                	addi	s0,sp,544
    13e8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13ec:	5e00                	lw	s0,56(a2)
    13ee:	0314                	addi	a3,sp,384
    13f0:	0000                	unimp
    13f2:	040e                	slli	s0,s0,0x3
    13f4:	0000                	unimp
    13f6:	0001                	nop
    13f8:	00040e6b          	0x40e6b
    13fc:	1a00                	addi	s0,sp,304
    13fe:	0004                	0x4
    1400:	0400                	addi	s0,sp,512
    1402:	f300                	fsw	fs0,32(a4)
    1404:	5e01                	li	t3,-32
    1406:	009f 0000 0000      	0x9f
    140c:	0000                	unimp
    140e:	0600                	addi	s0,sp,768
    1410:	4a000003          	lb	zero,1184(zero) # 4a0 <polydiv+0x86>
    1414:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1418:	8200                	0x8200
    141a:	4a00                	lw	s0,16(a2)
    141c:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x106>
    1420:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1424:	8900                	0x8900
    1426:	5200                	lw	s0,32(a2)
    1428:	74000003          	lb	zero,1856(zero) # 740 <ext_euclid+0x156>
    142c:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1430:	8200                	0x8200
    1432:	7400                	flw	fs0,40(s0)
    1434:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    1438:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    143c:	8900                	0x8900
    143e:	ae00                	fsd	fs0,24(a2)
    1440:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    1444:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1448:	8900                	0x8900
	...
    1452:	0e00                	addi	s0,sp,784
    1454:	1c000003          	lb	zero,448(zero) # 1c0 <polymult+0xe8>
    1458:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    145c:	3000                	fld	fs0,32(s0)
    145e:	1c9f 0003 2b00      	0x2b0000031c9f
    1464:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1468:	5e00                	lw	s0,56(a2)
    146a:	0352                	slli	t1,t1,0x14
    146c:	0000                	unimp
    146e:	0374                	addi	a3,sp,396
    1470:	0000                	unimp
    1472:	0001                	nop
    1474:	9c5e                	add	s8,s8,s7
    1476:	ae000003          	lb	zero,-1312(zero) # fffffae0 <_stack_start+0xfffefae0>
    147a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    147e:	5c00                	lw	s0,56(s0)
    1480:	03d6                	slli	t2,t2,0x15
    1482:	0000                	unimp
    1484:	041a                	slli	s0,s0,0x6
    1486:	0000                	unimp
    1488:	0001                	nop
    148a:	005c                	addi	a5,sp,4
    148c:	0000                	unimp
    148e:	0000                	unimp
    1490:	0000                	unimp
    1492:	4a00                	lw	s0,16(a2)
    1494:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x106>
    1498:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    149c:	6400                	flw	fs0,8(s0)
    149e:	0352                	slli	t1,t1,0x14
    14a0:	0000                	unimp
    14a2:	036e                	slli	t1,t1,0x1b
    14a4:	0000                	unimp
    14a6:	0001                	nop
    14a8:	745f 0003 9c00      	0x9c000003745f
    14ae:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14b2:	6400                	flw	fs0,8(s0)
    14b4:	03ae                	slli	t2,t2,0xb
    14b6:	0000                	unimp
    14b8:	03d6                	slli	t2,t2,0x15
    14ba:	0000                	unimp
    14bc:	0001                	nop
    14be:	d664                	sw	s1,108(a2)
    14c0:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    14c4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14c8:	5e00                	lw	s0,56(a2)
    14ca:	03dc                	addi	a5,sp,452
    14cc:	0000                	unimp
    14ce:	03e4                	addi	s1,sp,460
    14d0:	0000                	unimp
    14d2:	7f7e0003          	lb	zero,2039(t3)
    14d6:	e49f 0003 f000      	0xf0000003e49f
    14dc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14e0:	5e00                	lw	s0,56(a2)
	...
    14ea:	0374                	addi	a3,sp,396
    14ec:	0000                	unimp
    14ee:	0386                	slli	t2,t2,0x1
    14f0:	0000                	unimp
    14f2:	0001                	nop
    14f4:	865f 0003 8c00      	0x8c000003865f
    14fa:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    14fe:	7f00                	flw	fs0,56(a4)
    1500:	9f01                	0x9f01
    1502:	038c                	addi	a1,sp,448
    1504:	0000                	unimp
    1506:	0396                	slli	t2,t2,0x5
    1508:	0000                	unimp
    150a:	0001                	nop
    150c:	b25f 0003 c400      	0xc4000003b25f
    1512:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1516:	5f00                	lw	s0,56(a4)
    1518:	03c4                	addi	s1,sp,452
    151a:	0000                	unimp
    151c:	03ca                	slli	t2,t2,0x12
    151e:	0000                	unimp
    1520:	017f0003          	lb	zero,23(t5)
    1524:	ca9f 0003 d600      	0xd6000003ca9f
    152a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    152e:	5f00                	lw	s0,56(a4)
	...
    1538:	030c                	addi	a1,sp,384
    153a:	0000                	unimp
    153c:	040c                	addi	a1,sp,512
    153e:	0000                	unimp
    1540:	0002                	c.slli64	zero
    1542:	008a                	slli	ra,ra,0x2
	...
    154c:	030e                	slli	t1,t1,0x3
    154e:	0000                	unimp
    1550:	03f4                	addi	a3,sp,460
    1552:	0000                	unimp
    1554:	0002                	c.slli64	zero
    1556:	0072                	c.slli	zero,0x1c
    1558:	03f4                	addi	a3,sp,460
    155a:	0000                	unimp
    155c:	03fa                	slli	t2,t2,0x1e
    155e:	0000                	unimp
    1560:	0002                	c.slli64	zero
    1562:	0079                	c.nop	30
    1564:	03fa                	slli	t2,t2,0x1e
    1566:	0000                	unimp
    1568:	03fe                	slli	t2,t2,0x1f
    156a:	0000                	unimp
    156c:	000c                	0xc
    156e:	008a                	slli	ra,ra,0x2
    1570:	24320083          	lb	ra,579(tp) # ffff6243 <_stack_start+0xfffe6243>
    1574:	f0090f23          	sb	zero,-226(s2)
    1578:	1c1a                	slli	s8,s8,0x26
    157a:	03fe                	slli	t2,t2,0x1f
    157c:	0000                	unimp
    157e:	040c                	addi	a1,sp,512
    1580:	0000                	unimp
    1582:	000d                	c.nop	3
    1584:	008a                	slli	ra,ra,0x2
    1586:	325d01f3          	0x325d01f3
    158a:	2324                	fld	fs1,64(a4)
    158c:	1af0090f          	0x1af0090f
    1590:	001c                	0x1c
    1592:	0000                	unimp
    1594:	0000                	unimp
    1596:	0000                	unimp
    1598:	0600                	addi	s0,sp,768
    159a:	4a000003          	lb	zero,1184(zero) # 4a0 <polydiv+0x86>
    159e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15a2:	6400                	flw	fs0,8(s0)
    15a4:	034a                	slli	t1,t1,0x12
    15a6:	0000                	unimp
    15a8:	0352                	slli	t1,t1,0x14
    15aa:	0000                	unimp
    15ac:	7f830003          	lb	zero,2040(t1)
    15b0:	529f 0003 7400      	0x74000003529f
    15b6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ba:	6400                	flw	fs0,8(s0)
    15bc:	0374                	addi	a3,sp,396
    15be:	0000                	unimp
    15c0:	03fe                	slli	t2,t2,0x1f
    15c2:	0000                	unimp
    15c4:	7f830003          	lb	zero,2040(t1)
    15c8:	fe9f 0003 1a00      	0x1a000003fe9f
    15ce:	0004                	0x4
    15d0:	0600                	addi	s0,sp,768
    15d2:	f300                	fsw	fs0,32(a4)
    15d4:	5d01                	li	s10,-32
    15d6:	1c31                	addi	s8,s8,-20
    15d8:	009f 0000 0000      	0x9f
    15de:	0000                	unimp
    15e0:	c200                	sw	s0,0(a2)
    15e2:	0002                	c.slli64	zero
    15e4:	0600                	addi	s0,sp,768
    15e6:	0004                	0x4
    15e8:	0100                	addi	s0,sp,128
    15ea:	6700                	flw	fs0,8(a4)
    15ec:	0406                	slli	s0,s0,0x1
    15ee:	0000                	unimp
    15f0:	0408                	addi	a0,sp,512
    15f2:	0000                	unimp
    15f4:	00880007          	0x880007
    15f8:	225d01f3          	0x225d01f3
    15fc:	089f 0004 1a00      	0x1a000004089f
    1602:	0004                	0x4
    1604:	0a00                	addi	s0,sp,272
    1606:	f300                	fsw	fs0,32(a4)
    1608:	5b01                	li	s6,-32
    160a:	225d01f3          	0x225d01f3
    160e:	1c31                	addi	s8,s8,-20
    1610:	009f 0000 0000      	0x9f
    1616:	0000                	unimp
    1618:	0c00                	addi	s0,sp,528
    161a:	08000003          	lb	zero,128(zero) # 80 <__DYNAMIC+0x80>
    161e:	0004                	0x4
    1620:	0100                	addi	s0,sp,128
    1622:	6800                	flw	fs0,16(s0)
    1624:	0408                	addi	a0,sp,512
    1626:	0000                	unimp
    1628:	041a                	slli	s0,s0,0x6
    162a:	0000                	unimp
    162c:	0006                	c.slli	zero,0x1
    162e:	315b01f3          	0x315b01f3
    1632:	9f1c                	0x9f1c
	...
    163c:	030c                	addi	a1,sp,384
    163e:	0000                	unimp
    1640:	034a                	slli	t1,t1,0x12
    1642:	0000                	unimp
    1644:	0001                	nop
    1646:	4a64                	lw	s1,84(a2)
    1648:	52000003          	lb	zero,1312(zero) # 520 <polydiv+0x106>
    164c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1650:	8300                	0x8300
    1652:	9f7f                	0x9f7f
    1654:	0352                	slli	t1,t1,0x14
    1656:	0000                	unimp
    1658:	0374                	addi	a3,sp,396
    165a:	0000                	unimp
    165c:	0001                	nop
    165e:	7464                	flw	fs1,108(s0)
    1660:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    1664:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1668:	8300                	0x8300
    166a:	9f7f                	0x9f7f
    166c:	03fe                	slli	t2,t2,0x1f
    166e:	0000                	unimp
    1670:	041a                	slli	s0,s0,0x6
    1672:	0000                	unimp
    1674:	0006                	c.slli	zero,0x1
    1676:	315d01f3          	0x315d01f3
    167a:	9f1c                	0x9f1c
	...
    1684:	00d8                	addi	a4,sp,68
    1686:	0000                	unimp
    1688:	0158                	addi	a4,sp,132
    168a:	0000                	unimp
    168c:	0001                	nop
    168e:	585a                	lw	a6,180(sp)
    1690:	0001                	nop
    1692:	6900                	flw	fs0,16(a0)
    1694:	0001                	nop
    1696:	0100                	addi	s0,sp,128
    1698:	5b00                	lw	s0,48(a4)
    169a:	0169                	addi	sp,sp,26
    169c:	0000                	unimp
    169e:	01aa                	slli	gp,gp,0xa
    16a0:	0000                	unimp
    16a2:	0004                	0x4
    16a4:	9f5a01f3          	0x9f5a01f3
    16a8:	01aa                	slli	gp,gp,0xa
    16aa:	0000                	unimp
    16ac:	01cc                	addi	a1,sp,196
    16ae:	0000                	unimp
    16b0:	0001                	nop
    16b2:	cc5a                	sw	s6,24(sp)
    16b4:	0001                	nop
    16b6:	aa00                	fsd	fs0,16(a2)
    16b8:	0002                	c.slli64	zero
    16ba:	0400                	addi	s0,sp,512
    16bc:	f300                	fsw	fs0,32(a4)
    16be:	5a01                	li	s4,-32
    16c0:	009f 0000 0000      	0x9f
    16c6:	0000                	unimp
    16c8:	d800                	sw	s0,48(s0)
    16ca:	0000                	unimp
    16cc:	4600                	lw	s0,8(a2)
    16ce:	0001                	nop
    16d0:	0100                	addi	s0,sp,128
    16d2:	5b00                	lw	s0,48(a4)
    16d4:	0146                	slli	sp,sp,0x11
    16d6:	0000                	unimp
    16d8:	0206                	slli	tp,tp,0x1
    16da:	0000                	unimp
    16dc:	0001                	nop
    16de:	0665                	addi	a2,a2,25
    16e0:	0002                	c.slli64	zero
    16e2:	1e00                	addi	s0,sp,816
    16e4:	0002                	c.slli64	zero
    16e6:	0700                	addi	s0,sp,896
    16e8:	9100                	0x9100
    16ea:	7fbc                	flw	fa5,120(a5)
    16ec:	2306                	fld	ft6,64(sp)
    16ee:	9f01                	0x9f01
    16f0:	021e                	slli	tp,tp,0x7
    16f2:	0000                	unimp
    16f4:	02aa                	slli	t0,t0,0xa
    16f6:	0000                	unimp
    16f8:	0001                	nop
    16fa:	0065                	c.nop	25
    16fc:	0000                	unimp
    16fe:	0000                	unimp
    1700:	0000                	unimp
    1702:	d800                	sw	s0,48(s0)
    1704:	0000                	unimp
    1706:	4e00                	lw	s0,24(a2)
    1708:	0001                	nop
    170a:	0100                	addi	s0,sp,128
    170c:	5c00                	lw	s0,56(s0)
    170e:	014e                	slli	sp,sp,0x13
    1710:	0000                	unimp
    1712:	0169                	addi	sp,sp,26
    1714:	0000                	unimp
    1716:	0001                	nop
    1718:	6960                	flw	fs0,84(a0)
    171a:	0001                	nop
    171c:	aa00                	fsd	fs0,16(a2)
    171e:	0001                	nop
    1720:	0300                	addi	s0,sp,384
    1722:	7800                	flw	fs0,48(s0)
    1724:	7fb4                	flw	fa3,120(a5)
    1726:	01aa                	slli	gp,gp,0xa
    1728:	0000                	unimp
    172a:	01cc                	addi	a1,sp,196
    172c:	0000                	unimp
    172e:	0001                	nop
    1730:	cc60                	sw	s0,92(s0)
    1732:	0001                	nop
    1734:	fc00                	fsw	fs0,56(s0)
    1736:	0001                	nop
    1738:	0300                	addi	s0,sp,384
    173a:	7800                	flw	fs0,48(s0)
    173c:	7fb4                	flw	fa3,120(a5)
    173e:	01fc                	addi	a5,sp,204
    1740:	0000                	unimp
    1742:	02aa                	slli	t0,t0,0xa
    1744:	0000                	unimp
    1746:	b4910003          	lb	zero,-1207(sp)
    174a:	007f                	0x7f
    174c:	0000                	unimp
    174e:	0000                	unimp
    1750:	0000                	unimp
    1752:	d800                	sw	s0,48(s0)
    1754:	0000                	unimp
    1756:	e200                	fsw	fs0,0(a2)
    1758:	0000                	unimp
    175a:	0100                	addi	s0,sp,128
    175c:	5d00                	lw	s0,56(a0)
    175e:	00e2                	slli	ra,ra,0x18
    1760:	0000                	unimp
    1762:	0200                	addi	s0,sp,256
    1764:	0000                	unimp
    1766:	0001                	nop
    1768:	0062                	c.slli	zero,0x18
    176a:	0002                	c.slli64	zero
    176c:	1e00                	addi	s0,sp,816
    176e:	0002                	c.slli64	zero
    1770:	0400                	addi	s0,sp,512
    1772:	f300                	fsw	fs0,32(a4)
    1774:	5d01                	li	s10,-32
    1776:	1e9f 0002 aa00      	0xaa0000021e9f
    177c:	0002                	c.slli64	zero
    177e:	0100                	addi	s0,sp,128
    1780:	6200                	flw	fs0,0(a2)
	...
    178a:	00d8                	addi	a4,sp,68
    178c:	0000                	unimp
    178e:	00fe                	slli	ra,ra,0x1f
    1790:	0000                	unimp
    1792:	0001                	nop
    1794:	fe5e                	fsw	fs7,60(sp)
    1796:	0000                	unimp
    1798:	0400                	addi	s0,sp,512
    179a:	0002                	c.slli64	zero
    179c:	0100                	addi	s0,sp,128
    179e:	6400                	flw	fs0,8(s0)
    17a0:	0204                	addi	s1,sp,256
    17a2:	0000                	unimp
    17a4:	021e                	slli	tp,tp,0x7
    17a6:	0000                	unimp
    17a8:	0004                	0x4
    17aa:	9f5e01f3          	0x9f5e01f3
    17ae:	021e                	slli	tp,tp,0x7
    17b0:	0000                	unimp
    17b2:	02aa                	slli	t0,t0,0xa
    17b4:	0000                	unimp
    17b6:	0001                	nop
    17b8:	0064                	addi	s1,sp,12
    17ba:	0000                	unimp
    17bc:	0000                	unimp
    17be:	0000                	unimp
    17c0:	d800                	sw	s0,48(s0)
    17c2:	0000                	unimp
    17c4:	6900                	flw	fs0,16(a0)
    17c6:	0001                	nop
    17c8:	0100                	addi	s0,sp,128
    17ca:	5f00                	lw	s0,56(a4)
    17cc:	0169                	addi	sp,sp,26
    17ce:	0000                	unimp
    17d0:	01aa                	slli	gp,gp,0xa
    17d2:	0000                	unimp
    17d4:	b0780003          	lb	zero,-1273(a6)
    17d8:	aa7f                	0xaa7f
    17da:	0001                	nop
    17dc:	cc00                	sw	s0,24(s0)
    17de:	0001                	nop
    17e0:	0100                	addi	s0,sp,128
    17e2:	5f00                	lw	s0,56(a4)
    17e4:	01cc                	addi	a1,sp,196
    17e6:	0000                	unimp
    17e8:	01f8                	addi	a4,sp,204
    17ea:	0000                	unimp
    17ec:	b0780003          	lb	zero,-1273(a6)
    17f0:	f87f                	0xf87f
    17f2:	0001                	nop
    17f4:	1c00                	addi	s0,sp,560
    17f6:	0002                	c.slli64	zero
    17f8:	0200                	addi	s0,sp,256
    17fa:	7200                	flw	fs0,32(a2)
    17fc:	1c00                	addi	s0,sp,560
    17fe:	0002                	c.slli64	zero
    1800:	1e00                	addi	s0,sp,816
    1802:	0002                	c.slli64	zero
    1804:	0300                	addi	s0,sp,384
    1806:	7200                	flw	fs0,32(a2)
    1808:	7fb0                	flw	fa2,120(a5)
    180a:	021e                	slli	tp,tp,0x7
    180c:	0000                	unimp
    180e:	02aa                	slli	t0,t0,0xa
    1810:	0000                	unimp
    1812:	b0910003          	lb	zero,-1271(sp)
    1816:	007f                	0x7f
    1818:	0000                	unimp
    181a:	0000                	unimp
    181c:	0000                	unimp
    181e:	3a00                	fld	fs0,48(a2)
    1820:	0001                	nop
    1822:	4e00                	lw	s0,24(a2)
    1824:	0001                	nop
    1826:	0200                	addi	s0,sp,256
    1828:	8700                	0x8700
    182a:	4e00                	lw	s0,24(a2)
    182c:	0001                	nop
    182e:	6900                	flw	fs0,16(a0)
    1830:	0001                	nop
    1832:	0200                	addi	s0,sp,256
    1834:	7e00                	flw	fs0,56(a2)
    1836:	6900                	flw	fs0,16(a0)
    1838:	0001                	nop
    183a:	aa00                	fsd	fs0,16(a2)
    183c:	0001                	nop
    183e:	0200                	addi	s0,sp,256
    1840:	8700                	0x8700
    1842:	aa00                	fsd	fs0,16(a2)
    1844:	0001                	nop
    1846:	cc00                	sw	s0,24(s0)
    1848:	0001                	nop
    184a:	0200                	addi	s0,sp,256
    184c:	7e00                	flw	fs0,56(a2)
    184e:	cc00                	sw	s0,24(s0)
    1850:	0001                	nop
    1852:	0a00                	addi	s0,sp,272
    1854:	0002                	c.slli64	zero
    1856:	0200                	addi	s0,sp,256
    1858:	8700                	0x8700
    185a:	0a00                	addi	s0,sp,272
    185c:	0002                	c.slli64	zero
    185e:	1e00                	addi	s0,sp,816
    1860:	0002                	c.slli64	zero
    1862:	0400                	addi	s0,sp,512
    1864:	9100                	0x9100
    1866:	7fb8                	flw	fa4,120(a5)
    1868:	1e06                	slli	t3,t3,0x21
    186a:	0002                	c.slli64	zero
    186c:	aa00                	fsd	fs0,16(a2)
    186e:	0002                	c.slli64	zero
    1870:	0200                	addi	s0,sp,256
    1872:	8700                	0x8700
	...
    187c:	3c00                	fld	fs0,56(s0)
    187e:	0001                	nop
    1880:	4e00                	lw	s0,24(a2)
    1882:	0001                	nop
    1884:	0200                	addi	s0,sp,256
    1886:	3000                	fld	fs0,32(s0)
    1888:	4e9f 0001 5400      	0x540000014e9f
    188e:	0001                	nop
    1890:	0100                	addi	s0,sp,128
    1892:	5b00                	lw	s0,48(a4)
    1894:	01aa                	slli	gp,gp,0xa
    1896:	0000                	unimp
    1898:	01cc                	addi	a1,sp,196
    189a:	0000                	unimp
    189c:	0001                	nop
    189e:	0001d45b          	0x1d45b
    18a2:	e000                	fsw	fs0,0(s0)
    18a4:	0001                	nop
    18a6:	0100                	addi	s0,sp,128
    18a8:	5d00                	lw	s0,56(a0)
    18aa:	026a                	slli	tp,tp,0x1a
    18ac:	0000                	unimp
    18ae:	0288                	addi	a0,sp,320
    18b0:	0000                	unimp
    18b2:	0001                	nop
    18b4:	885d                	andi	s0,s0,23
    18b6:	0002                	c.slli64	zero
    18b8:	9000                	0x9000
    18ba:	0002                	c.slli64	zero
    18bc:	0100                	addi	s0,sp,128
    18be:	5c00                	lw	s0,56(s0)
    18c0:	0290                	addi	a2,sp,320
    18c2:	0000                	unimp
    18c4:	029c                	addi	a5,sp,320
    18c6:	0000                	unimp
    18c8:	7f7c0003          	lb	zero,2039(s8)
    18cc:	9c9f 0002 a600      	0xa60000029c9f
    18d2:	0002                	c.slli64	zero
    18d4:	0100                	addi	s0,sp,128
    18d6:	5c00                	lw	s0,56(s0)
	...
    18e0:	01a2                	slli	gp,gp,0x8
    18e2:	0000                	unimp
    18e4:	01aa                	slli	gp,gp,0xa
    18e6:	0000                	unimp
    18e8:	0001                	nop
    18ea:	aa66                	fsd	fs9,272(sp)
    18ec:	0001                	nop
    18ee:	c600                	sw	s0,8(a2)
    18f0:	0001                	nop
    18f2:	0100                	addi	s0,sp,128
    18f4:	5c00                	lw	s0,56(s0)
    18f6:	01ce                	slli	gp,gp,0x13
    18f8:	0000                	unimp
    18fa:	01d4                	addi	a3,sp,196
    18fc:	0000                	unimp
    18fe:	0001                	nop
    1900:	e266                	fsw	fs9,4(sp)
    1902:	0001                	nop
    1904:	f300                	fsw	fs0,32(a4)
    1906:	0001                	nop
    1908:	0100                	addi	s0,sp,128
    190a:	5e00                	lw	s0,56(a2)
    190c:	021e                	slli	tp,tp,0x7
    190e:	0000                	unimp
    1910:	026a                	slli	tp,tp,0x1a
    1912:	0000                	unimp
    1914:	0001                	nop
    1916:	6a66                	flw	fs4,88(sp)
    1918:	0002                	c.slli64	zero
    191a:	6e00                	flw	fs0,24(a2)
    191c:	0002                	c.slli64	zero
    191e:	0100                	addi	s0,sp,128
    1920:	5c00                	lw	s0,56(s0)
    1922:	026e                	slli	tp,tp,0x1b
    1924:	0000                	unimp
    1926:	0278                	addi	a4,sp,268
    1928:	0000                	unimp
    192a:	7f7c0003          	lb	zero,2039(s8)
    192e:	789f 0002 8200      	0x82000002789f
    1934:	0002                	c.slli64	zero
    1936:	0100                	addi	s0,sp,128
    1938:	5c00                	lw	s0,56(s0)
    193a:	0288                	addi	a0,sp,320
    193c:	0000                	unimp
    193e:	02aa                	slli	t0,t0,0xa
    1940:	0000                	unimp
    1942:	0001                	nop
    1944:	005e                	c.slli	zero,0x17
    1946:	0000                	unimp
    1948:	0000                	unimp
    194a:	0000                	unimp
    194c:	1e00                	addi	s0,sp,816
    194e:	0002                	c.slli64	zero
    1950:	3000                	fld	fs0,32(s0)
    1952:	0002                	c.slli64	zero
    1954:	0100                	addi	s0,sp,128
    1956:	5f00                	lw	s0,56(a4)
    1958:	0230                	addi	a2,sp,264
    195a:	0000                	unimp
    195c:	0236                	slli	tp,tp,0xd
    195e:	0000                	unimp
    1960:	017f0003          	lb	zero,23(t5)
    1964:	369f 0002 4200      	0x42000002369f
    196a:	0002                	c.slli64	zero
    196c:	0100                	addi	s0,sp,128
    196e:	5f00                	lw	s0,56(a4)
    1970:	0246                	slli	tp,tp,0x11
    1972:	0000                	unimp
    1974:	0258                	addi	a4,sp,260
    1976:	0000                	unimp
    1978:	0001                	nop
    197a:	585f 0002 5e00      	0x5e000002585f
    1980:	0002                	c.slli64	zero
    1982:	0300                	addi	s0,sp,384
    1984:	7f00                	flw	fs0,56(a4)
    1986:	9f01                	0x9f01
    1988:	025e                	slli	tp,tp,0x17
    198a:	0000                	unimp
    198c:	026a                	slli	tp,tp,0x1a
    198e:	0000                	unimp
    1990:	0001                	nop
    1992:	005f 0000 0000      	0x5f
    1998:	0000                	unimp
    199a:	f400                	fsw	fs0,40(s0)
    199c:	0001                	nop
    199e:	1e00                	addi	s0,sp,816
    19a0:	0002                	c.slli64	zero
    19a2:	0600                	addi	s0,sp,768
    19a4:	0300                	addi	s0,sp,384
    19a6:	1110                	addi	a2,sp,160
    19a8:	0000                	unimp
    19aa:	009f 0000 0000      	0x9f
    19b0:	0000                	unimp
    19b2:	3a00                	fld	fs0,48(a2)
    19b4:	0001                	nop
    19b6:	1200                	addi	s0,sp,288
    19b8:	0002                	c.slli64	zero
    19ba:	0200                	addi	s0,sp,256
    19bc:	8b00                	0x8b00
    19be:	1200                	addi	s0,sp,288
    19c0:	0002                	c.slli64	zero
    19c2:	1e00                	addi	s0,sp,816
    19c4:	0002                	c.slli64	zero
    19c6:	1200                	addi	s0,sp,288
    19c8:	9100                	0x9100
    19ca:	7fb8                	flw	fa4,120(a5)
    19cc:	9106                	add	sp,sp,ra
    19ce:	7fbc                	flw	fa5,120(a5)
    19d0:	2306                	fld	ft6,64(sp)
    19d2:	3201                	jal	12d2 <_bss_start+0x1c2>
    19d4:	2324                	fld	fs1,64(a4)
    19d6:	1af0090f          	0x1af0090f
    19da:	1e1c                	addi	a5,sp,816
    19dc:	0002                	c.slli64	zero
    19de:	aa00                	fsd	fs0,16(a2)
    19e0:	0002                	c.slli64	zero
    19e2:	0200                	addi	s0,sp,256
    19e4:	8b00                	0x8b00
	...
    19ee:	3c00                	fld	fs0,56(s0)
    19f0:	0001                	nop
    19f2:	f800                	fsw	fs0,48(s0)
    19f4:	0001                	nop
    19f6:	0200                	addi	s0,sp,256
    19f8:	7200                	flw	fs0,32(a2)
    19fa:	f800                	fsw	fs0,48(s0)
    19fc:	0001                	nop
    19fe:	0000                	unimp
    1a00:	0002                	c.slli64	zero
    1a02:	0c00                	addi	s0,sp,528
    1a04:	8b00                	0x8b00
    1a06:	8200                	0x8200
    1a08:	3200                	fld	fs0,32(a2)
    1a0a:	2324                	fld	fs1,64(a4)
    1a0c:	1af0090f          	0x1af0090f
    1a10:	001c                	0x1c
    1a12:	0002                	c.slli64	zero
    1a14:	1200                	addi	s0,sp,288
    1a16:	0002                	c.slli64	zero
    1a18:	0d00                	addi	s0,sp,656
    1a1a:	8b00                	0x8b00
    1a1c:	f300                	fsw	fs0,32(a4)
    1a1e:	5d01                	li	s10,-32
    1a20:	2432                	fld	fs0,264(sp)
    1a22:	f0090f23          	sb	zero,-226(s2)
    1a26:	1c1a                	slli	s8,s8,0x26
    1a28:	0212                	slli	tp,tp,0x4
    1a2a:	0000                	unimp
    1a2c:	021e                	slli	tp,tp,0x7
    1a2e:	0000                	unimp
    1a30:	001d                	c.nop	7
    1a32:	b891                	j	1286 <_bss_start+0x176>
    1a34:	067f                	0x67f
    1a36:	bc91                	j	148a <product2+0x122>
    1a38:	067f                	0x67f
    1a3a:	24320123          	sb	gp,578(tp) # 242 <polymult+0x16a>
    1a3e:	f0090f23          	sb	zero,-226(s2)
    1a42:	1c1a                	slli	s8,s8,0x26
    1a44:	325d01f3          	0x325d01f3
    1a48:	2324                	fld	fs1,64(a4)
    1a4a:	1af0090f          	0x1af0090f
    1a4e:	1e1c                	addi	a5,sp,816
    1a50:	0002                	c.slli64	zero
    1a52:	aa00                	fsd	fs0,16(a2)
    1a54:	0002                	c.slli64	zero
    1a56:	0200                	addi	s0,sp,256
    1a58:	7200                	flw	fs0,32(a2)
	...
    1a62:	3a00                	fld	fs0,48(a2)
    1a64:	0001                	nop
    1a66:	a200                	fsd	fs0,0(a2)
    1a68:	0001                	nop
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	6600                	flw	fs0,8(a2)
    1a6e:	01a2                	slli	gp,gp,0x8
    1a70:	0000                	unimp
    1a72:	01aa                	slli	gp,gp,0xa
    1a74:	0000                	unimp
    1a76:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1a7a:	aa9f 0001 ce00      	0xce000001aa9f
    1a80:	0001                	nop
    1a82:	0100                	addi	s0,sp,128
    1a84:	6600                	flw	fs0,8(a2)
    1a86:	01ce                	slli	gp,gp,0x13
    1a88:	0000                	unimp
    1a8a:	0200                	addi	s0,sp,256
    1a8c:	0000                	unimp
    1a8e:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1a92:	009f 0002 1e00      	0x1e000002009f
    1a98:	0002                	c.slli64	zero
    1a9a:	0600                	addi	s0,sp,768
    1a9c:	f300                	fsw	fs0,32(a4)
    1a9e:	5d01                	li	s10,-32
    1aa0:	1c31                	addi	s8,s8,-20
    1aa2:	1e9f 0002 aa00      	0xaa0000021e9f
    1aa8:	0002                	c.slli64	zero
    1aaa:	0300                	addi	s0,sp,384
    1aac:	8200                	0x8200
    1aae:	9f7f                	0x9f7f
	...
    1ab8:	00f2                	slli	ra,ra,0x1c
    1aba:	0000                	unimp
    1abc:	020e                	slli	tp,tp,0x3
    1abe:	0000                	unimp
    1ac0:	0001                	nop
    1ac2:	0e69                	addi	t3,t3,26
    1ac4:	0002                	c.slli64	zero
    1ac6:	1e00                	addi	s0,sp,816
    1ac8:	0002                	c.slli64	zero
    1aca:	0900                	addi	s0,sp,144
    1acc:	9100                	0x9100
    1ace:	7fbc                	flw	fa5,120(a5)
    1ad0:	f306                	fsw	ft1,164(sp)
    1ad2:	5d01                	li	s10,-32
    1ad4:	9f22                	add	t5,t5,s0
    1ad6:	021e                	slli	tp,tp,0x7
    1ad8:	0000                	unimp
    1ada:	02aa                	slli	t0,t0,0xa
    1adc:	0000                	unimp
    1ade:	0001                	nop
    1ae0:	0069                	c.nop	26
    1ae2:	0000                	unimp
    1ae4:	0000                	unimp
    1ae6:	0000                	unimp
    1ae8:	3a00                	fld	fs0,48(a2)
    1aea:	0001                	nop
    1aec:	6900                	flw	fs0,16(a0)
    1aee:	0001                	nop
    1af0:	0100                	addi	s0,sp,128
    1af2:	5d00                	lw	s0,56(a0)
    1af4:	0169                	addi	sp,sp,26
    1af6:	0000                	unimp
    1af8:	01aa                	slli	gp,gp,0xa
    1afa:	0000                	unimp
    1afc:	bc780003          	lb	zero,-1081(a6)
    1b00:	aa7f                	0xaa7f
    1b02:	0001                	nop
    1b04:	cc00                	sw	s0,24(s0)
    1b06:	0001                	nop
    1b08:	0100                	addi	s0,sp,128
    1b0a:	5d00                	lw	s0,56(a0)
    1b0c:	01cc                	addi	a1,sp,196
    1b0e:	0000                	unimp
    1b10:	01fc                	addi	a5,sp,204
    1b12:	0000                	unimp
    1b14:	bc780003          	lb	zero,-1081(a6)
    1b18:	fc7f                	0xfc7f
    1b1a:	0001                	nop
    1b1c:	aa00                	fsd	fs0,16(a2)
    1b1e:	0002                	c.slli64	zero
    1b20:	0300                	addi	s0,sp,384
    1b22:	9100                	0x9100
    1b24:	7fbc                	flw	fa5,120(a5)
	...
    1b2e:	013a                	slli	sp,sp,0xe
    1b30:	0000                	unimp
    1b32:	01a2                	slli	gp,gp,0x8
    1b34:	0000                	unimp
    1b36:	0001                	nop
    1b38:	a266                	fsd	fs9,256(sp)
    1b3a:	0001                	nop
    1b3c:	aa00                	fsd	fs0,16(a2)
    1b3e:	0001                	nop
    1b40:	0300                	addi	s0,sp,384
    1b42:	8200                	0x8200
    1b44:	9f7f                	0x9f7f
    1b46:	01aa                	slli	gp,gp,0xa
    1b48:	0000                	unimp
    1b4a:	01ce                	slli	gp,gp,0x13
    1b4c:	0000                	unimp
    1b4e:	0001                	nop
    1b50:	ce66                	sw	s9,28(sp)
    1b52:	0001                	nop
    1b54:	0000                	unimp
    1b56:	0002                	c.slli64	zero
    1b58:	0300                	addi	s0,sp,384
    1b5a:	8200                	0x8200
    1b5c:	9f7f                	0x9f7f
    1b5e:	0200                	addi	s0,sp,256
    1b60:	0000                	unimp
    1b62:	021e                	slli	tp,tp,0x7
    1b64:	0000                	unimp
    1b66:	0006                	c.slli	zero,0x1
    1b68:	315d01f3          	0x315d01f3
    1b6c:	9f1c                	0x9f1c
    1b6e:	021e                	slli	tp,tp,0x7
    1b70:	0000                	unimp
    1b72:	02aa                	slli	t0,t0,0xa
    1b74:	0000                	unimp
    1b76:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1b7a:	009f 0000 0000      	0x9f
    1b80:	0000                	unimp
    1b82:	ba00                	fsd	fs0,48(a2)
    1b84:	0000                	unimp
    1b86:	c000                	sw	s0,0(s0)
    1b88:	0000                	unimp
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	5c00                	lw	s0,56(s0)
    1b8e:	00c0                	addi	s0,sp,68
    1b90:	0000                	unimp
    1b92:	00d8                	addi	a4,sp,68
    1b94:	0000                	unimp
    1b96:	0004                	0x4
    1b98:	9f5c01f3          	0x9f5c01f3
	...
    1ba4:	00ba                	slli	ra,ra,0xe
    1ba6:	0000                	unimp
    1ba8:	00c4                	addi	s1,sp,68
    1baa:	0000                	unimp
    1bac:	0002                	c.slli64	zero
    1bae:	9f30                	0x9f30
    1bb0:	00c4                	addi	s1,sp,68
    1bb2:	0000                	unimp
    1bb4:	00d8                	addi	a4,sp,68
    1bb6:	0000                	unimp
    1bb8:	0001                	nop
    1bba:	005f 0000 0000      	0x5f
    1bc0:	0000                	unimp
    1bc2:	ca00                	sw	s0,16(a2)
    1bc4:	0000                	unimp
    1bc6:	d400                	sw	s0,40(s0)
    1bc8:	0000                	unimp
    1bca:	0100                	addi	s0,sp,128
    1bcc:	5b00                	lw	s0,48(a4)
	...
    1bd6:	00ca                	slli	ra,ra,0x12
    1bd8:	0000                	unimp
    1bda:	00d4                	addi	a3,sp,68
    1bdc:	0000                	unimp
    1bde:	0008                	0x8
    1be0:	007f                	0x7f
    1be2:	1e3c                	addi	a5,sp,824
    1be4:	007a                	c.slli	zero,0x1e
    1be6:	9f22                	add	t5,t5,s0
	...
    1bf0:	0092                	slli	ra,ra,0x4
    1bf2:	0000                	unimp
    1bf4:	0098                	addi	a4,sp,64
    1bf6:	0000                	unimp
    1bf8:	0001                	nop
    1bfa:	985c                	0x985c
    1bfc:	0000                	unimp
    1bfe:	b400                	fsd	fs0,40(s0)
    1c00:	0000                	unimp
    1c02:	0400                	addi	s0,sp,512
    1c04:	f300                	fsw	fs0,32(a4)
    1c06:	5c01                	li	s8,-32
    1c08:	009f 0000 0000      	0x9f
    1c0e:	0000                	unimp
    1c10:	9200                	0x9200
    1c12:	0000                	unimp
    1c14:	9c00                	0x9c00
    1c16:	0000                	unimp
    1c18:	0200                	addi	s0,sp,256
    1c1a:	3000                	fld	fs0,32(s0)
    1c1c:	9c9f 0000 b400      	0xb40000009c9f
    1c22:	0000                	unimp
    1c24:	0100                	addi	s0,sp,128
    1c26:	5f00                	lw	s0,56(a4)
	...
    1c30:	00a6                	slli	ra,ra,0x9
    1c32:	0000                	unimp
    1c34:	00ac                	addi	a1,sp,72
    1c36:	0000                	unimp
    1c38:	0006                	c.slli	zero,0x1
    1c3a:	007e007b          	0x7e007b
    1c3e:	9f22                	add	t5,t5,s0
    1c40:	00ac                	addi	a1,sp,72
    1c42:	0000                	unimp
    1c44:	00b0                	addi	a2,sp,72
    1c46:	0000                	unimp
    1c48:	0001                	nop
    1c4a:	005e                	c.slli	zero,0x17
    1c4c:	0000                	unimp
    1c4e:	0000                	unimp
    1c50:	0000                	unimp
    1c52:	a600                	fsd	fs0,8(a2)
    1c54:	0000                	unimp
    1c56:	aa00                	fsd	fs0,16(a2)
    1c58:	0000                	unimp
    1c5a:	0600                	addi	s0,sp,768
    1c5c:	7a00                	flw	fs0,48(a2)
    1c5e:	7e00                	flw	fs0,56(a2)
    1c60:	2200                	fld	fs0,0(a2)
    1c62:	aa9f 0000 b000      	0xb0000000aa9f
    1c68:	0000                	unimp
    1c6a:	0100                	addi	s0,sp,128
    1c6c:	5d00                	lw	s0,56(a0)
	...
    1c76:	008c                	addi	a1,sp,64
    1c78:	0000                	unimp
    1c7a:	0090                	addi	a2,sp,64
    1c7c:	0000                	unimp
    1c7e:	0001                	nop
    1c80:	005a                	c.slli	zero,0x16
    1c82:	0000                	unimp
    1c84:	0000                	unimp
    1c86:	0000                	unimp
    1c88:	b400                	fsd	fs0,40(s0)
    1c8a:	0000                	unimp
    1c8c:	b800                	fsd	fs0,48(s0)
    1c8e:	0000                	unimp
    1c90:	0100                	addi	s0,sp,128
    1c92:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0bbc                	addi	a5,sp,472
  16:	0000                	unimp
  18:	0e44                	addi	s1,sp,788
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	00001c8b          	0x1c8b
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c48                	addi	a0,sp,532
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00c0                	addi	s0,sp,68
   2:	0000                	unimp
   4:	00c2                	slli	ra,ra,0x10
   6:	0000                	unimp
   8:	00ca                	slli	ra,ra,0x12
   a:	0000                	unimp
   c:	00d4                	addi	a3,sp,68
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0c48                	addi	a0,sp,532
  1e:	0000                	unimp
  20:	0e44                	addi	s1,sp,788
  22:	0000                	unimp
  24:	0f7c                	addi	a5,sp,924
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c48                	addi	a0,sp,532
  3a:	0000                	unimp
  3c:	0cbe                	slli	s9,s9,0xf
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	20bc                	fld	fa5,64(s1)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x140>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0xb6>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0xb8>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x19a>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xe0>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x10a>
}
      a0:	0065                	c.nop	25
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
    asm volatile(
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
}
      b8:	6564                	flw	fs1,76(a0)
    for(i=0;i<(length/3);i++) {
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
    asm volatile(
      c0:	5f00                	lw	s0,56(a4)
    for(i=0;i<(length/3);i++) {
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
    asm volatile(
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
    for(i=0;i<(length/3);i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x186>
      de:	0200                	addi	s0,sp,256
    int line[size_b][size_a + size_b];
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
    int line[size_b][size_a + size_b];
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
    int pola[size_a];
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    int line[size_b][size_a + size_b];
     10a:	0305                	addi	t1,t1,1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
     110:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     112:	0909                	addi	s2,s2,2
    int pola[size_a];
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     118:	0601                	addi	a2,a2,0
     11a:	00090203          	lb	tp,0(s2) # b000 <_stack_len+0x7000>
    int pola[size_a];
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult2+0xa6>
    int polb[size_b];
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
    int pola[size_a];
     128:	0501                	addi	a0,a0,0
    int polb[size_b];
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	0000                	unimp
    int pola[size_a];
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	0901                	addi	s2,s2,0
    int line[size_b][size_a + size_b];
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int polb[size_b];
     13a:	0616                	slli	a2,a2,0x5
            line[i][j] = 0;
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
            product[j] = 0;
     148:	0100                	addi	s0,sp,128
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     14e:	0104                	addi	s1,sp,128
     150:	0306                	slli	t1,t1,0x1
    array_equ(pola,a,size_a);
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
     156:	0501                	addi	a0,a0,0
     158:	0005                	c.nop	1
     15a:	0402                	c.slli64	s0
     15c:	0601                	addi	a2,a2,0
     15e:	00090003          	lb	zero,0(s2)
     162:	0100                	addi	s0,sp,128
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
    array_mod(pola,mod,size_a);
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
    array_equ(polb,b,size_b);
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
    array_mod(polb,mod,size_b);
     17e:	09710303          	lb	t1,151(sp)
     182:	0004                	0x4
     184:	0001                	nop
    if(star_mult == 1){
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
     18c:	000a                	c.slli	zero,0x2
     18e:	0501                	addi	a0,a0,0
     190:	001a                	c.slli	zero,0x6
     192:	0402                	c.slli64	s0
     194:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
        for (j = size_b -1; j >= 0; j = j-1){
     1a4:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	0100                	addi	s0,sp,128
     1a8:	3405                	jal	fffffbc8 <_stack_start+0xfffefbc8>
            product[j] = 0;
     1aa:	0306                	slli	t1,t1,0x1
     1ac:	0905                	addi	s2,s2,1
     1ae:	0004                	0x4
            line[i][j] = 0;
     1b0:	0501                	addi	a0,a0,0
     1b2:	0305                	addi	t1,t1,1
            product[j] = 0;
     1b4:	0902                	c.slli64	s2
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	0301                	addi	t1,t1,0
     1ba:	0909                	addi	s2,s2,2
     1bc:	0004                	0x4
     1be:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1c0:	0601                	addi	a2,a2,0
     1c2:	00090103          	lb	sp,0(s2)
     1c6:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     1c8:	2c05                	jal	3f8 <polymult2+0x14e>
     1ca:	0306                	slli	t1,t1,0x1
    if(star_mult == 1){
     1cc:	0901                	addi	s2,s2,0
        for (j = size_b -1; j >= 0; j = j-1){
     1ce:	0002                	c.slli64	zero
     1d0:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     1d2:	0301                	addi	t1,t1,0
    for (i = 0; i < size_b; ++i){
     1d4:	0905                	addi	s2,s2,1
     1d6:	0000                	unimp
     1d8:	0501                	addi	a0,a0,0
     1da:	0305                	addi	t1,t1,1
     1dc:	0902                	c.slli64	s2
     1de:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1e0:	0501                	addi	a0,a0,0
     1e2:	0616                	slli	a2,a2,0x5
     1e4:	00090003          	lb	zero,0(s2)
    array_mod(product,mod,(size_a+size_b-1));
     1e8:	0100                	addi	s0,sp,128
     1ea:	0505                	addi	a0,a0,1
     1ec:	06096e03          	0x6096e03
     1f0:	0100                	addi	s0,sp,128
     1f2:	0a05                	addi	s4,s4,1
}
     1f4:	02091203          	lh	tp,32(s2)
     1f8:	0100                	addi	s0,sp,128
     1fa:	0d05                	addi	s10,s10,1
     1fc:	0200                	addi	s0,sp,256
     1fe:	0104                	addi	s1,sp,128
     200:	0306                	slli	t1,t1,0x1
     202:	0900                	addi	s0,sp,144
     204:	0002                	c.slli64	zero
     206:	0501                	addi	a0,a0,0
     208:	0005                	c.nop	1
     20a:	0402                	c.slli64	s0
     20c:	0601                	addi	a2,a2,0
     20e:	00090003          	lb	zero,0(s2)
     212:	0100                	addi	s0,sp,128
     214:	0105                	addi	sp,sp,1
     216:	04090403          	lb	s0,64(s2)
     21a:	0100                	addi	s0,sp,128
     21c:	0905                	addi	s2,s2,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     21e:	0200                	addi	s0,sp,256
     220:	0304                	addi	s1,sp,384
     222:	0306                	slli	t1,t1,0x1
     224:	097d                	addi	s2,s2,31
     226:	0002                	c.slli64	zero
     228:	0501                	addi	a0,a0,0
     22a:	0005                	c.nop	1
     22c:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	096d0303          	lb	t1,150(s10)
                line[size_b-1-j][k] = pola[k]*polb[j];
     232:	0000                	unimp
     234:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     236:	0402                	c.slli64	s0
     238:	09090303          	lb	t1,144(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     23c:	000a                	c.slli	zero,0x2
     23e:	0501                	addi	a0,a0,0
     240:	001a                	c.slli	zero,0x6
            for (k = size_a-1; k >= 0; k = k-1 ){
     242:	0402                	c.slli64	s0
     244:	09090303          	lb	t1,144(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0000                	unimp
     24a:	0501                	addi	a0,a0,0
     24c:	0402001b          	0x402001b
     250:	00030603          	lb	a2,0(t1)
     254:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     258:	4e05                	li	t3,1
     25a:	0306                	slli	t1,t1,0x1
     25c:	090a                	slli	s2,s2,0x2
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	0004                	0x4
     260:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     262:	0305                	addi	t1,t1,1
     264:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     268:	0501                	addi	a0,a0,0
            line[i][j] = line[i][j] % mod;
     26a:	064e                	slli	a2,a2,0x13
        for(j = 0; j < size_a + size_b -1; ++j){
     26c:	00097d03          	0x97d03
            line[i][j] = line[i][j] % mod;
     270:	0100                	addi	s0,sp,128
     272:	1d05                	addi	s10,s10,-31
     274:	08090303          	lb	t1,128(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     278:	0100                	addi	s0,sp,128
     27a:	4e05                	li	t3,1
    for (i = 0; i < size_b; ++i){
     27c:	06097d03          	0x6097d03
     280:	0100                	addi	s0,sp,128
     282:	0905                	addi	s2,s2,1
        for(j = 0; j < size_a + size_b -1; ++j){
     284:	04090303          	lb	t1,64(s2)
            product[j] += line[i][j];
     288:	0100                	addi	s0,sp,128
     28a:	4e05                	li	t3,1
     28c:	0c097d03          	0xc097d03
     290:	0100                	addi	s0,sp,128
     292:	0905                	addi	s2,s2,1
     294:	04090603          	lb	a2,64(s2)
     298:	0100                	addi	s0,sp,128
     29a:	4e05                	li	t3,1
        for(i = 0; i < size_b; ++i){
     29c:	04097a03          	0x4097a03
    for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	0100                	addi	s0,sp,128
     2a2:	0905                	addi	s2,s2,1
     2a4:	0c090303          	lb	t1,192(s2)
        for(i = 0; i < size_b; ++i){
     2a8:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2aa:	4e05                	li	t3,1
    int line[size_b][size_a + size_b];
     2ac:	02097d03          	0x2097d03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2b0:	0100                	addi	s0,sp,128
     2b2:	0905                	addi	s2,s2,1
     2b4:	06090303          	lb	t1,96(s2)
     2b8:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     2ba:	02090303          	lb	t1,32(s2)
     2be:	0100                	addi	s0,sp,128
     2c0:	4e05                	li	t3,1
     2c2:	04097a03          	0x4097a03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	0100                	addi	s0,sp,128
     2c8:	0905                	addi	s2,s2,1
     2ca:	00090303          	lb	t1,0(s2)
     2ce:	0100                	addi	s0,sp,128
     2d0:	06090303          	lb	t1,96(s2)
     2d4:	0100                	addi	s0,sp,128
     2d6:	04090103          	lb	sp,64(s2)
     2da:	0100                	addi	s0,sp,128
     2dc:	06097f03          	0x6097f03
    int line[size_b][size_a + size_b];
     2e0:	0100                	addi	s0,sp,128
     2e2:	02090103          	lb	sp,32(s2)
    int pola[size_a];
     2e6:	0100                	addi	s0,sp,128
     2e8:	4e05                	li	t3,1
     2ea:	04097903          	0x4097903
     2ee:	0100                	addi	s0,sp,128
     2f0:	0905                	addi	s2,s2,1
    int polb[size_b];
     2f2:	02090603          	lb	a2,32(s2)
     2f6:	0100                	addi	s0,sp,128
    int pola[size_a];
     2f8:	4e05                	li	t3,1
    int polb[size_b];
     2fa:	04097a03          	0x4097a03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2fe:	0100                	addi	s0,sp,128
     300:	0905                	addi	s2,s2,1
    int line[size_b][size_a + size_b];
     302:	02090303          	lb	t1,32(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     306:	0100                	addi	s0,sp,128
    int pola[size_a];
     308:	0505                	addi	a0,a0,1
     30a:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     30c:	0901                	addi	s2,s2,0
    for (i = 0; i < size_b; ++i){
     30e:	0004                	0x4
     310:	0301                	addi	t1,t1,0
     312:	0901                	addi	s2,s2,0
            product2[j] = 0;
     314:	0000                	unimp
     316:	0301                	addi	t1,t1,0
     318:	0901                	addi	s2,s2,0
     31a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     31c:	0301                	addi	t1,t1,0
     31e:	0901                	addi	s2,s2,0
    array_equ(pola,a,size_a);
     320:	0000                	unimp
     322:	0501                	addi	a0,a0,0
     324:	0609                	addi	a2,a2,2
     326:	00090003          	lb	zero,0(s2)
     32a:	0100                	addi	s0,sp,128
    array_equ(polb,b,size_b);
     32c:	0505                	addi	a0,a0,1
     32e:	0306                	slli	t1,t1,0x1
     330:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     334:	0501                	addi	a0,a0,0
     336:	0614                	addi	a3,sp,768
    if(star_mult == 1){
     338:	00090203          	lb	tp,0(s2)
     33c:	0100                	addi	s0,sp,128
     33e:	0505                	addi	a0,a0,1
     340:	06097e03          	0x6097e03
     344:	0100                	addi	s0,sp,128
     346:	0c05                	addi	s8,s8,1
     348:	02090003          	lb	zero,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     34c:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	1805                	addi	a6,a6,-31
     350:	02090303          	lb	t1,32(s2)
            product2[j] = 0;
     354:	0100                	addi	s0,sp,128
     356:	1105                	addi	sp,sp,-31
            line[i][j] = 0;
     358:	0200                	addi	s0,sp,256
     35a:	0104                	addi	s1,sp,128
            product2[j] = 0;
     35c:	0306                	slli	t1,t1,0x1
     35e:	097d                	addi	s2,s2,31
        for(j = 0; j < size_a + size_b -1; ++j){
     360:	0008                	0x8
     362:	0501                	addi	a0,a0,0
     364:	0005                	c.nop	1
     366:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     368:	0601                	addi	a2,a2,0
     36a:	00090003          	lb	zero,0(s2)
     36e:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     370:	04090f03          	lb	t5,64(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     374:	0100                	addi	s0,sp,128
     376:	0306                	slli	t1,t1,0x1
     378:	0900                	addi	s0,sp,144
     37a:	0012                	c.slli	zero,0x4
     37c:	0301                	addi	t1,t1,0
     37e:	0901                	addi	s2,s2,0
     380:	0006                	c.slli	zero,0x1
     382:	0301                	addi	t1,t1,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     384:	0909                	addi	s2,s2,2
                line[size_b-1-j][k] = pola[k]*polb[j];
     386:	0008                	0x8
     388:	0301                	addi	t1,t1,0
     38a:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	000c                	0xc
     38e:	0301                	addi	t1,t1,0
        for (j = size_b -1; j >= 0; j = j-1){
     390:	0904                	addi	s1,sp,144
     392:	0008                	0x8
     394:	0501                	addi	a0,a0,0
     396:	00030607          	0x30607
        for(j=0;j<size_a+size_b-1;++j){
     39a:	0009                	c.nop	2
    for(i=0;i<size_b;++i){
     39c:	0100                	addi	s0,sp,128
     39e:	1d05                	addi	s10,s10,-31
     3a0:	0200                	addi	s0,sp,256
     3a2:	0104                	addi	s1,sp,128
     3a4:	0306                	slli	t1,t1,0x1
     3a6:	0908                	addi	a0,sp,144
     3a8:	001c                	0x1c
        for(j=0;j<size_a+size_b-1;++j){
     3aa:	0501                	addi	a0,a0,0
     3ac:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ae:	0402                	c.slli64	s0
     3b0:	0601                	addi	a2,a2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3b2:	00090003          	lb	zero,0(s2)
     3b6:	0100                	addi	s0,sp,128
     3b8:	1405                	addi	s0,s0,-31
     3ba:	04090103          	lb	sp,64(s2)
     3be:	0100                	addi	s0,sp,128
     3c0:	0d05                	addi	s10,s10,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0200                	addi	s0,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c4:	0304                	addi	s1,sp,384
     3c6:	0306                	slli	t1,t1,0x1
     3c8:	0004095b          	0x4095b
            for (k = size_a-1; k >= 0; k = k-1 ){
     3cc:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	0018                	0x18
     3d0:	0402                	c.slli64	s0
     3d2:	01030603          	lb	a2,16(t1)
            product2[j] += line[i][j];
     3d6:	0009                	c.nop	2
     3d8:	0100                	addi	s0,sp,128
        for(j=0;j<size_a+size_b-1;++j){
     3da:	0200                	addi	s0,sp,256
     3dc:	0304                	addi	s1,sp,384
            product2[j] += line[i][j];
     3de:	06097f03          	0x6097f03
     3e2:	0100                	addi	s0,sp,128
        for(j=0;j<size_a+size_b-1;++j){
     3e4:	0d05                	addi	s10,s10,1
     3e6:	0200                	addi	s0,sp,256
     3e8:	0304                	addi	s1,sp,384
    for(i=0;i<size_b;++i){
     3ea:	0306                	slli	t1,t1,0x1
     3ec:	0901                	addi	s2,s2,0
     3ee:	0004                	0x4
}
     3f0:	0501                	addi	a0,a0,0
     3f2:	0018                	0x18
     3f4:	0402                	c.slli64	s0
     3f6:	00030603          	lb	a2,0(t1)
     3fa:	0009                	c.nop	2
     3fc:	0100                	addi	s0,sp,128
     3fe:	2c05                	jal	62e <ext_euclid+0x44>
     400:	0200                	addi	s0,sp,256
     402:	0304                	addi	s1,sp,384
     404:	0306                	slli	t1,t1,0x1
     406:	097e                	slli	s2,s2,0x1f
     408:	0004                	0x4
     40a:	0501                	addi	a0,a0,0
     40c:	0014                	0x14
     40e:	0402                	c.slli64	s0
     410:	0301                	addi	t1,t1,0
     412:	0900                	addi	s0,sp,144
     414:	0004                	0x4
     416:	0501                	addi	a0,a0,0
     418:	0009                	c.nop	2
    int v[size_N];
     41a:	0402                	c.slli64	s0
     41c:	0601                	addi	a2,a2,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     41e:	00090003          	lb	zero,0(s2)
     422:	0100                	addi	s0,sp,128
     424:	1d05                	addi	s10,s10,-31
     426:	0200                	addi	s0,sp,256
     428:	0204                	addi	s1,sp,256
     42a:	0306                	slli	t1,t1,0x1
     42c:	097f                	0x97f
     42e:	0004                	0x4
     430:	0501                	addi	a0,a0,0
     432:	0103060f          	0x103060f
     436:	0809                	addi	a6,a6,2
     438:	0100                	addi	s0,sp,128
     43a:	0705                	addi	a4,a4,1
    int v[size_N];
     43c:	04091d03          	lh	s10,64(s2)
     440:	0100                	addi	s0,sp,128
     442:	1d05                	addi	s10,s10,-31
     444:	0200                	addi	s0,sp,256
    int q[size_N];
     446:	0104                	addi	s1,sp,128
     448:	0306                	slli	t1,t1,0x1
     44a:	0901                	addi	s2,s2,0
    int num_temp[size_N];
     44c:	0002                	c.slli64	zero
     44e:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     450:	0009                	c.nop	2
     452:	0402                	c.slli64	s0
     454:	0601                	addi	a2,a2,0
     456:	00090003          	lb	zero,0(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     45a:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     45c:	0f05                	addi	t5,t5,1
     45e:	04091003          	lh	zero,64(s2)
    int v[size_N];
     462:	0100                	addi	s0,sp,128
     464:	1105                	addi	sp,sp,-31
    array_equ(num_temp,num,size_N);
     466:	0200                	addi	s0,sp,256
     468:	0104                	addi	s1,sp,128
     46a:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46c:	097f                	0x97f
     46e:	0002                	c.slli64	zero
    int denum_temp[size_D];
     470:	0501                	addi	a0,a0,0
     472:	0005                	c.nop	1
    array_equ(num_temp,num,size_N);
     474:	0402                	c.slli64	s0
    array_mod(num_temp,mod,size_N);
     476:	0601                	addi	a2,a2,0
     478:	00090003          	lb	zero,0(s2)
     47c:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     47e:	0b05                	addi	s6,s6,1
    array_equ(denum_temp,denum,size_D);
     480:	0c090703          	lb	a4,192(s2)
     484:	0100                	addi	s0,sp,128
     486:	1005                	c.nop	-31
    array_mod(denum_temp,mod,size_D);
     488:	0200                	addi	s0,sp,256
     48a:	0104                	addi	s1,sp,128
     48c:	0306                	slli	t1,t1,0x1
     48e:	0900                	addi	s0,sp,144
    for (i = 0; i < size_N; ++i){
     490:	0002                	c.slli64	zero
     492:	0501                	addi	a0,a0,0
     494:	0005                	c.nop	1
    for (i = size_D-1; i >= 0; i = i-1){
     496:	0402                	c.slli64	s0
     498:	0601                	addi	a2,a2,0
     49a:	00090003          	lb	zero,0(s2)
     49e:	0100                	addi	s0,sp,128
     4a0:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     4a2:	0004090b          	0x4090b
        if ( (b_N*u)%mod == 1 )
     4a6:	0301                	addi	t1,t1,0
    for (u = 0; u < mod; ++u){
     4a8:	0902                	c.slli64	s2
     4aa:	000e                	c.slli	zero,0x3
     4ac:	0301                	addi	t1,t1,0
     4ae:	0902                	c.slli64	s2
        q[i] = 0;
     4b0:	0000                	unimp
     4b2:	0501                	addi	a0,a0,0
     4b4:	0601                	addi	a2,a2,0
     4b6:	00090103          	lb	sp,0(s2)
     4ba:	0100                	addi	s0,sp,128
     4bc:	1105                	addi	sp,sp,-31
        v[i] = 0;
     4be:	0200                	addi	s0,sp,256
     4c0:	0304                	addi	s1,sp,384
    for (i = 0; i < size_N; ++i){
     4c2:	0306                	slli	t1,t1,0x1
     4c4:	095c                	addi	a5,sp,148
        if( denum_temp[i] != 0 )
     4c6:	002a                	c.slli	zero,0xa
    for (i = size_D-1; i >= 0; i = i-1){
     4c8:	0501                	addi	a0,a0,0
     4ca:	0025                	c.nop	9
        if ( (b_N*u)%mod == 1 )
     4cc:	0402                	c.slli64	s0
     4ce:	00030603          	lb	a2,0(t1)
     4d2:	0409                	addi	s0,s0,2
     4d4:	0100                	addi	s0,sp,128
    for (u = 0; u < mod; ++u){
     4d6:	2b05                	jal	a06 <generate_keys+0x208>
     4d8:	0200                	addi	s0,sp,256
        if( num_temp[i] != 0 )
     4da:	0304                	addi	s1,sp,384
    for (i = size_N-1; i >= 0; i = i-1){
     4dc:	04090003          	lb	zero,64(s2)
     4e0:	0100                	addi	s0,sp,128
     4e2:	2e05                	jal	812 <generate_keys+0x14>
     4e4:	0200                	addi	s0,sp,256
     4e6:	0304                	addi	s1,sp,384
     4e8:	02090003          	lb	zero,32(s2)
    while (d >= d2){
     4ec:	0100                	addi	s0,sp,128
    array_equ(result,q,size_N);
     4ee:	2a05                	jal	61e <ext_euclid+0x34>
     4f0:	0200                	addi	s0,sp,256
     4f2:	0304                	addi	s1,sp,384
     4f4:	06097f03          	0x6097f03
     4f8:	0100                	addi	s0,sp,128
     4fa:	2e05                	jal	82a <generate_keys+0x2c>
    for(i = size_N; i < (2*size_N); ++i){
     4fc:	0200                	addi	s0,sp,256
     4fe:	0304                	addi	s1,sp,384
        result[i] = num_temp[i-size_N];
     500:	02090103          	lb	sp,32(s2)
     504:	0100                	addi	s0,sp,128
     506:	2505                	jal	b26 <ntru_encyrpt+0x36>
    for(i = size_N; i < (2*size_N); ++i){
     508:	0200                	addi	s0,sp,256
     50a:	0304                	addi	s1,sp,384
}
     50c:	04090003          	lb	zero,64(s2)
     510:	0100                	addi	s0,sp,128
     512:	2805                	jal	542 <polydiv+0x128>
     514:	0200                	addi	s0,sp,256
     516:	0304                	addi	s1,sp,384
     518:	0306                	slli	t1,t1,0x1
     51a:	097f                	0x97f
     51c:	0002                	c.slli64	zero
     51e:	0501                	addi	a0,a0,0
     520:	0020                	addi	s0,sp,8
     522:	0402                	c.slli64	s0
     524:	0301                	addi	t1,t1,0
     526:	0900                	addi	s0,sp,144
     528:	0000                	unimp
     52a:	0501                	addi	a0,a0,0
     52c:	000d                	c.nop	3
     52e:	0402                	c.slli64	s0
     530:	0601                	addi	a2,a2,0
     532:	00090003          	lb	zero,0(s2)
        v[(d-d2)] = u*r_d;
     536:	0100                	addi	s0,sp,128
     538:	2505                	jal	b58 <ntru_encyrpt+0x68>
     53a:	0200                	addi	s0,sp,256
     53c:	0204                	addi	s1,sp,256
     53e:	0306                	slli	t1,t1,0x1
     540:	097f                	0x97f
    array_mod(v,mod,size_N);
     542:	0004                	0x4
     544:	0501                	addi	a0,a0,0
     546:	04020027          	0x4020027
     54a:	0602                	c.slli64	a2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     54c:	00090003          	lb	zero,0(s2)
     550:	0100                	addi	s0,sp,128
     552:	1405                	addi	s0,s0,-31
     554:	08090103          	lb	sp,128(s2)
     558:	0100                	addi	s0,sp,128
    array_mod(product,mod,size_N);
     55a:	1105                	addi	sp,sp,-31
     55c:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     55e:	0304                	addi	s1,sp,384
    array_mod(product,mod,size_N);
     560:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     562:	0908                	addi	a0,sp,144
     564:	0004                	0x4
     566:	0501                	addi	a0,a0,0
     568:	0029                	c.nop	10
    array_mod(num_temp,mod,size_N);
     56a:	0402                	c.slli64	s0
     56c:	00030603          	lb	a2,0(t1)
     570:	0409                	addi	s0,s0,2
        for(i = 0; i < size_N; ++i){
     572:	0100                	addi	s0,sp,128
     574:	2f05                	jal	ca4 <_start+0x10>
     576:	0200                	addi	s0,sp,256
     578:	0304                	addi	s1,sp,384
    array_mod(q,mod,size_N);
     57a:	04090003          	lb	zero,64(s2)
     57e:	0100                	addi	s0,sp,128
     580:	3205                	jal	fffffea0 <_stack_start+0xfffefea0>
        for (i = size_N-1; i >= 0; i = i-1){
     582:	0200                	addi	s0,sp,256
     584:	0304                	addi	s1,sp,384
     586:	02090003          	lb	zero,32(s2)
     58a:	0100                	addi	s0,sp,128
     58c:	2a05                	jal	6bc <ext_euclid+0xd2>
     58e:	0200                	addi	s0,sp,256
     590:	0304                	addi	s1,sp,384
     592:	06097f03          	0x6097f03
            num_temp[i] = num_temp[i] - product[i];
     596:	0100                	addi	s0,sp,128
     598:	3205                	jal	fffffeb8 <_stack_start+0xfffefeb8>
     59a:	0200                	addi	s0,sp,256
     59c:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     59e:	02090103          	lb	sp,32(s2)
            num_temp[i] = num_temp[i] - product[i];
     5a2:	0100                	addi	s0,sp,128
     5a4:	2905                	jal	9d4 <generate_keys+0x1d6>
     5a6:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5a8:	0304                	addi	s1,sp,384
            q[i] = q[i] + v[i];
     5aa:	04090003          	lb	zero,64(s2)
     5ae:	0100                	addi	s0,sp,128
     5b0:	2805                	jal	5e0 <polydiv+0x1c6>
     5b2:	0200                	addi	s0,sp,256
        for(i = 0; i < size_N; ++i){
     5b4:	0304                	addi	s1,sp,384
     5b6:	0306                	slli	t1,t1,0x1
            q[i] = q[i] + v[i];
     5b8:	097f                	0x97f
     5ba:	0002                	c.slli64	zero
     5bc:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     5be:	0020                	addi	s0,sp,8
            if( num_temp[i] != 0 )
     5c0:	0402                	c.slli64	s0
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0301                	addi	t1,t1,0
     5c4:	0900                	addi	s0,sp,144
            v[i] = 0;
     5c6:	0000                	unimp
     5c8:	0501                	addi	a0,a0,0
     5ca:	000d                	c.nop	3
     5cc:	0402                	c.slli64	s0
     5ce:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     5d0:	00090003          	lb	zero,0(s2)
     5d4:	0100                	addi	s0,sp,128
     5d6:	2505                	jal	bf6 <ntru_deceypt+0x72>
        result[i] = num_temp[i-size_N];
     5d8:	0200                	addi	s0,sp,256
     5da:	0204                	addi	s1,sp,256
     5dc:	0306                	slli	t1,t1,0x1
     5de:	097f                	0x97f
     5e0:	0004                	0x4
     5e2:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	04020027          	0x4020027
     5e8:	0602                	c.slli64	a2
    int ri_2[size]; // MX-ring poly, a
     5ea:	00090003          	lb	zero,0(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     5f0:	0d05                	addi	s10,s10,1
     5f2:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	0304                	addi	s1,sp,384
     5f6:	0306                	slli	t1,t1,0x1
     5f8:	090a                	slli	s2,s2,0x2
     5fa:	0008                	0x8
     5fc:	0501                	addi	a0,a0,0
     5fe:	0025                	c.nop	9
     600:	0402                	c.slli64	s0
     602:	00030603          	lb	a2,0(t1)
     606:	0009                	c.nop	2
     608:	0100                	addi	s0,sp,128
     60a:	2c05                	jal	83a <generate_keys+0x3c>
     60c:	0200                	addi	s0,sp,256
     60e:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     610:	02097f03          	0x2097f03
     614:	0100                	addi	s0,sp,128
    int ri_1[size]; // f-random poly, f[N] = 0, b
     616:	2505                	jal	c36 <ntru_deceypt+0xb2>
     618:	0200                	addi	s0,sp,256
     61a:	0304                	addi	s1,sp,384
    int ri[size];
     61c:	04090103          	lb	sp,64(s2)
     620:	0100                	addi	s0,sp,128
    int ti_1[size]; // ti_1[0] = 1
     622:	1805                	addi	a6,a6,-31
     624:	0200                	addi	s0,sp,256
     626:	0304                	addi	s1,sp,384
    int ti[size];
     628:	04090003          	lb	zero,64(s2)
     62c:	0100                	addi	s0,sp,128
    int qi_1[size];
     62e:	2c05                	jal	85e <generate_keys+0x60>
     630:	0200                	addi	s0,sp,256
     632:	0304                	addi	s1,sp,384
    int temp[size];
     634:	0306                	slli	t1,t1,0x1
     636:	097f                	0x97f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0004                	0x4
     63a:	0501                	addi	a0,a0,0
     63c:	0014                	0x14
    int ri_2[size]; // MX-ring poly, a
     63e:	0402                	c.slli64	s0
     640:	0301                	addi	t1,t1,0
    int temp[size];
     642:	0900                	addi	s0,sp,144
    for (i = 0; i < size; ++i) {
     644:	0000                	unimp
        ti_2[i] = 0;
     646:	0501                	addi	a0,a0,0
     648:	0009                	c.nop	2
     64a:	0402                	c.slli64	s0
     64c:	0601                	addi	a2,a2,0
    for (i = 0; i < size; ++i) {
     64e:	00090003          	lb	zero,0(s2)
    array_equ(ri_2,polyR,size);
     652:	0100                	addi	s0,sp,128
     654:	1d05                	addi	s10,s10,-31
     656:	0200                	addi	s0,sp,256
     658:	0204                	addi	s1,sp,256
    array_equ(ri_1,polyf,size);
     65a:	0306                	slli	t1,t1,0x1
     65c:	097f                	0x97f
     65e:	0004                	0x4
     660:	0501                	addi	a0,a0,0
    ti_1[0] = 1;
     662:	0103060f          	0x103060f
     666:	0809                	addi	a6,a6,2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	0100                	addi	s0,sp,128
     66a:	0d05                	addi	s10,s10,1
     66c:	0200                	addi	s0,sp,256
     66e:	0304                	addi	s1,sp,384
            ti[i] = ti_2[i] - temp[i];
     670:	0306                	slli	t1,t1,0x1
     672:	0908                	addi	a0,sp,144
     674:	0004                	0x4
     676:	0501                	addi	a0,a0,0
    array_mod(ri_2,mod,size);
     678:	0022                	c.slli	zero,0x8
     67a:	0402                	c.slli64	s0
     67c:	00030603          	lb	a2,0(t1)
    array_mod(ri_1,mod,size);
     680:	0009                	c.nop	2
     682:	0100                	addi	s0,sp,128
     684:	1805                	addi	a6,a6,-31
     686:	0200                	addi	s0,sp,256
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	0304                	addi	s1,sp,384
     68a:	04090003          	lb	zero,64(s2)
     68e:	0100                	addi	s0,sp,128
     690:	2005                	jal	6b0 <ext_euclid+0xc6>
     692:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     694:	0304                	addi	s1,sp,384
     696:	02097f03          	0x2097f03
     69a:	0100                	addi	s0,sp,128
     69c:	2205                	jal	7bc <ext_euclid+0x1d2>
     69e:	0200                	addi	s0,sp,256
     6a0:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     6a2:	02090103          	lb	sp,32(s2)
     6a6:	0100                	addi	s0,sp,128
    array_mod(temp,mod,size);
     6a8:	1805                	addi	a6,a6,-31
     6aa:	0200                	addi	s0,sp,256
     6ac:	0304                	addi	s1,sp,384
     6ae:	06090003          	lb	zero,96(s2)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b2:	0100                	addi	s0,sp,128
     6b4:	2005                	jal	6d4 <ext_euclid+0xea>
     6b6:	0200                	addi	s0,sp,256
     6b8:	0304                	addi	s1,sp,384
     6ba:	0306                	slli	t1,t1,0x1
     6bc:	097f                	0x97f
    array_equ(qi_1,res1,size);
     6be:	0006                	c.slli	zero,0x1
     6c0:	0501                	addi	a0,a0,0
     6c2:	0014                	0x14
    array_mod(qi_1,mod,size);
     6c4:	0402                	c.slli64	s0
     6c6:	0301                	addi	t1,t1,0
     6c8:	0900                	addi	s0,sp,144
     6ca:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6cc:	0501                	addi	a0,a0,0
     6ce:	0009                	c.nop	2
     6d0:	0402                	c.slli64	s0
     6d2:	0601                	addi	a2,a2,0
     6d4:	00090003          	lb	zero,0(s2)
     6d8:	0100                	addi	s0,sp,128
     6da:	2805                	jal	70a <ext_euclid+0x120>
    array_equ(temp,res2,size);
     6dc:	0200                	addi	s0,sp,256
     6de:	0204                	addi	s1,sp,256
     6e0:	0306                	slli	t1,t1,0x1
    array_mod(temp,mod,size);
     6e2:	097f                	0x97f
     6e4:	0004                	0x4
     6e6:	0501                	addi	a0,a0,0
     6e8:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     6ec:	0609                	addi	a2,a2,2
     6ee:	0100                	addi	s0,sp,128
     6f0:	4605                	li	a2,1
    array_mod(ti,mod,size);
     6f2:	0306                	slli	t1,t1,0x1
     6f4:	0911                	addi	s2,s2,4
     6f6:	0004                	0x4
     6f8:	0501                	addi	a0,a0,0
array_equ(ri_2,ri_1,size);
     6fa:	0305                	addi	t1,t1,1
     6fc:	0902                	c.slli64	s2
     6fe:	0000                	unimp
     700:	0501                	addi	a0,a0,0
array_equ(ri_1,ri,size);
     702:	0646                	slli	a2,a2,0x11
     704:	00097e03          	0x97e03
     708:	0100                	addi	s0,sp,128
array_equ(ti_2,ti_1,size);
     70a:	1d05                	addi	s10,s10,-31
     70c:	02090203          	lb	tp,32(s2)
     710:	0100                	addi	s0,sp,128
array_equ(ti_1,ti,size);
     712:	4605                	li	a2,1
     714:	04097e03          	0x4097e03
     718:	0100                	addi	s0,sp,128
        controlR = 0;
     71a:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     71c:	0a090203          	lb	tp,160(s2)
     720:	0100                	addi	s0,sp,128
    while (controlR != 0) {
     722:	4605                	li	a2,1
     724:	0c097e03          	0xc097e03
            if (((ri_2[0] * j) % mod) == 1)
     728:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     72a:	0905                	addi	s2,s2,1
     72c:	12090203          	lb	tp,288(s2)
     730:	0100                	addi	s0,sp,128
     732:	4605                	li	a2,1
     734:	02097e03          	0x2097e03
        for (i = 0; i < N + 1; ++i) {
     738:	0100                	addi	s0,sp,128
    }
     73a:	0905                	addi	s2,s2,1
     73c:	04090203          	lb	tp,64(s2)
     740:	0100                	addi	s0,sp,128
     742:	4605                	li	a2,1
     744:	02097e03          	0x2097e03
     748:	0100                	addi	s0,sp,128
     74a:	0905                	addi	s2,s2,1
     74c:	00090203          	lb	tp,0(s2)
     750:	0100                	addi	s0,sp,128
     752:	04090303          	lb	t1,64(s2)
     756:	0100                	addi	s0,sp,128
     758:	08097d03          	0x8097d03
     75c:	0100                	addi	s0,sp,128
     75e:	02090303          	lb	t1,32(s2)
     762:	0100                	addi	s0,sp,128
        ti_2[i] = 0;
     764:	04090103          	lb	sp,64(s2)
     768:	0100                	addi	s0,sp,128
     76a:	06097f03          	0x6097f03
     76e:	0100                	addi	s0,sp,128
     770:	02090103          	lb	sp,32(s2)
        ti_1[i] = 0;
     774:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     776:	4605                	li	a2,1
     778:	04097a03          	0x4097a03
            ri[i - (N + 1)] = res[i];
     77c:	0100                	addi	s0,sp,128
     77e:	0905                	addi	s2,s2,1
     780:	04090203          	lb	tp,64(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     784:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     786:	0505                	addi	a0,a0,1
     788:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	0901                	addi	s2,s2,0
            temp[i] = ri_2[i] - ri[i];
     78c:	0004                	0x4
     78e:	0301                	addi	t1,t1,0
     790:	0901                	addi	s2,s2,0
     792:	0000                	unimp
     794:	0301                	addi	t1,t1,0
     796:	0901                	addi	s2,s2,0
     798:	0000                	unimp
     79a:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     79c:	0646                	slli	a2,a2,0x11
            temp[i] = ri_2[i] - ri[i];
     79e:	00097b03          	0x97b03
        for (i = 0; i < N + 1; ++i) {
     7a2:	0100                	addi	s0,sp,128
     7a4:	0905                	addi	s2,s2,1
            ti[i] = ti_2[i] - temp[i];
     7a6:	02090503          	lb	a0,32(s2)
     7aa:	0100                	addi	s0,sp,128
     7ac:	0505                	addi	a0,a0,1
     7ae:	0306                	slli	t1,t1,0x1
     7b0:	0901                	addi	s2,s2,0
     7b2:	0004                	0x4
     7b4:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7b6:	0609                	addi	a2,a2,2
            ti[i] = ti_2[i] - temp[i];
     7b8:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7bc:	0100                	addi	s0,sp,128
     7be:	0505                	addi	a0,a0,1
              qi_1[i] = 0;
     7c0:	0306                	slli	t1,t1,0x1
     7c2:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     7c6:	0501                	addi	a0,a0,0
            controlR += ri[i];
     7c8:	060c                	addi	a1,sp,768
     7ca:	04090003          	lb	zero,64(s2)
              qi_1[i] = 0;
     7ce:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7d0:	1905                	addi	s2,s2,-31
            controlR += ri[i];
     7d2:	02090303          	lb	t1,32(s2)
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	0100                	addi	s0,sp,128
     7d8:	1105                	addi	sp,sp,-31
     7da:	0200                	addi	s0,sp,256
     7dc:	0104                	addi	s1,sp,128
     7de:	0306                	slli	t1,t1,0x1
     7e0:	097d                	addi	s2,s2,31
     7e2:	0008                	0x8
     7e4:	0501                	addi	a0,a0,0
        for (j = 0; j < mod; ++j) {
     7e6:	0005                	c.nop	1
     7e8:	0402                	c.slli64	s0
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     7ec:	00090003          	lb	zero,0(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	0100                	addi	s0,sp,128
     7f2:	04090b03          	lb	s6,64(s2)
     7f6:	0100                	addi	s0,sp,128
     7f8:	0306                	slli	t1,t1,0x1
     7fa:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     7fc:	000a                	c.slli	zero,0x2
int* generate_keys(int N, int p, int q){
     7fe:	0301                	addi	t1,t1,0
     800:	0906                	slli	s2,s2,0x1
     802:	0002                	c.slli64	zero
     804:	0301                	addi	t1,t1,0
     806:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     80a:	0501                	addi	a0,a0,0
     80c:	00030607          	0x30607
     810:	0009                	c.nop	2
     812:	0100                	addi	s0,sp,128
     814:	1d05                	addi	s10,s10,-31
     816:	0200                	addi	s0,sp,256
     818:	0104                	addi	s1,sp,128
     81a:	0306                	slli	t1,t1,0x1
     81c:	0908                	addi	a0,sp,144
     81e:	0012                	c.slli	zero,0x4
     820:	0501                	addi	a0,a0,0
     822:	0009                	c.nop	2
     824:	0402                	c.slli64	s0
     826:	0601                	addi	a2,a2,0
     828:	00090003          	lb	zero,0(s2)
     82c:	0100                	addi	s0,sp,128
     82e:	1405                	addi	s0,s0,-31
     830:	04090103          	lb	sp,64(s2)
     834:	0100                	addi	s0,sp,128
     836:	0d05                	addi	s10,s10,1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     838:	0200                	addi	s0,sp,256
     83a:	0304                	addi	s1,sp,384
     83c:	0306                	slli	t1,t1,0x1
     83e:	0965                	addi	s2,s2,25
     840:	0004                	0x4
     842:	0501                	addi	a0,a0,0
     844:	0019                	c.nop	6
     846:	0402                	c.slli64	s0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     848:	01030603          	lb	a2,16(t1)
     84c:	0009                	c.nop	2
     84e:	0100                	addi	s0,sp,128
     850:	1805                	addi	a6,a6,-31
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	0200                	addi	s0,sp,256
     854:	0304                	addi	s1,sp,384
     856:	06097f03          	0x6097f03
     85a:	0100                	addi	s0,sp,128
     85c:	0d05                	addi	s10,s10,1
     85e:	0200                	addi	s0,sp,256
     860:	0304                	addi	s1,sp,384
     862:	0306                	slli	t1,t1,0x1
     864:	0901                	addi	s2,s2,0
     866:	0004                	0x4
     868:	0501                	addi	a0,a0,0
     86a:	0019                	c.nop	6
     86c:	0402                	c.slli64	s0
     86e:	00030603          	lb	a2,0(t1)
     872:	0009                	c.nop	2
     874:	0100                	addi	s0,sp,128
     876:	2c05                	jal	aa6 <generate_keys+0x2a8>
     878:	0200                	addi	s0,sp,256
     87a:	0304                	addi	s1,sp,384
     87c:	0306                	slli	t1,t1,0x1
     87e:	097e                	slli	s2,s2,0x1f
     880:	0004                	0x4
     882:	0501                	addi	a0,a0,0
     884:	0014                	0x14
     886:	0402                	c.slli64	s0
     888:	0301                	addi	t1,t1,0
     88a:	0900                	addi	s0,sp,144
     88c:	0004                	0x4
     88e:	0501                	addi	a0,a0,0
     890:	0009                	c.nop	2
     892:	0402                	c.slli64	s0
     894:	0601                	addi	a2,a2,0
     896:	00090003          	lb	zero,0(s2)
     89a:	0100                	addi	s0,sp,128
     89c:	1d05                	addi	s10,s10,-31
     89e:	0200                	addi	s0,sp,256
     8a0:	0204                	addi	s1,sp,256
     8a2:	0306                	slli	t1,t1,0x1
     8a4:	097f                	0x97f
     8a6:	0004                	0x4
     8a8:	0501                	addi	a0,a0,0
     8aa:	0103060f          	0x103060f
     8ae:	0809                	addi	a6,a6,2
     8b0:	0100                	addi	s0,sp,128
     8b2:	1105                	addi	sp,sp,-31
     8b4:	0200                	addi	s0,sp,256
     8b6:	0304                	addi	s1,sp,384
     8b8:	0306                	slli	t1,t1,0x1
     8ba:	0916                	slli	s2,s2,0x5
     8bc:	0004                	0x4
    int polyR[N+1];
     8be:	0501                	addi	a0,a0,0
     8c0:	0025                	c.nop	9
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	0402                	c.slli64	s0
    int polyR[N+1];
     8c4:	00030603          	lb	a2,0(t1)
     8c8:	0409                	addi	s0,s0,2
     8ca:	0100                	addi	s0,sp,128
     8cc:	2b05                	jal	dfc <memset+0x60>
     8ce:	0200                	addi	s0,sp,256
     8d0:	0304                	addi	s1,sp,384
    polyR[N] = 1;
     8d2:	04090003          	lb	zero,64(s2)
     8d6:	0100                	addi	s0,sp,128
     8d8:	2e05                	jal	c08 <ntru_deceypt+0x84>
     8da:	0200                	addi	s0,sp,256
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	0304                	addi	s1,sp,384
     8de:	02090003          	lb	zero,32(s2)
     8e2:	0100                	addi	s0,sp,128
     8e4:	2a05                	jal	a14 <generate_keys+0x216>
     8e6:	0200                	addi	s0,sp,256
     8e8:	0304                	addi	s1,sp,384
     8ea:	06097f03          	0x6097f03
     8ee:	0100                	addi	s0,sp,128
     8f0:	2e05                	jal	c20 <ntru_deceypt+0x9c>
     8f2:	0200                	addi	s0,sp,256
     8f4:	0304                	addi	s1,sp,384
     8f6:	02090103          	lb	sp,32(s2)
     8fa:	0100                	addi	s0,sp,128
     8fc:	2505                	jal	f1c <main+0xd8>
     8fe:	0200                	addi	s0,sp,256
     900:	0304                	addi	s1,sp,384
     902:	04090003          	lb	zero,64(s2)
     906:	0100                	addi	s0,sp,128
     908:	2805                	jal	938 <generate_keys+0x13a>
     90a:	0200                	addi	s0,sp,256
     90c:	0304                	addi	s1,sp,384
     90e:	0306                	slli	t1,t1,0x1
     910:	097f                	0x97f
     912:	0002                	c.slli64	zero
     914:	0501                	addi	a0,a0,0
     916:	0020                	addi	s0,sp,8
     918:	0402                	c.slli64	s0
     91a:	0301                	addi	t1,t1,0
     91c:	0900                	addi	s0,sp,144
     91e:	0000                	unimp
     920:	0501                	addi	a0,a0,0
     922:	000d                	c.nop	3
     924:	0402                	c.slli64	s0
     926:	0601                	addi	a2,a2,0
     928:	00090003          	lb	zero,0(s2)
     92c:	0100                	addi	s0,sp,128
     92e:	2505                	jal	f4e <main+0x10a>
     930:	0200                	addi	s0,sp,256
     932:	0204                	addi	s1,sp,256
     934:	0306                	slli	t1,t1,0x1
     936:	097f                	0x97f
     938:	0004                	0x4
     93a:	0501                	addi	a0,a0,0
     93c:	04020027          	0x4020027
    polyR[0] = -1;
     940:	0602                	c.slli64	a2
     942:	00090003          	lb	zero,0(s2)
    for(i = 1; i < N; ++i){
     946:	0100                	addi	s0,sp,128
     948:	1d05                	addi	s10,s10,-31
     94a:	0200                	addi	s0,sp,256
    for (i = N; i < 55; ++i ){
     94c:	0104                	addi	s1,sp,128
     94e:	0306                	slli	t1,t1,0x1
     950:	0900                	addi	s0,sp,144
     952:	0006                	c.slli	zero,0x1
    for(i = 0; i < N; ++i){
     954:	0501                	addi	a0,a0,0
        random_keys[i] = f[i];
     956:	0009                	c.nop	2
     958:	0402                	c.slli64	s0
     95a:	0601                	addi	a2,a2,0
     95c:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     960:	0100                	addi	s0,sp,128
     962:	0e05                	addi	t3,t3,1
     964:	04091003          	lh	zero,64(s2)
    for(i = N; i < (2*N); ++i){
     968:	0100                	addi	s0,sp,128
     96a:	0d05                	addi	s10,s10,1
     96c:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     96e:	0104                	addi	s1,sp,128
     970:	0306                	slli	t1,t1,0x1
     972:	097f                	0x97f
     974:	0002                	c.slli64	zero
    for(i = N; i < (2*N); ++i){
     976:	0501                	addi	a0,a0,0
     978:	0005                	c.nop	1
    for(i = (2*N); i < (3*N); ++i){
     97a:	0402                	c.slli64	s0
     97c:	0601                	addi	a2,a2,0
     97e:	00090003          	lb	zero,0(s2)
    fp = ext_euclid(polyR, f, (N+1), p);
     982:	0100                	addi	s0,sp,128
     984:	0c090003          	lb	zero,192(s2)
     988:	0100                	addi	s0,sp,128
     98a:	0e05                	addi	t3,t3,1
    for(i = (2*N); i < (3*N); ++i){
     98c:	02090103          	lb	sp,32(s2)
        random_keys[i] = fp[i-(2*N)];
     990:	0100                	addi	s0,sp,128
     992:	1405                	addi	s0,s0,-31
     994:	04097103          	0x4097103
    for(i = (2*N); i < (3*N); ++i){
     998:	0100                	addi	s0,sp,128
    fq = ext_euclid(polyR, f, (N+1), q);
     99a:	1105                	addi	sp,sp,-31
     99c:	0200                	addi	s0,sp,256
     99e:	0304                	addi	s1,sp,384
     9a0:	0306                	slli	t1,t1,0x1
     9a2:	0908                	addi	a0,sp,144
     9a4:	0004                	0x4
    for(i = (3*N); i < (4*N); ++i){
     9a6:	0501                	addi	a0,a0,0
     9a8:	0029                	c.nop	10
     9aa:	0402                	c.slli64	s0
     9ac:	00030603          	lb	a2,0(t1)
        random_keys[i] = fq[i-(3*N)];
     9b0:	0409                	addi	s0,s0,2
     9b2:	0100                	addi	s0,sp,128
     9b4:	2f05                	jal	10e4 <__DTOR_END__+0x158>
    for(i = (3*N); i < (4*N); ++i){
     9b6:	0200                	addi	s0,sp,256
     9b8:	0304                	addi	s1,sp,384
    fg = polymult2(fq, N, g, N, 0);
     9ba:	04090003          	lb	zero,64(s2)
     9be:	0100                	addi	s0,sp,128
     9c0:	3205                	jal	2e0 <polymult2+0x36>
     9c2:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     9c4:	0304                	addi	s1,sp,384
     9c6:	02090003          	lb	zero,32(s2)
     9ca:	0100                	addi	s0,sp,128
     9cc:	2a05                	jal	afc <ntru_encyrpt+0xc>
     9ce:	0200                	addi	s0,sp,256
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	0304                	addi	s1,sp,384
     9d2:	06097f03          	0x6097f03
     9d6:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     9d8:	3205                	jal	2f8 <polymult2+0x4e>
     9da:	0200                	addi	s0,sp,256
     9dc:	0304                	addi	s1,sp,384
     9de:	02090103          	lb	sp,32(s2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e2:	0100                	addi	s0,sp,128
     9e4:	2905                	jal	e14 <memset+0x78>
     9e6:	0200                	addi	s0,sp,256
     9e8:	0304                	addi	s1,sp,384
    for(i = (4*N); i < (5*N); ++i){
     9ea:	04090003          	lb	zero,64(s2)
     9ee:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	2805                	jal	a20 <generate_keys+0x222>
     9f2:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     9f4:	0304                	addi	s1,sp,384
     9f6:	0306                	slli	t1,t1,0x1
     9f8:	097f                	0x97f
     9fa:	0002                	c.slli64	zero
    for(i = (5*N); i < (6*N+1); ++i){
     9fc:	0501                	addi	a0,a0,0
     9fe:	0020                	addi	s0,sp,8
     a00:	0402                	c.slli64	s0
     a02:	0301                	addi	t1,t1,0
     a04:	0900                	addi	s0,sp,144
     a06:	0000                	unimp
}
     a08:	0501                	addi	a0,a0,0
     a0a:	000d                	c.nop	3
     a0c:	0402                	c.slli64	s0
     a0e:	0601                	addi	a2,a2,0
     a10:	00090003          	lb	zero,0(s2)
     a14:	0100                	addi	s0,sp,128
     a16:	2505                	jal	1036 <__DTOR_END__+0xaa>
     a18:	0200                	addi	s0,sp,256
     a1a:	0204                	addi	s1,sp,256
     a1c:	0306                	slli	t1,t1,0x1
     a1e:	097f                	0x97f
     a20:	0004                	0x4
     a22:	0501                	addi	a0,a0,0
     a24:	04020027          	0x4020027
     a28:	0602                	c.slli64	a2
     a2a:	00090003          	lb	zero,0(s2)
     a2e:	0100                	addi	s0,sp,128
     a30:	0d05                	addi	s10,s10,1
     a32:	0200                	addi	s0,sp,256
     a34:	0304                	addi	s1,sp,384
     a36:	0306                	slli	t1,t1,0x1
     a38:	090a                	slli	s2,s2,0x2
     a3a:	0008                	0x8
     a3c:	0501                	addi	a0,a0,0
     a3e:	0019                	c.nop	6
     a40:	0402                	c.slli64	s0
     a42:	00030603          	lb	a2,0(t1)
     a46:	0009                	c.nop	2
        polyR[i] = 0;
     a48:	0100                	addi	s0,sp,128
     a4a:	2305                	jal	f6a <main+0x126>
     a4c:	0200                	addi	s0,sp,256
     a4e:	0304                	addi	s1,sp,384
     a50:	04097f03          	0x4097f03
    for(i = 1; i < N; ++i){
     a54:	0100                	addi	s0,sp,128
        f[i] = 0;
     a56:	1905                	addi	s2,s2,-31
     a58:	0200                	addi	s0,sp,256
     a5a:	0304                	addi	s1,sp,384
     a5c:	04090103          	lb	sp,64(s2)
     a60:	0100                	addi	s0,sp,128
     a62:	2305                	jal	f82 <__CTOR_LIST__+0x6>
        g[i] = 0;
     a64:	0200                	addi	s0,sp,256
     a66:	0304                	addi	s1,sp,384
     a68:	0306                	slli	t1,t1,0x1
     a6a:	097f                	0x97f
     a6c:	0006                	c.slli	zero,0x1
    for (i = N; i < 55; ++i ){
     a6e:	0501                	addi	a0,a0,0
     a70:	0011                	c.nop	4
        random_keys[i] = f[i];
     a72:	0402                	c.slli64	s0
     a74:	0301                	addi	t1,t1,0
     a76:	0900                	addi	s0,sp,144
     a78:	0002                	c.slli64	zero
     a7a:	0501                	addi	a0,a0,0
     a7c:	0009                	c.nop	2
     a7e:	0402                	c.slli64	s0
     a80:	0601                	addi	a2,a2,0
    for(i = 0; i < N; ++i){
     a82:	00090003          	lb	zero,0(s2)
     a86:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     a88:	1605                	addi	a2,a2,-31
     a8a:	0200                	addi	s0,sp,256
     a8c:	0204                	addi	s1,sp,256
     a8e:	0306                	slli	t1,t1,0x1
     a90:	097f                	0x97f
    for(i = N; i < (2*N); ++i){
     a92:	0004                	0x4
     a94:	0501                	addi	a0,a0,0
     a96:	0305                	addi	t1,t1,1
        random_keys[i] = fp[i-(2*N)];
     a98:	0906                	slli	s2,s2,0x1
     a9a:	0006                	c.slli	zero,0x1
     a9c:	0301                	addi	t1,t1,0
     a9e:	0902                	c.slli64	s2
     aa0:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     aa2:	0501                	addi	a0,a0,0
     aa4:	0601                	addi	a2,a2,0
     aa6:	00090103          	lb	sp,0(s2)
        random_keys[i] = fq[i-(3*N)];
     aaa:	0100                	addi	s0,sp,128
     aac:	4305                	li	t1,1
     aae:	0306                	slli	t1,t1,0x1
     ab0:	0902                	c.slli64	s2
     ab2:	002a                	c.slli	zero,0xa
     ab4:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     ab6:	0305                	addi	t1,t1,1
        random_keys[i] = fq[i-(3*N)];
     ab8:	0902                	c.slli64	s2
    for(i = (3*N); i < (4*N); ++i){
     aba:	0000                	unimp
        fg[i] = fg[i]*p;
     abc:	0301                	addi	t1,t1,0
    for(i = 0; i < (2*N-1); ++i){
     abe:	0901                	addi	s2,s2,0
     ac0:	0000                	unimp
        fg[i] = fg[i]*p;
     ac2:	0301                	addi	t1,t1,0
     ac4:	0902                	c.slli64	s2
     ac6:	0000                	unimp
     ac8:	0501                	addi	a0,a0,0
    for(i = 0; i < (2*N-1); ++i){
     aca:	0609                	addi	a2,a2,2
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     acc:	00090003          	lb	zero,0(s2)
     ad0:	0100                	addi	s0,sp,128
     ad2:	4305                	li	t1,1
     ad4:	04097b03          	0x4097b03
    for(i = (4*N); i < (5*N); ++i){
     ad8:	0100                	addi	s0,sp,128
     ada:	0905                	addi	s2,s2,1
        random_keys[i] = polyR[i-(5*N)];
     adc:	02090503          	lb	a0,32(s2)
     ae0:	0100                	addi	s0,sp,128
     ae2:	4305                	li	t1,1
     ae4:	02097b03          	0x2097b03
     ae8:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	0905                	addi	s2,s2,1
        random_keys[i] = polyR[i-(5*N)];
     aec:	1a090503          	lb	a0,416(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af0:	0100                	addi	s0,sp,128
     af2:	4305                	li	t1,1
     af4:	02097b03          	0x2097b03
     af8:	0100                	addi	s0,sp,128
     afa:	0905                	addi	s2,s2,1
     afc:	02090503          	lb	a0,32(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b00:	0100                	addi	s0,sp,128
     b02:	06090103          	lb	sp,96(s2)
     b06:	0100                	addi	s0,sp,128
     b08:	06090203          	lb	tp,96(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0c:	0100                	addi	s0,sp,128
     b0e:	04090103          	lb	sp,64(s2)
     b12:	0100                	addi	s0,sp,128
     b14:	08097f03          	0x8097f03
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	0100                	addi	s0,sp,128
     b1a:	4305                	li	t1,1
     b1c:	02097803          	0x2097803
     b20:	0100                	addi	s0,sp,128
     b22:	0905                	addi	s2,s2,1
     b24:	02090903          	lb	s2,32(s2)
     b28:	0100                	addi	s0,sp,128
     b2a:	4305                	li	t1,1
    for(i = 0; i < 48; ++i){
     b2c:	04097703          	0x4097703
        temp[i] = temp[i] + message[i];
     b30:	0100                	addi	s0,sp,128
     b32:	0905                	addi	s2,s2,1
     b34:	02090503          	lb	a0,32(s2)
     b38:	0100                	addi	s0,sp,128
     b3a:	0505                	addi	a0,a0,1
     b3c:	0306                	slli	t1,t1,0x1
     b3e:	0901                	addi	s2,s2,0
     b40:	0004                	0x4
    for(i = 0; i < 48; ++i){
     b42:	0301                	addi	t1,t1,0
     b44:	0901                	addi	s2,s2,0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b46:	0000                	unimp
     b48:	0301                	addi	t1,t1,0
     b4a:	0901                	addi	s2,s2,0
     b4c:	0000                	unimp
     b4e:	0301                	addi	t1,t1,0
     b50:	0901                	addi	s2,s2,0
     b52:	0000                	unimp
     b54:	0601                	addi	a2,a2,0
    for(i = (2*N); i < (3*N); ++i){
     b56:	00090c03          	lb	s8,0(s2)
     b5a:	0100                	addi	s0,sp,128
     b5c:	4305                	li	t1,1
     b5e:	06096b03          	0x6096b03
}
     b62:	0100                	addi	s0,sp,128
     b64:	0905                	addi	s2,s2,1
     b66:	04090903          	lb	s2,64(s2)
     b6a:	0100                	addi	s0,sp,128
     b6c:	0505                	addi	a0,a0,1
     b6e:	04090c03          	lb	s8,64(s2)
        CT[i-(2*N)] = CT[i];
     b72:	0100                	addi	s0,sp,128
     b74:	02090103          	lb	sp,32(s2)
     b78:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     b7a:	0905                	addi	s2,s2,1
     b7c:	08097303          	0x8097303
        CT[i-(2*N)] = CT[i];
     b80:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     b82:	0505                	addi	a0,a0,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b84:	0306                	slli	t1,t1,0x1
     b86:	090c                	addi	a1,sp,144
     b88:	0002                	c.slli64	zero
     b8a:	0301                	addi	t1,t1,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     b8c:	0901                	addi	s2,s2,0
     b8e:	0000                	unimp
     b90:	0301                	addi	t1,t1,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b92:	0000090b          	0x90b
     b96:	0301                	addi	t1,t1,0
     b98:	0901                	addi	s2,s2,0
     b9a:	0008                	0x8
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b9c:	0301                	addi	t1,t1,0
     b9e:	0902                	c.slli64	s2
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ba0:	0008                	0x8
     ba2:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba4:	060c                	addi	a1,sp,768
     ba6:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     baa:	0100                	addi	s0,sp,128
     bac:	1105                	addi	sp,sp,-31
     bae:	0200                	addi	s0,sp,256
     bb0:	0104                	addi	s1,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bb2:	0306                	slli	t1,t1,0x1
     bb4:	0900                	addi	s0,sp,144
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bb6:	0002                	c.slli64	zero
     bb8:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bba:	0005                	c.nop	1
     bbc:	0402                	c.slli64	s0
     bbe:	0601                	addi	a2,a2,0
     bc0:	00090003          	lb	zero,0(s2)
     bc4:	0100                	addi	s0,sp,128
     bc6:	1805                	addi	a6,a6,-31
     bc8:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     bca:	0104                	addi	s1,sp,128
     bcc:	0306                	slli	t1,t1,0x1
     bce:	0906                	slli	s2,s2,0x1
     bd0:	0004                	0x4
     bd2:	0501                	addi	a0,a0,0
        if(a2[i] <= q/2)
     bd4:	0005                	c.nop	1
     bd6:	0402                	c.slli64	s0
     bd8:	0601                	addi	a2,a2,0
    for (i = 0; i < N; ++i){
     bda:	08090003          	lb	zero,128(s2)
     bde:	0100                	addi	s0,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     be0:	0c05                	addi	s8,s8,1
     be2:	0200                	addi	s0,sp,256
     be4:	0104                	addi	s1,sp,128
     be6:	04097a03          	0x4097a03
     bea:	0100                	addi	s0,sp,128
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bec:	0200                	addi	s0,sp,256
     bee:	0104                	addi	s1,sp,128
     bf0:	04090f03          	lb	t5,64(s2)
     bf4:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     bf6:	1105                	addi	sp,sp,-31
     bf8:	0200                	addi	s0,sp,256
     bfa:	0104                	addi	s1,sp,128
}
     bfc:	0306                	slli	t1,t1,0x1
     bfe:	097f                	0x97f
     c00:	0002                	c.slli64	zero
     c02:	0501                	addi	a0,a0,0
     c04:	0005                	c.nop	1
     c06:	0402                	c.slli64	s0
     c08:	0601                	addi	a2,a2,0
     c0a:	00090003          	lb	zero,0(s2)
     c0e:	0100                	addi	s0,sp,128
     c10:	0905                	addi	s2,s2,1
        a2[i-(2*N)] = a2[i];
     c12:	0200                	addi	s0,sp,256
     c14:	0304                	addi	s1,sp,384
     c16:	0306                	slli	t1,t1,0x1
     c18:	00080973          	0x80973
    for(i = (2*N); i < ((2*N)+N); ++i){
     c1c:	0501                	addi	a0,a0,0
        a2[i-(2*N)] = a2[i];
     c1e:	000e                	c.slli	zero,0x3
     c20:	0402                	c.slli64	s0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c22:	00030603          	lb	a2,0(t1)
        if(a2[i] <= q/2)
     c26:	0409                	addi	s0,s0,2
     c28:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     c2a:	0200                	addi	s0,sp,256
     c2c:	0304                	addi	s1,sp,384
     c2e:	04090103          	lb	sp,64(s2)
    for (i = 0; i < N; ++i){
     c32:	0100                	addi	s0,sp,128
     c34:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     c36:	0304                	addi	s1,sp,384
     c38:	02097f03          	0x2097f03
     c3c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c3e:	0905                	addi	s2,s2,1
     c40:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     c42:	0304                	addi	s1,sp,384
     c44:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     c46:	0901                	addi	s2,s2,0
  jal x0, default_exc_handler
     c48:	0004                	0x4
     c4a:	0501                	addi	a0,a0,0
  mv  x1, x0
     c4c:	000e                	c.slli	zero,0x3
     c4e:	0402                	c.slli64	s0
  mv  x2, x1
     c50:	00030603          	lb	a2,0(t1)
  mv  x4, x1
     c54:	0009                	c.nop	2
  mv  x5, x1
     c56:	0100                	addi	s0,sp,128
  mv  x6, x1
     c58:	1d05                	addi	s10,s10,-31
  mv  x7, x1
     c5a:	0200                	addi	s0,sp,256
  mv  x8, x1
     c5c:	0304                	addi	s1,sp,384
  mv  x9, x1
     c5e:	0306                	slli	t1,t1,0x1
  mv x10, x1
     c60:	097e                	slli	s2,s2,0x1f
  mv x11, x1
     c62:	0004                	0x4
  mv x12, x1
     c64:	0501                	addi	a0,a0,0
  mv x13, x1
     c66:	0309                	addi	t1,t1,2
  mv x14, x1
     c68:	00040907          	0x40907
  mv x16, x1
     c6c:	0501                	addi	a0,a0,0
  mv x17, x1
     c6e:	0003060b          	0x3060b
  mv x19, x1
     c72:	0009                	c.nop	2
  mv x20, x1
     c74:	0100                	addi	s0,sp,128
  mv x21, x1
     c76:	2005                	jal	c96 <_start+0x2>
  mv x22, x1
     c78:	0200                	addi	s0,sp,256
  mv x23, x1
     c7a:	0204                	addi	s1,sp,256
  mv x24, x1
     c7c:	0306                	slli	t1,t1,0x1
  mv x25, x1
     c7e:	097f                	0x97f
  mv x26, x1
     c80:	0002                	c.slli64	zero
  mv x27, x1
     c82:	0501                	addi	a0,a0,0
  mv x28, x1
     c84:	0022                	c.slli	zero,0x8
  mv x29, x1
     c86:	0402                	c.slli64	s0
  mv x30, x1
     c88:	0602                	c.slli64	a2
  mv x31, x1
     c8a:	00090003          	lb	zero,0(s2)
  la   x2, _stack_start
     c8e:	0100                	addi	s0,sp,128
     c90:	0905                	addi	s2,s2,1
     c92:	0306                	slli	t1,t1,0x1
  la x26, _bss_start
     c94:	0909                	addi	s2,s2,2
     c96:	0004                	0x4
     c98:	0501                	addi	a0,a0,0
     c9a:	0615                	addi	a2,a2,5
  la x27, _bss_end
     c9c:	00090003          	lb	zero,0(s2)
     ca0:	0100                	addi	s0,sp,128
     ca2:	0c05                	addi	s8,s8,1
  bge x26, x27, zero_loop_end
     ca4:	06090003          	lb	zero,96(s2)
  sw x0, 0(x26)
     ca8:	0100                	addi	s0,sp,128
     caa:	1a05                	addi	s4,s4,-31
  addi x26, x26, 4
     cac:	0200                	addi	s0,sp,256
  ble x26, x27, zero_loop
     cae:	0204                	addi	s1,sp,256
     cb0:	0306                	slli	t1,t1,0x1
  addi x10, x0, 0
     cb2:	097f                	0x97f
     cb4:	0004                	0x4
  addi x11, x0, 0
     cb6:	0501                	addi	a0,a0,0
     cb8:	0309                	addi	t1,t1,2
  jal x1, main
     cba:	00040907          	0x40907
     cbe:	0501                	addi	a0,a0,0
     cc0:	0003060b          	0x3060b
     cc4:	0009                	c.nop	2
     cc6:	0100                	addi	s0,sp,128
     cc8:	2005                	jal	ce8 <memcpy+0x2a>
     cca:	0200                	addi	s0,sp,256
     ccc:	0204                	addi	s1,sp,256
     cce:	0306                	slli	t1,t1,0x1
     cd0:	097f                	0x97f
     cd2:	0002                	c.slli64	zero
     cd4:	0501                	addi	a0,a0,0
     cd6:	0022                	c.slli	zero,0x8
     cd8:	0402                	c.slli64	s0
     cda:	0602                	c.slli64	a2
     cdc:	00090003          	lb	zero,0(s2)
     ce0:	0100                	addi	s0,sp,128
     ce2:	1805                	addi	a6,a6,-31
     ce4:	0200                	addi	s0,sp,256
     ce6:	0104                	addi	s1,sp,128
     ce8:	0306                	slli	t1,t1,0x1
     cea:	0900                	addi	s0,sp,144
     cec:	0002                	c.slli64	zero
     cee:	0501                	addi	a0,a0,0
     cf0:	0005                	c.nop	1
     cf2:	0402                	c.slli64	s0
     cf4:	0601                	addi	a2,a2,0
     cf6:	08090003          	lb	zero,128(s2)
     cfa:	0100                	addi	s0,sp,128
     cfc:	0b05                	addi	s6,s6,1
     cfe:	0306                	slli	t1,t1,0x1
     d00:	090c                	addi	a1,sp,144
     d02:	0004                	0x4
     d04:	0501                	addi	a0,a0,0
     d06:	0305                	addi	t1,t1,1
     d08:	00c0                	addi	s0,sp,68
     d0a:	0409                	addi	s0,s0,2
     d0c:	0100                	addi	s0,sp,128
     d0e:	0e090203          	lb	tp,224(s2)
     d12:	0100                	addi	s0,sp,128
     d14:	1b05                	addi	s6,s6,-31
     d16:	0306                	slli	t1,t1,0x1
     d18:	0900                	addi	s0,sp,144
     d1a:	0000                	unimp
     d1c:	0501                	addi	a0,a0,0
     d1e:	09010313          	addi	t1,sp,144
     d22:	0004                	0x4
     d24:	0501                	addi	a0,a0,0
     d26:	0015                	c.nop	5
     d28:	0402                	c.slli64	s0
     d2a:	0601                	addi	a2,a2,0
     d2c:	08097f03          	0x8097f03
     d30:	0100                	addi	s0,sp,128
     d32:	0505                	addi	a0,a0,1
     d34:	0200                	addi	s0,sp,256
     d36:	0104                	addi	s1,sp,128
     d38:	0306                	slli	t1,t1,0x1
     d3a:	0900                	addi	s0,sp,144
     d3c:	0000                	unimp
     d3e:	0601                	addi	a2,a2,0
     d40:	04090403          	lb	s0,64(s2)
     d44:	0100                	addi	s0,sp,128
     d46:	00090203          	lb	tp,0(s2)
     d4a:	0100                	addi	s0,sp,128
     d4c:	0105                	addi	sp,sp,1
     d4e:	0306                	slli	t1,t1,0x1
     d50:	0901                	addi	s2,s2,0
     d52:	0000                	unimp
     d54:	0501                	addi	a0,a0,0
     d56:	0609                	addi	a2,a2,2
     d58:	097fba03          	0x97fba03
     d5c:	002a                	c.slli	zero,0xa
     d5e:	0501                	addi	a0,a0,0
     d60:	0616                	slli	a2,a2,0x5
     d62:	00090003          	lb	zero,0(s2)
     d66:	0100                	addi	s0,sp,128
     d68:	0d05                	addi	s10,s10,1
     d6a:	04090003          	lb	zero,64(s2)
     d6e:	0100                	addi	s0,sp,128
     d70:	1305                	addi	t1,t1,-31
     d72:	04090003          	lb	zero,64(s2)
     d76:	0100                	addi	s0,sp,128
     d78:	0505                	addi	a0,a0,1
     d7a:	04090603          	lb	a2,64(s2)
     d7e:	0100                	addi	s0,sp,128
     d80:	1305                	addi	t1,t1,-31
     d82:	06097a03          	0x6097a03
     d86:	0100                	addi	s0,sp,128
     d88:	0505                	addi	a0,a0,1
     d8a:	0306                	slli	t1,t1,0x1
     d8c:	0906                	slli	s2,s2,0x1
     d8e:	0002                	c.slli64	zero
     d90:	0501                	addi	a0,a0,0
     d92:	0309                	addi	t1,t1,2
     d94:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     d98:	0501                	addi	a0,a0,0
     d9a:	00030613          	mv	a2,t1
     d9e:	0009                	c.nop	2
     da0:	0100                	addi	s0,sp,128
     da2:	0505                	addi	a0,a0,1
     da4:	0e090903          	lb	s2,224(s2)
     da8:	0100                	addi	s0,sp,128
     daa:	1305                	addi	t1,t1,-31
     dac:	04097703          	0x4097703
     db0:	0100                	addi	s0,sp,128
     db2:	0505                	addi	a0,a0,1
     db4:	0306                	slli	t1,t1,0x1
     db6:	0909                	addi	s2,s2,2
     db8:	0002                	c.slli64	zero
     dba:	0501                	addi	a0,a0,0
     dbc:	0309                	addi	t1,t1,2
     dbe:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     dc2:	0501                	addi	a0,a0,0
     dc4:	0610                	addi	a2,sp,768
     dc6:	02090003          	lb	zero,32(s2)
     dca:	0100                	addi	s0,sp,128
     dcc:	1505                	addi	a0,a0,-31
     dce:	0200                	addi	s0,sp,256
     dd0:	0104                	addi	s1,sp,128
     dd2:	0306                	slli	t1,t1,0x1
     dd4:	0900                	addi	s0,sp,144
     dd6:	0002                	c.slli64	zero
     dd8:	0501                	addi	a0,a0,0
     dda:	0009                	c.nop	2
     ddc:	0402                	c.slli64	s0
     dde:	0601                	addi	a2,a2,0
     de0:	00090003          	lb	zero,0(s2)
     de4:	0100                	addi	s0,sp,128
     de6:	0505                	addi	a0,a0,1
     de8:	0306                	slli	t1,t1,0x1
     dea:	090c                	addi	a1,sp,144
     dec:	0004                	0x4
     dee:	0501                	addi	a0,a0,0
     df0:	0309                	addi	t1,t1,2
     df2:	00080903          	lb	s2,0(a6)
     df6:	0501                	addi	a0,a0,0
     df8:	0003060f          	0x3060f
     dfc:	0209                	addi	tp,tp,2
     dfe:	0100                	addi	s0,sp,128
     e00:	1405                	addi	s0,s0,-31
     e02:	0200                	addi	s0,sp,256
     e04:	0104                	addi	s1,sp,128
     e06:	0306                	slli	t1,t1,0x1
     e08:	0900                	addi	s0,sp,144
     e0a:	0002                	c.slli64	zero
     e0c:	0501                	addi	a0,a0,0
     e0e:	0009                	c.nop	2
     e10:	0402                	c.slli64	s0
     e12:	0601                	addi	a2,a2,0
     e14:	00090003          	lb	zero,0(s2)
     e18:	0100                	addi	s0,sp,128
     e1a:	0505                	addi	a0,a0,1
     e1c:	0306                	slli	t1,t1,0x1
     e1e:	00040903          	lb	s2,0(s0)
     e22:	0501                	addi	a0,a0,0
     e24:	0309                	addi	t1,t1,2
     e26:	0904                	addi	s1,sp,144
     e28:	0008                	0x8
     e2a:	0501                	addi	a0,a0,0
     e2c:	0610                	addi	a2,sp,768
     e2e:	00090003          	lb	zero,0(s2)
     e32:	0100                	addi	s0,sp,128
     e34:	1c05                	addi	s8,s8,-31
     e36:	0200                	addi	s0,sp,256
     e38:	0104                	addi	s1,sp,128
     e3a:	0306                	slli	t1,t1,0x1
     e3c:	0900                	addi	s0,sp,144
     e3e:	0002                	c.slli64	zero
     e40:	0501                	addi	a0,a0,0
     e42:	0009                	c.nop	2
int main(){
     e44:	0402                	c.slli64	s0
     e46:	0601                	addi	a2,a2,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e48:	08090003          	lb	zero,128(s2)
     e4c:	0100                	addi	s0,sp,128
     e4e:	0d05                	addi	s10,s10,1
     e50:	0200                	addi	s0,sp,256
     e52:	0304                	addi	s1,sp,384
     e54:	0306                	slli	t1,t1,0x1
int main(){
     e56:	0008096b          	0x8096b
     e5a:	0501                	addi	a0,a0,0
     e5c:	0030                	addi	a2,sp,8
     e5e:	0402                	c.slli64	s0
     e60:	00030603          	lb	a2,0(t1)
     e64:	0009                	c.nop	2
    resultkon[0] = 0xaaaaaaa0;
     e66:	0100                	addi	s0,sp,128
     e68:	2705                	jal	1588 <product2+0x220>
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e6a:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa0;
     e6c:	0304                	addi	s1,sp,384
     e6e:	06090003          	lb	zero,96(s2)
     e72:	0100                	addi	s0,sp,128
     e74:	2105                	jal	1294 <_bss_start+0x184>
     e76:	0200                	addi	s0,sp,256
    keys = generate_keys(N, p, q);
     e78:	0304                	addi	s1,sp,384
     e7a:	04097f03          	0x4097f03
     e7e:	0100                	addi	s0,sp,128
     e80:	2705                	jal	15a0 <product2+0x238>
    resultkon[0] = 0xaaaaaaa0;
     e82:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa1;
     e84:	0304                	addi	s1,sp,384
     e86:	04090103          	lb	sp,64(s2)
     e8a:	0100                	addi	s0,sp,128
     e8c:	1905                	addi	s2,s2,-31
    for(i = 0; i < N; ++i){
     e8e:	0200                	addi	s0,sp,256
     e90:	0304                	addi	s1,sp,384
        secret_key_f[i] = keys[i];
     e92:	02090003          	lb	zero,32(s2)
     e96:	0100                	addi	s0,sp,128
     e98:	2105                	jal	12b8 <_bss_start+0x1a8>
     e9a:	0200                	addi	s0,sp,256
     e9c:	0304                	addi	s1,sp,384
    for(i = 0; i < N; ++i){
     e9e:	0306                	slli	t1,t1,0x1
     ea0:	097f                	0x97f
     ea2:	0004                	0x4
    for(i = N; i < (2*N); ++i){
     ea4:	0501                	addi	a0,a0,0
     ea6:	000d                	c.nop	3
     ea8:	0402                	c.slli64	s0
     eaa:	09100303          	lb	t1,145(zero) # 91 <instr_equ+0x5>
     eae:	0002                	c.slli64	zero
        secret_key_fp[i-(2*N)] = keys[i];
     eb0:	0501                	addi	a0,a0,0
     eb2:	001c                	0x1c
     eb4:	0402                	c.slli64	s0
     eb6:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < (3*N); ++i){
     eba:	0009                	c.nop	2
     ebc:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     ebe:	1905                	addi	s2,s2,-31
     ec0:	0200                	addi	s0,sp,256
     ec2:	0304                	addi	s1,sp,384
     ec4:	06090003          	lb	zero,96(s2)
     ec8:	0100                	addi	s0,sp,128
        public_key[i-(4*N)] = keys[i];
     eca:	2005                	jal	eea <main+0xa6>
     ecc:	0200                	addi	s0,sp,256
     ece:	0304                	addi	s1,sp,384
     ed0:	04097f03          	0x4097f03
    for(i = (4*N); i < (5*N); ++i){
     ed4:	0100                	addi	s0,sp,128
     ed6:	1905                	addi	s2,s2,-31
     ed8:	0200                	addi	s0,sp,256
     eda:	0304                	addi	s1,sp,384
     edc:	04090103          	lb	sp,64(s2)
        ring_poly[i-(5*N)] = keys[i];
     ee0:	0100                	addi	s0,sp,128
     ee2:	1205                	addi	tp,tp,-31
     ee4:	0200                	addi	s0,sp,256
     ee6:	0304                	addi	s1,sp,384
     ee8:	02090003          	lb	zero,32(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     eec:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
     eee:	2005                	jal	f0e <main+0xca>
     ef0:	0200                	addi	s0,sp,256
     ef2:	0304                	addi	s1,sp,384
     ef4:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef6:	097f                	0x97f
     ef8:	0004                	0x4
     efa:	0501                	addi	a0,a0,0
     efc:	030d                	addi	t1,t1,3
    resultkon[0] = 0xbbbbbbb1;
     efe:	0908                	addi	a0,sp,144
     f00:	0002                	c.slli64	zero
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f02:	0501                	addi	a0,a0,0
     f04:	0003060f          	0x3060f
     f08:	0009                	c.nop	2
    resultkon[0] = 0xbbbbbbb1;
     f0a:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc0;
     f0c:	2405                	jal	112c <_bss_start+0x1c>
     f0e:	0200                	addi	s0,sp,256
     f10:	0204                	addi	s1,sp,256
     f12:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f14:	097f                	0x97f
    resultkon[0] = 0xccccccc0;
     f16:	0002                	c.slli64	zero
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f18:	0501                	addi	a0,a0,0
     f1a:	0026                	c.slli	zero,0x9
     f1c:	0402                	c.slli64	s0
     f1e:	0602                	c.slli64	a2
     f20:	00090003          	lb	zero,0(s2)
     f24:	0100                	addi	s0,sp,128
     f26:	0d05                	addi	s10,s10,1
     f28:	0200                	addi	s0,sp,256
     f2a:	0304                	addi	s1,sp,384
    resultkon[0] = 0xccccccc1;	
     f2c:	0306                	slli	t1,t1,0x1
     f2e:	0909                	addi	s2,s2,2
            resultkon[0] = 0xDEDEDEDE;
     f30:	0004                	0x4
     f32:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
     f34:	0012                	c.slli	zero,0x4
     f36:	0402                	c.slli64	s0
            resultkon[0] = 0xDEDEDEDE;
     f38:	00030603          	lb	a2,0(t1)
    for(i = 0; i < 32; ++i){
     f3c:	0009                	c.nop	2
     f3e:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
     f40:	2105                	jal	1360 <_bss_start+0x250>
     f42:	0200                	addi	s0,sp,256
     f44:	0304                	addi	s1,sp,384
     f46:	0306                	slli	t1,t1,0x1
     f48:	097f                	0x97f
     f4a:	000a                	c.slli	zero,0x2
     f4c:	0501                	addi	a0,a0,0
     f4e:	0015                	c.nop	5
            resultkon[0] = 0xBABABABA;
     f50:	0402                	c.slli64	s0
     f52:	0301                	addi	t1,t1,0
     f54:	0900                	addi	s0,sp,144
     f56:	0002                	c.slli64	zero
     f58:	0501                	addi	a0,a0,0
}
     f5a:	0009                	c.nop	2
     f5c:	0402                	c.slli64	s0
     f5e:	0601                	addi	a2,a2,0
     f60:	00090003          	lb	zero,0(s2)
     f64:	0100                	addi	s0,sp,128
     f66:	0200                	addi	s0,sp,256
     f68:	0304                	addi	s1,sp,384
     f6a:	0306                	slli	t1,t1,0x1
     f6c:	090d                	addi	s2,s2,3
     f6e:	0006                	c.slli	zero,0x1
     f70:	0501                	addi	a0,a0,0
            resultkon[0] = 0xDEDEDEDE;
     f72:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    for(i = 0; i < 32; ++i){
     f76:	00030603          	lb	a2,0(t1)
     f7a:	0009                	c.nop	2
     f7c:	0100                	addi	s0,sp,128
     f7e:	2505                	jal	159e <product2+0x236>
     f80:	0200                	addi	s0,sp,256
     f82:	0304                	addi	s1,sp,384
     f84:	0306                	slli	t1,t1,0x1
     f86:	097f                	0x97f
     f88:	000c                	0xc
     f8a:	0501                	addi	a0,a0,0
     f8c:	033c                	addi	a5,sp,392
     f8e:	090a                	slli	s2,s2,0x2
     f90:	0006                	c.slli	zero,0x1
     f92:	0501                	addi	a0,a0,0
     f94:	0305                	addi	t1,t1,1
     f96:	0902                	c.slli64	s2
     f98:	0000                	unimp
     f9a:	0301                	addi	t1,t1,0
     f9c:	0901                	addi	s2,s2,0
     f9e:	0000                	unimp
     fa0:	0301                	addi	t1,t1,0
     fa2:	0901                	addi	s2,s2,0
     fa4:	0000                	unimp
     fa6:	0501                	addi	a0,a0,0
     fa8:	0609                	addi	a2,a2,2
     faa:	00090003          	lb	zero,0(s2)
     fae:	0100                	addi	s0,sp,128
     fb0:	3c05                	jal	9e0 <generate_keys+0x1e2>
     fb2:	04097c03          	0x4097c03
     fb6:	0100                	addi	s0,sp,128
     fb8:	0905                	addi	s2,s2,1
     fba:	02090403          	lb	s0,32(s2)
     fbe:	0100                	addi	s0,sp,128
     fc0:	3c05                	jal	9f0 <generate_keys+0x1f2>
     fc2:	04097c03          	0x4097c03
     fc6:	0100                	addi	s0,sp,128
     fc8:	0905                	addi	s2,s2,1
     fca:	1c090403          	lb	s0,448(s2)
     fce:	0100                	addi	s0,sp,128
     fd0:	06090103          	lb	sp,96(s2)
     fd4:	0100                	addi	s0,sp,128
     fd6:	06090103          	lb	sp,96(s2)
     fda:	0100                	addi	s0,sp,128
     fdc:	06090203          	lb	tp,96(s2)
     fe0:	0100                	addi	s0,sp,128
     fe2:	06090103          	lb	sp,96(s2)
     fe6:	0100                	addi	s0,sp,128
     fe8:	06090103          	lb	sp,96(s2)
     fec:	0100                	addi	s0,sp,128
     fee:	06090103          	lb	sp,96(s2)
     ff2:	0100                	addi	s0,sp,128
     ff4:	3c05                	jal	a24 <generate_keys+0x226>
     ff6:	04097503          	0x4097503
     ffa:	0100                	addi	s0,sp,128
     ffc:	0905                	addi	s2,s2,1
     ffe:	06090403          	lb	s0,96(s2)
    1002:	0100                	addi	s0,sp,128
    1004:	0505                	addi	a0,a0,1
    1006:	0306                	slli	t1,t1,0x1
    1008:	0901                	addi	s2,s2,0
    100a:	0004                	0x4
    100c:	0301                	addi	t1,t1,0
    100e:	0901                	addi	s2,s2,0
    1010:	0000                	unimp
    1012:	0301                	addi	t1,t1,0
    1014:	0902                	c.slli64	s2
    1016:	0000                	unimp
    1018:	0301                	addi	t1,t1,0
    101a:	0901                	addi	s2,s2,0
    101c:	0000                	unimp
    101e:	0301                	addi	t1,t1,0
    1020:	0901                	addi	s2,s2,0
    1022:	0000                	unimp
    1024:	0301                	addi	t1,t1,0
    1026:	0901                	addi	s2,s2,0
    1028:	0000                	unimp
    102a:	0501                	addi	a0,a0,0
    102c:	0609                	addi	a2,a2,2
    102e:	00090003          	lb	zero,0(s2)
    1032:	0100                	addi	s0,sp,128
    1034:	0505                	addi	a0,a0,1
    1036:	0306                	slli	t1,t1,0x1
    1038:	0901                	addi	s2,s2,0
    103a:	0002                	c.slli64	zero
    103c:	0301                	addi	t1,t1,0
    103e:	0901                	addi	s2,s2,0
    1040:	0000                	unimp
    1042:	0301                	addi	t1,t1,0
    1044:	0901                	addi	s2,s2,0
    1046:	0000                	unimp
    1048:	0301                	addi	t1,t1,0
    104a:	0901                	addi	s2,s2,0
    104c:	0000                	unimp
    104e:	0301                	addi	t1,t1,0
    1050:	0902                	c.slli64	s2
    1052:	0000                	unimp
    1054:	0301                	addi	t1,t1,0
    1056:	0901                	addi	s2,s2,0
    1058:	0000                	unimp
    105a:	0501                	addi	a0,a0,0
    105c:	060c                	addi	a1,sp,768
    105e:	00090003          	lb	zero,0(s2)
    1062:	0100                	addi	s0,sp,128
    1064:	1105                	addi	sp,sp,-31
    1066:	02090303          	lb	t1,32(s2)
    106a:	0100                	addi	s0,sp,128
    106c:	0200                	addi	s0,sp,256
    106e:	0104                	addi	s1,sp,128
    1070:	0306                	slli	t1,t1,0x1
    1072:	097d                	addi	s2,s2,31
    1074:	0008                	0x8
    1076:	0501                	addi	a0,a0,0
    1078:	0005                	c.nop	1
    107a:	0402                	c.slli64	s0
    107c:	0601                	addi	a2,a2,0
    107e:	00090003          	lb	zero,0(s2)
    1082:	0100                	addi	s0,sp,128
    1084:	0306                	slli	t1,t1,0x1
    1086:	0906                	slli	s2,s2,0x1
    1088:	0004                	0x4
    108a:	0301                	addi	t1,t1,0
    108c:	0901                	addi	s2,s2,0
    108e:	0008                	0x8
    1090:	0301                	addi	t1,t1,0
    1092:	0905                	addi	s2,s2,1
    1094:	0008                	0x8
    1096:	0501                	addi	a0,a0,0
    1098:	060d                	addi	a2,a2,3
    109a:	00090003          	lb	zero,0(s2)
    109e:	0100                	addi	s0,sp,128
    10a0:	0505                	addi	a0,a0,1
    10a2:	0306                	slli	t1,t1,0x1
    10a4:	00060903          	lb	s2,0(a2) # 6f000 <_stack_start+0x5f000>
    10a8:	0501                	addi	a0,a0,0
    10aa:	0900030b          	0x900030b
    10ae:	0000                	unimp
    10b0:	0501                	addi	a0,a0,0
    10b2:	0624                	addi	s1,sp,776
    10b4:	00091603          	lh	a2,0(s2)
    10b8:	0100                	addi	s0,sp,128
    10ba:	1905                	addi	s2,s2,-31
    10bc:	08093503          	0x8093503
    10c0:	0100                	addi	s0,sp,128
    10c2:	0905                	addi	s2,s2,1
    10c4:	0306                	slli	t1,t1,0x1
    10c6:	08097fb7          	lui	t6,0x8097
    10ca:	0100                	addi	s0,sp,128
    10cc:	0505                	addi	a0,a0,1
    10ce:	00090803          	lb	a6,0(s2)
    10d2:	0100                	addi	s0,sp,128
    10d4:	08090903          	lb	s2,128(s2)
    10d8:	0100                	addi	s0,sp,128
    10da:	0905                	addi	s2,s2,1
    10dc:	08090203          	lb	tp,128(s2)
    10e0:	0100                	addi	s0,sp,128
    10e2:	0f05                	addi	t5,t5,1
    10e4:	0306                	slli	t1,t1,0x1
    10e6:	0900                	addi	s0,sp,144
    10e8:	0000                	unimp
    10ea:	0501                	addi	a0,a0,0
    10ec:	0609                	addi	a2,a2,2
    10ee:	0c090103          	lb	sp,192(s2)
    10f2:	0100                	addi	s0,sp,128
    10f4:	1905                	addi	s2,s2,-31
    10f6:	0200                	addi	s0,sp,256
    10f8:	0104                	addi	s1,sp,128
    10fa:	04090003          	lb	zero,64(s2)
    10fe:	0100                	addi	s0,sp,128
    1100:	0905                	addi	s2,s2,1
    1102:	0200                	addi	s0,sp,256
    1104:	0104                	addi	s1,sp,128
    1106:	0306                	slli	t1,t1,0x1
    1108:	0900                	addi	s0,sp,144
    110a:	0000                	unimp
    110c:	0501                	addi	a0,a0,0
    110e:	0310                	addi	a2,sp,384
    1110:	0906                	slli	s2,s2,0x1
    1112:	000a                	c.slli	zero,0x2
    1114:	0501                	addi	a0,a0,0
    1116:	0015                	c.nop	5
    1118:	0402                	c.slli64	s0
    111a:	0601                	addi	a2,a2,0
    111c:	02090003          	lb	zero,32(s2)
    1120:	0100                	addi	s0,sp,128
    1122:	0905                	addi	s2,s2,1
    1124:	0200                	addi	s0,sp,256
    1126:	0104                	addi	s1,sp,128
    1128:	0306                	slli	t1,t1,0x1
    112a:	0900                	addi	s0,sp,144
    112c:	0000                	unimp
    112e:	0501                	addi	a0,a0,0
    1130:	0605                	addi	a2,a2,1
    1132:	04090c03          	lb	s8,64(s2)
    1136:	0100                	addi	s0,sp,128
    1138:	0905                	addi	s2,s2,1
    113a:	08090203          	lb	tp,128(s2)
    113e:	0100                	addi	s0,sp,128
    1140:	1005                	c.nop	-31
    1142:	0306                	slli	t1,t1,0x1
    1144:	0900                	addi	s0,sp,144
    1146:	0000                	unimp
    1148:	0501                	addi	a0,a0,0
    114a:	0605                	addi	a2,a2,1
    114c:	0e090403          	lb	s0,224(s2)
    1150:	0100                	addi	s0,sp,128
    1152:	06090903          	lb	s2,96(s2)
    1156:	0100                	addi	s0,sp,128
    1158:	0905                	addi	s2,s2,1
    115a:	08090403          	lb	s0,128(s2)
    115e:	0100                	addi	s0,sp,128
    1160:	1005                	c.nop	-31
    1162:	0306                	slli	t1,t1,0x1
    1164:	0900                	addi	s0,sp,144
    1166:	0000                	unimp
    1168:	0501                	addi	a0,a0,0
    116a:	0605                	addi	a2,a2,1
    116c:	10090403          	lb	s0,256(s2)
    1170:	0100                	addi	s0,sp,128
    1172:	06090903          	lb	s2,96(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	0905                	addi	s2,s2,1
    117a:	08090203          	lb	tp,128(s2)
    117e:	0100                	addi	s0,sp,128
    1180:	1005                	c.nop	-31
    1182:	0306                	slli	t1,t1,0x1
    1184:	0900                	addi	s0,sp,144
    1186:	0002                	c.slli64	zero
    1188:	0501                	addi	a0,a0,0
    118a:	0015                	c.nop	5
    118c:	0402                	c.slli64	s0
    118e:	0601                	addi	a2,a2,0
    1190:	02090003          	lb	zero,32(s2)
    1194:	0100                	addi	s0,sp,128
    1196:	0905                	addi	s2,s2,1
    1198:	0200                	addi	s0,sp,256
    119a:	0104                	addi	s1,sp,128
    119c:	0306                	slli	t1,t1,0x1
    119e:	0900                	addi	s0,sp,144
    11a0:	0000                	unimp
    11a2:	0501                	addi	a0,a0,0
    11a4:	0605                	addi	a2,a2,1
    11a6:	04090b03          	lb	s6,64(s2)
    11aa:	0100                	addi	s0,sp,128
    11ac:	0105                	addi	sp,sp,1
    11ae:	08090403          	lb	s0,128(s2)
    11b2:	0100                	addi	s0,sp,128
    11b4:	08090103          	lb	sp,128(s2)
    11b8:	0100                	addi	s0,sp,128
    11ba:	08090103          	lb	sp,128(s2)
    11be:	0100                	addi	s0,sp,128
    11c0:	08090103          	lb	sp,128(s2)
    11c4:	0100                	addi	s0,sp,128
    11c6:	0905                	addi	s2,s2,1
    11c8:	08090203          	lb	tp,128(s2)
    11cc:	0100                	addi	s0,sp,128
    11ce:	1205                	addi	tp,tp,-31
    11d0:	0306                	slli	t1,t1,0x1
    11d2:	7fa4                	flw	fs1,120(a5)
    11d4:	0009                	c.nop	2
    11d6:	0100                	addi	s0,sp,128
    11d8:	1005                	c.nop	-31
    11da:	0900dc03          	lhu	s8,144(ra) # 5d4872 <_stack_start+0x5c4872>
    11de:	0002                	c.slli64	zero
    11e0:	0501                	addi	a0,a0,0
    11e2:	0015                	c.nop	5
    11e4:	0402                	c.slli64	s0
    11e6:	0601                	addi	a2,a2,0
    11e8:	02090003          	lb	zero,32(s2)
    11ec:	0100                	addi	s0,sp,128
    11ee:	0905                	addi	s2,s2,1
    11f0:	0200                	addi	s0,sp,256
    11f2:	0104                	addi	s1,sp,128
    11f4:	0306                	slli	t1,t1,0x1
    11f6:	0900                	addi	s0,sp,144
    11f8:	0000                	unimp
    11fa:	0501                	addi	a0,a0,0
    11fc:	a203060b          	0xa203060b
    1200:	097f                	0x97f
    1202:	0004                	0x4
    1204:	0501                	addi	a0,a0,0
    1206:	0610                	addi	a2,sp,768
    1208:	0900e903          	0x900e903
    120c:	0004                	0x4
    120e:	0301                	addi	t1,t1,0
    1210:	0901                	addi	s2,s2,0
    1212:	0002                	c.slli64	zero
    1214:	0501                	addi	a0,a0,0
    1216:	0015                	c.nop	5
    1218:	0402                	c.slli64	s0
    121a:	0601                	addi	a2,a2,0
    121c:	02097f03          	0x2097f03
    1220:	0100                	addi	s0,sp,128
    1222:	0905                	addi	s2,s2,1
    1224:	0200                	addi	s0,sp,256
    1226:	0104                	addi	s1,sp,128
    1228:	0306                	slli	t1,t1,0x1
    122a:	0900                	addi	s0,sp,144
    122c:	0000                	unimp
    122e:	0501                	addi	a0,a0,0
    1230:	0015                	c.nop	5
    1232:	0402                	c.slli64	s0
    1234:	0601                	addi	a2,a2,0
    1236:	0c090c03          	lb	s8,192(s2)
    123a:	0100                	addi	s0,sp,128
    123c:	0905                	addi	s2,s2,1
    123e:	0200                	addi	s0,sp,256
    1240:	0104                	addi	s1,sp,128
    1242:	0306                	slli	t1,t1,0x1
    1244:	0900                	addi	s0,sp,144
    1246:	0000                	unimp
    1248:	0601                	addi	a2,a2,0
    124a:	04090503          	lb	a0,64(s2)
    124e:	0100                	addi	s0,sp,128
    1250:	00090103          	lb	sp,0(s2)
    1254:	0100                	addi	s0,sp,128
    1256:	0505                	addi	a0,a0,1
    1258:	0306                	slli	t1,t1,0x1
    125a:	0901                	addi	s2,s2,0
    125c:	0000                	unimp
    125e:	0501                	addi	a0,a0,0
    1260:	0009                	c.nop	2
    1262:	0402                	c.slli64	s0
    1264:	f8030603          	lb	a2,-128(t1)
    1268:	097e                	slli	s2,s2,0x1f
    126a:	002a                	c.slli	zero,0xa
    126c:	0501                	addi	a0,a0,0
    126e:	0011                	c.nop	4
    1270:	0402                	c.slli64	s0
    1272:	00030603          	lb	a2,0(t1)
    1276:	0409                	addi	s0,s0,2
    1278:	0100                	addi	s0,sp,128
    127a:	0200                	addi	s0,sp,256
    127c:	0304                	addi	s1,sp,384
    127e:	04090103          	lb	sp,64(s2)
    1282:	0100                	addi	s0,sp,128
    1284:	0200                	addi	s0,sp,256
    1286:	0304                	addi	s1,sp,384
    1288:	02097f03          	0x2097f03
    128c:	0100                	addi	s0,sp,128
    128e:	0905                	addi	s2,s2,1
    1290:	0200                	addi	s0,sp,256
    1292:	0304                	addi	s1,sp,384
    1294:	0306                	slli	t1,t1,0x1
    1296:	0901                	addi	s2,s2,0
    1298:	0004                	0x4
    129a:	0501                	addi	a0,a0,0
    129c:	0011                	c.nop	4
    129e:	0402                	c.slli64	s0
    12a0:	00030603          	lb	a2,0(t1)
    12a4:	0009                	c.nop	2
    12a6:	0100                	addi	s0,sp,128
    12a8:	1b05                	addi	s6,s6,-31
    12aa:	0200                	addi	s0,sp,256
    12ac:	0304                	addi	s1,sp,384
    12ae:	0306                	slli	t1,t1,0x1
    12b0:	097c                	addi	a5,sp,156
    12b2:	0004                	0x4
    12b4:	0501                	addi	a0,a0,0
    12b6:	000d                	c.nop	3
    12b8:	0402                	c.slli64	s0
    12ba:	09260303          	lb	t1,146(a2)
    12be:	0004                	0x4
    12c0:	0501                	addi	a0,a0,0
    12c2:	0022                	c.slli	zero,0x8
    12c4:	0402                	c.slli64	s0
    12c6:	00030603          	lb	a2,0(t1)
    12ca:	0009                	c.nop	2
    12cc:	0100                	addi	s0,sp,128
    12ce:	2a05                	jal	13fe <product2+0x96>
    12d0:	0200                	addi	s0,sp,256
    12d2:	0304                	addi	s1,sp,384
    12d4:	08097f03          	0x8097f03
    12d8:	0100                	addi	s0,sp,128
    12da:	1d05                	addi	s10,s10,-31
    12dc:	0200                	addi	s0,sp,256
    12de:	0304                	addi	s1,sp,384
    12e0:	04090103          	lb	sp,64(s2)
    12e4:	0100                	addi	s0,sp,128
    12e6:	2a05                	jal	1416 <product2+0xae>
    12e8:	0200                	addi	s0,sp,256
    12ea:	0304                	addi	s1,sp,384
    12ec:	0306                	slli	t1,t1,0x1
    12ee:	097f                	0x97f
    12f0:	0004                	0x4
    12f2:	0501                	addi	a0,a0,0
    12f4:	000d                	c.nop	3
    12f6:	0402                	c.slli64	s0
    12f8:	09070303          	lb	t1,144(a4)
    12fc:	0002                	c.slli64	zero
    12fe:	0501                	addi	a0,a0,0
    1300:	0402001b          	0x402001b
    1304:	00030603          	lb	a2,0(t1)
    1308:	0009                	c.nop	2
    130a:	0100                	addi	s0,sp,128
    130c:	2305                	jal	182c <ti_2+0x14>
    130e:	0200                	addi	s0,sp,256
    1310:	0304                	addi	s1,sp,384
    1312:	04090003          	lb	zero,64(s2)
    1316:	0100                	addi	s0,sp,128
    1318:	1f05                	addi	t5,t5,-31
    131a:	0200                	addi	s0,sp,256
    131c:	0304                	addi	s1,sp,384
    131e:	04090003          	lb	zero,64(s2)
    1322:	0100                	addi	s0,sp,128
    1324:	1505                	addi	a0,a0,-31
    1326:	0200                	addi	s0,sp,256
    1328:	0304                	addi	s1,sp,384
    132a:	04090003          	lb	zero,64(s2)
    132e:	0100                	addi	s0,sp,128
    1330:	2005                	jal	1350 <_bss_start+0x240>
    1332:	0200                	addi	s0,sp,256
    1334:	0304                	addi	s1,sp,384
    1336:	04097f03          	0x4097f03
    133a:	0100                	addi	s0,sp,128
    133c:	1f05                	addi	t5,t5,-31
    133e:	0200                	addi	s0,sp,256
    1340:	0304                	addi	s1,sp,384
    1342:	02090103          	lb	sp,32(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	1505                	addi	a0,a0,-31
    134a:	0200                	addi	s0,sp,256
    134c:	0304                	addi	s1,sp,384
    134e:	02090003          	lb	zero,32(s2)
    1352:	0100                	addi	s0,sp,128
    1354:	2005                	jal	1374 <product2+0xc>
    1356:	0200                	addi	s0,sp,256
    1358:	0304                	addi	s1,sp,384
    135a:	0306                	slli	t1,t1,0x1
    135c:	097f                	0x97f
    135e:	0002                	c.slli64	zero
    1360:	0501                	addi	a0,a0,0
    1362:	000d                	c.nop	3
    1364:	0402                	c.slli64	s0
    1366:	092f0303          	lb	t1,146(t5)
    136a:	0004                	0x4
    136c:	0501                	addi	a0,a0,0
    136e:	0019                	c.nop	6
    1370:	0402                	c.slli64	s0
    1372:	00030603          	lb	a2,0(t1)
    1376:	0009                	c.nop	2
    1378:	0100                	addi	s0,sp,128
    137a:	2305                	jal	189a <ti_2+0x82>
    137c:	0200                	addi	s0,sp,256
    137e:	0304                	addi	s1,sp,384
    1380:	04090003          	lb	zero,64(s2)
    1384:	0100                	addi	s0,sp,128
    1386:	1d05                	addi	s10,s10,-31
    1388:	0200                	addi	s0,sp,256
    138a:	0304                	addi	s1,sp,384
    138c:	04090003          	lb	zero,64(s2)
    1390:	0100                	addi	s0,sp,128
    1392:	1305                	addi	t1,t1,-31
    1394:	0200                	addi	s0,sp,256
    1396:	0304                	addi	s1,sp,384
    1398:	04090003          	lb	zero,64(s2)
    139c:	0100                	addi	s0,sp,128
    139e:	2005                	jal	13be <product2+0x56>
    13a0:	0200                	addi	s0,sp,256
    13a2:	0304                	addi	s1,sp,384
    13a4:	04097f03          	0x4097f03
    13a8:	0100                	addi	s0,sp,128
    13aa:	1d05                	addi	s10,s10,-31
    13ac:	0200                	addi	s0,sp,256
    13ae:	0304                	addi	s1,sp,384
    13b0:	02090103          	lb	sp,32(s2)
    13b4:	0100                	addi	s0,sp,128
    13b6:	1305                	addi	t1,t1,-31
    13b8:	0200                	addi	s0,sp,256
    13ba:	0304                	addi	s1,sp,384
    13bc:	02090003          	lb	zero,32(s2)
    13c0:	0100                	addi	s0,sp,128
    13c2:	2005                	jal	13e2 <product2+0x7a>
    13c4:	0200                	addi	s0,sp,256
    13c6:	0304                	addi	s1,sp,384
    13c8:	0306                	slli	t1,t1,0x1
    13ca:	097f                	0x97f
    13cc:	0002                	c.slli64	zero
    13ce:	0501                	addi	a0,a0,0
    13d0:	0402000f          	0x402000f
    13d4:	09190303          	lb	t1,145(s2)
    13d8:	0004                	0x4
    13da:	0501                	addi	a0,a0,0
    13dc:	04020017          	auipc	zero,0x4020
    13e0:	00030603          	lb	a2,0(t1)
    13e4:	0409                	addi	s0,s0,2
    13e6:	0100                	addi	s0,sp,128
    13e8:	1b05                	addi	s6,s6,-31
    13ea:	0200                	addi	s0,sp,256
    13ec:	0304                	addi	s1,sp,384
    13ee:	04090103          	lb	sp,64(s2)
    13f2:	0100                	addi	s0,sp,128
    13f4:	1605                	addi	a2,a2,-31
    13f6:	0200                	addi	s0,sp,256
    13f8:	0304                	addi	s1,sp,384
    13fa:	02090003          	lb	zero,32(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	1705                	addi	a4,a4,-31
    1402:	0200                	addi	s0,sp,256
    1404:	0304                	addi	s1,sp,384
    1406:	02097f03          	0x2097f03
    140a:	0100                	addi	s0,sp,128
    140c:	0d05                	addi	s10,s10,1
    140e:	0200                	addi	s0,sp,256
    1410:	0304                	addi	s1,sp,384
    1412:	0306                	slli	t1,t1,0x1
    1414:	0901                	addi	s2,s2,0
    1416:	0004                	0x4
    1418:	0501                	addi	a0,a0,0
    141a:	0020                	addi	s0,sp,8
    141c:	0402                	c.slli64	s0
    141e:	7a030603          	lb	a2,1952(t1)
    1422:	0009                	c.nop	2
    1424:	0100                	addi	s0,sp,128
    1426:	1605                	addi	a2,a2,-31
    1428:	0200                	addi	s0,sp,256
    142a:	0304                	addi	s1,sp,384
    142c:	02090603          	lb	a2,32(s2)
    1430:	0100                	addi	s0,sp,128
    1432:	2005                	jal	1452 <product2+0xea>
    1434:	0200                	addi	s0,sp,256
    1436:	0304                	addi	s1,sp,384
    1438:	0306                	slli	t1,t1,0x1
    143a:	097a                	slli	s2,s2,0x1e
    143c:	0002                	c.slli64	zero
    143e:	0501                	addi	a0,a0,0
    1440:	030d                	addi	t1,t1,3
    1442:	090c                	addi	a1,sp,144
    1444:	0002                	c.slli64	zero
    1446:	0501                	addi	a0,a0,0
    1448:	0003061b          	0x3061b
    144c:	0009                	c.nop	2
    144e:	0100                	addi	s0,sp,128
    1450:	2005                	jal	1470 <product2+0x108>
    1452:	08090003          	lb	zero,128(s2)
    1456:	0100                	addi	s0,sp,128
    1458:	1005                	c.nop	-31
    145a:	04090003          	lb	zero,64(s2)
    145e:	0100                	addi	s0,sp,128
    1460:	1e05                	addi	t3,t3,-31
    1462:	0200                	addi	s0,sp,256
    1464:	0204                	addi	s1,sp,256
    1466:	0306                	slli	t1,t1,0x1
    1468:	097f                	0x97f
    146a:	0004                	0x4
    146c:	0501                	addi	a0,a0,0
    146e:	000d                	c.nop	3
    1470:	0402                	c.slli64	s0
    1472:	090d0303          	lb	t1,144(s10)
    1476:	0004                	0x4
    1478:	0501                	addi	a0,a0,0
    147a:	0020                	addi	s0,sp,8
    147c:	0402                	c.slli64	s0
    147e:	00030603          	lb	a2,0(t1)
    1482:	0009                	c.nop	2
    1484:	0100                	addi	s0,sp,128
    1486:	0200                	addi	s0,sp,256
    1488:	0304                	addi	s1,sp,384
    148a:	02097f03          	0x2097f03
    148e:	0100                	addi	s0,sp,128
    1490:	0200                	addi	s0,sp,256
    1492:	0304                	addi	s1,sp,384
    1494:	04090103          	lb	sp,64(s2)
    1498:	0100                	addi	s0,sp,128
    149a:	2505                	jal	1aba <random_keys+0x112>
    149c:	0200                	addi	s0,sp,256
    149e:	0304                	addi	s1,sp,384
    14a0:	04090003          	lb	zero,64(s2)
    14a4:	0100                	addi	s0,sp,128
    14a6:	1505                	addi	a0,a0,-31
    14a8:	0200                	addi	s0,sp,256
    14aa:	0304                	addi	s1,sp,384
    14ac:	04090003          	lb	zero,64(s2)
    14b0:	0100                	addi	s0,sp,128
    14b2:	2005                	jal	14d2 <product2+0x16a>
    14b4:	0200                	addi	s0,sp,256
    14b6:	0304                	addi	s1,sp,384
    14b8:	0306                	slli	t1,t1,0x1
    14ba:	097f                	0x97f
    14bc:	0004                	0x4
    14be:	0501                	addi	a0,a0,0
    14c0:	0328                	addi	a0,sp,392
    14c2:	090c                	addi	a1,sp,144
    14c4:	0002                	c.slli64	zero
    14c6:	0501                	addi	a0,a0,0
    14c8:	0305                	addi	t1,t1,1
    14ca:	0902                	c.slli64	s2
    14cc:	0000                	unimp
    14ce:	0501                	addi	a0,a0,0
    14d0:	0628                	addi	a0,sp,776
    14d2:	00097e03          	0x97e03
    14d6:	0100                	addi	s0,sp,128
    14d8:	36090003          	lb	zero,864(s2)
    14dc:	0100                	addi	s0,sp,128
    14de:	0905                	addi	s2,s2,1
    14e0:	04090203          	lb	tp,64(s2)
    14e4:	0100                	addi	s0,sp,128
    14e6:	10090103          	lb	sp,256(s2)
    14ea:	0100                	addi	s0,sp,128
    14ec:	0a097f03          	0xa097f03
    14f0:	0100                	addi	s0,sp,128
    14f2:	0505                	addi	a0,a0,1
    14f4:	0306                	slli	t1,t1,0x1
    14f6:	0901                	addi	s2,s2,0
    14f8:	006c                	addi	a1,sp,12
    14fa:	0501                	addi	a0,a0,0
    14fc:	0610                	addi	a2,sp,768
    14fe:	00090603          	lb	a2,0(s2)
    1502:	0100                	addi	s0,sp,128
    1504:	0905                	addi	s2,s2,1
    1506:	04097a03          	0x4097a03
    150a:	0100                	addi	s0,sp,128
    150c:	02090603          	lb	a2,32(s2)
    1510:	0100                	addi	s0,sp,128
    1512:	0e05                	addi	t3,t3,1
    1514:	0e090503          	lb	a0,224(s2)
    1518:	0100                	addi	s0,sp,128
    151a:	0905                	addi	s2,s2,1
    151c:	0a097503          	0xa097503
    1520:	0100                	addi	s0,sp,128
    1522:	0505                	addi	a0,a0,1
    1524:	0306                	slli	t1,t1,0x1
    1526:	0902                	c.slli64	s2
    1528:	0064                	addi	s1,sp,12
    152a:	0301                	addi	t1,t1,0
    152c:	0901                	addi	s2,s2,0
    152e:	0000                	unimp
    1530:	0301                	addi	t1,t1,0
    1532:	0901                	addi	s2,s2,0
    1534:	0000                	unimp
    1536:	0301                	addi	t1,t1,0
    1538:	0901                	addi	s2,s2,0
    153a:	0000                	unimp
    153c:	0301                	addi	t1,t1,0
    153e:	0901                	addi	s2,s2,0
    1540:	0000                	unimp
    1542:	0301                	addi	t1,t1,0
    1544:	0901                	addi	s2,s2,0
    1546:	0000                	unimp
    1548:	0301                	addi	t1,t1,0
    154a:	0901                	addi	s2,s2,0
    154c:	0000                	unimp
    154e:	0301                	addi	t1,t1,0
    1550:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1554:	0301                	addi	t1,t1,0
    1556:	0901                	addi	s2,s2,0
    1558:	0000                	unimp
    155a:	0501                	addi	a0,a0,0
    155c:	060e                	slli	a2,a2,0x3
    155e:	00090003          	lb	zero,0(s2)
    1562:	0100                	addi	s0,sp,128
    1564:	0505                	addi	a0,a0,1
    1566:	0306                	slli	t1,t1,0x1
    1568:	0902                	c.slli64	s2
    156a:	0004                	0x4
    156c:	0501                	addi	a0,a0,0
    156e:	0003060b          	0x3060b
    1572:	0009                	c.nop	2
    1574:	0100                	addi	s0,sp,128
    1576:	1005                	c.nop	-31
    1578:	0200                	addi	s0,sp,256
    157a:	0104                	addi	s1,sp,128
    157c:	0306                	slli	t1,t1,0x1
    157e:	0900                	addi	s0,sp,144
    1580:	0002                	c.slli64	zero
    1582:	0501                	addi	a0,a0,0
    1584:	0005                	c.nop	1
    1586:	0402                	c.slli64	s0
    1588:	0601                	addi	a2,a2,0
    158a:	00090003          	lb	zero,0(s2)
    158e:	0100                	addi	s0,sp,128
    1590:	06090603          	lb	a2,96(s2)
    1594:	0100                	addi	s0,sp,128
    1596:	1105                	addi	sp,sp,-31
    1598:	0200                	addi	s0,sp,256
    159a:	0104                	addi	s1,sp,128
    159c:	0306                	slli	t1,t1,0x1
    159e:	0900                	addi	s0,sp,144
    15a0:	0004                	0x4
    15a2:	0501                	addi	a0,a0,0
    15a4:	0005                	c.nop	1
    15a6:	0402                	c.slli64	s0
    15a8:	0601                	addi	a2,a2,0
    15aa:	00090003          	lb	zero,0(s2)
    15ae:	0100                	addi	s0,sp,128
    15b0:	0b05                	addi	s6,s6,1
    15b2:	04090703          	lb	a4,64(s2)
    15b6:	0100                	addi	s0,sp,128
    15b8:	1805                	addi	a6,a6,-31
    15ba:	02090103          	lb	sp,32(s2)
    15be:	0100                	addi	s0,sp,128
    15c0:	1005                	c.nop	-31
    15c2:	0200                	addi	s0,sp,256
    15c4:	0104                	addi	s1,sp,128
    15c6:	0306                	slli	t1,t1,0x1
    15c8:	097f                	0x97f
    15ca:	0008                	0x8
    15cc:	0501                	addi	a0,a0,0
    15ce:	0005                	c.nop	1
    15d0:	0402                	c.slli64	s0
    15d2:	0601                	addi	a2,a2,0
    15d4:	00090003          	lb	zero,0(s2)
    15d8:	0100                	addi	s0,sp,128
    15da:	1605                	addi	a2,a2,-31
    15dc:	08090503          	lb	a0,128(s2)
    15e0:	0100                	addi	s0,sp,128
    15e2:	1805                	addi	a6,a6,-31
    15e4:	08090103          	lb	sp,128(s2)
    15e8:	0100                	addi	s0,sp,128
    15ea:	1005                	c.nop	-31
    15ec:	0200                	addi	s0,sp,256
    15ee:	0104                	addi	s1,sp,128
    15f0:	0306                	slli	t1,t1,0x1
    15f2:	097f                	0x97f
    15f4:	0008                	0x8
    15f6:	0501                	addi	a0,a0,0
    15f8:	0005                	c.nop	1
    15fa:	0402                	c.slli64	s0
    15fc:	0601                	addi	a2,a2,0
    15fe:	00090003          	lb	zero,0(s2)
    1602:	0100                	addi	s0,sp,128
    1604:	0306                	slli	t1,t1,0x1
    1606:	0905                	addi	s2,s2,1
    1608:	0004                	0x4
    160a:	0501                	addi	a0,a0,0
    160c:	061a                	slli	a2,a2,0x6
    160e:	00090303          	lb	t1,0(s2)
    1612:	0100                	addi	s0,sp,128
    1614:	0a05                	addi	s4,s4,1
    1616:	06097d03          	0x6097d03
    161a:	0100                	addi	s0,sp,128
    161c:	0505                	addi	a0,a0,1
    161e:	0306                	slli	t1,t1,0x1
    1620:	000c0903          	lb	s2,0(s8)
    1624:	0501                	addi	a0,a0,0
    1626:	0618                	addi	a4,sp,768
    1628:	02090103          	lb	sp,32(s2)
    162c:	0100                	addi	s0,sp,128
    162e:	1405                	addi	s0,s0,-31
    1630:	0200                	addi	s0,sp,256
    1632:	0104                	addi	s1,sp,128
    1634:	0306                	slli	t1,t1,0x1
    1636:	097f                	0x97f
    1638:	0008                	0x8
    163a:	0501                	addi	a0,a0,0
    163c:	0005                	c.nop	1
    163e:	0402                	c.slli64	s0
    1640:	0601                	addi	a2,a2,0
    1642:	00090003          	lb	zero,0(s2)
    1646:	0100                	addi	s0,sp,128
    1648:	0306                	slli	t1,t1,0x1
    164a:	0906                	slli	s2,s2,0x1
    164c:	0004                	0x4
    164e:	0501                	addi	a0,a0,0
    1650:	060a                	slli	a2,a2,0x2
    1652:	00090003          	lb	zero,0(s2)
    1656:	0100                	addi	s0,sp,128
    1658:	0505                	addi	a0,a0,1
    165a:	0306                	slli	t1,t1,0x1
    165c:	0904                	addi	s1,sp,144
    165e:	000c                	0xc
    1660:	0501                	addi	a0,a0,0
    1662:	061a                	slli	a2,a2,0x6
    1664:	06090003          	lb	zero,96(s2)
    1668:	0100                	addi	s0,sp,128
    166a:	1805                	addi	a6,a6,-31
    166c:	02090103          	lb	sp,32(s2)
    1670:	0100                	addi	s0,sp,128
    1672:	1405                	addi	s0,s0,-31
    1674:	0200                	addi	s0,sp,256
    1676:	0104                	addi	s1,sp,128
    1678:	0306                	slli	t1,t1,0x1
    167a:	097f                	0x97f
    167c:	0008                	0x8
    167e:	0501                	addi	a0,a0,0
    1680:	0005                	c.nop	1
    1682:	0402                	c.slli64	s0
    1684:	0601                	addi	a2,a2,0
    1686:	00090003          	lb	zero,0(s2)
    168a:	0100                	addi	s0,sp,128
    168c:	0306                	slli	t1,t1,0x1
    168e:	0905                	addi	s2,s2,1
    1690:	0004                	0x4
    1692:	0501                	addi	a0,a0,0
    1694:	060a                	slli	a2,a2,0x2
    1696:	00090003          	lb	zero,0(s2)
    169a:	0100                	addi	s0,sp,128
    169c:	0505                	addi	a0,a0,1
    169e:	0306                	slli	t1,t1,0x1
    16a0:	000a0903          	lb	s2,0(s4)
    16a4:	0501                	addi	a0,a0,0
    16a6:	0003060b          	0x3060b
    16aa:	0209                	addi	tp,tp,2
    16ac:	0100                	addi	s0,sp,128
    16ae:	1805                	addi	a6,a6,-31
    16b0:	02090003          	lb	zero,32(s2)
    16b4:	0100                	addi	s0,sp,128
    16b6:	1005                	c.nop	-31
    16b8:	0200                	addi	s0,sp,256
    16ba:	0104                	addi	s1,sp,128
    16bc:	0306                	slli	t1,t1,0x1
    16be:	0900                	addi	s0,sp,144
    16c0:	0004                	0x4
    16c2:	0501                	addi	a0,a0,0
    16c4:	0005                	c.nop	1
    16c6:	0402                	c.slli64	s0
    16c8:	0601                	addi	a2,a2,0
    16ca:	00090003          	lb	zero,0(s2)
    16ce:	0100                	addi	s0,sp,128
    16d0:	0306                	slli	t1,t1,0x1
    16d2:	0906                	slli	s2,s2,0x1
    16d4:	0004                	0x4
    16d6:	0501                	addi	a0,a0,0
    16d8:	060a                	slli	a2,a2,0x2
    16da:	00090003          	lb	zero,0(s2)
    16de:	0100                	addi	s0,sp,128
    16e0:	0505                	addi	a0,a0,1
    16e2:	0306                	slli	t1,t1,0x1
    16e4:	0904                	addi	s1,sp,144
    16e6:	0008                	0x8
    16e8:	0501                	addi	a0,a0,0
    16ea:	061a                	slli	a2,a2,0x6
    16ec:	00090003          	lb	zero,0(s2)
    16f0:	0100                	addi	s0,sp,128
    16f2:	1805                	addi	a6,a6,-31
    16f4:	0a090103          	lb	sp,160(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	1405                	addi	s0,s0,-31
    16fc:	0200                	addi	s0,sp,256
    16fe:	0104                	addi	s1,sp,128
    1700:	0306                	slli	t1,t1,0x1
    1702:	097f                	0x97f
    1704:	0008                	0x8
    1706:	0501                	addi	a0,a0,0
    1708:	0005                	c.nop	1
    170a:	0402                	c.slli64	s0
    170c:	0601                	addi	a2,a2,0
    170e:	02090003          	lb	zero,32(s2)
    1712:	0100                	addi	s0,sp,128
    1714:	1a05                	addi	s4,s4,-31
    1716:	04090503          	lb	a0,64(s2)
    171a:	0100                	addi	s0,sp,128
    171c:	1805                	addi	a6,a6,-31
    171e:	04090103          	lb	sp,64(s2)
    1722:	0100                	addi	s0,sp,128
    1724:	1a05                	addi	s4,s4,-31
    1726:	08097f03          	0x8097f03
    172a:	0100                	addi	s0,sp,128
    172c:	1405                	addi	s0,s0,-31
    172e:	0200                	addi	s0,sp,256
    1730:	0104                	addi	s1,sp,128
    1732:	0306                	slli	t1,t1,0x1
    1734:	0900                	addi	s0,sp,144
    1736:	0008                	0x8
    1738:	0501                	addi	a0,a0,0
    173a:	0005                	c.nop	1
    173c:	0402                	c.slli64	s0
    173e:	0601                	addi	a2,a2,0
    1740:	00090003          	lb	zero,0(s2)
    1744:	0100                	addi	s0,sp,128
    1746:	0306                	slli	t1,t1,0x1
    1748:	0906                	slli	s2,s2,0x1
    174a:	0004                	0x4
    174c:	0301                	addi	t1,t1,0
    174e:	0902                	c.slli64	s2
    1750:	0000                	unimp
    1752:	0501                	addi	a0,a0,0
    1754:	0601                	addi	a2,a2,0
    1756:	00090103          	lb	sp,0(s2)
    175a:	0100                	addi	s0,sp,128
    175c:	0905                	addi	s2,s2,1
    175e:	0200                	addi	s0,sp,256
    1760:	0304                	addi	s1,sp,384
    1762:	0306                	slli	t1,t1,0x1
    1764:	7fbd                	lui	t6,0xfffef
    1766:	4009                	c.li	zero,2
    1768:	0100                	addi	s0,sp,128
    176a:	1205                	addi	tp,tp,-31
    176c:	0200                	addi	s0,sp,256
    176e:	0304                	addi	s1,sp,384
    1770:	0306                	slli	t1,t1,0x1
    1772:	0900                	addi	s0,sp,144
    1774:	0000                	unimp
    1776:	0501                	addi	a0,a0,0
    1778:	04020017          	auipc	zero,0x4020
    177c:	7f030603          	lb	a2,2032(t1)
    1780:	0a09                	addi	s4,s4,2
    1782:	0100                	addi	s0,sp,128
    1784:	0905                	addi	s2,s2,1
    1786:	0200                	addi	s0,sp,256
    1788:	0304                	addi	s1,sp,384
    178a:	04090703          	lb	a4,64(s2)
    178e:	0100                	addi	s0,sp,128
    1790:	0e05                	addi	t3,t3,1
    1792:	0200                	addi	s0,sp,256
    1794:	0304                	addi	s1,sp,384
    1796:	0306                	slli	t1,t1,0x1
    1798:	0900                	addi	s0,sp,144
    179a:	0004                	0x4
    179c:	0501                	addi	a0,a0,0
    179e:	0009                	c.nop	2
    17a0:	0402                	c.slli64	s0
    17a2:	01030603          	lb	a2,16(t1)
    17a6:	0a09                	addi	s4,s4,2
    17a8:	0100                	addi	s0,sp,128
    17aa:	0e05                	addi	t3,t3,1
    17ac:	0200                	addi	s0,sp,256
    17ae:	0304                	addi	s1,sp,384
    17b0:	0306                	slli	t1,t1,0x1
    17b2:	0900                	addi	s0,sp,144
    17b4:	0000                	unimp
    17b6:	0501                	addi	a0,a0,0
    17b8:	0019                	c.nop	6
    17ba:	0402                	c.slli64	s0
    17bc:	7e030603          	lb	a2,2016(t1)
    17c0:	0a09                	addi	s4,s4,2
    17c2:	0100                	addi	s0,sp,128
    17c4:	0905                	addi	s2,s2,1
    17c6:	0200                	addi	s0,sp,256
    17c8:	0304                	addi	s1,sp,384
    17ca:	04090803          	lb	a6,64(s2)
    17ce:	0100                	addi	s0,sp,128
    17d0:	1b05                	addi	s6,s6,-31
    17d2:	0200                	addi	s0,sp,256
    17d4:	0304                	addi	s1,sp,384
    17d6:	0306                	slli	t1,t1,0x1
    17d8:	0900                	addi	s0,sp,144
    17da:	0004                	0x4
    17dc:	0501                	addi	a0,a0,0
    17de:	0018                	0x18
    17e0:	0402                	c.slli64	s0
    17e2:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    17e6:	0004                	0x4
    17e8:	0501                	addi	a0,a0,0
    17ea:	0402001b          	0x402001b
    17ee:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    17f2:	0004                	0x4
    17f4:	0501                	addi	a0,a0,0
    17f6:	0018                	0x18
    17f8:	0402                	c.slli64	s0
    17fa:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    17fe:	0002                	c.slli64	zero
    1800:	0501                	addi	a0,a0,0
    1802:	04020017          	auipc	zero,0x4020
    1806:	097f0303          	lb	t1,151(t5)
    180a:	0002                	c.slli64	zero
    180c:	0501                	addi	a0,a0,0
    180e:	0018                	0x18
    1810:	0402                	c.slli64	s0
    1812:	09010303          	lb	t1,144(sp)
    1816:	0002                	c.slli64	zero
    1818:	0501                	addi	a0,a0,0
    181a:	04020017          	auipc	zero,0x4020
    181e:	7f030603          	lb	a2,2032(t1)
    1822:	0209                	addi	tp,tp,2
    1824:	0100                	addi	s0,sp,128
    1826:	0905                	addi	s2,s2,1
    1828:	0200                	addi	s0,sp,256
    182a:	0304                	addi	s1,sp,384
    182c:	02090603          	lb	a2,32(s2)
    1830:	0100                	addi	s0,sp,128
    1832:	1805                	addi	a6,a6,-31
    1834:	0200                	addi	s0,sp,256
    1836:	0304                	addi	s1,sp,384
    1838:	0306                	slli	t1,t1,0x1
    183a:	0900                	addi	s0,sp,144
    183c:	0000                	unimp
    183e:	0501                	addi	a0,a0,0
    1840:	0402001b          	0x402001b
    1844:	7f030603          	lb	a2,2032(t1)
    1848:	0a09                	addi	s4,s4,2
    184a:	0100                	addi	s0,sp,128
    184c:	0905                	addi	s2,s2,1
    184e:	0200                	addi	s0,sp,256
    1850:	0304                	addi	s1,sp,384
    1852:	06090903          	lb	s2,96(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	1c05                	addi	s8,s8,-31
    185a:	0200                	addi	s0,sp,256
    185c:	0304                	addi	s1,sp,384
    185e:	0306                	slli	t1,t1,0x1
    1860:	0900                	addi	s0,sp,144
    1862:	0000                	unimp
    1864:	0501                	addi	a0,a0,0
    1866:	0018                	0x18
    1868:	0402                	c.slli64	s0
    186a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    186e:	0002                	c.slli64	zero
    1870:	0501                	addi	a0,a0,0
    1872:	001f 0402 0603      	0x6030402001f
    1878:	08097f03          	0x8097f03
    187c:	0100                	addi	s0,sp,128
    187e:	0905                	addi	s2,s2,1
    1880:	0200                	addi	s0,sp,256
    1882:	0304                	addi	s1,sp,384
    1884:	06090b03          	lb	s6,96(s2)
    1888:	0100                	addi	s0,sp,128
    188a:	1c05                	addi	s8,s8,-31
    188c:	0200                	addi	s0,sp,256
    188e:	0304                	addi	s1,sp,384
    1890:	0306                	slli	t1,t1,0x1
    1892:	0900                	addi	s0,sp,144
    1894:	0004                	0x4
    1896:	0501                	addi	a0,a0,0
    1898:	0018                	0x18
    189a:	0402                	c.slli64	s0
    189c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    18a0:	0008                	0x8
    18a2:	0501                	addi	a0,a0,0
    18a4:	001f 0402 0303      	0x3030402001f
    18aa:	097f                	0x97f
    18ac:	0002                	c.slli64	zero
    18ae:	0501                	addi	a0,a0,0
    18b0:	0018                	0x18
    18b2:	0402                	c.slli64	s0
    18b4:	09010303          	lb	t1,144(sp)
    18b8:	0002                	c.slli64	zero
    18ba:	0501                	addi	a0,a0,0
    18bc:	001f 0402 0603      	0x6030402001f
    18c2:	02097f03          	0x2097f03
    18c6:	0100                	addi	s0,sp,128
    18c8:	0905                	addi	s2,s2,1
    18ca:	0200                	addi	s0,sp,256
    18cc:	0304                	addi	s1,sp,384
    18ce:	02090903          	lb	s2,32(s2)
    18d2:	0100                	addi	s0,sp,128
    18d4:	1605                	addi	a2,a2,-31
    18d6:	0200                	addi	s0,sp,256
    18d8:	0304                	addi	s1,sp,384
    18da:	0306                	slli	t1,t1,0x1
    18dc:	0900                	addi	s0,sp,144
    18de:	0000                	unimp
    18e0:	0501                	addi	a0,a0,0
    18e2:	001d                	c.nop	7
    18e4:	0402                	c.slli64	s0
    18e6:	097f0303          	lb	t1,151(t5)
    18ea:	0002                	c.slli64	zero
    18ec:	0501                	addi	a0,a0,0
    18ee:	0016                	c.slli	zero,0x5
    18f0:	0402                	c.slli64	s0
    18f2:	09010303          	lb	t1,144(sp)
    18f6:	0004                	0x4
    18f8:	0501                	addi	a0,a0,0
    18fa:	0402000f          	0x402000f
    18fe:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1902:	0004                	0x4
    1904:	0501                	addi	a0,a0,0
    1906:	001d                	c.nop	7
    1908:	0402                	c.slli64	s0
    190a:	7f030603          	lb	a2,2032(t1)
    190e:	0409                	addi	s0,s0,2
    1910:	0100                	addi	s0,sp,128
    1912:	0905                	addi	s2,s2,1
    1914:	0200                	addi	s0,sp,256
    1916:	0304                	addi	s1,sp,384
    1918:	02090b03          	lb	s6,32(s2)
    191c:	0100                	addi	s0,sp,128
    191e:	1c05                	addi	s8,s8,-31
    1920:	0200                	addi	s0,sp,256
    1922:	0304                	addi	s1,sp,384
    1924:	0306                	slli	t1,t1,0x1
    1926:	0900                	addi	s0,sp,144
    1928:	0000                	unimp
    192a:	0501                	addi	a0,a0,0
    192c:	0018                	0x18
    192e:	0402                	c.slli64	s0
    1930:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1934:	0004                	0x4
    1936:	0501                	addi	a0,a0,0
    1938:	001f 0402 0603      	0x6030402001f
    193e:	08097f03          	0x8097f03
    1942:	0100                	addi	s0,sp,128
    1944:	0905                	addi	s2,s2,1
    1946:	0200                	addi	s0,sp,256
    1948:	0304                	addi	s1,sp,384
    194a:	04090603          	lb	a2,64(s2)
    194e:	0100                	addi	s0,sp,128
    1950:	1805                	addi	a6,a6,-31
    1952:	0200                	addi	s0,sp,256
    1954:	0304                	addi	s1,sp,384
    1956:	0306                	slli	t1,t1,0x1
    1958:	0900                	addi	s0,sp,144
    195a:	0004                	0x4
    195c:	0501                	addi	a0,a0,0
    195e:	001f 0402 0303      	0x3030402001f
    1964:	0900                	addi	s0,sp,144
    1966:	0004                	0x4
    1968:	0501                	addi	a0,a0,0
    196a:	0018                	0x18
    196c:	0402                	c.slli64	s0
    196e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1972:	0004                	0x4
    1974:	0501                	addi	a0,a0,0
    1976:	0021                	c.nop	8
    1978:	0402                	c.slli64	s0
    197a:	097f0303          	lb	t1,151(t5)
    197e:	0002                	c.slli64	zero
    1980:	0501                	addi	a0,a0,0
    1982:	0018                	0x18
    1984:	0402                	c.slli64	s0
    1986:	09010303          	lb	t1,144(sp)
    198a:	0002                	c.slli64	zero
    198c:	0501                	addi	a0,a0,0
    198e:	0021                	c.nop	8
    1990:	0402                	c.slli64	s0
    1992:	7f030603          	lb	a2,2032(t1)
    1996:	0209                	addi	tp,tp,2
    1998:	0100                	addi	s0,sp,128
    199a:	4b05                	li	s6,1
    199c:	02090c03          	lb	s8,32(s2)
    19a0:	0100                	addi	s0,sp,128
    19a2:	0505                	addi	a0,a0,1
    19a4:	00090203          	lb	tp,0(s2)
    19a8:	0100                	addi	s0,sp,128
    19aa:	00090103          	lb	sp,0(s2)
    19ae:	0100                	addi	s0,sp,128
    19b0:	00090203          	lb	tp,0(s2)
    19b4:	0100                	addi	s0,sp,128
    19b6:	4b05                	li	s6,1
    19b8:	0306                	slli	t1,t1,0x1
    19ba:	0000097b          	0x97b
    19be:	0501                	addi	a0,a0,0
    19c0:	0309                	addi	t1,t1,2
    19c2:	0905                	addi	s2,s2,1
    19c4:	000e                	c.slli	zero,0x3
    19c6:	0501                	addi	a0,a0,0
    19c8:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    19cc:	000e                	c.slli	zero,0x3
    19ce:	0301                	addi	t1,t1,0
    19d0:	0900                	addi	s0,sp,144
    19d2:	0006                	c.slli	zero,0x1
    19d4:	0501                	addi	a0,a0,0
    19d6:	0309                	addi	t1,t1,2
    19d8:	0905                	addi	s2,s2,1
    19da:	0004                	0x4
    19dc:	0501                	addi	a0,a0,0
    19de:	0605                	addi	a2,a2,1
    19e0:	02090103          	lb	sp,32(s2)
    19e4:	0100                	addi	s0,sp,128
    19e6:	00090103          	lb	sp,0(s2)
    19ea:	0100                	addi	s0,sp,128
    19ec:	00090303          	lb	t1,0(s2)
    19f0:	0100                	addi	s0,sp,128
    19f2:	0c05                	addi	s8,s8,1
    19f4:	0306                	slli	t1,t1,0x1
    19f6:	0900                	addi	s0,sp,144
    19f8:	0000                	unimp
    19fa:	0501                	addi	a0,a0,0
    19fc:	0605                	addi	a2,a2,1
    19fe:	12090403          	lb	s0,288(s2)
    1a02:	0100                	addi	s0,sp,128
    1a04:	1005                	c.nop	-31
    1a06:	00090003          	lb	zero,0(s2)
    1a0a:	0100                	addi	s0,sp,128
    1a0c:	0c05                	addi	s8,s8,1
    1a0e:	0306                	slli	t1,t1,0x1
    1a10:	097c                	addi	a5,sp,156
    1a12:	0000                	unimp
    1a14:	0501                	addi	a0,a0,0
    1a16:	0305                	addi	t1,t1,1
    1a18:	0904                	addi	s1,sp,144
    1a1a:	0002                	c.slli64	zero
    1a1c:	0501                	addi	a0,a0,0
    1a1e:	0009                	c.nop	2
    1a20:	0402                	c.slli64	s0
    1a22:	01030603          	lb	a2,16(t1)
    1a26:	0409                	addi	s0,s0,2
    1a28:	0100                	addi	s0,sp,128
    1a2a:	2405                	jal	1c4a <random_keys+0x2a2>
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0304                	addi	s1,sp,384
    1a30:	0306                	slli	t1,t1,0x1
    1a32:	0900                	addi	s0,sp,144
    1a34:	0004                	0x4
    1a36:	0501                	addi	a0,a0,0
    1a38:	0402001b          	0x402001b
    1a3c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a40:	0004                	0x4
    1a42:	0501                	addi	a0,a0,0
    1a44:	0011                	c.nop	4
    1a46:	0402                	c.slli64	s0
    1a48:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a4c:	0008                	0x8
    1a4e:	0501                	addi	a0,a0,0
    1a50:	0018                	0x18
    1a52:	0402                	c.slli64	s0
    1a54:	7f030603          	lb	a2,2032(t1)
    1a58:	0209                	addi	tp,tp,2
    1a5a:	0100                	addi	s0,sp,128
    1a5c:	1005                	c.nop	-31
    1a5e:	0200                	addi	s0,sp,256
    1a60:	0304                	addi	s1,sp,384
    1a62:	00090003          	lb	zero,0(s2)
    1a66:	0100                	addi	s0,sp,128
    1a68:	0505                	addi	a0,a0,1
    1a6a:	0200                	addi	s0,sp,256
    1a6c:	0304                	addi	s1,sp,384
    1a6e:	0306                	slli	t1,t1,0x1
    1a70:	0900                	addi	s0,sp,144
    1a72:	0000                	unimp
    1a74:	0601                	addi	a2,a2,0
    1a76:	04090603          	lb	a2,64(s2)
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	0a05                	addi	s4,s4,1
    1a7e:	0306                	slli	t1,t1,0x1
    1a80:	0900                	addi	s0,sp,144
    1a82:	0000                	unimp
    1a84:	0501                	addi	a0,a0,0
    1a86:	0605                	addi	a2,a2,1
    1a88:	10090203          	lb	tp,256(s2)
    1a8c:	0100                	addi	s0,sp,128
    1a8e:	1a05                	addi	s4,s4,-31
    1a90:	0306                	slli	t1,t1,0x1
    1a92:	0900                	addi	s0,sp,144
    1a94:	0000                	unimp
    1a96:	0501                	addi	a0,a0,0
    1a98:	0014                	0x14
    1a9a:	0402                	c.slli64	s0
    1a9c:	0601                	addi	a2,a2,0
    1a9e:	08090003          	lb	zero,128(s2)
    1aa2:	0100                	addi	s0,sp,128
    1aa4:	0505                	addi	a0,a0,1
    1aa6:	0200                	addi	s0,sp,256
    1aa8:	0104                	addi	s1,sp,128
    1aaa:	0306                	slli	t1,t1,0x1
    1aac:	0900                	addi	s0,sp,144
    1aae:	0000                	unimp
    1ab0:	0501                	addi	a0,a0,0
    1ab2:	0301                	addi	t1,t1,0
    1ab4:	0909                	addi	s2,s2,2
    1ab6:	0004                	0x4
    1ab8:	0501                	addi	a0,a0,0
    1aba:	0009                	c.nop	2
    1abc:	0402                	c.slli64	s0
    1abe:	78030603          	lb	a2,1920(t1)
    1ac2:	1009                	c.nop	-30
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	1905                	addi	s2,s2,-31
    1ac8:	0200                	addi	s0,sp,256
    1aca:	0304                	addi	s1,sp,384
    1acc:	0306                	slli	t1,t1,0x1
    1ace:	0900                	addi	s0,sp,144
    1ad0:	0000                	unimp
    1ad2:	0501                	addi	a0,a0,0
    1ad4:	001f 0402 0303      	0x3030402001f
    1ada:	097f                	0x97f
    1adc:	0008                	0x8
    1ade:	0501                	addi	a0,a0,0
    1ae0:	0015                	c.nop	5
    1ae2:	0402                	c.slli64	s0
    1ae4:	09010303          	lb	t1,144(sp)
    1ae8:	0004                	0x4
    1aea:	0501                	addi	a0,a0,0
    1aec:	001f 0402 0603      	0x6030402001f
    1af2:	04097f03          	0x4097f03
    1af6:	0100                	addi	s0,sp,128
    1af8:	6c05                	lui	s8,0x1
    1afa:	02090c03          	lb	s8,32(s2)
    1afe:	0100                	addi	s0,sp,128
    1b00:	0505                	addi	a0,a0,1
    1b02:	00090203          	lb	tp,0(s2)
    1b06:	0100                	addi	s0,sp,128
    1b08:	00090103          	lb	sp,0(s2)
    1b0c:	0100                	addi	s0,sp,128
    1b0e:	00090103          	lb	sp,0(s2)
    1b12:	0100                	addi	s0,sp,128
    1b14:	00090103          	lb	sp,0(s2)
    1b18:	0100                	addi	s0,sp,128
    1b1a:	00090103          	lb	sp,0(s2)
    1b1e:	0100                	addi	s0,sp,128
    1b20:	00090103          	lb	sp,0(s2)
    1b24:	0100                	addi	s0,sp,128
    1b26:	00090303          	lb	t1,0(s2)
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	6c05                	lui	s8,0x1
    1b2e:	0306                	slli	t1,t1,0x1
    1b30:	0976                	slli	s2,s2,0x1d
    1b32:	0000                	unimp
    1b34:	0501                	addi	a0,a0,0
    1b36:	031e                	slli	t1,t1,0x7
    1b38:	0911                	addi	s2,s2,4
    1b3a:	0008                	0x8
    1b3c:	0501                	addi	a0,a0,0
    1b3e:	036c                	addi	a1,sp,396
    1b40:	0006096f          	jal	s2,61b40 <_stack_start+0x51b40>
    1b44:	0501                	addi	a0,a0,0
    1b46:	0309                	addi	t1,t1,2
    1b48:	090a                	slli	s2,s2,0x2
    1b4a:	000a                	c.slli	zero,0x2
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	036c                	addi	a1,sp,396
    1b50:	0976                	slli	s2,s2,0x1d
    1b52:	0004                	0x4
    1b54:	0501                	addi	a0,a0,0
    1b56:	0309                	addi	t1,t1,2
    1b58:	090a                	slli	s2,s2,0x2
    1b5a:	0004                	0x4
    1b5c:	0501                	addi	a0,a0,0
    1b5e:	036c                	addi	a1,sp,396
    1b60:	0976                	slli	s2,s2,0x1d
    1b62:	0004                	0x4
    1b64:	0301                	addi	t1,t1,0
    1b66:	0900                	addi	s0,sp,144
    1b68:	0008                	0x8
    1b6a:	0501                	addi	a0,a0,0
    1b6c:	030a                	slli	t1,t1,0x2
    1b6e:	090e                	slli	s2,s2,0x3
    1b70:	0002                	c.slli64	zero
    1b72:	0501                	addi	a0,a0,0
    1b74:	0309                	addi	t1,t1,2
    1b76:	097c                	addi	a5,sp,156
    1b78:	0004                	0x4
    1b7a:	0501                	addi	a0,a0,0
    1b7c:	0605                	addi	a2,a2,1
    1b7e:	04090403          	lb	s0,64(s2)
    1b82:	0100                	addi	s0,sp,128
    1b84:	0a05                	addi	s4,s4,1
    1b86:	0306                	slli	t1,t1,0x1
    1b88:	0900                	addi	s0,sp,144
    1b8a:	0000                	unimp
    1b8c:	0501                	addi	a0,a0,0
    1b8e:	0605                	addi	a2,a2,1
    1b90:	10090303          	lb	t1,256(s2)
    1b94:	0100                	addi	s0,sp,128
    1b96:	0b05                	addi	s6,s6,1
    1b98:	0306                	slli	t1,t1,0x1
    1b9a:	0900                	addi	s0,sp,144
    1b9c:	0004                	0x4
    1b9e:	0501                	addi	a0,a0,0
    1ba0:	0014                	0x14
    1ba2:	0402                	c.slli64	s0
    1ba4:	0601                	addi	a2,a2,0
    1ba6:	02090003          	lb	zero,32(s2)
    1baa:	0100                	addi	s0,sp,128
    1bac:	0505                	addi	a0,a0,1
    1bae:	0200                	addi	s0,sp,256
    1bb0:	0104                	addi	s1,sp,128
    1bb2:	0306                	slli	t1,t1,0x1
    1bb4:	0900                	addi	s0,sp,144
    1bb6:	0000                	unimp
    1bb8:	0501                	addi	a0,a0,0
    1bba:	0316                	slli	t1,t1,0x5
    1bbc:	0906                	slli	s2,s2,0x1
    1bbe:	0004                	0x4
    1bc0:	0501                	addi	a0,a0,0
    1bc2:	030c                	addi	a1,sp,384
    1bc4:	097f                	0x97f
    1bc6:	0006                	c.slli	zero,0x1
    1bc8:	0501                	addi	a0,a0,0
    1bca:	0011                	c.nop	4
    1bcc:	0402                	c.slli64	s0
    1bce:	0601                	addi	a2,a2,0
    1bd0:	02090003          	lb	zero,32(s2)
    1bd4:	0100                	addi	s0,sp,128
    1bd6:	0505                	addi	a0,a0,1
    1bd8:	0200                	addi	s0,sp,256
    1bda:	0104                	addi	s1,sp,128
    1bdc:	0306                	slli	t1,t1,0x1
    1bde:	0900                	addi	s0,sp,144
    1be0:	0000                	unimp
    1be2:	0601                	addi	a2,a2,0
    1be4:	04090803          	lb	a6,64(s2)
    1be8:	0100                	addi	s0,sp,128
    1bea:	0905                	addi	s2,s2,1
    1bec:	0306                	slli	t1,t1,0x1
    1bee:	0900                	addi	s0,sp,144
    1bf0:	0000                	unimp
    1bf2:	0501                	addi	a0,a0,0
    1bf4:	0605                	addi	a2,a2,1
    1bf6:	0c090403          	lb	s0,192(s2)
    1bfa:	0100                	addi	s0,sp,128
    1bfc:	0a05                	addi	s4,s4,1
    1bfe:	0306                	slli	t1,t1,0x1
    1c00:	0900                	addi	s0,sp,144
    1c02:	0000                	unimp
    1c04:	0501                	addi	a0,a0,0
    1c06:	0605                	addi	a2,a2,1
    1c08:	0a090103          	lb	sp,160(s2)
    1c0c:	0100                	addi	s0,sp,128
    1c0e:	1405                	addi	s0,s0,-31
    1c10:	0200                	addi	s0,sp,256
    1c12:	0104                	addi	s1,sp,128
    1c14:	02090003          	lb	zero,32(s2)
    1c18:	0100                	addi	s0,sp,128
    1c1a:	0505                	addi	a0,a0,1
    1c1c:	0200                	addi	s0,sp,256
    1c1e:	0104                	addi	s1,sp,128
    1c20:	0306                	slli	t1,t1,0x1
    1c22:	0900                	addi	s0,sp,144
    1c24:	0000                	unimp
    1c26:	0501                	addi	a0,a0,0
    1c28:	0301                	addi	t1,t1,0
    1c2a:	00040907          	0x40907
    1c2e:	0501                	addi	a0,a0,0
    1c30:	0009                	c.nop	2
    1c32:	0402                	c.slli64	s0
    1c34:	68030603          	lb	a2,1664(t1)
    1c38:	1609                	addi	a2,a2,-30
    1c3a:	0100                	addi	s0,sp,128
    1c3c:	1905                	addi	s2,s2,-31
    1c3e:	0200                	addi	s0,sp,256
    1c40:	0304                	addi	s1,sp,384
    1c42:	0306                	slli	t1,t1,0x1
    1c44:	0900                	addi	s0,sp,144
    1c46:	0000                	unimp
    1c48:	0501                	addi	a0,a0,0
    1c4a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1c4e:	097f0303          	lb	t1,151(t5)
    1c52:	0008                	0x8
    1c54:	0501                	addi	a0,a0,0
    1c56:	0015                	c.nop	5
    1c58:	0402                	c.slli64	s0
    1c5a:	09010303          	lb	t1,144(sp)
    1c5e:	0004                	0x4
    1c60:	0501                	addi	a0,a0,0
    1c62:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1c66:	7f030603          	lb	a2,2032(t1)
    1c6a:	0409                	addi	s0,s0,2
    1c6c:	0100                	addi	s0,sp,128
    1c6e:	0905                	addi	s2,s2,1
    1c70:	02090603          	lb	a2,32(s2)
    1c74:	0100                	addi	s0,sp,128
    1c76:	0e05                	addi	t3,t3,1
    1c78:	0306                	slli	t1,t1,0x1
    1c7a:	0900                	addi	s0,sp,144
    1c7c:	0000                	unimp
    1c7e:	0501                	addi	a0,a0,0
    1c80:	0900030b          	0x900030b
    1c84:	0002                	c.slli64	zero
    1c86:	0501                	addi	a0,a0,0
    1c88:	060d                	addi	a2,a2,3
    1c8a:	04090303          	lb	t1,64(s2)
    1c8e:	0100                	addi	s0,sp,128
    1c90:	1905                	addi	s2,s2,-31
    1c92:	0306                	slli	t1,t1,0x1
    1c94:	0900                	addi	s0,sp,144
    1c96:	0000                	unimp
    1c98:	0501                	addi	a0,a0,0
    1c9a:	09000313          	li	t1,144
    1c9e:	0004                	0x4
    1ca0:	0501                	addi	a0,a0,0
    1ca2:	0018                	0x18
    1ca4:	0402                	c.slli64	s0
    1ca6:	0602                	c.slli64	a2
    1ca8:	02097c03          	0x2097c03
    1cac:	0100                	addi	s0,sp,128
    1cae:	0905                	addi	s2,s2,1
    1cb0:	0200                	addi	s0,sp,256
    1cb2:	0304                	addi	s1,sp,384
    1cb4:	06090e03          	lb	t3,96(s2)
    1cb8:	0100                	addi	s0,sp,128
    1cba:	1905                	addi	s2,s2,-31
    1cbc:	0200                	addi	s0,sp,256
    1cbe:	0304                	addi	s1,sp,384
    1cc0:	0306                	slli	t1,t1,0x1
    1cc2:	0900                	addi	s0,sp,144
    1cc4:	0000                	unimp
    1cc6:	0501                	addi	a0,a0,0
    1cc8:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1ccc:	097f0303          	lb	t1,151(t5)
    1cd0:	0008                	0x8
    1cd2:	0501                	addi	a0,a0,0
    1cd4:	0015                	c.nop	5
    1cd6:	0402                	c.slli64	s0
    1cd8:	09010303          	lb	t1,144(sp)
    1cdc:	0004                	0x4
    1cde:	0501                	addi	a0,a0,0
    1ce0:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1ce4:	7f030603          	lb	a2,2032(t1)
    1ce8:	0409                	addi	s0,s0,2
    1cea:	0100                	addi	s0,sp,128
    1cec:	0209                	addi	tp,tp,2
    1cee:	0000                	unimp
    1cf0:	0101                	addi	sp,sp,0
    1cf2:	0b05                	addi	s6,s6,1
    1cf4:	0500                	addi	s0,sp,640
    1cf6:	4402                	lw	s0,0(sp)
    1cf8:	000e                	c.slli	zero,0x3
    1cfa:	0300                	addi	s0,sp,384
    1cfc:	05a6                	slli	a1,a1,0x9
    1cfe:	0501                	addi	a0,a0,0
    1d00:	0305                	addi	t1,t1,1
    1d02:	0901                	addi	s2,s2,0
    1d04:	0000                	unimp
    1d06:	0301                	addi	t1,t1,0
    1d08:	0901                	addi	s2,s2,0
    1d0a:	0000                	unimp
    1d0c:	0301                	addi	t1,t1,0
    1d0e:	0901                	addi	s2,s2,0
    1d10:	0000                	unimp
    1d12:	0301                	addi	t1,t1,0
    1d14:	0901                	addi	s2,s2,0
    1d16:	0000                	unimp
    1d18:	0301                	addi	t1,t1,0
    1d1a:	0901                	addi	s2,s2,0
    1d1c:	0000                	unimp
    1d1e:	0301                	addi	t1,t1,0
    1d20:	0901                	addi	s2,s2,0
    1d22:	0000                	unimp
    1d24:	0301                	addi	t1,t1,0
    1d26:	0902                	c.slli64	s2
    1d28:	0000                	unimp
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	7803060b          	0x7803060b
    1d30:	0009                	c.nop	2
    1d32:	0100                	addi	s0,sp,128
    1d34:	0905                	addi	s2,s2,1
    1d36:	04090803          	lb	a6,64(s2)
    1d3a:	0100                	addi	s0,sp,128
    1d3c:	0b05                	addi	s6,s6,1
    1d3e:	0e097803          	0xe097803
    1d42:	0100                	addi	s0,sp,128
    1d44:	1205                	addi	tp,tp,-31
    1d46:	10091803          	lh	a6,256(s2)
    1d4a:	0100                	addi	s0,sp,128
    1d4c:	0905                	addi	s2,s2,1
    1d4e:	04097003          	0x4097003
    1d52:	0100                	addi	s0,sp,128
    1d54:	0505                	addi	a0,a0,1
    1d56:	0306                	slli	t1,t1,0x1
    1d58:	0901                	addi	s2,s2,0
    1d5a:	0002                	c.slli64	zero
    1d5c:	0301                	addi	t1,t1,0
    1d5e:	0901                	addi	s2,s2,0
    1d60:	0000                	unimp
    1d62:	0301                	addi	t1,t1,0
    1d64:	0901                	addi	s2,s2,0
    1d66:	0000                	unimp
    1d68:	0301                	addi	t1,t1,0
    1d6a:	0901                	addi	s2,s2,0
    1d6c:	0000                	unimp
    1d6e:	0301                	addi	t1,t1,0
    1d70:	0901                	addi	s2,s2,0
    1d72:	0000                	unimp
    1d74:	0301                	addi	t1,t1,0
    1d76:	0901                	addi	s2,s2,0
    1d78:	0000                	unimp
    1d7a:	0301                	addi	t1,t1,0
    1d7c:	0901                	addi	s2,s2,0
    1d7e:	0000                	unimp
    1d80:	0301                	addi	t1,t1,0
    1d82:	0909                	addi	s2,s2,2
    1d84:	0000                	unimp
    1d86:	0501                	addi	a0,a0,0
    1d88:	0612                	slli	a2,a2,0x4
    1d8a:	00090003          	lb	zero,0(s2)
    1d8e:	0100                	addi	s0,sp,128
    1d90:	0c05                	addi	s8,s8,1
    1d92:	0c090103          	lb	sp,192(s2)
    1d96:	0100                	addi	s0,sp,128
    1d98:	1205                	addi	tp,tp,-31
    1d9a:	0a097f03          	0xa097f03
    1d9e:	0100                	addi	s0,sp,128
    1da0:	0505                	addi	a0,a0,1
    1da2:	0306                	slli	t1,t1,0x1
    1da4:	0901                	addi	s2,s2,0
    1da6:	0002                	c.slli64	zero
    1da8:	0501                	addi	a0,a0,0
    1daa:	0612                	slli	a2,a2,0x4
    1dac:	00090103          	lb	sp,0(s2)
    1db0:	0100                	addi	s0,sp,128
    1db2:	0c05                	addi	s8,s8,1
    1db4:	04097f03          	0x4097f03
    1db8:	0100                	addi	s0,sp,128
    1dba:	0505                	addi	a0,a0,1
    1dbc:	0306                	slli	t1,t1,0x1
    1dbe:	0901                	addi	s2,s2,0
    1dc0:	0002                	c.slli64	zero
    1dc2:	0501                	addi	a0,a0,0
    1dc4:	0612                	slli	a2,a2,0x4
    1dc6:	00090003          	lb	zero,0(s2)
    1dca:	0100                	addi	s0,sp,128
    1dcc:	0505                	addi	a0,a0,1
    1dce:	0306                	slli	t1,t1,0x1
    1dd0:	0902                	c.slli64	s2
    1dd2:	0004                	0x4
    1dd4:	0501                	addi	a0,a0,0
    1dd6:	0310                	addi	a2,sp,384
    1dd8:	0900                	addi	s0,sp,144
    1dda:	0000                	unimp
    1ddc:	0501                	addi	a0,a0,0
    1dde:	0605                	addi	a2,a2,1
    1de0:	00090003          	lb	zero,0(s2)
    1de4:	0100                	addi	s0,sp,128
    1de6:	0905                	addi	s2,s2,1
    1de8:	0200                	addi	s0,sp,256
    1dea:	0304                	addi	s1,sp,384
    1dec:	0306                	slli	t1,t1,0x1
    1dee:	0902                	c.slli64	s2
    1df0:	0004                	0x4
    1df2:	0501                	addi	a0,a0,0
    1df4:	001f 0402 0603      	0x6030402001f
    1dfa:	00090003          	lb	zero,0(s2)
    1dfe:	0100                	addi	s0,sp,128
    1e00:	1905                	addi	s2,s2,-31
    1e02:	0200                	addi	s0,sp,256
    1e04:	0304                	addi	s1,sp,384
    1e06:	06090003          	lb	zero,96(s2)
    1e0a:	0100                	addi	s0,sp,128
    1e0c:	1705                	addi	a4,a4,-31
    1e0e:	0200                	addi	s0,sp,256
    1e10:	0304                	addi	s1,sp,384
    1e12:	0306                	slli	t1,t1,0x1
    1e14:	097e                	slli	s2,s2,0x1f
    1e16:	0006                	c.slli	zero,0x1
    1e18:	0501                	addi	a0,a0,0
    1e1a:	0010                	0x10
    1e1c:	0402                	c.slli64	s0
    1e1e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1e22:	0000                	unimp
    1e24:	0501                	addi	a0,a0,0
    1e26:	0005                	c.nop	1
    1e28:	0402                	c.slli64	s0
    1e2a:	00030603          	lb	a2,0(t1)
    1e2e:	0209                	addi	tp,tp,2
    1e30:	0100                	addi	s0,sp,128
    1e32:	0905                	addi	s2,s2,1
    1e34:	0200                	addi	s0,sp,256
    1e36:	0304                	addi	s1,sp,384
    1e38:	0306                	slli	t1,t1,0x1
    1e3a:	0909                	addi	s2,s2,2
    1e3c:	0004                	0x4
    1e3e:	0501                	addi	a0,a0,0
    1e40:	0402001b          	0x402001b
    1e44:	097e0303          	lb	t1,151(t3) # 1a097 <_stack_start+0xa097>
    1e48:	0000                	unimp
    1e4a:	0501                	addi	a0,a0,0
    1e4c:	0010                	0x10
    1e4e:	0402                	c.slli64	s0
    1e50:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1e54:	0000                	unimp
    1e56:	0501                	addi	a0,a0,0
    1e58:	0009                	c.nop	2
    1e5a:	0402                	c.slli64	s0
    1e5c:	09090303          	lb	t1,144(s2)
    1e60:	000c                	0xc
    1e62:	0501                	addi	a0,a0,0
    1e64:	0026                	c.slli	zero,0x9
    1e66:	0402                	c.slli64	s0
    1e68:	00030603          	lb	a2,0(t1)
    1e6c:	0009                	c.nop	2
    1e6e:	0100                	addi	s0,sp,128
    1e70:	2005                	jal	1e90 <random_keys+0x4e8>
    1e72:	0200                	addi	s0,sp,256
    1e74:	0304                	addi	s1,sp,384
    1e76:	06090003          	lb	zero,96(s2)
    1e7a:	0100                	addi	s0,sp,128
    1e7c:	1f05                	addi	t5,t5,-31
    1e7e:	0200                	addi	s0,sp,256
    1e80:	0304                	addi	s1,sp,384
    1e82:	0306                	slli	t1,t1,0x1
    1e84:	097e                	slli	s2,s2,0x1f
    1e86:	0004                	0x4
    1e88:	0501                	addi	a0,a0,0
    1e8a:	0014                	0x14
    1e8c:	0402                	c.slli64	s0
    1e8e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1e92:	0000                	unimp
    1e94:	0501                	addi	a0,a0,0
    1e96:	0005                	c.nop	1
    1e98:	0402                	c.slli64	s0
    1e9a:	00030603          	lb	a2,0(t1)
    1e9e:	0009                	c.nop	2
    1ea0:	0100                	addi	s0,sp,128
    1ea2:	0905                	addi	s2,s2,1
    1ea4:	0200                	addi	s0,sp,256
    1ea6:	0304                	addi	s1,sp,384
    1ea8:	0306                	slli	t1,t1,0x1
    1eaa:	0909                	addi	s2,s2,2
    1eac:	0004                	0x4
    1eae:	0501                	addi	a0,a0,0
    1eb0:	001f 0402 0303      	0x3030402001f
    1eb6:	097e                	slli	s2,s2,0x1f
    1eb8:	0000                	unimp
    1eba:	0501                	addi	a0,a0,0
    1ebc:	0014                	0x14
    1ebe:	0402                	c.slli64	s0
    1ec0:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ec4:	0000                	unimp
    1ec6:	0501                	addi	a0,a0,0
    1ec8:	0009                	c.nop	2
    1eca:	0402                	c.slli64	s0
    1ecc:	09090303          	lb	t1,144(s2)
    1ed0:	000c                	0xc
    1ed2:	0501                	addi	a0,a0,0
    1ed4:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1ed8:	00030603          	lb	a2,0(t1)
    1edc:	0009                	c.nop	2
    1ede:	0100                	addi	s0,sp,128
    1ee0:	1d05                	addi	s10,s10,-31
    1ee2:	0200                	addi	s0,sp,256
    1ee4:	0304                	addi	s1,sp,384
    1ee6:	06090003          	lb	zero,96(s2)
    1eea:	0100                	addi	s0,sp,128
    1eec:	1f05                	addi	t5,t5,-31
    1eee:	0200                	addi	s0,sp,256
    1ef0:	0304                	addi	s1,sp,384
    1ef2:	0306                	slli	t1,t1,0x1
    1ef4:	097e                	slli	s2,s2,0x1f
    1ef6:	0004                	0x4
    1ef8:	0501                	addi	a0,a0,0
    1efa:	0014                	0x14
    1efc:	0402                	c.slli64	s0
    1efe:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1f02:	0000                	unimp
    1f04:	0501                	addi	a0,a0,0
    1f06:	0005                	c.nop	1
    1f08:	0402                	c.slli64	s0
    1f0a:	00030603          	lb	a2,0(t1)
    1f0e:	0009                	c.nop	2
    1f10:	0100                	addi	s0,sp,128
    1f12:	0905                	addi	s2,s2,1
    1f14:	0200                	addi	s0,sp,256
    1f16:	0304                	addi	s1,sp,384
    1f18:	0306                	slli	t1,t1,0x1
    1f1a:	0909                	addi	s2,s2,2
    1f1c:	000c                	0xc
    1f1e:	0501                	addi	a0,a0,0
    1f20:	0022                	c.slli	zero,0x8
    1f22:	0402                	c.slli64	s0
    1f24:	00030603          	lb	a2,0(t1)
    1f28:	0009                	c.nop	2
    1f2a:	0100                	addi	s0,sp,128
    1f2c:	1c05                	addi	s8,s8,-31
    1f2e:	0200                	addi	s0,sp,256
    1f30:	0304                	addi	s1,sp,384
    1f32:	06090003          	lb	zero,96(s2)
    1f36:	0100                	addi	s0,sp,128
    1f38:	2105                	jal	2358 <_min_stack+0x358>
    1f3a:	0200                	addi	s0,sp,256
    1f3c:	0304                	addi	s1,sp,384
    1f3e:	0306                	slli	t1,t1,0x1
    1f40:	097e                	slli	s2,s2,0x1f
    1f42:	0004                	0x4
    1f44:	0501                	addi	a0,a0,0
    1f46:	0014                	0x14
    1f48:	0402                	c.slli64	s0
    1f4a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1f4e:	0000                	unimp
    1f50:	0501                	addi	a0,a0,0
    1f52:	0005                	c.nop	1
    1f54:	0402                	c.slli64	s0
    1f56:	00030603          	lb	a2,0(t1)
    1f5a:	0009                	c.nop	2
    1f5c:	0100                	addi	s0,sp,128
    1f5e:	0306                	slli	t1,t1,0x1
    1f60:	0908                	addi	a0,sp,144
    1f62:	0004                	0x4
    1f64:	0501                	addi	a0,a0,0
    1f66:	0612                	slli	a2,a2,0x4
    1f68:	00090003          	lb	zero,0(s2)
    1f6c:	0100                	addi	s0,sp,128
    1f6e:	1305                	addi	t1,t1,-31
    1f70:	08090103          	lb	sp,128(s2)
    1f74:	0100                	addi	s0,sp,128
    1f76:	1205                	addi	tp,tp,-31
    1f78:	08090103          	lb	sp,128(s2)
    1f7c:	0100                	addi	s0,sp,128
    1f7e:	1305                	addi	t1,t1,-31
    1f80:	04097f03          	0x4097f03
    1f84:	0100                	addi	s0,sp,128
    1f86:	1205                	addi	tp,tp,-31
    1f88:	04097f03          	0x4097f03
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	0505                	addi	a0,a0,1
    1f90:	0306                	slli	t1,t1,0x1
    1f92:	0901                	addi	s2,s2,0
    1f94:	0002                	c.slli64	zero
    1f96:	0501                	addi	a0,a0,0
    1f98:	00030613          	mv	a2,t1
    1f9c:	0009                	c.nop	2
    1f9e:	0100                	addi	s0,sp,128
    1fa0:	1205                	addi	tp,tp,-31
    1fa2:	02090103          	lb	sp,32(s2)
    1fa6:	0100                	addi	s0,sp,128
    1fa8:	02090903          	lb	s2,32(s2)
    1fac:	0100                	addi	s0,sp,128
    1fae:	1305                	addi	t1,t1,-31
    1fb0:	08097603          	0x8097603
    1fb4:	0100                	addi	s0,sp,128
    1fb6:	0505                	addi	a0,a0,1
    1fb8:	0306                	slli	t1,t1,0x1
    1fba:	0901                	addi	s2,s2,0
    1fbc:	0002                	c.slli64	zero
    1fbe:	0301                	addi	t1,t1,0
    1fc0:	0909                	addi	s2,s2,2
    1fc2:	0000                	unimp
    1fc4:	0501                	addi	a0,a0,0
    1fc6:	0612                	slli	a2,a2,0x4
    1fc8:	00090003          	lb	zero,0(s2)
    1fcc:	0100                	addi	s0,sp,128
    1fce:	0505                	addi	a0,a0,1
    1fd0:	0306                	slli	t1,t1,0x1
    1fd2:	0901                	addi	s2,s2,0
    1fd4:	0002                	c.slli64	zero
    1fd6:	0501                	addi	a0,a0,0
    1fd8:	00030613          	mv	a2,t1
    1fdc:	0009                	c.nop	2
    1fde:	0100                	addi	s0,sp,128
    1fe0:	0505                	addi	a0,a0,1
    1fe2:	0306                	slli	t1,t1,0x1
    1fe4:	0901                	addi	s2,s2,0
    1fe6:	0014                	0x14
    1fe8:	0501                	addi	a0,a0,0
    1fea:	0612                	slli	a2,a2,0x4
    1fec:	00090003          	lb	zero,0(s2)
    1ff0:	0100                	addi	s0,sp,128
    1ff2:	1a05                	addi	s4,s4,-31
    1ff4:	04091b03          	lh	s6,64(s2)
    1ff8:	0100                	addi	s0,sp,128
    1ffa:	1205                	addi	tp,tp,-31
    1ffc:	04096503          	0x4096503
    2000:	0100                	addi	s0,sp,128
    2002:	0505                	addi	a0,a0,1
    2004:	0306                	slli	t1,t1,0x1
    2006:	00020913          	mv	s2,tp
    200a:	0501                	addi	a0,a0,0
    200c:	0310                	addi	a2,sp,384
    200e:	0900                	addi	s0,sp,144
    2010:	0000                	unimp
    2012:	0501                	addi	a0,a0,0
    2014:	0612                	slli	a2,a2,0x4
    2016:	00096d03          	0x96d03
    201a:	0100                	addi	s0,sp,128
    201c:	1a05                	addi	s4,s4,-31
    201e:	02091b03          	lh	s6,32(s2)
    2022:	0100                	addi	s0,sp,128
    2024:	0505                	addi	a0,a0,1
    2026:	04097803          	0x4097803
    202a:	0100                	addi	s0,sp,128
    202c:	0905                	addi	s2,s2,1
    202e:	0306                	slli	t1,t1,0x1
    2030:	0901                	addi	s2,s2,0
    2032:	0004                	0x4
    2034:	0501                	addi	a0,a0,0
    2036:	0003060b          	0x3060b
    203a:	0009                	c.nop	2
    203c:	0100                	addi	s0,sp,128
    203e:	2705                	jal	275e <_min_stack+0x75e>
    2040:	02090003          	lb	zero,32(s2)
    2044:	0100                	addi	s0,sp,128
    2046:	0b05                	addi	s6,s6,1
    2048:	04090003          	lb	zero,64(s2)
    204c:	0100                	addi	s0,sp,128
    204e:	0d05                	addi	s10,s10,1
    2050:	0306                	slli	t1,t1,0x1
    2052:	0902                	c.slli64	s2
    2054:	000a                	c.slli	zero,0x2
    2056:	0501                	addi	a0,a0,0
    2058:	061a                	slli	a2,a2,0x6
    205a:	00090003          	lb	zero,0(s2)
    205e:	0100                	addi	s0,sp,128
    2060:	0d05                	addi	s10,s10,1
    2062:	0306                	slli	t1,t1,0x1
    2064:	0902                	c.slli64	s2
    2066:	000a                	c.slli	zero,0x2
    2068:	0501                	addi	a0,a0,0
    206a:	0305                	addi	t1,t1,1
    206c:	0909                	addi	s2,s2,2
    206e:	0000                	unimp
    2070:	0501                	addi	a0,a0,0
    2072:	0601                	addi	a2,a2,0
    2074:	00090103          	lb	sp,0(s2)
    2078:	0100                	addi	s0,sp,128
    207a:	0d05                	addi	s10,s10,1
    207c:	0200                	addi	s0,sp,256
    207e:	0204                	addi	s1,sp,256
    2080:	0306                	slli	t1,t1,0x1
    2082:	0979                	addi	s2,s2,30
    2084:	0018                	0x18
    2086:	0501                	addi	a0,a0,0
    2088:	001a                	c.slli	zero,0x6
    208a:	0402                	c.slli64	s0
    208c:	0602                	c.slli64	a2
    208e:	00090003          	lb	zero,0(s2)
    2092:	0100                	addi	s0,sp,128
    2094:	1805                	addi	a6,a6,-31
    2096:	0200                	addi	s0,sp,256
    2098:	0204                	addi	s1,sp,256
    209a:	0306                	slli	t1,t1,0x1
    209c:	0978                	addi	a4,sp,156
    209e:	0002                	c.slli64	zero
    20a0:	0501                	addi	a0,a0,0
    20a2:	0010                	0x10
    20a4:	0402                	c.slli64	s0
    20a6:	0302                	c.slli64	t1
    20a8:	0900                	addi	s0,sp,144
    20aa:	0000                	unimp
    20ac:	0501                	addi	a0,a0,0
    20ae:	0005                	c.nop	1
    20b0:	0402                	c.slli64	s0
    20b2:	0602                	c.slli64	a2
    20b4:	02090003          	lb	zero,32(s2)
    20b8:	0100                	addi	s0,sp,128
    20ba:	0609                	addi	a2,a2,2
    20bc:	0000                	unimp
    20be:	0101                	addi	sp,sp,0
    20c0:	0150                	addi	a2,sp,132
    20c2:	0000                	unimp
    20c4:	001d0003          	lb	zero,1(s10)
    20c8:	0000                	unimp
    20ca:	0101                	addi	sp,sp,0
    20cc:	000d0efb          	0xd0efb
    20d0:	0101                	addi	sp,sp,0
    20d2:	0101                	addi	sp,sp,0
    20d4:	0000                	unimp
    20d6:	0100                	addi	s0,sp,128
    20d8:	0000                	unimp
    20da:	0001                	nop
    20dc:	30747263          	bgeu	s0,t2,23e0 <_min_stack+0x3e0>
    20e0:	532e                	lw	t1,232(sp)
    20e2:	0000                	unimp
    20e4:	0000                	unimp
    20e6:	0000                	unimp
    20e8:	0205                	addi	tp,tp,1
    20ea:	0c48                	addi	a0,sp,532
    20ec:	0000                	unimp
    20ee:	0315                	addi	t1,t1,5
    20f0:	0904                	addi	s1,sp,144
    20f2:	0004                	0x4
    20f4:	0301                	addi	t1,t1,0
    20f6:	0901                	addi	s2,s2,0
    20f8:	0004                	0x4
    20fa:	0301                	addi	t1,t1,0
    20fc:	0901                	addi	s2,s2,0
    20fe:	0002                	c.slli64	zero
    2100:	0301                	addi	t1,t1,0
    2102:	0901                	addi	s2,s2,0
    2104:	0002                	c.slli64	zero
    2106:	0301                	addi	t1,t1,0
    2108:	0901                	addi	s2,s2,0
    210a:	0002                	c.slli64	zero
    210c:	0301                	addi	t1,t1,0
    210e:	0901                	addi	s2,s2,0
    2110:	0002                	c.slli64	zero
    2112:	0301                	addi	t1,t1,0
    2114:	0901                	addi	s2,s2,0
    2116:	0002                	c.slli64	zero
    2118:	0301                	addi	t1,t1,0
    211a:	0901                	addi	s2,s2,0
    211c:	0002                	c.slli64	zero
    211e:	0301                	addi	t1,t1,0
    2120:	0901                	addi	s2,s2,0
    2122:	0002                	c.slli64	zero
    2124:	0301                	addi	t1,t1,0
    2126:	0901                	addi	s2,s2,0
    2128:	0002                	c.slli64	zero
    212a:	0301                	addi	t1,t1,0
    212c:	0901                	addi	s2,s2,0
    212e:	0002                	c.slli64	zero
    2130:	0301                	addi	t1,t1,0
    2132:	0901                	addi	s2,s2,0
    2134:	0002                	c.slli64	zero
    2136:	0301                	addi	t1,t1,0
    2138:	0901                	addi	s2,s2,0
    213a:	0002                	c.slli64	zero
    213c:	0301                	addi	t1,t1,0
    213e:	0901                	addi	s2,s2,0
    2140:	0002                	c.slli64	zero
    2142:	0301                	addi	t1,t1,0
    2144:	0901                	addi	s2,s2,0
    2146:	0002                	c.slli64	zero
    2148:	0301                	addi	t1,t1,0
    214a:	0901                	addi	s2,s2,0
    214c:	0002                	c.slli64	zero
    214e:	0301                	addi	t1,t1,0
    2150:	0901                	addi	s2,s2,0
    2152:	0002                	c.slli64	zero
    2154:	0301                	addi	t1,t1,0
    2156:	0901                	addi	s2,s2,0
    2158:	0002                	c.slli64	zero
    215a:	0301                	addi	t1,t1,0
    215c:	0901                	addi	s2,s2,0
    215e:	0002                	c.slli64	zero
    2160:	0301                	addi	t1,t1,0
    2162:	0901                	addi	s2,s2,0
    2164:	0002                	c.slli64	zero
    2166:	0301                	addi	t1,t1,0
    2168:	0901                	addi	s2,s2,0
    216a:	0002                	c.slli64	zero
    216c:	0301                	addi	t1,t1,0
    216e:	0901                	addi	s2,s2,0
    2170:	0002                	c.slli64	zero
    2172:	0301                	addi	t1,t1,0
    2174:	0901                	addi	s2,s2,0
    2176:	0002                	c.slli64	zero
    2178:	0301                	addi	t1,t1,0
    217a:	0901                	addi	s2,s2,0
    217c:	0002                	c.slli64	zero
    217e:	0301                	addi	t1,t1,0
    2180:	0901                	addi	s2,s2,0
    2182:	0002                	c.slli64	zero
    2184:	0301                	addi	t1,t1,0
    2186:	0901                	addi	s2,s2,0
    2188:	0002                	c.slli64	zero
    218a:	0301                	addi	t1,t1,0
    218c:	0901                	addi	s2,s2,0
    218e:	0002                	c.slli64	zero
    2190:	0301                	addi	t1,t1,0
    2192:	0901                	addi	s2,s2,0
    2194:	0002                	c.slli64	zero
    2196:	0301                	addi	t1,t1,0
    2198:	0901                	addi	s2,s2,0
    219a:	0002                	c.slli64	zero
    219c:	0301                	addi	t1,t1,0
    219e:	0901                	addi	s2,s2,0
    21a0:	0002                	c.slli64	zero
    21a2:	0301                	addi	t1,t1,0
    21a4:	0901                	addi	s2,s2,0
    21a6:	0002                	c.slli64	zero
    21a8:	0301                	addi	t1,t1,0
    21aa:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    21ae:	0301                	addi	t1,t1,0
    21b0:	0906                	slli	s2,s2,0x1
    21b2:	0008                	0x8
    21b4:	0301                	addi	t1,t1,0
    21b6:	0901                	addi	s2,s2,0
    21b8:	0008                	0x8
    21ba:	0301                	addi	t1,t1,0
    21bc:	0902                	c.slli64	s2
    21be:	0008                	0x8
    21c0:	0301                	addi	t1,t1,0
    21c2:	00040903          	lb	s2,0(s0)
    21c6:	0301                	addi	t1,t1,0
    21c8:	0901                	addi	s2,s2,0
    21ca:	0004                	0x4
    21cc:	0301                	addi	t1,t1,0
    21ce:	0901                	addi	s2,s2,0
    21d0:	0002                	c.slli64	zero
    21d2:	0301                	addi	t1,t1,0
    21d4:	0906                	slli	s2,s2,0x1
    21d6:	0004                	0x4
    21d8:	0301                	addi	t1,t1,0
    21da:	0901                	addi	s2,s2,0
    21dc:	0004                	0x4
    21de:	0301                	addi	t1,t1,0
    21e0:	0901                	addi	s2,s2,0
    21e2:	0004                	0x4
    21e4:	0901                	addi	s2,s2,0
    21e6:	0004                	0x4
    21e8:	0100                	addi	s0,sp,128
    21ea:	0001                	nop
    21ec:	0205                	addi	tp,tp,1
    21ee:	0000                	unimp
    21f0:	0000                	unimp
    21f2:	0100cb03          	lbu	s6,16(ra)
    21f6:	7c090103          	lb	sp,1984(s2)
    21fa:	0100                	addi	s0,sp,128
    21fc:	04090403          	lb	s0,64(s2)
    2200:	0100                	addi	s0,sp,128
    2202:	04090403          	lb	s0,64(s2)
    2206:	0100                	addi	s0,sp,128
    2208:	04090403          	lb	s0,64(s2)
    220c:	0100                	addi	s0,sp,128
    220e:	0409                	addi	s0,s0,2
    2210:	0000                	unimp
    2212:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  jal x0, reset_handler
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  jal x0, default_exc_handler
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0xf8>
  jal x0, default_exc_handler
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    for(i=0;i<(length/3);i++) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  b2:	7465                	lui	s0,0xffff9
    asm volatile(
  b4:	6b5f 7965 665f      	0x665f79656b5f
    for(i=0;i<(length/3);i++) {
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
    asm volatile(
  c0:	5f74                	lw	a3,124(a4)
    for(i=0;i<(length/3);i++) {
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
    asm volatile(
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
    for(i=0;i<(length/3);i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
    int line[size_b][size_a + size_b];
  e4:	5f00                	lw	s0,56(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e6:	745f 5f6d 6573      	0x65735f6d745f
    int line[size_b][size_a + size_b];
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x1e2>
  f0:	676e                	flw	fa4,216(sp)
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	6e69                	lui	t3,0x1a
    int pola[size_a];
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	4e5f 6900 736e      	0x736e69004e5f
 106:	7274                	flw	fa3,100(a2)
 108:	6d5f 646f 7000      	0x7000646f6d5f
 10e:	6d796c6f          	jal	s8,96fe4 <_stack_start+0x86fe4>
    int line[size_b][size_a + size_b];
 112:	6c75                	lui	s8,0x1d
    int pola[size_a];
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
    int line[size_b][size_a + size_b];
 11c:	625f 7361 0065      	0x657361625f
    int polb[size_b];
 122:	5f5f 6d74 685f      	0x685f6d745f5f
    int pola[size_a];
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
    int polb[size_b];
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
    int pola[size_a];
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
    int line[size_b][size_a + size_b];
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
    int polb[size_b];
 13a:	7261                	lui	tp,0xffff8
            line[i][j] = 0;
 13c:	5f007367          	0x5f007367
 140:	6b6f6f63          	bltu	t5,s6,7fe <generate_keys>
    for (i = 0; i < size_b; ++i){
 144:	6569                	lui	a0,0x1a
            product[j] = 0;
 146:	5f00                	lw	s0,56(a4)
 148:	735f 6c67 6575      	0x65756c67735f
    for (i = 0; i < size_b; ++i){
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
    array_equ(pola,a,size_a);
 152:	0032                	c.slli	zero,0xc
 154:	665f 616c 7367      	0x7367616c665f
 15a:	5f00                	lw	s0,56(a4)
 15c:	7369                	lui	t1,0xffffa
 15e:	635f 6178 5f00      	0x5f006178635f
 164:	69647473          	csrrci	s0,0x696,8
 168:	006e                	c.slli	zero,0x1b
    array_mod(pola,mod,size_a);
 16a:	625f 6b6c 6973      	0x69736b6c625f
 170:	657a                	flw	fa0,156(sp)
    array_equ(polb,b,size_b);
 172:	7000                	flw	fs0,32(s0)
 174:	6f72                	flw	ft10,28(sp)
 176:	7564                	flw	fs1,108(a0)
 178:	70007463          	bgeu	zero,zero,880 <generate_keys+0x82>
 17c:	64796c6f          	jal	s8,96fc2 <_stack_start+0x86fc2>
    array_mod(polb,mod,size_b);
 180:	7669                	lui	a2,0xffffa
 182:	7000                	flw	fs0,32(s0)
 184:	66796c6f          	jal	s8,96fea <_stack_start+0x86fea>
    if(star_mult == 1){
 188:	5f00                	lw	s0,56(a4)
 18a:	62747663          	bgeu	s0,t2,7b6 <ext_euclid+0x1cc>
 18e:	6675                	lui	a2,0x1d
 190:	5f00                	lw	s0,56(a4)
 192:	7366666f          	jal	a2,668c8 <_stack_start+0x568c8>
 196:	7465                	lui	s0,0xffff9
 198:	5f00                	lw	s0,56(a4)
 19a:	626d                	lui	tp,0x1b
 19c:	6f747273          	csrrci	tp,0x6f7,8
 1a0:	5f736377          	0x5f736377
        for (j = size_b -1; j >= 0; j = j-1){
 1a4:	74617473          	csrrci	s0,0x746,2
            for (k = size_a-1; k >= 0; k = k-1 ){
 1a8:	0065                	c.nop	25
            product[j] = 0;
 1aa:	6d5f 7262 656c      	0x656c72626d5f
            line[i][j] = 0;
 1b0:	5f6e                	lw	t5,248(sp)
 1b2:	74617473          	csrrci	s0,0x746,2
            product[j] = 0;
 1b6:	0065                	c.nop	25
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	665f 616e 6772      	0x6772616e665f
 1be:	746e0073          	0x746e0073
    for (i = 0; i < size_b; ++i){
 1c2:	7572                	flw	fa0,60(sp)
 1c4:	645f 6365 7965      	0x79656365645f
        for(j = 0; j < size_a + size_b -1; ++j){
 1ca:	7470                	flw	fa2,108(s0)
    if(star_mult == 1){
 1cc:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 1ce:	6e66                	flw	ft8,88(sp)
 1d0:	735f0073          	0x735f0073
    for (i = 0; i < size_b; ++i){
 1d4:	6769                	lui	a4,0x1a
 1d6:	006e                	c.slli	zero,0x1b
 1d8:	665f 6f6c 6b63      	0x6b636f6c665f
 1de:	745f 5f00 7473      	0x74735f00745f
    for(j = 0; j < size_a + size_b -1; ++j){
 1e4:	6564                	flw	fs1,76(a0)
    array_mod(product,mod,(size_a+size_b-1));
 1e6:	7272                	flw	ft4,60(sp)
 1e8:	5f00                	lw	s0,56(a4)
 1ea:	6942                	flw	fs2,16(sp)
 1ec:	746e6967          	0x746e6967
 1f0:	5f00                	lw	s0,56(a4)
 1f2:	6d6d6167          	0x6d6d6167
}
 1f6:	5f61                	li	t5,-8
 1f8:	6e676973          	csrrsi	s2,0x6e6,14
 1fc:	006d6167          	0x6d6167
 200:	725f 6165 0064      	0x646165725f
 206:	725f 7365 6c75      	0x6c757365725f
 20c:	5f74                	lw	a3,124(a4)
 20e:	5f5f006b          	0x5f5f006b
 212:	6d74                	flw	fa3,92(a0)
 214:	6400                	flw	fs0,8(s0)
 216:	6e65                	lui	t3,0x19
 218:	6d75                	lui	s10,0x1d
 21a:	745f 6d65 0070      	0x706d65745f
                line[size_b-1-j][k] = pola[k]*polb[j];
 220:	5f5f 6377 6268      	0x626863775f5f
 226:	7200                	flw	fs0,32(a2)
 228:	7365                	lui	t1,0xffff9
 22a:	6c75                	lui	s8,0x1d
 22c:	6b74                	flw	fa3,84(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	5f006e6f          	jal	t3,681e <_stack_len+0x281e>
                line[size_b-1-j][k] = pola[k]*polb[j];
 232:	6f647473          	csrrci	s0,0x6f6,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 236:	7475                	lui	s0,0xffffd
 238:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 23a:	6c747663          	bgeu	s0,t2,906 <generate_keys+0x108>
 23e:	6e65                	lui	t3,0x19
 240:	7300                	flw	fs0,32(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 242:	6365                	lui	t1,0x19
 244:	6572                	flw	fa0,28(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	5f74                	lw	a3,124(a4)
 248:	5f79656b          	0x5f79656b
 24c:	7166                	flw	ft2,120(sp)
 24e:	5f00                	lw	s0,56(a4)
 250:	6966                	flw	fs2,88(sp)
 252:	656c                	flw	fa1,76(a0)
 254:	7200                	flw	fs0,32(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	7465                	lui	s0,0xffff9
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 258:	7275                	lui	tp,0xffffd
 25a:	5f6e                	lw	t5,248(sp)
 25c:	6461                	lui	s0,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	7264                	flw	fs1,100(a2)
 260:	7365                	lui	t1,0xffff9
        for (j = size_b -1; j >= 0; j = j-1){
 262:	72003173          	csrrc	sp,0x720,zero
 266:	7465                	lui	s0,0xffff9
 268:	7275                	lui	tp,0xffffd
            line[i][j] = line[i][j] % mod;
 26a:	5f6e                	lw	t5,248(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 26c:	6461                	lui	s0,0x18
 26e:	7264                	flw	fs1,100(a2)
            line[i][j] = line[i][j] % mod;
 270:	7365                	lui	t1,0xffff9
 272:	72003273          	csrrc	tp,0x720,zero
 276:	7465                	lui	s0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 278:	7275                	lui	tp,0xffffd
 27a:	5f6e                	lw	t5,248(sp)
    for (i = 0; i < size_b; ++i){
 27c:	6461                	lui	s0,0x18
 27e:	7264                	flw	fs1,100(a2)
 280:	7365                	lui	t1,0xffff9
 282:	72003373          	csrrc	t1,0x720,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 286:	7465                	lui	s0,0xffff9
            product[j] += line[i][j];
 288:	7275                	lui	tp,0xffffd
 28a:	5f6e                	lw	t5,248(sp)
 28c:	6461                	lui	s0,0x18
        for(i = 0; i < size_b; ++i){
 28e:	7264                	flw	fs1,100(a2)
            product[j] += line[i][j];
 290:	7365                	lui	t1,0xffff9
 292:	5f003473          	csrrc	s0,0x5f0,zero
 296:	696e                	flw	fs2,216(sp)
 298:	0073626f          	jal	tp,36a9e <_stack_start+0x26a9e>
        for(i = 0; i < size_b; ++i){
 29c:	6572                	flw	fa0,28(sp)
 29e:	7574                	flw	fa3,108(a0)
    for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	6e72                	flw	ft8,28(sp)
 2a2:	615f 6464 6572      	0x65726464615f
        for(i = 0; i < size_b; ++i){
 2a8:	00367373          	csrrci	t1,fcsr,12
    int line[size_b][size_a + size_b];
 2ac:	6572                	flw	fa0,28(sp)
 2ae:	7574                	flw	fa3,108(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2b0:	6e72                	flw	ft8,28(sp)
 2b2:	615f 6464 6572      	0x65726464615f
 2b8:	00377373          	csrrci	t1,fcsr,14
    int line[size_b][size_a + size_b];
 2bc:	726f6873          	csrrsi	a6,0x726,30
 2c0:	2074                	fld	fa3,192(s0)
 2c2:	6e75                	lui	t3,0x1d
 2c4:	6e676973          	csrrsi	s2,0x6e6,14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c8:	6465                	lui	s0,0x19
 2ca:	6920                	flw	fs0,80(a0)
 2cc:	746e                	flw	fs0,248(sp)
 2ce:	5f00                	lw	s0,56(a4)
 2d0:	7461                	lui	s0,0xffff8
 2d2:	7865                	lui	a6,0xffff9
 2d4:	7469                	lui	s0,0xffffa
 2d6:	0030                	addi	a2,sp,8
    int line[size_b][size_a + size_b];
 2d8:	735f 6769 616e      	0x616e6769735f
 2de:	5f6c                	lw	a1,124(a4)
 2e0:	7562                	flw	fa0,56(sp)
 2e2:	0066                	c.slli	zero,0x19
    int pola[size_a];
 2e4:	615f 6373 6974      	0x69746373615f
 2ea:	656d                	lui	a0,0x1b
    int line[size_b][size_a + size_b];
 2ec:	625f 6675 5f00      	0x5f006675625f
    int polb[size_b];
 2f2:	6572                	flw	fa0,28(sp)
 2f4:	746c7573          	csrrci	a0,0x746,24
    int pola[size_a];
 2f8:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 2fa:	775f 6863 7200      	0x72006863775f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 300:	7365                	lui	t1,0xffff9
    int line[size_b][size_a + size_b];
 302:	0031                	c.nop	12
 304:	746e6977          	0x746e6977
    int pola[size_a];
 308:	745f 6700 6e65      	0x6e656700745f
    for (i = 0; i < size_b; ++i){
 30e:	7265                	lui	tp,0xffff9
 310:	7461                	lui	s0,0xffff8
 312:	5f65                	li	t5,-7
            product2[j] = 0;
 314:	7379656b          	0x7379656b
 318:	5f00                	lw	s0,56(a4)
 31a:	625f 6975 746c      	0x746c6975625f
    array_equ(pola,a,size_a);
 320:	6e69                	lui	t3,0x1a
 322:	6d5f 6d65 7063      	0x70636d656d5f
 328:	0079                	c.nop	30
 32a:	6c5f 636f 006b      	0x6b636f6c5f
    array_equ(polb,b,size_b);
 330:	544e                	lw	s0,240(sp)
 332:	5552                	lw	a0,52(sp)
 334:	345f 5f38 6962      	0x69625f38345f
    if(star_mult == 1){
 33a:	4d74                	lw	a3,92(a0)
 33c:	632e                	flw	ft6,200(sp)
 33e:	7000                	flw	fs0,32(s0)
 340:	6f72                	flw	ft10,28(sp)
 342:	7564                	flw	fs1,108(a0)
 344:	00327463          	bgeu	tp,gp,34c <polymult2+0xa2>
 348:	7865                	lui	a6,0xffff9
        for (j = size_b -1; j >= 0; j = j-1){
 34a:	5f74                	lw	a3,124(a4)
 34c:	7565                	lui	a0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 34e:	64696c63          	bltu	s2,t1,9a6 <generate_keys+0x1a8>
            product2[j] = 0;
 352:	5f00                	lw	s0,56(a4)
 354:	74697277          	0x74697277
            line[i][j] = 0;
 358:	0065                	c.nop	25
 35a:	5f5f 6d74 795f      	0x795f6d745f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 360:	6165                	addi	sp,sp,112
 362:	0072                	c.slli	zero,0x1c
 364:	6f70                	flw	fa2,92(a4)
 366:	626c                	flw	fa1,68(a2)
    for (i = 0; i < size_b; ++i){
 368:	7200                	flw	fs0,32(a2)
 36a:	6e61                	lui	t3,0x18
 36c:	6f64                	flw	fs1,92(a4)
 36e:	5f6d                	li	t5,-5
        for(j = 0; j < size_a + size_b -1; ++j){
 370:	6176                	flw	ft2,92(sp)
 372:	006c                	addi	a1,sp,12
                line[size_b-1-j][k] = pola[k]*polb[j];
 374:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 37a:	6c00636f          	jal	t1,6a3a <_stack_len+0x2a3a>
 37e:	20676e6f          	jal	t3,76584 <_stack_start+0x66584>
 382:	6f64                	flw	fs1,92(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 384:	6275                	lui	tp,0x1d
                line[size_b-1-j][k] = pola[k]*polb[j];
 386:	656c                	flw	fa1,76(a0)
 388:	5f00                	lw	s0,56(a4)
 38a:	656e                	flw	fa0,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	7478                	flw	fa4,108(s0)
 38e:	0066                	c.slli	zero,0x19
        for (j = size_b -1; j >= 0; j = j-1){
 390:	7261                	lui	tp,0xffff8
 392:	6172                	flw	ft2,28(sp)
 394:	5f79                	li	t5,-2
 396:	7165                	addi	sp,sp,-400
 398:	0075                	c.nop	29
        for(j=0;j<size_a+size_b-1;++j){
 39a:	656d                	lui	a0,0x1b
    for(i=0;i<size_b;++i){
 39c:	67617373          	csrrci	t1,0x676,2
 3a0:	0065                	c.nop	25
 3a2:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 3a8:	72006e6f          	jal	t3,6ac8 <_stack_len+0x2ac8>
        for(j=0;j<size_a+size_b-1;++j){
 3ac:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ae:	7275                	lui	tp,0xffffd
 3b0:	5f6e                	lw	t5,248(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3b2:	6461                	lui	s0,0x18
 3b4:	7264                	flw	fs1,100(a2)
 3b6:	7365                	lui	t1,0xffff9
 3b8:	5f003573          	csrrc	a0,0x5f0,zero
 3bc:	7461                	lui	s0,0xffff8
 3be:	7865                	lui	a6,0xffff9
 3c0:	7469                	lui	s0,0xffffa
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c2:	7300                	flw	fs0,32(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c4:	6275                	lui	tp,0x1d
 3c6:	6174706f          	j	481dc <_stack_start+0x381dc>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	6772                	flw	fa4,28(sp)
 3cc:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	735f 6964 6964      	0x69646964735f
 3d4:	696e                	flw	fs2,216(sp)
            product2[j] += line[i][j];
 3d6:	0074                	addi	a3,sp,12
 3d8:	6f5f 6666 745f      	0x745f66666f5f
 3de:	4500                	lw	s0,8(a0)
 3e0:	636e                	flw	ft6,216(sp)
 3e2:	4d5f 7365 6173      	0x617373654d5f
        for(j=0;j<size_a+size_b-1;++j){
 3e8:	63006567          	0x63006567
    for(i=0;i<size_b;++i){
 3ec:	72746e6f          	jal	t3,47312 <_stack_start+0x37312>
}
 3f0:	00526c6f          	jal	s8,26bf4 <_stack_start+0x16bf4>
 3f4:	665f 6572 6c65      	0x6c656572665f
 3fa:	7369                	lui	t1,0xffffa
 3fc:	0074                	addi	a3,sp,12
 3fe:	6972                	flw	fs2,28(sp)
 400:	676e                	flw	fa4,216(sp)
 402:	705f 6c6f 0079      	0x796c6f705f
 408:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 40e:	4552                	lw	a0,20(sp)
 410:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
 414:	5649                	li	a2,-14
 416:	5f45                	li	t5,-15
 418:	0054                	addi	a3,sp,4
    int v[size_N];
 41a:	6974                	flw	fa3,84(a0)
 41c:	315f 7400 5f69      	0x5f697400315f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 422:	0032                	c.slli	zero,0xc
 424:	6e75                	lui	t3,0x1d
 426:	6e676973          	csrrsi	s2,0x6e6,14
 42a:	6465                	lui	s0,0x19
 42c:	6320                	flw	fs0,64(a4)
 42e:	6168                	flw	fa0,68(a0)
 430:	0072                	c.slli	zero,0x1c
 432:	6971                	lui	s2,0x1c
 434:	315f 5f00 656e      	0x656e5f00315f
 43a:	685f0077          	0x685f0077
 43e:	655f 7272 6f6e      	0x6f6e7272655f
    int v[size_N];
 444:	7300                	flw	fs0,32(a4)
    int q[size_N];
 446:	6f68                	flw	fa0,92(a4)
 448:	7472                	flw	fs0,60(sp)
 44a:	6920                	flw	fs0,80(a0)
    int num_temp[size_N];
 44c:	746e                	flw	fs0,248(sp)
 44e:	5f00                	lw	s0,56(a4)
    int denum_temp[size_D];
 450:	745f 5f6d 6479      	0x64795f6d745f
 456:	7961                	lui	s2,0xffff8
    int num_temp[size_N];
 458:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 45a:	735f 7562 0066      	0x667562735f
 460:	665f 616c 7367      	0x7367616c665f
    array_equ(num_temp,num,size_N);
 466:	0032                	c.slli	zero,0xc
 468:	695f 626f 0073      	0x73626f695f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 46e:	5f5f 4946 454c      	0x454c49465f5f
    array_equ(num_temp,num,size_N);
 474:	5f00                	lw	s0,56(a4)
    array_mod(num_temp,mod,size_N);
 476:	626d                	lui	tp,0x1b
 478:	74617473          	csrrci	s0,0x746,2
 47c:	5f65                	li	t5,-7
    int denum_temp[size_D];
 47e:	0074                	addi	a3,sp,12
    array_equ(denum_temp,denum,size_D);
 480:	5f5f 4673 4c49      	0x4c4946735f5f
 486:	0045                	c.nop	17
    array_mod(denum_temp,mod,size_D);
 488:	6d5f 7362 6174      	0x617473626d5f
 48e:	6574                	flw	fa3,76(a0)
    for (i = 0; i < size_N; ++i){
 490:	5f00                	lw	s0,56(a4)
 492:	6172                	flw	ft2,28(sp)
 494:	646e                	flw	fs0,216(sp)
    for (i = size_D-1; i >= 0; i = i-1){
 496:	6e5f 7865 0074      	0x7478656e5f
 49c:	6d5f 6c62 6e65      	0x6e656c626d5f
    for (i = 0; i < size_N; ++i){
 4a2:	735f 6174 6574      	0x65746174735f
    for (u = 0; u < mod; ++u){
 4a8:	5f00                	lw	s0,56(a4)
 4aa:	6e69                	lui	t3,0x1a
 4ac:	695f0063          	beq	t5,s5,b2c <ntru_encyrpt+0x3c>
        q[i] = 0;
 4b0:	646e                	flw	fs0,216(sp)
 4b2:	5f00                	lw	s0,56(a4)
 4b4:	6f6c                	flw	fa1,92(a4)
 4b6:	656c6163          	bltu	s8,s6,af8 <ntru_encyrpt+0x8>
 4ba:	5f00                	lw	s0,56(a4)
 4bc:	635f 656c 6e61      	0x6e61656c635f
    for (i = 0; i < size_N; ++i){
 4c2:	7075                	c.lui	zero,0xffffd
 4c4:	5f00                	lw	s0,56(a4)
        if( denum_temp[i] != 0 )
 4c6:	6e75                	lui	t3,0x1d
    for (i = size_D-1; i >= 0; i = i-1){
 4c8:	63657073          	csrci	0x636,10
        if ( (b_N*u)%mod == 1 )
 4cc:	6669                	lui	a2,0x1a
 4ce:	6569                	lui	a0,0x1a
 4d0:	5f64                	lw	s1,124(a4)
 4d2:	6f6c                	flw	fa1,92(a4)
 4d4:	656c6163          	bltu	s8,s6,b16 <ntru_encyrpt+0x26>
    for (u = 0; u < mod; ++u){
 4d8:	695f 666e 006f      	0x6f666e695f
    for (i = size_N-1; i >= 0; i = i-1){
 4de:	6d5f 7861 6477      	0x647778616d5f
 4e4:	725f0073          	0x725f0073
 4e8:	6565                	lui	a0,0x19
    while (d >= d2){
 4ea:	746e                	flw	fs0,248(sp)
 4ec:	7300                	flw	fs0,32(a4)
    array_equ(result,q,size_N);
 4ee:	6174                	flw	fa3,68(a0)
 4f0:	5f72                	lw	t5,60(sp)
 4f2:	756d                	lui	a0,0xffffb
 4f4:	746c                	flw	fa1,108(s0)
 4f6:	5f00                	lw	s0,56(a4)
 4f8:	64656573          	csrrsi	a0,0x646,10
    for(i = size_N; i < (2*size_N); ++i){
 4fc:	7200                	flw	fs0,32(a2)
 4fe:	5f69                	li	t5,-6
        result[i] = num_temp[i-size_N];
 500:	0032                	c.slli	zero,0xc
 502:	5f5f 6f63 6e75      	0x6e756f635f5f
    for(i = size_N; i < (2*size_N); ++i){
 508:	0074                	addi	a3,sp,12
 50a:	5f5f 6176 756c      	0x756c61765f5f
}
 510:	0065                	c.nop	25
 512:	735f 6565 006b      	0x6b6565735f
 518:	6d6f682f          	0x6d6f682f
 51c:	2f65                	jal	cd4 <memcpy+0x16>
 51e:	6f74                	flw	fa3,92(a4)
 520:	6170                	flw	fa2,68(a0)
 522:	636c                	flw	fa1,68(a4)
 524:	7365442f          	0x7365442f
 528:	706f746b          	0x706f746b
 52c:	6f72702f          	0x6f72702f
 530:	656a                	flw	fa0,152(sp)
 532:	656c                	flw	fa1,76(a0)
 534:	2f72                	fld	ft10,280(sp)
        v[(d-d2)] = u*r_d;
 536:	75636c6f          	jal	s8,36c8c <_stack_start+0x26c8c>
 53a:	2f6d                	jal	cf4 <memcpy+0x36>
 53c:	2e35                	jal	878 <generate_keys+0x7a>
 53e:	6f6d                	lui	t5,0x1b
 540:	2b64                	fld	fs1,208(a4)
    array_mod(v,mod,size_N);
 542:	7165                	addi	sp,sp,-400
 544:	0075                	c.nop	29
 546:	665f 6f70 5f73      	0x5f736f70665f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 54c:	0074                	addi	a3,sp,12
 54e:	656c                	flw	fa1,76(a0)
 550:	676e                	flw	fa4,216(sp)
 552:	6874                	flw	fa3,84(s0)
 554:	5f00                	lw	s0,56(a4)
 556:	745f 5f6d 696d      	0x696d5f6d745f
    array_mod(product,mod,size_N);
 55c:	006e                	c.slli	zero,0x1b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 55e:	7570                	flw	fa2,108(a0)
    array_mod(product,mod,size_N);
 560:	6c62                	flw	fs8,24(sp)
        for (i = 0; i < size_N; ++i){
 562:	6369                	lui	t1,0x1a
 564:	6b5f 7965 6100      	0x610079656b5f
    array_mod(num_temp,mod,size_N);
 56a:	7272                	flw	ft4,60(sp)
 56c:	7961                	lui	s2,0xffff8
 56e:	6d5f 646f 5f00      	0x5f00646f6d5f
        for(i = 0; i < size_N; ++i){
 574:	74727473          	csrrci	s0,0x747,4
 578:	6c5f6b6f          	jal	s6,f743c <_stack_start+0xe743c>
    array_mod(q,mod,size_N);
 57c:	7361                	lui	t1,0xffff8
 57e:	0074                	addi	a3,sp,12
 580:	665f 746e 7079      	0x7079746e665f
        for (i = size_N-1; i >= 0; i = i-1){
 586:	7365                	lui	t1,0xffff9
 588:	7300                	flw	fs0,32(a4)
 58a:	6365                	lui	t1,0x19
 58c:	6572                	flw	fa0,28(sp)
 58e:	5f74                	lw	a3,124(a4)
 590:	5f79656b          	0x5f79656b
            num_temp[i] = num_temp[i] - product[i];
 594:	7066                	flw	ft0,120(sp)
 596:	5f00                	lw	s0,56(a4)
 598:	6461                	lui	s0,0x18
 59a:	0064                	addi	s1,sp,12
 59c:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5a2:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
 5a6:	315f 5f00 6567      	0x65675f00315f
            q[i] = q[i] + v[i];
 5ac:	6474                	flw	fa3,76(s0)
 5ae:	7461                	lui	s0,0xffff8
 5b0:	5f65                	li	t5,-7
 5b2:	7265                	lui	tp,0xffff9
        for(i = 0; i < size_N; ++i){
 5b4:	0072                	c.slli	zero,0x1c
 5b6:	675f 6f6c 6162      	0x61626f6c675f
            q[i] = q[i] + v[i];
 5bc:	5f6c                	lw	a1,124(a4)
        for(i = 0; i < size_N; ++i){
 5be:	6d69                	lui	s10,0x1a
            if( num_temp[i] != 0 )
 5c0:	7570                	flw	fa2,108(a0)
        for (i = size_N-1; i >= 0; i = i-1){
 5c2:	6572                	flw	fa0,28(sp)
 5c4:	705f 7274 4700      	0x47007274705f
            v[i] = 0;
 5ca:	554e                	lw	a0,240(sp)
 5cc:	4320                	lw	s0,64(a4)
 5ce:	3731                	jal	4da <polydiv+0xc0>
        for (i = 0; i < size_N; ++i){
 5d0:	3920                	fld	fs0,112(a0)
 5d2:	322e                	fld	ft4,232(sp)
 5d4:	302e                	fld	ft0,232(sp)
 5d6:	2d20                	fld	fs0,88(a0)
        result[i] = num_temp[i-size_N];
 5d8:	616d                	addi	sp,sp,240
 5da:	6372                	flw	ft6,28(sp)
 5dc:	3d68                	fld	fa0,248(a0)
 5de:	7672                	flw	fa2,60(sp)
 5e0:	6d693233          	0x6d693233
    for(i = size_N; i < (2*size_N); ++i){
 5e4:	6d2d2063          	0x6d2d2063
 5e8:	6261                	lui	tp,0x18
    int ri_2[size]; // MX-ring poly, a
 5ea:	3d69                	jal	484 <polydiv+0x6a>
 5ec:	6c69                	lui	s8,0x1a
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5ee:	3370                	fld	fa2,224(a4)
    int ri_2[size]; // MX-ring poly, a
 5f0:	2032                	fld	ft0,264(sp)
 5f2:	6d2d                	lui	s10,0xb
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5f4:	646f6d63          	bltu	t5,t1,c4e <reset_handler+0x2>
 5f8:	6c65                	lui	s8,0x19
 5fa:	6d3d                	lui	s10,0xf
 5fc:	6465                	lui	s0,0x19
 5fe:	6e61                	lui	t3,0x18
 600:	2079                	jal	68e <ext_euclid+0xa4>
 602:	6d2d                	lui	s10,0xb
 604:	7574                	flw	fa3,108(a0)
 606:	656e                	flw	fa0,216(sp)
 608:	723d                	lui	tp,0xfffef
 60a:	656b636f          	jal	t1,b6c60 <_stack_start+0xa6c60>
 60e:	2074                	fld	fa3,192(s0)
    int ri_2[size]; // MX-ring poly, a
 610:	672d                	lui	a4,0xb
 612:	2d20                	fld	fs0,88(a0)
 614:	2d20734f          	0x2d20734f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 618:	7666                	flw	fa2,120(sp)
 61a:	7369                	lui	t1,0xffffa
    int ri[size];
 61c:	6269                	lui	tp,0x1a
 61e:	6c69                	lui	s8,0x1a
 620:	7469                	lui	s0,0xffffa
    int ti_1[size]; // ti_1[0] = 1
 622:	3d79                	jal	4c0 <polydiv+0xa6>
 624:	6968                	flw	fa0,84(a0)
 626:	6464                	flw	fs1,76(s0)
    int ti[size];
 628:	6e65                	lui	t3,0x19
 62a:	5f00                	lw	s0,56(a4)
 62c:	6e75                	lui	t3,0x1d
    int qi_1[size];
 62e:	7375                	lui	t1,0xffffd
 630:	6465                	lui	s0,0x19
 632:	725f 6e61 0064      	0x646e61725f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 638:	696c                	flw	fa1,84(a0)
 63a:	656e                	flw	fa0,216(sp)
 63c:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 63e:	00736477          	0x736477
    int temp[size];
 642:	5f5f 6d74 775f      	0x775f6d745f5f
        ti_2[i] = 0;
 648:	6164                	flw	fs1,68(a0)
 64a:	0079                	c.nop	30
 64c:	675f 756c 0065      	0x65756c675f
    array_equ(ri_2,polyR,size);
 652:	6e69                	lui	t3,0x1a
 654:	5f727473          	csrrci	s0,0x5f7,4
 658:	7165                	addi	sp,sp,-400
    array_equ(ri_1,polyf,size);
 65a:	0075                	c.nop	29
 65c:	746e                	flw	fs0,248(sp)
 65e:	7572                	flw	fa0,60(sp)
 660:	655f 636e 7279      	0x7279636e655f
    ti_1[0] = 1;
 666:	7470                	flw	fa2,108(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 668:	5f00                	lw	s0,56(a4)
 66a:	7a697373          	csrrci	t1,0x7a6,18
 66e:	5f65                	li	t5,-7
            ti[i] = ti_2[i] - temp[i];
 670:	0074                	addi	a3,sp,12
 672:	6c5f 3436 5f61      	0x5f6134366c5f
    array_mod(ri_2,mod,size);
 678:	7562                	flw	fa0,56(sp)
 67a:	0066                	c.slli	zero,0x19
 67c:	6564                	flw	fs1,76(a0)
 67e:	756e                	flw	fa0,248(sp)
    array_mod(ri_1,mod,size);
 680:	006d                	c.nop	27
 682:	735f 6769 665f      	0x665f6769735f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 688:	6e75                	lui	t3,0x1d
 68a:	6e5f0063          	beq	t5,t0,d6a <memcpy+0xac>
 68e:	7562                	flw	fa0,56(sp)
 690:	0066                	c.slli	zero,0x19
 692:	755f 756e 6573      	0x6573756e755f
        for (i = N + 1; i < (2 * N + 2); ++i) {
 698:	0064                	addi	s1,sp,12
 69a:	6f70                	flw	fa2,92(a4)
 69c:	796c                	flw	fa1,116(a0)
 69e:	0052                	c.slli	zero,0x14
 6a0:	657a6973          	csrrsi	s2,0x657,20
        for (i = 0; i < N + 1; ++i) {
 6a4:	445f 5f00 745f      	0x745f5f00445f
    array_mod(temp,mod,size);
 6aa:	5f6d                	li	t5,-5
 6ac:	7369                	lui	t1,0xffffa
 6ae:	7364                	flw	fs1,100(a4)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6b0:	0074                	addi	a3,sp,12
 6b2:	6c5f 636f 6c61      	0x6c61636f6c5f
 6b8:	6974                	flw	fa3,84(a0)
 6ba:	656d                	lui	a0,0x1b
 6bc:	625f 6675 5f00      	0x5f006675625f
    array_equ(qi_1,res1,size);
 6c2:	736f6c63          	bltu	t5,s6,dfa <memset+0x5e>
    array_mod(qi_1,mod,size);
 6c6:	0065                	c.nop	25
 6c8:	725f 3834 5f00      	0x5f003834725f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6ce:	626d                	lui	tp,0x1b
 6d0:	6f74                	flw	fa3,92(a4)
 6d2:	735f6377          	0x735f6377
 6d6:	6174                	flw	fa3,68(a0)
 6d8:	6574                	flw	fa3,76(a0)
 6da:	5f00                	lw	s0,56(a4)
    array_equ(temp,res2,size);
 6dc:	3570                	fld	fa2,232(a0)
 6de:	616d0073          	0x616d0073
    array_mod(temp,mod,size);
 6e2:	6e69                	lui	t3,0x1a
 6e4:	5f00                	lw	s0,56(a4)
 6e6:	745f 5f6d 646d      	0x646d5f6d745f
        for (i = 0; i < N + 1; ++i) {
 6ec:	7961                	lui	s2,0xffff8
 6ee:	7300                	flw	fs0,32(a4)
 6f0:	7a69                	lui	s4,0xffffa
    array_mod(ti,mod,size);
 6f2:	5f65                	li	t5,-7
 6f4:	0061                	c.nop	24
 6f6:	657a6973          	csrrsi	s2,0x657,20
array_equ(ri_2,ri_1,size);
 6fa:	625f 6300 7472      	0x74726300625f
 700:	2e30                	fld	fa2,88(a2)
array_equ(ri_1,ri,size);
 702:	4e470053          	0x4e470053
 706:	2055                	jal	7aa <ext_euclid+0x1c0>
 708:	5341                	li	t1,-16
array_equ(ti_2,ti_1,size);
 70a:	3220                	fld	fs0,96(a2)
 70c:	332e                	fld	ft6,232(sp)
 70e:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x96>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	001e                	c.slli	zero,0x7
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00d8                	addi	a4,sp,68
  5a:	0000                	unimp
  5c:	01d2                	slli	gp,gp,0x14
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4250                	lw	a2,4(a2)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0a98                	addi	a4,sp,336
  6c:	0b99                	addi	s7,s7,6
  6e:	944e                	add	s0,s0,s3
  70:	5806                	lw	a6,96(sp)
  72:	0288                	addi	a0,sp,320
  74:	0389                	addi	t2,t2,2
  76:	0795                	addi	a5,a5,5
  78:	0896                	slli	a7,a7,0x5
  7a:	0c9a0997          	auipc	s3,0xc9a0
  jal x0, default_exc_handler
  7e:	01810d9b          	0x1810d9b
  jal x0, reset_handler
  82:	0c42                	slli	s8,s8,0x10
  jal x0, default_exc_handler
  84:	0008                	0x8
  86:	0a00e603          	0xa00e603
  jal x0, default_exc_handler
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    for(i=0;i<(length/3);i++) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
    asm volatile(
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0054                	addi	a3,sp,4
  ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  b0:	0000                	unimp
  b2:	0000                	unimp
    asm volatile(
  b4:	02aa                	slli	t0,t0,0xa
  b6:	0000                	unimp
}
  b8:	0170                	addi	a2,sp,140
    for(i=0;i<(length/3);i++) {
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4650                	lw	a2,12(a2)
    asm volatile(
  c0:	0795                	addi	a5,a5,5
    for(i=0;i<(length/3);i++) {
  c2:	9648                	0x9648
  c4:	9708                	0x9708
  c6:	6209                	lui	tp,0x2
}
  c8:	0288                	addi	a0,sp,320
    asm volatile(
  ca:	0389                	addi	t2,t2,2
  cc:	0492                	slli	s1,s1,0x4
  ce:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
  d2:	0a98                	addi	a4,sp,336
    for(i=0;i<(length/3);i++) {
  d4:	0b99                	addi	s7,s7,6
  d6:	0c9a                	slli	s9,s9,0x6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	01810d9b          	0x1810d9b
  dc:	0c42                	slli	s8,s8,0x10
  de:	0008                	0x8
    int line[size_b][size_a + size_b];
  e0:	0c011603          	lh	a2,192(sp)
  e4:	5002                	0x5002
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e6:	c142                	sw	a6,128(sp)
  e8:	c842                	sw	a6,16(sp)
    int line[size_b][size_a + size_b];
  ea:	c942                	sw	a6,144(sp)
  ec:	d242                	sw	a6,36(sp)
  ee:	d342                	sw	a6,164(sp)
  f0:	d442                	sw	a6,40(sp)
  f2:	d542                	sw	a6,168(sp)
  f4:	d642                	sw	a6,44(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f6:	d742                	sw	a6,172(sp)
  f8:	d842                	sw	a6,48(sp)
    int pola[size_a];
  fa:	d942                	sw	a6,176(sp)
  fc:	da42                	sw	a6,52(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fe:	db42                	sw	a6,180(sp)
 100:	0e4a                	slli	t3,t3,0x12
 102:	0000                	unimp
 104:	0054                	addi	a3,sp,4
 106:	0000                	unimp
 108:	0000                	unimp
    int line[size_b][size_a + size_b];
 10a:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10c:	041a                	slli	s0,s0,0x6
 10e:	0000                	unimp
 110:	01d0                	addi	a2,sp,196
    int line[size_b][size_a + size_b];
 112:	0000                	unimp
    int pola[size_a];
 114:	0e46                	slli	t3,t3,0x11
 116:	4840                	lw	s0,20(s0)
    int line[size_b][size_a + size_b];
 118:	0181                	addi	gp,gp,0
 11a:	0288                	addi	a0,sp,320
 11c:	0389                	addi	t2,t2,2
    int pola[size_a];
 11e:	0c42                	slli	s8,s8,0x10
 120:	0008                	0x8
    int polb[size_b];
 122:	9256                	add	tp,tp,s5
 124:	9304                	0x9304
 126:	9405                	srai	s0,s0,0x21
    int pola[size_a];
 128:	9506                	add	a0,a0,ra
    int polb[size_b];
 12a:	97089607          	0x97089607
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	9809                	andi	s0,s0,-30
    int pola[size_a];
 130:	990a                	add	s2,s2,sp
 132:	9b0c9a0b          	0x9b0c9a0b
    int line[size_b][size_a + size_b];
 136:	020d                	addi	tp,tp,3
 138:	0ad0                	addi	a2,sp,340
    int polb[size_b];
 13a:	020c                	addi	a1,sp,256
            line[i][j] = 0;
 13c:	4240                	lw	s0,4(a2)
 13e:	42c1                	li	t0,16
 140:	42c8                	lw	a0,4(a3)
    for (i = 0; i < size_b; ++i){
 142:	42c9                	li	t0,18
 144:	42d2                	lw	t0,20(sp)
            product[j] = 0;
 146:	42d442d3          	0x42d442d3
 14a:	42d5                	li	t0,21
 14c:	42d6                	lw	t0,84(sp)
    for (i = 0; i < size_b; ++i){
 14e:	42d842d7          	0x42d842d7
    array_equ(pola,a,size_a);
 152:	42d9                	li	t0,22
 154:	42da                	lw	t0,148(sp)
 156:	000e4adb          	0xe4adb
 15a:	0b42                	slli	s6,s6,0x10
 15c:	0054                	addi	a3,sp,4
 15e:	0000                	unimp
 160:	0000                	unimp
 162:	0000                	unimp
 164:	05ea                	slli	a1,a1,0x1a
 166:	0000                	unimp
 168:	0214                	addi	a3,sp,256
    array_mod(pola,mod,size_a);
 16a:	0000                	unimp
 16c:	0e46                	slli	t3,t3,0x11
 16e:	5e50                	lw	a2,60(a2)
 170:	0288                	addi	a0,sp,320
    array_equ(polb,b,size_b);
 172:	0389                	addi	t2,t2,2
 174:	0492                	slli	s1,s1,0x4
 176:	06940593          	addi	a1,s0,105
 17a:	0795                	addi	a5,a5,5
 17c:	0896                	slli	a7,a7,0x5
    array_mod(polb,mod,size_b);
 17e:	0a980997          	auipc	s3,0xa980
 182:	0b99                	addi	s7,s7,6
 184:	0c9a                	slli	s9,s9,0x6
    if(star_mult == 1){
 186:	01810d9b          	0x1810d9b
 18a:	0c42                	slli	s8,s8,0x10
 18c:	0008                	0x8
 18e:	0a012e03          	lw	t3,160(sp)
 192:	020c                	addi	a1,sp,256
 194:	4250                	lw	a2,4(a2)
 196:	42c1                	li	t0,16
 198:	42c8                	lw	a0,4(a3)
 19a:	42c9                	li	t0,18
 19c:	42d2                	lw	t0,20(sp)
 19e:	42d442d3          	0x42d442d3
        for (j = size_b -1; j >= 0; j = j-1){
 1a2:	42d5                	li	t0,21
 1a4:	42d6                	lw	t0,84(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1a6:	42d842d7          	0x42d842d7
            product[j] = 0;
 1aa:	42d9                	li	t0,22
 1ac:	42da                	lw	t0,148(sp)
 1ae:	000e4adb          	0xe4adb
            line[i][j] = 0;
 1b2:	0b42                	slli	s6,s6,0x10
            product[j] = 0;
 1b4:	0054                	addi	a3,sp,4
 1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	0000                	unimp
 1ba:	0000                	unimp
 1bc:	07fe                	slli	a5,a5,0x1f
 1be:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1c0:	02f2                	slli	t0,t0,0x1c
 1c2:	0000                	unimp
 1c4:	0e42                	slli	t3,t3,0x10
 1c6:	03f0                	addi	a2,sp,460
        for(j = 0; j < size_a + size_b -1; ++j){
 1c8:	814c                	0x814c
 1ca:	8801                	andi	s0,s0,0
    if(star_mult == 1){
 1cc:	8902                	jr	s2
        for (j = size_b -1; j >= 0; j = j-1){
 1ce:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
        for(j = 0; j < size_a + size_b -1; ++j){
 1d2:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
 1d4:	0492                	slli	s1,s1,0x4
 1d6:	06940593          	addi	a1,s0,105
 1da:	0795                	addi	a5,a5,5
 1dc:	0896                	slli	a7,a7,0x5
 1de:	0c9a0997          	auipc	s3,0xc9a0
    for(j = 0; j < size_a + size_b -1; ++j){
 1e2:	0a98                	addi	a4,sp,336
 1e4:	0b99                	addi	s7,s7,6
    array_mod(product,mod,(size_a+size_b-1));
 1e6:	0a01da03          	lhu	s4,160(gp)
 1ea:	020c                	addi	a1,sp,256
 1ec:	03f0                	addi	a2,sp,460
 1ee:	c144                	sw	s1,4(a0)
 1f0:	c844                	sw	s1,20(s0)
 1f2:	c944                	sw	s1,20(a0)
}
 1f4:	d244                	sw	s1,36(a2)
 1f6:	d344                	sw	s1,36(a4)
 1f8:	d444                	sw	s1,44(s0)
 1fa:	d544                	sw	s1,44(a0)
 1fc:	d644                	sw	s1,44(a2)
 1fe:	d744                	sw	s1,44(a4)
 200:	d844                	sw	s1,52(s0)
 202:	d944                	sw	s1,52(a0)
 204:	da44                	sw	s1,52(a2)
 206:	0e4a                	slli	t3,t3,0x12
 208:	4200                	lw	s0,0(a2)
 20a:	0034000b          	0x34000b
 20e:	0000                	unimp
 210:	0000                	unimp
 212:	0000                	unimp
 214:	0af0                	addi	a2,sp,348
 216:	0000                	unimp
 218:	0094                	addi	a3,sp,64
 21a:	0000                	unimp
 21c:	0e42                	slli	t3,t3,0x10
                line[size_b-1-j][k] = pola[k]*polb[j];
 21e:	01e0                	addi	s0,sp,204
 220:	8846                	mv	a6,a7
 222:	8902                	jr	s2
 224:	5a049203          	lh	tp,1440(s1)
 228:	0181                	addi	gp,gp,0
 22a:	06940593          	addi	a1,s0,105
            for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	5202                	lw	tp,32(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 230:	c10a                	sw	sp,128(sp)
 232:	c842                	sw	a6,16(sp)
 234:	c942                	sw	a6,144(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 236:	d242                	sw	a6,36(sp)
 238:	d342                	sw	a6,164(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 23a:	d442                	sw	a6,40(sp)
 23c:	0e42                	slli	t3,t3,0x10
 23e:	4200                	lw	s0,0(a2)
 240:	0000000b          	0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	0040                	addi	s0,sp,4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 246:	0000                	unimp
 248:	0000                	unimp
 24a:	0000                	unimp
 24c:	0b84                	addi	s1,sp,464
 24e:	0000                	unimp
 250:	00c4                	addi	s1,sp,68
 252:	0000                	unimp
 254:	0e42                	slli	t3,t3,0x10
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	4430                	lw	a2,72(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 258:	0288                	addi	a0,sp,320
 25a:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	9504                	0x9504
 260:	58099707          	0x58099707
        for (j = size_b -1; j >= 0; j = j-1){
 264:	0181                	addi	gp,gp,0
 266:	0389                	addi	t2,t2,2
 268:	0694                	addi	a3,sp,832
            line[i][j] = line[i][j] % mod;
 26a:	0896                	slli	a7,a7,0x5
        for(j = 0; j < size_a + size_b -1; ++j){
 26c:	4e02                	lw	t3,0(sp)
 26e:	c10a                	sw	sp,128(sp)
            line[i][j] = line[i][j] % mod;
 270:	c842                	sw	a6,16(sp)
 272:	c942                	sw	a6,144(sp)
 274:	d242                	sw	a6,36(sp)
 276:	d342                	sw	a6,164(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 278:	d442                	sw	a6,40(sp)
 27a:	d542                	sw	a6,168(sp)
    for (i = 0; i < size_b; ++i){
 27c:	d642                	sw	a6,44(sp)
 27e:	d742                	sw	a6,172(sp)
 280:	0e42                	slli	t3,t3,0x10
 282:	4200                	lw	s0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 284:	0000000b          	0xb
            product[j] += line[i][j];
 288:	002c                	addi	a1,sp,8
 28a:	0000                	unimp
 28c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 28e:	0000                	unimp
            product[j] += line[i][j];
 290:	0e44                	addi	s1,sp,788
 292:	0000                	unimp
 294:	0138                	addi	a4,sp,136
 296:	0000                	unimp
 298:	0e44                	addi	s1,sp,788
 29a:	08b0                	addi	a2,sp,88
        for(i = 0; i < size_b; ++i){
 29c:	815e                	mv	sp,s7
 29e:	8801                	andi	s0,s0,0
    for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	8902                	jr	s2
 2a2:	03049203          	lh	tp,48(s1)
        for(i = 0; i < size_b; ++i){
 2a6:	00f8                	addi	a4,sp,76
 2a8:	c10a                	sw	sp,128(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2aa:	c844                	sw	s1,20(s0)
    int line[size_b][size_a + size_b];
 2ac:	c944                	sw	s1,20(a0)
 2ae:	d244                	sw	s1,36(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2b0:	0e46                	slli	t3,t3,0x11
 2b2:	4200                	lw	s0,0(a2)
 2b4:	0000000b          	0xb

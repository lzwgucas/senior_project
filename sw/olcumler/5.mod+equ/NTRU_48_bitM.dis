
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4af0006f          	j	d2a <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4af0006f          	j	d2e <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4a70006f          	j	d2a <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4a30006f          	j	d2a <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
      90:	8082                	ret

00000092 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78d63          	beq	a5,a3,d4 <array_equ+0x42>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_equ+0x20>
      a4:	e7b1                	bnez	a5,f0 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c363          	blt	a5,a2,f2 <array_equ+0x60>
      b0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	04d7cc63          	blt	a5,a3,116 <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c587b3          	add	a5,a1,a2
      ca:	4398                	lw	a4,0(a5)
      cc:	00c507b3          	add	a5,a0,a2
      d0:	c398                	sw	a4,0(a5)
      d2:	a811                	j	e6 <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	fff60693          	addi	a3,a2,-1
      d8:	02e6c6b3          	div	a3,a3,a4
      dc:	4781                	li	a5,0
      de:	48b1                	li	a7,12
      e0:	02d7c263          	blt	a5,a3,104 <array_equ+0x72>
            a1[length-1] = a2[length-1];
      e4:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
      e6:	1671                	addi	a2,a2,-4
      e8:	95b2                	add	a1,a1,a2
      ea:	419c                	lw	a5,0(a1)
      ec:	962a                	add	a2,a2,a0
      ee:	c21c                	sw	a5,0(a2)
	    break;
    } //end of switch case
} //end of function
      f0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	03078733          	mul	a4,a5,a6
    asm volatile(
      f6:	00e506b3          	add	a3,a0,a4
      fa:	972e                	add	a4,a4,a1
      fc:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     100:	0785                	addi	a5,a5,1
     102:	b76d                	j	ac <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03178733          	mul	a4,a5,a7
    asm volatile(
     108:	00e50833          	add	a6,a0,a4
     10c:	972e                	add	a4,a4,a1
     10e:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0785                	addi	a5,a5,1
     114:	b7f1                	j	e0 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	03178733          	mul	a4,a5,a7
    asm volatile(
     11a:	00e50833          	add	a6,a0,a4
     11e:	972e                	add	a4,a4,a1
     120:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0785                	addi	a5,a5,1
     126:	bf61                	j	be <array_equ+0x2c>

00000128 <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
     128:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
     12c:	8082                	ret

0000012e <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    switch(length%3) {
     12e:	470d                	li	a4,3
     130:	02e667b3          	rem	a5,a2,a4
     134:	4685                	li	a3,1
     136:	02d78d63          	beq	a5,a3,170 <array_mod+0x42>
     13a:	4689                	li	a3,2
     13c:	00d78963          	beq	a5,a3,14e <array_mod+0x20>
     140:	e7b9                	bnez	a5,18e <array_mod+0x60>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     142:	02e64633          	div	a2,a2,a4
    asm volatile(
     146:	46b1                	li	a3,12
            for (i = 0; i < (length / 3); i++) {
     148:	04c7c463          	blt	a5,a2,190 <array_mod+0x62>
     14c:	8082                	ret
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     14e:	ffe60693          	addi	a3,a2,-2
     152:	02e6c6b3          	div	a3,a3,a4
     156:	4781                	li	a5,0
    asm volatile(
     158:	4831                	li	a6,12
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	04d7c963          	blt	a5,a3,1ac <array_mod+0x7e>
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
     15e:	060a                	slli	a2,a2,0x2
     160:	1671                	addi	a2,a2,-4
     162:	00c50733          	add	a4,a0,a2
     166:	431c                	lw	a5,0(a4)
     168:	02b7e7b3          	rem	a5,a5,a1
     16c:	c31c                	sw	a5,0(a4)
     16e:	a811                	j	182 <array_mod+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	fff60693          	addi	a3,a2,-1
     174:	02e6c6b3          	div	a3,a3,a4
     178:	4781                	li	a5,0
    asm volatile(
     17a:	4831                	li	a6,12
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	02d7c163          	blt	a5,a3,19e <array_mod+0x70>
            a1[length-1] = a1[length-1] % mod;
     180:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] % mod;
     182:	1671                	addi	a2,a2,-4
     184:	962a                	add	a2,a2,a0
     186:	421c                	lw	a5,0(a2)
     188:	02b7e5b3          	rem	a1,a5,a1
     18c:	c20c                	sw	a1,0(a2)
	    break;
    } //end of switch case
} //end of function
     18e:	8082                	ret
    asm volatile(
     190:	02d78733          	mul	a4,a5,a3
     194:	972a                	add	a4,a4,a0
     196:	0cb7770b          	0xcb7770b
            for (i = 0; i < (length / 3); i++) {
     19a:	0785                	addi	a5,a5,1
     19c:	b775                	j	148 <array_mod+0x1a>
    asm volatile(
     19e:	03078733          	mul	a4,a5,a6
     1a2:	972a                	add	a4,a4,a0
     1a4:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	0785                	addi	a5,a5,1
     1aa:	bfc9                	j	17c <array_mod+0x4e>
    asm volatile(
     1ac:	03078733          	mul	a4,a5,a6
     1b0:	972a                	add	a4,a4,a0
     1b2:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0785                	addi	a5,a5,1
     1b8:	b74d                	j	15a <array_mod+0x2c>

000001ba <polymult>:


/////////////////////////////////////////////////


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	715d                	addi	sp,sp,-80
     1bc:	c0ca                	sw	s2,64(sp)
     1be:	8936                	mv	s2,a3
     1c0:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
     1c2:	96ae                	add	a3,a3,a1
     1c4:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c8:	d462                	sw	s8,40(sp)
     1ca:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
     1cc:	00269c13          	slli	s8,a3,0x2
     1d0:	fff68c93          	addi	s9,a3,-1
     1d4:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	dc52                	sw	s4,56(sp)
     1da:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     1dc:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	c4a2                	sw	s0,72(sp)
     1e2:	c2a6                	sw	s1,68(sp)
     1e4:	da56                	sw	s5,52(sp)
     1e6:	d85a                	sw	s6,48(sp)
     1e8:	d65e                	sw	s7,44(sp)
     1ea:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
     1ec:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	ce6e                	sw	s11,28(sp)
     1f0:	c686                	sw	ra,76(sp)
     1f2:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     1f4:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     1f6:	073d                	addi	a4,a4,15
     1f8:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
     1fa:	40d10133          	sub	sp,sp,a3
     1fe:	8b8a                	mv	s7,sp
    int pola[size_a];
     200:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
     204:	00f98713          	addi	a4,s3,15
     208:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     20a:	8d8a                	mv	s11,sp
    int polb[size_b];
     20c:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	8aae                	mv	s5,a1
    int pola[size_a];
     212:	fff58693          	addi	a3,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	8832                	mv	a6,a2
    int line[size_b][size_a + size_b];
     218:	fff90b13          	addi	s6,s2,-1
    int polb[size_b];
     21c:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     21e:	002c5d13          	srli	s10,s8,0x2
     222:	875e                	mv	a4,s7
    for (i = 0; i < size_b; ++i){
     224:	88de                	mv	a7,s7
     226:	4581                	li	a1,0
            product[j] = 0;
     228:	00001e97          	auipc	t4,0x1
     22c:	fcce8e93          	addi	t4,t4,-52 # 11f4 <_bss_start>
    for (i = 0; i < size_b; ++i){
     230:	0725cc63          	blt	a1,s2,2a8 <polymult+0xee>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
     234:	85aa                	mv	a1,a0
     236:	8656                	mv	a2,s5
     238:	856e                	mv	a0,s11
     23a:	faf42823          	sw	a5,-80(s0)
     23e:	fae42c23          	sw	a4,-72(s0)
     242:	fad42e23          	sw	a3,-68(s0)
     246:	fb042a23          	sw	a6,-76(s0)
     24a:	35a1                	jal	92 <array_equ>
    array_mod(pola,mod,size_a);
     24c:	8656                	mv	a2,s5
     24e:	85d2                	mv	a1,s4
     250:	856e                	mv	a0,s11
     252:	3df1                	jal	12e <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
     254:	fb442803          	lw	a6,-76(s0)
     258:	8526                	mv	a0,s1
     25a:	864a                	mv	a2,s2
     25c:	85c2                	mv	a1,a6
     25e:	3d15                	jal	92 <array_equ>
    array_mod(polb,mod,size_b);
     260:	864a                	mv	a2,s2
     262:	8526                	mv	a0,s1
     264:	85d2                	mv	a1,s4
     266:	35e1                	jal	12e <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     268:	fb042783          	lw	a5,-80(s0)
     26c:	4605                	li	a2,1
     26e:	fbc42683          	lw	a3,-68(s0)
     272:	fb842703          	lw	a4,-72(s0)
     276:	94ce                	add	s1,s1,s3
     278:	02c78b63          	beq	a5,a2,2ae <polymult+0xf4>
     27c:	19f1                	addi	s3,s3,-4
     27e:	ffcc0593          	addi	a1,s8,-4
     282:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     284:	020b4863          	bltz	s6,2b4 <polymult+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	87b6                	mv	a5,a3
     28a:	a85d                	j	340 <polymult+0x186>
            product[j] = 0;
     28c:	00261e13          	slli	t3,a2,0x2
     290:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     292:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     296:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0605                	addi	a2,a2,1
     29c:	0311                	addi	t1,t1,4
     29e:	ff9647e3          	blt	a2,s9,28c <polymult+0xd2>
    for (i = 0; i < size_b; ++i){
     2a2:	0585                	addi	a1,a1,1
     2a4:	98e2                	add	a7,a7,s8
     2a6:	b769                	j	230 <polymult+0x76>
     2a8:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	4601                	li	a2,0
     2ac:	bfcd                	j	29e <polymult+0xe4>
    if(star_mult == 1){
     2ae:	85de                	mv	a1,s7
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	060b5a63          	bgez	s6,324 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	4681                	li	a3,0
    for (i = 0; i < size_b; ++i){
     2b6:	0b26c763          	blt	a3,s2,364 <polymult+0x1aa>
     2ba:	00001697          	auipc	a3,0x1
     2be:	f3a68693          	addi	a3,a3,-198 # 11f4 <_bss_start>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	4701                	li	a4,0
     2c4:	0d974263          	blt	a4,s9,388 <polymult+0x1ce>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
     2c8:	8666                	mv	a2,s9
     2ca:	85d2                	mv	a1,s4
     2cc:	00001517          	auipc	a0,0x1
     2d0:	f2850513          	addi	a0,a0,-216 # 11f4 <_bss_start>
     2d4:	3da9                	jal	12e <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     2d6:	fb040113          	addi	sp,s0,-80
     2da:	40b6                	lw	ra,76(sp)
     2dc:	4426                	lw	s0,72(sp)
     2de:	4496                	lw	s1,68(sp)
     2e0:	4906                	lw	s2,64(sp)
     2e2:	59f2                	lw	s3,60(sp)
     2e4:	5a62                	lw	s4,56(sp)
     2e6:	5ad2                	lw	s5,52(sp)
     2e8:	5b42                	lw	s6,48(sp)
     2ea:	5bb2                	lw	s7,44(sp)
     2ec:	5c22                	lw	s8,40(sp)
     2ee:	5c92                	lw	s9,36(sp)
     2f0:	5d02                	lw	s10,32(sp)
     2f2:	4df2                	lw	s11,28(sp)
     2f4:	00001517          	auipc	a0,0x1
     2f8:	f0050513          	addi	a0,a0,-256 # 11f4 <_bss_start>
     2fc:	6161                	addi	sp,sp,80
     2fe:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	00279613          	slli	a2,a5,0x2
     304:	00c58533          	add	a0,a1,a2
     308:	966e                	add	a2,a2,s11
     30a:	4210                	lw	a2,0(a2)
     30c:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	03060633          	mul	a2,a2,a6
     316:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	fe07d4e3          	bgez	a5,300 <polymult+0x146>
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	1b7d                	addi	s6,s6,-1
     31e:	14f1                	addi	s1,s1,-4
     320:	95e2                	add	a1,a1,s8
     322:	b779                	j	2b0 <polymult+0xf6>
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	87b6                	mv	a5,a3
     326:	bfcd                	j	318 <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	00279613          	slli	a2,a5,0x2
     32c:	00c98533          	add	a0,s3,a2
     330:	966e                	add	a2,a2,s11
     332:	4210                	lw	a2,0(a2)
     334:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	03060633          	mul	a2,a2,a6
     33e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	fe07d4e3          	bgez	a5,328 <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
     344:	1b7d                	addi	s6,s6,-1
     346:	14f1                	addi	s1,s1,-4
     348:	99ae                	add	s3,s3,a1
     34a:	bf2d                	j	284 <polymult+0xca>
            line[i][j] = line[i][j] % mod;
     34c:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	0605                	addi	a2,a2,1
     350:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     352:	0345e5b3          	rem	a1,a1,s4
     356:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	ff9649e3          	blt	a2,s9,34c <polymult+0x192>
    for (i = 0; i < size_b; ++i){
     35e:	0685                	addi	a3,a3,1
     360:	9762                	add	a4,a4,s8
     362:	bf91                	j	2b6 <polymult+0xfc>
     364:	87ba                	mv	a5,a4
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	4601                	li	a2,0
     368:	bfcd                	j	35a <polymult+0x1a0>
            product[j] += line[i][j];
     36a:	03a607b3          	mul	a5,a2,s10
     36e:	428c                	lw	a1,0(a3)
        for(i = 0; i < size_b; ++i){
     370:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
     372:	97ba                	add	a5,a5,a4
     374:	078a                	slli	a5,a5,0x2
     376:	97de                	add	a5,a5,s7
     378:	439c                	lw	a5,0(a5)
     37a:	97ae                	add	a5,a5,a1
     37c:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
     37e:	ff2646e3          	blt	a2,s2,36a <polymult+0x1b0>
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0705                	addi	a4,a4,1
     384:	0691                	addi	a3,a3,4
     386:	bf3d                	j	2c4 <polymult+0x10a>
        for(i = 0; i < size_b; ++i){
     388:	4601                	li	a2,0
     38a:	bfd5                	j	37e <polymult+0x1c4>

0000038c <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     38e:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	da56                	sw	s5,52(sp)
     394:	00269a93          	slli	s5,a3,0x2
     398:	d85a                	sw	s6,48(sp)
     39a:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     39c:	00279b13          	slli	s6,a5,0x2
     3a0:	fff78b93          	addi	s7,a5,-1
     3a4:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	c4a2                	sw	s0,72(sp)
     3aa:	c2a6                	sw	s1,68(sp)
     3ac:	c0ca                	sw	s2,64(sp)
     3ae:	de4e                	sw	s3,60(sp)
     3b0:	dc52                	sw	s4,56(sp)
     3b2:	d462                	sw	s8,40(sp)
     3b4:	d266                	sw	s9,36(sp)
     3b6:	d06a                	sw	s10,32(sp)
     3b8:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     3ba:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3bc:	c686                	sw	ra,76(sp)
     3be:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     3c0:	9bc1                	andi	a5,a5,-16
     3c2:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     3c6:	00259793          	slli	a5,a1,0x2
     3ca:	07bd                	addi	a5,a5,15
     3cc:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     3ce:	890a                	mv	s2,sp
    int pola[size_a];
     3d0:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     3d4:	00fa8793          	addi	a5,s5,15
     3d8:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     3da:	8d0a                	mv	s10,sp
    int polb[size_b];
     3dc:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	89b6                	mv	s3,a3
     3e2:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     3e4:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	8832                	mv	a6,a2
    int pola[size_a];
     3ea:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     3ee:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     3f0:	8cca                	mv	s9,s2
     3f2:	86ca                	mv	a3,s2
     3f4:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     3f6:	00001317          	auipc	t1,0x1
     3fa:	05630313          	addi	t1,t1,86 # 144c <product2>
    for (i = 0; i < size_b; ++i){
     3fe:	05374963          	blt	a4,s3,450 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     402:	862e                	mv	a2,a1
     404:	85aa                	mv	a1,a0
     406:	856a                	mv	a0,s10
     408:	fb042e23          	sw	a6,-68(s0)
     40c:	3159                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     40e:	fbc42803          	lw	a6,-68(s0)
     412:	8526                	mv	a0,s1
     414:	864e                	mv	a2,s3
     416:	85c2                	mv	a1,a6
     418:	39ad                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     41a:	4785                	li	a5,1
     41c:	01548533          	add	a0,s1,s5
     420:	04fd8c63          	beq	s11,a5,478 <polymult2+0xec>
     424:	1af1                	addi	s5,s5,-4
     426:	ffcb0693          	addi	a3,s6,-4
     42a:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	040a4863          	bltz	s4,47c <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     430:	87e2                	mv	a5,s8
     432:	a8ad                	j	4ac <polymult2+0x120>
            product2[j] = 0;
     434:	00279893          	slli	a7,a5,0x2
     438:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     43a:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     43e:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	0785                	addi	a5,a5,1
     444:	0611                	addi	a2,a2,4
     446:	ff77c7e3          	blt	a5,s7,434 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     44a:	0705                	addi	a4,a4,1
     44c:	96da                	add	a3,a3,s6
     44e:	bf45                	j	3fe <polymult2+0x72>
     450:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	4781                	li	a5,0
     454:	bfcd                	j	446 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	00279713          	slli	a4,a5,0x2
     45a:	00e906b3          	add	a3,s2,a4
     45e:	976a                	add	a4,a4,s10
     460:	4318                	lw	a4,0(a4)
     462:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	02c70733          	mul	a4,a4,a2
     46c:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	fe07d4e3          	bgez	a5,456 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     472:	1a7d                	addi	s4,s4,-1
     474:	1571                	addi	a0,a0,-4
     476:	995a                	add	s2,s2,s6
     478:	000a5c63          	bgez	s4,490 <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
     47c:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
     47e:	05365a63          	bge	a2,s3,4d2 <polymult2+0x146>
     482:	00001797          	auipc	a5,0x1
     486:	fca78793          	addi	a5,a5,-54 # 144c <product2>
     48a:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
     48c:	4701                	li	a4,0
     48e:	a82d                	j	4c8 <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	87e2                	mv	a5,s8
     492:	bff1                	j	46e <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	00279713          	slli	a4,a5,0x2
     498:	00e90633          	add	a2,s2,a4
     49c:	976a                	add	a4,a4,s10
     49e:	4318                	lw	a4,0(a4)
     4a0:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	02b70733          	mul	a4,a4,a1
     4aa:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	fe07d4e3          	bgez	a5,494 <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	1a7d                	addi	s4,s4,-1
     4b2:	1571                	addi	a0,a0,-4
     4b4:	9936                	add	s2,s2,a3
     4b6:	bf9d                	j	42c <polymult2+0xa0>
            product2[j] += line[i][j];
     4b8:	438c                	lw	a1,0(a5)
     4ba:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	0705                	addi	a4,a4,1
     4be:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
     4c0:	95aa                	add	a1,a1,a0
     4c2:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	0691                	addi	a3,a3,4
     4c8:	ff7748e3          	blt	a4,s7,4b8 <polymult2+0x12c>
    for(i=0;i<size_b;++i){
     4cc:	0605                	addi	a2,a2,1
     4ce:	9cda                	add	s9,s9,s6
     4d0:	b77d                	j	47e <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     4d2:	fb040113          	addi	sp,s0,-80
     4d6:	40b6                	lw	ra,76(sp)
     4d8:	4426                	lw	s0,72(sp)
     4da:	4496                	lw	s1,68(sp)
     4dc:	4906                	lw	s2,64(sp)
     4de:	59f2                	lw	s3,60(sp)
     4e0:	5a62                	lw	s4,56(sp)
     4e2:	5ad2                	lw	s5,52(sp)
     4e4:	5b42                	lw	s6,48(sp)
     4e6:	5bb2                	lw	s7,44(sp)
     4e8:	5c22                	lw	s8,40(sp)
     4ea:	5c92                	lw	s9,36(sp)
     4ec:	5d02                	lw	s10,32(sp)
     4ee:	4df2                	lw	s11,28(sp)
     4f0:	00001517          	auipc	a0,0x1
     4f4:	f5c50513          	addi	a0,a0,-164 # 144c <product2>
     4f8:	6161                	addi	sp,sp,80
     4fa:	8082                	ret

000004fc <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     4fc:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	7139                	addi	sp,sp,-64
    int v[size_N];
     502:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	de06                	sw	ra,60(sp)
     506:	dc22                	sw	s0,56(sp)
     508:	da26                	sw	s1,52(sp)
     50a:	0080                	addi	s0,sp,64
     50c:	d84a                	sw	s2,48(sp)
     50e:	d64e                	sw	s3,44(sp)
     510:	d452                	sw	s4,40(sp)
     512:	d256                	sw	s5,36(sp)
     514:	d05a                	sw	s6,32(sp)
     516:	ce5e                	sw	s7,28(sp)
     518:	cc62                	sw	s8,24(sp)
     51a:	ca66                	sw	s9,20(sp)
     51c:	c86a                	sw	s10,16(sp)
    int v[size_N];
     51e:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	c66e                	sw	s11,12(sp)
    int v[size_N];
     522:	40f10133          	sub	sp,sp,a5
     526:	8b0a                	mv	s6,sp
    int q[size_N];
     528:	40f10133          	sub	sp,sp,a5
     52c:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
     52e:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     532:	00269793          	slli	a5,a3,0x2
     536:	07bd                	addi	a5,a5,15
     538:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     53a:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	84ae                	mv	s1,a1
    int denum_temp[size_D];
     53e:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     542:	8c32                	mv	s8,a2
    int v[size_N];
     544:	fff58d13          	addi	s10,a1,-1
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }

       array_equ(num_temp,num,size_N);
     548:	862e                	mv	a2,a1
     54a:	85aa                	mv	a1,a0
     54c:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	8a36                	mv	s4,a3
     550:	89ba                	mv	s3,a4
    int denum_temp[size_D];
     552:	fff68a93          	addi	s5,a3,-1
       array_equ(num_temp,num,size_N);
     556:	3e35                	jal	92 <array_equ>

       array_mod(num_temp, mod, size_N);
     558:	8626                	mv	a2,s1
     55a:	85ce                	mv	a1,s3
     55c:	854a                	mv	a0,s2
     55e:	3ec1                	jal	12e <array_mod>
    int denum_temp[size_D];
     560:	8c8a                	mv	s9,sp
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    
    array_equ(denum_temp,denum,size_D);
     562:	8652                	mv	a2,s4
     564:	85e2                	mv	a1,s8
     566:	8566                	mv	a0,s9
     568:	362d                	jal	92 <array_equ>
    
    array_mod(denum_temp,mod,size_D);
     56a:	8652                	mv	a2,s4
     56c:	85ce                	mv	a1,s3
     56e:	8566                	mv	a0,s9
     570:	3e7d                	jal	12e <array_mod>

    for (i = 0; i < size_N; ++i){
     572:	4781                	li	a5,0
     574:	0097cf63          	blt	a5,s1,592 <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     578:	002a9793          	slli	a5,s5,0x2
     57c:	97e6                	add	a5,a5,s9
     57e:	4398                	lw	a4,0(a5)
     580:	020ad463          	bgez	s5,5a8 <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
     584:	4781                	li	a5,0
     586:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     588:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     58a:	033c4263          	blt	s8,s3,5ae <polydiv+0xb2>
     58e:	87ea                	mv	a5,s10
     590:	a805                	j	5c0 <polydiv+0xc4>
        q[i] = 0;
     592:	00279713          	slli	a4,a5,0x2
     596:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
     59a:	975a                	add	a4,a4,s6
        q[i] = 0;
     59c:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     5a0:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     5a4:	0785                	addi	a5,a5,1
     5a6:	b7f9                	j	574 <polydiv+0x78>
        if( denum_temp[i] != 0 )
     5a8:	ff71                	bnez	a4,584 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	1afd                	addi	s5,s5,-1
     5ac:	b7f1                	j	578 <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
     5ae:	0337e633          	rem	a2,a5,s3
     5b2:	97ba                	add	a5,a5,a4
     5b4:	fcd60de3          	beq	a2,a3,58e <polydiv+0x92>
    for (u = 0; u < mod; ++u){
     5b8:	0c05                	addi	s8,s8,1
     5ba:	bfc1                	j	58a <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     5bc:	eb01                	bnez	a4,5cc <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	17fd                	addi	a5,a5,-1
     5c0:	00279713          	slli	a4,a5,0x2
     5c4:	974a                	add	a4,a4,s2
     5c6:	4318                	lw	a4,0(a4)
     5c8:	fe07dae3          	bgez	a5,5bc <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     5cc:	0557d663          	bge	a5,s5,618 <polydiv+0x11c>

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    
    array_equ(result,q,size_N);
     5d0:	8626                	mv	a2,s1
     5d2:	85de                	mv	a1,s7
     5d4:	00001517          	auipc	a0,0x1
     5d8:	0d050513          	addi	a0,a0,208 # 16a4 <result>
     5dc:	3c5d                	jal	92 <array_equ>
    


    for(i = size_N; i < (2*size_N); ++i){
     5de:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     5e2:	00001697          	auipc	a3,0x1
     5e6:	0c268693          	addi	a3,a3,194 # 16a4 <result>
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	0ce4c863          	blt	s1,a4,6ba <polydiv+0x1be>
    }

    return_address3 = &result[0];

    return return_address3;
}
     5ee:	fc040113          	addi	sp,s0,-64
     5f2:	50f2                	lw	ra,60(sp)
     5f4:	5462                	lw	s0,56(sp)
     5f6:	54d2                	lw	s1,52(sp)
     5f8:	5942                	lw	s2,48(sp)
     5fa:	59b2                	lw	s3,44(sp)
     5fc:	5a22                	lw	s4,40(sp)
     5fe:	5a92                	lw	s5,36(sp)
     600:	5b02                	lw	s6,32(sp)
     602:	4bf2                	lw	s7,28(sp)
     604:	4c62                	lw	s8,24(sp)
     606:	4cd2                	lw	s9,20(sp)
     608:	4d42                	lw	s10,16(sp)
     60a:	4db2                	lw	s11,12(sp)
     60c:	00001517          	auipc	a0,0x1
     610:	09850513          	addi	a0,a0,152 # 16a4 <result>
     614:	6121                	addi	sp,sp,64
     616:	8082                	ret
        v[(d-d2)] = u*r_d;
     618:	03870733          	mul	a4,a4,s8
     61c:	415787b3          	sub	a5,a5,s5
     620:	078a                	slli	a5,a5,0x2
     622:	97da                	add	a5,a5,s6
        array_mod(v, mod, size_N);
     624:	8626                	mv	a2,s1
     626:	85ce                	mv	a1,s3
     628:	855a                	mv	a0,s6
        v[(d-d2)] = u*r_d;
     62a:	c398                	sw	a4,0(a5)
        array_mod(v, mod, size_N);
     62c:	3609                	jal	12e <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	4781                	li	a5,0
     630:	874e                	mv	a4,s3
     632:	86d2                	mv	a3,s4
     634:	865a                	mv	a2,s6
     636:	85d2                	mv	a1,s4
     638:	8566                	mv	a0,s9
     63a:	3641                	jal	1ba <polymult>
        array_mod(product, mod, size_N);
     63c:	8626                	mv	a2,s1
     63e:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	8daa                	mv	s11,a0
        array_mod(product, mod, size_N);
     642:	34f5                	jal	12e <array_mod>
        for (i = 0; i < size_N; ++i){
     644:	874a                	mv	a4,s2
     646:	4781                	li	a5,0
     648:	0297c763          	blt	a5,s1,676 <polydiv+0x17a>
	array_mod(num_temp, mod, size_N);
     64c:	8626                	mv	a2,s1
     64e:	85ce                	mv	a1,s3
     650:	854a                	mv	a0,s2
     652:	3cf1                	jal	12e <array_mod>
        for(i = 0; i < size_N; ++i){
     654:	875e                	mv	a4,s7
     656:	4781                	li	a5,0
     658:	0297ca63          	blt	a5,s1,68c <polydiv+0x190>
        array_mod(q, mod, size_N);
     65c:	8626                	mv	a2,s1
     65e:	85ce                	mv	a1,s3
     660:	855e                	mv	a0,s7
     662:	34f1                	jal	12e <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
     664:	87ea                	mv	a5,s10
     666:	00279713          	slli	a4,a5,0x2
     66a:	974a                	add	a4,a4,s2
     66c:	4318                	lw	a4,0(a4)
     66e:	0207da63          	bgez	a5,6a2 <polydiv+0x1a6>
     672:	4681                	li	a3,0
     674:	a081                	j	6b4 <polydiv+0x1b8>
            num_temp[i] = num_temp[i] - product[i];
     676:	00279613          	slli	a2,a5,0x2
     67a:	966e                	add	a2,a2,s11
     67c:	4314                	lw	a3,0(a4)
     67e:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     680:	0785                	addi	a5,a5,1
     682:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     684:	8e91                	sub	a3,a3,a2
     686:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     68a:	bf7d                	j	648 <polydiv+0x14c>
            q[i] = q[i] + v[i];
     68c:	00279613          	slli	a2,a5,0x2
     690:	965a                	add	a2,a2,s6
     692:	4314                	lw	a3,0(a4)
     694:	4210                	lw	a2,0(a2)
        for(i = 0; i < size_N; ++i){
     696:	0785                	addi	a5,a5,1
     698:	0711                	addi	a4,a4,4
            q[i] = q[i] + v[i];
     69a:	96b2                	add	a3,a3,a2
     69c:	fed72e23          	sw	a3,-4(a4)
        for(i = 0; i < size_N; ++i){
     6a0:	bf65                	j	658 <polydiv+0x15c>
            if( num_temp[i] != 0 )
     6a2:	fb61                	bnez	a4,672 <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	17fd                	addi	a5,a5,-1
     6a6:	b7c1                	j	666 <polydiv+0x16a>
            v[i] = 0;
     6a8:	00269613          	slli	a2,a3,0x2
     6ac:	965a                	add	a2,a2,s6
     6ae:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6b2:	0685                	addi	a3,a3,1
     6b4:	fe96cae3          	blt	a3,s1,6a8 <polydiv+0x1ac>
     6b8:	bf11                	j	5cc <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
     6ba:	00092603          	lw	a2,0(s2)
     6be:	00249793          	slli	a5,s1,0x2
     6c2:	97b6                	add	a5,a5,a3
     6c4:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0485                	addi	s1,s1,1
     6c8:	0911                	addi	s2,s2,4
     6ca:	b705                	j	5ea <polydiv+0xee>

000006cc <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6cc:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6d2:	07bd                	addi	a5,a5,15
     6d4:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	c4a2                	sw	s0,72(sp)
     6d8:	c2a6                	sw	s1,68(sp)
     6da:	c0ca                	sw	s2,64(sp)
     6dc:	de4e                	sw	s3,60(sp)
     6de:	dc52                	sw	s4,56(sp)
     6e0:	da56                	sw	s5,52(sp)
     6e2:	d85a                	sw	s6,48(sp)
     6e4:	d65e                	sw	s7,44(sp)
     6e6:	d462                	sw	s8,40(sp)
     6e8:	d266                	sw	s9,36(sp)
     6ea:	d06a                	sw	s10,32(sp)
     6ec:	ce6e                	sw	s11,28(sp)
     6ee:	c686                	sw	ra,76(sp)
     6f0:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6f2:	40f10133          	sub	sp,sp,a5
     6f6:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	40f10133          	sub	sp,sp,a5
     6fc:	8a0a                	mv	s4,sp
    int ri[size];
     6fe:	40f10133          	sub	sp,sp,a5
     702:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     704:	40f10133          	sub	sp,sp,a5
     708:	8b0a                	mv	s6,sp
    int ti[size];
     70a:	40f10133          	sub	sp,sp,a5
     70e:	8d0a                	mv	s10,sp
    int qi_1[size];
     710:	40f10133          	sub	sp,sp,a5
     714:	8c8a                	mv	s9,sp
    int temp[size];
     716:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	8936                	mv	s2,a3
     71c:	8dae                	mv	s11,a1
     71e:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     720:	fff60b93          	addi	s7,a2,-1
    int temp[size];
     724:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     726:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     728:	00001697          	auipc	a3,0x1
     72c:	1d468693          	addi	a3,a3,468 # 18fc <ti_2>
    for (i = 0; i < size; ++i) {
     730:	1097cb63          	blt	a5,s1,846 <ext_euclid+0x17a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     734:	85aa                	mv	a1,a0
     736:	8626                	mv	a2,s1
     738:	854e                	mv	a0,s3
     73a:	3aa1                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
     73c:	85ee                	mv	a1,s11
     73e:	8626                	mv	a2,s1
     740:	8552                	mv	a0,s4
     742:	3a81                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     744:	4785                	li	a5,1
     746:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	00149793          	slli	a5,s1,0x1
     74e:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     752:	00001d97          	auipc	s11,0x1
     756:	1aad8d93          	addi	s11,s11,426 # 18fc <ti_2>
    array_mod(ri_2,mod,size);
     75a:	8626                	mv	a2,s1
     75c:	85ca                	mv	a1,s2
     75e:	854e                	mv	a0,s3
     760:	32f9                	jal	12e <array_mod>
    array_mod(ri_1,mod,size);
     762:	8626                	mv	a2,s1
     764:	85ca                	mv	a1,s2
     766:	8552                	mv	a0,s4
     768:	32d9                	jal	12e <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	874a                	mv	a4,s2
     76c:	86a6                	mv	a3,s1
     76e:	8652                	mv	a2,s4
     770:	85a6                	mv	a1,s1
     772:	854e                	mv	a0,s3
     774:	3361                	jal	4fc <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	8762                	mv	a4,s8
     778:	87a6                	mv	a5,s1
     77a:	fbc42683          	lw	a3,-68(s0)
     77e:	0cd7cf63          	blt	a5,a3,85c <ext_euclid+0x190>
     782:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     784:	4701                	li	a4,0
     786:	0eebd463          	bge	s7,a4,86e <ext_euclid+0x1a2>
    array_mod(temp,mod,size);
     78a:	8626                	mv	a2,s1
     78c:	85ca                	mv	a1,s2
     78e:	8556                	mv	a0,s5
     790:	3a79                	jal	12e <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	874a                	mv	a4,s2
     794:	86a6                	mv	a3,s1
     796:	8652                	mv	a2,s4
     798:	85a6                	mv	a1,s1
     79a:	8556                	mv	a0,s5
     79c:	3385                	jal	4fc <polydiv>
     79e:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
     7a0:	8626                	mv	a2,s1
     7a2:	8566                	mv	a0,s9
     7a4:	30fd                	jal	92 <array_equ>
    array_mod(qi_1,mod,size);
     7a6:	8626                	mv	a2,s1
     7a8:	85ca                	mv	a1,s2
     7aa:	8566                	mv	a0,s9
     7ac:	3249                	jal	12e <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	4781                	li	a5,0
     7b0:	874a                	mv	a4,s2
     7b2:	86a6                	mv	a3,s1
     7b4:	865a                	mv	a2,s6
     7b6:	85a6                	mv	a1,s1
     7b8:	8566                	mv	a0,s9
     7ba:	3401                	jal	1ba <polymult>
     7bc:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
     7be:	8626                	mv	a2,s1
     7c0:	8556                	mv	a0,s5
     7c2:	38c1                	jal	92 <array_equ>
    array_mod(temp,mod,size);
     7c4:	8626                	mv	a2,s1
     7c6:	85ca                	mv	a1,s2
     7c8:	8556                	mv	a0,s5
     7ca:	3295                	jal	12e <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7cc:	4781                	li	a5,0
     7ce:	4701                	li	a4,0
     7d0:	0aebdc63          	bge	s7,a4,888 <ext_euclid+0x1bc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
     7d4:	8626                	mv	a2,s1
     7d6:	85ca                	mv	a1,s2
     7d8:	856a                	mv	a0,s10
     7da:	3a91                	jal	12e <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     7dc:	8626                	mv	a2,s1
     7de:	85d2                	mv	a1,s4
     7e0:	854e                	mv	a0,s3
     7e2:	3845                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
     7e4:	8626                	mv	a2,s1
     7e6:	85e2                	mv	a1,s8
     7e8:	8552                	mv	a0,s4
     7ea:	3065                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
     7ec:	8626                	mv	a2,s1
     7ee:	85da                	mv	a1,s6
     7f0:	856e                	mv	a0,s11
     7f2:	3045                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
     7f4:	8626                	mv	a2,s1
     7f6:	85ea                	mv	a1,s10
     7f8:	855a                	mv	a0,s6
     7fa:	3861                	jal	92 <array_equ>
        controlR = 0;
     7fc:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     7fe:	4701                	li	a4,0
     800:	0aebd163          	bge	s7,a4,8a2 <ext_euclid+0x1d6>
    while (controlR != 0) {
     804:	f4079be3          	bnez	a5,75a <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     808:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     80a:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     80c:	0b274663          	blt	a4,s2,8b8 <ext_euclid+0x1ec>
     810:	00001617          	auipc	a2,0x1
     814:	0ec60613          	addi	a2,a2,236 # 18fc <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     818:	0afbda63          	bge	s7,a5,8cc <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     81c:	fb040113          	addi	sp,s0,-80
     820:	40b6                	lw	ra,76(sp)
     822:	4426                	lw	s0,72(sp)
     824:	4496                	lw	s1,68(sp)
     826:	4906                	lw	s2,64(sp)
     828:	59f2                	lw	s3,60(sp)
     82a:	5a62                	lw	s4,56(sp)
     82c:	5ad2                	lw	s5,52(sp)
     82e:	5b42                	lw	s6,48(sp)
     830:	5bb2                	lw	s7,44(sp)
     832:	5c22                	lw	s8,40(sp)
     834:	5c92                	lw	s9,36(sp)
     836:	5d02                	lw	s10,32(sp)
     838:	4df2                	lw	s11,28(sp)
     83a:	00001517          	auipc	a0,0x1
     83e:	0c250513          	addi	a0,a0,194 # 18fc <ti_2>
     842:	6161                	addi	sp,sp,80
     844:	8082                	ret
        ti_2[i] = 0;
     846:	00279713          	slli	a4,a5,0x2
     84a:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     84e:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     850:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     854:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     858:	0785                	addi	a5,a5,1
     85a:	bdd9                	j	730 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     85c:	00279693          	slli	a3,a5,0x2
     860:	96aa                	add	a3,a3,a0
     862:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0785                	addi	a5,a5,1
     866:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     868:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	b739                	j	77a <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
     86e:	00f986b3          	add	a3,s3,a5
     872:	00fc05b3          	add	a1,s8,a5
     876:	4294                	lw	a3,0(a3)
     878:	418c                	lw	a1,0(a1)
     87a:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     87e:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     880:	8e8d                	sub	a3,a3,a1
     882:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     884:	0791                	addi	a5,a5,4
     886:	b701                	j	786 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
     888:	00fd86b3          	add	a3,s11,a5
     88c:	00fa85b3          	add	a1,s5,a5
     890:	4294                	lw	a3,0(a3)
     892:	418c                	lw	a1,0(a1)
     894:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     898:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     89a:	8e8d                	sub	a3,a3,a1
     89c:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     89e:	0791                	addi	a5,a5,4
     8a0:	bf05                	j	7d0 <ext_euclid+0x104>
              qi_1[i] = 0;
     8a2:	00271693          	slli	a3,a4,0x2
     8a6:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
     8aa:	96e2                	add	a3,a3,s8
     8ac:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8ae:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8b2:	0705                	addi	a4,a4,1
            controlR += ri[i];
     8b4:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     8b6:	b7a9                	j	800 <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	0009a683          	lw	a3,0(s3)
     8bc:	02d706b3          	mul	a3,a4,a3
     8c0:	0326e6b3          	rem	a3,a3,s2
     8c4:	f4c686e3          	beq	a3,a2,810 <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
     8c8:	0705                	addi	a4,a4,1
     8ca:	b789                	j	80c <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ce:	0785                	addi	a5,a5,1
     8d0:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	02d706b3          	mul	a3,a4,a3
     8d6:	0326e6b3          	rem	a3,a3,s2
     8da:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     8de:	bf2d                	j	818 <ext_euclid+0x14c>

000008e0 <generate_keys>:




int* generate_keys(int N, int p, int q){
     8e0:	7141                	addi	sp,sp,-496
     8e2:	1e112623          	sw	ra,492(sp)
     8e6:	1e812423          	sw	s0,488(sp)
     8ea:	1e912223          	sw	s1,484(sp)
     8ee:	1b80                	addi	s0,sp,496
     8f0:	1f212023          	sw	s2,480(sp)
     8f4:	1d312e23          	sw	s3,476(sp)
     8f8:	1d412c23          	sw	s4,472(sp)
     8fc:	1d512a23          	sw	s5,468(sp)
     900:	1d612823          	sw	s6,464(sp)
     904:	1d712623          	sw	s7,460(sp)
     908:	1da12023          	sw	s10,448(sp)
     90c:	1d812423          	sw	s8,456(sp)
     910:	1d912223          	sw	s9,452(sp)
     914:	892a                	mv	s2,a0
     916:	8bae                	mv	s7,a1
     918:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     91a:	4581                	li	a1,0
     91c:	0d000613          	li	a2,208
     920:	e2440513          	addi	a0,s0,-476
     924:	2ba9                	jal	e7e <memset>
     926:	4485                	li	s1,1
     928:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     92a:	0d800613          	li	a2,216
     92e:	4581                	li	a1,0
     930:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	e1342c23          	sw	s3,-488(s0)
     938:	e0942e23          	sw	s1,-484(s0)
     93c:	e2942023          	sw	s1,-480(s0)
     940:	e3342423          	sw	s3,-472(s0)
     944:	e2942823          	sw	s1,-464(s0)
     948:	e2942e23          	sw	s1,-452(s0)
     94c:	e5342023          	sw	s3,-448(s0)
     950:	e5342223          	sw	s3,-444(s0)
     954:	e4942623          	sw	s1,-436(s0)
     958:	e5342a23          	sw	s3,-428(s0)
     95c:	e4942e23          	sw	s1,-420(s0)
     960:	e6942023          	sw	s1,-416(s0)
     964:	e7342623          	sw	s3,-404(s0)
     968:	e6942a23          	sw	s1,-396(s0)
     96c:	e8942023          	sw	s1,-384(s0)
     970:	e8942223          	sw	s1,-380(s0)
     974:	e8942423          	sw	s1,-376(s0)
     978:	e9342623          	sw	s3,-372(s0)
     97c:	e8942a23          	sw	s1,-364(s0)
     980:	ea942023          	sw	s1,-352(s0)
     984:	ea942223          	sw	s1,-348(s0)
     988:	ea942423          	sw	s1,-344(s0)
     98c:	eb342623          	sw	s3,-340(s0)
     990:	ea942a23          	sw	s1,-332(s0)
     994:	ec942023          	sw	s1,-320(s0)
     998:	ec942223          	sw	s1,-316(s0)
     99c:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9a0:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9a4:	29e9                	jal	e7e <memset>
    int polyR[N+1];
     9a6:	002a9793          	slli	a5,s5,0x2
     9aa:	07bd                	addi	a5,a5,15
     9ac:	9bc1                	andi	a5,a5,-16
     9ae:	40f10133          	sub	sp,sp,a5
     9b2:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9b4:	00291d13          	slli	s10,s2,0x2
     9b8:	01aa07b3          	add	a5,s4,s10
     9bc:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9be:	ef342a23          	sw	s3,-268(s0)
     9c2:	ee942e23          	sw	s1,-260(s0)
     9c6:	f0942023          	sw	s1,-256(s0)
     9ca:	f0942423          	sw	s1,-248(s0)
     9ce:	f1342a23          	sw	s3,-236(s0)
     9d2:	f1342e23          	sw	s3,-228(s0)
     9d6:	f3342023          	sw	s3,-224(s0)
     9da:	f2942423          	sw	s1,-216(s0)
     9de:	f3342823          	sw	s3,-208(s0)
     9e2:	f2942c23          	sw	s1,-200(s0)
     9e6:	f4942223          	sw	s1,-188(s0)
     9ea:	f5342423          	sw	s3,-184(s0)
     9ee:	f4942823          	sw	s1,-176(s0)
     9f2:	f4942e23          	sw	s1,-164(s0)
     9f6:	f7342023          	sw	s3,-160(s0)
     9fa:	f6942423          	sw	s1,-152(s0)
     9fe:	f6942a23          	sw	s1,-140(s0)
     a02:	f7342c23          	sw	s3,-136(s0)
     a06:	f8942023          	sw	s1,-128(s0)
     a0a:	f8942423          	sw	s1,-120(s0)
     a0e:	f8942623          	sw	s1,-116(s0)
     a12:	f8942c23          	sw	s1,-104(s0)
     a16:	f9342e23          	sw	s3,-100(s0)
     a1a:	fa942223          	sw	s1,-92(s0)
     a1e:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a22:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a26:	4785                	li	a5,1
     a28:	1127c163          	blt	a5,s2,b2a <generate_keys+0x24a>
     a2c:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a2e:	03600693          	li	a3,54
     a32:	10f6d363          	bge	a3,a5,b38 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a36:	4781                	li	a5,0
        random_keys[i] = f[i];
     a38:	00001697          	auipc	a3,0x1
     a3c:	05468693          	addi	a3,a3,84 # 1a8c <random_keys>
    for(i = 0; i < N; ++i){
     a40:	1127ca63          	blt	a5,s2,b54 <generate_keys+0x274>
     a44:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a48:	00191993          	slli	s3,s2,0x1
     a4c:	87ca                	mv	a5,s2
     a4e:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a50:	00001617          	auipc	a2,0x1
     a54:	03c60613          	addi	a2,a2,60 # 1a8c <random_keys>
    for(i = N; i < (2*N); ++i){
     a58:	1137c963          	blt	a5,s3,b6a <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a5c:	448d                	li	s1,3
     a5e:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a62:	86de                	mv	a3,s7
     a64:	8656                	mv	a2,s5
     a66:	e1840593          	addi	a1,s0,-488
     a6a:	8552                	mv	a0,s4
     a6c:	3185                	jal	6cc <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a6e:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a70:	00001697          	auipc	a3,0x1
     a74:	01c68693          	addi	a3,a3,28 # 1a8c <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a78:	1097c163          	blt	a5,s1,b7a <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     a7c:	8656                	mv	a2,s5
     a7e:	86da                	mv	a3,s6
     a80:	e1840593          	addi	a1,s0,-488
     a84:	8552                	mv	a0,s4
     a86:	3199                	jal	6cc <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     a88:	5751                	li	a4,-12
     a8a:	02e90733          	mul	a4,s2,a4
     a8e:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     a90:	00001617          	auipc	a2,0x1
     a94:	ffc60613          	addi	a2,a2,-4 # 1a8c <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     a98:	0fa4c963          	blt	s1,s10,b8a <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     a9c:	4701                	li	a4,0
     a9e:	85ca                	mv	a1,s2
     aa0:	86ca                	mv	a3,s2
     aa2:	8666                	mv	a2,s9
     aa4:	30e5                	jal	38c <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     aa6:	87aa                	mv	a5,a0
     aa8:	4701                	li	a4,0
     aaa:	fff98593          	addi	a1,s3,-1
     aae:	0eb74863          	blt	a4,a1,b9e <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ab2:	86d6                	mv	a3,s5
     ab4:	875a                	mv	a4,s6
     ab6:	8652                	mv	a2,s4
     ab8:	3491                	jal	4fc <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     aba:	4795                	li	a5,5
     abc:	02f907b3          	mul	a5,s2,a5
     ac0:	098a                	slli	s3,s3,0x2
     ac2:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ac4:	00001697          	auipc	a3,0x1
     ac8:	fc868693          	addi	a3,a3,-56 # 1a8c <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     acc:	0991                	addi	s3,s3,4
     ace:	0efc4063          	blt	s8,a5,bae <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     ad2:	4699                	li	a3,6
     ad4:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     ad6:	00001617          	auipc	a2,0x1
     ada:	fb660613          	addi	a2,a2,-74 # 1a8c <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     ade:	02d906b3          	mul	a3,s2,a3
     ae2:	02a90933          	mul	s2,s2,a0
     ae6:	0cf6dc63          	bge	a3,a5,bbe <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
     aea:	e1040113          	addi	sp,s0,-496
     aee:	1ec12083          	lw	ra,492(sp)
     af2:	1e812403          	lw	s0,488(sp)
     af6:	1e412483          	lw	s1,484(sp)
     afa:	1e012903          	lw	s2,480(sp)
     afe:	1dc12983          	lw	s3,476(sp)
     b02:	1d812a03          	lw	s4,472(sp)
     b06:	1d412a83          	lw	s5,468(sp)
     b0a:	1d012b03          	lw	s6,464(sp)
     b0e:	1cc12b83          	lw	s7,460(sp)
     b12:	1c812c03          	lw	s8,456(sp)
     b16:	1c412c83          	lw	s9,452(sp)
     b1a:	1c012d03          	lw	s10,448(sp)
     b1e:	00001517          	auipc	a0,0x1
     b22:	f6e50513          	addi	a0,a0,-146 # 1a8c <random_keys>
     b26:	617d                	addi	sp,sp,496
     b28:	8082                	ret
        polyR[i] = 0;
     b2a:	00279713          	slli	a4,a5,0x2
     b2e:	9752                	add	a4,a4,s4
     b30:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b34:	0785                	addi	a5,a5,1
     b36:	bdcd                	j	a28 <generate_keys+0x148>
        f[i] = 0;
     b38:	00279713          	slli	a4,a5,0x2
     b3c:	e1840613          	addi	a2,s0,-488
     b40:	963a                	add	a2,a2,a4
     b42:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b46:	ef440613          	addi	a2,s0,-268
     b4a:	9732                	add	a4,a4,a2
     b4c:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b50:	0785                	addi	a5,a5,1
     b52:	b5c5                	j	a32 <generate_keys+0x152>
        random_keys[i] = f[i];
     b54:	00279713          	slli	a4,a5,0x2
     b58:	e1840593          	addi	a1,s0,-488
     b5c:	00e68633          	add	a2,a3,a4
     b60:	972e                	add	a4,a4,a1
     b62:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b64:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b66:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b68:	bde1                	j	a40 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     b6a:	430c                	lw	a1,0(a4)
     b6c:	00279693          	slli	a3,a5,0x2
     b70:	96b2                	add	a3,a3,a2
     b72:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b74:	0785                	addi	a5,a5,1
     b76:	0711                	addi	a4,a4,4
     b78:	b5c5                	j	a58 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     b7a:	4110                	lw	a2,0(a0)
     b7c:	00279713          	slli	a4,a5,0x2
     b80:	9736                	add	a4,a4,a3
     b82:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     b84:	0785                	addi	a5,a5,1
     b86:	0511                	addi	a0,a0,4
     b88:	bdc5                	j	a78 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     b8a:	00249793          	slli	a5,s1,0x2
     b8e:	00f706b3          	add	a3,a4,a5
     b92:	96aa                	add	a3,a3,a0
     b94:	4294                	lw	a3,0(a3)
     b96:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     b98:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     b9a:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     b9c:	bdf5                	j	a98 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     b9e:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     ba0:	0705                	addi	a4,a4,1
     ba2:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     ba4:	037686b3          	mul	a3,a3,s7
     ba8:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bac:	b709                	j	aae <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bae:	ff89a603          	lw	a2,-8(s3)
     bb2:	002c1713          	slli	a4,s8,0x2
     bb6:	9736                	add	a4,a4,a3
     bb8:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bba:	0c05                	addi	s8,s8,1
     bbc:	bf01                	j	acc <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
     bbe:	00279713          	slli	a4,a5,0x2
     bc2:	00e605b3          	add	a1,a2,a4
     bc6:	974a                	add	a4,a4,s2
     bc8:	9752                	add	a4,a4,s4
     bca:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bcc:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     bce:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     bd0:	bf19                	j	ae6 <generate_keys+0x206>

00000bd2 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	7115                	addi	sp,sp,-224
     bd4:	cda2                	sw	s0,216(sp)
     bd6:	cba6                	sw	s1,212(sp)
     bd8:	c9ca                	sw	s2,208(sp)
     bda:	842a                	mv	s0,a0
     bdc:	892e                	mv	s2,a1
     bde:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be0:	00000597          	auipc	a1,0x0
     be4:	49058593          	addi	a1,a1,1168 # 1070 <_endtext>
     be8:	0c000613          	li	a2,192
     bec:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bee:	cf86                	sw	ra,220(sp)
     bf0:	c7ce                	sw	s3,204(sp)
     bf2:	c5d2                	sw	s4,200(sp)
     bf4:	89ba                	mv	s3,a4
     bf6:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf8:	2265                	jal	da0 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     bfa:	4781                	li	a5,0
     bfc:	860a                	mv	a2,sp
     bfe:	874a                	mv	a4,s2
     c00:	03000693          	li	a3,48
     c04:	85a2                	mv	a1,s0
     c06:	8552                	mv	a0,s4
     c08:	db2ff0ef          	jal	ra,1ba <polymult>
     c0c:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     c0e:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c12:	00f506b3          	add	a3,a0,a5
     c16:	00f485b3          	add	a1,s1,a5
     c1a:	4298                	lw	a4,0(a3)
     c1c:	418c                	lw	a1,0(a1)
     c1e:	0791                	addi	a5,a5,4
     c20:	972e                	add	a4,a4,a1
     c22:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c24:	fec797e3          	bne	a5,a2,c12 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c28:	00141493          	slli	s1,s0,0x1
     c2c:	00140693          	addi	a3,s0,1
     c30:	874a                	mv	a4,s2
     c32:	864e                	mv	a2,s3
     c34:	85a6                	mv	a1,s1
     c36:	30d9                	jal	4fc <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c38:	478d                	li	a5,3
     c3a:	02f40433          	mul	s0,s0,a5
     c3e:	87aa                	mv	a5,a0
     c40:	0084ca63          	blt	s1,s0,c54 <ntru_encyrpt+0x82>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c44:	40fe                	lw	ra,220(sp)
     c46:	446e                	lw	s0,216(sp)
     c48:	44de                	lw	s1,212(sp)
     c4a:	494e                	lw	s2,208(sp)
     c4c:	49be                	lw	s3,204(sp)
     c4e:	4a2e                	lw	s4,200(sp)
     c50:	612d                	addi	sp,sp,224
     c52:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c54:	00249713          	slli	a4,s1,0x2
     c58:	972a                	add	a4,a4,a0
     c5a:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c5c:	0485                	addi	s1,s1,1
     c5e:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c60:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c64:	bff1                	j	c40 <ntru_encyrpt+0x6e>

00000c66 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	7179                	addi	sp,sp,-48
     c68:	d422                	sw	s0,40(sp)
     c6a:	ce4e                	sw	s3,28(sp)
     c6c:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c6e:	498d                	li	s3,3
     c70:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c74:	d04a                	sw	s2,32(sp)
     c76:	ca56                	sw	s5,20(sp)
     c78:	c65e                	sw	s7,12(sp)
     c7a:	8932                	mv	s2,a2
     c7c:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7e:	863e                	mv	a2,a5
     c80:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c82:	8aae                	mv	s5,a1
     c84:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c86:	85a2                	mv	a1,s0
     c88:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8a:	d606                	sw	ra,44(sp)
     c8c:	d226                	sw	s1,36(sp)
     c8e:	cc52                	sw	s4,24(sp)
     c90:	c85a                	sw	s6,16(sp)
     c92:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c94:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	ef4ff0ef          	jal	ra,38c <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c9c:	00140b13          	addi	s6,s0,1
     ca0:	874a                	mv	a4,s2
     ca2:	86da                	mv	a3,s6
     ca4:	8652                	mv	a2,s4
     ca6:	85a6                	mv	a1,s1
     ca8:	3891                	jal	4fc <polydiv>
     caa:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	87aa                	mv	a5,a0
     cae:	872a                	mv	a4,a0
     cb0:	86a6                	mv	a3,s1
     cb2:	0536c163          	blt	a3,s3,cf4 <ntru_deceypt+0x8e>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cb6:	4589                	li	a1,2
     cb8:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cbc:	4701                	li	a4,0
     cbe:	04874463          	blt	a4,s0,d06 <ntru_deceypt+0xa0>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     cc2:	4701                	li	a4,0
     cc4:	86a2                	mv	a3,s0
     cc6:	85a2                	mv	a1,s0
     cc8:	855e                	mv	a0,s7
     cca:	ec2ff0ef          	jal	ra,38c <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cce:	8756                	mv	a4,s5
     cd0:	86da                	mv	a3,s6
     cd2:	8652                	mv	a2,s4
     cd4:	85a6                	mv	a1,s1
     cd6:	301d                	jal	4fc <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd8:	87aa                	mv	a5,a0
     cda:	0334cf63          	blt	s1,s3,d18 <ntru_deceypt+0xb2>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     cde:	50b2                	lw	ra,44(sp)
     ce0:	5422                	lw	s0,40(sp)
     ce2:	5492                	lw	s1,36(sp)
     ce4:	5902                	lw	s2,32(sp)
     ce6:	49f2                	lw	s3,28(sp)
     ce8:	4a62                	lw	s4,24(sp)
     cea:	4ad2                	lw	s5,20(sp)
     cec:	4b42                	lw	s6,16(sp)
     cee:	4bb2                	lw	s7,12(sp)
     cf0:	6145                	addi	sp,sp,48
     cf2:	8082                	ret
        a2[i-(2*N)] = a2[i];
     cf4:	00269593          	slli	a1,a3,0x2
     cf8:	95b2                	add	a1,a1,a2
     cfa:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfc:	0685                	addi	a3,a3,1
     cfe:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d00:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d04:	b77d                	j	cb2 <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
     d06:	4394                	lw	a3,0(a5)
     d08:	00d5d563          	bge	a1,a3,d12 <ntru_deceypt+0xac>
            a2[i] = (-1)*(q-a2[i]);
     d0c:	412686b3          	sub	a3,a3,s2
     d10:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d12:	0705                	addi	a4,a4,1
     d14:	0791                	addi	a5,a5,4
     d16:	b765                	j	cbe <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
     d18:	00249713          	slli	a4,s1,0x2
     d1c:	972a                	add	a4,a4,a0
     d1e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	0485                	addi	s1,s1,1
     d22:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d24:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d28:	bf4d                	j	cda <ntru_deceypt+0x74>

00000d2a <default_exc_handler>:
  jal x0, default_exc_handler
     d2a:	0000006f          	j	d2a <default_exc_handler>

00000d2e <reset_handler>:
  mv  x1, x0
     d2e:	00000093          	li	ra,0
  mv  x2, x1
     d32:	8106                	mv	sp,ra
  mv  x3, x1
     d34:	8186                	mv	gp,ra
  mv  x4, x1
     d36:	8206                	mv	tp,ra
  mv  x5, x1
     d38:	8286                	mv	t0,ra
  mv  x6, x1
     d3a:	8306                	mv	t1,ra
  mv  x7, x1
     d3c:	8386                	mv	t2,ra
  mv  x8, x1
     d3e:	8406                	mv	s0,ra
  mv  x9, x1
     d40:	8486                	mv	s1,ra
  mv x10, x1
     d42:	8506                	mv	a0,ra
  mv x11, x1
     d44:	8586                	mv	a1,ra
  mv x12, x1
     d46:	8606                	mv	a2,ra
  mv x13, x1
     d48:	8686                	mv	a3,ra
  mv x14, x1
     d4a:	8706                	mv	a4,ra
  mv x15, x1
     d4c:	8786                	mv	a5,ra
  mv x16, x1
     d4e:	8806                	mv	a6,ra
  mv x17, x1
     d50:	8886                	mv	a7,ra
  mv x18, x1
     d52:	8906                	mv	s2,ra
  mv x19, x1
     d54:	8986                	mv	s3,ra
  mv x20, x1
     d56:	8a06                	mv	s4,ra
  mv x21, x1
     d58:	8a86                	mv	s5,ra
  mv x22, x1
     d5a:	8b06                	mv	s6,ra
  mv x23, x1
     d5c:	8b86                	mv	s7,ra
  mv x24, x1
     d5e:	8c06                	mv	s8,ra
  mv x25, x1
     d60:	8c86                	mv	s9,ra
  mv x26, x1
     d62:	8d06                	mv	s10,ra
  mv x27, x1
     d64:	8d86                	mv	s11,ra
  mv x28, x1
     d66:	8e06                	mv	t3,ra
  mv x29, x1
     d68:	8e86                	mv	t4,ra
  mv x30, x1
     d6a:	8f06                	mv	t5,ra
  mv x31, x1
     d6c:	8f86                	mv	t6,ra
  la   x2, _stack_start
     d6e:	0000f117          	auipc	sp,0xf
     d72:	29210113          	addi	sp,sp,658 # 10000 <_stack_start>

00000d76 <_start>:
  la x26, _bss_start
     d76:	00000d17          	auipc	s10,0x0
     d7a:	47ed0d13          	addi	s10,s10,1150 # 11f4 <_bss_start>
  la x27, _bss_end
     d7e:	00001d97          	auipc	s11,0x1
     d82:	206d8d93          	addi	s11,s11,518 # 1f84 <_bss_end>
  bge x26, x27, zero_loop_end
     d86:	01bd5763          	bge	s10,s11,d94 <main_entry>

00000d8a <zero_loop>:
  sw x0, 0(x26)
     d8a:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     d8e:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     d90:	ffaddde3          	bge	s11,s10,d8a <zero_loop>

00000d94 <main_entry>:
  addi x10, x0, 0
     d94:	00000513          	li	a0,0
  addi x11, x0, 0
     d98:	00000593          	li	a1,0
  jal x1, main
     d9c:	18a000ef          	jal	ra,f26 <main>

00000da0 <memcpy>:
     da0:	00a5c7b3          	xor	a5,a1,a0
     da4:	8b8d                	andi	a5,a5,3
     da6:	00c508b3          	add	a7,a0,a2
     daa:	e7a1                	bnez	a5,df2 <memcpy+0x52>
     dac:	478d                	li	a5,3
     dae:	04c7f263          	bgeu	a5,a2,df2 <memcpy+0x52>
     db2:	00357793          	andi	a5,a0,3
     db6:	872a                	mv	a4,a0
     db8:	eba9                	bnez	a5,e0a <memcpy+0x6a>
     dba:	ffc8f613          	andi	a2,a7,-4
     dbe:	fe060793          	addi	a5,a2,-32
     dc2:	06f76763          	bltu	a4,a5,e30 <memcpy+0x90>
     dc6:	02c77363          	bgeu	a4,a2,dec <memcpy+0x4c>
     dca:	86ae                	mv	a3,a1
     dcc:	87ba                	mv	a5,a4
     dce:	0006a803          	lw	a6,0(a3)
     dd2:	0791                	addi	a5,a5,4
     dd4:	0691                	addi	a3,a3,4
     dd6:	ff07ae23          	sw	a6,-4(a5)
     dda:	fec7eae3          	bltu	a5,a2,dce <memcpy+0x2e>
     dde:	fff60793          	addi	a5,a2,-1
     de2:	8f99                	sub	a5,a5,a4
     de4:	9bf1                	andi	a5,a5,-4
     de6:	0791                	addi	a5,a5,4
     de8:	973e                	add	a4,a4,a5
     dea:	95be                	add	a1,a1,a5
     dec:	01176663          	bltu	a4,a7,df8 <memcpy+0x58>
     df0:	8082                	ret
     df2:	872a                	mv	a4,a0
     df4:	ff157ee3          	bgeu	a0,a7,df0 <memcpy+0x50>
     df8:	0005c783          	lbu	a5,0(a1)
     dfc:	0705                	addi	a4,a4,1
     dfe:	0585                	addi	a1,a1,1
     e00:	fef70fa3          	sb	a5,-1(a4)
     e04:	ff176ae3          	bltu	a4,a7,df8 <memcpy+0x58>
     e08:	8082                	ret
     e0a:	0005c683          	lbu	a3,0(a1)
     e0e:	0705                	addi	a4,a4,1
     e10:	00377793          	andi	a5,a4,3
     e14:	fed70fa3          	sb	a3,-1(a4)
     e18:	0585                	addi	a1,a1,1
     e1a:	d3c5                	beqz	a5,dba <memcpy+0x1a>
     e1c:	0005c683          	lbu	a3,0(a1)
     e20:	0705                	addi	a4,a4,1
     e22:	00377793          	andi	a5,a4,3
     e26:	fed70fa3          	sb	a3,-1(a4)
     e2a:	0585                	addi	a1,a1,1
     e2c:	fff9                	bnez	a5,e0a <memcpy+0x6a>
     e2e:	b771                	j	dba <memcpy+0x1a>
     e30:	41d4                	lw	a3,4(a1)
     e32:	0005a283          	lw	t0,0(a1)
     e36:	0085af83          	lw	t6,8(a1)
     e3a:	00c5af03          	lw	t5,12(a1)
     e3e:	0105ae83          	lw	t4,16(a1)
     e42:	0145ae03          	lw	t3,20(a1)
     e46:	0185a303          	lw	t1,24(a1)
     e4a:	01c5a803          	lw	a6,28(a1)
     e4e:	c354                	sw	a3,4(a4)
     e50:	5194                	lw	a3,32(a1)
     e52:	00572023          	sw	t0,0(a4)
     e56:	01f72423          	sw	t6,8(a4)
     e5a:	01e72623          	sw	t5,12(a4)
     e5e:	01d72823          	sw	t4,16(a4)
     e62:	01c72a23          	sw	t3,20(a4)
     e66:	00672c23          	sw	t1,24(a4)
     e6a:	01072e23          	sw	a6,28(a4)
     e6e:	d314                	sw	a3,32(a4)
     e70:	02470713          	addi	a4,a4,36
     e74:	02458593          	addi	a1,a1,36
     e78:	faf76ce3          	bltu	a4,a5,e30 <memcpy+0x90>
     e7c:	b7a9                	j	dc6 <memcpy+0x26>

00000e7e <memset>:
     e7e:	433d                	li	t1,15
     e80:	872a                	mv	a4,a0
     e82:	02c37363          	bgeu	t1,a2,ea8 <memset+0x2a>
     e86:	00f77793          	andi	a5,a4,15
     e8a:	efbd                	bnez	a5,f08 <memset+0x8a>
     e8c:	e5ad                	bnez	a1,ef6 <memset+0x78>
     e8e:	ff067693          	andi	a3,a2,-16
     e92:	8a3d                	andi	a2,a2,15
     e94:	96ba                	add	a3,a3,a4
     e96:	c30c                	sw	a1,0(a4)
     e98:	c34c                	sw	a1,4(a4)
     e9a:	c70c                	sw	a1,8(a4)
     e9c:	c74c                	sw	a1,12(a4)
     e9e:	0741                	addi	a4,a4,16
     ea0:	fed76be3          	bltu	a4,a3,e96 <memset+0x18>
     ea4:	e211                	bnez	a2,ea8 <memset+0x2a>
     ea6:	8082                	ret
     ea8:	40c306b3          	sub	a3,t1,a2
     eac:	068a                	slli	a3,a3,0x2
     eae:	00000297          	auipc	t0,0x0
     eb2:	9696                	add	a3,a3,t0
     eb4:	00a68067          	jr	10(a3)
     eb8:	00b70723          	sb	a1,14(a4)
     ebc:	00b706a3          	sb	a1,13(a4)
     ec0:	00b70623          	sb	a1,12(a4)
     ec4:	00b705a3          	sb	a1,11(a4)
     ec8:	00b70523          	sb	a1,10(a4)
     ecc:	00b704a3          	sb	a1,9(a4)
     ed0:	00b70423          	sb	a1,8(a4)
     ed4:	00b703a3          	sb	a1,7(a4)
     ed8:	00b70323          	sb	a1,6(a4)
     edc:	00b702a3          	sb	a1,5(a4)
     ee0:	00b70223          	sb	a1,4(a4)
     ee4:	00b701a3          	sb	a1,3(a4)
     ee8:	00b70123          	sb	a1,2(a4)
     eec:	00b700a3          	sb	a1,1(a4)
     ef0:	00b70023          	sb	a1,0(a4)
     ef4:	8082                	ret
     ef6:	0ff5f593          	andi	a1,a1,255
     efa:	00859693          	slli	a3,a1,0x8
     efe:	8dd5                	or	a1,a1,a3
     f00:	01059693          	slli	a3,a1,0x10
     f04:	8dd5                	or	a1,a1,a3
     f06:	b761                	j	e8e <memset+0x10>
     f08:	00279693          	slli	a3,a5,0x2
     f0c:	00000297          	auipc	t0,0x0
     f10:	9696                	add	a3,a3,t0
     f12:	8286                	mv	t0,ra
     f14:	fa8680e7          	jalr	-88(a3)
     f18:	8096                	mv	ra,t0
     f1a:	17c1                	addi	a5,a5,-16
     f1c:	8f1d                	sub	a4,a4,a5
     f1e:	963e                	add	a2,a2,a5
     f20:	f8c374e3          	bgeu	t1,a2,ea8 <memset+0x2a>
     f24:	b7a5                	j	e8c <memset+0xe>

00000f26 <main>:

int main(){
     f26:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f2a:	0c000613          	li	a2,192
     f2e:	00000597          	auipc	a1,0x0
     f32:	20258593          	addi	a1,a1,514 # 1130 <_endtext+0xc0>
     f36:	0068                	addi	a0,sp,12
int main(){
     f38:	42112623          	sw	ra,1068(sp)
     f3c:	42812423          	sw	s0,1064(sp)
     f40:	42912223          	sw	s1,1060(sp)
     f44:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f48:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f4c:	3d91                	jal	da0 <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f4e:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f52:	00000417          	auipc	s0,0x0
     f56:	29e40413          	addi	s0,s0,670 # 11f0 <_edata>
    keys = generate_keys(N, p, q);
     f5a:	06500613          	li	a2,101
     f5e:	458d                	li	a1,3
     f60:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     f64:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     f66:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     f6a:	3a9d                	jal	8e0 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     f6c:	4781                	li	a5,0
     f6e:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f70:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f74:	00f506b3          	add	a3,a0,a5
     f78:	4290                	lw	a2,0(a3)
     f7a:	1314                	addi	a3,sp,416
     f7c:	96be                	add	a3,a3,a5
     f7e:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     f80:	0791                	addi	a5,a5,4
     f82:	fee799e3          	bne	a5,a4,f74 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     f86:	1cd8                	addi	a4,sp,628
     f88:	1a850793          	addi	a5,a0,424
     f8c:	27c50693          	addi	a3,a0,636
     f90:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     f92:	4390                	lw	a2,0(a5)
     f94:	0791                	addi	a5,a5,4
     f96:	0711                	addi	a4,a4,4
     f98:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     f9c:	fed79be3          	bne	a5,a3,f92 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fa0:	01f8                	addi	a4,sp,204
     fa2:	35050793          	addi	a5,a0,848
     fa6:	42450613          	addi	a2,a0,1060
     faa:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fac:	438c                	lw	a1,0(a5)
     fae:	0791                	addi	a5,a5,4
     fb0:	0711                	addi	a4,a4,4
     fb2:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     fb6:	fec79be3          	bne	a5,a2,fac <main+0x86>
     fba:	06b0                	addi	a2,sp,840
     fbc:	4fc50513          	addi	a0,a0,1276
     fc0:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     fc2:	4398                	lw	a4,0(a5)
     fc4:	0791                	addi	a5,a5,4
     fc6:	0611                	addi	a2,a2,4
     fc8:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     fcc:	fea79be3          	bne	a5,a0,fc2 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
     fd0:	bbbbc4b7          	lui	s1,0xbbbbc
     fd4:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd8:	8742                	mv	a4,a6
     fda:	0070                	addi	a2,sp,12
     fdc:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
     fe0:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fe4:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
     fe8:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fea:	36e5                	jal	bd2 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
     fec:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
     fee:	ccccd4b7          	lui	s1,0xccccd
     ff2:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ff6:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
     ff8:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ffa:	458d                	li	a1,3
     ffc:	874a                	mv	a4,s2
     ffe:	34810813          	addi	a6,sp,840
    1002:	1314                	addi	a3,sp,416
    1004:	06500613          	li	a2,101
    1008:	03500513          	li	a0,53
    100c:	39a9                	jal	c66 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    100e:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1012:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    1016:	c004                	sw	s1,0(s0)
    1018:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    101a:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    101e:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    1022:	0070                	addi	a2,sp,12
    1024:	00f506b3          	add	a3,a0,a5
    1028:	963e                	add	a2,a2,a5
    102a:	4210                	lw	a2,0(a2)
    102c:	4294                	lw	a3,0(a3)
    102e:	02d60363          	beq	a2,a3,1054 <main+0x12e>
            resultkon[0] = 0xBABABABA;
    1032:	babac7b7          	lui	a5,0xbabac
    1036:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    103a:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    103c:	42c12083          	lw	ra,1068(sp)
    1040:	42812403          	lw	s0,1064(sp)
    1044:	42412483          	lw	s1,1060(sp)
    1048:	42012903          	lw	s2,1056(sp)
    104c:	4501                	li	a0,0
    104e:	43010113          	addi	sp,sp,1072
    1052:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    1054:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    1056:	0791                	addi	a5,a5,4
    1058:	fcb795e3          	bne	a5,a1,1022 <main+0xfc>
    105c:	b7c5                	j	103c <main+0x116>

0000105e <__CTOR_LIST__>:
	...

00001066 <__CTOR_END__>:
	...

0000106e <__DTOR_END__>:
	...

Disassembly of section .rodata:

00001070 <.rodata>:
    1070:	0001                	nop
    1072:	0000                	unimp
    1074:	ffff                	0xffff
    1076:	ffff                	0xffff
    1078:	0000                	unimp
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	0000                	unimp
    1080:	ffff                	0xffff
    1082:	ffff                	0xffff
    1084:	0001                	nop
    1086:	0000                	unimp
    1088:	ffff                	0xffff
    108a:	ffff                	0xffff
    108c:	0000                	unimp
    108e:	0000                	unimp
    1090:	0001                	nop
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	0000                	unimp
    1098:	0000                	unimp
    109a:	0000                	unimp
    109c:	ffff                	0xffff
    109e:	ffff                	0xffff
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	ffff                	0xffff
    10a6:	ffff                	0xffff
    10a8:	0001                	nop
    10aa:	0000                	unimp
    10ac:	0000                	unimp
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	0000                	unimp
    10ba:	0000                	unimp
    10bc:	ffff                	0xffff
    10be:	ffff                	0xffff
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0000                	unimp
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	ffff                	0xffff
    10e2:	ffff                	0xffff
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	ffff                	0xffff
    10ea:	ffff                	0xffff
    10ec:	0000                	unimp
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	ffff                	0xffff
    10f6:	ffff                	0xffff
    10f8:	0000                	unimp
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0000                	unimp
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0000                	unimp
    111a:	0000                	unimp
    111c:	ffff                	0xffff
    111e:	ffff                	0xffff
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	ffff                	0xffff
    1126:	ffff                	0xffff
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0002                	c.slli64	zero
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0002                	c.slli64	zero
    114e:	0000                	unimp
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0000                	unimp
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0000                	unimp
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0002                	c.slli64	zero
    1176:	0000                	unimp
    1178:	0000                	unimp
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0000                	unimp
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0000                	unimp
    119a:	0000                	unimp
    119c:	0002                	c.slli64	zero
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0002                	c.slli64	zero
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0000                	unimp
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0002                	c.slli64	zero
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0002                	c.slli64	zero
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0002                	c.slli64	zero
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000011f0 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    11f0:	bebe                	fsd	fa5,376(sp)
    11f2:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

000011f4 <_bss_start>:
	...

0000144c <product2>:
	...

000016a4 <result>:
	...

000018fc <ti_2>:
	...

00001a8c <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1d75                	addi	s10,s10,-3
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05dc                	addi	a5,sp,708
       e:	0000                	unimp
      10:	300c                	fld	fa1,32(s0)
      12:	eb000003          	lb	zero,-336(zero) # fffffeb0 <_stack_start+0xfffefeb0>
      16:	68000003          	lb	zero,1664(zero) # 680 <polydiv+0x184>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
      2c:	0102                	c.slli64	sp
      2e:	6508                	flw	fa0,8(a0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0486                	slli	s1,s1,0x1
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002c107          	flq	ft2,0(t0) # f0c <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7d04                	flw	fs1,56(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0304                	addi	s1,sp,384
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	d806                	sw	ra,48(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	5906                	lw	s2,96(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	7c06                	flw	fs8,96(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	02fe                	slli	t0,t0,0x1f
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0225                	addi	tp,tp,9
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x122>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
            a1[length-1] = a2[length-1];
      e4:	00000543          	fmadd.s	fa0,ft0,ft0,ft0,rne
            a1[length-2] = a2[length-2];
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
} //end of function
      f0:	4b0c                	lw	a1,16(a4)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    asm volatile(
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	b606                	fsd	ft1,296(sp)
            for (i = 0; i < (length / 3); i++) {
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
    asm volatile(
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	af06                	fsd	ft1,408(sp)
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0000                	unimp
     118:	4906                	lw	s2,64(sp)
    asm volatile(
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	dd06                	sw	ra,184(sp)
     126:	0001                	nop
    asm volatile(
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
    switch(length%3) {
     12e:	0000                	unimp
     130:	ee0e                	fsw	ft3,28(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	000004d7          	0x4d7
            for (i = 0; i < (length / 3); i++) {
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
            for (i = 0; i < ((length-2) / 3); i++) {
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	1f0c                	addi	a1,sp,944
    asm volatile(
     158:	0005                	c.nop	1
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
            a1[length-1] = a1[length-1] % mod;
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	000001d7          	0x1d7
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	500c                	lw	a1,32(s0)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
    asm volatile(
     17a:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
            a1[length-2] = a1[length-2] % mod;
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
} //end of function
     18e:	0000                	unimp
    asm volatile(
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
            for (i = 0; i < (length / 3); i++) {
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
    asm volatile(
     19e:	0000                	unimp
     1a0:	150e                	slli	a0,a0,0x23
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
    asm volatile(
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	680c                	flw	fa1,16(s0)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	0122                	slli	sp,sp,0x8
     1ca:	0000                	unimp
    int line[size_b][size_a + size_b];
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	f80c                	fsw	fa1,48(s0)
     1d6:	0006                	c.slli	zero,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
    int pola[size_a];
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03a2                	slli	t2,t2,0x8
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
    int line[size_b][size_a + size_b];
     1ec:	1000                	addi	s0,sp,32
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	5a0c                	lw	a1,48(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    int line[size_b][size_a + size_b];
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
    int pola[size_a];
     1f8:	0000                	unimp
    int line[size_b][size_a + size_b];
     1fa:	0c14                	addi	a3,sp,528
     1fc:	0655                	addi	a2,a2,21
     1fe:	0000                	unimp
    int pola[size_a];
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
    int polb[size_b];
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	900c                	0x900c
    int pola[size_a];
     20a:	0004                	0x4
    int polb[size_b];
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	005d                	c.nop	23
    int pola[size_a];
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	06ba                	slli	a3,a3,0xe
    int line[size_b][size_a + size_b];
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
    int polb[size_b];
     21c:	5d09                	li	s10,-30
            line[i][j] = 0;
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
    for (i = 0; i < size_b; ++i){
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
            product[j] = 0;
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     230:	0c00                	addi	s0,sp,528
     232:	01bd                	addi	gp,gp,15
    array_equ(pola,a,size_a);
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
    array_mod(pola,mod,size_a);
     24c:	00000593          	li	a1,0
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
    array_equ(polb,b,size_b);
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	0160                	addi	s0,sp,140
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
    array_mod(polb,mod,size_b);
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
    if(star_mult == 1){
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f bb11 0003      	0x3bb11001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
        for (j = size_b -1; j >= 0; j = j-1){
     286:	d70c                	sw	a1,40(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
            product[j] = 0;
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0xf6>
     290:	0000                	unimp
            line[i][j] = 0;
     292:	0c00                	addi	s0,sp,528
     294:	000004ef          	jal	s1,294 <polymult+0xda>
            product[j] = 0;
     298:	6404                	flw	fs1,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	d20c                	sw	a1,32(a2)
    for (i = 0; i < size_b; ++i){
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
    if(star_mult == 1){
     2ae:	0131                	addi	sp,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	231e                	fld	ft6,448(sp)
    for (i = 0; i < size_b; ++i){
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
}
     2d6:	1300                	addi	s0,sp,416
     2d8:	9a0e                	add	s4,s4,gp
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x2e>
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	c10e                	sw	gp,128(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
            for (k = size_a-1; k >= 0; k = k-1 ){
     31a:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
            for (k = size_a-1; k >= 0; k = k-1 ){
     326:	005d                	c.nop	23
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	0159                	addi	sp,sp,22
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     344:	540c                	lw	a1,40(s0)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
            line[i][j] = line[i][j] % mod;
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0xb2>
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	005d                	c.nop	23
     368:	0000                	unimp
            product[j] += line[i][j];
     36a:	0c18                	addi	a4,sp,528
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	050c                	addi	a1,sp,640
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
        for(i = 0; i < size_b; ++i){
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	00000353          	fadd.s	ft6,ft0,ft0,rne
        for(i = 0; i < size_b; ++i){
     38a:	cc04                	sw	s1,24(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	f71d                	bnez	a4,2ba <polymult+0x100>
    int line[size_b][size_a + size_b];
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	530c                	lw	a1,32(a4)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
    int line[size_b][size_a + size_b];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06d4                	addi	a3,sp,836
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <array_mod+0x7a>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
    int line[size_b][size_a + size_b];
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult+0x1c6>
    int pola[size_a];
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
    int line[size_b][size_a + size_b];
     3ce:	005d                	c.nop	23
    int pola[size_a];
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
    int polb[size_b];
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
    int pola[size_a];
     3da:	3b11                	jal	ee <array_equ+0x5c>
    int polb[size_b];
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	9f0c                	0x9f0c
     3e2:	0006                	c.slli	zero,0x1
    int line[size_b][size_a + size_b];
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    int pola[size_a];
     3ec:	6c5f0f43          	0x6c5f0f43
    for (i = 0; i < size_b; ++i){
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x14e>
            product2[j] = 0;
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	6f0c                	flw	fa1,24(a4)
     3fc:	0001                	nop
    for (i = 0; i < size_b; ++i){
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
    array_equ(pola,a,size_a);
     406:	0c4c                	addi	a1,sp,532
     408:	0196                	slli	gp,gp,0x5
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
    array_equ(polb,b,size_b);
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
    if(star_mult == 1){
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x8c>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	032a                	slli	t1,t1,0xa
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	5800                	lw	s0,48(s0)
     42e:	c90c                	sw	a1,16(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
            product2[j] = 0;
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
            line[i][j] = 0;
     43a:	0c5c                	addi	a5,sp,532
     43c:	04a1                	addi	s1,s1,8
            product2[j] = 0;
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
    for (i = 0; i < size_b; ++i){
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <array_mod+0x62>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	1000                	addi	s0,sp,32
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (j = size_b -1; j >= 0; j = j-1){
     472:	00052717          	auipc	a4,0x52
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
        for(j=0;j<size_a+size_b-1;++j){
     47c:	bb08                	fsd	fa0,48(a4)
    for(i=0;i<size_b;++i){
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	047f                	0x47f
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
        for(j=0;j<size_a+size_b-1;++j){
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	0168                	addi	a0,sp,140
     492:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	0236                	slli	tp,tp,0xd
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	1402                	slli	s0,s0,0x20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	01e6                	slli	gp,gp,0x19
     4ae:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
            product2[j] += line[i][j];
     4b8:	180c                	addi	a1,sp,48
     4ba:	04ea                	slli	s1,s1,0x1a
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
            product2[j] += line[i][j];
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for(i=0;i<size_b;++i){
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
}
     4d4:	1814                	addi	a3,sp,48
     4d6:	0506                	slli	a0,a0,0x1
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
     4e4:	04f4                	addi	a3,sp,588
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	03cd                	addi	t2,t2,19
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
    int v[size_N];
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	04fc                	addi	a5,sp,588
    int v[size_N];
     502:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	02f6                	slli	t0,t0,0x1d
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0000020b          	0x20b
     520:	7b04                	flw	fs1,48(a4)
    int v[size_N];
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
    int q[size_N];
     528:	1844                	addi	s1,sp,52
     52a:	06ee                	slli	a3,a3,0x1b
     52c:	0000                	unimp
    int num_temp[size_N];
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
    int denum_temp[size_D];
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	0435                	addi	s0,s0,13
    int num_temp[size_N];
     53a:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	7d04                	flw	fs1,56(a0)
    int denum_temp[size_D];
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    int v[size_N];
     544:	184c                	addi	a1,sp,52
     546:	023e                	slli	tp,tp,0xf
       array_equ(num_temp,num,size_N);
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    int denum_temp[size_D];
     552:	1850                	addi	a2,sp,52
     554:	018e                	slli	gp,gp,0x3
       array_equ(num_temp,num,size_N);
     556:	0000                	unimp
       array_mod(num_temp, mod, size_N);
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
    int denum_temp[size_D];
     560:	1854                	addi	a3,sp,52
    array_equ(denum_temp,denum,size_D);
     562:	0478                	addi	a4,sp,524
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    array_mod(denum_temp,mod,size_D);
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	000003bb          	0x3bb
    for (i = 0; i < size_N; ++i){
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
    for (i = size_D-1; i >= 0; i = i-1){
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	d419                	beqz	s0,48c <polymult2+0x100>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
    for (i = 0; i < size_N; ++i){
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
        if ( (b_N*u)%mod == 1 )
     588:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	0695                	addi	a3,a3,5
     590:	0000                	unimp
        q[i] = 0;
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
        v[i] = 0;
     59a:	02dc                	addi	a5,sp,324
        q[i] = 0;
     59c:	4719                	li	a4,6
     59e:	0001                	nop
        v[i] = 0;
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
    for (i = 0; i < size_N; ++i){
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
        if( denum_temp[i] != 0 )
     5a8:	e000                	fsw	fs0,0(s0)
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	012c                	addi	a1,sp,136
        if ( (b_N*u)%mod == 1 )
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
    for (u = 0; u < mod; ++u){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        if( num_temp[i] != 0 )
     5bc:	c104                	sw	s1,0(a0)
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	046e                	slli	s0,s0,0x1b
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
    while (d >= d2){
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
    array_equ(result,q,size_N);
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
    for(i = size_N; i < (2*size_N); ++i){
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
        result[i] = num_temp[i-size_N];
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xe>
     5e8:	0005                	c.nop	1
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
}
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
        v[(d-d2)] = u*r_d;
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
        array_mod(v, mod, size_N);
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
        v[(d-d2)] = u*r_d;
     62a:	6715                	lui	a4,0x5
        array_mod(v, mod, size_N);
     62c:	0004                	0x4
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
        array_mod(product, mod, size_N);
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for (i = 0; i < size_N; ++i){
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
	array_mod(num_temp, mod, size_N);
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
        for(i = 0; i < size_N; ++i){
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
        array_mod(q, mod, size_N);
     65c:	000004af          	0x4af
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	5f1a                	lw	t5,164(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     676:	d718                	sw	a4,40(a4)
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x1a2>
        for (i = 0; i < size_N; ++i){
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     684:	9a18                	0x9a18
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     68a:	5d07012b          	0x5d07012b
            q[i] = q[i] + v[i];
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	a918                	fsd	fa4,16(a0)
     694:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
            q[i] = q[i] + v[i];
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
        for(i = 0; i < size_N; ++i){
     6a0:	1000                	addi	s0,sp,32
            if( num_temp[i] != 0 )
     6a2:	6804                	flw	fs1,16(s0)
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
            v[i] = 0;
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
        for (i = 0; i < size_N; ++i){
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
        result[i] = num_temp[i-size_N];
     6ba:	1800                	addi	s0,sp,48
     6bc:	0538                	addi	a4,sp,648
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0532                	slli	a0,a0,0xc
    int ri_2[size]; // MX-ring poly, a
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	1201                	addi	tp,tp,-32
    int ri_2[size]; // MX-ring poly, a
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	05aa                	slli	a1,a1,0xa
     6da:	0000                	unimp
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    int ri_2[size]; // MX-ring poly, a
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
    int ri[size];
     700:	3e18                	fld	fa4,56(a2)
     702:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ti[size];
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	8618                	0x8618
    int qi_1[size];
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
    int temp[size];
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	0400                	addi	s0,sp,512
     71c:	e918                	fsw	fa4,16(a0)
     71e:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
    int temp[size];
     724:	0b10                	addi	a2,sp,400
    for (i = 0; i < size; ++i) {
     726:	0008                	0x8
        ti_2[i] = 0;
     728:	0800                	addi	s0,sp,16
     72a:	c518                	sw	a4,8(a0)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
    array_equ(ri_2,polyR,size);
     736:	2400                	fld	fs0,8(s0)
     738:	f618                	fsw	fa4,40(a2)
     73a:	0001                	nop
    array_equ(ri_1,polyf,size);
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
    ti_1[0] = 1;
     744:	4800                	lw	s0,16(s0)
     746:	d218                	sw	a4,32(a2)
     748:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     752:	5000                	lw	s0,32(s0)
     754:	db18                	sw	a4,48(a4)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
    array_mod(ri_2,mod,size);
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
    array_mod(ri_1,mod,size);
     762:	dd18                	sw	a4,56(a0)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	e018                	fsw	fa4,0(s0)
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
    array_mod(temp,mod,size);
     78a:	7800                	flw	fs0,48(s0)
     78c:	8518                	0x8518
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	dd18                	sw	a4,56(a0)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
    array_equ(qi_1,res1,size);
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
    array_mod(qi_1,mod,size);
     7a6:	8800                	0x8800
     7a8:	bc18                	fsd	fa4,56(s0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	af18                	fsd	fa4,24(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
    array_equ(temp,res2,size);
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
    array_mod(temp,mod,size);
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9e18                	0x9e18
    array_mod(ti,mod,size);
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
array_equ(ri_2,ri_1,size);
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
array_equ(ri_1,ri,size);
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
array_equ(ti_2,ti_1,size);
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
array_equ(ti_1,ti,size);
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        controlR = 0;
     7fc:	7d18                	flw	fa4,56(a0)
        for (i = 0; i < N + 1; ++i) {
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
    while (controlR != 0) {
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     808:	cc00                	sw	s0,24(s0)
            if (((ri_2[0] * j) % mod) == 1)
     80a:	0900                	addi	s0,sp,144
        for (j = 0; j < mod; ++j) {
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
    }
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
        ti_2[i] = 0;
     846:	0389                	addi	t2,t2,2
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
        ti_1[i] = 0;
     84e:	0862                	slli	a6,a6,0x18
        ti_2[i] = 0;
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
        ti_1[i] = 0;
     854:	0374                	addi	a3,sp,396
     856:	0000                	unimp
    for (i = 0; i < size; ++i) {
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
            ri[i - (N + 1)] = res[i];
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x54>
            ri[i - (N + 1)] = res[i];
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0069                	c.nop	26
            temp[i] = ri_2[i] - ri[i];
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     87e:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
        for (i = 0; i < N + 1; ++i) {
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
            ti[i] = ti_2[i] - temp[i];
     888:	000008a7          	0x8a7
     88c:	271d                	jal	fb2 <main+0x8c>
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
        for (i = 0; i < N + 1; ++i) {
     898:	1d00                	addi	s0,sp,688
            ti[i] = ti_2[i] - temp[i];
     89a:	06a5                	addi	a3,a3,9
     89c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
              qi_1[i] = 0;
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
            controlR += ri[i];
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
              qi_1[i] = 0;
     8b0:	690a                	flw	fs2,128(sp)
        for (i = 0; i < N + 1; ++i) {
     8b2:	0000                	unimp
            controlR += ri[i];
     8b4:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     8b6:	1e00                	addi	s0,sp,816
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
        for (j = 0; j < mod; ++j) {
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8de:	5d15                	li	s10,-27
int* generate_keys(int N, int p, int q){
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	d020                	sw	s0,96(s0)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05c9                	addi	a1,a1,18
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     91a:	c321                	beqz	a4,95a <generate_keys+0x7a>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	0095                	addi	ra,ra,5
     936:	7822                	flw	fa6,40(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	11f4                	addi	a3,sp,236
     946:	0000                	unimp
     948:	3f22                	fld	ft10,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	144c                	addi	a1,sp,548
     958:	0000                	unimp
     95a:	f722                	fsw	fs0,172(sp)
     95c:	0002                	c.slli64	zero
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	16a4                	addi	s1,sp,872
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	60220063          	beq	tp,sp,f7a <main+0x54>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	18fc                	addi	a5,sp,124
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
    int polyR[N+1];
     9a0:	00000097          	auipc	ra,0x0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9a4:	0a01                	addi	s4,s4,0
    int polyR[N+1];
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001a8c03          	lb	s8,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
    polyR[N] = 1;
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	2c24                	fld	fs1,88(s0)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	11f0                	addi	a2,sp,236
     9d6:	0000                	unimp
     9d8:	f325                	bnez	a4,938 <generate_keys+0x58>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	5d0502db          	0x5d0502db
     9e2:	0000                	unimp
     9e4:	2600                	fld	fs0,8(a2)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
     9f4:	03df 0000 dc01      	0xdc01000003df
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x132>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02dd                	addi	t0,t0,23
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0314                	addi	a3,sp,384
     a18:	0000                	unimp
     a1a:	de01                	beqz	a2,932 <generate_keys+0x52>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x154>
    polyR[0] = -1;
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
    for(i = 1; i < N; ++i){
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02df 5d09 0000      	0x5d0902df
    for (i = N; i < 55; ++i ){
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
    for(i = 0; i < N; ++i){
     a36:	02e0                	addi	s0,sp,332
        random_keys[i] = f[i];
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
    for(i = 0; i < N; ++i){
     a42:	02e1                	addi	t0,t0,24
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9a28                	0x9a28
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
        random_keys[i] = g[i-N];
     a50:	690902e3          	beq	s2,a6,18d4 <result+0x230>
     a54:	0300000b          	0x300000b
    for(i = N; i < (2*N); ++i){
     a58:	dc91                	beqz	s1,974 <generate_keys+0x94>
     a5a:	05712677          	0x5712677
    for(i = (2*N); i < (3*N); ++i){
     a5e:	0000                	unimp
     a60:	e401                	bnez	s0,a68 <generate_keys+0x188>
    fp = ext_euclid(polyR, f, (N+1), p);
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
    for(i = (2*N); i < (3*N); ++i){
     a6e:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     a70:	0100                	addi	s0,sp,128
     a72:	02e5                	addi	t0,t0,25
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
    for(i = (2*N); i < (3*N); ++i){
     a7a:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	e601                	bnez	a2,a8a <generate_keys+0x1aa>
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
    for(i = (3*N); i < (4*N); ++i){
     a88:	0000                	unimp
     a8a:	9c26                	add	s8,s8,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     a90:	af0902e7          	jalr	t0,-1296(s2) # 1af0 <random_keys+0x64>
     a94:	1200000b          	0x1200000b
    for(i = (3*N); i < (4*N); ++i){
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
    fg = polymult2(fq, N, g, N, 0);
     a9c:	0246                	slli	tp,tp,0x11
     a9e:	0000                	unimp
     aa0:	e801                	bnez	s0,ab0 <generate_keys+0x1d0>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
    for(i = 0; i < (2*N-1); ++i){
     aa6:	0000                	unimp
     aa8:	3f26                	fld	ft10,104(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	02e9                	addi	t0,t0,26
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0xd2>
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
    for(i = (4*N); i < (5*N); ++i){
     aba:	0069                	c.nop	26
     abc:	ea01                	bnez	a2,acc <generate_keys+0x1ec>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000f4e2b          	0xf4e2b
    for(i = (4*N); i < (5*N); ++i){
     acc:	6200                	flw	fs0,0(a2)
     ace:	001d                	c.nop	7
     ad0:	ec00                	fsw	fs0,24(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
        random_keys[i] = polyR[i-(5*N)];
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
    for(i = (5*N); i < (6*N+1); ++i){
     ade:	3003055b          	0x3003055b
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
}
     aea:	00c0                	addi	s0,sp,68
     aec:	000f6c2b          	0xf6c2b
     af0:	9500                	0x9500
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <reset_handler+0xc>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x136>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	0fec                	addi	a1,sp,988
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x164>
        polyR[i] = 0;
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x11d>
     b32:	2d00                	fld	fs0,24(a0)
    for(i = 1; i < N; ++i){
     b34:	100e                	c.slli	zero,0x23
     b36:	0000                	unimp
        f[i] = 0;
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
        g[i] = 0;
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x64>
     b4e:	5d01                	li	s10,-32
    for (i = N; i < 55; ++i ){
     b50:	7af09103          	lh	sp,1967(ra) # 114f <_endtext+0xdf>
        random_keys[i] = f[i];
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
    for(i = 0; i < N; ++i){
     b64:	5d04                	lw	s1,56(a0)
        random_keys[i] = f[i];
     b66:	0000                	unimp
    for(i = 0; i < N; ++i){
     b68:	0900                	addi	s0,sp,144
        random_keys[i] = g[i-N];
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
    for(i = N; i < (2*N); ++i){
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
        random_keys[i] = fp[i-(2*N)];
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
    for(i = (2*N); i < (3*N); ++i){
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
        random_keys[i] = fq[i-(3*N)];
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b98:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     b9a:	3408                	fld	fa0,40(s0)
    for(i = (3*N); i < (4*N); ++i){
     b9c:	0900                	addi	s0,sp,144
        fg[i] = fg[i]*p;
     b9e:	005d                	c.nop	23
    for(i = 0; i < (2*N-1); ++i){
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
        fg[i] = fg[i]*p;
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     bac:	3408                	fld	fa0,40(s0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    for(i = (4*N); i < (5*N); ++i){
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     bcc:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     bce:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     bd0:	3408                	fld	fa0,40(s0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c5                	addi	gp,gp,17
     be8:	0000                	unimp
     bea:	af01                	j	12fa <_bss_start+0x106>
     bec:	0602                	c.slli64	a2
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bee:	00000b63          	beqz	zero,c04 <ntru_encyrpt+0x32>
     bf2:	0c66                	slli	s8,s8,0x19
     bf4:	0000                	unimp
     bf6:	00c4                	addi	s1,sp,68
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf8:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	5d1702af          	0x5d1702af
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
    for(i = 0; i < 48; ++i){
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
        temp[i] = temp[i] + message[i];
     c12:	af01                	j	1322 <_bss_start+0x12e>
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	5d2502af          	0x5d2502af
    for(i = 0; i < 48; ++i){
     c26:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
     c30:	0000                	unimp
     c32:	af01                	j	1342 <_bss_start+0x14e>
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x7a>
    for(i = (2*N); i < (3*N); ++i){
     c3a:	0000028b          	0x28b
     c3e:	9c31                	0x9c31
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
}
     c44:	634002af          	0x634002af
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	03df 0000 af01      	0xaf01000003df
        CT[i-(2*N)] = CT[i];
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_deceypt+0x8>
    for(i = (2*N); i < (3*N); ++i){
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c60:	ad31                	j	127c <_bss_start+0x88>
     c62:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < (3*N); ++i){
     c64:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	636602af          	0x636602af
     c6a:	0f00000b          	0xf00000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0xd6>
     c72:	02b1                	addi	t0,t0,12
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c74:	0000                	unimp
     c76:	b101                	j	876 <ext_euclid+0x1aa>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_deceypt+0x2a>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c82:	02b2                	slli	t0,t0,0xc
     c84:	630a                	flw	ft6,128(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c86:	4600000b          	0x4600000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xe6>
     c8e:	3261                	jal	616 <polydiv+0x11a>
     c90:	0100                	addi	s0,sp,128
     c92:	630a02b3          	0x630a02b3
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c96:	5900000b          	0x5900000b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xe6>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c9e:	b4010063          	beqz	sp,ffffffde <_stack_start+0xfffeffde>
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0x54>
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	b501                	j	ab0 <generate_keys+0x1d0>
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
    for (i = 0; i < N; ++i){
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	02b6                	slli	t0,t0,0xd
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0xf6>
     ccc:	0c9c                	addi	a5,sp,592
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cce:	0000                	unimp
     cd0:	1796                	slli	a5,a5,0x25
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
}
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
        a2[i-(2*N)] = a2[i];
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000caa2b          	0xcaa2b
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfc:	bd00                	fsd	fs0,56(a0)
     cfe:	0014                	0x14
        a2[i-(2*N)] = a2[i];
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
    for(i = (2*N); i < ((2*N)+N); ++i){
     d04:	2c00                	fld	fs0,24(s0)
        if(a2[i] <= q/2)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
            a2[i] = (-1)*(q-a2[i]);
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
    for (i = 0; i < N; ++i){
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
        c2[i-(2*N)] = c2[i];
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000cce2b          	0xcce2b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	9600                	0x9600
        c2[i-(2*N)] = c2[i];
     d24:	43000017          	auipc	zero,0x43000
    for(i = (2*N); i < ((2*N)+N); ++i){
     d28:	000d                	c.nop	3
  jal x0, default_exc_handler
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
  mv  x1, x0
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
  mv  x2, x1
     d32:	5b01                	li	s6,-32
  mv  x3, x1
     d34:	7802                	flw	fa6,32(sp)
  mv  x4, x1
     d36:	2c00                	fld	fs0,24(s0)
  mv  x5, x1
     d38:	5d01                	li	s10,-32
  mv  x6, x1
     d3a:	7802                	flw	fa6,32(sp)
  mv  x7, x1
     d3c:	2c00                	fld	fs0,24(s0)
  mv  x8, x1
     d3e:	5e01                	li	t3,-32
  mv  x9, x1
     d40:	3001                	jal	540 <polydiv+0x44>
  mv x10, x1
     d42:	2d00                	fld	fs0,24(a0)
  mv x11, x1
     d44:	0cd8                	addi	a4,sp,596
  mv x12, x1
     d46:	0000                	unimp
  mv x13, x1
     d48:	14bd                	addi	s1,s1,-17
  mv x14, x1
     d4a:	0000                	unimp
  mv x15, x1
     d4c:	012c                	addi	a1,sp,136
  mv x16, x1
     d4e:	0079025b          	0x79025b
  mv x18, x1
     d52:	012c                	addi	a1,sp,136
  mv x19, x1
     d54:	025c                	addi	a5,sp,260
  mv x20, x1
     d56:	0084                	addi	s1,sp,64
  mv x21, x1
     d58:	012c                	addi	a1,sp,136
  mv x22, x1
     d5a:	025d                	addi	tp,tp,23
  mv x23, x1
     d5c:	0086                	slli	ra,ra,0x1
  mv x24, x1
     d5e:	012c                	addi	a1,sp,136
  mv x25, x1
     d60:	025e                	slli	tp,tp,0x17
  mv x26, x1
     d62:	0085                	addi	ra,ra,1
  mv x27, x1
     d64:	0000                	unimp
  mv x28, x1
     d66:	00066f2f          	0x66f2f
  mv x30, x1
     d6a:	0100                	addi	s0,sp,128
  mv x31, x1
     d6c:	028d                	addi	t0,t0,3
  la   x2, _stack_start
     d6e:	6306                	flw	ft6,64(sp)
     d70:	d200000b          	0xd200000b
     d74:	9400000b          	0x9400000b
  la x26, _bss_start
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	959c                	0x959c
  la x27, _bss_end
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	8d01                	sub	a0,a0,s0
  bge x26, x27, zero_loop_end
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
  sw x0, 0(x26)
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
  addi x26, x26, 4
     d8e:	0000                	unimp
  ble x26, x27, zero_loop
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
  addi x10, x0, 0
     d94:	028d                	addi	t0,t0,3
     d96:	5d1e                	lw	s10,228(sp)
  addi x11, x0, 0
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
  jal x1, main
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	039a                	slli	t2,t2,0x6
     da2:	0000                	unimp
     da4:	8d01                	sub	a0,a0,s0
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memcpy+0x1e>
     dac:	0000049b          	0x49b
     db0:	7131                	addi	sp,sp,-192
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	028d                	addi	t0,t0,3
     db8:	6334                	flw	fa3,64(a4)
     dba:	c700000b          	0xc700000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	06ad                	addi	a3,a3,11
     dc4:	0000                	unimp
     dc6:	8d01                	sub	a0,a0,s0
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memcpy+0x40>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	a129                	j	11dc <_endtext+0x16c>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	630a028f          	0x630a028f
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	0290                	addi	a2,sp,320
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	0369                	addi	t1,t1,26
     df0:	0000                	unimp
     df2:	9201                	srli	a2,a2,0x20
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2026                	fld	ft0,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	630a0293          	addi	t0,s4,1584
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	9401                	srai	s0,s0,0x20
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	0548                	addi	a0,sp,644
     e1c:	0000                	unimp
     e1e:	000bfa2b          	0xbfa2b
     e22:	6200                	flw	fs0,0(a2)
     e24:	001d                	c.nop	7
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	1070                	addi	a2,sp,44
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c0c                	addi	a1,sp,528
     e44:	0000                	unimp
     e46:	0000190f          	0x190f
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	0084                	addi	s1,sp,64
     e54:	012c                	addi	a1,sp,136
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 382d      	0x382d0030015f
     e74:	000c                	0xc
     e76:	bd00                	fsd	fs0,56(a0)
     e78:	0014                	0x14
     e7a:	2c00                	fld	fs0,24(s0)
     e7c:	5b01                	li	s6,-32
     e7e:	7902                	flw	fs2,32(sp)
     e80:	2c00                	fld	fs0,24(s0)
     e82:	5c01                	li	s8,-32
     e84:	8302                	jr	t1
     e86:	2c00                	fld	fs0,24(s0)
     e88:	5d01                	li	s10,-32
     e8a:	7802                	flw	fa6,32(sp)
     e8c:	2c01                	jal	109c <_endtext+0x2c>
     e8e:	5e01                	li	t3,-32
     e90:	8202                	jr	tp
     e92:	0000                	unimp
     e94:	2f00                	fld	fs0,24(a4)
     e96:	0000030b          	0x30b
     e9a:	3501                	jal	c9a <ntru_deceypt+0x34>
     e9c:	0602                	c.slli64	a2
     e9e:	00000b63          	beqz	zero,eb4 <memset+0x36>
     ea2:	08e0                	addi	s0,sp,92
     ea4:	0000                	unimp
     ea6:	02f2                	slli	t0,t0,0x1c
     ea8:	0000                	unimp
     eaa:	9c01                	0x9c01
     eac:	1045                	c.nop	-15
     eae:	0000                	unimp
     eb0:	4e30                	lw	a2,88(a2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	0235                	addi	tp,tp,13
     eb6:	5d18                	lw	a4,56(a0)
     eb8:	0000                	unimp
     eba:	8a00                	0x8a00
     ebc:	0005                	c.nop	1
     ebe:	3000                	fld	fs0,32(s0)
     ec0:	0070                	addi	a2,sp,12
     ec2:	3501                	jal	cc2 <ntru_deceypt+0x5c>
     ec4:	1f02                	slli	t5,t5,0x20
     ec6:	005d                	c.nop	23
     ec8:	0000                	unimp
     eca:	000005db          	0x5db
     ece:	7130                	flw	fa2,96(a0)
     ed0:	0100                	addi	s0,sp,128
     ed2:	0235                	addi	tp,tp,13
     ed4:	5d26                	lw	s10,104(sp)
     ed6:	0000                	unimp
     ed8:	1200                	addi	s0,sp,288
     eda:	0006                	c.slli	zero,0x1
     edc:	3200                	fld	fs0,32(a2)
     ede:	0066                	c.slli	zero,0x19
     ee0:	3701                	jal	de0 <memcpy+0x40>
     ee2:	0902                	c.slli64	s2
     ee4:	1045                	c.nop	-15
     ee6:	0000                	unimp
     ee8:	7c989103          	lh	sp,1993(a7)
     eec:	6732                	flw	fa4,12(sp)
     eee:	0100                	addi	s0,sp,128
     ef0:	0238                	addi	a4,sp,264
     ef2:	4509                	li	a0,2
     ef4:	0010                	0x10
     ef6:	0300                	addi	s0,sp,384
     ef8:	f491                	bnez	s1,e04 <memcpy+0x64>
     efa:	2a7d                	jal	10b8 <_endtext+0x48>
     efc:	7066                	flw	ft0,120(sp)
     efe:	0100                	addi	s0,sp,128
     f00:	023a                	slli	tp,tp,0xe
     f02:	630a                	flw	ft6,128(sp)
     f04:	4900000b          	0x4900000b
     f08:	0006                	c.slli	zero,0x1
     f0a:	2a00                	fld	fs0,16(a2)
     f0c:	7166                	flw	ft2,120(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	630a023b          	0x630a023b
     f14:	5c00000b          	0x5c00000b
     f18:	0006                	c.slli	zero,0x1
     f1a:	2a00                	fld	fs0,16(a2)
     f1c:	6766                	flw	fa4,88(sp)
     f1e:	0100                	addi	s0,sp,128
     f20:	023c                	addi	a5,sp,264
     f22:	630a                	flw	ft6,128(sp)
     f24:	7a00000b          	0x7a00000b
int main(){
     f28:	0006                	c.slli	zero,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f2a:	2a00                	fld	fs0,16(a2)
     f2c:	6b70                	flw	fa2,84(a4)
     f2e:	0100                	addi	s0,sp,128
     f30:	023d                	addi	tp,tp,15
     f32:	630a                	flw	ft6,128(sp)
     f34:	9800000b          	0x9800000b
int main(){
     f38:	0006                	c.slli	zero,0x1
     f3a:	2600                	fld	fs0,8(a2)
     f3c:	06ad                	addi	a3,a3,11
     f3e:	0000                	unimp
     f40:	3e01                	jal	a50 <generate_keys+0x170>
     f42:	0902                	c.slli64	s2
     f44:	1055                	c.nop	-11
     f46:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     f48:	06b6                	slli	a3,a3,0xd
     f4a:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f4c:	692a                	flw	fs2,136(sp)
    resultkon[0] = 0xaaaaaaa0;
     f4e:	0100                	addi	s0,sp,128
     f50:	5d09023f 19000000 	0x190000005d09023f
     f58:	26000007          	0x26000007
    keys = generate_keys(N, p, q);
     f5c:	000003ab          	0x3ab
     f60:	4001                	c.li	zero,0
     f62:	0a02                	c.slli64	s4
    resultkon[0] = 0xaaaaaaa0;
     f64:	00000b63          	beqz	zero,f7a <main+0x54>
    resultkon[0] = 0xaaaaaaa1;
     f68:	0855                	addi	a6,a6,21
    keys = generate_keys(N, p, q);
     f6a:	0000                	unimp
    resultkon[0] = 0xaaaaaaa1;
     f6c:	00006933          	or	s2,zero,zero
    for(i = 0; i < N; ++i){
     f70:	6d00                	flw	fs0,24(a0)
     f72:	0008                	0x8
        secret_key_f[i] = keys[i];
     f74:	2b00                	fld	fs0,16(a4)
     f76:	0926                	slli	s2,s2,0x9
     f78:	0000                	unimp
     f7a:	1d6d                	addi	s10,s10,-5
     f7c:	0000                	unimp
     f7e:	0f95                	addi	t6,t6,5
    for(i = 0; i < N; ++i){
     f80:	0000                	unimp
     f82:	012c                	addi	a1,sp,136
     f84:	035a                	slli	t1,t1,0x16
    for(i = N; i < (2*N); ++i){
     f86:	a478                	fsd	fa4,200(s0)
     f88:	2c7c                	fld	fa5,216(s0)
     f8a:	5b01                	li	s6,-32
     f8c:	3001                	jal	78c <ext_euclid+0xc0>
     f8e:	012c                	addi	a1,sp,136
     f90:	025c                	addi	a5,sp,260
        secret_key_fp[i-(2*N)] = keys[i];
     f92:	d008                	sw	a0,32(s0)
     f94:	2b00                	fld	fs0,16(a4)
     f96:	09a6                	slli	s3,s3,0x9
     f98:	0000                	unimp
     f9a:	1d6d                	addi	s10,s10,-5
    for(i = (2*N); i < (3*N); ++i){
     f9c:	0000                	unimp
     f9e:	0fb5                	addi	t6,t6,13
    for(i = (3*N); i < (4*N); ++i){
     fa0:	0000                	unimp
     fa2:	012c                	addi	a1,sp,136
     fa4:	035a                	slli	t1,t1,0x16
     fa6:	f878                	fsw	fa4,116(s0)
     fa8:	2c7d                	jal	1266 <_bss_start+0x72>
     faa:	5b01                	li	s6,-32
        public_key[i-(4*N)] = keys[i];
     fac:	3001                	jal	7ac <ext_euclid+0xe0>
     fae:	012c                	addi	a1,sp,136
     fb0:	025c                	addi	a5,sp,260
     fb2:	d808                	sw	a0,48(s0)
     fb4:	2b00                	fld	fs0,16(a4)
    for(i = (4*N); i < (5*N); ++i){
     fb6:	0a6e                	slli	s4,s4,0x1b
     fb8:	0000                	unimp
     fba:	1068                	addi	a0,sp,44
     fbc:	0000                	unimp
     fbe:	0fdc                	addi	a5,sp,980
     fc0:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
     fc2:	012c                	addi	a1,sp,136
     fc4:	025a                	slli	tp,tp,0x16
     fc6:	0072                	c.slli	zero,0x1c
     fc8:	012c                	addi	a1,sp,136
     fca:	9878035b          	0x9878035b
    for(i = (5*N); i < (6*N+1); ++i){
     fce:	2c7c                	fld	fa5,216(s0)
    resultkon[0] = 0xbbbbbbb0;
     fd0:	5c01                	li	s8,-32
     fd2:	8502                	jr	a0
     fd4:	2c00                	fld	fs0,24(s0)
     fd6:	5d01                	li	s10,-32
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd8:	8702                	jr	a4
     fda:	0000                	unimp
     fdc:	000a882b          	0xa882b
    resultkon[0] = 0xbbbbbbb1;
     fe0:	6800                	flw	fs0,16(s0)
     fe2:	0010                	0x10
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
    resultkon[0] = 0xbbbbbbb0;
     fe8:	2c00                	fld	fs0,24(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fea:	5a01                	li	s4,-32
    resultkon[0] = 0xbbbbbbb1;
     fec:	7202                	flw	ft4,32(sp)
    resultkon[0] = 0xccccccc0;
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ff6:	012c                	addi	a1,sp,136
    resultkon[0] = 0xccccccc0;
     ff8:	025c                	addi	a5,sp,260
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	0086                	slli	ra,ra,0x1
    1002:	2b00                	fld	fs0,16(a4)
    1004:	0aa6                	slli	s5,s5,0x9
    1006:	0000                	unimp
    1008:	1796                	slli	a5,a5,0x25
    100a:	0000                	unimp
    100c:	1028                	addi	a0,sp,40
    resultkon[0] = 0xccccccc1;	
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
            resultkon[0] = 0xDEDEDEDE;
    1012:	0082025b          	0x82025b
    resultkon[0] = 0xccccccc1;	
    1016:	012c                	addi	a1,sp,136
    1018:	025c                	addi	a5,sp,260
            resultkon[0] = 0xDEDEDEDE;
    101a:	0089                	addi	ra,ra,2
    101c:	012c                	addi	a1,sp,136
    for(i = 0; i < 32; ++i){
    101e:	025d                	addi	tp,tp,23
    1020:	0082                	c.slli64	ra
        if(!(message[i] == Dec_Message[i])){
    1022:	012c                	addi	a1,sp,136
    1024:	015e                	slli	sp,sp,0x17
    1026:	0030                	addi	a2,sp,8
    1028:	ba2d                	j	962 <generate_keys+0x82>
    102a:	000a                	c.slli	zero,0x2
    102c:	bd00                	fsd	fs0,56(a0)
    102e:	0014                	0x14
    1030:	2c00                	fld	fs0,24(s0)
            resultkon[0] = 0xBABABABA;
    1032:	5c01                	li	s8,-32
    1034:	7202                	flw	ft4,32(sp)
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5d01                	li	s10,-32
    103a:	8502                	jr	a0
}
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5e01                	li	t3,-32
    1040:	8602                	jr	a2
    1042:	0000                	unimp
    1044:	0900                	addi	s0,sp,144
    1046:	005d                	c.nop	23
    1048:	0000                	unimp
    104a:	1055                	c.nop	-11
    104c:	0000                	unimp
    104e:	690a                	flw	fs2,128(sp)
    1050:	0000                	unimp
    1052:	3600                	fld	fs0,40(a2)
            resultkon[0] = 0xDEDEDEDE;
    1054:	0900                	addi	s0,sp,144
    for(i = 0; i < 32; ++i){
    1056:	005d                	c.nop	23
    1058:	0000                	unimp
    105a:	1068                	addi	a0,sp,44
    105c:	0000                	unimp
    105e:	6934                	flw	fa3,80(a0)
    1060:	0000                	unimp
    1062:	6c00                	flw	fs0,24(s0)
    1064:	0000000f          	fence	unknown,unknown
    1068:	0003482f          	0x3482f
    106c:	0100                	addi	s0,sp,128
    106e:	63060193          	addi	gp,a2,1584
    1072:	cc00000b          	0xcc00000b
    1076:	0006                	c.slli	zero,0x1
    1078:	1400                	addi	s0,sp,544
    107a:	0002                	c.slli64	zero
    107c:	0100                	addi	s0,sp,128
    107e:	389c                	fld	fa5,48(s1)
    1080:	0014                	0x14
    1082:	3100                	fld	fs0,32(a0)
    1084:	06ad                	addi	a3,a3,11
    1086:	0000                	unimp
    1088:	9301                	srli	a4,a4,0x20
    108a:	1601                	addi	a2,a2,-32
    108c:	00000b63          	beqz	zero,10a2 <_endtext+0x32>
    1090:	000008b3          	add	a7,zero,zero
    1094:	8831                	andi	s0,s0,12
    1096:	0001                	nop
    1098:	0100                	addi	s0,sp,128
    109a:	63220193          	addi	gp,tp,1586 # 632 <polydiv+0x136>
    109e:	f800000b          	0xf800000b
    10a2:	0008                	0x8
    10a4:	3100                	fld	fs0,32(a0)
    10a6:	0012                	c.slli	zero,0x4
    10a8:	0000                	unimp
    10aa:	9301                	srli	a4,a4,0x20
    10ac:	2d01                	jal	16bc <result+0x18>
    10ae:	005d                	c.nop	23
    10b0:	0000                	unimp
    10b2:	093d                	addi	s2,s2,15
    10b4:	0000                	unimp
    10b6:	6d30                	flw	fa2,88(a0)
    10b8:	0100646f          	jal	s0,70c8 <_stack_len+0x30c8>
    10bc:	5d370193          	addi	gp,a4,1491 # 55d3 <_stack_len+0x15d3>
    10c0:	0000                	unimp
    10c2:	8100                	0x8100
    10c4:	0009                	c.nop	2
    10c6:	2600                	fld	fs0,8(a2)
    10c8:	028a                	slli	t0,t0,0x2
    10ca:	0000                	unimp
    10cc:	9501                	srai	a0,a0,0x20
    10ce:	0a01                	addi	s4,s4,0
    10d0:	00000b63          	beqz	zero,10e6 <_endtext+0x76>
    10d4:	09b8                	addi	a4,sp,216
    10d6:	0000                	unimp
    10d8:	4e2a                	lw	t3,136(sp)
    10da:	0100                	addi	s0,sp,128
    10dc:	0196                	slli	gp,gp,0x5
    10de:	5d09                	li	s10,-30
    10e0:	0000                	unimp
    10e2:	d000                	sw	s0,32(s0)
    10e4:	0009                	c.nop	2
    10e6:	2a00                	fld	fs0,16(a2)
    10e8:	0069                	c.nop	26
    10ea:	9601                	srai	a2,a2,0x20
    10ec:	0c01                	addi	s8,s8,0
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09fe                	slli	s3,s3,0x1f
    10f4:	0000                	unimp
    10f6:	6a2a                	flw	fs4,136(sp)
    10f8:	0100                	addi	s0,sp,128
    10fa:	0196                	slli	gp,gp,0x5
    10fc:	00005d0f          	0x5d0f
    1100:	0500                	addi	s0,sp,640
    1102:	2600000b          	0x2600000b
    1106:	053e                	slli	a0,a0,0xf
    1108:	0000                	unimp
    110a:	9701                	srai	a4,a4,0x20
    110c:	0901                	addi	s2,s2,0
    110e:	1438                	addi	a4,sp,552
    1110:	0000                	unimp
    1112:	00000b23          	sb	zero,22(zero) # 16 <__DYNAMIC+0x16>
    1116:	b726                	fsd	fs1,424(sp)
    1118:	0005                	c.nop	1
    111a:	0100                	addi	s0,sp,128
    111c:	0198                	addi	a4,sp,192
    111e:	4b09                	li	s6,2
    1120:	0014                	0x14
    1122:	4300                	lw	s0,0(a4)
    1124:	2a00000b          	0x2a00000b
    1128:	6972                	flw	fs2,28(sp)
    112a:	0100                	addi	s0,sp,128
    112c:	0199                	addi	gp,gp,6
    112e:	5e09                	li	t3,-30
    1130:	0014                	0x14
    1132:	6300                	flw	fs0,0(a4)
    1134:	2600000b          	0x2600000b
    1138:	0000045b          	0x45b
    113c:	9b01                	andi	a4,a4,-32
    113e:	0901                	addi	s2,s2,0
    1140:	1471                	addi	s0,s0,-4
    1142:	0000                	unimp
    1144:	00000b83          	lb	s7,0(zero) # 0 <__DYNAMIC>
    1148:	742a                	flw	fs0,168(sp)
    114a:	0069                	c.nop	26
    114c:	9c01                	0x9c01
    114e:	0901                	addi	s2,s2,0
    1150:	1484                	addi	s1,sp,608
    1152:	0000                	unimp
    1154:	0bd0                	addi	a2,sp,468
    1156:	0000                	unimp
    1158:	7326                	flw	ft6,104(sp)
    115a:	0004                	0x4
    115c:	0100                	addi	s0,sp,128
    115e:	019d                	addi	gp,gp,7
    1160:	9709                	srai	a4,a4,0x22
    1162:	0014                	0x14
    1164:	f000                	fsw	fs0,32(s0)
    1166:	2600000b          	0x2600000b
    116a:	0220                	addi	s0,sp,264
    116c:	0000                	unimp
    116e:	9e01                	0x9e01
    1170:	0901                	addi	s2,s2,0
    1172:	14aa                	slli	s1,s1,0x2a
    1174:	0000                	unimp
    1176:	00000c27          	0xc27
    117a:	722a                	flw	ft4,168(sp)
    117c:	7365                	lui	t1,0xffff9
    117e:	0100                	addi	s0,sp,128
    1180:	019f 630a 000b      	0xb630a019f
    1186:	9900                	0x9900
    1188:	000c                	0xc
    118a:	2600                	fld	fs0,8(a2)
    118c:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
    1190:	a001                	j	1190 <_endtext+0x120>
    1192:	0a01                	addi	s4,s4,0
    1194:	00000b63          	beqz	zero,11aa <_endtext+0x13a>
    1198:	00000cb7          	lui	s9,0x0
    119c:	5426                	lw	s0,104(sp)
    119e:	0001                	nop
    11a0:	0100                	addi	s0,sp,128
    11a2:	01a1                	addi	gp,gp,8
    11a4:	630a                	flw	ft6,128(sp)
    11a6:	d500000b          	0xd500000b
    11aa:	000c                	0xc
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	042c                	addi	a1,sp,520
    11b0:	0000                	unimp
    11b2:	a201                	j	12b2 <_bss_start+0xbe>
    11b4:	0901                	addi	s2,s2,0
    11b6:	005d                	c.nop	23
    11b8:	0000                	unimp
    11ba:	00000cf3          	0xcf3
    11be:	00006933          	or	s2,zero,zero
    11c2:	4100                	lw	s0,0(a0)
    11c4:	000d                	c.nop	3
    11c6:	3300                	fld	fs0,32(a4)
    11c8:	0069                	c.nop	26
    11ca:	0000                	unimp
    11cc:	00000d6f          	jal	s10,11cc <_endtext+0x15c>
    11d0:	00006933          	or	s2,zero,zero
    11d4:	9d00                	0x9d00
    11d6:	000d                	c.nop	3
    11d8:	3300                	fld	fs0,32(a4)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	00000dcb          	fnmsub.s	fs11,ft0,ft0,ft0,rne
    11e2:	00006933          	or	s2,zero,zero
    11e6:	f900                	fsw	fs0,48(a0)
    11e8:	000d                	c.nop	3
    11ea:	3300                	fld	fs0,32(a4)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	00000e27          	0xe27
    11f4:	00006933          	or	s2,zero,zero
    11f8:	5500                	lw	s0,40(a0)
    11fa:	000e                	c.slli	zero,0x3
    11fc:	2b00                	fld	fs0,16(a4)
    11fe:	073c                	addi	a5,sp,904
    1200:	0000                	unimp
    1202:	1b5e                	slli	s6,s6,0x37
    1204:	0000                	unimp
    1206:	121e                	slli	tp,tp,0x27
    1208:	0000                	unimp
    120a:	012c                	addi	a1,sp,136
    120c:	025a                	slli	tp,tp,0x16
    120e:	012c0083          	lb	ra,18(s8)
    1212:	01f3035b          	0x1f3035b
    1216:	2c5a                	fld	fs8,400(sp)
    1218:	5c01                	li	s8,-32
    121a:	7902                	flw	fs2,32(sp)
    121c:	0000                	unimp
    121e:	0007442b          	0x7442b
    1222:	5e00                	lw	s0,56(a2)
    1224:	3e00001b          	0x3e00001b
    1228:	0012                	c.slli	zero,0x4
    122a:	2c00                	fld	fs0,24(s0)
    122c:	5a01                	li	s4,-32
    122e:	8402                	jr	s0
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5b01                	li	s6,-32
    1234:	8b02                	jr	s6
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5c01                	li	s8,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	0000                	unimp
    123e:	0007622b          	0x7622b
    1242:	f800                	fsw	fs0,48(s0)
    1244:	001a                	c.slli	zero,0x6
    1246:	5e00                	lw	s0,56(a2)
    1248:	0012                	c.slli	zero,0x4
    124a:	2c00                	fld	fs0,24(s0)
    124c:	5a01                	li	s4,-32
    124e:	8302                	jr	t1
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5b01                	li	s6,-32
    1254:	8202                	jr	tp
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5c01                	li	s8,-32
    125a:	7902                	flw	fs2,32(sp)
    125c:	0000                	unimp
    125e:	00076a2b          	0x76a2b
    1262:	f800                	fsw	fs0,48(s0)
    1264:	001a                	c.slli	zero,0x6
    1266:	7e00                	flw	fs0,56(a2)
    1268:	0012                	c.slli	zero,0x4
    126a:	2c00                	fld	fs0,24(s0)
    126c:	5a01                	li	s4,-32
    126e:	8402                	jr	s0
    1270:	2c00                	fld	fs0,24(s0)
    1272:	5b01                	li	s6,-32
    1274:	8202                	jr	tp
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5c01                	li	s8,-32
    127a:	7902                	flw	fs2,32(sp)
    127c:	0000                	unimp
    127e:	0007762b          	0x7762b
    1282:	bd00                	fsd	fs0,56(a0)
    1284:	0014                	0x14
    1286:	aa00                	fsd	fs0,16(a2)
    1288:	0012                	c.slli	zero,0x4
    128a:	2c00                	fld	fs0,24(s0)
    128c:	5a01                	li	s4,-32
    128e:	8302                	jr	t1
    1290:	2c00                	fld	fs0,24(s0)
    1292:	5b01                	li	s6,-32
    1294:	7902                	flw	fs2,32(sp)
    1296:	2c00                	fld	fs0,24(s0)
    1298:	5c01                	li	s8,-32
    129a:	8402                	jr	s0
    129c:	2c00                	fld	fs0,24(s0)
    129e:	5d01                	li	s10,-32
    12a0:	7902                	flw	fs2,32(sp)
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5e01                	li	t3,-32
    12a6:	8202                	jr	tp
    12a8:	0000                	unimp
    12aa:	0007922b          	0x7922b
    12ae:	f800                	fsw	fs0,48(s0)
    12b0:	001a                	c.slli	zero,0x6
    12b2:	ca00                	sw	s0,16(a2)
    12b4:	0012                	c.slli	zero,0x4
    12b6:	2c00                	fld	fs0,24(s0)
    12b8:	5a01                	li	s4,-32
    12ba:	7202                	flw	ft4,32(sp)
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5b01                	li	s6,-32
    12c0:	8202                	jr	tp
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5c01                	li	s8,-32
    12c6:	7902                	flw	fs2,32(sp)
    12c8:	0000                	unimp
    12ca:	00079e2b          	0x79e2b
    12ce:	bd00                	fsd	fs0,56(a0)
    12d0:	0014                	0x14
    12d2:	f600                	fsw	fs0,40(a2)
    12d4:	0012                	c.slli	zero,0x4
    12d6:	2c00                	fld	fs0,24(s0)
    12d8:	5a01                	li	s4,-32
    12da:	7202                	flw	ft4,32(sp)
    12dc:	2c00                	fld	fs0,24(s0)
    12de:	5b01                	li	s6,-32
    12e0:	7902                	flw	fs2,32(sp)
    12e2:	2c00                	fld	fs0,24(s0)
    12e4:	5c01                	li	s8,-32
    12e6:	8402                	jr	s0
    12e8:	2c00                	fld	fs0,24(s0)
    12ea:	5d01                	li	s10,-32
    12ec:	7902                	flw	fs2,32(sp)
    12ee:	2c00                	fld	fs0,24(s0)
    12f0:	5e01                	li	t3,-32
    12f2:	8202                	jr	tp
    12f4:	0000                	unimp
    12f6:	0007a62b          	0x7a62b
    12fa:	5e00                	lw	s0,56(a2)
    12fc:	1000001b          	0x1000001b
    1300:	2c000013          	li	zero,704
    1304:	5a01                	li	s4,-32
    1306:	8902                	jr	s2
    1308:	2c00                	fld	fs0,24(s0)
    130a:	5c01                	li	s8,-32
    130c:	7902                	flw	fs2,32(sp)
    130e:	0000                	unimp
    1310:	0007ae2b          	0x7ae2b
    1314:	f800                	fsw	fs0,48(s0)
    1316:	001a                	c.slli	zero,0x6
    1318:	3000                	fld	fs0,32(s0)
    131a:	2c000013          	li	zero,704
    131e:	5a01                	li	s4,-32
    1320:	8902                	jr	s2
    1322:	2c00                	fld	fs0,24(s0)
    1324:	5b01                	li	s6,-32
    1326:	8202                	jr	tp
    1328:	2c00                	fld	fs0,24(s0)
    132a:	5c01                	li	s8,-32
    132c:	7902                	flw	fs2,32(sp)
    132e:	0000                	unimp
    1330:	0007bc2b          	0x7bc2b
    1334:	0f00                	addi	s0,sp,912
    1336:	0019                	c.nop	6
    1338:	6100                	flw	fs0,0(a0)
    133a:	2c000013          	li	zero,704
    133e:	5a01                	li	s4,-32
    1340:	8902                	jr	s2
    1342:	2c00                	fld	fs0,24(s0)
    1344:	5b01                	li	s6,-32
    1346:	7902                	flw	fs2,32(sp)
    1348:	2c00                	fld	fs0,24(s0)
    134a:	5c01                	li	s8,-32
    134c:	8602                	jr	a2
    134e:	2c00                	fld	fs0,24(s0)
    1350:	5d01                	li	s10,-32
    1352:	7902                	flw	fs2,32(sp)
    1354:	2c00                	fld	fs0,24(s0)
    1356:	5e01                	li	t3,-32
    1358:	8202                	jr	tp
    135a:	2c00                	fld	fs0,24(s0)
    135c:	5f01                	li	t5,-32
    135e:	3001                	jal	b5e <generate_keys+0x27e>
    1360:	2b00                	fld	fs0,16(a4)
    1362:	07c4                	addi	s1,sp,964
    1364:	0000                	unimp
    1366:	1b5e                	slli	s6,s6,0x37
    1368:	0000                	unimp
    136a:	0000137b          	0x137b
    136e:	012c                	addi	a1,sp,136
    1370:	025a                	slli	tp,tp,0x16
    1372:	0072                	c.slli	zero,0x1c
    1374:	012c                	addi	a1,sp,136
    1376:	025c                	addi	a5,sp,260
    1378:	0079                	c.nop	30
    137a:	2b00                	fld	fs0,16(a4)
    137c:	07cc                	addi	a1,sp,964
    137e:	0000                	unimp
    1380:	1af8                	addi	a4,sp,380
    1382:	0000                	unimp
    1384:	0000139b          	0x139b
    1388:	012c                	addi	a1,sp,136
    138a:	025a                	slli	tp,tp,0x16
    138c:	0072                	c.slli	zero,0x1c
    138e:	012c                	addi	a1,sp,136
    1390:	0082025b          	0x82025b
    1394:	012c                	addi	a1,sp,136
    1396:	025c                	addi	a5,sp,260
    1398:	0079                	c.nop	30
    139a:	2b00                	fld	fs0,16(a4)
    139c:	07dc                	addi	a5,sp,964
    139e:	0000                	unimp
    13a0:	1af8                	addi	a4,sp,380
    13a2:	0000                	unimp
    13a4:	000013bb          	0x13bb
    13a8:	012c                	addi	a1,sp,136
    13aa:	025a                	slli	tp,tp,0x16
    13ac:	008a                	slli	ra,ra,0x2
    13ae:	012c                	addi	a1,sp,136
    13b0:	0082025b          	0x82025b
    13b4:	012c                	addi	a1,sp,136
    13b6:	025c                	addi	a5,sp,260
    13b8:	0079                	c.nop	30
    13ba:	2b00                	fld	fs0,16(a4)
    13bc:	07e4                	addi	s1,sp,972
    13be:	0000                	unimp
    13c0:	1b5e                	slli	s6,s6,0x37
    13c2:	0000                	unimp
    13c4:	000013db          	0x13db
    13c8:	012c                	addi	a1,sp,136
    13ca:	025a                	slli	tp,tp,0x16
    13cc:	012c0083          	lb	ra,18(s8)
    13d0:	0084025b          	0x84025b
    13d4:	012c                	addi	a1,sp,136
    13d6:	025c                	addi	a5,sp,260
    13d8:	0079                	c.nop	30
    13da:	2b00                	fld	fs0,16(a4)
    13dc:	07ec                	addi	a1,sp,972
    13de:	0000                	unimp
    13e0:	1b5e                	slli	s6,s6,0x37
    13e2:	0000                	unimp
    13e4:	000013fb          	0x13fb
    13e8:	012c                	addi	a1,sp,136
    13ea:	025a                	slli	tp,tp,0x16
    13ec:	0084                	addi	s1,sp,64
    13ee:	012c                	addi	a1,sp,136
    13f0:	0088025b          	0x88025b
    13f4:	012c                	addi	a1,sp,136
    13f6:	025c                	addi	a5,sp,260
    13f8:	0079                	c.nop	30
    13fa:	2b00                	fld	fs0,16(a4)
    13fc:	07f4                	addi	a3,sp,972
    13fe:	0000                	unimp
    1400:	1b5e                	slli	s6,s6,0x37
    1402:	0000                	unimp
    1404:	0000141b          	0x141b
    1408:	012c                	addi	a1,sp,136
    140a:	025a                	slli	tp,tp,0x16
    140c:	012c008b          	0x12c008b
    1410:	0086025b          	0x86025b
    1414:	012c                	addi	a1,sp,136
    1416:	025c                	addi	a5,sp,260
    1418:	0079                	c.nop	30
    141a:	2d00                	fld	fs0,24(a0)
    141c:	07fc                	addi	a5,sp,972
    141e:	0000                	unimp
    1420:	1b5e                	slli	s6,s6,0x37
    1422:	0000                	unimp
    1424:	012c                	addi	a1,sp,136
    1426:	025a                	slli	tp,tp,0x16
    1428:	0086                	slli	ra,ra,0x1
    142a:	012c                	addi	a1,sp,136
    142c:	008a025b          	0x8a025b
    1430:	012c                	addi	a1,sp,136
    1432:	025c                	addi	a5,sp,260
    1434:	0079                	c.nop	30
    1436:	0000                	unimp
    1438:	5d09                	li	s10,-30
    143a:	0000                	unimp
    143c:	4b00                	lw	s0,16(a4)
    143e:	0014                	0x14
    1440:	3400                	fld	fs0,40(s0)
    1442:	0069                	c.nop	26
    1444:	0000                	unimp
    1446:	11be                	slli	gp,gp,0x2f
    1448:	0000                	unimp
    144a:	0900                	addi	s0,sp,144
    144c:	005d                	c.nop	23
    144e:	0000                	unimp
    1450:	145e                	slli	s0,s0,0x37
    1452:	0000                	unimp
    1454:	6934                	flw	fa3,80(a0)
    1456:	0000                	unimp
    1458:	c700                	sw	s0,8(a4)
    145a:	0011                	c.nop	4
    145c:	0000                	unimp
    145e:	5d09                	li	s10,-30
    1460:	0000                	unimp
    1462:	7100                	flw	fs0,32(a0)
    1464:	0014                	0x14
    1466:	3400                	fld	fs0,40(s0)
    1468:	0069                	c.nop	26
    146a:	0000                	unimp
    146c:	11d0                	addi	a2,sp,228
    146e:	0000                	unimp
    1470:	0900                	addi	s0,sp,144
    1472:	005d                	c.nop	23
    1474:	0000                	unimp
    1476:	1484                	addi	s1,sp,608
    1478:	0000                	unimp
    147a:	6934                	flw	fa3,80(a0)
    147c:	0000                	unimp
    147e:	d900                	sw	s0,48(a0)
    1480:	0011                	c.nop	4
    1482:	0000                	unimp
    1484:	5d09                	li	s10,-30
    1486:	0000                	unimp
    1488:	9700                	0x9700
    148a:	0014                	0x14
    148c:	3400                	fld	fs0,40(s0)
    148e:	0069                	c.nop	26
    1490:	0000                	unimp
    1492:	11e2                	slli	gp,gp,0x38
    1494:	0000                	unimp
    1496:	0900                	addi	s0,sp,144
    1498:	005d                	c.nop	23
    149a:	0000                	unimp
    149c:	14aa                	slli	s1,s1,0x2a
    149e:	0000                	unimp
    14a0:	6934                	flw	fa3,80(a0)
    14a2:	0000                	unimp
    14a4:	eb00                	fsw	fs0,16(a4)
    14a6:	0011                	c.nop	4
    14a8:	0000                	unimp
    14aa:	5d09                	li	s10,-30
    14ac:	0000                	unimp
    14ae:	bd00                	fsd	fs0,56(a0)
    14b0:	0014                	0x14
    14b2:	3400                	fld	fs0,40(s0)
    14b4:	0069                	c.nop	26
    14b6:	0000                	unimp
    14b8:	11f4                	addi	a3,sp,236
    14ba:	0000                	unimp
    14bc:	3500                	fld	fs0,40(a0)
    14be:	0180                	addi	s0,sp,192
    14c0:	0000                	unimp
    14c2:	f301                	bnez	a4,13c2 <_bss_start+0x1ce>
    14c4:	6306                	flw	ft6,64(sp)
    14c6:	fc00000b          	0xfc00000b
    14ca:	0004                	0x4
    14cc:	d000                	sw	s0,32(s0)
    14ce:	0001                	nop
    14d0:	0100                	addi	s0,sp,128
    14d2:	4a9c                	lw	a5,16(a3)
    14d4:	36000017          	auipc	zero,0x36000
    14d8:	756e                	flw	fa0,248(sp)
    14da:	006d                	c.nop	27
    14dc:	f301                	bnez	a4,13dc <_bss_start+0x1e8>
    14de:	000b6313          	ori	t1,s6,0
    14e2:	8300                	0x8300
    14e4:	000e                	c.slli	zero,0x3
    14e6:	3700                	fld	fs0,40(a4)
    14e8:	00fc                	addi	a5,sp,76
    14ea:	0000                	unimp
    14ec:	f301                	bnez	a4,13ec <_bss_start+0x1f8>
    14ee:	5d1c                	lw	a5,56(a0)
    14f0:	0000                	unimp
    14f2:	af00                	fsd	fs0,24(a4)
    14f4:	000e                	c.slli	zero,0x3
    14f6:	3700                	fld	fs0,40(a4)
    14f8:	0000068f          	0x68f
    14fc:	f301                	bnez	a4,13fc <_bss_start+0x208>
    14fe:	6328                	flw	fa0,64(a4)
    1500:	0000000b          	0xb
    1504:	3700000f          	0x3700000f
    1508:	000006b3          	add	a3,zero,zero
    150c:	f301                	bnez	a4,140c <_bss_start+0x218>
    150e:	00005d33          	srl	s10,zero,zero
    1512:	4500                	lw	s0,8(a0)
    1514:	3600000f          	0x3600000f
    1518:	6f6d                	lui	t5,0x1b
    151a:	0064                	addi	s1,sp,12
    151c:	f301                	bnez	a4,141c <_bss_start+0x228>
    151e:	00005d3f 000f7c00 	0xf7c0000005d3f
    1526:	3800                	fld	fs0,48(s0)
    1528:	0075                	c.nop	29
    152a:	f501                	bnez	a0,1432 <_bss_start+0x23e>
    152c:	5d09                	li	s10,-30
    152e:	0000                	unimp
    1530:	b300                	fsd	fs0,32(a4)
    1532:	3800000f          	0x3800000f
    1536:	0064                	addi	s1,sp,12
    1538:	f501                	bnez	a0,1440 <_bss_start+0x24c>
    153a:	00005d0b          	0x5d0b
    153e:	dc00                	sw	s0,56(s0)
    1540:	3900000f          	0x3900000f
    1544:	3264                	fld	fs1,224(a2)
    1546:	0100                	addi	s0,sp,128
    1548:	0df5                	addi	s11,s11,29
    154a:	005d                	c.nop	23
    154c:	0000                	unimp
    154e:	6938                	flw	fa4,80(a0)
    1550:	0100                	addi	s0,sp,128
    1552:	10f5                	addi	ra,ra,-3
    1554:	005d                	c.nop	23
    1556:	0000                	unimp
    1558:	0ffa                	slli	t6,t6,0x1e
    155a:	0000                	unimp
    155c:	6239                	lui	tp,0xe
    155e:	4e5f 0100 12f5      	0x12f501004e5f
    1564:	005d                	c.nop	23
    1566:	0000                	unimp
    1568:	7238                	flw	fa4,96(a2)
    156a:	645f 0100 16f5      	0x16f50100645f
    1570:	005d                	c.nop	23
    1572:	0000                	unimp
    1574:	10da                	slli	ra,ra,0x36
    1576:	0000                	unimp
    1578:	7a3a                	flw	fs4,172(sp)
    157a:	0002                	c.slli64	zero
    157c:	0100                	addi	s0,sp,128
    157e:	0af6                	slli	s5,s5,0x1d
    1580:	00000b63          	beqz	zero,1596 <product2+0x14a>
    1584:	10f8                	addi	a4,sp,108
    1586:	0000                	unimp
    1588:	7638                	flw	fa4,104(a2)
    158a:	0100                	addi	s0,sp,128
    158c:	09f8                	addi	a4,sp,220
    158e:	174a                	slli	a4,a4,0x32
    1590:	0000                	unimp
    1592:	1110                	addi	a2,sp,160
    1594:	0000                	unimp
    1596:	7138                	flw	fa4,96(a0)
    1598:	0100                	addi	s0,sp,128
    159a:	09f9                	addi	s3,s3,30
    159c:	175d                	addi	a4,a4,-9
    159e:	0000                	unimp
    15a0:	1130                	addi	a2,sp,168
    15a2:	0000                	unimp
    15a4:	783a                	flw	fa6,172(sp)
    15a6:	0001                	nop
    15a8:	0100                	addi	s0,sp,128
    15aa:	0afa                	slli	s5,s5,0x1e
    15ac:	00000b63          	beqz	zero,15c2 <product2+0x176>
    15b0:	1150                	addi	a2,sp,164
    15b2:	0000                	unimp
    15b4:	1c3a                	slli	s8,s8,0x2e
    15b6:	0002                	c.slli64	zero
    15b8:	0100                	addi	s0,sp,128
    15ba:	177009fb          	0x177009fb
    15be:	0000                	unimp
    15c0:	116e                	slli	sp,sp,0x3b
    15c2:	0000                	unimp
    15c4:	1a3a                	slli	s4,s4,0x2e
    15c6:	0002                	c.slli64	zero
    15c8:	0100                	addi	s0,sp,128
    15ca:	09fc                	addi	a5,sp,220
    15cc:	00001783          	lh	a5,0(zero) # 0 <__DYNAMIC>
    15d0:	11ba                	slli	gp,gp,0x2e
    15d2:	0000                	unimp
    15d4:	00006933          	or	s2,zero,zero
    15d8:	f200                	fsw	fs0,32(a2)
    15da:	0011                	c.nop	4
    15dc:	3300                	fld	fs0,32(a4)
    15de:	0069                	c.nop	26
    15e0:	0000                	unimp
    15e2:	1220                	addi	s0,sp,296
    15e4:	0000                	unimp
    15e6:	00006933          	or	s2,zero,zero
    15ea:	4e00                	lw	s0,24(a2)
    15ec:	0012                	c.slli	zero,0x4
    15ee:	3300                	fld	fs0,32(a4)
    15f0:	0069                	c.nop	26
    15f2:	0000                	unimp
    15f4:	127c                	addi	a5,sp,300
    15f6:	0000                	unimp
    15f8:	0005582b          	0x5582b
    15fc:	5e00                	lw	s0,56(a2)
    15fe:	1900001b          	0x1900001b
    1602:	0016                	c.slli	zero,0x5
    1604:	2c00                	fld	fs0,24(s0)
    1606:	5a01                	li	s4,-32
    1608:	8202                	jr	tp
    160a:	2c00                	fld	fs0,24(s0)
    160c:	5b01                	li	s6,-32
    160e:	5a01f303          	0x5a01f303
    1612:	012c                	addi	a1,sp,136
    1614:	025c                	addi	a5,sp,260
    1616:	0079                	c.nop	30
    1618:	2b00                	fld	fs0,16(a4)
    161a:	0560                	addi	s0,sp,652
    161c:	0000                	unimp
    161e:	1af8                	addi	a4,sp,380
    1620:	0000                	unimp
    1622:	1639                	addi	a2,a2,-18
    1624:	0000                	unimp
    1626:	012c                	addi	a1,sp,136
    1628:	025a                	slli	tp,tp,0x16
    162a:	0082                	c.slli64	ra
    162c:	012c                	addi	a1,sp,136
    162e:	0083025b          	0x83025b
    1632:	012c                	addi	a1,sp,136
    1634:	025c                	addi	a5,sp,260
    1636:	0079                	c.nop	30
    1638:	2b00                	fld	fs0,16(a4)
    163a:	056a                	slli	a0,a0,0x1a
    163c:	0000                	unimp
    163e:	1b5e                	slli	s6,s6,0x37
    1640:	0000                	unimp
    1642:	1659                	addi	a2,a2,-10
    1644:	0000                	unimp
    1646:	012c                	addi	a1,sp,136
    1648:	025a                	slli	tp,tp,0x16
    164a:	0089                	addi	ra,ra,2
    164c:	012c                	addi	a1,sp,136
    164e:	0088025b          	0x88025b
    1652:	012c                	addi	a1,sp,136
    1654:	025c                	addi	a5,sp,260
    1656:	0084                	addi	s1,sp,64
    1658:	2b00                	fld	fs0,16(a4)
    165a:	0572                	slli	a0,a0,0x1c
    165c:	0000                	unimp
    165e:	1af8                	addi	a4,sp,380
    1660:	0000                	unimp
    1662:	1679                	addi	a2,a2,-2
    1664:	0000                	unimp
    1666:	012c                	addi	a1,sp,136
    1668:	025a                	slli	tp,tp,0x16
    166a:	0089                	addi	ra,ra,2
    166c:	012c                	addi	a1,sp,136
    166e:	0083025b          	0x83025b
    1672:	012c                	addi	a1,sp,136
    1674:	025c                	addi	a5,sp,260
    1676:	0084                	addi	s1,sp,64
    1678:	2b00                	fld	fs0,16(a4)
    167a:	05de                	slli	a1,a1,0x17
    167c:	0000                	unimp
    167e:	1b5e                	slli	s6,s6,0x37
    1680:	0000                	unimp
    1682:	169c                	addi	a5,sp,864
    1684:	0000                	unimp
    1686:	012c                	addi	a1,sp,136
    1688:	055a                	slli	a0,a0,0x16
    168a:	0016a403          	lw	s0,1(a3)
    168e:	2c00                	fld	fs0,24(s0)
    1690:	5b01                	li	s6,-32
    1692:	8702                	jr	a4
    1694:	2c00                	fld	fs0,24(s0)
    1696:	5c01                	li	s8,-32
    1698:	7902                	flw	fs2,32(sp)
    169a:	0000                	unimp
    169c:	00062e2b          	0x62e2b
    16a0:	f800                	fsw	fs0,48(s0)
    16a2:	001a                	c.slli	zero,0x6
    16a4:	bc00                	fsd	fs0,56(s0)
    16a6:	0016                	c.slli	zero,0x5
    16a8:	2c00                	fld	fs0,24(s0)
    16aa:	5a01                	li	s4,-32
    16ac:	8602                	jr	a2
    16ae:	2c00                	fld	fs0,24(s0)
    16b0:	5b01                	li	s6,-32
    16b2:	8302                	jr	t1
    16b4:	2c00                	fld	fs0,24(s0)
    16b6:	5c01                	li	s8,-32
    16b8:	7902                	flw	fs2,32(sp)
    16ba:	0000                	unimp
    16bc:	00063c2b          	0x63c2b
    16c0:	0f00                	addi	s0,sp,912
    16c2:	0019                	c.nop	6
    16c4:	ed00                	fsw	fs0,24(a0)
    16c6:	0016                	c.slli	zero,0x5
    16c8:	2c00                	fld	fs0,24(s0)
    16ca:	5a01                	li	s4,-32
    16cc:	7202                	flw	ft4,32(sp)
    16ce:	2c00                	fld	fs0,24(s0)
    16d0:	5b01                	li	s6,-32
    16d2:	8402                	jr	s0
    16d4:	2c00                	fld	fs0,24(s0)
    16d6:	5c01                	li	s8,-32
    16d8:	8602                	jr	a2
    16da:	2c00                	fld	fs0,24(s0)
    16dc:	5d01                	li	s10,-32
    16de:	8402                	jr	s0
    16e0:	2c00                	fld	fs0,24(s0)
    16e2:	5e01                	li	t3,-32
    16e4:	8302                	jr	t1
    16e6:	2c00                	fld	fs0,24(s0)
    16e8:	5f01                	li	t5,-32
    16ea:	3001                	jal	eea <memset+0x6c>
    16ec:	2b00                	fld	fs0,16(a4)
    16ee:	0644                	addi	s1,sp,772
    16f0:	0000                	unimp
    16f2:	1af8                	addi	a4,sp,380
    16f4:	0000                	unimp
    16f6:	170d                	addi	a4,a4,-29
    16f8:	0000                	unimp
    16fa:	012c                	addi	a1,sp,136
    16fc:	025a                	slli	tp,tp,0x16
    16fe:	012c008b          	0x12c008b
    1702:	0083025b          	0x83025b
    1706:	012c                	addi	a1,sp,136
    1708:	025c                	addi	a5,sp,260
    170a:	0079                	c.nop	30
    170c:	2b00                	fld	fs0,16(a4)
    170e:	0654                	addi	a3,sp,772
    1710:	0000                	unimp
    1712:	1af8                	addi	a4,sp,380
    1714:	0000                	unimp
    1716:	172d                	addi	a4,a4,-21
    1718:	0000                	unimp
    171a:	012c                	addi	a1,sp,136
    171c:	025a                	slli	tp,tp,0x16
    171e:	0082                	c.slli64	ra
    1720:	012c                	addi	a1,sp,136
    1722:	0083025b          	0x83025b
    1726:	012c                	addi	a1,sp,136
    1728:	025c                	addi	a5,sp,260
    172a:	0079                	c.nop	30
    172c:	2d00                	fld	fs0,24(a0)
    172e:	0664                	addi	s1,sp,780
    1730:	0000                	unimp
    1732:	1af8                	addi	a4,sp,380
    1734:	0000                	unimp
    1736:	012c                	addi	a1,sp,136
    1738:	025a                	slli	tp,tp,0x16
    173a:	012c0087          	0x12c0087
    173e:	0083025b          	0x83025b
    1742:	012c                	addi	a1,sp,136
    1744:	025c                	addi	a5,sp,260
    1746:	0079                	c.nop	30
    1748:	0000                	unimp
    174a:	5d09                	li	s10,-30
    174c:	0000                	unimp
    174e:	5d00                	lw	s0,56(a0)
    1750:	34000017          	auipc	zero,0x34000
    1754:	0069                	c.nop	26
    1756:	0000                	unimp
    1758:	15d4                	addi	a3,sp,740
    175a:	0000                	unimp
    175c:	0900                	addi	s0,sp,144
    175e:	005d                	c.nop	23
    1760:	0000                	unimp
    1762:	1770                	addi	a2,sp,940
    1764:	0000                	unimp
    1766:	6934                	flw	fa3,80(a0)
    1768:	0000                	unimp
    176a:	dd00                	sw	s0,56(a0)
    176c:	0015                	c.nop	5
    176e:	0000                	unimp
    1770:	5d09                	li	s10,-30
    1772:	0000                	unimp
    1774:	8300                	0x8300
    1776:	34000017          	auipc	zero,0x34000
    177a:	0069                	c.nop	26
    177c:	0000                	unimp
    177e:	15e6                	slli	a1,a1,0x39
    1780:	0000                	unimp
    1782:	0900                	addi	s0,sp,144
    1784:	005d                	c.nop	23
    1786:	0000                	unimp
    1788:	1796                	slli	a5,a5,0x25
    178a:	0000                	unimp
    178c:	6934                	flw	fa3,80(a0)
    178e:	0000                	unimp
    1790:	ef00                	fsw	fs0,24(a4)
    1792:	0015                	c.nop	5
    1794:	0000                	unimp
    1796:	2a35                	jal	18d2 <result+0x22e>
    1798:	0000                	unimp
    179a:	0100                	addi	s0,sp,128
    179c:	0b6306bb          	0xb6306bb
    17a0:	0000                	unimp
    17a2:	038c                	addi	a1,sp,448
    17a4:	0000                	unimp
    17a6:	0170                	addi	a2,sp,140
    17a8:	0000                	unimp
    17aa:	9c01                	0x9c01
    17ac:	18cd                	addi	a7,a7,-13
    17ae:	0000                	unimp
    17b0:	6136                	flw	ft2,76(sp)
    17b2:	0100                	addi	s0,sp,128
    17b4:	0b6315bb          	0xb6315bb
    17b8:	0000                	unimp
    17ba:	12d1                	addi	t0,t0,-12
    17bc:	0000                	unimp
    17be:	00070237          	lui	tp,0x70
    17c2:	0100                	addi	s0,sp,128
    17c4:	005d1cbb          	0x5d1cbb
    17c8:	0000                	unimp
    17ca:	1316                	slli	t1,t1,0x25
    17cc:	0000                	unimp
    17ce:	6236                	flw	ft4,76(sp)
    17d0:	0100                	addi	s0,sp,128
    17d2:	0b6329bb          	0xb6329bb
    17d6:	0000                	unimp
    17d8:	00001367          	0x1367
    17dc:	00070937          	lui	s2,0x70
    17e0:	0100                	addi	s0,sp,128
    17e2:	005d30bb          	0x5d30bb
    17e6:	0000                	unimp
    17e8:	000013b7          	lui	t2,0x1
    17ec:	00052e37          	lui	t3,0x52
    17f0:	0100                	addi	s0,sp,128
    17f2:	005d3cbb          	0x5d3cbb
    17f6:	0000                	unimp
    17f8:	000013e3          	bnez	zero,1ffe <_bss_end+0x7a>
    17fc:	4b3a                	lw	s6,140(sp)
    17fe:	0006                	c.slli	zero,0x1
    1800:	0100                	addi	s0,sp,128
    1802:	09bd                	addi	s3,s3,15
    1804:	18cd                	addi	a7,a7,-13
    1806:	0000                	unimp
    1808:	0000140f          	0x140f
    180c:	6938                	flw	fa4,80(a0)
    180e:	0100                	addi	s0,sp,128
    1810:	09be                	slli	s3,s3,0xf
    1812:	005d                	c.nop	23
    1814:	0000                	unimp
    1816:	00001453          	fadd.s	fs0,ft0,ft0,rtz
    181a:	6a38                	flw	fa4,80(a2)
    181c:	0100                	addi	s0,sp,128
    181e:	0bbe                	slli	s7,s7,0xf
    1820:	005d                	c.nop	23
    1822:	0000                	unimp
    1824:	00001493          	slli	s1,zero,0x0
    1828:	6b38                	flw	fa4,80(a4)
    182a:	0100                	addi	s0,sp,128
    182c:	0dbe                	slli	s11,s11,0xf
    182e:	005d                	c.nop	23
    1830:	0000                	unimp
    1832:	14ea                	slli	s1,s1,0x3a
    1834:	0000                	unimp
    1836:	6a22                	flw	fs4,8(sp)
    1838:	0002                	c.slli64	zero
    183a:	0100                	addi	s0,sp,128
    183c:	0b630abf 03060000 	0x30600000b630abf
    1844:	144c                	addi	a1,sp,548
    1846:	0000                	unimp
    1848:	3a9f 000c 0000      	0xc3a9f
    184e:	c001                	beqz	s0,184e <result+0x1aa>
    1850:	e909                	bnez	a0,1862 <result+0x1be>
    1852:	0018                	0x18
    1854:	3800                	fld	fs0,48(s0)
    1856:	0015                	c.nop	5
    1858:	3a00                	fld	fs0,48(a2)
    185a:	0364                	addi	s1,sp,396
    185c:	0000                	unimp
    185e:	c101                	beqz	a0,185e <result+0x1ba>
    1860:	fc09                	bnez	s0,177a <result+0xd6>
    1862:	0018                	0x18
    1864:	4c00                	lw	s0,24(s0)
    1866:	0015                	c.nop	5
    1868:	3300                	fld	fs0,32(a4)
    186a:	0069                	c.nop	26
    186c:	0000                	unimp
    186e:	1599                	addi	a1,a1,-26
    1870:	0000                	unimp
    1872:	00006933          	or	s2,zero,zero
    1876:	e100                	fsw	fs0,0(a0)
    1878:	0015                	c.nop	5
    187a:	3300                	fld	fs0,32(a4)
    187c:	0069                	c.nop	26
    187e:	0000                	unimp
    1880:	1619                	addi	a2,a2,-26
    1882:	0000                	unimp
    1884:	00006933          	or	s2,zero,zero
    1888:	3c00                	fld	fs0,56(s0)
    188a:	0016                	c.slli	zero,0x5
    188c:	2b00                	fld	fs0,16(a4)
    188e:	040e                	slli	s0,s0,0x3
    1890:	0000                	unimp
    1892:	1b5e                	slli	s6,s6,0x37
    1894:	0000                	unimp
    1896:	18ae                	slli	a7,a7,0x2b
    1898:	0000                	unimp
    189a:	012c                	addi	a1,sp,136
    189c:	025a                	slli	tp,tp,0x16
    189e:	008a                	slli	ra,ra,0x2
    18a0:	012c                	addi	a1,sp,136
    18a2:	01f3035b          	0x1f3035b
    18a6:	2c5a                	fld	fs8,400(sp)
    18a8:	5c01                	li	s8,-32
    18aa:	8802                	jr	a6
    18ac:	0001                	nop
    18ae:	1a2d                	addi	s4,s4,-21
    18b0:	0004                	0x4
    18b2:	5e00                	lw	s0,56(a2)
    18b4:	2c00001b          	0x2c00001b
    18b8:	5a01                	li	s4,-32
    18ba:	7202                	flw	ft4,32(sp)
    18bc:	2c00                	fld	fs0,24(s0)
    18be:	5b01                	li	s6,-32
    18c0:	7804                	flw	fs1,48(s0)
    18c2:	7fbc                	flw	fa5,120(a5)
    18c4:	2c06                	fld	fs8,64(sp)
    18c6:	5c01                	li	s8,-32
    18c8:	8302                	jr	t1
    18ca:	0000                	unimp
    18cc:	0900                	addi	s0,sp,144
    18ce:	005d                	c.nop	23
    18d0:	0000                	unimp
    18d2:	18e9                	addi	a7,a7,-6
    18d4:	0000                	unimp
    18d6:	6934                	flw	fa3,80(a0)
    18d8:	0000                	unimp
    18da:	6900                	flw	fs0,16(a0)
    18dc:	0018                	0x18
    18de:	3400                	fld	fs0,40(s0)
    18e0:	0069                	c.nop	26
    18e2:	0000                	unimp
    18e4:	1872                	slli	a6,a6,0x3c
    18e6:	0000                	unimp
    18e8:	0900                	addi	s0,sp,144
    18ea:	005d                	c.nop	23
    18ec:	0000                	unimp
    18ee:	18fc                	addi	a5,sp,124
    18f0:	0000                	unimp
    18f2:	6934                	flw	fa3,80(a0)
    18f4:	0000                	unimp
    18f6:	7b00                	flw	fs0,48(a4)
    18f8:	0018                	0x18
    18fa:	0000                	unimp
    18fc:	5d09                	li	s10,-30
    18fe:	0000                	unimp
    1900:	0f00                	addi	s0,sp,912
    1902:	0019                	c.nop	6
    1904:	3400                	fld	fs0,40(s0)
    1906:	0069                	c.nop	26
    1908:	0000                	unimp
    190a:	1884                	addi	s1,sp,112
    190c:	0000                	unimp
    190e:	3500                	fld	fs0,40(a0)
    1910:	010d                	addi	sp,sp,3
    1912:	0000                	unimp
    1914:	6a01                	0x6a01
    1916:	6306                	flw	ft6,64(sp)
    1918:	ba00000b          	0xba00000b
    191c:	0001                	nop
    191e:	d200                	sw	s0,32(a2)
    1920:	0001                	nop
    1922:	0100                	addi	s0,sp,128
    1924:	b69c                	fsd	fa5,40(a3)
    1926:	001a                	c.slli	zero,0x6
    1928:	3600                	fld	fs0,40(a2)
    192a:	0061                	c.nop	24
    192c:	6a01                	0x6a01
    192e:	6314                	flw	fa3,0(a4)
    1930:	8400000b          	0x8400000b
    1934:	0016                	c.slli	zero,0x5
    1936:	3700                	fld	fs0,40(a4)
    1938:	0702                	c.slli64	a4
    193a:	0000                	unimp
    193c:	6a01                	0x6a01
    193e:	00005d1b          	0x5d1b
    1942:	c900                	sw	s0,16(a0)
    1944:	0016                	c.slli	zero,0x5
    1946:	3600                	fld	fs0,40(a2)
    1948:	0062                	c.slli	zero,0x18
    194a:	6a01                	0x6a01
    194c:	6328                	flw	fa0,64(a4)
    194e:	0300000b          	0x300000b
    1952:	37000017          	auipc	zero,0x37000
    1956:	0709                	addi	a4,a4,2
    1958:	0000                	unimp
    195a:	6a01                	0x6a01
    195c:	00005d2f          	0x5d2f
    1960:	5300                	lw	s0,32(a4)
    1962:	36000017          	auipc	zero,0x36000
    1966:	6f6d                	lui	t5,0x1b
    1968:	0064                	addi	s1,sp,12
    196a:	6a01                	0x6a01
    196c:	00005d3b          	0x5d3b
    1970:	8a00                	0x8a00
    1972:	37000017          	auipc	zero,0x37000
    1976:	052e                	slli	a0,a0,0xb
    1978:	0000                	unimp
    197a:	6a01                	0x6a01
    197c:	5d44                	lw	s1,60(a0)
    197e:	0000                	unimp
    1980:	c100                	sw	s0,0(a0)
    1982:	3a000017          	auipc	zero,0x3a000
    1986:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    198a:	6d01                	0x6d01
    198c:	b609                	j	148e <product2+0x42>
    198e:	001a                	c.slli	zero,0x6
    1990:	1f00                	addi	s0,sp,944
    1992:	0018                	0x18
    1994:	3800                	fld	fs0,48(s0)
    1996:	0069                	c.nop	26
    1998:	6e01                	0x6e01
    199a:	5d09                	li	s10,-30
    199c:	0000                	unimp
    199e:	7d00                	flw	fs0,56(a0)
    19a0:	0018                	0x18
    19a2:	3800                	fld	fs0,48(s0)
    19a4:	006a                	c.slli	zero,0x1a
    19a6:	6e01                	0x6e01
    19a8:	00005d0b          	0x5d0b
    19ac:	e000                	fsw	fs0,0(s0)
    19ae:	0018                	0x18
    19b0:	3800                	fld	fs0,48(s0)
    19b2:	6e01006b          	0x6e01006b
    19b6:	5d0d                	li	s10,-29
    19b8:	0000                	unimp
    19ba:	4d00                	lw	s0,24(a0)
    19bc:	0019                	c.nop	6
    19be:	3a00                	fld	fs0,48(a2)
    19c0:	025a                	slli	tp,tp,0x16
    19c2:	0000                	unimp
    19c4:	6f01                	0x6f01
    19c6:	630a                	flw	ft6,128(sp)
    19c8:	9b00000b          	0x9b00000b
    19cc:	0019                	c.nop	6
    19ce:	3a00                	fld	fs0,48(a2)
    19d0:	000c                	0xc
    19d2:	0000                	unimp
    19d4:	7001                	c.lui	zero,0xfffe0
    19d6:	d209                	beqz	a2,18d8 <result+0x234>
    19d8:	001a                	c.slli	zero,0x6
    19da:	b300                	fsd	fs0,32(a4)
    19dc:	0019                	c.nop	6
    19de:	3a00                	fld	fs0,48(a2)
    19e0:	0364                	addi	s1,sp,396
    19e2:	0000                	unimp
    19e4:	7101                	addi	sp,sp,-512
    19e6:	e509                	bnez	a0,19f0 <ti_2+0xf4>
    19e8:	001a                	c.slli	zero,0x6
    19ea:	ef00                	fsw	fs0,24(a4)
    19ec:	0019                	c.nop	6
    19ee:	3300                	fld	fs0,32(a4)
    19f0:	0069                	c.nop	26
    19f2:	0000                	unimp
    19f4:	00001a63          	bnez	zero,1a08 <ti_2+0x10c>
    19f8:	00006933          	or	s2,zero,zero
    19fc:	b800                	fsd	fs0,48(s0)
    19fe:	001a                	c.slli	zero,0x6
    1a00:	3300                	fld	fs0,32(a4)
    1a02:	0069                	c.nop	26
    1a04:	0000                	unimp
    1a06:	1ae9                	addi	s5,s5,-6
    1a08:	0000                	unimp
    1a0a:	00006933          	or	s2,zero,zero
    1a0e:	2e00                	fld	fs0,24(a2)
    1a10:	2b00001b          	0x2b00001b
    1a14:	024c                	addi	a1,sp,260
    1a16:	0000                	unimp
    1a18:	1b5e                	slli	s6,s6,0x37
    1a1a:	0000                	unimp
    1a1c:	1a34                	addi	a3,sp,312
    1a1e:	0000                	unimp
    1a20:	012c                	addi	a1,sp,136
    1a22:	025a                	slli	tp,tp,0x16
    1a24:	012c008b          	0x12c008b
    1a28:	01f3035b          	0x1f3035b
    1a2c:	2c5a                	fld	fs8,400(sp)
    1a2e:	5c01                	li	s8,-32
    1a30:	8502                	jr	a0
    1a32:	0000                	unimp
    1a34:	0002542b          	0x2542b
    1a38:	f800                	fsw	fs0,48(s0)
    1a3a:	001a                	c.slli	zero,0x6
    1a3c:	5400                	lw	s0,40(s0)
    1a3e:	001a                	c.slli	zero,0x6
    1a40:	2c00                	fld	fs0,24(s0)
    1a42:	5a01                	li	s4,-32
    1a44:	8b02                	jr	s6
    1a46:	2c00                	fld	fs0,24(s0)
    1a48:	5b01                	li	s6,-32
    1a4a:	8402                	jr	s0
    1a4c:	2c00                	fld	fs0,24(s0)
    1a4e:	5c01                	li	s8,-32
    1a50:	8502                	jr	a0
    1a52:	0000                	unimp
    1a54:	0002602b          	0x2602b
    1a58:	5e00                	lw	s0,56(a2)
    1a5a:	7600001b          	0x7600001b
    1a5e:	001a                	c.slli	zero,0x6
    1a60:	2c00                	fld	fs0,24(s0)
    1a62:	5a01                	li	s4,-32
    1a64:	7202                	flw	ft4,32(sp)
    1a66:	2c00                	fld	fs0,24(s0)
    1a68:	5b01                	li	s6,-32
    1a6a:	7804                	flw	fs1,48(s0)
    1a6c:	7fb4                	flw	fa3,120(a5)
    1a6e:	2c06                	fld	fs8,64(sp)
    1a70:	5c01                	li	s8,-32
    1a72:	8202                	jr	tp
    1a74:	0000                	unimp
    1a76:	0002682b          	0x2682b
    1a7a:	f800                	fsw	fs0,48(s0)
    1a7c:	001a                	c.slli	zero,0x6
    1a7e:	9600                	0x9600
    1a80:	001a                	c.slli	zero,0x6
    1a82:	2c00                	fld	fs0,24(s0)
    1a84:	5a01                	li	s4,-32
    1a86:	7202                	flw	ft4,32(sp)
    1a88:	2c00                	fld	fs0,24(s0)
    1a8a:	5b01                	li	s6,-32
    1a8c:	8402                	jr	s0
    1a8e:	2c00                	fld	fs0,24(s0)
    1a90:	5c01                	li	s8,-32
    1a92:	8202                	jr	tp
    1a94:	0000                	unimp
    1a96:	d62d                	beqz	a2,1a00 <ti_2+0x104>
    1a98:	0002                	c.slli64	zero
    1a9a:	f800                	fsw	fs0,48(s0)
    1a9c:	001a                	c.slli	zero,0x6
    1a9e:	2c00                	fld	fs0,24(s0)
    1aa0:	5a01                	li	s4,-32
    1aa2:	0305                	addi	t1,t1,1
    1aa4:	11f4                	addi	a3,sp,236
    1aa6:	0000                	unimp
    1aa8:	012c                	addi	a1,sp,136
    1aaa:	0084025b          	0x84025b
    1aae:	012c                	addi	a1,sp,136
    1ab0:	025c                	addi	a5,sp,260
    1ab2:	0089                	addi	ra,ra,2
    1ab4:	0000                	unimp
    1ab6:	5d09                	li	s10,-30
    1ab8:	0000                	unimp
    1aba:	d200                	sw	s0,32(a2)
    1abc:	001a                	c.slli	zero,0x6
    1abe:	3400                	fld	fs0,40(s0)
    1ac0:	0069                	c.nop	26
    1ac2:	0000                	unimp
    1ac4:	000019ef          	jal	s3,2ac4 <_min_stack+0xac4>
    1ac8:	6934                	flw	fa3,80(a0)
    1aca:	0000                	unimp
    1acc:	f800                	fsw	fs0,48(s0)
    1ace:	0019                	c.nop	6
    1ad0:	0000                	unimp
    1ad2:	5d09                	li	s10,-30
    1ad4:	0000                	unimp
    1ad6:	e500                	fsw	fs0,8(a0)
    1ad8:	001a                	c.slli	zero,0x6
    1ada:	3400                	fld	fs0,40(s0)
    1adc:	0069                	c.nop	26
    1ade:	0000                	unimp
    1ae0:	1a01                	addi	s4,s4,-32
    1ae2:	0000                	unimp
    1ae4:	0900                	addi	s0,sp,144
    1ae6:	005d                	c.nop	23
    1ae8:	0000                	unimp
    1aea:	1af8                	addi	a4,sp,380
    1aec:	0000                	unimp
    1aee:	6934                	flw	fa3,80(a0)
    1af0:	0000                	unimp
    1af2:	0a00                	addi	s0,sp,272
    1af4:	001a                	c.slli	zero,0x6
    1af6:	0000                	unimp
    1af8:	00057c3b          	0x57c3b
    1afc:	0100                	addi	s0,sp,128
    1afe:	33010647          	fmsub.d	fa2,ft2,fa6,ft6,rne
    1b02:	3c00001b          	0x3c00001b
    1b06:	3161                	jal	178e <result+0xea>
    1b08:	0100                	addi	s0,sp,128
    1b0a:	0b631547          	fmsub.d	fa0,ft6,fs6,ft1,rtz
    1b0e:	0000                	unimp
    1b10:	6d3c                	flw	fa5,88(a0)
    1b12:	0100646f          	jal	s0,7b22 <_stack_len+0x3b22>
    1b16:	005d1d47          	fmsub.s	fs10,fs10,ft5,ft0,rtz
    1b1a:	0000                	unimp
    1b1c:	613d                	addi	sp,sp,480
    1b1e:	0005                	c.nop	1
    1b20:	0100                	addi	s0,sp,128
    1b22:	005d2547          	fmsub.s	fa0,fs10,ft5,ft0,rdn
    1b26:	0000                	unimp
    1b28:	6939                	lui	s2,0xe
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	054c                	addi	a1,sp,644
    1b2e:	005d                	c.nop	23
    1b30:	0000                	unimp
    1b32:	3b00                	fld	fs0,48(a4)
    1b34:	00000103          	lb	sp,0(zero) # 0 <__DYNAMIC>
    1b38:	3a01                	jal	1448 <_bss_start+0x254>
    1b3a:	0106                	slli	sp,sp,0x1
    1b3c:	1b58                	addi	a4,sp,436
    1b3e:	0000                	unimp
    1b40:	613c                	flw	fa5,64(a0)
    1b42:	0031                	c.nop	12
    1b44:	3a01                	jal	1454 <product2+0x8>
    1b46:	581e                	lw	a6,228(sp)
    1b48:	3c00001b          	0x3c00001b
    1b4c:	6f6d                	lui	t5,0x1b
    1b4e:	0064                	addi	s1,sp,12
    1b50:	3a01                	jal	1460 <product2+0x14>
    1b52:	0000692f          	0x692f
    1b56:	0000                	unimp
    1b58:	0410                	addi	a2,sp,512
    1b5a:	0069                	c.nop	26
    1b5c:	0000                	unimp
    1b5e:	903e                	c.add	zero,a5
    1b60:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b64:	0621                	addi	a2,a2,8
    1b66:	0092                	slli	ra,ra,0x4
    1b68:	0000                	unimp
    1b6a:	0096                	slli	ra,ra,0x5
    1b6c:	0000                	unimp
    1b6e:	9c01                	0x9c01
    1b70:	1c20                	addi	s0,sp,568
    1b72:	0000                	unimp
    1b74:	0031613f 63152101 	0x631521010031613f
    1b7c:	0100000b          	0x100000b
    1b80:	365a                	fld	fa2,432(sp)
    1b82:	3261                	jal	150a <product2+0xbe>
    1b84:	0100                	addi	s0,sp,128
    1b86:	1d21                	addi	s10,s10,-24
    1b88:	00000b63          	beqz	zero,1b9e <random_keys+0x112>
    1b8c:	00001b83          	lh	s7,0(zero) # 0 <__DYNAMIC>
    1b90:	00056137          	lui	sp,0x56
    1b94:	0100                	addi	s0,sp,128
    1b96:	2421                	jal	1d9e <random_keys+0x312>
    1b98:	005d                	c.nop	23
    1b9a:	0000                	unimp
    1b9c:	00001baf          	0x1baf
    1ba0:	6938                	flw	fa4,80(a0)
    1ba2:	0100                	addi	s0,sp,128
    1ba4:	0522                	slli	a0,a0,0x8
    1ba6:	005d                	c.nop	23
    1ba8:	0000                	unimp
    1baa:	1c0d                	addi	s8,s8,-29
    1bac:	0000                	unimp
    1bae:	2040                	fld	fs0,128(s0)
    1bb0:	001c                	0x1c
    1bb2:	f600                	fsw	fs0,40(a2)
    1bb4:	0000                	unimp
    1bb6:	0a00                	addi	s0,sp,272
    1bb8:	0000                	unimp
    1bba:	0100                	addi	s0,sp,128
    1bbc:	1bd51127          	0x1bd51127
    1bc0:	0000                	unimp
    1bc2:	3841                	jal	1452 <product2+0x6>
    1bc4:	001c                	0x1c
    1bc6:	6500                	flw	fs0,8(a0)
    1bc8:	001c                	0x1c
    1bca:	4100                	lw	s0,0(a0)
    1bcc:	1c2d                	addi	s8,s8,-21
    1bce:	0000                	unimp
    1bd0:	1c88                	addi	a0,sp,624
    1bd2:	0000                	unimp
    1bd4:	4000                	lw	s0,0(s0)
    1bd6:	1c20                	addi	s0,sp,568
    1bd8:	0000                	unimp
    1bda:	0108                	addi	a0,sp,128
    1bdc:	0000                	unimp
    1bde:	000a                	c.slli	zero,0x2
    1be0:	0000                	unimp
    1be2:	2c01                	jal	1df2 <random_keys+0x366>
    1be4:	fc11                	bnez	s0,1b00 <random_keys+0x74>
    1be6:	4100001b          	0x4100001b
    1bea:	1c38                	addi	a4,sp,568
    1bec:	0000                	unimp
    1bee:	00001cab          	0x1cab
    1bf2:	2d41                	jal	2282 <_min_stack+0x282>
    1bf4:	001c                	0x1c
    1bf6:	ce00                	sw	s0,24(a2)
    1bf8:	001c                	0x1c
    1bfa:	0000                	unimp
    1bfc:	2042                	fld	ft0,16(sp)
    1bfe:	001c                	0x1c
    1c00:	1a00                	addi	s0,sp,304
    1c02:	0001                	nop
    1c04:	0a00                	addi	s0,sp,272
    1c06:	0000                	unimp
    1c08:	0100                	addi	s0,sp,128
    1c0a:	1132                	slli	sp,sp,0x2c
    1c0c:	3841                	jal	149c <product2+0x50>
    1c0e:	001c                	0x1c
    1c10:	f100                	fsw	fs0,32(a0)
    1c12:	001c                	0x1c
    1c14:	4100                	lw	s0,0(a0)
    1c16:	1c2d                	addi	s8,s8,-21
    1c18:	0000                	unimp
    1c1a:	1d14                	addi	a3,sp,688
    1c1c:	0000                	unimp
    1c1e:	0000                	unimp
    1c20:	0006653b          	0x6653b
    1c24:	0100                	addi	s0,sp,128
    1c26:	4401060f          	0x4401060f
    1c2a:	001c                	0x1c
    1c2c:	3c00                	fld	fs0,56(s0)
    1c2e:	3161                	jal	18b6 <result+0x212>
    1c30:	0100                	addi	s0,sp,128
    1c32:	1b581e0f          	0x1b581e0f
    1c36:	0000                	unimp
    1c38:	613c                	flw	fa5,64(a0)
    1c3a:	0032                	c.slli	zero,0xc
    1c3c:	0f01                	addi	t5,t5,0
    1c3e:	5830                	lw	a2,112(s0)
    1c40:	0000001b          	0x1b
    1c44:	001c2043          	fmadd.s	ft0,fs8,ft1,ft0,rdn
    1c48:	8c00                	0x8c00
    1c4a:	0000                	unimp
    1c4c:	0600                	addi	s0,sp,768
    1c4e:	0000                	unimp
    1c50:	0100                	addi	s0,sp,128
    1c52:	689c                	flw	fa5,16(s1)
    1c54:	001c                	0x1c
    1c56:	4100                	lw	s0,0(a0)
    1c58:	1c2d                	addi	s8,s8,-21
    1c5a:	0000                	unimp
    1c5c:	00001d37          	lui	s10,0x1
    1c60:	3844                	fld	fs1,176(s0)
    1c62:	001c                	0x1c
    1c64:	0100                	addi	s0,sp,128
    1c66:	3343005b          	0x3343005b
    1c6a:	2800001b          	0x2800001b
    1c6e:	0001                	nop
    1c70:	0600                	addi	s0,sp,768
    1c72:	0000                	unimp
    1c74:	0100                	addi	s0,sp,128
    1c76:	8c9c                	0x8c9c
    1c78:	001c                	0x1c
    1c7a:	4100                	lw	s0,0(a0)
    1c7c:	1b40                	addi	s0,sp,436
    1c7e:	0000                	unimp
    1c80:	1d4a                	slli	s10,s10,0x32
    1c82:	0000                	unimp
    1c84:	4b44                	lw	s1,20(a4)
    1c86:	0100001b          	0x100001b
    1c8a:	f843005b          	0xf843005b
    1c8e:	001a                	c.slli	zero,0x6
    1c90:	2e00                	fld	fs0,24(a2)
    1c92:	0001                	nop
    1c94:	8c00                	0x8c00
    1c96:	0000                	unimp
    1c98:	0100                	addi	s0,sp,128
    1c9a:	629c                	flw	fa5,0(a3)
    1c9c:	001d                	c.nop	7
    1c9e:	4400                	lw	s0,8(s0)
    1ca0:	1b05                	addi	s6,s6,-31
    1ca2:	0000                	unimp
    1ca4:	5a01                	li	s4,-32
    1ca6:	1041                	c.nop	-16
    1ca8:	5d00001b          	0x5d00001b
    1cac:	001d                	c.nop	7
    1cae:	4100                	lw	s0,0(a0)
    1cb0:	1b1c                	addi	a5,sp,432
    1cb2:	0000                	unimp
    1cb4:	1d89                	addi	s11,s11,-30
    1cb6:	0000                	unimp
    1cb8:	2845                	jal	1d68 <random_keys+0x2dc>
    1cba:	e700001b          	0xe700001b
    1cbe:	001d                	c.nop	7
    1cc0:	4600                	lw	s0,8(a2)
    1cc2:	00001b33          	sll	s6,zero,zero
    1cc6:	0146                	slli	sp,sp,0x11
    1cc8:	0000                	unimp
    1cca:	0000                	unimp
    1ccc:	0000                	unimp
    1cce:	5201                	li	tp,-32
    1cd0:	e811                	bnez	s0,1ce4 <random_keys+0x258>
    1cd2:	001c                	0x1c
    1cd4:	4100                	lw	s0,0(a0)
    1cd6:	00001b4b          	fnmsub.s	fs6,ft0,ft0,ft0,rtz
    1cda:	1e34                	addi	a3,sp,824
    1cdc:	0000                	unimp
    1cde:	4041                	c.li	zero,16
    1ce0:	4700001b          	0x4700001b
    1ce4:	001e                	c.slli	zero,0x7
    1ce6:	0000                	unimp
    1ce8:	f846                	fsw	fa7,48(sp)
    1cea:	001a                	c.slli	zero,0x6
    1cec:	4e00                	lw	s0,24(a2)
    1cee:	0001                	nop
    1cf0:	1800                	addi	s0,sp,48
    1cf2:	0000                	unimp
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	1d3e0647          	0x1d3e0647
    1cfa:	0000                	unimp
    1cfc:	001b1c47          	fmsub.s	fs8,fs6,ft1,ft0,rtz
    1d00:	4700                	lw	s0,8(a4)
    1d02:	1b10                	addi	a2,sp,432
    1d04:	0000                	unimp
    1d06:	001b0547          	fmsub.s	fa0,fs6,ft1,ft0,rne
    1d0a:	4800                	lw	s0,16(s0)
    1d0c:	0018                	0x18
    1d0e:	0000                	unimp
    1d10:	2845                	jal	1dc0 <random_keys+0x334>
    1d12:	6100001b          	0x6100001b
    1d16:	001e                	c.slli	zero,0x7
    1d18:	4900                	lw	s0,16(a0)
    1d1a:	00001b33          	sll	s6,zero,zero
    1d1e:	0158                	addi	a4,sp,132
    1d20:	0000                	unimp
    1d22:	0038                	addi	a4,sp,8
    1d24:	0000                	unimp
    1d26:	5d01                	li	s10,-32
    1d28:	4111                	li	sp,4
    1d2a:	00001b4b          	fnmsub.s	fs6,ft0,ft0,ft0,rtz
    1d2e:	1e7f                	0x1e7f
    1d30:	0000                	unimp
    1d32:	4041                	c.li	zero,16
    1d34:	9200001b          	0x9200001b
    1d38:	001e                	c.slli	zero,0x7
    1d3a:	0000                	unimp
    1d3c:	0000                	unimp
    1d3e:	3349                	jal	1ac0 <random_keys+0x34>
    1d40:	7a00001b          	0x7a00001b
    1d44:	0001                	nop
    1d46:	5000                	lw	s0,32(s0)
    1d48:	0000                	unimp
    1d4a:	0100                	addi	s0,sp,128
    1d4c:	4b411157          	0x4b411157
    1d50:	ac00001b          	0xac00001b
    1d54:	001e                	c.slli	zero,0x7
    1d56:	4100                	lw	s0,0(a0)
    1d58:	1b40                	addi	s0,sp,436
    1d5a:	0000                	unimp
    1d5c:	00001ebf 234a0000 	0x234a000000001ebf
    1d64:	19000003          	lb	zero,400(zero) # 190 <array_mod+0x62>
    1d68:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1d6c:	4a00                	lw	s0,16(a2)
    1d6e:	0064                	addi	s1,sp,12
    1d70:	0000                	unimp
    1d72:	005a                	c.slli	zero,0x16
    1d74:	0000                	unimp
    1d76:	1e000007          	0x1e000007
    1d7a:	0000                	unimp
    1d7c:	0200                	addi	s0,sp,256
    1d7e:	4f00                	lw	s0,24(a4)
    1d80:	0004                	0x4
    1d82:	0400                	addi	s0,sp,512
    1d84:	2001                	jal	1d84 <random_keys+0x2f8>
    1d86:	80000023          	sb	zero,-2048(zero) # fffff800 <_stack_start+0xfffef800>
    1d8a:	0000                	unimp
    1d8c:	1000                	addi	s0,sp,32
    1d8e:	17000007          	0x17000007
    1d92:	45000007          	0x45000007
    1d96:	01000007          	0x1000007
    1d9a:	80              	Address 0x0000000000001d9a is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x106>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # ffff9001 <_stack_start+0xfffe9001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
            a1[length-1] = a2[length-1];
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-2] = a2[length-2];
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
} //end of function
  f0:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
            for (i = 0; i < (length / 3); i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    asm volatile(
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	03011317          	auipc	t1,0x3011
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
 12a:	0b39053b          	0xb39053b
    switch(length%3) {
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
            for (i = 0; i < (length / 3); i++) {
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    asm volatile(
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            for (i = 0; i < (length / 3); i++) {
 14a:	0b3a0b0b          	0xb3a0b0b
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
            a1[length-1] = a1[length-1] % mod;
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
    asm volatile(
 17a:	39053b0b          	0x39053b0b
            for (i = 0; i < ((length-1) / 3); i++) {
 17e:	0013490b          	0x13490b
            a1[length-2] = a1[length-2] % mod;
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    asm volatile(
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
            for (i = 0; i < (length / 3); i++) {
 19c:	0b39053b          	0xb39053b
    asm volatile(
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
            for (i = 0; i < ((length-1) / 3); i++) {
 1aa:	0300                	addi	s0,sp,384
    asm volatile(
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    int line[size_b][size_a + size_b];
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0xf6>
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1d8:	0b3a0e03          	lb	t3,179(s4)
    int pola[size_a];
 1dc:	0b390b3b          	0xb390b3b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_equ+0x68>
    int line[size_b][size_a + size_b];
 1ec:	0319                	addi	t1,t1,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 1f4:	1113490b          	0x1113490b
    int pola[size_a];
 1f8:	1201                	addi	tp,tp,-32
    int line[size_b][size_a + size_b];
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
    int pola[size_a];
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
    int polb[size_b];
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 20a:	39053b0b          	0x39053b0b
    int polb[size_b];
 20e:	0213490b          	0x213490b
    int pola[size_a];
 212:	27000017          	auipc	zero,0x27000
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 216:	0034                	addi	a3,sp,8
    int line[size_b][size_a + size_b];
 218:	0b3a0803          	lb	a6,179(s4)
    int polb[size_b];
 21c:	0b39053b          	0xb39053b
            line[i][j] = 0;
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
    for (i = 0; i < size_b; ++i){
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
            product[j] = 0;
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 230:	0213490b          	0x213490b
    array_equ(pola,a,size_a);
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
    array_mod(pola,mod,size_a);
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
    array_equ(polb,b,size_b);
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
    array_mod(polb,mod,size_b);
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
    if(star_mult == 1){
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
        for (j = size_b -1; j >= 0; j = j-1){
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
            product[j] = 0;
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
            line[i][j] = 0;
 294:	12011113          	0x12011113
            product[j] = 0;
 298:	4006                	0x4006
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 2ac:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	31000017          	auipc	zero,0x31000
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
    for(j = 0; j < size_a + size_b -1; ++j){
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
    array_mod(product,mod,(size_a+size_b-1));
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
}
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
                line[size_b-1-j][k] = pola[k]*polb[j];
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 318:	03000537          	lui	a0,0x3000
        for (j = size_b -1; j >= 0; j = j-1){
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 326:	38000017          	auipc	zero,0x38000
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
            for (k = size_a-1; k >= 0; k = k-1 ){
 338:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 340:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
            line[i][j] = line[i][j] % mod;
 34c:	0b3a0e03          	lb	t3,179(s4)
        for(j = 0; j < size_a + size_b -1; ++j){
 350:	0b390b3b          	0xb390b3b
            line[i][j] = line[i][j] % mod;
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 35a:	3f012e3b          	0x3f012e3b
    for (i = 0; i < size_b; ++i){
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 366:	2019270b          	0x2019270b
            product[j] += line[i][j];
 36a:	0013010b          	0x13010b
 36e:	3c00                	fld	fs0,56(s0)
        for(i = 0; i < size_b; ++i){
 370:	0005                	c.nop	1
            product[j] += line[i][j];
 372:	0b3a0803          	lb	a6,179(s4)
 376:	0b390b3b          	0xb390b3b
 37a:	1349                	addi	t1,t1,-14
 37c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 37e:	053d                	addi	a0,a0,15
 380:	0300                	addi	s0,sp,384
    for(j = 0; j < size_a + size_b -1; ++j){
 382:	3a0e                	fld	fs4,224(sp)
 384:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 388:	0013490b          	0x13490b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 38c:	3e00                	fld	fs0,56(a2)
    int line[size_b][size_a + size_b];
 38e:	012e                	slli	sp,sp,0xb
 390:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 398:	0b39                	addi	s6,s6,14
 39a:	01111927          	0x1111927
    int line[size_b][size_a + size_b];
 39e:	0612                	slli	a2,a2,0x4
 3a0:	1840                	addi	s0,sp,52
 3a2:	01194297          	auipc	t0,0x1194
 3a6:	3f000013          	li	zero,1008
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3aa:	0005                	c.nop	1
 3ac:	0b3a0803          	lb	a6,179(s4)
 3b0:	0b390b3b          	0xb390b3b
 3b4:	1349                	addi	t1,t1,-14
 3b6:	1802                	slli	a6,a6,0x20
 3b8:	0000                	unimp
    int line[size_b][size_a + size_b];
 3ba:	1d40                	addi	s0,sp,692
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3bc:	3101                	jal	ffffffbc <_stack_start+0xfffeffbc>
 3be:	12011113          	0x12011113
    int line[size_b][size_a + size_b];
 3c2:	5806                	lw	a6,96(sp)
 3c4:	570b590b          	0x570b590b
    int pola[size_a];
 3c8:	0013010b          	0x13010b
 3cc:	4100                	lw	s0,0(a0)
    int line[size_b][size_a + size_b];
 3ce:	0005                	c.nop	1
    int pola[size_a];
 3d0:	1331                	addi	t1,t1,-20
 3d2:	1702                	slli	a4,a4,0x20
    int polb[size_b];
 3d4:	0000                	unimp
 3d6:	1d42                	slli	s10,s10,0x30
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
    int pola[size_a];
 3da:	12011113          	0x12011113
    int polb[size_b];
 3de:	5806                	lw	a6,96(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e0:	570b590b          	0x570b590b
    int line[size_b][size_a + size_b];
 3e4:	4300000b          	0x4300000b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e8:	012e                	slli	sp,sp,0xb
    int pola[size_a];
 3ea:	1331                	addi	t1,t1,-20
 3ec:	0111                	addi	sp,sp,4
    int polb[size_b];
 3ee:	0612                	slli	a2,a2,0x4
    for (i = 0; i < size_b; ++i){
 3f0:	1840                	addi	s0,sp,52
 3f2:	01194297          	auipc	t0,0x1194
            product2[j] = 0;
 3f6:	44000013          	li	zero,1088
 3fa:	0005                	c.nop	1
 3fc:	1331                	addi	t1,t1,-20
    for (i = 0; i < size_b; ++i){
 3fe:	1802                	slli	a6,a6,0x20
 400:	0000                	unimp
    array_equ(pola,a,size_a);
 402:	3445                	jal	fffffea2 <_stack_start+0xfffefea2>
 404:	3100                	fld	fs0,32(a0)
 406:	00170213          	addi	tp,a4,1
 40a:	4600                	lw	s0,8(a2)
 40c:	011d                	addi	sp,sp,7
    array_equ(polb,b,size_b);
 40e:	1331                	addi	t1,t1,-20
 410:	0152                	slli	sp,sp,0x14
 412:	1755                	addi	a4,a4,-11
 414:	0b58                	addi	a4,sp,404
 416:	0b59                	addi	s6,s6,22
 418:	13010b57          	0x13010b57
    if(star_mult == 1){
 41c:	0000                	unimp
 41e:	31000547          	fmsub.s	fa0,ft0,fa6,ft6,rne
 422:	48000013          	li	zero,1152
 426:	1755010b          	0x1755010b
 42a:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 42c:	1d49                	addi	s10,s10,-14
 42e:	3101                	jal	2e <__DYNAMIC+0x2e>
            for (k = size_a-1; k >= 0; k = k-1 ){
 430:	55015213          	0x55015213
            product2[j] = 0;
 434:	590b5817          	auipc	a6,0x590b5
 438:	000b570b          	0xb570b
            line[i][j] = 0;
 43c:	4a00                	lw	s0,16(a2)
            product2[j] = 0;
 43e:	002e                	c.slli	zero,0xb
 440:	193c193f 0e030e6e 	0xe030e6e193c193f
        for(j = 0; j < size_a + size_b -1; ++j){
 448:	0b3a                	slli	s6,s6,0xe
    for (i = 0; i < size_b; ++i){
 44a:	00000b3b          	0xb3b
 44e:	0100                	addi	s0,sp,128
 450:	0011                	c.nop	4
        for(j = 0; j < size_a + size_b -1; ++j){
 452:	0610                	addi	a2,sp,768
 454:	0655                	addi	a2,a2,21
                line[size_b-1-j][k] = pola[k]*polb[j];
 456:	0e1b0e03          	lb	t3,225(s6)
 45a:	0e25                	addi	t3,t3,9
 45c:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0ff8                	addi	a4,sp,988
       2:	0000                	unimp
       4:	100c                	addi	a1,sp,32
       6:	0000                	unimp
       8:	0001                	nop
       a:	0c5a                	slli	s8,s8,0x16
       c:	0010                	0x10
       e:	0d00                	addi	s0,sp,656
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	100e                	c.slli	zero,0x23
      20:	0000                	unimp
      22:	104e                	c.slli	zero,0x33
      24:	0000                	unimp
      26:	0001                	nop
      28:	545a                	lw	s0,180(sp)
      2a:	0010                	0x10
      2c:	5e00                	lw	s0,56(a2)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f6c                	addi	a1,sp,924
      3e:	0000                	unimp
      40:	0fc0                	addi	s0,sp,980
      42:	0000                	unimp
      44:	0001                	nop
      46:	c05a                	sw	s6,0(sp)
      48:	e800000f          	0xe800000f
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	4e00                	lw	s0,24(a2)
      5e:	a200000f          	0xa200000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fa2                	slli	t6,t6,0x8
      6c:	0000                	unimp
      6e:	0fac                	addi	a1,sp,984
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fac                	addi	a1,sp,984
      78:	0000                	unimp
      7a:	00000feb          	0xfeb
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	00000feb          	0xfeb
  jal x0, default_exc_handler
      86:	1052                	c.slli	zero,0x34
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	5279                	li	tp,-2
}
      90:	0010                	0x10
    switch(length%3) {
      92:	5400                	lw	s0,40(s0)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	1054                	addi	a3,sp,36
      9e:	0000                	unimp
      a0:	105e                	c.slli	zero,0x37
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	4e00                	lw	s0,24(a2)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	7c00000f          	0x7c00000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0f7c                	addi	a5,sp,924
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	0f7e                	slli	t5,t5,0x1f
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0f7e                	slli	t5,t5,0x1f
      cc:	0000                	unimp
      ce:	1004                	addi	s1,sp,32
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d6:	047a                	slli	s0,s0,0x1e
      d8:	0010                	0x10
      da:	0d00                	addi	s0,sp,656
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	0d00                	addi	s0,sp,656
            a1[length-1] = a2[length-1];
      e4:	0010                	0x10
            a1[length-2] = a2[length-2];
      e6:	5200                	lw	s0,32(a2)
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
} //end of function
      f0:	1052                	c.slli	zero,0x34
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	1054                	addi	a3,sp,36
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # 6ff07 <_stack_start+0x5ff07>
      fc:	547a                	lw	s0,188(sp)
      fe:	0010                	0x10
            for (i = 0; i < (length / 3); i++) {
     100:	5e00                	lw	s0,56(a2)
     102:	0010                	0x10
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
    asm volatile(
     108:	7af0                	flw	fa2,116(a3)
	...
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0f4e                	slli	t5,t5,0x13
     114:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0f88                	addi	a0,sp,976
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	887c                	0x887c
     120:	9200000f          	0x9200000f
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0200000f          	fence	r,unknown
    asm volatile(
     128:	7e00                	flw	fs0,56(a2)
     12a:	9200                	0x9200
}
     12c:	4c00000f          	0x4c00000f
    switch(length%3) {
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
     134:	8200                	0x8200
     136:	4c00                	lw	s0,24(s0)
     138:	0010                	0x10
     13a:	5200                	lw	s0,32(a2)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     142:	7cc4                	flw	fs1,60(s1)
     144:	1052                	c.slli	zero,0x34
    asm volatile(
     146:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     148:	1054                	addi	a3,sp,36
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            for (i = 0; i < ((length-2) / 3); i++) {
     150:	547c                	lw	a5,108(s0)
     152:	0010                	0x10
     154:	5e00                	lw	s0,56(a2)
     156:	0010                	0x10
    asm volatile(
     158:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	8200                	0x8200
	...
            a1[length-1] = a1[length-1] % mod;
     164:	4e00                	lw	s0,24(a2)
     166:	bc00000f          	0xbc00000f
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	7e98                	flw	fa4,56(a3)
     172:	0fbc                	addi	a5,sp,984
     174:	0000                	unimp
     176:	0fc2                	slli	t6,t6,0x10
     178:	0000                	unimp
    asm volatile(
     17a:	0002                	c.slli64	zero
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	007c                	addi	a5,sp,12
     17e:	0fc2                	slli	t6,t6,0x10
            a1[length-1] = a1[length-1] % mod;
     180:	0000                	unimp
            a1[length-2] = a1[length-2] % mod;
     182:	00000feb          	0xfeb
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	00000feb          	0xfeb
} //end of function
     18e:	1052                	c.slli	zero,0x34
    asm volatile(
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	527e                	lw	tp,252(sp)
     198:	0010                	0x10
            for (i = 0; i < (length / 3); i++) {
     19a:	5400                	lw	s0,40(s0)
     19c:	0010                	0x10
    asm volatile(
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	1054                	addi	a3,sp,36
     1a6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	105e                	c.slli	zero,0x37
     1aa:	0000                	unimp
    asm volatile(
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	7000                	flw	fs0,32(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	7400000f          	0x7400000f
     1be:	0200000f          	fence	r,unknown
    int line[size_b][size_a + size_b];
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	189f 0010 2200      	0x22000010189f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ca:	0010                	0x10
    int line[size_b][size_a + size_b];
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	6600                	flw	fs0,8(a2)
     1da:	000c                	0xc
    int pola[size_a];
     1dc:	7e00                	flw	fs0,56(a2)
     1de:	000c                	0xc
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0c7e                	slli	s8,s8,0x1f
     1e6:	0000                	unimp
     1e8:	0ce2                	slli	s9,s9,0x18
     1ea:	0000                	unimp
    int line[size_b][size_a + size_b];
     1ec:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	e258                	fsw	fa4,4(a2)
     1f0:	000c                	0xc
     1f2:	ee00                	fsw	fs0,24(a2)
    int line[size_b][size_a + size_b];
     1f4:	000c                	0xc
    int pola[size_a];
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
    int line[size_b][size_a + size_b];
     1fa:	9f7f                	0x9f7f
     1fc:	0cee                	slli	s9,s9,0x1b
     1fe:	0000                	unimp
    int pola[size_a];
     200:	0cf4                	addi	a3,sp,604
     202:	0000                	unimp
    int polb[size_b];
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
    int pola[size_a];
     20a:	0cf4                	addi	a3,sp,604
    int polb[size_b];
     20c:	0000                	unimp
     20e:	0d2a                	slli	s10,s10,0xa
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	0000                	unimp
    int pola[size_a];
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	0000                	unimp
    int line[size_b][size_a + size_b];
     218:	0000                	unimp
     21a:	0000                	unimp
    int polb[size_b];
     21c:	6600                	flw	fs0,8(a2)
            line[i][j] = 0;
     21e:	000c                	0xc
     220:	8800                	0x8800
     222:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
            product[j] = 0;
     228:	0c88                	addi	a0,sp,592
     22a:	0000                	unimp
     22c:	0cec                	addi	a1,sp,604
     22e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     230:	0001                	nop
     232:	ec65                	bnez	s0,32a <polymult+0x170>
    array_equ(pola,a,size_a);
     234:	000c                	0xc
     236:	f400                	fsw	fs0,40(s0)
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	f49f 000c 2a00      	0x2a00000cf49f
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
    array_equ(polb,b,size_b);
     254:	0c66                	slli	s8,s8,0x19
     256:	0000                	unimp
     258:	0c80                	addi	s0,sp,592
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	805c                	0x805c
    array_mod(polb,mod,size_b);
     260:	000c                	0xc
     262:	e600                	fsw	fs0,8(a2)
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     268:	6200                	flw	fs0,0(a2)
     26a:	0ce6                	slli	s9,s9,0x19
     26c:	0000                	unimp
     26e:	0cf4                	addi	a3,sp,604
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0cf4                	addi	a3,sp,604
     27a:	0000                	unimp
     27c:	0d2a                	slli	s10,s10,0xa
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
        for (j = size_b -1; j >= 0; j = j-1){
     284:	0000                	unimp
     286:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0000                	unimp
     28a:	6600                	flw	fs0,8(a2)
            product[j] = 0;
     28c:	000c                	0xc
     28e:	8200                	0x8200
     290:	000c                	0xc
            line[i][j] = 0;
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
            product[j] = 0;
     296:	0c82                	c.slli64	s9
     298:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	00000c9b          	0xc9b
     29e:	0001                	nop
     2a0:	9b5a                	add	s6,s6,s6
    for (i = 0; i < size_b; ++i){
     2a2:	000c                	0xc
     2a4:	2a00                	fld	fs0,16(a2)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    if(star_mult == 1){
     2ae:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2b6:	6600                	flw	fs0,8(a2)
     2b8:	000c                	0xc
     2ba:	8a00                	0x8a00
     2bc:	000c                	0xc
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	0c8a                	slli	s9,s9,0x2
     2c4:	0000                	unimp
     2c6:	0cf0                	addi	a2,sp,604
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000cf067          	0xcf067
     2d0:	f400                	fsw	fs0,40(s0)
     2d2:	000c                	0xc
     2d4:	0400                	addi	s0,sp,512
}
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	f49f 000c 2a00      	0x2a00000cf49f
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0c66                	slli	s8,s8,0x19
     2f0:	0000                	unimp
     2f2:	00000c9b          	0xc9b
     2f6:	0001                	nop
     2f8:	9b5f 000c 2a00      	0x2a00000c9b5f
     2fe:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	6600                	flw	fs0,8(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	9b00                	0x9b00
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	6000                	flw	fs0,0(s0)
     31a:	00000c9b          	0xc9b
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0cea                	slli	s9,s9,0x1a
     320:	0000                	unimp
     322:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	ea64                	fsw	fs1,84(a2)
     326:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	f400                	fsw	fs0,40(s0)
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	f49f 000c 2a00      	0x2a00000cf49f
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
        for (j = size_b -1; j >= 0; j = j-1){
     346:	0c9c                	addi	a5,sp,592
     348:	0000                	unimp
     34a:	0ca9                	addi	s9,s9,10
            line[i][j] = line[i][j] % mod;
     34c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
            line[i][j] = line[i][j] % mod;
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	ac00                	fsd	fs0,24(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	000c                	0xc
     35c:	ca00                	sw	s0,16(a2)
    for (i = 0; i < size_b; ++i){
     35e:	000c                	0xc
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0cca                	slli	s9,s9,0x12
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	0000                	unimp
     368:	0ccd                	addi	s9,s9,19
            product[j] += line[i][j];
     36a:	0000                	unimp
     36c:	0001                	nop
     36e:	f45c                	fsw	fa5,44(s0)
        for(i = 0; i < size_b; ++i){
     370:	000c                	0xc
            product[j] += line[i][j];
     372:	1800                	addi	s0,sp,48
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0cce                	slli	s9,s9,0x13
     384:	0000                	unimp
     386:	00000cd7          	0xcd7
        for(i = 0; i < size_b; ++i){
     38a:	0001                	nop
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	005a                	c.slli	zero,0x16
    int line[size_b][size_a + size_b];
     38e:	0000                	unimp
     390:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	0000                	unimp
     394:	d800                	sw	s0,48(s0)
     396:	000c                	0xc
     398:	f400                	fsw	fs0,40(s0)
     39a:	000c                	0xc
    int line[size_b][size_a + size_b];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d18                	addi	a4,sp,656
     3a2:	0000                	unimp
     3a4:	0d2a                	slli	s10,s10,0xa
     3a6:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	ac00                	fsd	fs0,24(s0)
     3b4:	000c                	0xc
     3b6:	b200                	fsd	fs0,32(a2)
     3b8:	000c                	0xc
    int line[size_b][size_a + size_b];
     3ba:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cb2                	slli	s9,s9,0xc
    int line[size_b][size_a + size_b];
     3c0:	0000                	unimp
     3c2:	0cbe                	slli	s9,s9,0xf
     3c4:	0000                	unimp
    int pola[size_a];
     3c6:	0001                	nop
     3c8:	be5d                	j	ffffff7e <_stack_start+0xfffeff7e>
     3ca:	000c                	0xc
     3cc:	c400                	sw	s0,8(s0)
    int line[size_b][size_a + size_b];
     3ce:	000c                	0xc
    int pola[size_a];
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
    int polb[size_b];
     3d4:	0cd8                	addi	a4,sp,596
     3d6:	0000                	unimp
     3d8:	0ce4                	addi	s1,sp,604
    int pola[size_a];
     3da:	0000                	unimp
    int polb[size_b];
     3dc:	0001                	nop
     3de:	f459                	bnez	s0,36c <polymult+0x1b2>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	000c                	0xc
     3e2:	fe00                	fsw	fs0,56(a2)
    int line[size_b][size_a + size_b];
     3e4:	000c                	0xc
     3e6:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	5d00                	lw	s0,56(a0)
    int pola[size_a];
     3ea:	0cfe                	slli	s9,s9,0x1f
     3ec:	0000                	unimp
    int polb[size_b];
     3ee:	0d04                	addi	s1,sp,656
    for (i = 0; i < size_b; ++i){
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # 17f7 <result+0x153>
            product2[j] = 0;
     3f6:	049f 000d 0600      	0x600000d049f
     3fc:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
    array_equ(pola,a,size_a);
     402:	0d06                	slli	s10,s10,0x1
     404:	0000                	unimp
     406:	0d18                	addi	a4,sp,656
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	185e                	slli	a6,a6,0x37
    array_equ(polb,b,size_b);
     40e:	000d                	c.nop	3
     410:	2200                	fld	fs0,0(a2)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d22                	slli	s10,s10,0x8
    if(star_mult == 1){
     41a:	0000                	unimp
     41c:	0d28                	addi	a0,sp,664
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # e7f7 <_stack+0x7f7>
     424:	289f 000d 2a00      	0x2a00000d289f
     42a:	000d                	c.nop	3
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
            product2[j] = 0;
     438:	0bd2                	slli	s7,s7,0x14
            line[i][j] = 0;
     43a:	0000                	unimp
     43c:	0bee                	slli	s7,s7,0x1b
            product2[j] = 0;
     43e:	0000                	unimp
     440:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	ee5a                	fsw	fs6,28(sp)
     444:	3e00000b          	0x3e00000b
     448:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
     44e:	0c3e                	slli	s8,s8,0xf
     450:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	0c66                	slli	s8,s8,0x19
     454:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
     464:	0bd2                	slli	s7,s7,0x14
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	0be8                	addi	a0,sp,476
     46a:	0000                	unimp
     46c:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	000be85b          	0xbe85b
        for (j = size_b -1; j >= 0; j = j-1){
     472:	4c00                	lw	s0,24(s0)
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     47a:	0c4c                	addi	a1,sp,532
        for(j=0;j<size_a+size_b-1;++j){
     47c:	0000                	unimp
    for(i=0;i<size_b;++i){
     47e:	0c54                	addi	a3,sp,532
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0c54                	addi	a3,sp,532
     48a:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     48c:	0c66                	slli	s8,s8,0x19
     48e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	d200                	sw	s0,32(a2)
     49c:	ec00000b          	0xec00000b
     4a0:	0100000b          	0x100000b
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	5c00                	lw	s0,56(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	0bec                	addi	a1,sp,476
     4a8:	0000                	unimp
     4aa:	0c2c                	addi	a1,sp,536
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	0000                	unimp
     4ae:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	2c59                	jal	746 <ext_euclid+0x7a>
     4b2:	000c                	0xc
     4b4:	6600                	flw	fs0,8(a2)
     4b6:	000c                	0xc
            product2[j] += line[i][j];
     4b8:	0400                	addi	s0,sp,512
     4ba:	f300                	fsw	fs0,32(a4)
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	5c01                	li	s8,-32
     4be:	009f 0000 0000      	0x9f
            product2[j] += line[i][j];
     4c4:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	d200                	sw	s0,32(a2)
     4c8:	f900000b          	0xf900000b
    for(i=0;i<size_b;++i){
     4cc:	0100000b          	0x100000b
     4d0:	5d00                	lw	s0,56(a0)
}
     4d2:	0bf9                	addi	s7,s7,30
     4d4:	0000                	unimp
     4d6:	0c50                	addi	a2,sp,532
     4d8:	0000                	unimp
     4da:	0001                	nop
     4dc:	5064                	lw	s1,100(s0)
     4de:	000c                	0xc
     4e0:	5400                	lw	s0,40(s0)
     4e2:	000c                	0xc
     4e4:	0400                	addi	s0,sp,512
     4e6:	f300                	fsw	fs0,32(a4)
     4e8:	5d01                	li	s10,-32
     4ea:	549f 000c 6600      	0x6600000c549f
     4f0:	000c                	0xc
     4f2:	0100                	addi	s0,sp,128
     4f4:	6400                	flw	fs0,8(s0)
	...
    int v[size_N];
     4fe:	0bd2                	slli	s7,s7,0x14
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	0000                	unimp
    int v[size_N];
     502:	0bf9                	addi	s7,s7,30
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	0000                	unimp
     506:	0001                	nop
     508:	f95e                	fsw	fs7,176(sp)
     50a:	4e00000b          	0x4e00000b
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
     514:	0c4e                	slli	s8,s8,0x13
     516:	0000                	unimp
     518:	0c54                	addi	a3,sp,532
     51a:	0000                	unimp
     51c:	0004                	0x4
    int v[size_N];
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c54                	addi	a3,sp,532
     524:	0000                	unimp
     526:	0c66                	slli	s8,s8,0x19
    int q[size_N];
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0x30>
    int num_temp[size_N];
     530:	0000                	unimp
    int denum_temp[size_D];
     532:	0000                	unimp
     534:	0c00                	addi	s0,sp,528
     536:	000c                	0xc
     538:	3700                	fld	fs0,40(a4)
    int num_temp[size_N];
     53a:	000c                	0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     53e:	5a00                	lw	s0,48(a2)
	...
       array_equ(num_temp,num,size_N);
     548:	0c0c                	addi	a1,sp,528
     54a:	0000                	unimp
     54c:	0c12                	slli	s8,s8,0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
    int denum_temp[size_D];
     552:	9f30                	0x9f30
     554:	0c38                	addi	a4,sp,536
       array_equ(num_temp,num,size_N);
     556:	0000                	unimp
       array_mod(num_temp, mod, size_N);
     558:	0c4a                	slli	s8,s8,0x12
     55a:	0000                	unimp
     55c:	0001                	nop
     55e:	5459                	li	s0,-10
    int denum_temp[size_D];
     560:	000c                	0xc
    array_equ(denum_temp,denum,size_D);
     562:	5e00                	lw	s0,56(a2)
     564:	000c                	0xc
     566:	0100                	addi	s0,sp,128
     568:	5900                	lw	s0,48(a0)
    array_mod(denum_temp,mod,size_D);
     56a:	0c5e                	slli	s8,s8,0x17
     56c:	0000                	unimp
     56e:	0c64                	addi	s1,sp,540
     570:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     572:	7f790003          	lb	zero,2039(s2)
     576:	649f 000c 6600      	0x6600000c649f
    for (i = size_D-1; i >= 0; i = i-1){
     57c:	000c                	0xc
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
    for (u = 0; u < mod; ++u){
     58a:	08e0                	addi	s0,sp,92
     58c:	0000                	unimp
     58e:	0924                	addi	s1,sp,152
     590:	0000                	unimp
        q[i] = 0;
     592:	0001                	nop
     594:	245a                	fld	fs0,400(sp)
     596:	0009                	c.nop	2
     598:	e600                	fsw	fs0,8(a2)
        v[i] = 0;
     59a:	000a                	c.slli	zero,0x2
        q[i] = 0;
     59c:	0100                	addi	s0,sp,128
     59e:	6200                	flw	fs0,0(a2)
        v[i] = 0;
     5a0:	0ae6                	slli	s5,s5,0x19
     5a2:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     5a4:	0b0a                	slli	s6,s6,0x2
     5a6:	0000                	unimp
        if( denum_temp[i] != 0 )
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
    for (i = size_D-1; i >= 0; i = i-1){
     5ac:	0a9f 000b 2a00      	0x2a00000b0a9f
        if ( (b_N*u)%mod == 1 )
     5b2:	0400000b          	0x400000b
     5b6:	f300                	fsw	fs0,32(a4)
    for (u = 0; u < mod; ++u){
     5b8:	5a01                	li	s4,-32
     5ba:	2a9f 000b be00      	0xbe00000b2a9f
    for (i = size_N-1; i >= 0; i = i-1){
     5c0:	0100000b          	0x100000b
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0bbe                	slli	s7,s7,0xf
     5c8:	0000                	unimp
     5ca:	0bd2                	slli	s7,s7,0x14
    while (d >= d2){
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
    array_equ(result,q,size_N);
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
     5da:	e000                	fsw	fs0,0(s0)
     5dc:	0008                	0x8
    for(i = size_N; i < (2*size_N); ++i){
     5de:	1c00                	addi	s0,sp,560
     5e0:	0009                	c.nop	2
        result[i] = num_temp[i-size_N];
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	091c                	addi	a5,sp,144
     5e8:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	0b12                	slli	s6,s6,0x4
     5ec:	0000                	unimp
}
     5ee:	0001                	nop
     5f0:	000b1267          	0xb1267
     5f4:	2a00                	fld	fs0,16(a2)
     5f6:	0400000b          	0x400000b
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	2a9f 000b d200      	0xd200000b2a9f
     604:	0100000b          	0x100000b
     608:	6700                	flw	fs0,8(a4)
	...
     612:	08e0                	addi	s0,sp,92
     614:	0000                	unimp
     616:	0920                	addi	s0,sp,152
        v[(d-d2)] = u*r_d;
     618:	0000                	unimp
     61a:	0001                	nop
     61c:	205c                	fld	fa5,128(s0)
     61e:	0009                	c.nop	2
     620:	0e00                	addi	s0,sp,784
     622:	0100000b          	0x100000b
        array_mod(v, mod, size_N);
     626:	6600                	flw	fs0,8(a2)
     628:	0b0e                	slli	s6,s6,0x3
        v[(d-d2)] = u*r_d;
     62a:	0000                	unimp
        array_mod(v, mod, size_N);
     62c:	0b2a                	slli	s6,s6,0xa
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	0000                	unimp
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
     636:	0b2a                	slli	s6,s6,0xa
     638:	0000                	unimp
     63a:	0bd2                	slli	s7,s7,0x14
        array_mod(product, mod, size_N);
     63c:	0000                	unimp
     63e:	0001                	nop
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0066                	c.slli	zero,0x19
        array_mod(product, mod, size_N);
     642:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     644:	0000                	unimp
     646:	0000                	unimp
     648:	6e00                	flw	fs0,24(a2)
     64a:	000a                	c.slli	zero,0x2
	array_mod(num_temp, mod, size_N);
     64c:	7800                	flw	fs0,48(s0)
     64e:	000a                	c.slli	zero,0x2
     650:	0100                	addi	s0,sp,128
     652:	5a00                	lw	s0,48(a2)
	...
        array_mod(q, mod, size_N);
     65c:	0a88                	addi	a0,sp,336
     65e:	0000                	unimp
     660:	0aa5                	addi	s5,s5,9
     662:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0001                	nop
     666:	8a5a                	mv	s4,s6
     668:	9e00000b          	0x9e00000b
     66c:	0100000b          	0x100000b
     670:	5a00                	lw	s0,48(a2)
	...
            num_temp[i] = num_temp[i] - product[i];
     67a:	0aa6                	slli	s5,s5,0x9
     67c:	0000                	unimp
     67e:	0ab9                	addi	s5,s5,14
        for (i = 0; i < size_N; ++i){
     680:	0000                	unimp
     682:	0001                	nop
            num_temp[i] = num_temp[i] - product[i];
     684:	9e5a                	add	t3,t3,s6
     686:	ae00000b          	0xae00000b
        for (i = 0; i < size_N; ++i){
     68a:	0100000b          	0x100000b
            q[i] = q[i] + v[i];
     68e:	5a00                	lw	s0,48(a2)
	...
        for(i = 0; i < size_N; ++i){
     698:	0aba                	slli	s5,s5,0xe
            q[i] = q[i] + v[i];
     69a:	0000                	unimp
     69c:	0ad6                	slli	s5,s5,0x15
     69e:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     6a0:	0001                	nop
            if( num_temp[i] != 0 )
     6a2:	ae5a                	fsd	fs6,280(sp)
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	be00000b          	0xbe00000b
            v[i] = 0;
     6a8:	0100000b          	0x100000b
     6ac:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     6b6:	0a22                	slli	s4,s4,0x8
     6b8:	0000                	unimp
        result[i] = num_temp[i-size_N];
     6ba:	0aee                	slli	s5,s5,0x1b
     6bc:	0000                	unimp
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
     6c2:	0aee                	slli	s5,s5,0x1b
     6c4:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0b06                	slli	s6,s6,0x1
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     6cc:	0084                	addi	s1,sp,64
     6ce:	0b06                	slli	s6,s6,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6d2:	0b0a                	slli	s6,s6,0x2
     6d4:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
     6da:	0085                	addi	ra,ra,1
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0b0a                	slli	s6,s6,0x2
     6ea:	0000                	unimp
     6ec:	0b2a                	slli	s6,s6,0xa
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
    int ri_2[size]; // MX-ring poly, a
     6f4:	235a01f3          	0x235a01f3
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
    int ri[size];
     700:	0a1c                	addi	a5,sp,272
     702:	01f0                	addi	a2,sp,204
    int ti_1[size]; // ti_1[0] = 1
     704:	2a1c                	fld	fa5,16(a2)
     706:	d200000b          	0xd200000b
    int ti[size];
     70a:	0200000b          	0x200000b
     70e:	7200                	flw	fs0,32(a2)
	...
    int temp[size];
     718:	2600                	fld	fs0,8(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	000a                	c.slli	zero,0x2
     71c:	2800                	fld	fs0,16(s0)
     71e:	000a                	c.slli	zero,0x2
    int ri_2[size]; // MX-ring poly, a
     720:	0200                	addi	s0,sp,256
     722:	3100                	fld	fs0,32(a0)
    int temp[size];
     724:	289f 000a 2e00      	0x2e00000a289f
        ti_2[i] = 0;
     72a:	000a                	c.slli	zero,0x2
     72c:	0100                	addi	s0,sp,128
     72e:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size; ++i) {
     730:	0a32                	slli	s4,s4,0xc
     732:	0000                	unimp
    array_equ(ri_2,polyR,size);
     734:	0a38                	addi	a4,sp,280
     736:	0000                	unimp
     738:	0001                	nop
     73a:	405f 000a 4e00      	0x4e00000a405f
    array_equ(ri_1,polyf,size);
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
    ti_1[0] = 1;
     744:	5f00                	lw	s0,56(a4)
     746:	0a58                	addi	a4,sp,276
     748:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	0a6d                	addi	s4,s4,27
     74c:	0000                	unimp
     74e:	0001                	nop
     750:	6e5f 000a 7800      	0x7800000a6e5f
            ti[i] = ti_2[i] - temp[i];
     756:	000a                	c.slli	zero,0x2
     758:	0500                	addi	s0,sp,640
    array_mod(ri_2,mod,size);
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
     760:	0a78                	addi	a4,sp,284
    array_mod(ri_1,mod,size);
     762:	0000                	unimp
     764:	00000a87          	0xa87
     768:	0001                	nop
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	885f 000a 9800      	0x9800000a885f
     770:	000a                	c.slli	zero,0x2
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
     77a:	0a98                	addi	a4,sp,336
     77c:	0000                	unimp
     77e:	0aa6                	slli	s5,s5,0x9
     780:	0000                	unimp
     782:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     784:	a659                	j	b0a <generate_keys+0x22a>
     786:	000a                	c.slli	zero,0x2
     788:	ae00                	fsd	fs0,24(a2)
    array_mod(temp,mod,size);
     78a:	000a                	c.slli	zero,0x2
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
     790:	ae9f 000a b600      	0xb600000aae9f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     796:	000a                	c.slli	zero,0x2
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
     79c:	0aba                	slli	s5,s5,0xe
     79e:	0000                	unimp
    array_equ(qi_1,res1,size);
     7a0:	0acc                	addi	a1,sp,340
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
    array_mod(qi_1,mod,size);
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	cc9f 000a e600      	0xe600000acc9f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7b0:	000a                	c.slli	zero,0x2
     7b2:	0100                	addi	s0,sp,128
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0ae6                	slli	s5,s5,0x19
     7b8:	0000                	unimp
     7ba:	0b66                	slli	s6,s6,0x19
     7bc:	0000                	unimp
    array_equ(temp,res2,size);
     7be:	0001                	nop
     7c0:	665f 000b 6800      	0x6800000b665f
    array_mod(temp,mod,size);
     7c6:	0300000b          	0x300000b
     7ca:	7f00                	flw	fs0,56(a4)
        for (i = 0; i < N + 1; ++i) {
     7cc:	9f7f                	0x9f7f
     7ce:	0b68                	addi	a0,sp,412
     7d0:	0000                	unimp
     7d2:	0b8a                	slli	s7,s7,0x2
    array_mod(ti,mod,size);
     7d4:	0000                	unimp
     7d6:	0001                	nop
     7d8:	8a5f 000b 9a00      	0x9a00000b8a5f
array_equ(ri_2,ri_1,size);
     7de:	0100000b          	0x100000b
     7e2:	5900                	lw	s0,48(a0)
array_equ(ri_1,ri,size);
     7e4:	0b9a                	slli	s7,s7,0x6
     7e6:	0000                	unimp
     7e8:	0b9c                	addi	a5,sp,464
     7ea:	0000                	unimp
array_equ(ti_2,ti_1,size);
     7ec:	7f790003          	lb	zero,2039(s2)
     7f0:	9c9f 000b 9e00      	0x9e00000b9c9f
array_equ(ti_1,ti,size);
     7f6:	0100000b          	0x100000b
     7fa:	5900                	lw	s0,48(a0)
        controlR = 0;
     7fc:	0b9e                	slli	s7,s7,0x7
        for (i = 0; i < N + 1; ++i) {
     7fe:	0000                	unimp
     800:	0ba2                	slli	s7,s7,0x8
     802:	0000                	unimp
    while (controlR != 0) {
     804:	0001                	nop
     806:	a25e                	fsd	fs7,256(sp)
        for (j = 0; j < mod; ++j) {
     808:	ac00000b          	0xac00000b
     80c:	0300000b          	0x300000b
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
     814:	0bac                	addi	a1,sp,472
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	0bae                	slli	s7,s7,0xb
     81a:	0000                	unimp
    }
     81c:	0001                	nop
     81e:	ae5e                	fsd	fs7,280(sp)
     820:	be00000b          	0xbe00000b
     824:	0100000b          	0x100000b
     828:	6800                	flw	fs0,16(s0)
     82a:	0bbe                	slli	s7,s7,0xf
     82c:	0000                	unimp
     82e:	0bce                	slli	s7,s7,0x13
     830:	0000                	unimp
     832:	0001                	nop
     834:	ce5f 000b d000      	0xd000000bce5f
     83a:	0300000b          	0x300000b
     83e:	7f00                	flw	fs0,56(a4)
     840:	9f7f                	0x9f7f
     842:	0bd0                	addi	a2,sp,468
     844:	0000                	unimp
        ti_2[i] = 0;
     846:	0bd2                	slli	s7,s7,0x14
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
     852:	0000                	unimp
        ti_1[i] = 0;
     854:	ea00                	fsw	fs0,16(a2)
     856:	000a                	c.slli	zero,0x2
    for (i = 0; i < size; ++i) {
     858:	2a00                	fld	fs0,16(a2)
     85a:	0600000b          	0x600000b
            ri[i - (N + 1)] = res[i];
     85e:	0300                	addi	s0,sp,384
     860:	1a8c                	addi	a1,sp,368
     862:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	009f 0000 0000      	0x9f
            ri[i - (N + 1)] = res[i];
     86a:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	2200                	fld	fs0,0(a2)
            temp[i] = ri_2[i] - ri[i];
     86e:	000a                	c.slli	zero,0x2
     870:	e600                	fsw	fs0,8(a2)
     872:	000a                	c.slli	zero,0x2
     874:	0100                	addi	s0,sp,128
     876:	6200                	flw	fs0,0(a2)
     878:	0ae6                	slli	s5,s5,0x19
     87a:	0000                	unimp
     87c:	0b0a                	slli	s6,s6,0x2
        for (i = 0; i < N + 1; ++i) {
     87e:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     880:	7f850003          	lb	zero,2040(a0)
        for (i = 0; i < N + 1; ++i) {
     884:	0a9f 000b 2a00      	0x2a00000b0a9f
            ti[i] = ti_2[i] - temp[i];
     88a:	0400000b          	0x400000b
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
     892:	2a9f 000b be00      	0xbe00000b2a9f
        for (i = 0; i < N + 1; ++i) {
     898:	0100000b          	0x100000b
            ti[i] = ti_2[i] - temp[i];
     89c:	6200                	flw	fs0,0(a2)
        for (i = 0; i < N + 1; ++i) {
     89e:	0bbe                	slli	s7,s7,0xf
     8a0:	0000                	unimp
              qi_1[i] = 0;
     8a2:	0bd2                	slli	s7,s7,0x14
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
            controlR += ri[i];
     8aa:	009f 0000 0000      	0x9f
              qi_1[i] = 0;
     8b0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b2:	cc00                	sw	s0,24(s0)
            controlR += ri[i];
     8b4:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     8b6:	3a00                	fld	fs0,48(a2)
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	01000007          	0x1000007
     8bc:	5a00                	lw	s0,48(a2)
     8be:	073a                	slli	a4,a4,0xe
     8c0:	0000                	unimp
     8c2:	0000073b          	0x73b
     8c6:	0001                	nop
        for (j = 0; j < mod; ++j) {
     8c8:	00073b5b          	0x73b5b
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	4600                	lw	s0,8(a2)
        for (i = 0; i < N + 1; ++i) {
     8ce:	0008                	0x8
     8d0:	0400                	addi	s0,sp,512
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	f300                	fsw	fs0,32(a4)
     8d4:	5a01                	li	s4,-32
     8d6:	469f 0008 5c00      	0x5c000008469f
     8dc:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     8de:	0100                	addi	s0,sp,128
int* generate_keys(int N, int p, int q){
     8e0:	5a00                	lw	s0,48(a2)
     8e2:	085c                	addi	a5,sp,20
     8e4:	0000                	unimp
     8e6:	08e0                	addi	s0,sp,92
     8e8:	0000                	unimp
     8ea:	0004                	0x4
     8ec:	9f5a01f3          	0x9f5a01f3
	...
     8f8:	06cc                	addi	a1,sp,836
     8fa:	0000                	unimp
     8fc:	0736                	slli	a4,a4,0xd
     8fe:	0000                	unimp
     900:	0001                	nop
     902:	0007365b          	0x7365b
     906:	5a00                	lw	s0,48(a2)
     908:	01000007          	0x1000007
     90c:	6b00                	flw	fs0,16(a4)
     90e:	075a                	slli	a4,a4,0x16
     910:	0000                	unimp
     912:	0846                	slli	a6,a6,0x11
     914:	0000                	unimp
     916:	0004                	0x4
     918:	9f5b01f3          	0x9f5b01f3
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     91c:	0846                	slli	a6,a6,0x11
     91e:	0000                	unimp
     920:	085c                	addi	a5,sp,20
     922:	0000                	unimp
     924:	0001                	nop
     926:	00085c5b          	0x85c5b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     92a:	e000                	fsw	fs0,0(s0)
     92c:	0008                	0x8
     92e:	0400                	addi	s0,sp,512
     930:	f300                	fsw	fs0,32(a4)
     932:	5b01                	li	s6,-32
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	009f 0000 0000      	0x9f
     93a:	0000                	unimp
     93c:	cc00                	sw	s0,24(s0)
     93e:	0006                	c.slli	zero,0x1
     940:	3000                	fld	fs0,32(s0)
     942:	01000007          	0x1000007
     946:	5c00                	lw	s0,56(s0)
     948:	0730                	addi	a2,sp,904
     94a:	0000                	unimp
     94c:	0826                	slli	a6,a6,0x9
     94e:	0000                	unimp
     950:	0001                	nop
     952:	2659                	jal	cd8 <ntru_deceypt+0x72>
     954:	0008                	0x8
     956:	3200                	fld	fs0,32(a2)
     958:	0008                	0x8
     95a:	0300                	addi	s0,sp,384
     95c:	8700                	0x8700
     95e:	9f01                	0x9f01
     960:	0832                	slli	a6,a6,0xc
     962:	0000                	unimp
     964:	0846                	slli	a6,a6,0x11
     966:	0000                	unimp
     968:	0004                	0x4
     96a:	9f5c01f3          	0x9f5c01f3
     96e:	0846                	slli	a6,a6,0x11
     970:	0000                	unimp
     972:	08e0                	addi	s0,sp,92
     974:	0000                	unimp
     976:	0001                	nop
     978:	0059                	c.nop	22
     97a:	0000                	unimp
     97c:	0000                	unimp
     97e:	0000                	unimp
     980:	cc00                	sw	s0,24(s0)
     982:	0006                	c.slli	zero,0x1
     984:	3000                	fld	fs0,32(s0)
     986:	01000007          	0x1000007
     98a:	5d00                	lw	s0,56(a0)
     98c:	0730                	addi	a2,sp,904
     98e:	0000                	unimp
     990:	0828                	addi	a0,sp,24
     992:	0000                	unimp
     994:	0001                	nop
     996:	2862                	fld	fa6,24(sp)
     998:	0008                	0x8
     99a:	4600                	lw	s0,8(a2)
     99c:	0008                	0x8
     99e:	0400                	addi	s0,sp,512
    int polyR[N+1];
     9a0:	f300                	fsw	fs0,32(a4)
     9a2:	5d01                	li	s10,-32
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9a4:	469f 0008 e000      	0xe0000008469f
    int polyR[N+1];
     9aa:	0008                	0x8
     9ac:	0100                	addi	s0,sp,128
     9ae:	6200                	flw	fs0,0(a2)
	...
    polyR[N] = 1;
     9b8:	081c                	addi	a5,sp,16
     9ba:	0000                	unimp
     9bc:	0846                	slli	a6,a6,0x11
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9be:	0000                	unimp
     9c0:	0006                	c.slli	zero,0x1
     9c2:	0018fc03          	0x18fc03
     9c6:	9f00                	0x9f00
	...
     9d0:	0726                	slli	a4,a4,0x9
     9d2:	0000                	unimp
     9d4:	0832                	slli	a6,a6,0xc
     9d6:	0000                	unimp
     9d8:	0001                	nop
     9da:	00083267          	0x83267
     9de:	4600                	lw	s0,8(a2)
     9e0:	0008                	0x8
     9e2:	0600                	addi	s0,sp,768
     9e4:	f300                	fsw	fs0,32(a4)
     9e6:	5c01                	li	s8,-32
     9e8:	1c31                	addi	s8,s8,-20
     9ea:	469f 0008 e000      	0xe0000008469f
     9f0:	0008                	0x8
     9f2:	0100                	addi	s0,sp,128
     9f4:	6700                	flw	fs0,8(a4)
	...
     9fe:	0726                	slli	a4,a4,0x9
     a00:	0000                	unimp
     a02:	0730                	addi	a2,sp,904
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
     a08:	9f30                	0x9f30
     a0a:	0730                	addi	a2,sp,904
     a0c:	0000                	unimp
     a0e:	0000073b          	0x73b
     a12:	0001                	nop
     a14:	765f 0007 7a00      	0x7a000007765f
     a1a:	01000007          	0x1000007
     a1e:	5900                	lw	s0,48(a0)
     a20:	077a                	slli	a4,a4,0x1e
    polyR[0] = -1;
     a22:	0000                	unimp
     a24:	0784                	addi	s1,sp,960
    for(i = 1; i < N; ++i){
     a26:	0000                	unimp
     a28:	0001                	nop
     a2a:	865f 0007 9100      	0x91000007865f
    for (i = N; i < 55; ++i ){
     a30:	01000007          	0x1000007
     a34:	5e00                	lw	s0,56(a2)
    for(i = 0; i < N; ++i){
     a36:	07cc                	addi	a1,sp,964
        random_keys[i] = f[i];
     a38:	0000                	unimp
     a3a:	07d0                	addi	a2,sp,964
     a3c:	0000                	unimp
     a3e:	0002                	c.slli64	zero
    for(i = 0; i < N; ++i){
     a40:	9f30                	0x9f30
     a42:	07d0                	addi	a2,sp,964
     a44:	0000                	unimp
     a46:	000007db          	0x7db
    for(i = N; i < (2*N); ++i){
     a4a:	0001                	nop
     a4c:	fc5e                	fsw	fs7,56(sp)
     a4e:	00000007          	0x7
        random_keys[i] = g[i-N];
     a52:	0008                	0x8
     a54:	0200                	addi	s0,sp,256
     a56:	3000                	fld	fs0,32(s0)
    for(i = N; i < (2*N); ++i){
     a58:	009f 0008 0a00      	0xa000008009f
    for(i = (2*N); i < (3*N); ++i){
     a5e:	0008                	0x8
     a60:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     a62:	5e00                	lw	s0,56(a2)
     a64:	0818                	addi	a4,sp,16
     a66:	0000                	unimp
     a68:	0866                	slli	a6,a6,0x19
     a6a:	0000                	unimp
     a6c:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     a6e:	665f 0008 6c00      	0x6c000008665f
        random_keys[i] = fp[i-(2*N)];
     a74:	0008                	0x8
     a76:	0300                	addi	s0,sp,384
    for(i = (2*N); i < (3*N); ++i){
     a78:	7f00                	flw	fs0,56(a4)
     a7a:	9f7f                	0x9f7f
    fq = ext_euclid(polyR, f, (N+1), q);
     a7c:	086c                	addi	a1,sp,28
     a7e:	0000                	unimp
     a80:	086e                	slli	a6,a6,0x1b
     a82:	0000                	unimp
     a84:	0001                	nop
     a86:	6e5f 0008 8000      	0x800000086e5f
    for(i = (3*N); i < (4*N); ++i){
     a8c:	0008                	0x8
     a8e:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     a90:	5e00                	lw	s0,56(a2)
     a92:	0880                	addi	s0,sp,80
     a94:	0000                	unimp
     a96:	0884                	addi	s1,sp,80
    for(i = (3*N); i < (4*N); ++i){
     a98:	0000                	unimp
     a9a:	7f7e0003          	lb	zero,2039(t3) # 527f7 <_stack_start+0x427f7>
    fg = polymult2(fq, N, g, N, 0);
     a9e:	849f 0008 9a00      	0x9a000008849f
     aa4:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     aa6:	0100                	addi	s0,sp,128
     aa8:	5e00                	lw	s0,56(a2)
     aaa:	089a                	slli	a7,a7,0x6
     aac:	0000                	unimp
     aae:	089e                	slli	a7,a7,0x7
     ab0:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ab2:	7f7e0003          	lb	zero,2039(t3)
     ab6:	9e9f 0008 b400      	0xb40000089e9f
    for(i = (4*N); i < (5*N); ++i){
     abc:	0008                	0x8
     abe:	0100                	addi	s0,sp,128
     ac0:	5e00                	lw	s0,56(a2)
     ac2:	08b4                	addi	a3,sp,88
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ac4:	0000                	unimp
     ac6:	08b6                	slli	a7,a7,0xd
     ac8:	0000                	unimp
     aca:	7f7e0003          	lb	zero,2039(t3)
    for(i = (4*N); i < (5*N); ++i){
     ace:	b69f 0008 b800      	0xb8000008b69f
    for(i = (5*N); i < (6*N+1); ++i){
     ad4:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     ad6:	0100                	addi	s0,sp,128
     ad8:	5e00                	lw	s0,56(a2)
     ada:	08cc                	addi	a1,sp,84
     adc:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     ade:	08d0                	addi	a2,sp,84
     ae0:	0000                	unimp
     ae2:	0001                	nop
     ae4:	d05f 0008 de00      	0xde000008d05f
}
     aea:	0008                	0x8
     aec:	0300                	addi	s0,sp,384
     aee:	7f00                	flw	fs0,56(a4)
     af0:	9f7f                	0x9f7f
     af2:	08de                	slli	a7,a7,0x17
     af4:	0000                	unimp
     af6:	08e0                	addi	s0,sp,92
     af8:	0000                	unimp
     afa:	0001                	nop
     afc:	005f 0000 0000      	0x5f
     b02:	0000                	unimp
     b04:	0c00                	addi	s0,sp,528
     b06:	0008                	0x8
     b08:	4600                	lw	s0,8(a2)
     b0a:	0008                	0x8
     b0c:	0100                	addi	s0,sp,128
     b0e:	5e00                	lw	s0,56(a2)
     b10:	08b8                	addi	a4,sp,88
     b12:	0000                	unimp
     b14:	08e0                	addi	s0,sp,92
     b16:	0000                	unimp
     b18:	0001                	nop
     b1a:	005e                	c.slli	zero,0x17
     b1c:	0000                	unimp
     b1e:	0000                	unimp
     b20:	0000                	unimp
     b22:	2400                	fld	fs0,8(s0)
     b24:	2a000007          	0x2a000007
     b28:	0008                	0x8
        polyR[i] = 0;
     b2a:	0200                	addi	s0,sp,256
     b2c:	8300                	0x8300
     b2e:	4600                	lw	s0,8(a2)
     b30:	0008                	0x8
     b32:	e000                	fsw	fs0,0(s0)
    for(i = 1; i < N; ++i){
     b34:	0008                	0x8
     b36:	0200                	addi	s0,sp,256
        f[i] = 0;
     b38:	8300                	0x8300
	...
     b42:	2400                	fld	fs0,8(s0)
     b44:	2c000007          	0x2c000007
        g[i] = 0;
     b48:	0008                	0x8
     b4a:	0200                	addi	s0,sp,256
     b4c:	8400                	0x8400
     b4e:	4600                	lw	s0,8(a2)
    for (i = N; i < 55; ++i ){
     b50:	0008                	0x8
     b52:	e000                	fsw	fs0,0(s0)
        random_keys[i] = f[i];
     b54:	0008                	0x8
     b56:	0200                	addi	s0,sp,256
     b58:	8400                	0x8400
	...
     b62:	2400                	fld	fs0,8(s0)
    for(i = 0; i < N; ++i){
     b64:	34000007          	0x34000007
     b68:	0008                	0x8
        random_keys[i] = g[i-N];
     b6a:	0200                	addi	s0,sp,256
     b6c:	8800                	0x8800
     b6e:	4600                	lw	s0,8(a2)
     b70:	0008                	0x8
     b72:	e000                	fsw	fs0,0(s0)
    for(i = N; i < (2*N); ++i){
     b74:	0008                	0x8
     b76:	0200                	addi	s0,sp,256
     b78:	8800                	0x8800
	...
        random_keys[i] = fp[i-(2*N)];
     b82:	2400                	fld	fs0,8(s0)
    for(i = (2*N); i < (3*N); ++i){
     b84:	30000007          	0x30000007
     b88:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     b8a:	0200                	addi	s0,sp,256
     b8c:	8600                	0x8600
     b8e:	3000                	fld	fs0,32(s0)
     b90:	0008                	0x8
     b92:	3200                	fld	fs0,32(a2)
     b94:	0008                	0x8
     b96:	0c00                	addi	s0,sp,528
    for(i = (3*N); i < (4*N); ++i){
     b98:	8800                	0x8800
        random_keys[i] = fq[i-(3*N)];
     b9a:	8700                	0x8700
    for(i = (3*N); i < (4*N); ++i){
     b9c:	3201                	jal	49c <polymult2+0x110>
        fg[i] = fg[i]*p;
     b9e:	2324                	fld	fs1,64(a4)
    for(i = 0; i < (2*N-1); ++i){
     ba0:	1af0090f          	0x1af0090f
        fg[i] = fg[i]*p;
     ba4:	321c                	fld	fa5,32(a2)
     ba6:	0008                	0x8
     ba8:	3400                	fld	fs0,40(s0)
     baa:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     bac:	0d00                	addi	s0,sp,656
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bae:	8800                	0x8800
     bb0:	f300                	fsw	fs0,32(a4)
     bb2:	5c01                	li	s8,-32
     bb4:	2432                	fld	fs0,264(sp)
     bb6:	f0090f23          	sb	zero,-226(s2)
    for(i = (4*N); i < (5*N); ++i){
     bba:	1c1a                	slli	s8,s8,0x26
     bbc:	0846                	slli	a6,a6,0x11
        random_keys[i] = polyR[i-(5*N)];
     bbe:	0000                	unimp
     bc0:	08e0                	addi	s0,sp,92
     bc2:	0000                	unimp
     bc4:	0002                	c.slli64	zero
     bc6:	0086                	slli	ra,ra,0x1
	...
    for(i = (5*N); i < (6*N+1); ++i){
     bd0:	0724                	addi	s1,sp,904
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	0000                	unimp
     bd4:	0838                	addi	a4,sp,24
     bd6:	0000                	unimp
     bd8:	0002                	c.slli64	zero
     bda:	008a                	slli	ra,ra,0x2
     bdc:	0846                	slli	a6,a6,0x11
     bde:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be0:	08e0                	addi	s0,sp,92
     be2:	0000                	unimp
     be4:	0002                	c.slli64	zero
     be6:	008a                	slli	ra,ra,0x2
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bf0:	0724                	addi	s1,sp,904
     bf2:	0000                	unimp
     bf4:	0836                	slli	a6,a6,0xd
     bf6:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf8:	0002                	c.slli64	zero
    temp = polymult(public_key,N,random_val,48,q,0);
     bfa:	0089                	addi	ra,ra,2
     bfc:	0836                	slli	a6,a6,0xd
     bfe:	0000                	unimp
     c00:	0838                	addi	a4,sp,24
     c02:	0000                	unimp
     c04:	000d                	c.nop	3
     c06:	008a                	slli	ra,ra,0x2
     c08:	325c01f3          	0x325c01f3
     c0c:	2324                	fld	fs1,64(a4)
    for(i = 0; i < 48; ++i){
     c0e:	1af0090f          	0x1af0090f
        temp[i] = temp[i] + message[i];
     c12:	461c                	lw	a5,8(a2)
     c14:	0008                	0x8
     c16:	e000                	fsw	fs0,0(s0)
     c18:	0008                	0x8
     c1a:	0200                	addi	s0,sp,256
     c1c:	8900                	0x8900
	...
    for(i = 0; i < 48; ++i){
     c26:	2600                	fld	fs0,8(a2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c28:	20000007          	0x20000007
     c2c:	0008                	0x8
     c2e:	0200                	addi	s0,sp,256
     c30:	7200                	flw	fs0,32(a2)
     c32:	2000                	fld	fs0,0(s0)
     c34:	0008                	0x8
     c36:	2e00                	fld	fs0,24(a2)
    for(i = (2*N); i < (3*N); ++i){
     c38:	0008                	0x8
     c3a:	0200                	addi	s0,sp,256
     c3c:	8500                	0x8500
     c3e:	2e00                	fld	fs0,24(a2)
     c40:	0008                	0x8
     c42:	3200                	fld	fs0,32(a2)
}
     c44:	0008                	0x8
     c46:	0c00                	addi	s0,sp,528
     c48:	8900                	0x8900
     c4a:	8700                	0x8700
     c4c:	3201                	jal	54c <polydiv+0x50>
     c4e:	2324                	fld	fs1,64(a4)
     c50:	1af0090f          	0x1af0090f
        CT[i-(2*N)] = CT[i];
     c54:	321c                	fld	fa5,32(a2)
     c56:	0008                	0x8
     c58:	3600                	fld	fs0,40(a2)
     c5a:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     c5c:	0d00                	addi	s0,sp,656
     c5e:	8900                	0x8900
        CT[i-(2*N)] = CT[i];
     c60:	f300                	fsw	fs0,32(a4)
     c62:	5c01                	li	s8,-32
    for(i = (2*N); i < (3*N); ++i){
     c64:	2432                	fld	fs0,264(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	f0090f23          	sb	zero,-226(s2)
     c6a:	1c1a                	slli	s8,s8,0x26
     c6c:	0836                	slli	a6,a6,0xd
    for(i = (2*N); i < ((2*N)+N); ++i){
     c6e:	0000                	unimp
     c70:	0838                	addi	a4,sp,24
     c72:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c74:	008a000f          	0x8a000f
     c78:	325c01f3          	0x325c01f3
     c7c:	2324                	fld	fs1,64(a4)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7e:	1af0090f          	0x1af0090f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c82:	2431                	jal	e8e <memset+0x10>
     c84:	461c                	lw	a5,8(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c86:	0008                	0x8
     c88:	e000                	fsw	fs0,0(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8a:	0008                	0x8
     c8c:	0200                	addi	s0,sp,256
     c8e:	7200                	flw	fs0,32(a2)
	...
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	7600                	flw	fs0,40(a2)
     c9a:	90000007          	0x90000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c9e:	01000007          	0x1000007
     ca2:	5a00                	lw	s0,48(a2)
     ca4:	085c                	addi	a5,sp,20
     ca6:	0000                	unimp
     ca8:	0888                	addi	a0,sp,80
     caa:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	0001                	nop
     cae:	005a                	c.slli	zero,0x16
     cb0:	0000                	unimp
     cb2:	0000                	unimp
     cb4:	0000                	unimp
        if(a2[i] <= q/2)
     cb6:	a000                	fsd	fs0,0(s0)
     cb8:	a4000007          	0xa4000007
    for (i = 0; i < N; ++i){
     cbc:	01000007          	0x1000007
     cc0:	5a00                	lw	s0,48(a2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc2:	07a4                	addi	s1,sp,968
     cc4:	0000                	unimp
     cc6:	07a5                	addi	a5,a5,9
     cc8:	0000                	unimp
     cca:	0001                	nop
     ccc:	0000005b          	0x5b
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cd0:	0000                	unimp
     cd2:	0000                	unimp
     cd4:	be00                	fsd	fs0,56(a2)
     cd6:	c2000007          	0xc2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     cda:	01000007          	0x1000007
}
     cde:	5a00                	lw	s0,48(a2)
     ce0:	07c2                	slli	a5,a5,0x10
     ce2:	0000                	unimp
     ce4:	000007c3          	fmadd.s	fa5,ft0,ft0,ft0,rne
     ce8:	0001                	nop
     cea:	0000005b          	0x5b
     cee:	0000                	unimp
     cf0:	0000                	unimp
     cf2:	2600                	fld	fs0,8(a2)
        a2[i-(2*N)] = a2[i];
     cf4:	5a000007          	0x5a000007
     cf8:	02000007          	0x2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfc:	3100                	fld	fs0,32(a0)
     cfe:	5a9f 0007 0000      	0x75a9f
     d04:	0008                	0x8
        if(a2[i] <= q/2)
     d06:	0200                	addi	s0,sp,256
     d08:	3000                	fld	fs0,32(s0)
     d0a:	009f 0008 1800      	0x18000008009f
            a2[i] = (-1)*(q-a2[i]);
     d10:	0008                	0x8
    for (i = 0; i < N; ++i){
     d12:	0100                	addi	s0,sp,128
     d14:	5f00                	lw	s0,56(a4)
     d16:	0846                	slli	a6,a6,0x11
        c2[i-(2*N)] = c2[i];
     d18:	0000                	unimp
     d1a:	085c                	addi	a5,sp,20
     d1c:	0000                	unimp
     d1e:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	9f31                	0x9f31
     d22:	085c                	addi	a5,sp,20
        c2[i-(2*N)] = c2[i];
     d24:	0000                	unimp
     d26:	08a2                	slli	a7,a7,0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d28:	0000                	unimp
  jal x0, default_exc_handler
     d2a:	0002                	c.slli64	zero
     d2c:	9f30                	0x9f30
  mv  x1, x0
     d2e:	08a2                	slli	a7,a7,0x8
     d30:	0000                	unimp
  mv  x2, x1
     d32:	08cc                	addi	a1,sp,84
  mv  x3, x1
     d34:	0000                	unimp
  mv  x4, x1
     d36:	0001                	nop
  mv  x5, x1
     d38:	005f 0000 0000      	0x5f
  mv  x8, x1
     d3e:	0000                	unimp
  mv  x9, x1
     d40:	2400                	fld	fs0,8(s0)
  mv x10, x1
     d42:	32000007          	0x32000007
  mv x12, x1
     d46:	0008                	0x8
  mv x13, x1
     d48:	0100                	addi	s0,sp,128
  mv x14, x1
     d4a:	6700                	flw	fs0,8(a4)
  mv x15, x1
     d4c:	0832                	slli	a6,a6,0xc
  mv x16, x1
     d4e:	0000                	unimp
  mv x17, x1
     d50:	0846                	slli	a6,a6,0x11
  mv x18, x1
     d52:	0000                	unimp
  mv x19, x1
     d54:	0006                	c.slli	zero,0x1
  mv x20, x1
     d56:	315c01f3          	0x315c01f3
  mv x22, x1
     d5a:	9f1c                	0x9f1c
  mv x23, x1
     d5c:	0846                	slli	a6,a6,0x11
  mv x24, x1
     d5e:	0000                	unimp
  mv x25, x1
     d60:	08e0                	addi	s0,sp,92
  mv x26, x1
     d62:	0000                	unimp
  mv x27, x1
     d64:	0001                	nop
  mv x28, x1
     d66:	00000067          	jr	zero # 0 <__DYNAMIC>
  mv x30, x1
     d6a:	0000                	unimp
  mv x31, x1
     d6c:	0000                	unimp
  la   x2, _stack_start
     d6e:	2400                	fld	fs0,8(s0)
     d70:	32000007          	0x32000007
     d74:	0008                	0x8
  la x26, _bss_start
     d76:	0100                	addi	s0,sp,128
     d78:	6700                	flw	fs0,8(a4)
     d7a:	0832                	slli	a6,a6,0xc
     d7c:	0000                	unimp
  la x27, _bss_end
     d7e:	0846                	slli	a6,a6,0x11
     d80:	0000                	unimp
     d82:	0006                	c.slli	zero,0x1
     d84:	315c01f3          	0x315c01f3
  bge x26, x27, zero_loop_end
     d88:	9f1c                	0x9f1c
  sw x0, 0(x26)
     d8a:	0846                	slli	a6,a6,0x11
     d8c:	0000                	unimp
  addi x26, x26, 4
     d8e:	08e0                	addi	s0,sp,92
  ble x26, x27, zero_loop
     d90:	0000                	unimp
     d92:	0001                	nop
  addi x10, x0, 0
     d94:	00000067          	jr	zero # 0 <__DYNAMIC>
  addi x11, x0, 0
     d98:	0000                	unimp
     d9a:	0000                	unimp
  jal x1, main
     d9c:	2400                	fld	fs0,8(s0)
     d9e:	32000007          	0x32000007
     da2:	0008                	0x8
     da4:	0100                	addi	s0,sp,128
     da6:	6700                	flw	fs0,8(a4)
     da8:	0832                	slli	a6,a6,0xc
     daa:	0000                	unimp
     dac:	0846                	slli	a6,a6,0x11
     dae:	0000                	unimp
     db0:	0006                	c.slli	zero,0x1
     db2:	315c01f3          	0x315c01f3
     db6:	9f1c                	0x9f1c
     db8:	0846                	slli	a6,a6,0x11
     dba:	0000                	unimp
     dbc:	08e0                	addi	s0,sp,92
     dbe:	0000                	unimp
     dc0:	0001                	nop
     dc2:	00000067          	jr	zero # 0 <__DYNAMIC>
     dc6:	0000                	unimp
     dc8:	0000                	unimp
     dca:	2400                	fld	fs0,8(s0)
     dcc:	32000007          	0x32000007
     dd0:	0008                	0x8
     dd2:	0100                	addi	s0,sp,128
     dd4:	6700                	flw	fs0,8(a4)
     dd6:	0832                	slli	a6,a6,0xc
     dd8:	0000                	unimp
     dda:	0846                	slli	a6,a6,0x11
     ddc:	0000                	unimp
     dde:	0006                	c.slli	zero,0x1
     de0:	315c01f3          	0x315c01f3
     de4:	9f1c                	0x9f1c
     de6:	0846                	slli	a6,a6,0x11
     de8:	0000                	unimp
     dea:	08e0                	addi	s0,sp,92
     dec:	0000                	unimp
     dee:	0001                	nop
     df0:	00000067          	jr	zero # 0 <__DYNAMIC>
     df4:	0000                	unimp
     df6:	0000                	unimp
     df8:	2400                	fld	fs0,8(s0)
     dfa:	32000007          	0x32000007
     dfe:	0008                	0x8
     e00:	0100                	addi	s0,sp,128
     e02:	6700                	flw	fs0,8(a4)
     e04:	0832                	slli	a6,a6,0xc
     e06:	0000                	unimp
     e08:	0846                	slli	a6,a6,0x11
     e0a:	0000                	unimp
     e0c:	0006                	c.slli	zero,0x1
     e0e:	315c01f3          	0x315c01f3
     e12:	9f1c                	0x9f1c
     e14:	0846                	slli	a6,a6,0x11
     e16:	0000                	unimp
     e18:	08e0                	addi	s0,sp,92
     e1a:	0000                	unimp
     e1c:	0001                	nop
     e1e:	00000067          	jr	zero # 0 <__DYNAMIC>
     e22:	0000                	unimp
     e24:	0000                	unimp
     e26:	2400                	fld	fs0,8(s0)
     e28:	32000007          	0x32000007
     e2c:	0008                	0x8
     e2e:	0100                	addi	s0,sp,128
     e30:	6700                	flw	fs0,8(a4)
     e32:	0832                	slli	a6,a6,0xc
     e34:	0000                	unimp
     e36:	0846                	slli	a6,a6,0x11
     e38:	0000                	unimp
     e3a:	0006                	c.slli	zero,0x1
     e3c:	315c01f3          	0x315c01f3
     e40:	9f1c                	0x9f1c
     e42:	0846                	slli	a6,a6,0x11
     e44:	0000                	unimp
     e46:	08e0                	addi	s0,sp,92
     e48:	0000                	unimp
     e4a:	0001                	nop
     e4c:	00000067          	jr	zero # 0 <__DYNAMIC>
     e50:	0000                	unimp
     e52:	0000                	unimp
     e54:	2400                	fld	fs0,8(s0)
     e56:	32000007          	0x32000007
     e5a:	0008                	0x8
     e5c:	0100                	addi	s0,sp,128
     e5e:	6700                	flw	fs0,8(a4)
     e60:	0832                	slli	a6,a6,0xc
     e62:	0000                	unimp
     e64:	0846                	slli	a6,a6,0x11
     e66:	0000                	unimp
     e68:	0006                	c.slli	zero,0x1
     e6a:	315c01f3          	0x315c01f3
     e6e:	9f1c                	0x9f1c
     e70:	0846                	slli	a6,a6,0x11
     e72:	0000                	unimp
     e74:	08e0                	addi	s0,sp,92
     e76:	0000                	unimp
     e78:	0001                	nop
     e7a:	00000067          	jr	zero # 0 <__DYNAMIC>
     e7e:	0000                	unimp
     e80:	0000                	unimp
     e82:	fc00                	fsw	fs0,56(s0)
     e84:	0004                	0x4
     e86:	4e00                	lw	s0,24(a2)
     e88:	0005                	c.nop	1
     e8a:	0100                	addi	s0,sp,128
     e8c:	5a00                	lw	s0,48(a2)
     e8e:	054e                	slli	a0,a0,0x13
     e90:	0000                	unimp
     e92:	00000557          	0x557
     e96:	0001                	nop
     e98:	0005575b          	0x5575b
     e9c:	cc00                	sw	s0,24(s0)
     e9e:	0006                	c.slli	zero,0x1
     ea0:	0400                	addi	s0,sp,512
     ea2:	f300                	fsw	fs0,32(a4)
     ea4:	5a01                	li	s4,-32
     ea6:	009f 0000 0000      	0x9f
     eac:	0000                	unimp
     eae:	fc00                	fsw	fs0,56(s0)
     eb0:	0004                	0x4
     eb2:	4c00                	lw	s0,24(s0)
     eb4:	0005                	c.nop	1
     eb6:	0100                	addi	s0,sp,128
     eb8:	5b00                	lw	s0,48(a4)
     eba:	054c                	addi	a1,sp,644
     ebc:	0000                	unimp
     ebe:	05ea                	slli	a1,a1,0x1a
     ec0:	0000                	unimp
     ec2:	0001                	nop
     ec4:	ea59                	bnez	a2,f5a <main+0x34>
     ec6:	0005                	c.nop	1
     ec8:	0a00                	addi	s0,sp,272
     eca:	0006                	c.slli	zero,0x1
     ecc:	0300                	addi	s0,sp,384
     ece:	8a00                	0x8a00
     ed0:	9f01                	0x9f01
     ed2:	060a                	slli	a2,a2,0x2
     ed4:	0000                	unimp
     ed6:	0618                	addi	a4,sp,768
     ed8:	0000                	unimp
     eda:	0004                	0x4
     edc:	9f5b01f3          	0x9f5b01f3
     ee0:	0618                	addi	a4,sp,768
     ee2:	0000                	unimp
     ee4:	06ba                	slli	a3,a3,0xe
     ee6:	0000                	unimp
     ee8:	0001                	nop
     eea:	ba59                	j	880 <ext_euclid+0x1b4>
     eec:	0006                	c.slli	zero,0x1
     eee:	cc00                	sw	s0,24(s0)
     ef0:	0006                	c.slli	zero,0x1
     ef2:	0300                	addi	s0,sp,384
     ef4:	8a00                	0x8a00
     ef6:	9f01                	0x9f01
	...
     f00:	04fc                	addi	a5,sp,588
     f02:	0000                	unimp
     f04:	054a                	slli	a0,a0,0x12
     f06:	0000                	unimp
     f08:	0001                	nop
     f0a:	4a5c                	lw	a5,20(a2)
     f0c:	0005                	c.nop	1
     f0e:	8800                	0x8800
     f10:	0005                	c.nop	1
     f12:	0100                	addi	s0,sp,128
     f14:	6800                	flw	fs0,16(s0)
     f16:	0588                	addi	a0,sp,704
     f18:	0000                	unimp
     f1a:	0592                	slli	a1,a1,0x4
     f1c:	0000                	unimp
     f1e:	0004                	0x4
     f20:	9f5c01f3          	0x9f5c01f3
     f24:	0592                	slli	a1,a1,0x4
int main(){
     f26:	0000                	unimp
     f28:	05ae                	slli	a1,a1,0xb
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f2a:	0000                	unimp
     f2c:	0001                	nop
     f2e:	ae68                	fsd	fa0,216(a2)
     f30:	0005                	c.nop	1
     f32:	cc00                	sw	s0,24(s0)
     f34:	0006                	c.slli	zero,0x1
     f36:	0400                	addi	s0,sp,512
int main(){
     f38:	f300                	fsw	fs0,32(a4)
     f3a:	5c01                	li	s8,-32
     f3c:	009f 0000 0000      	0x9f
     f42:	0000                	unimp
     f44:	fc00                	fsw	fs0,56(s0)
     f46:	0004                	0x4
    resultkon[0] = 0xaaaaaaa0;
     f48:	5700                	lw	s0,40(a4)
     f4a:	0005                	c.nop	1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f4c:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
     f4e:	5d00                	lw	s0,56(a0)
     f50:	00000557          	0x557
     f54:	05fe                	slli	a1,a1,0x1f
     f56:	0000                	unimp
     f58:	0001                	nop
    keys = generate_keys(N, p, q);
     f5a:	fe64                	fsw	fs1,124(a2)
     f5c:	0005                	c.nop	1
     f5e:	1800                	addi	s0,sp,48
     f60:	0006                	c.slli	zero,0x1
     f62:	0400                	addi	s0,sp,512
    resultkon[0] = 0xaaaaaaa0;
     f64:	f300                	fsw	fs0,32(a4)
    resultkon[0] = 0xaaaaaaa1;
     f66:	5d01                	li	s10,-32
     f68:	189f 0006 cc00      	0xcc000006189f
     f6e:	0006                	c.slli	zero,0x1
    for(i = 0; i < N; ++i){
     f70:	0100                	addi	s0,sp,128
     f72:	6400                	flw	fs0,8(s0)
	...
        secret_key_f[i] = keys[i];
     f7c:	04fc                	addi	a5,sp,588
     f7e:	0000                	unimp
    for(i = 0; i < N; ++i){
     f80:	00000557          	0x557
     f84:	0001                	nop
    for(i = N; i < (2*N); ++i){
     f86:	575e                	lw	a4,244(sp)
     f88:	0005                	c.nop	1
     f8a:	fc00                	fsw	fs0,56(s0)
     f8c:	0005                	c.nop	1
     f8e:	0100                	addi	s0,sp,128
     f90:	6300                	flw	fs0,0(a4)
        secret_key_fp[i-(2*N)] = keys[i];
     f92:	05fc                	addi	a5,sp,716
     f94:	0000                	unimp
     f96:	0618                	addi	a4,sp,768
     f98:	0000                	unimp
     f9a:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     f9c:	9f5e01f3          	0x9f5e01f3
    for(i = (3*N); i < (4*N); ++i){
     fa0:	0618                	addi	a4,sp,768
     fa2:	0000                	unimp
     fa4:	06cc                	addi	a1,sp,836
     fa6:	0000                	unimp
     fa8:	0001                	nop
     faa:	00000063          	beqz	zero,faa <main+0x84>
        public_key[i-(4*N)] = keys[i];
     fae:	0000                	unimp
     fb0:	0000                	unimp
     fb2:	8a00                	0x8a00
     fb4:	0005                	c.nop	1
    for(i = (4*N); i < (5*N); ++i){
     fb6:	9200                	0x9200
     fb8:	0005                	c.nop	1
     fba:	0100                	addi	s0,sp,128
     fbc:	6800                	flw	fs0,16(s0)
     fbe:	05ae                	slli	a1,a1,0xb
     fc0:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
     fc2:	0606                	slli	a2,a2,0x1
     fc4:	0000                	unimp
     fc6:	0001                	nop
     fc8:	1868                	addi	a0,sp,60
     fca:	0006                	c.slli	zero,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     fcc:	cc00                	sw	s0,24(s0)
     fce:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xbbbbbbb0;
     fd0:	0100                	addi	s0,sp,128
     fd2:	6800                	flw	fs0,16(s0)
	...
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fdc:	05cc                	addi	a1,sp,708
     fde:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
     fe0:	05dd                	addi	a1,a1,23
     fe2:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fe4:	0001                	nop
     fe6:	185f 0006 2000      	0x20000006185f
    resultkon[0] = 0xbbbbbbb1;
     fec:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xccccccc0;
     fee:	0100                	addi	s0,sp,128
     ff0:	5f00                	lw	s0,56(a4)
	...
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ffa:	0572                	slli	a0,a0,0x1c
     ffc:	0000                	unimp
     ffe:	0574                	addi	a3,sp,652
    1000:	0000                	unimp
    1002:	0002                	c.slli64	zero
    1004:	9f30                	0x9f30
    1006:	0574                	addi	a3,sp,652
    1008:	0000                	unimp
    100a:	0578                	addi	a4,sp,652
    100c:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    100e:	0001                	nop
    1010:	785f 0005 9200      	0x92000005785f
    1016:	0005                	c.nop	1
    1018:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    101a:	6500                	flw	fs0,8(a0)
    101c:	0592                	slli	a1,a1,0x4
    for(i = 0; i < 32; ++i){
    101e:	0000                	unimp
    1020:	05a8                	addi	a0,sp,712
        if(!(message[i] == Dec_Message[i])){
    1022:	0000                	unimp
    1024:	0001                	nop
    1026:	a85f 0005 bc00      	0xbc000005a85f
    102c:	0005                	c.nop	1
    102e:	0100                	addi	s0,sp,128
    1030:	6500                	flw	fs0,8(a0)
            resultkon[0] = 0xBABABABA;
    1032:	05bc                	addi	a5,sp,712
    1034:	0000                	unimp
    1036:	05cc                	addi	a1,sp,708
    1038:	0000                	unimp
    103a:	0001                	nop
}
    103c:	de5f 0005 f800      	0xf8000005de5f
    1042:	0005                	c.nop	1
    1044:	0100                	addi	s0,sp,128
    1046:	5900                	lw	s0,48(a0)
    1048:	0644                	addi	s1,sp,772
    104a:	0000                	unimp
    104c:	0648                	addi	a0,sp,772
    104e:	0000                	unimp
    1050:	0002                	c.slli64	zero
    1052:	9f30                	0x9f30
            resultkon[0] = 0xDEDEDEDE;
    1054:	0648                	addi	a0,sp,772
    for(i = 0; i < 32; ++i){
    1056:	0000                	unimp
    1058:	00000653          	fadd.s	fa2,ft0,ft0,rne
    105c:	0001                	nop
    105e:	545f 0006 5800      	0x58000006545f
    1064:	0006                	c.slli	zero,0x1
    1066:	0200                	addi	s0,sp,256
    1068:	3000                	fld	fs0,32(s0)
    106a:	589f 0006 6300      	0x63000006589f
    1070:	0006                	c.slli	zero,0x1
    1072:	0100                	addi	s0,sp,128
    1074:	5f00                	lw	s0,56(a4)
    1076:	0664                	addi	s1,sp,780
    1078:	0000                	unimp
    107a:	0666                	slli	a2,a2,0x19
    107c:	0000                	unimp
    107e:	0001                	nop
    1080:	666a                	flw	fa2,152(sp)
    1082:	0006                	c.slli	zero,0x1
    1084:	8200                	0x8200
    1086:	0006                	c.slli	zero,0x1
    1088:	0100                	addi	s0,sp,128
    108a:	5f00                	lw	s0,56(a4)
    108c:	0682                	c.slli64	a3
    108e:	0000                	unimp
    1090:	068a                	slli	a3,a3,0x2
    1092:	0000                	unimp
    1094:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    1098:	8a9f 0006 9800      	0x980000068a9f
    109e:	0006                	c.slli	zero,0x1
    10a0:	0100                	addi	s0,sp,128
    10a2:	5f00                	lw	s0,56(a4)
    10a4:	0698                	addi	a4,sp,832
    10a6:	0000                	unimp
    10a8:	06a0                	addi	s0,sp,840
    10aa:	0000                	unimp
    10ac:	7f7f0003          	lb	zero,2039(t5)
    10b0:	a09f 0006 a800      	0xa8000006a09f
    10b6:	0006                	c.slli	zero,0x1
    10b8:	0100                	addi	s0,sp,128
    10ba:	5f00                	lw	s0,56(a4)
    10bc:	06a8                	addi	a0,sp,840
    10be:	0000                	unimp
    10c0:	06ba                	slli	a3,a3,0xe
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	ba5d                	j	a7c <generate_keys+0x19c>
    10c8:	0006                	c.slli	zero,0x1
    10ca:	cc00                	sw	s0,24(s0)
    10cc:	0006                	c.slli	zero,0x1
    10ce:	0100                	addi	s0,sp,128
    10d0:	5900                	lw	s0,48(a0)
	...
    10da:	05cc                	addi	a1,sp,708
    10dc:	0000                	unimp
    10de:	05dd                	addi	a1,a1,23
    10e0:	0000                	unimp
    10e2:	0001                	nop
    10e4:	185e                	slli	a6,a6,0x37
    10e6:	0006                	c.slli	zero,0x1
    10e8:	1c00                	addi	s0,sp,560
    10ea:	0006                	c.slli	zero,0x1
    10ec:	0100                	addi	s0,sp,128
    10ee:	5e00                	lw	s0,56(a2)
	...
    10f8:	05ee                	slli	a1,a1,0x1b
    10fa:	0000                	unimp
    10fc:	0618                	addi	a4,sp,768
    10fe:	0000                	unimp
    1100:	0006                	c.slli	zero,0x1
    1102:	0016a403          	lw	s0,1(a3)
    1106:	9f00                	0x9f00
	...
    1110:	0548                	addi	a0,sp,644
    1112:	0000                	unimp
    1114:	0602                	c.slli64	a2
    1116:	0000                	unimp
    1118:	0002                	c.slli64	zero
    111a:	0086                	slli	ra,ra,0x1
    111c:	0618                	addi	a4,sp,768
    111e:	0000                	unimp
    1120:	06cc                	addi	a1,sp,836
    1122:	0000                	unimp
    1124:	0002                	c.slli64	zero
    1126:	0086                	slli	ra,ra,0x1
	...
    1130:	0548                	addi	a0,sp,644
    1132:	0000                	unimp
    1134:	0604                	addi	s1,sp,768
    1136:	0000                	unimp
    1138:	0002                	c.slli64	zero
    113a:	06180087          	0x6180087
    113e:	0000                	unimp
    1140:	06cc                	addi	a1,sp,836
    1142:	0000                	unimp
    1144:	0002                	c.slli64	zero
    1146:	00000087          	0x87
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	0642                	slli	a2,a2,0x10
    1152:	0000                	unimp
    1154:	00000643          	fmadd.s	fa2,ft0,ft0,ft0,rne
    1158:	0001                	nop
    115a:	435a                	lw	t1,148(sp)
    115c:	0006                	c.slli	zero,0x1
    115e:	ba00                	fsd	fs0,48(a2)
    1160:	0006                	c.slli	zero,0x1
    1162:	0100                	addi	s0,sp,128
    1164:	6b00                	flw	fs0,16(a4)
	...
    116e:	0548                	addi	a0,sp,644
    1170:	0000                	unimp
    1172:	05ea                	slli	a1,a1,0x1a
    1174:	0000                	unimp
    1176:	0002                	c.slli64	zero
    1178:	0082                	c.slli64	ra
    117a:	05ea                	slli	a1,a1,0x1a
    117c:	0000                	unimp
    117e:	0604                	addi	s1,sp,768
    1180:	0000                	unimp
    1182:	000c                	0xc
    1184:	018a0087          	0x18a0087
    1188:	2432                	fld	fs0,264(sp)
    118a:	f0090f23          	sb	zero,-226(s2)
    118e:	1c1a                	slli	s8,s8,0x26
    1190:	0618                	addi	a4,sp,768
    1192:	0000                	unimp
    1194:	06ba                	slli	a3,a3,0xe
    1196:	0000                	unimp
    1198:	0002                	c.slli64	zero
    119a:	0082                	c.slli64	ra
    119c:	06ba                	slli	a3,a3,0xe
    119e:	0000                	unimp
    11a0:	06cc                	addi	a1,sp,836
    11a2:	0000                	unimp
    11a4:	000c                	0xc
    11a6:	018a0087          	0x18a0087
    11aa:	2432                	fld	fs0,264(sp)
    11ac:	f0090f23          	sb	zero,-226(s2)
    11b0:	1c1a                	slli	s8,s8,0x26
	...
    11ba:	0562                	slli	a0,a0,0x18
    11bc:	0000                	unimp
    11be:	0574                	addi	a3,sp,652
    11c0:	0000                	unimp
    11c2:	0002                	c.slli64	zero
    11c4:	0089                	addi	ra,ra,2
    11c6:	0574                	addi	a3,sp,652
    11c8:	0000                	unimp
    11ca:	05f2                	slli	a1,a1,0x1c
    11cc:	0000                	unimp
    11ce:	0002                	c.slli64	zero
    11d0:	0072                	c.slli	zero,0x1c
    11d2:	05f2                	slli	a1,a1,0x1c
    11d4:	0000                	unimp
    11d6:	0608                	addi	a0,sp,768
    11d8:	0000                	unimp
    11da:	0002                	c.slli64	zero
    11dc:	0089                	addi	ra,ra,2
    11de:	0618                	addi	a4,sp,768
    11e0:	0000                	unimp
    11e2:	06cc                	addi	a1,sp,836
    11e4:	0000                	unimp
    11e6:	0002                	c.slli64	zero
    11e8:	0072                	c.slli	zero,0x1c
	...
    11f2:	0548                	addi	a0,sp,644
    11f4:	0000                	unimp
    11f6:	060a                	slli	a2,a2,0x2
    11f8:	0000                	unimp
    11fa:	0001                	nop
    11fc:	0a6a                	slli	s4,s4,0x1a
    11fe:	0006                	c.slli	zero,0x1
    1200:	1800                	addi	s0,sp,48
    1202:	0006                	c.slli	zero,0x1
    1204:	0600                	addi	s0,sp,768
    1206:	f300                	fsw	fs0,32(a4)
    1208:	5b01                	li	s6,-32
    120a:	1c31                	addi	s8,s8,-20
    120c:	189f 0006 cc00      	0xcc000006189f
    1212:	0006                	c.slli	zero,0x1
    1214:	0100                	addi	s0,sp,128
    1216:	6a00                	flw	fs0,16(a2)
	...
    1220:	0548                	addi	a0,sp,644
    1222:	0000                	unimp
    1224:	060a                	slli	a2,a2,0x2
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0a6a                	slli	s4,s4,0x1a
    122c:	0006                	c.slli	zero,0x1
    122e:	1800                	addi	s0,sp,48
    1230:	0006                	c.slli	zero,0x1
    1232:	0600                	addi	s0,sp,768
    1234:	f300                	fsw	fs0,32(a4)
    1236:	5b01                	li	s6,-32
    1238:	1c31                	addi	s8,s8,-20
    123a:	189f 0006 cc00      	0xcc000006189f
    1240:	0006                	c.slli	zero,0x1
    1242:	0100                	addi	s0,sp,128
    1244:	6a00                	flw	fs0,16(a2)
	...
    124e:	0548                	addi	a0,sp,644
    1250:	0000                	unimp
    1252:	060a                	slli	a2,a2,0x2
    1254:	0000                	unimp
    1256:	0001                	nop
    1258:	0a6a                	slli	s4,s4,0x1a
    125a:	0006                	c.slli	zero,0x1
    125c:	1800                	addi	s0,sp,48
    125e:	0006                	c.slli	zero,0x1
    1260:	0600                	addi	s0,sp,768
    1262:	f300                	fsw	fs0,32(a4)
    1264:	5b01                	li	s6,-32
    1266:	1c31                	addi	s8,s8,-20
    1268:	189f 0006 cc00      	0xcc000006189f
    126e:	0006                	c.slli	zero,0x1
    1270:	0100                	addi	s0,sp,128
    1272:	6a00                	flw	fs0,16(a2)
	...
    127c:	0556                	slli	a0,a0,0x15
    127e:	0000                	unimp
    1280:	0578                	addi	a4,sp,652
    1282:	0000                	unimp
    1284:	0001                	nop
    1286:	7865                	lui	a6,0xffff9
    1288:	0005                	c.nop	1
    128a:	9200                	0x9200
    128c:	0005                	c.nop	1
    128e:	0300                	addi	s0,sp,384
    1290:	8400                	0x8400
    1292:	9f7f                	0x9f7f
    1294:	0592                	slli	a1,a1,0x4
    1296:	0000                	unimp
    1298:	05a8                	addi	a0,sp,712
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	a865                	j	1356 <_bss_start+0x162>
    12a0:	0005                	c.nop	1
    12a2:	fe00                	fsw	fs0,56(a2)
    12a4:	0005                	c.nop	1
    12a6:	0300                	addi	s0,sp,384
    12a8:	8400                	0x8400
    12aa:	9f7f                	0x9f7f
    12ac:	05fe                	slli	a1,a1,0x1f
    12ae:	0000                	unimp
    12b0:	0618                	addi	a4,sp,768
    12b2:	0000                	unimp
    12b4:	0006                	c.slli	zero,0x1
    12b6:	315d01f3          	0x315d01f3
    12ba:	9f1c                	0x9f1c
    12bc:	0618                	addi	a4,sp,768
    12be:	0000                	unimp
    12c0:	06cc                	addi	a1,sp,836
    12c2:	0000                	unimp
    12c4:	7f840003          	lb	zero,2040(s0)
    12c8:	009f 0000 0000      	0x9f
    12ce:	0000                	unimp
    12d0:	8c00                	0x8c00
    12d2:	08000003          	lb	zero,128(zero) # 80 <__DYNAMIC+0x80>
    12d6:	0004                	0x4
    12d8:	0100                	addi	s0,sp,128
    12da:	5a00                	lw	s0,48(a2)
    12dc:	0408                	addi	a0,sp,512
    12de:	0000                	unimp
    12e0:	040d                	addi	s0,s0,3
    12e2:	0000                	unimp
    12e4:	0001                	nop
    12e6:	00040d5b          	0x40d5b
    12ea:	3400                	fld	fs0,40(s0)
    12ec:	0004                	0x4
    12ee:	0400                	addi	s0,sp,512
    12f0:	f300                	fsw	fs0,32(a4)
    12f2:	5a01                	li	s4,-32
    12f4:	349f 0004 5600      	0x56000004349f
    12fa:	0004                	0x4
    12fc:	0100                	addi	s0,sp,128
    12fe:	5a00                	lw	s0,48(a2)
    1300:	0456                	slli	s0,s0,0x15
    1302:	0000                	unimp
    1304:	04fc                	addi	a5,sp,588
    1306:	0000                	unimp
    1308:	0004                	0x4
    130a:	9f5a01f3          	0x9f5a01f3
	...
    1316:	038c                	addi	a1,sp,448
    1318:	0000                	unimp
    131a:	0406                	slli	s0,s0,0x1
    131c:	0000                	unimp
    131e:	0001                	nop
    1320:	0004065b          	0x4065b
    1324:	0d00                	addi	s0,sp,656
    1326:	0004                	0x4
    1328:	0100                	addi	s0,sp,128
    132a:	5c00                	lw	s0,56(s0)
    132c:	040d                	addi	s0,s0,3
    132e:	0000                	unimp
    1330:	0434                	addi	a3,sp,520
    1332:	0000                	unimp
    1334:	01880003          	lb	zero,24(a6) # ffff9018 <_stack_start+0xfffe9018>
    1338:	349f 0004 5600      	0x56000004349f
    133e:	0004                	0x4
    1340:	0100                	addi	s0,sp,128
    1342:	5b00                	lw	s0,48(a4)
    1344:	0456                	slli	s0,s0,0x15
    1346:	0000                	unimp
    1348:	04ea                	slli	s1,s1,0x1a
    134a:	0000                	unimp
    134c:	01880003          	lb	zero,24(a6)
    1350:	ea9f 0004 fc00      	0xfc000004ea9f
    1356:	0004                	0x4
    1358:	0400                	addi	s0,sp,512
    135a:	f300                	fsw	fs0,32(a4)
    135c:	5b01                	li	s6,-32
    135e:	009f 0000 0000      	0x9f
    1364:	0000                	unimp
    1366:	8c00                	0x8c00
    1368:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    136c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1370:	5c00                	lw	s0,56(s0)
    1372:	03fe                	slli	t2,t2,0x1f
    1374:	0000                	unimp
    1376:	040d                	addi	s0,s0,3
    1378:	0000                	unimp
    137a:	0001                	nop
    137c:	0d60                	addi	s0,sp,668
    137e:	0004                	0x4
    1380:	3400                	fld	fs0,40(s0)
    1382:	0004                	0x4
    1384:	0300                	addi	s0,sp,384
    1386:	7800                	flw	fs0,48(s0)
    1388:	7fbc                	flw	fa5,120(a5)
    138a:	0434                	addi	a3,sp,520
    138c:	0000                	unimp
    138e:	0456                	slli	s0,s0,0x15
    1390:	0000                	unimp
    1392:	0001                	nop
    1394:	5660                	lw	s0,108(a2)
    1396:	0004                	0x4
    1398:	da00                	sw	s0,48(a2)
    139a:	0004                	0x4
    139c:	0300                	addi	s0,sp,384
    139e:	7800                	flw	fs0,48(s0)
    13a0:	7fbc                	flw	fa5,120(a5)
    13a2:	04da                	slli	s1,s1,0x16
    13a4:	0000                	unimp
    13a6:	04fc                	addi	a5,sp,588
    13a8:	0000                	unimp
    13aa:	bc910003          	lb	zero,-1079(sp)
    13ae:	007f                	0x7f
    13b0:	0000                	unimp
    13b2:	0000                	unimp
    13b4:	0000                	unimp
    13b6:	8c00                	0x8c00
    13b8:	f4000003          	lb	zero,-192(zero) # ffffff40 <_stack_start+0xfffeff40>
    13bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13c0:	5d00                	lw	s0,56(a0)
    13c2:	03f4                	addi	a3,sp,460
    13c4:	0000                	unimp
    13c6:	04e0                	addi	s0,sp,588
    13c8:	0000                	unimp
    13ca:	0001                	nop
    13cc:	0004e063          	bltu	s1,zero,13cc <_bss_start+0x1d8>
    13d0:	fc00                	fsw	fs0,56(s0)
    13d2:	0004                	0x4
    13d4:	0400                	addi	s0,sp,512
    13d6:	f300                	fsw	fs0,32(a4)
    13d8:	5d01                	li	s10,-32
    13da:	009f 0000 0000      	0x9f
    13e0:	0000                	unimp
    13e2:	8c00                	0x8c00
    13e4:	f6000003          	lb	zero,-160(zero) # ffffff60 <_stack_start+0xfffeff60>
    13e8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13ec:	5e00                	lw	s0,56(a2)
    13ee:	03f6                	slli	t2,t2,0x1d
    13f0:	0000                	unimp
    13f2:	04f0                	addi	a2,sp,588
    13f4:	0000                	unimp
    13f6:	0001                	nop
    13f8:	0004f06b          	0x4f06b
    13fc:	fc00                	fsw	fs0,56(s0)
    13fe:	0004                	0x4
    1400:	0400                	addi	s0,sp,512
    1402:	f300                	fsw	fs0,32(a4)
    1404:	5e01                	li	t3,-32
    1406:	009f 0000 0000      	0x9f
    140c:	0000                	unimp
    140e:	e800                	fsw	fs0,16(s0)
    1410:	2c000003          	lb	zero,704(zero) # 2c0 <polymult+0x106>
    1414:	0004                	0x4
    1416:	0200                	addi	s0,sp,256
    1418:	8200                	0x8200
    141a:	2c00                	fld	fs0,24(s0)
    141c:	0004                	0x4
    141e:	3400                	fld	fs0,40(s0)
    1420:	0004                	0x4
    1422:	0200                	addi	s0,sp,256
    1424:	8900                	0x8900
    1426:	3400                	fld	fs0,40(s0)
    1428:	0004                	0x4
    142a:	5600                	lw	s0,40(a2)
    142c:	0004                	0x4
    142e:	0200                	addi	s0,sp,256
    1430:	8200                	0x8200
    1432:	5600                	lw	s0,40(a2)
    1434:	0004                	0x4
    1436:	7e00                	flw	fs0,56(a2)
    1438:	0004                	0x4
    143a:	0200                	addi	s0,sp,256
    143c:	8900                	0x8900
    143e:	9000                	0x9000
    1440:	0004                	0x4
    1442:	b800                	fsd	fs0,48(s0)
    1444:	0004                	0x4
    1446:	0200                	addi	s0,sp,256
    1448:	8900                	0x8900
	...
    1452:	f000                	fsw	fs0,32(s0)
    1454:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    1458:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    145c:	3000                	fld	fs0,32(s0)
    145e:	fe9f 0003 0d00      	0xd000003fe9f
    1464:	0004                	0x4
    1466:	0100                	addi	s0,sp,128
    1468:	5e00                	lw	s0,56(a2)
    146a:	0434                	addi	a3,sp,520
    146c:	0000                	unimp
    146e:	0456                	slli	s0,s0,0x15
    1470:	0000                	unimp
    1472:	0001                	nop
    1474:	7e5e                	flw	ft8,244(sp)
    1476:	0004                	0x4
    1478:	9000                	0x9000
    147a:	0004                	0x4
    147c:	0100                	addi	s0,sp,128
    147e:	5c00                	lw	s0,56(s0)
    1480:	04b8                	addi	a4,sp,584
    1482:	0000                	unimp
    1484:	04fc                	addi	a5,sp,588
    1486:	0000                	unimp
    1488:	0001                	nop
    148a:	005c                	addi	a5,sp,4
    148c:	0000                	unimp
    148e:	0000                	unimp
    1490:	0000                	unimp
    1492:	2c00                	fld	fs0,24(s0)
    1494:	0004                	0x4
    1496:	3400                	fld	fs0,40(s0)
    1498:	0004                	0x4
    149a:	0100                	addi	s0,sp,128
    149c:	6400                	flw	fs0,8(s0)
    149e:	0434                	addi	a3,sp,520
    14a0:	0000                	unimp
    14a2:	0450                	addi	a2,sp,516
    14a4:	0000                	unimp
    14a6:	0001                	nop
    14a8:	565f 0004 7e00      	0x7e000004565f
    14ae:	0004                	0x4
    14b0:	0100                	addi	s0,sp,128
    14b2:	6400                	flw	fs0,8(s0)
    14b4:	0490                	addi	a2,sp,576
    14b6:	0000                	unimp
    14b8:	04b8                	addi	a4,sp,584
    14ba:	0000                	unimp
    14bc:	0001                	nop
    14be:	b864                	fsd	fs1,240(s0)
    14c0:	0004                	0x4
    14c2:	be00                	fsd	fs0,56(a2)
    14c4:	0004                	0x4
    14c6:	0100                	addi	s0,sp,128
    14c8:	5e00                	lw	s0,56(a2)
    14ca:	04be                	slli	s1,s1,0xf
    14cc:	0000                	unimp
    14ce:	04c6                	slli	s1,s1,0x11
    14d0:	0000                	unimp
    14d2:	7f7e0003          	lb	zero,2039(t3)
    14d6:	c69f 0004 d200      	0xd2000004c69f
    14dc:	0004                	0x4
    14de:	0100                	addi	s0,sp,128
    14e0:	5e00                	lw	s0,56(a2)
	...
    14ea:	0456                	slli	s0,s0,0x15
    14ec:	0000                	unimp
    14ee:	0468                	addi	a0,sp,524
    14f0:	0000                	unimp
    14f2:	0001                	nop
    14f4:	685f 0004 6e00      	0x6e000004685f
    14fa:	0004                	0x4
    14fc:	0300                	addi	s0,sp,384
    14fe:	7f00                	flw	fs0,56(a4)
    1500:	9f01                	0x9f01
    1502:	046e                	slli	s0,s0,0x1b
    1504:	0000                	unimp
    1506:	0478                	addi	a4,sp,524
    1508:	0000                	unimp
    150a:	0001                	nop
    150c:	945f 0004 a600      	0xa6000004945f
    1512:	0004                	0x4
    1514:	0100                	addi	s0,sp,128
    1516:	5f00                	lw	s0,56(a4)
    1518:	04a6                	slli	s1,s1,0x9
    151a:	0000                	unimp
    151c:	04ac                	addi	a1,sp,584
    151e:	0000                	unimp
    1520:	017f0003          	lb	zero,23(t5)
    1524:	ac9f 0004 b800      	0xb8000004ac9f
    152a:	0004                	0x4
    152c:	0100                	addi	s0,sp,128
    152e:	5f00                	lw	s0,56(a4)
	...
    1538:	03ee                	slli	t2,t2,0x1b
    153a:	0000                	unimp
    153c:	04ee                	slli	s1,s1,0x1b
    153e:	0000                	unimp
    1540:	0002                	c.slli64	zero
    1542:	008a                	slli	ra,ra,0x2
	...
    154c:	03f0                	addi	a2,sp,460
    154e:	0000                	unimp
    1550:	04d6                	slli	s1,s1,0x15
    1552:	0000                	unimp
    1554:	0002                	c.slli64	zero
    1556:	0072                	c.slli	zero,0x1c
    1558:	04d6                	slli	s1,s1,0x15
    155a:	0000                	unimp
    155c:	04dc                	addi	a5,sp,580
    155e:	0000                	unimp
    1560:	0002                	c.slli64	zero
    1562:	0079                	c.nop	30
    1564:	04dc                	addi	a5,sp,580
    1566:	0000                	unimp
    1568:	04e0                	addi	s0,sp,588
    156a:	0000                	unimp
    156c:	000c                	0xc
    156e:	008a                	slli	ra,ra,0x2
    1570:	24320083          	lb	ra,579(tp) # 243 <polymult+0x89>
    1574:	f0090f23          	sb	zero,-226(s2)
    1578:	1c1a                	slli	s8,s8,0x26
    157a:	04e0                	addi	s0,sp,588
    157c:	0000                	unimp
    157e:	04ee                	slli	s1,s1,0x1b
    1580:	0000                	unimp
    1582:	000d                	c.nop	3
    1584:	008a                	slli	ra,ra,0x2
    1586:	325d01f3          	0x325d01f3
    158a:	2324                	fld	fs1,64(a4)
    158c:	1af0090f          	0x1af0090f
    1590:	001c                	0x1c
    1592:	0000                	unimp
    1594:	0000                	unimp
    1596:	0000                	unimp
    1598:	e800                	fsw	fs0,16(s0)
    159a:	2c000003          	lb	zero,704(zero) # 2c0 <polymult+0x106>
    159e:	0004                	0x4
    15a0:	0100                	addi	s0,sp,128
    15a2:	6400                	flw	fs0,8(s0)
    15a4:	042c                	addi	a1,sp,520
    15a6:	0000                	unimp
    15a8:	0434                	addi	a3,sp,520
    15aa:	0000                	unimp
    15ac:	7f830003          	lb	zero,2040(t1)
    15b0:	349f 0004 5600      	0x56000004349f
    15b6:	0004                	0x4
    15b8:	0100                	addi	s0,sp,128
    15ba:	6400                	flw	fs0,8(s0)
    15bc:	0456                	slli	s0,s0,0x15
    15be:	0000                	unimp
    15c0:	04e0                	addi	s0,sp,588
    15c2:	0000                	unimp
    15c4:	7f830003          	lb	zero,2040(t1)
    15c8:	e09f 0004 fc00      	0xfc000004e09f
    15ce:	0004                	0x4
    15d0:	0600                	addi	s0,sp,768
    15d2:	f300                	fsw	fs0,32(a4)
    15d4:	5d01                	li	s10,-32
    15d6:	1c31                	addi	s8,s8,-20
    15d8:	009f 0000 0000      	0x9f
    15de:	0000                	unimp
    15e0:	a400                	fsd	fs0,8(s0)
    15e2:	e8000003          	lb	zero,-384(zero) # fffffe80 <_stack_start+0xfffefe80>
    15e6:	0004                	0x4
    15e8:	0100                	addi	s0,sp,128
    15ea:	6700                	flw	fs0,8(a4)
    15ec:	04e8                	addi	a0,sp,588
    15ee:	0000                	unimp
    15f0:	04ea                	slli	s1,s1,0x1a
    15f2:	0000                	unimp
    15f4:	00880007          	0x880007
    15f8:	225d01f3          	0x225d01f3
    15fc:	ea9f 0004 fc00      	0xfc000004ea9f
    1602:	0004                	0x4
    1604:	0a00                	addi	s0,sp,272
    1606:	f300                	fsw	fs0,32(a4)
    1608:	5b01                	li	s6,-32
    160a:	225d01f3          	0x225d01f3
    160e:	1c31                	addi	s8,s8,-20
    1610:	009f 0000 0000      	0x9f
    1616:	0000                	unimp
    1618:	ee00                	fsw	fs0,24(a2)
    161a:	ea000003          	lb	zero,-352(zero) # fffffea0 <_stack_start+0xfffefea0>
    161e:	0004                	0x4
    1620:	0100                	addi	s0,sp,128
    1622:	6800                	flw	fs0,16(s0)
    1624:	04ea                	slli	s1,s1,0x1a
    1626:	0000                	unimp
    1628:	04fc                	addi	a5,sp,588
    162a:	0000                	unimp
    162c:	0006                	c.slli	zero,0x1
    162e:	315b01f3          	0x315b01f3
    1632:	9f1c                	0x9f1c
	...
    163c:	03ee                	slli	t2,t2,0x1b
    163e:	0000                	unimp
    1640:	042c                	addi	a1,sp,520
    1642:	0000                	unimp
    1644:	0001                	nop
    1646:	2c64                	fld	fs1,216(s0)
    1648:	0004                	0x4
    164a:	3400                	fld	fs0,40(s0)
    164c:	0004                	0x4
    164e:	0300                	addi	s0,sp,384
    1650:	8300                	0x8300
    1652:	9f7f                	0x9f7f
    1654:	0434                	addi	a3,sp,520
    1656:	0000                	unimp
    1658:	0456                	slli	s0,s0,0x15
    165a:	0000                	unimp
    165c:	0001                	nop
    165e:	5664                	lw	s1,108(a2)
    1660:	0004                	0x4
    1662:	e000                	fsw	fs0,0(s0)
    1664:	0004                	0x4
    1666:	0300                	addi	s0,sp,384
    1668:	8300                	0x8300
    166a:	9f7f                	0x9f7f
    166c:	04e0                	addi	s0,sp,588
    166e:	0000                	unimp
    1670:	04fc                	addi	a5,sp,588
    1672:	0000                	unimp
    1674:	0006                	c.slli	zero,0x1
    1676:	315d01f3          	0x315d01f3
    167a:	9f1c                	0x9f1c
	...
    1684:	01ba                	slli	gp,gp,0xe
    1686:	0000                	unimp
    1688:	023a                	slli	tp,tp,0xe
    168a:	0000                	unimp
    168c:	0001                	nop
    168e:	3a5a                	fld	fs4,432(sp)
    1690:	0002                	c.slli64	zero
    1692:	4b00                	lw	s0,16(a4)
    1694:	0002                	c.slli64	zero
    1696:	0100                	addi	s0,sp,128
    1698:	5b00                	lw	s0,48(a4)
    169a:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    169e:	028c                	addi	a1,sp,320
    16a0:	0000                	unimp
    16a2:	0004                	0x4
    16a4:	9f5a01f3          	0x9f5a01f3
    16a8:	028c                	addi	a1,sp,320
    16aa:	0000                	unimp
    16ac:	02ae                	slli	t0,t0,0xb
    16ae:	0000                	unimp
    16b0:	0001                	nop
    16b2:	ae5a                	fsd	fs6,280(sp)
    16b4:	0002                	c.slli64	zero
    16b6:	8c00                	0x8c00
    16b8:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    16bc:	f300                	fsw	fs0,32(a4)
    16be:	5a01                	li	s4,-32
    16c0:	009f 0000 0000      	0x9f
    16c6:	0000                	unimp
    16c8:	ba00                	fsd	fs0,48(a2)
    16ca:	0001                	nop
    16cc:	2800                	fld	fs0,16(s0)
    16ce:	0002                	c.slli64	zero
    16d0:	0100                	addi	s0,sp,128
    16d2:	5b00                	lw	s0,48(a4)
    16d4:	0228                	addi	a0,sp,264
    16d6:	0000                	unimp
    16d8:	02e8                	addi	a0,sp,332
    16da:	0000                	unimp
    16dc:	0001                	nop
    16de:	e865                	bnez	s0,17ce <result+0x12a>
    16e0:	0002                	c.slli64	zero
    16e2:	0000                	unimp
    16e4:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    16e8:	9100                	0x9100
    16ea:	7fbc                	flw	fa5,120(a5)
    16ec:	2306                	fld	ft6,64(sp)
    16ee:	9f01                	0x9f01
    16f0:	0300                	addi	s0,sp,384
    16f2:	0000                	unimp
    16f4:	038c                	addi	a1,sp,448
    16f6:	0000                	unimp
    16f8:	0001                	nop
    16fa:	0065                	c.nop	25
    16fc:	0000                	unimp
    16fe:	0000                	unimp
    1700:	0000                	unimp
    1702:	ba00                	fsd	fs0,48(a2)
    1704:	0001                	nop
    1706:	3000                	fld	fs0,32(s0)
    1708:	0002                	c.slli64	zero
    170a:	0100                	addi	s0,sp,128
    170c:	5c00                	lw	s0,56(s0)
    170e:	0230                	addi	a2,sp,264
    1710:	0000                	unimp
    1712:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    1716:	0001                	nop
    1718:	4b60                	lw	s0,84(a4)
    171a:	0002                	c.slli64	zero
    171c:	8c00                	0x8c00
    171e:	0002                	c.slli64	zero
    1720:	0300                	addi	s0,sp,384
    1722:	7800                	flw	fs0,48(s0)
    1724:	7fb4                	flw	fa3,120(a5)
    1726:	028c                	addi	a1,sp,320
    1728:	0000                	unimp
    172a:	02ae                	slli	t0,t0,0xb
    172c:	0000                	unimp
    172e:	0001                	nop
    1730:	ae60                	fsd	fs0,216(a2)
    1732:	0002                	c.slli64	zero
    1734:	de00                	sw	s0,56(a2)
    1736:	0002                	c.slli64	zero
    1738:	0300                	addi	s0,sp,384
    173a:	7800                	flw	fs0,48(s0)
    173c:	7fb4                	flw	fa3,120(a5)
    173e:	02de                	slli	t0,t0,0x17
    1740:	0000                	unimp
    1742:	038c                	addi	a1,sp,448
    1744:	0000                	unimp
    1746:	b4910003          	lb	zero,-1207(sp)
    174a:	007f                	0x7f
    174c:	0000                	unimp
    174e:	0000                	unimp
    1750:	0000                	unimp
    1752:	ba00                	fsd	fs0,48(a2)
    1754:	0001                	nop
    1756:	c400                	sw	s0,8(s0)
    1758:	0001                	nop
    175a:	0100                	addi	s0,sp,128
    175c:	5d00                	lw	s0,56(a0)
    175e:	01c4                	addi	s1,sp,196
    1760:	0000                	unimp
    1762:	02e2                	slli	t0,t0,0x18
    1764:	0000                	unimp
    1766:	0001                	nop
    1768:	e262                	fsw	fs8,4(sp)
    176a:	0002                	c.slli64	zero
    176c:	0000                	unimp
    176e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1772:	f300                	fsw	fs0,32(a4)
    1774:	5d01                	li	s10,-32
    1776:	009f 0003 8c00      	0x8c000003009f
    177c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1780:	6200                	flw	fs0,0(a2)
	...
    178a:	01ba                	slli	gp,gp,0xe
    178c:	0000                	unimp
    178e:	01e0                	addi	s0,sp,204
    1790:	0000                	unimp
    1792:	0001                	nop
    1794:	e05e                	fsw	fs7,0(sp)
    1796:	0001                	nop
    1798:	e600                	fsw	fs0,8(a2)
    179a:	0002                	c.slli64	zero
    179c:	0100                	addi	s0,sp,128
    179e:	6400                	flw	fs0,8(s0)
    17a0:	02e6                	slli	t0,t0,0x19
    17a2:	0000                	unimp
    17a4:	0300                	addi	s0,sp,384
    17a6:	0000                	unimp
    17a8:	0004                	0x4
    17aa:	9f5e01f3          	0x9f5e01f3
    17ae:	0300                	addi	s0,sp,384
    17b0:	0000                	unimp
    17b2:	038c                	addi	a1,sp,448
    17b4:	0000                	unimp
    17b6:	0001                	nop
    17b8:	0064                	addi	s1,sp,12
    17ba:	0000                	unimp
    17bc:	0000                	unimp
    17be:	0000                	unimp
    17c0:	ba00                	fsd	fs0,48(a2)
    17c2:	0001                	nop
    17c4:	4b00                	lw	s0,16(a4)
    17c6:	0002                	c.slli64	zero
    17c8:	0100                	addi	s0,sp,128
    17ca:	5f00                	lw	s0,56(a4)
    17cc:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    17d0:	028c                	addi	a1,sp,320
    17d2:	0000                	unimp
    17d4:	b0780003          	lb	zero,-1273(a6)
    17d8:	8c7f                	0x8c7f
    17da:	0002                	c.slli64	zero
    17dc:	ae00                	fsd	fs0,24(a2)
    17de:	0002                	c.slli64	zero
    17e0:	0100                	addi	s0,sp,128
    17e2:	5f00                	lw	s0,56(a4)
    17e4:	02ae                	slli	t0,t0,0xb
    17e6:	0000                	unimp
    17e8:	02da                	slli	t0,t0,0x16
    17ea:	0000                	unimp
    17ec:	b0780003          	lb	zero,-1273(a6)
    17f0:	da7f                	0xda7f
    17f2:	0002                	c.slli64	zero
    17f4:	fe00                	fsw	fs0,56(a2)
    17f6:	0002                	c.slli64	zero
    17f8:	0200                	addi	s0,sp,256
    17fa:	7200                	flw	fs0,32(a2)
    17fc:	fe00                	fsw	fs0,56(a2)
    17fe:	0002                	c.slli64	zero
    1800:	0000                	unimp
    1802:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1806:	7200                	flw	fs0,32(a2)
    1808:	7fb0                	flw	fa2,120(a5)
    180a:	0300                	addi	s0,sp,384
    180c:	0000                	unimp
    180e:	038c                	addi	a1,sp,448
    1810:	0000                	unimp
    1812:	b0910003          	lb	zero,-1271(sp)
    1816:	007f                	0x7f
    1818:	0000                	unimp
    181a:	0000                	unimp
    181c:	0000                	unimp
    181e:	1c00                	addi	s0,sp,560
    1820:	0002                	c.slli64	zero
    1822:	3000                	fld	fs0,32(s0)
    1824:	0002                	c.slli64	zero
    1826:	0200                	addi	s0,sp,256
    1828:	8700                	0x8700
    182a:	3000                	fld	fs0,32(s0)
    182c:	0002                	c.slli64	zero
    182e:	4b00                	lw	s0,16(a4)
    1830:	0002                	c.slli64	zero
    1832:	0200                	addi	s0,sp,256
    1834:	7e00                	flw	fs0,56(a2)
    1836:	4b00                	lw	s0,16(a4)
    1838:	0002                	c.slli64	zero
    183a:	8c00                	0x8c00
    183c:	0002                	c.slli64	zero
    183e:	0200                	addi	s0,sp,256
    1840:	8700                	0x8700
    1842:	8c00                	0x8c00
    1844:	0002                	c.slli64	zero
    1846:	ae00                	fsd	fs0,24(a2)
    1848:	0002                	c.slli64	zero
    184a:	0200                	addi	s0,sp,256
    184c:	7e00                	flw	fs0,56(a2)
    184e:	ae00                	fsd	fs0,24(a2)
    1850:	0002                	c.slli64	zero
    1852:	ec00                	fsw	fs0,24(s0)
    1854:	0002                	c.slli64	zero
    1856:	0200                	addi	s0,sp,256
    1858:	8700                	0x8700
    185a:	ec00                	fsw	fs0,24(s0)
    185c:	0002                	c.slli64	zero
    185e:	0000                	unimp
    1860:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1864:	9100                	0x9100
    1866:	7fb8                	flw	fa4,120(a5)
    1868:	0006                	c.slli	zero,0x1
    186a:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    186e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1872:	8700                	0x8700
	...
    187c:	1e00                	addi	s0,sp,816
    187e:	0002                	c.slli64	zero
    1880:	3000                	fld	fs0,32(s0)
    1882:	0002                	c.slli64	zero
    1884:	0200                	addi	s0,sp,256
    1886:	3000                	fld	fs0,32(s0)
    1888:	309f 0002 3600      	0x36000002309f
    188e:	0002                	c.slli64	zero
    1890:	0100                	addi	s0,sp,128
    1892:	5b00                	lw	s0,48(a4)
    1894:	028c                	addi	a1,sp,320
    1896:	0000                	unimp
    1898:	02ae                	slli	t0,t0,0xb
    189a:	0000                	unimp
    189c:	0001                	nop
    189e:	0002b65b          	0x2b65b
    18a2:	c200                	sw	s0,0(a2)
    18a4:	0002                	c.slli64	zero
    18a6:	0100                	addi	s0,sp,128
    18a8:	5d00                	lw	s0,56(a0)
    18aa:	034c                	addi	a1,sp,388
    18ac:	0000                	unimp
    18ae:	036a                	slli	t1,t1,0x1a
    18b0:	0000                	unimp
    18b2:	0001                	nop
    18b4:	6a5d                	lui	s4,0x17
    18b6:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x54>
    18ba:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18be:	5c00                	lw	s0,56(s0)
    18c0:	0372                	slli	t1,t1,0x1c
    18c2:	0000                	unimp
    18c4:	037e                	slli	t1,t1,0x1f
    18c6:	0000                	unimp
    18c8:	7f7c0003          	lb	zero,2039(s8)
    18cc:	7e9f 0003 8800      	0x880000037e9f
    18d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18d6:	5c00                	lw	s0,56(s0)
	...
    18e0:	0284                	addi	s1,sp,320
    18e2:	0000                	unimp
    18e4:	028c                	addi	a1,sp,320
    18e6:	0000                	unimp
    18e8:	0001                	nop
    18ea:	8c66                	mv	s8,s9
    18ec:	0002                	c.slli64	zero
    18ee:	a800                	fsd	fs0,16(s0)
    18f0:	0002                	c.slli64	zero
    18f2:	0100                	addi	s0,sp,128
    18f4:	5c00                	lw	s0,56(s0)
    18f6:	02b0                	addi	a2,sp,328
    18f8:	0000                	unimp
    18fa:	02b6                	slli	t0,t0,0xd
    18fc:	0000                	unimp
    18fe:	0001                	nop
    1900:	c466                	sw	s9,8(sp)
    1902:	0002                	c.slli64	zero
    1904:	d500                	sw	s0,40(a0)
    1906:	0002                	c.slli64	zero
    1908:	0100                	addi	s0,sp,128
    190a:	5e00                	lw	s0,56(a2)
    190c:	0300                	addi	s0,sp,384
    190e:	0000                	unimp
    1910:	034c                	addi	a1,sp,388
    1912:	0000                	unimp
    1914:	0001                	nop
    1916:	4c66                	lw	s8,88(sp)
    1918:	50000003          	lb	zero,1280(zero) # 500 <polydiv+0x4>
    191c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1920:	5c00                	lw	s0,56(s0)
    1922:	0350                	addi	a2,sp,388
    1924:	0000                	unimp
    1926:	035a                	slli	t1,t1,0x16
    1928:	0000                	unimp
    192a:	7f7c0003          	lb	zero,2039(s8)
    192e:	5a9f 0003 6400      	0x640000035a9f
    1934:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1938:	5c00                	lw	s0,56(s0)
    193a:	036a                	slli	t1,t1,0x1a
    193c:	0000                	unimp
    193e:	038c                	addi	a1,sp,448
    1940:	0000                	unimp
    1942:	0001                	nop
    1944:	005e                	c.slli	zero,0x17
	...
    194e:	12000003          	lb	zero,288(zero) # 120 <array_equ+0x8e>
    1952:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1956:	5f00                	lw	s0,56(a4)
    1958:	0312                	slli	t1,t1,0x4
    195a:	0000                	unimp
    195c:	0318                	addi	a4,sp,384
    195e:	0000                	unimp
    1960:	017f0003          	lb	zero,23(t5)
    1964:	189f 0003 2400      	0x24000003189f
    196a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    196e:	5f00                	lw	s0,56(a4)
    1970:	0328                	addi	a0,sp,392
    1972:	0000                	unimp
    1974:	033a                	slli	t1,t1,0xe
    1976:	0000                	unimp
    1978:	0001                	nop
    197a:	3a5f 0003 4000      	0x400000033a5f
    1980:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1984:	7f00                	flw	fs0,56(a4)
    1986:	9f01                	0x9f01
    1988:	0340                	addi	s0,sp,388
    198a:	0000                	unimp
    198c:	034c                	addi	a1,sp,388
    198e:	0000                	unimp
    1990:	0001                	nop
    1992:	005f 0000 0000      	0x5f
    1998:	0000                	unimp
    199a:	d600                	sw	s0,40(a2)
    199c:	0002                	c.slli64	zero
    199e:	0000                	unimp
    19a0:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    19a4:	0300                	addi	s0,sp,384
    19a6:	11f4                	addi	a3,sp,236
    19a8:	0000                	unimp
    19aa:	009f 0000 0000      	0x9f
    19b0:	0000                	unimp
    19b2:	1c00                	addi	s0,sp,560
    19b4:	0002                	c.slli64	zero
    19b6:	f400                	fsw	fs0,40(s0)
    19b8:	0002                	c.slli64	zero
    19ba:	0200                	addi	s0,sp,256
    19bc:	8b00                	0x8b00
    19be:	f400                	fsw	fs0,40(s0)
    19c0:	0002                	c.slli64	zero
    19c2:	0000                	unimp
    19c4:	12000003          	lb	zero,288(zero) # 120 <array_equ+0x8e>
    19c8:	9100                	0x9100
    19ca:	7fb8                	flw	fa4,120(a5)
    19cc:	9106                	add	sp,sp,ra
    19ce:	7fbc                	flw	fa5,120(a5)
    19d0:	2306                	fld	ft6,64(sp)
    19d2:	3201                	jal	12d2 <_bss_start+0xde>
    19d4:	2324                	fld	fs1,64(a4)
    19d6:	1af0090f          	0x1af0090f
    19da:	001c                	0x1c
    19dc:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    19e0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    19e4:	8b00                	0x8b00
	...
    19ee:	1e00                	addi	s0,sp,816
    19f0:	0002                	c.slli64	zero
    19f2:	da00                	sw	s0,48(a2)
    19f4:	0002                	c.slli64	zero
    19f6:	0200                	addi	s0,sp,256
    19f8:	7200                	flw	fs0,32(a2)
    19fa:	da00                	sw	s0,48(a2)
    19fc:	0002                	c.slli64	zero
    19fe:	e200                	fsw	fs0,0(a2)
    1a00:	0002                	c.slli64	zero
    1a02:	0c00                	addi	s0,sp,528
    1a04:	8b00                	0x8b00
    1a06:	8200                	0x8200
    1a08:	3200                	fld	fs0,32(a2)
    1a0a:	2324                	fld	fs1,64(a4)
    1a0c:	1af0090f          	0x1af0090f
    1a10:	e21c                	fsw	fa5,0(a2)
    1a12:	0002                	c.slli64	zero
    1a14:	f400                	fsw	fs0,40(s0)
    1a16:	0002                	c.slli64	zero
    1a18:	0d00                	addi	s0,sp,656
    1a1a:	8b00                	0x8b00
    1a1c:	f300                	fsw	fs0,32(a4)
    1a1e:	5d01                	li	s10,-32
    1a20:	2432                	fld	fs0,264(sp)
    1a22:	f0090f23          	sb	zero,-226(s2)
    1a26:	1c1a                	slli	s8,s8,0x26
    1a28:	02f4                	addi	a3,sp,332
    1a2a:	0000                	unimp
    1a2c:	0300                	addi	s0,sp,384
    1a2e:	0000                	unimp
    1a30:	001d                	c.nop	7
    1a32:	b891                	j	1286 <_bss_start+0x92>
    1a34:	067f                	0x67f
    1a36:	bc91                	j	148a <product2+0x3e>
    1a38:	067f                	0x67f
    1a3a:	24320123          	sb	gp,578(tp) # 242 <polymult+0x88>
    1a3e:	f0090f23          	sb	zero,-226(s2)
    1a42:	1c1a                	slli	s8,s8,0x26
    1a44:	325d01f3          	0x325d01f3
    1a48:	2324                	fld	fs1,64(a4)
    1a4a:	1af0090f          	0x1af0090f
    1a4e:	001c                	0x1c
    1a50:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1a54:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1a58:	7200                	flw	fs0,32(a2)
	...
    1a62:	1c00                	addi	s0,sp,560
    1a64:	0002                	c.slli64	zero
    1a66:	8400                	0x8400
    1a68:	0002                	c.slli64	zero
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	6600                	flw	fs0,8(a2)
    1a6e:	0284                	addi	s1,sp,320
    1a70:	0000                	unimp
    1a72:	028c                	addi	a1,sp,320
    1a74:	0000                	unimp
    1a76:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1a7a:	8c9f 0002 b000      	0xb00000028c9f
    1a80:	0002                	c.slli64	zero
    1a82:	0100                	addi	s0,sp,128
    1a84:	6600                	flw	fs0,8(a2)
    1a86:	02b0                	addi	a2,sp,328
    1a88:	0000                	unimp
    1a8a:	02e2                	slli	t0,t0,0x18
    1a8c:	0000                	unimp
    1a8e:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1a92:	e29f 0002 0000      	0x2e29f
    1a98:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1a9c:	f300                	fsw	fs0,32(a4)
    1a9e:	5d01                	li	s10,-32
    1aa0:	1c31                	addi	s8,s8,-20
    1aa2:	009f 0003 8c00      	0x8c000003009f
    1aa8:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1aac:	8200                	0x8200
    1aae:	9f7f                	0x9f7f
	...
    1ab8:	01d4                	addi	a3,sp,196
    1aba:	0000                	unimp
    1abc:	02f0                	addi	a2,sp,332
    1abe:	0000                	unimp
    1ac0:	0001                	nop
    1ac2:	f069                	bnez	s0,1a84 <ti_2+0x188>
    1ac4:	0002                	c.slli64	zero
    1ac6:	0000                	unimp
    1ac8:	09000003          	lb	zero,144(zero) # 90 <instr_equ+0x4>
    1acc:	9100                	0x9100
    1ace:	7fbc                	flw	fa5,120(a5)
    1ad0:	f306                	fsw	ft1,164(sp)
    1ad2:	5d01                	li	s10,-32
    1ad4:	9f22                	add	t5,t5,s0
    1ad6:	0300                	addi	s0,sp,384
    1ad8:	0000                	unimp
    1ada:	038c                	addi	a1,sp,448
    1adc:	0000                	unimp
    1ade:	0001                	nop
    1ae0:	0069                	c.nop	26
    1ae2:	0000                	unimp
    1ae4:	0000                	unimp
    1ae6:	0000                	unimp
    1ae8:	1c00                	addi	s0,sp,560
    1aea:	0002                	c.slli64	zero
    1aec:	4b00                	lw	s0,16(a4)
    1aee:	0002                	c.slli64	zero
    1af0:	0100                	addi	s0,sp,128
    1af2:	5d00                	lw	s0,56(a0)
    1af4:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    1af8:	028c                	addi	a1,sp,320
    1afa:	0000                	unimp
    1afc:	bc780003          	lb	zero,-1081(a6)
    1b00:	8c7f                	0x8c7f
    1b02:	0002                	c.slli64	zero
    1b04:	ae00                	fsd	fs0,24(a2)
    1b06:	0002                	c.slli64	zero
    1b08:	0100                	addi	s0,sp,128
    1b0a:	5d00                	lw	s0,56(a0)
    1b0c:	02ae                	slli	t0,t0,0xb
    1b0e:	0000                	unimp
    1b10:	02de                	slli	t0,t0,0x17
    1b12:	0000                	unimp
    1b14:	bc780003          	lb	zero,-1081(a6)
    1b18:	de7f                	0xde7f
    1b1a:	0002                	c.slli64	zero
    1b1c:	8c00                	0x8c00
    1b1e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1b22:	9100                	0x9100
    1b24:	7fbc                	flw	fa5,120(a5)
	...
    1b2e:	021c                	addi	a5,sp,256
    1b30:	0000                	unimp
    1b32:	0284                	addi	s1,sp,320
    1b34:	0000                	unimp
    1b36:	0001                	nop
    1b38:	8466                	mv	s0,s9
    1b3a:	0002                	c.slli64	zero
    1b3c:	8c00                	0x8c00
    1b3e:	0002                	c.slli64	zero
    1b40:	0300                	addi	s0,sp,384
    1b42:	8200                	0x8200
    1b44:	9f7f                	0x9f7f
    1b46:	028c                	addi	a1,sp,320
    1b48:	0000                	unimp
    1b4a:	02b0                	addi	a2,sp,328
    1b4c:	0000                	unimp
    1b4e:	0001                	nop
    1b50:	b066                	fsd	fs9,32(sp)
    1b52:	0002                	c.slli64	zero
    1b54:	e200                	fsw	fs0,0(a2)
    1b56:	0002                	c.slli64	zero
    1b58:	0300                	addi	s0,sp,384
    1b5a:	8200                	0x8200
    1b5c:	9f7f                	0x9f7f
    1b5e:	02e2                	slli	t0,t0,0x18
    1b60:	0000                	unimp
    1b62:	0300                	addi	s0,sp,384
    1b64:	0000                	unimp
    1b66:	0006                	c.slli	zero,0x1
    1b68:	315d01f3          	0x315d01f3
    1b6c:	9f1c                	0x9f1c
    1b6e:	0300                	addi	s0,sp,384
    1b70:	0000                	unimp
    1b72:	038c                	addi	a1,sp,448
    1b74:	0000                	unimp
    1b76:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1b7a:	009f 0000 0000      	0x9f
    1b80:	0000                	unimp
    1b82:	9200                	0x9200
    1b84:	0000                	unimp
    1b86:	ea00                	fsw	fs0,16(a2)
    1b88:	0000                	unimp
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	5b00                	lw	s0,48(a4)
    1b8e:	00ea                	slli	ra,ra,0x1a
    1b90:	0000                	unimp
    1b92:	00f2                	slli	ra,ra,0x1c
    1b94:	0000                	unimp
    1b96:	0004                	0x4
    1b98:	9f5b01f3          	0x9f5b01f3
    1b9c:	00f2                	slli	ra,ra,0x1c
    1b9e:	0000                	unimp
    1ba0:	0128                	addi	a0,sp,136
    1ba2:	0000                	unimp
    1ba4:	0001                	nop
    1ba6:	0000005b          	0x5b
    1baa:	0000                	unimp
    1bac:	0000                	unimp
    1bae:	9200                	0x9200
    1bb0:	0000                	unimp
    1bb2:	aa00                	fsd	fs0,16(a2)
    1bb4:	0000                	unimp
    1bb6:	0100                	addi	s0,sp,128
    1bb8:	5c00                	lw	s0,56(s0)
    1bba:	00aa                	slli	ra,ra,0xa
    1bbc:	0000                	unimp
    1bbe:	00b2                	slli	ra,ra,0xc
    1bc0:	0000                	unimp
    1bc2:	0004                	0x4
    1bc4:	9f5c01f3          	0x9f5c01f3
    1bc8:	00b2                	slli	ra,ra,0xc
    1bca:	0000                	unimp
    1bcc:	00c4                	addi	s1,sp,68
    1bce:	0000                	unimp
    1bd0:	0001                	nop
    1bd2:	c45c                	sw	a5,12(s0)
    1bd4:	0000                	unimp
    1bd6:	d400                	sw	s0,40(s0)
    1bd8:	0000                	unimp
    1bda:	0400                	addi	s0,sp,512
    1bdc:	f300                	fsw	fs0,32(a4)
    1bde:	5c01                	li	s8,-32
    1be0:	d49f 0000 e600      	0xe6000000d49f
    1be6:	0000                	unimp
    1be8:	0100                	addi	s0,sp,128
    1bea:	5c00                	lw	s0,56(s0)
    1bec:	00e6                	slli	ra,ra,0x19
    1bee:	0000                	unimp
    1bf0:	0104                	addi	s1,sp,128
    1bf2:	0000                	unimp
    1bf4:	0004                	0x4
    1bf6:	9f5c01f3          	0x9f5c01f3
    1bfa:	0104                	addi	s1,sp,128
    1bfc:	0000                	unimp
    1bfe:	0128                	addi	a0,sp,136
    1c00:	0000                	unimp
    1c02:	0001                	nop
    1c04:	005c                	addi	a5,sp,4
    1c06:	0000                	unimp
    1c08:	0000                	unimp
    1c0a:	0000                	unimp
    1c0c:	9200                	0x9200
    1c0e:	0000                	unimp
    1c10:	ac00                	fsd	fs0,24(s0)
    1c12:	0000                	unimp
    1c14:	0200                	addi	s0,sp,256
    1c16:	3000                	fld	fs0,32(s0)
    1c18:	ac9f 0000 b200      	0xb2000000ac9f
    1c1e:	0000                	unimp
    1c20:	0100                	addi	s0,sp,128
    1c22:	5f00                	lw	s0,56(a4)
    1c24:	00b2                	slli	ra,ra,0xc
    1c26:	0000                	unimp
    1c28:	00be                	slli	ra,ra,0xf
    1c2a:	0000                	unimp
    1c2c:	0002                	c.slli64	zero
    1c2e:	9f30                	0x9f30
    1c30:	00be                	slli	ra,ra,0xf
    1c32:	0000                	unimp
    1c34:	00ca                	slli	ra,ra,0x12
    1c36:	0000                	unimp
    1c38:	0001                	nop
    1c3a:	d45f 0000 e000      	0xe0000000d45f
    1c40:	0000                	unimp
    1c42:	0200                	addi	s0,sp,256
    1c44:	3000                	fld	fs0,32(s0)
    1c46:	e09f 0000 e600      	0xe6000000e09f
    1c4c:	0000                	unimp
    1c4e:	0100                	addi	s0,sp,128
    1c50:	5f00                	lw	s0,56(a4)
    1c52:	00f2                	slli	ra,ra,0x1c
    1c54:	0000                	unimp
    1c56:	0128                	addi	a0,sp,136
    1c58:	0000                	unimp
    1c5a:	0001                	nop
    1c5c:	005f 0000 0000      	0x5f
    1c62:	0000                	unimp
    1c64:	f600                	fsw	fs0,40(a2)
    1c66:	0000                	unimp
    1c68:	fc00                	fsw	fs0,56(s0)
    1c6a:	0000                	unimp
    1c6c:	0600                	addi	s0,sp,768
    1c6e:	7b00                	flw	fs0,48(a4)
    1c70:	7e00                	flw	fs0,56(a2)
    1c72:	2200                	fld	fs0,0(a2)
    1c74:	fc9f 0000 0000      	0xfc9f
    1c7a:	0001                	nop
    1c7c:	0100                	addi	s0,sp,128
    1c7e:	5e00                	lw	s0,56(a2)
	...
    1c88:	00f6                	slli	ra,ra,0x1d
    1c8a:	0000                	unimp
    1c8c:	00fa                	slli	ra,ra,0x1e
    1c8e:	0000                	unimp
    1c90:	0006                	c.slli	zero,0x1
    1c92:	007a                	c.slli	zero,0x1e
    1c94:	007e                	c.slli	zero,0x1f
    1c96:	9f22                	add	t5,t5,s0
    1c98:	00fa                	slli	ra,ra,0x1e
    1c9a:	0000                	unimp
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	0000                	unimp
    1ca0:	0001                	nop
    1ca2:	005d                	c.nop	23
    1ca4:	0000                	unimp
    1ca6:	0000                	unimp
    1ca8:	0000                	unimp
    1caa:	0800                	addi	s0,sp,16
    1cac:	0001                	nop
    1cae:	0e00                	addi	s0,sp,784
    1cb0:	0001                	nop
    1cb2:	0600                	addi	s0,sp,768
    1cb4:	7b00                	flw	fs0,48(a4)
    1cb6:	7e00                	flw	fs0,56(a2)
    1cb8:	2200                	fld	fs0,0(a2)
    1cba:	0e9f 0001 1200      	0x120000010e9f
    1cc0:	0001                	nop
    1cc2:	0100                	addi	s0,sp,128
    1cc4:	5e00                	lw	s0,56(a2)
	...
    1cce:	0108                	addi	a0,sp,128
    1cd0:	0000                	unimp
    1cd2:	010c                	addi	a1,sp,128
    1cd4:	0000                	unimp
    1cd6:	0006                	c.slli	zero,0x1
    1cd8:	007a                	c.slli	zero,0x1e
    1cda:	007e                	c.slli	zero,0x1f
    1cdc:	9f22                	add	t5,t5,s0
    1cde:	010c                	addi	a1,sp,128
    1ce0:	0000                	unimp
    1ce2:	0112                	slli	sp,sp,0x4
    1ce4:	0000                	unimp
    1ce6:	0001                	nop
    1ce8:	0060                	addi	s0,sp,12
    1cea:	0000                	unimp
    1cec:	0000                	unimp
    1cee:	0000                	unimp
    1cf0:	1a00                	addi	s0,sp,304
    1cf2:	0001                	nop
    1cf4:	2000                	fld	fs0,0(s0)
    1cf6:	0001                	nop
    1cf8:	0600                	addi	s0,sp,768
    1cfa:	7b00                	flw	fs0,48(a4)
    1cfc:	7e00                	flw	fs0,56(a2)
    1cfe:	2200                	fld	fs0,0(a2)
    1d00:	209f 0001 2400      	0x24000001209f
    1d06:	0001                	nop
    1d08:	0100                	addi	s0,sp,128
    1d0a:	5e00                	lw	s0,56(a2)
	...
    1d14:	011a                	slli	sp,sp,0x6
    1d16:	0000                	unimp
    1d18:	011e                	slli	sp,sp,0x7
    1d1a:	0000                	unimp
    1d1c:	0006                	c.slli	zero,0x1
    1d1e:	007a                	c.slli	zero,0x1e
    1d20:	007e                	c.slli	zero,0x1f
    1d22:	9f22                	add	t5,t5,s0
    1d24:	011e                	slli	sp,sp,0x7
    1d26:	0000                	unimp
    1d28:	0124                	addi	s1,sp,136
    1d2a:	0000                	unimp
    1d2c:	0001                	nop
    1d2e:	0060                	addi	s0,sp,12
    1d30:	0000                	unimp
    1d32:	0000                	unimp
    1d34:	0000                	unimp
    1d36:	8c00                	0x8c00
    1d38:	0000                	unimp
    1d3a:	9000                	0x9000
    1d3c:	0000                	unimp
    1d3e:	0100                	addi	s0,sp,128
    1d40:	5a00                	lw	s0,48(a2)
	...
    1d4a:	0128                	addi	a0,sp,136
    1d4c:	0000                	unimp
    1d4e:	012c                	addi	a1,sp,136
    1d50:	0000                	unimp
    1d52:	0001                	nop
    1d54:	005a                	c.slli	zero,0x16
    1d56:	0000                	unimp
    1d58:	0000                	unimp
    1d5a:	0000                	unimp
    1d5c:	2e00                	fld	fs0,24(a2)
    1d5e:	0001                	nop
    1d60:	8c00                	0x8c00
    1d62:	0001                	nop
    1d64:	0100                	addi	s0,sp,128
    1d66:	5b00                	lw	s0,48(a4)
    1d68:	018c                	addi	a1,sp,192
    1d6a:	0000                	unimp
    1d6c:	0190                	addi	a2,sp,192
    1d6e:	0000                	unimp
    1d70:	0004                	0x4
    1d72:	9f5b01f3          	0x9f5b01f3
    1d76:	0190                	addi	a2,sp,192
    1d78:	0000                	unimp
    1d7a:	01ba                	slli	gp,gp,0xe
    1d7c:	0000                	unimp
    1d7e:	0001                	nop
    1d80:	0000005b          	0x5b
    1d84:	0000                	unimp
    1d86:	0000                	unimp
    1d88:	2e00                	fld	fs0,24(a2)
    1d8a:	0001                	nop
    1d8c:	4600                	lw	s0,8(a2)
    1d8e:	0001                	nop
    1d90:	0100                	addi	s0,sp,128
    1d92:	5c00                	lw	s0,56(s0)
    1d94:	0146                	slli	sp,sp,0x11
    1d96:	0000                	unimp
    1d98:	014e                	slli	sp,sp,0x13
    1d9a:	0000                	unimp
    1d9c:	0004                	0x4
    1d9e:	9f5c01f3          	0x9f5c01f3
    1da2:	014e                	slli	sp,sp,0x13
    1da4:	0000                	unimp
    1da6:	0160                	addi	s0,sp,140
    1da8:	0000                	unimp
    1daa:	0001                	nop
    1dac:	605c                	flw	fa5,4(s0)
    1dae:	0001                	nop
    1db0:	7000                	flw	fs0,32(s0)
    1db2:	0001                	nop
    1db4:	0400                	addi	s0,sp,512
    1db6:	f300                	fsw	fs0,32(a4)
    1db8:	5c01                	li	s8,-32
    1dba:	709f 0001 8200      	0x82000001709f
    1dc0:	0001                	nop
    1dc2:	0100                	addi	s0,sp,128
    1dc4:	5c00                	lw	s0,56(s0)
    1dc6:	0182                	c.slli64	gp
    1dc8:	0000                	unimp
    1dca:	019e                	slli	gp,gp,0x7
    1dcc:	0000                	unimp
    1dce:	0004                	0x4
    1dd0:	9f5c01f3          	0x9f5c01f3
    1dd4:	019e                	slli	gp,gp,0x7
    1dd6:	0000                	unimp
    1dd8:	01ba                	slli	gp,gp,0xe
    1dda:	0000                	unimp
    1ddc:	0001                	nop
    1dde:	005c                	addi	a5,sp,4
    1de0:	0000                	unimp
    1de2:	0000                	unimp
    1de4:	0000                	unimp
    1de6:	2e00                	fld	fs0,24(a2)
    1de8:	0001                	nop
    1dea:	4800                	lw	s0,16(s0)
    1dec:	0001                	nop
    1dee:	0200                	addi	s0,sp,256
    1df0:	3000                	fld	fs0,32(s0)
    1df2:	489f 0001 4e00      	0x4e000001489f
    1df8:	0001                	nop
    1dfa:	0100                	addi	s0,sp,128
    1dfc:	5f00                	lw	s0,56(a4)
    1dfe:	014e                	slli	sp,sp,0x13
    1e00:	0000                	unimp
    1e02:	017c                	addi	a5,sp,140
    1e04:	0000                	unimp
    1e06:	0002                	c.slli64	zero
    1e08:	9f30                	0x9f30
    1e0a:	017c                	addi	a5,sp,140
    1e0c:	0000                	unimp
    1e0e:	0182                	c.slli64	gp
    1e10:	0000                	unimp
    1e12:	0001                	nop
    1e14:	905f 0001 ac00      	0xac000001905f
    1e1a:	0001                	nop
    1e1c:	0100                	addi	s0,sp,128
    1e1e:	5f00                	lw	s0,56(a4)
    1e20:	01ac                	addi	a1,sp,200
    1e22:	0000                	unimp
    1e24:	01ba                	slli	gp,gp,0xe
    1e26:	0000                	unimp
    1e28:	0002                	c.slli64	zero
    1e2a:	9f30                	0x9f30
	...
    1e34:	0190                	addi	a2,sp,192
    1e36:	0000                	unimp
    1e38:	019a                	slli	gp,gp,0x6
    1e3a:	0000                	unimp
    1e3c:	0001                	nop
    1e3e:	0000005b          	0x5b
    1e42:	0000                	unimp
    1e44:	0000                	unimp
    1e46:	9000                	0x9000
    1e48:	0001                	nop
    1e4a:	9a00                	0x9a00
    1e4c:	0001                	nop
    1e4e:	0800                	addi	s0,sp,16
    1e50:	7f00                	flw	fs0,56(a4)
    1e52:	3c00                	fld	fs0,56(s0)
    1e54:	7a1e                	flw	fs4,228(sp)
    1e56:	2200                	fld	fs0,0(a2)
    1e58:	009f 0000 0000      	0x9f
    1e5e:	0000                	unimp
    1e60:	5a00                	lw	s0,48(a2)
    1e62:	0001                	nop
    1e64:	6800                	flw	fs0,16(s0)
    1e66:	0001                	nop
    1e68:	0100                	addi	s0,sp,128
    1e6a:	5f00                	lw	s0,56(a4)
    1e6c:	01ac                	addi	a1,sp,200
    1e6e:	0000                	unimp
    1e70:	01ba                	slli	gp,gp,0xe
    1e72:	0000                	unimp
    1e74:	0001                	nop
    1e76:	005f 0000 0000      	0x5f
    1e7c:	0000                	unimp
    1e7e:	ac00                	fsd	fs0,24(s0)
    1e80:	0001                	nop
    1e82:	b600                	fsd	fs0,40(a2)
    1e84:	0001                	nop
    1e86:	0100                	addi	s0,sp,128
    1e88:	5b00                	lw	s0,48(a4)
	...
    1e92:	01ac                	addi	a1,sp,200
    1e94:	0000                	unimp
    1e96:	01b6                	slli	gp,gp,0xd
    1e98:	0000                	unimp
    1e9a:	0008                	0x8
    1e9c:	007f                	0x7f
    1e9e:	1e3c                	addi	a5,sp,824
    1ea0:	007a                	c.slli	zero,0x1e
    1ea2:	9f22                	add	t5,t5,s0
	...
    1eac:	019e                	slli	gp,gp,0x7
    1eae:	0000                	unimp
    1eb0:	01a8                	addi	a0,sp,200
    1eb2:	0000                	unimp
    1eb4:	0001                	nop
    1eb6:	0000005b          	0x5b
    1eba:	0000                	unimp
    1ebc:	0000                	unimp
    1ebe:	9e00                	0x9e00
    1ec0:	0001                	nop
    1ec2:	a800                	fsd	fs0,16(s0)
    1ec4:	0001                	nop
    1ec6:	0800                	addi	s0,sp,16
    1ec8:	7f00                	flw	fs0,56(a4)
    1eca:	3c00                	fld	fs0,56(s0)
    1ecc:	7a1e                	flw	fs4,228(sp)
    1ece:	2200                	fld	fs0,0(a2)
    1ed0:	009f 0000 0000      	0x9f
    1ed6:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0c9e                	slli	s9,s9,0x7
  16:	0000                	unimp
  18:	0f26                	slli	t5,t5,0x9
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1d79                	addi	s10,s10,-2
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d2a                	slli	s10,s10,0xa
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0146                	slli	sp,sp,0x11
   2:	0000                	unimp
   4:	0148                	addi	a0,sp,132
   6:	0000                	unimp
   8:	0190                	addi	a2,sp,192
   a:	0000                	unimp
   c:	019a                	slli	gp,gp,0x6
	...
  16:	0000                	unimp
  18:	014e                	slli	sp,sp,0x13
  1a:	0000                	unimp
  1c:	0170                	addi	a2,sp,140
  1e:	0000                	unimp
  20:	0182                	c.slli64	gp
  22:	0000                	unimp
  24:	018e                	slli	gp,gp,0x3
  26:	0000                	unimp
  28:	01ac                	addi	a1,sp,200
  2a:	0000                	unimp
  2c:	01ba                	slli	gp,gp,0xe
	...
  36:	0000                	unimp
  38:	0158                	addi	a4,sp,132
  3a:	0000                	unimp
  3c:	015a                	slli	sp,sp,0x16
  3e:	0000                	unimp
  40:	01ac                	addi	a1,sp,200
  42:	0000                	unimp
  44:	01b6                	slli	gp,gp,0xd
	...
  4e:	0000                	unimp
  50:	017a                	slli	sp,sp,0x1e
  52:	0000                	unimp
  54:	017c                	addi	a5,sp,140
  56:	0000                	unimp
  58:	019e                	slli	gp,gp,0x7
  5a:	0000                	unimp
  5c:	01a8                	addi	a0,sp,200
	...
  66:	0000                	unimp
  68:	008c                	addi	a1,sp,64
  6a:	0000                	unimp
  6c:	0d2a                	slli	s10,s10,0xa
  6e:	0000                	unimp
  70:	0f26                	slli	t5,t5,0x9
  72:	0000                	unimp
  74:	105e                	c.slli	zero,0x37
	...
  jal x0, default_exc_handler
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	ffff                	0xffff
  82:	ffff                	0xffff
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	0d2a                	slli	s10,s10,0xa
  8a:	0000                	unimp
    asm volatile(
  8c:	0da0                	addi	s0,sp,728
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
  .endr
       0:	231c                	fld	fa5,0(a4)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x5e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult+0x1a6>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x1a6>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xb8>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult+0x1d0>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x28>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0xa4>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
            a1[length-2] = a2[length-2];
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
} //end of function
      f0:	6975                	lui	s2,0x1d
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    asm volatile(
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
            for (i = 0; i < (length / 3); i++) {
     102:	008c                	addi	a1,sp,64
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    asm volatile(
     10a:	0305                	addi	t1,t1,1
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
     110:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
    asm volatile(
     11a:	00090203          	lb	tp,0(s2) # b000 <_stack_len+0x7000>
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult+0x196>
     122:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
    asm volatile(
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
}
     12c:	0901                	addi	s2,s2,0
    switch(length%3) {
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
            for (i = 0; i < (length / 3); i++) {
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0x9e>
     14c:	0e090303          	lb	t1,224(s2)
            for (i = 0; i < ((length-2) / 3); i++) {
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
     156:	0104                	addi	s1,sp,128
    asm volatile(
     158:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
            a1[length-1] = a1[length-1] % mod;
     15e:	0501                	addi	a0,a0,0
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
     164:	0601                	addi	a2,a2,0
     166:	00090003          	lb	zero,0(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0xc0>
     16e:	06090b03          	lb	s6,96(s2)
            for (i = 0; i < ((length-1) / 3); i++) {
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0xa8>
     176:	04090003          	lb	zero,64(s2)
    asm volatile(
     17a:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
            a1[length-2] = a1[length-2] % mod;
     182:	0100                	addi	s0,sp,128
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
     188:	0104                	addi	s1,sp,128
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
} //end of function
     18e:	0004                	0x4
    asm volatile(
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
     194:	0402                	c.slli64	s0
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
            for (i = 0; i < (length / 3); i++) {
     19c:	0100                	addi	s0,sp,128
    asm volatile(
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0)
     1a4:	0501                	addi	a0,a0,0
     1a6:	061e                	slli	a2,a2,0x7
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	00090003          	lb	zero,0(s2)
    asm volatile(
     1ac:	0100                	addi	s0,sp,128
     1ae:	1a05                	addi	s4,s4,-31
     1b0:	0a090003          	lb	zero,160(s2)
     1b4:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	2505                	jal	7d6 <ext_euclid+0x10a>
     1b8:	08097703          	0x8097703
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1bc:	0100                	addi	s0,sp,128
     1be:	2905                	jal	5ee <polydiv+0xf2>
     1c0:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     1c4:	0100                	addi	s0,sp,128
     1c6:	1405                	addi	s0,s0,-31
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c8:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     1cc:	0100                	addi	s0,sp,128
     1ce:	1905                	addi	s2,s2,-31
     1d0:	0200                	addi	s0,sp,256
     1d2:	0104                	addi	s1,sp,128
     1d4:	0306                	slli	t1,t1,0x1
     1d6:	0900                	addi	s0,sp,144
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	0004                	0x4
     1da:	0501                	addi	a0,a0,0
    int pola[size_a];
     1dc:	000d                	c.nop	3
     1de:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0601                	addi	a2,a2,0
     1e2:	00090003          	lb	zero,0(s2)
     1e6:	0100                	addi	s0,sp,128
     1e8:	0306                	slli	t1,t1,0x1
     1ea:	00040903          	lb	s2,0(s0)
     1ee:	0501                	addi	a0,a0,0
     1f0:	061e                	slli	a2,a2,0x7
     1f2:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     1f6:	0100                	addi	s0,sp,128
     1f8:	0d05                	addi	s10,s10,1
    int line[size_b][size_a + size_b];
     1fa:	0306                	slli	t1,t1,0x1
     1fc:	00020907          	0x20907
    int pola[size_a];
     200:	0501                	addi	a0,a0,0
     202:	061e                	slli	a2,a2,0x7
    int polb[size_b];
     204:	00090003          	lb	zero,0(s2)
     208:	0100                	addi	s0,sp,128
    int pola[size_a];
     20a:	1a05                	addi	s4,s4,-31
    int polb[size_b];
     20c:	06090003          	lb	zero,96(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	0100                	addi	s0,sp,128
    int pola[size_a];
     212:	0605                	addi	a2,a2,1
     214:	0306                	slli	t1,t1,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	0901                	addi	s2,s2,0
    int line[size_b][size_a + size_b];
     218:	0004                	0x4
     21a:	0501                	addi	a0,a0,0
    int polb[size_b];
     21c:	0601                	addi	a2,a2,0
            line[i][j] = 0;
     21e:	00090203          	lb	tp,0(s2)
     222:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     224:	1105                	addi	sp,sp,-31
     226:	0200                	addi	s0,sp,256
            product[j] = 0;
     228:	0304                	addi	s1,sp,384
     22a:	0306                	slli	t1,t1,0x1
     22c:	0002096f          	jal	s2,2022c <_stack_start+0x1022c>
    for (i = 0; i < size_b; ++i){
     230:	0501                	addi	a0,a0,0
     232:	0005                	c.nop	1
    array_equ(pola,a,size_a);
     234:	0402                	c.slli64	s0
     236:	096e0303          	lb	t1,150(t3) # 1a096 <_stack_start+0xa096>
     23a:	0004                	0x4
     23c:	0001                	nop
     23e:	0402                	c.slli64	s0
     240:	09090303          	lb	t1,144(s2)
     244:	000a                	c.slli	zero,0x2
     246:	0501                	addi	a0,a0,0
     248:	0402002b          	0x402002b
    array_mod(pola,mod,size_a);
     24c:	09080303          	lb	t1,144(a6)
     250:	0000                	unimp
     252:	0501                	addi	a0,a0,0
    array_equ(polb,b,size_b);
     254:	002c                	addi	a1,sp,8
     256:	0402                	c.slli64	s0
     258:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     25c:	0009                	c.nop	2
     25e:	0100                	addi	s0,sp,128
    array_mod(polb,mod,size_b);
     260:	1105                	addi	sp,sp,-31
     262:	0200                	addi	s0,sp,256
     264:	0304                	addi	s1,sp,384
     266:	0306                	slli	t1,t1,0x1
    if(star_mult == 1){
     268:	0906                	slli	s2,s2,0x1
     26a:	0004                	0x4
     26c:	0501                	addi	a0,a0,0
     26e:	0005                	c.nop	1
     270:	0402                	c.slli64	s0
     272:	09690303          	lb	t1,150(s2)
     276:	0004                	0x4
     278:	0001                	nop
     27a:	0402                	c.slli64	s0
     27c:	09090303          	lb	t1,144(s2)
     280:	000a                	c.slli	zero,0x2
     282:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     284:	0402002f          	0x402002f
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	090d0303          	lb	t1,144(s10)
            product[j] = 0;
     28c:	0000                	unimp
     28e:	0501                	addi	a0,a0,0
     290:	0030                	addi	a2,sp,8
            line[i][j] = 0;
     292:	0402                	c.slli64	s0
     294:	00030603          	lb	a2,0(t1)
            product[j] = 0;
     298:	0009                	c.nop	2
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0100                	addi	s0,sp,128
     29c:	1105                	addi	sp,sp,-31
     29e:	0200                	addi	s0,sp,256
     2a0:	0304                	addi	s1,sp,384
    for (i = 0; i < size_b; ++i){
     2a2:	0306                	slli	t1,t1,0x1
     2a4:	00040907          	0x40907
     2a8:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	0005                	c.nop	1
     2ac:	0402                	c.slli64	s0
    if(star_mult == 1){
     2ae:	09630303          	lb	t1,150(t1)
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	0001                	nop
    for (i = 0; i < size_b; ++i){
     2b6:	0402                	c.slli64	s0
     2b8:	09090303          	lb	t1,144(s2)
     2bc:	000a                	c.slli	zero,0x2
     2be:	0501                	addi	a0,a0,0
     2c0:	0402002f          	0x402002f
    for(j = 0; j < size_a + size_b -1; ++j){
     2c4:	09130303          	lb	t1,145(t1)
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	0501                	addi	a0,a0,0
     2cc:	0030                	addi	a2,sp,8
     2ce:	0402                	c.slli64	s0
     2d0:	00030603          	lb	a2,0(t1)
     2d4:	0009                	c.nop	2
}
     2d6:	0100                	addi	s0,sp,128
     2d8:	3405                	jal	fffffcf8 <_stack_start+0xfffefcf8>
     2da:	0306                	slli	t1,t1,0x1
     2dc:	0909                	addi	s2,s2,2
     2de:	0004                	0x4
     2e0:	0501                	addi	a0,a0,0
     2e2:	0305                	addi	t1,t1,1
     2e4:	0902                	c.slli64	s2
     2e6:	0000                	unimp
     2e8:	0301                	addi	t1,t1,0
     2ea:	0909                	addi	s2,s2,2
     2ec:	0004                	0x4
     2ee:	0501                	addi	a0,a0,0
     2f0:	0601                	addi	a2,a2,0
     2f2:	00090103          	lb	sp,0(s2)
     2f6:	0100                	addi	s0,sp,128
     2f8:	2c05                	jal	528 <polydiv+0x2c>
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	0901                	addi	s2,s2,0
     2fe:	0002                	c.slli64	zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0501                	addi	a0,a0,0
     302:	0301                	addi	t1,t1,0
     304:	0905                	addi	s2,s2,1
     306:	0000                	unimp
     308:	0501                	addi	a0,a0,0
     30a:	0305                	addi	t1,t1,1
     30c:	0902                	c.slli64	s2
     30e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	0501                	addi	a0,a0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	0612                	slli	a2,a2,0x4
     314:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	0100                	addi	s0,sp,128
     31a:	0505                	addi	a0,a0,1
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	06090003          	lb	zero,96(s2)
     320:	0100                	addi	s0,sp,128
     322:	2505                	jal	942 <generate_keys+0x62>
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	0e090303          	lb	t1,224(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	0100                	addi	s0,sp,128
     32a:	0505                	addi	a0,a0,1
     32c:	04096b03          	0x4096b03
     330:	0100                	addi	s0,sp,128
     332:	1905                	addi	s2,s2,-31
     334:	0200                	addi	s0,sp,256
     336:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0915                	addi	s2,s2,5
     33c:	0002                	c.slli64	zero
     33e:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	000d                	c.nop	3
     342:	0402                	c.slli64	s0
        for (j = size_b -1; j >= 0; j = j-1){
     344:	0601                	addi	a2,a2,0
     346:	00090003          	lb	zero,0(s2)
     34a:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     34c:	2505                	jal	96c <generate_keys+0x8c>
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	06090b03          	lb	s6,96(s2)
            line[i][j] = line[i][j] % mod;
     352:	0100                	addi	s0,sp,128
     354:	2905                	jal	784 <ext_euclid+0xb8>
     356:	04090003          	lb	zero,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	0100                	addi	s0,sp,128
     35c:	1405                	addi	s0,s0,-31
    for (i = 0; i < size_b; ++i){
     35e:	04090003          	lb	zero,64(s2)
     362:	0100                	addi	s0,sp,128
     364:	0505                	addi	a0,a0,1
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	02096003          	0x2096003
            product[j] += line[i][j];
     36a:	0100                	addi	s0,sp,128
     36c:	1905                	addi	s2,s2,-31
     36e:	0306                	slli	t1,t1,0x1
        for(i = 0; i < size_b; ++i){
     370:	0920                	addi	s0,sp,152
            product[j] += line[i][j];
     372:	0002                	c.slli64	zero
     374:	0501                	addi	a0,a0,0
     376:	060d                	addi	a2,a2,3
     378:	00090003          	lb	zero,0(s2)
     37c:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     37e:	0306                	slli	t1,t1,0x1
     380:	00040903          	lb	s2,0(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     384:	0501                	addi	a0,a0,0
     386:	061e                	slli	a2,a2,0x7
        for(i = 0; i < size_b; ++i){
     388:	00090003          	lb	zero,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     38e:	2905                	jal	7be <ext_euclid+0xf2>
     390:	08090003          	lb	zero,128(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     394:	0100                	addi	s0,sp,128
     396:	1a05                	addi	s4,s4,-31
     398:	06090003          	lb	zero,96(s2)
    int line[size_b][size_a + size_b];
     39c:	0100                	addi	s0,sp,128
     39e:	2505                	jal	9be <generate_keys+0xde>
     3a0:	04097703          	0x4097703
     3a4:	0100                	addi	s0,sp,128
     3a6:	2905                	jal	7d6 <ext_euclid+0x10a>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	04090003          	lb	zero,64(s2)
     3ac:	0100                	addi	s0,sp,128
     3ae:	1405                	addi	s0,s0,-31
     3b0:	04090003          	lb	zero,64(s2)
     3b4:	0100                	addi	s0,sp,128
     3b6:	0505                	addi	a0,a0,1
     3b8:	02096603          	0x2096603
     3bc:	0100                	addi	s0,sp,128
     3be:	1905                	addi	s2,s2,-31
    int line[size_b][size_a + size_b];
     3c0:	0200                	addi	s0,sp,256
     3c2:	0104                	addi	s1,sp,128
     3c4:	0306                	slli	t1,t1,0x1
    int pola[size_a];
     3c6:	091a                	slli	s2,s2,0x6
     3c8:	0002                	c.slli64	zero
     3ca:	0501                	addi	a0,a0,0
     3cc:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     3ce:	0402                	c.slli64	s0
    int pola[size_a];
     3d0:	0601                	addi	a2,a2,0
     3d2:	00090003          	lb	zero,0(s2)
    int polb[size_b];
     3d6:	0100                	addi	s0,sp,128
     3d8:	0306                	slli	t1,t1,0x1
    int pola[size_a];
     3da:	00040903          	lb	s2,0(s0)
    int polb[size_b];
     3de:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	061e                	slli	a2,a2,0x7
     3e2:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     3e6:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	0d05                	addi	s10,s10,1
    int pola[size_a];
     3ea:	0306                	slli	t1,t1,0x1
     3ec:	00020907          	0x20907
    for (i = 0; i < size_b; ++i){
     3f0:	0501                	addi	a0,a0,0
     3f2:	061e                	slli	a2,a2,0x7
     3f4:	00090003          	lb	zero,0(s2)
            product2[j] = 0;
     3f8:	0100                	addi	s0,sp,128
     3fa:	2905                	jal	82a <ext_euclid+0x15e>
     3fc:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size_b; ++i){
     400:	0100                	addi	s0,sp,128
    array_equ(pola,a,size_a);
     402:	1a05                	addi	s4,s4,-31
     404:	06090003          	lb	zero,96(s2)
     408:	0100                	addi	s0,sp,128
     40a:	0605                	addi	a2,a2,1
     40c:	0306                	slli	t1,t1,0x1
    array_equ(polb,b,size_b);
     40e:	0901                	addi	s2,s2,0
     410:	0002                	c.slli64	zero
     412:	0501                	addi	a0,a0,0
     414:	0601                	addi	a2,a2,0
     416:	00090203          	lb	tp,0(s2)
    if(star_mult == 1){
     41a:	0100                	addi	s0,sp,128
     41c:	1105                	addi	sp,sp,-31
     41e:	0200                	addi	s0,sp,256
     420:	0304                	addi	s1,sp,384
     422:	0306                	slli	t1,t1,0x1
     424:	0002096f          	jal	s2,20424 <_stack_start+0x10424>
     428:	0501                	addi	a0,a0,0
     42a:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	0402                	c.slli64	s0
     42e:	096a0303          	lb	t1,150(s4) # 17096 <_stack_start+0x7096>
            for (k = size_a-1; k >= 0; k = k-1 ){
     432:	0000                	unimp
            product2[j] = 0;
     434:	0001                	nop
     436:	0402                	c.slli64	s0
     438:	09090303          	lb	t1,144(s2)
            line[i][j] = 0;
     43c:	000a                	c.slli	zero,0x2
            product2[j] = 0;
     43e:	0501                	addi	a0,a0,0
     440:	0402002b          	0x402002b
        for(j = 0; j < size_a + size_b -1; ++j){
     444:	090c0303          	lb	t1,144(s8) # 19090 <_stack_start+0x9090>
     448:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     44a:	0501                	addi	a0,a0,0
     44c:	002c                	addi	a1,sp,8
     44e:	0402                	c.slli64	s0
     450:	00030603          	lb	a2,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     454:	0009                	c.nop	2
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	0100                	addi	s0,sp,128
     458:	1105                	addi	sp,sp,-31
     45a:	0200                	addi	s0,sp,256
     45c:	0304                	addi	s1,sp,384
     45e:	0306                	slli	t1,t1,0x1
     460:	0906                	slli	s2,s2,0x1
     462:	0004                	0x4
     464:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	0005                	c.nop	1
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	0402                	c.slli64	s0
     46a:	09650303          	lb	t1,150(a0) # 19096 <_stack_start+0x9096>
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	0000                	unimp
     470:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     472:	0402                	c.slli64	s0
     474:	09090303          	lb	t1,144(s2)
     478:	000a                	c.slli	zero,0x2
     47a:	0501                	addi	a0,a0,0
        for(j=0;j<size_a+size_b-1;++j){
     47c:	0402002f          	0x402002f
    for(i=0;i<size_b;++i){
     480:	09110303          	lb	t1,145(sp)
     484:	0000                	unimp
     486:	0501                	addi	a0,a0,0
     488:	0030                	addi	a2,sp,8
     48a:	0402                	c.slli64	s0
        for(j=0;j<size_a+size_b-1;++j){
     48c:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	0009                	c.nop	2
     492:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	1105                	addi	sp,sp,-31
     496:	0306                	slli	t1,t1,0x1
     498:	00040907          	0x40907
     49c:	0501                	addi	a0,a0,0
     49e:	0305                	addi	t1,t1,1
     4a0:	095f 0000 0301      	0x3010000095f
     4a6:	0909                	addi	s2,s2,2
     4a8:	000a                	c.slli	zero,0x2
     4aa:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	0917032f          	0x917032f
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	0000                	unimp
     4b2:	0501                	addi	a0,a0,0
     4b4:	0630                	addi	a2,sp,776
     4b6:	00090003          	lb	zero,0(s2)
            product2[j] += line[i][j];
     4ba:	0100                	addi	s0,sp,128
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	4e05                	li	t3,1
     4be:	0306                	slli	t1,t1,0x1
            product2[j] += line[i][j];
     4c0:	090e                	slli	s2,s2,0x3
     4c2:	0004                	0x4
     4c4:	0501                	addi	a0,a0,0
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	0305                	addi	t1,t1,1
     4c8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    for(i=0;i<size_b;++i){
     4cc:	0501                	addi	a0,a0,0
     4ce:	064e                	slli	a2,a2,0x13
     4d0:	00097d03          	0x97d03
}
     4d4:	0100                	addi	s0,sp,128
     4d6:	1d05                	addi	s10,s10,-31
     4d8:	08090303          	lb	t1,128(s2)
     4dc:	0100                	addi	s0,sp,128
     4de:	4e05                	li	t3,1
     4e0:	06097d03          	0x6097d03
     4e4:	0100                	addi	s0,sp,128
     4e6:	0905                	addi	s2,s2,1
     4e8:	04090303          	lb	t1,64(s2)
     4ec:	0100                	addi	s0,sp,128
     4ee:	4e05                	li	t3,1
     4f0:	0c097d03          	0xc097d03
     4f4:	0100                	addi	s0,sp,128
     4f6:	0905                	addi	s2,s2,1
     4f8:	04090603          	lb	a2,64(s2)
    int v[size_N];
     4fc:	0100                	addi	s0,sp,128
     4fe:	4e05                	li	t3,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	04097a03          	0x4097a03
     504:	0100                	addi	s0,sp,128
     506:	0905                	addi	s2,s2,1
     508:	0c090303          	lb	t1,192(s2)
     50c:	0100                	addi	s0,sp,128
     50e:	4e05                	li	t3,1
     510:	02097d03          	0x2097d03
     514:	0100                	addi	s0,sp,128
     516:	0905                	addi	s2,s2,1
     518:	06090303          	lb	t1,96(s2)
     51c:	0100                	addi	s0,sp,128
    int v[size_N];
     51e:	02090303          	lb	t1,32(s2)
     522:	0100                	addi	s0,sp,128
     524:	4e05                	li	t3,1
     526:	04097a03          	0x4097a03
    int q[size_N];
     52a:	0100                	addi	s0,sp,128
     52c:	0905                	addi	s2,s2,1
    int num_temp[size_N];
     52e:	00090303          	lb	t1,0(s2)
    int denum_temp[size_D];
     532:	0100                	addi	s0,sp,128
     534:	06090303          	lb	t1,96(s2)
     538:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     53a:	04090103          	lb	sp,64(s2)
    int denum_temp[size_D];
     53e:	0100                	addi	s0,sp,128
     540:	06097f03          	0x6097f03
    int v[size_N];
     544:	0100                	addi	s0,sp,128
     546:	02090103          	lb	sp,32(s2)
       array_equ(num_temp,num,size_N);
     54a:	0100                	addi	s0,sp,128
     54c:	4e05                	li	t3,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	04097903          	0x4097903
    int denum_temp[size_D];
     552:	0100                	addi	s0,sp,128
     554:	0905                	addi	s2,s2,1
       array_equ(num_temp,num,size_N);
     556:	02090603          	lb	a2,32(s2)
       array_mod(num_temp, mod, size_N);
     55a:	0100                	addi	s0,sp,128
     55c:	4e05                	li	t3,1
     55e:	04097a03          	0x4097a03
    array_equ(denum_temp,denum,size_D);
     562:	0100                	addi	s0,sp,128
     564:	0905                	addi	s2,s2,1
     566:	02090303          	lb	t1,32(s2)
    array_mod(denum_temp,mod,size_D);
     56a:	0100                	addi	s0,sp,128
     56c:	0505                	addi	a0,a0,1
     56e:	0306                	slli	t1,t1,0x1
     570:	0901                	addi	s2,s2,0
    for (i = 0; i < size_N; ++i){
     572:	0004                	0x4
     574:	0301                	addi	t1,t1,0
     576:	0901                	addi	s2,s2,0
    for (i = size_D-1; i >= 0; i = i-1){
     578:	0000                	unimp
     57a:	0301                	addi	t1,t1,0
     57c:	0901                	addi	s2,s2,0
     57e:	0000                	unimp
     580:	0301                	addi	t1,t1,0
     582:	0901                	addi	s2,s2,0
    for (i = 0; i < size_N; ++i){
     584:	0000                	unimp
     586:	0501                	addi	a0,a0,0
        if ( (b_N*u)%mod == 1 )
     588:	0609                	addi	a2,a2,2
    for (u = 0; u < mod; ++u){
     58a:	00090003          	lb	zero,0(s2)
     58e:	0100                	addi	s0,sp,128
     590:	0505                	addi	a0,a0,1
        q[i] = 0;
     592:	0306                	slli	t1,t1,0x1
     594:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     598:	0501                	addi	a0,a0,0
        v[i] = 0;
     59a:	0614                	addi	a3,sp,768
        q[i] = 0;
     59c:	00090203          	lb	tp,0(s2)
        v[i] = 0;
     5a0:	0100                	addi	s0,sp,128
     5a2:	0505                	addi	a0,a0,1
    for (i = 0; i < size_N; ++i){
     5a4:	06097e03          	0x6097e03
        if( denum_temp[i] != 0 )
     5a8:	0100                	addi	s0,sp,128
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	0c05                	addi	s8,s8,1
     5ac:	02090003          	lb	zero,32(s2)
        if ( (b_N*u)%mod == 1 )
     5b0:	0100                	addi	s0,sp,128
     5b2:	1805                	addi	a6,a6,-31
     5b4:	02090303          	lb	t1,32(s2)
    for (u = 0; u < mod; ++u){
     5b8:	0100                	addi	s0,sp,128
     5ba:	1105                	addi	sp,sp,-31
        if( num_temp[i] != 0 )
     5bc:	0200                	addi	s0,sp,256
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	0104                	addi	s1,sp,128
     5c0:	0306                	slli	t1,t1,0x1
     5c2:	097d                	addi	s2,s2,31
     5c4:	0008                	0x8
     5c6:	0501                	addi	a0,a0,0
     5c8:	0005                	c.nop	1
     5ca:	0402                	c.slli64	s0
    while (d >= d2){
     5cc:	0601                	addi	a2,a2,0
     5ce:	00090003          	lb	zero,0(s2)
    array_equ(result,q,size_N);
     5d2:	0100                	addi	s0,sp,128
     5d4:	04090f03          	lb	t5,64(s2)
     5d8:	0100                	addi	s0,sp,128
     5da:	0306                	slli	t1,t1,0x1
     5dc:	0900                	addi	s0,sp,144
    for(i = size_N; i < (2*size_N); ++i){
     5de:	0012                	c.slli	zero,0x4
     5e0:	0301                	addi	t1,t1,0
        result[i] = num_temp[i-size_N];
     5e2:	0901                	addi	s2,s2,0
     5e4:	0006                	c.slli	zero,0x1
     5e6:	0301                	addi	t1,t1,0
     5e8:	0909                	addi	s2,s2,2
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	0008                	0x8
     5ec:	0301                	addi	t1,t1,0
}
     5ee:	0901                	addi	s2,s2,0
     5f0:	000c                	0xc
     5f2:	0301                	addi	t1,t1,0
     5f4:	0904                	addi	s1,sp,144
     5f6:	0008                	0x8
     5f8:	0501                	addi	a0,a0,0
     5fa:	00030607          	0x30607
     5fe:	0009                	c.nop	2
     600:	0100                	addi	s0,sp,128
     602:	1d05                	addi	s10,s10,-31
     604:	0200                	addi	s0,sp,256
     606:	0104                	addi	s1,sp,128
     608:	0306                	slli	t1,t1,0x1
     60a:	0908                	addi	a0,sp,144
     60c:	001c                	0x1c
     60e:	0501                	addi	a0,a0,0
     610:	0009                	c.nop	2
     612:	0402                	c.slli64	s0
     614:	0601                	addi	a2,a2,0
     616:	00090003          	lb	zero,0(s2)
        v[(d-d2)] = u*r_d;
     61a:	0100                	addi	s0,sp,128
     61c:	1405                	addi	s0,s0,-31
     61e:	04090103          	lb	sp,64(s2)
     622:	0100                	addi	s0,sp,128
        array_mod(v, mod, size_N);
     624:	0d05                	addi	s10,s10,1
     626:	0200                	addi	s0,sp,256
     628:	0304                	addi	s1,sp,384
        v[(d-d2)] = u*r_d;
     62a:	0306                	slli	t1,t1,0x1
        array_mod(v, mod, size_N);
     62c:	0004095b          	0x4095b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     630:	0501                	addi	a0,a0,0
     632:	0018                	0x18
     634:	0402                	c.slli64	s0
     636:	01030603          	lb	a2,16(t1)
     63a:	0009                	c.nop	2
        array_mod(product, mod, size_N);
     63c:	0100                	addi	s0,sp,128
     63e:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0304                	addi	s1,sp,384
        array_mod(product, mod, size_N);
     642:	06097f03          	0x6097f03
        for (i = 0; i < size_N; ++i){
     646:	0100                	addi	s0,sp,128
     648:	0d05                	addi	s10,s10,1
     64a:	0200                	addi	s0,sp,256
	array_mod(num_temp, mod, size_N);
     64c:	0304                	addi	s1,sp,384
     64e:	0306                	slli	t1,t1,0x1
     650:	0901                	addi	s2,s2,0
     652:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     654:	0501                	addi	a0,a0,0
     656:	0018                	0x18
     658:	0402                	c.slli64	s0
     65a:	00030603          	lb	a2,0(t1)
        array_mod(q, mod, size_N);
     65e:	0009                	c.nop	2
     660:	0100                	addi	s0,sp,128
     662:	2c05                	jal	892 <ext_euclid+0x1c6>
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0200                	addi	s0,sp,256
     666:	0304                	addi	s1,sp,384
     668:	0306                	slli	t1,t1,0x1
     66a:	097e                	slli	s2,s2,0x1f
     66c:	0004                	0x4
     66e:	0501                	addi	a0,a0,0
     670:	0014                	0x14
     672:	0402                	c.slli64	s0
     674:	0301                	addi	t1,t1,0
            num_temp[i] = num_temp[i] - product[i];
     676:	0900                	addi	s0,sp,144
     678:	0004                	0x4
     67a:	0501                	addi	a0,a0,0
     67c:	0009                	c.nop	2
     67e:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     680:	0601                	addi	a2,a2,0
     682:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     686:	0100                	addi	s0,sp,128
     688:	1d05                	addi	s10,s10,-31
        for (i = 0; i < size_N; ++i){
     68a:	0200                	addi	s0,sp,256
            q[i] = q[i] + v[i];
     68c:	0204                	addi	s1,sp,256
     68e:	0306                	slli	t1,t1,0x1
     690:	097f                	0x97f
     692:	0004                	0x4
     694:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     696:	0103060f          	0x103060f
            q[i] = q[i] + v[i];
     69a:	0809                	addi	a6,a6,2
     69c:	0100                	addi	s0,sp,128
     69e:	0705                	addi	a4,a4,1
        for(i = 0; i < size_N; ++i){
     6a0:	04091d03          	lh	s10,64(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	0100                	addi	s0,sp,128
     6a6:	1d05                	addi	s10,s10,-31
            v[i] = 0;
     6a8:	0200                	addi	s0,sp,256
     6aa:	0104                	addi	s1,sp,128
     6ac:	0306                	slli	t1,t1,0x1
     6ae:	0901                	addi	s2,s2,0
     6b0:	0002                	c.slli64	zero
        for (i = 0; i < size_N; ++i){
     6b2:	0501                	addi	a0,a0,0
     6b4:	0009                	c.nop	2
     6b6:	0402                	c.slli64	s0
     6b8:	0601                	addi	a2,a2,0
        result[i] = num_temp[i-size_N];
     6ba:	00090003          	lb	zero,0(s2)
     6be:	0100                	addi	s0,sp,128
     6c0:	0f05                	addi	t5,t5,1
     6c2:	04091003          	lh	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0100                	addi	s0,sp,128
     6c8:	1105                	addi	sp,sp,-31
     6ca:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6cc:	0104                	addi	s1,sp,128
     6ce:	0306                	slli	t1,t1,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	097f                	0x97f
    int ri_2[size]; // MX-ring poly, a
     6d2:	0002                	c.slli64	zero
     6d4:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	0005                	c.nop	1
     6d8:	0402                	c.slli64	s0
     6da:	0601                	addi	a2,a2,0
     6dc:	00090003          	lb	zero,0(s2)
     6e0:	0100                	addi	s0,sp,128
     6e2:	0b05                	addi	s6,s6,1
     6e4:	0c090703          	lb	a4,192(s2)
     6e8:	0100                	addi	s0,sp,128
     6ea:	1005                	c.nop	-31
     6ec:	0200                	addi	s0,sp,256
     6ee:	0104                	addi	s1,sp,128
     6f0:	0306                	slli	t1,t1,0x1
    int ri_2[size]; // MX-ring poly, a
     6f2:	0900                	addi	s0,sp,144
     6f4:	0002                	c.slli64	zero
     6f6:	0501                	addi	a0,a0,0
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	0005                	c.nop	1
     6fa:	0402                	c.slli64	s0
     6fc:	0601                	addi	a2,a2,0
    int ri[size];
     6fe:	00090003          	lb	zero,0(s2)
     702:	0100                	addi	s0,sp,128
    int ti_1[size]; // ti_1[0] = 1
     704:	0306                	slli	t1,t1,0x1
     706:	0004090b          	0x4090b
    int ti[size];
     70a:	0301                	addi	t1,t1,0
     70c:	0902                	c.slli64	s2
     70e:	000e                	c.slli	zero,0x3
    int qi_1[size];
     710:	0301                	addi	t1,t1,0
     712:	0902                	c.slli64	s2
     714:	0000                	unimp
    int temp[size];
     716:	0501                	addi	a0,a0,0
     718:	0601                	addi	a2,a2,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	00090103          	lb	sp,0(s2)
     71e:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     720:	1105                	addi	sp,sp,-31
     722:	0200                	addi	s0,sp,256
    int temp[size];
     724:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     726:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     728:	095c                	addi	a5,sp,148
     72a:	002a                	c.slli	zero,0xa
     72c:	0501                	addi	a0,a0,0
     72e:	0025                	c.nop	9
    for (i = 0; i < size; ++i) {
     730:	0402                	c.slli64	s0
     732:	00030603          	lb	a2,0(t1)
    array_equ(ri_2,polyR,size);
     736:	0409                	addi	s0,s0,2
     738:	0100                	addi	s0,sp,128
     73a:	2b05                	jal	c6a <ntru_deceypt+0x4>
    array_equ(ri_1,polyf,size);
     73c:	0200                	addi	s0,sp,256
     73e:	0304                	addi	s1,sp,384
     740:	04090003          	lb	zero,64(s2)
    ti_1[0] = 1;
     744:	0100                	addi	s0,sp,128
     746:	2e05                	jal	a76 <generate_keys+0x196>
     748:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	0304                	addi	s1,sp,384
     74c:	02090003          	lb	zero,32(s2)
     750:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     752:	2a05                	jal	882 <ext_euclid+0x1b6>
     754:	0200                	addi	s0,sp,256
     756:	0304                	addi	s1,sp,384
     758:	06097f03          	0x6097f03
    array_mod(ri_2,mod,size);
     75c:	0100                	addi	s0,sp,128
     75e:	2e05                	jal	a8e <generate_keys+0x1ae>
     760:	0200                	addi	s0,sp,256
    array_mod(ri_1,mod,size);
     762:	0304                	addi	s1,sp,384
     764:	02090103          	lb	sp,32(s2)
     768:	0100                	addi	s0,sp,128
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	2505                	jal	d8a <zero_loop>
     76c:	0200                	addi	s0,sp,256
     76e:	0304                	addi	s1,sp,384
     770:	04090003          	lb	zero,64(s2)
     774:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	2805                	jal	7a6 <ext_euclid+0xda>
     778:	0200                	addi	s0,sp,256
     77a:	0304                	addi	s1,sp,384
     77c:	0306                	slli	t1,t1,0x1
     77e:	097f                	0x97f
     780:	0002                	c.slli64	zero
     782:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     784:	0020                	addi	s0,sp,8
     786:	0402                	c.slli64	s0
     788:	0301                	addi	t1,t1,0
    array_mod(temp,mod,size);
     78a:	0900                	addi	s0,sp,144
     78c:	0000                	unimp
     78e:	0501                	addi	a0,a0,0
     790:	000d                	c.nop	3
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	0402                	c.slli64	s0
     794:	0601                	addi	a2,a2,0
     796:	00090003          	lb	zero,0(s2)
     79a:	0100                	addi	s0,sp,128
     79c:	2505                	jal	dbc <memcpy+0x1c>
     79e:	0200                	addi	s0,sp,256
    array_equ(qi_1,res1,size);
     7a0:	0204                	addi	s1,sp,256
     7a2:	0306                	slli	t1,t1,0x1
     7a4:	097f                	0x97f
    array_mod(qi_1,mod,size);
     7a6:	0004                	0x4
     7a8:	0501                	addi	a0,a0,0
     7aa:	04020027          	0x4020027
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	0602                	c.slli64	a2
     7b0:	00090003          	lb	zero,0(s2)
     7b4:	0100                	addi	s0,sp,128
     7b6:	1405                	addi	s0,s0,-31
     7b8:	08090103          	lb	sp,128(s2)
     7bc:	0100                	addi	s0,sp,128
    array_equ(temp,res2,size);
     7be:	1105                	addi	sp,sp,-31
     7c0:	0200                	addi	s0,sp,256
     7c2:	0304                	addi	s1,sp,384
    array_mod(temp,mod,size);
     7c4:	0306                	slli	t1,t1,0x1
     7c6:	0908                	addi	a0,sp,144
     7c8:	0004                	0x4
     7ca:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7cc:	0029                	c.nop	10
     7ce:	0402                	c.slli64	s0
     7d0:	00030603          	lb	a2,0(t1)
    array_mod(ti,mod,size);
     7d4:	0409                	addi	s0,s0,2
     7d6:	0100                	addi	s0,sp,128
     7d8:	2f05                	jal	f08 <memset+0x8a>
     7da:	0200                	addi	s0,sp,256
array_equ(ri_2,ri_1,size);
     7dc:	0304                	addi	s1,sp,384
     7de:	04090003          	lb	zero,64(s2)
     7e2:	0100                	addi	s0,sp,128
array_equ(ri_1,ri,size);
     7e4:	3205                	jal	104 <array_equ+0x72>
     7e6:	0200                	addi	s0,sp,256
     7e8:	0304                	addi	s1,sp,384
     7ea:	02090003          	lb	zero,32(s2)
array_equ(ti_2,ti_1,size);
     7ee:	0100                	addi	s0,sp,128
     7f0:	2a05                	jal	920 <generate_keys+0x40>
     7f2:	0200                	addi	s0,sp,256
array_equ(ti_1,ti,size);
     7f4:	0304                	addi	s1,sp,384
     7f6:	06097f03          	0x6097f03
     7fa:	0100                	addi	s0,sp,128
        controlR = 0;
     7fc:	3205                	jal	11c <array_equ+0x8a>
        for (i = 0; i < N + 1; ++i) {
     7fe:	0200                	addi	s0,sp,256
     800:	0304                	addi	s1,sp,384
     802:	02090103          	lb	sp,32(s2)
    while (controlR != 0) {
     806:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     808:	2905                	jal	c38 <ntru_encyrpt+0x66>
            if (((ri_2[0] * j) % mod) == 1)
     80a:	0200                	addi	s0,sp,256
        for (j = 0; j < mod; ++j) {
     80c:	0304                	addi	s1,sp,384
     80e:	04090003          	lb	zero,64(s2)
     812:	0100                	addi	s0,sp,128
     814:	2805                	jal	844 <ext_euclid+0x178>
     816:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     818:	0304                	addi	s1,sp,384
     81a:	0306                	slli	t1,t1,0x1
    }
     81c:	097f                	0x97f
     81e:	0002                	c.slli64	zero
     820:	0501                	addi	a0,a0,0
     822:	0020                	addi	s0,sp,8
     824:	0402                	c.slli64	s0
     826:	0301                	addi	t1,t1,0
     828:	0900                	addi	s0,sp,144
     82a:	0000                	unimp
     82c:	0501                	addi	a0,a0,0
     82e:	000d                	c.nop	3
     830:	0402                	c.slli64	s0
     832:	0601                	addi	a2,a2,0
     834:	00090003          	lb	zero,0(s2)
     838:	0100                	addi	s0,sp,128
     83a:	2505                	jal	e5a <memcpy+0xba>
     83c:	0200                	addi	s0,sp,256
     83e:	0204                	addi	s1,sp,256
     840:	0306                	slli	t1,t1,0x1
     842:	097f                	0x97f
     844:	0004                	0x4
        ti_2[i] = 0;
     846:	0501                	addi	a0,a0,0
     848:	04020027          	0x4020027
     84c:	0602                	c.slli64	a2
        ti_1[i] = 0;
     84e:	00090003          	lb	zero,0(s2)
        ti_2[i] = 0;
     852:	0100                	addi	s0,sp,128
        ti_1[i] = 0;
     854:	0d05                	addi	s10,s10,1
     856:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     858:	0304                	addi	s1,sp,384
     85a:	0306                	slli	t1,t1,0x1
            ri[i - (N + 1)] = res[i];
     85c:	090a                	slli	s2,s2,0x2
     85e:	0008                	0x8
     860:	0501                	addi	a0,a0,0
     862:	0025                	c.nop	9
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0402                	c.slli64	s0
     866:	00030603          	lb	a2,0(t1)
            ri[i - (N + 1)] = res[i];
     86a:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     86e:	2c05                	jal	a9e <generate_keys+0x1be>
     870:	0200                	addi	s0,sp,256
     872:	0304                	addi	s1,sp,384
     874:	02097f03          	0x2097f03
     878:	0100                	addi	s0,sp,128
     87a:	2505                	jal	e9a <memset+0x1c>
     87c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     87e:	0304                	addi	s1,sp,384
            temp[i] = ri_2[i] - ri[i];
     880:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     884:	0100                	addi	s0,sp,128
     886:	1805                	addi	a6,a6,-31
            ti[i] = ti_2[i] - temp[i];
     888:	0200                	addi	s0,sp,256
     88a:	0304                	addi	s1,sp,384
     88c:	04090003          	lb	zero,64(s2)
     890:	0100                	addi	s0,sp,128
     892:	2c05                	jal	ac2 <generate_keys+0x1e2>
     894:	0200                	addi	s0,sp,256
     896:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     898:	0306                	slli	t1,t1,0x1
            ti[i] = ti_2[i] - temp[i];
     89a:	097f                	0x97f
     89c:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     89e:	0501                	addi	a0,a0,0
     8a0:	0014                	0x14
              qi_1[i] = 0;
     8a2:	0402                	c.slli64	s0
     8a4:	0301                	addi	t1,t1,0
     8a6:	0900                	addi	s0,sp,144
     8a8:	0000                	unimp
            controlR += ri[i];
     8aa:	0501                	addi	a0,a0,0
     8ac:	0009                	c.nop	2
              qi_1[i] = 0;
     8ae:	0402                	c.slli64	s0
     8b0:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     8b2:	00090003          	lb	zero,0(s2)
     8b6:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	1d05                	addi	s10,s10,-31
     8ba:	0200                	addi	s0,sp,256
     8bc:	0204                	addi	s1,sp,256
     8be:	0306                	slli	t1,t1,0x1
     8c0:	097f                	0x97f
     8c2:	0004                	0x4
     8c4:	0501                	addi	a0,a0,0
     8c6:	0103060f          	0x103060f
        for (j = 0; j < mod; ++j) {
     8ca:	0809                	addi	a6,a6,2
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8ce:	0d05                	addi	s10,s10,1
     8d0:	0200                	addi	s0,sp,256
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	0304                	addi	s1,sp,384
     8d4:	0306                	slli	t1,t1,0x1
     8d6:	0908                	addi	a0,sp,144
     8d8:	0004                	0x4
     8da:	0501                	addi	a0,a0,0
     8dc:	0022                	c.slli	zero,0x8
        for (i = 0; i < N + 1; ++i) {
     8de:	0402                	c.slli64	s0
int* generate_keys(int N, int p, int q){
     8e0:	00030603          	lb	a2,0(t1)
     8e4:	0009                	c.nop	2
     8e6:	0100                	addi	s0,sp,128
     8e8:	1805                	addi	a6,a6,-31
     8ea:	0200                	addi	s0,sp,256
     8ec:	0304                	addi	s1,sp,384
     8ee:	04090003          	lb	zero,64(s2)
     8f2:	0100                	addi	s0,sp,128
     8f4:	2005                	jal	914 <generate_keys+0x34>
     8f6:	0200                	addi	s0,sp,256
     8f8:	0304                	addi	s1,sp,384
     8fa:	02097f03          	0x2097f03
     8fe:	0100                	addi	s0,sp,128
     900:	2205                	jal	a20 <generate_keys+0x140>
     902:	0200                	addi	s0,sp,256
     904:	0304                	addi	s1,sp,384
     906:	02090103          	lb	sp,32(s2)
     90a:	0100                	addi	s0,sp,128
     90c:	1805                	addi	a6,a6,-31
     90e:	0200                	addi	s0,sp,256
     910:	0304                	addi	s1,sp,384
     912:	06090003          	lb	zero,96(s2)
     916:	0100                	addi	s0,sp,128
     918:	2005                	jal	938 <generate_keys+0x58>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     91a:	0200                	addi	s0,sp,256
     91c:	0304                	addi	s1,sp,384
     91e:	0306                	slli	t1,t1,0x1
     920:	097f                	0x97f
     922:	0006                	c.slli	zero,0x1
     924:	0501                	addi	a0,a0,0
     926:	0014                	0x14
     928:	0402                	c.slli64	s0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     92a:	0301                	addi	t1,t1,0
     92c:	0900                	addi	s0,sp,144
     92e:	0000                	unimp
     930:	0501                	addi	a0,a0,0
     932:	0009                	c.nop	2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	0402                	c.slli64	s0
     936:	0601                	addi	a2,a2,0
     938:	00090003          	lb	zero,0(s2)
     93c:	0100                	addi	s0,sp,128
     93e:	2805                	jal	96e <generate_keys+0x8e>
     940:	0200                	addi	s0,sp,256
     942:	0204                	addi	s1,sp,256
     944:	0306                	slli	t1,t1,0x1
     946:	097f                	0x97f
     948:	0004                	0x4
     94a:	0501                	addi	a0,a0,0
     94c:	0103060f          	0x103060f
     950:	0609                	addi	a2,a2,2
     952:	0100                	addi	s0,sp,128
     954:	4605                	li	a2,1
     956:	0306                	slli	t1,t1,0x1
     958:	0911                	addi	s2,s2,4
     95a:	0004                	0x4
     95c:	0501                	addi	a0,a0,0
     95e:	0305                	addi	t1,t1,1
     960:	0902                	c.slli64	s2
     962:	0000                	unimp
     964:	0501                	addi	a0,a0,0
     966:	0646                	slli	a2,a2,0x11
     968:	00097e03          	0x97e03
     96c:	0100                	addi	s0,sp,128
     96e:	1d05                	addi	s10,s10,-31
     970:	02090203          	lb	tp,32(s2)
     974:	0100                	addi	s0,sp,128
     976:	4605                	li	a2,1
     978:	04097e03          	0x4097e03
     97c:	0100                	addi	s0,sp,128
     97e:	0905                	addi	s2,s2,1
     980:	0a090203          	lb	tp,160(s2)
     984:	0100                	addi	s0,sp,128
     986:	4605                	li	a2,1
     988:	0c097e03          	0xc097e03
     98c:	0100                	addi	s0,sp,128
     98e:	0905                	addi	s2,s2,1
     990:	12090203          	lb	tp,288(s2)
     994:	0100                	addi	s0,sp,128
     996:	4605                	li	a2,1
     998:	02097e03          	0x2097e03
     99c:	0100                	addi	s0,sp,128
     99e:	0905                	addi	s2,s2,1
    int polyR[N+1];
     9a0:	04090203          	lb	tp,64(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9a4:	0100                	addi	s0,sp,128
    int polyR[N+1];
     9a6:	4605                	li	a2,1
     9a8:	02097e03          	0x2097e03
     9ac:	0100                	addi	s0,sp,128
     9ae:	0905                	addi	s2,s2,1
     9b0:	00090203          	lb	tp,0(s2)
    polyR[N] = 1;
     9b4:	0100                	addi	s0,sp,128
     9b6:	04090303          	lb	t1,64(s2)
     9ba:	0100                	addi	s0,sp,128
     9bc:	08097d03          	0x8097d03
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9c0:	0100                	addi	s0,sp,128
     9c2:	02090303          	lb	t1,32(s2)
     9c6:	0100                	addi	s0,sp,128
     9c8:	04090103          	lb	sp,64(s2)
     9cc:	0100                	addi	s0,sp,128
     9ce:	06097f03          	0x6097f03
     9d2:	0100                	addi	s0,sp,128
     9d4:	02090103          	lb	sp,32(s2)
     9d8:	0100                	addi	s0,sp,128
     9da:	4605                	li	a2,1
     9dc:	04097a03          	0x4097a03
     9e0:	0100                	addi	s0,sp,128
     9e2:	0905                	addi	s2,s2,1
     9e4:	04090203          	lb	tp,64(s2)
     9e8:	0100                	addi	s0,sp,128
     9ea:	0505                	addi	a0,a0,1
     9ec:	0306                	slli	t1,t1,0x1
     9ee:	0901                	addi	s2,s2,0
     9f0:	0004                	0x4
     9f2:	0301                	addi	t1,t1,0
     9f4:	0901                	addi	s2,s2,0
     9f6:	0000                	unimp
     9f8:	0301                	addi	t1,t1,0
     9fa:	0901                	addi	s2,s2,0
     9fc:	0000                	unimp
     9fe:	0501                	addi	a0,a0,0
     a00:	0646                	slli	a2,a2,0x11
     a02:	00097b03          	0x97b03
     a06:	0100                	addi	s0,sp,128
     a08:	0905                	addi	s2,s2,1
     a0a:	02090503          	lb	a0,32(s2)
     a0e:	0100                	addi	s0,sp,128
     a10:	0505                	addi	a0,a0,1
     a12:	0306                	slli	t1,t1,0x1
     a14:	0901                	addi	s2,s2,0
     a16:	0004                	0x4
     a18:	0501                	addi	a0,a0,0
     a1a:	0609                	addi	a2,a2,2
     a1c:	00090003          	lb	zero,0(s2)
     a20:	0100                	addi	s0,sp,128
    polyR[0] = -1;
     a22:	0505                	addi	a0,a0,1
     a24:	0306                	slli	t1,t1,0x1
    for(i = 1; i < N; ++i){
     a26:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     a2a:	0501                	addi	a0,a0,0
     a2c:	060c                	addi	a1,sp,768
    for (i = N; i < 55; ++i ){
     a2e:	04090003          	lb	zero,64(s2)
     a32:	0100                	addi	s0,sp,128
     a34:	1905                	addi	s2,s2,-31
    for(i = 0; i < N; ++i){
     a36:	02090303          	lb	t1,32(s2)
        random_keys[i] = f[i];
     a3a:	0100                	addi	s0,sp,128
     a3c:	1105                	addi	sp,sp,-31
     a3e:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     a40:	0104                	addi	s1,sp,128
     a42:	0306                	slli	t1,t1,0x1
     a44:	097d                	addi	s2,s2,31
     a46:	0008                	0x8
    for(i = N; i < (2*N); ++i){
     a48:	0501                	addi	a0,a0,0
     a4a:	0005                	c.nop	1
     a4c:	0402                	c.slli64	s0
     a4e:	0601                	addi	a2,a2,0
        random_keys[i] = g[i-N];
     a50:	00090003          	lb	zero,0(s2)
     a54:	0100                	addi	s0,sp,128
     a56:	04090b03          	lb	s6,64(s2)
    for(i = N; i < (2*N); ++i){
     a5a:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     a5c:	0306                	slli	t1,t1,0x1
     a5e:	0900                	addi	s0,sp,144
     a60:	000a                	c.slli	zero,0x2
    fp = ext_euclid(polyR, f, (N+1), p);
     a62:	0301                	addi	t1,t1,0
     a64:	0906                	slli	s2,s2,0x1
     a66:	0002                	c.slli64	zero
     a68:	0301                	addi	t1,t1,0
     a6a:	000c0903          	lb	s2,0(s8)
    for(i = (2*N); i < (3*N); ++i){
     a6e:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     a70:	00030607          	0x30607
     a74:	0009                	c.nop	2
     a76:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     a78:	1d05                	addi	s10,s10,-31
     a7a:	0200                	addi	s0,sp,256
    fq = ext_euclid(polyR, f, (N+1), q);
     a7c:	0104                	addi	s1,sp,128
     a7e:	0306                	slli	t1,t1,0x1
     a80:	0908                	addi	a0,sp,144
     a82:	0012                	c.slli	zero,0x4
     a84:	0501                	addi	a0,a0,0
     a86:	0009                	c.nop	2
    for(i = (3*N); i < (4*N); ++i){
     a88:	0402                	c.slli64	s0
     a8a:	0601                	addi	a2,a2,0
     a8c:	00090003          	lb	zero,0(s2)
        random_keys[i] = fq[i-(3*N)];
     a90:	0100                	addi	s0,sp,128
     a92:	1405                	addi	s0,s0,-31
     a94:	04090103          	lb	sp,64(s2)
    for(i = (3*N); i < (4*N); ++i){
     a98:	0100                	addi	s0,sp,128
     a9a:	0d05                	addi	s10,s10,1
    fg = polymult2(fq, N, g, N, 0);
     a9c:	0200                	addi	s0,sp,256
     a9e:	0304                	addi	s1,sp,384
     aa0:	0306                	slli	t1,t1,0x1
     aa2:	0965                	addi	s2,s2,25
     aa4:	0004                	0x4
    for(i = 0; i < (2*N-1); ++i){
     aa6:	0501                	addi	a0,a0,0
     aa8:	0019                	c.nop	6
     aaa:	0402                	c.slli64	s0
     aac:	01030603          	lb	a2,16(t1)
     ab0:	0009                	c.nop	2
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ab2:	0100                	addi	s0,sp,128
     ab4:	1805                	addi	a6,a6,-31
     ab6:	0200                	addi	s0,sp,256
     ab8:	0304                	addi	s1,sp,384
    for(i = (4*N); i < (5*N); ++i){
     aba:	06097f03          	0x6097f03
     abe:	0100                	addi	s0,sp,128
     ac0:	0d05                	addi	s10,s10,1
     ac2:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     ac4:	0304                	addi	s1,sp,384
     ac6:	0306                	slli	t1,t1,0x1
     ac8:	0901                	addi	s2,s2,0
     aca:	0004                	0x4
    for(i = (4*N); i < (5*N); ++i){
     acc:	0501                	addi	a0,a0,0
     ace:	0019                	c.nop	6
     ad0:	0402                	c.slli64	s0
    for(i = (5*N); i < (6*N+1); ++i){
     ad2:	00030603          	lb	a2,0(t1)
        random_keys[i] = polyR[i-(5*N)];
     ad6:	0009                	c.nop	2
     ad8:	0100                	addi	s0,sp,128
     ada:	2c05                	jal	d0a <ntru_deceypt+0xa4>
     adc:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     ade:	0304                	addi	s1,sp,384
     ae0:	0306                	slli	t1,t1,0x1
     ae2:	097e                	slli	s2,s2,0x1f
     ae4:	0004                	0x4
     ae6:	0501                	addi	a0,a0,0
     ae8:	0014                	0x14
}
     aea:	0402                	c.slli64	s0
     aec:	0301                	addi	t1,t1,0
     aee:	0900                	addi	s0,sp,144
     af0:	0004                	0x4
     af2:	0501                	addi	a0,a0,0
     af4:	0009                	c.nop	2
     af6:	0402                	c.slli64	s0
     af8:	0601                	addi	a2,a2,0
     afa:	00090003          	lb	zero,0(s2)
     afe:	0100                	addi	s0,sp,128
     b00:	1d05                	addi	s10,s10,-31
     b02:	0200                	addi	s0,sp,256
     b04:	0204                	addi	s1,sp,256
     b06:	0306                	slli	t1,t1,0x1
     b08:	097f                	0x97f
     b0a:	0004                	0x4
     b0c:	0501                	addi	a0,a0,0
     b0e:	0103060f          	0x103060f
     b12:	0809                	addi	a6,a6,2
     b14:	0100                	addi	s0,sp,128
     b16:	1105                	addi	sp,sp,-31
     b18:	0200                	addi	s0,sp,256
     b1a:	0304                	addi	s1,sp,384
     b1c:	0306                	slli	t1,t1,0x1
     b1e:	0916                	slli	s2,s2,0x5
     b20:	0004                	0x4
     b22:	0501                	addi	a0,a0,0
     b24:	0025                	c.nop	9
     b26:	0402                	c.slli64	s0
     b28:	00030603          	lb	a2,0(t1)
        polyR[i] = 0;
     b2c:	0409                	addi	s0,s0,2
     b2e:	0100                	addi	s0,sp,128
     b30:	2b05                	jal	1060 <__CTOR_LIST__+0x2>
     b32:	0200                	addi	s0,sp,256
    for(i = 1; i < N; ++i){
     b34:	0304                	addi	s1,sp,384
     b36:	04090003          	lb	zero,64(s2)
        f[i] = 0;
     b3a:	0100                	addi	s0,sp,128
     b3c:	2e05                	jal	e6c <memcpy+0xcc>
     b3e:	0200                	addi	s0,sp,256
     b40:	0304                	addi	s1,sp,384
     b42:	02090003          	lb	zero,32(s2)
        g[i] = 0;
     b46:	0100                	addi	s0,sp,128
     b48:	2a05                	jal	c78 <ntru_deceypt+0x12>
     b4a:	0200                	addi	s0,sp,256
     b4c:	0304                	addi	s1,sp,384
     b4e:	06097f03          	0x6097f03
    for (i = N; i < 55; ++i ){
     b52:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     b54:	2e05                	jal	e84 <memset+0x6>
     b56:	0200                	addi	s0,sp,256
     b58:	0304                	addi	s1,sp,384
     b5a:	02090103          	lb	sp,32(s2)
     b5e:	0100                	addi	s0,sp,128
     b60:	2505                	jal	1180 <_endtext+0x110>
     b62:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     b64:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     b66:	04090003          	lb	zero,64(s2)
        random_keys[i] = g[i-N];
     b6a:	0100                	addi	s0,sp,128
     b6c:	2805                	jal	b9c <generate_keys+0x2bc>
     b6e:	0200                	addi	s0,sp,256
     b70:	0304                	addi	s1,sp,384
     b72:	0306                	slli	t1,t1,0x1
    for(i = N; i < (2*N); ++i){
     b74:	097f                	0x97f
     b76:	0002                	c.slli64	zero
     b78:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     b7a:	0020                	addi	s0,sp,8
     b7c:	0402                	c.slli64	s0
     b7e:	0301                	addi	t1,t1,0
     b80:	0900                	addi	s0,sp,144
     b82:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     b84:	0501                	addi	a0,a0,0
     b86:	000d                	c.nop	3
     b88:	0402                	c.slli64	s0
        random_keys[i] = fq[i-(3*N)];
     b8a:	0601                	addi	a2,a2,0
     b8c:	00090003          	lb	zero,0(s2)
     b90:	0100                	addi	s0,sp,128
     b92:	2505                	jal	11b2 <_endtext+0x142>
     b94:	0200                	addi	s0,sp,256
     b96:	0204                	addi	s1,sp,256
    for(i = (3*N); i < (4*N); ++i){
     b98:	0306                	slli	t1,t1,0x1
        random_keys[i] = fq[i-(3*N)];
     b9a:	097f                	0x97f
    for(i = (3*N); i < (4*N); ++i){
     b9c:	0004                	0x4
        fg[i] = fg[i]*p;
     b9e:	0501                	addi	a0,a0,0
    for(i = 0; i < (2*N-1); ++i){
     ba0:	04020027          	0x4020027
        fg[i] = fg[i]*p;
     ba4:	0602                	c.slli64	a2
     ba6:	00090003          	lb	zero,0(s2)
     baa:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     bac:	1d05                	addi	s10,s10,-31
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bae:	0200                	addi	s0,sp,256
     bb0:	0104                	addi	s1,sp,128
     bb2:	0306                	slli	t1,t1,0x1
     bb4:	0900                	addi	s0,sp,144
     bb6:	0006                	c.slli	zero,0x1
     bb8:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     bba:	0009                	c.nop	2
     bbc:	0402                	c.slli64	s0
        random_keys[i] = polyR[i-(5*N)];
     bbe:	0601                	addi	a2,a2,0
     bc0:	00090003          	lb	zero,0(s2)
     bc4:	0100                	addi	s0,sp,128
     bc6:	0e05                	addi	t3,t3,1
     bc8:	04091003          	lh	zero,64(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     bcc:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     bce:	0d05                	addi	s10,s10,1
    for(i = (5*N); i < (6*N+1); ++i){
     bd0:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bd2:	0104                	addi	s1,sp,128
     bd4:	0306                	slli	t1,t1,0x1
     bd6:	097f                	0x97f
     bd8:	0002                	c.slli64	zero
     bda:	0501                	addi	a0,a0,0
     bdc:	0005                	c.nop	1
     bde:	0402                	c.slli64	s0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     be0:	0601                	addi	a2,a2,0
     be2:	00090003          	lb	zero,0(s2)
     be6:	0100                	addi	s0,sp,128
     be8:	0c090003          	lb	zero,192(s2)
     bec:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bee:	0e05                	addi	t3,t3,1
     bf0:	02090103          	lb	sp,32(s2)
     bf4:	0100                	addi	s0,sp,128
     bf6:	1405                	addi	s0,s0,-31
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bf8:	04097103          	0x4097103
    temp = polymult(public_key,N,random_val,48,q,0);
     bfc:	0100                	addi	s0,sp,128
     bfe:	1105                	addi	sp,sp,-31
     c00:	0200                	addi	s0,sp,256
     c02:	0304                	addi	s1,sp,384
     c04:	0306                	slli	t1,t1,0x1
     c06:	0908                	addi	a0,sp,144
     c08:	0004                	0x4
     c0a:	0501                	addi	a0,a0,0
     c0c:	0029                	c.nop	10
    for(i = 0; i < 48; ++i){
     c0e:	0402                	c.slli64	s0
     c10:	00030603          	lb	a2,0(t1)
        temp[i] = temp[i] + message[i];
     c14:	0409                	addi	s0,s0,2
     c16:	0100                	addi	s0,sp,128
     c18:	2f05                	jal	1348 <_bss_start+0x154>
     c1a:	0200                	addi	s0,sp,256
     c1c:	0304                	addi	s1,sp,384
     c1e:	04090003          	lb	zero,64(s2)
     c22:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     c24:	3205                	jal	544 <polydiv+0x48>
     c26:	0200                	addi	s0,sp,256
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c28:	0304                	addi	s1,sp,384
     c2a:	02090003          	lb	zero,32(s2)
     c2e:	0100                	addi	s0,sp,128
     c30:	2a05                	jal	d60 <reset_handler+0x32>
     c32:	0200                	addi	s0,sp,256
     c34:	0304                	addi	s1,sp,384
     c36:	06097f03          	0x6097f03
    for(i = (2*N); i < (3*N); ++i){
     c3a:	0100                	addi	s0,sp,128
     c3c:	3205                	jal	55c <polydiv+0x60>
     c3e:	0200                	addi	s0,sp,256
     c40:	0304                	addi	s1,sp,384
     c42:	02090103          	lb	sp,32(s2)
}
     c46:	0100                	addi	s0,sp,128
     c48:	2905                	jal	1078 <_endtext+0x8>
     c4a:	0200                	addi	s0,sp,256
     c4c:	0304                	addi	s1,sp,384
     c4e:	04090003          	lb	zero,64(s2)
     c52:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     c54:	2805                	jal	c84 <ntru_deceypt+0x1e>
     c56:	0200                	addi	s0,sp,256
     c58:	0304                	addi	s1,sp,384
     c5a:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < (3*N); ++i){
     c5c:	097f                	0x97f
     c5e:	0002                	c.slli64	zero
        CT[i-(2*N)] = CT[i];
     c60:	0501                	addi	a0,a0,0
     c62:	0020                	addi	s0,sp,8
    for(i = (2*N); i < (3*N); ++i){
     c64:	0402                	c.slli64	s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c66:	0301                	addi	t1,t1,0
     c68:	0900                	addi	s0,sp,144
     c6a:	0000                	unimp
     c6c:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c6e:	000d                	c.nop	3
     c70:	0402                	c.slli64	s0
     c72:	0601                	addi	a2,a2,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c74:	00090003          	lb	zero,0(s2)
     c78:	0100                	addi	s0,sp,128
     c7a:	2505                	jal	129a <_bss_start+0xa6>
     c7c:	0200                	addi	s0,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c7e:	0204                	addi	s1,sp,256
     c80:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c82:	097f                	0x97f
     c84:	0004                	0x4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c86:	0501                	addi	a0,a0,0
     c88:	04020027          	0x4020027
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8c:	0602                	c.slli64	a2
     c8e:	00090003          	lb	zero,0(s2)
     c92:	0100                	addi	s0,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c94:	0d05                	addi	s10,s10,1
     c96:	0200                	addi	s0,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c98:	0304                	addi	s1,sp,384
     c9a:	0306                	slli	t1,t1,0x1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c9c:	090a                	slli	s2,s2,0x2
     c9e:	0008                	0x8
     ca0:	0501                	addi	a0,a0,0
     ca2:	0019                	c.nop	6
     ca4:	0402                	c.slli64	s0
     ca6:	00030603          	lb	a2,0(t1)
     caa:	0009                	c.nop	2
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	0100                	addi	s0,sp,128
     cae:	2305                	jal	11ce <_endtext+0x15e>
     cb0:	0200                	addi	s0,sp,256
     cb2:	0304                	addi	s1,sp,384
     cb4:	04097f03          	0x4097f03
        if(a2[i] <= q/2)
     cb8:	0100                	addi	s0,sp,128
     cba:	1905                	addi	s2,s2,-31
    for (i = 0; i < N; ++i){
     cbc:	0200                	addi	s0,sp,256
     cbe:	0304                	addi	s1,sp,384
     cc0:	04090103          	lb	sp,64(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     cc4:	0100                	addi	s0,sp,128
     cc6:	2305                	jal	11e6 <_endtext+0x176>
     cc8:	0200                	addi	s0,sp,256
     cca:	0304                	addi	s1,sp,384
     ccc:	0306                	slli	t1,t1,0x1
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cce:	097f                	0x97f
     cd0:	0006                	c.slli	zero,0x1
     cd2:	0501                	addi	a0,a0,0
     cd4:	0011                	c.nop	4
     cd6:	0402                	c.slli64	s0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd8:	0301                	addi	t1,t1,0
     cda:	0900                	addi	s0,sp,144
     cdc:	0002                	c.slli64	zero
}
     cde:	0501                	addi	a0,a0,0
     ce0:	0009                	c.nop	2
     ce2:	0402                	c.slli64	s0
     ce4:	0601                	addi	a2,a2,0
     ce6:	00090003          	lb	zero,0(s2)
     cea:	0100                	addi	s0,sp,128
     cec:	1605                	addi	a2,a2,-31
     cee:	0200                	addi	s0,sp,256
     cf0:	0204                	addi	s1,sp,256
     cf2:	0306                	slli	t1,t1,0x1
        a2[i-(2*N)] = a2[i];
     cf4:	097f                	0x97f
     cf6:	0004                	0x4
     cf8:	0501                	addi	a0,a0,0
     cfa:	0305                	addi	t1,t1,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfc:	0906                	slli	s2,s2,0x1
     cfe:	0006                	c.slli	zero,0x1
        a2[i-(2*N)] = a2[i];
     d00:	0301                	addi	t1,t1,0
     d02:	0902                	c.slli64	s2
    for(i = (2*N); i < ((2*N)+N); ++i){
     d04:	0000                	unimp
        if(a2[i] <= q/2)
     d06:	0501                	addi	a0,a0,0
     d08:	0601                	addi	a2,a2,0
     d0a:	00090103          	lb	sp,0(s2)
            a2[i] = (-1)*(q-a2[i]);
     d0e:	0100                	addi	s0,sp,128
     d10:	4305                	li	t1,1
    for (i = 0; i < N; ++i){
     d12:	0306                	slli	t1,t1,0x1
     d14:	0902                	c.slli64	s2
     d16:	002a                	c.slli	zero,0xa
        c2[i-(2*N)] = c2[i];
     d18:	0501                	addi	a0,a0,0
     d1a:	0305                	addi	t1,t1,1
     d1c:	0902                	c.slli64	s2
     d1e:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d20:	0301                	addi	t1,t1,0
     d22:	0901                	addi	s2,s2,0
        c2[i-(2*N)] = c2[i];
     d24:	0000                	unimp
     d26:	0301                	addi	t1,t1,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d28:	0902                	c.slli64	s2
  jal x0, default_exc_handler
     d2a:	0000                	unimp
     d2c:	0501                	addi	a0,a0,0
  mv  x1, x0
     d2e:	0609                	addi	a2,a2,2
     d30:	00090003          	lb	zero,0(s2)
  mv  x3, x1
     d34:	0100                	addi	s0,sp,128
  mv  x4, x1
     d36:	4305                	li	t1,1
  mv  x5, x1
     d38:	04097b03          	0x4097b03
  mv  x7, x1
     d3c:	0100                	addi	s0,sp,128
  mv  x8, x1
     d3e:	0905                	addi	s2,s2,1
  mv  x9, x1
     d40:	02090503          	lb	a0,32(s2)
  mv x11, x1
     d44:	0100                	addi	s0,sp,128
  mv x12, x1
     d46:	4305                	li	t1,1
  mv x13, x1
     d48:	02097b03          	0x2097b03
  mv x15, x1
     d4c:	0100                	addi	s0,sp,128
  mv x16, x1
     d4e:	0905                	addi	s2,s2,1
  mv x17, x1
     d50:	1a090503          	lb	a0,416(s2)
  mv x19, x1
     d54:	0100                	addi	s0,sp,128
  mv x20, x1
     d56:	4305                	li	t1,1
  mv x21, x1
     d58:	02097b03          	0x2097b03
  mv x23, x1
     d5c:	0100                	addi	s0,sp,128
  mv x24, x1
     d5e:	0905                	addi	s2,s2,1
  mv x25, x1
     d60:	02090503          	lb	a0,32(s2)
  mv x27, x1
     d64:	0100                	addi	s0,sp,128
  mv x28, x1
     d66:	06090103          	lb	sp,96(s2)
  mv x30, x1
     d6a:	0100                	addi	s0,sp,128
  mv x31, x1
     d6c:	06090203          	lb	tp,96(s2)
  la   x2, _stack_start
     d70:	0100                	addi	s0,sp,128
     d72:	04090103          	lb	sp,64(s2)
  la x26, _bss_start
     d76:	0100                	addi	s0,sp,128
     d78:	08097f03          	0x8097f03
     d7c:	0100                	addi	s0,sp,128
  la x27, _bss_end
     d7e:	4305                	li	t1,1
     d80:	02097803          	0x2097803
     d84:	0100                	addi	s0,sp,128
  bge x26, x27, zero_loop_end
     d86:	0905                	addi	s2,s2,1
     d88:	02090903          	lb	s2,32(s2)
  sw x0, 0(x26)
     d8c:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     d8e:	4305                	li	t1,1
  ble x26, x27, zero_loop
     d90:	04097703          	0x4097703
  addi x10, x0, 0
     d94:	0100                	addi	s0,sp,128
     d96:	0905                	addi	s2,s2,1
  addi x11, x0, 0
     d98:	02090503          	lb	a0,32(s2)
  jal x1, main
     d9c:	0100                	addi	s0,sp,128
     d9e:	0505                	addi	a0,a0,1
     da0:	0306                	slli	t1,t1,0x1
     da2:	0901                	addi	s2,s2,0
     da4:	0004                	0x4
     da6:	0301                	addi	t1,t1,0
     da8:	0901                	addi	s2,s2,0
     daa:	0000                	unimp
     dac:	0301                	addi	t1,t1,0
     dae:	0901                	addi	s2,s2,0
     db0:	0000                	unimp
     db2:	0301                	addi	t1,t1,0
     db4:	0901                	addi	s2,s2,0
     db6:	0000                	unimp
     db8:	0501                	addi	a0,a0,0
     dba:	0608                	addi	a0,sp,768
     dbc:	00090c03          	lb	s8,0(s2)
     dc0:	0100                	addi	s0,sp,128
     dc2:	4305                	li	t1,1
     dc4:	06096b03          	0x6096b03
     dc8:	0100                	addi	s0,sp,128
     dca:	0905                	addi	s2,s2,1
     dcc:	04090903          	lb	s2,64(s2)
     dd0:	0100                	addi	s0,sp,128
     dd2:	0805                	addi	a6,a6,1
     dd4:	04090c03          	lb	s8,64(s2)
     dd8:	0100                	addi	s0,sp,128
     dda:	02090203          	lb	tp,32(s2)
     dde:	0100                	addi	s0,sp,128
     de0:	0905                	addi	s2,s2,1
     de2:	08097203          	0x8097203
     de6:	0100                	addi	s0,sp,128
     de8:	0805                	addi	a6,a6,1
     dea:	0306                	slli	t1,t1,0x1
     dec:	090c                	addi	a1,sp,144
     dee:	0002                	c.slli64	zero
     df0:	0301                	addi	t1,t1,0
     df2:	0902                	c.slli64	s2
     df4:	0000                	unimp
     df6:	0501                	addi	a0,a0,0
     df8:	0305                	addi	t1,t1,1
     dfa:	090d                	addi	s2,s2,3
     dfc:	0000                	unimp
     dfe:	0301                	addi	t1,t1,0
     e00:	0902                	c.slli64	s2
     e02:	0008                	0x8
     e04:	0301                	addi	t1,t1,0
     e06:	0902                	c.slli64	s2
     e08:	0008                	0x8
     e0a:	0501                	addi	a0,a0,0
     e0c:	060c                	addi	a1,sp,768
     e0e:	00090003          	lb	zero,0(s2)
     e12:	0100                	addi	s0,sp,128
     e14:	1105                	addi	sp,sp,-31
     e16:	0200                	addi	s0,sp,256
     e18:	0104                	addi	s1,sp,128
     e1a:	0306                	slli	t1,t1,0x1
     e1c:	0900                	addi	s0,sp,144
     e1e:	0002                	c.slli64	zero
     e20:	0501                	addi	a0,a0,0
     e22:	0005                	c.nop	1
     e24:	0402                	c.slli64	s0
     e26:	0601                	addi	a2,a2,0
     e28:	00090003          	lb	zero,0(s2)
     e2c:	0100                	addi	s0,sp,128
     e2e:	1805                	addi	a6,a6,-31
     e30:	0200                	addi	s0,sp,256
     e32:	0104                	addi	s1,sp,128
     e34:	0306                	slli	t1,t1,0x1
     e36:	0906                	slli	s2,s2,0x1
     e38:	0004                	0x4
     e3a:	0501                	addi	a0,a0,0
     e3c:	0005                	c.nop	1
     e3e:	0402                	c.slli64	s0
     e40:	0601                	addi	a2,a2,0
     e42:	08090003          	lb	zero,128(s2)
     e46:	0100                	addi	s0,sp,128
     e48:	0c05                	addi	s8,s8,1
     e4a:	0200                	addi	s0,sp,256
     e4c:	0104                	addi	s1,sp,128
     e4e:	04097a03          	0x4097a03
     e52:	0100                	addi	s0,sp,128
     e54:	0200                	addi	s0,sp,256
     e56:	0104                	addi	s1,sp,128
     e58:	04090f03          	lb	t5,64(s2)
     e5c:	0100                	addi	s0,sp,128
     e5e:	1105                	addi	sp,sp,-31
     e60:	0200                	addi	s0,sp,256
     e62:	0104                	addi	s1,sp,128
     e64:	0306                	slli	t1,t1,0x1
     e66:	097f                	0x97f
     e68:	0002                	c.slli64	zero
     e6a:	0501                	addi	a0,a0,0
     e6c:	0005                	c.nop	1
     e6e:	0402                	c.slli64	s0
     e70:	0601                	addi	a2,a2,0
     e72:	00090003          	lb	zero,0(s2)
     e76:	0100                	addi	s0,sp,128
     e78:	0905                	addi	s2,s2,1
     e7a:	0200                	addi	s0,sp,256
     e7c:	0304                	addi	s1,sp,384
     e7e:	0306                	slli	t1,t1,0x1
     e80:	00080973          	0x80973
     e84:	0501                	addi	a0,a0,0
     e86:	000e                	c.slli	zero,0x3
     e88:	0402                	c.slli64	s0
     e8a:	00030603          	lb	a2,0(t1)
     e8e:	0409                	addi	s0,s0,2
     e90:	0100                	addi	s0,sp,128
     e92:	0200                	addi	s0,sp,256
     e94:	0304                	addi	s1,sp,384
     e96:	04090103          	lb	sp,64(s2)
     e9a:	0100                	addi	s0,sp,128
     e9c:	0200                	addi	s0,sp,256
     e9e:	0304                	addi	s1,sp,384
     ea0:	02097f03          	0x2097f03
     ea4:	0100                	addi	s0,sp,128
     ea6:	0905                	addi	s2,s2,1
     ea8:	0200                	addi	s0,sp,256
     eaa:	0304                	addi	s1,sp,384
     eac:	0306                	slli	t1,t1,0x1
     eae:	0901                	addi	s2,s2,0
     eb0:	0004                	0x4
     eb2:	0501                	addi	a0,a0,0
     eb4:	000e                	c.slli	zero,0x3
     eb6:	0402                	c.slli64	s0
     eb8:	00030603          	lb	a2,0(t1)
     ebc:	0009                	c.nop	2
     ebe:	0100                	addi	s0,sp,128
     ec0:	1d05                	addi	s10,s10,-31
     ec2:	0200                	addi	s0,sp,256
     ec4:	0304                	addi	s1,sp,384
     ec6:	0306                	slli	t1,t1,0x1
     ec8:	097e                	slli	s2,s2,0x1f
     eca:	0004                	0x4
     ecc:	0501                	addi	a0,a0,0
     ece:	0309                	addi	t1,t1,2
     ed0:	00040907          	0x40907
     ed4:	0501                	addi	a0,a0,0
     ed6:	0003060b          	0x3060b
     eda:	0009                	c.nop	2
     edc:	0100                	addi	s0,sp,128
     ede:	2005                	jal	efe <memset+0x80>
     ee0:	0200                	addi	s0,sp,256
     ee2:	0204                	addi	s1,sp,256
     ee4:	0306                	slli	t1,t1,0x1
     ee6:	097f                	0x97f
     ee8:	0002                	c.slli64	zero
     eea:	0501                	addi	a0,a0,0
     eec:	0022                	c.slli	zero,0x8
     eee:	0402                	c.slli64	s0
     ef0:	0602                	c.slli64	a2
     ef2:	00090003          	lb	zero,0(s2)
     ef6:	0100                	addi	s0,sp,128
     ef8:	0905                	addi	s2,s2,1
     efa:	0306                	slli	t1,t1,0x1
     efc:	0909                	addi	s2,s2,2
     efe:	0004                	0x4
     f00:	0501                	addi	a0,a0,0
     f02:	0615                	addi	a2,a2,5
     f04:	00090003          	lb	zero,0(s2)
     f08:	0100                	addi	s0,sp,128
     f0a:	0c05                	addi	s8,s8,1
     f0c:	06090003          	lb	zero,96(s2)
     f10:	0100                	addi	s0,sp,128
     f12:	1a05                	addi	s4,s4,-31
     f14:	0200                	addi	s0,sp,256
     f16:	0204                	addi	s1,sp,256
     f18:	0306                	slli	t1,t1,0x1
     f1a:	097f                	0x97f
     f1c:	0004                	0x4
     f1e:	0501                	addi	a0,a0,0
     f20:	0309                	addi	t1,t1,2
     f22:	00040907          	0x40907
int main(){
     f26:	0501                	addi	a0,a0,0
     f28:	0003060b          	0x3060b
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f2c:	0009                	c.nop	2
     f2e:	0100                	addi	s0,sp,128
     f30:	2005                	jal	f50 <main+0x2a>
     f32:	0200                	addi	s0,sp,256
     f34:	0204                	addi	s1,sp,256
     f36:	0306                	slli	t1,t1,0x1
int main(){
     f38:	097f                	0x97f
     f3a:	0002                	c.slli64	zero
     f3c:	0501                	addi	a0,a0,0
     f3e:	0022                	c.slli	zero,0x8
     f40:	0402                	c.slli64	s0
     f42:	0602                	c.slli64	a2
     f44:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xaaaaaaa0;
     f48:	0100                	addi	s0,sp,128
     f4a:	1805                	addi	a6,a6,-31
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f4c:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa0;
     f4e:	0104                	addi	s1,sp,128
     f50:	0306                	slli	t1,t1,0x1
     f52:	0900                	addi	s0,sp,144
     f54:	0002                	c.slli64	zero
     f56:	0501                	addi	a0,a0,0
     f58:	0005                	c.nop	1
    keys = generate_keys(N, p, q);
     f5a:	0402                	c.slli64	s0
     f5c:	0601                	addi	a2,a2,0
     f5e:	08090003          	lb	zero,128(s2)
     f62:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
     f64:	0b05                	addi	s6,s6,1
    resultkon[0] = 0xaaaaaaa1;
     f66:	0306                	slli	t1,t1,0x1
     f68:	090c                	addi	a1,sp,144
    keys = generate_keys(N, p, q);
     f6a:	0004                	0x4
    resultkon[0] = 0xaaaaaaa1;
     f6c:	0501                	addi	a0,a0,0
     f6e:	0305                	addi	t1,t1,1
    for(i = 0; i < N; ++i){
     f70:	00ca                	slli	ra,ra,0x12
     f72:	0409                	addi	s0,s0,2
        secret_key_f[i] = keys[i];
     f74:	0100                	addi	s0,sp,128
     f76:	0e090403          	lb	s0,224(s2)
     f7a:	0100                	addi	s0,sp,128
     f7c:	1b05                	addi	s6,s6,-31
     f7e:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     f80:	0900                	addi	s0,sp,144
     f82:	0000                	unimp
     f84:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     f86:	09010313          	addi	t1,sp,144
     f8a:	0004                	0x4
     f8c:	0501                	addi	a0,a0,0
     f8e:	0015                	c.nop	5
     f90:	0402                	c.slli64	s0
        secret_key_fp[i-(2*N)] = keys[i];
     f92:	0601                	addi	a2,a2,0
     f94:	08097f03          	0x8097f03
     f98:	0100                	addi	s0,sp,128
     f9a:	0505                	addi	a0,a0,1
    for(i = (2*N); i < (3*N); ++i){
     f9c:	0200                	addi	s0,sp,256
     f9e:	0104                	addi	s1,sp,128
    for(i = (3*N); i < (4*N); ++i){
     fa0:	0306                	slli	t1,t1,0x1
     fa2:	0900                	addi	s0,sp,144
     fa4:	0000                	unimp
     fa6:	0601                	addi	a2,a2,0
     fa8:	04090403          	lb	s0,64(s2)
        public_key[i-(4*N)] = keys[i];
     fac:	0100                	addi	s0,sp,128
     fae:	00090203          	lb	tp,0(s2)
     fb2:	0100                	addi	s0,sp,128
     fb4:	0105                	addi	sp,sp,1
    for(i = (4*N); i < (5*N); ++i){
     fb6:	0306                	slli	t1,t1,0x1
     fb8:	0901                	addi	s2,s2,0
     fba:	0000                	unimp
     fbc:	0501                	addi	a0,a0,0
     fbe:	0609                	addi	a2,a2,2
     fc0:	097fae03          	lw	t3,151(t6)
        ring_poly[i-(5*N)] = keys[i];
     fc4:	002a                	c.slli	zero,0xa
     fc6:	0501                	addi	a0,a0,0
     fc8:	0616                	slli	a2,a2,0x5
     fca:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     fce:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
     fd0:	0d05                	addi	s10,s10,1
     fd2:	04090003          	lb	zero,64(s2)
     fd6:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd8:	1305                	addi	t1,t1,-31
     fda:	04090003          	lb	zero,64(s2)
     fde:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb1;
     fe0:	0905                	addi	s2,s2,1
     fe2:	04090703          	lb	a4,64(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fe6:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
     fe8:	1305                	addi	t1,t1,-31
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fea:	06097903          	0x6097903
    resultkon[0] = 0xccccccc0;
     fee:	0100                	addi	s0,sp,128
     ff0:	0905                	addi	s2,s2,1
     ff2:	0306                	slli	t1,t1,0x1
     ff4:	00020907          	0x20907
     ff8:	0301                	addi	t1,t1,0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     ffa:	0904                	addi	s1,sp,144
     ffc:	0002                	c.slli64	zero
     ffe:	0501                	addi	a0,a0,0
    1000:	00030613          	mv	a2,t1
    1004:	0009                	c.nop	2
    1006:	0100                	addi	s0,sp,128
    1008:	0905                	addi	s2,s2,1
    100a:	0e090a03          	lb	s4,224(s2)
    resultkon[0] = 0xccccccc1;	
    100e:	0100                	addi	s0,sp,128
    1010:	1305                	addi	t1,t1,-31
            resultkon[0] = 0xDEDEDEDE;
    1012:	04097603          	0x4097603
    resultkon[0] = 0xccccccc1;	
    1016:	0100                	addi	s0,sp,128
    1018:	0905                	addi	s2,s2,1
            resultkon[0] = 0xDEDEDEDE;
    101a:	0306                	slli	t1,t1,0x1
    101c:	090a                	slli	s2,s2,0x2
    for(i = 0; i < 32; ++i){
    101e:	0002                	c.slli64	zero
    1020:	0301                	addi	t1,t1,0
        if(!(message[i] == Dec_Message[i])){
    1022:	0904                	addi	s1,sp,144
    1024:	0002                	c.slli64	zero
    1026:	0501                	addi	a0,a0,0
    1028:	0610                	addi	a2,sp,768
    102a:	02090003          	lb	zero,32(s2)
    102e:	0100                	addi	s0,sp,128
    1030:	1505                	addi	a0,a0,-31
            resultkon[0] = 0xBABABABA;
    1032:	0200                	addi	s0,sp,256
    1034:	0104                	addi	s1,sp,128
    1036:	0306                	slli	t1,t1,0x1
    1038:	0900                	addi	s0,sp,144
    103a:	0002                	c.slli64	zero
}
    103c:	0501                	addi	a0,a0,0
    103e:	0009                	c.nop	2
    1040:	0402                	c.slli64	s0
    1042:	0601                	addi	a2,a2,0
    1044:	00090003          	lb	zero,0(s2)
    1048:	0100                	addi	s0,sp,128
    104a:	0205                	addi	tp,tp,1
    104c:	0306                	slli	t1,t1,0x1
    104e:	090e                	slli	s2,s2,0x3
    1050:	0004                	0x4
    1052:	0501                	addi	a0,a0,0
            resultkon[0] = 0xDEDEDEDE;
    1054:	0309                	addi	t1,t1,2
    for(i = 0; i < 32; ++i){
    1056:	0904                	addi	s1,sp,144
    1058:	0008                	0x8
    105a:	0501                	addi	a0,a0,0
    105c:	0003060f          	0x3060f
    1060:	0209                	addi	tp,tp,2
    1062:	0100                	addi	s0,sp,128
    1064:	1405                	addi	s0,s0,-31
    1066:	0200                	addi	s0,sp,256
    1068:	0104                	addi	s1,sp,128
    106a:	0306                	slli	t1,t1,0x1
    106c:	0900                	addi	s0,sp,144
    106e:	0002                	c.slli64	zero
    1070:	0501                	addi	a0,a0,0
    1072:	0009                	c.nop	2
    1074:	0402                	c.slli64	s0
    1076:	0601                	addi	a2,a2,0
    1078:	00090003          	lb	zero,0(s2)
    107c:	0100                	addi	s0,sp,128
    107e:	0306                	slli	t1,t1,0x1
    1080:	0905                	addi	s2,s2,1
    1082:	0004                	0x4
    1084:	0301                	addi	t1,t1,0
    1086:	0904                	addi	s1,sp,144
    1088:	0008                	0x8
    108a:	0501                	addi	a0,a0,0
    108c:	0610                	addi	a2,sp,768
    108e:	00090003          	lb	zero,0(s2)
    1092:	0100                	addi	s0,sp,128
    1094:	1c05                	addi	s8,s8,-31
    1096:	0200                	addi	s0,sp,256
    1098:	0104                	addi	s1,sp,128
    109a:	0306                	slli	t1,t1,0x1
    109c:	0900                	addi	s0,sp,144
    109e:	0002                	c.slli64	zero
    10a0:	0501                	addi	a0,a0,0
    10a2:	0009                	c.nop	2
    10a4:	0402                	c.slli64	s0
    10a6:	0601                	addi	a2,a2,0
    10a8:	08090003          	lb	zero,128(s2)
    10ac:	0100                	addi	s0,sp,128
    10ae:	0d05                	addi	s10,s10,1
    10b0:	0200                	addi	s0,sp,256
    10b2:	0304                	addi	s1,sp,384
    10b4:	0306                	slli	t1,t1,0x1
    10b6:	0966                	slli	s2,s2,0x19
    10b8:	0008                	0x8
    10ba:	0501                	addi	a0,a0,0
    10bc:	0030                	addi	a2,sp,8
    10be:	0402                	c.slli64	s0
    10c0:	00030603          	lb	a2,0(t1)
    10c4:	0009                	c.nop	2
    10c6:	0100                	addi	s0,sp,128
    10c8:	2705                	jal	17e8 <result+0x144>
    10ca:	0200                	addi	s0,sp,256
    10cc:	0304                	addi	s1,sp,384
    10ce:	06090003          	lb	zero,96(s2)
    10d2:	0100                	addi	s0,sp,128
    10d4:	2105                	jal	14f4 <product2+0xa8>
    10d6:	0200                	addi	s0,sp,256
    10d8:	0304                	addi	s1,sp,384
    10da:	04097f03          	0x4097f03
    10de:	0100                	addi	s0,sp,128
    10e0:	2705                	jal	1800 <result+0x15c>
    10e2:	0200                	addi	s0,sp,256
    10e4:	0304                	addi	s1,sp,384
    10e6:	04090103          	lb	sp,64(s2)
    10ea:	0100                	addi	s0,sp,128
    10ec:	1905                	addi	s2,s2,-31
    10ee:	0200                	addi	s0,sp,256
    10f0:	0304                	addi	s1,sp,384
    10f2:	02090003          	lb	zero,32(s2)
    10f6:	0100                	addi	s0,sp,128
    10f8:	2105                	jal	1518 <product2+0xcc>
    10fa:	0200                	addi	s0,sp,256
    10fc:	0304                	addi	s1,sp,384
    10fe:	0306                	slli	t1,t1,0x1
    1100:	097f                	0x97f
    1102:	0004                	0x4
    1104:	0501                	addi	a0,a0,0
    1106:	000d                	c.nop	3
    1108:	0402                	c.slli64	s0
    110a:	09130303          	lb	t1,145(t1)
    110e:	0002                	c.slli64	zero
    1110:	0501                	addi	a0,a0,0
    1112:	001c                	0x1c
    1114:	0402                	c.slli64	s0
    1116:	00030603          	lb	a2,0(t1)
    111a:	0009                	c.nop	2
    111c:	0100                	addi	s0,sp,128
    111e:	1905                	addi	s2,s2,-31
    1120:	0200                	addi	s0,sp,256
    1122:	0304                	addi	s1,sp,384
    1124:	06090003          	lb	zero,96(s2)
    1128:	0100                	addi	s0,sp,128
    112a:	2005                	jal	114a <_endtext+0xda>
    112c:	0200                	addi	s0,sp,256
    112e:	0304                	addi	s1,sp,384
    1130:	04097f03          	0x4097f03
    1134:	0100                	addi	s0,sp,128
    1136:	1905                	addi	s2,s2,-31
    1138:	0200                	addi	s0,sp,256
    113a:	0304                	addi	s1,sp,384
    113c:	04090103          	lb	sp,64(s2)
    1140:	0100                	addi	s0,sp,128
    1142:	1205                	addi	tp,tp,-31
    1144:	0200                	addi	s0,sp,256
    1146:	0304                	addi	s1,sp,384
    1148:	02090003          	lb	zero,32(s2)
    114c:	0100                	addi	s0,sp,128
    114e:	2005                	jal	116e <_endtext+0xfe>
    1150:	0200                	addi	s0,sp,256
    1152:	0304                	addi	s1,sp,384
    1154:	0306                	slli	t1,t1,0x1
    1156:	097f                	0x97f
    1158:	0004                	0x4
    115a:	0501                	addi	a0,a0,0
    115c:	030d                	addi	t1,t1,3
    115e:	090a                	slli	s2,s2,0x2
    1160:	0002                	c.slli64	zero
    1162:	0501                	addi	a0,a0,0
    1164:	0003060f          	0x3060f
    1168:	0009                	c.nop	2
    116a:	0100                	addi	s0,sp,128
    116c:	2405                	jal	138c <_bss_start+0x198>
    116e:	0200                	addi	s0,sp,256
    1170:	0204                	addi	s1,sp,256
    1172:	0306                	slli	t1,t1,0x1
    1174:	097f                	0x97f
    1176:	0002                	c.slli64	zero
    1178:	0501                	addi	a0,a0,0
    117a:	0026                	c.slli	zero,0x9
    117c:	0402                	c.slli64	s0
    117e:	0602                	c.slli64	a2
    1180:	00090003          	lb	zero,0(s2)
    1184:	0100                	addi	s0,sp,128
    1186:	0d05                	addi	s10,s10,1
    1188:	0200                	addi	s0,sp,256
    118a:	0304                	addi	s1,sp,384
    118c:	0306                	slli	t1,t1,0x1
    118e:	0909                	addi	s2,s2,2
    1190:	0004                	0x4
    1192:	0501                	addi	a0,a0,0
    1194:	0012                	c.slli	zero,0x4
    1196:	0402                	c.slli64	s0
    1198:	00030603          	lb	a2,0(t1)
    119c:	0009                	c.nop	2
    119e:	0100                	addi	s0,sp,128
    11a0:	2105                	jal	15c0 <product2+0x174>
    11a2:	0200                	addi	s0,sp,256
    11a4:	0304                	addi	s1,sp,384
    11a6:	0306                	slli	t1,t1,0x1
    11a8:	097f                	0x97f
    11aa:	000a                	c.slli	zero,0x2
    11ac:	0501                	addi	a0,a0,0
    11ae:	0015                	c.nop	5
    11b0:	0402                	c.slli64	s0
    11b2:	0301                	addi	t1,t1,0
    11b4:	0900                	addi	s0,sp,144
    11b6:	0002                	c.slli64	zero
    11b8:	0501                	addi	a0,a0,0
    11ba:	0009                	c.nop	2
    11bc:	0402                	c.slli64	s0
    11be:	0601                	addi	a2,a2,0
    11c0:	00090003          	lb	zero,0(s2)
    11c4:	0100                	addi	s0,sp,128
    11c6:	0200                	addi	s0,sp,256
    11c8:	0304                	addi	s1,sp,384
    11ca:	0306                	slli	t1,t1,0x1
    11cc:	0910                	addi	a2,sp,144
    11ce:	0006                	c.slli	zero,0x1
    11d0:	0501                	addi	a0,a0,0
    11d2:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    11d6:	00030603          	lb	a2,0(t1)
    11da:	0009                	c.nop	2
    11dc:	0100                	addi	s0,sp,128
    11de:	2505                	jal	17fe <result+0x15a>
    11e0:	0200                	addi	s0,sp,256
    11e2:	0304                	addi	s1,sp,384
    11e4:	0306                	slli	t1,t1,0x1
    11e6:	097f                	0x97f
    11e8:	000c                	0xc
    11ea:	0501                	addi	a0,a0,0
    11ec:	033c                	addi	a5,sp,392
    11ee:	090a                	slli	s2,s2,0x2
    11f0:	0006                	c.slli	zero,0x1
    11f2:	0501                	addi	a0,a0,0
    11f4:	0305                	addi	t1,t1,1
    11f6:	0902                	c.slli64	s2
    11f8:	0000                	unimp
    11fa:	0301                	addi	t1,t1,0
    11fc:	0901                	addi	s2,s2,0
    11fe:	0000                	unimp
    1200:	0301                	addi	t1,t1,0
    1202:	0901                	addi	s2,s2,0
    1204:	0000                	unimp
    1206:	0501                	addi	a0,a0,0
    1208:	0609                	addi	a2,a2,2
    120a:	00090003          	lb	zero,0(s2)
    120e:	0100                	addi	s0,sp,128
    1210:	3c05                	jal	c40 <ntru_encyrpt+0x6e>
    1212:	04097c03          	0x4097c03
    1216:	0100                	addi	s0,sp,128
    1218:	0905                	addi	s2,s2,1
    121a:	02090403          	lb	s0,32(s2)
    121e:	0100                	addi	s0,sp,128
    1220:	3c05                	jal	c50 <ntru_encyrpt+0x7e>
    1222:	04097c03          	0x4097c03
    1226:	0100                	addi	s0,sp,128
    1228:	0905                	addi	s2,s2,1
    122a:	1c090403          	lb	s0,448(s2)
    122e:	0100                	addi	s0,sp,128
    1230:	06090103          	lb	sp,96(s2)
    1234:	0100                	addi	s0,sp,128
    1236:	06090103          	lb	sp,96(s2)
    123a:	0100                	addi	s0,sp,128
    123c:	06090203          	lb	tp,96(s2)
    1240:	0100                	addi	s0,sp,128
    1242:	06090103          	lb	sp,96(s2)
    1246:	0100                	addi	s0,sp,128
    1248:	06090103          	lb	sp,96(s2)
    124c:	0100                	addi	s0,sp,128
    124e:	06090103          	lb	sp,96(s2)
    1252:	0100                	addi	s0,sp,128
    1254:	3c05                	jal	c84 <ntru_deceypt+0x1e>
    1256:	04097503          	0x4097503
    125a:	0100                	addi	s0,sp,128
    125c:	0905                	addi	s2,s2,1
    125e:	06090403          	lb	s0,96(s2)
    1262:	0100                	addi	s0,sp,128
    1264:	0505                	addi	a0,a0,1
    1266:	0306                	slli	t1,t1,0x1
    1268:	0901                	addi	s2,s2,0
    126a:	0004                	0x4
    126c:	0301                	addi	t1,t1,0
    126e:	0901                	addi	s2,s2,0
    1270:	0000                	unimp
    1272:	0301                	addi	t1,t1,0
    1274:	0902                	c.slli64	s2
    1276:	0000                	unimp
    1278:	0301                	addi	t1,t1,0
    127a:	0901                	addi	s2,s2,0
    127c:	0000                	unimp
    127e:	0301                	addi	t1,t1,0
    1280:	0901                	addi	s2,s2,0
    1282:	0000                	unimp
    1284:	0301                	addi	t1,t1,0
    1286:	0901                	addi	s2,s2,0
    1288:	0000                	unimp
    128a:	0501                	addi	a0,a0,0
    128c:	0609                	addi	a2,a2,2
    128e:	00090003          	lb	zero,0(s2)
    1292:	0100                	addi	s0,sp,128
    1294:	0505                	addi	a0,a0,1
    1296:	0306                	slli	t1,t1,0x1
    1298:	0901                	addi	s2,s2,0
    129a:	0002                	c.slli64	zero
    129c:	0301                	addi	t1,t1,0
    129e:	0901                	addi	s2,s2,0
    12a0:	0000                	unimp
    12a2:	0301                	addi	t1,t1,0
    12a4:	0901                	addi	s2,s2,0
    12a6:	0000                	unimp
    12a8:	0301                	addi	t1,t1,0
    12aa:	0901                	addi	s2,s2,0
    12ac:	0000                	unimp
    12ae:	0301                	addi	t1,t1,0
    12b0:	0902                	c.slli64	s2
    12b2:	0000                	unimp
    12b4:	0301                	addi	t1,t1,0
    12b6:	0901                	addi	s2,s2,0
    12b8:	0000                	unimp
    12ba:	0501                	addi	a0,a0,0
    12bc:	060c                	addi	a1,sp,768
    12be:	00090003          	lb	zero,0(s2)
    12c2:	0100                	addi	s0,sp,128
    12c4:	1105                	addi	sp,sp,-31
    12c6:	02090303          	lb	t1,32(s2)
    12ca:	0100                	addi	s0,sp,128
    12cc:	0200                	addi	s0,sp,256
    12ce:	0104                	addi	s1,sp,128
    12d0:	0306                	slli	t1,t1,0x1
    12d2:	097d                	addi	s2,s2,31
    12d4:	0008                	0x8
    12d6:	0501                	addi	a0,a0,0
    12d8:	0005                	c.nop	1
    12da:	0402                	c.slli64	s0
    12dc:	0601                	addi	a2,a2,0
    12de:	00090003          	lb	zero,0(s2)
    12e2:	0100                	addi	s0,sp,128
    12e4:	0306                	slli	t1,t1,0x1
    12e6:	0906                	slli	s2,s2,0x1
    12e8:	0004                	0x4
    12ea:	0301                	addi	t1,t1,0
    12ec:	0901                	addi	s2,s2,0
    12ee:	0008                	0x8
    12f0:	0301                	addi	t1,t1,0
    12f2:	0905                	addi	s2,s2,1
    12f4:	0008                	0x8
    12f6:	0501                	addi	a0,a0,0
    12f8:	060d                	addi	a2,a2,3
    12fa:	00090003          	lb	zero,0(s2)
    12fe:	0100                	addi	s0,sp,128
    1300:	0505                	addi	a0,a0,1
    1302:	0306                	slli	t1,t1,0x1
    1304:	00060903          	lb	s2,0(a2)
    1308:	0501                	addi	a0,a0,0
    130a:	0900030b          	0x900030b
    130e:	0000                	unimp
    1310:	0501                	addi	a0,a0,0
    1312:	0624                	addi	s1,sp,776
    1314:	00091603          	lh	a2,0(s2)
    1318:	0100                	addi	s0,sp,128
    131a:	1905                	addi	s2,s2,-31
    131c:	08093503          	0x8093503
    1320:	0100                	addi	s0,sp,128
    1322:	0905                	addi	s2,s2,1
    1324:	0306                	slli	t1,t1,0x1
    1326:	08097fb7          	lui	t6,0x8097
    132a:	0100                	addi	s0,sp,128
    132c:	0505                	addi	a0,a0,1
    132e:	00090803          	lb	a6,0(s2)
    1332:	0100                	addi	s0,sp,128
    1334:	08090903          	lb	s2,128(s2)
    1338:	0100                	addi	s0,sp,128
    133a:	0905                	addi	s2,s2,1
    133c:	08090203          	lb	tp,128(s2)
    1340:	0100                	addi	s0,sp,128
    1342:	0f05                	addi	t5,t5,1
    1344:	0306                	slli	t1,t1,0x1
    1346:	0900                	addi	s0,sp,144
    1348:	0000                	unimp
    134a:	0501                	addi	a0,a0,0
    134c:	0609                	addi	a2,a2,2
    134e:	0c090103          	lb	sp,192(s2)
    1352:	0100                	addi	s0,sp,128
    1354:	1905                	addi	s2,s2,-31
    1356:	0200                	addi	s0,sp,256
    1358:	0104                	addi	s1,sp,128
    135a:	04090003          	lb	zero,64(s2)
    135e:	0100                	addi	s0,sp,128
    1360:	0905                	addi	s2,s2,1
    1362:	0200                	addi	s0,sp,256
    1364:	0104                	addi	s1,sp,128
    1366:	0306                	slli	t1,t1,0x1
    1368:	0900                	addi	s0,sp,144
    136a:	0000                	unimp
    136c:	0501                	addi	a0,a0,0
    136e:	0310                	addi	a2,sp,384
    1370:	0906                	slli	s2,s2,0x1
    1372:	000a                	c.slli	zero,0x2
    1374:	0501                	addi	a0,a0,0
    1376:	0015                	c.nop	5
    1378:	0402                	c.slli64	s0
    137a:	0601                	addi	a2,a2,0
    137c:	02090003          	lb	zero,32(s2)
    1380:	0100                	addi	s0,sp,128
    1382:	0905                	addi	s2,s2,1
    1384:	0200                	addi	s0,sp,256
    1386:	0104                	addi	s1,sp,128
    1388:	0306                	slli	t1,t1,0x1
    138a:	0900                	addi	s0,sp,144
    138c:	0000                	unimp
    138e:	0501                	addi	a0,a0,0
    1390:	0605                	addi	a2,a2,1
    1392:	04090c03          	lb	s8,64(s2)
    1396:	0100                	addi	s0,sp,128
    1398:	0905                	addi	s2,s2,1
    139a:	08090203          	lb	tp,128(s2)
    139e:	0100                	addi	s0,sp,128
    13a0:	1005                	c.nop	-31
    13a2:	0306                	slli	t1,t1,0x1
    13a4:	0900                	addi	s0,sp,144
    13a6:	0000                	unimp
    13a8:	0501                	addi	a0,a0,0
    13aa:	0605                	addi	a2,a2,1
    13ac:	0e090403          	lb	s0,224(s2)
    13b0:	0100                	addi	s0,sp,128
    13b2:	06090903          	lb	s2,96(s2)
    13b6:	0100                	addi	s0,sp,128
    13b8:	0905                	addi	s2,s2,1
    13ba:	08090403          	lb	s0,128(s2)
    13be:	0100                	addi	s0,sp,128
    13c0:	1005                	c.nop	-31
    13c2:	0306                	slli	t1,t1,0x1
    13c4:	0900                	addi	s0,sp,144
    13c6:	0000                	unimp
    13c8:	0501                	addi	a0,a0,0
    13ca:	0605                	addi	a2,a2,1
    13cc:	10090403          	lb	s0,256(s2)
    13d0:	0100                	addi	s0,sp,128
    13d2:	06090903          	lb	s2,96(s2)
    13d6:	0100                	addi	s0,sp,128
    13d8:	0905                	addi	s2,s2,1
    13da:	08090203          	lb	tp,128(s2)
    13de:	0100                	addi	s0,sp,128
    13e0:	1005                	c.nop	-31
    13e2:	0306                	slli	t1,t1,0x1
    13e4:	0900                	addi	s0,sp,144
    13e6:	0002                	c.slli64	zero
    13e8:	0501                	addi	a0,a0,0
    13ea:	0015                	c.nop	5
    13ec:	0402                	c.slli64	s0
    13ee:	0601                	addi	a2,a2,0
    13f0:	02090003          	lb	zero,32(s2)
    13f4:	0100                	addi	s0,sp,128
    13f6:	0905                	addi	s2,s2,1
    13f8:	0200                	addi	s0,sp,256
    13fa:	0104                	addi	s1,sp,128
    13fc:	0306                	slli	t1,t1,0x1
    13fe:	0900                	addi	s0,sp,144
    1400:	0000                	unimp
    1402:	0501                	addi	a0,a0,0
    1404:	0605                	addi	a2,a2,1
    1406:	04090b03          	lb	s6,64(s2)
    140a:	0100                	addi	s0,sp,128
    140c:	0105                	addi	sp,sp,1
    140e:	08090403          	lb	s0,128(s2)
    1412:	0100                	addi	s0,sp,128
    1414:	08090103          	lb	sp,128(s2)
    1418:	0100                	addi	s0,sp,128
    141a:	08090103          	lb	sp,128(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	08090103          	lb	sp,128(s2)
    1424:	0100                	addi	s0,sp,128
    1426:	0905                	addi	s2,s2,1
    1428:	08090203          	lb	tp,128(s2)
    142c:	0100                	addi	s0,sp,128
    142e:	1205                	addi	tp,tp,-31
    1430:	0306                	slli	t1,t1,0x1
    1432:	7fa4                	flw	fs1,120(a5)
    1434:	0009                	c.nop	2
    1436:	0100                	addi	s0,sp,128
    1438:	1005                	c.nop	-31
    143a:	0900dc03          	lhu	s8,144(ra)
    143e:	0002                	c.slli64	zero
    1440:	0501                	addi	a0,a0,0
    1442:	0015                	c.nop	5
    1444:	0402                	c.slli64	s0
    1446:	0601                	addi	a2,a2,0
    1448:	02090003          	lb	zero,32(s2)
    144c:	0100                	addi	s0,sp,128
    144e:	0905                	addi	s2,s2,1
    1450:	0200                	addi	s0,sp,256
    1452:	0104                	addi	s1,sp,128
    1454:	0306                	slli	t1,t1,0x1
    1456:	0900                	addi	s0,sp,144
    1458:	0000                	unimp
    145a:	0501                	addi	a0,a0,0
    145c:	a203060b          	0xa203060b
    1460:	097f                	0x97f
    1462:	0004                	0x4
    1464:	0501                	addi	a0,a0,0
    1466:	0610                	addi	a2,sp,768
    1468:	0900e903          	0x900e903
    146c:	0004                	0x4
    146e:	0301                	addi	t1,t1,0
    1470:	0901                	addi	s2,s2,0
    1472:	0002                	c.slli64	zero
    1474:	0501                	addi	a0,a0,0
    1476:	0015                	c.nop	5
    1478:	0402                	c.slli64	s0
    147a:	0601                	addi	a2,a2,0
    147c:	02097f03          	0x2097f03
    1480:	0100                	addi	s0,sp,128
    1482:	0905                	addi	s2,s2,1
    1484:	0200                	addi	s0,sp,256
    1486:	0104                	addi	s1,sp,128
    1488:	0306                	slli	t1,t1,0x1
    148a:	0900                	addi	s0,sp,144
    148c:	0000                	unimp
    148e:	0501                	addi	a0,a0,0
    1490:	0015                	c.nop	5
    1492:	0402                	c.slli64	s0
    1494:	0601                	addi	a2,a2,0
    1496:	0c090c03          	lb	s8,192(s2)
    149a:	0100                	addi	s0,sp,128
    149c:	0905                	addi	s2,s2,1
    149e:	0200                	addi	s0,sp,256
    14a0:	0104                	addi	s1,sp,128
    14a2:	0306                	slli	t1,t1,0x1
    14a4:	0900                	addi	s0,sp,144
    14a6:	0000                	unimp
    14a8:	0601                	addi	a2,a2,0
    14aa:	04090503          	lb	a0,64(s2)
    14ae:	0100                	addi	s0,sp,128
    14b0:	00090103          	lb	sp,0(s2)
    14b4:	0100                	addi	s0,sp,128
    14b6:	0505                	addi	a0,a0,1
    14b8:	0306                	slli	t1,t1,0x1
    14ba:	0901                	addi	s2,s2,0
    14bc:	0000                	unimp
    14be:	0501                	addi	a0,a0,0
    14c0:	0009                	c.nop	2
    14c2:	0402                	c.slli64	s0
    14c4:	f8030603          	lb	a2,-128(t1)
    14c8:	097e                	slli	s2,s2,0x1f
    14ca:	002a                	c.slli	zero,0xa
    14cc:	0501                	addi	a0,a0,0
    14ce:	0011                	c.nop	4
    14d0:	0402                	c.slli64	s0
    14d2:	00030603          	lb	a2,0(t1)
    14d6:	0409                	addi	s0,s0,2
    14d8:	0100                	addi	s0,sp,128
    14da:	0200                	addi	s0,sp,256
    14dc:	0304                	addi	s1,sp,384
    14de:	04090103          	lb	sp,64(s2)
    14e2:	0100                	addi	s0,sp,128
    14e4:	0200                	addi	s0,sp,256
    14e6:	0304                	addi	s1,sp,384
    14e8:	02097f03          	0x2097f03
    14ec:	0100                	addi	s0,sp,128
    14ee:	0905                	addi	s2,s2,1
    14f0:	0200                	addi	s0,sp,256
    14f2:	0304                	addi	s1,sp,384
    14f4:	0306                	slli	t1,t1,0x1
    14f6:	0901                	addi	s2,s2,0
    14f8:	0004                	0x4
    14fa:	0501                	addi	a0,a0,0
    14fc:	0011                	c.nop	4
    14fe:	0402                	c.slli64	s0
    1500:	00030603          	lb	a2,0(t1)
    1504:	0009                	c.nop	2
    1506:	0100                	addi	s0,sp,128
    1508:	1b05                	addi	s6,s6,-31
    150a:	0200                	addi	s0,sp,256
    150c:	0304                	addi	s1,sp,384
    150e:	0306                	slli	t1,t1,0x1
    1510:	097c                	addi	a5,sp,156
    1512:	0004                	0x4
    1514:	0501                	addi	a0,a0,0
    1516:	000d                	c.nop	3
    1518:	0402                	c.slli64	s0
    151a:	09260303          	lb	t1,146(a2)
    151e:	0004                	0x4
    1520:	0501                	addi	a0,a0,0
    1522:	0022                	c.slli	zero,0x8
    1524:	0402                	c.slli64	s0
    1526:	00030603          	lb	a2,0(t1)
    152a:	0009                	c.nop	2
    152c:	0100                	addi	s0,sp,128
    152e:	2a05                	jal	165e <product2+0x212>
    1530:	0200                	addi	s0,sp,256
    1532:	0304                	addi	s1,sp,384
    1534:	08097f03          	0x8097f03
    1538:	0100                	addi	s0,sp,128
    153a:	1d05                	addi	s10,s10,-31
    153c:	0200                	addi	s0,sp,256
    153e:	0304                	addi	s1,sp,384
    1540:	04090103          	lb	sp,64(s2)
    1544:	0100                	addi	s0,sp,128
    1546:	2a05                	jal	1676 <product2+0x22a>
    1548:	0200                	addi	s0,sp,256
    154a:	0304                	addi	s1,sp,384
    154c:	0306                	slli	t1,t1,0x1
    154e:	097f                	0x97f
    1550:	0004                	0x4
    1552:	0501                	addi	a0,a0,0
    1554:	000d                	c.nop	3
    1556:	0402                	c.slli64	s0
    1558:	09070303          	lb	t1,144(a4)
    155c:	0002                	c.slli64	zero
    155e:	0501                	addi	a0,a0,0
    1560:	0402001b          	0x402001b
    1564:	00030603          	lb	a2,0(t1)
    1568:	0009                	c.nop	2
    156a:	0100                	addi	s0,sp,128
    156c:	2305                	jal	1a8c <random_keys>
    156e:	0200                	addi	s0,sp,256
    1570:	0304                	addi	s1,sp,384
    1572:	04090003          	lb	zero,64(s2)
    1576:	0100                	addi	s0,sp,128
    1578:	1f05                	addi	t5,t5,-31
    157a:	0200                	addi	s0,sp,256
    157c:	0304                	addi	s1,sp,384
    157e:	04090003          	lb	zero,64(s2)
    1582:	0100                	addi	s0,sp,128
    1584:	1505                	addi	a0,a0,-31
    1586:	0200                	addi	s0,sp,256
    1588:	0304                	addi	s1,sp,384
    158a:	04090003          	lb	zero,64(s2)
    158e:	0100                	addi	s0,sp,128
    1590:	2005                	jal	15b0 <product2+0x164>
    1592:	0200                	addi	s0,sp,256
    1594:	0304                	addi	s1,sp,384
    1596:	04097f03          	0x4097f03
    159a:	0100                	addi	s0,sp,128
    159c:	1f05                	addi	t5,t5,-31
    159e:	0200                	addi	s0,sp,256
    15a0:	0304                	addi	s1,sp,384
    15a2:	02090103          	lb	sp,32(s2)
    15a6:	0100                	addi	s0,sp,128
    15a8:	1505                	addi	a0,a0,-31
    15aa:	0200                	addi	s0,sp,256
    15ac:	0304                	addi	s1,sp,384
    15ae:	02090003          	lb	zero,32(s2)
    15b2:	0100                	addi	s0,sp,128
    15b4:	2005                	jal	15d4 <product2+0x188>
    15b6:	0200                	addi	s0,sp,256
    15b8:	0304                	addi	s1,sp,384
    15ba:	0306                	slli	t1,t1,0x1
    15bc:	097f                	0x97f
    15be:	0002                	c.slli64	zero
    15c0:	0501                	addi	a0,a0,0
    15c2:	000d                	c.nop	3
    15c4:	0402                	c.slli64	s0
    15c6:	092f0303          	lb	t1,146(t5)
    15ca:	0004                	0x4
    15cc:	0501                	addi	a0,a0,0
    15ce:	0019                	c.nop	6
    15d0:	0402                	c.slli64	s0
    15d2:	00030603          	lb	a2,0(t1)
    15d6:	0009                	c.nop	2
    15d8:	0100                	addi	s0,sp,128
    15da:	2305                	jal	1afa <random_keys+0x6e>
    15dc:	0200                	addi	s0,sp,256
    15de:	0304                	addi	s1,sp,384
    15e0:	04090003          	lb	zero,64(s2)
    15e4:	0100                	addi	s0,sp,128
    15e6:	1d05                	addi	s10,s10,-31
    15e8:	0200                	addi	s0,sp,256
    15ea:	0304                	addi	s1,sp,384
    15ec:	04090003          	lb	zero,64(s2)
    15f0:	0100                	addi	s0,sp,128
    15f2:	1305                	addi	t1,t1,-31
    15f4:	0200                	addi	s0,sp,256
    15f6:	0304                	addi	s1,sp,384
    15f8:	04090003          	lb	zero,64(s2)
    15fc:	0100                	addi	s0,sp,128
    15fe:	2005                	jal	161e <product2+0x1d2>
    1600:	0200                	addi	s0,sp,256
    1602:	0304                	addi	s1,sp,384
    1604:	04097f03          	0x4097f03
    1608:	0100                	addi	s0,sp,128
    160a:	1d05                	addi	s10,s10,-31
    160c:	0200                	addi	s0,sp,256
    160e:	0304                	addi	s1,sp,384
    1610:	02090103          	lb	sp,32(s2)
    1614:	0100                	addi	s0,sp,128
    1616:	1305                	addi	t1,t1,-31
    1618:	0200                	addi	s0,sp,256
    161a:	0304                	addi	s1,sp,384
    161c:	02090003          	lb	zero,32(s2)
    1620:	0100                	addi	s0,sp,128
    1622:	2005                	jal	1642 <product2+0x1f6>
    1624:	0200                	addi	s0,sp,256
    1626:	0304                	addi	s1,sp,384
    1628:	0306                	slli	t1,t1,0x1
    162a:	097f                	0x97f
    162c:	0002                	c.slli64	zero
    162e:	0501                	addi	a0,a0,0
    1630:	0402000f          	0x402000f
    1634:	09190303          	lb	t1,145(s2)
    1638:	0004                	0x4
    163a:	0501                	addi	a0,a0,0
    163c:	04020017          	auipc	zero,0x4020
    1640:	00030603          	lb	a2,0(t1)
    1644:	0409                	addi	s0,s0,2
    1646:	0100                	addi	s0,sp,128
    1648:	1b05                	addi	s6,s6,-31
    164a:	0200                	addi	s0,sp,256
    164c:	0304                	addi	s1,sp,384
    164e:	04090103          	lb	sp,64(s2)
    1652:	0100                	addi	s0,sp,128
    1654:	1605                	addi	a2,a2,-31
    1656:	0200                	addi	s0,sp,256
    1658:	0304                	addi	s1,sp,384
    165a:	02090003          	lb	zero,32(s2)
    165e:	0100                	addi	s0,sp,128
    1660:	1705                	addi	a4,a4,-31
    1662:	0200                	addi	s0,sp,256
    1664:	0304                	addi	s1,sp,384
    1666:	02097f03          	0x2097f03
    166a:	0100                	addi	s0,sp,128
    166c:	0d05                	addi	s10,s10,1
    166e:	0200                	addi	s0,sp,256
    1670:	0304                	addi	s1,sp,384
    1672:	0306                	slli	t1,t1,0x1
    1674:	0901                	addi	s2,s2,0
    1676:	0004                	0x4
    1678:	0501                	addi	a0,a0,0
    167a:	0020                	addi	s0,sp,8
    167c:	0402                	c.slli64	s0
    167e:	7a030603          	lb	a2,1952(t1)
    1682:	0009                	c.nop	2
    1684:	0100                	addi	s0,sp,128
    1686:	1605                	addi	a2,a2,-31
    1688:	0200                	addi	s0,sp,256
    168a:	0304                	addi	s1,sp,384
    168c:	02090603          	lb	a2,32(s2)
    1690:	0100                	addi	s0,sp,128
    1692:	2005                	jal	16b2 <result+0xe>
    1694:	0200                	addi	s0,sp,256
    1696:	0304                	addi	s1,sp,384
    1698:	0306                	slli	t1,t1,0x1
    169a:	097a                	slli	s2,s2,0x1e
    169c:	0002                	c.slli64	zero
    169e:	0501                	addi	a0,a0,0
    16a0:	030d                	addi	t1,t1,3
    16a2:	090c                	addi	a1,sp,144
    16a4:	0002                	c.slli64	zero
    16a6:	0501                	addi	a0,a0,0
    16a8:	0003061b          	0x3061b
    16ac:	0009                	c.nop	2
    16ae:	0100                	addi	s0,sp,128
    16b0:	2005                	jal	16d0 <result+0x2c>
    16b2:	08090003          	lb	zero,128(s2)
    16b6:	0100                	addi	s0,sp,128
    16b8:	1005                	c.nop	-31
    16ba:	04090003          	lb	zero,64(s2)
    16be:	0100                	addi	s0,sp,128
    16c0:	1e05                	addi	t3,t3,-31
    16c2:	0200                	addi	s0,sp,256
    16c4:	0204                	addi	s1,sp,256
    16c6:	0306                	slli	t1,t1,0x1
    16c8:	097f                	0x97f
    16ca:	0004                	0x4
    16cc:	0501                	addi	a0,a0,0
    16ce:	000d                	c.nop	3
    16d0:	0402                	c.slli64	s0
    16d2:	090d0303          	lb	t1,144(s10)
    16d6:	0004                	0x4
    16d8:	0501                	addi	a0,a0,0
    16da:	0020                	addi	s0,sp,8
    16dc:	0402                	c.slli64	s0
    16de:	00030603          	lb	a2,0(t1)
    16e2:	0009                	c.nop	2
    16e4:	0100                	addi	s0,sp,128
    16e6:	0200                	addi	s0,sp,256
    16e8:	0304                	addi	s1,sp,384
    16ea:	02097f03          	0x2097f03
    16ee:	0100                	addi	s0,sp,128
    16f0:	0200                	addi	s0,sp,256
    16f2:	0304                	addi	s1,sp,384
    16f4:	04090103          	lb	sp,64(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	2505                	jal	1d1a <random_keys+0x28e>
    16fc:	0200                	addi	s0,sp,256
    16fe:	0304                	addi	s1,sp,384
    1700:	04090003          	lb	zero,64(s2)
    1704:	0100                	addi	s0,sp,128
    1706:	1505                	addi	a0,a0,-31
    1708:	0200                	addi	s0,sp,256
    170a:	0304                	addi	s1,sp,384
    170c:	04090003          	lb	zero,64(s2)
    1710:	0100                	addi	s0,sp,128
    1712:	2005                	jal	1732 <result+0x8e>
    1714:	0200                	addi	s0,sp,256
    1716:	0304                	addi	s1,sp,384
    1718:	0306                	slli	t1,t1,0x1
    171a:	097f                	0x97f
    171c:	0004                	0x4
    171e:	0501                	addi	a0,a0,0
    1720:	0328                	addi	a0,sp,392
    1722:	090c                	addi	a1,sp,144
    1724:	0002                	c.slli64	zero
    1726:	0501                	addi	a0,a0,0
    1728:	0305                	addi	t1,t1,1
    172a:	0902                	c.slli64	s2
    172c:	0000                	unimp
    172e:	0501                	addi	a0,a0,0
    1730:	0628                	addi	a0,sp,776
    1732:	00097e03          	0x97e03
    1736:	0100                	addi	s0,sp,128
    1738:	36090003          	lb	zero,864(s2)
    173c:	0100                	addi	s0,sp,128
    173e:	0905                	addi	s2,s2,1
    1740:	04090203          	lb	tp,64(s2)
    1744:	0100                	addi	s0,sp,128
    1746:	10090103          	lb	sp,256(s2)
    174a:	0100                	addi	s0,sp,128
    174c:	0a097f03          	0xa097f03
    1750:	0100                	addi	s0,sp,128
    1752:	0505                	addi	a0,a0,1
    1754:	0306                	slli	t1,t1,0x1
    1756:	0901                	addi	s2,s2,0
    1758:	006c                	addi	a1,sp,12
    175a:	0501                	addi	a0,a0,0
    175c:	0610                	addi	a2,sp,768
    175e:	00090603          	lb	a2,0(s2)
    1762:	0100                	addi	s0,sp,128
    1764:	0905                	addi	s2,s2,1
    1766:	04097a03          	0x4097a03
    176a:	0100                	addi	s0,sp,128
    176c:	02090603          	lb	a2,32(s2)
    1770:	0100                	addi	s0,sp,128
    1772:	0e05                	addi	t3,t3,1
    1774:	0e090503          	lb	a0,224(s2)
    1778:	0100                	addi	s0,sp,128
    177a:	0905                	addi	s2,s2,1
    177c:	0a097503          	0xa097503
    1780:	0100                	addi	s0,sp,128
    1782:	0505                	addi	a0,a0,1
    1784:	0306                	slli	t1,t1,0x1
    1786:	0902                	c.slli64	s2
    1788:	0064                	addi	s1,sp,12
    178a:	0301                	addi	t1,t1,0
    178c:	0901                	addi	s2,s2,0
    178e:	0000                	unimp
    1790:	0301                	addi	t1,t1,0
    1792:	0901                	addi	s2,s2,0
    1794:	0000                	unimp
    1796:	0301                	addi	t1,t1,0
    1798:	0901                	addi	s2,s2,0
    179a:	0000                	unimp
    179c:	0301                	addi	t1,t1,0
    179e:	0901                	addi	s2,s2,0
    17a0:	0000                	unimp
    17a2:	0301                	addi	t1,t1,0
    17a4:	0901                	addi	s2,s2,0
    17a6:	0000                	unimp
    17a8:	0301                	addi	t1,t1,0
    17aa:	0901                	addi	s2,s2,0
    17ac:	0000                	unimp
    17ae:	0301                	addi	t1,t1,0
    17b0:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    17b4:	0301                	addi	t1,t1,0
    17b6:	0901                	addi	s2,s2,0
    17b8:	0000                	unimp
    17ba:	0501                	addi	a0,a0,0
    17bc:	060e                	slli	a2,a2,0x3
    17be:	00090003          	lb	zero,0(s2)
    17c2:	0100                	addi	s0,sp,128
    17c4:	0505                	addi	a0,a0,1
    17c6:	0306                	slli	t1,t1,0x1
    17c8:	0902                	c.slli64	s2
    17ca:	0004                	0x4
    17cc:	0501                	addi	a0,a0,0
    17ce:	0003060b          	0x3060b
    17d2:	0009                	c.nop	2
    17d4:	0100                	addi	s0,sp,128
    17d6:	1005                	c.nop	-31
    17d8:	0200                	addi	s0,sp,256
    17da:	0104                	addi	s1,sp,128
    17dc:	0306                	slli	t1,t1,0x1
    17de:	0900                	addi	s0,sp,144
    17e0:	0002                	c.slli64	zero
    17e2:	0501                	addi	a0,a0,0
    17e4:	0005                	c.nop	1
    17e6:	0402                	c.slli64	s0
    17e8:	0601                	addi	a2,a2,0
    17ea:	00090003          	lb	zero,0(s2)
    17ee:	0100                	addi	s0,sp,128
    17f0:	06090603          	lb	a2,96(s2)
    17f4:	0100                	addi	s0,sp,128
    17f6:	1105                	addi	sp,sp,-31
    17f8:	0200                	addi	s0,sp,256
    17fa:	0104                	addi	s1,sp,128
    17fc:	0306                	slli	t1,t1,0x1
    17fe:	0900                	addi	s0,sp,144
    1800:	0004                	0x4
    1802:	0501                	addi	a0,a0,0
    1804:	0005                	c.nop	1
    1806:	0402                	c.slli64	s0
    1808:	0601                	addi	a2,a2,0
    180a:	00090003          	lb	zero,0(s2)
    180e:	0100                	addi	s0,sp,128
    1810:	0b05                	addi	s6,s6,1
    1812:	04090703          	lb	a4,64(s2)
    1816:	0100                	addi	s0,sp,128
    1818:	1805                	addi	a6,a6,-31
    181a:	02090103          	lb	sp,32(s2)
    181e:	0100                	addi	s0,sp,128
    1820:	1005                	c.nop	-31
    1822:	0200                	addi	s0,sp,256
    1824:	0104                	addi	s1,sp,128
    1826:	0306                	slli	t1,t1,0x1
    1828:	097f                	0x97f
    182a:	0008                	0x8
    182c:	0501                	addi	a0,a0,0
    182e:	0005                	c.nop	1
    1830:	0402                	c.slli64	s0
    1832:	0601                	addi	a2,a2,0
    1834:	00090003          	lb	zero,0(s2)
    1838:	0100                	addi	s0,sp,128
    183a:	1605                	addi	a2,a2,-31
    183c:	08090503          	lb	a0,128(s2)
    1840:	0100                	addi	s0,sp,128
    1842:	1805                	addi	a6,a6,-31
    1844:	08090103          	lb	sp,128(s2)
    1848:	0100                	addi	s0,sp,128
    184a:	1005                	c.nop	-31
    184c:	0200                	addi	s0,sp,256
    184e:	0104                	addi	s1,sp,128
    1850:	0306                	slli	t1,t1,0x1
    1852:	097f                	0x97f
    1854:	0008                	0x8
    1856:	0501                	addi	a0,a0,0
    1858:	0005                	c.nop	1
    185a:	0402                	c.slli64	s0
    185c:	0601                	addi	a2,a2,0
    185e:	00090003          	lb	zero,0(s2)
    1862:	0100                	addi	s0,sp,128
    1864:	0306                	slli	t1,t1,0x1
    1866:	0905                	addi	s2,s2,1
    1868:	0004                	0x4
    186a:	0501                	addi	a0,a0,0
    186c:	061a                	slli	a2,a2,0x6
    186e:	00090303          	lb	t1,0(s2)
    1872:	0100                	addi	s0,sp,128
    1874:	0a05                	addi	s4,s4,1
    1876:	06097d03          	0x6097d03
    187a:	0100                	addi	s0,sp,128
    187c:	0505                	addi	a0,a0,1
    187e:	0306                	slli	t1,t1,0x1
    1880:	000c0903          	lb	s2,0(s8)
    1884:	0501                	addi	a0,a0,0
    1886:	0618                	addi	a4,sp,768
    1888:	02090103          	lb	sp,32(s2)
    188c:	0100                	addi	s0,sp,128
    188e:	1405                	addi	s0,s0,-31
    1890:	0200                	addi	s0,sp,256
    1892:	0104                	addi	s1,sp,128
    1894:	0306                	slli	t1,t1,0x1
    1896:	097f                	0x97f
    1898:	0008                	0x8
    189a:	0501                	addi	a0,a0,0
    189c:	0005                	c.nop	1
    189e:	0402                	c.slli64	s0
    18a0:	0601                	addi	a2,a2,0
    18a2:	00090003          	lb	zero,0(s2)
    18a6:	0100                	addi	s0,sp,128
    18a8:	0306                	slli	t1,t1,0x1
    18aa:	0906                	slli	s2,s2,0x1
    18ac:	0004                	0x4
    18ae:	0501                	addi	a0,a0,0
    18b0:	060a                	slli	a2,a2,0x2
    18b2:	00090003          	lb	zero,0(s2)
    18b6:	0100                	addi	s0,sp,128
    18b8:	0505                	addi	a0,a0,1
    18ba:	0306                	slli	t1,t1,0x1
    18bc:	0904                	addi	s1,sp,144
    18be:	000c                	0xc
    18c0:	0501                	addi	a0,a0,0
    18c2:	061a                	slli	a2,a2,0x6
    18c4:	06090003          	lb	zero,96(s2)
    18c8:	0100                	addi	s0,sp,128
    18ca:	1805                	addi	a6,a6,-31
    18cc:	02090103          	lb	sp,32(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	1405                	addi	s0,s0,-31
    18d4:	0200                	addi	s0,sp,256
    18d6:	0104                	addi	s1,sp,128
    18d8:	0306                	slli	t1,t1,0x1
    18da:	097f                	0x97f
    18dc:	0008                	0x8
    18de:	0501                	addi	a0,a0,0
    18e0:	0005                	c.nop	1
    18e2:	0402                	c.slli64	s0
    18e4:	0601                	addi	a2,a2,0
    18e6:	00090003          	lb	zero,0(s2)
    18ea:	0100                	addi	s0,sp,128
    18ec:	0306                	slli	t1,t1,0x1
    18ee:	0905                	addi	s2,s2,1
    18f0:	0004                	0x4
    18f2:	0501                	addi	a0,a0,0
    18f4:	060a                	slli	a2,a2,0x2
    18f6:	00090003          	lb	zero,0(s2)
    18fa:	0100                	addi	s0,sp,128
    18fc:	0505                	addi	a0,a0,1
    18fe:	0306                	slli	t1,t1,0x1
    1900:	000a0903          	lb	s2,0(s4)
    1904:	0501                	addi	a0,a0,0
    1906:	0003060b          	0x3060b
    190a:	0209                	addi	tp,tp,2
    190c:	0100                	addi	s0,sp,128
    190e:	1805                	addi	a6,a6,-31
    1910:	02090003          	lb	zero,32(s2)
    1914:	0100                	addi	s0,sp,128
    1916:	1005                	c.nop	-31
    1918:	0200                	addi	s0,sp,256
    191a:	0104                	addi	s1,sp,128
    191c:	0306                	slli	t1,t1,0x1
    191e:	0900                	addi	s0,sp,144
    1920:	0004                	0x4
    1922:	0501                	addi	a0,a0,0
    1924:	0005                	c.nop	1
    1926:	0402                	c.slli64	s0
    1928:	0601                	addi	a2,a2,0
    192a:	00090003          	lb	zero,0(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	0306                	slli	t1,t1,0x1
    1932:	0906                	slli	s2,s2,0x1
    1934:	0004                	0x4
    1936:	0501                	addi	a0,a0,0
    1938:	060a                	slli	a2,a2,0x2
    193a:	00090003          	lb	zero,0(s2)
    193e:	0100                	addi	s0,sp,128
    1940:	0505                	addi	a0,a0,1
    1942:	0306                	slli	t1,t1,0x1
    1944:	0904                	addi	s1,sp,144
    1946:	0008                	0x8
    1948:	0501                	addi	a0,a0,0
    194a:	061a                	slli	a2,a2,0x6
    194c:	00090003          	lb	zero,0(s2)
    1950:	0100                	addi	s0,sp,128
    1952:	1805                	addi	a6,a6,-31
    1954:	0a090103          	lb	sp,160(s2)
    1958:	0100                	addi	s0,sp,128
    195a:	1405                	addi	s0,s0,-31
    195c:	0200                	addi	s0,sp,256
    195e:	0104                	addi	s1,sp,128
    1960:	0306                	slli	t1,t1,0x1
    1962:	097f                	0x97f
    1964:	0008                	0x8
    1966:	0501                	addi	a0,a0,0
    1968:	0005                	c.nop	1
    196a:	0402                	c.slli64	s0
    196c:	0601                	addi	a2,a2,0
    196e:	02090003          	lb	zero,32(s2)
    1972:	0100                	addi	s0,sp,128
    1974:	1a05                	addi	s4,s4,-31
    1976:	04090503          	lb	a0,64(s2)
    197a:	0100                	addi	s0,sp,128
    197c:	1805                	addi	a6,a6,-31
    197e:	04090103          	lb	sp,64(s2)
    1982:	0100                	addi	s0,sp,128
    1984:	1a05                	addi	s4,s4,-31
    1986:	08097f03          	0x8097f03
    198a:	0100                	addi	s0,sp,128
    198c:	1405                	addi	s0,s0,-31
    198e:	0200                	addi	s0,sp,256
    1990:	0104                	addi	s1,sp,128
    1992:	0306                	slli	t1,t1,0x1
    1994:	0900                	addi	s0,sp,144
    1996:	0008                	0x8
    1998:	0501                	addi	a0,a0,0
    199a:	0005                	c.nop	1
    199c:	0402                	c.slli64	s0
    199e:	0601                	addi	a2,a2,0
    19a0:	00090003          	lb	zero,0(s2)
    19a4:	0100                	addi	s0,sp,128
    19a6:	0306                	slli	t1,t1,0x1
    19a8:	0906                	slli	s2,s2,0x1
    19aa:	0004                	0x4
    19ac:	0301                	addi	t1,t1,0
    19ae:	0902                	c.slli64	s2
    19b0:	0000                	unimp
    19b2:	0501                	addi	a0,a0,0
    19b4:	0601                	addi	a2,a2,0
    19b6:	00090103          	lb	sp,0(s2)
    19ba:	0100                	addi	s0,sp,128
    19bc:	0905                	addi	s2,s2,1
    19be:	0200                	addi	s0,sp,256
    19c0:	0304                	addi	s1,sp,384
    19c2:	0306                	slli	t1,t1,0x1
    19c4:	7fbd                	lui	t6,0xfffef
    19c6:	4009                	c.li	zero,2
    19c8:	0100                	addi	s0,sp,128
    19ca:	1205                	addi	tp,tp,-31
    19cc:	0200                	addi	s0,sp,256
    19ce:	0304                	addi	s1,sp,384
    19d0:	0306                	slli	t1,t1,0x1
    19d2:	0900                	addi	s0,sp,144
    19d4:	0000                	unimp
    19d6:	0501                	addi	a0,a0,0
    19d8:	04020017          	auipc	zero,0x4020
    19dc:	7f030603          	lb	a2,2032(t1)
    19e0:	0a09                	addi	s4,s4,2
    19e2:	0100                	addi	s0,sp,128
    19e4:	0905                	addi	s2,s2,1
    19e6:	0200                	addi	s0,sp,256
    19e8:	0304                	addi	s1,sp,384
    19ea:	04090703          	lb	a4,64(s2)
    19ee:	0100                	addi	s0,sp,128
    19f0:	0e05                	addi	t3,t3,1
    19f2:	0200                	addi	s0,sp,256
    19f4:	0304                	addi	s1,sp,384
    19f6:	0306                	slli	t1,t1,0x1
    19f8:	0900                	addi	s0,sp,144
    19fa:	0004                	0x4
    19fc:	0501                	addi	a0,a0,0
    19fe:	0009                	c.nop	2
    1a00:	0402                	c.slli64	s0
    1a02:	01030603          	lb	a2,16(t1)
    1a06:	0a09                	addi	s4,s4,2
    1a08:	0100                	addi	s0,sp,128
    1a0a:	0e05                	addi	t3,t3,1
    1a0c:	0200                	addi	s0,sp,256
    1a0e:	0304                	addi	s1,sp,384
    1a10:	0306                	slli	t1,t1,0x1
    1a12:	0900                	addi	s0,sp,144
    1a14:	0000                	unimp
    1a16:	0501                	addi	a0,a0,0
    1a18:	0019                	c.nop	6
    1a1a:	0402                	c.slli64	s0
    1a1c:	7e030603          	lb	a2,2016(t1)
    1a20:	0a09                	addi	s4,s4,2
    1a22:	0100                	addi	s0,sp,128
    1a24:	0905                	addi	s2,s2,1
    1a26:	0200                	addi	s0,sp,256
    1a28:	0304                	addi	s1,sp,384
    1a2a:	04090803          	lb	a6,64(s2)
    1a2e:	0100                	addi	s0,sp,128
    1a30:	1b05                	addi	s6,s6,-31
    1a32:	0200                	addi	s0,sp,256
    1a34:	0304                	addi	s1,sp,384
    1a36:	0306                	slli	t1,t1,0x1
    1a38:	0900                	addi	s0,sp,144
    1a3a:	0004                	0x4
    1a3c:	0501                	addi	a0,a0,0
    1a3e:	0018                	0x18
    1a40:	0402                	c.slli64	s0
    1a42:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a46:	0004                	0x4
    1a48:	0501                	addi	a0,a0,0
    1a4a:	0402001b          	0x402001b
    1a4e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a52:	0004                	0x4
    1a54:	0501                	addi	a0,a0,0
    1a56:	0018                	0x18
    1a58:	0402                	c.slli64	s0
    1a5a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a5e:	0002                	c.slli64	zero
    1a60:	0501                	addi	a0,a0,0
    1a62:	04020017          	auipc	zero,0x4020
    1a66:	097f0303          	lb	t1,151(t5)
    1a6a:	0002                	c.slli64	zero
    1a6c:	0501                	addi	a0,a0,0
    1a6e:	0018                	0x18
    1a70:	0402                	c.slli64	s0
    1a72:	09010303          	lb	t1,144(sp)
    1a76:	0002                	c.slli64	zero
    1a78:	0501                	addi	a0,a0,0
    1a7a:	04020017          	auipc	zero,0x4020
    1a7e:	7f030603          	lb	a2,2032(t1)
    1a82:	0209                	addi	tp,tp,2
    1a84:	0100                	addi	s0,sp,128
    1a86:	0905                	addi	s2,s2,1
    1a88:	0200                	addi	s0,sp,256
    1a8a:	0304                	addi	s1,sp,384
    1a8c:	02090603          	lb	a2,32(s2)
    1a90:	0100                	addi	s0,sp,128
    1a92:	1805                	addi	a6,a6,-31
    1a94:	0200                	addi	s0,sp,256
    1a96:	0304                	addi	s1,sp,384
    1a98:	0306                	slli	t1,t1,0x1
    1a9a:	0900                	addi	s0,sp,144
    1a9c:	0000                	unimp
    1a9e:	0501                	addi	a0,a0,0
    1aa0:	0402001b          	0x402001b
    1aa4:	7f030603          	lb	a2,2032(t1)
    1aa8:	0a09                	addi	s4,s4,2
    1aaa:	0100                	addi	s0,sp,128
    1aac:	0905                	addi	s2,s2,1
    1aae:	0200                	addi	s0,sp,256
    1ab0:	0304                	addi	s1,sp,384
    1ab2:	06090903          	lb	s2,96(s2)
    1ab6:	0100                	addi	s0,sp,128
    1ab8:	1c05                	addi	s8,s8,-31
    1aba:	0200                	addi	s0,sp,256
    1abc:	0304                	addi	s1,sp,384
    1abe:	0306                	slli	t1,t1,0x1
    1ac0:	0900                	addi	s0,sp,144
    1ac2:	0000                	unimp
    1ac4:	0501                	addi	a0,a0,0
    1ac6:	0018                	0x18
    1ac8:	0402                	c.slli64	s0
    1aca:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ace:	0002                	c.slli64	zero
    1ad0:	0501                	addi	a0,a0,0
    1ad2:	001f 0402 0603      	0x6030402001f
    1ad8:	08097f03          	0x8097f03
    1adc:	0100                	addi	s0,sp,128
    1ade:	0905                	addi	s2,s2,1
    1ae0:	0200                	addi	s0,sp,256
    1ae2:	0304                	addi	s1,sp,384
    1ae4:	06090b03          	lb	s6,96(s2)
    1ae8:	0100                	addi	s0,sp,128
    1aea:	1c05                	addi	s8,s8,-31
    1aec:	0200                	addi	s0,sp,256
    1aee:	0304                	addi	s1,sp,384
    1af0:	0306                	slli	t1,t1,0x1
    1af2:	0900                	addi	s0,sp,144
    1af4:	0004                	0x4
    1af6:	0501                	addi	a0,a0,0
    1af8:	0018                	0x18
    1afa:	0402                	c.slli64	s0
    1afc:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b00:	0008                	0x8
    1b02:	0501                	addi	a0,a0,0
    1b04:	001f 0402 0303      	0x3030402001f
    1b0a:	097f                	0x97f
    1b0c:	0002                	c.slli64	zero
    1b0e:	0501                	addi	a0,a0,0
    1b10:	0018                	0x18
    1b12:	0402                	c.slli64	s0
    1b14:	09010303          	lb	t1,144(sp)
    1b18:	0002                	c.slli64	zero
    1b1a:	0501                	addi	a0,a0,0
    1b1c:	001f 0402 0603      	0x6030402001f
    1b22:	02097f03          	0x2097f03
    1b26:	0100                	addi	s0,sp,128
    1b28:	0905                	addi	s2,s2,1
    1b2a:	0200                	addi	s0,sp,256
    1b2c:	0304                	addi	s1,sp,384
    1b2e:	02090903          	lb	s2,32(s2)
    1b32:	0100                	addi	s0,sp,128
    1b34:	1605                	addi	a2,a2,-31
    1b36:	0200                	addi	s0,sp,256
    1b38:	0304                	addi	s1,sp,384
    1b3a:	0306                	slli	t1,t1,0x1
    1b3c:	0900                	addi	s0,sp,144
    1b3e:	0000                	unimp
    1b40:	0501                	addi	a0,a0,0
    1b42:	001d                	c.nop	7
    1b44:	0402                	c.slli64	s0
    1b46:	097f0303          	lb	t1,151(t5)
    1b4a:	0002                	c.slli64	zero
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	0016                	c.slli	zero,0x5
    1b50:	0402                	c.slli64	s0
    1b52:	09010303          	lb	t1,144(sp)
    1b56:	0004                	0x4
    1b58:	0501                	addi	a0,a0,0
    1b5a:	0402000f          	0x402000f
    1b5e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b62:	0004                	0x4
    1b64:	0501                	addi	a0,a0,0
    1b66:	001d                	c.nop	7
    1b68:	0402                	c.slli64	s0
    1b6a:	7f030603          	lb	a2,2032(t1)
    1b6e:	0409                	addi	s0,s0,2
    1b70:	0100                	addi	s0,sp,128
    1b72:	0905                	addi	s2,s2,1
    1b74:	0200                	addi	s0,sp,256
    1b76:	0304                	addi	s1,sp,384
    1b78:	02090b03          	lb	s6,32(s2)
    1b7c:	0100                	addi	s0,sp,128
    1b7e:	1c05                	addi	s8,s8,-31
    1b80:	0200                	addi	s0,sp,256
    1b82:	0304                	addi	s1,sp,384
    1b84:	0306                	slli	t1,t1,0x1
    1b86:	0900                	addi	s0,sp,144
    1b88:	0000                	unimp
    1b8a:	0501                	addi	a0,a0,0
    1b8c:	0018                	0x18
    1b8e:	0402                	c.slli64	s0
    1b90:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b94:	0004                	0x4
    1b96:	0501                	addi	a0,a0,0
    1b98:	001f 0402 0603      	0x6030402001f
    1b9e:	08097f03          	0x8097f03
    1ba2:	0100                	addi	s0,sp,128
    1ba4:	0905                	addi	s2,s2,1
    1ba6:	0200                	addi	s0,sp,256
    1ba8:	0304                	addi	s1,sp,384
    1baa:	04090603          	lb	a2,64(s2)
    1bae:	0100                	addi	s0,sp,128
    1bb0:	1805                	addi	a6,a6,-31
    1bb2:	0200                	addi	s0,sp,256
    1bb4:	0304                	addi	s1,sp,384
    1bb6:	0306                	slli	t1,t1,0x1
    1bb8:	0900                	addi	s0,sp,144
    1bba:	0004                	0x4
    1bbc:	0501                	addi	a0,a0,0
    1bbe:	001f 0402 0303      	0x3030402001f
    1bc4:	0900                	addi	s0,sp,144
    1bc6:	0004                	0x4
    1bc8:	0501                	addi	a0,a0,0
    1bca:	0018                	0x18
    1bcc:	0402                	c.slli64	s0
    1bce:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1bd2:	0004                	0x4
    1bd4:	0501                	addi	a0,a0,0
    1bd6:	0021                	c.nop	8
    1bd8:	0402                	c.slli64	s0
    1bda:	097f0303          	lb	t1,151(t5)
    1bde:	0002                	c.slli64	zero
    1be0:	0501                	addi	a0,a0,0
    1be2:	0018                	0x18
    1be4:	0402                	c.slli64	s0
    1be6:	09010303          	lb	t1,144(sp)
    1bea:	0002                	c.slli64	zero
    1bec:	0501                	addi	a0,a0,0
    1bee:	0021                	c.nop	8
    1bf0:	0402                	c.slli64	s0
    1bf2:	7f030603          	lb	a2,2032(t1)
    1bf6:	0209                	addi	tp,tp,2
    1bf8:	0100                	addi	s0,sp,128
    1bfa:	4b05                	li	s6,1
    1bfc:	02090c03          	lb	s8,32(s2)
    1c00:	0100                	addi	s0,sp,128
    1c02:	0505                	addi	a0,a0,1
    1c04:	00090203          	lb	tp,0(s2)
    1c08:	0100                	addi	s0,sp,128
    1c0a:	00090103          	lb	sp,0(s2)
    1c0e:	0100                	addi	s0,sp,128
    1c10:	00090203          	lb	tp,0(s2)
    1c14:	0100                	addi	s0,sp,128
    1c16:	4b05                	li	s6,1
    1c18:	0306                	slli	t1,t1,0x1
    1c1a:	0000097b          	0x97b
    1c1e:	0501                	addi	a0,a0,0
    1c20:	0309                	addi	t1,t1,2
    1c22:	0905                	addi	s2,s2,1
    1c24:	000e                	c.slli	zero,0x3
    1c26:	0501                	addi	a0,a0,0
    1c28:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1c2c:	000e                	c.slli	zero,0x3
    1c2e:	0301                	addi	t1,t1,0
    1c30:	0900                	addi	s0,sp,144
    1c32:	0006                	c.slli	zero,0x1
    1c34:	0501                	addi	a0,a0,0
    1c36:	0309                	addi	t1,t1,2
    1c38:	0905                	addi	s2,s2,1
    1c3a:	0004                	0x4
    1c3c:	0501                	addi	a0,a0,0
    1c3e:	0605                	addi	a2,a2,1
    1c40:	02090103          	lb	sp,32(s2)
    1c44:	0100                	addi	s0,sp,128
    1c46:	00090103          	lb	sp,0(s2)
    1c4a:	0100                	addi	s0,sp,128
    1c4c:	00090303          	lb	t1,0(s2)
    1c50:	0100                	addi	s0,sp,128
    1c52:	0c05                	addi	s8,s8,1
    1c54:	0306                	slli	t1,t1,0x1
    1c56:	0900                	addi	s0,sp,144
    1c58:	0000                	unimp
    1c5a:	0501                	addi	a0,a0,0
    1c5c:	0605                	addi	a2,a2,1
    1c5e:	12090403          	lb	s0,288(s2)
    1c62:	0100                	addi	s0,sp,128
    1c64:	1005                	c.nop	-31
    1c66:	00090003          	lb	zero,0(s2)
    1c6a:	0100                	addi	s0,sp,128
    1c6c:	0c05                	addi	s8,s8,1
    1c6e:	0306                	slli	t1,t1,0x1
    1c70:	097c                	addi	a5,sp,156
    1c72:	0000                	unimp
    1c74:	0501                	addi	a0,a0,0
    1c76:	0305                	addi	t1,t1,1
    1c78:	0904                	addi	s1,sp,144
    1c7a:	0002                	c.slli64	zero
    1c7c:	0501                	addi	a0,a0,0
    1c7e:	0009                	c.nop	2
    1c80:	0402                	c.slli64	s0
    1c82:	01030603          	lb	a2,16(t1)
    1c86:	0409                	addi	s0,s0,2
    1c88:	0100                	addi	s0,sp,128
    1c8a:	2405                	jal	1eaa <random_keys+0x41e>
    1c8c:	0200                	addi	s0,sp,256
    1c8e:	0304                	addi	s1,sp,384
    1c90:	0306                	slli	t1,t1,0x1
    1c92:	0900                	addi	s0,sp,144
    1c94:	0004                	0x4
    1c96:	0501                	addi	a0,a0,0
    1c98:	0402001b          	0x402001b
    1c9c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ca0:	0004                	0x4
    1ca2:	0501                	addi	a0,a0,0
    1ca4:	0011                	c.nop	4
    1ca6:	0402                	c.slli64	s0
    1ca8:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1cac:	0008                	0x8
    1cae:	0501                	addi	a0,a0,0
    1cb0:	0018                	0x18
    1cb2:	0402                	c.slli64	s0
    1cb4:	7f030603          	lb	a2,2032(t1)
    1cb8:	0209                	addi	tp,tp,2
    1cba:	0100                	addi	s0,sp,128
    1cbc:	1005                	c.nop	-31
    1cbe:	0200                	addi	s0,sp,256
    1cc0:	0304                	addi	s1,sp,384
    1cc2:	00090003          	lb	zero,0(s2)
    1cc6:	0100                	addi	s0,sp,128
    1cc8:	0505                	addi	a0,a0,1
    1cca:	0200                	addi	s0,sp,256
    1ccc:	0304                	addi	s1,sp,384
    1cce:	0306                	slli	t1,t1,0x1
    1cd0:	0900                	addi	s0,sp,144
    1cd2:	0000                	unimp
    1cd4:	0601                	addi	a2,a2,0
    1cd6:	04090603          	lb	a2,64(s2)
    1cda:	0100                	addi	s0,sp,128
    1cdc:	0a05                	addi	s4,s4,1
    1cde:	0306                	slli	t1,t1,0x1
    1ce0:	0900                	addi	s0,sp,144
    1ce2:	0000                	unimp
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	0605                	addi	a2,a2,1
    1ce8:	10090203          	lb	tp,256(s2)
    1cec:	0100                	addi	s0,sp,128
    1cee:	1a05                	addi	s4,s4,-31
    1cf0:	0306                	slli	t1,t1,0x1
    1cf2:	0900                	addi	s0,sp,144
    1cf4:	0000                	unimp
    1cf6:	0501                	addi	a0,a0,0
    1cf8:	0014                	0x14
    1cfa:	0402                	c.slli64	s0
    1cfc:	0601                	addi	a2,a2,0
    1cfe:	08090003          	lb	zero,128(s2)
    1d02:	0100                	addi	s0,sp,128
    1d04:	0505                	addi	a0,a0,1
    1d06:	0200                	addi	s0,sp,256
    1d08:	0104                	addi	s1,sp,128
    1d0a:	0306                	slli	t1,t1,0x1
    1d0c:	0900                	addi	s0,sp,144
    1d0e:	0000                	unimp
    1d10:	0501                	addi	a0,a0,0
    1d12:	0301                	addi	t1,t1,0
    1d14:	0909                	addi	s2,s2,2
    1d16:	0004                	0x4
    1d18:	0501                	addi	a0,a0,0
    1d1a:	0009                	c.nop	2
    1d1c:	0402                	c.slli64	s0
    1d1e:	78030603          	lb	a2,1920(t1)
    1d22:	1009                	c.nop	-30
    1d24:	0100                	addi	s0,sp,128
    1d26:	1905                	addi	s2,s2,-31
    1d28:	0200                	addi	s0,sp,256
    1d2a:	0304                	addi	s1,sp,384
    1d2c:	0306                	slli	t1,t1,0x1
    1d2e:	0900                	addi	s0,sp,144
    1d30:	0000                	unimp
    1d32:	0501                	addi	a0,a0,0
    1d34:	001f 0402 0303      	0x3030402001f
    1d3a:	097f                	0x97f
    1d3c:	0008                	0x8
    1d3e:	0501                	addi	a0,a0,0
    1d40:	0015                	c.nop	5
    1d42:	0402                	c.slli64	s0
    1d44:	09010303          	lb	t1,144(sp)
    1d48:	0004                	0x4
    1d4a:	0501                	addi	a0,a0,0
    1d4c:	001f 0402 0603      	0x6030402001f
    1d52:	04097f03          	0x4097f03
    1d56:	0100                	addi	s0,sp,128
    1d58:	6c05                	lui	s8,0x1
    1d5a:	02090c03          	lb	s8,32(s2)
    1d5e:	0100                	addi	s0,sp,128
    1d60:	0505                	addi	a0,a0,1
    1d62:	00090203          	lb	tp,0(s2)
    1d66:	0100                	addi	s0,sp,128
    1d68:	00090103          	lb	sp,0(s2)
    1d6c:	0100                	addi	s0,sp,128
    1d6e:	00090103          	lb	sp,0(s2)
    1d72:	0100                	addi	s0,sp,128
    1d74:	00090103          	lb	sp,0(s2)
    1d78:	0100                	addi	s0,sp,128
    1d7a:	00090103          	lb	sp,0(s2)
    1d7e:	0100                	addi	s0,sp,128
    1d80:	00090103          	lb	sp,0(s2)
    1d84:	0100                	addi	s0,sp,128
    1d86:	00090303          	lb	t1,0(s2)
    1d8a:	0100                	addi	s0,sp,128
    1d8c:	6c05                	lui	s8,0x1
    1d8e:	0306                	slli	t1,t1,0x1
    1d90:	0976                	slli	s2,s2,0x1d
    1d92:	0000                	unimp
    1d94:	0501                	addi	a0,a0,0
    1d96:	031e                	slli	t1,t1,0x7
    1d98:	0911                	addi	s2,s2,4
    1d9a:	0008                	0x8
    1d9c:	0501                	addi	a0,a0,0
    1d9e:	036c                	addi	a1,sp,396
    1da0:	0006096f          	jal	s2,61da0 <_stack_start+0x51da0>
    1da4:	0501                	addi	a0,a0,0
    1da6:	0309                	addi	t1,t1,2
    1da8:	090a                	slli	s2,s2,0x2
    1daa:	000a                	c.slli	zero,0x2
    1dac:	0501                	addi	a0,a0,0
    1dae:	036c                	addi	a1,sp,396
    1db0:	0976                	slli	s2,s2,0x1d
    1db2:	0004                	0x4
    1db4:	0501                	addi	a0,a0,0
    1db6:	0309                	addi	t1,t1,2
    1db8:	090a                	slli	s2,s2,0x2
    1dba:	0004                	0x4
    1dbc:	0501                	addi	a0,a0,0
    1dbe:	036c                	addi	a1,sp,396
    1dc0:	0976                	slli	s2,s2,0x1d
    1dc2:	0004                	0x4
    1dc4:	0301                	addi	t1,t1,0
    1dc6:	0900                	addi	s0,sp,144
    1dc8:	0008                	0x8
    1dca:	0501                	addi	a0,a0,0
    1dcc:	030a                	slli	t1,t1,0x2
    1dce:	090e                	slli	s2,s2,0x3
    1dd0:	0002                	c.slli64	zero
    1dd2:	0501                	addi	a0,a0,0
    1dd4:	0309                	addi	t1,t1,2
    1dd6:	097c                	addi	a5,sp,156
    1dd8:	0004                	0x4
    1dda:	0501                	addi	a0,a0,0
    1ddc:	0605                	addi	a2,a2,1
    1dde:	04090403          	lb	s0,64(s2)
    1de2:	0100                	addi	s0,sp,128
    1de4:	0a05                	addi	s4,s4,1
    1de6:	0306                	slli	t1,t1,0x1
    1de8:	0900                	addi	s0,sp,144
    1dea:	0000                	unimp
    1dec:	0501                	addi	a0,a0,0
    1dee:	0605                	addi	a2,a2,1
    1df0:	10090303          	lb	t1,256(s2)
    1df4:	0100                	addi	s0,sp,128
    1df6:	0b05                	addi	s6,s6,1
    1df8:	0306                	slli	t1,t1,0x1
    1dfa:	0900                	addi	s0,sp,144
    1dfc:	0004                	0x4
    1dfe:	0501                	addi	a0,a0,0
    1e00:	0014                	0x14
    1e02:	0402                	c.slli64	s0
    1e04:	0601                	addi	a2,a2,0
    1e06:	02090003          	lb	zero,32(s2)
    1e0a:	0100                	addi	s0,sp,128
    1e0c:	0505                	addi	a0,a0,1
    1e0e:	0200                	addi	s0,sp,256
    1e10:	0104                	addi	s1,sp,128
    1e12:	0306                	slli	t1,t1,0x1
    1e14:	0900                	addi	s0,sp,144
    1e16:	0000                	unimp
    1e18:	0501                	addi	a0,a0,0
    1e1a:	0316                	slli	t1,t1,0x5
    1e1c:	0906                	slli	s2,s2,0x1
    1e1e:	0004                	0x4
    1e20:	0501                	addi	a0,a0,0
    1e22:	030c                	addi	a1,sp,384
    1e24:	097f                	0x97f
    1e26:	0006                	c.slli	zero,0x1
    1e28:	0501                	addi	a0,a0,0
    1e2a:	0011                	c.nop	4
    1e2c:	0402                	c.slli64	s0
    1e2e:	0601                	addi	a2,a2,0
    1e30:	02090003          	lb	zero,32(s2)
    1e34:	0100                	addi	s0,sp,128
    1e36:	0505                	addi	a0,a0,1
    1e38:	0200                	addi	s0,sp,256
    1e3a:	0104                	addi	s1,sp,128
    1e3c:	0306                	slli	t1,t1,0x1
    1e3e:	0900                	addi	s0,sp,144
    1e40:	0000                	unimp
    1e42:	0601                	addi	a2,a2,0
    1e44:	04090803          	lb	a6,64(s2)
    1e48:	0100                	addi	s0,sp,128
    1e4a:	0905                	addi	s2,s2,1
    1e4c:	0306                	slli	t1,t1,0x1
    1e4e:	0900                	addi	s0,sp,144
    1e50:	0000                	unimp
    1e52:	0501                	addi	a0,a0,0
    1e54:	0605                	addi	a2,a2,1
    1e56:	0c090403          	lb	s0,192(s2)
    1e5a:	0100                	addi	s0,sp,128
    1e5c:	0a05                	addi	s4,s4,1
    1e5e:	0306                	slli	t1,t1,0x1
    1e60:	0900                	addi	s0,sp,144
    1e62:	0000                	unimp
    1e64:	0501                	addi	a0,a0,0
    1e66:	0605                	addi	a2,a2,1
    1e68:	0a090103          	lb	sp,160(s2)
    1e6c:	0100                	addi	s0,sp,128
    1e6e:	1405                	addi	s0,s0,-31
    1e70:	0200                	addi	s0,sp,256
    1e72:	0104                	addi	s1,sp,128
    1e74:	02090003          	lb	zero,32(s2)
    1e78:	0100                	addi	s0,sp,128
    1e7a:	0505                	addi	a0,a0,1
    1e7c:	0200                	addi	s0,sp,256
    1e7e:	0104                	addi	s1,sp,128
    1e80:	0306                	slli	t1,t1,0x1
    1e82:	0900                	addi	s0,sp,144
    1e84:	0000                	unimp
    1e86:	0501                	addi	a0,a0,0
    1e88:	0301                	addi	t1,t1,0
    1e8a:	00040907          	0x40907
    1e8e:	0501                	addi	a0,a0,0
    1e90:	0009                	c.nop	2
    1e92:	0402                	c.slli64	s0
    1e94:	68030603          	lb	a2,1664(t1)
    1e98:	1609                	addi	a2,a2,-30
    1e9a:	0100                	addi	s0,sp,128
    1e9c:	1905                	addi	s2,s2,-31
    1e9e:	0200                	addi	s0,sp,256
    1ea0:	0304                	addi	s1,sp,384
    1ea2:	0306                	slli	t1,t1,0x1
    1ea4:	0900                	addi	s0,sp,144
    1ea6:	0000                	unimp
    1ea8:	0501                	addi	a0,a0,0
    1eaa:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1eae:	097f0303          	lb	t1,151(t5)
    1eb2:	0008                	0x8
    1eb4:	0501                	addi	a0,a0,0
    1eb6:	0015                	c.nop	5
    1eb8:	0402                	c.slli64	s0
    1eba:	09010303          	lb	t1,144(sp)
    1ebe:	0004                	0x4
    1ec0:	0501                	addi	a0,a0,0
    1ec2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1ec6:	7f030603          	lb	a2,2032(t1)
    1eca:	0409                	addi	s0,s0,2
    1ecc:	0100                	addi	s0,sp,128
    1ece:	0905                	addi	s2,s2,1
    1ed0:	02090603          	lb	a2,32(s2)
    1ed4:	0100                	addi	s0,sp,128
    1ed6:	0e05                	addi	t3,t3,1
    1ed8:	0306                	slli	t1,t1,0x1
    1eda:	0900                	addi	s0,sp,144
    1edc:	0000                	unimp
    1ede:	0501                	addi	a0,a0,0
    1ee0:	0900030b          	0x900030b
    1ee4:	0002                	c.slli64	zero
    1ee6:	0501                	addi	a0,a0,0
    1ee8:	060d                	addi	a2,a2,3
    1eea:	04090303          	lb	t1,64(s2)
    1eee:	0100                	addi	s0,sp,128
    1ef0:	1905                	addi	s2,s2,-31
    1ef2:	0306                	slli	t1,t1,0x1
    1ef4:	0900                	addi	s0,sp,144
    1ef6:	0000                	unimp
    1ef8:	0501                	addi	a0,a0,0
    1efa:	09000313          	li	t1,144
    1efe:	0004                	0x4
    1f00:	0501                	addi	a0,a0,0
    1f02:	0018                	0x18
    1f04:	0402                	c.slli64	s0
    1f06:	0602                	c.slli64	a2
    1f08:	02097c03          	0x2097c03
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	0905                	addi	s2,s2,1
    1f10:	0200                	addi	s0,sp,256
    1f12:	0304                	addi	s1,sp,384
    1f14:	06090e03          	lb	t3,96(s2)
    1f18:	0100                	addi	s0,sp,128
    1f1a:	1905                	addi	s2,s2,-31
    1f1c:	0200                	addi	s0,sp,256
    1f1e:	0304                	addi	s1,sp,384
    1f20:	0306                	slli	t1,t1,0x1
    1f22:	0900                	addi	s0,sp,144
    1f24:	0000                	unimp
    1f26:	0501                	addi	a0,a0,0
    1f28:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f2c:	097f0303          	lb	t1,151(t5)
    1f30:	0008                	0x8
    1f32:	0501                	addi	a0,a0,0
    1f34:	0015                	c.nop	5
    1f36:	0402                	c.slli64	s0
    1f38:	09010303          	lb	t1,144(sp)
    1f3c:	0004                	0x4
    1f3e:	0501                	addi	a0,a0,0
    1f40:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f44:	7f030603          	lb	a2,2032(t1)
    1f48:	0409                	addi	s0,s0,2
    1f4a:	0100                	addi	s0,sp,128
    1f4c:	0209                	addi	tp,tp,2
    1f4e:	0000                	unimp
    1f50:	0101                	addi	sp,sp,0
    1f52:	0b05                	addi	s6,s6,1
    1f54:	0500                	addi	s0,sp,640
    1f56:	2602                	fld	fa2,0(sp)
    1f58:	0300000f          	fence	rw,unknown
    1f5c:	05da                	slli	a1,a1,0x16
    1f5e:	0501                	addi	a0,a0,0
    1f60:	0305                	addi	t1,t1,1
    1f62:	0901                	addi	s2,s2,0
    1f64:	0000                	unimp
    1f66:	0301                	addi	t1,t1,0
    1f68:	0901                	addi	s2,s2,0
    1f6a:	0000                	unimp
    1f6c:	0301                	addi	t1,t1,0
    1f6e:	0901                	addi	s2,s2,0
    1f70:	0000                	unimp
    1f72:	0301                	addi	t1,t1,0
    1f74:	0901                	addi	s2,s2,0
    1f76:	0000                	unimp
    1f78:	0301                	addi	t1,t1,0
    1f7a:	0901                	addi	s2,s2,0
    1f7c:	0000                	unimp
    1f7e:	0301                	addi	t1,t1,0
    1f80:	0901                	addi	s2,s2,0
    1f82:	0000                	unimp
    1f84:	0301                	addi	t1,t1,0
    1f86:	0902                	c.slli64	s2
    1f88:	0000                	unimp
    1f8a:	0501                	addi	a0,a0,0
    1f8c:	7803060b          	0x7803060b
    1f90:	0009                	c.nop	2
    1f92:	0100                	addi	s0,sp,128
    1f94:	0905                	addi	s2,s2,1
    1f96:	04090803          	lb	a6,64(s2)
    1f9a:	0100                	addi	s0,sp,128
    1f9c:	0b05                	addi	s6,s6,1
    1f9e:	0e097803          	0xe097803
    1fa2:	0100                	addi	s0,sp,128
    1fa4:	1205                	addi	tp,tp,-31
    1fa6:	10091803          	lh	a6,256(s2)
    1faa:	0100                	addi	s0,sp,128
    1fac:	0905                	addi	s2,s2,1
    1fae:	04097003          	0x4097003
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	0505                	addi	a0,a0,1
    1fb6:	0306                	slli	t1,t1,0x1
    1fb8:	0901                	addi	s2,s2,0
    1fba:	0002                	c.slli64	zero
    1fbc:	0301                	addi	t1,t1,0
    1fbe:	0901                	addi	s2,s2,0
    1fc0:	0000                	unimp
    1fc2:	0301                	addi	t1,t1,0
    1fc4:	0901                	addi	s2,s2,0
    1fc6:	0000                	unimp
    1fc8:	0301                	addi	t1,t1,0
    1fca:	0901                	addi	s2,s2,0
    1fcc:	0000                	unimp
    1fce:	0301                	addi	t1,t1,0
    1fd0:	0901                	addi	s2,s2,0
    1fd2:	0000                	unimp
    1fd4:	0301                	addi	t1,t1,0
    1fd6:	0901                	addi	s2,s2,0
    1fd8:	0000                	unimp
    1fda:	0301                	addi	t1,t1,0
    1fdc:	0901                	addi	s2,s2,0
    1fde:	0000                	unimp
    1fe0:	0301                	addi	t1,t1,0
    1fe2:	0909                	addi	s2,s2,2
    1fe4:	0000                	unimp
    1fe6:	0501                	addi	a0,a0,0
    1fe8:	0612                	slli	a2,a2,0x4
    1fea:	00090003          	lb	zero,0(s2)
    1fee:	0100                	addi	s0,sp,128
    1ff0:	0c05                	addi	s8,s8,1
    1ff2:	0c090103          	lb	sp,192(s2)
    1ff6:	0100                	addi	s0,sp,128
    1ff8:	1205                	addi	tp,tp,-31
    1ffa:	0a097f03          	0xa097f03
    1ffe:	0100                	addi	s0,sp,128
    2000:	0505                	addi	a0,a0,1
    2002:	0306                	slli	t1,t1,0x1
    2004:	0901                	addi	s2,s2,0
    2006:	0002                	c.slli64	zero
    2008:	0501                	addi	a0,a0,0
    200a:	0612                	slli	a2,a2,0x4
    200c:	00090103          	lb	sp,0(s2)
    2010:	0100                	addi	s0,sp,128
    2012:	0c05                	addi	s8,s8,1
    2014:	04097f03          	0x4097f03
    2018:	0100                	addi	s0,sp,128
    201a:	0505                	addi	a0,a0,1
    201c:	0306                	slli	t1,t1,0x1
    201e:	0901                	addi	s2,s2,0
    2020:	0002                	c.slli64	zero
    2022:	0501                	addi	a0,a0,0
    2024:	0612                	slli	a2,a2,0x4
    2026:	00090003          	lb	zero,0(s2)
    202a:	0100                	addi	s0,sp,128
    202c:	0505                	addi	a0,a0,1
    202e:	0306                	slli	t1,t1,0x1
    2030:	0902                	c.slli64	s2
    2032:	0004                	0x4
    2034:	0501                	addi	a0,a0,0
    2036:	0310                	addi	a2,sp,384
    2038:	0900                	addi	s0,sp,144
    203a:	0000                	unimp
    203c:	0501                	addi	a0,a0,0
    203e:	0605                	addi	a2,a2,1
    2040:	00090003          	lb	zero,0(s2)
    2044:	0100                	addi	s0,sp,128
    2046:	0905                	addi	s2,s2,1
    2048:	0200                	addi	s0,sp,256
    204a:	0304                	addi	s1,sp,384
    204c:	0306                	slli	t1,t1,0x1
    204e:	0902                	c.slli64	s2
    2050:	0004                	0x4
    2052:	0501                	addi	a0,a0,0
    2054:	001f 0402 0603      	0x6030402001f
    205a:	00090003          	lb	zero,0(s2)
    205e:	0100                	addi	s0,sp,128
    2060:	1905                	addi	s2,s2,-31
    2062:	0200                	addi	s0,sp,256
    2064:	0304                	addi	s1,sp,384
    2066:	06090003          	lb	zero,96(s2)
    206a:	0100                	addi	s0,sp,128
    206c:	1705                	addi	a4,a4,-31
    206e:	0200                	addi	s0,sp,256
    2070:	0304                	addi	s1,sp,384
    2072:	0306                	slli	t1,t1,0x1
    2074:	097e                	slli	s2,s2,0x1f
    2076:	0006                	c.slli	zero,0x1
    2078:	0501                	addi	a0,a0,0
    207a:	0010                	0x10
    207c:	0402                	c.slli64	s0
    207e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2082:	0000                	unimp
    2084:	0501                	addi	a0,a0,0
    2086:	0005                	c.nop	1
    2088:	0402                	c.slli64	s0
    208a:	00030603          	lb	a2,0(t1)
    208e:	0209                	addi	tp,tp,2
    2090:	0100                	addi	s0,sp,128
    2092:	0905                	addi	s2,s2,1
    2094:	0200                	addi	s0,sp,256
    2096:	0304                	addi	s1,sp,384
    2098:	0306                	slli	t1,t1,0x1
    209a:	0909                	addi	s2,s2,2
    209c:	0004                	0x4
    209e:	0501                	addi	a0,a0,0
    20a0:	0402001b          	0x402001b
    20a4:	097e0303          	lb	t1,151(t3)
    20a8:	0000                	unimp
    20aa:	0501                	addi	a0,a0,0
    20ac:	0010                	0x10
    20ae:	0402                	c.slli64	s0
    20b0:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    20b4:	0000                	unimp
    20b6:	0501                	addi	a0,a0,0
    20b8:	0009                	c.nop	2
    20ba:	0402                	c.slli64	s0
    20bc:	09090303          	lb	t1,144(s2)
    20c0:	000c                	0xc
    20c2:	0501                	addi	a0,a0,0
    20c4:	0026                	c.slli	zero,0x9
    20c6:	0402                	c.slli64	s0
    20c8:	00030603          	lb	a2,0(t1)
    20cc:	0009                	c.nop	2
    20ce:	0100                	addi	s0,sp,128
    20d0:	2005                	jal	20f0 <_min_stack+0xf0>
    20d2:	0200                	addi	s0,sp,256
    20d4:	0304                	addi	s1,sp,384
    20d6:	06090003          	lb	zero,96(s2)
    20da:	0100                	addi	s0,sp,128
    20dc:	1f05                	addi	t5,t5,-31
    20de:	0200                	addi	s0,sp,256
    20e0:	0304                	addi	s1,sp,384
    20e2:	0306                	slli	t1,t1,0x1
    20e4:	097e                	slli	s2,s2,0x1f
    20e6:	0004                	0x4
    20e8:	0501                	addi	a0,a0,0
    20ea:	0014                	0x14
    20ec:	0402                	c.slli64	s0
    20ee:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    20f2:	0000                	unimp
    20f4:	0501                	addi	a0,a0,0
    20f6:	0005                	c.nop	1
    20f8:	0402                	c.slli64	s0
    20fa:	00030603          	lb	a2,0(t1)
    20fe:	0009                	c.nop	2
    2100:	0100                	addi	s0,sp,128
    2102:	0905                	addi	s2,s2,1
    2104:	0200                	addi	s0,sp,256
    2106:	0304                	addi	s1,sp,384
    2108:	0306                	slli	t1,t1,0x1
    210a:	0909                	addi	s2,s2,2
    210c:	0004                	0x4
    210e:	0501                	addi	a0,a0,0
    2110:	001f 0402 0303      	0x3030402001f
    2116:	097e                	slli	s2,s2,0x1f
    2118:	0000                	unimp
    211a:	0501                	addi	a0,a0,0
    211c:	0014                	0x14
    211e:	0402                	c.slli64	s0
    2120:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2124:	0000                	unimp
    2126:	0501                	addi	a0,a0,0
    2128:	0009                	c.nop	2
    212a:	0402                	c.slli64	s0
    212c:	09090303          	lb	t1,144(s2)
    2130:	000c                	0xc
    2132:	0501                	addi	a0,a0,0
    2134:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2138:	00030603          	lb	a2,0(t1)
    213c:	0009                	c.nop	2
    213e:	0100                	addi	s0,sp,128
    2140:	1d05                	addi	s10,s10,-31
    2142:	0200                	addi	s0,sp,256
    2144:	0304                	addi	s1,sp,384
    2146:	06090003          	lb	zero,96(s2)
    214a:	0100                	addi	s0,sp,128
    214c:	1f05                	addi	t5,t5,-31
    214e:	0200                	addi	s0,sp,256
    2150:	0304                	addi	s1,sp,384
    2152:	0306                	slli	t1,t1,0x1
    2154:	097e                	slli	s2,s2,0x1f
    2156:	0004                	0x4
    2158:	0501                	addi	a0,a0,0
    215a:	0014                	0x14
    215c:	0402                	c.slli64	s0
    215e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2162:	0000                	unimp
    2164:	0501                	addi	a0,a0,0
    2166:	0005                	c.nop	1
    2168:	0402                	c.slli64	s0
    216a:	00030603          	lb	a2,0(t1)
    216e:	0009                	c.nop	2
    2170:	0100                	addi	s0,sp,128
    2172:	0905                	addi	s2,s2,1
    2174:	0200                	addi	s0,sp,256
    2176:	0304                	addi	s1,sp,384
    2178:	0306                	slli	t1,t1,0x1
    217a:	0909                	addi	s2,s2,2
    217c:	000c                	0xc
    217e:	0501                	addi	a0,a0,0
    2180:	0022                	c.slli	zero,0x8
    2182:	0402                	c.slli64	s0
    2184:	00030603          	lb	a2,0(t1)
    2188:	0009                	c.nop	2
    218a:	0100                	addi	s0,sp,128
    218c:	1c05                	addi	s8,s8,-31
    218e:	0200                	addi	s0,sp,256
    2190:	0304                	addi	s1,sp,384
    2192:	06090003          	lb	zero,96(s2)
    2196:	0100                	addi	s0,sp,128
    2198:	2105                	jal	25b8 <_min_stack+0x5b8>
    219a:	0200                	addi	s0,sp,256
    219c:	0304                	addi	s1,sp,384
    219e:	0306                	slli	t1,t1,0x1
    21a0:	097e                	slli	s2,s2,0x1f
    21a2:	0004                	0x4
    21a4:	0501                	addi	a0,a0,0
    21a6:	0014                	0x14
    21a8:	0402                	c.slli64	s0
    21aa:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    21ae:	0000                	unimp
    21b0:	0501                	addi	a0,a0,0
    21b2:	0005                	c.nop	1
    21b4:	0402                	c.slli64	s0
    21b6:	00030603          	lb	a2,0(t1)
    21ba:	0009                	c.nop	2
    21bc:	0100                	addi	s0,sp,128
    21be:	0306                	slli	t1,t1,0x1
    21c0:	0908                	addi	a0,sp,144
    21c2:	0004                	0x4
    21c4:	0501                	addi	a0,a0,0
    21c6:	0612                	slli	a2,a2,0x4
    21c8:	00090003          	lb	zero,0(s2)
    21cc:	0100                	addi	s0,sp,128
    21ce:	1305                	addi	t1,t1,-31
    21d0:	08090103          	lb	sp,128(s2)
    21d4:	0100                	addi	s0,sp,128
    21d6:	1205                	addi	tp,tp,-31
    21d8:	08090103          	lb	sp,128(s2)
    21dc:	0100                	addi	s0,sp,128
    21de:	1305                	addi	t1,t1,-31
    21e0:	04097f03          	0x4097f03
    21e4:	0100                	addi	s0,sp,128
    21e6:	1205                	addi	tp,tp,-31
    21e8:	04097f03          	0x4097f03
    21ec:	0100                	addi	s0,sp,128
    21ee:	0505                	addi	a0,a0,1
    21f0:	0306                	slli	t1,t1,0x1
    21f2:	0901                	addi	s2,s2,0
    21f4:	0002                	c.slli64	zero
    21f6:	0501                	addi	a0,a0,0
    21f8:	00030613          	mv	a2,t1
    21fc:	0009                	c.nop	2
    21fe:	0100                	addi	s0,sp,128
    2200:	1205                	addi	tp,tp,-31
    2202:	02090103          	lb	sp,32(s2)
    2206:	0100                	addi	s0,sp,128
    2208:	02090903          	lb	s2,32(s2)
    220c:	0100                	addi	s0,sp,128
    220e:	1305                	addi	t1,t1,-31
    2210:	08097603          	0x8097603
    2214:	0100                	addi	s0,sp,128
    2216:	0505                	addi	a0,a0,1
    2218:	0306                	slli	t1,t1,0x1
    221a:	0901                	addi	s2,s2,0
    221c:	0002                	c.slli64	zero
    221e:	0301                	addi	t1,t1,0
    2220:	0909                	addi	s2,s2,2
    2222:	0000                	unimp
    2224:	0501                	addi	a0,a0,0
    2226:	0612                	slli	a2,a2,0x4
    2228:	00090003          	lb	zero,0(s2)
    222c:	0100                	addi	s0,sp,128
    222e:	0505                	addi	a0,a0,1
    2230:	0306                	slli	t1,t1,0x1
    2232:	0901                	addi	s2,s2,0
    2234:	0002                	c.slli64	zero
    2236:	0501                	addi	a0,a0,0
    2238:	00030613          	mv	a2,t1
    223c:	0009                	c.nop	2
    223e:	0100                	addi	s0,sp,128
    2240:	0505                	addi	a0,a0,1
    2242:	0306                	slli	t1,t1,0x1
    2244:	0901                	addi	s2,s2,0
    2246:	0014                	0x14
    2248:	0501                	addi	a0,a0,0
    224a:	0612                	slli	a2,a2,0x4
    224c:	00090003          	lb	zero,0(s2)
    2250:	0100                	addi	s0,sp,128
    2252:	1a05                	addi	s4,s4,-31
    2254:	04091b03          	lh	s6,64(s2)
    2258:	0100                	addi	s0,sp,128
    225a:	1205                	addi	tp,tp,-31
    225c:	04096503          	0x4096503
    2260:	0100                	addi	s0,sp,128
    2262:	0505                	addi	a0,a0,1
    2264:	0306                	slli	t1,t1,0x1
    2266:	00020913          	mv	s2,tp
    226a:	0501                	addi	a0,a0,0
    226c:	0310                	addi	a2,sp,384
    226e:	0900                	addi	s0,sp,144
    2270:	0000                	unimp
    2272:	0501                	addi	a0,a0,0
    2274:	0612                	slli	a2,a2,0x4
    2276:	00096d03          	0x96d03
    227a:	0100                	addi	s0,sp,128
    227c:	1a05                	addi	s4,s4,-31
    227e:	02091b03          	lh	s6,32(s2)
    2282:	0100                	addi	s0,sp,128
    2284:	0505                	addi	a0,a0,1
    2286:	04097803          	0x4097803
    228a:	0100                	addi	s0,sp,128
    228c:	0905                	addi	s2,s2,1
    228e:	0306                	slli	t1,t1,0x1
    2290:	0901                	addi	s2,s2,0
    2292:	0004                	0x4
    2294:	0501                	addi	a0,a0,0
    2296:	0003060b          	0x3060b
    229a:	0009                	c.nop	2
    229c:	0100                	addi	s0,sp,128
    229e:	2705                	jal	29be <_min_stack+0x9be>
    22a0:	02090003          	lb	zero,32(s2)
    22a4:	0100                	addi	s0,sp,128
    22a6:	0b05                	addi	s6,s6,1
    22a8:	04090003          	lb	zero,64(s2)
    22ac:	0100                	addi	s0,sp,128
    22ae:	0d05                	addi	s10,s10,1
    22b0:	0306                	slli	t1,t1,0x1
    22b2:	0902                	c.slli64	s2
    22b4:	000a                	c.slli	zero,0x2
    22b6:	0501                	addi	a0,a0,0
    22b8:	061a                	slli	a2,a2,0x6
    22ba:	00090003          	lb	zero,0(s2)
    22be:	0100                	addi	s0,sp,128
    22c0:	0d05                	addi	s10,s10,1
    22c2:	0306                	slli	t1,t1,0x1
    22c4:	0902                	c.slli64	s2
    22c6:	000a                	c.slli	zero,0x2
    22c8:	0501                	addi	a0,a0,0
    22ca:	0305                	addi	t1,t1,1
    22cc:	0909                	addi	s2,s2,2
    22ce:	0000                	unimp
    22d0:	0501                	addi	a0,a0,0
    22d2:	0601                	addi	a2,a2,0
    22d4:	00090103          	lb	sp,0(s2)
    22d8:	0100                	addi	s0,sp,128
    22da:	0d05                	addi	s10,s10,1
    22dc:	0200                	addi	s0,sp,256
    22de:	0204                	addi	s1,sp,256
    22e0:	0306                	slli	t1,t1,0x1
    22e2:	0979                	addi	s2,s2,30
    22e4:	0018                	0x18
    22e6:	0501                	addi	a0,a0,0
    22e8:	001a                	c.slli	zero,0x6
    22ea:	0402                	c.slli64	s0
    22ec:	0602                	c.slli64	a2
    22ee:	00090003          	lb	zero,0(s2)
    22f2:	0100                	addi	s0,sp,128
    22f4:	1805                	addi	a6,a6,-31
    22f6:	0200                	addi	s0,sp,256
    22f8:	0204                	addi	s1,sp,256
    22fa:	0306                	slli	t1,t1,0x1
    22fc:	0978                	addi	a4,sp,156
    22fe:	0002                	c.slli64	zero
    2300:	0501                	addi	a0,a0,0
    2302:	0010                	0x10
    2304:	0402                	c.slli64	s0
    2306:	0302                	c.slli64	t1
    2308:	0900                	addi	s0,sp,144
    230a:	0000                	unimp
    230c:	0501                	addi	a0,a0,0
    230e:	0005                	c.nop	1
    2310:	0402                	c.slli64	s0
    2312:	0602                	c.slli64	a2
    2314:	02090003          	lb	zero,32(s2)
    2318:	0100                	addi	s0,sp,128
    231a:	0609                	addi	a2,a2,2
    231c:	0000                	unimp
    231e:	0101                	addi	sp,sp,0
    2320:	0150                	addi	a2,sp,132
    2322:	0000                	unimp
    2324:	001d0003          	lb	zero,1(s10)
    2328:	0000                	unimp
    232a:	0101                	addi	sp,sp,0
    232c:	000d0efb          	0xd0efb
    2330:	0101                	addi	sp,sp,0
    2332:	0101                	addi	sp,sp,0
    2334:	0000                	unimp
    2336:	0100                	addi	s0,sp,128
    2338:	0000                	unimp
    233a:	0001                	nop
    233c:	30747263          	bgeu	s0,t2,2640 <_min_stack+0x640>
    2340:	532e                	lw	t1,232(sp)
    2342:	0000                	unimp
    2344:	0000                	unimp
    2346:	0000                	unimp
    2348:	0205                	addi	tp,tp,1
    234a:	0d2a                	slli	s10,s10,0xa
    234c:	0000                	unimp
    234e:	0315                	addi	t1,t1,5
    2350:	0904                	addi	s1,sp,144
    2352:	0004                	0x4
    2354:	0301                	addi	t1,t1,0
    2356:	0901                	addi	s2,s2,0
    2358:	0004                	0x4
    235a:	0301                	addi	t1,t1,0
    235c:	0901                	addi	s2,s2,0
    235e:	0002                	c.slli64	zero
    2360:	0301                	addi	t1,t1,0
    2362:	0901                	addi	s2,s2,0
    2364:	0002                	c.slli64	zero
    2366:	0301                	addi	t1,t1,0
    2368:	0901                	addi	s2,s2,0
    236a:	0002                	c.slli64	zero
    236c:	0301                	addi	t1,t1,0
    236e:	0901                	addi	s2,s2,0
    2370:	0002                	c.slli64	zero
    2372:	0301                	addi	t1,t1,0
    2374:	0901                	addi	s2,s2,0
    2376:	0002                	c.slli64	zero
    2378:	0301                	addi	t1,t1,0
    237a:	0901                	addi	s2,s2,0
    237c:	0002                	c.slli64	zero
    237e:	0301                	addi	t1,t1,0
    2380:	0901                	addi	s2,s2,0
    2382:	0002                	c.slli64	zero
    2384:	0301                	addi	t1,t1,0
    2386:	0901                	addi	s2,s2,0
    2388:	0002                	c.slli64	zero
    238a:	0301                	addi	t1,t1,0
    238c:	0901                	addi	s2,s2,0
    238e:	0002                	c.slli64	zero
    2390:	0301                	addi	t1,t1,0
    2392:	0901                	addi	s2,s2,0
    2394:	0002                	c.slli64	zero
    2396:	0301                	addi	t1,t1,0
    2398:	0901                	addi	s2,s2,0
    239a:	0002                	c.slli64	zero
    239c:	0301                	addi	t1,t1,0
    239e:	0901                	addi	s2,s2,0
    23a0:	0002                	c.slli64	zero
    23a2:	0301                	addi	t1,t1,0
    23a4:	0901                	addi	s2,s2,0
    23a6:	0002                	c.slli64	zero
    23a8:	0301                	addi	t1,t1,0
    23aa:	0901                	addi	s2,s2,0
    23ac:	0002                	c.slli64	zero
    23ae:	0301                	addi	t1,t1,0
    23b0:	0901                	addi	s2,s2,0
    23b2:	0002                	c.slli64	zero
    23b4:	0301                	addi	t1,t1,0
    23b6:	0901                	addi	s2,s2,0
    23b8:	0002                	c.slli64	zero
    23ba:	0301                	addi	t1,t1,0
    23bc:	0901                	addi	s2,s2,0
    23be:	0002                	c.slli64	zero
    23c0:	0301                	addi	t1,t1,0
    23c2:	0901                	addi	s2,s2,0
    23c4:	0002                	c.slli64	zero
    23c6:	0301                	addi	t1,t1,0
    23c8:	0901                	addi	s2,s2,0
    23ca:	0002                	c.slli64	zero
    23cc:	0301                	addi	t1,t1,0
    23ce:	0901                	addi	s2,s2,0
    23d0:	0002                	c.slli64	zero
    23d2:	0301                	addi	t1,t1,0
    23d4:	0901                	addi	s2,s2,0
    23d6:	0002                	c.slli64	zero
    23d8:	0301                	addi	t1,t1,0
    23da:	0901                	addi	s2,s2,0
    23dc:	0002                	c.slli64	zero
    23de:	0301                	addi	t1,t1,0
    23e0:	0901                	addi	s2,s2,0
    23e2:	0002                	c.slli64	zero
    23e4:	0301                	addi	t1,t1,0
    23e6:	0901                	addi	s2,s2,0
    23e8:	0002                	c.slli64	zero
    23ea:	0301                	addi	t1,t1,0
    23ec:	0901                	addi	s2,s2,0
    23ee:	0002                	c.slli64	zero
    23f0:	0301                	addi	t1,t1,0
    23f2:	0901                	addi	s2,s2,0
    23f4:	0002                	c.slli64	zero
    23f6:	0301                	addi	t1,t1,0
    23f8:	0901                	addi	s2,s2,0
    23fa:	0002                	c.slli64	zero
    23fc:	0301                	addi	t1,t1,0
    23fe:	0901                	addi	s2,s2,0
    2400:	0002                	c.slli64	zero
    2402:	0301                	addi	t1,t1,0
    2404:	0901                	addi	s2,s2,0
    2406:	0002                	c.slli64	zero
    2408:	0301                	addi	t1,t1,0
    240a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    240e:	0301                	addi	t1,t1,0
    2410:	0906                	slli	s2,s2,0x1
    2412:	0008                	0x8
    2414:	0301                	addi	t1,t1,0
    2416:	0901                	addi	s2,s2,0
    2418:	0008                	0x8
    241a:	0301                	addi	t1,t1,0
    241c:	0902                	c.slli64	s2
    241e:	0008                	0x8
    2420:	0301                	addi	t1,t1,0
    2422:	00040903          	lb	s2,0(s0)
    2426:	0301                	addi	t1,t1,0
    2428:	0901                	addi	s2,s2,0
    242a:	0004                	0x4
    242c:	0301                	addi	t1,t1,0
    242e:	0901                	addi	s2,s2,0
    2430:	0002                	c.slli64	zero
    2432:	0301                	addi	t1,t1,0
    2434:	0906                	slli	s2,s2,0x1
    2436:	0004                	0x4
    2438:	0301                	addi	t1,t1,0
    243a:	0901                	addi	s2,s2,0
    243c:	0004                	0x4
    243e:	0301                	addi	t1,t1,0
    2440:	0901                	addi	s2,s2,0
    2442:	0004                	0x4
    2444:	0901                	addi	s2,s2,0
    2446:	0004                	0x4
    2448:	0100                	addi	s0,sp,128
    244a:	0001                	nop
    244c:	0205                	addi	tp,tp,1
    244e:	0000                	unimp
    2450:	0000                	unimp
    2452:	0100cb03          	lbu	s6,16(ra)
    2456:	7c090103          	lb	sp,1984(s2)
    245a:	0100                	addi	s0,sp,128
    245c:	04090403          	lb	s0,64(s2)
    2460:	0100                	addi	s0,sp,128
    2462:	04090403          	lb	s0,64(s2)
    2466:	0100                	addi	s0,sp,128
    2468:	04090403          	lb	s0,64(s2)
    246c:	0100                	addi	s0,sp,128
    246e:	0409                	addi	s0,s0,2
    2470:	0000                	unimp
    2472:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  jal x0, reset_handler
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  jal x0, default_exc_handler
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0x16>
  jal x0, default_exc_handler
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    switch(length%3) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < (length / 3); i++) {
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	7465                	lui	s0,0xffff9
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
            a1[length-1] = a2[length-1];
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
            a1[length-1] = a2[length-1];
  e4:	5f00                	lw	s0,56(a4)
            a1[length-2] = a2[length-2];
  e6:	745f 5f6d 6573      	0x65735f6d745f
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x100>
} //end of function
  f0:	676e                	flw	fa4,216(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    asm volatile(
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 100:	4e5f 6900 736e      	0x736e69004e5f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 106:	7274                	flw	fa3,100(a2)
    asm volatile(
 108:	6d5f 646f 7000      	0x7000646f6d5f
 10e:	6d796c6f          	jal	s8,96fe4 <_stack_start+0x86fe4>
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	755f 7562 0066      	0x667562755f
    asm volatile(
 11c:	625f 7361 0065      	0x657361625f
 122:	5f5f 6d74 685f      	0x685f6d745f5f
    asm volatile(
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
}
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
    switch(length%3) {
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
 13a:	7261                	lui	tp,0xffff8
 13c:	5f007367          	0x5f007367
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0x132>
            for (i = 0; i < (length / 3); i++) {
 144:	6569                	lui	a0,0x1a
    asm volatile(
 146:	5f00                	lw	s0,56(a4)
            for (i = 0; i < (length / 3); i++) {
 148:	735f 6c67 6575      	0x65756c67735f
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
 152:	0031                	c.nop	12
 154:	6572                	flw	fa0,28(sp)
 156:	5f003273          	csrrc	tp,0x5f0,zero
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
            a1[length-1] = a1[length-1] % mod;
 15e:	695f0073          	0x695f0073
 162:	78635f73          	csrrwi	t5,0x786,6
 166:	0061                	c.nop	24
 168:	735f 6474 6e69      	0x6e696474735f
 16e:	5f00                	lw	s0,56(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	6c62                	flw	fs8,24(sp)
 172:	7a69736b          	0x7a69736b
 176:	0065                	c.nop	25
 178:	7270                	flw	fa2,100(a2)
    asm volatile(
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
            for (i = 0; i < ((length-1) / 3); i++) {
 17e:	0074                	addi	a3,sp,12
            a1[length-1] = a1[length-1] % mod;
 180:	6f70                	flw	fa2,92(a4)
            a1[length-2] = a1[length-2] % mod;
 182:	796c                	flw	fa1,116(a0)
 184:	6964                	flw	fs1,84(a0)
 186:	0076                	c.slli	zero,0x1d
 188:	6f70                	flw	fa2,92(a4)
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
} //end of function
 18e:	635f 7476 7562      	0x75627476635f
    asm volatile(
 194:	0066                	c.slli	zero,0x19
 196:	6f5f 6666 6573      	0x657366666f5f
            for (i = 0; i < (length / 3); i++) {
 19c:	0074                	addi	a3,sp,12
    asm volatile(
 19e:	6d5f 7362 7472      	0x747273626d5f
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
            for (i = 0; i < ((length-1) / 3); i++) {
 1a8:	735f 6174 6574      	0x65746174735f
    asm volatile(
 1ae:	5f00                	lw	s0,56(a4)
 1b0:	626d                	lui	tp,0x1b
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	735f 6174 6574      	0x65746174735f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1bc:	5f00                	lw	s0,56(a4)
 1be:	6e66                	flw	ft8,88(sp)
 1c0:	7261                	lui	tp,0xffff8
    int line[size_b][size_a + size_b];
 1c2:	6e007367          	0x6e007367
 1c6:	7274                	flw	fa3,100(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	5f75                	li	t5,-3
 1ca:	6564                	flw	fs1,76(a0)
    int line[size_b][size_a + size_b];
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x20a>
 1d0:	0074                	addi	a3,sp,12
 1d2:	665f 736e 5f00      	0x5f00736e665f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
    int pola[size_a];
 1dc:	5f00                	lw	s0,56(a4)
 1de:	6c66                	flw	fs8,88(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
 1e4:	0074                	addi	a3,sp,12
 1e6:	735f 6474 7265      	0x72656474735f
    int line[size_b][size_a + size_b];
 1ec:	0072                	c.slli	zero,0x1c
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	425f 6769 6e69      	0x6e696769425f
    int line[size_b][size_a + size_b];
 1f4:	0074                	addi	a3,sp,12
    int pola[size_a];
 1f6:	675f 6d61 616d      	0x616d6d61675f
    int line[size_b][size_a + size_b];
 1fc:	735f 6769 676e      	0x676e6769735f
    int pola[size_a];
 202:	6d61                	lui	s10,0x18
    int polb[size_b];
 204:	5f00                	lw	s0,56(a4)
 206:	6572                	flw	fa0,28(sp)
 208:	6461                	lui	s0,0x18
    int pola[size_a];
 20a:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 20c:	6572                	flw	fa0,28(sp)
 20e:	746c7573          	csrrci	a0,0x746,24
    int pola[size_a];
 212:	6b5f 5f00 745f      	0x745f5f006b5f
    int line[size_b][size_a + size_b];
 218:	006d                	c.nop	27
 21a:	6564                	flw	fs1,76(a0)
    int polb[size_b];
 21c:	756e                	flw	fa0,248(sp)
            line[i][j] = 0;
 21e:	5f6d                	li	t5,-5
 220:	6574                	flw	fa3,76(a0)
 222:	706d                	c.lui	zero,0xffffb
    for (i = 0; i < size_b; ++i){
 224:	5f00                	lw	s0,56(a4)
 226:	775f 6863 0062      	0x626863775f
            product[j] = 0;
 22c:	6572                	flw	fa0,28(sp)
 22e:	746c7573          	csrrci	a0,0x746,24
    for (i = 0; i < size_b; ++i){
 232:	006e6f6b          	0x6e6f6b
    array_equ(pola,a,size_a);
 236:	735f 6474 756f      	0x756f6474735f
 23c:	0074                	addi	a3,sp,12
 23e:	635f 7476 656c      	0x656c7476635f
 244:	006e                	c.slli	zero,0x1b
 246:	72636573          	csrrsi	a0,0x726,6
 24a:	7465                	lui	s0,0xffff9
    array_mod(pola,mod,size_a);
 24c:	6b5f 7965 665f      	0x665f79656b5f
 252:	0071                	c.nop	28
    array_equ(polb,b,size_b);
 254:	665f 6c69 0065      	0x656c69665f
 25a:	6572                	flw	fa0,28(sp)
 25c:	7574                	flw	fa3,108(a0)
 25e:	6e72                	flw	ft8,28(sp)
    array_mod(polb,mod,size_b);
 260:	615f 6464 6572      	0x65726464615f
 266:	00317373          	csrrci	t1,fcsr,2
    if(star_mult == 1){
 26a:	6572                	flw	fa0,28(sp)
 26c:	7574                	flw	fa3,108(a0)
 26e:	6e72                	flw	ft8,28(sp)
 270:	615f 6464 6572      	0x65726464615f
 276:	00327373          	csrrci	t1,fcsr,4
 27a:	6572                	flw	fa0,28(sp)
 27c:	7574                	flw	fa3,108(a0)
 27e:	6e72                	flw	ft8,28(sp)
 280:	615f 6464 6572      	0x65726464615f
        for (j = size_b -1; j >= 0; j = j-1){
 286:	00337373          	csrrci	t1,fcsr,6
            for (k = size_a-1; k >= 0; k = k-1 ){
 28a:	6572                	flw	fa0,28(sp)
            product[j] = 0;
 28c:	7574                	flw	fa3,108(a0)
 28e:	6e72                	flw	ft8,28(sp)
 290:	615f 6464 6572      	0x65726464615f
 296:	00347373          	csrrci	t1,fcsr,8
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	6e5f 6f69 7362      	0x73626f696e5f
 2a0:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_b; ++i){
 2a2:	7465                	lui	s0,0xffff9
 2a4:	7275                	lui	tp,0xffffd
 2a6:	5f6e                	lw	t5,248(sp)
 2a8:	6461                	lui	s0,0x18
        for(j = 0; j < size_a + size_b -1; ++j){
 2aa:	7264                	flw	fs1,100(a2)
 2ac:	7365                	lui	t1,0xffff9
    if(star_mult == 1){
 2ae:	72003673          	csrrc	a2,0x720,zero
        for (j = size_b -1; j >= 0; j = j-1){
 2b2:	7465                	lui	s0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	7275                	lui	tp,0xffffd
    for (i = 0; i < size_b; ++i){
 2b6:	5f6e                	lw	t5,248(sp)
 2b8:	6461                	lui	s0,0x18
 2ba:	7264                	flw	fs1,100(a2)
 2bc:	7365                	lui	t1,0xffff9
 2be:	73003773          	csrrc	a4,0x730,zero
    for(j = 0; j < size_a + size_b -1; ++j){
 2c2:	6f68                	flw	fa0,92(a4)
 2c4:	7472                	flw	fs0,60(sp)
 2c6:	7520                	flw	fs0,104(a0)
    array_mod(product,mod,(size_a+size_b-1));
 2c8:	736e                	flw	ft6,248(sp)
 2ca:	6769                	lui	a4,0x1a
 2cc:	656e                	flw	fa0,216(sp)
 2ce:	2064                	fld	fs1,192(s0)
 2d0:	6e69                	lui	t3,0x1a
 2d2:	0074                	addi	a3,sp,12
 2d4:	615f 6574 6978      	0x69786574615f
}
 2da:	3074                	fld	fa3,224(s0)
 2dc:	5f00                	lw	s0,56(a4)
 2de:	6e676973          	csrrsi	s2,0x6e6,14
 2e2:	6c61                	lui	s8,0x18
 2e4:	625f 6675 5f00      	0x5f006675625f
 2ea:	7361                	lui	t1,0xffff8
 2ec:	6d697463          	bgeu	s2,s6,9b4 <generate_keys+0xd4>
 2f0:	5f65                	li	t5,-7
 2f2:	7562                	flw	fa0,56(sp)
 2f4:	0066                	c.slli	zero,0x19
 2f6:	725f 7365 6c75      	0x6c757365725f
 2fc:	0074                	addi	a3,sp,12
 2fe:	5f5f 6377 0068      	0x6863775f5f
                line[size_b-1-j][k] = pola[k]*polb[j];
 304:	746e6977          	0x746e6977
 308:	745f 6700 6e65      	0x6e656700745f
 30e:	7265                	lui	tp,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 310:	7461                	lui	s0,0xffff8
                line[size_b-1-j][k] = pola[k]*polb[j];
 312:	5f65                	li	t5,-7
 314:	7379656b          	0x7379656b
            for (k = size_a-1; k >= 0; k = k-1 ){
 318:	5f00                	lw	s0,56(a4)
 31a:	625f 6975 746c      	0x746c6975625f
        for (j = size_b -1; j >= 0; j = j-1){
 320:	6e69                	lui	t3,0x1a
 322:	6d5f 6d65 7063      	0x70636d656d5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 328:	0079                	c.nop	30
 32a:	6c5f 636f 006b      	0x6b636f6c5f
 330:	544e                	lw	s0,240(sp)
 332:	5552                	lw	a0,52(sp)
 334:	345f 5f38 6962      	0x69625f38345f
 33a:	4d74                	lw	a3,92(a0)
 33c:	632e                	flw	ft6,200(sp)
 33e:	7000                	flw	fs0,32(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 340:	6f72                	flw	ft10,28(sp)
 342:	7564                	flw	fs1,108(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 344:	00327463          	bgeu	tp,gp,34c <polymult+0x192>
 348:	7865                	lui	a6,0xffff9
 34a:	5f74                	lw	a3,124(a4)
            line[i][j] = line[i][j] % mod;
 34c:	7565                	lui	a0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 34e:	64696c63          	bltu	s2,t1,9a6 <generate_keys+0xc6>
            line[i][j] = line[i][j] % mod;
 352:	5f00                	lw	s0,56(a4)
 354:	74697277          	0x74697277
 358:	0065                	c.nop	25
        for(j = 0; j < size_a + size_b -1; ++j){
 35a:	5f5f 6d74 795f      	0x795f6d745f5f
    for (i = 0; i < size_b; ++i){
 360:	6165                	addi	sp,sp,112
 362:	0072                	c.slli	zero,0x1c
 364:	6f70                	flw	fa2,92(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 366:	626c                	flw	fa1,68(a2)
 368:	7200                	flw	fs0,32(a2)
            product[j] += line[i][j];
 36a:	6e61                	lui	t3,0x18
 36c:	6f64                	flw	fs1,92(a4)
 36e:	5f6d                	li	t5,-5
        for(i = 0; i < size_b; ++i){
 370:	6176                	flw	ft2,92(sp)
            product[j] += line[i][j];
 372:	006c                	addi	a1,sp,12
 374:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 37a:	6c00636f          	jal	t1,6a3a <_stack_len+0x2a3a>
        for(i = 0; i < size_b; ++i){
 37e:	20676e6f          	jal	t3,76584 <_stack_start+0x66584>
    for(j = 0; j < size_a + size_b -1; ++j){
 382:	6f64                	flw	fs1,92(a4)
 384:	6275                	lui	tp,0x1d
 386:	656c                	flw	fa1,76(a0)
        for(i = 0; i < size_b; ++i){
 388:	5f00                	lw	s0,56(a4)
 38a:	656e                	flw	fa0,216(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 38c:	7478                	flw	fa4,108(s0)
    int line[size_b][size_a + size_b];
 38e:	0066                	c.slli	zero,0x19
 390:	7261                	lui	tp,0xffff8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 392:	6172                	flw	ft2,28(sp)
 394:	5f79                	li	t5,-2
 396:	7165                	addi	sp,sp,-400
 398:	0075                	c.nop	29
 39a:	656d                	lui	a0,0x1b
    int line[size_b][size_a + size_b];
 39c:	67617373          	csrrci	t1,0x676,2
 3a0:	0065                	c.nop	25
 3a2:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3a8:	72006e6f          	jal	t3,6ac8 <_stack_len+0x2ac8>
 3ac:	7465                	lui	s0,0xffff9
 3ae:	7275                	lui	tp,0xffffd
 3b0:	5f6e                	lw	t5,248(sp)
 3b2:	6461                	lui	s0,0x18
 3b4:	7264                	flw	fs1,100(a2)
 3b6:	7365                	lui	t1,0xffff9
 3b8:	5f003573          	csrrc	a0,0x5f0,zero
 3bc:	7461                	lui	s0,0xffff8
 3be:	7865                	lui	a6,0xffff9
    int line[size_b][size_a + size_b];
 3c0:	7469                	lui	s0,0xffffa
 3c2:	7300                	flw	fs0,32(a4)
 3c4:	6275                	lui	tp,0x1d
    int pola[size_a];
 3c6:	6174706f          	j	481dc <_stack_start+0x381dc>
 3ca:	6772                	flw	fa4,28(sp)
 3cc:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 3ce:	735f 6964 6964      	0x69646964735f
    int polb[size_b];
 3d4:	696e                	flw	fs2,216(sp)
 3d6:	0074                	addi	a3,sp,12
 3d8:	6f5f 6666 745f      	0x745f66666f5f
 3de:	4500                	lw	s0,8(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e0:	636e                	flw	ft6,216(sp)
 3e2:	4d5f 7365 6173      	0x617373654d5f
 3e8:	2f006567          	0x2f006567
    int pola[size_a];
 3ec:	6f68                	flw	fa0,92(a4)
    int polb[size_b];
 3ee:	656d                	lui	a0,0x1b
    for (i = 0; i < size_b; ++i){
 3f0:	706f742f          	0x706f742f
 3f4:	6c61                	lui	s8,0x18
            product2[j] = 0;
 3f6:	65442f63          	0x65442f63
 3fa:	6f746b73          	csrrsi	s6,0x6f7,8
    for (i = 0; i < size_b; ++i){
 3fe:	2f70                	fld	fa2,216(a4)
 400:	68746967          	0x68746967
    array_equ(pola,a,size_a);
 404:	6275                	lui	tp,0x1d
 406:	6e65732f          	0x6e65732f
 40a:	6f69                	lui	t5,0x1a
 40c:	5f72                	lw	t5,60(sp)
    array_equ(polb,b,size_b);
 40e:	7270                	flw	fa2,100(a2)
 410:	63656a6f          	jal	s4,56a46 <_stack_start+0x46a46>
 414:	2f74                	fld	fa3,216(a4)
 416:	6f2f7773          	csrrci	a4,0x6f2,30
    if(star_mult == 1){
 41a:	636c                	flw	fa1,68(a4)
 41c:	6d75                	lui	s10,0x1d
 41e:	656c                	flw	fa1,76(a0)
 420:	2f72                	fld	ft10,280(sp)
 422:	2e35                	jal	75e <ext_euclid+0x92>
 424:	6f6d                	lui	t5,0x1b
 426:	2b64                	fld	fs1,208(a4)
 428:	7165                	addi	sp,sp,-400
 42a:	0075                	c.nop	29
        for (j = size_b -1; j >= 0; j = j-1){
 42c:	746e6f63          	bltu	t3,t1,b8a <generate_keys+0x2aa>
            for (k = size_a-1; k >= 0; k = k-1 ){
 430:	6f72                	flw	ft10,28(sp)
 432:	526c                	lw	a1,100(a2)
            product2[j] = 0;
 434:	5f00                	lw	s0,56(a4)
 436:	7266                	flw	ft4,120(sp)
 438:	6565                	lui	a0,0x19
            line[i][j] = 0;
 43a:	696c                	flw	fa1,84(a0)
 43c:	72007473          	csrrci	s0,0x720,0
            product2[j] = 0;
 440:	6e69                	lui	t3,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
 442:	6f705f67          	0x6f705f67
 446:	796c                	flw	fa1,116(a0)
 448:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 44a:	4f4c                	lw	a1,28(a4)
 44c:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
 450:	4345                	li	t1,17
        for(j = 0; j < size_a + size_b -1; ++j){
 452:	5255                	li	tp,-11
 454:	45564953          	0x45564953
                line[size_b-1-j][k] = pola[k]*polb[j];
 458:	545f 7400 5f69      	0x5f697400545f
 45e:	0031                	c.nop	12
 460:	6974                	flw	fa3,84(a0)
 462:	325f 7500 736e      	0x736e7500325f
 468:	6769                	lui	a4,0x1a
 46a:	656e                	flw	fa0,216(sp)
 46c:	2064                	fld	fs1,192(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 46e:	72616863          	bltu	sp,t1,b9e <generate_keys+0x2be>
        for (j = size_b -1; j >= 0; j = j-1){
 472:	7100                	flw	fs0,32(a0)
 474:	5f69                	li	t5,-6
 476:	0031                	c.nop	12
 478:	6e5f 7765 5f00      	0x5f0077656e5f
    for(i=0;i<size_b;++i){
 47e:	5f68                	lw	a0,124(a4)
 480:	7265                	lui	tp,0xffff9
 482:	6e72                	flw	ft8,28(sp)
 484:	6873006f          	j	3130a <_stack_start+0x2130a>
 488:	2074726f          	jal	tp,47e8e <_stack_start+0x37e8e>
        for(j=0;j<size_a+size_b-1;++j){
 48c:	6e69                	lui	t3,0x1a
 48e:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 490:	5f5f 6d74 795f      	0x795f6d745f5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 496:	6164                	flw	fs1,68(a0)
 498:	0079                	c.nop	30
 49a:	5f5f 6273 6675      	0x667562735f5f
 4a0:	5f00                	lw	s0,56(a4)
 4a2:	6c66                	flw	fs8,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 4a4:	6761                	lui	a4,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 4a6:	5f003273          	csrrc	tp,0x5f0,zero
 4aa:	6f69                	lui	t5,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
 4ac:	7362                	flw	ft6,56(sp)
 4ae:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 4b0:	465f 4c49 0045      	0x454c49465f
 4b6:	6d5f 7362 6174      	0x617473626d5f
        for(j=0;j<size_a+size_b-1;++j){
 4bc:	6574                	flw	fa3,76(a0)
 4be:	745f 5f00 735f      	0x735f5f00745f
            product2[j] += line[i][j];
 4c4:	4946                	lw	s2,80(sp)
        for(j=0;j<size_a+size_b-1;++j){
 4c6:	454c                	lw	a1,12(a0)
 4c8:	5f00                	lw	s0,56(a4)
 4ca:	626d                	lui	tp,0x1b
    for(i=0;i<size_b;++i){
 4cc:	74617473          	csrrci	s0,0x746,2
 4d0:	0065                	c.nop	25
}
 4d2:	725f 6e61 5f64      	0x5f646e61725f
 4d8:	656e                	flw	fa0,216(sp)
 4da:	7478                	flw	fa4,108(s0)
 4dc:	5f00                	lw	s0,56(a4)
 4de:	626d                	lui	tp,0x1b
 4e0:	656c                	flw	fa1,76(a0)
 4e2:	5f6e                	lw	t5,248(sp)
 4e4:	74617473          	csrrci	s0,0x746,2
 4e8:	0065                	c.nop	25
 4ea:	695f 636e 5f00      	0x5f00636e695f
 4f0:	6e69                	lui	t3,0x1a
 4f2:	0064                	addi	s1,sp,12
 4f4:	6c5f 636f 6c61      	0x6c61636f6c5f
 4fa:	0065                	c.nop	25
    int v[size_N];
 4fc:	5f5f 6c63 6165      	0x61656c635f5f
 502:	756e                	flw	fa0,248(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 504:	0070                	addi	a2,sp,12
 506:	755f 736e 6570      	0x6570736e755f
 50c:	69666963          	bltu	a2,s6,b9e <generate_keys+0x2be>
 510:	6465                	lui	s0,0x19
 512:	6c5f 636f 6c61      	0x6c61636f6c5f
 518:	5f65                	li	t5,-7
 51a:	6e69                	lui	t3,0x1a
 51c:	6f66                	flw	ft10,88(sp)
    int v[size_N];
 51e:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 520:	616d                	addi	sp,sp,240
    int v[size_N];
 522:	7778                	flw	fa4,108(a4)
 524:	7364                	flw	fs1,100(a4)
 526:	5f00                	lw	s0,56(a4)
    int q[size_N];
 528:	6572                	flw	fa0,28(sp)
 52a:	6e65                	lui	t3,0x19
 52c:	0074                	addi	a3,sp,12
    int num_temp[size_N];
 52e:	72617473          	csrrci	s0,0x726,2
    int denum_temp[size_D];
 532:	6d5f 6c75 0074      	0x746c756d5f
 538:	735f 6565 0064      	0x646565735f
 53e:	6972                	flw	fs2,28(sp)
 540:	325f 5f00 635f      	0x635f5f00325f
    int v[size_N];
 546:	746e756f          	jal	a0,e7c8c <_stack_start+0xd7c8c>
       array_equ(num_temp,num,size_N);
 54a:	5f00                	lw	s0,56(a4)
 54c:	765f 6c61 6575      	0x65756c61765f
    int denum_temp[size_D];
 552:	5f00                	lw	s0,56(a4)
 554:	6b656573          	csrrsi	a0,0x6b6,10
       array_mod(num_temp, mod, size_N);
 558:	5f00                	lw	s0,56(a4)
 55a:	7066                	flw	ft0,120(sp)
 55c:	745f736f          	jal	t1,f84a0 <_stack_start+0xe84a0>
    int denum_temp[size_D];
 560:	6c00                	flw	fs0,24(s0)
    array_equ(denum_temp,denum,size_D);
 562:	6e65                	lui	t3,0x19
 564:	00687467          	0x687467
 568:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    array_mod(denum_temp,mod,size_D);
 56e:	6e69                	lui	t3,0x1a
 570:	7000                	flw	fs0,32(s0)
    for (i = 0; i < size_N; ++i){
 572:	6275                	lui	tp,0x1d
 574:	696c                	flw	fa1,84(a0)
 576:	656b5f63          	bge	s6,s6,bd4 <ntru_encyrpt+0x2>
    for (i = size_D-1; i >= 0; i = i-1){
 57a:	0079                	c.nop	30
 57c:	7261                	lui	tp,0xffff8
 57e:	6172                	flw	ft2,28(sp)
 580:	5f79                	li	t5,-2
 582:	6f6d                	lui	t5,0x1b
    for (i = 0; i < size_N; ++i){
 584:	0064                	addi	s1,sp,12
 586:	735f 7274 6f74      	0x6f747274735f
    for (u = 0; u < mod; ++u){
 58c:	616c5f6b          	0x616c5f6b
 590:	5f007473          	csrrci	s0,0x5f0,0
        q[i] = 0;
 594:	6e66                	flw	ft8,88(sp)
 596:	7974                	flw	fa3,116(a0)
 598:	6570                	flw	fa2,76(a0)
        v[i] = 0;
 59a:	65730073          	0x65730073
        q[i] = 0;
 59e:	74657263          	bgeu	a0,t1,ce2 <ntru_deceypt+0x7c>
        v[i] = 0;
 5a2:	6b5f 7965 665f      	0x665f79656b5f
        if( denum_temp[i] != 0 )
 5a8:	0070                	addi	a2,sp,12
    for (i = size_D-1; i >= 0; i = i-1){
 5aa:	615f 6464 5f00      	0x5f006464615f
        if ( (b_N*u)%mod == 1 )
 5b0:	555f 6f4c 676e      	0x676e6f4c555f
 5b6:	7200                	flw	fs0,32(a2)
    for (u = 0; u < mod; ++u){
 5b8:	5f69                	li	t5,-6
 5ba:	0031                	c.nop	12
        if( num_temp[i] != 0 )
 5bc:	675f 7465 6164      	0x61647465675f
    for (i = size_N-1; i >= 0; i = i-1){
 5c2:	6574                	flw	fa3,76(a0)
 5c4:	655f 7272 5f00      	0x5f007272655f
 5ca:	626f6c67          	0x626f6c67
    while (d >= d2){
 5ce:	6c61                	lui	s8,0x18
    array_equ(result,q,size_N);
 5d0:	695f 706d 7275      	0x7275706d695f
 5d6:	5f65                	li	t5,-7
 5d8:	7470                	flw	fa2,108(s0)
 5da:	0072                	c.slli	zero,0x1c
 5dc:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
    for(i = size_N; i < (2*size_N); ++i){
 5e0:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
        result[i] = num_temp[i-size_N];
 5e4:	2e39                	jal	902 <generate_keys+0x22>
 5e6:	2e32                	fld	ft8,264(sp)
 5e8:	2030                	fld	fa2,64(s0)
    for(i = size_N; i < (2*size_N); ++i){
 5ea:	6d2d                	lui	s10,0xb
 5ec:	7261                	lui	tp,0xffff8
}
 5ee:	723d6863          	bltu	s10,gp,d1e <ntru_deceypt+0xb8>
 5f2:	3376                	fld	ft6,376(sp)
 5f4:	6932                	flw	fs2,12(sp)
 5f6:	636d                	lui	t1,0x1b
 5f8:	2d20                	fld	fs0,88(a0)
 5fa:	616d                	addi	sp,sp,240
 5fc:	6962                	flw	fs2,24(sp)
 5fe:	693d                	lui	s2,0xf
 600:	706c                	flw	fa1,100(s0)
 602:	2d203233          	0x2d203233
 606:	636d                	lui	t1,0x1b
 608:	6f6d                	lui	t5,0x1b
 60a:	6564                	flw	fs1,76(a0)
 60c:	3d6c                	fld	fa1,248(a0)
 60e:	656d                	lui	a0,0x1b
 610:	6164                	flw	fs1,68(a0)
 612:	796e                	flw	fs2,248(sp)
 614:	2d20                	fld	fs0,88(a0)
 616:	746d                	lui	s0,0xffffb
        v[(d-d2)] = u*r_d;
 618:	6e75                	lui	t3,0x1d
 61a:	3d65                	jal	4d2 <polymult2+0x146>
 61c:	6f72                	flw	ft10,28(sp)
 61e:	74656b63          	bltu	a0,t1,d74 <reset_handler+0x46>
 622:	2d20                	fld	fs0,88(a0)
        array_mod(v, mod, size_N);
 624:	4f2d2067          	0x4f2d2067
 628:	662d2073          	csrs	0x662,s10
 62c:	6976                	flw	fs2,92(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 62e:	69626973          	csrrsi	s2,0x696,4
 632:	696c                	flw	fa1,84(a0)
 634:	7974                	flw	fa3,116(a0)
 636:	683d                	lui	a6,0xf
 638:	6469                	lui	s0,0x1a
 63a:	6564                	flw	fs1,76(a0)
        array_mod(product, mod, size_N);
 63c:	006e                	c.slli	zero,0x1b
 63e:	755f 756e 6573      	0x6573756e755f
        for (i = 0; i < size_N; ++i){
 644:	5f64                	lw	s1,124(a4)
 646:	6172                	flw	ft2,28(sp)
 648:	646e                	flw	fs0,216(sp)
 64a:	6c00                	flw	fs0,24(s0)
	array_mod(num_temp, mod, size_N);
 64c:	6e69                	lui	t3,0x1a
 64e:	0065                	c.nop	25
 650:	775f 7364 5f00      	0x5f007364775f
        for(i = 0; i < size_N; ++i){
 656:	745f 5f6d 6477      	0x64775f6d745f
        array_mod(q, mod, size_N);
 65c:	7961                	lui	s2,0xffff8
 65e:	5f00                	lw	s0,56(a4)
 660:	65756c67          	0x65756c67
        for (i = size_N-1; i >= 0; i = i-1){
 664:	6900                	flw	fs0,16(a0)
 666:	736e                	flw	ft6,248(sp)
 668:	7274                	flw	fa3,100(a2)
 66a:	655f 7571 6e00      	0x6e007571655f
 670:	7274                	flw	fa3,100(a2)
 672:	5f75                	li	t5,-3
 674:	6e65                	lui	t3,0x19
            num_temp[i] = num_temp[i] - product[i];
 676:	70727963          	bgeu	tp,t2,d88 <_start+0x12>
 67a:	0074                	addi	a3,sp,12
 67c:	735f 6973 657a      	0x657a6973735f
        for (i = 0; i < size_N; ++i){
 682:	745f 5f00 366c      	0x366c5f00745f
            num_temp[i] = num_temp[i] - product[i];
 688:	6134                	flw	fa3,64(a0)
        for (i = 0; i < size_N; ++i){
 68a:	625f 6675 6400      	0x64006675625f
            q[i] = q[i] + v[i];
 690:	6e65                	lui	t3,0x19
 692:	6d75                	lui	s10,0x1d
 694:	5f00                	lw	s0,56(a4)
        for(i = 0; i < size_N; ++i){
 696:	5f676973          	csrrsi	s2,0x5f6,14
            q[i] = q[i] + v[i];
 69a:	7566                	flw	fa0,120(sp)
 69c:	636e                	flw	ft6,216(sp)
 69e:	5f00                	lw	s0,56(a4)
        for(i = 0; i < size_N; ++i){
 6a0:	626e                	flw	ft4,216(sp)
            if( num_temp[i] != 0 )
 6a2:	6675                	lui	a2,0x1d
        for (i = size_N-1; i >= 0; i = i-1){
 6a4:	5f00                	lw	s0,56(a4)
 6a6:	6e75                	lui	t3,0x1d
            v[i] = 0;
 6a8:	7375                	lui	t1,0xffffd
 6aa:	6465                	lui	s0,0x19
 6ac:	7000                	flw	fs0,32(s0)
 6ae:	52796c6f          	jal	s8,973d4 <_stack_start+0x873d4>
        for (i = 0; i < size_N; ++i){
 6b2:	7300                	flw	fs0,32(a4)
 6b4:	7a69                	lui	s4,0xffffa
 6b6:	5f65                	li	t5,-7
 6b8:	0044                	addi	s1,sp,4
        result[i] = num_temp[i-size_N];
 6ba:	5f5f 6d74 695f      	0x695f6d745f5f
 6c0:	74736473          	csrrsi	s0,0x747,6
 6c4:	5f00                	lw	s0,56(a4)
    for(i = size_N; i < (2*size_N); ++i){
 6c6:	6f6c                	flw	fa1,92(a4)
 6c8:	746c6163          	bltu	s8,t1,e0a <memcpy+0x6a>
    int ri_2[size]; // MX-ring poly, a
 6cc:	6d69                	lui	s10,0x1a
 6ce:	5f65                	li	t5,-7
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6d0:	7562                	flw	fa0,56(sp)
    int ri_2[size]; // MX-ring poly, a
 6d2:	0066                	c.slli	zero,0x19
 6d4:	635f 6f6c 6573      	0x65736f6c635f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6da:	5f00                	lw	s0,56(a4)
 6dc:	3472                	fld	fs0,312(sp)
 6de:	0038                	addi	a4,sp,8
 6e0:	6d5f 7462 776f      	0x776f74626d5f
 6e6:	74735f63          	bge	t1,t2,e44 <memcpy+0xa4>
 6ea:	7461                	lui	s0,0xffff8
 6ec:	0065                	c.nop	25
 6ee:	705f 7335 6d00      	0x6d007335705f
    int ri_2[size]; // MX-ring poly, a
 6f4:	6961                	lui	s2,0x18
 6f6:	006e                	c.slli	zero,0x1b
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6f8:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    int ri[size];
 6fe:	6164                	flw	fs1,68(a0)
 700:	0079                	c.nop	30
 702:	657a6973          	csrrsi	s2,0x657,20
    int ti_1[size]; // ti_1[0] = 1
 706:	615f 7300 7a69      	0x7a697300615f
    int ti[size];
 70c:	5f65                	li	t5,-7
 70e:	0062                	c.slli	zero,0x18
    int qi_1[size];
 710:	30747263          	bgeu	s0,t2,a14 <generate_keys+0x134>
 714:	532e                	lw	t1,232(sp)
    int temp[size];
 716:	2f00                	fld	fs0,24(a4)
 718:	6f68                	flw	fa0,92(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 71a:	656d                	lui	a0,0x1b
 71c:	706f742f          	0x706f742f
    int ri_2[size]; // MX-ring poly, a
 720:	6c61                	lui	s8,0x18
 722:	65442f63          	0x65442f63
    for (i = 0; i < size; ++i) {
 726:	6f746b73          	csrrsi	s6,0x6f7,8
        ti_2[i] = 0;
 72a:	2f70                	fld	fa2,216(a4)
 72c:	7270                	flw	fa2,100(a2)
 72e:	6c656a6f          	jal	s4,56df4 <_stack_start+0x46df4>
    for (i = 0; i < size; ++i) {
 732:	7265                	lui	tp,0xffff9
    array_equ(ri_2,polyR,size);
 734:	636c6f2f          	0x636c6f2f
 738:	6d75                	lui	s10,0x1d
 73a:	6d2e352f          	0x6d2e352f
    array_equ(ri_1,polyf,size);
 73e:	652b646f          	jal	s0,b6d90 <_stack_start+0xa6d90>
 742:	7571                	lui	a0,0xffffc
    ti_1[0] = 1;
 744:	4700                	lw	s0,8(a4)
 746:	554e                	lw	a0,240(sp)
 748:	4120                	lw	s0,64(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 74a:	2e322053          	0x2e322053
 74e:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x184>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0096                	slli	ra,ra,0x5
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	012e                	slli	sp,sp,0xb
  4a:	0000                	unimp
  4c:	008c                	addi	a1,sp,64
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	01ba                	slli	gp,gp,0xe
  5a:	0000                	unimp
  5c:	01d2                	slli	gp,gp,0x14
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4250                	lw	a2,4(a2)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0a98                	addi	a4,sp,336
  6c:	0b99                	addi	s7,s7,6
  6e:	944e                	add	s0,s0,s3
  70:	5806                	lw	a6,96(sp)
  72:	0288                	addi	a0,sp,320
  74:	0389                	addi	t2,t2,2
  76:	0795                	addi	a5,a5,5
  78:	0896                	slli	a7,a7,0x5
  7a:	0c9a0997          	auipc	s3,0xc9a0
  jal x0, default_exc_handler
  7e:	01810d9b          	0x1810d9b
  jal x0, reset_handler
  82:	0c42                	slli	s8,s8,0x10
  jal x0, default_exc_handler
  84:	0008                	0x8
  86:	0a00e603          	0xa00e603
  jal x0, default_exc_handler
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    switch(length%3) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
            for (i = 0; i < (length / 3); i++) {
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0054                	addi	a3,sp,4
  ae:	0000                	unimp
  b0:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0000                	unimp
  b4:	038c                	addi	a1,sp,448
  b6:	0000                	unimp
  b8:	0170                	addi	a2,sp,140
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4650                	lw	a2,12(a2)
  c0:	0795                	addi	a5,a5,5
            a1[length-1] = a2[length-1];
  c2:	9648                	0x9648
  c4:	9708                	0x9708
  c6:	6209                	lui	tp,0x2
  c8:	0288                	addi	a0,sp,320
  ca:	0389                	addi	t2,t2,2
  cc:	0492                	slli	s1,s1,0x4
  ce:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
  d2:	0a98                	addi	a4,sp,336
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b99                	addi	s7,s7,6
  d6:	0c9a                	slli	s9,s9,0x6
  d8:	01810d9b          	0x1810d9b
  dc:	0c42                	slli	s8,s8,0x10
  de:	0008                	0x8
  e0:	0c011603          	lh	a2,192(sp)
            a1[length-1] = a2[length-1];
  e4:	5002                	0x5002
            a1[length-2] = a2[length-2];
  e6:	c142                	sw	a6,128(sp)
  e8:	c842                	sw	a6,16(sp)
  ea:	c942                	sw	a6,144(sp)
  ec:	d242                	sw	a6,36(sp)
  ee:	d342                	sw	a6,164(sp)
} //end of function
  f0:	d442                	sw	a6,40(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	d542                	sw	a6,168(sp)
  f4:	d642                	sw	a6,44(sp)
    asm volatile(
  f6:	d742                	sw	a6,172(sp)
  f8:	d842                	sw	a6,48(sp)
  fa:	d942                	sw	a6,176(sp)
  fc:	da42                	sw	a6,52(sp)
  fe:	db42                	sw	a6,180(sp)
            for (i = 0; i < (length / 3); i++) {
 100:	0e4a                	slli	t3,t3,0x12
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0054                	addi	a3,sp,4
 106:	0000                	unimp
    asm volatile(
 108:	0000                	unimp
 10a:	0000                	unimp
 10c:	04fc                	addi	a5,sp,588
 10e:	0000                	unimp
 110:	01d0                	addi	a2,sp,196
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	0000                	unimp
 114:	0e46                	slli	t3,t3,0x11
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	4840                	lw	s0,20(s0)
 118:	0181                	addi	gp,gp,0
    asm volatile(
 11a:	0288                	addi	a0,sp,320
 11c:	0389                	addi	t2,t2,2
 11e:	0c42                	slli	s8,s8,0x10
 120:	0008                	0x8
 122:	9256                	add	tp,tp,s5
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	9304                	0x9304
 126:	9405                	srai	s0,s0,0x21
    asm volatile(
 128:	9506                	add	a0,a0,ra
 12a:	97089607          	0x97089607
    switch(length%3) {
 12e:	9809                	andi	s0,s0,-30
 130:	990a                	add	s2,s2,sp
 132:	9b0c9a0b          	0x9b0c9a0b
 136:	020d                	addi	tp,tp,3
 138:	0ad0                	addi	a2,sp,340
 13a:	020c                	addi	a1,sp,256
 13c:	4240                	lw	s0,4(a2)
 13e:	42c1                	li	t0,16
 140:	42c8                	lw	a0,4(a3)
            for (i = 0; i < (length / 3); i++) {
 142:	42c9                	li	t0,18
 144:	42d2                	lw	t0,20(sp)
    asm volatile(
 146:	42d442d3          	0x42d442d3
            for (i = 0; i < (length / 3); i++) {
 14a:	42d5                	li	t0,21
 14c:	42d6                	lw	t0,84(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	42d842d7          	0x42d842d7
 152:	42d9                	li	t0,22
 154:	42da                	lw	t0,148(sp)
 156:	000e4adb          	0xe4adb
 15a:	0b42                	slli	s6,s6,0x10
 15c:	0054                	addi	a3,sp,4
            a1[length-1] = a1[length-1] % mod;
 15e:	0000                	unimp
 160:	0000                	unimp
 162:	0000                	unimp
 164:	06cc                	addi	a1,sp,836
 166:	0000                	unimp
 168:	0214                	addi	a3,sp,256
 16a:	0000                	unimp
 16c:	0e46                	slli	t3,t3,0x11
 16e:	5e50                	lw	a2,60(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	0288                	addi	a0,sp,320
 172:	0389                	addi	t2,t2,2
 174:	0492                	slli	s1,s1,0x4
 176:	06940593          	addi	a1,s0,105
    asm volatile(
 17a:	0795                	addi	a5,a5,5
            for (i = 0; i < ((length-1) / 3); i++) {
 17c:	0896                	slli	a7,a7,0x5
 17e:	0a980997          	auipc	s3,0xa980
            a1[length-2] = a1[length-2] % mod;
 182:	0b99                	addi	s7,s7,6
 184:	0c9a                	slli	s9,s9,0x6
 186:	01810d9b          	0x1810d9b
 18a:	0c42                	slli	s8,s8,0x10
 18c:	0008                	0x8
} //end of function
 18e:	0a012e03          	lw	t3,160(sp)
    asm volatile(
 192:	020c                	addi	a1,sp,256
 194:	4250                	lw	a2,4(a2)
 196:	42c1                	li	t0,16
 198:	42c8                	lw	a0,4(a3)
            for (i = 0; i < (length / 3); i++) {
 19a:	42c9                	li	t0,18
 19c:	42d2                	lw	t0,20(sp)
    asm volatile(
 19e:	42d442d3          	0x42d442d3
 1a2:	42d5                	li	t0,21
 1a4:	42d6                	lw	t0,84(sp)
 1a6:	42d842d7          	0x42d842d7
            for (i = 0; i < ((length-1) / 3); i++) {
 1aa:	42d9                	li	t0,22
    asm volatile(
 1ac:	42da                	lw	t0,148(sp)
 1ae:	000e4adb          	0xe4adb
 1b2:	0b42                	slli	s6,s6,0x10
 1b4:	0054                	addi	a3,sp,4
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	0000                	unimp
 1b8:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ba:	0000                	unimp
 1bc:	08e0                	addi	s0,sp,92
 1be:	0000                	unimp
 1c0:	02f2                	slli	t0,t0,0x1c
    int line[size_b][size_a + size_b];
 1c2:	0000                	unimp
 1c4:	0e42                	slli	t3,t3,0x10
 1c6:	03f0                	addi	a2,sp,460
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	814c                	0x814c
 1ca:	8801                	andi	s0,s0,0
    int line[size_b][size_a + size_b];
 1cc:	8902                	jr	s2
 1ce:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 1d2:	6400                	flw	fs0,8(s0)
 1d4:	0492                	slli	s1,s1,0x4
 1d6:	06940593          	addi	a1,s0,105
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1da:	0795                	addi	a5,a5,5
    int pola[size_a];
 1dc:	0896                	slli	a7,a7,0x5
 1de:	0c9a0997          	auipc	s3,0xc9a0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e2:	0a98                	addi	a4,sp,336
 1e4:	0b99                	addi	s7,s7,6
 1e6:	0a01da03          	lhu	s4,160(gp)
 1ea:	020c                	addi	a1,sp,256
    int line[size_b][size_a + size_b];
 1ec:	03f0                	addi	a2,sp,460
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	c144                	sw	s1,4(a0)
 1f0:	c844                	sw	s1,20(s0)
 1f2:	c944                	sw	s1,20(a0)
    int line[size_b][size_a + size_b];
 1f4:	d244                	sw	s1,36(a2)
    int pola[size_a];
 1f6:	d344                	sw	s1,36(a4)
 1f8:	d444                	sw	s1,44(s0)
    int line[size_b][size_a + size_b];
 1fa:	d544                	sw	s1,44(a0)
 1fc:	d644                	sw	s1,44(a2)
 1fe:	d744                	sw	s1,44(a4)
    int pola[size_a];
 200:	d844                	sw	s1,52(s0)
 202:	d944                	sw	s1,52(a0)
    int polb[size_b];
 204:	da44                	sw	s1,52(a2)
 206:	0e4a                	slli	t3,t3,0x12
 208:	4200                	lw	s0,0(a2)
    int pola[size_a];
 20a:	0034000b          	0x34000b
    int polb[size_b];
 20e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 210:	0000                	unimp
    int pola[size_a];
 212:	0000                	unimp
 214:	0bd2                	slli	s7,s7,0x14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 216:	0000                	unimp
    int line[size_b][size_a + size_b];
 218:	0094                	addi	a3,sp,64
 21a:	0000                	unimp
    int polb[size_b];
 21c:	0e42                	slli	t3,t3,0x10
            line[i][j] = 0;
 21e:	01e0                	addi	s0,sp,204
 220:	8846                	mv	a6,a7
 222:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 224:	5a049203          	lh	tp,1440(s1)
            product[j] = 0;
 228:	0181                	addi	gp,gp,0
 22a:	06940593          	addi	a1,s0,105
 22e:	5202                	lw	tp,32(sp)
    for (i = 0; i < size_b; ++i){
 230:	c10a                	sw	sp,128(sp)
 232:	c842                	sw	a6,16(sp)
    array_equ(pola,a,size_a);
 234:	c942                	sw	a6,144(sp)
 236:	d242                	sw	a6,36(sp)
 238:	d342                	sw	a6,164(sp)
 23a:	d442                	sw	a6,40(sp)
 23c:	0e42                	slli	t3,t3,0x10
 23e:	4200                	lw	s0,0(a2)
 240:	0000000b          	0xb
 244:	0040                	addi	s0,sp,4
 246:	0000                	unimp
 248:	0000                	unimp
 24a:	0000                	unimp
    array_mod(pola,mod,size_a);
 24c:	0c66                	slli	s8,s8,0x19
 24e:	0000                	unimp
 250:	00c4                	addi	s1,sp,68
 252:	0000                	unimp
    array_equ(polb,b,size_b);
 254:	0e42                	slli	t3,t3,0x10
 256:	4430                	lw	a2,72(s0)
 258:	0288                	addi	a0,sp,320
 25a:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
 25e:	9504                	0x9504
    array_mod(polb,mod,size_b);
 260:	58099707          	0x58099707
 264:	0181                	addi	gp,gp,0
 266:	0389                	addi	t2,t2,2
    if(star_mult == 1){
 268:	0694                	addi	a3,sp,832
 26a:	0896                	slli	a7,a7,0x5
 26c:	4e02                	lw	t3,0(sp)
 26e:	c10a                	sw	sp,128(sp)
 270:	c842                	sw	a6,16(sp)
 272:	c942                	sw	a6,144(sp)
 274:	d242                	sw	a6,36(sp)
 276:	d342                	sw	a6,164(sp)
 278:	d442                	sw	a6,40(sp)
 27a:	d542                	sw	a6,168(sp)
 27c:	d642                	sw	a6,44(sp)
 27e:	d742                	sw	a6,172(sp)
 280:	0e42                	slli	t3,t3,0x10
 282:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 284:	0000000b          	0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	002c                	addi	a1,sp,8
 28a:	0000                	unimp
            product[j] = 0;
 28c:	0000                	unimp
 28e:	0000                	unimp
 290:	0f26                	slli	t5,t5,0x9
            line[i][j] = 0;
 292:	0000                	unimp
 294:	0138                	addi	a4,sp,136
            product[j] = 0;
 296:	0000                	unimp
 298:	0e44                	addi	s1,sp,788
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	08b0                	addi	a2,sp,88
 29c:	815e                	mv	sp,s7
 29e:	8801                	andi	s0,s0,0
 2a0:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 2a2:	03049203          	lh	tp,48(s1)
 2a6:	00f8                	addi	a4,sp,76
 2a8:	c10a                	sw	sp,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2aa:	c844                	sw	s1,20(s0)
 2ac:	c944                	sw	s1,20(a0)
    if(star_mult == 1){
 2ae:	d244                	sw	s1,36(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	0e46                	slli	t3,t3,0x11
 2b2:	4200                	lw	s0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	0000000b          	0xb


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  7c:	5250006f          	j	da0 <default_exc_handler>
  80:	5250006f          	j	da4 <reset_handler>
  84:	51d0006f          	j	da0 <default_exc_handler>
  88:	5190006f          	j	da0 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
      90:	8082                	ret

00000092 <array_equ>:

void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78d63          	beq	a5,a3,d4 <array_equ+0x42>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_equ+0x20>
      a4:	e7b1                	bnez	a5,f0 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c363          	blt	a5,a2,f2 <array_equ+0x60>
      b0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	04d7cc63          	blt	a5,a3,116 <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c587b3          	add	a5,a1,a2
      ca:	4398                	lw	a4,0(a5)
      cc:	00c507b3          	add	a5,a0,a2
      d0:	c398                	sw	a4,0(a5)
      d2:	a811                	j	e6 <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	fff60693          	addi	a3,a2,-1
      d8:	02e6c6b3          	div	a3,a3,a4
      dc:	4781                	li	a5,0
      de:	48b1                	li	a7,12
      e0:	02d7c263          	blt	a5,a3,104 <array_equ+0x72>
            a1[length-1] = a2[length-1];
      e4:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
      e6:	1671                	addi	a2,a2,-4
      e8:	95b2                	add	a1,a1,a2
      ea:	419c                	lw	a5,0(a1)
      ec:	962a                	add	a2,a2,a0
      ee:	c21c                	sw	a5,0(a2)
	break;
    } //end of switch case
} //end of function
      f0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	03078733          	mul	a4,a5,a6
    asm volatile(
      f6:	00e506b3          	add	a3,a0,a4
      fa:	972e                	add	a4,a4,a1
      fc:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     100:	0785                	addi	a5,a5,1
     102:	b76d                	j	ac <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03178733          	mul	a4,a5,a7
    asm volatile(
     108:	00e50833          	add	a6,a0,a4
     10c:	972e                	add	a4,a4,a1
     10e:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0785                	addi	a5,a5,1
     114:	b7f1                	j	e0 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	03178733          	mul	a4,a5,a7
    asm volatile(
     11a:	00e50833          	add	a6,a0,a4
     11e:	972e                	add	a4,a4,a1
     120:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0785                	addi	a5,a5,1
     126:	bf61                	j	be <array_equ+0x2c>

00000128 <instr_mod>:


void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
     128:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
     12c:	8082                	ret

0000012e <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    switch(length%3) {
     12e:	470d                	li	a4,3
     130:	02e667b3          	rem	a5,a2,a4
     134:	4685                	li	a3,1
     136:	02d78d63          	beq	a5,a3,170 <array_mod+0x42>
     13a:	4689                	li	a3,2
     13c:	00d78963          	beq	a5,a3,14e <array_mod+0x20>
     140:	e7b9                	bnez	a5,18e <array_mod+0x60>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     142:	02e64633          	div	a2,a2,a4
    asm volatile(
     146:	46b1                	li	a3,12
            for (i = 0; i < (length / 3); i++) {
     148:	04c7c463          	blt	a5,a2,190 <array_mod+0x62>
     14c:	8082                	ret
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
		break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     14e:	ffe60693          	addi	a3,a2,-2
     152:	02e6c6b3          	div	a3,a3,a4
     156:	4781                	li	a5,0
    asm volatile(
     158:	4831                	li	a6,12
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	04d7c963          	blt	a5,a3,1ac <array_mod+0x7e>
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
     15e:	060a                	slli	a2,a2,0x2
     160:	1671                	addi	a2,a2,-4
     162:	00c50733          	add	a4,a0,a2
     166:	431c                	lw	a5,0(a4)
     168:	02b7e7b3          	rem	a5,a5,a1
     16c:	c31c                	sw	a5,0(a4)
     16e:	a811                	j	182 <array_mod+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	fff60693          	addi	a3,a2,-1
     174:	02e6c6b3          	div	a3,a3,a4
     178:	4781                	li	a5,0
    asm volatile(
     17a:	4831                	li	a6,12
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	02d7c163          	blt	a5,a3,19e <array_mod+0x70>
            a1[length-1] = a1[length-1] % mod;
     180:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] % mod;
     182:	1671                	addi	a2,a2,-4
     184:	962a                	add	a2,a2,a0
     186:	421c                	lw	a5,0(a2)
     188:	02b7e5b3          	rem	a1,a5,a1
     18c:	c20c                	sw	a1,0(a2)
		break;
    } //end of switch case
} //end of function
     18e:	8082                	ret
    asm volatile(
     190:	02d78733          	mul	a4,a5,a3
     194:	972a                	add	a4,a4,a0
     196:	0cb7770b          	0xcb7770b
            for (i = 0; i < (length / 3); i++) {
     19a:	0785                	addi	a5,a5,1
     19c:	b775                	j	148 <array_mod+0x1a>
    asm volatile(
     19e:	03078733          	mul	a4,a5,a6
     1a2:	972a                	add	a4,a4,a0
     1a4:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	0785                	addi	a5,a5,1
     1aa:	bfc9                	j	17c <array_mod+0x4e>
    asm volatile(
     1ac:	03078733          	mul	a4,a5,a6
     1b0:	972a                	add	a4,a4,a0
     1b2:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0785                	addi	a5,a5,1
     1b8:	b74d                	j	15a <array_mod+0x2c>

000001ba <polymult>:
/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	715d                	addi	sp,sp,-80
     1bc:	c0ca                	sw	s2,64(sp)
     1be:	8936                	mv	s2,a3
     1c0:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
     1c2:	96ae                	add	a3,a3,a1
     1c4:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c8:	d462                	sw	s8,40(sp)
     1ca:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
     1cc:	00269c13          	slli	s8,a3,0x2
     1d0:	fff68c93          	addi	s9,a3,-1
     1d4:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	dc52                	sw	s4,56(sp)
     1da:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     1dc:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	c4a2                	sw	s0,72(sp)
     1e2:	c2a6                	sw	s1,68(sp)
     1e4:	da56                	sw	s5,52(sp)
     1e6:	d85a                	sw	s6,48(sp)
     1e8:	d65e                	sw	s7,44(sp)
     1ea:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
     1ec:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	ce6e                	sw	s11,28(sp)
     1f0:	c686                	sw	ra,76(sp)
     1f2:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     1f4:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     1f6:	073d                	addi	a4,a4,15
     1f8:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
     1fa:	40d10133          	sub	sp,sp,a3
     1fe:	8b8a                	mv	s7,sp
    int pola[size_a];
     200:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
     204:	00f98713          	addi	a4,s3,15
     208:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     20a:	8d8a                	mv	s11,sp
    int polb[size_b];
     20c:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	8aae                	mv	s5,a1
    int pola[size_a];
     212:	fff58693          	addi	a3,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	8832                	mv	a6,a2
    int line[size_b][size_a + size_b];
     218:	fff90b13          	addi	s6,s2,-1
    int polb[size_b];
     21c:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     21e:	002c5d13          	srli	s10,s8,0x2
     222:	875e                	mv	a4,s7
    for (i = 0; i < size_b; ++i){
     224:	88de                	mv	a7,s7
     226:	4581                	li	a1,0
            product[j] = 0;
     228:	00001e97          	auipc	t4,0x1
     22c:	000e8e93          	mv	t4,t4
    for (i = 0; i < size_b; ++i){
     230:	0725cc63          	blt	a1,s2,2a8 <polymult+0xee>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
     234:	85aa                	mv	a1,a0
     236:	8656                	mv	a2,s5
     238:	856e                	mv	a0,s11
     23a:	faf42823          	sw	a5,-80(s0)
     23e:	fae42c23          	sw	a4,-72(s0)
     242:	fad42e23          	sw	a3,-68(s0)
     246:	fb042a23          	sw	a6,-76(s0)
     24a:	35a1                	jal	92 <array_equ>
    array_mod(pola,mod,size_a);
     24c:	8656                	mv	a2,s5
     24e:	85d2                	mv	a1,s4
     250:	856e                	mv	a0,s11
     252:	3df1                	jal	12e <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
     254:	fb442803          	lw	a6,-76(s0)
     258:	8526                	mv	a0,s1
     25a:	864a                	mv	a2,s2
     25c:	85c2                	mv	a1,a6
     25e:	3d15                	jal	92 <array_equ>
    array_mod(polb,mod,size_b);
     260:	864a                	mv	a2,s2
     262:	8526                	mv	a0,s1
     264:	85d2                	mv	a1,s4
     266:	35e1                	jal	12e <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     268:	fb042783          	lw	a5,-80(s0)
     26c:	4605                	li	a2,1
     26e:	fbc42683          	lw	a3,-68(s0)
     272:	fb842703          	lw	a4,-72(s0)
     276:	94ce                	add	s1,s1,s3
     278:	02c78b63          	beq	a5,a2,2ae <polymult+0xf4>
     27c:	19f1                	addi	s3,s3,-4
     27e:	ffcc0593          	addi	a1,s8,-4
     282:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     284:	020b4863          	bltz	s6,2b4 <polymult+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	87b6                	mv	a5,a3
     28a:	a85d                	j	340 <polymult+0x186>
            product[j] = 0;
     28c:	00261e13          	slli	t3,a2,0x2
     290:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     292:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     296:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0605                	addi	a2,a2,1
     29c:	0311                	addi	t1,t1,4
     29e:	ff9647e3          	blt	a2,s9,28c <polymult+0xd2>
    for (i = 0; i < size_b; ++i){
     2a2:	0585                	addi	a1,a1,1
     2a4:	98e2                	add	a7,a7,s8
     2a6:	b769                	j	230 <polymult+0x76>
     2a8:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	4601                	li	a2,0
     2ac:	bfcd                	j	29e <polymult+0xe4>
    if(star_mult == 1){
     2ae:	85de                	mv	a1,s7
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	060b5a63          	bgez	s6,324 <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	4681                	li	a3,0
    for (i = 0; i < size_b; ++i){
     2b6:	0b26c763          	blt	a3,s2,364 <polymult+0x1aa>
     2ba:	00001697          	auipc	a3,0x1
     2be:	f6e68693          	addi	a3,a3,-146 # 1228 <_bss_start>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	4701                	li	a4,0
     2c4:	0d974263          	blt	a4,s9,388 <polymult+0x1ce>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
     2c8:	8666                	mv	a2,s9
     2ca:	85d2                	mv	a1,s4
     2cc:	00001517          	auipc	a0,0x1
     2d0:	f5c50513          	addi	a0,a0,-164 # 1228 <_bss_start>
     2d4:	3da9                	jal	12e <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     2d6:	fb040113          	addi	sp,s0,-80
     2da:	40b6                	lw	ra,76(sp)
     2dc:	4426                	lw	s0,72(sp)
     2de:	4496                	lw	s1,68(sp)
     2e0:	4906                	lw	s2,64(sp)
     2e2:	59f2                	lw	s3,60(sp)
     2e4:	5a62                	lw	s4,56(sp)
     2e6:	5ad2                	lw	s5,52(sp)
     2e8:	5b42                	lw	s6,48(sp)
     2ea:	5bb2                	lw	s7,44(sp)
     2ec:	5c22                	lw	s8,40(sp)
     2ee:	5c92                	lw	s9,36(sp)
     2f0:	5d02                	lw	s10,32(sp)
     2f2:	4df2                	lw	s11,28(sp)
     2f4:	00001517          	auipc	a0,0x1
     2f8:	f3450513          	addi	a0,a0,-204 # 1228 <_bss_start>
     2fc:	6161                	addi	sp,sp,80
     2fe:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	00279613          	slli	a2,a5,0x2
     304:	00c58533          	add	a0,a1,a2
     308:	966e                	add	a2,a2,s11
     30a:	4210                	lw	a2,0(a2)
     30c:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	03060633          	mul	a2,a2,a6
     316:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	fe07d4e3          	bgez	a5,300 <polymult+0x146>
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	1b7d                	addi	s6,s6,-1
     31e:	14f1                	addi	s1,s1,-4
     320:	95e2                	add	a1,a1,s8
     322:	b779                	j	2b0 <polymult+0xf6>
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	87b6                	mv	a5,a3
     326:	bfcd                	j	318 <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	00279613          	slli	a2,a5,0x2
     32c:	00c98533          	add	a0,s3,a2
     330:	966e                	add	a2,a2,s11
     332:	4210                	lw	a2,0(a2)
     334:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	03060633          	mul	a2,a2,a6
     33e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	fe07d4e3          	bgez	a5,328 <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
     344:	1b7d                	addi	s6,s6,-1
     346:	14f1                	addi	s1,s1,-4
     348:	99ae                	add	s3,s3,a1
     34a:	bf2d                	j	284 <polymult+0xca>
            line[i][j] = line[i][j] % mod;
     34c:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	0605                	addi	a2,a2,1
     350:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     352:	0345e5b3          	rem	a1,a1,s4
     356:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	ff9649e3          	blt	a2,s9,34c <polymult+0x192>
    for (i = 0; i < size_b; ++i){
     35e:	0685                	addi	a3,a3,1
     360:	9762                	add	a4,a4,s8
     362:	bf91                	j	2b6 <polymult+0xfc>
     364:	87ba                	mv	a5,a4
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	4601                	li	a2,0
     368:	bfcd                	j	35a <polymult+0x1a0>
            product[j] += line[i][j];
     36a:	03a607b3          	mul	a5,a2,s10
     36e:	428c                	lw	a1,0(a3)
        for(i = 0; i < size_b; ++i){
     370:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
     372:	97ba                	add	a5,a5,a4
     374:	078a                	slli	a5,a5,0x2
     376:	97de                	add	a5,a5,s7
     378:	439c                	lw	a5,0(a5)
     37a:	97ae                	add	a5,a5,a1
     37c:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
     37e:	ff2646e3          	blt	a2,s2,36a <polymult+0x1b0>
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0705                	addi	a4,a4,1
     384:	0691                	addi	a3,a3,4
     386:	bf3d                	j	2c4 <polymult+0x10a>
        for(i = 0; i < size_b; ++i){
     388:	4601                	li	a2,0
     38a:	bfd5                	j	37e <polymult+0x1c4>

0000038c <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     38e:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	da56                	sw	s5,52(sp)
     394:	00269a93          	slli	s5,a3,0x2
     398:	d85a                	sw	s6,48(sp)
     39a:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     39c:	00279b13          	slli	s6,a5,0x2
     3a0:	fff78b93          	addi	s7,a5,-1
     3a4:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	c4a2                	sw	s0,72(sp)
     3aa:	c2a6                	sw	s1,68(sp)
     3ac:	c0ca                	sw	s2,64(sp)
     3ae:	de4e                	sw	s3,60(sp)
     3b0:	dc52                	sw	s4,56(sp)
     3b2:	d462                	sw	s8,40(sp)
     3b4:	d266                	sw	s9,36(sp)
     3b6:	d06a                	sw	s10,32(sp)
     3b8:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     3ba:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3bc:	c686                	sw	ra,76(sp)
     3be:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     3c0:	9bc1                	andi	a5,a5,-16
     3c2:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     3c6:	00259793          	slli	a5,a1,0x2
     3ca:	07bd                	addi	a5,a5,15
     3cc:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     3ce:	890a                	mv	s2,sp
    int pola[size_a];
     3d0:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     3d4:	00fa8793          	addi	a5,s5,15
     3d8:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     3da:	8d0a                	mv	s10,sp
    int polb[size_b];
     3dc:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	89b6                	mv	s3,a3
     3e2:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     3e4:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	8832                	mv	a6,a2
    int pola[size_a];
     3ea:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     3ee:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     3f0:	8cca                	mv	s9,s2
     3f2:	86ca                	mv	a3,s2
     3f4:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     3f6:	00001317          	auipc	t1,0x1
     3fa:	08a30313          	addi	t1,t1,138 # 1480 <product2>
    for (i = 0; i < size_b; ++i){
     3fe:	05374963          	blt	a4,s3,450 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     402:	862e                	mv	a2,a1
     404:	85aa                	mv	a1,a0
     406:	856a                	mv	a0,s10
     408:	fb042e23          	sw	a6,-68(s0)
     40c:	3159                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     40e:	fbc42803          	lw	a6,-68(s0)
     412:	8526                	mv	a0,s1
     414:	864e                	mv	a2,s3
     416:	85c2                	mv	a1,a6
     418:	39ad                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     41a:	4785                	li	a5,1
     41c:	01548533          	add	a0,s1,s5
     420:	04fd8c63          	beq	s11,a5,478 <polymult2+0xec>
     424:	1af1                	addi	s5,s5,-4
     426:	ffcb0693          	addi	a3,s6,-4
     42a:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	040a4863          	bltz	s4,47c <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     430:	87e2                	mv	a5,s8
     432:	a8ad                	j	4ac <polymult2+0x120>
            product2[j] = 0;
     434:	00279893          	slli	a7,a5,0x2
     438:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     43a:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     43e:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	0785                	addi	a5,a5,1
     444:	0611                	addi	a2,a2,4
     446:	ff77c7e3          	blt	a5,s7,434 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     44a:	0705                	addi	a4,a4,1
     44c:	96da                	add	a3,a3,s6
     44e:	bf45                	j	3fe <polymult2+0x72>
     450:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	4781                	li	a5,0
     454:	bfcd                	j	446 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	00279713          	slli	a4,a5,0x2
     45a:	00e906b3          	add	a3,s2,a4
     45e:	976a                	add	a4,a4,s10
     460:	4318                	lw	a4,0(a4)
     462:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	02c70733          	mul	a4,a4,a2
     46c:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	fe07d4e3          	bgez	a5,456 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     472:	1a7d                	addi	s4,s4,-1
     474:	1571                	addi	a0,a0,-4
     476:	995a                	add	s2,s2,s6
     478:	000a5c63          	bgez	s4,490 <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
     47c:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
     47e:	05365a63          	bge	a2,s3,4d2 <polymult2+0x146>
     482:	00001797          	auipc	a5,0x1
     486:	ffe78793          	addi	a5,a5,-2 # 1480 <product2>
     48a:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
     48c:	4701                	li	a4,0
     48e:	a82d                	j	4c8 <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	87e2                	mv	a5,s8
     492:	bff1                	j	46e <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	00279713          	slli	a4,a5,0x2
     498:	00e90633          	add	a2,s2,a4
     49c:	976a                	add	a4,a4,s10
     49e:	4318                	lw	a4,0(a4)
     4a0:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	02b70733          	mul	a4,a4,a1
     4aa:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	fe07d4e3          	bgez	a5,494 <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	1a7d                	addi	s4,s4,-1
     4b2:	1571                	addi	a0,a0,-4
     4b4:	9936                	add	s2,s2,a3
     4b6:	bf9d                	j	42c <polymult2+0xa0>
            product2[j] += line[i][j];
     4b8:	438c                	lw	a1,0(a5)
     4ba:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	0705                	addi	a4,a4,1
     4be:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
     4c0:	95aa                	add	a1,a1,a0
     4c2:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	0691                	addi	a3,a3,4
     4c8:	ff7748e3          	blt	a4,s7,4b8 <polymult2+0x12c>
    for(i=0;i<size_b;++i){
     4cc:	0605                	addi	a2,a2,1
     4ce:	9cda                	add	s9,s9,s6
     4d0:	b77d                	j	47e <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     4d2:	fb040113          	addi	sp,s0,-80
     4d6:	40b6                	lw	ra,76(sp)
     4d8:	4426                	lw	s0,72(sp)
     4da:	4496                	lw	s1,68(sp)
     4dc:	4906                	lw	s2,64(sp)
     4de:	59f2                	lw	s3,60(sp)
     4e0:	5a62                	lw	s4,56(sp)
     4e2:	5ad2                	lw	s5,52(sp)
     4e4:	5b42                	lw	s6,48(sp)
     4e6:	5bb2                	lw	s7,44(sp)
     4e8:	5c22                	lw	s8,40(sp)
     4ea:	5c92                	lw	s9,36(sp)
     4ec:	5d02                	lw	s10,32(sp)
     4ee:	4df2                	lw	s11,28(sp)
     4f0:	00001517          	auipc	a0,0x1
     4f4:	f9050513          	addi	a0,a0,-112 # 1480 <product2>
     4f8:	6161                	addi	sp,sp,80
     4fa:	8082                	ret

000004fc <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     4fc:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	7139                	addi	sp,sp,-64
    int v[size_N];
     502:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	de06                	sw	ra,60(sp)
     506:	dc22                	sw	s0,56(sp)
     508:	da26                	sw	s1,52(sp)
     50a:	0080                	addi	s0,sp,64
     50c:	d84a                	sw	s2,48(sp)
     50e:	d64e                	sw	s3,44(sp)
     510:	d452                	sw	s4,40(sp)
     512:	d256                	sw	s5,36(sp)
     514:	d05a                	sw	s6,32(sp)
     516:	ce5e                	sw	s7,28(sp)
     518:	cc62                	sw	s8,24(sp)
     51a:	ca66                	sw	s9,20(sp)
     51c:	c86a                	sw	s10,16(sp)
    int v[size_N];
     51e:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	c66e                	sw	s11,12(sp)
    int v[size_N];
     522:	40f10133          	sub	sp,sp,a5
     526:	8b0a                	mv	s6,sp
    int q[size_N];
     528:	40f10133          	sub	sp,sp,a5
     52c:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
     52e:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     532:	00269793          	slli	a5,a3,0x2
     536:	07bd                	addi	a5,a5,15
     538:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     53a:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	84ae                	mv	s1,a1
    int denum_temp[size_D];
     53e:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     542:	8c32                	mv	s8,a2
    int v[size_N];
     544:	fff58d13          	addi	s10,a1,-1
    }
    else{
        array_equ(num_temp,num,size_N);
    }
*/
	array_equ(num_temp,num,size_N);
     548:	862e                	mv	a2,a1
     54a:	85aa                	mv	a1,a0
     54c:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	8a36                	mv	s4,a3
     550:	89ba                	mv	s3,a4
    int denum_temp[size_D];
     552:	fff68a93          	addi	s5,a3,-1
	array_equ(num_temp,num,size_N);
     556:	3e35                	jal	92 <array_equ>
    }
    else{
        array_mod(num_temp, mod, size_N);
    }
*/
	array_mod(num_temp, mod, size_N);
     558:	8626                	mv	a2,s1
     55a:	85ce                	mv	a1,s3
     55c:	854a                	mv	a0,s2
     55e:	3ec1                	jal	12e <array_mod>
    int denum_temp[size_D];
     560:	8c8a                	mv	s9,sp
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    
    array_equ(denum_temp,denum,size_D);
     562:	8652                	mv	a2,s4
     564:	85e2                	mv	a1,s8
     566:	8566                	mv	a0,s9
     568:	362d                	jal	92 <array_equ>
    
    array_mod(denum_temp,mod,size_D);
     56a:	8652                	mv	a2,s4
     56c:	85ce                	mv	a1,s3
     56e:	8566                	mv	a0,s9
     570:	3e7d                	jal	12e <array_mod>

    for (i = 0; i < size_N; ++i){
     572:	4781                	li	a5,0
     574:	0097cf63          	blt	a5,s1,592 <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     578:	002a9793          	slli	a5,s5,0x2
     57c:	97e6                	add	a5,a5,s9
     57e:	4398                	lw	a4,0(a5)
     580:	020ad463          	bgez	s5,5a8 <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
     584:	4781                	li	a5,0
     586:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     588:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     58a:	033c4263          	blt	s8,s3,5ae <polydiv+0xb2>
     58e:	87ea                	mv	a5,s10
     590:	a805                	j	5c0 <polydiv+0xc4>
        q[i] = 0;
     592:	00279713          	slli	a4,a5,0x2
     596:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
     59a:	975a                	add	a4,a4,s6
        q[i] = 0;
     59c:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     5a0:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     5a4:	0785                	addi	a5,a5,1
     5a6:	b7f9                	j	574 <polydiv+0x78>
        if( denum_temp[i] != 0 )
     5a8:	ff71                	bnez	a4,584 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	1afd                	addi	s5,s5,-1
     5ac:	b7f1                	j	578 <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
     5ae:	0337e633          	rem	a2,a5,s3
     5b2:	97ba                	add	a5,a5,a4
     5b4:	fcd60de3          	beq	a2,a3,58e <polydiv+0x92>
    for (u = 0; u < mod; ++u){
     5b8:	0c05                	addi	s8,s8,1
     5ba:	bfc1                	j	58a <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     5bc:	eb01                	bnez	a4,5cc <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	17fd                	addi	a5,a5,-1
     5c0:	00279713          	slli	a4,a5,0x2
     5c4:	974a                	add	a4,a4,s2
     5c6:	4318                	lw	a4,0(a4)
     5c8:	fe07dae3          	bgez	a5,5bc <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     5cc:	0557d663          	bge	a5,s5,618 <polydiv+0x11c>
    }
    else{
        array_equ(result,q,size_N);
    }
*/
	array_equ(result,q,size_N);
     5d0:	8626                	mv	a2,s1
     5d2:	85de                	mv	a1,s7
     5d4:	00001517          	auipc	a0,0x1
     5d8:	10450513          	addi	a0,a0,260 # 16d8 <result>
     5dc:	3c5d                	jal	92 <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
     5de:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     5e2:	00001697          	auipc	a3,0x1
     5e6:	0f668693          	addi	a3,a3,246 # 16d8 <result>
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	0ce4c863          	blt	s1,a4,6ba <polydiv+0x1be>
    }

    return_address3 = &result[0];

    return return_address3;
}
     5ee:	fc040113          	addi	sp,s0,-64
     5f2:	50f2                	lw	ra,60(sp)
     5f4:	5462                	lw	s0,56(sp)
     5f6:	54d2                	lw	s1,52(sp)
     5f8:	5942                	lw	s2,48(sp)
     5fa:	59b2                	lw	s3,44(sp)
     5fc:	5a22                	lw	s4,40(sp)
     5fe:	5a92                	lw	s5,36(sp)
     600:	5b02                	lw	s6,32(sp)
     602:	4bf2                	lw	s7,28(sp)
     604:	4c62                	lw	s8,24(sp)
     606:	4cd2                	lw	s9,20(sp)
     608:	4d42                	lw	s10,16(sp)
     60a:	4db2                	lw	s11,12(sp)
     60c:	00001517          	auipc	a0,0x1
     610:	0cc50513          	addi	a0,a0,204 # 16d8 <result>
     614:	6121                	addi	sp,sp,64
     616:	8082                	ret
        v[(d-d2)] = u*r_d;
     618:	03870733          	mul	a4,a4,s8
     61c:	415787b3          	sub	a5,a5,s5
     620:	078a                	slli	a5,a5,0x2
     622:	97da                	add	a5,a5,s6
	 array_mod(v, mod, size_N);
     624:	8626                	mv	a2,s1
     626:	85ce                	mv	a1,s3
     628:	855a                	mv	a0,s6
        v[(d-d2)] = u*r_d;
     62a:	c398                	sw	a4,0(a5)
	 array_mod(v, mod, size_N);
     62c:	3609                	jal	12e <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	4781                	li	a5,0
     630:	874e                	mv	a4,s3
     632:	86d2                	mv	a3,s4
     634:	865a                	mv	a2,s6
     636:	85d2                	mv	a1,s4
     638:	8566                	mv	a0,s9
     63a:	3641                	jal	1ba <polymult>
	array_mod(product, mod, size_N);
     63c:	8626                	mv	a2,s1
     63e:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	8daa                	mv	s11,a0
	array_mod(product, mod, size_N);
     642:	34f5                	jal	12e <array_mod>
        for (i = 0; i < size_N; ++i){
     644:	874a                	mv	a4,s2
     646:	4781                	li	a5,0
     648:	0297c763          	blt	a5,s1,676 <polydiv+0x17a>
	array_mod(num_temp, mod, size_N);
     64c:	8626                	mv	a2,s1
     64e:	85ce                	mv	a1,s3
     650:	854a                	mv	a0,s2
     652:	3cf1                	jal	12e <array_mod>
        for(i = 0; i < size_N; ++i){
     654:	875e                	mv	a4,s7
     656:	4781                	li	a5,0
     658:	0297ca63          	blt	a5,s1,68c <polydiv+0x190>
	array_mod(q, mod, size_N);
     65c:	8626                	mv	a2,s1
     65e:	85ce                	mv	a1,s3
     660:	855e                	mv	a0,s7
     662:	34f1                	jal	12e <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
     664:	87ea                	mv	a5,s10
     666:	00279713          	slli	a4,a5,0x2
     66a:	974a                	add	a4,a4,s2
     66c:	4318                	lw	a4,0(a4)
     66e:	0207da63          	bgez	a5,6a2 <polydiv+0x1a6>
     672:	4681                	li	a3,0
     674:	a081                	j	6b4 <polydiv+0x1b8>
            num_temp[i] = num_temp[i] - product[i];
     676:	00279613          	slli	a2,a5,0x2
     67a:	966e                	add	a2,a2,s11
     67c:	4314                	lw	a3,0(a4)
     67e:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     680:	0785                	addi	a5,a5,1
     682:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     684:	8e91                	sub	a3,a3,a2
     686:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     68a:	bf7d                	j	648 <polydiv+0x14c>
            q[i] = q[i] + v[i];
     68c:	00279613          	slli	a2,a5,0x2
     690:	965a                	add	a2,a2,s6
     692:	4314                	lw	a3,0(a4)
     694:	4210                	lw	a2,0(a2)
        for(i = 0; i < size_N; ++i){
     696:	0785                	addi	a5,a5,1
     698:	0711                	addi	a4,a4,4
            q[i] = q[i] + v[i];
     69a:	96b2                	add	a3,a3,a2
     69c:	fed72e23          	sw	a3,-4(a4)
        for(i = 0; i < size_N; ++i){
     6a0:	bf65                	j	658 <polydiv+0x15c>
            if( num_temp[i] != 0 )
     6a2:	fb61                	bnez	a4,672 <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	17fd                	addi	a5,a5,-1
     6a6:	b7c1                	j	666 <polydiv+0x16a>
            v[i] = 0;
     6a8:	00269613          	slli	a2,a3,0x2
     6ac:	965a                	add	a2,a2,s6
     6ae:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6b2:	0685                	addi	a3,a3,1
     6b4:	fe96cae3          	blt	a3,s1,6a8 <polydiv+0x1ac>
     6b8:	bf11                	j	5cc <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
     6ba:	00092603          	lw	a2,0(s2)
     6be:	00249793          	slli	a5,s1,0x2
     6c2:	97b6                	add	a5,a5,a3
     6c4:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0485                	addi	s1,s1,1
     6c8:	0911                	addi	s2,s2,4
     6ca:	b705                	j	5ea <polydiv+0xee>

000006cc <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6cc:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6d2:	07bd                	addi	a5,a5,15
     6d4:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	c4a2                	sw	s0,72(sp)
     6d8:	c2a6                	sw	s1,68(sp)
     6da:	c0ca                	sw	s2,64(sp)
     6dc:	de4e                	sw	s3,60(sp)
     6de:	dc52                	sw	s4,56(sp)
     6e0:	da56                	sw	s5,52(sp)
     6e2:	d85a                	sw	s6,48(sp)
     6e4:	d65e                	sw	s7,44(sp)
     6e6:	d462                	sw	s8,40(sp)
     6e8:	d266                	sw	s9,36(sp)
     6ea:	d06a                	sw	s10,32(sp)
     6ec:	ce6e                	sw	s11,28(sp)
     6ee:	c686                	sw	ra,76(sp)
     6f0:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6f2:	40f10133          	sub	sp,sp,a5
     6f6:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	40f10133          	sub	sp,sp,a5
     6fc:	8a0a                	mv	s4,sp
    int ri[size];
     6fe:	40f10133          	sub	sp,sp,a5
     702:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     704:	40f10133          	sub	sp,sp,a5
     708:	8b0a                	mv	s6,sp
    int ti[size];
     70a:	40f10133          	sub	sp,sp,a5
     70e:	8d0a                	mv	s10,sp
    int qi_1[size];
     710:	40f10133          	sub	sp,sp,a5
     714:	8c8a                	mv	s9,sp
    int temp[size];
     716:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	8936                	mv	s2,a3
     71c:	8dae                	mv	s11,a1
     71e:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     720:	fff60b93          	addi	s7,a2,-1
    int temp[size];
     724:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     726:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     728:	00001697          	auipc	a3,0x1
     72c:	20868693          	addi	a3,a3,520 # 1930 <ti_2>
    for (i = 0; i < size; ++i) {
     730:	1097cb63          	blt	a5,s1,846 <ext_euclid+0x17a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     734:	85aa                	mv	a1,a0
     736:	8626                	mv	a2,s1
     738:	854e                	mv	a0,s3
     73a:	3aa1                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
     73c:	85ee                	mv	a1,s11
     73e:	8626                	mv	a2,s1
     740:	8552                	mv	a0,s4
     742:	3a81                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     744:	4785                	li	a5,1
     746:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	00149793          	slli	a5,s1,0x1
     74e:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     752:	00001d97          	auipc	s11,0x1
     756:	1ded8d93          	addi	s11,s11,478 # 1930 <ti_2>
    array_mod(ri_2,mod,size);
     75a:	8626                	mv	a2,s1
     75c:	85ca                	mv	a1,s2
     75e:	854e                	mv	a0,s3
     760:	32f9                	jal	12e <array_mod>
    array_mod(ri_1,mod,size);
     762:	8626                	mv	a2,s1
     764:	85ca                	mv	a1,s2
     766:	8552                	mv	a0,s4
     768:	32d9                	jal	12e <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	874a                	mv	a4,s2
     76c:	86a6                	mv	a3,s1
     76e:	8652                	mv	a2,s4
     770:	85a6                	mv	a1,s1
     772:	854e                	mv	a0,s3
     774:	3361                	jal	4fc <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	8762                	mv	a4,s8
     778:	87a6                	mv	a5,s1
     77a:	fbc42683          	lw	a3,-68(s0)
     77e:	0cd7cf63          	blt	a5,a3,85c <ext_euclid+0x190>
     782:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     784:	4701                	li	a4,0
     786:	0eebd463          	bge	s7,a4,86e <ext_euclid+0x1a2>
    array_mod(temp,mod,size);
     78a:	8626                	mv	a2,s1
     78c:	85ca                	mv	a1,s2
     78e:	8556                	mv	a0,s5
     790:	3a79                	jal	12e <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	874a                	mv	a4,s2
     794:	86a6                	mv	a3,s1
     796:	8652                	mv	a2,s4
     798:	85a6                	mv	a1,s1
     79a:	8556                	mv	a0,s5
     79c:	3385                	jal	4fc <polydiv>
     79e:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
     7a0:	8626                	mv	a2,s1
     7a2:	8566                	mv	a0,s9
     7a4:	30fd                	jal	92 <array_equ>
    array_mod(qi_1,mod,size);
     7a6:	8626                	mv	a2,s1
     7a8:	85ca                	mv	a1,s2
     7aa:	8566                	mv	a0,s9
     7ac:	3249                	jal	12e <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	4781                	li	a5,0
     7b0:	874a                	mv	a4,s2
     7b2:	86a6                	mv	a3,s1
     7b4:	865a                	mv	a2,s6
     7b6:	85a6                	mv	a1,s1
     7b8:	8566                	mv	a0,s9
     7ba:	3401                	jal	1ba <polymult>
     7bc:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
     7be:	8626                	mv	a2,s1
     7c0:	8556                	mv	a0,s5
     7c2:	38c1                	jal	92 <array_equ>
    array_mod(temp,mod,size);
     7c4:	8626                	mv	a2,s1
     7c6:	85ca                	mv	a1,s2
     7c8:	8556                	mv	a0,s5
     7ca:	3295                	jal	12e <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7cc:	4781                	li	a5,0
     7ce:	4701                	li	a4,0
     7d0:	0aebdc63          	bge	s7,a4,888 <ext_euclid+0x1bc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
     7d4:	8626                	mv	a2,s1
     7d6:	85ca                	mv	a1,s2
     7d8:	856a                	mv	a0,s10
     7da:	3a91                	jal	12e <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     7dc:	8626                	mv	a2,s1
     7de:	85d2                	mv	a1,s4
     7e0:	854e                	mv	a0,s3
     7e2:	3845                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
     7e4:	8626                	mv	a2,s1
     7e6:	85e2                	mv	a1,s8
     7e8:	8552                	mv	a0,s4
     7ea:	3065                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
     7ec:	8626                	mv	a2,s1
     7ee:	85da                	mv	a1,s6
     7f0:	856e                	mv	a0,s11
     7f2:	3045                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
     7f4:	8626                	mv	a2,s1
     7f6:	85ea                	mv	a1,s10
     7f8:	855a                	mv	a0,s6
     7fa:	3861                	jal	92 <array_equ>
        controlR = 0;
     7fc:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     7fe:	4701                	li	a4,0
     800:	0aebd163          	bge	s7,a4,8a2 <ext_euclid+0x1d6>
    while (controlR != 0) {
     804:	f4079be3          	bnez	a5,75a <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     808:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     80a:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     80c:	0b274663          	blt	a4,s2,8b8 <ext_euclid+0x1ec>
     810:	00001617          	auipc	a2,0x1
     814:	12060613          	addi	a2,a2,288 # 1930 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     818:	0afbda63          	bge	s7,a5,8cc <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     81c:	fb040113          	addi	sp,s0,-80
     820:	40b6                	lw	ra,76(sp)
     822:	4426                	lw	s0,72(sp)
     824:	4496                	lw	s1,68(sp)
     826:	4906                	lw	s2,64(sp)
     828:	59f2                	lw	s3,60(sp)
     82a:	5a62                	lw	s4,56(sp)
     82c:	5ad2                	lw	s5,52(sp)
     82e:	5b42                	lw	s6,48(sp)
     830:	5bb2                	lw	s7,44(sp)
     832:	5c22                	lw	s8,40(sp)
     834:	5c92                	lw	s9,36(sp)
     836:	5d02                	lw	s10,32(sp)
     838:	4df2                	lw	s11,28(sp)
     83a:	00001517          	auipc	a0,0x1
     83e:	0f650513          	addi	a0,a0,246 # 1930 <ti_2>
     842:	6161                	addi	sp,sp,80
     844:	8082                	ret
        ti_2[i] = 0;
     846:	00279713          	slli	a4,a5,0x2
     84a:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     84e:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     850:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     854:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     858:	0785                	addi	a5,a5,1
     85a:	bdd9                	j	730 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     85c:	00279693          	slli	a3,a5,0x2
     860:	96aa                	add	a3,a3,a0
     862:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0785                	addi	a5,a5,1
     866:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     868:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	b739                	j	77a <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
     86e:	00f986b3          	add	a3,s3,a5
     872:	00fc05b3          	add	a1,s8,a5
     876:	4294                	lw	a3,0(a3)
     878:	418c                	lw	a1,0(a1)
     87a:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     87e:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     880:	8e8d                	sub	a3,a3,a1
     882:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     884:	0791                	addi	a5,a5,4
     886:	b701                	j	786 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
     888:	00fd86b3          	add	a3,s11,a5
     88c:	00fa85b3          	add	a1,s5,a5
     890:	4294                	lw	a3,0(a3)
     892:	418c                	lw	a1,0(a1)
     894:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     898:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     89a:	8e8d                	sub	a3,a3,a1
     89c:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     89e:	0791                	addi	a5,a5,4
     8a0:	bf05                	j	7d0 <ext_euclid+0x104>
              qi_1[i] = 0;
     8a2:	00271693          	slli	a3,a4,0x2
     8a6:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
     8aa:	96e2                	add	a3,a3,s8
     8ac:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8ae:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8b2:	0705                	addi	a4,a4,1
            controlR += ri[i];
     8b4:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     8b6:	b7a9                	j	800 <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	0009a683          	lw	a3,0(s3)
     8bc:	02d706b3          	mul	a3,a4,a3
     8c0:	0326e6b3          	rem	a3,a3,s2
     8c4:	f4c686e3          	beq	a3,a2,810 <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
     8c8:	0705                	addi	a4,a4,1
     8ca:	b789                	j	80c <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ce:	0785                	addi	a5,a5,1
     8d0:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	02d706b3          	mul	a3,a4,a3
     8d6:	0326e6b3          	rem	a3,a3,s2
     8da:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     8de:	bf2d                	j	818 <ext_euclid+0x14c>

000008e0 <generate_keys>:




int* generate_keys(int N, int p, int q){
     8e0:	7101                	addi	sp,sp,-512
     8e2:	1e112e23          	sw	ra,508(sp)
     8e6:	1e812c23          	sw	s0,504(sp)
     8ea:	1e912a23          	sw	s1,500(sp)
     8ee:	0400                	addi	s0,sp,512
     8f0:	1f212823          	sw	s2,496(sp)
     8f4:	1f312623          	sw	s3,492(sp)
     8f8:	1f412423          	sw	s4,488(sp)
     8fc:	1f512223          	sw	s5,484(sp)
     900:	1f612023          	sw	s6,480(sp)
     904:	1d712e23          	sw	s7,476(sp)
     908:	1d812c23          	sw	s8,472(sp)
     90c:	1db12623          	sw	s11,460(sp)
     910:	1d912a23          	sw	s9,468(sp)
     914:	1da12823          	sw	s10,464(sp)
	resultkon[0] = 0xaaaaaaa0;
     918:	aaaab7b7          	lui	a5,0xaaaab
     91c:	aa078793          	addi	a5,a5,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
int* generate_keys(int N, int p, int q){
     920:	892a                	mv	s2,a0
     922:	8c2e                	mv	s8,a1
     924:	8bb2                	mv	s7,a2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     926:	4581                	li	a1,0
     928:	0d000613          	li	a2,208
	resultkon[0] = 0xaaaaaaa0;
     92c:	00001a97          	auipc	s5,0x1
     930:	8f8a8a93          	addi	s5,s5,-1800 # 1224 <_edata>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	e1440513          	addi	a0,s0,-492
	resultkon[0] = 0xaaaaaaa0;
     938:	00faa023          	sw	a5,0(s5)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93c:	2b65                	jal	ef4 <memset>
     93e:	4485                	li	s1,1
     940:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     942:	0d800613          	li	a2,216
     946:	4581                	li	a1,0
     948:	ee840513          	addi	a0,s0,-280
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     94c:	e1342423          	sw	s3,-504(s0)
     950:	e0942623          	sw	s1,-500(s0)
     954:	e0942823          	sw	s1,-496(s0)
     958:	e1342c23          	sw	s3,-488(s0)
     95c:	e2942023          	sw	s1,-480(s0)
     960:	e2942623          	sw	s1,-468(s0)
     964:	e3342823          	sw	s3,-464(s0)
     968:	e3342a23          	sw	s3,-460(s0)
     96c:	e2942e23          	sw	s1,-452(s0)
     970:	e5342223          	sw	s3,-444(s0)
     974:	e4942623          	sw	s1,-436(s0)
     978:	e4942823          	sw	s1,-432(s0)
     97c:	e5342e23          	sw	s3,-420(s0)
     980:	e6942223          	sw	s1,-412(s0)
     984:	e6942823          	sw	s1,-400(s0)
     988:	e6942a23          	sw	s1,-396(s0)
     98c:	e6942c23          	sw	s1,-392(s0)
     990:	e7342e23          	sw	s3,-388(s0)
     994:	e8942223          	sw	s1,-380(s0)
     998:	e8942823          	sw	s1,-368(s0)
     99c:	e8942a23          	sw	s1,-364(s0)
     9a0:	e8942c23          	sw	s1,-360(s0)
     9a4:	e9342e23          	sw	s3,-356(s0)
     9a8:	ea942223          	sw	s1,-348(s0)
     9ac:	ea942823          	sw	s1,-336(s0)
     9b0:	ea942a23          	sw	s1,-332(s0)
     9b4:	ea942c23          	sw	s1,-328(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9b8:	00190b13          	addi	s6,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9bc:	2b25                	jal	ef4 <memset>
    int polyR[N+1];
     9be:	002b1793          	slli	a5,s6,0x2
     9c2:	07bd                	addi	a5,a5,15
     9c4:	9bc1                	andi	a5,a5,-16
     9c6:	40f10133          	sub	sp,sp,a5
     9ca:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9cc:	00291d93          	slli	s11,s2,0x2
     9d0:	01ba07b3          	add	a5,s4,s11
     9d4:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9d6:	ef342223          	sw	s3,-284(s0)
     9da:	ee942623          	sw	s1,-276(s0)
     9de:	ee942823          	sw	s1,-272(s0)
     9e2:	ee942c23          	sw	s1,-264(s0)
     9e6:	f1342223          	sw	s3,-252(s0)
     9ea:	f1342623          	sw	s3,-244(s0)
     9ee:	f1342823          	sw	s3,-240(s0)
     9f2:	f0942c23          	sw	s1,-232(s0)
     9f6:	f3342023          	sw	s3,-224(s0)
     9fa:	f2942423          	sw	s1,-216(s0)
     9fe:	f2942a23          	sw	s1,-204(s0)
     a02:	f3342c23          	sw	s3,-200(s0)
     a06:	f4942023          	sw	s1,-192(s0)
     a0a:	f4942623          	sw	s1,-180(s0)
     a0e:	f5342823          	sw	s3,-176(s0)
     a12:	f4942c23          	sw	s1,-168(s0)
     a16:	f6942223          	sw	s1,-156(s0)
     a1a:	f7342423          	sw	s3,-152(s0)
     a1e:	f6942823          	sw	s1,-144(s0)
     a22:	f6942c23          	sw	s1,-136(s0)
     a26:	f6942e23          	sw	s1,-132(s0)
     a2a:	f8942423          	sw	s1,-120(s0)
     a2e:	f9342623          	sw	s3,-116(s0)
     a32:	f8942a23          	sw	s1,-108(s0)
     a36:	f8942e23          	sw	s1,-100(s0)
    polyR[0] = -1;
     a3a:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a3e:	4785                	li	a5,1
     a40:	1127ca63          	blt	a5,s2,b54 <generate_keys+0x274>
     a44:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a46:	03600693          	li	a3,54
     a4a:	10f6dc63          	bge	a3,a5,b62 <generate_keys+0x282>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a4e:	4781                	li	a5,0
        random_keys[i] = f[i];
     a50:	00001697          	auipc	a3,0x1
     a54:	07068693          	addi	a3,a3,112 # 1ac0 <random_keys>
    for(i = 0; i < N; ++i){
     a58:	1327c363          	blt	a5,s2,b7e <generate_keys+0x29e>
     a5c:	ee440713          	addi	a4,s0,-284
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a60:	00191993          	slli	s3,s2,0x1
     a64:	87ca                	mv	a5,s2
     a66:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a68:	00001617          	auipc	a2,0x1
     a6c:	05860613          	addi	a2,a2,88 # 1ac0 <random_keys>
    for(i = N; i < (2*N); ++i){
     a70:	1337c263          	blt	a5,s3,b94 <generate_keys+0x2b4>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a74:	448d                	li	s1,3
     a76:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a7a:	86e2                	mv	a3,s8
     a7c:	865a                	mv	a2,s6
     a7e:	e0840593          	addi	a1,s0,-504
     a82:	8552                	mv	a0,s4
     a84:	31a1                	jal	6cc <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a86:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a88:	00001697          	auipc	a3,0x1
     a8c:	03868693          	addi	a3,a3,56 # 1ac0 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a90:	1097ca63          	blt	a5,s1,ba4 <generate_keys+0x2c4>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     a94:	865a                	mv	a2,s6
     a96:	86de                	mv	a3,s7
     a98:	e0840593          	addi	a1,s0,-504
     a9c:	8552                	mv	a0,s4
     a9e:	313d                	jal	6cc <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     aa0:	5751                	li	a4,-12
     aa2:	02e90733          	mul	a4,s2,a4
     aa6:	8d6e                	mv	s10,s11
        random_keys[i] = fq[i-(3*N)];
     aa8:	00001617          	auipc	a2,0x1
     aac:	01860613          	addi	a2,a2,24 # 1ac0 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ab0:	11b4c263          	blt	s1,s11,bb4 <generate_keys+0x2d4>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ab4:	4701                	li	a4,0
     ab6:	85ca                	mv	a1,s2
     ab8:	86ca                	mv	a3,s2
     aba:	8666                	mv	a2,s9
     abc:	38c1                	jal	38c <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     abe:	87aa                	mv	a5,a0
     ac0:	4701                	li	a4,0
     ac2:	fff98593          	addi	a1,s3,-1
     ac6:	10b74163          	blt	a4,a1,bc8 <generate_keys+0x2e8>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aca:	86da                	mv	a3,s6
     acc:	875e                	mv	a4,s7
     ace:	8652                	mv	a2,s4
     ad0:	3435                	jal	4fc <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     ad2:	4795                	li	a5,5
     ad4:	02f907b3          	mul	a5,s2,a5
     ad8:	098a                	slli	s3,s3,0x2
     ada:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     adc:	00001697          	auipc	a3,0x1
     ae0:	fe468693          	addi	a3,a3,-28 # 1ac0 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     ae4:	0991                	addi	s3,s3,4
     ae6:	0efd4963          	blt	s10,a5,bd8 <generate_keys+0x2f8>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     aea:	4699                	li	a3,6
     aec:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     aee:	00001617          	auipc	a2,0x1
     af2:	fd260613          	addi	a2,a2,-46 # 1ac0 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     af6:	02d906b3          	mul	a3,s2,a3
     afa:	02a90933          	mul	s2,s2,a0
     afe:	0ef6d563          	bge	a3,a5,be8 <generate_keys+0x308>
    }
    //////// RANDOM KEYS TAŞTI? ARRAY 300LÜK YERE SAHİP AMA 318'E KADAR DOLDURULUYOR? ///////


    return_address5 = &random_keys[0];
	resultkon[0] = 0xaaaaaaa1;
     b02:	aaaab7b7          	lui	a5,0xaaaab
     b06:	aa178793          	addi	a5,a5,-1375 # aaaaaaa1 <_stack_start+0xaaa9aaa1>
     b0a:	00faa023          	sw	a5,0(s5)
    return return_address5;
}
     b0e:	e0040113          	addi	sp,s0,-512
     b12:	1fc12083          	lw	ra,508(sp)
     b16:	1f812403          	lw	s0,504(sp)
     b1a:	1f412483          	lw	s1,500(sp)
     b1e:	1f012903          	lw	s2,496(sp)
     b22:	1ec12983          	lw	s3,492(sp)
     b26:	1e812a03          	lw	s4,488(sp)
     b2a:	1e412a83          	lw	s5,484(sp)
     b2e:	1e012b03          	lw	s6,480(sp)
     b32:	1dc12b83          	lw	s7,476(sp)
     b36:	1d812c03          	lw	s8,472(sp)
     b3a:	1d412c83          	lw	s9,468(sp)
     b3e:	1d012d03          	lw	s10,464(sp)
     b42:	1cc12d83          	lw	s11,460(sp)
     b46:	00001517          	auipc	a0,0x1
     b4a:	f7a50513          	addi	a0,a0,-134 # 1ac0 <random_keys>
     b4e:	20010113          	addi	sp,sp,512
     b52:	8082                	ret
        polyR[i] = 0;
     b54:	00279713          	slli	a4,a5,0x2
     b58:	9752                	add	a4,a4,s4
     b5a:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b5e:	0785                	addi	a5,a5,1
     b60:	b5c5                	j	a40 <generate_keys+0x160>
        f[i] = 0;
     b62:	00279713          	slli	a4,a5,0x2
     b66:	e0840613          	addi	a2,s0,-504
     b6a:	963a                	add	a2,a2,a4
     b6c:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b70:	ee440613          	addi	a2,s0,-284
     b74:	9732                	add	a4,a4,a2
     b76:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b7a:	0785                	addi	a5,a5,1
     b7c:	b5f9                	j	a4a <generate_keys+0x16a>
        random_keys[i] = f[i];
     b7e:	00279713          	slli	a4,a5,0x2
     b82:	e0840593          	addi	a1,s0,-504
     b86:	00e68633          	add	a2,a3,a4
     b8a:	972e                	add	a4,a4,a1
     b8c:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b8e:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b90:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b92:	b5d9                	j	a58 <generate_keys+0x178>
        random_keys[i] = g[i-N];
     b94:	430c                	lw	a1,0(a4)
     b96:	00279693          	slli	a3,a5,0x2
     b9a:	96b2                	add	a3,a3,a2
     b9c:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b9e:	0785                	addi	a5,a5,1
     ba0:	0711                	addi	a4,a4,4
     ba2:	b5f9                	j	a70 <generate_keys+0x190>
        random_keys[i] = fp[i-(2*N)];
     ba4:	4110                	lw	a2,0(a0)
     ba6:	00279713          	slli	a4,a5,0x2
     baa:	9736                	add	a4,a4,a3
     bac:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bae:	0785                	addi	a5,a5,1
     bb0:	0511                	addi	a0,a0,4
     bb2:	bdf9                	j	a90 <generate_keys+0x1b0>
        random_keys[i] = fq[i-(3*N)];
     bb4:	00249793          	slli	a5,s1,0x2
     bb8:	00f706b3          	add	a3,a4,a5
     bbc:	96aa                	add	a3,a3,a0
     bbe:	4294                	lw	a3,0(a3)
     bc0:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bc2:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bc4:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bc6:	b5ed                	j	ab0 <generate_keys+0x1d0>
        fg[i] = fg[i]*p;
     bc8:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bca:	0705                	addi	a4,a4,1
     bcc:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bce:	038686b3          	mul	a3,a3,s8
     bd2:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bd6:	bdc5                	j	ac6 <generate_keys+0x1e6>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd8:	ff89a603          	lw	a2,-8(s3)
     bdc:	002d1713          	slli	a4,s10,0x2
     be0:	9736                	add	a4,a4,a3
     be2:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     be4:	0d05                	addi	s10,s10,1
     be6:	bdfd                	j	ae4 <generate_keys+0x204>
        random_keys[i] = polyR[i-(5*N)];
     be8:	00279713          	slli	a4,a5,0x2
     bec:	00e605b3          	add	a1,a2,a4
     bf0:	974a                	add	a4,a4,s2
     bf2:	9752                	add	a4,a4,s4
     bf4:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     bf8:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     bfa:	b711                	j	afe <generate_keys+0x21e>

00000bfc <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	7115                	addi	sp,sp,-224
	resultkon[0] = 0xbbbbbbb0;
     bfe:	bbbbc7b7          	lui	a5,0xbbbbc
     c02:	bb078793          	addi	a5,a5,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c06:	cda2                	sw	s0,216(sp)
     c08:	cba6                	sw	s1,212(sp)
     c0a:	c9ca                	sw	s2,208(sp)
     c0c:	c3d6                	sw	s5,196(sp)
     c0e:	842a                	mv	s0,a0
     c10:	892e                	mv	s2,a1
     c12:	84b2                	mv	s1,a2
    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	00000597          	auipc	a1,0x0
     c18:	49058593          	addi	a1,a1,1168 # 10a4 <__DTOR_END__>
     c1c:	0c000613          	li	a2,192
	resultkon[0] = 0xbbbbbbb0;
     c20:	00000a97          	auipc	s5,0x0
     c24:	604a8a93          	addi	s5,s5,1540 # 1224 <_edata>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c28:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	cf86                	sw	ra,220(sp)
     c2c:	c7ce                	sw	s3,204(sp)
     c2e:	c5d2                	sw	s4,200(sp)
     c30:	89ba                	mv	s3,a4
     c32:	8a36                	mv	s4,a3
	resultkon[0] = 0xbbbbbbb0;
     c34:	00faa023          	sw	a5,0(s5)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c38:	2af9                	jal	e16 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c3a:	4781                	li	a5,0
     c3c:	860a                	mv	a2,sp
     c3e:	874a                	mv	a4,s2
     c40:	03000693          	li	a3,48
     c44:	85a2                	mv	a1,s0
     c46:	8552                	mv	a0,s4
     c48:	d72ff0ef          	jal	ra,1ba <polymult>
     c4c:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     c4e:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c52:	00f506b3          	add	a3,a0,a5
     c56:	00f485b3          	add	a1,s1,a5
     c5a:	4298                	lw	a4,0(a3)
     c5c:	418c                	lw	a1,0(a1)
     c5e:	0791                	addi	a5,a5,4
     c60:	972e                	add	a4,a4,a1
     c62:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c64:	fec797e3          	bne	a5,a2,c52 <ntru_encyrpt+0x56>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	00141493          	slli	s1,s0,0x1
     c6c:	00140693          	addi	a3,s0,1
     c70:	874a                	mv	a4,s2
     c72:	864e                	mv	a2,s3
     c74:	85a6                	mv	a1,s1
     c76:	3059                	jal	4fc <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c78:	478d                	li	a5,3
     c7a:	02f40433          	mul	s0,s0,a5
     c7e:	87aa                	mv	a5,a0
     c80:	0284c163          	blt	s1,s0,ca2 <ntru_encyrpt+0xa6>


    return_address6 = &CT[0];
	resultkon[0] = 0xbbbbbbb1;
    return return_address6;
}
     c84:	40fe                	lw	ra,220(sp)
     c86:	446e                	lw	s0,216(sp)
	resultkon[0] = 0xbbbbbbb1;
     c88:	bbbbc7b7          	lui	a5,0xbbbbc
     c8c:	bb178793          	addi	a5,a5,-1103 # bbbbbbb1 <_stack_start+0xbbbabbb1>
     c90:	00faa023          	sw	a5,0(s5)
}
     c94:	44de                	lw	s1,212(sp)
     c96:	494e                	lw	s2,208(sp)
     c98:	49be                	lw	s3,204(sp)
     c9a:	4a2e                	lw	s4,200(sp)
     c9c:	4a9e                	lw	s5,196(sp)
     c9e:	612d                	addi	sp,sp,224
     ca0:	8082                	ret
        CT[i-(2*N)] = CT[i];
     ca2:	00249713          	slli	a4,s1,0x2
     ca6:	972a                	add	a4,a4,a0
     ca8:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     caa:	0485                	addi	s1,s1,1
     cac:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     cae:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     cb2:	b7f9                	j	c80 <ntru_encyrpt+0x84>

00000cb4 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	7179                	addi	sp,sp,-48
     cb6:	d422                	sw	s0,40(sp)
     cb8:	cc52                	sw	s4,24(sp)
     cba:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cbc:	4a0d                	li	s4,3
     cbe:	03440a33          	mul	s4,s0,s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	c462                	sw	s8,8(sp)
     cc4:	8c3a                	mv	s8,a4
	resultkon[0] = 0xccccccc0;
     cc6:	ccccd737          	lui	a4,0xccccd
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	ce4e                	sw	s3,28(sp)
	resultkon[0] = 0xccccccc0;
     ccc:	cc070713          	addi	a4,a4,-832 # ccccccc0 <_stack_start+0xcccbccc0>
     cd0:	00000997          	auipc	s3,0x0
     cd4:	55498993          	addi	s3,s3,1364 # 1224 <_edata>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd8:	d04a                	sw	s2,32(sp)
     cda:	c85a                	sw	s6,16(sp)
     cdc:	8932                	mv	s2,a2
     cde:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce0:	863e                	mv	a2,a5
	resultkon[0] = 0xccccccc0;
     ce2:	00e9a023          	sw	a4,0(s3)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce6:	86a2                	mv	a3,s0
     ce8:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cea:	8b2e                	mv	s6,a1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cec:	85a2                	mv	a1,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cee:	d606                	sw	ra,44(sp)
     cf0:	d226                	sw	s1,36(sp)
     cf2:	ca56                	sw	s5,20(sp)
     cf4:	c65e                	sw	s7,12(sp)
     cf6:	8ac2                	mv	s5,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cf8:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cfc:	e90ff0ef          	jal	ra,38c <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d00:	00140b93          	addi	s7,s0,1
     d04:	874a                	mv	a4,s2
     d06:	86de                	mv	a3,s7
     d08:	8656                	mv	a2,s5
     d0a:	85a6                	mv	a1,s1
     d0c:	ff0ff0ef          	jal	ra,4fc <polydiv>
     d10:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d12:	87aa                	mv	a5,a0
     d14:	872a                	mv	a4,a0
     d16:	86a6                	mv	a3,s1
     d18:	0546c963          	blt	a3,s4,d6a <ntru_deceypt+0xb6>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     d1c:	4589                	li	a1,2
     d1e:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d22:	4701                	li	a4,0
     d24:	04874c63          	blt	a4,s0,d7c <ntru_deceypt+0xc8>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d28:	4701                	li	a4,0
     d2a:	86a2                	mv	a3,s0
     d2c:	85a2                	mv	a1,s0
     d2e:	8562                	mv	a0,s8
     d30:	e5cff0ef          	jal	ra,38c <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d34:	875a                	mv	a4,s6
     d36:	86de                	mv	a3,s7
     d38:	8656                	mv	a2,s5
     d3a:	85a6                	mv	a1,s1
     d3c:	fc0ff0ef          	jal	ra,4fc <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	87aa                	mv	a5,a0
     d42:	0544c663          	blt	s1,s4,d8e <ntru_deceypt+0xda>
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
	resultkon[0] = 0xccccccc1;
    return return_address7;
}
     d46:	50b2                	lw	ra,44(sp)
     d48:	5422                	lw	s0,40(sp)
	resultkon[0] = 0xccccccc1;
     d4a:	ccccd7b7          	lui	a5,0xccccd
     d4e:	cc178793          	addi	a5,a5,-831 # ccccccc1 <_stack_start+0xcccbccc1>
     d52:	00f9a023          	sw	a5,0(s3)
}
     d56:	5492                	lw	s1,36(sp)
     d58:	5902                	lw	s2,32(sp)
     d5a:	49f2                	lw	s3,28(sp)
     d5c:	4a62                	lw	s4,24(sp)
     d5e:	4ad2                	lw	s5,20(sp)
     d60:	4b42                	lw	s6,16(sp)
     d62:	4bb2                	lw	s7,12(sp)
     d64:	4c22                	lw	s8,8(sp)
     d66:	6145                	addi	sp,sp,48
     d68:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d6a:	00269593          	slli	a1,a3,0x2
     d6e:	95b2                	add	a1,a1,a2
     d70:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	0685                	addi	a3,a3,1
     d74:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d76:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7a:	bf79                	j	d18 <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     d7c:	4394                	lw	a3,0(a5)
     d7e:	00d5d563          	bge	a1,a3,d88 <ntru_deceypt+0xd4>
            a2[i] = (-1)*(q-a2[i]);
     d82:	412686b3          	sub	a3,a3,s2
     d86:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d88:	0705                	addi	a4,a4,1
     d8a:	0791                	addi	a5,a5,4
     d8c:	bf61                	j	d24 <ntru_deceypt+0x70>
        c2[i-(2*N)] = c2[i];
     d8e:	00249713          	slli	a4,s1,0x2
     d92:	972a                	add	a4,a4,a0
     d94:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d96:	0485                	addi	s1,s1,1
     d98:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d9a:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d9e:	b755                	j	d42 <ntru_deceypt+0x8e>

00000da0 <default_exc_handler>:
     da0:	0000006f          	j	da0 <default_exc_handler>

00000da4 <reset_handler>:
     da4:	00000093          	li	ra,0
     da8:	8106                	mv	sp,ra
     daa:	8186                	mv	gp,ra
     dac:	8206                	mv	tp,ra
     dae:	8286                	mv	t0,ra
     db0:	8306                	mv	t1,ra
     db2:	8386                	mv	t2,ra
     db4:	8406                	mv	s0,ra
     db6:	8486                	mv	s1,ra
     db8:	8506                	mv	a0,ra
     dba:	8586                	mv	a1,ra
     dbc:	8606                	mv	a2,ra
     dbe:	8686                	mv	a3,ra
     dc0:	8706                	mv	a4,ra
     dc2:	8786                	mv	a5,ra
     dc4:	8806                	mv	a6,ra
     dc6:	8886                	mv	a7,ra
     dc8:	8906                	mv	s2,ra
     dca:	8986                	mv	s3,ra
     dcc:	8a06                	mv	s4,ra
     dce:	8a86                	mv	s5,ra
     dd0:	8b06                	mv	s6,ra
     dd2:	8b86                	mv	s7,ra
     dd4:	8c06                	mv	s8,ra
     dd6:	8c86                	mv	s9,ra
     dd8:	8d06                	mv	s10,ra
     dda:	8d86                	mv	s11,ra
     ddc:	8e06                	mv	t3,ra
     dde:	8e86                	mv	t4,ra
     de0:	8f06                	mv	t5,ra
     de2:	8f86                	mv	t6,ra
     de4:	0000f117          	auipc	sp,0xf
     de8:	21c10113          	addi	sp,sp,540 # 10000 <_stack_start>

00000dec <_start>:
     dec:	00000d17          	auipc	s10,0x0
     df0:	43cd0d13          	addi	s10,s10,1084 # 1228 <_bss_start>
     df4:	00001d97          	auipc	s11,0x1
     df8:	1c4d8d93          	addi	s11,s11,452 # 1fb8 <_bss_end>
     dfc:	01bd5763          	bge	s10,s11,e0a <main_entry>

00000e00 <zero_loop>:
     e00:	000d2023          	sw	zero,0(s10)
     e04:	0d11                	addi	s10,s10,4
     e06:	ffaddde3          	bge	s11,s10,e00 <zero_loop>

00000e0a <main_entry>:
     e0a:	00000513          	li	a0,0
     e0e:	00000593          	li	a1,0
     e12:	18a000ef          	jal	ra,f9c <main>

00000e16 <memcpy>:
     e16:	00a5c7b3          	xor	a5,a1,a0
     e1a:	8b8d                	andi	a5,a5,3
     e1c:	00c508b3          	add	a7,a0,a2
     e20:	e7a1                	bnez	a5,e68 <memcpy+0x52>
     e22:	478d                	li	a5,3
     e24:	04c7f263          	bgeu	a5,a2,e68 <memcpy+0x52>
     e28:	00357793          	andi	a5,a0,3
     e2c:	872a                	mv	a4,a0
     e2e:	eba9                	bnez	a5,e80 <memcpy+0x6a>
     e30:	ffc8f613          	andi	a2,a7,-4
     e34:	fe060793          	addi	a5,a2,-32
     e38:	06f76763          	bltu	a4,a5,ea6 <memcpy+0x90>
     e3c:	02c77363          	bgeu	a4,a2,e62 <memcpy+0x4c>
     e40:	86ae                	mv	a3,a1
     e42:	87ba                	mv	a5,a4
     e44:	0006a803          	lw	a6,0(a3)
     e48:	0791                	addi	a5,a5,4
     e4a:	0691                	addi	a3,a3,4
     e4c:	ff07ae23          	sw	a6,-4(a5)
     e50:	fec7eae3          	bltu	a5,a2,e44 <memcpy+0x2e>
     e54:	fff60793          	addi	a5,a2,-1
     e58:	8f99                	sub	a5,a5,a4
     e5a:	9bf1                	andi	a5,a5,-4
     e5c:	0791                	addi	a5,a5,4
     e5e:	973e                	add	a4,a4,a5
     e60:	95be                	add	a1,a1,a5
     e62:	01176663          	bltu	a4,a7,e6e <memcpy+0x58>
     e66:	8082                	ret
     e68:	872a                	mv	a4,a0
     e6a:	ff157ee3          	bgeu	a0,a7,e66 <memcpy+0x50>
     e6e:	0005c783          	lbu	a5,0(a1)
     e72:	0705                	addi	a4,a4,1
     e74:	0585                	addi	a1,a1,1
     e76:	fef70fa3          	sb	a5,-1(a4)
     e7a:	ff176ae3          	bltu	a4,a7,e6e <memcpy+0x58>
     e7e:	8082                	ret
     e80:	0005c683          	lbu	a3,0(a1)
     e84:	0705                	addi	a4,a4,1
     e86:	00377793          	andi	a5,a4,3
     e8a:	fed70fa3          	sb	a3,-1(a4)
     e8e:	0585                	addi	a1,a1,1
     e90:	d3c5                	beqz	a5,e30 <memcpy+0x1a>
     e92:	0005c683          	lbu	a3,0(a1)
     e96:	0705                	addi	a4,a4,1
     e98:	00377793          	andi	a5,a4,3
     e9c:	fed70fa3          	sb	a3,-1(a4)
     ea0:	0585                	addi	a1,a1,1
     ea2:	fff9                	bnez	a5,e80 <memcpy+0x6a>
     ea4:	b771                	j	e30 <memcpy+0x1a>
     ea6:	41d4                	lw	a3,4(a1)
     ea8:	0005a283          	lw	t0,0(a1)
     eac:	0085af83          	lw	t6,8(a1)
     eb0:	00c5af03          	lw	t5,12(a1)
     eb4:	0105ae83          	lw	t4,16(a1)
     eb8:	0145ae03          	lw	t3,20(a1)
     ebc:	0185a303          	lw	t1,24(a1)
     ec0:	01c5a803          	lw	a6,28(a1)
     ec4:	c354                	sw	a3,4(a4)
     ec6:	5194                	lw	a3,32(a1)
     ec8:	00572023          	sw	t0,0(a4)
     ecc:	01f72423          	sw	t6,8(a4)
     ed0:	01e72623          	sw	t5,12(a4)
     ed4:	01d72823          	sw	t4,16(a4)
     ed8:	01c72a23          	sw	t3,20(a4)
     edc:	00672c23          	sw	t1,24(a4)
     ee0:	01072e23          	sw	a6,28(a4)
     ee4:	d314                	sw	a3,32(a4)
     ee6:	02470713          	addi	a4,a4,36
     eea:	02458593          	addi	a1,a1,36
     eee:	faf76ce3          	bltu	a4,a5,ea6 <memcpy+0x90>
     ef2:	b7a9                	j	e3c <memcpy+0x26>

00000ef4 <memset>:
     ef4:	433d                	li	t1,15
     ef6:	872a                	mv	a4,a0
     ef8:	02c37363          	bgeu	t1,a2,f1e <memset+0x2a>
     efc:	00f77793          	andi	a5,a4,15
     f00:	efbd                	bnez	a5,f7e <memset+0x8a>
     f02:	e5ad                	bnez	a1,f6c <memset+0x78>
     f04:	ff067693          	andi	a3,a2,-16
     f08:	8a3d                	andi	a2,a2,15
     f0a:	96ba                	add	a3,a3,a4
     f0c:	c30c                	sw	a1,0(a4)
     f0e:	c34c                	sw	a1,4(a4)
     f10:	c70c                	sw	a1,8(a4)
     f12:	c74c                	sw	a1,12(a4)
     f14:	0741                	addi	a4,a4,16
     f16:	fed76be3          	bltu	a4,a3,f0c <memset+0x18>
     f1a:	e211                	bnez	a2,f1e <memset+0x2a>
     f1c:	8082                	ret
     f1e:	40c306b3          	sub	a3,t1,a2
     f22:	068a                	slli	a3,a3,0x2
     f24:	00000297          	auipc	t0,0x0
     f28:	9696                	add	a3,a3,t0
     f2a:	00a68067          	jr	10(a3)
     f2e:	00b70723          	sb	a1,14(a4)
     f32:	00b706a3          	sb	a1,13(a4)
     f36:	00b70623          	sb	a1,12(a4)
     f3a:	00b705a3          	sb	a1,11(a4)
     f3e:	00b70523          	sb	a1,10(a4)
     f42:	00b704a3          	sb	a1,9(a4)
     f46:	00b70423          	sb	a1,8(a4)
     f4a:	00b703a3          	sb	a1,7(a4)
     f4e:	00b70323          	sb	a1,6(a4)
     f52:	00b702a3          	sb	a1,5(a4)
     f56:	00b70223          	sb	a1,4(a4)
     f5a:	00b701a3          	sb	a1,3(a4)
     f5e:	00b70123          	sb	a1,2(a4)
     f62:	00b700a3          	sb	a1,1(a4)
     f66:	00b70023          	sb	a1,0(a4)
     f6a:	8082                	ret
     f6c:	0ff5f593          	andi	a1,a1,255
     f70:	00859693          	slli	a3,a1,0x8
     f74:	8dd5                	or	a1,a1,a3
     f76:	01059693          	slli	a3,a1,0x10
     f7a:	8dd5                	or	a1,a1,a3
     f7c:	b761                	j	f04 <memset+0x10>
     f7e:	00279693          	slli	a3,a5,0x2
     f82:	00000297          	auipc	t0,0x0
     f86:	9696                	add	a3,a3,t0
     f88:	8286                	mv	t0,ra
     f8a:	fa8680e7          	jalr	-88(a3)
     f8e:	8096                	mv	ra,t0
     f90:	17c1                	addi	a5,a5,-16
     f92:	8f1d                	sub	a4,a4,a5
     f94:	963e                	add	a2,a2,a5
     f96:	f8c374e3          	bgeu	t1,a2,f1e <memset+0x2a>
     f9a:	b7a5                	j	f02 <memset+0xe>

00000f9c <main>:

int main(){
     f9c:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fa0:	0c000613          	li	a2,192
     fa4:	00000597          	auipc	a1,0x0
     fa8:	1c058593          	addi	a1,a1,448 # 1164 <__DTOR_END__+0xc0>
     fac:	0068                	addi	a0,sp,12
int main(){
     fae:	42112623          	sw	ra,1068(sp)
     fb2:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fb6:	3585                	jal	e16 <memcpy>
    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
   // resultkon[0] = 0xaaaaaaa0;
    keys = generate_keys(N, p, q);
     fb8:	06500613          	li	a2,101
     fbc:	458d                	li	a1,3
     fbe:	03500513          	li	a0,53
     fc2:	3a39                	jal	8e0 <generate_keys>
     fc4:	4781                	li	a5,0
    //resultkon[0] = 0xaaaaaaa1;
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fc6:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fca:	00f506b3          	add	a3,a0,a5
     fce:	4290                	lw	a2,0(a3)
     fd0:	1314                	addi	a3,sp,416
     fd2:	96be                	add	a3,a3,a5
     fd4:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fd6:	0791                	addi	a5,a5,4
     fd8:	fee799e3          	bne	a5,a4,fca <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fdc:	1cd8                	addi	a4,sp,628
     fde:	1a850793          	addi	a5,a0,424
     fe2:	27c50693          	addi	a3,a0,636
     fe6:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fe8:	4390                	lw	a2,0(a5)
     fea:	0791                	addi	a5,a5,4
     fec:	0711                	addi	a4,a4,4
     fee:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     ff2:	fed79be3          	bne	a5,a3,fe8 <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     ff6:	01f8                	addi	a4,sp,204
     ff8:	35050793          	addi	a5,a0,848
     ffc:	42450613          	addi	a2,a0,1060
    1000:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    1002:	438c                	lw	a1,0(a5)
    1004:	0791                	addi	a5,a5,4
    1006:	0711                	addi	a4,a4,4
    1008:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    100c:	fec79be3          	bne	a5,a2,1002 <main+0x66>
    1010:	06b0                	addi	a2,sp,840
    1012:	4fc50513          	addi	a0,a0,1276
    1016:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1018:	4398                	lw	a4,0(a5)
    101a:	0791                	addi	a5,a5,4
    101c:	0611                	addi	a2,a2,4
    101e:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1022:	fea79be3          	bne	a5,a0,1018 <main+0x7c>
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
   // resultkon[0] = 0xbbbbbbb0;
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	8742                	mv	a4,a6
    1028:	0070                	addi	a2,sp,12
    102a:	06500593          	li	a1,101
    102e:	03500513          	li	a0,53
    1032:	36e9                	jal	bfc <ntru_encyrpt>
    1034:	87aa                	mv	a5,a0
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
   // resultkon[0] = 0xccccccc0;
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1036:	34810813          	addi	a6,sp,840
    103a:	8722                	mv	a4,s0
    103c:	458d                	li	a1,3
    103e:	1314                	addi	a3,sp,416
    1040:	06500613          	li	a2,101
    1044:	03500513          	li	a0,53
    1048:	31b5                	jal	cb4 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    104a:	dedee737          	lui	a4,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104e:	4781                	li	a5,0
    1050:	00000597          	auipc	a1,0x0
    1054:	1d458593          	addi	a1,a1,468 # 1224 <_edata>
            resultkon[0] = 0xDEDEDEDE;
    1058:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    105c:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
    1060:	0070                	addi	a2,sp,12
    1062:	00f506b3          	add	a3,a0,a5
    1066:	963e                	add	a2,a2,a5
    1068:	4210                	lw	a2,0(a2)
    106a:	4294                	lw	a3,0(a3)
    106c:	00d60f63          	beq	a2,a3,108a <main+0xee>
            resultkon[0] = 0xBABABABA;
    1070:	babac7b7          	lui	a5,0xbabac
    1074:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1078:	c19c                	sw	a5,0(a1)
		}
    }
			

    return 0;
}
    107a:	42c12083          	lw	ra,1068(sp)
    107e:	42812403          	lw	s0,1064(sp)
    1082:	4501                	li	a0,0
    1084:	43010113          	addi	sp,sp,1072
    1088:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    108a:	c198                	sw	a4,0(a1)
    for(i = 0; i < 32; ++i){
    108c:	0791                	addi	a5,a5,4
    108e:	fd0799e3          	bne	a5,a6,1060 <main+0xc4>
    1092:	b7e5                	j	107a <main+0xde>

00001094 <__CTOR_LIST__>:
	...

0000109c <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010a4 <.rodata>:
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	ffff                	0xffff
    10aa:	ffff                	0xffff
    10ac:	0000                	unimp
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	ffff                	0xffff
    10b6:	ffff                	0xffff
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	ffff                	0xffff
    10be:	ffff                	0xffff
    10c0:	0000                	unimp
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	ffff                	0xffff
    10d2:	ffff                	0xffff
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	ffff                	0xffff
    10da:	ffff                	0xffff
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	0000                	unimp
    10e2:	0000                	unimp
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	0000                	unimp
    10ee:	0000                	unimp
    10f0:	ffff                	0xffff
    10f2:	ffff                	0xffff
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	ffff                	0xffff
    10fa:	ffff                	0xffff
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0000                	unimp
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	0000                	unimp
    110c:	0000                	unimp
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	ffff                	0xffff
    1116:	ffff                	0xffff
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	ffff                	0xffff
    111e:	ffff                	0xffff
    1120:	0000                	unimp
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	ffff                	0xffff
    112a:	ffff                	0xffff
    112c:	0000                	unimp
    112e:	0000                	unimp
    1130:	0001                	nop
    1132:	0000                	unimp
    1134:	ffff                	0xffff
    1136:	ffff                	0xffff
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	ffff                	0xffff
    113e:	ffff                	0xffff
    1140:	0000                	unimp
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0000                	unimp
    114e:	0000                	unimp
    1150:	ffff                	0xffff
    1152:	ffff                	0xffff
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	ffff                	0xffff
    115a:	ffff                	0xffff
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0000                	unimp
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0002                	c.slli64	zero
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0002                	c.slli64	zero
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0000                	unimp
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0002                	c.slli64	zero
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0000                	unimp
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0002                	c.slli64	zero
    11aa:	0000                	unimp
    11ac:	0000                	unimp
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0000                	unimp
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0000                	unimp
    11ce:	0000                	unimp
    11d0:	0002                	c.slli64	zero
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0002                	c.slli64	zero
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0000                	unimp
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0002                	c.slli64	zero
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0002                	c.slli64	zero
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0002                	c.slli64	zero
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	0000                	unimp
    1220:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001224 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1224:	bebe                	fsd	fa5,376(sp)
    1226:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001228 <_bss_start>:
	...

00001480 <product2>:
	...

000016d8 <result>:
	...

00001930 <ti_2>:
	...

00001ac0 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	1d7d                	addi	s10,s10,-1
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05a1                	addi	a1,a1,8
       e:	0000                	unimp
      10:	360c                	fld	fa1,40(a2)
      12:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x54>
      16:	0006                	c.slli	zero,0x1
      18:	6800                	flw	fs0,16(s0)
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	042c                	addi	a1,sp,520
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	2a08                	fld	fa0,16(a2)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
      3a:	0202                	c.slli64	tp
      3c:	0002c707          	flq	fa4,0(t0) # f82 <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	8304                	0x8304
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	030a                	slli	t1,t1,0x2
      7a:	0000                	unimp
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
      80:	0069                	c.nop	26
      82:	0000                	unimp
      84:	de06                	sw	ra,60(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	1e06                	slli	t3,t3,0x21
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	4106                	lw	sp,64(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0304                	addi	s1,sp,384
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0000022b          	0x22b
            a1[length-1] = a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x122>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
            a1[length-1] = a2[length-1];
      e4:	0508                	addi	a0,sp,640
            a1[length-2] = a2[length-2];
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
} //end of function
      f0:	100c                	addi	a1,sp,32
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    asm volatile(
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	7b06                	flw	fs6,96(sp)
            for (i = 0; i < (length / 3); i++) {
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
    asm volatile(
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	7406                	flw	fs0,96(sp)
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0000                	unimp
     118:	0e06                	slli	t3,t3,0x1
    asm volatile(
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	dd06                	sw	ra,184(sp)
     126:	0001                	nop
    asm volatile(
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
    switch(length%3) {
     12e:	0000                	unimp
     130:	ee0e                	fsw	ft3,28(sp)
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	049c                	addi	a5,sp,576
     140:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
            for (i = 0; i < ((length-2) / 3); i++) {
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	e40c                	fsw	fa1,8(s0)
    asm volatile(
     158:	0004                	0x4
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
            a1[length-1] = a1[length-1] % mod;
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	000001d7          	0x1d7
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	150c                	addi	a1,sp,672
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
    asm volatile(
     17a:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
            a1[length-2] = a1[length-2] % mod;
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
} //end of function
     18e:	0000                	unimp
    asm volatile(
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
            for (i = 0; i < (length / 3); i++) {
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
    asm volatile(
     19e:	0000                	unimp
     1a0:	1b0e                	slli	s6,s6,0x23
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
    asm volatile(
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	2d0c                	fld	fa1,24(a0)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	0122                	slli	sp,sp,0x8
     1ca:	0000                	unimp
    int line[size_b][size_a + size_b];
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	110c                	addi	a1,sp,160
     1d6:	04000007          	0x4000007
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1da:	0941                	addi	s2,s2,16
    int pola[size_a];
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03a8                	addi	a0,sp,456
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
    int line[size_b][size_a + size_b];
     1ec:	1000                	addi	s0,sp,32
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	600c                	flw	fa1,0(s0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    int line[size_b][size_a + size_b];
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
    int pola[size_a];
     1f8:	0000                	unimp
    int line[size_b][size_a + size_b];
     1fa:	0c14                	addi	a3,sp,528
     1fc:	061a                	slli	a2,a2,0x6
     1fe:	0000                	unimp
    int pola[size_a];
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
    int polb[size_b];
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	550c                	lw	a1,40(a0)
    int pola[size_a];
     20a:	0004                	0x4
    int polb[size_b];
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	005d                	c.nop	23
    int pola[size_a];
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	000006d3          	fadd.s	fa3,ft0,ft0,rne
    int line[size_b][size_a + size_b];
     21a:	4604                	lw	s1,8(a2)
    int polb[size_b];
     21c:	5d09                	li	s10,-30
            line[i][j] = 0;
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
    for (i = 0; i < size_b; ++i){
     224:	0131                	addi	sp,sp,12
     226:	0000                	unimp
            product[j] = 0;
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     230:	0c00                	addi	s0,sp,528
     232:	01bd                	addi	gp,gp,15
    array_equ(pola,a,size_a);
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
    array_mod(pola,mod,size_a);
     24c:	0558                	addi	a4,sp,644
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
    array_equ(polb,b,size_b);
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	0160                	addi	s0,sp,140
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
    array_mod(polb,mod,size_b);
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
    if(star_mult == 1){
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f c111 0003      	0x3c111001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
        for (j = size_b -1; j >= 0; j = j-1){
     286:	9c0c                	0x9c0c
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
            product[j] = 0;
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0xf6>
     290:	0000                	unimp
            line[i][j] = 0;
     292:	0c00                	addi	s0,sp,528
     294:	04b4                	addi	a3,sp,584
            product[j] = 0;
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	d20c                	sw	a1,32(a2)
    for (i = 0; i < size_b; ++i){
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
    if(star_mult == 1){
     2ae:	0131                	addi	sp,sp,12
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	231e                	fld	ft6,448(sp)
    for (i = 0; i < size_b; ++i){
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
}
     2d6:	1300                	addi	s0,sp,416
     2d8:	5f0e                	lw	t5,224(sp)
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x2e>
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	860e                	mv	a2,gp
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
            for (k = size_a-1; k >= 0; k = k-1 ){
     31a:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
            for (k = size_a-1; k >= 0; k = k-1 ){
     326:	005d                	c.nop	23
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	0159                	addi	sp,sp,22
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     344:	5a0c                	lw	a1,48(a2)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
            line[i][j] = line[i][j] % mod;
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0xb2>
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	005d                	c.nop	23
     368:	0000                	unimp
            product[j] += line[i][j];
     36a:	0c18                	addi	a4,sp,528
     36c:	0000013f 0a0ac804 	0xa0ac8040000013f
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	0b0c                	addi	a1,sp,400
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
        for(i = 0; i < size_b; ++i){
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	0359                	addi	t1,t1,22
        for(i = 0; i < size_b; ++i){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	f71d                	bnez	a4,2ba <polymult+0x100>
    int line[size_b][size_a + size_b];
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	180c                	addi	a1,sp,48
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
    int line[size_b][size_a + size_b];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06ed                	addi	a3,a3,27
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <array_mod+0x7a>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
    int line[size_b][size_a + size_b];
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult+0x1c6>
    int pola[size_a];
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
    int line[size_b][size_a + size_b];
     3ce:	005d                	c.nop	23
    int pola[size_a];
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
    int polb[size_b];
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
    int pola[size_a];
     3da:	3b11                	jal	ee <array_equ+0x5c>
    int polb[size_b];
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	640c                	flw	fa1,8(s0)
     3e2:	0006                	c.slli	zero,0x1
    int line[size_b][size_a + size_b];
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    int pola[size_a];
     3ec:	6c5f0f43          	0x6c5f0f43
    for (i = 0; i < size_b; ++i){
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x14e>
            product2[j] = 0;
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	6f0c                	flw	fa1,24(a4)
     3fc:	0001                	nop
    for (i = 0; i < size_b; ++i){
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
    array_equ(pola,a,size_a);
     406:	0c4c                	addi	a1,sp,532
     408:	0196                	slli	gp,gp,0x5
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
    array_equ(polb,b,size_b);
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
    if(star_mult == 1){
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x62>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0330                	addi	a2,sp,392
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	5800                	lw	s0,48(s0)
     42e:	8e0c                	0x8e0c
            for (k = size_a-1; k >= 0; k = k-1 ){
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
            product2[j] = 0;
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
            line[i][j] = 0;
     43a:	0c5c                	addi	a5,sp,532
     43c:	0466                	slli	s0,s0,0x19
            product2[j] = 0;
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
    for (i = 0; i < size_b; ++i){
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <array_mod+0x62>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	1000                	addi	s0,sp,32
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (j = size_b -1; j >= 0; j = j-1){
     472:	0004ec17          	auipc	s8,0x4e
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
        for(j=0;j<size_a+size_b-1;++j){
     47c:	bb08                	fsd	fa0,48(a4)
    for(i=0;i<size_b;++i){
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	0444                	addi	s1,sp,516
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
        for(j=0;j<size_a+size_b-1;++j){
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	0168                	addi	a0,sp,140
     492:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	023c                	addi	a5,sp,264
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	1402                	slli	s0,s0,0x20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	01e6                	slli	gp,gp,0x19
     4ae:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
            product2[j] += line[i][j];
     4b8:	180c                	addi	a1,sp,48
     4ba:	000004af          	0x4af
        for(j=0;j<size_a+size_b-1;++j){
     4be:	6e04                	flw	fs1,24(a2)
            product2[j] += line[i][j];
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for(i=0;i<size_b;++i){
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
}
     4d4:	1814                	addi	a3,sp,48
     4d6:	000004cb          	fnmsub.s	fs1,ft0,ft0,ft0,rne
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
     4e4:	04b9                	addi	s1,s1,14
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	000003d3          	fadd.s	ft7,ft0,ft0,rne
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
    int v[size_N];
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	04c1                	addi	s1,s1,16
    int v[size_N];
     502:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	02fc                	addi	a5,sp,332
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0211                	addi	tp,tp,4
    int v[size_N];
     51e:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	7b04                	flw	fs1,48(a4)
    int v[size_N];
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
    int q[size_N];
     528:	1844                	addi	s1,sp,52
     52a:	00000707          	0x707
    int num_temp[size_N];
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
    int denum_temp[size_D];
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	03fa                	slli	t2,t2,0x1e
    int num_temp[size_N];
     53a:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	7d04                	flw	fs1,56(a0)
    int denum_temp[size_D];
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    int v[size_N];
     544:	184c                	addi	a1,sp,52
     546:	0244                	addi	s1,sp,260
	array_equ(num_temp,num,size_N);
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    int denum_temp[size_D];
     552:	1850                	addi	a2,sp,52
     554:	018e                	slli	gp,gp,0x3
	array_equ(num_temp,num,size_N);
     556:	0000                	unimp
	array_mod(num_temp, mod, size_N);
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
    int denum_temp[size_D];
     560:	1854                	addi	a3,sp,52
    array_equ(denum_temp,denum,size_D);
     562:	043d                	addi	s0,s0,15
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    array_mod(denum_temp,mod,size_D);
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03c1                	addi	t2,t2,16
    for (i = 0; i < size_N; ++i){
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
    for (i = size_D-1; i >= 0; i = i-1){
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	da19                	beqz	a2,494 <polymult2+0x108>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
    for (i = 0; i < size_N; ++i){
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
        if ( (b_N*u)%mod == 1 )
     588:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	065a                	slli	a2,a2,0x16
     590:	0000                	unimp
        q[i] = 0;
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
        v[i] = 0;
     59a:	02dc                	addi	a5,sp,324
        q[i] = 0;
     59c:	4719                	li	a4,6
     59e:	0001                	nop
        v[i] = 0;
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
    for (i = 0; i < size_N; ++i){
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
        if( denum_temp[i] != 0 )
     5a8:	e000                	fsw	fs0,0(s0)
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	012c                	addi	a1,sp,136
        if ( (b_N*u)%mod == 1 )
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
    for (u = 0; u < mod; ++u){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        if( num_temp[i] != 0 )
     5bc:	c104                	sw	s1,0(a0)
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	00000433          	add	s0,zero,zero
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
    while (d >= d2){
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
	array_equ(result,q,size_N);
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
    for(i = size_N; i < (2*size_N); ++i){
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
        result[i] = num_temp[i-size_N];
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xe>
     5e8:	0005                	c.nop	1
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
}
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
        v[(d-d2)] = u*r_d;
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
	 array_mod(v, mod, size_N);
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
        v[(d-d2)] = u*r_d;
     62a:	6715                	lui	a4,0x5
	 array_mod(v, mod, size_N);
     62c:	0004                	0x4
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
	array_mod(product, mod, size_N);
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for (i = 0; i < size_N; ++i){
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
	array_mod(num_temp, mod, size_N);
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
        for(i = 0; i < size_N; ++i){
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
	array_mod(q, mod, size_N);
     65c:	0474                	addi	a3,sp,524
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	241a                	fld	fs0,384(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     676:	9c18                	0x9c18
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x1a2>
        for (i = 0; i < size_N; ++i){
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     684:	a018                	fsd	fa4,0(s0)
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     68a:	5d07012b          	0x5d07012b
            q[i] = q[i] + v[i];
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	6e18                	flw	fa4,24(a2)
     694:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
            q[i] = q[i] + v[i];
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
        for(i = 0; i < size_N; ++i){
     6a0:	1000                	addi	s0,sp,32
            if( num_temp[i] != 0 )
     6a2:	6804                	flw	fs1,16(s0)
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
            v[i] = 0;
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
        for (i = 0; i < size_N; ++i){
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
        result[i] = num_temp[i-size_N];
     6ba:	1800                	addi	s0,sp,48
     6bc:	04fd                	addi	s1,s1,31
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	000004f7          	0x4f7
    int ri_2[size]; // MX-ring poly, a
     6ce:	4604                	lw	s1,8(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	1201                	addi	tp,tp,-32
    int ri_2[size]; // MX-ring poly, a
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000056f          	jal	a0,6d8 <ext_euclid+0xc>
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    int ri_2[size]; // MX-ring poly, a
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
    int ri[size];
     700:	0318                	addi	a4,sp,384
     702:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ti[size];
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	4b18                	lw	a4,16(a4)
    int qi_1[size];
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
    int temp[size];
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	0400                	addi	s0,sp,512
     71c:	ef18                	fsw	fa4,24(a4)
     71e:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
    int temp[size];
     724:	0b10                	addi	a2,sp,400
    for (i = 0; i < size; ++i) {
     726:	0008                	0x8
        ti_2[i] = 0;
     728:	0800                	addi	s0,sp,16
     72a:	de18                	sw	a4,56(a2)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
    array_equ(ri_2,polyR,size);
     736:	2400                	fld	fs0,8(s0)
     738:	f618                	fsw	fa4,40(a2)
     73a:	0001                	nop
    array_equ(ri_1,polyf,size);
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
    ti_1[0] = 1;
     744:	4800                	lw	s0,16(s0)
     746:	9718                	0x9718
     748:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     752:	5000                	lw	s0,32(s0)
     754:	f418                	fsw	fa4,40(s0)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
    array_mod(ri_2,mod,size);
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
    array_mod(ri_1,mod,size);
     762:	a218                	fsd	fa4,0(a2)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	f918                	fsw	fa4,48(a0)
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
    array_mod(temp,mod,size);
     78a:	7800                	flw	fs0,48(s0)
     78c:	4a18                	lw	a4,16(a2)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	e318                	fsw	fa4,0(a4)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
    array_equ(qi_1,res1,size);
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
    array_mod(qi_1,mod,size);
     7a6:	8800                	0x8800
     7a8:	8118                	0x8118
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	af18                	fsd	fa4,24(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
    array_equ(temp,res2,size);
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
    array_mod(temp,mod,size);
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9e18                	0x9e18
    array_mod(ti,mod,size);
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
array_equ(ri_2,ri_1,size);
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
array_equ(ri_1,ri,size);
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
array_equ(ti_2,ti_1,size);
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
array_equ(ti_1,ti,size);
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        controlR = 0;
     7fc:	4218                	lw	a4,0(a2)
        for (i = 0; i < N + 1; ++i) {
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
    while (controlR != 0) {
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     808:	cc00                	sw	s0,24(s0)
            if (((ri_2[0] * j) % mod) == 1)
     80a:	0900                	addi	s0,sp,144
        for (j = 0; j < mod; ++j) {
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
    }
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
        ti_2[i] = 0;
     846:	0000038f          	0x38f
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
        ti_1[i] = 0;
     84e:	0862                	slli	a6,a6,0x18
        ti_2[i] = 0;
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
        ti_1[i] = 0;
     854:	037a                	slli	t1,t1,0x1e
     856:	0000                	unimp
    for (i = 0; i < size; ++i) {
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
            ri[i - (N + 1)] = res[i];
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x54>
            ri[i - (N + 1)] = res[i];
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0069                	c.nop	26
            temp[i] = ri_2[i] - ri[i];
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     87e:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
        for (i = 0; i < N + 1; ++i) {
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
            ti[i] = ti_2[i] - temp[i];
     888:	000008a7          	0x8a7
     88c:	ec1d                	bnez	s0,8ca <ext_euclid+0x1fe>
     88e:	0004                	0x4
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
        for (i = 0; i < N + 1; ++i) {
     898:	1d00                	addi	s0,sp,688
            ti[i] = ti_2[i] - temp[i];
     89a:	066a                	slli	a2,a2,0x1a
     89c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
              qi_1[i] = 0;
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
            controlR += ri[i];
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
              qi_1[i] = 0;
     8b0:	690a                	flw	fs2,128(sp)
        for (i = 0; i < N + 1; ++i) {
     8b2:	0000                	unimp
            controlR += ri[i];
     8b4:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     8b6:	1e00                	addi	s0,sp,816
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
        for (j = 0; j < mod; ++j) {
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8de:	5d15                	li	s10,-27
int* generate_keys(int N, int p, int q){
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	9520                	0x9520
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	058e                	slli	a1,a1,0x3
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
	resultkon[0] = 0xaaaaaaa0;
     918:	0000                	unimp
     91a:	c921                	beqz	a0,96a <generate_keys+0x8a>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
int* generate_keys(int N, int p, int q){
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
	resultkon[0] = 0xaaaaaaa0;
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	0095                	addi	ra,ra,5
     936:	7822                	flw	fa6,40(sp)
	resultkon[0] = 0xaaaaaaa0;
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     942:	0305                	addi	t1,t1,1
     944:	1228                	addi	a0,sp,296
     946:	0000                	unimp
     948:	4522                	lw	a0,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1480                	addi	s0,sp,608
     958:	0000                	unimp
     95a:	fd22                	fsw	fs0,184(sp)
     95c:	0002                	c.slli64	zero
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	16d8                	addi	a4,sp,868
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	25220063          	beq	tp,s2,bba <generate_keys+0x2da>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1930                	addi	a2,sp,184
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ac003          	lbu	zero,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
    int polyR[N+1];
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9bc:	0000                	unimp
    int polyR[N+1];
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	3224                	fld	fs1,96(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
    polyR[N] = 1;
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1224                	addi	s1,sp,296
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9d6:	0000                	unimp
     9d8:	0c25                	addi	s8,s8,9
     9da:	01000007          	0x1000007
     9de:	031c                	addi	a5,sp,384
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	9c00                	0x9c00
     9e6:	f800000f          	0xf800000f
     9ea:	0000                	unimp
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
     9f4:	03e5                	addi	t2,t2,25
     9f6:	0000                	unimp
     9f8:	1d01                	addi	s10,s10,-32
     9fa:	0b630a03          	lb	s4,182(t1)
     9fe:	0000                	unimp
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	031e                	slli	t1,t1,0x7
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	031a                	slli	t1,t1,0x6
     a18:	0000                	unimp
     a1a:	1f01                	addi	t5,t5,-32
     a1c:	0b630a03          	lb	s4,182(t1)
     a20:	0000                	unimp
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	0320                	addi	s0,sp,392
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	0321                	addi	t1,t1,8
     a38:	5d09                	li	s10,-30
    polyR[0] = -1;
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
    for(i = 1; i < N; ++i){
     a3e:	01007127          	0x1007127
     a42:	0322                	slli	t1,t1,0x8
     a44:	5d09                	li	s10,-30
    for (i = N; i < 55; ++i ){
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	a028                	fsd	fa0,64(s0)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
        random_keys[i] = f[i];
     a50:	0324                	addi	s1,sp,392
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
    for(i = 0; i < N; ++i){
     a58:	dc91                	beqz	s1,974 <generate_keys+0x94>
     a5a:	05362677          	0x5362677
     a5e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a60:	2501                	jal	1060 <main+0xc4>
     a62:	0b790903          	lb	s2,183(s2) # 20b7 <_min_stack+0xb7>
     a66:	0000                	unimp
        random_keys[i] = g[i-N];
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
     a6e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a70:	0100                	addi	s0,sp,128
     a72:	0326                	slli	t1,t1,0x9
    for(i = (2*N); i < (3*N); ++i){
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
    fp = ext_euclid(polyR, f, (N+1), p);
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	2701                	jal	1182 <__DTOR_END__+0xde>
     a84:	0b9d0903          	lb	s2,185(s10)
        random_keys[i] = fp[i-(2*N)];
     a88:	0000                	unimp
     a8a:	6126                	flw	ft2,72(sp)
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     a90:	0328                	addi	a0,sp,392
     a92:	af09                	j	11a4 <__DTOR_END__+0x100>
    fq = ext_euclid(polyR, f, (N+1), q);
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	024c                	addi	a1,sp,260
     a9e:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     aa0:	2901                	jal	eb0 <memcpy+0x9a>
     aa2:	0bc10903          	lb	s2,188(sp)
     aa6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     aa8:	0426                	slli	s0,s0,0x9
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	032a                	slli	t1,t1,0xa
    for(i = (3*N); i < (4*N); ++i){
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0xd2>
     ab2:	6500000b          	0x6500000b
    fg = polymult2(fq, N, g, N, 0);
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	2b01                	jal	fcc <main+0x30>
    for(i = 0; i < (2*N-1); ++i){
     abe:	005d0903          	lb	s2,5(s10)
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000fb82b          	0xfb82b
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     acc:	6a00                	flw	fs0,16(a2)
     ace:	001d                	c.nop	7
     ad0:	ec00                	fsw	fs0,24(s0)
    for(i = (4*N); i < (5*N); ++i){
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     adc:	012c                	addi	a1,sp,136
     ade:	6403055b          	0x6403055b
     ae2:	0011                	c.nop	4
    for(i = (4*N); i < (5*N); ++i){
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	00c0                	addi	s0,sp,68
     aec:	000fc42b          	0xfc42b
        random_keys[i] = polyR[i-(5*N)];
     af0:	9d00                	0x9d00
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
    for(i = (5*N); i < (6*N+1); ++i){
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x86>
     b00:	5b01                	li	s6,-32
	resultkon[0] = 0xaaaaaaa1;
     b02:	3301                	jal	802 <ext_euclid+0x136>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	1034                	addi	a3,sp,40
}
     b0e:	0000                	unimp
     b10:	0d6a                	slli	s10,s10,0x1a
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x164>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x11d>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	104a                	c.slli	zero,0x32
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <zero_loop+0x4>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra) # 114f <__DTOR_END__+0xab>
        polyR[i] = 0;
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0078                	addi	a4,sp,12
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
    for(i = 1; i < N; ++i){
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
        f[i] = 0;
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
        g[i] = 0;
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
    for (i = N; i < 55; ++i ){
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
        random_keys[i] = f[i];
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
    for(i = 0; i < N; ++i){
     b8e:	0000                	unimp
        random_keys[i] = f[i];
     b90:	0b9d                	addi	s7,s7,7
    for(i = 0; i < N; ++i){
     b92:	0000                	unimp
        random_keys[i] = g[i-N];
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
    for(i = N; i < (2*N); ++i){
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
        random_keys[i] = fp[i-(2*N)];
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
    for(i = (2*N); i < (3*N); ++i){
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
    for(i = (3*N); i < (4*N); ++i){
     bc2:	005d                	c.nop	23
        random_keys[i] = fq[i-(3*N)];
     bc4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
    for(i = 0; i < (2*N-1); ++i){
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
        fg[i] = fg[i]*p;
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
    for(i = 0; i < (2*N-1); ++i){
     bd6:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
    for(i = (4*N); i < (5*N); ++i){
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c5                	addi	gp,gp,17
        random_keys[i] = polyR[i-(5*N)];
     be8:	0000                	unimp
     bea:	ef01                	bnez	a4,c02 <ntru_encyrpt+0x6>
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <ntru_encyrpt+0x8>
     bf2:	0cb4                	addi	a3,sp,600
     bf4:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	00ec                	addi	a1,sp,76
        random_keys[i] = polyR[i-(5*N)];
     bf8:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     bfa:	9c01                	0x9c01
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	0d6a                	slli	s10,s10,0x1a
	resultkon[0] = 0xbbbbbbb0;
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	5d1702ef          	jal	t0,719d4 <_stack_start+0x619d4>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
     c12:	ef01                	bnez	a4,c2a <ntru_encyrpt+0x2e>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
	resultkon[0] = 0xbbbbbbb0;
     c20:	0100                	addi	s0,sp,128
     c22:	5d2502ef          	jal	t0,511f4 <_stack_start+0x411f4>
     c26:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c28:	5400                	lw	s0,40(s0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
     c30:	0000                	unimp
     c32:	ef01                	bnez	a4,c4a <ntru_encyrpt+0x4e>
	resultkon[0] = 0xbbbbbbb0;
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x50>
    temp = polymult(public_key,N,random_val,48,q,0);
     c3a:	0000028b          	0x28b
     c3e:	6131                	addi	sp,sp,320
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	634002ef          	jal	t0,1278 <_bss_start+0x50>
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
    for(i = 0; i < 48; ++i){
     c4e:	3100                	fld	fs0,32(a0)
     c50:	03e5                	addi	t2,t2,25
        temp[i] = temp[i] + message[i];
     c52:	0000                	unimp
     c54:	ef01                	bnez	a4,c6c <ntru_encyrpt+0x70>
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x72>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	0531                	addi	a0,a0,12
     c62:	0002                	c.slli64	zero
    for(i = 0; i < 48; ++i){
     c64:	0100                	addi	s0,sp,128
     c66:	636602ef          	jal	t0,6129c <_stack_start+0x5129c>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0f00000b          	0xf00000b
     c6e:	26000003          	lb	zero,608(zero) # 260 <polymult+0xa6>
     c72:	000002b7          	lui	t0,0x0
     c76:	f101                	bnez	a0,b76 <generate_keys+0x296>
    for(i = (2*N); i < (3*N); ++i){
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x94>
     c7e:	0346                	slli	t1,t1,0x11
     c80:	0000                	unimp
     c82:	612a                	flw	ft2,136(sp)
}
     c84:	0100                	addi	s0,sp,128
     c86:	02f2                	slli	t0,t0,0x1c
	resultkon[0] = 0xbbbbbbb1;
     c88:	630a                	flw	ft6,128(sp)
     c8a:	5900000b          	0x5900000b
     c8e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xe6>
     c92:	3261                	jal	61a <polydiv+0x11e>
}
     c94:	0100                	addi	s0,sp,128
     c96:	630a02f3          	0x630a02f3
     c9a:	6c00000b          	0x6c00000b
     c9e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xe6>
        CT[i-(2*N)] = CT[i];
     ca2:	f4010063          	beqz	sp,3e2 <polymult2+0x56>
     ca6:	0a02                	c.slli64	s4
     ca8:	00000b63          	beqz	zero,cbe <ntru_deceypt+0xa>
    for(i = (2*N); i < (3*N); ++i){
     cac:	0395                	addi	t2,t2,5
        CT[i-(2*N)] = CT[i];
     cae:	0000                	unimp
     cb0:	632a                	flw	ft6,136(sp)
    for(i = (2*N); i < (3*N); ++i){
     cb2:	0032                	c.slli	zero,0xc
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	f501                	bnez	a0,bbc <generate_keys+0x2dc>
     cb6:	0a02                	c.slli64	s4
     cb8:	00000b63          	beqz	zero,cce <ntru_deceypt+0x1a>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cbc:	03a8                	addi	a0,sp,456
     cbe:	0000                	unimp
     cc0:	692a                	flw	fs2,136(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	0100                	addi	s0,sp,128
     cc4:	02f6                	slli	t0,t0,0x1d
	resultkon[0] = 0xccccccc0;
     cc6:	5d09                	li	s10,-30
     cc8:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	c600                	sw	s0,8(a2)
	resultkon[0] = 0xccccccc0;
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0xf6>
     cd0:	0d00                	addi	s0,sp,656
     cd2:	0000                	unimp
     cd4:	179e                	slli	a5,a5,0x27
     cd6:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd8:	0cfc                	addi	a5,sp,604
     cda:	0000                	unimp
     cdc:	012c                	addi	a1,sp,136
     cde:	035a                	slli	t1,t1,0x16
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce0:	2c5d01f3          	0x2c5d01f3
	resultkon[0] = 0xccccccc0;
     ce4:	5b01                	li	s6,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce6:	7802                	flw	fa6,32(sp)
     ce8:	2c00                	fld	fs0,24(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cea:	5c01                	li	s8,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cec:	5f01f303          	0x5f01f303
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cf0:	012c                	addi	a1,sp,136
     cf2:	025d                	addi	tp,tp,23
     cf4:	0078                	addi	a4,sp,12
     cf6:	012c                	addi	a1,sp,136
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cf8:	015e                	slli	sp,sp,0x17
     cfa:	0030                	addi	a2,sp,8
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cfc:	000d102b          	0xd102b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d00:	c500                	sw	s0,8(a0)
     d02:	0014                	0x14
     d04:	2200                	fld	fs0,0(a2)
     d06:	000d                	c.nop	3
     d08:	2c00                	fld	fs0,24(s0)
     d0a:	5b01                	li	s6,-32
     d0c:	7902                	flw	fs2,32(sp)
     d0e:	2c00                	fld	fs0,24(s0)
     d10:	5c01                	li	s8,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d12:	8502                	jr	a0
     d14:	2c00                	fld	fs0,24(s0)
     d16:	5d01                	li	s10,-32
     d18:	8702                	jr	a4
     d1a:	2c00                	fld	fs0,24(s0)
        if(a2[i] <= q/2)
     d1c:	5e01                	li	t3,-32
     d1e:	8202                	jr	tp
     d20:	0000                	unimp
    for (i = 0; i < N; ++i){
     d22:	000d342b          	0xd342b
     d26:	9e00                	0x9e00
    c = polymult2(secret_key_fp,N,a2,N,0);
     d28:	47000017          	auipc	zero,0x47000
     d2c:	000d                	c.nop	3
     d2e:	2c00                	fld	fs0,24(s0)
     d30:	5a01                	li	s4,-32
     d32:	8802                	jr	a6
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d34:	2c00                	fld	fs0,24(s0)
     d36:	5b01                	li	s6,-32
     d38:	7802                	flw	fa6,32(sp)
     d3a:	2c00                	fld	fs0,24(s0)
     d3c:	5d01                	li	s10,-32
     d3e:	7802                	flw	fa6,32(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	2c00                	fld	fs0,24(s0)
     d42:	5e01                	li	t3,-32
     d44:	3001                	jal	544 <polydiv+0x48>
}
     d46:	2d00                	fld	fs0,24(a0)
     d48:	0d40                	addi	s0,sp,660
	resultkon[0] = 0xccccccc1;
     d4a:	0000                	unimp
     d4c:	14c5                	addi	s1,s1,-15
     d4e:	0000                	unimp
     d50:	012c                	addi	a1,sp,136
     d52:	0079025b          	0x79025b
}
     d56:	012c                	addi	a1,sp,136
     d58:	025c                	addi	a5,sp,260
     d5a:	0085                	addi	ra,ra,1
     d5c:	012c                	addi	a1,sp,136
     d5e:	025d                	addi	tp,tp,23
     d60:	012c0087          	0x12c0087
     d64:	025e                	slli	tp,tp,0x17
     d66:	0086                	slli	ra,ra,0x1
     d68:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d6a:	0006342f          	0x6342f
     d6e:	0100                	addi	s0,sp,128
     d70:	02cc                	addi	a1,sp,324
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	6306                	flw	ft6,64(sp)
     d74:	fc00000b          	0xfc00000b
        a2[i-(2*N)] = a2[i];
     d78:	b800000b          	0xb800000b
        if(a2[i] <= q/2)
     d7c:	0000                	unimp
     d7e:	0100                	addi	s0,sp,128
     d80:	9d9c                	0x9d9c
            a2[i] = (-1)*(q-a2[i]);
     d82:	000e                	c.slli	zero,0x3
     d84:	3000                	fld	fs0,32(s0)
     d86:	004e                	c.slli	zero,0x13
    for (i = 0; i < N; ++i){
     d88:	cc01                	beqz	s0,da0 <default_exc_handler>
     d8a:	1702                	slli	a4,a4,0x20
     d8c:	005d                	c.nop	23
        c2[i-(2*N)] = c2[i];
     d8e:	0000                	unimp
     d90:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
     d94:	7130                	flw	fa2,96(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d96:	0100                	addi	s0,sp,128
     d98:	02cc                	addi	a1,sp,324
        c2[i-(2*N)] = c2[i];
     d9a:	5d1e                	lw	s10,228(sp)
     d9c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d9e:	7700                	flw	fs0,40(a4)
     da0:	0004                	0x4
     da2:	3100                	fld	fs0,32(a0)
     da4:	03a0                	addi	s0,sp,456
     da6:	0000                	unimp
     da8:	cc01                	beqz	s0,dc0 <reset_handler+0x1c>
     daa:	2602                	fld	fa2,0(sp)
     dac:	00000b63          	beqz	zero,dc2 <reset_handler+0x1e>
     db0:	04ae                	slli	s1,s1,0xb
     db2:	0000                	unimp
     db4:	3631                	jal	8c0 <ext_euclid+0x1f4>
     db6:	0005                	c.nop	1
     db8:	0100                	addi	s0,sp,128
     dba:	02cc                	addi	a1,sp,324
     dbc:	6334                	flw	fa3,64(a4)
     dbe:	da00000b          	0xda00000b
     dc2:	0004                	0x4
     dc4:	3100                	fld	fs0,32(a0)
     dc6:	0205                	addi	tp,tp,1
     dc8:	0000                	unimp
     dca:	cc01                	beqz	s0,de2 <reset_handler+0x3e>
     dcc:	4502                	lw	a0,0(sp)
     dce:	00000b63          	beqz	zero,de4 <reset_handler+0x40>
     dd2:	0511                	addi	a0,a0,4
     dd4:	0000                	unimp
     dd6:	a726                	fsd	fs1,392(sp)
     dd8:	0002                	c.slli64	zero
     dda:	0100                	addi	s0,sp,128
     ddc:	02ce                	slli	t0,t0,0x13
     dde:	630a                	flw	ft6,128(sp)
     de0:	4800000b          	0x4800000b
     de4:	0005                	c.nop	1
     de6:	3200                	fld	fs0,32(a2)
     de8:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     dec:	630a02cf          	fnmadd.d	ft5,fs4,fa6,fa2,rne
     df0:	0100000b          	0x100000b
     df4:	285a                	fld	fa6,400(sp)
     df6:	0000036f          	jal	t1,df6 <_start+0xa>
     dfa:	d101                	beqz	a0,cfa <ntru_deceypt+0x46>
     dfc:	0902                	c.slli64	s2
     dfe:	0b69                	addi	s6,s6,26
     e00:	0000                	unimp
     e02:	7ea09103          	lh	sp,2026(ra)
     e06:	2626                	fld	fa2,72(sp)
     e08:	0002                	c.slli64	zero
     e0a:	0100                	addi	s0,sp,128
     e0c:	02d2                	slli	t0,t0,0x14
     e0e:	630a                	flw	ft6,128(sp)
     e10:	5b00000b          	0x5b00000b
     e14:	0005                	c.nop	1
     e16:	2a00                	fld	fs0,16(a2)
     e18:	0069                	c.nop	26
     e1a:	d301                	beqz	a4,d1a <ntru_deceypt+0x66>
     e1c:	0902                	c.slli64	s2
     e1e:	005d                	c.nop	23
     e20:	0000                	unimp
     e22:	056e                	slli	a0,a0,0x1b
     e24:	0000                	unimp
     e26:	000c3a2b          	0xc3a2b
     e2a:	6a00                	flw	fs0,16(a2)
     e2c:	001d                	c.nop	7
     e2e:	4900                	lw	s0,16(a0)
     e30:	000e                	c.slli	zero,0x3
     e32:	2c00                	fld	fs0,24(s0)
     e34:	5a01                	li	s4,-32
     e36:	7202                	flw	ft4,32(sp)
     e38:	2c00                	fld	fs0,24(s0)
     e3a:	5b01                	li	s6,-32
     e3c:	0305                	addi	t1,t1,1
     e3e:	10a4                	addi	s1,sp,104
     e40:	0000                	unimp
     e42:	012c                	addi	a1,sp,136
     e44:	025c                	addi	a5,sp,260
     e46:	c008                	sw	a0,0(s0)
     e48:	2b00                	fld	fs0,16(a4)
     e4a:	0c4c                	addi	a1,sp,532
     e4c:	0000                	unimp
     e4e:	00001917          	auipc	s2,0x1
     e52:	0e7a                	slli	t3,t3,0x1e
     e54:	0000                	unimp
     e56:	012c                	addi	a1,sp,136
     e58:	025a                	slli	tp,tp,0x16
     e5a:	0084                	addi	s1,sp,64
     e5c:	012c                	addi	a1,sp,136
     e5e:	0078025b          	0x78025b
     e62:	012c                	addi	a1,sp,136
     e64:	025c                	addi	a5,sp,260
     e66:	0072                	c.slli	zero,0x1c
     e68:	012c                	addi	a1,sp,136
     e6a:	025d                	addi	tp,tp,23
     e6c:	3008                	fld	fa0,32(s0)
     e6e:	012c                	addi	a1,sp,136
     e70:	025e                	slli	tp,tp,0x17
     e72:	0082                	c.slli64	ra
     e74:	012c                	addi	a1,sp,136
     e76:	015f 0030 782d      	0x782d0030015f
     e7c:	000c                	0xc
     e7e:	c500                	sw	s0,8(a0)
     e80:	0014                	0x14
     e82:	2c00                	fld	fs0,24(s0)
     e84:	5b01                	li	s6,-32
     e86:	7902                	flw	fs2,32(sp)
     e88:	2c00                	fld	fs0,24(s0)
     e8a:	5c01                	li	s8,-32
     e8c:	8302                	jr	t1
     e8e:	2c00                	fld	fs0,24(s0)
     e90:	5d01                	li	s10,-32
     e92:	7802                	flw	fa6,32(sp)
     e94:	2c01                	jal	10a4 <__DTOR_END__>
     e96:	5e01                	li	t3,-32
     e98:	8202                	jr	tp
     e9a:	0000                	unimp
     e9c:	2f00                	fld	fs0,24(a4)
     e9e:	0311                	addi	t1,t1,4
     ea0:	0000                	unimp
     ea2:	7401                	lui	s0,0xfffe0
     ea4:	0602                	c.slli64	a2
     ea6:	00000b63          	beqz	zero,ebc <memcpy+0xa6>
     eaa:	08e0                	addi	s0,sp,92
     eac:	0000                	unimp
     eae:	031c                	addi	a5,sp,384
     eb0:	0000                	unimp
     eb2:	9c01                	0x9c01
     eb4:	104d                	c.nop	-13
     eb6:	0000                	unimp
     eb8:	4e30                	lw	a2,88(a2)
     eba:	0100                	addi	s0,sp,128
     ebc:	0274                	addi	a3,sp,268
     ebe:	5d18                	lw	a4,56(a0)
     ec0:	0000                	unimp
     ec2:	b000                	fsd	fs0,32(s0)
     ec4:	0005                	c.nop	1
     ec6:	3000                	fld	fs0,32(s0)
     ec8:	0070                	addi	a2,sp,12
     eca:	7401                	lui	s0,0xfffe0
     ecc:	1f02                	slli	t5,t5,0x20
     ece:	005d                	c.nop	23
     ed0:	0000                	unimp
     ed2:	0601                	addi	a2,a2,0
     ed4:	0000                	unimp
     ed6:	7130                	flw	fa2,96(a0)
     ed8:	0100                	addi	s0,sp,128
     eda:	0274                	addi	a3,sp,268
     edc:	5d26                	lw	s10,104(sp)
     ede:	0000                	unimp
     ee0:	3800                	fld	fs0,48(s0)
     ee2:	0006                	c.slli	zero,0x1
     ee4:	3200                	fld	fs0,32(a2)
     ee6:	0066                	c.slli	zero,0x19
     ee8:	7601                	lui	a2,0xfffe0
     eea:	0902                	c.slli64	s2
     eec:	104d                	c.nop	-13
     eee:	0000                	unimp
     ef0:	7c889103          	lh	sp,1992(a7)
     ef4:	6732                	flw	fa4,12(sp)
     ef6:	0100                	addi	s0,sp,128
     ef8:	4d090277          	0x4d090277
     efc:	0010                	0x10
     efe:	0300                	addi	s0,sp,384
     f00:	e491                	bnez	s1,f0c <memset+0x18>
     f02:	2a7d                	jal	10c0 <__DTOR_END__+0x1c>
     f04:	7066                	flw	ft0,120(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	0279                	addi	tp,tp,30
     f0a:	630a                	flw	ft6,128(sp)
     f0c:	6f00000b          	0x6f00000b
     f10:	0006                	c.slli	zero,0x1
     f12:	2a00                	fld	fs0,16(a2)
     f14:	7166                	flw	ft2,120(sp)
     f16:	0100                	addi	s0,sp,128
     f18:	027a                	slli	tp,tp,0x1e
     f1a:	630a                	flw	ft6,128(sp)
     f1c:	8200000b          	0x8200000b
     f20:	0006                	c.slli	zero,0x1
     f22:	2a00                	fld	fs0,16(a2)
     f24:	6766                	flw	fa4,88(sp)
     f26:	0100                	addi	s0,sp,128
     f28:	630a027b          	0x630a027b
     f2c:	a000000b          	0xa000000b
     f30:	0006                	c.slli	zero,0x1
     f32:	2a00                	fld	fs0,16(a2)
     f34:	6b70                	flw	fa2,84(a4)
     f36:	0100                	addi	s0,sp,128
     f38:	027c                	addi	a5,sp,268
     f3a:	630a                	flw	ft6,128(sp)
     f3c:	be00000b          	0xbe00000b
     f40:	0006                	c.slli	zero,0x1
     f42:	2600                	fld	fs0,8(a2)
     f44:	0205                	addi	tp,tp,1
     f46:	0000                	unimp
     f48:	7d01                	lui	s10,0xfffe0
     f4a:	0902                	c.slli64	s2
     f4c:	105d                	c.nop	-9
     f4e:	0000                	unimp
     f50:	06dc                	addi	a5,sp,836
     f52:	0000                	unimp
     f54:	692a                	flw	fs2,136(sp)
     f56:	0100                	addi	s0,sp,128
     f58:	027e                	slli	tp,tp,0x1f
     f5a:	5d09                	li	s10,-30
     f5c:	0000                	unimp
     f5e:	3f00                	fld	fs0,56(a4)
     f60:	26000007          	0x26000007
     f64:	03b1                	addi	t2,t2,12
     f66:	0000                	unimp
     f68:	7f01                	lui	t5,0xfffe0
     f6a:	0a02                	c.slli64	s4
     f6c:	00000b63          	beqz	zero,f82 <memset+0x8e>
     f70:	0886                	slli	a7,a7,0x1
     f72:	0000                	unimp
     f74:	00006933          	or	s2,zero,zero
     f78:	9e00                	0x9e00
     f7a:	0008                	0x8
     f7c:	2b00                	fld	fs0,16(a4)
     f7e:	093e                	slli	s2,s2,0xf
     f80:	0000                	unimp
     f82:	1d75                	addi	s10,s10,-3
     f84:	0000                	unimp
     f86:	0f9d                	addi	t6,t6,7
     f88:	0000                	unimp
     f8a:	012c                	addi	a1,sp,136
     f8c:	035a                	slli	t1,t1,0x16
     f8e:	9478                	0x9478
     f90:	2c7c                	fld	fa5,216(s0)
     f92:	5b01                	li	s6,-32
     f94:	3001                	jal	794 <ext_euclid+0xc8>
     f96:	012c                	addi	a1,sp,136
     f98:	025c                	addi	a5,sp,260
     f9a:	d008                	sw	a0,32(s0)
int main(){
     f9c:	2b00                	fld	fs0,16(a4)
     f9e:	09be                	slli	s3,s3,0xf
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fa0:	0000                	unimp
     fa2:	1d75                	addi	s10,s10,-3
     fa4:	0000                	unimp
     fa6:	0fbd                	addi	t6,t6,15
     fa8:	0000                	unimp
     faa:	012c                	addi	a1,sp,136
     fac:	035a                	slli	t1,t1,0x16
int main(){
     fae:	e878                	fsw	fa4,84(s0)
     fb0:	2c7d                	jal	126e <_bss_start+0x46>
     fb2:	5b01                	li	s6,-32
     fb4:	3001                	jal	7b4 <ext_euclid+0xe8>
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fb6:	012c                	addi	a1,sp,136
    keys = generate_keys(N, p, q);
     fb8:	025c                	addi	a5,sp,260
     fba:	d808                	sw	a0,48(s0)
     fbc:	2b00                	fld	fs0,16(a4)
     fbe:	0a86                	slli	s5,s5,0x1
     fc0:	0000                	unimp
     fc2:	1070                	addi	a2,sp,44
     fc4:	0000                	unimp
    for(i = 0; i < N; ++i){
     fc6:	0fe4                	addi	s1,sp,988
     fc8:	0000                	unimp
        secret_key_f[i] = keys[i];
     fca:	012c                	addi	a1,sp,136
     fcc:	025a                	slli	tp,tp,0x16
     fce:	0072                	c.slli	zero,0x1c
     fd0:	012c                	addi	a1,sp,136
     fd2:	8878035b          	0x8878035b
    for(i = 0; i < N; ++i){
     fd6:	2c7c                	fld	fa5,216(s0)
     fd8:	5c01                	li	s8,-32
     fda:	8602                	jr	a2
    for(i = N; i < (2*N); ++i){
     fdc:	2c00                	fld	fs0,24(s0)
     fde:	5d01                	li	s10,-32
     fe0:	8802                	jr	a6
     fe2:	0000                	unimp
     fe4:	000aa02b          	0xaa02b
        secret_key_fp[i-(2*N)] = keys[i];
     fe8:	7000                	flw	fs0,32(s0)
     fea:	0010                	0x10
     fec:	0b00                	addi	s0,sp,400
     fee:	0010                	0x10
     ff0:	2c00                	fld	fs0,24(s0)
    for(i = (2*N); i < (3*N); ++i){
     ff2:	5a01                	li	s4,-32
     ff4:	7202                	flw	ft4,32(sp)
    for(i = (3*N); i < (4*N); ++i){
     ff6:	2c00                	fld	fs0,24(s0)
     ff8:	5b01                	li	s6,-32
     ffa:	7c887803          	0x7c887803
     ffe:	012c                	addi	a1,sp,136
    1000:	025c                	addi	a5,sp,260
        public_key[i-(4*N)] = keys[i];
    1002:	0086                	slli	ra,ra,0x1
    1004:	012c                	addi	a1,sp,136
    1006:	025d                	addi	tp,tp,23
    1008:	2b000087          	0x2b000087
    for(i = (4*N); i < (5*N); ++i){
    100c:	0abe                	slli	s5,s5,0xf
    100e:	0000                	unimp
    1010:	179e                	slli	a5,a5,0x27
    1012:	0000                	unimp
    1014:	1030                	addi	a2,sp,40
    1016:	0000                	unimp
        ring_poly[i-(5*N)] = keys[i];
    1018:	012c                	addi	a1,sp,136
    101a:	0082025b          	0x82025b
    101e:	012c                	addi	a1,sp,136
    1020:	025c                	addi	a5,sp,260
    for(i = (5*N); i < (6*N+1); ++i){
    1022:	0089                	addi	ra,ra,2
    1024:	012c                	addi	a1,sp,136
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	025d                	addi	tp,tp,23
    1028:	0082                	c.slli64	ra
    102a:	012c                	addi	a1,sp,136
    102c:	015e                	slli	sp,sp,0x17
    102e:	0030                	addi	a2,sp,8
    1030:	d22d                	beqz	a2,f92 <memset+0x9e>
    1032:	000a                	c.slli	zero,0x2
    1034:	c500                	sw	s0,8(a0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1036:	0014                	0x14
    1038:	2c00                	fld	fs0,24(s0)
    103a:	5c01                	li	s8,-32
    103c:	7202                	flw	ft4,32(sp)
    103e:	2c00                	fld	fs0,24(s0)
    1040:	5d01                	li	s10,-32
    1042:	8602                	jr	a2
    1044:	2c00                	fld	fs0,24(s0)
    1046:	5e01                	li	t3,-32
    1048:	8702                	jr	a4
            resultkon[0] = 0xDEDEDEDE;
    104a:	0000                	unimp
    104c:	0900                	addi	s0,sp,144
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104e:	005d                	c.nop	23
    1050:	0000                	unimp
    1052:	105d                	c.nop	-9
    1054:	0000                	unimp
    1056:	690a                	flw	fs2,128(sp)
            resultkon[0] = 0xDEDEDEDE;
    1058:	0000                	unimp
    105a:	3600                	fld	fs0,40(a2)
    for(i = 0; i < 32; ++i){
    105c:	0900                	addi	s0,sp,144
    105e:	005d                	c.nop	23
        if(!(message[i] == Dec_Message[i])){
    1060:	0000                	unimp
    1062:	1070                	addi	a2,sp,44
    1064:	0000                	unimp
    1066:	6934                	flw	fa3,80(a0)
    1068:	0000                	unimp
    106a:	7400                	flw	fs0,40(s0)
    106c:	0000000f          	fence	unknown,unknown
            resultkon[0] = 0xBABABABA;
    1070:	00034e2f          	0x34e2f
    1074:	0100                	addi	s0,sp,128
    1076:	01d2                	slli	gp,gp,0x14
    1078:	6306                	flw	ft6,64(sp)
}
    107a:	cc00000b          	0xcc00000b
    107e:	0006                	c.slli	zero,0x1
    1080:	1400                	addi	s0,sp,544
    1082:	0002                	c.slli64	zero
    1084:	0100                	addi	s0,sp,128
    1086:	409c                	lw	a5,0(s1)
    1088:	0014                	0x14
            resultkon[0] = 0xDEDEDEDE;
    108a:	3100                	fld	fs0,32(a0)
    for(i = 0; i < 32; ++i){
    108c:	0205                	addi	tp,tp,1
    108e:	0000                	unimp
    1090:	d201                	beqz	a2,f90 <memset+0x9c>
    1092:	1601                	addi	a2,a2,-32
    1094:	00000b63          	beqz	zero,10aa <__DTOR_END__+0x6>
    1098:	08e4                	addi	s1,sp,92
    109a:	0000                	unimp
    109c:	8831                	andi	s0,s0,12
    109e:	0001                	nop
    10a0:	0100                	addi	s0,sp,128
    10a2:	01d2                	slli	gp,gp,0x14
    10a4:	6322                	flw	ft6,8(sp)
    10a6:	2900000b          	0x2900000b
    10aa:	0009                	c.nop	2
    10ac:	3100                	fld	fs0,32(a0)
    10ae:	0012                	c.slli	zero,0x4
    10b0:	0000                	unimp
    10b2:	d201                	beqz	a2,fb2 <main+0x16>
    10b4:	2d01                	jal	16c4 <product2+0x244>
    10b6:	005d                	c.nop	23
    10b8:	0000                	unimp
    10ba:	096e                	slli	s2,s2,0x1b
    10bc:	0000                	unimp
    10be:	6d30                	flw	fa2,88(a0)
    10c0:	0100646f          	jal	s0,70d0 <_stack_len+0x30d0>
    10c4:	01d2                	slli	gp,gp,0x14
    10c6:	00005d37          	lui	s10,0x5
    10ca:	b200                	fsd	fs0,32(a2)
    10cc:	0009                	c.nop	2
    10ce:	2600                	fld	fs0,8(a2)
    10d0:	0290                	addi	a2,sp,320
    10d2:	0000                	unimp
    10d4:	d401                	beqz	s0,fdc <main+0x40>
    10d6:	0a01                	addi	s4,s4,0
    10d8:	00000b63          	beqz	zero,10ee <__DTOR_END__+0x4a>
    10dc:	09e9                	addi	s3,s3,26
    10de:	0000                	unimp
    10e0:	4e2a                	lw	t3,136(sp)
    10e2:	0100                	addi	s0,sp,128
    10e4:	01d5                	addi	gp,gp,21
    10e6:	5d09                	li	s10,-30
    10e8:	0000                	unimp
    10ea:	0100                	addi	s0,sp,128
    10ec:	000a                	c.slli	zero,0x2
    10ee:	2a00                	fld	fs0,16(a2)
    10f0:	0069                	c.nop	26
    10f2:	d501                	beqz	a0,ffa <main+0x5e>
    10f4:	0c01                	addi	s8,s8,0
    10f6:	005d                	c.nop	23
    10f8:	0000                	unimp
    10fa:	00000a2f          	0xa2f
    10fe:	6a2a                	flw	fs4,136(sp)
    1100:	0100                	addi	s0,sp,128
    1102:	01d5                	addi	gp,gp,21
    1104:	00005d0f          	0x5d0f
    1108:	3600                	fld	fs0,40(a2)
    110a:	2600000b          	0x2600000b
    110e:	00000503          	lb	a0,0(zero) # 0 <__DYNAMIC>
    1112:	d601                	beqz	a2,101a <main+0x7e>
    1114:	0901                	addi	s2,s2,0
    1116:	1440                	addi	s0,sp,548
    1118:	0000                	unimp
    111a:	0b54                	addi	a3,sp,404
    111c:	0000                	unimp
    111e:	7c26                	flw	fs8,104(sp)
    1120:	0005                	c.nop	1
    1122:	0100                	addi	s0,sp,128
    1124:	530901d7          	0x530901d7
    1128:	0014                	0x14
    112a:	7400                	flw	fs0,40(s0)
    112c:	2a00000b          	0x2a00000b
    1130:	6972                	flw	fs2,28(sp)
    1132:	0100                	addi	s0,sp,128
    1134:	01d8                	addi	a4,sp,196
    1136:	6609                	lui	a2,0x2
    1138:	0014                	0x14
    113a:	9400                	0x9400
    113c:	2600000b          	0x2600000b
    1140:	0420                	addi	s0,sp,520
    1142:	0000                	unimp
    1144:	da01                	beqz	a2,1054 <main+0xb8>
    1146:	0901                	addi	s2,s2,0
    1148:	1479                	addi	s0,s0,-2
    114a:	0000                	unimp
    114c:	0bb4                	addi	a3,sp,472
    114e:	0000                	unimp
    1150:	742a                	flw	fs0,168(sp)
    1152:	0069                	c.nop	26
    1154:	db01                	beqz	a4,1064 <main+0xc8>
    1156:	0901                	addi	s2,s2,0
    1158:	148c                	addi	a1,sp,608
    115a:	0000                	unimp
    115c:	0c01                	addi	s8,s8,0
    115e:	0000                	unimp
    1160:	3826                	fld	fa6,104(sp)
    1162:	0004                	0x4
    1164:	0100                	addi	s0,sp,128
    1166:	01dc                	addi	a5,sp,196
    1168:	9f09                	0x9f09
    116a:	0014                	0x14
    116c:	2100                	fld	fs0,0(a0)
    116e:	000c                	0xc
    1170:	2600                	fld	fs0,8(a2)
    1172:	0226                	slli	tp,tp,0x9
    1174:	0000                	unimp
    1176:	dd01                	beqz	a0,108e <main+0xf2>
    1178:	0901                	addi	s2,s2,0
    117a:	14b2                	slli	s1,s1,0x2c
    117c:	0000                	unimp
    117e:	0c58                	addi	a4,sp,532
    1180:	0000                	unimp
    1182:	722a                	flw	ft4,168(sp)
    1184:	7365                	lui	t1,0xffff9
    1186:	0100                	addi	s0,sp,128
    1188:	01de                	slli	gp,gp,0x17
    118a:	630a                	flw	ft6,128(sp)
    118c:	ca00000b          	0xca00000b
    1190:	000c                	0xc
    1192:	2600                	fld	fs0,8(a2)
    1194:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
    1198:	df01                	beqz	a4,10b0 <__DTOR_END__+0xc>
    119a:	0a01                	addi	s4,s4,0
    119c:	00000b63          	beqz	zero,11b2 <__DTOR_END__+0x10e>
    11a0:	0ce8                	addi	a0,sp,604
    11a2:	0000                	unimp
    11a4:	5426                	lw	s0,104(sp)
    11a6:	0001                	nop
    11a8:	0100                	addi	s0,sp,128
    11aa:	01e0                	addi	s0,sp,204
    11ac:	630a                	flw	ft6,128(sp)
    11ae:	0600000b          	0x600000b
    11b2:	000d                	c.nop	3
    11b4:	2600                	fld	fs0,8(a2)
    11b6:	03f1                	addi	t2,t2,28
    11b8:	0000                	unimp
    11ba:	e101                	bnez	a0,11ba <__DTOR_END__+0x116>
    11bc:	0901                	addi	s2,s2,0
    11be:	005d                	c.nop	23
    11c0:	0000                	unimp
    11c2:	0d24                	addi	s1,sp,664
    11c4:	0000                	unimp
    11c6:	00006933          	or	s2,zero,zero
    11ca:	7200                	flw	fs0,32(a2)
    11cc:	000d                	c.nop	3
    11ce:	3300                	fld	fs0,32(a4)
    11d0:	0069                	c.nop	26
    11d2:	0000                	unimp
    11d4:	0da0                	addi	s0,sp,728
    11d6:	0000                	unimp
    11d8:	00006933          	or	s2,zero,zero
    11dc:	ce00                	sw	s0,24(a2)
    11de:	000d                	c.nop	3
    11e0:	3300                	fld	fs0,32(a4)
    11e2:	0069                	c.nop	26
    11e4:	0000                	unimp
    11e6:	0dfc                	addi	a5,sp,732
    11e8:	0000                	unimp
    11ea:	00006933          	or	s2,zero,zero
    11ee:	2a00                	fld	fs0,16(a2)
    11f0:	000e                	c.slli	zero,0x3
    11f2:	3300                	fld	fs0,32(a4)
    11f4:	0069                	c.nop	26
    11f6:	0000                	unimp
    11f8:	0e58                	addi	a4,sp,788
    11fa:	0000                	unimp
    11fc:	00006933          	or	s2,zero,zero
    1200:	8600                	0x8600
    1202:	000e                	c.slli	zero,0x3
    1204:	2b00                	fld	fs0,16(a4)
    1206:	073c                	addi	a5,sp,904
    1208:	0000                	unimp
    120a:	1b66                	slli	s6,s6,0x39
    120c:	0000                	unimp
    120e:	1226                	slli	tp,tp,0x29
    1210:	0000                	unimp
    1212:	012c                	addi	a1,sp,136
    1214:	025a                	slli	tp,tp,0x16
    1216:	012c0083          	lb	ra,18(s8) # 4e484 <_stack_start+0x3e484>
    121a:	01f3035b          	0x1f3035b
    121e:	2c5a                	fld	fs8,400(sp)
    1220:	5c01                	li	s8,-32
    1222:	7902                	flw	fs2,32(sp)
    1224:	0000                	unimp
    1226:	0007442b          	0x7442b
    122a:	6600                	flw	fs0,8(a2)
    122c:	4600001b          	0x4600001b
    1230:	0012                	c.slli	zero,0x4
    1232:	2c00                	fld	fs0,24(s0)
    1234:	5a01                	li	s4,-32
    1236:	8402                	jr	s0
    1238:	2c00                	fld	fs0,24(s0)
    123a:	5b01                	li	s6,-32
    123c:	8b02                	jr	s6
    123e:	2c00                	fld	fs0,24(s0)
    1240:	5c01                	li	s8,-32
    1242:	7902                	flw	fs2,32(sp)
    1244:	0000                	unimp
    1246:	0007622b          	0x7622b
    124a:	0000                	unimp
    124c:	6600001b          	0x6600001b
    1250:	0012                	c.slli	zero,0x4
    1252:	2c00                	fld	fs0,24(s0)
    1254:	5a01                	li	s4,-32
    1256:	8302                	jr	t1
    1258:	2c00                	fld	fs0,24(s0)
    125a:	5b01                	li	s6,-32
    125c:	8202                	jr	tp
    125e:	2c00                	fld	fs0,24(s0)
    1260:	5c01                	li	s8,-32
    1262:	7902                	flw	fs2,32(sp)
    1264:	0000                	unimp
    1266:	00076a2b          	0x76a2b
    126a:	0000                	unimp
    126c:	8600001b          	0x8600001b
    1270:	0012                	c.slli	zero,0x4
    1272:	2c00                	fld	fs0,24(s0)
    1274:	5a01                	li	s4,-32
    1276:	8402                	jr	s0
    1278:	2c00                	fld	fs0,24(s0)
    127a:	5b01                	li	s6,-32
    127c:	8202                	jr	tp
    127e:	2c00                	fld	fs0,24(s0)
    1280:	5c01                	li	s8,-32
    1282:	7902                	flw	fs2,32(sp)
    1284:	0000                	unimp
    1286:	0007762b          	0x7762b
    128a:	c500                	sw	s0,8(a0)
    128c:	0014                	0x14
    128e:	b200                	fsd	fs0,32(a2)
    1290:	0012                	c.slli	zero,0x4
    1292:	2c00                	fld	fs0,24(s0)
    1294:	5a01                	li	s4,-32
    1296:	8302                	jr	t1
    1298:	2c00                	fld	fs0,24(s0)
    129a:	5b01                	li	s6,-32
    129c:	7902                	flw	fs2,32(sp)
    129e:	2c00                	fld	fs0,24(s0)
    12a0:	5c01                	li	s8,-32
    12a2:	8402                	jr	s0
    12a4:	2c00                	fld	fs0,24(s0)
    12a6:	5d01                	li	s10,-32
    12a8:	7902                	flw	fs2,32(sp)
    12aa:	2c00                	fld	fs0,24(s0)
    12ac:	5e01                	li	t3,-32
    12ae:	8202                	jr	tp
    12b0:	0000                	unimp
    12b2:	0007922b          	0x7922b
    12b6:	0000                	unimp
    12b8:	d200001b          	0xd200001b
    12bc:	0012                	c.slli	zero,0x4
    12be:	2c00                	fld	fs0,24(s0)
    12c0:	5a01                	li	s4,-32
    12c2:	7202                	flw	ft4,32(sp)
    12c4:	2c00                	fld	fs0,24(s0)
    12c6:	5b01                	li	s6,-32
    12c8:	8202                	jr	tp
    12ca:	2c00                	fld	fs0,24(s0)
    12cc:	5c01                	li	s8,-32
    12ce:	7902                	flw	fs2,32(sp)
    12d0:	0000                	unimp
    12d2:	00079e2b          	0x79e2b
    12d6:	c500                	sw	s0,8(a0)
    12d8:	0014                	0x14
    12da:	fe00                	fsw	fs0,56(a2)
    12dc:	0012                	c.slli	zero,0x4
    12de:	2c00                	fld	fs0,24(s0)
    12e0:	5a01                	li	s4,-32
    12e2:	7202                	flw	ft4,32(sp)
    12e4:	2c00                	fld	fs0,24(s0)
    12e6:	5b01                	li	s6,-32
    12e8:	7902                	flw	fs2,32(sp)
    12ea:	2c00                	fld	fs0,24(s0)
    12ec:	5c01                	li	s8,-32
    12ee:	8402                	jr	s0
    12f0:	2c00                	fld	fs0,24(s0)
    12f2:	5d01                	li	s10,-32
    12f4:	7902                	flw	fs2,32(sp)
    12f6:	2c00                	fld	fs0,24(s0)
    12f8:	5e01                	li	t3,-32
    12fa:	8202                	jr	tp
    12fc:	0000                	unimp
    12fe:	0007a62b          	0x7a62b
    1302:	6600                	flw	fs0,8(a2)
    1304:	1800001b          	0x1800001b
    1308:	2c000013          	li	zero,704
    130c:	5a01                	li	s4,-32
    130e:	8902                	jr	s2
    1310:	2c00                	fld	fs0,24(s0)
    1312:	5c01                	li	s8,-32
    1314:	7902                	flw	fs2,32(sp)
    1316:	0000                	unimp
    1318:	0007ae2b          	0x7ae2b
    131c:	0000                	unimp
    131e:	3800001b          	0x3800001b
    1322:	2c000013          	li	zero,704
    1326:	5a01                	li	s4,-32
    1328:	8902                	jr	s2
    132a:	2c00                	fld	fs0,24(s0)
    132c:	5b01                	li	s6,-32
    132e:	8202                	jr	tp
    1330:	2c00                	fld	fs0,24(s0)
    1332:	5c01                	li	s8,-32
    1334:	7902                	flw	fs2,32(sp)
    1336:	0000                	unimp
    1338:	0007bc2b          	0x7bc2b
    133c:	1700                	addi	s0,sp,928
    133e:	0019                	c.nop	6
    1340:	6900                	flw	fs0,16(a0)
    1342:	2c000013          	li	zero,704
    1346:	5a01                	li	s4,-32
    1348:	8902                	jr	s2
    134a:	2c00                	fld	fs0,24(s0)
    134c:	5b01                	li	s6,-32
    134e:	7902                	flw	fs2,32(sp)
    1350:	2c00                	fld	fs0,24(s0)
    1352:	5c01                	li	s8,-32
    1354:	8602                	jr	a2
    1356:	2c00                	fld	fs0,24(s0)
    1358:	5d01                	li	s10,-32
    135a:	7902                	flw	fs2,32(sp)
    135c:	2c00                	fld	fs0,24(s0)
    135e:	5e01                	li	t3,-32
    1360:	8202                	jr	tp
    1362:	2c00                	fld	fs0,24(s0)
    1364:	5f01                	li	t5,-32
    1366:	3001                	jal	b66 <generate_keys+0x286>
    1368:	2b00                	fld	fs0,16(a4)
    136a:	07c4                	addi	s1,sp,964
    136c:	0000                	unimp
    136e:	1b66                	slli	s6,s6,0x39
    1370:	0000                	unimp
    1372:	00001383          	lh	t2,0(zero) # 0 <__DYNAMIC>
    1376:	012c                	addi	a1,sp,136
    1378:	025a                	slli	tp,tp,0x16
    137a:	0072                	c.slli	zero,0x1c
    137c:	012c                	addi	a1,sp,136
    137e:	025c                	addi	a5,sp,260
    1380:	0079                	c.nop	30
    1382:	2b00                	fld	fs0,16(a4)
    1384:	07cc                	addi	a1,sp,964
    1386:	0000                	unimp
    1388:	1b00                	addi	s0,sp,432
    138a:	0000                	unimp
    138c:	000013a3          	sh	zero,7(zero) # 7 <__DYNAMIC+0x7>
    1390:	012c                	addi	a1,sp,136
    1392:	025a                	slli	tp,tp,0x16
    1394:	0072                	c.slli	zero,0x1c
    1396:	012c                	addi	a1,sp,136
    1398:	0082025b          	0x82025b
    139c:	012c                	addi	a1,sp,136
    139e:	025c                	addi	a5,sp,260
    13a0:	0079                	c.nop	30
    13a2:	2b00                	fld	fs0,16(a4)
    13a4:	07dc                	addi	a5,sp,964
    13a6:	0000                	unimp
    13a8:	1b00                	addi	s0,sp,432
    13aa:	0000                	unimp
    13ac:	000013c3          	fmadd.s	ft7,ft0,ft0,ft0,rtz
    13b0:	012c                	addi	a1,sp,136
    13b2:	025a                	slli	tp,tp,0x16
    13b4:	008a                	slli	ra,ra,0x2
    13b6:	012c                	addi	a1,sp,136
    13b8:	0082025b          	0x82025b
    13bc:	012c                	addi	a1,sp,136
    13be:	025c                	addi	a5,sp,260
    13c0:	0079                	c.nop	30
    13c2:	2b00                	fld	fs0,16(a4)
    13c4:	07e4                	addi	s1,sp,972
    13c6:	0000                	unimp
    13c8:	1b66                	slli	s6,s6,0x39
    13ca:	0000                	unimp
    13cc:	000013e3          	bnez	zero,1bd2 <random_keys+0x112>
    13d0:	012c                	addi	a1,sp,136
    13d2:	025a                	slli	tp,tp,0x16
    13d4:	012c0083          	lb	ra,18(s8)
    13d8:	0084025b          	0x84025b
    13dc:	012c                	addi	a1,sp,136
    13de:	025c                	addi	a5,sp,260
    13e0:	0079                	c.nop	30
    13e2:	2b00                	fld	fs0,16(a4)
    13e4:	07ec                	addi	a1,sp,972
    13e6:	0000                	unimp
    13e8:	1b66                	slli	s6,s6,0x39
    13ea:	0000                	unimp
    13ec:	00001403          	lh	s0,0(zero) # 0 <__DYNAMIC>
    13f0:	012c                	addi	a1,sp,136
    13f2:	025a                	slli	tp,tp,0x16
    13f4:	0084                	addi	s1,sp,64
    13f6:	012c                	addi	a1,sp,136
    13f8:	0088025b          	0x88025b
    13fc:	012c                	addi	a1,sp,136
    13fe:	025c                	addi	a5,sp,260
    1400:	0079                	c.nop	30
    1402:	2b00                	fld	fs0,16(a4)
    1404:	07f4                	addi	a3,sp,972
    1406:	0000                	unimp
    1408:	1b66                	slli	s6,s6,0x39
    140a:	0000                	unimp
    140c:	00001423          	sh	zero,8(zero) # 8 <__DYNAMIC+0x8>
    1410:	012c                	addi	a1,sp,136
    1412:	025a                	slli	tp,tp,0x16
    1414:	012c008b          	0x12c008b
    1418:	0086025b          	0x86025b
    141c:	012c                	addi	a1,sp,136
    141e:	025c                	addi	a5,sp,260
    1420:	0079                	c.nop	30
    1422:	2d00                	fld	fs0,24(a0)
    1424:	07fc                	addi	a5,sp,972
    1426:	0000                	unimp
    1428:	1b66                	slli	s6,s6,0x39
    142a:	0000                	unimp
    142c:	012c                	addi	a1,sp,136
    142e:	025a                	slli	tp,tp,0x16
    1430:	0086                	slli	ra,ra,0x1
    1432:	012c                	addi	a1,sp,136
    1434:	008a025b          	0x8a025b
    1438:	012c                	addi	a1,sp,136
    143a:	025c                	addi	a5,sp,260
    143c:	0079                	c.nop	30
    143e:	0000                	unimp
    1440:	5d09                	li	s10,-30
    1442:	0000                	unimp
    1444:	5300                	lw	s0,32(a4)
    1446:	0014                	0x14
    1448:	3400                	fld	fs0,40(s0)
    144a:	0069                	c.nop	26
    144c:	0000                	unimp
    144e:	11c6                	slli	gp,gp,0x31
    1450:	0000                	unimp
    1452:	0900                	addi	s0,sp,144
    1454:	005d                	c.nop	23
    1456:	0000                	unimp
    1458:	1466                	slli	s0,s0,0x39
    145a:	0000                	unimp
    145c:	6934                	flw	fa3,80(a0)
    145e:	0000                	unimp
    1460:	cf00                	sw	s0,24(a4)
    1462:	0011                	c.nop	4
    1464:	0000                	unimp
    1466:	5d09                	li	s10,-30
    1468:	0000                	unimp
    146a:	7900                	flw	fs0,48(a0)
    146c:	0014                	0x14
    146e:	3400                	fld	fs0,40(s0)
    1470:	0069                	c.nop	26
    1472:	0000                	unimp
    1474:	11d8                	addi	a4,sp,228
    1476:	0000                	unimp
    1478:	0900                	addi	s0,sp,144
    147a:	005d                	c.nop	23
    147c:	0000                	unimp
    147e:	148c                	addi	a1,sp,608
    1480:	0000                	unimp
    1482:	6934                	flw	fa3,80(a0)
    1484:	0000                	unimp
    1486:	e100                	fsw	fs0,0(a0)
    1488:	0011                	c.nop	4
    148a:	0000                	unimp
    148c:	5d09                	li	s10,-30
    148e:	0000                	unimp
    1490:	9f00                	0x9f00
    1492:	0014                	0x14
    1494:	3400                	fld	fs0,40(s0)
    1496:	0069                	c.nop	26
    1498:	0000                	unimp
    149a:	11ea                	slli	gp,gp,0x3a
    149c:	0000                	unimp
    149e:	0900                	addi	s0,sp,144
    14a0:	005d                	c.nop	23
    14a2:	0000                	unimp
    14a4:	14b2                	slli	s1,s1,0x2c
    14a6:	0000                	unimp
    14a8:	6934                	flw	fa3,80(a0)
    14aa:	0000                	unimp
    14ac:	f300                	fsw	fs0,32(a4)
    14ae:	0011                	c.nop	4
    14b0:	0000                	unimp
    14b2:	5d09                	li	s10,-30
    14b4:	0000                	unimp
    14b6:	c500                	sw	s0,8(a0)
    14b8:	0014                	0x14
    14ba:	3400                	fld	fs0,40(s0)
    14bc:	0069                	c.nop	26
    14be:	0000                	unimp
    14c0:	11fc                	addi	a5,sp,236
    14c2:	0000                	unimp
    14c4:	3500                	fld	fs0,40(a0)
    14c6:	0180                	addi	s0,sp,192
    14c8:	0000                	unimp
    14ca:	f401                	bnez	s0,13d2 <_bss_start+0x1aa>
    14cc:	6306                	flw	ft6,64(sp)
    14ce:	fc00000b          	0xfc00000b
    14d2:	0004                	0x4
    14d4:	d000                	sw	s0,32(s0)
    14d6:	0001                	nop
    14d8:	0100                	addi	s0,sp,128
    14da:	529c                	lw	a5,32(a3)
    14dc:	36000017          	auipc	zero,0x36000
    14e0:	756e                	flw	fa0,248(sp)
    14e2:	006d                	c.nop	27
    14e4:	f401                	bnez	s0,13ec <_bss_start+0x1c4>
    14e6:	000b6313          	ori	t1,s6,0
    14ea:	b400                	fsd	fs0,40(s0)
    14ec:	000e                	c.slli	zero,0x3
    14ee:	3700                	fld	fs0,40(a4)
    14f0:	00fc                	addi	a5,sp,76
    14f2:	0000                	unimp
    14f4:	f401                	bnez	s0,13fc <_bss_start+0x1d4>
    14f6:	5d1c                	lw	a5,56(a0)
    14f8:	0000                	unimp
    14fa:	e000                	fsw	fs0,0(s0)
    14fc:	000e                	c.slli	zero,0x3
    14fe:	3700                	fld	fs0,40(a4)
    1500:	0654                	addi	a3,sp,772
    1502:	0000                	unimp
    1504:	f401                	bnez	s0,140c <_bss_start+0x1e4>
    1506:	6328                	flw	fa0,64(a4)
    1508:	3100000b          	0x3100000b
    150c:	3700000f          	0x3700000f
    1510:	06cc                	addi	a1,sp,836
    1512:	0000                	unimp
    1514:	f401                	bnez	s0,141c <_bss_start+0x1f4>
    1516:	00005d33          	srl	s10,zero,zero
    151a:	7600                	flw	fs0,40(a2)
    151c:	3600000f          	0x3600000f
    1520:	6f6d                	lui	t5,0x1b
    1522:	0064                	addi	s1,sp,12
    1524:	f401                	bnez	s0,142c <_bss_start+0x204>
    1526:	00005d3f 000fad00 	0xfad0000005d3f
    152e:	3800                	fld	fs0,48(s0)
    1530:	0075                	c.nop	29
    1532:	f601                	bnez	a2,143a <_bss_start+0x212>
    1534:	5d09                	li	s10,-30
    1536:	0000                	unimp
    1538:	e400                	fsw	fs0,8(s0)
    153a:	3800000f          	0x3800000f
    153e:	0064                	addi	s1,sp,12
    1540:	f601                	bnez	a2,1448 <_bss_start+0x220>
    1542:	00005d0b          	0x5d0b
    1546:	0d00                	addi	s0,sp,656
    1548:	0010                	0x10
    154a:	3900                	fld	fs0,48(a0)
    154c:	3264                	fld	fs1,224(a2)
    154e:	0100                	addi	s0,sp,128
    1550:	0df6                	slli	s11,s11,0x1d
    1552:	005d                	c.nop	23
    1554:	0000                	unimp
    1556:	6938                	flw	fa4,80(a0)
    1558:	0100                	addi	s0,sp,128
    155a:	10f6                	slli	ra,ra,0x3d
    155c:	005d                	c.nop	23
    155e:	0000                	unimp
    1560:	0000102b          	0x102b
    1564:	6239                	lui	tp,0xe
    1566:	4e5f 0100 12f6      	0x12f601004e5f
    156c:	005d                	c.nop	23
    156e:	0000                	unimp
    1570:	7238                	flw	fa4,96(a2)
    1572:	645f 0100 16f6      	0x16f60100645f
    1578:	005d                	c.nop	23
    157a:	0000                	unimp
    157c:	0000110b          	0x110b
    1580:	803a                	c.mv	zero,a4
    1582:	0002                	c.slli64	zero
    1584:	0100                	addi	s0,sp,128
    1586:	0b630af7          	0xb630af7
    158a:	0000                	unimp
    158c:	1129                	addi	sp,sp,-22
    158e:	0000                	unimp
    1590:	7638                	flw	fa4,104(a2)
    1592:	0100                	addi	s0,sp,128
    1594:	09f9                	addi	s3,s3,30
    1596:	1752                	slli	a4,a4,0x34
    1598:	0000                	unimp
    159a:	1141                	addi	sp,sp,-16
    159c:	0000                	unimp
    159e:	7138                	flw	fa4,96(a0)
    15a0:	0100                	addi	s0,sp,128
    15a2:	09fa                	slli	s3,s3,0x1e
    15a4:	1765                	addi	a4,a4,-7
    15a6:	0000                	unimp
    15a8:	1161                	addi	sp,sp,-8
    15aa:	0000                	unimp
    15ac:	783a                	flw	fa6,172(sp)
    15ae:	0001                	nop
    15b0:	0100                	addi	s0,sp,128
    15b2:	0b630afb          	0xb630afb
    15b6:	0000                	unimp
    15b8:	1181                	addi	gp,gp,-32
    15ba:	0000                	unimp
    15bc:	223a                	fld	ft4,392(sp)
    15be:	0002                	c.slli64	zero
    15c0:	0100                	addi	s0,sp,128
    15c2:	09fc                	addi	a5,sp,220
    15c4:	1778                	addi	a4,sp,940
    15c6:	0000                	unimp
    15c8:	119f 0000 203a      	0x203a0000119f
    15ce:	0002                	c.slli64	zero
    15d0:	0100                	addi	s0,sp,128
    15d2:	09fd                	addi	s3,s3,31
    15d4:	0000178b          	0x178b
    15d8:	000011eb          	0x11eb
    15dc:	00006933          	or	s2,zero,zero
    15e0:	2300                	fld	fs0,0(a4)
    15e2:	0012                	c.slli	zero,0x4
    15e4:	3300                	fld	fs0,32(a4)
    15e6:	0069                	c.nop	26
    15e8:	0000                	unimp
    15ea:	1251                	addi	tp,tp,-12
    15ec:	0000                	unimp
    15ee:	00006933          	or	s2,zero,zero
    15f2:	7f00                	flw	fs0,56(a4)
    15f4:	0012                	c.slli	zero,0x4
    15f6:	3300                	fld	fs0,32(a4)
    15f8:	0069                	c.nop	26
    15fa:	0000                	unimp
    15fc:	12ad                	addi	t0,t0,-21
    15fe:	0000                	unimp
    1600:	0005582b          	0x5582b
    1604:	6600                	flw	fs0,8(a2)
    1606:	2100001b          	0x2100001b
    160a:	0016                	c.slli	zero,0x5
    160c:	2c00                	fld	fs0,24(s0)
    160e:	5a01                	li	s4,-32
    1610:	8202                	jr	tp
    1612:	2c00                	fld	fs0,24(s0)
    1614:	5b01                	li	s6,-32
    1616:	5a01f303          	0x5a01f303
    161a:	012c                	addi	a1,sp,136
    161c:	025c                	addi	a5,sp,260
    161e:	0079                	c.nop	30
    1620:	2b00                	fld	fs0,16(a4)
    1622:	0560                	addi	s0,sp,652
    1624:	0000                	unimp
    1626:	1b00                	addi	s0,sp,432
    1628:	0000                	unimp
    162a:	1641                	addi	a2,a2,-16
    162c:	0000                	unimp
    162e:	012c                	addi	a1,sp,136
    1630:	025a                	slli	tp,tp,0x16
    1632:	0082                	c.slli64	ra
    1634:	012c                	addi	a1,sp,136
    1636:	0083025b          	0x83025b
    163a:	012c                	addi	a1,sp,136
    163c:	025c                	addi	a5,sp,260
    163e:	0079                	c.nop	30
    1640:	2b00                	fld	fs0,16(a4)
    1642:	056a                	slli	a0,a0,0x1a
    1644:	0000                	unimp
    1646:	1b66                	slli	s6,s6,0x39
    1648:	0000                	unimp
    164a:	1661                	addi	a2,a2,-8
    164c:	0000                	unimp
    164e:	012c                	addi	a1,sp,136
    1650:	025a                	slli	tp,tp,0x16
    1652:	0089                	addi	ra,ra,2
    1654:	012c                	addi	a1,sp,136
    1656:	0088025b          	0x88025b
    165a:	012c                	addi	a1,sp,136
    165c:	025c                	addi	a5,sp,260
    165e:	0084                	addi	s1,sp,64
    1660:	2b00                	fld	fs0,16(a4)
    1662:	0572                	slli	a0,a0,0x1c
    1664:	0000                	unimp
    1666:	1b00                	addi	s0,sp,432
    1668:	0000                	unimp
    166a:	1681                	addi	a3,a3,-32
    166c:	0000                	unimp
    166e:	012c                	addi	a1,sp,136
    1670:	025a                	slli	tp,tp,0x16
    1672:	0089                	addi	ra,ra,2
    1674:	012c                	addi	a1,sp,136
    1676:	0083025b          	0x83025b
    167a:	012c                	addi	a1,sp,136
    167c:	025c                	addi	a5,sp,260
    167e:	0084                	addi	s1,sp,64
    1680:	2b00                	fld	fs0,16(a4)
    1682:	05de                	slli	a1,a1,0x17
    1684:	0000                	unimp
    1686:	1b66                	slli	s6,s6,0x39
    1688:	0000                	unimp
    168a:	16a4                	addi	s1,sp,872
    168c:	0000                	unimp
    168e:	012c                	addi	a1,sp,136
    1690:	055a                	slli	a0,a0,0x16
    1692:	0016d803          	lhu	a6,1(a3)
    1696:	2c00                	fld	fs0,24(s0)
    1698:	5b01                	li	s6,-32
    169a:	8702                	jr	a4
    169c:	2c00                	fld	fs0,24(s0)
    169e:	5c01                	li	s8,-32
    16a0:	7902                	flw	fs2,32(sp)
    16a2:	0000                	unimp
    16a4:	00062e2b          	0x62e2b
    16a8:	0000                	unimp
    16aa:	c400001b          	0xc400001b
    16ae:	0016                	c.slli	zero,0x5
    16b0:	2c00                	fld	fs0,24(s0)
    16b2:	5a01                	li	s4,-32
    16b4:	8602                	jr	a2
    16b6:	2c00                	fld	fs0,24(s0)
    16b8:	5b01                	li	s6,-32
    16ba:	8302                	jr	t1
    16bc:	2c00                	fld	fs0,24(s0)
    16be:	5c01                	li	s8,-32
    16c0:	7902                	flw	fs2,32(sp)
    16c2:	0000                	unimp
    16c4:	00063c2b          	0x63c2b
    16c8:	1700                	addi	s0,sp,928
    16ca:	0019                	c.nop	6
    16cc:	f500                	fsw	fs0,40(a0)
    16ce:	0016                	c.slli	zero,0x5
    16d0:	2c00                	fld	fs0,24(s0)
    16d2:	5a01                	li	s4,-32
    16d4:	7202                	flw	ft4,32(sp)
    16d6:	2c00                	fld	fs0,24(s0)
    16d8:	5b01                	li	s6,-32
    16da:	8402                	jr	s0
    16dc:	2c00                	fld	fs0,24(s0)
    16de:	5c01                	li	s8,-32
    16e0:	8602                	jr	a2
    16e2:	2c00                	fld	fs0,24(s0)
    16e4:	5d01                	li	s10,-32
    16e6:	8402                	jr	s0
    16e8:	2c00                	fld	fs0,24(s0)
    16ea:	5e01                	li	t3,-32
    16ec:	8302                	jr	t1
    16ee:	2c00                	fld	fs0,24(s0)
    16f0:	5f01                	li	t5,-32
    16f2:	3001                	jal	ef2 <memcpy+0xdc>
    16f4:	2b00                	fld	fs0,16(a4)
    16f6:	0644                	addi	s1,sp,772
    16f8:	0000                	unimp
    16fa:	1b00                	addi	s0,sp,432
    16fc:	0000                	unimp
    16fe:	1715                	addi	a4,a4,-27
    1700:	0000                	unimp
    1702:	012c                	addi	a1,sp,136
    1704:	025a                	slli	tp,tp,0x16
    1706:	012c008b          	0x12c008b
    170a:	0083025b          	0x83025b
    170e:	012c                	addi	a1,sp,136
    1710:	025c                	addi	a5,sp,260
    1712:	0079                	c.nop	30
    1714:	2b00                	fld	fs0,16(a4)
    1716:	0654                	addi	a3,sp,772
    1718:	0000                	unimp
    171a:	1b00                	addi	s0,sp,432
    171c:	0000                	unimp
    171e:	1735                	addi	a4,a4,-19
    1720:	0000                	unimp
    1722:	012c                	addi	a1,sp,136
    1724:	025a                	slli	tp,tp,0x16
    1726:	0082                	c.slli64	ra
    1728:	012c                	addi	a1,sp,136
    172a:	0083025b          	0x83025b
    172e:	012c                	addi	a1,sp,136
    1730:	025c                	addi	a5,sp,260
    1732:	0079                	c.nop	30
    1734:	2d00                	fld	fs0,24(a0)
    1736:	0664                	addi	s1,sp,780
    1738:	0000                	unimp
    173a:	1b00                	addi	s0,sp,432
    173c:	0000                	unimp
    173e:	012c                	addi	a1,sp,136
    1740:	025a                	slli	tp,tp,0x16
    1742:	012c0087          	0x12c0087
    1746:	0083025b          	0x83025b
    174a:	012c                	addi	a1,sp,136
    174c:	025c                	addi	a5,sp,260
    174e:	0079                	c.nop	30
    1750:	0000                	unimp
    1752:	5d09                	li	s10,-30
    1754:	0000                	unimp
    1756:	6500                	flw	fs0,8(a0)
    1758:	34000017          	auipc	zero,0x34000
    175c:	0069                	c.nop	26
    175e:	0000                	unimp
    1760:	15dc                	addi	a5,sp,740
    1762:	0000                	unimp
    1764:	0900                	addi	s0,sp,144
    1766:	005d                	c.nop	23
    1768:	0000                	unimp
    176a:	1778                	addi	a4,sp,940
    176c:	0000                	unimp
    176e:	6934                	flw	fa3,80(a0)
    1770:	0000                	unimp
    1772:	e500                	fsw	fs0,8(a0)
    1774:	0015                	c.nop	5
    1776:	0000                	unimp
    1778:	5d09                	li	s10,-30
    177a:	0000                	unimp
    177c:	8b00                	0x8b00
    177e:	34000017          	auipc	zero,0x34000
    1782:	0069                	c.nop	26
    1784:	0000                	unimp
    1786:	15ee                	slli	a1,a1,0x3b
    1788:	0000                	unimp
    178a:	0900                	addi	s0,sp,144
    178c:	005d                	c.nop	23
    178e:	0000                	unimp
    1790:	179e                	slli	a5,a5,0x27
    1792:	0000                	unimp
    1794:	6934                	flw	fa3,80(a0)
    1796:	0000                	unimp
    1798:	f700                	fsw	fs0,40(a4)
    179a:	0015                	c.nop	5
    179c:	0000                	unimp
    179e:	2a35                	jal	18da <result+0x202>
    17a0:	0000                	unimp
    17a2:	0100                	addi	s0,sp,128
    17a4:	06bc                	addi	a5,sp,840
    17a6:	00000b63          	beqz	zero,17bc <result+0xe4>
    17aa:	038c                	addi	a1,sp,448
    17ac:	0000                	unimp
    17ae:	0170                	addi	a2,sp,140
    17b0:	0000                	unimp
    17b2:	9c01                	0x9c01
    17b4:	18d5                	addi	a7,a7,-11
    17b6:	0000                	unimp
    17b8:	6136                	flw	ft2,76(sp)
    17ba:	0100                	addi	s0,sp,128
    17bc:	15bc                	addi	a5,sp,744
    17be:	00000b63          	beqz	zero,17d4 <result+0xfc>
    17c2:	1302                	slli	t1,t1,0x20
    17c4:	0000                	unimp
    17c6:	00071b37          	lui	s6,0x71
    17ca:	0100                	addi	s0,sp,128
    17cc:	1cbc                	addi	a5,sp,632
    17ce:	005d                	c.nop	23
    17d0:	0000                	unimp
    17d2:	00001347          	fmsub.s	ft6,ft0,ft0,ft0,rtz
    17d6:	6236                	flw	ft4,76(sp)
    17d8:	0100                	addi	s0,sp,128
    17da:	29bc                	fld	fa5,80(a1)
    17dc:	00000b63          	beqz	zero,17f2 <result+0x11a>
    17e0:	1398                	addi	a4,sp,480
    17e2:	0000                	unimp
    17e4:	00072237          	lui	tp,0x72
    17e8:	0100                	addi	s0,sp,128
    17ea:	30bc                	fld	fa5,96(s1)
    17ec:	005d                	c.nop	23
    17ee:	0000                	unimp
    17f0:	13e8                	addi	a0,sp,492
    17f2:	0000                	unimp
    17f4:	0004f337          	lui	t1,0x4f
    17f8:	0100                	addi	s0,sp,128
    17fa:	3cbc                	fld	fa5,120(s1)
    17fc:	005d                	c.nop	23
    17fe:	0000                	unimp
    1800:	1414                	addi	a3,sp,544
    1802:	0000                	unimp
    1804:	103a                	c.slli	zero,0x2e
    1806:	0006                	c.slli	zero,0x1
    1808:	0100                	addi	s0,sp,128
    180a:	09be                	slli	s3,s3,0xf
    180c:	18d5                	addi	a7,a7,-11
    180e:	0000                	unimp
    1810:	1440                	addi	s0,sp,548
    1812:	0000                	unimp
    1814:	6938                	flw	fa4,80(a0)
    1816:	0100                	addi	s0,sp,128
    1818:	005d09bf 14840000 	0x14840000005d09bf
    1820:	0000                	unimp
    1822:	6a38                	flw	fa4,80(a2)
    1824:	0100                	addi	s0,sp,128
    1826:	005d0bbf 14c40000 	0x14c40000005d0bbf
    182e:	0000                	unimp
    1830:	6b38                	flw	fa4,80(a4)
    1832:	0100                	addi	s0,sp,128
    1834:	005d0dbf 151b0000 	0x151b0000005d0dbf
    183c:	0000                	unimp
    183e:	7022                	flw	ft0,40(sp)
    1840:	0002                	c.slli64	zero
    1842:	0100                	addi	s0,sp,128
    1844:	0ac0                	addi	s0,sp,340
    1846:	00000b63          	beqz	zero,185c <result+0x184>
    184a:	0306                	slli	t1,t1,0x1
    184c:	1480                	addi	s0,sp,608
    184e:	0000                	unimp
    1850:	3a9f 000c 0000      	0xc3a9f
    1856:	c101                	beqz	a0,1856 <result+0x17e>
    1858:	f109                	bnez	a0,175a <result+0x82>
    185a:	0018                	0x18
    185c:	6900                	flw	fs0,16(a0)
    185e:	0015                	c.nop	5
    1860:	3a00                	fld	fs0,48(a2)
    1862:	036a                	slli	t1,t1,0x1a
    1864:	0000                	unimp
    1866:	c201                	beqz	a2,1866 <result+0x18e>
    1868:	0409                	addi	s0,s0,2
    186a:	0019                	c.nop	6
    186c:	7d00                	flw	fs0,56(a0)
    186e:	0015                	c.nop	5
    1870:	3300                	fld	fs0,32(a4)
    1872:	0069                	c.nop	26
    1874:	0000                	unimp
    1876:	15ca                	slli	a1,a1,0x32
    1878:	0000                	unimp
    187a:	00006933          	or	s2,zero,zero
    187e:	1200                	addi	s0,sp,288
    1880:	0016                	c.slli	zero,0x5
    1882:	3300                	fld	fs0,32(a4)
    1884:	0069                	c.nop	26
    1886:	0000                	unimp
    1888:	164a                	slli	a2,a2,0x32
    188a:	0000                	unimp
    188c:	00006933          	or	s2,zero,zero
    1890:	6d00                	flw	fs0,24(a0)
    1892:	0016                	c.slli	zero,0x5
    1894:	2b00                	fld	fs0,16(a4)
    1896:	040e                	slli	s0,s0,0x3
    1898:	0000                	unimp
    189a:	1b66                	slli	s6,s6,0x39
    189c:	0000                	unimp
    189e:	18b6                	slli	a7,a7,0x2d
    18a0:	0000                	unimp
    18a2:	012c                	addi	a1,sp,136
    18a4:	025a                	slli	tp,tp,0x16
    18a6:	008a                	slli	ra,ra,0x2
    18a8:	012c                	addi	a1,sp,136
    18aa:	01f3035b          	0x1f3035b
    18ae:	2c5a                	fld	fs8,400(sp)
    18b0:	5c01                	li	s8,-32
    18b2:	8802                	jr	a6
    18b4:	0001                	nop
    18b6:	1a2d                	addi	s4,s4,-21
    18b8:	0004                	0x4
    18ba:	6600                	flw	fs0,8(a2)
    18bc:	2c00001b          	0x2c00001b
    18c0:	5a01                	li	s4,-32
    18c2:	7202                	flw	ft4,32(sp)
    18c4:	2c00                	fld	fs0,24(s0)
    18c6:	5b01                	li	s6,-32
    18c8:	7804                	flw	fs1,48(s0)
    18ca:	7fbc                	flw	fa5,120(a5)
    18cc:	2c06                	fld	fs8,64(sp)
    18ce:	5c01                	li	s8,-32
    18d0:	8302                	jr	t1
    18d2:	0000                	unimp
    18d4:	0900                	addi	s0,sp,144
    18d6:	005d                	c.nop	23
    18d8:	0000                	unimp
    18da:	18f1                	addi	a7,a7,-4
    18dc:	0000                	unimp
    18de:	6934                	flw	fa3,80(a0)
    18e0:	0000                	unimp
    18e2:	7100                	flw	fs0,32(a0)
    18e4:	0018                	0x18
    18e6:	3400                	fld	fs0,40(s0)
    18e8:	0069                	c.nop	26
    18ea:	0000                	unimp
    18ec:	187a                	slli	a6,a6,0x3e
    18ee:	0000                	unimp
    18f0:	0900                	addi	s0,sp,144
    18f2:	005d                	c.nop	23
    18f4:	0000                	unimp
    18f6:	1904                	addi	s1,sp,176
    18f8:	0000                	unimp
    18fa:	6934                	flw	fa3,80(a0)
    18fc:	0000                	unimp
    18fe:	8300                	0x8300
    1900:	0018                	0x18
    1902:	0000                	unimp
    1904:	5d09                	li	s10,-30
    1906:	0000                	unimp
    1908:	1700                	addi	s0,sp,928
    190a:	0019                	c.nop	6
    190c:	3400                	fld	fs0,40(s0)
    190e:	0069                	c.nop	26
    1910:	0000                	unimp
    1912:	188c                	addi	a1,sp,112
    1914:	0000                	unimp
    1916:	3500                	fld	fs0,40(a0)
    1918:	010d                	addi	sp,sp,3
    191a:	0000                	unimp
    191c:	6b01                	0x6b01
    191e:	6306                	flw	ft6,64(sp)
    1920:	ba00000b          	0xba00000b
    1924:	0001                	nop
    1926:	d200                	sw	s0,32(a2)
    1928:	0001                	nop
    192a:	0100                	addi	s0,sp,128
    192c:	be9c                	fsd	fa5,56(a3)
    192e:	001a                	c.slli	zero,0x6
    1930:	3600                	fld	fs0,40(a2)
    1932:	0061                	c.nop	24
    1934:	6b01                	0x6b01
    1936:	6314                	flw	fa3,0(a4)
    1938:	b500000b          	0xb500000b
    193c:	0016                	c.slli	zero,0x5
    193e:	3700                	fld	fs0,40(a4)
    1940:	0000071b          	0x71b
    1944:	6b01                	0x6b01
    1946:	00005d1b          	0x5d1b
    194a:	fa00                	fsw	fs0,48(a2)
    194c:	0016                	c.slli	zero,0x5
    194e:	3600                	fld	fs0,40(a2)
    1950:	0062                	c.slli	zero,0x18
    1952:	6b01                	0x6b01
    1954:	6328                	flw	fa0,64(a4)
    1956:	3400000b          	0x3400000b
    195a:	37000017          	auipc	zero,0x37000
    195e:	0722                	slli	a4,a4,0x8
    1960:	0000                	unimp
    1962:	6b01                	0x6b01
    1964:	00005d2f          	0x5d2f
    1968:	8400                	0x8400
    196a:	36000017          	auipc	zero,0x36000
    196e:	6f6d                	lui	t5,0x1b
    1970:	0064                	addi	s1,sp,12
    1972:	6b01                	0x6b01
    1974:	00005d3b          	0x5d3b
    1978:	bb00                	fsd	fs0,48(a4)
    197a:	37000017          	auipc	zero,0x37000
    197e:	000004f3          	0x4f3
    1982:	6b01                	0x6b01
    1984:	5d44                	lw	s1,60(a0)
    1986:	0000                	unimp
    1988:	f200                	fsw	fs0,32(a2)
    198a:	3a000017          	auipc	zero,0x3a000
    198e:	0610                	addi	a2,sp,768
    1990:	0000                	unimp
    1992:	6e01                	0x6e01
    1994:	be09                	j	14a6 <product2+0x26>
    1996:	001a                	c.slli	zero,0x6
    1998:	5000                	lw	s0,32(s0)
    199a:	0018                	0x18
    199c:	3800                	fld	fs0,48(s0)
    199e:	0069                	c.nop	26
    19a0:	6f01                	0x6f01
    19a2:	5d09                	li	s10,-30
    19a4:	0000                	unimp
    19a6:	ae00                	fsd	fs0,24(a2)
    19a8:	0018                	0x18
    19aa:	3800                	fld	fs0,48(s0)
    19ac:	006a                	c.slli	zero,0x1a
    19ae:	6f01                	0x6f01
    19b0:	00005d0b          	0x5d0b
    19b4:	1100                	addi	s0,sp,160
    19b6:	0019                	c.nop	6
    19b8:	3800                	fld	fs0,48(s0)
    19ba:	6f01006b          	0x6f01006b
    19be:	5d0d                	li	s10,-29
    19c0:	0000                	unimp
    19c2:	7e00                	flw	fs0,56(a2)
    19c4:	0019                	c.nop	6
    19c6:	3a00                	fld	fs0,48(a2)
    19c8:	0260                	addi	s0,sp,268
    19ca:	0000                	unimp
    19cc:	7001                	c.lui	zero,0xfffe0
    19ce:	630a                	flw	ft6,128(sp)
    19d0:	cc00000b          	0xcc00000b
    19d4:	0019                	c.nop	6
    19d6:	3a00                	fld	fs0,48(a2)
    19d8:	000c                	0xc
    19da:	0000                	unimp
    19dc:	7101                	addi	sp,sp,-512
    19de:	da09                	beqz	a2,18f0 <result+0x218>
    19e0:	001a                	c.slli	zero,0x6
    19e2:	e400                	fsw	fs0,8(s0)
    19e4:	0019                	c.nop	6
    19e6:	3a00                	fld	fs0,48(a2)
    19e8:	036a                	slli	t1,t1,0x1a
    19ea:	0000                	unimp
    19ec:	7201                	lui	tp,0xfffe0
    19ee:	ed09                	bnez	a0,1a08 <ti_2+0xd8>
    19f0:	001a                	c.slli	zero,0x6
    19f2:	2000                	fld	fs0,0(s0)
    19f4:	001a                	c.slli	zero,0x6
    19f6:	3300                	fld	fs0,32(a4)
    19f8:	0069                	c.nop	26
    19fa:	0000                	unimp
    19fc:	1a94                	addi	a3,sp,368
    19fe:	0000                	unimp
    1a00:	00006933          	or	s2,zero,zero
    1a04:	e900                	fsw	fs0,16(a0)
    1a06:	001a                	c.slli	zero,0x6
    1a08:	3300                	fld	fs0,32(a4)
    1a0a:	0069                	c.nop	26
    1a0c:	0000                	unimp
    1a0e:	1b1a                	slli	s6,s6,0x26
    1a10:	0000                	unimp
    1a12:	00006933          	or	s2,zero,zero
    1a16:	5f00                	lw	s0,56(a4)
    1a18:	2b00001b          	0x2b00001b
    1a1c:	024c                	addi	a1,sp,260
    1a1e:	0000                	unimp
    1a20:	1b66                	slli	s6,s6,0x39
    1a22:	0000                	unimp
    1a24:	1a3c                	addi	a5,sp,312
    1a26:	0000                	unimp
    1a28:	012c                	addi	a1,sp,136
    1a2a:	025a                	slli	tp,tp,0x16
    1a2c:	012c008b          	0x12c008b
    1a30:	01f3035b          	0x1f3035b
    1a34:	2c5a                	fld	fs8,400(sp)
    1a36:	5c01                	li	s8,-32
    1a38:	8502                	jr	a0
    1a3a:	0000                	unimp
    1a3c:	0002542b          	0x2542b
    1a40:	0000                	unimp
    1a42:	5c00001b          	0x5c00001b
    1a46:	001a                	c.slli	zero,0x6
    1a48:	2c00                	fld	fs0,24(s0)
    1a4a:	5a01                	li	s4,-32
    1a4c:	8b02                	jr	s6
    1a4e:	2c00                	fld	fs0,24(s0)
    1a50:	5b01                	li	s6,-32
    1a52:	8402                	jr	s0
    1a54:	2c00                	fld	fs0,24(s0)
    1a56:	5c01                	li	s8,-32
    1a58:	8502                	jr	a0
    1a5a:	0000                	unimp
    1a5c:	0002602b          	0x2602b
    1a60:	6600                	flw	fs0,8(a2)
    1a62:	7e00001b          	0x7e00001b
    1a66:	001a                	c.slli	zero,0x6
    1a68:	2c00                	fld	fs0,24(s0)
    1a6a:	5a01                	li	s4,-32
    1a6c:	7202                	flw	ft4,32(sp)
    1a6e:	2c00                	fld	fs0,24(s0)
    1a70:	5b01                	li	s6,-32
    1a72:	7804                	flw	fs1,48(s0)
    1a74:	7fb4                	flw	fa3,120(a5)
    1a76:	2c06                	fld	fs8,64(sp)
    1a78:	5c01                	li	s8,-32
    1a7a:	8202                	jr	tp
    1a7c:	0000                	unimp
    1a7e:	0002682b          	0x2682b
    1a82:	0000                	unimp
    1a84:	9e00001b          	0x9e00001b
    1a88:	001a                	c.slli	zero,0x6
    1a8a:	2c00                	fld	fs0,24(s0)
    1a8c:	5a01                	li	s4,-32
    1a8e:	7202                	flw	ft4,32(sp)
    1a90:	2c00                	fld	fs0,24(s0)
    1a92:	5b01                	li	s6,-32
    1a94:	8402                	jr	s0
    1a96:	2c00                	fld	fs0,24(s0)
    1a98:	5c01                	li	s8,-32
    1a9a:	8202                	jr	tp
    1a9c:	0000                	unimp
    1a9e:	d62d                	beqz	a2,1a08 <ti_2+0xd8>
    1aa0:	0002                	c.slli64	zero
    1aa2:	0000                	unimp
    1aa4:	2c00001b          	0x2c00001b
    1aa8:	5a01                	li	s4,-32
    1aaa:	0305                	addi	t1,t1,1
    1aac:	1228                	addi	a0,sp,296
    1aae:	0000                	unimp
    1ab0:	012c                	addi	a1,sp,136
    1ab2:	0084025b          	0x84025b
    1ab6:	012c                	addi	a1,sp,136
    1ab8:	025c                	addi	a5,sp,260
    1aba:	0089                	addi	ra,ra,2
    1abc:	0000                	unimp
    1abe:	5d09                	li	s10,-30
    1ac0:	0000                	unimp
    1ac2:	da00                	sw	s0,48(a2)
    1ac4:	001a                	c.slli	zero,0x6
    1ac6:	3400                	fld	fs0,40(s0)
    1ac8:	0069                	c.nop	26
    1aca:	0000                	unimp
    1acc:	000019f7          	0x19f7
    1ad0:	6934                	flw	fa3,80(a0)
    1ad2:	0000                	unimp
    1ad4:	0000                	unimp
    1ad6:	001a                	c.slli	zero,0x6
    1ad8:	0000                	unimp
    1ada:	5d09                	li	s10,-30
    1adc:	0000                	unimp
    1ade:	ed00                	fsw	fs0,24(a0)
    1ae0:	001a                	c.slli	zero,0x6
    1ae2:	3400                	fld	fs0,40(s0)
    1ae4:	0069                	c.nop	26
    1ae6:	0000                	unimp
    1ae8:	1a09                	addi	s4,s4,-30
    1aea:	0000                	unimp
    1aec:	0900                	addi	s0,sp,144
    1aee:	005d                	c.nop	23
    1af0:	0000                	unimp
    1af2:	1b00                	addi	s0,sp,432
    1af4:	0000                	unimp
    1af6:	6934                	flw	fa3,80(a0)
    1af8:	0000                	unimp
    1afa:	1200                	addi	s0,sp,288
    1afc:	001a                	c.slli	zero,0x6
    1afe:	0000                	unimp
    1b00:	0005413b          	0x5413b
    1b04:	0100                	addi	s0,sp,128
    1b06:	064a                	slli	a2,a2,0x12
    1b08:	3b01                	jal	1818 <result+0x140>
    1b0a:	3c00001b          	0x3c00001b
    1b0e:	3161                	jal	1796 <result+0xbe>
    1b10:	0100                	addi	s0,sp,128
    1b12:	154a                	slli	a0,a0,0x32
    1b14:	00000b63          	beqz	zero,1b2a <random_keys+0x6a>
    1b18:	6d3c                	flw	fa5,88(a0)
    1b1a:	0100646f          	jal	s0,7b2a <_stack_len+0x3b2a>
    1b1e:	1d4a                	slli	s10,s10,0x32
    1b20:	005d                	c.nop	23
    1b22:	0000                	unimp
    1b24:	263d                	jal	1e52 <random_keys+0x392>
    1b26:	0005                	c.nop	1
    1b28:	0100                	addi	s0,sp,128
    1b2a:	254a                	fld	fa0,144(sp)
    1b2c:	005d                	c.nop	23
    1b2e:	0000                	unimp
    1b30:	6939                	lui	s2,0xe
    1b32:	0100                	addi	s0,sp,128
    1b34:	005d054f          	fnmadd.s	fa0,fs10,ft5,ft0,rne
    1b38:	0000                	unimp
    1b3a:	3b00                	fld	fs0,48(a4)
    1b3c:	00000103          	lb	sp,0(zero) # 0 <__DYNAMIC>
    1b40:	3c01                	jal	1550 <product2+0xd0>
    1b42:	0106                	slli	sp,sp,0x1
    1b44:	1b60                	addi	s0,sp,444
    1b46:	0000                	unimp
    1b48:	613c                	flw	fa5,64(a0)
    1b4a:	0031                	c.nop	12
    1b4c:	3c01                	jal	155c <product2+0xdc>
    1b4e:	601e                	flw	ft0,196(sp)
    1b50:	3c00001b          	0x3c00001b
    1b54:	6f6d                	lui	t5,0x1b
    1b56:	0064                	addi	s1,sp,12
    1b58:	3c01                	jal	1568 <product2+0xe8>
    1b5a:	0000692f          	0x692f
    1b5e:	0000                	unimp
    1b60:	0410                	addi	a2,sp,512
    1b62:	0069                	c.nop	26
    1b64:	0000                	unimp
    1b66:	963e                	add	a2,a2,a5
    1b68:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b6c:	0622                	slli	a2,a2,0x8
    1b6e:	0092                	slli	ra,ra,0x4
    1b70:	0000                	unimp
    1b72:	0096                	slli	ra,ra,0x5
    1b74:	0000                	unimp
    1b76:	9c01                	0x9c01
    1b78:	1c28                	addi	a0,sp,568
    1b7a:	0000                	unimp
    1b7c:	0031613f 63152201 	0x631522010031613f
    1b84:	0100000b          	0x100000b
    1b88:	365a                	fld	fa2,432(sp)
    1b8a:	3261                	jal	1512 <product2+0x92>
    1b8c:	0100                	addi	s0,sp,128
    1b8e:	1d22                	slli	s10,s10,0x28
    1b90:	00000b63          	beqz	zero,1ba6 <random_keys+0xe6>
    1b94:	1bb4                	addi	a3,sp,504
    1b96:	0000                	unimp
    1b98:	00052637          	lui	a2,0x52
    1b9c:	0100                	addi	s0,sp,128
    1b9e:	2422                	fld	fs0,8(sp)
    1ba0:	005d                	c.nop	23
    1ba2:	0000                	unimp
    1ba4:	1be0                	addi	s0,sp,508
    1ba6:	0000                	unimp
    1ba8:	6938                	flw	fa4,80(a0)
    1baa:	0100                	addi	s0,sp,128
    1bac:	005d0523          	sb	t0,10(s10) # 500a <_stack_len+0x100a>
    1bb0:	0000                	unimp
    1bb2:	1c3e                	slli	s8,s8,0x2f
    1bb4:	0000                	unimp
    1bb6:	2840                	fld	fs0,144(s0)
    1bb8:	001c                	0x1c
    1bba:	f600                	fsw	fs0,40(a2)
    1bbc:	0000                	unimp
    1bbe:	0a00                	addi	s0,sp,272
    1bc0:	0000                	unimp
    1bc2:	0100                	addi	s0,sp,128
    1bc4:	1128                	addi	a0,sp,168
    1bc6:	1bdd                	addi	s7,s7,-9
    1bc8:	0000                	unimp
    1bca:	4041                	c.li	zero,16
    1bcc:	001c                	0x1c
    1bce:	9600                	0x9600
    1bd0:	001c                	0x1c
    1bd2:	4100                	lw	s0,0(a0)
    1bd4:	1c35                	addi	s8,s8,-19
    1bd6:	0000                	unimp
    1bd8:	1cb9                	addi	s9,s9,-18
    1bda:	0000                	unimp
    1bdc:	4000                	lw	s0,0(s0)
    1bde:	1c28                	addi	a0,sp,568
    1be0:	0000                	unimp
    1be2:	0108                	addi	a0,sp,128
    1be4:	0000                	unimp
    1be6:	000a                	c.slli	zero,0x2
    1be8:	0000                	unimp
    1bea:	2d01                	jal	21fa <_min_stack+0x1fa>
    1bec:	0411                	addi	s0,s0,4
    1bee:	001c                	0x1c
    1bf0:	4100                	lw	s0,0(a0)
    1bf2:	1c40                	addi	s0,sp,564
    1bf4:	0000                	unimp
    1bf6:	1cdc                	addi	a5,sp,628
    1bf8:	0000                	unimp
    1bfa:	3541                	jal	1a7a <ti_2+0x14a>
    1bfc:	001c                	0x1c
    1bfe:	ff00                	fsw	fs0,56(a4)
    1c00:	001c                	0x1c
    1c02:	0000                	unimp
    1c04:	2842                	fld	fa6,16(sp)
    1c06:	001c                	0x1c
    1c08:	1a00                	addi	s0,sp,304
    1c0a:	0001                	nop
    1c0c:	0a00                	addi	s0,sp,272
    1c0e:	0000                	unimp
    1c10:	0100                	addi	s0,sp,128
    1c12:	40411133          	0x40411133
    1c16:	001c                	0x1c
    1c18:	2200                	fld	fs0,0(a2)
    1c1a:	001d                	c.nop	7
    1c1c:	4100                	lw	s0,0(a0)
    1c1e:	1c35                	addi	s8,s8,-19
    1c20:	0000                	unimp
    1c22:	1d45                	addi	s10,s10,-15
    1c24:	0000                	unimp
    1c26:	0000                	unimp
    1c28:	00062a3b          	0x62a3b
    1c2c:	0100                	addi	s0,sp,128
    1c2e:	4c01060f          	0x4c01060f
    1c32:	001c                	0x1c
    1c34:	3c00                	fld	fs0,56(s0)
    1c36:	3161                	jal	18be <result+0x1e6>
    1c38:	0100                	addi	s0,sp,128
    1c3a:	1b601e0f          	0x1b601e0f
    1c3e:	0000                	unimp
    1c40:	613c                	flw	fa5,64(a0)
    1c42:	0032                	c.slli	zero,0xc
    1c44:	0f01                	addi	t5,t5,0
    1c46:	6030                	flw	fa2,64(s0)
    1c48:	0000001b          	0x1b
    1c4c:	001c2843          	fmadd.s	fa6,fs8,ft1,ft0,rdn
    1c50:	8c00                	0x8c00
    1c52:	0000                	unimp
    1c54:	0600                	addi	s0,sp,768
    1c56:	0000                	unimp
    1c58:	0100                	addi	s0,sp,128
    1c5a:	709c                	flw	fa5,32(s1)
    1c5c:	001c                	0x1c
    1c5e:	4100                	lw	s0,0(a0)
    1c60:	1c35                	addi	s8,s8,-19
    1c62:	0000                	unimp
    1c64:	1d68                	addi	a0,sp,700
    1c66:	0000                	unimp
    1c68:	4044                	lw	s1,4(s0)
    1c6a:	001c                	0x1c
    1c6c:	0100                	addi	s0,sp,128
    1c6e:	3b43005b          	0x3b43005b
    1c72:	2800001b          	0x2800001b
    1c76:	0001                	nop
    1c78:	0600                	addi	s0,sp,768
    1c7a:	0000                	unimp
    1c7c:	0100                	addi	s0,sp,128
    1c7e:	949c                	0x949c
    1c80:	001c                	0x1c
    1c82:	4100                	lw	s0,0(a0)
    1c84:	1b48                	addi	a0,sp,436
    1c86:	0000                	unimp
    1c88:	00001d7b          	0x1d7b
    1c8c:	5344                	lw	s1,36(a4)
    1c8e:	0100001b          	0x100001b
    1c92:	0043005b          	0x43005b
    1c96:	2e00001b          	0x2e00001b
    1c9a:	0001                	nop
    1c9c:	8c00                	0x8c00
    1c9e:	0000                	unimp
    1ca0:	0100                	addi	s0,sp,128
    1ca2:	6a9c                	flw	fa5,16(a3)
    1ca4:	001d                	c.nop	7
    1ca6:	4400                	lw	s0,8(s0)
    1ca8:	1b0d                	addi	s6,s6,-29
    1caa:	0000                	unimp
    1cac:	5a01                	li	s4,-32
    1cae:	1841                	addi	a6,a6,-16
    1cb0:	8e00001b          	0x8e00001b
    1cb4:	001d                	c.nop	7
    1cb6:	4100                	lw	s0,0(a0)
    1cb8:	1b24                	addi	s1,sp,440
    1cba:	0000                	unimp
    1cbc:	1dba                	slli	s11,s11,0x2e
    1cbe:	0000                	unimp
    1cc0:	3045                	jal	1560 <product2+0xe0>
    1cc2:	1800001b          	0x1800001b
    1cc6:	001e                	c.slli	zero,0x7
    1cc8:	4600                	lw	s0,8(a2)
    1cca:	00001b3b          	0x1b3b
    1cce:	0146                	slli	sp,sp,0x11
    1cd0:	0000                	unimp
    1cd2:	0000                	unimp
    1cd4:	0000                	unimp
    1cd6:	5501                	li	a0,-32
    1cd8:	f011                	bnez	s0,1bdc <random_keys+0x11c>
    1cda:	001c                	0x1c
    1cdc:	4100                	lw	s0,0(a0)
    1cde:	00001b53          	fadd.s	fs6,ft0,ft0,rtz
    1ce2:	1e65                	addi	t3,t3,-7
    1ce4:	0000                	unimp
    1ce6:	4841                	li	a6,16
    1ce8:	7800001b          	0x7800001b
    1cec:	001e                	c.slli	zero,0x7
    1cee:	0000                	unimp
    1cf0:	0046                	c.slli	zero,0x11
    1cf2:	4e00001b          	0x4e00001b
    1cf6:	0001                	nop
    1cf8:	1800                	addi	s0,sp,48
    1cfa:	0000                	unimp
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	064a                	slli	a2,a2,0x12
    1d00:	1d46                	slli	s10,s10,0x31
    1d02:	0000                	unimp
    1d04:	001b2447          	fmsub.s	fs0,fs6,ft1,ft0,rdn
    1d08:	4700                	lw	s0,8(a4)
    1d0a:	1b18                	addi	a4,sp,432
    1d0c:	0000                	unimp
    1d0e:	001b0d47          	fmsub.s	fs10,fs6,ft1,ft0,rne
    1d12:	4800                	lw	s0,16(s0)
    1d14:	0018                	0x18
    1d16:	0000                	unimp
    1d18:	3045                	jal	15b8 <product2+0x138>
    1d1a:	9200001b          	0x9200001b
    1d1e:	001e                	c.slli	zero,0x7
    1d20:	4900                	lw	s0,16(a0)
    1d22:	00001b3b          	0x1b3b
    1d26:	0158                	addi	a4,sp,132
    1d28:	0000                	unimp
    1d2a:	0038                	addi	a4,sp,8
    1d2c:	0000                	unimp
    1d2e:	6001                	0x6001
    1d30:	4111                	li	sp,4
    1d32:	00001b53          	fadd.s	fs6,ft0,ft0,rtz
    1d36:	1eb0                	addi	a2,sp,888
    1d38:	0000                	unimp
    1d3a:	4841                	li	a6,16
    1d3c:	c300001b          	0xc300001b
    1d40:	001e                	c.slli	zero,0x7
    1d42:	0000                	unimp
    1d44:	0000                	unimp
    1d46:	3b49                	jal	1ad8 <random_keys+0x18>
    1d48:	7a00001b          	0x7a00001b
    1d4c:	0001                	nop
    1d4e:	5000                	lw	s0,32(s0)
    1d50:	0000                	unimp
    1d52:	0100                	addi	s0,sp,128
    1d54:	115a                	slli	sp,sp,0x36
    1d56:	5341                	li	t1,-16
    1d58:	dd00001b          	0xdd00001b
    1d5c:	001e                	c.slli	zero,0x7
    1d5e:	4100                	lw	s0,0(a0)
    1d60:	1b48                	addi	a0,sp,436
    1d62:	0000                	unimp
    1d64:	1ef0                	addi	a2,sp,892
    1d66:	0000                	unimp
    1d68:	0000                	unimp
    1d6a:	294a                	fld	fs2,144(sp)
    1d6c:	1f000003          	lb	zero,496(zero) # 1f0 <polymult+0x36>
    1d70:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1d74:	4a00                	lw	s0,16(a2)
    1d76:	0064                	addi	s1,sp,12
    1d78:	0000                	unimp
    1d7a:	005a                	c.slli	zero,0x16
    1d7c:	0000                	unimp
    1d7e:	1e000007          	0x1e000007
    1d82:	0000                	unimp
    1d84:	0200                	addi	s0,sp,256
    1d86:	4f00                	lw	s0,24(a4)
    1d88:	0004                	0x4
    1d8a:	0400                	addi	s0,sp,512
    1d8c:	8201                	c.srli64	a2
    1d8e:	80000023          	sb	zero,-2048(zero) # fffff800 <_stack_start+0xfffef800>
    1d92:	0000                	unimp
    1d94:	2900                	fld	fs0,16(a0)
    1d96:	30000007          	0x30000007
    1d9a:	5e000007          	0x5e000007
    1d9e:	01000007          	0x1000007
    1da2:	80              	Address 0x0000000000001da2 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x106>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 4f001 <_stack_start+0x3f001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  7e:	0b01130b          	0xb01130b
  82:	3b0b3a0b          	0x3b0b3a0b
  86:	010b390b          	0x10b390b
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
            a1[length-1] = a2[length-1];
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-2] = a2[length-2];
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
} //end of function
  f0:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
            for (i = 0; i < (length / 3); i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    asm volatile(
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	03011317          	auipc	t1,0x3011
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
 12a:	0b39053b          	0xb39053b
    switch(length%3) {
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
            for (i = 0; i < (length / 3); i++) {
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    asm volatile(
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            for (i = 0; i < (length / 3); i++) {
 14a:	0b3a0b0b          	0xb3a0b0b
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
            a1[length-1] = a1[length-1] % mod;
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
    asm volatile(
 17a:	39053b0b          	0x39053b0b
            for (i = 0; i < ((length-1) / 3); i++) {
 17e:	0013490b          	0x13490b
            a1[length-2] = a1[length-2] % mod;
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    asm volatile(
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
            for (i = 0; i < (length / 3); i++) {
 19c:	0b39053b          	0xb39053b
    asm volatile(
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
            for (i = 0; i < ((length-1) / 3); i++) {
 1aa:	0300                	addi	s0,sp,384
    asm volatile(
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    int line[size_b][size_a + size_b];
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0xf6>
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1d8:	0b3a0e03          	lb	t3,179(s4)
    int pola[size_a];
 1dc:	0b390b3b          	0xb390b3b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_equ+0x68>
    int line[size_b][size_a + size_b];
 1ec:	0319                	addi	t1,t1,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 1f4:	1113490b          	0x1113490b
    int pola[size_a];
 1f8:	1201                	addi	tp,tp,-32
    int line[size_b][size_a + size_b];
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
    int pola[size_a];
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
    int polb[size_b];
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 20a:	39053b0b          	0x39053b0b
    int polb[size_b];
 20e:	0213490b          	0x213490b
    int pola[size_a];
 212:	27000017          	auipc	zero,0x27000
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 216:	0034                	addi	a3,sp,8
    int line[size_b][size_a + size_b];
 218:	0b3a0803          	lb	a6,179(s4)
    int polb[size_b];
 21c:	0b39053b          	0xb39053b
            line[i][j] = 0;
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
    for (i = 0; i < size_b; ++i){
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
            product[j] = 0;
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 230:	0213490b          	0x213490b
    array_equ(pola,a,size_a);
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
    array_mod(pola,mod,size_a);
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
    array_equ(polb,b,size_b);
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
    array_mod(polb,mod,size_b);
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
    if(star_mult == 1){
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
        for (j = size_b -1; j >= 0; j = j-1){
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
            product[j] = 0;
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
            line[i][j] = 0;
 294:	12011113          	0x12011113
            product[j] = 0;
 298:	4006                	0x4006
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 2ac:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	31000017          	auipc	zero,0x31000
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
    for(j = 0; j < size_a + size_b -1; ++j){
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
    array_mod(product,mod,(size_a+size_b-1));
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
}
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
                line[size_b-1-j][k] = pola[k]*polb[j];
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 318:	03000537          	lui	a0,0x3000
        for (j = size_b -1; j >= 0; j = j-1){
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 326:	38000017          	auipc	zero,0x38000
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
            for (k = size_a-1; k >= 0; k = k-1 ){
 338:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 340:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
            line[i][j] = line[i][j] % mod;
 34c:	0b3a0e03          	lb	t3,179(s4)
        for(j = 0; j < size_a + size_b -1; ++j){
 350:	0b390b3b          	0xb390b3b
            line[i][j] = line[i][j] % mod;
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 35a:	3f012e3b          	0x3f012e3b
    for (i = 0; i < size_b; ++i){
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 366:	2019270b          	0x2019270b
            product[j] += line[i][j];
 36a:	0013010b          	0x13010b
 36e:	3c00                	fld	fs0,56(s0)
        for(i = 0; i < size_b; ++i){
 370:	0005                	c.nop	1
            product[j] += line[i][j];
 372:	0b3a0803          	lb	a6,179(s4)
 376:	0b390b3b          	0xb390b3b
 37a:	1349                	addi	t1,t1,-14
 37c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 37e:	053d                	addi	a0,a0,15
 380:	0300                	addi	s0,sp,384
    for(j = 0; j < size_a + size_b -1; ++j){
 382:	3a0e                	fld	fs4,224(sp)
 384:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 388:	0013490b          	0x13490b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 38c:	3e00                	fld	fs0,56(a2)
    int line[size_b][size_a + size_b];
 38e:	012e                	slli	sp,sp,0xb
 390:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 398:	0b39                	addi	s6,s6,14
 39a:	01111927          	0x1111927
    int line[size_b][size_a + size_b];
 39e:	0612                	slli	a2,a2,0x4
 3a0:	1840                	addi	s0,sp,52
 3a2:	01194297          	auipc	t0,0x1194
 3a6:	3f000013          	li	zero,1008
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3aa:	0005                	c.nop	1
 3ac:	0b3a0803          	lb	a6,179(s4)
 3b0:	0b390b3b          	0xb390b3b
 3b4:	1349                	addi	t1,t1,-14
 3b6:	1802                	slli	a6,a6,0x20
 3b8:	0000                	unimp
    int line[size_b][size_a + size_b];
 3ba:	1d40                	addi	s0,sp,692
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3bc:	3101                	jal	ffffffbc <_stack_start+0xfffeffbc>
 3be:	12011113          	0x12011113
    int line[size_b][size_a + size_b];
 3c2:	5806                	lw	a6,96(sp)
 3c4:	570b590b          	0x570b590b
    int pola[size_a];
 3c8:	0013010b          	0x13010b
 3cc:	4100                	lw	s0,0(a0)
    int line[size_b][size_a + size_b];
 3ce:	0005                	c.nop	1
    int pola[size_a];
 3d0:	1331                	addi	t1,t1,-20
 3d2:	1702                	slli	a4,a4,0x20
    int polb[size_b];
 3d4:	0000                	unimp
 3d6:	1d42                	slli	s10,s10,0x30
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
    int pola[size_a];
 3da:	12011113          	0x12011113
    int polb[size_b];
 3de:	5806                	lw	a6,96(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e0:	570b590b          	0x570b590b
    int line[size_b][size_a + size_b];
 3e4:	4300000b          	0x4300000b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e8:	012e                	slli	sp,sp,0xb
    int pola[size_a];
 3ea:	1331                	addi	t1,t1,-20
 3ec:	0111                	addi	sp,sp,4
    int polb[size_b];
 3ee:	0612                	slli	a2,a2,0x4
    for (i = 0; i < size_b; ++i){
 3f0:	1840                	addi	s0,sp,52
 3f2:	01194297          	auipc	t0,0x1194
            product2[j] = 0;
 3f6:	44000013          	li	zero,1088
 3fa:	0005                	c.nop	1
 3fc:	1331                	addi	t1,t1,-20
    for (i = 0; i < size_b; ++i){
 3fe:	1802                	slli	a6,a6,0x20
 400:	0000                	unimp
    array_equ(pola,a,size_a);
 402:	3445                	jal	fffffea2 <_stack_start+0xfffefea2>
 404:	3100                	fld	fs0,32(a0)
 406:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
 40a:	4600                	lw	s0,8(a2)
 40c:	011d                	addi	sp,sp,7
    array_equ(polb,b,size_b);
 40e:	1331                	addi	t1,t1,-20
 410:	0152                	slli	sp,sp,0x14
 412:	1755                	addi	a4,a4,-11
 414:	0b58                	addi	a4,sp,404
 416:	0b59                	addi	s6,s6,22
 418:	13010b57          	0x13010b57
    if(star_mult == 1){
 41c:	0000                	unimp
 41e:	31000547          	fmsub.s	fa0,ft0,fa6,ft6,rne
 422:	48000013          	li	zero,1152
 426:	1755010b          	0x1755010b
 42a:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 42c:	1d49                	addi	s10,s10,-14
 42e:	3101                	jal	2e <__DYNAMIC+0x2e>
            for (k = size_a-1; k >= 0; k = k-1 ){
 430:	55015213          	0x55015213
            product2[j] = 0;
 434:	590b5817          	auipc	a6,0x590b5
 438:	000b570b          	0xb570b
            line[i][j] = 0;
 43c:	4a00                	lw	s0,16(a2)
            product2[j] = 0;
 43e:	002e                	c.slli	zero,0xb
 440:	193c193f 0e030e6e 	0xe030e6e193c193f
        for(j = 0; j < size_a + size_b -1; ++j){
 448:	0b3a                	slli	s6,s6,0xe
    for (i = 0; i < size_b; ++i){
 44a:	00000b3b          	0xb3b
 44e:	0100                	addi	s0,sp,128
 450:	0011                	c.nop	4
        for(j = 0; j < size_a + size_b -1; ++j){
 452:	0610                	addi	a2,sp,768
 454:	0655                	addi	a2,a2,21
                line[size_b-1-j][k] = pola[k]*polb[j];
 456:	0e1b0e03          	lb	t3,225(s6) # 710e1 <_stack_start+0x610e1>
 45a:	0e25                	addi	t3,t3,9
 45c:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	1036                	c.slli	zero,0x2d
       2:	0000                	unimp
       4:	1048                	addi	a0,sp,36
       6:	0000                	unimp
       8:	0001                	nop
       a:	485a                	lw	a6,148(sp)
       c:	0010                	0x10
       e:	4900                	lw	s0,16(a0)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	104a                	c.slli	zero,0x32
      20:	0000                	unimp
      22:	1084                	addi	s1,sp,96
      24:	0000                	unimp
      26:	0001                	nop
      28:	8a5a                	mv	s4,s6
      2a:	0010                	0x10
      2c:	9400                	0x9400
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0fc4                	addi	s1,sp,980
      3e:	0000                	unimp
      40:	1016                	c.slli	zero,0x25
      42:	0000                	unimp
      44:	0001                	nop
      46:	165a                	slli	a2,a2,0x36
      48:	0010                	0x10
      4a:	3200                	fld	fs0,32(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	b800                	fsd	fs0,48(s0)
      5e:	f800000f          	0xf800000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0ff8                	addi	a4,sp,988
      6c:	0000                	unimp
      6e:	1002                	c.slli	zero,0x20
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	1002                	c.slli	zero,0x20
      78:	0000                	unimp
      7a:	00001033          	sll	zero,zero,zero
      7e:	0002                	c.slli64	zero
      80:	007d                	c.nop	31
      82:	00001033          	sll	zero,zero,zero
      86:	1088                	addi	a0,sp,96
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	8879                	andi	s0,s0,30
}
      90:	0010                	0x10
    switch(length%3) {
      92:	8a00                	0x8a00
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	108a                	slli	ra,ra,0x22
      9e:	0000                	unimp
      a0:	1094                	addi	a3,sp,96
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	b800                	fsd	fs0,48(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	d200000f          	0xd200000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fd2                	slli	t6,t6,0x14
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	0fd4                	addi	a3,sp,980
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0fd4                	addi	a3,sp,980
      cc:	0000                	unimp
      ce:	1040                	addi	s0,sp,36
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d6:	407a                	0x407a
      d8:	0010                	0x10
      da:	4900                	lw	s0,16(a0)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	4900                	lw	s0,16(a0)
            a1[length-1] = a2[length-1];
      e4:	0010                	0x10
            a1[length-2] = a2[length-2];
      e6:	8800                	0x8800
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
} //end of function
      f0:	1088                	addi	a0,sp,96
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	108a                	slli	ra,ra,0x22
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # fffdff07 <_stack_start+0xfffcff07>
      fc:	8a7a                	mv	s4,t5
      fe:	0010                	0x10
            for (i = 0; i < (length / 3); i++) {
     100:	9400                	0x9400
     102:	0010                	0x10
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
    asm volatile(
     108:	7af0                	flw	fa2,116(a3)
	...
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0fb8                	addi	a4,sp,984
     114:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0fde                	slli	t6,t6,0x17
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	de7c                	sw	a5,124(a2)
     120:	e800000f          	0xe800000f
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0200000f          	fence	r,unknown
    asm volatile(
     128:	7e00                	flw	fs0,56(a2)
     12a:	e800                	fsw	fs0,16(s0)
}
     12c:	8200000f          	0x8200000f
    switch(length%3) {
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
     136:	8200                	0x8200
     138:	0010                	0x10
     13a:	8800                	0x8800
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     142:	7cc4                	flw	fs1,60(s1)
     144:	1088                	addi	a0,sp,96
    asm volatile(
     146:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     148:	108a                	slli	ra,ra,0x22
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            for (i = 0; i < ((length-2) / 3); i++) {
     150:	8a7c                	0x8a7c
     152:	0010                	0x10
     154:	9400                	0x9400
     156:	0010                	0x10
    asm volatile(
     158:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	7800                	flw	fs0,48(s0)
	...
            a1[length-1] = a1[length-1] % mod;
     164:	b800                	fsd	fs0,48(s0)
     166:	1200000f          	0x1200000f
     16a:	0010                	0x10
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
            for (i = 0; i < ((length-1) / 3); i++) {
     170:	7e98                	flw	fa4,56(a3)
     172:	1012                	c.slli	zero,0x24
     174:	0000                	unimp
     176:	1018                	addi	a4,sp,32
     178:	0000                	unimp
    asm volatile(
     17a:	0002                	c.slli64	zero
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	007c                	addi	a5,sp,12
     17e:	1018                	addi	a4,sp,32
            a1[length-1] = a1[length-1] % mod;
     180:	0000                	unimp
            a1[length-2] = a1[length-2] % mod;
     182:	00001033          	sll	zero,zero,zero
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	00001033          	sll	zero,zero,zero
} //end of function
     18e:	1088                	addi	a0,sp,96
    asm volatile(
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	887e                	mv	a6,t6
     198:	0010                	0x10
            for (i = 0; i < (length / 3); i++) {
     19a:	8a00                	0x8a00
     19c:	0010                	0x10
    asm volatile(
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	108a                	slli	ra,ra,0x22
     1a6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	1094                	addi	a3,sp,96
     1aa:	0000                	unimp
    asm volatile(
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	c400                	sw	s0,8(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ba:	ca00000f          	0xca00000f
     1be:	0200000f          	fence	r,unknown
    int line[size_b][size_a + size_b];
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	4a9f 0010 6000      	0x600000104a9f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ca:	0010                	0x10
    int line[size_b][size_a + size_b];
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	b400                	fsd	fs0,40(s0)
     1da:	000c                	0xc
    int pola[size_a];
     1dc:	e000                	fsw	fs0,0(s0)
     1de:	000c                	0xc
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0ce0                	addi	s0,sp,604
     1e6:	0000                	unimp
     1e8:	0d4a                	slli	s10,s10,0x12
     1ea:	0000                	unimp
    int line[size_b][size_a + size_b];
     1ec:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1ee:	4a58                	lw	a4,20(a2)
     1f0:	000d                	c.nop	3
     1f2:	6400                	flw	fs0,8(s0)
    int line[size_b][size_a + size_b];
     1f4:	000d                	c.nop	3
    int pola[size_a];
     1f6:	0300                	addi	s0,sp,384
     1f8:	8700                	0x8700
    int line[size_b][size_a + size_b];
     1fa:	9f7f                	0x9f7f
     1fc:	0d64                	addi	s1,sp,668
     1fe:	0000                	unimp
    int pola[size_a];
     200:	0d6a                	slli	s10,s10,0x1a
     202:	0000                	unimp
    int polb[size_b];
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
    int pola[size_a];
     20a:	0d6a                	slli	s10,s10,0x1a
    int polb[size_b];
     20c:	0000                	unimp
     20e:	0da0                	addi	s0,sp,728
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	0000                	unimp
    int pola[size_a];
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	0000                	unimp
    int line[size_b][size_a + size_b];
     218:	0000                	unimp
     21a:	0000                	unimp
    int polb[size_b];
     21c:	b400                	fsd	fs0,40(s0)
            line[i][j] = 0;
     21e:	000c                	0xc
     220:	ee00                	fsw	fs0,24(a2)
     222:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
            product[j] = 0;
     228:	0cee                	slli	s9,s9,0x1b
     22a:	0000                	unimp
     22c:	0d62                	slli	s10,s10,0x18
     22e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     230:	0001                	nop
     232:	6266                	flw	ft4,88(sp)
    array_equ(pola,a,size_a);
     234:	000d                	c.nop	3
     236:	6a00                	flw	fs0,16(a2)
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	6a9f 000d a000      	0xa000000d6a9f
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6600                	flw	fs0,8(a2)
	...
    array_equ(polb,b,size_b);
     254:	0cb4                	addi	a3,sp,600
     256:	0000                	unimp
     258:	0ce2                	slli	s9,s9,0x18
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	e25c                	fsw	fa5,4(a2)
    array_mod(polb,mod,size_b);
     260:	000c                	0xc
     262:	5a00                	lw	s0,48(a2)
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     268:	6200                	flw	fs0,0(a2)
     26a:	0d5a                	slli	s10,s10,0x16
     26c:	0000                	unimp
     26e:	0d6a                	slli	s10,s10,0x1a
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d6a                	slli	s10,s10,0x1a
     27a:	0000                	unimp
     27c:	0da0                	addi	s0,sp,728
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
        for (j = size_b -1; j >= 0; j = j-1){
     284:	0000                	unimp
     286:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0000                	unimp
     28a:	b400                	fsd	fs0,40(s0)
            product[j] = 0;
     28c:	000c                	0xc
     28e:	e800                	fsw	fs0,16(s0)
     290:	000c                	0xc
            line[i][j] = 0;
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
            product[j] = 0;
     296:	0ce8                	addi	a0,sp,604
     298:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0cff                	0xcff
     29c:	0000                	unimp
     29e:	0001                	nop
     2a0:	ff5a                	fsw	fs6,188(sp)
    for (i = 0; i < size_b; ++i){
     2a2:	000c                	0xc
     2a4:	a000                	fsd	fs0,0(s0)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    if(star_mult == 1){
     2ae:	009f 0000 0000      	0x9f
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2b6:	b400                	fsd	fs0,40(s0)
     2b8:	000c                	0xc
     2ba:	ca00                	sw	s0,16(a2)
     2bc:	000c                	0xc
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     2c2:	0cca                	slli	s9,s9,0x12
     2c4:	0000                	unimp
     2c6:	0d66                	slli	s10,s10,0x19
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	6668                	flw	fa0,76(a2)
     2ce:	000d                	c.nop	3
     2d0:	6a00                	flw	fs0,16(a2)
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
}
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	6a9f 000d a000      	0xa000000d6a9f
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6800                	flw	fs0,16(s0)
	...
     2ee:	0cb4                	addi	a3,sp,600
     2f0:	0000                	unimp
     2f2:	0cff                	0xcff
     2f4:	0000                	unimp
     2f6:	0001                	nop
     2f8:	ff5f 000c a000      	0xa000000cff5f
     2fe:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	b400                	fsd	fs0,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	ff00                	fsw	fs0,56(a4)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	6000                	flw	fs0,0(s0)
     31a:	0cff                	0xcff
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	0000                	unimp
     31e:	0d60                	addi	s0,sp,668
     320:	0000                	unimp
     322:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	6065                	c.lui	zero,0x19
     326:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	6a00                	flw	fs0,16(a2)
     32a:	000d                	c.nop	3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
     332:	6a9f 000d a000      	0xa000000d6a9f
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0100                	addi	s0,sp,128
     33c:	6500                	flw	fs0,8(a0)
	...
        for (j = size_b -1; j >= 0; j = j-1){
     346:	0d46                	slli	s10,s10,0x11
     348:	0000                	unimp
     34a:	0d6a                	slli	s10,s10,0x1a
            line[i][j] = line[i][j] % mod;
     34c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
	...
     35a:	000d                	c.nop	3
     35c:	0f00                	addi	s0,sp,912
    for (i = 0; i < size_b; ++i){
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
	...
            product[j] += line[i][j];
     36c:	0d12                	slli	s10,s10,0x4
     36e:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     370:	0d30                	addi	a2,sp,664
            product[j] += line[i][j];
     372:	0000                	unimp
     374:	0001                	nop
     376:	305a                	fld	ft0,432(sp)
     378:	000d                	c.nop	3
     37a:	3300                	fld	fs0,32(a4)
     37c:	000d                	c.nop	3
        for(i = 0; i < size_b; ++i){
     37e:	0100                	addi	s0,sp,128
     380:	5c00                	lw	s0,56(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     382:	0d6a                	slli	s10,s10,0x1a
     384:	0000                	unimp
     386:	0d8e                	slli	s11,s11,0x3
        for(i = 0; i < size_b; ++i){
     388:	0000                	unimp
     38a:	0001                	nop
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	005a                	c.slli	zero,0x16
    int line[size_b][size_a + size_b];
     38e:	0000                	unimp
     390:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     392:	0000                	unimp
     394:	3400                	fld	fs0,40(s0)
     396:	000d                	c.nop	3
     398:	3f00                	fld	fs0,56(a4)
     39a:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
	...
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	0d40                	addi	s0,sp,660
     3aa:	0000                	unimp
     3ac:	0d6a                	slli	s10,s10,0x1a
     3ae:	0000                	unimp
     3b0:	0001                	nop
     3b2:	8e5a                	mv	t3,s6
     3b4:	000d                	c.nop	3
     3b6:	a000                	fsd	fs0,0(s0)
     3b8:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     3ba:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3bc:	5a00                	lw	s0,48(a2)
	...
    int pola[size_a];
     3c6:	0d12                	slli	s10,s10,0x4
     3c8:	0000                	unimp
     3ca:	0d18                	addi	a4,sp,656
     3cc:	0000                	unimp
    int line[size_b][size_a + size_b];
     3ce:	0001                	nop
    int pola[size_a];
     3d0:	1859                	addi	a6,a6,-10
     3d2:	000d                	c.nop	3
    int polb[size_b];
     3d4:	2400                	fld	fs0,8(s0)
     3d6:	000d                	c.nop	3
     3d8:	0100                	addi	s0,sp,128
    int pola[size_a];
     3da:	5d00                	lw	s0,56(a0)
    int polb[size_b];
     3dc:	0d24                	addi	s1,sp,664
     3de:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	0d2a                	slli	s10,s10,0xa
     3e2:	0000                	unimp
    int line[size_b][size_a + size_b];
     3e4:	0001                	nop
     3e6:	405e                	0x405e
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	000d                	c.nop	3
    int pola[size_a];
     3ea:	5800                	lw	s0,48(s0)
     3ec:	000d                	c.nop	3
    int polb[size_b];
     3ee:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     3f0:	5900                	lw	s0,48(a0)
     3f2:	0d6a                	slli	s10,s10,0x1a
     3f4:	0000                	unimp
            product2[j] = 0;
     3f6:	0d74                	addi	a3,sp,668
     3f8:	0000                	unimp
     3fa:	0001                	nop
     3fc:	745d                	lui	s0,0xffff7
    for (i = 0; i < size_b; ++i){
     3fe:	000d                	c.nop	3
     400:	7a00                	flw	fs0,48(a2)
    array_equ(pola,a,size_a);
     402:	000d                	c.nop	3
     404:	0300                	addi	s0,sp,384
     406:	7d00                	flw	fs0,56(a0)
     408:	9f7f                	0x9f7f
     40a:	0d7a                	slli	s10,s10,0x1e
     40c:	0000                	unimp
    array_equ(polb,b,size_b);
     40e:	0d7c                	addi	a5,sp,668
     410:	0000                	unimp
     412:	0001                	nop
     414:	7c5d                	lui	s8,0xffff7
     416:	000d                	c.nop	3
     418:	8e00                	0x8e00
    if(star_mult == 1){
     41a:	000d                	c.nop	3
     41c:	0100                	addi	s0,sp,128
     41e:	5e00                	lw	s0,56(a2)
     420:	0d8e                	slli	s11,s11,0x3
     422:	0000                	unimp
     424:	0d98                	addi	a4,sp,720
     426:	0000                	unimp
     428:	0001                	nop
     42a:	9859                	andi	s0,s0,-10
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	000d                	c.nop	3
     42e:	9e00                	0x9e00
            for (k = size_a-1; k >= 0; k = k-1 ){
     430:	000d                	c.nop	3
     432:	0300                	addi	s0,sp,384
            product2[j] = 0;
     434:	7900                	flw	fs0,48(a0)
     436:	9f7f                	0x9f7f
     438:	0d9e                	slli	s11,s11,0x7
            line[i][j] = 0;
     43a:	0000                	unimp
     43c:	0da0                	addi	s0,sp,728
            product2[j] = 0;
     43e:	0000                	unimp
     440:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     442:	0059                	c.nop	22
     444:	0000                	unimp
     446:	0000                	unimp
     448:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     44a:	fc00                	fsw	fs0,56(s0)
     44c:	2a00000b          	0x2a00000b
     450:	000c                	0xc
        for(j = 0; j < size_a + size_b -1; ++j){
     452:	0100                	addi	s0,sp,128
     454:	5a00                	lw	s0,48(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	0c2a                	slli	s8,s8,0xa
     458:	0000                	unimp
     45a:	0c7e                	slli	s8,s8,0x1f
     45c:	0000                	unimp
     45e:	0001                	nop
     460:	7e58                	flw	fa4,60(a2)
     462:	000c                	0xc
     464:	b400                	fsd	fs0,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	0400                	addi	s0,sp,512
     46a:	f300                	fsw	fs0,32(a4)
     46c:	5a01                	li	s4,-32
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	009f 0000 0000      	0x9f
        for (j = size_b -1; j >= 0; j = j-1){
     474:	0000                	unimp
     476:	fc00                	fsw	fs0,56(s0)
     478:	1c00000b          	0x1c00000b
        for(j=0;j<size_a+size_b-1;++j){
     47c:	000c                	0xc
    for(i=0;i<size_b;++i){
     47e:	0100                	addi	s0,sp,128
     480:	5b00                	lw	s0,48(a4)
     482:	0c1c                	addi	a5,sp,528
     484:	0000                	unimp
     486:	0c98                	addi	a4,sp,592
     488:	0000                	unimp
     48a:	0001                	nop
        for(j=0;j<size_a+size_b-1;++j){
     48c:	9862                	add	a6,a6,s8
     48e:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	a200                	fsd	fs0,0(a2)
     492:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	0400                	addi	s0,sp,512
     496:	f300                	fsw	fs0,32(a4)
     498:	5b01                	li	s6,-32
     49a:	a29f 000c b400      	0xb400000ca29f
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	6200                	flw	fs0,0(a2)
	...
     4ae:	0bfc                	addi	a5,sp,476
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	0000                	unimp
     4b2:	0c20                	addi	s0,sp,536
     4b4:	0000                	unimp
     4b6:	0001                	nop
            product2[j] += line[i][j];
     4b8:	205c                	fld	fa5,128(s0)
     4ba:	000c                	0xc
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	6c00                	flw	fs0,24(s0)
     4be:	000c                	0xc
            product2[j] += line[i][j];
     4c0:	0100                	addi	s0,sp,128
     4c2:	5900                	lw	s0,48(a0)
     4c4:	0c6c                	addi	a1,sp,540
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	0000                	unimp
     4c8:	0cb4                	addi	a3,sp,600
     4ca:	0000                	unimp
    for(i=0;i<size_b;++i){
     4cc:	0004                	0x4
     4ce:	9f5c01f3          	0x9f5c01f3
	...
}
     4da:	0bfc                	addi	a5,sp,476
     4dc:	0000                	unimp
     4de:	0c39                	addi	s8,s8,14
     4e0:	0000                	unimp
     4e2:	0001                	nop
     4e4:	395d                	jal	19a <array_mod+0x6c>
     4e6:	000c                	0xc
     4e8:	9c00                	0x9c00
     4ea:	000c                	0xc
     4ec:	0100                	addi	s0,sp,128
     4ee:	6400                	flw	fs0,8(s0)
     4f0:	0c9c                	addi	a5,sp,592
     4f2:	0000                	unimp
     4f4:	0ca2                	slli	s9,s9,0x8
     4f6:	0000                	unimp
     4f8:	0004                	0x4
     4fa:	9f5d01f3          	0x9f5d01f3
    int v[size_N];
     4fe:	0ca2                	slli	s9,s9,0x8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	0000                	unimp
    int v[size_N];
     502:	0cb4                	addi	a3,sp,600
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     504:	0000                	unimp
     506:	0001                	nop
     508:	0064                	addi	s1,sp,12
     50a:	0000                	unimp
     50c:	0000                	unimp
     50e:	0000                	unimp
     510:	fc00                	fsw	fs0,56(s0)
     512:	3900000b          	0x3900000b
     516:	000c                	0xc
     518:	0100                	addi	s0,sp,128
     51a:	5e00                	lw	s0,56(a2)
     51c:	0c39                	addi	s8,s8,14
    int v[size_N];
     51e:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     520:	0c9a                	slli	s9,s9,0x6
    int v[size_N];
     522:	0000                	unimp
     524:	0001                	nop
     526:	000c9a63          	bnez	s9,53a <polydiv+0x3e>
    int q[size_N];
     52a:	a200                	fsd	fs0,0(a2)
     52c:	000c                	0xc
    int num_temp[size_N];
     52e:	0400                	addi	s0,sp,512
     530:	f300                	fsw	fs0,32(a4)
    int denum_temp[size_D];
     532:	5e01                	li	t3,-32
     534:	a29f 000c b400      	0xb400000ca29f
    int num_temp[size_N];
     53a:	000c                	0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     53c:	0100                	addi	s0,sp,128
    int denum_temp[size_D];
     53e:	6300                	flw	fs0,0(a4)
	...
	array_equ(num_temp,num,size_N);
     548:	0c84                	addi	s1,sp,592
     54a:	0000                	unimp
     54c:	0ca2                	slli	s9,s9,0x8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	0000                	unimp
     550:	0001                	nop
    int denum_temp[size_D];
     552:	005a                	c.slli	zero,0x16
     554:	0000                	unimp
	array_equ(num_temp,num,size_N);
     556:	0000                	unimp
	array_mod(num_temp, mod, size_N);
     558:	0000                	unimp
     55a:	4c00                	lw	s0,24(s0)
     55c:	000c                	0xc
     55e:	7700                	flw	fs0,40(a4)
    int denum_temp[size_D];
     560:	000c                	0xc
    array_equ(denum_temp,denum,size_D);
     562:	0100                	addi	s0,sp,128
     564:	5a00                	lw	s0,48(a2)
	...
    array_mod(denum_temp,mod,size_D);
     56e:	0c4c                	addi	a1,sp,532
     570:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     572:	0c52                	slli	s8,s8,0x14
     574:	0000                	unimp
     576:	0002                	c.slli64	zero
    for (i = size_D-1; i >= 0; i = i-1){
     578:	9f30                	0x9f30
     57a:	0c78                	addi	a4,sp,540
     57c:	0000                	unimp
     57e:	0c96                	slli	s9,s9,0x5
     580:	0000                	unimp
     582:	0001                	nop
    for (i = 0; i < size_N; ++i){
     584:	a259                	j	70a <ext_euclid+0x3e>
     586:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     588:	ac00                	fsd	fs0,24(s0)
    for (u = 0; u < mod; ++u){
     58a:	000c                	0xc
     58c:	0100                	addi	s0,sp,128
     58e:	5900                	lw	s0,48(a0)
     590:	0cac                	addi	a1,sp,600
        q[i] = 0;
     592:	0000                	unimp
     594:	0cb2                	slli	s9,s9,0xc
     596:	0000                	unimp
     598:	7f790003          	lb	zero,2039(s2) # e7f7 <_stack+0x7f7>
     59c:	b29f 000c b400      	0xb400000cb29f
        v[i] = 0;
     5a2:	000c                	0xc
    for (i = 0; i < size_N; ++i){
     5a4:	0100                	addi	s0,sp,128
     5a6:	5900                	lw	s0,48(a0)
	...
        if ( (b_N*u)%mod == 1 )
     5b0:	08e0                	addi	s0,sp,92
     5b2:	0000                	unimp
     5b4:	0938                	addi	a4,sp,152
     5b6:	0000                	unimp
    for (u = 0; u < mod; ++u){
     5b8:	0001                	nop
     5ba:	385a                	fld	fa6,432(sp)
        if( num_temp[i] != 0 )
     5bc:	0009                	c.nop	2
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	fe00                	fsw	fs0,56(a2)
     5c0:	000a                	c.slli	zero,0x2
     5c2:	0100                	addi	s0,sp,128
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0afe                	slli	s5,s5,0x1f
     5c8:	0000                	unimp
     5ca:	0b32                	slli	s6,s6,0xc
    while (d >= d2){
     5cc:	0000                	unimp
     5ce:	7f860003          	lb	zero,2040(a2) # 527f8 <_stack_start+0x427f8>
	array_equ(result,q,size_N);
     5d2:	329f 000b 5400      	0x5400000b329f
     5d8:	0400000b          	0x400000b
     5dc:	f300                	fsw	fs0,32(a4)
    for(i = size_N; i < (2*size_N); ++i){
     5de:	5a01                	li	s4,-32
     5e0:	549f 000b e800      	0xe800000b549f
        result[i] = num_temp[i-size_N];
     5e6:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	6200                	flw	fs0,0(a2)
     5ec:	0be8                	addi	a0,sp,476
}
     5ee:	0000                	unimp
     5f0:	0bfc                	addi	a5,sp,476
     5f2:	0000                	unimp
     5f4:	7f860003          	lb	zero,2040(a2)
     5f8:	009f 0000 0000      	0x9f
     5fe:	0000                	unimp
     600:	e000                	fsw	fs0,0(s0)
     602:	0008                	0x8
     604:	2800                	fld	fs0,16(s0)
     606:	0009                	c.nop	2
     608:	0100                	addi	s0,sp,128
     60a:	5b00                	lw	s0,48(a4)
     60c:	0928                	addi	a0,sp,152
     60e:	0000                	unimp
     610:	0b3a                	slli	s6,s6,0xe
     612:	0000                	unimp
     614:	0001                	nop
     616:	3a68                	fld	fa0,240(a2)
        v[(d-d2)] = u*r_d;
     618:	5400000b          	0x5400000b
     61c:	0400000b          	0x400000b
     620:	f300                	fsw	fs0,32(a4)
     622:	5b01                	li	s6,-32
	 array_mod(v, mod, size_N);
     624:	549f 000b fc00      	0xfc00000b549f
        v[(d-d2)] = u*r_d;
     62a:	0100000b          	0x100000b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     62e:	6800                	flw	fs0,16(s0)
	...
     638:	08e0                	addi	s0,sp,92
     63a:	0000                	unimp
	array_mod(product, mod, size_N);
     63c:	092c                	addi	a1,sp,152
     63e:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0001                	nop
	array_mod(product, mod, size_N);
     642:	2c5c                	fld	fa5,152(s0)
        for (i = 0; i < size_N; ++i){
     644:	0009                	c.nop	2
     646:	3600                	fld	fs0,40(a2)
     648:	0100000b          	0x100000b
	array_mod(num_temp, mod, size_N);
     64c:	6700                	flw	fs0,8(a4)
     64e:	0b36                	slli	s6,s6,0xd
     650:	0000                	unimp
     652:	0b54                	addi	a3,sp,404
        for(i = 0; i < size_N; ++i){
     654:	0000                	unimp
     656:	0004                	0x4
     658:	9f5c01f3          	0x9f5c01f3
	array_mod(q, mod, size_N);
     65c:	0b54                	addi	a3,sp,404
     65e:	0000                	unimp
     660:	0bfc                	addi	a5,sp,476
     662:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0001                	nop
     666:	00000067          	jr	zero # 0 <__DYNAMIC>
     66a:	0000                	unimp
     66c:	0000                	unimp
     66e:	8600                	0x8600
     670:	000a                	c.slli	zero,0x2
     672:	9000                	0x9000
     674:	000a                	c.slli	zero,0x2
            num_temp[i] = num_temp[i] - product[i];
     676:	0100                	addi	s0,sp,128
     678:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     682:	0aa0                	addi	s0,sp,344
            num_temp[i] = num_temp[i] - product[i];
     684:	0000                	unimp
     686:	0abd                	addi	s5,s5,15
     688:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     68a:	0001                	nop
            q[i] = q[i] + v[i];
     68c:	b45a                	fsd	fs6,40(sp)
     68e:	c800000b          	0xc800000b
     692:	0100000b          	0x100000b
        for(i = 0; i < size_N; ++i){
     696:	5a00                	lw	s0,48(a2)
	...
     6a0:	0abe                	slli	s5,s5,0xf
            if( num_temp[i] != 0 )
     6a2:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	0ad1                	addi	s5,s5,20
     6a6:	0000                	unimp
            v[i] = 0;
     6a8:	0001                	nop
     6aa:	c85a                	sw	s6,16(sp)
     6ac:	d800000b          	0xd800000b
     6b0:	0100000b          	0x100000b
        for (i = 0; i < size_N; ++i){
     6b4:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     6be:	0ad2                	slli	s5,s5,0x14
     6c0:	0000                	unimp
     6c2:	0aee                	slli	s5,s5,0x1b
     6c4:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0001                	nop
     6c8:	d85a                	sw	s6,48(sp)
     6ca:	e800000b          	0xe800000b
    int ri_2[size]; // MX-ring poly, a
     6ce:	0100000b          	0x100000b
     6d2:	5a00                	lw	s0,48(a2)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6dc:	0a3a                	slli	s4,s4,0xe
     6de:	0000                	unimp
     6e0:	0b12                	slli	s6,s6,0x4
     6e2:	0000                	unimp
     6e4:	0002                	c.slli64	zero
     6e6:	0072                	c.slli	zero,0x1c
     6e8:	0b12                	slli	s6,s6,0x4
     6ea:	0000                	unimp
     6ec:	0b2a                	slli	s6,s6,0xa
     6ee:	0000                	unimp
     6f0:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     6f2:	0084                	addi	s1,sp,64
     6f4:	0b2a                	slli	s6,s6,0xa
     6f6:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	0b32                	slli	s6,s6,0xc
     6fa:	0000                	unimp
     6fc:	0010                	0x10
    int ri[size];
     6fe:	0091                	addi	ra,ra,4
     700:	0086                	slli	ra,ra,0x1
     702:	2432                	fld	fs0,264(sp)
    int ti_1[size]; // ti_1[0] = 1
     704:	f0090f23          	sb	zero,-226(s2)
     708:	1c1a                	slli	s8,s8,0x26
    int ti[size];
     70a:	000a                	c.slli	zero,0x2
     70c:	1c02                	slli	s8,s8,0x20
     70e:	0b32                	slli	s6,s6,0xc
    int qi_1[size];
     710:	0000                	unimp
     712:	0b54                	addi	a3,sp,404
     714:	0000                	unimp
    int temp[size];
     716:	00910013          	addi	zero,sp,9
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	235a01f3          	0x235a01f3
     71e:	3201                	jal	1e <__DYNAMIC+0x1e>
    int ri_2[size]; // MX-ring poly, a
     720:	2324                	fld	fs1,64(a4)
     722:	1af0090f          	0x1af0090f
    for (i = 0; i < size; ++i) {
     726:	0a1c                	addi	a5,sp,272
        ti_2[i] = 0;
     728:	0200                	addi	s0,sp,256
     72a:	541c                	lw	a5,40(s0)
     72c:	fc00000b          	0xfc00000b
    for (i = 0; i < size; ++i) {
     730:	0200000b          	0x200000b
    array_equ(ri_2,polyR,size);
     734:	7200                	flw	fs0,32(a2)
	...
    array_equ(ri_1,polyf,size);
     73e:	3e00                	fld	fs0,56(a2)
     740:	000a                	c.slli	zero,0x2
     742:	4000                	lw	s0,0(s0)
    ti_1[0] = 1;
     744:	000a                	c.slli	zero,0x2
     746:	0200                	addi	s0,sp,256
     748:	3100                	fld	fs0,32(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	409f 000a 4600      	0x4600000a409f
     750:	000a                	c.slli	zero,0x2
            ti[i] = ti_2[i] - temp[i];
     752:	0100                	addi	s0,sp,128
     754:	5f00                	lw	s0,56(a4)
     756:	0a4a                	slli	s4,s4,0x12
     758:	0000                	unimp
    array_mod(ri_2,mod,size);
     75a:	0a50                	addi	a2,sp,276
     75c:	0000                	unimp
     75e:	0001                	nop
     760:	585f 000a 6600      	0x6600000a585f
    array_mod(ri_1,mod,size);
     766:	000a                	c.slli	zero,0x2
     768:	0100                	addi	s0,sp,128
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	5f00                	lw	s0,56(a4)
     76c:	0a70                	addi	a2,sp,284
     76e:	0000                	unimp
     770:	0a85                	addi	s5,s5,1
     772:	0000                	unimp
     774:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	865f 000a 9000      	0x9000000a865f
     77c:	000a                	c.slli	zero,0x2
     77e:	0500                	addi	s0,sp,640
     780:	8200                	0x8200
     782:	3100                	fld	fs0,32(a0)
        for (i = 0; i < N + 1; ++i) {
     784:	9f24                	0x9f24
     786:	0a90                	addi	a2,sp,336
     788:	0000                	unimp
    array_mod(temp,mod,size);
     78a:	0a9f 0000 0001      	0x100000a9f
     790:	a05f 000a b000      	0xb000000aa05f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     796:	000a                	c.slli	zero,0x2
     798:	0500                	addi	s0,sp,640
     79a:	8200                	0x8200
     79c:	3300                	fld	fs0,32(a4)
     79e:	9f1e                	add	t5,t5,t2
    array_equ(qi_1,res1,size);
     7a0:	0ab0                	addi	a2,sp,344
     7a2:	0000                	unimp
     7a4:	0abe                	slli	s5,s5,0xf
    array_mod(qi_1,mod,size);
     7a6:	0000                	unimp
     7a8:	0001                	nop
     7aa:	be59                	j	340 <polymult+0x186>
     7ac:	000a                	c.slli	zero,0x2
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	c600                	sw	s0,8(a2)
     7b0:	000a                	c.slli	zero,0x2
     7b2:	0200                	addi	s0,sp,256
     7b4:	3000                	fld	fs0,32(s0)
     7b6:	c69f 000a ce00      	0xce00000ac69f
     7bc:	000a                	c.slli	zero,0x2
    array_equ(temp,res2,size);
     7be:	0100                	addi	s0,sp,128
     7c0:	5e00                	lw	s0,56(a2)
     7c2:	0ad2                	slli	s5,s5,0x14
    array_mod(temp,mod,size);
     7c4:	0000                	unimp
     7c6:	0ae4                	addi	s1,sp,348
     7c8:	0000                	unimp
     7ca:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     7cc:	0082                	c.slli64	ra
     7ce:	2432                	fld	fs0,264(sp)
     7d0:	e49f 000a fe00      	0xfe00000ae49f
    array_mod(ti,mod,size);
     7d6:	000a                	c.slli	zero,0x2
     7d8:	0100                	addi	s0,sp,128
     7da:	6a00                	flw	fs0,16(a2)
array_equ(ri_2,ri_1,size);
     7dc:	0afe                	slli	s5,s5,0x1f
     7de:	0000                	unimp
     7e0:	0b06                	slli	s6,s6,0x1
     7e2:	0000                	unimp
array_equ(ri_1,ri,size);
     7e4:	0001                	nop
     7e6:	545f 000b 9000      	0x9000000b545f
array_equ(ti_2,ti_1,size);
     7ec:	0100000b          	0x100000b
     7f0:	5f00                	lw	s0,56(a4)
     7f2:	0b90                	addi	a2,sp,464
array_equ(ti_1,ti,size);
     7f4:	0000                	unimp
     7f6:	0b92                	slli	s7,s7,0x4
     7f8:	0000                	unimp
     7fa:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
        for (i = 0; i < N + 1; ++i) {
     7fe:	929f 000b b400      	0xb400000b929f
    while (controlR != 0) {
     804:	0100000b          	0x100000b
        for (j = 0; j < mod; ++j) {
     808:	5f00                	lw	s0,56(a4)
            if (((ri_2[0] * j) % mod) == 1)
     80a:	0bb4                	addi	a3,sp,472
        for (j = 0; j < mod; ++j) {
     80c:	0000                	unimp
     80e:	0bc4                	addi	s1,sp,468
     810:	0000                	unimp
     812:	0001                	nop
     814:	c459                	beqz	s0,8a2 <ext_euclid+0x1d6>
     816:	c600000b          	0xc600000b
        for (i = 0; i < N + 1; ++i) {
     81a:	0300000b          	0x300000b
    }
     81e:	7900                	flw	fs0,48(a0)
     820:	9f7f                	0x9f7f
     822:	0bc6                	slli	s7,s7,0x11
     824:	0000                	unimp
     826:	0bc8                	addi	a0,sp,468
     828:	0000                	unimp
     82a:	0001                	nop
     82c:	c859                	beqz	s0,8c2 <ext_euclid+0x1f6>
     82e:	cc00000b          	0xcc00000b
     832:	0100000b          	0x100000b
     836:	5e00                	lw	s0,56(a2)
     838:	0bcc                	addi	a1,sp,468
     83a:	0000                	unimp
     83c:	0bd6                	slli	s7,s7,0x15
     83e:	0000                	unimp
     840:	7f7e0003          	lb	zero,2039(t3) # 1a7f7 <_stack_start+0xa7f7>
     844:	d69f 000b d800      	0xd800000bd69f
        ti_2[i] = 0;
     84a:	0100000b          	0x100000b
        ti_1[i] = 0;
     84e:	5e00                	lw	s0,56(a2)
        ti_2[i] = 0;
     850:	0bd8                	addi	a4,sp,468
     852:	0000                	unimp
        ti_1[i] = 0;
     854:	0be8                	addi	a0,sp,476
     856:	0000                	unimp
    for (i = 0; i < size; ++i) {
     858:	0001                	nop
     85a:	e86a                	fsw	fs10,16(sp)
            ri[i - (N + 1)] = res[i];
     85c:	f800000b          	0xf800000b
     860:	0100000b          	0x100000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	5f00                	lw	s0,56(a4)
     866:	0bf8                	addi	a4,sp,476
            ri[i - (N + 1)] = res[i];
     868:	0000                	unimp
     86a:	0bfa                	slli	s7,s7,0x1e
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     86e:	7f7f0003          	lb	zero,2039(t5)
     872:	fa9f 000b fc00      	0xfc00000bfa9f
     878:	0100000b          	0x100000b
     87c:	5f00                	lw	s0,56(a4)
	...
        for (i = 0; i < N + 1; ++i) {
     886:	0b02                	c.slli64	s6
            ti[i] = ti_2[i] - temp[i];
     888:	0000                	unimp
     88a:	0b54                	addi	a3,sp,404
     88c:	0000                	unimp
     88e:	0006                	c.slli	zero,0x1
     890:	001ac003          	lbu	zero,1(s5)
     894:	9f00                	0x9f00
	...
        for (i = 0; i < N + 1; ++i) {
     89e:	0a3a                	slli	s4,s4,0xe
     8a0:	0000                	unimp
              qi_1[i] = 0;
     8a2:	0afe                	slli	s5,s5,0x1f
     8a4:	0000                	unimp
     8a6:	0001                	nop
     8a8:	fe62                	fsw	fs8,60(sp)
            controlR += ri[i];
     8aa:	000a                	c.slli	zero,0x2
     8ac:	3200                	fld	fs0,32(a2)
              qi_1[i] = 0;
     8ae:	0300000b          	0x300000b
        for (i = 0; i < N + 1; ++i) {
     8b2:	8600                	0x8600
            controlR += ri[i];
     8b4:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     8b6:	0b32                	slli	s6,s6,0xc
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	0000                	unimp
     8ba:	0b54                	addi	a3,sp,404
     8bc:	0000                	unimp
     8be:	0004                	0x4
     8c0:	9f5a01f3          	0x9f5a01f3
     8c4:	0b54                	addi	a3,sp,404
     8c6:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     8c8:	0be8                	addi	a0,sp,476
     8ca:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     8ce:	e862                	fsw	fs8,16(sp)
     8d0:	fc00000b          	0xfc00000b
            ti_2[i] = (ti_2[i] * j) % mod;
     8d4:	0300000b          	0x300000b
     8d8:	8600                	0x8600
     8da:	9f7f                	0x9f7f
	...
int* generate_keys(int N, int p, int q){
     8e4:	06cc                	addi	a1,sp,836
     8e6:	0000                	unimp
     8e8:	073a                	slli	a4,a4,0xe
     8ea:	0000                	unimp
     8ec:	0001                	nop
     8ee:	3a5a                	fld	fs4,432(sp)
     8f0:	3b000007          	0x3b000007
     8f4:	01000007          	0x1000007
     8f8:	5b00                	lw	s0,48(a4)
     8fa:	0000073b          	0x73b
     8fe:	0846                	slli	a6,a6,0x11
     900:	0000                	unimp
     902:	0004                	0x4
     904:	9f5a01f3          	0x9f5a01f3
     908:	0846                	slli	a6,a6,0x11
     90a:	0000                	unimp
     90c:	085c                	addi	a5,sp,20
     90e:	0000                	unimp
     910:	0001                	nop
     912:	5c5a                	lw	s8,180(sp)
     914:	0008                	0x8
     916:	e000                	fsw	fs0,0(s0)
	resultkon[0] = 0xaaaaaaa0;
     918:	0008                	0x8
     91a:	0400                	addi	s0,sp,512
     91c:	f300                	fsw	fs0,32(a4)
     91e:	5a01                	li	s4,-32
int* generate_keys(int N, int p, int q){
     920:	009f 0000 0000      	0x9f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     926:	0000                	unimp
     928:	cc00                	sw	s0,24(s0)
     92a:	0006                	c.slli	zero,0x1
	resultkon[0] = 0xaaaaaaa0;
     92c:	3600                	fld	fs0,40(a2)
     92e:	01000007          	0x1000007
     932:	5b00                	lw	s0,48(a4)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	0736                	slli	a4,a4,0xd
     936:	0000                	unimp
	resultkon[0] = 0xaaaaaaa0;
     938:	075a                	slli	a4,a4,0x16
     93a:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93c:	0001                	nop
     93e:	00075a6b          	0x75a6b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     942:	4600                	lw	s0,8(a2)
     944:	0008                	0x8
     946:	0400                	addi	s0,sp,512
     948:	f300                	fsw	fs0,32(a4)
     94a:	5b01                	li	s6,-32
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     94c:	469f 0008 5c00      	0x5c000008469f
     952:	0008                	0x8
     954:	0100                	addi	s0,sp,128
     956:	5b00                	lw	s0,48(a4)
     958:	085c                	addi	a5,sp,20
     95a:	0000                	unimp
     95c:	08e0                	addi	s0,sp,92
     95e:	0000                	unimp
     960:	0004                	0x4
     962:	9f5b01f3          	0x9f5b01f3
	...
     96e:	06cc                	addi	a1,sp,836
     970:	0000                	unimp
     972:	0730                	addi	a2,sp,904
     974:	0000                	unimp
     976:	0001                	nop
     978:	305c                	fld	fa5,160(s0)
     97a:	26000007          	0x26000007
     97e:	0008                	0x8
     980:	0100                	addi	s0,sp,128
     982:	5900                	lw	s0,48(a0)
     984:	0826                	slli	a6,a6,0x9
     986:	0000                	unimp
     988:	0832                	slli	a6,a6,0xc
     98a:	0000                	unimp
     98c:	01870003          	lb	zero,24(a4)
     990:	329f 0008 4600      	0x46000008329f
     996:	0008                	0x8
     998:	0400                	addi	s0,sp,512
     99a:	f300                	fsw	fs0,32(a4)
     99c:	5c01                	li	s8,-32
     99e:	469f 0008 e000      	0xe0000008469f
     9a4:	0008                	0x8
     9a6:	0100                	addi	s0,sp,128
     9a8:	5900                	lw	s0,48(a0)
	...
     9b2:	06cc                	addi	a1,sp,836
     9b4:	0000                	unimp
     9b6:	0730                	addi	a2,sp,904
    int polyR[N+1];
     9b8:	0000                	unimp
     9ba:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9bc:	305d                	jal	262 <polymult+0xa8>
    int polyR[N+1];
     9be:	28000007          	0x28000007
     9c2:	0008                	0x8
     9c4:	0100                	addi	s0,sp,128
     9c6:	6200                	flw	fs0,0(a2)
     9c8:	0828                	addi	a0,sp,24
     9ca:	0000                	unimp
    polyR[N] = 1;
     9cc:	0846                	slli	a6,a6,0x11
     9ce:	0000                	unimp
     9d0:	0004                	0x4
     9d2:	9f5d01f3          	0x9f5d01f3
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9d6:	0846                	slli	a6,a6,0x11
     9d8:	0000                	unimp
     9da:	08e0                	addi	s0,sp,92
     9dc:	0000                	unimp
     9de:	0001                	nop
     9e0:	0062                	c.slli	zero,0x18
     9e2:	0000                	unimp
     9e4:	0000                	unimp
     9e6:	0000                	unimp
     9e8:	1c00                	addi	s0,sp,560
     9ea:	0008                	0x8
     9ec:	4600                	lw	s0,8(a2)
     9ee:	0008                	0x8
     9f0:	0600                	addi	s0,sp,768
     9f2:	0300                	addi	s0,sp,384
     9f4:	1930                	addi	a2,sp,184
     9f6:	0000                	unimp
     9f8:	009f 0000 0000      	0x9f
     9fe:	0000                	unimp
     a00:	2600                	fld	fs0,8(a2)
     a02:	32000007          	0x32000007
     a06:	0008                	0x8
     a08:	0100                	addi	s0,sp,128
     a0a:	6700                	flw	fs0,8(a4)
     a0c:	0832                	slli	a6,a6,0xc
     a0e:	0000                	unimp
     a10:	0846                	slli	a6,a6,0x11
     a12:	0000                	unimp
     a14:	0006                	c.slli	zero,0x1
     a16:	315c01f3          	0x315c01f3
     a1a:	9f1c                	0x9f1c
     a1c:	0846                	slli	a6,a6,0x11
     a1e:	0000                	unimp
     a20:	08e0                	addi	s0,sp,92
     a22:	0000                	unimp
     a24:	0001                	nop
     a26:	00000067          	jr	zero # 0 <__DYNAMIC>
     a2a:	0000                	unimp
     a2c:	0000                	unimp
     a2e:	2600                	fld	fs0,8(a2)
     a30:	30000007          	0x30000007
     a34:	02000007          	0x2000007
     a38:	3000                	fld	fs0,32(s0)
    polyR[0] = -1;
     a3a:	309f 0007 3b00      	0x3b000007309f
    for(i = 1; i < N; ++i){
     a40:	01000007          	0x1000007
     a44:	5f00                	lw	s0,56(a4)
    for (i = N; i < 55; ++i ){
     a46:	0776                	slli	a4,a4,0x1d
     a48:	0000                	unimp
     a4a:	077a                	slli	a4,a4,0x1e
     a4c:	0000                	unimp
    for(i = 0; i < N; ++i){
     a4e:	0001                	nop
        random_keys[i] = f[i];
     a50:	7a59                	lui	s4,0xffff6
     a52:	84000007          	0x84000007
     a56:	01000007          	0x1000007
    for(i = 0; i < N; ++i){
     a5a:	5f00                	lw	s0,56(a4)
     a5c:	0786                	slli	a5,a5,0x1
     a5e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a60:	0791                	addi	a5,a5,4
     a62:	0000                	unimp
     a64:	0001                	nop
     a66:	cc5e                	sw	s7,24(sp)
        random_keys[i] = g[i-N];
     a68:	d0000007          	0xd0000007
     a6c:	02000007          	0x2000007
    for(i = N; i < (2*N); ++i){
     a70:	3000                	fld	fs0,32(s0)
     a72:	d09f 0007 db00      	0xdb000007d09f
    for(i = (2*N); i < (3*N); ++i){
     a78:	01000007          	0x1000007
    fp = ext_euclid(polyR, f, (N+1), p);
     a7c:	5e00                	lw	s0,56(a2)
     a7e:	07fc                	addi	a5,sp,972
     a80:	0000                	unimp
     a82:	0800                	addi	s0,sp,16
     a84:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     a86:	0002                	c.slli64	zero
        random_keys[i] = fp[i-(2*N)];
     a88:	9f30                	0x9f30
     a8a:	0800                	addi	s0,sp,16
     a8c:	0000                	unimp
     a8e:	080a                	slli	a6,a6,0x2
    for(i = (2*N); i < (3*N); ++i){
     a90:	0000                	unimp
     a92:	0001                	nop
    fq = ext_euclid(polyR, f, (N+1), q);
     a94:	185e                	slli	a6,a6,0x37
     a96:	0008                	0x8
     a98:	6600                	flw	fs0,8(a2)
     a9a:	0008                	0x8
     a9c:	0100                	addi	s0,sp,128
     a9e:	5f00                	lw	s0,56(a4)
    for(i = (3*N); i < (4*N); ++i){
     aa0:	0866                	slli	a6,a6,0x19
     aa2:	0000                	unimp
     aa4:	086c                	addi	a1,sp,28
     aa6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     aa8:	7f7f0003          	lb	zero,2039(t5)
     aac:	6c9f 0008 6e00      	0x6e0000086c9f
    for(i = (3*N); i < (4*N); ++i){
     ab2:	0008                	0x8
    fg = polymult2(fq, N, g, N, 0);
     ab4:	0100                	addi	s0,sp,128
     ab6:	5f00                	lw	s0,56(a4)
     ab8:	086e                	slli	a6,a6,0x1b
     aba:	0000                	unimp
     abc:	0880                	addi	s0,sp,80
    for(i = 0; i < (2*N-1); ++i){
     abe:	0000                	unimp
     ac0:	0001                	nop
     ac2:	805e                	c.mv	zero,s7
     ac4:	0008                	0x8
     ac6:	8400                	0x8400
     ac8:	0008                	0x8
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aca:	0300                	addi	s0,sp,384
     acc:	7e00                	flw	fs0,56(a2)
     ace:	9f7f                	0x9f7f
     ad0:	0884                	addi	s1,sp,80
    for(i = (4*N); i < (5*N); ++i){
     ad2:	0000                	unimp
     ad4:	089a                	slli	a7,a7,0x6
     ad6:	0000                	unimp
     ad8:	0001                	nop
     ada:	9a5e                	add	s4,s4,s7
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     adc:	0008                	0x8
     ade:	9e00                	0x9e00
     ae0:	0008                	0x8
     ae2:	0300                	addi	s0,sp,384
    for(i = (4*N); i < (5*N); ++i){
     ae4:	7e00                	flw	fs0,56(a2)
     ae6:	9f7f                	0x9f7f
     ae8:	089e                	slli	a7,a7,0x7
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	0000                	unimp
     aec:	08b4                	addi	a3,sp,88
        random_keys[i] = polyR[i-(5*N)];
     aee:	0000                	unimp
     af0:	0001                	nop
     af2:	b45e                	fsd	fs7,40(sp)
     af4:	0008                	0x8
    for(i = (5*N); i < (6*N+1); ++i){
     af6:	b600                	fsd	fs0,40(a2)
     af8:	0008                	0x8
     afa:	0300                	addi	s0,sp,384
     afc:	7e00                	flw	fs0,56(a2)
     afe:	9f7f                	0x9f7f
     b00:	08b6                	slli	a7,a7,0xd
	resultkon[0] = 0xaaaaaaa1;
     b02:	0000                	unimp
     b04:	08b8                	addi	a4,sp,88
     b06:	0000                	unimp
     b08:	0001                	nop
     b0a:	cc5e                	sw	s7,24(sp)
     b0c:	0008                	0x8
}
     b0e:	d000                	sw	s0,32(s0)
     b10:	0008                	0x8
     b12:	0100                	addi	s0,sp,128
     b14:	5f00                	lw	s0,56(a4)
     b16:	08d0                	addi	a2,sp,84
     b18:	0000                	unimp
     b1a:	08de                	slli	a7,a7,0x17
     b1c:	0000                	unimp
     b1e:	7f7f0003          	lb	zero,2039(t5)
     b22:	de9f 0008 e000      	0xe0000008de9f
     b28:	0008                	0x8
     b2a:	0100                	addi	s0,sp,128
     b2c:	5f00                	lw	s0,56(a4)
	...
     b36:	080c                	addi	a1,sp,16
     b38:	0000                	unimp
     b3a:	0846                	slli	a6,a6,0x11
     b3c:	0000                	unimp
     b3e:	0001                	nop
     b40:	b85e                	fsd	fs7,48(sp)
     b42:	0008                	0x8
     b44:	e000                	fsw	fs0,0(s0)
     b46:	0008                	0x8
     b48:	0100                	addi	s0,sp,128
     b4a:	5e00                	lw	s0,56(a2)
	...
        polyR[i] = 0;
     b54:	0724                	addi	s1,sp,904
     b56:	0000                	unimp
     b58:	082a                	slli	a6,a6,0xa
     b5a:	0000                	unimp
     b5c:	0002                	c.slli64	zero
    for(i = 1; i < N; ++i){
     b5e:	08460083          	lb	ra,132(a2)
        f[i] = 0;
     b62:	0000                	unimp
     b64:	08e0                	addi	s0,sp,92
     b66:	0000                	unimp
     b68:	0002                	c.slli64	zero
     b6a:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
     b6e:	0000                	unimp
        g[i] = 0;
     b70:	0000                	unimp
     b72:	0000                	unimp
     b74:	0724                	addi	s1,sp,904
     b76:	0000                	unimp
     b78:	082c                	addi	a1,sp,24
    for (i = N; i < 55; ++i ){
     b7a:	0000                	unimp
     b7c:	0002                	c.slli64	zero
        random_keys[i] = f[i];
     b7e:	0084                	addi	s1,sp,64
     b80:	0846                	slli	a6,a6,0x11
     b82:	0000                	unimp
     b84:	08e0                	addi	s0,sp,92
     b86:	0000                	unimp
     b88:	0002                	c.slli64	zero
     b8a:	0084                	addi	s1,sp,64
	...
        random_keys[i] = g[i-N];
     b94:	0724                	addi	s1,sp,904
     b96:	0000                	unimp
     b98:	0834                	addi	a3,sp,24
     b9a:	0000                	unimp
     b9c:	0002                	c.slli64	zero
    for(i = N; i < (2*N); ++i){
     b9e:	0088                	addi	a0,sp,64
     ba0:	0846                	slli	a6,a6,0x11
     ba2:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     ba4:	08e0                	addi	s0,sp,92
     ba6:	0000                	unimp
     ba8:	0002                	c.slli64	zero
     baa:	0088                	addi	a0,sp,64
	...
        random_keys[i] = fq[i-(3*N)];
     bb4:	0724                	addi	s1,sp,904
     bb6:	0000                	unimp
     bb8:	0830                	addi	a2,sp,24
     bba:	0000                	unimp
     bbc:	0002                	c.slli64	zero
     bbe:	0086                	slli	ra,ra,0x1
     bc0:	0830                	addi	a2,sp,24
    for(i = (3*N); i < (4*N); ++i){
     bc2:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bc4:	0832                	slli	a6,a6,0xc
    for(i = (3*N); i < (4*N); ++i){
     bc6:	0000                	unimp
        fg[i] = fg[i]*p;
     bc8:	000c                	0xc
    for(i = 0; i < (2*N-1); ++i){
     bca:	0088                	addi	a0,sp,64
     bcc:	24320187          	0x24320187
        fg[i] = fg[i]*p;
     bd0:	f0090f23          	sb	zero,-226(s2)
     bd4:	1c1a                	slli	s8,s8,0x26
    for(i = 0; i < (2*N-1); ++i){
     bd6:	0832                	slli	a6,a6,0xc
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd8:	0000                	unimp
     bda:	0834                	addi	a3,sp,24
     bdc:	0000                	unimp
     bde:	000d                	c.nop	3
     be0:	0088                	addi	a0,sp,64
     be2:	325c01f3          	0x325c01f3
    for(i = (4*N); i < (5*N); ++i){
     be6:	2324                	fld	fs1,64(a4)
        random_keys[i] = polyR[i-(5*N)];
     be8:	1af0090f          	0x1af0090f
     bec:	461c                	lw	a5,8(a2)
     bee:	0008                	0x8
     bf0:	e000                	fsw	fs0,0(s0)
     bf2:	0008                	0x8
     bf4:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	8600                	0x8600
	...
	resultkon[0] = 0xbbbbbbb0;
     c00:	2400                	fld	fs0,8(s0)
     c02:	38000007          	0x38000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c06:	0008                	0x8
     c08:	0200                	addi	s0,sp,256
     c0a:	8a00                	0x8a00
     c0c:	4600                	lw	s0,8(a2)
     c0e:	0008                	0x8
     c10:	e000                	fsw	fs0,0(s0)
     c12:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	0200                	addi	s0,sp,256
     c16:	8a00                	0x8a00
	...
	resultkon[0] = 0xbbbbbbb0;
     c20:	2400                	fld	fs0,8(s0)
     c22:	36000007          	0x36000007
     c26:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c28:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	8900                	0x8900
     c2c:	3600                	fld	fs0,40(a2)
     c2e:	0008                	0x8
     c30:	3800                	fld	fs0,48(s0)
     c32:	0008                	0x8
	resultkon[0] = 0xbbbbbbb0;
     c34:	0d00                	addi	s0,sp,656
     c36:	8a00                	0x8a00
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c38:	f300                	fsw	fs0,32(a4)
    temp = polymult(public_key,N,random_val,48,q,0);
     c3a:	5c01                	li	s8,-32
     c3c:	2432                	fld	fs0,264(sp)
     c3e:	f0090f23          	sb	zero,-226(s2)
     c42:	1c1a                	slli	s8,s8,0x26
     c44:	0846                	slli	a6,a6,0x11
     c46:	0000                	unimp
     c48:	08e0                	addi	s0,sp,92
     c4a:	0000                	unimp
     c4c:	0002                	c.slli64	zero
    for(i = 0; i < 48; ++i){
     c4e:	0089                	addi	ra,ra,2
	...
        temp[i] = temp[i] + message[i];
     c58:	0726                	slli	a4,a4,0x9
     c5a:	0000                	unimp
     c5c:	0820                	addi	s0,sp,24
     c5e:	0000                	unimp
     c60:	0002                	c.slli64	zero
     c62:	0072                	c.slli	zero,0x1c
    for(i = 0; i < 48; ++i){
     c64:	0820                	addi	s0,sp,24
     c66:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	082e                	slli	a6,a6,0xb
     c6a:	0000                	unimp
     c6c:	0002                	c.slli64	zero
     c6e:	0085                	addi	ra,ra,1
     c70:	082e                	slli	a6,a6,0xb
     c72:	0000                	unimp
     c74:	0832                	slli	a6,a6,0xc
     c76:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c78:	000c                	0xc
     c7a:	0089                	addi	ra,ra,2
     c7c:	24320187          	0x24320187
     c80:	f0090f23          	sb	zero,-226(s2)
}
     c84:	1c1a                	slli	s8,s8,0x26
     c86:	0832                	slli	a6,a6,0xc
	resultkon[0] = 0xbbbbbbb1;
     c88:	0000                	unimp
     c8a:	0836                	slli	a6,a6,0xd
     c8c:	0000                	unimp
     c8e:	000d                	c.nop	3
     c90:	0089                	addi	ra,ra,2
     c92:	325c01f3          	0x325c01f3
}
     c96:	2324                	fld	fs1,64(a4)
     c98:	1af0090f          	0x1af0090f
     c9c:	361c                	fld	fa5,40(a2)
     c9e:	0008                	0x8
     ca0:	3800                	fld	fs0,48(s0)
        CT[i-(2*N)] = CT[i];
     ca2:	0008                	0x8
     ca4:	0f00                	addi	s0,sp,912
     ca6:	8a00                	0x8a00
     ca8:	f300                	fsw	fs0,32(a4)
    for(i = (2*N); i < (3*N); ++i){
     caa:	5c01                	li	s8,-32
     cac:	2432                	fld	fs0,264(sp)
        CT[i-(2*N)] = CT[i];
     cae:	f0090f23          	sb	zero,-226(s2)
    for(i = (2*N); i < (3*N); ++i){
     cb2:	311a                	fld	ft2,416(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	1c24                	addi	s1,sp,568
     cb6:	0846                	slli	a6,a6,0x11
     cb8:	0000                	unimp
     cba:	08e0                	addi	s0,sp,92
    for(i = (2*N); i < ((2*N)+N); ++i){
     cbc:	0000                	unimp
     cbe:	0002                	c.slli64	zero
     cc0:	0072                	c.slli	zero,0x1c
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	0776                	slli	a4,a4,0x1d
	resultkon[0] = 0xccccccc0;
     ccc:	0000                	unimp
     cce:	0790                	addi	a2,sp,960
     cd0:	0000                	unimp
     cd2:	0001                	nop
     cd4:	5c5a                	lw	s8,180(sp)
     cd6:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd8:	8800                	0x8800
     cda:	0008                	0x8
     cdc:	0100                	addi	s0,sp,128
     cde:	5a00                	lw	s0,48(a2)
	...
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce8:	07a0                	addi	s0,sp,968
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cea:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cec:	07a4                	addi	s1,sp,968
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cee:	0000                	unimp
     cf0:	0001                	nop
     cf2:	a45a                	fsd	fs6,8(sp)
     cf4:	a5000007          	0xa5000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cf8:	01000007          	0x1000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cfc:	5b00                	lw	s0,48(a4)
	...
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d06:	07be                	slli	a5,a5,0xf
     d08:	0000                	unimp
     d0a:	07c2                	slli	a5,a5,0x10
     d0c:	0000                	unimp
     d0e:	0001                	nop
     d10:	c25a                	sw	s6,4(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d12:	c3000007          	0xc3000007
     d16:	01000007          	0x1000007
     d1a:	5b00                	lw	s0,48(a4)
	...
    for (i = 0; i < N; ++i){
     d24:	0726                	slli	a4,a4,0x9
     d26:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     d28:	075a                	slli	a4,a4,0x16
     d2a:	0000                	unimp
     d2c:	0002                	c.slli64	zero
     d2e:	9f31                	0x9f31
     d30:	075a                	slli	a4,a4,0x16
     d32:	0000                	unimp
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d34:	0800                	addi	s0,sp,16
     d36:	0000                	unimp
     d38:	0002                	c.slli64	zero
     d3a:	9f30                	0x9f30
     d3c:	0800                	addi	s0,sp,16
     d3e:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	0818                	addi	a4,sp,16
     d42:	0000                	unimp
     d44:	0001                	nop
}
     d46:	465f 0008 5c00      	0x5c000008465f
	resultkon[0] = 0xccccccc1;
     d4c:	0008                	0x8
     d4e:	0200                	addi	s0,sp,256
     d50:	3100                	fld	fs0,32(a0)
     d52:	5c9f 0008 a200      	0xa20000085c9f
}
     d58:	0008                	0x8
     d5a:	0200                	addi	s0,sp,256
     d5c:	3000                	fld	fs0,32(s0)
     d5e:	a29f 0008 cc00      	0xcc000008a29f
     d64:	0008                	0x8
     d66:	0100                	addi	s0,sp,128
     d68:	5f00                	lw	s0,56(a4)
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	0724                	addi	s1,sp,904
     d74:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d76:	0832                	slli	a6,a6,0xc
     d78:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d7a:	0001                	nop
        if(a2[i] <= q/2)
     d7c:	00083267          	0x83267
     d80:	4600                	lw	s0,8(a2)
            a2[i] = (-1)*(q-a2[i]);
     d82:	0008                	0x8
     d84:	0600                	addi	s0,sp,768
     d86:	f300                	fsw	fs0,32(a4)
    for (i = 0; i < N; ++i){
     d88:	5c01                	li	s8,-32
     d8a:	1c31                	addi	s8,s8,-20
     d8c:	469f 0008 e000      	0xe0000008469f
        c2[i-(2*N)] = c2[i];
     d92:	0008                	0x8
     d94:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d96:	6700                	flw	fs0,8(a4)
	...
     da0:	0724                	addi	s1,sp,904
     da2:	0000                	unimp
     da4:	0832                	slli	a6,a6,0xc
     da6:	0000                	unimp
     da8:	0001                	nop
     daa:	00083267          	0x83267
     dae:	4600                	lw	s0,8(a2)
     db0:	0008                	0x8
     db2:	0600                	addi	s0,sp,768
     db4:	f300                	fsw	fs0,32(a4)
     db6:	5c01                	li	s8,-32
     db8:	1c31                	addi	s8,s8,-20
     dba:	469f 0008 e000      	0xe0000008469f
     dc0:	0008                	0x8
     dc2:	0100                	addi	s0,sp,128
     dc4:	6700                	flw	fs0,8(a4)
	...
     dce:	0724                	addi	s1,sp,904
     dd0:	0000                	unimp
     dd2:	0832                	slli	a6,a6,0xc
     dd4:	0000                	unimp
     dd6:	0001                	nop
     dd8:	00083267          	0x83267
     ddc:	4600                	lw	s0,8(a2)
     dde:	0008                	0x8
     de0:	0600                	addi	s0,sp,768
     de2:	f300                	fsw	fs0,32(a4)
     de4:	5c01                	li	s8,-32
     de6:	1c31                	addi	s8,s8,-20
     de8:	469f 0008 e000      	0xe0000008469f
     dee:	0008                	0x8
     df0:	0100                	addi	s0,sp,128
     df2:	6700                	flw	fs0,8(a4)
	...
     dfc:	0724                	addi	s1,sp,904
     dfe:	0000                	unimp
     e00:	0832                	slli	a6,a6,0xc
     e02:	0000                	unimp
     e04:	0001                	nop
     e06:	00083267          	0x83267
     e0a:	4600                	lw	s0,8(a2)
     e0c:	0008                	0x8
     e0e:	0600                	addi	s0,sp,768
     e10:	f300                	fsw	fs0,32(a4)
     e12:	5c01                	li	s8,-32
     e14:	1c31                	addi	s8,s8,-20
     e16:	469f 0008 e000      	0xe0000008469f
     e1c:	0008                	0x8
     e1e:	0100                	addi	s0,sp,128
     e20:	6700                	flw	fs0,8(a4)
	...
     e2a:	0724                	addi	s1,sp,904
     e2c:	0000                	unimp
     e2e:	0832                	slli	a6,a6,0xc
     e30:	0000                	unimp
     e32:	0001                	nop
     e34:	00083267          	0x83267
     e38:	4600                	lw	s0,8(a2)
     e3a:	0008                	0x8
     e3c:	0600                	addi	s0,sp,768
     e3e:	f300                	fsw	fs0,32(a4)
     e40:	5c01                	li	s8,-32
     e42:	1c31                	addi	s8,s8,-20
     e44:	469f 0008 e000      	0xe0000008469f
     e4a:	0008                	0x8
     e4c:	0100                	addi	s0,sp,128
     e4e:	6700                	flw	fs0,8(a4)
	...
     e58:	0724                	addi	s1,sp,904
     e5a:	0000                	unimp
     e5c:	0832                	slli	a6,a6,0xc
     e5e:	0000                	unimp
     e60:	0001                	nop
     e62:	00083267          	0x83267
     e66:	4600                	lw	s0,8(a2)
     e68:	0008                	0x8
     e6a:	0600                	addi	s0,sp,768
     e6c:	f300                	fsw	fs0,32(a4)
     e6e:	5c01                	li	s8,-32
     e70:	1c31                	addi	s8,s8,-20
     e72:	469f 0008 e000      	0xe0000008469f
     e78:	0008                	0x8
     e7a:	0100                	addi	s0,sp,128
     e7c:	6700                	flw	fs0,8(a4)
	...
     e86:	0724                	addi	s1,sp,904
     e88:	0000                	unimp
     e8a:	0832                	slli	a6,a6,0xc
     e8c:	0000                	unimp
     e8e:	0001                	nop
     e90:	00083267          	0x83267
     e94:	4600                	lw	s0,8(a2)
     e96:	0008                	0x8
     e98:	0600                	addi	s0,sp,768
     e9a:	f300                	fsw	fs0,32(a4)
     e9c:	5c01                	li	s8,-32
     e9e:	1c31                	addi	s8,s8,-20
     ea0:	469f 0008 e000      	0xe0000008469f
     ea6:	0008                	0x8
     ea8:	0100                	addi	s0,sp,128
     eaa:	6700                	flw	fs0,8(a4)
	...
     eb4:	04fc                	addi	a5,sp,588
     eb6:	0000                	unimp
     eb8:	054e                	slli	a0,a0,0x13
     eba:	0000                	unimp
     ebc:	0001                	nop
     ebe:	4e5a                	lw	t3,148(sp)
     ec0:	0005                	c.nop	1
     ec2:	5700                	lw	s0,40(a4)
     ec4:	0005                	c.nop	1
     ec6:	0100                	addi	s0,sp,128
     ec8:	5b00                	lw	s0,48(a4)
     eca:	00000557          	0x557
     ece:	06cc                	addi	a1,sp,836
     ed0:	0000                	unimp
     ed2:	0004                	0x4
     ed4:	9f5a01f3          	0x9f5a01f3
	...
     ee0:	04fc                	addi	a5,sp,588
     ee2:	0000                	unimp
     ee4:	054c                	addi	a1,sp,644
     ee6:	0000                	unimp
     ee8:	0001                	nop
     eea:	00054c5b          	0x54c5b
     eee:	ea00                	fsw	fs0,16(a2)
     ef0:	0005                	c.nop	1
     ef2:	0100                	addi	s0,sp,128
     ef4:	5900                	lw	s0,48(a0)
     ef6:	05ea                	slli	a1,a1,0x1a
     ef8:	0000                	unimp
     efa:	060a                	slli	a2,a2,0x2
     efc:	0000                	unimp
     efe:	018a0003          	lb	zero,24(s4) # ffff6018 <_stack_start+0xfffe6018>
     f02:	0a9f 0006 1800      	0x180000060a9f
     f08:	0006                	c.slli	zero,0x1
     f0a:	0400                	addi	s0,sp,512
     f0c:	f300                	fsw	fs0,32(a4)
     f0e:	5b01                	li	s6,-32
     f10:	189f 0006 ba00      	0xba000006189f
     f16:	0006                	c.slli	zero,0x1
     f18:	0100                	addi	s0,sp,128
     f1a:	5900                	lw	s0,48(a0)
     f1c:	06ba                	slli	a3,a3,0xe
     f1e:	0000                	unimp
     f20:	06cc                	addi	a1,sp,836
     f22:	0000                	unimp
     f24:	018a0003          	lb	zero,24(s4)
     f28:	009f 0000 0000      	0x9f
     f2e:	0000                	unimp
     f30:	fc00                	fsw	fs0,56(s0)
     f32:	0004                	0x4
     f34:	4a00                	lw	s0,16(a2)
     f36:	0005                	c.nop	1
     f38:	0100                	addi	s0,sp,128
     f3a:	5c00                	lw	s0,56(s0)
     f3c:	054a                	slli	a0,a0,0x12
     f3e:	0000                	unimp
     f40:	0588                	addi	a0,sp,704
     f42:	0000                	unimp
     f44:	0001                	nop
     f46:	8868                	0x8868
     f48:	0005                	c.nop	1
     f4a:	9200                	0x9200
     f4c:	0005                	c.nop	1
     f4e:	0400                	addi	s0,sp,512
     f50:	f300                	fsw	fs0,32(a4)
     f52:	5c01                	li	s8,-32
     f54:	929f 0005 ae00      	0xae000005929f
     f5a:	0005                	c.nop	1
     f5c:	0100                	addi	s0,sp,128
     f5e:	6800                	flw	fs0,16(s0)
     f60:	05ae                	slli	a1,a1,0xb
     f62:	0000                	unimp
     f64:	06cc                	addi	a1,sp,836
     f66:	0000                	unimp
     f68:	0004                	0x4
     f6a:	9f5c01f3          	0x9f5c01f3
	...
     f76:	04fc                	addi	a5,sp,588
     f78:	0000                	unimp
     f7a:	00000557          	0x557
     f7e:	0001                	nop
     f80:	575d                	li	a4,-9
     f82:	0005                	c.nop	1
     f84:	fe00                	fsw	fs0,56(a2)
     f86:	0005                	c.nop	1
     f88:	0100                	addi	s0,sp,128
     f8a:	6400                	flw	fs0,8(s0)
     f8c:	05fe                	slli	a1,a1,0x1f
     f8e:	0000                	unimp
     f90:	0618                	addi	a4,sp,768
     f92:	0000                	unimp
     f94:	0004                	0x4
     f96:	9f5d01f3          	0x9f5d01f3
     f9a:	0618                	addi	a4,sp,768
int main(){
     f9c:	0000                	unimp
     f9e:	06cc                	addi	a1,sp,836
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fa0:	0000                	unimp
     fa2:	0001                	nop
     fa4:	0064                	addi	s1,sp,12
     fa6:	0000                	unimp
     fa8:	0000                	unimp
     faa:	0000                	unimp
     fac:	fc00                	fsw	fs0,56(s0)
int main(){
     fae:	0004                	0x4
     fb0:	5700                	lw	s0,40(a4)
     fb2:	0005                	c.nop	1
     fb4:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fb6:	5e00                	lw	s0,56(a2)
    keys = generate_keys(N, p, q);
     fb8:	00000557          	0x557
     fbc:	05fc                	addi	a5,sp,716
     fbe:	0000                	unimp
     fc0:	0001                	nop
     fc2:	0005fc63          	bgeu	a1,zero,fda <main+0x3e>
    for(i = 0; i < N; ++i){
     fc6:	1800                	addi	s0,sp,48
     fc8:	0006                	c.slli	zero,0x1
        secret_key_f[i] = keys[i];
     fca:	0400                	addi	s0,sp,512
     fcc:	f300                	fsw	fs0,32(a4)
     fce:	5e01                	li	t3,-32
     fd0:	189f 0006 cc00      	0xcc000006189f
    for(i = 0; i < N; ++i){
     fd6:	0006                	c.slli	zero,0x1
     fd8:	0100                	addi	s0,sp,128
     fda:	6300                	flw	fs0,0(a4)
	...
    for(i = N; i < (2*N); ++i){
     fe4:	058a                	slli	a1,a1,0x2
     fe6:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     fe8:	0592                	slli	a1,a1,0x4
     fea:	0000                	unimp
     fec:	0001                	nop
     fee:	ae68                	fsd	fa0,216(a2)
     ff0:	0005                	c.nop	1
    for(i = (2*N); i < (3*N); ++i){
     ff2:	0600                	addi	s0,sp,768
     ff4:	0006                	c.slli	zero,0x1
    for(i = (3*N); i < (4*N); ++i){
     ff6:	0100                	addi	s0,sp,128
     ff8:	6800                	flw	fs0,16(s0)
     ffa:	0618                	addi	a4,sp,768
     ffc:	0000                	unimp
     ffe:	06cc                	addi	a1,sp,836
    1000:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
    1002:	0001                	nop
    1004:	0068                	addi	a0,sp,12
    1006:	0000                	unimp
    1008:	0000                	unimp
    100a:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
    100c:	cc00                	sw	s0,24(s0)
    100e:	0005                	c.nop	1
    1010:	dd00                	sw	s0,56(a0)
    1012:	0005                	c.nop	1
    1014:	0100                	addi	s0,sp,128
    1016:	5f00                	lw	s0,56(a4)
        ring_poly[i-(5*N)] = keys[i];
    1018:	0618                	addi	a4,sp,768
    101a:	0000                	unimp
    101c:	0620                	addi	s0,sp,776
    101e:	0000                	unimp
    1020:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
    1022:	005f 0000 0000      	0x5f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	0000                	unimp
    102a:	7200                	flw	fs0,32(a2)
    102c:	0005                	c.nop	1
    102e:	7400                	flw	fs0,40(s0)
    1030:	0005                	c.nop	1
    1032:	0200                	addi	s0,sp,256
    1034:	3000                	fld	fs0,32(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1036:	749f 0005 7800      	0x78000005749f
    103c:	0005                	c.nop	1
    103e:	0100                	addi	s0,sp,128
    1040:	5f00                	lw	s0,56(a4)
    1042:	0578                	addi	a4,sp,652
    1044:	0000                	unimp
    1046:	0592                	slli	a1,a1,0x4
    1048:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    104a:	0001                	nop
    104c:	9265                	srli	a2,a2,0x39
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104e:	0005                	c.nop	1
    1050:	a800                	fsd	fs0,16(s0)
    1052:	0005                	c.nop	1
    1054:	0100                	addi	s0,sp,128
    1056:	5f00                	lw	s0,56(a4)
            resultkon[0] = 0xDEDEDEDE;
    1058:	05a8                	addi	a0,sp,712
    105a:	0000                	unimp
    for(i = 0; i < 32; ++i){
    105c:	05bc                	addi	a5,sp,712
    105e:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
    1060:	0001                	nop
    1062:	bc65                	j	b1a <generate_keys+0x23a>
    1064:	0005                	c.nop	1
    1066:	cc00                	sw	s0,24(s0)
    1068:	0005                	c.nop	1
    106a:	0100                	addi	s0,sp,128
    106c:	5f00                	lw	s0,56(a4)
    106e:	05de                	slli	a1,a1,0x17
            resultkon[0] = 0xBABABABA;
    1070:	0000                	unimp
    1072:	05f8                	addi	a4,sp,716
    1074:	0000                	unimp
    1076:	0001                	nop
    1078:	4459                	li	s0,22
}
    107a:	0006                	c.slli	zero,0x1
    107c:	4800                	lw	s0,16(s0)
    107e:	0006                	c.slli	zero,0x1
    1080:	0200                	addi	s0,sp,256
    1082:	3000                	fld	fs0,32(s0)
    1084:	489f 0006 5300      	0x53000006489f
            resultkon[0] = 0xDEDEDEDE;
    108a:	0006                	c.slli	zero,0x1
    for(i = 0; i < 32; ++i){
    108c:	0100                	addi	s0,sp,128
    108e:	5f00                	lw	s0,56(a4)
    1090:	0654                	addi	a3,sp,772
    1092:	0000                	unimp
    1094:	0658                	addi	a4,sp,772
    1096:	0000                	unimp
    1098:	0002                	c.slli64	zero
    109a:	9f30                	0x9f30
    109c:	0658                	addi	a4,sp,772
    109e:	0000                	unimp
    10a0:	00000663          	beqz	zero,10ac <__DTOR_END__+0x8>
    10a4:	0001                	nop
    10a6:	645f 0006 6600      	0x66000006645f
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	6a00                	flw	fs0,16(a2)
    10b2:	0666                	slli	a2,a2,0x19
    10b4:	0000                	unimp
    10b6:	0682                	c.slli64	a3
    10b8:	0000                	unimp
    10ba:	0001                	nop
    10bc:	825f 0006 8a00      	0x8a000006825f
    10c2:	0006                	c.slli	zero,0x1
    10c4:	0300                	addi	s0,sp,384
    10c6:	7f00                	flw	fs0,56(a4)
    10c8:	9f7f                	0x9f7f
    10ca:	068a                	slli	a3,a3,0x2
    10cc:	0000                	unimp
    10ce:	0698                	addi	a4,sp,832
    10d0:	0000                	unimp
    10d2:	0001                	nop
    10d4:	985f 0006 a000      	0xa0000006985f
    10da:	0006                	c.slli	zero,0x1
    10dc:	0300                	addi	s0,sp,384
    10de:	7f00                	flw	fs0,56(a4)
    10e0:	9f7f                	0x9f7f
    10e2:	06a0                	addi	s0,sp,840
    10e4:	0000                	unimp
    10e6:	06a8                	addi	a0,sp,840
    10e8:	0000                	unimp
    10ea:	0001                	nop
    10ec:	a85f 0006 ba00      	0xba000006a85f
    10f2:	0006                	c.slli	zero,0x1
    10f4:	0100                	addi	s0,sp,128
    10f6:	5d00                	lw	s0,56(a0)
    10f8:	06ba                	slli	a3,a3,0xe
    10fa:	0000                	unimp
    10fc:	06cc                	addi	a1,sp,836
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0059                	c.nop	22
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	0000                	unimp
    110a:	cc00                	sw	s0,24(s0)
    110c:	0005                	c.nop	1
    110e:	dd00                	sw	s0,56(a0)
    1110:	0005                	c.nop	1
    1112:	0100                	addi	s0,sp,128
    1114:	5e00                	lw	s0,56(a2)
    1116:	0618                	addi	a4,sp,768
    1118:	0000                	unimp
    111a:	061c                	addi	a5,sp,768
    111c:	0000                	unimp
    111e:	0001                	nop
    1120:	005e                	c.slli	zero,0x17
    1122:	0000                	unimp
    1124:	0000                	unimp
    1126:	0000                	unimp
    1128:	ee00                	fsw	fs0,24(a2)
    112a:	0005                	c.nop	1
    112c:	1800                	addi	s0,sp,48
    112e:	0006                	c.slli	zero,0x1
    1130:	0600                	addi	s0,sp,768
    1132:	0300                	addi	s0,sp,384
    1134:	16d8                	addi	a4,sp,868
    1136:	0000                	unimp
    1138:	009f 0000 0000      	0x9f
    113e:	0000                	unimp
    1140:	4800                	lw	s0,16(s0)
    1142:	0005                	c.nop	1
    1144:	0200                	addi	s0,sp,256
    1146:	0006                	c.slli	zero,0x1
    1148:	0200                	addi	s0,sp,256
    114a:	8600                	0x8600
    114c:	1800                	addi	s0,sp,48
    114e:	0006                	c.slli	zero,0x1
    1150:	cc00                	sw	s0,24(s0)
    1152:	0006                	c.slli	zero,0x1
    1154:	0200                	addi	s0,sp,256
    1156:	8600                	0x8600
	...
    1160:	4800                	lw	s0,16(s0)
    1162:	0005                	c.nop	1
    1164:	0400                	addi	s0,sp,512
    1166:	0006                	c.slli	zero,0x1
    1168:	0200                	addi	s0,sp,256
    116a:	8700                	0x8700
    116c:	1800                	addi	s0,sp,48
    116e:	0006                	c.slli	zero,0x1
    1170:	cc00                	sw	s0,24(s0)
    1172:	0006                	c.slli	zero,0x1
    1174:	0200                	addi	s0,sp,256
    1176:	8700                	0x8700
	...
    1180:	4200                	lw	s0,0(a2)
    1182:	0006                	c.slli	zero,0x1
    1184:	4300                	lw	s0,0(a4)
    1186:	0006                	c.slli	zero,0x1
    1188:	0100                	addi	s0,sp,128
    118a:	5a00                	lw	s0,48(a2)
    118c:	00000643          	fmadd.s	fa2,ft0,ft0,ft0,rne
    1190:	06ba                	slli	a3,a3,0xe
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000006b          	0x6b
    119a:	0000                	unimp
    119c:	0000                	unimp
    119e:	4800                	lw	s0,16(s0)
    11a0:	0005                	c.nop	1
    11a2:	ea00                	fsw	fs0,16(a2)
    11a4:	0005                	c.nop	1
    11a6:	0200                	addi	s0,sp,256
    11a8:	8200                	0x8200
    11aa:	ea00                	fsw	fs0,16(a2)
    11ac:	0005                	c.nop	1
    11ae:	0400                	addi	s0,sp,512
    11b0:	0006                	c.slli	zero,0x1
    11b2:	0c00                	addi	s0,sp,528
    11b4:	8700                	0x8700
    11b6:	8a00                	0x8a00
    11b8:	3201                	jal	ab8 <generate_keys+0x1d8>
    11ba:	2324                	fld	fs1,64(a4)
    11bc:	1af0090f          	0x1af0090f
    11c0:	181c                	addi	a5,sp,48
    11c2:	0006                	c.slli	zero,0x1
    11c4:	ba00                	fsd	fs0,48(a2)
    11c6:	0006                	c.slli	zero,0x1
    11c8:	0200                	addi	s0,sp,256
    11ca:	8200                	0x8200
    11cc:	ba00                	fsd	fs0,48(a2)
    11ce:	0006                	c.slli	zero,0x1
    11d0:	cc00                	sw	s0,24(s0)
    11d2:	0006                	c.slli	zero,0x1
    11d4:	0c00                	addi	s0,sp,528
    11d6:	8700                	0x8700
    11d8:	8a00                	0x8a00
    11da:	3201                	jal	ada <generate_keys+0x1fa>
    11dc:	2324                	fld	fs1,64(a4)
    11de:	1af0090f          	0x1af0090f
    11e2:	001c                	0x1c
    11e4:	0000                	unimp
    11e6:	0000                	unimp
    11e8:	0000                	unimp
    11ea:	6200                	flw	fs0,0(a2)
    11ec:	0005                	c.nop	1
    11ee:	7400                	flw	fs0,40(s0)
    11f0:	0005                	c.nop	1
    11f2:	0200                	addi	s0,sp,256
    11f4:	8900                	0x8900
    11f6:	7400                	flw	fs0,40(s0)
    11f8:	0005                	c.nop	1
    11fa:	f200                	fsw	fs0,32(a2)
    11fc:	0005                	c.nop	1
    11fe:	0200                	addi	s0,sp,256
    1200:	7200                	flw	fs0,32(a2)
    1202:	f200                	fsw	fs0,32(a2)
    1204:	0005                	c.nop	1
    1206:	0800                	addi	s0,sp,16
    1208:	0006                	c.slli	zero,0x1
    120a:	0200                	addi	s0,sp,256
    120c:	8900                	0x8900
    120e:	1800                	addi	s0,sp,48
    1210:	0006                	c.slli	zero,0x1
    1212:	cc00                	sw	s0,24(s0)
    1214:	0006                	c.slli	zero,0x1
    1216:	0200                	addi	s0,sp,256
    1218:	7200                	flw	fs0,32(a2)
	...
    1222:	4800                	lw	s0,16(s0)
    1224:	0005                	c.nop	1
    1226:	0a00                	addi	s0,sp,272
    1228:	0006                	c.slli	zero,0x1
    122a:	0100                	addi	s0,sp,128
    122c:	6a00                	flw	fs0,16(a2)
    122e:	060a                	slli	a2,a2,0x2
    1230:	0000                	unimp
    1232:	0618                	addi	a4,sp,768
    1234:	0000                	unimp
    1236:	0006                	c.slli	zero,0x1
    1238:	315b01f3          	0x315b01f3
    123c:	9f1c                	0x9f1c
    123e:	0618                	addi	a4,sp,768
    1240:	0000                	unimp
    1242:	06cc                	addi	a1,sp,836
    1244:	0000                	unimp
    1246:	0001                	nop
    1248:	006a                	c.slli	zero,0x1a
    124a:	0000                	unimp
    124c:	0000                	unimp
    124e:	0000                	unimp
    1250:	4800                	lw	s0,16(s0)
    1252:	0005                	c.nop	1
    1254:	0a00                	addi	s0,sp,272
    1256:	0006                	c.slli	zero,0x1
    1258:	0100                	addi	s0,sp,128
    125a:	6a00                	flw	fs0,16(a2)
    125c:	060a                	slli	a2,a2,0x2
    125e:	0000                	unimp
    1260:	0618                	addi	a4,sp,768
    1262:	0000                	unimp
    1264:	0006                	c.slli	zero,0x1
    1266:	315b01f3          	0x315b01f3
    126a:	9f1c                	0x9f1c
    126c:	0618                	addi	a4,sp,768
    126e:	0000                	unimp
    1270:	06cc                	addi	a1,sp,836
    1272:	0000                	unimp
    1274:	0001                	nop
    1276:	006a                	c.slli	zero,0x1a
    1278:	0000                	unimp
    127a:	0000                	unimp
    127c:	0000                	unimp
    127e:	4800                	lw	s0,16(s0)
    1280:	0005                	c.nop	1
    1282:	0a00                	addi	s0,sp,272
    1284:	0006                	c.slli	zero,0x1
    1286:	0100                	addi	s0,sp,128
    1288:	6a00                	flw	fs0,16(a2)
    128a:	060a                	slli	a2,a2,0x2
    128c:	0000                	unimp
    128e:	0618                	addi	a4,sp,768
    1290:	0000                	unimp
    1292:	0006                	c.slli	zero,0x1
    1294:	315b01f3          	0x315b01f3
    1298:	9f1c                	0x9f1c
    129a:	0618                	addi	a4,sp,768
    129c:	0000                	unimp
    129e:	06cc                	addi	a1,sp,836
    12a0:	0000                	unimp
    12a2:	0001                	nop
    12a4:	006a                	c.slli	zero,0x1a
    12a6:	0000                	unimp
    12a8:	0000                	unimp
    12aa:	0000                	unimp
    12ac:	5600                	lw	s0,40(a2)
    12ae:	0005                	c.nop	1
    12b0:	7800                	flw	fs0,48(s0)
    12b2:	0005                	c.nop	1
    12b4:	0100                	addi	s0,sp,128
    12b6:	6500                	flw	fs0,8(a0)
    12b8:	0578                	addi	a4,sp,652
    12ba:	0000                	unimp
    12bc:	0592                	slli	a1,a1,0x4
    12be:	0000                	unimp
    12c0:	7f840003          	lb	zero,2040(s0) # ffff77f8 <_stack_start+0xfffe77f8>
    12c4:	929f 0005 a800      	0xa8000005929f
    12ca:	0005                	c.nop	1
    12cc:	0100                	addi	s0,sp,128
    12ce:	6500                	flw	fs0,8(a0)
    12d0:	05a8                	addi	a0,sp,712
    12d2:	0000                	unimp
    12d4:	05fe                	slli	a1,a1,0x1f
    12d6:	0000                	unimp
    12d8:	7f840003          	lb	zero,2040(s0)
    12dc:	fe9f 0005 1800      	0x18000005fe9f
    12e2:	0006                	c.slli	zero,0x1
    12e4:	0600                	addi	s0,sp,768
    12e6:	f300                	fsw	fs0,32(a4)
    12e8:	5d01                	li	s10,-32
    12ea:	1c31                	addi	s8,s8,-20
    12ec:	189f 0006 cc00      	0xcc000006189f
    12f2:	0006                	c.slli	zero,0x1
    12f4:	0300                	addi	s0,sp,384
    12f6:	8400                	0x8400
    12f8:	9f7f                	0x9f7f
	...
    1302:	038c                	addi	a1,sp,448
    1304:	0000                	unimp
    1306:	0408                	addi	a0,sp,512
    1308:	0000                	unimp
    130a:	0001                	nop
    130c:	085a                	slli	a6,a6,0x16
    130e:	0004                	0x4
    1310:	0d00                	addi	s0,sp,656
    1312:	0004                	0x4
    1314:	0100                	addi	s0,sp,128
    1316:	5b00                	lw	s0,48(a4)
    1318:	040d                	addi	s0,s0,3
    131a:	0000                	unimp
    131c:	0434                	addi	a3,sp,520
    131e:	0000                	unimp
    1320:	0004                	0x4
    1322:	9f5a01f3          	0x9f5a01f3
    1326:	0434                	addi	a3,sp,520
    1328:	0000                	unimp
    132a:	0456                	slli	s0,s0,0x15
    132c:	0000                	unimp
    132e:	0001                	nop
    1330:	565a                	lw	a2,180(sp)
    1332:	0004                	0x4
    1334:	fc00                	fsw	fs0,56(s0)
    1336:	0004                	0x4
    1338:	0400                	addi	s0,sp,512
    133a:	f300                	fsw	fs0,32(a4)
    133c:	5a01                	li	s4,-32
    133e:	009f 0000 0000      	0x9f
    1344:	0000                	unimp
    1346:	8c00                	0x8c00
    1348:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    134c:	0004                	0x4
    134e:	0100                	addi	s0,sp,128
    1350:	5b00                	lw	s0,48(a4)
    1352:	0406                	slli	s0,s0,0x1
    1354:	0000                	unimp
    1356:	040d                	addi	s0,s0,3
    1358:	0000                	unimp
    135a:	0001                	nop
    135c:	0d5c                	addi	a5,sp,660
    135e:	0004                	0x4
    1360:	3400                	fld	fs0,40(s0)
    1362:	0004                	0x4
    1364:	0300                	addi	s0,sp,384
    1366:	8800                	0x8800
    1368:	9f01                	0x9f01
    136a:	0434                	addi	a3,sp,520
    136c:	0000                	unimp
    136e:	0456                	slli	s0,s0,0x15
    1370:	0000                	unimp
    1372:	0001                	nop
    1374:	0004565b          	0x4565b
    1378:	ea00                	fsw	fs0,16(a2)
    137a:	0004                	0x4
    137c:	0300                	addi	s0,sp,384
    137e:	8800                	0x8800
    1380:	9f01                	0x9f01
    1382:	04ea                	slli	s1,s1,0x1a
    1384:	0000                	unimp
    1386:	04fc                	addi	a5,sp,588
    1388:	0000                	unimp
    138a:	0004                	0x4
    138c:	9f5b01f3          	0x9f5b01f3
	...
    1398:	038c                	addi	a1,sp,448
    139a:	0000                	unimp
    139c:	03fe                	slli	t2,t2,0x1f
    139e:	0000                	unimp
    13a0:	0001                	nop
    13a2:	fe5c                	fsw	fa5,60(a2)
    13a4:	0d000003          	lb	zero,208(zero) # d0 <array_equ+0x3e>
    13a8:	0004                	0x4
    13aa:	0100                	addi	s0,sp,128
    13ac:	6000                	flw	fs0,0(s0)
    13ae:	040d                	addi	s0,s0,3
    13b0:	0000                	unimp
    13b2:	0434                	addi	a3,sp,520
    13b4:	0000                	unimp
    13b6:	bc780003          	lb	zero,-1081(a6) # 590b4ffb <_stack_start+0x590a4ffb>
    13ba:	347f                	0x347f
    13bc:	0004                	0x4
    13be:	5600                	lw	s0,40(a2)
    13c0:	0004                	0x4
    13c2:	0100                	addi	s0,sp,128
    13c4:	6000                	flw	fs0,0(s0)
    13c6:	0456                	slli	s0,s0,0x15
    13c8:	0000                	unimp
    13ca:	04da                	slli	s1,s1,0x16
    13cc:	0000                	unimp
    13ce:	bc780003          	lb	zero,-1081(a6)
    13d2:	da7f                	0xda7f
    13d4:	0004                	0x4
    13d6:	fc00                	fsw	fs0,56(s0)
    13d8:	0004                	0x4
    13da:	0300                	addi	s0,sp,384
    13dc:	9100                	0x9100
    13de:	7fbc                	flw	fa5,120(a5)
	...
    13e8:	038c                	addi	a1,sp,448
    13ea:	0000                	unimp
    13ec:	03f4                	addi	a3,sp,460
    13ee:	0000                	unimp
    13f0:	0001                	nop
    13f2:	f45d                	bnez	s0,13a0 <_bss_start+0x178>
    13f4:	e0000003          	lb	zero,-512(zero) # fffffe00 <_stack_start+0xfffefe00>
    13f8:	0004                	0x4
    13fa:	0100                	addi	s0,sp,128
    13fc:	6300                	flw	fs0,0(a4)
    13fe:	04e0                	addi	s0,sp,588
    1400:	0000                	unimp
    1402:	04fc                	addi	a5,sp,588
    1404:	0000                	unimp
    1406:	0004                	0x4
    1408:	9f5d01f3          	0x9f5d01f3
	...
    1414:	038c                	addi	a1,sp,448
    1416:	0000                	unimp
    1418:	03f6                	slli	t2,t2,0x1d
    141a:	0000                	unimp
    141c:	0001                	nop
    141e:	f65e                	fsw	fs7,44(sp)
    1420:	f0000003          	lb	zero,-256(zero) # ffffff00 <_stack_start+0xfffeff00>
    1424:	0004                	0x4
    1426:	0100                	addi	s0,sp,128
    1428:	6b00                	flw	fs0,16(a4)
    142a:	04f0                	addi	a2,sp,588
    142c:	0000                	unimp
    142e:	04fc                	addi	a5,sp,588
    1430:	0000                	unimp
    1432:	0004                	0x4
    1434:	9f5e01f3          	0x9f5e01f3
	...
    1440:	03e8                	addi	a0,sp,460
    1442:	0000                	unimp
    1444:	042c                	addi	a1,sp,520
    1446:	0000                	unimp
    1448:	0002                	c.slli64	zero
    144a:	0082                	c.slli64	ra
    144c:	042c                	addi	a1,sp,520
    144e:	0000                	unimp
    1450:	0434                	addi	a3,sp,520
    1452:	0000                	unimp
    1454:	0002                	c.slli64	zero
    1456:	0089                	addi	ra,ra,2
    1458:	0434                	addi	a3,sp,520
    145a:	0000                	unimp
    145c:	0456                	slli	s0,s0,0x15
    145e:	0000                	unimp
    1460:	0002                	c.slli64	zero
    1462:	0082                	c.slli64	ra
    1464:	0456                	slli	s0,s0,0x15
    1466:	0000                	unimp
    1468:	047e                	slli	s0,s0,0x1f
    146a:	0000                	unimp
    146c:	0002                	c.slli64	zero
    146e:	0089                	addi	ra,ra,2
    1470:	0490                	addi	a2,sp,576
    1472:	0000                	unimp
    1474:	04b8                	addi	a4,sp,584
    1476:	0000                	unimp
    1478:	0002                	c.slli64	zero
    147a:	0089                	addi	ra,ra,2
	...
    1484:	03f0                	addi	a2,sp,460
    1486:	0000                	unimp
    1488:	03fe                	slli	t2,t2,0x1f
    148a:	0000                	unimp
    148c:	0002                	c.slli64	zero
    148e:	9f30                	0x9f30
    1490:	03fe                	slli	t2,t2,0x1f
    1492:	0000                	unimp
    1494:	040d                	addi	s0,s0,3
    1496:	0000                	unimp
    1498:	0001                	nop
    149a:	345e                	fld	fs0,496(sp)
    149c:	0004                	0x4
    149e:	5600                	lw	s0,40(a2)
    14a0:	0004                	0x4
    14a2:	0100                	addi	s0,sp,128
    14a4:	5e00                	lw	s0,56(a2)
    14a6:	047e                	slli	s0,s0,0x1f
    14a8:	0000                	unimp
    14aa:	0490                	addi	a2,sp,576
    14ac:	0000                	unimp
    14ae:	0001                	nop
    14b0:	b85c                	fsd	fa5,176(s0)
    14b2:	0004                	0x4
    14b4:	fc00                	fsw	fs0,56(s0)
    14b6:	0004                	0x4
    14b8:	0100                	addi	s0,sp,128
    14ba:	5c00                	lw	s0,56(s0)
	...
    14c4:	042c                	addi	a1,sp,520
    14c6:	0000                	unimp
    14c8:	0434                	addi	a3,sp,520
    14ca:	0000                	unimp
    14cc:	0001                	nop
    14ce:	3464                	fld	fs1,232(s0)
    14d0:	0004                	0x4
    14d2:	5000                	lw	s0,32(s0)
    14d4:	0004                	0x4
    14d6:	0100                	addi	s0,sp,128
    14d8:	5f00                	lw	s0,56(a4)
    14da:	0456                	slli	s0,s0,0x15
    14dc:	0000                	unimp
    14de:	047e                	slli	s0,s0,0x1f
    14e0:	0000                	unimp
    14e2:	0001                	nop
    14e4:	9064                	0x9064
    14e6:	0004                	0x4
    14e8:	b800                	fsd	fs0,48(s0)
    14ea:	0004                	0x4
    14ec:	0100                	addi	s0,sp,128
    14ee:	6400                	flw	fs0,8(s0)
    14f0:	04b8                	addi	a4,sp,584
    14f2:	0000                	unimp
    14f4:	04be                	slli	s1,s1,0xf
    14f6:	0000                	unimp
    14f8:	0001                	nop
    14fa:	be5e                	fsd	fs7,312(sp)
    14fc:	0004                	0x4
    14fe:	c600                	sw	s0,8(a2)
    1500:	0004                	0x4
    1502:	0300                	addi	s0,sp,384
    1504:	7e00                	flw	fs0,56(a2)
    1506:	9f7f                	0x9f7f
    1508:	04c6                	slli	s1,s1,0x11
    150a:	0000                	unimp
    150c:	04d2                	slli	s1,s1,0x14
    150e:	0000                	unimp
    1510:	0001                	nop
    1512:	005e                	c.slli	zero,0x17
    1514:	0000                	unimp
    1516:	0000                	unimp
    1518:	0000                	unimp
    151a:	5600                	lw	s0,40(a2)
    151c:	0004                	0x4
    151e:	6800                	flw	fs0,16(s0)
    1520:	0004                	0x4
    1522:	0100                	addi	s0,sp,128
    1524:	5f00                	lw	s0,56(a4)
    1526:	0468                	addi	a0,sp,524
    1528:	0000                	unimp
    152a:	046e                	slli	s0,s0,0x1b
    152c:	0000                	unimp
    152e:	017f0003          	lb	zero,23(t5)
    1532:	6e9f 0004 7800      	0x780000046e9f
    1538:	0004                	0x4
    153a:	0100                	addi	s0,sp,128
    153c:	5f00                	lw	s0,56(a4)
    153e:	0494                	addi	a3,sp,576
    1540:	0000                	unimp
    1542:	04a6                	slli	s1,s1,0x9
    1544:	0000                	unimp
    1546:	0001                	nop
    1548:	a65f 0004 ac00      	0xac000004a65f
    154e:	0004                	0x4
    1550:	0300                	addi	s0,sp,384
    1552:	7f00                	flw	fs0,56(a4)
    1554:	9f01                	0x9f01
    1556:	04ac                	addi	a1,sp,584
    1558:	0000                	unimp
    155a:	04b8                	addi	a4,sp,584
    155c:	0000                	unimp
    155e:	0001                	nop
    1560:	005f 0000 0000      	0x5f
    1566:	0000                	unimp
    1568:	ee00                	fsw	fs0,24(a2)
    156a:	ee000003          	lb	zero,-288(zero) # fffffee0 <_stack_start+0xfffefee0>
    156e:	0004                	0x4
    1570:	0200                	addi	s0,sp,256
    1572:	8a00                	0x8a00
	...
    157c:	f000                	fsw	fs0,32(s0)
    157e:	d6000003          	lb	zero,-672(zero) # fffffd60 <_stack_start+0xfffefd60>
    1582:	0004                	0x4
    1584:	0200                	addi	s0,sp,256
    1586:	7200                	flw	fs0,32(a2)
    1588:	d600                	sw	s0,40(a2)
    158a:	0004                	0x4
    158c:	dc00                	sw	s0,56(s0)
    158e:	0004                	0x4
    1590:	0200                	addi	s0,sp,256
    1592:	7900                	flw	fs0,48(a0)
    1594:	dc00                	sw	s0,56(s0)
    1596:	0004                	0x4
    1598:	e000                	fsw	fs0,0(s0)
    159a:	0004                	0x4
    159c:	0c00                	addi	s0,sp,528
    159e:	8a00                	0x8a00
    15a0:	8300                	0x8300
    15a2:	3200                	fld	fs0,32(a2)
    15a4:	2324                	fld	fs1,64(a4)
    15a6:	1af0090f          	0x1af0090f
    15aa:	e01c                	fsw	fa5,0(s0)
    15ac:	0004                	0x4
    15ae:	ee00                	fsw	fs0,24(a2)
    15b0:	0004                	0x4
    15b2:	0d00                	addi	s0,sp,656
    15b4:	8a00                	0x8a00
    15b6:	f300                	fsw	fs0,32(a4)
    15b8:	5d01                	li	s10,-32
    15ba:	2432                	fld	fs0,264(sp)
    15bc:	f0090f23          	sb	zero,-226(s2)
    15c0:	1c1a                	slli	s8,s8,0x26
	...
    15ca:	03e8                	addi	a0,sp,460
    15cc:	0000                	unimp
    15ce:	042c                	addi	a1,sp,520
    15d0:	0000                	unimp
    15d2:	0001                	nop
    15d4:	2c64                	fld	fs1,216(s0)
    15d6:	0004                	0x4
    15d8:	3400                	fld	fs0,40(s0)
    15da:	0004                	0x4
    15dc:	0300                	addi	s0,sp,384
    15de:	8300                	0x8300
    15e0:	9f7f                	0x9f7f
    15e2:	0434                	addi	a3,sp,520
    15e4:	0000                	unimp
    15e6:	0456                	slli	s0,s0,0x15
    15e8:	0000                	unimp
    15ea:	0001                	nop
    15ec:	5664                	lw	s1,108(a2)
    15ee:	0004                	0x4
    15f0:	e000                	fsw	fs0,0(s0)
    15f2:	0004                	0x4
    15f4:	0300                	addi	s0,sp,384
    15f6:	8300                	0x8300
    15f8:	9f7f                	0x9f7f
    15fa:	04e0                	addi	s0,sp,588
    15fc:	0000                	unimp
    15fe:	04fc                	addi	a5,sp,588
    1600:	0000                	unimp
    1602:	0006                	c.slli	zero,0x1
    1604:	315d01f3          	0x315d01f3
    1608:	9f1c                	0x9f1c
	...
    1612:	03a4                	addi	s1,sp,456
    1614:	0000                	unimp
    1616:	04e8                	addi	a0,sp,588
    1618:	0000                	unimp
    161a:	0001                	nop
    161c:	0004e867          	0x4e867
    1620:	ea00                	fsw	fs0,16(a2)
    1622:	0004                	0x4
    1624:	0700                	addi	s0,sp,896
    1626:	8800                	0x8800
    1628:	f300                	fsw	fs0,32(a4)
    162a:	5d01                	li	s10,-32
    162c:	9f22                	add	t5,t5,s0
    162e:	04ea                	slli	s1,s1,0x1a
    1630:	0000                	unimp
    1632:	04fc                	addi	a5,sp,588
    1634:	0000                	unimp
    1636:	000a                	c.slli	zero,0x2
    1638:	f35b01f3          	0xf35b01f3
    163c:	5d01                	li	s10,-32
    163e:	3122                	fld	ft2,40(sp)
    1640:	9f1c                	0x9f1c
	...
    164a:	03ee                	slli	t2,t2,0x1b
    164c:	0000                	unimp
    164e:	04ea                	slli	s1,s1,0x1a
    1650:	0000                	unimp
    1652:	0001                	nop
    1654:	ea68                	fsw	fa0,84(a2)
    1656:	0004                	0x4
    1658:	fc00                	fsw	fs0,56(s0)
    165a:	0004                	0x4
    165c:	0600                	addi	s0,sp,768
    165e:	f300                	fsw	fs0,32(a4)
    1660:	5b01                	li	s6,-32
    1662:	1c31                	addi	s8,s8,-20
    1664:	009f 0000 0000      	0x9f
    166a:	0000                	unimp
    166c:	ee00                	fsw	fs0,24(a2)
    166e:	2c000003          	lb	zero,704(zero) # 2c0 <polymult+0x106>
    1672:	0004                	0x4
    1674:	0100                	addi	s0,sp,128
    1676:	6400                	flw	fs0,8(s0)
    1678:	042c                	addi	a1,sp,520
    167a:	0000                	unimp
    167c:	0434                	addi	a3,sp,520
    167e:	0000                	unimp
    1680:	7f830003          	lb	zero,2040(t1)
    1684:	349f 0004 5600      	0x56000004349f
    168a:	0004                	0x4
    168c:	0100                	addi	s0,sp,128
    168e:	6400                	flw	fs0,8(s0)
    1690:	0456                	slli	s0,s0,0x15
    1692:	0000                	unimp
    1694:	04e0                	addi	s0,sp,588
    1696:	0000                	unimp
    1698:	7f830003          	lb	zero,2040(t1)
    169c:	e09f 0004 fc00      	0xfc000004e09f
    16a2:	0004                	0x4
    16a4:	0600                	addi	s0,sp,768
    16a6:	f300                	fsw	fs0,32(a4)
    16a8:	5d01                	li	s10,-32
    16aa:	1c31                	addi	s8,s8,-20
    16ac:	009f 0000 0000      	0x9f
    16b2:	0000                	unimp
    16b4:	ba00                	fsd	fs0,48(a2)
    16b6:	0001                	nop
    16b8:	3a00                	fld	fs0,48(a2)
    16ba:	0002                	c.slli64	zero
    16bc:	0100                	addi	s0,sp,128
    16be:	5a00                	lw	s0,48(a2)
    16c0:	023a                	slli	tp,tp,0xe
    16c2:	0000                	unimp
    16c4:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    16c8:	0001                	nop
    16ca:	00024b5b          	0x24b5b
    16ce:	8c00                	0x8c00
    16d0:	0002                	c.slli64	zero
    16d2:	0400                	addi	s0,sp,512
    16d4:	f300                	fsw	fs0,32(a4)
    16d6:	5a01                	li	s4,-32
    16d8:	8c9f 0002 ae00      	0xae0000028c9f
    16de:	0002                	c.slli64	zero
    16e0:	0100                	addi	s0,sp,128
    16e2:	5a00                	lw	s0,48(a2)
    16e4:	02ae                	slli	t0,t0,0xb
    16e6:	0000                	unimp
    16e8:	038c                	addi	a1,sp,448
    16ea:	0000                	unimp
    16ec:	0004                	0x4
    16ee:	9f5a01f3          	0x9f5a01f3
	...
    16fa:	01ba                	slli	gp,gp,0xe
    16fc:	0000                	unimp
    16fe:	0228                	addi	a0,sp,264
    1700:	0000                	unimp
    1702:	0001                	nop
    1704:	0002285b          	0x2285b
    1708:	e800                	fsw	fs0,16(s0)
    170a:	0002                	c.slli64	zero
    170c:	0100                	addi	s0,sp,128
    170e:	6500                	flw	fs0,8(a0)
    1710:	02e8                	addi	a0,sp,332
    1712:	0000                	unimp
    1714:	0300                	addi	s0,sp,384
    1716:	0000                	unimp
    1718:	bc910007          	0xbc910007
    171c:	067f                	0x67f
    171e:	009f0123          	sb	s1,2(t5)
    1722:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1726:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    172a:	6500                	flw	fs0,8(a0)
	...
    1734:	01ba                	slli	gp,gp,0xe
    1736:	0000                	unimp
    1738:	0230                	addi	a2,sp,264
    173a:	0000                	unimp
    173c:	0001                	nop
    173e:	305c                	fld	fa5,160(s0)
    1740:	0002                	c.slli64	zero
    1742:	4b00                	lw	s0,16(a4)
    1744:	0002                	c.slli64	zero
    1746:	0100                	addi	s0,sp,128
    1748:	6000                	flw	fs0,0(s0)
    174a:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    174e:	028c                	addi	a1,sp,320
    1750:	0000                	unimp
    1752:	b4780003          	lb	zero,-1209(a6)
    1756:	8c7f                	0x8c7f
    1758:	0002                	c.slli64	zero
    175a:	ae00                	fsd	fs0,24(a2)
    175c:	0002                	c.slli64	zero
    175e:	0100                	addi	s0,sp,128
    1760:	6000                	flw	fs0,0(s0)
    1762:	02ae                	slli	t0,t0,0xb
    1764:	0000                	unimp
    1766:	02de                	slli	t0,t0,0x17
    1768:	0000                	unimp
    176a:	b4780003          	lb	zero,-1209(a6)
    176e:	de7f                	0xde7f
    1770:	0002                	c.slli64	zero
    1772:	8c00                	0x8c00
    1774:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1778:	9100                	0x9100
    177a:	7fb4                	flw	fa3,120(a5)
	...
    1784:	01ba                	slli	gp,gp,0xe
    1786:	0000                	unimp
    1788:	01c4                	addi	s1,sp,196
    178a:	0000                	unimp
    178c:	0001                	nop
    178e:	c45d                	beqz	s0,183c <result+0x164>
    1790:	0001                	nop
    1792:	e200                	fsw	fs0,0(a2)
    1794:	0002                	c.slli64	zero
    1796:	0100                	addi	s0,sp,128
    1798:	6200                	flw	fs0,0(a2)
    179a:	02e2                	slli	t0,t0,0x18
    179c:	0000                	unimp
    179e:	0300                	addi	s0,sp,384
    17a0:	0000                	unimp
    17a2:	0004                	0x4
    17a4:	9f5d01f3          	0x9f5d01f3
    17a8:	0300                	addi	s0,sp,384
    17aa:	0000                	unimp
    17ac:	038c                	addi	a1,sp,448
    17ae:	0000                	unimp
    17b0:	0001                	nop
    17b2:	0062                	c.slli	zero,0x18
    17b4:	0000                	unimp
    17b6:	0000                	unimp
    17b8:	0000                	unimp
    17ba:	ba00                	fsd	fs0,48(a2)
    17bc:	0001                	nop
    17be:	e000                	fsw	fs0,0(s0)
    17c0:	0001                	nop
    17c2:	0100                	addi	s0,sp,128
    17c4:	5e00                	lw	s0,56(a2)
    17c6:	01e0                	addi	s0,sp,204
    17c8:	0000                	unimp
    17ca:	02e6                	slli	t0,t0,0x19
    17cc:	0000                	unimp
    17ce:	0001                	nop
    17d0:	e664                	fsw	fs1,76(a2)
    17d2:	0002                	c.slli64	zero
    17d4:	0000                	unimp
    17d6:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    17da:	f300                	fsw	fs0,32(a4)
    17dc:	5e01                	li	t3,-32
    17de:	009f 0003 8c00      	0x8c000003009f
    17e4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17e8:	6400                	flw	fs0,8(s0)
	...
    17f2:	01ba                	slli	gp,gp,0xe
    17f4:	0000                	unimp
    17f6:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    17fa:	0001                	nop
    17fc:	4b5f 0002 8c00      	0x8c0000024b5f
    1802:	0002                	c.slli64	zero
    1804:	0300                	addi	s0,sp,384
    1806:	7800                	flw	fs0,48(s0)
    1808:	7fb0                	flw	fa2,120(a5)
    180a:	028c                	addi	a1,sp,320
    180c:	0000                	unimp
    180e:	02ae                	slli	t0,t0,0xb
    1810:	0000                	unimp
    1812:	0001                	nop
    1814:	ae5f 0002 da00      	0xda000002ae5f
    181a:	0002                	c.slli64	zero
    181c:	0300                	addi	s0,sp,384
    181e:	7800                	flw	fs0,48(s0)
    1820:	7fb0                	flw	fa2,120(a5)
    1822:	02da                	slli	t0,t0,0x16
    1824:	0000                	unimp
    1826:	02fe                	slli	t0,t0,0x1f
    1828:	0000                	unimp
    182a:	0002                	c.slli64	zero
    182c:	0072                	c.slli	zero,0x1c
    182e:	02fe                	slli	t0,t0,0x1f
    1830:	0000                	unimp
    1832:	0300                	addi	s0,sp,384
    1834:	0000                	unimp
    1836:	b0720003          	lb	zero,-1273(tp) # fffffb07 <_stack_start+0xfffefb07>
    183a:	007f                	0x7f
    183c:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1840:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1844:	9100                	0x9100
    1846:	7fb0                	flw	fa2,120(a5)
	...
    1850:	021c                	addi	a5,sp,256
    1852:	0000                	unimp
    1854:	0230                	addi	a2,sp,264
    1856:	0000                	unimp
    1858:	0002                	c.slli64	zero
    185a:	02300087          	0x2300087
    185e:	0000                	unimp
    1860:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    1864:	0002                	c.slli64	zero
    1866:	007e                	c.slli	zero,0x1f
    1868:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    186c:	028c                	addi	a1,sp,320
    186e:	0000                	unimp
    1870:	0002                	c.slli64	zero
    1872:	028c0087          	0x28c0087
    1876:	0000                	unimp
    1878:	02ae                	slli	t0,t0,0xb
    187a:	0000                	unimp
    187c:	0002                	c.slli64	zero
    187e:	007e                	c.slli	zero,0x1f
    1880:	02ae                	slli	t0,t0,0xb
    1882:	0000                	unimp
    1884:	02ec                	addi	a1,sp,332
    1886:	0000                	unimp
    1888:	0002                	c.slli64	zero
    188a:	02ec0087          	0x2ec0087
    188e:	0000                	unimp
    1890:	0300                	addi	s0,sp,384
    1892:	0000                	unimp
    1894:	0004                	0x4
    1896:	b891                	j	10ea <__DTOR_END__+0x46>
    1898:	067f                	0x67f
    189a:	0300                	addi	s0,sp,384
    189c:	0000                	unimp
    189e:	038c                	addi	a1,sp,448
    18a0:	0000                	unimp
    18a2:	0002                	c.slli64	zero
    18a4:	00000087          	0x87
    18a8:	0000                	unimp
    18aa:	0000                	unimp
    18ac:	0000                	unimp
    18ae:	021e                	slli	tp,tp,0x7
    18b0:	0000                	unimp
    18b2:	0230                	addi	a2,sp,264
    18b4:	0000                	unimp
    18b6:	0002                	c.slli64	zero
    18b8:	9f30                	0x9f30
    18ba:	0230                	addi	a2,sp,264
    18bc:	0000                	unimp
    18be:	0236                	slli	tp,tp,0xd
    18c0:	0000                	unimp
    18c2:	0001                	nop
    18c4:	00028c5b          	0x28c5b
    18c8:	ae00                	fsd	fs0,24(a2)
    18ca:	0002                	c.slli64	zero
    18cc:	0100                	addi	s0,sp,128
    18ce:	5b00                	lw	s0,48(a4)
    18d0:	02b6                	slli	t0,t0,0xd
    18d2:	0000                	unimp
    18d4:	02c2                	slli	t0,t0,0x10
    18d6:	0000                	unimp
    18d8:	0001                	nop
    18da:	4c5d                	li	s8,23
    18dc:	6a000003          	lb	zero,1696(zero) # 6a0 <polydiv+0x1a4>
    18e0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18e4:	5d00                	lw	s0,56(a0)
    18e6:	036a                	slli	t1,t1,0x1a
    18e8:	0000                	unimp
    18ea:	0372                	slli	t1,t1,0x1c
    18ec:	0000                	unimp
    18ee:	0001                	nop
    18f0:	725c                	flw	fa5,36(a2)
    18f2:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0x114>
    18f6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    18fa:	7c00                	flw	fs0,56(s0)
    18fc:	9f7f                	0x9f7f
    18fe:	037e                	slli	t1,t1,0x1f
    1900:	0000                	unimp
    1902:	0388                	addi	a0,sp,448
    1904:	0000                	unimp
    1906:	0001                	nop
    1908:	005c                	addi	a5,sp,4
    190a:	0000                	unimp
    190c:	0000                	unimp
    190e:	0000                	unimp
    1910:	8400                	0x8400
    1912:	0002                	c.slli64	zero
    1914:	8c00                	0x8c00
    1916:	0002                	c.slli64	zero
    1918:	0100                	addi	s0,sp,128
    191a:	6600                	flw	fs0,8(a2)
    191c:	028c                	addi	a1,sp,320
    191e:	0000                	unimp
    1920:	02a8                	addi	a0,sp,328
    1922:	0000                	unimp
    1924:	0001                	nop
    1926:	b05c                	fsd	fa5,160(s0)
    1928:	0002                	c.slli64	zero
    192a:	b600                	fsd	fs0,40(a2)
    192c:	0002                	c.slli64	zero
    192e:	0100                	addi	s0,sp,128
    1930:	6600                	flw	fs0,8(a2)
    1932:	02c4                	addi	s1,sp,324
    1934:	0000                	unimp
    1936:	02d5                	addi	t0,t0,21
    1938:	0000                	unimp
    193a:	0001                	nop
    193c:	005e                	c.slli	zero,0x17
    193e:	4c000003          	lb	zero,1216(zero) # 4c0 <polymult2+0x134>
    1942:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1946:	6600                	flw	fs0,8(a2)
    1948:	034c                	addi	a1,sp,388
    194a:	0000                	unimp
    194c:	0350                	addi	a2,sp,388
    194e:	0000                	unimp
    1950:	0001                	nop
    1952:	505c                	lw	a5,36(s0)
    1954:	5a000003          	lb	zero,1440(zero) # 5a0 <polydiv+0xa4>
    1958:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    195c:	7c00                	flw	fs0,56(s0)
    195e:	9f7f                	0x9f7f
    1960:	035a                	slli	t1,t1,0x16
    1962:	0000                	unimp
    1964:	0364                	addi	s1,sp,396
    1966:	0000                	unimp
    1968:	0001                	nop
    196a:	6a5c                	flw	fa5,20(a2)
    196c:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    1970:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1974:	5e00                	lw	s0,56(a2)
	...
    197e:	0300                	addi	s0,sp,384
    1980:	0000                	unimp
    1982:	0312                	slli	t1,t1,0x4
    1984:	0000                	unimp
    1986:	0001                	nop
    1988:	125f 0003 1800      	0x18000003125f
    198e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1992:	7f00                	flw	fs0,56(a4)
    1994:	9f01                	0x9f01
    1996:	0318                	addi	a4,sp,384
    1998:	0000                	unimp
    199a:	0324                	addi	s1,sp,392
    199c:	0000                	unimp
    199e:	0001                	nop
    19a0:	285f 0003 3a00      	0x3a000003285f
    19a6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19aa:	5f00                	lw	s0,56(a4)
    19ac:	033a                	slli	t1,t1,0xe
    19ae:	0000                	unimp
    19b0:	0340                	addi	s0,sp,388
    19b2:	0000                	unimp
    19b4:	017f0003          	lb	zero,23(t5)
    19b8:	409f 0003 4c00      	0x4c000003409f
    19be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19c2:	5f00                	lw	s0,56(a4)
	...
    19cc:	02d6                	slli	t0,t0,0x15
    19ce:	0000                	unimp
    19d0:	0300                	addi	s0,sp,384
    19d2:	0000                	unimp
    19d4:	0006                	c.slli	zero,0x1
    19d6:	00122803          	lw	a6,1(tp) # 1 <__DYNAMIC+0x1>
    19da:	9f00                	0x9f00
	...
    19e4:	021c                	addi	a5,sp,256
    19e6:	0000                	unimp
    19e8:	02f4                	addi	a3,sp,332
    19ea:	0000                	unimp
    19ec:	0002                	c.slli64	zero
    19ee:	02f4008b          	0x2f4008b
    19f2:	0000                	unimp
    19f4:	0300                	addi	s0,sp,384
    19f6:	0000                	unimp
    19f8:	0012                	c.slli	zero,0x4
    19fa:	b891                	j	124e <_bss_start+0x26>
    19fc:	067f                	0x67f
    19fe:	bc91                	j	1452 <_bss_start+0x22a>
    1a00:	067f                	0x67f
    1a02:	24320123          	sb	gp,578(tp) # 242 <polymult+0x88>
    1a06:	f0090f23          	sb	zero,-226(s2)
    1a0a:	1c1a                	slli	s8,s8,0x26
    1a0c:	0300                	addi	s0,sp,384
    1a0e:	0000                	unimp
    1a10:	038c                	addi	a1,sp,448
    1a12:	0000                	unimp
    1a14:	0002                	c.slli64	zero
    1a16:	0000008b          	0x8b
    1a1a:	0000                	unimp
    1a1c:	0000                	unimp
    1a1e:	0000                	unimp
    1a20:	021e                	slli	tp,tp,0x7
    1a22:	0000                	unimp
    1a24:	02da                	slli	t0,t0,0x16
    1a26:	0000                	unimp
    1a28:	0002                	c.slli64	zero
    1a2a:	0072                	c.slli	zero,0x1c
    1a2c:	02da                	slli	t0,t0,0x16
    1a2e:	0000                	unimp
    1a30:	02e2                	slli	t0,t0,0x18
    1a32:	0000                	unimp
    1a34:	000c                	0xc
    1a36:	0082008b          	0x82008b
    1a3a:	2432                	fld	fs0,264(sp)
    1a3c:	f0090f23          	sb	zero,-226(s2)
    1a40:	1c1a                	slli	s8,s8,0x26
    1a42:	02e2                	slli	t0,t0,0x18
    1a44:	0000                	unimp
    1a46:	02f4                	addi	a3,sp,332
    1a48:	0000                	unimp
    1a4a:	000d                	c.nop	3
    1a4c:	01f3008b          	0x1f3008b
    1a50:	325d                	jal	13f6 <_bss_start+0x1ce>
    1a52:	2324                	fld	fs1,64(a4)
    1a54:	1af0090f          	0x1af0090f
    1a58:	f41c                	fsw	fa5,40(s0)
    1a5a:	0002                	c.slli64	zero
    1a5c:	0000                	unimp
    1a5e:	1d000003          	lb	zero,464(zero) # 1d0 <polymult+0x16>
    1a62:	9100                	0x9100
    1a64:	7fb8                	flw	fa4,120(a5)
    1a66:	9106                	add	sp,sp,ra
    1a68:	7fbc                	flw	fa5,120(a5)
    1a6a:	2306                	fld	ft6,64(sp)
    1a6c:	3201                	jal	136c <_bss_start+0x144>
    1a6e:	2324                	fld	fs1,64(a4)
    1a70:	1af0090f          	0x1af0090f
    1a74:	f31c                	fsw	fa5,32(a4)
    1a76:	5d01                	li	s10,-32
    1a78:	2432                	fld	fs0,264(sp)
    1a7a:	f0090f23          	sb	zero,-226(s2)
    1a7e:	1c1a                	slli	s8,s8,0x26
    1a80:	0300                	addi	s0,sp,384
    1a82:	0000                	unimp
    1a84:	038c                	addi	a1,sp,448
    1a86:	0000                	unimp
    1a88:	0002                	c.slli64	zero
    1a8a:	0072                	c.slli	zero,0x1c
	...
    1a94:	021c                	addi	a5,sp,256
    1a96:	0000                	unimp
    1a98:	0284                	addi	s1,sp,320
    1a9a:	0000                	unimp
    1a9c:	0001                	nop
    1a9e:	8466                	mv	s0,s9
    1aa0:	0002                	c.slli64	zero
    1aa2:	8c00                	0x8c00
    1aa4:	0002                	c.slli64	zero
    1aa6:	0300                	addi	s0,sp,384
    1aa8:	8200                	0x8200
    1aaa:	9f7f                	0x9f7f
    1aac:	028c                	addi	a1,sp,320
    1aae:	0000                	unimp
    1ab0:	02b0                	addi	a2,sp,328
    1ab2:	0000                	unimp
    1ab4:	0001                	nop
    1ab6:	b066                	fsd	fs9,32(sp)
    1ab8:	0002                	c.slli64	zero
    1aba:	e200                	fsw	fs0,0(a2)
    1abc:	0002                	c.slli64	zero
    1abe:	0300                	addi	s0,sp,384
    1ac0:	8200                	0x8200
    1ac2:	9f7f                	0x9f7f
    1ac4:	02e2                	slli	t0,t0,0x18
    1ac6:	0000                	unimp
    1ac8:	0300                	addi	s0,sp,384
    1aca:	0000                	unimp
    1acc:	0006                	c.slli	zero,0x1
    1ace:	315d01f3          	0x315d01f3
    1ad2:	9f1c                	0x9f1c
    1ad4:	0300                	addi	s0,sp,384
    1ad6:	0000                	unimp
    1ad8:	038c                	addi	a1,sp,448
    1ada:	0000                	unimp
    1adc:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1ae0:	009f 0000 0000      	0x9f
    1ae6:	0000                	unimp
    1ae8:	d400                	sw	s0,40(s0)
    1aea:	0001                	nop
    1aec:	f000                	fsw	fs0,32(s0)
    1aee:	0002                	c.slli64	zero
    1af0:	0100                	addi	s0,sp,128
    1af2:	6900                	flw	fs0,16(a0)
    1af4:	02f0                	addi	a2,sp,332
    1af6:	0000                	unimp
    1af8:	0300                	addi	s0,sp,384
    1afa:	0000                	unimp
    1afc:	0009                	c.nop	2
    1afe:	bc91                	j	1552 <product2+0xd2>
    1b00:	067f                	0x67f
    1b02:	225d01f3          	0x225d01f3
    1b06:	009f 0003 8c00      	0x8c000003009f
    1b0c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b10:	6900                	flw	fs0,16(a0)
	...
    1b1a:	021c                	addi	a5,sp,256
    1b1c:	0000                	unimp
    1b1e:	0000024b          	fnmsub.s	ft4,ft0,ft0,ft0,rne
    1b22:	0001                	nop
    1b24:	4b5d                	li	s6,23
    1b26:	0002                	c.slli64	zero
    1b28:	8c00                	0x8c00
    1b2a:	0002                	c.slli64	zero
    1b2c:	0300                	addi	s0,sp,384
    1b2e:	7800                	flw	fs0,48(s0)
    1b30:	7fbc                	flw	fa5,120(a5)
    1b32:	028c                	addi	a1,sp,320
    1b34:	0000                	unimp
    1b36:	02ae                	slli	t0,t0,0xb
    1b38:	0000                	unimp
    1b3a:	0001                	nop
    1b3c:	ae5d                	j	1ef2 <random_keys+0x432>
    1b3e:	0002                	c.slli64	zero
    1b40:	de00                	sw	s0,56(a2)
    1b42:	0002                	c.slli64	zero
    1b44:	0300                	addi	s0,sp,384
    1b46:	7800                	flw	fs0,48(s0)
    1b48:	7fbc                	flw	fa5,120(a5)
    1b4a:	02de                	slli	t0,t0,0x17
    1b4c:	0000                	unimp
    1b4e:	038c                	addi	a1,sp,448
    1b50:	0000                	unimp
    1b52:	bc910003          	lb	zero,-1079(sp)
    1b56:	007f                	0x7f
    1b58:	0000                	unimp
    1b5a:	0000                	unimp
    1b5c:	0000                	unimp
    1b5e:	1c00                	addi	s0,sp,560
    1b60:	0002                	c.slli64	zero
    1b62:	8400                	0x8400
    1b64:	0002                	c.slli64	zero
    1b66:	0100                	addi	s0,sp,128
    1b68:	6600                	flw	fs0,8(a2)
    1b6a:	0284                	addi	s1,sp,320
    1b6c:	0000                	unimp
    1b6e:	028c                	addi	a1,sp,320
    1b70:	0000                	unimp
    1b72:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1b76:	8c9f 0002 b000      	0xb00000028c9f
    1b7c:	0002                	c.slli64	zero
    1b7e:	0100                	addi	s0,sp,128
    1b80:	6600                	flw	fs0,8(a2)
    1b82:	02b0                	addi	a2,sp,328
    1b84:	0000                	unimp
    1b86:	02e2                	slli	t0,t0,0x18
    1b88:	0000                	unimp
    1b8a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1b8e:	e29f 0002 0000      	0x2e29f
    1b94:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1b98:	f300                	fsw	fs0,32(a4)
    1b9a:	5d01                	li	s10,-32
    1b9c:	1c31                	addi	s8,s8,-20
    1b9e:	009f 0003 8c00      	0x8c000003009f
    1ba4:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1ba8:	8200                	0x8200
    1baa:	9f7f                	0x9f7f
	...
    1bb4:	0092                	slli	ra,ra,0x4
    1bb6:	0000                	unimp
    1bb8:	00ea                	slli	ra,ra,0x1a
    1bba:	0000                	unimp
    1bbc:	0001                	nop
    1bbe:	0000ea5b          	0xea5b
    1bc2:	f200                	fsw	fs0,32(a2)
    1bc4:	0000                	unimp
    1bc6:	0400                	addi	s0,sp,512
    1bc8:	f300                	fsw	fs0,32(a4)
    1bca:	5b01                	li	s6,-32
    1bcc:	f29f 0000 2800      	0x28000000f29f
    1bd2:	0001                	nop
    1bd4:	0100                	addi	s0,sp,128
    1bd6:	5b00                	lw	s0,48(a4)
	...
    1be0:	0092                	slli	ra,ra,0x4
    1be2:	0000                	unimp
    1be4:	00aa                	slli	ra,ra,0xa
    1be6:	0000                	unimp
    1be8:	0001                	nop
    1bea:	aa5c                	fsd	fa5,144(a2)
    1bec:	0000                	unimp
    1bee:	b200                	fsd	fs0,32(a2)
    1bf0:	0000                	unimp
    1bf2:	0400                	addi	s0,sp,512
    1bf4:	f300                	fsw	fs0,32(a4)
    1bf6:	5c01                	li	s8,-32
    1bf8:	b29f 0000 c400      	0xc4000000b29f
    1bfe:	0000                	unimp
    1c00:	0100                	addi	s0,sp,128
    1c02:	5c00                	lw	s0,56(s0)
    1c04:	00c4                	addi	s1,sp,68
    1c06:	0000                	unimp
    1c08:	00d4                	addi	a3,sp,68
    1c0a:	0000                	unimp
    1c0c:	0004                	0x4
    1c0e:	9f5c01f3          	0x9f5c01f3
    1c12:	00d4                	addi	a3,sp,68
    1c14:	0000                	unimp
    1c16:	00e6                	slli	ra,ra,0x19
    1c18:	0000                	unimp
    1c1a:	0001                	nop
    1c1c:	e65c                	fsw	fa5,12(a2)
    1c1e:	0000                	unimp
    1c20:	0400                	addi	s0,sp,512
    1c22:	0001                	nop
    1c24:	0400                	addi	s0,sp,512
    1c26:	f300                	fsw	fs0,32(a4)
    1c28:	5c01                	li	s8,-32
    1c2a:	049f 0001 2800      	0x28000001049f
    1c30:	0001                	nop
    1c32:	0100                	addi	s0,sp,128
    1c34:	5c00                	lw	s0,56(s0)
	...
    1c3e:	0092                	slli	ra,ra,0x4
    1c40:	0000                	unimp
    1c42:	00ac                	addi	a1,sp,72
    1c44:	0000                	unimp
    1c46:	0002                	c.slli64	zero
    1c48:	9f30                	0x9f30
    1c4a:	00ac                	addi	a1,sp,72
    1c4c:	0000                	unimp
    1c4e:	00b2                	slli	ra,ra,0xc
    1c50:	0000                	unimp
    1c52:	0001                	nop
    1c54:	b25f 0000 be00      	0xbe000000b25f
    1c5a:	0000                	unimp
    1c5c:	0200                	addi	s0,sp,256
    1c5e:	3000                	fld	fs0,32(s0)
    1c60:	be9f 0000 ca00      	0xca000000be9f
    1c66:	0000                	unimp
    1c68:	0100                	addi	s0,sp,128
    1c6a:	5f00                	lw	s0,56(a4)
    1c6c:	00d4                	addi	a3,sp,68
    1c6e:	0000                	unimp
    1c70:	00e0                	addi	s0,sp,76
    1c72:	0000                	unimp
    1c74:	0002                	c.slli64	zero
    1c76:	9f30                	0x9f30
    1c78:	00e0                	addi	s0,sp,76
    1c7a:	0000                	unimp
    1c7c:	00e6                	slli	ra,ra,0x19
    1c7e:	0000                	unimp
    1c80:	0001                	nop
    1c82:	f25f 0000 2800      	0x28000000f25f
    1c88:	0001                	nop
    1c8a:	0100                	addi	s0,sp,128
    1c8c:	5f00                	lw	s0,56(a4)
	...
    1c96:	00f6                	slli	ra,ra,0x1d
    1c98:	0000                	unimp
    1c9a:	00fc                	addi	a5,sp,76
    1c9c:	0000                	unimp
    1c9e:	0006                	c.slli	zero,0x1
    1ca0:	007e007b          	0x7e007b
    1ca4:	9f22                	add	t5,t5,s0
    1ca6:	00fc                	addi	a5,sp,76
    1ca8:	0000                	unimp
    1caa:	0100                	addi	s0,sp,128
    1cac:	0000                	unimp
    1cae:	0001                	nop
    1cb0:	005e                	c.slli	zero,0x17
    1cb2:	0000                	unimp
    1cb4:	0000                	unimp
    1cb6:	0000                	unimp
    1cb8:	f600                	fsw	fs0,40(a2)
    1cba:	0000                	unimp
    1cbc:	fa00                	fsw	fs0,48(a2)
    1cbe:	0000                	unimp
    1cc0:	0600                	addi	s0,sp,768
    1cc2:	7a00                	flw	fs0,48(a2)
    1cc4:	7e00                	flw	fs0,56(a2)
    1cc6:	2200                	fld	fs0,0(a2)
    1cc8:	fa9f 0000 0000      	0xfa9f
    1cce:	0001                	nop
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	5d00                	lw	s0,56(a0)
	...
    1cdc:	0108                	addi	a0,sp,128
    1cde:	0000                	unimp
    1ce0:	010e                	slli	sp,sp,0x3
    1ce2:	0000                	unimp
    1ce4:	0006                	c.slli	zero,0x1
    1ce6:	007e007b          	0x7e007b
    1cea:	9f22                	add	t5,t5,s0
    1cec:	010e                	slli	sp,sp,0x3
    1cee:	0000                	unimp
    1cf0:	0112                	slli	sp,sp,0x4
    1cf2:	0000                	unimp
    1cf4:	0001                	nop
    1cf6:	005e                	c.slli	zero,0x17
    1cf8:	0000                	unimp
    1cfa:	0000                	unimp
    1cfc:	0000                	unimp
    1cfe:	0800                	addi	s0,sp,16
    1d00:	0001                	nop
    1d02:	0c00                	addi	s0,sp,528
    1d04:	0001                	nop
    1d06:	0600                	addi	s0,sp,768
    1d08:	7a00                	flw	fs0,48(a2)
    1d0a:	7e00                	flw	fs0,56(a2)
    1d0c:	2200                	fld	fs0,0(a2)
    1d0e:	0c9f 0001 1200      	0x120000010c9f
    1d14:	0001                	nop
    1d16:	0100                	addi	s0,sp,128
    1d18:	6000                	flw	fs0,0(s0)
	...
    1d22:	011a                	slli	sp,sp,0x6
    1d24:	0000                	unimp
    1d26:	0120                	addi	s0,sp,136
    1d28:	0000                	unimp
    1d2a:	0006                	c.slli	zero,0x1
    1d2c:	007e007b          	0x7e007b
    1d30:	9f22                	add	t5,t5,s0
    1d32:	0120                	addi	s0,sp,136
    1d34:	0000                	unimp
    1d36:	0124                	addi	s1,sp,136
    1d38:	0000                	unimp
    1d3a:	0001                	nop
    1d3c:	005e                	c.slli	zero,0x17
    1d3e:	0000                	unimp
    1d40:	0000                	unimp
    1d42:	0000                	unimp
    1d44:	1a00                	addi	s0,sp,304
    1d46:	0001                	nop
    1d48:	1e00                	addi	s0,sp,816
    1d4a:	0001                	nop
    1d4c:	0600                	addi	s0,sp,768
    1d4e:	7a00                	flw	fs0,48(a2)
    1d50:	7e00                	flw	fs0,56(a2)
    1d52:	2200                	fld	fs0,0(a2)
    1d54:	1e9f 0001 2400      	0x240000011e9f
    1d5a:	0001                	nop
    1d5c:	0100                	addi	s0,sp,128
    1d5e:	6000                	flw	fs0,0(s0)
	...
    1d68:	008c                	addi	a1,sp,64
    1d6a:	0000                	unimp
    1d6c:	0090                	addi	a2,sp,64
    1d6e:	0000                	unimp
    1d70:	0001                	nop
    1d72:	005a                	c.slli	zero,0x16
    1d74:	0000                	unimp
    1d76:	0000                	unimp
    1d78:	0000                	unimp
    1d7a:	2800                	fld	fs0,16(s0)
    1d7c:	0001                	nop
    1d7e:	2c00                	fld	fs0,24(s0)
    1d80:	0001                	nop
    1d82:	0100                	addi	s0,sp,128
    1d84:	5a00                	lw	s0,48(a2)
	...
    1d8e:	012e                	slli	sp,sp,0xb
    1d90:	0000                	unimp
    1d92:	018c                	addi	a1,sp,192
    1d94:	0000                	unimp
    1d96:	0001                	nop
    1d98:	00018c5b          	0x18c5b
    1d9c:	9000                	0x9000
    1d9e:	0001                	nop
    1da0:	0400                	addi	s0,sp,512
    1da2:	f300                	fsw	fs0,32(a4)
    1da4:	5b01                	li	s6,-32
    1da6:	909f 0001 ba00      	0xba000001909f
    1dac:	0001                	nop
    1dae:	0100                	addi	s0,sp,128
    1db0:	5b00                	lw	s0,48(a4)
	...
    1dba:	012e                	slli	sp,sp,0xb
    1dbc:	0000                	unimp
    1dbe:	0146                	slli	sp,sp,0x11
    1dc0:	0000                	unimp
    1dc2:	0001                	nop
    1dc4:	465c                	lw	a5,12(a2)
    1dc6:	0001                	nop
    1dc8:	4e00                	lw	s0,24(a2)
    1dca:	0001                	nop
    1dcc:	0400                	addi	s0,sp,512
    1dce:	f300                	fsw	fs0,32(a4)
    1dd0:	5c01                	li	s8,-32
    1dd2:	4e9f 0001 6000      	0x600000014e9f
    1dd8:	0001                	nop
    1dda:	0100                	addi	s0,sp,128
    1ddc:	5c00                	lw	s0,56(s0)
    1dde:	0160                	addi	s0,sp,140
    1de0:	0000                	unimp
    1de2:	0170                	addi	a2,sp,140
    1de4:	0000                	unimp
    1de6:	0004                	0x4
    1de8:	9f5c01f3          	0x9f5c01f3
    1dec:	0170                	addi	a2,sp,140
    1dee:	0000                	unimp
    1df0:	0182                	c.slli64	gp
    1df2:	0000                	unimp
    1df4:	0001                	nop
    1df6:	825c                	0x825c
    1df8:	0001                	nop
    1dfa:	9e00                	0x9e00
    1dfc:	0001                	nop
    1dfe:	0400                	addi	s0,sp,512
    1e00:	f300                	fsw	fs0,32(a4)
    1e02:	5c01                	li	s8,-32
    1e04:	9e9f 0001 ba00      	0xba0000019e9f
    1e0a:	0001                	nop
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	5c00                	lw	s0,56(s0)
	...
    1e18:	012e                	slli	sp,sp,0xb
    1e1a:	0000                	unimp
    1e1c:	0148                	addi	a0,sp,132
    1e1e:	0000                	unimp
    1e20:	0002                	c.slli64	zero
    1e22:	9f30                	0x9f30
    1e24:	0148                	addi	a0,sp,132
    1e26:	0000                	unimp
    1e28:	014e                	slli	sp,sp,0x13
    1e2a:	0000                	unimp
    1e2c:	0001                	nop
    1e2e:	4e5f 0001 7c00      	0x7c0000014e5f
    1e34:	0001                	nop
    1e36:	0200                	addi	s0,sp,256
    1e38:	3000                	fld	fs0,32(s0)
    1e3a:	7c9f 0001 8200      	0x820000017c9f
    1e40:	0001                	nop
    1e42:	0100                	addi	s0,sp,128
    1e44:	5f00                	lw	s0,56(a4)
    1e46:	0190                	addi	a2,sp,192
    1e48:	0000                	unimp
    1e4a:	01ac                	addi	a1,sp,200
    1e4c:	0000                	unimp
    1e4e:	0001                	nop
    1e50:	ac5f 0001 ba00      	0xba000001ac5f
    1e56:	0001                	nop
    1e58:	0200                	addi	s0,sp,256
    1e5a:	3000                	fld	fs0,32(s0)
    1e5c:	009f 0000 0000      	0x9f
    1e62:	0000                	unimp
    1e64:	9000                	0x9000
    1e66:	0001                	nop
    1e68:	9a00                	0x9a00
    1e6a:	0001                	nop
    1e6c:	0100                	addi	s0,sp,128
    1e6e:	5b00                	lw	s0,48(a4)
	...
    1e78:	0190                	addi	a2,sp,192
    1e7a:	0000                	unimp
    1e7c:	019a                	slli	gp,gp,0x6
    1e7e:	0000                	unimp
    1e80:	0008                	0x8
    1e82:	007f                	0x7f
    1e84:	1e3c                	addi	a5,sp,824
    1e86:	007a                	c.slli	zero,0x1e
    1e88:	9f22                	add	t5,t5,s0
	...
    1e92:	015a                	slli	sp,sp,0x16
    1e94:	0000                	unimp
    1e96:	0168                	addi	a0,sp,140
    1e98:	0000                	unimp
    1e9a:	0001                	nop
    1e9c:	ac5f 0001 ba00      	0xba000001ac5f
    1ea2:	0001                	nop
    1ea4:	0100                	addi	s0,sp,128
    1ea6:	5f00                	lw	s0,56(a4)
	...
    1eb0:	01ac                	addi	a1,sp,200
    1eb2:	0000                	unimp
    1eb4:	01b6                	slli	gp,gp,0xd
    1eb6:	0000                	unimp
    1eb8:	0001                	nop
    1eba:	0000005b          	0x5b
    1ebe:	0000                	unimp
    1ec0:	0000                	unimp
    1ec2:	ac00                	fsd	fs0,24(s0)
    1ec4:	0001                	nop
    1ec6:	b600                	fsd	fs0,40(a2)
    1ec8:	0001                	nop
    1eca:	0800                	addi	s0,sp,16
    1ecc:	7f00                	flw	fs0,56(a4)
    1ece:	3c00                	fld	fs0,56(s0)
    1ed0:	7a1e                	flw	fs4,228(sp)
    1ed2:	2200                	fld	fs0,0(a2)
    1ed4:	009f 0000 0000      	0x9f
    1eda:	0000                	unimp
    1edc:	9e00                	0x9e00
    1ede:	0001                	nop
    1ee0:	a800                	fsd	fs0,16(s0)
    1ee2:	0001                	nop
    1ee4:	0100                	addi	s0,sp,128
    1ee6:	5b00                	lw	s0,48(a4)
	...
    1ef0:	019e                	slli	gp,gp,0x7
    1ef2:	0000                	unimp
    1ef4:	01a8                	addi	a0,sp,200
    1ef6:	0000                	unimp
    1ef8:	0008                	0x8
    1efa:	007f                	0x7f
    1efc:	1e3c                	addi	a5,sp,824
    1efe:	007a                	c.slli	zero,0x1e
    1f00:	9f22                	add	t5,t5,s0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0d14                	addi	a3,sp,656
  16:	0000                	unimp
  18:	0f9c                	addi	a5,sp,976
  1a:	0000                	unimp
  1c:	00f8                	addi	a4,sp,76
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1d81                	addi	s11,s11,-32
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0da0                	addi	s0,sp,728
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0146                	slli	sp,sp,0x11
   2:	0000                	unimp
   4:	0148                	addi	a0,sp,132
   6:	0000                	unimp
   8:	0190                	addi	a2,sp,192
   a:	0000                	unimp
   c:	019a                	slli	gp,gp,0x6
	...
  16:	0000                	unimp
  18:	014e                	slli	sp,sp,0x13
  1a:	0000                	unimp
  1c:	0170                	addi	a2,sp,140
  1e:	0000                	unimp
  20:	0182                	c.slli64	gp
  22:	0000                	unimp
  24:	018e                	slli	gp,gp,0x3
  26:	0000                	unimp
  28:	01ac                	addi	a1,sp,200
  2a:	0000                	unimp
  2c:	01ba                	slli	gp,gp,0xe
	...
  36:	0000                	unimp
  38:	0158                	addi	a4,sp,132
  3a:	0000                	unimp
  3c:	015a                	slli	sp,sp,0x16
  3e:	0000                	unimp
  40:	01ac                	addi	a1,sp,200
  42:	0000                	unimp
  44:	01b6                	slli	gp,gp,0xd
	...
  4e:	0000                	unimp
  50:	017a                	slli	sp,sp,0x1e
  52:	0000                	unimp
  54:	017c                	addi	a5,sp,140
  56:	0000                	unimp
  58:	019e                	slli	gp,gp,0x7
  5a:	0000                	unimp
  5c:	01a8                	addi	a0,sp,200
	...
  66:	0000                	unimp
  68:	008c                	addi	a1,sp,64
  6a:	0000                	unimp
  6c:	0da0                	addi	s0,sp,728
  6e:	0000                	unimp
  70:	0f9c                	addi	a5,sp,976
  72:	0000                	unimp
  74:	1094                	addi	a3,sp,96
	...
  7e:	0000                	unimp
  80:	ffff                	0xffff
  82:	ffff                	0xffff
  84:	0000                	unimp
  86:	0000                	unimp
  88:	0da0                	addi	s0,sp,728
  8a:	0000                	unimp
    asm volatile(
  8c:	0e16                	slli	t3,t3,0x5
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	237e                	fld	ft6,472(sp)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x5e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult+0x1a6>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x1a6>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xb8>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult+0x1d0>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
      86:	6972                	flw	fs2,28(sp)
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x28>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0xa4>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
            a1[length-2] = a2[length-2];
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
} //end of function
      f0:	6975                	lui	s2,0x1d
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    asm volatile(
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
            for (i = 0; i < (length / 3); i++) {
     102:	008c                	addi	a1,sp,64
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    asm volatile(
     10a:	0305                	addi	t1,t1,1
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
     110:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
    asm volatile(
     11a:	00090203          	lb	tp,0(s2) # b000 <_stack_len+0x7000>
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult+0x196>
     122:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0902                	c.slli64	s2
     126:	0002                	c.slli64	zero
    asm volatile(
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
}
     12c:	0901                	addi	s2,s2,0
    switch(length%3) {
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
            for (i = 0; i < (length / 3); i++) {
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0x9e>
     14c:	0e090303          	lb	t1,224(s2)
            for (i = 0; i < ((length-2) / 3); i++) {
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
     156:	0104                	addi	s1,sp,128
    asm volatile(
     158:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
            a1[length-1] = a1[length-1] % mod;
     15e:	0501                	addi	a0,a0,0
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
     164:	0601                	addi	a2,a2,0
     166:	00090003          	lb	zero,0(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0xc0>
     16e:	06090b03          	lb	s6,96(s2)
            for (i = 0; i < ((length-1) / 3); i++) {
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0xa8>
     176:	04090003          	lb	zero,64(s2)
    asm volatile(
     17a:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-1) / 3); i++) {
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
            a1[length-2] = a1[length-2] % mod;
     182:	0100                	addi	s0,sp,128
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
     188:	0104                	addi	s1,sp,128
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
} //end of function
     18e:	0004                	0x4
    asm volatile(
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
     194:	0402                	c.slli64	s0
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
            for (i = 0; i < (length / 3); i++) {
     19c:	0100                	addi	s0,sp,128
    asm volatile(
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0)
     1a4:	0501                	addi	a0,a0,0
     1a6:	061e                	slli	a2,a2,0x7
            for (i = 0; i < ((length-1) / 3); i++) {
     1a8:	00090003          	lb	zero,0(s2)
    asm volatile(
     1ac:	0100                	addi	s0,sp,128
     1ae:	1a05                	addi	s4,s4,-31
     1b0:	0a090003          	lb	zero,160(s2)
     1b4:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-2) / 3); i++) {
     1b6:	2505                	jal	7d6 <ext_euclid+0x10a>
     1b8:	08097703          	0x8097703
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1bc:	0100                	addi	s0,sp,128
     1be:	2905                	jal	5ee <polydiv+0xf2>
     1c0:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     1c4:	0100                	addi	s0,sp,128
     1c6:	1405                	addi	s0,s0,-31
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c8:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     1cc:	0100                	addi	s0,sp,128
     1ce:	1905                	addi	s2,s2,-31
     1d0:	0200                	addi	s0,sp,256
     1d2:	0104                	addi	s1,sp,128
     1d4:	0306                	slli	t1,t1,0x1
     1d6:	0900                	addi	s0,sp,144
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1d8:	0004                	0x4
     1da:	0501                	addi	a0,a0,0
    int pola[size_a];
     1dc:	000d                	c.nop	3
     1de:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1e0:	0601                	addi	a2,a2,0
     1e2:	00090003          	lb	zero,0(s2)
     1e6:	0100                	addi	s0,sp,128
     1e8:	0306                	slli	t1,t1,0x1
     1ea:	00040903          	lb	s2,0(s0)
     1ee:	0501                	addi	a0,a0,0
     1f0:	061e                	slli	a2,a2,0x7
     1f2:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     1f6:	0100                	addi	s0,sp,128
     1f8:	0d05                	addi	s10,s10,1
    int line[size_b][size_a + size_b];
     1fa:	0306                	slli	t1,t1,0x1
     1fc:	00020907          	0x20907
    int pola[size_a];
     200:	0501                	addi	a0,a0,0
     202:	061e                	slli	a2,a2,0x7
    int polb[size_b];
     204:	00090003          	lb	zero,0(s2)
     208:	0100                	addi	s0,sp,128
    int pola[size_a];
     20a:	1a05                	addi	s4,s4,-31
    int polb[size_b];
     20c:	06090003          	lb	zero,96(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     210:	0100                	addi	s0,sp,128
    int pola[size_a];
     212:	0205                	addi	tp,tp,1
     214:	0306                	slli	t1,t1,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     216:	0901                	addi	s2,s2,0
    int line[size_b][size_a + size_b];
     218:	0004                	0x4
     21a:	0501                	addi	a0,a0,0
    int polb[size_b];
     21c:	0601                	addi	a2,a2,0
            line[i][j] = 0;
     21e:	00090203          	lb	tp,0(s2)
     222:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     224:	1105                	addi	sp,sp,-31
     226:	0200                	addi	s0,sp,256
            product[j] = 0;
     228:	0304                	addi	s1,sp,384
     22a:	0306                	slli	t1,t1,0x1
     22c:	0002096f          	jal	s2,2022c <_stack_start+0x1022c>
    for (i = 0; i < size_b; ++i){
     230:	0501                	addi	a0,a0,0
     232:	0005                	c.nop	1
    array_equ(pola,a,size_a);
     234:	0402                	c.slli64	s0
     236:	096d0303          	lb	t1,150(s10)
     23a:	0004                	0x4
     23c:	0001                	nop
     23e:	0402                	c.slli64	s0
     240:	09090303          	lb	t1,144(s2)
     244:	000a                	c.slli	zero,0x2
     246:	0501                	addi	a0,a0,0
     248:	0402002b          	0x402002b
    array_mod(pola,mod,size_a);
     24c:	09090303          	lb	t1,144(s2)
     250:	0000                	unimp
     252:	0501                	addi	a0,a0,0
    array_equ(polb,b,size_b);
     254:	002c                	addi	a1,sp,8
     256:	0402                	c.slli64	s0
     258:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     25c:	0009                	c.nop	2
     25e:	0100                	addi	s0,sp,128
    array_mod(polb,mod,size_b);
     260:	1105                	addi	sp,sp,-31
     262:	0200                	addi	s0,sp,256
     264:	0304                	addi	s1,sp,384
     266:	0306                	slli	t1,t1,0x1
    if(star_mult == 1){
     268:	0906                	slli	s2,s2,0x1
     26a:	0004                	0x4
     26c:	0501                	addi	a0,a0,0
     26e:	0005                	c.nop	1
     270:	0402                	c.slli64	s0
     272:	09680303          	lb	t1,150(a6)
     276:	0004                	0x4
     278:	0001                	nop
     27a:	0402                	c.slli64	s0
     27c:	09090303          	lb	t1,144(s2)
     280:	000a                	c.slli	zero,0x2
     282:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     284:	0402002f          	0x402002f
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
            product[j] = 0;
     28c:	0000                	unimp
     28e:	0501                	addi	a0,a0,0
     290:	0030                	addi	a2,sp,8
            line[i][j] = 0;
     292:	0402                	c.slli64	s0
     294:	00030603          	lb	a2,0(t1)
            product[j] = 0;
     298:	0009                	c.nop	2
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0100                	addi	s0,sp,128
     29c:	1105                	addi	sp,sp,-31
     29e:	0200                	addi	s0,sp,256
     2a0:	0304                	addi	s1,sp,384
    for (i = 0; i < size_b; ++i){
     2a2:	0306                	slli	t1,t1,0x1
     2a4:	00040907          	0x40907
     2a8:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     2aa:	0005                	c.nop	1
     2ac:	0402                	c.slli64	s0
    if(star_mult == 1){
     2ae:	09620303          	lb	t1,150(tp) # 1a096 <_stack_start+0xa096>
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	0001                	nop
    for (i = 0; i < size_b; ++i){
     2b6:	0402                	c.slli64	s0
     2b8:	09090303          	lb	t1,144(s2)
     2bc:	000a                	c.slli	zero,0x2
     2be:	0501                	addi	a0,a0,0
     2c0:	0402002f          	0x402002f
    for(j = 0; j < size_a + size_b -1; ++j){
     2c4:	09140303          	lb	t1,145(s0)
    array_mod(product,mod,(size_a+size_b-1));
     2c8:	0000                	unimp
     2ca:	0501                	addi	a0,a0,0
     2cc:	0030                	addi	a2,sp,8
     2ce:	0402                	c.slli64	s0
     2d0:	00030603          	lb	a2,0(t1)
     2d4:	0009                	c.nop	2
}
     2d6:	0100                	addi	s0,sp,128
     2d8:	3405                	jal	fffffcf8 <_stack_start+0xfffefcf8>
     2da:	0306                	slli	t1,t1,0x1
     2dc:	090a                	slli	s2,s2,0x2
     2de:	0004                	0x4
     2e0:	0501                	addi	a0,a0,0
     2e2:	0305                	addi	t1,t1,1
     2e4:	0902                	c.slli64	s2
     2e6:	0000                	unimp
     2e8:	0301                	addi	t1,t1,0
     2ea:	0909                	addi	s2,s2,2
     2ec:	0004                	0x4
     2ee:	0501                	addi	a0,a0,0
     2f0:	0601                	addi	a2,a2,0
     2f2:	00090103          	lb	sp,0(s2)
     2f6:	0100                	addi	s0,sp,128
     2f8:	2c05                	jal	528 <polydiv+0x2c>
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	0902                	c.slli64	s2
     2fe:	0002                	c.slli64	zero
                line[size_b-1-j][k] = pola[k]*polb[j];
     300:	0501                	addi	a0,a0,0
     302:	0301                	addi	t1,t1,0
     304:	0905                	addi	s2,s2,1
     306:	0000                	unimp
     308:	0501                	addi	a0,a0,0
     30a:	0305                	addi	t1,t1,1
     30c:	0902                	c.slli64	s2
     30e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     310:	0501                	addi	a0,a0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     312:	0612                	slli	a2,a2,0x4
     314:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     318:	0100                	addi	s0,sp,128
     31a:	0505                	addi	a0,a0,1
        for (j = size_b -1; j >= 0; j = j-1){
     31c:	06090003          	lb	zero,96(s2)
     320:	0100                	addi	s0,sp,128
     322:	2505                	jal	942 <generate_keys+0x62>
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	0e090303          	lb	t1,224(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     328:	0100                	addi	s0,sp,128
     32a:	0505                	addi	a0,a0,1
     32c:	04096a03          	0x4096a03
     330:	0100                	addi	s0,sp,128
     332:	1905                	addi	s2,s2,-31
     334:	0200                	addi	s0,sp,256
     336:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33a:	0916                	slli	s2,s2,0x5
     33c:	0002                	c.slli64	zero
     33e:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     340:	000d                	c.nop	3
     342:	0402                	c.slli64	s0
        for (j = size_b -1; j >= 0; j = j-1){
     344:	0601                	addi	a2,a2,0
     346:	00090003          	lb	zero,0(s2)
     34a:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     34c:	2505                	jal	96c <generate_keys+0x8c>
        for(j = 0; j < size_a + size_b -1; ++j){
     34e:	06090b03          	lb	s6,96(s2)
            line[i][j] = line[i][j] % mod;
     352:	0100                	addi	s0,sp,128
     354:	2905                	jal	784 <ext_euclid+0xb8>
     356:	04090003          	lb	zero,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     35a:	0100                	addi	s0,sp,128
     35c:	1405                	addi	s0,s0,-31
    for (i = 0; i < size_b; ++i){
     35e:	04090003          	lb	zero,64(s2)
     362:	0100                	addi	s0,sp,128
     364:	0505                	addi	a0,a0,1
        for(j = 0; j < size_a + size_b -1; ++j){
     366:	02095f03          	lhu	t5,32(s2)
            product[j] += line[i][j];
     36a:	0100                	addi	s0,sp,128
     36c:	1905                	addi	s2,s2,-31
     36e:	0306                	slli	t1,t1,0x1
        for(i = 0; i < size_b; ++i){
     370:	0921                	addi	s2,s2,8
            product[j] += line[i][j];
     372:	0002                	c.slli64	zero
     374:	0501                	addi	a0,a0,0
     376:	060d                	addi	a2,a2,3
     378:	00090003          	lb	zero,0(s2)
     37c:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     37e:	0306                	slli	t1,t1,0x1
     380:	00040903          	lb	s2,0(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     384:	0501                	addi	a0,a0,0
     386:	061e                	slli	a2,a2,0x7
        for(i = 0; i < size_b; ++i){
     388:	00090003          	lb	zero,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38c:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     38e:	2905                	jal	7be <ext_euclid+0xf2>
     390:	08090003          	lb	zero,128(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     394:	0100                	addi	s0,sp,128
     396:	1a05                	addi	s4,s4,-31
     398:	06090003          	lb	zero,96(s2)
    int line[size_b][size_a + size_b];
     39c:	0100                	addi	s0,sp,128
     39e:	2505                	jal	9be <generate_keys+0xde>
     3a0:	04097703          	0x4097703
     3a4:	0100                	addi	s0,sp,128
     3a6:	2905                	jal	7d6 <ext_euclid+0x10a>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3a8:	04090003          	lb	zero,64(s2)
     3ac:	0100                	addi	s0,sp,128
     3ae:	1405                	addi	s0,s0,-31
     3b0:	04090003          	lb	zero,64(s2)
     3b4:	0100                	addi	s0,sp,128
     3b6:	0505                	addi	a0,a0,1
     3b8:	02096503          	0x2096503
     3bc:	0100                	addi	s0,sp,128
     3be:	1905                	addi	s2,s2,-31
    int line[size_b][size_a + size_b];
     3c0:	0200                	addi	s0,sp,256
     3c2:	0104                	addi	s1,sp,128
     3c4:	0306                	slli	t1,t1,0x1
    int pola[size_a];
     3c6:	0002091b          	0x2091b
     3ca:	0501                	addi	a0,a0,0
     3cc:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     3ce:	0402                	c.slli64	s0
    int pola[size_a];
     3d0:	0601                	addi	a2,a2,0
     3d2:	00090003          	lb	zero,0(s2)
    int polb[size_b];
     3d6:	0100                	addi	s0,sp,128
     3d8:	0306                	slli	t1,t1,0x1
    int pola[size_a];
     3da:	00040903          	lb	s2,0(s0)
    int polb[size_b];
     3de:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e0:	061e                	slli	a2,a2,0x7
     3e2:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     3e6:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     3e8:	0d05                	addi	s10,s10,1
    int pola[size_a];
     3ea:	0306                	slli	t1,t1,0x1
     3ec:	00020907          	0x20907
    for (i = 0; i < size_b; ++i){
     3f0:	0501                	addi	a0,a0,0
     3f2:	061e                	slli	a2,a2,0x7
     3f4:	00090003          	lb	zero,0(s2)
            product2[j] = 0;
     3f8:	0100                	addi	s0,sp,128
     3fa:	2905                	jal	82a <ext_euclid+0x15e>
     3fc:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size_b; ++i){
     400:	0100                	addi	s0,sp,128
    array_equ(pola,a,size_a);
     402:	1a05                	addi	s4,s4,-31
     404:	06090003          	lb	zero,96(s2)
     408:	0100                	addi	s0,sp,128
     40a:	0305                	addi	t1,t1,1
     40c:	0306                	slli	t1,t1,0x1
    array_equ(polb,b,size_b);
     40e:	0901                	addi	s2,s2,0
     410:	0002                	c.slli64	zero
     412:	0501                	addi	a0,a0,0
     414:	0601                	addi	a2,a2,0
     416:	00090203          	lb	tp,0(s2)
    if(star_mult == 1){
     41a:	0100                	addi	s0,sp,128
     41c:	1105                	addi	sp,sp,-31
     41e:	0200                	addi	s0,sp,256
     420:	0304                	addi	s1,sp,384
     422:	0306                	slli	t1,t1,0x1
     424:	0002096f          	jal	s2,20424 <_stack_start+0x10424>
     428:	0501                	addi	a0,a0,0
     42a:	0005                	c.nop	1
        for (j = size_b -1; j >= 0; j = j-1){
     42c:	0402                	c.slli64	s0
     42e:	09690303          	lb	t1,150(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     432:	0000                	unimp
            product2[j] = 0;
     434:	0001                	nop
     436:	0402                	c.slli64	s0
     438:	09090303          	lb	t1,144(s2)
            line[i][j] = 0;
     43c:	000a                	c.slli	zero,0x2
            product2[j] = 0;
     43e:	0501                	addi	a0,a0,0
     440:	0402002b          	0x402002b
        for(j = 0; j < size_a + size_b -1; ++j){
     444:	090d0303          	lb	t1,144(s10)
     448:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     44a:	0501                	addi	a0,a0,0
     44c:	002c                	addi	a1,sp,8
     44e:	0402                	c.slli64	s0
     450:	00030603          	lb	a2,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     454:	0009                	c.nop	2
                line[size_b-1-j][k] = pola[k]*polb[j];
     456:	0100                	addi	s0,sp,128
     458:	1105                	addi	sp,sp,-31
     45a:	0200                	addi	s0,sp,256
     45c:	0304                	addi	s1,sp,384
     45e:	0306                	slli	t1,t1,0x1
     460:	0906                	slli	s2,s2,0x1
     462:	0004                	0x4
     464:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     466:	0005                	c.nop	1
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	0402                	c.slli64	s0
     46a:	09640303          	lb	t1,150(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     46e:	0000                	unimp
     470:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     472:	0402                	c.slli64	s0
     474:	09090303          	lb	t1,144(s2)
     478:	000a                	c.slli	zero,0x2
     47a:	0501                	addi	a0,a0,0
        for(j=0;j<size_a+size_b-1;++j){
     47c:	0402002f          	0x402002f
    for(i=0;i<size_b;++i){
     480:	09120303          	lb	t1,145(tp) # 91 <instr_equ+0x5>
     484:	0000                	unimp
     486:	0501                	addi	a0,a0,0
     488:	0030                	addi	a2,sp,8
     48a:	0402                	c.slli64	s0
        for(j=0;j<size_a+size_b-1;++j){
     48c:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     490:	0009                	c.nop	2
     492:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     494:	1105                	addi	sp,sp,-31
     496:	0306                	slli	t1,t1,0x1
     498:	00040907          	0x40907
     49c:	0501                	addi	a0,a0,0
     49e:	0305                	addi	t1,t1,1
     4a0:	095e                	slli	s2,s2,0x17
     4a2:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	0301                	addi	t1,t1,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4a6:	0909                	addi	s2,s2,2
     4a8:	000a                	c.slli	zero,0x2
     4aa:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     4ac:	0918032f          	0x918032f
        for (j = size_b -1; j >= 0; j = j-1){
     4b0:	0000                	unimp
     4b2:	0501                	addi	a0,a0,0
     4b4:	0630                	addi	a2,sp,776
     4b6:	00090003          	lb	zero,0(s2)
            product2[j] += line[i][j];
     4ba:	0100                	addi	s0,sp,128
        for(j=0;j<size_a+size_b-1;++j){
     4bc:	4e05                	li	t3,1
     4be:	0306                	slli	t1,t1,0x1
            product2[j] += line[i][j];
     4c0:	090c                	addi	a1,sp,144
     4c2:	0004                	0x4
     4c4:	0501                	addi	a0,a0,0
        for(j=0;j<size_a+size_b-1;++j){
     4c6:	0305                	addi	t1,t1,1
     4c8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    for(i=0;i<size_b;++i){
     4cc:	0501                	addi	a0,a0,0
     4ce:	064e                	slli	a2,a2,0x13
     4d0:	00097d03          	0x97d03
}
     4d4:	0100                	addi	s0,sp,128
     4d6:	1d05                	addi	s10,s10,-31
     4d8:	08090303          	lb	t1,128(s2)
     4dc:	0100                	addi	s0,sp,128
     4de:	4e05                	li	t3,1
     4e0:	06097d03          	0x6097d03
     4e4:	0100                	addi	s0,sp,128
     4e6:	0905                	addi	s2,s2,1
     4e8:	04090303          	lb	t1,64(s2)
     4ec:	0100                	addi	s0,sp,128
     4ee:	4e05                	li	t3,1
     4f0:	0c097d03          	0xc097d03
     4f4:	0100                	addi	s0,sp,128
     4f6:	0905                	addi	s2,s2,1
     4f8:	04090603          	lb	a2,64(s2)
    int v[size_N];
     4fc:	0100                	addi	s0,sp,128
     4fe:	4e05                	li	t3,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     500:	04097a03          	0x4097a03
     504:	0100                	addi	s0,sp,128
     506:	0905                	addi	s2,s2,1
     508:	0c090303          	lb	t1,192(s2)
     50c:	0100                	addi	s0,sp,128
     50e:	4e05                	li	t3,1
     510:	02097d03          	0x2097d03
     514:	0100                	addi	s0,sp,128
     516:	0905                	addi	s2,s2,1
     518:	06090303          	lb	t1,96(s2)
     51c:	0100                	addi	s0,sp,128
    int v[size_N];
     51e:	02090303          	lb	t1,32(s2)
     522:	0100                	addi	s0,sp,128
     524:	4e05                	li	t3,1
     526:	04097a03          	0x4097a03
    int q[size_N];
     52a:	0100                	addi	s0,sp,128
     52c:	0905                	addi	s2,s2,1
    int num_temp[size_N];
     52e:	00090303          	lb	t1,0(s2)
    int denum_temp[size_D];
     532:	0100                	addi	s0,sp,128
     534:	06090303          	lb	t1,96(s2)
     538:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     53a:	04090103          	lb	sp,64(s2)
    int denum_temp[size_D];
     53e:	0100                	addi	s0,sp,128
     540:	06097f03          	0x6097f03
    int v[size_N];
     544:	0100                	addi	s0,sp,128
     546:	02090103          	lb	sp,32(s2)
	array_equ(num_temp,num,size_N);
     54a:	0100                	addi	s0,sp,128
     54c:	4e05                	li	t3,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     54e:	04097903          	0x4097903
    int denum_temp[size_D];
     552:	0100                	addi	s0,sp,128
     554:	0905                	addi	s2,s2,1
	array_equ(num_temp,num,size_N);
     556:	02090603          	lb	a2,32(s2)
	array_mod(num_temp, mod, size_N);
     55a:	0100                	addi	s0,sp,128
     55c:	4e05                	li	t3,1
     55e:	04097a03          	0x4097a03
    array_equ(denum_temp,denum,size_D);
     562:	0100                	addi	s0,sp,128
     564:	0905                	addi	s2,s2,1
     566:	02090303          	lb	t1,32(s2)
    array_mod(denum_temp,mod,size_D);
     56a:	0100                	addi	s0,sp,128
     56c:	0505                	addi	a0,a0,1
     56e:	0306                	slli	t1,t1,0x1
     570:	0901                	addi	s2,s2,0
    for (i = 0; i < size_N; ++i){
     572:	0004                	0x4
     574:	0301                	addi	t1,t1,0
     576:	0901                	addi	s2,s2,0
    for (i = size_D-1; i >= 0; i = i-1){
     578:	0000                	unimp
     57a:	0301                	addi	t1,t1,0
     57c:	0901                	addi	s2,s2,0
     57e:	0000                	unimp
     580:	0301                	addi	t1,t1,0
     582:	0901                	addi	s2,s2,0
    for (i = 0; i < size_N; ++i){
     584:	0000                	unimp
     586:	0501                	addi	a0,a0,0
        if ( (b_N*u)%mod == 1 )
     588:	0609                	addi	a2,a2,2
    for (u = 0; u < mod; ++u){
     58a:	00090003          	lb	zero,0(s2)
     58e:	0100                	addi	s0,sp,128
     590:	0505                	addi	a0,a0,1
        q[i] = 0;
     592:	0306                	slli	t1,t1,0x1
     594:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     598:	0501                	addi	a0,a0,0
        v[i] = 0;
     59a:	0614                	addi	a3,sp,768
        q[i] = 0;
     59c:	00090203          	lb	tp,0(s2)
        v[i] = 0;
     5a0:	0100                	addi	s0,sp,128
     5a2:	0505                	addi	a0,a0,1
    for (i = 0; i < size_N; ++i){
     5a4:	06097e03          	0x6097e03
        if( denum_temp[i] != 0 )
     5a8:	0100                	addi	s0,sp,128
    for (i = size_D-1; i >= 0; i = i-1){
     5aa:	0c05                	addi	s8,s8,1
     5ac:	02090003          	lb	zero,32(s2)
        if ( (b_N*u)%mod == 1 )
     5b0:	0100                	addi	s0,sp,128
     5b2:	1805                	addi	a6,a6,-31
     5b4:	02090303          	lb	t1,32(s2)
    for (u = 0; u < mod; ++u){
     5b8:	0100                	addi	s0,sp,128
     5ba:	1105                	addi	sp,sp,-31
        if( num_temp[i] != 0 )
     5bc:	0200                	addi	s0,sp,256
    for (i = size_N-1; i >= 0; i = i-1){
     5be:	0104                	addi	s1,sp,128
     5c0:	0306                	slli	t1,t1,0x1
     5c2:	097d                	addi	s2,s2,31
     5c4:	0008                	0x8
     5c6:	0501                	addi	a0,a0,0
     5c8:	0005                	c.nop	1
     5ca:	0402                	c.slli64	s0
    while (d >= d2){
     5cc:	0601                	addi	a2,a2,0
     5ce:	00090003          	lb	zero,0(s2)
	array_equ(result,q,size_N);
     5d2:	0100                	addi	s0,sp,128
     5d4:	04090f03          	lb	t5,64(s2)
     5d8:	0100                	addi	s0,sp,128
     5da:	0306                	slli	t1,t1,0x1
     5dc:	0900                	addi	s0,sp,144
    for(i = size_N; i < (2*size_N); ++i){
     5de:	0012                	c.slli	zero,0x4
     5e0:	0301                	addi	t1,t1,0
        result[i] = num_temp[i-size_N];
     5e2:	0901                	addi	s2,s2,0
     5e4:	0006                	c.slli	zero,0x1
     5e6:	0301                	addi	t1,t1,0
     5e8:	0909                	addi	s2,s2,2
    for(i = size_N; i < (2*size_N); ++i){
     5ea:	0008                	0x8
     5ec:	0301                	addi	t1,t1,0
}
     5ee:	0901                	addi	s2,s2,0
     5f0:	000c                	0xc
     5f2:	0301                	addi	t1,t1,0
     5f4:	0904                	addi	s1,sp,144
     5f6:	0008                	0x8
     5f8:	0501                	addi	a0,a0,0
     5fa:	00030607          	0x30607
     5fe:	0009                	c.nop	2
     600:	0100                	addi	s0,sp,128
     602:	1d05                	addi	s10,s10,-31
     604:	0200                	addi	s0,sp,256
     606:	0104                	addi	s1,sp,128
     608:	0306                	slli	t1,t1,0x1
     60a:	0908                	addi	a0,sp,144
     60c:	001c                	0x1c
     60e:	0501                	addi	a0,a0,0
     610:	0009                	c.nop	2
     612:	0402                	c.slli64	s0
     614:	0601                	addi	a2,a2,0
     616:	00090003          	lb	zero,0(s2)
        v[(d-d2)] = u*r_d;
     61a:	0100                	addi	s0,sp,128
     61c:	1405                	addi	s0,s0,-31
     61e:	04090103          	lb	sp,64(s2)
     622:	0100                	addi	s0,sp,128
	 array_mod(v, mod, size_N);
     624:	0d05                	addi	s10,s10,1
     626:	0200                	addi	s0,sp,256
     628:	0304                	addi	s1,sp,384
        v[(d-d2)] = u*r_d;
     62a:	0306                	slli	t1,t1,0x1
	 array_mod(v, mod, size_N);
     62c:	0004095b          	0x4095b
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     630:	0501                	addi	a0,a0,0
     632:	0018                	0x18
     634:	0402                	c.slli64	s0
     636:	01030603          	lb	a2,16(t1)
     63a:	0009                	c.nop	2
	array_mod(product, mod, size_N);
     63c:	0100                	addi	s0,sp,128
     63e:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     640:	0304                	addi	s1,sp,384
	array_mod(product, mod, size_N);
     642:	06097f03          	0x6097f03
        for (i = 0; i < size_N; ++i){
     646:	0100                	addi	s0,sp,128
     648:	0d05                	addi	s10,s10,1
     64a:	0200                	addi	s0,sp,256
	array_mod(num_temp, mod, size_N);
     64c:	0304                	addi	s1,sp,384
     64e:	0306                	slli	t1,t1,0x1
     650:	0901                	addi	s2,s2,0
     652:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     654:	0501                	addi	a0,a0,0
     656:	0018                	0x18
     658:	0402                	c.slli64	s0
     65a:	00030603          	lb	a2,0(t1)
	array_mod(q, mod, size_N);
     65e:	0009                	c.nop	2
     660:	0100                	addi	s0,sp,128
     662:	2c05                	jal	892 <ext_euclid+0x1c6>
        for (i = size_N-1; i >= 0; i = i-1){
     664:	0200                	addi	s0,sp,256
     666:	0304                	addi	s1,sp,384
     668:	0306                	slli	t1,t1,0x1
     66a:	097e                	slli	s2,s2,0x1f
     66c:	0004                	0x4
     66e:	0501                	addi	a0,a0,0
     670:	0014                	0x14
     672:	0402                	c.slli64	s0
     674:	0301                	addi	t1,t1,0
            num_temp[i] = num_temp[i] - product[i];
     676:	0900                	addi	s0,sp,144
     678:	0004                	0x4
     67a:	0501                	addi	a0,a0,0
     67c:	0009                	c.nop	2
     67e:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     680:	0601                	addi	a2,a2,0
     682:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     686:	0100                	addi	s0,sp,128
     688:	1d05                	addi	s10,s10,-31
        for (i = 0; i < size_N; ++i){
     68a:	0200                	addi	s0,sp,256
            q[i] = q[i] + v[i];
     68c:	0204                	addi	s1,sp,256
     68e:	0306                	slli	t1,t1,0x1
     690:	097f                	0x97f
     692:	0004                	0x4
     694:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     696:	0103060f          	0x103060f
            q[i] = q[i] + v[i];
     69a:	0809                	addi	a6,a6,2
     69c:	0100                	addi	s0,sp,128
     69e:	0705                	addi	a4,a4,1
        for(i = 0; i < size_N; ++i){
     6a0:	04091d03          	lh	s10,64(s2)
        for (i = size_N-1; i >= 0; i = i-1){
     6a4:	0100                	addi	s0,sp,128
     6a6:	1d05                	addi	s10,s10,-31
            v[i] = 0;
     6a8:	0200                	addi	s0,sp,256
     6aa:	0104                	addi	s1,sp,128
     6ac:	0306                	slli	t1,t1,0x1
     6ae:	0901                	addi	s2,s2,0
     6b0:	0002                	c.slli64	zero
        for (i = 0; i < size_N; ++i){
     6b2:	0501                	addi	a0,a0,0
     6b4:	0009                	c.nop	2
     6b6:	0402                	c.slli64	s0
     6b8:	0601                	addi	a2,a2,0
        result[i] = num_temp[i-size_N];
     6ba:	00090003          	lb	zero,0(s2)
     6be:	0100                	addi	s0,sp,128
     6c0:	0f05                	addi	t5,t5,1
     6c2:	04091003          	lh	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0100                	addi	s0,sp,128
     6c8:	1105                	addi	sp,sp,-31
     6ca:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6cc:	0104                	addi	s1,sp,128
     6ce:	0306                	slli	t1,t1,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	097f                	0x97f
    int ri_2[size]; // MX-ring poly, a
     6d2:	0002                	c.slli64	zero
     6d4:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	0005                	c.nop	1
     6d8:	0402                	c.slli64	s0
     6da:	0601                	addi	a2,a2,0
     6dc:	00090003          	lb	zero,0(s2)
     6e0:	0100                	addi	s0,sp,128
     6e2:	0b05                	addi	s6,s6,1
     6e4:	0c090703          	lb	a4,192(s2)
     6e8:	0100                	addi	s0,sp,128
     6ea:	1005                	c.nop	-31
     6ec:	0200                	addi	s0,sp,256
     6ee:	0104                	addi	s1,sp,128
     6f0:	0306                	slli	t1,t1,0x1
    int ri_2[size]; // MX-ring poly, a
     6f2:	0900                	addi	s0,sp,144
     6f4:	0002                	c.slli64	zero
     6f6:	0501                	addi	a0,a0,0
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	0005                	c.nop	1
     6fa:	0402                	c.slli64	s0
     6fc:	0601                	addi	a2,a2,0
    int ri[size];
     6fe:	00090003          	lb	zero,0(s2)
     702:	0100                	addi	s0,sp,128
    int ti_1[size]; // ti_1[0] = 1
     704:	0306                	slli	t1,t1,0x1
     706:	0004090b          	0x4090b
    int ti[size];
     70a:	0301                	addi	t1,t1,0
     70c:	0902                	c.slli64	s2
     70e:	000e                	c.slli	zero,0x3
    int qi_1[size];
     710:	0301                	addi	t1,t1,0
     712:	0902                	c.slli64	s2
     714:	0000                	unimp
    int temp[size];
     716:	0501                	addi	a0,a0,0
     718:	0601                	addi	a2,a2,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	00090103          	lb	sp,0(s2)
     71e:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     720:	1105                	addi	sp,sp,-31
     722:	0200                	addi	s0,sp,256
    int temp[size];
     724:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     726:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     728:	095c                	addi	a5,sp,148
     72a:	002a                	c.slli	zero,0xa
     72c:	0501                	addi	a0,a0,0
     72e:	0025                	c.nop	9
    for (i = 0; i < size; ++i) {
     730:	0402                	c.slli64	s0
     732:	00030603          	lb	a2,0(t1)
    array_equ(ri_2,polyR,size);
     736:	0409                	addi	s0,s0,2
     738:	0100                	addi	s0,sp,128
     73a:	2b05                	jal	c6a <ntru_encyrpt+0x6e>
    array_equ(ri_1,polyf,size);
     73c:	0200                	addi	s0,sp,256
     73e:	0304                	addi	s1,sp,384
     740:	04090003          	lb	zero,64(s2)
    ti_1[0] = 1;
     744:	0100                	addi	s0,sp,128
     746:	2e05                	jal	a76 <generate_keys+0x196>
     748:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     74a:	0304                	addi	s1,sp,384
     74c:	02090003          	lb	zero,32(s2)
     750:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     752:	2a05                	jal	882 <ext_euclid+0x1b6>
     754:	0200                	addi	s0,sp,256
     756:	0304                	addi	s1,sp,384
     758:	06097f03          	0x6097f03
    array_mod(ri_2,mod,size);
     75c:	0100                	addi	s0,sp,128
     75e:	2e05                	jal	a8e <generate_keys+0x1ae>
     760:	0200                	addi	s0,sp,256
    array_mod(ri_1,mod,size);
     762:	0304                	addi	s1,sp,384
     764:	02090103          	lb	sp,32(s2)
     768:	0100                	addi	s0,sp,128
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     76a:	2505                	jal	d8a <ntru_deceypt+0xd6>
     76c:	0200                	addi	s0,sp,256
     76e:	0304                	addi	s1,sp,384
     770:	04090003          	lb	zero,64(s2)
     774:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     776:	2805                	jal	7a6 <ext_euclid+0xda>
     778:	0200                	addi	s0,sp,256
     77a:	0304                	addi	s1,sp,384
     77c:	0306                	slli	t1,t1,0x1
     77e:	097f                	0x97f
     780:	0002                	c.slli64	zero
     782:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     784:	0020                	addi	s0,sp,8
     786:	0402                	c.slli64	s0
     788:	0301                	addi	t1,t1,0
    array_mod(temp,mod,size);
     78a:	0900                	addi	s0,sp,144
     78c:	0000                	unimp
     78e:	0501                	addi	a0,a0,0
     790:	000d                	c.nop	3
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     792:	0402                	c.slli64	s0
     794:	0601                	addi	a2,a2,0
     796:	00090003          	lb	zero,0(s2)
     79a:	0100                	addi	s0,sp,128
     79c:	2505                	jal	dbc <reset_handler+0x18>
     79e:	0200                	addi	s0,sp,256
    array_equ(qi_1,res1,size);
     7a0:	0204                	addi	s1,sp,256
     7a2:	0306                	slli	t1,t1,0x1
     7a4:	097f                	0x97f
    array_mod(qi_1,mod,size);
     7a6:	0004                	0x4
     7a8:	0501                	addi	a0,a0,0
     7aa:	04020027          	0x4020027
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ae:	0602                	c.slli64	a2
     7b0:	00090003          	lb	zero,0(s2)
     7b4:	0100                	addi	s0,sp,128
     7b6:	1405                	addi	s0,s0,-31
     7b8:	08090103          	lb	sp,128(s2)
     7bc:	0100                	addi	s0,sp,128
    array_equ(temp,res2,size);
     7be:	1105                	addi	sp,sp,-31
     7c0:	0200                	addi	s0,sp,256
     7c2:	0304                	addi	s1,sp,384
    array_mod(temp,mod,size);
     7c4:	0306                	slli	t1,t1,0x1
     7c6:	0908                	addi	a0,sp,144
     7c8:	0004                	0x4
     7ca:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7cc:	0029                	c.nop	10
     7ce:	0402                	c.slli64	s0
     7d0:	00030603          	lb	a2,0(t1)
    array_mod(ti,mod,size);
     7d4:	0409                	addi	s0,s0,2
     7d6:	0100                	addi	s0,sp,128
     7d8:	2f05                	jal	f08 <memset+0x14>
     7da:	0200                	addi	s0,sp,256
array_equ(ri_2,ri_1,size);
     7dc:	0304                	addi	s1,sp,384
     7de:	04090003          	lb	zero,64(s2)
     7e2:	0100                	addi	s0,sp,128
array_equ(ri_1,ri,size);
     7e4:	3205                	jal	104 <array_equ+0x72>
     7e6:	0200                	addi	s0,sp,256
     7e8:	0304                	addi	s1,sp,384
     7ea:	02090003          	lb	zero,32(s2)
array_equ(ti_2,ti_1,size);
     7ee:	0100                	addi	s0,sp,128
     7f0:	2a05                	jal	920 <generate_keys+0x40>
     7f2:	0200                	addi	s0,sp,256
array_equ(ti_1,ti,size);
     7f4:	0304                	addi	s1,sp,384
     7f6:	06097f03          	0x6097f03
     7fa:	0100                	addi	s0,sp,128
        controlR = 0;
     7fc:	3205                	jal	11c <array_equ+0x8a>
        for (i = 0; i < N + 1; ++i) {
     7fe:	0200                	addi	s0,sp,256
     800:	0304                	addi	s1,sp,384
     802:	02090103          	lb	sp,32(s2)
    while (controlR != 0) {
     806:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     808:	2905                	jal	c38 <ntru_encyrpt+0x3c>
            if (((ri_2[0] * j) % mod) == 1)
     80a:	0200                	addi	s0,sp,256
        for (j = 0; j < mod; ++j) {
     80c:	0304                	addi	s1,sp,384
     80e:	04090003          	lb	zero,64(s2)
     812:	0100                	addi	s0,sp,128
     814:	2805                	jal	844 <ext_euclid+0x178>
     816:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     818:	0304                	addi	s1,sp,384
     81a:	0306                	slli	t1,t1,0x1
    }
     81c:	097f                	0x97f
     81e:	0002                	c.slli64	zero
     820:	0501                	addi	a0,a0,0
     822:	0020                	addi	s0,sp,8
     824:	0402                	c.slli64	s0
     826:	0301                	addi	t1,t1,0
     828:	0900                	addi	s0,sp,144
     82a:	0000                	unimp
     82c:	0501                	addi	a0,a0,0
     82e:	000d                	c.nop	3
     830:	0402                	c.slli64	s0
     832:	0601                	addi	a2,a2,0
     834:	00090003          	lb	zero,0(s2)
     838:	0100                	addi	s0,sp,128
     83a:	2505                	jal	e5a <memcpy+0x44>
     83c:	0200                	addi	s0,sp,256
     83e:	0204                	addi	s1,sp,256
     840:	0306                	slli	t1,t1,0x1
     842:	097f                	0x97f
     844:	0004                	0x4
        ti_2[i] = 0;
     846:	0501                	addi	a0,a0,0
     848:	04020027          	0x4020027
     84c:	0602                	c.slli64	a2
        ti_1[i] = 0;
     84e:	00090003          	lb	zero,0(s2)
        ti_2[i] = 0;
     852:	0100                	addi	s0,sp,128
        ti_1[i] = 0;
     854:	0d05                	addi	s10,s10,1
     856:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     858:	0304                	addi	s1,sp,384
     85a:	0306                	slli	t1,t1,0x1
            ri[i - (N + 1)] = res[i];
     85c:	090a                	slli	s2,s2,0x2
     85e:	0008                	0x8
     860:	0501                	addi	a0,a0,0
     862:	0025                	c.nop	9
        for (i = N + 1; i < (2 * N + 2); ++i) {
     864:	0402                	c.slli64	s0
     866:	00030603          	lb	a2,0(t1)
            ri[i - (N + 1)] = res[i];
     86a:	0009                	c.nop	2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     86c:	0100                	addi	s0,sp,128
            temp[i] = ri_2[i] - ri[i];
     86e:	2c05                	jal	a9e <generate_keys+0x1be>
     870:	0200                	addi	s0,sp,256
     872:	0304                	addi	s1,sp,384
     874:	02097f03          	0x2097f03
     878:	0100                	addi	s0,sp,128
     87a:	2505                	jal	e9a <memcpy+0x84>
     87c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     87e:	0304                	addi	s1,sp,384
            temp[i] = ri_2[i] - ri[i];
     880:	04090103          	lb	sp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     884:	0100                	addi	s0,sp,128
     886:	1805                	addi	a6,a6,-31
            ti[i] = ti_2[i] - temp[i];
     888:	0200                	addi	s0,sp,256
     88a:	0304                	addi	s1,sp,384
     88c:	04090003          	lb	zero,64(s2)
     890:	0100                	addi	s0,sp,128
     892:	2c05                	jal	ac2 <generate_keys+0x1e2>
     894:	0200                	addi	s0,sp,256
     896:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     898:	0306                	slli	t1,t1,0x1
            ti[i] = ti_2[i] - temp[i];
     89a:	097f                	0x97f
     89c:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     89e:	0501                	addi	a0,a0,0
     8a0:	0014                	0x14
              qi_1[i] = 0;
     8a2:	0402                	c.slli64	s0
     8a4:	0301                	addi	t1,t1,0
     8a6:	0900                	addi	s0,sp,144
     8a8:	0000                	unimp
            controlR += ri[i];
     8aa:	0501                	addi	a0,a0,0
     8ac:	0009                	c.nop	2
              qi_1[i] = 0;
     8ae:	0402                	c.slli64	s0
     8b0:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     8b2:	00090003          	lb	zero,0(s2)
     8b6:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     8b8:	1d05                	addi	s10,s10,-31
     8ba:	0200                	addi	s0,sp,256
     8bc:	0204                	addi	s1,sp,256
     8be:	0306                	slli	t1,t1,0x1
     8c0:	097f                	0x97f
     8c2:	0004                	0x4
     8c4:	0501                	addi	a0,a0,0
     8c6:	0103060f          	0x103060f
        for (j = 0; j < mod; ++j) {
     8ca:	0809                	addi	a6,a6,2
            ti_2[i] = (ti_2[i] * j) % mod;
     8cc:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8ce:	0d05                	addi	s10,s10,1
     8d0:	0200                	addi	s0,sp,256
            ti_2[i] = (ti_2[i] * j) % mod;
     8d2:	0304                	addi	s1,sp,384
     8d4:	0306                	slli	t1,t1,0x1
     8d6:	0908                	addi	a0,sp,144
     8d8:	0004                	0x4
     8da:	0501                	addi	a0,a0,0
     8dc:	0022                	c.slli	zero,0x8
        for (i = 0; i < N + 1; ++i) {
     8de:	0402                	c.slli64	s0
int* generate_keys(int N, int p, int q){
     8e0:	00030603          	lb	a2,0(t1)
     8e4:	0009                	c.nop	2
     8e6:	0100                	addi	s0,sp,128
     8e8:	1805                	addi	a6,a6,-31
     8ea:	0200                	addi	s0,sp,256
     8ec:	0304                	addi	s1,sp,384
     8ee:	04090003          	lb	zero,64(s2)
     8f2:	0100                	addi	s0,sp,128
     8f4:	2005                	jal	914 <generate_keys+0x34>
     8f6:	0200                	addi	s0,sp,256
     8f8:	0304                	addi	s1,sp,384
     8fa:	02097f03          	0x2097f03
     8fe:	0100                	addi	s0,sp,128
     900:	2205                	jal	a20 <generate_keys+0x140>
     902:	0200                	addi	s0,sp,256
     904:	0304                	addi	s1,sp,384
     906:	02090103          	lb	sp,32(s2)
     90a:	0100                	addi	s0,sp,128
     90c:	1805                	addi	a6,a6,-31
     90e:	0200                	addi	s0,sp,256
     910:	0304                	addi	s1,sp,384
     912:	06090003          	lb	zero,96(s2)
     916:	0100                	addi	s0,sp,128
	resultkon[0] = 0xaaaaaaa0;
     918:	2005                	jal	938 <generate_keys+0x58>
     91a:	0200                	addi	s0,sp,256
     91c:	0304                	addi	s1,sp,384
     91e:	0306                	slli	t1,t1,0x1
int* generate_keys(int N, int p, int q){
     920:	097f                	0x97f
     922:	0006                	c.slli	zero,0x1
     924:	0501                	addi	a0,a0,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     926:	0014                	0x14
     928:	0402                	c.slli64	s0
     92a:	0301                	addi	t1,t1,0
	resultkon[0] = 0xaaaaaaa0;
     92c:	0900                	addi	s0,sp,144
     92e:	0000                	unimp
     930:	0501                	addi	a0,a0,0
     932:	0009                	c.nop	2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     934:	0402                	c.slli64	s0
     936:	0601                	addi	a2,a2,0
	resultkon[0] = 0xaaaaaaa0;
     938:	00090003          	lb	zero,0(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     93c:	0100                	addi	s0,sp,128
     93e:	2805                	jal	96e <generate_keys+0x8e>
     940:	0200                	addi	s0,sp,256
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     942:	0204                	addi	s1,sp,256
     944:	0306                	slli	t1,t1,0x1
     946:	097f                	0x97f
     948:	0004                	0x4
     94a:	0501                	addi	a0,a0,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     94c:	0103060f          	0x103060f
     950:	0609                	addi	a2,a2,2
     952:	0100                	addi	s0,sp,128
     954:	4605                	li	a2,1
     956:	0306                	slli	t1,t1,0x1
     958:	0911                	addi	s2,s2,4
     95a:	0004                	0x4
     95c:	0501                	addi	a0,a0,0
     95e:	0305                	addi	t1,t1,1
     960:	0902                	c.slli64	s2
     962:	0000                	unimp
     964:	0501                	addi	a0,a0,0
     966:	0646                	slli	a2,a2,0x11
     968:	00097e03          	0x97e03
     96c:	0100                	addi	s0,sp,128
     96e:	1d05                	addi	s10,s10,-31
     970:	02090203          	lb	tp,32(s2)
     974:	0100                	addi	s0,sp,128
     976:	4605                	li	a2,1
     978:	04097e03          	0x4097e03
     97c:	0100                	addi	s0,sp,128
     97e:	0905                	addi	s2,s2,1
     980:	0a090203          	lb	tp,160(s2)
     984:	0100                	addi	s0,sp,128
     986:	4605                	li	a2,1
     988:	0c097e03          	0xc097e03
     98c:	0100                	addi	s0,sp,128
     98e:	0905                	addi	s2,s2,1
     990:	12090203          	lb	tp,288(s2)
     994:	0100                	addi	s0,sp,128
     996:	4605                	li	a2,1
     998:	02097e03          	0x2097e03
     99c:	0100                	addi	s0,sp,128
     99e:	0905                	addi	s2,s2,1
     9a0:	04090203          	lb	tp,64(s2)
     9a4:	0100                	addi	s0,sp,128
     9a6:	4605                	li	a2,1
     9a8:	02097e03          	0x2097e03
     9ac:	0100                	addi	s0,sp,128
     9ae:	0905                	addi	s2,s2,1
     9b0:	00090203          	lb	tp,0(s2)
     9b4:	0100                	addi	s0,sp,128
     9b6:	04090303          	lb	t1,64(s2)
    int polyR[N+1];
     9ba:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9bc:	08097d03          	0x8097d03
    int polyR[N+1];
     9c0:	0100                	addi	s0,sp,128
     9c2:	02090303          	lb	t1,32(s2)
     9c6:	0100                	addi	s0,sp,128
     9c8:	04090103          	lb	sp,64(s2)
    polyR[N] = 1;
     9cc:	0100                	addi	s0,sp,128
     9ce:	06097f03          	0x6097f03
     9d2:	0100                	addi	s0,sp,128
     9d4:	02090103          	lb	sp,32(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9d8:	0100                	addi	s0,sp,128
     9da:	4605                	li	a2,1
     9dc:	04097a03          	0x4097a03
     9e0:	0100                	addi	s0,sp,128
     9e2:	0905                	addi	s2,s2,1
     9e4:	04090203          	lb	tp,64(s2)
     9e8:	0100                	addi	s0,sp,128
     9ea:	0505                	addi	a0,a0,1
     9ec:	0306                	slli	t1,t1,0x1
     9ee:	0901                	addi	s2,s2,0
     9f0:	0004                	0x4
     9f2:	0301                	addi	t1,t1,0
     9f4:	0901                	addi	s2,s2,0
     9f6:	0000                	unimp
     9f8:	0301                	addi	t1,t1,0
     9fa:	0901                	addi	s2,s2,0
     9fc:	0000                	unimp
     9fe:	0501                	addi	a0,a0,0
     a00:	0646                	slli	a2,a2,0x11
     a02:	00097b03          	0x97b03
     a06:	0100                	addi	s0,sp,128
     a08:	0905                	addi	s2,s2,1
     a0a:	02090503          	lb	a0,32(s2)
     a0e:	0100                	addi	s0,sp,128
     a10:	0505                	addi	a0,a0,1
     a12:	0306                	slli	t1,t1,0x1
     a14:	0901                	addi	s2,s2,0
     a16:	0004                	0x4
     a18:	0501                	addi	a0,a0,0
     a1a:	0609                	addi	a2,a2,2
     a1c:	00090003          	lb	zero,0(s2)
     a20:	0100                	addi	s0,sp,128
     a22:	0505                	addi	a0,a0,1
     a24:	0306                	slli	t1,t1,0x1
     a26:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     a2a:	0501                	addi	a0,a0,0
     a2c:	060c                	addi	a1,sp,768
     a2e:	04090003          	lb	zero,64(s2)
     a32:	0100                	addi	s0,sp,128
     a34:	1905                	addi	s2,s2,-31
     a36:	02090303          	lb	t1,32(s2)
    polyR[0] = -1;
     a3a:	0100                	addi	s0,sp,128
     a3c:	1105                	addi	sp,sp,-31
    for(i = 1; i < N; ++i){
     a3e:	0200                	addi	s0,sp,256
     a40:	0104                	addi	s1,sp,128
     a42:	0306                	slli	t1,t1,0x1
     a44:	097d                	addi	s2,s2,31
    for (i = N; i < 55; ++i ){
     a46:	0008                	0x8
     a48:	0501                	addi	a0,a0,0
     a4a:	0005                	c.nop	1
     a4c:	0402                	c.slli64	s0
    for(i = 0; i < N; ++i){
     a4e:	0601                	addi	a2,a2,0
        random_keys[i] = f[i];
     a50:	00090003          	lb	zero,0(s2)
     a54:	0100                	addi	s0,sp,128
     a56:	04090b03          	lb	s6,64(s2)
    for(i = 0; i < N; ++i){
     a5a:	0100                	addi	s0,sp,128
     a5c:	0306                	slli	t1,t1,0x1
     a5e:	0900                	addi	s0,sp,144
    for(i = N; i < (2*N); ++i){
     a60:	000a                	c.slli	zero,0x2
     a62:	0301                	addi	t1,t1,0
     a64:	0906                	slli	s2,s2,0x1
     a66:	0002                	c.slli64	zero
        random_keys[i] = g[i-N];
     a68:	0301                	addi	t1,t1,0
     a6a:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     a6e:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     a70:	00030607          	0x30607
    for(i = (2*N); i < (3*N); ++i){
     a74:	0009                	c.nop	2
     a76:	0100                	addi	s0,sp,128
     a78:	1d05                	addi	s10,s10,-31
    fp = ext_euclid(polyR, f, (N+1), p);
     a7a:	0200                	addi	s0,sp,256
     a7c:	0104                	addi	s1,sp,128
     a7e:	0306                	slli	t1,t1,0x1
     a80:	0908                	addi	a0,sp,144
     a82:	0012                	c.slli	zero,0x4
     a84:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     a86:	0009                	c.nop	2
        random_keys[i] = fp[i-(2*N)];
     a88:	0402                	c.slli64	s0
     a8a:	0601                	addi	a2,a2,0
     a8c:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     a90:	0100                	addi	s0,sp,128
     a92:	1405                	addi	s0,s0,-31
    fq = ext_euclid(polyR, f, (N+1), q);
     a94:	04090103          	lb	sp,64(s2)
     a98:	0100                	addi	s0,sp,128
     a9a:	0d05                	addi	s10,s10,1
     a9c:	0200                	addi	s0,sp,256
     a9e:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     aa0:	0306                	slli	t1,t1,0x1
     aa2:	0965                	addi	s2,s2,25
     aa4:	0004                	0x4
     aa6:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     aa8:	0019                	c.nop	6
     aaa:	0402                	c.slli64	s0
     aac:	01030603          	lb	a2,16(t1)
    for(i = (3*N); i < (4*N); ++i){
     ab0:	0009                	c.nop	2
     ab2:	0100                	addi	s0,sp,128
    fg = polymult2(fq, N, g, N, 0);
     ab4:	1805                	addi	a6,a6,-31
     ab6:	0200                	addi	s0,sp,256
     ab8:	0304                	addi	s1,sp,384
     aba:	06097f03          	0x6097f03
    for(i = 0; i < (2*N-1); ++i){
     abe:	0100                	addi	s0,sp,128
     ac0:	0d05                	addi	s10,s10,1
     ac2:	0200                	addi	s0,sp,256
     ac4:	0304                	addi	s1,sp,384
     ac6:	0306                	slli	t1,t1,0x1
     ac8:	0901                	addi	s2,s2,0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     aca:	0004                	0x4
     acc:	0501                	addi	a0,a0,0
     ace:	0019                	c.nop	6
     ad0:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     ad2:	00030603          	lb	a2,0(t1)
     ad6:	0009                	c.nop	2
     ad8:	0100                	addi	s0,sp,128
     ada:	2c05                	jal	d0a <ntru_deceypt+0x56>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     adc:	0200                	addi	s0,sp,256
     ade:	0304                	addi	s1,sp,384
     ae0:	0306                	slli	t1,t1,0x1
     ae2:	097e                	slli	s2,s2,0x1f
    for(i = (4*N); i < (5*N); ++i){
     ae4:	0004                	0x4
     ae6:	0501                	addi	a0,a0,0
     ae8:	0014                	0x14
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	0402                	c.slli64	s0
     aec:	0301                	addi	t1,t1,0
        random_keys[i] = polyR[i-(5*N)];
     aee:	0900                	addi	s0,sp,144
     af0:	0004                	0x4
     af2:	0501                	addi	a0,a0,0
     af4:	0009                	c.nop	2
    for(i = (5*N); i < (6*N+1); ++i){
     af6:	0402                	c.slli64	s0
     af8:	0601                	addi	a2,a2,0
     afa:	00090003          	lb	zero,0(s2)
     afe:	0100                	addi	s0,sp,128
     b00:	1d05                	addi	s10,s10,-31
	resultkon[0] = 0xaaaaaaa1;
     b02:	0200                	addi	s0,sp,256
     b04:	0204                	addi	s1,sp,256
     b06:	0306                	slli	t1,t1,0x1
     b08:	097f                	0x97f
     b0a:	0004                	0x4
     b0c:	0501                	addi	a0,a0,0
}
     b0e:	0103060f          	0x103060f
     b12:	0809                	addi	a6,a6,2
     b14:	0100                	addi	s0,sp,128
     b16:	1105                	addi	sp,sp,-31
     b18:	0200                	addi	s0,sp,256
     b1a:	0304                	addi	s1,sp,384
     b1c:	0306                	slli	t1,t1,0x1
     b1e:	0916                	slli	s2,s2,0x5
     b20:	0004                	0x4
     b22:	0501                	addi	a0,a0,0
     b24:	0025                	c.nop	9
     b26:	0402                	c.slli64	s0
     b28:	00030603          	lb	a2,0(t1)
     b2c:	0409                	addi	s0,s0,2
     b2e:	0100                	addi	s0,sp,128
     b30:	2b05                	jal	1060 <main+0xc4>
     b32:	0200                	addi	s0,sp,256
     b34:	0304                	addi	s1,sp,384
     b36:	04090003          	lb	zero,64(s2)
     b3a:	0100                	addi	s0,sp,128
     b3c:	2e05                	jal	e6c <memcpy+0x56>
     b3e:	0200                	addi	s0,sp,256
     b40:	0304                	addi	s1,sp,384
     b42:	02090003          	lb	zero,32(s2)
     b46:	0100                	addi	s0,sp,128
     b48:	2a05                	jal	c78 <ntru_encyrpt+0x7c>
     b4a:	0200                	addi	s0,sp,256
     b4c:	0304                	addi	s1,sp,384
     b4e:	06097f03          	0x6097f03
     b52:	0100                	addi	s0,sp,128
        polyR[i] = 0;
     b54:	2e05                	jal	e84 <memcpy+0x6e>
     b56:	0200                	addi	s0,sp,256
     b58:	0304                	addi	s1,sp,384
     b5a:	02090103          	lb	sp,32(s2)
    for(i = 1; i < N; ++i){
     b5e:	0100                	addi	s0,sp,128
     b60:	2505                	jal	1180 <__DTOR_END__+0xdc>
        f[i] = 0;
     b62:	0200                	addi	s0,sp,256
     b64:	0304                	addi	s1,sp,384
     b66:	04090003          	lb	zero,64(s2)
     b6a:	0100                	addi	s0,sp,128
     b6c:	2805                	jal	b9c <generate_keys+0x2bc>
     b6e:	0200                	addi	s0,sp,256
        g[i] = 0;
     b70:	0304                	addi	s1,sp,384
     b72:	0306                	slli	t1,t1,0x1
     b74:	097f                	0x97f
     b76:	0002                	c.slli64	zero
     b78:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     b7a:	0020                	addi	s0,sp,8
     b7c:	0402                	c.slli64	s0
        random_keys[i] = f[i];
     b7e:	0301                	addi	t1,t1,0
     b80:	0900                	addi	s0,sp,144
     b82:	0000                	unimp
     b84:	0501                	addi	a0,a0,0
     b86:	000d                	c.nop	3
     b88:	0402                	c.slli64	s0
     b8a:	0601                	addi	a2,a2,0
     b8c:	00090003          	lb	zero,0(s2)
     b90:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b92:	2505                	jal	11b2 <__DTOR_END__+0x10e>
        random_keys[i] = g[i-N];
     b94:	0200                	addi	s0,sp,256
     b96:	0204                	addi	s1,sp,256
     b98:	0306                	slli	t1,t1,0x1
     b9a:	097f                	0x97f
     b9c:	0004                	0x4
    for(i = N; i < (2*N); ++i){
     b9e:	0501                	addi	a0,a0,0
     ba0:	04020027          	0x4020027
        random_keys[i] = fp[i-(2*N)];
     ba4:	0602                	c.slli64	a2
     ba6:	00090003          	lb	zero,0(s2)
     baa:	0100                	addi	s0,sp,128
     bac:	1d05                	addi	s10,s10,-31
    for(i = (2*N); i < (3*N); ++i){
     bae:	0200                	addi	s0,sp,256
     bb0:	0104                	addi	s1,sp,128
     bb2:	0306                	slli	t1,t1,0x1
        random_keys[i] = fq[i-(3*N)];
     bb4:	0900                	addi	s0,sp,144
     bb6:	0006                	c.slli	zero,0x1
     bb8:	0501                	addi	a0,a0,0
     bba:	0009                	c.nop	2
     bbc:	0402                	c.slli64	s0
     bbe:	0601                	addi	a2,a2,0
     bc0:	00090003          	lb	zero,0(s2)
     bc4:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     bc6:	0e05                	addi	t3,t3,1
        fg[i] = fg[i]*p;
     bc8:	04091003          	lh	zero,64(s2)
    for(i = 0; i < (2*N-1); ++i){
     bcc:	0100                	addi	s0,sp,128
        fg[i] = fg[i]*p;
     bce:	0d05                	addi	s10,s10,1
     bd0:	0200                	addi	s0,sp,256
     bd2:	0104                	addi	s1,sp,128
     bd4:	0306                	slli	t1,t1,0x1
    for(i = 0; i < (2*N-1); ++i){
     bd6:	097f                	0x97f
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bd8:	0002                	c.slli64	zero
     bda:	0501                	addi	a0,a0,0
     bdc:	0005                	c.nop	1
     bde:	0402                	c.slli64	s0
     be0:	0601                	addi	a2,a2,0
     be2:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     be6:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     be8:	0c090003          	lb	zero,192(s2)
     bec:	0100                	addi	s0,sp,128
     bee:	0e05                	addi	t3,t3,1
     bf0:	02090103          	lb	sp,32(s2)
     bf4:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     bf6:	1405                	addi	s0,s0,-31
        random_keys[i] = polyR[i-(5*N)];
     bf8:	04097103          	0x4097103
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bfc:	0100                	addi	s0,sp,128
	resultkon[0] = 0xbbbbbbb0;
     bfe:	1105                	addi	sp,sp,-31
     c00:	0200                	addi	s0,sp,256
     c02:	0304                	addi	s1,sp,384
     c04:	0306                	slli	t1,t1,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c06:	0908                	addi	a0,sp,144
     c08:	0004                	0x4
     c0a:	0501                	addi	a0,a0,0
     c0c:	0029                	c.nop	10
     c0e:	0402                	c.slli64	s0
     c10:	00030603          	lb	a2,0(t1)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	0409                	addi	s0,s0,2
     c16:	0100                	addi	s0,sp,128
     c18:	2f05                	jal	1348 <_bss_start+0x120>
     c1a:	0200                	addi	s0,sp,256
     c1c:	0304                	addi	s1,sp,384
     c1e:	04090003          	lb	zero,64(s2)
	resultkon[0] = 0xbbbbbbb0;
     c22:	0100                	addi	s0,sp,128
     c24:	3205                	jal	544 <polydiv+0x48>
     c26:	0200                	addi	s0,sp,256
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c28:	0304                	addi	s1,sp,384
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2a:	02090003          	lb	zero,32(s2)
     c2e:	0100                	addi	s0,sp,128
     c30:	2a05                	jal	d60 <ntru_deceypt+0xac>
     c32:	0200                	addi	s0,sp,256
	resultkon[0] = 0xbbbbbbb0;
     c34:	0304                	addi	s1,sp,384
     c36:	06097f03          	0x6097f03
    temp = polymult(public_key,N,random_val,48,q,0);
     c3a:	0100                	addi	s0,sp,128
     c3c:	3205                	jal	55c <polydiv+0x60>
     c3e:	0200                	addi	s0,sp,256
     c40:	0304                	addi	s1,sp,384
     c42:	02090103          	lb	sp,32(s2)
     c46:	0100                	addi	s0,sp,128
     c48:	2905                	jal	1078 <main+0xdc>
     c4a:	0200                	addi	s0,sp,256
     c4c:	0304                	addi	s1,sp,384
    for(i = 0; i < 48; ++i){
     c4e:	04090003          	lb	zero,64(s2)
        temp[i] = temp[i] + message[i];
     c52:	0100                	addi	s0,sp,128
     c54:	2805                	jal	c84 <ntru_encyrpt+0x88>
     c56:	0200                	addi	s0,sp,256
     c58:	0304                	addi	s1,sp,384
     c5a:	0306                	slli	t1,t1,0x1
     c5c:	097f                	0x97f
     c5e:	0002                	c.slli64	zero
     c60:	0501                	addi	a0,a0,0
     c62:	0020                	addi	s0,sp,8
    for(i = 0; i < 48; ++i){
     c64:	0402                	c.slli64	s0
     c66:	0301                	addi	t1,t1,0
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	0900                	addi	s0,sp,144
     c6a:	0000                	unimp
     c6c:	0501                	addi	a0,a0,0
     c6e:	000d                	c.nop	3
     c70:	0402                	c.slli64	s0
     c72:	0601                	addi	a2,a2,0
     c74:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     c78:	0100                	addi	s0,sp,128
     c7a:	2505                	jal	129a <_bss_start+0x72>
     c7c:	0200                	addi	s0,sp,256
     c7e:	0204                	addi	s1,sp,256
     c80:	0306                	slli	t1,t1,0x1
     c82:	097f                	0x97f
}
     c84:	0004                	0x4
     c86:	0501                	addi	a0,a0,0
	resultkon[0] = 0xbbbbbbb1;
     c88:	04020027          	0x4020027
     c8c:	0602                	c.slli64	a2
     c8e:	00090003          	lb	zero,0(s2)
     c92:	0100                	addi	s0,sp,128
}
     c94:	0d05                	addi	s10,s10,1
     c96:	0200                	addi	s0,sp,256
     c98:	0304                	addi	s1,sp,384
     c9a:	0306                	slli	t1,t1,0x1
     c9c:	090a                	slli	s2,s2,0x2
     c9e:	0008                	0x8
     ca0:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     ca2:	0019                	c.nop	6
     ca4:	0402                	c.slli64	s0
     ca6:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < (3*N); ++i){
     caa:	0009                	c.nop	2
     cac:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     cae:	2305                	jal	11ce <__DTOR_END__+0x12a>
     cb0:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     cb2:	0304                	addi	s1,sp,384
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	04097f03          	0x4097f03
     cb8:	0100                	addi	s0,sp,128
     cba:	1905                	addi	s2,s2,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     cbc:	0200                	addi	s0,sp,256
     cbe:	0304                	addi	s1,sp,384
     cc0:	04090103          	lb	sp,64(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc4:	0100                	addi	s0,sp,128
	resultkon[0] = 0xccccccc0;
     cc6:	2305                	jal	11e6 <__DTOR_END__+0x142>
     cc8:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	0304                	addi	s1,sp,384
	resultkon[0] = 0xccccccc0;
     ccc:	0306                	slli	t1,t1,0x1
     cce:	097f                	0x97f
     cd0:	0006                	c.slli	zero,0x1
     cd2:	0501                	addi	a0,a0,0
     cd4:	0011                	c.nop	4
     cd6:	0402                	c.slli64	s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd8:	0301                	addi	t1,t1,0
     cda:	0900                	addi	s0,sp,144
     cdc:	0002                	c.slli64	zero
     cde:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce0:	0009                	c.nop	2
	resultkon[0] = 0xccccccc0;
     ce2:	0402                	c.slli64	s0
     ce4:	0601                	addi	a2,a2,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce6:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cea:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cec:	1605                	addi	a2,a2,-31
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cee:	0200                	addi	s0,sp,256
     cf0:	0204                	addi	s1,sp,256
     cf2:	0306                	slli	t1,t1,0x1
     cf4:	097f                	0x97f
     cf6:	0004                	0x4
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cf8:	0501                	addi	a0,a0,0
     cfa:	0305                	addi	t1,t1,1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cfc:	0906                	slli	s2,s2,0x1
     cfe:	0006                	c.slli	zero,0x1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d00:	0301                	addi	t1,t1,0
     d02:	0902                	c.slli64	s2
     d04:	0000                	unimp
     d06:	0501                	addi	a0,a0,0
     d08:	0601                	addi	a2,a2,0
     d0a:	00090103          	lb	sp,0(s2)
     d0e:	0100                	addi	s0,sp,128
     d10:	4305                	li	t1,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d12:	0306                	slli	t1,t1,0x1
     d14:	0902                	c.slli64	s2
     d16:	002a                	c.slli	zero,0xa
     d18:	0501                	addi	a0,a0,0
     d1a:	0305                	addi	t1,t1,1
        if(a2[i] <= q/2)
     d1c:	0902                	c.slli64	s2
     d1e:	0000                	unimp
     d20:	0301                	addi	t1,t1,0
    for (i = 0; i < N; ++i){
     d22:	0901                	addi	s2,s2,0
     d24:	0000                	unimp
     d26:	0301                	addi	t1,t1,0
    c = polymult2(secret_key_fp,N,a2,N,0);
     d28:	0902                	c.slli64	s2
     d2a:	0000                	unimp
     d2c:	0501                	addi	a0,a0,0
     d2e:	0609                	addi	a2,a2,2
     d30:	00090003          	lb	zero,0(s2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d34:	0100                	addi	s0,sp,128
     d36:	4305                	li	t1,1
     d38:	04097b03          	0x4097b03
     d3c:	0100                	addi	s0,sp,128
     d3e:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	02090503          	lb	a0,32(s2)
     d44:	0100                	addi	s0,sp,128
}
     d46:	4305                	li	t1,1
     d48:	02097b03          	0x2097b03
	resultkon[0] = 0xccccccc1;
     d4c:	0100                	addi	s0,sp,128
     d4e:	0905                	addi	s2,s2,1
     d50:	1a090503          	lb	a0,416(s2)
     d54:	0100                	addi	s0,sp,128
}
     d56:	4305                	li	t1,1
     d58:	02097b03          	0x2097b03
     d5c:	0100                	addi	s0,sp,128
     d5e:	0905                	addi	s2,s2,1
     d60:	02090503          	lb	a0,32(s2)
     d64:	0100                	addi	s0,sp,128
     d66:	06090103          	lb	sp,96(s2)
        a2[i-(2*N)] = a2[i];
     d6a:	0100                	addi	s0,sp,128
     d6c:	06090203          	lb	tp,96(s2)
     d70:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	04090103          	lb	sp,64(s2)
        a2[i-(2*N)] = a2[i];
     d76:	0100                	addi	s0,sp,128
     d78:	08097f03          	0x8097f03
        if(a2[i] <= q/2)
     d7c:	0100                	addi	s0,sp,128
     d7e:	4305                	li	t1,1
     d80:	02097803          	0x2097803
            a2[i] = (-1)*(q-a2[i]);
     d84:	0100                	addi	s0,sp,128
     d86:	0905                	addi	s2,s2,1
    for (i = 0; i < N; ++i){
     d88:	02090903          	lb	s2,32(s2)
     d8c:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     d8e:	4305                	li	t1,1
     d90:	04097703          	0x4097703
     d94:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d96:	0905                	addi	s2,s2,1
     d98:	02090503          	lb	a0,32(s2)
        c2[i-(2*N)] = c2[i];
     d9c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d9e:	0505                	addi	a0,a0,1
     da0:	0306                	slli	t1,t1,0x1
     da2:	0901                	addi	s2,s2,0
     da4:	0004                	0x4
     da6:	0301                	addi	t1,t1,0
     da8:	0901                	addi	s2,s2,0
     daa:	0000                	unimp
     dac:	0301                	addi	t1,t1,0
     dae:	0901                	addi	s2,s2,0
     db0:	0000                	unimp
     db2:	0301                	addi	t1,t1,0
     db4:	0901                	addi	s2,s2,0
     db6:	0000                	unimp
     db8:	0501                	addi	a0,a0,0
     dba:	0602                	c.slli64	a2
     dbc:	00091503          	lh	a0,0(s2)
     dc0:	0100                	addi	s0,sp,128
     dc2:	4305                	li	t1,1
     dc4:	06096203          	0x6096203
     dc8:	0100                	addi	s0,sp,128
     dca:	0905                	addi	s2,s2,1
     dcc:	04090903          	lb	s2,64(s2)
     dd0:	0100                	addi	s0,sp,128
     dd2:	0205                	addi	tp,tp,1
     dd4:	04091503          	lh	a0,64(s2)
     dd8:	0100                	addi	s0,sp,128
     dda:	02090d03          	lb	s10,32(s2)
     dde:	0100                	addi	s0,sp,128
     de0:	0905                	addi	s2,s2,1
     de2:	08095e03          	lhu	t3,128(s2)
     de6:	0100                	addi	s0,sp,128
     de8:	0205                	addi	tp,tp,1
     dea:	0306                	slli	t1,t1,0x1
     dec:	0915                	addi	s2,s2,5
     dee:	0002                	c.slli64	zero
     df0:	0301                	addi	t1,t1,0
     df2:	090d                	addi	s2,s2,3
     df4:	0000                	unimp
     df6:	0501                	addi	a0,a0,0
     df8:	0305                	addi	t1,t1,1
     dfa:	090d                	addi	s2,s2,3
     dfc:	0000                	unimp
     dfe:	0301                	addi	t1,t1,0
     e00:	0902                	c.slli64	s2
     e02:	0008                	0x8
     e04:	0301                	addi	t1,t1,0
     e06:	0902                	c.slli64	s2
     e08:	0008                	0x8
     e0a:	0501                	addi	a0,a0,0
     e0c:	060c                	addi	a1,sp,768
     e0e:	00090003          	lb	zero,0(s2)
     e12:	0100                	addi	s0,sp,128
     e14:	1105                	addi	sp,sp,-31
     e16:	0200                	addi	s0,sp,256
     e18:	0104                	addi	s1,sp,128
     e1a:	0306                	slli	t1,t1,0x1
     e1c:	0900                	addi	s0,sp,144
     e1e:	0002                	c.slli64	zero
     e20:	0501                	addi	a0,a0,0
     e22:	0005                	c.nop	1
     e24:	0402                	c.slli64	s0
     e26:	0601                	addi	a2,a2,0
     e28:	00090003          	lb	zero,0(s2)
     e2c:	0100                	addi	s0,sp,128
     e2e:	1805                	addi	a6,a6,-31
     e30:	0200                	addi	s0,sp,256
     e32:	0104                	addi	s1,sp,128
     e34:	0306                	slli	t1,t1,0x1
     e36:	0906                	slli	s2,s2,0x1
     e38:	0004                	0x4
     e3a:	0501                	addi	a0,a0,0
     e3c:	0005                	c.nop	1
     e3e:	0402                	c.slli64	s0
     e40:	0601                	addi	a2,a2,0
     e42:	08090003          	lb	zero,128(s2)
     e46:	0100                	addi	s0,sp,128
     e48:	0c05                	addi	s8,s8,1
     e4a:	0200                	addi	s0,sp,256
     e4c:	0104                	addi	s1,sp,128
     e4e:	04097a03          	0x4097a03
     e52:	0100                	addi	s0,sp,128
     e54:	0200                	addi	s0,sp,256
     e56:	0104                	addi	s1,sp,128
     e58:	04090f03          	lb	t5,64(s2)
     e5c:	0100                	addi	s0,sp,128
     e5e:	1105                	addi	sp,sp,-31
     e60:	0200                	addi	s0,sp,256
     e62:	0104                	addi	s1,sp,128
     e64:	0306                	slli	t1,t1,0x1
     e66:	097f                	0x97f
     e68:	0002                	c.slli64	zero
     e6a:	0501                	addi	a0,a0,0
     e6c:	0005                	c.nop	1
     e6e:	0402                	c.slli64	s0
     e70:	0601                	addi	a2,a2,0
     e72:	00090003          	lb	zero,0(s2)
     e76:	0100                	addi	s0,sp,128
     e78:	0905                	addi	s2,s2,1
     e7a:	0200                	addi	s0,sp,256
     e7c:	0304                	addi	s1,sp,384
     e7e:	0306                	slli	t1,t1,0x1
     e80:	00080973          	0x80973
     e84:	0501                	addi	a0,a0,0
     e86:	000e                	c.slli	zero,0x3
     e88:	0402                	c.slli64	s0
     e8a:	00030603          	lb	a2,0(t1)
     e8e:	0409                	addi	s0,s0,2
     e90:	0100                	addi	s0,sp,128
     e92:	0200                	addi	s0,sp,256
     e94:	0304                	addi	s1,sp,384
     e96:	04090103          	lb	sp,64(s2)
     e9a:	0100                	addi	s0,sp,128
     e9c:	0200                	addi	s0,sp,256
     e9e:	0304                	addi	s1,sp,384
     ea0:	02097f03          	0x2097f03
     ea4:	0100                	addi	s0,sp,128
     ea6:	0905                	addi	s2,s2,1
     ea8:	0200                	addi	s0,sp,256
     eaa:	0304                	addi	s1,sp,384
     eac:	0306                	slli	t1,t1,0x1
     eae:	0901                	addi	s2,s2,0
     eb0:	0004                	0x4
     eb2:	0501                	addi	a0,a0,0
     eb4:	000e                	c.slli	zero,0x3
     eb6:	0402                	c.slli64	s0
     eb8:	00030603          	lb	a2,0(t1)
     ebc:	0009                	c.nop	2
     ebe:	0100                	addi	s0,sp,128
     ec0:	1d05                	addi	s10,s10,-31
     ec2:	0200                	addi	s0,sp,256
     ec4:	0304                	addi	s1,sp,384
     ec6:	0306                	slli	t1,t1,0x1
     ec8:	097e                	slli	s2,s2,0x1f
     eca:	0004                	0x4
     ecc:	0501                	addi	a0,a0,0
     ece:	0309                	addi	t1,t1,2
     ed0:	00040907          	0x40907
     ed4:	0501                	addi	a0,a0,0
     ed6:	0003060b          	0x3060b
     eda:	0009                	c.nop	2
     edc:	0100                	addi	s0,sp,128
     ede:	2005                	jal	efe <memset+0xa>
     ee0:	0200                	addi	s0,sp,256
     ee2:	0204                	addi	s1,sp,256
     ee4:	0306                	slli	t1,t1,0x1
     ee6:	097f                	0x97f
     ee8:	0002                	c.slli64	zero
     eea:	0501                	addi	a0,a0,0
     eec:	0022                	c.slli	zero,0x8
     eee:	0402                	c.slli64	s0
     ef0:	0602                	c.slli64	a2
     ef2:	00090003          	lb	zero,0(s2)
     ef6:	0100                	addi	s0,sp,128
     ef8:	0905                	addi	s2,s2,1
     efa:	0306                	slli	t1,t1,0x1
     efc:	0909                	addi	s2,s2,2
     efe:	0004                	0x4
     f00:	0501                	addi	a0,a0,0
     f02:	0615                	addi	a2,a2,5
     f04:	00090003          	lb	zero,0(s2)
     f08:	0100                	addi	s0,sp,128
     f0a:	0c05                	addi	s8,s8,1
     f0c:	06090003          	lb	zero,96(s2)
     f10:	0100                	addi	s0,sp,128
     f12:	1a05                	addi	s4,s4,-31
     f14:	0200                	addi	s0,sp,256
     f16:	0204                	addi	s1,sp,256
     f18:	0306                	slli	t1,t1,0x1
     f1a:	097f                	0x97f
     f1c:	0004                	0x4
     f1e:	0501                	addi	a0,a0,0
     f20:	0309                	addi	t1,t1,2
     f22:	00040907          	0x40907
     f26:	0501                	addi	a0,a0,0
     f28:	0003060b          	0x3060b
     f2c:	0009                	c.nop	2
     f2e:	0100                	addi	s0,sp,128
     f30:	2005                	jal	f50 <memset+0x5c>
     f32:	0200                	addi	s0,sp,256
     f34:	0204                	addi	s1,sp,256
     f36:	0306                	slli	t1,t1,0x1
     f38:	097f                	0x97f
     f3a:	0002                	c.slli64	zero
     f3c:	0501                	addi	a0,a0,0
     f3e:	0022                	c.slli	zero,0x8
     f40:	0402                	c.slli64	s0
     f42:	0602                	c.slli64	a2
     f44:	00090003          	lb	zero,0(s2)
     f48:	0100                	addi	s0,sp,128
     f4a:	1805                	addi	a6,a6,-31
     f4c:	0200                	addi	s0,sp,256
     f4e:	0104                	addi	s1,sp,128
     f50:	0306                	slli	t1,t1,0x1
     f52:	0900                	addi	s0,sp,144
     f54:	0002                	c.slli64	zero
     f56:	0501                	addi	a0,a0,0
     f58:	0005                	c.nop	1
     f5a:	0402                	c.slli64	s0
     f5c:	0601                	addi	a2,a2,0
     f5e:	08090003          	lb	zero,128(s2)
     f62:	0100                	addi	s0,sp,128
     f64:	0b05                	addi	s6,s6,1
     f66:	0306                	slli	t1,t1,0x1
     f68:	090c                	addi	a1,sp,144
     f6a:	0004                	0x4
     f6c:	0501                	addi	a0,a0,0
     f6e:	0302                	c.slli64	t1
     f70:	00f6                	slli	ra,ra,0x1d
     f72:	0409                	addi	s0,s0,2
     f74:	0100                	addi	s0,sp,128
     f76:	0505                	addi	a0,a0,1
     f78:	0e090203          	lb	tp,224(s2)
     f7c:	0100                	addi	s0,sp,128
     f7e:	1b05                	addi	s6,s6,-31
     f80:	0306                	slli	t1,t1,0x1
     f82:	0900                	addi	s0,sp,144
     f84:	0000                	unimp
     f86:	0501                	addi	a0,a0,0
     f88:	09010313          	addi	t1,sp,144
     f8c:	0004                	0x4
     f8e:	0501                	addi	a0,a0,0
     f90:	0015                	c.nop	5
     f92:	0402                	c.slli64	s0
     f94:	0601                	addi	a2,a2,0
     f96:	08097f03          	0x8097f03
     f9a:	0100                	addi	s0,sp,128
int main(){
     f9c:	0505                	addi	a0,a0,1
     f9e:	0200                	addi	s0,sp,256
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fa0:	0104                	addi	s1,sp,128
     fa2:	0306                	slli	t1,t1,0x1
     fa4:	0900                	addi	s0,sp,144
     fa6:	0000                	unimp
     fa8:	0601                	addi	a2,a2,0
     faa:	04090403          	lb	s0,64(s2)
int main(){
     fae:	0100                	addi	s0,sp,128
     fb0:	00090203          	lb	tp,0(s2)
     fb4:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fb6:	0105                	addi	sp,sp,1
    keys = generate_keys(N, p, q);
     fb8:	0306                	slli	t1,t1,0x1
     fba:	0901                	addi	s2,s2,0
     fbc:	0000                	unimp
     fbe:	0501                	addi	a0,a0,0
     fc0:	0609                	addi	a2,a2,2
     fc2:	097f8403          	lb	s0,151(t6)
    for(i = 0; i < N; ++i){
     fc6:	002a                	c.slli	zero,0xa
     fc8:	0501                	addi	a0,a0,0
        secret_key_f[i] = keys[i];
     fca:	0616                	slli	a2,a2,0x5
     fcc:	00090003          	lb	zero,0(s2)
     fd0:	0100                	addi	s0,sp,128
     fd2:	0d05                	addi	s10,s10,1
     fd4:	04090003          	lb	zero,64(s2)
    for(i = 0; i < N; ++i){
     fd8:	0100                	addi	s0,sp,128
     fda:	1305                	addi	t1,t1,-31
    for(i = N; i < (2*N); ++i){
     fdc:	04090003          	lb	zero,64(s2)
     fe0:	0100                	addi	s0,sp,128
     fe2:	0305                	addi	t1,t1,1
     fe4:	04091103          	lh	sp,64(s2)
        secret_key_fp[i-(2*N)] = keys[i];
     fe8:	0100                	addi	s0,sp,128
     fea:	1305                	addi	t1,t1,-31
     fec:	06096f03          	0x6096f03
     ff0:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     ff2:	0305                	addi	t1,t1,1
     ff4:	0306                	slli	t1,t1,0x1
    for(i = (3*N); i < (4*N); ++i){
     ff6:	0911                	addi	s2,s2,4
     ff8:	0002                	c.slli64	zero
     ffa:	0501                	addi	a0,a0,0
     ffc:	0309                	addi	t1,t1,2
     ffe:	0904                	addi	s1,sp,144
    1000:	0002                	c.slli64	zero
        public_key[i-(4*N)] = keys[i];
    1002:	0501                	addi	a0,a0,0
    1004:	00030613          	mv	a2,t1
    1008:	0009                	c.nop	2
    100a:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
    100c:	0205                	addi	tp,tp,1
    100e:	0e091403          	lh	s0,224(s2)
    1012:	0100                	addi	s0,sp,128
    1014:	1305                	addi	t1,t1,-31
    1016:	04096c03          	0x4096c03
        ring_poly[i-(5*N)] = keys[i];
    101a:	0100                	addi	s0,sp,128
    101c:	0205                	addi	tp,tp,1
    101e:	0306                	slli	t1,t1,0x1
    1020:	0914                	addi	a3,sp,144
    for(i = (5*N); i < (6*N+1); ++i){
    1022:	0002                	c.slli64	zero
    1024:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1026:	0309                	addi	t1,t1,2
    1028:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    102c:	0501                	addi	a0,a0,0
    102e:	0610                	addi	a2,sp,768
    1030:	02090003          	lb	zero,32(s2)
    1034:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1036:	1505                	addi	a0,a0,-31
    1038:	0200                	addi	s0,sp,256
    103a:	0104                	addi	s1,sp,128
    103c:	0306                	slli	t1,t1,0x1
    103e:	0900                	addi	s0,sp,144
    1040:	0002                	c.slli64	zero
    1042:	0501                	addi	a0,a0,0
    1044:	0009                	c.nop	2
    1046:	0402                	c.slli64	s0
    1048:	0601                	addi	a2,a2,0
            resultkon[0] = 0xDEDEDEDE;
    104a:	00090003          	lb	zero,0(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    104e:	0100                	addi	s0,sp,128
    1050:	0205                	addi	tp,tp,1
    1052:	0306                	slli	t1,t1,0x1
    1054:	00040917          	auipc	s2,0x40
            resultkon[0] = 0xDEDEDEDE;
    1058:	0501                	addi	a0,a0,0
    105a:	0309                	addi	t1,t1,2
    for(i = 0; i < 32; ++i){
    105c:	00080903          	lb	s2,0(a6)
        if(!(message[i] == Dec_Message[i])){
    1060:	0501                	addi	a0,a0,0
    1062:	0003060f          	0x3060f
    1066:	0209                	addi	tp,tp,2
    1068:	0100                	addi	s0,sp,128
    106a:	1405                	addi	s0,s0,-31
    106c:	0200                	addi	s0,sp,256
    106e:	0104                	addi	s1,sp,128
            resultkon[0] = 0xBABABABA;
    1070:	0306                	slli	t1,t1,0x1
    1072:	0900                	addi	s0,sp,144
    1074:	0002                	c.slli64	zero
    1076:	0501                	addi	a0,a0,0
    1078:	0009                	c.nop	2
}
    107a:	0402                	c.slli64	s0
    107c:	0601                	addi	a2,a2,0
    107e:	00090003          	lb	zero,0(s2) # 41054 <_stack_start+0x31054>
    1082:	0100                	addi	s0,sp,128
    1084:	0205                	addi	tp,tp,1
    1086:	0306                	slli	t1,t1,0x1
    1088:	0004090f          	0x4090f
    for(i = 0; i < 32; ++i){
    108c:	0501                	addi	a0,a0,0
    108e:	0309                	addi	t1,t1,2
    1090:	00080903          	lb	s2,0(a6)
    1094:	0501                	addi	a0,a0,0
    1096:	0610                	addi	a2,sp,768
    1098:	00090003          	lb	zero,0(s2)
    109c:	0100                	addi	s0,sp,128
    109e:	1c05                	addi	s8,s8,-31
    10a0:	0200                	addi	s0,sp,256
    10a2:	0104                	addi	s1,sp,128
    10a4:	0306                	slli	t1,t1,0x1
    10a6:	0900                	addi	s0,sp,144
    10a8:	0002                	c.slli64	zero
    10aa:	0501                	addi	a0,a0,0
    10ac:	0009                	c.nop	2
    10ae:	0402                	c.slli64	s0
    10b0:	0601                	addi	a2,a2,0
    10b2:	08090003          	lb	zero,128(s2)
    10b6:	0100                	addi	s0,sp,128
    10b8:	0d05                	addi	s10,s10,1
    10ba:	0200                	addi	s0,sp,256
    10bc:	0304                	addi	s1,sp,384
    10be:	0306                	slli	t1,t1,0x1
    10c0:	0955                	addi	s2,s2,21
    10c2:	0008                	0x8
    10c4:	0501                	addi	a0,a0,0
    10c6:	0030                	addi	a2,sp,8
    10c8:	0402                	c.slli64	s0
    10ca:	00030603          	lb	a2,0(t1)
    10ce:	0009                	c.nop	2
    10d0:	0100                	addi	s0,sp,128
    10d2:	2705                	jal	17f2 <result+0x11a>
    10d4:	0200                	addi	s0,sp,256
    10d6:	0304                	addi	s1,sp,384
    10d8:	06090003          	lb	zero,96(s2)
    10dc:	0100                	addi	s0,sp,128
    10de:	2105                	jal	14fe <product2+0x7e>
    10e0:	0200                	addi	s0,sp,256
    10e2:	0304                	addi	s1,sp,384
    10e4:	04097f03          	0x4097f03
    10e8:	0100                	addi	s0,sp,128
    10ea:	2705                	jal	180a <result+0x132>
    10ec:	0200                	addi	s0,sp,256
    10ee:	0304                	addi	s1,sp,384
    10f0:	04090103          	lb	sp,64(s2)
    10f4:	0100                	addi	s0,sp,128
    10f6:	1905                	addi	s2,s2,-31
    10f8:	0200                	addi	s0,sp,256
    10fa:	0304                	addi	s1,sp,384
    10fc:	02090003          	lb	zero,32(s2)
    1100:	0100                	addi	s0,sp,128
    1102:	2105                	jal	1522 <product2+0xa2>
    1104:	0200                	addi	s0,sp,256
    1106:	0304                	addi	s1,sp,384
    1108:	0306                	slli	t1,t1,0x1
    110a:	097f                	0x97f
    110c:	0004                	0x4
    110e:	0501                	addi	a0,a0,0
    1110:	000d                	c.nop	3
    1112:	0402                	c.slli64	s0
    1114:	091b0303          	lb	t1,145(s6)
    1118:	0002                	c.slli64	zero
    111a:	0501                	addi	a0,a0,0
    111c:	001c                	0x1c
    111e:	0402                	c.slli64	s0
    1120:	00030603          	lb	a2,0(t1)
    1124:	0009                	c.nop	2
    1126:	0100                	addi	s0,sp,128
    1128:	1905                	addi	s2,s2,-31
    112a:	0200                	addi	s0,sp,256
    112c:	0304                	addi	s1,sp,384
    112e:	06090003          	lb	zero,96(s2)
    1132:	0100                	addi	s0,sp,128
    1134:	2005                	jal	1154 <__DTOR_END__+0xb0>
    1136:	0200                	addi	s0,sp,256
    1138:	0304                	addi	s1,sp,384
    113a:	04097f03          	0x4097f03
    113e:	0100                	addi	s0,sp,128
    1140:	1905                	addi	s2,s2,-31
    1142:	0200                	addi	s0,sp,256
    1144:	0304                	addi	s1,sp,384
    1146:	04090103          	lb	sp,64(s2)
    114a:	0100                	addi	s0,sp,128
    114c:	1205                	addi	tp,tp,-31
    114e:	0200                	addi	s0,sp,256
    1150:	0304                	addi	s1,sp,384
    1152:	02090003          	lb	zero,32(s2)
    1156:	0100                	addi	s0,sp,128
    1158:	2005                	jal	1178 <__DTOR_END__+0xd4>
    115a:	0200                	addi	s0,sp,256
    115c:	0304                	addi	s1,sp,384
    115e:	0306                	slli	t1,t1,0x1
    1160:	097f                	0x97f
    1162:	0004                	0x4
    1164:	0501                	addi	a0,a0,0
    1166:	030d                	addi	t1,t1,3
    1168:	00020913          	mv	s2,tp
    116c:	0501                	addi	a0,a0,0
    116e:	0003060f          	0x3060f
    1172:	0009                	c.nop	2
    1174:	0100                	addi	s0,sp,128
    1176:	2405                	jal	1396 <_bss_start+0x16e>
    1178:	0200                	addi	s0,sp,256
    117a:	0204                	addi	s1,sp,256
    117c:	0306                	slli	t1,t1,0x1
    117e:	097f                	0x97f
    1180:	0002                	c.slli64	zero
    1182:	0501                	addi	a0,a0,0
    1184:	0026                	c.slli	zero,0x9
    1186:	0402                	c.slli64	s0
    1188:	0602                	c.slli64	a2
    118a:	00090003          	lb	zero,0(s2)
    118e:	0100                	addi	s0,sp,128
    1190:	0d05                	addi	s10,s10,1
    1192:	0200                	addi	s0,sp,256
    1194:	0304                	addi	s1,sp,384
    1196:	0306                	slli	t1,t1,0x1
    1198:	0909                	addi	s2,s2,2
    119a:	0004                	0x4
    119c:	0501                	addi	a0,a0,0
    119e:	0012                	c.slli	zero,0x4
    11a0:	0402                	c.slli64	s0
    11a2:	00030603          	lb	a2,0(t1)
    11a6:	0009                	c.nop	2
    11a8:	0100                	addi	s0,sp,128
    11aa:	2105                	jal	15ca <product2+0x14a>
    11ac:	0200                	addi	s0,sp,256
    11ae:	0304                	addi	s1,sp,384
    11b0:	0306                	slli	t1,t1,0x1
    11b2:	097f                	0x97f
    11b4:	000a                	c.slli	zero,0x2
    11b6:	0501                	addi	a0,a0,0
    11b8:	0015                	c.nop	5
    11ba:	0402                	c.slli64	s0
    11bc:	0301                	addi	t1,t1,0
    11be:	0900                	addi	s0,sp,144
    11c0:	0002                	c.slli64	zero
    11c2:	0501                	addi	a0,a0,0
    11c4:	0009                	c.nop	2
    11c6:	0402                	c.slli64	s0
    11c8:	0601                	addi	a2,a2,0
    11ca:	00090003          	lb	zero,0(s2)
    11ce:	0100                	addi	s0,sp,128
    11d0:	0200                	addi	s0,sp,256
    11d2:	0304                	addi	s1,sp,384
    11d4:	0306                	slli	t1,t1,0x1
    11d6:	0916                	slli	s2,s2,0x5
    11d8:	0006                	c.slli	zero,0x1
    11da:	0501                	addi	a0,a0,0
    11dc:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    11e0:	00030603          	lb	a2,0(t1)
    11e4:	0009                	c.nop	2
    11e6:	0100                	addi	s0,sp,128
    11e8:	2505                	jal	1808 <result+0x130>
    11ea:	0200                	addi	s0,sp,256
    11ec:	0304                	addi	s1,sp,384
    11ee:	0306                	slli	t1,t1,0x1
    11f0:	097f                	0x97f
    11f2:	000c                	0xc
    11f4:	0501                	addi	a0,a0,0
    11f6:	033c                	addi	a5,sp,392
    11f8:	090a                	slli	s2,s2,0x2
    11fa:	0006                	c.slli	zero,0x1
    11fc:	0501                	addi	a0,a0,0
    11fe:	0305                	addi	t1,t1,1
    1200:	0902                	c.slli64	s2
    1202:	0000                	unimp
    1204:	0301                	addi	t1,t1,0
    1206:	0901                	addi	s2,s2,0
    1208:	0000                	unimp
    120a:	0301                	addi	t1,t1,0
    120c:	0901                	addi	s2,s2,0
    120e:	0000                	unimp
    1210:	0501                	addi	a0,a0,0
    1212:	0609                	addi	a2,a2,2
    1214:	00090003          	lb	zero,0(s2)
    1218:	0100                	addi	s0,sp,128
    121a:	3c05                	jal	c4a <ntru_encyrpt+0x4e>
    121c:	04097c03          	0x4097c03
    1220:	0100                	addi	s0,sp,128
    1222:	0905                	addi	s2,s2,1
    1224:	02090403          	lb	s0,32(s2)
    1228:	0100                	addi	s0,sp,128
    122a:	3c05                	jal	c5a <ntru_encyrpt+0x5e>
    122c:	04097c03          	0x4097c03
    1230:	0100                	addi	s0,sp,128
    1232:	0905                	addi	s2,s2,1
    1234:	1c090403          	lb	s0,448(s2)
    1238:	0100                	addi	s0,sp,128
    123a:	06090103          	lb	sp,96(s2)
    123e:	0100                	addi	s0,sp,128
    1240:	06090103          	lb	sp,96(s2)
    1244:	0100                	addi	s0,sp,128
    1246:	06090203          	lb	tp,96(s2)
    124a:	0100                	addi	s0,sp,128
    124c:	06090103          	lb	sp,96(s2)
    1250:	0100                	addi	s0,sp,128
    1252:	06090103          	lb	sp,96(s2)
    1256:	0100                	addi	s0,sp,128
    1258:	06090103          	lb	sp,96(s2)
    125c:	0100                	addi	s0,sp,128
    125e:	3c05                	jal	c8e <ntru_encyrpt+0x92>
    1260:	04097503          	0x4097503
    1264:	0100                	addi	s0,sp,128
    1266:	0905                	addi	s2,s2,1
    1268:	06090403          	lb	s0,96(s2)
    126c:	0100                	addi	s0,sp,128
    126e:	0505                	addi	a0,a0,1
    1270:	0306                	slli	t1,t1,0x1
    1272:	0901                	addi	s2,s2,0
    1274:	0004                	0x4
    1276:	0301                	addi	t1,t1,0
    1278:	0901                	addi	s2,s2,0
    127a:	0000                	unimp
    127c:	0301                	addi	t1,t1,0
    127e:	0902                	c.slli64	s2
    1280:	0000                	unimp
    1282:	0301                	addi	t1,t1,0
    1284:	0901                	addi	s2,s2,0
    1286:	0000                	unimp
    1288:	0301                	addi	t1,t1,0
    128a:	0901                	addi	s2,s2,0
    128c:	0000                	unimp
    128e:	0301                	addi	t1,t1,0
    1290:	0901                	addi	s2,s2,0
    1292:	0000                	unimp
    1294:	0501                	addi	a0,a0,0
    1296:	0609                	addi	a2,a2,2
    1298:	00090003          	lb	zero,0(s2)
    129c:	0100                	addi	s0,sp,128
    129e:	0505                	addi	a0,a0,1
    12a0:	0306                	slli	t1,t1,0x1
    12a2:	0901                	addi	s2,s2,0
    12a4:	0002                	c.slli64	zero
    12a6:	0301                	addi	t1,t1,0
    12a8:	0901                	addi	s2,s2,0
    12aa:	0000                	unimp
    12ac:	0301                	addi	t1,t1,0
    12ae:	0901                	addi	s2,s2,0
    12b0:	0000                	unimp
    12b2:	0301                	addi	t1,t1,0
    12b4:	0901                	addi	s2,s2,0
    12b6:	0000                	unimp
    12b8:	0301                	addi	t1,t1,0
    12ba:	0902                	c.slli64	s2
    12bc:	0000                	unimp
    12be:	0301                	addi	t1,t1,0
    12c0:	0901                	addi	s2,s2,0
    12c2:	0000                	unimp
    12c4:	0501                	addi	a0,a0,0
    12c6:	060c                	addi	a1,sp,768
    12c8:	00090003          	lb	zero,0(s2)
    12cc:	0100                	addi	s0,sp,128
    12ce:	1105                	addi	sp,sp,-31
    12d0:	02090303          	lb	t1,32(s2)
    12d4:	0100                	addi	s0,sp,128
    12d6:	0200                	addi	s0,sp,256
    12d8:	0104                	addi	s1,sp,128
    12da:	0306                	slli	t1,t1,0x1
    12dc:	097d                	addi	s2,s2,31
    12de:	0008                	0x8
    12e0:	0501                	addi	a0,a0,0
    12e2:	0005                	c.nop	1
    12e4:	0402                	c.slli64	s0
    12e6:	0601                	addi	a2,a2,0
    12e8:	00090003          	lb	zero,0(s2)
    12ec:	0100                	addi	s0,sp,128
    12ee:	0306                	slli	t1,t1,0x1
    12f0:	0906                	slli	s2,s2,0x1
    12f2:	0004                	0x4
    12f4:	0301                	addi	t1,t1,0
    12f6:	0901                	addi	s2,s2,0
    12f8:	0008                	0x8
    12fa:	0301                	addi	t1,t1,0
    12fc:	0905                	addi	s2,s2,1
    12fe:	0008                	0x8
    1300:	0501                	addi	a0,a0,0
    1302:	060d                	addi	a2,a2,3
    1304:	00090003          	lb	zero,0(s2)
    1308:	0100                	addi	s0,sp,128
    130a:	0505                	addi	a0,a0,1
    130c:	0306                	slli	t1,t1,0x1
    130e:	00060903          	lb	s2,0(a2)
    1312:	0501                	addi	a0,a0,0
    1314:	0900030b          	0x900030b
    1318:	0000                	unimp
    131a:	0501                	addi	a0,a0,0
    131c:	0624                	addi	s1,sp,776
    131e:	00091603          	lh	a2,0(s2)
    1322:	0100                	addi	s0,sp,128
    1324:	1905                	addi	s2,s2,-31
    1326:	08093503          	0x8093503
    132a:	0100                	addi	s0,sp,128
    132c:	0905                	addi	s2,s2,1
    132e:	0306                	slli	t1,t1,0x1
    1330:	08097fb7          	lui	t6,0x8097
    1334:	0100                	addi	s0,sp,128
    1336:	0505                	addi	a0,a0,1
    1338:	00090803          	lb	a6,0(s2)
    133c:	0100                	addi	s0,sp,128
    133e:	08090903          	lb	s2,128(s2)
    1342:	0100                	addi	s0,sp,128
    1344:	0905                	addi	s2,s2,1
    1346:	08090203          	lb	tp,128(s2)
    134a:	0100                	addi	s0,sp,128
    134c:	0f05                	addi	t5,t5,1
    134e:	0306                	slli	t1,t1,0x1
    1350:	0900                	addi	s0,sp,144
    1352:	0000                	unimp
    1354:	0501                	addi	a0,a0,0
    1356:	0609                	addi	a2,a2,2
    1358:	0c090103          	lb	sp,192(s2)
    135c:	0100                	addi	s0,sp,128
    135e:	1905                	addi	s2,s2,-31
    1360:	0200                	addi	s0,sp,256
    1362:	0104                	addi	s1,sp,128
    1364:	04090003          	lb	zero,64(s2)
    1368:	0100                	addi	s0,sp,128
    136a:	0905                	addi	s2,s2,1
    136c:	0200                	addi	s0,sp,256
    136e:	0104                	addi	s1,sp,128
    1370:	0306                	slli	t1,t1,0x1
    1372:	0900                	addi	s0,sp,144
    1374:	0000                	unimp
    1376:	0501                	addi	a0,a0,0
    1378:	0310                	addi	a2,sp,384
    137a:	0906                	slli	s2,s2,0x1
    137c:	000a                	c.slli	zero,0x2
    137e:	0501                	addi	a0,a0,0
    1380:	0015                	c.nop	5
    1382:	0402                	c.slli64	s0
    1384:	0601                	addi	a2,a2,0
    1386:	02090003          	lb	zero,32(s2)
    138a:	0100                	addi	s0,sp,128
    138c:	0905                	addi	s2,s2,1
    138e:	0200                	addi	s0,sp,256
    1390:	0104                	addi	s1,sp,128
    1392:	0306                	slli	t1,t1,0x1
    1394:	0900                	addi	s0,sp,144
    1396:	0000                	unimp
    1398:	0501                	addi	a0,a0,0
    139a:	0605                	addi	a2,a2,1
    139c:	04090c03          	lb	s8,64(s2)
    13a0:	0100                	addi	s0,sp,128
    13a2:	0905                	addi	s2,s2,1
    13a4:	08090203          	lb	tp,128(s2)
    13a8:	0100                	addi	s0,sp,128
    13aa:	1005                	c.nop	-31
    13ac:	0306                	slli	t1,t1,0x1
    13ae:	0900                	addi	s0,sp,144
    13b0:	0000                	unimp
    13b2:	0501                	addi	a0,a0,0
    13b4:	0605                	addi	a2,a2,1
    13b6:	0e090403          	lb	s0,224(s2)
    13ba:	0100                	addi	s0,sp,128
    13bc:	06090903          	lb	s2,96(s2)
    13c0:	0100                	addi	s0,sp,128
    13c2:	0905                	addi	s2,s2,1
    13c4:	08090403          	lb	s0,128(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	1005                	c.nop	-31
    13cc:	0306                	slli	t1,t1,0x1
    13ce:	0900                	addi	s0,sp,144
    13d0:	0000                	unimp
    13d2:	0501                	addi	a0,a0,0
    13d4:	0605                	addi	a2,a2,1
    13d6:	10090403          	lb	s0,256(s2)
    13da:	0100                	addi	s0,sp,128
    13dc:	06090903          	lb	s2,96(s2)
    13e0:	0100                	addi	s0,sp,128
    13e2:	0905                	addi	s2,s2,1
    13e4:	08090203          	lb	tp,128(s2)
    13e8:	0100                	addi	s0,sp,128
    13ea:	1005                	c.nop	-31
    13ec:	0306                	slli	t1,t1,0x1
    13ee:	0900                	addi	s0,sp,144
    13f0:	0002                	c.slli64	zero
    13f2:	0501                	addi	a0,a0,0
    13f4:	0015                	c.nop	5
    13f6:	0402                	c.slli64	s0
    13f8:	0601                	addi	a2,a2,0
    13fa:	02090003          	lb	zero,32(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	0905                	addi	s2,s2,1
    1402:	0200                	addi	s0,sp,256
    1404:	0104                	addi	s1,sp,128
    1406:	0306                	slli	t1,t1,0x1
    1408:	0900                	addi	s0,sp,144
    140a:	0000                	unimp
    140c:	0501                	addi	a0,a0,0
    140e:	0605                	addi	a2,a2,1
    1410:	04090b03          	lb	s6,64(s2)
    1414:	0100                	addi	s0,sp,128
    1416:	0105                	addi	sp,sp,1
    1418:	08090403          	lb	s0,128(s2)
    141c:	0100                	addi	s0,sp,128
    141e:	08090103          	lb	sp,128(s2)
    1422:	0100                	addi	s0,sp,128
    1424:	08090103          	lb	sp,128(s2)
    1428:	0100                	addi	s0,sp,128
    142a:	08090103          	lb	sp,128(s2)
    142e:	0100                	addi	s0,sp,128
    1430:	0905                	addi	s2,s2,1
    1432:	08090203          	lb	tp,128(s2)
    1436:	0100                	addi	s0,sp,128
    1438:	1205                	addi	tp,tp,-31
    143a:	0306                	slli	t1,t1,0x1
    143c:	7fa4                	flw	fs1,120(a5)
    143e:	0009                	c.nop	2
    1440:	0100                	addi	s0,sp,128
    1442:	1005                	c.nop	-31
    1444:	0900dc03          	lhu	s8,144(ra)
    1448:	0002                	c.slli64	zero
    144a:	0501                	addi	a0,a0,0
    144c:	0015                	c.nop	5
    144e:	0402                	c.slli64	s0
    1450:	0601                	addi	a2,a2,0
    1452:	02090003          	lb	zero,32(s2)
    1456:	0100                	addi	s0,sp,128
    1458:	0905                	addi	s2,s2,1
    145a:	0200                	addi	s0,sp,256
    145c:	0104                	addi	s1,sp,128
    145e:	0306                	slli	t1,t1,0x1
    1460:	0900                	addi	s0,sp,144
    1462:	0000                	unimp
    1464:	0501                	addi	a0,a0,0
    1466:	a203060b          	0xa203060b
    146a:	097f                	0x97f
    146c:	0004                	0x4
    146e:	0501                	addi	a0,a0,0
    1470:	0610                	addi	a2,sp,768
    1472:	0900e903          	0x900e903
    1476:	0004                	0x4
    1478:	0301                	addi	t1,t1,0
    147a:	0901                	addi	s2,s2,0
    147c:	0002                	c.slli64	zero
    147e:	0501                	addi	a0,a0,0
    1480:	0015                	c.nop	5
    1482:	0402                	c.slli64	s0
    1484:	0601                	addi	a2,a2,0
    1486:	02097f03          	0x2097f03
    148a:	0100                	addi	s0,sp,128
    148c:	0905                	addi	s2,s2,1
    148e:	0200                	addi	s0,sp,256
    1490:	0104                	addi	s1,sp,128
    1492:	0306                	slli	t1,t1,0x1
    1494:	0900                	addi	s0,sp,144
    1496:	0000                	unimp
    1498:	0501                	addi	a0,a0,0
    149a:	0015                	c.nop	5
    149c:	0402                	c.slli64	s0
    149e:	0601                	addi	a2,a2,0
    14a0:	0c090c03          	lb	s8,192(s2)
    14a4:	0100                	addi	s0,sp,128
    14a6:	0905                	addi	s2,s2,1
    14a8:	0200                	addi	s0,sp,256
    14aa:	0104                	addi	s1,sp,128
    14ac:	0306                	slli	t1,t1,0x1
    14ae:	0900                	addi	s0,sp,144
    14b0:	0000                	unimp
    14b2:	0601                	addi	a2,a2,0
    14b4:	04090503          	lb	a0,64(s2)
    14b8:	0100                	addi	s0,sp,128
    14ba:	00090103          	lb	sp,0(s2)
    14be:	0100                	addi	s0,sp,128
    14c0:	0505                	addi	a0,a0,1
    14c2:	0306                	slli	t1,t1,0x1
    14c4:	0901                	addi	s2,s2,0
    14c6:	0000                	unimp
    14c8:	0501                	addi	a0,a0,0
    14ca:	0009                	c.nop	2
    14cc:	0402                	c.slli64	s0
    14ce:	f8030603          	lb	a2,-128(t1)
    14d2:	097e                	slli	s2,s2,0x1f
    14d4:	002a                	c.slli	zero,0xa
    14d6:	0501                	addi	a0,a0,0
    14d8:	0011                	c.nop	4
    14da:	0402                	c.slli64	s0
    14dc:	00030603          	lb	a2,0(t1)
    14e0:	0409                	addi	s0,s0,2
    14e2:	0100                	addi	s0,sp,128
    14e4:	0200                	addi	s0,sp,256
    14e6:	0304                	addi	s1,sp,384
    14e8:	04090103          	lb	sp,64(s2)
    14ec:	0100                	addi	s0,sp,128
    14ee:	0200                	addi	s0,sp,256
    14f0:	0304                	addi	s1,sp,384
    14f2:	02097f03          	0x2097f03
    14f6:	0100                	addi	s0,sp,128
    14f8:	0905                	addi	s2,s2,1
    14fa:	0200                	addi	s0,sp,256
    14fc:	0304                	addi	s1,sp,384
    14fe:	0306                	slli	t1,t1,0x1
    1500:	0901                	addi	s2,s2,0
    1502:	0004                	0x4
    1504:	0501                	addi	a0,a0,0
    1506:	0011                	c.nop	4
    1508:	0402                	c.slli64	s0
    150a:	00030603          	lb	a2,0(t1)
    150e:	0009                	c.nop	2
    1510:	0100                	addi	s0,sp,128
    1512:	1b05                	addi	s6,s6,-31
    1514:	0200                	addi	s0,sp,256
    1516:	0304                	addi	s1,sp,384
    1518:	0306                	slli	t1,t1,0x1
    151a:	097c                	addi	a5,sp,156
    151c:	0004                	0x4
    151e:	0501                	addi	a0,a0,0
    1520:	000d                	c.nop	3
    1522:	0402                	c.slli64	s0
    1524:	09260303          	lb	t1,146(a2)
    1528:	0004                	0x4
    152a:	0501                	addi	a0,a0,0
    152c:	0022                	c.slli	zero,0x8
    152e:	0402                	c.slli64	s0
    1530:	00030603          	lb	a2,0(t1)
    1534:	0009                	c.nop	2
    1536:	0100                	addi	s0,sp,128
    1538:	2a05                	jal	1668 <product2+0x1e8>
    153a:	0200                	addi	s0,sp,256
    153c:	0304                	addi	s1,sp,384
    153e:	08097f03          	0x8097f03
    1542:	0100                	addi	s0,sp,128
    1544:	1d05                	addi	s10,s10,-31
    1546:	0200                	addi	s0,sp,256
    1548:	0304                	addi	s1,sp,384
    154a:	04090103          	lb	sp,64(s2)
    154e:	0100                	addi	s0,sp,128
    1550:	2a05                	jal	1680 <product2+0x200>
    1552:	0200                	addi	s0,sp,256
    1554:	0304                	addi	s1,sp,384
    1556:	0306                	slli	t1,t1,0x1
    1558:	097f                	0x97f
    155a:	0004                	0x4
    155c:	0501                	addi	a0,a0,0
    155e:	000d                	c.nop	3
    1560:	0402                	c.slli64	s0
    1562:	09070303          	lb	t1,144(a4)
    1566:	0002                	c.slli64	zero
    1568:	0501                	addi	a0,a0,0
    156a:	0402001b          	0x402001b
    156e:	00030603          	lb	a2,0(t1)
    1572:	0009                	c.nop	2
    1574:	0100                	addi	s0,sp,128
    1576:	2305                	jal	1a96 <ti_2+0x166>
    1578:	0200                	addi	s0,sp,256
    157a:	0304                	addi	s1,sp,384
    157c:	04090003          	lb	zero,64(s2)
    1580:	0100                	addi	s0,sp,128
    1582:	1f05                	addi	t5,t5,-31
    1584:	0200                	addi	s0,sp,256
    1586:	0304                	addi	s1,sp,384
    1588:	04090003          	lb	zero,64(s2)
    158c:	0100                	addi	s0,sp,128
    158e:	1505                	addi	a0,a0,-31
    1590:	0200                	addi	s0,sp,256
    1592:	0304                	addi	s1,sp,384
    1594:	04090003          	lb	zero,64(s2)
    1598:	0100                	addi	s0,sp,128
    159a:	2005                	jal	15ba <product2+0x13a>
    159c:	0200                	addi	s0,sp,256
    159e:	0304                	addi	s1,sp,384
    15a0:	04097f03          	0x4097f03
    15a4:	0100                	addi	s0,sp,128
    15a6:	1f05                	addi	t5,t5,-31
    15a8:	0200                	addi	s0,sp,256
    15aa:	0304                	addi	s1,sp,384
    15ac:	02090103          	lb	sp,32(s2)
    15b0:	0100                	addi	s0,sp,128
    15b2:	1505                	addi	a0,a0,-31
    15b4:	0200                	addi	s0,sp,256
    15b6:	0304                	addi	s1,sp,384
    15b8:	02090003          	lb	zero,32(s2)
    15bc:	0100                	addi	s0,sp,128
    15be:	2005                	jal	15de <product2+0x15e>
    15c0:	0200                	addi	s0,sp,256
    15c2:	0304                	addi	s1,sp,384
    15c4:	0306                	slli	t1,t1,0x1
    15c6:	097f                	0x97f
    15c8:	0002                	c.slli64	zero
    15ca:	0501                	addi	a0,a0,0
    15cc:	000d                	c.nop	3
    15ce:	0402                	c.slli64	s0
    15d0:	092f0303          	lb	t1,146(t5)
    15d4:	0004                	0x4
    15d6:	0501                	addi	a0,a0,0
    15d8:	0019                	c.nop	6
    15da:	0402                	c.slli64	s0
    15dc:	00030603          	lb	a2,0(t1)
    15e0:	0009                	c.nop	2
    15e2:	0100                	addi	s0,sp,128
    15e4:	2305                	jal	1b04 <random_keys+0x44>
    15e6:	0200                	addi	s0,sp,256
    15e8:	0304                	addi	s1,sp,384
    15ea:	04090003          	lb	zero,64(s2)
    15ee:	0100                	addi	s0,sp,128
    15f0:	1d05                	addi	s10,s10,-31
    15f2:	0200                	addi	s0,sp,256
    15f4:	0304                	addi	s1,sp,384
    15f6:	04090003          	lb	zero,64(s2)
    15fa:	0100                	addi	s0,sp,128
    15fc:	1305                	addi	t1,t1,-31
    15fe:	0200                	addi	s0,sp,256
    1600:	0304                	addi	s1,sp,384
    1602:	04090003          	lb	zero,64(s2)
    1606:	0100                	addi	s0,sp,128
    1608:	2005                	jal	1628 <product2+0x1a8>
    160a:	0200                	addi	s0,sp,256
    160c:	0304                	addi	s1,sp,384
    160e:	04097f03          	0x4097f03
    1612:	0100                	addi	s0,sp,128
    1614:	1d05                	addi	s10,s10,-31
    1616:	0200                	addi	s0,sp,256
    1618:	0304                	addi	s1,sp,384
    161a:	02090103          	lb	sp,32(s2)
    161e:	0100                	addi	s0,sp,128
    1620:	1305                	addi	t1,t1,-31
    1622:	0200                	addi	s0,sp,256
    1624:	0304                	addi	s1,sp,384
    1626:	02090003          	lb	zero,32(s2)
    162a:	0100                	addi	s0,sp,128
    162c:	2005                	jal	164c <product2+0x1cc>
    162e:	0200                	addi	s0,sp,256
    1630:	0304                	addi	s1,sp,384
    1632:	0306                	slli	t1,t1,0x1
    1634:	097f                	0x97f
    1636:	0002                	c.slli64	zero
    1638:	0501                	addi	a0,a0,0
    163a:	0402000f          	0x402000f
    163e:	09190303          	lb	t1,145(s2)
    1642:	0004                	0x4
    1644:	0501                	addi	a0,a0,0
    1646:	04020017          	auipc	zero,0x4020
    164a:	00030603          	lb	a2,0(t1)
    164e:	0409                	addi	s0,s0,2
    1650:	0100                	addi	s0,sp,128
    1652:	1b05                	addi	s6,s6,-31
    1654:	0200                	addi	s0,sp,256
    1656:	0304                	addi	s1,sp,384
    1658:	04090103          	lb	sp,64(s2)
    165c:	0100                	addi	s0,sp,128
    165e:	1605                	addi	a2,a2,-31
    1660:	0200                	addi	s0,sp,256
    1662:	0304                	addi	s1,sp,384
    1664:	02090003          	lb	zero,32(s2)
    1668:	0100                	addi	s0,sp,128
    166a:	1705                	addi	a4,a4,-31
    166c:	0200                	addi	s0,sp,256
    166e:	0304                	addi	s1,sp,384
    1670:	02097f03          	0x2097f03
    1674:	0100                	addi	s0,sp,128
    1676:	0d05                	addi	s10,s10,1
    1678:	0200                	addi	s0,sp,256
    167a:	0304                	addi	s1,sp,384
    167c:	0306                	slli	t1,t1,0x1
    167e:	0901                	addi	s2,s2,0
    1680:	0004                	0x4
    1682:	0501                	addi	a0,a0,0
    1684:	0020                	addi	s0,sp,8
    1686:	0402                	c.slli64	s0
    1688:	7a030603          	lb	a2,1952(t1)
    168c:	0009                	c.nop	2
    168e:	0100                	addi	s0,sp,128
    1690:	1605                	addi	a2,a2,-31
    1692:	0200                	addi	s0,sp,256
    1694:	0304                	addi	s1,sp,384
    1696:	02090603          	lb	a2,32(s2)
    169a:	0100                	addi	s0,sp,128
    169c:	2005                	jal	16bc <product2+0x23c>
    169e:	0200                	addi	s0,sp,256
    16a0:	0304                	addi	s1,sp,384
    16a2:	0306                	slli	t1,t1,0x1
    16a4:	097a                	slli	s2,s2,0x1e
    16a6:	0002                	c.slli64	zero
    16a8:	0501                	addi	a0,a0,0
    16aa:	030d                	addi	t1,t1,3
    16ac:	090c                	addi	a1,sp,144
    16ae:	0002                	c.slli64	zero
    16b0:	0501                	addi	a0,a0,0
    16b2:	0003061b          	0x3061b
    16b6:	0009                	c.nop	2
    16b8:	0100                	addi	s0,sp,128
    16ba:	2005                	jal	16da <result+0x2>
    16bc:	08090003          	lb	zero,128(s2)
    16c0:	0100                	addi	s0,sp,128
    16c2:	1005                	c.nop	-31
    16c4:	04090003          	lb	zero,64(s2)
    16c8:	0100                	addi	s0,sp,128
    16ca:	1e05                	addi	t3,t3,-31
    16cc:	0200                	addi	s0,sp,256
    16ce:	0204                	addi	s1,sp,256
    16d0:	0306                	slli	t1,t1,0x1
    16d2:	097f                	0x97f
    16d4:	0004                	0x4
    16d6:	0501                	addi	a0,a0,0
    16d8:	000d                	c.nop	3
    16da:	0402                	c.slli64	s0
    16dc:	090d0303          	lb	t1,144(s10)
    16e0:	0004                	0x4
    16e2:	0501                	addi	a0,a0,0
    16e4:	0020                	addi	s0,sp,8
    16e6:	0402                	c.slli64	s0
    16e8:	00030603          	lb	a2,0(t1)
    16ec:	0009                	c.nop	2
    16ee:	0100                	addi	s0,sp,128
    16f0:	0200                	addi	s0,sp,256
    16f2:	0304                	addi	s1,sp,384
    16f4:	02097f03          	0x2097f03
    16f8:	0100                	addi	s0,sp,128
    16fa:	0200                	addi	s0,sp,256
    16fc:	0304                	addi	s1,sp,384
    16fe:	04090103          	lb	sp,64(s2)
    1702:	0100                	addi	s0,sp,128
    1704:	2505                	jal	1d24 <random_keys+0x264>
    1706:	0200                	addi	s0,sp,256
    1708:	0304                	addi	s1,sp,384
    170a:	04090003          	lb	zero,64(s2)
    170e:	0100                	addi	s0,sp,128
    1710:	1505                	addi	a0,a0,-31
    1712:	0200                	addi	s0,sp,256
    1714:	0304                	addi	s1,sp,384
    1716:	04090003          	lb	zero,64(s2)
    171a:	0100                	addi	s0,sp,128
    171c:	2005                	jal	173c <result+0x64>
    171e:	0200                	addi	s0,sp,256
    1720:	0304                	addi	s1,sp,384
    1722:	0306                	slli	t1,t1,0x1
    1724:	097f                	0x97f
    1726:	0004                	0x4
    1728:	0501                	addi	a0,a0,0
    172a:	0328                	addi	a0,sp,392
    172c:	090c                	addi	a1,sp,144
    172e:	0002                	c.slli64	zero
    1730:	0501                	addi	a0,a0,0
    1732:	0302                	c.slli64	t1
    1734:	0901                	addi	s2,s2,0
    1736:	0000                	unimp
    1738:	0501                	addi	a0,a0,0
    173a:	0628                	addi	a0,sp,776
    173c:	00097f03          	0x97f03
    1740:	0100                	addi	s0,sp,128
    1742:	0f05                	addi	t5,t5,1
    1744:	38090103          	lb	sp,896(s2)
    1748:	0100                	addi	s0,sp,128
    174a:	2805                	jal	177a <result+0xa2>
    174c:	08097f03          	0x8097f03
    1750:	0100                	addi	s0,sp,128
    1752:	00090003          	lb	zero,0(s2)
    1756:	0100                	addi	s0,sp,128
    1758:	0905                	addi	s2,s2,1
    175a:	06090203          	lb	tp,96(s2)
    175e:	0100                	addi	s0,sp,128
    1760:	0f05                	addi	t5,t5,1
    1762:	06097f03          	0x6097f03
    1766:	0100                	addi	s0,sp,128
    1768:	0905                	addi	s2,s2,1
    176a:	08090103          	lb	sp,128(s2)
    176e:	0100                	addi	s0,sp,128
    1770:	0f05                	addi	t5,t5,1
    1772:	04097f03          	0x4097f03
    1776:	0100                	addi	s0,sp,128
    1778:	0505                	addi	a0,a0,1
    177a:	0306                	slli	t1,t1,0x1
    177c:	0901                	addi	s2,s2,0
    177e:	0004                	0x4
    1780:	0501                	addi	a0,a0,0
    1782:	0609                	addi	a2,a2,2
    1784:	00090003          	lb	zero,0(s2)
    1788:	0100                	addi	s0,sp,128
    178a:	06090103          	lb	sp,96(s2)
    178e:	0100                	addi	s0,sp,128
    1790:	0a097f03          	0xa097f03
    1794:	0100                	addi	s0,sp,128
    1796:	0505                	addi	a0,a0,1
    1798:	0306                	slli	t1,t1,0x1
    179a:	0901                	addi	s2,s2,0
    179c:	006c                	addi	a1,sp,12
    179e:	0501                	addi	a0,a0,0
    17a0:	0610                	addi	a2,sp,768
    17a2:	00090603          	lb	a2,0(s2)
    17a6:	0100                	addi	s0,sp,128
    17a8:	0905                	addi	s2,s2,1
    17aa:	04097a03          	0x4097a03
    17ae:	0100                	addi	s0,sp,128
    17b0:	02090603          	lb	a2,32(s2)
    17b4:	0100                	addi	s0,sp,128
    17b6:	0e05                	addi	t3,t3,1
    17b8:	0e090503          	lb	a0,224(s2)
    17bc:	0100                	addi	s0,sp,128
    17be:	0905                	addi	s2,s2,1
    17c0:	0a097503          	0xa097503
    17c4:	0100                	addi	s0,sp,128
    17c6:	0505                	addi	a0,a0,1
    17c8:	0306                	slli	t1,t1,0x1
    17ca:	0902                	c.slli64	s2
    17cc:	0064                	addi	s1,sp,12
    17ce:	0301                	addi	t1,t1,0
    17d0:	0901                	addi	s2,s2,0
    17d2:	0000                	unimp
    17d4:	0301                	addi	t1,t1,0
    17d6:	0901                	addi	s2,s2,0
    17d8:	0000                	unimp
    17da:	0301                	addi	t1,t1,0
    17dc:	0901                	addi	s2,s2,0
    17de:	0000                	unimp
    17e0:	0301                	addi	t1,t1,0
    17e2:	0901                	addi	s2,s2,0
    17e4:	0000                	unimp
    17e6:	0301                	addi	t1,t1,0
    17e8:	0901                	addi	s2,s2,0
    17ea:	0000                	unimp
    17ec:	0301                	addi	t1,t1,0
    17ee:	0901                	addi	s2,s2,0
    17f0:	0000                	unimp
    17f2:	0301                	addi	t1,t1,0
    17f4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    17f8:	0301                	addi	t1,t1,0
    17fa:	0901                	addi	s2,s2,0
    17fc:	0000                	unimp
    17fe:	0501                	addi	a0,a0,0
    1800:	060e                	slli	a2,a2,0x3
    1802:	00090003          	lb	zero,0(s2)
    1806:	0100                	addi	s0,sp,128
    1808:	0505                	addi	a0,a0,1
    180a:	0306                	slli	t1,t1,0x1
    180c:	0902                	c.slli64	s2
    180e:	0004                	0x4
    1810:	0501                	addi	a0,a0,0
    1812:	0003060b          	0x3060b
    1816:	0009                	c.nop	2
    1818:	0100                	addi	s0,sp,128
    181a:	1005                	c.nop	-31
    181c:	0200                	addi	s0,sp,256
    181e:	0104                	addi	s1,sp,128
    1820:	0306                	slli	t1,t1,0x1
    1822:	0900                	addi	s0,sp,144
    1824:	0002                	c.slli64	zero
    1826:	0501                	addi	a0,a0,0
    1828:	0005                	c.nop	1
    182a:	0402                	c.slli64	s0
    182c:	0601                	addi	a2,a2,0
    182e:	00090003          	lb	zero,0(s2)
    1832:	0100                	addi	s0,sp,128
    1834:	06090603          	lb	a2,96(s2)
    1838:	0100                	addi	s0,sp,128
    183a:	1105                	addi	sp,sp,-31
    183c:	0200                	addi	s0,sp,256
    183e:	0104                	addi	s1,sp,128
    1840:	0306                	slli	t1,t1,0x1
    1842:	0900                	addi	s0,sp,144
    1844:	0004                	0x4
    1846:	0501                	addi	a0,a0,0
    1848:	0005                	c.nop	1
    184a:	0402                	c.slli64	s0
    184c:	0601                	addi	a2,a2,0
    184e:	00090003          	lb	zero,0(s2)
    1852:	0100                	addi	s0,sp,128
    1854:	0b05                	addi	s6,s6,1
    1856:	04090703          	lb	a4,64(s2)
    185a:	0100                	addi	s0,sp,128
    185c:	1805                	addi	a6,a6,-31
    185e:	02090103          	lb	sp,32(s2)
    1862:	0100                	addi	s0,sp,128
    1864:	1005                	c.nop	-31
    1866:	0200                	addi	s0,sp,256
    1868:	0104                	addi	s1,sp,128
    186a:	0306                	slli	t1,t1,0x1
    186c:	097f                	0x97f
    186e:	0008                	0x8
    1870:	0501                	addi	a0,a0,0
    1872:	0005                	c.nop	1
    1874:	0402                	c.slli64	s0
    1876:	0601                	addi	a2,a2,0
    1878:	00090003          	lb	zero,0(s2)
    187c:	0100                	addi	s0,sp,128
    187e:	1605                	addi	a2,a2,-31
    1880:	08090503          	lb	a0,128(s2)
    1884:	0100                	addi	s0,sp,128
    1886:	1805                	addi	a6,a6,-31
    1888:	08090103          	lb	sp,128(s2)
    188c:	0100                	addi	s0,sp,128
    188e:	1005                	c.nop	-31
    1890:	0200                	addi	s0,sp,256
    1892:	0104                	addi	s1,sp,128
    1894:	0306                	slli	t1,t1,0x1
    1896:	097f                	0x97f
    1898:	0008                	0x8
    189a:	0501                	addi	a0,a0,0
    189c:	0005                	c.nop	1
    189e:	0402                	c.slli64	s0
    18a0:	0601                	addi	a2,a2,0
    18a2:	00090003          	lb	zero,0(s2)
    18a6:	0100                	addi	s0,sp,128
    18a8:	0306                	slli	t1,t1,0x1
    18aa:	0905                	addi	s2,s2,1
    18ac:	0004                	0x4
    18ae:	0501                	addi	a0,a0,0
    18b0:	061a                	slli	a2,a2,0x6
    18b2:	00090303          	lb	t1,0(s2)
    18b6:	0100                	addi	s0,sp,128
    18b8:	0a05                	addi	s4,s4,1
    18ba:	06097d03          	0x6097d03
    18be:	0100                	addi	s0,sp,128
    18c0:	0505                	addi	a0,a0,1
    18c2:	0306                	slli	t1,t1,0x1
    18c4:	000c0903          	lb	s2,0(s8)
    18c8:	0501                	addi	a0,a0,0
    18ca:	0618                	addi	a4,sp,768
    18cc:	02090103          	lb	sp,32(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	1405                	addi	s0,s0,-31
    18d4:	0200                	addi	s0,sp,256
    18d6:	0104                	addi	s1,sp,128
    18d8:	0306                	slli	t1,t1,0x1
    18da:	097f                	0x97f
    18dc:	0008                	0x8
    18de:	0501                	addi	a0,a0,0
    18e0:	0005                	c.nop	1
    18e2:	0402                	c.slli64	s0
    18e4:	0601                	addi	a2,a2,0
    18e6:	00090003          	lb	zero,0(s2)
    18ea:	0100                	addi	s0,sp,128
    18ec:	0306                	slli	t1,t1,0x1
    18ee:	0906                	slli	s2,s2,0x1
    18f0:	0004                	0x4
    18f2:	0501                	addi	a0,a0,0
    18f4:	060a                	slli	a2,a2,0x2
    18f6:	00090003          	lb	zero,0(s2)
    18fa:	0100                	addi	s0,sp,128
    18fc:	0505                	addi	a0,a0,1
    18fe:	0306                	slli	t1,t1,0x1
    1900:	0904                	addi	s1,sp,144
    1902:	000c                	0xc
    1904:	0501                	addi	a0,a0,0
    1906:	061a                	slli	a2,a2,0x6
    1908:	06090003          	lb	zero,96(s2)
    190c:	0100                	addi	s0,sp,128
    190e:	1805                	addi	a6,a6,-31
    1910:	02090103          	lb	sp,32(s2)
    1914:	0100                	addi	s0,sp,128
    1916:	1405                	addi	s0,s0,-31
    1918:	0200                	addi	s0,sp,256
    191a:	0104                	addi	s1,sp,128
    191c:	0306                	slli	t1,t1,0x1
    191e:	097f                	0x97f
    1920:	0008                	0x8
    1922:	0501                	addi	a0,a0,0
    1924:	0005                	c.nop	1
    1926:	0402                	c.slli64	s0
    1928:	0601                	addi	a2,a2,0
    192a:	00090003          	lb	zero,0(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	0306                	slli	t1,t1,0x1
    1932:	0905                	addi	s2,s2,1
    1934:	0004                	0x4
    1936:	0501                	addi	a0,a0,0
    1938:	060a                	slli	a2,a2,0x2
    193a:	00090003          	lb	zero,0(s2)
    193e:	0100                	addi	s0,sp,128
    1940:	0505                	addi	a0,a0,1
    1942:	0306                	slli	t1,t1,0x1
    1944:	000a0903          	lb	s2,0(s4)
    1948:	0501                	addi	a0,a0,0
    194a:	0003060b          	0x3060b
    194e:	0209                	addi	tp,tp,2
    1950:	0100                	addi	s0,sp,128
    1952:	1805                	addi	a6,a6,-31
    1954:	02090003          	lb	zero,32(s2)
    1958:	0100                	addi	s0,sp,128
    195a:	1005                	c.nop	-31
    195c:	0200                	addi	s0,sp,256
    195e:	0104                	addi	s1,sp,128
    1960:	0306                	slli	t1,t1,0x1
    1962:	0900                	addi	s0,sp,144
    1964:	0004                	0x4
    1966:	0501                	addi	a0,a0,0
    1968:	0005                	c.nop	1
    196a:	0402                	c.slli64	s0
    196c:	0601                	addi	a2,a2,0
    196e:	00090003          	lb	zero,0(s2)
    1972:	0100                	addi	s0,sp,128
    1974:	0306                	slli	t1,t1,0x1
    1976:	0906                	slli	s2,s2,0x1
    1978:	0004                	0x4
    197a:	0501                	addi	a0,a0,0
    197c:	060a                	slli	a2,a2,0x2
    197e:	00090003          	lb	zero,0(s2)
    1982:	0100                	addi	s0,sp,128
    1984:	0505                	addi	a0,a0,1
    1986:	0306                	slli	t1,t1,0x1
    1988:	0904                	addi	s1,sp,144
    198a:	0008                	0x8
    198c:	0501                	addi	a0,a0,0
    198e:	061a                	slli	a2,a2,0x6
    1990:	00090003          	lb	zero,0(s2)
    1994:	0100                	addi	s0,sp,128
    1996:	1805                	addi	a6,a6,-31
    1998:	0a090103          	lb	sp,160(s2)
    199c:	0100                	addi	s0,sp,128
    199e:	1405                	addi	s0,s0,-31
    19a0:	0200                	addi	s0,sp,256
    19a2:	0104                	addi	s1,sp,128
    19a4:	0306                	slli	t1,t1,0x1
    19a6:	097f                	0x97f
    19a8:	0008                	0x8
    19aa:	0501                	addi	a0,a0,0
    19ac:	0005                	c.nop	1
    19ae:	0402                	c.slli64	s0
    19b0:	0601                	addi	a2,a2,0
    19b2:	02090003          	lb	zero,32(s2)
    19b6:	0100                	addi	s0,sp,128
    19b8:	1a05                	addi	s4,s4,-31
    19ba:	04090503          	lb	a0,64(s2)
    19be:	0100                	addi	s0,sp,128
    19c0:	1805                	addi	a6,a6,-31
    19c2:	04090103          	lb	sp,64(s2)
    19c6:	0100                	addi	s0,sp,128
    19c8:	1a05                	addi	s4,s4,-31
    19ca:	08097f03          	0x8097f03
    19ce:	0100                	addi	s0,sp,128
    19d0:	1405                	addi	s0,s0,-31
    19d2:	0200                	addi	s0,sp,256
    19d4:	0104                	addi	s1,sp,128
    19d6:	0306                	slli	t1,t1,0x1
    19d8:	0900                	addi	s0,sp,144
    19da:	0008                	0x8
    19dc:	0501                	addi	a0,a0,0
    19de:	0005                	c.nop	1
    19e0:	0402                	c.slli64	s0
    19e2:	0601                	addi	a2,a2,0
    19e4:	00090003          	lb	zero,0(s2)
    19e8:	0100                	addi	s0,sp,128
    19ea:	0306                	slli	t1,t1,0x1
    19ec:	0906                	slli	s2,s2,0x1
    19ee:	0004                	0x4
    19f0:	0501                	addi	a0,a0,0
    19f2:	0302                	c.slli64	t1
    19f4:	0901                	addi	s2,s2,0
    19f6:	0000                	unimp
    19f8:	0501                	addi	a0,a0,0
    19fa:	0003060f          	0x3060f
    19fe:	0009                	c.nop	2
    1a00:	0100                	addi	s0,sp,128
    1a02:	0505                	addi	a0,a0,1
    1a04:	0306                	slli	t1,t1,0x1
    1a06:	0901                	addi	s2,s2,0
    1a08:	000c                	0xc
    1a0a:	0501                	addi	a0,a0,0
    1a0c:	0601                	addi	a2,a2,0
    1a0e:	00090103          	lb	sp,0(s2)
    1a12:	0100                	addi	s0,sp,128
    1a14:	0905                	addi	s2,s2,1
    1a16:	0200                	addi	s0,sp,256
    1a18:	0304                	addi	s1,sp,384
    1a1a:	0306                	slli	t1,t1,0x1
    1a1c:	7fbd                	lui	t6,0xfffef
    1a1e:	4609                	li	a2,2
    1a20:	0100                	addi	s0,sp,128
    1a22:	1205                	addi	tp,tp,-31
    1a24:	0200                	addi	s0,sp,256
    1a26:	0304                	addi	s1,sp,384
    1a28:	0306                	slli	t1,t1,0x1
    1a2a:	0900                	addi	s0,sp,144
    1a2c:	0000                	unimp
    1a2e:	0501                	addi	a0,a0,0
    1a30:	04020017          	auipc	zero,0x4020
    1a34:	7f030603          	lb	a2,2032(t1)
    1a38:	0a09                	addi	s4,s4,2
    1a3a:	0100                	addi	s0,sp,128
    1a3c:	0905                	addi	s2,s2,1
    1a3e:	0200                	addi	s0,sp,256
    1a40:	0304                	addi	s1,sp,384
    1a42:	04090703          	lb	a4,64(s2)
    1a46:	0100                	addi	s0,sp,128
    1a48:	0e05                	addi	t3,t3,1
    1a4a:	0200                	addi	s0,sp,256
    1a4c:	0304                	addi	s1,sp,384
    1a4e:	0306                	slli	t1,t1,0x1
    1a50:	0900                	addi	s0,sp,144
    1a52:	0004                	0x4
    1a54:	0501                	addi	a0,a0,0
    1a56:	0009                	c.nop	2
    1a58:	0402                	c.slli64	s0
    1a5a:	01030603          	lb	a2,16(t1)
    1a5e:	0a09                	addi	s4,s4,2
    1a60:	0100                	addi	s0,sp,128
    1a62:	0e05                	addi	t3,t3,1
    1a64:	0200                	addi	s0,sp,256
    1a66:	0304                	addi	s1,sp,384
    1a68:	0306                	slli	t1,t1,0x1
    1a6a:	0900                	addi	s0,sp,144
    1a6c:	0000                	unimp
    1a6e:	0501                	addi	a0,a0,0
    1a70:	0019                	c.nop	6
    1a72:	0402                	c.slli64	s0
    1a74:	7e030603          	lb	a2,2016(t1)
    1a78:	0a09                	addi	s4,s4,2
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	0905                	addi	s2,s2,1
    1a7e:	0200                	addi	s0,sp,256
    1a80:	0304                	addi	s1,sp,384
    1a82:	04090803          	lb	a6,64(s2)
    1a86:	0100                	addi	s0,sp,128
    1a88:	1b05                	addi	s6,s6,-31
    1a8a:	0200                	addi	s0,sp,256
    1a8c:	0304                	addi	s1,sp,384
    1a8e:	0306                	slli	t1,t1,0x1
    1a90:	0900                	addi	s0,sp,144
    1a92:	0004                	0x4
    1a94:	0501                	addi	a0,a0,0
    1a96:	0018                	0x18
    1a98:	0402                	c.slli64	s0
    1a9a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1a9e:	0004                	0x4
    1aa0:	0501                	addi	a0,a0,0
    1aa2:	0402001b          	0x402001b
    1aa6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1aaa:	0004                	0x4
    1aac:	0501                	addi	a0,a0,0
    1aae:	0018                	0x18
    1ab0:	0402                	c.slli64	s0
    1ab2:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1ab6:	0002                	c.slli64	zero
    1ab8:	0501                	addi	a0,a0,0
    1aba:	04020017          	auipc	zero,0x4020
    1abe:	097f0303          	lb	t1,151(t5)
    1ac2:	0002                	c.slli64	zero
    1ac4:	0501                	addi	a0,a0,0
    1ac6:	0018                	0x18
    1ac8:	0402                	c.slli64	s0
    1aca:	09010303          	lb	t1,144(sp)
    1ace:	0002                	c.slli64	zero
    1ad0:	0501                	addi	a0,a0,0
    1ad2:	04020017          	auipc	zero,0x4020
    1ad6:	7f030603          	lb	a2,2032(t1)
    1ada:	0209                	addi	tp,tp,2
    1adc:	0100                	addi	s0,sp,128
    1ade:	0905                	addi	s2,s2,1
    1ae0:	0200                	addi	s0,sp,256
    1ae2:	0304                	addi	s1,sp,384
    1ae4:	02090603          	lb	a2,32(s2)
    1ae8:	0100                	addi	s0,sp,128
    1aea:	1805                	addi	a6,a6,-31
    1aec:	0200                	addi	s0,sp,256
    1aee:	0304                	addi	s1,sp,384
    1af0:	0306                	slli	t1,t1,0x1
    1af2:	0900                	addi	s0,sp,144
    1af4:	0000                	unimp
    1af6:	0501                	addi	a0,a0,0
    1af8:	0402001b          	0x402001b
    1afc:	7f030603          	lb	a2,2032(t1)
    1b00:	0a09                	addi	s4,s4,2
    1b02:	0100                	addi	s0,sp,128
    1b04:	0905                	addi	s2,s2,1
    1b06:	0200                	addi	s0,sp,256
    1b08:	0304                	addi	s1,sp,384
    1b0a:	06090903          	lb	s2,96(s2)
    1b0e:	0100                	addi	s0,sp,128
    1b10:	1c05                	addi	s8,s8,-31
    1b12:	0200                	addi	s0,sp,256
    1b14:	0304                	addi	s1,sp,384
    1b16:	0306                	slli	t1,t1,0x1
    1b18:	0900                	addi	s0,sp,144
    1b1a:	0000                	unimp
    1b1c:	0501                	addi	a0,a0,0
    1b1e:	0018                	0x18
    1b20:	0402                	c.slli64	s0
    1b22:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b26:	0002                	c.slli64	zero
    1b28:	0501                	addi	a0,a0,0
    1b2a:	001f 0402 0603      	0x6030402001f
    1b30:	08097f03          	0x8097f03
    1b34:	0100                	addi	s0,sp,128
    1b36:	0905                	addi	s2,s2,1
    1b38:	0200                	addi	s0,sp,256
    1b3a:	0304                	addi	s1,sp,384
    1b3c:	06090b03          	lb	s6,96(s2)
    1b40:	0100                	addi	s0,sp,128
    1b42:	1c05                	addi	s8,s8,-31
    1b44:	0200                	addi	s0,sp,256
    1b46:	0304                	addi	s1,sp,384
    1b48:	0306                	slli	t1,t1,0x1
    1b4a:	0900                	addi	s0,sp,144
    1b4c:	0004                	0x4
    1b4e:	0501                	addi	a0,a0,0
    1b50:	0018                	0x18
    1b52:	0402                	c.slli64	s0
    1b54:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b58:	0008                	0x8
    1b5a:	0501                	addi	a0,a0,0
    1b5c:	001f 0402 0303      	0x3030402001f
    1b62:	097f                	0x97f
    1b64:	0002                	c.slli64	zero
    1b66:	0501                	addi	a0,a0,0
    1b68:	0018                	0x18
    1b6a:	0402                	c.slli64	s0
    1b6c:	09010303          	lb	t1,144(sp)
    1b70:	0002                	c.slli64	zero
    1b72:	0501                	addi	a0,a0,0
    1b74:	001f 0402 0603      	0x6030402001f
    1b7a:	02097f03          	0x2097f03
    1b7e:	0100                	addi	s0,sp,128
    1b80:	0905                	addi	s2,s2,1
    1b82:	0200                	addi	s0,sp,256
    1b84:	0304                	addi	s1,sp,384
    1b86:	02090903          	lb	s2,32(s2)
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	1605                	addi	a2,a2,-31
    1b8e:	0200                	addi	s0,sp,256
    1b90:	0304                	addi	s1,sp,384
    1b92:	0306                	slli	t1,t1,0x1
    1b94:	0900                	addi	s0,sp,144
    1b96:	0000                	unimp
    1b98:	0501                	addi	a0,a0,0
    1b9a:	001d                	c.nop	7
    1b9c:	0402                	c.slli64	s0
    1b9e:	097f0303          	lb	t1,151(t5)
    1ba2:	0002                	c.slli64	zero
    1ba4:	0501                	addi	a0,a0,0
    1ba6:	0016                	c.slli	zero,0x5
    1ba8:	0402                	c.slli64	s0
    1baa:	09010303          	lb	t1,144(sp)
    1bae:	0004                	0x4
    1bb0:	0501                	addi	a0,a0,0
    1bb2:	0402000f          	0x402000f
    1bb6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1bba:	0004                	0x4
    1bbc:	0501                	addi	a0,a0,0
    1bbe:	001d                	c.nop	7
    1bc0:	0402                	c.slli64	s0
    1bc2:	7f030603          	lb	a2,2032(t1)
    1bc6:	0409                	addi	s0,s0,2
    1bc8:	0100                	addi	s0,sp,128
    1bca:	0905                	addi	s2,s2,1
    1bcc:	0200                	addi	s0,sp,256
    1bce:	0304                	addi	s1,sp,384
    1bd0:	02090b03          	lb	s6,32(s2)
    1bd4:	0100                	addi	s0,sp,128
    1bd6:	1c05                	addi	s8,s8,-31
    1bd8:	0200                	addi	s0,sp,256
    1bda:	0304                	addi	s1,sp,384
    1bdc:	0306                	slli	t1,t1,0x1
    1bde:	0900                	addi	s0,sp,144
    1be0:	0000                	unimp
    1be2:	0501                	addi	a0,a0,0
    1be4:	0018                	0x18
    1be6:	0402                	c.slli64	s0
    1be8:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1bec:	0004                	0x4
    1bee:	0501                	addi	a0,a0,0
    1bf0:	001f 0402 0603      	0x6030402001f
    1bf6:	08097f03          	0x8097f03
    1bfa:	0100                	addi	s0,sp,128
    1bfc:	0905                	addi	s2,s2,1
    1bfe:	0200                	addi	s0,sp,256
    1c00:	0304                	addi	s1,sp,384
    1c02:	04090603          	lb	a2,64(s2)
    1c06:	0100                	addi	s0,sp,128
    1c08:	1805                	addi	a6,a6,-31
    1c0a:	0200                	addi	s0,sp,256
    1c0c:	0304                	addi	s1,sp,384
    1c0e:	0306                	slli	t1,t1,0x1
    1c10:	0900                	addi	s0,sp,144
    1c12:	0004                	0x4
    1c14:	0501                	addi	a0,a0,0
    1c16:	001f 0402 0303      	0x3030402001f
    1c1c:	0900                	addi	s0,sp,144
    1c1e:	0004                	0x4
    1c20:	0501                	addi	a0,a0,0
    1c22:	0018                	0x18
    1c24:	0402                	c.slli64	s0
    1c26:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1c2a:	0004                	0x4
    1c2c:	0501                	addi	a0,a0,0
    1c2e:	0021                	c.nop	8
    1c30:	0402                	c.slli64	s0
    1c32:	097f0303          	lb	t1,151(t5)
    1c36:	0002                	c.slli64	zero
    1c38:	0501                	addi	a0,a0,0
    1c3a:	0018                	0x18
    1c3c:	0402                	c.slli64	s0
    1c3e:	09010303          	lb	t1,144(sp)
    1c42:	0002                	c.slli64	zero
    1c44:	0501                	addi	a0,a0,0
    1c46:	0021                	c.nop	8
    1c48:	0402                	c.slli64	s0
    1c4a:	7f030603          	lb	a2,2032(t1)
    1c4e:	0209                	addi	tp,tp,2
    1c50:	0100                	addi	s0,sp,128
    1c52:	4b05                	li	s6,1
    1c54:	02090c03          	lb	s8,32(s2)
    1c58:	0100                	addi	s0,sp,128
    1c5a:	0205                	addi	tp,tp,1
    1c5c:	00090103          	lb	sp,0(s2)
    1c60:	0100                	addi	s0,sp,128
    1c62:	4b05                	li	s6,1
    1c64:	0306                	slli	t1,t1,0x1
    1c66:	097f                	0x97f
    1c68:	0000                	unimp
    1c6a:	0501                	addi	a0,a0,0
    1c6c:	0901030f          	0x901030f
    1c70:	0002                	c.slli64	zero
    1c72:	0501                	addi	a0,a0,0
    1c74:	097f034b          	fnmsub.s	ft6,ft10,fs7,ft1,rne
    1c78:	0008                	0x8
    1c7a:	0501                	addi	a0,a0,0
    1c7c:	0309                	addi	t1,t1,2
    1c7e:	0905                	addi	s2,s2,1
    1c80:	000e                	c.slli	zero,0x3
    1c82:	0501                	addi	a0,a0,0
    1c84:	097c030f          	0x97c030f
    1c88:	000c                	0xc
    1c8a:	0501                	addi	a0,a0,0
    1c8c:	0309                	addi	t1,t1,2
    1c8e:	0904                	addi	s1,sp,144
    1c90:	0008                	0x8
    1c92:	0501                	addi	a0,a0,0
    1c94:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1c98:	0002                	c.slli64	zero
    1c9a:	0301                	addi	t1,t1,0
    1c9c:	0900                	addi	s0,sp,144
    1c9e:	0006                	c.slli	zero,0x1
    1ca0:	0501                	addi	a0,a0,0
    1ca2:	0901030f          	0x901030f
    1ca6:	0004                	0x4
    1ca8:	0501                	addi	a0,a0,0
    1caa:	0605                	addi	a2,a2,1
    1cac:	04090103          	lb	sp,64(s2)
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	00090103          	lb	sp,0(s2)
    1cb6:	0100                	addi	s0,sp,128
    1cb8:	00090203          	lb	tp,0(s2)
    1cbc:	0100                	addi	s0,sp,128
    1cbe:	0905                	addi	s2,s2,1
    1cc0:	0306                	slli	t1,t1,0x1
    1cc2:	0900                	addi	s0,sp,144
    1cc4:	0000                	unimp
    1cc6:	0501                	addi	a0,a0,0
    1cc8:	0605                	addi	a2,a2,1
    1cca:	02090103          	lb	sp,32(s2)
    1cce:	0100                	addi	s0,sp,128
    1cd0:	00090103          	lb	sp,0(s2)
    1cd4:	0100                	addi	s0,sp,128
    1cd6:	00090303          	lb	t1,0(s2)
    1cda:	0100                	addi	s0,sp,128
    1cdc:	0c05                	addi	s8,s8,1
    1cde:	0306                	slli	t1,t1,0x1
    1ce0:	0900                	addi	s0,sp,144
    1ce2:	0000                	unimp
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	0605                	addi	a2,a2,1
    1ce8:	12090403          	lb	s0,288(s2)
    1cec:	0100                	addi	s0,sp,128
    1cee:	1005                	c.nop	-31
    1cf0:	00090003          	lb	zero,0(s2)
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	0c05                	addi	s8,s8,1
    1cf8:	0306                	slli	t1,t1,0x1
    1cfa:	097c                	addi	a5,sp,156
    1cfc:	0000                	unimp
    1cfe:	0501                	addi	a0,a0,0
    1d00:	0305                	addi	t1,t1,1
    1d02:	0904                	addi	s1,sp,144
    1d04:	0002                	c.slli64	zero
    1d06:	0501                	addi	a0,a0,0
    1d08:	0009                	c.nop	2
    1d0a:	0402                	c.slli64	s0
    1d0c:	01030603          	lb	a2,16(t1)
    1d10:	0409                	addi	s0,s0,2
    1d12:	0100                	addi	s0,sp,128
    1d14:	2405                	jal	1f34 <random_keys+0x474>
    1d16:	0200                	addi	s0,sp,256
    1d18:	0304                	addi	s1,sp,384
    1d1a:	0306                	slli	t1,t1,0x1
    1d1c:	0900                	addi	s0,sp,144
    1d1e:	0004                	0x4
    1d20:	0501                	addi	a0,a0,0
    1d22:	0402001b          	0x402001b
    1d26:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1d2a:	0004                	0x4
    1d2c:	0501                	addi	a0,a0,0
    1d2e:	0011                	c.nop	4
    1d30:	0402                	c.slli64	s0
    1d32:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1d36:	0008                	0x8
    1d38:	0501                	addi	a0,a0,0
    1d3a:	0018                	0x18
    1d3c:	0402                	c.slli64	s0
    1d3e:	7f030603          	lb	a2,2032(t1)
    1d42:	0209                	addi	tp,tp,2
    1d44:	0100                	addi	s0,sp,128
    1d46:	1005                	c.nop	-31
    1d48:	0200                	addi	s0,sp,256
    1d4a:	0304                	addi	s1,sp,384
    1d4c:	00090003          	lb	zero,0(s2)
    1d50:	0100                	addi	s0,sp,128
    1d52:	0505                	addi	a0,a0,1
    1d54:	0200                	addi	s0,sp,256
    1d56:	0304                	addi	s1,sp,384
    1d58:	0306                	slli	t1,t1,0x1
    1d5a:	0900                	addi	s0,sp,144
    1d5c:	0000                	unimp
    1d5e:	0601                	addi	a2,a2,0
    1d60:	04090603          	lb	a2,64(s2)
    1d64:	0100                	addi	s0,sp,128
    1d66:	0a05                	addi	s4,s4,1
    1d68:	0306                	slli	t1,t1,0x1
    1d6a:	0900                	addi	s0,sp,144
    1d6c:	0000                	unimp
    1d6e:	0501                	addi	a0,a0,0
    1d70:	0605                	addi	a2,a2,1
    1d72:	10090203          	lb	tp,256(s2)
    1d76:	0100                	addi	s0,sp,128
    1d78:	1a05                	addi	s4,s4,-31
    1d7a:	0306                	slli	t1,t1,0x1
    1d7c:	0900                	addi	s0,sp,144
    1d7e:	0000                	unimp
    1d80:	0501                	addi	a0,a0,0
    1d82:	0014                	0x14
    1d84:	0402                	c.slli64	s0
    1d86:	0601                	addi	a2,a2,0
    1d88:	08090003          	lb	zero,128(s2)
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	0505                	addi	a0,a0,1
    1d90:	0200                	addi	s0,sp,256
    1d92:	0104                	addi	s1,sp,128
    1d94:	0306                	slli	t1,t1,0x1
    1d96:	0900                	addi	s0,sp,144
    1d98:	0000                	unimp
    1d9a:	0601                	addi	a2,a2,0
    1d9c:	04090703          	lb	a4,64(s2)
    1da0:	0100                	addi	s0,sp,128
    1da2:	0205                	addi	tp,tp,1
    1da4:	00090103          	lb	sp,0(s2)
    1da8:	0100                	addi	s0,sp,128
    1daa:	0105                	addi	sp,sp,1
    1dac:	0306                	slli	t1,t1,0x1
    1dae:	0902                	c.slli64	s2
    1db0:	0000                	unimp
    1db2:	0501                	addi	a0,a0,0
    1db4:	097e030f          	0x97e030f
    1db8:	0004                	0x4
    1dba:	0501                	addi	a0,a0,0
    1dbc:	0605                	addi	a2,a2,1
    1dbe:	0c090103          	lb	sp,192(s2)
    1dc2:	0100                	addi	s0,sp,128
    1dc4:	0105                	addi	sp,sp,1
    1dc6:	0306                	slli	t1,t1,0x1
    1dc8:	0901                	addi	s2,s2,0
    1dca:	0000                	unimp
    1dcc:	0501                	addi	a0,a0,0
    1dce:	0009                	c.nop	2
    1dd0:	0402                	c.slli64	s0
    1dd2:	77030603          	lb	a2,1904(t1)
    1dd6:	0e09                	addi	t3,t3,2
    1dd8:	0100                	addi	s0,sp,128
    1dda:	1905                	addi	s2,s2,-31
    1ddc:	0200                	addi	s0,sp,256
    1dde:	0304                	addi	s1,sp,384
    1de0:	0306                	slli	t1,t1,0x1
    1de2:	0900                	addi	s0,sp,144
    1de4:	0000                	unimp
    1de6:	0501                	addi	a0,a0,0
    1de8:	001f 0402 0303      	0x3030402001f
    1dee:	097f                	0x97f
    1df0:	0008                	0x8
    1df2:	0501                	addi	a0,a0,0
    1df4:	0015                	c.nop	5
    1df6:	0402                	c.slli64	s0
    1df8:	09010303          	lb	t1,144(sp)
    1dfc:	0004                	0x4
    1dfe:	0501                	addi	a0,a0,0
    1e00:	001f 0402 0603      	0x6030402001f
    1e06:	04097f03          	0x4097f03
    1e0a:	0100                	addi	s0,sp,128
    1e0c:	6c05                	lui	s8,0x1
    1e0e:	02090d03          	lb	s10,32(s2)
    1e12:	0100                	addi	s0,sp,128
    1e14:	0205                	addi	tp,tp,1
    1e16:	00090103          	lb	sp,0(s2)
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	6c05                	lui	s8,0x1
    1e1e:	0306                	slli	t1,t1,0x1
    1e20:	097f                	0x97f
    1e22:	0000                	unimp
    1e24:	0501                	addi	a0,a0,0
    1e26:	031e                	slli	t1,t1,0x7
    1e28:	0911                	addi	s2,s2,4
    1e2a:	0008                	0x8
    1e2c:	0501                	addi	a0,a0,0
    1e2e:	036c                	addi	a1,sp,396
    1e30:	0006096f          	jal	s2,61e30 <_stack_start+0x51e30>
    1e34:	0501                	addi	a0,a0,0
    1e36:	0901030f          	0x901030f
    1e3a:	0004                	0x4
    1e3c:	0501                	addi	a0,a0,0
    1e3e:	036c                	addi	a1,sp,396
    1e40:	097f                	0x97f
    1e42:	0004                	0x4
    1e44:	0501                	addi	a0,a0,0
    1e46:	0901030f          	0x901030f
    1e4a:	0002                	c.slli64	zero
    1e4c:	0501                	addi	a0,a0,0
    1e4e:	036c                	addi	a1,sp,396
    1e50:	097f                	0x97f
    1e52:	000c                	0xc
    1e54:	0501                	addi	a0,a0,0
    1e56:	0309                	addi	t1,t1,2
    1e58:	090a                	slli	s2,s2,0x2
    1e5a:	0008                	0x8
    1e5c:	0501                	addi	a0,a0,0
    1e5e:	0977030f          	0x977030f
    1e62:	0002                	c.slli64	zero
    1e64:	0501                	addi	a0,a0,0
    1e66:	0605                	addi	a2,a2,1
    1e68:	04090103          	lb	sp,64(s2)
    1e6c:	0100                	addi	s0,sp,128
    1e6e:	00090103          	lb	sp,0(s2)
    1e72:	0100                	addi	s0,sp,128
    1e74:	00090103          	lb	sp,0(s2)
    1e78:	0100                	addi	s0,sp,128
    1e7a:	00090103          	lb	sp,0(s2)
    1e7e:	0100                	addi	s0,sp,128
    1e80:	00090103          	lb	sp,0(s2)
    1e84:	0100                	addi	s0,sp,128
    1e86:	00090103          	lb	sp,0(s2)
    1e8a:	0100                	addi	s0,sp,128
    1e8c:	00090303          	lb	t1,0(s2)
    1e90:	0100                	addi	s0,sp,128
    1e92:	0905                	addi	s2,s2,1
    1e94:	0306                	slli	t1,t1,0x1
    1e96:	0900                	addi	s0,sp,144
    1e98:	0000                	unimp
    1e9a:	0501                	addi	a0,a0,0
    1e9c:	036c                	addi	a1,sp,396
    1e9e:	0976                	slli	s2,s2,0x1d
    1ea0:	0004                	0x4
    1ea2:	0501                	addi	a0,a0,0
    1ea4:	0309                	addi	t1,t1,2
    1ea6:	090a                	slli	s2,s2,0x2
    1ea8:	0002                	c.slli64	zero
    1eaa:	0501                	addi	a0,a0,0
    1eac:	036c                	addi	a1,sp,396
    1eae:	0976                	slli	s2,s2,0x1d
    1eb0:	0002                	c.slli64	zero
    1eb2:	0301                	addi	t1,t1,0
    1eb4:	0900                	addi	s0,sp,144
    1eb6:	0008                	0x8
    1eb8:	0501                	addi	a0,a0,0
    1eba:	030a                	slli	t1,t1,0x2
    1ebc:	090e                	slli	s2,s2,0x3
    1ebe:	0002                	c.slli64	zero
    1ec0:	0501                	addi	a0,a0,0
    1ec2:	0309                	addi	t1,t1,2
    1ec4:	097c                	addi	a5,sp,156
    1ec6:	0004                	0x4
    1ec8:	0501                	addi	a0,a0,0
    1eca:	0605                	addi	a2,a2,1
    1ecc:	04090403          	lb	s0,64(s2)
    1ed0:	0100                	addi	s0,sp,128
    1ed2:	0a05                	addi	s4,s4,1
    1ed4:	0306                	slli	t1,t1,0x1
    1ed6:	0900                	addi	s0,sp,144
    1ed8:	0000                	unimp
    1eda:	0501                	addi	a0,a0,0
    1edc:	0605                	addi	a2,a2,1
    1ede:	12090303          	lb	t1,288(s2)
    1ee2:	0100                	addi	s0,sp,128
    1ee4:	0b05                	addi	s6,s6,1
    1ee6:	0306                	slli	t1,t1,0x1
    1ee8:	0900                	addi	s0,sp,144
    1eea:	0004                	0x4
    1eec:	0501                	addi	a0,a0,0
    1eee:	0014                	0x14
    1ef0:	0402                	c.slli64	s0
    1ef2:	0601                	addi	a2,a2,0
    1ef4:	02090003          	lb	zero,32(s2)
    1ef8:	0100                	addi	s0,sp,128
    1efa:	0505                	addi	a0,a0,1
    1efc:	0200                	addi	s0,sp,256
    1efe:	0104                	addi	s1,sp,128
    1f00:	0306                	slli	t1,t1,0x1
    1f02:	0900                	addi	s0,sp,144
    1f04:	0000                	unimp
    1f06:	0501                	addi	a0,a0,0
    1f08:	0316                	slli	t1,t1,0x5
    1f0a:	0906                	slli	s2,s2,0x1
    1f0c:	0004                	0x4
    1f0e:	0501                	addi	a0,a0,0
    1f10:	030c                	addi	a1,sp,384
    1f12:	097f                	0x97f
    1f14:	0006                	c.slli	zero,0x1
    1f16:	0501                	addi	a0,a0,0
    1f18:	0011                	c.nop	4
    1f1a:	0402                	c.slli64	s0
    1f1c:	0601                	addi	a2,a2,0
    1f1e:	02090003          	lb	zero,32(s2)
    1f22:	0100                	addi	s0,sp,128
    1f24:	0505                	addi	a0,a0,1
    1f26:	0200                	addi	s0,sp,256
    1f28:	0104                	addi	s1,sp,128
    1f2a:	0306                	slli	t1,t1,0x1
    1f2c:	0900                	addi	s0,sp,144
    1f2e:	0000                	unimp
    1f30:	0601                	addi	a2,a2,0
    1f32:	04090803          	lb	a6,64(s2)
    1f36:	0100                	addi	s0,sp,128
    1f38:	0905                	addi	s2,s2,1
    1f3a:	0306                	slli	t1,t1,0x1
    1f3c:	0900                	addi	s0,sp,144
    1f3e:	0000                	unimp
    1f40:	0501                	addi	a0,a0,0
    1f42:	0605                	addi	a2,a2,1
    1f44:	0c090403          	lb	s0,192(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	0a05                	addi	s4,s4,1
    1f4c:	0306                	slli	t1,t1,0x1
    1f4e:	0900                	addi	s0,sp,144
    1f50:	0000                	unimp
    1f52:	0501                	addi	a0,a0,0
    1f54:	0605                	addi	a2,a2,1
    1f56:	0c090103          	lb	sp,192(s2)
    1f5a:	0100                	addi	s0,sp,128
    1f5c:	1405                	addi	s0,s0,-31
    1f5e:	0200                	addi	s0,sp,256
    1f60:	0104                	addi	s1,sp,128
    1f62:	02090003          	lb	zero,32(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	0505                	addi	a0,a0,1
    1f6a:	0200                	addi	s0,sp,256
    1f6c:	0104                	addi	s1,sp,128
    1f6e:	0306                	slli	t1,t1,0x1
    1f70:	0900                	addi	s0,sp,144
    1f72:	0000                	unimp
    1f74:	0601                	addi	a2,a2,0
    1f76:	04090503          	lb	a0,64(s2)
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	0205                	addi	tp,tp,1
    1f7e:	00090103          	lb	sp,0(s2)
    1f82:	0100                	addi	s0,sp,128
    1f84:	0105                	addi	sp,sp,1
    1f86:	0306                	slli	t1,t1,0x1
    1f88:	0902                	c.slli64	s2
    1f8a:	0000                	unimp
    1f8c:	0501                	addi	a0,a0,0
    1f8e:	097e030f          	0x97e030f
    1f92:	0004                	0x4
    1f94:	0501                	addi	a0,a0,0
    1f96:	0605                	addi	a2,a2,1
    1f98:	0c090103          	lb	sp,192(s2)
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	0105                	addi	sp,sp,1
    1fa0:	0306                	slli	t1,t1,0x1
    1fa2:	0901                	addi	s2,s2,0
    1fa4:	0000                	unimp
    1fa6:	0501                	addi	a0,a0,0
    1fa8:	0009                	c.nop	2
    1faa:	0402                	c.slli64	s0
    1fac:	67030603          	lb	a2,1648(t1)
    1fb0:	1409                	addi	s0,s0,-30
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	1905                	addi	s2,s2,-31
    1fb6:	0200                	addi	s0,sp,256
    1fb8:	0304                	addi	s1,sp,384
    1fba:	0306                	slli	t1,t1,0x1
    1fbc:	0900                	addi	s0,sp,144
    1fbe:	0000                	unimp
    1fc0:	0501                	addi	a0,a0,0
    1fc2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1fc6:	097f0303          	lb	t1,151(t5)
    1fca:	0008                	0x8
    1fcc:	0501                	addi	a0,a0,0
    1fce:	0015                	c.nop	5
    1fd0:	0402                	c.slli64	s0
    1fd2:	09010303          	lb	t1,144(sp)
    1fd6:	0004                	0x4
    1fd8:	0501                	addi	a0,a0,0
    1fda:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1fde:	7f030603          	lb	a2,2032(t1)
    1fe2:	0409                	addi	s0,s0,2
    1fe4:	0100                	addi	s0,sp,128
    1fe6:	0905                	addi	s2,s2,1
    1fe8:	02090603          	lb	a2,32(s2)
    1fec:	0100                	addi	s0,sp,128
    1fee:	0e05                	addi	t3,t3,1
    1ff0:	0306                	slli	t1,t1,0x1
    1ff2:	0900                	addi	s0,sp,144
    1ff4:	0000                	unimp
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	0900030b          	0x900030b
    1ffc:	0002                	c.slli64	zero
    1ffe:	0501                	addi	a0,a0,0
    2000:	060d                	addi	a2,a2,3
    2002:	04090303          	lb	t1,64(s2)
    2006:	0100                	addi	s0,sp,128
    2008:	1905                	addi	s2,s2,-31
    200a:	0306                	slli	t1,t1,0x1
    200c:	0900                	addi	s0,sp,144
    200e:	0000                	unimp
    2010:	0501                	addi	a0,a0,0
    2012:	09000313          	li	t1,144
    2016:	0004                	0x4
    2018:	0501                	addi	a0,a0,0
    201a:	0018                	0x18
    201c:	0402                	c.slli64	s0
    201e:	0602                	c.slli64	a2
    2020:	02097c03          	0x2097c03
    2024:	0100                	addi	s0,sp,128
    2026:	0905                	addi	s2,s2,1
    2028:	0200                	addi	s0,sp,256
    202a:	0304                	addi	s1,sp,384
    202c:	06090e03          	lb	t3,96(s2)
    2030:	0100                	addi	s0,sp,128
    2032:	1905                	addi	s2,s2,-31
    2034:	0200                	addi	s0,sp,256
    2036:	0304                	addi	s1,sp,384
    2038:	0306                	slli	t1,t1,0x1
    203a:	0900                	addi	s0,sp,144
    203c:	0000                	unimp
    203e:	0501                	addi	a0,a0,0
    2040:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2044:	097f0303          	lb	t1,151(t5)
    2048:	0008                	0x8
    204a:	0501                	addi	a0,a0,0
    204c:	0015                	c.nop	5
    204e:	0402                	c.slli64	s0
    2050:	09010303          	lb	t1,144(sp)
    2054:	0004                	0x4
    2056:	0501                	addi	a0,a0,0
    2058:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    205c:	7f030603          	lb	a2,2032(t1)
    2060:	0409                	addi	s0,s0,2
    2062:	0100                	addi	s0,sp,128
    2064:	0209                	addi	tp,tp,2
    2066:	0000                	unimp
    2068:	0101                	addi	sp,sp,0
    206a:	0b05                	addi	s6,s6,1
    206c:	0500                	addi	s0,sp,640
    206e:	9c02                	jalr	s8
    2070:	0300000f          	fence	rw,unknown
    2074:	0501069b          	0x501069b
    2078:	0305                	addi	t1,t1,1
    207a:	0901                	addi	s2,s2,0
    207c:	0000                	unimp
    207e:	0301                	addi	t1,t1,0
    2080:	0901                	addi	s2,s2,0
    2082:	0000                	unimp
    2084:	0301                	addi	t1,t1,0
    2086:	0901                	addi	s2,s2,0
    2088:	0000                	unimp
    208a:	0301                	addi	t1,t1,0
    208c:	0901                	addi	s2,s2,0
    208e:	0000                	unimp
    2090:	0301                	addi	t1,t1,0
    2092:	0901                	addi	s2,s2,0
    2094:	0000                	unimp
    2096:	0301                	addi	t1,t1,0
    2098:	0901                	addi	s2,s2,0
    209a:	0000                	unimp
    209c:	0301                	addi	t1,t1,0
    209e:	0902                	c.slli64	s2
    20a0:	0000                	unimp
    20a2:	0501                	addi	a0,a0,0
    20a4:	7803060b          	0x7803060b
    20a8:	0009                	c.nop	2
    20aa:	0100                	addi	s0,sp,128
    20ac:	0905                	addi	s2,s2,1
    20ae:	04090803          	lb	a6,64(s2)
    20b2:	0100                	addi	s0,sp,128
    20b4:	0b05                	addi	s6,s6,1
    20b6:	0e097803          	0xe097803
    20ba:	0100                	addi	s0,sp,128
    20bc:	0905                	addi	s2,s2,1
    20be:	08090803          	lb	a6,128(s2)
    20c2:	0100                	addi	s0,sp,128
    20c4:	0505                	addi	a0,a0,1
    20c6:	0306                	slli	t1,t1,0x1
    20c8:	0901                	addi	s2,s2,0
    20ca:	0002                	c.slli64	zero
    20cc:	0301                	addi	t1,t1,0
    20ce:	0901                	addi	s2,s2,0
    20d0:	0000                	unimp
    20d2:	0301                	addi	t1,t1,0
    20d4:	0901                	addi	s2,s2,0
    20d6:	0000                	unimp
    20d8:	0301                	addi	t1,t1,0
    20da:	0901                	addi	s2,s2,0
    20dc:	0000                	unimp
    20de:	0301                	addi	t1,t1,0
    20e0:	0901                	addi	s2,s2,0
    20e2:	0000                	unimp
    20e4:	0301                	addi	t1,t1,0
    20e6:	0901                	addi	s2,s2,0
    20e8:	0000                	unimp
    20ea:	0301                	addi	t1,t1,0
    20ec:	0901                	addi	s2,s2,0
    20ee:	0000                	unimp
    20f0:	0301                	addi	t1,t1,0
    20f2:	090a                	slli	s2,s2,0x2
    20f4:	0000                	unimp
    20f6:	0501                	addi	a0,a0,0
    20f8:	060c                	addi	a1,sp,768
    20fa:	00090003          	lb	zero,0(s2)
    20fe:	0100                	addi	s0,sp,128
    2100:	0505                	addi	a0,a0,1
    2102:	0306                	slli	t1,t1,0x1
    2104:	000c0903          	lb	s2,0(s8) # 1000 <main+0x64>
    2108:	0501                	addi	a0,a0,0
    210a:	0310                	addi	a2,sp,384
    210c:	0900                	addi	s0,sp,144
    210e:	0000                	unimp
    2110:	0501                	addi	a0,a0,0
    2112:	060c                	addi	a1,sp,768
    2114:	00097d03          	0x97d03
    2118:	0100                	addi	s0,sp,128
    211a:	0505                	addi	a0,a0,1
    211c:	02090303          	lb	t1,32(s2)
    2120:	0100                	addi	s0,sp,128
    2122:	0905                	addi	s2,s2,1
    2124:	0200                	addi	s0,sp,256
    2126:	0304                	addi	s1,sp,384
    2128:	0306                	slli	t1,t1,0x1
    212a:	0902                	c.slli64	s2
    212c:	0004                	0x4
    212e:	0501                	addi	a0,a0,0
    2130:	001f 0402 0603      	0x6030402001f
    2136:	00090003          	lb	zero,0(s2)
    213a:	0100                	addi	s0,sp,128
    213c:	1905                	addi	s2,s2,-31
    213e:	0200                	addi	s0,sp,256
    2140:	0304                	addi	s1,sp,384
    2142:	06090003          	lb	zero,96(s2)
    2146:	0100                	addi	s0,sp,128
    2148:	1705                	addi	a4,a4,-31
    214a:	0200                	addi	s0,sp,256
    214c:	0304                	addi	s1,sp,384
    214e:	0306                	slli	t1,t1,0x1
    2150:	097e                	slli	s2,s2,0x1f
    2152:	0006                	c.slli	zero,0x1
    2154:	0501                	addi	a0,a0,0
    2156:	0010                	0x10
    2158:	0402                	c.slli64	s0
    215a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    215e:	0000                	unimp
    2160:	0501                	addi	a0,a0,0
    2162:	0005                	c.nop	1
    2164:	0402                	c.slli64	s0
    2166:	00030603          	lb	a2,0(t1)
    216a:	0209                	addi	tp,tp,2
    216c:	0100                	addi	s0,sp,128
    216e:	0905                	addi	s2,s2,1
    2170:	0200                	addi	s0,sp,256
    2172:	0304                	addi	s1,sp,384
    2174:	0306                	slli	t1,t1,0x1
    2176:	0909                	addi	s2,s2,2
    2178:	0004                	0x4
    217a:	0501                	addi	a0,a0,0
    217c:	0402001b          	0x402001b
    2180:	097e0303          	lb	t1,151(t3)
    2184:	0000                	unimp
    2186:	0501                	addi	a0,a0,0
    2188:	0010                	0x10
    218a:	0402                	c.slli64	s0
    218c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2190:	0000                	unimp
    2192:	0501                	addi	a0,a0,0
    2194:	0009                	c.nop	2
    2196:	0402                	c.slli64	s0
    2198:	09090303          	lb	t1,144(s2)
    219c:	000c                	0xc
    219e:	0501                	addi	a0,a0,0
    21a0:	0026                	c.slli	zero,0x9
    21a2:	0402                	c.slli64	s0
    21a4:	00030603          	lb	a2,0(t1)
    21a8:	0009                	c.nop	2
    21aa:	0100                	addi	s0,sp,128
    21ac:	2005                	jal	21cc <_min_stack+0x1cc>
    21ae:	0200                	addi	s0,sp,256
    21b0:	0304                	addi	s1,sp,384
    21b2:	06090003          	lb	zero,96(s2)
    21b6:	0100                	addi	s0,sp,128
    21b8:	1f05                	addi	t5,t5,-31
    21ba:	0200                	addi	s0,sp,256
    21bc:	0304                	addi	s1,sp,384
    21be:	0306                	slli	t1,t1,0x1
    21c0:	097e                	slli	s2,s2,0x1f
    21c2:	0004                	0x4
    21c4:	0501                	addi	a0,a0,0
    21c6:	0014                	0x14
    21c8:	0402                	c.slli64	s0
    21ca:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    21ce:	0000                	unimp
    21d0:	0501                	addi	a0,a0,0
    21d2:	0005                	c.nop	1
    21d4:	0402                	c.slli64	s0
    21d6:	00030603          	lb	a2,0(t1)
    21da:	0009                	c.nop	2
    21dc:	0100                	addi	s0,sp,128
    21de:	0905                	addi	s2,s2,1
    21e0:	0200                	addi	s0,sp,256
    21e2:	0304                	addi	s1,sp,384
    21e4:	0306                	slli	t1,t1,0x1
    21e6:	0909                	addi	s2,s2,2
    21e8:	0004                	0x4
    21ea:	0501                	addi	a0,a0,0
    21ec:	001f 0402 0303      	0x3030402001f
    21f2:	097e                	slli	s2,s2,0x1f
    21f4:	0000                	unimp
    21f6:	0501                	addi	a0,a0,0
    21f8:	0014                	0x14
    21fa:	0402                	c.slli64	s0
    21fc:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2200:	0000                	unimp
    2202:	0501                	addi	a0,a0,0
    2204:	0009                	c.nop	2
    2206:	0402                	c.slli64	s0
    2208:	09090303          	lb	t1,144(s2)
    220c:	000c                	0xc
    220e:	0501                	addi	a0,a0,0
    2210:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2214:	00030603          	lb	a2,0(t1)
    2218:	0009                	c.nop	2
    221a:	0100                	addi	s0,sp,128
    221c:	1d05                	addi	s10,s10,-31
    221e:	0200                	addi	s0,sp,256
    2220:	0304                	addi	s1,sp,384
    2222:	06090003          	lb	zero,96(s2)
    2226:	0100                	addi	s0,sp,128
    2228:	1f05                	addi	t5,t5,-31
    222a:	0200                	addi	s0,sp,256
    222c:	0304                	addi	s1,sp,384
    222e:	0306                	slli	t1,t1,0x1
    2230:	097e                	slli	s2,s2,0x1f
    2232:	0004                	0x4
    2234:	0501                	addi	a0,a0,0
    2236:	0014                	0x14
    2238:	0402                	c.slli64	s0
    223a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    223e:	0000                	unimp
    2240:	0501                	addi	a0,a0,0
    2242:	0005                	c.nop	1
    2244:	0402                	c.slli64	s0
    2246:	00030603          	lb	a2,0(t1)
    224a:	0009                	c.nop	2
    224c:	0100                	addi	s0,sp,128
    224e:	0905                	addi	s2,s2,1
    2250:	0200                	addi	s0,sp,256
    2252:	0304                	addi	s1,sp,384
    2254:	0306                	slli	t1,t1,0x1
    2256:	0909                	addi	s2,s2,2
    2258:	000c                	0xc
    225a:	0501                	addi	a0,a0,0
    225c:	0022                	c.slli	zero,0x8
    225e:	0402                	c.slli64	s0
    2260:	00030603          	lb	a2,0(t1)
    2264:	0009                	c.nop	2
    2266:	0100                	addi	s0,sp,128
    2268:	1c05                	addi	s8,s8,-31
    226a:	0200                	addi	s0,sp,256
    226c:	0304                	addi	s1,sp,384
    226e:	06090003          	lb	zero,96(s2)
    2272:	0100                	addi	s0,sp,128
    2274:	2105                	jal	2694 <_min_stack+0x694>
    2276:	0200                	addi	s0,sp,256
    2278:	0304                	addi	s1,sp,384
    227a:	0306                	slli	t1,t1,0x1
    227c:	097e                	slli	s2,s2,0x1f
    227e:	0004                	0x4
    2280:	0501                	addi	a0,a0,0
    2282:	0014                	0x14
    2284:	0402                	c.slli64	s0
    2286:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    228a:	0000                	unimp
    228c:	0501                	addi	a0,a0,0
    228e:	0005                	c.nop	1
    2290:	0402                	c.slli64	s0
    2292:	00030603          	lb	a2,0(t1)
    2296:	0009                	c.nop	2
    2298:	0100                	addi	s0,sp,128
    229a:	0306                	slli	t1,t1,0x1
    229c:	0909                	addi	s2,s2,2
    229e:	0004                	0x4
    22a0:	0501                	addi	a0,a0,0
    22a2:	00030613          	mv	a2,t1
    22a6:	0009                	c.nop	2
    22a8:	0100                	addi	s0,sp,128
    22aa:	0505                	addi	a0,a0,1
    22ac:	0306                	slli	t1,t1,0x1
    22ae:	0010090b          	0x10090b
    22b2:	0501                	addi	a0,a0,0
    22b4:	00030613          	mv	a2,t1
    22b8:	0009                	c.nop	2
    22ba:	0100                	addi	s0,sp,128
    22bc:	0505                	addi	a0,a0,1
    22be:	0306                	slli	t1,t1,0x1
    22c0:	0914                	addi	a3,sp,144
    22c2:	0014                	0x14
    22c4:	0501                	addi	a0,a0,0
    22c6:	0310                	addi	a2,sp,384
    22c8:	0900                	addi	s0,sp,144
    22ca:	0000                	unimp
    22cc:	0501                	addi	a0,a0,0
    22ce:	061a                	slli	a2,a2,0x6
    22d0:	00090803          	lb	a6,0(s2)
    22d4:	0100                	addi	s0,sp,128
    22d6:	1305                	addi	t1,t1,-31
    22d8:	04096403          	0x4096403
    22dc:	0100                	addi	s0,sp,128
    22de:	1a05                	addi	s4,s4,-31
    22e0:	0a091c03          	lh	s8,160(s2)
    22e4:	0100                	addi	s0,sp,128
    22e6:	0505                	addi	a0,a0,1
    22e8:	04097803          	0x4097803
    22ec:	0100                	addi	s0,sp,128
    22ee:	0905                	addi	s2,s2,1
    22f0:	0306                	slli	t1,t1,0x1
    22f2:	0901                	addi	s2,s2,0
    22f4:	0004                	0x4
    22f6:	0501                	addi	a0,a0,0
    22f8:	0003060b          	0x3060b
    22fc:	0009                	c.nop	2
    22fe:	0100                	addi	s0,sp,128
    2300:	2705                	jal	2a20 <_min_stack+0xa20>
    2302:	02090003          	lb	zero,32(s2)
    2306:	0100                	addi	s0,sp,128
    2308:	0b05                	addi	s6,s6,1
    230a:	04090003          	lb	zero,64(s2)
    230e:	0100                	addi	s0,sp,128
    2310:	0d05                	addi	s10,s10,1
    2312:	0306                	slli	t1,t1,0x1
    2314:	0902                	c.slli64	s2
    2316:	000a                	c.slli	zero,0x2
    2318:	0501                	addi	a0,a0,0
    231a:	061a                	slli	a2,a2,0x6
    231c:	00090003          	lb	zero,0(s2)
    2320:	0100                	addi	s0,sp,128
    2322:	0d05                	addi	s10,s10,1
    2324:	0306                	slli	t1,t1,0x1
    2326:	0902                	c.slli64	s2
    2328:	000a                	c.slli	zero,0x2
    232a:	0501                	addi	a0,a0,0
    232c:	0305                	addi	t1,t1,1
    232e:	0909                	addi	s2,s2,2
    2330:	0000                	unimp
    2332:	0501                	addi	a0,a0,0
    2334:	0601                	addi	a2,a2,0
    2336:	00090103          	lb	sp,0(s2)
    233a:	0100                	addi	s0,sp,128
    233c:	0d05                	addi	s10,s10,1
    233e:	0200                	addi	s0,sp,256
    2340:	0204                	addi	s1,sp,256
    2342:	0306                	slli	t1,t1,0x1
    2344:	0979                	addi	s2,s2,30
    2346:	0010                	0x10
    2348:	0501                	addi	a0,a0,0
    234a:	001a                	c.slli	zero,0x6
    234c:	0402                	c.slli64	s0
    234e:	0602                	c.slli64	a2
    2350:	00090003          	lb	zero,0(s2)
    2354:	0100                	addi	s0,sp,128
    2356:	1805                	addi	a6,a6,-31
    2358:	0200                	addi	s0,sp,256
    235a:	0204                	addi	s1,sp,256
    235c:	0306                	slli	t1,t1,0x1
    235e:	0978                	addi	a4,sp,156
    2360:	0002                	c.slli64	zero
    2362:	0501                	addi	a0,a0,0
    2364:	0010                	0x10
    2366:	0402                	c.slli64	s0
    2368:	0302                	c.slli64	t1
    236a:	0900                	addi	s0,sp,144
    236c:	0000                	unimp
    236e:	0501                	addi	a0,a0,0
    2370:	0005                	c.nop	1
    2372:	0402                	c.slli64	s0
    2374:	0602                	c.slli64	a2
    2376:	02090003          	lb	zero,32(s2)
    237a:	0100                	addi	s0,sp,128
    237c:	0609                	addi	a2,a2,2
    237e:	0000                	unimp
    2380:	0101                	addi	sp,sp,0
    2382:	0150                	addi	a2,sp,132
    2384:	0000                	unimp
    2386:	001d0003          	lb	zero,1(s10)
    238a:	0000                	unimp
    238c:	0101                	addi	sp,sp,0
    238e:	000d0efb          	0xd0efb
    2392:	0101                	addi	sp,sp,0
    2394:	0101                	addi	sp,sp,0
    2396:	0000                	unimp
    2398:	0100                	addi	s0,sp,128
    239a:	0000                	unimp
    239c:	0001                	nop
    239e:	30747263          	bgeu	s0,t2,26a2 <_min_stack+0x6a2>
    23a2:	532e                	lw	t1,232(sp)
    23a4:	0000                	unimp
    23a6:	0000                	unimp
    23a8:	0000                	unimp
    23aa:	0205                	addi	tp,tp,1
    23ac:	0da0                	addi	s0,sp,728
    23ae:	0000                	unimp
    23b0:	0315                	addi	t1,t1,5
    23b2:	0904                	addi	s1,sp,144
    23b4:	0004                	0x4
    23b6:	0301                	addi	t1,t1,0
    23b8:	0901                	addi	s2,s2,0
    23ba:	0004                	0x4
    23bc:	0301                	addi	t1,t1,0
    23be:	0901                	addi	s2,s2,0
    23c0:	0002                	c.slli64	zero
    23c2:	0301                	addi	t1,t1,0
    23c4:	0901                	addi	s2,s2,0
    23c6:	0002                	c.slli64	zero
    23c8:	0301                	addi	t1,t1,0
    23ca:	0901                	addi	s2,s2,0
    23cc:	0002                	c.slli64	zero
    23ce:	0301                	addi	t1,t1,0
    23d0:	0901                	addi	s2,s2,0
    23d2:	0002                	c.slli64	zero
    23d4:	0301                	addi	t1,t1,0
    23d6:	0901                	addi	s2,s2,0
    23d8:	0002                	c.slli64	zero
    23da:	0301                	addi	t1,t1,0
    23dc:	0901                	addi	s2,s2,0
    23de:	0002                	c.slli64	zero
    23e0:	0301                	addi	t1,t1,0
    23e2:	0901                	addi	s2,s2,0
    23e4:	0002                	c.slli64	zero
    23e6:	0301                	addi	t1,t1,0
    23e8:	0901                	addi	s2,s2,0
    23ea:	0002                	c.slli64	zero
    23ec:	0301                	addi	t1,t1,0
    23ee:	0901                	addi	s2,s2,0
    23f0:	0002                	c.slli64	zero
    23f2:	0301                	addi	t1,t1,0
    23f4:	0901                	addi	s2,s2,0
    23f6:	0002                	c.slli64	zero
    23f8:	0301                	addi	t1,t1,0
    23fa:	0901                	addi	s2,s2,0
    23fc:	0002                	c.slli64	zero
    23fe:	0301                	addi	t1,t1,0
    2400:	0901                	addi	s2,s2,0
    2402:	0002                	c.slli64	zero
    2404:	0301                	addi	t1,t1,0
    2406:	0901                	addi	s2,s2,0
    2408:	0002                	c.slli64	zero
    240a:	0301                	addi	t1,t1,0
    240c:	0901                	addi	s2,s2,0
    240e:	0002                	c.slli64	zero
    2410:	0301                	addi	t1,t1,0
    2412:	0901                	addi	s2,s2,0
    2414:	0002                	c.slli64	zero
    2416:	0301                	addi	t1,t1,0
    2418:	0901                	addi	s2,s2,0
    241a:	0002                	c.slli64	zero
    241c:	0301                	addi	t1,t1,0
    241e:	0901                	addi	s2,s2,0
    2420:	0002                	c.slli64	zero
    2422:	0301                	addi	t1,t1,0
    2424:	0901                	addi	s2,s2,0
    2426:	0002                	c.slli64	zero
    2428:	0301                	addi	t1,t1,0
    242a:	0901                	addi	s2,s2,0
    242c:	0002                	c.slli64	zero
    242e:	0301                	addi	t1,t1,0
    2430:	0901                	addi	s2,s2,0
    2432:	0002                	c.slli64	zero
    2434:	0301                	addi	t1,t1,0
    2436:	0901                	addi	s2,s2,0
    2438:	0002                	c.slli64	zero
    243a:	0301                	addi	t1,t1,0
    243c:	0901                	addi	s2,s2,0
    243e:	0002                	c.slli64	zero
    2440:	0301                	addi	t1,t1,0
    2442:	0901                	addi	s2,s2,0
    2444:	0002                	c.slli64	zero
    2446:	0301                	addi	t1,t1,0
    2448:	0901                	addi	s2,s2,0
    244a:	0002                	c.slli64	zero
    244c:	0301                	addi	t1,t1,0
    244e:	0901                	addi	s2,s2,0
    2450:	0002                	c.slli64	zero
    2452:	0301                	addi	t1,t1,0
    2454:	0901                	addi	s2,s2,0
    2456:	0002                	c.slli64	zero
    2458:	0301                	addi	t1,t1,0
    245a:	0901                	addi	s2,s2,0
    245c:	0002                	c.slli64	zero
    245e:	0301                	addi	t1,t1,0
    2460:	0901                	addi	s2,s2,0
    2462:	0002                	c.slli64	zero
    2464:	0301                	addi	t1,t1,0
    2466:	0901                	addi	s2,s2,0
    2468:	0002                	c.slli64	zero
    246a:	0301                	addi	t1,t1,0
    246c:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2470:	0301                	addi	t1,t1,0
    2472:	0906                	slli	s2,s2,0x1
    2474:	0008                	0x8
    2476:	0301                	addi	t1,t1,0
    2478:	0901                	addi	s2,s2,0
    247a:	0008                	0x8
    247c:	0301                	addi	t1,t1,0
    247e:	0902                	c.slli64	s2
    2480:	0008                	0x8
    2482:	0301                	addi	t1,t1,0
    2484:	00040903          	lb	s2,0(s0)
    2488:	0301                	addi	t1,t1,0
    248a:	0901                	addi	s2,s2,0
    248c:	0004                	0x4
    248e:	0301                	addi	t1,t1,0
    2490:	0901                	addi	s2,s2,0
    2492:	0002                	c.slli64	zero
    2494:	0301                	addi	t1,t1,0
    2496:	0906                	slli	s2,s2,0x1
    2498:	0004                	0x4
    249a:	0301                	addi	t1,t1,0
    249c:	0901                	addi	s2,s2,0
    249e:	0004                	0x4
    24a0:	0301                	addi	t1,t1,0
    24a2:	0901                	addi	s2,s2,0
    24a4:	0004                	0x4
    24a6:	0901                	addi	s2,s2,0
    24a8:	0004                	0x4
    24aa:	0100                	addi	s0,sp,128
    24ac:	0001                	nop
    24ae:	0205                	addi	tp,tp,1
    24b0:	0000                	unimp
    24b2:	0000                	unimp
    24b4:	0100cb03          	lbu	s6,16(ra)
    24b8:	7c090103          	lb	sp,1984(s2)
    24bc:	0100                	addi	s0,sp,128
    24be:	04090403          	lb	s0,64(s2)
    24c2:	0100                	addi	s0,sp,128
    24c4:	04090403          	lb	s0,64(s2)
    24c8:	0100                	addi	s0,sp,128
    24ca:	04090403          	lb	s0,64(s2)
    24ce:	0100                	addi	s0,sp,128
    24d0:	0409                	addi	s0,s0,2
    24d2:	0000                	unimp
    24d4:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0x16>
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    switch(length%3) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < (length / 3); i++) {
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	7465                	lui	s0,0xffff9
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
            a1[length-1] = a2[length-1];
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
            a1[length-1] = a2[length-1];
  e4:	5f00                	lw	s0,56(a4)
            a1[length-2] = a2[length-2];
  e6:	745f 5f6d 6573      	0x65735f6d745f
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x100>
} //end of function
  f0:	676e                	flw	fa4,216(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    asm volatile(
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 100:	4e5f 6900 736e      	0x736e69004e5f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 106:	7274                	flw	fa3,100(a2)
    asm volatile(
 108:	6d5f 646f 7000      	0x7000646f6d5f
 10e:	6d796c6f          	jal	s8,96fe4 <_stack_start+0x86fe4>
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	755f 7562 0066      	0x667562755f
    asm volatile(
 11c:	625f 7361 0065      	0x657361625f
 122:	5f5f 6d74 685f      	0x685f6d745f5f
    asm volatile(
 128:	0072756f          	jal	a0,2792e <_stack_start+0x1792e>
}
 12c:	5f5f 6673 5f00      	0x5f0066735f5f
    switch(length%3) {
 132:	655f6e6f          	jal	t3,f6f86 <_stack_start+0xe6f86>
 136:	6978                	flw	fa4,84(a0)
 138:	5f74                	lw	a3,124(a4)
 13a:	7261                	lui	tp,0xffff8
 13c:	5f007367          	0x5f007367
 140:	6b6f6f63          	bltu	t5,s6,7fe <ext_euclid+0x132>
            for (i = 0; i < (length / 3); i++) {
 144:	6569                	lui	a0,0x1a
    asm volatile(
 146:	5f00                	lw	s0,56(a4)
            for (i = 0; i < (length / 3); i++) {
 148:	735f 6c67 6575      	0x65756c67735f
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	7200                	flw	fs0,32(a2)
 150:	7365                	lui	t1,0xffff9
 152:	0031                	c.nop	12
 154:	6572                	flw	fa0,28(sp)
 156:	5f003273          	csrrc	tp,0x5f0,zero
 15a:	6c66                	flw	fs8,88(sp)
 15c:	6761                	lui	a4,0x18
            a1[length-1] = a1[length-1] % mod;
 15e:	695f0073          	0x695f0073
 162:	78635f73          	csrrwi	t5,0x786,6
 166:	0061                	c.nop	24
 168:	735f 6474 6e69      	0x6e696474735f
 16e:	5f00                	lw	s0,56(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	6c62                	flw	fs8,24(sp)
 172:	7a69736b          	0x7a69736b
 176:	0065                	c.nop	25
 178:	7270                	flw	fa2,100(a2)
    asm volatile(
 17a:	6375646f          	jal	s0,56fb0 <_stack_start+0x46fb0>
            for (i = 0; i < ((length-1) / 3); i++) {
 17e:	0074                	addi	a3,sp,12
            a1[length-1] = a1[length-1] % mod;
 180:	6f70                	flw	fa2,92(a4)
            a1[length-2] = a1[length-2] % mod;
 182:	796c                	flw	fa1,116(a0)
 184:	6964                	flw	fs1,84(a0)
 186:	0076                	c.slli	zero,0x1d
 188:	6f70                	flw	fa2,92(a4)
 18a:	796c                	flw	fa1,116(a0)
 18c:	0066                	c.slli	zero,0x19
} //end of function
 18e:	635f 7476 7562      	0x75627476635f
    asm volatile(
 194:	0066                	c.slli	zero,0x19
 196:	6f5f 6666 6573      	0x657366666f5f
            for (i = 0; i < (length / 3); i++) {
 19c:	0074                	addi	a3,sp,12
    asm volatile(
 19e:	6d5f 7362 7472      	0x747273626d5f
 1a4:	7363776f          	jal	a4,378da <_stack_start+0x278da>
            for (i = 0; i < ((length-1) / 3); i++) {
 1a8:	735f 6174 6574      	0x65746174735f
    asm volatile(
 1ae:	5f00                	lw	s0,56(a4)
 1b0:	626d                	lui	tp,0x1b
 1b2:	6c72                	flw	fs8,28(sp)
 1b4:	6e65                	lui	t3,0x19
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	735f 6174 6574      	0x65746174735f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1bc:	5f00                	lw	s0,56(a4)
 1be:	6e66                	flw	ft8,88(sp)
 1c0:	7261                	lui	tp,0xffff8
    int line[size_b][size_a + size_b];
 1c2:	6e007367          	0x6e007367
 1c6:	7274                	flw	fa3,100(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	5f75                	li	t5,-3
 1ca:	6564                	flw	fs1,76(a0)
    int line[size_b][size_a + size_b];
 1cc:	70796563          	bltu	s2,t2,8d6 <ext_euclid+0x20a>
 1d0:	0074                	addi	a3,sp,12
 1d2:	665f 736e 5f00      	0x5f00736e665f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1d8:	6e676973          	csrrsi	s2,0x6e6,14
    int pola[size_a];
 1dc:	5f00                	lw	s0,56(a4)
 1de:	6c66                	flw	fs8,88(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e0:	5f6b636f          	jal	t1,b67d6 <_stack_start+0xa67d6>
 1e4:	0074                	addi	a3,sp,12
 1e6:	735f 6474 7265      	0x72656474735f
    int line[size_b][size_a + size_b];
 1ec:	0072                	c.slli	zero,0x1c
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	425f 6769 6e69      	0x6e696769425f
    int line[size_b][size_a + size_b];
 1f4:	0074                	addi	a3,sp,12
    int pola[size_a];
 1f6:	675f 6d61 616d      	0x616d6d61675f
    int line[size_b][size_a + size_b];
 1fc:	735f 6769 676e      	0x676e6769735f
    int pola[size_a];
 202:	6d61                	lui	s10,0x18
    int polb[size_b];
 204:	7000                	flw	fs0,32(s0)
 206:	52796c6f          	jal	s8,96f2c <_stack_start+0x86f2c>
    int pola[size_a];
 20a:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 20c:	6572                	flw	fa0,28(sp)
 20e:	6461                	lui	s0,0x18
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 210:	5f00                	lw	s0,56(a4)
    int pola[size_a];
 212:	6572                	flw	fa0,28(sp)
 214:	746c7573          	csrrci	a0,0x746,24
    int line[size_b][size_a + size_b];
 218:	6b5f 5f00 745f      	0x745f5f006b5f
            line[i][j] = 0;
 21e:	006d                	c.nop	27
 220:	6564                	flw	fs1,76(a0)
 222:	756e                	flw	fa0,248(sp)
    for (i = 0; i < size_b; ++i){
 224:	5f6d                	li	t5,-5
 226:	6574                	flw	fa3,76(a0)
            product[j] = 0;
 228:	706d                	c.lui	zero,0xffffb
 22a:	5f00                	lw	s0,56(a4)
 22c:	775f 6863 0062      	0x626863775f
    for (i = 0; i < size_b; ++i){
 232:	6572                	flw	fa0,28(sp)
    array_equ(pola,a,size_a);
 234:	746c7573          	csrrci	a0,0x746,24
 238:	006e6f6b          	0x6e6f6b
 23c:	735f 6474 756f      	0x756f6474735f
 242:	0074                	addi	a3,sp,12
 244:	635f 7476 656c      	0x656c7476635f
 24a:	006e                	c.slli	zero,0x1b
    array_mod(pola,mod,size_a);
 24c:	72636573          	csrrsi	a0,0x726,6
 250:	7465                	lui	s0,0xffff9
 252:	6b5f 7965 665f      	0x665f79656b5f
    array_equ(polb,b,size_b);
 258:	0071                	c.nop	28
 25a:	665f 6c69 0065      	0x656c69665f
    array_mod(polb,mod,size_b);
 260:	6572                	flw	fa0,28(sp)
 262:	7574                	flw	fa3,108(a0)
 264:	6e72                	flw	ft8,28(sp)
 266:	615f 6464 6572      	0x65726464615f
    if(star_mult == 1){
 26c:	00317373          	csrrci	t1,fcsr,2
 270:	6572                	flw	fa0,28(sp)
 272:	7574                	flw	fa3,108(a0)
 274:	6e72                	flw	ft8,28(sp)
 276:	615f 6464 6572      	0x65726464615f
 27c:	00327373          	csrrci	t1,fcsr,4
 280:	6572                	flw	fa0,28(sp)
 282:	7574                	flw	fa3,108(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 284:	6e72                	flw	ft8,28(sp)
 286:	615f 6464 6572      	0x65726464615f
            product[j] = 0;
 28c:	00337373          	csrrci	t1,fcsr,6
 290:	6572                	flw	fa0,28(sp)
            line[i][j] = 0;
 292:	7574                	flw	fa3,108(a0)
 294:	6e72                	flw	ft8,28(sp)
            product[j] = 0;
 296:	615f 6464 6572      	0x65726464615f
        for(j = 0; j < size_a + size_b -1; ++j){
 29c:	00347373          	csrrci	t1,fcsr,8
 2a0:	6e5f 6f69 7362      	0x73626f696e5f
    for (i = 0; i < size_b; ++i){
 2a6:	7200                	flw	fs0,32(a2)
 2a8:	7465                	lui	s0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 2aa:	7275                	lui	tp,0xffffd
 2ac:	5f6e                	lw	t5,248(sp)
    if(star_mult == 1){
 2ae:	6461                	lui	s0,0x18
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	7264                	flw	fs1,100(a2)
 2b2:	7365                	lui	t1,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	72003673          	csrrc	a2,0x720,zero
    for (i = 0; i < size_b; ++i){
 2b8:	7465                	lui	s0,0xffff9
 2ba:	7275                	lui	tp,0xffffd
 2bc:	5f6e                	lw	t5,248(sp)
 2be:	6461                	lui	s0,0x18
 2c0:	7264                	flw	fs1,100(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 2c2:	7365                	lui	t1,0xffff9
 2c4:	73003773          	csrrc	a4,0x730,zero
    array_mod(product,mod,(size_a+size_b-1));
 2c8:	6f68                	flw	fa0,92(a4)
 2ca:	7472                	flw	fs0,60(sp)
 2cc:	7520                	flw	fs0,104(a0)
 2ce:	736e                	flw	ft6,248(sp)
 2d0:	6769                	lui	a4,0x1a
 2d2:	656e                	flw	fa0,216(sp)
 2d4:	2064                	fld	fs1,192(s0)
}
 2d6:	6e69                	lui	t3,0x1a
 2d8:	0074                	addi	a3,sp,12
 2da:	615f 6574 6978      	0x69786574615f
 2e0:	3074                	fld	fa3,224(s0)
 2e2:	5f00                	lw	s0,56(a4)
 2e4:	6e676973          	csrrsi	s2,0x6e6,14
 2e8:	6c61                	lui	s8,0x18
 2ea:	625f 6675 5f00      	0x5f006675625f
 2f0:	7361                	lui	t1,0xffff8
 2f2:	6d697463          	bgeu	s2,s6,9ba <generate_keys+0xda>
 2f6:	5f65                	li	t5,-7
 2f8:	7562                	flw	fa0,56(sp)
 2fa:	0066                	c.slli	zero,0x19
 2fc:	725f 7365 6c75      	0x6c757365725f
                line[size_b-1-j][k] = pola[k]*polb[j];
 302:	0074                	addi	a3,sp,12
 304:	5f5f 6377 0068      	0x6863775f5f
 30a:	746e6977          	0x746e6977
 30e:	745f 6700 6e65      	0x6e656700745f
 314:	7265                	lui	tp,0xffff9
 316:	7461                	lui	s0,0xffff8
            for (k = size_a-1; k >= 0; k = k-1 ){
 318:	5f65                	li	t5,-7
 31a:	7379656b          	0x7379656b
        for (j = size_b -1; j >= 0; j = j-1){
 31e:	5f00                	lw	s0,56(a4)
 320:	625f 6975 746c      	0x746c6975625f
            for (k = size_a-1; k >= 0; k = k-1 ){
 326:	6e69                	lui	t3,0x1a
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 328:	6d5f 6d65 7063      	0x70636d656d5f
 32e:	0079                	c.nop	30
 330:	6c5f 636f 006b      	0x6b636f6c5f
 336:	544e                	lw	s0,240(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 338:	5552                	lw	a0,52(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 33a:	345f 5f38 6962      	0x69625f38345f
            for (k = size_a-1; k >= 0; k = k-1 ){
 340:	4d74                	lw	a3,92(a0)
 342:	632e                	flw	ft6,200(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 344:	7000                	flw	fs0,32(s0)
 346:	6f72                	flw	ft10,28(sp)
 348:	7564                	flw	fs1,108(a0)
 34a:	00327463          	bgeu	tp,gp,352 <polymult+0x198>
        for(j = 0; j < size_a + size_b -1; ++j){
 34e:	7865                	lui	a6,0xffff9
 350:	5f74                	lw	a3,124(a4)
            line[i][j] = line[i][j] % mod;
 352:	7565                	lui	a0,0xffff9
 354:	64696c63          	bltu	s2,t1,9ac <generate_keys+0xcc>
 358:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 35a:	74697277          	0x74697277
    for (i = 0; i < size_b; ++i){
 35e:	0065                	c.nop	25
 360:	5f5f 6d74 795f      	0x795f6d745f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 366:	6165                	addi	sp,sp,112
 368:	0072                	c.slli	zero,0x1c
            product[j] += line[i][j];
 36a:	6f70                	flw	fa2,92(a4)
 36c:	626c                	flw	fa1,68(a2)
 36e:	7200                	flw	fs0,32(a2)
        for(i = 0; i < size_b; ++i){
 370:	6e61                	lui	t3,0x18
            product[j] += line[i][j];
 372:	6f64                	flw	fs1,92(a4)
 374:	5f6d                	li	t5,-5
 376:	6176                	flw	ft2,92(sp)
 378:	006c                	addi	a1,sp,12
 37a:	6e5f 616d 6c6c      	0x6c6c616d6e5f
        for(i = 0; i < size_b; ++i){
 380:	6c00636f          	jal	t1,6a40 <_stack_len+0x2a40>
    for(j = 0; j < size_a + size_b -1; ++j){
 384:	20676e6f          	jal	t3,7658a <_stack_start+0x6658a>
        for(i = 0; i < size_b; ++i){
 388:	6f64                	flw	fs1,92(a4)
 38a:	6275                	lui	tp,0x1d
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 38c:	656c                	flw	fa1,76(a0)
    int line[size_b][size_a + size_b];
 38e:	5f00                	lw	s0,56(a4)
 390:	656e                	flw	fa0,216(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 392:	7478                	flw	fa4,108(s0)
 394:	0066                	c.slli	zero,0x19
 396:	7261                	lui	tp,0xffff8
 398:	6172                	flw	ft2,28(sp)
 39a:	5f79                	li	t5,-2
    int line[size_b][size_a + size_b];
 39c:	7165                	addi	sp,sp,-400
 39e:	0075                	c.nop	29
 3a0:	656d                	lui	a0,0x1b
 3a2:	67617373          	csrrci	t1,0x676,2
 3a6:	0065                	c.nop	25
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3a8:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 3ae:	72006e6f          	jal	t3,6ace <_stack_len+0x2ace>
 3b2:	7465                	lui	s0,0xffff9
 3b4:	7275                	lui	tp,0xffffd
 3b6:	5f6e                	lw	t5,248(sp)
 3b8:	6461                	lui	s0,0x18
    int line[size_b][size_a + size_b];
 3ba:	7264                	flw	fs1,100(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3bc:	7365                	lui	t1,0xffff9
 3be:	5f003573          	csrrc	a0,0x5f0,zero
    int line[size_b][size_a + size_b];
 3c2:	7461                	lui	s0,0xffff8
 3c4:	7865                	lui	a6,0xffff9
    int pola[size_a];
 3c6:	7469                	lui	s0,0xffffa
 3c8:	7300                	flw	fs0,32(a4)
 3ca:	6275                	lui	tp,0x1d
 3cc:	6174706f          	j	481e2 <_stack_start+0x381e2>
 3d0:	6772                	flw	fa4,28(sp)
 3d2:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 3d4:	735f 6964 6964      	0x69646964735f
    int pola[size_a];
 3da:	696e                	flw	fs2,216(sp)
    int polb[size_b];
 3dc:	0074                	addi	a3,sp,12
 3de:	6f5f 6666 745f      	0x745f66666f5f
    int line[size_b][size_a + size_b];
 3e4:	4500                	lw	s0,8(a0)
 3e6:	636e                	flw	ft6,216(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 3e8:	4d5f 7365 6173      	0x617373654d5f
    int polb[size_b];
 3ee:	63006567          	0x63006567
    for (i = 0; i < size_b; ++i){
 3f2:	72746e6f          	jal	t3,47318 <_stack_start+0x37318>
            product2[j] = 0;
 3f6:	00526c6f          	jal	s8,26bfa <_stack_start+0x16bfa>
 3fa:	665f 6572 6c65      	0x6c656572665f
    for (i = 0; i < size_b; ++i){
 400:	7369                	lui	t1,0xffffa
    array_equ(pola,a,size_a);
 402:	0074                	addi	a3,sp,12
 404:	6972                	flw	fs2,28(sp)
 406:	676e                	flw	fa4,216(sp)
 408:	705f 6c6f 0079      	0x796c6f705f
    array_equ(polb,b,size_b);
 40e:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 414:	4552                	lw	a0,20(sp)
 416:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
    if(star_mult == 1){
 41a:	5649                	li	a2,-14
 41c:	5f45                	li	t5,-15
 41e:	0054                	addi	a3,sp,4
 420:	6974                	flw	fa3,84(a0)
 422:	315f 7400 5f69      	0x5f697400315f
 428:	0032                	c.slli	zero,0xc
 42a:	6e75                	lui	t3,0x1d
        for (j = size_b -1; j >= 0; j = j-1){
 42c:	6e676973          	csrrsi	s2,0x6e6,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 430:	6465                	lui	s0,0x19
 432:	6320                	flw	fs0,64(a4)
            product2[j] = 0;
 434:	6168                	flw	fa0,68(a0)
 436:	0072                	c.slli	zero,0x1c
 438:	6971                	lui	s2,0x1c
            line[i][j] = 0;
 43a:	315f 5f00 656e      	0x656e5f00315f
            product2[j] = 0;
 440:	685f0077          	0x685f0077
        for(j = 0; j < size_a + size_b -1; ++j){
 444:	655f 7272 6f6e      	0x6f6e7272655f
    for (i = 0; i < size_b; ++i){
 44a:	7300                	flw	fs0,32(a4)
 44c:	6f68                	flw	fa0,92(a4)
 44e:	7472                	flw	fs0,60(sp)
 450:	6920                	flw	fs0,80(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 452:	746e                	flw	fs0,248(sp)
 454:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 456:	745f 5f6d 6479      	0x64795f6d745f
 45c:	7961                	lui	s2,0xffff8
 45e:	5f00                	lw	s0,56(a4)
 460:	735f 7562 0066      	0x667562735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 466:	665f 616c 7367      	0x7367616c665f
                line[size_b-1-j][k] = pola[k]*polb[j];
 46c:	0032                	c.slli	zero,0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
 46e:	695f 626f 0073      	0x73626f695f
        for (j = size_b -1; j >= 0; j = j-1){
 474:	5f5f 4946 454c      	0x454c49465f5f
 47a:	5f00                	lw	s0,56(a4)
        for(j=0;j<size_a+size_b-1;++j){
 47c:	626d                	lui	tp,0x1b
    for(i=0;i<size_b;++i){
 47e:	74617473          	csrrci	s0,0x746,2
 482:	5f65                	li	t5,-7
 484:	0074                	addi	a3,sp,12
 486:	5f5f 4673 4c49      	0x4c4946735f5f
        for(j=0;j<size_a+size_b-1;++j){
 48c:	0045                	c.nop	17
 48e:	6d5f 7362 6174      	0x617473626d5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 494:	6574                	flw	fa3,76(a0)
 496:	5f00                	lw	s0,56(a4)
 498:	6172                	flw	ft2,28(sp)
 49a:	646e                	flw	fs0,216(sp)
 49c:	6e5f 7865 0074      	0x7478656e5f
 4a2:	6d5f 6c62 6e65      	0x6e656c626d5f
 4a8:	735f 6174 6574      	0x65746174735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 4ae:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 4b0:	6e69                	lui	t3,0x1a
 4b2:	695f0063          	beq	t5,s5,b32 <generate_keys+0x252>
 4b6:	646e                	flw	fs0,216(sp)
            product2[j] += line[i][j];
 4b8:	5f00                	lw	s0,56(a4)
 4ba:	6f6c                	flw	fa1,92(a4)
        for(j=0;j<size_a+size_b-1;++j){
 4bc:	656c6163          	bltu	s8,s6,afe <generate_keys+0x21e>
            product2[j] += line[i][j];
 4c0:	5f00                	lw	s0,56(a4)
 4c2:	635f 656c 6e61      	0x6e61656c635f
        for(j=0;j<size_a+size_b-1;++j){
 4c8:	7075                	c.lui	zero,0xffffd
 4ca:	5f00                	lw	s0,56(a4)
    for(i=0;i<size_b;++i){
 4cc:	6e75                	lui	t3,0x1d
 4ce:	63657073          	csrci	0x636,10
}
 4d2:	6669                	lui	a2,0x1a
 4d4:	6569                	lui	a0,0x1a
 4d6:	5f64                	lw	s1,124(a4)
 4d8:	6f6c                	flw	fa1,92(a4)
 4da:	656c6163          	bltu	s8,s6,b1c <generate_keys+0x23c>
 4de:	695f 666e 006f      	0x6f666e695f
 4e4:	6d5f 7861 6477      	0x647778616d5f
 4ea:	725f0073          	0x725f0073
 4ee:	6565                	lui	a0,0x19
 4f0:	746e                	flw	fs0,248(sp)
 4f2:	7300                	flw	fs0,32(a4)
 4f4:	6174                	flw	fa3,68(a0)
 4f6:	5f72                	lw	t5,60(sp)
 4f8:	756d                	lui	a0,0xffffb
 4fa:	746c                	flw	fa1,108(s0)
    int v[size_N];
 4fc:	5f00                	lw	s0,56(a4)
 4fe:	64656573          	csrrsi	a0,0x646,10
 502:	7200                	flw	fs0,32(a2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 504:	5f69                	li	t5,-6
 506:	0032                	c.slli	zero,0xc
 508:	5f5f 6f63 6e75      	0x6e756f635f5f
 50e:	0074                	addi	a3,sp,12
 510:	5f5f 6176 756c      	0x756c61765f5f
 516:	0065                	c.nop	25
 518:	735f 6565 006b      	0x6b6565735f
    int v[size_N];
 51e:	665f 6f70 5f73      	0x5f736f70665f
 524:	0074                	addi	a3,sp,12
 526:	656c                	flw	fa1,76(a0)
    int q[size_N];
 528:	676e                	flw	fa4,216(sp)
 52a:	6874                	flw	fa3,84(s0)
 52c:	5f00                	lw	s0,56(a4)
    int num_temp[size_N];
 52e:	745f 5f6d 696d      	0x696d5f6d745f
    int denum_temp[size_D];
 534:	006e                	c.slli	zero,0x1b
 536:	7570                	flw	fa2,108(a0)
 538:	6c62                	flw	fs8,24(sp)
    int num_temp[size_N];
 53a:	6369                	lui	t1,0x1a
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 53c:	6b5f 7965 6100      	0x610079656b5f
 542:	7272                	flw	ft4,60(sp)
    int v[size_N];
 544:	7961                	lui	s2,0xffff8
 546:	6d5f 646f 5f00      	0x5f00646f6d5f
	array_equ(num_temp,num,size_N);
 54c:	74727473          	csrrci	s0,0x747,4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 550:	6c5f6b6f          	jal	s6,f7414 <_stack_start+0xe7414>
    int denum_temp[size_D];
 554:	7361                	lui	t1,0xffff8
	array_equ(num_temp,num,size_N);
 556:	0074                	addi	a3,sp,12
	array_mod(num_temp, mod, size_N);
 558:	665f 746e 7079      	0x7079746e665f
 55e:	7365                	lui	t1,0xffff9
    int denum_temp[size_D];
 560:	7300                	flw	fs0,32(a4)
    array_equ(denum_temp,denum,size_D);
 562:	6365                	lui	t1,0x19
 564:	6572                	flw	fa0,28(sp)
 566:	5f74                	lw	a3,124(a4)
 568:	5f79656b          	0x5f79656b
    array_mod(denum_temp,mod,size_D);
 56c:	7066                	flw	ft0,120(sp)
 56e:	5f00                	lw	s0,56(a4)
 570:	6461                	lui	s0,0x18
    for (i = 0; i < size_N; ++i){
 572:	0064                	addi	s1,sp,12
 574:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
    for (i = size_D-1; i >= 0; i = i-1){
 57a:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
 57e:	315f 5f00 6567      	0x65675f00315f
    for (i = 0; i < size_N; ++i){
 584:	6474                	flw	fa3,76(s0)
 586:	7461                	lui	s0,0xffff8
        if ( (b_N*u)%mod == 1 )
 588:	5f65                	li	t5,-7
    for (u = 0; u < mod; ++u){
 58a:	7265                	lui	tp,0xffff9
 58c:	0072                	c.slli	zero,0x1c
 58e:	675f 6f6c 6162      	0x61626f6c675f
        q[i] = 0;
 594:	5f6c                	lw	a1,124(a4)
 596:	6d69                	lui	s10,0x1a
 598:	7570                	flw	fa2,108(a0)
        v[i] = 0;
 59a:	6572                	flw	fa0,28(sp)
        q[i] = 0;
 59c:	705f 7274 4700      	0x47007274705f
        v[i] = 0;
 5a2:	554e                	lw	a0,240(sp)
    for (i = 0; i < size_N; ++i){
 5a4:	4320                	lw	s0,64(a4)
 5a6:	3731                	jal	4b2 <polymult2+0x126>
        if( denum_temp[i] != 0 )
 5a8:	3920                	fld	fs0,112(a0)
    for (i = size_D-1; i >= 0; i = i-1){
 5aa:	322e                	fld	ft4,232(sp)
 5ac:	302e                	fld	ft0,232(sp)
        if ( (b_N*u)%mod == 1 )
 5ae:	2d20                	fld	fs0,88(a0)
 5b0:	616d                	addi	sp,sp,240
 5b2:	6372                	flw	ft6,28(sp)
 5b4:	3d68                	fld	fa0,248(a0)
 5b6:	7672                	flw	fa2,60(sp)
    for (u = 0; u < mod; ++u){
 5b8:	6d693233          	0x6d693233
        if( num_temp[i] != 0 )
 5bc:	6d2d2063          	0x6d2d2063
    for (i = size_N-1; i >= 0; i = i-1){
 5c0:	6261                	lui	tp,0x18
 5c2:	3d69                	jal	45c <polymult2+0xd0>
 5c4:	6c69                	lui	s8,0x1a
 5c6:	3370                	fld	fa2,224(a4)
 5c8:	2032                	fld	ft0,264(sp)
 5ca:	6d2d                	lui	s10,0xb
    while (d >= d2){
 5cc:	646f6d63          	bltu	t5,t1,c26 <ntru_encyrpt+0x2a>
	array_equ(result,q,size_N);
 5d0:	6c65                	lui	s8,0x19
 5d2:	6d3d                	lui	s10,0xf
 5d4:	6465                	lui	s0,0x19
 5d6:	6e61                	lui	t3,0x18
 5d8:	2079                	jal	666 <polydiv+0x16a>
 5da:	6d2d                	lui	s10,0xb
 5dc:	7574                	flw	fa3,108(a0)
    for(i = size_N; i < (2*size_N); ++i){
 5de:	656e                	flw	fa0,216(sp)
 5e0:	723d                	lui	tp,0xfffef
        result[i] = num_temp[i-size_N];
 5e2:	656b636f          	jal	t1,b6c38 <_stack_start+0xa6c38>
 5e6:	2074                	fld	fa3,192(s0)
 5e8:	672d                	lui	a4,0xb
    for(i = size_N; i < (2*size_N); ++i){
 5ea:	2d20                	fld	fs0,88(a0)
 5ec:	2d20734f          	0x2d20734f
}
 5f0:	7666                	flw	fa2,120(sp)
 5f2:	7369                	lui	t1,0xffffa
 5f4:	6269                	lui	tp,0x1a
 5f6:	6c69                	lui	s8,0x1a
 5f8:	7469                	lui	s0,0xffffa
 5fa:	3d79                	jal	498 <polymult2+0x10c>
 5fc:	6968                	flw	fa0,84(a0)
 5fe:	6464                	flw	fs1,76(s0)
 600:	6e65                	lui	t3,0x19
 602:	5f00                	lw	s0,56(a4)
 604:	6e75                	lui	t3,0x1d
 606:	7375                	lui	t1,0xffffd
 608:	6465                	lui	s0,0x19
 60a:	725f 6e61 0064      	0x646e61725f
 610:	696c                	flw	fa1,84(a0)
 612:	656e                	flw	fa0,216(sp)
 614:	5f00                	lw	s0,56(a4)
 616:	00736477          	0x736477
        v[(d-d2)] = u*r_d;
 61a:	5f5f 6d74 775f      	0x775f6d745f5f
 620:	6164                	flw	fs1,68(a0)
 622:	0079                	c.nop	30
	 array_mod(v, mod, size_N);
 624:	675f 756c 0065      	0x65756c675f
        v[(d-d2)] = u*r_d;
 62a:	6e69                	lui	t3,0x1a
	 array_mod(v, mod, size_N);
 62c:	5f727473          	csrrci	s0,0x5f7,4
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 630:	7165                	addi	sp,sp,-400
 632:	0075                	c.nop	29
 634:	746e                	flw	fs0,248(sp)
 636:	7572                	flw	fa0,60(sp)
 638:	655f 636e 7279      	0x7279636e655f
	array_mod(product, mod, size_N);
 63e:	7470                	flw	fa2,108(s0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 640:	5f00                	lw	s0,56(a4)
	array_mod(product, mod, size_N);
 642:	7a697373          	csrrci	t1,0x7a6,18
        for (i = 0; i < size_N; ++i){
 646:	5f65                	li	t5,-7
 648:	0074                	addi	a3,sp,12
 64a:	6c5f 3436 5f61      	0x5f6134366c5f
	array_mod(num_temp, mod, size_N);
 650:	7562                	flw	fa0,56(sp)
 652:	0066                	c.slli	zero,0x19
        for(i = 0; i < size_N; ++i){
 654:	6564                	flw	fs1,76(a0)
 656:	756e                	flw	fa0,248(sp)
 658:	006d                	c.nop	27
 65a:	735f 6769 665f      	0x665f6769735f
	array_mod(q, mod, size_N);
 660:	6e75                	lui	t3,0x1d
 662:	6e5f0063          	beq	t5,t0,d42 <ntru_deceypt+0x8e>
        for (i = size_N-1; i >= 0; i = i-1){
 666:	7562                	flw	fa0,56(sp)
 668:	0066                	c.slli	zero,0x19
 66a:	755f 756e 6573      	0x6573756e755f
 670:	0064                	addi	s1,sp,12
 672:	6d6f682f          	0x6d6f682f
            num_temp[i] = num_temp[i] - product[i];
 676:	2f65                	jal	e2e <memcpy+0x18>
 678:	6c65                	lui	s8,0x19
 67a:	6669                	lui	a2,0x1a
 67c:	756e                	flw	fa0,248(sp)
 67e:	2f72                	fld	ft10,280(sp)
        for (i = 0; i < size_N; ++i){
 680:	6544                	flw	fs1,12(a0)
 682:	6f746b73          	csrrsi	s6,0x6f7,8
            num_temp[i] = num_temp[i] - product[i];
 686:	2f70                	fld	fa2,216(a4)
 688:	696e6573          	csrrsi	a0,0x696,28
            q[i] = q[i] + v[i];
 68c:	705f726f          	jal	tp,f8590 <_stack_start+0xe8590>
 690:	6f72                	flw	ft10,28(sp)
 692:	656a                	flw	fa0,152(sp)
 694:	6d2d7463          	bgeu	s10,s2,d5c <ntru_deceypt+0xa8>
        for(i = 0; i < size_N; ++i){
 698:	7361                	lui	t1,0xffff8
            q[i] = q[i] + v[i];
 69a:	6574                	flw	fa3,76(a0)
 69c:	2f72                	fld	ft10,280(sp)
 69e:	6f2f7773          	csrrci	a4,0x6f2,30
            if( num_temp[i] != 0 )
 6a2:	636c                	flw	fa1,68(a4)
        for (i = size_N-1; i >= 0; i = i-1){
 6a4:	6d75                	lui	s10,0x1d
 6a6:	656c                	flw	fa1,76(a0)
            v[i] = 0;
 6a8:	5f72                	lw	t5,60(sp)
 6aa:	6579                	lui	a0,0x1e
 6ac:	696e                	flw	fs2,216(sp)
 6ae:	322e352f          	0x322e352f
        for (i = 0; i < size_N; ++i){
 6b2:	4328                	lw	a0,64(a4)
 6b4:	6e695f53          	0x6e695f53
 6b8:	665f 6e75 7463      	0x74636e75665f
        result[i] = num_temp[i-size_N];
 6be:	6f69                	lui	t5,0x1a
 6c0:	736e                	flw	ft6,248(sp)
 6c2:	2e29                	jal	9dc <generate_keys+0xfc>
 6c4:	6f6d                	lui	t5,0x1b
    for(i = size_N; i < (2*size_N); ++i){
 6c6:	2b64                	fld	fs1,208(a4)
 6c8:	7165                	addi	sp,sp,-400
 6ca:	0075                	c.nop	29
    int ri_2[size]; // MX-ring poly, a
 6cc:	657a6973          	csrrsi	s2,0x657,20
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6d0:	445f 5f00 745f      	0x745f5f00445f
 6d6:	5f6d                	li	t5,-5
 6d8:	7369                	lui	t1,0xffffa
 6da:	7364                	flw	fs1,100(a4)
 6dc:	0074                	addi	a3,sp,12
 6de:	6c5f 636f 6c61      	0x6c61636f6c5f
 6e4:	6974                	flw	fa3,84(a0)
 6e6:	656d                	lui	a0,0x1b
 6e8:	625f 6675 5f00      	0x5f006675625f
 6ee:	736f6c63          	bltu	t5,s6,e26 <memcpy+0x10>
    int ri_2[size]; // MX-ring poly, a
 6f2:	0065                	c.nop	25
 6f4:	725f 3834 5f00      	0x5f003834725f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6fa:	626d                	lui	tp,0x1b
 6fc:	6f74                	flw	fa3,92(a4)
    int ri[size];
 6fe:	735f6377          	0x735f6377
 702:	6174                	flw	fa3,68(a0)
    int ti_1[size]; // ti_1[0] = 1
 704:	6574                	flw	fa3,76(a0)
 706:	5f00                	lw	s0,56(a4)
 708:	3570                	fld	fa2,232(a0)
    int ti[size];
 70a:	616d0073          	0x616d0073
 70e:	6e69                	lui	t3,0x1a
    int qi_1[size];
 710:	5f00                	lw	s0,56(a4)
 712:	745f 5f6d 646d      	0x646d5f6d745f
    int temp[size];
 718:	7961                	lui	s2,0xffff8
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 71a:	7300                	flw	fs0,32(a4)
 71c:	7a69                	lui	s4,0xffffa
 71e:	5f65                	li	t5,-7
    int ri_2[size]; // MX-ring poly, a
 720:	0061                	c.nop	24
 722:	657a6973          	csrrsi	s2,0x657,20
    for (i = 0; i < size; ++i) {
 726:	625f 6300 7472      	0x74726300625f
        ti_2[i] = 0;
 72c:	2e30                	fld	fa2,88(a2)
 72e:	682f0053          	0x682f0053
    for (i = 0; i < size; ++i) {
 732:	2f656d6f          	jal	s10,56a28 <_stack_start+0x46a28>
    array_equ(ri_2,polyR,size);
 736:	6f74                	flw	fa3,92(a4)
 738:	6170                	flw	fa2,68(a0)
 73a:	636c                	flw	fa1,68(a4)
    array_equ(ri_1,polyf,size);
 73c:	7365442f          	0x7365442f
 740:	706f746b          	0x706f746b
    ti_1[0] = 1;
 744:	6f72702f          	0x6f72702f
 748:	656a                	flw	fa0,152(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 74a:	656c                	flw	fa1,76(a0)
 74c:	2f72                	fld	ft10,280(sp)
 74e:	75636c6f          	jal	s8,36ea4 <_stack_start+0x26ea4>
            ti[i] = ti_2[i] - temp[i];
 752:	2f6d                	jal	f0c <memset+0x18>
 754:	2e35                	jal	a90 <generate_keys+0x1b0>
 756:	6f6d                	lui	t5,0x1b
 758:	2b64                	fld	fs1,208(a4)
    array_mod(ri_2,mod,size);
 75a:	7165                	addi	sp,sp,-400
 75c:	0075                	c.nop	29
 75e:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
    array_mod(ri_1,mod,size);
 762:	5341                	li	t1,-16
 764:	3220                	fld	fs0,96(a2)
 766:	332e                	fld	ft6,232(sp)
 768:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x184>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0096                	slli	ra,ra,0x5
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	012e                	slli	sp,sp,0xb
  4a:	0000                	unimp
  4c:	008c                	addi	a1,sp,64
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	01ba                	slli	gp,gp,0xe
  5a:	0000                	unimp
  5c:	01d2                	slli	gp,gp,0x14
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4250                	lw	a2,4(a2)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0a98                	addi	a4,sp,336
  6c:	0b99                	addi	s7,s7,6
  6e:	944e                	add	s0,s0,s3
  70:	5806                	lw	a6,96(sp)
  72:	0288                	addi	a0,sp,320
  74:	0389                	addi	t2,t2,2
  76:	0795                	addi	a5,a5,5
  78:	0896                	slli	a7,a7,0x5
  7a:	0c9a0997          	auipc	s3,0xc9a0
  7e:	01810d9b          	0x1810d9b
  82:	0c42                	slli	s8,s8,0x10
  84:	0008                	0x8
  86:	0a00e603          	0xa00e603
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    switch(length%3) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
            for (i = 0; i < (length / 3); i++) {
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0054                	addi	a3,sp,4
  ae:	0000                	unimp
  b0:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0000                	unimp
  b4:	038c                	addi	a1,sp,448
  b6:	0000                	unimp
  b8:	0170                	addi	a2,sp,140
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4650                	lw	a2,12(a2)
  c0:	0795                	addi	a5,a5,5
            a1[length-1] = a2[length-1];
  c2:	9648                	0x9648
  c4:	9708                	0x9708
  c6:	6209                	lui	tp,0x2
  c8:	0288                	addi	a0,sp,320
  ca:	0389                	addi	t2,t2,2
  cc:	0492                	slli	s1,s1,0x4
  ce:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
  d2:	0a98                	addi	a4,sp,336
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b99                	addi	s7,s7,6
  d6:	0c9a                	slli	s9,s9,0x6
  d8:	01810d9b          	0x1810d9b
  dc:	0c42                	slli	s8,s8,0x10
  de:	0008                	0x8
  e0:	0c011603          	lh	a2,192(sp)
            a1[length-1] = a2[length-1];
  e4:	5002                	0x5002
            a1[length-2] = a2[length-2];
  e6:	c142                	sw	a6,128(sp)
  e8:	c842                	sw	a6,16(sp)
  ea:	c942                	sw	a6,144(sp)
  ec:	d242                	sw	a6,36(sp)
  ee:	d342                	sw	a6,164(sp)
} //end of function
  f0:	d442                	sw	a6,40(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	d542                	sw	a6,168(sp)
  f4:	d642                	sw	a6,44(sp)
    asm volatile(
  f6:	d742                	sw	a6,172(sp)
  f8:	d842                	sw	a6,48(sp)
  fa:	d942                	sw	a6,176(sp)
  fc:	da42                	sw	a6,52(sp)
  fe:	db42                	sw	a6,180(sp)
            for (i = 0; i < (length / 3); i++) {
 100:	0e4a                	slli	t3,t3,0x12
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0054                	addi	a3,sp,4
 106:	0000                	unimp
    asm volatile(
 108:	0000                	unimp
 10a:	0000                	unimp
 10c:	04fc                	addi	a5,sp,588
 10e:	0000                	unimp
 110:	01d0                	addi	a2,sp,196
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	0000                	unimp
 114:	0e46                	slli	t3,t3,0x11
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	4840                	lw	s0,20(s0)
 118:	0181                	addi	gp,gp,0
    asm volatile(
 11a:	0288                	addi	a0,sp,320
 11c:	0389                	addi	t2,t2,2
 11e:	0c42                	slli	s8,s8,0x10
 120:	0008                	0x8
 122:	9256                	add	tp,tp,s5
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	9304                	0x9304
 126:	9405                	srai	s0,s0,0x21
    asm volatile(
 128:	9506                	add	a0,a0,ra
 12a:	97089607          	0x97089607
    switch(length%3) {
 12e:	9809                	andi	s0,s0,-30
 130:	990a                	add	s2,s2,sp
 132:	9b0c9a0b          	0x9b0c9a0b
 136:	020d                	addi	tp,tp,3
 138:	0ad0                	addi	a2,sp,340
 13a:	020c                	addi	a1,sp,256
 13c:	4240                	lw	s0,4(a2)
 13e:	42c1                	li	t0,16
 140:	42c8                	lw	a0,4(a3)
            for (i = 0; i < (length / 3); i++) {
 142:	42c9                	li	t0,18
 144:	42d2                	lw	t0,20(sp)
    asm volatile(
 146:	42d442d3          	0x42d442d3
            for (i = 0; i < (length / 3); i++) {
 14a:	42d5                	li	t0,21
 14c:	42d6                	lw	t0,84(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
 14e:	42d842d7          	0x42d842d7
 152:	42d9                	li	t0,22
 154:	42da                	lw	t0,148(sp)
 156:	000e4adb          	0xe4adb
 15a:	0b42                	slli	s6,s6,0x10
 15c:	0054                	addi	a3,sp,4
            a1[length-1] = a1[length-1] % mod;
 15e:	0000                	unimp
 160:	0000                	unimp
 162:	0000                	unimp
 164:	06cc                	addi	a1,sp,836
 166:	0000                	unimp
 168:	0214                	addi	a3,sp,256
 16a:	0000                	unimp
 16c:	0e46                	slli	t3,t3,0x11
 16e:	5e50                	lw	a2,60(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
 170:	0288                	addi	a0,sp,320
 172:	0389                	addi	t2,t2,2
 174:	0492                	slli	s1,s1,0x4
 176:	06940593          	addi	a1,s0,105
    asm volatile(
 17a:	0795                	addi	a5,a5,5
            for (i = 0; i < ((length-1) / 3); i++) {
 17c:	0896                	slli	a7,a7,0x5
 17e:	0a980997          	auipc	s3,0xa980
            a1[length-2] = a1[length-2] % mod;
 182:	0b99                	addi	s7,s7,6
 184:	0c9a                	slli	s9,s9,0x6
 186:	01810d9b          	0x1810d9b
 18a:	0c42                	slli	s8,s8,0x10
 18c:	0008                	0x8
} //end of function
 18e:	0a012e03          	lw	t3,160(sp)
    asm volatile(
 192:	020c                	addi	a1,sp,256
 194:	4250                	lw	a2,4(a2)
 196:	42c1                	li	t0,16
 198:	42c8                	lw	a0,4(a3)
            for (i = 0; i < (length / 3); i++) {
 19a:	42c9                	li	t0,18
 19c:	42d2                	lw	t0,20(sp)
    asm volatile(
 19e:	42d442d3          	0x42d442d3
 1a2:	42d5                	li	t0,21
 1a4:	42d6                	lw	t0,84(sp)
 1a6:	42d842d7          	0x42d842d7
            for (i = 0; i < ((length-1) / 3); i++) {
 1aa:	42d9                	li	t0,22
    asm volatile(
 1ac:	42da                	lw	t0,148(sp)
 1ae:	000e4adb          	0xe4adb
 1b2:	0b42                	slli	s6,s6,0x10
 1b4:	0058                	addi	a4,sp,4
            for (i = 0; i < ((length-2) / 3); i++) {
 1b6:	0000                	unimp
 1b8:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ba:	0000                	unimp
 1bc:	08e0                	addi	s0,sp,92
 1be:	0000                	unimp
 1c0:	031c                	addi	a5,sp,384
    int line[size_b][size_a + size_b];
 1c2:	0000                	unimp
 1c4:	0e42                	slli	t3,t3,0x10
 1c6:	0480                	addi	s0,sp,576
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c8:	814c                	0x814c
 1ca:	8801                	andi	s0,s0,0
    int line[size_b][size_a + size_b];
 1cc:	8902                	jr	s2
 1ce:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 1d2:	7000                	flw	fs0,32(s0)
 1d4:	0492                	slli	s1,s1,0x4
 1d6:	06940593          	addi	a1,s0,105
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1da:	0795                	addi	a5,a5,5
    int pola[size_a];
 1dc:	0896                	slli	a7,a7,0x5
 1de:	0a980997          	auipc	s3,0xa980
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1e2:	0b990d9b          	0xb990d9b
 1e6:	0c9a                	slli	s9,s9,0x6
 1e8:	0a01f203          	0xa01f203
    int line[size_b][size_a + size_b];
 1ec:	020c                	addi	a1,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1ee:	0480                	addi	s0,sp,576
 1f0:	c144                	sw	s1,4(a0)
 1f2:	c844                	sw	s1,20(s0)
    int line[size_b][size_a + size_b];
 1f4:	c944                	sw	s1,20(a0)
    int pola[size_a];
 1f6:	d244                	sw	s1,36(a2)
 1f8:	d344                	sw	s1,36(a4)
    int line[size_b][size_a + size_b];
 1fa:	d444                	sw	s1,44(s0)
 1fc:	d544                	sw	s1,44(a0)
 1fe:	d644                	sw	s1,44(a2)
    int pola[size_a];
 200:	d744                	sw	s1,44(a4)
 202:	d844                	sw	s1,52(s0)
    int polb[size_b];
 204:	d944                	sw	s1,52(a0)
 206:	da44                	sw	s1,52(a2)
 208:	db44                	sw	s1,52(a4)
    int pola[size_a];
 20a:	0e4c                	addi	a1,sp,788
    int polb[size_b];
 20c:	4200                	lw	s0,0(a2)
 20e:	0038000b          	0x38000b
    int pola[size_a];
 212:	0000                	unimp
 214:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 216:	0000                	unimp
    int line[size_b][size_a + size_b];
 218:	0bfc                	addi	a5,sp,476
 21a:	0000                	unimp
    int polb[size_b];
 21c:	00b8                	addi	a4,sp,72
            line[i][j] = 0;
 21e:	0000                	unimp
 220:	0e42                	slli	t3,t3,0x10
 222:	01e0                	addi	s0,sp,204
    for (i = 0; i < size_b; ++i){
 224:	8850                	0x8850
 226:	8902                	jr	s2
            product[j] = 0;
 228:	95049203          	lh	tp,-1712(s1)
 22c:	01816207          	0x1816207
    for (i = 0; i < size_b; ++i){
 230:	06940593          	addi	a1,s0,105
    array_equ(pola,a,size_a);
 234:	5602                	lw	a2,32(sp)
 236:	c10a                	sw	sp,128(sp)
 238:	c842                	sw	a6,16(sp)
 23a:	c94e                	sw	s3,144(sp)
 23c:	d242                	sw	a6,36(sp)
 23e:	d342                	sw	a6,164(sp)
 240:	d442                	sw	a6,40(sp)
 242:	d542                	sw	a6,168(sp)
 244:	0e42                	slli	t3,t3,0x10
 246:	4200                	lw	s0,0(a2)
 248:	0000000b          	0xb
    array_mod(pola,mod,size_a);
 24c:	0044                	addi	s1,sp,4
 24e:	0000                	unimp
 250:	0000                	unimp
 252:	0000                	unimp
    array_equ(polb,b,size_b);
 254:	0cb4                	addi	a3,sp,600
 256:	0000                	unimp
 258:	00ec                	addi	a1,sp,76
 25a:	0000                	unimp
 25c:	0e42                	slli	t3,t3,0x10
 25e:	4430                	lw	a2,72(s0)
    array_mod(polb,mod,size_b);
 260:	0288                	addi	a0,sp,320
 262:	0694                	addi	a3,sp,832
 264:	984a                	add	a6,a6,s2
 266:	4c0a                	lw	s8,128(sp)
    if(star_mult == 1){
 268:	924c0593          	addi	a1,s8,-1756
 26c:	9604                	0x9604
 26e:	5a08                	lw	a0,48(a2)
 270:	0181                	addi	gp,gp,0
 272:	0389                	addi	t2,t2,2
 274:	0795                	addi	a5,a5,5
 276:	52020997          	auipc	s3,0x52020
 27a:	c10a                	sw	sp,128(sp)
 27c:	c842                	sw	a6,16(sp)
 27e:	c94e                	sw	s3,144(sp)
 280:	d242                	sw	a6,36(sp)
 282:	d342                	sw	a6,164(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 284:	d442                	sw	a6,40(sp)
 286:	d542                	sw	a6,168(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	d642                	sw	a6,44(sp)
 28a:	d742                	sw	a6,172(sp)
            product[j] = 0;
 28c:	d842                	sw	a6,48(sp)
 28e:	0e42                	slli	t3,t3,0x10
 290:	4200                	lw	s0,0(a2)
            line[i][j] = 0;
 292:	0020000b          	0x20000b
            product[j] = 0;
 296:	0000                	unimp
 298:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	0000                	unimp
 29c:	0f9c                	addi	a5,sp,976
 29e:	0000                	unimp
 2a0:	00f8                	addi	a4,sp,76
    for (i = 0; i < size_b; ++i){
 2a2:	0000                	unimp
 2a4:	0e44                	addi	s1,sp,788
 2a6:	08b0                	addi	a2,sp,88
 2a8:	8156                	mv	sp,s5
        for(j = 0; j < size_a + size_b -1; ++j){
 2aa:	8801                	andi	s0,s0,0
 2ac:	0202                	c.slli64	tp
    if(star_mult == 1){
 2ae:	0ac8                	addi	a0,sp,340
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	44c1                	li	s1,16
 2b2:	46c8                	lw	a0,12(a3)
        for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	000e                	c.slli	zero,0x3
    for (i = 0; i < size_b; ++i){
 2b6:	0b42                	slli	s6,s6,0x10

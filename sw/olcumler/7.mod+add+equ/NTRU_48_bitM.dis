
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  7c:	4ed0006f          	j	d68 <default_exc_handler>
  80:	4ed0006f          	j	d6c <reset_handler>
  84:	4e50006f          	j	d68 <default_exc_handler>
  88:	4e10006f          	j	d68 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78f63          	beq	a5,a3,d8 <array_add+0x46>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_add+0x20>
      a4:	ebb1                	bnez	a5,f8 <array_add+0x66>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c763          	blt	a5,a2,fa <array_add+0x68>
      b0:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
	    break;      
	case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	06d7c063          	blt	a5,a3,11e <array_add+0x8c>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c50733          	add	a4,a0,a2
      ca:	00c586b3          	add	a3,a1,a2
      ce:	431c                	lw	a5,0(a4)
      d0:	4294                	lw	a3,0(a3)
      d2:	97b6                	add	a5,a5,a3
      d4:	c31c                	sw	a5,0(a4)
      d6:	a811                	j	ea <array_add+0x58>
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	fff60693          	addi	a3,a2,-1
      dc:	02e6c6b3          	div	a3,a3,a4
      e0:	4781                	li	a5,0
      e2:	48b1                	li	a7,12
      e4:	02d7c463          	blt	a5,a3,10c <array_add+0x7a>
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	1671                	addi	a2,a2,-4
      ec:	9532                	add	a0,a0,a2
      ee:	962e                	add	a2,a2,a1
      f0:	411c                	lw	a5,0(a0)
      f2:	4218                	lw	a4,0(a2)
      f4:	97ba                	add	a5,a5,a4
      f6:	c11c                	sw	a5,0(a0)
	    break;
    } //end of switch case
} //end of function
      f8:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	03078733          	mul	a4,a5,a6
    asm volatile(
      fe:	00e506b3          	add	a3,a0,a4
     102:	972e                	add	a4,a4,a1
     104:	06e6f70b          	0x6e6f70b
            for (i = 0; i < (length / 3); i++) {
     108:	0785                	addi	a5,a5,1
     10a:	b74d                	j	ac <array_add+0x1a>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	03178733          	mul	a4,a5,a7
    asm volatile(
     110:	00e50833          	add	a6,a0,a4
     114:	972e                	add	a4,a4,a1
     116:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0785                	addi	a5,a5,1
     11c:	b7e1                	j	e4 <array_add+0x52>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	03178733          	mul	a4,a5,a7
    asm volatile(
     122:	00e50833          	add	a6,a0,a4
     126:	972e                	add	a4,a4,a1
     128:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0785                	addi	a5,a5,1
     12e:	bf41                	j	be <array_add+0x2c>

00000130 <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
     130:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
     134:	8082                	ret

00000136 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
     136:	470d                	li	a4,3
     138:	02e667b3          	rem	a5,a2,a4
     13c:	4685                	li	a3,1
     13e:	02d78d63          	beq	a5,a3,178 <array_equ+0x42>
     142:	4689                	li	a3,2
     144:	00d78963          	beq	a5,a3,156 <array_equ+0x20>
     148:	e7b1                	bnez	a5,194 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     14a:	02e64633          	div	a2,a2,a4
     14e:	4831                	li	a6,12
     150:	04c7c363          	blt	a5,a2,196 <array_equ+0x60>
     154:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	ffe60693          	addi	a3,a2,-2
     15a:	02e6c6b3          	div	a3,a3,a4
     15e:	4781                	li	a5,0
     160:	48b1                	li	a7,12
     162:	04d7cc63          	blt	a5,a3,1ba <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
     166:	060a                	slli	a2,a2,0x2
     168:	1671                	addi	a2,a2,-4
     16a:	00c587b3          	add	a5,a1,a2
     16e:	4398                	lw	a4,0(a5)
     170:	00c507b3          	add	a5,a0,a2
     174:	c398                	sw	a4,0(a5)
     176:	a811                	j	18a <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	fff60693          	addi	a3,a2,-1
     17c:	02e6c6b3          	div	a3,a3,a4
     180:	4781                	li	a5,0
     182:	48b1                	li	a7,12
     184:	02d7c263          	blt	a5,a3,1a8 <array_equ+0x72>
            a1[length-1] = a2[length-1];
     188:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
     18a:	1671                	addi	a2,a2,-4
     18c:	95b2                	add	a1,a1,a2
     18e:	419c                	lw	a5,0(a1)
     190:	962a                	add	a2,a2,a0
     192:	c21c                	sw	a5,0(a2)
	    break;
    } //end of switch case
} //end of function
     194:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	03078733          	mul	a4,a5,a6
    asm volatile(
     19a:	00e506b3          	add	a3,a0,a4
     19e:	972e                	add	a4,a4,a1
     1a0:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     1a4:	0785                	addi	a5,a5,1
     1a6:	b76d                	j	150 <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	03178733          	mul	a4,a5,a7
    asm volatile(
     1ac:	00e50833          	add	a6,a0,a4
     1b0:	972e                	add	a4,a4,a1
     1b2:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0785                	addi	a5,a5,1
     1b8:	b7f1                	j	184 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	03178733          	mul	a4,a5,a7
    asm volatile(
     1be:	00e50833          	add	a6,a0,a4
     1c2:	972e                	add	a4,a4,a1
     1c4:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	0785                	addi	a5,a5,1
     1ca:	bf61                	j	162 <array_equ+0x2c>

000001cc <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
     1cc:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
     1d0:	8082                	ret

000001d2 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    switch(length%3) {
     1d2:	470d                	li	a4,3
     1d4:	02e667b3          	rem	a5,a2,a4
     1d8:	4685                	li	a3,1
     1da:	02d78d63          	beq	a5,a3,214 <array_mod+0x42>
     1de:	4689                	li	a3,2
     1e0:	00d78963          	beq	a5,a3,1f2 <array_mod+0x20>
     1e4:	e7b9                	bnez	a5,232 <array_mod+0x60>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     1e6:	02e64633          	div	a2,a2,a4
    asm volatile(
     1ea:	46b1                	li	a3,12
            for (i = 0; i < (length / 3); i++) {
     1ec:	04c7c463          	blt	a5,a2,234 <array_mod+0x62>
     1f0:	8082                	ret
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     1f2:	ffe60693          	addi	a3,a2,-2
     1f6:	02e6c6b3          	div	a3,a3,a4
     1fa:	4781                	li	a5,0
    asm volatile(
     1fc:	4831                	li	a6,12
            for (i = 0; i < ((length-2) / 3); i++) {
     1fe:	04d7c963          	blt	a5,a3,250 <array_mod+0x7e>
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
     202:	060a                	slli	a2,a2,0x2
     204:	1671                	addi	a2,a2,-4
     206:	00c50733          	add	a4,a0,a2
     20a:	431c                	lw	a5,0(a4)
     20c:	02b7e7b3          	rem	a5,a5,a1
     210:	c31c                	sw	a5,0(a4)
     212:	a811                	j	226 <array_mod+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     214:	fff60693          	addi	a3,a2,-1
     218:	02e6c6b3          	div	a3,a3,a4
     21c:	4781                	li	a5,0
    asm volatile(
     21e:	4831                	li	a6,12
            for (i = 0; i < ((length-1) / 3); i++) {
     220:	02d7c163          	blt	a5,a3,242 <array_mod+0x70>
            a1[length-1] = a1[length-1] % mod;
     224:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] % mod;
     226:	1671                	addi	a2,a2,-4
     228:	962a                	add	a2,a2,a0
     22a:	421c                	lw	a5,0(a2)
     22c:	02b7e5b3          	rem	a1,a5,a1
     230:	c20c                	sw	a1,0(a2)
	    break;
    } //end of switch case
} //end of function
     232:	8082                	ret
    asm volatile(
     234:	02d78733          	mul	a4,a5,a3
     238:	972a                	add	a4,a4,a0
     23a:	0cb7770b          	0xcb7770b
            for (i = 0; i < (length / 3); i++) {
     23e:	0785                	addi	a5,a5,1
     240:	b775                	j	1ec <array_mod+0x1a>
    asm volatile(
     242:	03078733          	mul	a4,a5,a6
     246:	972a                	add	a4,a4,a0
     248:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-1) / 3); i++) {
     24c:	0785                	addi	a5,a5,1
     24e:	bfc9                	j	220 <array_mod+0x4e>
    asm volatile(
     250:	03078733          	mul	a4,a5,a6
     254:	972a                	add	a4,a4,a0
     256:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-2) / 3); i++) {
     25a:	0785                	addi	a5,a5,1
     25c:	b74d                	j	1fe <array_mod+0x2c>

0000025e <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     25e:	715d                	addi	sp,sp,-80
     260:	de4e                	sw	s3,60(sp)
     262:	dc52                	sw	s4,56(sp)
     264:	00269993          	slli	s3,a3,0x2
     268:	8a3a                	mv	s4,a4


    int line[size_b][size_a + size_b];
     26a:	00d58733          	add	a4,a1,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     26e:	da56                	sw	s5,52(sp)
     270:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
     272:	fff70a93          	addi	s5,a4,-1
     276:	00271d13          	slli	s10,a4,0x2
     27a:	03370733          	mul	a4,a4,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     27e:	c4a2                	sw	s0,72(sp)
     280:	c2a6                	sw	s1,68(sp)
     282:	c0ca                	sw	s2,64(sp)
     284:	d85a                	sw	s6,48(sp)
     286:	d65e                	sw	s7,44(sp)
     288:	d462                	sw	s8,40(sp)
     28a:	d266                	sw	s9,36(sp)
     28c:	ce6e                	sw	s11,28(sp)
     28e:	c686                	sw	ra,76(sp)
    int line[size_b][size_a + size_b];
     290:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     292:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     294:	9b41                	andi	a4,a4,-16
     296:	40e10133          	sub	sp,sp,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     29a:	00259713          	slli	a4,a1,0x2
     29e:	073d                	addi	a4,a4,15
     2a0:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
     2a2:	8b8a                	mv	s7,sp
    int pola[size_a];
     2a4:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
     2a8:	00f98713          	addi	a4,s3,15
     2ac:	9b41                	andi	a4,a4,-16
    int pola[size_a];
     2ae:	8d8a                	mv	s11,sp
    int polb[size_b];
     2b0:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     2b4:	8c2e                	mv	s8,a1
     2b6:	8832                	mv	a6,a2
     2b8:	8936                	mv	s2,a3
    int line[size_b][size_a + size_b];
     2ba:	fff68c93          	addi	s9,a3,-1
    int polb[size_b];
     2be:	848a                	mv	s1,sp
    int pola[size_a];
     2c0:	fff58693          	addi	a3,a1,-1

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     2c4:	8b5e                	mv	s6,s7
     2c6:	85de                	mv	a1,s7
     2c8:	4601                	li	a2,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     2ca:	00001e17          	auipc	t3,0x1
     2ce:	f66e0e13          	addi	t3,t3,-154 # 1230 <_bss_start>
    for (i = 0; i < size_b; ++i){
     2d2:	07264863          	blt	a2,s2,342 <polymult+0xe4>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
     2d6:	85aa                	mv	a1,a0
     2d8:	8662                	mv	a2,s8
     2da:	856e                	mv	a0,s11
     2dc:	faf42a23          	sw	a5,-76(s0)
     2e0:	fad42e23          	sw	a3,-68(s0)
     2e4:	fb042c23          	sw	a6,-72(s0)
     2e8:	35b9                	jal	136 <array_equ>
    array_mod(pola,mod,size_a);
     2ea:	8662                	mv	a2,s8
     2ec:	85d2                	mv	a1,s4
     2ee:	856e                	mv	a0,s11
     2f0:	35cd                	jal	1d2 <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
     2f2:	fb842803          	lw	a6,-72(s0)
     2f6:	8526                	mv	a0,s1
     2f8:	864a                	mv	a2,s2
     2fa:	85c2                	mv	a1,a6
     2fc:	3d2d                	jal	136 <array_equ>
    array_mod(polb,mod,size_b);
     2fe:	8526                	mv	a0,s1
     300:	864a                	mv	a2,s2
     302:	85d2                	mv	a1,s4
     304:	35f9                	jal	1d2 <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     306:	fb442783          	lw	a5,-76(s0)
     30a:	4705                	li	a4,1
     30c:	fbc42683          	lw	a3,-68(s0)
     310:	94ce                	add	s1,s1,s3
     312:	02e78b63          	beq	a5,a4,348 <polymult+0xea>
     316:	19f1                	addi	s3,s3,-4
     318:	ffcd0613          	addi	a2,s10,-4
     31c:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	020cc863          	bltz	s9,34e <polymult+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	87b6                	mv	a5,a3
     324:	a85d                	j	3da <polymult+0x17c>
            product[j] = 0;
     326:	00271313          	slli	t1,a4,0x2
     32a:	9372                	add	t1,t1,t3
            line[i][j] = 0;
     32c:	0008a023          	sw	zero,0(a7)
            product[j] = 0;
     330:	00032023          	sw	zero,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0705                	addi	a4,a4,1
     336:	0891                	addi	a7,a7,4
     338:	ff5747e3          	blt	a4,s5,326 <polymult+0xc8>
    for (i = 0; i < size_b; ++i){
     33c:	0605                	addi	a2,a2,1
     33e:	95ea                	add	a1,a1,s10
     340:	bf49                	j	2d2 <polymult+0x74>
     342:	88ae                	mv	a7,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	4701                	li	a4,0
     346:	bfcd                	j	338 <polymult+0xda>
    if(star_mult == 1){
     348:	865e                	mv	a2,s7
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	060cda63          	bgez	s9,3be <polymult+0x160>
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	4481                	li	s1,0
            }
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
     350:	0924cb63          	blt	s1,s2,3e6 <polymult+0x188>
	array_mod(line[i],mod,size_a+size_b-1);
    }


    // construct product
    for(i = 0; i < size_b; ++i){
     354:	4481                	li	s1,0
       // for(j = 0; j < size_a + size_b -1; ++j){
		array_add(product,line[i],size_a+size_b-1);
     356:	00001997          	auipc	s3,0x1
     35a:	eda98993          	addi	s3,s3,-294 # 1230 <_bss_start>
     35e:	8656                	mv	a2,s5
    for(i = 0; i < size_b; ++i){
     360:	0924ca63          	blt	s1,s2,3f4 <polymult+0x196>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
     364:	85d2                	mv	a1,s4
     366:	00001517          	auipc	a0,0x1
     36a:	eca50513          	addi	a0,a0,-310 # 1230 <_bss_start>
     36e:	3595                	jal	1d2 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     370:	fb040113          	addi	sp,s0,-80
     374:	40b6                	lw	ra,76(sp)
     376:	4426                	lw	s0,72(sp)
     378:	4496                	lw	s1,68(sp)
     37a:	4906                	lw	s2,64(sp)
     37c:	59f2                	lw	s3,60(sp)
     37e:	5a62                	lw	s4,56(sp)
     380:	5ad2                	lw	s5,52(sp)
     382:	5b42                	lw	s6,48(sp)
     384:	5bb2                	lw	s7,44(sp)
     386:	5c22                	lw	s8,40(sp)
     388:	5c92                	lw	s9,36(sp)
     38a:	5d02                	lw	s10,32(sp)
     38c:	4df2                	lw	s11,28(sp)
     38e:	00001517          	auipc	a0,0x1
     392:	ea250513          	addi	a0,a0,-350 # 1230 <_bss_start>
     396:	6161                	addi	sp,sp,80
     398:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     39a:	00279713          	slli	a4,a5,0x2
     39e:	00e605b3          	add	a1,a2,a4
     3a2:	976e                	add	a4,a4,s11
     3a4:	4318                	lw	a4,0(a4)
     3a6:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3aa:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ac:	02a70733          	mul	a4,a4,a0
     3b0:	c198                	sw	a4,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	fe07d4e3          	bgez	a5,39a <polymult+0x13c>
        for (j = size_b -1; j >= 0; j = j-1){
     3b6:	1cfd                	addi	s9,s9,-1
     3b8:	14f1                	addi	s1,s1,-4
     3ba:	966a                	add	a2,a2,s10
     3bc:	b779                	j	34a <polymult+0xec>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3be:	87b6                	mv	a5,a3
     3c0:	bfcd                	j	3b2 <polymult+0x154>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	00279713          	slli	a4,a5,0x2
     3c6:	00e985b3          	add	a1,s3,a4
     3ca:	976e                	add	a4,a4,s11
     3cc:	4318                	lw	a4,0(a4)
     3ce:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3d4:	02a70733          	mul	a4,a4,a0
     3d8:	c198                	sw	a4,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	fe07d4e3          	bgez	a5,3c2 <polymult+0x164>
        for (j = size_b -1; j >= 0; j = j-1){
     3de:	1cfd                	addi	s9,s9,-1
     3e0:	14f1                	addi	s1,s1,-4
     3e2:	99b2                	add	s3,s3,a2
     3e4:	bf2d                	j	31e <polymult+0xc0>
	array_mod(line[i],mod,size_a+size_b-1);
     3e6:	855e                	mv	a0,s7
     3e8:	8656                	mv	a2,s5
     3ea:	85d2                	mv	a1,s4
     3ec:	33dd                	jal	1d2 <array_mod>
    for (i = 0; i < size_b; ++i){
     3ee:	0485                	addi	s1,s1,1
     3f0:	9bea                	add	s7,s7,s10
     3f2:	bfb9                	j	350 <polymult+0xf2>
		array_add(product,line[i],size_a+size_b-1);
     3f4:	85da                	mv	a1,s6
     3f6:	854e                	mv	a0,s3
     3f8:	3969                	jal	92 <array_add>
    for(i = 0; i < size_b; ++i){
     3fa:	0485                	addi	s1,s1,1
     3fc:	9b6a                	add	s6,s6,s10
     3fe:	b785                	j	35e <polymult+0x100>

00000400 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     400:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     402:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     406:	d85a                	sw	s6,48(sp)
     408:	00269b13          	slli	s6,a3,0x2
     40c:	de4e                	sw	s3,60(sp)
     40e:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     410:	fff78993          	addi	s3,a5,-1
     414:	00279b93          	slli	s7,a5,0x2
     418:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41c:	c4a2                	sw	s0,72(sp)
     41e:	c2a6                	sw	s1,68(sp)
     420:	c0ca                	sw	s2,64(sp)
     422:	dc52                	sw	s4,56(sp)
     424:	da56                	sw	s5,52(sp)
     426:	d462                	sw	s8,40(sp)
     428:	d266                	sw	s9,36(sp)
     42a:	d06a                	sw	s10,32(sp)
     42c:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     42e:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     430:	c686                	sw	ra,76(sp)
     432:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     434:	9bc1                	andi	a5,a5,-16
     436:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     43a:	00259793          	slli	a5,a1,0x2
     43e:	07bd                	addi	a5,a5,15
     440:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     442:	890a                	mv	s2,sp
    int pola[size_a];
     444:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     448:	00fb0793          	addi	a5,s6,15
     44c:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     44e:	8d0a                	mv	s10,sp
    int polb[size_b];
     450:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     454:	8a36                	mv	s4,a3
     456:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     458:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     45c:	8832                	mv	a6,a2
    int pola[size_a];
     45e:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     462:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     464:	8cca                	mv	s9,s2
     466:	86ca                	mv	a3,s2
     468:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     46a:	00001317          	auipc	t1,0x1
     46e:	01e30313          	addi	t1,t1,30 # 1488 <product2>
    for (i = 0; i < size_b; ++i){
     472:	05474963          	blt	a4,s4,4c4 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     476:	862e                	mv	a2,a1
     478:	85aa                	mv	a1,a0
     47a:	856a                	mv	a0,s10
     47c:	fb042e23          	sw	a6,-68(s0)
     480:	395d                	jal	136 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     482:	fbc42803          	lw	a6,-68(s0)
     486:	8526                	mv	a0,s1
     488:	8652                	mv	a2,s4
     48a:	85c2                	mv	a1,a6
     48c:	316d                	jal	136 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     48e:	4785                	li	a5,1
     490:	01648533          	add	a0,s1,s6
     494:	04fd8c63          	beq	s11,a5,4ec <polymult2+0xec>
     498:	1b71                	addi	s6,s6,-4
     49a:	ffcb8693          	addi	a3,s7,-4
     49e:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     4a0:	040ac863          	bltz	s5,4f0 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	87e2                	mv	a5,s8
     4a6:	a879                	j	544 <polymult2+0x144>
            product2[j] = 0;
     4a8:	00279893          	slli	a7,a5,0x2
     4ac:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     4ae:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     4b2:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     4b6:	0785                	addi	a5,a5,1
     4b8:	0611                	addi	a2,a2,4
     4ba:	ff37c7e3          	blt	a5,s3,4a8 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     4be:	0705                	addi	a4,a4,1
     4c0:	96de                	add	a3,a3,s7
     4c2:	bf45                	j	472 <polymult2+0x72>
     4c4:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     4c6:	4781                	li	a5,0
     4c8:	bfcd                	j	4ba <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     4ca:	00279713          	slli	a4,a5,0x2
     4ce:	00e906b3          	add	a3,s2,a4
     4d2:	976a                	add	a4,a4,s10
     4d4:	4318                	lw	a4,0(a4)
     4d6:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4da:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     4dc:	02c70733          	mul	a4,a4,a2
     4e0:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e2:	fe07d4e3          	bgez	a5,4ca <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     4e6:	1afd                	addi	s5,s5,-1
     4e8:	1571                	addi	a0,a0,-4
     4ea:	995e                	add	s2,s2,s7
     4ec:	020ade63          	bgez	s5,528 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
     4f0:	4481                	li	s1,0

    // construct product
    for(i=0;i<size_b;++i){
    //   for(j=0;j<size_a+size_b-1;++j){
          //  product2[j] += line[i][j];
	   array_add(product2,line[i],size_a+size_b-1);
     4f2:	00001917          	auipc	s2,0x1
     4f6:	f9690913          	addi	s2,s2,-106 # 1488 <product2>
    for(i=0;i<size_b;++i){
     4fa:	0544cb63          	blt	s1,s4,550 <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     4fe:	fb040113          	addi	sp,s0,-80
     502:	40b6                	lw	ra,76(sp)
     504:	4426                	lw	s0,72(sp)
     506:	4496                	lw	s1,68(sp)
     508:	4906                	lw	s2,64(sp)
     50a:	59f2                	lw	s3,60(sp)
     50c:	5a62                	lw	s4,56(sp)
     50e:	5ad2                	lw	s5,52(sp)
     510:	5b42                	lw	s6,48(sp)
     512:	5bb2                	lw	s7,44(sp)
     514:	5c22                	lw	s8,40(sp)
     516:	5c92                	lw	s9,36(sp)
     518:	5d02                	lw	s10,32(sp)
     51a:	4df2                	lw	s11,28(sp)
     51c:	00001517          	auipc	a0,0x1
     520:	f6c50513          	addi	a0,a0,-148 # 1488 <product2>
     524:	6161                	addi	sp,sp,80
     526:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     528:	87e2                	mv	a5,s8
     52a:	bf65                	j	4e2 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     52c:	00279713          	slli	a4,a5,0x2
     530:	00e90633          	add	a2,s2,a4
     534:	976a                	add	a4,a4,s10
     536:	4318                	lw	a4,0(a4)
     538:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     53c:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     53e:	02b70733          	mul	a4,a4,a1
     542:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     544:	fe07d4e3          	bgez	a5,52c <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
     548:	1afd                	addi	s5,s5,-1
     54a:	1571                	addi	a0,a0,-4
     54c:	9936                	add	s2,s2,a3
     54e:	bf89                	j	4a0 <polymult2+0xa0>
	   array_add(product2,line[i],size_a+size_b-1);
     550:	85e6                	mv	a1,s9
     552:	864e                	mv	a2,s3
     554:	854a                	mv	a0,s2
     556:	3e35                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     558:	0485                	addi	s1,s1,1
     55a:	9cde                	add	s9,s9,s7
     55c:	bf79                	j	4fa <polymult2+0xfa>

0000055e <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     55e:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     562:	7139                	addi	sp,sp,-64
    int v[size_N];
     564:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     566:	de06                	sw	ra,60(sp)
     568:	dc22                	sw	s0,56(sp)
     56a:	da26                	sw	s1,52(sp)
     56c:	0080                	addi	s0,sp,64
     56e:	d84a                	sw	s2,48(sp)
     570:	d64e                	sw	s3,44(sp)
     572:	d452                	sw	s4,40(sp)
     574:	d256                	sw	s5,36(sp)
     576:	d05a                	sw	s6,32(sp)
     578:	ce5e                	sw	s7,28(sp)
     57a:	cc62                	sw	s8,24(sp)
     57c:	ca66                	sw	s9,20(sp)
     57e:	c86a                	sw	s10,16(sp)
    int v[size_N];
     580:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     582:	c66e                	sw	s11,12(sp)
    int v[size_N];
     584:	40f10133          	sub	sp,sp,a5
     588:	8a8a                	mv	s5,sp
    int q[size_N];
     58a:	40f10133          	sub	sp,sp,a5
     58e:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
     590:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     594:	00269793          	slli	a5,a3,0x2
     598:	07bd                	addi	a5,a5,15
     59a:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     59c:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     59e:	84ae                	mv	s1,a1
    int denum_temp[size_D];
     5a0:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5a4:	8d32                	mv	s10,a2
    int v[size_N];
     5a6:	fff58c13          	addi	s8,a1,-1
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }

       array_equ(num_temp,num,size_N);
     5aa:	862e                	mv	a2,a1
     5ac:	85aa                	mv	a1,a0
     5ae:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5b0:	8a36                	mv	s4,a3
     5b2:	89ba                	mv	s3,a4
    int denum_temp[size_D];
     5b4:	fff68c93          	addi	s9,a3,-1
       array_equ(num_temp,num,size_N);
     5b8:	3ebd                	jal	136 <array_equ>



       array_mod(num_temp, mod, size_N);
     5ba:	8626                	mv	a2,s1
     5bc:	85ce                	mv	a1,s3
     5be:	854a                	mv	a0,s2
     5c0:	3909                	jal	1d2 <array_mod>
    int denum_temp[size_D];
     5c2:	8b8a                	mv	s7,sp
//            denum_temp[i] = denum_temp[i] + mod;
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    array_equ(denum_temp,denum,size_D);
     5c4:	8652                	mv	a2,s4
     5c6:	85ea                	mv	a1,s10
     5c8:	855e                	mv	a0,s7
     5ca:	36b5                	jal	136 <array_equ>
    array_mod(denum_temp,mod,size_D);
     5cc:	8652                	mv	a2,s4
     5ce:	85ce                	mv	a1,s3
     5d0:	855e                	mv	a0,s7
     5d2:	3101                	jal	1d2 <array_mod>

    for (i = 0; i < size_N; ++i){
     5d4:	4781                	li	a5,0
     5d6:	0097cf63          	blt	a5,s1,5f4 <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     5da:	002c9793          	slli	a5,s9,0x2
     5de:	97de                	add	a5,a5,s7
     5e0:	4398                	lw	a4,0(a5)
     5e2:	020cd463          	bgez	s9,60a <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
     5e6:	4781                	li	a5,0
     5e8:	4d01                	li	s10,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     5ea:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     5ec:	033d4263          	blt	s10,s3,610 <polydiv+0xb2>
     5f0:	87e2                	mv	a5,s8
     5f2:	a805                	j	622 <polydiv+0xc4>
        q[i] = 0;
     5f4:	00279713          	slli	a4,a5,0x2
     5f8:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
     5fc:	9756                	add	a4,a4,s5
        q[i] = 0;
     5fe:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     602:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     606:	0785                	addi	a5,a5,1
     608:	b7f9                	j	5d6 <polydiv+0x78>
        if( denum_temp[i] != 0 )
     60a:	ff71                	bnez	a4,5e6 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
     60c:	1cfd                	addi	s9,s9,-1
     60e:	b7f1                	j	5da <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
     610:	0337e633          	rem	a2,a5,s3
     614:	97ba                	add	a5,a5,a4
     616:	fcd60de3          	beq	a2,a3,5f0 <polydiv+0x92>
    for (u = 0; u < mod; ++u){
     61a:	0d05                	addi	s10,s10,1
     61c:	bfc1                	j	5ec <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     61e:	eb01                	bnez	a4,62e <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
     620:	17fd                	addi	a5,a5,-1
     622:	00279713          	slli	a4,a5,0x2
     626:	974a                	add	a4,a4,s2
     628:	4318                	lw	a4,0(a4)
     62a:	fe07dae3          	bgez	a5,61e <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     62e:	0597d663          	bge	a5,s9,67a <polydiv+0x11c>

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }

      array_equ(result,q,size_N);
     632:	8626                	mv	a2,s1
     634:	85da                	mv	a1,s6
     636:	00001517          	auipc	a0,0x1
     63a:	0aa50513          	addi	a0,a0,170 # 16e0 <result>
     63e:	3ce5                	jal	136 <array_equ>
    


    for(i = size_N; i < (2*size_N); ++i){
     640:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     644:	00001697          	auipc	a3,0x1
     648:	09c68693          	addi	a3,a3,156 # 16e0 <result>
    for(i = size_N; i < (2*size_N); ++i){
     64c:	0ae4cd63          	blt	s1,a4,706 <polydiv+0x1a8>
    }

    return_address3 = &result[0];

    return return_address3;
}
     650:	fc040113          	addi	sp,s0,-64
     654:	50f2                	lw	ra,60(sp)
     656:	5462                	lw	s0,56(sp)
     658:	54d2                	lw	s1,52(sp)
     65a:	5942                	lw	s2,48(sp)
     65c:	59b2                	lw	s3,44(sp)
     65e:	5a22                	lw	s4,40(sp)
     660:	5a92                	lw	s5,36(sp)
     662:	5b02                	lw	s6,32(sp)
     664:	4bf2                	lw	s7,28(sp)
     666:	4c62                	lw	s8,24(sp)
     668:	4cd2                	lw	s9,20(sp)
     66a:	4d42                	lw	s10,16(sp)
     66c:	4db2                	lw	s11,12(sp)
     66e:	00001517          	auipc	a0,0x1
     672:	07250513          	addi	a0,a0,114 # 16e0 <result>
     676:	6121                	addi	sp,sp,64
     678:	8082                	ret
        v[(d-d2)] = u*r_d;
     67a:	03a70733          	mul	a4,a4,s10
     67e:	419787b3          	sub	a5,a5,s9
     682:	078a                	slli	a5,a5,0x2
     684:	97d6                	add	a5,a5,s5
        array_mod(v, mod, size_N);
     686:	8626                	mv	a2,s1
     688:	85ce                	mv	a1,s3
     68a:	8556                	mv	a0,s5
        v[(d-d2)] = u*r_d;
     68c:	c398                	sw	a4,0(a5)
        array_mod(v, mod, size_N);
     68e:	3691                	jal	1d2 <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     690:	4781                	li	a5,0
     692:	874e                	mv	a4,s3
     694:	86d2                	mv	a3,s4
     696:	8656                	mv	a2,s5
     698:	85d2                	mv	a1,s4
     69a:	855e                	mv	a0,s7
     69c:	36c9                	jal	25e <polymult>
        array_mod(product, mod, size_N);
     69e:	8626                	mv	a2,s1
     6a0:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     6a2:	8daa                	mv	s11,a0
        array_mod(product, mod, size_N);
     6a4:	363d                	jal	1d2 <array_mod>
        for (i = 0; i < size_N; ++i){
     6a6:	874a                	mv	a4,s2
     6a8:	4781                	li	a5,0
     6aa:	0297c763          	blt	a5,s1,6d8 <polydiv+0x17a>
        array_mod(num_temp, mod, size_N);
     6ae:	8626                	mv	a2,s1
     6b0:	85ce                	mv	a1,s3
     6b2:	854a                	mv	a0,s2
     6b4:	3e39                	jal	1d2 <array_mod>
        array_add(q, v, size_N);
     6b6:	8626                	mv	a2,s1
     6b8:	85d6                	mv	a1,s5
     6ba:	855a                	mv	a0,s6
     6bc:	3ad9                	jal	92 <array_add>
        array_mod(q, mod, size_N);
     6be:	8626                	mv	a2,s1
     6c0:	85ce                	mv	a1,s3
     6c2:	855a                	mv	a0,s6
     6c4:	3639                	jal	1d2 <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
     6c6:	87e2                	mv	a5,s8
     6c8:	00279713          	slli	a4,a5,0x2
     6cc:	974a                	add	a4,a4,s2
     6ce:	4318                	lw	a4,0(a4)
     6d0:	0007df63          	bgez	a5,6ee <polydiv+0x190>
     6d4:	4681                	li	a3,0
     6d6:	a02d                	j	700 <polydiv+0x1a2>
            num_temp[i] = num_temp[i] - product[i];
     6d8:	00279613          	slli	a2,a5,0x2
     6dc:	966e                	add	a2,a2,s11
     6de:	4314                	lw	a3,0(a4)
     6e0:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     6e2:	0785                	addi	a5,a5,1
     6e4:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     6e6:	8e91                	sub	a3,a3,a2
     6e8:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     6ec:	bf7d                	j	6aa <polydiv+0x14c>
            if( num_temp[i] != 0 )
     6ee:	f37d                	bnez	a4,6d4 <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
     6f0:	17fd                	addi	a5,a5,-1
     6f2:	bfd9                	j	6c8 <polydiv+0x16a>
            v[i] = 0;
     6f4:	00269613          	slli	a2,a3,0x2
     6f8:	9656                	add	a2,a2,s5
     6fa:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6fe:	0685                	addi	a3,a3,1
     700:	fe96cae3          	blt	a3,s1,6f4 <polydiv+0x196>
     704:	b72d                	j	62e <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
     706:	00092603          	lw	a2,0(s2)
     70a:	00249793          	slli	a5,s1,0x2
     70e:	97b6                	add	a5,a5,a3
     710:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     712:	0485                	addi	s1,s1,1
     714:	0911                	addi	s2,s2,4
     716:	bf1d                	j	64c <polydiv+0xee>

00000718 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     718:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71c:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     71e:	07bd                	addi	a5,a5,15
     720:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     722:	c4a2                	sw	s0,72(sp)
     724:	c2a6                	sw	s1,68(sp)
     726:	c0ca                	sw	s2,64(sp)
     728:	de4e                	sw	s3,60(sp)
     72a:	dc52                	sw	s4,56(sp)
     72c:	da56                	sw	s5,52(sp)
     72e:	d85a                	sw	s6,48(sp)
     730:	d65e                	sw	s7,44(sp)
     732:	d462                	sw	s8,40(sp)
     734:	d266                	sw	s9,36(sp)
     736:	d06a                	sw	s10,32(sp)
     738:	ce6e                	sw	s11,28(sp)
     73a:	c686                	sw	ra,76(sp)
     73c:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     73e:	40f10133          	sub	sp,sp,a5
     742:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     744:	40f10133          	sub	sp,sp,a5
     748:	8a0a                	mv	s4,sp
    int ri[size];
     74a:	40f10133          	sub	sp,sp,a5
     74e:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     750:	40f10133          	sub	sp,sp,a5
     754:	8b0a                	mv	s6,sp
    int ti[size];
     756:	40f10133          	sub	sp,sp,a5
     75a:	8d0a                	mv	s10,sp
    int qi_1[size];
     75c:	40f10133          	sub	sp,sp,a5
     760:	8c8a                	mv	s9,sp
    int temp[size];
     762:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     766:	8936                	mv	s2,a3
     768:	8dae                	mv	s11,a1
     76a:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     76c:	fff60b93          	addi	s7,a2,-1
    int temp[size];
     770:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     772:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     774:	00001697          	auipc	a3,0x1
     778:	1c468693          	addi	a3,a3,452 # 1938 <ti_2>
    for (i = 0; i < size; ++i) {
     77c:	1097cb63          	blt	a5,s1,892 <ext_euclid+0x17a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     780:	85aa                	mv	a1,a0
     782:	8626                	mv	a2,s1
     784:	854e                	mv	a0,s3
     786:	3a45                	jal	136 <array_equ>
    array_equ(ri_1,polyf,size);
     788:	85ee                	mv	a1,s11
     78a:	8626                	mv	a2,s1
     78c:	8552                	mv	a0,s4
     78e:	3265                	jal	136 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     790:	4785                	li	a5,1
     792:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     796:	00149793          	slli	a5,s1,0x1
     79a:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     79e:	00001d97          	auipc	s11,0x1
     7a2:	19ad8d93          	addi	s11,s11,410 # 1938 <ti_2>
    array_mod(ri_2,mod,size);
     7a6:	8626                	mv	a2,s1
     7a8:	85ca                	mv	a1,s2
     7aa:	854e                	mv	a0,s3
     7ac:	341d                	jal	1d2 <array_mod>
    array_mod(ri_1,mod,size);
     7ae:	8626                	mv	a2,s1
     7b0:	85ca                	mv	a1,s2
     7b2:	8552                	mv	a0,s4
     7b4:	3c39                	jal	1d2 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7b6:	874a                	mv	a4,s2
     7b8:	86a6                	mv	a3,s1
     7ba:	8652                	mv	a2,s4
     7bc:	85a6                	mv	a1,s1
     7be:	854e                	mv	a0,s3
     7c0:	3b79                	jal	55e <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7c2:	8762                	mv	a4,s8
     7c4:	87a6                	mv	a5,s1
     7c6:	fbc42683          	lw	a3,-68(s0)
     7ca:	0cd7cf63          	blt	a5,a3,8a8 <ext_euclid+0x190>
     7ce:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     7d0:	4701                	li	a4,0
     7d2:	0eebd463          	bge	s7,a4,8ba <ext_euclid+0x1a2>
    array_mod(temp,mod,size);
     7d6:	8626                	mv	a2,s1
     7d8:	85ca                	mv	a1,s2
     7da:	8556                	mv	a0,s5
     7dc:	3add                	jal	1d2 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7de:	874a                	mv	a4,s2
     7e0:	86a6                	mv	a3,s1
     7e2:	8652                	mv	a2,s4
     7e4:	85a6                	mv	a1,s1
     7e6:	8556                	mv	a0,s5
     7e8:	3b9d                	jal	55e <polydiv>
     7ea:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
     7ec:	8626                	mv	a2,s1
     7ee:	8566                	mv	a0,s9
     7f0:	3299                	jal	136 <array_equ>
    array_mod(qi_1,mod,size);
     7f2:	8626                	mv	a2,s1
     7f4:	85ca                	mv	a1,s2
     7f6:	8566                	mv	a0,s9
     7f8:	3ae9                	jal	1d2 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7fa:	4781                	li	a5,0
     7fc:	874a                	mv	a4,s2
     7fe:	86a6                	mv	a3,s1
     800:	865a                	mv	a2,s6
     802:	85a6                	mv	a1,s1
     804:	8566                	mv	a0,s9
     806:	3ca1                	jal	25e <polymult>
     808:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
     80a:	8626                	mv	a2,s1
     80c:	8556                	mv	a0,s5
     80e:	3225                	jal	136 <array_equ>
    array_mod(temp,mod,size);
     810:	8626                	mv	a2,s1
     812:	85ca                	mv	a1,s2
     814:	8556                	mv	a0,s5
     816:	3a75                	jal	1d2 <array_mod>
        for (i = 0; i < N + 1; ++i) {
     818:	4781                	li	a5,0
     81a:	4701                	li	a4,0
     81c:	0aebdc63          	bge	s7,a4,8d4 <ext_euclid+0x1bc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
     820:	8626                	mv	a2,s1
     822:	85ca                	mv	a1,s2
     824:	856a                	mv	a0,s10
     826:	3275                	jal	1d2 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///


/////////////////////////////////buralarda sorun olabilir//////////
array_equ(ri_2,ri_1,size);
     828:	8626                	mv	a2,s1
     82a:	85d2                	mv	a1,s4
     82c:	854e                	mv	a0,s3
     82e:	3221                	jal	136 <array_equ>
array_equ(ri_1,ri,size);
     830:	8626                	mv	a2,s1
     832:	85e2                	mv	a1,s8
     834:	8552                	mv	a0,s4
     836:	3201                	jal	136 <array_equ>
array_equ(ti_2,ti_1,size);
     838:	8626                	mv	a2,s1
     83a:	85da                	mv	a1,s6
     83c:	856e                	mv	a0,s11
     83e:	38e5                	jal	136 <array_equ>
array_equ(ti_1,ti,size);
     840:	8626                	mv	a2,s1
     842:	85ea                	mv	a1,s10
     844:	855a                	mv	a0,s6
     846:	38c5                	jal	136 <array_equ>
        controlR = 0;
     848:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     84a:	4701                	li	a4,0
     84c:	0aebd163          	bge	s7,a4,8ee <ext_euclid+0x1d6>
    while (controlR != 0) {
     850:	f4079be3          	bnez	a5,7a6 <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     854:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     856:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     858:	0b274663          	blt	a4,s2,904 <ext_euclid+0x1ec>
     85c:	00001617          	auipc	a2,0x1
     860:	0dc60613          	addi	a2,a2,220 # 1938 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     864:	0afbda63          	bge	s7,a5,918 <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     868:	fb040113          	addi	sp,s0,-80
     86c:	40b6                	lw	ra,76(sp)
     86e:	4426                	lw	s0,72(sp)
     870:	4496                	lw	s1,68(sp)
     872:	4906                	lw	s2,64(sp)
     874:	59f2                	lw	s3,60(sp)
     876:	5a62                	lw	s4,56(sp)
     878:	5ad2                	lw	s5,52(sp)
     87a:	5b42                	lw	s6,48(sp)
     87c:	5bb2                	lw	s7,44(sp)
     87e:	5c22                	lw	s8,40(sp)
     880:	5c92                	lw	s9,36(sp)
     882:	5d02                	lw	s10,32(sp)
     884:	4df2                	lw	s11,28(sp)
     886:	00001517          	auipc	a0,0x1
     88a:	0b250513          	addi	a0,a0,178 # 1938 <ti_2>
     88e:	6161                	addi	sp,sp,80
     890:	8082                	ret
        ti_2[i] = 0;
     892:	00279713          	slli	a4,a5,0x2
     896:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     89a:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     89c:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     8a0:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     8a4:	0785                	addi	a5,a5,1
     8a6:	bdd9                	j	77c <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     8a8:	00279693          	slli	a3,a5,0x2
     8ac:	96aa                	add	a3,a3,a0
     8ae:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b0:	0785                	addi	a5,a5,1
     8b2:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     8b4:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b8:	b739                	j	7c6 <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
     8ba:	00f986b3          	add	a3,s3,a5
     8be:	00fc05b3          	add	a1,s8,a5
     8c2:	4294                	lw	a3,0(a3)
     8c4:	418c                	lw	a1,0(a1)
     8c6:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     8ca:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     8cc:	8e8d                	sub	a3,a3,a1
     8ce:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8d0:	0791                	addi	a5,a5,4
     8d2:	b701                	j	7d2 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
     8d4:	00fd86b3          	add	a3,s11,a5
     8d8:	00fa85b3          	add	a1,s5,a5
     8dc:	4294                	lw	a3,0(a3)
     8de:	418c                	lw	a1,0(a1)
     8e0:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
     8e4:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8e6:	8e8d                	sub	a3,a3,a1
     8e8:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ea:	0791                	addi	a5,a5,4
     8ec:	bf05                	j	81c <ext_euclid+0x104>
              qi_1[i] = 0;
     8ee:	00271693          	slli	a3,a4,0x2
     8f2:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
     8f6:	96e2                	add	a3,a3,s8
     8f8:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8fa:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8fe:	0705                	addi	a4,a4,1
            controlR += ri[i];
     900:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     902:	b7a9                	j	84c <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
     904:	0009a683          	lw	a3,0(s3)
     908:	02d706b3          	mul	a3,a4,a3
     90c:	0326e6b3          	rem	a3,a3,s2
     910:	f4c686e3          	beq	a3,a2,85c <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
     914:	0705                	addi	a4,a4,1
     916:	b789                	j	858 <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;
     918:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     91a:	0785                	addi	a5,a5,1
     91c:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     91e:	02d706b3          	mul	a3,a4,a3
     922:	0326e6b3          	rem	a3,a3,s2
     926:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     92a:	bf2d                	j	864 <ext_euclid+0x14c>

0000092c <generate_keys>:




int* generate_keys(int N, int p, int q){
     92c:	7141                	addi	sp,sp,-496
     92e:	1e112623          	sw	ra,492(sp)
     932:	1e812423          	sw	s0,488(sp)
     936:	1e912223          	sw	s1,484(sp)
     93a:	1b80                	addi	s0,sp,496
     93c:	1f212023          	sw	s2,480(sp)
     940:	1d312e23          	sw	s3,476(sp)
     944:	1d412c23          	sw	s4,472(sp)
     948:	1d512a23          	sw	s5,468(sp)
     94c:	1d612823          	sw	s6,464(sp)
     950:	1d712623          	sw	s7,460(sp)
     954:	1da12023          	sw	s10,448(sp)
     958:	1d812423          	sw	s8,456(sp)
     95c:	1d912223          	sw	s9,452(sp)
     960:	892a                	mv	s2,a0
     962:	8bae                	mv	s7,a1
     964:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     966:	4581                	li	a1,0
     968:	0d000613          	li	a2,208
     96c:	e2440513          	addi	a0,s0,-476
     970:	23b1                	jal	ebc <memset>
     972:	4485                	li	s1,1
     974:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     976:	0d800613          	li	a2,216
     97a:	4581                	li	a1,0
     97c:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     980:	e1342c23          	sw	s3,-488(s0)
     984:	e0942e23          	sw	s1,-484(s0)
     988:	e2942023          	sw	s1,-480(s0)
     98c:	e3342423          	sw	s3,-472(s0)
     990:	e2942823          	sw	s1,-464(s0)
     994:	e2942e23          	sw	s1,-452(s0)
     998:	e5342023          	sw	s3,-448(s0)
     99c:	e5342223          	sw	s3,-444(s0)
     9a0:	e4942623          	sw	s1,-436(s0)
     9a4:	e5342a23          	sw	s3,-428(s0)
     9a8:	e4942e23          	sw	s1,-420(s0)
     9ac:	e6942023          	sw	s1,-416(s0)
     9b0:	e7342623          	sw	s3,-404(s0)
     9b4:	e6942a23          	sw	s1,-396(s0)
     9b8:	e8942023          	sw	s1,-384(s0)
     9bc:	e8942223          	sw	s1,-380(s0)
     9c0:	e8942423          	sw	s1,-376(s0)
     9c4:	e9342623          	sw	s3,-372(s0)
     9c8:	e8942a23          	sw	s1,-364(s0)
     9cc:	ea942023          	sw	s1,-352(s0)
     9d0:	ea942223          	sw	s1,-348(s0)
     9d4:	ea942423          	sw	s1,-344(s0)
     9d8:	eb342623          	sw	s3,-340(s0)
     9dc:	ea942a23          	sw	s1,-332(s0)
     9e0:	ec942023          	sw	s1,-320(s0)
     9e4:	ec942223          	sw	s1,-316(s0)
     9e8:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9ec:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f0:	21f1                	jal	ebc <memset>
    int polyR[N+1];
     9f2:	002a9793          	slli	a5,s5,0x2
     9f6:	07bd                	addi	a5,a5,15
     9f8:	9bc1                	andi	a5,a5,-16
     9fa:	40f10133          	sub	sp,sp,a5
     9fe:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a00:	00291d13          	slli	s10,s2,0x2
     a04:	01aa07b3          	add	a5,s4,s10
     a08:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0a:	ef342a23          	sw	s3,-268(s0)
     a0e:	ee942e23          	sw	s1,-260(s0)
     a12:	f0942023          	sw	s1,-256(s0)
     a16:	f0942423          	sw	s1,-248(s0)
     a1a:	f1342a23          	sw	s3,-236(s0)
     a1e:	f1342e23          	sw	s3,-228(s0)
     a22:	f3342023          	sw	s3,-224(s0)
     a26:	f2942423          	sw	s1,-216(s0)
     a2a:	f3342823          	sw	s3,-208(s0)
     a2e:	f2942c23          	sw	s1,-200(s0)
     a32:	f4942223          	sw	s1,-188(s0)
     a36:	f5342423          	sw	s3,-184(s0)
     a3a:	f4942823          	sw	s1,-176(s0)
     a3e:	f4942e23          	sw	s1,-164(s0)
     a42:	f7342023          	sw	s3,-160(s0)
     a46:	f6942423          	sw	s1,-152(s0)
     a4a:	f6942a23          	sw	s1,-140(s0)
     a4e:	f7342c23          	sw	s3,-136(s0)
     a52:	f8942023          	sw	s1,-128(s0)
     a56:	f8942423          	sw	s1,-120(s0)
     a5a:	f8942623          	sw	s1,-116(s0)
     a5e:	f8942c23          	sw	s1,-104(s0)
     a62:	f9342e23          	sw	s3,-100(s0)
     a66:	fa942223          	sw	s1,-92(s0)
     a6a:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a6e:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a72:	4785                	li	a5,1
     a74:	1127c163          	blt	a5,s2,b76 <generate_keys+0x24a>
     a78:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a7a:	03600693          	li	a3,54
     a7e:	10f6d363          	bge	a3,a5,b84 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a82:	4781                	li	a5,0
        random_keys[i] = f[i];
     a84:	00001697          	auipc	a3,0x1
     a88:	04468693          	addi	a3,a3,68 # 1ac8 <random_keys>
    for(i = 0; i < N; ++i){
     a8c:	1127ca63          	blt	a5,s2,ba0 <generate_keys+0x274>
     a90:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a94:	00191993          	slli	s3,s2,0x1
     a98:	87ca                	mv	a5,s2
     a9a:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a9c:	00001617          	auipc	a2,0x1
     aa0:	02c60613          	addi	a2,a2,44 # 1ac8 <random_keys>
    for(i = N; i < (2*N); ++i){
     aa4:	1137c963          	blt	a5,s3,bb6 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     aa8:	448d                	li	s1,3
     aaa:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     aae:	86de                	mv	a3,s7
     ab0:	8656                	mv	a2,s5
     ab2:	e1840593          	addi	a1,s0,-488
     ab6:	8552                	mv	a0,s4
     ab8:	3185                	jal	718 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     aba:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     abc:	00001697          	auipc	a3,0x1
     ac0:	00c68693          	addi	a3,a3,12 # 1ac8 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ac4:	1097c163          	blt	a5,s1,bc6 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     ac8:	8656                	mv	a2,s5
     aca:	86da                	mv	a3,s6
     acc:	e1840593          	addi	a1,s0,-488
     ad0:	8552                	mv	a0,s4
     ad2:	3199                	jal	718 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ad4:	5751                	li	a4,-12
     ad6:	02e90733          	mul	a4,s2,a4
     ada:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     adc:	00001617          	auipc	a2,0x1
     ae0:	fec60613          	addi	a2,a2,-20 # 1ac8 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ae4:	0fa4c963          	blt	s1,s10,bd6 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ae8:	4701                	li	a4,0
     aea:	85ca                	mv	a1,s2
     aec:	86ca                	mv	a3,s2
     aee:	8666                	mv	a2,s9
     af0:	3a01                	jal	400 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     af2:	87aa                	mv	a5,a0
     af4:	4701                	li	a4,0
     af6:	fff98593          	addi	a1,s3,-1
     afa:	0eb74863          	blt	a4,a1,bea <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     afe:	86d6                	mv	a3,s5
     b00:	875a                	mv	a4,s6
     b02:	8652                	mv	a2,s4
     b04:	3ca9                	jal	55e <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b06:	4795                	li	a5,5
     b08:	02f907b3          	mul	a5,s2,a5
     b0c:	098a                	slli	s3,s3,0x2
     b0e:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b10:	00001697          	auipc	a3,0x1
     b14:	fb868693          	addi	a3,a3,-72 # 1ac8 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b18:	0991                	addi	s3,s3,4
     b1a:	0efc4063          	blt	s8,a5,bfa <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b1e:	4699                	li	a3,6
     b20:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b22:	00001617          	auipc	a2,0x1
     b26:	fa660613          	addi	a2,a2,-90 # 1ac8 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b2a:	02d906b3          	mul	a3,s2,a3
     b2e:	02a90933          	mul	s2,s2,a0
     b32:	0cf6dc63          	bge	a3,a5,c0a <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b36:	e1040113          	addi	sp,s0,-496
     b3a:	1ec12083          	lw	ra,492(sp)
     b3e:	1e812403          	lw	s0,488(sp)
     b42:	1e412483          	lw	s1,484(sp)
     b46:	1e012903          	lw	s2,480(sp)
     b4a:	1dc12983          	lw	s3,476(sp)
     b4e:	1d812a03          	lw	s4,472(sp)
     b52:	1d412a83          	lw	s5,468(sp)
     b56:	1d012b03          	lw	s6,464(sp)
     b5a:	1cc12b83          	lw	s7,460(sp)
     b5e:	1c812c03          	lw	s8,456(sp)
     b62:	1c412c83          	lw	s9,452(sp)
     b66:	1c012d03          	lw	s10,448(sp)
     b6a:	00001517          	auipc	a0,0x1
     b6e:	f5e50513          	addi	a0,a0,-162 # 1ac8 <random_keys>
     b72:	617d                	addi	sp,sp,496
     b74:	8082                	ret
        polyR[i] = 0;
     b76:	00279713          	slli	a4,a5,0x2
     b7a:	9752                	add	a4,a4,s4
     b7c:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b80:	0785                	addi	a5,a5,1
     b82:	bdcd                	j	a74 <generate_keys+0x148>
        f[i] = 0;
     b84:	00279713          	slli	a4,a5,0x2
     b88:	e1840613          	addi	a2,s0,-488
     b8c:	963a                	add	a2,a2,a4
     b8e:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b92:	ef440613          	addi	a2,s0,-268
     b96:	9732                	add	a4,a4,a2
     b98:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b9c:	0785                	addi	a5,a5,1
     b9e:	b5c5                	j	a7e <generate_keys+0x152>
        random_keys[i] = f[i];
     ba0:	00279713          	slli	a4,a5,0x2
     ba4:	e1840593          	addi	a1,s0,-488
     ba8:	00e68633          	add	a2,a3,a4
     bac:	972e                	add	a4,a4,a1
     bae:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     bb0:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     bb2:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     bb4:	bde1                	j	a8c <generate_keys+0x160>
        random_keys[i] = g[i-N];
     bb6:	430c                	lw	a1,0(a4)
     bb8:	00279693          	slli	a3,a5,0x2
     bbc:	96b2                	add	a3,a3,a2
     bbe:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bc0:	0785                	addi	a5,a5,1
     bc2:	0711                	addi	a4,a4,4
     bc4:	b5c5                	j	aa4 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bc6:	4110                	lw	a2,0(a0)
     bc8:	00279713          	slli	a4,a5,0x2
     bcc:	9736                	add	a4,a4,a3
     bce:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bd0:	0785                	addi	a5,a5,1
     bd2:	0511                	addi	a0,a0,4
     bd4:	bdc5                	j	ac4 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bd6:	00249793          	slli	a5,s1,0x2
     bda:	00f706b3          	add	a3,a4,a5
     bde:	96aa                	add	a3,a3,a0
     be0:	4294                	lw	a3,0(a3)
     be2:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     be4:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     be6:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     be8:	bdf5                	j	ae4 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bea:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bec:	0705                	addi	a4,a4,1
     bee:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bf0:	037686b3          	mul	a3,a3,s7
     bf4:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bf8:	b709                	j	afa <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bfa:	ff89a603          	lw	a2,-8(s3)
     bfe:	002c1713          	slli	a4,s8,0x2
     c02:	9736                	add	a4,a4,a3
     c04:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c06:	0c05                	addi	s8,s8,1
     c08:	bf01                	j	b18 <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
     c0a:	00279713          	slli	a4,a5,0x2
     c0e:	00e605b3          	add	a1,a2,a4
     c12:	974a                	add	a4,a4,s2
     c14:	9752                	add	a4,a4,s4
     c16:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c18:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c1a:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c1c:	bf19                	j	b32 <generate_keys+0x206>

00000c1e <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c1e:	7115                	addi	sp,sp,-224
     c20:	cda2                	sw	s0,216(sp)
     c22:	cba6                	sw	s1,212(sp)
     c24:	842a                	mv	s0,a0
     c26:	84b2                	mv	s1,a2
     c28:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2a:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2e:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	850a                	mv	a0,sp
     c32:	00000597          	auipc	a1,0x0
     c36:	47a58593          	addi	a1,a1,1146 # 10ac <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c3a:	cf86                	sw	ra,220(sp)
     c3c:	c7ce                	sw	s3,204(sp)
     c3e:	c5d2                	sw	s4,200(sp)
     c40:	89b6                	mv	s3,a3
     c42:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c44:	2a69                	jal	dde <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c46:	4781                	li	a5,0
     c48:	874a                	mv	a4,s2
     c4a:	03000693          	li	a3,48
     c4e:	85a2                	mv	a1,s0
     c50:	860a                	mv	a2,sp
     c52:	854e                	mv	a0,s3
     c54:	e0aff0ef          	jal	ra,25e <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     c58:	85a6                	mv	a1,s1
     c5a:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c5e:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c60:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     c64:	c2eff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	00140693          	addi	a3,s0,1
     c6c:	874a                	mv	a4,s2
     c6e:	8652                	mv	a2,s4
     c70:	85a6                	mv	a1,s1
     c72:	854e                	mv	a0,s3
     c74:	30ed                	jal	55e <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c76:	478d                	li	a5,3
     c78:	02f40433          	mul	s0,s0,a5
     c7c:	87aa                	mv	a5,a0
     c7e:	0084ca63          	blt	s1,s0,c92 <ntru_encyrpt+0x74>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c82:	40fe                	lw	ra,220(sp)
     c84:	446e                	lw	s0,216(sp)
     c86:	44de                	lw	s1,212(sp)
     c88:	494e                	lw	s2,208(sp)
     c8a:	49be                	lw	s3,204(sp)
     c8c:	4a2e                	lw	s4,200(sp)
     c8e:	612d                	addi	sp,sp,224
     c90:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c92:	00249713          	slli	a4,s1,0x2
     c96:	972a                	add	a4,a4,a0
     c98:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c9a:	0485                	addi	s1,s1,1
     c9c:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c9e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     ca2:	bff1                	j	c7e <ntru_encyrpt+0x60>

00000ca4 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	7179                	addi	sp,sp,-48
     ca6:	d422                	sw	s0,40(sp)
     ca8:	ce4e                	sw	s3,28(sp)
     caa:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	498d                	li	s3,3
     cae:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	d04a                	sw	s2,32(sp)
     cb4:	ca56                	sw	s5,20(sp)
     cb6:	c65e                	sw	s7,12(sp)
     cb8:	8932                	mv	s2,a2
     cba:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbc:	863e                	mv	a2,a5
     cbe:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc0:	8aae                	mv	s5,a1
     cc2:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	85a2                	mv	a1,s0
     cc6:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	d606                	sw	ra,44(sp)
     cca:	d226                	sw	s1,36(sp)
     ccc:	cc52                	sw	s4,24(sp)
     cce:	c85a                	sw	s6,16(sp)
     cd0:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd2:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd6:	f2aff0ef          	jal	ra,400 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	00140b13          	addi	s6,s0,1
     cde:	874a                	mv	a4,s2
     ce0:	86da                	mv	a3,s6
     ce2:	8652                	mv	a2,s4
     ce4:	85a6                	mv	a1,s1
     ce6:	38a5                	jal	55e <polydiv>
     ce8:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	87aa                	mv	a5,a0
     cec:	872a                	mv	a4,a0
     cee:	86a6                	mv	a3,s1
     cf0:	0536c163          	blt	a3,s3,d32 <ntru_deceypt+0x8e>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cf4:	4589                	li	a1,2
     cf6:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cfa:	4701                	li	a4,0
     cfc:	04874463          	blt	a4,s0,d44 <ntru_deceypt+0xa0>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	4701                	li	a4,0
     d02:	86a2                	mv	a3,s0
     d04:	85a2                	mv	a1,s0
     d06:	855e                	mv	a0,s7
     d08:	ef8ff0ef          	jal	ra,400 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	8756                	mv	a4,s5
     d0e:	86da                	mv	a3,s6
     d10:	8652                	mv	a2,s4
     d12:	85a6                	mv	a1,s1
     d14:	30a9                	jal	55e <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d16:	87aa                	mv	a5,a0
     d18:	0334cf63          	blt	s1,s3,d56 <ntru_deceypt+0xb2>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d1c:	50b2                	lw	ra,44(sp)
     d1e:	5422                	lw	s0,40(sp)
     d20:	5492                	lw	s1,36(sp)
     d22:	5902                	lw	s2,32(sp)
     d24:	49f2                	lw	s3,28(sp)
     d26:	4a62                	lw	s4,24(sp)
     d28:	4ad2                	lw	s5,20(sp)
     d2a:	4b42                	lw	s6,16(sp)
     d2c:	4bb2                	lw	s7,12(sp)
     d2e:	6145                	addi	sp,sp,48
     d30:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d32:	00269593          	slli	a1,a3,0x2
     d36:	95b2                	add	a1,a1,a2
     d38:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3a:	0685                	addi	a3,a3,1
     d3c:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d3e:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d42:	b77d                	j	cf0 <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
     d44:	4394                	lw	a3,0(a5)
     d46:	00d5d563          	bge	a1,a3,d50 <ntru_deceypt+0xac>
            a2[i] = (-1)*(q-a2[i]);
     d4a:	412686b3          	sub	a3,a3,s2
     d4e:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d50:	0705                	addi	a4,a4,1
     d52:	0791                	addi	a5,a5,4
     d54:	b765                	j	cfc <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
     d56:	00249713          	slli	a4,s1,0x2
     d5a:	972a                	add	a4,a4,a0
     d5c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d5e:	0485                	addi	s1,s1,1
     d60:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d62:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d66:	bf4d                	j	d18 <ntru_deceypt+0x74>

00000d68 <default_exc_handler>:
     d68:	0000006f          	j	d68 <default_exc_handler>

00000d6c <reset_handler>:
     d6c:	00000093          	li	ra,0
     d70:	8106                	mv	sp,ra
     d72:	8186                	mv	gp,ra
     d74:	8206                	mv	tp,ra
     d76:	8286                	mv	t0,ra
     d78:	8306                	mv	t1,ra
     d7a:	8386                	mv	t2,ra
     d7c:	8406                	mv	s0,ra
     d7e:	8486                	mv	s1,ra
     d80:	8506                	mv	a0,ra
     d82:	8586                	mv	a1,ra
     d84:	8606                	mv	a2,ra
     d86:	8686                	mv	a3,ra
     d88:	8706                	mv	a4,ra
     d8a:	8786                	mv	a5,ra
     d8c:	8806                	mv	a6,ra
     d8e:	8886                	mv	a7,ra
     d90:	8906                	mv	s2,ra
     d92:	8986                	mv	s3,ra
     d94:	8a06                	mv	s4,ra
     d96:	8a86                	mv	s5,ra
     d98:	8b06                	mv	s6,ra
     d9a:	8b86                	mv	s7,ra
     d9c:	8c06                	mv	s8,ra
     d9e:	8c86                	mv	s9,ra
     da0:	8d06                	mv	s10,ra
     da2:	8d86                	mv	s11,ra
     da4:	8e06                	mv	t3,ra
     da6:	8e86                	mv	t4,ra
     da8:	8f06                	mv	t5,ra
     daa:	8f86                	mv	t6,ra
     dac:	0000f117          	auipc	sp,0xf
     db0:	25410113          	addi	sp,sp,596 # 10000 <_stack_start>

00000db4 <_start>:
     db4:	00000d17          	auipc	s10,0x0
     db8:	47cd0d13          	addi	s10,s10,1148 # 1230 <_bss_start>
     dbc:	00001d97          	auipc	s11,0x1
     dc0:	204d8d93          	addi	s11,s11,516 # 1fc0 <_bss_end>
     dc4:	01bd5763          	bge	s10,s11,dd2 <main_entry>

00000dc8 <zero_loop>:
     dc8:	000d2023          	sw	zero,0(s10)
     dcc:	0d11                	addi	s10,s10,4
     dce:	ffaddde3          	bge	s11,s10,dc8 <zero_loop>

00000dd2 <main_entry>:
     dd2:	00000513          	li	a0,0
     dd6:	00000593          	li	a1,0
     dda:	18a000ef          	jal	ra,f64 <main>

00000dde <memcpy>:
     dde:	00a5c7b3          	xor	a5,a1,a0
     de2:	8b8d                	andi	a5,a5,3
     de4:	00c508b3          	add	a7,a0,a2
     de8:	e7a1                	bnez	a5,e30 <memcpy+0x52>
     dea:	478d                	li	a5,3
     dec:	04c7f263          	bgeu	a5,a2,e30 <memcpy+0x52>
     df0:	00357793          	andi	a5,a0,3
     df4:	872a                	mv	a4,a0
     df6:	eba9                	bnez	a5,e48 <memcpy+0x6a>
     df8:	ffc8f613          	andi	a2,a7,-4
     dfc:	fe060793          	addi	a5,a2,-32
     e00:	06f76763          	bltu	a4,a5,e6e <memcpy+0x90>
     e04:	02c77363          	bgeu	a4,a2,e2a <memcpy+0x4c>
     e08:	86ae                	mv	a3,a1
     e0a:	87ba                	mv	a5,a4
     e0c:	0006a803          	lw	a6,0(a3)
     e10:	0791                	addi	a5,a5,4
     e12:	0691                	addi	a3,a3,4
     e14:	ff07ae23          	sw	a6,-4(a5)
     e18:	fec7eae3          	bltu	a5,a2,e0c <memcpy+0x2e>
     e1c:	fff60793          	addi	a5,a2,-1
     e20:	8f99                	sub	a5,a5,a4
     e22:	9bf1                	andi	a5,a5,-4
     e24:	0791                	addi	a5,a5,4
     e26:	973e                	add	a4,a4,a5
     e28:	95be                	add	a1,a1,a5
     e2a:	01176663          	bltu	a4,a7,e36 <memcpy+0x58>
     e2e:	8082                	ret
     e30:	872a                	mv	a4,a0
     e32:	ff157ee3          	bgeu	a0,a7,e2e <memcpy+0x50>
     e36:	0005c783          	lbu	a5,0(a1)
     e3a:	0705                	addi	a4,a4,1
     e3c:	0585                	addi	a1,a1,1
     e3e:	fef70fa3          	sb	a5,-1(a4)
     e42:	ff176ae3          	bltu	a4,a7,e36 <memcpy+0x58>
     e46:	8082                	ret
     e48:	0005c683          	lbu	a3,0(a1)
     e4c:	0705                	addi	a4,a4,1
     e4e:	00377793          	andi	a5,a4,3
     e52:	fed70fa3          	sb	a3,-1(a4)
     e56:	0585                	addi	a1,a1,1
     e58:	d3c5                	beqz	a5,df8 <memcpy+0x1a>
     e5a:	0005c683          	lbu	a3,0(a1)
     e5e:	0705                	addi	a4,a4,1
     e60:	00377793          	andi	a5,a4,3
     e64:	fed70fa3          	sb	a3,-1(a4)
     e68:	0585                	addi	a1,a1,1
     e6a:	fff9                	bnez	a5,e48 <memcpy+0x6a>
     e6c:	b771                	j	df8 <memcpy+0x1a>
     e6e:	41d4                	lw	a3,4(a1)
     e70:	0005a283          	lw	t0,0(a1)
     e74:	0085af83          	lw	t6,8(a1)
     e78:	00c5af03          	lw	t5,12(a1)
     e7c:	0105ae83          	lw	t4,16(a1)
     e80:	0145ae03          	lw	t3,20(a1)
     e84:	0185a303          	lw	t1,24(a1)
     e88:	01c5a803          	lw	a6,28(a1)
     e8c:	c354                	sw	a3,4(a4)
     e8e:	5194                	lw	a3,32(a1)
     e90:	00572023          	sw	t0,0(a4)
     e94:	01f72423          	sw	t6,8(a4)
     e98:	01e72623          	sw	t5,12(a4)
     e9c:	01d72823          	sw	t4,16(a4)
     ea0:	01c72a23          	sw	t3,20(a4)
     ea4:	00672c23          	sw	t1,24(a4)
     ea8:	01072e23          	sw	a6,28(a4)
     eac:	d314                	sw	a3,32(a4)
     eae:	02470713          	addi	a4,a4,36
     eb2:	02458593          	addi	a1,a1,36
     eb6:	faf76ce3          	bltu	a4,a5,e6e <memcpy+0x90>
     eba:	b7a9                	j	e04 <memcpy+0x26>

00000ebc <memset>:
     ebc:	433d                	li	t1,15
     ebe:	872a                	mv	a4,a0
     ec0:	02c37363          	bgeu	t1,a2,ee6 <memset+0x2a>
     ec4:	00f77793          	andi	a5,a4,15
     ec8:	efbd                	bnez	a5,f46 <memset+0x8a>
     eca:	e5ad                	bnez	a1,f34 <memset+0x78>
     ecc:	ff067693          	andi	a3,a2,-16
     ed0:	8a3d                	andi	a2,a2,15
     ed2:	96ba                	add	a3,a3,a4
     ed4:	c30c                	sw	a1,0(a4)
     ed6:	c34c                	sw	a1,4(a4)
     ed8:	c70c                	sw	a1,8(a4)
     eda:	c74c                	sw	a1,12(a4)
     edc:	0741                	addi	a4,a4,16
     ede:	fed76be3          	bltu	a4,a3,ed4 <memset+0x18>
     ee2:	e211                	bnez	a2,ee6 <memset+0x2a>
     ee4:	8082                	ret
     ee6:	40c306b3          	sub	a3,t1,a2
     eea:	068a                	slli	a3,a3,0x2
     eec:	00000297          	auipc	t0,0x0
     ef0:	9696                	add	a3,a3,t0
     ef2:	00a68067          	jr	10(a3)
     ef6:	00b70723          	sb	a1,14(a4)
     efa:	00b706a3          	sb	a1,13(a4)
     efe:	00b70623          	sb	a1,12(a4)
     f02:	00b705a3          	sb	a1,11(a4)
     f06:	00b70523          	sb	a1,10(a4)
     f0a:	00b704a3          	sb	a1,9(a4)
     f0e:	00b70423          	sb	a1,8(a4)
     f12:	00b703a3          	sb	a1,7(a4)
     f16:	00b70323          	sb	a1,6(a4)
     f1a:	00b702a3          	sb	a1,5(a4)
     f1e:	00b70223          	sb	a1,4(a4)
     f22:	00b701a3          	sb	a1,3(a4)
     f26:	00b70123          	sb	a1,2(a4)
     f2a:	00b700a3          	sb	a1,1(a4)
     f2e:	00b70023          	sb	a1,0(a4)
     f32:	8082                	ret
     f34:	0ff5f593          	andi	a1,a1,255
     f38:	00859693          	slli	a3,a1,0x8
     f3c:	8dd5                	or	a1,a1,a3
     f3e:	01059693          	slli	a3,a1,0x10
     f42:	8dd5                	or	a1,a1,a3
     f44:	b761                	j	ecc <memset+0x10>
     f46:	00279693          	slli	a3,a5,0x2
     f4a:	00000297          	auipc	t0,0x0
     f4e:	9696                	add	a3,a3,t0
     f50:	8286                	mv	t0,ra
     f52:	fa8680e7          	jalr	-88(a3)
     f56:	8096                	mv	ra,t0
     f58:	17c1                	addi	a5,a5,-16
     f5a:	8f1d                	sub	a4,a4,a5
     f5c:	963e                	add	a2,a2,a5
     f5e:	f8c374e3          	bgeu	t1,a2,ee6 <memset+0x2a>
     f62:	b7a5                	j	eca <memset+0xe>

00000f64 <main>:


int main(){
     f64:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f68:	0c000613          	li	a2,192
     f6c:	00000597          	auipc	a1,0x0
     f70:	20058593          	addi	a1,a1,512 # 116c <__DTOR_END__+0xc0>
     f74:	0068                	addi	a0,sp,12
int main(){
     f76:	42112623          	sw	ra,1068(sp)
     f7a:	42812423          	sw	s0,1064(sp)
     f7e:	42912223          	sw	s1,1060(sp)
     f82:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f86:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f8a:	3d91                	jal	dde <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f8c:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f90:	00000417          	auipc	s0,0x0
     f94:	29c40413          	addi	s0,s0,668 # 122c <_edata>
    keys = generate_keys(N, p, q);
     f98:	06500613          	li	a2,101
     f9c:	458d                	li	a1,3
     f9e:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     fa2:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     fa4:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     fa8:	3251                	jal	92c <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     faa:	4781                	li	a5,0
     fac:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fae:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fb2:	00f506b3          	add	a3,a0,a5
     fb6:	4290                	lw	a2,0(a3)
     fb8:	1314                	addi	a3,sp,416
     fba:	96be                	add	a3,a3,a5
     fbc:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fbe:	0791                	addi	a5,a5,4
     fc0:	fee799e3          	bne	a5,a4,fb2 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fc4:	1cd8                	addi	a4,sp,628
     fc6:	1a850793          	addi	a5,a0,424
     fca:	27c50693          	addi	a3,a0,636
     fce:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fd0:	4390                	lw	a2,0(a5)
     fd2:	0791                	addi	a5,a5,4
     fd4:	0711                	addi	a4,a4,4
     fd6:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fda:	fed79be3          	bne	a5,a3,fd0 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fde:	01f8                	addi	a4,sp,204
     fe0:	35050793          	addi	a5,a0,848
     fe4:	42450613          	addi	a2,a0,1060
     fe8:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fea:	438c                	lw	a1,0(a5)
     fec:	0791                	addi	a5,a5,4
     fee:	0711                	addi	a4,a4,4
     ff0:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     ff4:	fec79be3          	bne	a5,a2,fea <main+0x86>
     ff8:	06b0                	addi	a2,sp,840
     ffa:	4fc50513          	addi	a0,a0,1276
     ffe:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1000:	4398                	lw	a4,0(a5)
    1002:	0791                	addi	a5,a5,4
    1004:	0611                	addi	a2,a2,4
    1006:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    100a:	fea79be3          	bne	a5,a0,1000 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    100e:	bbbbc4b7          	lui	s1,0xbbbbc
    1012:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	8742                	mv	a4,a6
    1018:	0070                	addi	a2,sp,12
    101a:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    101e:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    1026:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	3edd                	jal	c1e <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    102a:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    102c:	ccccd4b7          	lui	s1,0xccccd
    1030:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    1036:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1038:	458d                	li	a1,3
    103a:	874a                	mv	a4,s2
    103c:	34810813          	addi	a6,sp,840
    1040:	1314                	addi	a3,sp,416
    1042:	06500613          	li	a2,101
    1046:	03500513          	li	a0,53
    104a:	39a9                	jal	ca4 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    104c:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1050:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    1054:	c004                	sw	s1,0(s0)
    1056:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    1058:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    105c:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    1060:	0070                	addi	a2,sp,12
    1062:	00f506b3          	add	a3,a0,a5
    1066:	963e                	add	a2,a2,a5
    1068:	4210                	lw	a2,0(a2)
    106a:	4294                	lw	a3,0(a3)
    106c:	02d60363          	beq	a2,a3,1092 <main+0x12e>
            resultkon[0] = 0xBABABABA;
    1070:	babac7b7          	lui	a5,0xbabac
    1074:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1078:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    107a:	42c12083          	lw	ra,1068(sp)
    107e:	42812403          	lw	s0,1064(sp)
    1082:	42412483          	lw	s1,1060(sp)
    1086:	42012903          	lw	s2,1056(sp)
    108a:	4501                	li	a0,0
    108c:	43010113          	addi	sp,sp,1072
    1090:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    1092:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    1094:	0791                	addi	a5,a5,4
    1096:	fcb795e3          	bne	a5,a1,1060 <main+0xfc>
    109a:	b7c5                	j	107a <main+0x116>

0000109c <__CTOR_LIST__>:
	...

000010a4 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010ac <.rodata>:
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	ffff                	0xffff
    10b2:	ffff                	0xffff
    10b4:	0000                	unimp
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	ffff                	0xffff
    10be:	ffff                	0xffff
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0000                	unimp
    10ca:	0000                	unimp
    10cc:	0001                	nop
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0000                	unimp
    10d6:	0000                	unimp
    10d8:	ffff                	0xffff
    10da:	ffff                	0xffff
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	ffff                	0xffff
    10e2:	ffff                	0xffff
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	0000                	unimp
    10ea:	0000                	unimp
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0000                	unimp
    10f6:	0000                	unimp
    10f8:	ffff                	0xffff
    10fa:	ffff                	0xffff
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	0000                	unimp
    110a:	0000                	unimp
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	0000                	unimp
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	ffff                	0xffff
    111e:	ffff                	0xffff
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	ffff                	0xffff
    1126:	ffff                	0xffff
    1128:	0000                	unimp
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	ffff                	0xffff
    1132:	ffff                	0xffff
    1134:	0000                	unimp
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	ffff                	0xffff
    113e:	ffff                	0xffff
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	ffff                	0xffff
    1146:	ffff                	0xffff
    1148:	0000                	unimp
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0000                	unimp
    1156:	0000                	unimp
    1158:	ffff                	0xffff
    115a:	ffff                	0xffff
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	ffff                	0xffff
    1162:	ffff                	0xffff
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0000                	unimp
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0002                	c.slli64	zero
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0002                	c.slli64	zero
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0000                	unimp
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0002                	c.slli64	zero
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0000                	unimp
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0002                	c.slli64	zero
    11b2:	0000                	unimp
    11b4:	0000                	unimp
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0000                	unimp
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0000                	unimp
    11d6:	0000                	unimp
    11d8:	0002                	c.slli64	zero
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0002                	c.slli64	zero
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0000                	unimp
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0002                	c.slli64	zero
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0002                	c.slli64	zero
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0002                	c.slli64	zero
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

0000122c <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    122c:	bebe                	fsd	fa5,376(sp)
    122e:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001230 <_bss_start>:
	...

00001488 <product2>:
	...

000016e0 <result>:
	...

00001938 <ti_2>:
	...

00001ac8 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	1f2c                	addi	a1,sp,952
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	000005ef          	jal	a1,c <__DYNAMIC+0xc>
      10:	7f0c                	flw	fa1,56(a4)
      12:	64000003          	lb	zero,1600(zero) # 640 <polydiv+0xe2>
      16:	0002                	c.slli64	zero
      18:	6800                	flw	fs0,16(s0)
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0475                	addi	s0,s0,29
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	7308                	flw	fa0,32(a4)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0494                	addi	a3,sp,576
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	00031007          	0x31007
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	cc04                	sw	s1,24(s0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	00000353          	fadd.s	ft6,ft0,ft0,rne
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
      80:	0069                	c.nop	26
      82:	0000                	unimp
      84:	2706                	fld	fa4,64(sp)
      86:	0004                	0x4
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	6706                	flw	fa4,64(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	8f06                	mv	t5,ra
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	034d                	addi	t1,t1,19
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0000022f          	0x22f
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x7e>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	0551                	addi	a0,a0,20
      e6:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	5d07a403          	lw	s0,1488(a5)
            a1[length-2] = a1[length-2] + a2[length-2];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	590c                	lw	a1,48(a0)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
} //end of function
      f8:	00a8                	addi	a0,sp,72
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0004                	0x4
    asm volatile(
      fe:	c406                	sw	ra,8(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
            for (i = 0; i < (length / 3); i++) {
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	c206                	sw	ra,4(sp)
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	5706                	lw	a4,96(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    asm volatile(
     122:	0000                	unimp
     124:	e706                	fsw	ft1,140(sp)
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
            for (i = 0; i < ((length-2) / 3); i++) {
     12e:	0000                	unimp
    asm volatile(
     130:	f80e                	fsw	ft3,48(sp)
     132:	0001                	nop
}
     134:	1800                	addi	s0,sp,48
    switch(length%3) {
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	04e5                	addi	s1,s1,25
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	2d0c                	fld	fa1,24(a0)
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	01e1                	addi	gp,gp,24
            a1[length-1] = a2[length-1];
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	630c                	flw	fa1,0(a4)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
            a1[length-1] = a2[length-1];
     188:	0014                	0x14
            a1[length-2] = a2[length-2];
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
} //end of function
     194:	a000                	fsd	fs0,0(s0)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
    asm volatile(
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	1f0e                	slli	t5,t5,0x23
     1a2:	0002                	c.slli64	zero
            for (i = 0; i < (length / 3); i++) {
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
    asm volatile(
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <array_equ+0x78>
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	760c                	flw	fa1,40(a2)
     1bc:	0005                	c.nop	1
    asm volatile(
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	012c                	addi	a1,sp,136
     1ca:	0000                	unimp
    asm volatile(
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
}
     1d0:	0000                	unimp
    switch(length%3) {
     1d2:	0800                	addi	s0,sp,16
     1d4:	0b0c                	addi	a1,sp,400
     1d6:	04000007          	0x4000007
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03f1                	addi	t2,t2,28
     1e4:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
    asm volatile(
     1ea:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     1ec:	1000                	addi	s0,sp,32
     1ee:	a90c                	fsd	fa1,16(a0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
            for (i = 0; i < ((length-2) / 3); i++) {
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
    asm volatile(
     1fc:	0668                	addi	a0,sp,780
            for (i = 0; i < ((length-2) / 3); i++) {
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
            a1[length-1] = a1[length-1] % mod;
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	9e0c                	0x9e0c
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     214:	0c1c                	addi	a5,sp,528
     216:	06cd                	addi	a3,a3,19
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
    asm volatile(
     21e:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
            a1[length-1] = a1[length-1] % mod;
     224:	0000013b          	0x13b
            a1[length-2] = a1[length-2] % mod;
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
} //end of function
     232:	000001c7          	fmsub.s	ft3,ft0,ft0,ft0,rne
    asm volatile(
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     23e:	000c                	0xc
     240:	0000                	unimp
    asm volatile(
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
            for (i = 0; i < ((length-1) / 3); i++) {
     24c:	000005ab          	0x5ab
    asm volatile(
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
            for (i = 0; i < ((length-2) / 3); i++) {
     25a:	016a                	slli	sp,sp,0x1a
     25c:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
    int line[size_b][size_a + size_b];
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
    int line[size_b][size_a + size_b];
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f 0a11 0004      	0x40a11001f
     27c:	9000                	0x9000
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	e50c                	fsw	fa1,8(a0)
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x52>
    int line[size_b][size_a + size_b];
     290:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     292:	0c00                	addi	s0,sp,528
    int line[size_b][size_a + size_b];
     294:	04fd                	addi	s1,s1,31
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
    int pola[size_a];
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	dc0c                	sw	a1,56(s0)
    int line[size_b][size_a + size_b];
     2a2:	0001                	nop
    int pola[size_a];
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
    int polb[size_b];
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
    int pola[size_a];
     2ae:	0000013b          	0x13b
    int polb[size_b];
     2b2:	6704                	flw	fs1,8(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
    int line[size_b][size_a + size_b];
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
    int polb[size_b];
     2be:	0002                	c.slli64	zero
    int pola[size_a];
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
    for (i = 0; i < size_b; ++i){
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
            product[j] = 0;
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
    array_equ(pola,a,size_a);
     2d6:	1300                	addi	s0,sp,416
     2d8:	a80e                	fsd	ft3,16(sp)
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
     2e6:	0126                	slli	sp,sp,0x9
     2e8:	0000                	unimp
    array_mod(pola,mod,size_a);
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    array_equ(polb,b,size_b);
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
    array_mod(polb,mod,size_b);
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
    if(star_mult == 1){
     306:	cf0e                	sw	gp,156(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
            product[j] = 0;
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
            line[i][j] = 0;
     32c:	775f 0400 07bd      	0x7bd0400775f
            product[j] = 0;
     332:	005d                	c.nop	23
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
     338:	00000163          	beqz	zero,33a <polymult+0xdc>
    for (i = 0; i < size_b; ++i){
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	5e0c                	lw	a1,56(a2)
     346:	0002                	c.slli64	zero
    if(star_mult == 1){
     348:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
    for (i = 0; i < size_b; ++i){
     352:	625f 0066 c004      	0xc0040066625f
		array_add(product,line[i],size_a+size_b-1);
     358:	d811                	beqz	s0,26c <polymult+0xe>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	980c                	0x980c
    for(i = 0; i < size_b; ++i){
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
    array_mod(product,mod,(size_a+size_b-1));
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0149                	addi	sp,sp,18
     36e:	0000                	unimp
}
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	0f0c                	addi	a1,sp,912
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	03a2                	slli	t2,t2,0x8
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0x5c>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	610c                	flw	fa1,0(a0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	000006e7          	jalr	a3,zero # 0 <__DYNAMIC>
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <array_equ+0x72>
     3a8:	0006                	c.slli	zero,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3aa:	2c00                	fld	fs0,24(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
        for (j = size_b -1; j >= 0; j = j-1){
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c0:	0012                	c.slli	zero,0x4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult+0x122>
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	0c3c                	addi	a5,sp,536
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3d4:	0120                	addi	s0,sp,136
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	3b11                	jal	ee <array_add+0x5c>
     3dc:	0006                	c.slli	zero,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     3de:	4000                	lw	s0,0(s0)
     3e0:	b20c                	fsd	fa1,32(a2)
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
	array_mod(line[i],mod,size_a+size_b-1);
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
    for (i = 0; i < size_b; ++i){
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
		array_add(product,line[i],size_a+size_b-1);
     3f4:	d811                	beqz	s0,308 <polymult+0xaa>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
    for(i = 0; i < size_b; ++i){
     3fa:	790c                	flw	fa1,48(a0)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01a0                	addi	s0,sp,200
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
    int line[size_b][size_a + size_b];
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x40>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0379                	addi	t1,t1,30
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
    int line[size_b][size_a + size_b];
     42e:	d70c                	sw	a1,40(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
    int pola[size_a];
     43a:	0c5c                	addi	a5,sp,532
     43c:	000004af          	0x4af
     440:	ea04                	fsw	fs1,16(a2)
    int line[size_b][size_a + size_b];
     442:	5d09                	li	s10,-30
    int pola[size_a];
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
    int polb[size_b];
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
    int pola[size_a];
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int polb[size_b];
     452:	6715                	lui	a4,0x5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
    int line[size_b][size_a + size_b];
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     45c:	bb15                	j	190 <array_equ+0x5a>
    int pola[size_a];
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
    int polb[size_b];
     462:	005d                	c.nop	23
    for (i = 0; i < size_b; ++i){
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
            product2[j] = 0;
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     472:	00053517          	auipc	a0,0x53
    array_equ(pola,a,size_a);
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
    array_equ(polb,b,size_b);
     482:	048d                	addi	s1,s1,3
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
    if(star_mult == 1){
     48e:	1800                	addi	s0,sp,48
     490:	0172                	slli	sp,sp,0x1c
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	0240                	addi	s0,sp,260
        for (j = size_b -1; j >= 0; j = j-1){
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
            product2[j] = 0;
     4aa:	1808                	addi	a0,sp,48
     4ac:	01f0                	addi	a2,sp,204
            line[i][j] = 0;
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
            product2[j] = 0;
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
        for(j = 0; j < size_a + size_b -1; ++j){
     4b8:	180c                	addi	a1,sp,48
     4ba:	04f8                	addi	a4,sp,588
     4bc:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
                line[size_b-1-j][k] = pola[k]*polb[j];
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
     4d6:	0514                	addi	a3,sp,640
     4d8:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4da:	7204                	flw	fs1,32(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e2:	1830                	addi	a2,sp,56
     4e4:	0502                	c.slli64	a0
        for (j = size_b -1; j >= 0; j = j-1){
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4f0:	1834                	addi	a3,sp,56
	   array_add(product2,line[i],size_a+size_b-1);
     4f2:	041c                	addi	a5,sp,512
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
    for(i=0;i<size_b;++i){
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
}
     4fe:	1838                	addi	a4,sp,56
     500:	050a                	slli	a0,a0,0x2
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	0345                	addi	t1,t1,17
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0215                	addi	tp,tp,5
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     528:	1844                	addi	s1,sp,52
     52a:	0701                	addi	a4,a4,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	00000443          	fmadd.s	fs0,ft0,ft0,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     53c:	7d04                	flw	fs1,56(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
            for (k = size_a-1; k >= 0; k = k-1 ){
     544:	184c                	addi	a1,sp,52
     546:	0248                	addi	a0,sp,260
        for (j = size_b -1; j >= 0; j = j-1){
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
	   array_add(product2,line[i],size_a+size_b-1);
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0198                	addi	a4,sp,192
     556:	0000                	unimp
    for(i=0;i<size_b;++i){
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
    int v[size_N];
     560:	1854                	addi	a3,sp,52
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     562:	0486                	slli	s1,s1,0x1
    int v[size_N];
     564:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	040a                	slli	s0,s0,0x2
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	2319                	jal	a84 <generate_keys+0x158>
    int v[size_N];
     580:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
    int q[size_N];
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	06a8                	addi	a0,sp,840
    int num_temp[size_N];
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
    int denum_temp[size_D];
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
    int num_temp[size_N];
     59c:	5119                	li	sp,-26
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     59e:	0001                	nop
    int denum_temp[size_D];
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5a4:	6810                	flw	fa2,16(s0)
    int v[size_N];
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
       array_equ(num_temp,num,size_N);
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0136                	slli	sp,sp,0xd
     5ae:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
    int denum_temp[size_D];
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
       array_equ(num_temp,num,size_N);
     5b8:	02ec                	addi	a1,sp,332
       array_mod(num_temp, mod, size_N);
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
    int denum_temp[size_D];
     5c2:	0801                	addi	a6,a6,0
    array_equ(denum_temp,denum,size_D);
     5c4:	047c                	addi	a5,sp,524
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
    array_mod(denum_temp,mod,size_D);
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
    for (i = 0; i < size_N; ++i){
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
    for (i = size_D-1; i >= 0; i = i-1){
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     5e6:	f115                	bnez	a0,50a <polymult2+0x10a>
     5e8:	0005                	c.nop	1
        if ( (b_N*u)%mod == 1 )
     5ea:	1500                	addi	s0,sp,672
    for (u = 0; u < mod; ++u){
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
        q[i] = 0;
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
        v[i] = 0;
     5fc:	1400                	addi	s0,sp,544
        q[i] = 0;
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
        v[i] = 0;
     602:	0000061b          	0x61b
    for (i = 0; i < size_N; ++i){
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
        if( denum_temp[i] != 0 )
     60a:	1500                	addi	s0,sp,672
    for (i = size_D-1; i >= 0; i = i-1){
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
     618:	0000                	unimp
    for (u = 0; u < mod; ++u){
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
        if( num_temp[i] != 0 )
     61e:	0005                	c.nop	1
    for (i = size_N-1; i >= 0; i = i-1){
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
    while (d >= d2){
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
      array_equ(result,q,size_N);
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        result[i] = num_temp[i-size_N];
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
    for(i = size_N; i < (2*size_N); ++i){
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
}
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
     65c:	04bd                	addi	s1,s1,15
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
     668:	721a                	flw	ft4,164(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	e518                	fsw	fa4,8(a0)
     678:	0004                	0x4
        v[(d-d2)] = u*r_d;
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x156>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	e918                	fsw	fa4,16(a0)
        array_mod(v, mod, size_N);
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     690:	0400                	addi	s0,sp,512
     692:	b718                	fsd	fa4,40(a4)
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
        array_mod(product, mod, size_N);
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     6a2:	6804                	flw	fs1,16(s0)
        array_mod(product, mod, size_N);
     6a4:	0006                	c.slli	zero,0x1
        for (i = 0; i < size_N; ++i){
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
        array_mod(num_temp, mod, size_N);
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
        array_add(q, v, size_N);
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	0546                	slli	a0,a0,0x11
        array_mod(q, mod, size_N);
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
        for (i = size_N-1; i >= 0; i = i-1){
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0540                	addi	s0,sp,644
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
            num_temp[i] = num_temp[i] - product[i];
     6d8:	0000003f 12014704 	0x120147040000003f
     6e0:	003a                	c.slli	zero,0xe
        for (i = 0; i < size_N; ++i){
     6e2:	0000                	unimp
     6e4:	000c                	0xc
            num_temp[i] = num_temp[i] - product[i];
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
        for (i = 0; i < size_N; ++i){
     6ec:	0006                	c.slli	zero,0x1
            if( num_temp[i] != 0 )
     6ee:	0a00                	addi	s0,sp,272
        for (i = size_N-1; i >= 0; i = i-1){
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
            v[i] = 0;
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
        for (i = 0; i < size_N; ++i){
     700:	5118                	lw	a4,32(a0)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
        result[i] = num_temp[i-size_N];
     706:	69180287          	0x69180287
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	9e18                	0x9e18
     710:	0005                	c.nop	1
    for(i = size_N; i < (2*size_N); ++i){
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
    int ri_2[size]; // MX-ring poly, a
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71c:	3818                	fld	fa4,48(s0)
    int ri_2[size]; // MX-ring poly, a
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	d818                	sw	a4,48(s0)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
     736:	2400                	fld	fs0,8(s0)
     738:	0018                	0x18
     73a:	0002                	c.slli64	zero
     73c:	0400                	addi	s0,sp,512
    int ri_2[size]; // MX-ring poly, a
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     744:	4800                	lw	s0,16(s0)
     746:	e018                	fsw	fa4,0(s0)
     748:	0004                	0x4
    int ri[size];
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
    int ti_1[size]; // ti_1[0] = 1
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	ee18                	fsw	fa4,24(a2)
    int ti[size];
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
    int qi_1[size];
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
    int temp[size];
     762:	eb18                	fsw	fa4,16(a4)
     764:	0004                	0x4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
    int ri_2[size]; // MX-ring poly, a
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
    int temp[size];
     770:	f318                	fsw	fa4,32(a4)
    for (i = 0; i < size; ++i) {
     772:	0006                	c.slli	zero,0x1
        ti_2[i] = 0;
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
    for (i = 0; i < size; ++i) {
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
    array_equ(ri_2,polyR,size);
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
    array_equ(ri_1,polyf,size);
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	9818                	0x9818
     78e:	0006                	c.slli	zero,0x1
    ti_1[0] = 1;
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
        for (i = N + 1; i < (2 * N + 2); ++i) {
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	2c18                	fld	fa4,24(s0)
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
            ti[i] = ti_2[i] - temp[i];
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
    array_mod(ri_2,mod,size);
     7a6:	8800                	0x8800
     7a8:	cf18                	sw	a4,24(a4)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
    array_mod(ri_1,mod,size);
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7b6:	b918                	fsd	fa4,48(a0)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	a818                	fsd	fa4,16(s0)
     7d4:	0001                	nop
    array_mod(temp,mod,size);
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
    array_equ(qi_1,res1,size);
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
     7f0:	0000                	unimp
    array_mod(qi_1,mod,size);
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7fa:	c400                	sw	s0,8(s0)
     7fc:	8b18                	0x8b18
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
    array_equ(temp,res2,size);
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
    array_mod(temp,mod,size);
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
    array_mod(ti,mod,size);
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
array_equ(ri_2,ri_1,size);
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
array_equ(ri_1,ri,size);
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
array_equ(ti_2,ti_1,size);
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
array_equ(ti_1,ti,size);
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	03d8                	addi	a4,sp,452
        controlR = 0;
     848:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
    while (controlR != 0) {
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
        for (j = 0; j < mod; ++j) {
     854:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x8>
    }
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	351d                	jal	6b2 <polydiv+0x154>
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
        ti_1[i] = 0;
     89a:	06b8                	addi	a4,sp,840
        ti_2[i] = 0;
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
        ti_1[i] = 0;
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
    for (i = 0; i < size; ++i) {
     8a6:	0900                	addi	s0,sp,144
            ri[i - (N + 1)] = res[i];
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b8:	00ad                	addi	ra,ra,11
            temp[i] = ri_2[i] - ri[i];
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
            ti[i] = ti_2[i] - temp[i];
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8e4:	0410                	addi	a2,sp,512
            ti[i] = ti_2[i] - temp[i];
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
              qi_1[i] = 0;
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
            controlR += ri[i];
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
              qi_1[i] = 0;
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8fe:	0002                	c.slli64	zero
            controlR += ri[i];
     900:	e320                	fsw	fs0,64(a4)
        for (i = 0; i < N + 1; ++i) {
     902:	0005                	c.nop	1
            if (((ri_2[0] * j) % mod) == 1)
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05dc                	addi	a5,sp,708
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
        for (j = 0; j < mod; ++j) {
     914:	046d1d03          	lh	s10,70(s10)
            ti_2[i] = (ti_2[i] * j) % mod;
     918:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     91a:	1221                	addi	tp,tp,-24
     91c:	0004                	0x4
            ti_2[i] = (ti_2[i] * j) % mod;
     91e:	0600                	addi	s0,sp,768
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     92a:	3600                	fld	fs0,40(a2)
int* generate_keys(int N, int p, int q){
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	8222                	mv	tp,s0
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	1230                	addi	a2,sp,296
     946:	0000                	unimp
     948:	8e22                	mv	t3,s0
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1488                	addi	a0,sp,608
     958:	0000                	unimp
     95a:	4622                	lw	a2,8(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     966:	0305                	addi	t1,t1,1
     968:	16e0                	addi	s0,sp,876
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	6e220063          	beq	tp,sp,105a <main+0xf6>
     97e:	0004                	0x4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1938                	addi	a4,sp,184
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ac803          	lbu	a6,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	3624                	fld	fs1,104(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	122c                	addi	a1,sp,296
     9d6:	0000                	unimp
     9d8:	0625                	addi	a2,a2,9
     9da:	01000007          	0x1000007
     9de:	0314                	addi	a3,sp,384
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	6400                	flw	fs0,8(s0)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
    int polyR[N+1];
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f0:	2600000b          	0x2600000b
    int polyR[N+1];
     9f4:	042e                	slli	s0,s0,0xb
     9f6:	0000                	unimp
     9f8:	1501                	addi	a0,a0,-32
     9fa:	0b630a03          	lb	s4,182(t1)
     9fe:	0000                	unimp
    polyR[N] = 1;
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0a:	0316                	slli	t1,t1,0x5
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	00000363          	beqz	zero,a1c <generate_keys+0xf0>
     a1a:	1701                	addi	a4,a4,-32
     a1c:	0b630a03          	lb	s4,182(t1)
     a20:	0000                	unimp
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	0318                	addi	a4,sp,384
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	0319                	addi	t1,t1,6
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	031a                	slli	t1,t1,0x6
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	e928                	fsw	fa0,80(a0)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	031c                	addi	a5,sp,384
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x48>
     a5a:	057f2677          	0x57f2677
     a5e:	0000                	unimp
     a60:	1d01                	addi	s10,s10,-32
     a62:	0b790903          	lb	s2,183(s2) # 20b7 <_min_stack+0xb7>
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
    polyR[0] = -1;
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     a72:	031e                	slli	t1,t1,0x7
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
    for (i = N; i < 55; ++i ){
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
    for(i = 0; i < N; ++i){
     a82:	1f01                	addi	t5,t5,-32
        random_keys[i] = f[i];
     a84:	0b9d0903          	lb	s2,185(s10)
     a88:	0000                	unimp
     a8a:	b426                	fsd	fs1,40(sp)
    for(i = 0; i < N; ++i){
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	0320                	addi	s0,sp,392
     a92:	af09                	j	11a4 <__DTOR_END__+0xf8>
    for(i = N; i < (2*N); ++i){
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
        random_keys[i] = g[i-N];
     a9c:	0250                	addi	a2,sp,260
     a9e:	0000                	unimp
     aa0:	2101                	jal	ea0 <memcpy+0xc2>
     aa2:	0bc10903          	lb	s2,188(sp)
    for(i = N; i < (2*N); ++i){
     aa6:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     aa8:	4d26                	lw	s10,72(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     aae:	0322                	slli	t1,t1,0x8
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x86>
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
    for(i = (2*N); i < (3*N); ++i){
     aba:	0069                	c.nop	26
        random_keys[i] = fp[i-(2*N)];
     abc:	2301                	jal	fbc <main+0x58>
     abe:	005d0903          	lb	s2,5(s10)
     ac2:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     ac8:	000f8c2b          	0xf8c2b
     acc:	1900                	addi	s0,sp,176
     ace:	001f ec00 000a      	0xaec00001f
    for(i = (3*N); i < (4*N); ++i){
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
        random_keys[i] = fq[i-(3*N)];
     adc:	012c                	addi	a1,sp,136
     ade:	6c03055b          	0x6c03055b
     ae2:	0011                	c.nop	4
    for(i = (3*N); i < (4*N); ++i){
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
    fg = polymult2(fq, N, g, N, 0);
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	000faa2b          	0xfaa2b
     af0:	bc00                	fsd	fs0,56(s0)
    for(i = 0; i < (2*N-1); ++i){
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     afe:	2c35                	jal	d3a <ntru_deceypt+0x96>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0xea>
     b04:	012c                	addi	a1,sp,136
    for(i = (4*N); i < (5*N); ++i){
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	102a                	c.slli	zero,0x2a
     b0e:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
    for(i = (4*N); i < (5*N); ++i){
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    for(i = (5*N); i < (6*N+1); ++i){
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
        random_keys[i] = polyR[i-(5*N)];
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x118>
    for(i = (5*N); i < (6*N+1); ++i){
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0xd1>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	104c                	addi	a1,sp,36
}
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x26>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
        polyR[i] = 0;
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
    for(i = 1; i < N; ++i){
     b82:	692e                	flw	fs2,200(sp)
        f[i] = 0;
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
        g[i] = 0;
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
    for (i = N; i < 55; ++i ){
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
        random_keys[i] = f[i];
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
    for(i = 0; i < N; ++i){
     bb0:	005d                	c.nop	23
        random_keys[i] = f[i];
     bb2:	0000                	unimp
    for(i = 0; i < N; ++i){
     bb4:	0bc1                	addi	s7,s7,16
        random_keys[i] = g[i-N];
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
    for(i = N; i < (2*N); ++i){
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
        random_keys[i] = fq[i-(3*N)];
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
    for(i = (3*N); i < (4*N); ++i){
     be4:	2f00                	fld	fs0,24(a4)
        random_keys[i] = fq[i-(3*N)];
     be6:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
        fg[i] = fg[i]*p;
     bea:	e701                	bnez	a4,bf2 <generate_keys+0x2c6>
    for(i = 0; i < (2*N-1); ++i){
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2d8>
        fg[i] = fg[i]*p;
     bf2:	0ca4                	addi	s1,sp,600
     bf4:	0000                	unimp
     bf6:	00c4                	addi	s1,sp,68
    for(i = 0; i < (2*N-1); ++i){
     bf8:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	5d1702e7          	jalr	t0,1489(a4) # 55d1 <_stack_len+0x15d1>
    for(i = (4*N); i < (5*N); ++i){
     c08:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
     c12:	e701                	bnez	a4,c1a <generate_keys+0x2ee>
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
    for(i = (5*N); i < (6*N+1); ++i){
     c18:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c1a:	021d                	addi	tp,tp,7
    for(i = (5*N); i < (6*N+1); ++i){
     c1c:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	5d2502e7          	jalr	t0,1490(a0) # 53a44 <_stack_start+0x43a44>
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2e:	00b8                	addi	a4,sp,72
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	0000                	unimp
     c32:	e701                	bnez	a4,c3a <ntru_encyrpt+0x1c>
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x2e>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c3a:	0000028b          	0x28b
     c3e:	b431                	j	64a <polydiv+0xec>
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c44:	634002e7          	jalr	t0,1588(zero) # 0 <__DYNAMIC>
    temp = polymult(public_key,N,random_val,48,q,0);
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	042e                	slli	s0,s0,0xb
     c52:	0000                	unimp
     c54:	e701                	bnez	a4,c5c <ntru_encyrpt+0x3e>
     c56:	5402                	lw	s0,32(sp)
array_add(temp,message,48);
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x50>
     c5c:	02ee                	slli	t0,t0,0x1b
    temp = polymult(public_key,N,random_val,48,q,0);
     c5e:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c60:	c031                	beqz	s0,ca4 <ntru_deceypt>
     c62:	0006                	c.slli	zero,0x1
array_add(temp,message,48);
     c64:	0100                	addi	s0,sp,128
     c66:	636602e7          	jalr	t0,1590(a2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0f00000b          	0xf00000b
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x32>
     c72:	0300                	addi	s0,sp,384
     c74:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c76:	e901                	bnez	a0,c86 <ntru_encyrpt+0x68>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x72>
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
}
     c82:	02ea                	slli	t0,t0,0x1a
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x42>
     c8e:	3261                	jal	616 <polydiv+0xb8>
     c90:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     c92:	630a02eb          	0x630a02eb
     c96:	5900000b          	0x5900000b
    for(i = (2*N); i < (3*N); ++i){
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x42>
        CT[i-(2*N)] = CT[i];
     c9e:	ec010063          	beqz	sp,35e <polymult+0x100>
    for(i = (2*N); i < (3*N); ++i){
     ca2:	0a02                	c.slli64	s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0x16>
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	ed01                	bnez	a0,cc8 <ntru_deceypt+0x24>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x26>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc0:	02ee                	slli	t0,t0,0x1b
     cc2:	5d09                	li	s10,-30
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x52>
     ccc:	0cda                	slli	s9,s9,0x16
     cce:	0000                	unimp
     cd0:	000017ef          	jal	a5,1cd0 <random_keys+0x208>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd4:	0cf8                	addi	a4,sp,604
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
        if(a2[i] <= q/2)
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000ce82b          	0xce82b
    for (i = 0; i < N; ++i){
     cfc:	e400                	fsw	fs0,8(s0)
     cfe:	0014                	0x14
    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
    for(i = (2*N); i < ((2*N)+N); ++i){
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
}
     d1c:	0000                	unimp
     d1e:	000d0c2b          	0xd0c2b
     d22:	ef00                	fsw	fs0,24(a4)
     d24:	43000017          	auipc	zero,0x43000
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
        a2[i-(2*N)] = a2[i];
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
        a2[i-(2*N)] = a2[i];
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polymult2+0x140>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d42:	2d00                	fld	fs0,24(a0)
        if(a2[i] <= q/2)
     d44:	0d16                	slli	s10,s10,0x5
     d46:	0000                	unimp
     d48:	14e4                	addi	s1,sp,620
            a2[i] = (-1)*(q-a2[i]);
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
    for (i = 0; i < N; ++i){
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
        c2[i-(2*N)] = c2[i];
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
        c2[i-(2*N)] = c2[i];
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d66:	0006822f          	0x6822f
     d6a:	0100                	addi	s0,sp,128
     d6c:	02c5                	addi	t0,t0,17
     d6e:	6306                	flw	ft6,64(sp)
     d70:	1e00000b          	0x1e00000b
     d74:	000c                	0xc
     d76:	8600                	0x8600
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	bc9c                	fsd	fa5,56(s1)
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	c501                	beqz	a0,d8c <reset_handler+0x20>
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	02c5                	addi	t0,t0,17
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	03e9                	addi	t2,t2,26
     da2:	0000                	unimp
     da4:	c501                	beqz	a0,dac <reset_handler+0x40>
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <_start+0xa>
     dac:	0000049b          	0x49b
     db0:	7f31                	lui	t5,0xfffec
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	02c5                	addi	t0,t0,17
     db8:	6334                	flw	fa3,64(a4)
     dba:	d200000b          	0xd200000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	06c0                	addi	s0,sp,836
     dc4:	0000                	unimp
     dc6:	c501                	beqz	a0,dce <zero_loop+0x6>
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memcpy+0x2>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	f029                	bnez	s0,d14 <ntru_deceypt+0x70>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	630a02c7          	fmsub.d	ft5,fs4,fa6,fa2,rne
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	02c8                	addi	a0,sp,324
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	03b8                	addi	a4,sp,456
     df0:	0000                	unimp
     df2:	ca01                	beqz	a2,e02 <memcpy+0x24>
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2a26                	fld	fs4,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	630a02cb          	fnmsub.d	ft5,fs4,fa6,fa2,rne
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	cc01                	beqz	s0,e2a <memcpy+0x4c>
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000c462b          	0xc462b
     e22:	1900                	addi	s0,sp,176
     e24:	001f 4100 000e      	0xe4100001f
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	10ac                	addi	a1,sp,104
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c58                	addi	a4,sp,532
     e44:	0000                	unimp
     e46:	1985                	addi	s3,s3,-31
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8)
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 682b      	0x682b0030015f
     e74:	000c                	0xc
     e76:	f100                	fsw	fs0,32(a0)
     e78:	001c                	0x1c
     e7a:	9300                	0x9300
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0c76                	slli	s8,s8,0x1d
     e96:	0000                	unimp
     e98:	14e4                	addi	s1,sp,620
     e9a:	0000                	unimp
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
     ebc:	00035a2f          	0x35a2f
     ec0:	0100                	addi	s0,sp,128
     ec2:	026d                	addi	tp,tp,27
     ec4:	6306                	flw	ft6,64(sp)
     ec6:	2c00000b          	0x2c00000b
     eca:	0009                	c.nop	2
     ecc:	f200                	fsw	fs0,32(a2)
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	6d01                	0x6d01
     edc:	1802                	slli	a6,a6,0x20
     ede:	005d                	c.nop	23
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
     ee4:	0000                	unimp
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
     eea:	026d                	addi	tp,tp,27
     eec:	5d1f 0000 e500      	0xe50000005d1f
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	6d01                	0x6d01
     efa:	2602                	fld	fa2,0(sp)
     efc:	005d                	c.nop	23
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	6c09026f          	jal	tp,915c8 <_stack_start+0x815c8>
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	70010067          	jr	1792(sp)
     f18:	0902                	c.slli64	s2
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
     f26:	7201                	lui	tp,0xfffe0
     f28:	0a02                	c.slli64	s4
     f2a:	00000b63          	beqz	zero,f40 <memset+0x84>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	7301                	lui	t1,0xfffe0
     f38:	0a02                	c.slli64	s4
     f3a:	00000b63          	beqz	zero,f50 <memset+0x94>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	74010067          	jr	1856(sp)
     f48:	0a02                	c.slli64	s4
     f4a:	00000b63          	beqz	zero,f60 <memset+0xa4>
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
     f54:	7501006b          	0x7501006b
     f58:	0a02                	c.slli64	s4
     f5a:	00000b63          	beqz	zero,f70 <main+0xc>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
     f62:	c026                	sw	s1,0(sp)
int main(){
     f64:	0006                	c.slli	zero,0x1
     f66:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f68:	0276                	slli	tp,tp,0x1d
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
     f70:	0006                	c.slli	zero,0x1
     f72:	2a00                	fld	fs0,16(a2)
     f74:	0069                	c.nop	26
int main(){
     f76:	7701                	lui	a4,0xfffe0
     f78:	0902                	c.slli64	s2
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	fa26                	fsw	fs1,52(sp)
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    resultkon[0] = 0xaaaaaaa0;
     f88:	0278                	addi	a4,sp,268
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f8a:	630a                	flw	ft6,128(sp)
    resultkon[0] = 0xaaaaaaa0;
     f8c:	5f00000b          	0x5f00000b
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
     f94:	0069                	c.nop	26
     f96:	0000                	unimp
    keys = generate_keys(N, p, q);
     f98:	00000877          	0x877
     f9c:	0009722b          	0x9722b
     fa0:	2400                	fld	fs0,8(s0)
    resultkon[0] = 0xaaaaaaa0;
     fa2:	001f bc00 000f      	0xfbc00001f
    keys = generate_keys(N, p, q);
     fa8:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xaaaaaaa1;
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
    for(i = 0; i < N; ++i){
     fb0:	012c                	addi	a1,sp,136
        secret_key_f[i] = keys[i];
     fb2:	2c30015b          	0x2c30015b
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
     fba:	00d0                	addi	a2,sp,68
     fbc:	0009f22b          	0x9f22b
    for(i = 0; i < N; ++i){
     fc0:	2400                	fld	fs0,8(s0)
     fc2:	001f dc00 000f      	0xfdc00001f
    for(i = N; i < (2*N); ++i){
     fc8:	2c00                	fld	fs0,24(s0)
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
        secret_key_fp[i-(2*N)] = keys[i];
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
    for(i = (2*N); i < (3*N); ++i){
     fda:	00d8                	addi	a4,sp,68
     fdc:	000aba2b          	0xaba2b
    for(i = (3*N); i < (4*N); ++i){
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
        public_key[i-(4*N)] = keys[i];
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
    for(i = (4*N); i < (5*N); ++i){
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
        ring_poly[i-(5*N)] = keys[i];
    1000:	2b000087          	0x2b000087
    1004:	0ad4                	addi	a3,sp,340
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    for(i = (5*N); i < (6*N+1); ++i){
    100c:	102a                	c.slli	zero,0x2a
    resultkon[0] = 0xbbbbbbb0;
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    101c:	2c7c                	fld	fa5,216(s0)
    resultkon[0] = 0xbbbbbbb1;
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    resultkon[0] = 0xbbbbbbb0;
    1026:	8602                	jr	a2
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    102a:	000af22b          	0xaf22b
    resultkon[0] = 0xccccccc0;
    102e:	ef00                	fsw	fs0,24(a4)
    1030:	4f000017          	auipc	zero,0x4f000
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	0010                	0x10
    resultkon[0] = 0xccccccc0;
    1036:	2c00                	fld	fs0,24(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    resultkon[0] = 0xccccccc1;	
    104c:	3001                	jal	84c <ext_euclid+0x134>
    104e:	2d00                	fld	fs0,24(a0)
            resultkon[0] = 0xDEDEDEDE;
    1050:	0b06                	slli	s6,s6,0x1
    1052:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    1054:	14e4                	addi	s1,sp,620
    1056:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
    for(i = 0; i < 32; ++i){
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
        if(!(message[i] == Dec_Message[i])){
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
}
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	00000397          	auipc	t2,0x0
    for(i = 0; i < 32; ++i){
    1094:	c901                	beqz	a0,10a4 <__CTOR_END__>
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <__DTOR_END__+0x2>
    109c:	0718                	addi	a4,sp,896
    109e:	0000                	unimp
    10a0:	0214                	addi	a3,sp,256
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	145f 0000 c031      	0xc0310000145f
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	01c9                	addi	gp,gp,18
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0192                	slli	gp,gp,0x4
    10be:	0000                	unimp
    10c0:	c901                	beqz	a0,10d0 <__DTOR_END__+0x24>
    10c2:	2201                	jal	11c2 <__DTOR_END__+0x116>
    10c4:	00000b63          	beqz	zero,10da <__DTOR_END__+0x2e>
    10c8:	0902                	c.slli64	s2
    10ca:	0000                	unimp
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	01c9                	addi	gp,gp,18
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	4700                	lw	s0,8(a4)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	c901                	beqz	a0,10f2 <__DTOR_END__+0x46>
    10e4:	3701                	jal	fe4 <main+0x80>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0000098b          	0x98b
    10ee:	d926                	sw	s1,176(sp)
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	630a01cb          	fnmsub.d	ft3,fs4,fa6,fa2,rne
    10f8:	c200000b          	0xc200000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	cc01                	beqz	s0,111a <__DTOR_END__+0x6e>
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	09da                	slli	s3,s3,0x16
    110c:	0000                	unimp
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	01cc                	addi	a1,sp,196
    1114:	5d0c                	lw	a1,56(a0)
    1116:	0000                	unimp
    1118:	0800                	addi	s0,sp,16
    111a:	000a                	c.slli	zero,0x2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	cc01                	beqz	s0,1138 <__DTOR_END__+0x8c>
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	00000b0f          	0xb0f
    112c:	4c26                	lw	s8,72(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	01cd                	addi	gp,gp,19
    1134:	5f09                	li	t5,-30
    1136:	0014                	0x14
    1138:	2d00                	fld	fs0,24(a0)
    113a:	2600000b          	0x2600000b
    113e:	05ca                	slli	a1,a1,0x12
    1140:	0000                	unimp
    1142:	ce01                	beqz	a2,115a <__DTOR_END__+0xae>
    1144:	0901                	addi	s2,s2,0
    1146:	1472                	slli	s0,s0,0x3c
    1148:	0000                	unimp
    114a:	0b4d                	addi	s6,s6,19
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	cf01                	beqz	a4,116a <__DTOR_END__+0xbe>
    1154:	0901                	addi	s2,s2,0
    1156:	1485                	addi	s1,s1,-31
    1158:	0000                	unimp
    115a:	0b6d                	addi	s6,s6,27
    115c:	0000                	unimp
    115e:	6926                	flw	fs2,72(sp)
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	01d1                	addi	gp,gp,20
    1166:	9809                	andi	s0,s0,-30
    1168:	0014                	0x14
    116a:	8d00                	0x8d00
    116c:	2a00000b          	0x2a00000b
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	01d2                	slli	gp,gp,0x14
    1176:	ab09                	j	1688 <product2+0x200>
    1178:	0014                	0x14
    117a:	da00                	sw	s0,48(a2)
    117c:	2600000b          	0x2600000b
    1180:	0481                	addi	s1,s1,0
    1182:	0000                	unimp
    1184:	d301                	beqz	a4,1084 <main+0x120>
    1186:	0901                	addi	s2,s2,0
    1188:	14be                	slli	s1,s1,0x2f
    118a:	0000                	unimp
    118c:	0bfa                	slli	s7,s7,0x1e
    118e:	0000                	unimp
    1190:	2a26                	fld	fs4,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	01d4                	addi	a3,sp,196
    1198:	d109                	beqz	a0,109a <main+0x136>
    119a:	0014                	0x14
    119c:	3100                	fld	fs0,32(a0)
    119e:	000c                	0xc
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	d5010073          	0xd5010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <__DTOR_END__+0x114>
    11ae:	00000ca3          	sb	zero,25(zero) # 19 <__DYNAMIC+0x19>
    11b2:	5926                	lw	s2,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	01d6                	slli	gp,gp,0x15
    11ba:	630a                	flw	ft6,128(sp)
    11bc:	c100000b          	0xc100000b
    11c0:	000c                	0xc
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	015e                	slli	sp,sp,0x17
    11c6:	0000                	unimp
    11c8:	d701                	beqz	a4,10d0 <__DTOR_END__+0x24>
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <__DTOR_END__+0x136>
    11d0:	0cdf 0000 3a26      	0x3a2600000cdf
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	01d8                	addi	a4,sp,196
    11dc:	5d09                	li	s10,-30
    11de:	0000                	unimp
    11e0:	fd00                	fsw	fs0,56(a0)
    11e2:	000c                	0xc
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	00000d4b          	fnmsub.s	fs10,ft0,ft0,ft0,rne
    11ee:	00006933          	or	s2,zero,zero
    11f2:	7900                	flw	fs0,48(a0)
    11f4:	000d                	c.nop	3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	00000da7          	0xda7
    1200:	00006933          	or	s2,zero,zero
    1204:	d500                	sw	s0,40(a0)
    1206:	000d                	c.nop	3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
    1212:	00006933          	or	s2,zero,zero
    1216:	3100                	fld	fs0,32(a0)
    1218:	000e                	c.slli	zero,0x3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0e5f 0000 882b      	0x882b00000e5f
    1226:	0b000007          	0xb000007
    122a:	001c                	0x1c
    122c:	4500                	lw	s0,8(a0)
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8302                	jr	t1
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	5a01f303          	0x5a01f303
    123e:	012c                	addi	a1,sp,136
    1240:	025c                	addi	a5,sp,260
    1242:	0079                	c.nop	30
    1244:	2b00                	fld	fs0,16(a4)
    1246:	0790                	addi	a2,sp,960
    1248:	0000                	unimp
    124a:	00001c0b          	0x1c0b
    124e:	1265                	addi	tp,tp,-7
    1250:	0000                	unimp
    1252:	012c                	addi	a1,sp,136
    1254:	025a                	slli	tp,tp,0x16
    1256:	0084                	addi	s1,sp,64
    1258:	012c                	addi	a1,sp,136
    125a:	008b025b          	0x8b025b
    125e:	012c                	addi	a1,sp,136
    1260:	025c                	addi	a5,sp,260
    1262:	0079                	c.nop	30
    1264:	2b00                	fld	fs0,16(a4)
    1266:	07ae                	slli	a5,a5,0xb
    1268:	0000                	unimp
    126a:	1ba5                	addi	s7,s7,-23
    126c:	0000                	unimp
    126e:	1285                	addi	t0,t0,-31
    1270:	0000                	unimp
    1272:	012c                	addi	a1,sp,136
    1274:	025a                	slli	tp,tp,0x16
    1276:	012c0083          	lb	ra,18(s8) # fffe2012 <_stack_start+0xfffd2012>
    127a:	0082025b          	0x82025b
    127e:	012c                	addi	a1,sp,136
    1280:	025c                	addi	a5,sp,260
    1282:	0079                	c.nop	30
    1284:	2b00                	fld	fs0,16(a4)
    1286:	07b6                	slli	a5,a5,0xd
    1288:	0000                	unimp
    128a:	1ba5                	addi	s7,s7,-23
    128c:	0000                	unimp
    128e:	12a5                	addi	t0,t0,-23
    1290:	0000                	unimp
    1292:	012c                	addi	a1,sp,136
    1294:	025a                	slli	tp,tp,0x16
    1296:	0084                	addi	s1,sp,64
    1298:	012c                	addi	a1,sp,136
    129a:	0082025b          	0x82025b
    129e:	012c                	addi	a1,sp,136
    12a0:	025c                	addi	a5,sp,260
    12a2:	0079                	c.nop	30
    12a4:	2b00                	fld	fs0,16(a4)
    12a6:	07c2                	slli	a5,a5,0x10
    12a8:	0000                	unimp
    12aa:	14e4                	addi	s1,sp,620
    12ac:	0000                	unimp
    12ae:	12d1                	addi	t0,t0,-12
    12b0:	0000                	unimp
    12b2:	012c                	addi	a1,sp,136
    12b4:	025a                	slli	tp,tp,0x16
    12b6:	012c0083          	lb	ra,18(s8)
    12ba:	0079025b          	0x79025b
    12be:	012c                	addi	a1,sp,136
    12c0:	025c                	addi	a5,sp,260
    12c2:	0084                	addi	s1,sp,64
    12c4:	012c                	addi	a1,sp,136
    12c6:	025d                	addi	tp,tp,23
    12c8:	0079                	c.nop	30
    12ca:	012c                	addi	a1,sp,136
    12cc:	025e                	slli	tp,tp,0x17
    12ce:	0082                	c.slli64	ra
    12d0:	2b00                	fld	fs0,16(a4)
    12d2:	07de                	slli	a5,a5,0x17
    12d4:	0000                	unimp
    12d6:	1ba5                	addi	s7,s7,-23
    12d8:	0000                	unimp
    12da:	12f1                	addi	t0,t0,-4
    12dc:	0000                	unimp
    12de:	012c                	addi	a1,sp,136
    12e0:	025a                	slli	tp,tp,0x16
    12e2:	0072                	c.slli	zero,0x1c
    12e4:	012c                	addi	a1,sp,136
    12e6:	0082025b          	0x82025b
    12ea:	012c                	addi	a1,sp,136
    12ec:	025c                	addi	a5,sp,260
    12ee:	0079                	c.nop	30
    12f0:	2b00                	fld	fs0,16(a4)
    12f2:	07ea                	slli	a5,a5,0x1a
    12f4:	0000                	unimp
    12f6:	14e4                	addi	s1,sp,620
    12f8:	0000                	unimp
    12fa:	131d                	addi	t1,t1,-25
    12fc:	0000                	unimp
    12fe:	012c                	addi	a1,sp,136
    1300:	025a                	slli	tp,tp,0x16
    1302:	0072                	c.slli	zero,0x1c
    1304:	012c                	addi	a1,sp,136
    1306:	0079025b          	0x79025b
    130a:	012c                	addi	a1,sp,136
    130c:	025c                	addi	a5,sp,260
    130e:	0084                	addi	s1,sp,64
    1310:	012c                	addi	a1,sp,136
    1312:	025d                	addi	tp,tp,23
    1314:	0079                	c.nop	30
    1316:	012c                	addi	a1,sp,136
    1318:	025e                	slli	tp,tp,0x17
    131a:	0082                	c.slli64	ra
    131c:	2b00                	fld	fs0,16(a4)
    131e:	07f2                	slli	a5,a5,0x1c
    1320:	0000                	unimp
    1322:	00001c0b          	0x1c0b
    1326:	00001337          	lui	t1,0x1
    132a:	012c                	addi	a1,sp,136
    132c:	025a                	slli	tp,tp,0x16
    132e:	0089                	addi	ra,ra,2
    1330:	012c                	addi	a1,sp,136
    1332:	025c                	addi	a5,sp,260
    1334:	0079                	c.nop	30
    1336:	2b00                	fld	fs0,16(a4)
    1338:	07fa                	slli	a5,a5,0x1e
    133a:	0000                	unimp
    133c:	1ba5                	addi	s7,s7,-23
    133e:	0000                	unimp
    1340:	00001357          	0x1357
    1344:	012c                	addi	a1,sp,136
    1346:	025a                	slli	tp,tp,0x16
    1348:	0089                	addi	ra,ra,2
    134a:	012c                	addi	a1,sp,136
    134c:	0082025b          	0x82025b
    1350:	012c                	addi	a1,sp,136
    1352:	025c                	addi	a5,sp,260
    1354:	0079                	c.nop	30
    1356:	2b00                	fld	fs0,16(a4)
    1358:	0808                	addi	a0,sp,16
    135a:	0000                	unimp
    135c:	1985                	addi	s3,s3,-31
    135e:	0000                	unimp
    1360:	1388                	addi	a0,sp,480
    1362:	0000                	unimp
    1364:	012c                	addi	a1,sp,136
    1366:	025a                	slli	tp,tp,0x16
    1368:	0089                	addi	ra,ra,2
    136a:	012c                	addi	a1,sp,136
    136c:	0079025b          	0x79025b
    1370:	012c                	addi	a1,sp,136
    1372:	025c                	addi	a5,sp,260
    1374:	0086                	slli	ra,ra,0x1
    1376:	012c                	addi	a1,sp,136
    1378:	025d                	addi	tp,tp,23
    137a:	0079                	c.nop	30
    137c:	012c                	addi	a1,sp,136
    137e:	025e                	slli	tp,tp,0x17
    1380:	0082                	c.slli64	ra
    1382:	012c                	addi	a1,sp,136
    1384:	015f 0030 102b      	0x102b0030015f
    138a:	0008                	0x8
    138c:	0b00                	addi	s0,sp,400
    138e:	001c                	0x1c
    1390:	a200                	fsd	fs0,0(a2)
    1392:	2c000013          	li	zero,704
    1396:	5a01                	li	s4,-32
    1398:	7202                	flw	ft4,32(sp)
    139a:	2c00                	fld	fs0,24(s0)
    139c:	5c01                	li	s8,-32
    139e:	7902                	flw	fs2,32(sp)
    13a0:	0000                	unimp
    13a2:	0008182b          	0x8182b
    13a6:	a500                	fsd	fs0,8(a0)
    13a8:	c200001b          	0xc200001b
    13ac:	2c000013          	li	zero,704
    13b0:	5a01                	li	s4,-32
    13b2:	7202                	flw	ft4,32(sp)
    13b4:	2c00                	fld	fs0,24(s0)
    13b6:	5b01                	li	s6,-32
    13b8:	8202                	jr	tp
    13ba:	2c00                	fld	fs0,24(s0)
    13bc:	5c01                	li	s8,-32
    13be:	7902                	flw	fs2,32(sp)
    13c0:	0000                	unimp
    13c2:	0008282b          	0x8282b
    13c6:	a500                	fsd	fs0,8(a0)
    13c8:	e200001b          	0xe200001b
    13cc:	2c000013          	li	zero,704
    13d0:	5a01                	li	s4,-32
    13d2:	8a02                	jr	s4
    13d4:	2c00                	fld	fs0,24(s0)
    13d6:	5b01                	li	s6,-32
    13d8:	8202                	jr	tp
    13da:	2c00                	fld	fs0,24(s0)
    13dc:	5c01                	li	s8,-32
    13de:	7902                	flw	fs2,32(sp)
    13e0:	0000                	unimp
    13e2:	0008302b          	0x8302b
    13e6:	0b00                	addi	s0,sp,400
    13e8:	001c                	0x1c
    13ea:	0200                	addi	s0,sp,256
    13ec:	0014                	0x14
    13ee:	2c00                	fld	fs0,24(s0)
    13f0:	5a01                	li	s4,-32
    13f2:	8302                	jr	t1
    13f4:	2c00                	fld	fs0,24(s0)
    13f6:	5b01                	li	s6,-32
    13f8:	8402                	jr	s0
    13fa:	2c00                	fld	fs0,24(s0)
    13fc:	5c01                	li	s8,-32
    13fe:	7902                	flw	fs2,32(sp)
    1400:	0000                	unimp
    1402:	0008382b          	0x8382b
    1406:	0b00                	addi	s0,sp,400
    1408:	001c                	0x1c
    140a:	2200                	fld	fs0,0(a2)
    140c:	0014                	0x14
    140e:	2c00                	fld	fs0,24(s0)
    1410:	5a01                	li	s4,-32
    1412:	8402                	jr	s0
    1414:	2c00                	fld	fs0,24(s0)
    1416:	5b01                	li	s6,-32
    1418:	8802                	jr	a6
    141a:	2c00                	fld	fs0,24(s0)
    141c:	5c01                	li	s8,-32
    141e:	7902                	flw	fs2,32(sp)
    1420:	0000                	unimp
    1422:	0008402b          	0x8402b
    1426:	0b00                	addi	s0,sp,400
    1428:	001c                	0x1c
    142a:	4200                	lw	s0,0(a2)
    142c:	0014                	0x14
    142e:	2c00                	fld	fs0,24(s0)
    1430:	5a01                	li	s4,-32
    1432:	8b02                	jr	s6
    1434:	2c00                	fld	fs0,24(s0)
    1436:	5b01                	li	s6,-32
    1438:	8602                	jr	a2
    143a:	2c00                	fld	fs0,24(s0)
    143c:	5c01                	li	s8,-32
    143e:	7902                	flw	fs2,32(sp)
    1440:	0000                	unimp
    1442:	482d                	li	a6,11
    1444:	0008                	0x8
    1446:	0b00                	addi	s0,sp,400
    1448:	001c                	0x1c
    144a:	2c00                	fld	fs0,24(s0)
    144c:	5a01                	li	s4,-32
    144e:	8602                	jr	a2
    1450:	2c00                	fld	fs0,24(s0)
    1452:	5b01                	li	s6,-32
    1454:	8a02                	jr	s4
    1456:	2c00                	fld	fs0,24(s0)
    1458:	5c01                	li	s8,-32
    145a:	7902                	flw	fs2,32(sp)
    145c:	0000                	unimp
    145e:	0900                	addi	s0,sp,144
    1460:	005d                	c.nop	23
    1462:	0000                	unimp
    1464:	1472                	slli	s0,s0,0x3c
    1466:	0000                	unimp
    1468:	6934                	flw	fa3,80(a0)
    146a:	0000                	unimp
    146c:	e500                	fsw	fs0,8(a0)
    146e:	0011                	c.nop	4
    1470:	0000                	unimp
    1472:	5d09                	li	s10,-30
    1474:	0000                	unimp
    1476:	8500                	0x8500
    1478:	0014                	0x14
    147a:	3400                	fld	fs0,40(s0)
    147c:	0069                	c.nop	26
    147e:	0000                	unimp
    1480:	11ee                	slli	gp,gp,0x3b
    1482:	0000                	unimp
    1484:	0900                	addi	s0,sp,144
    1486:	005d                	c.nop	23
    1488:	0000                	unimp
    148a:	1498                	addi	a4,sp,608
    148c:	0000                	unimp
    148e:	6934                	flw	fa3,80(a0)
    1490:	0000                	unimp
    1492:	f700                	fsw	fs0,40(a4)
    1494:	0011                	c.nop	4
    1496:	0000                	unimp
    1498:	5d09                	li	s10,-30
    149a:	0000                	unimp
    149c:	ab00                	fsd	fs0,16(a4)
    149e:	0014                	0x14
    14a0:	3400                	fld	fs0,40(s0)
    14a2:	0069                	c.nop	26
    14a4:	0000                	unimp
    14a6:	1200                	addi	s0,sp,288
    14a8:	0000                	unimp
    14aa:	0900                	addi	s0,sp,144
    14ac:	005d                	c.nop	23
    14ae:	0000                	unimp
    14b0:	14be                	slli	s1,s1,0x2f
    14b2:	0000                	unimp
    14b4:	6934                	flw	fa3,80(a0)
    14b6:	0000                	unimp
    14b8:	0900                	addi	s0,sp,144
    14ba:	0012                	c.slli	zero,0x4
    14bc:	0000                	unimp
    14be:	5d09                	li	s10,-30
    14c0:	0000                	unimp
    14c2:	d100                	sw	s0,32(a0)
    14c4:	0014                	0x14
    14c6:	3400                	fld	fs0,40(s0)
    14c8:	0069                	c.nop	26
    14ca:	0000                	unimp
    14cc:	1212                	slli	tp,tp,0x24
    14ce:	0000                	unimp
    14d0:	0900                	addi	s0,sp,144
    14d2:	005d                	c.nop	23
    14d4:	0000                	unimp
    14d6:	14e4                	addi	s1,sp,620
    14d8:	0000                	unimp
    14da:	6934                	flw	fa3,80(a0)
    14dc:	0000                	unimp
    14de:	1b00                	addi	s0,sp,432
    14e0:	0012                	c.slli	zero,0x4
    14e2:	0000                	unimp
    14e4:	00018a2f          	0x18a2f
    14e8:	0100                	addi	s0,sp,128
    14ea:	0125                	addi	sp,sp,9
    14ec:	6306                	flw	ft6,64(sp)
    14ee:	5e00000b          	0x5e00000b
    14f2:	0005                	c.nop	1
    14f4:	ba00                	fsd	fs0,48(a2)
    14f6:	0001                	nop
    14f8:	0100                	addi	s0,sp,128
    14fa:	a39c                	fsd	fa5,0(a5)
    14fc:	30000017          	auipc	zero,0x30000
    1500:	756e                	flw	fa0,248(sp)
    1502:	006d                	c.nop	27
    1504:	2501                	jal	1b04 <random_keys+0x3c>
    1506:	1301                	addi	t1,t1,-32
    1508:	00000b63          	beqz	zero,151e <product2+0x96>
    150c:	0e8d                	addi	t4,t4,3
    150e:	0000                	unimp
    1510:	0631                	addi	a2,a2,12
    1512:	0001                	nop
    1514:	0100                	addi	s0,sp,128
    1516:	0125                	addi	sp,sp,9
    1518:	5d1c                	lw	a5,56(a0)
    151a:	0000                	unimp
    151c:	b900                	fsd	fs0,48(a0)
    151e:	000e                	c.slli	zero,0x3
    1520:	3100                	fld	fs0,32(a0)
    1522:	06a2                	slli	a3,a3,0x8
    1524:	0000                	unimp
    1526:	2501                	jal	1b26 <random_keys+0x5e>
    1528:	2801                	jal	1538 <product2+0xb0>
    152a:	00000b63          	beqz	zero,1540 <product2+0xb8>
    152e:	0f0a                	slli	t5,t5,0x2
    1530:	0000                	unimp
    1532:	c631                	beqz	a2,157e <product2+0xf6>
    1534:	0006                	c.slli	zero,0x1
    1536:	0100                	addi	s0,sp,128
    1538:	0125                	addi	sp,sp,9
    153a:	00005d33          	srl	s10,zero,zero
    153e:	4f00                	lw	s0,24(a4)
    1540:	3000000f          	0x3000000f
    1544:	6f6d                	lui	t5,0x1b
    1546:	0064                	addi	s1,sp,12
    1548:	2501                	jal	1b48 <random_keys+0x80>
    154a:	3f01                	jal	145a <_bss_start+0x22a>
    154c:	005d                	c.nop	23
    154e:	0000                	unimp
    1550:	0f86                	slli	t6,t6,0x1
    1552:	0000                	unimp
    1554:	752a                	flw	fa0,168(sp)
    1556:	0100                	addi	s0,sp,128
    1558:	5d090127          	0x5d090127
    155c:	0000                	unimp
    155e:	bd00                	fsd	fs0,56(a0)
    1560:	2a00000f          	0x2a00000f
    1564:	0064                	addi	s1,sp,12
    1566:	2701                	jal	1c66 <random_keys+0x19e>
    1568:	0b01                	addi	s6,s6,0
    156a:	005d                	c.nop	23
    156c:	0000                	unimp
    156e:	0fe6                	slli	t6,t6,0x19
    1570:	0000                	unimp
    1572:	6435                	lui	s0,0xd
    1574:	0032                	c.slli	zero,0xc
    1576:	2701                	jal	1c76 <random_keys+0x1ae>
    1578:	0d01                	addi	s10,s10,0
    157a:	005d                	c.nop	23
    157c:	0000                	unimp
    157e:	692a                	flw	fs2,136(sp)
    1580:	0100                	addi	s0,sp,128
    1582:	5d100127          	0x5d100127
    1586:	0000                	unimp
    1588:	0400                	addi	s0,sp,512
    158a:	0010                	0x10
    158c:	3500                	fld	fs0,40(a0)
    158e:	5f62                	lw	t5,56(sp)
    1590:	004e                	c.slli	zero,0x13
    1592:	2701                	jal	1c92 <random_keys+0x1ca>
    1594:	1201                	addi	tp,tp,-32
    1596:	005d                	c.nop	23
    1598:	0000                	unimp
    159a:	722a                	flw	ft4,168(sp)
    159c:	645f 0100 0127      	0x1270100645f
    15a2:	5d16                	lw	s10,100(sp)
    15a4:	0000                	unimp
    15a6:	b500                	fsd	fs0,40(a0)
    15a8:	0010                	0x10
    15aa:	2600                	fld	fs0,8(a2)
    15ac:	02c9                	addi	t0,t0,18
    15ae:	0000                	unimp
    15b0:	2801                	jal	15c0 <product2+0x138>
    15b2:	0a01                	addi	s4,s4,0
    15b4:	00000b63          	beqz	zero,15ca <product2+0x142>
    15b8:	000010d3          	fadd.s	ft1,ft0,ft0,rtz
    15bc:	762a                	flw	fa2,168(sp)
    15be:	0100                	addi	s0,sp,128
    15c0:	012a                	slli	sp,sp,0xa
    15c2:	a309                	j	1ac4 <ti_2+0x18c>
    15c4:	eb000017          	auipc	zero,0xeb000
    15c8:	0010                	0x10
    15ca:	2a00                	fld	fs0,16(a2)
    15cc:	0071                	c.nop	28
    15ce:	2b01                	jal	1ade <random_keys+0x16>
    15d0:	0901                	addi	s2,s2,0
    15d2:	17b6                	slli	a5,a5,0x2d
    15d4:	0000                	unimp
    15d6:	0000110b          	0x110b
    15da:	8226                	mv	tp,s1
    15dc:	0001                	nop
    15de:	0100                	addi	s0,sp,128
    15e0:	012c                	addi	a1,sp,136
    15e2:	630a                	flw	ft6,128(sp)
    15e4:	2b00000b          	0x2b00000b
    15e8:	0011                	c.nop	4
    15ea:	2600                	fld	fs0,8(a2)
    15ec:	0226                	slli	tp,tp,0x9
    15ee:	0000                	unimp
    15f0:	2d01                	jal	1c00 <random_keys+0x138>
    15f2:	0901                	addi	s2,s2,0
    15f4:	17c9                	addi	a5,a5,-14
    15f6:	0000                	unimp
    15f8:	1149                	addi	sp,sp,-14
    15fa:	0000                	unimp
    15fc:	2426                	fld	fs0,72(sp)
    15fe:	0002                	c.slli64	zero
    1600:	0100                	addi	s0,sp,128
    1602:	012e                	slli	sp,sp,0xb
    1604:	dc09                	beqz	s0,151e <product2+0x96>
    1606:	95000017          	auipc	zero,0x95000
    160a:	0011                	c.nop	4
    160c:	3300                	fld	fs0,32(a4)
    160e:	0069                	c.nop	26
    1610:	0000                	unimp
    1612:	11cd                	addi	gp,gp,-13
    1614:	0000                	unimp
    1616:	00006933          	or	s2,zero,zero
    161a:	fb00                	fsw	fs0,48(a4)
    161c:	0011                	c.nop	4
    161e:	3300                	fld	fs0,32(a4)
    1620:	0069                	c.nop	26
    1622:	0000                	unimp
    1624:	1229                	addi	tp,tp,-22
    1626:	0000                	unimp
    1628:	00006933          	or	s2,zero,zero
    162c:	5700                	lw	s0,40(a4)
    162e:	0012                	c.slli	zero,0x4
    1630:	2b00                	fld	fs0,16(a4)
    1632:	05ba                	slli	a1,a1,0xe
    1634:	0000                	unimp
    1636:	00001c0b          	0x1c0b
    163a:	1652                	slli	a2,a2,0x34
    163c:	0000                	unimp
    163e:	012c                	addi	a1,sp,136
    1640:	025a                	slli	tp,tp,0x16
    1642:	0082                	c.slli64	ra
    1644:	012c                	addi	a1,sp,136
    1646:	01f3035b          	0x1f3035b
    164a:	2c5a                	fld	fs8,400(sp)
    164c:	5c01                	li	s8,-32
    164e:	7902                	flw	fs2,32(sp)
    1650:	0000                	unimp
    1652:	0005c22b          	0x5c22b
    1656:	a500                	fsd	fs0,8(a0)
    1658:	7200001b          	0x7200001b
    165c:	0016                	c.slli	zero,0x5
    165e:	2c00                	fld	fs0,24(s0)
    1660:	5a01                	li	s4,-32
    1662:	8202                	jr	tp
    1664:	2c00                	fld	fs0,24(s0)
    1666:	5b01                	li	s6,-32
    1668:	8302                	jr	t1
    166a:	2c00                	fld	fs0,24(s0)
    166c:	5c01                	li	s8,-32
    166e:	7902                	flw	fs2,32(sp)
    1670:	0000                	unimp
    1672:	0005cc2b          	0x5cc2b
    1676:	0b00                	addi	s0,sp,400
    1678:	001c                	0x1c
    167a:	9200                	0x9200
    167c:	0016                	c.slli	zero,0x5
    167e:	2c00                	fld	fs0,24(s0)
    1680:	5a01                	li	s4,-32
    1682:	8702                	jr	a4
    1684:	2c00                	fld	fs0,24(s0)
    1686:	5b01                	li	s6,-32
    1688:	8a02                	jr	s4
    168a:	2c00                	fld	fs0,24(s0)
    168c:	5c01                	li	s8,-32
    168e:	8402                	jr	s0
    1690:	0000                	unimp
    1692:	0005d42b          	0x5d42b
    1696:	a500                	fsd	fs0,8(a0)
    1698:	b200001b          	0xb200001b
    169c:	0016                	c.slli	zero,0x5
    169e:	2c00                	fld	fs0,24(s0)
    16a0:	5a01                	li	s4,-32
    16a2:	8702                	jr	a4
    16a4:	2c00                	fld	fs0,24(s0)
    16a6:	5b01                	li	s6,-32
    16a8:	8302                	jr	t1
    16aa:	2c00                	fld	fs0,24(s0)
    16ac:	5c01                	li	s8,-32
    16ae:	8402                	jr	s0
    16b0:	0000                	unimp
    16b2:	0006402b          	0x6402b
    16b6:	0b00                	addi	s0,sp,400
    16b8:	001c                	0x1c
    16ba:	d500                	sw	s0,40(a0)
    16bc:	0016                	c.slli	zero,0x5
    16be:	2c00                	fld	fs0,24(s0)
    16c0:	5a01                	li	s4,-32
    16c2:	0305                	addi	t1,t1,1
    16c4:	16e0                	addi	s0,sp,876
    16c6:	0000                	unimp
    16c8:	012c                	addi	a1,sp,136
    16ca:	0086025b          	0x86025b
    16ce:	012c                	addi	a1,sp,136
    16d0:	025c                	addi	a5,sp,260
    16d2:	0079                	c.nop	30
    16d4:	2b00                	fld	fs0,16(a4)
    16d6:	0690                	addi	a2,sp,832
    16d8:	0000                	unimp
    16da:	1ba5                	addi	s7,s7,-23
    16dc:	0000                	unimp
    16de:	16f5                	addi	a3,a3,-3
    16e0:	0000                	unimp
    16e2:	012c                	addi	a1,sp,136
    16e4:	025a                	slli	tp,tp,0x16
    16e6:	0085                	addi	ra,ra,1
    16e8:	012c                	addi	a1,sp,136
    16ea:	0083025b          	0x83025b
    16ee:	012c                	addi	a1,sp,136
    16f0:	025c                	addi	a5,sp,260
    16f2:	0079                	c.nop	30
    16f4:	2b00                	fld	fs0,16(a4)
    16f6:	069e                	slli	a3,a3,0x7
    16f8:	0000                	unimp
    16fa:	1985                	addi	s3,s3,-31
    16fc:	0000                	unimp
    16fe:	1726                	slli	a4,a4,0x29
    1700:	0000                	unimp
    1702:	012c                	addi	a1,sp,136
    1704:	025a                	slli	tp,tp,0x16
    1706:	0072                	c.slli	zero,0x1c
    1708:	012c                	addi	a1,sp,136
    170a:	0084025b          	0x84025b
    170e:	012c                	addi	a1,sp,136
    1710:	025c                	addi	a5,sp,260
    1712:	0085                	addi	ra,ra,1
    1714:	012c                	addi	a1,sp,136
    1716:	025d                	addi	tp,tp,23
    1718:	0084                	addi	s1,sp,64
    171a:	012c                	addi	a1,sp,136
    171c:	025e                	slli	tp,tp,0x17
    171e:	012c0083          	lb	ra,18(s8)
    1722:	015f 0030 a62b      	0xa62b0030015f
    1728:	0006                	c.slli	zero,0x1
    172a:	a500                	fsd	fs0,8(a0)
    172c:	4600001b          	0x4600001b
    1730:	2c000017          	auipc	zero,0x2c000
    1734:	5a01                	li	s4,-32
    1736:	8b02                	jr	s6
    1738:	2c00                	fld	fs0,24(s0)
    173a:	5b01                	li	s6,-32
    173c:	8302                	jr	t1
    173e:	2c00                	fld	fs0,24(s0)
    1740:	5c01                	li	s8,-32
    1742:	7902                	flw	fs2,32(sp)
    1744:	0000                	unimp
    1746:	0006b62b          	0x6b62b
    174a:	a500                	fsd	fs0,8(a0)
    174c:	6600001b          	0x6600001b
    1750:	2c000017          	auipc	zero,0x2c000
    1754:	5a01                	li	s4,-32
    1756:	8202                	jr	tp
    1758:	2c00                	fld	fs0,24(s0)
    175a:	5b01                	li	s6,-32
    175c:	8302                	jr	t1
    175e:	2c00                	fld	fs0,24(s0)
    1760:	5c01                	li	s8,-32
    1762:	7902                	flw	fs2,32(sp)
    1764:	0000                	unimp
    1766:	0006be2b          	0x6be2b
    176a:	f100                	fsw	fs0,32(a0)
    176c:	001c                	0x1c
    176e:	8600                	0x8600
    1770:	2c000017          	auipc	zero,0x2c000
    1774:	5a01                	li	s4,-32
    1776:	8602                	jr	a2
    1778:	2c00                	fld	fs0,24(s0)
    177a:	5b01                	li	s6,-32
    177c:	8502                	jr	a0
    177e:	2c00                	fld	fs0,24(s0)
    1780:	5c01                	li	s8,-32
    1782:	7902                	flw	fs2,32(sp)
    1784:	0000                	unimp
    1786:	c62d                	beqz	a2,17f0 <result+0x110>
    1788:	0006                	c.slli	zero,0x1
    178a:	a500                	fsd	fs0,8(a0)
    178c:	2c00001b          	0x2c00001b
    1790:	5a01                	li	s4,-32
    1792:	8602                	jr	a2
    1794:	2c00                	fld	fs0,24(s0)
    1796:	5b01                	li	s6,-32
    1798:	8302                	jr	t1
    179a:	2c00                	fld	fs0,24(s0)
    179c:	5c01                	li	s8,-32
    179e:	7902                	flw	fs2,32(sp)
    17a0:	0000                	unimp
    17a2:	0900                	addi	s0,sp,144
    17a4:	005d                	c.nop	23
    17a6:	0000                	unimp
    17a8:	17b6                	slli	a5,a5,0x2d
    17aa:	0000                	unimp
    17ac:	6934                	flw	fa3,80(a0)
    17ae:	0000                	unimp
    17b0:	0d00                	addi	s0,sp,656
    17b2:	0016                	c.slli	zero,0x5
    17b4:	0000                	unimp
    17b6:	5d09                	li	s10,-30
    17b8:	0000                	unimp
    17ba:	c900                	sw	s0,16(a0)
    17bc:	34000017          	auipc	zero,0x34000
    17c0:	0069                	c.nop	26
    17c2:	0000                	unimp
    17c4:	1616                	slli	a2,a2,0x25
    17c6:	0000                	unimp
    17c8:	0900                	addi	s0,sp,144
    17ca:	005d                	c.nop	23
    17cc:	0000                	unimp
    17ce:	17dc                	addi	a5,sp,996
    17d0:	0000                	unimp
    17d2:	6934                	flw	fa3,80(a0)
    17d4:	0000                	unimp
    17d6:	1f00                	addi	s0,sp,944
    17d8:	0016                	c.slli	zero,0x5
    17da:	0000                	unimp
    17dc:	5d09                	li	s10,-30
    17de:	0000                	unimp
    17e0:	ef00                	fsw	fs0,24(a4)
    17e2:	34000017          	auipc	zero,0x34000
    17e6:	0069                	c.nop	26
    17e8:	0000                	unimp
    17ea:	1628                	addi	a0,sp,808
    17ec:	0000                	unimp
    17ee:	3600                	fld	fs0,40(a2)
    17f0:	002a                	c.slli	zero,0xa
    17f2:	0000                	unimp
    17f4:	ec01                	bnez	s0,180c <result+0x12c>
    17f6:	6306                	flw	ft6,64(sp)
    17f8:	0000000b          	0xb
    17fc:	0004                	0x4
    17fe:	5e00                	lw	s0,56(a2)
    1800:	0001                	nop
    1802:	0100                	addi	s0,sp,128
    1804:	439c                	lw	a5,0(a5)
    1806:	0019                	c.nop	6
    1808:	3700                	fld	fs0,40(a4)
    180a:	0061                	c.nop	24
    180c:	ec01                	bnez	s0,1824 <result+0x144>
    180e:	6315                	lui	t1,0x5
    1810:	ac00000b          	0xac00000b
    1814:	0012                	c.slli	zero,0x4
    1816:	3800                	fld	fs0,48(s0)
    1818:	0715                	addi	a4,a4,5
    181a:	0000                	unimp
    181c:	ec01                	bnez	s0,1834 <result+0x154>
    181e:	5d1c                	lw	a5,56(a0)
    1820:	0000                	unimp
    1822:	f100                	fsw	fs0,32(a0)
    1824:	0012                	c.slli	zero,0x4
    1826:	3700                	fld	fs0,40(a4)
    1828:	0062                	c.slli	zero,0x18
    182a:	ec01                	bnez	s0,1842 <result+0x162>
    182c:	6329                	lui	t1,0xa
    182e:	4200000b          	0x4200000b
    1832:	38000013          	li	zero,896
    1836:	071c                	addi	a5,sp,896
    1838:	0000                	unimp
    183a:	ec01                	bnez	s0,1852 <result+0x172>
    183c:	5d30                	lw	a2,120(a0)
    183e:	0000                	unimp
    1840:	9200                	0x9200
    1842:	38000013          	li	zero,896
    1846:	053c                	addi	a5,sp,648
    1848:	0000                	unimp
    184a:	ec01                	bnez	s0,1862 <result+0x182>
    184c:	5d3c                	lw	a5,120(a0)
    184e:	0000                	unimp
    1850:	c900                	sw	s0,16(a0)
    1852:	39000013          	li	zero,912
    1856:	065e                	slli	a2,a2,0x17
    1858:	0000                	unimp
    185a:	ee01                	bnez	a2,1872 <result+0x192>
    185c:	4309                	li	t1,2
    185e:	0019                	c.nop	6
    1860:	0000                	unimp
    1862:	0014                	0x14
    1864:	3a00                	fld	fs0,48(a2)
    1866:	0069                	c.nop	26
    1868:	ef01                	bnez	a4,1880 <result+0x1a0>
    186a:	5d09                	li	s10,-30
    186c:	0000                	unimp
    186e:	4400                	lw	s0,8(s0)
    1870:	0014                	0x14
    1872:	3a00                	fld	fs0,48(a2)
    1874:	006a                	c.slli	zero,0x1a
    1876:	ef01                	bnez	a4,188e <result+0x1ae>
    1878:	00005d0b          	0x5d0b
    187c:	8400                	0x8400
    187e:	0014                	0x14
    1880:	3a00                	fld	fs0,48(a2)
    1882:	ef01006b          	0xef01006b
    1886:	5d0d                	li	s10,-29
    1888:	0000                	unimp
    188a:	b800                	fsd	fs0,48(s0)
    188c:	0014                	0x14
    188e:	3900                	fld	fs0,48(a0)
    1890:	02b9                	addi	t0,t0,14
    1892:	0000                	unimp
    1894:	f001                	bnez	s0,1794 <result+0xb4>
    1896:	630a                	flw	ft6,128(sp)
    1898:	0600000b          	0x600000b
    189c:	0015                	c.nop	5
    189e:	3900                	fld	fs0,48(a0)
    18a0:	000c                	0xc
    18a2:	0000                	unimp
    18a4:	f101                	bnez	a0,17a4 <result+0xc4>
    18a6:	5f09                	li	t5,-30
    18a8:	0019                	c.nop	6
    18aa:	1e00                	addi	s0,sp,816
    18ac:	0015                	c.nop	5
    18ae:	3900                	fld	fs0,48(a0)
    18b0:	000003b3          	add	t2,zero,zero
    18b4:	f201                	bnez	a2,17b4 <result+0xd4>
    18b6:	7209                	lui	tp,0xfffe2
    18b8:	0019                	c.nop	6
    18ba:	3e00                	fld	fs0,56(a2)
    18bc:	0015                	c.nop	5
    18be:	3300                	fld	fs0,32(a4)
    18c0:	0069                	c.nop	26
    18c2:	0000                	unimp
    18c4:	0000158b          	0x158b
    18c8:	00006933          	or	s2,zero,zero
    18cc:	e000                	fsw	fs0,0(s0)
    18ce:	0015                	c.nop	5
    18d0:	3300                	fld	fs0,32(a4)
    18d2:	0069                	c.nop	26
    18d4:	0000                	unimp
    18d6:	00001633          	sll	a2,zero,zero
    18da:	00006933          	or	s2,zero,zero
    18de:	6100                	flw	fs0,0(a0)
    18e0:	0016                	c.slli	zero,0x5
    18e2:	2b00                	fld	fs0,16(a4)
    18e4:	0482                	c.slli64	s1
    18e6:	0000                	unimp
    18e8:	00001c0b          	0x1c0b
    18ec:	1904                	addi	s1,sp,176
    18ee:	0000                	unimp
    18f0:	012c                	addi	a1,sp,136
    18f2:	025a                	slli	tp,tp,0x16
    18f4:	008a                	slli	ra,ra,0x2
    18f6:	012c                	addi	a1,sp,136
    18f8:	01f3035b          	0x1f3035b
    18fc:	2c5a                	fld	fs8,400(sp)
    18fe:	5c01                	li	s8,-32
    1900:	8802                	jr	a6
    1902:	0001                	nop
    1904:	00048e2b          	0x48e2b
    1908:	0b00                	addi	s0,sp,400
    190a:	001c                	0x1c
    190c:	2600                	fld	fs0,8(a2)
    190e:	0019                	c.nop	6
    1910:	2c00                	fld	fs0,24(s0)
    1912:	5a01                	li	s4,-32
    1914:	7202                	flw	ft4,32(sp)
    1916:	2c00                	fld	fs0,24(s0)
    1918:	5b01                	li	s6,-32
    191a:	7804                	flw	fs1,48(s0)
    191c:	7fbc                	flw	fa5,120(a5)
    191e:	2c06                	fld	fs8,64(sp)
    1920:	5c01                	li	s8,-32
    1922:	8402                	jr	s0
    1924:	0000                	unimp
    1926:	582d                	li	a6,-21
    1928:	0005                	c.nop	1
    192a:	f100                	fsw	fs0,32(a0)
    192c:	001c                	0x1c
    192e:	2c00                	fld	fs0,24(s0)
    1930:	5a01                	li	s4,-32
    1932:	8202                	jr	tp
    1934:	2c00                	fld	fs0,24(s0)
    1936:	5b01                	li	s6,-32
    1938:	8902                	jr	s2
    193a:	2c00                	fld	fs0,24(s0)
    193c:	5c01                	li	s8,-32
    193e:	8302                	jr	t1
    1940:	0000                	unimp
    1942:	0900                	addi	s0,sp,144
    1944:	005d                	c.nop	23
    1946:	0000                	unimp
    1948:	195f 0000 6934      	0x69340000195f
    194e:	0000                	unimp
    1950:	bf00                	fsd	fs0,56(a4)
    1952:	0018                	0x18
    1954:	3400                	fld	fs0,40(s0)
    1956:	0069                	c.nop	26
    1958:	0000                	unimp
    195a:	18c8                	addi	a0,sp,116
    195c:	0000                	unimp
    195e:	0900                	addi	s0,sp,144
    1960:	005d                	c.nop	23
    1962:	0000                	unimp
    1964:	1972                	slli	s2,s2,0x3c
    1966:	0000                	unimp
    1968:	6934                	flw	fa3,80(a0)
    196a:	0000                	unimp
    196c:	d100                	sw	s0,32(a0)
    196e:	0018                	0x18
    1970:	0000                	unimp
    1972:	5d09                	li	s10,-30
    1974:	0000                	unimp
    1976:	8500                	0x8500
    1978:	0019                	c.nop	6
    197a:	3400                	fld	fs0,40(s0)
    197c:	0069                	c.nop	26
    197e:	0000                	unimp
    1980:	18da                	slli	a7,a7,0x36
    1982:	0000                	unimp
    1984:	3600                	fld	fs0,40(a2)
    1986:	00000117          	auipc	sp,0x0
    198a:	9901                	andi	a0,a0,-32
    198c:	6306                	flw	ft6,64(sp)
    198e:	5e00000b          	0x5e00000b
    1992:	0002                	c.slli64	zero
    1994:	a200                	fsd	fs0,0(a2)
    1996:	0001                	nop
    1998:	0100                	addi	s0,sp,128
    199a:	639c                	flw	fa5,0(a5)
    199c:	3700001b          	0x3700001b
    19a0:	0061                	c.nop	24
    19a2:	9901                	andi	a0,a0,-32
    19a4:	6314                	flw	fa3,0(a4)
    19a6:	b600000b          	0xb600000b
    19aa:	0016                	c.slli	zero,0x5
    19ac:	3800                	fld	fs0,48(s0)
    19ae:	0715                	addi	a4,a4,5
    19b0:	0000                	unimp
    19b2:	9901                	andi	a0,a0,-32
    19b4:	00005d1b          	0x5d1b
    19b8:	fb00                	fsw	fs0,48(a4)
    19ba:	0016                	c.slli	zero,0x5
    19bc:	3700                	fld	fs0,40(a4)
    19be:	0062                	c.slli	zero,0x18
    19c0:	9901                	andi	a0,a0,-32
    19c2:	6328                	flw	fa0,64(a4)
    19c4:	3500000b          	0x3500000b
    19c8:	38000017          	auipc	zero,0x38000
    19cc:	071c                	addi	a5,sp,896
    19ce:	0000                	unimp
    19d0:	9901                	andi	a0,a0,-32
    19d2:	00005d2f          	0x5d2f
    19d6:	8500                	0x8500
    19d8:	37000017          	auipc	zero,0x37000
    19dc:	6f6d                	lui	t5,0x1b
    19de:	0064                	addi	s1,sp,12
    19e0:	9901                	andi	a0,a0,-32
    19e2:	00005d3b          	0x5d3b
    19e6:	bc00                	fsd	fs0,56(s0)
    19e8:	38000017          	auipc	zero,0x38000
    19ec:	053c                	addi	a5,sp,648
    19ee:	0000                	unimp
    19f0:	9901                	andi	a0,a0,-32
    19f2:	5d44                	lw	s1,60(a0)
    19f4:	0000                	unimp
    19f6:	f300                	fsw	fs0,32(a4)
    19f8:	39000017          	auipc	zero,0x39000
    19fc:	065e                	slli	a2,a2,0x17
    19fe:	0000                	unimp
    1a00:	9c01                	0x9c01
    1a02:	6309                	lui	t1,0x2
    1a04:	3800001b          	0x3800001b
    1a08:	0018                	0x18
    1a0a:	3a00                	fld	fs0,48(a2)
    1a0c:	0069                	c.nop	26
    1a0e:	9d01                	0x9d01
    1a10:	5d09                	li	s10,-30
    1a12:	0000                	unimp
    1a14:	6400                	flw	fs0,8(s0)
    1a16:	0018                	0x18
    1a18:	3a00                	fld	fs0,48(a2)
    1a1a:	006a                	c.slli	zero,0x1a
    1a1c:	9d01                	0x9d01
    1a1e:	00005d0b          	0x5d0b
    1a22:	af00                	fsd	fs0,24(a4)
    1a24:	0018                	0x18
    1a26:	3a00                	fld	fs0,48(a2)
    1a28:	9d01006b          	0x9d01006b
    1a2c:	5d0d                	li	s10,-29
    1a2e:	0000                	unimp
    1a30:	e300                	fsw	fs0,0(a4)
    1a32:	0018                	0x18
    1a34:	3900                	fld	fs0,48(a0)
    1a36:	02a9                	addi	t0,t0,10
    1a38:	0000                	unimp
    1a3a:	9e01                	0x9e01
    1a3c:	630a                	flw	ft6,128(sp)
    1a3e:	3100000b          	0x3100000b
    1a42:	0019                	c.nop	6
    1a44:	3900                	fld	fs0,48(a0)
    1a46:	000c                	0xc
    1a48:	0000                	unimp
    1a4a:	9f01                	0x9f01
    1a4c:	7f09                	lui	t5,0xfffe2
    1a4e:	4900001b          	0x4900001b
    1a52:	0019                	c.nop	6
    1a54:	3900                	fld	fs0,48(a0)
    1a56:	000003b3          	add	t2,zero,zero
    1a5a:	a001                	j	1a5a <ti_2+0x122>
    1a5c:	9209                	srli	a2,a2,0x22
    1a5e:	6900001b          	0x6900001b
    1a62:	0019                	c.nop	6
    1a64:	3300                	fld	fs0,32(a4)
    1a66:	0069                	c.nop	26
    1a68:	0000                	unimp
    1a6a:	19b6                	slli	s3,s3,0x2d
    1a6c:	0000                	unimp
    1a6e:	00006933          	or	s2,zero,zero
    1a72:	0b00                	addi	s0,sp,400
    1a74:	001a                	c.slli	zero,0x6
    1a76:	3300                	fld	fs0,32(a4)
    1a78:	0069                	c.nop	26
    1a7a:	0000                	unimp
    1a7c:	00001a7b          	0x1a7b
    1a80:	00006933          	or	s2,zero,zero
    1a84:	c000                	sw	s0,0(s0)
    1a86:	001a                	c.slli	zero,0x6
    1a88:	2b00                	fld	fs0,16(a4)
    1a8a:	02ea                	slli	t0,t0,0x1a
    1a8c:	0000                	unimp
    1a8e:	00001c0b          	0x1c0b
    1a92:	1aaa                	slli	s5,s5,0x2a
    1a94:	0000                	unimp
    1a96:	012c                	addi	a1,sp,136
    1a98:	025a                	slli	tp,tp,0x16
    1a9a:	012c008b          	0x12c008b
    1a9e:	01f3035b          	0x1f3035b
    1aa2:	2c5a                	fld	fs8,400(sp)
    1aa4:	5c01                	li	s8,-32
    1aa6:	8802                	jr	a6
    1aa8:	0000                	unimp
    1aaa:	0002f22b          	0x2f22b
    1aae:	a500                	fsd	fs0,8(a0)
    1ab0:	ca00001b          	0xca00001b
    1ab4:	001a                	c.slli	zero,0x6
    1ab6:	2c00                	fld	fs0,24(s0)
    1ab8:	5a01                	li	s4,-32
    1aba:	8b02                	jr	s6
    1abc:	2c00                	fld	fs0,24(s0)
    1abe:	5b01                	li	s6,-32
    1ac0:	8402                	jr	s0
    1ac2:	2c00                	fld	fs0,24(s0)
    1ac4:	5c01                	li	s8,-32
    1ac6:	8802                	jr	a6
    1ac8:	0000                	unimp
    1aca:	0002fe2b          	0x2fe2b
    1ace:	0b00                	addi	s0,sp,400
    1ad0:	001c                	0x1c
    1ad2:	ec00                	fsw	fs0,24(s0)
    1ad4:	001a                	c.slli	zero,0x6
    1ad6:	2c00                	fld	fs0,24(s0)
    1ad8:	5a01                	li	s4,-32
    1ada:	7202                	flw	ft4,32(sp)
    1adc:	2c00                	fld	fs0,24(s0)
    1ade:	5b01                	li	s6,-32
    1ae0:	7804                	flw	fs1,48(s0)
    1ae2:	7fb8                	flw	fa4,120(a5)
    1ae4:	2c06                	fld	fs8,64(sp)
    1ae6:	5c01                	li	s8,-32
    1ae8:	8202                	jr	tp
    1aea:	0000                	unimp
    1aec:	0003062b          	0x3062b
    1af0:	a500                	fsd	fs0,8(a0)
    1af2:	0c00001b          	0xc00001b
    1af6:	2c00001b          	0x2c00001b
    1afa:	5a01                	li	s4,-32
    1afc:	7202                	flw	ft4,32(sp)
    1afe:	2c00                	fld	fs0,24(s0)
    1b00:	5b01                	li	s6,-32
    1b02:	8402                	jr	s0
    1b04:	2c00                	fld	fs0,24(s0)
    1b06:	5c01                	li	s8,-32
    1b08:	8202                	jr	tp
    1b0a:	0000                	unimp
    1b0c:	0003702b          	0x3702b
    1b10:	a500                	fsd	fs0,8(a0)
    1b12:	2c00001b          	0x2c00001b
    1b16:	2c00001b          	0x2c00001b
    1b1a:	5a01                	li	s4,-32
    1b1c:	8302                	jr	t1
    1b1e:	2c00                	fld	fs0,24(s0)
    1b20:	5b01                	li	s6,-32
    1b22:	8402                	jr	s0
    1b24:	2c00                	fld	fs0,24(s0)
    1b26:	5c01                	li	s8,-32
    1b28:	8502                	jr	a0
    1b2a:	0000                	unimp
    1b2c:	0003ee2b          	0x3ee2b
    1b30:	a500                	fsd	fs0,8(a0)
    1b32:	4c00001b          	0x4c00001b
    1b36:	2c00001b          	0x2c00001b
    1b3a:	5a01                	li	s4,-32
    1b3c:	8702                	jr	a4
    1b3e:	2c00                	fld	fs0,24(s0)
    1b40:	5b01                	li	s6,-32
    1b42:	8402                	jr	s0
    1b44:	2c00                	fld	fs0,24(s0)
    1b46:	5c01                	li	s8,-32
    1b48:	8502                	jr	a0
    1b4a:	0000                	unimp
    1b4c:	fa2d                	bnez	a2,1abe <ti_2+0x186>
    1b4e:	f1000003          	lb	zero,-240(zero) # ffffff10 <_stack_start+0xfffeff10>
    1b52:	001c                	0x1c
    1b54:	2c00                	fld	fs0,24(s0)
    1b56:	5a01                	li	s4,-32
    1b58:	8302                	jr	t1
    1b5a:	2c00                	fld	fs0,24(s0)
    1b5c:	5b01                	li	s6,-32
    1b5e:	8602                	jr	a2
    1b60:	0000                	unimp
    1b62:	0900                	addi	s0,sp,144
    1b64:	005d                	c.nop	23
    1b66:	0000                	unimp
    1b68:	1b7f                	0x1b7f
    1b6a:	0000                	unimp
    1b6c:	6934                	flw	fa3,80(a0)
    1b6e:	0000                	unimp
    1b70:	6500                	flw	fs0,8(a0)
    1b72:	001a                	c.slli	zero,0x6
    1b74:	3400                	fld	fs0,40(s0)
    1b76:	0069                	c.nop	26
    1b78:	0000                	unimp
    1b7a:	1a6e                	slli	s4,s4,0x3b
    1b7c:	0000                	unimp
    1b7e:	0900                	addi	s0,sp,144
    1b80:	005d                	c.nop	23
    1b82:	0000                	unimp
    1b84:	1b92                	slli	s7,s7,0x24
    1b86:	0000                	unimp
    1b88:	6934                	flw	fa3,80(a0)
    1b8a:	0000                	unimp
    1b8c:	7700                	flw	fs0,40(a4)
    1b8e:	001a                	c.slli	zero,0x6
    1b90:	0000                	unimp
    1b92:	5d09                	li	s10,-30
    1b94:	0000                	unimp
    1b96:	a500                	fsd	fs0,8(a0)
    1b98:	3400001b          	0x3400001b
    1b9c:	0069                	c.nop	26
    1b9e:	0000                	unimp
    1ba0:	1a80                	addi	s0,sp,368
    1ba2:	0000                	unimp
    1ba4:	3b00                	fld	fs0,48(a4)
    1ba6:	0594                	addi	a3,sp,704
    1ba8:	0000                	unimp
    1baa:	7501                	lui	a0,0xfffe0
    1bac:	0106                	slli	sp,sp,0x1
    1bae:	1be0                	addi	s0,sp,508
    1bb0:	0000                	unimp
    1bb2:	613c                	flw	fa5,64(a0)
    1bb4:	0031                	c.nop	12
    1bb6:	7501                	lui	a0,0xfffe0
    1bb8:	6315                	lui	t1,0x5
    1bba:	3c00000b          	0x3c00000b
    1bbe:	6f6d                	lui	t5,0x1b
    1bc0:	0064                	addi	s1,sp,12
    1bc2:	7501                	lui	a0,0xfffe0
    1bc4:	5d1d                	li	s10,-25
    1bc6:	0000                	unimp
    1bc8:	3d00                	fld	fs0,56(a0)
    1bca:	0000056f          	jal	a0,1bca <random_keys+0x102>
    1bce:	7501                	lui	a0,0xfffe0
    1bd0:	5d25                	li	s10,-23
    1bd2:	0000                	unimp
    1bd4:	3e00                	fld	fs0,56(a2)
    1bd6:	0069                	c.nop	26
    1bd8:	7a01                	lui	s4,0xfffe0
    1bda:	5d05                	li	s10,-31
    1bdc:	0000                	unimp
    1bde:	0000                	unimp
    1be0:	00010d3b          	0x10d3b
    1be4:	0100                	addi	s0,sp,128
    1be6:	0668                	addi	a0,sp,780
    1be8:	0501                	addi	a0,a0,0
    1bea:	001c                	0x1c
    1bec:	3c00                	fld	fs0,56(s0)
    1bee:	3161                	jal	1876 <result+0x196>
    1bf0:	0100                	addi	s0,sp,128
    1bf2:	1e68                	addi	a0,sp,828
    1bf4:	1c05                	addi	s8,s8,-31
    1bf6:	0000                	unimp
    1bf8:	6d3c                	flw	fa5,88(a0)
    1bfa:	0100646f          	jal	s0,7c0a <_stack_len+0x3c0a>
    1bfe:	2f68                	fld	fa0,216(a4)
    1c00:	0069                	c.nop	26
    1c02:	0000                	unimp
    1c04:	1000                	addi	s0,sp,32
    1c06:	6904                	flw	fs1,16(a0)
    1c08:	0000                	unimp
    1c0a:	3f00                	fld	fs0,56(a4)
    1c0c:	03df 0000 4f01      	0x4f01000003df
    1c12:	3606                	fld	fa2,96(sp)
    1c14:	0001                	nop
    1c16:	9600                	0x9600
    1c18:	0000                	unimp
    1c1a:	0100                	addi	s0,sp,128
    1c1c:	cd9c                	sw	a5,24(a1)
    1c1e:	001c                	0x1c
    1c20:	4000                	lw	s0,0(s0)
    1c22:	3161                	jal	18aa <result+0x1ca>
    1c24:	0100                	addi	s0,sp,128
    1c26:	0b63154f          	fnmadd.d	fa0,ft6,fs6,ft1,rtz
    1c2a:	0000                	unimp
    1c2c:	5a01                	li	s4,-32
    1c2e:	00326137          	lui	sp,0x326
    1c32:	4f01                	li	t5,0
    1c34:	631d                	lui	t1,0x7
    1c36:	1500000b          	0x1500000b
    1c3a:	3800001b          	0x3800001b
    1c3e:	0000056f          	jal	a0,1c3e <random_keys+0x176>
    1c42:	4f01                	li	t5,0
    1c44:	5d24                	lw	s1,120(a0)
    1c46:	0000                	unimp
    1c48:	4100                	lw	s0,0(a0)
    1c4a:	3a00001b          	0x3a00001b
    1c4e:	0069                	c.nop	26
    1c50:	5001                	c.li	zero,-32
    1c52:	5d05                	li	s10,-31
    1c54:	0000                	unimp
    1c56:	9f00                	0x9f00
    1c58:	4100001b          	0x4100001b
    1c5c:	1ccd                	addi	s9,s9,-13
    1c5e:	0000                	unimp
    1c60:	019a                	slli	gp,gp,0x6
    1c62:	0000                	unimp
    1c64:	000a                	c.slli	zero,0x2
    1c66:	0000                	unimp
    1c68:	5501                	li	a0,-32
    1c6a:	8211                	srli	a2,a2,0x4
    1c6c:	001c                	0x1c
    1c6e:	4200                	lw	s0,0(a2)
    1c70:	1ce5                	addi	s9,s9,-7
    1c72:	0000                	unimp
    1c74:	00001bf7          	0x1bf7
    1c78:	da42                	sw	a6,52(sp)
    1c7a:	001c                	0x1c
    1c7c:	1a00                	addi	s0,sp,304
    1c7e:	001c                	0x1c
    1c80:	0000                	unimp
    1c82:	cd41                	beqz	a0,1d1a <random_keys+0x252>
    1c84:	001c                	0x1c
    1c86:	ac00                	fsd	fs0,24(s0)
    1c88:	0001                	nop
    1c8a:	0a00                	addi	s0,sp,272
    1c8c:	0000                	unimp
    1c8e:	0100                	addi	s0,sp,128
    1c90:	115a                	slli	sp,sp,0x36
    1c92:	1ca9                	addi	s9,s9,-22
    1c94:	0000                	unimp
    1c96:	e542                	fsw	fa6,136(sp)
    1c98:	001c                	0x1c
    1c9a:	3d00                	fld	fs0,56(a0)
    1c9c:	001c                	0x1c
    1c9e:	4200                	lw	s0,0(a2)
    1ca0:	1cda                	slli	s9,s9,0x36
    1ca2:	0000                	unimp
    1ca4:	1c60                	addi	s0,sp,572
    1ca6:	0000                	unimp
    1ca8:	4300                	lw	s0,0(a4)
    1caa:	1ccd                	addi	s9,s9,-13
    1cac:	0000                	unimp
    1cae:	01be                	slli	gp,gp,0xf
    1cb0:	0000                	unimp
    1cb2:	000a                	c.slli	zero,0x2
    1cb4:	0000                	unimp
    1cb6:	6001                	0x6001
    1cb8:	4211                	li	tp,4
    1cba:	1ce5                	addi	s9,s9,-7
    1cbc:	0000                	unimp
    1cbe:	00001c83          	lh	s9,0(zero) # 0 <__DYNAMIC>
    1cc2:	da42                	sw	a6,52(sp)
    1cc4:	001c                	0x1c
    1cc6:	a600                	fsd	fs0,8(a2)
    1cc8:	001c                	0x1c
    1cca:	0000                	unimp
    1ccc:	3b00                	fld	fs0,48(a4)
    1cce:	0678                	addi	a4,sp,780
    1cd0:	0000                	unimp
    1cd2:	3d01                	jal	1ae2 <random_keys+0x1a>
    1cd4:	0106                	slli	sp,sp,0x1
    1cd6:	1cf1                	addi	s9,s9,-4
    1cd8:	0000                	unimp
    1cda:	613c                	flw	fa5,64(a0)
    1cdc:	0031                	c.nop	12
    1cde:	3d01                	jal	1aee <random_keys+0x26>
    1ce0:	051e                	slli	a0,a0,0x7
    1ce2:	001c                	0x1c
    1ce4:	3c00                	fld	fs0,56(s0)
    1ce6:	3261                	jal	166e <product2+0x1e6>
    1ce8:	0100                	addi	s0,sp,128
    1cea:	303d                	jal	1518 <product2+0x90>
    1cec:	1c05                	addi	s8,s8,-31
    1cee:	0000                	unimp
    1cf0:	3f00                	fld	fs0,56(a4)
    1cf2:	058a                	slli	a1,a1,0x2
    1cf4:	0000                	unimp
    1cf6:	2301                	jal	21f6 <_min_stack+0x1f6>
    1cf8:	9206                	add	tp,tp,ra
    1cfa:	0000                	unimp
    1cfc:	9e00                	0x9e00
    1cfe:	0000                	unimp
    1d00:	0100                	addi	s0,sp,128
    1d02:	b39c                	fsd	fa5,32(a5)
    1d04:	001d                	c.nop	7
    1d06:	3700                	fld	fs0,40(a4)
    1d08:	3161                	jal	1990 <ti_2+0x58>
    1d0a:	0100                	addi	s0,sp,128
    1d0c:	0b631523          	sh	s6,170(t1) # 70aa <_stack_len+0x30aa>
    1d10:	0000                	unimp
    1d12:	1cc9                	addi	s9,s9,-14
    1d14:	0000                	unimp
    1d16:	6140                	flw	fs0,4(a0)
    1d18:	0032                	c.slli	zero,0xc
    1d1a:	2301                	jal	221a <_min_stack+0x21a>
    1d1c:	631e                	flw	ft6,196(sp)
    1d1e:	0100000b          	0x100000b
    1d22:	056f385b          	0x56f385b
    1d26:	0000                	unimp
    1d28:	2301                	jal	2228 <_min_stack+0x228>
    1d2a:	5d26                	lw	s10,104(sp)
    1d2c:	0000                	unimp
    1d2e:	f500                	fsw	fs0,40(a0)
    1d30:	001c                	0x1c
    1d32:	3a00                	fld	fs0,48(a2)
    1d34:	0069                	c.nop	26
    1d36:	2401                	jal	1f36 <random_keys+0x46e>
    1d38:	5d05                	li	s10,-31
    1d3a:	0000                	unimp
    1d3c:	5300                	lw	s0,32(a4)
    1d3e:	001d                	c.nop	7
    1d40:	4100                	lw	s0,0(a0)
    1d42:	00001db3          	sll	s11,zero,zero
    1d46:	00fe                	slli	ra,ra,0x1f
    1d48:	0000                	unimp
    1d4a:	000a                	c.slli	zero,0x2
    1d4c:	0000                	unimp
    1d4e:	2901                	jal	215e <_min_stack+0x15e>
    1d50:	6811                	lui	a6,0x4
    1d52:	001d                	c.nop	7
    1d54:	4200                	lw	s0,0(a2)
    1d56:	00001dcb          	fnmsub.s	fs11,ft0,ft0,ft0,rtz
    1d5a:	00001dab          	0x1dab
    1d5e:	c042                	sw	a6,0(sp)
    1d60:	001d                	c.nop	7
    1d62:	ce00                	sw	s0,24(a2)
    1d64:	001d                	c.nop	7
    1d66:	0000                	unimp
    1d68:	b341                	j	1ae8 <random_keys+0x20>
    1d6a:	001d                	c.nop	7
    1d6c:	1000                	addi	s0,sp,32
    1d6e:	0001                	nop
    1d70:	0a00                	addi	s0,sp,272
    1d72:	0000                	unimp
    1d74:	0100                	addi	s0,sp,128
    1d76:	112e                	slli	sp,sp,0x2b
    1d78:	00001d8f          	0x1d8f
    1d7c:	cb42                	sw	a6,148(sp)
    1d7e:	001d                	c.nop	7
    1d80:	f100                	fsw	fs0,32(a0)
    1d82:	001d                	c.nop	7
    1d84:	4200                	lw	s0,0(a2)
    1d86:	1dc0                	addi	s0,sp,756
    1d88:	0000                	unimp
    1d8a:	1e14                	addi	a3,sp,816
    1d8c:	0000                	unimp
    1d8e:	4300                	lw	s0,0(a4)
    1d90:	00001db3          	sll	s11,zero,zero
    1d94:	0122                	slli	sp,sp,0x8
    1d96:	0000                	unimp
    1d98:	000a                	c.slli	zero,0x2
    1d9a:	0000                	unimp
    1d9c:	3401                	jal	179c <result+0xbc>
    1d9e:	4211                	li	tp,4
    1da0:	00001dcb          	fnmsub.s	fs11,ft0,ft0,ft0,rtz
    1da4:	00001e37          	lui	t3,0x1
    1da8:	c042                	sw	a6,0(sp)
    1daa:	001d                	c.nop	7
    1dac:	5a00                	lw	s0,48(a2)
    1dae:	001e                	c.slli	zero,0x7
    1db0:	0000                	unimp
    1db2:	3b00                	fld	fs0,48(a4)
    1db4:	003a                	c.slli	zero,0xe
    1db6:	0000                	unimp
    1db8:	0f01                	addi	t5,t5,0
    1dba:	0106                	slli	sp,sp,0x1
    1dbc:	00001dd7          	0x1dd7
    1dc0:	613c                	flw	fa5,64(a0)
    1dc2:	0031                	c.nop	12
    1dc4:	0f01                	addi	t5,t5,0
    1dc6:	051e                	slli	a0,a0,0x7
    1dc8:	001c                	0x1c
    1dca:	3c00                	fld	fs0,56(s0)
    1dcc:	3261                	jal	1754 <result+0x74>
    1dce:	0100                	addi	s0,sp,128
    1dd0:	1c05300f          	0x1c05300f
    1dd4:	0000                	unimp
    1dd6:	4400                	lw	s0,8(s0)
    1dd8:	00001db3          	sll	s11,zero,zero
    1ddc:	008c                	addi	a1,sp,64
    1dde:	0000                	unimp
    1de0:	0006                	c.slli	zero,0x1
    1de2:	0000                	unimp
    1de4:	9c01                	0x9c01
    1de6:	00001dfb          	0x1dfb
    1dea:	c042                	sw	a6,0(sp)
    1dec:	001d                	c.nop	7
    1dee:	7d00                	flw	fs0,56(a0)
    1df0:	001e                	c.slli	zero,0x7
    1df2:	4500                	lw	s0,8(a0)
    1df4:	00001dcb          	fnmsub.s	fs11,ft0,ft0,ft0,rtz
    1df8:	5b01                	li	s6,-32
    1dfa:	4400                	lw	s0,8(s0)
    1dfc:	1ccd                	addi	s9,s9,-13
    1dfe:	0000                	unimp
    1e00:	0130                	addi	a2,sp,136
    1e02:	0000                	unimp
    1e04:	0006                	c.slli	zero,0x1
    1e06:	0000                	unimp
    1e08:	9c01                	0x9c01
    1e0a:	1e1f 0000 da42      	0xda4200001e1f
    1e10:	001c                	0x1c
    1e12:	9000                	0x9000
    1e14:	001e                	c.slli	zero,0x7
    1e16:	4500                	lw	s0,8(a0)
    1e18:	1ce5                	addi	s9,s9,-7
    1e1a:	0000                	unimp
    1e1c:	5b01                	li	s6,-32
    1e1e:	4400                	lw	s0,8(s0)
    1e20:	1be0                	addi	s0,sp,508
    1e22:	0000                	unimp
    1e24:	01cc                	addi	a1,sp,196
    1e26:	0000                	unimp
    1e28:	0006                	c.slli	zero,0x1
    1e2a:	0000                	unimp
    1e2c:	9c01                	0x9c01
    1e2e:	00001e43          	fmadd.s	ft8,ft0,ft0,ft0,rtz
    1e32:	ed42                	fsw	fa6,152(sp)
    1e34:	a300001b          	0xa300001b
    1e38:	001e                	c.slli	zero,0x7
    1e3a:	4500                	lw	s0,8(a0)
    1e3c:	1bf8                	addi	a4,sp,508
    1e3e:	0000                	unimp
    1e40:	5b01                	li	s6,-32
    1e42:	4400                	lw	s0,8(s0)
    1e44:	1ba5                	addi	s7,s7,-23
    1e46:	0000                	unimp
    1e48:	01d2                	slli	gp,gp,0x14
    1e4a:	0000                	unimp
    1e4c:	008c                	addi	a1,sp,64
    1e4e:	0000                	unimp
    1e50:	9c01                	0x9c01
    1e52:	1f19                	addi	t5,t5,-26
    1e54:	0000                	unimp
    1e56:	b245                	j	17f6 <result+0x116>
    1e58:	0100001b          	0x100001b
    1e5c:	425a                	lw	tp,148(sp)
    1e5e:	1bbd                	addi	s7,s7,-17
    1e60:	0000                	unimp
    1e62:	1eb6                	slli	t4,t4,0x2d
    1e64:	0000                	unimp
    1e66:	c942                	sw	a6,144(sp)
    1e68:	e200001b          	0xe200001b
    1e6c:	001e                	c.slli	zero,0x7
    1e6e:	4600                	lw	s0,8(a2)
    1e70:	1bd5                	addi	s7,s7,-11
    1e72:	0000                	unimp
    1e74:	1f40                	addi	s0,sp,948
    1e76:	0000                	unimp
    1e78:	001be047          	fmsub.s	ft0,fs7,ft1,ft0,unknown
    1e7c:	ea00                	fsw	fs0,16(a2)
    1e7e:	0001                	nop
    1e80:	0000                	unimp
    1e82:	0000                	unimp
    1e84:	0100                	addi	s0,sp,128
    1e86:	1180                	addi	s0,sp,224
    1e88:	1e9f 0000 f842      	0xf84200001e9f
    1e8e:	8d00001b          	0x8d00001b
    1e92:	001f 4200 1bed      	0x1bed4200001f
    1e98:	0000                	unimp
    1e9a:	1fa0                	addi	s0,sp,1016
    1e9c:	0000                	unimp
    1e9e:	4700                	lw	s0,8(a4)
    1ea0:	1ba5                	addi	s7,s7,-23
    1ea2:	0000                	unimp
    1ea4:	01f2                	slli	gp,gp,0x1c
    1ea6:	0000                	unimp
    1ea8:	0018                	0x18
    1eaa:	0000                	unimp
    1eac:	7501                	lui	a0,0xfffe0
    1eae:	f506                	fsw	ft1,168(sp)
    1eb0:	001e                	c.slli	zero,0x7
    1eb2:	4800                	lw	s0,16(s0)
    1eb4:	1bc9                	addi	s7,s7,-14
    1eb6:	0000                	unimp
    1eb8:	bd48                	fsd	fa0,184(a0)
    1eba:	4800001b          	0x4800001b
    1ebe:	1bb2                	slli	s7,s7,0x2c
    1ec0:	0000                	unimp
    1ec2:	1849                	addi	a6,a6,-14
    1ec4:	0000                	unimp
    1ec6:	4600                	lw	s0,8(a2)
    1ec8:	1bd5                	addi	s7,s7,-11
    1eca:	0000                	unimp
    1ecc:	1fba                	slli	t6,t6,0x2e
    1ece:	0000                	unimp
    1ed0:	e04a                	fsw	fs2,0(sp)
    1ed2:	fc00001b          	0xfc00001b
    1ed6:	0001                	nop
    1ed8:	3800                	fld	fs0,48(s0)
    1eda:	0000                	unimp
    1edc:	0100                	addi	s0,sp,128
    1ede:	f842118b          	0xf842118b
    1ee2:	d800001b          	0xd800001b
    1ee6:	001f 4200 1bed      	0x1bed4200001f
    1eec:	0000                	unimp
    1eee:	00001feb          	0x1feb
    1ef2:	0000                	unimp
    1ef4:	4a00                	lw	s0,16(a2)
    1ef6:	1be0                	addi	s0,sp,508
    1ef8:	0000                	unimp
    1efa:	021e                	slli	tp,tp,0x7
    1efc:	0000                	unimp
    1efe:	0050                	addi	a2,sp,4
    1f00:	0000                	unimp
    1f02:	8501                	c.srai64	a0
    1f04:	4211                	li	tp,4
    1f06:	1bf8                	addi	a4,sp,508
    1f08:	0000                	unimp
    1f0a:	2005                	jal	1f2a <random_keys+0x462>
    1f0c:	0000                	unimp
    1f0e:	ed42                	fsw	fa6,152(sp)
    1f10:	1800001b          	0x1800001b
    1f14:	0020                	addi	s0,sp,8
    1f16:	0000                	unimp
    1f18:	4b00                	lw	s0,16(a4)
    1f1a:	0372                	slli	t1,t1,0x1c
    1f1c:	0000                	unimp
    1f1e:	0368                	addi	a0,sp,396
    1f20:	0000                	unimp
    1f22:	6e4b0007          	0x6e4b0007
    1f26:	0000                	unimp
    1f28:	6400                	flw	fs0,8(s0)
    1f2a:	0000                	unimp
    1f2c:	0700                	addi	s0,sp,896
    1f2e:	0000                	unimp
    1f30:	001e                	c.slli	zero,0x7
    1f32:	0000                	unimp
    1f34:	0002                	c.slli64	zero
    1f36:	045e                	slli	s0,s0,0x17
    1f38:	0000                	unimp
    1f3a:	0104                	addi	s1,sp,128
    1f3c:	232a                	fld	ft6,136(sp)
    1f3e:	0000                	unimp
    1f40:	0080                	addi	s0,sp,64
    1f42:	0000                	unimp
    1f44:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
    1f48:	072a                	slli	a4,a4,0xa
    1f4a:	0000                	unimp
    1f4c:	075a                	slli	a4,a4,0x16
    1f4e:	0000                	unimp
    1f50:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0xa4>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # fffe00b3 <_stack_start+0xfffd00b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  7e:	0b01130b          	0xb01130b
  82:	3b0b3a0b          	0x3b0b3a0b
  86:	010b390b          	0x10b390b
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	0b390b3b          	0xb390b3b
            a1[length-2] = a1[length-2] + a2[length-2];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
} //end of function
  f8:	1400                	addi	s0,sp,544
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    asm volatile(
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
            for (i = 0; i < (length / 3); i++) {
 108:	16000013          	li	zero,352
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	39053b0b          	0x39053b0b
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0013010b          	0x13010b
    asm volatile(
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-2) / 3); i++) {
 12e:	1349                	addi	t1,t1,-14
    asm volatile(
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
}
 134:	0d19                	addi	s10,s10,6
    switch(length%3) {
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            for (i = 0; i < (length / 3); i++) {
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
            a1[length-1] = a2[length-1];
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
            a1[length-1] = a2[length-1];
 188:	193c                	addi	a5,sp,184
            a1[length-2] = a2[length-2];
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
 192:	20000013          	li	zero,512
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1aa:	0300                	addi	s0,sp,384
    asm volatile(
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
            for (i = 0; i < ((length-1) / 3); i++) {
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
    asm volatile(
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    asm volatile(
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0x82>
}
 1d0:	00052f13          	slti	t5,a0,0
    switch(length%3) {
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
    asm volatile(
 1ea:	3f01                	jal	fa <array_add+0x68>
            for (i = 0; i < (length / 3); i++) {
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
            for (i = 0; i < ((length-2) / 3); i++) {
 1f4:	1113490b          	0x1113490b
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
    asm volatile(
 1fc:	9718                	0x9718
            for (i = 0; i < ((length-2) / 3); i++) {
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
            a1[length-1] = a1[length-1] % mod;
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
            for (i = 0; i < ((length-1) / 3); i++) {
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
            a1[length-1] = a1[length-1] % mod;
 224:	0000                	unimp
            a1[length-2] = a1[length-2] % mod;
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
    asm volatile(
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
            for (i = 0; i < (length / 3); i++) {
 23e:	0b39053b          	0xb39053b
    asm volatile(
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
 24c:	39053b0b          	0x39053b0b
    asm volatile(
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
            for (i = 0; i < ((length-2) / 3); i++) {
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
    int line[size_b][size_a + size_b];
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
    int line[size_b][size_a + size_b];
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 290:	4919270b          	0x4919270b
 294:	12011113          	0x12011113
 298:	4006                	0x4006
    int pola[size_a];
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
    int line[size_b][size_a + size_b];
 2a2:	0530                	addi	a2,sp,648
    int pola[size_a];
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
    int polb[size_b];
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
 2b0:	31000017          	auipc	zero,0x31000
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 2ba:	0b39053b          	0xb39053b
    int polb[size_b];
 2be:	1349                	addi	t1,t1,-14
    int pola[size_a];
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
            product[j] = 0;
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
    array_equ(pola,a,size_a);
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
    array_mod(pola,mod,size_a);
 2ea:	0034                	addi	a3,sp,8
 2ec:	0b3a0803          	lb	a6,179(s4)
 2f0:	0b39053b          	0xb39053b
    array_equ(polb,b,size_b);
 2f4:	1349                	addi	t1,t1,-14
 2f6:	0000                	unimp
 2f8:	2e36                	fld	ft8,328(sp)
 2fa:	3f01                	jal	20a <array_mod+0x38>
 2fc:	0319                	addi	t1,t1,6
    array_mod(polb,mod,size_b);
 2fe:	3a0e                	fld	fs4,224(sp)
 300:	390b3b0b          	0x390b3b0b
 304:	4919270b          	0x4919270b
    if(star_mult == 1){
 308:	12011113          	0x12011113
 30c:	4006                	0x4006
 30e:	9718                	0x9718
 310:	1942                	slli	s2,s2,0x30
 312:	1301                	addi	t1,t1,-32
 314:	0000                	unimp
 316:	03000537          	lui	a0,0x3000
 31a:	3a08                	fld	fa0,48(a2)
 31c:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 320:	0213490b          	0x213490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 324:	38000017          	auipc	zero,0x38000
            product[j] = 0;
 328:	0005                	c.nop	1
 32a:	0b3a0e03          	lb	t3,179(s4)
            line[i][j] = 0;
 32e:	0b390b3b          	0xb390b3b
            product[j] = 0;
 332:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 334:	1702                	slli	a4,a4,0x20
 336:	0000                	unimp
 338:	3439                	jal	fffffd46 <_stack_start+0xfffefd46>
 33a:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
 33c:	3a0e                	fld	fs4,224(sp)
 33e:	390b3b0b          	0x390b3b0b
 342:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 346:	3a000017          	auipc	zero,0x3a000
        for (j = size_b -1; j >= 0; j = j-1){
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0803          	lb	a6,179(s4)
    for (i = 0; i < size_b; ++i){
 350:	0b390b3b          	0xb390b3b
    for(i = 0; i < size_b; ++i){
 354:	1349                	addi	t1,t1,-14
		array_add(product,line[i],size_a+size_b-1);
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
    for(i = 0; i < size_b; ++i){
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
    array_mod(product,mod,(size_a+size_b-1));
 366:	2019270b          	0x2019270b
 36a:	0013010b          	0x13010b
 36e:	3c00                	fld	fs0,56(s0)
}
 370:	0005                	c.nop	1
 372:	0b3a0803          	lb	a6,179(s4)
 376:	0b390b3b          	0xb390b3b
 37a:	1349                	addi	t1,t1,-14
 37c:	0000                	unimp
 37e:	053d                	addi	a0,a0,15
 380:	0300                	addi	s0,sp,384
 382:	3a0e                	fld	fs4,224(sp)
 384:	390b3b0b          	0x390b3b0b
 388:	0013490b          	0x13490b
 38c:	3e00                	fld	fs0,56(a2)
 38e:	0034                	addi	a3,sp,8
 390:	0b3a0803          	lb	a6,179(s4)
 394:	0b390b3b          	0xb390b3b
 398:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 39a:	0000                	unimp
 39c:	3f012e3f 3a0e0319 	0x3a0e03193f012e3f
 3a4:	390b3b0b          	0x390b3b0b
 3a8:	1119270b          	0x1119270b
 3ac:	1201                	addi	tp,tp,-32
 3ae:	4006                	0x4006
 3b0:	9718                	0x9718
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b2:	1942                	slli	s2,s2,0x30
 3b4:	1301                	addi	t1,t1,-32
        for (j = size_b -1; j >= 0; j = j-1){
 3b6:	0000                	unimp
 3b8:	0540                	addi	s0,sp,644
 3ba:	0300                	addi	s0,sp,384
 3bc:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3be:	390b3b0b          	0x390b3b0b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c2:	0213490b          	0x213490b
 3c6:	0018                	0x18
 3c8:	4100                	lw	s0,0(a0)
 3ca:	011d                	addi	sp,sp,7
 3cc:	1331                	addi	t1,t1,-20
 3ce:	0111                	addi	sp,sp,4
 3d0:	0612                	slli	a2,a2,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d2:	0b58                	addi	a4,sp,404
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3d4:	0b59                	addi	s6,s6,22
 3d6:	13010b57          	0x13010b57
            for (k = size_a-1; k >= 0; k = k-1 ){
 3da:	0000                	unimp
 3dc:	0542                	slli	a0,a0,0x10
        for (j = size_b -1; j >= 0; j = j-1){
 3de:	3100                	fld	fs0,32(a0)
 3e0:	00170213          	addi	tp,a4,1 # fffe0001 <_stack_start+0xfffd0001>
 3e4:	4300                	lw	s0,0(a4)
	array_mod(line[i],mod,size_a+size_b-1);
 3e6:	011d                	addi	sp,sp,7
 3e8:	1331                	addi	t1,t1,-20
 3ea:	0111                	addi	sp,sp,4
 3ec:	0612                	slli	a2,a2,0x4
    for (i = 0; i < size_b; ++i){
 3ee:	0b58                	addi	a4,sp,404
 3f0:	0b59                	addi	s6,s6,22
 3f2:	00000b57          	0xb57
		array_add(product,line[i],size_a+size_b-1);
 3f6:	2e44                	fld	fs1,152(a2)
 3f8:	3101                	jal	fffffff8 <_stack_start+0xfffefff8>
    for(i = 0; i < size_b; ++i){
 3fa:	12011113          	0x12011113
 3fe:	4006                	0x4006
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 400:	9718                	0x9718
    int line[size_b][size_a + size_b];
 402:	1942                	slli	s2,s2,0x30
 404:	1301                	addi	t1,t1,-32
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 406:	0000                	unimp
 408:	0545                	addi	a0,a0,17
 40a:	3100                	fld	fs0,32(a0)
 40c:	00180213          	addi	tp,a6,1 # 4001 <_stack_len+0x1>
    int line[size_b][size_a + size_b];
 410:	4600                	lw	s0,8(a2)
 412:	0034                	addi	a3,sp,8
 414:	1331                	addi	t1,t1,-20
 416:	1702                	slli	a4,a4,0x20
 418:	0000                	unimp
 41a:	31011d47          	fmsub.s	fs10,ft2,fa6,ft6,rtz
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 41e:	55015213          	0x55015213
 422:	590b5817          	auipc	a6,0x590b5
 426:	010b570b          	0x10b570b
 42a:	48000013          	li	zero,1152
    int line[size_b][size_a + size_b];
 42e:	0005                	c.nop	1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 430:	1331                	addi	t1,t1,-20
 432:	0000                	unimp
    int line[size_b][size_a + size_b];
 434:	0b49                	addi	s6,s6,18
 436:	5501                	li	a0,-32
 438:	4a000017          	auipc	zero,0x4a000
    int pola[size_a];
 43c:	011d                	addi	sp,sp,7
 43e:	1331                	addi	t1,t1,-20
 440:	0152                	slli	sp,sp,0x14
    int line[size_b][size_a + size_b];
 442:	1755                	addi	a4,a4,-11
    int pola[size_a];
 444:	0b58                	addi	a4,sp,404
 446:	0b59                	addi	s6,s6,22
    int polb[size_b];
 448:	00000b57          	0xb57
 44c:	3f002e4b          	fnmsub.q	ft8,ft0,fa6,ft7,rdn
 450:	3c19                	jal	fffffe66 <_stack_start+0xfffefe66>
 452:	6e19                	lui	t3,0x6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 454:	030e                	slli	t1,t1,0x3
 456:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 458:	000b3b0b          	0xb3b0b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 45c:	0000                	unimp
    int pola[size_a];
 45e:	1101                	addi	sp,sp,-32
 460:	1000                	addi	s0,sp,32
    int polb[size_b];
 462:	5506                	lw	a0,96(sp)
    for (i = 0; i < size_b; ++i){
 464:	0306                	slli	t1,t1,0x1
 466:	1b0e                	slli	s6,s6,0x23
 468:	250e                	fld	fa0,192(sp)
            product2[j] = 0;
 46a:	130e                	slli	t1,t1,0x23
 46c:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	1036                	c.slli	zero,0x2d
       2:	0000                	unimp
       4:	104a                	c.slli	zero,0x32
       6:	0000                	unimp
       8:	0001                	nop
       a:	4a5a                	lw	s4,148(sp)
       c:	0010                	0x10
       e:	4b00                	lw	s0,16(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	104c                	addi	a1,sp,36
      20:	0000                	unimp
      22:	108c                	addi	a1,sp,96
      24:	0000                	unimp
      26:	0001                	nop
      28:	925a                	add	tp,tp,s6
      2a:	0010                	0x10
      2c:	9c00                	0x9c00
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0faa                	slli	t6,t6,0xa
      3e:	0000                	unimp
      40:	0ffe                	slli	t6,t6,0x1f
      42:	0000                	unimp
      44:	0001                	nop
      46:	fe5a                	fsw	fs6,60(sp)
      48:	2600000f          	0x2600000f
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	8c00                	0x8c00
      5e:	e000000f          	0xe000000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fe0                	addi	s0,sp,988
      6c:	0000                	unimp
      6e:	0fea                	slli	t6,t6,0x1a
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fea                	slli	t6,t6,0x1a
      78:	0000                	unimp
      7a:	1029                	c.nop	-22
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
      80:	007d                	c.nop	31
      82:	1029                	c.nop	-22
      84:	0000                	unimp
      86:	1090                	addi	a2,sp,96
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	9079                	srli	s0,s0,0x3e
}
      90:	0010                	0x10
    switch(length%3) {
      92:	9200                	0x9200
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	1092                	slli	ra,ra,0x24
      9e:	0000                	unimp
      a0:	109c                	addi	a5,sp,96
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	8c00                	0x8c00
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ba00000f          	0xba00000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fba                	slli	t6,t6,0xe
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	0fbc                	addi	a5,sp,984
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0fbc                	addi	a5,sp,984
      cc:	0000                	unimp
      ce:	1042                	c.slli	zero,0x30
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	427a                	lw	tp,156(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	0010                	0x10
      da:	4b00                	lw	s0,16(a4)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	4b00                	lw	s0,16(a4)
      e4:	0010                	0x10
      e6:	9000                	0x9000
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	0010                	0x10
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	1090                	addi	a2,sp,96
      f2:	0000                	unimp
      f4:	1092                	slli	ra,ra,0x24
      f6:	0000                	unimp
} //end of function
      f8:	f0720003          	lb	zero,-249(tp) # fffe1f07 <_stack_start+0xfffd1f07>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fc:	927a                	add	tp,tp,t5
    asm volatile(
      fe:	0010                	0x10
     100:	9c00                	0x9c00
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     108:	7af0                	flw	fa2,116(a3)
	...
    asm volatile(
     112:	0f8c                	addi	a1,sp,976
     114:	0000                	unimp
     116:	0fc6                	slli	t6,t6,0x11
     118:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	c4910003          	lb	zero,-951(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	c67c                	sw	a5,76(a2)
     120:	d000000f          	0xd000000f
    asm volatile(
     124:	0200000f          	fence	r,unknown
     128:	7e00                	flw	fs0,56(a2)
     12a:	d000                	sw	s0,32(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	8a00000f          	0x8a00000f
    asm volatile(
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
}
     134:	8200                	0x8200
    switch(length%3) {
     136:	8a00                	0x8a00
     138:	0010                	0x10
     13a:	9000                	0x9000
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	1090                	addi	a2,sp,96
     146:	0000                	unimp
     148:	1092                	slli	ra,ra,0x24
            for (i = 0; i < (length / 3); i++) {
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	927c                	0x927c
     152:	0010                	0x10
     154:	9c00                	0x9c00
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
     164:	8c00                	0x8c00
            a1[length-1] = a2[length-1];
     166:	fa00000f          	0xfa00000f
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	0ffa                	slli	t6,t6,0x1e
     174:	0000                	unimp
     176:	1000                	addi	s0,sp,32
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	1000                	addi	s0,sp,32
     180:	0000                	unimp
     182:	1029                	c.nop	-22
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
            a1[length-1] = a2[length-1];
     188:	0080                	addi	s0,sp,64
            a1[length-2] = a2[length-2];
     18a:	1029                	c.nop	-22
     18c:	0000                	unimp
     18e:	1090                	addi	a2,sp,96
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	907e                	c.add	zero,t6
     198:	0010                	0x10
    asm volatile(
     19a:	9200                	0x9200
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
            for (i = 0; i < (length / 3); i++) {
     1a4:	1092                	slli	ra,ra,0x24
     1a6:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	109c                	addi	a5,sp,96
     1aa:	0000                	unimp
    asm volatile(
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	0000                	unimp
     1b8:	ae00                	fsd	fs0,24(a2)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1ba:	b200000f          	0xb200000f
    asm volatile(
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	569f 0010 6000      	0x60000010569f
            for (i = 0; i < ((length-2) / 3); i++) {
     1ca:	0010                	0x10
    asm volatile(
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
}
     1d0:	009f 0000 0000      	0x9f
    switch(length%3) {
     1d6:	0000                	unimp
     1d8:	a400                	fsd	fs0,8(s0)
     1da:	000c                	0xc
     1dc:	bc00                	fsd	fs0,56(s0)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0cbc                	addi	a5,sp,600
            for (i = 0; i < (length / 3); i++) {
     1e6:	0000                	unimp
     1e8:	0d20                	addi	s0,sp,664
    asm volatile(
     1ea:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     1ec:	0001                	nop
     1ee:	2058                	fld	fa4,128(s0)
     1f0:	000d                	c.nop	3
            for (i = 0; i < ((length-2) / 3); i++) {
     1f2:	2c00                	fld	fs0,24(s0)
     1f4:	000d                	c.nop	3
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
    asm volatile(
     1fc:	0d2c                	addi	a1,sp,664
            for (i = 0; i < ((length-2) / 3); i++) {
     1fe:	0000                	unimp
     200:	0d32                	slli	s10,s10,0xc
            a1[length-1] = a1[length-1] % mod;
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0d32                	slli	s10,s10,0xc
     20c:	0000                	unimp
     20e:	0d68                	addi	a0,sp,668
     210:	0000                	unimp
     212:	0001                	nop
            for (i = 0; i < ((length-1) / 3); i++) {
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	a400                	fsd	fs0,8(s0)
    asm volatile(
     21e:	000c                	0xc
            for (i = 0; i < ((length-1) / 3); i++) {
     220:	c600                	sw	s0,8(a2)
     222:	000c                	0xc
            a1[length-1] = a1[length-1] % mod;
     224:	0100                	addi	s0,sp,128
            a1[length-2] = a1[length-2] % mod;
     226:	5b00                	lw	s0,48(a4)
     228:	0cc6                	slli	s9,s9,0x11
     22a:	0000                	unimp
     22c:	0d2a                	slli	s10,s10,0xa
     22e:	0000                	unimp
     230:	0001                	nop
} //end of function
     232:	2a65                	jal	3ea <polymult+0x18c>
    asm volatile(
     234:	000d                	c.nop	3
     236:	3200                	fld	fs0,32(a2)
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
            for (i = 0; i < (length / 3); i++) {
     23e:	5b01                	li	s6,-32
     240:	329f 000d 6800      	0x6800000d329f
    asm volatile(
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0ca4                	addi	s1,sp,600
     256:	0000                	unimp
     258:	0cbe                	slli	s9,s9,0xf
            for (i = 0; i < ((length-2) / 3); i++) {
     25a:	0000                	unimp
     25c:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     25e:	be5c                	fsd	fa5,184(a2)
     260:	000c                	0xc
     262:	2400                	fld	fs0,8(s0)
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
    int line[size_b][size_a + size_b];
     26a:	0d24                	addi	s1,sp,664
     26c:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     26e:	0d32                	slli	s10,s10,0xc
     270:	0000                	unimp
    int line[size_b][size_a + size_b];
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d32                	slli	s10,s10,0xc
     27a:	0000                	unimp
     27c:	0d68                	addi	a0,sp,668
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	a400                	fsd	fs0,8(s0)
     28c:	000c                	0xc
     28e:	c000                	sw	s0,0(s0)
    int line[size_b][size_a + size_b];
     290:	000c                	0xc
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     292:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     294:	5d00                	lw	s0,56(a0)
     296:	0cc0                	addi	s0,sp,596
     298:	0000                	unimp
    int pola[size_a];
     29a:	0cd9                	addi	s9,s9,22
     29c:	0000                	unimp
     29e:	0001                	nop
     2a0:	d95a                	sw	s6,176(sp)
    int line[size_b][size_a + size_b];
     2a2:	000c                	0xc
    int pola[size_a];
     2a4:	6800                	flw	fs0,16(s0)
     2a6:	000d                	c.nop	3
    int polb[size_b];
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
    int pola[size_a];
     2ae:	009f 0000 0000      	0x9f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     2b4:	0000                	unimp
     2b6:	a400                	fsd	fs0,8(s0)
     2b8:	000c                	0xc
    int line[size_b][size_a + size_b];
     2ba:	c800                	sw	s0,16(s0)
     2bc:	000c                	0xc
    int polb[size_b];
     2be:	0100                	addi	s0,sp,128
    int pola[size_a];
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0cc8                	addi	a0,sp,596
    for (i = 0; i < size_b; ++i){
     2c4:	0000                	unimp
     2c6:	0d2e                	slli	s10,s10,0xb
     2c8:	0000                	unimp
            product[j] = 0;
     2ca:	0001                	nop
     2cc:	000d2e67          	0xd2e67
     2d0:	3200                	fld	fs0,32(a2)
    for (i = 0; i < size_b; ++i){
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
    array_equ(pola,a,size_a);
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	329f 000d 6800      	0x6800000d329f
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
    array_mod(pola,mod,size_a);
     2ee:	0ca4                	addi	s1,sp,600
     2f0:	0000                	unimp
    array_equ(polb,b,size_b);
     2f2:	0cd9                	addi	s9,s9,22
     2f4:	0000                	unimp
     2f6:	0001                	nop
     2f8:	d95f 000c 6800      	0x6800000cd95f
    array_mod(polb,mod,size_b);
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
    if(star_mult == 1){
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	a400                	fsd	fs0,8(s0)
     310:	000c                	0xc
     312:	d900                	sw	s0,48(a0)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	0cd9                	addi	s9,s9,22
     31c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0d28                	addi	a0,sp,664
     320:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	0001                	nop
     324:	2864                	fld	fs1,208(s0)
            product[j] = 0;
     326:	000d                	c.nop	3
     328:	3200                	fld	fs0,32(a2)
     32a:	000d                	c.nop	3
            line[i][j] = 0;
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
            product[j] = 0;
     330:	6001                	0x6001
     332:	329f 000d 6800      	0x6800000d329f
        for(j = 0; j < size_a + size_b -1; ++j){
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     33c:	6400                	flw	fs0,8(s0)
	...
        for(j = 0; j < size_a + size_b -1; ++j){
     346:	0cda                	slli	s9,s9,0x16
    if(star_mult == 1){
     348:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	00000ce7          	jalr	s9,zero # 0 <__DYNAMIC>
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	0001                	nop
    for (i = 0; i < size_b; ++i){
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     354:	0000                	unimp
		array_add(product,line[i],size_a+size_b-1);
     356:	0000                	unimp
     358:	ea00                	fsw	fs0,16(a2)
     35a:	000c                	0xc
     35c:	0800                	addi	s0,sp,16
     35e:	000d                	c.nop	3
    for(i = 0; i < size_b; ++i){
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
    array_mod(product,mod,(size_a+size_b-1));
     364:	0d08                	addi	a0,sp,656
     366:	0000                	unimp
     368:	00000d0b          	0xd0b
     36c:	0001                	nop
     36e:	325c                	fld	fa5,160(a2)
}
     370:	000d                	c.nop	3
     372:	5600                	lw	s0,40(a2)
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0d0c                	addi	a1,sp,656
     384:	0000                	unimp
     386:	0d15                	addi	s10,s10,5
     388:	0000                	unimp
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	1600                	addi	s0,sp,800
     396:	000d                	c.nop	3
     398:	3200                	fld	fs0,32(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d56                	slli	s10,s10,0x15
     3a2:	0000                	unimp
     3a4:	0d68                	addi	a0,sp,668
     3a6:	0000                	unimp
     3a8:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     3aa:	005a                	c.slli	zero,0x16
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b2:	ea00                	fsw	fs0,16(a2)
     3b4:	000c                	0xc
        for (j = size_b -1; j >= 0; j = j-1){
     3b6:	f000                	fsw	fs0,32(s0)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3be:	0cf0                	addi	a2,sp,604
     3c0:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c2:	0cfc                	addi	a5,sp,604
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	fc5d                	bnez	s0,386 <polymult+0x128>
     3ca:	000c                	0xc
     3cc:	0200                	addi	s0,sp,256
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	5e00                	lw	s0,56(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3d4:	0d16                	slli	s10,s10,0x5
     3d6:	0000                	unimp
     3d8:	0d22                	slli	s10,s10,0x8
            for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	0000                	unimp
     3dc:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     3de:	3259                	jal	fffffd64 <_stack_start+0xfffefd64>
     3e0:	000d                	c.nop	3
     3e2:	3c00                	fld	fs0,56(s0)
     3e4:	000d                	c.nop	3
	array_mod(line[i],mod,size_a+size_b-1);
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d3c                	addi	a5,sp,664
     3ec:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     3ee:	0d42                	slli	s10,s10,0x10
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
		array_add(product,line[i],size_a+size_b-1);
     3f6:	429f 000d 4400      	0x4400000d429f
    for(i = 0; i < size_b; ++i){
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     400:	5d00                	lw	s0,56(a0)
    int line[size_b][size_a + size_b];
     402:	0d44                	addi	s1,sp,660
     404:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     406:	0d56                	slli	s10,s10,0x15
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	565e                	lw	a2,244(sp)
     40e:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     410:	6000                	flw	fs0,0(s0)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d60                	addi	s0,sp,668
     41a:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41c:	0d66                	slli	s10,s10,0x19
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2)
     424:	669f 000d 6800      	0x6800000d669f
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0c1e                	slli	s8,s8,0x7
    int pola[size_a];
     43a:	0000                	unimp
     43c:	0c32                	slli	s8,s8,0xc
     43e:	0000                	unimp
     440:	0001                	nop
    int line[size_b][size_a + size_b];
     442:	325a                	fld	ft4,432(sp)
    int pola[size_a];
     444:	000c                	0xc
     446:	7c00                	flw	fs0,56(s0)
    int polb[size_b];
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
    int pola[size_a];
     44e:	0c7c                	addi	a5,sp,540
    int polb[size_b];
     450:	0000                	unimp
     452:	0ca4                	addi	s1,sp,600
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     454:	0000                	unimp
     456:	0004                	0x4
    int line[size_b][size_a + size_b];
     458:	9f5a01f3          	0x9f5a01f3
	...
    for (i = 0; i < size_b; ++i){
     464:	0c1e                	slli	s8,s8,0x7
     466:	0000                	unimp
     468:	0c3a                	slli	s8,s8,0xe
            product2[j] = 0;
     46a:	0000                	unimp
     46c:	0001                	nop
     46e:	000c3a5b          	0xc3a5b
    for (i = 0; i < size_b; ++i){
     472:	8a00                	0x8a00
     474:	000c                	0xc
    array_equ(pola,a,size_a);
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     47a:	0c8a                	slli	s9,s9,0x2
     47c:	0000                	unimp
     47e:	0c92                	slli	s9,s9,0x4
     480:	0000                	unimp
    array_equ(polb,b,size_b);
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0c92                	slli	s9,s9,0x4
     48a:	0000                	unimp
     48c:	0ca4                	addi	s1,sp,600
    if(star_mult == 1){
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	1e00                	addi	s0,sp,816
     49c:	000c                	0xc
     49e:	2e00                	fld	fs0,24(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c2e                	slli	s8,s8,0xb
            product2[j] = 0;
     4a8:	0000                	unimp
     4aa:	0c64                	addi	s1,sp,540
     4ac:	0000                	unimp
            line[i][j] = 0;
     4ae:	0001                	nop
     4b0:	6459                	lui	s0,0x16
            product2[j] = 0;
     4b2:	000c                	0xc
     4b4:	6700                	flw	fs0,8(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     4b6:	000c                	0xc
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	00000c67          	jalr	s8,zero # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     4c0:	0ca4                	addi	s1,sp,600
     4c2:	0000                	unimp
     4c4:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     4c6:	9f5c01f3          	0x9f5c01f3
	...
                line[size_b-1-j][k] = pola[k]*polb[j];
     4d2:	0c1e                	slli	s8,s8,0x7
     4d4:	0000                	unimp
     4d6:	0c45                	addi	s8,s8,17
     4d8:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4da:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     4dc:	455d                	li	a0,23
     4de:	000c                	0xc
     4e0:	6000                	flw	fs0,0(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0c60                	addi	s0,sp,540
     4ea:	0000                	unimp
     4ec:	0ca4                	addi	s1,sp,600
     4ee:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4f0:	0004                	0x4
	   array_add(product2,line[i],size_a+size_b-1);
     4f2:	9f5d01f3          	0x9f5d01f3
	...
}
     4fe:	0c1e                	slli	s8,s8,0x7
     500:	0000                	unimp
     502:	0c45                	addi	s8,s8,17
     504:	0000                	unimp
     506:	0001                	nop
     508:	455e                	lw	a0,212(sp)
     50a:	000c                	0xc
     50c:	8e00                	0x8e00
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6400                	flw	fs0,8(s0)
     514:	0c8e                	slli	s9,s9,0x3
     516:	0000                	unimp
     518:	0c92                	slli	s9,s9,0x4
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
     522:	0c92                	slli	s9,s9,0x4
     524:	0000                	unimp
     526:	0ca4                	addi	s1,sp,600
            for (k = size_a-1; k >= 0; k = k-1 ){
     528:	0000                	unimp
     52a:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	6000                	flw	fs0,0(s0)
     536:	000c                	0xc
     538:	6700                	flw	fs0,8(a4)
     53a:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     53c:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     53e:	5a00                	lw	s0,48(a2)
     540:	00000c67          	jalr	s8,zero # 0 <__DYNAMIC>
            for (k = size_a-1; k >= 0; k = k-1 ){
     544:	0c8c                	addi	a1,sp,592
     546:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     548:	0001                	nop
     54a:	000c9263          	bnez	s9,54e <polymult2+0x14e>
     54e:	a400                	fsd	fs0,8(s0)
	   array_add(product2,line[i],size_a+size_b-1);
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
    int v[size_N];
     55e:	0c76                	slli	s8,s8,0x1d
     560:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     562:	0c88                	addi	a0,sp,592
    int v[size_N];
     564:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     566:	0001                	nop
     568:	9259                	srli	a2,a2,0x36
     56a:	000c                	0xc
     56c:	9c00                	0x9c00
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
     574:	0c9c                	addi	a5,sp,592
     576:	0000                	unimp
     578:	0ca2                	slli	s9,s9,0x8
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
    int v[size_N];
     580:	a29f 000c a400      	0xa400000ca29f
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
    int q[size_N];
     58a:	5900                	lw	s0,48(a0)
	...
    int denum_temp[size_D];
     594:	092c                	addi	a1,sp,152
     596:	0000                	unimp
     598:	0970                	addi	a2,sp,156
     59a:	0000                	unimp
    int num_temp[size_N];
     59c:	0001                	nop
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     59e:	705a                	flw	ft0,180(sp)
    int denum_temp[size_D];
     5a0:	0009                	c.nop	2
     5a2:	3200                	fld	fs0,32(a2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5a4:	0100000b          	0x100000b
    int v[size_N];
     5a8:	6200                	flw	fs0,0(a2)
       array_equ(num_temp,num,size_N);
     5aa:	0b32                	slli	s6,s6,0xc
     5ac:	0000                	unimp
     5ae:	0b56                	slli	s6,s6,0x15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
    int denum_temp[size_D];
     5b6:	569f 000b 7600      	0x7600000b569f
       array_mod(num_temp, mod, size_N);
     5bc:	0400000b          	0x400000b
     5c0:	f300                	fsw	fs0,32(a4)
    int denum_temp[size_D];
     5c2:	5a01                	li	s4,-32
    array_equ(denum_temp,denum,size_D);
     5c4:	769f 000b 0a00      	0xa00000b769f
     5ca:	000c                	0xc
    array_mod(denum_temp,mod,size_D);
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0c0a                	slli	s8,s8,0x2
     5d2:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     5d4:	0c1e                	slli	s8,s8,0x7
     5d6:	0000                	unimp
     5d8:	7f850003          	lb	zero,2040(a0)
    for (i = size_D-1; i >= 0; i = i-1){
     5dc:	009f 0000 0000      	0x9f
     5e2:	0000                	unimp
     5e4:	2c00                	fld	fs0,24(s0)
    for (i = 0; i < size_N; ++i){
     5e6:	0009                	c.nop	2
     5e8:	6800                	flw	fs0,16(s0)
        if ( (b_N*u)%mod == 1 )
     5ea:	0009                	c.nop	2
    for (u = 0; u < mod; ++u){
     5ec:	0100                	addi	s0,sp,128
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	0968                	addi	a0,sp,156
     5f2:	0000                	unimp
        q[i] = 0;
     5f4:	0b5e                	slli	s6,s6,0x17
     5f6:	0000                	unimp
     5f8:	0001                	nop
     5fa:	000b5e67          	0xb5e67
     5fe:	7600                	flw	fs0,40(a2)
     600:	0400000b          	0x400000b
        v[i] = 0;
     604:	f300                	fsw	fs0,32(a4)
    for (i = 0; i < size_N; ++i){
     606:	5b01                	li	s6,-32
     608:	769f 000b 1e00      	0x1e00000b769f
    for (i = size_D-1; i >= 0; i = i-1){
     60e:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     610:	0100                	addi	s0,sp,128
     612:	6700                	flw	fs0,8(a4)
	...
    for (u = 0; u < mod; ++u){
     61c:	092c                	addi	a1,sp,152
        if( num_temp[i] != 0 )
     61e:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     620:	096c                	addi	a1,sp,156
     622:	0000                	unimp
     624:	0001                	nop
     626:	6c5c                	flw	fa5,28(s0)
     628:	0009                	c.nop	2
     62a:	5a00                	lw	s0,48(a2)
     62c:	0100000b          	0x100000b
    while (d >= d2){
     630:	6600                	flw	fs0,8(a2)
      array_equ(result,q,size_N);
     632:	0b5a                	slli	s6,s6,0x16
     634:	0000                	unimp
     636:	0b76                	slli	s6,s6,0x1d
     638:	0000                	unimp
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
    for(i = size_N; i < (2*size_N); ++i){
     640:	0b76                	slli	s6,s6,0x1d
     642:	0000                	unimp
        result[i] = num_temp[i-size_N];
     644:	0c1e                	slli	s8,s8,0x7
     646:	0000                	unimp
     648:	0001                	nop
     64a:	0066                	c.slli	zero,0x19
    for(i = size_N; i < (2*size_N); ++i){
     64c:	0000                	unimp
     64e:	0000                	unimp
}
     650:	0000                	unimp
     652:	ba00                	fsd	fs0,48(a2)
     654:	000a                	c.slli	zero,0x2
     656:	c400                	sw	s0,8(s0)
     658:	000a                	c.slli	zero,0x2
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
     666:	0ad4                	addi	a3,sp,340
     668:	0000                	unimp
     66a:	0af1                	addi	s5,s5,28
     66c:	0000                	unimp
     66e:	0001                	nop
     670:	d65a                	sw	s6,44(sp)
     672:	ea00000b          	0xea00000b
     676:	0100000b          	0x100000b
        v[(d-d2)] = u*r_d;
     67a:	5a00                	lw	s0,48(a2)
	...
     684:	0af2                	slli	s5,s5,0x1c
        array_mod(v, mod, size_N);
     686:	0000                	unimp
     688:	0b05                	addi	s6,s6,1
     68a:	0000                	unimp
        v[(d-d2)] = u*r_d;
     68c:	0001                	nop
        array_mod(v, mod, size_N);
     68e:	ea5a                	fsw	fs6,20(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     690:	fa00000b          	0xfa00000b
     694:	0100000b          	0x100000b
     698:	5a00                	lw	s0,48(a2)
	...
     6a2:	0b06                	slli	s6,s6,0x1
        array_mod(product, mod, size_N);
     6a4:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6a6:	0b22                	slli	s6,s6,0x8
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	fa5a                	fsw	fs6,52(sp)
        array_mod(num_temp, mod, size_N);
     6ae:	0a00000b          	0xa00000b
     6b2:	000c                	0xc
     6b4:	0100                	addi	s0,sp,128
        array_add(q, v, size_N);
     6b6:	5a00                	lw	s0,48(a2)
	...
        array_mod(q, mod, size_N);
     6c0:	0a6e                	slli	s4,s4,0x1b
     6c2:	0000                	unimp
     6c4:	0b3a                	slli	s6,s6,0xe
        for (i = size_N-1; i >= 0; i = i-1){
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0b3a                	slli	s6,s6,0xe
     6ce:	0000                	unimp
     6d0:	0b52                	slli	s6,s6,0x14
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
            num_temp[i] = num_temp[i] - product[i];
     6d8:	0b52                	slli	s6,s6,0x14
     6da:	0000                	unimp
     6dc:	0b56                	slli	s6,s6,0x15
     6de:	0000                	unimp
     6e0:	0010                	0x10
        for (i = 0; i < size_N; ++i){
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
            num_temp[i] = num_temp[i] - product[i];
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
        for (i = 0; i < size_N; ++i){
     6ec:	1c1a                	slli	s8,s8,0x26
            if( num_temp[i] != 0 )
     6ee:	f00a                	fsw	ft2,32(sp)
        for (i = size_N-1; i >= 0; i = i-1){
     6f0:	1c01                	addi	s8,s8,-32
     6f2:	0b56                	slli	s6,s6,0x15
            v[i] = 0;
     6f4:	0000                	unimp
     6f6:	0b76                	slli	s6,s6,0x1d
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
        for (i = 0; i < size_N; ++i){
     6fe:	235a01f3          	0x235a01f3
     702:	3201                	jal	2 <__DYNAMIC+0x2>
     704:	2324                	fld	fs1,64(a4)
        result[i] = num_temp[i-size_N];
     706:	1af0090f          	0x1af0090f
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
     70e:	761c                	flw	fa5,40(a2)
     710:	1e00000b          	0x1e00000b
    for(i = size_N; i < (2*size_N); ++i){
     714:	000c                	0xc
     716:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     718:	7200                	flw	fs0,32(a2)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     722:	7200                	flw	fs0,32(a2)
     724:	000a                	c.slli	zero,0x2
     726:	7400                	flw	fs0,40(s0)
     728:	000a                	c.slli	zero,0x2
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	749f 000a 7a00      	0x7a00000a749f
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
     73a:	0a7e                	slli	s4,s4,0x1f
     73c:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     73e:	0a84                	addi	s1,sp,336
     740:	0000                	unimp
     742:	0001                	nop
    int ri_1[size]; // f-random poly, f[N] = 0, b
     744:	8c5f 000a 9a00      	0x9a00000a8c5f
    int ri[size];
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
    int ti_1[size]; // ti_1[0] = 1
     750:	0aa4                	addi	s1,sp,344
     752:	0000                	unimp
     754:	0ab9                	addi	s5,s5,14
    int ti[size];
     756:	0000                	unimp
     758:	0001                	nop
     75a:	ba5f 000a c400      	0xc400000aba5f
    int qi_1[size];
     760:	000a                	c.slli	zero,0x2
    int temp[size];
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0ac4                	addi	s1,sp,340
    int ri_2[size]; // MX-ring poly, a
     76c:	0000                	unimp
     76e:	00000ad3          	fadd.s	fs5,ft0,ft0,rne
    for (i = 0; i < size; ++i) {
     772:	0001                	nop
        ti_2[i] = 0;
     774:	d45f 000a e400      	0xe400000ad45f
     77a:	000a                	c.slli	zero,0x2
    for (i = 0; i < size; ++i) {
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
    array_equ(ri_2,polyR,size);
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
     784:	0ae4                	addi	s1,sp,348
     786:	0000                	unimp
    array_equ(ri_1,polyf,size);
     788:	0af2                	slli	s5,s5,0x1c
     78a:	0000                	unimp
     78c:	0001                	nop
     78e:	f259                	bnez	a2,714 <polydiv+0x1b6>
    ti_1[0] = 1;
     790:	000a                	c.slli	zero,0x2
     792:	fa00                	fsw	fs0,48(a2)
     794:	000a                	c.slli	zero,0x2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     796:	0200                	addi	s0,sp,256
     798:	3000                	fld	fs0,32(s0)
     79a:	fa9f 000a 0200      	0x200000afa9f
            ti[i] = ti_2[i] - temp[i];
     7a0:	0100000b          	0x100000b
     7a4:	5e00                	lw	s0,56(a2)
    array_mod(ri_2,mod,size);
     7a6:	0b06                	slli	s6,s6,0x1
     7a8:	0000                	unimp
     7aa:	0b18                	addi	a4,sp,400
     7ac:	0000                	unimp
    array_mod(ri_1,mod,size);
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	189f 000b 3200      	0x3200000b189f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7ba:	0100000b          	0x100000b
     7be:	6800                	flw	fs0,16(s0)
     7c0:	0b32                	slli	s6,s6,0xc
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7c2:	0000                	unimp
     7c4:	0bb2                	slli	s7,s7,0xc
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	b25f 000b b400      	0xb400000bb25f
        for (i = 0; i < N + 1; ++i) {
     7d0:	0300000b          	0x300000b
     7d4:	7f00                	flw	fs0,56(a4)
    array_mod(temp,mod,size);
     7d6:	9f7f                	0x9f7f
     7d8:	0bb4                	addi	a3,sp,472
     7da:	0000                	unimp
     7dc:	0bd6                	slli	s7,s7,0x15
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7de:	0000                	unimp
     7e0:	0001                	nop
     7e2:	d65f 000b e600      	0xe600000bd65f
     7e8:	0100000b          	0x100000b
    array_equ(qi_1,res1,size);
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0be6                	slli	s7,s7,0x19
     7f0:	0000                	unimp
    array_mod(qi_1,mod,size);
     7f2:	0be8                	addi	a0,sp,476
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7fa:	e89f 000b ea00      	0xea00000be89f
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
     806:	0bea                	slli	s7,s7,0x1a
     808:	0000                	unimp
    array_equ(temp,res2,size);
     80a:	0bee                	slli	s7,s7,0x1b
     80c:	0000                	unimp
     80e:	0001                	nop
    array_mod(temp,mod,size);
     810:	ee5e                	fsw	fs7,28(sp)
     812:	f800000b          	0xf800000b
     816:	0300000b          	0x300000b
        for (i = 0; i < N + 1; ++i) {
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0bf8                	addi	a4,sp,476
    array_mod(ti,mod,size);
     820:	0000                	unimp
     822:	0bfa                	slli	s7,s7,0x1e
     824:	0000                	unimp
     826:	0001                	nop
array_equ(ri_2,ri_1,size);
     828:	fa5e                	fsw	fs7,52(sp)
     82a:	0a00000b          	0xa00000b
     82e:	000c                	0xc
array_equ(ri_1,ri,size);
     830:	0100                	addi	s0,sp,128
     832:	6800                	flw	fs0,16(s0)
     834:	0c0a                	slli	s8,s8,0x2
     836:	0000                	unimp
array_equ(ti_2,ti_1,size);
     838:	0c1a                	slli	s8,s8,0x6
     83a:	0000                	unimp
     83c:	0001                	nop
     83e:	1a5f 000c 1c00      	0x1c00000c1a5f
array_equ(ti_1,ti,size);
     844:	000c                	0xc
     846:	0300                	addi	s0,sp,384
        controlR = 0;
     848:	7f00                	flw	fs0,56(a4)
        for (i = 0; i < N + 1; ++i) {
     84a:	9f7f                	0x9f7f
     84c:	0c1c                	addi	a5,sp,528
     84e:	0000                	unimp
    while (controlR != 0) {
     850:	0c1e                	slli	s8,s8,0x7
     852:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     854:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     856:	005f 0000 0000      	0x5f
        for (j = 0; j < mod; ++j) {
     85c:	0000                	unimp
     85e:	3600                	fld	fs0,40(a2)
     860:	7600000b          	0x7600000b
        for (i = 0; i < N + 1; ++i) {
     864:	0600000b          	0x600000b
    }
     868:	0300                	addi	s0,sp,384
     86a:	1ac8                	addi	a0,sp,372
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
     874:	0000                	unimp
     876:	6e00                	flw	fs0,24(a2)
     878:	000a                	c.slli	zero,0x2
     87a:	3200                	fld	fs0,32(a2)
     87c:	0100000b          	0x100000b
     880:	6200                	flw	fs0,0(a2)
     882:	0b32                	slli	s6,s6,0xc
     884:	0000                	unimp
     886:	0b56                	slli	s6,s6,0x15
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	569f 000b 7600      	0x7600000b569f
        ti_2[i] = 0;
     894:	0400000b          	0x400000b
     898:	f300                	fsw	fs0,32(a4)
        ti_1[i] = 0;
     89a:	5a01                	li	s4,-32
        ti_2[i] = 0;
     89c:	769f 000b 0a00      	0xa00000b769f
        ti_1[i] = 0;
     8a2:	000c                	0xc
    for (i = 0; i < size; ++i) {
     8a4:	0100                	addi	s0,sp,128
     8a6:	6200                	flw	fs0,0(a2)
            ri[i - (N + 1)] = res[i];
     8a8:	0c0a                	slli	s8,s8,0x2
     8aa:	0000                	unimp
     8ac:	0c1e                	slli	s8,s8,0x7
     8ae:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b0:	7f850003          	lb	zero,2040(a0)
            ri[i - (N + 1)] = res[i];
     8b4:	009f 0000 0000      	0x9f
            temp[i] = ri_2[i] - ri[i];
     8ba:	0000                	unimp
     8bc:	1800                	addi	s0,sp,48
     8be:	86000007          	0x86000007
     8c2:	01000007          	0x1000007
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	0786                	slli	a5,a5,0x1
        for (i = 0; i < N + 1; ++i) {
     8ca:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     8cc:	00000787          	0x787
        for (i = 0; i < N + 1; ++i) {
     8d0:	0001                	nop
     8d2:	0007875b          	0x7875b
            ti[i] = ti_2[i] - temp[i];
     8d6:	9200                	0x9200
     8d8:	0008                	0x8
     8da:	0400                	addi	s0,sp,512
     8dc:	f300                	fsw	fs0,32(a4)
     8de:	5a01                	li	s4,-32
     8e0:	929f 0008 a800      	0xa8000008929f
     8e6:	0008                	0x8
     8e8:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8ea:	5a00                	lw	s0,48(a2)
     8ec:	08a8                	addi	a0,sp,88
              qi_1[i] = 0;
     8ee:	0000                	unimp
     8f0:	092c                	addi	a1,sp,152
     8f2:	0000                	unimp
     8f4:	0004                	0x4
            controlR += ri[i];
     8f6:	9f5a01f3          	0x9f5a01f3
	...
        for (i = 0; i < N + 1; ++i) {
     902:	0718                	addi	a4,sp,896
            if (((ri_2[0] * j) % mod) == 1)
     904:	0000                	unimp
     906:	0782                	c.slli64	a5
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0007825b          	0x7825b
     910:	a600                	fsd	fs0,8(a2)
     912:	01000007          	0x1000007
        for (j = 0; j < mod; ++j) {
     916:	6b00                	flw	fs0,16(a4)
            ti_2[i] = (ti_2[i] * j) % mod;
     918:	07a6                	slli	a5,a5,0x9
        for (i = 0; i < N + 1; ++i) {
     91a:	0000                	unimp
     91c:	0892                	slli	a7,a7,0x4
            ti_2[i] = (ti_2[i] * j) % mod;
     91e:	0000                	unimp
     920:	0004                	0x4
     922:	9f5b01f3          	0x9f5b01f3
     926:	0892                	slli	a7,a7,0x4
     928:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     92a:	08a8                	addi	a0,sp,88
int* generate_keys(int N, int p, int q){
     92c:	0000                	unimp
     92e:	0001                	nop
     930:	0008a85b          	0x8a85b
     934:	2c00                	fld	fs0,24(s0)
     936:	0009                	c.nop	2
     938:	0400                	addi	s0,sp,512
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
     944:	0000                	unimp
     946:	1800                	addi	s0,sp,48
     948:	7c000007          	0x7c000007
     94c:	01000007          	0x1000007
     950:	5c00                	lw	s0,56(s0)
     952:	077c                	addi	a5,sp,908
     954:	0000                	unimp
     956:	0872                	slli	a6,a6,0x1c
     958:	0000                	unimp
     95a:	0001                	nop
     95c:	7259                	lui	tp,0xffff6
     95e:	0008                	0x8
     960:	7e00                	flw	fs0,56(a2)
     962:	0008                	0x8
     964:	0300                	addi	s0,sp,384
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     966:	8700                	0x8700
     968:	9f01                	0x9f01
     96a:	087e                	slli	a6,a6,0x1f
     96c:	0000                	unimp
     96e:	0892                	slli	a7,a7,0x4
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     978:	0892                	slli	a7,a7,0x4
     97a:	0000                	unimp
     97c:	092c                	addi	a1,sp,152
     97e:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     980:	0001                	nop
     982:	0059                	c.nop	22
     984:	0000                	unimp
     986:	0000                	unimp
     988:	0000                	unimp
     98a:	1800                	addi	s0,sp,48
     98c:	7c000007          	0x7c000007
     990:	01000007          	0x1000007
     994:	5d00                	lw	s0,56(a0)
     996:	077c                	addi	a5,sp,908
     998:	0000                	unimp
     99a:	0874                	addi	a3,sp,28
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	7462                	flw	fs0,56(sp)
     9a2:	0008                	0x8
     9a4:	9200                	0x9200
     9a6:	0008                	0x8
     9a8:	0400                	addi	s0,sp,512
     9aa:	f300                	fsw	fs0,32(a4)
     9ac:	5d01                	li	s10,-32
     9ae:	929f 0008 2c00      	0x2c000008929f
     9b4:	0009                	c.nop	2
     9b6:	0100                	addi	s0,sp,128
     9b8:	6200                	flw	fs0,0(a2)
	...
     9c2:	0868                	addi	a0,sp,28
     9c4:	0000                	unimp
     9c6:	0892                	slli	a7,a7,0x4
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
     9cc:	00193803          	0x193803
     9d0:	9f00                	0x9f00
	...
     9da:	0772                	slli	a4,a4,0x1c
     9dc:	0000                	unimp
     9de:	087e                	slli	a6,a6,0x1f
     9e0:	0000                	unimp
     9e2:	0001                	nop
     9e4:	00087e67          	0x87e67
     9e8:	9200                	0x9200
     9ea:	0008                	0x8
    int polyR[N+1];
     9ec:	0600                	addi	s0,sp,768
     9ee:	f300                	fsw	fs0,32(a4)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f0:	5c01                	li	s8,-32
    int polyR[N+1];
     9f2:	1c31                	addi	s8,s8,-20
     9f4:	929f 0008 2c00      	0x2c000008929f
     9fa:	0009                	c.nop	2
     9fc:	0100                	addi	s0,sp,128
     9fe:	6700                	flw	fs0,8(a4)
	...
    polyR[N] = 1;
     a08:	0772                	slli	a4,a4,0x1c
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0a:	0000                	unimp
     a0c:	077c                	addi	a5,sp,908
     a0e:	0000                	unimp
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
     a14:	077c                	addi	a5,sp,908
     a16:	0000                	unimp
     a18:	00000787          	0x787
     a1c:	0001                	nop
     a1e:	c25f 0007 c600      	0xc6000007c25f
     a24:	01000007          	0x1000007
     a28:	5900                	lw	s0,48(a0)
     a2a:	07c6                	slli	a5,a5,0x11
     a2c:	0000                	unimp
     a2e:	07d0                	addi	a2,sp,964
     a30:	0000                	unimp
     a32:	0001                	nop
     a34:	d25f 0007 dd00      	0xdd000007d25f
     a3a:	01000007          	0x1000007
     a3e:	5e00                	lw	s0,56(a2)
     a40:	0818                	addi	a4,sp,16
     a42:	0000                	unimp
     a44:	081c                	addi	a5,sp,16
     a46:	0000                	unimp
     a48:	0002                	c.slli64	zero
     a4a:	9f30                	0x9f30
     a4c:	081c                	addi	a5,sp,16
     a4e:	0000                	unimp
     a50:	00000827          	0x827
     a54:	0001                	nop
     a56:	485e                	lw	a6,212(sp)
     a58:	0008                	0x8
     a5a:	4c00                	lw	s0,24(s0)
     a5c:	0008                	0x8
     a5e:	0200                	addi	s0,sp,256
     a60:	3000                	fld	fs0,32(s0)
     a62:	4c9f 0008 5600      	0x560000084c9f
     a68:	0008                	0x8
     a6a:	0100                	addi	s0,sp,128
     a6c:	5e00                	lw	s0,56(a2)
    polyR[0] = -1;
     a6e:	0864                	addi	s1,sp,28
     a70:	0000                	unimp
    for(i = 1; i < N; ++i){
     a72:	08b2                	slli	a7,a7,0xc
     a74:	0000                	unimp
     a76:	0001                	nop
     a78:	b25f 0008 b800      	0xb8000008b25f
    for (i = N; i < 55; ++i ){
     a7e:	0008                	0x8
     a80:	0300                	addi	s0,sp,384
    for(i = 0; i < N; ++i){
     a82:	7f00                	flw	fs0,56(a4)
        random_keys[i] = f[i];
     a84:	9f7f                	0x9f7f
     a86:	08b8                	addi	a4,sp,88
     a88:	0000                	unimp
     a8a:	08ba                	slli	a7,a7,0xe
    for(i = 0; i < N; ++i){
     a8c:	0000                	unimp
     a8e:	0001                	nop
     a90:	ba5f 0008 cc00      	0xcc000008ba5f
    for(i = N; i < (2*N); ++i){
     a96:	0008                	0x8
     a98:	0100                	addi	s0,sp,128
     a9a:	5e00                	lw	s0,56(a2)
        random_keys[i] = g[i-N];
     a9c:	08cc                	addi	a1,sp,84
     a9e:	0000                	unimp
     aa0:	08d0                	addi	a2,sp,84
     aa2:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     aa4:	7f7e0003          	lb	zero,2039(t3) # 67f7 <_stack_len+0x27f7>
    for(i = (2*N); i < (3*N); ++i){
     aa8:	d09f 0008 e600      	0xe6000008d09f
    fp = ext_euclid(polyR, f, (N+1), p);
     aae:	0008                	0x8
     ab0:	0100                	addi	s0,sp,128
     ab2:	5e00                	lw	s0,56(a2)
     ab4:	08e6                	slli	a7,a7,0x19
     ab6:	0000                	unimp
     ab8:	08ea                	slli	a7,a7,0x1a
    for(i = (2*N); i < (3*N); ++i){
     aba:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     abc:	7f7e0003          	lb	zero,2039(t3)
     ac0:	ea9f 0008 0000      	0x8ea9f
    for(i = (2*N); i < (3*N); ++i){
     ac6:	0009                	c.nop	2
    fq = ext_euclid(polyR, f, (N+1), q);
     ac8:	0100                	addi	s0,sp,128
     aca:	5e00                	lw	s0,56(a2)
     acc:	0900                	addi	s0,sp,144
     ace:	0000                	unimp
     ad0:	0902                	c.slli64	s2
     ad2:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ad4:	7f7e0003          	lb	zero,2039(t3)
     ad8:	029f 0009 0400      	0x4000009029f
        random_keys[i] = fq[i-(3*N)];
     ade:	0009                	c.nop	2
     ae0:	0100                	addi	s0,sp,128
     ae2:	5e00                	lw	s0,56(a2)
    for(i = (3*N); i < (4*N); ++i){
     ae4:	0918                	addi	a4,sp,144
     ae6:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     ae8:	091c                	addi	a5,sp,144
     aea:	0000                	unimp
     aec:	0001                	nop
     aee:	1c5f 0009 2a00      	0x2a0000091c5f
    for(i = 0; i < (2*N-1); ++i){
     af4:	0009                	c.nop	2
     af6:	0300                	addi	s0,sp,384
     af8:	7f00                	flw	fs0,56(a4)
     afa:	9f7f                	0x9f7f
     afc:	092a                	slli	s2,s2,0xa
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     afe:	0000                	unimp
     b00:	092c                	addi	a1,sp,152
     b02:	0000                	unimp
     b04:	0001                	nop
    for(i = (4*N); i < (5*N); ++i){
     b06:	005f 0000 0000      	0x5f
     b0c:	0000                	unimp
     b0e:	5800                	lw	s0,48(s0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b10:	0008                	0x8
     b12:	9200                	0x9200
     b14:	0008                	0x8
     b16:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     b18:	5e00                	lw	s0,56(a2)
     b1a:	0904                	addi	s1,sp,144
     b1c:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b1e:	092c                	addi	a1,sp,152
     b20:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     b22:	0001                	nop
     b24:	005e                	c.slli	zero,0x17
     b26:	0000                	unimp
     b28:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b2a:	0000                	unimp
     b2c:	7000                	flw	fs0,32(s0)
     b2e:	76000007          	0x76000007
     b32:	0008                	0x8
     b34:	0200                	addi	s0,sp,256
}
     b36:	8300                	0x8300
     b38:	9200                	0x9200
     b3a:	0008                	0x8
     b3c:	2c00                	fld	fs0,24(s0)
     b3e:	0009                	c.nop	2
     b40:	0200                	addi	s0,sp,256
     b42:	8300                	0x8300
	...
     b4c:	7000                	flw	fs0,32(s0)
     b4e:	78000007          	0x78000007
     b52:	0008                	0x8
     b54:	0200                	addi	s0,sp,256
     b56:	8400                	0x8400
     b58:	9200                	0x9200
     b5a:	0008                	0x8
     b5c:	2c00                	fld	fs0,24(s0)
     b5e:	0009                	c.nop	2
     b60:	0200                	addi	s0,sp,256
     b62:	8400                	0x8400
	...
     b6c:	7000                	flw	fs0,32(s0)
     b6e:	80000007          	0x80000007
     b72:	0008                	0x8
     b74:	0200                	addi	s0,sp,256
        polyR[i] = 0;
     b76:	8800                	0x8800
     b78:	9200                	0x9200
     b7a:	0008                	0x8
     b7c:	2c00                	fld	fs0,24(s0)
     b7e:	0009                	c.nop	2
    for(i = 1; i < N; ++i){
     b80:	0200                	addi	s0,sp,256
     b82:	8800                	0x8800
	...
        f[i] = 0;
     b8c:	7000                	flw	fs0,32(s0)
     b8e:	7c000007          	0x7c000007
        g[i] = 0;
     b92:	0008                	0x8
     b94:	0200                	addi	s0,sp,256
     b96:	8600                	0x8600
     b98:	7c00                	flw	fs0,56(s0)
     b9a:	0008                	0x8
    for (i = N; i < 55; ++i ){
     b9c:	7e00                	flw	fs0,56(a2)
     b9e:	0008                	0x8
        random_keys[i] = f[i];
     ba0:	0c00                	addi	s0,sp,528
     ba2:	8800                	0x8800
     ba4:	8700                	0x8700
     ba6:	3201                	jal	4a6 <polymult2+0xa6>
     ba8:	2324                	fld	fs1,64(a4)
     baa:	1af0090f          	0x1af0090f
     bae:	7e1c                	flw	fa5,56(a2)
    for(i = 0; i < N; ++i){
     bb0:	0008                	0x8
        random_keys[i] = f[i];
     bb2:	8000                	0x8000
    for(i = 0; i < N; ++i){
     bb4:	0008                	0x8
        random_keys[i] = g[i-N];
     bb6:	0d00                	addi	s0,sp,656
     bb8:	8800                	0x8800
     bba:	f300                	fsw	fs0,32(a4)
     bbc:	5c01                	li	s8,-32
     bbe:	2432                	fld	fs0,264(sp)
    for(i = N; i < (2*N); ++i){
     bc0:	f0090f23          	sb	zero,-226(s2)
     bc4:	1c1a                	slli	s8,s8,0x26
        random_keys[i] = fp[i-(2*N)];
     bc6:	0892                	slli	a7,a7,0x4
     bc8:	0000                	unimp
     bca:	092c                	addi	a1,sp,152
     bcc:	0000                	unimp
     bce:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     bd0:	0086                	slli	ra,ra,0x1
	...
        random_keys[i] = fq[i-(3*N)];
     bda:	0770                	addi	a2,sp,908
     bdc:	0000                	unimp
     bde:	0884                	addi	s1,sp,80
     be0:	0000                	unimp
     be2:	0002                	c.slli64	zero
    for(i = (3*N); i < (4*N); ++i){
     be4:	008a                	slli	ra,ra,0x2
        random_keys[i] = fq[i-(3*N)];
     be6:	0892                	slli	a7,a7,0x4
    for(i = (3*N); i < (4*N); ++i){
     be8:	0000                	unimp
        fg[i] = fg[i]*p;
     bea:	092c                	addi	a1,sp,152
    for(i = 0; i < (2*N-1); ++i){
     bec:	0000                	unimp
     bee:	0002                	c.slli64	zero
        fg[i] = fg[i]*p;
     bf0:	008a                	slli	ra,ra,0x2
	...
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bfa:	0770                	addi	a2,sp,908
     bfc:	0000                	unimp
     bfe:	0882                	c.slli64	a7
     c00:	0000                	unimp
     c02:	0002                	c.slli64	zero
     c04:	0089                	addi	ra,ra,2
    for(i = (4*N); i < (5*N); ++i){
     c06:	0882                	c.slli64	a7
     c08:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c0a:	0884                	addi	s1,sp,80
     c0c:	0000                	unimp
     c0e:	000d                	c.nop	3
     c10:	008a                	slli	ra,ra,0x2
     c12:	325c01f3          	0x325c01f3
     c16:	2324                	fld	fs1,64(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c18:	1af0090f          	0x1af0090f
     c1c:	921c                	0x921c
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c1e:	0008                	0x8
     c20:	2c00                	fld	fs0,24(s0)
     c22:	0009                	c.nop	2
     c24:	0200                	addi	s0,sp,256
     c26:	8900                	0x8900
	...
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	7200                	flw	fs0,32(a2)
     c32:	6c000007          	0x6c000007
     c36:	0008                	0x8
     c38:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c3a:	7200                	flw	fs0,32(a2)
     c3c:	6c00                	flw	fs0,24(s0)
     c3e:	0008                	0x8
     c40:	7a00                	flw	fs0,48(a2)
     c42:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c44:	0200                	addi	s0,sp,256
    temp = polymult(public_key,N,random_val,48,q,0);
     c46:	8500                	0x8500
     c48:	7a00                	flw	fs0,48(a2)
     c4a:	0008                	0x8
     c4c:	7e00                	flw	fs0,56(a2)
     c4e:	0008                	0x8
     c50:	0c00                	addi	s0,sp,528
     c52:	8900                	0x8900
     c54:	8700                	0x8700
     c56:	3201                	jal	556 <polymult2+0x156>
array_add(temp,message,48);
     c58:	2324                	fld	fs1,64(a4)
     c5a:	1af0090f          	0x1af0090f
    temp = polymult(public_key,N,random_val,48,q,0);
     c5e:	7e1c                	flw	fa5,56(a2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c60:	0008                	0x8
     c62:	8200                	0x8200
array_add(temp,message,48);
     c64:	0008                	0x8
     c66:	0d00                	addi	s0,sp,656
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	8900                	0x8900
     c6a:	f300                	fsw	fs0,32(a4)
     c6c:	5c01                	li	s8,-32
     c6e:	2432                	fld	fs0,264(sp)
     c70:	f0090f23          	sb	zero,-226(s2)
     c74:	1c1a                	slli	s8,s8,0x26
    for(i = (2*N); i < (3*N); ++i){
     c76:	0882                	c.slli64	a7
     c78:	0000                	unimp
     c7a:	0884                	addi	s1,sp,80
     c7c:	0000                	unimp
     c7e:	008a000f          	0x8a000f
}
     c82:	325c01f3          	0x325c01f3
     c86:	2324                	fld	fs1,64(a4)
     c88:	1af0090f          	0x1af0090f
     c8c:	2431                	jal	e98 <memcpy+0xba>
     c8e:	921c                	0x921c
     c90:	0008                	0x8
        CT[i-(2*N)] = CT[i];
     c92:	2c00                	fld	fs0,24(s0)
     c94:	0009                	c.nop	2
     c96:	0200                	addi	s0,sp,256
     c98:	7200                	flw	fs0,32(a2)
	...
    for(i = (2*N); i < (3*N); ++i){
     ca2:	c200                	sw	s0,0(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	dc000007          	0xdc000007
     ca8:	01000007          	0x1000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	5a00                	lw	s0,48(a2)
     cae:	08a8                	addi	a0,sp,88
     cb0:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	08d4                	addi	a3,sp,84
     cb4:	0000                	unimp
     cb6:	0001                	nop
     cb8:	005a                	c.slli	zero,0x16
     cba:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbc:	0000                	unimp
     cbe:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc0:	ec00                	fsw	fs0,24(s0)
     cc2:	f0000007          	0xf0000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc6:	01000007          	0x1000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	5a00                	lw	s0,48(a2)
     ccc:	07f0                	addi	a2,sp,972
     cce:	0000                	unimp
     cd0:	07f1                	addi	a5,a5,28
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd2:	0000                	unimp
     cd4:	0001                	nop
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd6:	0000005b          	0x5b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	0000                	unimp
     cdc:	0000                	unimp
     cde:	0a00                	addi	s0,sp,272
     ce0:	0008                	0x8
     ce2:	0e00                	addi	s0,sp,784
     ce4:	0008                	0x8
     ce6:	0100                	addi	s0,sp,128
     ce8:	5a00                	lw	s0,48(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cea:	080e                	slli	a6,a6,0x3
     cec:	0000                	unimp
     cee:	0000080f          	0x80f
     cf2:	0001                	nop
        if(a2[i] <= q/2)
     cf4:	0000005b          	0x5b
     cf8:	0000                	unimp
    for (i = 0; i < N; ++i){
     cfa:	0000                	unimp
     cfc:	7200                	flw	fs0,32(a2)
     cfe:	a6000007          	0xa6000007
    c = polymult2(secret_key_fp,N,a2,N,0);
     d02:	02000007          	0x2000007
     d06:	3100                	fld	fs0,32(a0)
     d08:	a69f 0007 4c00      	0x4c000007a69f
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0e:	0008                	0x8
     d10:	0200                	addi	s0,sp,256
     d12:	3000                	fld	fs0,32(s0)
     d14:	4c9f 0008 6400      	0x640000084c9f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1a:	0008                	0x8
}
     d1c:	0100                	addi	s0,sp,128
     d1e:	5f00                	lw	s0,56(a4)
     d20:	0892                	slli	a7,a7,0x4
     d22:	0000                	unimp
     d24:	08a8                	addi	a0,sp,88
     d26:	0000                	unimp
     d28:	0002                	c.slli64	zero
     d2a:	9f31                	0x9f31
     d2c:	08a8                	addi	a0,sp,88
     d2e:	0000                	unimp
     d30:	08ee                	slli	a7,a7,0x1b
        a2[i-(2*N)] = a2[i];
     d32:	0000                	unimp
     d34:	0002                	c.slli64	zero
     d36:	9f30                	0x9f30
     d38:	08ee                	slli	a7,a7,0x1b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3a:	0000                	unimp
     d3c:	0918                	addi	a4,sp,144
        a2[i-(2*N)] = a2[i];
     d3e:	0000                	unimp
     d40:	0001                	nop
    for(i = (2*N); i < ((2*N)+N); ++i){
     d42:	005f 0000 0000      	0x5f
        if(a2[i] <= q/2)
     d48:	0000                	unimp
            a2[i] = (-1)*(q-a2[i]);
     d4a:	7000                	flw	fs0,32(s0)
     d4c:	7e000007          	0x7e000007
    for (i = 0; i < N; ++i){
     d50:	0008                	0x8
     d52:	0100                	addi	s0,sp,128
     d54:	6700                	flw	fs0,8(a4)
        c2[i-(2*N)] = c2[i];
     d56:	087e                	slli	a6,a6,0x1f
     d58:	0000                	unimp
     d5a:	0892                	slli	a7,a7,0x4
     d5c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d5e:	0006                	c.slli	zero,0x1
     d60:	315c01f3          	0x315c01f3
        c2[i-(2*N)] = c2[i];
     d64:	9f1c                	0x9f1c
    for(i = (2*N); i < ((2*N)+N); ++i){
     d66:	0892                	slli	a7,a7,0x4
     d68:	0000                	unimp
     d6a:	092c                	addi	a1,sp,152
     d6c:	0000                	unimp
     d6e:	0001                	nop
     d70:	00000067          	jr	zero # 0 <__DYNAMIC>
     d74:	0000                	unimp
     d76:	0000                	unimp
     d78:	7000                	flw	fs0,32(s0)
     d7a:	7e000007          	0x7e000007
     d7e:	0008                	0x8
     d80:	0100                	addi	s0,sp,128
     d82:	6700                	flw	fs0,8(a4)
     d84:	087e                	slli	a6,a6,0x1f
     d86:	0000                	unimp
     d88:	0892                	slli	a7,a7,0x4
     d8a:	0000                	unimp
     d8c:	0006                	c.slli	zero,0x1
     d8e:	315c01f3          	0x315c01f3
     d92:	9f1c                	0x9f1c
     d94:	0892                	slli	a7,a7,0x4
     d96:	0000                	unimp
     d98:	092c                	addi	a1,sp,152
     d9a:	0000                	unimp
     d9c:	0001                	nop
     d9e:	00000067          	jr	zero # 0 <__DYNAMIC>
     da2:	0000                	unimp
     da4:	0000                	unimp
     da6:	7000                	flw	fs0,32(s0)
     da8:	7e000007          	0x7e000007
     dac:	0008                	0x8
     dae:	0100                	addi	s0,sp,128
     db0:	6700                	flw	fs0,8(a4)
     db2:	087e                	slli	a6,a6,0x1f
     db4:	0000                	unimp
     db6:	0892                	slli	a7,a7,0x4
     db8:	0000                	unimp
     dba:	0006                	c.slli	zero,0x1
     dbc:	315c01f3          	0x315c01f3
     dc0:	9f1c                	0x9f1c
     dc2:	0892                	slli	a7,a7,0x4
     dc4:	0000                	unimp
     dc6:	092c                	addi	a1,sp,152
     dc8:	0000                	unimp
     dca:	0001                	nop
     dcc:	00000067          	jr	zero # 0 <__DYNAMIC>
     dd0:	0000                	unimp
     dd2:	0000                	unimp
     dd4:	7000                	flw	fs0,32(s0)
     dd6:	7e000007          	0x7e000007
     dda:	0008                	0x8
     ddc:	0100                	addi	s0,sp,128
     dde:	6700                	flw	fs0,8(a4)
     de0:	087e                	slli	a6,a6,0x1f
     de2:	0000                	unimp
     de4:	0892                	slli	a7,a7,0x4
     de6:	0000                	unimp
     de8:	0006                	c.slli	zero,0x1
     dea:	315c01f3          	0x315c01f3
     dee:	9f1c                	0x9f1c
     df0:	0892                	slli	a7,a7,0x4
     df2:	0000                	unimp
     df4:	092c                	addi	a1,sp,152
     df6:	0000                	unimp
     df8:	0001                	nop
     dfa:	00000067          	jr	zero # 0 <__DYNAMIC>
     dfe:	0000                	unimp
     e00:	0000                	unimp
     e02:	7000                	flw	fs0,32(s0)
     e04:	7e000007          	0x7e000007
     e08:	0008                	0x8
     e0a:	0100                	addi	s0,sp,128
     e0c:	6700                	flw	fs0,8(a4)
     e0e:	087e                	slli	a6,a6,0x1f
     e10:	0000                	unimp
     e12:	0892                	slli	a7,a7,0x4
     e14:	0000                	unimp
     e16:	0006                	c.slli	zero,0x1
     e18:	315c01f3          	0x315c01f3
     e1c:	9f1c                	0x9f1c
     e1e:	0892                	slli	a7,a7,0x4
     e20:	0000                	unimp
     e22:	092c                	addi	a1,sp,152
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	00000067          	jr	zero # 0 <__DYNAMIC>
     e2c:	0000                	unimp
     e2e:	0000                	unimp
     e30:	7000                	flw	fs0,32(s0)
     e32:	7e000007          	0x7e000007
     e36:	0008                	0x8
     e38:	0100                	addi	s0,sp,128
     e3a:	6700                	flw	fs0,8(a4)
     e3c:	087e                	slli	a6,a6,0x1f
     e3e:	0000                	unimp
     e40:	0892                	slli	a7,a7,0x4
     e42:	0000                	unimp
     e44:	0006                	c.slli	zero,0x1
     e46:	315c01f3          	0x315c01f3
     e4a:	9f1c                	0x9f1c
     e4c:	0892                	slli	a7,a7,0x4
     e4e:	0000                	unimp
     e50:	092c                	addi	a1,sp,152
     e52:	0000                	unimp
     e54:	0001                	nop
     e56:	00000067          	jr	zero # 0 <__DYNAMIC>
     e5a:	0000                	unimp
     e5c:	0000                	unimp
     e5e:	7000                	flw	fs0,32(s0)
     e60:	7e000007          	0x7e000007
     e64:	0008                	0x8
     e66:	0100                	addi	s0,sp,128
     e68:	6700                	flw	fs0,8(a4)
     e6a:	087e                	slli	a6,a6,0x1f
     e6c:	0000                	unimp
     e6e:	0892                	slli	a7,a7,0x4
     e70:	0000                	unimp
     e72:	0006                	c.slli	zero,0x1
     e74:	315c01f3          	0x315c01f3
     e78:	9f1c                	0x9f1c
     e7a:	0892                	slli	a7,a7,0x4
     e7c:	0000                	unimp
     e7e:	092c                	addi	a1,sp,152
     e80:	0000                	unimp
     e82:	0001                	nop
     e84:	00000067          	jr	zero # 0 <__DYNAMIC>
     e88:	0000                	unimp
     e8a:	0000                	unimp
     e8c:	5e00                	lw	s0,56(a2)
     e8e:	0005                	c.nop	1
     e90:	b000                	fsd	fs0,32(s0)
     e92:	0005                	c.nop	1
     e94:	0100                	addi	s0,sp,128
     e96:	5a00                	lw	s0,48(a2)
     e98:	05b0                	addi	a2,sp,712
     e9a:	0000                	unimp
     e9c:	05b9                	addi	a1,a1,14
     e9e:	0000                	unimp
     ea0:	0001                	nop
     ea2:	0005b95b          	0x5b95b
     ea6:	1800                	addi	s0,sp,48
     ea8:	04000007          	0x4000007
     eac:	f300                	fsw	fs0,32(a4)
     eae:	5a01                	li	s4,-32
     eb0:	009f 0000 0000      	0x9f
     eb6:	0000                	unimp
     eb8:	5e00                	lw	s0,56(a2)
     eba:	0005                	c.nop	1
     ebc:	ae00                	fsd	fs0,24(a2)
     ebe:	0005                	c.nop	1
     ec0:	0100                	addi	s0,sp,128
     ec2:	5b00                	lw	s0,48(a4)
     ec4:	05ae                	slli	a1,a1,0xb
     ec6:	0000                	unimp
     ec8:	064c                	addi	a1,sp,772
     eca:	0000                	unimp
     ecc:	0001                	nop
     ece:	4c59                	li	s8,22
     ed0:	0006                	c.slli	zero,0x1
     ed2:	6800                	flw	fs0,16(s0)
     ed4:	0006                	c.slli	zero,0x1
     ed6:	0300                	addi	s0,sp,384
     ed8:	8800                	0x8800
     eda:	9f01                	0x9f01
     edc:	0668                	addi	a0,sp,780
     ede:	0000                	unimp
     ee0:	067a                	slli	a2,a2,0x1e
     ee2:	0000                	unimp
     ee4:	0004                	0x4
     ee6:	9f5b01f3          	0x9f5b01f3
     eea:	067a                	slli	a2,a2,0x1e
     eec:	0000                	unimp
     eee:	0706                	slli	a4,a4,0x1
     ef0:	0000                	unimp
     ef2:	0001                	nop
     ef4:	0659                	addi	a2,a2,22
     ef6:	18000007          	0x18000007
     efa:	03000007          	0x3000007
     efe:	8800                	0x8800
     f00:	9f01                	0x9f01
	...
     f0a:	055e                	slli	a0,a0,0x17
     f0c:	0000                	unimp
     f0e:	05ac                	addi	a1,sp,712
     f10:	0000                	unimp
     f12:	0001                	nop
     f14:	ac5c                	fsd	fa5,152(s0)
     f16:	0005                	c.nop	1
     f18:	ea00                	fsw	fs0,16(a2)
     f1a:	0005                	c.nop	1
     f1c:	0100                	addi	s0,sp,128
     f1e:	6a00                	flw	fs0,16(a2)
     f20:	05ea                	slli	a1,a1,0x1a
     f22:	0000                	unimp
     f24:	05f4                	addi	a3,sp,716
     f26:	0000                	unimp
     f28:	0004                	0x4
     f2a:	9f5c01f3          	0x9f5c01f3
     f2e:	05f4                	addi	a3,sp,716
     f30:	0000                	unimp
     f32:	0610                	addi	a2,sp,768
     f34:	0000                	unimp
     f36:	0001                	nop
     f38:	106a                	c.slli	zero,0x3a
     f3a:	0006                	c.slli	zero,0x1
     f3c:	1800                	addi	s0,sp,48
     f3e:	04000007          	0x4000007
     f42:	f300                	fsw	fs0,32(a4)
     f44:	5c01                	li	s8,-32
     f46:	009f 0000 0000      	0x9f
     f4c:	0000                	unimp
     f4e:	5e00                	lw	s0,56(a2)
     f50:	0005                	c.nop	1
     f52:	b900                	fsd	fs0,48(a0)
     f54:	0005                	c.nop	1
     f56:	0100                	addi	s0,sp,128
     f58:	5d00                	lw	s0,56(a0)
     f5a:	05b9                	addi	a1,a1,14
     f5c:	0000                	unimp
     f5e:	0660                	addi	s0,sp,780
     f60:	0000                	unimp
     f62:	0001                	nop
int main(){
     f64:	6064                	flw	fs1,68(s0)
     f66:	0006                	c.slli	zero,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f68:	7a00                	flw	fs0,48(a2)
     f6a:	0006                	c.slli	zero,0x1
     f6c:	0400                	addi	s0,sp,512
     f6e:	f300                	fsw	fs0,32(a4)
     f70:	5d01                	li	s10,-32
     f72:	7a9f 0006 1800      	0x180000067a9f
int main(){
     f78:	01000007          	0x1000007
     f7c:	6400                	flw	fs0,8(s0)
	...
    resultkon[0] = 0xaaaaaaa0;
     f86:	055e                	slli	a0,a0,0x17
     f88:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f8a:	05b9                	addi	a1,a1,14
    resultkon[0] = 0xaaaaaaa0;
     f8c:	0000                	unimp
     f8e:	0001                	nop
     f90:	b95e                	fsd	fs7,176(sp)
     f92:	0005                	c.nop	1
     f94:	5e00                	lw	s0,56(a2)
     f96:	0006                	c.slli	zero,0x1
    keys = generate_keys(N, p, q);
     f98:	0100                	addi	s0,sp,128
     f9a:	6300                	flw	fs0,0(a4)
     f9c:	065e                	slli	a2,a2,0x17
     f9e:	0000                	unimp
     fa0:	067a                	slli	a2,a2,0x1e
    resultkon[0] = 0xaaaaaaa0;
     fa2:	0000                	unimp
    resultkon[0] = 0xaaaaaaa1;
     fa4:	0004                	0x4
     fa6:	9f5e01f3          	0x9f5e01f3
     faa:	067a                	slli	a2,a2,0x1e
     fac:	0000                	unimp
    for(i = 0; i < N; ++i){
     fae:	0718                	addi	a4,sp,896
     fb0:	0000                	unimp
        secret_key_f[i] = keys[i];
     fb2:	0001                	nop
     fb4:	00000063          	beqz	zero,fb4 <main+0x50>
     fb8:	0000                	unimp
     fba:	0000                	unimp
     fbc:	ec00                	fsw	fs0,24(s0)
    for(i = 0; i < N; ++i){
     fbe:	0005                	c.nop	1
     fc0:	f400                	fsw	fs0,40(s0)
     fc2:	0005                	c.nop	1
    for(i = N; i < (2*N); ++i){
     fc4:	0100                	addi	s0,sp,128
     fc6:	6a00                	flw	fs0,16(a2)
     fc8:	0610                	addi	a2,sp,768
     fca:	0000                	unimp
     fcc:	066c                	addi	a1,sp,780
     fce:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     fd0:	0001                	nop
     fd2:	7a6a                	flw	fs4,184(sp)
     fd4:	0006                	c.slli	zero,0x1
     fd6:	1800                	addi	s0,sp,48
     fd8:	01000007          	0x1000007
    for(i = (2*N); i < (3*N); ++i){
     fdc:	6a00                	flw	fs0,16(a2)
	...
    for(i = (3*N); i < (4*N); ++i){
     fe6:	062e                	slli	a2,a2,0xb
     fe8:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
     fea:	0000063f 7a5f0001 	0x7a5f00010000063f
     ff2:	0006                	c.slli	zero,0x1
    for(i = (4*N); i < (5*N); ++i){
     ff4:	8200                	0x8200
     ff6:	0006                	c.slli	zero,0x1
     ff8:	0100                	addi	s0,sp,128
     ffa:	5f00                	lw	s0,56(a4)
	...
        ring_poly[i-(5*N)] = keys[i];
    1004:	05d4                	addi	a3,sp,708
    1006:	0000                	unimp
    1008:	05d6                	slli	a1,a1,0x15
    for(i = (5*N); i < (6*N+1); ++i){
    100a:	0000                	unimp
    100c:	0002                	c.slli64	zero
    resultkon[0] = 0xbbbbbbb0;
    100e:	9f30                	0x9f30
    1010:	05d6                	slli	a1,a1,0x15
    1012:	0000                	unimp
    1014:	05da                	slli	a1,a1,0x16
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	0000                	unimp
    1018:	0001                	nop
    101a:	da5f 0005 f400      	0xf4000005da5f
    resultkon[0] = 0xbbbbbbb1;
    1020:	0005                	c.nop	1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	0100                	addi	s0,sp,128
    1024:	6900                	flw	fs0,16(a0)
    resultkon[0] = 0xbbbbbbb0;
    1026:	05f4                	addi	a3,sp,716
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    102a:	060a                	slli	a2,a2,0x2
    resultkon[0] = 0xccccccc0;
    102c:	0000                	unimp
    102e:	0001                	nop
    1030:	0a5f 0006 1e00      	0x1e0000060a5f
    1036:	0006                	c.slli	zero,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1038:	0100                	addi	s0,sp,128
    103a:	6900                	flw	fs0,16(a0)
    103c:	061e                	slli	a2,a2,0x7
    103e:	0000                	unimp
    1040:	062e                	slli	a2,a2,0xb
    1042:	0000                	unimp
    1044:	0001                	nop
    1046:	405f 0006 5a00      	0x5a000006405f
    resultkon[0] = 0xccccccc1;	
    104c:	0006                	c.slli	zero,0x1
    104e:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    1050:	5900                	lw	s0,48(a0)
    1052:	06a6                	slli	a3,a3,0x9
    resultkon[0] = 0xccccccc1;	
    1054:	0000                	unimp
    1056:	06aa                	slli	a3,a3,0xa
            resultkon[0] = 0xDEDEDEDE;
    1058:	0000                	unimp
    105a:	0002                	c.slli64	zero
    for(i = 0; i < 32; ++i){
    105c:	9f30                	0x9f30
    105e:	06aa                	slli	a3,a3,0xa
        if(!(message[i] == Dec_Message[i])){
    1060:	0000                	unimp
    1062:	06b5                	addi	a3,a3,13
    1064:	0000                	unimp
    1066:	0001                	nop
    1068:	c65f 0006 c800      	0xc8000006c65f
    106e:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xBABABABA;
    1070:	0100                	addi	s0,sp,128
    1072:	6800                	flw	fs0,16(s0)
    1074:	06c8                	addi	a0,sp,836
    1076:	0000                	unimp
    1078:	06e4                	addi	s1,sp,844
}
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	e45f 0006 ec00      	0xec000006e45f
    1084:	0006                	c.slli	zero,0x1
    1086:	0300                	addi	s0,sp,384
    1088:	7f00                	flw	fs0,56(a4)
    108a:	9f7f                	0x9f7f
    108c:	06ec                	addi	a1,sp,844
    108e:	0000                	unimp
    1090:	06f4                	addi	a3,sp,844
            resultkon[0] = 0xDEDEDEDE;
    1092:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1094:	0001                	nop
    1096:	f45f 0006 0600      	0x6000006f45f
    109c:	01000007          	0x1000007
    10a0:	5d00                	lw	s0,56(a0)
    10a2:	0706                	slli	a4,a4,0x1
    10a4:	0000                	unimp
    10a6:	0718                	addi	a4,sp,896
    10a8:	0000                	unimp
    10aa:	0001                	nop
    10ac:	0059                	c.nop	22
    10ae:	0000                	unimp
    10b0:	0000                	unimp
    10b2:	0000                	unimp
    10b4:	2e00                	fld	fs0,24(a2)
    10b6:	0006                	c.slli	zero,0x1
    10b8:	3f00                	fld	fs0,56(a4)
    10ba:	0006                	c.slli	zero,0x1
    10bc:	0100                	addi	s0,sp,128
    10be:	5e00                	lw	s0,56(a2)
    10c0:	067a                	slli	a2,a2,0x1e
    10c2:	0000                	unimp
    10c4:	067e                	slli	a2,a2,0x1f
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	005e                	c.slli	zero,0x17
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	0000                	unimp
    10d2:	5000                	lw	s0,32(s0)
    10d4:	0006                	c.slli	zero,0x1
    10d6:	7a00                	flw	fs0,48(a2)
    10d8:	0006                	c.slli	zero,0x1
    10da:	0600                	addi	s0,sp,768
    10dc:	0300                	addi	s0,sp,384
    10de:	16e0                	addi	s0,sp,876
    10e0:	0000                	unimp
    10e2:	009f 0000 0000      	0x9f
    10e8:	0000                	unimp
    10ea:	aa00                	fsd	fs0,16(a2)
    10ec:	0005                	c.nop	1
    10ee:	6200                	flw	fs0,0(a2)
    10f0:	0006                	c.slli	zero,0x1
    10f2:	0200                	addi	s0,sp,256
    10f4:	8500                	0x8500
    10f6:	7a00                	flw	fs0,48(a2)
    10f8:	0006                	c.slli	zero,0x1
    10fa:	1800                	addi	s0,sp,48
    10fc:	02000007          	0x2000007
    1100:	8500                	0x8500
	...
    110a:	aa00                	fsd	fs0,16(a2)
    110c:	0005                	c.nop	1
    110e:	6400                	flw	fs0,8(s0)
    1110:	0006                	c.slli	zero,0x1
    1112:	0200                	addi	s0,sp,256
    1114:	8600                	0x8600
    1116:	7a00                	flw	fs0,48(a2)
    1118:	0006                	c.slli	zero,0x1
    111a:	1800                	addi	s0,sp,48
    111c:	02000007          	0x2000007
    1120:	8600                	0x8600
	...
    112a:	a400                	fsd	fs0,8(s0)
    112c:	0006                	c.slli	zero,0x1
    112e:	a500                	fsd	fs0,8(a0)
    1130:	0006                	c.slli	zero,0x1
    1132:	0100                	addi	s0,sp,128
    1134:	5a00                	lw	s0,48(a2)
    1136:	06a5                	addi	a3,a3,9
    1138:	0000                	unimp
    113a:	0706                	slli	a4,a4,0x1
    113c:	0000                	unimp
    113e:	0001                	nop
    1140:	0000006b          	0x6b
    1144:	0000                	unimp
    1146:	0000                	unimp
    1148:	aa00                	fsd	fs0,16(a2)
    114a:	0005                	c.nop	1
    114c:	4c00                	lw	s0,24(s0)
    114e:	0006                	c.slli	zero,0x1
    1150:	0200                	addi	s0,sp,256
    1152:	8200                	0x8200
    1154:	4c00                	lw	s0,24(s0)
    1156:	0006                	c.slli	zero,0x1
    1158:	6400                	flw	fs0,8(s0)
    115a:	0006                	c.slli	zero,0x1
    115c:	0c00                	addi	s0,sp,528
    115e:	8600                	0x8600
    1160:	8800                	0x8800
    1162:	3201                	jal	a62 <generate_keys+0x136>
    1164:	2324                	fld	fs1,64(a4)
    1166:	1af0090f          	0x1af0090f
    116a:	7a1c                	flw	fa5,48(a2)
    116c:	0006                	c.slli	zero,0x1
    116e:	0600                	addi	s0,sp,768
    1170:	02000007          	0x2000007
    1174:	8200                	0x8200
    1176:	0600                	addi	s0,sp,768
    1178:	18000007          	0x18000007
    117c:	0c000007          	0xc000007
    1180:	8600                	0x8600
    1182:	8800                	0x8800
    1184:	3201                	jal	a84 <generate_keys+0x158>
    1186:	2324                	fld	fs1,64(a4)
    1188:	1af0090f          	0x1af0090f
    118c:	001c                	0x1c
    118e:	0000                	unimp
    1190:	0000                	unimp
    1192:	0000                	unimp
    1194:	c400                	sw	s0,8(s0)
    1196:	0005                	c.nop	1
    1198:	d600                	sw	s0,40(a2)
    119a:	0005                	c.nop	1
    119c:	0200                	addi	s0,sp,256
    119e:	8700                	0x8700
    11a0:	d600                	sw	s0,40(a2)
    11a2:	0005                	c.nop	1
    11a4:	5400                	lw	s0,40(s0)
    11a6:	0006                	c.slli	zero,0x1
    11a8:	0200                	addi	s0,sp,256
    11aa:	7200                	flw	fs0,32(a2)
    11ac:	5400                	lw	s0,40(s0)
    11ae:	0006                	c.slli	zero,0x1
    11b0:	6600                	flw	fs0,8(a2)
    11b2:	0006                	c.slli	zero,0x1
    11b4:	0200                	addi	s0,sp,256
    11b6:	8700                	0x8700
    11b8:	7a00                	flw	fs0,48(a2)
    11ba:	0006                	c.slli	zero,0x1
    11bc:	1800                	addi	s0,sp,48
    11be:	02000007          	0x2000007
    11c2:	7200                	flw	fs0,32(a2)
	...
    11cc:	aa00                	fsd	fs0,16(a2)
    11ce:	0005                	c.nop	1
    11d0:	6800                	flw	fs0,16(s0)
    11d2:	0006                	c.slli	zero,0x1
    11d4:	0100                	addi	s0,sp,128
    11d6:	6800                	flw	fs0,16(s0)
    11d8:	0668                	addi	a0,sp,780
    11da:	0000                	unimp
    11dc:	067a                	slli	a2,a2,0x1e
    11de:	0000                	unimp
    11e0:	0006                	c.slli	zero,0x1
    11e2:	315b01f3          	0x315b01f3
    11e6:	9f1c                	0x9f1c
    11e8:	067a                	slli	a2,a2,0x1e
    11ea:	0000                	unimp
    11ec:	0718                	addi	a4,sp,896
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0068                	addi	a0,sp,12
    11f4:	0000                	unimp
    11f6:	0000                	unimp
    11f8:	0000                	unimp
    11fa:	aa00                	fsd	fs0,16(a2)
    11fc:	0005                	c.nop	1
    11fe:	6800                	flw	fs0,16(s0)
    1200:	0006                	c.slli	zero,0x1
    1202:	0100                	addi	s0,sp,128
    1204:	6800                	flw	fs0,16(s0)
    1206:	0668                	addi	a0,sp,780
    1208:	0000                	unimp
    120a:	067a                	slli	a2,a2,0x1e
    120c:	0000                	unimp
    120e:	0006                	c.slli	zero,0x1
    1210:	315b01f3          	0x315b01f3
    1214:	9f1c                	0x9f1c
    1216:	067a                	slli	a2,a2,0x1e
    1218:	0000                	unimp
    121a:	0718                	addi	a4,sp,896
    121c:	0000                	unimp
    121e:	0001                	nop
    1220:	0068                	addi	a0,sp,12
    1222:	0000                	unimp
    1224:	0000                	unimp
    1226:	0000                	unimp
    1228:	aa00                	fsd	fs0,16(a2)
    122a:	0005                	c.nop	1
    122c:	6800                	flw	fs0,16(s0)
    122e:	0006                	c.slli	zero,0x1
    1230:	0100                	addi	s0,sp,128
    1232:	6800                	flw	fs0,16(s0)
    1234:	0668                	addi	a0,sp,780
    1236:	0000                	unimp
    1238:	067a                	slli	a2,a2,0x1e
    123a:	0000                	unimp
    123c:	0006                	c.slli	zero,0x1
    123e:	315b01f3          	0x315b01f3
    1242:	9f1c                	0x9f1c
    1244:	067a                	slli	a2,a2,0x1e
    1246:	0000                	unimp
    1248:	0718                	addi	a4,sp,896
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0068                	addi	a0,sp,12
    1250:	0000                	unimp
    1252:	0000                	unimp
    1254:	0000                	unimp
    1256:	b800                	fsd	fs0,48(s0)
    1258:	0005                	c.nop	1
    125a:	da00                	sw	s0,48(a2)
    125c:	0005                	c.nop	1
    125e:	0100                	addi	s0,sp,128
    1260:	6900                	flw	fs0,16(a0)
    1262:	05da                	slli	a1,a1,0x16
    1264:	0000                	unimp
    1266:	05f4                	addi	a3,sp,716
    1268:	0000                	unimp
    126a:	7f840003          	lb	zero,2040(s0) # 167f8 <_stack_start+0x67f8>
    126e:	f49f 0005 0a00      	0xa000005f49f
    1274:	0006                	c.slli	zero,0x1
    1276:	0100                	addi	s0,sp,128
    1278:	6900                	flw	fs0,16(a0)
    127a:	060a                	slli	a2,a2,0x2
    127c:	0000                	unimp
    127e:	0660                	addi	s0,sp,780
    1280:	0000                	unimp
    1282:	7f840003          	lb	zero,2040(s0)
    1286:	609f 0006 7a00      	0x7a000006609f
    128c:	0006                	c.slli	zero,0x1
    128e:	0600                	addi	s0,sp,768
    1290:	f300                	fsw	fs0,32(a4)
    1292:	5d01                	li	s10,-32
    1294:	1c31                	addi	s8,s8,-20
    1296:	7a9f 0006 1800      	0x180000067a9f
    129c:	03000007          	0x3000007
    12a0:	8400                	0x8400
    12a2:	9f7f                	0x9f7f
	...
    12ac:	0400                	addi	s0,sp,512
    12ae:	0000                	unimp
    12b0:	047c                	addi	a5,sp,524
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	7c5a                	flw	fs8,180(sp)
    12b8:	0004                	0x4
    12ba:	8100                	0x8100
    12bc:	0004                	0x4
    12be:	0100                	addi	s0,sp,128
    12c0:	5b00                	lw	s0,48(a4)
    12c2:	0481                	addi	s1,s1,0
    12c4:	0000                	unimp
    12c6:	04a8                	addi	a0,sp,584
    12c8:	0000                	unimp
    12ca:	0004                	0x4
    12cc:	9f5a01f3          	0x9f5a01f3
    12d0:	04a8                	addi	a0,sp,584
    12d2:	0000                	unimp
    12d4:	04ca                	slli	s1,s1,0x12
    12d6:	0000                	unimp
    12d8:	0001                	nop
    12da:	ca5a                	sw	s6,20(sp)
    12dc:	0004                	0x4
    12de:	5e00                	lw	s0,56(a2)
    12e0:	0005                	c.nop	1
    12e2:	0400                	addi	s0,sp,512
    12e4:	f300                	fsw	fs0,32(a4)
    12e6:	5a01                	li	s4,-32
    12e8:	009f 0000 0000      	0x9f
    12ee:	0000                	unimp
    12f0:	0000                	unimp
    12f2:	0004                	0x4
    12f4:	7a00                	flw	fs0,48(a2)
    12f6:	0004                	0x4
    12f8:	0100                	addi	s0,sp,128
    12fa:	5b00                	lw	s0,48(a4)
    12fc:	047a                	slli	s0,s0,0x1e
    12fe:	0000                	unimp
    1300:	0481                	addi	s1,s1,0
    1302:	0000                	unimp
    1304:	0001                	nop
    1306:	815c                	0x815c
    1308:	0004                	0x4
    130a:	a800                	fsd	fs0,16(s0)
    130c:	0004                	0x4
    130e:	0300                	addi	s0,sp,384
    1310:	8800                	0x8800
    1312:	9f01                	0x9f01
    1314:	04a8                	addi	a0,sp,584
    1316:	0000                	unimp
    1318:	04ca                	slli	s1,s1,0x12
    131a:	0000                	unimp
    131c:	0001                	nop
    131e:	0004ca5b          	0x4ca5b
    1322:	1600                	addi	s0,sp,800
    1324:	0005                	c.nop	1
    1326:	0300                	addi	s0,sp,384
    1328:	8800                	0x8800
    132a:	9f01                	0x9f01
    132c:	0516                	slli	a0,a0,0x5
    132e:	0000                	unimp
    1330:	055e                	slli	a0,a0,0x17
    1332:	0000                	unimp
    1334:	0004                	0x4
    1336:	9f5b01f3          	0x9f5b01f3
	...
    1342:	0400                	addi	s0,sp,512
    1344:	0000                	unimp
    1346:	0472                	slli	s0,s0,0x1c
    1348:	0000                	unimp
    134a:	0001                	nop
    134c:	725c                	flw	fa5,36(a2)
    134e:	0004                	0x4
    1350:	8100                	0x8100
    1352:	0004                	0x4
    1354:	0100                	addi	s0,sp,128
    1356:	6000                	flw	fs0,0(s0)
    1358:	0481                	addi	s1,s1,0
    135a:	0000                	unimp
    135c:	04a8                	addi	a0,sp,584
    135e:	0000                	unimp
    1360:	bc780003          	lb	zero,-1081(a6) # 590b4fe9 <_stack_start+0x590a4fe9>
    1364:	a87f                	0xa87f
    1366:	0004                	0x4
    1368:	ca00                	sw	s0,16(a2)
    136a:	0004                	0x4
    136c:	0100                	addi	s0,sp,128
    136e:	6000                	flw	fs0,0(s0)
    1370:	04ca                	slli	s1,s1,0x12
    1372:	0000                	unimp
    1374:	0506                	slli	a0,a0,0x1
    1376:	0000                	unimp
    1378:	bc780003          	lb	zero,-1081(a6)
    137c:	067f                	0x67f
    137e:	0005                	c.nop	1
    1380:	5e00                	lw	s0,56(a2)
    1382:	0005                	c.nop	1
    1384:	0300                	addi	s0,sp,384
    1386:	9100                	0x9100
    1388:	7fbc                	flw	fa5,120(a5)
	...
    1392:	0400                	addi	s0,sp,512
    1394:	0000                	unimp
    1396:	0468                	addi	a0,sp,524
    1398:	0000                	unimp
    139a:	0001                	nop
    139c:	685d                	lui	a6,0x17
    139e:	0004                	0x4
    13a0:	0e00                	addi	s0,sp,784
    13a2:	0005                	c.nop	1
    13a4:	0100                	addi	s0,sp,128
    13a6:	6400                	flw	fs0,8(s0)
    13a8:	050e                	slli	a0,a0,0x3
    13aa:	0000                	unimp
    13ac:	0528                	addi	a0,sp,648
    13ae:	0000                	unimp
    13b0:	0004                	0x4
    13b2:	9f5d01f3          	0x9f5d01f3
    13b6:	0528                	addi	a0,sp,648
    13b8:	0000                	unimp
    13ba:	055e                	slli	a0,a0,0x17
    13bc:	0000                	unimp
    13be:	0001                	nop
    13c0:	0064                	addi	s1,sp,12
	...
    13ca:	0004                	0x4
    13cc:	6a00                	flw	fs0,16(a2)
    13ce:	0004                	0x4
    13d0:	0100                	addi	s0,sp,128
    13d2:	5e00                	lw	s0,56(a2)
    13d4:	046a                	slli	s0,s0,0x1a
    13d6:	0000                	unimp
    13d8:	051c                	addi	a5,sp,640
    13da:	0000                	unimp
    13dc:	0001                	nop
    13de:	00051c6b          	0x51c6b
    13e2:	2800                	fld	fs0,16(s0)
    13e4:	0005                	c.nop	1
    13e6:	0400                	addi	s0,sp,512
    13e8:	f300                	fsw	fs0,32(a4)
    13ea:	5e01                	li	t3,-32
    13ec:	289f 0005 5e00      	0x5e000005289f
    13f2:	0005                	c.nop	1
    13f4:	0100                	addi	s0,sp,128
    13f6:	6b00                	flw	fs0,16(a4)
	...
    1400:	045c                	addi	a5,sp,516
    1402:	0000                	unimp
    1404:	04a0                	addi	s0,sp,584
    1406:	0000                	unimp
    1408:	0002                	c.slli64	zero
    140a:	0082                	c.slli64	ra
    140c:	04a0                	addi	s0,sp,584
    140e:	0000                	unimp
    1410:	04a8                	addi	a0,sp,584
    1412:	0000                	unimp
    1414:	0002                	c.slli64	zero
    1416:	0089                	addi	ra,ra,2
    1418:	04a8                	addi	a0,sp,584
    141a:	0000                	unimp
    141c:	04ca                	slli	s1,s1,0x12
    141e:	0000                	unimp
    1420:	0002                	c.slli64	zero
    1422:	0082                	c.slli64	ra
    1424:	04ca                	slli	s1,s1,0x12
    1426:	0000                	unimp
    1428:	04fa                	slli	s1,s1,0x1e
    142a:	0000                	unimp
    142c:	0002                	c.slli64	zero
    142e:	0089                	addi	ra,ra,2
    1430:	0528                	addi	a0,sp,648
    1432:	0000                	unimp
    1434:	0550                	addi	a2,sp,644
    1436:	0000                	unimp
    1438:	0002                	c.slli64	zero
    143a:	0089                	addi	ra,ra,2
	...
    1444:	0464                	addi	s1,sp,524
    1446:	0000                	unimp
    1448:	0472                	slli	s0,s0,0x1c
    144a:	0000                	unimp
    144c:	0002                	c.slli64	zero
    144e:	9f30                	0x9f30
    1450:	0472                	slli	s0,s0,0x1c
    1452:	0000                	unimp
    1454:	0481                	addi	s1,s1,0
    1456:	0000                	unimp
    1458:	0001                	nop
    145a:	a85e                	fsd	fs7,16(sp)
    145c:	0004                	0x4
    145e:	ca00                	sw	s0,16(a2)
    1460:	0004                	0x4
    1462:	0100                	addi	s0,sp,128
    1464:	5e00                	lw	s0,56(a2)
    1466:	04fa                	slli	s1,s1,0x1e
    1468:	0000                	unimp
    146a:	0508                	addi	a0,sp,640
    146c:	0000                	unimp
    146e:	0001                	nop
    1470:	5059                	c.li	zero,-10
    1472:	0005                	c.nop	1
    1474:	5e00                	lw	s0,56(a2)
    1476:	0005                	c.nop	1
    1478:	0100                	addi	s0,sp,128
    147a:	5900                	lw	s0,48(a0)
	...
    1484:	04a0                	addi	s0,sp,584
    1486:	0000                	unimp
    1488:	04a8                	addi	a0,sp,584
    148a:	0000                	unimp
    148c:	0001                	nop
    148e:	a865                	j	1546 <product2+0xbe>
    1490:	0004                	0x4
    1492:	c400                	sw	s0,8(s0)
    1494:	0004                	0x4
    1496:	0100                	addi	s0,sp,128
    1498:	5f00                	lw	s0,56(a4)
    149a:	04ca                	slli	s1,s1,0x12
    149c:	0000                	unimp
    149e:	0510                	addi	a2,sp,640
    14a0:	0000                	unimp
    14a2:	0001                	nop
    14a4:	2865                	jal	155c <product2+0xd4>
    14a6:	0005                	c.nop	1
    14a8:	5e00                	lw	s0,56(a2)
    14aa:	0005                	c.nop	1
    14ac:	0100                	addi	s0,sp,128
    14ae:	6500                	flw	fs0,8(a0)
	...
    14b8:	04ca                	slli	s1,s1,0x12
    14ba:	0000                	unimp
    14bc:	04dc                	addi	a5,sp,580
    14be:	0000                	unimp
    14c0:	0001                	nop
    14c2:	dc5f 0004 e200      	0xe2000004dc5f
    14c8:	0004                	0x4
    14ca:	0300                	addi	s0,sp,384
    14cc:	7f00                	flw	fs0,56(a4)
    14ce:	9f01                	0x9f01
    14d0:	04e2                	slli	s1,s1,0x18
    14d2:	0000                	unimp
    14d4:	04ec                	addi	a1,sp,588
    14d6:	0000                	unimp
    14d8:	0001                	nop
    14da:	2c5f 0005 3e00      	0x3e0000052c5f
    14e0:	0005                	c.nop	1
    14e2:	0100                	addi	s0,sp,128
    14e4:	5f00                	lw	s0,56(a4)
    14e6:	053e                	slli	a0,a0,0xf
    14e8:	0000                	unimp
    14ea:	0544                	addi	s1,sp,644
    14ec:	0000                	unimp
    14ee:	017f0003          	lb	zero,23(t5) # 1b017 <_stack_start+0xb017>
    14f2:	449f 0005 5000      	0x50000005449f
    14f8:	0005                	c.nop	1
    14fa:	0100                	addi	s0,sp,128
    14fc:	5f00                	lw	s0,56(a4)
	...
    1506:	04fe                	slli	s1,s1,0x1f
    1508:	0000                	unimp
    150a:	0528                	addi	a0,sp,648
    150c:	0000                	unimp
    150e:	0006                	c.slli	zero,0x1
    1510:	00148803          	lb	a6,1(s1)
    1514:	9f00                	0x9f00
	...
    151e:	0462                	slli	s0,s0,0x18
    1520:	0000                	unimp
    1522:	051a                	slli	a0,a0,0x6
    1524:	0000                	unimp
    1526:	0002                	c.slli64	zero
    1528:	008a                	slli	ra,ra,0x2
    152a:	0528                	addi	a0,sp,648
    152c:	0000                	unimp
    152e:	055e                	slli	a0,a0,0x17
    1530:	0000                	unimp
    1532:	0002                	c.slli64	zero
    1534:	008a                	slli	ra,ra,0x2
	...
    153e:	0464                	addi	s1,sp,524
    1540:	0000                	unimp
    1542:	0502                	c.slli64	a0
    1544:	0000                	unimp
    1546:	0002                	c.slli64	zero
    1548:	0072                	c.slli	zero,0x1c
    154a:	0502                	c.slli64	a0
    154c:	0000                	unimp
    154e:	050e                	slli	a0,a0,0x3
    1550:	0000                	unimp
    1552:	000c                	0xc
    1554:	008a                	slli	ra,ra,0x2
    1556:	0084                	addi	s1,sp,64
    1558:	2432                	fld	fs0,264(sp)
    155a:	f0090f23          	sb	zero,-226(s2)
    155e:	1c1a                	slli	s8,s8,0x26
    1560:	050e                	slli	a0,a0,0x3
    1562:	0000                	unimp
    1564:	051a                	slli	a0,a0,0x6
    1566:	0000                	unimp
    1568:	000d                	c.nop	3
    156a:	008a                	slli	ra,ra,0x2
    156c:	325d01f3          	0x325d01f3
    1570:	2324                	fld	fs1,64(a4)
    1572:	1af0090f          	0x1af0090f
    1576:	281c                	fld	fa5,16(s0)
    1578:	0005                	c.nop	1
    157a:	5e00                	lw	s0,56(a2)
    157c:	0005                	c.nop	1
    157e:	0200                	addi	s0,sp,256
    1580:	7200                	flw	fs0,32(a2)
	...
    158a:	5c00                	lw	s0,56(s0)
    158c:	0004                	0x4
    158e:	a000                	fsd	fs0,0(s0)
    1590:	0004                	0x4
    1592:	0100                	addi	s0,sp,128
    1594:	6500                	flw	fs0,8(a0)
    1596:	04a0                	addi	s0,sp,584
    1598:	0000                	unimp
    159a:	04a8                	addi	a0,sp,584
    159c:	0000                	unimp
    159e:	7f840003          	lb	zero,2040(s0)
    15a2:	a89f 0004 ca00      	0xca000004a89f
    15a8:	0004                	0x4
    15aa:	0100                	addi	s0,sp,128
    15ac:	6500                	flw	fs0,8(a0)
    15ae:	04ca                	slli	s1,s1,0x12
    15b0:	0000                	unimp
    15b2:	050e                	slli	a0,a0,0x3
    15b4:	0000                	unimp
    15b6:	7f840003          	lb	zero,2040(s0)
    15ba:	0e9f 0005 2800      	0x280000050e9f
    15c0:	0005                	c.nop	1
    15c2:	0600                	addi	s0,sp,768
    15c4:	f300                	fsw	fs0,32(a4)
    15c6:	5d01                	li	s10,-32
    15c8:	1c31                	addi	s8,s8,-20
    15ca:	289f 0005 5e00      	0x5e000005289f
    15d0:	0005                	c.nop	1
    15d2:	0300                	addi	s0,sp,384
    15d4:	8400                	0x8400
    15d6:	9f7f                	0x9f7f
	...
    15e0:	0414                	addi	a3,sp,512
    15e2:	0000                	unimp
    15e4:	050c                	addi	a1,sp,640
    15e6:	0000                	unimp
    15e8:	0001                	nop
    15ea:	00050c63          	beqz	a0,1602 <product2+0x17a>
    15ee:	0e00                	addi	s0,sp,784
    15f0:	0005                	c.nop	1
    15f2:	0600                	addi	s0,sp,768
    15f4:	8400                	0x8400
    15f6:	8800                	0x8800
    15f8:	2200                	fld	fs0,0(a2)
    15fa:	0e9f 0005 1600      	0x160000050e9f
    1600:	0005                	c.nop	1
    1602:	0700                	addi	s0,sp,896
    1604:	8800                	0x8800
    1606:	f300                	fsw	fs0,32(a4)
    1608:	5d01                	li	s10,-32
    160a:	9f22                	add	t5,t5,s0
    160c:	0516                	slli	a0,a0,0x5
    160e:	0000                	unimp
    1610:	0528                	addi	a0,sp,648
    1612:	0000                	unimp
    1614:	000a                	c.slli	zero,0x2
    1616:	f35b01f3          	0xf35b01f3
    161a:	5d01                	li	s10,-32
    161c:	3122                	fld	ft2,40(sp)
    161e:	9f1c                	0x9f1c
    1620:	0528                	addi	a0,sp,648
    1622:	0000                	unimp
    1624:	055e                	slli	a0,a0,0x17
    1626:	0000                	unimp
    1628:	0001                	nop
    162a:	00000063          	beqz	zero,162a <product2+0x1a2>
    162e:	0000                	unimp
    1630:	0000                	unimp
    1632:	6200                	flw	fs0,0(a2)
    1634:	0004                	0x4
    1636:	1600                	addi	s0,sp,800
    1638:	0005                	c.nop	1
    163a:	0100                	addi	s0,sp,128
    163c:	6800                	flw	fs0,16(s0)
    163e:	0516                	slli	a0,a0,0x5
    1640:	0000                	unimp
    1642:	0528                	addi	a0,sp,648
    1644:	0000                	unimp
    1646:	0006                	c.slli	zero,0x1
    1648:	315b01f3          	0x315b01f3
    164c:	9f1c                	0x9f1c
    164e:	0528                	addi	a0,sp,648
    1650:	0000                	unimp
    1652:	055e                	slli	a0,a0,0x17
    1654:	0000                	unimp
    1656:	0001                	nop
    1658:	0068                	addi	a0,sp,12
    165a:	0000                	unimp
    165c:	0000                	unimp
    165e:	0000                	unimp
    1660:	6200                	flw	fs0,0(a2)
    1662:	0004                	0x4
    1664:	a000                	fsd	fs0,0(s0)
    1666:	0004                	0x4
    1668:	0100                	addi	s0,sp,128
    166a:	6500                	flw	fs0,8(a0)
    166c:	04a0                	addi	s0,sp,584
    166e:	0000                	unimp
    1670:	04a8                	addi	a0,sp,584
    1672:	0000                	unimp
    1674:	7f840003          	lb	zero,2040(s0)
    1678:	a89f 0004 ca00      	0xca000004a89f
    167e:	0004                	0x4
    1680:	0100                	addi	s0,sp,128
    1682:	6500                	flw	fs0,8(a0)
    1684:	04ca                	slli	s1,s1,0x12
    1686:	0000                	unimp
    1688:	050e                	slli	a0,a0,0x3
    168a:	0000                	unimp
    168c:	7f840003          	lb	zero,2040(s0)
    1690:	0e9f 0005 2800      	0x280000050e9f
    1696:	0005                	c.nop	1
    1698:	0600                	addi	s0,sp,768
    169a:	f300                	fsw	fs0,32(a4)
    169c:	5d01                	li	s10,-32
    169e:	1c31                	addi	s8,s8,-20
    16a0:	289f 0005 5e00      	0x5e000005289f
    16a6:	0005                	c.nop	1
    16a8:	0300                	addi	s0,sp,384
    16aa:	8400                	0x8400
    16ac:	9f7f                	0x9f7f
	...
    16b6:	025e                	slli	tp,tp,0x17
    16b8:	0000                	unimp
    16ba:	02dc                	addi	a5,sp,324
    16bc:	0000                	unimp
    16be:	0001                	nop
    16c0:	dc5a                	sw	s6,56(sp)
    16c2:	0002                	c.slli64	zero
    16c4:	e900                	fsw	fs0,16(a0)
    16c6:	0002                	c.slli64	zero
    16c8:	0100                	addi	s0,sp,128
    16ca:	5b00                	lw	s0,48(a4)
    16cc:	02e9                	addi	t0,t0,26
    16ce:	0000                	unimp
    16d0:	0326                	slli	t1,t1,0x9
    16d2:	0000                	unimp
    16d4:	0004                	0x4
    16d6:	9f5a01f3          	0x9f5a01f3
    16da:	0326                	slli	t1,t1,0x9
    16dc:	0000                	unimp
    16de:	0348                	addi	a0,sp,388
    16e0:	0000                	unimp
    16e2:	0001                	nop
    16e4:	485a                	lw	a6,148(sp)
    16e6:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    16ea:	0004                	0x4
    16ec:	0400                	addi	s0,sp,512
    16ee:	f300                	fsw	fs0,32(a4)
    16f0:	5a01                	li	s4,-32
    16f2:	009f 0000 0000      	0x9f
    16f8:	0000                	unimp
    16fa:	5e00                	lw	s0,56(a2)
    16fc:	0002                	c.slli64	zero
    16fe:	c800                	sw	s0,16(s0)
    1700:	0002                	c.slli64	zero
    1702:	0100                	addi	s0,sp,128
    1704:	5b00                	lw	s0,48(a4)
    1706:	02c8                	addi	a0,sp,324
    1708:	0000                	unimp
    170a:	0388                	addi	a0,sp,448
    170c:	0000                	unimp
    170e:	0001                	nop
    1710:	8868                	0x8868
    1712:	9a000003          	lb	zero,-1632(zero) # fffff9a0 <_stack_start+0xfffef9a0>
    1716:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    171a:	9100                	0x9100
    171c:	7fbc                	flw	fa5,120(a5)
    171e:	2306                	fld	ft6,64(sp)
    1720:	9f01                	0x9f01
    1722:	039a                	slli	t2,t2,0x6
    1724:	0000                	unimp
    1726:	0400                	addi	s0,sp,512
    1728:	0000                	unimp
    172a:	0001                	nop
    172c:	0068                	addi	a0,sp,12
    172e:	0000                	unimp
    1730:	0000                	unimp
    1732:	0000                	unimp
    1734:	5e00                	lw	s0,56(a2)
    1736:	0002                	c.slli64	zero
    1738:	ca00                	sw	s0,16(a2)
    173a:	0002                	c.slli64	zero
    173c:	0100                	addi	s0,sp,128
    173e:	5c00                	lw	s0,56(s0)
    1740:	02ca                	slli	t0,t0,0x12
    1742:	0000                	unimp
    1744:	02e9                	addi	t0,t0,26
    1746:	0000                	unimp
    1748:	0001                	nop
    174a:	e960                	fsw	fs0,84(a0)
    174c:	0002                	c.slli64	zero
    174e:	2600                	fld	fs0,8(a2)
    1750:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1754:	7800                	flw	fs0,48(s0)
    1756:	7fb8                	flw	fa4,120(a5)
    1758:	0326                	slli	t1,t1,0x9
    175a:	0000                	unimp
    175c:	0348                	addi	a0,sp,388
    175e:	0000                	unimp
    1760:	0001                	nop
    1762:	4860                	lw	s0,84(s0)
    1764:	78000003          	lb	zero,1920(zero) # 780 <ext_euclid+0x68>
    1768:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    176c:	7800                	flw	fs0,48(s0)
    176e:	7fb8                	flw	fa4,120(a5)
    1770:	0378                	addi	a4,sp,396
    1772:	0000                	unimp
    1774:	0400                	addi	s0,sp,512
    1776:	0000                	unimp
    1778:	b8910003          	lb	zero,-1143(sp)
    177c:	007f                	0x7f
    177e:	0000                	unimp
    1780:	0000                	unimp
    1782:	0000                	unimp
    1784:	5e00                	lw	s0,56(a2)
    1786:	0002                	c.slli64	zero
    1788:	c400                	sw	s0,8(s0)
    178a:	0002                	c.slli64	zero
    178c:	0100                	addi	s0,sp,128
    178e:	5d00                	lw	s0,56(a0)
    1790:	02c4                	addi	s1,sp,324
    1792:	0000                	unimp
    1794:	037c                	addi	a5,sp,396
    1796:	0000                	unimp
    1798:	0001                	nop
    179a:	7c62                	flw	fs8,56(sp)
    179c:	9a000003          	lb	zero,-1632(zero) # fffff9a0 <_stack_start+0xfffef9a0>
    17a0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    17a4:	f300                	fsw	fs0,32(a4)
    17a6:	5d01                	li	s10,-32
    17a8:	9a9f 0003 0000      	0x39a9f
    17ae:	0004                	0x4
    17b0:	0100                	addi	s0,sp,128
    17b2:	6200                	flw	fs0,0(a2)
	...
    17bc:	025e                	slli	tp,tp,0x17
    17be:	0000                	unimp
    17c0:	026e                	slli	tp,tp,0x1b
    17c2:	0000                	unimp
    17c4:	0001                	nop
    17c6:	6e5e                	flw	ft8,212(sp)
    17c8:	0002                	c.slli64	zero
    17ca:	8000                	0x8000
    17cc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17d0:	6400                	flw	fs0,8(s0)
    17d2:	0380                	addi	s0,sp,448
    17d4:	0000                	unimp
    17d6:	039a                	slli	t2,t2,0x6
    17d8:	0000                	unimp
    17da:	0004                	0x4
    17dc:	9f5e01f3          	0x9f5e01f3
    17e0:	039a                	slli	t2,t2,0x6
    17e2:	0000                	unimp
    17e4:	0400                	addi	s0,sp,512
    17e6:	0000                	unimp
    17e8:	0001                	nop
    17ea:	0064                	addi	s1,sp,12
    17ec:	0000                	unimp
    17ee:	0000                	unimp
    17f0:	0000                	unimp
    17f2:	5e00                	lw	s0,56(a2)
    17f4:	0002                	c.slli64	zero
    17f6:	e900                	fsw	fs0,16(a0)
    17f8:	0002                	c.slli64	zero
    17fa:	0100                	addi	s0,sp,128
    17fc:	5f00                	lw	s0,56(a4)
    17fe:	02e9                	addi	t0,t0,26
    1800:	0000                	unimp
    1802:	0326                	slli	t1,t1,0x9
    1804:	0000                	unimp
    1806:	b4780003          	lb	zero,-1209(a6) # 16b47 <_stack_start+0x6b47>
    180a:	267f                	0x267f
    180c:	48000003          	lb	zero,1152(zero) # 480 <polymult2+0x80>
    1810:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1814:	5f00                	lw	s0,56(a4)
    1816:	0348                	addi	a0,sp,388
    1818:	0000                	unimp
    181a:	0378                	addi	a4,sp,396
    181c:	0000                	unimp
    181e:	b4780003          	lb	zero,-1209(a6)
    1822:	787f                	0x787f
    1824:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    1828:	0004                	0x4
    182a:	0300                	addi	s0,sp,384
    182c:	9100                	0x9100
    182e:	7fb4                	flw	fa3,120(a5)
	...
    1838:	02be                	slli	t0,t0,0xf
    183a:	0000                	unimp
    183c:	02d2                	slli	t0,t0,0x14
    183e:	0000                	unimp
    1840:	0002                	c.slli64	zero
    1842:	02d20087          	0x2d20087
    1846:	0000                	unimp
    1848:	035e                	slli	t1,t1,0x17
    184a:	0000                	unimp
    184c:	0002                	c.slli64	zero
    184e:	0086                	slli	ra,ra,0x1
    1850:	039a                	slli	t2,t2,0x6
    1852:	0000                	unimp
    1854:	03f4                	addi	a3,sp,460
    1856:	0000                	unimp
    1858:	0002                	c.slli64	zero
    185a:	0086                	slli	ra,ra,0x1
	...
    1864:	02c4                	addi	s1,sp,324
    1866:	0000                	unimp
    1868:	02d2                	slli	t0,t0,0x14
    186a:	0000                	unimp
    186c:	0002                	c.slli64	zero
    186e:	9f30                	0x9f30
    1870:	02d2                	slli	t0,t0,0x14
    1872:	0000                	unimp
    1874:	02da                	slli	t0,t0,0x16
    1876:	0000                	unimp
    1878:	0001                	nop
    187a:	265c                	fld	fa5,136(a2)
    187c:	48000003          	lb	zero,1152(zero) # 480 <polymult2+0x80>
    1880:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1884:	5c00                	lw	s0,56(s0)
    1886:	0350                	addi	a2,sp,388
    1888:	0000                	unimp
    188a:	0356                	slli	t1,t1,0x15
    188c:	0000                	unimp
    188e:	0001                	nop
    1890:	5e59                	li	t3,-10
    1892:	7a000003          	lb	zero,1952(zero) # 7a0 <ext_euclid+0x88>
    1896:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    189a:	5900                	lw	s0,48(a0)
    189c:	03e6                	slli	t2,t2,0x19
    189e:	0000                	unimp
    18a0:	0400                	addi	s0,sp,512
    18a2:	0000                	unimp
    18a4:	0001                	nop
    18a6:	0059                	c.nop	22
    18a8:	0000                	unimp
    18aa:	0000                	unimp
    18ac:	0000                	unimp
    18ae:	1e00                	addi	s0,sp,816
    18b0:	26000003          	lb	zero,608(zero) # 260 <polymult+0x2>
    18b4:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18b8:	6900                	flw	fs0,16(a0)
    18ba:	0326                	slli	t1,t1,0x9
    18bc:	0000                	unimp
    18be:	0342                	slli	t1,t1,0x10
    18c0:	0000                	unimp
    18c2:	0001                	nop
    18c4:	4a5e                	lw	s4,212(sp)
    18c6:	8a000003          	lb	zero,-1888(zero) # fffff8a0 <_stack_start+0xfffef8a0>
    18ca:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18ce:	6900                	flw	fs0,16(a0)
    18d0:	039a                	slli	t2,t2,0x6
    18d2:	0000                	unimp
    18d4:	0400                	addi	s0,sp,512
    18d6:	0000                	unimp
    18d8:	0001                	nop
    18da:	0069                	c.nop	26
    18dc:	0000                	unimp
    18de:	0000                	unimp
    18e0:	0000                	unimp
    18e2:	9a00                	0x9a00
    18e4:	ac000003          	lb	zero,-1344(zero) # fffffac0 <_stack_start+0xfffefac0>
    18e8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18ec:	5f00                	lw	s0,56(a4)
    18ee:	03ac                	addi	a1,sp,456
    18f0:	0000                	unimp
    18f2:	03b2                	slli	t2,t2,0xc
    18f4:	0000                	unimp
    18f6:	017f0003          	lb	zero,23(t5)
    18fa:	b29f 0003 be00      	0xbe000003b29f
    1900:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1904:	5f00                	lw	s0,56(a4)
    1906:	03c2                	slli	t2,t2,0x10
    1908:	0000                	unimp
    190a:	03d4                	addi	a3,sp,452
    190c:	0000                	unimp
    190e:	0001                	nop
    1910:	d45f 0003 da00      	0xda000003d45f
    1916:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    191a:	7f00                	flw	fs0,56(a4)
    191c:	9f01                	0x9f01
    191e:	03da                	slli	t2,t2,0x16
    1920:	0000                	unimp
    1922:	03e6                	slli	t2,t2,0x19
    1924:	0000                	unimp
    1926:	0001                	nop
    1928:	005f 0000 0000      	0x5f
    192e:	0000                	unimp
    1930:	7000                	flw	fs0,32(s0)
    1932:	9a000003          	lb	zero,-1632(zero) # fffff9a0 <_stack_start+0xfffef9a0>
    1936:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    193a:	0300                	addi	s0,sp,384
    193c:	1230                	addi	a2,sp,296
    193e:	0000                	unimp
    1940:	009f 0000 0000      	0x9f
    1946:	0000                	unimp
    1948:	c400                	sw	s0,8(s0)
    194a:	0002                	c.slli64	zero
    194c:	8e00                	0x8e00
    194e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1952:	8b00                	0x8b00
    1954:	9a00                	0x9a00
    1956:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    195a:	0004                	0x4
    195c:	0200                	addi	s0,sp,256
    195e:	8b00                	0x8b00
	...
    1968:	c400                	sw	s0,8(s0)
    196a:	0002                	c.slli64	zero
    196c:	7400                	flw	fs0,40(s0)
    196e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1972:	7200                	flw	fs0,32(a2)
    1974:	7400                	flw	fs0,40(s0)
    1976:	7c000003          	lb	zero,1984(zero) # 7c0 <ext_euclid+0xa8>
    197a:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
    197e:	8b00                	0x8b00
    1980:	8200                	0x8200
    1982:	3200                	fld	fs0,32(a2)
    1984:	2324                	fld	fs1,64(a4)
    1986:	1af0090f          	0x1af0090f
    198a:	7c1c                	flw	fa5,56(s0)
    198c:	8e000003          	lb	zero,-1824(zero) # fffff8e0 <_stack_start+0xfffef8e0>
    1990:	0d000003          	lb	zero,208(zero) # d0 <array_add+0x3e>
    1994:	8b00                	0x8b00
    1996:	f300                	fsw	fs0,32(a4)
    1998:	5d01                	li	s10,-32
    199a:	2432                	fld	fs0,264(sp)
    199c:	f0090f23          	sb	zero,-226(s2)
    19a0:	1c1a                	slli	s8,s8,0x26
    19a2:	039a                	slli	t2,t2,0x6
    19a4:	0000                	unimp
    19a6:	0400                	addi	s0,sp,512
    19a8:	0000                	unimp
    19aa:	0002                	c.slli64	zero
    19ac:	0072                	c.slli	zero,0x1c
	...
    19b6:	02be                	slli	t0,t0,0xf
    19b8:	0000                	unimp
    19ba:	031e                	slli	t1,t1,0x7
    19bc:	0000                	unimp
    19be:	0001                	nop
    19c0:	1e69                	addi	t3,t3,-6
    19c2:	26000003          	lb	zero,608(zero) # 260 <polymult+0x2>
    19c6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    19ca:	8200                	0x8200
    19cc:	9f7f                	0x9f7f
    19ce:	0326                	slli	t1,t1,0x9
    19d0:	0000                	unimp
    19d2:	034a                	slli	t1,t1,0x12
    19d4:	0000                	unimp
    19d6:	0001                	nop
    19d8:	4a69                	li	s4,26
    19da:	7c000003          	lb	zero,1984(zero) # 7c0 <ext_euclid+0xa8>
    19de:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    19e2:	8200                	0x8200
    19e4:	9f7f                	0x9f7f
    19e6:	037c                	addi	a5,sp,396
    19e8:	0000                	unimp
    19ea:	039a                	slli	t2,t2,0x6
    19ec:	0000                	unimp
    19ee:	0006                	c.slli	zero,0x1
    19f0:	315d01f3          	0x315d01f3
    19f4:	9f1c                	0x9f1c
    19f6:	039a                	slli	t2,t2,0x6
    19f8:	0000                	unimp
    19fa:	0400                	addi	s0,sp,512
    19fc:	0000                	unimp
    19fe:	7f820003          	lb	zero,2040(tp) # ffff67f8 <_stack_start+0xfffe67f8>
    1a02:	009f 0000 0000      	0x9f
    1a08:	0000                	unimp
    1a0a:	7600                	flw	fs0,40(a2)
    1a0c:	0002                	c.slli64	zero
    1a0e:	6400                	flw	fs0,8(s0)
    1a10:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a14:	6500                	flw	fs0,8(a0)
    1a16:	0364                	addi	s1,sp,396
    1a18:	0000                	unimp
    1a1a:	0000036f          	jal	t1,1a1a <ti_2+0xe2>
    1a1e:	0001                	nop
    1a20:	6f5c                	flw	fa5,28(a4)
    1a22:	82000003          	lb	zero,-2016(zero) # fffff820 <_stack_start+0xfffef820>
    1a26:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a2a:	6500                	flw	fs0,8(a0)
    1a2c:	0382                	c.slli64	t2
    1a2e:	0000                	unimp
    1a30:	0388                	addi	a0,sp,448
    1a32:	0000                	unimp
    1a34:	0009                	c.nop	2
    1a36:	0088                	addi	a0,sp,64
    1a38:	225d01f3          	0x225d01f3
    1a3c:	1c31                	addi	s8,s8,-20
    1a3e:	889f 0003 9a00      	0x9a000003889f
    1a44:	09000003          	lb	zero,144(zero) # 90 <instr_add+0x4>
    1a48:	9100                	0x9100
    1a4a:	7fbc                	flw	fa5,120(a5)
    1a4c:	f306                	fsw	ft1,164(sp)
    1a4e:	5d01                	li	s10,-32
    1a50:	9f22                	add	t5,t5,s0
    1a52:	039a                	slli	t2,t2,0x6
    1a54:	0000                	unimp
    1a56:	03f4                	addi	a3,sp,460
    1a58:	0000                	unimp
    1a5a:	0001                	nop
    1a5c:	f465                	bnez	s0,1a44 <ti_2+0x10c>
    1a5e:	f9000003          	lb	zero,-112(zero) # ffffff90 <_stack_start+0xfffeff90>
    1a62:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a66:	5c00                	lw	s0,56(s0)
    1a68:	03f9                	addi	t2,t2,30
    1a6a:	0000                	unimp
    1a6c:	0400                	addi	s0,sp,512
    1a6e:	0000                	unimp
    1a70:	0001                	nop
    1a72:	0065                	c.nop	25
    1a74:	0000                	unimp
    1a76:	0000                	unimp
    1a78:	0000                	unimp
    1a7a:	c400                	sw	s0,8(s0)
    1a7c:	0002                	c.slli64	zero
    1a7e:	e900                	fsw	fs0,16(a0)
    1a80:	0002                	c.slli64	zero
    1a82:	0100                	addi	s0,sp,128
    1a84:	5d00                	lw	s0,56(a0)
    1a86:	02e9                	addi	t0,t0,26
    1a88:	0000                	unimp
    1a8a:	0326                	slli	t1,t1,0x9
    1a8c:	0000                	unimp
    1a8e:	bc780003          	lb	zero,-1081(a6)
    1a92:	267f                	0x267f
    1a94:	48000003          	lb	zero,1152(zero) # 480 <polymult2+0x80>
    1a98:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a9c:	5d00                	lw	s0,56(a0)
    1a9e:	0348                	addi	a0,sp,388
    1aa0:	0000                	unimp
    1aa2:	0378                	addi	a4,sp,396
    1aa4:	0000                	unimp
    1aa6:	bc780003          	lb	zero,-1081(a6)
    1aaa:	787f                	0x787f
    1aac:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    1ab0:	0004                	0x4
    1ab2:	0300                	addi	s0,sp,384
    1ab4:	9100                	0x9100
    1ab6:	7fbc                	flw	fa5,120(a5)
	...
    1ac0:	02c4                	addi	s1,sp,324
    1ac2:	0000                	unimp
    1ac4:	031e                	slli	t1,t1,0x7
    1ac6:	0000                	unimp
    1ac8:	0001                	nop
    1aca:	1e69                	addi	t3,t3,-6
    1acc:	26000003          	lb	zero,608(zero) # 260 <polymult+0x2>
    1ad0:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1ad4:	8200                	0x8200
    1ad6:	9f7f                	0x9f7f
    1ad8:	0326                	slli	t1,t1,0x9
    1ada:	0000                	unimp
    1adc:	034a                	slli	t1,t1,0x12
    1ade:	0000                	unimp
    1ae0:	0001                	nop
    1ae2:	4a69                	li	s4,26
    1ae4:	7c000003          	lb	zero,1984(zero) # 7c0 <ext_euclid+0xa8>
    1ae8:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1aec:	8200                	0x8200
    1aee:	9f7f                	0x9f7f
    1af0:	037c                	addi	a5,sp,396
    1af2:	0000                	unimp
    1af4:	039a                	slli	t2,t2,0x6
    1af6:	0000                	unimp
    1af8:	0006                	c.slli	zero,0x1
    1afa:	315d01f3          	0x315d01f3
    1afe:	9f1c                	0x9f1c
    1b00:	039a                	slli	t2,t2,0x6
    1b02:	0000                	unimp
    1b04:	0400                	addi	s0,sp,512
    1b06:	0000                	unimp
    1b08:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0xe0>
    1b0c:	009f 0000 0000      	0x9f
    1b12:	0000                	unimp
    1b14:	3600                	fld	fs0,40(a2)
    1b16:	0001                	nop
    1b18:	8e00                	0x8e00
    1b1a:	0001                	nop
    1b1c:	0100                	addi	s0,sp,128
    1b1e:	5b00                	lw	s0,48(a4)
    1b20:	018e                	slli	gp,gp,0x3
    1b22:	0000                	unimp
    1b24:	0196                	slli	gp,gp,0x5
    1b26:	0000                	unimp
    1b28:	0004                	0x4
    1b2a:	9f5b01f3          	0x9f5b01f3
    1b2e:	0196                	slli	gp,gp,0x5
    1b30:	0000                	unimp
    1b32:	01cc                	addi	a1,sp,196
    1b34:	0000                	unimp
    1b36:	0001                	nop
    1b38:	0000005b          	0x5b
    1b3c:	0000                	unimp
    1b3e:	0000                	unimp
    1b40:	3600                	fld	fs0,40(a2)
    1b42:	0001                	nop
    1b44:	4e00                	lw	s0,24(a2)
    1b46:	0001                	nop
    1b48:	0100                	addi	s0,sp,128
    1b4a:	5c00                	lw	s0,56(s0)
    1b4c:	014e                	slli	sp,sp,0x13
    1b4e:	0000                	unimp
    1b50:	0156                	slli	sp,sp,0x15
    1b52:	0000                	unimp
    1b54:	0004                	0x4
    1b56:	9f5c01f3          	0x9f5c01f3
    1b5a:	0156                	slli	sp,sp,0x15
    1b5c:	0000                	unimp
    1b5e:	0168                	addi	a0,sp,140
    1b60:	0000                	unimp
    1b62:	0001                	nop
    1b64:	685c                	flw	fa5,20(s0)
    1b66:	0001                	nop
    1b68:	7800                	flw	fs0,48(s0)
    1b6a:	0001                	nop
    1b6c:	0400                	addi	s0,sp,512
    1b6e:	f300                	fsw	fs0,32(a4)
    1b70:	5c01                	li	s8,-32
    1b72:	789f 0001 8a00      	0x8a000001789f
    1b78:	0001                	nop
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	5c00                	lw	s0,56(s0)
    1b7e:	018a                	slli	gp,gp,0x2
    1b80:	0000                	unimp
    1b82:	01a8                	addi	a0,sp,200
    1b84:	0000                	unimp
    1b86:	0004                	0x4
    1b88:	9f5c01f3          	0x9f5c01f3
    1b8c:	01a8                	addi	a0,sp,200
    1b8e:	0000                	unimp
    1b90:	01cc                	addi	a1,sp,196
    1b92:	0000                	unimp
    1b94:	0001                	nop
    1b96:	005c                	addi	a5,sp,4
    1b98:	0000                	unimp
    1b9a:	0000                	unimp
    1b9c:	0000                	unimp
    1b9e:	3600                	fld	fs0,40(a2)
    1ba0:	0001                	nop
    1ba2:	5000                	lw	s0,32(s0)
    1ba4:	0001                	nop
    1ba6:	0200                	addi	s0,sp,256
    1ba8:	3000                	fld	fs0,32(s0)
    1baa:	509f 0001 5600      	0x56000001509f
    1bb0:	0001                	nop
    1bb2:	0100                	addi	s0,sp,128
    1bb4:	5f00                	lw	s0,56(a4)
    1bb6:	0156                	slli	sp,sp,0x15
    1bb8:	0000                	unimp
    1bba:	0162                	slli	sp,sp,0x18
    1bbc:	0000                	unimp
    1bbe:	0002                	c.slli64	zero
    1bc0:	9f30                	0x9f30
    1bc2:	0162                	slli	sp,sp,0x18
    1bc4:	0000                	unimp
    1bc6:	016e                	slli	sp,sp,0x1b
    1bc8:	0000                	unimp
    1bca:	0001                	nop
    1bcc:	785f 0001 8400      	0x84000001785f
    1bd2:	0001                	nop
    1bd4:	0200                	addi	s0,sp,256
    1bd6:	3000                	fld	fs0,32(s0)
    1bd8:	849f 0001 8a00      	0x8a000001849f
    1bde:	0001                	nop
    1be0:	0100                	addi	s0,sp,128
    1be2:	5f00                	lw	s0,56(a4)
    1be4:	0196                	slli	gp,gp,0x5
    1be6:	0000                	unimp
    1be8:	01cc                	addi	a1,sp,196
    1bea:	0000                	unimp
    1bec:	0001                	nop
    1bee:	005f 0000 0000      	0x5f
    1bf4:	0000                	unimp
    1bf6:	9a00                	0x9a00
    1bf8:	0001                	nop
    1bfa:	a000                	fsd	fs0,0(s0)
    1bfc:	0001                	nop
    1bfe:	0600                	addi	s0,sp,768
    1c00:	7b00                	flw	fs0,48(a4)
    1c02:	7e00                	flw	fs0,56(a2)
    1c04:	2200                	fld	fs0,0(a2)
    1c06:	a09f 0001 a400      	0xa4000001a09f
    1c0c:	0001                	nop
    1c0e:	0100                	addi	s0,sp,128
    1c10:	5e00                	lw	s0,56(a2)
	...
    1c1a:	019a                	slli	gp,gp,0x6
    1c1c:	0000                	unimp
    1c1e:	019e                	slli	gp,gp,0x7
    1c20:	0000                	unimp
    1c22:	0006                	c.slli	zero,0x1
    1c24:	007a                	c.slli	zero,0x1e
    1c26:	007e                	c.slli	zero,0x1f
    1c28:	9f22                	add	t5,t5,s0
    1c2a:	019e                	slli	gp,gp,0x7
    1c2c:	0000                	unimp
    1c2e:	01a4                	addi	s1,sp,200
    1c30:	0000                	unimp
    1c32:	0001                	nop
    1c34:	005d                	c.nop	23
    1c36:	0000                	unimp
    1c38:	0000                	unimp
    1c3a:	0000                	unimp
    1c3c:	ac00                	fsd	fs0,24(s0)
    1c3e:	0001                	nop
    1c40:	b200                	fsd	fs0,32(a2)
    1c42:	0001                	nop
    1c44:	0600                	addi	s0,sp,768
    1c46:	7b00                	flw	fs0,48(a4)
    1c48:	7e00                	flw	fs0,56(a2)
    1c4a:	2200                	fld	fs0,0(a2)
    1c4c:	b29f 0001 b600      	0xb6000001b29f
    1c52:	0001                	nop
    1c54:	0100                	addi	s0,sp,128
    1c56:	5e00                	lw	s0,56(a2)
	...
    1c60:	01ac                	addi	a1,sp,200
    1c62:	0000                	unimp
    1c64:	01b0                	addi	a2,sp,200
    1c66:	0000                	unimp
    1c68:	0006                	c.slli	zero,0x1
    1c6a:	007a                	c.slli	zero,0x1e
    1c6c:	007e                	c.slli	zero,0x1f
    1c6e:	9f22                	add	t5,t5,s0
    1c70:	01b0                	addi	a2,sp,200
    1c72:	0000                	unimp
    1c74:	01b6                	slli	gp,gp,0xd
    1c76:	0000                	unimp
    1c78:	0001                	nop
    1c7a:	0060                	addi	s0,sp,12
    1c7c:	0000                	unimp
    1c7e:	0000                	unimp
    1c80:	0000                	unimp
    1c82:	be00                	fsd	fs0,56(a2)
    1c84:	0001                	nop
    1c86:	c400                	sw	s0,8(s0)
    1c88:	0001                	nop
    1c8a:	0600                	addi	s0,sp,768
    1c8c:	7b00                	flw	fs0,48(a4)
    1c8e:	7e00                	flw	fs0,56(a2)
    1c90:	2200                	fld	fs0,0(a2)
    1c92:	c49f 0001 c800      	0xc8000001c49f
    1c98:	0001                	nop
    1c9a:	0100                	addi	s0,sp,128
    1c9c:	5e00                	lw	s0,56(a2)
	...
    1ca6:	01be                	slli	gp,gp,0xf
    1ca8:	0000                	unimp
    1caa:	01c2                	slli	gp,gp,0x10
    1cac:	0000                	unimp
    1cae:	0006                	c.slli	zero,0x1
    1cb0:	007a                	c.slli	zero,0x1e
    1cb2:	007e                	c.slli	zero,0x1f
    1cb4:	9f22                	add	t5,t5,s0
    1cb6:	01c2                	slli	gp,gp,0x10
    1cb8:	0000                	unimp
    1cba:	01c8                	addi	a0,sp,196
    1cbc:	0000                	unimp
    1cbe:	0001                	nop
    1cc0:	0060                	addi	s0,sp,12
    1cc2:	0000                	unimp
    1cc4:	0000                	unimp
    1cc6:	0000                	unimp
    1cc8:	9200                	0x9200
    1cca:	0000                	unimp
    1ccc:	ee00                	fsw	fs0,24(a2)
    1cce:	0000                	unimp
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	5a00                	lw	s0,48(a2)
    1cd4:	00ee                	slli	ra,ra,0x1b
    1cd6:	0000                	unimp
    1cd8:	00fa                	slli	ra,ra,0x1e
    1cda:	0000                	unimp
    1cdc:	0004                	0x4
    1cde:	9f5a01f3          	0x9f5a01f3
    1ce2:	00fa                	slli	ra,ra,0x1e
    1ce4:	0000                	unimp
    1ce6:	0130                	addi	a2,sp,136
    1ce8:	0000                	unimp
    1cea:	0001                	nop
    1cec:	005a                	c.slli	zero,0x16
    1cee:	0000                	unimp
    1cf0:	0000                	unimp
    1cf2:	0000                	unimp
    1cf4:	9200                	0x9200
    1cf6:	0000                	unimp
    1cf8:	aa00                	fsd	fs0,16(a2)
    1cfa:	0000                	unimp
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	5c00                	lw	s0,56(s0)
    1d00:	00aa                	slli	ra,ra,0xa
    1d02:	0000                	unimp
    1d04:	00b2                	slli	ra,ra,0xc
    1d06:	0000                	unimp
    1d08:	0004                	0x4
    1d0a:	9f5c01f3          	0x9f5c01f3
    1d0e:	00b2                	slli	ra,ra,0xc
    1d10:	0000                	unimp
    1d12:	00c4                	addi	s1,sp,68
    1d14:	0000                	unimp
    1d16:	0001                	nop
    1d18:	c45c                	sw	a5,12(s0)
    1d1a:	0000                	unimp
    1d1c:	d800                	sw	s0,48(s0)
    1d1e:	0000                	unimp
    1d20:	0400                	addi	s0,sp,512
    1d22:	f300                	fsw	fs0,32(a4)
    1d24:	5c01                	li	s8,-32
    1d26:	d89f 0000 ea00      	0xea000000d89f
    1d2c:	0000                	unimp
    1d2e:	0100                	addi	s0,sp,128
    1d30:	5c00                	lw	s0,56(s0)
    1d32:	00ea                	slli	ra,ra,0x1a
    1d34:	0000                	unimp
    1d36:	010c                	addi	a1,sp,128
    1d38:	0000                	unimp
    1d3a:	0004                	0x4
    1d3c:	9f5c01f3          	0x9f5c01f3
    1d40:	010c                	addi	a1,sp,128
    1d42:	0000                	unimp
    1d44:	0130                	addi	a2,sp,136
    1d46:	0000                	unimp
    1d48:	0001                	nop
    1d4a:	005c                	addi	a5,sp,4
    1d4c:	0000                	unimp
    1d4e:	0000                	unimp
    1d50:	0000                	unimp
    1d52:	9200                	0x9200
    1d54:	0000                	unimp
    1d56:	ac00                	fsd	fs0,24(s0)
    1d58:	0000                	unimp
    1d5a:	0200                	addi	s0,sp,256
    1d5c:	3000                	fld	fs0,32(s0)
    1d5e:	ac9f 0000 b200      	0xb2000000ac9f
    1d64:	0000                	unimp
    1d66:	0100                	addi	s0,sp,128
    1d68:	5f00                	lw	s0,56(a4)
    1d6a:	00b2                	slli	ra,ra,0xc
    1d6c:	0000                	unimp
    1d6e:	00be                	slli	ra,ra,0xf
    1d70:	0000                	unimp
    1d72:	0002                	c.slli64	zero
    1d74:	9f30                	0x9f30
    1d76:	00be                	slli	ra,ra,0xf
    1d78:	0000                	unimp
    1d7a:	00d0                	addi	a2,sp,68
    1d7c:	0000                	unimp
    1d7e:	0001                	nop
    1d80:	d85f 0000 e400      	0xe4000000d85f
    1d86:	0000                	unimp
    1d88:	0200                	addi	s0,sp,256
    1d8a:	3000                	fld	fs0,32(s0)
    1d8c:	e49f 0000 ea00      	0xea000000e49f
    1d92:	0000                	unimp
    1d94:	0100                	addi	s0,sp,128
    1d96:	5f00                	lw	s0,56(a4)
    1d98:	00fa                	slli	ra,ra,0x1e
    1d9a:	0000                	unimp
    1d9c:	0130                	addi	a2,sp,136
    1d9e:	0000                	unimp
    1da0:	0001                	nop
    1da2:	005f 0000 0000      	0x5f
    1da8:	0000                	unimp
    1daa:	fe00                	fsw	fs0,56(a2)
    1dac:	0000                	unimp
    1dae:	0400                	addi	s0,sp,512
    1db0:	0001                	nop
    1db2:	0600                	addi	s0,sp,768
    1db4:	7b00                	flw	fs0,48(a4)
    1db6:	7e00                	flw	fs0,56(a2)
    1db8:	2200                	fld	fs0,0(a2)
    1dba:	049f 0001 0800      	0x8000001049f
    1dc0:	0001                	nop
    1dc2:	0100                	addi	s0,sp,128
    1dc4:	5e00                	lw	s0,56(a2)
	...
    1dce:	00fe                	slli	ra,ra,0x1f
    1dd0:	0000                	unimp
    1dd2:	0102                	c.slli64	sp
    1dd4:	0000                	unimp
    1dd6:	0006                	c.slli	zero,0x1
    1dd8:	007a                	c.slli	zero,0x1e
    1dda:	007e                	c.slli	zero,0x1f
    1ddc:	9f22                	add	t5,t5,s0
    1dde:	0102                	c.slli64	sp
    1de0:	0000                	unimp
    1de2:	0108                	addi	a0,sp,128
    1de4:	0000                	unimp
    1de6:	0001                	nop
    1de8:	005d                	c.nop	23
    1dea:	0000                	unimp
    1dec:	0000                	unimp
    1dee:	0000                	unimp
    1df0:	1000                	addi	s0,sp,32
    1df2:	0001                	nop
    1df4:	1600                	addi	s0,sp,800
    1df6:	0001                	nop
    1df8:	0600                	addi	s0,sp,768
    1dfa:	7b00                	flw	fs0,48(a4)
    1dfc:	7e00                	flw	fs0,56(a2)
    1dfe:	2200                	fld	fs0,0(a2)
    1e00:	169f 0001 1a00      	0x1a000001169f
    1e06:	0001                	nop
    1e08:	0100                	addi	s0,sp,128
    1e0a:	5e00                	lw	s0,56(a2)
	...
    1e14:	0110                	addi	a2,sp,128
    1e16:	0000                	unimp
    1e18:	0114                	addi	a3,sp,128
    1e1a:	0000                	unimp
    1e1c:	0006                	c.slli	zero,0x1
    1e1e:	007a                	c.slli	zero,0x1e
    1e20:	007e                	c.slli	zero,0x1f
    1e22:	9f22                	add	t5,t5,s0
    1e24:	0114                	addi	a3,sp,128
    1e26:	0000                	unimp
    1e28:	011a                	slli	sp,sp,0x6
    1e2a:	0000                	unimp
    1e2c:	0001                	nop
    1e2e:	0060                	addi	s0,sp,12
    1e30:	0000                	unimp
    1e32:	0000                	unimp
    1e34:	0000                	unimp
    1e36:	2200                	fld	fs0,0(a2)
    1e38:	0001                	nop
    1e3a:	2800                	fld	fs0,16(s0)
    1e3c:	0001                	nop
    1e3e:	0600                	addi	s0,sp,768
    1e40:	7b00                	flw	fs0,48(a4)
    1e42:	7e00                	flw	fs0,56(a2)
    1e44:	2200                	fld	fs0,0(a2)
    1e46:	289f 0001 2c00      	0x2c000001289f
    1e4c:	0001                	nop
    1e4e:	0100                	addi	s0,sp,128
    1e50:	5e00                	lw	s0,56(a2)
	...
    1e5a:	0122                	slli	sp,sp,0x8
    1e5c:	0000                	unimp
    1e5e:	0126                	slli	sp,sp,0x9
    1e60:	0000                	unimp
    1e62:	0006                	c.slli	zero,0x1
    1e64:	007a                	c.slli	zero,0x1e
    1e66:	007e                	c.slli	zero,0x1f
    1e68:	9f22                	add	t5,t5,s0
    1e6a:	0126                	slli	sp,sp,0x9
    1e6c:	0000                	unimp
    1e6e:	012c                	addi	a1,sp,136
    1e70:	0000                	unimp
    1e72:	0001                	nop
    1e74:	0060                	addi	s0,sp,12
    1e76:	0000                	unimp
    1e78:	0000                	unimp
    1e7a:	0000                	unimp
    1e7c:	8c00                	0x8c00
    1e7e:	0000                	unimp
    1e80:	9000                	0x9000
    1e82:	0000                	unimp
    1e84:	0100                	addi	s0,sp,128
    1e86:	5a00                	lw	s0,48(a2)
	...
    1e90:	0130                	addi	a2,sp,136
    1e92:	0000                	unimp
    1e94:	0134                	addi	a3,sp,136
    1e96:	0000                	unimp
    1e98:	0001                	nop
    1e9a:	005a                	c.slli	zero,0x16
    1e9c:	0000                	unimp
    1e9e:	0000                	unimp
    1ea0:	0000                	unimp
    1ea2:	cc00                	sw	s0,24(s0)
    1ea4:	0001                	nop
    1ea6:	d000                	sw	s0,32(s0)
    1ea8:	0001                	nop
    1eaa:	0100                	addi	s0,sp,128
    1eac:	5a00                	lw	s0,48(a2)
	...
    1eb6:	01d2                	slli	gp,gp,0x14
    1eb8:	0000                	unimp
    1eba:	0230                	addi	a2,sp,264
    1ebc:	0000                	unimp
    1ebe:	0001                	nop
    1ec0:	0002305b          	0x2305b
    1ec4:	3400                	fld	fs0,40(s0)
    1ec6:	0002                	c.slli64	zero
    1ec8:	0400                	addi	s0,sp,512
    1eca:	f300                	fsw	fs0,32(a4)
    1ecc:	5b01                	li	s6,-32
    1ece:	349f 0002 5e00      	0x5e000002349f
    1ed4:	0002                	c.slli64	zero
    1ed6:	0100                	addi	s0,sp,128
    1ed8:	5b00                	lw	s0,48(a4)
	...
    1ee2:	01d2                	slli	gp,gp,0x14
    1ee4:	0000                	unimp
    1ee6:	01ea                	slli	gp,gp,0x1a
    1ee8:	0000                	unimp
    1eea:	0001                	nop
    1eec:	ea5c                	fsw	fa5,20(a2)
    1eee:	0001                	nop
    1ef0:	f200                	fsw	fs0,32(a2)
    1ef2:	0001                	nop
    1ef4:	0400                	addi	s0,sp,512
    1ef6:	f300                	fsw	fs0,32(a4)
    1ef8:	5c01                	li	s8,-32
    1efa:	f29f 0001 0400      	0x4000001f29f
    1f00:	0002                	c.slli64	zero
    1f02:	0100                	addi	s0,sp,128
    1f04:	5c00                	lw	s0,56(s0)
    1f06:	0204                	addi	s1,sp,256
    1f08:	0000                	unimp
    1f0a:	0214                	addi	a3,sp,256
    1f0c:	0000                	unimp
    1f0e:	0004                	0x4
    1f10:	9f5c01f3          	0x9f5c01f3
    1f14:	0214                	addi	a3,sp,256
    1f16:	0000                	unimp
    1f18:	0226                	slli	tp,tp,0x9
    1f1a:	0000                	unimp
    1f1c:	0001                	nop
    1f1e:	265c                	fld	fa5,136(a2)
    1f20:	0002                	c.slli64	zero
    1f22:	4200                	lw	s0,0(a2)
    1f24:	0002                	c.slli64	zero
    1f26:	0400                	addi	s0,sp,512
    1f28:	f300                	fsw	fs0,32(a4)
    1f2a:	5c01                	li	s8,-32
    1f2c:	429f 0002 5e00      	0x5e000002429f
    1f32:	0002                	c.slli64	zero
    1f34:	0100                	addi	s0,sp,128
    1f36:	5c00                	lw	s0,56(s0)
	...
    1f40:	01d2                	slli	gp,gp,0x14
    1f42:	0000                	unimp
    1f44:	01ec                	addi	a1,sp,204
    1f46:	0000                	unimp
    1f48:	0002                	c.slli64	zero
    1f4a:	9f30                	0x9f30
    1f4c:	01ec                	addi	a1,sp,204
    1f4e:	0000                	unimp
    1f50:	01f2                	slli	gp,gp,0x1c
    1f52:	0000                	unimp
    1f54:	0001                	nop
    1f56:	f25f 0001 2000      	0x20000001f25f
    1f5c:	0002                	c.slli64	zero
    1f5e:	0200                	addi	s0,sp,256
    1f60:	3000                	fld	fs0,32(s0)
    1f62:	209f 0002 2600      	0x26000002209f
    1f68:	0002                	c.slli64	zero
    1f6a:	0100                	addi	s0,sp,128
    1f6c:	5f00                	lw	s0,56(a4)
    1f6e:	0234                	addi	a3,sp,264
    1f70:	0000                	unimp
    1f72:	0250                	addi	a2,sp,260
    1f74:	0000                	unimp
    1f76:	0001                	nop
    1f78:	505f 0002 5e00      	0x5e000002505f
    1f7e:	0002                	c.slli64	zero
    1f80:	0200                	addi	s0,sp,256
    1f82:	3000                	fld	fs0,32(s0)
    1f84:	009f 0000 0000      	0x9f
    1f8a:	0000                	unimp
    1f8c:	3400                	fld	fs0,40(s0)
    1f8e:	0002                	c.slli64	zero
    1f90:	3e00                	fld	fs0,56(a2)
    1f92:	0002                	c.slli64	zero
    1f94:	0100                	addi	s0,sp,128
    1f96:	5b00                	lw	s0,48(a4)
	...
    1fa0:	0234                	addi	a3,sp,264
    1fa2:	0000                	unimp
    1fa4:	023e                	slli	tp,tp,0xf
    1fa6:	0000                	unimp
    1fa8:	0008                	0x8
    1faa:	007f                	0x7f
    1fac:	1e3c                	addi	a5,sp,824
    1fae:	007a                	c.slli	zero,0x1e
    1fb0:	9f22                	add	t5,t5,s0
	...
    1fba:	01fe                	slli	gp,gp,0x1f
    1fbc:	0000                	unimp
    1fbe:	020c                	addi	a1,sp,256
    1fc0:	0000                	unimp
    1fc2:	0001                	nop
    1fc4:	505f 0002 5e00      	0x5e000002505f
    1fca:	0002                	c.slli64	zero
    1fcc:	0100                	addi	s0,sp,128
    1fce:	5f00                	lw	s0,56(a4)
	...
    1fd8:	0250                	addi	a2,sp,260
    1fda:	0000                	unimp
    1fdc:	025a                	slli	tp,tp,0x16
    1fde:	0000                	unimp
    1fe0:	0001                	nop
    1fe2:	0000005b          	0x5b
    1fe6:	0000                	unimp
    1fe8:	0000                	unimp
    1fea:	5000                	lw	s0,32(s0)
    1fec:	0002                	c.slli64	zero
    1fee:	5a00                	lw	s0,48(a2)
    1ff0:	0002                	c.slli64	zero
    1ff2:	0800                	addi	s0,sp,16
    1ff4:	7f00                	flw	fs0,56(a4)
    1ff6:	3c00                	fld	fs0,56(s0)
    1ff8:	7a1e                	flw	fs4,228(sp)
    1ffa:	2200                	fld	fs0,0(a2)
    1ffc:	009f 0000 0000      	0x9f
    2002:	0000                	unimp
    2004:	4200                	lw	s0,0(a2)
    2006:	0002                	c.slli64	zero
    2008:	4c00                	lw	s0,24(s0)
    200a:	0002                	c.slli64	zero
    200c:	0100                	addi	s0,sp,128
    200e:	5b00                	lw	s0,48(a4)
	...
    2018:	0242                	slli	tp,tp,0x10
    201a:	0000                	unimp
    201c:	024c                	addi	a1,sp,260
    201e:	0000                	unimp
    2020:	0008                	0x8
    2022:	007f                	0x7f
    2024:	1e3c                	addi	a5,sp,824
    2026:	007a                	c.slli	zero,0x1e
    2028:	9f22                	add	t5,t5,s0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0cdc                	addi	a5,sp,596
  16:	0000                	unimp
  18:	0f64                	addi	s1,sp,924
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1f30                	addi	a2,sp,952
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d68                	addi	a0,sp,668
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	01ea                	slli	gp,gp,0x1a
   2:	0000                	unimp
   4:	01ec                	addi	a1,sp,204
   6:	0000                	unimp
   8:	0234                	addi	a3,sp,264
   a:	0000                	unimp
   c:	023e                	slli	tp,tp,0xf
	...
  16:	0000                	unimp
  18:	01f2                	slli	gp,gp,0x1c
  1a:	0000                	unimp
  1c:	0214                	addi	a3,sp,256
  1e:	0000                	unimp
  20:	0226                	slli	tp,tp,0x9
  22:	0000                	unimp
  24:	0232                	slli	tp,tp,0xc
  26:	0000                	unimp
  28:	0250                	addi	a2,sp,260
  2a:	0000                	unimp
  2c:	025e                	slli	tp,tp,0x17
	...
  36:	0000                	unimp
  38:	01fc                	addi	a5,sp,204
  3a:	0000                	unimp
  3c:	01fe                	slli	gp,gp,0x1f
  3e:	0000                	unimp
  40:	0250                	addi	a2,sp,260
  42:	0000                	unimp
  44:	025a                	slli	tp,tp,0x16
	...
  4e:	0000                	unimp
  50:	021e                	slli	tp,tp,0x7
  52:	0000                	unimp
  54:	0220                	addi	s0,sp,264
  56:	0000                	unimp
  58:	0242                	slli	tp,tp,0x10
  5a:	0000                	unimp
  5c:	024c                	addi	a1,sp,260
	...
  66:	0000                	unimp
  68:	008c                	addi	a1,sp,64
  6a:	0000                	unimp
  6c:	0d68                	addi	a0,sp,668
  6e:	0000                	unimp
  70:	0f64                	addi	s1,sp,924
  72:	0000                	unimp
  74:	109c                	addi	a5,sp,96
	...
  7e:	0000                	unimp
  80:	ffff                	0xffff
  82:	ffff                	0xffff
  84:	0000                	unimp
  86:	0000                	unimp
  88:	0d68                	addi	a0,sp,668
  8a:	0000                	unimp
    asm volatile(
  8c:	0dde                	slli	s11,s11,0x17
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2326                	fld	ft6,72(sp)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x12>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult+0x102>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x144>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x6c>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult+0x12c>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
      86:	6972                	flw	fs2,28(sp)
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <polydiv+0x196>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x58>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	682e                	flw	fa6,200(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
} //end of function
      f8:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
    asm volatile(
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
            for (i = 0; i < (length / 3); i++) {
     10a:	0305                	addi	t1,t1,1
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	00000907          	0x907
    asm volatile(
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polymult2+0x50>
    asm volatile(
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    asm volatile(
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
}
     134:	0901                	addi	s2,s2,0
    switch(length%3) {
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
            for (i = 0; i < (length / 3); i++) {
     14a:	2505                	jal	76a <ext_euclid+0x52>
     14c:	0e090303          	lb	t1,224(s2)
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
     15e:	0501                	addi	a0,a0,0
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
     164:	0601                	addi	a2,a2,0
            a1[length-1] = a2[length-1];
     166:	00090003          	lb	zero,0(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0x74>
     16e:	06090b03          	lb	s6,96(s2)
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0x46>
     176:	04090003          	lb	zero,64(s2)
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0100                	addi	s0,sp,128
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
     182:	0100                	addi	s0,sp,128
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
            a1[length-1] = a2[length-1];
     188:	0104                	addi	s1,sp,128
            a1[length-2] = a2[length-2];
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
     18e:	0004                	0x4
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
} //end of function
     194:	0402                	c.slli64	s0
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
    asm volatile(
     19c:	0100                	addi	s0,sp,128
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0)
            for (i = 0; i < (length / 3); i++) {
     1a4:	0501                	addi	a0,a0,0
     1a6:	061e                	slli	a2,a2,0x7
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1a8:	00090003          	lb	zero,0(s2)
    asm volatile(
     1ac:	0100                	addi	s0,sp,128
     1ae:	2d05                	jal	7de <ext_euclid+0xc6>
     1b0:	08090003          	lb	zero,128(s2)
     1b4:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-1) / 3); i++) {
     1b6:	2905                	jal	5e6 <polydiv+0x88>
     1b8:	04090003          	lb	zero,64(s2)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     1bc:	0100                	addi	s0,sp,128
    asm volatile(
     1be:	1a05                	addi	s4,s4,-31
     1c0:	06090003          	lb	zero,96(s2)
     1c4:	0100                	addi	s0,sp,128
     1c6:	2505                	jal	7e6 <ext_euclid+0xce>
            for (i = 0; i < ((length-2) / 3); i++) {
     1c8:	04097703          	0x4097703
    asm volatile(
     1cc:	0100                	addi	s0,sp,128
     1ce:	2905                	jal	5fe <polydiv+0xa0>
}
     1d0:	04090003          	lb	zero,64(s2)
    switch(length%3) {
     1d4:	0100                	addi	s0,sp,128
     1d6:	1405                	addi	s0,s0,-31
     1d8:	04090003          	lb	zero,64(s2)
     1dc:	0100                	addi	s0,sp,128
     1de:	1905                	addi	s2,s2,-31
     1e0:	0200                	addi	s0,sp,256
     1e2:	0104                	addi	s1,sp,128
     1e4:	0306                	slli	t1,t1,0x1
            for (i = 0; i < (length / 3); i++) {
     1e6:	0900                	addi	s0,sp,144
     1e8:	0004                	0x4
    asm volatile(
     1ea:	0501                	addi	a0,a0,0
            for (i = 0; i < (length / 3); i++) {
     1ec:	000d                	c.nop	3
     1ee:	0402                	c.slli64	s0
     1f0:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-2) / 3); i++) {
     1f2:	00090003          	lb	zero,0(s2)
     1f6:	0100                	addi	s0,sp,128
     1f8:	0306                	slli	t1,t1,0x1
     1fa:	00040903          	lb	s2,0(s0)
     1fe:	0501                	addi	a0,a0,0
     200:	061e                	slli	a2,a2,0x7
            a1[length-1] = a1[length-1] % mod;
     202:	00090003          	lb	zero,0(s2)
     206:	0100                	addi	s0,sp,128
     208:	0d05                	addi	s10,s10,1
     20a:	0306                	slli	t1,t1,0x1
     20c:	00020907          	0x20907
     210:	0501                	addi	a0,a0,0
     212:	061e                	slli	a2,a2,0x7
            for (i = 0; i < ((length-1) / 3); i++) {
     214:	00090003          	lb	zero,0(s2)
     218:	0100                	addi	s0,sp,128
     21a:	2d05                	jal	84a <ext_euclid+0x132>
     21c:	04090003          	lb	zero,64(s2)
     220:	0100                	addi	s0,sp,128
     222:	2905                	jal	652 <polydiv+0xf4>
            a1[length-1] = a1[length-1] % mod;
     224:	02090003          	lb	zero,32(s2)
            a1[length-2] = a1[length-2] % mod;
     228:	0100                	addi	s0,sp,128
     22a:	1a05                	addi	s4,s4,-31
     22c:	06090003          	lb	zero,96(s2)
     230:	0100                	addi	s0,sp,128
} //end of function
     232:	0605                	addi	a2,a2,1
    asm volatile(
     234:	0306                	slli	t1,t1,0x1
     236:	0901                	addi	s2,s2,0
     238:	0002                	c.slli64	zero
     23a:	0501                	addi	a0,a0,0
     23c:	0601                	addi	a2,a2,0
            for (i = 0; i < (length / 3); i++) {
     23e:	00090203          	lb	tp,0(s2)
    asm volatile(
     242:	0100                	addi	s0,sp,128
     244:	1105                	addi	sp,sp,-31
     246:	0200                	addi	s0,sp,256
     248:	0304                	addi	s1,sp,384
     24a:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-1) / 3); i++) {
     24c:	0002096f          	jal	s2,2024c <_stack_start+0x1024c>
    asm volatile(
     250:	0501                	addi	a0,a0,0
     252:	0005                	c.nop	1
     254:	0402                	c.slli64	s0
     256:	096d0303          	lb	t1,150(s10)
            for (i = 0; i < ((length-2) / 3); i++) {
     25a:	0004                	0x4
     25c:	0001                	nop
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     25e:	0402                	c.slli64	s0
     260:	09090303          	lb	t1,144(s2)
     264:	000a                	c.slli	zero,0x2
     266:	0501                	addi	a0,a0,0
     268:	0402002b          	0x402002b
    int line[size_b][size_a + size_b];
     26c:	09090303          	lb	t1,144(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     270:	0000                	unimp
    int line[size_b][size_a + size_b];
     272:	0501                	addi	a0,a0,0
     274:	002c                	addi	a1,sp,8
     276:	0402                	c.slli64	s0
     278:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     27c:	0009                	c.nop	2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     27e:	0100                	addi	s0,sp,128
     280:	1105                	addi	sp,sp,-31
     282:	0200                	addi	s0,sp,256
     284:	0304                	addi	s1,sp,384
     286:	0306                	slli	t1,t1,0x1
     288:	0906                	slli	s2,s2,0x1
     28a:	0004                	0x4
     28c:	0501                	addi	a0,a0,0
     28e:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     290:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     292:	09680303          	lb	t1,150(a6)
    int line[size_b][size_a + size_b];
     296:	0004                	0x4
     298:	0001                	nop
    int pola[size_a];
     29a:	0402                	c.slli64	s0
     29c:	09090303          	lb	t1,144(s2)
     2a0:	000a                	c.slli	zero,0x2
    int line[size_b][size_a + size_b];
     2a2:	0501                	addi	a0,a0,0
    int pola[size_a];
     2a4:	0402002f          	0x402002f
    int polb[size_b];
     2a8:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
     2ac:	0000                	unimp
    int pola[size_a];
     2ae:	0501                	addi	a0,a0,0
    int polb[size_b];
     2b0:	0030                	addi	a2,sp,8
     2b2:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     2b4:	00030603          	lb	a2,0(t1)
     2b8:	0009                	c.nop	2
    int line[size_b][size_a + size_b];
     2ba:	0100                	addi	s0,sp,128
     2bc:	1105                	addi	sp,sp,-31
    int polb[size_b];
     2be:	0200                	addi	s0,sp,256
    int pola[size_a];
     2c0:	0304                	addi	s1,sp,384
     2c2:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     2c4:	00040907          	0x40907
     2c8:	0501                	addi	a0,a0,0
            product[j] = 0;
     2ca:	0005                	c.nop	1
     2cc:	0402                	c.slli64	s0
     2ce:	09620303          	lb	t1,150(tp) # 1a096 <_stack_start+0xa096>
    for (i = 0; i < size_b; ++i){
     2d2:	0004                	0x4
     2d4:	0001                	nop
    array_equ(pola,a,size_a);
     2d6:	0402                	c.slli64	s0
     2d8:	09090303          	lb	t1,144(s2)
     2dc:	000a                	c.slli	zero,0x2
     2de:	0501                	addi	a0,a0,0
     2e0:	0402002f          	0x402002f
     2e4:	09140303          	lb	t1,145(s0)
     2e8:	0000                	unimp
    array_mod(pola,mod,size_a);
     2ea:	0501                	addi	a0,a0,0
     2ec:	0030                	addi	a2,sp,8
     2ee:	0402                	c.slli64	s0
     2f0:	00030603          	lb	a2,0(t1)
    array_equ(polb,b,size_b);
     2f4:	0009                	c.nop	2
     2f6:	0100                	addi	s0,sp,128
     2f8:	3305                	jal	18 <__DYNAMIC+0x18>
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	090a                	slli	s2,s2,0x2
    array_mod(polb,mod,size_b);
     2fe:	0004                	0x4
     300:	0501                	addi	a0,a0,0
     302:	0305                	addi	t1,t1,1
     304:	0906                	slli	s2,s2,0x1
    if(star_mult == 1){
     306:	0000                	unimp
     308:	0301                	addi	t1,t1,0
     30a:	0909                	addi	s2,s2,2
     30c:	0004                	0x4
     30e:	0501                	addi	a0,a0,0
     310:	0601                	addi	a2,a2,0
     312:	00090203          	lb	tp,0(s2)
     316:	0100                	addi	s0,sp,128
     318:	2c05                	jal	548 <polymult2+0x148>
     31a:	0306                	slli	t1,t1,0x1
     31c:	0901                	addi	s2,s2,0
        for (j = size_b -1; j >= 0; j = j-1){
     31e:	0002                	c.slli64	zero
     320:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     322:	0301                	addi	t1,t1,0
     324:	0901                	addi	s2,s2,0
            product[j] = 0;
     326:	0000                	unimp
     328:	0501                	addi	a0,a0,0
     32a:	0305                	addi	t1,t1,1
            line[i][j] = 0;
     32c:	0901                	addi	s2,s2,0
     32e:	0000                	unimp
            product[j] = 0;
     330:	0501                	addi	a0,a0,0
     332:	0612                	slli	a2,a2,0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     334:	00090003          	lb	zero,0(s2)
     338:	0100                	addi	s0,sp,128
     33a:	0505                	addi	a0,a0,1
    for (i = 0; i < size_b; ++i){
     33c:	06090003          	lb	zero,96(s2)
     340:	0100                	addi	s0,sp,128
     342:	2505                	jal	962 <generate_keys+0x36>
        for(j = 0; j < size_a + size_b -1; ++j){
     344:	0e090303          	lb	t1,224(s2)
    if(star_mult == 1){
     348:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     34a:	1905                	addi	s2,s2,-31
     34c:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
     34e:	0104                	addi	s1,sp,128
    for (i = 0; i < size_b; ++i){
     350:	0306                	slli	t1,t1,0x1
     352:	0900                	addi	s0,sp,144
    for(i = 0; i < size_b; ++i){
     354:	0006                	c.slli	zero,0x1
		array_add(product,line[i],size_a+size_b-1);
     356:	0501                	addi	a0,a0,0
     358:	000d                	c.nop	3
     35a:	0402                	c.slli64	s0
     35c:	0601                	addi	a2,a2,0
     35e:	00090003          	lb	zero,0(s2)
    for(i = 0; i < size_b; ++i){
     362:	0100                	addi	s0,sp,128
    array_mod(product,mod,(size_a+size_b-1));
     364:	2505                	jal	984 <generate_keys+0x58>
     366:	06090b03          	lb	s6,96(s2)
     36a:	0100                	addi	s0,sp,128
     36c:	2905                	jal	79c <ext_euclid+0x84>
     36e:	04090003          	lb	zero,64(s2)
}
     372:	0100                	addi	s0,sp,128
     374:	1405                	addi	s0,s0,-31
     376:	04090003          	lb	zero,64(s2)
     37a:	0100                	addi	s0,sp,128
     37c:	1905                	addi	s2,s2,-31
     37e:	0200                	addi	s0,sp,256
     380:	0104                	addi	s1,sp,128
     382:	0306                	slli	t1,t1,0x1
     384:	0900                	addi	s0,sp,144
     386:	0004                	0x4
     388:	0501                	addi	a0,a0,0
     38a:	000d                	c.nop	3
     38c:	0402                	c.slli64	s0
     38e:	0601                	addi	a2,a2,0
     390:	00090003          	lb	zero,0(s2)
     394:	0100                	addi	s0,sp,128
     396:	0306                	slli	t1,t1,0x1
     398:	00040903          	lb	s2,0(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0501                	addi	a0,a0,0
     39e:	061e                	slli	a2,a2,0x7
     3a0:	00090003          	lb	zero,0(s2)
     3a4:	0100                	addi	s0,sp,128
     3a6:	1a05                	addi	s4,s4,-31
     3a8:	0a090003          	lb	zero,160(s2)
     3ac:	0100                	addi	s0,sp,128
     3ae:	2505                	jal	9ce <generate_keys+0xa2>
     3b0:	08097703          	0x8097703
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     3b6:	2905                	jal	7e6 <ext_euclid+0xce>
     3b8:	04090003          	lb	zero,64(s2)
     3bc:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3be:	1405                	addi	s0,s0,-31
     3c0:	04090003          	lb	zero,64(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c4:	0100                	addi	s0,sp,128
     3c6:	1905                	addi	s2,s2,-31
     3c8:	0200                	addi	s0,sp,256
     3ca:	0104                	addi	s1,sp,128
     3cc:	0306                	slli	t1,t1,0x1
     3ce:	0900                	addi	s0,sp,144
     3d0:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d2:	0501                	addi	a0,a0,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3d4:	000d                	c.nop	3
     3d6:	0402                	c.slli64	s0
     3d8:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3da:	00090003          	lb	zero,0(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     3de:	0100                	addi	s0,sp,128
     3e0:	0306                	slli	t1,t1,0x1
     3e2:	00040903          	lb	s2,0(s0)
	array_mod(line[i],mod,size_a+size_b-1);
     3e6:	0501                	addi	a0,a0,0
     3e8:	061e                	slli	a2,a2,0x7
     3ea:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     3ee:	0100                	addi	s0,sp,128
     3f0:	0d05                	addi	s10,s10,1
     3f2:	0306                	slli	t1,t1,0x1
		array_add(product,line[i],size_a+size_b-1);
     3f4:	00020907          	0x20907
     3f8:	0501                	addi	a0,a0,0
    for(i = 0; i < size_b; ++i){
     3fa:	061e                	slli	a2,a2,0x7
     3fc:	00090003          	lb	zero,0(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     400:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     402:	1a05                	addi	s4,s4,-31
     404:	06090003          	lb	zero,96(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     408:	0100                	addi	s0,sp,128
     40a:	0605                	addi	a2,a2,1
     40c:	0306                	slli	t1,t1,0x1
     40e:	0901                	addi	s2,s2,0
    int line[size_b][size_a + size_b];
     410:	0004                	0x4
     412:	0501                	addi	a0,a0,0
     414:	0601                	addi	a2,a2,0
     416:	00090203          	lb	tp,0(s2)
     41a:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     41c:	1105                	addi	sp,sp,-31
     41e:	0200                	addi	s0,sp,256
     420:	0304                	addi	s1,sp,384
     422:	0306                	slli	t1,t1,0x1
     424:	0002096f          	jal	s2,20424 <_stack_start+0x10424>
     428:	0501                	addi	a0,a0,0
     42a:	0005                	c.nop	1
     42c:	0402                	c.slli64	s0
    int line[size_b][size_a + size_b];
     42e:	096e0303          	lb	t1,150(t3)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     432:	0004                	0x4
    int line[size_b][size_a + size_b];
     434:	0001                	nop
     436:	0402                	c.slli64	s0
     438:	09090303          	lb	t1,144(s2)
    int pola[size_a];
     43c:	000a                	c.slli	zero,0x2
     43e:	0501                	addi	a0,a0,0
     440:	0402002b          	0x402002b
     444:	09080303          	lb	t1,144(a6)
    int polb[size_b];
     448:	0000                	unimp
     44a:	0501                	addi	a0,a0,0
     44c:	002c                	addi	a1,sp,8
    int pola[size_a];
     44e:	0402                	c.slli64	s0
    int polb[size_b];
     450:	00030603          	lb	a2,0(t1)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     454:	0009                	c.nop	2
     456:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     458:	1105                	addi	sp,sp,-31
     45a:	0200                	addi	s0,sp,256
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     45c:	0304                	addi	s1,sp,384
    int pola[size_a];
     45e:	0306                	slli	t1,t1,0x1
     460:	0906                	slli	s2,s2,0x1
    int polb[size_b];
     462:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     464:	0501                	addi	a0,a0,0
     466:	0005                	c.nop	1
     468:	0402                	c.slli64	s0
            product2[j] = 0;
     46a:	09690303          	lb	t1,150(s2)
     46e:	0004                	0x4
     470:	0001                	nop
    for (i = 0; i < size_b; ++i){
     472:	0402                	c.slli64	s0
     474:	09090303          	lb	t1,144(s2)
    array_equ(pola,a,size_a);
     478:	000a                	c.slli	zero,0x2
     47a:	0501                	addi	a0,a0,0
     47c:	0402002f          	0x402002f
     480:	090d0303          	lb	t1,144(s10)
    array_equ(polb,b,size_b);
     484:	0000                	unimp
     486:	0501                	addi	a0,a0,0
     488:	0030                	addi	a2,sp,8
     48a:	0402                	c.slli64	s0
     48c:	00030603          	lb	a2,0(t1)
    if(star_mult == 1){
     490:	0009                	c.nop	2
     492:	0100                	addi	s0,sp,128
     494:	1105                	addi	sp,sp,-31
     496:	0200                	addi	s0,sp,256
     498:	0304                	addi	s1,sp,384
     49a:	0306                	slli	t1,t1,0x1
     49c:	00040907          	0x40907
        for (j = size_b -1; j >= 0; j = j-1){
     4a0:	0501                	addi	a0,a0,0
     4a2:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a4:	0402                	c.slli64	s0
     4a6:	09630303          	lb	t1,150(t1)
            product2[j] = 0;
     4aa:	0004                	0x4
     4ac:	0001                	nop
            line[i][j] = 0;
     4ae:	0402                	c.slli64	s0
     4b0:	09090303          	lb	t1,144(s2)
            product2[j] = 0;
     4b4:	000a                	c.slli	zero,0x2
        for(j = 0; j < size_a + size_b -1; ++j){
     4b6:	0501                	addi	a0,a0,0
     4b8:	0402002f          	0x402002f
     4bc:	09130303          	lb	t1,145(t1)
    for (i = 0; i < size_b; ++i){
     4c0:	0000                	unimp
     4c2:	0501                	addi	a0,a0,0
     4c4:	0030                	addi	a2,sp,8
        for(j = 0; j < size_a + size_b -1; ++j){
     4c6:	0402                	c.slli64	s0
     4c8:	00030603          	lb	a2,0(t1)
                line[size_b-1-j][k] = pola[k]*polb[j];
     4cc:	0009                	c.nop	2
     4ce:	0100                	addi	s0,sp,128
     4d0:	3405                	jal	fffffef0 <_stack_start+0xfffefef0>
     4d2:	0306                	slli	t1,t1,0x1
     4d4:	0909                	addi	s2,s2,2
     4d6:	0004                	0x4
     4d8:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     4da:	0305                	addi	t1,t1,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     4dc:	0902                	c.slli64	s2
     4de:	0000                	unimp
     4e0:	0301                	addi	t1,t1,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     4e2:	0909                	addi	s2,s2,2
     4e4:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     4e6:	0501                	addi	a0,a0,0
     4e8:	0601                	addi	a2,a2,0
     4ea:	00090103          	lb	sp,0(s2)
     4ee:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     4f0:	2c05                	jal	720 <ext_euclid+0x8>
	   array_add(product2,line[i],size_a+size_b-1);
     4f2:	0306                	slli	t1,t1,0x1
     4f4:	0901                	addi	s2,s2,0
     4f6:	0002                	c.slli64	zero
     4f8:	0501                	addi	a0,a0,0
    for(i=0;i<size_b;++i){
     4fa:	0301                	addi	t1,t1,0
     4fc:	0905                	addi	s2,s2,1
}
     4fe:	0000                	unimp
     500:	0501                	addi	a0,a0,0
     502:	0305                	addi	t1,t1,1
     504:	0902                	c.slli64	s2
     506:	0000                	unimp
     508:	0501                	addi	a0,a0,0
     50a:	0612                	slli	a2,a2,0x4
     50c:	00090003          	lb	zero,0(s2)
     510:	0100                	addi	s0,sp,128
     512:	0505                	addi	a0,a0,1
     514:	06090003          	lb	zero,96(s2)
     518:	0100                	addi	s0,sp,128
     51a:	2505                	jal	b3a <generate_keys+0x20e>
     51c:	0e090303          	lb	t1,224(s2)
     520:	0100                	addi	s0,sp,128
     522:	0505                	addi	a0,a0,1
     524:	04096b03          	0x4096b03
            for (k = size_a-1; k >= 0; k = k-1 ){
     528:	0100                	addi	s0,sp,128
     52a:	1905                	addi	s2,s2,-31
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     52c:	0200                	addi	s0,sp,256
     52e:	0104                	addi	s1,sp,128
     530:	0306                	slli	t1,t1,0x1
     532:	0915                	addi	s2,s2,5
     534:	0002                	c.slli64	zero
     536:	0501                	addi	a0,a0,0
     538:	000d                	c.nop	3
     53a:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     53c:	0601                	addi	a2,a2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     53e:	00090003          	lb	zero,0(s2)
     542:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     544:	2505                	jal	b64 <generate_keys+0x238>
     546:	06090b03          	lb	s6,96(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     54a:	0100                	addi	s0,sp,128
     54c:	2905                	jal	97c <generate_keys+0x50>
     54e:	04090003          	lb	zero,64(s2)
	   array_add(product2,line[i],size_a+size_b-1);
     552:	0100                	addi	s0,sp,128
     554:	1405                	addi	s0,s0,-31
     556:	04090003          	lb	zero,64(s2)
    for(i=0;i<size_b;++i){
     55a:	0100                	addi	s0,sp,128
     55c:	0505                	addi	a0,a0,1
    int v[size_N];
     55e:	02096003          	0x2096003
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     562:	0100                	addi	s0,sp,128
    int v[size_N];
     564:	1905                	addi	s2,s2,-31
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     566:	0306                	slli	t1,t1,0x1
     568:	0920                	addi	s0,sp,152
     56a:	0002                	c.slli64	zero
     56c:	0501                	addi	a0,a0,0
     56e:	060d                	addi	a2,a2,3
     570:	00090003          	lb	zero,0(s2)
     574:	0100                	addi	s0,sp,128
     576:	0306                	slli	t1,t1,0x1
     578:	00040903          	lb	s2,0(s0)
     57c:	0501                	addi	a0,a0,0
     57e:	061e                	slli	a2,a2,0x7
    int v[size_N];
     580:	00090003          	lb	zero,0(s2)
     584:	0100                	addi	s0,sp,128
     586:	2905                	jal	9b6 <generate_keys+0x8a>
     588:	08090003          	lb	zero,128(s2)
    int q[size_N];
     58c:	0100                	addi	s0,sp,128
     58e:	1a05                	addi	s4,s4,-31
    int num_temp[size_N];
     590:	06090003          	lb	zero,96(s2)
    int denum_temp[size_D];
     594:	0100                	addi	s0,sp,128
     596:	2505                	jal	bb6 <generate_keys+0x28a>
     598:	04097703          	0x4097703
    int num_temp[size_N];
     59c:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     59e:	2905                	jal	9ce <generate_keys+0xa2>
    int denum_temp[size_D];
     5a0:	04090003          	lb	zero,64(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5a4:	0100                	addi	s0,sp,128
    int v[size_N];
     5a6:	1405                	addi	s0,s0,-31
     5a8:	04090003          	lb	zero,64(s2)
       array_equ(num_temp,num,size_N);
     5ac:	0100                	addi	s0,sp,128
     5ae:	0505                	addi	a0,a0,1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     5b0:	02096603          	0x2096603
    int denum_temp[size_D];
     5b4:	0100                	addi	s0,sp,128
     5b6:	1905                	addi	s2,s2,-31
       array_equ(num_temp,num,size_N);
     5b8:	0200                	addi	s0,sp,256
       array_mod(num_temp, mod, size_N);
     5ba:	0104                	addi	s1,sp,128
     5bc:	0306                	slli	t1,t1,0x1
     5be:	091a                	slli	s2,s2,0x6
     5c0:	0002                	c.slli64	zero
    int denum_temp[size_D];
     5c2:	0501                	addi	a0,a0,0
    array_equ(denum_temp,denum,size_D);
     5c4:	000d                	c.nop	3
     5c6:	0402                	c.slli64	s0
     5c8:	0601                	addi	a2,a2,0
     5ca:	00090003          	lb	zero,0(s2)
    array_mod(denum_temp,mod,size_D);
     5ce:	0100                	addi	s0,sp,128
     5d0:	0306                	slli	t1,t1,0x1
     5d2:	00040903          	lb	s2,0(s0)
    for (i = 0; i < size_N; ++i){
     5d6:	0501                	addi	a0,a0,0
     5d8:	061e                	slli	a2,a2,0x7
    for (i = size_D-1; i >= 0; i = i-1){
     5da:	00090003          	lb	zero,0(s2)
     5de:	0100                	addi	s0,sp,128
     5e0:	0d05                	addi	s10,s10,1
     5e2:	0306                	slli	t1,t1,0x1
     5e4:	00020907          	0x20907
    for (i = 0; i < size_N; ++i){
     5e8:	0501                	addi	a0,a0,0
        if ( (b_N*u)%mod == 1 )
     5ea:	061e                	slli	a2,a2,0x7
    for (u = 0; u < mod; ++u){
     5ec:	00090003          	lb	zero,0(s2)
     5f0:	0100                	addi	s0,sp,128
     5f2:	2905                	jal	a22 <generate_keys+0xf6>
        q[i] = 0;
     5f4:	04090003          	lb	zero,64(s2)
     5f8:	0100                	addi	s0,sp,128
     5fa:	1a05                	addi	s4,s4,-31
        v[i] = 0;
     5fc:	06090003          	lb	zero,96(s2)
        q[i] = 0;
     600:	0100                	addi	s0,sp,128
        v[i] = 0;
     602:	0605                	addi	a2,a2,1
     604:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     606:	0901                	addi	s2,s2,0
     608:	0002                	c.slli64	zero
        if( denum_temp[i] != 0 )
     60a:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     60c:	0601                	addi	a2,a2,0
     60e:	00090203          	lb	tp,0(s2)
        if ( (b_N*u)%mod == 1 )
     612:	0100                	addi	s0,sp,128
     614:	1105                	addi	sp,sp,-31
     616:	0200                	addi	s0,sp,256
     618:	0304                	addi	s1,sp,384
    for (u = 0; u < mod; ++u){
     61a:	0306                	slli	t1,t1,0x1
     61c:	0002096f          	jal	s2,2061c <_stack_start+0x1061c>
    for (i = size_N-1; i >= 0; i = i-1){
     620:	0501                	addi	a0,a0,0
     622:	0005                	c.nop	1
     624:	0402                	c.slli64	s0
     626:	096a0303          	lb	t1,150(s4)
     62a:	0000                	unimp
     62c:	0001                	nop
    while (d >= d2){
     62e:	0402                	c.slli64	s0
     630:	09090303          	lb	t1,144(s2)
      array_equ(result,q,size_N);
     634:	000a                	c.slli	zero,0x2
     636:	0501                	addi	a0,a0,0
     638:	0402002b          	0x402002b
     63c:	090c0303          	lb	t1,144(s8) # 19090 <_stack_start+0x9090>
    for(i = size_N; i < (2*size_N); ++i){
     640:	0000                	unimp
     642:	0501                	addi	a0,a0,0
        result[i] = num_temp[i-size_N];
     644:	002c                	addi	a1,sp,8
     646:	0402                	c.slli64	s0
     648:	00030603          	lb	a2,0(t1)
    for(i = size_N; i < (2*size_N); ++i){
     64c:	0009                	c.nop	2
     64e:	0100                	addi	s0,sp,128
}
     650:	1105                	addi	sp,sp,-31
     652:	0200                	addi	s0,sp,256
     654:	0304                	addi	s1,sp,384
     656:	0306                	slli	t1,t1,0x1
     658:	0906                	slli	s2,s2,0x1
     65a:	0004                	0x4
     65c:	0501                	addi	a0,a0,0
     65e:	0005                	c.nop	1
     660:	0402                	c.slli64	s0
     662:	09650303          	lb	t1,150(a0) # 19096 <_stack_start+0x9096>
     666:	0000                	unimp
     668:	0001                	nop
     66a:	0402                	c.slli64	s0
     66c:	09090303          	lb	t1,144(s2)
     670:	000a                	c.slli	zero,0x2
     672:	0501                	addi	a0,a0,0
     674:	0402002f          	0x402002f
     678:	09110303          	lb	t1,145(sp)
        v[(d-d2)] = u*r_d;
     67c:	0000                	unimp
     67e:	0501                	addi	a0,a0,0
     680:	0030                	addi	a2,sp,8
     682:	0402                	c.slli64	s0
     684:	00030603          	lb	a2,0(t1)
        array_mod(v, mod, size_N);
     688:	0009                	c.nop	2
     68a:	0100                	addi	s0,sp,128
        v[(d-d2)] = u*r_d;
     68c:	1105                	addi	sp,sp,-31
        array_mod(v, mod, size_N);
     68e:	0306                	slli	t1,t1,0x1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     690:	00040907          	0x40907
     694:	0501                	addi	a0,a0,0
     696:	0305                	addi	t1,t1,1
     698:	095f 0000 0301      	0x3010000095f
        array_mod(product, mod, size_N);
     69e:	0909                	addi	s2,s2,2
     6a0:	000a                	c.slli	zero,0x2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     6a2:	0501                	addi	a0,a0,0
        array_mod(product, mod, size_N);
     6a4:	0917032f          	0x917032f
        for (i = 0; i < size_N; ++i){
     6a8:	0000                	unimp
     6aa:	0501                	addi	a0,a0,0
     6ac:	0630                	addi	a2,sp,776
        array_mod(num_temp, mod, size_N);
     6ae:	00090003          	lb	zero,0(s2)
     6b2:	0100                	addi	s0,sp,128
     6b4:	4e05                	li	t3,1
        array_add(q, v, size_N);
     6b6:	0306                	slli	t1,t1,0x1
     6b8:	0004090f          	0x4090f
     6bc:	0501                	addi	a0,a0,0
        array_mod(q, mod, size_N);
     6be:	0305                	addi	t1,t1,1
     6c0:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     6c4:	0501                	addi	a0,a0,0
        for (i = size_N-1; i >= 0; i = i-1){
     6c6:	064e                	slli	a2,a2,0x13
     6c8:	00097d03          	0x97d03
     6cc:	0100                	addi	s0,sp,128
     6ce:	1d05                	addi	s10,s10,-31
     6d0:	0c090303          	lb	t1,192(s2)
     6d4:	0100                	addi	s0,sp,128
     6d6:	4e05                	li	t3,1
            num_temp[i] = num_temp[i] - product[i];
     6d8:	04097d03          	0x4097d03
     6dc:	0100                	addi	s0,sp,128
     6de:	0905                	addi	s2,s2,1
     6e0:	04090303          	lb	t1,64(s2)
        for (i = 0; i < size_N; ++i){
     6e4:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] - product[i];
     6e6:	4e05                	li	t3,1
     6e8:	0c097d03          	0xc097d03
        for (i = 0; i < size_N; ++i){
     6ec:	0100                	addi	s0,sp,128
            if( num_temp[i] != 0 )
     6ee:	0905                	addi	s2,s2,1
        for (i = size_N-1; i >= 0; i = i-1){
     6f0:	12090303          	lb	t1,288(s2)
            v[i] = 0;
     6f4:	0100                	addi	s0,sp,128
     6f6:	4e05                	li	t3,1
     6f8:	02097d03          	0x2097d03
     6fc:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     6fe:	0905                	addi	s2,s2,1
     700:	02090303          	lb	t1,32(s2)
     704:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     706:	4e05                	li	t3,1
     708:	02097d03          	0x2097d03
     70c:	0100                	addi	s0,sp,128
     70e:	0905                	addi	s2,s2,1
     710:	00090303          	lb	t1,0(s2)
    for(i = size_N; i < (2*size_N); ++i){
     714:	0100                	addi	s0,sp,128
     716:	04090303          	lb	t1,64(s2)
    int ri_2[size]; // MX-ring poly, a
     71a:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71c:	08097d03          	0x8097d03
    int ri_2[size]; // MX-ring poly, a
     720:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     722:	02090303          	lb	t1,32(s2)
     726:	0100                	addi	s0,sp,128
     728:	04090103          	lb	sp,64(s2)
     72c:	0100                	addi	s0,sp,128
     72e:	06097f03          	0x6097f03
     732:	0100                	addi	s0,sp,128
     734:	02090103          	lb	sp,32(s2)
     738:	0100                	addi	s0,sp,128
     73a:	4e05                	li	t3,1
     73c:	04097903          	0x4097903
    int ri_2[size]; // MX-ring poly, a
     740:	0100                	addi	s0,sp,128
     742:	0905                	addi	s2,s2,1
    int ri_1[size]; // f-random poly, f[N] = 0, b
     744:	06090303          	lb	t1,96(s2)
     748:	0100                	addi	s0,sp,128
    int ri[size];
     74a:	0505                	addi	a0,a0,1
     74c:	0306                	slli	t1,t1,0x1
     74e:	0901                	addi	s2,s2,0
    int ti_1[size]; // ti_1[0] = 1
     750:	0004                	0x4
     752:	0301                	addi	t1,t1,0
     754:	0901                	addi	s2,s2,0
    int ti[size];
     756:	0000                	unimp
     758:	0301                	addi	t1,t1,0
     75a:	0901                	addi	s2,s2,0
    int qi_1[size];
     75c:	0000                	unimp
     75e:	0501                	addi	a0,a0,0
     760:	0609                	addi	a2,a2,2
    int temp[size];
     762:	00090103          	lb	sp,0(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     766:	0100                	addi	s0,sp,128
     768:	02097f03          	0x2097f03
    int ri_2[size]; // MX-ring poly, a
     76c:	0100                	addi	s0,sp,128
     76e:	0505                	addi	a0,a0,1
    int temp[size];
     770:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size; ++i) {
     772:	0901                	addi	s2,s2,0
        ti_2[i] = 0;
     774:	0004                	0x4
     776:	0301                	addi	t1,t1,0
     778:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size; ++i) {
     77c:	0501                	addi	a0,a0,0
     77e:	060c                	addi	a1,sp,768
    array_equ(ri_2,polyR,size);
     780:	04090003          	lb	zero,64(s2)
     784:	0100                	addi	s0,sp,128
     786:	1805                	addi	a6,a6,-31
    array_equ(ri_1,polyf,size);
     788:	02090303          	lb	t1,32(s2)
     78c:	0100                	addi	s0,sp,128
     78e:	1105                	addi	sp,sp,-31
    ti_1[0] = 1;
     790:	0200                	addi	s0,sp,256
     792:	0104                	addi	s1,sp,128
     794:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     796:	097d                	addi	s2,s2,31
     798:	0008                	0x8
     79a:	0501                	addi	a0,a0,0
     79c:	0005                	c.nop	1
            ti[i] = ti_2[i] - temp[i];
     79e:	0402                	c.slli64	s0
     7a0:	0601                	addi	a2,a2,0
     7a2:	00090003          	lb	zero,0(s2)
    array_mod(ri_2,mod,size);
     7a6:	0100                	addi	s0,sp,128
     7a8:	04090f03          	lb	t5,64(s2)
     7ac:	0100                	addi	s0,sp,128
    array_mod(ri_1,mod,size);
     7ae:	0306                	slli	t1,t1,0x1
     7b0:	0900                	addi	s0,sp,144
     7b2:	000e                	c.slli	zero,0x3
     7b4:	0301                	addi	t1,t1,0
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7b6:	0901                	addi	s2,s2,0
     7b8:	0006                	c.slli	zero,0x1
     7ba:	0301                	addi	t1,t1,0
     7bc:	0909                	addi	s2,s2,2
     7be:	0008                	0x8
     7c0:	0301                	addi	t1,t1,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7c2:	0901                	addi	s2,s2,0
     7c4:	000c                	0xc
     7c6:	0301                	addi	t1,t1,0
     7c8:	0904                	addi	s1,sp,144
     7ca:	0008                	0x8
     7cc:	0501                	addi	a0,a0,0
     7ce:	00030607          	0x30607
        for (i = 0; i < N + 1; ++i) {
     7d2:	0009                	c.nop	2
     7d4:	0100                	addi	s0,sp,128
    array_mod(temp,mod,size);
     7d6:	1d05                	addi	s10,s10,-31
     7d8:	0200                	addi	s0,sp,256
     7da:	0104                	addi	s1,sp,128
     7dc:	0306                	slli	t1,t1,0x1
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7de:	0908                	addi	a0,sp,144
     7e0:	0018                	0x18
     7e2:	0501                	addi	a0,a0,0
     7e4:	0009                	c.nop	2
     7e6:	0402                	c.slli64	s0
     7e8:	0601                	addi	a2,a2,0
     7ea:	00090003          	lb	zero,0(s2)
    array_equ(qi_1,res1,size);
     7ee:	0100                	addi	s0,sp,128
     7f0:	1405                	addi	s0,s0,-31
    array_mod(qi_1,mod,size);
     7f2:	04090103          	lb	sp,64(s2)
     7f6:	0100                	addi	s0,sp,128
     7f8:	0d05                	addi	s10,s10,1
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7fa:	0200                	addi	s0,sp,256
     7fc:	0304                	addi	s1,sp,384
     7fe:	0306                	slli	t1,t1,0x1
     800:	0004095b          	0x4095b
     804:	0501                	addi	a0,a0,0
     806:	0018                	0x18
     808:	0402                	c.slli64	s0
    array_equ(temp,res2,size);
     80a:	01030603          	lb	a2,16(t1)
     80e:	0009                	c.nop	2
    array_mod(temp,mod,size);
     810:	0100                	addi	s0,sp,128
     812:	0200                	addi	s0,sp,256
     814:	0304                	addi	s1,sp,384
     816:	06097f03          	0x6097f03
        for (i = 0; i < N + 1; ++i) {
     81a:	0100                	addi	s0,sp,128
     81c:	0d05                	addi	s10,s10,1
     81e:	0200                	addi	s0,sp,256
    array_mod(ti,mod,size);
     820:	0304                	addi	s1,sp,384
     822:	0306                	slli	t1,t1,0x1
     824:	0901                	addi	s2,s2,0
     826:	0004                	0x4
array_equ(ri_2,ri_1,size);
     828:	0501                	addi	a0,a0,0
     82a:	0018                	0x18
     82c:	0402                	c.slli64	s0
     82e:	00030603          	lb	a2,0(t1)
array_equ(ri_1,ri,size);
     832:	0009                	c.nop	2
     834:	0100                	addi	s0,sp,128
     836:	2c05                	jal	a66 <generate_keys+0x13a>
array_equ(ti_2,ti_1,size);
     838:	0200                	addi	s0,sp,256
     83a:	0304                	addi	s1,sp,384
     83c:	0306                	slli	t1,t1,0x1
     83e:	097e                	slli	s2,s2,0x1f
array_equ(ti_1,ti,size);
     840:	0004                	0x4
     842:	0501                	addi	a0,a0,0
     844:	0014                	0x14
     846:	0402                	c.slli64	s0
        controlR = 0;
     848:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     84a:	0900                	addi	s0,sp,144
     84c:	0004                	0x4
     84e:	0501                	addi	a0,a0,0
    while (controlR != 0) {
     850:	0009                	c.nop	2
     852:	0402                	c.slli64	s0
        for (j = 0; j < mod; ++j) {
     854:	0601                	addi	a2,a2,0
            if (((ri_2[0] * j) % mod) == 1)
     856:	00090003          	lb	zero,0(s2)
        for (j = 0; j < mod; ++j) {
     85a:	0100                	addi	s0,sp,128
     85c:	1d05                	addi	s10,s10,-31
     85e:	0200                	addi	s0,sp,256
     860:	0204                	addi	s1,sp,256
     862:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     864:	097f                	0x97f
     866:	0004                	0x4
    }
     868:	0501                	addi	a0,a0,0
     86a:	0103060f          	0x103060f
     86e:	0809                	addi	a6,a6,2
     870:	0100                	addi	s0,sp,128
     872:	0705                	addi	a4,a4,1
     874:	04091d03          	lh	s10,64(s2)
     878:	0100                	addi	s0,sp,128
     87a:	1d05                	addi	s10,s10,-31
     87c:	0200                	addi	s0,sp,256
     87e:	0104                	addi	s1,sp,128
     880:	0306                	slli	t1,t1,0x1
     882:	0901                	addi	s2,s2,0
     884:	0002                	c.slli64	zero
     886:	0501                	addi	a0,a0,0
     888:	0009                	c.nop	2
     88a:	0402                	c.slli64	s0
     88c:	0601                	addi	a2,a2,0
     88e:	00090003          	lb	zero,0(s2)
        ti_2[i] = 0;
     892:	0100                	addi	s0,sp,128
     894:	1405                	addi	s0,s0,-31
     896:	04090803          	lb	a6,64(s2)
        ti_1[i] = 0;
     89a:	0100                	addi	s0,sp,128
        ti_2[i] = 0;
     89c:	1105                	addi	sp,sp,-31
     89e:	0200                	addi	s0,sp,256
        ti_1[i] = 0;
     8a0:	0104                	addi	s1,sp,128
     8a2:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size; ++i) {
     8a4:	00020907          	0x20907
            ri[i - (N + 1)] = res[i];
     8a8:	0501                	addi	a0,a0,0
     8aa:	0005                	c.nop	1
     8ac:	0402                	c.slli64	s0
     8ae:	0601                	addi	a2,a2,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b0:	00090003          	lb	zero,0(s2)
            ri[i - (N + 1)] = res[i];
     8b4:	0100                	addi	s0,sp,128
     8b6:	0b05                	addi	s6,s6,1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b8:	04090903          	lb	s2,64(s2)
            temp[i] = ri_2[i] - ri[i];
     8bc:	0100                	addi	s0,sp,128
     8be:	0305                	addi	t1,t1,1
     8c0:	02090203          	lb	tp,32(s2)
     8c4:	0100                	addi	s0,sp,128
     8c6:	1005                	c.nop	-31
     8c8:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8ca:	0104                	addi	s1,sp,128
            temp[i] = ri_2[i] - ri[i];
     8cc:	0306                	slli	t1,t1,0x1
     8ce:	097e                	slli	s2,s2,0x1f
        for (i = 0; i < N + 1; ++i) {
     8d0:	0008                	0x8
     8d2:	0501                	addi	a0,a0,0
            ti[i] = ti_2[i] - temp[i];
     8d4:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     8d8:	0601                	addi	a2,a2,0
     8da:	00090203          	lb	tp,0(s2)
     8de:	0100                	addi	s0,sp,128
     8e0:	0505                	addi	a0,a0,1
     8e2:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     8e4:	0104                	addi	s1,sp,128
            ti[i] = ti_2[i] - temp[i];
     8e6:	02097e03          	0x2097e03
        for (i = 0; i < N + 1; ++i) {
     8ea:	0100                	addi	s0,sp,128
     8ec:	0306                	slli	t1,t1,0x1
              qi_1[i] = 0;
     8ee:	0004090b          	0x4090b
     8f2:	0301                	addi	t1,t1,0
     8f4:	0902                	c.slli64	s2
            controlR += ri[i];
     8f6:	000c                	0xc
     8f8:	0301                	addi	t1,t1,0
              qi_1[i] = 0;
     8fa:	0902                	c.slli64	s2
     8fc:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8fe:	0501                	addi	a0,a0,0
            controlR += ri[i];
     900:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     902:	00090103          	lb	sp,0(s2)
            if (((ri_2[0] * j) % mod) == 1)
     906:	0100                	addi	s0,sp,128
     908:	1105                	addi	sp,sp,-31
     90a:	0200                	addi	s0,sp,256
     90c:	0304                	addi	s1,sp,384
     90e:	0306                	slli	t1,t1,0x1
     910:	095a                	slli	s2,s2,0x16
     912:	002a                	c.slli	zero,0xa
        for (j = 0; j < mod; ++j) {
     914:	0501                	addi	a0,a0,0
     916:	0025                	c.nop	9
            ti_2[i] = (ti_2[i] * j) % mod;
     918:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     91a:	00030603          	lb	a2,0(t1)
            ti_2[i] = (ti_2[i] * j) % mod;
     91e:	0409                	addi	s0,s0,2
     920:	0100                	addi	s0,sp,128
     922:	2b05                	jal	e52 <memcpy+0x74>
     924:	0200                	addi	s0,sp,256
     926:	0304                	addi	s1,sp,384
     928:	04090003          	lb	zero,64(s2)
int* generate_keys(int N, int p, int q){
     92c:	0100                	addi	s0,sp,128
     92e:	2e05                	jal	c5e <ntru_encyrpt+0x40>
     930:	0200                	addi	s0,sp,256
     932:	0304                	addi	s1,sp,384
     934:	02090003          	lb	zero,32(s2)
     938:	0100                	addi	s0,sp,128
     93a:	2a05                	jal	a6a <generate_keys+0x13e>
     93c:	0200                	addi	s0,sp,256
     93e:	0304                	addi	s1,sp,384
     940:	06097f03          	0x6097f03
     944:	0100                	addi	s0,sp,128
     946:	2e05                	jal	c76 <ntru_encyrpt+0x58>
     948:	0200                	addi	s0,sp,256
     94a:	0304                	addi	s1,sp,384
     94c:	02090103          	lb	sp,32(s2)
     950:	0100                	addi	s0,sp,128
     952:	2505                	jal	f72 <main+0xe>
     954:	0200                	addi	s0,sp,256
     956:	0304                	addi	s1,sp,384
     958:	04090003          	lb	zero,64(s2)
     95c:	0100                	addi	s0,sp,128
     95e:	2805                	jal	98e <generate_keys+0x62>
     960:	0200                	addi	s0,sp,256
     962:	0304                	addi	s1,sp,384
     964:	0306                	slli	t1,t1,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     966:	097f                	0x97f
     968:	0002                	c.slli64	zero
     96a:	0501                	addi	a0,a0,0
     96c:	0020                	addi	s0,sp,8
     96e:	0402                	c.slli64	s0
     970:	0301                	addi	t1,t1,0
     972:	0900                	addi	s0,sp,144
     974:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     976:	0501                	addi	a0,a0,0
     978:	000d                	c.nop	3
     97a:	0402                	c.slli64	s0
     97c:	0601                	addi	a2,a2,0
     97e:	00090003          	lb	zero,0(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     982:	0100                	addi	s0,sp,128
     984:	2505                	jal	fa4 <main+0x40>
     986:	0200                	addi	s0,sp,256
     988:	0204                	addi	s1,sp,256
     98a:	0306                	slli	t1,t1,0x1
     98c:	097f                	0x97f
     98e:	0004                	0x4
     990:	0501                	addi	a0,a0,0
     992:	04020027          	0x4020027
     996:	0602                	c.slli64	a2
     998:	00090003          	lb	zero,0(s2)
     99c:	0100                	addi	s0,sp,128
     99e:	1405                	addi	s0,s0,-31
     9a0:	08090103          	lb	sp,128(s2)
     9a4:	0100                	addi	s0,sp,128
     9a6:	1105                	addi	sp,sp,-31
     9a8:	0200                	addi	s0,sp,256
     9aa:	0304                	addi	s1,sp,384
     9ac:	0306                	slli	t1,t1,0x1
     9ae:	0908                	addi	a0,sp,144
     9b0:	0004                	0x4
     9b2:	0501                	addi	a0,a0,0
     9b4:	0029                	c.nop	10
     9b6:	0402                	c.slli64	s0
     9b8:	00030603          	lb	a2,0(t1)
     9bc:	0409                	addi	s0,s0,2
     9be:	0100                	addi	s0,sp,128
     9c0:	2f05                	jal	10f0 <__DTOR_END__+0x44>
     9c2:	0200                	addi	s0,sp,256
     9c4:	0304                	addi	s1,sp,384
     9c6:	04090003          	lb	zero,64(s2)
     9ca:	0100                	addi	s0,sp,128
     9cc:	3205                	jal	2ec <polymult+0x8e>
     9ce:	0200                	addi	s0,sp,256
     9d0:	0304                	addi	s1,sp,384
     9d2:	02090003          	lb	zero,32(s2)
     9d6:	0100                	addi	s0,sp,128
     9d8:	2a05                	jal	b08 <generate_keys+0x1dc>
     9da:	0200                	addi	s0,sp,256
     9dc:	0304                	addi	s1,sp,384
     9de:	06097f03          	0x6097f03
     9e2:	0100                	addi	s0,sp,128
     9e4:	3205                	jal	304 <polymult+0xa6>
     9e6:	0200                	addi	s0,sp,256
     9e8:	0304                	addi	s1,sp,384
     9ea:	02090103          	lb	sp,32(s2)
    int polyR[N+1];
     9ee:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f0:	2905                	jal	e20 <memcpy+0x42>
    int polyR[N+1];
     9f2:	0200                	addi	s0,sp,256
     9f4:	0304                	addi	s1,sp,384
     9f6:	04090003          	lb	zero,64(s2)
     9fa:	0100                	addi	s0,sp,128
     9fc:	2805                	jal	a2c <generate_keys+0x100>
     9fe:	0200                	addi	s0,sp,256
    polyR[N] = 1;
     a00:	0304                	addi	s1,sp,384
     a02:	0306                	slli	t1,t1,0x1
     a04:	097f                	0x97f
     a06:	0002                	c.slli64	zero
     a08:	0501                	addi	a0,a0,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0a:	0020                	addi	s0,sp,8
     a0c:	0402                	c.slli64	s0
     a0e:	0301                	addi	t1,t1,0
     a10:	0900                	addi	s0,sp,144
     a12:	0000                	unimp
     a14:	0501                	addi	a0,a0,0
     a16:	000d                	c.nop	3
     a18:	0402                	c.slli64	s0
     a1a:	0601                	addi	a2,a2,0
     a1c:	00090003          	lb	zero,0(s2)
     a20:	0100                	addi	s0,sp,128
     a22:	2505                	jal	1042 <main+0xde>
     a24:	0200                	addi	s0,sp,256
     a26:	0204                	addi	s1,sp,256
     a28:	0306                	slli	t1,t1,0x1
     a2a:	097f                	0x97f
     a2c:	0004                	0x4
     a2e:	0501                	addi	a0,a0,0
     a30:	04020027          	0x4020027
     a34:	0602                	c.slli64	a2
     a36:	00090003          	lb	zero,0(s2)
     a3a:	0100                	addi	s0,sp,128
     a3c:	0205                	addi	tp,tp,1
     a3e:	0200                	addi	s0,sp,256
     a40:	0304                	addi	s1,sp,384
     a42:	0306                	slli	t1,t1,0x1
     a44:	090c                	addi	a1,sp,144
     a46:	0008                	0x8
     a48:	0501                	addi	a0,a0,0
     a4a:	001d                	c.nop	7
     a4c:	0402                	c.slli64	s0
     a4e:	097c0303          	lb	t1,151(s8)
     a52:	0008                	0x8
     a54:	0501                	addi	a0,a0,0
     a56:	04020003          	lb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     a5a:	090b0303          	lb	t1,144(s6)
     a5e:	0006                	c.slli	zero,0x1
     a60:	0501                	addi	a0,a0,0
     a62:	001c                	0x1c
     a64:	0402                	c.slli64	s0
     a66:	097e0303          	lb	t1,151(t3)
     a6a:	0006                	c.slli	zero,0x1
     a6c:	0501                	addi	a0,a0,0
    polyR[0] = -1;
     a6e:	0346                	slli	t1,t1,0x11
     a70:	0912                	slli	s2,s2,0x4
    for(i = 1; i < N; ++i){
     a72:	0006                	c.slli	zero,0x1
     a74:	0501                	addi	a0,a0,0
     a76:	0305                	addi	t1,t1,1
     a78:	0902                	c.slli64	s2
    for (i = N; i < 55; ++i ){
     a7a:	0000                	unimp
     a7c:	0501                	addi	a0,a0,0
     a7e:	0646                	slli	a2,a2,0x11
     a80:	00097e03          	0x97e03
        random_keys[i] = f[i];
     a84:	0100                	addi	s0,sp,128
     a86:	1d05                	addi	s10,s10,-31
     a88:	02090203          	lb	tp,32(s2)
    for(i = 0; i < N; ++i){
     a8c:	0100                	addi	s0,sp,128
     a8e:	4605                	li	a2,1
     a90:	04097e03          	0x4097e03
    for(i = N; i < (2*N); ++i){
     a94:	0100                	addi	s0,sp,128
     a96:	0905                	addi	s2,s2,1
     a98:	0a090203          	lb	tp,160(s2)
        random_keys[i] = g[i-N];
     a9c:	0100                	addi	s0,sp,128
     a9e:	4605                	li	a2,1
     aa0:	0c097e03          	0xc097e03
    for(i = N; i < (2*N); ++i){
     aa4:	0100                	addi	s0,sp,128
     aa6:	0905                	addi	s2,s2,1
    for(i = (2*N); i < (3*N); ++i){
     aa8:	12090203          	lb	tp,288(s2)
     aac:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     aae:	4605                	li	a2,1
     ab0:	02097e03          	0x2097e03
     ab4:	0100                	addi	s0,sp,128
     ab6:	0905                	addi	s2,s2,1
     ab8:	04090203          	lb	tp,64(s2)
        random_keys[i] = fp[i-(2*N)];
     abc:	0100                	addi	s0,sp,128
     abe:	4605                	li	a2,1
     ac0:	02097e03          	0x2097e03
    for(i = (2*N); i < (3*N); ++i){
     ac4:	0100                	addi	s0,sp,128
     ac6:	0905                	addi	s2,s2,1
    fq = ext_euclid(polyR, f, (N+1), q);
     ac8:	00090203          	lb	tp,0(s2)
     acc:	0100                	addi	s0,sp,128
     ace:	04090303          	lb	t1,64(s2)
     ad2:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     ad4:	08097d03          	0x8097d03
     ad8:	0100                	addi	s0,sp,128
     ada:	02090303          	lb	t1,32(s2)
        random_keys[i] = fq[i-(3*N)];
     ade:	0100                	addi	s0,sp,128
     ae0:	04090103          	lb	sp,64(s2)
    for(i = (3*N); i < (4*N); ++i){
     ae4:	0100                	addi	s0,sp,128
     ae6:	06097f03          	0x6097f03
    fg = polymult2(fq, N, g, N, 0);
     aea:	0100                	addi	s0,sp,128
     aec:	02090103          	lb	sp,32(s2)
     af0:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     af2:	4605                	li	a2,1
     af4:	04097a03          	0x4097a03
     af8:	0100                	addi	s0,sp,128
     afa:	0905                	addi	s2,s2,1
     afc:	04090203          	lb	tp,64(s2)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b00:	0100                	addi	s0,sp,128
     b02:	0505                	addi	a0,a0,1
     b04:	0306                	slli	t1,t1,0x1
    for(i = (4*N); i < (5*N); ++i){
     b06:	0901                	addi	s2,s2,0
     b08:	0004                	0x4
     b0a:	0301                	addi	t1,t1,0
     b0c:	0901                	addi	s2,s2,0
     b0e:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b10:	0301                	addi	t1,t1,0
     b12:	0901                	addi	s2,s2,0
     b14:	0000                	unimp
     b16:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     b18:	0646                	slli	a2,a2,0x11
     b1a:	00097b03          	0x97b03
    for(i = (5*N); i < (6*N+1); ++i){
     b1e:	0100                	addi	s0,sp,128
     b20:	0905                	addi	s2,s2,1
        random_keys[i] = polyR[i-(5*N)];
     b22:	02090503          	lb	a0,32(s2)
     b26:	0100                	addi	s0,sp,128
     b28:	0505                	addi	a0,a0,1
    for(i = (5*N); i < (6*N+1); ++i){
     b2a:	0306                	slli	t1,t1,0x1
     b2c:	0901                	addi	s2,s2,0
     b2e:	0004                	0x4
     b30:	0501                	addi	a0,a0,0
     b32:	0609                	addi	a2,a2,2
     b34:	00090003          	lb	zero,0(s2)
}
     b38:	0100                	addi	s0,sp,128
     b3a:	0505                	addi	a0,a0,1
     b3c:	0306                	slli	t1,t1,0x1
     b3e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     b42:	0501                	addi	a0,a0,0
     b44:	060c                	addi	a1,sp,768
     b46:	04090003          	lb	zero,64(s2)
     b4a:	0100                	addi	s0,sp,128
     b4c:	1905                	addi	s2,s2,-31
     b4e:	02090303          	lb	t1,32(s2)
     b52:	0100                	addi	s0,sp,128
     b54:	1105                	addi	sp,sp,-31
     b56:	0200                	addi	s0,sp,256
     b58:	0104                	addi	s1,sp,128
     b5a:	0306                	slli	t1,t1,0x1
     b5c:	097d                	addi	s2,s2,31
     b5e:	0008                	0x8
     b60:	0501                	addi	a0,a0,0
     b62:	0005                	c.nop	1
     b64:	0402                	c.slli64	s0
     b66:	0601                	addi	a2,a2,0
     b68:	00090003          	lb	zero,0(s2)
     b6c:	0100                	addi	s0,sp,128
     b6e:	04090b03          	lb	s6,64(s2)
     b72:	0100                	addi	s0,sp,128
     b74:	0306                	slli	t1,t1,0x1
        polyR[i] = 0;
     b76:	0900                	addi	s0,sp,144
     b78:	000a                	c.slli	zero,0x2
     b7a:	0301                	addi	t1,t1,0
     b7c:	0906                	slli	s2,s2,0x1
     b7e:	0002                	c.slli64	zero
    for(i = 1; i < N; ++i){
     b80:	0301                	addi	t1,t1,0
     b82:	000c0903          	lb	s2,0(s8)
        f[i] = 0;
     b86:	0501                	addi	a0,a0,0
     b88:	00030607          	0x30607
     b8c:	0009                	c.nop	2
     b8e:	0100                	addi	s0,sp,128
     b90:	1d05                	addi	s10,s10,-31
        g[i] = 0;
     b92:	0200                	addi	s0,sp,256
     b94:	0104                	addi	s1,sp,128
     b96:	0306                	slli	t1,t1,0x1
     b98:	0908                	addi	a0,sp,144
     b9a:	0012                	c.slli	zero,0x4
    for (i = N; i < 55; ++i ){
     b9c:	0501                	addi	a0,a0,0
     b9e:	0009                	c.nop	2
        random_keys[i] = f[i];
     ba0:	0402                	c.slli64	s0
     ba2:	0601                	addi	a2,a2,0
     ba4:	00090003          	lb	zero,0(s2)
     ba8:	0100                	addi	s0,sp,128
     baa:	1405                	addi	s0,s0,-31
     bac:	04090103          	lb	sp,64(s2)
    for(i = 0; i < N; ++i){
     bb0:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     bb2:	0d05                	addi	s10,s10,1
    for(i = 0; i < N; ++i){
     bb4:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     bb6:	0304                	addi	s1,sp,384
     bb8:	0306                	slli	t1,t1,0x1
     bba:	0965                	addi	s2,s2,25
     bbc:	0004                	0x4
     bbe:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     bc0:	0019                	c.nop	6
     bc2:	0402                	c.slli64	s0
     bc4:	01030603          	lb	a2,16(t1)
        random_keys[i] = fp[i-(2*N)];
     bc8:	0009                	c.nop	2
     bca:	0100                	addi	s0,sp,128
     bcc:	1805                	addi	a6,a6,-31
     bce:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     bd0:	0304                	addi	s1,sp,384
     bd2:	06097f03          	0x6097f03
        random_keys[i] = fq[i-(3*N)];
     bd6:	0100                	addi	s0,sp,128
     bd8:	0d05                	addi	s10,s10,1
     bda:	0200                	addi	s0,sp,256
     bdc:	0304                	addi	s1,sp,384
     bde:	0306                	slli	t1,t1,0x1
     be0:	0901                	addi	s2,s2,0
     be2:	0004                	0x4
    for(i = (3*N); i < (4*N); ++i){
     be4:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     be6:	0019                	c.nop	6
    for(i = (3*N); i < (4*N); ++i){
     be8:	0402                	c.slli64	s0
        fg[i] = fg[i]*p;
     bea:	00030603          	lb	a2,0(t1)
    for(i = 0; i < (2*N-1); ++i){
     bee:	0009                	c.nop	2
        fg[i] = fg[i]*p;
     bf0:	0100                	addi	s0,sp,128
     bf2:	2c05                	jal	e22 <memcpy+0x44>
     bf4:	0200                	addi	s0,sp,256
     bf6:	0304                	addi	s1,sp,384
    for(i = 0; i < (2*N-1); ++i){
     bf8:	0306                	slli	t1,t1,0x1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bfa:	097e                	slli	s2,s2,0x1f
     bfc:	0004                	0x4
     bfe:	0501                	addi	a0,a0,0
     c00:	0014                	0x14
     c02:	0402                	c.slli64	s0
     c04:	0301                	addi	t1,t1,0
    for(i = (4*N); i < (5*N); ++i){
     c06:	0900                	addi	s0,sp,144
     c08:	0004                	0x4
        random_keys[i] = polyR[i-(5*N)];
     c0a:	0501                	addi	a0,a0,0
     c0c:	0009                	c.nop	2
     c0e:	0402                	c.slli64	s0
     c10:	0601                	addi	a2,a2,0
     c12:	00090003          	lb	zero,0(s2)
     c16:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c18:	1d05                	addi	s10,s10,-31
        random_keys[i] = polyR[i-(5*N)];
     c1a:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     c1c:	0204                	addi	s1,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c1e:	0306                	slli	t1,t1,0x1
     c20:	097f                	0x97f
     c22:	0004                	0x4
     c24:	0501                	addi	a0,a0,0
     c26:	0103060f          	0x103060f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2a:	0809                	addi	a6,a6,2
     c2c:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2e:	1105                	addi	sp,sp,-31
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	0200                	addi	s0,sp,256
     c32:	0304                	addi	s1,sp,384
     c34:	0306                	slli	t1,t1,0x1
     c36:	0916                	slli	s2,s2,0x5
     c38:	0004                	0x4
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c3a:	0501                	addi	a0,a0,0
     c3c:	0025                	c.nop	9
     c3e:	0402                	c.slli64	s0
     c40:	00030603          	lb	a2,0(t1)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c44:	0409                	addi	s0,s0,2
    temp = polymult(public_key,N,random_val,48,q,0);
     c46:	0100                	addi	s0,sp,128
     c48:	2b05                	jal	1178 <__DTOR_END__+0xcc>
     c4a:	0200                	addi	s0,sp,256
     c4c:	0304                	addi	s1,sp,384
     c4e:	04090003          	lb	zero,64(s2)
     c52:	0100                	addi	s0,sp,128
     c54:	2e05                	jal	f84 <main+0x20>
     c56:	0200                	addi	s0,sp,256
array_add(temp,message,48);
     c58:	0304                	addi	s1,sp,384
     c5a:	02090003          	lb	zero,32(s2)
    temp = polymult(public_key,N,random_val,48,q,0);
     c5e:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c60:	2a05                	jal	d90 <reset_handler+0x24>
     c62:	0200                	addi	s0,sp,256
array_add(temp,message,48);
     c64:	0304                	addi	s1,sp,384
     c66:	06097f03          	0x6097f03
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6a:	0100                	addi	s0,sp,128
     c6c:	2e05                	jal	f9c <main+0x38>
     c6e:	0200                	addi	s0,sp,256
     c70:	0304                	addi	s1,sp,384
     c72:	02090103          	lb	sp,32(s2)
    for(i = (2*N); i < (3*N); ++i){
     c76:	0100                	addi	s0,sp,128
     c78:	2505                	jal	1298 <_bss_start+0x68>
     c7a:	0200                	addi	s0,sp,256
     c7c:	0304                	addi	s1,sp,384
     c7e:	04090003          	lb	zero,64(s2)
}
     c82:	0100                	addi	s0,sp,128
     c84:	2805                	jal	cb4 <ntru_deceypt+0x10>
     c86:	0200                	addi	s0,sp,256
     c88:	0304                	addi	s1,sp,384
     c8a:	0306                	slli	t1,t1,0x1
     c8c:	097f                	0x97f
     c8e:	0002                	c.slli64	zero
     c90:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     c92:	0020                	addi	s0,sp,8
     c94:	0402                	c.slli64	s0
     c96:	0301                	addi	t1,t1,0
     c98:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     c9a:	0000                	unimp
     c9c:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     c9e:	000d                	c.nop	3
     ca0:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     ca2:	0601                	addi	a2,a2,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	00090003          	lb	zero,0(s2)
     ca8:	0100                	addi	s0,sp,128
     caa:	2505                	jal	12ca <_bss_start+0x9a>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cac:	0200                	addi	s0,sp,256
     cae:	0204                	addi	s1,sp,256
     cb0:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	097f                	0x97f
     cb4:	0004                	0x4
     cb6:	0501                	addi	a0,a0,0
     cb8:	04020027          	0x4020027
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbc:	0602                	c.slli64	a2
     cbe:	00090003          	lb	zero,0(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	1d05                	addi	s10,s10,-31
     cc6:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	0104                	addi	s1,sp,128
     cca:	0306                	slli	t1,t1,0x1
     ccc:	0900                	addi	s0,sp,144
     cce:	0006                	c.slli	zero,0x1
     cd0:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd2:	0009                	c.nop	2
     cd4:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd6:	0601                	addi	a2,a2,0
     cd8:	00090003          	lb	zero,0(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cdc:	0100                	addi	s0,sp,128
     cde:	1405                	addi	s0,s0,-31
     ce0:	04090803          	lb	a6,64(s2)
     ce4:	0100                	addi	s0,sp,128
     ce6:	0505                	addi	a0,a0,1
     ce8:	02090a03          	lb	s4,32(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cec:	0100                	addi	s0,sp,128
     cee:	0d05                	addi	s10,s10,1
     cf0:	0200                	addi	s0,sp,256
     cf2:	0104                	addi	s1,sp,128
        if(a2[i] <= q/2)
     cf4:	0306                	slli	t1,t1,0x1
     cf6:	097d                	addi	s2,s2,31
     cf8:	0008                	0x8
    for (i = 0; i < N; ++i){
     cfa:	0501                	addi	a0,a0,0
     cfc:	0005                	c.nop	1
     cfe:	0402                	c.slli64	s0
    c = polymult2(secret_key_fp,N,a2,N,0);
     d00:	0601                	addi	a2,a2,0
     d02:	00090003          	lb	zero,0(s2)
     d06:	0100                	addi	s0,sp,128
     d08:	0306                	slli	t1,t1,0x1
     d0a:	00040907          	0x40907
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d0e:	0301                	addi	t1,t1,0
     d10:	0902                	c.slli64	s2
     d12:	0000                	unimp
     d14:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d16:	0601                	addi	a2,a2,0
     d18:	00090103          	lb	sp,0(s2)
}
     d1c:	0100                	addi	s0,sp,128
     d1e:	1405                	addi	s0,s0,-31
     d20:	2a096803          	0x2a096803
     d24:	0100                	addi	s0,sp,128
     d26:	1105                	addi	sp,sp,-31
     d28:	0200                	addi	s0,sp,256
     d2a:	0304                	addi	s1,sp,384
     d2c:	0306                	slli	t1,t1,0x1
     d2e:	0908                	addi	a0,sp,144
     d30:	0004                	0x4
        a2[i-(2*N)] = a2[i];
     d32:	0501                	addi	a0,a0,0
     d34:	0029                	c.nop	10
     d36:	0402                	c.slli64	s0
     d38:	00030603          	lb	a2,0(t1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d3c:	0409                	addi	s0,s0,2
        a2[i-(2*N)] = a2[i];
     d3e:	0100                	addi	s0,sp,128
     d40:	2f05                	jal	1470 <_bss_start+0x240>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d42:	0200                	addi	s0,sp,256
        if(a2[i] <= q/2)
     d44:	0304                	addi	s1,sp,384
     d46:	04090003          	lb	zero,64(s2)
            a2[i] = (-1)*(q-a2[i]);
     d4a:	0100                	addi	s0,sp,128
     d4c:	3205                	jal	66c <polydiv+0x10e>
     d4e:	0200                	addi	s0,sp,256
    for (i = 0; i < N; ++i){
     d50:	0304                	addi	s1,sp,384
     d52:	02090003          	lb	zero,32(s2)
        c2[i-(2*N)] = c2[i];
     d56:	0100                	addi	s0,sp,128
     d58:	2a05                	jal	e88 <memcpy+0xaa>
     d5a:	0200                	addi	s0,sp,256
     d5c:	0304                	addi	s1,sp,384
    for(i = (2*N); i < ((2*N)+N); ++i){
     d5e:	06097f03          	0x6097f03
        c2[i-(2*N)] = c2[i];
     d62:	0100                	addi	s0,sp,128
     d64:	3205                	jal	684 <polydiv+0x126>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d66:	0200                	addi	s0,sp,256
     d68:	0304                	addi	s1,sp,384
     d6a:	02090103          	lb	sp,32(s2)
     d6e:	0100                	addi	s0,sp,128
     d70:	2905                	jal	11a0 <__DTOR_END__+0xf4>
     d72:	0200                	addi	s0,sp,256
     d74:	0304                	addi	s1,sp,384
     d76:	04090003          	lb	zero,64(s2)
     d7a:	0100                	addi	s0,sp,128
     d7c:	2805                	jal	dac <reset_handler+0x40>
     d7e:	0200                	addi	s0,sp,256
     d80:	0304                	addi	s1,sp,384
     d82:	0306                	slli	t1,t1,0x1
     d84:	097f                	0x97f
     d86:	0002                	c.slli64	zero
     d88:	0501                	addi	a0,a0,0
     d8a:	0020                	addi	s0,sp,8
     d8c:	0402                	c.slli64	s0
     d8e:	0301                	addi	t1,t1,0
     d90:	0900                	addi	s0,sp,144
     d92:	0000                	unimp
     d94:	0501                	addi	a0,a0,0
     d96:	000d                	c.nop	3
     d98:	0402                	c.slli64	s0
     d9a:	0601                	addi	a2,a2,0
     d9c:	00090003          	lb	zero,0(s2)
     da0:	0100                	addi	s0,sp,128
     da2:	2505                	jal	13c2 <_bss_start+0x192>
     da4:	0200                	addi	s0,sp,256
     da6:	0204                	addi	s1,sp,256
     da8:	0306                	slli	t1,t1,0x1
     daa:	097f                	0x97f
     dac:	0004                	0x4
     dae:	0501                	addi	a0,a0,0
     db0:	04020027          	0x4020027
     db4:	0602                	c.slli64	a2
     db6:	00090003          	lb	zero,0(s2)
     dba:	0100                	addi	s0,sp,128
     dbc:	0505                	addi	a0,a0,1
     dbe:	0200                	addi	s0,sp,256
     dc0:	0304                	addi	s1,sp,384
     dc2:	0306                	slli	t1,t1,0x1
     dc4:	0008090b          	0x8090b
     dc8:	0501                	addi	a0,a0,0
     dca:	0016                	c.slli	zero,0x5
     dcc:	0402                	c.slli64	s0
     dce:	097d0303          	lb	t1,151(s10)
     dd2:	0008                	0x8
     dd4:	0501                	addi	a0,a0,0
     dd6:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     dda:	0006                	c.slli	zero,0x1
     ddc:	0501                	addi	a0,a0,0
     dde:	0305                	addi	t1,t1,1
     de0:	0902                	c.slli64	s2
     de2:	0000                	unimp
     de4:	0301                	addi	t1,t1,0
     de6:	0901                	addi	s2,s2,0
     de8:	0000                	unimp
     dea:	0301                	addi	t1,t1,0
     dec:	0902                	c.slli64	s2
     dee:	0000                	unimp
     df0:	0501                	addi	a0,a0,0
     df2:	0609                	addi	a2,a2,2
     df4:	00090003          	lb	zero,0(s2)
     df8:	0100                	addi	s0,sp,128
     dfa:	4305                	li	t1,1
     dfc:	04097b03          	0x4097b03
     e00:	0100                	addi	s0,sp,128
     e02:	0905                	addi	s2,s2,1
     e04:	02090503          	lb	a0,32(s2)
     e08:	0100                	addi	s0,sp,128
     e0a:	4305                	li	t1,1
     e0c:	02097b03          	0x2097b03
     e10:	0100                	addi	s0,sp,128
     e12:	0905                	addi	s2,s2,1
     e14:	1a090503          	lb	a0,416(s2)
     e18:	0100                	addi	s0,sp,128
     e1a:	4305                	li	t1,1
     e1c:	02097b03          	0x2097b03
     e20:	0100                	addi	s0,sp,128
     e22:	0905                	addi	s2,s2,1
     e24:	02090503          	lb	a0,32(s2)
     e28:	0100                	addi	s0,sp,128
     e2a:	06090103          	lb	sp,96(s2)
     e2e:	0100                	addi	s0,sp,128
     e30:	06090203          	lb	tp,96(s2)
     e34:	0100                	addi	s0,sp,128
     e36:	04090103          	lb	sp,64(s2)
     e3a:	0100                	addi	s0,sp,128
     e3c:	08097f03          	0x8097f03
     e40:	0100                	addi	s0,sp,128
     e42:	4305                	li	t1,1
     e44:	02097803          	0x2097803
     e48:	0100                	addi	s0,sp,128
     e4a:	0905                	addi	s2,s2,1
     e4c:	02090903          	lb	s2,32(s2)
     e50:	0100                	addi	s0,sp,128
     e52:	4305                	li	t1,1
     e54:	04097703          	0x4097703
     e58:	0100                	addi	s0,sp,128
     e5a:	0905                	addi	s2,s2,1
     e5c:	02090503          	lb	a0,32(s2)
     e60:	0100                	addi	s0,sp,128
     e62:	0505                	addi	a0,a0,1
     e64:	0306                	slli	t1,t1,0x1
     e66:	0901                	addi	s2,s2,0
     e68:	0004                	0x4
     e6a:	0301                	addi	t1,t1,0
     e6c:	0901                	addi	s2,s2,0
     e6e:	0000                	unimp
     e70:	0301                	addi	t1,t1,0
     e72:	0901                	addi	s2,s2,0
     e74:	0000                	unimp
     e76:	0301                	addi	t1,t1,0
     e78:	0901                	addi	s2,s2,0
     e7a:	0000                	unimp
     e7c:	0501                	addi	a0,a0,0
     e7e:	0608                	addi	a0,sp,768
     e80:	00090c03          	lb	s8,0(s2)
     e84:	0100                	addi	s0,sp,128
     e86:	4305                	li	t1,1
     e88:	06096b03          	0x6096b03
     e8c:	0100                	addi	s0,sp,128
     e8e:	0905                	addi	s2,s2,1
     e90:	04090903          	lb	s2,64(s2)
     e94:	0100                	addi	s0,sp,128
     e96:	0805                	addi	a6,a6,1
     e98:	04090c03          	lb	s8,64(s2)
     e9c:	0100                	addi	s0,sp,128
     e9e:	02090403          	lb	s0,32(s2)
     ea2:	0100                	addi	s0,sp,128
     ea4:	0905                	addi	s2,s2,1
     ea6:	08097003          	0x8097003
     eaa:	0100                	addi	s0,sp,128
     eac:	0805                	addi	a6,a6,1
     eae:	0306                	slli	t1,t1,0x1
     eb0:	090c                	addi	a1,sp,144
     eb2:	0002                	c.slli64	zero
     eb4:	0301                	addi	t1,t1,0
     eb6:	0904                	addi	s1,sp,144
     eb8:	0000                	unimp
     eba:	0501                	addi	a0,a0,0
     ebc:	0305                	addi	t1,t1,1
     ebe:	090d                	addi	s2,s2,3
     ec0:	0000                	unimp
     ec2:	0301                	addi	t1,t1,0
     ec4:	0901                	addi	s2,s2,0
     ec6:	0008                	0x8
     ec8:	0301                	addi	t1,t1,0
     eca:	0902                	c.slli64	s2
     ecc:	0008                	0x8
     ece:	0501                	addi	a0,a0,0
     ed0:	060c                	addi	a1,sp,768
     ed2:	00090003          	lb	zero,0(s2)
     ed6:	0100                	addi	s0,sp,128
     ed8:	1105                	addi	sp,sp,-31
     eda:	0200                	addi	s0,sp,256
     edc:	0104                	addi	s1,sp,128
     ede:	0306                	slli	t1,t1,0x1
     ee0:	0900                	addi	s0,sp,144
     ee2:	0002                	c.slli64	zero
     ee4:	0501                	addi	a0,a0,0
     ee6:	0005                	c.nop	1
     ee8:	0402                	c.slli64	s0
     eea:	0601                	addi	a2,a2,0
     eec:	00090003          	lb	zero,0(s2)
     ef0:	0100                	addi	s0,sp,128
     ef2:	1805                	addi	a6,a6,-31
     ef4:	0200                	addi	s0,sp,256
     ef6:	0104                	addi	s1,sp,128
     ef8:	0306                	slli	t1,t1,0x1
     efa:	0906                	slli	s2,s2,0x1
     efc:	0004                	0x4
     efe:	0501                	addi	a0,a0,0
     f00:	0005                	c.nop	1
     f02:	0402                	c.slli64	s0
     f04:	0601                	addi	a2,a2,0
     f06:	08090003          	lb	zero,128(s2)
     f0a:	0100                	addi	s0,sp,128
     f0c:	0c05                	addi	s8,s8,1
     f0e:	0200                	addi	s0,sp,256
     f10:	0104                	addi	s1,sp,128
     f12:	04097a03          	0x4097a03
     f16:	0100                	addi	s0,sp,128
     f18:	0200                	addi	s0,sp,256
     f1a:	0104                	addi	s1,sp,128
     f1c:	04090f03          	lb	t5,64(s2)
     f20:	0100                	addi	s0,sp,128
     f22:	1105                	addi	sp,sp,-31
     f24:	0200                	addi	s0,sp,256
     f26:	0104                	addi	s1,sp,128
     f28:	0306                	slli	t1,t1,0x1
     f2a:	097f                	0x97f
     f2c:	0002                	c.slli64	zero
     f2e:	0501                	addi	a0,a0,0
     f30:	0005                	c.nop	1
     f32:	0402                	c.slli64	s0
     f34:	0601                	addi	a2,a2,0
     f36:	00090003          	lb	zero,0(s2)
     f3a:	0100                	addi	s0,sp,128
     f3c:	0905                	addi	s2,s2,1
     f3e:	0200                	addi	s0,sp,256
     f40:	0304                	addi	s1,sp,384
     f42:	0306                	slli	t1,t1,0x1
     f44:	00080973          	0x80973
     f48:	0501                	addi	a0,a0,0
     f4a:	000e                	c.slli	zero,0x3
     f4c:	0402                	c.slli64	s0
     f4e:	00030603          	lb	a2,0(t1)
     f52:	0409                	addi	s0,s0,2
     f54:	0100                	addi	s0,sp,128
     f56:	0200                	addi	s0,sp,256
     f58:	0304                	addi	s1,sp,384
     f5a:	04090103          	lb	sp,64(s2)
     f5e:	0100                	addi	s0,sp,128
     f60:	0200                	addi	s0,sp,256
     f62:	0304                	addi	s1,sp,384
int main(){
     f64:	02097f03          	0x2097f03
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f68:	0100                	addi	s0,sp,128
     f6a:	0905                	addi	s2,s2,1
     f6c:	0200                	addi	s0,sp,256
     f6e:	0304                	addi	s1,sp,384
     f70:	0306                	slli	t1,t1,0x1
     f72:	0901                	addi	s2,s2,0
     f74:	0004                	0x4
int main(){
     f76:	0501                	addi	a0,a0,0
     f78:	000e                	c.slli	zero,0x3
     f7a:	0402                	c.slli64	s0
     f7c:	00030603          	lb	a2,0(t1)
     f80:	0009                	c.nop	2
     f82:	0100                	addi	s0,sp,128
     f84:	1d05                	addi	s10,s10,-31
    resultkon[0] = 0xaaaaaaa0;
     f86:	0200                	addi	s0,sp,256
     f88:	0304                	addi	s1,sp,384
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f8a:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xaaaaaaa0;
     f8c:	097e                	slli	s2,s2,0x1f
     f8e:	0004                	0x4
     f90:	0501                	addi	a0,a0,0
     f92:	0309                	addi	t1,t1,2
     f94:	00040907          	0x40907
    keys = generate_keys(N, p, q);
     f98:	0501                	addi	a0,a0,0
     f9a:	0003060b          	0x3060b
     f9e:	0009                	c.nop	2
     fa0:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
     fa2:	2005                	jal	fc2 <main+0x5e>
    resultkon[0] = 0xaaaaaaa1;
     fa4:	0200                	addi	s0,sp,256
     fa6:	0204                	addi	s1,sp,256
    keys = generate_keys(N, p, q);
     fa8:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xaaaaaaa1;
     faa:	097f                	0x97f
     fac:	0002                	c.slli64	zero
    for(i = 0; i < N; ++i){
     fae:	0501                	addi	a0,a0,0
     fb0:	0022                	c.slli	zero,0x8
        secret_key_f[i] = keys[i];
     fb2:	0402                	c.slli64	s0
     fb4:	0602                	c.slli64	a2
     fb6:	00090003          	lb	zero,0(s2)
     fba:	0100                	addi	s0,sp,128
     fbc:	0905                	addi	s2,s2,1
    for(i = 0; i < N; ++i){
     fbe:	0306                	slli	t1,t1,0x1
     fc0:	0909                	addi	s2,s2,2
     fc2:	0004                	0x4
    for(i = N; i < (2*N); ++i){
     fc4:	0501                	addi	a0,a0,0
     fc6:	0615                	addi	a2,a2,5
     fc8:	00090003          	lb	zero,0(s2)
     fcc:	0100                	addi	s0,sp,128
     fce:	0c05                	addi	s8,s8,1
        secret_key_fp[i-(2*N)] = keys[i];
     fd0:	06090003          	lb	zero,96(s2)
     fd4:	0100                	addi	s0,sp,128
     fd6:	1a05                	addi	s4,s4,-31
     fd8:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     fda:	0204                	addi	s1,sp,256
     fdc:	0306                	slli	t1,t1,0x1
    for(i = (3*N); i < (4*N); ++i){
     fde:	097f                	0x97f
     fe0:	0004                	0x4
     fe2:	0501                	addi	a0,a0,0
     fe4:	0309                	addi	t1,t1,2
     fe6:	00040907          	0x40907
        public_key[i-(4*N)] = keys[i];
     fea:	0501                	addi	a0,a0,0
     fec:	0003060b          	0x3060b
     ff0:	0009                	c.nop	2
     ff2:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     ff4:	2005                	jal	1014 <main+0xb0>
     ff6:	0200                	addi	s0,sp,256
     ff8:	0204                	addi	s1,sp,256
     ffa:	0306                	slli	t1,t1,0x1
     ffc:	097f                	0x97f
     ffe:	0002                	c.slli64	zero
        ring_poly[i-(5*N)] = keys[i];
    1000:	0501                	addi	a0,a0,0
    1002:	0022                	c.slli	zero,0x8
    1004:	0402                	c.slli64	s0
    1006:	0602                	c.slli64	a2
    1008:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
    100c:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
    100e:	1805                	addi	a6,a6,-31
    1010:	0200                	addi	s0,sp,256
    1012:	0104                	addi	s1,sp,128
    1014:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1016:	0900                	addi	s0,sp,144
    1018:	0002                	c.slli64	zero
    101a:	0501                	addi	a0,a0,0
    101c:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb1;
    101e:	0402                	c.slli64	s0
    1020:	0601                	addi	a2,a2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	08090003          	lb	zero,128(s2)
    resultkon[0] = 0xbbbbbbb0;
    1026:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	0b05                	addi	s6,s6,1
    resultkon[0] = 0xbbbbbbb1;
    102a:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xccccccc0;
    102c:	090c                	addi	a1,sp,144
    102e:	0004                	0x4
    1030:	0501                	addi	a0,a0,0
    1032:	00cd0307          	0xcd0307
    1036:	0409                	addi	s0,s0,2
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1038:	0100                	addi	s0,sp,128
    103a:	0505                	addi	a0,a0,1
    103c:	0e090403          	lb	s0,224(s2)
    1040:	0100                	addi	s0,sp,128
    1042:	1b05                	addi	s6,s6,-31
    1044:	0306                	slli	t1,t1,0x1
    1046:	0900                	addi	s0,sp,144
    1048:	0000                	unimp
    104a:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
    104c:	09010313          	addi	t1,sp,144
            resultkon[0] = 0xDEDEDEDE;
    1050:	0004                	0x4
    1052:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
    1054:	0015                	c.nop	5
    1056:	0402                	c.slli64	s0
            resultkon[0] = 0xDEDEDEDE;
    1058:	0601                	addi	a2,a2,0
    105a:	08097f03          	0x8097f03
    for(i = 0; i < 32; ++i){
    105e:	0100                	addi	s0,sp,128
        if(!(message[i] == Dec_Message[i])){
    1060:	0505                	addi	a0,a0,1
    1062:	0200                	addi	s0,sp,256
    1064:	0104                	addi	s1,sp,128
    1066:	0306                	slli	t1,t1,0x1
    1068:	0900                	addi	s0,sp,144
    106a:	0000                	unimp
    106c:	0601                	addi	a2,a2,0
    106e:	04090403          	lb	s0,64(s2)
            resultkon[0] = 0xBABABABA;
    1072:	0100                	addi	s0,sp,128
    1074:	00090203          	lb	tp,0(s2)
    1078:	0100                	addi	s0,sp,128
}
    107a:	0105                	addi	sp,sp,1
    107c:	0306                	slli	t1,t1,0x1
    107e:	0901                	addi	s2,s2,0
    1080:	0000                	unimp
    1082:	0501                	addi	a0,a0,0
    1084:	0609                	addi	a2,a2,2
    1086:	097fab03          	lw	s6,151(t6)
    108a:	002a                	c.slli	zero,0xa
    108c:	0501                	addi	a0,a0,0
    108e:	0616                	slli	a2,a2,0x5
    1090:	00090003          	lb	zero,0(s2)
    for(i = 0; i < 32; ++i){
    1094:	0100                	addi	s0,sp,128
    1096:	0d05                	addi	s10,s10,1
    1098:	04090003          	lb	zero,64(s2)
    109c:	0100                	addi	s0,sp,128
    109e:	1305                	addi	t1,t1,-31
    10a0:	04090003          	lb	zero,64(s2)
    10a4:	0100                	addi	s0,sp,128
    10a6:	0905                	addi	s2,s2,1
    10a8:	04090703          	lb	a4,64(s2)
    10ac:	0100                	addi	s0,sp,128
    10ae:	1305                	addi	t1,t1,-31
    10b0:	06097903          	0x6097903
    10b4:	0100                	addi	s0,sp,128
    10b6:	0905                	addi	s2,s2,1
    10b8:	0306                	slli	t1,t1,0x1
    10ba:	00020907          	0x20907
    10be:	0301                	addi	t1,t1,0
    10c0:	0904                	addi	s1,sp,144
    10c2:	0002                	c.slli64	zero
    10c4:	0501                	addi	a0,a0,0
    10c6:	00030613          	mv	a2,t1
    10ca:	0009                	c.nop	2
    10cc:	0100                	addi	s0,sp,128
    10ce:	0905                	addi	s2,s2,1
    10d0:	0e090b03          	lb	s6,224(s2)
    10d4:	0100                	addi	s0,sp,128
    10d6:	1305                	addi	t1,t1,-31
    10d8:	04097503          	0x4097503
    10dc:	0100                	addi	s0,sp,128
    10de:	0905                	addi	s2,s2,1
    10e0:	0306                	slli	t1,t1,0x1
    10e2:	0002090b          	0x2090b
    10e6:	0301                	addi	t1,t1,0
    10e8:	0904                	addi	s1,sp,144
    10ea:	0002                	c.slli64	zero
    10ec:	0501                	addi	a0,a0,0
    10ee:	0610                	addi	a2,sp,768
    10f0:	02090003          	lb	zero,32(s2)
    10f4:	0100                	addi	s0,sp,128
    10f6:	1505                	addi	a0,a0,-31
    10f8:	0200                	addi	s0,sp,256
    10fa:	0104                	addi	s1,sp,128
    10fc:	0306                	slli	t1,t1,0x1
    10fe:	0900                	addi	s0,sp,144
    1100:	0002                	c.slli64	zero
    1102:	0501                	addi	a0,a0,0
    1104:	0009                	c.nop	2
    1106:	0402                	c.slli64	s0
    1108:	0601                	addi	a2,a2,0
    110a:	00090003          	lb	zero,0(s2)
    110e:	0100                	addi	s0,sp,128
    1110:	0306                	slli	t1,t1,0x1
    1112:	090d                	addi	s2,s2,3
    1114:	0004                	0x4
    1116:	0301                	addi	t1,t1,0
    1118:	0909                	addi	s2,s2,2
    111a:	0008                	0x8
    111c:	0301                	addi	t1,t1,0
    111e:	00080903          	lb	s2,0(a6)
    1122:	0301                	addi	t1,t1,0
    1124:	0904                	addi	s1,sp,144
    1126:	0008                	0x8
    1128:	0501                	addi	a0,a0,0
    112a:	0610                	addi	a2,sp,768
    112c:	00090003          	lb	zero,0(s2)
    1130:	0100                	addi	s0,sp,128
    1132:	1c05                	addi	s8,s8,-31
    1134:	0200                	addi	s0,sp,256
    1136:	0104                	addi	s1,sp,128
    1138:	0306                	slli	t1,t1,0x1
    113a:	0900                	addi	s0,sp,144
    113c:	0002                	c.slli64	zero
    113e:	0501                	addi	a0,a0,0
    1140:	0009                	c.nop	2
    1142:	0402                	c.slli64	s0
    1144:	0601                	addi	a2,a2,0
    1146:	08090003          	lb	zero,128(s2)
    114a:	0100                	addi	s0,sp,128
    114c:	0d05                	addi	s10,s10,1
    114e:	0200                	addi	s0,sp,256
    1150:	0304                	addi	s1,sp,384
    1152:	0306                	slli	t1,t1,0x1
    1154:	0964                	addi	s1,sp,156
    1156:	0008                	0x8
    1158:	0501                	addi	a0,a0,0
    115a:	0030                	addi	a2,sp,8
    115c:	0402                	c.slli64	s0
    115e:	00030603          	lb	a2,0(t1)
    1162:	0009                	c.nop	2
    1164:	0100                	addi	s0,sp,128
    1166:	2705                	jal	1886 <result+0x1a6>
    1168:	0200                	addi	s0,sp,256
    116a:	0304                	addi	s1,sp,384
    116c:	06090003          	lb	zero,96(s2)
    1170:	0100                	addi	s0,sp,128
    1172:	2105                	jal	1592 <product2+0x10a>
    1174:	0200                	addi	s0,sp,256
    1176:	0304                	addi	s1,sp,384
    1178:	04097f03          	0x4097f03
    117c:	0100                	addi	s0,sp,128
    117e:	2705                	jal	189e <result+0x1be>
    1180:	0200                	addi	s0,sp,256
    1182:	0304                	addi	s1,sp,384
    1184:	04090103          	lb	sp,64(s2)
    1188:	0100                	addi	s0,sp,128
    118a:	1905                	addi	s2,s2,-31
    118c:	0200                	addi	s0,sp,256
    118e:	0304                	addi	s1,sp,384
    1190:	02090003          	lb	zero,32(s2)
    1194:	0100                	addi	s0,sp,128
    1196:	2105                	jal	15b6 <product2+0x12e>
    1198:	0200                	addi	s0,sp,256
    119a:	0304                	addi	s1,sp,384
    119c:	0306                	slli	t1,t1,0x1
    119e:	097f                	0x97f
    11a0:	0004                	0x4
    11a2:	0501                	addi	a0,a0,0
    11a4:	030d                	addi	t1,t1,3
    11a6:	091e                	slli	s2,s2,0x7
    11a8:	0002                	c.slli64	zero
    11aa:	0501                	addi	a0,a0,0
    11ac:	0003060f          	0x3060f
    11b0:	0009                	c.nop	2
    11b2:	0100                	addi	s0,sp,128
    11b4:	2405                	jal	13d4 <_bss_start+0x1a4>
    11b6:	0200                	addi	s0,sp,256
    11b8:	0204                	addi	s1,sp,256
    11ba:	0306                	slli	t1,t1,0x1
    11bc:	097f                	0x97f
    11be:	0002                	c.slli64	zero
    11c0:	0501                	addi	a0,a0,0
    11c2:	0026                	c.slli	zero,0x9
    11c4:	0402                	c.slli64	s0
    11c6:	0602                	c.slli64	a2
    11c8:	00090003          	lb	zero,0(s2)
    11cc:	0100                	addi	s0,sp,128
    11ce:	0d05                	addi	s10,s10,1
    11d0:	0200                	addi	s0,sp,256
    11d2:	0304                	addi	s1,sp,384
    11d4:	0306                	slli	t1,t1,0x1
    11d6:	0909                	addi	s2,s2,2
    11d8:	0004                	0x4
    11da:	0501                	addi	a0,a0,0
    11dc:	0012                	c.slli	zero,0x4
    11de:	0402                	c.slli64	s0
    11e0:	00030603          	lb	a2,0(t1)
    11e4:	0009                	c.nop	2
    11e6:	0100                	addi	s0,sp,128
    11e8:	2105                	jal	1608 <product2+0x180>
    11ea:	0200                	addi	s0,sp,256
    11ec:	0304                	addi	s1,sp,384
    11ee:	0306                	slli	t1,t1,0x1
    11f0:	097f                	0x97f
    11f2:	000a                	c.slli	zero,0x2
    11f4:	0501                	addi	a0,a0,0
    11f6:	0015                	c.nop	5
    11f8:	0402                	c.slli64	s0
    11fa:	0301                	addi	t1,t1,0
    11fc:	0900                	addi	s0,sp,144
    11fe:	0002                	c.slli64	zero
    1200:	0501                	addi	a0,a0,0
    1202:	0009                	c.nop	2
    1204:	0402                	c.slli64	s0
    1206:	0601                	addi	a2,a2,0
    1208:	00090003          	lb	zero,0(s2)
    120c:	0100                	addi	s0,sp,128
    120e:	0200                	addi	s0,sp,256
    1210:	0304                	addi	s1,sp,384
    1212:	0306                	slli	t1,t1,0x1
    1214:	0910                	addi	a2,sp,144
    1216:	0006                	c.slli	zero,0x1
    1218:	0501                	addi	a0,a0,0
    121a:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    121e:	00030603          	lb	a2,0(t1)
    1222:	0009                	c.nop	2
    1224:	0100                	addi	s0,sp,128
    1226:	2505                	jal	1846 <result+0x166>
    1228:	0200                	addi	s0,sp,256
    122a:	0304                	addi	s1,sp,384
    122c:	0306                	slli	t1,t1,0x1
    122e:	097f                	0x97f
    1230:	000c                	0xc
    1232:	0501                	addi	a0,a0,0
    1234:	033c                	addi	a5,sp,392
    1236:	090a                	slli	s2,s2,0x2
    1238:	0006                	c.slli	zero,0x1
    123a:	0501                	addi	a0,a0,0
    123c:	0305                	addi	t1,t1,1
    123e:	0902                	c.slli64	s2
    1240:	0000                	unimp
    1242:	0301                	addi	t1,t1,0
    1244:	0901                	addi	s2,s2,0
    1246:	0000                	unimp
    1248:	0301                	addi	t1,t1,0
    124a:	0901                	addi	s2,s2,0
    124c:	0000                	unimp
    124e:	0501                	addi	a0,a0,0
    1250:	0609                	addi	a2,a2,2
    1252:	00090003          	lb	zero,0(s2)
    1256:	0100                	addi	s0,sp,128
    1258:	3c05                	jal	c88 <ntru_encyrpt+0x6a>
    125a:	04097c03          	0x4097c03
    125e:	0100                	addi	s0,sp,128
    1260:	0905                	addi	s2,s2,1
    1262:	02090403          	lb	s0,32(s2)
    1266:	0100                	addi	s0,sp,128
    1268:	3c05                	jal	c98 <ntru_encyrpt+0x7a>
    126a:	04097c03          	0x4097c03
    126e:	0100                	addi	s0,sp,128
    1270:	0905                	addi	s2,s2,1
    1272:	1c090403          	lb	s0,448(s2)
    1276:	0100                	addi	s0,sp,128
    1278:	06090103          	lb	sp,96(s2)
    127c:	0100                	addi	s0,sp,128
    127e:	06090103          	lb	sp,96(s2)
    1282:	0100                	addi	s0,sp,128
    1284:	06090203          	lb	tp,96(s2)
    1288:	0100                	addi	s0,sp,128
    128a:	06090103          	lb	sp,96(s2)
    128e:	0100                	addi	s0,sp,128
    1290:	06090103          	lb	sp,96(s2)
    1294:	0100                	addi	s0,sp,128
    1296:	06090103          	lb	sp,96(s2)
    129a:	0100                	addi	s0,sp,128
    129c:	3c05                	jal	ccc <ntru_deceypt+0x28>
    129e:	04097503          	0x4097503
    12a2:	0100                	addi	s0,sp,128
    12a4:	0905                	addi	s2,s2,1
    12a6:	06090403          	lb	s0,96(s2)
    12aa:	0100                	addi	s0,sp,128
    12ac:	0505                	addi	a0,a0,1
    12ae:	0306                	slli	t1,t1,0x1
    12b0:	0901                	addi	s2,s2,0
    12b2:	0004                	0x4
    12b4:	0301                	addi	t1,t1,0
    12b6:	0901                	addi	s2,s2,0
    12b8:	0000                	unimp
    12ba:	0301                	addi	t1,t1,0
    12bc:	0902                	c.slli64	s2
    12be:	0000                	unimp
    12c0:	0301                	addi	t1,t1,0
    12c2:	0901                	addi	s2,s2,0
    12c4:	0000                	unimp
    12c6:	0301                	addi	t1,t1,0
    12c8:	0901                	addi	s2,s2,0
    12ca:	0000                	unimp
    12cc:	0301                	addi	t1,t1,0
    12ce:	0901                	addi	s2,s2,0
    12d0:	0000                	unimp
    12d2:	0501                	addi	a0,a0,0
    12d4:	0609                	addi	a2,a2,2
    12d6:	00090003          	lb	zero,0(s2)
    12da:	0100                	addi	s0,sp,128
    12dc:	0505                	addi	a0,a0,1
    12de:	0306                	slli	t1,t1,0x1
    12e0:	0901                	addi	s2,s2,0
    12e2:	0002                	c.slli64	zero
    12e4:	0301                	addi	t1,t1,0
    12e6:	0901                	addi	s2,s2,0
    12e8:	0000                	unimp
    12ea:	0301                	addi	t1,t1,0
    12ec:	0901                	addi	s2,s2,0
    12ee:	0000                	unimp
    12f0:	0301                	addi	t1,t1,0
    12f2:	0901                	addi	s2,s2,0
    12f4:	0000                	unimp
    12f6:	0301                	addi	t1,t1,0
    12f8:	0902                	c.slli64	s2
    12fa:	0000                	unimp
    12fc:	0301                	addi	t1,t1,0
    12fe:	0901                	addi	s2,s2,0
    1300:	0000                	unimp
    1302:	0501                	addi	a0,a0,0
    1304:	060c                	addi	a1,sp,768
    1306:	00090003          	lb	zero,0(s2)
    130a:	0100                	addi	s0,sp,128
    130c:	1105                	addi	sp,sp,-31
    130e:	02090303          	lb	t1,32(s2)
    1312:	0100                	addi	s0,sp,128
    1314:	0200                	addi	s0,sp,256
    1316:	0104                	addi	s1,sp,128
    1318:	0306                	slli	t1,t1,0x1
    131a:	097d                	addi	s2,s2,31
    131c:	0008                	0x8
    131e:	0501                	addi	a0,a0,0
    1320:	0005                	c.nop	1
    1322:	0402                	c.slli64	s0
    1324:	0601                	addi	a2,a2,0
    1326:	00090003          	lb	zero,0(s2)
    132a:	0100                	addi	s0,sp,128
    132c:	0306                	slli	t1,t1,0x1
    132e:	0906                	slli	s2,s2,0x1
    1330:	0004                	0x4
    1332:	0301                	addi	t1,t1,0
    1334:	0901                	addi	s2,s2,0
    1336:	0008                	0x8
    1338:	0301                	addi	t1,t1,0
    133a:	0905                	addi	s2,s2,1
    133c:	0008                	0x8
    133e:	0501                	addi	a0,a0,0
    1340:	060d                	addi	a2,a2,3
    1342:	00090003          	lb	zero,0(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	0505                	addi	a0,a0,1
    134a:	0306                	slli	t1,t1,0x1
    134c:	00060903          	lb	s2,0(a2)
    1350:	0501                	addi	a0,a0,0
    1352:	0900030b          	0x900030b
    1356:	0000                	unimp
    1358:	0501                	addi	a0,a0,0
    135a:	0624                	addi	s1,sp,776
    135c:	00091603          	lh	a2,0(s2)
    1360:	0100                	addi	s0,sp,128
    1362:	1905                	addi	s2,s2,-31
    1364:	08093503          	0x8093503
    1368:	0100                	addi	s0,sp,128
    136a:	0905                	addi	s2,s2,1
    136c:	0306                	slli	t1,t1,0x1
    136e:	08097fb7          	lui	t6,0x8097
    1372:	0100                	addi	s0,sp,128
    1374:	0505                	addi	a0,a0,1
    1376:	00090803          	lb	a6,0(s2)
    137a:	0100                	addi	s0,sp,128
    137c:	08090903          	lb	s2,128(s2)
    1380:	0100                	addi	s0,sp,128
    1382:	0905                	addi	s2,s2,1
    1384:	08090203          	lb	tp,128(s2)
    1388:	0100                	addi	s0,sp,128
    138a:	0f05                	addi	t5,t5,1
    138c:	0306                	slli	t1,t1,0x1
    138e:	0900                	addi	s0,sp,144
    1390:	0000                	unimp
    1392:	0501                	addi	a0,a0,0
    1394:	0609                	addi	a2,a2,2
    1396:	0c090103          	lb	sp,192(s2)
    139a:	0100                	addi	s0,sp,128
    139c:	1905                	addi	s2,s2,-31
    139e:	0200                	addi	s0,sp,256
    13a0:	0104                	addi	s1,sp,128
    13a2:	04090003          	lb	zero,64(s2)
    13a6:	0100                	addi	s0,sp,128
    13a8:	0905                	addi	s2,s2,1
    13aa:	0200                	addi	s0,sp,256
    13ac:	0104                	addi	s1,sp,128
    13ae:	0306                	slli	t1,t1,0x1
    13b0:	0900                	addi	s0,sp,144
    13b2:	0000                	unimp
    13b4:	0501                	addi	a0,a0,0
    13b6:	0310                	addi	a2,sp,384
    13b8:	0906                	slli	s2,s2,0x1
    13ba:	000a                	c.slli	zero,0x2
    13bc:	0501                	addi	a0,a0,0
    13be:	0015                	c.nop	5
    13c0:	0402                	c.slli64	s0
    13c2:	0601                	addi	a2,a2,0
    13c4:	02090003          	lb	zero,32(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	0905                	addi	s2,s2,1
    13cc:	0200                	addi	s0,sp,256
    13ce:	0104                	addi	s1,sp,128
    13d0:	0306                	slli	t1,t1,0x1
    13d2:	0900                	addi	s0,sp,144
    13d4:	0000                	unimp
    13d6:	0501                	addi	a0,a0,0
    13d8:	0605                	addi	a2,a2,1
    13da:	04090c03          	lb	s8,64(s2)
    13de:	0100                	addi	s0,sp,128
    13e0:	0905                	addi	s2,s2,1
    13e2:	08090203          	lb	tp,128(s2)
    13e6:	0100                	addi	s0,sp,128
    13e8:	1005                	c.nop	-31
    13ea:	0306                	slli	t1,t1,0x1
    13ec:	0900                	addi	s0,sp,144
    13ee:	0000                	unimp
    13f0:	0501                	addi	a0,a0,0
    13f2:	0605                	addi	a2,a2,1
    13f4:	0e090403          	lb	s0,224(s2)
    13f8:	0100                	addi	s0,sp,128
    13fa:	06090903          	lb	s2,96(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	0905                	addi	s2,s2,1
    1402:	08090403          	lb	s0,128(s2)
    1406:	0100                	addi	s0,sp,128
    1408:	1005                	c.nop	-31
    140a:	0306                	slli	t1,t1,0x1
    140c:	0900                	addi	s0,sp,144
    140e:	0000                	unimp
    1410:	0501                	addi	a0,a0,0
    1412:	0605                	addi	a2,a2,1
    1414:	10090403          	lb	s0,256(s2)
    1418:	0100                	addi	s0,sp,128
    141a:	06090903          	lb	s2,96(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	0905                	addi	s2,s2,1
    1422:	08090203          	lb	tp,128(s2)
    1426:	0100                	addi	s0,sp,128
    1428:	1005                	c.nop	-31
    142a:	0306                	slli	t1,t1,0x1
    142c:	0900                	addi	s0,sp,144
    142e:	0002                	c.slli64	zero
    1430:	0501                	addi	a0,a0,0
    1432:	0015                	c.nop	5
    1434:	0402                	c.slli64	s0
    1436:	0601                	addi	a2,a2,0
    1438:	02090003          	lb	zero,32(s2)
    143c:	0100                	addi	s0,sp,128
    143e:	0905                	addi	s2,s2,1
    1440:	0200                	addi	s0,sp,256
    1442:	0104                	addi	s1,sp,128
    1444:	0306                	slli	t1,t1,0x1
    1446:	0900                	addi	s0,sp,144
    1448:	0000                	unimp
    144a:	0501                	addi	a0,a0,0
    144c:	0605                	addi	a2,a2,1
    144e:	04090b03          	lb	s6,64(s2)
    1452:	0100                	addi	s0,sp,128
    1454:	0105                	addi	sp,sp,1
    1456:	08090603          	lb	a2,128(s2)
    145a:	0100                	addi	s0,sp,128
    145c:	08090103          	lb	sp,128(s2)
    1460:	0100                	addi	s0,sp,128
    1462:	08090103          	lb	sp,128(s2)
    1466:	0100                	addi	s0,sp,128
    1468:	08090103          	lb	sp,128(s2)
    146c:	0100                	addi	s0,sp,128
    146e:	0905                	addi	s2,s2,1
    1470:	08090203          	lb	tp,128(s2)
    1474:	0100                	addi	s0,sp,128
    1476:	1205                	addi	tp,tp,-31
    1478:	0306                	slli	t1,t1,0x1
    147a:	7fa2                	flw	ft11,40(sp)
    147c:	0009                	c.nop	2
    147e:	0100                	addi	s0,sp,128
    1480:	1005                	c.nop	-31
    1482:	0900de03          	lhu	t3,144(ra)
    1486:	0002                	c.slli64	zero
    1488:	0501                	addi	a0,a0,0
    148a:	0015                	c.nop	5
    148c:	0402                	c.slli64	s0
    148e:	0601                	addi	a2,a2,0
    1490:	02090003          	lb	zero,32(s2)
    1494:	0100                	addi	s0,sp,128
    1496:	0905                	addi	s2,s2,1
    1498:	0200                	addi	s0,sp,256
    149a:	0104                	addi	s1,sp,128
    149c:	0306                	slli	t1,t1,0x1
    149e:	0900                	addi	s0,sp,144
    14a0:	0000                	unimp
    14a2:	0501                	addi	a0,a0,0
    14a4:	a003060b          	0xa003060b
    14a8:	097f                	0x97f
    14aa:	0004                	0x4
    14ac:	0501                	addi	a0,a0,0
    14ae:	0610                	addi	a2,sp,768
    14b0:	0900eb03          	0x900eb03
    14b4:	0004                	0x4
    14b6:	0301                	addi	t1,t1,0
    14b8:	0901                	addi	s2,s2,0
    14ba:	0002                	c.slli64	zero
    14bc:	0501                	addi	a0,a0,0
    14be:	0015                	c.nop	5
    14c0:	0402                	c.slli64	s0
    14c2:	0601                	addi	a2,a2,0
    14c4:	02097f03          	0x2097f03
    14c8:	0100                	addi	s0,sp,128
    14ca:	0905                	addi	s2,s2,1
    14cc:	0200                	addi	s0,sp,256
    14ce:	0104                	addi	s1,sp,128
    14d0:	0306                	slli	t1,t1,0x1
    14d2:	0900                	addi	s0,sp,144
    14d4:	0000                	unimp
    14d6:	0501                	addi	a0,a0,0
    14d8:	0015                	c.nop	5
    14da:	0402                	c.slli64	s0
    14dc:	0601                	addi	a2,a2,0
    14de:	0c090c03          	lb	s8,192(s2)
    14e2:	0100                	addi	s0,sp,128
    14e4:	0905                	addi	s2,s2,1
    14e6:	0200                	addi	s0,sp,256
    14e8:	0104                	addi	s1,sp,128
    14ea:	0306                	slli	t1,t1,0x1
    14ec:	0900                	addi	s0,sp,144
    14ee:	0000                	unimp
    14f0:	0601                	addi	a2,a2,0
    14f2:	04090503          	lb	a0,64(s2)
    14f6:	0100                	addi	s0,sp,128
    14f8:	00090103          	lb	sp,0(s2)
    14fc:	0100                	addi	s0,sp,128
    14fe:	0505                	addi	a0,a0,1
    1500:	0306                	slli	t1,t1,0x1
    1502:	0901                	addi	s2,s2,0
    1504:	0000                	unimp
    1506:	0501                	addi	a0,a0,0
    1508:	0009                	c.nop	2
    150a:	0402                	c.slli64	s0
    150c:	f6030603          	lb	a2,-160(t1)
    1510:	097e                	slli	s2,s2,0x1f
    1512:	002a                	c.slli	zero,0xa
    1514:	0501                	addi	a0,a0,0
    1516:	0011                	c.nop	4
    1518:	0402                	c.slli64	s0
    151a:	00030603          	lb	a2,0(t1)
    151e:	0409                	addi	s0,s0,2
    1520:	0100                	addi	s0,sp,128
    1522:	0200                	addi	s0,sp,256
    1524:	0304                	addi	s1,sp,384
    1526:	04090103          	lb	sp,64(s2)
    152a:	0100                	addi	s0,sp,128
    152c:	0200                	addi	s0,sp,256
    152e:	0304                	addi	s1,sp,384
    1530:	02097f03          	0x2097f03
    1534:	0100                	addi	s0,sp,128
    1536:	0905                	addi	s2,s2,1
    1538:	0200                	addi	s0,sp,256
    153a:	0304                	addi	s1,sp,384
    153c:	0306                	slli	t1,t1,0x1
    153e:	0901                	addi	s2,s2,0
    1540:	0004                	0x4
    1542:	0501                	addi	a0,a0,0
    1544:	0011                	c.nop	4
    1546:	0402                	c.slli64	s0
    1548:	00030603          	lb	a2,0(t1)
    154c:	0009                	c.nop	2
    154e:	0100                	addi	s0,sp,128
    1550:	1b05                	addi	s6,s6,-31
    1552:	0200                	addi	s0,sp,256
    1554:	0304                	addi	s1,sp,384
    1556:	0306                	slli	t1,t1,0x1
    1558:	097c                	addi	a5,sp,156
    155a:	0004                	0x4
    155c:	0501                	addi	a0,a0,0
    155e:	000d                	c.nop	3
    1560:	0402                	c.slli64	s0
    1562:	09260303          	lb	t1,146(a2)
    1566:	0004                	0x4
    1568:	0501                	addi	a0,a0,0
    156a:	0022                	c.slli	zero,0x8
    156c:	0402                	c.slli64	s0
    156e:	00030603          	lb	a2,0(t1)
    1572:	0009                	c.nop	2
    1574:	0100                	addi	s0,sp,128
    1576:	2a05                	jal	16a6 <product2+0x21e>
    1578:	0200                	addi	s0,sp,256
    157a:	0304                	addi	s1,sp,384
    157c:	08097f03          	0x8097f03
    1580:	0100                	addi	s0,sp,128
    1582:	1d05                	addi	s10,s10,-31
    1584:	0200                	addi	s0,sp,256
    1586:	0304                	addi	s1,sp,384
    1588:	04090103          	lb	sp,64(s2)
    158c:	0100                	addi	s0,sp,128
    158e:	2a05                	jal	16be <product2+0x236>
    1590:	0200                	addi	s0,sp,256
    1592:	0304                	addi	s1,sp,384
    1594:	0306                	slli	t1,t1,0x1
    1596:	097f                	0x97f
    1598:	0004                	0x4
    159a:	0501                	addi	a0,a0,0
    159c:	000d                	c.nop	3
    159e:	0402                	c.slli64	s0
    15a0:	09070303          	lb	t1,144(a4)
    15a4:	0002                	c.slli64	zero
    15a6:	0501                	addi	a0,a0,0
    15a8:	0402001b          	0x402001b
    15ac:	00030603          	lb	a2,0(t1)
    15b0:	0009                	c.nop	2
    15b2:	0100                	addi	s0,sp,128
    15b4:	2305                	jal	1ad4 <random_keys+0xc>
    15b6:	0200                	addi	s0,sp,256
    15b8:	0304                	addi	s1,sp,384
    15ba:	04090003          	lb	zero,64(s2)
    15be:	0100                	addi	s0,sp,128
    15c0:	1f05                	addi	t5,t5,-31
    15c2:	0200                	addi	s0,sp,256
    15c4:	0304                	addi	s1,sp,384
    15c6:	04090003          	lb	zero,64(s2)
    15ca:	0100                	addi	s0,sp,128
    15cc:	1505                	addi	a0,a0,-31
    15ce:	0200                	addi	s0,sp,256
    15d0:	0304                	addi	s1,sp,384
    15d2:	04090003          	lb	zero,64(s2)
    15d6:	0100                	addi	s0,sp,128
    15d8:	2005                	jal	15f8 <product2+0x170>
    15da:	0200                	addi	s0,sp,256
    15dc:	0304                	addi	s1,sp,384
    15de:	04097f03          	0x4097f03
    15e2:	0100                	addi	s0,sp,128
    15e4:	1f05                	addi	t5,t5,-31
    15e6:	0200                	addi	s0,sp,256
    15e8:	0304                	addi	s1,sp,384
    15ea:	02090103          	lb	sp,32(s2)
    15ee:	0100                	addi	s0,sp,128
    15f0:	1505                	addi	a0,a0,-31
    15f2:	0200                	addi	s0,sp,256
    15f4:	0304                	addi	s1,sp,384
    15f6:	02090003          	lb	zero,32(s2)
    15fa:	0100                	addi	s0,sp,128
    15fc:	2005                	jal	161c <product2+0x194>
    15fe:	0200                	addi	s0,sp,256
    1600:	0304                	addi	s1,sp,384
    1602:	0306                	slli	t1,t1,0x1
    1604:	097f                	0x97f
    1606:	0002                	c.slli64	zero
    1608:	0501                	addi	a0,a0,0
    160a:	000d                	c.nop	3
    160c:	0402                	c.slli64	s0
    160e:	092f0303          	lb	t1,146(t5)
    1612:	0004                	0x4
    1614:	0501                	addi	a0,a0,0
    1616:	0019                	c.nop	6
    1618:	0402                	c.slli64	s0
    161a:	00030603          	lb	a2,0(t1)
    161e:	0009                	c.nop	2
    1620:	0100                	addi	s0,sp,128
    1622:	2305                	jal	1b42 <random_keys+0x7a>
    1624:	0200                	addi	s0,sp,256
    1626:	0304                	addi	s1,sp,384
    1628:	04090003          	lb	zero,64(s2)
    162c:	0100                	addi	s0,sp,128
    162e:	1d05                	addi	s10,s10,-31
    1630:	0200                	addi	s0,sp,256
    1632:	0304                	addi	s1,sp,384
    1634:	04090003          	lb	zero,64(s2)
    1638:	0100                	addi	s0,sp,128
    163a:	1305                	addi	t1,t1,-31
    163c:	0200                	addi	s0,sp,256
    163e:	0304                	addi	s1,sp,384
    1640:	04090003          	lb	zero,64(s2)
    1644:	0100                	addi	s0,sp,128
    1646:	2005                	jal	1666 <product2+0x1de>
    1648:	0200                	addi	s0,sp,256
    164a:	0304                	addi	s1,sp,384
    164c:	04097f03          	0x4097f03
    1650:	0100                	addi	s0,sp,128
    1652:	1d05                	addi	s10,s10,-31
    1654:	0200                	addi	s0,sp,256
    1656:	0304                	addi	s1,sp,384
    1658:	02090103          	lb	sp,32(s2)
    165c:	0100                	addi	s0,sp,128
    165e:	1305                	addi	t1,t1,-31
    1660:	0200                	addi	s0,sp,256
    1662:	0304                	addi	s1,sp,384
    1664:	02090003          	lb	zero,32(s2)
    1668:	0100                	addi	s0,sp,128
    166a:	2005                	jal	168a <product2+0x202>
    166c:	0200                	addi	s0,sp,256
    166e:	0304                	addi	s1,sp,384
    1670:	0306                	slli	t1,t1,0x1
    1672:	097f                	0x97f
    1674:	0002                	c.slli64	zero
    1676:	0501                	addi	a0,a0,0
    1678:	0402000f          	0x402000f
    167c:	091b0303          	lb	t1,145(s6)
    1680:	0004                	0x4
    1682:	0501                	addi	a0,a0,0
    1684:	04020017          	auipc	zero,0x4020
    1688:	00030603          	lb	a2,0(t1)
    168c:	0409                	addi	s0,s0,2
    168e:	0100                	addi	s0,sp,128
    1690:	1b05                	addi	s6,s6,-31
    1692:	0200                	addi	s0,sp,256
    1694:	0304                	addi	s1,sp,384
    1696:	04090103          	lb	sp,64(s2)
    169a:	0100                	addi	s0,sp,128
    169c:	1605                	addi	a2,a2,-31
    169e:	0200                	addi	s0,sp,256
    16a0:	0304                	addi	s1,sp,384
    16a2:	02090003          	lb	zero,32(s2)
    16a6:	0100                	addi	s0,sp,128
    16a8:	1705                	addi	a4,a4,-31
    16aa:	0200                	addi	s0,sp,256
    16ac:	0304                	addi	s1,sp,384
    16ae:	02097f03          	0x2097f03
    16b2:	0100                	addi	s0,sp,128
    16b4:	0d05                	addi	s10,s10,1
    16b6:	0200                	addi	s0,sp,256
    16b8:	0304                	addi	s1,sp,384
    16ba:	0306                	slli	t1,t1,0x1
    16bc:	0901                	addi	s2,s2,0
    16be:	0004                	0x4
    16c0:	0501                	addi	a0,a0,0
    16c2:	0020                	addi	s0,sp,8
    16c4:	0402                	c.slli64	s0
    16c6:	7a030603          	lb	a2,1952(t1)
    16ca:	0009                	c.nop	2
    16cc:	0100                	addi	s0,sp,128
    16ce:	1605                	addi	a2,a2,-31
    16d0:	0200                	addi	s0,sp,256
    16d2:	0304                	addi	s1,sp,384
    16d4:	02090603          	lb	a2,32(s2)
    16d8:	0100                	addi	s0,sp,128
    16da:	2005                	jal	16fa <result+0x1a>
    16dc:	0200                	addi	s0,sp,256
    16de:	0304                	addi	s1,sp,384
    16e0:	0306                	slli	t1,t1,0x1
    16e2:	097a                	slli	s2,s2,0x1e
    16e4:	0002                	c.slli64	zero
    16e6:	0501                	addi	a0,a0,0
    16e8:	030d                	addi	t1,t1,3
    16ea:	090c                	addi	a1,sp,144
    16ec:	0002                	c.slli64	zero
    16ee:	0501                	addi	a0,a0,0
    16f0:	0003061b          	0x3061b
    16f4:	0009                	c.nop	2
    16f6:	0100                	addi	s0,sp,128
    16f8:	2005                	jal	1718 <result+0x38>
    16fa:	08090003          	lb	zero,128(s2)
    16fe:	0100                	addi	s0,sp,128
    1700:	1005                	c.nop	-31
    1702:	04090003          	lb	zero,64(s2)
    1706:	0100                	addi	s0,sp,128
    1708:	1e05                	addi	t3,t3,-31
    170a:	0200                	addi	s0,sp,256
    170c:	0204                	addi	s1,sp,256
    170e:	0306                	slli	t1,t1,0x1
    1710:	097f                	0x97f
    1712:	0004                	0x4
    1714:	0501                	addi	a0,a0,0
    1716:	000d                	c.nop	3
    1718:	0402                	c.slli64	s0
    171a:	090d0303          	lb	t1,144(s10)
    171e:	0004                	0x4
    1720:	0501                	addi	a0,a0,0
    1722:	0020                	addi	s0,sp,8
    1724:	0402                	c.slli64	s0
    1726:	00030603          	lb	a2,0(t1)
    172a:	0009                	c.nop	2
    172c:	0100                	addi	s0,sp,128
    172e:	0200                	addi	s0,sp,256
    1730:	0304                	addi	s1,sp,384
    1732:	02097f03          	0x2097f03
    1736:	0100                	addi	s0,sp,128
    1738:	0200                	addi	s0,sp,256
    173a:	0304                	addi	s1,sp,384
    173c:	04090103          	lb	sp,64(s2)
    1740:	0100                	addi	s0,sp,128
    1742:	2505                	jal	1d62 <random_keys+0x29a>
    1744:	0200                	addi	s0,sp,256
    1746:	0304                	addi	s1,sp,384
    1748:	04090003          	lb	zero,64(s2)
    174c:	0100                	addi	s0,sp,128
    174e:	1505                	addi	a0,a0,-31
    1750:	0200                	addi	s0,sp,256
    1752:	0304                	addi	s1,sp,384
    1754:	04090003          	lb	zero,64(s2)
    1758:	0100                	addi	s0,sp,128
    175a:	2005                	jal	177a <result+0x9a>
    175c:	0200                	addi	s0,sp,256
    175e:	0304                	addi	s1,sp,384
    1760:	0306                	slli	t1,t1,0x1
    1762:	097f                	0x97f
    1764:	0004                	0x4
    1766:	0501                	addi	a0,a0,0
    1768:	0328                	addi	a0,sp,392
    176a:	090c                	addi	a1,sp,144
    176c:	0002                	c.slli64	zero
    176e:	0501                	addi	a0,a0,0
    1770:	0305                	addi	t1,t1,1
    1772:	0902                	c.slli64	s2
    1774:	0000                	unimp
    1776:	0501                	addi	a0,a0,0
    1778:	0628                	addi	a0,sp,776
    177a:	00097e03          	0x97e03
    177e:	0100                	addi	s0,sp,128
    1780:	36090003          	lb	zero,864(s2)
    1784:	0100                	addi	s0,sp,128
    1786:	0905                	addi	s2,s2,1
    1788:	04090203          	lb	tp,64(s2)
    178c:	0100                	addi	s0,sp,128
    178e:	10090103          	lb	sp,256(s2)
    1792:	0100                	addi	s0,sp,128
    1794:	0a097f03          	0xa097f03
    1798:	0100                	addi	s0,sp,128
    179a:	0505                	addi	a0,a0,1
    179c:	0306                	slli	t1,t1,0x1
    179e:	0901                	addi	s2,s2,0
    17a0:	006c                	addi	a1,sp,12
    17a2:	0501                	addi	a0,a0,0
    17a4:	0610                	addi	a2,sp,768
    17a6:	00090603          	lb	a2,0(s2)
    17aa:	0100                	addi	s0,sp,128
    17ac:	0905                	addi	s2,s2,1
    17ae:	04097a03          	0x4097a03
    17b2:	0100                	addi	s0,sp,128
    17b4:	02090603          	lb	a2,32(s2)
    17b8:	0100                	addi	s0,sp,128
    17ba:	0e05                	addi	t3,t3,1
    17bc:	0e090503          	lb	a0,224(s2)
    17c0:	0100                	addi	s0,sp,128
    17c2:	0905                	addi	s2,s2,1
    17c4:	0a097503          	0xa097503
    17c8:	0100                	addi	s0,sp,128
    17ca:	0505                	addi	a0,a0,1
    17cc:	0306                	slli	t1,t1,0x1
    17ce:	0902                	c.slli64	s2
    17d0:	0064                	addi	s1,sp,12
    17d2:	0301                	addi	t1,t1,0
    17d4:	0901                	addi	s2,s2,0
    17d6:	0000                	unimp
    17d8:	0301                	addi	t1,t1,0
    17da:	0901                	addi	s2,s2,0
    17dc:	0000                	unimp
    17de:	0301                	addi	t1,t1,0
    17e0:	0901                	addi	s2,s2,0
    17e2:	0000                	unimp
    17e4:	0301                	addi	t1,t1,0
    17e6:	0901                	addi	s2,s2,0
    17e8:	0000                	unimp
    17ea:	0301                	addi	t1,t1,0
    17ec:	0901                	addi	s2,s2,0
    17ee:	0000                	unimp
    17f0:	0301                	addi	t1,t1,0
    17f2:	0901                	addi	s2,s2,0
    17f4:	0000                	unimp
    17f6:	0301                	addi	t1,t1,0
    17f8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    17fc:	0301                	addi	t1,t1,0
    17fe:	0901                	addi	s2,s2,0
    1800:	0000                	unimp
    1802:	0501                	addi	a0,a0,0
    1804:	060e                	slli	a2,a2,0x3
    1806:	00090003          	lb	zero,0(s2)
    180a:	0100                	addi	s0,sp,128
    180c:	0505                	addi	a0,a0,1
    180e:	0306                	slli	t1,t1,0x1
    1810:	0902                	c.slli64	s2
    1812:	0004                	0x4
    1814:	0501                	addi	a0,a0,0
    1816:	0003060b          	0x3060b
    181a:	0009                	c.nop	2
    181c:	0100                	addi	s0,sp,128
    181e:	1005                	c.nop	-31
    1820:	0200                	addi	s0,sp,256
    1822:	0104                	addi	s1,sp,128
    1824:	0306                	slli	t1,t1,0x1
    1826:	0900                	addi	s0,sp,144
    1828:	0002                	c.slli64	zero
    182a:	0501                	addi	a0,a0,0
    182c:	0005                	c.nop	1
    182e:	0402                	c.slli64	s0
    1830:	0601                	addi	a2,a2,0
    1832:	00090003          	lb	zero,0(s2)
    1836:	0100                	addi	s0,sp,128
    1838:	06090603          	lb	a2,96(s2)
    183c:	0100                	addi	s0,sp,128
    183e:	1105                	addi	sp,sp,-31
    1840:	0200                	addi	s0,sp,256
    1842:	0104                	addi	s1,sp,128
    1844:	0306                	slli	t1,t1,0x1
    1846:	0900                	addi	s0,sp,144
    1848:	0004                	0x4
    184a:	0501                	addi	a0,a0,0
    184c:	0005                	c.nop	1
    184e:	0402                	c.slli64	s0
    1850:	0601                	addi	a2,a2,0
    1852:	00090003          	lb	zero,0(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	0b05                	addi	s6,s6,1
    185a:	04090703          	lb	a4,64(s2)
    185e:	0100                	addi	s0,sp,128
    1860:	1805                	addi	a6,a6,-31
    1862:	02090103          	lb	sp,32(s2)
    1866:	0100                	addi	s0,sp,128
    1868:	1005                	c.nop	-31
    186a:	0200                	addi	s0,sp,256
    186c:	0104                	addi	s1,sp,128
    186e:	0306                	slli	t1,t1,0x1
    1870:	097f                	0x97f
    1872:	0008                	0x8
    1874:	0501                	addi	a0,a0,0
    1876:	0005                	c.nop	1
    1878:	0402                	c.slli64	s0
    187a:	0601                	addi	a2,a2,0
    187c:	00090003          	lb	zero,0(s2)
    1880:	0100                	addi	s0,sp,128
    1882:	1605                	addi	a2,a2,-31
    1884:	08090503          	lb	a0,128(s2)
    1888:	0100                	addi	s0,sp,128
    188a:	1805                	addi	a6,a6,-31
    188c:	08090103          	lb	sp,128(s2)
    1890:	0100                	addi	s0,sp,128
    1892:	1005                	c.nop	-31
    1894:	0200                	addi	s0,sp,256
    1896:	0104                	addi	s1,sp,128
    1898:	0306                	slli	t1,t1,0x1
    189a:	097f                	0x97f
    189c:	0008                	0x8
    189e:	0501                	addi	a0,a0,0
    18a0:	0005                	c.nop	1
    18a2:	0402                	c.slli64	s0
    18a4:	0601                	addi	a2,a2,0
    18a6:	00090003          	lb	zero,0(s2)
    18aa:	0100                	addi	s0,sp,128
    18ac:	0306                	slli	t1,t1,0x1
    18ae:	0905                	addi	s2,s2,1
    18b0:	0004                	0x4
    18b2:	0501                	addi	a0,a0,0
    18b4:	061a                	slli	a2,a2,0x6
    18b6:	00090303          	lb	t1,0(s2)
    18ba:	0100                	addi	s0,sp,128
    18bc:	0a05                	addi	s4,s4,1
    18be:	06097d03          	0x6097d03
    18c2:	0100                	addi	s0,sp,128
    18c4:	0505                	addi	a0,a0,1
    18c6:	0306                	slli	t1,t1,0x1
    18c8:	000c0903          	lb	s2,0(s8)
    18cc:	0501                	addi	a0,a0,0
    18ce:	0618                	addi	a4,sp,768
    18d0:	02090103          	lb	sp,32(s2)
    18d4:	0100                	addi	s0,sp,128
    18d6:	1405                	addi	s0,s0,-31
    18d8:	0200                	addi	s0,sp,256
    18da:	0104                	addi	s1,sp,128
    18dc:	0306                	slli	t1,t1,0x1
    18de:	097f                	0x97f
    18e0:	0008                	0x8
    18e2:	0501                	addi	a0,a0,0
    18e4:	0005                	c.nop	1
    18e6:	0402                	c.slli64	s0
    18e8:	0601                	addi	a2,a2,0
    18ea:	00090003          	lb	zero,0(s2)
    18ee:	0100                	addi	s0,sp,128
    18f0:	0306                	slli	t1,t1,0x1
    18f2:	0906                	slli	s2,s2,0x1
    18f4:	0004                	0x4
    18f6:	0501                	addi	a0,a0,0
    18f8:	060a                	slli	a2,a2,0x2
    18fa:	00090003          	lb	zero,0(s2)
    18fe:	0100                	addi	s0,sp,128
    1900:	0505                	addi	a0,a0,1
    1902:	0306                	slli	t1,t1,0x1
    1904:	0904                	addi	s1,sp,144
    1906:	000c                	0xc
    1908:	0501                	addi	a0,a0,0
    190a:	061a                	slli	a2,a2,0x6
    190c:	06090003          	lb	zero,96(s2)
    1910:	0100                	addi	s0,sp,128
    1912:	1805                	addi	a6,a6,-31
    1914:	02090103          	lb	sp,32(s2)
    1918:	0100                	addi	s0,sp,128
    191a:	1405                	addi	s0,s0,-31
    191c:	0200                	addi	s0,sp,256
    191e:	0104                	addi	s1,sp,128
    1920:	0306                	slli	t1,t1,0x1
    1922:	097f                	0x97f
    1924:	0008                	0x8
    1926:	0501                	addi	a0,a0,0
    1928:	0005                	c.nop	1
    192a:	0402                	c.slli64	s0
    192c:	0601                	addi	a2,a2,0
    192e:	00090003          	lb	zero,0(s2)
    1932:	0100                	addi	s0,sp,128
    1934:	0306                	slli	t1,t1,0x1
    1936:	0905                	addi	s2,s2,1
    1938:	0004                	0x4
    193a:	0501                	addi	a0,a0,0
    193c:	060a                	slli	a2,a2,0x2
    193e:	00090003          	lb	zero,0(s2)
    1942:	0100                	addi	s0,sp,128
    1944:	0505                	addi	a0,a0,1
    1946:	0306                	slli	t1,t1,0x1
    1948:	000a0903          	lb	s2,0(s4)
    194c:	0501                	addi	a0,a0,0
    194e:	0003060b          	0x3060b
    1952:	0209                	addi	tp,tp,2
    1954:	0100                	addi	s0,sp,128
    1956:	1805                	addi	a6,a6,-31
    1958:	02090003          	lb	zero,32(s2)
    195c:	0100                	addi	s0,sp,128
    195e:	1005                	c.nop	-31
    1960:	0200                	addi	s0,sp,256
    1962:	0104                	addi	s1,sp,128
    1964:	0306                	slli	t1,t1,0x1
    1966:	0900                	addi	s0,sp,144
    1968:	0004                	0x4
    196a:	0501                	addi	a0,a0,0
    196c:	0005                	c.nop	1
    196e:	0402                	c.slli64	s0
    1970:	0601                	addi	a2,a2,0
    1972:	00090003          	lb	zero,0(s2)
    1976:	0100                	addi	s0,sp,128
    1978:	0306                	slli	t1,t1,0x1
    197a:	0906                	slli	s2,s2,0x1
    197c:	0004                	0x4
    197e:	0501                	addi	a0,a0,0
    1980:	060a                	slli	a2,a2,0x2
    1982:	00090003          	lb	zero,0(s2)
    1986:	0100                	addi	s0,sp,128
    1988:	0505                	addi	a0,a0,1
    198a:	0306                	slli	t1,t1,0x1
    198c:	0904                	addi	s1,sp,144
    198e:	0008                	0x8
    1990:	0501                	addi	a0,a0,0
    1992:	061a                	slli	a2,a2,0x6
    1994:	00090003          	lb	zero,0(s2)
    1998:	0100                	addi	s0,sp,128
    199a:	1805                	addi	a6,a6,-31
    199c:	0a090103          	lb	sp,160(s2)
    19a0:	0100                	addi	s0,sp,128
    19a2:	1405                	addi	s0,s0,-31
    19a4:	0200                	addi	s0,sp,256
    19a6:	0104                	addi	s1,sp,128
    19a8:	0306                	slli	t1,t1,0x1
    19aa:	097f                	0x97f
    19ac:	0008                	0x8
    19ae:	0501                	addi	a0,a0,0
    19b0:	0005                	c.nop	1
    19b2:	0402                	c.slli64	s0
    19b4:	0601                	addi	a2,a2,0
    19b6:	02090003          	lb	zero,32(s2)
    19ba:	0100                	addi	s0,sp,128
    19bc:	1a05                	addi	s4,s4,-31
    19be:	04090503          	lb	a0,64(s2)
    19c2:	0100                	addi	s0,sp,128
    19c4:	1805                	addi	a6,a6,-31
    19c6:	04090103          	lb	sp,64(s2)
    19ca:	0100                	addi	s0,sp,128
    19cc:	1a05                	addi	s4,s4,-31
    19ce:	08097f03          	0x8097f03
    19d2:	0100                	addi	s0,sp,128
    19d4:	1405                	addi	s0,s0,-31
    19d6:	0200                	addi	s0,sp,256
    19d8:	0104                	addi	s1,sp,128
    19da:	0306                	slli	t1,t1,0x1
    19dc:	0900                	addi	s0,sp,144
    19de:	0008                	0x8
    19e0:	0501                	addi	a0,a0,0
    19e2:	0005                	c.nop	1
    19e4:	0402                	c.slli64	s0
    19e6:	0601                	addi	a2,a2,0
    19e8:	00090003          	lb	zero,0(s2)
    19ec:	0100                	addi	s0,sp,128
    19ee:	0306                	slli	t1,t1,0x1
    19f0:	0906                	slli	s2,s2,0x1
    19f2:	0004                	0x4
    19f4:	0301                	addi	t1,t1,0
    19f6:	0902                	c.slli64	s2
    19f8:	0000                	unimp
    19fa:	0501                	addi	a0,a0,0
    19fc:	0601                	addi	a2,a2,0
    19fe:	00090103          	lb	sp,0(s2)
    1a02:	0100                	addi	s0,sp,128
    1a04:	0905                	addi	s2,s2,1
    1a06:	0200                	addi	s0,sp,256
    1a08:	0304                	addi	s1,sp,384
    1a0a:	0306                	slli	t1,t1,0x1
    1a0c:	7fbd                	lui	t6,0xfffef
    1a0e:	4009                	c.li	zero,2
    1a10:	0100                	addi	s0,sp,128
    1a12:	1205                	addi	tp,tp,-31
    1a14:	0200                	addi	s0,sp,256
    1a16:	0304                	addi	s1,sp,384
    1a18:	0306                	slli	t1,t1,0x1
    1a1a:	0900                	addi	s0,sp,144
    1a1c:	0000                	unimp
    1a1e:	0501                	addi	a0,a0,0
    1a20:	04020017          	auipc	zero,0x4020
    1a24:	7f030603          	lb	a2,2032(t1)
    1a28:	0a09                	addi	s4,s4,2
    1a2a:	0100                	addi	s0,sp,128
    1a2c:	0905                	addi	s2,s2,1
    1a2e:	0200                	addi	s0,sp,256
    1a30:	0304                	addi	s1,sp,384
    1a32:	04090703          	lb	a4,64(s2)
    1a36:	0100                	addi	s0,sp,128
    1a38:	0e05                	addi	t3,t3,1
    1a3a:	0200                	addi	s0,sp,256
    1a3c:	0304                	addi	s1,sp,384
    1a3e:	0306                	slli	t1,t1,0x1
    1a40:	0900                	addi	s0,sp,144
    1a42:	0004                	0x4
    1a44:	0501                	addi	a0,a0,0
    1a46:	0009                	c.nop	2
    1a48:	0402                	c.slli64	s0
    1a4a:	01030603          	lb	a2,16(t1)
    1a4e:	0a09                	addi	s4,s4,2
    1a50:	0100                	addi	s0,sp,128
    1a52:	0e05                	addi	t3,t3,1
    1a54:	0200                	addi	s0,sp,256
    1a56:	0304                	addi	s1,sp,384
    1a58:	0306                	slli	t1,t1,0x1
    1a5a:	0900                	addi	s0,sp,144
    1a5c:	0000                	unimp
    1a5e:	0501                	addi	a0,a0,0
    1a60:	0019                	c.nop	6
    1a62:	0402                	c.slli64	s0
    1a64:	7e030603          	lb	a2,2016(t1)
    1a68:	0a09                	addi	s4,s4,2
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	0905                	addi	s2,s2,1
    1a6e:	0200                	addi	s0,sp,256
    1a70:	0304                	addi	s1,sp,384
    1a72:	04090803          	lb	a6,64(s2)
    1a76:	0100                	addi	s0,sp,128
    1a78:	1b05                	addi	s6,s6,-31
    1a7a:	0200                	addi	s0,sp,256
    1a7c:	0304                	addi	s1,sp,384
    1a7e:	0306                	slli	t1,t1,0x1
    1a80:	0900                	addi	s0,sp,144
    1a82:	0004                	0x4
    1a84:	0501                	addi	a0,a0,0
    1a86:	0018                	0x18
    1a88:	0402                	c.slli64	s0
    1a8a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a8e:	0004                	0x4
    1a90:	0501                	addi	a0,a0,0
    1a92:	0402001b          	0x402001b
    1a96:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1a9a:	0004                	0x4
    1a9c:	0501                	addi	a0,a0,0
    1a9e:	0018                	0x18
    1aa0:	0402                	c.slli64	s0
    1aa2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1aa6:	0002                	c.slli64	zero
    1aa8:	0501                	addi	a0,a0,0
    1aaa:	04020017          	auipc	zero,0x4020
    1aae:	097f0303          	lb	t1,151(t5)
    1ab2:	0002                	c.slli64	zero
    1ab4:	0501                	addi	a0,a0,0
    1ab6:	0018                	0x18
    1ab8:	0402                	c.slli64	s0
    1aba:	09010303          	lb	t1,144(sp)
    1abe:	0002                	c.slli64	zero
    1ac0:	0501                	addi	a0,a0,0
    1ac2:	04020017          	auipc	zero,0x4020
    1ac6:	7f030603          	lb	a2,2032(t1)
    1aca:	0209                	addi	tp,tp,2
    1acc:	0100                	addi	s0,sp,128
    1ace:	0905                	addi	s2,s2,1
    1ad0:	0200                	addi	s0,sp,256
    1ad2:	0304                	addi	s1,sp,384
    1ad4:	02090603          	lb	a2,32(s2)
    1ad8:	0100                	addi	s0,sp,128
    1ada:	1805                	addi	a6,a6,-31
    1adc:	0200                	addi	s0,sp,256
    1ade:	0304                	addi	s1,sp,384
    1ae0:	0306                	slli	t1,t1,0x1
    1ae2:	0900                	addi	s0,sp,144
    1ae4:	0000                	unimp
    1ae6:	0501                	addi	a0,a0,0
    1ae8:	0402001b          	0x402001b
    1aec:	7f030603          	lb	a2,2032(t1)
    1af0:	0a09                	addi	s4,s4,2
    1af2:	0100                	addi	s0,sp,128
    1af4:	0905                	addi	s2,s2,1
    1af6:	0200                	addi	s0,sp,256
    1af8:	0304                	addi	s1,sp,384
    1afa:	06090903          	lb	s2,96(s2)
    1afe:	0100                	addi	s0,sp,128
    1b00:	1c05                	addi	s8,s8,-31
    1b02:	0200                	addi	s0,sp,256
    1b04:	0304                	addi	s1,sp,384
    1b06:	0306                	slli	t1,t1,0x1
    1b08:	0900                	addi	s0,sp,144
    1b0a:	0000                	unimp
    1b0c:	0501                	addi	a0,a0,0
    1b0e:	0018                	0x18
    1b10:	0402                	c.slli64	s0
    1b12:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1b16:	0002                	c.slli64	zero
    1b18:	0501                	addi	a0,a0,0
    1b1a:	001f 0402 0603      	0x6030402001f
    1b20:	08097f03          	0x8097f03
    1b24:	0100                	addi	s0,sp,128
    1b26:	0905                	addi	s2,s2,1
    1b28:	0200                	addi	s0,sp,256
    1b2a:	0304                	addi	s1,sp,384
    1b2c:	06090b03          	lb	s6,96(s2)
    1b30:	0100                	addi	s0,sp,128
    1b32:	1c05                	addi	s8,s8,-31
    1b34:	0200                	addi	s0,sp,256
    1b36:	0304                	addi	s1,sp,384
    1b38:	0306                	slli	t1,t1,0x1
    1b3a:	0900                	addi	s0,sp,144
    1b3c:	0004                	0x4
    1b3e:	0501                	addi	a0,a0,0
    1b40:	0018                	0x18
    1b42:	0402                	c.slli64	s0
    1b44:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1b48:	0008                	0x8
    1b4a:	0501                	addi	a0,a0,0
    1b4c:	001f 0402 0303      	0x3030402001f
    1b52:	097f                	0x97f
    1b54:	0002                	c.slli64	zero
    1b56:	0501                	addi	a0,a0,0
    1b58:	0018                	0x18
    1b5a:	0402                	c.slli64	s0
    1b5c:	09010303          	lb	t1,144(sp)
    1b60:	0002                	c.slli64	zero
    1b62:	0501                	addi	a0,a0,0
    1b64:	001f 0402 0603      	0x6030402001f
    1b6a:	02097f03          	0x2097f03
    1b6e:	0100                	addi	s0,sp,128
    1b70:	0905                	addi	s2,s2,1
    1b72:	0200                	addi	s0,sp,256
    1b74:	0304                	addi	s1,sp,384
    1b76:	02090903          	lb	s2,32(s2)
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	1605                	addi	a2,a2,-31
    1b7e:	0200                	addi	s0,sp,256
    1b80:	0304                	addi	s1,sp,384
    1b82:	0306                	slli	t1,t1,0x1
    1b84:	0900                	addi	s0,sp,144
    1b86:	0000                	unimp
    1b88:	0501                	addi	a0,a0,0
    1b8a:	001d                	c.nop	7
    1b8c:	0402                	c.slli64	s0
    1b8e:	097f0303          	lb	t1,151(t5)
    1b92:	0002                	c.slli64	zero
    1b94:	0501                	addi	a0,a0,0
    1b96:	0016                	c.slli	zero,0x5
    1b98:	0402                	c.slli64	s0
    1b9a:	09010303          	lb	t1,144(sp)
    1b9e:	0004                	0x4
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	0402000f          	0x402000f
    1ba6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1baa:	0004                	0x4
    1bac:	0501                	addi	a0,a0,0
    1bae:	001d                	c.nop	7
    1bb0:	0402                	c.slli64	s0
    1bb2:	7f030603          	lb	a2,2032(t1)
    1bb6:	0409                	addi	s0,s0,2
    1bb8:	0100                	addi	s0,sp,128
    1bba:	0905                	addi	s2,s2,1
    1bbc:	0200                	addi	s0,sp,256
    1bbe:	0304                	addi	s1,sp,384
    1bc0:	02090b03          	lb	s6,32(s2)
    1bc4:	0100                	addi	s0,sp,128
    1bc6:	1c05                	addi	s8,s8,-31
    1bc8:	0200                	addi	s0,sp,256
    1bca:	0304                	addi	s1,sp,384
    1bcc:	0306                	slli	t1,t1,0x1
    1bce:	0900                	addi	s0,sp,144
    1bd0:	0000                	unimp
    1bd2:	0501                	addi	a0,a0,0
    1bd4:	0018                	0x18
    1bd6:	0402                	c.slli64	s0
    1bd8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1bdc:	0004                	0x4
    1bde:	0501                	addi	a0,a0,0
    1be0:	001f 0402 0603      	0x6030402001f
    1be6:	08097f03          	0x8097f03
    1bea:	0100                	addi	s0,sp,128
    1bec:	0905                	addi	s2,s2,1
    1bee:	0200                	addi	s0,sp,256
    1bf0:	0304                	addi	s1,sp,384
    1bf2:	04090603          	lb	a2,64(s2)
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	1805                	addi	a6,a6,-31
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0304                	addi	s1,sp,384
    1bfe:	0306                	slli	t1,t1,0x1
    1c00:	0900                	addi	s0,sp,144
    1c02:	0004                	0x4
    1c04:	0501                	addi	a0,a0,0
    1c06:	001f 0402 0303      	0x3030402001f
    1c0c:	0900                	addi	s0,sp,144
    1c0e:	0004                	0x4
    1c10:	0501                	addi	a0,a0,0
    1c12:	0018                	0x18
    1c14:	0402                	c.slli64	s0
    1c16:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1c1a:	0004                	0x4
    1c1c:	0501                	addi	a0,a0,0
    1c1e:	0021                	c.nop	8
    1c20:	0402                	c.slli64	s0
    1c22:	097f0303          	lb	t1,151(t5)
    1c26:	0002                	c.slli64	zero
    1c28:	0501                	addi	a0,a0,0
    1c2a:	0018                	0x18
    1c2c:	0402                	c.slli64	s0
    1c2e:	09010303          	lb	t1,144(sp)
    1c32:	0002                	c.slli64	zero
    1c34:	0501                	addi	a0,a0,0
    1c36:	0021                	c.nop	8
    1c38:	0402                	c.slli64	s0
    1c3a:	7f030603          	lb	a2,2032(t1)
    1c3e:	0209                	addi	tp,tp,2
    1c40:	0100                	addi	s0,sp,128
    1c42:	4b05                	li	s6,1
    1c44:	02090c03          	lb	s8,32(s2)
    1c48:	0100                	addi	s0,sp,128
    1c4a:	0505                	addi	a0,a0,1
    1c4c:	00090203          	lb	tp,0(s2)
    1c50:	0100                	addi	s0,sp,128
    1c52:	00090103          	lb	sp,0(s2)
    1c56:	0100                	addi	s0,sp,128
    1c58:	00090203          	lb	tp,0(s2)
    1c5c:	0100                	addi	s0,sp,128
    1c5e:	4b05                	li	s6,1
    1c60:	0306                	slli	t1,t1,0x1
    1c62:	0000097b          	0x97b
    1c66:	0501                	addi	a0,a0,0
    1c68:	0309                	addi	t1,t1,2
    1c6a:	0905                	addi	s2,s2,1
    1c6c:	000c                	0xc
    1c6e:	0501                	addi	a0,a0,0
    1c70:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1c74:	0004                	0x4
    1c76:	0501                	addi	a0,a0,0
    1c78:	0309                	addi	t1,t1,2
    1c7a:	0905                	addi	s2,s2,1
    1c7c:	0002                	c.slli64	zero
    1c7e:	0501                	addi	a0,a0,0
    1c80:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1c84:	000a                	c.slli	zero,0x2
    1c86:	0301                	addi	t1,t1,0
    1c88:	0900                	addi	s0,sp,144
    1c8a:	0006                	c.slli	zero,0x1
    1c8c:	0501                	addi	a0,a0,0
    1c8e:	0309                	addi	t1,t1,2
    1c90:	0905                	addi	s2,s2,1
    1c92:	0004                	0x4
    1c94:	0501                	addi	a0,a0,0
    1c96:	0605                	addi	a2,a2,1
    1c98:	02090103          	lb	sp,32(s2)
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	00090103          	lb	sp,0(s2)
    1ca2:	0100                	addi	s0,sp,128
    1ca4:	00090303          	lb	t1,0(s2)
    1ca8:	0100                	addi	s0,sp,128
    1caa:	0c05                	addi	s8,s8,1
    1cac:	0306                	slli	t1,t1,0x1
    1cae:	0900                	addi	s0,sp,144
    1cb0:	0000                	unimp
    1cb2:	0501                	addi	a0,a0,0
    1cb4:	0301                	addi	t1,t1,0
    1cb6:	00120907          	0x120907
    1cba:	0501                	addi	a0,a0,0
    1cbc:	030c                	addi	a1,sp,384
    1cbe:	0979                	addi	s2,s2,30
    1cc0:	0006                	c.slli	zero,0x1
    1cc2:	0501                	addi	a0,a0,0
    1cc4:	0601                	addi	a2,a2,0
    1cc6:	02090703          	lb	a4,32(s2)
    1cca:	0100                	addi	s0,sp,128
    1ccc:	0a05                	addi	s4,s4,1
    1cce:	0306                	slli	t1,t1,0x1
    1cd0:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1cd4:	0501                	addi	a0,a0,0
    1cd6:	0301                	addi	t1,t1,0
    1cd8:	097d                	addi	s2,s2,31
    1cda:	0004                	0x4
    1cdc:	0501                	addi	a0,a0,0
    1cde:	0605                	addi	a2,a2,1
    1ce0:	04090303          	lb	t1,64(s2)
    1ce4:	0100                	addi	s0,sp,128
    1ce6:	0a05                	addi	s4,s4,1
    1ce8:	0306                	slli	t1,t1,0x1
    1cea:	0900                	addi	s0,sp,144
    1cec:	0000                	unimp
    1cee:	0501                	addi	a0,a0,0
    1cf0:	0605                	addi	a2,a2,1
    1cf2:	0e090203          	lb	tp,224(s2)
    1cf6:	0100                	addi	s0,sp,128
    1cf8:	1a05                	addi	s4,s4,-31
    1cfa:	0306                	slli	t1,t1,0x1
    1cfc:	0900                	addi	s0,sp,144
    1cfe:	0000                	unimp
    1d00:	0501                	addi	a0,a0,0
    1d02:	0014                	0x14
    1d04:	0402                	c.slli64	s0
    1d06:	0601                	addi	a2,a2,0
    1d08:	08090003          	lb	zero,128(s2)
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	0505                	addi	a0,a0,1
    1d10:	0200                	addi	s0,sp,256
    1d12:	0104                	addi	s1,sp,128
    1d14:	0306                	slli	t1,t1,0x1
    1d16:	0900                	addi	s0,sp,144
    1d18:	0000                	unimp
    1d1a:	0501                	addi	a0,a0,0
    1d1c:	0301                	addi	t1,t1,0
    1d1e:	0909                	addi	s2,s2,2
    1d20:	0004                	0x4
    1d22:	0501                	addi	a0,a0,0
    1d24:	0009                	c.nop	2
    1d26:	0402                	c.slli64	s0
    1d28:	78030603          	lb	a2,1920(t1)
    1d2c:	1009                	c.nop	-30
    1d2e:	0100                	addi	s0,sp,128
    1d30:	1905                	addi	s2,s2,-31
    1d32:	0200                	addi	s0,sp,256
    1d34:	0304                	addi	s1,sp,384
    1d36:	0306                	slli	t1,t1,0x1
    1d38:	0900                	addi	s0,sp,144
    1d3a:	0000                	unimp
    1d3c:	0501                	addi	a0,a0,0
    1d3e:	001f 0402 0303      	0x3030402001f
    1d44:	097f                	0x97f
    1d46:	0008                	0x8
    1d48:	0501                	addi	a0,a0,0
    1d4a:	0015                	c.nop	5
    1d4c:	0402                	c.slli64	s0
    1d4e:	09010303          	lb	t1,144(sp)
    1d52:	0004                	0x4
    1d54:	0501                	addi	a0,a0,0
    1d56:	001f 0402 0603      	0x6030402001f
    1d5c:	04097f03          	0x4097f03
    1d60:	0100                	addi	s0,sp,128
    1d62:	6c05                	lui	s8,0x1
    1d64:	02090c03          	lb	s8,32(s2)
    1d68:	0100                	addi	s0,sp,128
    1d6a:	0505                	addi	a0,a0,1
    1d6c:	00090203          	lb	tp,0(s2)
    1d70:	0100                	addi	s0,sp,128
    1d72:	00090103          	lb	sp,0(s2)
    1d76:	0100                	addi	s0,sp,128
    1d78:	00090103          	lb	sp,0(s2)
    1d7c:	0100                	addi	s0,sp,128
    1d7e:	00090103          	lb	sp,0(s2)
    1d82:	0100                	addi	s0,sp,128
    1d84:	00090103          	lb	sp,0(s2)
    1d88:	0100                	addi	s0,sp,128
    1d8a:	00090103          	lb	sp,0(s2)
    1d8e:	0100                	addi	s0,sp,128
    1d90:	00090303          	lb	t1,0(s2)
    1d94:	0100                	addi	s0,sp,128
    1d96:	6c05                	lui	s8,0x1
    1d98:	0306                	slli	t1,t1,0x1
    1d9a:	0976                	slli	s2,s2,0x1d
    1d9c:	0000                	unimp
    1d9e:	0501                	addi	a0,a0,0
    1da0:	031e                	slli	t1,t1,0x7
    1da2:	0911                	addi	s2,s2,4
    1da4:	0008                	0x8
    1da6:	0501                	addi	a0,a0,0
    1da8:	036c                	addi	a1,sp,396
    1daa:	0006096f          	jal	s2,61daa <_stack_start+0x51daa>
    1dae:	0501                	addi	a0,a0,0
    1db0:	0309                	addi	t1,t1,2
    1db2:	090a                	slli	s2,s2,0x2
    1db4:	000a                	c.slli	zero,0x2
    1db6:	0501                	addi	a0,a0,0
    1db8:	036c                	addi	a1,sp,396
    1dba:	0976                	slli	s2,s2,0x1d
    1dbc:	0004                	0x4
    1dbe:	0501                	addi	a0,a0,0
    1dc0:	0309                	addi	t1,t1,2
    1dc2:	090a                	slli	s2,s2,0x2
    1dc4:	0004                	0x4
    1dc6:	0501                	addi	a0,a0,0
    1dc8:	036c                	addi	a1,sp,396
    1dca:	0976                	slli	s2,s2,0x1d
    1dcc:	0004                	0x4
    1dce:	0301                	addi	t1,t1,0
    1dd0:	0900                	addi	s0,sp,144
    1dd2:	0008                	0x8
    1dd4:	0501                	addi	a0,a0,0
    1dd6:	030a                	slli	t1,t1,0x2
    1dd8:	090e                	slli	s2,s2,0x3
    1dda:	0002                	c.slli64	zero
    1ddc:	0501                	addi	a0,a0,0
    1dde:	0309                	addi	t1,t1,2
    1de0:	097c                	addi	a5,sp,156
    1de2:	0004                	0x4
    1de4:	0501                	addi	a0,a0,0
    1de6:	0605                	addi	a2,a2,1
    1de8:	04090403          	lb	s0,64(s2)
    1dec:	0100                	addi	s0,sp,128
    1dee:	0a05                	addi	s4,s4,1
    1df0:	0306                	slli	t1,t1,0x1
    1df2:	0900                	addi	s0,sp,144
    1df4:	0000                	unimp
    1df6:	0501                	addi	a0,a0,0
    1df8:	0605                	addi	a2,a2,1
    1dfa:	10090303          	lb	t1,256(s2)
    1dfe:	0100                	addi	s0,sp,128
    1e00:	0b05                	addi	s6,s6,1
    1e02:	0306                	slli	t1,t1,0x1
    1e04:	0900                	addi	s0,sp,144
    1e06:	0004                	0x4
    1e08:	0501                	addi	a0,a0,0
    1e0a:	0014                	0x14
    1e0c:	0402                	c.slli64	s0
    1e0e:	0601                	addi	a2,a2,0
    1e10:	02090003          	lb	zero,32(s2)
    1e14:	0100                	addi	s0,sp,128
    1e16:	0505                	addi	a0,a0,1
    1e18:	0200                	addi	s0,sp,256
    1e1a:	0104                	addi	s1,sp,128
    1e1c:	0306                	slli	t1,t1,0x1
    1e1e:	0900                	addi	s0,sp,144
    1e20:	0000                	unimp
    1e22:	0501                	addi	a0,a0,0
    1e24:	0316                	slli	t1,t1,0x5
    1e26:	0906                	slli	s2,s2,0x1
    1e28:	0004                	0x4
    1e2a:	0501                	addi	a0,a0,0
    1e2c:	030c                	addi	a1,sp,384
    1e2e:	097f                	0x97f
    1e30:	0006                	c.slli	zero,0x1
    1e32:	0501                	addi	a0,a0,0
    1e34:	0011                	c.nop	4
    1e36:	0402                	c.slli64	s0
    1e38:	0601                	addi	a2,a2,0
    1e3a:	02090003          	lb	zero,32(s2)
    1e3e:	0100                	addi	s0,sp,128
    1e40:	0505                	addi	a0,a0,1
    1e42:	0200                	addi	s0,sp,256
    1e44:	0104                	addi	s1,sp,128
    1e46:	0306                	slli	t1,t1,0x1
    1e48:	0900                	addi	s0,sp,144
    1e4a:	0000                	unimp
    1e4c:	0601                	addi	a2,a2,0
    1e4e:	04090803          	lb	a6,64(s2)
    1e52:	0100                	addi	s0,sp,128
    1e54:	0905                	addi	s2,s2,1
    1e56:	0306                	slli	t1,t1,0x1
    1e58:	0900                	addi	s0,sp,144
    1e5a:	0000                	unimp
    1e5c:	0501                	addi	a0,a0,0
    1e5e:	0605                	addi	a2,a2,1
    1e60:	0c090403          	lb	s0,192(s2)
    1e64:	0100                	addi	s0,sp,128
    1e66:	0a05                	addi	s4,s4,1
    1e68:	0306                	slli	t1,t1,0x1
    1e6a:	0900                	addi	s0,sp,144
    1e6c:	0000                	unimp
    1e6e:	0501                	addi	a0,a0,0
    1e70:	0605                	addi	a2,a2,1
    1e72:	0a090103          	lb	sp,160(s2)
    1e76:	0100                	addi	s0,sp,128
    1e78:	1405                	addi	s0,s0,-31
    1e7a:	0200                	addi	s0,sp,256
    1e7c:	0104                	addi	s1,sp,128
    1e7e:	02090003          	lb	zero,32(s2)
    1e82:	0100                	addi	s0,sp,128
    1e84:	0505                	addi	a0,a0,1
    1e86:	0200                	addi	s0,sp,256
    1e88:	0104                	addi	s1,sp,128
    1e8a:	0306                	slli	t1,t1,0x1
    1e8c:	0900                	addi	s0,sp,144
    1e8e:	0000                	unimp
    1e90:	0501                	addi	a0,a0,0
    1e92:	0301                	addi	t1,t1,0
    1e94:	00040907          	0x40907
    1e98:	0501                	addi	a0,a0,0
    1e9a:	0009                	c.nop	2
    1e9c:	0402                	c.slli64	s0
    1e9e:	68030603          	lb	a2,1664(t1)
    1ea2:	1609                	addi	a2,a2,-30
    1ea4:	0100                	addi	s0,sp,128
    1ea6:	1905                	addi	s2,s2,-31
    1ea8:	0200                	addi	s0,sp,256
    1eaa:	0304                	addi	s1,sp,384
    1eac:	0306                	slli	t1,t1,0x1
    1eae:	0900                	addi	s0,sp,144
    1eb0:	0000                	unimp
    1eb2:	0501                	addi	a0,a0,0
    1eb4:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1eb8:	097f0303          	lb	t1,151(t5)
    1ebc:	0008                	0x8
    1ebe:	0501                	addi	a0,a0,0
    1ec0:	0015                	c.nop	5
    1ec2:	0402                	c.slli64	s0
    1ec4:	09010303          	lb	t1,144(sp)
    1ec8:	0004                	0x4
    1eca:	0501                	addi	a0,a0,0
    1ecc:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1ed0:	7f030603          	lb	a2,2032(t1)
    1ed4:	0409                	addi	s0,s0,2
    1ed6:	0100                	addi	s0,sp,128
    1ed8:	0905                	addi	s2,s2,1
    1eda:	02090603          	lb	a2,32(s2)
    1ede:	0100                	addi	s0,sp,128
    1ee0:	0e05                	addi	t3,t3,1
    1ee2:	0306                	slli	t1,t1,0x1
    1ee4:	0900                	addi	s0,sp,144
    1ee6:	0000                	unimp
    1ee8:	0501                	addi	a0,a0,0
    1eea:	0900030b          	0x900030b
    1eee:	0002                	c.slli64	zero
    1ef0:	0501                	addi	a0,a0,0
    1ef2:	060d                	addi	a2,a2,3
    1ef4:	04090303          	lb	t1,64(s2)
    1ef8:	0100                	addi	s0,sp,128
    1efa:	1905                	addi	s2,s2,-31
    1efc:	0306                	slli	t1,t1,0x1
    1efe:	0900                	addi	s0,sp,144
    1f00:	0000                	unimp
    1f02:	0501                	addi	a0,a0,0
    1f04:	09000313          	li	t1,144
    1f08:	0004                	0x4
    1f0a:	0501                	addi	a0,a0,0
    1f0c:	0018                	0x18
    1f0e:	0402                	c.slli64	s0
    1f10:	0602                	c.slli64	a2
    1f12:	02097c03          	0x2097c03
    1f16:	0100                	addi	s0,sp,128
    1f18:	0905                	addi	s2,s2,1
    1f1a:	0200                	addi	s0,sp,256
    1f1c:	0304                	addi	s1,sp,384
    1f1e:	06090e03          	lb	t3,96(s2)
    1f22:	0100                	addi	s0,sp,128
    1f24:	1905                	addi	s2,s2,-31
    1f26:	0200                	addi	s0,sp,256
    1f28:	0304                	addi	s1,sp,384
    1f2a:	0306                	slli	t1,t1,0x1
    1f2c:	0900                	addi	s0,sp,144
    1f2e:	0000                	unimp
    1f30:	0501                	addi	a0,a0,0
    1f32:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f36:	097f0303          	lb	t1,151(t5)
    1f3a:	0008                	0x8
    1f3c:	0501                	addi	a0,a0,0
    1f3e:	0015                	c.nop	5
    1f40:	0402                	c.slli64	s0
    1f42:	09010303          	lb	t1,144(sp)
    1f46:	0004                	0x4
    1f48:	0501                	addi	a0,a0,0
    1f4a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1f4e:	7f030603          	lb	a2,2032(t1)
    1f52:	0409                	addi	s0,s0,2
    1f54:	0100                	addi	s0,sp,128
    1f56:	0209                	addi	tp,tp,2
    1f58:	0000                	unimp
    1f5a:	0101                	addi	sp,sp,0
    1f5c:	0b05                	addi	s6,s6,1
    1f5e:	0500                	addi	s0,sp,640
    1f60:	6402                	flw	fs0,0(sp)
    1f62:	0300000f          	fence	rw,unknown
    1f66:	05010693          	addi	a3,sp,80
    1f6a:	0305                	addi	t1,t1,1
    1f6c:	0901                	addi	s2,s2,0
    1f6e:	0000                	unimp
    1f70:	0301                	addi	t1,t1,0
    1f72:	0901                	addi	s2,s2,0
    1f74:	0000                	unimp
    1f76:	0301                	addi	t1,t1,0
    1f78:	0901                	addi	s2,s2,0
    1f7a:	0000                	unimp
    1f7c:	0301                	addi	t1,t1,0
    1f7e:	0901                	addi	s2,s2,0
    1f80:	0000                	unimp
    1f82:	0301                	addi	t1,t1,0
    1f84:	0901                	addi	s2,s2,0
    1f86:	0000                	unimp
    1f88:	0301                	addi	t1,t1,0
    1f8a:	0901                	addi	s2,s2,0
    1f8c:	0000                	unimp
    1f8e:	0301                	addi	t1,t1,0
    1f90:	0902                	c.slli64	s2
    1f92:	0000                	unimp
    1f94:	0501                	addi	a0,a0,0
    1f96:	7803060b          	0x7803060b
    1f9a:	0009                	c.nop	2
    1f9c:	0100                	addi	s0,sp,128
    1f9e:	0905                	addi	s2,s2,1
    1fa0:	04090803          	lb	a6,64(s2)
    1fa4:	0100                	addi	s0,sp,128
    1fa6:	0b05                	addi	s6,s6,1
    1fa8:	0e097803          	0xe097803
    1fac:	0100                	addi	s0,sp,128
    1fae:	1205                	addi	tp,tp,-31
    1fb0:	10091803          	lh	a6,256(s2)
    1fb4:	0100                	addi	s0,sp,128
    1fb6:	0905                	addi	s2,s2,1
    1fb8:	04097003          	0x4097003
    1fbc:	0100                	addi	s0,sp,128
    1fbe:	0505                	addi	a0,a0,1
    1fc0:	0306                	slli	t1,t1,0x1
    1fc2:	0901                	addi	s2,s2,0
    1fc4:	0002                	c.slli64	zero
    1fc6:	0301                	addi	t1,t1,0
    1fc8:	0901                	addi	s2,s2,0
    1fca:	0000                	unimp
    1fcc:	0301                	addi	t1,t1,0
    1fce:	0901                	addi	s2,s2,0
    1fd0:	0000                	unimp
    1fd2:	0301                	addi	t1,t1,0
    1fd4:	0901                	addi	s2,s2,0
    1fd6:	0000                	unimp
    1fd8:	0301                	addi	t1,t1,0
    1fda:	0901                	addi	s2,s2,0
    1fdc:	0000                	unimp
    1fde:	0301                	addi	t1,t1,0
    1fe0:	0901                	addi	s2,s2,0
    1fe2:	0000                	unimp
    1fe4:	0301                	addi	t1,t1,0
    1fe6:	0901                	addi	s2,s2,0
    1fe8:	0000                	unimp
    1fea:	0301                	addi	t1,t1,0
    1fec:	0909                	addi	s2,s2,2
    1fee:	0000                	unimp
    1ff0:	0501                	addi	a0,a0,0
    1ff2:	0612                	slli	a2,a2,0x4
    1ff4:	00090003          	lb	zero,0(s2)
    1ff8:	0100                	addi	s0,sp,128
    1ffa:	0c05                	addi	s8,s8,1
    1ffc:	0c090103          	lb	sp,192(s2)
    2000:	0100                	addi	s0,sp,128
    2002:	1205                	addi	tp,tp,-31
    2004:	0a097f03          	0xa097f03
    2008:	0100                	addi	s0,sp,128
    200a:	0505                	addi	a0,a0,1
    200c:	0306                	slli	t1,t1,0x1
    200e:	0901                	addi	s2,s2,0
    2010:	0002                	c.slli64	zero
    2012:	0501                	addi	a0,a0,0
    2014:	0612                	slli	a2,a2,0x4
    2016:	00090103          	lb	sp,0(s2)
    201a:	0100                	addi	s0,sp,128
    201c:	0c05                	addi	s8,s8,1
    201e:	04097f03          	0x4097f03
    2022:	0100                	addi	s0,sp,128
    2024:	0505                	addi	a0,a0,1
    2026:	0306                	slli	t1,t1,0x1
    2028:	0901                	addi	s2,s2,0
    202a:	0002                	c.slli64	zero
    202c:	0501                	addi	a0,a0,0
    202e:	0612                	slli	a2,a2,0x4
    2030:	00090003          	lb	zero,0(s2)
    2034:	0100                	addi	s0,sp,128
    2036:	0505                	addi	a0,a0,1
    2038:	0306                	slli	t1,t1,0x1
    203a:	0902                	c.slli64	s2
    203c:	0004                	0x4
    203e:	0501                	addi	a0,a0,0
    2040:	0310                	addi	a2,sp,384
    2042:	0900                	addi	s0,sp,144
    2044:	0000                	unimp
    2046:	0501                	addi	a0,a0,0
    2048:	0605                	addi	a2,a2,1
    204a:	00090003          	lb	zero,0(s2)
    204e:	0100                	addi	s0,sp,128
    2050:	0905                	addi	s2,s2,1
    2052:	0200                	addi	s0,sp,256
    2054:	0304                	addi	s1,sp,384
    2056:	0306                	slli	t1,t1,0x1
    2058:	0902                	c.slli64	s2
    205a:	0004                	0x4
    205c:	0501                	addi	a0,a0,0
    205e:	001f 0402 0603      	0x6030402001f
    2064:	00090003          	lb	zero,0(s2)
    2068:	0100                	addi	s0,sp,128
    206a:	1905                	addi	s2,s2,-31
    206c:	0200                	addi	s0,sp,256
    206e:	0304                	addi	s1,sp,384
    2070:	06090003          	lb	zero,96(s2)
    2074:	0100                	addi	s0,sp,128
    2076:	1705                	addi	a4,a4,-31
    2078:	0200                	addi	s0,sp,256
    207a:	0304                	addi	s1,sp,384
    207c:	0306                	slli	t1,t1,0x1
    207e:	097e                	slli	s2,s2,0x1f
    2080:	0006                	c.slli	zero,0x1
    2082:	0501                	addi	a0,a0,0
    2084:	0010                	0x10
    2086:	0402                	c.slli64	s0
    2088:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    208c:	0000                	unimp
    208e:	0501                	addi	a0,a0,0
    2090:	0005                	c.nop	1
    2092:	0402                	c.slli64	s0
    2094:	00030603          	lb	a2,0(t1)
    2098:	0209                	addi	tp,tp,2
    209a:	0100                	addi	s0,sp,128
    209c:	0905                	addi	s2,s2,1
    209e:	0200                	addi	s0,sp,256
    20a0:	0304                	addi	s1,sp,384
    20a2:	0306                	slli	t1,t1,0x1
    20a4:	0909                	addi	s2,s2,2
    20a6:	0004                	0x4
    20a8:	0501                	addi	a0,a0,0
    20aa:	0402001b          	0x402001b
    20ae:	097e0303          	lb	t1,151(t3)
    20b2:	0000                	unimp
    20b4:	0501                	addi	a0,a0,0
    20b6:	0010                	0x10
    20b8:	0402                	c.slli64	s0
    20ba:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    20be:	0000                	unimp
    20c0:	0501                	addi	a0,a0,0
    20c2:	0009                	c.nop	2
    20c4:	0402                	c.slli64	s0
    20c6:	09090303          	lb	t1,144(s2)
    20ca:	000c                	0xc
    20cc:	0501                	addi	a0,a0,0
    20ce:	0026                	c.slli	zero,0x9
    20d0:	0402                	c.slli64	s0
    20d2:	00030603          	lb	a2,0(t1)
    20d6:	0009                	c.nop	2
    20d8:	0100                	addi	s0,sp,128
    20da:	2005                	jal	20fa <_min_stack+0xfa>
    20dc:	0200                	addi	s0,sp,256
    20de:	0304                	addi	s1,sp,384
    20e0:	06090003          	lb	zero,96(s2)
    20e4:	0100                	addi	s0,sp,128
    20e6:	1f05                	addi	t5,t5,-31
    20e8:	0200                	addi	s0,sp,256
    20ea:	0304                	addi	s1,sp,384
    20ec:	0306                	slli	t1,t1,0x1
    20ee:	097e                	slli	s2,s2,0x1f
    20f0:	0004                	0x4
    20f2:	0501                	addi	a0,a0,0
    20f4:	0014                	0x14
    20f6:	0402                	c.slli64	s0
    20f8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    20fc:	0000                	unimp
    20fe:	0501                	addi	a0,a0,0
    2100:	0005                	c.nop	1
    2102:	0402                	c.slli64	s0
    2104:	00030603          	lb	a2,0(t1)
    2108:	0009                	c.nop	2
    210a:	0100                	addi	s0,sp,128
    210c:	0905                	addi	s2,s2,1
    210e:	0200                	addi	s0,sp,256
    2110:	0304                	addi	s1,sp,384
    2112:	0306                	slli	t1,t1,0x1
    2114:	0909                	addi	s2,s2,2
    2116:	0004                	0x4
    2118:	0501                	addi	a0,a0,0
    211a:	001f 0402 0303      	0x3030402001f
    2120:	097e                	slli	s2,s2,0x1f
    2122:	0000                	unimp
    2124:	0501                	addi	a0,a0,0
    2126:	0014                	0x14
    2128:	0402                	c.slli64	s0
    212a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    212e:	0000                	unimp
    2130:	0501                	addi	a0,a0,0
    2132:	0009                	c.nop	2
    2134:	0402                	c.slli64	s0
    2136:	09090303          	lb	t1,144(s2)
    213a:	000c                	0xc
    213c:	0501                	addi	a0,a0,0
    213e:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2142:	00030603          	lb	a2,0(t1)
    2146:	0009                	c.nop	2
    2148:	0100                	addi	s0,sp,128
    214a:	1d05                	addi	s10,s10,-31
    214c:	0200                	addi	s0,sp,256
    214e:	0304                	addi	s1,sp,384
    2150:	06090003          	lb	zero,96(s2)
    2154:	0100                	addi	s0,sp,128
    2156:	1f05                	addi	t5,t5,-31
    2158:	0200                	addi	s0,sp,256
    215a:	0304                	addi	s1,sp,384
    215c:	0306                	slli	t1,t1,0x1
    215e:	097e                	slli	s2,s2,0x1f
    2160:	0004                	0x4
    2162:	0501                	addi	a0,a0,0
    2164:	0014                	0x14
    2166:	0402                	c.slli64	s0
    2168:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    216c:	0000                	unimp
    216e:	0501                	addi	a0,a0,0
    2170:	0005                	c.nop	1
    2172:	0402                	c.slli64	s0
    2174:	00030603          	lb	a2,0(t1)
    2178:	0009                	c.nop	2
    217a:	0100                	addi	s0,sp,128
    217c:	0905                	addi	s2,s2,1
    217e:	0200                	addi	s0,sp,256
    2180:	0304                	addi	s1,sp,384
    2182:	0306                	slli	t1,t1,0x1
    2184:	0909                	addi	s2,s2,2
    2186:	000c                	0xc
    2188:	0501                	addi	a0,a0,0
    218a:	0022                	c.slli	zero,0x8
    218c:	0402                	c.slli64	s0
    218e:	00030603          	lb	a2,0(t1)
    2192:	0009                	c.nop	2
    2194:	0100                	addi	s0,sp,128
    2196:	1c05                	addi	s8,s8,-31
    2198:	0200                	addi	s0,sp,256
    219a:	0304                	addi	s1,sp,384
    219c:	06090003          	lb	zero,96(s2)
    21a0:	0100                	addi	s0,sp,128
    21a2:	2105                	jal	25c2 <_min_stack+0x5c2>
    21a4:	0200                	addi	s0,sp,256
    21a6:	0304                	addi	s1,sp,384
    21a8:	0306                	slli	t1,t1,0x1
    21aa:	097e                	slli	s2,s2,0x1f
    21ac:	0004                	0x4
    21ae:	0501                	addi	a0,a0,0
    21b0:	0014                	0x14
    21b2:	0402                	c.slli64	s0
    21b4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21b8:	0000                	unimp
    21ba:	0501                	addi	a0,a0,0
    21bc:	0005                	c.nop	1
    21be:	0402                	c.slli64	s0
    21c0:	00030603          	lb	a2,0(t1)
    21c4:	0009                	c.nop	2
    21c6:	0100                	addi	s0,sp,128
    21c8:	0306                	slli	t1,t1,0x1
    21ca:	0908                	addi	a0,sp,144
    21cc:	0004                	0x4
    21ce:	0501                	addi	a0,a0,0
    21d0:	0612                	slli	a2,a2,0x4
    21d2:	00090003          	lb	zero,0(s2)
    21d6:	0100                	addi	s0,sp,128
    21d8:	1305                	addi	t1,t1,-31
    21da:	08090103          	lb	sp,128(s2)
    21de:	0100                	addi	s0,sp,128
    21e0:	1205                	addi	tp,tp,-31
    21e2:	08090103          	lb	sp,128(s2)
    21e6:	0100                	addi	s0,sp,128
    21e8:	1305                	addi	t1,t1,-31
    21ea:	04097f03          	0x4097f03
    21ee:	0100                	addi	s0,sp,128
    21f0:	1205                	addi	tp,tp,-31
    21f2:	04097f03          	0x4097f03
    21f6:	0100                	addi	s0,sp,128
    21f8:	0505                	addi	a0,a0,1
    21fa:	0306                	slli	t1,t1,0x1
    21fc:	0901                	addi	s2,s2,0
    21fe:	0002                	c.slli64	zero
    2200:	0501                	addi	a0,a0,0
    2202:	00030613          	mv	a2,t1
    2206:	0009                	c.nop	2
    2208:	0100                	addi	s0,sp,128
    220a:	1205                	addi	tp,tp,-31
    220c:	02090103          	lb	sp,32(s2)
    2210:	0100                	addi	s0,sp,128
    2212:	02090903          	lb	s2,32(s2)
    2216:	0100                	addi	s0,sp,128
    2218:	1305                	addi	t1,t1,-31
    221a:	08097603          	0x8097603
    221e:	0100                	addi	s0,sp,128
    2220:	0505                	addi	a0,a0,1
    2222:	0306                	slli	t1,t1,0x1
    2224:	0901                	addi	s2,s2,0
    2226:	0002                	c.slli64	zero
    2228:	0301                	addi	t1,t1,0
    222a:	0909                	addi	s2,s2,2
    222c:	0000                	unimp
    222e:	0501                	addi	a0,a0,0
    2230:	0612                	slli	a2,a2,0x4
    2232:	00090003          	lb	zero,0(s2)
    2236:	0100                	addi	s0,sp,128
    2238:	0505                	addi	a0,a0,1
    223a:	0306                	slli	t1,t1,0x1
    223c:	0901                	addi	s2,s2,0
    223e:	0002                	c.slli64	zero
    2240:	0501                	addi	a0,a0,0
    2242:	00030613          	mv	a2,t1
    2246:	0009                	c.nop	2
    2248:	0100                	addi	s0,sp,128
    224a:	0505                	addi	a0,a0,1
    224c:	0306                	slli	t1,t1,0x1
    224e:	0901                	addi	s2,s2,0
    2250:	0014                	0x14
    2252:	0501                	addi	a0,a0,0
    2254:	0612                	slli	a2,a2,0x4
    2256:	00090003          	lb	zero,0(s2)
    225a:	0100                	addi	s0,sp,128
    225c:	1a05                	addi	s4,s4,-31
    225e:	04091b03          	lh	s6,64(s2)
    2262:	0100                	addi	s0,sp,128
    2264:	1205                	addi	tp,tp,-31
    2266:	04096503          	0x4096503
    226a:	0100                	addi	s0,sp,128
    226c:	0505                	addi	a0,a0,1
    226e:	0306                	slli	t1,t1,0x1
    2270:	00020913          	mv	s2,tp
    2274:	0501                	addi	a0,a0,0
    2276:	0310                	addi	a2,sp,384
    2278:	0900                	addi	s0,sp,144
    227a:	0000                	unimp
    227c:	0501                	addi	a0,a0,0
    227e:	0612                	slli	a2,a2,0x4
    2280:	00096d03          	0x96d03
    2284:	0100                	addi	s0,sp,128
    2286:	1a05                	addi	s4,s4,-31
    2288:	02091b03          	lh	s6,32(s2)
    228c:	0100                	addi	s0,sp,128
    228e:	0505                	addi	a0,a0,1
    2290:	04097803          	0x4097803
    2294:	0100                	addi	s0,sp,128
    2296:	0905                	addi	s2,s2,1
    2298:	0306                	slli	t1,t1,0x1
    229a:	0901                	addi	s2,s2,0
    229c:	0004                	0x4
    229e:	0501                	addi	a0,a0,0
    22a0:	0003060b          	0x3060b
    22a4:	0009                	c.nop	2
    22a6:	0100                	addi	s0,sp,128
    22a8:	2705                	jal	29c8 <_min_stack+0x9c8>
    22aa:	02090003          	lb	zero,32(s2)
    22ae:	0100                	addi	s0,sp,128
    22b0:	0b05                	addi	s6,s6,1
    22b2:	04090003          	lb	zero,64(s2)
    22b6:	0100                	addi	s0,sp,128
    22b8:	0d05                	addi	s10,s10,1
    22ba:	0306                	slli	t1,t1,0x1
    22bc:	0902                	c.slli64	s2
    22be:	000a                	c.slli	zero,0x2
    22c0:	0501                	addi	a0,a0,0
    22c2:	061a                	slli	a2,a2,0x6
    22c4:	00090003          	lb	zero,0(s2)
    22c8:	0100                	addi	s0,sp,128
    22ca:	0d05                	addi	s10,s10,1
    22cc:	0306                	slli	t1,t1,0x1
    22ce:	0902                	c.slli64	s2
    22d0:	000a                	c.slli	zero,0x2
    22d2:	0501                	addi	a0,a0,0
    22d4:	0305                	addi	t1,t1,1
    22d6:	0909                	addi	s2,s2,2
    22d8:	0000                	unimp
    22da:	0501                	addi	a0,a0,0
    22dc:	0601                	addi	a2,a2,0
    22de:	00090103          	lb	sp,0(s2)
    22e2:	0100                	addi	s0,sp,128
    22e4:	0d05                	addi	s10,s10,1
    22e6:	0200                	addi	s0,sp,256
    22e8:	0204                	addi	s1,sp,256
    22ea:	0306                	slli	t1,t1,0x1
    22ec:	0979                	addi	s2,s2,30
    22ee:	0018                	0x18
    22f0:	0501                	addi	a0,a0,0
    22f2:	001a                	c.slli	zero,0x6
    22f4:	0402                	c.slli64	s0
    22f6:	0602                	c.slli64	a2
    22f8:	00090003          	lb	zero,0(s2)
    22fc:	0100                	addi	s0,sp,128
    22fe:	1805                	addi	a6,a6,-31
    2300:	0200                	addi	s0,sp,256
    2302:	0204                	addi	s1,sp,256
    2304:	0306                	slli	t1,t1,0x1
    2306:	0978                	addi	a4,sp,156
    2308:	0002                	c.slli64	zero
    230a:	0501                	addi	a0,a0,0
    230c:	0010                	0x10
    230e:	0402                	c.slli64	s0
    2310:	0302                	c.slli64	t1
    2312:	0900                	addi	s0,sp,144
    2314:	0000                	unimp
    2316:	0501                	addi	a0,a0,0
    2318:	0005                	c.nop	1
    231a:	0402                	c.slli64	s0
    231c:	0602                	c.slli64	a2
    231e:	02090003          	lb	zero,32(s2)
    2322:	0100                	addi	s0,sp,128
    2324:	0609                	addi	a2,a2,2
    2326:	0000                	unimp
    2328:	0101                	addi	sp,sp,0
    232a:	0150                	addi	a2,sp,132
    232c:	0000                	unimp
    232e:	001d0003          	lb	zero,1(s10)
    2332:	0000                	unimp
    2334:	0101                	addi	sp,sp,0
    2336:	000d0efb          	0xd0efb
    233a:	0101                	addi	sp,sp,0
    233c:	0101                	addi	sp,sp,0
    233e:	0000                	unimp
    2340:	0100                	addi	s0,sp,128
    2342:	0000                	unimp
    2344:	0001                	nop
    2346:	30747263          	bgeu	s0,t2,264a <_min_stack+0x64a>
    234a:	532e                	lw	t1,232(sp)
    234c:	0000                	unimp
    234e:	0000                	unimp
    2350:	0000                	unimp
    2352:	0205                	addi	tp,tp,1
    2354:	0d68                	addi	a0,sp,668
    2356:	0000                	unimp
    2358:	0315                	addi	t1,t1,5
    235a:	0904                	addi	s1,sp,144
    235c:	0004                	0x4
    235e:	0301                	addi	t1,t1,0
    2360:	0901                	addi	s2,s2,0
    2362:	0004                	0x4
    2364:	0301                	addi	t1,t1,0
    2366:	0901                	addi	s2,s2,0
    2368:	0002                	c.slli64	zero
    236a:	0301                	addi	t1,t1,0
    236c:	0901                	addi	s2,s2,0
    236e:	0002                	c.slli64	zero
    2370:	0301                	addi	t1,t1,0
    2372:	0901                	addi	s2,s2,0
    2374:	0002                	c.slli64	zero
    2376:	0301                	addi	t1,t1,0
    2378:	0901                	addi	s2,s2,0
    237a:	0002                	c.slli64	zero
    237c:	0301                	addi	t1,t1,0
    237e:	0901                	addi	s2,s2,0
    2380:	0002                	c.slli64	zero
    2382:	0301                	addi	t1,t1,0
    2384:	0901                	addi	s2,s2,0
    2386:	0002                	c.slli64	zero
    2388:	0301                	addi	t1,t1,0
    238a:	0901                	addi	s2,s2,0
    238c:	0002                	c.slli64	zero
    238e:	0301                	addi	t1,t1,0
    2390:	0901                	addi	s2,s2,0
    2392:	0002                	c.slli64	zero
    2394:	0301                	addi	t1,t1,0
    2396:	0901                	addi	s2,s2,0
    2398:	0002                	c.slli64	zero
    239a:	0301                	addi	t1,t1,0
    239c:	0901                	addi	s2,s2,0
    239e:	0002                	c.slli64	zero
    23a0:	0301                	addi	t1,t1,0
    23a2:	0901                	addi	s2,s2,0
    23a4:	0002                	c.slli64	zero
    23a6:	0301                	addi	t1,t1,0
    23a8:	0901                	addi	s2,s2,0
    23aa:	0002                	c.slli64	zero
    23ac:	0301                	addi	t1,t1,0
    23ae:	0901                	addi	s2,s2,0
    23b0:	0002                	c.slli64	zero
    23b2:	0301                	addi	t1,t1,0
    23b4:	0901                	addi	s2,s2,0
    23b6:	0002                	c.slli64	zero
    23b8:	0301                	addi	t1,t1,0
    23ba:	0901                	addi	s2,s2,0
    23bc:	0002                	c.slli64	zero
    23be:	0301                	addi	t1,t1,0
    23c0:	0901                	addi	s2,s2,0
    23c2:	0002                	c.slli64	zero
    23c4:	0301                	addi	t1,t1,0
    23c6:	0901                	addi	s2,s2,0
    23c8:	0002                	c.slli64	zero
    23ca:	0301                	addi	t1,t1,0
    23cc:	0901                	addi	s2,s2,0
    23ce:	0002                	c.slli64	zero
    23d0:	0301                	addi	t1,t1,0
    23d2:	0901                	addi	s2,s2,0
    23d4:	0002                	c.slli64	zero
    23d6:	0301                	addi	t1,t1,0
    23d8:	0901                	addi	s2,s2,0
    23da:	0002                	c.slli64	zero
    23dc:	0301                	addi	t1,t1,0
    23de:	0901                	addi	s2,s2,0
    23e0:	0002                	c.slli64	zero
    23e2:	0301                	addi	t1,t1,0
    23e4:	0901                	addi	s2,s2,0
    23e6:	0002                	c.slli64	zero
    23e8:	0301                	addi	t1,t1,0
    23ea:	0901                	addi	s2,s2,0
    23ec:	0002                	c.slli64	zero
    23ee:	0301                	addi	t1,t1,0
    23f0:	0901                	addi	s2,s2,0
    23f2:	0002                	c.slli64	zero
    23f4:	0301                	addi	t1,t1,0
    23f6:	0901                	addi	s2,s2,0
    23f8:	0002                	c.slli64	zero
    23fa:	0301                	addi	t1,t1,0
    23fc:	0901                	addi	s2,s2,0
    23fe:	0002                	c.slli64	zero
    2400:	0301                	addi	t1,t1,0
    2402:	0901                	addi	s2,s2,0
    2404:	0002                	c.slli64	zero
    2406:	0301                	addi	t1,t1,0
    2408:	0901                	addi	s2,s2,0
    240a:	0002                	c.slli64	zero
    240c:	0301                	addi	t1,t1,0
    240e:	0901                	addi	s2,s2,0
    2410:	0002                	c.slli64	zero
    2412:	0301                	addi	t1,t1,0
    2414:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2418:	0301                	addi	t1,t1,0
    241a:	0906                	slli	s2,s2,0x1
    241c:	0008                	0x8
    241e:	0301                	addi	t1,t1,0
    2420:	0901                	addi	s2,s2,0
    2422:	0008                	0x8
    2424:	0301                	addi	t1,t1,0
    2426:	0902                	c.slli64	s2
    2428:	0008                	0x8
    242a:	0301                	addi	t1,t1,0
    242c:	00040903          	lb	s2,0(s0)
    2430:	0301                	addi	t1,t1,0
    2432:	0901                	addi	s2,s2,0
    2434:	0004                	0x4
    2436:	0301                	addi	t1,t1,0
    2438:	0901                	addi	s2,s2,0
    243a:	0002                	c.slli64	zero
    243c:	0301                	addi	t1,t1,0
    243e:	0906                	slli	s2,s2,0x1
    2440:	0004                	0x4
    2442:	0301                	addi	t1,t1,0
    2444:	0901                	addi	s2,s2,0
    2446:	0004                	0x4
    2448:	0301                	addi	t1,t1,0
    244a:	0901                	addi	s2,s2,0
    244c:	0004                	0x4
    244e:	0901                	addi	s2,s2,0
    2450:	0004                	0x4
    2452:	0100                	addi	s0,sp,128
    2454:	0001                	nop
    2456:	0205                	addi	tp,tp,1
    2458:	0000                	unimp
    245a:	0000                	unimp
    245c:	0100cb03          	lbu	s6,16(ra)
    2460:	7c090103          	lb	sp,1984(s2)
    2464:	0100                	addi	s0,sp,128
    2466:	04090403          	lb	s0,64(s2)
    246a:	0100                	addi	s0,sp,128
    246c:	04090403          	lb	s0,64(s2)
    2470:	0100                	addi	s0,sp,128
    2472:	04090403          	lb	s0,64(s2)
    2476:	0100                	addi	s0,sp,128
    2478:	0409                	addi	s0,s0,2
    247a:	0000                	unimp
    247c:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <polydiv+0x18e>
    switch(length%3) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
  a0:	7200                	flw	fs0,32(a2)
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
            for (i = 0; i < (length / 3); i++) {
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < ((length-2) / 3); i++) {
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
  c8:	6572                	flw	fa0,28(sp)
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	735f6377          	0x735f6377
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	735f 6174 6574      	0x65746174735f
            a1[length-2] = a1[length-2] + a2[length-2];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0xbe>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
    asm volatile(
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 10a:	4e5f 6900 736e      	0x736e69004e5f
    asm volatile(
 110:	7274                	flw	fa3,100(a2)
 112:	6d5f 646f 7000      	0x7000646f6d5f
 118:	6d796c6f          	jal	s8,96fee <_stack_start+0x86fee>
            for (i = 0; i < ((length-1) / 3); i++) {
 11c:	6c75                	lui	s8,0x1d
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0074                	addi	a3,sp,12
 120:	755f 7562 0066      	0x667562755f
    asm volatile(
 126:	625f 7361 0065      	0x657361625f
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	5f5f 6d74 685f      	0x685f6d745f5f
    asm volatile(
 132:	0072756f          	jal	a0,27938 <_stack_start+0x17938>
    switch(length%3) {
 136:	5f5f 6673 5f00      	0x5f0066735f5f
 13c:	655f6e6f          	jal	t3,f6f90 <_stack_start+0xe6f90>
 140:	6978                	flw	fa4,84(a0)
 142:	5f74                	lw	a3,124(a4)
 144:	7261                	lui	tp,0xffff8
 146:	5f007367          	0x5f007367
            for (i = 0; i < (length / 3); i++) {
 14a:	6b6f6f63          	bltu	t5,s6,808 <ext_euclid+0xf0>
 14e:	6569                	lui	a0,0x1a
 150:	5f00                	lw	s0,56(a4)
 152:	735f 6c67 6575      	0x65756c67735f
            for (i = 0; i < ((length-2) / 3); i++) {
 158:	7200                	flw	fs0,32(a2)
 15a:	7365                	lui	t1,0xffff9
 15c:	0031                	c.nop	12
 15e:	6572                	flw	fa0,28(sp)
 160:	5f003273          	csrrc	tp,0x5f0,zero
 164:	6c66                	flw	fs8,88(sp)
            a1[length-1] = a2[length-1];
 166:	6761                	lui	a4,0x18
 168:	695f0073          	0x695f0073
 16c:	78635f73          	csrrwi	t5,0x786,6
 170:	0061                	c.nop	24
 172:	735f 6474 6e69      	0x6e696474735f
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	5f00                	lw	s0,56(a4)
 17a:	6c62                	flw	fs8,24(sp)
 17c:	7a69736b          	0x7a69736b
 180:	0065                	c.nop	25
 182:	7270                	flw	fa2,100(a2)
 184:	6375646f          	jal	s0,56fba <_stack_start+0x46fba>
            a1[length-1] = a2[length-1];
 188:	0074                	addi	a3,sp,12
            a1[length-2] = a2[length-2];
 18a:	6f70                	flw	fa2,92(a4)
 18c:	796c                	flw	fa1,116(a0)
 18e:	6964                	flw	fs1,84(a0)
 190:	0076                	c.slli	zero,0x1d
 192:	6f70                	flw	fa2,92(a4)
} //end of function
 194:	796c                	flw	fa1,116(a0)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	0066                	c.slli	zero,0x19
 198:	635f 7476 7562      	0x75627476635f
    asm volatile(
 19e:	0066                	c.slli	zero,0x19
 1a0:	6f5f 6666 6573      	0x657366666f5f
            for (i = 0; i < (length / 3); i++) {
 1a6:	0074                	addi	a3,sp,12
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1a8:	6d5f 7362 7472      	0x747273626d5f
    asm volatile(
 1ae:	7363776f          	jal	a4,378e4 <_stack_start+0x278e4>
 1b2:	735f 6174 6574      	0x65746174735f
            for (i = 0; i < ((length-1) / 3); i++) {
 1b8:	5f00                	lw	s0,56(a4)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1ba:	626d                	lui	tp,0x1b
 1bc:	6c72                	flw	fs8,28(sp)
    asm volatile(
 1be:	6e65                	lui	t3,0x19
 1c0:	735f 6174 6574      	0x65746174735f
 1c6:	5f00                	lw	s0,56(a4)
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	6e66                	flw	ft8,88(sp)
 1ca:	7261                	lui	tp,0xffff8
    asm volatile(
 1cc:	6e007367          	0x6e007367
}
 1d0:	7274                	flw	fa3,100(a2)
    switch(length%3) {
 1d2:	5f75                	li	t5,-3
 1d4:	6564                	flw	fs1,76(a0)
 1d6:	70796563          	bltu	s2,t2,8e0 <ext_euclid+0x1c8>
 1da:	0074                	addi	a3,sp,12
 1dc:	665f 736e 5f00      	0x5f00736e665f
 1e2:	6e676973          	csrrsi	s2,0x6e6,14
            for (i = 0; i < (length / 3); i++) {
 1e6:	5f00                	lw	s0,56(a4)
 1e8:	6c66                	flw	fs8,88(sp)
    asm volatile(
 1ea:	5f6b636f          	jal	t1,b67e0 <_stack_start+0xa67e0>
            for (i = 0; i < (length / 3); i++) {
 1ee:	0074                	addi	a3,sp,12
 1f0:	735f 6474 7265      	0x72656474735f
            for (i = 0; i < ((length-2) / 3); i++) {
 1f6:	0072                	c.slli	zero,0x1c
 1f8:	425f 6769 6e69      	0x6e696769425f
 1fe:	0074                	addi	a3,sp,12
 200:	675f 6d61 616d      	0x616d6d61675f
            a1[length-1] = a1[length-1] % mod;
 206:	735f 6769 676e      	0x676e6769735f
 20c:	6d61                	lui	s10,0x18
 20e:	5f00                	lw	s0,56(a4)
 210:	6572                	flw	fa0,28(sp)
 212:	6461                	lui	s0,0x18
            for (i = 0; i < ((length-1) / 3); i++) {
 214:	5f00                	lw	s0,56(a4)
 216:	6572                	flw	fa0,28(sp)
 218:	746c7573          	csrrci	a0,0x746,24
 21c:	6b5f 5f00 745f      	0x745f5f006b5f
 222:	006d                	c.nop	27
            a1[length-1] = a1[length-1] % mod;
 224:	6564                	flw	fs1,76(a0)
            a1[length-2] = a1[length-2] % mod;
 226:	756e                	flw	fa0,248(sp)
 228:	5f6d                	li	t5,-5
 22a:	6574                	flw	fa3,76(a0)
 22c:	706d                	c.lui	zero,0xffffb
 22e:	5f00                	lw	s0,56(a4)
 230:	775f 6863 0062      	0x626863775f
    asm volatile(
 236:	6572                	flw	fa0,28(sp)
 238:	746c7573          	csrrci	a0,0x746,24
 23c:	006e6f6b          	0x6e6f6b
            for (i = 0; i < (length / 3); i++) {
 240:	735f 6474 756f      	0x756f6474735f
    asm volatile(
 246:	0074                	addi	a3,sp,12
 248:	635f 7476 656c      	0x656c7476635f
            for (i = 0; i < ((length-1) / 3); i++) {
 24e:	006e                	c.slli	zero,0x1b
    asm volatile(
 250:	72636573          	csrrsi	a0,0x726,6
 254:	7465                	lui	s0,0xffff9
 256:	6b5f 7965 665f      	0x665f79656b5f
            for (i = 0; i < ((length-2) / 3); i++) {
 25c:	0071                	c.nop	28
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 25e:	665f 6c69 0065      	0x656c69665f
 264:	6d6f682f          	0x6d6f682f
 268:	2f65                	jal	a20 <generate_keys+0xf4>
    int line[size_b][size_a + size_b];
 26a:	6f74                	flw	fa3,92(a4)
 26c:	6170                	flw	fa2,68(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 26e:	636c                	flw	fa1,68(a4)
 270:	7365442f          	0x7365442f
    int line[size_b][size_a + size_b];
 274:	706f746b          	0x706f746b
 278:	7469672f          	0x7469672f
 27c:	7568                	flw	fa0,108(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 27e:	2f62                	fld	ft10,24(sp)
 280:	696e6573          	csrrsi	a0,0x696,28
 284:	705f726f          	jal	tp,f8188 <_stack_start+0xe8188>
 288:	6f72                	flw	ft10,28(sp)
 28a:	656a                	flw	fa0,152(sp)
 28c:	732f7463          	bgeu	t5,s2,9b4 <generate_keys+0x88>
    int line[size_b][size_a + size_b];
 290:	6c6f2f77          	0x6c6f2f77
 294:	6c6d7563          	bgeu	s10,t1,95e <generate_keys+0x32>
 298:	7265                	lui	tp,0xffff9
    int pola[size_a];
 29a:	6d2e372f          	0x6d2e372f
 29e:	612b646f          	jal	s0,b68b0 <_stack_start+0xa68b0>
    int line[size_b][size_a + size_b];
 2a2:	6464                	flw	fs1,76(s0)
    int pola[size_a];
 2a4:	7571652b          	0x7571652b
    int polb[size_b];
 2a8:	7200                	flw	fs0,32(a2)
 2aa:	7465                	lui	s0,0xffff9
 2ac:	7275                	lui	tp,0xffffd
    int pola[size_a];
 2ae:	5f6e                	lw	t5,248(sp)
    int polb[size_b];
 2b0:	6461                	lui	s0,0x18
 2b2:	7264                	flw	fs1,100(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 2b4:	7365                	lui	t1,0xffff9
 2b6:	72003173          	csrrc	sp,0x720,zero
    int line[size_b][size_a + size_b];
 2ba:	7465                	lui	s0,0xffff9
 2bc:	7275                	lui	tp,0xffffd
    int polb[size_b];
 2be:	5f6e                	lw	t5,248(sp)
    int pola[size_a];
 2c0:	6461                	lui	s0,0x18
 2c2:	7264                	flw	fs1,100(a2)
    for (i = 0; i < size_b; ++i){
 2c4:	7365                	lui	t1,0xffff9
 2c6:	72003273          	csrrc	tp,0x720,zero
            product[j] = 0;
 2ca:	7465                	lui	s0,0xffff9
 2cc:	7275                	lui	tp,0xffffd
 2ce:	5f6e                	lw	t5,248(sp)
 2d0:	6461                	lui	s0,0x18
    for (i = 0; i < size_b; ++i){
 2d2:	7264                	flw	fs1,100(a2)
 2d4:	7365                	lui	t1,0xffff9
    array_equ(pola,a,size_a);
 2d6:	72003373          	csrrc	t1,0x720,zero
 2da:	7465                	lui	s0,0xffff9
 2dc:	7275                	lui	tp,0xffffd
 2de:	5f6e                	lw	t5,248(sp)
 2e0:	6461                	lui	s0,0x18
 2e2:	7264                	flw	fs1,100(a2)
 2e4:	7365                	lui	t1,0xffff9
 2e6:	5f003473          	csrrc	s0,0x5f0,zero
    array_mod(pola,mod,size_a);
 2ea:	696e                	flw	fs2,216(sp)
 2ec:	0073626f          	jal	tp,36af2 <_stack_start+0x26af2>
 2f0:	6572                	flw	fa0,28(sp)
    array_equ(polb,b,size_b);
 2f2:	7574                	flw	fa3,108(a0)
 2f4:	6e72                	flw	ft8,28(sp)
 2f6:	615f 6464 6572      	0x65726464615f
 2fc:	00367373          	csrrci	t1,fcsr,12
    array_mod(polb,mod,size_b);
 300:	6572                	flw	fa0,28(sp)
 302:	7574                	flw	fa3,108(a0)
 304:	6e72                	flw	ft8,28(sp)
    if(star_mult == 1){
 306:	615f 6464 6572      	0x65726464615f
 30c:	00377373          	csrrci	t1,fcsr,14
 310:	726f6873          	csrrsi	a6,0x726,30
 314:	2074                	fld	fa3,192(s0)
 316:	6e75                	lui	t3,0x1d
 318:	6e676973          	csrrsi	s2,0x6e6,14
 31c:	6465                	lui	s0,0x19
        for (j = size_b -1; j >= 0; j = j-1){
 31e:	6920                	flw	fs0,80(a0)
 320:	746e                	flw	fs0,248(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 322:	5f00                	lw	s0,56(a4)
 324:	7461                	lui	s0,0xffff8
            product[j] = 0;
 326:	7865                	lui	a6,0xffff9
 328:	7469                	lui	s0,0xffffa
 32a:	0030                	addi	a2,sp,8
            line[i][j] = 0;
 32c:	735f 6769 616e      	0x616e6769735f
            product[j] = 0;
 332:	5f6c                	lw	a1,124(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 334:	7562                	flw	fa0,56(sp)
 336:	0066                	c.slli	zero,0x19
 338:	615f 6373 6974      	0x69746373615f
    for (i = 0; i < size_b; ++i){
 33e:	656d                	lui	a0,0x1b
 340:	625f 6675 5f00      	0x5f006675625f
        for(j = 0; j < size_a + size_b -1; ++j){
 346:	6572                	flw	fa0,28(sp)
    if(star_mult == 1){
 348:	746c7573          	csrrci	a0,0x746,24
        for (j = size_b -1; j >= 0; j = j-1){
 34c:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 34e:	775f 6863 7700      	0x77006863775f
    for(i = 0; i < size_b; ++i){
 354:	6e69                	lui	t3,0x1a
		array_add(product,line[i],size_a+size_b-1);
 356:	5f74                	lw	a3,124(a4)
 358:	0074                	addi	a3,sp,12
 35a:	656e6567          	0x656e6567
 35e:	6172                	flw	ft2,28(sp)
    for(i = 0; i < size_b; ++i){
 360:	6574                	flw	fa3,76(a0)
 362:	6b5f 7965 0073      	0x7379656b5f
    array_mod(product,mod,(size_a+size_b-1));
 368:	5f5f 7562 6c69      	0x6c6975625f5f
 36e:	6974                	flw	fa3,84(a0)
}
 370:	5f6e                	lw	t5,248(sp)
 372:	656d                	lui	a0,0x1b
 374:	636d                	lui	t1,0x1b
 376:	7970                	flw	fa2,116(a0)
 378:	5f00                	lw	s0,56(a4)
 37a:	6f6c                	flw	fa1,92(a4)
 37c:	4e006b63          	bltu	zero,zero,872 <ext_euclid+0x15a>
 380:	5254                	lw	a3,36(a2)
 382:	5f55                	li	t5,-11
 384:	3834                	fld	fa3,112(s0)
 386:	625f 7469 2e4d      	0x2e4d7469625f
 38c:	72700063          	beq	zero,t2,aac <generate_keys+0x180>
 390:	6375646f          	jal	s0,571c6 <_stack_start+0x471c6>
 394:	3274                	fld	fa3,224(a2)
 396:	6500                	flw	fs0,8(a0)
 398:	7478                	flw	fa4,108(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 39a:	655f 6375 696c      	0x696c6375655f
 3a0:	0064                	addi	s1,sp,12
 3a2:	775f 6972 6574      	0x65746972775f
 3a8:	5f00                	lw	s0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3aa:	745f 5f6d 6579      	0x65795f6d745f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b0:	7261                	lui	tp,0xffff8
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b2:	7000                	flw	fs0,32(s0)
 3b4:	00626c6f          	jal	s8,263ba <_stack_start+0x163ba>
        for (j = size_b -1; j >= 0; j = j-1){
 3b8:	6172                	flw	ft2,28(sp)
 3ba:	646e                	flw	fs0,216(sp)
 3bc:	765f6d6f          	jal	s10,f7320 <_stack_start+0xe7320>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c0:	6c61                	lui	s8,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c2:	5f00                	lw	s0,56(a4)
 3c4:	6d6e                	flw	fs10,216(sp)
 3c6:	6c61                	lui	s8,0x18
 3c8:	6f6c                	flw	fa1,92(a4)
 3ca:	6f6c0063          	beq	s8,s6,aaa <generate_keys+0x17e>
 3ce:	676e                	flw	fa4,216(sp)
 3d0:	6420                	flw	fs0,72(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d2:	6c62756f          	jal	a0,27a98 <_stack_start+0x17a98>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3d6:	0065                	c.nop	25
 3d8:	6e5f 7865 6674      	0x667478656e5f
        for (j = size_b -1; j >= 0; j = j-1){
 3de:	6100                	flw	fs0,0(a0)
 3e0:	7272                	flw	ft4,60(sp)
 3e2:	7961                	lui	s2,0xffff8
 3e4:	655f 7571 6d00      	0x6d007571655f
	array_mod(line[i],mod,size_a+size_b-1);
 3ea:	7365                	lui	t1,0xffff9
 3ec:	65676173          	csrrsi	sp,0x656,14
    for (i = 0; i < size_b; ++i){
 3f0:	5f00                	lw	s0,56(a4)
 3f2:	745f 5f6d 6f6d      	0x6f6d5f6d745f
		array_add(product,line[i],size_a+size_b-1);
 3f8:	006e                	c.slli	zero,0x1b
    for(i = 0; i < size_b; ++i){
 3fa:	6572                	flw	fa0,28(sp)
 3fc:	7574                	flw	fa3,108(a0)
 3fe:	6e72                	flw	ft8,28(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 400:	615f 6464 6572      	0x65726464615f
 406:	00357373          	csrrci	t1,fcsr,10
 40a:	615f 6574 6978      	0x69786574615f
    int line[size_b][size_a + size_b];
 410:	0074                	addi	a3,sp,12
 412:	6f627573          	csrrci	a0,0x6f6,4
 416:	7470                	flw	fa2,108(s0)
 418:	7261                	lui	tp,0xffff8
 41a:	5f5f0067          	jr	1525(t5)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 41e:	64696473          	csrrsi	s0,0x646,18
 422:	6e69                	lui	t3,0x1a
 424:	7469                	lui	s0,0xffffa
 426:	5f00                	lw	s0,56(a4)
 428:	5f66666f          	jal	a2,66a1e <_stack_start+0x56a1e>
 42c:	0074                	addi	a3,sp,12
    int line[size_b][size_a + size_b];
 42e:	6e45                	lui	t3,0x11
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 430:	654d5f63          	bge	s10,s4,a8e <generate_keys+0x162>
    int line[size_b][size_a + size_b];
 434:	67617373          	csrrci	t1,0x676,2
 438:	0065                	c.nop	25
    int pola[size_a];
 43a:	746e6f63          	bltu	t3,t1,b98 <generate_keys+0x26c>
 43e:	6f72                	flw	ft10,28(sp)
 440:	526c                	lw	a1,100(a2)
    int line[size_b][size_a + size_b];
 442:	5f00                	lw	s0,56(a4)
    int pola[size_a];
 444:	7266                	flw	ft4,120(sp)
 446:	6565                	lui	a0,0x19
    int polb[size_b];
 448:	696c                	flw	fa1,84(a0)
 44a:	72007473          	csrrci	s0,0x720,0
    int pola[size_a];
 44e:	6e69                	lui	t3,0x1a
    int polb[size_b];
 450:	6f705f67          	0x6f705f67
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 454:	796c                	flw	fa1,116(a0)
 456:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 458:	4f4c                	lw	a1,28(a4)
 45a:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
    int pola[size_a];
 45e:	4345                	li	t1,17
 460:	5255                	li	tp,-11
    int polb[size_b];
 462:	45564953          	0x45564953
    for (i = 0; i < size_b; ++i){
 466:	545f 7400 5f69      	0x5f697400545f
            product2[j] = 0;
 46c:	0031                	c.nop	12
 46e:	6974                	flw	fa3,84(a0)
 470:	325f 7500 736e      	0x736e7500325f
    array_equ(pola,a,size_a);
 476:	6769                	lui	a4,0x1a
 478:	656e                	flw	fa0,216(sp)
 47a:	2064                	fld	fs1,192(s0)
 47c:	72616863          	bltu	sp,t1,bac <generate_keys+0x280>
 480:	7100                	flw	fs0,32(a0)
    array_equ(polb,b,size_b);
 482:	5f69                	li	t5,-6
 484:	0031                	c.nop	12
 486:	6e5f 7765 5f00      	0x5f0077656e5f
 48c:	5f68                	lw	a0,124(a4)
    if(star_mult == 1){
 48e:	7265                	lui	tp,0xffff9
 490:	6e72                	flw	ft8,28(sp)
 492:	6873006f          	j	31318 <_stack_start+0x21318>
 496:	2074726f          	jal	tp,47e9c <_stack_start+0x37e9c>
 49a:	6e69                	lui	t3,0x1a
 49c:	0074                	addi	a3,sp,12
 49e:	5f5f 6d74 795f      	0x795f6d745f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 4a4:	6164                	flw	fs1,68(a0)
 4a6:	0079                	c.nop	30
            product2[j] = 0;
 4a8:	5f5f 6273 6675      	0x667562735f5f
            line[i][j] = 0;
 4ae:	5f00                	lw	s0,56(a4)
 4b0:	6c66                	flw	fs8,88(sp)
            product2[j] = 0;
 4b2:	6761                	lui	a4,0x18
 4b4:	5f003273          	csrrc	tp,0x5f0,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 4b8:	6f69                	lui	t5,0x1a
 4ba:	7362                	flw	ft6,56(sp)
 4bc:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 4be:	465f 4c49 0045      	0x454c49465f
 4c4:	6d5f 7362 6174      	0x617473626d5f
                line[size_b-1-j][k] = pola[k]*polb[j];
 4ca:	6574                	flw	fa3,76(a0)
 4cc:	745f 5f00 735f      	0x735f5f00745f
 4d2:	4946                	lw	s2,80(sp)
 4d4:	454c                	lw	a1,12(a0)
 4d6:	5f00                	lw	s0,56(a4)
 4d8:	626d                	lui	tp,0x1b
            for (k = size_a-1; k >= 0; k = k-1 ){
 4da:	74617473          	csrrci	s0,0x746,2
                line[size_b-1-j][k] = pola[k]*polb[j];
 4de:	0065                	c.nop	25
 4e0:	725f 6e61 5f64      	0x5f646e61725f
        for (j = size_b -1; j >= 0; j = j-1){
 4e6:	656e                	flw	fa0,216(sp)
 4e8:	7478                	flw	fa4,108(s0)
 4ea:	5f00                	lw	s0,56(a4)
 4ec:	626d                	lui	tp,0x1b
 4ee:	656c                	flw	fa1,76(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 4f0:	5f6e                	lw	t5,248(sp)
	   array_add(product2,line[i],size_a+size_b-1);
 4f2:	74617473          	csrrci	s0,0x746,2
 4f6:	0065                	c.nop	25
 4f8:	695f 636e 5f00      	0x5f00636e695f
}
 4fe:	6e69                	lui	t3,0x1a
 500:	0064                	addi	s1,sp,12
 502:	6c5f 636f 6c61      	0x6c61636f6c5f
 508:	0065                	c.nop	25
 50a:	5f5f 6c63 6165      	0x61656c635f5f
 510:	756e                	flw	fa0,248(sp)
 512:	0070                	addi	a2,sp,12
 514:	755f 736e 6570      	0x6570736e755f
 51a:	69666963          	bltu	a2,s6,bac <generate_keys+0x280>
 51e:	6465                	lui	s0,0x19
 520:	6c5f 636f 6c61      	0x6c61636f6c5f
 526:	5f65                	li	t5,-7
            for (k = size_a-1; k >= 0; k = k-1 ){
 528:	6e69                	lui	t3,0x1a
 52a:	6f66                	flw	ft10,88(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 52c:	5f00                	lw	s0,56(a4)
 52e:	616d                	addi	sp,sp,240
 530:	7778                	flw	fa4,108(a4)
 532:	7364                	flw	fs1,100(a4)
 534:	5f00                	lw	s0,56(a4)
 536:	6572                	flw	fa0,28(sp)
 538:	6e65                	lui	t3,0x19
 53a:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 53c:	72617473          	csrrci	s0,0x726,2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 540:	6d5f 6c75 0074      	0x746c756d5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 546:	735f 6565 0064      	0x646565735f
        for (j = size_b -1; j >= 0; j = j-1){
 54c:	6972                	flw	fs2,28(sp)
 54e:	325f 5f00 635f      	0x635f5f00325f
	   array_add(product2,line[i],size_a+size_b-1);
 554:	746e756f          	jal	a0,e7c9a <_stack_start+0xd7c9a>
    for(i=0;i<size_b;++i){
 558:	5f00                	lw	s0,56(a4)
 55a:	765f 6c61 6575      	0x65756c61765f
    int v[size_N];
 560:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 562:	6b656573          	csrrsi	a0,0x6b6,10
 566:	5f00                	lw	s0,56(a4)
 568:	7066                	flw	ft0,120(sp)
 56a:	745f736f          	jal	t1,f84ae <_stack_start+0xe84ae>
 56e:	6c00                	flw	fs0,24(s0)
 570:	6e65                	lui	t3,0x19
 572:	00687467          	0x687467
 576:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 57c:	6e69                	lui	t3,0x1a
 57e:	7000                	flw	fs0,32(s0)
    int v[size_N];
 580:	6275                	lui	tp,0x1d
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 582:	696c                	flw	fa1,84(a0)
    int v[size_N];
 584:	656b5f63          	bge	s6,s6,be2 <generate_keys+0x2b6>
 588:	0079                	c.nop	30
    int q[size_N];
 58a:	7261                	lui	tp,0xffff8
 58c:	6172                	flw	ft2,28(sp)
 58e:	5f79                	li	t5,-2
    int num_temp[size_N];
 590:	6461                	lui	s0,0x18
 592:	0064                	addi	s1,sp,12
    int denum_temp[size_D];
 594:	7261                	lui	tp,0xffff8
 596:	6172                	flw	ft2,28(sp)
 598:	5f79                	li	t5,-2
 59a:	6f6d                	lui	t5,0x1b
    int num_temp[size_N];
 59c:	0064                	addi	s1,sp,12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 59e:	735f 7274 6f74      	0x6f747274735f
 5a4:	616c5f6b          	0x616c5f6b
    int v[size_N];
 5a8:	5f007473          	csrrci	s0,0x5f0,0
       array_equ(num_temp,num,size_N);
 5ac:	6e66                	flw	ft8,88(sp)
 5ae:	7974                	flw	fa3,116(a0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 5b0:	6570                	flw	fa2,76(a0)
 5b2:	65730073          	0x65730073
    int denum_temp[size_D];
 5b6:	74657263          	bgeu	a0,t1,cfa <ntru_deceypt+0x56>
       array_mod(num_temp, mod, size_N);
 5ba:	6b5f 7965 665f      	0x665f79656b5f
 5c0:	0070                	addi	a2,sp,12
    int denum_temp[size_D];
 5c2:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
    array_equ(denum_temp,denum,size_D);
 5c8:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
    array_mod(denum_temp,mod,size_D);
 5cc:	315f 5f00 6567      	0x65675f00315f
 5d2:	6474                	flw	fa3,76(s0)
    for (i = 0; i < size_N; ++i){
 5d4:	7461                	lui	s0,0xffff8
 5d6:	5f65                	li	t5,-7
 5d8:	7265                	lui	tp,0xffff9
    for (i = size_D-1; i >= 0; i = i-1){
 5da:	0072                	c.slli	zero,0x1c
 5dc:	675f 6f6c 6162      	0x61626f6c675f
 5e2:	5f6c                	lw	a1,124(a4)
 5e4:	6d69                	lui	s10,0x1a
    for (i = 0; i < size_N; ++i){
 5e6:	7570                	flw	fa2,108(a0)
 5e8:	6572                	flw	fa0,28(sp)
        if ( (b_N*u)%mod == 1 )
 5ea:	705f 7274 4700      	0x47007274705f
    for (u = 0; u < mod; ++u){
 5f0:	554e                	lw	a0,240(sp)
 5f2:	4320                	lw	s0,64(a4)
        q[i] = 0;
 5f4:	3731                	jal	500 <polymult2+0x100>
 5f6:	3920                	fld	fs0,112(a0)
 5f8:	322e                	fld	ft4,232(sp)
 5fa:	302e                	fld	ft0,232(sp)
        v[i] = 0;
 5fc:	2d20                	fld	fs0,88(a0)
        q[i] = 0;
 5fe:	616d                	addi	sp,sp,240
 600:	6372                	flw	ft6,28(sp)
        v[i] = 0;
 602:	3d68                	fld	fa0,248(a0)
 604:	7672                	flw	fa2,60(sp)
    for (i = 0; i < size_N; ++i){
 606:	6d693233          	0x6d693233
        if( denum_temp[i] != 0 )
 60a:	6d2d2063          	0x6d2d2063
    for (i = size_D-1; i >= 0; i = i-1){
 60e:	6261                	lui	tp,0x18
        if ( (b_N*u)%mod == 1 )
 610:	3d69                	jal	4aa <polymult2+0xaa>
 612:	6c69                	lui	s8,0x1a
 614:	3370                	fld	fa2,224(a4)
 616:	2032                	fld	ft0,264(sp)
 618:	6d2d                	lui	s10,0xb
    for (u = 0; u < mod; ++u){
 61a:	646f6d63          	bltu	t5,t1,c74 <ntru_encyrpt+0x56>
        if( num_temp[i] != 0 )
 61e:	6c65                	lui	s8,0x19
    for (i = size_N-1; i >= 0; i = i-1){
 620:	6d3d                	lui	s10,0xf
 622:	6465                	lui	s0,0x19
 624:	6e61                	lui	t3,0x18
 626:	2079                	jal	6b4 <polydiv+0x156>
 628:	6d2d                	lui	s10,0xb
 62a:	7574                	flw	fa3,108(a0)
 62c:	656e                	flw	fa0,216(sp)
    while (d >= d2){
 62e:	723d                	lui	tp,0xfffef
 630:	656b636f          	jal	t1,b6c86 <_stack_start+0xa6c86>
      array_equ(result,q,size_N);
 634:	2074                	fld	fa3,192(s0)
 636:	672d                	lui	a4,0xb
 638:	2d20                	fld	fs0,88(a0)
 63a:	2d20734f          	0x2d20734f
 63e:	7666                	flw	fa2,120(sp)
    for(i = size_N; i < (2*size_N); ++i){
 640:	7369                	lui	t1,0xffffa
 642:	6269                	lui	tp,0x1a
        result[i] = num_temp[i-size_N];
 644:	6c69                	lui	s8,0x1a
 646:	7469                	lui	s0,0xffffa
 648:	3d79                	jal	4e6 <polymult2+0xe6>
 64a:	6968                	flw	fa0,84(a0)
    for(i = size_N; i < (2*size_N); ++i){
 64c:	6464                	flw	fs1,76(s0)
 64e:	6e65                	lui	t3,0x19
}
 650:	5f00                	lw	s0,56(a4)
 652:	6e75                	lui	t3,0x1d
 654:	7375                	lui	t1,0xffffd
 656:	6465                	lui	s0,0x19
 658:	725f 6e61 0064      	0x646e61725f
 65e:	696c                	flw	fa1,84(a0)
 660:	656e                	flw	fa0,216(sp)
 662:	5f00                	lw	s0,56(a4)
 664:	00736477          	0x736477
 668:	5f5f 6d74 775f      	0x775f6d745f5f
 66e:	6164                	flw	fs1,68(a0)
 670:	0079                	c.nop	30
 672:	675f 756c 0065      	0x65756c675f
 678:	6e69                	lui	t3,0x1a
        v[(d-d2)] = u*r_d;
 67a:	5f727473          	csrrci	s0,0x5f7,4
 67e:	7165                	addi	sp,sp,-400
 680:	0075                	c.nop	29
 682:	746e                	flw	fs0,248(sp)
 684:	7572                	flw	fa0,60(sp)
        array_mod(v, mod, size_N);
 686:	655f 636e 7279      	0x7279636e655f
        v[(d-d2)] = u*r_d;
 68c:	7470                	flw	fa2,108(s0)
        array_mod(v, mod, size_N);
 68e:	5f00                	lw	s0,56(a4)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 690:	7a697373          	csrrci	t1,0x7a6,18
 694:	5f65                	li	t5,-7
 696:	0074                	addi	a3,sp,12
 698:	6c5f 3436 5f61      	0x5f6134366c5f
        array_mod(product, mod, size_N);
 69e:	7562                	flw	fa0,56(sp)
 6a0:	0066                	c.slli	zero,0x19
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 6a2:	6564                	flw	fs1,76(a0)
        array_mod(product, mod, size_N);
 6a4:	756e                	flw	fa0,248(sp)
        for (i = 0; i < size_N; ++i){
 6a6:	006d                	c.nop	27
 6a8:	735f 6769 665f      	0x665f6769735f
        array_mod(num_temp, mod, size_N);
 6ae:	6e75                	lui	t3,0x1d
 6b0:	6e5f0063          	beq	t5,t0,d90 <reset_handler+0x24>
 6b4:	7562                	flw	fa0,56(sp)
        array_add(q, v, size_N);
 6b6:	0066                	c.slli	zero,0x19
 6b8:	755f 756e 6573      	0x6573756e755f
        array_mod(q, mod, size_N);
 6be:	0064                	addi	s1,sp,12
 6c0:	6f70                	flw	fa2,92(a4)
 6c2:	796c                	flw	fa1,116(a0)
 6c4:	0052                	c.slli	zero,0x14
        for (i = size_N-1; i >= 0; i = i-1){
 6c6:	657a6973          	csrrsi	s2,0x657,20
 6ca:	445f 5f00 745f      	0x745f5f00445f
 6d0:	5f6d                	li	t5,-5
 6d2:	7369                	lui	t1,0xffffa
 6d4:	7364                	flw	fs1,100(a4)
 6d6:	0074                	addi	a3,sp,12
            num_temp[i] = num_temp[i] - product[i];
 6d8:	6c5f 636f 6c61      	0x6c61636f6c5f
 6de:	6974                	flw	fa3,84(a0)
 6e0:	656d                	lui	a0,0x1b
        for (i = 0; i < size_N; ++i){
 6e2:	625f 6675 5f00      	0x5f006675625f
            num_temp[i] = num_temp[i] - product[i];
 6e8:	736f6c63          	bltu	t5,s6,e20 <memcpy+0x42>
        for (i = 0; i < size_N; ++i){
 6ec:	0065                	c.nop	25
            if( num_temp[i] != 0 )
 6ee:	725f 3834 5f00      	0x5f003834725f
            v[i] = 0;
 6f4:	626d                	lui	tp,0x1b
 6f6:	6f74                	flw	fa3,92(a4)
 6f8:	735f6377          	0x735f6377
 6fc:	6174                	flw	fa3,68(a0)
        for (i = 0; i < size_N; ++i){
 6fe:	6574                	flw	fa3,76(a0)
 700:	5f00                	lw	s0,56(a4)
 702:	3570                	fld	fa2,232(a0)
 704:	616d0073          	0x616d0073
        result[i] = num_temp[i-size_N];
 708:	6e69                	lui	t3,0x1a
 70a:	5f00                	lw	s0,56(a4)
 70c:	745f 5f6d 646d      	0x646d5f6d745f
    for(i = size_N; i < (2*size_N); ++i){
 712:	7961                	lui	s2,0xffff8
 714:	7300                	flw	fs0,32(a4)
 716:	7a69                	lui	s4,0xffffa
    int ri_2[size]; // MX-ring poly, a
 718:	5f65                	li	t5,-7
 71a:	0061                	c.nop	24
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 71c:	657a6973          	csrrsi	s2,0x657,20
    int ri_2[size]; // MX-ring poly, a
 720:	625f 6300 7472      	0x74726300625f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 726:	2e30                	fld	fa2,88(a2)
 728:	682f0053          	0x682f0053
 72c:	2f656d6f          	jal	s10,56a22 <_stack_start+0x46a22>
 730:	6f74                	flw	fa3,92(a4)
 732:	6170                	flw	fa2,68(a0)
 734:	636c                	flw	fa1,68(a4)
 736:	7365442f          	0x7365442f
 73a:	706f746b          	0x706f746b
    int ri_2[size]; // MX-ring poly, a
 73e:	6f72702f          	0x6f72702f
 742:	656a                	flw	fa0,152(sp)
    int ri_1[size]; // f-random poly, f[N] = 0, b
 744:	656c                	flw	fa1,76(a0)
 746:	2f72                	fld	ft10,280(sp)
 748:	75636c6f          	jal	s8,36e9e <_stack_start+0x26e9e>
    int ri[size];
 74c:	2f6d                	jal	f06 <memset+0x4a>
 74e:	6f6d                	lui	t5,0x1b
    int ti_1[size]; // ti_1[0] = 1
 750:	2b64                	fld	fs1,208(a4)
 752:	6461                	lui	s0,0x18
 754:	2b64                	fld	fs1,208(a4)
    int ti[size];
 756:	7165                	addi	sp,sp,-400
 758:	0075                	c.nop	29
 75a:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
    int qi_1[size];
 75e:	5341                	li	t1,-16
 760:	3220                	fld	fs0,96(a2)
    int temp[size];
 762:	332e                	fld	ft6,232(sp)
 764:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x122>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	009e                	slli	ra,ra,0x7
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0130                	addi	a2,sp,136
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	0136                	slli	sp,sp,0xd
  4a:	0000                	unimp
  4c:	0096                	slli	ra,ra,0x5
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	01cc                	addi	a1,sp,196
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	01d2                	slli	gp,gp,0x14
  6a:	0000                	unimp
  6c:	008c                	addi	a1,sp,64
  6e:	0000                	unimp
  70:	0058                	addi	a4,sp,4
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	025e                	slli	tp,tp,0x17
  7a:	0000                	unimp
  7c:	01a2                	slli	gp,gp,0x8
  7e:	0000                	unimp
  80:	0e42                	slli	t3,t3,0x10
  82:	4450                	lw	a2,12(s0)
  84:	06940593          	addi	a1,s0,105 # 18069 <_stack_start+0x8069>
  88:	954e                	add	a0,a0,s3
  8a:	600c9a07          	0x600c9a07
    asm volatile(
  8e:	0288                	addi	a0,sp,320
}
  90:	0389                	addi	t2,t2,2
    switch(length%3) {
  92:	0492                	slli	s1,s1,0x4
  94:	0896                	slli	a7,a7,0x5
  96:	0a980997          	auipc	s3,0xa980
  9a:	0b99                	addi	s7,s7,6
  9c:	01810d9b          	0x1810d9b
  a0:	0c42                	slli	s8,s8,0x10
  a2:	0008                	0x8
  a4:	e002                	fsw	ft0,0(sp)
            for (i = 0; i < (length / 3); i++) {
  a6:	0c0a                	slli	s8,s8,0x2
  a8:	5002                	0x5002
  aa:	c142                	sw	a6,128(sp)
  ac:	c842                	sw	a6,16(sp)
  ae:	c942                	sw	a6,144(sp)
  b0:	d242                	sw	a6,36(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	d342                	sw	a6,164(sp)
  b4:	d442                	sw	a6,40(sp)
  b6:	d542                	sw	a6,168(sp)
  b8:	d642                	sw	a6,44(sp)
  ba:	d742                	sw	a6,172(sp)
  bc:	d842                	sw	a6,48(sp)
  be:	d942                	sw	a6,176(sp)
  c0:	da42                	sw	a6,52(sp)
            a1[length-1] = a1[length-1] + a2[length-1];
  c2:	db42                	sw	a6,180(sp)
  c4:	0e4a                	slli	t3,t3,0x12
  c6:	4200                	lw	s0,0(a2)
  c8:	0000000b          	0xb
  cc:	0058                	addi	a4,sp,4
  ce:	0000                	unimp
  d0:	0000                	unimp
  d2:	0000                	unimp
  d4:	0400                	addi	s0,sp,512
  d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	015e                	slli	sp,sp,0x17
  da:	0000                	unimp
  dc:	0e42                	slli	t3,t3,0x10
  de:	4650                	lw	a2,12(a2)
  e0:	0896                	slli	a7,a7,0x5
  e2:	9348                	0x9348
  e4:	9705                	srai	a4,a4,0x21
  e6:	6209                	lui	tp,0x2
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	0288                	addi	a0,sp,320
            a1[length-2] = a1[length-2] + a2[length-2];
  ea:	0389                	addi	t2,t2,2
  ec:	0492                	slli	s1,s1,0x4
  ee:	0694                	addi	a3,sp,832
  f0:	0795                	addi	a5,a5,5
  f2:	0a98                	addi	a4,sp,336
  f4:	0b99                	addi	s7,s7,6
  f6:	0c9a                	slli	s9,s9,0x6
} //end of function
  f8:	01810d9b          	0x1810d9b
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fc:	0c42                	slli	s8,s8,0x10
    asm volatile(
  fe:	0008                	0x8
 100:	ce02                	sw	zero,28(sp)
 102:	0c0a                	slli	s8,s8,0x2
 104:	5002                	0x5002
 106:	c142                	sw	a6,128(sp)
            for (i = 0; i < (length / 3); i++) {
 108:	c842                	sw	a6,16(sp)
 10a:	c942                	sw	a6,144(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	d242                	sw	a6,36(sp)
 10e:	d342                	sw	a6,164(sp)
    asm volatile(
 110:	d442                	sw	a6,40(sp)
 112:	d542                	sw	a6,168(sp)
 114:	d642                	sw	a6,44(sp)
 116:	d742                	sw	a6,172(sp)
 118:	d842                	sw	a6,48(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	d942                	sw	a6,176(sp)
 11c:	da42                	sw	a6,52(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	db42                	sw	a6,180(sp)
 120:	0e4a                	slli	t3,t3,0x12
    asm volatile(
 122:	4200                	lw	s0,0(a2)
 124:	0000000b          	0xb
 128:	0054                	addi	a3,sp,4
 12a:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	0000                	unimp
 12e:	0000                	unimp
    asm volatile(
 130:	055e                	slli	a0,a0,0x17
 132:	0000                	unimp
}
 134:	01ba                	slli	gp,gp,0xe
    switch(length%3) {
 136:	0000                	unimp
 138:	0e46                	slli	t3,t3,0x11
 13a:	4840                	lw	s0,20(s0)
 13c:	0181                	addi	gp,gp,0
 13e:	0288                	addi	a0,sp,320
 140:	0389                	addi	t2,t2,2
 142:	0c42                	slli	s8,s8,0x10
 144:	0008                	0x8
 146:	9256                	add	tp,tp,s5
 148:	9304                	0x9304
            for (i = 0; i < (length / 3); i++) {
 14a:	9405                	srai	s0,s0,0x21
 14c:	9506                	add	a0,a0,ra
 14e:	97089607          	0x97089607
 152:	9809                	andi	s0,s0,-30
 154:	990a                	add	s2,s2,sp
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	9b0c9a0b          	0x9b0c9a0b
 15a:	020d                	addi	tp,tp,3
 15c:	0ad0                	addi	a2,sp,340
 15e:	020c                	addi	a1,sp,256
 160:	4240                	lw	s0,4(a2)
 162:	42c1                	li	t0,16
 164:	42c8                	lw	a0,4(a3)
            a1[length-1] = a2[length-1];
 166:	42c9                	li	t0,18
 168:	42d2                	lw	t0,20(sp)
 16a:	42d442d3          	0x42d442d3
 16e:	42d5                	li	t0,21
 170:	42d6                	lw	t0,84(sp)
 172:	42d842d7          	0x42d842d7
 176:	42d9                	li	t0,22
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	42da                	lw	t0,148(sp)
 17a:	000e4adb          	0xe4adb
 17e:	0b42                	slli	s6,s6,0x10
 180:	0054                	addi	a3,sp,4
 182:	0000                	unimp
 184:	0000                	unimp
 186:	0000                	unimp
            a1[length-1] = a2[length-1];
 188:	0718                	addi	a4,sp,896
            a1[length-2] = a2[length-2];
 18a:	0000                	unimp
 18c:	0214                	addi	a3,sp,256
 18e:	0000                	unimp
 190:	0e46                	slli	t3,t3,0x11
 192:	5e50                	lw	a2,60(a2)
} //end of function
 194:	0288                	addi	a0,sp,320
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 196:	0389                	addi	t2,t2,2
 198:	0492                	slli	s1,s1,0x4
    asm volatile(
 19a:	06940593          	addi	a1,s0,105
 19e:	0795                	addi	a5,a5,5
 1a0:	0896                	slli	a7,a7,0x5
 1a2:	0a980997          	auipc	s3,0xa980
            for (i = 0; i < (length / 3); i++) {
 1a6:	0b99                	addi	s7,s7,6
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1a8:	0c9a                	slli	s9,s9,0x6
 1aa:	01810d9b          	0x1810d9b
    asm volatile(
 1ae:	0c42                	slli	s8,s8,0x10
 1b0:	0008                	0x8
 1b2:	0a012e03          	lw	t3,160(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
 1b6:	020c                	addi	a1,sp,256
 1b8:	4250                	lw	a2,4(a2)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 1ba:	42c1                	li	t0,16
 1bc:	42c8                	lw	a0,4(a3)
    asm volatile(
 1be:	42c9                	li	t0,18
 1c0:	42d2                	lw	t0,20(sp)
 1c2:	42d442d3          	0x42d442d3
 1c6:	42d5                	li	t0,21
            for (i = 0; i < ((length-2) / 3); i++) {
 1c8:	42d6                	lw	t0,84(sp)
 1ca:	42d842d7          	0x42d842d7
    asm volatile(
 1ce:	42d9                	li	t0,22
}
 1d0:	42da                	lw	t0,148(sp)
    switch(length%3) {
 1d2:	000e4adb          	0xe4adb
 1d6:	0b42                	slli	s6,s6,0x10
 1d8:	0054                	addi	a3,sp,4
 1da:	0000                	unimp
 1dc:	0000                	unimp
 1de:	0000                	unimp
 1e0:	092c                	addi	a1,sp,152
 1e2:	0000                	unimp
 1e4:	02f2                	slli	t0,t0,0x1c
            for (i = 0; i < (length / 3); i++) {
 1e6:	0000                	unimp
 1e8:	0e42                	slli	t3,t3,0x10
    asm volatile(
 1ea:	03f0                	addi	a2,sp,460
            for (i = 0; i < (length / 3); i++) {
 1ec:	814c                	0x814c
 1ee:	8801                	andi	s0,s0,0
 1f0:	8902                	jr	s2
            for (i = 0; i < ((length-2) / 3); i++) {
 1f2:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 1f6:	6400                	flw	fs0,8(s0)
 1f8:	0492                	slli	s1,s1,0x4
 1fa:	06940593          	addi	a1,s0,105
 1fe:	0795                	addi	a5,a5,5
 200:	0896                	slli	a7,a7,0x5
            a1[length-1] = a1[length-1] % mod;
 202:	0c9a0997          	auipc	s3,0xc9a0
 206:	0a98                	addi	a4,sp,336
 208:	0b99                	addi	s7,s7,6
 20a:	0a01da03          	lhu	s4,160(gp)
 20e:	020c                	addi	a1,sp,256
 210:	03f0                	addi	a2,sp,460
 212:	c144                	sw	s1,4(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
 214:	c844                	sw	s1,20(s0)
 216:	c944                	sw	s1,20(a0)
 218:	d244                	sw	s1,36(a2)
 21a:	d344                	sw	s1,36(a4)
 21c:	d444                	sw	s1,44(s0)
    asm volatile(
 21e:	d544                	sw	s1,44(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
 220:	d644                	sw	s1,44(a2)
 222:	d744                	sw	s1,44(a4)
            a1[length-1] = a1[length-1] % mod;
 224:	d844                	sw	s1,52(s0)
            a1[length-2] = a1[length-2] % mod;
 226:	d944                	sw	s1,52(a0)
 228:	da44                	sw	s1,52(a2)
 22a:	0e4a                	slli	t3,t3,0x12
 22c:	4200                	lw	s0,0(a2)
 22e:	0034000b          	0x34000b
} //end of function
 232:	0000                	unimp
    asm volatile(
 234:	0000                	unimp
 236:	0000                	unimp
 238:	0c1e                	slli	s8,s8,0x7
 23a:	0000                	unimp
 23c:	0086                	slli	ra,ra,0x1
            for (i = 0; i < (length / 3); i++) {
 23e:	0000                	unimp
 240:	0e42                	slli	t3,t3,0x10
    asm volatile(
 242:	01e0                	addi	s0,sp,204
 244:	8844                	0x8844
 246:	8902                	jr	s2
 248:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
            for (i = 0; i < ((length-1) / 3); i++) {
 24c:	8152                	mv	sp,s4
 24e:	9301                	srli	a4,a4,0x20
    asm volatile(
 250:	9405                	srai	s0,s0,0x21
 252:	0206                	slli	tp,tp,0x1
 254:	0a44                	addi	s1,sp,276
 256:	42c1                	li	t0,16
 258:	42c8                	lw	a0,4(a3)
            for (i = 0; i < ((length-2) / 3); i++) {
 25a:	42c9                	li	t0,18
 25c:	42d2                	lw	t0,20(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 25e:	42d442d3          	0x42d442d3
 262:	000e                	c.slli	zero,0x3
 264:	0b42                	slli	s6,s6,0x10
 266:	0000                	unimp
 268:	0040                	addi	s0,sp,4
    int line[size_b][size_a + size_b];
 26a:	0000                	unimp
 26c:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 26e:	0000                	unimp
 270:	0ca4                	addi	s1,sp,600
    int line[size_b][size_a + size_b];
 272:	0000                	unimp
 274:	00c4                	addi	s1,sp,68
 276:	0000                	unimp
 278:	0e42                	slli	t3,t3,0x10
 27a:	4430                	lw	a2,72(s0)
 27c:	0288                	addi	a0,sp,320
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 27e:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
 282:	9504                	0x9504
 284:	58099707          	0x58099707
 288:	0181                	addi	gp,gp,0
 28a:	0389                	addi	t2,t2,2
 28c:	0694                	addi	a3,sp,832
 28e:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 290:	4e02                	lw	t3,0(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 292:	c10a                	sw	sp,128(sp)
    int line[size_b][size_a + size_b];
 294:	c842                	sw	a6,16(sp)
 296:	c942                	sw	a6,144(sp)
 298:	d242                	sw	a6,36(sp)
    int pola[size_a];
 29a:	d342                	sw	a6,164(sp)
 29c:	d442                	sw	a6,40(sp)
 29e:	d542                	sw	a6,168(sp)
 2a0:	d642                	sw	a6,44(sp)
    int line[size_b][size_a + size_b];
 2a2:	d742                	sw	a6,172(sp)
    int pola[size_a];
 2a4:	0e42                	slli	t3,t3,0x10
 2a6:	4200                	lw	s0,0(a2)
    int polb[size_b];
 2a8:	0000000b          	0xb
 2ac:	002c                	addi	a1,sp,8
    int pola[size_a];
 2ae:	0000                	unimp
    int polb[size_b];
 2b0:	0000                	unimp
 2b2:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 2b4:	0f64                	addi	s1,sp,924
 2b6:	0000                	unimp
 2b8:	0138                	addi	a4,sp,136
    int line[size_b][size_a + size_b];
 2ba:	0000                	unimp
 2bc:	0e44                	addi	s1,sp,788
    int polb[size_b];
 2be:	08b0                	addi	a2,sp,88
    int pola[size_a];
 2c0:	815e                	mv	sp,s7
 2c2:	8801                	andi	s0,s0,0
    for (i = 0; i < size_b; ++i){
 2c4:	8902                	jr	s2
 2c6:	03049203          	lh	tp,48(s1)
            product[j] = 0;
 2ca:	00f8                	addi	a4,sp,76
 2cc:	c10a                	sw	sp,128(sp)
 2ce:	c844                	sw	s1,20(s0)
 2d0:	c944                	sw	s1,20(a0)
    for (i = 0; i < size_b; ++i){
 2d2:	d244                	sw	s1,36(a2)
 2d4:	0e46                	slli	t3,t3,0x11
    array_equ(pola,a,size_a);
 2d6:	4200                	lw	s0,0(a2)
 2d8:	0000000b          	0xb

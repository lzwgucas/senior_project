
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	3bf0006f          	j	c3a <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	3bf0006f          	j	c3e <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	3b70006f          	j	c3a <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	3b30006f          	j	c3a <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  8c:	06b5750b          	0x6b5750b

    );
    return;


}
  90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
  92:	478d                	li	a5,3
  94:	02f64633          	div	a2,a2,a5
  98:	4831                	li	a6,12
  9a:	4781                	li	a5,0
  9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	03078733          	mul	a4,a5,a6
    asm volatile(
  a6:	00e506b3          	add	a3,a0,a4
  aa:	972e                	add	a4,a4,a1
  ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
  b0:	0785                	addi	a5,a5,1
  b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  b4:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
  b8:	8082                	ret

000000ba <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
  ba:	478d                	li	a5,3
  bc:	02f64633          	div	a2,a2,a5
  c0:	4831                	li	a6,12
  c2:	4781                	li	a5,0
  c4:	00c7c363          	blt	a5,a2,ca <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
  c8:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  ca:	03078733          	mul	a4,a5,a6
    asm volatile(
  ce:	00e506b3          	add	a3,a0,a4
  d2:	972e                	add	a4,a4,a1
  d4:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
  d8:	0785                	addi	a5,a5,1
  da:	b7ed                	j	c4 <array_equ+0xa>

000000dc <instr_mod>:

void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
  dc:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  e0:	8082                	ret

000000e2 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
  e2:	478d                	li	a5,3
  e4:	02f64633          	div	a2,a2,a5
    asm volatile(
  e8:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
  ea:	4781                	li	a5,0
  ec:	00c7c363          	blt	a5,a2,f2 <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
  f0:	8082                	ret
    asm volatile(
  f2:	02d78733          	mul	a4,a5,a3
  f6:	972a                	add	a4,a4,a0
  f8:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
  fc:	0785                	addi	a5,a5,1
  fe:	b7fd                	j	ec <array_mod+0xa>

00000100 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	715d                	addi	sp,sp,-80
 102:	c0ca                	sw	s2,64(sp)
 104:	8936                	mv	s2,a3
 106:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
 108:	96ae                	add	a3,a3,a1
 10a:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	d462                	sw	s8,40(sp)
 110:	d266                	sw	s9,36(sp)
    int line[size_b][size_a + size_b];
 112:	00269c13          	slli	s8,a3,0x2
 116:	fff68c93          	addi	s9,a3,-1
 11a:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	dc52                	sw	s4,56(sp)
 120:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
 122:	00259713          	slli	a4,a1,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 126:	c4a2                	sw	s0,72(sp)
 128:	c2a6                	sw	s1,68(sp)
 12a:	da56                	sw	s5,52(sp)
 12c:	d85a                	sw	s6,48(sp)
 12e:	d65e                	sw	s7,44(sp)
 130:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
 132:	06bd                	addi	a3,a3,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	ce6e                	sw	s11,28(sp)
 136:	c686                	sw	ra,76(sp)
 138:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 13a:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
 13c:	073d                	addi	a4,a4,15
 13e:	9b41                	andi	a4,a4,-16
    int line[size_b][size_a + size_b];
 140:	40d10133          	sub	sp,sp,a3
 144:	8b8a                	mv	s7,sp
    int pola[size_a];
 146:	40e10133          	sub	sp,sp,a4
    int polb[size_b];
 14a:	00f98713          	addi	a4,s3,15
 14e:	9b41                	andi	a4,a4,-16
    int pola[size_a];
 150:	8d8a                	mv	s11,sp
    int polb[size_b];
 152:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 156:	8aae                	mv	s5,a1
    int pola[size_a];
 158:	fff58693          	addi	a3,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	8832                	mv	a6,a2
    int line[size_b][size_a + size_b];
 15e:	fff90b13          	addi	s6,s2,-1
    int polb[size_b];
 162:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
 164:	002c5d13          	srli	s10,s8,0x2
 168:	875e                	mv	a4,s7
    for (i = 0; i < size_b; ++i){
 16a:	88de                	mv	a7,s7
 16c:	4581                	li	a1,0
            product[j] = 0;
 16e:	00001e97          	auipc	t4,0x1
 172:	f96e8e93          	addi	t4,t4,-106 # 1104 <_bss_start>
    for (i = 0; i < size_b; ++i){
 176:	0725cc63          	blt	a1,s2,1ee <polymult+0xee>
//        while (pola[i] < 0){
//            pola[i] = pola[i] + mod;
//        }
//        pola[i] = pola[i] % mod;
//    }
    array_equ(pola,a,size_a);
 17a:	85aa                	mv	a1,a0
 17c:	8656                	mv	a2,s5
 17e:	856e                	mv	a0,s11
 180:	faf42823          	sw	a5,-80(s0)
 184:	fae42c23          	sw	a4,-72(s0)
 188:	fad42e23          	sw	a3,-68(s0)
 18c:	fb042a23          	sw	a6,-76(s0)
 190:	372d                	jal	ba <array_equ>
    array_mod(pola,mod,size_a);
 192:	8656                	mv	a2,s5
 194:	85d2                	mv	a1,s4
 196:	856e                	mv	a0,s11
 198:	37a9                	jal	e2 <array_mod>
//        while (polb[i] < 0){
//            polb[i] = polb[i] + mod;
//        }
//        polb[i] = polb[i] % mod;
//    }
    array_equ(polb,b,size_b);
 19a:	fb442803          	lw	a6,-76(s0)
 19e:	8526                	mv	a0,s1
 1a0:	864a                	mv	a2,s2
 1a2:	85c2                	mv	a1,a6
 1a4:	3f19                	jal	ba <array_equ>
    array_mod(polb,mod,size_b);
 1a6:	864a                	mv	a2,s2
 1a8:	8526                	mv	a0,s1
 1aa:	85d2                	mv	a1,s4
 1ac:	3f1d                	jal	e2 <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 1ae:	fb042783          	lw	a5,-80(s0)
 1b2:	4605                	li	a2,1
 1b4:	fbc42683          	lw	a3,-68(s0)
 1b8:	fb842703          	lw	a4,-72(s0)
 1bc:	94ce                	add	s1,s1,s3
 1be:	02c78b63          	beq	a5,a2,1f4 <polymult+0xf4>
 1c2:	19f1                	addi	s3,s3,-4
 1c4:	ffcc0593          	addi	a1,s8,-4
 1c8:	99de                	add	s3,s3,s7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 1ca:	020b4863          	bltz	s6,1fa <polymult+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ce:	87b6                	mv	a5,a3
 1d0:	a85d                	j	286 <polymult+0x186>
            product[j] = 0;
 1d2:	00261e13          	slli	t3,a2,0x2
 1d6:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
 1d8:	00032023          	sw	zero,0(t1)
            product[j] = 0;
 1dc:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
 1e0:	0605                	addi	a2,a2,1
 1e2:	0311                	addi	t1,t1,4
 1e4:	ff9647e3          	blt	a2,s9,1d2 <polymult+0xd2>
    for (i = 0; i < size_b; ++i){
 1e8:	0585                	addi	a1,a1,1
 1ea:	98e2                	add	a7,a7,s8
 1ec:	b769                	j	176 <polymult+0x76>
 1ee:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	4601                	li	a2,0
 1f2:	bfcd                	j	1e4 <polymult+0xe4>
    if(star_mult == 1){
 1f4:	85de                	mv	a1,s7
        for (j = size_b -1; j >= 0; j = j-1){
 1f6:	060b5a63          	bgez	s6,26a <polymult+0x16a>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	4681                	li	a3,0
    for (i = 0; i < size_b; ++i){
 1fc:	0b26c763          	blt	a3,s2,2aa <polymult+0x1aa>
 200:	00001697          	auipc	a3,0x1
 204:	f0468693          	addi	a3,a3,-252 # 1104 <_bss_start>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
 208:	4701                	li	a4,0
 20a:	0d974263          	blt	a4,s9,2ce <polymult+0x1ce>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
 20e:	8666                	mv	a2,s9
 210:	85d2                	mv	a1,s4
 212:	00001517          	auipc	a0,0x1
 216:	ef250513          	addi	a0,a0,-270 # 1104 <_bss_start>
 21a:	35e1                	jal	e2 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
 21c:	fb040113          	addi	sp,s0,-80
 220:	40b6                	lw	ra,76(sp)
 222:	4426                	lw	s0,72(sp)
 224:	4496                	lw	s1,68(sp)
 226:	4906                	lw	s2,64(sp)
 228:	59f2                	lw	s3,60(sp)
 22a:	5a62                	lw	s4,56(sp)
 22c:	5ad2                	lw	s5,52(sp)
 22e:	5b42                	lw	s6,48(sp)
 230:	5bb2                	lw	s7,44(sp)
 232:	5c22                	lw	s8,40(sp)
 234:	5c92                	lw	s9,36(sp)
 236:	5d02                	lw	s10,32(sp)
 238:	4df2                	lw	s11,28(sp)
 23a:	00001517          	auipc	a0,0x1
 23e:	eca50513          	addi	a0,a0,-310 # 1104 <_bss_start>
 242:	6161                	addi	sp,sp,80
 244:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
 246:	00279613          	slli	a2,a5,0x2
 24a:	00c58533          	add	a0,a1,a2
 24e:	966e                	add	a2,a2,s11
 250:	4210                	lw	a2,0(a2)
 252:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 258:	03060633          	mul	a2,a2,a6
 25c:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	fe07d4e3          	bgez	a5,246 <polymult+0x146>
        for (j = size_b -1; j >= 0; j = j-1){
 262:	1b7d                	addi	s6,s6,-1
 264:	14f1                	addi	s1,s1,-4
 266:	95e2                	add	a1,a1,s8
 268:	b779                	j	1f6 <polymult+0xf6>
            for (k = size_a-1; k >= 0; k = k-1 ){
 26a:	87b6                	mv	a5,a3
 26c:	bfcd                	j	25e <polymult+0x15e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26e:	00279613          	slli	a2,a5,0x2
 272:	00c98533          	add	a0,s3,a2
 276:	966e                	add	a2,a2,s11
 278:	4210                	lw	a2,0(a2)
 27a:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 280:	03060633          	mul	a2,a2,a6
 284:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 286:	fe07d4e3          	bgez	a5,26e <polymult+0x16e>
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	1b7d                	addi	s6,s6,-1
 28c:	14f1                	addi	s1,s1,-4
 28e:	99ae                	add	s3,s3,a1
 290:	bf2d                	j	1ca <polymult+0xca>
            line[i][j] = line[i][j] % mod;
 292:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	0605                	addi	a2,a2,1
 296:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
 298:	0345e5b3          	rem	a1,a1,s4
 29c:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	ff9649e3          	blt	a2,s9,292 <polymult+0x192>
    for (i = 0; i < size_b; ++i){
 2a4:	0685                	addi	a3,a3,1
 2a6:	9762                	add	a4,a4,s8
 2a8:	bf91                	j	1fc <polymult+0xfc>
 2aa:	87ba                	mv	a5,a4
        for(j = 0; j < size_a + size_b -1; ++j){
 2ac:	4601                	li	a2,0
 2ae:	bfcd                	j	2a0 <polymult+0x1a0>
            product[j] += line[i][j];
 2b0:	03a607b3          	mul	a5,a2,s10
 2b4:	428c                	lw	a1,0(a3)
        for(i = 0; i < size_b; ++i){
 2b6:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
 2b8:	97ba                	add	a5,a5,a4
 2ba:	078a                	slli	a5,a5,0x2
 2bc:	97de                	add	a5,a5,s7
 2be:	439c                	lw	a5,0(a5)
 2c0:	97ae                	add	a5,a5,a1
 2c2:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
 2c4:	ff2646e3          	blt	a2,s2,2b0 <polymult+0x1b0>
    for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	0705                	addi	a4,a4,1
 2ca:	0691                	addi	a3,a3,4
 2cc:	bf3d                	j	20a <polymult+0x10a>
        for(i = 0; i < size_b; ++i){
 2ce:	4601                	li	a2,0
 2d0:	bfd5                	j	2c4 <polymult+0x1c4>

000002d2 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d2:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
 2d4:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	d85a                	sw	s6,48(sp)
 2da:	00269b13          	slli	s6,a3,0x2
 2de:	de4e                	sw	s3,60(sp)
 2e0:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
 2e2:	fff78993          	addi	s3,a5,-1
 2e6:	00279b93          	slli	s7,a5,0x2
 2ea:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ee:	c4a2                	sw	s0,72(sp)
 2f0:	c2a6                	sw	s1,68(sp)
 2f2:	c0ca                	sw	s2,64(sp)
 2f4:	dc52                	sw	s4,56(sp)
 2f6:	da56                	sw	s5,52(sp)
 2f8:	d462                	sw	s8,40(sp)
 2fa:	d266                	sw	s9,36(sp)
 2fc:	d06a                	sw	s10,32(sp)
 2fe:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
 300:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 302:	c686                	sw	ra,76(sp)
 304:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
 306:	9bc1                	andi	a5,a5,-16
 308:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
 30c:	00259793          	slli	a5,a1,0x2
 310:	07bd                	addi	a5,a5,15
 312:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
 314:	890a                	mv	s2,sp
    int pola[size_a];
 316:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
 31a:	00fb0793          	addi	a5,s6,15
 31e:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
 320:	8d0a                	mv	s10,sp
    int polb[size_b];
 322:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 326:	8a36                	mv	s4,a3
 328:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
 32a:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 32e:	8832                	mv	a6,a2
    int pola[size_a];
 330:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
 334:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
 336:	8cca                	mv	s9,s2
 338:	86ca                	mv	a3,s2
 33a:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
 33c:	00001317          	auipc	t1,0x1
 340:	02030313          	addi	t1,t1,32 # 135c <product2>
    for (i = 0; i < size_b; ++i){
 344:	05474963          	blt	a4,s4,396 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
 348:	862e                	mv	a2,a1
 34a:	85aa                	mv	a1,a0
 34c:	856a                	mv	a0,s10
 34e:	fb042e23          	sw	a6,-68(s0)
 352:	33a5                	jal	ba <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
 354:	fbc42803          	lw	a6,-68(s0)
 358:	8526                	mv	a0,s1
 35a:	8652                	mv	a2,s4
 35c:	85c2                	mv	a1,a6
 35e:	3bb1                	jal	ba <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 360:	4785                	li	a5,1
 362:	01648533          	add	a0,s1,s6
 366:	04fd8c63          	beq	s11,a5,3be <polymult2+0xec>
 36a:	1b71                	addi	s6,s6,-4
 36c:	ffcb8693          	addi	a3,s7,-4
 370:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 372:	040ac863          	bltz	s5,3c2 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
 376:	87e2                	mv	a5,s8
 378:	a879                	j	416 <polymult2+0x144>
            product2[j] = 0;
 37a:	00279893          	slli	a7,a5,0x2
 37e:	989a                	add	a7,a7,t1
            line[i][j] = 0;
 380:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
 384:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
 388:	0785                	addi	a5,a5,1
 38a:	0611                	addi	a2,a2,4
 38c:	ff37c7e3          	blt	a5,s3,37a <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
 390:	0705                	addi	a4,a4,1
 392:	96de                	add	a3,a3,s7
 394:	bf45                	j	344 <polymult2+0x72>
 396:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
 398:	4781                	li	a5,0
 39a:	bfcd                	j	38c <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
 39c:	00279713          	slli	a4,a5,0x2
 3a0:	00e906b3          	add	a3,s2,a4
 3a4:	976a                	add	a4,a4,s10
 3a6:	4318                	lw	a4,0(a4)
 3a8:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ae:	02c70733          	mul	a4,a4,a2
 3b2:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	fe07d4e3          	bgez	a5,39c <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
 3b8:	1afd                	addi	s5,s5,-1
 3ba:	1571                	addi	a0,a0,-4
 3bc:	995e                	add	s2,s2,s7
 3be:	020ade63          	bgez	s5,3fa <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c2:	4481                	li	s1,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
 3c4:	00001917          	auipc	s2,0x1
 3c8:	f9890913          	addi	s2,s2,-104 # 135c <product2>
    for(i=0;i<size_b;++i){
 3cc:	0544cb63          	blt	s1,s4,422 <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
 3d0:	fb040113          	addi	sp,s0,-80
 3d4:	40b6                	lw	ra,76(sp)
 3d6:	4426                	lw	s0,72(sp)
 3d8:	4496                	lw	s1,68(sp)
 3da:	4906                	lw	s2,64(sp)
 3dc:	59f2                	lw	s3,60(sp)
 3de:	5a62                	lw	s4,56(sp)
 3e0:	5ad2                	lw	s5,52(sp)
 3e2:	5b42                	lw	s6,48(sp)
 3e4:	5bb2                	lw	s7,44(sp)
 3e6:	5c22                	lw	s8,40(sp)
 3e8:	5c92                	lw	s9,36(sp)
 3ea:	5d02                	lw	s10,32(sp)
 3ec:	4df2                	lw	s11,28(sp)
 3ee:	00001517          	auipc	a0,0x1
 3f2:	f6e50513          	addi	a0,a0,-146 # 135c <product2>
 3f6:	6161                	addi	sp,sp,80
 3f8:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
 3fa:	87e2                	mv	a5,s8
 3fc:	bf65                	j	3b4 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fe:	00279713          	slli	a4,a5,0x2
 402:	00e90633          	add	a2,s2,a4
 406:	976a                	add	a4,a4,s10
 408:	4318                	lw	a4,0(a4)
 40a:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 40e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 410:	02b70733          	mul	a4,a4,a1
 414:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 416:	fe07d4e3          	bgez	a5,3fe <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	1afd                	addi	s5,s5,-1
 41c:	1571                	addi	a0,a0,-4
 41e:	9936                	add	s2,s2,a3
 420:	bf89                	j	372 <polymult2+0xa0>
        array_add(product2,line[i],size_a+size_b-1);
 422:	85e6                	mv	a1,s9
 424:	864e                	mv	a2,s3
 426:	854a                	mv	a0,s2
 428:	31ad                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
 42a:	0485                	addi	s1,s1,1
 42c:	9cde                	add	s9,s9,s7
 42e:	bf79                	j	3cc <polymult2+0xfa>

00000430 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
 430:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	7139                	addi	sp,sp,-64
    int v[size_N];
 436:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 438:	de06                	sw	ra,60(sp)
 43a:	dc22                	sw	s0,56(sp)
 43c:	da26                	sw	s1,52(sp)
 43e:	0080                	addi	s0,sp,64
 440:	d84a                	sw	s2,48(sp)
 442:	d64e                	sw	s3,44(sp)
 444:	d452                	sw	s4,40(sp)
 446:	d256                	sw	s5,36(sp)
 448:	d05a                	sw	s6,32(sp)
 44a:	ce5e                	sw	s7,28(sp)
 44c:	cc62                	sw	s8,24(sp)
 44e:	ca66                	sw	s9,20(sp)
 450:	c86a                	sw	s10,16(sp)
    int v[size_N];
 452:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 454:	c66e                	sw	s11,12(sp)
    int v[size_N];
 456:	40f10133          	sub	sp,sp,a5
 45a:	8a8a                	mv	s5,sp
    int q[size_N];
 45c:	40f10133          	sub	sp,sp,a5
 460:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
 462:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
 466:	00269793          	slli	a5,a3,0x2
 46a:	07bd                	addi	a5,a5,15
 46c:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
 46e:	890a                	mv	s2,sp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 470:	84ae                	mv	s1,a1
    int denum_temp[size_D];
 472:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 476:	8d32                	mv	s10,a2
    int v[size_N];
 478:	fff58c13          	addi	s8,a1,-1
//            num_temp[i] = num_temp[i] + mod;
//        }
//        num_temp[i] = num_temp[i] % mod;
//    }

    array_equ(num_temp,num,size_N);
 47c:	862e                	mv	a2,a1
 47e:	85aa                	mv	a1,a0
 480:	854a                	mv	a0,s2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 482:	8a36                	mv	s4,a3
 484:	89ba                	mv	s3,a4
    int denum_temp[size_D];
 486:	fff68c93          	addi	s9,a3,-1
    array_equ(num_temp,num,size_N);
 48a:	3905                	jal	ba <array_equ>
    array_mod(num_temp,mod,size_N);
 48c:	8626                	mv	a2,s1
 48e:	85ce                	mv	a1,s3
 490:	854a                	mv	a0,s2
 492:	3981                	jal	e2 <array_mod>
    int denum_temp[size_D];
 494:	8b8a                	mv	s7,sp
//            denum_temp[i] = denum_temp[i] + mod;
//        }
//        denum_temp[i] = denum_temp[i] % mod;
//    }

    array_equ(denum_temp,denum,size_D);
 496:	8652                	mv	a2,s4
 498:	85ea                	mv	a1,s10
 49a:	855e                	mv	a0,s7
 49c:	3939                	jal	ba <array_equ>
    array_mod(denum_temp,mod,size_D);
 49e:	8652                	mv	a2,s4
 4a0:	85ce                	mv	a1,s3
 4a2:	855e                	mv	a0,s7
 4a4:	393d                	jal	e2 <array_mod>

    for (i = 0; i < size_N; ++i){
 4a6:	4781                	li	a5,0
 4a8:	0097cf63          	blt	a5,s1,4c6 <polydiv+0x96>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
 4ac:	002c9793          	slli	a5,s9,0x2
 4b0:	97de                	add	a5,a5,s7
 4b2:	4398                	lw	a4,0(a5)
 4b4:	020cd463          	bgez	s9,4dc <polydiv+0xac>
    for (i = 0; i < size_N; ++i){
 4b8:	4781                	li	a5,0
 4ba:	4d01                	li	s10,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
 4bc:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
 4be:	033d4263          	blt	s10,s3,4e2 <polydiv+0xb2>
 4c2:	87e2                	mv	a5,s8
 4c4:	a805                	j	4f4 <polydiv+0xc4>
        q[i] = 0;
 4c6:	00279713          	slli	a4,a5,0x2
 4ca:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
 4ce:	9756                	add	a4,a4,s5
        q[i] = 0;
 4d0:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
 4d4:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
 4d8:	0785                	addi	a5,a5,1
 4da:	b7f9                	j	4a8 <polydiv+0x78>
        if( denum_temp[i] != 0 )
 4dc:	ff71                	bnez	a4,4b8 <polydiv+0x88>
    for (i = size_D-1; i >= 0; i = i-1){
 4de:	1cfd                	addi	s9,s9,-1
 4e0:	b7f1                	j	4ac <polydiv+0x7c>
        if ( (b_N*u)%mod == 1 )
 4e2:	0337e633          	rem	a2,a5,s3
 4e6:	97ba                	add	a5,a5,a4
 4e8:	fcd60de3          	beq	a2,a3,4c2 <polydiv+0x92>
    for (u = 0; u < mod; ++u){
 4ec:	0d05                	addi	s10,s10,1
 4ee:	bfc1                	j	4be <polydiv+0x8e>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
 4f0:	eb01                	bnez	a4,500 <polydiv+0xd0>
    for (i = size_N-1; i >= 0; i = i-1){
 4f2:	17fd                	addi	a5,a5,-1
 4f4:	00279713          	slli	a4,a5,0x2
 4f8:	974a                	add	a4,a4,s2
 4fa:	4318                	lw	a4,0(a4)
 4fc:	fe07dae3          	bgez	a5,4f0 <polydiv+0xc0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
 500:	0597d663          	bge	a5,s9,54c <polydiv+0x11c>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    array_equ(result,q,size_N);
 504:	8626                	mv	a2,s1
 506:	85da                	mv	a1,s6
 508:	00001517          	auipc	a0,0x1
 50c:	0ac50513          	addi	a0,a0,172 # 15b4 <result>
 510:	366d                	jal	ba <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
 512:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
 516:	00001697          	auipc	a3,0x1
 51a:	09e68693          	addi	a3,a3,158 # 15b4 <result>
    for(i = size_N; i < (2*size_N); ++i){
 51e:	0ae4cd63          	blt	s1,a4,5d8 <polydiv+0x1a8>
    }

    return_address3 = &result[0];

    return return_address3;
}
 522:	fc040113          	addi	sp,s0,-64
 526:	50f2                	lw	ra,60(sp)
 528:	5462                	lw	s0,56(sp)
 52a:	54d2                	lw	s1,52(sp)
 52c:	5942                	lw	s2,48(sp)
 52e:	59b2                	lw	s3,44(sp)
 530:	5a22                	lw	s4,40(sp)
 532:	5a92                	lw	s5,36(sp)
 534:	5b02                	lw	s6,32(sp)
 536:	4bf2                	lw	s7,28(sp)
 538:	4c62                	lw	s8,24(sp)
 53a:	4cd2                	lw	s9,20(sp)
 53c:	4d42                	lw	s10,16(sp)
 53e:	4db2                	lw	s11,12(sp)
 540:	00001517          	auipc	a0,0x1
 544:	07450513          	addi	a0,a0,116 # 15b4 <result>
 548:	6121                	addi	sp,sp,64
 54a:	8082                	ret
        v[(d-d2)] = u*r_d;
 54c:	03a70733          	mul	a4,a4,s10
 550:	419787b3          	sub	a5,a5,s9
 554:	078a                	slli	a5,a5,0x2
 556:	97d6                	add	a5,a5,s5
    array_mod(v,mod,size_N);
 558:	8626                	mv	a2,s1
 55a:	85ce                	mv	a1,s3
 55c:	8556                	mv	a0,s5
        v[(d-d2)] = u*r_d;
 55e:	c398                	sw	a4,0(a5)
    array_mod(v,mod,size_N);
 560:	3649                	jal	e2 <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 562:	4781                	li	a5,0
 564:	874e                	mv	a4,s3
 566:	86d2                	mv	a3,s4
 568:	8656                	mv	a2,s5
 56a:	85d2                	mv	a1,s4
 56c:	855e                	mv	a0,s7
 56e:	3e49                	jal	100 <polymult>
    array_mod(product,mod,size_N);
 570:	8626                	mv	a2,s1
 572:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 574:	8daa                	mv	s11,a0
    array_mod(product,mod,size_N);
 576:	36b5                	jal	e2 <array_mod>
        for (i = 0; i < size_N; ++i){
 578:	874a                	mv	a4,s2
 57a:	4781                	li	a5,0
 57c:	0297c763          	blt	a5,s1,5aa <polydiv+0x17a>
    array_mod(num_temp,mod,size_N);
 580:	8626                	mv	a2,s1
 582:	85ce                	mv	a1,s3
 584:	854a                	mv	a0,s2
 586:	3eb1                	jal	e2 <array_mod>
    array_add(q,v,size_N);
 588:	8626                	mv	a2,s1
 58a:	85d6                	mv	a1,s5
 58c:	855a                	mv	a0,s6
 58e:	3611                	jal	92 <array_add>
    array_mod(q,mod,size_N);
 590:	8626                	mv	a2,s1
 592:	85ce                	mv	a1,s3
 594:	855a                	mv	a0,s6
 596:	36b1                	jal	e2 <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
 598:	87e2                	mv	a5,s8
 59a:	00279713          	slli	a4,a5,0x2
 59e:	974a                	add	a4,a4,s2
 5a0:	4318                	lw	a4,0(a4)
 5a2:	0007df63          	bgez	a5,5c0 <polydiv+0x190>
 5a6:	4681                	li	a3,0
 5a8:	a02d                	j	5d2 <polydiv+0x1a2>
            num_temp[i] = num_temp[i] - product[i];
 5aa:	00279613          	slli	a2,a5,0x2
 5ae:	966e                	add	a2,a2,s11
 5b0:	4314                	lw	a3,0(a4)
 5b2:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
 5b4:	0785                	addi	a5,a5,1
 5b6:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
 5b8:	8e91                	sub	a3,a3,a2
 5ba:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
 5be:	bf7d                	j	57c <polydiv+0x14c>
            if( num_temp[i] != 0 )
 5c0:	f37d                	bnez	a4,5a6 <polydiv+0x176>
        for (i = size_N-1; i >= 0; i = i-1){
 5c2:	17fd                	addi	a5,a5,-1
 5c4:	bfd9                	j	59a <polydiv+0x16a>
            v[i] = 0;
 5c6:	00269613          	slli	a2,a3,0x2
 5ca:	9656                	add	a2,a2,s5
 5cc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
 5d0:	0685                	addi	a3,a3,1
 5d2:	fe96cae3          	blt	a3,s1,5c6 <polydiv+0x196>
 5d6:	b72d                	j	500 <polydiv+0xd0>
        result[i] = num_temp[i-size_N];
 5d8:	00092603          	lw	a2,0(s2)
 5dc:	00249793          	slli	a5,s1,0x2
 5e0:	97b6                	add	a5,a5,a3
 5e2:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
 5e4:	0485                	addi	s1,s1,1
 5e6:	0911                	addi	s2,s2,4
 5e8:	bf1d                	j	51e <polydiv+0xee>

000005ea <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
 5ea:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5ee:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
 5f0:	07bd                	addi	a5,a5,15
 5f2:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5f4:	c4a2                	sw	s0,72(sp)
 5f6:	c2a6                	sw	s1,68(sp)
 5f8:	c0ca                	sw	s2,64(sp)
 5fa:	de4e                	sw	s3,60(sp)
 5fc:	dc52                	sw	s4,56(sp)
 5fe:	da56                	sw	s5,52(sp)
 600:	d85a                	sw	s6,48(sp)
 602:	d65e                	sw	s7,44(sp)
 604:	d462                	sw	s8,40(sp)
 606:	d266                	sw	s9,36(sp)
 608:	d06a                	sw	s10,32(sp)
 60a:	ce6e                	sw	s11,28(sp)
 60c:	c686                	sw	ra,76(sp)
 60e:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
 610:	40f10133          	sub	sp,sp,a5
 614:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
 616:	40f10133          	sub	sp,sp,a5
 61a:	8a0a                	mv	s4,sp
    int ri[size];
 61c:	40f10133          	sub	sp,sp,a5
 620:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
 622:	40f10133          	sub	sp,sp,a5
 626:	8b0a                	mv	s6,sp
    int ti[size];
 628:	40f10133          	sub	sp,sp,a5
 62c:	8d0a                	mv	s10,sp
    int qi_1[size];
 62e:	40f10133          	sub	sp,sp,a5
 632:	8c8a                	mv	s9,sp
    int temp[size];
 634:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 638:	8936                	mv	s2,a3
 63a:	8dae                	mv	s11,a1
 63c:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
 63e:	fff60b93          	addi	s7,a2,-1
    int temp[size];
 642:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
 644:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
 646:	00001697          	auipc	a3,0x1
 64a:	1c668693          	addi	a3,a3,454 # 180c <ti_2>
    for (i = 0; i < size; ++i) {
 64e:	1097cb63          	blt	a5,s1,764 <ext_euclid+0x17a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
 652:	85aa                	mv	a1,a0
 654:	8626                	mv	a2,s1
 656:	854e                	mv	a0,s3
 658:	348d                	jal	ba <array_equ>
    array_equ(ri_1,polyf,size);
 65a:	85ee                	mv	a1,s11
 65c:	8626                	mv	a2,s1
 65e:	8552                	mv	a0,s4
 660:	3ca9                	jal	ba <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
 662:	4785                	li	a5,1
 664:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
 668:	00149793          	slli	a5,s1,0x1
 66c:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
 670:	00001d97          	auipc	s11,0x1
 674:	19cd8d93          	addi	s11,s11,412 # 180c <ti_2>
    array_mod(ri_2,mod,size);
 678:	8626                	mv	a2,s1
 67a:	85ca                	mv	a1,s2
 67c:	854e                	mv	a0,s3
 67e:	3495                	jal	e2 <array_mod>
    array_mod(ri_1,mod,size);
 680:	8626                	mv	a2,s1
 682:	85ca                	mv	a1,s2
 684:	8552                	mv	a0,s4
 686:	3cb1                	jal	e2 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 688:	874a                	mv	a4,s2
 68a:	86a6                	mv	a3,s1
 68c:	8652                	mv	a2,s4
 68e:	85a6                	mv	a1,s1
 690:	854e                	mv	a0,s3
 692:	3b79                	jal	430 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
 694:	8762                	mv	a4,s8
 696:	87a6                	mv	a5,s1
 698:	fbc42683          	lw	a3,-68(s0)
 69c:	0cd7cf63          	blt	a5,a3,77a <ext_euclid+0x190>
 6a0:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
 6a2:	4701                	li	a4,0
 6a4:	0eebd463          	bge	s7,a4,78c <ext_euclid+0x1a2>
    array_mod(temp,mod,size);
 6a8:	8626                	mv	a2,s1
 6aa:	85ca                	mv	a1,s2
 6ac:	8556                	mv	a0,s5
 6ae:	3c15                	jal	e2 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6b0:	874a                	mv	a4,s2
 6b2:	86a6                	mv	a3,s1
 6b4:	8652                	mv	a2,s4
 6b6:	85a6                	mv	a1,s1
 6b8:	8556                	mv	a0,s5
 6ba:	3b9d                	jal	430 <polydiv>
 6bc:	85aa                	mv	a1,a0
    array_equ(qi_1,res1,size);
 6be:	8626                	mv	a2,s1
 6c0:	8566                	mv	a0,s9
 6c2:	3ae5                	jal	ba <array_equ>
    array_mod(qi_1,mod,size);
 6c4:	8626                	mv	a2,s1
 6c6:	85ca                	mv	a1,s2
 6c8:	8566                	mv	a0,s9
 6ca:	3c21                	jal	e2 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6cc:	4781                	li	a5,0
 6ce:	874a                	mv	a4,s2
 6d0:	86a6                	mv	a3,s1
 6d2:	865a                	mv	a2,s6
 6d4:	85a6                	mv	a1,s1
 6d6:	8566                	mv	a0,s9
 6d8:	3425                	jal	100 <polymult>
 6da:	85aa                	mv	a1,a0
    array_equ(temp,res2,size);
 6dc:	8626                	mv	a2,s1
 6de:	8556                	mv	a0,s5
 6e0:	3ae9                	jal	ba <array_equ>
    array_mod(temp,mod,size);
 6e2:	8626                	mv	a2,s1
 6e4:	85ca                	mv	a1,s2
 6e6:	8556                	mv	a0,s5
 6e8:	3aed                	jal	e2 <array_mod>
        for (i = 0; i < N + 1; ++i) {
 6ea:	4781                	li	a5,0
 6ec:	4701                	li	a4,0
 6ee:	0aebdc63          	bge	s7,a4,7a6 <ext_euclid+0x1bc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
 6f2:	8626                	mv	a2,s1
 6f4:	85ca                	mv	a1,s2
 6f6:	856a                	mv	a0,s10
 6f8:	32ed                	jal	e2 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
 6fa:	8626                	mv	a2,s1
 6fc:	85d2                	mv	a1,s4
 6fe:	854e                	mv	a0,s3
 700:	3a6d                	jal	ba <array_equ>
array_equ(ri_1,ri,size);
 702:	8626                	mv	a2,s1
 704:	85e2                	mv	a1,s8
 706:	8552                	mv	a0,s4
 708:	3a4d                	jal	ba <array_equ>
array_equ(ti_2,ti_1,size);
 70a:	8626                	mv	a2,s1
 70c:	85da                	mv	a1,s6
 70e:	856e                	mv	a0,s11
 710:	326d                	jal	ba <array_equ>
array_equ(ti_1,ti,size);
 712:	8626                	mv	a2,s1
 714:	85ea                	mv	a1,s10
 716:	855a                	mv	a0,s6
 718:	324d                	jal	ba <array_equ>
        controlR = 0;
 71a:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
 71c:	4701                	li	a4,0
 71e:	0aebd163          	bge	s7,a4,7c0 <ext_euclid+0x1d6>
    while (controlR != 0) {
 722:	f4079be3          	bnez	a5,678 <ext_euclid+0x8e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
 726:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
 728:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
 72a:	0b274663          	blt	a4,s2,7d6 <ext_euclid+0x1ec>
 72e:	00001617          	auipc	a2,0x1
 732:	0de60613          	addi	a2,a2,222 # 180c <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
 736:	0afbda63          	bge	s7,a5,7ea <ext_euclid+0x200>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
 73a:	fb040113          	addi	sp,s0,-80
 73e:	40b6                	lw	ra,76(sp)
 740:	4426                	lw	s0,72(sp)
 742:	4496                	lw	s1,68(sp)
 744:	4906                	lw	s2,64(sp)
 746:	59f2                	lw	s3,60(sp)
 748:	5a62                	lw	s4,56(sp)
 74a:	5ad2                	lw	s5,52(sp)
 74c:	5b42                	lw	s6,48(sp)
 74e:	5bb2                	lw	s7,44(sp)
 750:	5c22                	lw	s8,40(sp)
 752:	5c92                	lw	s9,36(sp)
 754:	5d02                	lw	s10,32(sp)
 756:	4df2                	lw	s11,28(sp)
 758:	00001517          	auipc	a0,0x1
 75c:	0b450513          	addi	a0,a0,180 # 180c <ti_2>
 760:	6161                	addi	sp,sp,80
 762:	8082                	ret
        ti_2[i] = 0;
 764:	00279713          	slli	a4,a5,0x2
 768:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
 76c:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
 76e:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
 772:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
 776:	0785                	addi	a5,a5,1
 778:	bdd9                	j	64e <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
 77a:	00279693          	slli	a3,a5,0x2
 77e:	96aa                	add	a3,a3,a0
 780:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 782:	0785                	addi	a5,a5,1
 784:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
 786:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 78a:	b739                	j	698 <ext_euclid+0xae>
            temp[i] = ri_2[i] - ri[i];
 78c:	00f986b3          	add	a3,s3,a5
 790:	00fc05b3          	add	a1,s8,a5
 794:	4294                	lw	a3,0(a3)
 796:	418c                	lw	a1,0(a1)
 798:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
 79c:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
 79e:	8e8d                	sub	a3,a3,a1
 7a0:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7a2:	0791                	addi	a5,a5,4
 7a4:	b701                	j	6a4 <ext_euclid+0xba>
            ti[i] = ti_2[i] - temp[i];
 7a6:	00fd86b3          	add	a3,s11,a5
 7aa:	00fa85b3          	add	a1,s5,a5
 7ae:	4294                	lw	a3,0(a3)
 7b0:	418c                	lw	a1,0(a1)
 7b2:	00fd0633          	add	a2,s10,a5
        for (i = 0; i < N + 1; ++i) {
 7b6:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
 7b8:	8e8d                	sub	a3,a3,a1
 7ba:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7bc:	0791                	addi	a5,a5,4
 7be:	bf05                	j	6ee <ext_euclid+0x104>
              qi_1[i] = 0;
 7c0:	00271693          	slli	a3,a4,0x2
 7c4:	00dc8633          	add	a2,s9,a3
            controlR += ri[i];
 7c8:	96e2                	add	a3,a3,s8
 7ca:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
 7cc:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7d0:	0705                	addi	a4,a4,1
            controlR += ri[i];
 7d2:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
 7d4:	b7a9                	j	71e <ext_euclid+0x134>
            if (((ri_2[0] * j) % mod) == 1)
 7d6:	0009a683          	lw	a3,0(s3)
 7da:	02d706b3          	mul	a3,a4,a3
 7de:	0326e6b3          	rem	a3,a3,s2
 7e2:	f4c686e3          	beq	a3,a2,72e <ext_euclid+0x144>
        for (j = 0; j < mod; ++j) {
 7e6:	0705                	addi	a4,a4,1
 7e8:	b789                	j	72a <ext_euclid+0x140>
            ti_2[i] = (ti_2[i] * j) % mod;
 7ea:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7ec:	0785                	addi	a5,a5,1
 7ee:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
 7f0:	02d706b3          	mul	a3,a4,a3
 7f4:	0326e6b3          	rem	a3,a3,s2
 7f8:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
 7fc:	bf2d                	j	736 <ext_euclid+0x14c>

000007fe <generate_keys>:




int* generate_keys(int N, int p, int q){
 7fe:	7141                	addi	sp,sp,-496
 800:	1e112623          	sw	ra,492(sp)
 804:	1e812423          	sw	s0,488(sp)
 808:	1e912223          	sw	s1,484(sp)
 80c:	1b80                	addi	s0,sp,496
 80e:	1f212023          	sw	s2,480(sp)
 812:	1d312e23          	sw	s3,476(sp)
 816:	1d412c23          	sw	s4,472(sp)
 81a:	1d512a23          	sw	s5,468(sp)
 81e:	1d612823          	sw	s6,464(sp)
 822:	1d712623          	sw	s7,460(sp)
 826:	1da12023          	sw	s10,448(sp)
 82a:	1d812423          	sw	s8,456(sp)
 82e:	1d912223          	sw	s9,452(sp)
 832:	892a                	mv	s2,a0
 834:	8bae                	mv	s7,a1
 836:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 838:	4581                	li	a1,0
 83a:	0d000613          	li	a2,208
 83e:	e2440513          	addi	a0,s0,-476
 842:	23b1                	jal	d8e <memset>
 844:	4485                	li	s1,1
 846:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 848:	0d800613          	li	a2,216
 84c:	4581                	li	a1,0
 84e:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 852:	e1342c23          	sw	s3,-488(s0)
 856:	e0942e23          	sw	s1,-484(s0)
 85a:	e2942023          	sw	s1,-480(s0)
 85e:	e3342423          	sw	s3,-472(s0)
 862:	e2942823          	sw	s1,-464(s0)
 866:	e2942e23          	sw	s1,-452(s0)
 86a:	e5342023          	sw	s3,-448(s0)
 86e:	e5342223          	sw	s3,-444(s0)
 872:	e4942623          	sw	s1,-436(s0)
 876:	e5342a23          	sw	s3,-428(s0)
 87a:	e4942e23          	sw	s1,-420(s0)
 87e:	e6942023          	sw	s1,-416(s0)
 882:	e7342623          	sw	s3,-404(s0)
 886:	e6942a23          	sw	s1,-396(s0)
 88a:	e8942023          	sw	s1,-384(s0)
 88e:	e8942223          	sw	s1,-380(s0)
 892:	e8942423          	sw	s1,-376(s0)
 896:	e9342623          	sw	s3,-372(s0)
 89a:	e8942a23          	sw	s1,-364(s0)
 89e:	ea942023          	sw	s1,-352(s0)
 8a2:	ea942223          	sw	s1,-348(s0)
 8a6:	ea942423          	sw	s1,-344(s0)
 8aa:	eb342623          	sw	s3,-340(s0)
 8ae:	ea942a23          	sw	s1,-332(s0)
 8b2:	ec942023          	sw	s1,-320(s0)
 8b6:	ec942223          	sw	s1,-316(s0)
 8ba:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
 8be:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8c2:	21f1                	jal	d8e <memset>
    int polyR[N+1];
 8c4:	002a9793          	slli	a5,s5,0x2
 8c8:	07bd                	addi	a5,a5,15
 8ca:	9bc1                	andi	a5,a5,-16
 8cc:	40f10133          	sub	sp,sp,a5
 8d0:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
 8d2:	00291d13          	slli	s10,s2,0x2
 8d6:	01aa07b3          	add	a5,s4,s10
 8da:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8dc:	ef342a23          	sw	s3,-268(s0)
 8e0:	ee942e23          	sw	s1,-260(s0)
 8e4:	f0942023          	sw	s1,-256(s0)
 8e8:	f0942423          	sw	s1,-248(s0)
 8ec:	f1342a23          	sw	s3,-236(s0)
 8f0:	f1342e23          	sw	s3,-228(s0)
 8f4:	f3342023          	sw	s3,-224(s0)
 8f8:	f2942423          	sw	s1,-216(s0)
 8fc:	f3342823          	sw	s3,-208(s0)
 900:	f2942c23          	sw	s1,-200(s0)
 904:	f4942223          	sw	s1,-188(s0)
 908:	f5342423          	sw	s3,-184(s0)
 90c:	f4942823          	sw	s1,-176(s0)
 910:	f4942e23          	sw	s1,-164(s0)
 914:	f7342023          	sw	s3,-160(s0)
 918:	f6942423          	sw	s1,-152(s0)
 91c:	f6942a23          	sw	s1,-140(s0)
 920:	f7342c23          	sw	s3,-136(s0)
 924:	f8942023          	sw	s1,-128(s0)
 928:	f8942423          	sw	s1,-120(s0)
 92c:	f8942623          	sw	s1,-116(s0)
 930:	f8942c23          	sw	s1,-104(s0)
 934:	f9342e23          	sw	s3,-100(s0)
 938:	fa942223          	sw	s1,-92(s0)
 93c:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
 940:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
 944:	4785                	li	a5,1
 946:	1127c163          	blt	a5,s2,a48 <generate_keys+0x24a>
 94a:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
 94c:	03600693          	li	a3,54
 950:	10f6d363          	bge	a3,a5,a56 <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
 954:	4781                	li	a5,0
        random_keys[i] = f[i];
 956:	00001697          	auipc	a3,0x1
 95a:	04668693          	addi	a3,a3,70 # 199c <random_keys>
    for(i = 0; i < N; ++i){
 95e:	1127ca63          	blt	a5,s2,a72 <generate_keys+0x274>
 962:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
 966:	00191993          	slli	s3,s2,0x1
 96a:	87ca                	mv	a5,s2
 96c:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
 96e:	00001617          	auipc	a2,0x1
 972:	02e60613          	addi	a2,a2,46 # 199c <random_keys>
    for(i = N; i < (2*N); ++i){
 976:	1137c963          	blt	a5,s3,a88 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
 97a:	448d                	li	s1,3
 97c:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
 980:	86de                	mv	a3,s7
 982:	8656                	mv	a2,s5
 984:	e1840593          	addi	a1,s0,-488
 988:	8552                	mv	a0,s4
 98a:	3185                	jal	5ea <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
 98c:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
 98e:	00001697          	auipc	a3,0x1
 992:	00e68693          	addi	a3,a3,14 # 199c <random_keys>
    for(i = (2*N); i < (3*N); ++i){
 996:	1097c163          	blt	a5,s1,a98 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
 99a:	8656                	mv	a2,s5
 99c:	86da                	mv	a3,s6
 99e:	e1840593          	addi	a1,s0,-488
 9a2:	8552                	mv	a0,s4
 9a4:	3199                	jal	5ea <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
 9a6:	5751                	li	a4,-12
 9a8:	02e90733          	mul	a4,s2,a4
 9ac:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
 9ae:	00001617          	auipc	a2,0x1
 9b2:	fee60613          	addi	a2,a2,-18 # 199c <random_keys>
    for(i = (3*N); i < (4*N); ++i){
 9b6:	0fa4c963          	blt	s1,s10,aa8 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
 9ba:	4701                	li	a4,0
 9bc:	85ca                	mv	a1,s2
 9be:	86ca                	mv	a3,s2
 9c0:	8666                	mv	a2,s9
 9c2:	3a01                	jal	2d2 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
 9c4:	87aa                	mv	a5,a0
 9c6:	4701                	li	a4,0
 9c8:	fff98593          	addi	a1,s3,-1
 9cc:	0eb74863          	blt	a4,a1,abc <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
 9d0:	86d6                	mv	a3,s5
 9d2:	875a                	mv	a4,s6
 9d4:	8652                	mv	a2,s4
 9d6:	3ca9                	jal	430 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
 9d8:	4795                	li	a5,5
 9da:	02f907b3          	mul	a5,s2,a5
 9de:	098a                	slli	s3,s3,0x2
 9e0:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 9e2:	00001697          	auipc	a3,0x1
 9e6:	fba68693          	addi	a3,a3,-70 # 199c <random_keys>
    for(i = (4*N); i < (5*N); ++i){
 9ea:	0991                	addi	s3,s3,4
 9ec:	0efc4063          	blt	s8,a5,acc <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
 9f0:	4699                	li	a3,6
 9f2:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
 9f4:	00001617          	auipc	a2,0x1
 9f8:	fa860613          	addi	a2,a2,-88 # 199c <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
 9fc:	02d906b3          	mul	a3,s2,a3
 a00:	02a90933          	mul	s2,s2,a0
 a04:	0cf6dc63          	bge	a3,a5,adc <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
 a08:	e1040113          	addi	sp,s0,-496
 a0c:	1ec12083          	lw	ra,492(sp)
 a10:	1e812403          	lw	s0,488(sp)
 a14:	1e412483          	lw	s1,484(sp)
 a18:	1e012903          	lw	s2,480(sp)
 a1c:	1dc12983          	lw	s3,476(sp)
 a20:	1d812a03          	lw	s4,472(sp)
 a24:	1d412a83          	lw	s5,468(sp)
 a28:	1d012b03          	lw	s6,464(sp)
 a2c:	1cc12b83          	lw	s7,460(sp)
 a30:	1c812c03          	lw	s8,456(sp)
 a34:	1c412c83          	lw	s9,452(sp)
 a38:	1c012d03          	lw	s10,448(sp)
 a3c:	00001517          	auipc	a0,0x1
 a40:	f6050513          	addi	a0,a0,-160 # 199c <random_keys>
 a44:	617d                	addi	sp,sp,496
 a46:	8082                	ret
        polyR[i] = 0;
 a48:	00279713          	slli	a4,a5,0x2
 a4c:	9752                	add	a4,a4,s4
 a4e:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
 a52:	0785                	addi	a5,a5,1
 a54:	bdcd                	j	946 <generate_keys+0x148>
        f[i] = 0;
 a56:	00279713          	slli	a4,a5,0x2
 a5a:	e1840613          	addi	a2,s0,-488
 a5e:	963a                	add	a2,a2,a4
 a60:	00062023          	sw	zero,0(a2)
        g[i] = 0;
 a64:	ef440613          	addi	a2,s0,-268
 a68:	9732                	add	a4,a4,a2
 a6a:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
 a6e:	0785                	addi	a5,a5,1
 a70:	b5c5                	j	950 <generate_keys+0x152>
        random_keys[i] = f[i];
 a72:	00279713          	slli	a4,a5,0x2
 a76:	e1840593          	addi	a1,s0,-488
 a7a:	00e68633          	add	a2,a3,a4
 a7e:	972e                	add	a4,a4,a1
 a80:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
 a82:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
 a84:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
 a86:	bde1                	j	95e <generate_keys+0x160>
        random_keys[i] = g[i-N];
 a88:	430c                	lw	a1,0(a4)
 a8a:	00279693          	slli	a3,a5,0x2
 a8e:	96b2                	add	a3,a3,a2
 a90:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
 a92:	0785                	addi	a5,a5,1
 a94:	0711                	addi	a4,a4,4
 a96:	b5c5                	j	976 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
 a98:	4110                	lw	a2,0(a0)
 a9a:	00279713          	slli	a4,a5,0x2
 a9e:	9736                	add	a4,a4,a3
 aa0:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 aa2:	0785                	addi	a5,a5,1
 aa4:	0511                	addi	a0,a0,4
 aa6:	bdc5                	j	996 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
 aa8:	00249793          	slli	a5,s1,0x2
 aac:	00f706b3          	add	a3,a4,a5
 ab0:	96aa                	add	a3,a3,a0
 ab2:	4294                	lw	a3,0(a3)
 ab4:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
 ab6:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
 ab8:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
 aba:	bdf5                	j	9b6 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
 abc:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
 abe:	0705                	addi	a4,a4,1
 ac0:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
 ac2:	037686b3          	mul	a3,a3,s7
 ac6:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
 aca:	b709                	j	9cc <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 acc:	ff89a603          	lw	a2,-8(s3)
 ad0:	002c1713          	slli	a4,s8,0x2
 ad4:	9736                	add	a4,a4,a3
 ad6:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
 ad8:	0c05                	addi	s8,s8,1
 ada:	bf01                	j	9ea <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
 adc:	00279713          	slli	a4,a5,0x2
 ae0:	00e605b3          	add	a1,a2,a4
 ae4:	974a                	add	a4,a4,s2
 ae6:	9752                	add	a4,a4,s4
 ae8:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
 aea:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
 aec:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
 aee:	bf19                	j	a04 <generate_keys+0x206>

00000af0 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 af0:	7115                	addi	sp,sp,-224
 af2:	cda2                	sw	s0,216(sp)
 af4:	cba6                	sw	s1,212(sp)
 af6:	842a                	mv	s0,a0
 af8:	84b2                	mv	s1,a2
 afa:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 afc:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b00:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b02:	850a                	mv	a0,sp
 b04:	00000597          	auipc	a1,0x0
 b08:	47c58593          	addi	a1,a1,1148 # f80 <_endtext>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b0c:	cf86                	sw	ra,220(sp)
 b0e:	c7ce                	sw	s3,204(sp)
 b10:	c5d2                	sw	s4,200(sp)
 b12:	89b6                	mv	s3,a3
 b14:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b16:	2a69                	jal	cb0 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
 b18:	4781                	li	a5,0
 b1a:	874a                	mv	a4,s2
 b1c:	03000693          	li	a3,48
 b20:	85a2                	mv	a1,s0
 b22:	860a                	mv	a2,sp
 b24:	854e                	mv	a0,s3
 b26:	ddaff0ef          	jal	ra,100 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
 b2a:	85a6                	mv	a1,s1
 b2c:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
 b30:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b32:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
 b36:	d5cff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b3a:	00140693          	addi	a3,s0,1
 b3e:	874a                	mv	a4,s2
 b40:	8652                	mv	a2,s4
 b42:	85a6                	mv	a1,s1
 b44:	854e                	mv	a0,s3
 b46:	30ed                	jal	430 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
 b48:	478d                	li	a5,3
 b4a:	02f40433          	mul	s0,s0,a5
 b4e:	87aa                	mv	a5,a0
 b50:	0084ca63          	blt	s1,s0,b64 <ntru_encyrpt+0x74>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
 b54:	40fe                	lw	ra,220(sp)
 b56:	446e                	lw	s0,216(sp)
 b58:	44de                	lw	s1,212(sp)
 b5a:	494e                	lw	s2,208(sp)
 b5c:	49be                	lw	s3,204(sp)
 b5e:	4a2e                	lw	s4,200(sp)
 b60:	612d                	addi	sp,sp,224
 b62:	8082                	ret
        CT[i-(2*N)] = CT[i];
 b64:	00249713          	slli	a4,s1,0x2
 b68:	972a                	add	a4,a4,a0
 b6a:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 b6c:	0485                	addi	s1,s1,1
 b6e:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
 b70:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
 b74:	bff1                	j	b50 <ntru_encyrpt+0x60>

00000b76 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b76:	7179                	addi	sp,sp,-48
 b78:	d422                	sw	s0,40(sp)
 b7a:	ce4e                	sw	s3,28(sp)
 b7c:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
 b7e:	498d                	li	s3,3
 b80:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b84:	d04a                	sw	s2,32(sp)
 b86:	ca56                	sw	s5,20(sp)
 b88:	c65e                	sw	s7,12(sp)
 b8a:	8932                	mv	s2,a2
 b8c:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b8e:	863e                	mv	a2,a5
 b90:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b92:	8aae                	mv	s5,a1
 b94:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 b96:	85a2                	mv	a1,s0
 b98:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 b9a:	d606                	sw	ra,44(sp)
 b9c:	d226                	sw	s1,36(sp)
 b9e:	cc52                	sw	s4,24(sp)
 ba0:	c85a                	sw	s6,16(sp)
 ba2:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 ba4:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 ba8:	f2aff0ef          	jal	ra,2d2 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 bac:	00140b13          	addi	s6,s0,1
 bb0:	874a                	mv	a4,s2
 bb2:	86da                	mv	a3,s6
 bb4:	8652                	mv	a2,s4
 bb6:	85a6                	mv	a1,s1
 bb8:	38a5                	jal	430 <polydiv>
 bba:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
 bbc:	87aa                	mv	a5,a0
 bbe:	872a                	mv	a4,a0
 bc0:	86a6                	mv	a3,s1
 bc2:	0536c163          	blt	a3,s3,c04 <ntru_deceypt+0x8e>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
 bc6:	4589                	li	a1,2
 bc8:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
 bcc:	4701                	li	a4,0
 bce:	04874463          	blt	a4,s0,c16 <ntru_deceypt+0xa0>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
 bd2:	4701                	li	a4,0
 bd4:	86a2                	mv	a3,s0
 bd6:	85a2                	mv	a1,s0
 bd8:	855e                	mv	a0,s7
 bda:	ef8ff0ef          	jal	ra,2d2 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
 bde:	8756                	mv	a4,s5
 be0:	86da                	mv	a3,s6
 be2:	8652                	mv	a2,s4
 be4:	85a6                	mv	a1,s1
 be6:	30a9                	jal	430 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
 be8:	87aa                	mv	a5,a0
 bea:	0334cf63          	blt	s1,s3,c28 <ntru_deceypt+0xb2>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
 bee:	50b2                	lw	ra,44(sp)
 bf0:	5422                	lw	s0,40(sp)
 bf2:	5492                	lw	s1,36(sp)
 bf4:	5902                	lw	s2,32(sp)
 bf6:	49f2                	lw	s3,28(sp)
 bf8:	4a62                	lw	s4,24(sp)
 bfa:	4ad2                	lw	s5,20(sp)
 bfc:	4b42                	lw	s6,16(sp)
 bfe:	4bb2                	lw	s7,12(sp)
 c00:	6145                	addi	sp,sp,48
 c02:	8082                	ret
        a2[i-(2*N)] = a2[i];
 c04:	00269593          	slli	a1,a3,0x2
 c08:	95b2                	add	a1,a1,a2
 c0a:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c0c:	0685                	addi	a3,a3,1
 c0e:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
 c10:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c14:	b77d                	j	bc2 <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
 c16:	4394                	lw	a3,0(a5)
 c18:	00d5d563          	bge	a1,a3,c22 <ntru_deceypt+0xac>
            a2[i] = (-1)*(q-a2[i]);
 c1c:	412686b3          	sub	a3,a3,s2
 c20:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
 c22:	0705                	addi	a4,a4,1
 c24:	0791                	addi	a5,a5,4
 c26:	b765                	j	bce <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
 c28:	00249713          	slli	a4,s1,0x2
 c2c:	972a                	add	a4,a4,a0
 c2e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c30:	0485                	addi	s1,s1,1
 c32:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
 c34:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c38:	bf4d                	j	bea <ntru_deceypt+0x74>

00000c3a <default_exc_handler>:
  jal x0, default_exc_handler
 c3a:	0000006f          	j	c3a <default_exc_handler>

00000c3e <reset_handler>:
  mv  x1, x0
 c3e:	00000093          	li	ra,0
  mv  x2, x1
 c42:	8106                	mv	sp,ra
  mv  x3, x1
 c44:	8186                	mv	gp,ra
  mv  x4, x1
 c46:	8206                	mv	tp,ra
  mv  x5, x1
 c48:	8286                	mv	t0,ra
  mv  x6, x1
 c4a:	8306                	mv	t1,ra
  mv  x7, x1
 c4c:	8386                	mv	t2,ra
  mv  x8, x1
 c4e:	8406                	mv	s0,ra
  mv  x9, x1
 c50:	8486                	mv	s1,ra
  mv x10, x1
 c52:	8506                	mv	a0,ra
  mv x11, x1
 c54:	8586                	mv	a1,ra
  mv x12, x1
 c56:	8606                	mv	a2,ra
  mv x13, x1
 c58:	8686                	mv	a3,ra
  mv x14, x1
 c5a:	8706                	mv	a4,ra
  mv x15, x1
 c5c:	8786                	mv	a5,ra
  mv x16, x1
 c5e:	8806                	mv	a6,ra
  mv x17, x1
 c60:	8886                	mv	a7,ra
  mv x18, x1
 c62:	8906                	mv	s2,ra
  mv x19, x1
 c64:	8986                	mv	s3,ra
  mv x20, x1
 c66:	8a06                	mv	s4,ra
  mv x21, x1
 c68:	8a86                	mv	s5,ra
  mv x22, x1
 c6a:	8b06                	mv	s6,ra
  mv x23, x1
 c6c:	8b86                	mv	s7,ra
  mv x24, x1
 c6e:	8c06                	mv	s8,ra
  mv x25, x1
 c70:	8c86                	mv	s9,ra
  mv x26, x1
 c72:	8d06                	mv	s10,ra
  mv x27, x1
 c74:	8d86                	mv	s11,ra
  mv x28, x1
 c76:	8e06                	mv	t3,ra
  mv x29, x1
 c78:	8e86                	mv	t4,ra
  mv x30, x1
 c7a:	8f06                	mv	t5,ra
  mv x31, x1
 c7c:	8f86                	mv	t6,ra
  la   x2, _stack_start
 c7e:	0000f117          	auipc	sp,0xf
 c82:	38210113          	addi	sp,sp,898 # 10000 <_stack_start>

00000c86 <_start>:
  la x26, _bss_start
 c86:	00000d17          	auipc	s10,0x0
 c8a:	47ed0d13          	addi	s10,s10,1150 # 1104 <_bss_start>
  la x27, _bss_end
 c8e:	00001d97          	auipc	s11,0x1
 c92:	206d8d93          	addi	s11,s11,518 # 1e94 <_bss_end>
  bge x26, x27, zero_loop_end
 c96:	01bd5763          	bge	s10,s11,ca4 <main_entry>

00000c9a <zero_loop>:
  sw x0, 0(x26)
 c9a:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 c9e:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 ca0:	ffaddde3          	bge	s11,s10,c9a <zero_loop>

00000ca4 <main_entry>:
  addi x10, x0, 0
 ca4:	00000513          	li	a0,0
  addi x11, x0, 0
 ca8:	00000593          	li	a1,0
  jal x1, main
 cac:	18a000ef          	jal	ra,e36 <main>

00000cb0 <memcpy>:
 cb0:	00a5c7b3          	xor	a5,a1,a0
 cb4:	8b8d                	andi	a5,a5,3
 cb6:	00c508b3          	add	a7,a0,a2
 cba:	e7a1                	bnez	a5,d02 <memcpy+0x52>
 cbc:	478d                	li	a5,3
 cbe:	04c7f263          	bgeu	a5,a2,d02 <memcpy+0x52>
 cc2:	00357793          	andi	a5,a0,3
 cc6:	872a                	mv	a4,a0
 cc8:	eba9                	bnez	a5,d1a <memcpy+0x6a>
 cca:	ffc8f613          	andi	a2,a7,-4
 cce:	fe060793          	addi	a5,a2,-32
 cd2:	06f76763          	bltu	a4,a5,d40 <memcpy+0x90>
 cd6:	02c77363          	bgeu	a4,a2,cfc <memcpy+0x4c>
 cda:	86ae                	mv	a3,a1
 cdc:	87ba                	mv	a5,a4
 cde:	0006a803          	lw	a6,0(a3)
 ce2:	0791                	addi	a5,a5,4
 ce4:	0691                	addi	a3,a3,4
 ce6:	ff07ae23          	sw	a6,-4(a5)
 cea:	fec7eae3          	bltu	a5,a2,cde <memcpy+0x2e>
 cee:	fff60793          	addi	a5,a2,-1
 cf2:	8f99                	sub	a5,a5,a4
 cf4:	9bf1                	andi	a5,a5,-4
 cf6:	0791                	addi	a5,a5,4
 cf8:	973e                	add	a4,a4,a5
 cfa:	95be                	add	a1,a1,a5
 cfc:	01176663          	bltu	a4,a7,d08 <memcpy+0x58>
 d00:	8082                	ret
 d02:	872a                	mv	a4,a0
 d04:	ff157ee3          	bgeu	a0,a7,d00 <memcpy+0x50>
 d08:	0005c783          	lbu	a5,0(a1)
 d0c:	0705                	addi	a4,a4,1
 d0e:	0585                	addi	a1,a1,1
 d10:	fef70fa3          	sb	a5,-1(a4)
 d14:	ff176ae3          	bltu	a4,a7,d08 <memcpy+0x58>
 d18:	8082                	ret
 d1a:	0005c683          	lbu	a3,0(a1)
 d1e:	0705                	addi	a4,a4,1
 d20:	00377793          	andi	a5,a4,3
 d24:	fed70fa3          	sb	a3,-1(a4)
 d28:	0585                	addi	a1,a1,1
 d2a:	d3c5                	beqz	a5,cca <memcpy+0x1a>
 d2c:	0005c683          	lbu	a3,0(a1)
 d30:	0705                	addi	a4,a4,1
 d32:	00377793          	andi	a5,a4,3
 d36:	fed70fa3          	sb	a3,-1(a4)
 d3a:	0585                	addi	a1,a1,1
 d3c:	fff9                	bnez	a5,d1a <memcpy+0x6a>
 d3e:	b771                	j	cca <memcpy+0x1a>
 d40:	41d4                	lw	a3,4(a1)
 d42:	0005a283          	lw	t0,0(a1)
 d46:	0085af83          	lw	t6,8(a1)
 d4a:	00c5af03          	lw	t5,12(a1)
 d4e:	0105ae83          	lw	t4,16(a1)
 d52:	0145ae03          	lw	t3,20(a1)
 d56:	0185a303          	lw	t1,24(a1)
 d5a:	01c5a803          	lw	a6,28(a1)
 d5e:	c354                	sw	a3,4(a4)
 d60:	5194                	lw	a3,32(a1)
 d62:	00572023          	sw	t0,0(a4)
 d66:	01f72423          	sw	t6,8(a4)
 d6a:	01e72623          	sw	t5,12(a4)
 d6e:	01d72823          	sw	t4,16(a4)
 d72:	01c72a23          	sw	t3,20(a4)
 d76:	00672c23          	sw	t1,24(a4)
 d7a:	01072e23          	sw	a6,28(a4)
 d7e:	d314                	sw	a3,32(a4)
 d80:	02470713          	addi	a4,a4,36
 d84:	02458593          	addi	a1,a1,36
 d88:	faf76ce3          	bltu	a4,a5,d40 <memcpy+0x90>
 d8c:	b7a9                	j	cd6 <memcpy+0x26>

00000d8e <memset>:
 d8e:	433d                	li	t1,15
 d90:	872a                	mv	a4,a0
 d92:	02c37363          	bgeu	t1,a2,db8 <memset+0x2a>
 d96:	00f77793          	andi	a5,a4,15
 d9a:	efbd                	bnez	a5,e18 <memset+0x8a>
 d9c:	e5ad                	bnez	a1,e06 <memset+0x78>
 d9e:	ff067693          	andi	a3,a2,-16
 da2:	8a3d                	andi	a2,a2,15
 da4:	96ba                	add	a3,a3,a4
 da6:	c30c                	sw	a1,0(a4)
 da8:	c34c                	sw	a1,4(a4)
 daa:	c70c                	sw	a1,8(a4)
 dac:	c74c                	sw	a1,12(a4)
 dae:	0741                	addi	a4,a4,16
 db0:	fed76be3          	bltu	a4,a3,da6 <memset+0x18>
 db4:	e211                	bnez	a2,db8 <memset+0x2a>
 db6:	8082                	ret
 db8:	40c306b3          	sub	a3,t1,a2
 dbc:	068a                	slli	a3,a3,0x2
 dbe:	00000297          	auipc	t0,0x0
 dc2:	9696                	add	a3,a3,t0
 dc4:	00a68067          	jr	10(a3)
 dc8:	00b70723          	sb	a1,14(a4)
 dcc:	00b706a3          	sb	a1,13(a4)
 dd0:	00b70623          	sb	a1,12(a4)
 dd4:	00b705a3          	sb	a1,11(a4)
 dd8:	00b70523          	sb	a1,10(a4)
 ddc:	00b704a3          	sb	a1,9(a4)
 de0:	00b70423          	sb	a1,8(a4)
 de4:	00b703a3          	sb	a1,7(a4)
 de8:	00b70323          	sb	a1,6(a4)
 dec:	00b702a3          	sb	a1,5(a4)
 df0:	00b70223          	sb	a1,4(a4)
 df4:	00b701a3          	sb	a1,3(a4)
 df8:	00b70123          	sb	a1,2(a4)
 dfc:	00b700a3          	sb	a1,1(a4)
 e00:	00b70023          	sb	a1,0(a4)
 e04:	8082                	ret
 e06:	0ff5f593          	andi	a1,a1,255
 e0a:	00859693          	slli	a3,a1,0x8
 e0e:	8dd5                	or	a1,a1,a3
 e10:	01059693          	slli	a3,a1,0x10
 e14:	8dd5                	or	a1,a1,a3
 e16:	b761                	j	d9e <memset+0x10>
 e18:	00279693          	slli	a3,a5,0x2
 e1c:	00000297          	auipc	t0,0x0
 e20:	9696                	add	a3,a3,t0
 e22:	8286                	mv	t0,ra
 e24:	fa8680e7          	jalr	-88(a3)
 e28:	8096                	mv	ra,t0
 e2a:	17c1                	addi	a5,a5,-16
 e2c:	8f1d                	sub	a4,a4,a5
 e2e:	963e                	add	a2,a2,a5
 e30:	f8c374e3          	bgeu	t1,a2,db8 <memset+0x2a>
 e34:	b7a5                	j	d9c <memset+0xe>

00000e36 <main>:


int main(){
 e36:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e3a:	0c000613          	li	a2,192
 e3e:	00000597          	auipc	a1,0x0
 e42:	20258593          	addi	a1,a1,514 # 1040 <_endtext+0xc0>
 e46:	0068                	addi	a0,sp,12
int main(){
 e48:	42112623          	sw	ra,1068(sp)
 e4c:	42812423          	sw	s0,1064(sp)
 e50:	42912223          	sw	s1,1060(sp)
 e54:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
 e58:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 e5c:	3d91                	jal	cb0 <memcpy>
    resultkon[0] = 0xaaaaaaa0;
 e5e:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
 e62:	00000417          	auipc	s0,0x0
 e66:	29e40413          	addi	s0,s0,670 # 1100 <_edata>
    keys = generate_keys(N, p, q);
 e6a:	06500613          	li	a2,101
 e6e:	458d                	li	a1,3
 e70:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
 e74:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
 e76:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
 e7a:	3251                	jal	7fe <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
 e7c:	4781                	li	a5,0
 e7e:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
 e80:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
 e84:	00f506b3          	add	a3,a0,a5
 e88:	4290                	lw	a2,0(a3)
 e8a:	1314                	addi	a3,sp,416
 e8c:	96be                	add	a3,a3,a5
 e8e:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
 e90:	0791                	addi	a5,a5,4
 e92:	fee799e3          	bne	a5,a4,e84 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
 e96:	1cd8                	addi	a4,sp,628
 e98:	1a850793          	addi	a5,a0,424
 e9c:	27c50693          	addi	a3,a0,636
 ea0:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
 ea2:	4390                	lw	a2,0(a5)
 ea4:	0791                	addi	a5,a5,4
 ea6:	0711                	addi	a4,a4,4
 ea8:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
 eac:	fed79be3          	bne	a5,a3,ea2 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
 eb0:	01f8                	addi	a4,sp,204
 eb2:	35050793          	addi	a5,a0,848
 eb6:	42450613          	addi	a2,a0,1060
 eba:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
 ebc:	438c                	lw	a1,0(a5)
 ebe:	0791                	addi	a5,a5,4
 ec0:	0711                	addi	a4,a4,4
 ec2:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
 ec6:	fec79be3          	bne	a5,a2,ebc <main+0x86>
 eca:	06b0                	addi	a2,sp,840
 ecc:	4fc50513          	addi	a0,a0,1276
 ed0:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
 ed2:	4398                	lw	a4,0(a5)
 ed4:	0791                	addi	a5,a5,4
 ed6:	0611                	addi	a2,a2,4
 ed8:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
 edc:	fea79be3          	bne	a5,a0,ed2 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
 ee0:	bbbbc4b7          	lui	s1,0xbbbbc
 ee4:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 ee8:	8742                	mv	a4,a6
 eea:	0070                	addi	a2,sp,12
 eec:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
 ef0:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 ef4:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
 ef8:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 efa:	3edd                	jal	af0 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
 efc:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
 efe:	ccccd4b7          	lui	s1,0xccccd
 f02:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f06:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
 f08:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
 f0a:	458d                	li	a1,3
 f0c:	874a                	mv	a4,s2
 f0e:	34810813          	addi	a6,sp,840
 f12:	1314                	addi	a3,sp,416
 f14:	06500613          	li	a2,101
 f18:	03500513          	li	a0,53
 f1c:	39a9                	jal	b76 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
 f1e:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
 f22:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
 f26:	c004                	sw	s1,0(s0)
 f28:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
 f2a:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
 f2e:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
 f32:	0070                	addi	a2,sp,12
 f34:	00f506b3          	add	a3,a0,a5
 f38:	963e                	add	a2,a2,a5
 f3a:	4210                	lw	a2,0(a2)
 f3c:	4294                	lw	a3,0(a3)
 f3e:	02d60363          	beq	a2,a3,f64 <main+0x12e>
            resultkon[0] = 0xBABABABA;
 f42:	babac7b7          	lui	a5,0xbabac
 f46:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
 f4a:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
 f4c:	42c12083          	lw	ra,1068(sp)
 f50:	42812403          	lw	s0,1064(sp)
 f54:	42412483          	lw	s1,1060(sp)
 f58:	42012903          	lw	s2,1056(sp)
 f5c:	4501                	li	a0,0
 f5e:	43010113          	addi	sp,sp,1072
 f62:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
 f64:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
 f66:	0791                	addi	a5,a5,4
 f68:	fcb795e3          	bne	a5,a1,f32 <main+0xfc>
 f6c:	b7c5                	j	f4c <main+0x116>

00000f6e <__CTOR_LIST__>:
	...

00000f76 <__CTOR_END__>:
	...

00000f7e <__DTOR_END__>:
	...

Disassembly of section .rodata:

00000f80 <.rodata>:
     f80:	0001                	nop
     f82:	0000                	unimp
     f84:	ffff                	0xffff
     f86:	ffff                	0xffff
     f88:	0000                	unimp
     f8a:	0000                	unimp
     f8c:	0001                	nop
     f8e:	0000                	unimp
     f90:	ffff                	0xffff
     f92:	ffff                	0xffff
     f94:	0001                	nop
     f96:	0000                	unimp
     f98:	ffff                	0xffff
     f9a:	ffff                	0xffff
     f9c:	0000                	unimp
     f9e:	0000                	unimp
     fa0:	0001                	nop
     fa2:	0000                	unimp
     fa4:	0001                	nop
     fa6:	0000                	unimp
     fa8:	0000                	unimp
     faa:	0000                	unimp
     fac:	ffff                	0xffff
     fae:	ffff                	0xffff
     fb0:	0001                	nop
     fb2:	0000                	unimp
     fb4:	ffff                	0xffff
     fb6:	ffff                	0xffff
     fb8:	0001                	nop
     fba:	0000                	unimp
     fbc:	0000                	unimp
     fbe:	0000                	unimp
     fc0:	0001                	nop
     fc2:	0000                	unimp
     fc4:	0001                	nop
     fc6:	0000                	unimp
     fc8:	0000                	unimp
     fca:	0000                	unimp
     fcc:	ffff                	0xffff
     fce:	ffff                	0xffff
     fd0:	0001                	nop
     fd2:	0000                	unimp
     fd4:	ffff                	0xffff
     fd6:	ffff                	0xffff
     fd8:	0001                	nop
     fda:	0000                	unimp
     fdc:	0000                	unimp
     fde:	0000                	unimp
     fe0:	0001                	nop
     fe2:	0000                	unimp
     fe4:	0001                	nop
     fe6:	0000                	unimp
     fe8:	0000                	unimp
     fea:	0000                	unimp
     fec:	0001                	nop
     fee:	0000                	unimp
     ff0:	ffff                	0xffff
     ff2:	ffff                	0xffff
     ff4:	0001                	nop
     ff6:	0000                	unimp
     ff8:	ffff                	0xffff
     ffa:	ffff                	0xffff
     ffc:	0000                	unimp
     ffe:	0000                	unimp
    1000:	0001                	nop
    1002:	0000                	unimp
    1004:	ffff                	0xffff
    1006:	ffff                	0xffff
    1008:	0000                	unimp
    100a:	0000                	unimp
    100c:	0001                	nop
    100e:	0000                	unimp
    1010:	ffff                	0xffff
    1012:	ffff                	0xffff
    1014:	0001                	nop
    1016:	0000                	unimp
    1018:	ffff                	0xffff
    101a:	ffff                	0xffff
    101c:	0000                	unimp
    101e:	0000                	unimp
    1020:	0001                	nop
    1022:	0000                	unimp
    1024:	0001                	nop
    1026:	0000                	unimp
    1028:	0000                	unimp
    102a:	0000                	unimp
    102c:	ffff                	0xffff
    102e:	ffff                	0xffff
    1030:	0001                	nop
    1032:	0000                	unimp
    1034:	ffff                	0xffff
    1036:	ffff                	0xffff
    1038:	0001                	nop
    103a:	0000                	unimp
    103c:	0000                	unimp
    103e:	0000                	unimp
    1040:	0001                	nop
    1042:	0000                	unimp
    1044:	0001                	nop
    1046:	0000                	unimp
    1048:	0002                	c.slli64	zero
    104a:	0000                	unimp
    104c:	0001                	nop
    104e:	0000                	unimp
    1050:	0001                	nop
    1052:	0000                	unimp
    1054:	0001                	nop
    1056:	0000                	unimp
    1058:	0001                	nop
    105a:	0000                	unimp
    105c:	0002                	c.slli64	zero
    105e:	0000                	unimp
    1060:	0001                	nop
    1062:	0000                	unimp
    1064:	0001                	nop
    1066:	0000                	unimp
    1068:	0000                	unimp
    106a:	0000                	unimp
    106c:	0001                	nop
    106e:	0000                	unimp
    1070:	0001                	nop
    1072:	0000                	unimp
    1074:	0002                	c.slli64	zero
    1076:	0000                	unimp
    1078:	0001                	nop
    107a:	0000                	unimp
    107c:	0000                	unimp
    107e:	0000                	unimp
    1080:	0001                	nop
    1082:	0000                	unimp
    1084:	0002                	c.slli64	zero
    1086:	0000                	unimp
    1088:	0000                	unimp
    108a:	0000                	unimp
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0001                	nop
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	0000                	unimp
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	0000                	unimp
    109e:	0000                	unimp
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	0000                	unimp
    10aa:	0000                	unimp
    10ac:	0002                	c.slli64	zero
    10ae:	0000                	unimp
    10b0:	0001                	nop
    10b2:	0000                	unimp
    10b4:	0002                	c.slli64	zero
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	0002                	c.slli64	zero
    10ca:	0000                	unimp
    10cc:	0001                	nop
    10ce:	0000                	unimp
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0002                	c.slli64	zero
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	0002                	c.slli64	zero
    10ea:	0000                	unimp
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001100 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1100:	bebe                	fsd	fa5,376(sp)
    1102:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001104 <_bss_start>:
	...

0000135c <product2>:
	...

000015b4 <result>:
	...

0000180c <ti_2>:
	...

0000199c <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1da5                	addi	s11,s11,-23
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05da                	slli	a1,a1,0x16
       e:	0000                	unimp
      10:	6a0c                	flw	fa1,16(a2)
      12:	e1000003          	lb	zero,-496(zero) # fffffe10 <_stack_start+0xfffefe10>
      16:	0001                	nop
      18:	1800                	addi	s0,sp,48
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0460                	addi	s0,sp,524
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	5e08                	lw	a0,56(a2)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	047f                	0x47f
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002fb07          	0x2fb07
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	b704                	fsd	fs1,40(a4)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	033e                	slli	t1,t1,0xf
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	1206                	slli	tp,tp,0x21
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	5206                	lw	tp,96(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	7a06                	flw	fs4,96(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	0338                	addi	a4,sp,392
    asm volatile(
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
    for(i=0;i<(length/3);i++) {
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	025f 0000 a803      	0xa8030000025f
      c4:	0000ca13          	xori	s4,ra,0
}
      c8:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	2c09                	jal	2dc <polymult2+0xa>
      cc:	0000                	unimp
    asm volatile(
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	080b0003          	lb	zero,128(s6)
    asm volatile(
      dc:	fe09a203          	lw	tp,-32(s3)
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	0c00                	addi	s0,sp,528
      e4:	053c                	addi	a5,sp,648
      e6:	0000                	unimp
    asm volatile(
      e8:	5d07a403          	lw	s0,1488(a5)
    for(i=0;i<(length/3);i++) {
      ec:	0000                	unimp
      ee:	0000                	unimp
}
      f0:	440c                	lw	a1,8(s0)
    asm volatile(
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      fc:	0004                	0x4
      fe:	af06                	fsd	ft1,408(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
    int line[size_b][size_a + size_b];
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	ad06                	fsd	ft1,152(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	4206                	lw	tp,64(sp)
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    int pola[size_a];
     122:	0000                	unimp
     124:	1706                	slli	a4,a4,0x21
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     126:	0002                	c.slli64	zero
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
     130:	280e                	fld	fa6,192(sp)
    int line[size_b][size_a + size_b];
     132:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
    int pola[size_a];
     13c:	0c00                	addi	s0,sp,528
     13e:	04d0                	addi	a2,sp,580
    int line[size_b][size_a + size_b];
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
    int pola[size_a];
     148:	0000                	unimp
    int polb[size_b];
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
    int pola[size_a];
     150:	00005d07          	0x5d07
    int polb[size_b];
     154:	0400                	addi	s0,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	180c                	addi	a1,sp,48
    int pola[size_a];
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	005d0b37          	lui	s6,0x5d0
    int line[size_b][size_a + size_b];
     160:	0000                	unimp
    int polb[size_b];
     162:	0c08                	addi	a0,sp,528
            line[i][j] = 0;
     164:	0211                	addi	tp,tp,4
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
    for (i = 0; i < size_b; ++i){
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
            product[j] = 0;
     16e:	0c00                	addi	s0,sp,528
     170:	4e0c                	lw	a1,24(a2)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     176:	005d1b37          	lui	s6,0x5d1
    array_equ(pola,a,size_a);
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
    array_mod(pola,mod,size_a);
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
    array_equ(polb,b,size_b);
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	4f0e                	lw	t5,192(sp)
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
    array_mod(polb,mod,size_b);
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
    if(star_mult == 1){
     1ae:	000000ef          	jal	ra,1ae <polymult+0xae>
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	610c                	flw	fa1,0(a0)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	012c                	addi	a1,sp,136
        for (j = size_b -1; j >= 0; j = j-1){
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
            product[j] = 0;
     1d2:	0800                	addi	s0,sp,16
     1d4:	f60c                	fsw	fa1,40(a2)
     1d6:	0006                	c.slli	zero,0x1
            line[i][j] = 0;
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
            product[j] = 0;
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03dc                	addi	a5,sp,452
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
    for (i = 0; i < size_b; ++i){
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	940c                	0x940c
        for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    if(star_mult == 1){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
        for (j = size_b -1; j >= 0; j = j-1){
     1f8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	0c14                	addi	a3,sp,528
    for (i = 0; i < size_b; ++i){
     1fc:	00000653          	fadd.s	fa2,ft0,ft0,rne
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
    for(j = 0; j < size_a + size_b -1; ++j){
     208:	890c                	0x890c
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
    array_mod(product,mod,(size_a+size_b-1));
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	06b8                	addi	a4,sp,840
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
}
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	0000013b          	0x13b
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
     232:	000001c7          	fmsub.s	ft3,ft0,ft0,ft0,rne
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
                line[size_b-1-j][k] = pola[k]*polb[j];
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0596                	slli	a1,a1,0x5
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     258:	1201                	addi	tp,tp,-32
     25a:	016a                	slli	sp,sp,0x1a
     25c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
        for (j = size_b -1; j >= 0; j = j-1){
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
            for (k = size_a-1; k >= 0; k = k-1 ){
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f f511 0003      	0x3f511001f
     27c:	9000                	0x9000
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0401                	addi	s0,s0,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	d00c                	sw	a1,32(s0)
     288:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x1b0>
     290:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     292:	0c00                	addi	s0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     294:	04e8                	addi	a0,sp,588
     296:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	dc0c                	sw	a1,56(s0)
     2a2:	0001                	nop
    for (i = 0; i < size_b; ++i){
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0000013b          	0x13b
            product[j] += line[i][j];
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
        for(i = 0; i < size_b; ++i){
     2b6:	0002                	c.slli64	zero
            product[j] += line[i][j];
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
        for(i = 0; i < size_b; ++i){
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
    for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d2:	d704                	sw	s1,40(a4)
    int line[size_b][size_a + size_b];
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	930e                	add	t1,t1,gp
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
    int line[size_b][size_a + size_b];
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x6>
     2e6:	0126                	slli	sp,sp,0x9
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
    int line[size_b][size_a + size_b];
     300:	0410                	addi	a2,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
    int line[size_b][size_a + size_b];
     306:	ba0e                	fsd	ft3,304(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
    int pola[size_a];
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
    int line[size_b][size_a + size_b];
     314:	705f 0400 12bb      	0x12bb0400705f
    int polb[size_b];
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
    int pola[size_a];
     320:	725f 0400 07bc      	0x7bc0400725f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     326:	005d                	c.nop	23
     328:	0000                	unimp
    int line[size_b][size_a + size_b];
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    int pola[size_a];
     332:	005d                	c.nop	23
    int polb[size_b];
     334:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     336:	0c08                	addi	a0,sp,528
     338:	00000163          	beqz	zero,33a <polymult2+0x68>
            product2[j] = 0;
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
    for (i = 0; i < size_b; ++i){
     344:	8e0c                	0x8e0c
     346:	0002                	c.slli64	zero
    array_equ(pola,a,size_a);
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
     352:	625f 0066 c004      	0xc0040066625f
    array_equ(polb,b,size_b);
     358:	d811                	beqz	s0,26c <polymult+0x16c>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	980c                	0x980c
    if(star_mult == 1){
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0149                	addi	sp,sp,18
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	1c00                	addi	s0,sp,560
     378:	3f0c                	fld	fa1,56(a4)
            product2[j] = 0;
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
            line[i][j] = 0;
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
            product2[j] = 0;
     384:	0c20                	addi	s0,sp,536
     386:	038d                	addi	t2,t2,3
        for(j = 0; j < size_a + size_b -1; ++j){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0x1ba>
     38e:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     390:	2400                	fld	fs0,8(s0)
     392:	4c0c                	lw	a1,24(s0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06d2                	slli	a3,a3,0x14
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0xa8>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	62755f0f          	0x62755f0f
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xae>
        array_add(product2,line[i],size_a+size_b-1);
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
    for(i=0;i<size_b;++i){
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
}
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0120                	addi	s0,sp,136
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_mod+0xc>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	9d0c                	0x9d0c
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x36>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3fa:	790c                	flw	fa1,48(a0)
     3fc:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01a0                	addi	s0,sp,200
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	840a                	mv	s0,sp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	046712e3          	bne	a4,t1,c5e <reset_handler+0x20>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
        array_add(product2,line[i],size_a+size_b-1);
     422:	0364                	addi	s1,sp,396
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
    for(i=0;i<size_b;++i){
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	c20c                	sw	a1,0(a2)
    int v[size_N];
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	0ee9                	addi	t4,t4,26
    int v[size_N];
     436:	00fe                	slli	ra,ra,0x1f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	049a                	slli	s1,s1,0x6
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int v[size_N];
     452:	6715                	lui	a4,0x5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     454:	0004                	0x4
    int v[size_N];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
    int q[size_N];
     45c:	bb15                	j	190 <polymult+0x90>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
    int num_temp[size_N];
     462:	005d                	c.nop	23
     464:	0000                	unimp
    int denum_temp[size_D];
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
    int num_temp[size_N];
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int denum_temp[size_D];
     472:	00052017          	auipc	zero,0x52
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     476:	2800                	fld	fs0,16(s0)
    int v[size_N];
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    array_equ(num_temp,num,size_N);
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	0478                	addi	a4,sp,524
     484:	0000                	unimp
    int denum_temp[size_D];
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
    array_equ(num_temp,num,size_N);
     48a:	005d                	c.nop	23
    array_mod(num_temp,mod,size_N);
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0172                	slli	sp,sp,0x1c
     492:	0000                	unimp
    int denum_temp[size_D];
     494:	6c04                	flw	fs1,24(s0)
    array_equ(denum_temp,denum,size_D);
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
    array_mod(denum_temp,mod,size_D);
     49e:	0270                	addi	a2,sp,268
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
    for (i = 0; i < size_N; ++i){
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
    for (i = size_D-1; i >= 0; i = i-1){
     4ac:	0220                	addi	s0,sp,264
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
    for (i = 0; i < size_N; ++i){
     4b8:	180c                	addi	a1,sp,48
     4ba:	000004e3          	beqz	zero,cc2 <memcpy+0x12>
    for (u = 0; u < mod; ++u){
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        q[i] = 0;
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
        v[i] = 0;
     4ce:	0802                	c.slli64	a6
        q[i] = 0;
     4d0:	000008a7          	0x8a7
        v[i] = 0;
     4d4:	1814                	addi	a3,sp,48
     4d6:	04ff                	0x4ff
    for (i = 0; i < size_N; ++i){
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
        if( denum_temp[i] != 0 )
     4dc:	0702                	c.slli64	a4
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     4e2:	1830                	addi	a2,sp,56
     4e4:	04ed                	addi	s1,s1,27
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
    for (u = 0; u < mod; ++u){
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
        if( num_temp[i] != 0 )
     4f0:	1834                	addi	a3,sp,56
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	00000407          	0x407
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
    while (d >= d2){
     500:	04f5                	addi	s1,s1,29
     502:	0000                	unimp
    array_equ(result,q,size_N);
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
     50e:	0330                	addi	a2,sp,392
     510:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
        result[i] = num_temp[i-size_N];
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0245                	addi	tp,tp,17
    for(i = size_N; i < (2*size_N); ++i){
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
}
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06ec                	addi	a1,sp,844
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	042e                	slli	s0,s0,0xb
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
     546:	0278                	addi	a4,sp,268
     548:	0000                	unimp
     54a:	8004                	0x8004
        v[(d-d2)] = u*r_d;
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0198                	addi	a4,sp,192
     556:	0000                	unimp
    array_mod(v,mod,size_N);
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     562:	0471                	addi	s0,s0,28
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
    array_mod(product,mod,size_N);
     570:	03f5                	addi	t2,t2,29
     572:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     574:	a804                	fsd	fs1,16(s0)
    array_mod(product,mod,size_N);
     576:	1302                	slli	t1,t1,0x20
        for (i = 0; i < size_N; ++i){
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	0e19                	addi	t3,t3,6
    array_mod(num_temp,mod,size_N);
     580:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
    array_add(q,v,size_N);
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	00000693          	li	a3,0
    array_mod(q,mod,size_N);
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
        for (i = size_N-1; i >= 0; i = i-1){
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	5119                	li	sp,-26
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
            num_temp[i] = num_temp[i] - product[i];
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0136                	slli	sp,sp,0xd
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
        for (i = 0; i < size_N; ++i){
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
        for (i = 0; i < size_N; ++i){
     5be:	0005                	c.nop	1
            if( num_temp[i] != 0 )
     5c0:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0801                	addi	a6,a6,0
     5c4:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            v[i] = 0;
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
        for (i = 0; i < size_N; ++i){
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
        result[i] = num_temp[i-size_N];
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xda>
     5e8:	0005                	c.nop	1
    int ri_2[size]; // MX-ring poly, a
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
    int ri_1[size]; // f-random poly, f[N] = 0, b
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
    int ri[size];
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
    int ti_1[size]; // ti_1[0] = 1
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
    int ti[size];
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
    int qi_1[size];
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
    int temp[size];
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
    int ri_2[size]; // MX-ring poly, a
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    for (i = 0; i < size; ++i) {
     644:	690a                	flw	fs2,128(sp)
        ti_2[i] = 0;
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
    for (i = 0; i < size; ++i) {
     64e:	0000                	unimp
     650:	0000065b          	0x65b
    array_equ(ri_2,polyR,size);
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
    array_equ(ri_1,polyf,size);
     65a:	0500                	addi	s0,sp,640
     65c:	04a8                	addi	a0,sp,584
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
    ti_1[0] = 1;
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	5d1a                	lw	s10,164(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
            ti[i] = ti_2[i] - temp[i];
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	d018                	sw	a4,32(s0)
    array_mod(ri_2,mod,size);
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x284>
    array_mod(ri_1,mod,size);
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	d418                	sw	a4,40(s0)
     686:	0002                	c.slli64	zero
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	a218                	fsd	fa4,0(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
    array_mod(temp,mod,size);
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	0531                	addi	a0,a0,12
    array_equ(qi_1,res1,size);
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
    array_mod(qi_1,mod,size);
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0000052b          	0x52b
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000003f 12014704 	0x120147040000003f
    array_equ(temp,res2,size);
     6e0:	003a                	c.slli	zero,0xe
    array_mod(temp,mod,size);
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    array_mod(ti,mod,size);
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
array_equ(ri_2,ri_1,size);
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	3c18                	fld	fa4,56(s0)
array_equ(ri_1,ri,size);
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
array_equ(ti_2,ti_1,size);
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	8918                	0x8918
     710:	0005                	c.nop	1
array_equ(ti_1,ti,size);
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
        controlR = 0;
     71a:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     71c:	2318                	fld	fa4,0(a4)
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    while (controlR != 0) {
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
        for (j = 0; j < mod; ++j) {
     726:	0008                	0x8
            if (((ri_2[0] * j) % mod) == 1)
     728:	0800                	addi	s0,sp,16
        for (j = 0; j < mod; ++j) {
     72a:	c318                	sw	a4,0(a4)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
        for (i = 0; i < N + 1; ++i) {
     736:	2400                	fld	fs0,8(s0)
     738:	3018                	fld	fa4,32(s0)
    }
     73a:	0002                	c.slli64	zero
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	cb18                	sw	a4,16(a4)
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	d918                	sw	a4,48(a0)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	d618                	sw	a4,40(a2)
        ti_2[i] = 0;
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
        ti_1[i] = 0;
     76c:	0000                	unimp
        ti_2[i] = 0;
     76e:	6800                	flw	fs0,16(s0)
     770:	de18                	sw	a4,56(a2)
        ti_1[i] = 0;
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     776:	fe16028f          	0xfe16028f
            ri[i - (N + 1)] = res[i];
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
            ri[i - (N + 1)] = res[i];
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	7800                	flw	fs0,48(s0)
            temp[i] = ri_2[i] - ri[i];
     78c:	8318                	0x8318
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	1718                	addi	a4,sp,928
        for (i = 0; i < N + 1; ++i) {
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
            temp[i] = ri_2[i] - ri[i];
     7a0:	0292                	slli	t0,t0,0x4
        for (i = 0; i < N + 1; ++i) {
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     7a6:	8800                	0x8800
     7a8:	ba18                	fsd	fa4,48(a2)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
        for (i = 0; i < N + 1; ++i) {
     7b6:	b918                	fsd	fa4,48(a0)
            ti[i] = ti_2[i] - temp[i];
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
              qi_1[i] = 0;
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
            controlR += ri[i];
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
              qi_1[i] = 0;
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d0:	ac00                	fsd	fs0,24(s0)
            controlR += ri[i];
     7d2:	a818                	fsd	fa4,16(s0)
        for (i = 0; i < N + 1; ++i) {
     7d4:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     7e6:	fe160297          	auipc	t0,0xfe160
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	7618                	flw	fa4,40(a2)
int* generate_keys(int N, int p, int q){
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	1800                	addi	s0,sp,48
     854:	03ae                	slli	t2,t2,0xb
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x136>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	201d                	jal	8b2 <generate_keys+0xb4>
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	000006a3          	sb	zero,13(zero) # d <__DYNAMIC+0xd>
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
    int polyR[N+1];
     8be:	000008b7          	lui	a7,0x0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	cd1f 0008 1500      	0x15000008cd1f
    int polyR[N+1];
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
    polyR[N] = 1;
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	ce20                	sw	s0,88(a2)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	000005c7          	fmsub.s	fa1,ft0,ft0,ft0,rne
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
     91a:	fd21                	bnez	a0,872 <generate_keys+0x74>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	8222                	mv	tp,s0
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
    polyR[0] = -1;
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
    for(i = 1; i < N; ++i){
     944:	1104                	addi	s1,sp,160
     946:	0000                	unimp
     948:	7922                	flw	fs2,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for (i = N; i < 55; ++i ){
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
    for(i = 0; i < N; ++i){
     954:	0305                	addi	t1,t1,1
        random_keys[i] = f[i];
     956:	135c                	addi	a5,sp,420
     958:	0000                	unimp
     95a:	3122                	fld	ft2,40(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for(i = 0; i < N; ++i){
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     966:	0305                	addi	t1,t1,1
     968:	15b4                	addi	a3,sp,744
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
        random_keys[i] = g[i-N];
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
    for(i = N; i < (2*N); ++i){
     976:	0069                	c.nop	26
     978:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     97a:	59220063          	beq	tp,s2,efa <main+0xc4>
     97e:	0004                	0x4
    fp = ext_euclid(polyR, f, (N+1), p);
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	180c                	addi	a1,sp,48
    for(i = (2*N); i < (3*N); ++i){
     98c:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
    for(i = (2*N); i < (3*N); ++i){
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
    fq = ext_euclid(polyR, f, (N+1), q);
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
    for(i = (3*N); i < (4*N); ++i){
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	00199c03          	lh	s8,1(s3)
        random_keys[i] = fq[i-(3*N)];
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
    fg = polymult2(fq, N, g, N, 0);
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
    for(i = 0; i < (2*N-1); ++i){
     9c4:	0000                	unimp
     9c6:	6624                	flw	fs1,72(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1100                	addi	s0,sp,160
     9d6:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     9d8:	f125                	bnez	a0,938 <generate_keys+0x13a>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	5d0502c7          	0x5d0502c7
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e2:	0000                	unimp
     9e4:	3600                	fld	fs0,40(a2)
     9e6:	000e                	c.slli	zero,0x3
     9e8:	3800                	fld	fs0,48(s0)
    for(i = (4*N); i < (5*N); ++i){
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	2600000b          	0x2600000b
        random_keys[i] = polyR[i-(5*N)];
     9f4:	0419                	addi	s0,s0,6
     9f6:	0000                	unimp
     9f8:	c801                	beqz	s0,a08 <generate_keys+0x20a>
     9fa:	0a02                	c.slli64	s4
    for(i = (5*N); i < (6*N+1); ++i){
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x214>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
}
     a08:	0100                	addi	s0,sp,128
     a0a:	02c9                	addi	t0,t0,18
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	034e                	slli	t1,t1,0x13
     a18:	0000                	unimp
     a1a:	ca01                	beqz	a2,a2a <generate_keys+0x22c>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x236>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	5d0902cb          	0x5d0902cb
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	02cc                	addi	a1,sp,324
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02cd                	addi	t0,t0,19
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
        polyR[i] = 0;
     a48:	6500                	flw	fs0,8(a0)
     a4a:	d428                	sw	a0,104(s0)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	690902cf          	fnmadd.s	ft5,fs2,fa6,fa3,rne
    for(i = 1; i < N; ++i){
     a54:	0300000b          	0x300000b
        f[i] = 0;
     a58:	dc91                	beqz	s1,974 <generate_keys+0x176>
     a5a:	056a2677          	0x56a2677
     a5e:	0000                	unimp
     a60:	d001                	beqz	s0,960 <generate_keys+0x162>
     a62:	0902                	c.slli64	s2
        g[i] = 0;
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
    for (i = N; i < 55; ++i ){
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     a72:	02d1                	addi	t0,t0,20
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
    for(i = 0; i < N; ++i){
     a82:	d201                	beqz	a2,982 <generate_keys+0x184>
        random_keys[i] = f[i];
     a84:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     a86:	0b9d                	addi	s7,s7,7
        random_keys[i] = g[i-N];
     a88:	0000                	unimp
     a8a:	9f26                	add	t5,t5,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	af0902d3          	0xaf0902d3
    for(i = N; i < (2*N); ++i){
     a94:	1200000b          	0x1200000b
        random_keys[i] = fp[i-(2*N)];
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0280                	addi	s0,sp,320
     a9e:	0000                	unimp
     aa0:	d401                	beqz	s0,9a8 <generate_keys+0x1aa>
    for(i = (2*N); i < (3*N); ++i){
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     aa8:	3826                	fld	fa6,104(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	02d5                	addi	t0,t0,21
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x1b4>
     ab2:	6500000b          	0x6500000b
    for(i = (3*N); i < (4*N); ++i){
     ab6:	0001                	nop
        random_keys[i] = fq[i-(3*N)];
     ab8:	2a00                	fld	fs0,16(a2)
    for(i = (3*N); i < (4*N); ++i){
     aba:	0069                	c.nop	26
        fg[i] = fg[i]*p;
     abc:	d601                	beqz	a2,9c4 <generate_keys+0x1c6>
    for(i = 0; i < (2*N-1); ++i){
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
        fg[i] = fg[i]*p;
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000e5e2b          	0xe5e2b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     acc:	9200                	0x9200
     ace:	001d                	c.nop	7
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    for(i = (4*N); i < (5*N); ++i){
     ad8:	77dc9103          	lh	sp,1917(s9)
        random_keys[i] = polyR[i-(5*N)];
     adc:	012c                	addi	a1,sp,136
     ade:	4003055b          	0x4003055b
     ae2:	0010                	0x10
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	00c0                	addi	s0,sp,68
        random_keys[i] = polyR[i-(5*N)];
     aec:	000e7c2b          	0xe7c2b
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <memcpy+0x8a>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b00:	5b01                	li	s6,-32
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b02:	3301                	jal	802 <generate_keys+0x4>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0c:	0efc                	addi	a5,sp,860
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x246>
array_add(temp,message,48);
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x1ff>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b32:	2d00                	fld	fs0,24(a0)
     b34:	0f1e                	slli	t5,t5,0x7
array_add(temp,message,48);
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
    for(i = (2*N); i < (3*N); ++i){
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memset+0x76>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
}
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
        CT[i-(2*N)] = CT[i];
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
    for(i = (2*N); i < (3*N); ++i){
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
        CT[i-(2*N)] = CT[i];
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
    for(i = (2*N); i < (3*N); ++i){
     b74:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ba6:	692e                	flw	fs2,200(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
        if(a2[i] <= q/2)
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
    for (i = 0; i < N; ++i){
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
    c = polymult2(secret_key_fp,N,a2,N,0);
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
    for(i = (2*N); i < ((2*N)+N); ++i){
     bea:	9a01                	andi	a2,a2,-32
     bec:	0602                	c.slli64	a2
}
     bee:	00000b63          	beqz	zero,c04 <ntru_deceypt+0x8e>
     bf2:	0b76                	slli	s6,s6,0x1d
     bf4:	0000                	unimp
     bf6:	00c4                	addi	s1,sp,68
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
        a2[i-(2*N)] = a2[i];
     c04:	029a                	slli	t0,t0,0x6
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
        a2[i-(2*N)] = a2[i];
     c10:	0070                	addi	a2,sp,12
     c12:	9a01                	andi	a2,a2,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     c14:	1e02                	slli	t3,t3,0x20
        if(a2[i] <= q/2)
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
            a2[i] = (-1)*(q-a2[i]);
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     c22:	029a                	slli	t0,t0,0x6
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
    for(i = (2*N); i < ((2*N)+N); ++i){
     c30:	0000                	unimp
     c32:	9a01                	andi	a2,a2,-32
        c2[i-(2*N)] = c2[i];
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <reset_handler+0xe>
  jal x0, default_exc_handler
     c3a:	0000028b          	0x28b
  mv  x1, x0
     c3e:	9f31                	0x9f31
     c40:	0005                	c.nop	1
  mv  x2, x1
     c42:	0100                	addi	s0,sp,128
  mv  x3, x1
     c44:	029a                	slli	t0,t0,0x6
  mv  x4, x1
     c46:	6340                	flw	fs0,4(a4)
  mv  x5, x1
     c48:	b700000b          	0xb700000b
  mv  x7, x1
     c4c:	0002                	c.slli64	zero
  mv  x8, x1
     c4e:	3100                	fld	fs0,32(a0)
  mv  x9, x1
     c50:	0419                	addi	s0,s0,6
  mv x10, x1
     c52:	0000                	unimp
  mv x11, x1
     c54:	9a01                	andi	a2,a2,-32
  mv x12, x1
     c56:	5402                	lw	s0,32(sp)
  mv x13, x1
     c58:	00000b63          	beqz	zero,c6e <reset_handler+0x30>
  mv x15, x1
     c5c:	02ee                	slli	t0,t0,0x1b
  mv x16, x1
     c5e:	0000                	unimp
  mv x17, x1
     c60:	ab31                	j	117c <_bss_start+0x78>
  mv x18, x1
     c62:	0006                	c.slli	zero,0x1
  mv x19, x1
     c64:	0100                	addi	s0,sp,128
  mv x20, x1
     c66:	029a                	slli	t0,t0,0x6
  mv x21, x1
     c68:	6366                	flw	ft6,88(sp)
  mv x22, x1
     c6a:	0f00000b          	0xf00000b
  mv x24, x1
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x190>
  mv x26, x1
     c72:	000002eb          	0x2eb
  mv x28, x1
     c76:	9c01                	0x9c01
  mv x29, x1
     c78:	0a02                	c.slli64	s4
  mv x30, x1
     c7a:	00000b63          	beqz	zero,c90 <_start+0xa>
  la   x2, _stack_start
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	029d                	addi	t0,t0,7
     c84:	630a                	flw	ft6,128(sp)
  la x26, _bss_start
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1a0>
  la x27, _bss_end
     c8e:	3261                	jal	616 <ext_euclid+0x2c>
     c90:	0100                	addi	s0,sp,128
     c92:	029e                	slli	t0,t0,0x7
     c94:	630a                	flw	ft6,128(sp)
  bge x26, x27, zero_loop_end
     c96:	5900000b          	0x5900000b
  sw x0, 0(x26)
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1a0>
  addi x26, x26, 4
     c9e:	9f010063          	beq	sp,a6,fffffe7e <_stack_start+0xfffefe7e>
  ble x26, x27, zero_loop
     ca2:	0a02                	c.slli64	s4
  addi x10, x0, 0
     ca4:	00000b63          	beqz	zero,cba <memcpy+0xa>
  addi x11, x0, 0
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
  jal x1, main
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	a001                	j	cb0 <memcpy>
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <memcpy+0x1a>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	02a1                	addi	t0,t0,8
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x1b0>
     ccc:	0bac                	addi	a1,sp,472
     cce:	0000                	unimp
     cd0:	17dd                	addi	a5,a5,-9
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000bba2b          	0xbba2b
     cfc:	e400                	fsw	fs0,8(s0)
     cfe:	0014                	0x14
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000bde2b          	0xbde2b
     d22:	dd00                	sw	s0,56(a0)
     d24:	43000017          	auipc	zero,0x43000
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x110>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0be8                	addi	a0,sp,476
     d46:	0000                	unimp
     d48:	14e4                	addi	s1,sp,620
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	00066d2f          	0x66d2f
     d6a:	0100                	addi	s0,sp,128
     d6c:	0278                	addi	a4,sp,268
     d6e:	6306                	flw	ft6,64(sp)
     d70:	f000000b          	0xf000000b
     d74:	000a                	c.slli	zero,0x2
     d76:	8600                	0x8600
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	bc9c                	fsd	fa5,56(s1)
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	7801                	lui	a6,0xfffe0
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0278                	addi	a4,sp,268
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	03d4                	addi	a3,sp,452
     da2:	0000                	unimp
     da4:	7801                	lui	a6,0xfffe0
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memset+0x30>
     dac:	0000049b          	0x49b
     db0:	6a31                	lui	s4,0xc
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	0278                	addi	a4,sp,268
     db8:	6334                	flw	fa3,64(a4)
     dba:	d200000b          	0xd200000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	000006ab          	0x6ab
     dc6:	7801                	lui	a6,0xfffe0
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memset+0x52>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	db29                	beqz	a4,d24 <memcpy+0x74>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	027a                	slli	tp,tp,0x1e
     dda:	630a                	flw	ft6,128(sp)
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	630a027b          	0x630a027b
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	000003a3          	sb	zero,7(zero) # 7 <__DYNAMIC+0x7>
     df2:	7d01                	lui	s10,0xfffe0
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	5a26                	lw	s4,104(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	027e                	slli	tp,tp,0x1f
     e06:	630a                	flw	ft6,128(sp)
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	7f01                	lui	t5,0xfffe0
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000b182b          	0xb182b
     e22:	9200                	0x9200
     e24:	001d                	c.nop	7
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
int main(){
     e36:	0f80                	addi	s0,sp,976
     e38:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0b2a                	slli	s6,s6,0xa
     e44:	0000                	unimp
     e46:	00001973          	csrrw	s2,ustatus,zero
int main(){
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8)
     e56:	0078025b          	0x78025b
    resultkon[0] = 0xaaaaaaa0;
     e5a:	012c                	addi	a1,sp,136
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e5c:	025c                	addi	a5,sp,260
    resultkon[0] = 0xaaaaaaa0;
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
    keys = generate_keys(N, p, q);
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 3a2b      	0x3a2b0030015f
    resultkon[0] = 0xaaaaaaa0;
     e74:	9000000b          	0x9000000b
    resultkon[0] = 0xaaaaaaa1;
     e78:	001c                	0x1c
    keys = generate_keys(N, p, q);
     e7a:	9300                	0x9300
    resultkon[0] = 0xaaaaaaa1;
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < N; ++i){
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
        secret_key_f[i] = keys[i];
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
    for(i = 0; i < N; ++i){
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0b48                	addi	a0,sp,404
    for(i = N; i < (2*N); ++i){
     e96:	0000                	unimp
     e98:	14e4                	addi	s1,sp,620
     e9a:	0000                	unimp
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
        secret_key_fp[i-(2*N)] = keys[i];
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
    for(i = (2*N); i < (3*N); ++i){
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
    for(i = (3*N); i < (4*N); ++i){
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
        public_key[i-(4*N)] = keys[i];
     ebc:	0003452f          	0x3452f
     ec0:	0100                	addi	s0,sp,128
     ec2:	0220                	addi	s0,sp,264
     ec4:	6306                	flw	ft6,64(sp)
    for(i = (4*N); i < (5*N); ++i){
     ec6:	fe00000b          	0xfe00000b
     eca:	f2000007          	0xf2000007
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
        ring_poly[i-(5*N)] = keys[i];
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	2001                	jal	eda <main+0xa4>
    for(i = (5*N); i < (6*N+1); ++i){
     edc:	1802                	slli	a6,a6,0x20
     ede:	005d                	c.nop	23
    resultkon[0] = 0xbbbbbbb0;
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
     ee4:	0000                	unimp
     ee6:	7030                	flw	fa2,96(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ee8:	0100                	addi	s0,sp,128
     eea:	0220                	addi	s0,sp,264
     eec:	5d1f 0000 e500      	0xe50000005d1f
    resultkon[0] = 0xbbbbbbb1;
     ef2:	0005                	c.nop	1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
    resultkon[0] = 0xbbbbbbb0;
     ef8:	2001                	jal	ef8 <main+0xc2>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     efa:	2602                	fld	fa2,0(sp)
    resultkon[0] = 0xbbbbbbb1;
     efc:	005d                	c.nop	23
    resultkon[0] = 0xccccccc0;
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f06:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc0;
     f08:	0222                	slli	tp,tp,0x8
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f0a:	6c09                	lui	s8,0x2
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	23010067          	jr	560(sp)
     f18:	0902                	c.slli64	s2
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
     f1e:	7df49103          	lh	sp,2015(s1)
            resultkon[0] = 0xDEDEDEDE;
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
    resultkon[0] = 0xccccccc1;	
     f26:	2501                	jal	1526 <product2+0x1ca>
     f28:	0a02                	c.slli64	s4
            resultkon[0] = 0xDEDEDEDE;
     f2a:	00000b63          	beqz	zero,f40 <main+0x10a>
    for(i = 0; i < 32; ++i){
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
        if(!(message[i] == Dec_Message[i])){
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	2601                	jal	1236 <_bss_start+0x132>
     f38:	0a02                	c.slli64	s4
     f3a:	00000b63          	beqz	zero,f50 <main+0x11a>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
            resultkon[0] = 0xBABABABA;
     f42:	662a                	flw	fa2,136(sp)
     f44:	27010067          	jr	624(sp)
     f48:	0a02                	c.slli64	s4
     f4a:	00000b63          	beqz	zero,f60 <main+0x12a>
}
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
     f54:	2801006b          	0x2801006b
     f58:	0a02                	c.slli64	s4
     f5a:	00000b63          	beqz	zero,f70 <__CTOR_LIST__+0x2>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
     f62:	ab26                	fsd	fs1,400(sp)
            resultkon[0] = 0xDEDEDEDE;
     f64:	0006                	c.slli	zero,0x1
    for(i = 0; i < 32; ++i){
     f66:	0100                	addi	s0,sp,128
     f68:	0229                	addi	tp,tp,10
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
     f70:	0006                	c.slli	zero,0x1
     f72:	2a00                	fld	fs0,16(a2)
     f74:	0069                	c.nop	26
     f76:	2a01                	jal	1086 <_endtext+0x106>
     f78:	0902                	c.slli64	s2
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	e526                	fsw	fs1,136(sp)
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f88:	630a022b          	0x630a022b
     f8c:	5f00000b          	0x5f00000b
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
     f94:	0069                	c.nop	26
     f96:	0000                	unimp
     f98:	00000877          	0x877
     f9c:	0008442b          	0x8442b
     fa0:	9d00                	0x9d00
     fa2:	001d                	c.nop	7
     fa4:	bc00                	fsd	fs0,56(s0)
     fa6:	2c00000f          	0x2c00000f
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
     fb0:	012c                	addi	a1,sp,136
     fb2:	2c30015b          	0x2c30015b
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
     fba:	00d0                	addi	a2,sp,68
     fbc:	0008c42b          	0x8c42b
     fc0:	9d00                	0x9d00
     fc2:	001d                	c.nop	7
     fc4:	dc00                	sw	s0,56(s0)
     fc6:	2c00000f          	0x2c00000f
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
     fdc:	00098c2b          	0x98c2b
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	2b000087          	0x2b000087
    1004:	09a6                	slli	s3,s3,0x9
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    100c:	102a                	c.slli	zero,0x2a
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    101c:	2c7c                	fld	fa5,216(s0)
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    102a:	0009c42b          	0x9c42b
    102e:	dd00                	sw	s0,56(a0)
    1030:	4f000017          	auipc	zero,0x4f000
    1034:	0010                	0x10
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    104c:	3001                	jal	84c <generate_keys+0x4e>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	09d8                	addi	a4,sp,212
    1052:	0000                	unimp
    1054:	14e4                	addi	s1,sp,620
    1056:	0000                	unimp
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	0382                	c.slli64	t2
    1092:	0000                	unimp
    1094:	7e01                	lui	t3,0xfffe0
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <_endtext+0x12e>
    109c:	05ea                	slli	a1,a1,0x1a
    109e:	0000                	unimp
    10a0:	0214                	addi	a3,sp,256
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	145f 0000 ab31      	0xab310000145f
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	017e                	slli	sp,sp,0x1f
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0192                	slli	gp,gp,0x4
    10be:	0000                	unimp
    10c0:	7e01                	lui	t3,0xfffe0
    10c2:	2201                	jal	11c2 <_bss_start+0xbe>
    10c4:	00000b63          	beqz	zero,10da <_endtext+0x15a>
    10c8:	0902                	c.slli64	s2
    10ca:	0000                	unimp
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	017e                	slli	sp,sp,0x1f
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	4700                	lw	s0,8(a4)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	7e01                	lui	t3,0xfffe0
    10e4:	3701                	jal	fe4 <_endtext+0x64>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0000098b          	0x98b
    10ee:	c426                	sw	s1,8(sp)
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	0180                	addi	s0,sp,192
    10f6:	630a                	flw	ft6,128(sp)
    10f8:	c200000b          	0xc200000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	8101                	c.srli64	a0
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	09da                	slli	s3,s3,0x16
    110c:	0000                	unimp
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	0181                	addi	gp,gp,0
    1114:	5d0c                	lw	a1,56(a0)
    1116:	0000                	unimp
    1118:	0800                	addi	s0,sp,16
    111a:	000a                	c.slli	zero,0x2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	8101                	c.srli64	a0
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	00000b0f          	0xb0f
    112c:	3726                	fld	fa4,104(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	0182                	c.slli64	gp
    1134:	5f09                	li	t5,-30
    1136:	0014                	0x14
    1138:	2d00                	fld	fs0,24(a0)
    113a:	2600000b          	0x2600000b
    113e:	05b5                	addi	a1,a1,13
    1140:	0000                	unimp
    1142:	8301                	c.srli64	a4
    1144:	0901                	addi	s2,s2,0
    1146:	1472                	slli	s0,s0,0x3c
    1148:	0000                	unimp
    114a:	0b4d                	addi	s6,s6,19
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	8401                	c.srai64	s0
    1154:	0901                	addi	s2,s2,0
    1156:	1485                	addi	s1,s1,-31
    1158:	0000                	unimp
    115a:	0b6d                	addi	s6,s6,27
    115c:	0000                	unimp
    115e:	5426                	lw	s0,104(sp)
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	0186                	slli	gp,gp,0x1
    1166:	9809                	andi	s0,s0,-30
    1168:	0014                	0x14
    116a:	8d00                	0x8d00
    116c:	2a00000b          	0x2a00000b
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	ab090187          	0xab090187
    1178:	0014                	0x14
    117a:	da00                	sw	s0,48(a2)
    117c:	2600000b          	0x2600000b
    1180:	046c                	addi	a1,sp,524
    1182:	0000                	unimp
    1184:	8801                	andi	s0,s0,0
    1186:	0901                	addi	s2,s2,0
    1188:	14be                	slli	s1,s1,0x2f
    118a:	0000                	unimp
    118c:	0bfa                	slli	s7,s7,0x1e
    118e:	0000                	unimp
    1190:	5a26                	lw	s4,104(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	0189                	addi	gp,gp,2
    1198:	d109                	beqz	a0,109a <_endtext+0x11a>
    119a:	0014                	0x14
    119c:	3100                	fld	fs0,32(a0)
    119e:	000c                	0xc
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	8a010073          	0x8a010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <_bss_start+0xbc>
    11ae:	00000ca3          	sb	zero,25(zero) # 19 <__DYNAMIC+0x19>
    11b2:	5926                	lw	s2,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	630a018b          	0x630a018b
    11bc:	c100000b          	0xc100000b
    11c0:	000c                	0xc
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	015e                	slli	sp,sp,0x17
    11c6:	0000                	unimp
    11c8:	8c01                	sub	s0,s0,s0
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <_bss_start+0xde>
    11d0:	0cdf 0000 2526      	0x252600000cdf
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	018d                	addi	gp,gp,3
    11dc:	5d09                	li	s10,-30
    11de:	0000                	unimp
    11e0:	fd00                	fsw	fs0,56(a0)
    11e2:	000c                	0xc
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	00000d4b          	fnmsub.s	fs10,ft0,ft0,ft0,rne
    11ee:	00006933          	or	s2,zero,zero
    11f2:	7900                	flw	fs0,48(a0)
    11f4:	000d                	c.nop	3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	00000da7          	0xda7
    1200:	00006933          	or	s2,zero,zero
    1204:	d500                	sw	s0,40(a0)
    1206:	000d                	c.nop	3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
    1212:	00006933          	or	s2,zero,zero
    1216:	3100                	fld	fs0,32(a0)
    1218:	000e                	c.slli	zero,0x3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0e5f 0000 5a2b      	0x5a2b00000e5f
    1226:	0006                	c.slli	zero,0x1
    1228:	fa00                	fsw	fs0,48(a2)
    122a:	4500001b          	0x4500001b
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8302                	jr	t1
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	5a01f303          	0x5a01f303
    123e:	012c                	addi	a1,sp,136
    1240:	025c                	addi	a5,sp,260
    1242:	0079                	c.nop	30
    1244:	2b00                	fld	fs0,16(a4)
    1246:	0662                	slli	a2,a2,0x18
    1248:	0000                	unimp
    124a:	1bfa                	slli	s7,s7,0x3e
    124c:	0000                	unimp
    124e:	1265                	addi	tp,tp,-7
    1250:	0000                	unimp
    1252:	012c                	addi	a1,sp,136
    1254:	025a                	slli	tp,tp,0x16
    1256:	0084                	addi	s1,sp,64
    1258:	012c                	addi	a1,sp,136
    125a:	008b025b          	0x8b025b
    125e:	012c                	addi	a1,sp,136
    1260:	025c                	addi	a5,sp,260
    1262:	0079                	c.nop	30
    1264:	2b00                	fld	fs0,16(a4)
    1266:	0680                	addi	s0,sp,832
    1268:	0000                	unimp
    126a:	1b5c                	addi	a5,sp,436
    126c:	0000                	unimp
    126e:	1285                	addi	t0,t0,-31
    1270:	0000                	unimp
    1272:	012c                	addi	a1,sp,136
    1274:	025a                	slli	tp,tp,0x16
    1276:	012c0083          	lb	ra,18(s8) # fffe2012 <_stack_start+0xfffd2012>
    127a:	0082025b          	0x82025b
    127e:	012c                	addi	a1,sp,136
    1280:	025c                	addi	a5,sp,260
    1282:	0079                	c.nop	30
    1284:	2b00                	fld	fs0,16(a4)
    1286:	0688                	addi	a0,sp,832
    1288:	0000                	unimp
    128a:	1b5c                	addi	a5,sp,436
    128c:	0000                	unimp
    128e:	12a5                	addi	t0,t0,-23
    1290:	0000                	unimp
    1292:	012c                	addi	a1,sp,136
    1294:	025a                	slli	tp,tp,0x16
    1296:	0084                	addi	s1,sp,64
    1298:	012c                	addi	a1,sp,136
    129a:	0082025b          	0x82025b
    129e:	012c                	addi	a1,sp,136
    12a0:	025c                	addi	a5,sp,260
    12a2:	0079                	c.nop	30
    12a4:	2b00                	fld	fs0,16(a4)
    12a6:	0694                	addi	a3,sp,832
    12a8:	0000                	unimp
    12aa:	14e4                	addi	s1,sp,620
    12ac:	0000                	unimp
    12ae:	12d1                	addi	t0,t0,-12
    12b0:	0000                	unimp
    12b2:	012c                	addi	a1,sp,136
    12b4:	025a                	slli	tp,tp,0x16
    12b6:	012c0083          	lb	ra,18(s8)
    12ba:	0079025b          	0x79025b
    12be:	012c                	addi	a1,sp,136
    12c0:	025c                	addi	a5,sp,260
    12c2:	0084                	addi	s1,sp,64
    12c4:	012c                	addi	a1,sp,136
    12c6:	025d                	addi	tp,tp,23
    12c8:	0079                	c.nop	30
    12ca:	012c                	addi	a1,sp,136
    12cc:	025e                	slli	tp,tp,0x17
    12ce:	0082                	c.slli64	ra
    12d0:	2b00                	fld	fs0,16(a4)
    12d2:	06b0                	addi	a2,sp,840
    12d4:	0000                	unimp
    12d6:	1b5c                	addi	a5,sp,436
    12d8:	0000                	unimp
    12da:	12f1                	addi	t0,t0,-4
    12dc:	0000                	unimp
    12de:	012c                	addi	a1,sp,136
    12e0:	025a                	slli	tp,tp,0x16
    12e2:	0072                	c.slli	zero,0x1c
    12e4:	012c                	addi	a1,sp,136
    12e6:	0082025b          	0x82025b
    12ea:	012c                	addi	a1,sp,136
    12ec:	025c                	addi	a5,sp,260
    12ee:	0079                	c.nop	30
    12f0:	2b00                	fld	fs0,16(a4)
    12f2:	06bc                	addi	a5,sp,840
    12f4:	0000                	unimp
    12f6:	14e4                	addi	s1,sp,620
    12f8:	0000                	unimp
    12fa:	131d                	addi	t1,t1,-25
    12fc:	0000                	unimp
    12fe:	012c                	addi	a1,sp,136
    1300:	025a                	slli	tp,tp,0x16
    1302:	0072                	c.slli	zero,0x1c
    1304:	012c                	addi	a1,sp,136
    1306:	0079025b          	0x79025b
    130a:	012c                	addi	a1,sp,136
    130c:	025c                	addi	a5,sp,260
    130e:	0084                	addi	s1,sp,64
    1310:	012c                	addi	a1,sp,136
    1312:	025d                	addi	tp,tp,23
    1314:	0079                	c.nop	30
    1316:	012c                	addi	a1,sp,136
    1318:	025e                	slli	tp,tp,0x17
    131a:	0082                	c.slli64	ra
    131c:	2b00                	fld	fs0,16(a4)
    131e:	06c4                	addi	s1,sp,836
    1320:	0000                	unimp
    1322:	1bfa                	slli	s7,s7,0x3e
    1324:	0000                	unimp
    1326:	00001337          	lui	t1,0x1
    132a:	012c                	addi	a1,sp,136
    132c:	025a                	slli	tp,tp,0x16
    132e:	0089                	addi	ra,ra,2
    1330:	012c                	addi	a1,sp,136
    1332:	025c                	addi	a5,sp,260
    1334:	0079                	c.nop	30
    1336:	2b00                	fld	fs0,16(a4)
    1338:	06cc                	addi	a1,sp,836
    133a:	0000                	unimp
    133c:	1b5c                	addi	a5,sp,436
    133e:	0000                	unimp
    1340:	00001357          	0x1357
    1344:	012c                	addi	a1,sp,136
    1346:	025a                	slli	tp,tp,0x16
    1348:	0089                	addi	ra,ra,2
    134a:	012c                	addi	a1,sp,136
    134c:	0082025b          	0x82025b
    1350:	012c                	addi	a1,sp,136
    1352:	025c                	addi	a5,sp,260
    1354:	0079                	c.nop	30
    1356:	2b00                	fld	fs0,16(a4)
    1358:	06da                	slli	a3,a3,0x16
    135a:	0000                	unimp
    135c:	00001973          	csrrw	s2,ustatus,zero
    1360:	1388                	addi	a0,sp,480
    1362:	0000                	unimp
    1364:	012c                	addi	a1,sp,136
    1366:	025a                	slli	tp,tp,0x16
    1368:	0089                	addi	ra,ra,2
    136a:	012c                	addi	a1,sp,136
    136c:	0079025b          	0x79025b
    1370:	012c                	addi	a1,sp,136
    1372:	025c                	addi	a5,sp,260
    1374:	0086                	slli	ra,ra,0x1
    1376:	012c                	addi	a1,sp,136
    1378:	025d                	addi	tp,tp,23
    137a:	0079                	c.nop	30
    137c:	012c                	addi	a1,sp,136
    137e:	025e                	slli	tp,tp,0x17
    1380:	0082                	c.slli64	ra
    1382:	012c                	addi	a1,sp,136
    1384:	015f 0030 e22b      	0xe22b0030015f
    138a:	0006                	c.slli	zero,0x1
    138c:	fa00                	fsw	fs0,48(a2)
    138e:	a200001b          	0xa200001b
    1392:	2c000013          	li	zero,704
    1396:	5a01                	li	s4,-32
    1398:	7202                	flw	ft4,32(sp)
    139a:	2c00                	fld	fs0,24(s0)
    139c:	5c01                	li	s8,-32
    139e:	7902                	flw	fs2,32(sp)
    13a0:	0000                	unimp
    13a2:	0006ea2b          	0x6ea2b
    13a6:	5c00                	lw	s0,56(s0)
    13a8:	c200001b          	0xc200001b
    13ac:	2c000013          	li	zero,704
    13b0:	5a01                	li	s4,-32
    13b2:	7202                	flw	ft4,32(sp)
    13b4:	2c00                	fld	fs0,24(s0)
    13b6:	5b01                	li	s6,-32
    13b8:	8202                	jr	tp
    13ba:	2c00                	fld	fs0,24(s0)
    13bc:	5c01                	li	s8,-32
    13be:	7902                	flw	fs2,32(sp)
    13c0:	0000                	unimp
    13c2:	0006fa2b          	0x6fa2b
    13c6:	5c00                	lw	s0,56(s0)
    13c8:	e200001b          	0xe200001b
    13cc:	2c000013          	li	zero,704
    13d0:	5a01                	li	s4,-32
    13d2:	8a02                	jr	s4
    13d4:	2c00                	fld	fs0,24(s0)
    13d6:	5b01                	li	s6,-32
    13d8:	8202                	jr	tp
    13da:	2c00                	fld	fs0,24(s0)
    13dc:	5c01                	li	s8,-32
    13de:	7902                	flw	fs2,32(sp)
    13e0:	0000                	unimp
    13e2:	0007022b          	0x7022b
    13e6:	fa00                	fsw	fs0,48(a2)
    13e8:	0200001b          	0x200001b
    13ec:	0014                	0x14
    13ee:	2c00                	fld	fs0,24(s0)
    13f0:	5a01                	li	s4,-32
    13f2:	8302                	jr	t1
    13f4:	2c00                	fld	fs0,24(s0)
    13f6:	5b01                	li	s6,-32
    13f8:	8402                	jr	s0
    13fa:	2c00                	fld	fs0,24(s0)
    13fc:	5c01                	li	s8,-32
    13fe:	7902                	flw	fs2,32(sp)
    1400:	0000                	unimp
    1402:	00070a2b          	0x70a2b
    1406:	fa00                	fsw	fs0,48(a2)
    1408:	2200001b          	0x2200001b
    140c:	0014                	0x14
    140e:	2c00                	fld	fs0,24(s0)
    1410:	5a01                	li	s4,-32
    1412:	8402                	jr	s0
    1414:	2c00                	fld	fs0,24(s0)
    1416:	5b01                	li	s6,-32
    1418:	8802                	jr	a6
    141a:	2c00                	fld	fs0,24(s0)
    141c:	5c01                	li	s8,-32
    141e:	7902                	flw	fs2,32(sp)
    1420:	0000                	unimp
    1422:	0007122b          	0x7122b
    1426:	fa00                	fsw	fs0,48(a2)
    1428:	4200001b          	0x4200001b
    142c:	0014                	0x14
    142e:	2c00                	fld	fs0,24(s0)
    1430:	5a01                	li	s4,-32
    1432:	8b02                	jr	s6
    1434:	2c00                	fld	fs0,24(s0)
    1436:	5b01                	li	s6,-32
    1438:	8602                	jr	a2
    143a:	2c00                	fld	fs0,24(s0)
    143c:	5c01                	li	s8,-32
    143e:	7902                	flw	fs2,32(sp)
    1440:	0000                	unimp
    1442:	1a2d                	addi	s4,s4,-21
    1444:	fa000007          	0xfa000007
    1448:	2c00001b          	0x2c00001b
    144c:	5a01                	li	s4,-32
    144e:	8602                	jr	a2
    1450:	2c00                	fld	fs0,24(s0)
    1452:	5b01                	li	s6,-32
    1454:	8a02                	jr	s4
    1456:	2c00                	fld	fs0,24(s0)
    1458:	5c01                	li	s8,-32
    145a:	7902                	flw	fs2,32(sp)
    145c:	0000                	unimp
    145e:	0900                	addi	s0,sp,144
    1460:	005d                	c.nop	23
    1462:	0000                	unimp
    1464:	1472                	slli	s0,s0,0x3c
    1466:	0000                	unimp
    1468:	6934                	flw	fa3,80(a0)
    146a:	0000                	unimp
    146c:	e500                	fsw	fs0,8(a0)
    146e:	0011                	c.nop	4
    1470:	0000                	unimp
    1472:	5d09                	li	s10,-30
    1474:	0000                	unimp
    1476:	8500                	0x8500
    1478:	0014                	0x14
    147a:	3400                	fld	fs0,40(s0)
    147c:	0069                	c.nop	26
    147e:	0000                	unimp
    1480:	11ee                	slli	gp,gp,0x3b
    1482:	0000                	unimp
    1484:	0900                	addi	s0,sp,144
    1486:	005d                	c.nop	23
    1488:	0000                	unimp
    148a:	1498                	addi	a4,sp,608
    148c:	0000                	unimp
    148e:	6934                	flw	fa3,80(a0)
    1490:	0000                	unimp
    1492:	f700                	fsw	fs0,40(a4)
    1494:	0011                	c.nop	4
    1496:	0000                	unimp
    1498:	5d09                	li	s10,-30
    149a:	0000                	unimp
    149c:	ab00                	fsd	fs0,16(a4)
    149e:	0014                	0x14
    14a0:	3400                	fld	fs0,40(s0)
    14a2:	0069                	c.nop	26
    14a4:	0000                	unimp
    14a6:	1200                	addi	s0,sp,288
    14a8:	0000                	unimp
    14aa:	0900                	addi	s0,sp,144
    14ac:	005d                	c.nop	23
    14ae:	0000                	unimp
    14b0:	14be                	slli	s1,s1,0x2f
    14b2:	0000                	unimp
    14b4:	6934                	flw	fa3,80(a0)
    14b6:	0000                	unimp
    14b8:	0900                	addi	s0,sp,144
    14ba:	0012                	c.slli	zero,0x4
    14bc:	0000                	unimp
    14be:	5d09                	li	s10,-30
    14c0:	0000                	unimp
    14c2:	d100                	sw	s0,32(a0)
    14c4:	0014                	0x14
    14c6:	3400                	fld	fs0,40(s0)
    14c8:	0069                	c.nop	26
    14ca:	0000                	unimp
    14cc:	1212                	slli	tp,tp,0x24
    14ce:	0000                	unimp
    14d0:	0900                	addi	s0,sp,144
    14d2:	005d                	c.nop	23
    14d4:	0000                	unimp
    14d6:	14e4                	addi	s1,sp,620
    14d8:	0000                	unimp
    14da:	6934                	flw	fa3,80(a0)
    14dc:	0000                	unimp
    14de:	1b00                	addi	s0,sp,432
    14e0:	0012                	c.slli	zero,0x4
    14e2:	0000                	unimp
    14e4:	8a35                	andi	a2,a2,13
    14e6:	0001                	nop
    14e8:	0100                	addi	s0,sp,128
    14ea:	06ec                	addi	a1,sp,844
    14ec:	00000b63          	beqz	zero,1502 <product2+0x1a6>
    14f0:	0430                	addi	a2,sp,520
    14f2:	0000                	unimp
    14f4:	01ba                	slli	gp,gp,0xe
    14f6:	0000                	unimp
    14f8:	9c01                	0x9c01
    14fa:	1791                	addi	a5,a5,-28
    14fc:	0000                	unimp
    14fe:	6e36                	flw	ft8,76(sp)
    1500:	6d75                	lui	s10,0x1d
    1502:	0100                	addi	s0,sp,128
    1504:	13ec                	addi	a1,sp,492
    1506:	00000b63          	beqz	zero,151c <product2+0x1c0>
    150a:	0e8d                	addi	t4,t4,3
    150c:	0000                	unimp
    150e:	00010637          	lui	a2,0x10
    1512:	0100                	addi	s0,sp,128
    1514:	1cec                	addi	a1,sp,636
    1516:	005d                	c.nop	23
    1518:	0000                	unimp
    151a:	0eb9                	addi	t4,t4,14
    151c:	0000                	unimp
    151e:	00068d37          	lui	s10,0x68
    1522:	0100                	addi	s0,sp,128
    1524:	28ec                	fld	fa1,208(s1)
    1526:	00000b63          	beqz	zero,153c <product2+0x1e0>
    152a:	0f0a                	slli	t5,t5,0x2
    152c:	0000                	unimp
    152e:	0006b137          	lui	sp,0x6b
    1532:	0100                	addi	s0,sp,128
    1534:	33ec                	fld	fa1,224(a5)
    1536:	005d                	c.nop	23
    1538:	0000                	unimp
    153a:	00000f4f          	fnmadd.s	ft10,ft0,ft0,ft0,rne
    153e:	6d36                	flw	fs10,76(sp)
    1540:	0100646f          	jal	s0,7550 <_stack_len+0x3550>
    1544:	3fec                	fld	fa1,248(a5)
    1546:	005d                	c.nop	23
    1548:	0000                	unimp
    154a:	0f86                	slli	t6,t6,0x1
    154c:	0000                	unimp
    154e:	7538                	flw	fa4,104(a0)
    1550:	0100                	addi	s0,sp,128
    1552:	09ee                	slli	s3,s3,0x1b
    1554:	005d                	c.nop	23
    1556:	0000                	unimp
    1558:	0fbd                	addi	t6,t6,15
    155a:	0000                	unimp
    155c:	6438                	flw	fa4,72(s0)
    155e:	0100                	addi	s0,sp,128
    1560:	0bee                	slli	s7,s7,0x1b
    1562:	005d                	c.nop	23
    1564:	0000                	unimp
    1566:	0fe6                	slli	t6,t6,0x19
    1568:	0000                	unimp
    156a:	6439                	lui	s0,0xe
    156c:	0032                	c.slli	zero,0xc
    156e:	ee01                	bnez	a2,1586 <product2+0x22a>
    1570:	5d0d                	li	s10,-29
    1572:	0000                	unimp
    1574:	3800                	fld	fs0,48(s0)
    1576:	0069                	c.nop	26
    1578:	ee01                	bnez	a2,1590 <product2+0x234>
    157a:	5d10                	lw	a2,56(a0)
    157c:	0000                	unimp
    157e:	0400                	addi	s0,sp,512
    1580:	0010                	0x10
    1582:	3900                	fld	fs0,48(a0)
    1584:	5f62                	lw	t5,56(sp)
    1586:	004e                	c.slli	zero,0x13
    1588:	ee01                	bnez	a2,15a0 <product2+0x244>
    158a:	5d12                	lw	s10,36(sp)
    158c:	0000                	unimp
    158e:	3800                	fld	fs0,48(s0)
    1590:	5f72                	lw	t5,60(sp)
    1592:	0064                	addi	s1,sp,12
    1594:	ee01                	bnez	a2,15ac <product2+0x250>
    1596:	5d16                	lw	s10,100(sp)
    1598:	0000                	unimp
    159a:	b500                	fsd	fs0,40(a0)
    159c:	0010                	0x10
    159e:	3a00                	fld	fs0,48(a2)
    15a0:	02b4                	addi	a3,sp,328
    15a2:	0000                	unimp
    15a4:	ef01                	bnez	a4,15bc <result+0x8>
    15a6:	630a                	flw	ft6,128(sp)
    15a8:	d300000b          	0xd300000b
    15ac:	0010                	0x10
    15ae:	3800                	fld	fs0,48(s0)
    15b0:	0076                	c.slli	zero,0x1d
    15b2:	f101                	bnez	a0,14b2 <product2+0x156>
    15b4:	9109                	srli	a0,a0,0x22
    15b6:	eb000017          	auipc	zero,0xeb000
    15ba:	0010                	0x10
    15bc:	3800                	fld	fs0,48(s0)
    15be:	0071                	c.nop	28
    15c0:	f201                	bnez	a2,14c0 <product2+0x164>
    15c2:	a409                	j	17c4 <result+0x210>
    15c4:	0b000017          	auipc	zero,0xb000
    15c8:	0011                	c.nop	4
    15ca:	3a00                	fld	fs0,48(a2)
    15cc:	0182                	c.slli64	gp
    15ce:	0000                	unimp
    15d0:	f301                	bnez	a4,14d0 <product2+0x174>
    15d2:	630a                	flw	ft6,128(sp)
    15d4:	2b00000b          	0x2b00000b
    15d8:	0011                	c.nop	4
    15da:	3a00                	fld	fs0,48(a2)
    15dc:	0256                	slli	tp,tp,0x15
    15de:	0000                	unimp
    15e0:	f401                	bnez	s0,14e8 <product2+0x18c>
    15e2:	b709                	j	14e4 <product2+0x188>
    15e4:	49000017          	auipc	zero,0x49000
    15e8:	0011                	c.nop	4
    15ea:	3a00                	fld	fs0,48(a2)
    15ec:	0254                	addi	a3,sp,260
    15ee:	0000                	unimp
    15f0:	f501                	bnez	a0,14f8 <product2+0x19c>
    15f2:	ca09                	beqz	a2,1604 <result+0x50>
    15f4:	95000017          	auipc	zero,0x95000
    15f8:	0011                	c.nop	4
    15fa:	3300                	fld	fs0,32(a4)
    15fc:	0069                	c.nop	26
    15fe:	0000                	unimp
    1600:	11cd                	addi	gp,gp,-13
    1602:	0000                	unimp
    1604:	00006933          	or	s2,zero,zero
    1608:	fb00                	fsw	fs0,48(a4)
    160a:	0011                	c.nop	4
    160c:	3300                	fld	fs0,32(a4)
    160e:	0069                	c.nop	26
    1610:	0000                	unimp
    1612:	1229                	addi	tp,tp,-22
    1614:	0000                	unimp
    1616:	00006933          	or	s2,zero,zero
    161a:	5700                	lw	s0,40(a4)
    161c:	0012                	c.slli	zero,0x4
    161e:	2b00                	fld	fs0,16(a4)
    1620:	048c                	addi	a1,sp,576
    1622:	0000                	unimp
    1624:	1bfa                	slli	s7,s7,0x3e
    1626:	0000                	unimp
    1628:	1640                	addi	s0,sp,804
    162a:	0000                	unimp
    162c:	012c                	addi	a1,sp,136
    162e:	025a                	slli	tp,tp,0x16
    1630:	0082                	c.slli64	ra
    1632:	012c                	addi	a1,sp,136
    1634:	01f3035b          	0x1f3035b
    1638:	2c5a                	fld	fs8,400(sp)
    163a:	5c01                	li	s8,-32
    163c:	7902                	flw	fs2,32(sp)
    163e:	0000                	unimp
    1640:	0004942b          	0x4942b
    1644:	5c00                	lw	s0,56(s0)
    1646:	6000001b          	0x6000001b
    164a:	0016                	c.slli	zero,0x5
    164c:	2c00                	fld	fs0,24(s0)
    164e:	5a01                	li	s4,-32
    1650:	8202                	jr	tp
    1652:	2c00                	fld	fs0,24(s0)
    1654:	5b01                	li	s6,-32
    1656:	8302                	jr	t1
    1658:	2c00                	fld	fs0,24(s0)
    165a:	5c01                	li	s8,-32
    165c:	7902                	flw	fs2,32(sp)
    165e:	0000                	unimp
    1660:	00049e2b          	0x49e2b
    1664:	fa00                	fsw	fs0,48(a2)
    1666:	8000001b          	0x8000001b
    166a:	0016                	c.slli	zero,0x5
    166c:	2c00                	fld	fs0,24(s0)
    166e:	5a01                	li	s4,-32
    1670:	8702                	jr	a4
    1672:	2c00                	fld	fs0,24(s0)
    1674:	5b01                	li	s6,-32
    1676:	8a02                	jr	s4
    1678:	2c00                	fld	fs0,24(s0)
    167a:	5c01                	li	s8,-32
    167c:	8402                	jr	s0
    167e:	0000                	unimp
    1680:	0004a62b          	0x4a62b
    1684:	5c00                	lw	s0,56(s0)
    1686:	a000001b          	0xa000001b
    168a:	0016                	c.slli	zero,0x5
    168c:	2c00                	fld	fs0,24(s0)
    168e:	5a01                	li	s4,-32
    1690:	8702                	jr	a4
    1692:	2c00                	fld	fs0,24(s0)
    1694:	5b01                	li	s6,-32
    1696:	8302                	jr	t1
    1698:	2c00                	fld	fs0,24(s0)
    169a:	5c01                	li	s8,-32
    169c:	8402                	jr	s0
    169e:	0000                	unimp
    16a0:	0005122b          	0x5122b
    16a4:	fa00                	fsw	fs0,48(a2)
    16a6:	c300001b          	0xc300001b
    16aa:	0016                	c.slli	zero,0x5
    16ac:	2c00                	fld	fs0,24(s0)
    16ae:	5a01                	li	s4,-32
    16b0:	0305                	addi	t1,t1,1
    16b2:	15b4                	addi	a3,sp,744
    16b4:	0000                	unimp
    16b6:	012c                	addi	a1,sp,136
    16b8:	0086025b          	0x86025b
    16bc:	012c                	addi	a1,sp,136
    16be:	025c                	addi	a5,sp,260
    16c0:	0079                	c.nop	30
    16c2:	2b00                	fld	fs0,16(a4)
    16c4:	0562                	slli	a0,a0,0x18
    16c6:	0000                	unimp
    16c8:	1b5c                	addi	a5,sp,436
    16ca:	0000                	unimp
    16cc:	000016e3          	bnez	zero,1ed8 <_bss_end+0x44>
    16d0:	012c                	addi	a1,sp,136
    16d2:	025a                	slli	tp,tp,0x16
    16d4:	0085                	addi	ra,ra,1
    16d6:	012c                	addi	a1,sp,136
    16d8:	0083025b          	0x83025b
    16dc:	012c                	addi	a1,sp,136
    16de:	025c                	addi	a5,sp,260
    16e0:	0079                	c.nop	30
    16e2:	2b00                	fld	fs0,16(a4)
    16e4:	0570                	addi	a2,sp,652
    16e6:	0000                	unimp
    16e8:	00001973          	csrrw	s2,ustatus,zero
    16ec:	1714                	addi	a3,sp,928
    16ee:	0000                	unimp
    16f0:	012c                	addi	a1,sp,136
    16f2:	025a                	slli	tp,tp,0x16
    16f4:	0072                	c.slli	zero,0x1c
    16f6:	012c                	addi	a1,sp,136
    16f8:	0084025b          	0x84025b
    16fc:	012c                	addi	a1,sp,136
    16fe:	025c                	addi	a5,sp,260
    1700:	0085                	addi	ra,ra,1
    1702:	012c                	addi	a1,sp,136
    1704:	025d                	addi	tp,tp,23
    1706:	0084                	addi	s1,sp,64
    1708:	012c                	addi	a1,sp,136
    170a:	025e                	slli	tp,tp,0x17
    170c:	012c0083          	lb	ra,18(s8)
    1710:	015f 0030 782b      	0x782b0030015f
    1716:	0005                	c.nop	1
    1718:	5c00                	lw	s0,56(s0)
    171a:	3400001b          	0x3400001b
    171e:	2c000017          	auipc	zero,0x2c000
    1722:	5a01                	li	s4,-32
    1724:	8b02                	jr	s6
    1726:	2c00                	fld	fs0,24(s0)
    1728:	5b01                	li	s6,-32
    172a:	8302                	jr	t1
    172c:	2c00                	fld	fs0,24(s0)
    172e:	5c01                	li	s8,-32
    1730:	7902                	flw	fs2,32(sp)
    1732:	0000                	unimp
    1734:	0005882b          	0x5882b
    1738:	5c00                	lw	s0,56(s0)
    173a:	5400001b          	0x5400001b
    173e:	2c000017          	auipc	zero,0x2c000
    1742:	5a01                	li	s4,-32
    1744:	8202                	jr	tp
    1746:	2c00                	fld	fs0,24(s0)
    1748:	5b01                	li	s6,-32
    174a:	8302                	jr	t1
    174c:	2c00                	fld	fs0,24(s0)
    174e:	5c01                	li	s8,-32
    1750:	7902                	flw	fs2,32(sp)
    1752:	0000                	unimp
    1754:	0005902b          	0x5902b
    1758:	9000                	0x9000
    175a:	001c                	0x1c
    175c:	7400                	flw	fs0,40(s0)
    175e:	2c000017          	auipc	zero,0x2c000
    1762:	5a01                	li	s4,-32
    1764:	8602                	jr	a2
    1766:	2c00                	fld	fs0,24(s0)
    1768:	5b01                	li	s6,-32
    176a:	8502                	jr	a0
    176c:	2c00                	fld	fs0,24(s0)
    176e:	5c01                	li	s8,-32
    1770:	7902                	flw	fs2,32(sp)
    1772:	0000                	unimp
    1774:	982d                	andi	s0,s0,-21
    1776:	0005                	c.nop	1
    1778:	5c00                	lw	s0,56(s0)
    177a:	2c00001b          	0x2c00001b
    177e:	5a01                	li	s4,-32
    1780:	8602                	jr	a2
    1782:	2c00                	fld	fs0,24(s0)
    1784:	5b01                	li	s6,-32
    1786:	8302                	jr	t1
    1788:	2c00                	fld	fs0,24(s0)
    178a:	5c01                	li	s8,-32
    178c:	7902                	flw	fs2,32(sp)
    178e:	0000                	unimp
    1790:	0900                	addi	s0,sp,144
    1792:	005d                	c.nop	23
    1794:	0000                	unimp
    1796:	17a4                	addi	s1,sp,1000
    1798:	0000                	unimp
    179a:	6934                	flw	fa3,80(a0)
    179c:	0000                	unimp
    179e:	fb00                	fsw	fs0,48(a4)
    17a0:	0015                	c.nop	5
    17a2:	0000                	unimp
    17a4:	5d09                	li	s10,-30
    17a6:	0000                	unimp
    17a8:	b700                	fsd	fs0,40(a4)
    17aa:	34000017          	auipc	zero,0x34000
    17ae:	0069                	c.nop	26
    17b0:	0000                	unimp
    17b2:	1604                	addi	s1,sp,800
    17b4:	0000                	unimp
    17b6:	0900                	addi	s0,sp,144
    17b8:	005d                	c.nop	23
    17ba:	0000                	unimp
    17bc:	17ca                	slli	a5,a5,0x32
    17be:	0000                	unimp
    17c0:	6934                	flw	fa3,80(a0)
    17c2:	0000                	unimp
    17c4:	0d00                	addi	s0,sp,656
    17c6:	0016                	c.slli	zero,0x5
    17c8:	0000                	unimp
    17ca:	5d09                	li	s10,-30
    17cc:	0000                	unimp
    17ce:	dd00                	sw	s0,56(a0)
    17d0:	34000017          	auipc	zero,0x34000
    17d4:	0069                	c.nop	26
    17d6:	0000                	unimp
    17d8:	1616                	slli	a2,a2,0x25
    17da:	0000                	unimp
    17dc:	3500                	fld	fs0,40(a0)
    17de:	002a                	c.slli	zero,0xa
    17e0:	0000                	unimp
    17e2:	b301                	j	14e2 <product2+0x186>
    17e4:	6306                	flw	ft6,64(sp)
    17e6:	d200000b          	0xd200000b
    17ea:	0002                	c.slli64	zero
    17ec:	5e00                	lw	s0,56(a2)
    17ee:	0001                	nop
    17f0:	0100                	addi	s0,sp,128
    17f2:	319c                	fld	fa5,32(a1)
    17f4:	0019                	c.nop	6
    17f6:	3600                	fld	fs0,40(a2)
    17f8:	0061                	c.nop	24
    17fa:	b301                	j	14fa <product2+0x19e>
    17fc:	6315                	lui	t1,0x5
    17fe:	ac00000b          	0xac00000b
    1802:	0012                	c.slli	zero,0x4
    1804:	3700                	fld	fs0,40(a4)
    1806:	0700                	addi	s0,sp,896
    1808:	0000                	unimp
    180a:	b301                	j	150a <product2+0x1ae>
    180c:	5d1c                	lw	a5,56(a0)
    180e:	0000                	unimp
    1810:	f100                	fsw	fs0,32(a0)
    1812:	0012                	c.slli	zero,0x4
    1814:	3600                	fld	fs0,40(a2)
    1816:	0062                	c.slli	zero,0x18
    1818:	b301                	j	1518 <product2+0x1bc>
    181a:	6329                	lui	t1,0xa
    181c:	4200000b          	0x4200000b
    1820:	37000013          	li	zero,880
    1824:	00000707          	0x707
    1828:	b301                	j	1528 <product2+0x1cc>
    182a:	5d30                	lw	a2,120(a0)
    182c:	0000                	unimp
    182e:	9200                	0x9200
    1830:	37000013          	li	zero,880
    1834:	00000527          	0x527
    1838:	b301                	j	1538 <product2+0x1dc>
    183a:	5d3c                	lw	a5,120(a0)
    183c:	0000                	unimp
    183e:	c900                	sw	s0,16(a0)
    1840:	3a000013          	li	zero,928
    1844:	0649                	addi	a2,a2,18
    1846:	0000                	unimp
    1848:	b501                	j	1648 <result+0x94>
    184a:	3109                	jal	144c <product2+0xf0>
    184c:	0019                	c.nop	6
    184e:	0000                	unimp
    1850:	0014                	0x14
    1852:	3800                	fld	fs0,48(s0)
    1854:	0069                	c.nop	26
    1856:	b601                	j	1356 <_bss_start+0x252>
    1858:	5d09                	li	s10,-30
    185a:	0000                	unimp
    185c:	4400                	lw	s0,8(s0)
    185e:	0014                	0x14
    1860:	3800                	fld	fs0,48(s0)
    1862:	006a                	c.slli	zero,0x1a
    1864:	b601                	j	1364 <product2+0x8>
    1866:	00005d0b          	0x5d0b
    186a:	8400                	0x8400
    186c:	0014                	0x14
    186e:	3800                	fld	fs0,48(s0)
    1870:	b601006b          	0xb601006b
    1874:	5d0d                	li	s10,-29
    1876:	0000                	unimp
    1878:	b800                	fsd	fs0,48(s0)
    187a:	0014                	0x14
    187c:	3a00                	fld	fs0,48(a2)
    187e:	02a4                	addi	s1,sp,328
    1880:	0000                	unimp
    1882:	b701                	j	1782 <result+0x1ce>
    1884:	630a                	flw	ft6,128(sp)
    1886:	0600000b          	0x600000b
    188a:	0015                	c.nop	5
    188c:	3a00                	fld	fs0,48(a2)
    188e:	000c                	0xc
    1890:	0000                	unimp
    1892:	b801                	j	10a2 <_endtext+0x122>
    1894:	4d09                	li	s10,2
    1896:	0019                	c.nop	6
    1898:	1e00                	addi	s0,sp,816
    189a:	0015                	c.nop	5
    189c:	3a00                	fld	fs0,48(a2)
    189e:	039e                	slli	t2,t2,0x7
    18a0:	0000                	unimp
    18a2:	b901                	j	14b2 <product2+0x156>
    18a4:	6009                	c.lui	zero,0x2
    18a6:	0019                	c.nop	6
    18a8:	3e00                	fld	fs0,56(a2)
    18aa:	0015                	c.nop	5
    18ac:	3300                	fld	fs0,32(a4)
    18ae:	0069                	c.nop	26
    18b0:	0000                	unimp
    18b2:	0000158b          	0x158b
    18b6:	00006933          	or	s2,zero,zero
    18ba:	e000                	fsw	fs0,0(s0)
    18bc:	0015                	c.nop	5
    18be:	3300                	fld	fs0,32(a4)
    18c0:	0069                	c.nop	26
    18c2:	0000                	unimp
    18c4:	00001633          	sll	a2,zero,zero
    18c8:	00006933          	or	s2,zero,zero
    18cc:	6100                	flw	fs0,0(a0)
    18ce:	0016                	c.slli	zero,0x5
    18d0:	2b00                	fld	fs0,16(a4)
    18d2:	0354                	addi	a3,sp,388
    18d4:	0000                	unimp
    18d6:	1bfa                	slli	s7,s7,0x3e
    18d8:	0000                	unimp
    18da:	18f2                	slli	a7,a7,0x3c
    18dc:	0000                	unimp
    18de:	012c                	addi	a1,sp,136
    18e0:	025a                	slli	tp,tp,0x16
    18e2:	008a                	slli	ra,ra,0x2
    18e4:	012c                	addi	a1,sp,136
    18e6:	01f3035b          	0x1f3035b
    18ea:	2c5a                	fld	fs8,400(sp)
    18ec:	5c01                	li	s8,-32
    18ee:	8802                	jr	a6
    18f0:	0001                	nop
    18f2:	0003602b          	0x3602b
    18f6:	fa00                	fsw	fs0,48(a2)
    18f8:	1400001b          	0x1400001b
    18fc:	0019                	c.nop	6
    18fe:	2c00                	fld	fs0,24(s0)
    1900:	5a01                	li	s4,-32
    1902:	7202                	flw	ft4,32(sp)
    1904:	2c00                	fld	fs0,24(s0)
    1906:	5b01                	li	s6,-32
    1908:	7804                	flw	fs1,48(s0)
    190a:	7fbc                	flw	fa5,120(a5)
    190c:	2c06                	fld	fs8,64(sp)
    190e:	5c01                	li	s8,-32
    1910:	8402                	jr	s0
    1912:	0000                	unimp
    1914:	2a2d                	jal	1a4e <random_keys+0xb2>
    1916:	0004                	0x4
    1918:	9000                	0x9000
    191a:	001c                	0x1c
    191c:	2c00                	fld	fs0,24(s0)
    191e:	5a01                	li	s4,-32
    1920:	8202                	jr	tp
    1922:	2c00                	fld	fs0,24(s0)
    1924:	5b01                	li	s6,-32
    1926:	8902                	jr	s2
    1928:	2c00                	fld	fs0,24(s0)
    192a:	5c01                	li	s8,-32
    192c:	8302                	jr	t1
    192e:	0000                	unimp
    1930:	0900                	addi	s0,sp,144
    1932:	005d                	c.nop	23
    1934:	0000                	unimp
    1936:	194d                	addi	s2,s2,-13
    1938:	0000                	unimp
    193a:	6934                	flw	fa3,80(a0)
    193c:	0000                	unimp
    193e:	ad00                	fsd	fs0,24(a0)
    1940:	0018                	0x18
    1942:	3400                	fld	fs0,40(s0)
    1944:	0069                	c.nop	26
    1946:	0000                	unimp
    1948:	18b6                	slli	a7,a7,0x2d
    194a:	0000                	unimp
    194c:	0900                	addi	s0,sp,144
    194e:	005d                	c.nop	23
    1950:	0000                	unimp
    1952:	1960                	addi	s0,sp,188
    1954:	0000                	unimp
    1956:	6934                	flw	fa3,80(a0)
    1958:	0000                	unimp
    195a:	bf00                	fsd	fs0,56(a4)
    195c:	0018                	0x18
    195e:	0000                	unimp
    1960:	5d09                	li	s10,-30
    1962:	0000                	unimp
    1964:	7300                	flw	fs0,32(a4)
    1966:	0019                	c.nop	6
    1968:	3400                	fld	fs0,40(s0)
    196a:	0069                	c.nop	26
    196c:	0000                	unimp
    196e:	18c8                	addi	a0,sp,116
    1970:	0000                	unimp
    1972:	3500                	fld	fs0,40(a0)
    1974:	00000117          	auipc	sp,0x0
    1978:	6201                	0x6201
    197a:	6306                	flw	ft6,64(sp)
    197c:	0000000b          	0xb
    1980:	0001                	nop
    1982:	d200                	sw	s0,32(a2)
    1984:	0001                	nop
    1986:	0100                	addi	s0,sp,128
    1988:	1a9c                	addi	a5,sp,368
    198a:	3600001b          	0x3600001b
    198e:	0061                	c.nop	24
    1990:	6201                	0x6201
    1992:	6314                	flw	fa3,0(a4)
    1994:	b600000b          	0xb600000b
    1998:	0016                	c.slli	zero,0x5
    199a:	3700                	fld	fs0,40(a4)
    199c:	0700                	addi	s0,sp,896
    199e:	0000                	unimp
    19a0:	6201                	0x6201
    19a2:	00005d1b          	0x5d1b
    19a6:	fb00                	fsw	fs0,48(a4)
    19a8:	0016                	c.slli	zero,0x5
    19aa:	3600                	fld	fs0,40(a2)
    19ac:	0062                	c.slli	zero,0x18
    19ae:	6201                	0x6201
    19b0:	6328                	flw	fa0,64(a4)
    19b2:	3500000b          	0x3500000b
    19b6:	37000017          	auipc	zero,0x37000
    19ba:	00000707          	0x707
    19be:	6201                	0x6201
    19c0:	00005d2f          	0x5d2f
    19c4:	8500                	0x8500
    19c6:	36000017          	auipc	zero,0x36000
    19ca:	6f6d                	lui	t5,0x1b
    19cc:	0064                	addi	s1,sp,12
    19ce:	6201                	0x6201
    19d0:	00005d3b          	0x5d3b
    19d4:	bc00                	fsd	fs0,56(s0)
    19d6:	37000017          	auipc	zero,0x37000
    19da:	00000527          	0x527
    19de:	6201                	0x6201
    19e0:	5d44                	lw	s1,60(a0)
    19e2:	0000                	unimp
    19e4:	f300                	fsw	fs0,32(a4)
    19e6:	3a000017          	auipc	zero,0x3a000
    19ea:	0649                	addi	a2,a2,18
    19ec:	0000                	unimp
    19ee:	6501                	0x6501
    19f0:	1a09                	addi	s4,s4,-30
    19f2:	5100001b          	0x5100001b
    19f6:	0018                	0x18
    19f8:	3800                	fld	fs0,48(s0)
    19fa:	0069                	c.nop	26
    19fc:	6601                	0x6601
    19fe:	5d09                	li	s10,-30
    1a00:	0000                	unimp
    1a02:	af00                	fsd	fs0,24(a4)
    1a04:	0018                	0x18
    1a06:	3800                	fld	fs0,48(s0)
    1a08:	006a                	c.slli	zero,0x1a
    1a0a:	6601                	0x6601
    1a0c:	00005d0b          	0x5d0b
    1a10:	1200                	addi	s0,sp,288
    1a12:	0019                	c.nop	6
    1a14:	3800                	fld	fs0,48(s0)
    1a16:	6601006b          	0x6601006b
    1a1a:	5d0d                	li	s10,-29
    1a1c:	0000                	unimp
    1a1e:	7f00                	flw	fs0,56(a4)
    1a20:	0019                	c.nop	6
    1a22:	3a00                	fld	fs0,48(a2)
    1a24:	0294                	addi	a3,sp,320
    1a26:	0000                	unimp
    1a28:	6701                	0x6701
    1a2a:	630a                	flw	ft6,128(sp)
    1a2c:	cd00000b          	0xcd00000b
    1a30:	0019                	c.nop	6
    1a32:	3a00                	fld	fs0,48(a2)
    1a34:	000c                	0xc
    1a36:	0000                	unimp
    1a38:	6801                	0x6801
    1a3a:	3609                	jal	153c <product2+0x1e0>
    1a3c:	e500001b          	0xe500001b
    1a40:	0019                	c.nop	6
    1a42:	3a00                	fld	fs0,48(a2)
    1a44:	039e                	slli	t2,t2,0x7
    1a46:	0000                	unimp
    1a48:	6901                	0x6901
    1a4a:	4909                	li	s2,2
    1a4c:	2100001b          	0x2100001b
    1a50:	001a                	c.slli	zero,0x6
    1a52:	3300                	fld	fs0,32(a4)
    1a54:	0069                	c.nop	26
    1a56:	0000                	unimp
    1a58:	1a95                	addi	s5,s5,-27
    1a5a:	0000                	unimp
    1a5c:	00006933          	or	s2,zero,zero
    1a60:	ea00                	fsw	fs0,16(a2)
    1a62:	001a                	c.slli	zero,0x6
    1a64:	3300                	fld	fs0,32(a4)
    1a66:	0069                	c.nop	26
    1a68:	0000                	unimp
    1a6a:	00001b1b          	0x1b1b
    1a6e:	00006933          	or	s2,zero,zero
    1a72:	6000                	flw	fs0,0(s0)
    1a74:	2b00001b          	0x2b00001b
    1a78:	0192                	slli	gp,gp,0x4
    1a7a:	0000                	unimp
    1a7c:	1bfa                	slli	s7,s7,0x3e
    1a7e:	0000                	unimp
    1a80:	1a98                	addi	a4,sp,368
    1a82:	0000                	unimp
    1a84:	012c                	addi	a1,sp,136
    1a86:	025a                	slli	tp,tp,0x16
    1a88:	012c008b          	0x12c008b
    1a8c:	01f3035b          	0x1f3035b
    1a90:	2c5a                	fld	fs8,400(sp)
    1a92:	5c01                	li	s8,-32
    1a94:	8502                	jr	a0
    1a96:	0000                	unimp
    1a98:	00019a2b          	0x19a2b
    1a9c:	5c00                	lw	s0,56(s0)
    1a9e:	b800001b          	0xb800001b
    1aa2:	001a                	c.slli	zero,0x6
    1aa4:	2c00                	fld	fs0,24(s0)
    1aa6:	5a01                	li	s4,-32
    1aa8:	8b02                	jr	s6
    1aaa:	2c00                	fld	fs0,24(s0)
    1aac:	5b01                	li	s6,-32
    1aae:	8402                	jr	s0
    1ab0:	2c00                	fld	fs0,24(s0)
    1ab2:	5c01                	li	s8,-32
    1ab4:	8502                	jr	a0
    1ab6:	0000                	unimp
    1ab8:	0001a62b          	0x1a62b
    1abc:	fa00                	fsw	fs0,48(a2)
    1abe:	da00001b          	0xda00001b
    1ac2:	001a                	c.slli	zero,0x6
    1ac4:	2c00                	fld	fs0,24(s0)
    1ac6:	5a01                	li	s4,-32
    1ac8:	7202                	flw	ft4,32(sp)
    1aca:	2c00                	fld	fs0,24(s0)
    1acc:	5b01                	li	s6,-32
    1ace:	7804                	flw	fs1,48(s0)
    1ad0:	7fb4                	flw	fa3,120(a5)
    1ad2:	2c06                	fld	fs8,64(sp)
    1ad4:	5c01                	li	s8,-32
    1ad6:	8202                	jr	tp
    1ad8:	0000                	unimp
    1ada:	0001ae2b          	0x1ae2b
    1ade:	5c00                	lw	s0,56(s0)
    1ae0:	fa00001b          	0xfa00001b
    1ae4:	001a                	c.slli	zero,0x6
    1ae6:	2c00                	fld	fs0,24(s0)
    1ae8:	5a01                	li	s4,-32
    1aea:	7202                	flw	ft4,32(sp)
    1aec:	2c00                	fld	fs0,24(s0)
    1aee:	5b01                	li	s6,-32
    1af0:	8402                	jr	s0
    1af2:	2c00                	fld	fs0,24(s0)
    1af4:	5c01                	li	s8,-32
    1af6:	8202                	jr	tp
    1af8:	0000                	unimp
    1afa:	1c2d                	addi	s8,s8,-21
    1afc:	0002                	c.slli64	zero
    1afe:	5c00                	lw	s0,56(s0)
    1b00:	2c00001b          	0x2c00001b
    1b04:	5a01                	li	s4,-32
    1b06:	0305                	addi	t1,t1,1
    1b08:	1104                	addi	s1,sp,160
    1b0a:	0000                	unimp
    1b0c:	012c                	addi	a1,sp,136
    1b0e:	0084025b          	0x84025b
    1b12:	012c                	addi	a1,sp,136
    1b14:	025c                	addi	a5,sp,260
    1b16:	0089                	addi	ra,ra,2
    1b18:	0000                	unimp
    1b1a:	5d09                	li	s10,-30
    1b1c:	0000                	unimp
    1b1e:	3600                	fld	fs0,40(a2)
    1b20:	3400001b          	0x3400001b
    1b24:	0069                	c.nop	26
    1b26:	0000                	unimp
    1b28:	00001a53          	fadd.s	fs4,ft0,ft0,rtz
    1b2c:	6934                	flw	fa3,80(a0)
    1b2e:	0000                	unimp
    1b30:	5c00                	lw	s0,56(s0)
    1b32:	001a                	c.slli	zero,0x6
    1b34:	0000                	unimp
    1b36:	5d09                	li	s10,-30
    1b38:	0000                	unimp
    1b3a:	4900                	lw	s0,16(a0)
    1b3c:	3400001b          	0x3400001b
    1b40:	0069                	c.nop	26
    1b42:	0000                	unimp
    1b44:	1a65                	addi	s4,s4,-7
    1b46:	0000                	unimp
    1b48:	0900                	addi	s0,sp,144
    1b4a:	005d                	c.nop	23
    1b4c:	0000                	unimp
    1b4e:	1b5c                	addi	a5,sp,436
    1b50:	0000                	unimp
    1b52:	6934                	flw	fa3,80(a0)
    1b54:	0000                	unimp
    1b56:	6e00                	flw	fs0,24(a2)
    1b58:	001a                	c.slli	zero,0x6
    1b5a:	0000                	unimp
    1b5c:	00057f3b          	0x57f3b
    1b60:	0100                	addi	s0,sp,128
    1b62:	0651                	addi	a2,a2,20
    1b64:	00e2                	slli	ra,ra,0x18
    1b66:	0000                	unimp
    1b68:	001e                	c.slli	zero,0x7
    1b6a:	0000                	unimp
    1b6c:	9c01                	0x9c01
    1b6e:	00001bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rtz
    1b72:	613c                	flw	fa5,64(a0)
    1b74:	0031                	c.nop	12
    1b76:	5101                	li	sp,-32
    1b78:	6315                	lui	t1,0x5
    1b7a:	0100000b          	0x100000b
    1b7e:	3c5a                	fld	fs8,432(sp)
    1b80:	6f6d                	lui	t5,0x1b
    1b82:	0064                	addi	s1,sp,12
    1b84:	5101                	li	sp,-32
    1b86:	5d1d                	li	s10,-25
    1b88:	0000                	unimp
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	055a375b          	0x55a375b
    1b90:	0000                	unimp
    1b92:	5101                	li	sp,-32
    1b94:	5d25                	li	s10,-23
    1b96:	0000                	unimp
    1b98:	b500                	fsd	fs0,40(a0)
    1b9a:	3800001b          	0x3800001b
    1b9e:	0069                	c.nop	26
    1ba0:	5601                	li	a2,-32
    1ba2:	5d05                	li	s10,-31
    1ba4:	0000                	unimp
    1ba6:	d600                	sw	s0,40(a2)
    1ba8:	3d00001b          	0x3d00001b
    1bac:	00001bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rtz
    1bb0:	00e8                	addi	a0,sp,76
    1bb2:	0000                	unimp
    1bb4:	0000                	unimp
    1bb6:	0000                	unimp
    1bb8:	5901                	li	s2,-32
    1bba:	3e09                	jal	16cc <result+0x118>
    1bbc:	00001be7          	0x1be7
    1bc0:	1bf5                	addi	s7,s7,-3
    1bc2:	0000                	unimp
    1bc4:	dc3e                	sw	a5,56(sp)
    1bc6:	0800001b          	0x800001b
    1bca:	001c                	0x1c
    1bcc:	0000                	unimp
    1bce:	3f00                	fld	fs0,56(a4)
    1bd0:	010d                	addi	sp,sp,3
    1bd2:	0000                	unimp
    1bd4:	4401                	li	s0,0
    1bd6:	0106                	slli	sp,sp,0x1
    1bd8:	1bf4                	addi	a3,sp,508
    1bda:	0000                	unimp
    1bdc:	6140                	flw	fs0,4(a0)
    1bde:	0031                	c.nop	12
    1be0:	4401                	li	s0,0
    1be2:	f41e                	fsw	ft7,40(sp)
    1be4:	4000001b          	0x4000001b
    1be8:	6f6d                	lui	t5,0x1b
    1bea:	0064                	addi	s1,sp,12
    1bec:	4401                	li	s0,0
    1bee:	0000692f          	0x692f
    1bf2:	0000                	unimp
    1bf4:	0410                	addi	a2,sp,512
    1bf6:	0069                	c.nop	26
    1bf8:	0000                	unimp
    1bfa:	0003ca3b          	0x3ca3b
    1bfe:	0100                	addi	s0,sp,128
    1c00:	063d                	addi	a2,a2,15
    1c02:	00ba                	slli	ra,ra,0xe
    1c04:	0000                	unimp
    1c06:	0022                	c.slli	zero,0x8
    1c08:	0000                	unimp
    1c0a:	9c01                	0x9c01
    1c0c:	1c6c                	addi	a1,sp,572
    1c0e:	0000                	unimp
    1c10:	613c                	flw	fa5,64(a0)
    1c12:	0031                	c.nop	12
    1c14:	3d01                	jal	1a24 <random_keys+0x88>
    1c16:	6315                	lui	t1,0x5
    1c18:	0100000b          	0x100000b
    1c1c:	3c5a                	fld	fs8,432(sp)
    1c1e:	3261                	jal	15a6 <product2+0x24a>
    1c20:	0100                	addi	s0,sp,128
    1c22:	1d3d                	addi	s10,s10,-17
    1c24:	00000b63          	beqz	zero,1c3a <random_keys+0x29e>
    1c28:	5b01                	li	s6,-32
    1c2a:	00055a37          	lui	s4,0x55
    1c2e:	0100                	addi	s0,sp,128
    1c30:	243d                	jal	1e5e <random_keys+0x4c2>
    1c32:	005d                	c.nop	23
    1c34:	0000                	unimp
    1c36:	1c22                	slli	s8,s8,0x28
    1c38:	0000                	unimp
    1c3a:	6938                	flw	fa4,80(a0)
    1c3c:	0100                	addi	s0,sp,128
    1c3e:	053e                	slli	a0,a0,0xf
    1c40:	005d                	c.nop	23
    1c42:	0000                	unimp
    1c44:	00001c43          	fmadd.s	fs8,ft0,ft0,ft0,rtz
    1c48:	6c41                	lui	s8,0x10
    1c4a:	001c                	0x1c
    1c4c:	ce00                	sw	s0,24(a2)
    1c4e:	0000                	unimp
    1c50:	0a00                	addi	s0,sp,272
    1c52:	0000                	unimp
    1c54:	0100                	addi	s0,sp,128
    1c56:	0940                	addi	s0,sp,148
    1c58:	843e                	mv	s0,a5
    1c5a:	001c                	0x1c
    1c5c:	6200                	flw	fs0,0(a2)
    1c5e:	001c                	0x1c
    1c60:	3e00                	fld	fs0,56(a2)
    1c62:	1c79                	addi	s8,s8,-2
    1c64:	0000                	unimp
    1c66:	1c85                	addi	s9,s9,-31
    1c68:	0000                	unimp
    1c6a:	0000                	unimp
    1c6c:	0006633f 062b0100 	0x62b01000006633f
    1c74:	9001                	srli	s0,s0,0x20
    1c76:	001c                	0x1c
    1c78:	4000                	lw	s0,0(s0)
    1c7a:	3161                	jal	1902 <ti_2+0xf6>
    1c7c:	0100                	addi	s0,sp,128
    1c7e:	1bf41e2b          	0x1bf41e2b
    1c82:	0000                	unimp
    1c84:	6140                	flw	fs0,4(a0)
    1c86:	0032                	c.slli	zero,0xc
    1c88:	2b01                	jal	2198 <_min_stack+0x198>
    1c8a:	f430                	fsw	fa2,104(s0)
    1c8c:	0000001b          	0x1b
    1c90:	0005753b          	0x5753b
    1c94:	0100                	addi	s0,sp,128
    1c96:	00920623          	sb	s1,12(tp) # c <__DYNAMIC+0xc>
    1c9a:	0000                	unimp
    1c9c:	0022                	c.slli	zero,0x8
    1c9e:	0000                	unimp
    1ca0:	9c01                	0x9c01
    1ca2:	1d02                	slli	s10,s10,0x20
    1ca4:	0000                	unimp
    1ca6:	613c                	flw	fa5,64(a0)
    1ca8:	0031                	c.nop	12
    1caa:	2301                	jal	21aa <_min_stack+0x1aa>
    1cac:	6315                	lui	t1,0x5
    1cae:	0100000b          	0x100000b
    1cb2:	3c5a                	fld	fs8,432(sp)
    1cb4:	3261                	jal	163c <result+0x88>
    1cb6:	0100                	addi	s0,sp,128
    1cb8:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    1cbc:	0000                	unimp
    1cbe:	5b01                	li	s6,-32
    1cc0:	00055a37          	lui	s4,0x55
    1cc4:	0100                	addi	s0,sp,128
    1cc6:	005d2623          	sw	t0,12(s10) # 6800c <_stack_start+0x5800c>
    1cca:	0000                	unimp
    1ccc:	1ca8                	addi	a0,sp,632
    1cce:	0000                	unimp
    1cd0:	6938                	flw	fa4,80(a0)
    1cd2:	0100                	addi	s0,sp,128
    1cd4:	0524                	addi	s1,sp,648
    1cd6:	005d                	c.nop	23
    1cd8:	0000                	unimp
    1cda:	1cc9                	addi	s9,s9,-14
    1cdc:	0000                	unimp
    1cde:	0241                	addi	tp,tp,16
    1ce0:	001d                	c.nop	7
    1ce2:	a600                	fsd	fs0,8(a2)
    1ce4:	0000                	unimp
    1ce6:	0a00                	addi	s0,sp,272
    1ce8:	0000                	unimp
    1cea:	0100                	addi	s0,sp,128
    1cec:	0926                	slli	s2,s2,0x9
    1cee:	1a3e                	slli	s4,s4,0x2f
    1cf0:	001d                	c.nop	7
    1cf2:	e800                	fsw	fs0,16(s0)
    1cf4:	001c                	0x1c
    1cf6:	3e00                	fld	fs0,56(a2)
    1cf8:	00001d0f          	0x1d0f
    1cfc:	00001d0b          	0x1d0b
    1d00:	0000                	unimp
    1d02:	00003a3f 060f0100 	0x60f010000003a3f
    1d0a:	2601                	jal	200a <_min_stack+0xa>
    1d0c:	001d                	c.nop	7
    1d0e:	4000                	lw	s0,0(s0)
    1d10:	3161                	jal	1998 <ti_2+0x18c>
    1d12:	0100                	addi	s0,sp,128
    1d14:	1bf41e0f          	0x1bf41e0f
    1d18:	0000                	unimp
    1d1a:	6140                	flw	fs0,4(a0)
    1d1c:	0032                	c.slli	zero,0xc
    1d1e:	0f01                	addi	t5,t5,0
    1d20:	f430                	fsw	fa2,104(s0)
    1d22:	0000001b          	0x1b
    1d26:	0242                	slli	tp,tp,0x10
    1d28:	001d                	c.nop	7
    1d2a:	8c00                	0x8c00
    1d2c:	0000                	unimp
    1d2e:	0600                	addi	s0,sp,768
    1d30:	0000                	unimp
    1d32:	0100                	addi	s0,sp,128
    1d34:	4a9c                	lw	a5,16(a3)
    1d36:	001d                	c.nop	7
    1d38:	3e00                	fld	fs0,56(a2)
    1d3a:	00001d0f          	0x1d0f
    1d3e:	1d2e                	slli	s10,s10,0x2b
    1d40:	0000                	unimp
    1d42:	001d1a43          	fmadd.s	fs4,fs10,ft1,ft0,rtz
    1d46:	0100                	addi	s0,sp,128
    1d48:	6c42005b          	0x6c42005b
    1d4c:	001c                	0x1c
    1d4e:	b400                	fsd	fs0,40(s0)
    1d50:	0000                	unimp
    1d52:	0600                	addi	s0,sp,768
    1d54:	0000                	unimp
    1d56:	0100                	addi	s0,sp,128
    1d58:	6e9c                	flw	fa5,24(a3)
    1d5a:	001d                	c.nop	7
    1d5c:	3e00                	fld	fs0,56(a2)
    1d5e:	1c79                	addi	s8,s8,-2
    1d60:	0000                	unimp
    1d62:	1d41                	addi	s10,s10,-16
    1d64:	0000                	unimp
    1d66:	001c8443          	fmadd.s	fs0,fs9,ft1,ft0,rne
    1d6a:	0100                	addi	s0,sp,128
    1d6c:	cf42005b          	0xcf42005b
    1d70:	dc00001b          	0xdc00001b
    1d74:	0000                	unimp
    1d76:	0600                	addi	s0,sp,768
    1d78:	0000                	unimp
    1d7a:	0100                	addi	s0,sp,128
    1d7c:	929c                	0x929c
    1d7e:	001d                	c.nop	7
    1d80:	3e00                	fld	fs0,56(a2)
    1d82:	1bdc                	addi	a5,sp,500
    1d84:	0000                	unimp
    1d86:	1d54                	addi	a3,sp,692
    1d88:	0000                	unimp
    1d8a:	001be743          	fmadd.s	fa4,fs7,ft1,ft0,unknown
    1d8e:	0100                	addi	s0,sp,128
    1d90:	5d44005b          	0x5d44005b
    1d94:	53000003          	lb	zero,1328(zero) # 530 <polydiv+0x100>
    1d98:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1d9c:	4400                	lw	s0,8(s0)
    1d9e:	006e                	c.slli	zero,0x1b
    1da0:	0000                	unimp
    1da2:	0064                	addi	s1,sp,12
    1da4:	0000                	unimp
    1da6:	1e000007          	0x1e000007
    1daa:	0000                	unimp
    1dac:	0200                	addi	s0,sp,256
    1dae:	0300                	addi	s0,sp,384
    1db0:	0004                	0x4
    1db2:	0400                	addi	s0,sp,512
    1db4:	5801                	li	a6,-32
    1db6:	0020                	addi	s0,sp,8
    1db8:	3000                	fld	fs0,32(s0)
    1dba:	0000                	unimp
    1dbc:	0e00                	addi	s0,sp,784
    1dbe:	e1000007          	0xe1000007
    1dc2:	0001                	nop
    1dc4:	1500                	addi	s0,sp,672
    1dc6:	01000007          	0x1000007
    1dca:	80              	Address 0x0000000000001dca is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <ext_euclid+0x18>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 550b3 <_stack_start+0x450b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  cc:	1349                	addi	t1,t1,-14
    asm volatile(
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
    for(i=0;i<(length/3);i++) {
  d8:	390b3b0b          	0x390b3b0b
    asm volatile(
  dc:	0013010b          	0x13010b
}
  e0:	1200                	addi	s0,sp,288
    for(i=0;i<(length/3);i++) {
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
    asm volatile(
  e8:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
}
  f0:	0000                	unimp
    asm volatile(
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
    for(i=0;i<(length/3);i++) {
  fc:	13491927          	0x13491927
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    int line[size_b][size_a + size_b];
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
    int line[size_b][size_a + size_b];
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
 11a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	0013010b          	0x13010b
    int pola[size_a];
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
    int pola[size_a];
 13e:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    int pola[size_a];
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
    int polb[size_b];
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 156:	0b01131b          	0xb01131b
    int pola[size_a];
 15a:	3b0b3a0b          	0x3b0b3a0b
    int line[size_b][size_a + size_b];
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
            line[i][j] = 0;
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
    for (i = 0; i < size_b; ++i){
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
            product[j] = 0;
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
    for (i = 0; i < size_b; ++i){
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
    array_equ(pola,a,size_a);
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    array_mod(pola,mod,size_a);
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    array_equ(polb,b,size_b);
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    array_mod(polb,mod,size_b);
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
    if(star_mult == 1){
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
        for (j = size_b -1; j >= 0; j = j-1){
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x52>
            for (k = size_a-1; k >= 0; k = k-1 ){
 1d0:	00052f13          	slti	t5,a0,0
            product[j] = 0;
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
            line[i][j] = 0;
 1d8:	0b3a0e03          	lb	t3,179(s4)
            product[j] = 0;
 1dc:	0b390b3b          	0xb390b3b
        for(j = 0; j < size_a + size_b -1; ++j){
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
    for (i = 0; i < size_b; ++i){
 1ea:	3f01                	jal	fa <array_mod+0x18>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	39053b0b          	0x39053b0b
    if(star_mult == 1){
 1f4:	1113490b          	0x1113490b
        for (j = size_b -1; j >= 0; j = j-1){
 1f8:	1201                	addi	tp,tp,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	4006                	0x4006
    for (i = 0; i < size_b; ++i){
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
    for(j = 0; j < size_a + size_b -1; ++j){
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
    array_mod(product,mod,(size_a+size_b-1));
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
}
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
        for (j = size_b -1; j >= 0; j = j-1){
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
            for (k = size_a-1; k >= 0; k = k-1 ){
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	12011113          	0x12011113
            line[i][j] = line[i][j] % mod;
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
    for (i = 0; i < size_b; ++i){
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 2ac:	0213490b          	0x213490b
            product[j] += line[i][j];
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
        for(i = 0; i < size_b; ++i){
 2b6:	0b3a0e03          	lb	t3,179(s4)
            product[j] += line[i][j];
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
    for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
        for(i = 0; i < size_b; ++i){
 2ce:	0213490b          	0x213490b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d2:	0018                	0x18
    int line[size_b][size_a + size_b];
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
    int line[size_b][size_a + size_b];
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
    int line[size_b][size_a + size_b];
 300:	01194297          	auipc	t0,0x1194
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 304:	36000013          	li	zero,864
    int line[size_b][size_a + size_b];
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
    int pola[size_a];
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 314:	1702                	slli	a4,a4,0x20
    int pola[size_a];
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
    int polb[size_b];
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 326:	38000017          	auipc	zero,0x38000
    int line[size_b][size_a + size_b];
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
    int pola[size_a];
 330:	0b390b3b          	0xb390b3b
    int polb[size_b];
 334:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_b; ++i){
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
            product2[j] = 0;
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_b; ++i){
 344:	0013490b          	0x13490b
    array_equ(pola,a,size_a);
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
 350:	0b390b3b          	0xb390b3b
    array_equ(polb,b,size_b);
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
    if(star_mult == 1){
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
 366:	1119270b          	0x1119270b
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
        for (j = size_b -1; j >= 0; j = j-1){
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
            product2[j] = 0;
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
            line[i][j] = 0;
 380:	0213490b          	0x213490b
            product2[j] = 0;
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
 38c:	0152                	slli	sp,sp,0x14
 38e:	1755                	addi	a4,a4,-11
    for (i = 0; i < size_b; ++i){
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
        for(j = 0; j < size_a + size_b -1; ++j){
 398:	053e                	slli	a0,a0,0xf
 39a:	3100                	fld	fs0,32(a0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 39c:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
 3a0:	3f00                	fld	fs0,56(a4)
 3a2:	012e                	slli	sp,sp,0xb
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	0b39                	addi	s6,s6,14
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ae:	0b201927          	0xb201927
 3b2:	1301                	addi	t1,t1,-32
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
        for (j = size_b -1; j >= 0; j = j-1){
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	0013490b          	0x13490b
        array_add(product2,line[i],size_a+size_b-1);
 3c4:	4100                	lw	s0,0(a0)
 3c6:	011d                	addi	sp,sp,7
 3c8:	1331                	addi	t1,t1,-20
 3ca:	0111                	addi	sp,sp,4
    for(i=0;i<size_b;++i){
 3cc:	0612                	slli	a2,a2,0x4
 3ce:	0b58                	addi	a4,sp,404
}
 3d0:	0b59                	addi	s6,s6,22
 3d2:	00000b57          	0xb57
 3d6:	2e42                	fld	ft8,16(sp)
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
 3da:	12011113          	0x12011113
 3de:	4006                	0x4006
 3e0:	9718                	0x9718
 3e2:	1942                	slli	s2,s2,0x30
 3e4:	1301                	addi	t1,t1,-32
 3e6:	0000                	unimp
 3e8:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
 3ec:	00180213          	addi	tp,a6,1 # fffe0001 <_stack_start+0xfffd0001>
 3f0:	4400                	lw	s0,8(s0)
 3f2:	002e                	c.slli	zero,0xb
 3f4:	193c193f 0e030e6e 	0xe030e6e193c193f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3fc:	0b3a                	slli	s6,s6,0xe
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fe:	00000b3b          	0xb3b
 402:	0100                	addi	s0,sp,128
 404:	0011                	c.nop	4
 406:	0610                	addi	a2,sp,768
 408:	0655                	addi	a2,a2,21
 40a:	0e1b0e03          	lb	t3,225(s6)
            for (k = size_a-1; k >= 0; k = k-1 ){
 40e:	0e25                	addi	t3,t3,9
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 410:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0f08                	addi	a0,sp,912
       2:	0000                	unimp
       4:	0f1c                	addi	a5,sp,912
       6:	0000                	unimp
       8:	0001                	nop
       a:	1c5a                	slli	s8,s8,0x36
       c:	1d00000f          	0x1d00000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0f1e                	slli	t5,t5,0x7
      20:	0000                	unimp
      22:	0f5e                	slli	t5,t5,0x17
      24:	0000                	unimp
      26:	0001                	nop
      28:	645a                	flw	fs0,148(sp)
      2a:	6e00000f          	0x6e00000f
      2e:	0100000f          	fence	w,unknown
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0e7c                	addi	a5,sp,796
      3e:	0000                	unimp
      40:	0ed0                	addi	a2,sp,852
      42:	0000                	unimp
      44:	0001                	nop
      46:	d05a                	sw	s6,32(sp)
      48:	000e                	c.slli	zero,0x3
      4a:	f800                	fsw	fs0,48(s0)
      4c:	000e                	c.slli	zero,0x3
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	5e00                	lw	s0,56(a2)
      5e:	000e                	c.slli	zero,0x3
      60:	b200                	fsd	fs0,32(a2)
      62:	000e                	c.slli	zero,0x3
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0eb2                	slli	t4,t4,0xc
      6c:	0000                	unimp
      6e:	0ebc                	addi	a5,sp,856
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0ebc                	addi	a5,sp,856
      78:	0000                	unimp
      7a:	00000efb          	0xefb
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	00000efb          	0xefb
  jal x0, default_exc_handler
      86:	0f62                	slli	t5,t5,0x18
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	6279                	lui	tp,0x1e
}
      90:	6400000f          	0x6400000f
    for(i=0;i<(length/3);i++) {
      94:	0300000f          	fence	rw,unknown
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	0f64                	addi	s1,sp,924
      9e:	0000                	unimp
}
      a0:	0f6e                	slli	t5,t5,0x1b
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	5e00                	lw	s0,56(a2)
      b2:	000e                	c.slli	zero,0x3
    asm volatile(
      b4:	8c00                	0x8c00
      b6:	000e                	c.slli	zero,0x3
}
      b8:	0300                	addi	s0,sp,384
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0e8c                	addi	a1,sp,848
      c0:	0000                	unimp
      c2:	0e8e                	slli	t4,t4,0x3
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	0e8e                	slli	t4,t4,0x3
      cc:	0000                	unimp
    asm volatile(
      ce:	0f14                	addi	a3,sp,912
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	147a                	slli	s0,s0,0x3e
    for(i=0;i<(length/3);i++) {
      d8:	1d00000f          	0x1d00000f
    asm volatile(
      dc:	0200000f          	fence	r,unknown
}
      e0:	7d00                	flw	fs0,56(a0)
    for(i=0;i<(length/3);i++) {
      e2:	1d00                	addi	s0,sp,688
      e4:	6200000f          	0x6200000f
    asm volatile(
      e8:	0300000f          	fence	rw,unknown
    for(i=0;i<(length/3);i++) {
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
}
      f0:	0f62                	slli	t5,t5,0x18
    asm volatile(
      f2:	0000                	unimp
      f4:	0f64                	addi	s1,sp,924
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # 1df07 <_stack_start+0xdf07>
    for(i=0;i<(length/3);i++) {
      fc:	647a                	flw	fs0,156(sp)
      fe:	6e00000f          	0x6e00000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     102:	0300000f          	fence	rw,unknown
     106:	9100                	0x9100
    int line[size_b][size_a + size_b];
     108:	7af0                	flw	fa2,116(a3)
	...
     112:	0e5e                	slli	t3,t3,0x17
     114:	0000                	unimp
     116:	0e98                	addi	a4,sp,848
     118:	0000                	unimp
     11a:	c4910003          	lb	zero,-951(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	987c                	0x987c
     120:	000e                	c.slli	zero,0x3
    int pola[size_a];
     122:	a200                	fsd	fs0,0(a2)
     124:	000e                	c.slli	zero,0x3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     126:	0200                	addi	s0,sp,256
     128:	7e00                	flw	fs0,56(a2)
     12a:	a200                	fsd	fs0,0(a2)
     12c:	000e                	c.slli	zero,0x3
     12e:	5c00                	lw	s0,56(s0)
     130:	0200000f          	fence	r,unknown
     134:	8200                	0x8200
     136:	5c00                	lw	s0,56(s0)
     138:	6200000f          	0x6200000f
    int pola[size_a];
     13c:	0300000f          	fence	rw,unknown
    int line[size_b][size_a + size_b];
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	0f62                	slli	t5,t5,0x18
    int pola[size_a];
     146:	0000                	unimp
     148:	0f64                	addi	s1,sp,924
    int polb[size_b];
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    int pola[size_a];
     150:	647c                	flw	fa5,76(s0)
    int polb[size_b];
     152:	6e00000f          	0x6e00000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	0200000f          	fence	r,unknown
    int pola[size_a];
     15a:	8200                	0x8200
	...
            line[i][j] = 0;
     164:	5e00                	lw	s0,56(a2)
     166:	000e                	c.slli	zero,0x3
     168:	cc00                	sw	s0,24(s0)
    for (i = 0; i < size_b; ++i){
     16a:	000e                	c.slli	zero,0x3
     16c:	0300                	addi	s0,sp,384
            product[j] = 0;
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	0ecc                	addi	a1,sp,852
     174:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     176:	0ed2                	slli	t4,t4,0x14
     178:	0000                	unimp
    array_equ(pola,a,size_a);
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	0ed2                	slli	t4,t4,0x14
     180:	0000                	unimp
     182:	00000efb          	0xefb
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	00000efb          	0xefb
     18e:	0f62                	slli	t5,t5,0x18
     190:	0000                	unimp
    array_mod(pola,mod,size_a);
     192:	98910003          	lb	zero,-1655(sp)
     196:	627e                	flw	ft4,220(sp)
     198:	6400000f          	0x6400000f
    array_equ(polb,b,size_b);
     19c:	0300000f          	fence	rw,unknown
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	0f64                	addi	s1,sp,924
    array_mod(polb,mod,size_b);
     1a6:	0000                	unimp
     1a8:	0f6e                	slli	t5,t5,0x1b
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
    if(star_mult == 1){
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	8000                	0x8000
     1ba:	000e                	c.slli	zero,0x3
     1bc:	8400                	0x8400
     1be:	000e                	c.slli	zero,0x3
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	289f 000f 3200      	0x3200000f289f
        for (j = size_b -1; j >= 0; j = j-1){
     1ca:	0200000f          	fence	r,unknown
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
            product[j] = 0;
     1d6:	0000                	unimp
            line[i][j] = 0;
     1d8:	7600                	flw	fs0,40(a2)
     1da:	8e00000b          	0x8e00000b
            product[j] = 0;
     1de:	0100000b          	0x100000b
        for(j = 0; j < size_a + size_b -1; ++j){
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0b8e                	slli	s7,s7,0x3
     1e6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1e8:	0bf2                	slli	s7,s7,0x1c
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	f258                	fsw	fa4,36(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	fe00000b          	0xfe00000b
    if(star_mult == 1){
     1f4:	0300000b          	0x300000b
        for (j = size_b -1; j >= 0; j = j-1){
     1f8:	8600                	0x8600
        for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	9f7f                	0x9f7f
    for (i = 0; i < size_b; ++i){
     1fc:	0bfe                	slli	s7,s7,0x1f
     1fe:	0000                	unimp
     200:	0c04                	addi	s1,sp,528
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
    for(j = 0; j < size_a + size_b -1; ++j){
     20a:	0c04                	addi	s1,sp,528
     20c:	0000                	unimp
    array_mod(product,mod,(size_a+size_b-1));
     20e:	0c3a                	slli	s8,s8,0xe
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
}
     21c:	7600                	flw	fs0,40(a2)
     21e:	9800000b          	0x9800000b
     222:	0100000b          	0x100000b
     226:	5b00                	lw	s0,48(a4)
     228:	0b98                	addi	a4,sp,464
     22a:	0000                	unimp
     22c:	0bfc                	addi	a5,sp,476
     22e:	0000                	unimp
     230:	0001                	nop
     232:	fc65                	bnez	s0,22a <polymult+0x12a>
     234:	0400000b          	0x400000b
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	049f 000c 3a00      	0x3a00000c049f
                line[size_b-1-j][k] = pola[k]*polb[j];
     246:	000c                	0xc
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0b76                	slli	s6,s6,0x1d
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     258:	0b90                	addi	a2,sp,464
     25a:	0000                	unimp
     25c:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	905c                	0x905c
     260:	f600000b          	0xf600000b
        for (j = size_b -1; j >= 0; j = j-1){
     264:	0100000b          	0x100000b
     268:	6200                	flw	fs0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     26a:	0bf6                	slli	s7,s7,0x1d
     26c:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26e:	0c04                	addi	s1,sp,528
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0c04                	addi	s1,sp,528
     27a:	0000                	unimp
     27c:	0c3a                	slli	s8,s8,0xe
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	0000                	unimp
     288:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	7600                	flw	fs0,40(a2)
     28c:	9200000b          	0x9200000b
     290:	0100000b          	0x100000b
        for(j = 0; j < size_a + size_b -1; ++j){
     294:	5d00                	lw	s0,56(a0)
     296:	0b92                	slli	s7,s7,0x4
            line[i][j] = line[i][j] % mod;
     298:	0000                	unimp
     29a:	00000bab          	0xbab
     29e:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	ab5a                	fsd	fs6,400(sp)
     2a2:	3a00000b          	0x3a00000b
    for (i = 0; i < size_b; ++i){
     2a6:	000c                	0xc
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
            product[j] += line[i][j];
     2b4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2b6:	7600                	flw	fs0,40(a2)
            product[j] += line[i][j];
     2b8:	9a00000b          	0x9a00000b
     2bc:	0100000b          	0x100000b
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0b9a                	slli	s7,s7,0x6
        for(i = 0; i < size_b; ++i){
     2c4:	0000                	unimp
     2c6:	0c00                	addi	s0,sp,528
    for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000c0067          	jr	s8 # 10000 <_stack_start>
        for(i = 0; i < size_b; ++i){
     2d0:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d2:	000c                	0xc
    int line[size_b][size_a + size_b];
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	5e01                	li	t3,-32
     2da:	049f 000c 3a00      	0x3a00000c049f
     2e0:	000c                	0xc
    int line[size_b][size_a + size_b];
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	0b76                	slli	s6,s6,0x1d
     2f0:	0000                	unimp
     2f2:	00000bab          	0xbab
     2f6:	0001                	nop
     2f8:	ab5f 000b 3a00      	0x3a00000bab5f
     2fe:	000c                	0xc
    int line[size_b][size_a + size_b];
     300:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
    int line[size_b][size_a + size_b];
     306:	009f 0000 0000      	0x9f
    int pola[size_a];
     30c:	0000                	unimp
     30e:	7600                	flw	fs0,40(a2)
     310:	ab00000b          	0xab00000b
    int line[size_b][size_a + size_b];
     314:	0100000b          	0x100000b
    int pola[size_a];
     318:	6000                	flw	fs0,0(s0)
    int polb[size_b];
     31a:	00000bab          	0xbab
     31e:	0bfa                	slli	s7,s7,0x1e
    int pola[size_a];
     320:	0000                	unimp
    int polb[size_b];
     322:	0001                	nop
     324:	fa64                	fsw	fs1,116(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     326:	0400000b          	0x400000b
    int line[size_b][size_a + size_b];
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     32e:	f300                	fsw	fs0,32(a4)
    int pola[size_a];
     330:	6001                	0x6001
     332:	049f 000c 3a00      	0x3a00000c049f
    for (i = 0; i < size_b; ++i){
     338:	000c                	0xc
     33a:	0100                	addi	s0,sp,128
            product2[j] = 0;
     33c:	6400                	flw	fs0,8(s0)
	...
    for (i = 0; i < size_b; ++i){
     346:	0bac                	addi	a1,sp,472
    array_equ(pola,a,size_a);
     348:	0000                	unimp
     34a:	0bb9                	addi	s7,s7,14
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
    array_equ(polb,b,size_b);
     354:	0000                	unimp
     356:	0000                	unimp
     358:	bc00                	fsd	fs0,56(s0)
     35a:	da00000b          	0xda00000b
     35e:	0100000b          	0x100000b
    if(star_mult == 1){
     362:	5a00                	lw	s0,48(a2)
     364:	0bda                	slli	s7,s7,0x16
     366:	0000                	unimp
     368:	0bdd                	addi	s7,s7,23
     36a:	0000                	unimp
     36c:	0001                	nop
     36e:	045c                	addi	a5,sp,516
     370:	000c                	0xc
        for (j = size_b -1; j >= 0; j = j-1){
     372:	2800                	fld	fs0,16(s0)
     374:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
            line[i][j] = 0;
     382:	0bde                	slli	s7,s7,0x17
            product2[j] = 0;
     384:	0000                	unimp
     386:	00000be7          	jalr	s7,zero # 0 <__DYNAMIC>
        for(j = 0; j < size_a + size_b -1; ++j){
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     390:	0000                	unimp
     392:	0000                	unimp
     394:	e800                	fsw	fs0,16(s0)
     396:	0400000b          	0x400000b
        for(j = 0; j < size_a + size_b -1; ++j){
     39a:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0c28                	addi	a0,sp,536
     3a2:	0000                	unimp
     3a4:	0c3a                	slli	s8,s8,0xe
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ac:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	bc00                	fsd	fs0,56(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	c200000b          	0xc200000b
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	0100000b          	0x100000b
     3bc:	5900                	lw	s0,48(a0)
     3be:	0bc2                	slli	s7,s7,0x10
     3c0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0bce                	slli	s7,s7,0x13
        array_add(product2,line[i],size_a+size_b-1);
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	ce5d                	beqz	a2,486 <polydiv+0x56>
     3ca:	d400000b          	0xd400000b
    for(i=0;i<size_b;++i){
     3ce:	0100000b          	0x100000b
}
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0be8                	addi	a0,sp,476
     3d6:	0000                	unimp
     3d8:	0bf4                	addi	a3,sp,476
     3da:	0000                	unimp
     3dc:	0001                	nop
     3de:	0459                	addi	s0,s0,22
     3e0:	000c                	0xc
     3e2:	0e00                	addi	s0,sp,784
     3e4:	000c                	0xc
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0c0e                	slli	s8,s8,0x3
     3ec:	0000                	unimp
     3ee:	0c14                	addi	a3,sp,528
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	149f 000c 1600      	0x1600000c149f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3fc:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0c16                	slli	s8,s8,0x5
     404:	0000                	unimp
     406:	0c28                	addi	a0,sp,536
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	285e                	fld	fa6,464(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     410:	3200                	fld	fs0,32(a2)
     412:	000c                	0xc
     414:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	5900                	lw	s0,48(a0)
     418:	0c32                	slli	s8,s8,0xc
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0000                	unimp
     41c:	0c38                	addi	a4,sp,536
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
        array_add(product2,line[i],size_a+size_b-1);
     424:	389f 000c 3a00      	0x3a00000c389f
    for(i=0;i<size_b;++i){
     42a:	000c                	0xc
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0af0                	addi	a2,sp,348
     43a:	0000                	unimp
     43c:	0b04                	addi	s1,sp,400
     43e:	0000                	unimp
     440:	0001                	nop
     442:	045a                	slli	s0,s0,0x16
     444:	4e00000b          	0x4e00000b
     448:	0100000b          	0x100000b
     44c:	5800                	lw	s0,48(s0)
     44e:	0b4e                	slli	s6,s6,0x13
     450:	0000                	unimp
    int v[size_N];
     452:	0b76                	slli	s6,s6,0x1d
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     454:	0000                	unimp
    int v[size_N];
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    int num_temp[size_N];
     464:	0af0                	addi	a2,sp,348
    int denum_temp[size_D];
     466:	0000                	unimp
     468:	0b0c                	addi	a1,sp,400
     46a:	0000                	unimp
     46c:	0001                	nop
    int num_temp[size_N];
     46e:	000b0c5b          	0xb0c5b
    int denum_temp[size_D];
     472:	5c00                	lw	s0,56(s0)
     474:	0100000b          	0x100000b
    int v[size_N];
     478:	6200                	flw	fs0,0(a2)
     47a:	0b5c                	addi	a5,sp,404
    array_equ(num_temp,num,size_N);
     47c:	0000                	unimp
     47e:	0b64                	addi	s1,sp,412
     480:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    int denum_temp[size_D];
     488:	0b64                	addi	s1,sp,412
    array_equ(num_temp,num,size_N);
     48a:	0000                	unimp
    array_mod(num_temp,mod,size_N);
     48c:	0b76                	slli	s6,s6,0x1d
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
    int denum_temp[size_D];
     494:	0000                	unimp
    array_equ(denum_temp,denum,size_D);
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	f000                	fsw	fs0,32(s0)
     49c:	000a                	c.slli	zero,0x2
    array_mod(denum_temp,mod,size_D);
     49e:	0000                	unimp
     4a0:	0100000b          	0x100000b
     4a4:	5c00                	lw	s0,56(s0)
    for (i = 0; i < size_N; ++i){
     4a6:	0b00                	addi	s0,sp,400
     4a8:	0000                	unimp
     4aa:	0b36                	slli	s6,s6,0xd
    for (i = size_D-1; i >= 0; i = i-1){
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	3659                	jal	36 <__DYNAMIC+0x36>
     4b2:	3900000b          	0x3900000b
     4b6:	0100000b          	0x100000b
    for (i = 0; i < size_N; ++i){
     4ba:	5b00                	lw	s0,48(a4)
        if ( (b_N*u)%mod == 1 )
     4bc:	0b39                	addi	s6,s6,14
    for (u = 0; u < mod; ++u){
     4be:	0000                	unimp
     4c0:	0b76                	slli	s6,s6,0x1d
     4c2:	0000                	unimp
     4c4:	0004                	0x4
        q[i] = 0;
     4c6:	9f5c01f3          	0x9f5c01f3
	...
     4d2:	0af0                	addi	a2,sp,348
        v[i] = 0;
     4d4:	0000                	unimp
     4d6:	00000b17          	auipc	s6,0x0
    for (i = 0; i < size_N; ++i){
     4da:	0001                	nop
        if( denum_temp[i] != 0 )
     4dc:	175d                	addi	a4,a4,-9
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	3200000b          	0x3200000b
        if ( (b_N*u)%mod == 1 )
     4e2:	0100000b          	0x100000b
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0b32                	slli	s6,s6,0xc
     4ea:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4ec:	0b76                	slli	s6,s6,0x1d
     4ee:	0000                	unimp
        if( num_temp[i] != 0 )
     4f0:	0004                	0x4
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	9f5d01f3          	0x9f5d01f3
	...
     4fe:	0af0                	addi	a2,sp,348
    while (d >= d2){
     500:	0000                	unimp
     502:	00000b17          	auipc	s6,0x0
    array_equ(result,q,size_N);
     506:	0001                	nop
     508:	175e                	slli	a4,a4,0x37
     50a:	6000000b          	0x6000000b
     50e:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     512:	6400                	flw	fs0,8(s0)
     514:	0b60                	addi	s0,sp,412
        result[i] = num_temp[i-size_N];
     516:	0000                	unimp
     518:	0b64                	addi	s1,sp,412
     51a:	0000                	unimp
     51c:	0004                	0x4
    for(i = size_N; i < (2*size_N); ++i){
     51e:	9f5e01f3          	0x9f5e01f3
}
     522:	0b64                	addi	s1,sp,412
     524:	0000                	unimp
     526:	0b76                	slli	s6,s6,0x1d
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
     534:	3200                	fld	fs0,32(a2)
     536:	3900000b          	0x3900000b
     53a:	0100000b          	0x100000b
     53e:	5a00                	lw	s0,48(a2)
     540:	0b39                	addi	s6,s6,14
     542:	0000                	unimp
     544:	0b5e                	slli	s6,s6,0x17
     546:	0000                	unimp
     548:	0001                	nop
     54a:	000b6463          	bltu	s6,zero,552 <polydiv+0x122>
        v[(d-d2)] = u*r_d;
     54e:	7600                	flw	fs0,40(a2)
     550:	0100000b          	0x100000b
     554:	6300                	flw	fs0,0(a4)
	...
     55e:	0b48                	addi	a0,sp,404
    array_mod(v,mod,size_N);
     560:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     562:	0b5a                	slli	s6,s6,0x16
     564:	0000                	unimp
     566:	0001                	nop
     568:	6459                	lui	s0,0x16
     56a:	6e00000b          	0x6e00000b
     56e:	0100000b          	0x100000b
    array_mod(product,mod,size_N);
     572:	5900                	lw	s0,48(a0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     574:	0b6e                	slli	s6,s6,0x1b
    array_mod(product,mod,size_N);
     576:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     578:	0b74                	addi	a3,sp,412
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
    array_mod(num_temp,mod,size_N);
     580:	749f 000b 7600      	0x7600000b749f
     586:	0100000b          	0x100000b
    array_add(q,v,size_N);
     58a:	5900                	lw	s0,48(a0)
	...
    array_mod(q,mod,size_N);
     594:	07fe                	slli	a5,a5,0x1f
     596:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     598:	0842                	slli	a6,a6,0x10
     59a:	0000                	unimp
     59c:	0001                	nop
     59e:	425a                	lw	tp,148(sp)
     5a0:	0008                	0x8
     5a2:	0400                	addi	s0,sp,512
     5a4:	000a                	c.slli	zero,0x2
     5a6:	0100                	addi	s0,sp,128
     5a8:	6200                	flw	fs0,0(a2)
            num_temp[i] = num_temp[i] - product[i];
     5aa:	0a04                	addi	s1,sp,272
     5ac:	0000                	unimp
     5ae:	0a28                	addi	a0,sp,280
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
        for (i = 0; i < size_N; ++i){
     5b6:	289f 000a 4800      	0x4800000a289f
            num_temp[i] = num_temp[i] - product[i];
     5bc:	000a                	c.slli	zero,0x2
        for (i = 0; i < size_N; ++i){
     5be:	0400                	addi	s0,sp,512
            if( num_temp[i] != 0 )
     5c0:	f300                	fsw	fs0,32(a4)
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	5a01                	li	s4,-32
     5c4:	489f 000a dc00      	0xdc00000a489f
            v[i] = 0;
     5ca:	000a                	c.slli	zero,0x2
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
        for (i = 0; i < size_N; ++i){
     5d0:	0adc                	addi	a5,sp,340
     5d2:	0000                	unimp
     5d4:	0af0                	addi	a2,sp,348
     5d6:	0000                	unimp
        result[i] = num_temp[i-size_N];
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
     5e2:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	fe00                	fsw	fs0,56(a2)
     5e6:	3a000007          	0x3a000007
    int ri_2[size]; // MX-ring poly, a
     5ea:	0008                	0x8
     5ec:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	5b00                	lw	s0,48(a4)
    int ri_2[size]; // MX-ring poly, a
     5f0:	083a                	slli	a6,a6,0xe
     5f2:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	0a30                	addi	a2,sp,280
     5f6:	0000                	unimp
     5f8:	0001                	nop
     5fa:	000a3067          	0xa3067
     5fe:	4800                	lw	s0,16(s0)
     600:	000a                	c.slli	zero,0x2
     602:	0400                	addi	s0,sp,512
     604:	f300                	fsw	fs0,32(a4)
     606:	5b01                	li	s6,-32
     608:	489f 000a f000      	0xf000000a489f
     60e:	000a                	c.slli	zero,0x2
    int ri_2[size]; // MX-ring poly, a
     610:	0100                	addi	s0,sp,128
     612:	6700                	flw	fs0,8(a4)
	...
    int ri[size];
     61c:	07fe                	slli	a5,a5,0x1f
     61e:	0000                	unimp
     620:	083e                	slli	a6,a6,0xf
    int ti_1[size]; // ti_1[0] = 1
     622:	0000                	unimp
     624:	0001                	nop
     626:	3e5c                	fld	fa5,184(a2)
    int ti[size];
     628:	0008                	0x8
     62a:	2c00                	fld	fs0,24(s0)
     62c:	000a                	c.slli	zero,0x2
    int qi_1[size];
     62e:	0100                	addi	s0,sp,128
     630:	6600                	flw	fs0,8(a2)
     632:	0a2c                	addi	a1,sp,280
    int temp[size];
     634:	0000                	unimp
     636:	0a48                	addi	a0,sp,276
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0000                	unimp
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
    int ri_2[size]; // MX-ring poly, a
     640:	0a48                	addi	a0,sp,276
    int temp[size];
     642:	0000                	unimp
    for (i = 0; i < size; ++i) {
     644:	0af0                	addi	a2,sp,348
        ti_2[i] = 0;
     646:	0000                	unimp
     648:	0001                	nop
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
    for (i = 0; i < size; ++i) {
     64e:	0000                	unimp
     650:	0000                	unimp
    array_equ(ri_2,polyR,size);
     652:	8c00                	0x8c00
     654:	0009                	c.nop	2
     656:	9600                	0x9600
     658:	0009                	c.nop	2
    array_equ(ri_1,polyf,size);
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
    ti_1[0] = 1;
     666:	09a6                	slli	s3,s3,0x9
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	0000                	unimp
     66a:	000009c3          	fmadd.s	fs3,ft0,ft0,ft0,rne
     66e:	0001                	nop
            ti[i] = ti_2[i] - temp[i];
     670:	a85a                	fsd	fs6,16(sp)
     672:	000a                	c.slli	zero,0x2
     674:	bc00                	fsd	fs0,56(s0)
     676:	000a                	c.slli	zero,0x2
    array_mod(ri_2,mod,size);
     678:	0100                	addi	s0,sp,128
     67a:	5a00                	lw	s0,48(a2)
	...
    array_mod(ri_1,mod,size);
     684:	09c4                	addi	s1,sp,212
     686:	0000                	unimp
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	000009d7          	0x9d7
     68c:	0001                	nop
     68e:	bc5a                	fsd	fs6,56(sp)
     690:	000a                	c.slli	zero,0x2
     692:	cc00                	sw	s0,24(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     694:	000a                	c.slli	zero,0x2
     696:	0100                	addi	s0,sp,128
     698:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < N + 1; ++i) {
     6a2:	09d8                	addi	a4,sp,212
     6a4:	0000                	unimp
     6a6:	09f4                	addi	a3,sp,220
    array_mod(temp,mod,size);
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	cc5a                	sw	s6,24(sp)
     6ae:	000a                	c.slli	zero,0x2
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b0:	dc00                	sw	s0,56(s0)
     6b2:	000a                	c.slli	zero,0x2
     6b4:	0100                	addi	s0,sp,128
     6b6:	5a00                	lw	s0,48(a2)
	...
    array_equ(qi_1,res1,size);
     6c0:	0940                	addi	s0,sp,148
     6c2:	0000                	unimp
    array_mod(qi_1,mod,size);
     6c4:	0a0c                	addi	a1,sp,272
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6cc:	0a0c                	addi	a1,sp,272
     6ce:	0000                	unimp
     6d0:	0a24                	addi	s1,sp,280
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
     6d8:	0a24                	addi	s1,sp,280
     6da:	0000                	unimp
    array_equ(temp,res2,size);
     6dc:	0a28                	addi	a0,sp,280
     6de:	0000                	unimp
     6e0:	0010                	0x10
    array_mod(temp,mod,size);
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
        for (i = 0; i < N + 1; ++i) {
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
    array_mod(ti,mod,size);
     6f2:	0a28                	addi	a0,sp,280
     6f4:	0000                	unimp
     6f6:	0a48                	addi	a0,sp,276
     6f8:	0000                	unimp
array_equ(ri_2,ri_1,size);
     6fa:	00910013          	addi	zero,sp,9
     6fe:	235a01f3          	0x235a01f3
array_equ(ri_1,ri,size);
     702:	3201                	jal	2 <__DYNAMIC+0x2>
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
array_equ(ti_2,ti_1,size);
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
     70e:	481c                	lw	a5,16(s0)
     710:	000a                	c.slli	zero,0x2
array_equ(ti_1,ti,size);
     712:	f000                	fsw	fs0,32(s0)
     714:	000a                	c.slli	zero,0x2
     716:	0200                	addi	s0,sp,256
     718:	7200                	flw	fs0,32(a2)
	...
    while (controlR != 0) {
     722:	4400                	lw	s0,8(s0)
     724:	0009                	c.nop	2
        for (j = 0; j < mod; ++j) {
     726:	4600                	lw	s0,8(a2)
            if (((ri_2[0] * j) % mod) == 1)
     728:	0009                	c.nop	2
        for (j = 0; j < mod; ++j) {
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	469f 0009 4c00      	0x4c000009469f
     734:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
    }
     73a:	0950                	addi	a2,sp,148
     73c:	0000                	unimp
     73e:	0956                	slli	s2,s2,0x15
     740:	0000                	unimp
     742:	0001                	nop
     744:	5e5f 0009 6c00      	0x6c0000095e5f
     74a:	0009                	c.nop	2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0976                	slli	s2,s2,0x1d
     752:	0000                	unimp
     754:	0000098b          	0x98b
     758:	0001                	nop
     75a:	8c5f 0009 9600      	0x960000098c5f
     760:	0009                	c.nop	2
     762:	0500                	addi	s0,sp,640
        ti_2[i] = 0;
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0996                	slli	s3,s3,0x5
        ti_1[i] = 0;
     76c:	0000                	unimp
        ti_2[i] = 0;
     76e:	09a5                	addi	s3,s3,9
     770:	0000                	unimp
        ti_1[i] = 0;
     772:	0001                	nop
     774:	a65f 0009 b600      	0xb6000009a65f
            ri[i - (N + 1)] = res[i];
     77a:	0009                	c.nop	2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     782:	9f1e                	add	t5,t5,t2
     784:	09b6                	slli	s3,s3,0xd
            ri[i - (N + 1)] = res[i];
     786:	0000                	unimp
     788:	09c4                	addi	s1,sp,212
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     78c:	0001                	nop
     78e:	c459                	beqz	s0,81c <generate_keys+0x1e>
     790:	0009                	c.nop	2
     792:	cc00                	sw	s0,24(s0)
     794:	0009                	c.nop	2
     796:	0200                	addi	s0,sp,256
     798:	3000                	fld	fs0,32(s0)
     79a:	cc9f 0009 d400      	0xd4000009cc9f
     7a0:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     7a2:	0100                	addi	s0,sp,128
     7a4:	5e00                	lw	s0,56(a2)
            ti[i] = ti_2[i] - temp[i];
     7a6:	09d8                	addi	a4,sp,212
     7a8:	0000                	unimp
     7aa:	09ea                	slli	s3,s3,0x1a
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	ea9f 0009 0400      	0x4000009ea9f
     7ba:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     7bc:	0100                	addi	s0,sp,128
     7be:	6800                	flw	fs0,16(s0)
              qi_1[i] = 0;
     7c0:	0a04                	addi	s1,sp,272
     7c2:	0000                	unimp
     7c4:	0a84                	addi	s1,sp,336
     7c6:	0000                	unimp
            controlR += ri[i];
     7c8:	0001                	nop
     7ca:	845f 000a 8600      	0x8600000a845f
        for (i = 0; i < N + 1; ++i) {
     7d0:	000a                	c.slli	zero,0x2
            controlR += ri[i];
     7d2:	0300                	addi	s0,sp,384
        for (i = 0; i < N + 1; ++i) {
     7d4:	7f00                	flw	fs0,56(a4)
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	9f7f                	0x9f7f
     7d8:	0a86                	slli	s5,s5,0x1
     7da:	0000                	unimp
     7dc:	0aa8                	addi	a0,sp,344
     7de:	0000                	unimp
     7e0:	0001                	nop
     7e2:	a85f 000a b800      	0xb800000aa85f
        for (j = 0; j < mod; ++j) {
     7e8:	000a                	c.slli	zero,0x2
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0ab8                	addi	a4,sp,344
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	0000                	unimp
     7f2:	0aba                	slli	s5,s5,0xe
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	ba9f 000a bc00      	0xbc00000aba9f
int* generate_keys(int N, int p, int q){
     800:	000a                	c.slli	zero,0x2
     802:	0100                	addi	s0,sp,128
     804:	5900                	lw	s0,48(a0)
     806:	0abc                	addi	a5,sp,344
     808:	0000                	unimp
     80a:	0ac0                	addi	s0,sp,340
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	c05e                	sw	s7,0(sp)
     812:	000a                	c.slli	zero,0x2
     814:	ca00                	sw	s0,16(a2)
     816:	000a                	c.slli	zero,0x2
     818:	0300                	addi	s0,sp,384
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0aca                	slli	s5,s5,0x12
     820:	0000                	unimp
     822:	0acc                	addi	a1,sp,340
     824:	0000                	unimp
     826:	0001                	nop
     828:	cc5e                	sw	s7,24(sp)
     82a:	000a                	c.slli	zero,0x2
     82c:	dc00                	sw	s0,56(s0)
     82e:	000a                	c.slli	zero,0x2
     830:	0100                	addi	s0,sp,128
     832:	6800                	flw	fs0,16(s0)
     834:	0adc                	addi	a5,sp,340
     836:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     838:	0aec                	addi	a1,sp,348
     83a:	0000                	unimp
     83c:	0001                	nop
     83e:	ec5f 000a ee00      	0xee00000aec5f
     844:	000a                	c.slli	zero,0x2
     846:	0300                	addi	s0,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     848:	7f00                	flw	fs0,56(a4)
     84a:	9f7f                	0x9f7f
     84c:	0aee                	slli	s5,s5,0x1b
     84e:	0000                	unimp
     850:	0af0                	addi	a2,sp,348
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	0000                	unimp
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
     85c:	0000                	unimp
     85e:	0800                	addi	s0,sp,16
     860:	000a                	c.slli	zero,0x2
     862:	4800                	lw	s0,16(s0)
     864:	000a                	c.slli	zero,0x2
     866:	0600                	addi	s0,sp,768
     868:	0300                	addi	s0,sp,384
     86a:	199c                	addi	a5,sp,240
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
     874:	0000                	unimp
     876:	4000                	lw	s0,0(s0)
     878:	0009                	c.nop	2
     87a:	0400                	addi	s0,sp,512
     87c:	000a                	c.slli	zero,0x2
     87e:	0100                	addi	s0,sp,128
     880:	6200                	flw	fs0,0(a2)
     882:	0a04                	addi	s1,sp,272
     884:	0000                	unimp
     886:	0a28                	addi	a0,sp,280
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	289f 000a 4800      	0x4800000a289f
     894:	000a                	c.slli	zero,0x2
     896:	0400                	addi	s0,sp,512
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
     89c:	489f 000a dc00      	0xdc00000a489f
     8a2:	000a                	c.slli	zero,0x2
     8a4:	0100                	addi	s0,sp,128
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0adc                	addi	a5,sp,340
     8aa:	0000                	unimp
     8ac:	0af0                	addi	a2,sp,348
     8ae:	0000                	unimp
     8b0:	7f850003          	lb	zero,2040(a0)
     8b4:	009f 0000 0000      	0x9f
     8ba:	0000                	unimp
     8bc:	ea00                	fsw	fs0,16(a2)
    int polyR[N+1];
     8be:	0005                	c.nop	1
     8c0:	5800                	lw	s0,48(s0)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	0006                	c.slli	zero,0x1
    int polyR[N+1];
     8c4:	0100                	addi	s0,sp,128
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	0658                	addi	a4,sp,772
     8ca:	0000                	unimp
     8cc:	0659                	addi	a2,a2,22
     8ce:	0000                	unimp
     8d0:	0001                	nop
    polyR[N] = 1;
     8d2:	0006595b          	0x6595b
     8d6:	6400                	flw	fs0,8(s0)
     8d8:	04000007          	0x4000007
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	f300                	fsw	fs0,32(a4)
     8de:	5a01                	li	s4,-32
     8e0:	649f 0007 7a00      	0x7a000007649f
     8e6:	01000007          	0x1000007
     8ea:	5a00                	lw	s0,48(a2)
     8ec:	077a                	slli	a4,a4,0x1e
     8ee:	0000                	unimp
     8f0:	07fe                	slli	a5,a5,0x1f
     8f2:	0000                	unimp
     8f4:	0004                	0x4
     8f6:	9f5a01f3          	0x9f5a01f3
	...
     902:	05ea                	slli	a1,a1,0x1a
     904:	0000                	unimp
     906:	0654                	addi	a3,sp,772
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0006545b          	0x6545b
     910:	7800                	flw	fs0,48(s0)
     912:	0006                	c.slli	zero,0x1
     914:	0100                	addi	s0,sp,128
     916:	6b00                	flw	fs0,16(a4)
     918:	0678                	addi	a4,sp,780
     91a:	0000                	unimp
     91c:	0764                	addi	s1,sp,908
     91e:	0000                	unimp
     920:	0004                	0x4
     922:	9f5b01f3          	0x9f5b01f3
     926:	0764                	addi	s1,sp,908
     928:	0000                	unimp
     92a:	077a                	slli	a4,a4,0x1e
     92c:	0000                	unimp
     92e:	0001                	nop
     930:	00077a5b          	0x77a5b
     934:	fe00                	fsw	fs0,56(a2)
     936:	04000007          	0x4000007
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
    for(i = 1; i < N; ++i){
     944:	0000                	unimp
     946:	ea00                	fsw	fs0,16(a2)
     948:	0005                	c.nop	1
     94a:	4e00                	lw	s0,24(a2)
    for (i = N; i < 55; ++i ){
     94c:	0006                	c.slli	zero,0x1
     94e:	0100                	addi	s0,sp,128
     950:	5c00                	lw	s0,56(s0)
     952:	064e                	slli	a2,a2,0x13
    for(i = 0; i < N; ++i){
     954:	0000                	unimp
        random_keys[i] = f[i];
     956:	0744                	addi	s1,sp,900
     958:	0000                	unimp
     95a:	0001                	nop
     95c:	4459                	li	s0,22
    for(i = 0; i < N; ++i){
     95e:	50000007          	0x50000007
     962:	03000007          	0x3000007
    for(i = N; i < (2*N); ++i){
     966:	8700                	0x8700
     968:	9f01                	0x9f01
     96a:	0750                	addi	a2,sp,900
     96c:	0000                	unimp
        random_keys[i] = g[i-N];
     96e:	0764                	addi	s1,sp,908
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
    for(i = N; i < (2*N); ++i){
     978:	0764                	addi	s1,sp,908
    for(i = (2*N); i < (3*N); ++i){
     97a:	0000                	unimp
     97c:	07fe                	slli	a5,a5,0x1f
     97e:	0000                	unimp
    fp = ext_euclid(polyR, f, (N+1), p);
     980:	0001                	nop
     982:	0059                	c.nop	22
     984:	0000                	unimp
     986:	0000                	unimp
     988:	0000                	unimp
     98a:	ea00                	fsw	fs0,16(a2)
    for(i = (2*N); i < (3*N); ++i){
     98c:	0005                	c.nop	1
        random_keys[i] = fp[i-(2*N)];
     98e:	4e00                	lw	s0,24(a2)
     990:	0006                	c.slli	zero,0x1
     992:	0100                	addi	s0,sp,128
     994:	5d00                	lw	s0,56(a0)
    for(i = (2*N); i < (3*N); ++i){
     996:	064e                	slli	a2,a2,0x13
     998:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     99a:	0746                	slli	a4,a4,0x11
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	4662                	lw	a2,24(sp)
     9a2:	64000007          	0x64000007
    for(i = (3*N); i < (4*N); ++i){
     9a6:	04000007          	0x4000007
     9aa:	f300                	fsw	fs0,32(a4)
     9ac:	5d01                	li	s10,-32
        random_keys[i] = fq[i-(3*N)];
     9ae:	649f 0007 fe00      	0xfe000007649f
     9b4:	01000007          	0x1000007
    for(i = (3*N); i < (4*N); ++i){
     9b8:	6200                	flw	fs0,0(a2)
	...
    fg = polymult2(fq, N, g, N, 0);
     9c2:	073a                	slli	a4,a4,0xe
    for(i = 0; i < (2*N-1); ++i){
     9c4:	0000                	unimp
     9c6:	0764                	addi	s1,sp,908
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
     9cc:	00180c03          	lb	s8,1(a6)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	9f00                	0x9f00
	...
    for(i = (4*N); i < (5*N); ++i){
     9da:	0644                	addi	s1,sp,772
     9dc:	0000                	unimp
     9de:	0750                	addi	a2,sp,900
     9e0:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e2:	0001                	nop
     9e4:	00075067          	0x75067
     9e8:	6400                	flw	fs0,8(s0)
    for(i = (4*N); i < (5*N); ++i){
     9ea:	06000007          	0x6000007
     9ee:	f300                	fsw	fs0,32(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	5c01                	li	s8,-32
     9f2:	1c31                	addi	s8,s8,-20
        random_keys[i] = polyR[i-(5*N)];
     9f4:	649f 0007 fe00      	0xfe000007649f
     9fa:	01000007          	0x1000007
    for(i = (5*N); i < (6*N+1); ++i){
     9fe:	6700                	flw	fs0,8(a4)
	...
}
     a08:	0644                	addi	s1,sp,772
     a0a:	0000                	unimp
     a0c:	064e                	slli	a2,a2,0x13
     a0e:	0000                	unimp
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
     a14:	064e                	slli	a2,a2,0x13
     a16:	0000                	unimp
     a18:	0659                	addi	a2,a2,22
     a1a:	0000                	unimp
     a1c:	0001                	nop
     a1e:	945f 0006 9800      	0x98000006945f
     a24:	0006                	c.slli	zero,0x1
     a26:	0100                	addi	s0,sp,128
     a28:	5900                	lw	s0,48(a0)
     a2a:	0698                	addi	a4,sp,832
     a2c:	0000                	unimp
     a2e:	06a2                	slli	a3,a3,0x8
     a30:	0000                	unimp
     a32:	0001                	nop
     a34:	a45f 0006 af00      	0xaf000006a45f
     a3a:	0006                	c.slli	zero,0x1
     a3c:	0100                	addi	s0,sp,128
     a3e:	5e00                	lw	s0,56(a2)
     a40:	06ea                	slli	a3,a3,0x1a
     a42:	0000                	unimp
     a44:	06ee                	slli	a3,a3,0x1b
     a46:	0000                	unimp
        polyR[i] = 0;
     a48:	0002                	c.slli64	zero
     a4a:	9f30                	0x9f30
     a4c:	06ee                	slli	a3,a3,0x1b
     a4e:	0000                	unimp
     a50:	06f9                	addi	a3,a3,30
    for(i = 1; i < N; ++i){
     a52:	0000                	unimp
     a54:	0001                	nop
        f[i] = 0;
     a56:	1a5e                	slli	s4,s4,0x37
     a58:	1e000007          	0x1e000007
     a5c:	02000007          	0x2000007
     a60:	3000                	fld	fs0,32(s0)
     a62:	1e9f 0007 2800      	0x280000071e9f
        g[i] = 0;
     a68:	01000007          	0x1000007
     a6c:	5e00                	lw	s0,56(a2)
    for (i = N; i < 55; ++i ){
     a6e:	0736                	slli	a4,a4,0xd
     a70:	0000                	unimp
        random_keys[i] = f[i];
     a72:	0784                	addi	s1,sp,960
     a74:	0000                	unimp
     a76:	0001                	nop
     a78:	845f 0007 8a00      	0x8a000007845f
     a7e:	03000007          	0x3000007
    for(i = 0; i < N; ++i){
     a82:	7f00                	flw	fs0,56(a4)
        random_keys[i] = f[i];
     a84:	9f7f                	0x9f7f
    for(i = 0; i < N; ++i){
     a86:	078a                	slli	a5,a5,0x2
        random_keys[i] = g[i-N];
     a88:	0000                	unimp
     a8a:	078c                	addi	a1,sp,960
     a8c:	0000                	unimp
     a8e:	0001                	nop
     a90:	8c5f 0007 9e00      	0x9e0000078c5f
    for(i = N; i < (2*N); ++i){
     a96:	01000007          	0x1000007
        random_keys[i] = fp[i-(2*N)];
     a9a:	5e00                	lw	s0,56(a2)
     a9c:	079e                	slli	a5,a5,0x7
     a9e:	0000                	unimp
     aa0:	07a2                	slli	a5,a5,0x8
    for(i = (2*N); i < (3*N); ++i){
     aa2:	0000                	unimp
     aa4:	7f7e0003          	lb	zero,2039(t3) # fffe07f7 <_stack_start+0xfffd07f7>
        random_keys[i] = fq[i-(3*N)];
     aa8:	a29f 0007 b800      	0xb8000007a29f
     aae:	01000007          	0x1000007
     ab2:	5e00                	lw	s0,56(a2)
     ab4:	07b8                	addi	a4,sp,968
    for(i = (3*N); i < (4*N); ++i){
     ab6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     ab8:	07bc                	addi	a5,sp,968
    for(i = (3*N); i < (4*N); ++i){
     aba:	0000                	unimp
        fg[i] = fg[i]*p;
     abc:	7f7e0003          	lb	zero,2039(t3)
    for(i = 0; i < (2*N-1); ++i){
     ac0:	bc9f 0007 d200      	0xd2000007bc9f
        fg[i] = fg[i]*p;
     ac6:	01000007          	0x1000007
    for(i = 0; i < (2*N-1); ++i){
     aca:	5e00                	lw	s0,56(a2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     acc:	07d2                	slli	a5,a5,0x14
     ace:	0000                	unimp
     ad0:	07d4                	addi	a3,sp,964
     ad2:	0000                	unimp
     ad4:	7f7e0003          	lb	zero,2039(t3)
    for(i = (4*N); i < (5*N); ++i){
     ad8:	d49f 0007 d600      	0xd6000007d49f
        random_keys[i] = polyR[i-(5*N)];
     ade:	01000007          	0x1000007
     ae2:	5e00                	lw	s0,56(a2)
     ae4:	07ea                	slli	a5,a5,0x1a
     ae6:	0000                	unimp
     ae8:	07ee                	slli	a5,a5,0x1b
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     aec:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     aee:	ee5f 0007 fc00      	0xfc000007ee5f
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af4:	03000007          	0x3000007
     af8:	7f00                	flw	fs0,56(a4)
     afa:	9f7f                	0x9f7f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     afc:	07fc                	addi	a5,sp,972
     afe:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b00:	07fe                	slli	a5,a5,0x1f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b02:	0000                	unimp
     b04:	0001                	nop
     b06:	005f 0000 0000      	0x5f
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0c:	0000                	unimp
     b0e:	2a00                	fld	fs0,16(a2)
     b10:	64000007          	0x64000007
     b14:	01000007          	0x1000007
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	5e00                	lw	s0,56(a2)
     b1a:	07d6                	slli	a5,a5,0x15
     b1c:	0000                	unimp
     b1e:	07fe                	slli	a5,a5,0x1f
     b20:	0000                	unimp
     b22:	0001                	nop
     b24:	005e                	c.slli	zero,0x17
     b26:	0000                	unimp
     b28:	0000                	unimp
array_add(temp,message,48);
     b2a:	0000                	unimp
     b2c:	4200                	lw	s0,0(a2)
     b2e:	0006                	c.slli	zero,0x1
    temp = polymult(public_key,N,random_val,48,q,0);
     b30:	4800                	lw	s0,16(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b32:	02000007          	0x2000007
array_add(temp,message,48);
     b36:	8300                	0x8300
     b38:	6400                	flw	fs0,8(s0)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b3a:	fe000007          	0xfe000007
     b3e:	02000007          	0x2000007
     b42:	8300                	0x8300
	...
    for(i = (2*N); i < (3*N); ++i){
     b4c:	4200                	lw	s0,0(a2)
     b4e:	0006                	c.slli	zero,0x1
     b50:	4a00                	lw	s0,16(a2)
     b52:	02000007          	0x2000007
}
     b56:	8400                	0x8400
     b58:	6400                	flw	fs0,8(s0)
     b5a:	fe000007          	0xfe000007
     b5e:	02000007          	0x2000007
     b62:	8400                	0x8400
	...
    for(i = (2*N); i < (3*N); ++i){
     b6c:	4200                	lw	s0,0(a2)
     b6e:	0006                	c.slli	zero,0x1
        CT[i-(2*N)] = CT[i];
     b70:	5200                	lw	s0,32(a2)
     b72:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b76:	8800                	0x8800
     b78:	6400                	flw	fs0,8(s0)
     b7a:	fe000007          	0xfe000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     b7e:	02000007          	0x2000007
     b82:	8800                	0x8800
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b8c:	4200                	lw	s0,0(a2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b8e:	0006                	c.slli	zero,0x1
     b90:	4e00                	lw	s0,24(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b92:	02000007          	0x2000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	8600                	0x8600
     b98:	4e00                	lw	s0,24(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b9a:	50000007          	0x50000007
     b9e:	0c000007          	0xc000007
     ba2:	8800                	0x8800
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ba4:	8700                	0x8700
     ba6:	3201                	jal	4a6 <polydiv+0x76>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba8:	2324                	fld	fs1,64(a4)
     baa:	1af0090f          	0x1af0090f
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bae:	501c                	lw	a5,32(s0)
     bb0:	52000007          	0x52000007
     bb4:	0d000007          	0xd000007
     bb8:	8800                	0x8800
     bba:	f300                	fsw	fs0,32(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     bbc:	5c01                	li	s8,-32
     bbe:	2432                	fld	fs0,264(sp)
     bc0:	f0090f23          	sb	zero,-226(s2)
     bc4:	1c1a                	slli	s8,s8,0x26
        if(a2[i] <= q/2)
     bc6:	0764                	addi	s1,sp,908
     bc8:	0000                	unimp
     bca:	07fe                	slli	a5,a5,0x1f
    for (i = 0; i < N; ++i){
     bcc:	0000                	unimp
     bce:	0002                	c.slli64	zero
     bd0:	0086                	slli	ra,ra,0x1
	...
    c = polymult2(secret_key_fp,N,a2,N,0);
     bda:	0642                	slli	a2,a2,0x10
     bdc:	0000                	unimp
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bde:	0756                	slli	a4,a4,0x15
     be0:	0000                	unimp
     be2:	0002                	c.slli64	zero
     be4:	008a                	slli	ra,ra,0x2
     be6:	0764                	addi	s1,sp,908
    for(i = (2*N); i < ((2*N)+N); ++i){
     be8:	0000                	unimp
     bea:	07fe                	slli	a5,a5,0x1f
     bec:	0000                	unimp
}
     bee:	0002                	c.slli64	zero
     bf0:	008a                	slli	ra,ra,0x2
	...
     bfa:	0642                	slli	a2,a2,0x10
     bfc:	0000                	unimp
     bfe:	0754                	addi	a3,sp,900
     c00:	0000                	unimp
     c02:	0002                	c.slli64	zero
        a2[i-(2*N)] = a2[i];
     c04:	0089                	addi	ra,ra,2
     c06:	0754                	addi	a3,sp,900
     c08:	0000                	unimp
     c0a:	0756                	slli	a4,a4,0x15
    for(i = (2*N); i < ((2*N)+N); ++i){
     c0c:	0000                	unimp
     c0e:	000d                	c.nop	3
        a2[i-(2*N)] = a2[i];
     c10:	008a                	slli	ra,ra,0x2
     c12:	325c01f3          	0x325c01f3
        if(a2[i] <= q/2)
     c16:	2324                	fld	fs1,64(a4)
     c18:	1af0090f          	0x1af0090f
            a2[i] = (-1)*(q-a2[i]);
     c1c:	641c                	flw	fa5,8(s0)
     c1e:	fe000007          	0xfe000007
    for (i = 0; i < N; ++i){
     c22:	02000007          	0x2000007
     c26:	8900                	0x8900
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     c30:	4400                	lw	s0,8(s0)
     c32:	0006                	c.slli	zero,0x1
        c2[i-(2*N)] = c2[i];
     c34:	3e00                	fld	fs0,56(a2)
     c36:	02000007          	0x2000007
  jal x0, default_exc_handler
     c3a:	7200                	flw	fs0,32(a2)
     c3c:	3e00                	fld	fs0,56(a2)
  mv  x1, x0
     c3e:	4c000007          	0x4c000007
  mv  x2, x1
     c42:	02000007          	0x2000007
  mv  x4, x1
     c46:	8500                	0x8500
  mv  x5, x1
     c48:	4c00                	lw	s0,24(s0)
  mv  x6, x1
     c4a:	50000007          	0x50000007
  mv  x8, x1
     c4e:	0c000007          	0xc000007
  mv x10, x1
     c52:	8900                	0x8900
  mv x11, x1
     c54:	8700                	0x8700
  mv x12, x1
     c56:	3201                	jal	556 <polydiv+0x126>
  mv x13, x1
     c58:	2324                	fld	fs1,64(a4)
  mv x14, x1
     c5a:	1af0090f          	0x1af0090f
  mv x16, x1
     c5e:	501c                	lw	a5,32(s0)
  mv x17, x1
     c60:	54000007          	0x54000007
  mv x19, x1
     c64:	0d000007          	0xd000007
  mv x21, x1
     c68:	8900                	0x8900
  mv x22, x1
     c6a:	f300                	fsw	fs0,32(a4)
  mv x23, x1
     c6c:	5c01                	li	s8,-32
  mv x24, x1
     c6e:	2432                	fld	fs0,264(sp)
  mv x25, x1
     c70:	f0090f23          	sb	zero,-226(s2)
  mv x27, x1
     c74:	1c1a                	slli	s8,s8,0x26
  mv x28, x1
     c76:	0754                	addi	a3,sp,900
  mv x29, x1
     c78:	0000                	unimp
  mv x30, x1
     c7a:	0756                	slli	a4,a4,0x15
  mv x31, x1
     c7c:	0000                	unimp
  la   x2, _stack_start
     c7e:	008a000f          	0x8a000f
     c82:	325c01f3          	0x325c01f3
  la x26, _bss_start
     c86:	2324                	fld	fs1,64(a4)
     c88:	1af0090f          	0x1af0090f
     c8c:	2431                	jal	e98 <main+0x62>
  la x27, _bss_end
     c8e:	641c                	flw	fa5,8(s0)
     c90:	fe000007          	0xfe000007
     c94:	02000007          	0x2000007
  bge x26, x27, zero_loop_end
     c98:	7200                	flw	fs0,32(a2)
	...
  ble x26, x27, zero_loop
     ca2:	9400                	0x9400
  addi x10, x0, 0
     ca4:	0006                	c.slli	zero,0x1
     ca6:	ae00                	fsd	fs0,24(a2)
  addi x11, x0, 0
     ca8:	0006                	c.slli	zero,0x1
     caa:	0100                	addi	s0,sp,128
  jal x1, main
     cac:	5a00                	lw	s0,48(a2)
     cae:	077a                	slli	a4,a4,0x1e
     cb0:	0000                	unimp
     cb2:	07a6                	slli	a5,a5,0x9
     cb4:	0000                	unimp
     cb6:	0001                	nop
     cb8:	005a                	c.slli	zero,0x16
     cba:	0000                	unimp
     cbc:	0000                	unimp
     cbe:	0000                	unimp
     cc0:	be00                	fsd	fs0,56(a2)
     cc2:	0006                	c.slli	zero,0x1
     cc4:	c200                	sw	s0,0(a2)
     cc6:	0006                	c.slli	zero,0x1
     cc8:	0100                	addi	s0,sp,128
     cca:	5a00                	lw	s0,48(a2)
     ccc:	06c2                	slli	a3,a3,0x10
     cce:	0000                	unimp
     cd0:	000006c3          	fmadd.s	fa3,ft0,ft0,ft0,rne
     cd4:	0001                	nop
     cd6:	0000005b          	0x5b
     cda:	0000                	unimp
     cdc:	0000                	unimp
     cde:	dc00                	sw	s0,56(s0)
     ce0:	0006                	c.slli	zero,0x1
     ce2:	e000                	fsw	fs0,0(s0)
     ce4:	0006                	c.slli	zero,0x1
     ce6:	0100                	addi	s0,sp,128
     ce8:	5a00                	lw	s0,48(a2)
     cea:	06e0                	addi	s0,sp,844
     cec:	0000                	unimp
     cee:	06e1                	addi	a3,a3,24
     cf0:	0000                	unimp
     cf2:	0001                	nop
     cf4:	0000005b          	0x5b
     cf8:	0000                	unimp
     cfa:	0000                	unimp
     cfc:	4400                	lw	s0,8(s0)
     cfe:	0006                	c.slli	zero,0x1
     d00:	7800                	flw	fs0,48(s0)
     d02:	0006                	c.slli	zero,0x1
     d04:	0200                	addi	s0,sp,256
     d06:	3100                	fld	fs0,32(a0)
     d08:	789f 0006 1e00      	0x1e000006789f
     d0e:	02000007          	0x2000007
     d12:	3000                	fld	fs0,32(s0)
     d14:	1e9f 0007 3600      	0x360000071e9f
     d1a:	01000007          	0x1000007
     d1e:	5f00                	lw	s0,56(a4)
     d20:	0764                	addi	s1,sp,908
     d22:	0000                	unimp
     d24:	077a                	slli	a4,a4,0x1e
     d26:	0000                	unimp
     d28:	0002                	c.slli64	zero
     d2a:	9f31                	0x9f31
     d2c:	077a                	slli	a4,a4,0x1e
     d2e:	0000                	unimp
     d30:	07c0                	addi	s0,sp,964
     d32:	0000                	unimp
     d34:	0002                	c.slli64	zero
     d36:	9f30                	0x9f30
     d38:	07c0                	addi	s0,sp,964
     d3a:	0000                	unimp
     d3c:	07ea                	slli	a5,a5,0x1a
     d3e:	0000                	unimp
     d40:	0001                	nop
     d42:	005f 0000 0000      	0x5f
     d48:	0000                	unimp
     d4a:	4200                	lw	s0,0(a2)
     d4c:	0006                	c.slli	zero,0x1
     d4e:	5000                	lw	s0,32(s0)
     d50:	01000007          	0x1000007
     d54:	6700                	flw	fs0,8(a4)
     d56:	0750                	addi	a2,sp,900
     d58:	0000                	unimp
     d5a:	0764                	addi	s1,sp,908
     d5c:	0000                	unimp
     d5e:	0006                	c.slli	zero,0x1
     d60:	315c01f3          	0x315c01f3
     d64:	9f1c                	0x9f1c
     d66:	0764                	addi	s1,sp,908
     d68:	0000                	unimp
     d6a:	07fe                	slli	a5,a5,0x1f
     d6c:	0000                	unimp
     d6e:	0001                	nop
     d70:	00000067          	jr	zero # 0 <__DYNAMIC>
     d74:	0000                	unimp
     d76:	0000                	unimp
     d78:	4200                	lw	s0,0(a2)
     d7a:	0006                	c.slli	zero,0x1
     d7c:	5000                	lw	s0,32(s0)
     d7e:	01000007          	0x1000007
     d82:	6700                	flw	fs0,8(a4)
     d84:	0750                	addi	a2,sp,900
     d86:	0000                	unimp
     d88:	0764                	addi	s1,sp,908
     d8a:	0000                	unimp
     d8c:	0006                	c.slli	zero,0x1
     d8e:	315c01f3          	0x315c01f3
     d92:	9f1c                	0x9f1c
     d94:	0764                	addi	s1,sp,908
     d96:	0000                	unimp
     d98:	07fe                	slli	a5,a5,0x1f
     d9a:	0000                	unimp
     d9c:	0001                	nop
     d9e:	00000067          	jr	zero # 0 <__DYNAMIC>
     da2:	0000                	unimp
     da4:	0000                	unimp
     da6:	4200                	lw	s0,0(a2)
     da8:	0006                	c.slli	zero,0x1
     daa:	5000                	lw	s0,32(s0)
     dac:	01000007          	0x1000007
     db0:	6700                	flw	fs0,8(a4)
     db2:	0750                	addi	a2,sp,900
     db4:	0000                	unimp
     db6:	0764                	addi	s1,sp,908
     db8:	0000                	unimp
     dba:	0006                	c.slli	zero,0x1
     dbc:	315c01f3          	0x315c01f3
     dc0:	9f1c                	0x9f1c
     dc2:	0764                	addi	s1,sp,908
     dc4:	0000                	unimp
     dc6:	07fe                	slli	a5,a5,0x1f
     dc8:	0000                	unimp
     dca:	0001                	nop
     dcc:	00000067          	jr	zero # 0 <__DYNAMIC>
     dd0:	0000                	unimp
     dd2:	0000                	unimp
     dd4:	4200                	lw	s0,0(a2)
     dd6:	0006                	c.slli	zero,0x1
     dd8:	5000                	lw	s0,32(s0)
     dda:	01000007          	0x1000007
     dde:	6700                	flw	fs0,8(a4)
     de0:	0750                	addi	a2,sp,900
     de2:	0000                	unimp
     de4:	0764                	addi	s1,sp,908
     de6:	0000                	unimp
     de8:	0006                	c.slli	zero,0x1
     dea:	315c01f3          	0x315c01f3
     dee:	9f1c                	0x9f1c
     df0:	0764                	addi	s1,sp,908
     df2:	0000                	unimp
     df4:	07fe                	slli	a5,a5,0x1f
     df6:	0000                	unimp
     df8:	0001                	nop
     dfa:	00000067          	jr	zero # 0 <__DYNAMIC>
     dfe:	0000                	unimp
     e00:	0000                	unimp
     e02:	4200                	lw	s0,0(a2)
     e04:	0006                	c.slli	zero,0x1
     e06:	5000                	lw	s0,32(s0)
     e08:	01000007          	0x1000007
     e0c:	6700                	flw	fs0,8(a4)
     e0e:	0750                	addi	a2,sp,900
     e10:	0000                	unimp
     e12:	0764                	addi	s1,sp,908
     e14:	0000                	unimp
     e16:	0006                	c.slli	zero,0x1
     e18:	315c01f3          	0x315c01f3
     e1c:	9f1c                	0x9f1c
     e1e:	0764                	addi	s1,sp,908
     e20:	0000                	unimp
     e22:	07fe                	slli	a5,a5,0x1f
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	00000067          	jr	zero # 0 <__DYNAMIC>
     e2c:	0000                	unimp
     e2e:	0000                	unimp
     e30:	4200                	lw	s0,0(a2)
     e32:	0006                	c.slli	zero,0x1
     e34:	5000                	lw	s0,32(s0)
int main(){
     e36:	01000007          	0x1000007
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e3a:	6700                	flw	fs0,8(a4)
     e3c:	0750                	addi	a2,sp,900
     e3e:	0000                	unimp
     e40:	0764                	addi	s1,sp,908
     e42:	0000                	unimp
     e44:	0006                	c.slli	zero,0x1
     e46:	315c01f3          	0x315c01f3
int main(){
     e4a:	9f1c                	0x9f1c
     e4c:	0764                	addi	s1,sp,908
     e4e:	0000                	unimp
     e50:	07fe                	slli	a5,a5,0x1f
     e52:	0000                	unimp
     e54:	0001                	nop
     e56:	00000067          	jr	zero # 0 <__DYNAMIC>
    resultkon[0] = 0xaaaaaaa0;
     e5a:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e5c:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     e5e:	4200                	lw	s0,0(a2)
     e60:	0006                	c.slli	zero,0x1
     e62:	5000                	lw	s0,32(s0)
     e64:	01000007          	0x1000007
     e68:	6700                	flw	fs0,8(a4)
    keys = generate_keys(N, p, q);
     e6a:	0750                	addi	a2,sp,900
     e6c:	0000                	unimp
     e6e:	0764                	addi	s1,sp,908
     e70:	0000                	unimp
     e72:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xaaaaaaa0;
     e74:	315c01f3          	0x315c01f3
    resultkon[0] = 0xaaaaaaa1;
     e78:	9f1c                	0x9f1c
    keys = generate_keys(N, p, q);
     e7a:	0764                	addi	s1,sp,908
    resultkon[0] = 0xaaaaaaa1;
     e7c:	0000                	unimp
     e7e:	07fe                	slli	a5,a5,0x1f
    for(i = 0; i < N; ++i){
     e80:	0000                	unimp
     e82:	0001                	nop
        secret_key_f[i] = keys[i];
     e84:	00000067          	jr	zero # 0 <__DYNAMIC>
     e88:	0000                	unimp
     e8a:	0000                	unimp
     e8c:	3000                	fld	fs0,32(s0)
     e8e:	0004                	0x4
    for(i = 0; i < N; ++i){
     e90:	8200                	0x8200
     e92:	0004                	0x4
     e94:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     e96:	5a00                	lw	s0,48(a2)
     e98:	0482                	c.slli64	s1
     e9a:	0000                	unimp
     e9c:	0000048b          	0x48b
     ea0:	0001                	nop
        secret_key_fp[i-(2*N)] = keys[i];
     ea2:	00048b5b          	0x48b5b
     ea6:	ea00                	fsw	fs0,16(a2)
     ea8:	0005                	c.nop	1
     eaa:	0400                	addi	s0,sp,512
    for(i = (2*N); i < (3*N); ++i){
     eac:	f300                	fsw	fs0,32(a4)
     eae:	5a01                	li	s4,-32
    for(i = (3*N); i < (4*N); ++i){
     eb0:	009f 0000 0000      	0x9f
     eb6:	0000                	unimp
     eb8:	3000                	fld	fs0,32(s0)
     eba:	0004                	0x4
        public_key[i-(4*N)] = keys[i];
     ebc:	8000                	0x8000
     ebe:	0004                	0x4
     ec0:	0100                	addi	s0,sp,128
     ec2:	5b00                	lw	s0,48(a4)
     ec4:	0480                	addi	s0,sp,576
    for(i = (4*N); i < (5*N); ++i){
     ec6:	0000                	unimp
     ec8:	051e                	slli	a0,a0,0x7
     eca:	0000                	unimp
     ecc:	0001                	nop
     ece:	1e59                	addi	t3,t3,-10
     ed0:	0005                	c.nop	1
        ring_poly[i-(5*N)] = keys[i];
     ed2:	3a00                	fld	fs0,48(a2)
     ed4:	0005                	c.nop	1
     ed6:	0300                	addi	s0,sp,384
     ed8:	8800                	0x8800
     eda:	9f01                	0x9f01
    for(i = (5*N); i < (6*N+1); ++i){
     edc:	053a                	slli	a0,a0,0xe
     ede:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     ee0:	054c                	addi	a1,sp,644
     ee2:	0000                	unimp
     ee4:	0004                	0x4
     ee6:	9f5b01f3          	0x9f5b01f3
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     eea:	054c                	addi	a1,sp,644
     eec:	0000                	unimp
     eee:	05d8                	addi	a4,sp,708
    resultkon[0] = 0xbbbbbbb1;
     ef0:	0000                	unimp
     ef2:	0001                	nop
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef4:	d859                	beqz	s0,e8a <main+0x54>
     ef6:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb0;
     ef8:	ea00                	fsw	fs0,16(a2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     efa:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb1;
     efc:	0300                	addi	s0,sp,384
    resultkon[0] = 0xccccccc0;
     efe:	8800                	0x8800
     f00:	9f01                	0x9f01
	...
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f0a:	0430                	addi	a2,sp,520
     f0c:	0000                	unimp
     f0e:	047e                	slli	s0,s0,0x1f
     f10:	0000                	unimp
     f12:	0001                	nop
     f14:	7e5c                	flw	fa5,60(a2)
     f16:	0004                	0x4
     f18:	bc00                	fsd	fs0,56(s0)
     f1a:	0004                	0x4
     f1c:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc1;	
     f1e:	6a00                	flw	fs0,16(a2)
     f20:	04bc                	addi	a5,sp,584
            resultkon[0] = 0xDEDEDEDE;
     f22:	0000                	unimp
     f24:	04c6                	slli	s1,s1,0x11
    resultkon[0] = 0xccccccc1;	
     f26:	0000                	unimp
     f28:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
     f2a:	9f5c01f3          	0x9f5c01f3
    for(i = 0; i < 32; ++i){
     f2e:	04c6                	slli	s1,s1,0x11
     f30:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
     f32:	04e2                	slli	s1,s1,0x18
     f34:	0000                	unimp
     f36:	0001                	nop
     f38:	e26a                	fsw	fs10,4(sp)
     f3a:	0004                	0x4
     f3c:	ea00                	fsw	fs0,16(a2)
     f3e:	0005                	c.nop	1
     f40:	0400                	addi	s0,sp,512
            resultkon[0] = 0xBABABABA;
     f42:	f300                	fsw	fs0,32(a4)
     f44:	5c01                	li	s8,-32
     f46:	009f 0000 0000      	0x9f
}
     f4c:	0000                	unimp
     f4e:	3000                	fld	fs0,32(s0)
     f50:	0004                	0x4
     f52:	8b00                	0x8b00
     f54:	0004                	0x4
     f56:	0100                	addi	s0,sp,128
     f58:	5d00                	lw	s0,56(a0)
     f5a:	0000048b          	0x48b
     f5e:	0532                	slli	a0,a0,0xc
     f60:	0000                	unimp
     f62:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
     f64:	3264                	fld	fs1,224(a2)
    for(i = 0; i < 32; ++i){
     f66:	0005                	c.nop	1
     f68:	4c00                	lw	s0,24(s0)
     f6a:	0005                	c.nop	1
     f6c:	0400                	addi	s0,sp,512
     f6e:	f300                	fsw	fs0,32(a4)
     f70:	5d01                	li	s10,-32
     f72:	4c9f 0005 ea00      	0xea0000054c9f
     f78:	0005                	c.nop	1
     f7a:	0100                	addi	s0,sp,128
     f7c:	6400                	flw	fs0,8(s0)
	...
     f86:	0430                	addi	a2,sp,520
     f88:	0000                	unimp
     f8a:	0000048b          	0x48b
     f8e:	0001                	nop
     f90:	8b5e                	mv	s6,s7
     f92:	0004                	0x4
     f94:	3000                	fld	fs0,32(s0)
     f96:	0005                	c.nop	1
     f98:	0100                	addi	s0,sp,128
     f9a:	6300                	flw	fs0,0(a4)
     f9c:	0530                	addi	a2,sp,648
     f9e:	0000                	unimp
     fa0:	054c                	addi	a1,sp,644
     fa2:	0000                	unimp
     fa4:	0004                	0x4
     fa6:	9f5e01f3          	0x9f5e01f3
     faa:	054c                	addi	a1,sp,644
     fac:	0000                	unimp
     fae:	05ea                	slli	a1,a1,0x1a
     fb0:	0000                	unimp
     fb2:	0001                	nop
     fb4:	00000063          	beqz	zero,fb4 <_endtext+0x34>
     fb8:	0000                	unimp
     fba:	0000                	unimp
     fbc:	be00                	fsd	fs0,56(a2)
     fbe:	0004                	0x4
     fc0:	c600                	sw	s0,8(a2)
     fc2:	0004                	0x4
     fc4:	0100                	addi	s0,sp,128
     fc6:	6a00                	flw	fs0,16(a2)
     fc8:	04e2                	slli	s1,s1,0x18
     fca:	0000                	unimp
     fcc:	053e                	slli	a0,a0,0xf
     fce:	0000                	unimp
     fd0:	0001                	nop
     fd2:	4c6a                	lw	s8,152(sp)
     fd4:	0005                	c.nop	1
     fd6:	ea00                	fsw	fs0,16(a2)
     fd8:	0005                	c.nop	1
     fda:	0100                	addi	s0,sp,128
     fdc:	6a00                	flw	fs0,16(a2)
	...
     fe6:	0500                	addi	s0,sp,640
     fe8:	0000                	unimp
     fea:	0511                	addi	a0,a0,4
     fec:	0000                	unimp
     fee:	0001                	nop
     ff0:	4c5f 0005 5400      	0x540000054c5f
     ff6:	0005                	c.nop	1
     ff8:	0100                	addi	s0,sp,128
     ffa:	5f00                	lw	s0,56(a4)
	...
    1004:	04a6                	slli	s1,s1,0x9
    1006:	0000                	unimp
    1008:	04a8                	addi	a0,sp,584
    100a:	0000                	unimp
    100c:	0002                	c.slli64	zero
    100e:	9f30                	0x9f30
    1010:	04a8                	addi	a0,sp,584
    1012:	0000                	unimp
    1014:	04ac                	addi	a1,sp,584
    1016:	0000                	unimp
    1018:	0001                	nop
    101a:	ac5f 0004 c600      	0xc6000004ac5f
    1020:	0004                	0x4
    1022:	0100                	addi	s0,sp,128
    1024:	6900                	flw	fs0,16(a0)
    1026:	04c6                	slli	s1,s1,0x11
    1028:	0000                	unimp
    102a:	04dc                	addi	a5,sp,580
    102c:	0000                	unimp
    102e:	0001                	nop
    1030:	dc5f 0004 f000      	0xf0000004dc5f
    1036:	0004                	0x4
    1038:	0100                	addi	s0,sp,128
    103a:	6900                	flw	fs0,16(a0)
    103c:	04f0                	addi	a2,sp,588
    103e:	0000                	unimp
    1040:	0500                	addi	s0,sp,640
    1042:	0000                	unimp
    1044:	0001                	nop
    1046:	125f 0005 2c00      	0x2c000005125f
    104c:	0005                	c.nop	1
    104e:	0100                	addi	s0,sp,128
    1050:	5900                	lw	s0,48(a0)
    1052:	0578                	addi	a4,sp,652
    1054:	0000                	unimp
    1056:	057c                	addi	a5,sp,652
    1058:	0000                	unimp
    105a:	0002                	c.slli64	zero
    105c:	9f30                	0x9f30
    105e:	057c                	addi	a5,sp,652
    1060:	0000                	unimp
    1062:	00000587          	0x587
    1066:	0001                	nop
    1068:	985f 0005 9a00      	0x9a000005985f
    106e:	0005                	c.nop	1
    1070:	0100                	addi	s0,sp,128
    1072:	6800                	flw	fs0,16(s0)
    1074:	059a                	slli	a1,a1,0x6
    1076:	0000                	unimp
    1078:	05b6                	slli	a1,a1,0xd
    107a:	0000                	unimp
    107c:	0001                	nop
    107e:	b65f 0005 be00      	0xbe000005b65f
    1084:	0005                	c.nop	1
    1086:	0300                	addi	s0,sp,384
    1088:	7f00                	flw	fs0,56(a4)
    108a:	9f7f                	0x9f7f
    108c:	05be                	slli	a1,a1,0xf
    108e:	0000                	unimp
    1090:	05c6                	slli	a1,a1,0x11
    1092:	0000                	unimp
    1094:	0001                	nop
    1096:	c65f 0005 d800      	0xd8000005c65f
    109c:	0005                	c.nop	1
    109e:	0100                	addi	s0,sp,128
    10a0:	5d00                	lw	s0,56(a0)
    10a2:	05d8                	addi	a4,sp,708
    10a4:	0000                	unimp
    10a6:	05ea                	slli	a1,a1,0x1a
    10a8:	0000                	unimp
    10aa:	0001                	nop
    10ac:	0059                	c.nop	22
	...
    10b6:	0005                	c.nop	1
    10b8:	1100                	addi	s0,sp,160
    10ba:	0005                	c.nop	1
    10bc:	0100                	addi	s0,sp,128
    10be:	5e00                	lw	s0,56(a2)
    10c0:	054c                	addi	a1,sp,644
    10c2:	0000                	unimp
    10c4:	0550                	addi	a2,sp,644
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	005e                	c.slli	zero,0x17
    10cc:	0000                	unimp
    10ce:	0000                	unimp
    10d0:	0000                	unimp
    10d2:	2200                	fld	fs0,0(a2)
    10d4:	0005                	c.nop	1
    10d6:	4c00                	lw	s0,24(s0)
    10d8:	0005                	c.nop	1
    10da:	0600                	addi	s0,sp,768
    10dc:	0300                	addi	s0,sp,384
    10de:	15b4                	addi	a3,sp,744
    10e0:	0000                	unimp
    10e2:	009f 0000 0000      	0x9f
    10e8:	0000                	unimp
    10ea:	7c00                	flw	fs0,56(s0)
    10ec:	0004                	0x4
    10ee:	3400                	fld	fs0,40(s0)
    10f0:	0005                	c.nop	1
    10f2:	0200                	addi	s0,sp,256
    10f4:	8500                	0x8500
    10f6:	4c00                	lw	s0,24(s0)
    10f8:	0005                	c.nop	1
    10fa:	ea00                	fsw	fs0,16(a2)
    10fc:	0005                	c.nop	1
    10fe:	0200                	addi	s0,sp,256
    1100:	8500                	0x8500
	...
    110a:	7c00                	flw	fs0,56(s0)
    110c:	0004                	0x4
    110e:	3600                	fld	fs0,40(a2)
    1110:	0005                	c.nop	1
    1112:	0200                	addi	s0,sp,256
    1114:	8600                	0x8600
    1116:	4c00                	lw	s0,24(s0)
    1118:	0005                	c.nop	1
    111a:	ea00                	fsw	fs0,16(a2)
    111c:	0005                	c.nop	1
    111e:	0200                	addi	s0,sp,256
    1120:	8600                	0x8600
	...
    112a:	7600                	flw	fs0,40(a2)
    112c:	0005                	c.nop	1
    112e:	7700                	flw	fs0,40(a4)
    1130:	0005                	c.nop	1
    1132:	0100                	addi	s0,sp,128
    1134:	5a00                	lw	s0,48(a2)
    1136:	00000577          	0x577
    113a:	05d8                	addi	a4,sp,708
    113c:	0000                	unimp
    113e:	0001                	nop
    1140:	0000006b          	0x6b
    1144:	0000                	unimp
    1146:	0000                	unimp
    1148:	7c00                	flw	fs0,56(s0)
    114a:	0004                	0x4
    114c:	1e00                	addi	s0,sp,816
    114e:	0005                	c.nop	1
    1150:	0200                	addi	s0,sp,256
    1152:	8200                	0x8200
    1154:	1e00                	addi	s0,sp,816
    1156:	0005                	c.nop	1
    1158:	3600                	fld	fs0,40(a2)
    115a:	0005                	c.nop	1
    115c:	0c00                	addi	s0,sp,528
    115e:	8600                	0x8600
    1160:	8800                	0x8800
    1162:	3201                	jal	a62 <generate_keys+0x264>
    1164:	2324                	fld	fs1,64(a4)
    1166:	1af0090f          	0x1af0090f
    116a:	4c1c                	lw	a5,24(s0)
    116c:	0005                	c.nop	1
    116e:	d800                	sw	s0,48(s0)
    1170:	0005                	c.nop	1
    1172:	0200                	addi	s0,sp,256
    1174:	8200                	0x8200
    1176:	d800                	sw	s0,48(s0)
    1178:	0005                	c.nop	1
    117a:	ea00                	fsw	fs0,16(a2)
    117c:	0005                	c.nop	1
    117e:	0c00                	addi	s0,sp,528
    1180:	8600                	0x8600
    1182:	8800                	0x8800
    1184:	3201                	jal	a84 <generate_keys+0x286>
    1186:	2324                	fld	fs1,64(a4)
    1188:	1af0090f          	0x1af0090f
    118c:	001c                	0x1c
    118e:	0000                	unimp
    1190:	0000                	unimp
    1192:	0000                	unimp
    1194:	9600                	0x9600
    1196:	0004                	0x4
    1198:	a800                	fsd	fs0,16(s0)
    119a:	0004                	0x4
    119c:	0200                	addi	s0,sp,256
    119e:	8700                	0x8700
    11a0:	a800                	fsd	fs0,16(s0)
    11a2:	0004                	0x4
    11a4:	2600                	fld	fs0,8(a2)
    11a6:	0005                	c.nop	1
    11a8:	0200                	addi	s0,sp,256
    11aa:	7200                	flw	fs0,32(a2)
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	0005                	c.nop	1
    11b0:	3800                	fld	fs0,48(s0)
    11b2:	0005                	c.nop	1
    11b4:	0200                	addi	s0,sp,256
    11b6:	8700                	0x8700
    11b8:	4c00                	lw	s0,24(s0)
    11ba:	0005                	c.nop	1
    11bc:	ea00                	fsw	fs0,16(a2)
    11be:	0005                	c.nop	1
    11c0:	0200                	addi	s0,sp,256
    11c2:	7200                	flw	fs0,32(a2)
	...
    11cc:	7c00                	flw	fs0,56(s0)
    11ce:	0004                	0x4
    11d0:	3a00                	fld	fs0,48(a2)
    11d2:	0005                	c.nop	1
    11d4:	0100                	addi	s0,sp,128
    11d6:	6800                	flw	fs0,16(s0)
    11d8:	053a                	slli	a0,a0,0xe
    11da:	0000                	unimp
    11dc:	054c                	addi	a1,sp,644
    11de:	0000                	unimp
    11e0:	0006                	c.slli	zero,0x1
    11e2:	315b01f3          	0x315b01f3
    11e6:	9f1c                	0x9f1c
    11e8:	054c                	addi	a1,sp,644
    11ea:	0000                	unimp
    11ec:	05ea                	slli	a1,a1,0x1a
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0068                	addi	a0,sp,12
    11f4:	0000                	unimp
    11f6:	0000                	unimp
    11f8:	0000                	unimp
    11fa:	7c00                	flw	fs0,56(s0)
    11fc:	0004                	0x4
    11fe:	3a00                	fld	fs0,48(a2)
    1200:	0005                	c.nop	1
    1202:	0100                	addi	s0,sp,128
    1204:	6800                	flw	fs0,16(s0)
    1206:	053a                	slli	a0,a0,0xe
    1208:	0000                	unimp
    120a:	054c                	addi	a1,sp,644
    120c:	0000                	unimp
    120e:	0006                	c.slli	zero,0x1
    1210:	315b01f3          	0x315b01f3
    1214:	9f1c                	0x9f1c
    1216:	054c                	addi	a1,sp,644
    1218:	0000                	unimp
    121a:	05ea                	slli	a1,a1,0x1a
    121c:	0000                	unimp
    121e:	0001                	nop
    1220:	0068                	addi	a0,sp,12
    1222:	0000                	unimp
    1224:	0000                	unimp
    1226:	0000                	unimp
    1228:	7c00                	flw	fs0,56(s0)
    122a:	0004                	0x4
    122c:	3a00                	fld	fs0,48(a2)
    122e:	0005                	c.nop	1
    1230:	0100                	addi	s0,sp,128
    1232:	6800                	flw	fs0,16(s0)
    1234:	053a                	slli	a0,a0,0xe
    1236:	0000                	unimp
    1238:	054c                	addi	a1,sp,644
    123a:	0000                	unimp
    123c:	0006                	c.slli	zero,0x1
    123e:	315b01f3          	0x315b01f3
    1242:	9f1c                	0x9f1c
    1244:	054c                	addi	a1,sp,644
    1246:	0000                	unimp
    1248:	05ea                	slli	a1,a1,0x1a
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0068                	addi	a0,sp,12
    1250:	0000                	unimp
    1252:	0000                	unimp
    1254:	0000                	unimp
    1256:	8a00                	0x8a00
    1258:	0004                	0x4
    125a:	ac00                	fsd	fs0,24(s0)
    125c:	0004                	0x4
    125e:	0100                	addi	s0,sp,128
    1260:	6900                	flw	fs0,16(a0)
    1262:	04ac                	addi	a1,sp,584
    1264:	0000                	unimp
    1266:	04c6                	slli	s1,s1,0x11
    1268:	0000                	unimp
    126a:	7f840003          	lb	zero,2040(s0) # 167f8 <_stack_start+0x67f8>
    126e:	c69f 0004 dc00      	0xdc000004c69f
    1274:	0004                	0x4
    1276:	0100                	addi	s0,sp,128
    1278:	6900                	flw	fs0,16(a0)
    127a:	04dc                	addi	a5,sp,580
    127c:	0000                	unimp
    127e:	0532                	slli	a0,a0,0xc
    1280:	0000                	unimp
    1282:	7f840003          	lb	zero,2040(s0)
    1286:	329f 0005 4c00      	0x4c000005329f
    128c:	0005                	c.nop	1
    128e:	0600                	addi	s0,sp,768
    1290:	f300                	fsw	fs0,32(a4)
    1292:	5d01                	li	s10,-32
    1294:	1c31                	addi	s8,s8,-20
    1296:	4c9f 0005 ea00      	0xea0000054c9f
    129c:	0005                	c.nop	1
    129e:	0300                	addi	s0,sp,384
    12a0:	8400                	0x8400
    12a2:	9f7f                	0x9f7f
	...
    12ac:	02d2                	slli	t0,t0,0x14
    12ae:	0000                	unimp
    12b0:	034e                	slli	t1,t1,0x13
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	4e5a                	lw	t3,148(sp)
    12b8:	53000003          	lb	zero,1328(zero) # 530 <polydiv+0x100>
    12bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12c0:	5b00                	lw	s0,48(a4)
    12c2:	00000353          	fadd.s	ft6,ft0,ft0,rne
    12c6:	037a                	slli	t1,t1,0x1e
    12c8:	0000                	unimp
    12ca:	0004                	0x4
    12cc:	9f5a01f3          	0x9f5a01f3
    12d0:	037a                	slli	t1,t1,0x1e
    12d2:	0000                	unimp
    12d4:	039c                	addi	a5,sp,448
    12d6:	0000                	unimp
    12d8:	0001                	nop
    12da:	9c5a                	add	s8,s8,s6
    12dc:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x2e>
    12e0:	0004                	0x4
    12e2:	0400                	addi	s0,sp,512
    12e4:	f300                	fsw	fs0,32(a4)
    12e6:	5a01                	li	s4,-32
    12e8:	009f 0000 0000      	0x9f
    12ee:	0000                	unimp
    12f0:	d200                	sw	s0,32(a2)
    12f2:	0002                	c.slli64	zero
    12f4:	4c00                	lw	s0,24(s0)
    12f6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    12fa:	5b00                	lw	s0,48(a4)
    12fc:	034c                	addi	a1,sp,388
    12fe:	0000                	unimp
    1300:	00000353          	fadd.s	ft6,ft0,ft0,rne
    1304:	0001                	nop
    1306:	535c                	lw	a5,36(a4)
    1308:	7a000003          	lb	zero,1952(zero) # 7a0 <ext_euclid+0x1b6>
    130c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1310:	8800                	0x8800
    1312:	9f01                	0x9f01
    1314:	037a                	slli	t1,t1,0x1e
    1316:	0000                	unimp
    1318:	039c                	addi	a5,sp,448
    131a:	0000                	unimp
    131c:	0001                	nop
    131e:	00039c5b          	0x39c5b
    1322:	e800                	fsw	fs0,16(s0)
    1324:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1328:	8800                	0x8800
    132a:	9f01                	0x9f01
    132c:	03e8                	addi	a0,sp,460
    132e:	0000                	unimp
    1330:	0430                	addi	a2,sp,520
    1332:	0000                	unimp
    1334:	0004                	0x4
    1336:	9f5b01f3          	0x9f5b01f3
	...
    1342:	02d2                	slli	t0,t0,0x14
    1344:	0000                	unimp
    1346:	0344                	addi	s1,sp,388
    1348:	0000                	unimp
    134a:	0001                	nop
    134c:	445c                	lw	a5,12(s0)
    134e:	53000003          	lb	zero,1328(zero) # 530 <polydiv+0x100>
    1352:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1356:	6000                	flw	fs0,0(s0)
    1358:	00000353          	fadd.s	ft6,ft0,ft0,rne
    135c:	037a                	slli	t1,t1,0x1e
    135e:	0000                	unimp
    1360:	bc780003          	lb	zero,-1081(a6)
    1364:	7a7f                	0x7a7f
    1366:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    136a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    136e:	6000                	flw	fs0,0(s0)
    1370:	039c                	addi	a5,sp,448
    1372:	0000                	unimp
    1374:	03d8                	addi	a4,sp,452
    1376:	0000                	unimp
    1378:	bc780003          	lb	zero,-1081(a6)
    137c:	d87f                	0xd87f
    137e:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x2e>
    1382:	0004                	0x4
    1384:	0300                	addi	s0,sp,384
    1386:	9100                	0x9100
    1388:	7fbc                	flw	fa5,120(a5)
	...
    1392:	02d2                	slli	t0,t0,0x14
    1394:	0000                	unimp
    1396:	033a                	slli	t1,t1,0xe
    1398:	0000                	unimp
    139a:	0001                	nop
    139c:	3a5d                	jal	d52 <memcpy+0xa2>
    139e:	e0000003          	lb	zero,-512(zero) # fffffe00 <_stack_start+0xfffefe00>
    13a2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13a6:	6400                	flw	fs0,8(s0)
    13a8:	03e0                	addi	s0,sp,460
    13aa:	0000                	unimp
    13ac:	03fa                	slli	t2,t2,0x1e
    13ae:	0000                	unimp
    13b0:	0004                	0x4
    13b2:	9f5d01f3          	0x9f5d01f3
    13b6:	03fa                	slli	t2,t2,0x1e
    13b8:	0000                	unimp
    13ba:	0430                	addi	a2,sp,520
    13bc:	0000                	unimp
    13be:	0001                	nop
    13c0:	0064                	addi	s1,sp,12
    13c2:	0000                	unimp
    13c4:	0000                	unimp
    13c6:	0000                	unimp
    13c8:	d200                	sw	s0,32(a2)
    13ca:	0002                	c.slli64	zero
    13cc:	3c00                	fld	fs0,56(s0)
    13ce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    13d2:	5e00                	lw	s0,56(a2)
    13d4:	033c                	addi	a5,sp,392
    13d6:	0000                	unimp
    13d8:	03ee                	slli	t2,t2,0x1b
    13da:	0000                	unimp
    13dc:	0001                	nop
    13de:	0003ee6b          	0x3ee6b
    13e2:	fa00                	fsw	fs0,48(a2)
    13e4:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    13e8:	f300                	fsw	fs0,32(a4)
    13ea:	5e01                	li	t3,-32
    13ec:	fa9f 0003 3000      	0x30000003fa9f
    13f2:	0004                	0x4
    13f4:	0100                	addi	s0,sp,128
    13f6:	6b00                	flw	fs0,16(a4)
	...
    1400:	032e                	slli	t1,t1,0xb
    1402:	0000                	unimp
    1404:	0372                	slli	t1,t1,0x1c
    1406:	0000                	unimp
    1408:	0002                	c.slli64	zero
    140a:	0082                	c.slli64	ra
    140c:	0372                	slli	t1,t1,0x1c
    140e:	0000                	unimp
    1410:	037a                	slli	t1,t1,0x1e
    1412:	0000                	unimp
    1414:	0002                	c.slli64	zero
    1416:	0089                	addi	ra,ra,2
    1418:	037a                	slli	t1,t1,0x1e
    141a:	0000                	unimp
    141c:	039c                	addi	a5,sp,448
    141e:	0000                	unimp
    1420:	0002                	c.slli64	zero
    1422:	0082                	c.slli64	ra
    1424:	039c                	addi	a5,sp,448
    1426:	0000                	unimp
    1428:	03cc                	addi	a1,sp,452
    142a:	0000                	unimp
    142c:	0002                	c.slli64	zero
    142e:	0089                	addi	ra,ra,2
    1430:	03fa                	slli	t2,t2,0x1e
    1432:	0000                	unimp
    1434:	0422                	slli	s0,s0,0x8
    1436:	0000                	unimp
    1438:	0002                	c.slli64	zero
    143a:	0089                	addi	ra,ra,2
	...
    1444:	0336                	slli	t1,t1,0xd
    1446:	0000                	unimp
    1448:	0344                	addi	s1,sp,388
    144a:	0000                	unimp
    144c:	0002                	c.slli64	zero
    144e:	9f30                	0x9f30
    1450:	0344                	addi	s1,sp,388
    1452:	0000                	unimp
    1454:	00000353          	fadd.s	ft6,ft0,ft0,rne
    1458:	0001                	nop
    145a:	7a5e                	flw	fs4,244(sp)
    145c:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    1460:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1464:	5e00                	lw	s0,56(a2)
    1466:	03cc                	addi	a1,sp,452
    1468:	0000                	unimp
    146a:	03da                	slli	t2,t2,0x16
    146c:	0000                	unimp
    146e:	0001                	nop
    1470:	2259                	jal	15f6 <result+0x42>
    1472:	0004                	0x4
    1474:	3000                	fld	fs0,32(s0)
    1476:	0004                	0x4
    1478:	0100                	addi	s0,sp,128
    147a:	5900                	lw	s0,48(a0)
	...
    1484:	0372                	slli	t1,t1,0x1c
    1486:	0000                	unimp
    1488:	037a                	slli	t1,t1,0x1e
    148a:	0000                	unimp
    148c:	0001                	nop
    148e:	7a65                	lui	s4,0xffff9
    1490:	96000003          	lb	zero,-1696(zero) # fffff960 <_stack_start+0xfffef960>
    1494:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1498:	5f00                	lw	s0,56(a4)
    149a:	039c                	addi	a5,sp,448
    149c:	0000                	unimp
    149e:	03e2                	slli	t2,t2,0x18
    14a0:	0000                	unimp
    14a2:	0001                	nop
    14a4:	fa65                	bnez	a2,1494 <product2+0x138>
    14a6:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x2e>
    14aa:	0004                	0x4
    14ac:	0100                	addi	s0,sp,128
    14ae:	6500                	flw	fs0,8(a0)
	...
    14b8:	039c                	addi	a5,sp,448
    14ba:	0000                	unimp
    14bc:	03ae                	slli	t2,t2,0xb
    14be:	0000                	unimp
    14c0:	0001                	nop
    14c2:	ae5f 0003 b400      	0xb4000003ae5f
    14c8:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    14cc:	7f00                	flw	fs0,56(a4)
    14ce:	9f01                	0x9f01
    14d0:	03b4                	addi	a3,sp,456
    14d2:	0000                	unimp
    14d4:	03be                	slli	t2,t2,0xf
    14d6:	0000                	unimp
    14d8:	0001                	nop
    14da:	fe5f 0003 1000      	0x10000003fe5f
    14e0:	0004                	0x4
    14e2:	0100                	addi	s0,sp,128
    14e4:	5f00                	lw	s0,56(a4)
    14e6:	0410                	addi	a2,sp,512
    14e8:	0000                	unimp
    14ea:	0416                	slli	s0,s0,0x5
    14ec:	0000                	unimp
    14ee:	017f0003          	lb	zero,23(t5) # 1b017 <_stack_start+0xb017>
    14f2:	169f 0004 2200      	0x22000004169f
    14f8:	0004                	0x4
    14fa:	0100                	addi	s0,sp,128
    14fc:	5f00                	lw	s0,56(a4)
	...
    1506:	03d0                	addi	a2,sp,452
    1508:	0000                	unimp
    150a:	03fa                	slli	t2,t2,0x1e
    150c:	0000                	unimp
    150e:	0006                	c.slli	zero,0x1
    1510:	00135c03          	lhu	s8,1(t1)
    1514:	9f00                	0x9f00
	...
    151e:	0334                	addi	a3,sp,392
    1520:	0000                	unimp
    1522:	03ec                	addi	a1,sp,460
    1524:	0000                	unimp
    1526:	0002                	c.slli64	zero
    1528:	008a                	slli	ra,ra,0x2
    152a:	03fa                	slli	t2,t2,0x1e
    152c:	0000                	unimp
    152e:	0430                	addi	a2,sp,520
    1530:	0000                	unimp
    1532:	0002                	c.slli64	zero
    1534:	008a                	slli	ra,ra,0x2
	...
    153e:	0336                	slli	t1,t1,0xd
    1540:	0000                	unimp
    1542:	03d4                	addi	a3,sp,452
    1544:	0000                	unimp
    1546:	0002                	c.slli64	zero
    1548:	0072                	c.slli	zero,0x1c
    154a:	03d4                	addi	a3,sp,452
    154c:	0000                	unimp
    154e:	03e0                	addi	s0,sp,460
    1550:	0000                	unimp
    1552:	000c                	0xc
    1554:	008a                	slli	ra,ra,0x2
    1556:	0084                	addi	s1,sp,64
    1558:	2432                	fld	fs0,264(sp)
    155a:	f0090f23          	sb	zero,-226(s2)
    155e:	1c1a                	slli	s8,s8,0x26
    1560:	03e0                	addi	s0,sp,460
    1562:	0000                	unimp
    1564:	03ec                	addi	a1,sp,460
    1566:	0000                	unimp
    1568:	000d                	c.nop	3
    156a:	008a                	slli	ra,ra,0x2
    156c:	325d01f3          	0x325d01f3
    1570:	2324                	fld	fs1,64(a4)
    1572:	1af0090f          	0x1af0090f
    1576:	fa1c                	fsw	fa5,48(a2)
    1578:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x2e>
    157c:	0004                	0x4
    157e:	0200                	addi	s0,sp,256
    1580:	7200                	flw	fs0,32(a2)
	...
    158a:	2e00                	fld	fs0,24(a2)
    158c:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x136>
    1590:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1594:	6500                	flw	fs0,8(a0)
    1596:	0372                	slli	t1,t1,0x1c
    1598:	0000                	unimp
    159a:	037a                	slli	t1,t1,0x1e
    159c:	0000                	unimp
    159e:	7f840003          	lb	zero,2040(s0)
    15a2:	7a9f 0003 9c00      	0x9c0000037a9f
    15a8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ac:	6500                	flw	fs0,8(a0)
    15ae:	039c                	addi	a5,sp,448
    15b0:	0000                	unimp
    15b2:	03e0                	addi	s0,sp,460
    15b4:	0000                	unimp
    15b6:	7f840003          	lb	zero,2040(s0)
    15ba:	e09f 0003 fa00      	0xfa000003e09f
    15c0:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    15c4:	f300                	fsw	fs0,32(a4)
    15c6:	5d01                	li	s10,-32
    15c8:	1c31                	addi	s8,s8,-20
    15ca:	fa9f 0003 3000      	0x30000003fa9f
    15d0:	0004                	0x4
    15d2:	0300                	addi	s0,sp,384
    15d4:	8400                	0x8400
    15d6:	9f7f                	0x9f7f
	...
    15e0:	02e6                	slli	t0,t0,0x19
    15e2:	0000                	unimp
    15e4:	03de                	slli	t2,t2,0x17
    15e6:	0000                	unimp
    15e8:	0001                	nop
    15ea:	0003de63          	bgez	t2,1606 <result+0x52>
    15ee:	e000                	fsw	fs0,0(s0)
    15f0:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    15f4:	8400                	0x8400
    15f6:	8800                	0x8800
    15f8:	2200                	fld	fs0,0(a2)
    15fa:	e09f 0003 e800      	0xe8000003e09f
    1600:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1604:	8800                	0x8800
    1606:	f300                	fsw	fs0,32(a4)
    1608:	5d01                	li	s10,-32
    160a:	9f22                	add	t5,t5,s0
    160c:	03e8                	addi	a0,sp,460
    160e:	0000                	unimp
    1610:	03fa                	slli	t2,t2,0x1e
    1612:	0000                	unimp
    1614:	000a                	c.slli	zero,0x2
    1616:	f35b01f3          	0xf35b01f3
    161a:	5d01                	li	s10,-32
    161c:	3122                	fld	ft2,40(sp)
    161e:	9f1c                	0x9f1c
    1620:	03fa                	slli	t2,t2,0x1e
    1622:	0000                	unimp
    1624:	0430                	addi	a2,sp,520
    1626:	0000                	unimp
    1628:	0001                	nop
    162a:	00000063          	beqz	zero,162a <result+0x76>
    162e:	0000                	unimp
    1630:	0000                	unimp
    1632:	3400                	fld	fs0,40(s0)
    1634:	e8000003          	lb	zero,-384(zero) # fffffe80 <_stack_start+0xfffefe80>
    1638:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    163c:	6800                	flw	fs0,16(s0)
    163e:	03e8                	addi	a0,sp,460
    1640:	0000                	unimp
    1642:	03fa                	slli	t2,t2,0x1e
    1644:	0000                	unimp
    1646:	0006                	c.slli	zero,0x1
    1648:	315b01f3          	0x315b01f3
    164c:	9f1c                	0x9f1c
    164e:	03fa                	slli	t2,t2,0x1e
    1650:	0000                	unimp
    1652:	0430                	addi	a2,sp,520
    1654:	0000                	unimp
    1656:	0001                	nop
    1658:	0068                	addi	a0,sp,12
    165a:	0000                	unimp
    165c:	0000                	unimp
    165e:	0000                	unimp
    1660:	3400                	fld	fs0,40(s0)
    1662:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x136>
    1666:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    166a:	6500                	flw	fs0,8(a0)
    166c:	0372                	slli	t1,t1,0x1c
    166e:	0000                	unimp
    1670:	037a                	slli	t1,t1,0x1e
    1672:	0000                	unimp
    1674:	7f840003          	lb	zero,2040(s0)
    1678:	7a9f 0003 9c00      	0x9c0000037a9f
    167e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1682:	6500                	flw	fs0,8(a0)
    1684:	039c                	addi	a5,sp,448
    1686:	0000                	unimp
    1688:	03e0                	addi	s0,sp,460
    168a:	0000                	unimp
    168c:	7f840003          	lb	zero,2040(s0)
    1690:	e09f 0003 fa00      	0xfa000003e09f
    1696:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    169a:	f300                	fsw	fs0,32(a4)
    169c:	5d01                	li	s10,-32
    169e:	1c31                	addi	s8,s8,-20
    16a0:	fa9f 0003 3000      	0x30000003fa9f
    16a6:	0004                	0x4
    16a8:	0300                	addi	s0,sp,384
    16aa:	8400                	0x8400
    16ac:	9f7f                	0x9f7f
	...
    16b6:	0100                	addi	s0,sp,128
    16b8:	0000                	unimp
    16ba:	0180                	addi	s0,sp,192
    16bc:	0000                	unimp
    16be:	0001                	nop
    16c0:	805a                	c.mv	zero,s6
    16c2:	0001                	nop
    16c4:	9100                	0x9100
    16c6:	0001                	nop
    16c8:	0100                	addi	s0,sp,128
    16ca:	5b00                	lw	s0,48(a4)
    16cc:	0191                	addi	gp,gp,4
    16ce:	0000                	unimp
    16d0:	01d2                	slli	gp,gp,0x14
    16d2:	0000                	unimp
    16d4:	0004                	0x4
    16d6:	9f5a01f3          	0x9f5a01f3
    16da:	01d2                	slli	gp,gp,0x14
    16dc:	0000                	unimp
    16de:	01f4                	addi	a3,sp,204
    16e0:	0000                	unimp
    16e2:	0001                	nop
    16e4:	f45a                	fsw	fs6,40(sp)
    16e6:	0001                	nop
    16e8:	d200                	sw	s0,32(a2)
    16ea:	0002                	c.slli64	zero
    16ec:	0400                	addi	s0,sp,512
    16ee:	f300                	fsw	fs0,32(a4)
    16f0:	5a01                	li	s4,-32
    16f2:	009f 0000 0000      	0x9f
    16f8:	0000                	unimp
    16fa:	0000                	unimp
    16fc:	0001                	nop
    16fe:	6e00                	flw	fs0,24(a2)
    1700:	0001                	nop
    1702:	0100                	addi	s0,sp,128
    1704:	5b00                	lw	s0,48(a4)
    1706:	016e                	slli	sp,sp,0x1b
    1708:	0000                	unimp
    170a:	022e                	slli	tp,tp,0xb
    170c:	0000                	unimp
    170e:	0001                	nop
    1710:	2e65                	jal	1ac8 <random_keys+0x12c>
    1712:	0002                	c.slli64	zero
    1714:	4600                	lw	s0,8(a2)
    1716:	0002                	c.slli64	zero
    1718:	0700                	addi	s0,sp,896
    171a:	9100                	0x9100
    171c:	7fbc                	flw	fa5,120(a5)
    171e:	2306                	fld	ft6,64(sp)
    1720:	9f01                	0x9f01
    1722:	0246                	slli	tp,tp,0x11
    1724:	0000                	unimp
    1726:	02d2                	slli	t0,t0,0x14
    1728:	0000                	unimp
    172a:	0001                	nop
    172c:	0065                	c.nop	25
	...
    1736:	0001                	nop
    1738:	7600                	flw	fs0,40(a2)
    173a:	0001                	nop
    173c:	0100                	addi	s0,sp,128
    173e:	5c00                	lw	s0,56(s0)
    1740:	0176                	slli	sp,sp,0x1d
    1742:	0000                	unimp
    1744:	0191                	addi	gp,gp,4
    1746:	0000                	unimp
    1748:	0001                	nop
    174a:	9160                	0x9160
    174c:	0001                	nop
    174e:	d200                	sw	s0,32(a2)
    1750:	0001                	nop
    1752:	0300                	addi	s0,sp,384
    1754:	7800                	flw	fs0,48(s0)
    1756:	7fb4                	flw	fa3,120(a5)
    1758:	01d2                	slli	gp,gp,0x14
    175a:	0000                	unimp
    175c:	01f4                	addi	a3,sp,204
    175e:	0000                	unimp
    1760:	0001                	nop
    1762:	f460                	fsw	fs0,108(s0)
    1764:	0001                	nop
    1766:	2400                	fld	fs0,8(s0)
    1768:	0002                	c.slli64	zero
    176a:	0300                	addi	s0,sp,384
    176c:	7800                	flw	fs0,48(s0)
    176e:	7fb4                	flw	fa3,120(a5)
    1770:	0224                	addi	s1,sp,264
    1772:	0000                	unimp
    1774:	02d2                	slli	t0,t0,0x14
    1776:	0000                	unimp
    1778:	b4910003          	lb	zero,-1207(sp)
    177c:	007f                	0x7f
	...
    1786:	0001                	nop
    1788:	0a00                	addi	s0,sp,272
    178a:	0001                	nop
    178c:	0100                	addi	s0,sp,128
    178e:	5d00                	lw	s0,56(a0)
    1790:	010a                	slli	sp,sp,0x2
    1792:	0000                	unimp
    1794:	0228                	addi	a0,sp,264
    1796:	0000                	unimp
    1798:	0001                	nop
    179a:	2862                	fld	fa6,24(sp)
    179c:	0002                	c.slli64	zero
    179e:	4600                	lw	s0,8(a2)
    17a0:	0002                	c.slli64	zero
    17a2:	0400                	addi	s0,sp,512
    17a4:	f300                	fsw	fs0,32(a4)
    17a6:	5d01                	li	s10,-32
    17a8:	469f 0002 d200      	0xd2000002469f
    17ae:	0002                	c.slli64	zero
    17b0:	0100                	addi	s0,sp,128
    17b2:	6200                	flw	fs0,0(a2)
	...
    17bc:	0100                	addi	s0,sp,128
    17be:	0000                	unimp
    17c0:	0126                	slli	sp,sp,0x9
    17c2:	0000                	unimp
    17c4:	0001                	nop
    17c6:	265e                	fld	fa2,464(sp)
    17c8:	0001                	nop
    17ca:	2c00                	fld	fs0,24(s0)
    17cc:	0002                	c.slli64	zero
    17ce:	0100                	addi	s0,sp,128
    17d0:	6400                	flw	fs0,8(s0)
    17d2:	022c                	addi	a1,sp,264
    17d4:	0000                	unimp
    17d6:	0246                	slli	tp,tp,0x11
    17d8:	0000                	unimp
    17da:	0004                	0x4
    17dc:	9f5e01f3          	0x9f5e01f3
    17e0:	0246                	slli	tp,tp,0x11
    17e2:	0000                	unimp
    17e4:	02d2                	slli	t0,t0,0x14
    17e6:	0000                	unimp
    17e8:	0001                	nop
    17ea:	0064                	addi	s1,sp,12
	...
    17f4:	0001                	nop
    17f6:	9100                	0x9100
    17f8:	0001                	nop
    17fa:	0100                	addi	s0,sp,128
    17fc:	5f00                	lw	s0,56(a4)
    17fe:	0191                	addi	gp,gp,4
    1800:	0000                	unimp
    1802:	01d2                	slli	gp,gp,0x14
    1804:	0000                	unimp
    1806:	b0780003          	lb	zero,-1273(a6)
    180a:	d27f                	0xd27f
    180c:	0001                	nop
    180e:	f400                	fsw	fs0,40(s0)
    1810:	0001                	nop
    1812:	0100                	addi	s0,sp,128
    1814:	5f00                	lw	s0,56(a4)
    1816:	01f4                	addi	a3,sp,204
    1818:	0000                	unimp
    181a:	0220                	addi	s0,sp,264
    181c:	0000                	unimp
    181e:	b0780003          	lb	zero,-1273(a6)
    1822:	207f                	0x207f
    1824:	0002                	c.slli64	zero
    1826:	4400                	lw	s0,8(s0)
    1828:	0002                	c.slli64	zero
    182a:	0200                	addi	s0,sp,256
    182c:	7200                	flw	fs0,32(a2)
    182e:	4400                	lw	s0,8(s0)
    1830:	0002                	c.slli64	zero
    1832:	4600                	lw	s0,8(a2)
    1834:	0002                	c.slli64	zero
    1836:	0300                	addi	s0,sp,384
    1838:	7200                	flw	fs0,32(a2)
    183a:	7fb0                	flw	fa2,120(a5)
    183c:	0246                	slli	tp,tp,0x11
    183e:	0000                	unimp
    1840:	02d2                	slli	t0,t0,0x14
    1842:	0000                	unimp
    1844:	b0910003          	lb	zero,-1271(sp)
    1848:	007f                	0x7f
    184a:	0000                	unimp
    184c:	0000                	unimp
    184e:	0000                	unimp
    1850:	6200                	flw	fs0,0(a2)
    1852:	0001                	nop
    1854:	7600                	flw	fs0,40(a2)
    1856:	0001                	nop
    1858:	0200                	addi	s0,sp,256
    185a:	8700                	0x8700
    185c:	7600                	flw	fs0,40(a2)
    185e:	0001                	nop
    1860:	9100                	0x9100
    1862:	0001                	nop
    1864:	0200                	addi	s0,sp,256
    1866:	7e00                	flw	fs0,56(a2)
    1868:	9100                	0x9100
    186a:	0001                	nop
    186c:	d200                	sw	s0,32(a2)
    186e:	0001                	nop
    1870:	0200                	addi	s0,sp,256
    1872:	8700                	0x8700
    1874:	d200                	sw	s0,32(a2)
    1876:	0001                	nop
    1878:	f400                	fsw	fs0,40(s0)
    187a:	0001                	nop
    187c:	0200                	addi	s0,sp,256
    187e:	7e00                	flw	fs0,56(a2)
    1880:	f400                	fsw	fs0,40(s0)
    1882:	0001                	nop
    1884:	3200                	fld	fs0,32(a2)
    1886:	0002                	c.slli64	zero
    1888:	0200                	addi	s0,sp,256
    188a:	8700                	0x8700
    188c:	3200                	fld	fs0,32(a2)
    188e:	0002                	c.slli64	zero
    1890:	4600                	lw	s0,8(a2)
    1892:	0002                	c.slli64	zero
    1894:	0400                	addi	s0,sp,512
    1896:	9100                	0x9100
    1898:	7fb8                	flw	fa4,120(a5)
    189a:	4606                	lw	a2,64(sp)
    189c:	0002                	c.slli64	zero
    189e:	d200                	sw	s0,32(a2)
    18a0:	0002                	c.slli64	zero
    18a2:	0200                	addi	s0,sp,256
    18a4:	8700                	0x8700
	...
    18ae:	6400                	flw	fs0,8(s0)
    18b0:	0001                	nop
    18b2:	7600                	flw	fs0,40(a2)
    18b4:	0001                	nop
    18b6:	0200                	addi	s0,sp,256
    18b8:	3000                	fld	fs0,32(s0)
    18ba:	769f 0001 7c00      	0x7c000001769f
    18c0:	0001                	nop
    18c2:	0100                	addi	s0,sp,128
    18c4:	5b00                	lw	s0,48(a4)
    18c6:	01d2                	slli	gp,gp,0x14
    18c8:	0000                	unimp
    18ca:	01f4                	addi	a3,sp,204
    18cc:	0000                	unimp
    18ce:	0001                	nop
    18d0:	0001fc5b          	0x1fc5b
    18d4:	0800                	addi	s0,sp,16
    18d6:	0002                	c.slli64	zero
    18d8:	0100                	addi	s0,sp,128
    18da:	5d00                	lw	s0,56(a0)
    18dc:	0292                	slli	t0,t0,0x4
    18de:	0000                	unimp
    18e0:	02b0                	addi	a2,sp,328
    18e2:	0000                	unimp
    18e4:	0001                	nop
    18e6:	b05d                	j	118c <_bss_start+0x88>
    18e8:	0002                	c.slli64	zero
    18ea:	b800                	fsd	fs0,48(s0)
    18ec:	0002                	c.slli64	zero
    18ee:	0100                	addi	s0,sp,128
    18f0:	5c00                	lw	s0,56(s0)
    18f2:	02b8                	addi	a4,sp,328
    18f4:	0000                	unimp
    18f6:	02c4                	addi	s1,sp,324
    18f8:	0000                	unimp
    18fa:	7f7c0003          	lb	zero,2039(s8)
    18fe:	c49f 0002 ce00      	0xce000002c49f
    1904:	0002                	c.slli64	zero
    1906:	0100                	addi	s0,sp,128
    1908:	5c00                	lw	s0,56(s0)
	...
    1912:	01ca                	slli	gp,gp,0x12
    1914:	0000                	unimp
    1916:	01d2                	slli	gp,gp,0x14
    1918:	0000                	unimp
    191a:	0001                	nop
    191c:	d266                	sw	s9,36(sp)
    191e:	0001                	nop
    1920:	ee00                	fsw	fs0,24(a2)
    1922:	0001                	nop
    1924:	0100                	addi	s0,sp,128
    1926:	5c00                	lw	s0,56(s0)
    1928:	01f6                	slli	gp,gp,0x1d
    192a:	0000                	unimp
    192c:	01fc                	addi	a5,sp,204
    192e:	0000                	unimp
    1930:	0001                	nop
    1932:	0a66                	slli	s4,s4,0x19
    1934:	0002                	c.slli64	zero
    1936:	1b00                	addi	s0,sp,432
    1938:	0002                	c.slli64	zero
    193a:	0100                	addi	s0,sp,128
    193c:	5e00                	lw	s0,56(a2)
    193e:	0246                	slli	tp,tp,0x11
    1940:	0000                	unimp
    1942:	0292                	slli	t0,t0,0x4
    1944:	0000                	unimp
    1946:	0001                	nop
    1948:	9266                	add	tp,tp,s9
    194a:	0002                	c.slli64	zero
    194c:	9600                	0x9600
    194e:	0002                	c.slli64	zero
    1950:	0100                	addi	s0,sp,128
    1952:	5c00                	lw	s0,56(s0)
    1954:	0296                	slli	t0,t0,0x5
    1956:	0000                	unimp
    1958:	02a0                	addi	s0,sp,328
    195a:	0000                	unimp
    195c:	7f7c0003          	lb	zero,2039(s8)
    1960:	a09f 0002 aa00      	0xaa000002a09f
    1966:	0002                	c.slli64	zero
    1968:	0100                	addi	s0,sp,128
    196a:	5c00                	lw	s0,56(s0)
    196c:	02b0                	addi	a2,sp,328
    196e:	0000                	unimp
    1970:	02d2                	slli	t0,t0,0x14
    1972:	0000                	unimp
    1974:	0001                	nop
    1976:	005e                	c.slli	zero,0x17
    1978:	0000                	unimp
    197a:	0000                	unimp
    197c:	0000                	unimp
    197e:	4600                	lw	s0,8(a2)
    1980:	0002                	c.slli64	zero
    1982:	5800                	lw	s0,48(s0)
    1984:	0002                	c.slli64	zero
    1986:	0100                	addi	s0,sp,128
    1988:	5f00                	lw	s0,56(a4)
    198a:	0258                	addi	a4,sp,260
    198c:	0000                	unimp
    198e:	025e                	slli	tp,tp,0x17
    1990:	0000                	unimp
    1992:	017f0003          	lb	zero,23(t5)
    1996:	5e9f 0002 6a00      	0x6a0000025e9f
    199c:	0002                	c.slli64	zero
    199e:	0100                	addi	s0,sp,128
    19a0:	5f00                	lw	s0,56(a4)
    19a2:	026e                	slli	tp,tp,0x1b
    19a4:	0000                	unimp
    19a6:	0280                	addi	s0,sp,320
    19a8:	0000                	unimp
    19aa:	0001                	nop
    19ac:	805f 0002 8600      	0x86000002805f
    19b2:	0002                	c.slli64	zero
    19b4:	0300                	addi	s0,sp,384
    19b6:	7f00                	flw	fs0,56(a4)
    19b8:	9f01                	0x9f01
    19ba:	0286                	slli	t0,t0,0x1
    19bc:	0000                	unimp
    19be:	0292                	slli	t0,t0,0x4
    19c0:	0000                	unimp
    19c2:	0001                	nop
    19c4:	005f 0000 0000      	0x5f
    19ca:	0000                	unimp
    19cc:	1c00                	addi	s0,sp,560
    19ce:	0002                	c.slli64	zero
    19d0:	4600                	lw	s0,8(a2)
    19d2:	0002                	c.slli64	zero
    19d4:	0600                	addi	s0,sp,768
    19d6:	0300                	addi	s0,sp,384
    19d8:	1104                	addi	s1,sp,160
    19da:	0000                	unimp
    19dc:	009f 0000 0000      	0x9f
    19e2:	0000                	unimp
    19e4:	6200                	flw	fs0,0(a2)
    19e6:	0001                	nop
    19e8:	3a00                	fld	fs0,48(a2)
    19ea:	0002                	c.slli64	zero
    19ec:	0200                	addi	s0,sp,256
    19ee:	8b00                	0x8b00
    19f0:	3a00                	fld	fs0,48(a2)
    19f2:	0002                	c.slli64	zero
    19f4:	4600                	lw	s0,8(a2)
    19f6:	0002                	c.slli64	zero
    19f8:	1200                	addi	s0,sp,288
    19fa:	9100                	0x9100
    19fc:	7fb8                	flw	fa4,120(a5)
    19fe:	9106                	add	sp,sp,ra
    1a00:	7fbc                	flw	fa5,120(a5)
    1a02:	2306                	fld	ft6,64(sp)
    1a04:	3201                	jal	1304 <_bss_start+0x200>
    1a06:	2324                	fld	fs1,64(a4)
    1a08:	1af0090f          	0x1af0090f
    1a0c:	461c                	lw	a5,8(a2)
    1a0e:	0002                	c.slli64	zero
    1a10:	d200                	sw	s0,32(a2)
    1a12:	0002                	c.slli64	zero
    1a14:	0200                	addi	s0,sp,256
    1a16:	8b00                	0x8b00
	...
    1a20:	6400                	flw	fs0,8(s0)
    1a22:	0001                	nop
    1a24:	2000                	fld	fs0,0(s0)
    1a26:	0002                	c.slli64	zero
    1a28:	0200                	addi	s0,sp,256
    1a2a:	7200                	flw	fs0,32(a2)
    1a2c:	2000                	fld	fs0,0(s0)
    1a2e:	0002                	c.slli64	zero
    1a30:	2800                	fld	fs0,16(s0)
    1a32:	0002                	c.slli64	zero
    1a34:	0c00                	addi	s0,sp,528
    1a36:	8b00                	0x8b00
    1a38:	8200                	0x8200
    1a3a:	3200                	fld	fs0,32(a2)
    1a3c:	2324                	fld	fs1,64(a4)
    1a3e:	1af0090f          	0x1af0090f
    1a42:	281c                	fld	fa5,16(s0)
    1a44:	0002                	c.slli64	zero
    1a46:	3a00                	fld	fs0,48(a2)
    1a48:	0002                	c.slli64	zero
    1a4a:	0d00                	addi	s0,sp,656
    1a4c:	8b00                	0x8b00
    1a4e:	f300                	fsw	fs0,32(a4)
    1a50:	5d01                	li	s10,-32
    1a52:	2432                	fld	fs0,264(sp)
    1a54:	f0090f23          	sb	zero,-226(s2)
    1a58:	1c1a                	slli	s8,s8,0x26
    1a5a:	023a                	slli	tp,tp,0xe
    1a5c:	0000                	unimp
    1a5e:	0246                	slli	tp,tp,0x11
    1a60:	0000                	unimp
    1a62:	001d                	c.nop	7
    1a64:	b891                	j	12b8 <_bss_start+0x1b4>
    1a66:	067f                	0x67f
    1a68:	bc91                	j	14bc <product2+0x160>
    1a6a:	067f                	0x67f
    1a6c:	24320123          	sb	gp,578(tp) # 242 <polymult+0x142>
    1a70:	f0090f23          	sb	zero,-226(s2)
    1a74:	1c1a                	slli	s8,s8,0x26
    1a76:	325d01f3          	0x325d01f3
    1a7a:	2324                	fld	fs1,64(a4)
    1a7c:	1af0090f          	0x1af0090f
    1a80:	461c                	lw	a5,8(a2)
    1a82:	0002                	c.slli64	zero
    1a84:	d200                	sw	s0,32(a2)
    1a86:	0002                	c.slli64	zero
    1a88:	0200                	addi	s0,sp,256
    1a8a:	7200                	flw	fs0,32(a2)
	...
    1a94:	6200                	flw	fs0,0(a2)
    1a96:	0001                	nop
    1a98:	ca00                	sw	s0,16(a2)
    1a9a:	0001                	nop
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	6600                	flw	fs0,8(a2)
    1aa0:	01ca                	slli	gp,gp,0x12
    1aa2:	0000                	unimp
    1aa4:	01d2                	slli	gp,gp,0x14
    1aa6:	0000                	unimp
    1aa8:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1aac:	d29f 0001 f600      	0xf6000001d29f
    1ab2:	0001                	nop
    1ab4:	0100                	addi	s0,sp,128
    1ab6:	6600                	flw	fs0,8(a2)
    1ab8:	01f6                	slli	gp,gp,0x1d
    1aba:	0000                	unimp
    1abc:	0228                	addi	a0,sp,264
    1abe:	0000                	unimp
    1ac0:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1ac4:	289f 0002 4600      	0x46000002289f
    1aca:	0002                	c.slli64	zero
    1acc:	0600                	addi	s0,sp,768
    1ace:	f300                	fsw	fs0,32(a4)
    1ad0:	5d01                	li	s10,-32
    1ad2:	1c31                	addi	s8,s8,-20
    1ad4:	469f 0002 d200      	0xd2000002469f
    1ada:	0002                	c.slli64	zero
    1adc:	0300                	addi	s0,sp,384
    1ade:	8200                	0x8200
    1ae0:	9f7f                	0x9f7f
	...
    1aea:	011a                	slli	sp,sp,0x6
    1aec:	0000                	unimp
    1aee:	0236                	slli	tp,tp,0xd
    1af0:	0000                	unimp
    1af2:	0001                	nop
    1af4:	3669                	jal	167e <result+0xca>
    1af6:	0002                	c.slli64	zero
    1af8:	4600                	lw	s0,8(a2)
    1afa:	0002                	c.slli64	zero
    1afc:	0900                	addi	s0,sp,144
    1afe:	9100                	0x9100
    1b00:	7fbc                	flw	fa5,120(a5)
    1b02:	f306                	fsw	ft1,164(sp)
    1b04:	5d01                	li	s10,-32
    1b06:	9f22                	add	t5,t5,s0
    1b08:	0246                	slli	tp,tp,0x11
    1b0a:	0000                	unimp
    1b0c:	02d2                	slli	t0,t0,0x14
    1b0e:	0000                	unimp
    1b10:	0001                	nop
    1b12:	0069                	c.nop	26
    1b14:	0000                	unimp
    1b16:	0000                	unimp
    1b18:	0000                	unimp
    1b1a:	6200                	flw	fs0,0(a2)
    1b1c:	0001                	nop
    1b1e:	9100                	0x9100
    1b20:	0001                	nop
    1b22:	0100                	addi	s0,sp,128
    1b24:	5d00                	lw	s0,56(a0)
    1b26:	0191                	addi	gp,gp,4
    1b28:	0000                	unimp
    1b2a:	01d2                	slli	gp,gp,0x14
    1b2c:	0000                	unimp
    1b2e:	bc780003          	lb	zero,-1081(a6)
    1b32:	d27f                	0xd27f
    1b34:	0001                	nop
    1b36:	f400                	fsw	fs0,40(s0)
    1b38:	0001                	nop
    1b3a:	0100                	addi	s0,sp,128
    1b3c:	5d00                	lw	s0,56(a0)
    1b3e:	01f4                	addi	a3,sp,204
    1b40:	0000                	unimp
    1b42:	0224                	addi	s1,sp,264
    1b44:	0000                	unimp
    1b46:	bc780003          	lb	zero,-1081(a6)
    1b4a:	247f                	0x247f
    1b4c:	0002                	c.slli64	zero
    1b4e:	d200                	sw	s0,32(a2)
    1b50:	0002                	c.slli64	zero
    1b52:	0300                	addi	s0,sp,384
    1b54:	9100                	0x9100
    1b56:	7fbc                	flw	fa5,120(a5)
	...
    1b60:	0162                	slli	sp,sp,0x18
    1b62:	0000                	unimp
    1b64:	01ca                	slli	gp,gp,0x12
    1b66:	0000                	unimp
    1b68:	0001                	nop
    1b6a:	ca66                	sw	s9,20(sp)
    1b6c:	0001                	nop
    1b6e:	d200                	sw	s0,32(a2)
    1b70:	0001                	nop
    1b72:	0300                	addi	s0,sp,384
    1b74:	8200                	0x8200
    1b76:	9f7f                	0x9f7f
    1b78:	01d2                	slli	gp,gp,0x14
    1b7a:	0000                	unimp
    1b7c:	01f6                	slli	gp,gp,0x1d
    1b7e:	0000                	unimp
    1b80:	0001                	nop
    1b82:	f666                	fsw	fs9,44(sp)
    1b84:	0001                	nop
    1b86:	2800                	fld	fs0,16(s0)
    1b88:	0002                	c.slli64	zero
    1b8a:	0300                	addi	s0,sp,384
    1b8c:	8200                	0x8200
    1b8e:	9f7f                	0x9f7f
    1b90:	0228                	addi	a0,sp,264
    1b92:	0000                	unimp
    1b94:	0246                	slli	tp,tp,0x11
    1b96:	0000                	unimp
    1b98:	0006                	c.slli	zero,0x1
    1b9a:	315d01f3          	0x315d01f3
    1b9e:	9f1c                	0x9f1c
    1ba0:	0246                	slli	tp,tp,0x11
    1ba2:	0000                	unimp
    1ba4:	02d2                	slli	t0,t0,0x14
    1ba6:	0000                	unimp
    1ba8:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x20e>
    1bac:	009f 0000 0000      	0x9f
    1bb2:	0000                	unimp
    1bb4:	e200                	fsw	fs0,0(a2)
    1bb6:	0000                	unimp
    1bb8:	e800                	fsw	fs0,16(s0)
    1bba:	0000                	unimp
    1bbc:	0100                	addi	s0,sp,128
    1bbe:	5c00                	lw	s0,56(s0)
    1bc0:	00e8                	addi	a0,sp,76
    1bc2:	0000                	unimp
    1bc4:	0100                	addi	s0,sp,128
    1bc6:	0000                	unimp
    1bc8:	0004                	0x4
    1bca:	9f5c01f3          	0x9f5c01f3
	...
    1bd6:	00e2                	slli	ra,ra,0x18
    1bd8:	0000                	unimp
    1bda:	00ec                	addi	a1,sp,76
    1bdc:	0000                	unimp
    1bde:	0002                	c.slli64	zero
    1be0:	9f30                	0x9f30
    1be2:	00ec                	addi	a1,sp,76
    1be4:	0000                	unimp
    1be6:	0100                	addi	s0,sp,128
    1be8:	0000                	unimp
    1bea:	0001                	nop
    1bec:	005f 0000 0000      	0x5f
    1bf2:	0000                	unimp
    1bf4:	f200                	fsw	fs0,32(a2)
    1bf6:	0000                	unimp
    1bf8:	fc00                	fsw	fs0,56(s0)
    1bfa:	0000                	unimp
    1bfc:	0100                	addi	s0,sp,128
    1bfe:	5b00                	lw	s0,48(a4)
	...
    1c08:	00f2                	slli	ra,ra,0x1c
    1c0a:	0000                	unimp
    1c0c:	00fc                	addi	a5,sp,76
    1c0e:	0000                	unimp
    1c10:	0008                	0x8
    1c12:	007f                	0x7f
    1c14:	1e3c                	addi	a5,sp,824
    1c16:	007a                	c.slli	zero,0x1e
    1c18:	9f22                	add	t5,t5,s0
	...
    1c22:	00ba                	slli	ra,ra,0xe
    1c24:	0000                	unimp
    1c26:	00c0                	addi	s0,sp,68
    1c28:	0000                	unimp
    1c2a:	0001                	nop
    1c2c:	c05c                	sw	a5,4(s0)
    1c2e:	0000                	unimp
    1c30:	dc00                	sw	s0,56(s0)
    1c32:	0000                	unimp
    1c34:	0400                	addi	s0,sp,512
    1c36:	f300                	fsw	fs0,32(a4)
    1c38:	5c01                	li	s8,-32
    1c3a:	009f 0000 0000      	0x9f
    1c40:	0000                	unimp
    1c42:	ba00                	fsd	fs0,48(a2)
    1c44:	0000                	unimp
    1c46:	c400                	sw	s0,8(s0)
    1c48:	0000                	unimp
    1c4a:	0200                	addi	s0,sp,256
    1c4c:	3000                	fld	fs0,32(s0)
    1c4e:	c49f 0000 dc00      	0xdc000000c49f
    1c54:	0000                	unimp
    1c56:	0100                	addi	s0,sp,128
    1c58:	5f00                	lw	s0,56(a4)
	...
    1c62:	00ce                	slli	ra,ra,0x13
    1c64:	0000                	unimp
    1c66:	00d4                	addi	a3,sp,68
    1c68:	0000                	unimp
    1c6a:	0006                	c.slli	zero,0x1
    1c6c:	007e007b          	0x7e007b
    1c70:	9f22                	add	t5,t5,s0
    1c72:	00d4                	addi	a3,sp,68
    1c74:	0000                	unimp
    1c76:	00d8                	addi	a4,sp,68
    1c78:	0000                	unimp
    1c7a:	0001                	nop
    1c7c:	005e                	c.slli	zero,0x17
    1c7e:	0000                	unimp
    1c80:	0000                	unimp
    1c82:	0000                	unimp
    1c84:	ce00                	sw	s0,24(a2)
    1c86:	0000                	unimp
    1c88:	d200                	sw	s0,32(a2)
    1c8a:	0000                	unimp
    1c8c:	0600                	addi	s0,sp,768
    1c8e:	7a00                	flw	fs0,48(a2)
    1c90:	7e00                	flw	fs0,56(a2)
    1c92:	2200                	fld	fs0,0(a2)
    1c94:	d29f 0000 d800      	0xd8000000d29f
    1c9a:	0000                	unimp
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	5d00                	lw	s0,56(a0)
	...
    1ca8:	0092                	slli	ra,ra,0x4
    1caa:	0000                	unimp
    1cac:	0098                	addi	a4,sp,64
    1cae:	0000                	unimp
    1cb0:	0001                	nop
    1cb2:	985c                	0x985c
    1cb4:	0000                	unimp
    1cb6:	b400                	fsd	fs0,40(s0)
    1cb8:	0000                	unimp
    1cba:	0400                	addi	s0,sp,512
    1cbc:	f300                	fsw	fs0,32(a4)
    1cbe:	5c01                	li	s8,-32
    1cc0:	009f 0000 0000      	0x9f
    1cc6:	0000                	unimp
    1cc8:	9200                	0x9200
    1cca:	0000                	unimp
    1ccc:	9c00                	0x9c00
    1cce:	0000                	unimp
    1cd0:	0200                	addi	s0,sp,256
    1cd2:	3000                	fld	fs0,32(s0)
    1cd4:	9c9f 0000 b400      	0xb40000009c9f
    1cda:	0000                	unimp
    1cdc:	0100                	addi	s0,sp,128
    1cde:	5f00                	lw	s0,56(a4)
	...
    1ce8:	00a6                	slli	ra,ra,0x9
    1cea:	0000                	unimp
    1cec:	00ac                	addi	a1,sp,72
    1cee:	0000                	unimp
    1cf0:	0006                	c.slli	zero,0x1
    1cf2:	007e007b          	0x7e007b
    1cf6:	9f22                	add	t5,t5,s0
    1cf8:	00ac                	addi	a1,sp,72
    1cfa:	0000                	unimp
    1cfc:	00b0                	addi	a2,sp,72
    1cfe:	0000                	unimp
    1d00:	0001                	nop
    1d02:	005e                	c.slli	zero,0x17
    1d04:	0000                	unimp
    1d06:	0000                	unimp
    1d08:	0000                	unimp
    1d0a:	a600                	fsd	fs0,8(a2)
    1d0c:	0000                	unimp
    1d0e:	aa00                	fsd	fs0,16(a2)
    1d10:	0000                	unimp
    1d12:	0600                	addi	s0,sp,768
    1d14:	7a00                	flw	fs0,48(a2)
    1d16:	7e00                	flw	fs0,56(a2)
    1d18:	2200                	fld	fs0,0(a2)
    1d1a:	aa9f 0000 b000      	0xb0000000aa9f
    1d20:	0000                	unimp
    1d22:	0100                	addi	s0,sp,128
    1d24:	5d00                	lw	s0,56(a0)
	...
    1d2e:	008c                	addi	a1,sp,64
    1d30:	0000                	unimp
    1d32:	0090                	addi	a2,sp,64
    1d34:	0000                	unimp
    1d36:	0001                	nop
    1d38:	005a                	c.slli	zero,0x16
    1d3a:	0000                	unimp
    1d3c:	0000                	unimp
    1d3e:	0000                	unimp
    1d40:	b400                	fsd	fs0,40(s0)
    1d42:	0000                	unimp
    1d44:	b800                	fsd	fs0,48(s0)
    1d46:	0000                	unimp
    1d48:	0100                	addi	s0,sp,128
    1d4a:	5a00                	lw	s0,48(a2)
	...
    1d54:	00dc                	addi	a5,sp,68
    1d56:	0000                	unimp
    1d58:	00e0                	addi	s0,sp,76
    1d5a:	0000                	unimp
    1d5c:	0001                	nop
    1d5e:	005a                	c.slli	zero,0x16
    1d60:	0000                	unimp
    1d62:	0000                	unimp
    1d64:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0bae                	slli	s7,s7,0xb
  16:	0000                	unimp
  18:	0e36                	slli	t3,t3,0xd
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1da9                	addi	s11,s11,-22
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c3a                	slli	s8,s8,0xe
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00e8                	addi	a0,sp,76
   2:	0000                	unimp
   4:	00ea                	slli	ra,ra,0x1a
   6:	0000                	unimp
   8:	00f2                	slli	ra,ra,0x1c
   a:	0000                	unimp
   c:	00fc                	addi	a5,sp,76
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0c3a                	slli	s8,s8,0xe
  1e:	0000                	unimp
  20:	0e36                	slli	t3,t3,0xd
  22:	0000                	unimp
  24:	0f6e                	slli	t5,t5,0x1b
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0c3a                	slli	s8,s8,0xe
  3a:	0000                	unimp
  3c:	0cb0                	addi	a2,sp,600
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2054                	fld	fa3,128(s0)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x140>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x8e>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0xb8>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x19a>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xb8>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x10a>
}
      a0:	0065                	c.nop	25
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
    asm volatile(
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
}
      b8:	6564                	flw	fs1,76(a0)
    for(i=0;i<(length/3);i++) {
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
    asm volatile(
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x186>
    asm volatile(
      de:	0200                	addi	s0,sp,256
}
      e0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
    asm volatile(
      e8:	682e                	flw	fa6,200(sp)
    for(i=0;i<(length/3);i++) {
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
}
      f0:	6975                	lui	s2,0x1d
    asm volatile(
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    int line[size_b][size_a + size_b];
     10a:	0305                	addi	t1,t1,1
     10c:	00000907          	0x907
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     110:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polydiv+0x20>
    int pola[size_a];
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     132:	0305                	addi	t1,t1,1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0616                	slli	a2,a2,0x5
    int pola[size_a];
     13c:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     140:	0100                	addi	s0,sp,128
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
    int pola[size_a];
     148:	0100                	addi	s0,sp,128
    int polb[size_b];
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
     14e:	0104                	addi	s1,sp,128
    int pola[size_a];
     150:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     156:	0501                	addi	a0,a0,0
    int pola[size_a];
     158:	0005                	c.nop	1
     15a:	0402                	c.slli64	s0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     15c:	0601                	addi	a2,a2,0
    int line[size_b][size_a + size_b];
     15e:	00090003          	lb	zero,0(s2)
    int polb[size_b];
     162:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
    for (i = 0; i < size_b; ++i){
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
            product[j] = 0;
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
    for (i = 0; i < size_b; ++i){
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
    array_equ(pola,a,size_a);
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
     17e:	09700303          	lb	t1,151(zero) # 97 <array_add+0x5>
     182:	0004                	0x4
     184:	0001                	nop
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
     18c:	000a                	c.slli	zero,0x2
     18e:	0501                	addi	a0,a0,0
     190:	001a                	c.slli	zero,0x6
    array_mod(pola,mod,size_a);
     192:	0402                	c.slli64	s0
     194:	09060303          	lb	t1,144(a2) # 10090 <_stack_start+0x90>
     198:	0000                	unimp
    array_equ(polb,b,size_b);
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     1a4:	0009                	c.nop	2
    array_mod(polb,mod,size_b);
     1a6:	0100                	addi	s0,sp,128
     1a8:	3305                	jal	fffffec8 <_stack_start+0xfffefec8>
     1aa:	0306                	slli	t1,t1,0x1
     1ac:	0906                	slli	s2,s2,0x1
    if(star_mult == 1){
     1ae:	0004                	0x4
     1b0:	0501                	addi	a0,a0,0
     1b2:	0305                	addi	t1,t1,1
     1b4:	0906                	slli	s2,s2,0x1
     1b6:	0000                	unimp
     1b8:	0301                	addi	t1,t1,0
     1ba:	0909                	addi	s2,s2,2
     1bc:	0004                	0x4
     1be:	0501                	addi	a0,a0,0
     1c0:	0601                	addi	a2,a2,0
     1c2:	00090203          	lb	tp,0(s2)
     1c6:	0100                	addi	s0,sp,128
     1c8:	2c05                	jal	3f8 <polymult2+0x126>
        for (j = size_b -1; j >= 0; j = j-1){
     1ca:	0306                	slli	t1,t1,0x1
     1cc:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     1ce:	0002                	c.slli64	zero
     1d0:	0501                	addi	a0,a0,0
            product[j] = 0;
     1d2:	0301                	addi	t1,t1,0
     1d4:	0901                	addi	s2,s2,0
     1d6:	0000                	unimp
            line[i][j] = 0;
     1d8:	0501                	addi	a0,a0,0
     1da:	0305                	addi	t1,t1,1
            product[j] = 0;
     1dc:	0901                	addi	s2,s2,0
     1de:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1e0:	0501                	addi	a0,a0,0
     1e2:	0616                	slli	a2,a2,0x5
     1e4:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     1e8:	0100                	addi	s0,sp,128
     1ea:	0a05                	addi	s4,s4,1
     1ec:	08090003          	lb	zero,128(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	0100                	addi	s0,sp,128
     1f2:	0d05                	addi	s10,s10,1
    if(star_mult == 1){
     1f4:	0200                	addi	s0,sp,256
        for (j = size_b -1; j >= 0; j = j-1){
     1f6:	0104                	addi	s1,sp,128
     1f8:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	0900                	addi	s0,sp,144
    for (i = 0; i < size_b; ++i){
     1fc:	0002                	c.slli64	zero
     1fe:	0501                	addi	a0,a0,0
     200:	0005                	c.nop	1
     202:	0402                	c.slli64	s0
     204:	0601                	addi	a2,a2,0
     206:	00090003          	lb	zero,0(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     20a:	0100                	addi	s0,sp,128
     20c:	0105                	addi	sp,sp,1
    array_mod(product,mod,(size_a+size_b-1));
     20e:	04090303          	lb	t1,64(s2)
     212:	0100                	addi	s0,sp,128
     214:	0905                	addi	s2,s2,1
     216:	0200                	addi	s0,sp,256
     218:	0304                	addi	s1,sp,384
     21a:	0306                	slli	t1,t1,0x1
}
     21c:	097e                	slli	s2,s2,0x1f
     21e:	0002                	c.slli64	zero
     220:	0501                	addi	a0,a0,0
     222:	0005                	c.nop	1
     224:	0402                	c.slli64	s0
     226:	09710303          	lb	t1,151(sp)
     22a:	0004                	0x4
     22c:	0001                	nop
     22e:	0402                	c.slli64	s0
     230:	09090303          	lb	t1,144(s2)
     234:	000a                	c.slli	zero,0x2
     236:	0501                	addi	a0,a0,0
     238:	001a                	c.slli	zero,0x6
     23a:	0402                	c.slli64	s0
     23c:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     240:	0000                	unimp
     242:	0501                	addi	a0,a0,0
     244:	0402001b          	0x402001b
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	00030603          	lb	a2,0(t1)
     24c:	0009                	c.nop	2
     24e:	0100                	addi	s0,sp,128
     250:	3405                	jal	fffffc70 <_stack_start+0xfffefc70>
     252:	0306                	slli	t1,t1,0x1
     254:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     256:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     258:	0501                	addi	a0,a0,0
     25a:	0305                	addi	t1,t1,1
     25c:	0902                	c.slli64	s2
            for (k = size_a-1; k >= 0; k = k-1 ){
     25e:	0000                	unimp
     260:	0301                	addi	t1,t1,0
        for (j = size_b -1; j >= 0; j = j-1){
     262:	0909                	addi	s2,s2,2
     264:	0004                	0x4
     266:	0501                	addi	a0,a0,0
     268:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     26a:	00090103          	lb	sp,0(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     26e:	0100                	addi	s0,sp,128
     270:	2c05                	jal	4a0 <polydiv+0x70>
     272:	0306                	slli	t1,t1,0x1
     274:	0901                	addi	s2,s2,0
     276:	0002                	c.slli64	zero
     278:	0501                	addi	a0,a0,0
     27a:	0301                	addi	t1,t1,0
     27c:	0905                	addi	s2,s2,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     27e:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     280:	0501                	addi	a0,a0,0
     282:	0305                	addi	t1,t1,1
     284:	0902                	c.slli64	s2
            for (k = size_a-1; k >= 0; k = k-1 ){
     286:	0000                	unimp
     288:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     28a:	0616                	slli	a2,a2,0x5
     28c:	00090003          	lb	zero,0(s2)
     290:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     292:	0505                	addi	a0,a0,1
        for(j = 0; j < size_a + size_b -1; ++j){
     294:	06096e03          	0x6096e03
            line[i][j] = line[i][j] % mod;
     298:	0100                	addi	s0,sp,128
     29a:	0a05                	addi	s4,s4,1
     29c:	02091203          	lh	tp,32(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	0100                	addi	s0,sp,128
     2a2:	0d05                	addi	s10,s10,1
    for (i = 0; i < size_b; ++i){
     2a4:	0200                	addi	s0,sp,256
     2a6:	0104                	addi	s1,sp,128
     2a8:	0306                	slli	t1,t1,0x1
     2aa:	0900                	addi	s0,sp,144
        for(j = 0; j < size_a + size_b -1; ++j){
     2ac:	0002                	c.slli64	zero
     2ae:	0501                	addi	a0,a0,0
            product[j] += line[i][j];
     2b0:	0005                	c.nop	1
     2b2:	0402                	c.slli64	s0
     2b4:	0601                	addi	a2,a2,0
        for(i = 0; i < size_b; ++i){
     2b6:	00090003          	lb	zero,0(s2)
            product[j] += line[i][j];
     2ba:	0100                	addi	s0,sp,128
     2bc:	0105                	addi	sp,sp,1
     2be:	04090403          	lb	s0,64(s2)
     2c2:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     2c4:	0905                	addi	s2,s2,1
     2c6:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     2c8:	0304                	addi	s1,sp,384
     2ca:	0306                	slli	t1,t1,0x1
     2cc:	097d                	addi	s2,s2,31
        for(i = 0; i < size_b; ++i){
     2ce:	0002                	c.slli64	zero
     2d0:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d2:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     2d4:	0402                	c.slli64	s0
     2d6:	096d0303          	lb	t1,150(s10)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2da:	0000                	unimp
     2dc:	0001                	nop
     2de:	0402                	c.slli64	s0
     2e0:	09090303          	lb	t1,144(s2)
    int line[size_b][size_a + size_b];
     2e4:	000a                	c.slli	zero,0x2
     2e6:	0501                	addi	a0,a0,0
     2e8:	001a                	c.slli	zero,0x6
     2ea:	0402                	c.slli64	s0
     2ec:	09090303          	lb	t1,144(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2f0:	0000                	unimp
     2f2:	0501                	addi	a0,a0,0
     2f4:	0402001b          	0x402001b
     2f8:	00030603          	lb	a2,0(t1)
     2fc:	0009                	c.nop	2
     2fe:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     300:	4e05                	li	t3,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     302:	0306                	slli	t1,t1,0x1
     304:	090a                	slli	s2,s2,0x2
    int line[size_b][size_a + size_b];
     306:	0004                	0x4
     308:	0501                	addi	a0,a0,0
     30a:	0305                	addi	t1,t1,1
    int pola[size_a];
     30c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     310:	0501                	addi	a0,a0,0
     312:	064e                	slli	a2,a2,0x13
    int line[size_b][size_a + size_b];
     314:	00097d03          	0x97d03
    int pola[size_a];
     318:	0100                	addi	s0,sp,128
    int polb[size_b];
     31a:	1d05                	addi	s10,s10,-31
     31c:	08090303          	lb	t1,128(s2)
    int pola[size_a];
     320:	0100                	addi	s0,sp,128
    int polb[size_b];
     322:	4e05                	li	t3,1
     324:	06097d03          	0x6097d03
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     328:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     32a:	0905                	addi	s2,s2,1
     32c:	04090303          	lb	t1,64(s2)
    int pola[size_a];
     330:	0100                	addi	s0,sp,128
     332:	4e05                	li	t3,1
    int polb[size_b];
     334:	0c097d03          	0xc097d03
    for (i = 0; i < size_b; ++i){
     338:	0100                	addi	s0,sp,128
     33a:	0905                	addi	s2,s2,1
            product2[j] = 0;
     33c:	04090603          	lb	a2,64(s2)
     340:	0100                	addi	s0,sp,128
     342:	4e05                	li	t3,1
    for (i = 0; i < size_b; ++i){
     344:	04097a03          	0x4097a03
    array_equ(pola,a,size_a);
     348:	0100                	addi	s0,sp,128
     34a:	0905                	addi	s2,s2,1
     34c:	0c090303          	lb	t1,192(s2)
     350:	0100                	addi	s0,sp,128
     352:	4e05                	li	t3,1
    array_equ(polb,b,size_b);
     354:	02097d03          	0x2097d03
     358:	0100                	addi	s0,sp,128
     35a:	0905                	addi	s2,s2,1
     35c:	06090303          	lb	t1,96(s2)
    if(star_mult == 1){
     360:	0100                	addi	s0,sp,128
     362:	02090303          	lb	t1,32(s2)
     366:	0100                	addi	s0,sp,128
     368:	4e05                	li	t3,1
     36a:	04097a03          	0x4097a03
     36e:	0100                	addi	s0,sp,128
     370:	0905                	addi	s2,s2,1
        for (j = size_b -1; j >= 0; j = j-1){
     372:	00090303          	lb	t1,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     376:	0100                	addi	s0,sp,128
     378:	06090303          	lb	t1,96(s2)
            product2[j] = 0;
     37c:	0100                	addi	s0,sp,128
     37e:	04090103          	lb	sp,64(s2)
            line[i][j] = 0;
     382:	0100                	addi	s0,sp,128
            product2[j] = 0;
     384:	06097f03          	0x6097f03
        for(j = 0; j < size_a + size_b -1; ++j){
     388:	0100                	addi	s0,sp,128
     38a:	02090103          	lb	sp,32(s2)
     38e:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     390:	4e05                	li	t3,1
     392:	04097903          	0x4097903
     396:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     398:	0905                	addi	s2,s2,1
     39a:	02090603          	lb	a2,32(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     39e:	0100                	addi	s0,sp,128
     3a0:	4e05                	li	t3,1
     3a2:	04097a03          	0x4097a03
     3a6:	0100                	addi	s0,sp,128
     3a8:	0905                	addi	s2,s2,1
     3aa:	02090303          	lb	t1,32(s2)
     3ae:	0100                	addi	s0,sp,128
     3b0:	0505                	addi	a0,a0,1
     3b2:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0901                	addi	s2,s2,0
     3b6:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     3b8:	0301                	addi	t1,t1,0
     3ba:	0901                	addi	s2,s2,0
     3bc:	0000                	unimp
     3be:	0301                	addi	t1,t1,0
     3c0:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
     3c4:	0301                	addi	t1,t1,0
     3c6:	0901                	addi	s2,s2,0
     3c8:	0000                	unimp
     3ca:	0501                	addi	a0,a0,0
    for(i=0;i<size_b;++i){
     3cc:	0609                	addi	a2,a2,2
     3ce:	00090003          	lb	zero,0(s2)
}
     3d2:	0100                	addi	s0,sp,128
     3d4:	0505                	addi	a0,a0,1
     3d6:	0306                	slli	t1,t1,0x1
     3d8:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     3dc:	0501                	addi	a0,a0,0
     3de:	0614                	addi	a3,sp,768
     3e0:	00090203          	lb	tp,0(s2)
     3e4:	0100                	addi	s0,sp,128
     3e6:	0505                	addi	a0,a0,1
     3e8:	06097e03          	0x6097e03
     3ec:	0100                	addi	s0,sp,128
     3ee:	0c05                	addi	s8,s8,1
     3f0:	02090003          	lb	zero,32(s2)
     3f4:	0100                	addi	s0,sp,128
     3f6:	1805                	addi	a6,a6,-31
     3f8:	02090303          	lb	t1,32(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3fc:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fe:	1105                	addi	sp,sp,-31
     400:	0200                	addi	s0,sp,256
     402:	0104                	addi	s1,sp,128
     404:	0306                	slli	t1,t1,0x1
     406:	097d                	addi	s2,s2,31
     408:	0008                	0x8
     40a:	0501                	addi	a0,a0,0
     40c:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	0402                	c.slli64	s0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     410:	0601                	addi	a2,a2,0
     412:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0100                	addi	s0,sp,128
     418:	04090f03          	lb	t5,64(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     41c:	0100                	addi	s0,sp,128
     41e:	0306                	slli	t1,t1,0x1
     420:	0900                	addi	s0,sp,144
        array_add(product2,line[i],size_a+size_b-1);
     422:	0012                	c.slli	zero,0x4
     424:	0301                	addi	t1,t1,0
     426:	0901                	addi	s2,s2,0
     428:	0006                	c.slli	zero,0x1
    for(i=0;i<size_b;++i){
     42a:	0301                	addi	t1,t1,0
     42c:	0909                	addi	s2,s2,2
     42e:	0008                	0x8
    int v[size_N];
     430:	0301                	addi	t1,t1,0
     432:	0901                	addi	s2,s2,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	000c                	0xc
    int v[size_N];
     436:	0301                	addi	t1,t1,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0904                	addi	s1,sp,144
     43a:	0008                	0x8
     43c:	0501                	addi	a0,a0,0
     43e:	00030607          	0x30607
     442:	0009                	c.nop	2
     444:	0100                	addi	s0,sp,128
     446:	1d05                	addi	s10,s10,-31
     448:	0200                	addi	s0,sp,256
     44a:	0104                	addi	s1,sp,128
     44c:	0306                	slli	t1,t1,0x1
     44e:	0908                	addi	a0,sp,144
     450:	001c                	0x1c
    int v[size_N];
     452:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     454:	0009                	c.nop	2
    int v[size_N];
     456:	0402                	c.slli64	s0
     458:	0601                	addi	a2,a2,0
     45a:	00090003          	lb	zero,0(s2)
    int q[size_N];
     45e:	0100                	addi	s0,sp,128
     460:	1405                	addi	s0,s0,-31
    int num_temp[size_N];
     462:	04090103          	lb	sp,64(s2)
    int denum_temp[size_D];
     466:	0100                	addi	s0,sp,128
     468:	0d05                	addi	s10,s10,1
     46a:	0200                	addi	s0,sp,256
     46c:	0304                	addi	s1,sp,384
    int num_temp[size_N];
     46e:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     470:	0004095b          	0x4095b
    int denum_temp[size_D];
     474:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     476:	0018                	0x18
    int v[size_N];
     478:	0402                	c.slli64	s0
     47a:	01030603          	lb	a2,16(t1)
    array_equ(num_temp,num,size_N);
     47e:	0009                	c.nop	2
     480:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	0200                	addi	s0,sp,256
     484:	0304                	addi	s1,sp,384
    int denum_temp[size_D];
     486:	06097f03          	0x6097f03
    array_equ(num_temp,num,size_N);
     48a:	0100                	addi	s0,sp,128
    array_mod(num_temp,mod,size_N);
     48c:	0d05                	addi	s10,s10,1
     48e:	0200                	addi	s0,sp,256
     490:	0304                	addi	s1,sp,384
     492:	0306                	slli	t1,t1,0x1
    int denum_temp[size_D];
     494:	0901                	addi	s2,s2,0
    array_equ(denum_temp,denum,size_D);
     496:	0004                	0x4
     498:	0501                	addi	a0,a0,0
     49a:	0018                	0x18
     49c:	0402                	c.slli64	s0
    array_mod(denum_temp,mod,size_D);
     49e:	00030603          	lb	a2,0(t1)
     4a2:	0009                	c.nop	2
     4a4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4a6:	2c05                	jal	6d6 <ext_euclid+0xec>
     4a8:	0200                	addi	s0,sp,256
     4aa:	0304                	addi	s1,sp,384
    for (i = size_D-1; i >= 0; i = i-1){
     4ac:	0306                	slli	t1,t1,0x1
     4ae:	097e                	slli	s2,s2,0x1f
     4b0:	0004                	0x4
     4b2:	0501                	addi	a0,a0,0
     4b4:	0014                	0x14
     4b6:	0402                	c.slli64	s0
    for (i = 0; i < size_N; ++i){
     4b8:	0301                	addi	t1,t1,0
     4ba:	0900                	addi	s0,sp,144
        if ( (b_N*u)%mod == 1 )
     4bc:	0004                	0x4
    for (u = 0; u < mod; ++u){
     4be:	0501                	addi	a0,a0,0
     4c0:	0009                	c.nop	2
     4c2:	0402                	c.slli64	s0
     4c4:	0601                	addi	a2,a2,0
        q[i] = 0;
     4c6:	00090003          	lb	zero,0(s2)
     4ca:	0100                	addi	s0,sp,128
     4cc:	1d05                	addi	s10,s10,-31
        v[i] = 0;
     4ce:	0200                	addi	s0,sp,256
        q[i] = 0;
     4d0:	0204                	addi	s1,sp,256
     4d2:	0306                	slli	t1,t1,0x1
        v[i] = 0;
     4d4:	097f                	0x97f
     4d6:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     4d8:	0501                	addi	a0,a0,0
     4da:	0103060f          	0x103060f
    for (i = size_D-1; i >= 0; i = i-1){
     4de:	0809                	addi	a6,a6,2
     4e0:	0100                	addi	s0,sp,128
        if ( (b_N*u)%mod == 1 )
     4e2:	0705                	addi	a4,a4,1
     4e4:	04091d03          	lh	s10,64(s2)
     4e8:	0100                	addi	s0,sp,128
     4ea:	1d05                	addi	s10,s10,-31
    for (u = 0; u < mod; ++u){
     4ec:	0200                	addi	s0,sp,256
     4ee:	0104                	addi	s1,sp,128
        if( num_temp[i] != 0 )
     4f0:	0306                	slli	t1,t1,0x1
    for (i = size_N-1; i >= 0; i = i-1){
     4f2:	0901                	addi	s2,s2,0
     4f4:	0002                	c.slli64	zero
     4f6:	0501                	addi	a0,a0,0
     4f8:	0009                	c.nop	2
     4fa:	0402                	c.slli64	s0
     4fc:	0601                	addi	a2,a2,0
     4fe:	00090003          	lb	zero,0(s2)
    while (d >= d2){
     502:	0100                	addi	s0,sp,128
    array_equ(result,q,size_N);
     504:	0f05                	addi	t5,t5,1
     506:	04091003          	lh	zero,64(s2)
     50a:	0100                	addi	s0,sp,128
     50c:	1105                	addi	sp,sp,-31
     50e:	0200                	addi	s0,sp,256
     510:	0104                	addi	s1,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     512:	0306                	slli	t1,t1,0x1
     514:	097f                	0x97f
        result[i] = num_temp[i-size_N];
     516:	0002                	c.slli64	zero
     518:	0501                	addi	a0,a0,0
     51a:	0005                	c.nop	1
     51c:	0402                	c.slli64	s0
    for(i = size_N; i < (2*size_N); ++i){
     51e:	0601                	addi	a2,a2,0
     520:	00090003          	lb	zero,0(s2)
}
     524:	0100                	addi	s0,sp,128
     526:	0b05                	addi	s6,s6,1
     528:	0c090703          	lb	a4,192(s2)
     52c:	0100                	addi	s0,sp,128
     52e:	1005                	c.nop	-31
     530:	0200                	addi	s0,sp,256
     532:	0104                	addi	s1,sp,128
     534:	0306                	slli	t1,t1,0x1
     536:	0900                	addi	s0,sp,144
     538:	0002                	c.slli64	zero
     53a:	0501                	addi	a0,a0,0
     53c:	0005                	c.nop	1
     53e:	0402                	c.slli64	s0
     540:	0601                	addi	a2,a2,0
     542:	00090003          	lb	zero,0(s2)
     546:	0100                	addi	s0,sp,128
     548:	0306                	slli	t1,t1,0x1
     54a:	0004090b          	0x4090b
        v[(d-d2)] = u*r_d;
     54e:	0301                	addi	t1,t1,0
     550:	0902                	c.slli64	s2
     552:	000e                	c.slli	zero,0x3
     554:	0301                	addi	t1,t1,0
     556:	0902                	c.slli64	s2
    array_mod(v,mod,size_N);
     558:	0000                	unimp
     55a:	0501                	addi	a0,a0,0
     55c:	0601                	addi	a2,a2,0
        v[(d-d2)] = u*r_d;
     55e:	00090103          	lb	sp,0(s2)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     562:	0100                	addi	s0,sp,128
     564:	1105                	addi	sp,sp,-31
     566:	0200                	addi	s0,sp,256
     568:	0304                	addi	s1,sp,384
     56a:	0306                	slli	t1,t1,0x1
     56c:	095c                	addi	a5,sp,148
     56e:	002a                	c.slli	zero,0xa
    array_mod(product,mod,size_N);
     570:	0501                	addi	a0,a0,0
     572:	0025                	c.nop	9
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     574:	0402                	c.slli64	s0
    array_mod(product,mod,size_N);
     576:	00030603          	lb	a2,0(t1)
        for (i = 0; i < size_N; ++i){
     57a:	0409                	addi	s0,s0,2
     57c:	0100                	addi	s0,sp,128
     57e:	2b05                	jal	aae <generate_keys+0x2b0>
    array_mod(num_temp,mod,size_N);
     580:	0200                	addi	s0,sp,256
     582:	0304                	addi	s1,sp,384
     584:	04090003          	lb	zero,64(s2)
    array_add(q,v,size_N);
     588:	0100                	addi	s0,sp,128
     58a:	2e05                	jal	8ba <generate_keys+0xbc>
     58c:	0200                	addi	s0,sp,256
     58e:	0304                	addi	s1,sp,384
    array_mod(q,mod,size_N);
     590:	02090003          	lb	zero,32(s2)
     594:	0100                	addi	s0,sp,128
     596:	2a05                	jal	6c6 <ext_euclid+0xdc>
        for (i = size_N-1; i >= 0; i = i-1){
     598:	0200                	addi	s0,sp,256
     59a:	0304                	addi	s1,sp,384
     59c:	06097f03          	0x6097f03
     5a0:	0100                	addi	s0,sp,128
     5a2:	2e05                	jal	8d2 <generate_keys+0xd4>
     5a4:	0200                	addi	s0,sp,256
     5a6:	0304                	addi	s1,sp,384
     5a8:	02090103          	lb	sp,32(s2)
            num_temp[i] = num_temp[i] - product[i];
     5ac:	0100                	addi	s0,sp,128
     5ae:	2505                	jal	bce <ntru_deceypt+0x58>
     5b0:	0200                	addi	s0,sp,256
     5b2:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     5b4:	04090003          	lb	zero,64(s2)
            num_temp[i] = num_temp[i] - product[i];
     5b8:	0100                	addi	s0,sp,128
     5ba:	2805                	jal	5ea <ext_euclid>
     5bc:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5be:	0304                	addi	s1,sp,384
            if( num_temp[i] != 0 )
     5c0:	0306                	slli	t1,t1,0x1
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	097f                	0x97f
     5c4:	0002                	c.slli64	zero
            v[i] = 0;
     5c6:	0501                	addi	a0,a0,0
     5c8:	0020                	addi	s0,sp,8
     5ca:	0402                	c.slli64	s0
     5cc:	0301                	addi	t1,t1,0
     5ce:	0900                	addi	s0,sp,144
        for (i = 0; i < size_N; ++i){
     5d0:	0000                	unimp
     5d2:	0501                	addi	a0,a0,0
     5d4:	000d                	c.nop	3
     5d6:	0402                	c.slli64	s0
        result[i] = num_temp[i-size_N];
     5d8:	0601                	addi	a2,a2,0
     5da:	00090003          	lb	zero,0(s2)
     5de:	0100                	addi	s0,sp,128
     5e0:	2505                	jal	c00 <ntru_deceypt+0x8a>
     5e2:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	0204                	addi	s1,sp,256
     5e6:	0306                	slli	t1,t1,0x1
     5e8:	097f                	0x97f
    int ri_2[size]; // MX-ring poly, a
     5ea:	0004                	0x4
     5ec:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5ee:	04020027          	0x4020027
    int ri_2[size]; // MX-ring poly, a
     5f2:	0602                	c.slli64	a2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     5f4:	00090003          	lb	zero,0(s2)
     5f8:	0100                	addi	s0,sp,128
     5fa:	1405                	addi	s0,s0,-31
     5fc:	08090103          	lb	sp,128(s2)
     600:	0100                	addi	s0,sp,128
     602:	1105                	addi	sp,sp,-31
     604:	0200                	addi	s0,sp,256
     606:	0304                	addi	s1,sp,384
     608:	0306                	slli	t1,t1,0x1
     60a:	0908                	addi	a0,sp,144
     60c:	0004                	0x4
     60e:	0501                	addi	a0,a0,0
    int ri_2[size]; // MX-ring poly, a
     610:	0029                	c.nop	10
     612:	0402                	c.slli64	s0
     614:	00030603          	lb	a2,0(t1)
    int ri_1[size]; // f-random poly, f[N] = 0, b
     618:	0409                	addi	s0,s0,2
     61a:	0100                	addi	s0,sp,128
    int ri[size];
     61c:	2f05                	jal	d4c <memcpy+0x9c>
     61e:	0200                	addi	s0,sp,256
     620:	0304                	addi	s1,sp,384
    int ti_1[size]; // ti_1[0] = 1
     622:	04090003          	lb	zero,64(s2)
     626:	0100                	addi	s0,sp,128
    int ti[size];
     628:	3205                	jal	ffffff48 <_stack_start+0xfffeff48>
     62a:	0200                	addi	s0,sp,256
     62c:	0304                	addi	s1,sp,384
    int qi_1[size];
     62e:	02090003          	lb	zero,32(s2)
     632:	0100                	addi	s0,sp,128
    int temp[size];
     634:	2a05                	jal	764 <ext_euclid+0x17a>
     636:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     638:	0304                	addi	s1,sp,384
     63a:	06097f03          	0x6097f03
    int ri_2[size]; // MX-ring poly, a
     63e:	0100                	addi	s0,sp,128
     640:	3205                	jal	ffffff60 <_stack_start+0xfffeff60>
    int temp[size];
     642:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     644:	0304                	addi	s1,sp,384
        ti_2[i] = 0;
     646:	02090103          	lb	sp,32(s2)
     64a:	0100                	addi	s0,sp,128
     64c:	2905                	jal	a7c <generate_keys+0x27e>
    for (i = 0; i < size; ++i) {
     64e:	0200                	addi	s0,sp,256
     650:	0304                	addi	s1,sp,384
    array_equ(ri_2,polyR,size);
     652:	04090003          	lb	zero,64(s2)
     656:	0100                	addi	s0,sp,128
     658:	2805                	jal	688 <ext_euclid+0x9e>
    array_equ(ri_1,polyf,size);
     65a:	0200                	addi	s0,sp,256
     65c:	0304                	addi	s1,sp,384
     65e:	0306                	slli	t1,t1,0x1
     660:	097f                	0x97f
    ti_1[0] = 1;
     662:	0002                	c.slli64	zero
     664:	0501                	addi	a0,a0,0
     666:	0020                	addi	s0,sp,8
        for (i = N + 1; i < (2 * N + 2); ++i) {
     668:	0402                	c.slli64	s0
     66a:	0301                	addi	t1,t1,0
     66c:	0900                	addi	s0,sp,144
     66e:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     670:	0501                	addi	a0,a0,0
     672:	000d                	c.nop	3
     674:	0402                	c.slli64	s0
     676:	0601                	addi	a2,a2,0
    array_mod(ri_2,mod,size);
     678:	00090003          	lb	zero,0(s2)
     67c:	0100                	addi	s0,sp,128
     67e:	2505                	jal	c9e <zero_loop+0x4>
    array_mod(ri_1,mod,size);
     680:	0200                	addi	s0,sp,256
     682:	0204                	addi	s1,sp,256
     684:	0306                	slli	t1,t1,0x1
     686:	097f                	0x97f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     688:	0004                	0x4
     68a:	0501                	addi	a0,a0,0
     68c:	04020027          	0x4020027
     690:	0602                	c.slli64	a2
     692:	00090003          	lb	zero,0(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     696:	0100                	addi	s0,sp,128
     698:	0d05                	addi	s10,s10,1
     69a:	0200                	addi	s0,sp,256
     69c:	0304                	addi	s1,sp,384
     69e:	0306                	slli	t1,t1,0x1
     6a0:	090a                	slli	s2,s2,0x2
        for (i = 0; i < N + 1; ++i) {
     6a2:	0008                	0x8
     6a4:	0501                	addi	a0,a0,0
     6a6:	0025                	c.nop	9
    array_mod(temp,mod,size);
     6a8:	0402                	c.slli64	s0
     6aa:	00030603          	lb	a2,0(t1)
     6ae:	0009                	c.nop	2
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6b0:	0100                	addi	s0,sp,128
     6b2:	2c05                	jal	8e2 <generate_keys+0xe4>
     6b4:	0200                	addi	s0,sp,256
     6b6:	0304                	addi	s1,sp,384
     6b8:	02097f03          	0x2097f03
     6bc:	0100                	addi	s0,sp,128
    array_equ(qi_1,res1,size);
     6be:	2505                	jal	cde <memcpy+0x2e>
     6c0:	0200                	addi	s0,sp,256
     6c2:	0304                	addi	s1,sp,384
    array_mod(qi_1,mod,size);
     6c4:	04090103          	lb	sp,64(s2)
     6c8:	0100                	addi	s0,sp,128
     6ca:	1805                	addi	a6,a6,-31
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6cc:	0200                	addi	s0,sp,256
     6ce:	0304                	addi	s1,sp,384
     6d0:	04090003          	lb	zero,64(s2)
     6d4:	0100                	addi	s0,sp,128
     6d6:	2c05                	jal	906 <generate_keys+0x108>
     6d8:	0200                	addi	s0,sp,256
     6da:	0304                	addi	s1,sp,384
    array_equ(temp,res2,size);
     6dc:	0306                	slli	t1,t1,0x1
     6de:	097f                	0x97f
     6e0:	0004                	0x4
    array_mod(temp,mod,size);
     6e2:	0501                	addi	a0,a0,0
     6e4:	0014                	0x14
     6e6:	0402                	c.slli64	s0
     6e8:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     6ea:	0900                	addi	s0,sp,144
     6ec:	0000                	unimp
     6ee:	0501                	addi	a0,a0,0
     6f0:	0009                	c.nop	2
    array_mod(ti,mod,size);
     6f2:	0402                	c.slli64	s0
     6f4:	0601                	addi	a2,a2,0
     6f6:	00090003          	lb	zero,0(s2)
array_equ(ri_2,ri_1,size);
     6fa:	0100                	addi	s0,sp,128
     6fc:	1d05                	addi	s10,s10,-31
     6fe:	0200                	addi	s0,sp,256
     700:	0204                	addi	s1,sp,256
array_equ(ri_1,ri,size);
     702:	0306                	slli	t1,t1,0x1
     704:	097f                	0x97f
     706:	0004                	0x4
     708:	0501                	addi	a0,a0,0
array_equ(ti_2,ti_1,size);
     70a:	0103060f          	0x103060f
     70e:	0809                	addi	a6,a6,2
     710:	0100                	addi	s0,sp,128
array_equ(ti_1,ti,size);
     712:	0d05                	addi	s10,s10,1
     714:	0200                	addi	s0,sp,256
     716:	0304                	addi	s1,sp,384
     718:	0306                	slli	t1,t1,0x1
        controlR = 0;
     71a:	0908                	addi	a0,sp,144
        for (i = 0; i < N + 1; ++i) {
     71c:	0004                	0x4
     71e:	0501                	addi	a0,a0,0
     720:	0022                	c.slli	zero,0x8
    while (controlR != 0) {
     722:	0402                	c.slli64	s0
     724:	00030603          	lb	a2,0(t1)
            if (((ri_2[0] * j) % mod) == 1)
     728:	0009                	c.nop	2
        for (j = 0; j < mod; ++j) {
     72a:	0100                	addi	s0,sp,128
     72c:	1805                	addi	a6,a6,-31
     72e:	0200                	addi	s0,sp,256
     730:	0304                	addi	s1,sp,384
     732:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     736:	0100                	addi	s0,sp,128
     738:	2005                	jal	758 <ext_euclid+0x16e>
    }
     73a:	0200                	addi	s0,sp,256
     73c:	0304                	addi	s1,sp,384
     73e:	02097f03          	0x2097f03
     742:	0100                	addi	s0,sp,128
     744:	2205                	jal	864 <generate_keys+0x66>
     746:	0200                	addi	s0,sp,256
     748:	0304                	addi	s1,sp,384
     74a:	02090103          	lb	sp,32(s2)
     74e:	0100                	addi	s0,sp,128
     750:	1805                	addi	a6,a6,-31
     752:	0200                	addi	s0,sp,256
     754:	0304                	addi	s1,sp,384
     756:	06090003          	lb	zero,96(s2)
     75a:	0100                	addi	s0,sp,128
     75c:	2005                	jal	77c <ext_euclid+0x192>
     75e:	0200                	addi	s0,sp,256
     760:	0304                	addi	s1,sp,384
     762:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     764:	097f                	0x97f
     766:	0006                	c.slli	zero,0x1
     768:	0501                	addi	a0,a0,0
     76a:	0014                	0x14
        ti_1[i] = 0;
     76c:	0402                	c.slli64	s0
        ti_2[i] = 0;
     76e:	0301                	addi	t1,t1,0
     770:	0900                	addi	s0,sp,144
        ti_1[i] = 0;
     772:	0000                	unimp
     774:	0501                	addi	a0,a0,0
    for (i = 0; i < size; ++i) {
     776:	0009                	c.nop	2
     778:	0402                	c.slli64	s0
            ri[i - (N + 1)] = res[i];
     77a:	0601                	addi	a2,a2,0
     77c:	00090003          	lb	zero,0(s2)
     780:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     782:	2805                	jal	7b2 <ext_euclid+0x1c8>
     784:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     786:	0204                	addi	s1,sp,256
     788:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     78a:	097f                	0x97f
            temp[i] = ri_2[i] - ri[i];
     78c:	0004                	0x4
     78e:	0501                	addi	a0,a0,0
     790:	0103060f          	0x103060f
     794:	0609                	addi	a2,a2,2
     796:	0100                	addi	s0,sp,128
     798:	4605                	li	a2,1
     79a:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     79c:	0911                	addi	s2,s2,4
            temp[i] = ri_2[i] - ri[i];
     79e:	0004                	0x4
     7a0:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7a2:	0305                	addi	t1,t1,1
     7a4:	0902                	c.slli64	s2
            ti[i] = ti_2[i] - temp[i];
     7a6:	0000                	unimp
     7a8:	0501                	addi	a0,a0,0
     7aa:	0646                	slli	a2,a2,0x11
     7ac:	00097e03          	0x97e03
     7b0:	0100                	addi	s0,sp,128
     7b2:	1d05                	addi	s10,s10,-31
     7b4:	02090203          	lb	tp,32(s2)
     7b8:	0100                	addi	s0,sp,128
     7ba:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     7bc:	04097e03          	0x4097e03
              qi_1[i] = 0;
     7c0:	0100                	addi	s0,sp,128
     7c2:	0905                	addi	s2,s2,1
     7c4:	0a090203          	lb	tp,160(s2)
            controlR += ri[i];
     7c8:	0100                	addi	s0,sp,128
     7ca:	4605                	li	a2,1
              qi_1[i] = 0;
     7cc:	0c097e03          	0xc097e03
        for (i = 0; i < N + 1; ++i) {
     7d0:	0100                	addi	s0,sp,128
            controlR += ri[i];
     7d2:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     7d4:	12090203          	lb	tp,288(s2)
            if (((ri_2[0] * j) % mod) == 1)
     7d8:	0100                	addi	s0,sp,128
     7da:	4605                	li	a2,1
     7dc:	02097e03          	0x2097e03
     7e0:	0100                	addi	s0,sp,128
     7e2:	0905                	addi	s2,s2,1
     7e4:	04090203          	lb	tp,64(s2)
        for (j = 0; j < mod; ++j) {
     7e8:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;
     7ea:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     7ec:	02097e03          	0x2097e03
            ti_2[i] = (ti_2[i] * j) % mod;
     7f0:	0100                	addi	s0,sp,128
     7f2:	0905                	addi	s2,s2,1
     7f4:	00090203          	lb	tp,0(s2)
     7f8:	0100                	addi	s0,sp,128
     7fa:	04090303          	lb	t1,64(s2)
int* generate_keys(int N, int p, int q){
     7fe:	0100                	addi	s0,sp,128
     800:	08097d03          	0x8097d03
     804:	0100                	addi	s0,sp,128
     806:	02090303          	lb	t1,32(s2)
     80a:	0100                	addi	s0,sp,128
     80c:	04090103          	lb	sp,64(s2)
     810:	0100                	addi	s0,sp,128
     812:	06097f03          	0x6097f03
     816:	0100                	addi	s0,sp,128
     818:	02090103          	lb	sp,32(s2)
     81c:	0100                	addi	s0,sp,128
     81e:	4605                	li	a2,1
     820:	04097a03          	0x4097a03
     824:	0100                	addi	s0,sp,128
     826:	0905                	addi	s2,s2,1
     828:	04090203          	lb	tp,64(s2)
     82c:	0100                	addi	s0,sp,128
     82e:	0505                	addi	a0,a0,1
     830:	0306                	slli	t1,t1,0x1
     832:	0901                	addi	s2,s2,0
     834:	0004                	0x4
     836:	0301                	addi	t1,t1,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     838:	0901                	addi	s2,s2,0
     83a:	0000                	unimp
     83c:	0301                	addi	t1,t1,0
     83e:	0901                	addi	s2,s2,0
     840:	0000                	unimp
     842:	0501                	addi	a0,a0,0
     844:	0646                	slli	a2,a2,0x11
     846:	00097b03          	0x97b03
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     84a:	0100                	addi	s0,sp,128
     84c:	0905                	addi	s2,s2,1
     84e:	02090503          	lb	a0,32(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     852:	0100                	addi	s0,sp,128
     854:	0505                	addi	a0,a0,1
     856:	0306                	slli	t1,t1,0x1
     858:	0901                	addi	s2,s2,0
     85a:	0004                	0x4
     85c:	0501                	addi	a0,a0,0
     85e:	0609                	addi	a2,a2,2
     860:	00090003          	lb	zero,0(s2)
     864:	0100                	addi	s0,sp,128
     866:	0505                	addi	a0,a0,1
     868:	0306                	slli	t1,t1,0x1
     86a:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     86e:	0501                	addi	a0,a0,0
     870:	060c                	addi	a1,sp,768
     872:	04090003          	lb	zero,64(s2)
     876:	0100                	addi	s0,sp,128
     878:	1905                	addi	s2,s2,-31
     87a:	02090303          	lb	t1,32(s2)
     87e:	0100                	addi	s0,sp,128
     880:	1105                	addi	sp,sp,-31
     882:	0200                	addi	s0,sp,256
     884:	0104                	addi	s1,sp,128
     886:	0306                	slli	t1,t1,0x1
     888:	097d                	addi	s2,s2,31
     88a:	0008                	0x8
     88c:	0501                	addi	a0,a0,0
     88e:	0005                	c.nop	1
     890:	0402                	c.slli64	s0
     892:	0601                	addi	a2,a2,0
     894:	00090003          	lb	zero,0(s2)
     898:	0100                	addi	s0,sp,128
     89a:	04090b03          	lb	s6,64(s2)
     89e:	0100                	addi	s0,sp,128
     8a0:	0306                	slli	t1,t1,0x1
     8a2:	0900                	addi	s0,sp,144
     8a4:	000a                	c.slli	zero,0x2
     8a6:	0301                	addi	t1,t1,0
     8a8:	0906                	slli	s2,s2,0x1
     8aa:	0002                	c.slli64	zero
     8ac:	0301                	addi	t1,t1,0
     8ae:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     8b2:	0501                	addi	a0,a0,0
     8b4:	00030607          	0x30607
     8b8:	0009                	c.nop	2
     8ba:	0100                	addi	s0,sp,128
     8bc:	1d05                	addi	s10,s10,-31
    int polyR[N+1];
     8be:	0200                	addi	s0,sp,256
     8c0:	0104                	addi	s1,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8c2:	0306                	slli	t1,t1,0x1
    int polyR[N+1];
     8c4:	0908                	addi	a0,sp,144
     8c6:	0012                	c.slli	zero,0x4
     8c8:	0501                	addi	a0,a0,0
     8ca:	0009                	c.nop	2
     8cc:	0402                	c.slli64	s0
     8ce:	0601                	addi	a2,a2,0
     8d0:	00090003          	lb	zero,0(s2)
    polyR[N] = 1;
     8d4:	0100                	addi	s0,sp,128
     8d6:	1405                	addi	s0,s0,-31
     8d8:	04090103          	lb	sp,64(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8dc:	0100                	addi	s0,sp,128
     8de:	0d05                	addi	s10,s10,1
     8e0:	0200                	addi	s0,sp,256
     8e2:	0304                	addi	s1,sp,384
     8e4:	0306                	slli	t1,t1,0x1
     8e6:	0965                	addi	s2,s2,25
     8e8:	0004                	0x4
     8ea:	0501                	addi	a0,a0,0
     8ec:	0019                	c.nop	6
     8ee:	0402                	c.slli64	s0
     8f0:	01030603          	lb	a2,16(t1)
     8f4:	0009                	c.nop	2
     8f6:	0100                	addi	s0,sp,128
     8f8:	1805                	addi	a6,a6,-31
     8fa:	0200                	addi	s0,sp,256
     8fc:	0304                	addi	s1,sp,384
     8fe:	06097f03          	0x6097f03
     902:	0100                	addi	s0,sp,128
     904:	0d05                	addi	s10,s10,1
     906:	0200                	addi	s0,sp,256
     908:	0304                	addi	s1,sp,384
     90a:	0306                	slli	t1,t1,0x1
     90c:	0901                	addi	s2,s2,0
     90e:	0004                	0x4
     910:	0501                	addi	a0,a0,0
     912:	0019                	c.nop	6
     914:	0402                	c.slli64	s0
     916:	00030603          	lb	a2,0(t1)
     91a:	0009                	c.nop	2
     91c:	0100                	addi	s0,sp,128
     91e:	2c05                	jal	b4e <ntru_encyrpt+0x5e>
     920:	0200                	addi	s0,sp,256
     922:	0304                	addi	s1,sp,384
     924:	0306                	slli	t1,t1,0x1
     926:	097e                	slli	s2,s2,0x1f
     928:	0004                	0x4
     92a:	0501                	addi	a0,a0,0
     92c:	0014                	0x14
     92e:	0402                	c.slli64	s0
     930:	0301                	addi	t1,t1,0
     932:	0900                	addi	s0,sp,144
     934:	0004                	0x4
     936:	0501                	addi	a0,a0,0
     938:	0009                	c.nop	2
     93a:	0402                	c.slli64	s0
     93c:	0601                	addi	a2,a2,0
     93e:	00090003          	lb	zero,0(s2)
    polyR[0] = -1;
     942:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     944:	1d05                	addi	s10,s10,-31
     946:	0200                	addi	s0,sp,256
     948:	0204                	addi	s1,sp,256
     94a:	0306                	slli	t1,t1,0x1
    for (i = N; i < 55; ++i ){
     94c:	097f                	0x97f
     94e:	0004                	0x4
     950:	0501                	addi	a0,a0,0
     952:	0103060f          	0x103060f
        random_keys[i] = f[i];
     956:	0809                	addi	a6,a6,2
     958:	0100                	addi	s0,sp,128
     95a:	1105                	addi	sp,sp,-31
     95c:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     95e:	0304                	addi	s1,sp,384
     960:	0306                	slli	t1,t1,0x1
     962:	0916                	slli	s2,s2,0x5
     964:	0004                	0x4
    for(i = N; i < (2*N); ++i){
     966:	0501                	addi	a0,a0,0
     968:	0025                	c.nop	9
     96a:	0402                	c.slli64	s0
     96c:	00030603          	lb	a2,0(t1)
        random_keys[i] = g[i-N];
     970:	0409                	addi	s0,s0,2
     972:	0100                	addi	s0,sp,128
     974:	2b05                	jal	ea4 <main+0x6e>
    for(i = N; i < (2*N); ++i){
     976:	0200                	addi	s0,sp,256
     978:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     97a:	04090003          	lb	zero,64(s2)
     97e:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     980:	2e05                	jal	cb0 <memcpy>
     982:	0200                	addi	s0,sp,256
     984:	0304                	addi	s1,sp,384
     986:	02090003          	lb	zero,32(s2)
     98a:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     98c:	2a05                	jal	abc <generate_keys+0x2be>
        random_keys[i] = fp[i-(2*N)];
     98e:	0200                	addi	s0,sp,256
     990:	0304                	addi	s1,sp,384
     992:	06097f03          	0x6097f03
    for(i = (2*N); i < (3*N); ++i){
     996:	0100                	addi	s0,sp,128
     998:	2e05                	jal	cc8 <memcpy+0x18>
    fq = ext_euclid(polyR, f, (N+1), q);
     99a:	0200                	addi	s0,sp,256
     99c:	0304                	addi	s1,sp,384
     99e:	02090103          	lb	sp,32(s2)
     9a2:	0100                	addi	s0,sp,128
     9a4:	2505                	jal	fc4 <_endtext+0x44>
    for(i = (3*N); i < (4*N); ++i){
     9a6:	0200                	addi	s0,sp,256
     9a8:	0304                	addi	s1,sp,384
     9aa:	04090003          	lb	zero,64(s2)
        random_keys[i] = fq[i-(3*N)];
     9ae:	0100                	addi	s0,sp,128
     9b0:	2805                	jal	9e0 <generate_keys+0x1e2>
     9b2:	0200                	addi	s0,sp,256
     9b4:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     9b6:	0306                	slli	t1,t1,0x1
     9b8:	097f                	0x97f
    fg = polymult2(fq, N, g, N, 0);
     9ba:	0002                	c.slli64	zero
     9bc:	0501                	addi	a0,a0,0
     9be:	0020                	addi	s0,sp,8
     9c0:	0402                	c.slli64	s0
     9c2:	0301                	addi	t1,t1,0
    for(i = 0; i < (2*N-1); ++i){
     9c4:	0900                	addi	s0,sp,144
     9c6:	0000                	unimp
     9c8:	0501                	addi	a0,a0,0
     9ca:	000d                	c.nop	3
     9cc:	0402                	c.slli64	s0
     9ce:	0601                	addi	a2,a2,0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     9d0:	00090003          	lb	zero,0(s2)
     9d4:	0100                	addi	s0,sp,128
     9d6:	2505                	jal	ff6 <_endtext+0x76>
    for(i = (4*N); i < (5*N); ++i){
     9d8:	0200                	addi	s0,sp,256
     9da:	0204                	addi	s1,sp,256
     9dc:	0306                	slli	t1,t1,0x1
     9de:	097f                	0x97f
     9e0:	0004                	0x4
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     9e2:	0501                	addi	a0,a0,0
     9e4:	04020027          	0x4020027
     9e8:	0602                	c.slli64	a2
    for(i = (4*N); i < (5*N); ++i){
     9ea:	00090003          	lb	zero,0(s2)
     9ee:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     9f0:	1d05                	addi	s10,s10,-31
     9f2:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     9f4:	0104                	addi	s1,sp,128
     9f6:	0306                	slli	t1,t1,0x1
     9f8:	0900                	addi	s0,sp,144
     9fa:	0006                	c.slli	zero,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     9fc:	0501                	addi	a0,a0,0
     9fe:	0009                	c.nop	2
     a00:	0402                	c.slli64	s0
     a02:	0601                	addi	a2,a2,0
     a04:	00090003          	lb	zero,0(s2)
}
     a08:	0100                	addi	s0,sp,128
     a0a:	1405                	addi	s0,s0,-31
     a0c:	04090803          	lb	a6,64(s2)
     a10:	0100                	addi	s0,sp,128
     a12:	0905                	addi	s2,s2,1
     a14:	02090a03          	lb	s4,32(s2)
     a18:	0100                	addi	s0,sp,128
     a1a:	0d05                	addi	s10,s10,1
     a1c:	0200                	addi	s0,sp,256
     a1e:	0104                	addi	s1,sp,128
     a20:	0306                	slli	t1,t1,0x1
     a22:	097d                	addi	s2,s2,31
     a24:	0008                	0x8
     a26:	0501                	addi	a0,a0,0
     a28:	0005                	c.nop	1
     a2a:	0402                	c.slli64	s0
     a2c:	0601                	addi	a2,a2,0
     a2e:	00090003          	lb	zero,0(s2)
     a32:	0100                	addi	s0,sp,128
     a34:	0306                	slli	t1,t1,0x1
     a36:	00040907          	0x40907
     a3a:	0301                	addi	t1,t1,0
     a3c:	0902                	c.slli64	s2
     a3e:	0000                	unimp
     a40:	0501                	addi	a0,a0,0
     a42:	0601                	addi	a2,a2,0
     a44:	00090103          	lb	sp,0(s2)
        polyR[i] = 0;
     a48:	0100                	addi	s0,sp,128
     a4a:	1405                	addi	s0,s0,-31
     a4c:	2a096803          	0x2a096803
     a50:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     a52:	1105                	addi	sp,sp,-31
     a54:	0200                	addi	s0,sp,256
        f[i] = 0;
     a56:	0304                	addi	s1,sp,384
     a58:	0306                	slli	t1,t1,0x1
     a5a:	0908                	addi	a0,sp,144
     a5c:	0004                	0x4
     a5e:	0501                	addi	a0,a0,0
     a60:	0029                	c.nop	10
     a62:	0402                	c.slli64	s0
        g[i] = 0;
     a64:	00030603          	lb	a2,0(t1)
     a68:	0409                	addi	s0,s0,2
     a6a:	0100                	addi	s0,sp,128
     a6c:	2f05                	jal	119c <_bss_start+0x98>
    for (i = N; i < 55; ++i ){
     a6e:	0200                	addi	s0,sp,256
     a70:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     a72:	04090003          	lb	zero,64(s2)
     a76:	0100                	addi	s0,sp,128
     a78:	3205                	jal	398 <polymult2+0xc6>
     a7a:	0200                	addi	s0,sp,256
     a7c:	0304                	addi	s1,sp,384
     a7e:	02090003          	lb	zero,32(s2)
    for(i = 0; i < N; ++i){
     a82:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     a84:	2a05                	jal	bb4 <ntru_deceypt+0x3e>
    for(i = 0; i < N; ++i){
     a86:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     a88:	0304                	addi	s1,sp,384
     a8a:	06097f03          	0x6097f03
     a8e:	0100                	addi	s0,sp,128
     a90:	3205                	jal	3b0 <polymult2+0xde>
    for(i = N; i < (2*N); ++i){
     a92:	0200                	addi	s0,sp,256
     a94:	0304                	addi	s1,sp,384
     a96:	02090103          	lb	sp,32(s2)
        random_keys[i] = fp[i-(2*N)];
     a9a:	0100                	addi	s0,sp,128
     a9c:	2905                	jal	ecc <main+0x96>
     a9e:	0200                	addi	s0,sp,256
     aa0:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     aa2:	04090003          	lb	zero,64(s2)
     aa6:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     aa8:	2805                	jal	ad8 <generate_keys+0x2da>
     aaa:	0200                	addi	s0,sp,256
     aac:	0304                	addi	s1,sp,384
     aae:	0306                	slli	t1,t1,0x1
     ab0:	097f                	0x97f
     ab2:	0002                	c.slli64	zero
     ab4:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     ab6:	0020                	addi	s0,sp,8
        random_keys[i] = fq[i-(3*N)];
     ab8:	0402                	c.slli64	s0
    for(i = (3*N); i < (4*N); ++i){
     aba:	0301                	addi	t1,t1,0
        fg[i] = fg[i]*p;
     abc:	0900                	addi	s0,sp,144
    for(i = 0; i < (2*N-1); ++i){
     abe:	0000                	unimp
     ac0:	0501                	addi	a0,a0,0
        fg[i] = fg[i]*p;
     ac2:	000d                	c.nop	3
     ac4:	0402                	c.slli64	s0
     ac6:	0601                	addi	a2,a2,0
     ac8:	00090003          	lb	zero,0(s2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     acc:	0100                	addi	s0,sp,128
     ace:	2505                	jal	10ee <_endtext+0x16e>
     ad0:	0200                	addi	s0,sp,256
     ad2:	0204                	addi	s1,sp,256
     ad4:	0306                	slli	t1,t1,0x1
     ad6:	097f                	0x97f
    for(i = (4*N); i < (5*N); ++i){
     ad8:	0004                	0x4
     ada:	0501                	addi	a0,a0,0
        random_keys[i] = polyR[i-(5*N)];
     adc:	04020027          	0x4020027
     ae0:	0602                	c.slli64	a2
     ae2:	00090003          	lb	zero,0(s2)
     ae6:	0100                	addi	s0,sp,128
     ae8:	0905                	addi	s2,s2,1
    for(i = (5*N); i < (6*N+1); ++i){
     aea:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     aec:	0304                	addi	s1,sp,384
    for(i = (5*N); i < (6*N+1); ++i){
     aee:	0306                	slli	t1,t1,0x1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     af0:	0008090b          	0x8090b
     af4:	0501                	addi	a0,a0,0
     af6:	0016                	c.slli	zero,0x5
     af8:	0402                	c.slli64	s0
     afa:	097d0303          	lb	t1,151(s10)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     afe:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b00:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b02:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     b06:	0006                	c.slli	zero,0x1
     b08:	0501                	addi	a0,a0,0
     b0a:	0305                	addi	t1,t1,1
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b0c:	0902                	c.slli64	s2
     b0e:	0000                	unimp
     b10:	0301                	addi	t1,t1,0
     b12:	0901                	addi	s2,s2,0
     b14:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b16:	0301                	addi	t1,t1,0
    temp = polymult(public_key,N,random_val,48,q,0);
     b18:	0902                	c.slli64	s2
     b1a:	0000                	unimp
     b1c:	0501                	addi	a0,a0,0
     b1e:	0609                	addi	a2,a2,2
     b20:	00090003          	lb	zero,0(s2)
     b24:	0100                	addi	s0,sp,128
     b26:	4305                	li	t1,1
     b28:	04097b03          	0x4097b03
array_add(temp,message,48);
     b2c:	0100                	addi	s0,sp,128
     b2e:	0905                	addi	s2,s2,1
    temp = polymult(public_key,N,random_val,48,q,0);
     b30:	02090503          	lb	a0,32(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b34:	0100                	addi	s0,sp,128
array_add(temp,message,48);
     b36:	4305                	li	t1,1
     b38:	02097b03          	0x2097b03
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b3c:	0100                	addi	s0,sp,128
     b3e:	0905                	addi	s2,s2,1
     b40:	1a090503          	lb	a0,416(s2)
     b44:	0100                	addi	s0,sp,128
     b46:	4305                	li	t1,1
    for(i = (2*N); i < (3*N); ++i){
     b48:	02097b03          	0x2097b03
     b4c:	0100                	addi	s0,sp,128
     b4e:	0905                	addi	s2,s2,1
     b50:	02090503          	lb	a0,32(s2)
}
     b54:	0100                	addi	s0,sp,128
     b56:	06090103          	lb	sp,96(s2)
     b5a:	0100                	addi	s0,sp,128
     b5c:	06090203          	lb	tp,96(s2)
     b60:	0100                	addi	s0,sp,128
     b62:	04090103          	lb	sp,64(s2)
        CT[i-(2*N)] = CT[i];
     b66:	0100                	addi	s0,sp,128
     b68:	08097f03          	0x8097f03
    for(i = (2*N); i < (3*N); ++i){
     b6c:	0100                	addi	s0,sp,128
     b6e:	4305                	li	t1,1
        CT[i-(2*N)] = CT[i];
     b70:	02097803          	0x2097803
    for(i = (2*N); i < (3*N); ++i){
     b74:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b76:	0905                	addi	s2,s2,1
     b78:	02090903          	lb	s2,32(s2)
     b7c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     b7e:	4305                	li	t1,1
     b80:	04097703          	0x4097703
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b84:	0100                	addi	s0,sp,128
     b86:	0905                	addi	s2,s2,1
     b88:	02090503          	lb	a0,32(s2)
     b8c:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b8e:	0505                	addi	a0,a0,1
     b90:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b92:	0901                	addi	s2,s2,0
     b94:	0004                	0x4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     b96:	0301                	addi	t1,t1,0
     b98:	0901                	addi	s2,s2,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     b9a:	0000                	unimp
     b9c:	0301                	addi	t1,t1,0
     b9e:	0901                	addi	s2,s2,0
     ba0:	0000                	unimp
     ba2:	0301                	addi	t1,t1,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ba4:	0901                	addi	s2,s2,0
     ba6:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ba8:	0601                	addi	a2,a2,0
     baa:	00090c03          	lb	s8,0(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     bae:	0100                	addi	s0,sp,128
     bb0:	4305                	li	t1,1
     bb2:	06096b03          	0x6096b03
     bb6:	0100                	addi	s0,sp,128
     bb8:	0905                	addi	s2,s2,1
     bba:	04090903          	lb	s2,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     bbe:	0100                	addi	s0,sp,128
     bc0:	0505                	addi	a0,a0,1
     bc2:	04090c03          	lb	s8,64(s2)
        if(a2[i] <= q/2)
     bc6:	0100                	addi	s0,sp,128
     bc8:	02090103          	lb	sp,32(s2)
    for (i = 0; i < N; ++i){
     bcc:	0100                	addi	s0,sp,128
     bce:	0905                	addi	s2,s2,1
     bd0:	08097303          	0x8097303
    c = polymult2(secret_key_fp,N,a2,N,0);
     bd4:	0100                	addi	s0,sp,128
     bd6:	0505                	addi	a0,a0,1
     bd8:	0306                	slli	t1,t1,0x1
     bda:	090c                	addi	a1,sp,144
     bdc:	0002                	c.slli64	zero
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     bde:	0301                	addi	t1,t1,0
     be0:	0901                	addi	s2,s2,0
     be2:	0000                	unimp
     be4:	0301                	addi	t1,t1,0
     be6:	0000090b          	0x90b
    for(i = (2*N); i < ((2*N)+N); ++i){
     bea:	0301                	addi	t1,t1,0
     bec:	0901                	addi	s2,s2,0
}
     bee:	0008                	0x8
     bf0:	0301                	addi	t1,t1,0
     bf2:	0902                	c.slli64	s2
     bf4:	0008                	0x8
     bf6:	0501                	addi	a0,a0,0
     bf8:	060c                	addi	a1,sp,768
     bfa:	00090003          	lb	zero,0(s2)
     bfe:	0100                	addi	s0,sp,128
     c00:	1105                	addi	sp,sp,-31
     c02:	0200                	addi	s0,sp,256
        a2[i-(2*N)] = a2[i];
     c04:	0104                	addi	s1,sp,128
     c06:	0306                	slli	t1,t1,0x1
     c08:	0900                	addi	s0,sp,144
     c0a:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     c0c:	0501                	addi	a0,a0,0
     c0e:	0005                	c.nop	1
        a2[i-(2*N)] = a2[i];
     c10:	0402                	c.slli64	s0
     c12:	0601                	addi	a2,a2,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c14:	00090003          	lb	zero,0(s2)
        if(a2[i] <= q/2)
     c18:	0100                	addi	s0,sp,128
     c1a:	1805                	addi	a6,a6,-31
            a2[i] = (-1)*(q-a2[i]);
     c1c:	0200                	addi	s0,sp,256
     c1e:	0104                	addi	s1,sp,128
     c20:	0306                	slli	t1,t1,0x1
    for (i = 0; i < N; ++i){
     c22:	0906                	slli	s2,s2,0x1
     c24:	0004                	0x4
     c26:	0501                	addi	a0,a0,0
        c2[i-(2*N)] = c2[i];
     c28:	0005                	c.nop	1
     c2a:	0402                	c.slli64	s0
     c2c:	0601                	addi	a2,a2,0
     c2e:	08090003          	lb	zero,128(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c32:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     c34:	0c05                	addi	s8,s8,1
     c36:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     c38:	0104                	addi	s1,sp,128
  jal x0, default_exc_handler
     c3a:	04097a03          	0x4097a03
  mv  x1, x0
     c3e:	0100                	addi	s0,sp,128
     c40:	0200                	addi	s0,sp,256
  mv  x2, x1
     c42:	0104                	addi	s1,sp,128
  mv  x3, x1
     c44:	04090f03          	lb	t5,64(s2)
  mv  x5, x1
     c48:	0100                	addi	s0,sp,128
  mv  x6, x1
     c4a:	1105                	addi	sp,sp,-31
  mv  x7, x1
     c4c:	0200                	addi	s0,sp,256
  mv  x8, x1
     c4e:	0104                	addi	s1,sp,128
  mv  x9, x1
     c50:	0306                	slli	t1,t1,0x1
  mv x10, x1
     c52:	097f                	0x97f
  mv x11, x1
     c54:	0002                	c.slli64	zero
  mv x12, x1
     c56:	0501                	addi	a0,a0,0
  mv x13, x1
     c58:	0005                	c.nop	1
  mv x14, x1
     c5a:	0402                	c.slli64	s0
  mv x15, x1
     c5c:	0601                	addi	a2,a2,0
  mv x16, x1
     c5e:	00090003          	lb	zero,0(s2)
  mv x18, x1
     c62:	0100                	addi	s0,sp,128
  mv x19, x1
     c64:	0905                	addi	s2,s2,1
  mv x20, x1
     c66:	0200                	addi	s0,sp,256
  mv x21, x1
     c68:	0304                	addi	s1,sp,384
  mv x22, x1
     c6a:	0306                	slli	t1,t1,0x1
  mv x23, x1
     c6c:	00080973          	0x80973
  mv x25, x1
     c70:	0501                	addi	a0,a0,0
  mv x26, x1
     c72:	000e                	c.slli	zero,0x3
  mv x27, x1
     c74:	0402                	c.slli64	s0
  mv x28, x1
     c76:	00030603          	lb	a2,0(t1)
  mv x30, x1
     c7a:	0409                	addi	s0,s0,2
  mv x31, x1
     c7c:	0100                	addi	s0,sp,128
  la   x2, _stack_start
     c7e:	0200                	addi	s0,sp,256
     c80:	0304                	addi	s1,sp,384
     c82:	04090103          	lb	sp,64(s2)
  la x26, _bss_start
     c86:	0100                	addi	s0,sp,128
     c88:	0200                	addi	s0,sp,256
     c8a:	0304                	addi	s1,sp,384
     c8c:	02097f03          	0x2097f03
  la x27, _bss_end
     c90:	0100                	addi	s0,sp,128
     c92:	0905                	addi	s2,s2,1
     c94:	0200                	addi	s0,sp,256
  bge x26, x27, zero_loop_end
     c96:	0304                	addi	s1,sp,384
     c98:	0306                	slli	t1,t1,0x1
  sw x0, 0(x26)
     c9a:	0901                	addi	s2,s2,0
     c9c:	0004                	0x4
  addi x26, x26, 4
     c9e:	0501                	addi	a0,a0,0
  ble x26, x27, zero_loop
     ca0:	000e                	c.slli	zero,0x3
     ca2:	0402                	c.slli64	s0
  addi x10, x0, 0
     ca4:	00030603          	lb	a2,0(t1)
  addi x11, x0, 0
     ca8:	0009                	c.nop	2
     caa:	0100                	addi	s0,sp,128
  jal x1, main
     cac:	1d05                	addi	s10,s10,-31
     cae:	0200                	addi	s0,sp,256
     cb0:	0304                	addi	s1,sp,384
     cb2:	0306                	slli	t1,t1,0x1
     cb4:	097e                	slli	s2,s2,0x1f
     cb6:	0004                	0x4
     cb8:	0501                	addi	a0,a0,0
     cba:	0309                	addi	t1,t1,2
     cbc:	00040907          	0x40907
     cc0:	0501                	addi	a0,a0,0
     cc2:	0003060b          	0x3060b
     cc6:	0009                	c.nop	2
     cc8:	0100                	addi	s0,sp,128
     cca:	2005                	jal	cea <memcpy+0x3a>
     ccc:	0200                	addi	s0,sp,256
     cce:	0204                	addi	s1,sp,256
     cd0:	0306                	slli	t1,t1,0x1
     cd2:	097f                	0x97f
     cd4:	0002                	c.slli64	zero
     cd6:	0501                	addi	a0,a0,0
     cd8:	0022                	c.slli	zero,0x8
     cda:	0402                	c.slli64	s0
     cdc:	0602                	c.slli64	a2
     cde:	00090003          	lb	zero,0(s2)
     ce2:	0100                	addi	s0,sp,128
     ce4:	0905                	addi	s2,s2,1
     ce6:	0306                	slli	t1,t1,0x1
     ce8:	0909                	addi	s2,s2,2
     cea:	0004                	0x4
     cec:	0501                	addi	a0,a0,0
     cee:	0615                	addi	a2,a2,5
     cf0:	00090003          	lb	zero,0(s2)
     cf4:	0100                	addi	s0,sp,128
     cf6:	0c05                	addi	s8,s8,1
     cf8:	06090003          	lb	zero,96(s2)
     cfc:	0100                	addi	s0,sp,128
     cfe:	1a05                	addi	s4,s4,-31
     d00:	0200                	addi	s0,sp,256
     d02:	0204                	addi	s1,sp,256
     d04:	0306                	slli	t1,t1,0x1
     d06:	097f                	0x97f
     d08:	0004                	0x4
     d0a:	0501                	addi	a0,a0,0
     d0c:	0309                	addi	t1,t1,2
     d0e:	00040907          	0x40907
     d12:	0501                	addi	a0,a0,0
     d14:	0003060b          	0x3060b
     d18:	0009                	c.nop	2
     d1a:	0100                	addi	s0,sp,128
     d1c:	2005                	jal	d3c <memcpy+0x8c>
     d1e:	0200                	addi	s0,sp,256
     d20:	0204                	addi	s1,sp,256
     d22:	0306                	slli	t1,t1,0x1
     d24:	097f                	0x97f
     d26:	0002                	c.slli64	zero
     d28:	0501                	addi	a0,a0,0
     d2a:	0022                	c.slli	zero,0x8
     d2c:	0402                	c.slli64	s0
     d2e:	0602                	c.slli64	a2
     d30:	00090003          	lb	zero,0(s2)
     d34:	0100                	addi	s0,sp,128
     d36:	1805                	addi	a6,a6,-31
     d38:	0200                	addi	s0,sp,256
     d3a:	0104                	addi	s1,sp,128
     d3c:	0306                	slli	t1,t1,0x1
     d3e:	0900                	addi	s0,sp,144
     d40:	0002                	c.slli64	zero
     d42:	0501                	addi	a0,a0,0
     d44:	0005                	c.nop	1
     d46:	0402                	c.slli64	s0
     d48:	0601                	addi	a2,a2,0
     d4a:	08090003          	lb	zero,128(s2)
     d4e:	0100                	addi	s0,sp,128
     d50:	0b05                	addi	s6,s6,1
     d52:	0306                	slli	t1,t1,0x1
     d54:	090c                	addi	a1,sp,144
     d56:	0004                	0x4
     d58:	0501                	addi	a0,a0,0
     d5a:	0305                	addi	t1,t1,1
     d5c:	00c2                	slli	ra,ra,0x10
     d5e:	0409                	addi	s0,s0,2
     d60:	0100                	addi	s0,sp,128
     d62:	0e090203          	lb	tp,224(s2)
     d66:	0100                	addi	s0,sp,128
     d68:	1b05                	addi	s6,s6,-31
     d6a:	0306                	slli	t1,t1,0x1
     d6c:	0900                	addi	s0,sp,144
     d6e:	0000                	unimp
     d70:	0501                	addi	a0,a0,0
     d72:	09010313          	addi	t1,sp,144
     d76:	0004                	0x4
     d78:	0501                	addi	a0,a0,0
     d7a:	0015                	c.nop	5
     d7c:	0402                	c.slli64	s0
     d7e:	0601                	addi	a2,a2,0
     d80:	08097f03          	0x8097f03
     d84:	0100                	addi	s0,sp,128
     d86:	0505                	addi	a0,a0,1
     d88:	0200                	addi	s0,sp,256
     d8a:	0104                	addi	s1,sp,128
     d8c:	0306                	slli	t1,t1,0x1
     d8e:	0900                	addi	s0,sp,144
     d90:	0000                	unimp
     d92:	0601                	addi	a2,a2,0
     d94:	04090403          	lb	s0,64(s2)
     d98:	0100                	addi	s0,sp,128
     d9a:	00090203          	lb	tp,0(s2)
     d9e:	0100                	addi	s0,sp,128
     da0:	0105                	addi	sp,sp,1
     da2:	0306                	slli	t1,t1,0x1
     da4:	0901                	addi	s2,s2,0
     da6:	0000                	unimp
     da8:	0501                	addi	a0,a0,0
     daa:	0609                	addi	a2,a2,2
     dac:	097fb803          	0x97fb803
     db0:	002a                	c.slli	zero,0xa
     db2:	0501                	addi	a0,a0,0
     db4:	0616                	slli	a2,a2,0x5
     db6:	00090003          	lb	zero,0(s2)
     dba:	0100                	addi	s0,sp,128
     dbc:	0d05                	addi	s10,s10,1
     dbe:	04090003          	lb	zero,64(s2)
     dc2:	0100                	addi	s0,sp,128
     dc4:	1305                	addi	t1,t1,-31
     dc6:	04090003          	lb	zero,64(s2)
     dca:	0100                	addi	s0,sp,128
     dcc:	0505                	addi	a0,a0,1
     dce:	04090603          	lb	a2,64(s2)
     dd2:	0100                	addi	s0,sp,128
     dd4:	1305                	addi	t1,t1,-31
     dd6:	06097a03          	0x6097a03
     dda:	0100                	addi	s0,sp,128
     ddc:	0505                	addi	a0,a0,1
     dde:	0306                	slli	t1,t1,0x1
     de0:	0906                	slli	s2,s2,0x1
     de2:	0002                	c.slli64	zero
     de4:	0501                	addi	a0,a0,0
     de6:	0309                	addi	t1,t1,2
     de8:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     dec:	0501                	addi	a0,a0,0
     dee:	00030613          	mv	a2,t1
     df2:	0009                	c.nop	2
     df4:	0100                	addi	s0,sp,128
     df6:	0505                	addi	a0,a0,1
     df8:	0e090903          	lb	s2,224(s2)
     dfc:	0100                	addi	s0,sp,128
     dfe:	1305                	addi	t1,t1,-31
     e00:	04097703          	0x4097703
     e04:	0100                	addi	s0,sp,128
     e06:	0505                	addi	a0,a0,1
     e08:	0306                	slli	t1,t1,0x1
     e0a:	0909                	addi	s2,s2,2
     e0c:	0002                	c.slli64	zero
     e0e:	0501                	addi	a0,a0,0
     e10:	0309                	addi	t1,t1,2
     e12:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     e16:	0501                	addi	a0,a0,0
     e18:	0610                	addi	a2,sp,768
     e1a:	02090003          	lb	zero,32(s2)
     e1e:	0100                	addi	s0,sp,128
     e20:	1505                	addi	a0,a0,-31
     e22:	0200                	addi	s0,sp,256
     e24:	0104                	addi	s1,sp,128
     e26:	0306                	slli	t1,t1,0x1
     e28:	0900                	addi	s0,sp,144
     e2a:	0002                	c.slli64	zero
     e2c:	0501                	addi	a0,a0,0
     e2e:	0009                	c.nop	2
     e30:	0402                	c.slli64	s0
     e32:	0601                	addi	a2,a2,0
     e34:	00090003          	lb	zero,0(s2)
int main(){
     e38:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     e3a:	0505                	addi	a0,a0,1
     e3c:	0306                	slli	t1,t1,0x1
     e3e:	090c                	addi	a1,sp,144
     e40:	0004                	0x4
     e42:	0301                	addi	t1,t1,0
     e44:	00080907          	0x80907
int main(){
     e48:	0301                	addi	t1,t1,0
     e4a:	0901                	addi	s2,s2,0
     e4c:	0008                	0x8
     e4e:	0501                	addi	a0,a0,0
     e50:	0309                	addi	t1,t1,2
     e52:	0904                	addi	s1,sp,144
     e54:	0008                	0x8
     e56:	0501                	addi	a0,a0,0
    resultkon[0] = 0xaaaaaaa0;
     e58:	0610                	addi	a2,sp,768
     e5a:	00090003          	lb	zero,0(s2)
     e5e:	0100                	addi	s0,sp,128
     e60:	1c05                	addi	s8,s8,-31
     e62:	0200                	addi	s0,sp,256
     e64:	0104                	addi	s1,sp,128
     e66:	0306                	slli	t1,t1,0x1
     e68:	0900                	addi	s0,sp,144
    keys = generate_keys(N, p, q);
     e6a:	0002                	c.slli64	zero
     e6c:	0501                	addi	a0,a0,0
     e6e:	0009                	c.nop	2
     e70:	0402                	c.slli64	s0
     e72:	0601                	addi	a2,a2,0
    resultkon[0] = 0xaaaaaaa0;
     e74:	08090003          	lb	zero,128(s2)
    resultkon[0] = 0xaaaaaaa1;
     e78:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     e7a:	0d05                	addi	s10,s10,1
    resultkon[0] = 0xaaaaaaa1;
     e7c:	0200                	addi	s0,sp,256
     e7e:	0304                	addi	s1,sp,384
    for(i = 0; i < N; ++i){
     e80:	0306                	slli	t1,t1,0x1
     e82:	0969                	addi	s2,s2,26
        secret_key_f[i] = keys[i];
     e84:	0008                	0x8
     e86:	0501                	addi	a0,a0,0
     e88:	0030                	addi	a2,sp,8
     e8a:	0402                	c.slli64	s0
     e8c:	00030603          	lb	a2,0(t1)
    for(i = 0; i < N; ++i){
     e90:	0009                	c.nop	2
     e92:	0100                	addi	s0,sp,128
     e94:	2705                	jal	15b4 <result>
    for(i = N; i < (2*N); ++i){
     e96:	0200                	addi	s0,sp,256
     e98:	0304                	addi	s1,sp,384
     e9a:	06090003          	lb	zero,96(s2)
     e9e:	0100                	addi	s0,sp,128
     ea0:	2105                	jal	12c0 <_bss_start+0x1bc>
        secret_key_fp[i-(2*N)] = keys[i];
     ea2:	0200                	addi	s0,sp,256
     ea4:	0304                	addi	s1,sp,384
     ea6:	04097f03          	0x4097f03
     eaa:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     eac:	2705                	jal	15cc <result+0x18>
     eae:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     eb0:	0304                	addi	s1,sp,384
     eb2:	04090103          	lb	sp,64(s2)
     eb6:	0100                	addi	s0,sp,128
     eb8:	1905                	addi	s2,s2,-31
     eba:	0200                	addi	s0,sp,256
        public_key[i-(4*N)] = keys[i];
     ebc:	0304                	addi	s1,sp,384
     ebe:	02090003          	lb	zero,32(s2)
     ec2:	0100                	addi	s0,sp,128
     ec4:	2105                	jal	12e4 <_bss_start+0x1e0>
    for(i = (4*N); i < (5*N); ++i){
     ec6:	0200                	addi	s0,sp,256
     ec8:	0304                	addi	s1,sp,384
     eca:	0306                	slli	t1,t1,0x1
     ecc:	097f                	0x97f
     ece:	0004                	0x4
     ed0:	0501                	addi	a0,a0,0
        ring_poly[i-(5*N)] = keys[i];
     ed2:	030d                	addi	t1,t1,3
     ed4:	0919                	addi	s2,s2,6
     ed6:	0002                	c.slli64	zero
     ed8:	0501                	addi	a0,a0,0
     eda:	0003060f          	0x3060f
    for(i = (5*N); i < (6*N+1); ++i){
     ede:	0009                	c.nop	2
    resultkon[0] = 0xbbbbbbb0;
     ee0:	0100                	addi	s0,sp,128
     ee2:	2405                	jal	1102 <_edata+0x2>
     ee4:	0200                	addi	s0,sp,256
     ee6:	0204                	addi	s1,sp,256
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ee8:	0306                	slli	t1,t1,0x1
     eea:	097f                	0x97f
     eec:	0002                	c.slli64	zero
     eee:	0501                	addi	a0,a0,0
    resultkon[0] = 0xbbbbbbb1;
     ef0:	0026                	c.slli	zero,0x9
     ef2:	0402                	c.slli64	s0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     ef4:	0602                	c.slli64	a2
     ef6:	00090003          	lb	zero,0(s2)
     efa:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb1;
     efc:	0d05                	addi	s10,s10,1
    resultkon[0] = 0xccccccc0;
     efe:	0200                	addi	s0,sp,256
     f00:	0304                	addi	s1,sp,384
     f02:	0306                	slli	t1,t1,0x1
     f04:	0909                	addi	s2,s2,2
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f06:	0004                	0x4
    resultkon[0] = 0xccccccc0;
     f08:	0501                	addi	a0,a0,0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f0a:	0012                	c.slli	zero,0x4
     f0c:	0402                	c.slli64	s0
     f0e:	00030603          	lb	a2,0(t1)
     f12:	0009                	c.nop	2
     f14:	0100                	addi	s0,sp,128
     f16:	2105                	jal	1336 <_bss_start+0x232>
     f18:	0200                	addi	s0,sp,256
     f1a:	0304                	addi	s1,sp,384
     f1c:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xccccccc1;	
     f1e:	097f                	0x97f
     f20:	000a                	c.slli	zero,0x2
            resultkon[0] = 0xDEDEDEDE;
     f22:	0501                	addi	a0,a0,0
     f24:	0015                	c.nop	5
    resultkon[0] = 0xccccccc1;	
     f26:	0402                	c.slli64	s0
     f28:	0301                	addi	t1,t1,0
            resultkon[0] = 0xDEDEDEDE;
     f2a:	0900                	addi	s0,sp,144
     f2c:	0002                	c.slli64	zero
    for(i = 0; i < 32; ++i){
     f2e:	0501                	addi	a0,a0,0
     f30:	0009                	c.nop	2
        if(!(message[i] == Dec_Message[i])){
     f32:	0402                	c.slli64	s0
     f34:	0601                	addi	a2,a2,0
     f36:	00090003          	lb	zero,0(s2)
     f3a:	0100                	addi	s0,sp,128
     f3c:	0200                	addi	s0,sp,256
     f3e:	0304                	addi	s1,sp,384
     f40:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xBABABABA;
     f42:	090d                	addi	s2,s2,3
     f44:	0006                	c.slli	zero,0x1
     f46:	0501                	addi	a0,a0,0
     f48:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
}
     f4c:	00030603          	lb	a2,0(t1)
     f50:	0009                	c.nop	2
     f52:	0100                	addi	s0,sp,128
     f54:	2505                	jal	1574 <product2+0x218>
     f56:	0200                	addi	s0,sp,256
     f58:	0304                	addi	s1,sp,384
     f5a:	0306                	slli	t1,t1,0x1
     f5c:	097f                	0x97f
     f5e:	000c                	0xc
     f60:	0501                	addi	a0,a0,0
     f62:	033c                	addi	a5,sp,392
            resultkon[0] = 0xDEDEDEDE;
     f64:	090a                	slli	s2,s2,0x2
    for(i = 0; i < 32; ++i){
     f66:	0006                	c.slli	zero,0x1
     f68:	0501                	addi	a0,a0,0
     f6a:	0305                	addi	t1,t1,1
     f6c:	0902                	c.slli64	s2
     f6e:	0000                	unimp
     f70:	0301                	addi	t1,t1,0
     f72:	0901                	addi	s2,s2,0
     f74:	0000                	unimp
     f76:	0301                	addi	t1,t1,0
     f78:	0901                	addi	s2,s2,0
     f7a:	0000                	unimp
     f7c:	0501                	addi	a0,a0,0
     f7e:	0609                	addi	a2,a2,2
     f80:	00090003          	lb	zero,0(s2)
     f84:	0100                	addi	s0,sp,128
     f86:	3c05                	jal	9b6 <generate_keys+0x1b8>
     f88:	04097c03          	0x4097c03
     f8c:	0100                	addi	s0,sp,128
     f8e:	0905                	addi	s2,s2,1
     f90:	02090403          	lb	s0,32(s2)
     f94:	0100                	addi	s0,sp,128
     f96:	3c05                	jal	9c6 <generate_keys+0x1c8>
     f98:	04097c03          	0x4097c03
     f9c:	0100                	addi	s0,sp,128
     f9e:	0905                	addi	s2,s2,1
     fa0:	1c090403          	lb	s0,448(s2)
     fa4:	0100                	addi	s0,sp,128
     fa6:	06090103          	lb	sp,96(s2)
     faa:	0100                	addi	s0,sp,128
     fac:	06090103          	lb	sp,96(s2)
     fb0:	0100                	addi	s0,sp,128
     fb2:	06090203          	lb	tp,96(s2)
     fb6:	0100                	addi	s0,sp,128
     fb8:	06090103          	lb	sp,96(s2)
     fbc:	0100                	addi	s0,sp,128
     fbe:	06090103          	lb	sp,96(s2)
     fc2:	0100                	addi	s0,sp,128
     fc4:	06090103          	lb	sp,96(s2)
     fc8:	0100                	addi	s0,sp,128
     fca:	3c05                	jal	9fa <generate_keys+0x1fc>
     fcc:	04097503          	0x4097503
     fd0:	0100                	addi	s0,sp,128
     fd2:	0905                	addi	s2,s2,1
     fd4:	06090403          	lb	s0,96(s2)
     fd8:	0100                	addi	s0,sp,128
     fda:	0505                	addi	a0,a0,1
     fdc:	0306                	slli	t1,t1,0x1
     fde:	0901                	addi	s2,s2,0
     fe0:	0004                	0x4
     fe2:	0301                	addi	t1,t1,0
     fe4:	0901                	addi	s2,s2,0
     fe6:	0000                	unimp
     fe8:	0301                	addi	t1,t1,0
     fea:	0902                	c.slli64	s2
     fec:	0000                	unimp
     fee:	0301                	addi	t1,t1,0
     ff0:	0901                	addi	s2,s2,0
     ff2:	0000                	unimp
     ff4:	0301                	addi	t1,t1,0
     ff6:	0901                	addi	s2,s2,0
     ff8:	0000                	unimp
     ffa:	0301                	addi	t1,t1,0
     ffc:	0901                	addi	s2,s2,0
     ffe:	0000                	unimp
    1000:	0501                	addi	a0,a0,0
    1002:	0609                	addi	a2,a2,2
    1004:	00090003          	lb	zero,0(s2)
    1008:	0100                	addi	s0,sp,128
    100a:	0505                	addi	a0,a0,1
    100c:	0306                	slli	t1,t1,0x1
    100e:	0901                	addi	s2,s2,0
    1010:	0002                	c.slli64	zero
    1012:	0301                	addi	t1,t1,0
    1014:	0901                	addi	s2,s2,0
    1016:	0000                	unimp
    1018:	0301                	addi	t1,t1,0
    101a:	0901                	addi	s2,s2,0
    101c:	0000                	unimp
    101e:	0301                	addi	t1,t1,0
    1020:	0901                	addi	s2,s2,0
    1022:	0000                	unimp
    1024:	0301                	addi	t1,t1,0
    1026:	0902                	c.slli64	s2
    1028:	0000                	unimp
    102a:	0301                	addi	t1,t1,0
    102c:	0901                	addi	s2,s2,0
    102e:	0000                	unimp
    1030:	0501                	addi	a0,a0,0
    1032:	060c                	addi	a1,sp,768
    1034:	00090003          	lb	zero,0(s2)
    1038:	0100                	addi	s0,sp,128
    103a:	1105                	addi	sp,sp,-31
    103c:	02090303          	lb	t1,32(s2)
    1040:	0100                	addi	s0,sp,128
    1042:	0200                	addi	s0,sp,256
    1044:	0104                	addi	s1,sp,128
    1046:	0306                	slli	t1,t1,0x1
    1048:	097d                	addi	s2,s2,31
    104a:	0008                	0x8
    104c:	0501                	addi	a0,a0,0
    104e:	0005                	c.nop	1
    1050:	0402                	c.slli64	s0
    1052:	0601                	addi	a2,a2,0
    1054:	00090003          	lb	zero,0(s2)
    1058:	0100                	addi	s0,sp,128
    105a:	0306                	slli	t1,t1,0x1
    105c:	0906                	slli	s2,s2,0x1
    105e:	0004                	0x4
    1060:	0301                	addi	t1,t1,0
    1062:	0901                	addi	s2,s2,0
    1064:	0008                	0x8
    1066:	0301                	addi	t1,t1,0
    1068:	0905                	addi	s2,s2,1
    106a:	0008                	0x8
    106c:	0501                	addi	a0,a0,0
    106e:	060d                	addi	a2,a2,3
    1070:	00090003          	lb	zero,0(s2)
    1074:	0100                	addi	s0,sp,128
    1076:	0505                	addi	a0,a0,1
    1078:	0306                	slli	t1,t1,0x1
    107a:	00060903          	lb	s2,0(a2)
    107e:	0501                	addi	a0,a0,0
    1080:	0900030b          	0x900030b
    1084:	0000                	unimp
    1086:	0501                	addi	a0,a0,0
    1088:	0624                	addi	s1,sp,776
    108a:	00091603          	lh	a2,0(s2)
    108e:	0100                	addi	s0,sp,128
    1090:	1905                	addi	s2,s2,-31
    1092:	08093503          	0x8093503
    1096:	0100                	addi	s0,sp,128
    1098:	0905                	addi	s2,s2,1
    109a:	0306                	slli	t1,t1,0x1
    109c:	08097fb7          	lui	t6,0x8097
    10a0:	0100                	addi	s0,sp,128
    10a2:	0505                	addi	a0,a0,1
    10a4:	00090803          	lb	a6,0(s2)
    10a8:	0100                	addi	s0,sp,128
    10aa:	08090903          	lb	s2,128(s2)
    10ae:	0100                	addi	s0,sp,128
    10b0:	0905                	addi	s2,s2,1
    10b2:	08090203          	lb	tp,128(s2)
    10b6:	0100                	addi	s0,sp,128
    10b8:	0f05                	addi	t5,t5,1
    10ba:	0306                	slli	t1,t1,0x1
    10bc:	0900                	addi	s0,sp,144
    10be:	0000                	unimp
    10c0:	0501                	addi	a0,a0,0
    10c2:	0609                	addi	a2,a2,2
    10c4:	0c090103          	lb	sp,192(s2)
    10c8:	0100                	addi	s0,sp,128
    10ca:	1905                	addi	s2,s2,-31
    10cc:	0200                	addi	s0,sp,256
    10ce:	0104                	addi	s1,sp,128
    10d0:	04090003          	lb	zero,64(s2)
    10d4:	0100                	addi	s0,sp,128
    10d6:	0905                	addi	s2,s2,1
    10d8:	0200                	addi	s0,sp,256
    10da:	0104                	addi	s1,sp,128
    10dc:	0306                	slli	t1,t1,0x1
    10de:	0900                	addi	s0,sp,144
    10e0:	0000                	unimp
    10e2:	0501                	addi	a0,a0,0
    10e4:	0310                	addi	a2,sp,384
    10e6:	0906                	slli	s2,s2,0x1
    10e8:	000a                	c.slli	zero,0x2
    10ea:	0501                	addi	a0,a0,0
    10ec:	0015                	c.nop	5
    10ee:	0402                	c.slli64	s0
    10f0:	0601                	addi	a2,a2,0
    10f2:	02090003          	lb	zero,32(s2)
    10f6:	0100                	addi	s0,sp,128
    10f8:	0905                	addi	s2,s2,1
    10fa:	0200                	addi	s0,sp,256
    10fc:	0104                	addi	s1,sp,128
    10fe:	0306                	slli	t1,t1,0x1
    1100:	0900                	addi	s0,sp,144
    1102:	0000                	unimp
    1104:	0501                	addi	a0,a0,0
    1106:	0605                	addi	a2,a2,1
    1108:	04090c03          	lb	s8,64(s2)
    110c:	0100                	addi	s0,sp,128
    110e:	0905                	addi	s2,s2,1
    1110:	08090203          	lb	tp,128(s2)
    1114:	0100                	addi	s0,sp,128
    1116:	1005                	c.nop	-31
    1118:	0306                	slli	t1,t1,0x1
    111a:	0900                	addi	s0,sp,144
    111c:	0000                	unimp
    111e:	0501                	addi	a0,a0,0
    1120:	0605                	addi	a2,a2,1
    1122:	0e090403          	lb	s0,224(s2)
    1126:	0100                	addi	s0,sp,128
    1128:	06090903          	lb	s2,96(s2)
    112c:	0100                	addi	s0,sp,128
    112e:	0905                	addi	s2,s2,1
    1130:	08090403          	lb	s0,128(s2)
    1134:	0100                	addi	s0,sp,128
    1136:	1005                	c.nop	-31
    1138:	0306                	slli	t1,t1,0x1
    113a:	0900                	addi	s0,sp,144
    113c:	0000                	unimp
    113e:	0501                	addi	a0,a0,0
    1140:	0605                	addi	a2,a2,1
    1142:	10090403          	lb	s0,256(s2)
    1146:	0100                	addi	s0,sp,128
    1148:	06090903          	lb	s2,96(s2)
    114c:	0100                	addi	s0,sp,128
    114e:	0905                	addi	s2,s2,1
    1150:	08090203          	lb	tp,128(s2)
    1154:	0100                	addi	s0,sp,128
    1156:	1005                	c.nop	-31
    1158:	0306                	slli	t1,t1,0x1
    115a:	0900                	addi	s0,sp,144
    115c:	0002                	c.slli64	zero
    115e:	0501                	addi	a0,a0,0
    1160:	0015                	c.nop	5
    1162:	0402                	c.slli64	s0
    1164:	0601                	addi	a2,a2,0
    1166:	02090003          	lb	zero,32(s2)
    116a:	0100                	addi	s0,sp,128
    116c:	0905                	addi	s2,s2,1
    116e:	0200                	addi	s0,sp,256
    1170:	0104                	addi	s1,sp,128
    1172:	0306                	slli	t1,t1,0x1
    1174:	0900                	addi	s0,sp,144
    1176:	0000                	unimp
    1178:	0501                	addi	a0,a0,0
    117a:	0605                	addi	a2,a2,1
    117c:	04090b03          	lb	s6,64(s2)
    1180:	0100                	addi	s0,sp,128
    1182:	0105                	addi	sp,sp,1
    1184:	08090403          	lb	s0,128(s2)
    1188:	0100                	addi	s0,sp,128
    118a:	08090103          	lb	sp,128(s2)
    118e:	0100                	addi	s0,sp,128
    1190:	08090103          	lb	sp,128(s2)
    1194:	0100                	addi	s0,sp,128
    1196:	08090103          	lb	sp,128(s2)
    119a:	0100                	addi	s0,sp,128
    119c:	0905                	addi	s2,s2,1
    119e:	08090203          	lb	tp,128(s2)
    11a2:	0100                	addi	s0,sp,128
    11a4:	1205                	addi	tp,tp,-31
    11a6:	0306                	slli	t1,t1,0x1
    11a8:	7fa4                	flw	fs1,120(a5)
    11aa:	0009                	c.nop	2
    11ac:	0100                	addi	s0,sp,128
    11ae:	1005                	c.nop	-31
    11b0:	0900dc03          	lhu	s8,144(ra)
    11b4:	0002                	c.slli64	zero
    11b6:	0501                	addi	a0,a0,0
    11b8:	0015                	c.nop	5
    11ba:	0402                	c.slli64	s0
    11bc:	0601                	addi	a2,a2,0
    11be:	02090003          	lb	zero,32(s2)
    11c2:	0100                	addi	s0,sp,128
    11c4:	0905                	addi	s2,s2,1
    11c6:	0200                	addi	s0,sp,256
    11c8:	0104                	addi	s1,sp,128
    11ca:	0306                	slli	t1,t1,0x1
    11cc:	0900                	addi	s0,sp,144
    11ce:	0000                	unimp
    11d0:	0501                	addi	a0,a0,0
    11d2:	a203060b          	0xa203060b
    11d6:	097f                	0x97f
    11d8:	0004                	0x4
    11da:	0501                	addi	a0,a0,0
    11dc:	0610                	addi	a2,sp,768
    11de:	0900e903          	0x900e903
    11e2:	0004                	0x4
    11e4:	0301                	addi	t1,t1,0
    11e6:	0901                	addi	s2,s2,0
    11e8:	0002                	c.slli64	zero
    11ea:	0501                	addi	a0,a0,0
    11ec:	0015                	c.nop	5
    11ee:	0402                	c.slli64	s0
    11f0:	0601                	addi	a2,a2,0
    11f2:	02097f03          	0x2097f03
    11f6:	0100                	addi	s0,sp,128
    11f8:	0905                	addi	s2,s2,1
    11fa:	0200                	addi	s0,sp,256
    11fc:	0104                	addi	s1,sp,128
    11fe:	0306                	slli	t1,t1,0x1
    1200:	0900                	addi	s0,sp,144
    1202:	0000                	unimp
    1204:	0501                	addi	a0,a0,0
    1206:	0015                	c.nop	5
    1208:	0402                	c.slli64	s0
    120a:	0601                	addi	a2,a2,0
    120c:	0c090c03          	lb	s8,192(s2)
    1210:	0100                	addi	s0,sp,128
    1212:	0905                	addi	s2,s2,1
    1214:	0200                	addi	s0,sp,256
    1216:	0104                	addi	s1,sp,128
    1218:	0306                	slli	t1,t1,0x1
    121a:	0900                	addi	s0,sp,144
    121c:	0000                	unimp
    121e:	0601                	addi	a2,a2,0
    1220:	04090503          	lb	a0,64(s2)
    1224:	0100                	addi	s0,sp,128
    1226:	00090103          	lb	sp,0(s2)
    122a:	0100                	addi	s0,sp,128
    122c:	0505                	addi	a0,a0,1
    122e:	0306                	slli	t1,t1,0x1
    1230:	0901                	addi	s2,s2,0
    1232:	0000                	unimp
    1234:	0501                	addi	a0,a0,0
    1236:	0009                	c.nop	2
    1238:	0402                	c.slli64	s0
    123a:	f8030603          	lb	a2,-128(t1)
    123e:	097e                	slli	s2,s2,0x1f
    1240:	002a                	c.slli	zero,0xa
    1242:	0501                	addi	a0,a0,0
    1244:	0011                	c.nop	4
    1246:	0402                	c.slli64	s0
    1248:	00030603          	lb	a2,0(t1)
    124c:	0409                	addi	s0,s0,2
    124e:	0100                	addi	s0,sp,128
    1250:	0200                	addi	s0,sp,256
    1252:	0304                	addi	s1,sp,384
    1254:	04090103          	lb	sp,64(s2)
    1258:	0100                	addi	s0,sp,128
    125a:	0200                	addi	s0,sp,256
    125c:	0304                	addi	s1,sp,384
    125e:	02097f03          	0x2097f03
    1262:	0100                	addi	s0,sp,128
    1264:	0905                	addi	s2,s2,1
    1266:	0200                	addi	s0,sp,256
    1268:	0304                	addi	s1,sp,384
    126a:	0306                	slli	t1,t1,0x1
    126c:	0901                	addi	s2,s2,0
    126e:	0004                	0x4
    1270:	0501                	addi	a0,a0,0
    1272:	0011                	c.nop	4
    1274:	0402                	c.slli64	s0
    1276:	00030603          	lb	a2,0(t1)
    127a:	0009                	c.nop	2
    127c:	0100                	addi	s0,sp,128
    127e:	1b05                	addi	s6,s6,-31
    1280:	0200                	addi	s0,sp,256
    1282:	0304                	addi	s1,sp,384
    1284:	0306                	slli	t1,t1,0x1
    1286:	097c                	addi	a5,sp,156
    1288:	0004                	0x4
    128a:	0501                	addi	a0,a0,0
    128c:	000d                	c.nop	3
    128e:	0402                	c.slli64	s0
    1290:	09260303          	lb	t1,146(a2)
    1294:	0004                	0x4
    1296:	0501                	addi	a0,a0,0
    1298:	0022                	c.slli	zero,0x8
    129a:	0402                	c.slli64	s0
    129c:	00030603          	lb	a2,0(t1)
    12a0:	0009                	c.nop	2
    12a2:	0100                	addi	s0,sp,128
    12a4:	2a05                	jal	13d4 <product2+0x78>
    12a6:	0200                	addi	s0,sp,256
    12a8:	0304                	addi	s1,sp,384
    12aa:	08097f03          	0x8097f03
    12ae:	0100                	addi	s0,sp,128
    12b0:	1d05                	addi	s10,s10,-31
    12b2:	0200                	addi	s0,sp,256
    12b4:	0304                	addi	s1,sp,384
    12b6:	04090103          	lb	sp,64(s2)
    12ba:	0100                	addi	s0,sp,128
    12bc:	2a05                	jal	13ec <product2+0x90>
    12be:	0200                	addi	s0,sp,256
    12c0:	0304                	addi	s1,sp,384
    12c2:	0306                	slli	t1,t1,0x1
    12c4:	097f                	0x97f
    12c6:	0004                	0x4
    12c8:	0501                	addi	a0,a0,0
    12ca:	000d                	c.nop	3
    12cc:	0402                	c.slli64	s0
    12ce:	09070303          	lb	t1,144(a4)
    12d2:	0002                	c.slli64	zero
    12d4:	0501                	addi	a0,a0,0
    12d6:	0402001b          	0x402001b
    12da:	00030603          	lb	a2,0(t1)
    12de:	0009                	c.nop	2
    12e0:	0100                	addi	s0,sp,128
    12e2:	2305                	jal	1802 <result+0x24e>
    12e4:	0200                	addi	s0,sp,256
    12e6:	0304                	addi	s1,sp,384
    12e8:	04090003          	lb	zero,64(s2)
    12ec:	0100                	addi	s0,sp,128
    12ee:	1f05                	addi	t5,t5,-31
    12f0:	0200                	addi	s0,sp,256
    12f2:	0304                	addi	s1,sp,384
    12f4:	04090003          	lb	zero,64(s2)
    12f8:	0100                	addi	s0,sp,128
    12fa:	1505                	addi	a0,a0,-31
    12fc:	0200                	addi	s0,sp,256
    12fe:	0304                	addi	s1,sp,384
    1300:	04090003          	lb	zero,64(s2)
    1304:	0100                	addi	s0,sp,128
    1306:	2005                	jal	1326 <_bss_start+0x222>
    1308:	0200                	addi	s0,sp,256
    130a:	0304                	addi	s1,sp,384
    130c:	04097f03          	0x4097f03
    1310:	0100                	addi	s0,sp,128
    1312:	1f05                	addi	t5,t5,-31
    1314:	0200                	addi	s0,sp,256
    1316:	0304                	addi	s1,sp,384
    1318:	02090103          	lb	sp,32(s2)
    131c:	0100                	addi	s0,sp,128
    131e:	1505                	addi	a0,a0,-31
    1320:	0200                	addi	s0,sp,256
    1322:	0304                	addi	s1,sp,384
    1324:	02090003          	lb	zero,32(s2)
    1328:	0100                	addi	s0,sp,128
    132a:	2005                	jal	134a <_bss_start+0x246>
    132c:	0200                	addi	s0,sp,256
    132e:	0304                	addi	s1,sp,384
    1330:	0306                	slli	t1,t1,0x1
    1332:	097f                	0x97f
    1334:	0002                	c.slli64	zero
    1336:	0501                	addi	a0,a0,0
    1338:	000d                	c.nop	3
    133a:	0402                	c.slli64	s0
    133c:	092f0303          	lb	t1,146(t5)
    1340:	0004                	0x4
    1342:	0501                	addi	a0,a0,0
    1344:	0019                	c.nop	6
    1346:	0402                	c.slli64	s0
    1348:	00030603          	lb	a2,0(t1)
    134c:	0009                	c.nop	2
    134e:	0100                	addi	s0,sp,128
    1350:	2305                	jal	1870 <ti_2+0x64>
    1352:	0200                	addi	s0,sp,256
    1354:	0304                	addi	s1,sp,384
    1356:	04090003          	lb	zero,64(s2)
    135a:	0100                	addi	s0,sp,128
    135c:	1d05                	addi	s10,s10,-31
    135e:	0200                	addi	s0,sp,256
    1360:	0304                	addi	s1,sp,384
    1362:	04090003          	lb	zero,64(s2)
    1366:	0100                	addi	s0,sp,128
    1368:	1305                	addi	t1,t1,-31
    136a:	0200                	addi	s0,sp,256
    136c:	0304                	addi	s1,sp,384
    136e:	04090003          	lb	zero,64(s2)
    1372:	0100                	addi	s0,sp,128
    1374:	2005                	jal	1394 <product2+0x38>
    1376:	0200                	addi	s0,sp,256
    1378:	0304                	addi	s1,sp,384
    137a:	04097f03          	0x4097f03
    137e:	0100                	addi	s0,sp,128
    1380:	1d05                	addi	s10,s10,-31
    1382:	0200                	addi	s0,sp,256
    1384:	0304                	addi	s1,sp,384
    1386:	02090103          	lb	sp,32(s2)
    138a:	0100                	addi	s0,sp,128
    138c:	1305                	addi	t1,t1,-31
    138e:	0200                	addi	s0,sp,256
    1390:	0304                	addi	s1,sp,384
    1392:	02090003          	lb	zero,32(s2)
    1396:	0100                	addi	s0,sp,128
    1398:	2005                	jal	13b8 <product2+0x5c>
    139a:	0200                	addi	s0,sp,256
    139c:	0304                	addi	s1,sp,384
    139e:	0306                	slli	t1,t1,0x1
    13a0:	097f                	0x97f
    13a2:	0002                	c.slli64	zero
    13a4:	0501                	addi	a0,a0,0
    13a6:	0402000f          	0x402000f
    13aa:	09190303          	lb	t1,145(s2)
    13ae:	0004                	0x4
    13b0:	0501                	addi	a0,a0,0
    13b2:	04020017          	auipc	zero,0x4020
    13b6:	00030603          	lb	a2,0(t1)
    13ba:	0409                	addi	s0,s0,2
    13bc:	0100                	addi	s0,sp,128
    13be:	1b05                	addi	s6,s6,-31
    13c0:	0200                	addi	s0,sp,256
    13c2:	0304                	addi	s1,sp,384
    13c4:	04090103          	lb	sp,64(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	1605                	addi	a2,a2,-31
    13cc:	0200                	addi	s0,sp,256
    13ce:	0304                	addi	s1,sp,384
    13d0:	02090003          	lb	zero,32(s2)
    13d4:	0100                	addi	s0,sp,128
    13d6:	1705                	addi	a4,a4,-31
    13d8:	0200                	addi	s0,sp,256
    13da:	0304                	addi	s1,sp,384
    13dc:	02097f03          	0x2097f03
    13e0:	0100                	addi	s0,sp,128
    13e2:	0d05                	addi	s10,s10,1
    13e4:	0200                	addi	s0,sp,256
    13e6:	0304                	addi	s1,sp,384
    13e8:	0306                	slli	t1,t1,0x1
    13ea:	0901                	addi	s2,s2,0
    13ec:	0004                	0x4
    13ee:	0501                	addi	a0,a0,0
    13f0:	0020                	addi	s0,sp,8
    13f2:	0402                	c.slli64	s0
    13f4:	7a030603          	lb	a2,1952(t1)
    13f8:	0009                	c.nop	2
    13fa:	0100                	addi	s0,sp,128
    13fc:	1605                	addi	a2,a2,-31
    13fe:	0200                	addi	s0,sp,256
    1400:	0304                	addi	s1,sp,384
    1402:	02090603          	lb	a2,32(s2)
    1406:	0100                	addi	s0,sp,128
    1408:	2005                	jal	1428 <product2+0xcc>
    140a:	0200                	addi	s0,sp,256
    140c:	0304                	addi	s1,sp,384
    140e:	0306                	slli	t1,t1,0x1
    1410:	097a                	slli	s2,s2,0x1e
    1412:	0002                	c.slli64	zero
    1414:	0501                	addi	a0,a0,0
    1416:	030d                	addi	t1,t1,3
    1418:	090c                	addi	a1,sp,144
    141a:	0002                	c.slli64	zero
    141c:	0501                	addi	a0,a0,0
    141e:	0003061b          	0x3061b
    1422:	0009                	c.nop	2
    1424:	0100                	addi	s0,sp,128
    1426:	2005                	jal	1446 <product2+0xea>
    1428:	08090003          	lb	zero,128(s2)
    142c:	0100                	addi	s0,sp,128
    142e:	1005                	c.nop	-31
    1430:	04090003          	lb	zero,64(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	1e05                	addi	t3,t3,-31
    1438:	0200                	addi	s0,sp,256
    143a:	0204                	addi	s1,sp,256
    143c:	0306                	slli	t1,t1,0x1
    143e:	097f                	0x97f
    1440:	0004                	0x4
    1442:	0501                	addi	a0,a0,0
    1444:	000d                	c.nop	3
    1446:	0402                	c.slli64	s0
    1448:	090d0303          	lb	t1,144(s10)
    144c:	0004                	0x4
    144e:	0501                	addi	a0,a0,0
    1450:	0020                	addi	s0,sp,8
    1452:	0402                	c.slli64	s0
    1454:	00030603          	lb	a2,0(t1)
    1458:	0009                	c.nop	2
    145a:	0100                	addi	s0,sp,128
    145c:	0200                	addi	s0,sp,256
    145e:	0304                	addi	s1,sp,384
    1460:	02097f03          	0x2097f03
    1464:	0100                	addi	s0,sp,128
    1466:	0200                	addi	s0,sp,256
    1468:	0304                	addi	s1,sp,384
    146a:	04090103          	lb	sp,64(s2)
    146e:	0100                	addi	s0,sp,128
    1470:	2505                	jal	1a90 <random_keys+0xf4>
    1472:	0200                	addi	s0,sp,256
    1474:	0304                	addi	s1,sp,384
    1476:	04090003          	lb	zero,64(s2)
    147a:	0100                	addi	s0,sp,128
    147c:	1505                	addi	a0,a0,-31
    147e:	0200                	addi	s0,sp,256
    1480:	0304                	addi	s1,sp,384
    1482:	04090003          	lb	zero,64(s2)
    1486:	0100                	addi	s0,sp,128
    1488:	2005                	jal	14a8 <product2+0x14c>
    148a:	0200                	addi	s0,sp,256
    148c:	0304                	addi	s1,sp,384
    148e:	0306                	slli	t1,t1,0x1
    1490:	097f                	0x97f
    1492:	0004                	0x4
    1494:	0501                	addi	a0,a0,0
    1496:	0328                	addi	a0,sp,392
    1498:	090c                	addi	a1,sp,144
    149a:	0002                	c.slli64	zero
    149c:	0501                	addi	a0,a0,0
    149e:	0305                	addi	t1,t1,1
    14a0:	0902                	c.slli64	s2
    14a2:	0000                	unimp
    14a4:	0501                	addi	a0,a0,0
    14a6:	0628                	addi	a0,sp,776
    14a8:	00097e03          	0x97e03
    14ac:	0100                	addi	s0,sp,128
    14ae:	36090003          	lb	zero,864(s2)
    14b2:	0100                	addi	s0,sp,128
    14b4:	0905                	addi	s2,s2,1
    14b6:	04090203          	lb	tp,64(s2)
    14ba:	0100                	addi	s0,sp,128
    14bc:	10090103          	lb	sp,256(s2)
    14c0:	0100                	addi	s0,sp,128
    14c2:	0a097f03          	0xa097f03
    14c6:	0100                	addi	s0,sp,128
    14c8:	0505                	addi	a0,a0,1
    14ca:	0306                	slli	t1,t1,0x1
    14cc:	0901                	addi	s2,s2,0
    14ce:	006c                	addi	a1,sp,12
    14d0:	0501                	addi	a0,a0,0
    14d2:	0610                	addi	a2,sp,768
    14d4:	00090603          	lb	a2,0(s2)
    14d8:	0100                	addi	s0,sp,128
    14da:	0905                	addi	s2,s2,1
    14dc:	04097a03          	0x4097a03
    14e0:	0100                	addi	s0,sp,128
    14e2:	02090603          	lb	a2,32(s2)
    14e6:	0100                	addi	s0,sp,128
    14e8:	0e05                	addi	t3,t3,1
    14ea:	0e090503          	lb	a0,224(s2)
    14ee:	0100                	addi	s0,sp,128
    14f0:	0905                	addi	s2,s2,1
    14f2:	0a097503          	0xa097503
    14f6:	0100                	addi	s0,sp,128
    14f8:	0505                	addi	a0,a0,1
    14fa:	0306                	slli	t1,t1,0x1
    14fc:	0902                	c.slli64	s2
    14fe:	0064                	addi	s1,sp,12
    1500:	0301                	addi	t1,t1,0
    1502:	0901                	addi	s2,s2,0
    1504:	0000                	unimp
    1506:	0301                	addi	t1,t1,0
    1508:	0901                	addi	s2,s2,0
    150a:	0000                	unimp
    150c:	0301                	addi	t1,t1,0
    150e:	0901                	addi	s2,s2,0
    1510:	0000                	unimp
    1512:	0301                	addi	t1,t1,0
    1514:	0901                	addi	s2,s2,0
    1516:	0000                	unimp
    1518:	0301                	addi	t1,t1,0
    151a:	0901                	addi	s2,s2,0
    151c:	0000                	unimp
    151e:	0301                	addi	t1,t1,0
    1520:	0901                	addi	s2,s2,0
    1522:	0000                	unimp
    1524:	0301                	addi	t1,t1,0
    1526:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    152a:	0301                	addi	t1,t1,0
    152c:	0901                	addi	s2,s2,0
    152e:	0000                	unimp
    1530:	0501                	addi	a0,a0,0
    1532:	060e                	slli	a2,a2,0x3
    1534:	00090003          	lb	zero,0(s2)
    1538:	0100                	addi	s0,sp,128
    153a:	0505                	addi	a0,a0,1
    153c:	0306                	slli	t1,t1,0x1
    153e:	0902                	c.slli64	s2
    1540:	0004                	0x4
    1542:	0501                	addi	a0,a0,0
    1544:	0003060b          	0x3060b
    1548:	0009                	c.nop	2
    154a:	0100                	addi	s0,sp,128
    154c:	1005                	c.nop	-31
    154e:	0200                	addi	s0,sp,256
    1550:	0104                	addi	s1,sp,128
    1552:	0306                	slli	t1,t1,0x1
    1554:	0900                	addi	s0,sp,144
    1556:	0002                	c.slli64	zero
    1558:	0501                	addi	a0,a0,0
    155a:	0005                	c.nop	1
    155c:	0402                	c.slli64	s0
    155e:	0601                	addi	a2,a2,0
    1560:	00090003          	lb	zero,0(s2)
    1564:	0100                	addi	s0,sp,128
    1566:	06090603          	lb	a2,96(s2)
    156a:	0100                	addi	s0,sp,128
    156c:	1105                	addi	sp,sp,-31
    156e:	0200                	addi	s0,sp,256
    1570:	0104                	addi	s1,sp,128
    1572:	0306                	slli	t1,t1,0x1
    1574:	0900                	addi	s0,sp,144
    1576:	0004                	0x4
    1578:	0501                	addi	a0,a0,0
    157a:	0005                	c.nop	1
    157c:	0402                	c.slli64	s0
    157e:	0601                	addi	a2,a2,0
    1580:	00090003          	lb	zero,0(s2)
    1584:	0100                	addi	s0,sp,128
    1586:	0b05                	addi	s6,s6,1
    1588:	04090703          	lb	a4,64(s2)
    158c:	0100                	addi	s0,sp,128
    158e:	1805                	addi	a6,a6,-31
    1590:	02090103          	lb	sp,32(s2)
    1594:	0100                	addi	s0,sp,128
    1596:	1005                	c.nop	-31
    1598:	0200                	addi	s0,sp,256
    159a:	0104                	addi	s1,sp,128
    159c:	0306                	slli	t1,t1,0x1
    159e:	097f                	0x97f
    15a0:	0008                	0x8
    15a2:	0501                	addi	a0,a0,0
    15a4:	0005                	c.nop	1
    15a6:	0402                	c.slli64	s0
    15a8:	0601                	addi	a2,a2,0
    15aa:	00090003          	lb	zero,0(s2)
    15ae:	0100                	addi	s0,sp,128
    15b0:	1605                	addi	a2,a2,-31
    15b2:	08090503          	lb	a0,128(s2)
    15b6:	0100                	addi	s0,sp,128
    15b8:	1805                	addi	a6,a6,-31
    15ba:	08090103          	lb	sp,128(s2)
    15be:	0100                	addi	s0,sp,128
    15c0:	1005                	c.nop	-31
    15c2:	0200                	addi	s0,sp,256
    15c4:	0104                	addi	s1,sp,128
    15c6:	0306                	slli	t1,t1,0x1
    15c8:	097f                	0x97f
    15ca:	0008                	0x8
    15cc:	0501                	addi	a0,a0,0
    15ce:	0005                	c.nop	1
    15d0:	0402                	c.slli64	s0
    15d2:	0601                	addi	a2,a2,0
    15d4:	00090003          	lb	zero,0(s2)
    15d8:	0100                	addi	s0,sp,128
    15da:	0306                	slli	t1,t1,0x1
    15dc:	0905                	addi	s2,s2,1
    15de:	0004                	0x4
    15e0:	0501                	addi	a0,a0,0
    15e2:	061a                	slli	a2,a2,0x6
    15e4:	00090303          	lb	t1,0(s2)
    15e8:	0100                	addi	s0,sp,128
    15ea:	0a05                	addi	s4,s4,1
    15ec:	06097d03          	0x6097d03
    15f0:	0100                	addi	s0,sp,128
    15f2:	0505                	addi	a0,a0,1
    15f4:	0306                	slli	t1,t1,0x1
    15f6:	000c0903          	lb	s2,0(s8)
    15fa:	0501                	addi	a0,a0,0
    15fc:	0618                	addi	a4,sp,768
    15fe:	02090103          	lb	sp,32(s2)
    1602:	0100                	addi	s0,sp,128
    1604:	1405                	addi	s0,s0,-31
    1606:	0200                	addi	s0,sp,256
    1608:	0104                	addi	s1,sp,128
    160a:	0306                	slli	t1,t1,0x1
    160c:	097f                	0x97f
    160e:	0008                	0x8
    1610:	0501                	addi	a0,a0,0
    1612:	0005                	c.nop	1
    1614:	0402                	c.slli64	s0
    1616:	0601                	addi	a2,a2,0
    1618:	00090003          	lb	zero,0(s2)
    161c:	0100                	addi	s0,sp,128
    161e:	0306                	slli	t1,t1,0x1
    1620:	0906                	slli	s2,s2,0x1
    1622:	0004                	0x4
    1624:	0501                	addi	a0,a0,0
    1626:	060a                	slli	a2,a2,0x2
    1628:	00090003          	lb	zero,0(s2)
    162c:	0100                	addi	s0,sp,128
    162e:	0505                	addi	a0,a0,1
    1630:	0306                	slli	t1,t1,0x1
    1632:	0904                	addi	s1,sp,144
    1634:	000c                	0xc
    1636:	0501                	addi	a0,a0,0
    1638:	061a                	slli	a2,a2,0x6
    163a:	06090003          	lb	zero,96(s2)
    163e:	0100                	addi	s0,sp,128
    1640:	1805                	addi	a6,a6,-31
    1642:	02090103          	lb	sp,32(s2)
    1646:	0100                	addi	s0,sp,128
    1648:	1405                	addi	s0,s0,-31
    164a:	0200                	addi	s0,sp,256
    164c:	0104                	addi	s1,sp,128
    164e:	0306                	slli	t1,t1,0x1
    1650:	097f                	0x97f
    1652:	0008                	0x8
    1654:	0501                	addi	a0,a0,0
    1656:	0005                	c.nop	1
    1658:	0402                	c.slli64	s0
    165a:	0601                	addi	a2,a2,0
    165c:	00090003          	lb	zero,0(s2)
    1660:	0100                	addi	s0,sp,128
    1662:	0306                	slli	t1,t1,0x1
    1664:	0905                	addi	s2,s2,1
    1666:	0004                	0x4
    1668:	0501                	addi	a0,a0,0
    166a:	060a                	slli	a2,a2,0x2
    166c:	00090003          	lb	zero,0(s2)
    1670:	0100                	addi	s0,sp,128
    1672:	0505                	addi	a0,a0,1
    1674:	0306                	slli	t1,t1,0x1
    1676:	000a0903          	lb	s2,0(s4) # ffff9000 <_stack_start+0xfffe9000>
    167a:	0501                	addi	a0,a0,0
    167c:	0003060b          	0x3060b
    1680:	0209                	addi	tp,tp,2
    1682:	0100                	addi	s0,sp,128
    1684:	1805                	addi	a6,a6,-31
    1686:	02090003          	lb	zero,32(s2)
    168a:	0100                	addi	s0,sp,128
    168c:	1005                	c.nop	-31
    168e:	0200                	addi	s0,sp,256
    1690:	0104                	addi	s1,sp,128
    1692:	0306                	slli	t1,t1,0x1
    1694:	0900                	addi	s0,sp,144
    1696:	0004                	0x4
    1698:	0501                	addi	a0,a0,0
    169a:	0005                	c.nop	1
    169c:	0402                	c.slli64	s0
    169e:	0601                	addi	a2,a2,0
    16a0:	00090003          	lb	zero,0(s2)
    16a4:	0100                	addi	s0,sp,128
    16a6:	0306                	slli	t1,t1,0x1
    16a8:	0906                	slli	s2,s2,0x1
    16aa:	0004                	0x4
    16ac:	0501                	addi	a0,a0,0
    16ae:	060a                	slli	a2,a2,0x2
    16b0:	00090003          	lb	zero,0(s2)
    16b4:	0100                	addi	s0,sp,128
    16b6:	0505                	addi	a0,a0,1
    16b8:	0306                	slli	t1,t1,0x1
    16ba:	0904                	addi	s1,sp,144
    16bc:	0008                	0x8
    16be:	0501                	addi	a0,a0,0
    16c0:	061a                	slli	a2,a2,0x6
    16c2:	00090003          	lb	zero,0(s2)
    16c6:	0100                	addi	s0,sp,128
    16c8:	1805                	addi	a6,a6,-31
    16ca:	0a090103          	lb	sp,160(s2)
    16ce:	0100                	addi	s0,sp,128
    16d0:	1405                	addi	s0,s0,-31
    16d2:	0200                	addi	s0,sp,256
    16d4:	0104                	addi	s1,sp,128
    16d6:	0306                	slli	t1,t1,0x1
    16d8:	097f                	0x97f
    16da:	0008                	0x8
    16dc:	0501                	addi	a0,a0,0
    16de:	0005                	c.nop	1
    16e0:	0402                	c.slli64	s0
    16e2:	0601                	addi	a2,a2,0
    16e4:	02090003          	lb	zero,32(s2)
    16e8:	0100                	addi	s0,sp,128
    16ea:	1a05                	addi	s4,s4,-31
    16ec:	04090503          	lb	a0,64(s2)
    16f0:	0100                	addi	s0,sp,128
    16f2:	1805                	addi	a6,a6,-31
    16f4:	04090103          	lb	sp,64(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	1a05                	addi	s4,s4,-31
    16fc:	08097f03          	0x8097f03
    1700:	0100                	addi	s0,sp,128
    1702:	1405                	addi	s0,s0,-31
    1704:	0200                	addi	s0,sp,256
    1706:	0104                	addi	s1,sp,128
    1708:	0306                	slli	t1,t1,0x1
    170a:	0900                	addi	s0,sp,144
    170c:	0008                	0x8
    170e:	0501                	addi	a0,a0,0
    1710:	0005                	c.nop	1
    1712:	0402                	c.slli64	s0
    1714:	0601                	addi	a2,a2,0
    1716:	00090003          	lb	zero,0(s2)
    171a:	0100                	addi	s0,sp,128
    171c:	0306                	slli	t1,t1,0x1
    171e:	0906                	slli	s2,s2,0x1
    1720:	0004                	0x4
    1722:	0301                	addi	t1,t1,0
    1724:	0902                	c.slli64	s2
    1726:	0000                	unimp
    1728:	0501                	addi	a0,a0,0
    172a:	0601                	addi	a2,a2,0
    172c:	00090103          	lb	sp,0(s2)
    1730:	0100                	addi	s0,sp,128
    1732:	0905                	addi	s2,s2,1
    1734:	0200                	addi	s0,sp,256
    1736:	0304                	addi	s1,sp,384
    1738:	0306                	slli	t1,t1,0x1
    173a:	7fbd                	lui	t6,0xfffef
    173c:	4009                	c.li	zero,2
    173e:	0100                	addi	s0,sp,128
    1740:	1205                	addi	tp,tp,-31
    1742:	0200                	addi	s0,sp,256
    1744:	0304                	addi	s1,sp,384
    1746:	0306                	slli	t1,t1,0x1
    1748:	0900                	addi	s0,sp,144
    174a:	0000                	unimp
    174c:	0501                	addi	a0,a0,0
    174e:	04020017          	auipc	zero,0x4020
    1752:	7f030603          	lb	a2,2032(t1)
    1756:	0a09                	addi	s4,s4,2
    1758:	0100                	addi	s0,sp,128
    175a:	0905                	addi	s2,s2,1
    175c:	0200                	addi	s0,sp,256
    175e:	0304                	addi	s1,sp,384
    1760:	04090703          	lb	a4,64(s2)
    1764:	0100                	addi	s0,sp,128
    1766:	0e05                	addi	t3,t3,1
    1768:	0200                	addi	s0,sp,256
    176a:	0304                	addi	s1,sp,384
    176c:	0306                	slli	t1,t1,0x1
    176e:	0900                	addi	s0,sp,144
    1770:	0004                	0x4
    1772:	0501                	addi	a0,a0,0
    1774:	0009                	c.nop	2
    1776:	0402                	c.slli64	s0
    1778:	01030603          	lb	a2,16(t1)
    177c:	0a09                	addi	s4,s4,2
    177e:	0100                	addi	s0,sp,128
    1780:	0e05                	addi	t3,t3,1
    1782:	0200                	addi	s0,sp,256
    1784:	0304                	addi	s1,sp,384
    1786:	0306                	slli	t1,t1,0x1
    1788:	0900                	addi	s0,sp,144
    178a:	0000                	unimp
    178c:	0501                	addi	a0,a0,0
    178e:	0019                	c.nop	6
    1790:	0402                	c.slli64	s0
    1792:	7e030603          	lb	a2,2016(t1)
    1796:	0a09                	addi	s4,s4,2
    1798:	0100                	addi	s0,sp,128
    179a:	0905                	addi	s2,s2,1
    179c:	0200                	addi	s0,sp,256
    179e:	0304                	addi	s1,sp,384
    17a0:	04090803          	lb	a6,64(s2)
    17a4:	0100                	addi	s0,sp,128
    17a6:	1b05                	addi	s6,s6,-31
    17a8:	0200                	addi	s0,sp,256
    17aa:	0304                	addi	s1,sp,384
    17ac:	0306                	slli	t1,t1,0x1
    17ae:	0900                	addi	s0,sp,144
    17b0:	0004                	0x4
    17b2:	0501                	addi	a0,a0,0
    17b4:	0018                	0x18
    17b6:	0402                	c.slli64	s0
    17b8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    17bc:	0004                	0x4
    17be:	0501                	addi	a0,a0,0
    17c0:	0402001b          	0x402001b
    17c4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    17c8:	0004                	0x4
    17ca:	0501                	addi	a0,a0,0
    17cc:	0018                	0x18
    17ce:	0402                	c.slli64	s0
    17d0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    17d4:	0002                	c.slli64	zero
    17d6:	0501                	addi	a0,a0,0
    17d8:	04020017          	auipc	zero,0x4020
    17dc:	097f0303          	lb	t1,151(t5)
    17e0:	0002                	c.slli64	zero
    17e2:	0501                	addi	a0,a0,0
    17e4:	0018                	0x18
    17e6:	0402                	c.slli64	s0
    17e8:	09010303          	lb	t1,144(sp)
    17ec:	0002                	c.slli64	zero
    17ee:	0501                	addi	a0,a0,0
    17f0:	04020017          	auipc	zero,0x4020
    17f4:	7f030603          	lb	a2,2032(t1)
    17f8:	0209                	addi	tp,tp,2
    17fa:	0100                	addi	s0,sp,128
    17fc:	0905                	addi	s2,s2,1
    17fe:	0200                	addi	s0,sp,256
    1800:	0304                	addi	s1,sp,384
    1802:	02090603          	lb	a2,32(s2)
    1806:	0100                	addi	s0,sp,128
    1808:	1805                	addi	a6,a6,-31
    180a:	0200                	addi	s0,sp,256
    180c:	0304                	addi	s1,sp,384
    180e:	0306                	slli	t1,t1,0x1
    1810:	0900                	addi	s0,sp,144
    1812:	0000                	unimp
    1814:	0501                	addi	a0,a0,0
    1816:	0402001b          	0x402001b
    181a:	7f030603          	lb	a2,2032(t1)
    181e:	0a09                	addi	s4,s4,2
    1820:	0100                	addi	s0,sp,128
    1822:	0905                	addi	s2,s2,1
    1824:	0200                	addi	s0,sp,256
    1826:	0304                	addi	s1,sp,384
    1828:	06090903          	lb	s2,96(s2)
    182c:	0100                	addi	s0,sp,128
    182e:	1c05                	addi	s8,s8,-31
    1830:	0200                	addi	s0,sp,256
    1832:	0304                	addi	s1,sp,384
    1834:	0306                	slli	t1,t1,0x1
    1836:	0900                	addi	s0,sp,144
    1838:	0000                	unimp
    183a:	0501                	addi	a0,a0,0
    183c:	0018                	0x18
    183e:	0402                	c.slli64	s0
    1840:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1844:	0002                	c.slli64	zero
    1846:	0501                	addi	a0,a0,0
    1848:	001f 0402 0603      	0x6030402001f
    184e:	08097f03          	0x8097f03
    1852:	0100                	addi	s0,sp,128
    1854:	0905                	addi	s2,s2,1
    1856:	0200                	addi	s0,sp,256
    1858:	0304                	addi	s1,sp,384
    185a:	06090b03          	lb	s6,96(s2)
    185e:	0100                	addi	s0,sp,128
    1860:	1c05                	addi	s8,s8,-31
    1862:	0200                	addi	s0,sp,256
    1864:	0304                	addi	s1,sp,384
    1866:	0306                	slli	t1,t1,0x1
    1868:	0900                	addi	s0,sp,144
    186a:	0004                	0x4
    186c:	0501                	addi	a0,a0,0
    186e:	0018                	0x18
    1870:	0402                	c.slli64	s0
    1872:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1876:	0008                	0x8
    1878:	0501                	addi	a0,a0,0
    187a:	001f 0402 0303      	0x3030402001f
    1880:	097f                	0x97f
    1882:	0002                	c.slli64	zero
    1884:	0501                	addi	a0,a0,0
    1886:	0018                	0x18
    1888:	0402                	c.slli64	s0
    188a:	09010303          	lb	t1,144(sp)
    188e:	0002                	c.slli64	zero
    1890:	0501                	addi	a0,a0,0
    1892:	001f 0402 0603      	0x6030402001f
    1898:	02097f03          	0x2097f03
    189c:	0100                	addi	s0,sp,128
    189e:	0905                	addi	s2,s2,1
    18a0:	0200                	addi	s0,sp,256
    18a2:	0304                	addi	s1,sp,384
    18a4:	02090903          	lb	s2,32(s2)
    18a8:	0100                	addi	s0,sp,128
    18aa:	1605                	addi	a2,a2,-31
    18ac:	0200                	addi	s0,sp,256
    18ae:	0304                	addi	s1,sp,384
    18b0:	0306                	slli	t1,t1,0x1
    18b2:	0900                	addi	s0,sp,144
    18b4:	0000                	unimp
    18b6:	0501                	addi	a0,a0,0
    18b8:	001d                	c.nop	7
    18ba:	0402                	c.slli64	s0
    18bc:	097f0303          	lb	t1,151(t5)
    18c0:	0002                	c.slli64	zero
    18c2:	0501                	addi	a0,a0,0
    18c4:	0016                	c.slli	zero,0x5
    18c6:	0402                	c.slli64	s0
    18c8:	09010303          	lb	t1,144(sp)
    18cc:	0004                	0x4
    18ce:	0501                	addi	a0,a0,0
    18d0:	0402000f          	0x402000f
    18d4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    18d8:	0004                	0x4
    18da:	0501                	addi	a0,a0,0
    18dc:	001d                	c.nop	7
    18de:	0402                	c.slli64	s0
    18e0:	7f030603          	lb	a2,2032(t1)
    18e4:	0409                	addi	s0,s0,2
    18e6:	0100                	addi	s0,sp,128
    18e8:	0905                	addi	s2,s2,1
    18ea:	0200                	addi	s0,sp,256
    18ec:	0304                	addi	s1,sp,384
    18ee:	02090b03          	lb	s6,32(s2)
    18f2:	0100                	addi	s0,sp,128
    18f4:	1c05                	addi	s8,s8,-31
    18f6:	0200                	addi	s0,sp,256
    18f8:	0304                	addi	s1,sp,384
    18fa:	0306                	slli	t1,t1,0x1
    18fc:	0900                	addi	s0,sp,144
    18fe:	0000                	unimp
    1900:	0501                	addi	a0,a0,0
    1902:	0018                	0x18
    1904:	0402                	c.slli64	s0
    1906:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    190a:	0004                	0x4
    190c:	0501                	addi	a0,a0,0
    190e:	001f 0402 0603      	0x6030402001f
    1914:	08097f03          	0x8097f03
    1918:	0100                	addi	s0,sp,128
    191a:	0905                	addi	s2,s2,1
    191c:	0200                	addi	s0,sp,256
    191e:	0304                	addi	s1,sp,384
    1920:	04090603          	lb	a2,64(s2)
    1924:	0100                	addi	s0,sp,128
    1926:	1805                	addi	a6,a6,-31
    1928:	0200                	addi	s0,sp,256
    192a:	0304                	addi	s1,sp,384
    192c:	0306                	slli	t1,t1,0x1
    192e:	0900                	addi	s0,sp,144
    1930:	0004                	0x4
    1932:	0501                	addi	a0,a0,0
    1934:	001f 0402 0303      	0x3030402001f
    193a:	0900                	addi	s0,sp,144
    193c:	0004                	0x4
    193e:	0501                	addi	a0,a0,0
    1940:	0018                	0x18
    1942:	0402                	c.slli64	s0
    1944:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1948:	0004                	0x4
    194a:	0501                	addi	a0,a0,0
    194c:	0021                	c.nop	8
    194e:	0402                	c.slli64	s0
    1950:	097f0303          	lb	t1,151(t5)
    1954:	0002                	c.slli64	zero
    1956:	0501                	addi	a0,a0,0
    1958:	0018                	0x18
    195a:	0402                	c.slli64	s0
    195c:	09010303          	lb	t1,144(sp)
    1960:	0002                	c.slli64	zero
    1962:	0501                	addi	a0,a0,0
    1964:	0021                	c.nop	8
    1966:	0402                	c.slli64	s0
    1968:	7f030603          	lb	a2,2032(t1)
    196c:	0209                	addi	tp,tp,2
    196e:	0100                	addi	s0,sp,128
    1970:	4b05                	li	s6,1
    1972:	02090c03          	lb	s8,32(s2)
    1976:	0100                	addi	s0,sp,128
    1978:	0505                	addi	a0,a0,1
    197a:	00090203          	lb	tp,0(s2)
    197e:	0100                	addi	s0,sp,128
    1980:	00090103          	lb	sp,0(s2)
    1984:	0100                	addi	s0,sp,128
    1986:	00090203          	lb	tp,0(s2)
    198a:	0100                	addi	s0,sp,128
    198c:	4b05                	li	s6,1
    198e:	0306                	slli	t1,t1,0x1
    1990:	0000097b          	0x97b
    1994:	0501                	addi	a0,a0,0
    1996:	0309                	addi	t1,t1,2
    1998:	0905                	addi	s2,s2,1
    199a:	000c                	0xc
    199c:	0501                	addi	a0,a0,0
    199e:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    19a2:	0004                	0x4
    19a4:	0501                	addi	a0,a0,0
    19a6:	0309                	addi	t1,t1,2
    19a8:	0905                	addi	s2,s2,1
    19aa:	0002                	c.slli64	zero
    19ac:	0501                	addi	a0,a0,0
    19ae:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    19b2:	000a                	c.slli	zero,0x2
    19b4:	0301                	addi	t1,t1,0
    19b6:	0900                	addi	s0,sp,144
    19b8:	0006                	c.slli	zero,0x1
    19ba:	0501                	addi	a0,a0,0
    19bc:	0309                	addi	t1,t1,2
    19be:	0905                	addi	s2,s2,1
    19c0:	0004                	0x4
    19c2:	0501                	addi	a0,a0,0
    19c4:	0605                	addi	a2,a2,1
    19c6:	02090103          	lb	sp,32(s2)
    19ca:	0100                	addi	s0,sp,128
    19cc:	00090103          	lb	sp,0(s2)
    19d0:	0100                	addi	s0,sp,128
    19d2:	00090303          	lb	t1,0(s2)
    19d6:	0100                	addi	s0,sp,128
    19d8:	0c05                	addi	s8,s8,1
    19da:	0306                	slli	t1,t1,0x1
    19dc:	0900                	addi	s0,sp,144
    19de:	0000                	unimp
    19e0:	0501                	addi	a0,a0,0
    19e2:	0301                	addi	t1,t1,0
    19e4:	00120907          	0x120907
    19e8:	0501                	addi	a0,a0,0
    19ea:	030c                	addi	a1,sp,384
    19ec:	0979                	addi	s2,s2,30
    19ee:	0006                	c.slli	zero,0x1
    19f0:	0501                	addi	a0,a0,0
    19f2:	0601                	addi	a2,a2,0
    19f4:	02090703          	lb	a4,32(s2)
    19f8:	0100                	addi	s0,sp,128
    19fa:	0a05                	addi	s4,s4,1
    19fc:	0306                	slli	t1,t1,0x1
    19fe:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1a02:	0501                	addi	a0,a0,0
    1a04:	0301                	addi	t1,t1,0
    1a06:	097d                	addi	s2,s2,31
    1a08:	0004                	0x4
    1a0a:	0501                	addi	a0,a0,0
    1a0c:	0605                	addi	a2,a2,1
    1a0e:	04090303          	lb	t1,64(s2)
    1a12:	0100                	addi	s0,sp,128
    1a14:	0a05                	addi	s4,s4,1
    1a16:	0306                	slli	t1,t1,0x1
    1a18:	0900                	addi	s0,sp,144
    1a1a:	0000                	unimp
    1a1c:	0501                	addi	a0,a0,0
    1a1e:	0605                	addi	a2,a2,1
    1a20:	0e090203          	lb	tp,224(s2)
    1a24:	0100                	addi	s0,sp,128
    1a26:	1a05                	addi	s4,s4,-31
    1a28:	0306                	slli	t1,t1,0x1
    1a2a:	0900                	addi	s0,sp,144
    1a2c:	0000                	unimp
    1a2e:	0501                	addi	a0,a0,0
    1a30:	0014                	0x14
    1a32:	0402                	c.slli64	s0
    1a34:	0601                	addi	a2,a2,0
    1a36:	08090003          	lb	zero,128(s2)
    1a3a:	0100                	addi	s0,sp,128
    1a3c:	0505                	addi	a0,a0,1
    1a3e:	0200                	addi	s0,sp,256
    1a40:	0104                	addi	s1,sp,128
    1a42:	0306                	slli	t1,t1,0x1
    1a44:	0900                	addi	s0,sp,144
    1a46:	0000                	unimp
    1a48:	0501                	addi	a0,a0,0
    1a4a:	0301                	addi	t1,t1,0
    1a4c:	0909                	addi	s2,s2,2
    1a4e:	0004                	0x4
    1a50:	0501                	addi	a0,a0,0
    1a52:	0009                	c.nop	2
    1a54:	0402                	c.slli64	s0
    1a56:	78030603          	lb	a2,1920(t1)
    1a5a:	1009                	c.nop	-30
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	1905                	addi	s2,s2,-31
    1a60:	0200                	addi	s0,sp,256
    1a62:	0304                	addi	s1,sp,384
    1a64:	0306                	slli	t1,t1,0x1
    1a66:	0900                	addi	s0,sp,144
    1a68:	0000                	unimp
    1a6a:	0501                	addi	a0,a0,0
    1a6c:	001f 0402 0303      	0x3030402001f
    1a72:	097f                	0x97f
    1a74:	0008                	0x8
    1a76:	0501                	addi	a0,a0,0
    1a78:	0015                	c.nop	5
    1a7a:	0402                	c.slli64	s0
    1a7c:	09010303          	lb	t1,144(sp)
    1a80:	0004                	0x4
    1a82:	0501                	addi	a0,a0,0
    1a84:	001f 0402 0603      	0x6030402001f
    1a8a:	04097f03          	0x4097f03
    1a8e:	0100                	addi	s0,sp,128
    1a90:	6c05                	lui	s8,0x1
    1a92:	02090c03          	lb	s8,32(s2)
    1a96:	0100                	addi	s0,sp,128
    1a98:	0505                	addi	a0,a0,1
    1a9a:	00090203          	lb	tp,0(s2)
    1a9e:	0100                	addi	s0,sp,128
    1aa0:	00090103          	lb	sp,0(s2)
    1aa4:	0100                	addi	s0,sp,128
    1aa6:	00090103          	lb	sp,0(s2)
    1aaa:	0100                	addi	s0,sp,128
    1aac:	00090103          	lb	sp,0(s2)
    1ab0:	0100                	addi	s0,sp,128
    1ab2:	00090103          	lb	sp,0(s2)
    1ab6:	0100                	addi	s0,sp,128
    1ab8:	00090103          	lb	sp,0(s2)
    1abc:	0100                	addi	s0,sp,128
    1abe:	00090303          	lb	t1,0(s2)
    1ac2:	0100                	addi	s0,sp,128
    1ac4:	6c05                	lui	s8,0x1
    1ac6:	0306                	slli	t1,t1,0x1
    1ac8:	0976                	slli	s2,s2,0x1d
    1aca:	0000                	unimp
    1acc:	0501                	addi	a0,a0,0
    1ace:	031e                	slli	t1,t1,0x7
    1ad0:	0911                	addi	s2,s2,4
    1ad2:	0008                	0x8
    1ad4:	0501                	addi	a0,a0,0
    1ad6:	036c                	addi	a1,sp,396
    1ad8:	0006096f          	jal	s2,61ad8 <_stack_start+0x51ad8>
    1adc:	0501                	addi	a0,a0,0
    1ade:	0309                	addi	t1,t1,2
    1ae0:	090a                	slli	s2,s2,0x2
    1ae2:	000a                	c.slli	zero,0x2
    1ae4:	0501                	addi	a0,a0,0
    1ae6:	036c                	addi	a1,sp,396
    1ae8:	0976                	slli	s2,s2,0x1d
    1aea:	0004                	0x4
    1aec:	0501                	addi	a0,a0,0
    1aee:	0309                	addi	t1,t1,2
    1af0:	090a                	slli	s2,s2,0x2
    1af2:	0004                	0x4
    1af4:	0501                	addi	a0,a0,0
    1af6:	036c                	addi	a1,sp,396
    1af8:	0976                	slli	s2,s2,0x1d
    1afa:	0004                	0x4
    1afc:	0301                	addi	t1,t1,0
    1afe:	0900                	addi	s0,sp,144
    1b00:	0008                	0x8
    1b02:	0501                	addi	a0,a0,0
    1b04:	030a                	slli	t1,t1,0x2
    1b06:	090e                	slli	s2,s2,0x3
    1b08:	0002                	c.slli64	zero
    1b0a:	0501                	addi	a0,a0,0
    1b0c:	0309                	addi	t1,t1,2
    1b0e:	097c                	addi	a5,sp,156
    1b10:	0004                	0x4
    1b12:	0501                	addi	a0,a0,0
    1b14:	0605                	addi	a2,a2,1
    1b16:	04090403          	lb	s0,64(s2)
    1b1a:	0100                	addi	s0,sp,128
    1b1c:	0a05                	addi	s4,s4,1
    1b1e:	0306                	slli	t1,t1,0x1
    1b20:	0900                	addi	s0,sp,144
    1b22:	0000                	unimp
    1b24:	0501                	addi	a0,a0,0
    1b26:	0605                	addi	a2,a2,1
    1b28:	10090303          	lb	t1,256(s2)
    1b2c:	0100                	addi	s0,sp,128
    1b2e:	0b05                	addi	s6,s6,1
    1b30:	0306                	slli	t1,t1,0x1
    1b32:	0900                	addi	s0,sp,144
    1b34:	0004                	0x4
    1b36:	0501                	addi	a0,a0,0
    1b38:	0014                	0x14
    1b3a:	0402                	c.slli64	s0
    1b3c:	0601                	addi	a2,a2,0
    1b3e:	02090003          	lb	zero,32(s2)
    1b42:	0100                	addi	s0,sp,128
    1b44:	0505                	addi	a0,a0,1
    1b46:	0200                	addi	s0,sp,256
    1b48:	0104                	addi	s1,sp,128
    1b4a:	0306                	slli	t1,t1,0x1
    1b4c:	0900                	addi	s0,sp,144
    1b4e:	0000                	unimp
    1b50:	0501                	addi	a0,a0,0
    1b52:	0316                	slli	t1,t1,0x5
    1b54:	0906                	slli	s2,s2,0x1
    1b56:	0004                	0x4
    1b58:	0501                	addi	a0,a0,0
    1b5a:	030c                	addi	a1,sp,384
    1b5c:	097f                	0x97f
    1b5e:	0006                	c.slli	zero,0x1
    1b60:	0501                	addi	a0,a0,0
    1b62:	0011                	c.nop	4
    1b64:	0402                	c.slli64	s0
    1b66:	0601                	addi	a2,a2,0
    1b68:	02090003          	lb	zero,32(s2)
    1b6c:	0100                	addi	s0,sp,128
    1b6e:	0505                	addi	a0,a0,1
    1b70:	0200                	addi	s0,sp,256
    1b72:	0104                	addi	s1,sp,128
    1b74:	0306                	slli	t1,t1,0x1
    1b76:	0900                	addi	s0,sp,144
    1b78:	0000                	unimp
    1b7a:	0601                	addi	a2,a2,0
    1b7c:	04090803          	lb	a6,64(s2)
    1b80:	0100                	addi	s0,sp,128
    1b82:	0905                	addi	s2,s2,1
    1b84:	0306                	slli	t1,t1,0x1
    1b86:	0900                	addi	s0,sp,144
    1b88:	0000                	unimp
    1b8a:	0501                	addi	a0,a0,0
    1b8c:	0605                	addi	a2,a2,1
    1b8e:	0c090403          	lb	s0,192(s2)
    1b92:	0100                	addi	s0,sp,128
    1b94:	0a05                	addi	s4,s4,1
    1b96:	0306                	slli	t1,t1,0x1
    1b98:	0900                	addi	s0,sp,144
    1b9a:	0000                	unimp
    1b9c:	0501                	addi	a0,a0,0
    1b9e:	0605                	addi	a2,a2,1
    1ba0:	0a090103          	lb	sp,160(s2)
    1ba4:	0100                	addi	s0,sp,128
    1ba6:	1405                	addi	s0,s0,-31
    1ba8:	0200                	addi	s0,sp,256
    1baa:	0104                	addi	s1,sp,128
    1bac:	02090003          	lb	zero,32(s2)
    1bb0:	0100                	addi	s0,sp,128
    1bb2:	0505                	addi	a0,a0,1
    1bb4:	0200                	addi	s0,sp,256
    1bb6:	0104                	addi	s1,sp,128
    1bb8:	0306                	slli	t1,t1,0x1
    1bba:	0900                	addi	s0,sp,144
    1bbc:	0000                	unimp
    1bbe:	0501                	addi	a0,a0,0
    1bc0:	0301                	addi	t1,t1,0
    1bc2:	00040907          	0x40907
    1bc6:	0501                	addi	a0,a0,0
    1bc8:	0009                	c.nop	2
    1bca:	0402                	c.slli64	s0
    1bcc:	68030603          	lb	a2,1664(t1)
    1bd0:	1609                	addi	a2,a2,-30
    1bd2:	0100                	addi	s0,sp,128
    1bd4:	1905                	addi	s2,s2,-31
    1bd6:	0200                	addi	s0,sp,256
    1bd8:	0304                	addi	s1,sp,384
    1bda:	0306                	slli	t1,t1,0x1
    1bdc:	0900                	addi	s0,sp,144
    1bde:	0000                	unimp
    1be0:	0501                	addi	a0,a0,0
    1be2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1be6:	097f0303          	lb	t1,151(t5)
    1bea:	0008                	0x8
    1bec:	0501                	addi	a0,a0,0
    1bee:	0015                	c.nop	5
    1bf0:	0402                	c.slli64	s0
    1bf2:	09010303          	lb	t1,144(sp)
    1bf6:	0004                	0x4
    1bf8:	0501                	addi	a0,a0,0
    1bfa:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1bfe:	7f030603          	lb	a2,2032(t1)
    1c02:	0409                	addi	s0,s0,2
    1c04:	0100                	addi	s0,sp,128
    1c06:	0905                	addi	s2,s2,1
    1c08:	02090603          	lb	a2,32(s2)
    1c0c:	0100                	addi	s0,sp,128
    1c0e:	0e05                	addi	t3,t3,1
    1c10:	0306                	slli	t1,t1,0x1
    1c12:	0900                	addi	s0,sp,144
    1c14:	0000                	unimp
    1c16:	0501                	addi	a0,a0,0
    1c18:	0900030b          	0x900030b
    1c1c:	0002                	c.slli64	zero
    1c1e:	0501                	addi	a0,a0,0
    1c20:	060d                	addi	a2,a2,3
    1c22:	04090303          	lb	t1,64(s2)
    1c26:	0100                	addi	s0,sp,128
    1c28:	1905                	addi	s2,s2,-31
    1c2a:	0306                	slli	t1,t1,0x1
    1c2c:	0900                	addi	s0,sp,144
    1c2e:	0000                	unimp
    1c30:	0501                	addi	a0,a0,0
    1c32:	09000313          	li	t1,144
    1c36:	0004                	0x4
    1c38:	0501                	addi	a0,a0,0
    1c3a:	0018                	0x18
    1c3c:	0402                	c.slli64	s0
    1c3e:	0602                	c.slli64	a2
    1c40:	02097c03          	0x2097c03
    1c44:	0100                	addi	s0,sp,128
    1c46:	0905                	addi	s2,s2,1
    1c48:	0200                	addi	s0,sp,256
    1c4a:	0304                	addi	s1,sp,384
    1c4c:	06090e03          	lb	t3,96(s2)
    1c50:	0100                	addi	s0,sp,128
    1c52:	1905                	addi	s2,s2,-31
    1c54:	0200                	addi	s0,sp,256
    1c56:	0304                	addi	s1,sp,384
    1c58:	0306                	slli	t1,t1,0x1
    1c5a:	0900                	addi	s0,sp,144
    1c5c:	0000                	unimp
    1c5e:	0501                	addi	a0,a0,0
    1c60:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1c64:	097f0303          	lb	t1,151(t5)
    1c68:	0008                	0x8
    1c6a:	0501                	addi	a0,a0,0
    1c6c:	0015                	c.nop	5
    1c6e:	0402                	c.slli64	s0
    1c70:	09010303          	lb	t1,144(sp)
    1c74:	0004                	0x4
    1c76:	0501                	addi	a0,a0,0
    1c78:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1c7c:	7f030603          	lb	a2,2032(t1)
    1c80:	0409                	addi	s0,s0,2
    1c82:	0100                	addi	s0,sp,128
    1c84:	0209                	addi	tp,tp,2
    1c86:	0000                	unimp
    1c88:	0101                	addi	sp,sp,0
    1c8a:	0b05                	addi	s6,s6,1
    1c8c:	0500                	addi	s0,sp,640
    1c8e:	3602                	fld	fa2,32(sp)
    1c90:	000e                	c.slli	zero,0x3
    1c92:	0300                	addi	s0,sp,384
    1c94:	05c6                	slli	a1,a1,0x11
    1c96:	0501                	addi	a0,a0,0
    1c98:	0305                	addi	t1,t1,1
    1c9a:	0901                	addi	s2,s2,0
    1c9c:	0000                	unimp
    1c9e:	0301                	addi	t1,t1,0
    1ca0:	0901                	addi	s2,s2,0
    1ca2:	0000                	unimp
    1ca4:	0301                	addi	t1,t1,0
    1ca6:	0901                	addi	s2,s2,0
    1ca8:	0000                	unimp
    1caa:	0301                	addi	t1,t1,0
    1cac:	0901                	addi	s2,s2,0
    1cae:	0000                	unimp
    1cb0:	0301                	addi	t1,t1,0
    1cb2:	0901                	addi	s2,s2,0
    1cb4:	0000                	unimp
    1cb6:	0301                	addi	t1,t1,0
    1cb8:	0901                	addi	s2,s2,0
    1cba:	0000                	unimp
    1cbc:	0301                	addi	t1,t1,0
    1cbe:	0902                	c.slli64	s2
    1cc0:	0000                	unimp
    1cc2:	0501                	addi	a0,a0,0
    1cc4:	7803060b          	0x7803060b
    1cc8:	0009                	c.nop	2
    1cca:	0100                	addi	s0,sp,128
    1ccc:	0905                	addi	s2,s2,1
    1cce:	04090803          	lb	a6,64(s2)
    1cd2:	0100                	addi	s0,sp,128
    1cd4:	0b05                	addi	s6,s6,1
    1cd6:	0e097803          	0xe097803
    1cda:	0100                	addi	s0,sp,128
    1cdc:	1205                	addi	tp,tp,-31
    1cde:	10091803          	lh	a6,256(s2)
    1ce2:	0100                	addi	s0,sp,128
    1ce4:	0905                	addi	s2,s2,1
    1ce6:	04097003          	0x4097003
    1cea:	0100                	addi	s0,sp,128
    1cec:	0505                	addi	a0,a0,1
    1cee:	0306                	slli	t1,t1,0x1
    1cf0:	0901                	addi	s2,s2,0
    1cf2:	0002                	c.slli64	zero
    1cf4:	0301                	addi	t1,t1,0
    1cf6:	0901                	addi	s2,s2,0
    1cf8:	0000                	unimp
    1cfa:	0301                	addi	t1,t1,0
    1cfc:	0901                	addi	s2,s2,0
    1cfe:	0000                	unimp
    1d00:	0301                	addi	t1,t1,0
    1d02:	0901                	addi	s2,s2,0
    1d04:	0000                	unimp
    1d06:	0301                	addi	t1,t1,0
    1d08:	0901                	addi	s2,s2,0
    1d0a:	0000                	unimp
    1d0c:	0301                	addi	t1,t1,0
    1d0e:	0901                	addi	s2,s2,0
    1d10:	0000                	unimp
    1d12:	0301                	addi	t1,t1,0
    1d14:	0901                	addi	s2,s2,0
    1d16:	0000                	unimp
    1d18:	0301                	addi	t1,t1,0
    1d1a:	0909                	addi	s2,s2,2
    1d1c:	0000                	unimp
    1d1e:	0501                	addi	a0,a0,0
    1d20:	0612                	slli	a2,a2,0x4
    1d22:	00090003          	lb	zero,0(s2)
    1d26:	0100                	addi	s0,sp,128
    1d28:	0c05                	addi	s8,s8,1
    1d2a:	0c090103          	lb	sp,192(s2)
    1d2e:	0100                	addi	s0,sp,128
    1d30:	1205                	addi	tp,tp,-31
    1d32:	0a097f03          	0xa097f03
    1d36:	0100                	addi	s0,sp,128
    1d38:	0505                	addi	a0,a0,1
    1d3a:	0306                	slli	t1,t1,0x1
    1d3c:	0901                	addi	s2,s2,0
    1d3e:	0002                	c.slli64	zero
    1d40:	0501                	addi	a0,a0,0
    1d42:	0612                	slli	a2,a2,0x4
    1d44:	00090103          	lb	sp,0(s2)
    1d48:	0100                	addi	s0,sp,128
    1d4a:	0c05                	addi	s8,s8,1
    1d4c:	04097f03          	0x4097f03
    1d50:	0100                	addi	s0,sp,128
    1d52:	0505                	addi	a0,a0,1
    1d54:	0306                	slli	t1,t1,0x1
    1d56:	0901                	addi	s2,s2,0
    1d58:	0002                	c.slli64	zero
    1d5a:	0501                	addi	a0,a0,0
    1d5c:	0612                	slli	a2,a2,0x4
    1d5e:	00090003          	lb	zero,0(s2)
    1d62:	0100                	addi	s0,sp,128
    1d64:	0505                	addi	a0,a0,1
    1d66:	0306                	slli	t1,t1,0x1
    1d68:	0902                	c.slli64	s2
    1d6a:	0004                	0x4
    1d6c:	0501                	addi	a0,a0,0
    1d6e:	0310                	addi	a2,sp,384
    1d70:	0900                	addi	s0,sp,144
    1d72:	0000                	unimp
    1d74:	0501                	addi	a0,a0,0
    1d76:	0605                	addi	a2,a2,1
    1d78:	00090003          	lb	zero,0(s2)
    1d7c:	0100                	addi	s0,sp,128
    1d7e:	0905                	addi	s2,s2,1
    1d80:	0200                	addi	s0,sp,256
    1d82:	0304                	addi	s1,sp,384
    1d84:	0306                	slli	t1,t1,0x1
    1d86:	0902                	c.slli64	s2
    1d88:	0004                	0x4
    1d8a:	0501                	addi	a0,a0,0
    1d8c:	001f 0402 0603      	0x6030402001f
    1d92:	00090003          	lb	zero,0(s2)
    1d96:	0100                	addi	s0,sp,128
    1d98:	1905                	addi	s2,s2,-31
    1d9a:	0200                	addi	s0,sp,256
    1d9c:	0304                	addi	s1,sp,384
    1d9e:	06090003          	lb	zero,96(s2)
    1da2:	0100                	addi	s0,sp,128
    1da4:	1705                	addi	a4,a4,-31
    1da6:	0200                	addi	s0,sp,256
    1da8:	0304                	addi	s1,sp,384
    1daa:	0306                	slli	t1,t1,0x1
    1dac:	097e                	slli	s2,s2,0x1f
    1dae:	0006                	c.slli	zero,0x1
    1db0:	0501                	addi	a0,a0,0
    1db2:	0010                	0x10
    1db4:	0402                	c.slli64	s0
    1db6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1dba:	0000                	unimp
    1dbc:	0501                	addi	a0,a0,0
    1dbe:	0005                	c.nop	1
    1dc0:	0402                	c.slli64	s0
    1dc2:	00030603          	lb	a2,0(t1)
    1dc6:	0209                	addi	tp,tp,2
    1dc8:	0100                	addi	s0,sp,128
    1dca:	0905                	addi	s2,s2,1
    1dcc:	0200                	addi	s0,sp,256
    1dce:	0304                	addi	s1,sp,384
    1dd0:	0306                	slli	t1,t1,0x1
    1dd2:	0909                	addi	s2,s2,2
    1dd4:	0004                	0x4
    1dd6:	0501                	addi	a0,a0,0
    1dd8:	0402001b          	0x402001b
    1ddc:	097e0303          	lb	t1,151(t3) # 1a097 <_stack_start+0xa097>
    1de0:	0000                	unimp
    1de2:	0501                	addi	a0,a0,0
    1de4:	0010                	0x10
    1de6:	0402                	c.slli64	s0
    1de8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1dec:	0000                	unimp
    1dee:	0501                	addi	a0,a0,0
    1df0:	0009                	c.nop	2
    1df2:	0402                	c.slli64	s0
    1df4:	09090303          	lb	t1,144(s2)
    1df8:	000c                	0xc
    1dfa:	0501                	addi	a0,a0,0
    1dfc:	0026                	c.slli	zero,0x9
    1dfe:	0402                	c.slli64	s0
    1e00:	00030603          	lb	a2,0(t1)
    1e04:	0009                	c.nop	2
    1e06:	0100                	addi	s0,sp,128
    1e08:	2005                	jal	1e28 <random_keys+0x48c>
    1e0a:	0200                	addi	s0,sp,256
    1e0c:	0304                	addi	s1,sp,384
    1e0e:	06090003          	lb	zero,96(s2)
    1e12:	0100                	addi	s0,sp,128
    1e14:	1f05                	addi	t5,t5,-31
    1e16:	0200                	addi	s0,sp,256
    1e18:	0304                	addi	s1,sp,384
    1e1a:	0306                	slli	t1,t1,0x1
    1e1c:	097e                	slli	s2,s2,0x1f
    1e1e:	0004                	0x4
    1e20:	0501                	addi	a0,a0,0
    1e22:	0014                	0x14
    1e24:	0402                	c.slli64	s0
    1e26:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e2a:	0000                	unimp
    1e2c:	0501                	addi	a0,a0,0
    1e2e:	0005                	c.nop	1
    1e30:	0402                	c.slli64	s0
    1e32:	00030603          	lb	a2,0(t1)
    1e36:	0009                	c.nop	2
    1e38:	0100                	addi	s0,sp,128
    1e3a:	0905                	addi	s2,s2,1
    1e3c:	0200                	addi	s0,sp,256
    1e3e:	0304                	addi	s1,sp,384
    1e40:	0306                	slli	t1,t1,0x1
    1e42:	0909                	addi	s2,s2,2
    1e44:	0004                	0x4
    1e46:	0501                	addi	a0,a0,0
    1e48:	001f 0402 0303      	0x3030402001f
    1e4e:	097e                	slli	s2,s2,0x1f
    1e50:	0000                	unimp
    1e52:	0501                	addi	a0,a0,0
    1e54:	0014                	0x14
    1e56:	0402                	c.slli64	s0
    1e58:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e5c:	0000                	unimp
    1e5e:	0501                	addi	a0,a0,0
    1e60:	0009                	c.nop	2
    1e62:	0402                	c.slli64	s0
    1e64:	09090303          	lb	t1,144(s2)
    1e68:	000c                	0xc
    1e6a:	0501                	addi	a0,a0,0
    1e6c:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1e70:	00030603          	lb	a2,0(t1)
    1e74:	0009                	c.nop	2
    1e76:	0100                	addi	s0,sp,128
    1e78:	1d05                	addi	s10,s10,-31
    1e7a:	0200                	addi	s0,sp,256
    1e7c:	0304                	addi	s1,sp,384
    1e7e:	06090003          	lb	zero,96(s2)
    1e82:	0100                	addi	s0,sp,128
    1e84:	1f05                	addi	t5,t5,-31
    1e86:	0200                	addi	s0,sp,256
    1e88:	0304                	addi	s1,sp,384
    1e8a:	0306                	slli	t1,t1,0x1
    1e8c:	097e                	slli	s2,s2,0x1f
    1e8e:	0004                	0x4
    1e90:	0501                	addi	a0,a0,0
    1e92:	0014                	0x14
    1e94:	0402                	c.slli64	s0
    1e96:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e9a:	0000                	unimp
    1e9c:	0501                	addi	a0,a0,0
    1e9e:	0005                	c.nop	1
    1ea0:	0402                	c.slli64	s0
    1ea2:	00030603          	lb	a2,0(t1)
    1ea6:	0009                	c.nop	2
    1ea8:	0100                	addi	s0,sp,128
    1eaa:	0905                	addi	s2,s2,1
    1eac:	0200                	addi	s0,sp,256
    1eae:	0304                	addi	s1,sp,384
    1eb0:	0306                	slli	t1,t1,0x1
    1eb2:	0909                	addi	s2,s2,2
    1eb4:	000c                	0xc
    1eb6:	0501                	addi	a0,a0,0
    1eb8:	0022                	c.slli	zero,0x8
    1eba:	0402                	c.slli64	s0
    1ebc:	00030603          	lb	a2,0(t1)
    1ec0:	0009                	c.nop	2
    1ec2:	0100                	addi	s0,sp,128
    1ec4:	1c05                	addi	s8,s8,-31
    1ec6:	0200                	addi	s0,sp,256
    1ec8:	0304                	addi	s1,sp,384
    1eca:	06090003          	lb	zero,96(s2)
    1ece:	0100                	addi	s0,sp,128
    1ed0:	2105                	jal	22f0 <_min_stack+0x2f0>
    1ed2:	0200                	addi	s0,sp,256
    1ed4:	0304                	addi	s1,sp,384
    1ed6:	0306                	slli	t1,t1,0x1
    1ed8:	097e                	slli	s2,s2,0x1f
    1eda:	0004                	0x4
    1edc:	0501                	addi	a0,a0,0
    1ede:	0014                	0x14
    1ee0:	0402                	c.slli64	s0
    1ee2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ee6:	0000                	unimp
    1ee8:	0501                	addi	a0,a0,0
    1eea:	0005                	c.nop	1
    1eec:	0402                	c.slli64	s0
    1eee:	00030603          	lb	a2,0(t1)
    1ef2:	0009                	c.nop	2
    1ef4:	0100                	addi	s0,sp,128
    1ef6:	0306                	slli	t1,t1,0x1
    1ef8:	0908                	addi	a0,sp,144
    1efa:	0004                	0x4
    1efc:	0501                	addi	a0,a0,0
    1efe:	0612                	slli	a2,a2,0x4
    1f00:	00090003          	lb	zero,0(s2)
    1f04:	0100                	addi	s0,sp,128
    1f06:	1305                	addi	t1,t1,-31
    1f08:	08090103          	lb	sp,128(s2)
    1f0c:	0100                	addi	s0,sp,128
    1f0e:	1205                	addi	tp,tp,-31
    1f10:	08090103          	lb	sp,128(s2)
    1f14:	0100                	addi	s0,sp,128
    1f16:	1305                	addi	t1,t1,-31
    1f18:	04097f03          	0x4097f03
    1f1c:	0100                	addi	s0,sp,128
    1f1e:	1205                	addi	tp,tp,-31
    1f20:	04097f03          	0x4097f03
    1f24:	0100                	addi	s0,sp,128
    1f26:	0505                	addi	a0,a0,1
    1f28:	0306                	slli	t1,t1,0x1
    1f2a:	0901                	addi	s2,s2,0
    1f2c:	0002                	c.slli64	zero
    1f2e:	0501                	addi	a0,a0,0
    1f30:	00030613          	mv	a2,t1
    1f34:	0009                	c.nop	2
    1f36:	0100                	addi	s0,sp,128
    1f38:	1205                	addi	tp,tp,-31
    1f3a:	02090103          	lb	sp,32(s2)
    1f3e:	0100                	addi	s0,sp,128
    1f40:	02090903          	lb	s2,32(s2)
    1f44:	0100                	addi	s0,sp,128
    1f46:	1305                	addi	t1,t1,-31
    1f48:	08097603          	0x8097603
    1f4c:	0100                	addi	s0,sp,128
    1f4e:	0505                	addi	a0,a0,1
    1f50:	0306                	slli	t1,t1,0x1
    1f52:	0901                	addi	s2,s2,0
    1f54:	0002                	c.slli64	zero
    1f56:	0301                	addi	t1,t1,0
    1f58:	0909                	addi	s2,s2,2
    1f5a:	0000                	unimp
    1f5c:	0501                	addi	a0,a0,0
    1f5e:	0612                	slli	a2,a2,0x4
    1f60:	00090003          	lb	zero,0(s2)
    1f64:	0100                	addi	s0,sp,128
    1f66:	0505                	addi	a0,a0,1
    1f68:	0306                	slli	t1,t1,0x1
    1f6a:	0901                	addi	s2,s2,0
    1f6c:	0002                	c.slli64	zero
    1f6e:	0501                	addi	a0,a0,0
    1f70:	00030613          	mv	a2,t1
    1f74:	0009                	c.nop	2
    1f76:	0100                	addi	s0,sp,128
    1f78:	0505                	addi	a0,a0,1
    1f7a:	0306                	slli	t1,t1,0x1
    1f7c:	0901                	addi	s2,s2,0
    1f7e:	0014                	0x14
    1f80:	0501                	addi	a0,a0,0
    1f82:	0612                	slli	a2,a2,0x4
    1f84:	00090003          	lb	zero,0(s2)
    1f88:	0100                	addi	s0,sp,128
    1f8a:	1a05                	addi	s4,s4,-31
    1f8c:	04091b03          	lh	s6,64(s2)
    1f90:	0100                	addi	s0,sp,128
    1f92:	1205                	addi	tp,tp,-31
    1f94:	04096503          	0x4096503
    1f98:	0100                	addi	s0,sp,128
    1f9a:	0505                	addi	a0,a0,1
    1f9c:	0306                	slli	t1,t1,0x1
    1f9e:	00020913          	mv	s2,tp
    1fa2:	0501                	addi	a0,a0,0
    1fa4:	0310                	addi	a2,sp,384
    1fa6:	0900                	addi	s0,sp,144
    1fa8:	0000                	unimp
    1faa:	0501                	addi	a0,a0,0
    1fac:	0612                	slli	a2,a2,0x4
    1fae:	00096d03          	0x96d03
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	1a05                	addi	s4,s4,-31
    1fb6:	02091b03          	lh	s6,32(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	0505                	addi	a0,a0,1
    1fbe:	04097803          	0x4097803
    1fc2:	0100                	addi	s0,sp,128
    1fc4:	0905                	addi	s2,s2,1
    1fc6:	0306                	slli	t1,t1,0x1
    1fc8:	0901                	addi	s2,s2,0
    1fca:	0004                	0x4
    1fcc:	0501                	addi	a0,a0,0
    1fce:	0003060b          	0x3060b
    1fd2:	0009                	c.nop	2
    1fd4:	0100                	addi	s0,sp,128
    1fd6:	2705                	jal	26f6 <_min_stack+0x6f6>
    1fd8:	02090003          	lb	zero,32(s2)
    1fdc:	0100                	addi	s0,sp,128
    1fde:	0b05                	addi	s6,s6,1
    1fe0:	04090003          	lb	zero,64(s2)
    1fe4:	0100                	addi	s0,sp,128
    1fe6:	0d05                	addi	s10,s10,1
    1fe8:	0306                	slli	t1,t1,0x1
    1fea:	0902                	c.slli64	s2
    1fec:	000a                	c.slli	zero,0x2
    1fee:	0501                	addi	a0,a0,0
    1ff0:	061a                	slli	a2,a2,0x6
    1ff2:	00090003          	lb	zero,0(s2)
    1ff6:	0100                	addi	s0,sp,128
    1ff8:	0d05                	addi	s10,s10,1
    1ffa:	0306                	slli	t1,t1,0x1
    1ffc:	0902                	c.slli64	s2
    1ffe:	000a                	c.slli	zero,0x2
    2000:	0501                	addi	a0,a0,0
    2002:	0305                	addi	t1,t1,1
    2004:	0909                	addi	s2,s2,2
    2006:	0000                	unimp
    2008:	0501                	addi	a0,a0,0
    200a:	0601                	addi	a2,a2,0
    200c:	00090103          	lb	sp,0(s2)
    2010:	0100                	addi	s0,sp,128
    2012:	0d05                	addi	s10,s10,1
    2014:	0200                	addi	s0,sp,256
    2016:	0204                	addi	s1,sp,256
    2018:	0306                	slli	t1,t1,0x1
    201a:	0979                	addi	s2,s2,30
    201c:	0018                	0x18
    201e:	0501                	addi	a0,a0,0
    2020:	001a                	c.slli	zero,0x6
    2022:	0402                	c.slli64	s0
    2024:	0602                	c.slli64	a2
    2026:	00090003          	lb	zero,0(s2)
    202a:	0100                	addi	s0,sp,128
    202c:	1805                	addi	a6,a6,-31
    202e:	0200                	addi	s0,sp,256
    2030:	0204                	addi	s1,sp,256
    2032:	0306                	slli	t1,t1,0x1
    2034:	0978                	addi	a4,sp,156
    2036:	0002                	c.slli64	zero
    2038:	0501                	addi	a0,a0,0
    203a:	0010                	0x10
    203c:	0402                	c.slli64	s0
    203e:	0302                	c.slli64	t1
    2040:	0900                	addi	s0,sp,144
    2042:	0000                	unimp
    2044:	0501                	addi	a0,a0,0
    2046:	0005                	c.nop	1
    2048:	0402                	c.slli64	s0
    204a:	0602                	c.slli64	a2
    204c:	02090003          	lb	zero,32(s2)
    2050:	0100                	addi	s0,sp,128
    2052:	0609                	addi	a2,a2,2
    2054:	0000                	unimp
    2056:	0101                	addi	sp,sp,0
    2058:	0150                	addi	a2,sp,132
    205a:	0000                	unimp
    205c:	001d0003          	lb	zero,1(s10)
    2060:	0000                	unimp
    2062:	0101                	addi	sp,sp,0
    2064:	000d0efb          	0xd0efb
    2068:	0101                	addi	sp,sp,0
    206a:	0101                	addi	sp,sp,0
    206c:	0000                	unimp
    206e:	0100                	addi	s0,sp,128
    2070:	0000                	unimp
    2072:	0001                	nop
    2074:	30747263          	bgeu	s0,t2,2378 <_min_stack+0x378>
    2078:	532e                	lw	t1,232(sp)
    207a:	0000                	unimp
    207c:	0000                	unimp
    207e:	0000                	unimp
    2080:	0205                	addi	tp,tp,1
    2082:	0c3a                	slli	s8,s8,0xe
    2084:	0000                	unimp
    2086:	0315                	addi	t1,t1,5
    2088:	0904                	addi	s1,sp,144
    208a:	0004                	0x4
    208c:	0301                	addi	t1,t1,0
    208e:	0901                	addi	s2,s2,0
    2090:	0004                	0x4
    2092:	0301                	addi	t1,t1,0
    2094:	0901                	addi	s2,s2,0
    2096:	0002                	c.slli64	zero
    2098:	0301                	addi	t1,t1,0
    209a:	0901                	addi	s2,s2,0
    209c:	0002                	c.slli64	zero
    209e:	0301                	addi	t1,t1,0
    20a0:	0901                	addi	s2,s2,0
    20a2:	0002                	c.slli64	zero
    20a4:	0301                	addi	t1,t1,0
    20a6:	0901                	addi	s2,s2,0
    20a8:	0002                	c.slli64	zero
    20aa:	0301                	addi	t1,t1,0
    20ac:	0901                	addi	s2,s2,0
    20ae:	0002                	c.slli64	zero
    20b0:	0301                	addi	t1,t1,0
    20b2:	0901                	addi	s2,s2,0
    20b4:	0002                	c.slli64	zero
    20b6:	0301                	addi	t1,t1,0
    20b8:	0901                	addi	s2,s2,0
    20ba:	0002                	c.slli64	zero
    20bc:	0301                	addi	t1,t1,0
    20be:	0901                	addi	s2,s2,0
    20c0:	0002                	c.slli64	zero
    20c2:	0301                	addi	t1,t1,0
    20c4:	0901                	addi	s2,s2,0
    20c6:	0002                	c.slli64	zero
    20c8:	0301                	addi	t1,t1,0
    20ca:	0901                	addi	s2,s2,0
    20cc:	0002                	c.slli64	zero
    20ce:	0301                	addi	t1,t1,0
    20d0:	0901                	addi	s2,s2,0
    20d2:	0002                	c.slli64	zero
    20d4:	0301                	addi	t1,t1,0
    20d6:	0901                	addi	s2,s2,0
    20d8:	0002                	c.slli64	zero
    20da:	0301                	addi	t1,t1,0
    20dc:	0901                	addi	s2,s2,0
    20de:	0002                	c.slli64	zero
    20e0:	0301                	addi	t1,t1,0
    20e2:	0901                	addi	s2,s2,0
    20e4:	0002                	c.slli64	zero
    20e6:	0301                	addi	t1,t1,0
    20e8:	0901                	addi	s2,s2,0
    20ea:	0002                	c.slli64	zero
    20ec:	0301                	addi	t1,t1,0
    20ee:	0901                	addi	s2,s2,0
    20f0:	0002                	c.slli64	zero
    20f2:	0301                	addi	t1,t1,0
    20f4:	0901                	addi	s2,s2,0
    20f6:	0002                	c.slli64	zero
    20f8:	0301                	addi	t1,t1,0
    20fa:	0901                	addi	s2,s2,0
    20fc:	0002                	c.slli64	zero
    20fe:	0301                	addi	t1,t1,0
    2100:	0901                	addi	s2,s2,0
    2102:	0002                	c.slli64	zero
    2104:	0301                	addi	t1,t1,0
    2106:	0901                	addi	s2,s2,0
    2108:	0002                	c.slli64	zero
    210a:	0301                	addi	t1,t1,0
    210c:	0901                	addi	s2,s2,0
    210e:	0002                	c.slli64	zero
    2110:	0301                	addi	t1,t1,0
    2112:	0901                	addi	s2,s2,0
    2114:	0002                	c.slli64	zero
    2116:	0301                	addi	t1,t1,0
    2118:	0901                	addi	s2,s2,0
    211a:	0002                	c.slli64	zero
    211c:	0301                	addi	t1,t1,0
    211e:	0901                	addi	s2,s2,0
    2120:	0002                	c.slli64	zero
    2122:	0301                	addi	t1,t1,0
    2124:	0901                	addi	s2,s2,0
    2126:	0002                	c.slli64	zero
    2128:	0301                	addi	t1,t1,0
    212a:	0901                	addi	s2,s2,0
    212c:	0002                	c.slli64	zero
    212e:	0301                	addi	t1,t1,0
    2130:	0901                	addi	s2,s2,0
    2132:	0002                	c.slli64	zero
    2134:	0301                	addi	t1,t1,0
    2136:	0901                	addi	s2,s2,0
    2138:	0002                	c.slli64	zero
    213a:	0301                	addi	t1,t1,0
    213c:	0901                	addi	s2,s2,0
    213e:	0002                	c.slli64	zero
    2140:	0301                	addi	t1,t1,0
    2142:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2146:	0301                	addi	t1,t1,0
    2148:	0906                	slli	s2,s2,0x1
    214a:	0008                	0x8
    214c:	0301                	addi	t1,t1,0
    214e:	0901                	addi	s2,s2,0
    2150:	0008                	0x8
    2152:	0301                	addi	t1,t1,0
    2154:	0902                	c.slli64	s2
    2156:	0008                	0x8
    2158:	0301                	addi	t1,t1,0
    215a:	00040903          	lb	s2,0(s0)
    215e:	0301                	addi	t1,t1,0
    2160:	0901                	addi	s2,s2,0
    2162:	0004                	0x4
    2164:	0301                	addi	t1,t1,0
    2166:	0901                	addi	s2,s2,0
    2168:	0002                	c.slli64	zero
    216a:	0301                	addi	t1,t1,0
    216c:	0906                	slli	s2,s2,0x1
    216e:	0004                	0x4
    2170:	0301                	addi	t1,t1,0
    2172:	0901                	addi	s2,s2,0
    2174:	0004                	0x4
    2176:	0301                	addi	t1,t1,0
    2178:	0901                	addi	s2,s2,0
    217a:	0004                	0x4
    217c:	0901                	addi	s2,s2,0
    217e:	0004                	0x4
    2180:	0100                	addi	s0,sp,128
    2182:	0001                	nop
    2184:	0205                	addi	tp,tp,1
    2186:	0000                	unimp
    2188:	0000                	unimp
    218a:	0100cb03          	lbu	s6,16(ra)
    218e:	7c090103          	lb	sp,1984(s2)
    2192:	0100                	addi	s0,sp,128
    2194:	04090403          	lb	s0,64(s2)
    2198:	0100                	addi	s0,sp,128
    219a:	04090403          	lb	s0,64(s2)
    219e:	0100                	addi	s0,sp,128
    21a0:	04090403          	lb	s0,64(s2)
    21a4:	0100                	addi	s0,sp,128
    21a6:	0409                	addi	s0,s0,2
    21a8:	0000                	unimp
    21aa:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0x102>
    for(i=0;i<(length/3);i++) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
}
  a0:	7200                	flw	fs0,32(a2)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    asm volatile(
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
}
  b8:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
}
  c8:	6572                	flw	fa0,28(sp)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
    asm volatile(
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
    for(i=0;i<(length/3);i++) {
  d8:	735f6377          	0x735f6377
    asm volatile(
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
}
  e0:	5f00                	lw	s0,56(a4)
    for(i=0;i<(length/3);i++) {
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
    asm volatile(
  e8:	735f 6174 6574      	0x65746174735f
    for(i=0;i<(length/3);i++) {
  ee:	5f00                	lw	s0,56(a4)
}
  f0:	745f 5f6d 6573      	0x65735f6d745f
    asm volatile(
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x1ec>
  fa:	676e                	flw	fa4,216(sp)
    for(i=0;i<(length/3);i++) {
  fc:	6c20                	flw	fs0,88(s0)
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
    int line[size_b][size_a + size_b];
 10a:	4e5f 6900 736e      	0x736e69004e5f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 110:	7274                	flw	fa3,100(a2)
    int line[size_b][size_a + size_b];
 112:	6d5f 646f 7000      	0x7000646f6d5f
 118:	6d796c6f          	jal	s8,96fee <_stack_start+0x86fee>
 11c:	6c75                	lui	s8,0x1d
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	0074                	addi	a3,sp,12
 120:	755f 7562 0066      	0x667562755f
 126:	625f 7361 0065      	0x657361625f
 12c:	5f5f 6d74 685f      	0x685f6d745f5f
    int line[size_b][size_a + size_b];
 132:	0072756f          	jal	a0,27938 <_stack_start+0x17938>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	5f5f 6673 5f00      	0x5f0066735f5f
    int pola[size_a];
 13c:	655f6e6f          	jal	t3,f6f90 <_stack_start+0xe6f90>
    int line[size_b][size_a + size_b];
 140:	6978                	flw	fa4,84(a0)
 142:	5f74                	lw	a3,124(a4)
 144:	7261                	lui	tp,0xffff8
    int pola[size_a];
 146:	5f007367          	0x5f007367
    int polb[size_b];
 14a:	6b6f6f63          	bltu	t5,s6,808 <generate_keys+0xa>
 14e:	6569                	lui	a0,0x1a
    int pola[size_a];
 150:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 152:	735f 6c67 6575      	0x65756c67735f
    int pola[size_a];
 158:	7200                	flw	fs0,32(a2)
 15a:	7365                	lui	t1,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	0031                	c.nop	12
    int line[size_b][size_a + size_b];
 15e:	6572                	flw	fa0,28(sp)
 160:	5f003273          	csrrc	tp,0x5f0,zero
            line[i][j] = 0;
 164:	6c66                	flw	fs8,88(sp)
 166:	6761                	lui	a4,0x18
 168:	695f0073          	0x695f0073
    for (i = 0; i < size_b; ++i){
 16c:	78635f73          	csrrwi	t5,0x786,6
            product[j] = 0;
 170:	0061                	c.nop	24
 172:	735f 6474 6e69      	0x6e696474735f
    for (i = 0; i < size_b; ++i){
 178:	5f00                	lw	s0,56(a4)
    array_equ(pola,a,size_a);
 17a:	6c62                	flw	fs8,24(sp)
 17c:	7a69736b          	0x7a69736b
 180:	0065                	c.nop	25
 182:	7270                	flw	fa2,100(a2)
 184:	6375646f          	jal	s0,56fba <_stack_start+0x46fba>
 188:	0074                	addi	a3,sp,12
 18a:	6f70                	flw	fa2,92(a4)
 18c:	796c                	flw	fa1,116(a0)
 18e:	6964                	flw	fs1,84(a0)
 190:	0076                	c.slli	zero,0x1d
    array_mod(pola,mod,size_a);
 192:	6f70                	flw	fa2,92(a4)
 194:	796c                	flw	fa1,116(a0)
 196:	0066                	c.slli	zero,0x19
 198:	635f 7476 7562      	0x75627476635f
    array_equ(polb,b,size_b);
 19e:	0066                	c.slli	zero,0x19
 1a0:	6f5f 6666 6573      	0x657366666f5f
    array_mod(polb,mod,size_b);
 1a6:	0074                	addi	a3,sp,12
 1a8:	6d5f 7362 7472      	0x747273626d5f
    if(star_mult == 1){
 1ae:	7363776f          	jal	a4,378e4 <_stack_start+0x278e4>
 1b2:	735f 6174 6574      	0x65746174735f
 1b8:	5f00                	lw	s0,56(a4)
 1ba:	626d                	lui	tp,0x1b
 1bc:	6c72                	flw	fs8,28(sp)
 1be:	6e65                	lui	t3,0x19
 1c0:	735f 6174 6574      	0x65746174735f
 1c6:	5f00                	lw	s0,56(a4)
 1c8:	6e66                	flw	ft8,88(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1ca:	7261                	lui	tp,0xffff8
 1cc:	6e007367          	0x6e007367
            for (k = size_a-1; k >= 0; k = k-1 ){
 1d0:	7274                	flw	fa3,100(a2)
            product[j] = 0;
 1d2:	5f75                	li	t5,-3
 1d4:	6564                	flw	fs1,76(a0)
 1d6:	70796563          	bltu	s2,t2,8e0 <generate_keys+0xe2>
            line[i][j] = 0;
 1da:	0074                	addi	a3,sp,12
            product[j] = 0;
 1dc:	665f 736e 2f00      	0x2f00736e665f
        for(j = 0; j < size_a + size_b -1; ++j){
 1e2:	6f68                	flw	fa0,92(a4)
 1e4:	656d                	lui	a0,0x1b
 1e6:	706f742f          	0x706f742f
    for (i = 0; i < size_b; ++i){
 1ea:	6c61                	lui	s8,0x18
 1ec:	65442f63          	0x65442f63
        for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	6f746b73          	csrrsi	s6,0x6f7,8
    if(star_mult == 1){
 1f4:	2f70                	fld	fa2,216(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 1f6:	7270                	flw	fa2,100(a2)
 1f8:	6c656a6f          	jal	s4,568be <_stack_start+0x468be>
    for (i = 0; i < size_b; ++i){
 1fc:	7265                	lui	tp,0xffff9
 1fe:	636c6f2f          	0x636c6f2f
 202:	6d75                	lui	s10,0x1d
 204:	646f6d2f          	0x646f6d2f
    for(j = 0; j < size_a + size_b -1; ++j){
 208:	6464612b          	0x6464612b
 20c:	7571652b          	0x7571652b
    array_mod(product,mod,(size_a+size_b-1));
 210:	5f00                	lw	s0,56(a4)
 212:	6e676973          	csrrsi	s2,0x6e6,14
 216:	5f00                	lw	s0,56(a4)
 218:	6c66                	flw	fs8,88(sp)
 21a:	5f6b636f          	jal	t1,b6810 <_stack_start+0xa6810>
}
 21e:	0074                	addi	a3,sp,12
 220:	735f 6474 7265      	0x72656474735f
 226:	0072                	c.slli	zero,0x1c
 228:	425f 6769 6e69      	0x6e696769425f
 22e:	0074                	addi	a3,sp,12
 230:	675f 6d61 616d      	0x616d6d61675f
 236:	735f 6769 676e      	0x676e6769735f
 23c:	6d61                	lui	s10,0x18
 23e:	5f00                	lw	s0,56(a4)
 240:	6572                	flw	fa0,28(sp)
 242:	6461                	lui	s0,0x18
 244:	5f00                	lw	s0,56(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 246:	6572                	flw	fa0,28(sp)
 248:	746c7573          	csrrci	a0,0x746,24
 24c:	6b5f 5f00 745f      	0x745f5f006b5f
 252:	006d                	c.nop	27
 254:	6564                	flw	fs1,76(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	756e                	flw	fa0,248(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 258:	5f6d                	li	t5,-5
 25a:	6574                	flw	fa3,76(a0)
 25c:	706d                	c.lui	zero,0xffffb
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	5f00                	lw	s0,56(a4)
 260:	775f 6863 0062      	0x626863775f
        for (j = size_b -1; j >= 0; j = j-1){
 266:	6572                	flw	fa0,28(sp)
 268:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 26c:	006e6f6b          	0x6e6f6b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 270:	735f 6474 756f      	0x756f6474735f
 276:	0074                	addi	a3,sp,12
 278:	635f 7476 656c      	0x656c7476635f
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	006e                	c.slli	zero,0x1b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 280:	72636573          	csrrsi	a0,0x726,6
 284:	7465                	lui	s0,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 286:	6b5f 7965 665f      	0x665f79656b5f
        for (j = size_b -1; j >= 0; j = j-1){
 28c:	0071                	c.nop	28
 28e:	665f 6c69 0065      	0x656c69665f
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	6572                	flw	fa0,28(sp)
 296:	7574                	flw	fa3,108(a0)
            line[i][j] = line[i][j] % mod;
 298:	6e72                	flw	ft8,28(sp)
 29a:	615f 6464 6572      	0x65726464615f
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	00317373          	csrrci	t1,fcsr,2
    for (i = 0; i < size_b; ++i){
 2a4:	6572                	flw	fa0,28(sp)
 2a6:	7574                	flw	fa3,108(a0)
 2a8:	6e72                	flw	ft8,28(sp)
 2aa:	615f 6464 6572      	0x65726464615f
            product[j] += line[i][j];
 2b0:	00327373          	csrrci	t1,fcsr,4
 2b4:	6572                	flw	fa0,28(sp)
        for(i = 0; i < size_b; ++i){
 2b6:	7574                	flw	fa3,108(a0)
            product[j] += line[i][j];
 2b8:	6e72                	flw	ft8,28(sp)
 2ba:	615f 6464 6572      	0x65726464615f
 2c0:	00337373          	csrrci	t1,fcsr,6
        for(i = 0; i < size_b; ++i){
 2c4:	6572                	flw	fa0,28(sp)
 2c6:	7574                	flw	fa3,108(a0)
    for(j = 0; j < size_a + size_b -1; ++j){
 2c8:	6e72                	flw	ft8,28(sp)
 2ca:	615f 6464 6572      	0x65726464615f
        for(i = 0; i < size_b; ++i){
 2d0:	00347373          	csrrci	t1,fcsr,8
    int line[size_b][size_a + size_b];
 2d4:	6e5f 6f69 7362      	0x73626f696e5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2da:	7200                	flw	fs0,32(a2)
 2dc:	7465                	lui	s0,0xffff9
 2de:	7275                	lui	tp,0xffffd
 2e0:	5f6e                	lw	t5,248(sp)
    int line[size_b][size_a + size_b];
 2e2:	6461                	lui	s0,0x18
 2e4:	7264                	flw	fs1,100(a2)
 2e6:	7365                	lui	t1,0xffff9
 2e8:	72003673          	csrrc	a2,0x720,zero
 2ec:	7465                	lui	s0,0xffff9
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ee:	7275                	lui	tp,0xffffd
 2f0:	5f6e                	lw	t5,248(sp)
 2f2:	6461                	lui	s0,0x18
 2f4:	7264                	flw	fs1,100(a2)
 2f6:	7365                	lui	t1,0xffff9
 2f8:	73003773          	csrrc	a4,0x730,zero
 2fc:	6f68                	flw	fa0,92(a4)
 2fe:	7472                	flw	fs0,60(sp)
    int line[size_b][size_a + size_b];
 300:	7520                	flw	fs0,104(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 302:	736e                	flw	ft6,248(sp)
 304:	6769                	lui	a4,0x1a
    int line[size_b][size_a + size_b];
 306:	656e                	flw	fa0,216(sp)
 308:	2064                	fld	fs1,192(s0)
 30a:	6e69                	lui	t3,0x1a
    int pola[size_a];
 30c:	0074                	addi	a3,sp,12
 30e:	615f 6574 6978      	0x69786574615f
    int line[size_b][size_a + size_b];
 314:	3074                	fld	fa3,224(s0)
    int pola[size_a];
 316:	5f00                	lw	s0,56(a4)
 318:	6e676973          	csrrsi	s2,0x6e6,14
    int polb[size_b];
 31c:	6c61                	lui	s8,0x18
 31e:	625f 6675 5f00      	0x5f006675625f
 324:	7361                	lui	t1,0xffff8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 326:	6d697463          	bgeu	s2,s6,9ee <generate_keys+0x1f0>
    int line[size_b][size_a + size_b];
 32a:	5f65                	li	t5,-7
 32c:	7562                	flw	fa0,56(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 32e:	0066                	c.slli	zero,0x19
    int pola[size_a];
 330:	725f 7365 6c75      	0x6c757365725f
    for (i = 0; i < size_b; ++i){
 336:	0074                	addi	a3,sp,12
 338:	5f5f 6377 0068      	0x6863775f5f
            product2[j] = 0;
 33e:	746e6977          	0x746e6977
 342:	745f 6700 6e65      	0x6e656700745f
    array_equ(pola,a,size_a);
 348:	7265                	lui	tp,0xffff9
 34a:	7461                	lui	s0,0xffff8
 34c:	5f65                	li	t5,-7
 34e:	7379656b          	0x7379656b
 352:	5f00                	lw	s0,56(a4)
    array_equ(polb,b,size_b);
 354:	625f 6975 746c      	0x746c6975625f
 35a:	6e69                	lui	t3,0x1a
 35c:	6d5f 6d65 7063      	0x70636d656d5f
    if(star_mult == 1){
 362:	0079                	c.nop	30
 364:	6c5f 636f 006b      	0x6b636f6c5f
 36a:	544e                	lw	s0,240(sp)
 36c:	5552                	lw	a0,52(sp)
 36e:	345f 5f38 6962      	0x69625f38345f
        for (j = size_b -1; j >= 0; j = j-1){
 374:	4d74                	lw	a3,92(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 376:	632e                	flw	ft6,200(sp)
 378:	7000                	flw	fs0,32(s0)
            product2[j] = 0;
 37a:	6f72                	flw	ft10,28(sp)
 37c:	7564                	flw	fs1,108(a0)
 37e:	00327463          	bgeu	tp,gp,386 <polymult2+0xb4>
            line[i][j] = 0;
 382:	7865                	lui	a6,0xffff9
            product2[j] = 0;
 384:	5f74                	lw	a3,124(a4)
 386:	7565                	lui	a0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 388:	64696c63          	bltu	s2,t1,9e0 <generate_keys+0x1e2>
 38c:	5f00                	lw	s0,56(a4)
 38e:	74697277          	0x74697277
    for (i = 0; i < size_b; ++i){
 392:	0065                	c.nop	25
 394:	5f5f 6d74 795f      	0x795f6d745f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 39a:	6165                	addi	sp,sp,112
                line[size_b-1-j][k] = pola[k]*polb[j];
 39c:	0072                	c.slli	zero,0x1c
 39e:	6f70                	flw	fa2,92(a4)
 3a0:	626c                	flw	fa1,68(a2)
 3a2:	7200                	flw	fs0,32(a2)
 3a4:	6e61                	lui	t3,0x18
 3a6:	6f64                	flw	fs1,92(a4)
 3a8:	5f6d                	li	t5,-5
 3aa:	6176                	flw	ft2,92(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ac:	006c                	addi	a1,sp,12
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ae:	6e5f 616d 6c6c      	0x6c6c616d6e5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	6c00636f          	jal	t1,6a74 <_stack_len+0x2a74>
        for (j = size_b -1; j >= 0; j = j-1){
 3b8:	20676e6f          	jal	t3,765be <_stack_start+0x665be>
 3bc:	6f64                	flw	fs1,92(a4)
 3be:	6275                	lui	tp,0x1d
 3c0:	656c                	flw	fa1,76(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c2:	5f00                	lw	s0,56(a4)
        array_add(product2,line[i],size_a+size_b-1);
 3c4:	656e                	flw	fa0,216(sp)
 3c6:	7478                	flw	fa4,108(s0)
 3c8:	0066                	c.slli	zero,0x19
 3ca:	7261                	lui	tp,0xffff8
    for(i=0;i<size_b;++i){
 3cc:	6172                	flw	ft2,28(sp)
 3ce:	5f79                	li	t5,-2
}
 3d0:	7165                	addi	sp,sp,-400
 3d2:	0075                	c.nop	29
 3d4:	656d                	lui	a0,0x1b
 3d6:	67617373          	csrrci	t1,0x676,2
 3da:	0065                	c.nop	25
 3dc:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 3e2:	72006e6f          	jal	t3,6b02 <_stack_len+0x2b02>
 3e6:	7465                	lui	s0,0xffff9
 3e8:	7275                	lui	tp,0xffffd
 3ea:	5f6e                	lw	t5,248(sp)
 3ec:	6461                	lui	s0,0x18
 3ee:	7264                	flw	fs1,100(a2)
 3f0:	7365                	lui	t1,0xffff9
 3f2:	5f003573          	csrrc	a0,0x5f0,zero
 3f6:	7461                	lui	s0,0xffff8
 3f8:	7865                	lui	a6,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 3fa:	7469                	lui	s0,0xffffa
 3fc:	7300                	flw	fs0,32(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fe:	6275                	lui	tp,0x1d
 400:	6174706f          	j	48216 <_stack_start+0x38216>
 404:	6772                	flw	fa4,28(sp)
 406:	5f00                	lw	s0,56(a4)
 408:	735f 6964 6964      	0x69646964735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 40e:	696e                	flw	fs2,216(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 410:	0074                	addi	a3,sp,12
 412:	6f5f 6666 745f      	0x745f66666f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 418:	4500                	lw	s0,8(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	636e                	flw	ft6,216(sp)
 41c:	4d5f 7365 6173      	0x617373654d5f
        array_add(product2,line[i],size_a+size_b-1);
 422:	63006567          	0x63006567
 426:	72746e6f          	jal	t3,4734c <_stack_start+0x3734c>
    for(i=0;i<size_b;++i){
 42a:	00526c6f          	jal	s8,26c2e <_stack_start+0x16c2e>
 42e:	665f 6572 6c65      	0x6c656572665f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	7369                	lui	t1,0xffffa
    int v[size_N];
 436:	0074                	addi	a3,sp,12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 438:	6972                	flw	fs2,28(sp)
 43a:	676e                	flw	fa4,216(sp)
 43c:	705f 6c6f 0079      	0x796c6f705f
 442:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 448:	4552                	lw	a0,20(sp)
 44a:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
 44e:	5649                	li	a2,-14
 450:	5f45                	li	t5,-15
    int v[size_N];
 452:	0054                	addi	a3,sp,4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 454:	6974                	flw	fa3,84(a0)
    int v[size_N];
 456:	315f 7400 5f69      	0x5f697400315f
    int q[size_N];
 45c:	0032                	c.slli	zero,0xc
 45e:	6e75                	lui	t3,0x1d
 460:	6e676973          	csrrsi	s2,0x6e6,14
    int num_temp[size_N];
 464:	6465                	lui	s0,0x19
    int denum_temp[size_D];
 466:	6320                	flw	fs0,64(a4)
 468:	6168                	flw	fa0,68(a0)
 46a:	0072                	c.slli	zero,0x1c
 46c:	6971                	lui	s2,0x1c
    int num_temp[size_N];
 46e:	315f 5f00 656e      	0x656e5f00315f
    int denum_temp[size_D];
 474:	685f0077          	0x685f0077
    int v[size_N];
 478:	655f 7272 6f6e      	0x6f6e7272655f
    array_equ(num_temp,num,size_N);
 47e:	7300                	flw	fs0,32(a4)
 480:	6f68                	flw	fa0,92(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 482:	7472                	flw	fs0,60(sp)
 484:	6920                	flw	fs0,80(a0)
    int denum_temp[size_D];
 486:	746e                	flw	fs0,248(sp)
 488:	5f00                	lw	s0,56(a4)
    array_equ(num_temp,num,size_N);
 48a:	745f 5f6d 6479      	0x64795f6d745f
    array_mod(num_temp,mod,size_N);
 490:	7961                	lui	s2,0xffff8
 492:	5f00                	lw	s0,56(a4)
    int denum_temp[size_D];
 494:	735f 7562 0066      	0x667562735f
    array_equ(denum_temp,denum,size_D);
 49a:	665f 616c 7367      	0x7367616c665f
    array_mod(denum_temp,mod,size_D);
 4a0:	0032                	c.slli	zero,0xc
 4a2:	695f 626f 0073      	0x73626f695f
    for (i = 0; i < size_N; ++i){
 4a8:	5f5f 4946 454c      	0x454c49465f5f
    for (i = size_D-1; i >= 0; i = i-1){
 4ae:	5f00                	lw	s0,56(a4)
 4b0:	626d                	lui	tp,0x1b
 4b2:	74617473          	csrrci	s0,0x746,2
 4b6:	5f65                	li	t5,-7
    for (i = 0; i < size_N; ++i){
 4b8:	0074                	addi	a3,sp,12
 4ba:	5f5f 4673 4c49      	0x4c4946735f5f
    for (u = 0; u < mod; ++u){
 4c0:	0045                	c.nop	17
 4c2:	6d5f 7362 6174      	0x617473626d5f
        q[i] = 0;
 4c8:	6574                	flw	fa3,76(a0)
 4ca:	5f00                	lw	s0,56(a4)
 4cc:	6172                	flw	ft2,28(sp)
        v[i] = 0;
 4ce:	646e                	flw	fs0,216(sp)
        q[i] = 0;
 4d0:	6e5f 7865 0074      	0x7478656e5f
        v[i] = 0;
 4d6:	6d5f 6c62 6e65      	0x6e656c626d5f
        if( denum_temp[i] != 0 )
 4dc:	735f 6174 6574      	0x65746174735f
        if ( (b_N*u)%mod == 1 )
 4e2:	5f00                	lw	s0,56(a4)
 4e4:	6e69                	lui	t3,0x1a
 4e6:	695f0063          	beq	t5,s5,b66 <ntru_encyrpt+0x76>
 4ea:	646e                	flw	fs0,216(sp)
    for (u = 0; u < mod; ++u){
 4ec:	5f00                	lw	s0,56(a4)
 4ee:	6f6c                	flw	fa1,92(a4)
        if( num_temp[i] != 0 )
 4f0:	656c6163          	bltu	s8,s6,b32 <ntru_encyrpt+0x42>
    for (i = size_N-1; i >= 0; i = i-1){
 4f4:	5f00                	lw	s0,56(a4)
 4f6:	635f 656c 6e61      	0x6e61656c635f
 4fc:	7075                	c.lui	zero,0xffffd
 4fe:	5f00                	lw	s0,56(a4)
    while (d >= d2){
 500:	6e75                	lui	t3,0x1d
 502:	63657073          	csrci	0x636,10
    array_equ(result,q,size_N);
 506:	6669                	lui	a2,0x1a
 508:	6569                	lui	a0,0x1a
 50a:	5f64                	lw	s1,124(a4)
 50c:	6f6c                	flw	fa1,92(a4)
 50e:	656c6163          	bltu	s8,s6,b50 <ntru_encyrpt+0x60>
    for(i = size_N; i < (2*size_N); ++i){
 512:	695f 666e 006f      	0x6f666e695f
        result[i] = num_temp[i-size_N];
 518:	6d5f 7861 6477      	0x647778616d5f
    for(i = size_N; i < (2*size_N); ++i){
 51e:	725f0073          	0x725f0073
}
 522:	6565                	lui	a0,0x19
 524:	746e                	flw	fs0,248(sp)
 526:	7300                	flw	fs0,32(a4)
 528:	6174                	flw	fa3,68(a0)
 52a:	5f72                	lw	t5,60(sp)
 52c:	756d                	lui	a0,0xffffb
 52e:	746c                	flw	fa1,108(s0)
 530:	5f00                	lw	s0,56(a4)
 532:	64656573          	csrrsi	a0,0x646,10
 536:	7200                	flw	fs0,32(a2)
 538:	5f69                	li	t5,-6
 53a:	0032                	c.slli	zero,0xc
 53c:	5f5f 6f63 6e75      	0x6e756f635f5f
 542:	0074                	addi	a3,sp,12
 544:	5f5f 6176 756c      	0x756c61765f5f
 54a:	0065                	c.nop	25
        v[(d-d2)] = u*r_d;
 54c:	735f 6565 006b      	0x6b6565735f
 552:	665f 6f70 5f73      	0x5f736f70665f
    array_mod(v,mod,size_N);
 558:	0074                	addi	a3,sp,12
 55a:	656c                	flw	fa1,76(a0)
 55c:	676e                	flw	fa4,216(sp)
        v[(d-d2)] = u*r_d;
 55e:	6874                	flw	fa3,84(s0)
    array_mod(v,mod,size_N);
 560:	5f00                	lw	s0,56(a4)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 562:	745f 5f6d 696d      	0x696d5f6d745f
 568:	006e                	c.slli	zero,0x1b
 56a:	7570                	flw	fa2,108(a0)
 56c:	6c62                	flw	fs8,24(sp)
 56e:	6369                	lui	t1,0x1a
    array_mod(product,mod,size_N);
 570:	6b5f 7965 6100      	0x610079656b5f
 576:	7272                	flw	ft4,60(sp)
        for (i = 0; i < size_N; ++i){
 578:	7961                	lui	s2,0xffff8
 57a:	615f 6464 6100      	0x61006464615f
    array_mod(num_temp,mod,size_N);
 580:	7272                	flw	ft4,60(sp)
 582:	7961                	lui	s2,0xffff8
 584:	6d5f 646f 5f00      	0x5f00646f6d5f
    array_add(q,v,size_N);
 58a:	74727473          	csrrci	s0,0x747,4
 58e:	6c5f6b6f          	jal	s6,f7452 <_stack_start+0xe7452>
    array_mod(q,mod,size_N);
 592:	7361                	lui	t1,0xffff8
 594:	0074                	addi	a3,sp,12
 596:	665f 746e 7079      	0x7079746e665f
        for (i = size_N-1; i >= 0; i = i-1){
 59c:	7365                	lui	t1,0xffff9
 59e:	7300                	flw	fs0,32(a4)
 5a0:	6365                	lui	t1,0x19
 5a2:	6572                	flw	fa0,28(sp)
 5a4:	5f74                	lw	a3,124(a4)
 5a6:	5f79656b          	0x5f79656b
            num_temp[i] = num_temp[i] - product[i];
 5aa:	7066                	flw	ft0,120(sp)
 5ac:	5f00                	lw	s0,56(a4)
 5ae:	555f 6f4c 676e      	0x676e6f4c555f
        for (i = 0; i < size_N; ++i){
 5b4:	7200                	flw	fs0,32(a2)
 5b6:	5f69                	li	t5,-6
            num_temp[i] = num_temp[i] - product[i];
 5b8:	0031                	c.nop	12
 5ba:	675f 7465 6164      	0x61647465675f
            if( num_temp[i] != 0 )
 5c0:	6574                	flw	fa3,76(a0)
        for (i = size_N-1; i >= 0; i = i-1){
 5c2:	655f 7272 5f00      	0x5f007272655f
            v[i] = 0;
 5c8:	626f6c67          	0x626f6c67
 5cc:	6c61                	lui	s8,0x18
 5ce:	695f 706d 7275      	0x7275706d695f
        for (i = 0; i < size_N; ++i){
 5d4:	5f65                	li	t5,-7
 5d6:	7470                	flw	fa2,108(s0)
        result[i] = num_temp[i-size_N];
 5d8:	0072                	c.slli	zero,0x1c
 5da:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 5de:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
 5e2:	2e39                	jal	900 <generate_keys+0x102>
    for(i = size_N; i < (2*size_N); ++i){
 5e4:	2e32                	fld	ft8,264(sp)
 5e6:	2030                	fld	fa2,64(s0)
 5e8:	6d2d                	lui	s10,0xb
    int ri_2[size]; // MX-ring poly, a
 5ea:	7261                	lui	tp,0xffff8
 5ec:	723d6863          	bltu	s10,gp,d1c <memcpy+0x6c>
 5f0:	3376                	fld	ft6,376(sp)
 5f2:	6932                	flw	fs2,12(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 5f4:	636d                	lui	t1,0x1b
 5f6:	2d20                	fld	fs0,88(a0)
 5f8:	616d                	addi	sp,sp,240
 5fa:	6962                	flw	fs2,24(sp)
 5fc:	693d                	lui	s2,0xf
 5fe:	706c                	flw	fa1,100(s0)
 600:	2d203233          	0x2d203233
 604:	636d                	lui	t1,0x1b
 606:	6f6d                	lui	t5,0x1b
 608:	6564                	flw	fs1,76(a0)
 60a:	3d6c                	fld	fa1,248(a0)
 60c:	656d                	lui	a0,0x1b
 60e:	6164                	flw	fs1,68(a0)
    int ri_2[size]; // MX-ring poly, a
 610:	796e                	flw	fs2,248(sp)
 612:	2d20                	fld	fs0,88(a0)
 614:	746d                	lui	s0,0xffffb
    int ri_1[size]; // f-random poly, f[N] = 0, b
 616:	6e75                	lui	t3,0x1d
 618:	3d65                	jal	4d0 <polydiv+0xa0>
 61a:	6f72                	flw	ft10,28(sp)
    int ri[size];
 61c:	74656b63          	bltu	a0,t1,d72 <memcpy+0xc2>
 620:	2d20                	fld	fs0,88(a0)
    int ti_1[size]; // ti_1[0] = 1
 622:	4f2d2067          	0x4f2d2067
 626:	662d2073          	csrs	0x662,s10
    int ti[size];
 62a:	6976                	flw	fs2,92(sp)
 62c:	69626973          	csrrsi	s2,0x696,4
    int qi_1[size];
 630:	696c                	flw	fa1,84(a0)
 632:	7974                	flw	fa3,116(a0)
    int temp[size];
 634:	683d                	lui	a6,0xf
 636:	6469                	lui	s0,0x1a
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 638:	6564                	flw	fs1,76(a0)
 63a:	006e                	c.slli	zero,0x1b
 63c:	755f 756e 6573      	0x6573756e755f
    int temp[size];
 642:	5f64                	lw	s1,124(a4)
    for (i = 0; i < size; ++i) {
 644:	6172                	flw	ft2,28(sp)
        ti_2[i] = 0;
 646:	646e                	flw	fs0,216(sp)
 648:	6c00                	flw	fs0,24(s0)
 64a:	6e69                	lui	t3,0x1a
 64c:	0065                	c.nop	25
    for (i = 0; i < size; ++i) {
 64e:	775f 7364 5f00      	0x5f007364775f
    array_equ(ri_2,polyR,size);
 654:	745f 5f6d 6477      	0x64775f6d745f
    array_equ(ri_1,polyf,size);
 65a:	7961                	lui	s2,0xffff8
 65c:	5f00                	lw	s0,56(a4)
 65e:	65756c67          	0x65756c67
    ti_1[0] = 1;
 662:	6900                	flw	fs0,16(a0)
 664:	736e                	flw	ft6,248(sp)
 666:	7274                	flw	fa3,100(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 668:	655f 7571 6e00      	0x6e007571655f
 66e:	7274                	flw	fa3,100(a2)
            ti[i] = ti_2[i] - temp[i];
 670:	5f75                	li	t5,-3
 672:	6e65                	lui	t3,0x19
 674:	70727963          	bgeu	tp,t2,d86 <memcpy+0xd6>
    array_mod(ri_2,mod,size);
 678:	0074                	addi	a3,sp,12
 67a:	735f 6973 657a      	0x657a6973735f
    array_mod(ri_1,mod,size);
 680:	745f 5f00 366c      	0x366c5f00745f
 686:	6134                	flw	fa3,64(a0)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 688:	625f 6675 6400      	0x64006675625f
 68e:	6e65                	lui	t3,0x19
 690:	6d75                	lui	s10,0x1d
 692:	5f00                	lw	s0,56(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 694:	5f676973          	csrrsi	s2,0x5f6,14
 698:	7566                	flw	fa0,120(sp)
 69a:	636e                	flw	ft6,216(sp)
 69c:	5f00                	lw	s0,56(a4)
 69e:	626e                	flw	ft4,216(sp)
 6a0:	6675                	lui	a2,0x1d
        for (i = 0; i < N + 1; ++i) {
 6a2:	5f00                	lw	s0,56(a4)
 6a4:	6e75                	lui	t3,0x1d
 6a6:	7375                	lui	t1,0xffffd
    array_mod(temp,mod,size);
 6a8:	6465                	lui	s0,0x19
 6aa:	7000                	flw	fs0,32(s0)
 6ac:	52796c6f          	jal	s8,973d2 <_stack_start+0x873d2>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6b0:	7300                	flw	fs0,32(a4)
 6b2:	7a69                	lui	s4,0xffffa
 6b4:	5f65                	li	t5,-7
 6b6:	0044                	addi	s1,sp,4
 6b8:	5f5f 6d74 695f      	0x695f6d745f5f
    array_equ(qi_1,res1,size);
 6be:	74736473          	csrrsi	s0,0x747,6
 6c2:	5f00                	lw	s0,56(a4)
    array_mod(qi_1,mod,size);
 6c4:	6f6c                	flw	fa1,92(a4)
 6c6:	746c6163          	bltu	s8,t1,e08 <memset+0x7a>
 6ca:	6d69                	lui	s10,0x1a
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6cc:	5f65                	li	t5,-7
 6ce:	7562                	flw	fa0,56(sp)
 6d0:	0066                	c.slli	zero,0x19
 6d2:	635f 6f6c 6573      	0x65736f6c635f
 6d8:	5f00                	lw	s0,56(a4)
 6da:	3472                	fld	fs0,312(sp)
    array_equ(temp,res2,size);
 6dc:	0038                	addi	a4,sp,8
 6de:	6d5f 7462 776f      	0x776f74626d5f
    array_mod(temp,mod,size);
 6e4:	74735f63          	bge	t1,t2,e42 <main+0xc>
 6e8:	7461                	lui	s0,0xffff8
        for (i = 0; i < N + 1; ++i) {
 6ea:	0065                	c.nop	25
 6ec:	705f 7335 6d00      	0x6d007335705f
    array_mod(ti,mod,size);
 6f2:	6961                	lui	s2,0x18
 6f4:	006e                	c.slli	zero,0x1b
 6f6:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
array_equ(ri_2,ri_1,size);
 6fc:	6164                	flw	fs1,68(a0)
 6fe:	0079                	c.nop	30
 700:	657a6973          	csrrsi	s2,0x657,20
array_equ(ri_1,ri,size);
 704:	615f 7300 7a69      	0x7a697300615f
array_equ(ti_2,ti_1,size);
 70a:	5f65                	li	t5,-7
 70c:	0062                	c.slli	zero,0x18
 70e:	30747263          	bgeu	s0,t2,a12 <generate_keys+0x214>
array_equ(ti_1,ti,size);
 712:	532e                	lw	t1,232(sp)
 714:	4700                	lw	s0,8(a4)
 716:	554e                	lw	a0,240(sp)
 718:	4120                	lw	s0,64(a0)
        controlR = 0;
 71a:	2e322053          	0x2e322053
        for (i = 0; i < N + 1; ++i) {
 71e:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x96>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	000c                	0xc
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	0006                	c.slli	zero,0x1
  5e:	0000                	unimp
  60:	000c                	0xc
  62:	0000                	unimp
  64:	0000                	unimp
  66:	0000                	unimp
  68:	00e2                	slli	ra,ra,0x18
  6a:	0000                	unimp
  6c:	001e                	c.slli	zero,0x7
  6e:	0000                	unimp
  70:	0058                	addi	a4,sp,4
  72:	0000                	unimp
  74:	0000                	unimp
  76:	0000                	unimp
  78:	0100                	addi	s0,sp,128
  7a:	0000                	unimp
  jal x0, default_exc_handler
  7c:	01d2                	slli	gp,gp,0x14
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	0e42                	slli	t3,t3,0x10
  82:	4250                	lw	a2,4(a2)
  jal x0, default_exc_handler
  84:	0492                	slli	s1,s1,0x4
  86:	9346                	add	t1,t1,a7
  jal x0, default_exc_handler
  88:	4805                	li	a6,1
  8a:	0a98                	addi	a4,sp,336
    asm volatile(
  8c:	0b99                	addi	s7,s7,6
  8e:	944e                	add	s0,s0,s3
}
  90:	5806                	lw	a6,96(sp)
    for(i=0;i<(length/3);i++) {
  92:	0288                	addi	a0,sp,320
  94:	0389                	addi	t2,t2,2
  96:	0795                	addi	a5,a5,5
  98:	0896                	slli	a7,a7,0x5
  9a:	0c9a0997          	auipc	s3,0xc9a0
  9e:	01810d9b          	0x1810d9b
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0c42                	slli	s8,s8,0x10
  a4:	0008                	0x8
    asm volatile(
  a6:	0a00e603          	0xa00e603
  aa:	020c                	addi	a1,sp,256
  ac:	4250                	lw	a2,4(a2)
  ae:	42c1                	li	t0,16
    for(i=0;i<(length/3);i++) {
  b0:	42c8                	lw	a0,4(a3)
  b2:	42c9                	li	t0,18
    asm volatile(
  b4:	42d2                	lw	t0,20(sp)
  b6:	42d442d3          	0x42d442d3
    for(i=0;i<(length/3);i++) {
  ba:	42d5                	li	t0,21
  bc:	42d6                	lw	t0,84(sp)
  be:	42d842d7          	0x42d842d7
  c2:	42d9                	li	t0,22
  c4:	42da                	lw	t0,148(sp)
  c6:	000e4adb          	0xe4adb
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  ca:	0b42                	slli	s6,s6,0x10
  cc:	0058                	addi	a4,sp,4
    asm volatile(
  ce:	0000                	unimp
  d0:	0000                	unimp
  d2:	0000                	unimp
  d4:	02d2                	slli	t0,t0,0x14
  d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  d8:	015e                	slli	sp,sp,0x17
  da:	0000                	unimp
    asm volatile(
  dc:	0e42                	slli	t3,t3,0x10
  de:	4650                	lw	a2,12(a2)
}
  e0:	0896                	slli	a7,a7,0x5
    for(i=0;i<(length/3);i++) {
  e2:	9348                	0x9348
  e4:	9705                	srai	a4,a4,0x21
  e6:	6209                	lui	tp,0x2
    asm volatile(
  e8:	0288                	addi	a0,sp,320
    for(i=0;i<(length/3);i++) {
  ea:	0389                	addi	t2,t2,2
  ec:	0492                	slli	s1,s1,0x4
  ee:	0694                	addi	a3,sp,832
}
  f0:	0795                	addi	a5,a5,5
    asm volatile(
  f2:	0a98                	addi	a4,sp,336
  f4:	0b99                	addi	s7,s7,6
  f6:	0c9a                	slli	s9,s9,0x6
  f8:	01810d9b          	0x1810d9b
    for(i=0;i<(length/3);i++) {
  fc:	0c42                	slli	s8,s8,0x10
  fe:	0008                	0x8
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 100:	ce02                	sw	zero,28(sp)
 102:	0c0a                	slli	s8,s8,0x2
 104:	5002                	0x5002
 106:	c142                	sw	a6,128(sp)
    int line[size_b][size_a + size_b];
 108:	c842                	sw	a6,16(sp)
 10a:	c942                	sw	a6,144(sp)
 10c:	d242                	sw	a6,36(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 10e:	d342                	sw	a6,164(sp)
 110:	d442                	sw	a6,40(sp)
    int line[size_b][size_a + size_b];
 112:	d542                	sw	a6,168(sp)
 114:	d642                	sw	a6,44(sp)
 116:	d742                	sw	a6,172(sp)
 118:	d842                	sw	a6,48(sp)
 11a:	d942                	sw	a6,176(sp)
 11c:	da42                	sw	a6,52(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	db42                	sw	a6,180(sp)
 120:	0e4a                	slli	t3,t3,0x12
    int pola[size_a];
 122:	4200                	lw	s0,0(a2)
 124:	0000000b          	0xb
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	0054                	addi	a3,sp,4
 12a:	0000                	unimp
 12c:	0000                	unimp
 12e:	0000                	unimp
 130:	0430                	addi	a2,sp,520
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 134:	01ba                	slli	gp,gp,0xe
 136:	0000                	unimp
 138:	0e46                	slli	t3,t3,0x11
    int line[size_b][size_a + size_b];
 13a:	4840                	lw	s0,20(s0)
    int pola[size_a];
 13c:	0181                	addi	gp,gp,0
 13e:	0288                	addi	a0,sp,320
    int line[size_b][size_a + size_b];
 140:	0389                	addi	t2,t2,2
 142:	0c42                	slli	s8,s8,0x10
 144:	0008                	0x8
    int pola[size_a];
 146:	9256                	add	tp,tp,s5
 148:	9304                	0x9304
    int polb[size_b];
 14a:	9405                	srai	s0,s0,0x21
 14c:	9506                	add	a0,a0,ra
 14e:	97089607          	0x97089607
 152:	9809                	andi	s0,s0,-30
 154:	990a                	add	s2,s2,sp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 156:	9b0c9a0b          	0x9b0c9a0b
    int pola[size_a];
 15a:	020d                	addi	tp,tp,3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 15c:	0ad0                	addi	a2,sp,340
    int line[size_b][size_a + size_b];
 15e:	020c                	addi	a1,sp,256
 160:	4240                	lw	s0,4(a2)
    int polb[size_b];
 162:	42c1                	li	t0,16
            line[i][j] = 0;
 164:	42c8                	lw	a0,4(a3)
 166:	42c9                	li	t0,18
 168:	42d2                	lw	t0,20(sp)
    for (i = 0; i < size_b; ++i){
 16a:	42d442d3          	0x42d442d3
            product[j] = 0;
 16e:	42d5                	li	t0,21
 170:	42d6                	lw	t0,84(sp)
 172:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 176:	42d9                	li	t0,22
 178:	42da                	lw	t0,148(sp)
    array_equ(pola,a,size_a);
 17a:	000e4adb          	0xe4adb
 17e:	0b42                	slli	s6,s6,0x10
 180:	0054                	addi	a3,sp,4
 182:	0000                	unimp
 184:	0000                	unimp
 186:	0000                	unimp
 188:	05ea                	slli	a1,a1,0x1a
 18a:	0000                	unimp
 18c:	0214                	addi	a3,sp,256
 18e:	0000                	unimp
 190:	0e46                	slli	t3,t3,0x11
    array_mod(pola,mod,size_a);
 192:	5e50                	lw	a2,60(a2)
 194:	0288                	addi	a0,sp,320
 196:	0389                	addi	t2,t2,2
 198:	0492                	slli	s1,s1,0x4
    array_equ(polb,b,size_b);
 19a:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
 19e:	0795                	addi	a5,a5,5
 1a0:	0896                	slli	a7,a7,0x5
 1a2:	0a980997          	auipc	s3,0xa980
    array_mod(polb,mod,size_b);
 1a6:	0b99                	addi	s7,s7,6
 1a8:	0c9a                	slli	s9,s9,0x6
 1aa:	01810d9b          	0x1810d9b
    if(star_mult == 1){
 1ae:	0c42                	slli	s8,s8,0x10
 1b0:	0008                	0x8
 1b2:	0a012e03          	lw	t3,160(sp)
 1b6:	020c                	addi	a1,sp,256
 1b8:	4250                	lw	a2,4(a2)
 1ba:	42c1                	li	t0,16
 1bc:	42c8                	lw	a0,4(a3)
 1be:	42c9                	li	t0,18
 1c0:	42d2                	lw	t0,20(sp)
 1c2:	42d442d3          	0x42d442d3
 1c6:	42d5                	li	t0,21
 1c8:	42d6                	lw	t0,84(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1ca:	42d842d7          	0x42d842d7
            for (k = size_a-1; k >= 0; k = k-1 ){
 1ce:	42d9                	li	t0,22
 1d0:	42da                	lw	t0,148(sp)
            product[j] = 0;
 1d2:	000e4adb          	0xe4adb
 1d6:	0b42                	slli	s6,s6,0x10
            line[i][j] = 0;
 1d8:	0054                	addi	a3,sp,4
 1da:	0000                	unimp
            product[j] = 0;
 1dc:	0000                	unimp
 1de:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1e0:	07fe                	slli	a5,a5,0x1f
 1e2:	0000                	unimp
 1e4:	02f2                	slli	t0,t0,0x1c
 1e6:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1e8:	0e42                	slli	t3,t3,0x10
 1ea:	03f0                	addi	a2,sp,460
 1ec:	814c                	0x814c
 1ee:	8801                	andi	s0,s0,0
        for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	8902                	jr	s2
 1f2:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
        for (j = size_b -1; j >= 0; j = j-1){
 1f6:	6400                	flw	fs0,8(s0)
 1f8:	0492                	slli	s1,s1,0x4
        for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_b; ++i){
 1fe:	0795                	addi	a5,a5,5
 200:	0896                	slli	a7,a7,0x5
 202:	0c9a0997          	auipc	s3,0xc9a0
 206:	0a98                	addi	a4,sp,336
    for(j = 0; j < size_a + size_b -1; ++j){
 208:	0b99                	addi	s7,s7,6
 20a:	0a01da03          	lhu	s4,160(gp)
    array_mod(product,mod,(size_a+size_b-1));
 20e:	020c                	addi	a1,sp,256
 210:	03f0                	addi	a2,sp,460
 212:	c144                	sw	s1,4(a0)
 214:	c844                	sw	s1,20(s0)
 216:	c944                	sw	s1,20(a0)
 218:	d244                	sw	s1,36(a2)
 21a:	d344                	sw	s1,36(a4)
}
 21c:	d444                	sw	s1,44(s0)
 21e:	d544                	sw	s1,44(a0)
 220:	d644                	sw	s1,44(a2)
 222:	d744                	sw	s1,44(a4)
 224:	d844                	sw	s1,52(s0)
 226:	d944                	sw	s1,52(a0)
 228:	da44                	sw	s1,52(a2)
 22a:	0e4a                	slli	t3,t3,0x12
 22c:	4200                	lw	s0,0(a2)
 22e:	0034000b          	0x34000b
 232:	0000                	unimp
 234:	0000                	unimp
 236:	0000                	unimp
 238:	0af0                	addi	a2,sp,348
 23a:	0000                	unimp
 23c:	0086                	slli	ra,ra,0x1
 23e:	0000                	unimp
 240:	0e42                	slli	t3,t3,0x10
 242:	01e0                	addi	s0,sp,204
 244:	8844                	0x8844
                line[size_b-1-j][k] = pola[k]*polb[j];
 246:	8902                	jr	s2
 248:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
 24c:	8152                	mv	sp,s4
 24e:	9301                	srli	a4,a4,0x20
 250:	9405                	srai	s0,s0,0x21
 252:	0206                	slli	tp,tp,0x1
 254:	0a44                	addi	s1,sp,276
            for (k = size_a-1; k >= 0; k = k-1 ){
 256:	42c1                	li	t0,16
                line[size_b-1-j][k] = pola[k]*polb[j];
 258:	42c8                	lw	a0,4(a3)
 25a:	42c9                	li	t0,18
 25c:	42d2                	lw	t0,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 25e:	42d442d3          	0x42d442d3
        for (j = size_b -1; j >= 0; j = j-1){
 262:	000e                	c.slli	zero,0x3
 264:	0b42                	slli	s6,s6,0x10
 266:	0000                	unimp
 268:	0040                	addi	s0,sp,4
            for (k = size_a-1; k >= 0; k = k-1 ){
 26a:	0000                	unimp
 26c:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 26e:	0000                	unimp
 270:	0b76                	slli	s6,s6,0x1d
 272:	0000                	unimp
 274:	00c4                	addi	s1,sp,68
 276:	0000                	unimp
 278:	0e42                	slli	t3,t3,0x10
 27a:	4430                	lw	a2,72(s0)
 27c:	0288                	addi	a0,sp,320
            for (k = size_a-1; k >= 0; k = k-1 ){
 27e:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 282:	9504                	0x9504
 284:	58099707          	0x58099707
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0181                	addi	gp,gp,0
        for (j = size_b -1; j >= 0; j = j-1){
 28a:	0389                	addi	t2,t2,2
 28c:	0694                	addi	a3,sp,832
 28e:	0896                	slli	a7,a7,0x5
 290:	4e02                	lw	t3,0(sp)
            line[i][j] = line[i][j] % mod;
 292:	c10a                	sw	sp,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	c842                	sw	a6,16(sp)
 296:	c942                	sw	a6,144(sp)
            line[i][j] = line[i][j] % mod;
 298:	d242                	sw	a6,36(sp)
 29a:	d342                	sw	a6,164(sp)
 29c:	d442                	sw	a6,40(sp)
 29e:	d542                	sw	a6,168(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	d642                	sw	a6,44(sp)
 2a2:	d742                	sw	a6,172(sp)
    for (i = 0; i < size_b; ++i){
 2a4:	0e42                	slli	t3,t3,0x10
 2a6:	4200                	lw	s0,0(a2)
 2a8:	0000000b          	0xb
        for(j = 0; j < size_a + size_b -1; ++j){
 2ac:	002c                	addi	a1,sp,8
 2ae:	0000                	unimp
            product[j] += line[i][j];
 2b0:	0000                	unimp
 2b2:	0000                	unimp
 2b4:	0e36                	slli	t3,t3,0xd
        for(i = 0; i < size_b; ++i){
 2b6:	0000                	unimp
            product[j] += line[i][j];
 2b8:	0138                	addi	a4,sp,136
 2ba:	0000                	unimp
 2bc:	0e44                	addi	s1,sp,788
 2be:	08b0                	addi	a2,sp,88
 2c0:	815e                	mv	sp,s7
 2c2:	8801                	andi	s0,s0,0
        for(i = 0; i < size_b; ++i){
 2c4:	8902                	jr	s2
 2c6:	03049203          	lh	tp,48(s1)
    for(j = 0; j < size_a + size_b -1; ++j){
 2ca:	00f8                	addi	a4,sp,76
 2cc:	c10a                	sw	sp,128(sp)
        for(i = 0; i < size_b; ++i){
 2ce:	c844                	sw	s1,20(s0)
 2d0:	c944                	sw	s1,20(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d2:	d244                	sw	s1,36(a2)
    int line[size_b][size_a + size_b];
 2d4:	0e46                	slli	t3,t3,0x11
 2d6:	4200                	lw	s0,0(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	0000000b          	0xb


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4d90006f          	j	d54 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4d90006f          	j	d58 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4d10006f          	j	d54 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4cd0006f          	j	d54 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78f63          	beq	a5,a3,d8 <array_add+0x46>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_add+0x20>
      a4:	ebb1                	bnez	a5,f8 <array_add+0x66>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c763          	blt	a5,a2,fa <array_add+0x68>
      b0:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
	    break;      
	case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	06d7c063          	blt	a5,a3,11e <array_add+0x8c>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
            }
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c50733          	add	a4,a0,a2
      ca:	00c586b3          	add	a3,a1,a2
      ce:	431c                	lw	a5,0(a4)
      d0:	4294                	lw	a3,0(a3)
      d2:	97b6                	add	a5,a5,a3
      d4:	c31c                	sw	a5,0(a4)
      d6:	a811                	j	ea <array_add+0x58>
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	fff60693          	addi	a3,a2,-1
      dc:	02e6c6b3          	div	a3,a3,a4
      e0:	4781                	li	a5,0
      e2:	48b1                	li	a7,12
      e4:	02d7c463          	blt	a5,a3,10c <array_add+0x7a>
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	1671                	addi	a2,a2,-4
      ec:	9532                	add	a0,a0,a2
      ee:	962e                	add	a2,a2,a1
      f0:	411c                	lw	a5,0(a0)
      f2:	4218                	lw	a4,0(a2)
      f4:	97ba                	add	a5,a5,a4
      f6:	c11c                	sw	a5,0(a0)
	    break;
    } //end of switch case
} //end of function
      f8:	8082                	ret
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	03078733          	mul	a4,a5,a6
    asm volatile(
      fe:	00e506b3          	add	a3,a0,a4
     102:	972e                	add	a4,a4,a1
     104:	06e6f70b          	0x6e6f70b
            for (i = 0; i < (length / 3); i++) {
     108:	0785                	addi	a5,a5,1
     10a:	b74d                	j	ac <array_add+0x1a>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	03178733          	mul	a4,a5,a7
    asm volatile(
     110:	00e50833          	add	a6,a0,a4
     114:	972e                	add	a4,a4,a1
     116:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0785                	addi	a5,a5,1
     11c:	b7e1                	j	e4 <array_add+0x52>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	03178733          	mul	a4,a5,a7
    asm volatile(
     122:	00e50833          	add	a6,a0,a4
     126:	972e                	add	a4,a4,a1
     128:	06e8770b          	0x6e8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0785                	addi	a5,a5,1
     12e:	bf41                	j	be <array_add+0x2c>

00000130 <instr_mod>:



void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
     130:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
     134:	8082                	ret

00000136 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    switch(length%3) {
     136:	470d                	li	a4,3
     138:	02e667b3          	rem	a5,a2,a4
     13c:	4685                	li	a3,1
     13e:	02d78d63          	beq	a5,a3,178 <array_mod+0x42>
     142:	4689                	li	a3,2
     144:	00d78963          	beq	a5,a3,156 <array_mod+0x20>
     148:	e7b9                	bnez	a5,196 <array_mod+0x60>

        case 0:
            for (i = 0; i < (length / 3); i++) {
     14a:	02e64633          	div	a2,a2,a4
    asm volatile(
     14e:	46b1                	li	a3,12
            for (i = 0; i < (length / 3); i++) {
     150:	04c7c463          	blt	a5,a2,198 <array_mod+0x62>
     154:	8082                	ret
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	ffe60693          	addi	a3,a2,-2
     15a:	02e6c6b3          	div	a3,a3,a4
     15e:	4781                	li	a5,0
    asm volatile(
     160:	4831                	li	a6,12
            for (i = 0; i < ((length-2) / 3); i++) {
     162:	04d7c963          	blt	a5,a3,1b4 <array_mod+0x7e>
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
     166:	060a                	slli	a2,a2,0x2
     168:	1671                	addi	a2,a2,-4
     16a:	00c50733          	add	a4,a0,a2
     16e:	431c                	lw	a5,0(a4)
     170:	02b7e7b3          	rem	a5,a5,a1
     174:	c31c                	sw	a5,0(a4)
     176:	a811                	j	18a <array_mod+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	fff60693          	addi	a3,a2,-1
     17c:	02e6c6b3          	div	a3,a3,a4
     180:	4781                	li	a5,0
    asm volatile(
     182:	4831                	li	a6,12
            for (i = 0; i < ((length-1) / 3); i++) {
     184:	02d7c163          	blt	a5,a3,1a6 <array_mod+0x70>
            a1[length-1] = a1[length-1] % mod;
     188:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] % mod;
     18a:	1671                	addi	a2,a2,-4
     18c:	962a                	add	a2,a2,a0
     18e:	421c                	lw	a5,0(a2)
     190:	02b7e5b3          	rem	a1,a5,a1
     194:	c20c                	sw	a1,0(a2)
	    break;
    } //end of switch case
} //end of function
     196:	8082                	ret
    asm volatile(
     198:	02d78733          	mul	a4,a5,a3
     19c:	972a                	add	a4,a4,a0
     19e:	0cb7770b          	0xcb7770b
            for (i = 0; i < (length / 3); i++) {
     1a2:	0785                	addi	a5,a5,1
     1a4:	b775                	j	150 <array_mod+0x1a>
    asm volatile(
     1a6:	03078733          	mul	a4,a5,a6
     1aa:	972a                	add	a4,a4,a0
     1ac:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-1) / 3); i++) {
     1b0:	0785                	addi	a5,a5,1
     1b2:	bfc9                	j	184 <array_mod+0x4e>
    asm volatile(
     1b4:	03078733          	mul	a4,a5,a6
     1b8:	972a                	add	a4,a4,a0
     1ba:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-2) / 3); i++) {
     1be:	0785                	addi	a5,a5,1
     1c0:	b74d                	j	162 <array_mod+0x2c>

000001c2 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c2:	715d                	addi	sp,sp,-80
     1c4:	c4a2                	sw	s0,72(sp)
     1c6:	c2a6                	sw	s1,68(sp)
     1c8:	c0ca                	sw	s2,64(sp)
     1ca:	de4e                	sw	s3,60(sp)
     1cc:	dc52                	sw	s4,56(sp)
     1ce:	da56                	sw	s5,52(sp)
     1d0:	d85a                	sw	s6,48(sp)
     1d2:	d65e                	sw	s7,44(sp)
     1d4:	d462                	sw	s8,40(sp)
     1d6:	d266                	sw	s9,36(sp)
     1d8:	d06a                	sw	s10,32(sp)
     1da:	ce6e                	sw	s11,28(sp)
     1dc:	0880                	addi	s0,sp,80
     1de:	c686                	sw	ra,76(sp)
     1e0:	00269993          	slli	s3,a3,0x2
     1e4:	faf42e23          	sw	a5,-68(s0)


    int line[size_b][size_a + size_b];
     1e8:	00d587b3          	add	a5,a1,a3
     1ec:	fff78b13          	addi	s6,a5,-1
     1f0:	00279a93          	slli	s5,a5,0x2
     1f4:	033787b3          	mul	a5,a5,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1f8:	8a3a                	mv	s4,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
    int polb[size_b];
     1fa:	00f98713          	addi	a4,s3,15
     1fe:	9b41                	andi	a4,a4,-16
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     200:	8832                	mv	a6,a2
     202:	8936                	mv	s2,a3
    int line[size_b][size_a + size_b];
     204:	fff68d93          	addi	s11,a3,-1
    int pola[size_a];
     208:	fff58c13          	addi	s8,a1,-1

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     20c:	4681                	li	a3,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product[j] = 0;
     20e:	00001e17          	auipc	t3,0x1
     212:	00ee0e13          	addi	t3,t3,14 # 121c <_bss_start>
    int line[size_b][size_a + size_b];
     216:	07bd                	addi	a5,a5,15
     218:	9bc1                	andi	a5,a5,-16
     21a:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
     21e:	00259793          	slli	a5,a1,0x2
     222:	07bd                	addi	a5,a5,15
     224:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     226:	8c8a                	mv	s9,sp
    int pola[size_a];
     228:	40f10133          	sub	sp,sp,a5
     22c:	8d0a                	mv	s10,sp
    int polb[size_b];
     22e:	40e10133          	sub	sp,sp,a4
     232:	848a                	mv	s1,sp
    for (i = 0; i < size_b; ++i){
     234:	8be6                	mv	s7,s9
     236:	8666                	mv	a2,s9
     238:	0726c063          	blt	a3,s2,298 <polymult+0xd6>
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     23c:	4701                	li	a4,0
     23e:	06b74063          	blt	a4,a1,29e <polymult+0xdc>
        pola[i] = a[i];
    }

    array_mod(pola,mod,size_a);
     242:	862e                	mv	a2,a1
     244:	856a                	mv	a0,s10
     246:	85d2                	mv	a1,s4
     248:	fb042c23          	sw	a6,-72(s0)
     24c:	35ed                	jal	136 <array_mod>

    for (i = 0; i < size_b; ++i){
     24e:	fb842803          	lw	a6,-72(s0)
     252:	4701                	li	a4,0
     254:	05274e63          	blt	a4,s2,2b0 <polymult+0xee>
        polb[i] = b[i];
    }

    array_mod(polb,mod,size_b);
     258:	8526                	mv	a0,s1
     25a:	864a                	mv	a2,s2
     25c:	85d2                	mv	a1,s4
     25e:	3de1                	jal	136 <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     260:	fbc42783          	lw	a5,-68(s0)
     264:	4705                	li	a4,1
     266:	94ce                	add	s1,s1,s3
     268:	04e78d63          	beq	a5,a4,2c2 <polymult+0x100>
     26c:	19f1                	addi	s3,s3,-4
     26e:	ffca8613          	addi	a2,s5,-4
     272:	99e6                	add	s3,s3,s9
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     274:	040dca63          	bltz	s11,2c8 <polymult+0x106>
            for (k = size_a-1; k >= 0; k = k-1 ){
     278:	8762                	mv	a4,s8
     27a:	a8e9                	j	354 <polymult+0x192>
            product[j] = 0;
     27c:	00271313          	slli	t1,a4,0x2
     280:	9372                	add	t1,t1,t3
            line[i][j] = 0;
     282:	0008a023          	sw	zero,0(a7)
            product[j] = 0;
     286:	00032023          	sw	zero,0(t1)
        for(j = 0; j < size_a + size_b -1; ++j){
     28a:	0705                	addi	a4,a4,1
     28c:	0891                	addi	a7,a7,4
     28e:	ff6747e3          	blt	a4,s6,27c <polymult+0xba>
    for (i = 0; i < size_b; ++i){
     292:	0685                	addi	a3,a3,1
     294:	9656                	add	a2,a2,s5
     296:	b74d                	j	238 <polymult+0x76>
     298:	88b2                	mv	a7,a2
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	4701                	li	a4,0
     29c:	bfcd                	j	28e <polymult+0xcc>
        pola[i] = a[i];
     29e:	00271693          	slli	a3,a4,0x2
     2a2:	00dd0633          	add	a2,s10,a3
     2a6:	96aa                	add	a3,a3,a0
     2a8:	4294                	lw	a3,0(a3)
    for (i = 0; i < size_a; ++i){
     2aa:	0705                	addi	a4,a4,1
        pola[i] = a[i];
     2ac:	c214                	sw	a3,0(a2)
    for (i = 0; i < size_a; ++i){
     2ae:	bf41                	j	23e <polymult+0x7c>
        polb[i] = b[i];
     2b0:	00271693          	slli	a3,a4,0x2
     2b4:	00d48633          	add	a2,s1,a3
     2b8:	96c2                	add	a3,a3,a6
     2ba:	4294                	lw	a3,0(a3)
    for (i = 0; i < size_b; ++i){
     2bc:	0705                	addi	a4,a4,1
        polb[i] = b[i];
     2be:	c214                	sw	a3,0(a2)
    for (i = 0; i < size_b; ++i){
     2c0:	bf51                	j	254 <polymult+0x92>
    if(star_mult == 1){
     2c2:	8666                	mv	a2,s9
        for (j = size_b -1; j >= 0; j = j-1){
     2c4:	060dda63          	bgez	s11,338 <polymult+0x176>
            for (k = size_a-1; k >= 0; k = k-1 ){
     2c8:	4481                	li	s1,0
            }
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
     2ca:	0924cb63          	blt	s1,s2,360 <polymult+0x19e>
        array_mod(line[i],mod,(size_a+size_b-1));
    }

    // construct product
   // for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     2ce:	4481                	li	s1,0
            array_add(product,line[i],size_a+size_b-1);
     2d0:	00001997          	auipc	s3,0x1
     2d4:	f4c98993          	addi	s3,s3,-180 # 121c <_bss_start>
     2d8:	865a                	mv	a2,s6
        for(i = 0; i < size_b; ++i){
     2da:	0924ca63          	blt	s1,s2,36e <polymult+0x1ac>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
     2de:	85d2                	mv	a1,s4
     2e0:	00001517          	auipc	a0,0x1
     2e4:	f3c50513          	addi	a0,a0,-196 # 121c <_bss_start>
     2e8:	35b9                	jal	136 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     2ea:	fb040113          	addi	sp,s0,-80
     2ee:	40b6                	lw	ra,76(sp)
     2f0:	4426                	lw	s0,72(sp)
     2f2:	4496                	lw	s1,68(sp)
     2f4:	4906                	lw	s2,64(sp)
     2f6:	59f2                	lw	s3,60(sp)
     2f8:	5a62                	lw	s4,56(sp)
     2fa:	5ad2                	lw	s5,52(sp)
     2fc:	5b42                	lw	s6,48(sp)
     2fe:	5bb2                	lw	s7,44(sp)
     300:	5c22                	lw	s8,40(sp)
     302:	5c92                	lw	s9,36(sp)
     304:	5d02                	lw	s10,32(sp)
     306:	4df2                	lw	s11,28(sp)
     308:	00001517          	auipc	a0,0x1
     30c:	f1450513          	addi	a0,a0,-236 # 121c <_bss_start>
     310:	6161                	addi	sp,sp,80
     312:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     314:	00271693          	slli	a3,a4,0x2
     318:	00d605b3          	add	a1,a2,a3
     31c:	96ea                	add	a3,a3,s10
     31e:	4294                	lw	a3,0(a3)
     320:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     326:	02a686b3          	mul	a3,a3,a0
     32a:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     32c:	fe0754e3          	bgez	a4,314 <polymult+0x152>
        for (j = size_b -1; j >= 0; j = j-1){
     330:	1dfd                	addi	s11,s11,-1
     332:	14f1                	addi	s1,s1,-4
     334:	9656                	add	a2,a2,s5
     336:	b779                	j	2c4 <polymult+0x102>
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	8762                	mv	a4,s8
     33a:	bfcd                	j	32c <polymult+0x16a>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33c:	00271693          	slli	a3,a4,0x2
     340:	00d985b3          	add	a1,s3,a3
     344:	96ea                	add	a3,a3,s10
     346:	4294                	lw	a3,0(a3)
     348:	ffc4a503          	lw	a0,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     34c:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     34e:	02a686b3          	mul	a3,a3,a0
     352:	c194                	sw	a3,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     354:	fe0754e3          	bgez	a4,33c <polymult+0x17a>
        for (j = size_b -1; j >= 0; j = j-1){
     358:	1dfd                	addi	s11,s11,-1
     35a:	14f1                	addi	s1,s1,-4
     35c:	99b2                	add	s3,s3,a2
     35e:	bf19                	j	274 <polymult+0xb2>
        array_mod(line[i],mod,(size_a+size_b-1));
     360:	8566                	mv	a0,s9
     362:	865a                	mv	a2,s6
     364:	85d2                	mv	a1,s4
     366:	3bc1                	jal	136 <array_mod>
    for (i = 0; i < size_b; ++i){
     368:	0485                	addi	s1,s1,1
     36a:	9cd6                	add	s9,s9,s5
     36c:	bfb9                	j	2ca <polymult+0x108>
            array_add(product,line[i],size_a+size_b-1);
     36e:	85de                	mv	a1,s7
     370:	854e                	mv	a0,s3
     372:	3305                	jal	92 <array_add>
        for(i = 0; i < size_b; ++i){
     374:	0485                	addi	s1,s1,1
     376:	9bd6                	add	s7,s7,s5
     378:	b785                	j	2d8 <polymult+0x116>

0000037a <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     37a:	1101                	addi	sp,sp,-32
     37c:	ca26                	sw	s1,20(sp)
     37e:	84b6                	mv	s1,a3

    int line[size_b][size_a + size_b];
     380:	00d587b3          	add	a5,a1,a3
     384:	00249893          	slli	a7,s1,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	c84a                	sw	s2,16(sp)
     38a:	c64e                	sw	s3,12(sp)
    int line[size_b][size_a + size_b];
     38c:	00279913          	slli	s2,a5,0x2
     390:	fff78993          	addi	s3,a5,-1
     394:	02f887b3          	mul	a5,a7,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     398:	cc22                	sw	s0,24(sp)
     39a:	c452                	sw	s4,8(sp)
     39c:	c256                	sw	s5,4(sp)
     39e:	ce06                	sw	ra,28(sp)
     3a0:	c05a                	sw	s6,0(sp)
     3a2:	1000                	addi	s0,sp,32
     3a4:	832e                	mv	t1,a1
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     3a6:	fff58e13          	addi	t3,a1,-1
    int line[size_b][size_a + size_b];
     3aa:	07bd                	addi	a5,a5,15
     3ac:	9bc1                	andi	a5,a5,-16
     3ae:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
     3b2:	00259793          	slli	a5,a1,0x2
     3b6:	07bd                	addi	a5,a5,15
     3b8:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     3ba:	880a                	mv	a6,sp
    int pola[size_a];
     3bc:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     3c0:	00f88793          	addi	a5,a7,15
     3c4:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     3c6:	858a                	mv	a1,sp
    int polb[size_b];
     3c8:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     3cc:	16fd                	addi	a3,a3,-1
    int polb[size_b];
     3ce:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     3d0:	8a42                	mv	s4,a6
     3d2:	8fc2                	mv	t6,a6
     3d4:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     3d6:	00001a97          	auipc	s5,0x1
     3da:	09ea8a93          	addi	s5,s5,158 # 1474 <product2>
    for (i = 0; i < size_b; ++i){
     3de:	049f4263          	blt	t5,s1,422 <polymult2+0xa8>
        }
    }

    for(i = 0; i < size_a; ++i){
     3e2:	4e81                	li	t4,0
     3e4:	046ec263          	blt	t4,t1,428 <polymult2+0xae>
        pola[i] = a[i];
    }

    for(i = 0; i < size_b; ++i){
     3e8:	4501                	li	a0,0
     3ea:	04954a63          	blt	a0,s1,43e <polymult2+0xc4>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     3ee:	4605                	li	a2,1
     3f0:	97c6                	add	a5,a5,a7
     3f2:	08c70263          	beq	a4,a2,476 <polymult2+0xfc>
     3f6:	18f1                	addi	a7,a7,-4
     3f8:	ffc90313          	addi	t1,s2,-4
     3fc:	9846                	add	a6,a6,a7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     3fe:	0606ce63          	bltz	a3,47a <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
     402:	8772                	mv	a4,t3
     404:	a0c9                	j	4c6 <polymult2+0x14c>
            product2[j] = 0;
     406:	002e9393          	slli	t2,t4,0x2
     40a:	93d6                	add	t2,t2,s5
            line[i][j] = 0;
     40c:	0002a023          	sw	zero,0(t0)
            product2[j] = 0;
     410:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
     414:	0e85                	addi	t4,t4,1
     416:	0291                	addi	t0,t0,4
     418:	ff3ec7e3          	blt	t4,s3,406 <polymult2+0x8c>
    for (i = 0; i < size_b; ++i){
     41c:	0f05                	addi	t5,t5,1
     41e:	9fca                	add	t6,t6,s2
     420:	bf7d                	j	3de <polymult2+0x64>
     422:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
     424:	4e81                	li	t4,0
     426:	bfcd                	j	418 <polymult2+0x9e>
        pola[i] = a[i];
     428:	002e9f13          	slli	t5,t4,0x2
     42c:	01e58fb3          	add	t6,a1,t5
     430:	9f2a                	add	t5,t5,a0
     432:	000f2f03          	lw	t5,0(t5)
    for(i = 0; i < size_a; ++i){
     436:	0e85                	addi	t4,t4,1
        pola[i] = a[i];
     438:	01efa023          	sw	t5,0(t6)
    for(i = 0; i < size_a; ++i){
     43c:	b765                	j	3e4 <polymult2+0x6a>
        polb[i] = b[i];
     43e:	00251313          	slli	t1,a0,0x2
     442:	00678eb3          	add	t4,a5,t1
     446:	9332                	add	t1,t1,a2
     448:	00032303          	lw	t1,0(t1)
    for(i = 0; i < size_b; ++i){
     44c:	0505                	addi	a0,a0,1
        polb[i] = b[i];
     44e:	006ea023          	sw	t1,0(t4)
    for(i = 0; i < size_b; ++i){
     452:	bf61                	j	3ea <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     454:	00271613          	slli	a2,a4,0x2
     458:	00c80533          	add	a0,a6,a2
     45c:	962e                	add	a2,a2,a1
     45e:	4210                	lw	a2,0(a2)
     460:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     464:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     466:	03160633          	mul	a2,a2,a7
     46a:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     46c:	fe0754e3          	bgez	a4,454 <polymult2+0xda>
        for (j = size_b -1; j >= 0; j = j-1){
     470:	16fd                	addi	a3,a3,-1
     472:	17f1                	addi	a5,a5,-4
     474:	984a                	add	a6,a6,s2
     476:	0206d963          	bgez	a3,4a8 <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     47a:	4a81                	li	s5,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
     47c:	00001b17          	auipc	s6,0x1
     480:	ff8b0b13          	addi	s6,s6,-8 # 1474 <product2>
    for(i=0;i<size_b;++i){
     484:	049ac763          	blt	s5,s1,4d2 <polymult2+0x158>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     488:	fe040113          	addi	sp,s0,-32
     48c:	40f2                	lw	ra,28(sp)
     48e:	4462                	lw	s0,24(sp)
     490:	44d2                	lw	s1,20(sp)
     492:	4942                	lw	s2,16(sp)
     494:	49b2                	lw	s3,12(sp)
     496:	4a22                	lw	s4,8(sp)
     498:	4a92                	lw	s5,4(sp)
     49a:	4b02                	lw	s6,0(sp)
     49c:	00001517          	auipc	a0,0x1
     4a0:	fd850513          	addi	a0,a0,-40 # 1474 <product2>
     4a4:	6105                	addi	sp,sp,32
     4a6:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a8:	8772                	mv	a4,t3
     4aa:	b7c9                	j	46c <polymult2+0xf2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ac:	00271513          	slli	a0,a4,0x2
     4b0:	00a808b3          	add	a7,a6,a0
     4b4:	952e                	add	a0,a0,a1
     4b6:	4110                	lw	a2,0(a0)
     4b8:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4bc:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4be:	02a60633          	mul	a2,a2,a0
     4c2:	00c8a023          	sw	a2,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4c6:	fe0753e3          	bgez	a4,4ac <polymult2+0x132>
        for (j = size_b -1; j >= 0; j = j-1){
     4ca:	16fd                	addi	a3,a3,-1
     4cc:	17f1                	addi	a5,a5,-4
     4ce:	981a                	add	a6,a6,t1
     4d0:	b73d                	j	3fe <polymult2+0x84>
        array_add(product2,line[i],size_a+size_b-1);
     4d2:	85d2                	mv	a1,s4
     4d4:	864e                	mv	a2,s3
     4d6:	855a                	mv	a0,s6
     4d8:	3e6d                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     4da:	0a85                	addi	s5,s5,1
     4dc:	9a4a                	add	s4,s4,s2
     4de:	b75d                	j	484 <polymult2+0x10a>

000004e0 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     4e0:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e4:	7139                	addi	sp,sp,-64
    int v[size_N];
     4e6:	07bd                	addi	a5,a5,15
     4e8:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ea:	dc22                	sw	s0,56(sp)
     4ec:	da26                	sw	s1,52(sp)
     4ee:	d84a                	sw	s2,48(sp)
     4f0:	d64e                	sw	s3,44(sp)
     4f2:	d452                	sw	s4,40(sp)
     4f4:	d256                	sw	s5,36(sp)
     4f6:	d05a                	sw	s6,32(sp)
     4f8:	ce5e                	sw	s7,28(sp)
     4fa:	cc62                	sw	s8,24(sp)
     4fc:	ca66                	sw	s9,20(sp)
     4fe:	c86a                	sw	s10,16(sp)
     500:	de06                	sw	ra,60(sp)
     502:	c66e                	sw	s11,12(sp)
     504:	0080                	addi	s0,sp,64
    int v[size_N];
     506:	40f10133          	sub	sp,sp,a5
     50a:	8a8a                	mv	s5,sp
    int q[size_N];
     50c:	40f10133          	sub	sp,sp,a5
     510:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
     512:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     516:	00269793          	slli	a5,a3,0x2
     51a:	07bd                	addi	a5,a5,15
     51c:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     51e:	8c8a                	mv	s9,sp
    int denum_temp[size_D];
     520:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	84ae                	mv	s1,a1
     526:	8d32                	mv	s10,a2
     528:	89b6                	mv	s3,a3
     52a:	893a                	mv	s2,a4
    int v[size_N];
     52c:	fff58c13          	addi	s8,a1,-1
    int denum_temp[size_D];
     530:	fff68a13          	addi	s4,a3,-1
     534:	8b8a                	mv	s7,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     536:	4781                	li	a5,0
     538:	0297cd63          	blt	a5,s1,572 <polydiv+0x92>
        num_temp[i] = num[i];
    }

   
    array_mod(num_temp, mod, size_N);
     53c:	8626                	mv	a2,s1
     53e:	85ca                	mv	a1,s2
     540:	8566                	mv	a0,s9
     542:	3ed5                	jal	136 <array_mod>
    

    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     544:	4781                	li	a5,0
     546:	0337cf63          	blt	a5,s3,584 <polydiv+0xa4>
        denum_temp[i] = denum[i];
    }

    array_mod(denum_temp,mod,size_D);
     54a:	864e                	mv	a2,s3
     54c:	85ca                	mv	a1,s2
     54e:	855e                	mv	a0,s7
     550:	36dd                	jal	136 <array_mod>

    for (i = 0; i < size_N; ++i){
     552:	4781                	li	a5,0
     554:	0497c163          	blt	a5,s1,596 <polydiv+0xb6>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     558:	002a1793          	slli	a5,s4,0x2
     55c:	97de                	add	a5,a5,s7
     55e:	4398                	lw	a4,0(a5)
     560:	040a5663          	bgez	s4,5ac <polydiv+0xcc>
    for (i = 0; i < size_N; ++i){
     564:	4781                	li	a5,0
     566:	4d01                	li	s10,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     568:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     56a:	052d4463          	blt	s10,s2,5b2 <polydiv+0xd2>
     56e:	87e2                	mv	a5,s8
     570:	a891                	j	5c4 <polydiv+0xe4>
        num_temp[i] = num[i];
     572:	00279713          	slli	a4,a5,0x2
     576:	00ec86b3          	add	a3,s9,a4
     57a:	972a                	add	a4,a4,a0
     57c:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_N; ++i){
     57e:	0785                	addi	a5,a5,1
        num_temp[i] = num[i];
     580:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_N; ++i){
     582:	bf5d                	j	538 <polydiv+0x58>
        denum_temp[i] = denum[i];
     584:	00279713          	slli	a4,a5,0x2
     588:	00eb86b3          	add	a3,s7,a4
     58c:	976a                	add	a4,a4,s10
     58e:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_D; ++i) {
     590:	0785                	addi	a5,a5,1
        denum_temp[i] = denum[i];
     592:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_D; ++i) {
     594:	bf4d                	j	546 <polydiv+0x66>
        q[i] = 0;
     596:	00279713          	slli	a4,a5,0x2
     59a:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
     59e:	9756                	add	a4,a4,s5
        q[i] = 0;
     5a0:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     5a4:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     5a8:	0785                	addi	a5,a5,1
     5aa:	b76d                	j	554 <polydiv+0x74>
        if( denum_temp[i] != 0 )
     5ac:	ff45                	bnez	a4,564 <polydiv+0x84>
    for (i = size_D-1; i >= 0; i = i-1){
     5ae:	1a7d                	addi	s4,s4,-1
     5b0:	b765                	j	558 <polydiv+0x78>
        if ( (b_N*u)%mod == 1 )
     5b2:	0327e633          	rem	a2,a5,s2
     5b6:	97ba                	add	a5,a5,a4
     5b8:	fad60be3          	beq	a2,a3,56e <polydiv+0x8e>
    for (u = 0; u < mod; ++u){
     5bc:	0d05                	addi	s10,s10,1
     5be:	b775                	j	56a <polydiv+0x8a>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     5c0:	eb01                	bnez	a4,5d0 <polydiv+0xf0>
    for (i = size_N-1; i >= 0; i = i-1){
     5c2:	17fd                	addi	a5,a5,-1
     5c4:	00279713          	slli	a4,a5,0x2
     5c8:	9766                	add	a4,a4,s9
     5ca:	4318                	lw	a4,0(a4)
     5cc:	fe07dae3          	bgez	a5,5c0 <polydiv+0xe0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     5d0:	0547d663          	bge	a5,s4,61c <polydiv+0x13c>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     5d4:	4781                	li	a5,0
        result[i] = q[i];
     5d6:	00001697          	auipc	a3,0x1
     5da:	0f668693          	addi	a3,a3,246 # 16cc <result>
    for(i = 0; i < size_N; ++i){
     5de:	0c97c563          	blt	a5,s1,6a8 <polydiv+0x1c8>
    }


    for(i = size_N; i < (2*size_N); ++i){
     5e2:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     5e6:	00001697          	auipc	a3,0x1
     5ea:	0e668693          	addi	a3,a3,230 # 16cc <result>
    for(i = size_N; i < (2*size_N); ++i){
     5ee:	0ce4c663          	blt	s1,a4,6ba <polydiv+0x1da>
    }

    return_address3 = &result[0];

    return return_address3;
}
     5f2:	fc040113          	addi	sp,s0,-64
     5f6:	50f2                	lw	ra,60(sp)
     5f8:	5462                	lw	s0,56(sp)
     5fa:	54d2                	lw	s1,52(sp)
     5fc:	5942                	lw	s2,48(sp)
     5fe:	59b2                	lw	s3,44(sp)
     600:	5a22                	lw	s4,40(sp)
     602:	5a92                	lw	s5,36(sp)
     604:	5b02                	lw	s6,32(sp)
     606:	4bf2                	lw	s7,28(sp)
     608:	4c62                	lw	s8,24(sp)
     60a:	4cd2                	lw	s9,20(sp)
     60c:	4d42                	lw	s10,16(sp)
     60e:	4db2                	lw	s11,12(sp)
     610:	00001517          	auipc	a0,0x1
     614:	0bc50513          	addi	a0,a0,188 # 16cc <result>
     618:	6121                	addi	sp,sp,64
     61a:	8082                	ret
        v[(d-d2)] = u*r_d;
     61c:	03a70733          	mul	a4,a4,s10
     620:	414787b3          	sub	a5,a5,s4
     624:	078a                	slli	a5,a5,0x2
     626:	97d6                	add	a5,a5,s5
        array_mod(v, mod, size_N);
     628:	8626                	mv	a2,s1
     62a:	85ca                	mv	a1,s2
     62c:	8556                	mv	a0,s5
        v[(d-d2)] = u*r_d;
     62e:	c398                	sw	a4,0(a5)
        array_mod(v, mod, size_N);
     630:	3619                	jal	136 <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     632:	4781                	li	a5,0
     634:	874a                	mv	a4,s2
     636:	86ce                	mv	a3,s3
     638:	8656                	mv	a2,s5
     63a:	85ce                	mv	a1,s3
     63c:	855e                	mv	a0,s7
     63e:	3651                	jal	1c2 <polymult>
         array_mod(product, mod, size_N);
     640:	8626                	mv	a2,s1
     642:	85ca                	mv	a1,s2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     644:	8daa                	mv	s11,a0
         array_mod(product, mod, size_N);
     646:	3cc5                	jal	136 <array_mod>
        for (i = 0; i < size_N; ++i){
     648:	8766                	mv	a4,s9
     64a:	4781                	li	a5,0
     64c:	0297c763          	blt	a5,s1,67a <polydiv+0x19a>
         array_mod(num_temp, mod, size_N);
     650:	8626                	mv	a2,s1
     652:	85ca                	mv	a1,s2
     654:	8566                	mv	a0,s9
     656:	34c5                	jal	136 <array_mod>
        array_add(q, v, size_N);
     658:	8626                	mv	a2,s1
     65a:	85d6                	mv	a1,s5
     65c:	855a                	mv	a0,s6
     65e:	3c15                	jal	92 <array_add>
        array_mod(q, mod, size_N);
     660:	8626                	mv	a2,s1
     662:	85ca                	mv	a1,s2
     664:	855a                	mv	a0,s6
     666:	3cc1                	jal	136 <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
     668:	87e2                	mv	a5,s8
     66a:	00279713          	slli	a4,a5,0x2
     66e:	9766                	add	a4,a4,s9
     670:	4318                	lw	a4,0(a4)
     672:	0007df63          	bgez	a5,690 <polydiv+0x1b0>
     676:	4681                	li	a3,0
     678:	a02d                	j	6a2 <polydiv+0x1c2>
            num_temp[i] = num_temp[i] - product[i];
     67a:	00279613          	slli	a2,a5,0x2
     67e:	966e                	add	a2,a2,s11
     680:	4314                	lw	a3,0(a4)
     682:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     684:	0785                	addi	a5,a5,1
     686:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     688:	8e91                	sub	a3,a3,a2
     68a:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     68e:	bf7d                	j	64c <polydiv+0x16c>
            if( num_temp[i] != 0 )
     690:	f37d                	bnez	a4,676 <polydiv+0x196>
        for (i = size_N-1; i >= 0; i = i-1){
     692:	17fd                	addi	a5,a5,-1
     694:	bfd9                	j	66a <polydiv+0x18a>
            v[i] = 0;
     696:	00269613          	slli	a2,a3,0x2
     69a:	9656                	add	a2,a2,s5
     69c:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6a0:	0685                	addi	a3,a3,1
     6a2:	fe96cae3          	blt	a3,s1,696 <polydiv+0x1b6>
     6a6:	b72d                	j	5d0 <polydiv+0xf0>
        result[i] = q[i];
     6a8:	00279713          	slli	a4,a5,0x2
     6ac:	00e68633          	add	a2,a3,a4
     6b0:	975a                	add	a4,a4,s6
     6b2:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     6b4:	0785                	addi	a5,a5,1
        result[i] = q[i];
     6b6:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     6b8:	b71d                	j	5de <polydiv+0xfe>
        result[i] = num_temp[i-size_N];
     6ba:	000ca603          	lw	a2,0(s9)
     6be:	00249793          	slli	a5,s1,0x2
     6c2:	97b6                	add	a5,a5,a3
     6c4:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0485                	addi	s1,s1,1
     6c8:	0c91                	addi	s9,s9,4
     6ca:	b715                	j	5ee <polydiv+0x10e>

000006cc <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6cc:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6d2:	07bd                	addi	a5,a5,15
     6d4:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	c4a2                	sw	s0,72(sp)
     6d8:	c2a6                	sw	s1,68(sp)
     6da:	c0ca                	sw	s2,64(sp)
     6dc:	de4e                	sw	s3,60(sp)
     6de:	dc52                	sw	s4,56(sp)
     6e0:	da56                	sw	s5,52(sp)
     6e2:	d85a                	sw	s6,48(sp)
     6e4:	d65e                	sw	s7,44(sp)
     6e6:	d462                	sw	s8,40(sp)
     6e8:	d266                	sw	s9,36(sp)
     6ea:	ce6e                	sw	s11,28(sp)
     6ec:	c686                	sw	ra,76(sp)
     6ee:	d06a                	sw	s10,32(sp)
     6f0:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6f2:	40f10133          	sub	sp,sp,a5
     6f6:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	40f10133          	sub	sp,sp,a5
     6fc:	8a8a                	mv	s5,sp
    int ri[size];
     6fe:	40f10133          	sub	sp,sp,a5
     702:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     704:	40f10133          	sub	sp,sp,a5
     708:	8b0a                	mv	s6,sp
    int ti[size];
     70a:	40f10133          	sub	sp,sp,a5
     70e:	8c8a                	mv	s9,sp
    int qi_1[size];
     710:	40f10133          	sub	sp,sp,a5
     714:	8b8a                	mv	s7,sp
    int temp[size];
     716:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	84b6                	mv	s1,a3
     71c:	8db2                	mv	s11,a2
    int ri_2[size]; // MX-ring poly, a
     71e:	fff60913          	addi	s2,a2,-1
    int temp[size];
     722:	8a0a                	mv	s4,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     724:	4781                	li	a5,0
     726:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     728:	00001697          	auipc	a3,0x1
     72c:	1fc68693          	addi	a3,a3,508 # 1924 <ti_2>
    for (i = 0; i < size; ++i) {
     730:	0fb74163          	blt	a4,s11,812 <ext_euclid+0x146>

///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     734:	4785                	li	a5,1
     736:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     73a:	001d9793          	slli	a5,s11,0x1
     73e:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     742:	00001d17          	auipc	s10,0x1
     746:	1e2d0d13          	addi	s10,s10,482 # 1924 <ti_2>
    array_mod(ri_2,mod,size);
     74a:	866e                	mv	a2,s11
     74c:	85a6                	mv	a1,s1
     74e:	854e                	mv	a0,s3
     750:	32dd                	jal	136 <array_mod>
    array_mod(ri_1,mod,size);
     752:	866e                	mv	a2,s11
     754:	85a6                	mv	a1,s1
     756:	8556                	mv	a0,s5
     758:	3af9                	jal	136 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     75a:	8726                	mv	a4,s1
     75c:	86ee                	mv	a3,s11
     75e:	8656                	mv	a2,s5
     760:	85ee                	mv	a1,s11
     762:	854e                	mv	a0,s3
     764:	3bb5                	jal	4e0 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     766:	8762                	mv	a4,s8
     768:	87ee                	mv	a5,s11
     76a:	fbc42683          	lw	a3,-68(s0)
     76e:	0cd7cd63          	blt	a5,a3,848 <ext_euclid+0x17c>
     772:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     774:	4701                	li	a4,0
     776:	0ee95263          	bge	s2,a4,85a <ext_euclid+0x18e>
    array_mod(temp,mod,size);
     77a:	866e                	mv	a2,s11
     77c:	85a6                	mv	a1,s1
     77e:	8552                	mv	a0,s4
     780:	3a5d                	jal	136 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     782:	8726                	mv	a4,s1
     784:	86ee                	mv	a3,s11
     786:	8656                	mv	a2,s5
     788:	85ee                	mv	a1,s11
     78a:	8552                	mv	a0,s4
     78c:	3b91                	jal	4e0 <polydiv>
        for (i = 0; i < N + 1; ++i) {
     78e:	4781                	li	a5,0
     790:	0ef95263          	bge	s2,a5,874 <ext_euclid+0x1a8>
    array_mod(qi_1,mod,size);
     794:	866e                	mv	a2,s11
     796:	85a6                	mv	a1,s1
     798:	855e                	mv	a0,s7
     79a:	3a71                	jal	136 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	4781                	li	a5,0
     79e:	8726                	mv	a4,s1
     7a0:	86ee                	mv	a3,s11
     7a2:	865a                	mv	a2,s6
     7a4:	85ee                	mv	a1,s11
     7a6:	855e                	mv	a0,s7
     7a8:	3c29                	jal	1c2 <polymult>
        for (i = 0; i < N + 1; ++i) {
     7aa:	4781                	li	a5,0
     7ac:	0cf95d63          	bge	s2,a5,886 <ext_euclid+0x1ba>
    array_mod(temp,mod,size);
     7b0:	866e                	mv	a2,s11
     7b2:	85a6                	mv	a1,s1
     7b4:	8552                	mv	a0,s4
     7b6:	3241                	jal	136 <array_mod>
        for (i = 0; i < N + 1; ++i) {
     7b8:	4781                	li	a5,0
     7ba:	4701                	li	a4,0
     7bc:	0ce95e63          	bge	s2,a4,898 <ext_euclid+0x1cc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
     7c0:	866e                	mv	a2,s11
     7c2:	85a6                	mv	a1,s1
     7c4:	8566                	mv	a0,s9
     7c6:	3a85                	jal	136 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///


        for (i = 0; i < N + 1; ++i) {
     7c8:	4781                	li	a5,0
        controlR = 0;
     7ca:	4701                	li	a4,0
        for (i = 0; i < N + 1; ++i) {
     7cc:	4681                	li	a3,0
     7ce:	0ed95263          	bge	s2,a3,8b2 <ext_euclid+0x1e6>
    while (controlR != 0) {
     7d2:	ff25                	bnez	a4,74a <ext_euclid+0x7e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7d4:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7d8:	1097cb63          	blt	a5,s1,8ee <ext_euclid+0x222>
     7dc:	00001617          	auipc	a2,0x1
     7e0:	14860613          	addi	a2,a2,328 # 1924 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7e4:	10e95f63          	bge	s2,a4,902 <ext_euclid+0x236>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     7e8:	fb040113          	addi	sp,s0,-80
     7ec:	40b6                	lw	ra,76(sp)
     7ee:	4426                	lw	s0,72(sp)
     7f0:	4496                	lw	s1,68(sp)
     7f2:	4906                	lw	s2,64(sp)
     7f4:	59f2                	lw	s3,60(sp)
     7f6:	5a62                	lw	s4,56(sp)
     7f8:	5ad2                	lw	s5,52(sp)
     7fa:	5b42                	lw	s6,48(sp)
     7fc:	5bb2                	lw	s7,44(sp)
     7fe:	5c22                	lw	s8,40(sp)
     800:	5c92                	lw	s9,36(sp)
     802:	5d02                	lw	s10,32(sp)
     804:	4df2                	lw	s11,28(sp)
     806:	00001517          	auipc	a0,0x1
     80a:	11e50513          	addi	a0,a0,286 # 1924 <ti_2>
     80e:	6161                	addi	sp,sp,80
     810:	8082                	ret
        ri_2[i] = polyR[i];
     812:	00f508b3          	add	a7,a0,a5
     816:	0008a883          	lw	a7,0(a7)
     81a:	00f98633          	add	a2,s3,a5
    for (i = 0; i < size; ++i) {
     81e:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     820:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     824:	00f588b3          	add	a7,a1,a5
     828:	0008a883          	lw	a7,0(a7)
     82c:	00fa8633          	add	a2,s5,a5
     830:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     834:	00f68633          	add	a2,a3,a5
     838:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     83c:	00fb0633          	add	a2,s6,a5
     840:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     844:	0791                	addi	a5,a5,4
     846:	b5ed                	j	730 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     848:	00279693          	slli	a3,a5,0x2
     84c:	96aa                	add	a3,a3,a0
     84e:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     850:	0785                	addi	a5,a5,1
     852:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     854:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     858:	bf09                	j	76a <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
     85a:	00f986b3          	add	a3,s3,a5
     85e:	00fc05b3          	add	a1,s8,a5
     862:	4294                	lw	a3,0(a3)
     864:	418c                	lw	a1,0(a1)
     866:	00fa0633          	add	a2,s4,a5
        for (i = 0; i < N + 1; ++i) {
     86a:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     86c:	8e8d                	sub	a3,a3,a1
     86e:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     870:	0791                	addi	a5,a5,4
     872:	b711                	j	776 <ext_euclid+0xaa>
            qi_1[i] = res1[i];
     874:	00279713          	slli	a4,a5,0x2
     878:	00e506b3          	add	a3,a0,a4
     87c:	4294                	lw	a3,0(a3)
     87e:	975e                	add	a4,a4,s7
        for (i = 0; i < N + 1; ++i) {
     880:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     882:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     884:	b731                	j	790 <ext_euclid+0xc4>
            temp[i] = res2[i];
     886:	00279713          	slli	a4,a5,0x2
     88a:	00e506b3          	add	a3,a0,a4
     88e:	4294                	lw	a3,0(a3)
     890:	9752                	add	a4,a4,s4
        for (i = 0; i < N + 1; ++i) {
     892:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     894:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     896:	bf19                	j	7ac <ext_euclid+0xe0>
            ti[i] = ti_2[i] - temp[i];
     898:	00fd06b3          	add	a3,s10,a5
     89c:	00fa05b3          	add	a1,s4,a5
     8a0:	4294                	lw	a3,0(a3)
     8a2:	418c                	lw	a1,0(a1)
     8a4:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     8a8:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8aa:	8e8d                	sub	a3,a3,a1
     8ac:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ae:	0791                	addi	a5,a5,4
     8b0:	b731                	j	7bc <ext_euclid+0xf0>
            ri_2[i] = ri_1[i];
     8b2:	00fa85b3          	add	a1,s5,a5
     8b6:	4188                	lw	a0,0(a1)
     8b8:	00f98633          	add	a2,s3,a5
        for (i = 0; i < N + 1; ++i) {
     8bc:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     8be:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     8c0:	00fc0633          	add	a2,s8,a5
     8c4:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     8c6:	00fd0533          	add	a0,s10,a5
            ri_1[i] = ri[i];
     8ca:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     8cc:	00fb05b3          	add	a1,s6,a5
     8d0:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     8d4:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     8d6:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     8da:	00fc8533          	add	a0,s9,a5
     8de:	4108                	lw	a0,0(a0)
     8e0:	c188                	sw	a0,0(a1)
              qi_1[i] = 0;
     8e2:	00fb85b3          	add	a1,s7,a5
     8e6:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     8ea:	0791                	addi	a5,a5,4
     8ec:	b5cd                	j	7ce <ext_euclid+0x102>
            if (((ri_2[0] * j) % mod) == 1)
     8ee:	0009a683          	lw	a3,0(s3)
     8f2:	02d786b3          	mul	a3,a5,a3
     8f6:	0296e6b3          	rem	a3,a3,s1
     8fa:	eec681e3          	beq	a3,a2,7dc <ext_euclid+0x110>
        for (j = 0; j < mod; ++j) {
     8fe:	0785                	addi	a5,a5,1
     900:	bde1                	j	7d8 <ext_euclid+0x10c>
            ti_2[i] = (ti_2[i] * j) % mod;
     902:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     904:	0705                	addi	a4,a4,1
     906:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	02d786b3          	mul	a3,a5,a3
     90c:	0296e6b3          	rem	a3,a3,s1
     910:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     914:	bdc1                	j	7e4 <ext_euclid+0x118>

00000916 <generate_keys>:




int* generate_keys(int N, int p, int q){
     916:	7141                	addi	sp,sp,-496
     918:	1e112623          	sw	ra,492(sp)
     91c:	1e812423          	sw	s0,488(sp)
     920:	1e912223          	sw	s1,484(sp)
     924:	1b80                	addi	s0,sp,496
     926:	1f212023          	sw	s2,480(sp)
     92a:	1d312e23          	sw	s3,476(sp)
     92e:	1d412c23          	sw	s4,472(sp)
     932:	1d512a23          	sw	s5,468(sp)
     936:	1d612823          	sw	s6,464(sp)
     93a:	1d712623          	sw	s7,460(sp)
     93e:	1da12023          	sw	s10,448(sp)
     942:	1d812423          	sw	s8,456(sp)
     946:	1d912223          	sw	s9,452(sp)
     94a:	892a                	mv	s2,a0
     94c:	8bae                	mv	s7,a1
     94e:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     950:	4581                	li	a1,0
     952:	0d000613          	li	a2,208
     956:	e2440513          	addi	a0,s0,-476
     95a:	23b9                	jal	ea8 <memset>
     95c:	4485                	li	s1,1
     95e:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     960:	0d800613          	li	a2,216
     964:	4581                	li	a1,0
     966:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	e1342c23          	sw	s3,-488(s0)
     96e:	e0942e23          	sw	s1,-484(s0)
     972:	e2942023          	sw	s1,-480(s0)
     976:	e3342423          	sw	s3,-472(s0)
     97a:	e2942823          	sw	s1,-464(s0)
     97e:	e2942e23          	sw	s1,-452(s0)
     982:	e5342023          	sw	s3,-448(s0)
     986:	e5342223          	sw	s3,-444(s0)
     98a:	e4942623          	sw	s1,-436(s0)
     98e:	e5342a23          	sw	s3,-428(s0)
     992:	e4942e23          	sw	s1,-420(s0)
     996:	e6942023          	sw	s1,-416(s0)
     99a:	e7342623          	sw	s3,-404(s0)
     99e:	e6942a23          	sw	s1,-396(s0)
     9a2:	e8942023          	sw	s1,-384(s0)
     9a6:	e8942223          	sw	s1,-380(s0)
     9aa:	e8942423          	sw	s1,-376(s0)
     9ae:	e9342623          	sw	s3,-372(s0)
     9b2:	e8942a23          	sw	s1,-364(s0)
     9b6:	ea942023          	sw	s1,-352(s0)
     9ba:	ea942223          	sw	s1,-348(s0)
     9be:	ea942423          	sw	s1,-344(s0)
     9c2:	eb342623          	sw	s3,-340(s0)
     9c6:	ea942a23          	sw	s1,-332(s0)
     9ca:	ec942023          	sw	s1,-320(s0)
     9ce:	ec942223          	sw	s1,-316(s0)
     9d2:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9d6:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	21f9                	jal	ea8 <memset>
    int polyR[N+1];
     9dc:	002a9793          	slli	a5,s5,0x2
     9e0:	07bd                	addi	a5,a5,15
     9e2:	9bc1                	andi	a5,a5,-16
     9e4:	40f10133          	sub	sp,sp,a5
     9e8:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9ea:	00291d13          	slli	s10,s2,0x2
     9ee:	01aa07b3          	add	a5,s4,s10
     9f2:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	ef342a23          	sw	s3,-268(s0)
     9f8:	ee942e23          	sw	s1,-260(s0)
     9fc:	f0942023          	sw	s1,-256(s0)
     a00:	f0942423          	sw	s1,-248(s0)
     a04:	f1342a23          	sw	s3,-236(s0)
     a08:	f1342e23          	sw	s3,-228(s0)
     a0c:	f3342023          	sw	s3,-224(s0)
     a10:	f2942423          	sw	s1,-216(s0)
     a14:	f3342823          	sw	s3,-208(s0)
     a18:	f2942c23          	sw	s1,-200(s0)
     a1c:	f4942223          	sw	s1,-188(s0)
     a20:	f5342423          	sw	s3,-184(s0)
     a24:	f4942823          	sw	s1,-176(s0)
     a28:	f4942e23          	sw	s1,-164(s0)
     a2c:	f7342023          	sw	s3,-160(s0)
     a30:	f6942423          	sw	s1,-152(s0)
     a34:	f6942a23          	sw	s1,-140(s0)
     a38:	f7342c23          	sw	s3,-136(s0)
     a3c:	f8942023          	sw	s1,-128(s0)
     a40:	f8942423          	sw	s1,-120(s0)
     a44:	f8942623          	sw	s1,-116(s0)
     a48:	f8942c23          	sw	s1,-104(s0)
     a4c:	f9342e23          	sw	s3,-100(s0)
     a50:	fa942223          	sw	s1,-92(s0)
     a54:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a58:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a5c:	4785                	li	a5,1
     a5e:	1127c163          	blt	a5,s2,b60 <generate_keys+0x24a>
     a62:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a64:	03600693          	li	a3,54
     a68:	10f6d363          	bge	a3,a5,b6e <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a6c:	4781                	li	a5,0
        random_keys[i] = f[i];
     a6e:	00001697          	auipc	a3,0x1
     a72:	04668693          	addi	a3,a3,70 # 1ab4 <random_keys>
    for(i = 0; i < N; ++i){
     a76:	1127ca63          	blt	a5,s2,b8a <generate_keys+0x274>
     a7a:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a7e:	00191993          	slli	s3,s2,0x1
     a82:	87ca                	mv	a5,s2
     a84:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a86:	00001617          	auipc	a2,0x1
     a8a:	02e60613          	addi	a2,a2,46 # 1ab4 <random_keys>
    for(i = N; i < (2*N); ++i){
     a8e:	1137c963          	blt	a5,s3,ba0 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a92:	448d                	li	s1,3
     a94:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a98:	86de                	mv	a3,s7
     a9a:	8656                	mv	a2,s5
     a9c:	e1840593          	addi	a1,s0,-488
     aa0:	8552                	mv	a0,s4
     aa2:	312d                	jal	6cc <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     aa4:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     aa6:	00001697          	auipc	a3,0x1
     aaa:	00e68693          	addi	a3,a3,14 # 1ab4 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     aae:	1097c163          	blt	a5,s1,bb0 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     ab2:	8656                	mv	a2,s5
     ab4:	86da                	mv	a3,s6
     ab6:	e1840593          	addi	a1,s0,-488
     aba:	8552                	mv	a0,s4
     abc:	3901                	jal	6cc <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     abe:	5751                	li	a4,-12
     ac0:	02e90733          	mul	a4,s2,a4
     ac4:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ac6:	00001617          	auipc	a2,0x1
     aca:	fee60613          	addi	a2,a2,-18 # 1ab4 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ace:	0fa4c963          	blt	s1,s10,bc0 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ad2:	4701                	li	a4,0
     ad4:	85ca                	mv	a1,s2
     ad6:	86ca                	mv	a3,s2
     ad8:	8666                	mv	a2,s9
     ada:	3045                	jal	37a <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     adc:	87aa                	mv	a5,a0
     ade:	4701                	li	a4,0
     ae0:	fff98593          	addi	a1,s3,-1
     ae4:	0eb74863          	blt	a4,a1,bd4 <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ae8:	86d6                	mv	a3,s5
     aea:	875a                	mv	a4,s6
     aec:	8652                	mv	a2,s4
     aee:	3acd                	jal	4e0 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     af0:	4795                	li	a5,5
     af2:	02f907b3          	mul	a5,s2,a5
     af6:	098a                	slli	s3,s3,0x2
     af8:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afa:	00001697          	auipc	a3,0x1
     afe:	fba68693          	addi	a3,a3,-70 # 1ab4 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b02:	0991                	addi	s3,s3,4
     b04:	0efc4063          	blt	s8,a5,be4 <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b08:	4699                	li	a3,6
     b0a:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b0c:	00001617          	auipc	a2,0x1
     b10:	fa860613          	addi	a2,a2,-88 # 1ab4 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	02d906b3          	mul	a3,s2,a3
     b18:	02a90933          	mul	s2,s2,a0
     b1c:	0cf6dc63          	bge	a3,a5,bf4 <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b20:	e1040113          	addi	sp,s0,-496
     b24:	1ec12083          	lw	ra,492(sp)
     b28:	1e812403          	lw	s0,488(sp)
     b2c:	1e412483          	lw	s1,484(sp)
     b30:	1e012903          	lw	s2,480(sp)
     b34:	1dc12983          	lw	s3,476(sp)
     b38:	1d812a03          	lw	s4,472(sp)
     b3c:	1d412a83          	lw	s5,468(sp)
     b40:	1d012b03          	lw	s6,464(sp)
     b44:	1cc12b83          	lw	s7,460(sp)
     b48:	1c812c03          	lw	s8,456(sp)
     b4c:	1c412c83          	lw	s9,452(sp)
     b50:	1c012d03          	lw	s10,448(sp)
     b54:	00001517          	auipc	a0,0x1
     b58:	f6050513          	addi	a0,a0,-160 # 1ab4 <random_keys>
     b5c:	617d                	addi	sp,sp,496
     b5e:	8082                	ret
        polyR[i] = 0;
     b60:	00279713          	slli	a4,a5,0x2
     b64:	9752                	add	a4,a4,s4
     b66:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b6a:	0785                	addi	a5,a5,1
     b6c:	bdcd                	j	a5e <generate_keys+0x148>
        f[i] = 0;
     b6e:	00279713          	slli	a4,a5,0x2
     b72:	e1840613          	addi	a2,s0,-488
     b76:	963a                	add	a2,a2,a4
     b78:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b7c:	ef440613          	addi	a2,s0,-268
     b80:	9732                	add	a4,a4,a2
     b82:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b86:	0785                	addi	a5,a5,1
     b88:	b5c5                	j	a68 <generate_keys+0x152>
        random_keys[i] = f[i];
     b8a:	00279713          	slli	a4,a5,0x2
     b8e:	e1840593          	addi	a1,s0,-488
     b92:	00e68633          	add	a2,a3,a4
     b96:	972e                	add	a4,a4,a1
     b98:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b9a:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b9c:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b9e:	bde1                	j	a76 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     ba0:	430c                	lw	a1,0(a4)
     ba2:	00279693          	slli	a3,a5,0x2
     ba6:	96b2                	add	a3,a3,a2
     ba8:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     baa:	0785                	addi	a5,a5,1
     bac:	0711                	addi	a4,a4,4
     bae:	b5c5                	j	a8e <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bb0:	4110                	lw	a2,0(a0)
     bb2:	00279713          	slli	a4,a5,0x2
     bb6:	9736                	add	a4,a4,a3
     bb8:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bba:	0785                	addi	a5,a5,1
     bbc:	0511                	addi	a0,a0,4
     bbe:	bdc5                	j	aae <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bc0:	00249793          	slli	a5,s1,0x2
     bc4:	00f706b3          	add	a3,a4,a5
     bc8:	96aa                	add	a3,a3,a0
     bca:	4294                	lw	a3,0(a3)
     bcc:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bce:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bd0:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bd2:	bdf5                	j	ace <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bd4:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bd6:	0705                	addi	a4,a4,1
     bd8:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bda:	037686b3          	mul	a3,a3,s7
     bde:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     be2:	b709                	j	ae4 <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be4:	ff89a603          	lw	a2,-8(s3)
     be8:	002c1713          	slli	a4,s8,0x2
     bec:	9736                	add	a4,a4,a3
     bee:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bf0:	0c05                	addi	s8,s8,1
     bf2:	bf01                	j	b02 <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
     bf4:	00279713          	slli	a4,a5,0x2
     bf8:	00e605b3          	add	a1,a2,a4
     bfc:	974a                	add	a4,a4,s2
     bfe:	9752                	add	a4,a4,s4
     c00:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c02:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c04:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	bf19                	j	b1c <generate_keys+0x206>

00000c08 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	7115                	addi	sp,sp,-224
     c0a:	cda2                	sw	s0,216(sp)
     c0c:	cba6                	sw	s1,212(sp)
     c0e:	842a                	mv	s0,a0
     c10:	84b2                	mv	s1,a2
     c12:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c18:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	850a                	mv	a0,sp
     c1c:	00000597          	auipc	a1,0x0
     c20:	47c58593          	addi	a1,a1,1148 # 1098 <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	cf86                	sw	ra,220(sp)
     c26:	c7ce                	sw	s3,204(sp)
     c28:	c5d2                	sw	s4,200(sp)
     c2a:	89b6                	mv	s3,a3
     c2c:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2e:	2a71                	jal	dca <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c30:	4781                	li	a5,0
     c32:	874a                	mv	a4,s2
     c34:	03000693          	li	a3,48
     c38:	85a2                	mv	a1,s0
     c3a:	860a                	mv	a2,sp
     c3c:	854e                	mv	a0,s3
     c3e:	d84ff0ef          	jal	ra,1c2 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     c42:	85a6                	mv	a1,s1
     c44:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c48:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c4a:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     c4e:	c44ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c52:	00140693          	addi	a3,s0,1
     c56:	874a                	mv	a4,s2
     c58:	8652                	mv	a2,s4
     c5a:	85a6                	mv	a1,s1
     c5c:	854e                	mv	a0,s3
     c5e:	3049                	jal	4e0 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c60:	478d                	li	a5,3
     c62:	02f40433          	mul	s0,s0,a5
     c66:	87aa                	mv	a5,a0
     c68:	0084ca63          	blt	s1,s0,c7c <ntru_encyrpt+0x74>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c6c:	40fe                	lw	ra,220(sp)
     c6e:	446e                	lw	s0,216(sp)
     c70:	44de                	lw	s1,212(sp)
     c72:	494e                	lw	s2,208(sp)
     c74:	49be                	lw	s3,204(sp)
     c76:	4a2e                	lw	s4,200(sp)
     c78:	612d                	addi	sp,sp,224
     c7a:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c7c:	00249713          	slli	a4,s1,0x2
     c80:	972a                	add	a4,a4,a0
     c82:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c84:	0485                	addi	s1,s1,1
     c86:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c88:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c8c:	bff1                	j	c68 <ntru_encyrpt+0x60>

00000c8e <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8e:	7179                	addi	sp,sp,-48
     c90:	d422                	sw	s0,40(sp)
     c92:	ce4e                	sw	s3,28(sp)
     c94:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c96:	498d                	li	s3,3
     c98:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9c:	d04a                	sw	s2,32(sp)
     c9e:	ca56                	sw	s5,20(sp)
     ca0:	c65e                	sw	s7,12(sp)
     ca2:	8932                	mv	s2,a2
     ca4:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca6:	863e                	mv	a2,a5
     ca8:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	8aae                	mv	s5,a1
     cac:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cae:	85a2                	mv	a1,s0
     cb0:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	d606                	sw	ra,44(sp)
     cb4:	d226                	sw	s1,36(sp)
     cb6:	cc52                	sw	s4,24(sp)
     cb8:	c85a                	sw	s6,16(sp)
     cba:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cbc:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc0:	ebaff0ef          	jal	ra,37a <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cc4:	00140b13          	addi	s6,s0,1
     cc8:	874a                	mv	a4,s2
     cca:	86da                	mv	a3,s6
     ccc:	8652                	mv	a2,s4
     cce:	85a6                	mv	a1,s1
     cd0:	3801                	jal	4e0 <polydiv>
     cd2:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd4:	87aa                	mv	a5,a0
     cd6:	872a                	mv	a4,a0
     cd8:	86a6                	mv	a3,s1
     cda:	0536c263          	blt	a3,s3,d1e <ntru_deceypt+0x90>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cde:	4589                	li	a1,2
     ce0:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     ce4:	4701                	li	a4,0
     ce6:	04874563          	blt	a4,s0,d30 <ntru_deceypt+0xa2>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     cea:	4701                	li	a4,0
     cec:	86a2                	mv	a3,s0
     cee:	85a2                	mv	a1,s0
     cf0:	855e                	mv	a0,s7
     cf2:	e88ff0ef          	jal	ra,37a <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cf6:	8756                	mv	a4,s5
     cf8:	86da                	mv	a3,s6
     cfa:	8652                	mv	a2,s4
     cfc:	85a6                	mv	a1,s1
     cfe:	fe2ff0ef          	jal	ra,4e0 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	87aa                	mv	a5,a0
     d04:	0334cf63          	blt	s1,s3,d42 <ntru_deceypt+0xb4>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d08:	50b2                	lw	ra,44(sp)
     d0a:	5422                	lw	s0,40(sp)
     d0c:	5492                	lw	s1,36(sp)
     d0e:	5902                	lw	s2,32(sp)
     d10:	49f2                	lw	s3,28(sp)
     d12:	4a62                	lw	s4,24(sp)
     d14:	4ad2                	lw	s5,20(sp)
     d16:	4b42                	lw	s6,16(sp)
     d18:	4bb2                	lw	s7,12(sp)
     d1a:	6145                	addi	sp,sp,48
     d1c:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d1e:	00269593          	slli	a1,a3,0x2
     d22:	95b2                	add	a1,a1,a2
     d24:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	0685                	addi	a3,a3,1
     d28:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d2a:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	b775                	j	cda <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
     d30:	4394                	lw	a3,0(a5)
     d32:	00d5d563          	bge	a1,a3,d3c <ntru_deceypt+0xae>
            a2[i] = (-1)*(q-a2[i]);
     d36:	412686b3          	sub	a3,a3,s2
     d3a:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d3c:	0705                	addi	a4,a4,1
     d3e:	0791                	addi	a5,a5,4
     d40:	b75d                	j	ce6 <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
     d42:	00249713          	slli	a4,s1,0x2
     d46:	972a                	add	a4,a4,a0
     d48:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4a:	0485                	addi	s1,s1,1
     d4c:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d4e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	bf4d                	j	d04 <ntru_deceypt+0x76>

00000d54 <default_exc_handler>:
  jal x0, default_exc_handler
     d54:	0000006f          	j	d54 <default_exc_handler>

00000d58 <reset_handler>:
  mv  x1, x0
     d58:	00000093          	li	ra,0
  mv  x2, x1
     d5c:	8106                	mv	sp,ra
  mv  x3, x1
     d5e:	8186                	mv	gp,ra
  mv  x4, x1
     d60:	8206                	mv	tp,ra
  mv  x5, x1
     d62:	8286                	mv	t0,ra
  mv  x6, x1
     d64:	8306                	mv	t1,ra
  mv  x7, x1
     d66:	8386                	mv	t2,ra
  mv  x8, x1
     d68:	8406                	mv	s0,ra
  mv  x9, x1
     d6a:	8486                	mv	s1,ra
  mv x10, x1
     d6c:	8506                	mv	a0,ra
  mv x11, x1
     d6e:	8586                	mv	a1,ra
  mv x12, x1
     d70:	8606                	mv	a2,ra
  mv x13, x1
     d72:	8686                	mv	a3,ra
  mv x14, x1
     d74:	8706                	mv	a4,ra
  mv x15, x1
     d76:	8786                	mv	a5,ra
  mv x16, x1
     d78:	8806                	mv	a6,ra
  mv x17, x1
     d7a:	8886                	mv	a7,ra
  mv x18, x1
     d7c:	8906                	mv	s2,ra
  mv x19, x1
     d7e:	8986                	mv	s3,ra
  mv x20, x1
     d80:	8a06                	mv	s4,ra
  mv x21, x1
     d82:	8a86                	mv	s5,ra
  mv x22, x1
     d84:	8b06                	mv	s6,ra
  mv x23, x1
     d86:	8b86                	mv	s7,ra
  mv x24, x1
     d88:	8c06                	mv	s8,ra
  mv x25, x1
     d8a:	8c86                	mv	s9,ra
  mv x26, x1
     d8c:	8d06                	mv	s10,ra
  mv x27, x1
     d8e:	8d86                	mv	s11,ra
  mv x28, x1
     d90:	8e06                	mv	t3,ra
  mv x29, x1
     d92:	8e86                	mv	t4,ra
  mv x30, x1
     d94:	8f06                	mv	t5,ra
  mv x31, x1
     d96:	8f86                	mv	t6,ra
  la   x2, _stack_start
     d98:	0000f117          	auipc	sp,0xf
     d9c:	26810113          	addi	sp,sp,616 # 10000 <_stack_start>

00000da0 <_start>:
  la x26, _bss_start
     da0:	00000d17          	auipc	s10,0x0
     da4:	47cd0d13          	addi	s10,s10,1148 # 121c <_bss_start>
  la x27, _bss_end
     da8:	00001d97          	auipc	s11,0x1
     dac:	204d8d93          	addi	s11,s11,516 # 1fac <_bss_end>
  bge x26, x27, zero_loop_end
     db0:	01bd5763          	bge	s10,s11,dbe <main_entry>

00000db4 <zero_loop>:
  sw x0, 0(x26)
     db4:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     db8:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dba:	ffaddde3          	bge	s11,s10,db4 <zero_loop>

00000dbe <main_entry>:
  addi x10, x0, 0
     dbe:	00000513          	li	a0,0
  addi x11, x0, 0
     dc2:	00000593          	li	a1,0
  jal x1, main
     dc6:	18a000ef          	jal	ra,f50 <main>

00000dca <memcpy>:
     dca:	00a5c7b3          	xor	a5,a1,a0
     dce:	8b8d                	andi	a5,a5,3
     dd0:	00c508b3          	add	a7,a0,a2
     dd4:	e7a1                	bnez	a5,e1c <memcpy+0x52>
     dd6:	478d                	li	a5,3
     dd8:	04c7f263          	bgeu	a5,a2,e1c <memcpy+0x52>
     ddc:	00357793          	andi	a5,a0,3
     de0:	872a                	mv	a4,a0
     de2:	eba9                	bnez	a5,e34 <memcpy+0x6a>
     de4:	ffc8f613          	andi	a2,a7,-4
     de8:	fe060793          	addi	a5,a2,-32
     dec:	06f76763          	bltu	a4,a5,e5a <memcpy+0x90>
     df0:	02c77363          	bgeu	a4,a2,e16 <memcpy+0x4c>
     df4:	86ae                	mv	a3,a1
     df6:	87ba                	mv	a5,a4
     df8:	0006a803          	lw	a6,0(a3)
     dfc:	0791                	addi	a5,a5,4
     dfe:	0691                	addi	a3,a3,4
     e00:	ff07ae23          	sw	a6,-4(a5)
     e04:	fec7eae3          	bltu	a5,a2,df8 <memcpy+0x2e>
     e08:	fff60793          	addi	a5,a2,-1
     e0c:	8f99                	sub	a5,a5,a4
     e0e:	9bf1                	andi	a5,a5,-4
     e10:	0791                	addi	a5,a5,4
     e12:	973e                	add	a4,a4,a5
     e14:	95be                	add	a1,a1,a5
     e16:	01176663          	bltu	a4,a7,e22 <memcpy+0x58>
     e1a:	8082                	ret
     e1c:	872a                	mv	a4,a0
     e1e:	ff157ee3          	bgeu	a0,a7,e1a <memcpy+0x50>
     e22:	0005c783          	lbu	a5,0(a1)
     e26:	0705                	addi	a4,a4,1
     e28:	0585                	addi	a1,a1,1
     e2a:	fef70fa3          	sb	a5,-1(a4)
     e2e:	ff176ae3          	bltu	a4,a7,e22 <memcpy+0x58>
     e32:	8082                	ret
     e34:	0005c683          	lbu	a3,0(a1)
     e38:	0705                	addi	a4,a4,1
     e3a:	00377793          	andi	a5,a4,3
     e3e:	fed70fa3          	sb	a3,-1(a4)
     e42:	0585                	addi	a1,a1,1
     e44:	d3c5                	beqz	a5,de4 <memcpy+0x1a>
     e46:	0005c683          	lbu	a3,0(a1)
     e4a:	0705                	addi	a4,a4,1
     e4c:	00377793          	andi	a5,a4,3
     e50:	fed70fa3          	sb	a3,-1(a4)
     e54:	0585                	addi	a1,a1,1
     e56:	fff9                	bnez	a5,e34 <memcpy+0x6a>
     e58:	b771                	j	de4 <memcpy+0x1a>
     e5a:	41d4                	lw	a3,4(a1)
     e5c:	0005a283          	lw	t0,0(a1)
     e60:	0085af83          	lw	t6,8(a1)
     e64:	00c5af03          	lw	t5,12(a1)
     e68:	0105ae83          	lw	t4,16(a1)
     e6c:	0145ae03          	lw	t3,20(a1)
     e70:	0185a303          	lw	t1,24(a1)
     e74:	01c5a803          	lw	a6,28(a1)
     e78:	c354                	sw	a3,4(a4)
     e7a:	5194                	lw	a3,32(a1)
     e7c:	00572023          	sw	t0,0(a4)
     e80:	01f72423          	sw	t6,8(a4)
     e84:	01e72623          	sw	t5,12(a4)
     e88:	01d72823          	sw	t4,16(a4)
     e8c:	01c72a23          	sw	t3,20(a4)
     e90:	00672c23          	sw	t1,24(a4)
     e94:	01072e23          	sw	a6,28(a4)
     e98:	d314                	sw	a3,32(a4)
     e9a:	02470713          	addi	a4,a4,36
     e9e:	02458593          	addi	a1,a1,36
     ea2:	faf76ce3          	bltu	a4,a5,e5a <memcpy+0x90>
     ea6:	b7a9                	j	df0 <memcpy+0x26>

00000ea8 <memset>:
     ea8:	433d                	li	t1,15
     eaa:	872a                	mv	a4,a0
     eac:	02c37363          	bgeu	t1,a2,ed2 <memset+0x2a>
     eb0:	00f77793          	andi	a5,a4,15
     eb4:	efbd                	bnez	a5,f32 <memset+0x8a>
     eb6:	e5ad                	bnez	a1,f20 <memset+0x78>
     eb8:	ff067693          	andi	a3,a2,-16
     ebc:	8a3d                	andi	a2,a2,15
     ebe:	96ba                	add	a3,a3,a4
     ec0:	c30c                	sw	a1,0(a4)
     ec2:	c34c                	sw	a1,4(a4)
     ec4:	c70c                	sw	a1,8(a4)
     ec6:	c74c                	sw	a1,12(a4)
     ec8:	0741                	addi	a4,a4,16
     eca:	fed76be3          	bltu	a4,a3,ec0 <memset+0x18>
     ece:	e211                	bnez	a2,ed2 <memset+0x2a>
     ed0:	8082                	ret
     ed2:	40c306b3          	sub	a3,t1,a2
     ed6:	068a                	slli	a3,a3,0x2
     ed8:	00000297          	auipc	t0,0x0
     edc:	9696                	add	a3,a3,t0
     ede:	00a68067          	jr	10(a3)
     ee2:	00b70723          	sb	a1,14(a4)
     ee6:	00b706a3          	sb	a1,13(a4)
     eea:	00b70623          	sb	a1,12(a4)
     eee:	00b705a3          	sb	a1,11(a4)
     ef2:	00b70523          	sb	a1,10(a4)
     ef6:	00b704a3          	sb	a1,9(a4)
     efa:	00b70423          	sb	a1,8(a4)
     efe:	00b703a3          	sb	a1,7(a4)
     f02:	00b70323          	sb	a1,6(a4)
     f06:	00b702a3          	sb	a1,5(a4)
     f0a:	00b70223          	sb	a1,4(a4)
     f0e:	00b701a3          	sb	a1,3(a4)
     f12:	00b70123          	sb	a1,2(a4)
     f16:	00b700a3          	sb	a1,1(a4)
     f1a:	00b70023          	sb	a1,0(a4)
     f1e:	8082                	ret
     f20:	0ff5f593          	andi	a1,a1,255
     f24:	00859693          	slli	a3,a1,0x8
     f28:	8dd5                	or	a1,a1,a3
     f2a:	01059693          	slli	a3,a1,0x10
     f2e:	8dd5                	or	a1,a1,a3
     f30:	b761                	j	eb8 <memset+0x10>
     f32:	00279693          	slli	a3,a5,0x2
     f36:	00000297          	auipc	t0,0x0
     f3a:	9696                	add	a3,a3,t0
     f3c:	8286                	mv	t0,ra
     f3e:	fa8680e7          	jalr	-88(a3)
     f42:	8096                	mv	ra,t0
     f44:	17c1                	addi	a5,a5,-16
     f46:	8f1d                	sub	a4,a4,a5
     f48:	963e                	add	a2,a2,a5
     f4a:	f8c374e3          	bgeu	t1,a2,ed2 <memset+0x2a>
     f4e:	b7a5                	j	eb6 <memset+0xe>

00000f50 <main>:


int main(){
     f50:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f54:	0c000613          	li	a2,192
     f58:	00000597          	auipc	a1,0x0
     f5c:	20058593          	addi	a1,a1,512 # 1158 <__DTOR_END__+0xc0>
     f60:	0068                	addi	a0,sp,12
int main(){
     f62:	42112623          	sw	ra,1068(sp)
     f66:	42812423          	sw	s0,1064(sp)
     f6a:	42912223          	sw	s1,1060(sp)
     f6e:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f72:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f76:	3d91                	jal	dca <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f78:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f7c:	00000417          	auipc	s0,0x0
     f80:	29c40413          	addi	s0,s0,668 # 1218 <_edata>
    keys = generate_keys(N, p, q);
     f84:	06500613          	li	a2,101
     f88:	458d                	li	a1,3
     f8a:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     f8e:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     f90:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     f94:	3249                	jal	916 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     f96:	4781                	li	a5,0
     f98:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f9a:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f9e:	00f506b3          	add	a3,a0,a5
     fa2:	4290                	lw	a2,0(a3)
     fa4:	1314                	addi	a3,sp,416
     fa6:	96be                	add	a3,a3,a5
     fa8:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     faa:	0791                	addi	a5,a5,4
     fac:	fee799e3          	bne	a5,a4,f9e <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fb0:	1cd8                	addi	a4,sp,628
     fb2:	1a850793          	addi	a5,a0,424
     fb6:	27c50693          	addi	a3,a0,636
     fba:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	4390                	lw	a2,0(a5)
     fbe:	0791                	addi	a5,a5,4
     fc0:	0711                	addi	a4,a4,4
     fc2:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fc6:	fed79be3          	bne	a5,a3,fbc <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fca:	01f8                	addi	a4,sp,204
     fcc:	35050793          	addi	a5,a0,848
     fd0:	42450613          	addi	a2,a0,1060
     fd4:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     fd6:	438c                	lw	a1,0(a5)
     fd8:	0791                	addi	a5,a5,4
     fda:	0711                	addi	a4,a4,4
     fdc:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     fe0:	fec79be3          	bne	a5,a2,fd6 <main+0x86>
     fe4:	06b0                	addi	a2,sp,840
     fe6:	4fc50513          	addi	a0,a0,1276
     fea:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     fec:	4398                	lw	a4,0(a5)
     fee:	0791                	addi	a5,a5,4
     ff0:	0611                	addi	a2,a2,4
     ff2:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     ff6:	fea79be3          	bne	a5,a0,fec <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
     ffa:	bbbbc4b7          	lui	s1,0xbbbbc
     ffe:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1002:	8742                	mv	a4,a6
    1004:	0070                	addi	a2,sp,12
    1006:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    100a:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100e:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    1012:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1014:	3ed5                	jal	c08 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    1016:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    1018:	ccccd4b7          	lui	s1,0xccccd
    101c:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    1022:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1024:	458d                	li	a1,3
    1026:	874a                	mv	a4,s2
    1028:	34810813          	addi	a6,sp,840
    102c:	1314                	addi	a3,sp,416
    102e:	06500613          	li	a2,101
    1032:	03500513          	li	a0,53
    1036:	39a1                	jal	c8e <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    1038:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    103c:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    1040:	c004                	sw	s1,0(s0)
    1042:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    1044:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    1048:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    104c:	0070                	addi	a2,sp,12
    104e:	00f506b3          	add	a3,a0,a5
    1052:	963e                	add	a2,a2,a5
    1054:	4210                	lw	a2,0(a2)
    1056:	4294                	lw	a3,0(a3)
    1058:	02d60363          	beq	a2,a3,107e <main+0x12e>
            resultkon[0] = 0xBABABABA;
    105c:	babac7b7          	lui	a5,0xbabac
    1060:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1064:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    1066:	42c12083          	lw	ra,1068(sp)
    106a:	42812403          	lw	s0,1064(sp)
    106e:	42412483          	lw	s1,1060(sp)
    1072:	42012903          	lw	s2,1056(sp)
    1076:	4501                	li	a0,0
    1078:	43010113          	addi	sp,sp,1072
    107c:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    107e:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    1080:	0791                	addi	a5,a5,4
    1082:	fcb795e3          	bne	a5,a1,104c <main+0xfc>
    1086:	b7c5                	j	1066 <main+0x116>

00001088 <__CTOR_LIST__>:
	...

00001090 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00001098 <.rodata>:
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	ffff                	0xffff
    109e:	ffff                	0xffff
    10a0:	0000                	unimp
    10a2:	0000                	unimp
    10a4:	0001                	nop
    10a6:	0000                	unimp
    10a8:	ffff                	0xffff
    10aa:	ffff                	0xffff
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	ffff                	0xffff
    10b2:	ffff                	0xffff
    10b4:	0000                	unimp
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	0000                	unimp
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0001                	nop
    10d2:	0000                	unimp
    10d4:	0000                	unimp
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	0000                	unimp
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	ffff                	0xffff
    10ee:	ffff                	0xffff
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0000                	unimp
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0000                	unimp
    1102:	0000                	unimp
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	ffff                	0xffff
    1112:	ffff                	0xffff
    1114:	0000                	unimp
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	ffff                	0xffff
    111e:	ffff                	0xffff
    1120:	0000                	unimp
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	ffff                	0xffff
    112a:	ffff                	0xffff
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	ffff                	0xffff
    1132:	ffff                	0xffff
    1134:	0000                	unimp
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	0000                	unimp
    1142:	0000                	unimp
    1144:	ffff                	0xffff
    1146:	ffff                	0xffff
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	ffff                	0xffff
    114e:	ffff                	0xffff
    1150:	0001                	nop
    1152:	0000                	unimp
    1154:	0000                	unimp
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0002                	c.slli64	zero
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0002                	c.slli64	zero
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0000                	unimp
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0002                	c.slli64	zero
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0000                	unimp
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0002                	c.slli64	zero
    119e:	0000                	unimp
    11a0:	0000                	unimp
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0000                	unimp
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0000                	unimp
    11c2:	0000                	unimp
    11c4:	0002                	c.slli64	zero
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0002                	c.slli64	zero
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0000                	unimp
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0002                	c.slli64	zero
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0002                	c.slli64	zero
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0002                	c.slli64	zero
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001218 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1218:	bebe                	fsd	fa5,376(sp)
    121a:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

0000121c <_bss_start>:
	...

00001474 <product2>:
	...

000016cc <result>:
	...

00001924 <ti_2>:
	...

00001ab4 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1c31                	addi	s8,s8,-20
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05e1                	addi	a1,a1,24
       e:	0000                	unimp
      10:	7b0c                	flw	fa1,48(a4)
      12:	0e000003          	lb	zero,224(zero) # e0 <array_add+0x4e>
      16:	68000003          	lb	zero,1664(zero) # 680 <polydiv+0x1a0>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
      2c:	0102                	c.slli64	sp
      2e:	6508                	flw	fa0,8(a0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0486                	slli	s1,s1,0x1
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002cb07          	flq	fs6,0(t0) # f36 <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	c804                	sw	s1,16(s0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0000034f          	fnmadd.s	ft6,ft0,ft0,ft0,rne
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	1906                	slli	s2,s2,0x21
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	5906                	lw	s2,96(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	7706                	flw	fa4,96(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0308                	addi	a0,sp,384
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0000022f          	0x22f
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x11a>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	00000543          	fmadd.s	fa0,ft0,ft0,ft0,rne
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	5d07a403          	lw	s0,1488(a5)
            a1[length-2] = a1[length-2] + a2[length-2];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	4b0c                	lw	a1,16(a4)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
} //end of function
      f8:	00a8                	addi	a0,sp,72
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0004                	0x4
    asm volatile(
      fe:	b606                	fsd	ft1,296(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
            for (i = 0; i < (length / 3); i++) {
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	b406                	fsd	ft1,40(sp)
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	4906                	lw	s2,64(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
    asm volatile(
     122:	0000                	unimp
     124:	e706                	fsw	ft1,140(sp)
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
            for (i = 0; i < ((length-2) / 3); i++) {
     12e:	0000                	unimp
    asm volatile(
     130:	f80e                	fsw	ft3,48(sp)
     132:	0001                	nop
}
     134:	1800                	addi	s0,sp,48
    switch(length%3) {
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	000004d7          	0x4d7
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
     14a:	006b5f0f          	0x6b5f0f
    asm volatile(
     14e:	3704                	fld	fs1,40(a4)
            for (i = 0; i < (length / 3); i++) {
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	1f0c                	addi	a1,sp,944
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    asm volatile(
     160:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     162:	0c08                	addi	a0,sp,528
     164:	01e1                	addi	gp,gp,24
            a1[length-1] = a1[length-1] % mod;
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	550c                	lw	a1,40(a0)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
            a1[length-1] = a1[length-1] % mod;
     188:	0014                	0x14
            a1[length-2] = a1[length-2] % mod;
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
} //end of function
     196:	0001                	nop
    asm volatile(
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	1f0e                	slli	t5,t5,0x23
            for (i = 0; i < (length / 3); i++) {
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
    asm volatile(
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <array_mod+0x78>
            for (i = 0; i < ((length-1) / 3); i++) {
     1b2:	3e04                	fld	fs1,56(a2)
    asm volatile(
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	680c                	flw	fa1,16(s0)
     1bc:	0005                	c.nop	1
            for (i = 0; i < ((length-2) / 3); i++) {
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c8:	012c                	addi	a1,sp,136
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	f30c                	fsw	fa1,32(a4)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	000003e3          	beqz	zero,9e8 <generate_keys+0xd2>
     1e6:	4204                	lw	s1,0(a2)
    int line[size_b][size_a + size_b];
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	a50c                	fsd	fa1,8(a0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1f8:	0000                	unimp
    int polb[size_b];
     1fa:	0c14                	addi	a3,sp,528
     1fc:	065a                	slli	a2,a2,0x16
     1fe:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
    int line[size_b][size_a + size_b];
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
    int pola[size_a];
     208:	900c                	0x900c
     20a:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     20c:	0400                	addi	s0,sp,512
            product[j] = 0;
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
    int line[size_b][size_a + size_b];
     216:	06b5                	addi	a3,a3,13
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
    int pola[size_a];
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	0000013b          	0x13b
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
    int polb[size_b];
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
     232:	000001c7          	fmsub.s	ft3,ft0,ft0,ft0,rne
    for (i = 0; i < size_b; ++i){
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
    for (i = 0; i < size_a; ++i){
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
    array_mod(pola,mod,size_a);
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	059d                	addi	a1,a1,7
    for (i = 0; i < size_b; ++i){
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
    array_mod(polb,mod,size_b);
     258:	1201                	addi	tp,tp,-32
     25a:	016a                	slli	sp,sp,0x1a
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
    if(star_mult == 1){
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
        for (j = size_b -1; j >= 0; j = j-1){
     274:	0000                	unimp
     276:	001f fc11 0003      	0x3fc11001f
            product[j] = 0;
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
            line[i][j] = 0;
     282:	000002bb          	0x2bb
            product[j] = 0;
     286:	d70c                	sw	a1,40(a4)
     288:	0004                	0x4
        for(j = 0; j < size_a + size_b -1; ++j){
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0xee>
     290:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     292:	0c00                	addi	s0,sp,528
     294:	000004ef          	jal	s1,294 <polymult+0xd2>
     298:	6404                	flw	fs1,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
        pola[i] = a[i];
     29e:	0400                	addi	s0,sp,512
     2a0:	dc0c                	sw	a1,56(s0)
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
    for (i = 0; i < size_a; ++i){
     2aa:	0000                	unimp
        pola[i] = a[i];
     2ac:	0c08                	addi	a0,sp,528
    for (i = 0; i < size_a; ++i){
     2ae:	0000013b          	0x13b
        polb[i] = b[i];
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     2bc:	7804                	flw	fs1,48(s0)
        polb[i] = b[i];
     2be:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     2c0:	0900                	addi	s0,sp,144
    if(star_mult == 1){
     2c2:	02d1                	addi	t0,t0,20
        for (j = size_b -1; j >= 0; j = j-1){
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
            for (k = size_a-1; k >= 0; k = k-1 ){
     2c8:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2ce:	1f00                	addi	s0,sp,944
            array_add(product,line[i],size_a+size_b-1);
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
     2d8:	9a0e                	add	s4,s4,gp
        for(i = 0; i < size_b; ++i){
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
    array_mod(product,mod,(size_a+size_b-1));
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_add+0x2e>
     2e6:	0126                	slli	sp,sp,0x9
     2e8:	0000                	unimp
}
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	c10e                	sw	gp,128(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
                line[size_b-1-j][k] = pola[k]*polb[j];
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
            for (k = size_a-1; k >= 0; k = k-1 ){
     32c:	775f 0400 07bd      	0x7bd0400775f
        for (j = size_b -1; j >= 0; j = j-1){
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	00000163          	beqz	zero,33a <polymult+0x178>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
     344:	5e0c                	lw	a1,56(a2)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
     352:	625f 0066 c004      	0xc0040066625f
        for (j = size_b -1; j >= 0; j = j-1){
     358:	d811                	beqz	s0,26c <polymult+0xaa>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	980c                	0x980c
        array_mod(line[i],mod,(size_a+size_b-1));
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    for (i = 0; i < size_b; ++i){
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0149                	addi	sp,sp,18
            array_add(product,line[i],size_a+size_b-1);
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
        for(i = 0; i < size_b; ++i){
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	0f0c                	addi	a1,sp,912
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
    int line[size_b][size_a + size_b];
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	039e                	slli	t2,t2,0x7
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
    int line[size_b][size_a + size_b];
     38c:	f71d                	bnez	a4,2ba <polymult+0xf8>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	530c                	lw	a1,32(a4)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	000006cf          	fnmadd.s	fa3,ft0,ft0,ft0,rne
     3a4:	d004                	sw	s1,32(s0)
    int pola[size_a];
     3a6:	3509                	jal	1a8 <array_mod+0x72>
     3a8:	0006                	c.slli	zero,0x1
    int line[size_b][size_a + size_b];
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
    int pola[size_a];
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
    int line[size_b][size_a + size_b];
     3ba:	755f 0070 d404      	0xd4040070755f
    int polb[size_b];
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x6>
    int pola[size_a];
     3c6:	72755f0f          	0x72755f0f
    int polb[size_b];
     3ca:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     3cc:	07d5                	addi	a5,a5,21
    int polb[size_b];
     3ce:	005d                	c.nop	23
    for (i = 0; i < size_b; ++i){
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0120                	addi	s0,sp,136
            product2[j] = 0;
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_add+0x5c>
     3dc:	0006                	c.slli	zero,0x1
    for (i = 0; i < size_b; ++i){
     3de:	4000                	lw	s0,0(s0)
     3e0:	9a0c                	0x9a0c
    for(i = 0; i < size_a; ++i){
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
    for(i = 0; i < size_b; ++i){
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
    if(star_mult == 1){
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x146>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	790c                	flw	fa1,48(a0)
     3fc:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
            product2[j] = 0;
     406:	0c4c                	addi	a1,sp,532
     408:	01a0                	addi	s0,sp,200
     40a:	0000                	unimp
            line[i][j] = 0;
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
            product2[j] = 0;
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x56>
    for (i = 0; i < size_b; ++i){
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0375                	addi	t1,t1,29
        for(j = 0; j < size_a + size_b -1; ++j){
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
        pola[i] = a[i];
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	c90c                	sw	a1,16(a0)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
    for(i = 0; i < size_a; ++i){
     436:	00fe                	slli	ra,ra,0x1f
        pola[i] = a[i];
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
    for(i = 0; i < size_a; ++i){
     43c:	04a1                	addi	s1,s1,8
        polb[i] = b[i];
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
    for(i = 0; i < size_b; ++i){
     44c:	0000                	unimp
        polb[i] = b[i];
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    for(i = 0; i < size_b; ++i){
     452:	6715                	lui	a4,0x5
                line[size_b-1-j][k] = pola[k]*polb[j];
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <array_mod+0x5a>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
            for (k = size_a-1; k >= 0; k = k-1 ){
     464:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (j = size_b -1; j >= 0; j = j-1){
     472:	00052717          	auipc	a4,0x52
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     47a:	0265                	addi	tp,tp,25
        array_add(product2,line[i],size_a+size_b-1);
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	047f                	0x47f
    for(i=0;i<size_b;++i){
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
}
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0172                	slli	sp,sp,0x1c
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	0240                	addi	s0,sp,260
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
            for (k = size_a-1; k >= 0; k = k-1 ){
     4aa:	1808                	addi	a0,sp,48
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ac:	01f0                	addi	a2,sp,204
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
     4ba:	04ea                	slli	s1,s1,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
     4bc:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
        for (j = size_b -1; j >= 0; j = j-1){
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
        array_add(product2,line[i],size_a+size_b-1);
     4d4:	1814                	addi	a3,sp,48
     4d6:	0506                	slli	a0,a0,0x1
     4d8:	0000                	unimp
    for(i=0;i<size_b;++i){
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
    int v[size_N];
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e4:	04f4                	addi	a3,sp,588
    int v[size_N];
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
     4f2:	040e                	slli	s0,s0,0x3
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
     500:	04fc                	addi	a5,sp,588
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
    int v[size_N];
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
    int q[size_N];
     50c:	183c                	addi	a5,sp,56
     50e:	0300                	addi	s0,sp,384
     510:	0000                	unimp
    int num_temp[size_N];
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
    int denum_temp[size_D];
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0215                	addi	tp,tp,5
    int num_temp[size_N];
     51e:	0000                	unimp
    int denum_temp[size_D];
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06e9                	addi	a3,a3,26
    int v[size_N];
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
    int denum_temp[size_D];
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     536:	1848                	addi	a0,sp,52
     538:	0435                	addi	s0,s0,13
     53a:	0000                	unimp
    array_mod(num_temp, mod, size_N);
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    for (i = 0; i < size_D; ++i) {
     544:	184c                	addi	a1,sp,52
     546:	0248                	addi	a0,sp,260
     548:	0000                	unimp
    array_mod(denum_temp,mod,size_D);
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     552:	1850                	addi	a2,sp,52
     554:	0198                	addi	a4,sp,192
     556:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
     562:	0478                	addi	a4,sp,524
    for (i = 0; i < size_N; ++i){
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
        if ( (b_N*u)%mod == 1 )
     568:	0702                	c.slli64	a4
    for (u = 0; u < mod; ++u){
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03fc                	addi	a5,sp,460
        num_temp[i] = num[i];
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
    for (i = 0; i < size_N; ++i){
     57e:	de19                	beqz	a2,49c <polymult2+0x122>
        num_temp[i] = num[i];
     580:	0002                	c.slli64	zero
    for (i = 0; i < size_N; ++i){
     582:	0400                	addi	s0,sp,512
        denum_temp[i] = denum[i];
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	0690                	addi	a2,sp,832
    for (i = 0; i < size_D; ++i) {
     590:	0000                	unimp
        denum_temp[i] = denum[i];
     592:	ad04                	fsd	fs1,24(a0)
    for (i = 0; i < size_D; ++i) {
     594:	0c02                	c.slli64	s8
        q[i] = 0;
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	5119                	li	sp,-26
        v[i] = 0;
     59e:	0001                	nop
        q[i] = 0;
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
        v[i] = 0;
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
    for (i = 0; i < size_N; ++i){
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
        if( denum_temp[i] != 0 )
     5ac:	0136                	slli	sp,sp,0xd
    for (i = size_D-1; i >= 0; i = i-1){
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
        if ( (b_N*u)%mod == 1 )
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
    for (u = 0; u < mod; ++u){
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
        if( num_temp[i] != 0 )
     5c0:	0200                	addi	s0,sp,256
    for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0801                	addi	a6,a6,0
     5c4:	046e                	slli	s0,s0,0x1b
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
    while (d >= d2){
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
    for(i = 0; i < size_N; ++i){
     5d4:	009c                	addi	a5,sp,64
        result[i] = q[i];
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
    for(i = 0; i < size_N; ++i){
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
    for(i = size_N; i < (2*size_N); ++i){
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
        result[i] = num_temp[i-size_N];
     5e6:	f115                	bnez	a0,50a <polydiv+0x2a>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
    for(i = size_N; i < (2*size_N); ++i){
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
}
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
        v[(d-d2)] = u*r_d;
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
        array_mod(v, mod, size_N);
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
        v[(d-d2)] = u*r_d;
     62e:	1500                	addi	s0,sp,672
        array_mod(v, mod, size_N);
     630:	010a                	slli	sp,sp,0x2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
         array_mod(product, mod, size_N);
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     644:	690a                	flw	fs2,128(sp)
         array_mod(product, mod, size_N);
     646:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
         array_mod(num_temp, mod, size_N);
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
        array_add(q, v, size_N);
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
     65c:	000004af          	0x4af
        array_mod(q, mod, size_N);
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     668:	641a                	flw	fs0,132(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	d718                	sw	a4,40(a4)
     678:	0004                	0x4
            num_temp[i] = num_temp[i] - product[i];
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x16c>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     684:	a418                	fsd	fa4,8(s0)
     686:	0002                	c.slli64	zero
            num_temp[i] = num_temp[i] - product[i];
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
        for (i = 0; i < size_N; ++i){
     68e:	0000                	unimp
            if( num_temp[i] != 0 )
     690:	0400                	addi	s0,sp,512
        for (i = size_N-1; i >= 0; i = i-1){
     692:	a918                	fsd	fa4,16(a0)
     694:	0004                	0x4
            v[i] = 0;
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
        for (i = 0; i < size_N; ++i){
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
        result[i] = q[i];
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
    for(i = 0; i < size_N; ++i){
     6b4:	0144                	addi	s1,sp,132
        result[i] = q[i];
     6b6:	e608                	fsw	fa0,8(a2)
    for(i = 0; i < size_N; ++i){
     6b8:	0006                	c.slli	zero,0x1
        result[i] = num_temp[i-size_N];
     6ba:	1800                	addi	s0,sp,48
     6bc:	0538                	addi	a4,sp,648
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	0532                	slli	a0,a0,0xc
    int ri_2[size]; // MX-ring poly, a
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	1201                	addi	tp,tp,-32
    int ri_2[size]; // MX-ring poly, a
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000003f 12014704 	0x120147040000003f
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    int ri_2[size]; // MX-ring poly, a
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
    int ri[size];
     700:	4318                	lw	a4,0(a4)
     702:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ti[size];
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	9018                	0x9018
    int qi_1[size];
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
    int temp[size];
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	0400                	addi	s0,sp,512
     71c:	f318                	fsw	fa4,32(a4)
    int ri_2[size]; // MX-ring poly, a
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
    int temp[size];
     722:	0289                	addi	t0,t0,2
    for (i = 0; i < size; ++i) {
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
        ti_2[i] = 0;
     728:	0800                	addi	s0,sp,16
     72a:	c018                	sw	a4,0(s0)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
    for (i = 0; i < size; ++i) {
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
    ti_1[0] = 1;
     736:	2400                	fld	fs0,8(s0)
     738:	0018                	0x18
        for (i = N + 1; i < (2 * N + 2); ++i) {
     73a:	0002                	c.slli64	zero
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
            ti[i] = ti_2[i] - temp[i];
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	d218                	sw	a4,32(a2)
     748:	0004                	0x4
    array_mod(ri_2,mod,size);
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
    array_mod(ri_1,mod,size);
     752:	5000                	lw	s0,32(s0)
     754:	d618                	sw	a4,40(a2)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	dd18                	sw	a4,56(a0)
     764:	0004                	0x4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	db18                	sw	a4,48(a4)
     772:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
    array_mod(temp,mod,size);
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	8018                	0x8018
        for (i = 0; i < N + 1; ++i) {
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
    array_mod(qi_1,mod,size);
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	e718                	fsw	fa4,8(a4)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	c118                	sw	a4,0(a0)
        for (i = 0; i < N + 1; ++i) {
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
    array_mod(temp,mod,size);
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	b918                	fsd	fa4,48(a0)
        for (i = 0; i < N + 1; ++i) {
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
    array_mod(ti,mod,size);
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c8:	0400                	addi	s0,sp,512
        controlR = 0;
     7ca:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
    while (controlR != 0) {
     7d2:	a818                	fsd	fa4,16(s0)
        for (j = 0; j < mod; ++j) {
     7d4:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
     7e2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
    }
     7ea:	0000                	unimp
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	7d18                	flw	fa4,56(a0)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
        ri_2[i] = polyR[i];
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
    for (i = 0; i < size; ++i) {
     81e:	0000                	unimp
        ri_2[i] = polyR[i];
     820:	0000082b          	0x82b
        ri_1[i] = polyf[i];
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
        ti_2[i] = 0;
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
        ti_1[i] = 0;
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
    for (i = 0; i < size; ++i) {
     844:	1800                	addi	s0,sp,48
     846:	03d4                	addi	a3,sp,452
            ri[i - (N + 1)] = res[i];
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
        for (i = N + 1; i < (2 * N + 2); ++i) {
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
            ri[i - (N + 1)] = res[i];
     854:	000003bf 1802a204 	0x1802a204000003bf
            temp[i] = ri_2[i] - ri[i];
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x54>
     868:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     86a:	0a00                	addi	s0,sp,272
            temp[i] = ri_2[i] - ri[i];
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
            qi_1[i] = res1[i];
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     880:	001d                	c.nop	7
            qi_1[i] = res1[i];
     882:	f01c                	fsw	fa5,32(s0)
        for (i = 0; i < N + 1; ++i) {
     884:	8304                	0x8304
            temp[i] = res2[i];
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	271d                	jal	fb2 <main+0x62>
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     892:	029a                	slli	t0,t0,0x6
            temp[i] = res2[i];
     894:	0006f60b          	0x6f60b
            ti[i] = ti_2[i] - temp[i];
     898:	1d00                	addi	s0,sp,688
     89a:	06a0                	addi	s0,sp,840
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     8a8:	05c1                	addi	a1,a1,16
            ti[i] = ti_2[i] - temp[i];
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8b0:	690a                	flw	fs2,128(sp)
            ri_2[i] = ri_1[i];
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
     8ba:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8bc:	0410                	addi	a2,sp,512
            ri_2[i] = ri_1[i];
     8be:	000008b7          	lui	a7,0x0
            ri_1[i] = ri[i];
     8c2:	cd1f 0008 1500      	0x15000008cd1f
            ti_2[i] = ti_1[i];
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
            controlR += ri[i];
     8d4:	8a04                	0x8a04
            ti_2[i] = ti_1[i];
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
            ti_1[i] = ti[i];
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
              qi_1[i] = 0;
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
            if (((ri_2[0] * j) % mod) == 1)
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     8fe:	0002                	c.slli64	zero
     900:	d520                	sw	s0,104(a0)
            ti_2[i] = (ti_2[i] * j) % mod;
     902:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
            ti_2[i] = (ti_2[i] * j) % mod;
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05ce                	slli	a1,a1,0x13
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
        for (i = 0; i < N + 1; ++i) {
     914:	046d1d03          	lh	s10,70(s10)
int* generate_keys(int N, int p, int q){
     918:	0000                	unimp
     91a:	0421                	addi	s0,s0,8
     91c:	0004                	0x4
     91e:	0600                	addi	s0,sp,768
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	8222                	mv	tp,s0
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	121c                	addi	a5,sp,288
     946:	0000                	unimp
     948:	8a22                	mv	s4,s0
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1474                	addi	a3,sp,556
     958:	0000                	unimp
     95a:	0122                	slli	sp,sp,0x8
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	16cc                	addi	a1,sp,868
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	60220063          	beq	tp,sp,f7a <main+0x2a>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1924                	addi	s1,sp,184
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ab403          	0x1ab403
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	3624                	fld	fs1,104(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1218                	addi	a4,sp,288
    int polyR[N+1];
     9d6:	0000                	unimp
     9d8:	ee25                	bnez	a2,a50 <generate_keys+0x13a>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	0006                	c.slli	zero,0x1
    int polyR[N+1];
     9dc:	0100                	addi	s0,sp,128
     9de:	02c6                	slli	t0,t0,0x11
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	5000                	lw	s0,32(s0)
     9e6:	3800000f          	0x3800000f
    polyR[N] = 1;
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	0420                	addi	s0,sp,520
     9f6:	0000                	unimp
     9f8:	c701                	beqz	a4,a00 <generate_keys+0xea>
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xfc>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02c8                	addi	a0,sp,324
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	035f 0000 c901      	0xc9010000035f
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x11e>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02ca                	slli	t0,t0,0x12
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	5d0902cb          	0x5d0902cb
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02cc                	addi	a1,sp,324
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	db28                	sw	a0,112(a4)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	02ce                	slli	t0,t0,0x13
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
    polyR[0] = -1;
     a58:	dc91                	beqz	s1,974 <generate_keys+0x5e>
     a5a:	05712677          	0x5712677
    for(i = 1; i < N; ++i){
     a5e:	0000                	unimp
     a60:	cf01                	beqz	a4,a78 <generate_keys+0x162>
     a62:	0902                	c.slli64	s2
    for (i = N; i < 55; ++i ){
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
    for(i = 0; i < N; ++i){
     a6c:	b826                	fsd	fs1,48(sp)
        random_keys[i] = f[i];
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
     a72:	02d0                	addi	a2,sp,324
     a74:	8b09                	andi	a4,a4,2
    for(i = 0; i < N; ++i){
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
    for(i = N; i < (2*N); ++i){
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
     a82:	d101                	beqz	a0,982 <generate_keys+0x6c>
     a84:	0902                	c.slli64	s2
        random_keys[i] = g[i-N];
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	a626                	fsd	fs1,264(sp)
     a8c:	0005                	c.nop	1
    for(i = N; i < (2*N); ++i){
     a8e:	0100                	addi	s0,sp,128
     a90:	02d2                	slli	t0,t0,0x14
    for(i = (2*N); i < (3*N); ++i){
     a92:	af09                	j	11a4 <__DTOR_END__+0x10c>
     a94:	1200000b          	0x1200000b
    fp = ext_euclid(polyR, f, (N+1), p);
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0250                	addi	a2,sp,260
     a9e:	0000                	unimp
     aa0:	d301                	beqz	a4,9a0 <generate_keys+0x8a>
     aa2:	0902                	c.slli64	s2
    for(i = (2*N); i < (3*N); ++i){
     aa4:	0bc1                	addi	s7,s7,16
        random_keys[i] = fp[i-(2*N)];
     aa6:	0000                	unimp
     aa8:	3f26                	fld	ft10,104(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     aae:	02d4                	addi	a3,sp,324
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x9c>
    fq = ext_euclid(polyR, f, (N+1), q);
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	d501                	beqz	a0,9c4 <generate_keys+0xae>
    for(i = (3*N); i < (4*N); ++i){
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
        random_keys[i] = fq[i-(3*N)];
     ac6:	0000                	unimp
     ac8:	000f782b          	0xf782b
     acc:	1e00                	addi	s0,sp,816
    for(i = (3*N); i < (4*N); ++i){
     ace:	001c                	0x1c
     ad0:	ec00                	fsw	fs0,24(s0)
    fg = polymult2(fq, N, g, N, 0);
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
    for(i = 0; i < (2*N-1); ++i){
     adc:	012c                	addi	a1,sp,136
     ade:	5803055b          	0x5803055b
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	000f962b          	0xf962b
    for(i = (4*N); i < (5*N); ++i){
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0xac>
     b00:	5b01                	li	s6,-32
    for(i = (4*N); i < (5*N); ++i){
     b02:	3301                	jal	802 <ext_euclid+0x136>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
    for(i = (5*N); i < (6*N+1); ++i){
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
        random_keys[i] = polyR[i-(5*N)];
     b0c:	1016                	c.slli	zero,0x25
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
}
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x12e>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x11d>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	1038                	addi	a4,sp,40
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x3a>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
        polyR[i] = 0;
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
    for(i = 1; i < N; ++i){
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
        f[i] = 0;
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
        g[i] = 0;
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
    for (i = N; i < 55; ++i ){
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
        random_keys[i] = f[i];
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     b9a:	3408                	fld	fa0,40(s0)
        random_keys[i] = f[i];
     b9c:	0900                	addi	s0,sp,144
    for(i = 0; i < N; ++i){
     b9e:	005d                	c.nop	23
        random_keys[i] = g[i-N];
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
        random_keys[i] = fp[i-(2*N)];
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
    for(i = (2*N); i < (3*N); ++i){
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
        random_keys[i] = fq[i-(3*N)];
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     bce:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     bd0:	3408                	fld	fa0,40(s0)
    for(i = (3*N); i < (4*N); ++i){
     bd2:	0900                	addi	s0,sp,144
        fg[i] = fg[i]*p;
     bd4:	005d                	c.nop	23
    for(i = 0; i < (2*N-1); ++i){
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
        fg[i] = fg[i]*p;
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     be2:	3508                	fld	fa0,40(a0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be4:	2f00                	fld	fs0,24(a4)
     be6:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
     bea:	9901                	andi	a0,a0,-32
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2ee>
    for(i = (4*N); i < (5*N); ++i){
     bf2:	0c8e                	slli	s9,s9,0x3
        random_keys[i] = polyR[i-(5*N)];
     bf4:	0000                	unimp
     bf6:	00c6                	slli	ra,ra,0x11
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     c02:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     c04:	0299                	addi	t0,t0,6
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	00005d17          	auipc	s10,0x5
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
     c12:	9901                	andi	a0,a0,-32
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c18:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	0299                	addi	t0,t0,6
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2e:	00b8                	addi	a4,sp,72
    temp = polymult(public_key,N,random_val,48,q,0);
     c30:	0000                	unimp
     c32:	9901                	andi	a0,a0,-32
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x44>
     c3a:	0000028b          	0x28b
     c3e:	a631                	j	f4a <memset+0xa2>
     c40:	0005                	c.nop	1
array_add(temp,message,48);
     c42:	0100                	addi	s0,sp,128
     c44:	0299                	addi	t0,t0,6
     c46:	6340                	flw	fs0,4(a4)
    temp = polymult(public_key,N,random_val,48,q,0);
     c48:	b700000b          	0xb700000b
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c4c:	0002                	c.slli64	zero
array_add(temp,message,48);
     c4e:	3100                	fld	fs0,32(a0)
     c50:	0420                	addi	s0,sp,520
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c52:	0000                	unimp
     c54:	9901                	andi	a0,a0,-32
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x66>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c60:	a831                	j	c7c <ntru_encyrpt+0x74>
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	0299                	addi	t0,t0,6
     c68:	6366                	flw	ft6,88(sp)
     c6a:	0f00000b          	0xf00000b
}
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0xce>
     c72:	000002bb          	0x2bb
     c76:	9b01                	andi	a4,a4,-32
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_deceypt+0x2>
        CT[i-(2*N)] = CT[i];
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	029c                	addi	a5,sp,320
    for(i = (2*N); i < (3*N); ++i){
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
        CT[i-(2*N)] = CT[i];
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xde>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8e:	3261                	jal	616 <polydiv+0x136>
     c90:	0100                	addi	s0,sp,128
     c92:	029d                	addi	t0,t0,7
     c94:	630a                	flw	ft6,128(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c96:	5900000b          	0x5900000b
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0xde>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9e:	9e010063          	beqz	sp,fffffe7e <_stack_start+0xfffefe7e>
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0x2c>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca8:	0382                	c.slli64	t2
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	0000                	unimp
     cac:	632a                	flw	ft6,136(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cae:	0032                	c.slli	zero,0xc
     cb0:	9f01                	0x9f01
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x3c>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc0:	02a0                	addi	s0,sp,328
     cc2:	5d09                	li	s10,-30
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0xee>
     ccc:	0cc4                	addi	s1,sp,596
     cce:	0000                	unimp
     cd0:	1684                	addi	s1,sp,864
     cd2:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
        if(a2[i] <= q/2)
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
    for (i = 0; i < N; ++i){
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
    c = polymult2(secret_key_fp,N,a2,N,0);
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cf6:	0030                	addi	a2,sp,8
     cf8:	000cd22b          	0xcd22b
     cfc:	ef00                	fsw	fs0,24(a4)
     cfe:	1e000013          	li	zero,480
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
}
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d1e:	000cf62b          	0xcf62b
     d22:	8400                	0x8400
     d24:	0016                	c.slli	zero,0x5
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
        a2[i-(2*N)] = a2[i];
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	8702                	jr	a4
        if(a2[i] <= q/2)
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
            a2[i] = (-1)*(q-a2[i]);
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
    for (i = 0; i < N; ++i){
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x60>
        c2[i-(2*N)] = c2[i];
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0d02                	c.slli64	s10
     d46:	0000                	unimp
     d48:	000013ef          	jal	t2,1d48 <random_keys+0x294>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4c:	012c                	addi	a1,sp,136
        c2[i-(2*N)] = c2[i];
     d4e:	0079025b          	0x79025b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	012c                	addi	a1,sp,136
  jal x0, default_exc_handler
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
  mv  x1, x0
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
  mv  x2, x1
     d5c:	0086                	slli	ra,ra,0x1
  mv  x3, x1
     d5e:	012c                	addi	a1,sp,136
  mv  x4, x1
     d60:	025e                	slli	tp,tp,0x17
  mv  x5, x1
     d62:	0085                	addi	ra,ra,1
  mv  x6, x1
     d64:	0000                	unimp
  mv  x7, x1
     d66:	00066a2f          	0x66a2f
  mv  x9, x1
     d6a:	0100                	addi	s0,sp,128
  mv x10, x1
     d6c:	63060277          	0x63060277
  mv x12, x1
     d70:	0800000b          	0x800000b
  mv x14, x1
     d74:	000c                	0xc
  mv x15, x1
     d76:	8600                	0x8600
  mv x16, x1
     d78:	0000                	unimp
  mv x17, x1
     d7a:	0100                	addi	s0,sp,128
  mv x18, x1
     d7c:	bc9c                	fsd	fa5,56(s1)
  mv x19, x1
     d7e:	000e                	c.slli	zero,0x3
  mv x20, x1
     d80:	3000                	fld	fs0,32(s0)
  mv x21, x1
     d82:	004e                	c.slli	zero,0x13
  mv x22, x1
     d84:	7701                	lui	a4,0xfffe0
  mv x23, x1
     d86:	1702                	slli	a4,a4,0x20
  mv x24, x1
     d88:	005d                	c.nop	23
  mv x25, x1
     d8a:	0000                	unimp
  mv x26, x1
     d8c:	0438                	addi	a4,sp,520
  mv x27, x1
     d8e:	0000                	unimp
  mv x28, x1
     d90:	7130                	flw	fa2,96(a0)
  mv x29, x1
     d92:	0100                	addi	s0,sp,128
  mv x30, x1
     d94:	5d1e0277          	0x5d1e0277
  la   x2, _stack_start
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
  la x26, _bss_start
     da0:	000003db          	0x3db
     da4:	7701                	lui	a4,0xfffe0
     da6:	2602                	fld	fa2,0(sp)
  la x27, _bss_end
     da8:	00000b63          	beqz	zero,dbe <main_entry>
     dac:	0000049b          	0x49b
  bge x26, x27, zero_loop_end
     db0:	7131                	addi	sp,sp,-192
     db2:	0005                	c.nop	1
  sw x0, 0(x26)
     db4:	0100                	addi	s0,sp,128
     db6:	63340277          	0x63340277
  ble x26, x27, zero_loop
     dba:	d200000b          	0xd200000b
  addi x10, x0, 0
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
  addi x11, x0, 0
     dc2:	06a8                	addi	a0,sp,840
     dc4:	0000                	unimp
  jal x1, main
     dc6:	7701                	lui	a4,0xfffe0
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memcpy+0x16>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	ab29                	j	12ec <_bss_start+0xd0>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	0279                	addi	tp,tp,30
     dda:	630a                	flw	ft6,128(sp)
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	027a                	slli	tp,tp,0x1e
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	03b4                	addi	a3,sp,456
     df0:	0000                	unimp
     df2:	7c01                	lui	s8,0xfffe0
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2a26                	fld	fs4,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	027d                	addi	tp,tp,31
     e06:	630a                	flw	ft6,128(sp)
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	7e01                	lui	t3,0xfffe0
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000c302b          	0xc302b
     e22:	1e00                	addi	s0,sp,816
     e24:	001c                	0x1c
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	1098                	addi	a4,sp,96
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c42                	slli	s8,s8,0x10
     e44:	0000                	unimp
     e46:	000017d7          	0x17d7
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8) # fffe0012 <_stack_start+0xfffd0012>
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 522b      	0x522b0030015f
     e74:	000c                	0xc
     e76:	1a00                	addi	s0,sp,304
     e78:	001a                	c.slli	zero,0x6
     e7a:	9300                	0x9300
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0c60                	addi	s0,sp,540
     e96:	0000                	unimp
     e98:	000013ef          	jal	t2,1e98 <random_keys+0x3e4>
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
     ebc:	0003562f          	0x3562f
     ec0:	0100                	addi	s0,sp,128
     ec2:	021f 6306 000b      	0xb6306021f
     ec8:	1600                	addi	s0,sp,800
     eca:	0009                	c.nop	2
     ecc:	f200                	fsw	fs0,32(a2)
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	1f01                	addi	t5,t5,-32
     edc:	1802                	slli	a6,a6,0x20
     ede:	005d                	c.nop	23
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
     ee4:	0000                	unimp
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
     eea:	021f 5d1f 0000      	0x5d1f021f
     ef0:	e500                	fsw	fs0,8(a0)
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	1f01                	addi	t5,t5,-32
     efa:	2602                	fld	fa2,0(sp)
     efc:	005d                	c.nop	23
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	0221                	addi	tp,tp,8
     f0a:	6c09                	lui	s8,0x2
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	22010067          	jr	544(sp)
     f18:	0902                	c.slli64	s2
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
     f26:	2401                	jal	1126 <__DTOR_END__+0x8e>
     f28:	0a02                	c.slli64	s4
     f2a:	00000b63          	beqz	zero,f40 <memset+0x98>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	2501                	jal	1536 <product2+0xc2>
     f38:	0a02                	c.slli64	s4
     f3a:	00000b63          	beqz	zero,f50 <main>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	26010067          	jr	608(sp)
     f48:	0a02                	c.slli64	s4
     f4a:	00000b63          	beqz	zero,f60 <main+0x10>
     f4e:	0684                	addi	s1,sp,832
int main(){
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f54:	2701006b          	0x2701006b
     f58:	0a02                	c.slli64	s4
     f5a:	00000b63          	beqz	zero,f70 <main+0x20>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
int main(){
     f62:	a826                	fsd	fs1,16(sp)
     f64:	0006                	c.slli	zero,0x1
     f66:	0100                	addi	s0,sp,128
     f68:	0228                	addi	a0,sp,264
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
     f70:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xaaaaaaa0;
     f72:	2a00                	fld	fs0,16(a2)
     f74:	0069                	c.nop	26
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f76:	2901                	jal	1386 <_bss_start+0x16a>
    resultkon[0] = 0xaaaaaaa0;
     f78:	0902                	c.slli64	s2
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	ec26                	fsw	fs1,24(sp)
    keys = generate_keys(N, p, q);
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f88:	022a                	slli	tp,tp,0xa
     f8a:	630a                	flw	ft6,128(sp)
     f8c:	5f00000b          	0x5f00000b
    resultkon[0] = 0xaaaaaaa1;
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
    keys = generate_keys(N, p, q);
     f94:	0069                	c.nop	26
    resultkon[0] = 0xaaaaaaa1;
     f96:	0000                	unimp
     f98:	00000877          	0x877
    for(i = 0; i < N; ++i){
     f9c:	00095c2b          	0x95c2b
        secret_key_f[i] = keys[i];
     fa0:	2900                	fld	fs0,16(a0)
     fa2:	001c                	0x1c
     fa4:	bc00                	fsd	fs0,56(s0)
     fa6:	2c00000f          	0x2c00000f
    for(i = 0; i < N; ++i){
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
    for(i = N; i < (2*N); ++i){
     fb0:	012c                	addi	a1,sp,136
     fb2:	2c30015b          	0x2c30015b
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
     fba:	00d0                	addi	a2,sp,68
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	0009dc2b          	0x9dc2b
     fc0:	2900                	fld	fs0,16(a0)
     fc2:	001c                	0x1c
     fc4:	dc00                	sw	s0,56(s0)
    for(i = (2*N); i < (3*N); ++i){
     fc6:	2c00000f          	0x2c00000f
    for(i = (3*N); i < (4*N); ++i){
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
        public_key[i-(4*N)] = keys[i];
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
     fdc:	000aa42b          	0xaa42b
    for(i = (4*N); i < (5*N); ++i){
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
        ring_poly[i-(5*N)] = keys[i];
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
    for(i = (5*N); i < (6*N+1); ++i){
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
    resultkon[0] = 0xbbbbbbb0;
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	2b000087          	0x2b000087
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1004:	0abe                	slli	s5,s5,0xf
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    resultkon[0] = 0xbbbbbbb1;
    100c:	102a                	c.slli	zero,0x2a
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    resultkon[0] = 0xbbbbbbb0;
    1012:	025a                	slli	tp,tp,0x16
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1014:	0072                	c.slli	zero,0x1c
    resultkon[0] = 0xbbbbbbb1;
    1016:	012c                	addi	a1,sp,136
    resultkon[0] = 0xccccccc0;
    1018:	9878035b          	0x9878035b
    101c:	2c7c                	fld	fa5,216(s0)
    101e:	5c01                	li	s8,-32
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1020:	8502                	jr	a0
    resultkon[0] = 0xccccccc0;
    1022:	2c00                	fld	fs0,24(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1024:	5d01                	li	s10,-32
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    102a:	000adc2b          	0xadc2b
    102e:	8400                	0x8400
    1030:	0016                	c.slli	zero,0x5
    1032:	4f00                	lw	s0,24(a4)
    1034:	0010                	0x10
    1036:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xccccccc1;	
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
            resultkon[0] = 0xDEDEDEDE;
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    resultkon[0] = 0xccccccc1;	
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
            resultkon[0] = 0xDEDEDEDE;
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    for(i = 0; i < 32; ++i){
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
        if(!(message[i] == Dec_Message[i])){
    104c:	3001                	jal	84c <ext_euclid+0x180>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	0af0                	addi	a2,sp,348
    1052:	0000                	unimp
    1054:	000013ef          	jal	t2,2054 <_min_stack+0x54>
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
            resultkon[0] = 0xBABABABA;
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    1064:	012c                	addi	a1,sp,136
}
    1066:	025e                	slli	tp,tp,0x17
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
            resultkon[0] = 0xDEDEDEDE;
    107e:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	00000393          	li	t2,0
    1094:	8201                	c.srli64	a2
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <__DTOR_END__+0x16>
    109c:	06cc                	addi	a1,sp,836
    109e:	0000                	unimp
    10a0:	024a                	slli	tp,tp,0x12
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	136a                	slli	t1,t1,0x3a
    10a8:	0000                	unimp
    10aa:	a831                	j	10c6 <__DTOR_END__+0x2e>
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	0182                	c.slli64	gp
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0192                	slli	gp,gp,0x4
    10be:	0000                	unimp
    10c0:	8201                	c.srli64	a2
    10c2:	2201                	jal	11c2 <__DTOR_END__+0x12a>
    10c4:	00000b63          	beqz	zero,10da <__DTOR_END__+0x42>
    10c8:	000008f7          	0x8f7
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	0182                	c.slli64	gp
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	3100                	fld	fs0,32(a0)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	8201                	c.srli64	a2
    10e4:	3701                	jal	fe4 <main+0x94>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0968                	addi	a0,sp,156
    10ec:	0000                	unimp
    10ee:	9426                	add	s0,s0,s1
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	0184                	addi	s1,sp,192
    10f6:	630a                	flw	ft6,128(sp)
    10f8:	9f00000b          	0x9f00000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	8501                	c.srai64	a0
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	000009b7          	lui	s3,0x0
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	0185                	addi	gp,gp,1
    1114:	5d0c                	lw	a1,56(a0)
    1116:	0000                	unimp
    1118:	f200                	fsw	fs0,32(a2)
    111a:	0009                	c.nop	2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	8501                	c.srai64	a0
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	00000b9b          	0xb9b
    112c:	3e26                	fld	ft8,104(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	0186                	slli	gp,gp,0x1
    1134:	6a09                	lui	s4,0x2
    1136:	b9000013          	li	zero,-1136
    113a:	2600000b          	0x2600000b
    113e:	05bc                	addi	a5,sp,712
    1140:	0000                	unimp
    1142:	8701                	c.srai64	a4
    1144:	0901                	addi	s2,s2,0
    1146:	137d                	addi	t1,t1,-1
    1148:	0000                	unimp
    114a:	0bd9                	addi	s7,s7,22
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	8801                	andi	s0,s0,0
    1154:	0901                	addi	s2,s2,0
    1156:	1390                	addi	a2,sp,480
    1158:	0000                	unimp
    115a:	0bf9                	addi	s7,s7,30
    115c:	0000                	unimp
    115e:	5b26                	lw	s6,104(sp)
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	018a                	slli	gp,gp,0x2
    1166:	a309                	j	1668 <product2+0x1f4>
    1168:	19000013          	li	zero,400
    116c:	000c                	0xc
    116e:	2a00                	fld	fs0,16(a2)
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	b609018b          	0xb609018b
    1178:	4f000013          	li	zero,1264
    117c:	000c                	0xc
    117e:	2600                	fld	fs0,8(a2)
    1180:	00000473          	0x473
    1184:	8c01                	sub	s0,s0,s0
    1186:	0901                	addi	s2,s2,0
    1188:	13c9                	addi	t2,t2,-14
    118a:	0000                	unimp
    118c:	00000c6f          	jal	s8,118c <__DTOR_END__+0xf4>
    1190:	2a26                	fld	fs4,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	018d                	addi	gp,gp,3
    1198:	dc09                	beqz	s0,10b2 <__DTOR_END__+0x1a>
    119a:	a5000013          	li	zero,-1456
    119e:	000c                	0xc
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	8e010073          	0x8e010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <__DTOR_END__+0x128>
    11ae:	0cff                	0xcff
    11b0:	0000                	unimp
    11b2:	5926                	lw	s2,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	630a018f          	0x630a018f
    11bc:	1d00000b          	0x1d00000b
    11c0:	000d                	c.nop	3
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	015e                	slli	sp,sp,0x17
    11c6:	0000                	unimp
    11c8:	9001                	srli	s0,s0,0x20
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <__DTOR_END__+0x14a>
    11d0:	00000d3b          	0xd3b
    11d4:	2c26                	fld	fs8,72(sp)
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	0191                	addi	gp,gp,4
    11dc:	5d09                	li	s10,-30
    11de:	0000                	unimp
    11e0:	5900                	lw	s0,48(a0)
    11e2:	000d                	c.nop	3
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	0db2                	slli	s11,s11,0xc
    11ec:	0000                	unimp
    11ee:	00006933          	or	s2,zero,zero
    11f2:	ed00                	fsw	fs0,24(a0)
    11f4:	000d                	c.nop	3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	0e28                	addi	a0,sp,792
    11fe:	0000                	unimp
    1200:	00006933          	or	s2,zero,zero
    1204:	6300                	flw	fs0,0(a4)
    1206:	000e                	c.slli	zero,0x3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	0e9e                	slli	t4,t4,0x7
    1210:	0000                	unimp
    1212:	00006933          	or	s2,zero,zero
    1216:	d900                	sw	s0,48(a0)
    1218:	000e                	c.slli	zero,0x3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0f14                	addi	a3,sp,912
    1222:	0000                	unimp
    1224:	0007522b          	0x7522b
    1228:	b400                	fsd	fs0,40(s0)
    122a:	0019                	c.nop	6
    122c:	4400                	lw	s0,8(s0)
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8302                	jr	t1
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	2c00                	fld	fs0,24(s0)
    123e:	5c01                	li	s8,-32
    1240:	8b02                	jr	s6
    1242:	0000                	unimp
    1244:	00075a2b          	0x75a2b
    1248:	b400                	fsd	fs0,40(s0)
    124a:	0019                	c.nop	6
    124c:	6400                	flw	fs0,8(s0)
    124e:	0012                	c.slli	zero,0x4
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5a01                	li	s4,-32
    1254:	8502                	jr	a0
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5b01                	li	s6,-32
    125a:	7902                	flw	fs2,32(sp)
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5c01                	li	s8,-32
    1260:	8b02                	jr	s6
    1262:	0000                	unimp
    1264:	0007662b          	0x7662b
    1268:	ef00                	fsw	fs0,24(a4)
    126a:	90000013          	li	zero,-1792
    126e:	0012                	c.slli	zero,0x4
    1270:	2c00                	fld	fs0,24(s0)
    1272:	5a01                	li	s4,-32
    1274:	8302                	jr	t1
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5b01                	li	s6,-32
    127a:	8b02                	jr	s6
    127c:	2c00                	fld	fs0,24(s0)
    127e:	5c01                	li	s8,-32
    1280:	8502                	jr	a0
    1282:	2c00                	fld	fs0,24(s0)
    1284:	5d01                	li	s10,-32
    1286:	8b02                	jr	s6
    1288:	2c00                	fld	fs0,24(s0)
    128a:	5e01                	li	t3,-32
    128c:	7902                	flw	fs2,32(sp)
    128e:	0000                	unimp
    1290:	0007822b          	0x7822b
    1294:	b400                	fsd	fs0,40(s0)
    1296:	0019                	c.nop	6
    1298:	b000                	fsd	fs0,32(s0)
    129a:	0012                	c.slli	zero,0x4
    129c:	2c00                	fld	fs0,24(s0)
    129e:	5a01                	li	s4,-32
    12a0:	7202                	flw	ft4,32(sp)
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5b01                	li	s6,-32
    12a6:	7902                	flw	fs2,32(sp)
    12a8:	2c00                	fld	fs0,24(s0)
    12aa:	5c01                	li	s8,-32
    12ac:	8b02                	jr	s6
    12ae:	0000                	unimp
    12b0:	00078e2b          	0x78e2b
    12b4:	ef00                	fsw	fs0,24(a4)
    12b6:	dc000013          	li	zero,-576
    12ba:	0012                	c.slli	zero,0x4
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5a01                	li	s4,-32
    12c0:	7202                	flw	ft4,32(sp)
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5b01                	li	s6,-32
    12c6:	8b02                	jr	s6
    12c8:	2c00                	fld	fs0,24(s0)
    12ca:	5c01                	li	s8,-32
    12cc:	8502                	jr	a0
    12ce:	2c00                	fld	fs0,24(s0)
    12d0:	5d01                	li	s10,-32
    12d2:	8b02                	jr	s6
    12d4:	2c00                	fld	fs0,24(s0)
    12d6:	5e01                	li	t3,-32
    12d8:	7902                	flw	fs2,32(sp)
    12da:	0000                	unimp
    12dc:	00079c2b          	0x79c2b
    12e0:	b400                	fsd	fs0,40(s0)
    12e2:	0019                	c.nop	6
    12e4:	fc00                	fsw	fs0,56(s0)
    12e6:	0012                	c.slli	zero,0x4
    12e8:	2c00                	fld	fs0,24(s0)
    12ea:	5a01                	li	s4,-32
    12ec:	8702                	jr	a4
    12ee:	2c00                	fld	fs0,24(s0)
    12f0:	5b01                	li	s6,-32
    12f2:	7902                	flw	fs2,32(sp)
    12f4:	2c00                	fld	fs0,24(s0)
    12f6:	5c01                	li	s8,-32
    12f8:	8b02                	jr	s6
    12fa:	0000                	unimp
    12fc:	0007aa2b          	0x7aa2b
    1300:	d700                	sw	s0,40(a4)
    1302:	2d000017          	auipc	zero,0x2d000
    1306:	2c000013          	li	zero,704
    130a:	5a01                	li	s4,-32
    130c:	8702                	jr	a4
    130e:	2c00                	fld	fs0,24(s0)
    1310:	5b01                	li	s6,-32
    1312:	8b02                	jr	s6
    1314:	2c00                	fld	fs0,24(s0)
    1316:	5c01                	li	s8,-32
    1318:	8602                	jr	a2
    131a:	2c00                	fld	fs0,24(s0)
    131c:	5d01                	li	s10,-32
    131e:	8b02                	jr	s6
    1320:	2c00                	fld	fs0,24(s0)
    1322:	5e01                	li	t3,-32
    1324:	7902                	flw	fs2,32(sp)
    1326:	2c00                	fld	fs0,24(s0)
    1328:	5f01                	li	t5,-32
    132a:	3001                	jal	b2a <generate_keys+0x214>
    132c:	2b00                	fld	fs0,16(a4)
    132e:	07b8                	addi	a4,sp,968
    1330:	0000                	unimp
    1332:	19b4                	addi	a3,sp,248
    1334:	0000                	unimp
    1336:	134d                	addi	t1,t1,-13
    1338:	0000                	unimp
    133a:	012c                	addi	a1,sp,136
    133c:	025a                	slli	tp,tp,0x16
    133e:	0072                	c.slli	zero,0x1c
    1340:	012c                	addi	a1,sp,136
    1342:	0079025b          	0x79025b
    1346:	012c                	addi	a1,sp,136
    1348:	025c                	addi	a5,sp,260
    134a:	2d00008b          	0x2d00008b
    134e:	07c8                	addi	a0,sp,964
    1350:	0000                	unimp
    1352:	19b4                	addi	a3,sp,248
    1354:	0000                	unimp
    1356:	012c                	addi	a1,sp,136
    1358:	025a                	slli	tp,tp,0x16
    135a:	0089                	addi	ra,ra,2
    135c:	012c                	addi	a1,sp,136
    135e:	0079025b          	0x79025b
    1362:	012c                	addi	a1,sp,136
    1364:	025c                	addi	a5,sp,260
    1366:	0000008b          	0x8b
    136a:	5d09                	li	s10,-30
    136c:	0000                	unimp
    136e:	7d00                	flw	fs0,56(a0)
    1370:	34000013          	li	zero,832
    1374:	0069                	c.nop	26
    1376:	0000                	unimp
    1378:	11e5                	addi	gp,gp,-7
    137a:	0000                	unimp
    137c:	0900                	addi	s0,sp,144
    137e:	005d                	c.nop	23
    1380:	0000                	unimp
    1382:	1390                	addi	a2,sp,480
    1384:	0000                	unimp
    1386:	6934                	flw	fa3,80(a0)
    1388:	0000                	unimp
    138a:	ee00                	fsw	fs0,24(a2)
    138c:	0011                	c.nop	4
    138e:	0000                	unimp
    1390:	5d09                	li	s10,-30
    1392:	0000                	unimp
    1394:	a300                	fsd	fs0,0(a4)
    1396:	34000013          	li	zero,832
    139a:	0069                	c.nop	26
    139c:	0000                	unimp
    139e:	000011f7          	0x11f7
    13a2:	0900                	addi	s0,sp,144
    13a4:	005d                	c.nop	23
    13a6:	0000                	unimp
    13a8:	13b6                	slli	t2,t2,0x2d
    13aa:	0000                	unimp
    13ac:	6934                	flw	fa3,80(a0)
    13ae:	0000                	unimp
    13b0:	0000                	unimp
    13b2:	0012                	c.slli	zero,0x4
    13b4:	0000                	unimp
    13b6:	5d09                	li	s10,-30
    13b8:	0000                	unimp
    13ba:	c900                	sw	s0,16(a0)
    13bc:	34000013          	li	zero,832
    13c0:	0069                	c.nop	26
    13c2:	0000                	unimp
    13c4:	1209                	addi	tp,tp,-30
    13c6:	0000                	unimp
    13c8:	0900                	addi	s0,sp,144
    13ca:	005d                	c.nop	23
    13cc:	0000                	unimp
    13ce:	13dc                	addi	a5,sp,484
    13d0:	0000                	unimp
    13d2:	6934                	flw	fa3,80(a0)
    13d4:	0000                	unimp
    13d6:	1200                	addi	s0,sp,288
    13d8:	0012                	c.slli	zero,0x4
    13da:	0000                	unimp
    13dc:	5d09                	li	s10,-30
    13de:	0000                	unimp
    13e0:	ef00                	fsw	fs0,24(a4)
    13e2:	34000013          	li	zero,832
    13e6:	0069                	c.nop	26
    13e8:	0000                	unimp
    13ea:	0000121b          	0x121b
    13ee:	3500                	fld	fs0,40(a0)
    13f0:	018a                	slli	gp,gp,0x2
    13f2:	0000                	unimp
    13f4:	ec01                	bnez	s0,140c <_bss_start+0x1f0>
    13f6:	6306                	flw	ft6,64(sp)
    13f8:	e000000b          	0xe000000b
    13fc:	0004                	0x4
    13fe:	ec00                	fsw	fs0,24(s0)
    1400:	0001                	nop
    1402:	0100                	addi	s0,sp,128
    1404:	389c                	fld	fa5,48(s1)
    1406:	0016                	c.slli	zero,0x5
    1408:	3600                	fld	fs0,40(a2)
    140a:	756e                	flw	fa0,248(sp)
    140c:	006d                	c.nop	27
    140e:	ec01                	bnez	s0,1426 <_bss_start+0x20a>
    1410:	000b6313          	ori	t1,s6,0
    1414:	4f00                	lw	s0,24(a4)
    1416:	3700000f          	0x3700000f
    141a:	0106                	slli	sp,sp,0x1
    141c:	0000                	unimp
    141e:	ec01                	bnez	s0,1436 <_bss_start+0x21a>
    1420:	5d1c                	lw	a5,56(a0)
    1422:	0000                	unimp
    1424:	8900                	0x8900
    1426:	3700000f          	0x3700000f
    142a:	068a                	slli	a3,a3,0x2
    142c:	0000                	unimp
    142e:	ec01                	bnez	s0,1446 <_bss_start+0x22a>
    1430:	6328                	flw	fa0,64(a4)
    1432:	da00000b          	0xda00000b
    1436:	3700000f          	0x3700000f
    143a:	06ae                	slli	a3,a3,0xb
    143c:	0000                	unimp
    143e:	ec01                	bnez	s0,1456 <_bss_start+0x23a>
    1440:	00005d33          	srl	s10,zero,zero
    1444:	2a00                	fld	fs0,16(a2)
    1446:	0010                	0x10
    1448:	3600                	fld	fs0,40(a2)
    144a:	6f6d                	lui	t5,0x1b
    144c:	0064                	addi	s1,sp,12
    144e:	ec01                	bnez	s0,1466 <_bss_start+0x24a>
    1450:	00005d3f 00106100 	0x10610000005d3f
    1458:	3800                	fld	fs0,48(s0)
    145a:	0075                	c.nop	29
    145c:	ee01                	bnez	a2,1474 <product2>
    145e:	5d09                	li	s10,-30
    1460:	0000                	unimp
    1462:	9800                	0x9800
    1464:	0010                	0x10
    1466:	3800                	fld	fs0,48(s0)
    1468:	0064                	addi	s1,sp,12
    146a:	ee01                	bnez	a2,1482 <product2+0xe>
    146c:	00005d0b          	0x5d0b
    1470:	c100                	sw	s0,0(a0)
    1472:	0010                	0x10
    1474:	3900                	fld	fs0,48(a0)
    1476:	3264                	fld	fs1,224(a2)
    1478:	0100                	addi	s0,sp,128
    147a:	0dee                	slli	s11,s11,0x1b
    147c:	005d                	c.nop	23
    147e:	0000                	unimp
    1480:	6938                	flw	fa4,80(a0)
    1482:	0100                	addi	s0,sp,128
    1484:	10ee                	slli	ra,ra,0x3b
    1486:	005d                	c.nop	23
    1488:	0000                	unimp
    148a:	10df 0000 6239      	0x6239000010df
    1490:	4e5f 0100 12ee      	0x12ee01004e5f
    1496:	005d                	c.nop	23
    1498:	0000                	unimp
    149a:	7238                	flw	fa4,96(a2)
    149c:	645f 0100 16ee      	0x16ee0100645f
    14a2:	005d                	c.nop	23
    14a4:	0000                	unimp
    14a6:	121c                	addi	a5,sp,288
    14a8:	0000                	unimp
    14aa:	843a                	mv	s0,a4
    14ac:	0002                	c.slli64	zero
    14ae:	0100                	addi	s0,sp,128
    14b0:	0b630aef          	jal	s5,31566 <_stack_start+0x21566>
    14b4:	0000                	unimp
    14b6:	123a                	slli	tp,tp,0x2e
    14b8:	0000                	unimp
    14ba:	7638                	flw	fa4,104(a2)
    14bc:	0100                	addi	s0,sp,128
    14be:	09f1                	addi	s3,s3,28
    14c0:	1638                	addi	a4,sp,808
    14c2:	0000                	unimp
    14c4:	1252                	slli	tp,tp,0x34
    14c6:	0000                	unimp
    14c8:	7138                	flw	fa4,96(a0)
    14ca:	0100                	addi	s0,sp,128
    14cc:	09f2                	slli	s3,s3,0x1c
    14ce:	0000164b          	fnmsub.s	fa2,ft0,ft0,ft0,rtz
    14d2:	1272                	slli	tp,tp,0x3c
    14d4:	0000                	unimp
    14d6:	823a                	mv	tp,a4
    14d8:	0001                	nop
    14da:	0100                	addi	s0,sp,128
    14dc:	0b630af3          	0xb630af3
    14e0:	0000                	unimp
    14e2:	1292                	slli	t0,t0,0x24
    14e4:	0000                	unimp
    14e6:	263a                	fld	fa2,392(sp)
    14e8:	0002                	c.slli64	zero
    14ea:	0100                	addi	s0,sp,128
    14ec:	09f4                	addi	a3,sp,220
    14ee:	165e                	slli	a2,a2,0x37
    14f0:	0000                	unimp
    14f2:	12b0                	addi	a2,sp,360
    14f4:	0000                	unimp
    14f6:	243a                	fld	fs0,392(sp)
    14f8:	0002                	c.slli64	zero
    14fa:	0100                	addi	s0,sp,128
    14fc:	09f5                	addi	s3,s3,29
    14fe:	1671                	addi	a2,a2,-4
    1500:	0000                	unimp
    1502:	12fc                	addi	a5,sp,364
    1504:	0000                	unimp
    1506:	00006933          	or	s2,zero,zero
    150a:	2800                	fld	fs0,16(s0)
    150c:	33000013          	li	zero,816
    1510:	0069                	c.nop	26
    1512:	0000                	unimp
    1514:	1356                	slli	t1,t1,0x35
    1516:	0000                	unimp
    1518:	00006933          	or	s2,zero,zero
    151c:	8400                	0x8400
    151e:	33000013          	li	zero,816
    1522:	0069                	c.nop	26
    1524:	0000                	unimp
    1526:	13b2                	slli	t2,t2,0x2c
    1528:	0000                	unimp
    152a:	0005442b          	0x5442b
    152e:	b400                	fsd	fs0,40(s0)
    1530:	0019                	c.nop	6
    1532:	4a00                	lw	s0,16(a2)
    1534:	0015                	c.nop	5
    1536:	2c00                	fld	fs0,24(s0)
    1538:	5a01                	li	s4,-32
    153a:	8902                	jr	s2
    153c:	2c00                	fld	fs0,24(s0)
    153e:	5b01                	li	s6,-32
    1540:	8202                	jr	tp
    1542:	2c00                	fld	fs0,24(s0)
    1544:	5c01                	li	s8,-32
    1546:	7902                	flw	fs2,32(sp)
    1548:	0000                	unimp
    154a:	0005522b          	0x5522b
    154e:	b400                	fsd	fs0,40(s0)
    1550:	0019                	c.nop	6
    1552:	6a00                	flw	fs0,16(a2)
    1554:	0015                	c.nop	5
    1556:	2c00                	fld	fs0,24(s0)
    1558:	5a01                	li	s4,-32
    155a:	7202                	flw	ft4,32(sp)
    155c:	2c00                	fld	fs0,24(s0)
    155e:	5b01                	li	s6,-32
    1560:	8202                	jr	tp
    1562:	2c00                	fld	fs0,24(s0)
    1564:	5c01                	li	s8,-32
    1566:	8302                	jr	t1
    1568:	0000                	unimp
    156a:	0006322b          	0x6322b
    156e:	b400                	fsd	fs0,40(s0)
    1570:	0019                	c.nop	6
    1572:	8a00                	0x8a00
    1574:	0015                	c.nop	5
    1576:	2c00                	fld	fs0,24(s0)
    1578:	5a01                	li	s4,-32
    157a:	8502                	jr	a0
    157c:	2c00                	fld	fs0,24(s0)
    157e:	5b01                	li	s6,-32
    1580:	8202                	jr	tp
    1582:	2c00                	fld	fs0,24(s0)
    1584:	5c01                	li	s8,-32
    1586:	7902                	flw	fs2,32(sp)
    1588:	0000                	unimp
    158a:	0006402b          	0x6402b
    158e:	d700                	sw	s0,40(a4)
    1590:	bb000017          	auipc	zero,0xbb000
    1594:	0015                	c.nop	5
    1596:	2c00                	fld	fs0,24(s0)
    1598:	5a01                	li	s4,-32
    159a:	7202                	flw	ft4,32(sp)
    159c:	2c00                	fld	fs0,24(s0)
    159e:	5b01                	li	s6,-32
    15a0:	8302                	jr	t1
    15a2:	2c00                	fld	fs0,24(s0)
    15a4:	5c01                	li	s8,-32
    15a6:	8502                	jr	a0
    15a8:	2c00                	fld	fs0,24(s0)
    15aa:	5d01                	li	s10,-32
    15ac:	8302                	jr	t1
    15ae:	2c00                	fld	fs0,24(s0)
    15b0:	5e01                	li	t3,-32
    15b2:	8202                	jr	tp
    15b4:	2c00                	fld	fs0,24(s0)
    15b6:	5f01                	li	t5,-32
    15b8:	3001                	jal	db8 <zero_loop+0x4>
    15ba:	2b00                	fld	fs0,16(a4)
    15bc:	0648                	addi	a0,sp,772
    15be:	0000                	unimp
    15c0:	19b4                	addi	a3,sp,248
    15c2:	0000                	unimp
    15c4:	000015db          	0x15db
    15c8:	012c                	addi	a1,sp,136
    15ca:	025a                	slli	tp,tp,0x16
    15cc:	012c008b          	0x12c008b
    15d0:	0082025b          	0x82025b
    15d4:	012c                	addi	a1,sp,136
    15d6:	025c                	addi	a5,sp,260
    15d8:	0079                	c.nop	30
    15da:	2b00                	fld	fs0,16(a4)
    15dc:	0658                	addi	a4,sp,772
    15de:	0000                	unimp
    15e0:	19b4                	addi	a3,sp,248
    15e2:	0000                	unimp
    15e4:	000015fb          	0x15fb
    15e8:	012c                	addi	a1,sp,136
    15ea:	025a                	slli	tp,tp,0x16
    15ec:	0089                	addi	ra,ra,2
    15ee:	012c                	addi	a1,sp,136
    15f0:	0082025b          	0x82025b
    15f4:	012c                	addi	a1,sp,136
    15f6:	025c                	addi	a5,sp,260
    15f8:	0079                	c.nop	30
    15fa:	2b00                	fld	fs0,16(a4)
    15fc:	0660                	addi	s0,sp,780
    15fe:	0000                	unimp
    1600:	1a1a                	slli	s4,s4,0x26
    1602:	0000                	unimp
    1604:	0000161b          	0x161b
    1608:	012c                	addi	a1,sp,136
    160a:	025a                	slli	tp,tp,0x16
    160c:	0086                	slli	ra,ra,0x1
    160e:	012c                	addi	a1,sp,136
    1610:	0085025b          	0x85025b
    1614:	012c                	addi	a1,sp,136
    1616:	025c                	addi	a5,sp,260
    1618:	0079                	c.nop	30
    161a:	2d00                	fld	fs0,24(a0)
    161c:	0668                	addi	a0,sp,780
    161e:	0000                	unimp
    1620:	19b4                	addi	a3,sp,248
    1622:	0000                	unimp
    1624:	012c                	addi	a1,sp,136
    1626:	025a                	slli	tp,tp,0x16
    1628:	0086                	slli	ra,ra,0x1
    162a:	012c                	addi	a1,sp,136
    162c:	0082025b          	0x82025b
    1630:	012c                	addi	a1,sp,136
    1632:	025c                	addi	a5,sp,260
    1634:	0079                	c.nop	30
    1636:	0000                	unimp
    1638:	5d09                	li	s10,-30
    163a:	0000                	unimp
    163c:	4b00                	lw	s0,16(a4)
    163e:	0016                	c.slli	zero,0x5
    1640:	3400                	fld	fs0,40(s0)
    1642:	0069                	c.nop	26
    1644:	0000                	unimp
    1646:	1506                	slli	a0,a0,0x21
    1648:	0000                	unimp
    164a:	0900                	addi	s0,sp,144
    164c:	005d                	c.nop	23
    164e:	0000                	unimp
    1650:	165e                	slli	a2,a2,0x37
    1652:	0000                	unimp
    1654:	6934                	flw	fa3,80(a0)
    1656:	0000                	unimp
    1658:	0f00                	addi	s0,sp,912
    165a:	0015                	c.nop	5
    165c:	0000                	unimp
    165e:	5d09                	li	s10,-30
    1660:	0000                	unimp
    1662:	7100                	flw	fs0,32(a0)
    1664:	0016                	c.slli	zero,0x5
    1666:	3400                	fld	fs0,40(s0)
    1668:	0069                	c.nop	26
    166a:	0000                	unimp
    166c:	1518                	addi	a4,sp,672
    166e:	0000                	unimp
    1670:	0900                	addi	s0,sp,144
    1672:	005d                	c.nop	23
    1674:	0000                	unimp
    1676:	1684                	addi	s1,sp,864
    1678:	0000                	unimp
    167a:	6934                	flw	fa3,80(a0)
    167c:	0000                	unimp
    167e:	2100                	fld	fs0,0(a0)
    1680:	0015                	c.nop	5
    1682:	0000                	unimp
    1684:	2a35                	jal	17c0 <result+0xf4>
    1686:	0000                	unimp
    1688:	0100                	addi	s0,sp,128
    168a:	06b6                	slli	a3,a3,0xd
    168c:	00000b63          	beqz	zero,16a2 <product2+0x22e>
    1690:	037a                	slli	t1,t1,0x1e
    1692:	0000                	unimp
    1694:	0166                	slli	sp,sp,0x19
    1696:	0000                	unimp
    1698:	9c01                	0x9c01
    169a:	1795                	addi	a5,a5,-27
    169c:	0000                	unimp
    169e:	6136                	flw	ft2,76(sp)
    16a0:	0100                	addi	s0,sp,128
    16a2:	15b6                	slli	a1,a1,0x2d
    16a4:	00000b63          	beqz	zero,16ba <product2+0x246>
    16a8:	00001407          	0x1407
    16ac:	0006fd37          	lui	s10,0x6f
    16b0:	0100                	addi	s0,sp,128
    16b2:	1cb6                	slli	s9,s9,0x2d
    16b4:	005d                	c.nop	23
    16b6:	0000                	unimp
    16b8:	1441                	addi	s0,s0,-16
    16ba:	0000                	unimp
    16bc:	6236                	flw	ft4,76(sp)
    16be:	0100                	addi	s0,sp,128
    16c0:	29b6                	fld	fs3,328(sp)
    16c2:	00000b63          	beqz	zero,16d8 <result+0xc>
    16c6:	1492                	slli	s1,s1,0x24
    16c8:	0000                	unimp
    16ca:	00070437          	lui	s0,0x70
    16ce:	0100                	addi	s0,sp,128
    16d0:	30b6                	fld	ft1,360(sp)
    16d2:	005d                	c.nop	23
    16d4:	0000                	unimp
    16d6:	14cc                	addi	a1,sp,612
    16d8:	0000                	unimp
    16da:	00052e37          	lui	t3,0x52
    16de:	0100                	addi	s0,sp,128
    16e0:	3cb6                	fld	fs9,360(sp)
    16e2:	005d                	c.nop	23
    16e4:	0000                	unimp
    16e6:	00001503          	lh	a0,0(zero) # 0 <__DYNAMIC>
    16ea:	503a                	0x503a
    16ec:	0006                	c.slli	zero,0x1
    16ee:	0100                	addi	s0,sp,128
    16f0:	09b8                	addi	a4,sp,216
    16f2:	1795                	addi	a5,a5,-27
    16f4:	0000                	unimp
    16f6:	153d                	addi	a0,a0,-17
    16f8:	0000                	unimp
    16fa:	6938                	flw	fa4,80(a0)
    16fc:	0100                	addi	s0,sp,128
    16fe:	09b9                	addi	s3,s3,14
    1700:	005d                	c.nop	23
    1702:	0000                	unimp
    1704:	1581                	addi	a1,a1,-32
    1706:	0000                	unimp
    1708:	6a38                	flw	fa4,80(a2)
    170a:	0100                	addi	s0,sp,128
    170c:	0bb9                	addi	s7,s7,14
    170e:	005d                	c.nop	23
    1710:	0000                	unimp
    1712:	161d                	addi	a2,a2,-25
    1714:	0000                	unimp
    1716:	6b38                	flw	fa4,80(a4)
    1718:	0100                	addi	s0,sp,128
    171a:	0db9                	addi	s11,s11,14
    171c:	005d                	c.nop	23
    171e:	0000                	unimp
    1720:	1651                	addi	a2,a2,-12
    1722:	0000                	unimp
    1724:	743a                	flw	fs0,172(sp)
    1726:	0002                	c.slli64	zero
    1728:	0100                	addi	s0,sp,128
    172a:	0aba                	slli	s5,s5,0xe
    172c:	00000b63          	beqz	zero,1742 <result+0x76>
    1730:	169f 0000 0c3a      	0xc3a0000169f
    1736:	0000                	unimp
    1738:	0100                	addi	s0,sp,128
    173a:	17b109bb          	0x17b109bb
    173e:	0000                	unimp
    1740:	000016b7          	lui	a3,0x1
    1744:	af3a                	fsd	fa4,408(sp)
    1746:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    174a:	09bc                	addi	a5,sp,216
    174c:	17c4                	addi	s1,sp,996
    174e:	0000                	unimp
    1750:	000016d7          	0x16d7
    1754:	00006933          	or	s2,zero,zero
    1758:	f700                	fsw	fs0,40(a4)
    175a:	0016                	c.slli	zero,0x5
    175c:	3300                	fld	fs0,32(a4)
    175e:	0069                	c.nop	26
    1760:	0000                	unimp
    1762:	174c                	addi	a1,sp,932
    1764:	0000                	unimp
    1766:	00006933          	or	s2,zero,zero
    176a:	7e00                	flw	fs0,56(a2)
    176c:	33000017          	auipc	zero,0x33000
    1770:	0069                	c.nop	26
    1772:	0000                	unimp
    1774:	17bc                	addi	a5,sp,1000
    1776:	0000                	unimp
    1778:	da2d                	beqz	a2,16ea <result+0x1e>
    177a:	0004                	0x4
    177c:	1a00                	addi	s0,sp,304
    177e:	001a                	c.slli	zero,0x6
    1780:	2c00                	fld	fs0,24(s0)
    1782:	5a01                	li	s4,-32
    1784:	8602                	jr	a2
    1786:	2c00                	fld	fs0,24(s0)
    1788:	5b01                	li	s6,-32
    178a:	8402                	jr	s0
    178c:	2c00                	fld	fs0,24(s0)
    178e:	5c01                	li	s8,-32
    1790:	8302                	jr	t1
    1792:	0000                	unimp
    1794:	0900                	addi	s0,sp,144
    1796:	005d                	c.nop	23
    1798:	0000                	unimp
    179a:	17b1                	addi	a5,a5,-20
    179c:	0000                	unimp
    179e:	6934                	flw	fa3,80(a0)
    17a0:	0000                	unimp
    17a2:	5400                	lw	s0,40(s0)
    17a4:	34000017          	auipc	zero,0x34000
    17a8:	0069                	c.nop	26
    17aa:	0000                	unimp
    17ac:	175d                	addi	a4,a4,-9
    17ae:	0000                	unimp
    17b0:	0900                	addi	s0,sp,144
    17b2:	005d                	c.nop	23
    17b4:	0000                	unimp
    17b6:	17c4                	addi	s1,sp,996
    17b8:	0000                	unimp
    17ba:	6934                	flw	fa3,80(a0)
    17bc:	0000                	unimp
    17be:	6600                	flw	fs0,8(a2)
    17c0:	00000017          	auipc	zero,0x0
    17c4:	5d09                	li	s10,-30
    17c6:	0000                	unimp
    17c8:	d700                	sw	s0,40(a4)
    17ca:	34000017          	auipc	zero,0x34000
    17ce:	0069                	c.nop	26
    17d0:	0000                	unimp
    17d2:	0000176f          	jal	a4,27d2 <_min_stack+0x7d2>
    17d6:	3500                	fld	fs0,40(a0)
    17d8:	00000117          	auipc	sp,0x0
    17dc:	6f01                	0x6f01
    17de:	6306                	flw	ft6,64(sp)
    17e0:	c200000b          	0xc200000b
    17e4:	0001                	nop
    17e6:	b800                	fsd	fs0,48(s0)
    17e8:	0001                	nop
    17ea:	0100                	addi	s0,sp,128
    17ec:	729c                	flw	fa5,32(a3)
    17ee:	0019                	c.nop	6
    17f0:	3600                	fld	fs0,40(a2)
    17f2:	0061                	c.nop	24
    17f4:	6f01                	0x6f01
    17f6:	6314                	flw	fa3,0(a4)
    17f8:	1100000b          	0x1100000b
    17fc:	0018                	0x18
    17fe:	3700                	fld	fs0,40(a4)
    1800:	06fd                	addi	a3,a3,31
    1802:	0000                	unimp
    1804:	6f01                	0x6f01
    1806:	00005d1b          	0x5d1b
    180a:	4b00                	lw	s0,16(a4)
    180c:	0018                	0x18
    180e:	3600                	fld	fs0,40(a2)
    1810:	0062                	c.slli	zero,0x18
    1812:	6f01                	0x6f01
    1814:	6328                	flw	fa0,64(a4)
    1816:	9c00000b          	0x9c00000b
    181a:	0018                	0x18
    181c:	3700                	fld	fs0,40(a4)
    181e:	0704                	addi	s1,sp,896
    1820:	0000                	unimp
    1822:	6f01                	0x6f01
    1824:	00005d2f          	0x5d2f
    1828:	ec00                	fsw	fs0,24(s0)
    182a:	0018                	0x18
    182c:	3600                	fld	fs0,40(a2)
    182e:	6f6d                	lui	t5,0x1b
    1830:	0064                	addi	s1,sp,12
    1832:	6f01                	0x6f01
    1834:	00005d3b          	0x5d3b
    1838:	2300                	fld	fs0,0(a4)
    183a:	0019                	c.nop	6
    183c:	3700                	fld	fs0,40(a4)
    183e:	052e                	slli	a0,a0,0xb
    1840:	0000                	unimp
    1842:	6f01                	0x6f01
    1844:	5d44                	lw	s1,60(a0)
    1846:	0000                	unimp
    1848:	5a00                	lw	s0,48(a2)
    184a:	0019                	c.nop	6
    184c:	3a00                	fld	fs0,48(a2)
    184e:	0650                	addi	a2,sp,772
    1850:	0000                	unimp
    1852:	7201                	lui	tp,0xfffe0
    1854:	7209                	lui	tp,0xfffe2
    1856:	0019                	c.nop	6
    1858:	8700                	0x8700
    185a:	0019                	c.nop	6
    185c:	3800                	fld	fs0,48(s0)
    185e:	0069                	c.nop	26
    1860:	7301                	lui	t1,0xfffe0
    1862:	5d09                	li	s10,-30
    1864:	0000                	unimp
    1866:	bf00                	fsd	fs0,56(a4)
    1868:	0019                	c.nop	6
    186a:	3800                	fld	fs0,48(s0)
    186c:	006a                	c.slli	zero,0x1a
    186e:	7301                	lui	t1,0xfffe0
    1870:	00005d0b          	0x5d0b
    1874:	6700                	flw	fs0,8(a4)
    1876:	001a                	c.slli	zero,0x6
    1878:	3800                	fld	fs0,48(s0)
    187a:	7301006b          	0x7301006b
    187e:	5d0d                	li	s10,-29
    1880:	0000                	unimp
    1882:	9b00                	0x9b00
    1884:	001a                	c.slli	zero,0x6
    1886:	3a00                	fld	fs0,48(a2)
    1888:	0264                	addi	s1,sp,268
    188a:	0000                	unimp
    188c:	7401                	lui	s0,0xfffe0
    188e:	630a                	flw	ft6,128(sp)
    1890:	e900000b          	0xe900000b
    1894:	001a                	c.slli	zero,0x6
    1896:	3a00                	fld	fs0,48(a2)
    1898:	000c                	0xc
    189a:	0000                	unimp
    189c:	7501                	lui	a0,0xfffe0
    189e:	8e09                	sub	a2,a2,a0
    18a0:	0019                	c.nop	6
    18a2:	0100                	addi	s0,sp,128
    18a4:	3a00001b          	0x3a00001b
    18a8:	000003af          	0x3af
    18ac:	7601                	lui	a2,0xfffe0
    18ae:	a109                	j	1cb0 <random_keys+0x1fc>
    18b0:	0019                	c.nop	6
    18b2:	2d00                	fld	fs0,24(a0)
    18b4:	3300001b          	0x3300001b
    18b8:	0069                	c.nop	26
    18ba:	0000                	unimp
    18bc:	1b7a                	slli	s6,s6,0x3e
    18be:	0000                	unimp
    18c0:	00006933          	or	s2,zero,zero
    18c4:	cf00                	sw	s0,24(a4)
    18c6:	3300001b          	0x3300001b
    18ca:	0069                	c.nop	26
    18cc:	0000                	unimp
    18ce:	1c3e                	slli	s8,s8,0x2f
    18d0:	0000                	unimp
    18d2:	00006933          	or	s2,zero,zero
    18d6:	6c00                	flw	fs0,24(s0)
    18d8:	001c                	0x1c
    18da:	2b00                	fld	fs0,16(a4)
    18dc:	024e                	slli	tp,tp,0x13
    18de:	0000                	unimp
    18e0:	19b4                	addi	a3,sp,248
    18e2:	0000                	unimp
    18e4:	000018fb          	0x18fb
    18e8:	012c                	addi	a1,sp,136
    18ea:	025a                	slli	tp,tp,0x16
    18ec:	008a                	slli	ra,ra,0x2
    18ee:	012c                	addi	a1,sp,136
    18f0:	0084025b          	0x84025b
    18f4:	012c                	addi	a1,sp,136
    18f6:	025c                	addi	a5,sp,260
    18f8:	0188                	addi	a0,sp,192
    18fa:	2b00                	fld	fs0,16(a4)
    18fc:	0260                	addi	s0,sp,268
    18fe:	0000                	unimp
    1900:	19b4                	addi	a3,sp,248
    1902:	0000                	unimp
    1904:	0000191b          	0x191b
    1908:	012c                	addi	a1,sp,136
    190a:	025a                	slli	tp,tp,0x16
    190c:	0072                	c.slli	zero,0x1c
    190e:	012c                	addi	a1,sp,136
    1910:	0084025b          	0x84025b
    1914:	012c                	addi	a1,sp,136
    1916:	025c                	addi	a5,sp,260
    1918:	0082                	c.slli64	ra
    191a:	2b00                	fld	fs0,16(a4)
    191c:	02ea                	slli	t0,t0,0x1a
    191e:	0000                	unimp
    1920:	19b4                	addi	a3,sp,248
    1922:	0000                	unimp
    1924:	0000193b          	0x193b
    1928:	012c                	addi	a1,sp,136
    192a:	025a                	slli	tp,tp,0x16
    192c:	012c0083          	lb	ra,18(s8) # fffe2012 <_stack_start+0xfffd2012>
    1930:	0084025b          	0x84025b
    1934:	012c                	addi	a1,sp,136
    1936:	025c                	addi	a5,sp,260
    1938:	0086                	slli	ra,ra,0x1
    193a:	2b00                	fld	fs0,16(a4)
    193c:	0368                	addi	a0,sp,396
    193e:	0000                	unimp
    1940:	19b4                	addi	a3,sp,248
    1942:	0000                	unimp
    1944:	0000195b          	0x195b
    1948:	012c                	addi	a1,sp,136
    194a:	025a                	slli	tp,tp,0x16
    194c:	0089                	addi	ra,ra,2
    194e:	012c                	addi	a1,sp,136
    1950:	0084025b          	0x84025b
    1954:	012c                	addi	a1,sp,136
    1956:	025c                	addi	a5,sp,260
    1958:	0086                	slli	ra,ra,0x1
    195a:	2d00                	fld	fs0,24(a0)
    195c:	0374                	addi	a3,sp,396
    195e:	0000                	unimp
    1960:	1a1a                	slli	s4,s4,0x26
    1962:	0000                	unimp
    1964:	012c                	addi	a1,sp,136
    1966:	025a                	slli	tp,tp,0x16
    1968:	012c0083          	lb	ra,18(s8)
    196c:	0087025b          	0x87025b
    1970:	0000                	unimp
    1972:	5d09                	li	s10,-30
    1974:	0000                	unimp
    1976:	8e00                	0x8e00
    1978:	0019                	c.nop	6
    197a:	3400                	fld	fs0,40(s0)
    197c:	0069                	c.nop	26
    197e:	0000                	unimp
    1980:	000018b7          	lui	a7,0x1
    1984:	6934                	flw	fa3,80(a0)
    1986:	0000                	unimp
    1988:	c000                	sw	s0,0(s0)
    198a:	0018                	0x18
    198c:	0000                	unimp
    198e:	5d09                	li	s10,-30
    1990:	0000                	unimp
    1992:	a100                	fsd	fs0,0(a0)
    1994:	0019                	c.nop	6
    1996:	3400                	fld	fs0,40(s0)
    1998:	0069                	c.nop	26
    199a:	0000                	unimp
    199c:	18c9                	addi	a7,a7,-14
    199e:	0000                	unimp
    19a0:	0900                	addi	s0,sp,144
    19a2:	005d                	c.nop	23
    19a4:	0000                	unimp
    19a6:	19b4                	addi	a3,sp,248
    19a8:	0000                	unimp
    19aa:	6934                	flw	fa3,80(a0)
    19ac:	0000                	unimp
    19ae:	d200                	sw	s0,32(a2)
    19b0:	0018                	0x18
    19b2:	0000                	unimp
    19b4:	0005863b          	0x5863b
    19b8:	0100                	addi	s0,sp,128
    19ba:	ef01064b          	fnmsub.q	fa2,ft2,fa6,ft9,rne
    19be:	0019                	c.nop	6
    19c0:	3c00                	fld	fs0,56(s0)
    19c2:	3161                	jal	164a <product2+0x1d6>
    19c4:	0100                	addi	s0,sp,128
    19c6:	0b63154b          	fnmsub.d	fa0,ft6,fs6,ft1,rtz
    19ca:	0000                	unimp
    19cc:	6d3c                	flw	fa5,88(a0)
    19ce:	0100646f          	jal	s0,79de <_stack_len+0x39de>
    19d2:	005d1d4b          	fnmsub.s	fs10,fs10,ft5,ft0,rtz
    19d6:	0000                	unimp
    19d8:	613d                	addi	sp,sp,480
    19da:	0005                	c.nop	1
    19dc:	0100                	addi	s0,sp,128
    19de:	005d254b          	fnmsub.s	fa0,fs10,ft5,ft0,rdn
    19e2:	0000                	unimp
    19e4:	6939                	lui	s2,0xe
    19e6:	0100                	addi	s0,sp,128
    19e8:	0550                	addi	a2,sp,644
    19ea:	005d                	c.nop	23
    19ec:	0000                	unimp
    19ee:	3b00                	fld	fs0,48(a4)
    19f0:	010d                	addi	sp,sp,3
    19f2:	0000                	unimp
    19f4:	3e01                	jal	1504 <product2+0x90>
    19f6:	0106                	slli	sp,sp,0x1
    19f8:	1a14                	addi	a3,sp,304
    19fa:	0000                	unimp
    19fc:	613c                	flw	fa5,64(a0)
    19fe:	0031                	c.nop	12
    1a00:	3e01                	jal	1510 <product2+0x9c>
    1a02:	141e                	slli	s0,s0,0x27
    1a04:	001a                	c.slli	zero,0x6
    1a06:	3c00                	fld	fs0,56(s0)
    1a08:	6f6d                	lui	t5,0x1b
    1a0a:	0064                	addi	s1,sp,12
    1a0c:	3e01                	jal	151c <product2+0xa8>
    1a0e:	0000692f          	0x692f
    1a12:	0000                	unimp
    1a14:	0410                	addi	a2,sp,512
    1a16:	0069                	c.nop	26
    1a18:	0000                	unimp
    1a1a:	7c3e                	flw	fs8,236(sp)
    1a1c:	0005                	c.nop	1
    1a1e:	0100                	addi	s0,sp,128
    1a20:	00920623          	sb	s1,12(tp) # fffe200c <_stack_start+0xfffd200c>
    1a24:	0000                	unimp
    1a26:	009e                	slli	ra,ra,0x7
    1a28:	0000                	unimp
    1a2a:	9c01                	0x9c01
    1a2c:	1adc                	addi	a5,sp,372
    1a2e:	0000                	unimp
    1a30:	6136                	flw	ft2,76(sp)
    1a32:	0031                	c.nop	12
    1a34:	2301                	jal	1f34 <random_keys+0x480>
    1a36:	6315                	lui	t1,0x5
    1a38:	c100000b          	0xc100000b
    1a3c:	001c                	0x1c
    1a3e:	3f00                	fld	fs0,56(a4)
    1a40:	3261                	jal	13c8 <_bss_start+0x1ac>
    1a42:	0100                	addi	s0,sp,128
    1a44:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    1a48:	0000                	unimp
    1a4a:	5b01                	li	s6,-32
    1a4c:	00056137          	lui	sp,0x56
    1a50:	0100                	addi	s0,sp,128
    1a52:	005d2623          	sw	t0,12(s10) # 6f00c <_stack_start+0x5f00c>
    1a56:	0000                	unimp
    1a58:	1ced                	addi	s9,s9,-5
    1a5a:	0000                	unimp
    1a5c:	6938                	flw	fa4,80(a0)
    1a5e:	0100                	addi	s0,sp,128
    1a60:	0524                	addi	s1,sp,648
    1a62:	005d                	c.nop	23
    1a64:	0000                	unimp
    1a66:	00001d4b          	fnmsub.s	fs10,ft0,ft0,ft0,rtz
    1a6a:	dc40                	sw	s0,60(s0)
    1a6c:	001a                	c.slli	zero,0x6
    1a6e:	fe00                	fsw	fs0,56(a2)
    1a70:	0000                	unimp
    1a72:	0a00                	addi	s0,sp,272
    1a74:	0000                	unimp
    1a76:	0100                	addi	s0,sp,128
    1a78:	1129                	addi	sp,sp,-22
    1a7a:	1a91                	addi	s5,s5,-28
    1a7c:	0000                	unimp
    1a7e:	f441                	bnez	s0,1a06 <ti_2+0xe2>
    1a80:	001a                	c.slli	zero,0x6
    1a82:	a300                	fsd	fs0,0(a4)
    1a84:	001d                	c.nop	7
    1a86:	4100                	lw	s0,0(a0)
    1a88:	1ae9                	addi	s5,s5,-6
    1a8a:	0000                	unimp
    1a8c:	1dc6                	slli	s11,s11,0x31
    1a8e:	0000                	unimp
    1a90:	4000                	lw	s0,0(s0)
    1a92:	1adc                	addi	a5,sp,372
    1a94:	0000                	unimp
    1a96:	0110                	addi	a2,sp,128
    1a98:	0000                	unimp
    1a9a:	000a                	c.slli	zero,0x2
    1a9c:	0000                	unimp
    1a9e:	2e01                	jal	1dae <random_keys+0x2fa>
    1aa0:	b811                	j	12b4 <_bss_start+0x98>
    1aa2:	001a                	c.slli	zero,0x6
    1aa4:	4100                	lw	s0,0(a0)
    1aa6:	1af4                	addi	a3,sp,380
    1aa8:	0000                	unimp
    1aaa:	1de9                	addi	s11,s11,-6
    1aac:	0000                	unimp
    1aae:	e941                	bnez	a0,1b3e <random_keys+0x8a>
    1ab0:	001a                	c.slli	zero,0x6
    1ab2:	0c00                	addi	s0,sp,528
    1ab4:	001e                	c.slli	zero,0x7
    1ab6:	0000                	unimp
    1ab8:	dc42                	sw	a6,56(sp)
    1aba:	001a                	c.slli	zero,0x6
    1abc:	2200                	fld	fs0,0(a2)
    1abe:	0001                	nop
    1ac0:	0a00                	addi	s0,sp,272
    1ac2:	0000                	unimp
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	1134                	addi	a3,sp,168
    1ac8:	f441                	bnez	s0,1a50 <ti_2+0x12c>
    1aca:	001a                	c.slli	zero,0x6
    1acc:	2f00                	fld	fs0,24(a4)
    1ace:	001e                	c.slli	zero,0x7
    1ad0:	4100                	lw	s0,0(a0)
    1ad2:	1ae9                	addi	s5,s5,-6
    1ad4:	0000                	unimp
    1ad6:	1e52                	slli	t3,t3,0x34
    1ad8:	0000                	unimp
    1ada:	0000                	unimp
    1adc:	00003a3b          	0x3a3b
    1ae0:	0100                	addi	s0,sp,128
    1ae2:	0001060f          	0x1060f
    1ae6:	3c00001b          	0x3c00001b
    1aea:	3161                	jal	1772 <result+0xa6>
    1aec:	0100                	addi	s0,sp,128
    1aee:	1a141e0f          	0x1a141e0f
    1af2:	0000                	unimp
    1af4:	613c                	flw	fa5,64(a0)
    1af6:	0032                	c.slli	zero,0xc
    1af8:	0f01                	addi	t5,t5,0
    1afa:	1430                	addi	a2,sp,552
    1afc:	001a                	c.slli	zero,0x6
    1afe:	0000                	unimp
    1b00:	001adc43          	fmadd.s	fs8,fs5,ft1,ft0,unknown
    1b04:	8c00                	0x8c00
    1b06:	0000                	unimp
    1b08:	0600                	addi	s0,sp,768
    1b0a:	0000                	unimp
    1b0c:	0100                	addi	s0,sp,128
    1b0e:	249c                	fld	fa5,8(s1)
    1b10:	4100001b          	0x4100001b
    1b14:	1ae9                	addi	s5,s5,-6
    1b16:	0000                	unimp
    1b18:	1e75                	addi	t3,t3,-3
    1b1a:	0000                	unimp
    1b1c:	f444                	fsw	fs1,44(s0)
    1b1e:	001a                	c.slli	zero,0x6
    1b20:	0100                	addi	s0,sp,128
    1b22:	ef43005b          	0xef43005b
    1b26:	0019                	c.nop	6
    1b28:	3000                	fld	fs0,32(s0)
    1b2a:	0001                	nop
    1b2c:	0600                	addi	s0,sp,768
    1b2e:	0000                	unimp
    1b30:	0100                	addi	s0,sp,128
    1b32:	489c                	lw	a5,16(s1)
    1b34:	4100001b          	0x4100001b
    1b38:	19fc                	addi	a5,sp,252
    1b3a:	0000                	unimp
    1b3c:	1e88                	addi	a0,sp,880
    1b3e:	0000                	unimp
    1b40:	0744                	addi	s1,sp,900
    1b42:	001a                	c.slli	zero,0x6
    1b44:	0100                	addi	s0,sp,128
    1b46:	b443005b          	0xb443005b
    1b4a:	0019                	c.nop	6
    1b4c:	3600                	fld	fs0,40(a2)
    1b4e:	0001                	nop
    1b50:	8c00                	0x8c00
    1b52:	0000                	unimp
    1b54:	0100                	addi	s0,sp,128
    1b56:	1e9c                	addi	a5,sp,880
    1b58:	001c                	0x1c
    1b5a:	4400                	lw	s0,8(s0)
    1b5c:	19c1                	addi	s3,s3,-16
    1b5e:	0000                	unimp
    1b60:	5a01                	li	s4,-32
    1b62:	cc41                	beqz	s0,1bfa <random_keys+0x146>
    1b64:	0019                	c.nop	6
    1b66:	9b00                	0x9b00
    1b68:	001e                	c.slli	zero,0x7
    1b6a:	4100                	lw	s0,0(a0)
    1b6c:	19d8                	addi	a4,sp,244
    1b6e:	0000                	unimp
    1b70:	00001ec7          	fmsub.s	ft9,ft0,ft0,ft0,rtz
    1b74:	e445                	bnez	s0,1c1c <random_keys+0x168>
    1b76:	0019                	c.nop	6
    1b78:	2500                	fld	fs0,8(a0)
    1b7a:	001f 4600 19ef      	0x19ef4600001f
    1b80:	0000                	unimp
    1b82:	014e                	slli	sp,sp,0x13
    1b84:	0000                	unimp
    1b86:	0000                	unimp
    1b88:	0000                	unimp
    1b8a:	5601                	li	a2,-32
    1b8c:	a411                	j	1d90 <random_keys+0x2dc>
    1b8e:	4100001b          	0x4100001b
    1b92:	00001a07          	0x1a07
    1b96:	1f72                	slli	t5,t5,0x3c
    1b98:	0000                	unimp
    1b9a:	fc41                	bnez	s0,1b32 <random_keys+0x7e>
    1b9c:	0019                	c.nop	6
    1b9e:	8500                	0x8500
    1ba0:	001f 0000 b446      	0xb4460000001f
    1ba6:	0019                	c.nop	6
    1ba8:	5600                	lw	s0,40(a2)
    1baa:	0001                	nop
    1bac:	1800                	addi	s0,sp,48
    1bae:	0000                	unimp
    1bb0:	0100                	addi	s0,sp,128
    1bb2:	1bfa064b          	fnmsub.d	fa2,fs4,ft11,ft3,rne
    1bb6:	0000                	unimp
    1bb8:	0019d847          	fmsub.s	fa6,fs3,ft1,ft0,unknown
    1bbc:	4700                	lw	s0,8(a4)
    1bbe:	19cc                	addi	a1,sp,244
    1bc0:	0000                	unimp
    1bc2:	0019c147          	fmsub.s	ft2,fs3,ft1,ft0,rmm
    1bc6:	4800                	lw	s0,16(s0)
    1bc8:	0018                	0x18
    1bca:	0000                	unimp
    1bcc:	e445                	bnez	s0,1c74 <random_keys+0x1c0>
    1bce:	0019                	c.nop	6
    1bd0:	9f00                	0x9f00
    1bd2:	001f 4900 19ef      	0x19ef4900001f
    1bd8:	0000                	unimp
    1bda:	0160                	addi	s0,sp,140
    1bdc:	0000                	unimp
    1bde:	0038                	addi	a4,sp,8
    1be0:	0000                	unimp
    1be2:	6101                	0x6101
    1be4:	4111                	li	sp,4
    1be6:	00001a07          	0x1a07
    1bea:	1fbd                	addi	t6,t6,-17
    1bec:	0000                	unimp
    1bee:	fc41                	bnez	s0,1b86 <random_keys+0xd2>
    1bf0:	0019                	c.nop	6
    1bf2:	d000                	sw	s0,32(s0)
    1bf4:	001f 0000 0000      	0x1f
    1bfa:	ef49                	bnez	a4,1c94 <random_keys+0x1e0>
    1bfc:	0019                	c.nop	6
    1bfe:	8200                	0x8200
    1c00:	0001                	nop
    1c02:	5000                	lw	s0,32(s0)
    1c04:	0000                	unimp
    1c06:	0100                	addi	s0,sp,128
    1c08:	0741115b          	0x741115b
    1c0c:	001a                	c.slli	zero,0x6
    1c0e:	ea00                	fsw	fs0,16(a2)
    1c10:	001f 4100 19fc      	0x19fc4100001f
    1c16:	0000                	unimp
    1c18:	1ffd                	addi	t6,t6,-1
    1c1a:	0000                	unimp
    1c1c:	0000                	unimp
    1c1e:	6e4a                	flw	ft8,144(sp)
    1c20:	64000003          	lb	zero,1600(zero) # 640 <polydiv+0x160>
    1c24:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1c28:	4a00                	lw	s0,16(a2)
    1c2a:	006e                	c.slli	zero,0x1b
    1c2c:	0000                	unimp
    1c2e:	0064                	addi	s1,sp,12
    1c30:	0000                	unimp
    1c32:	1e000007          	0x1e000007
    1c36:	0000                	unimp
    1c38:	0200                	addi	s0,sp,256
    1c3a:	4f00                	lw	s0,24(a4)
    1c3c:	0004                	0x4
    1c3e:	0400                	addi	s0,sp,512
    1c40:	7e01                	lui	t3,0xfffe0
    1c42:	0025                	c.nop	9
    1c44:	8000                	0x8000
    1c46:	0000                	unimp
    1c48:	0b00                	addi	s0,sp,400
    1c4a:	12000007          	0x12000007
    1c4e:	40000007          	0x40000007
    1c52:	01000007          	0x1000007
    1c56:	80              	Address 0x0000000000001c56 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x122>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 20b3 <_min_stack+0xb3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	0b390b3b          	0xb390b3b
            a1[length-2] = a1[length-2] + a2[length-2];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
} //end of function
  f8:	1400                	addi	s0,sp,544
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
    asm volatile(
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
            for (i = 0; i < (length / 3); i++) {
 108:	16000013          	li	zero,352
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	39053b0b          	0x39053b0b
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0013010b          	0x13010b
    asm volatile(
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
 12a:	0b39053b          	0xb39053b
            for (i = 0; i < ((length-2) / 3); i++) {
 12e:	1349                	addi	t1,t1,-14
    asm volatile(
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
}
 134:	0d19                	addi	s10,s10,6
    switch(length%3) {
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            for (i = 0; i < (length / 3); i++) {
 14a:	0b3a0b0b          	0xb3a0b0b
    asm volatile(
 14e:	0b39053b          	0xb39053b
            for (i = 0; i < (length / 3); i++) {
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    asm volatile(
 160:	0013010b          	0x13010b
            for (i = 0; i < ((length-2) / 3); i++) {
 164:	1c00                	addi	s0,sp,560
            a1[length-1] = a1[length-1] % mod;
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
 17e:	0013490b          	0x13490b
    asm volatile(
 182:	1e00                	addi	s0,sp,816
            for (i = 0; i < ((length-1) / 3); i++) {
 184:	0e030013          	addi	zero,t1,224
            a1[length-1] = a1[length-1] % mod;
 188:	193c                	addi	a5,sp,184
            a1[length-2] = a1[length-2] % mod;
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
 192:	20000013          	li	zero,512
} //end of function
 196:	0034                	addi	a3,sp,8
    asm volatile(
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
            for (i = 0; i < (length / 3); i++) {
 1a2:	193c193f 34210000 	0x34210000193c193f
    asm volatile(
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
            for (i = 0; i < ((length-1) / 3); i++) {
 1b2:	3f13490b          	0x3f13490b
    asm volatile(
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
            for (i = 0; i < ((length-2) / 3); i++) {
 1be:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0x108>
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
    int line[size_b][size_a + size_b];
 1ea:	3f01                	jal	fa <array_add+0x68>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1f8:	1201                	addi	tp,tp,-32
    int polb[size_b];
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
    int line[size_b][size_a + size_b];
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
    int pola[size_a];
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
            product[j] = 0;
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
    int line[size_b][size_a + size_b];
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
    int pola[size_a];
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
    int line[size_b][size_a + size_b];
 226:	3428                	fld	fa0,104(s0)
    int pola[size_a];
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    int polb[size_b];
 230:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_a; ++i){
 23e:	0b39053b          	0xb39053b
    array_mod(pola,mod,size_a);
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
    array_mod(polb,mod,size_b);
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
    if(star_mult == 1){
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
        for (j = size_b -1; j >= 0; j = j-1){
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
            for (k = size_a-1; k >= 0; k = k-1 ){
 278:	2e000013          	li	zero,736
            product[j] = 0;
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
            line[i][j] = 0;
 284:	3f012e2f          	0x3f012e2f
            product[j] = 0;
 288:	0319                	addi	t1,t1,6
        for(j = 0; j < size_a + size_b -1; ++j){
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
    for (i = 0; i < size_b; ++i){
 294:	12011113          	0x12011113
 298:	4006                	0x4006
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
        pola[i] = a[i];
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
        polb[i] = b[i];
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_b; ++i){
 2c0:	1702                	slli	a4,a4,0x20
    if(star_mult == 1){
 2c2:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
            for (k = size_a-1; k >= 0; k = k-1 ){
 2c8:	3a08                	fld	fa0,48(a2)
    for (i = 0; i < size_b; ++i){
 2ca:	39053b0b          	0x39053b0b
        for(i = 0; i < size_b; ++i){
 2ce:	0213490b          	0x213490b
            array_add(product,line[i],size_a+size_b-1);
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
        for(i = 0; i < size_b; ++i){
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
    array_mod(product,mod,(size_a+size_b-1));
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
}
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
                line[size_b-1-j][k] = pola[k]*polb[j];
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 32c:	0b3a0803          	lb	a6,179(s4)
        for (j = size_b -1; j >= 0; j = j-1){
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
            for (k = size_a-1; k >= 0; k = k-1 ){
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 34c:	0b3a0e03          	lb	t3,179(s4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 350:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
        for (j = size_b -1; j >= 0; j = j-1){
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
        array_mod(line[i],mod,(size_a+size_b-1));
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
 366:	2019270b          	0x2019270b
    for (i = 0; i < size_b; ++i){
 36a:	0013010b          	0x13010b
            array_add(product,line[i],size_a+size_b-1);
 36e:	3c00                	fld	fs0,56(s0)
 370:	0005                	c.nop	1
 372:	0b3a0803          	lb	a6,179(s4)
        for(i = 0; i < size_b; ++i){
 376:	0b390b3b          	0xb390b3b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 37a:	1349                	addi	t1,t1,-14
 37c:	0000                	unimp
 37e:	053d                	addi	a0,a0,15
    int line[size_b][size_a + size_b];
 380:	0300                	addi	s0,sp,384
 382:	3a0e                	fld	fs4,224(sp)
 384:	390b3b0b          	0x390b3b0b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 388:	0013490b          	0x13490b
    int line[size_b][size_a + size_b];
 38c:	3e00                	fld	fs0,56(a2)
 38e:	012e                	slli	sp,sp,0xb
 390:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 398:	0b39                	addi	s6,s6,14
 39a:	01111927          	0x1111927
 39e:	0612                	slli	a2,a2,0x4
 3a0:	1840                	addi	s0,sp,52
 3a2:	01194297          	auipc	t0,0x1194
    int pola[size_a];
 3a6:	3f000013          	li	zero,1008
    int line[size_b][size_a + size_b];
 3aa:	0005                	c.nop	1
 3ac:	0b3a0803          	lb	a6,179(s4)
 3b0:	0b390b3b          	0xb390b3b
    int pola[size_a];
 3b4:	1349                	addi	t1,t1,-14
 3b6:	1802                	slli	a6,a6,0x20
 3b8:	0000                	unimp
    int line[size_b][size_a + size_b];
 3ba:	1d40                	addi	s0,sp,692
    int pola[size_a];
 3bc:	3101                	jal	ffffffbc <_stack_start+0xfffeffbc>
 3be:	12011113          	0x12011113
    int polb[size_b];
 3c2:	5806                	lw	a6,96(sp)
 3c4:	570b590b          	0x570b590b
 3c8:	0013010b          	0x13010b
    int line[size_b][size_a + size_b];
 3cc:	4100                	lw	s0,0(a0)
    int polb[size_b];
 3ce:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
 3d0:	1331                	addi	t1,t1,-20
 3d2:	1702                	slli	a4,a4,0x20
 3d4:	0000                	unimp
            product2[j] = 0;
 3d6:	1d42                	slli	s10,s10,0x30
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
 3da:	12011113          	0x12011113
    for (i = 0; i < size_b; ++i){
 3de:	5806                	lw	a6,96(sp)
 3e0:	570b590b          	0x570b590b
    for(i = 0; i < size_a; ++i){
 3e4:	4300000b          	0x4300000b
    for(i = 0; i < size_b; ++i){
 3e8:	012e                	slli	sp,sp,0xb
 3ea:	1331                	addi	t1,t1,-20
 3ec:	0111                	addi	sp,sp,4
    if(star_mult == 1){
 3ee:	0612                	slli	a2,a2,0x4
 3f0:	1840                	addi	s0,sp,52
 3f2:	01194297          	auipc	t0,0x1194
 3f6:	44000013          	li	zero,1088
 3fa:	0005                	c.nop	1
 3fc:	1331                	addi	t1,t1,-20
        for (j = size_b -1; j >= 0; j = j-1){
 3fe:	1802                	slli	a6,a6,0x20
 400:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 402:	3445                	jal	fffffea2 <_stack_start+0xfffefea2>
 404:	3100                	fld	fs0,32(a0)
            product2[j] = 0;
 406:	00170213          	addi	tp,a4,1 # fffe0001 <_stack_start+0xfffd0001>
 40a:	4600                	lw	s0,8(a2)
            line[i][j] = 0;
 40c:	011d                	addi	sp,sp,7
 40e:	1331                	addi	t1,t1,-20
            product2[j] = 0;
 410:	0152                	slli	sp,sp,0x14
 412:	1755                	addi	a4,a4,-11
        for(j = 0; j < size_a + size_b -1; ++j){
 414:	0b58                	addi	a4,sp,404
 416:	0b59                	addi	s6,s6,22
 418:	13010b57          	0x13010b57
    for (i = 0; i < size_b; ++i){
 41c:	0000                	unimp
 41e:	31000547          	fmsub.s	fa0,ft0,fa6,ft6,rne
 422:	48000013          	li	zero,1152
        for(j = 0; j < size_a + size_b -1; ++j){
 426:	1755010b          	0x1755010b
        pola[i] = a[i];
 42a:	0000                	unimp
 42c:	1d49                	addi	s10,s10,-14
 42e:	3101                	jal	2e <__DYNAMIC+0x2e>
 430:	55015213          	0x55015213
 434:	590b5817          	auipc	a6,0x590b5
 438:	000b570b          	0xb570b
    for(i = 0; i < size_a; ++i){
 43c:	4a00                	lw	s0,16(a2)
        polb[i] = b[i];
 43e:	002e                	c.slli	zero,0xb
 440:	193c193f 0e030e6e 	0xe030e6e193c193f
 448:	0b3a                	slli	s6,s6,0xe
 44a:	00000b3b          	0xb3b
 44e:	0100                	addi	s0,sp,128
 450:	0011                	c.nop	4
    for(i = 0; i < size_b; ++i){
 452:	0610                	addi	a2,sp,768
                line[size_b-1-j][k] = pola[k]*polb[j];
 454:	0655                	addi	a2,a2,21
 456:	0e1b0e03          	lb	t3,225(s6)
 45a:	0e25                	addi	t3,t3,9
 45c:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	1022                	c.slli	zero,0x28
       2:	0000                	unimp
       4:	1036                	c.slli	zero,0x2d
       6:	0000                	unimp
       8:	0001                	nop
       a:	365a                	fld	fa2,432(sp)
       c:	0010                	0x10
       e:	3700                	fld	fs0,40(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1038                	addi	a4,sp,40
      20:	0000                	unimp
      22:	1078                	addi	a4,sp,44
      24:	0000                	unimp
      26:	0001                	nop
      28:	7e5a                	flw	ft8,180(sp)
      2a:	0010                	0x10
      2c:	8800                	0x8800
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f96                	slli	t6,t6,0x5
      3e:	0000                	unimp
      40:	0fea                	slli	t6,t6,0x1a
      42:	0000                	unimp
      44:	0001                	nop
      46:	ea5a                	fsw	fs6,20(sp)
      48:	1200000f          	0x1200000f
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	7800                	flw	fs0,48(s0)
      5e:	cc00000f          	0xcc00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fcc                	addi	a1,sp,980
      6c:	0000                	unimp
      6e:	0fd6                	slli	t6,t6,0x15
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0fd6                	slli	t6,t6,0x15
      78:	0000                	unimp
      7a:	1015                	c.nop	-27
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1015                	c.nop	-27
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	107c                	addi	a5,sp,44
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	7c79                	lui	s8,0xffffe
}
      90:	0010                	0x10
    switch(length%3) {
      92:	7e00                	flw	fs0,56(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	107e                	c.slli	zero,0x3f
      9e:	0000                	unimp
      a0:	1088                	addi	a0,sp,96
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	7800                	flw	fs0,48(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	a600000f          	0xa600000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fa6                	slli	t6,t6,0x9
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	0fa8                	addi	a0,sp,984
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0fa8                	addi	a0,sp,984
      cc:	0000                	unimp
      ce:	102e                	c.slli	zero,0x2b
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	2e7a                	fld	ft8,408(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	0010                	0x10
      da:	3700                	fld	fs0,40(a4)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	3700                	fld	fs0,40(a4)
      e4:	0010                	0x10
      e6:	7c00                	flw	fs0,56(s0)
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	0010                	0x10
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	107c                	addi	a5,sp,44
      f2:	0000                	unimp
      f4:	107e                	c.slli	zero,0x3f
      f6:	0000                	unimp
} //end of function
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fc:	7e7a                	flw	ft8,188(sp)
    asm volatile(
      fe:	0010                	0x10
     100:	8800                	0x8800
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
            for (i = 0; i < (length / 3); i++) {
     108:	7af0                	flw	fa2,116(a3)
	...
    asm volatile(
     112:	0f78                	addi	a4,sp,924
     114:	0000                	unimp
     116:	0fb2                	slli	t6,t6,0xc
     118:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	c4910003          	lb	zero,-951(sp)
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	b27c                	fsd	fa5,224(a2)
     120:	bc00000f          	0xbc00000f
    asm volatile(
     124:	0200000f          	fence	r,unknown
     128:	7e00                	flw	fs0,56(a2)
     12a:	bc00                	fsd	fs0,56(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	7600000f          	0x7600000f
    asm volatile(
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
}
     134:	8200                	0x8200
    switch(length%3) {
     136:	7600                	flw	fs0,40(a2)
     138:	0010                	0x10
     13a:	7c00                	flw	fs0,56(s0)
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	107c                	addi	a5,sp,44
     146:	0000                	unimp
     148:	107e                	c.slli	zero,0x3f
            for (i = 0; i < (length / 3); i++) {
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	7e7c                	flw	fa5,124(a2)
     152:	0010                	0x10
     154:	8800                	0x8800
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
     164:	7800                	flw	fs0,48(s0)
            a1[length-1] = a1[length-1] % mod;
     166:	e600000f          	0xe600000f
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	0fe6                	slli	t6,t6,0x19
     174:	0000                	unimp
     176:	0fec                	addi	a1,sp,988
            for (i = 0; i < ((length-1) / 3); i++) {
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
     17e:	0fec                	addi	a1,sp,988
     180:	0000                	unimp
    asm volatile(
     182:	1015                	c.nop	-27
            for (i = 0; i < ((length-1) / 3); i++) {
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
            a1[length-1] = a1[length-1] % mod;
     188:	0080                	addi	s0,sp,64
            a1[length-2] = a1[length-2] % mod;
     18a:	1015                	c.nop	-27
     18c:	0000                	unimp
     18e:	107c                	addi	a5,sp,44
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
} //end of function
     196:	7c7e                	flw	fs8,252(sp)
    asm volatile(
     198:	0010                	0x10
     19a:	7e00                	flw	fs0,56(a2)
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
            for (i = 0; i < (length / 3); i++) {
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	107e                	c.slli	zero,0x3f
    asm volatile(
     1a6:	0000                	unimp
     1a8:	1088                	addi	a0,sp,96
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
    asm volatile(
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	9a00                	0x9a00
     1ba:	9e00000f          	0x9e00000f
            for (i = 0; i < ((length-2) / 3); i++) {
     1be:	0200000f          	fence	r,unknown
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	429f 0010 4c00      	0x4c000010429f
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
     1d8:	8e00                	0x8e00
     1da:	000c                	0xc
     1dc:	a600                	fsd	fs0,8(a2)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0ca6                	slli	s9,s9,0x9
     1e6:	0000                	unimp
    int line[size_b][size_a + size_b];
     1e8:	0d0c                	addi	a1,sp,656
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	0c58                	addi	a4,sp,532
     1f0:	000d                	c.nop	3
     1f2:	1800                	addi	s0,sp,48
     1f4:	000d                	c.nop	3
     1f6:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1f8:	8600                	0x8600
    int polb[size_b];
     1fa:	9f7f                	0x9f7f
     1fc:	0d18                	addi	a4,sp,656
     1fe:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     200:	0d1e                	slli	s10,s10,0x7
     202:	0000                	unimp
    int line[size_b][size_a + size_b];
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
    int pola[size_a];
     20a:	0d1e                	slli	s10,s10,0x7
    for (i = 0; i < size_b; ++i){
     20c:	0000                	unimp
            product[j] = 0;
     20e:	0d54                	addi	a3,sp,660
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
    int line[size_b][size_a + size_b];
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	8e00                	0x8e00
    int pola[size_a];
     21e:	000c                	0xc
     220:	b000                	fsd	fs0,32(s0)
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     226:	5b00                	lw	s0,48(a4)
    int pola[size_a];
     228:	0cb0                	addi	a2,sp,600
     22a:	0000                	unimp
     22c:	0d16                	slli	s10,s10,0x5
    int polb[size_b];
     22e:	0000                	unimp
     230:	0001                	nop
     232:	1665                	addi	a2,a2,-7
    for (i = 0; i < size_b; ++i){
     234:	000d                	c.nop	3
     236:	1e00                	addi	s0,sp,816
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
    for (i = 0; i < size_a; ++i){
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	1e9f 000d 5400      	0x5400000d1e9f
    array_mod(pola,mod,size_a);
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
    for (i = 0; i < size_b; ++i){
     254:	0c8e                	slli	s9,s9,0x3
     256:	0000                	unimp
    array_mod(polb,mod,size_b);
     258:	0ca8                	addi	a0,sp,600
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	a85c                	fsd	fa5,144(s0)
    if(star_mult == 1){
     260:	000c                	0xc
     262:	1000                	addi	s0,sp,32
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d10                	addi	a2,sp,656
     26c:	0000                	unimp
     26e:	0d1e                	slli	s10,s10,0x7
     270:	0000                	unimp
     272:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     274:	9f5c01f3          	0x9f5c01f3
            for (k = size_a-1; k >= 0; k = k-1 ){
     278:	0d1e                	slli	s10,s10,0x7
     27a:	0000                	unimp
            product[j] = 0;
     27c:	0d54                	addi	a3,sp,660
     27e:	0000                	unimp
     280:	0001                	nop
            line[i][j] = 0;
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
            product[j] = 0;
     286:	0000                	unimp
     288:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     28a:	8e00                	0x8e00
     28c:	000c                	0xc
     28e:	aa00                	fsd	fs0,16(a2)
     290:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
     296:	0caa                	slli	s9,s9,0xa
     298:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	00000cc3          	fmadd.s	fs9,ft0,ft0,ft0,rne
        pola[i] = a[i];
     29e:	0001                	nop
     2a0:	c35a                	sw	s6,132(sp)
     2a2:	000c                	0xc
     2a4:	5400                	lw	s0,40(s0)
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
    for (i = 0; i < size_a; ++i){
     2aa:	f300                	fsw	fs0,32(a4)
        pola[i] = a[i];
     2ac:	5d01                	li	s10,-32
    for (i = 0; i < size_a; ++i){
     2ae:	009f 0000 0000      	0x9f
        polb[i] = b[i];
     2b4:	0000                	unimp
     2b6:	8e00                	0x8e00
     2b8:	000c                	0xc
     2ba:	b200                	fsd	fs0,32(a2)
    for (i = 0; i < size_b; ++i){
     2bc:	000c                	0xc
        polb[i] = b[i];
     2be:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2c0:	5e00                	lw	s0,56(a2)
    if(star_mult == 1){
     2c2:	0cb2                	slli	s9,s9,0xc
        for (j = size_b -1; j >= 0; j = j-1){
     2c4:	0000                	unimp
     2c6:	0d1a                	slli	s10,s10,0x6
            for (k = size_a-1; k >= 0; k = k-1 ){
     2c8:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ca:	0001                	nop
     2cc:	000d1a67          	0xd1a67
            array_add(product,line[i],size_a+size_b-1);
     2d0:	1e00                	addi	s0,sp,816
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
        for(i = 0; i < size_b; ++i){
     2da:	1e9f 000d 5400      	0x5400000d1e9f
    array_mod(product,mod,(size_a+size_b-1));
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
}
     2ee:	0c8e                	slli	s9,s9,0x3
     2f0:	0000                	unimp
     2f2:	00000cc3          	fmadd.s	fs9,ft0,ft0,ft0,rne
     2f6:	0001                	nop
     2f8:	c35f 000c 5400      	0x5400000cc35f
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	8e00                	0x8e00
     310:	000c                	0xc
     312:	c300                	sw	s0,0(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	00000cc3          	fmadd.s	fs9,ft0,ft0,ft0,rne
     31e:	0d14                	addi	a3,sp,656
     320:	0000                	unimp
     322:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	1464                	addi	s1,sp,556
                line[size_b-1-j][k] = pola[k]*polb[j];
     326:	000d                	c.nop	3
     328:	1e00                	addi	s0,sp,816
     32a:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     330:	6001                	0x6001
     332:	1e9f 000d 5400      	0x5400000d1e9f
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33c:	6400                	flw	fs0,8(s0)
	...
     346:	0cc4                	addi	s1,sp,596
     348:	0000                	unimp
     34a:	0cd1                	addi	s9,s9,20
            for (k = size_a-1; k >= 0; k = k-1 ){
     34c:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     354:	0000                	unimp
     356:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     358:	d400                	sw	s0,40(s0)
     35a:	000c                	0xc
     35c:	f200                	fsw	fs0,32(a2)
     35e:	000c                	0xc
        array_mod(line[i],mod,(size_a+size_b-1));
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0cf2                	slli	s9,s9,0x1c
     366:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     368:	0cf5                	addi	s9,s9,29
     36a:	0000                	unimp
     36c:	0001                	nop
            array_add(product,line[i],size_a+size_b-1);
     36e:	1e5c                	addi	a5,sp,820
     370:	000d                	c.nop	3
     372:	4200                	lw	s0,0(a2)
        for(i = 0; i < size_b; ++i){
     374:	000d                	c.nop	3
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
    int line[size_b][size_a + size_b];
     382:	0cf6                	slli	s9,s9,0x1d
     384:	0000                	unimp
     386:	0d01                	addi	s10,s10,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0000                	unimp
     38a:	0001                	nop
    int line[size_b][size_a + size_b];
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	0200                	addi	s0,sp,256
     396:	000d                	c.nop	3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     398:	1e00                	addi	s0,sp,816
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d42                	slli	s10,s10,0x10
     3a2:	0000                	unimp
     3a4:	0d54                	addi	a3,sp,660
    int pola[size_a];
     3a6:	0000                	unimp
     3a8:	0001                	nop
    int line[size_b][size_a + size_b];
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
    int pola[size_a];
     3b2:	d400                	sw	s0,40(s0)
     3b4:	000c                	0xc
     3b6:	da00                	sw	s0,48(a2)
     3b8:	000c                	0xc
    int line[size_b][size_a + size_b];
     3ba:	0100                	addi	s0,sp,128
    int pola[size_a];
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cda                	slli	s9,s9,0x16
    int polb[size_b];
     3c0:	0000                	unimp
     3c2:	0ce6                	slli	s9,s9,0x19
     3c4:	0000                	unimp
    int pola[size_a];
     3c6:	0001                	nop
    int polb[size_b];
     3c8:	e65d                	bnez	a2,476 <polymult2+0xfc>
     3ca:	000c                	0xc
    int line[size_b][size_a + size_b];
     3cc:	ec00                	fsw	fs0,24(s0)
    int polb[size_b];
     3ce:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0d02                	c.slli64	s10
            product2[j] = 0;
     3d6:	0000                	unimp
     3d8:	0d0e                	slli	s10,s10,0x3
     3da:	0000                	unimp
     3dc:	0001                	nop
    for (i = 0; i < size_b; ++i){
     3de:	1e59                	addi	t3,t3,-10
     3e0:	000d                	c.nop	3
    for(i = 0; i < size_a; ++i){
     3e2:	2800                	fld	fs0,16(s0)
     3e4:	000d                	c.nop	3
     3e6:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d28                	addi	a0,sp,664
     3ec:	0000                	unimp
    if(star_mult == 1){
     3ee:	0d2e                	slli	s10,s10,0xb
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	2e9f 000d 3000      	0x3000000d2e9f
     3fc:	000d                	c.nop	3
        for (j = size_b -1; j >= 0; j = j-1){
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     402:	0d30                	addi	a2,sp,664
     404:	0000                	unimp
            product2[j] = 0;
     406:	0d42                	slli	s10,s10,0x10
     408:	0000                	unimp
     40a:	0001                	nop
            line[i][j] = 0;
     40c:	425e                	lw	tp,212(sp)
     40e:	000d                	c.nop	3
            product2[j] = 0;
     410:	4c00                	lw	s0,24(s0)
     412:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d4c                	addi	a1,sp,660
     41a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     41c:	0d52                	slli	s10,s10,0x14
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # e7f7 <_stack+0x7f7>
        for(j = 0; j < size_a + size_b -1; ++j){
     424:	529f 000d 5400      	0x5400000d529f
        pola[i] = a[i];
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0c08                	addi	a0,sp,528
     43a:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     43c:	0c1c                	addi	a5,sp,528
        polb[i] = b[i];
     43e:	0000                	unimp
     440:	0001                	nop
     442:	1c5a                	slli	s8,s8,0x36
     444:	000c                	0xc
     446:	6600                	flw	fs0,8(a2)
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     44c:	5800                	lw	s0,48(s0)
        polb[i] = b[i];
     44e:	0c66                	slli	s8,s8,0x19
     450:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     452:	0c8e                	slli	s9,s9,0x3
                line[size_b-1-j][k] = pola[k]*polb[j];
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     464:	0c08                	addi	a0,sp,528
                line[size_b-1-j][k] = pola[k]*polb[j];
     466:	0000                	unimp
     468:	0c24                	addi	s1,sp,536
     46a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     46c:	0001                	nop
     46e:	000c245b          	0xc245b
        for (j = size_b -1; j >= 0; j = j-1){
     472:	7400                	flw	fs0,40(s0)
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     47a:	0c74                	addi	a3,sp,540
        array_add(product2,line[i],size_a+size_b-1);
     47c:	0000                	unimp
     47e:	0c7c                	addi	a5,sp,540
     480:	0000                	unimp
     482:	0004                	0x4
    for(i=0;i<size_b;++i){
     484:	9f5b01f3          	0x9f5b01f3
}
     488:	0c7c                	addi	a5,sp,540
     48a:	0000                	unimp
     48c:	0c8e                	slli	s9,s9,0x3
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	0800                	addi	s0,sp,16
     49c:	000c                	0xc
     49e:	1800                	addi	s0,sp,48
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c18                	addi	a4,sp,528
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a8:	0000                	unimp
     4aa:	0c4e                	slli	s8,s8,0x13
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	4e59                	li	t3,22
     4b2:	000c                	0xc
     4b4:	5100                	lw	s0,32(a0)
     4b6:	000c                	0xc
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     4bc:	0c51                	addi	s8,s8,20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4be:	0000                	unimp
     4c0:	0c8e                	slli	s9,s9,0x3
     4c2:	0000                	unimp
     4c4:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     4c6:	9f5c01f3          	0x9f5c01f3
	...
        array_add(product2,line[i],size_a+size_b-1);
     4d2:	0c08                	addi	a0,sp,528
     4d4:	0000                	unimp
     4d6:	00000c2f          	0xc2f
    for(i=0;i<size_b;++i){
     4da:	0001                	nop
     4dc:	2f5d                	jal	c92 <ntru_deceypt+0x4>
     4de:	000c                	0xc
    int v[size_N];
     4e0:	4a00                	lw	s0,16(a2)
     4e2:	000c                	0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e4:	0100                	addi	s0,sp,128
    int v[size_N];
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0c4a                	slli	s8,s8,0x12
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ea:	0000                	unimp
     4ec:	0c8e                	slli	s9,s9,0x3
     4ee:	0000                	unimp
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
     4fe:	0c08                	addi	a0,sp,528
     500:	0000                	unimp
     502:	00000c2f          	0xc2f
    int v[size_N];
     506:	0001                	nop
     508:	2f5e                	fld	ft10,464(sp)
     50a:	000c                	0xc
    int q[size_N];
     50c:	7800                	flw	fs0,48(s0)
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     512:	6400                	flw	fs0,8(s0)
     514:	0c78                	addi	a4,sp,540
    int denum_temp[size_D];
     516:	0000                	unimp
     518:	0c7c                	addi	a5,sp,540
     51a:	0000                	unimp
     51c:	0004                	0x4
    int num_temp[size_N];
     51e:	9f5e01f3          	0x9f5e01f3
    int denum_temp[size_D];
     522:	0c7c                	addi	a5,sp,540
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	0000                	unimp
     526:	0c8e                	slli	s9,s9,0x3
     528:	0000                	unimp
     52a:	0001                	nop
    int v[size_N];
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
    int denum_temp[size_D];
     530:	0000                	unimp
     532:	0000                	unimp
     534:	4a00                	lw	s0,16(a2)
    for (i = 0; i < size_N; ++i){
     536:	000c                	0xc
     538:	5100                	lw	s0,32(a0)
     53a:	000c                	0xc
    array_mod(num_temp, mod, size_N);
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
     540:	0c51                	addi	s8,s8,20
     542:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     544:	0c76                	slli	s8,s8,0x1d
     546:	0000                	unimp
     548:	0001                	nop
    array_mod(denum_temp,mod,size_D);
     54a:	000c7c63          	bgeu	s8,zero,562 <polydiv+0x82>
     54e:	8e00                	0x8e00
     550:	000c                	0xc
    for (i = 0; i < size_N; ++i){
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
    for (i = size_D-1; i >= 0; i = i-1){
     55e:	0c60                	addi	s0,sp,540
     560:	0000                	unimp
     562:	0c72                	slli	s8,s8,0x1c
    for (i = 0; i < size_N; ++i){
     564:	0000                	unimp
     566:	0001                	nop
        if ( (b_N*u)%mod == 1 )
     568:	7c59                	lui	s8,0xffff6
    for (u = 0; u < mod; ++u){
     56a:	000c                	0xc
     56c:	8600                	0x8600
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
        num_temp[i] = num[i];
     572:	5900                	lw	s0,48(a0)
     574:	0c86                	slli	s9,s9,0x1
     576:	0000                	unimp
     578:	0c8c                	addi	a1,sp,592
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
     580:	8c9f 000c 8e00      	0x8e00000c8c9f
        denum_temp[i] = denum[i];
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
     58a:	5900                	lw	s0,48(a0)
	...
    for (i = 0; i < size_D; ++i) {
     594:	0916                	slli	s2,s2,0x5
        q[i] = 0;
     596:	0000                	unimp
     598:	095a                	slli	s2,s2,0x16
     59a:	0000                	unimp
     59c:	0001                	nop
        v[i] = 0;
     59e:	5a5a                	lw	s4,180(sp)
        q[i] = 0;
     5a0:	0009                	c.nop	2
     5a2:	1c00                	addi	s0,sp,560
        v[i] = 0;
     5a4:	0100000b          	0x100000b
    for (i = 0; i < size_N; ++i){
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	0b1c                	addi	a5,sp,400
        if( denum_temp[i] != 0 )
     5ac:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     5ae:	0b40                	addi	s0,sp,404
     5b0:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5b6:	409f 000b 6000      	0x6000000b409f
    for (u = 0; u < mod; ++u){
     5bc:	0400000b          	0x400000b
        if( num_temp[i] != 0 )
     5c0:	f300                	fsw	fs0,32(a4)
    for (i = size_N-1; i >= 0; i = i-1){
     5c2:	5a01                	li	s4,-32
     5c4:	609f 000b f400      	0xf400000b609f
     5ca:	0100000b          	0x100000b
     5ce:	6200                	flw	fs0,0(a2)
    while (d >= d2){
     5d0:	0bf4                	addi	a3,sp,476
     5d2:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     5d4:	0c08                	addi	a0,sp,528
        result[i] = q[i];
     5d6:	0000                	unimp
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
    for(i = size_N; i < (2*size_N); ++i){
     5e2:	0000                	unimp
     5e4:	1600                	addi	s0,sp,800
        result[i] = num_temp[i-size_N];
     5e6:	0009                	c.nop	2
     5e8:	5200                	lw	s0,32(a2)
     5ea:	0009                	c.nop	2
     5ec:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	0952                	slli	s2,s2,0x14
}
     5f2:	0000                	unimp
     5f4:	0b48                	addi	a0,sp,404
     5f6:	0000                	unimp
     5f8:	0001                	nop
     5fa:	000b4867          	0xb4867
     5fe:	6000                	flw	fs0,0(s0)
     600:	0400000b          	0x400000b
     604:	f300                	fsw	fs0,32(a4)
     606:	5b01                	li	s6,-32
     608:	609f 000b 0800      	0x800000b609f
     60e:	000c                	0xc
     610:	0100                	addi	s0,sp,128
     612:	6700                	flw	fs0,8(a4)
	...
        v[(d-d2)] = u*r_d;
     61c:	0916                	slli	s2,s2,0x5
     61e:	0000                	unimp
     620:	0956                	slli	s2,s2,0x15
     622:	0000                	unimp
     624:	0001                	nop
     626:	565c                	lw	a5,44(a2)
        array_mod(v, mod, size_N);
     628:	0009                	c.nop	2
     62a:	4400                	lw	s0,8(s0)
     62c:	0100000b          	0x100000b
     630:	6600                	flw	fs0,8(a2)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     632:	0b44                	addi	s1,sp,404
     634:	0000                	unimp
     636:	0b60                	addi	s0,sp,412
     638:	0000                	unimp
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
         array_mod(product, mod, size_N);
     640:	0b60                	addi	s0,sp,412
     642:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     644:	0c08                	addi	a0,sp,528
         array_mod(product, mod, size_N);
     646:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     648:	0001                	nop
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
     64e:	0000                	unimp
         array_mod(num_temp, mod, size_N);
     650:	0000                	unimp
     652:	a400                	fsd	fs0,8(s0)
     654:	000a                	c.slli	zero,0x2
     656:	ae00                	fsd	fs0,24(a2)
        array_add(q, v, size_N);
     658:	000a                	c.slli	zero,0x2
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
        array_mod(q, mod, size_N);
     666:	0abe                	slli	s5,s5,0xf
        for (i = size_N-1; i >= 0; i = i-1){
     668:	0000                	unimp
     66a:	00000adb          	0xadb
     66e:	0001                	nop
     670:	c05a                	sw	s6,0(sp)
     672:	d400000b          	0xd400000b
     676:	0100000b          	0x100000b
            num_temp[i] = num_temp[i] - product[i];
     67a:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     684:	0adc                	addi	a5,sp,340
     686:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     688:	00000aef          	jal	s5,688 <polydiv+0x1a8>
     68c:	0001                	nop
        for (i = 0; i < size_N; ++i){
     68e:	d45a                	sw	s6,40(sp)
            if( num_temp[i] != 0 )
     690:	e400000b          	0xe400000b
        for (i = size_N-1; i >= 0; i = i-1){
     694:	0100000b          	0x100000b
            v[i] = 0;
     698:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     6a2:	0af0                	addi	a2,sp,348
     6a4:	0000                	unimp
     6a6:	0b0c                	addi	a1,sp,400
        result[i] = q[i];
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	e45a                	fsw	fs6,8(sp)
     6ae:	f400000b          	0xf400000b
     6b2:	0100000b          	0x100000b
     6b6:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     6c0:	0a58                	addi	a4,sp,276
     6c2:	0000                	unimp
     6c4:	0b24                	addi	s1,sp,408
    for(i = size_N; i < (2*size_N); ++i){
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
    int ri_2[size]; // MX-ring poly, a
     6cc:	0b24                	addi	s1,sp,408
     6ce:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	0b3c                	addi	a5,sp,408
    int ri_2[size]; // MX-ring poly, a
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	0084                	addi	s1,sp,64
     6d8:	0b3c                	addi	a5,sp,408
     6da:	0000                	unimp
     6dc:	0b40                	addi	s0,sp,404
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
    int ri_2[size]; // MX-ring poly, a
     6f2:	0b40                	addi	s0,sp,404
     6f4:	0000                	unimp
     6f6:	0b60                	addi	s0,sp,412
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6f8:	0000                	unimp
     6fa:	00910013          	addi	zero,sp,9
    int ri[size];
     6fe:	235a01f3          	0x235a01f3
     702:	3201                	jal	2 <__DYNAMIC+0x2>
    int ti_1[size]; // ti_1[0] = 1
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
    int ti[size];
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
     70e:	601c                	flw	fa5,0(s0)
    int qi_1[size];
     710:	0800000b          	0x800000b
     714:	000c                	0xc
    int temp[size];
     716:	0200                	addi	s0,sp,256
     718:	7200                	flw	fs0,32(a2)
	...
     722:	5c00                	lw	s0,56(s0)
    for (i = 0; i < size; ++i) {
     724:	000a                	c.slli	zero,0x2
     726:	5e00                	lw	s0,56(a2)
        ti_2[i] = 0;
     728:	000a                	c.slli	zero,0x2
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	5e9f 000a 6400      	0x6400000a5e9f
    ti_1[0] = 1;
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     73a:	0a68                	addi	a0,sp,284
     73c:	0000                	unimp
     73e:	0a6e                	slli	s4,s4,0x1b
     740:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     742:	0001                	nop
     744:	765f 000a 8400      	0x8400000a765f
    array_mod(ri_2,mod,size);
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0a8e                	slli	s5,s5,0x3
    array_mod(ri_1,mod,size);
     752:	0000                	unimp
     754:	00000aa3          	sb	zero,21(zero) # 15 <__DYNAMIC+0x15>
     758:	0001                	nop
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     75a:	a45f 000a ae00      	0xae00000aa45f
     760:	000a                	c.slli	zero,0x2
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
        for (i = N + 1; i < (2 * N + 2); ++i) {
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0aae                	slli	s5,s5,0xb
     76c:	0000                	unimp
     76e:	0abd                	addi	s5,s5,15
     770:	0000                	unimp
     772:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     774:	be5f 000a ce00      	0xce00000abe5f
    array_mod(temp,mod,size);
     77a:	000a                	c.slli	zero,0x2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     782:	9f1e                	add	t5,t5,t2
     784:	0ace                	slli	s5,s5,0x13
     786:	0000                	unimp
     788:	0adc                	addi	a5,sp,340
     78a:	0000                	unimp
     78c:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     78e:	dc59                	beqz	s0,72c <ext_euclid+0x60>
     790:	000a                	c.slli	zero,0x2
     792:	e400                	fsw	fs0,8(s0)
    array_mod(qi_1,mod,size);
     794:	000a                	c.slli	zero,0x2
     796:	0200                	addi	s0,sp,256
     798:	3000                	fld	fs0,32(s0)
     79a:	e49f 000a ec00      	0xec00000ae49f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7a0:	000a                	c.slli	zero,0x2
     7a2:	0100                	addi	s0,sp,128
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0af0                	addi	a2,sp,348
     7a8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7aa:	0b02                	c.slli64	s6
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
    array_mod(temp,mod,size);
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	029f 000b 1c00      	0x1c00000b029f
        for (i = 0; i < N + 1; ++i) {
     7ba:	0100000b          	0x100000b
     7be:	6800                	flw	fs0,16(s0)
    array_mod(ti,mod,size);
     7c0:	0b1c                	addi	a5,sp,400
     7c2:	0000                	unimp
     7c4:	0b9c                	addi	a5,sp,464
     7c6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c8:	0001                	nop
        controlR = 0;
     7ca:	9c5f 000b 9e00      	0x9e00000b9c5f
        for (i = 0; i < N + 1; ++i) {
     7d0:	0300000b          	0x300000b
        for (j = 0; j < mod; ++j) {
     7d4:	7f00                	flw	fs0,56(a4)
            if (((ri_2[0] * j) % mod) == 1)
     7d6:	9f7f                	0x9f7f
        for (j = 0; j < mod; ++j) {
     7d8:	0b9e                	slli	s7,s7,0x7
     7da:	0000                	unimp
     7dc:	0bc0                	addi	s0,sp,468
     7de:	0000                	unimp
     7e0:	0001                	nop
     7e2:	c05f 000b d000      	0xd000000bc05f
    }
     7e8:	0100000b          	0x100000b
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0bd0                	addi	a2,sp,468
     7f0:	0000                	unimp
     7f2:	0bd2                	slli	s7,s7,0x14
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	d29f 000b d400      	0xd400000bd29f
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
     806:	0bd4                	addi	a3,sp,468
     808:	0000                	unimp
     80a:	0bd8                	addi	a4,sp,468
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	d85e                	sw	s7,48(sp)
        ri_2[i] = polyR[i];
     812:	e200000b          	0xe200000b
     816:	0300000b          	0x300000b
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
    for (i = 0; i < size; ++i) {
     81e:	0be2                	slli	s7,s7,0x18
        ri_2[i] = polyR[i];
     820:	0000                	unimp
     822:	0be4                	addi	s1,sp,476
        ri_1[i] = polyf[i];
     824:	0000                	unimp
     826:	0001                	nop
     828:	e45e                	fsw	fs7,8(sp)
     82a:	f400000b          	0xf400000b
     82e:	0100000b          	0x100000b
     832:	6800                	flw	fs0,16(s0)
        ti_2[i] = 0;
     834:	0bf4                	addi	a3,sp,476
     836:	0000                	unimp
     838:	0c04                	addi	s1,sp,528
     83a:	0000                	unimp
        ti_1[i] = 0;
     83c:	0001                	nop
     83e:	045f 000c 0600      	0x600000c045f
    for (i = 0; i < size; ++i) {
     844:	000c                	0xc
     846:	0300                	addi	s0,sp,384
            ri[i - (N + 1)] = res[i];
     848:	7f00                	flw	fs0,56(a4)
     84a:	9f7f                	0x9f7f
     84c:	0c06                	slli	s8,s8,0x1
     84e:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     850:	0c08                	addi	a0,sp,528
     852:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
            temp[i] = ri_2[i] - ri[i];
     85c:	0000                	unimp
     85e:	2000                	fld	fs0,0(s0)
     860:	6000000b          	0x6000000b
     864:	0600000b          	0x600000b
     868:	0300                	addi	s0,sp,384
        for (i = 0; i < N + 1; ++i) {
     86a:	1ab4                	addi	a3,sp,376
            temp[i] = ri_2[i] - ri[i];
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
            qi_1[i] = res1[i];
     874:	0000                	unimp
     876:	5800                	lw	s0,48(s0)
     878:	000a                	c.slli	zero,0x2
     87a:	1c00                	addi	s0,sp,560
     87c:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     880:	6200                	flw	fs0,0(a2)
            qi_1[i] = res1[i];
     882:	0b1c                	addi	a5,sp,400
        for (i = 0; i < N + 1; ++i) {
     884:	0000                	unimp
            temp[i] = res2[i];
     886:	0b40                	addi	s0,sp,404
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	409f 000b 6000      	0x6000000b409f
     894:	0400000b          	0x400000b
            ti[i] = ti_2[i] - temp[i];
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
     89c:	609f 000b f400      	0xf400000b609f
     8a2:	0100000b          	0x100000b
     8a6:	6200                	flw	fs0,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8a8:	0bf4                	addi	a3,sp,476
            ti[i] = ti_2[i] - temp[i];
     8aa:	0000                	unimp
     8ac:	0c08                	addi	a0,sp,528
        for (i = 0; i < N + 1; ++i) {
     8ae:	0000                	unimp
     8b0:	7f850003          	lb	zero,2040(a0)
            ri_2[i] = ri_1[i];
     8b4:	009f 0000 0000      	0x9f
     8ba:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8bc:	cc00                	sw	s0,24(s0)
            ri_2[i] = ri_1[i];
     8be:	0006                	c.slli	zero,0x1
            ri_1[i] = ri[i];
     8c0:	4a00                	lw	s0,16(a2)
     8c2:	01000007          	0x1000007
            ti_2[i] = ti_1[i];
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	074a                	slli	a4,a4,0x12
            ri_1[i] = ri[i];
     8ca:	0000                	unimp
            ti_2[i] = ti_1[i];
     8cc:	0812                	slli	a6,a6,0x4
     8ce:	0000                	unimp
     8d0:	0004                	0x4
     8d2:	9f5a01f3          	0x9f5a01f3
     8d6:	0812                	slli	a6,a6,0x4
     8d8:	0000                	unimp
            ti_1[i] = ti[i];
     8da:	0848                	addi	a0,sp,20
     8dc:	0000                	unimp
     8de:	0001                	nop
     8e0:	485a                	lw	a6,148(sp)
              qi_1[i] = 0;
     8e2:	0008                	0x8
     8e4:	1600                	addi	s0,sp,800
     8e6:	0009                	c.nop	2
     8e8:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     8ea:	f300                	fsw	fs0,32(a4)
     8ec:	5a01                	li	s4,-32
            if (((ri_2[0] * j) % mod) == 1)
     8ee:	009f 0000 0000      	0x9f
     8f4:	0000                	unimp
     8f6:	cc00                	sw	s0,24(s0)
     8f8:	0006                	c.slli	zero,0x1
     8fa:	4a00                	lw	s0,16(a2)
     8fc:	01000007          	0x1000007
        for (j = 0; j < mod; ++j) {
     900:	5b00                	lw	s0,48(a4)
            ti_2[i] = (ti_2[i] * j) % mod;
     902:	074a                	slli	a4,a4,0x12
        for (i = 0; i < N + 1; ++i) {
     904:	0000                	unimp
     906:	0812                	slli	a6,a6,0x4
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	0000                	unimp
     90a:	0004                	0x4
     90c:	9f5b01f3          	0x9f5b01f3
     910:	0812                	slli	a6,a6,0x4
     912:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     914:	0848                	addi	a0,sp,20
int* generate_keys(int N, int p, int q){
     916:	0000                	unimp
     918:	0001                	nop
     91a:	0008485b          	0x8485b
     91e:	1600                	addi	s0,sp,800
     920:	0009                	c.nop	2
     922:	0400                	addi	s0,sp,512
     924:	f300                	fsw	fs0,32(a4)
     926:	5b01                	li	s6,-32
     928:	009f 0000 0000      	0x9f
     92e:	0000                	unimp
     930:	cc00                	sw	s0,24(s0)
     932:	0006                	c.slli	zero,0x1
     934:	3000                	fld	fs0,32(s0)
     936:	01000007          	0x1000007
     93a:	5c00                	lw	s0,56(s0)
     93c:	0730                	addi	a2,sp,904
     93e:	0000                	unimp
     940:	0806                	slli	a6,a6,0x1
     942:	0000                	unimp
     944:	0001                	nop
     946:	0008066b          	0x8066b
     94a:	1200                	addi	s0,sp,288
     94c:	0008                	0x8
     94e:	0400                	addi	s0,sp,512
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     950:	f300                	fsw	fs0,32(a4)
     952:	5c01                	li	s8,-32
     954:	129f 0008 1600      	0x16000008129f
     95a:	0009                	c.nop	2
     95c:	0100                	addi	s0,sp,128
     95e:	6b00                	flw	fs0,16(a4)
	...
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     968:	06cc                	addi	a1,sp,836
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	0000                	unimp
     96c:	0730                	addi	a2,sp,904
     96e:	0000                	unimp
     970:	0001                	nop
     972:	305d                	jal	218 <polymult+0x56>
     974:	f2000007          	0xf2000007
     978:	01000007          	0x1000007
     97c:	5900                	lw	s0,48(a0)
     97e:	07f2                	slli	a5,a5,0x1c
     980:	0000                	unimp
     982:	0812                	slli	a6,a6,0x4
     984:	0000                	unimp
     986:	0004                	0x4
     988:	9f5d01f3          	0x9f5d01f3
     98c:	0812                	slli	a6,a6,0x4
     98e:	0000                	unimp
     990:	0916                	slli	s2,s2,0x5
     992:	0000                	unimp
     994:	0001                	nop
     996:	0059                	c.nop	22
     998:	0000                	unimp
     99a:	0000                	unimp
     99c:	0000                	unimp
     99e:	e800                	fsw	fs0,16(s0)
     9a0:	12000007          	0x12000007
     9a4:	0008                	0x8
     9a6:	0600                	addi	s0,sp,768
     9a8:	0300                	addi	s0,sp,384
     9aa:	1924                	addi	s1,sp,184
     9ac:	0000                	unimp
     9ae:	009f 0000 0000      	0x9f
     9b4:	0000                	unimp
     9b6:	2400                	fld	fs0,8(s0)
     9b8:	f4000007          	0xf4000007
     9bc:	01000007          	0x1000007
     9c0:	6200                	flw	fs0,0(a2)
     9c2:	07f4                	addi	a3,sp,972
     9c4:	0000                	unimp
     9c6:	0806                	slli	a6,a6,0x1
     9c8:	0000                	unimp
     9ca:	7f8b0003          	lb	zero,2040(s6)
     9ce:	069f 0008 1200      	0x12000008069f
     9d4:	0008                	0x8
    int polyR[N+1];
     9d6:	0600                	addi	s0,sp,768
     9d8:	f300                	fsw	fs0,32(a4)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	5c01                	li	s8,-32
    int polyR[N+1];
     9dc:	1c31                	addi	s8,s8,-20
     9de:	129f 0008 1600      	0x16000008129f
     9e4:	0009                	c.nop	2
     9e6:	0100                	addi	s0,sp,128
     9e8:	6200                	flw	fs0,0(a2)
	...
    polyR[N] = 1;
     9f2:	0724                	addi	s1,sp,904
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	0000                	unimp
     9f6:	0730                	addi	a2,sp,904
     9f8:	0000                	unimp
     9fa:	0002                	c.slli64	zero
     9fc:	9f30                	0x9f30
     9fe:	0730                	addi	a2,sp,904
     a00:	0000                	unimp
     a02:	074a                	slli	a4,a4,0x12
     a04:	0000                	unimp
     a06:	0001                	nop
     a08:	665e                	flw	fa2,212(sp)
     a0a:	6a000007          	0x6a000007
     a0e:	01000007          	0x1000007
     a12:	6b00                	flw	fs0,16(a4)
     a14:	076a                	slli	a4,a4,0x1a
     a16:	0000                	unimp
     a18:	0774                	addi	a3,sp,908
     a1a:	0000                	unimp
     a1c:	0001                	nop
     a1e:	765f 0007 8100      	0x81000007765f
     a24:	01000007          	0x1000007
     a28:	5e00                	lw	s0,56(a2)
     a2a:	078e                	slli	a5,a5,0x3
     a2c:	0000                	unimp
     a2e:	0790                	addi	a2,sp,960
     a30:	0000                	unimp
     a32:	0002                	c.slli64	zero
     a34:	9f30                	0x9f30
     a36:	0790                	addi	a2,sp,960
     a38:	0000                	unimp
     a3a:	0000079b          	0x79b
     a3e:	0001                	nop
     a40:	aa5f 0007 ac00      	0xac000007aa5f
     a46:	02000007          	0x2000007
     a4a:	3000                	fld	fs0,32(s0)
     a4c:	ac9f 0007 b700      	0xb7000007ac9f
     a52:	01000007          	0x1000007
     a56:	5f00                	lw	s0,56(a4)
    polyR[0] = -1;
     a58:	07b8                	addi	a4,sp,968
     a5a:	0000                	unimp
    for(i = 1; i < N; ++i){
     a5c:	07bc                	addi	a5,sp,968
     a5e:	0000                	unimp
     a60:	0002                	c.slli64	zero
     a62:	9f30                	0x9f30
    for (i = N; i < 55; ++i ){
     a64:	07bc                	addi	a5,sp,968
     a66:	0000                	unimp
     a68:	000007c7          	fmsub.s	fa5,ft0,ft0,ft0,rne
    for(i = 0; i < N; ++i){
     a6c:	0001                	nop
        random_keys[i] = f[i];
     a6e:	c85e                	sw	s7,16(sp)
     a70:	ce000007          	0xce000007
     a74:	02000007          	0x2000007
    for(i = 0; i < N; ++i){
     a78:	3000                	fld	fs0,32(s0)
     a7a:	ce9f 0007 d800      	0xd8000007ce9f
    for(i = N; i < (2*N); ++i){
     a80:	01000007          	0x1000007
     a84:	5d00                	lw	s0,56(a0)
        random_keys[i] = g[i-N];
     a86:	07e4                	addi	s1,sp,972
     a88:	0000                	unimp
     a8a:	0820                	addi	s0,sp,24
     a8c:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a8e:	0001                	nop
     a90:	205e                	fld	ft0,464(sp)
    for(i = (2*N); i < (3*N); ++i){
     a92:	0008                	0x8
     a94:	4400                	lw	s0,8(s0)
     a96:	0008                	0x8
    fp = ext_euclid(polyR, f, (N+1), p);
     a98:	0300                	addi	s0,sp,384
     a9a:	7e00                	flw	fs0,56(a2)
     a9c:	9f7f                	0x9f7f
     a9e:	0844                	addi	s1,sp,20
     aa0:	0000                	unimp
     aa2:	0848                	addi	a0,sp,20
    for(i = (2*N); i < (3*N); ++i){
     aa4:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     aa6:	0001                	nop
     aa8:	485e                	lw	a6,212(sp)
     aaa:	0008                	0x8
     aac:	5200                	lw	s0,32(a2)
    for(i = (2*N); i < (3*N); ++i){
     aae:	0008                	0x8
     ab0:	0100                	addi	s0,sp,128
    fq = ext_euclid(polyR, f, (N+1), q);
     ab2:	5f00                	lw	s0,56(a4)
     ab4:	0852                	slli	a6,a6,0x14
     ab6:	0000                	unimp
     ab8:	0858                	addi	a4,sp,20
     aba:	0000                	unimp
     abc:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    for(i = (3*N); i < (4*N); ++i){
     ac0:	589f 0008 5a00      	0x5a000008589f
        random_keys[i] = fq[i-(3*N)];
     ac6:	0008                	0x8
     ac8:	0100                	addi	s0,sp,128
     aca:	5f00                	lw	s0,56(a4)
     acc:	085a                	slli	a6,a6,0x16
    for(i = (3*N); i < (4*N); ++i){
     ace:	0000                	unimp
     ad0:	086c                	addi	a1,sp,28
    fg = polymult2(fq, N, g, N, 0);
     ad2:	0000                	unimp
     ad4:	0001                	nop
     ad6:	6c5e                	flw	fs8,212(sp)
     ad8:	0008                	0x8
     ada:	7000                	flw	fs0,32(s0)
    for(i = 0; i < (2*N-1); ++i){
     adc:	0008                	0x8
     ade:	0300                	addi	s0,sp,384
     ae0:	7e00                	flw	fs0,56(a2)
     ae2:	9f7f                	0x9f7f
     ae4:	0870                	addi	a2,sp,28
     ae6:	0000                	unimp
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ae8:	0874                	addi	a3,sp,28
     aea:	0000                	unimp
     aec:	0001                	nop
     aee:	745e                	flw	fs0,244(sp)
    for(i = (4*N); i < (5*N); ++i){
     af0:	0008                	0x8
     af2:	8200                	0x8200
     af4:	0008                	0x8
     af6:	0100                	addi	s0,sp,128
     af8:	5f00                	lw	s0,56(a4)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afa:	0882                	c.slli64	a7
     afc:	0000                	unimp
     afe:	0884                	addi	s1,sp,80
     b00:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b02:	7f7f0003          	lb	zero,2039(t5)
     b06:	849f 0008 9400      	0x94000008849f
        random_keys[i] = polyR[i-(5*N)];
     b0c:	0008                	0x8
     b0e:	0100                	addi	s0,sp,128
     b10:	5f00                	lw	s0,56(a4)
     b12:	0894                	addi	a3,sp,80
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	0000                	unimp
     b16:	0896                	slli	a7,a7,0x5
     b18:	0000                	unimp
     b1a:	7f7f0003          	lb	zero,2039(t5)
     b1e:	969f 0008 9800      	0x98000008969f
}
     b24:	0008                	0x8
     b26:	0100                	addi	s0,sp,128
     b28:	5f00                	lw	s0,56(a4)
     b2a:	0898                	addi	a4,sp,80
     b2c:	0000                	unimp
     b2e:	08aa                	slli	a7,a7,0xa
     b30:	0000                	unimp
     b32:	0001                	nop
     b34:	aa5e                	fsd	fs7,272(sp)
     b36:	0008                	0x8
     b38:	ae00                	fsd	fs0,24(a2)
     b3a:	0008                	0x8
     b3c:	0300                	addi	s0,sp,384
     b3e:	7e00                	flw	fs0,56(a2)
     b40:	9f7f                	0x9f7f
     b42:	08ae                	slli	a7,a7,0xb
     b44:	0000                	unimp
     b46:	08b2                	slli	a7,a7,0xc
     b48:	0000                	unimp
     b4a:	0001                	nop
     b4c:	b25e                	fsd	fs7,288(sp)
     b4e:	0008                	0x8
     b50:	be00                	fsd	fs0,56(a2)
     b52:	0008                	0x8
     b54:	0100                	addi	s0,sp,128
     b56:	5d00                	lw	s0,56(a0)
     b58:	08be                	slli	a7,a7,0xf
     b5a:	0000                	unimp
     b5c:	08ea                	slli	a7,a7,0x1a
     b5e:	0000                	unimp
        polyR[i] = 0;
     b60:	7f7d0003          	lb	zero,2039(s10)
     b64:	ea9f 0008 ee00      	0xee000008ea9f
    for(i = 1; i < N; ++i){
     b6a:	0008                	0x8
     b6c:	0100                	addi	s0,sp,128
        f[i] = 0;
     b6e:	5d00                	lw	s0,56(a0)
     b70:	0902                	c.slli64	s2
     b72:	0000                	unimp
     b74:	0906                	slli	s2,s2,0x1
     b76:	0000                	unimp
     b78:	0001                	nop
     b7a:	065e                	slli	a2,a2,0x17
        g[i] = 0;
     b7c:	0009                	c.nop	2
     b7e:	1400                	addi	s0,sp,544
     b80:	0009                	c.nop	2
     b82:	0300                	addi	s0,sp,384
     b84:	7e00                	flw	fs0,56(a2)
    for (i = N; i < 55; ++i ){
     b86:	9f7f                	0x9f7f
     b88:	0914                	addi	a3,sp,144
        random_keys[i] = f[i];
     b8a:	0000                	unimp
     b8c:	0916                	slli	s2,s2,0x5
     b8e:	0000                	unimp
     b90:	0001                	nop
     b92:	005e                	c.slli	zero,0x17
     b94:	0000                	unimp
     b96:	0000                	unimp
     b98:	0000                	unimp
    for(i = 0; i < N; ++i){
     b9a:	d800                	sw	s0,48(s0)
        random_keys[i] = f[i];
     b9c:	12000007          	0x12000007
        random_keys[i] = g[i-N];
     ba0:	0008                	0x8
     ba2:	0100                	addi	s0,sp,128
     ba4:	5f00                	lw	s0,56(a4)
     ba6:	08ee                	slli	a7,a7,0x1b
     ba8:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     baa:	0916                	slli	s2,s2,0x5
     bac:	0000                	unimp
     bae:	0001                	nop
        random_keys[i] = fp[i-(2*N)];
     bb0:	005f 0000 0000      	0x5f
     bb6:	0000                	unimp
     bb8:	2200                	fld	fs0,0(a2)
    for(i = (2*N); i < (3*N); ++i){
     bba:	f6000007          	0xf6000007
     bbe:	02000007          	0x2000007
        random_keys[i] = fq[i-(3*N)];
     bc2:	8300                	0x8300
     bc4:	1200                	addi	s0,sp,288
     bc6:	0008                	0x8
     bc8:	1600                	addi	s0,sp,800
     bca:	0009                	c.nop	2
     bcc:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     bce:	8300                	0x8300
	...
    for(i = 0; i < (2*N-1); ++i){
     bd8:	2200                	fld	fs0,0(a2)
        fg[i] = fg[i]*p;
     bda:	fa000007          	0xfa000007
     bde:	02000007          	0x2000007
    for(i = 0; i < (2*N-1); ++i){
     be2:	8500                	0x8500
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be4:	1200                	addi	s0,sp,288
     be6:	0008                	0x8
     be8:	1600                	addi	s0,sp,800
     bea:	0009                	c.nop	2
     bec:	0200                	addi	s0,sp,256
     bee:	8500                	0x8500
	...
        random_keys[i] = polyR[i-(5*N)];
     bf8:	2200                	fld	fs0,0(a2)
     bfa:	00000007          	0x7
     bfe:	0008                	0x8
     c00:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     c02:	8800                	0x8800
        random_keys[i] = polyR[i-(5*N)];
     c04:	1200                	addi	s0,sp,288
    for(i = (5*N); i < (6*N+1); ++i){
     c06:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	1600                	addi	s0,sp,800
     c0a:	0009                	c.nop	2
     c0c:	0200                	addi	s0,sp,256
     c0e:	8800                	0x8800
	...
     c18:	2200                	fld	fs0,0(a2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	fc000007          	0xfc000007
     c1e:	02000007          	0x2000007
     c22:	8600                	0x8600
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	fc00                	fsw	fs0,56(s0)
     c26:	00000007          	0x7
     c2a:	0008                	0x8
     c2c:	0c00                	addi	s0,sp,528
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2e:	8800                	0x8800
    temp = polymult(public_key,N,random_val,48,q,0);
     c30:	8b00                	0x8b00
     c32:	3200                	fld	fs0,32(a2)
     c34:	2324                	fld	fs1,64(a4)
     c36:	1af0090f          	0x1af0090f
     c3a:	121c                	addi	a5,sp,288
     c3c:	0008                	0x8
     c3e:	1600                	addi	s0,sp,800
     c40:	0009                	c.nop	2
array_add(temp,message,48);
     c42:	0200                	addi	s0,sp,256
     c44:	8600                	0x8600
	...
     c4e:	2200                	fld	fs0,0(a2)
     c50:	02000007          	0x2000007
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c54:	0008                	0x8
     c56:	0200                	addi	s0,sp,256
     c58:	8900                	0x8900
     c5a:	1200                	addi	s0,sp,288
     c5c:	0008                	0x8
     c5e:	1600                	addi	s0,sp,800
    for(i = (2*N); i < (3*N); ++i){
     c60:	0009                	c.nop	2
     c62:	0200                	addi	s0,sp,256
     c64:	8900                	0x8900
	...
}
     c6e:	2200                	fld	fs0,0(a2)
     c70:	fe000007          	0xfe000007
     c74:	02000007          	0x2000007
     c78:	8700                	0x8700
     c7a:	fe00                	fsw	fs0,56(a2)
        CT[i-(2*N)] = CT[i];
     c7c:	02000007          	0x2000007
     c80:	0008                	0x8
     c82:	0c00                	addi	s0,sp,528
    for(i = (2*N); i < (3*N); ++i){
     c84:	8900                	0x8900
     c86:	8b00                	0x8b00
        CT[i-(2*N)] = CT[i];
     c88:	3200                	fld	fs0,32(a2)
     c8a:	2324                	fld	fs1,64(a4)
    for(i = (2*N); i < (3*N); ++i){
     c8c:	1af0090f          	0x1af0090f
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c90:	121c                	addi	a5,sp,288
     c92:	0008                	0x8
     c94:	1600                	addi	s0,sp,800
    for(i = (2*N); i < ((2*N)+N); ++i){
     c96:	0009                	c.nop	2
     c98:	0200                	addi	s0,sp,256
     c9a:	8700                	0x8700
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca4:	2400                	fld	fs0,8(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca6:	ec000007          	0xec000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	02000007          	0x2000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cae:	7200                	flw	fs0,32(a2)
     cb0:	ec00                	fsw	fs0,24(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	f8000007          	0xf8000007
     cb6:	02000007          	0x2000007
     cba:	8400                	0x8400
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cbc:	f800                	fsw	fs0,48(s0)
     cbe:	fe000007          	0xfe000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc2:	0c000007          	0xc000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cc6:	8700                	0x8700
     cc8:	8b00                	0x8b00
     cca:	3200                	fld	fs0,32(a2)
     ccc:	2324                	fld	fs1,64(a4)
     cce:	1af0090f          	0x1af0090f
     cd2:	fe1c                	fsw	fa5,56(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd4:	02000007          	0x2000007
     cd8:	0008                	0x8
     cda:	0e00                	addi	s0,sp,784
     cdc:	8900                	0x8900
        if(a2[i] <= q/2)
     cde:	8b00                	0x8b00
     ce0:	3200                	fld	fs0,32(a2)
     ce2:	2324                	fld	fs1,64(a4)
    for (i = 0; i < N; ++i){
     ce4:	1af0090f          	0x1af0090f
     ce8:	2431                	jal	ef4 <memset+0x4c>
    c = polymult2(secret_key_fp,N,a2,N,0);
     cea:	121c                	addi	a5,sp,288
     cec:	0008                	0x8
     cee:	1600                	addi	s0,sp,800
     cf0:	0009                	c.nop	2
     cf2:	0200                	addi	s0,sp,256
     cf4:	7200                	flw	fs0,32(a2)
	...
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cfe:	6600                	flw	fs0,8(a2)
     d00:	80000007          	0x80000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d04:	01000007          	0x1000007
}
     d08:	5a00                	lw	s0,48(a2)
     d0a:	0848                	addi	a0,sp,20
     d0c:	0000                	unimp
     d0e:	0874                	addi	a3,sp,28
     d10:	0000                	unimp
     d12:	0001                	nop
     d14:	005a                	c.slli	zero,0x16
     d16:	0000                	unimp
     d18:	0000                	unimp
     d1a:	0000                	unimp
     d1c:	8e00                	0x8e00
        a2[i-(2*N)] = a2[i];
     d1e:	9a000007          	0x9a000007
     d22:	01000007          	0x1000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	5a00                	lw	s0,48(a2)
     d28:	0874                	addi	a3,sp,28
        a2[i-(2*N)] = a2[i];
     d2a:	0000                	unimp
     d2c:	0886                	slli	a7,a7,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	0000                	unimp
        if(a2[i] <= q/2)
     d30:	0001                	nop
     d32:	005a                	c.slli	zero,0x16
     d34:	0000                	unimp
            a2[i] = (-1)*(q-a2[i]);
     d36:	0000                	unimp
     d38:	0000                	unimp
     d3a:	aa00                	fsd	fs0,16(a2)
    for (i = 0; i < N; ++i){
     d3c:	b6000007          	0xb6000007
     d40:	01000007          	0x1000007
        c2[i-(2*N)] = c2[i];
     d44:	5a00                	lw	s0,48(a2)
     d46:	0886                	slli	a7,a7,0x1
     d48:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4a:	0898                	addi	a4,sp,80
     d4c:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     d4e:	0001                	nop
     d50:	005a                	c.slli	zero,0x16
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	0000                	unimp
  jal x0, default_exc_handler
     d54:	0000                	unimp
     d56:	0000                	unimp
  mv  x1, x0
     d58:	2400                	fld	fs0,8(s0)
     d5a:	4a000007          	0x4a000007
  mv  x3, x1
     d5e:	02000007          	0x2000007
  mv  x5, x1
     d62:	3100                	fld	fs0,32(a0)
  mv  x6, x1
     d64:	4a9f 0007 ce00      	0xce0000074a9f
  mv  x9, x1
     d6a:	02000007          	0x2000007
  mv x11, x1
     d6e:	3000                	fld	fs0,32(s0)
  mv x12, x1
     d70:	ce9f 0007 e400      	0xe4000007ce9f
  mv x15, x1
     d76:	01000007          	0x1000007
  mv x17, x1
     d7a:	5e00                	lw	s0,56(a2)
  mv x18, x1
     d7c:	0812                	slli	a6,a6,0x4
  mv x19, x1
     d7e:	0000                	unimp
  mv x20, x1
     d80:	0848                	addi	a0,sp,20
  mv x21, x1
     d82:	0000                	unimp
  mv x22, x1
     d84:	0002                	c.slli64	zero
  mv x23, x1
     d86:	9f31                	0x9f31
  mv x24, x1
     d88:	0848                	addi	a0,sp,20
  mv x25, x1
     d8a:	0000                	unimp
  mv x26, x1
     d8c:	08b2                	slli	a7,a7,0xc
  mv x27, x1
     d8e:	0000                	unimp
  mv x28, x1
     d90:	0002                	c.slli64	zero
  mv x29, x1
     d92:	9f30                	0x9f30
  mv x30, x1
     d94:	08b2                	slli	a7,a7,0xc
  mv x31, x1
     d96:	0000                	unimp
  la   x2, _stack_start
     d98:	08d6                	slli	a7,a7,0x15
     d9a:	0000                	unimp
     d9c:	0001                	nop
     d9e:	ea5e                	fsw	fs7,20(sp)
  la x26, _bss_start
     da0:	0008                	0x8
     da2:	0200                	addi	s0,sp,256
     da4:	0009                	c.nop	2
     da6:	0100                	addi	s0,sp,128
  la x27, _bss_end
     da8:	5e00                	lw	s0,56(a2)
	...
  bge x26, x27, zero_loop_end
     db2:	0722                	slli	a4,a4,0x8
  sw x0, 0(x26)
     db4:	0000                	unimp
     db6:	07f4                	addi	a3,sp,972
  addi x26, x26, 4
     db8:	0000                	unimp
  ble x26, x27, zero_loop
     dba:	0001                	nop
     dbc:	f462                	fsw	fs8,40(sp)
  addi x10, x0, 0
     dbe:	06000007          	0x6000007
  addi x11, x0, 0
     dc2:	0008                	0x8
     dc4:	0300                	addi	s0,sp,384
  jal x1, main
     dc6:	8b00                	0x8b00
     dc8:	9f7f                	0x9f7f
     dca:	0806                	slli	a6,a6,0x1
     dcc:	0000                	unimp
     dce:	0812                	slli	a6,a6,0x4
     dd0:	0000                	unimp
     dd2:	0006                	c.slli	zero,0x1
     dd4:	315c01f3          	0x315c01f3
     dd8:	9f1c                	0x9f1c
     dda:	0812                	slli	a6,a6,0x4
     ddc:	0000                	unimp
     dde:	0916                	slli	s2,s2,0x5
     de0:	0000                	unimp
     de2:	0001                	nop
     de4:	0062                	c.slli	zero,0x18
     de6:	0000                	unimp
     de8:	0000                	unimp
     dea:	0000                	unimp
     dec:	2200                	fld	fs0,0(a2)
     dee:	f4000007          	0xf4000007
     df2:	01000007          	0x1000007
     df6:	6200                	flw	fs0,0(a2)
     df8:	07f4                	addi	a3,sp,972
     dfa:	0000                	unimp
     dfc:	0806                	slli	a6,a6,0x1
     dfe:	0000                	unimp
     e00:	7f8b0003          	lb	zero,2040(s6)
     e04:	069f 0008 1200      	0x12000008069f
     e0a:	0008                	0x8
     e0c:	0600                	addi	s0,sp,768
     e0e:	f300                	fsw	fs0,32(a4)
     e10:	5c01                	li	s8,-32
     e12:	1c31                	addi	s8,s8,-20
     e14:	129f 0008 1600      	0x16000008129f
     e1a:	0009                	c.nop	2
     e1c:	0100                	addi	s0,sp,128
     e1e:	6200                	flw	fs0,0(a2)
	...
     e28:	0722                	slli	a4,a4,0x8
     e2a:	0000                	unimp
     e2c:	07f4                	addi	a3,sp,972
     e2e:	0000                	unimp
     e30:	0001                	nop
     e32:	f462                	fsw	fs8,40(sp)
     e34:	06000007          	0x6000007
     e38:	0008                	0x8
     e3a:	0300                	addi	s0,sp,384
     e3c:	8b00                	0x8b00
     e3e:	9f7f                	0x9f7f
     e40:	0806                	slli	a6,a6,0x1
     e42:	0000                	unimp
     e44:	0812                	slli	a6,a6,0x4
     e46:	0000                	unimp
     e48:	0006                	c.slli	zero,0x1
     e4a:	315c01f3          	0x315c01f3
     e4e:	9f1c                	0x9f1c
     e50:	0812                	slli	a6,a6,0x4
     e52:	0000                	unimp
     e54:	0916                	slli	s2,s2,0x5
     e56:	0000                	unimp
     e58:	0001                	nop
     e5a:	0062                	c.slli	zero,0x18
     e5c:	0000                	unimp
     e5e:	0000                	unimp
     e60:	0000                	unimp
     e62:	2200                	fld	fs0,0(a2)
     e64:	f4000007          	0xf4000007
     e68:	01000007          	0x1000007
     e6c:	6200                	flw	fs0,0(a2)
     e6e:	07f4                	addi	a3,sp,972
     e70:	0000                	unimp
     e72:	0806                	slli	a6,a6,0x1
     e74:	0000                	unimp
     e76:	7f8b0003          	lb	zero,2040(s6)
     e7a:	069f 0008 1200      	0x12000008069f
     e80:	0008                	0x8
     e82:	0600                	addi	s0,sp,768
     e84:	f300                	fsw	fs0,32(a4)
     e86:	5c01                	li	s8,-32
     e88:	1c31                	addi	s8,s8,-20
     e8a:	129f 0008 1600      	0x16000008129f
     e90:	0009                	c.nop	2
     e92:	0100                	addi	s0,sp,128
     e94:	6200                	flw	fs0,0(a2)
	...
     e9e:	0722                	slli	a4,a4,0x8
     ea0:	0000                	unimp
     ea2:	07f4                	addi	a3,sp,972
     ea4:	0000                	unimp
     ea6:	0001                	nop
     ea8:	f462                	fsw	fs8,40(sp)
     eaa:	06000007          	0x6000007
     eae:	0008                	0x8
     eb0:	0300                	addi	s0,sp,384
     eb2:	8b00                	0x8b00
     eb4:	9f7f                	0x9f7f
     eb6:	0806                	slli	a6,a6,0x1
     eb8:	0000                	unimp
     eba:	0812                	slli	a6,a6,0x4
     ebc:	0000                	unimp
     ebe:	0006                	c.slli	zero,0x1
     ec0:	315c01f3          	0x315c01f3
     ec4:	9f1c                	0x9f1c
     ec6:	0812                	slli	a6,a6,0x4
     ec8:	0000                	unimp
     eca:	0916                	slli	s2,s2,0x5
     ecc:	0000                	unimp
     ece:	0001                	nop
     ed0:	0062                	c.slli	zero,0x18
     ed2:	0000                	unimp
     ed4:	0000                	unimp
     ed6:	0000                	unimp
     ed8:	2200                	fld	fs0,0(a2)
     eda:	f4000007          	0xf4000007
     ede:	01000007          	0x1000007
     ee2:	6200                	flw	fs0,0(a2)
     ee4:	07f4                	addi	a3,sp,972
     ee6:	0000                	unimp
     ee8:	0806                	slli	a6,a6,0x1
     eea:	0000                	unimp
     eec:	7f8b0003          	lb	zero,2040(s6)
     ef0:	069f 0008 1200      	0x12000008069f
     ef6:	0008                	0x8
     ef8:	0600                	addi	s0,sp,768
     efa:	f300                	fsw	fs0,32(a4)
     efc:	5c01                	li	s8,-32
     efe:	1c31                	addi	s8,s8,-20
     f00:	129f 0008 1600      	0x16000008129f
     f06:	0009                	c.nop	2
     f08:	0100                	addi	s0,sp,128
     f0a:	6200                	flw	fs0,0(a2)
	...
     f14:	0722                	slli	a4,a4,0x8
     f16:	0000                	unimp
     f18:	07f4                	addi	a3,sp,972
     f1a:	0000                	unimp
     f1c:	0001                	nop
     f1e:	f462                	fsw	fs8,40(sp)
     f20:	06000007          	0x6000007
     f24:	0008                	0x8
     f26:	0300                	addi	s0,sp,384
     f28:	8b00                	0x8b00
     f2a:	9f7f                	0x9f7f
     f2c:	0806                	slli	a6,a6,0x1
     f2e:	0000                	unimp
     f30:	0812                	slli	a6,a6,0x4
     f32:	0000                	unimp
     f34:	0006                	c.slli	zero,0x1
     f36:	315c01f3          	0x315c01f3
     f3a:	9f1c                	0x9f1c
     f3c:	0812                	slli	a6,a6,0x4
     f3e:	0000                	unimp
     f40:	0916                	slli	s2,s2,0x5
     f42:	0000                	unimp
     f44:	0001                	nop
     f46:	0062                	c.slli	zero,0x18
     f48:	0000                	unimp
     f4a:	0000                	unimp
     f4c:	0000                	unimp
     f4e:	e000                	fsw	fs0,0(s0)
int main(){
     f50:	0004                	0x4
     f52:	4200                	lw	s0,0(a2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f54:	0005                	c.nop	1
     f56:	0100                	addi	s0,sp,128
     f58:	5a00                	lw	s0,48(a2)
     f5a:	0542                	slli	a0,a0,0x10
     f5c:	0000                	unimp
     f5e:	0572                	slli	a0,a0,0x1c
     f60:	0000                	unimp
int main(){
     f62:	0004                	0x4
     f64:	9f5a01f3          	0x9f5a01f3
     f68:	0572                	slli	a0,a0,0x1c
     f6a:	0000                	unimp
     f6c:	0584                	addi	s1,sp,704
     f6e:	0000                	unimp
     f70:	0001                	nop
    resultkon[0] = 0xaaaaaaa0;
     f72:	845a                	mv	s0,s6
     f74:	0005                	c.nop	1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f76:	cc00                	sw	s0,24(s0)
    resultkon[0] = 0xaaaaaaa0;
     f78:	0006                	c.slli	zero,0x1
     f7a:	0400                	addi	s0,sp,512
     f7c:	f300                	fsw	fs0,32(a4)
     f7e:	5a01                	li	s4,-32
     f80:	009f 0000 0000      	0x9f
    keys = generate_keys(N, p, q);
     f86:	0000                	unimp
     f88:	e000                	fsw	fs0,0(s0)
     f8a:	0004                	0x4
     f8c:	4000                	lw	s0,0(s0)
    resultkon[0] = 0xaaaaaaa0;
     f8e:	0005                	c.nop	1
    resultkon[0] = 0xaaaaaaa1;
     f90:	0100                	addi	s0,sp,128
     f92:	5b00                	lw	s0,48(a4)
    keys = generate_keys(N, p, q);
     f94:	0540                	addi	s0,sp,644
    resultkon[0] = 0xaaaaaaa1;
     f96:	0000                	unimp
     f98:	05ee                	slli	a1,a1,0x1b
    for(i = 0; i < N; ++i){
     f9a:	0000                	unimp
     f9c:	0001                	nop
        secret_key_f[i] = keys[i];
     f9e:	ee59                	bnez	a2,103c <main+0xec>
     fa0:	0005                	c.nop	1
     fa2:	0a00                	addi	s0,sp,272
     fa4:	0006                	c.slli	zero,0x1
     fa6:	0300                	addi	s0,sp,384
     fa8:	8800                	0x8800
    for(i = 0; i < N; ++i){
     faa:	9f01                	0x9f01
     fac:	060a                	slli	a2,a2,0x2
     fae:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     fb0:	061c                	addi	a5,sp,768
     fb2:	0000                	unimp
     fb4:	0004                	0x4
     fb6:	9f5b01f3          	0x9f5b01f3
     fba:	061c                	addi	a5,sp,768
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	0000                	unimp
     fbe:	06ba                	slli	a3,a3,0xe
     fc0:	0000                	unimp
     fc2:	0001                	nop
     fc4:	ba59                	j	95a <generate_keys+0x44>
    for(i = (2*N); i < (3*N); ++i){
     fc6:	0006                	c.slli	zero,0x1
     fc8:	cc00                	sw	s0,24(s0)
    for(i = (3*N); i < (4*N); ++i){
     fca:	0006                	c.slli	zero,0x1
     fcc:	0300                	addi	s0,sp,384
     fce:	8800                	0x8800
     fd0:	9f01                	0x9f01
	...
        public_key[i-(4*N)] = keys[i];
     fda:	04e0                	addi	s0,sp,588
     fdc:	0000                	unimp
     fde:	053e                	slli	a0,a0,0xf
    for(i = (4*N); i < (5*N); ++i){
     fe0:	0000                	unimp
     fe2:	0001                	nop
     fe4:	3e5c                	fld	fa5,184(a2)
     fe6:	0005                	c.nop	1
     fe8:	6800                	flw	fs0,16(s0)
     fea:	0005                	c.nop	1
        ring_poly[i-(5*N)] = keys[i];
     fec:	0100                	addi	s0,sp,128
     fee:	6a00                	flw	fs0,16(a2)
     ff0:	0568                	addi	a0,sp,652
     ff2:	0000                	unimp
     ff4:	0572                	slli	a0,a0,0x1c
    for(i = (5*N); i < (6*N+1); ++i){
     ff6:	0000                	unimp
     ff8:	0004                	0x4
    resultkon[0] = 0xbbbbbbb0;
     ffa:	9f5c01f3          	0x9f5c01f3
     ffe:	0572                	slli	a0,a0,0x1c
    1000:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1002:	0584                	addi	s1,sp,704
    1004:	0000                	unimp
    1006:	0001                	nop
    1008:	845c                	0x845c
    resultkon[0] = 0xbbbbbbb1;
    100a:	0005                	c.nop	1
    100c:	b200                	fsd	fs0,32(a2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100e:	0005                	c.nop	1
    1010:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
    1012:	6a00                	flw	fs0,16(a2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1014:	05b2                	slli	a1,a1,0xc
    resultkon[0] = 0xbbbbbbb1;
    1016:	0000                	unimp
    resultkon[0] = 0xccccccc0;
    1018:	06cc                	addi	a1,sp,836
    101a:	0000                	unimp
    101c:	0004                	0x4
    101e:	9f5c01f3          	0x9f5c01f3
	...
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    102a:	04e0                	addi	s0,sp,588
    102c:	0000                	unimp
    102e:	0538                	addi	a4,sp,648
    1030:	0000                	unimp
    1032:	0001                	nop
    1034:	385d                	jal	8ea <ext_euclid+0x21e>
    1036:	0005                	c.nop	1
    resultkon[0] = 0xccccccc1;	
    1038:	0000                	unimp
    103a:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xDEDEDEDE;
    103c:	0100                	addi	s0,sp,128
    103e:	6300                	flw	fs0,0(a4)
    resultkon[0] = 0xccccccc1;	
    1040:	0600                	addi	s0,sp,768
    1042:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    1044:	061c                	addi	a5,sp,768
    1046:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1048:	0004                	0x4
    104a:	9f5d01f3          	0x9f5d01f3
        if(!(message[i] == Dec_Message[i])){
    104e:	061c                	addi	a5,sp,768
    1050:	0000                	unimp
    1052:	06cc                	addi	a1,sp,836
    1054:	0000                	unimp
    1056:	0001                	nop
    1058:	00000063          	beqz	zero,1058 <main+0x108>
            resultkon[0] = 0xBABABABA;
    105c:	0000                	unimp
    105e:	0000                	unimp
    1060:	e000                	fsw	fs0,0(s0)
    1062:	0004                	0x4
    1064:	3800                	fld	fs0,48(s0)
}
    1066:	0005                	c.nop	1
    1068:	0100                	addi	s0,sp,128
    106a:	5e00                	lw	s0,56(a2)
    106c:	0538                	addi	a4,sp,648
    106e:	0000                	unimp
    1070:	05fe                	slli	a1,a1,0x1f
    1072:	0000                	unimp
    1074:	0001                	nop
    1076:	fe62                	fsw	fs8,60(sp)
    1078:	0005                	c.nop	1
    107a:	1c00                	addi	s0,sp,560
    107c:	0006                	c.slli	zero,0x1
            resultkon[0] = 0xDEDEDEDE;
    107e:	0400                	addi	s0,sp,512
    for(i = 0; i < 32; ++i){
    1080:	f300                	fsw	fs0,32(a4)
    1082:	5e01                	li	t3,-32
    1084:	1c9f 0006 cc00      	0xcc0000061c9f
    108a:	0006                	c.slli	zero,0x1
    108c:	0100                	addi	s0,sp,128
    108e:	6200                	flw	fs0,0(a2)
	...
    1098:	056a                	slli	a0,a0,0x1a
    109a:	0000                	unimp
    109c:	0572                	slli	a0,a0,0x1c
    109e:	0000                	unimp
    10a0:	0001                	nop
    10a2:	b26a                	fsd	fs10,288(sp)
    10a4:	0005                	c.nop	1
    10a6:	0e00                	addi	s0,sp,784
    10a8:	0006                	c.slli	zero,0x1
    10aa:	0100                	addi	s0,sp,128
    10ac:	6a00                	flw	fs0,16(a2)
    10ae:	061c                	addi	a5,sp,768
    10b0:	0000                	unimp
    10b2:	06cc                	addi	a1,sp,836
    10b4:	0000                	unimp
    10b6:	0001                	nop
    10b8:	006a                	c.slli	zero,0x1a
    10ba:	0000                	unimp
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	d000                	sw	s0,32(s0)
    10c2:	0005                	c.nop	1
    10c4:	d600                	sw	s0,40(a2)
    10c6:	0005                	c.nop	1
    10c8:	0100                	addi	s0,sp,128
    10ca:	5f00                	lw	s0,56(a4)
    10cc:	061c                	addi	a5,sp,768
    10ce:	0000                	unimp
    10d0:	0624                	addi	s1,sp,776
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	005f 0000 0000      	0x5f
    10dc:	0000                	unimp
    10de:	3600                	fld	fs0,40(a2)
    10e0:	0005                	c.nop	1
    10e2:	3800                	fld	fs0,48(s0)
    10e4:	0005                	c.nop	1
    10e6:	0200                	addi	s0,sp,256
    10e8:	3000                	fld	fs0,32(s0)
    10ea:	389f 0005 4300      	0x43000005389f
    10f0:	0005                	c.nop	1
    10f2:	0100                	addi	s0,sp,128
    10f4:	5f00                	lw	s0,56(a4)
    10f6:	0544                	addi	s1,sp,644
    10f8:	0000                	unimp
    10fa:	0546                	slli	a0,a0,0x11
    10fc:	0000                	unimp
    10fe:	0002                	c.slli64	zero
    1100:	9f30                	0x9f30
    1102:	0546                	slli	a0,a0,0x11
    1104:	0000                	unimp
    1106:	0551                	addi	a0,a0,20
    1108:	0000                	unimp
    110a:	0001                	nop
    110c:	525f 0005 5400      	0x54000005525f
    1112:	0005                	c.nop	1
    1114:	0200                	addi	s0,sp,256
    1116:	3000                	fld	fs0,32(s0)
    1118:	549f 0005 5800      	0x58000005549f
    111e:	0005                	c.nop	1
    1120:	0100                	addi	s0,sp,128
    1122:	5f00                	lw	s0,56(a4)
    1124:	0558                	addi	a4,sp,644
    1126:	0000                	unimp
    1128:	0572                	slli	a0,a0,0x1c
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	7264                	flw	fs1,100(a2)
    1130:	0005                	c.nop	1
    1132:	8000                	0x8000
    1134:	0005                	c.nop	1
    1136:	0100                	addi	s0,sp,128
    1138:	5f00                	lw	s0,56(a4)
    113a:	0580                	addi	s0,sp,704
    113c:	0000                	unimp
    113e:	0582                	c.slli64	a1
    1140:	0000                	unimp
    1142:	7f7f0003          	lb	zero,2039(t5)
    1146:	829f 0005 9200      	0x92000005829f
    114c:	0005                	c.nop	1
    114e:	0100                	addi	s0,sp,128
    1150:	5f00                	lw	s0,56(a4)
    1152:	0592                	slli	a1,a1,0x4
    1154:	0000                	unimp
    1156:	0594                	addi	a3,sp,704
    1158:	0000                	unimp
    115a:	7f7f0003          	lb	zero,2039(t5)
    115e:	949f 0005 ac00      	0xac000005949f
    1164:	0005                	c.nop	1
    1166:	0100                	addi	s0,sp,128
    1168:	5f00                	lw	s0,56(a4)
    116a:	05ac                	addi	a1,sp,712
    116c:	0000                	unimp
    116e:	05c0                	addi	s0,sp,708
    1170:	0000                	unimp
    1172:	0001                	nop
    1174:	c064                	sw	s1,68(s0)
    1176:	0005                	c.nop	1
    1178:	d000                	sw	s0,32(s0)
    117a:	0005                	c.nop	1
    117c:	0100                	addi	s0,sp,128
    117e:	5f00                	lw	s0,56(a4)
    1180:	05de                	slli	a1,a1,0x17
    1182:	0000                	unimp
    1184:	05ee                	slli	a1,a1,0x1b
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	ee5f 0005 fc00      	0xfc000005ee5f
    1190:	0005                	c.nop	1
    1192:	0100                	addi	s0,sp,128
    1194:	5900                	lw	s0,48(a0)
    1196:	0648                	addi	a0,sp,772
    1198:	0000                	unimp
    119a:	064c                	addi	a1,sp,772
    119c:	0000                	unimp
    119e:	0002                	c.slli64	zero
    11a0:	9f30                	0x9f30
    11a2:	064c                	addi	a1,sp,772
    11a4:	0000                	unimp
    11a6:	00000657          	0x657
    11aa:	0001                	nop
    11ac:	685f 0006 6a00      	0x6a000006685f
    11b2:	0006                	c.slli	zero,0x1
    11b4:	0100                	addi	s0,sp,128
    11b6:	6800                	flw	fs0,16(s0)
    11b8:	066a                	slli	a2,a2,0x1a
    11ba:	0000                	unimp
    11bc:	0686                	slli	a3,a3,0x1
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	865f 0006 8e00      	0x8e000006865f
    11c8:	0006                	c.slli	zero,0x1
    11ca:	0300                	addi	s0,sp,384
    11cc:	7f00                	flw	fs0,56(a4)
    11ce:	9f7f                	0x9f7f
    11d0:	068e                	slli	a3,a3,0x3
    11d2:	0000                	unimp
    11d4:	0696                	slli	a3,a3,0x5
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	965f 0006 a800      	0xa8000006965f
    11e0:	0006                	c.slli	zero,0x1
    11e2:	0100                	addi	s0,sp,128
    11e4:	5d00                	lw	s0,56(a0)
    11e6:	06a8                	addi	a0,sp,840
    11e8:	0000                	unimp
    11ea:	06b6                	slli	a3,a3,0xd
    11ec:	0000                	unimp
    11ee:	0001                	nop
    11f0:	b65f 0006 b800      	0xb8000006b65f
    11f6:	0006                	c.slli	zero,0x1
    11f8:	0300                	addi	s0,sp,384
    11fa:	7f00                	flw	fs0,56(a4)
    11fc:	9f7f                	0x9f7f
    11fe:	06b8                	addi	a4,sp,840
    1200:	0000                	unimp
    1202:	06ba                	slli	a3,a3,0xe
    1204:	0000                	unimp
    1206:	0001                	nop
    1208:	ba5f 0006 cc00      	0xcc000006ba5f
    120e:	0006                	c.slli	zero,0x1
    1210:	0100                	addi	s0,sp,128
    1212:	5900                	lw	s0,48(a0)
	...
    121c:	05d0                	addi	a2,sp,708
    121e:	0000                	unimp
    1220:	05de                	slli	a1,a1,0x17
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	1c5e                	slli	s8,s8,0x37
    1228:	0006                	c.slli	zero,0x1
    122a:	2000                	fld	fs0,0(s0)
    122c:	0006                	c.slli	zero,0x1
    122e:	0100                	addi	s0,sp,128
    1230:	5e00                	lw	s0,56(a2)
	...
    123a:	05f2                	slli	a1,a1,0x1c
    123c:	0000                	unimp
    123e:	061c                	addi	a5,sp,768
    1240:	0000                	unimp
    1242:	0006                	c.slli	zero,0x1
    1244:	0016cc03          	lbu	s8,1(a3) # 1001 <main+0xb1>
    1248:	9f00                	0x9f00
	...
    1252:	0530                	addi	a2,sp,648
    1254:	0000                	unimp
    1256:	0604                	addi	s1,sp,768
    1258:	0000                	unimp
    125a:	0002                	c.slli64	zero
    125c:	0085                	addi	ra,ra,1
    125e:	061c                	addi	a5,sp,768
    1260:	0000                	unimp
    1262:	06cc                	addi	a1,sp,836
    1264:	0000                	unimp
    1266:	0002                	c.slli64	zero
    1268:	0085                	addi	ra,ra,1
	...
    1272:	0530                	addi	a2,sp,648
    1274:	0000                	unimp
    1276:	0606                	slli	a2,a2,0x1
    1278:	0000                	unimp
    127a:	0002                	c.slli64	zero
    127c:	0086                	slli	ra,ra,0x1
    127e:	061c                	addi	a5,sp,768
    1280:	0000                	unimp
    1282:	06cc                	addi	a1,sp,836
    1284:	0000                	unimp
    1286:	0002                	c.slli64	zero
    1288:	0086                	slli	ra,ra,0x1
	...
    1292:	0646                	slli	a2,a2,0x11
    1294:	0000                	unimp
    1296:	00000647          	fmsub.s	fa2,ft0,ft0,ft0,rne
    129a:	0001                	nop
    129c:	475a                	lw	a4,148(sp)
    129e:	0006                	c.slli	zero,0x1
    12a0:	a800                	fsd	fs0,16(s0)
    12a2:	0006                	c.slli	zero,0x1
    12a4:	0100                	addi	s0,sp,128
    12a6:	6b00                	flw	fs0,16(a4)
	...
    12b0:	0530                	addi	a2,sp,648
    12b2:	0000                	unimp
    12b4:	05ee                	slli	a1,a1,0x1b
    12b6:	0000                	unimp
    12b8:	0002                	c.slli64	zero
    12ba:	0089                	addi	ra,ra,2
    12bc:	05ee                	slli	a1,a1,0x1b
    12be:	0000                	unimp
    12c0:	0606                	slli	a2,a2,0x1
    12c2:	0000                	unimp
    12c4:	000c                	0xc
    12c6:	0086                	slli	ra,ra,0x1
    12c8:	0188                	addi	a0,sp,192
    12ca:	2432                	fld	fs0,264(sp)
    12cc:	f0090f23          	sb	zero,-226(s2)
    12d0:	1c1a                	slli	s8,s8,0x26
    12d2:	061c                	addi	a5,sp,768
    12d4:	0000                	unimp
    12d6:	06ba                	slli	a3,a3,0xe
    12d8:	0000                	unimp
    12da:	0002                	c.slli64	zero
    12dc:	0089                	addi	ra,ra,2
    12de:	06ba                	slli	a3,a3,0xe
    12e0:	0000                	unimp
    12e2:	06cc                	addi	a1,sp,836
    12e4:	0000                	unimp
    12e6:	000c                	0xc
    12e8:	0086                	slli	ra,ra,0x1
    12ea:	0188                	addi	a0,sp,192
    12ec:	2432                	fld	fs0,264(sp)
    12ee:	f0090f23          	sb	zero,-226(s2)
    12f2:	1c1a                	slli	s8,s8,0x26
	...
    12fc:	0536                	slli	a0,a0,0xd
    12fe:	0000                	unimp
    1300:	05f6                	slli	a1,a1,0x1d
    1302:	0000                	unimp
    1304:	0002                	c.slli64	zero
    1306:	0072                	c.slli	zero,0x1c
    1308:	05f6                	slli	a1,a1,0x1d
    130a:	0000                	unimp
    130c:	0608                	addi	a0,sp,768
    130e:	0000                	unimp
    1310:	0002                	c.slli64	zero
    1312:	061c0087          	0x61c0087
    1316:	0000                	unimp
    1318:	06cc                	addi	a1,sp,836
    131a:	0000                	unimp
    131c:	0002                	c.slli64	zero
    131e:	0072                	c.slli	zero,0x1c
	...
    1328:	0530                	addi	a2,sp,648
    132a:	0000                	unimp
    132c:	060a                	slli	a2,a2,0x2
    132e:	0000                	unimp
    1330:	0001                	nop
    1332:	0a68                	addi	a0,sp,284
    1334:	0006                	c.slli	zero,0x1
    1336:	1c00                	addi	s0,sp,560
    1338:	0006                	c.slli	zero,0x1
    133a:	0600                	addi	s0,sp,768
    133c:	f300                	fsw	fs0,32(a4)
    133e:	5b01                	li	s6,-32
    1340:	1c31                	addi	s8,s8,-20
    1342:	1c9f 0006 cc00      	0xcc0000061c9f
    1348:	0006                	c.slli	zero,0x1
    134a:	0100                	addi	s0,sp,128
    134c:	6800                	flw	fs0,16(s0)
	...
    1356:	0530                	addi	a2,sp,648
    1358:	0000                	unimp
    135a:	060a                	slli	a2,a2,0x2
    135c:	0000                	unimp
    135e:	0001                	nop
    1360:	0a68                	addi	a0,sp,284
    1362:	0006                	c.slli	zero,0x1
    1364:	1c00                	addi	s0,sp,560
    1366:	0006                	c.slli	zero,0x1
    1368:	0600                	addi	s0,sp,768
    136a:	f300                	fsw	fs0,32(a4)
    136c:	5b01                	li	s6,-32
    136e:	1c31                	addi	s8,s8,-20
    1370:	1c9f 0006 cc00      	0xcc0000061c9f
    1376:	0006                	c.slli	zero,0x1
    1378:	0100                	addi	s0,sp,128
    137a:	6800                	flw	fs0,16(s0)
	...
    1384:	0530                	addi	a2,sp,648
    1386:	0000                	unimp
    1388:	060a                	slli	a2,a2,0x2
    138a:	0000                	unimp
    138c:	0001                	nop
    138e:	0a68                	addi	a0,sp,284
    1390:	0006                	c.slli	zero,0x1
    1392:	1c00                	addi	s0,sp,560
    1394:	0006                	c.slli	zero,0x1
    1396:	0600                	addi	s0,sp,768
    1398:	f300                	fsw	fs0,32(a4)
    139a:	5b01                	li	s6,-32
    139c:	1c31                	addi	s8,s8,-20
    139e:	1c9f 0006 cc00      	0xcc0000061c9f
    13a4:	0006                	c.slli	zero,0x1
    13a6:	0100                	addi	s0,sp,128
    13a8:	6800                	flw	fs0,16(s0)
	...
    13b2:	0534                	addi	a3,sp,648
    13b4:	0000                	unimp
    13b6:	0558                	addi	a4,sp,644
    13b8:	0000                	unimp
    13ba:	0001                	nop
    13bc:	5864                	lw	s1,116(s0)
    13be:	0005                	c.nop	1
    13c0:	7200                	flw	fs0,32(a2)
    13c2:	0005                	c.nop	1
    13c4:	0300                	addi	s0,sp,384
    13c6:	8300                	0x8300
    13c8:	9f7f                	0x9f7f
    13ca:	0572                	slli	a0,a0,0x1c
    13cc:	0000                	unimp
    13ce:	05ac                	addi	a1,sp,712
    13d0:	0000                	unimp
    13d2:	0001                	nop
    13d4:	ac64                	fsd	fs1,216(s0)
    13d6:	0005                	c.nop	1
    13d8:	0000                	unimp
    13da:	0006                	c.slli	zero,0x1
    13dc:	0300                	addi	s0,sp,384
    13de:	8300                	0x8300
    13e0:	9f7f                	0x9f7f
    13e2:	0600                	addi	s0,sp,768
    13e4:	0000                	unimp
    13e6:	061c                	addi	a5,sp,768
    13e8:	0000                	unimp
    13ea:	0006                	c.slli	zero,0x1
    13ec:	315d01f3          	0x315d01f3
    13f0:	9f1c                	0x9f1c
    13f2:	061c                	addi	a5,sp,768
    13f4:	0000                	unimp
    13f6:	06cc                	addi	a1,sp,836
    13f8:	0000                	unimp
    13fa:	7f830003          	lb	zero,2040(t1)
    13fe:	009f 0000 0000      	0x9f
    1404:	0000                	unimp
    1406:	7a00                	flw	fs0,48(a2)
    1408:	ea000003          	lb	zero,-352(zero) # fffffea0 <_stack_start+0xfffefea0>
    140c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1410:	5a00                	lw	s0,48(a2)
    1412:	03ea                	slli	t2,t2,0x1a
    1414:	0000                	unimp
    1416:	0406                	slli	s0,s0,0x1
    1418:	0000                	unimp
    141a:	0004                	0x4
    141c:	9f5a01f3          	0x9f5a01f3
    1420:	0406                	slli	s0,s0,0x1
    1422:	0000                	unimp
    1424:	043e                	slli	s0,s0,0xf
    1426:	0000                	unimp
    1428:	0001                	nop
    142a:	3e5a                	fld	ft8,432(sp)
    142c:	0004                	0x4
    142e:	e000                	fsw	fs0,0(s0)
    1430:	0004                	0x4
    1432:	0400                	addi	s0,sp,512
    1434:	f300                	fsw	fs0,32(a4)
    1436:	5a01                	li	s4,-32
    1438:	009f 0000 0000      	0x9f
    143e:	0000                	unimp
    1440:	7a00                	flw	fs0,48(a2)
    1442:	c8000003          	lb	zero,-896(zero) # fffffc80 <_stack_start+0xfffefc80>
    1446:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    144a:	5b00                	lw	s0,48(a4)
    144c:	03c8                	addi	a0,sp,452
    144e:	0000                	unimp
    1450:	03ea                	slli	t2,t2,0x1a
    1452:	0000                	unimp
    1454:	0001                	nop
    1456:	ea56                	fsw	fs5,20(sp)
    1458:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    145c:	0004                	0x4
    145e:	0300                	addi	s0,sp,384
    1460:	8c00                	0x8c00
    1462:	9f01                	0x9f01
    1464:	0406                	slli	s0,s0,0x1
    1466:	0000                	unimp
    1468:	043e                	slli	s0,s0,0xf
    146a:	0000                	unimp
    146c:	0001                	nop
    146e:	3e56                	fld	ft8,368(sp)
    1470:	0004                	0x4
    1472:	8400                	0x8400
    1474:	0004                	0x4
    1476:	0300                	addi	s0,sp,384
    1478:	8c00                	0x8c00
    147a:	9f01                	0x9f01
    147c:	0484                	addi	s1,sp,576
    147e:	0000                	unimp
    1480:	04e0                	addi	s0,sp,588
    1482:	0000                	unimp
    1484:	0004                	0x4
    1486:	9f5b01f3          	0x9f5b01f3
	...
    1492:	037a                	slli	t1,t1,0x1e
    1494:	0000                	unimp
    1496:	03f0                	addi	a2,sp,460
    1498:	0000                	unimp
    149a:	0001                	nop
    149c:	f05c                	fsw	fa5,36(s0)
    149e:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    14a2:	0004                	0x4
    14a4:	0400                	addi	s0,sp,512
    14a6:	f300                	fsw	fs0,32(a4)
    14a8:	5c01                	li	s8,-32
    14aa:	069f 0004 5400      	0x54000004069f
    14b0:	0004                	0x4
    14b2:	0100                	addi	s0,sp,128
    14b4:	5c00                	lw	s0,56(s0)
    14b6:	0454                	addi	a3,sp,516
    14b8:	0000                	unimp
    14ba:	04e0                	addi	s0,sp,588
    14bc:	0000                	unimp
    14be:	0004                	0x4
    14c0:	9f5c01f3          	0x9f5c01f3
	...
    14cc:	037a                	slli	t1,t1,0x1e
    14ce:	0000                	unimp
    14d0:	03ce                	slli	t2,t2,0x13
    14d2:	0000                	unimp
    14d4:	0001                	nop
    14d6:	ce5d                	beqz	a2,1594 <product2+0x120>
    14d8:	92000003          	lb	zero,-1760(zero) # fffff920 <_stack_start+0xfffef920>
    14dc:	0004                	0x4
    14de:	0100                	addi	s0,sp,128
    14e0:	5900                	lw	s0,48(a0)
    14e2:	0492                	slli	s1,s1,0x4
    14e4:	0000                	unimp
    14e6:	04a8                	addi	a0,sp,584
    14e8:	0000                	unimp
    14ea:	0004                	0x4
    14ec:	9f5d01f3          	0x9f5d01f3
    14f0:	04a8                	addi	a0,sp,584
    14f2:	0000                	unimp
    14f4:	04e0                	addi	s0,sp,588
    14f6:	0000                	unimp
    14f8:	0001                	nop
    14fa:	0059                	c.nop	22
    14fc:	0000                	unimp
    14fe:	0000                	unimp
    1500:	0000                	unimp
    1502:	7a00                	flw	fs0,48(a2)
    1504:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    1508:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    150c:	5e00                	lw	s0,56(a2)
    150e:	03fe                	slli	t2,t2,0x1f
    1510:	0000                	unimp
    1512:	0406                	slli	s0,s0,0x1
    1514:	0000                	unimp
    1516:	0004                	0x4
    1518:	9f5e01f3          	0x9f5e01f3
    151c:	0406                	slli	s0,s0,0x1
    151e:	0000                	unimp
    1520:	0454                	addi	a3,sp,516
    1522:	0000                	unimp
    1524:	0001                	nop
    1526:	545e                	lw	s0,244(sp)
    1528:	0004                	0x4
    152a:	e000                	fsw	fs0,0(s0)
    152c:	0004                	0x4
    152e:	0400                	addi	s0,sp,512
    1530:	f300                	fsw	fs0,32(a4)
    1532:	5e01                	li	t3,-32
    1534:	009f 0000 0000      	0x9f
    153a:	0000                	unimp
    153c:	ce00                	sw	s0,24(a2)
    153e:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    1542:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1546:	8000                	0x8000
    1548:	fe00                	fsw	fs0,56(a2)
    154a:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    154e:	0004                	0x4
    1550:	0200                	addi	s0,sp,256
    1552:	8400                	0x8400
    1554:	0600                	addi	s0,sp,768
    1556:	0004                	0x4
    1558:	5400                	lw	s0,40(s0)
    155a:	0004                	0x4
    155c:	0200                	addi	s0,sp,256
    155e:	8000                	0x8000
    1560:	5400                	lw	s0,40(s0)
    1562:	0004                	0x4
    1564:	8400                	0x8400
    1566:	0004                	0x4
    1568:	0200                	addi	s0,sp,256
    156a:	8400                	0x8400
    156c:	a800                	fsd	fs0,16(s0)
    156e:	0004                	0x4
    1570:	d200                	sw	s0,32(a2)
    1572:	0004                	0x4
    1574:	0200                	addi	s0,sp,256
    1576:	8400                	0x8400
	...
    1580:	d000                	sw	s0,32(s0)
    1582:	de000003          	lb	zero,-544(zero) # fffffde0 <_stack_start+0xfffefde0>
    1586:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    158a:	3000                	fld	fs0,32(s0)
    158c:	de9f 0003 e400      	0xe4000003de9f
    1592:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1596:	6e00                	flw	fs0,24(a2)
    1598:	03e4                	addi	s1,sp,460
    159a:	0000                	unimp
    159c:	03ea                	slli	t2,t2,0x1a
    159e:	0000                	unimp
    15a0:	0001                	nop
    15a2:	ea6d                	bnez	a2,1694 <product2+0x220>
    15a4:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    15a8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ac:	5a00                	lw	s0,48(a2)
    15ae:	0406                	slli	s0,s0,0x1
    15b0:	0000                	unimp
    15b2:	0428                	addi	a0,sp,520
    15b4:	0000                	unimp
    15b6:	0001                	nop
    15b8:	286e                	fld	fa6,216(sp)
    15ba:	0004                	0x4
    15bc:	3800                	fld	fs0,48(s0)
    15be:	0004                	0x4
    15c0:	0100                	addi	s0,sp,128
    15c2:	6d00                	flw	fs0,24(a0)
    15c4:	0438                	addi	a4,sp,520
    15c6:	0000                	unimp
    15c8:	043c                	addi	a5,sp,520
    15ca:	0000                	unimp
    15cc:	7f8d0003          	lb	zero,2040(s10)
    15d0:	3c9f 0004 3e00      	0x3e0000043c9f
    15d6:	0004                	0x4
    15d8:	0100                	addi	s0,sp,128
    15da:	6d00                	flw	fs0,24(a0)
    15dc:	043e                	slli	s0,s0,0xf
    15de:	0000                	unimp
    15e0:	044e                	slli	s0,s0,0x13
    15e2:	0000                	unimp
    15e4:	0001                	nop
    15e6:	4e5a                	lw	t3,148(sp)
    15e8:	0004                	0x4
    15ea:	5200                	lw	s0,32(a2)
    15ec:	0004                	0x4
    15ee:	0300                	addi	s0,sp,384
    15f0:	7a00                	flw	fs0,48(a2)
    15f2:	9f7f                	0x9f7f
    15f4:	0452                	slli	s0,s0,0x14
    15f6:	0000                	unimp
    15f8:	0454                	addi	a3,sp,516
    15fa:	0000                	unimp
    15fc:	0001                	nop
    15fe:	845a                	mv	s0,s6
    1600:	0004                	0x4
    1602:	9a00                	0x9a00
    1604:	0004                	0x4
    1606:	0100                	addi	s0,sp,128
    1608:	6500                	flw	fs0,8(a0)
    160a:	04d2                	slli	s1,s1,0x14
    160c:	0000                	unimp
    160e:	04e0                	addi	s0,sp,588
    1610:	0000                	unimp
    1612:	0001                	nop
    1614:	0065                	c.nop	25
    1616:	0000                	unimp
    1618:	0000                	unimp
    161a:	0000                	unimp
    161c:	fe00                	fsw	fs0,56(a2)
    161e:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1622:	0004                	0x4
    1624:	0100                	addi	s0,sp,128
    1626:	5d00                	lw	s0,56(a0)
    1628:	0406                	slli	s0,s0,0x1
    162a:	0000                	unimp
    162c:	0422                	slli	s0,s0,0x8
    162e:	0000                	unimp
    1630:	0001                	nop
    1632:	546d                	li	s0,-5
    1634:	0004                	0x4
    1636:	8400                	0x8400
    1638:	0004                	0x4
    163a:	0100                	addi	s0,sp,128
    163c:	5d00                	lw	s0,56(a0)
    163e:	04a8                	addi	a0,sp,584
    1640:	0000                	unimp
    1642:	04d2                	slli	s1,s1,0x14
    1644:	0000                	unimp
    1646:	0001                	nop
    1648:	005d                	c.nop	23
    164a:	0000                	unimp
    164c:	0000                	unimp
    164e:	0000                	unimp
    1650:	5400                	lw	s0,40(s0)
    1652:	0004                	0x4
    1654:	6600                	flw	fs0,8(a2)
    1656:	0004                	0x4
    1658:	0100                	addi	s0,sp,128
    165a:	5e00                	lw	s0,56(a2)
    165c:	0466                	slli	s0,s0,0x19
    165e:	0000                	unimp
    1660:	046c                	addi	a1,sp,524
    1662:	0000                	unimp
    1664:	017e0003          	lb	zero,23(t3) # fffe0017 <_stack_start+0xfffd0017>
    1668:	6c9f 0004 7600      	0x760000046c9f
    166e:	0004                	0x4
    1670:	0100                	addi	s0,sp,128
    1672:	5e00                	lw	s0,56(a2)
    1674:	04ac                	addi	a1,sp,584
    1676:	0000                	unimp
    1678:	04be                	slli	s1,s1,0xf
    167a:	0000                	unimp
    167c:	0001                	nop
    167e:	be5e                	fsd	fs7,312(sp)
    1680:	0004                	0x4
    1682:	c600                	sw	s0,8(a2)
    1684:	0004                	0x4
    1686:	0300                	addi	s0,sp,384
    1688:	7e00                	flw	fs0,56(a2)
    168a:	9f01                	0x9f01
    168c:	04c6                	slli	s1,s1,0x11
    168e:	0000                	unimp
    1690:	04d2                	slli	s1,s1,0x14
    1692:	0000                	unimp
    1694:	0001                	nop
    1696:	005e                	c.slli	zero,0x17
    1698:	0000                	unimp
    169a:	0000                	unimp
    169c:	0000                	unimp
    169e:	8800                	0x8800
    16a0:	0004                	0x4
    16a2:	a800                	fsd	fs0,16(s0)
    16a4:	0004                	0x4
    16a6:	0600                	addi	s0,sp,768
    16a8:	0300                	addi	s0,sp,384
    16aa:	1474                	addi	a3,sp,556
    16ac:	0000                	unimp
    16ae:	009f 0000 0000      	0x9f
    16b4:	0000                	unimp
    16b6:	ce00                	sw	s0,24(a2)
    16b8:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    16bc:	0004                	0x4
    16be:	0200                	addi	s0,sp,256
    16c0:	7b00                	flw	fs0,48(a4)
    16c2:	a800                	fsd	fs0,16(s0)
    16c4:	0004                	0x4
    16c6:	d200                	sw	s0,32(a2)
    16c8:	0004                	0x4
    16ca:	0200                	addi	s0,sp,256
    16cc:	7b00                	flw	fs0,48(a4)
	...
    16d6:	d000                	sw	s0,32(s0)
    16d8:	8c000003          	lb	zero,-1856(zero) # fffff8c0 <_stack_start+0xfffef8c0>
    16dc:	0004                	0x4
    16de:	0200                	addi	s0,sp,256
    16e0:	7200                	flw	fs0,32(a2)
    16e2:	a800                	fsd	fs0,16(s0)
    16e4:	0004                	0x4
    16e6:	e000                	fsw	fs0,0(s0)
    16e8:	0004                	0x4
    16ea:	0200                	addi	s0,sp,256
    16ec:	7200                	flw	fs0,32(a2)
	...
    16f6:	ce00                	sw	s0,24(a2)
    16f8:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    16fc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1700:	5d00                	lw	s0,56(a0)
    1702:	03fe                	slli	t2,t2,0x1f
    1704:	0000                	unimp
    1706:	0406                	slli	s0,s0,0x1
    1708:	0000                	unimp
    170a:	7f790003          	lb	zero,2039(s2)
    170e:	069f 0004 5400      	0x54000004069f
    1714:	0004                	0x4
    1716:	0100                	addi	s0,sp,128
    1718:	5d00                	lw	s0,56(a0)
    171a:	0454                	addi	a3,sp,516
    171c:	0000                	unimp
    171e:	0492                	slli	s1,s1,0x4
    1720:	0000                	unimp
    1722:	7f790003          	lb	zero,2039(s2)
    1726:	929f 0004 a800      	0xa8000004929f
    172c:	0004                	0x4
    172e:	0600                	addi	s0,sp,768
    1730:	f300                	fsw	fs0,32(a4)
    1732:	5d01                	li	s10,-32
    1734:	1c31                	addi	s8,s8,-20
    1736:	a89f 0004 e000      	0xe0000004a89f
    173c:	0004                	0x4
    173e:	0300                	addi	s0,sp,384
    1740:	7900                	flw	fs0,48(a0)
    1742:	9f7f                	0x9f7f
	...
    174c:	0394                	addi	a3,sp,448
    174e:	0000                	unimp
    1750:	0496                	slli	s1,s1,0x5
    1752:	0000                	unimp
    1754:	0001                	nop
    1756:	00049663          	bnez	s1,1762 <result+0x96>
    175a:	a800                	fsd	fs0,16(s0)
    175c:	0004                	0x4
    175e:	0a00                	addi	s0,sp,272
    1760:	f300                	fsw	fs0,32(a4)
    1762:	5b01                	li	s6,-32
    1764:	225d01f3          	0x225d01f3
    1768:	1c31                	addi	s8,s8,-20
    176a:	a89f 0004 e000      	0xe0000004a89f
    1770:	0004                	0x4
    1772:	0100                	addi	s0,sp,128
    1774:	6300                	flw	fs0,0(a4)
	...
    177e:	03ce                	slli	t2,t2,0x13
    1780:	0000                	unimp
    1782:	0484                	addi	s1,sp,576
    1784:	0000                	unimp
    1786:	0001                	nop
    1788:	846c                	0x846c
    178a:	0004                	0x4
    178c:	a800                	fsd	fs0,16(s0)
    178e:	0004                	0x4
    1790:	0600                	addi	s0,sp,768
    1792:	f300                	fsw	fs0,32(a4)
    1794:	5b01                	li	s6,-32
    1796:	1c31                	addi	s8,s8,-20
    1798:	a89f 0004 d200      	0xd2000004a89f
    179e:	0004                	0x4
    17a0:	0100                	addi	s0,sp,128
    17a2:	6c00                	flw	fs0,24(s0)
    17a4:	04d2                	slli	s1,s1,0x14
    17a6:	0000                	unimp
    17a8:	04e0                	addi	s0,sp,588
    17aa:	0000                	unimp
    17ac:	0006                	c.slli	zero,0x1
    17ae:	315b01f3          	0x315b01f3
    17b2:	9f1c                	0x9f1c
	...
    17bc:	03ce                	slli	t2,t2,0x13
    17be:	0000                	unimp
    17c0:	03fe                	slli	t2,t2,0x1f
    17c2:	0000                	unimp
    17c4:	0001                	nop
    17c6:	fe5d                	bnez	a2,1784 <result+0xb8>
    17c8:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    17cc:	0004                	0x4
    17ce:	0300                	addi	s0,sp,384
    17d0:	7900                	flw	fs0,48(a0)
    17d2:	9f7f                	0x9f7f
    17d4:	0406                	slli	s0,s0,0x1
    17d6:	0000                	unimp
    17d8:	0454                	addi	a3,sp,516
    17da:	0000                	unimp
    17dc:	0001                	nop
    17de:	545d                	li	s0,-9
    17e0:	0004                	0x4
    17e2:	9200                	0x9200
    17e4:	0004                	0x4
    17e6:	0300                	addi	s0,sp,384
    17e8:	7900                	flw	fs0,48(a0)
    17ea:	9f7f                	0x9f7f
    17ec:	0492                	slli	s1,s1,0x4
    17ee:	0000                	unimp
    17f0:	04a8                	addi	a0,sp,584
    17f2:	0000                	unimp
    17f4:	0006                	c.slli	zero,0x1
    17f6:	315d01f3          	0x315d01f3
    17fa:	9f1c                	0x9f1c
    17fc:	04a8                	addi	a0,sp,584
    17fe:	0000                	unimp
    1800:	04e0                	addi	s0,sp,588
    1802:	0000                	unimp
    1804:	7f790003          	lb	zero,2039(s2)
    1808:	009f 0000 0000      	0x9f
    180e:	0000                	unimp
    1810:	c200                	sw	s0,0(a2)
    1812:	0001                	nop
    1814:	4600                	lw	s0,8(a2)
    1816:	0002                	c.slli64	zero
    1818:	0100                	addi	s0,sp,128
    181a:	5a00                	lw	s0,48(a2)
    181c:	0246                	slli	tp,tp,0x11
    181e:	0000                	unimp
    1820:	027c                	addi	a5,sp,268
    1822:	0000                	unimp
    1824:	0004                	0x4
    1826:	9f5a01f3          	0x9f5a01f3
    182a:	027c                	addi	a5,sp,268
    182c:	0000                	unimp
    182e:	02b0                	addi	a2,sp,328
    1830:	0000                	unimp
    1832:	0001                	nop
    1834:	b05a                	fsd	fs6,32(sp)
    1836:	0002                	c.slli64	zero
    1838:	7a00                	flw	fs0,48(a2)
    183a:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    183e:	f300                	fsw	fs0,32(a4)
    1840:	5a01                	li	s4,-32
    1842:	009f 0000 0000      	0x9f
    1848:	0000                	unimp
    184a:	c200                	sw	s0,0(a2)
    184c:	0001                	nop
    184e:	4800                	lw	s0,16(s0)
    1850:	0002                	c.slli64	zero
    1852:	0100                	addi	s0,sp,128
    1854:	5b00                	lw	s0,48(a4)
    1856:	0248                	addi	a0,sp,260
    1858:	0000                	unimp
    185a:	024d                	addi	tp,tp,19
    185c:	0000                	unimp
    185e:	0001                	nop
    1860:	4d5c                	lw	a5,28(a0)
    1862:	0002                	c.slli64	zero
    1864:	7c00                	flw	fs0,56(s0)
    1866:	0002                	c.slli64	zero
    1868:	0300                	addi	s0,sp,384
    186a:	8800                	0x8800
    186c:	9f01                	0x9f01
    186e:	027c                	addi	a5,sp,268
    1870:	0000                	unimp
    1872:	02b0                	addi	a2,sp,328
    1874:	0000                	unimp
    1876:	0001                	nop
    1878:	0002b05b          	0x2b05b
    187c:	0200                	addi	s0,sp,256
    187e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1882:	8800                	0x8800
    1884:	9f01                	0x9f01
    1886:	0302                	c.slli64	t1
    1888:	0000                	unimp
    188a:	037a                	slli	t1,t1,0x1e
    188c:	0000                	unimp
    188e:	0004                	0x4
    1890:	9f5b01f3          	0x9f5b01f3
	...
    189c:	01c2                	slli	gp,gp,0x10
    189e:	0000                	unimp
    18a0:	0238                	addi	a4,sp,264
    18a2:	0000                	unimp
    18a4:	0001                	nop
    18a6:	385c                	fld	fa5,176(s0)
    18a8:	0002                	c.slli64	zero
    18aa:	4d00                	lw	s0,24(a0)
    18ac:	0002                	c.slli64	zero
    18ae:	0100                	addi	s0,sp,128
    18b0:	6000                	flw	fs0,0(s0)
    18b2:	024d                	addi	tp,tp,19
    18b4:	0000                	unimp
    18b6:	027c                	addi	a5,sp,268
    18b8:	0000                	unimp
    18ba:	b8780003          	lb	zero,-1145(a6) # 590b4fbb <_stack_start+0x590a4fbb>
    18be:	7c7f                	0x7c7f
    18c0:	0002                	c.slli64	zero
    18c2:	b000                	fsd	fs0,32(s0)
    18c4:	0002                	c.slli64	zero
    18c6:	0100                	addi	s0,sp,128
    18c8:	6000                	flw	fs0,0(s0)
    18ca:	02b0                	addi	a2,sp,328
    18cc:	0000                	unimp
    18ce:	02f2                	slli	t0,t0,0x1c
    18d0:	0000                	unimp
    18d2:	b8780003          	lb	zero,-1145(a6)
    18d6:	f27f                	0xf27f
    18d8:	0002                	c.slli64	zero
    18da:	7a00                	flw	fs0,48(a2)
    18dc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    18e0:	9100                	0x9100
    18e2:	7fb8                	flw	fa4,120(a5)
	...
    18ec:	01c2                	slli	gp,gp,0x10
    18ee:	0000                	unimp
    18f0:	020e                	slli	tp,tp,0x3
    18f2:	0000                	unimp
    18f4:	0001                	nop
    18f6:	0e5d                	addi	t3,t3,23
    18f8:	0002                	c.slli64	zero
    18fa:	f600                	fsw	fs0,40(a2)
    18fc:	0002                	c.slli64	zero
    18fe:	0100                	addi	s0,sp,128
    1900:	6200                	flw	fs0,0(a2)
    1902:	02f6                	slli	t0,t0,0x1d
    1904:	0000                	unimp
    1906:	0314                	addi	a3,sp,384
    1908:	0000                	unimp
    190a:	0004                	0x4
    190c:	9f5d01f3          	0x9f5d01f3
    1910:	0314                	addi	a3,sp,384
    1912:	0000                	unimp
    1914:	037a                	slli	t1,t1,0x1e
    1916:	0000                	unimp
    1918:	0001                	nop
    191a:	0062                	c.slli	zero,0x18
    191c:	0000                	unimp
    191e:	0000                	unimp
    1920:	0000                	unimp
    1922:	c200                	sw	s0,0(a2)
    1924:	0001                	nop
    1926:	fe00                	fsw	fs0,56(a2)
    1928:	0001                	nop
    192a:	0100                	addi	s0,sp,128
    192c:	5e00                	lw	s0,56(a2)
    192e:	01fe                	slli	gp,gp,0x1f
    1930:	0000                	unimp
    1932:	02fa                	slli	t0,t0,0x1e
    1934:	0000                	unimp
    1936:	0001                	nop
    1938:	fa64                	fsw	fs1,116(a2)
    193a:	0002                	c.slli64	zero
    193c:	1400                	addi	s0,sp,544
    193e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1942:	f300                	fsw	fs0,32(a4)
    1944:	5e01                	li	t3,-32
    1946:	149f 0003 7a00      	0x7a000003149f
    194c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1950:	6400                	flw	fs0,8(s0)
	...
    195a:	01c2                	slli	gp,gp,0x10
    195c:	0000                	unimp
    195e:	01ec                	addi	a1,sp,204
    1960:	0000                	unimp
    1962:	0001                	nop
    1964:	ec5f 0001 f200      	0xf2000001ec5f
    196a:	0002                	c.slli64	zero
    196c:	0300                	addi	s0,sp,384
    196e:	7800                	flw	fs0,48(s0)
    1970:	7fbc                	flw	fa5,120(a5)
    1972:	02f2                	slli	t0,t0,0x1c
    1974:	0000                	unimp
    1976:	037a                	slli	t1,t1,0x1e
    1978:	0000                	unimp
    197a:	bc910003          	lb	zero,-1079(sp)
    197e:	007f                	0x7f
    1980:	0000                	unimp
    1982:	0000                	unimp
    1984:	0000                	unimp
    1986:	2800                	fld	fs0,16(s0)
    1988:	0002                	c.slli64	zero
    198a:	2c00                	fld	fs0,24(s0)
    198c:	0002                	c.slli64	zero
    198e:	0200                	addi	s0,sp,256
    1990:	7200                	flw	fs0,32(a2)
    1992:	2c00                	fld	fs0,24(s0)
    1994:	0002                	c.slli64	zero
    1996:	3800                	fld	fs0,48(s0)
    1998:	0002                	c.slli64	zero
    199a:	0200                	addi	s0,sp,256
    199c:	8900                	0x8900
    199e:	3800                	fld	fs0,48(s0)
    19a0:	0002                	c.slli64	zero
    19a2:	d800                	sw	s0,48(s0)
    19a4:	0002                	c.slli64	zero
    19a6:	0200                	addi	s0,sp,256
    19a8:	8700                	0x8700
    19aa:	1400                	addi	s0,sp,544
    19ac:	6e000003          	lb	zero,1760(zero) # 6e0 <ext_euclid+0x14>
    19b0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    19b4:	8700                	0x8700
	...
    19be:	3400                	fld	fs0,40(s0)
    19c0:	0002                	c.slli64	zero
    19c2:	3800                	fld	fs0,48(s0)
    19c4:	0002                	c.slli64	zero
    19c6:	0200                	addi	s0,sp,256
    19c8:	3000                	fld	fs0,32(s0)
    19ca:	389f 0002 3e00      	0x3e000002389f
    19d0:	0002                	c.slli64	zero
    19d2:	0100                	addi	s0,sp,128
    19d4:	5d00                	lw	s0,56(a0)
    19d6:	023e                	slli	tp,tp,0xf
    19d8:	0000                	unimp
    19da:	024d                	addi	tp,tp,19
    19dc:	0000                	unimp
    19de:	0001                	nop
    19e0:	4e5e                	lw	t3,212(sp)
    19e2:	0002                	c.slli64	zero
    19e4:	5400                	lw	s0,40(s0)
    19e6:	0002                	c.slli64	zero
    19e8:	0200                	addi	s0,sp,256
    19ea:	3000                	fld	fs0,32(s0)
    19ec:	549f 0002 5f00      	0x5f000002549f
    19f2:	0002                	c.slli64	zero
    19f4:	0100                	addi	s0,sp,128
    19f6:	5e00                	lw	s0,56(a2)
    19f8:	027c                	addi	a5,sp,268
    19fa:	0000                	unimp
    19fc:	029e                	slli	t0,t0,0x7
    19fe:	0000                	unimp
    1a00:	0001                	nop
    1a02:	9e5d                	0x9e5d
    1a04:	0002                	c.slli64	zero
    1a06:	ac00                	fsd	fs0,24(s0)
    1a08:	0002                	c.slli64	zero
    1a0a:	0100                	addi	s0,sp,128
    1a0c:	5e00                	lw	s0,56(a2)
    1a0e:	02ac                	addi	a1,sp,328
    1a10:	0000                	unimp
    1a12:	02ae                	slli	t0,t0,0xb
    1a14:	0000                	unimp
    1a16:	7f7e0003          	lb	zero,2039(t3)
    1a1a:	ae9f 0002 be00      	0xbe000002ae9f
    1a20:	0002                	c.slli64	zero
    1a22:	0100                	addi	s0,sp,128
    1a24:	5e00                	lw	s0,56(a2)
    1a26:	02be                	slli	t0,t0,0xf
    1a28:	0000                	unimp
    1a2a:	02c0                	addi	s0,sp,324
    1a2c:	0000                	unimp
    1a2e:	7f7e0003          	lb	zero,2039(t3)
    1a32:	c09f 0002 c200      	0xc2000002c09f
    1a38:	0002                	c.slli64	zero
    1a3a:	0100                	addi	s0,sp,128
    1a3c:	5e00                	lw	s0,56(a2)
    1a3e:	02ca                	slli	t0,t0,0x12
    1a40:	0000                	unimp
    1a42:	02d0                	addi	a2,sp,324
    1a44:	0000                	unimp
    1a46:	0001                	nop
    1a48:	d859                	beqz	s0,19de <ti_2+0xba>
    1a4a:	0002                	c.slli64	zero
    1a4c:	f400                	fsw	fs0,40(s0)
    1a4e:	0002                	c.slli64	zero
    1a50:	0100                	addi	s0,sp,128
    1a52:	5900                	lw	s0,48(a0)
    1a54:	0360                	addi	s0,sp,396
    1a56:	0000                	unimp
    1a58:	037a                	slli	t1,t1,0x1e
    1a5a:	0000                	unimp
    1a5c:	0001                	nop
    1a5e:	0059                	c.nop	22
    1a60:	0000                	unimp
    1a62:	0000                	unimp
    1a64:	0000                	unimp
    1a66:	7400                	flw	fs0,40(s0)
    1a68:	0002                	c.slli64	zero
    1a6a:	7c00                	flw	fs0,56(s0)
    1a6c:	0002                	c.slli64	zero
    1a6e:	0100                	addi	s0,sp,128
    1a70:	6b00                	flw	fs0,16(a4)
    1a72:	027c                	addi	a5,sp,268
    1a74:	0000                	unimp
    1a76:	0298                	addi	a4,sp,320
    1a78:	0000                	unimp
    1a7a:	0001                	nop
    1a7c:	c45e                	sw	s7,8(sp)
    1a7e:	0002                	c.slli64	zero
    1a80:	0800                	addi	s0,sp,16
    1a82:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a86:	6b00                	flw	fs0,16(a4)
    1a88:	0314                	addi	a3,sp,384
    1a8a:	0000                	unimp
    1a8c:	037a                	slli	t1,t1,0x1e
    1a8e:	0000                	unimp
    1a90:	0001                	nop
    1a92:	0000006b          	0x6b
    1a96:	0000                	unimp
    1a98:	0000                	unimp
    1a9a:	1400                	addi	s0,sp,544
    1a9c:	26000003          	lb	zero,608(zero) # 260 <polymult+0x9e>
    1aa0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1aa4:	5e00                	lw	s0,56(a2)
    1aa6:	0326                	slli	t1,t1,0x9
    1aa8:	0000                	unimp
    1aaa:	032c                	addi	a1,sp,392
    1aac:	0000                	unimp
    1aae:	017e0003          	lb	zero,23(t3)
    1ab2:	2c9f 0003 3800      	0x380000032c9f
    1ab8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1abc:	5e00                	lw	s0,56(a2)
    1abe:	033c                	addi	a5,sp,392
    1ac0:	0000                	unimp
    1ac2:	034e                	slli	t1,t1,0x13
    1ac4:	0000                	unimp
    1ac6:	0001                	nop
    1ac8:	4e5e                	lw	t3,212(sp)
    1aca:	54000003          	lb	zero,1344(zero) # 540 <polydiv+0x60>
    1ace:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1ad2:	7e00                	flw	fs0,56(a2)
    1ad4:	9f01                	0x9f01
    1ad6:	0354                	addi	a3,sp,388
    1ad8:	0000                	unimp
    1ada:	0360                	addi	s0,sp,396
    1adc:	0000                	unimp
    1ade:	0001                	nop
    1ae0:	005e                	c.slli	zero,0x17
    1ae2:	0000                	unimp
    1ae4:	0000                	unimp
    1ae6:	0000                	unimp
    1ae8:	ea00                	fsw	fs0,16(a2)
    1aea:	0002                	c.slli64	zero
    1aec:	1400                	addi	s0,sp,544
    1aee:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1af2:	0300                	addi	s0,sp,384
    1af4:	121c                	addi	a5,sp,288
    1af6:	0000                	unimp
    1af8:	009f 0000 0000      	0x9f
    1afe:	0000                	unimp
    1b00:	2e00                	fld	fs0,24(a2)
    1b02:	0002                	c.slli64	zero
    1b04:	3200                	fld	fs0,32(a2)
    1b06:	0002                	c.slli64	zero
    1b08:	0200                	addi	s0,sp,256
    1b0a:	7200                	flw	fs0,32(a2)
    1b0c:	3200                	fld	fs0,32(a2)
    1b0e:	0002                	c.slli64	zero
    1b10:	0600                	addi	s0,sp,768
    1b12:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1b16:	8a00                	0x8a00
    1b18:	1400                	addi	s0,sp,544
    1b1a:	7a000003          	lb	zero,1952(zero) # 7a0 <ext_euclid+0xd4>
    1b1e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1b22:	8a00                	0x8a00
	...
    1b2c:	3400                	fld	fs0,40(s0)
    1b2e:	0002                	c.slli64	zero
    1b30:	ee00                	fsw	fs0,24(a2)
    1b32:	0002                	c.slli64	zero
    1b34:	0200                	addi	s0,sp,256
    1b36:	7200                	flw	fs0,32(a2)
    1b38:	ee00                	fsw	fs0,24(a2)
    1b3a:	0002                	c.slli64	zero
    1b3c:	f600                	fsw	fs0,40(a2)
    1b3e:	0002                	c.slli64	zero
    1b40:	0c00                	addi	s0,sp,528
    1b42:	8a00                	0x8a00
    1b44:	8200                	0x8200
    1b46:	3200                	fld	fs0,32(a2)
    1b48:	2324                	fld	fs1,64(a4)
    1b4a:	1af0090f          	0x1af0090f
    1b4e:	f61c                	fsw	fa5,40(a2)
    1b50:	0002                	c.slli64	zero
    1b52:	0600                	addi	s0,sp,768
    1b54:	0d000003          	lb	zero,208(zero) # d0 <array_add+0x3e>
    1b58:	8a00                	0x8a00
    1b5a:	f300                	fsw	fs0,32(a4)
    1b5c:	5d01                	li	s10,-32
    1b5e:	2432                	fld	fs0,264(sp)
    1b60:	f0090f23          	sb	zero,-226(s2)
    1b64:	1c1a                	slli	s8,s8,0x26
    1b66:	0314                	addi	a3,sp,384
    1b68:	0000                	unimp
    1b6a:	037a                	slli	t1,t1,0x1e
    1b6c:	0000                	unimp
    1b6e:	0002                	c.slli64	zero
    1b70:	0072                	c.slli	zero,0x1c
	...
    1b7a:	0208                	addi	a0,sp,256
    1b7c:	0000                	unimp
    1b7e:	0274                	addi	a3,sp,268
    1b80:	0000                	unimp
    1b82:	0001                	nop
    1b84:	0002746b          	0x2746b
    1b88:	7c00                	flw	fs0,56(s0)
    1b8a:	0002                	c.slli64	zero
    1b8c:	0300                	addi	s0,sp,384
    1b8e:	8200                	0x8200
    1b90:	9f7f                	0x9f7f
    1b92:	027c                	addi	a5,sp,268
    1b94:	0000                	unimp
    1b96:	02c4                	addi	s1,sp,324
    1b98:	0000                	unimp
    1b9a:	0001                	nop
    1b9c:	0002c46b          	0x2c46b
    1ba0:	f600                	fsw	fs0,40(a2)
    1ba2:	0002                	c.slli64	zero
    1ba4:	0300                	addi	s0,sp,384
    1ba6:	8200                	0x8200
    1ba8:	9f7f                	0x9f7f
    1baa:	02f6                	slli	t0,t0,0x1d
    1bac:	0000                	unimp
    1bae:	0314                	addi	a3,sp,384
    1bb0:	0000                	unimp
    1bb2:	0006                	c.slli	zero,0x1
    1bb4:	315d01f3          	0x315d01f3
    1bb8:	9f1c                	0x9f1c
    1bba:	0314                	addi	a3,sp,384
    1bbc:	0000                	unimp
    1bbe:	037a                	slli	t1,t1,0x1e
    1bc0:	0000                	unimp
    1bc2:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1bc6:	009f 0000 0000      	0x9f
    1bcc:	0000                	unimp
    1bce:	f000                	fsw	fs0,32(s0)
    1bd0:	0001                	nop
    1bd2:	de00                	sw	s0,56(a2)
    1bd4:	0002                	c.slli64	zero
    1bd6:	0100                	addi	s0,sp,128
    1bd8:	6600                	flw	fs0,8(a2)
    1bda:	02de                	slli	t0,t0,0x17
    1bdc:	0000                	unimp
    1bde:	02e9                	addi	t0,t0,26
    1be0:	0000                	unimp
    1be2:	0001                	nop
    1be4:	e95c                	fsw	fa5,20(a0)
    1be6:	0002                	c.slli64	zero
    1be8:	fe00                	fsw	fs0,56(a2)
    1bea:	0002                	c.slli64	zero
    1bec:	0100                	addi	s0,sp,128
    1bee:	6600                	flw	fs0,8(a2)
    1bf0:	02fe                	slli	t0,t0,0x1f
    1bf2:	0000                	unimp
    1bf4:	0302                	c.slli64	t1
    1bf6:	0000                	unimp
    1bf8:	00880007          	0x880007
    1bfc:	225d01f3          	0x225d01f3
    1c00:	029f 0003 1400      	0x14000003029f
    1c06:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    1c0a:	f300                	fsw	fs0,32(a4)
    1c0c:	5b01                	li	s6,-32
    1c0e:	225d01f3          	0x225d01f3
    1c12:	1c31                	addi	s8,s8,-20
    1c14:	149f 0003 6e00      	0x6e000003149f
    1c1a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c1e:	6600                	flw	fs0,8(a2)
    1c20:	036e                	slli	t1,t1,0x1b
    1c22:	0000                	unimp
    1c24:	00000373          	0x373
    1c28:	0001                	nop
    1c2a:	735c                	flw	fa5,36(a4)
    1c2c:	7a000003          	lb	zero,1952(zero) # 7a0 <ext_euclid+0xd4>
    1c30:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c34:	6600                	flw	fs0,8(a2)
	...
    1c3e:	0228                	addi	a0,sp,264
    1c40:	0000                	unimp
    1c42:	0302                	c.slli64	t1
    1c44:	0000                	unimp
    1c46:	0001                	nop
    1c48:	0268                	addi	a0,sp,268
    1c4a:	14000003          	lb	zero,320(zero) # 140 <array_mod+0xa>
    1c4e:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1c52:	f300                	fsw	fs0,32(a4)
    1c54:	5b01                	li	s6,-32
    1c56:	1c31                	addi	s8,s8,-20
    1c58:	149f 0003 7a00      	0x7a000003149f
    1c5e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c62:	6800                	flw	fs0,16(s0)
	...
    1c6c:	022e                	slli	tp,tp,0xb
    1c6e:	0000                	unimp
    1c70:	0274                	addi	a3,sp,268
    1c72:	0000                	unimp
    1c74:	0001                	nop
    1c76:	0002746b          	0x2746b
    1c7a:	7c00                	flw	fs0,56(s0)
    1c7c:	0002                	c.slli64	zero
    1c7e:	0300                	addi	s0,sp,384
    1c80:	8200                	0x8200
    1c82:	9f7f                	0x9f7f
    1c84:	027c                	addi	a5,sp,268
    1c86:	0000                	unimp
    1c88:	02c4                	addi	s1,sp,324
    1c8a:	0000                	unimp
    1c8c:	0001                	nop
    1c8e:	0002c46b          	0x2c46b
    1c92:	f600                	fsw	fs0,40(a2)
    1c94:	0002                	c.slli64	zero
    1c96:	0300                	addi	s0,sp,384
    1c98:	8200                	0x8200
    1c9a:	9f7f                	0x9f7f
    1c9c:	02f6                	slli	t0,t0,0x1d
    1c9e:	0000                	unimp
    1ca0:	0314                	addi	a3,sp,384
    1ca2:	0000                	unimp
    1ca4:	0006                	c.slli	zero,0x1
    1ca6:	315d01f3          	0x315d01f3
    1caa:	9f1c                	0x9f1c
    1cac:	0314                	addi	a3,sp,384
    1cae:	0000                	unimp
    1cb0:	037a                	slli	t1,t1,0x1e
    1cb2:	0000                	unimp
    1cb4:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x12c>
    1cb8:	009f 0000 0000      	0x9f
    1cbe:	0000                	unimp
    1cc0:	9200                	0x9200
    1cc2:	0000                	unimp
    1cc4:	ee00                	fsw	fs0,24(a2)
    1cc6:	0000                	unimp
    1cc8:	0100                	addi	s0,sp,128
    1cca:	5a00                	lw	s0,48(a2)
    1ccc:	00ee                	slli	ra,ra,0x1b
    1cce:	0000                	unimp
    1cd0:	00fa                	slli	ra,ra,0x1e
    1cd2:	0000                	unimp
    1cd4:	0004                	0x4
    1cd6:	9f5a01f3          	0x9f5a01f3
    1cda:	00fa                	slli	ra,ra,0x1e
    1cdc:	0000                	unimp
    1cde:	0130                	addi	a2,sp,136
    1ce0:	0000                	unimp
    1ce2:	0001                	nop
    1ce4:	005a                	c.slli	zero,0x16
    1ce6:	0000                	unimp
    1ce8:	0000                	unimp
    1cea:	0000                	unimp
    1cec:	9200                	0x9200
    1cee:	0000                	unimp
    1cf0:	aa00                	fsd	fs0,16(a2)
    1cf2:	0000                	unimp
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	5c00                	lw	s0,56(s0)
    1cf8:	00aa                	slli	ra,ra,0xa
    1cfa:	0000                	unimp
    1cfc:	00b2                	slli	ra,ra,0xc
    1cfe:	0000                	unimp
    1d00:	0004                	0x4
    1d02:	9f5c01f3          	0x9f5c01f3
    1d06:	00b2                	slli	ra,ra,0xc
    1d08:	0000                	unimp
    1d0a:	00c4                	addi	s1,sp,68
    1d0c:	0000                	unimp
    1d0e:	0001                	nop
    1d10:	c45c                	sw	a5,12(s0)
    1d12:	0000                	unimp
    1d14:	d800                	sw	s0,48(s0)
    1d16:	0000                	unimp
    1d18:	0400                	addi	s0,sp,512
    1d1a:	f300                	fsw	fs0,32(a4)
    1d1c:	5c01                	li	s8,-32
    1d1e:	d89f 0000 ea00      	0xea000000d89f
    1d24:	0000                	unimp
    1d26:	0100                	addi	s0,sp,128
    1d28:	5c00                	lw	s0,56(s0)
    1d2a:	00ea                	slli	ra,ra,0x1a
    1d2c:	0000                	unimp
    1d2e:	010c                	addi	a1,sp,128
    1d30:	0000                	unimp
    1d32:	0004                	0x4
    1d34:	9f5c01f3          	0x9f5c01f3
    1d38:	010c                	addi	a1,sp,128
    1d3a:	0000                	unimp
    1d3c:	0130                	addi	a2,sp,136
    1d3e:	0000                	unimp
    1d40:	0001                	nop
    1d42:	005c                	addi	a5,sp,4
    1d44:	0000                	unimp
    1d46:	0000                	unimp
    1d48:	0000                	unimp
    1d4a:	9200                	0x9200
    1d4c:	0000                	unimp
    1d4e:	ac00                	fsd	fs0,24(s0)
    1d50:	0000                	unimp
    1d52:	0200                	addi	s0,sp,256
    1d54:	3000                	fld	fs0,32(s0)
    1d56:	ac9f 0000 b200      	0xb2000000ac9f
    1d5c:	0000                	unimp
    1d5e:	0100                	addi	s0,sp,128
    1d60:	5f00                	lw	s0,56(a4)
    1d62:	00b2                	slli	ra,ra,0xc
    1d64:	0000                	unimp
    1d66:	00be                	slli	ra,ra,0xf
    1d68:	0000                	unimp
    1d6a:	0002                	c.slli64	zero
    1d6c:	9f30                	0x9f30
    1d6e:	00be                	slli	ra,ra,0xf
    1d70:	0000                	unimp
    1d72:	00d0                	addi	a2,sp,68
    1d74:	0000                	unimp
    1d76:	0001                	nop
    1d78:	d85f 0000 e400      	0xe4000000d85f
    1d7e:	0000                	unimp
    1d80:	0200                	addi	s0,sp,256
    1d82:	3000                	fld	fs0,32(s0)
    1d84:	e49f 0000 ea00      	0xea000000e49f
    1d8a:	0000                	unimp
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	5f00                	lw	s0,56(a4)
    1d90:	00fa                	slli	ra,ra,0x1e
    1d92:	0000                	unimp
    1d94:	0130                	addi	a2,sp,136
    1d96:	0000                	unimp
    1d98:	0001                	nop
    1d9a:	005f 0000 0000      	0x5f
    1da0:	0000                	unimp
    1da2:	fe00                	fsw	fs0,56(a2)
    1da4:	0000                	unimp
    1da6:	0400                	addi	s0,sp,512
    1da8:	0001                	nop
    1daa:	0600                	addi	s0,sp,768
    1dac:	7b00                	flw	fs0,48(a4)
    1dae:	7e00                	flw	fs0,56(a2)
    1db0:	2200                	fld	fs0,0(a2)
    1db2:	049f 0001 0800      	0x8000001049f
    1db8:	0001                	nop
    1dba:	0100                	addi	s0,sp,128
    1dbc:	5e00                	lw	s0,56(a2)
	...
    1dc6:	00fe                	slli	ra,ra,0x1f
    1dc8:	0000                	unimp
    1dca:	0102                	c.slli64	sp
    1dcc:	0000                	unimp
    1dce:	0006                	c.slli	zero,0x1
    1dd0:	007a                	c.slli	zero,0x1e
    1dd2:	007e                	c.slli	zero,0x1f
    1dd4:	9f22                	add	t5,t5,s0
    1dd6:	0102                	c.slli64	sp
    1dd8:	0000                	unimp
    1dda:	0108                	addi	a0,sp,128
    1ddc:	0000                	unimp
    1dde:	0001                	nop
    1de0:	005d                	c.nop	23
    1de2:	0000                	unimp
    1de4:	0000                	unimp
    1de6:	0000                	unimp
    1de8:	1000                	addi	s0,sp,32
    1dea:	0001                	nop
    1dec:	1600                	addi	s0,sp,800
    1dee:	0001                	nop
    1df0:	0600                	addi	s0,sp,768
    1df2:	7b00                	flw	fs0,48(a4)
    1df4:	7e00                	flw	fs0,56(a2)
    1df6:	2200                	fld	fs0,0(a2)
    1df8:	169f 0001 1a00      	0x1a000001169f
    1dfe:	0001                	nop
    1e00:	0100                	addi	s0,sp,128
    1e02:	5e00                	lw	s0,56(a2)
	...
    1e0c:	0110                	addi	a2,sp,128
    1e0e:	0000                	unimp
    1e10:	0114                	addi	a3,sp,128
    1e12:	0000                	unimp
    1e14:	0006                	c.slli	zero,0x1
    1e16:	007a                	c.slli	zero,0x1e
    1e18:	007e                	c.slli	zero,0x1f
    1e1a:	9f22                	add	t5,t5,s0
    1e1c:	0114                	addi	a3,sp,128
    1e1e:	0000                	unimp
    1e20:	011a                	slli	sp,sp,0x6
    1e22:	0000                	unimp
    1e24:	0001                	nop
    1e26:	0060                	addi	s0,sp,12
    1e28:	0000                	unimp
    1e2a:	0000                	unimp
    1e2c:	0000                	unimp
    1e2e:	2200                	fld	fs0,0(a2)
    1e30:	0001                	nop
    1e32:	2800                	fld	fs0,16(s0)
    1e34:	0001                	nop
    1e36:	0600                	addi	s0,sp,768
    1e38:	7b00                	flw	fs0,48(a4)
    1e3a:	7e00                	flw	fs0,56(a2)
    1e3c:	2200                	fld	fs0,0(a2)
    1e3e:	289f 0001 2c00      	0x2c000001289f
    1e44:	0001                	nop
    1e46:	0100                	addi	s0,sp,128
    1e48:	5e00                	lw	s0,56(a2)
	...
    1e52:	0122                	slli	sp,sp,0x8
    1e54:	0000                	unimp
    1e56:	0126                	slli	sp,sp,0x9
    1e58:	0000                	unimp
    1e5a:	0006                	c.slli	zero,0x1
    1e5c:	007a                	c.slli	zero,0x1e
    1e5e:	007e                	c.slli	zero,0x1f
    1e60:	9f22                	add	t5,t5,s0
    1e62:	0126                	slli	sp,sp,0x9
    1e64:	0000                	unimp
    1e66:	012c                	addi	a1,sp,136
    1e68:	0000                	unimp
    1e6a:	0001                	nop
    1e6c:	0060                	addi	s0,sp,12
    1e6e:	0000                	unimp
    1e70:	0000                	unimp
    1e72:	0000                	unimp
    1e74:	8c00                	0x8c00
    1e76:	0000                	unimp
    1e78:	9000                	0x9000
    1e7a:	0000                	unimp
    1e7c:	0100                	addi	s0,sp,128
    1e7e:	5a00                	lw	s0,48(a2)
	...
    1e88:	0130                	addi	a2,sp,136
    1e8a:	0000                	unimp
    1e8c:	0134                	addi	a3,sp,136
    1e8e:	0000                	unimp
    1e90:	0001                	nop
    1e92:	005a                	c.slli	zero,0x16
    1e94:	0000                	unimp
    1e96:	0000                	unimp
    1e98:	0000                	unimp
    1e9a:	3600                	fld	fs0,40(a2)
    1e9c:	0001                	nop
    1e9e:	9400                	0x9400
    1ea0:	0001                	nop
    1ea2:	0100                	addi	s0,sp,128
    1ea4:	5b00                	lw	s0,48(a4)
    1ea6:	0194                	addi	a3,sp,192
    1ea8:	0000                	unimp
    1eaa:	0198                	addi	a4,sp,192
    1eac:	0000                	unimp
    1eae:	0004                	0x4
    1eb0:	9f5b01f3          	0x9f5b01f3
    1eb4:	0198                	addi	a4,sp,192
    1eb6:	0000                	unimp
    1eb8:	01c2                	slli	gp,gp,0x10
    1eba:	0000                	unimp
    1ebc:	0001                	nop
    1ebe:	0000005b          	0x5b
    1ec2:	0000                	unimp
    1ec4:	0000                	unimp
    1ec6:	3600                	fld	fs0,40(a2)
    1ec8:	0001                	nop
    1eca:	4e00                	lw	s0,24(a2)
    1ecc:	0001                	nop
    1ece:	0100                	addi	s0,sp,128
    1ed0:	5c00                	lw	s0,56(s0)
    1ed2:	014e                	slli	sp,sp,0x13
    1ed4:	0000                	unimp
    1ed6:	0156                	slli	sp,sp,0x15
    1ed8:	0000                	unimp
    1eda:	0004                	0x4
    1edc:	9f5c01f3          	0x9f5c01f3
    1ee0:	0156                	slli	sp,sp,0x15
    1ee2:	0000                	unimp
    1ee4:	0168                	addi	a0,sp,140
    1ee6:	0000                	unimp
    1ee8:	0001                	nop
    1eea:	685c                	flw	fa5,20(s0)
    1eec:	0001                	nop
    1eee:	7800                	flw	fs0,48(s0)
    1ef0:	0001                	nop
    1ef2:	0400                	addi	s0,sp,512
    1ef4:	f300                	fsw	fs0,32(a4)
    1ef6:	5c01                	li	s8,-32
    1ef8:	789f 0001 8a00      	0x8a000001789f
    1efe:	0001                	nop
    1f00:	0100                	addi	s0,sp,128
    1f02:	5c00                	lw	s0,56(s0)
    1f04:	018a                	slli	gp,gp,0x2
    1f06:	0000                	unimp
    1f08:	01a6                	slli	gp,gp,0x9
    1f0a:	0000                	unimp
    1f0c:	0004                	0x4
    1f0e:	9f5c01f3          	0x9f5c01f3
    1f12:	01a6                	slli	gp,gp,0x9
    1f14:	0000                	unimp
    1f16:	01c2                	slli	gp,gp,0x10
    1f18:	0000                	unimp
    1f1a:	0001                	nop
    1f1c:	005c                	addi	a5,sp,4
    1f1e:	0000                	unimp
    1f20:	0000                	unimp
    1f22:	0000                	unimp
    1f24:	3600                	fld	fs0,40(a2)
    1f26:	0001                	nop
    1f28:	5000                	lw	s0,32(s0)
    1f2a:	0001                	nop
    1f2c:	0200                	addi	s0,sp,256
    1f2e:	3000                	fld	fs0,32(s0)
    1f30:	509f 0001 5600      	0x56000001509f
    1f36:	0001                	nop
    1f38:	0100                	addi	s0,sp,128
    1f3a:	5f00                	lw	s0,56(a4)
    1f3c:	0156                	slli	sp,sp,0x15
    1f3e:	0000                	unimp
    1f40:	0184                	addi	s1,sp,192
    1f42:	0000                	unimp
    1f44:	0002                	c.slli64	zero
    1f46:	9f30                	0x9f30
    1f48:	0184                	addi	s1,sp,192
    1f4a:	0000                	unimp
    1f4c:	018a                	slli	gp,gp,0x2
    1f4e:	0000                	unimp
    1f50:	0001                	nop
    1f52:	985f 0001 b400      	0xb4000001985f
    1f58:	0001                	nop
    1f5a:	0100                	addi	s0,sp,128
    1f5c:	5f00                	lw	s0,56(a4)
    1f5e:	01b4                	addi	a3,sp,200
    1f60:	0000                	unimp
    1f62:	01c2                	slli	gp,gp,0x10
    1f64:	0000                	unimp
    1f66:	0002                	c.slli64	zero
    1f68:	9f30                	0x9f30
	...
    1f72:	0198                	addi	a4,sp,192
    1f74:	0000                	unimp
    1f76:	01a2                	slli	gp,gp,0x8
    1f78:	0000                	unimp
    1f7a:	0001                	nop
    1f7c:	0000005b          	0x5b
    1f80:	0000                	unimp
    1f82:	0000                	unimp
    1f84:	9800                	0x9800
    1f86:	0001                	nop
    1f88:	a200                	fsd	fs0,0(a2)
    1f8a:	0001                	nop
    1f8c:	0800                	addi	s0,sp,16
    1f8e:	7f00                	flw	fs0,56(a4)
    1f90:	3c00                	fld	fs0,56(s0)
    1f92:	7a1e                	flw	fs4,228(sp)
    1f94:	2200                	fld	fs0,0(a2)
    1f96:	009f 0000 0000      	0x9f
    1f9c:	0000                	unimp
    1f9e:	6200                	flw	fs0,0(a2)
    1fa0:	0001                	nop
    1fa2:	7000                	flw	fs0,32(s0)
    1fa4:	0001                	nop
    1fa6:	0100                	addi	s0,sp,128
    1fa8:	5f00                	lw	s0,56(a4)
    1faa:	01b4                	addi	a3,sp,200
    1fac:	0000                	unimp
    1fae:	01c2                	slli	gp,gp,0x10
    1fb0:	0000                	unimp
    1fb2:	0001                	nop
    1fb4:	005f 0000 0000      	0x5f
    1fba:	0000                	unimp
    1fbc:	b400                	fsd	fs0,40(s0)
    1fbe:	0001                	nop
    1fc0:	be00                	fsd	fs0,56(a2)
    1fc2:	0001                	nop
    1fc4:	0100                	addi	s0,sp,128
    1fc6:	5b00                	lw	s0,48(a4)
	...
    1fd0:	01b4                	addi	a3,sp,200
    1fd2:	0000                	unimp
    1fd4:	01be                	slli	gp,gp,0xf
    1fd6:	0000                	unimp
    1fd8:	0008                	0x8
    1fda:	007f                	0x7f
    1fdc:	1e3c                	addi	a5,sp,824
    1fde:	007a                	c.slli	zero,0x1e
    1fe0:	9f22                	add	t5,t5,s0
	...
    1fea:	01a6                	slli	gp,gp,0x9
    1fec:	0000                	unimp
    1fee:	01b0                	addi	a2,sp,200
    1ff0:	0000                	unimp
    1ff2:	0001                	nop
    1ff4:	0000005b          	0x5b
    1ff8:	0000                	unimp
    1ffa:	0000                	unimp
    1ffc:	a600                	fsd	fs0,8(a2)
    1ffe:	0001                	nop
    2000:	b000                	fsd	fs0,32(s0)
    2002:	0001                	nop
    2004:	0800                	addi	s0,sp,16
    2006:	7f00                	flw	fs0,56(a4)
    2008:	3c00                	fld	fs0,56(s0)
    200a:	7a1e                	flw	fs4,228(sp)
    200c:	2200                	fld	fs0,0(a2)
    200e:	009f 0000 0000      	0x9f
    2014:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0cc8                	addi	a0,sp,596
  16:	0000                	unimp
  18:	0f50                	addi	a2,sp,916
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1c35                	addi	s8,s8,-19
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d54                	addi	a3,sp,660
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	014e                	slli	sp,sp,0x13
   2:	0000                	unimp
   4:	0150                	addi	a2,sp,132
   6:	0000                	unimp
   8:	0198                	addi	a4,sp,192
   a:	0000                	unimp
   c:	01a2                	slli	gp,gp,0x8
	...
  16:	0000                	unimp
  18:	0156                	slli	sp,sp,0x15
  1a:	0000                	unimp
  1c:	0178                	addi	a4,sp,140
  1e:	0000                	unimp
  20:	018a                	slli	gp,gp,0x2
  22:	0000                	unimp
  24:	0196                	slli	gp,gp,0x5
  26:	0000                	unimp
  28:	01b4                	addi	a3,sp,200
  2a:	0000                	unimp
  2c:	01c2                	slli	gp,gp,0x10
	...
  36:	0000                	unimp
  38:	0160                	addi	s0,sp,140
  3a:	0000                	unimp
  3c:	0162                	slli	sp,sp,0x18
  3e:	0000                	unimp
  40:	01b4                	addi	a3,sp,200
  42:	0000                	unimp
  44:	01be                	slli	gp,gp,0xf
	...
  4e:	0000                	unimp
  50:	0182                	c.slli64	gp
  52:	0000                	unimp
  54:	0184                	addi	s1,sp,192
  56:	0000                	unimp
  58:	01a6                	slli	gp,gp,0x9
  5a:	0000                	unimp
  5c:	01b0                	addi	a2,sp,200
	...
  66:	0000                	unimp
  68:	008c                	addi	a1,sp,64
  6a:	0000                	unimp
  6c:	0d54                	addi	a3,sp,660
  6e:	0000                	unimp
  70:	0f50                	addi	a2,sp,916
  72:	0000                	unimp
  74:	1088                	addi	a0,sp,96
	...
  jal x0, default_exc_handler
  7e:	0000                	unimp
  jal x0, reset_handler
  80:	ffff                	0xffff
  82:	ffff                	0xffff
  jal x0, default_exc_handler
  84:	0000                	unimp
  86:	0000                	unimp
  jal x0, default_exc_handler
  88:	0d54                	addi	a3,sp,660
  8a:	0000                	unimp
    asm volatile(
  8c:	0dca                	slli	s11,s11,0x12
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
  .endr
       0:	257a                	fld	fa0,408(sp)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x5e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult+0x19e>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x1c2>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xb8>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x10>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x28>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a1[length-1] + a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0xa4>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
            a1[length-1] = a1[length-1] + a2[length-1];
      e8:	682e                	flw	fa6,200(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
} //end of function
      f8:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
    asm volatile(
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
            for (i = 0; i < (length / 3); i++) {
     10a:	0305                	addi	t1,t1,1
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     10c:	00000907          	0x907
    asm volatile(
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-1) / 3); i++) {
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
     11e:	0100                	addi	s0,sp,128
     120:	2e05                	jal	450 <polymult2+0xd6>
    asm volatile(
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-2) / 3); i++) {
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    asm volatile(
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
}
     134:	0901                	addi	s2,s2,0
    switch(length%3) {
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
            for (i = 0; i < (length / 3); i++) {
     14a:	2505                	jal	76a <ext_euclid+0x9e>
     14c:	0e090303          	lb	t1,224(s2)
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-2) / 3); i++) {
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
     15e:	0501                	addi	a0,a0,0
    asm volatile(
     160:	000d                	c.nop	3
            for (i = 0; i < ((length-2) / 3); i++) {
     162:	0402                	c.slli64	s0
     164:	0601                	addi	a2,a2,0
            a1[length-1] = a1[length-1] % mod;
     166:	00090003          	lb	zero,0(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	2505                	jal	78c <ext_euclid+0xc0>
     16e:	06090b03          	lb	s6,96(s2)
     172:	0100                	addi	s0,sp,128
     174:	2905                	jal	5a4 <polydiv+0xc4>
     176:	04090003          	lb	zero,64(s2)
            for (i = 0; i < ((length-1) / 3); i++) {
     17a:	0100                	addi	s0,sp,128
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
    asm volatile(
     182:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-1) / 3); i++) {
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
            a1[length-1] = a1[length-1] % mod;
     188:	0104                	addi	s1,sp,128
            a1[length-2] = a1[length-2] % mod;
     18a:	0306                	slli	t1,t1,0x1
     18c:	0900                	addi	s0,sp,144
     18e:	0004                	0x4
     190:	0501                	addi	a0,a0,0
     192:	000d                	c.nop	3
     194:	0402                	c.slli64	s0
} //end of function
     196:	0601                	addi	a2,a2,0
    asm volatile(
     198:	00090003          	lb	zero,0(s2)
     19c:	0100                	addi	s0,sp,128
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0) # fffe0000 <_stack_start+0xfffd0000>
            for (i = 0; i < (length / 3); i++) {
     1a4:	0501                	addi	a0,a0,0
    asm volatile(
     1a6:	061e                	slli	a2,a2,0x7
     1a8:	00090003          	lb	zero,0(s2)
     1ac:	0100                	addi	s0,sp,128
     1ae:	2d05                	jal	7de <ext_euclid+0x112>
            for (i = 0; i < ((length-1) / 3); i++) {
     1b0:	08090003          	lb	zero,128(s2)
    asm volatile(
     1b4:	0100                	addi	s0,sp,128
     1b6:	2905                	jal	5e6 <polydiv+0x106>
     1b8:	04090003          	lb	zero,64(s2)
     1bc:	0100                	addi	s0,sp,128
            for (i = 0; i < ((length-2) / 3); i++) {
     1be:	1a05                	addi	s4,s4,-31
     1c0:	06090003          	lb	zero,96(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1c4:	0100                	addi	s0,sp,128
     1c6:	2505                	jal	7e6 <ext_euclid+0x11a>
     1c8:	04097703          	0x4097703
     1cc:	0100                	addi	s0,sp,128
     1ce:	2905                	jal	5fe <polydiv+0x11e>
     1d0:	04090003          	lb	zero,64(s2)
     1d4:	0100                	addi	s0,sp,128
     1d6:	1405                	addi	s0,s0,-31
     1d8:	04090003          	lb	zero,64(s2)
     1dc:	0100                	addi	s0,sp,128
     1de:	1905                	addi	s2,s2,-31
     1e0:	0200                	addi	s0,sp,256
     1e2:	0104                	addi	s1,sp,128
     1e4:	0306                	slli	t1,t1,0x1
     1e6:	0900                	addi	s0,sp,144
    int line[size_b][size_a + size_b];
     1e8:	0004                	0x4
     1ea:	0501                	addi	a0,a0,0
     1ec:	000d                	c.nop	3
     1ee:	0402                	c.slli64	s0
     1f0:	0601                	addi	a2,a2,0
     1f2:	00090003          	lb	zero,0(s2)
     1f6:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     1f8:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     1fa:	00040903          	lb	s2,0(s0)
     1fe:	0501                	addi	a0,a0,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     200:	061e                	slli	a2,a2,0x7
     202:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     206:	0100                	addi	s0,sp,128
    int pola[size_a];
     208:	0d05                	addi	s10,s10,1
     20a:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     20c:	00020907          	0x20907
            product[j] = 0;
     210:	0501                	addi	a0,a0,0
     212:	061e                	slli	a2,a2,0x7
     214:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     218:	0100                	addi	s0,sp,128
     21a:	2d05                	jal	84a <ext_euclid+0x17e>
     21c:	04090003          	lb	zero,64(s2)
    int pola[size_a];
     220:	0100                	addi	s0,sp,128
     222:	2905                	jal	652 <polydiv+0x172>
     224:	02090003          	lb	zero,32(s2)
     228:	0100                	addi	s0,sp,128
     22a:	1a05                	addi	s4,s4,-31
     22c:	06090003          	lb	zero,96(s2)
    int polb[size_b];
     230:	0100                	addi	s0,sp,128
     232:	0605                	addi	a2,a2,1
    for (i = 0; i < size_b; ++i){
     234:	0306                	slli	t1,t1,0x1
     236:	0901                	addi	s2,s2,0
     238:	0002                	c.slli64	zero
     23a:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     23c:	0601                	addi	a2,a2,0
     23e:	00090203          	lb	tp,0(s2)
    array_mod(pola,mod,size_a);
     242:	0100                	addi	s0,sp,128
     244:	1105                	addi	sp,sp,-31
     246:	0200                	addi	s0,sp,256
     248:	0304                	addi	s1,sp,384
     24a:	0306                	slli	t1,t1,0x1
     24c:	0002096f          	jal	s2,2024c <_stack_start+0x1024c>
    for (i = 0; i < size_b; ++i){
     250:	0501                	addi	a0,a0,0
     252:	0005                	c.nop	1
     254:	0402                	c.slli64	s0
     256:	096d0303          	lb	t1,150(s10)
    array_mod(polb,mod,size_b);
     25a:	0004                	0x4
     25c:	0001                	nop
     25e:	0402                	c.slli64	s0
    if(star_mult == 1){
     260:	09090303          	lb	t1,144(s2)
     264:	000a                	c.slli	zero,0x2
     266:	0501                	addi	a0,a0,0
     268:	0402002b          	0x402002b
     26c:	09090303          	lb	t1,144(s2)
     270:	0000                	unimp
     272:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     274:	002c                	addi	a1,sp,8
     276:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     278:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
            product[j] = 0;
     27c:	0009                	c.nop	2
     27e:	0100                	addi	s0,sp,128
     280:	1105                	addi	sp,sp,-31
            line[i][j] = 0;
     282:	0200                	addi	s0,sp,256
     284:	0304                	addi	s1,sp,384
            product[j] = 0;
     286:	0306                	slli	t1,t1,0x1
     288:	0906                	slli	s2,s2,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     28a:	0004                	0x4
     28c:	0501                	addi	a0,a0,0
     28e:	0005                	c.nop	1
     290:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     292:	09680303          	lb	t1,150(a6)
     296:	0004                	0x4
     298:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     29a:	0402                	c.slli64	s0
     29c:	09090303          	lb	t1,144(s2)
        pola[i] = a[i];
     2a0:	000a                	c.slli	zero,0x2
     2a2:	0501                	addi	a0,a0,0
     2a4:	0402002f          	0x402002f
     2a8:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
     2ac:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     2ae:	0501                	addi	a0,a0,0
        polb[i] = b[i];
     2b0:	0030                	addi	a2,sp,8
     2b2:	0402                	c.slli64	s0
     2b4:	00030603          	lb	a2,0(t1)
     2b8:	0009                	c.nop	2
     2ba:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2bc:	1105                	addi	sp,sp,-31
        polb[i] = b[i];
     2be:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     2c0:	0304                	addi	s1,sp,384
    if(star_mult == 1){
     2c2:	0306                	slli	t1,t1,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     2c4:	00040907          	0x40907
            for (k = size_a-1; k >= 0; k = k-1 ){
     2c8:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     2ca:	0005                	c.nop	1
     2cc:	0402                	c.slli64	s0
        for(i = 0; i < size_b; ++i){
     2ce:	09620303          	lb	t1,150(tp) # 1a096 <_stack_start+0xa096>
            array_add(product,line[i],size_a+size_b-1);
     2d2:	0004                	0x4
     2d4:	0001                	nop
     2d6:	0402                	c.slli64	s0
     2d8:	09090303          	lb	t1,144(s2)
        for(i = 0; i < size_b; ++i){
     2dc:	000a                	c.slli	zero,0x2
    array_mod(product,mod,(size_a+size_b-1));
     2de:	0501                	addi	a0,a0,0
     2e0:	0402002f          	0x402002f
     2e4:	09140303          	lb	t1,145(s0)
     2e8:	0000                	unimp
}
     2ea:	0501                	addi	a0,a0,0
     2ec:	0030                	addi	a2,sp,8
     2ee:	0402                	c.slli64	s0
     2f0:	00030603          	lb	a2,0(t1)
     2f4:	0009                	c.nop	2
     2f6:	0100                	addi	s0,sp,128
     2f8:	3405                	jal	fffffd18 <_stack_start+0xfffefd18>
     2fa:	0306                	slli	t1,t1,0x1
     2fc:	0004090b          	0x4090b
     300:	0501                	addi	a0,a0,0
     302:	0305                	addi	t1,t1,1
     304:	0902                	c.slli64	s2
     306:	0000                	unimp
     308:	0301                	addi	t1,t1,0
     30a:	0909                	addi	s2,s2,2
     30c:	0004                	0x4
     30e:	0501                	addi	a0,a0,0
     310:	0601                	addi	a2,a2,0
     312:	00090103          	lb	sp,0(s2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     316:	0100                	addi	s0,sp,128
     318:	2c05                	jal	548 <polydiv+0x68>
     31a:	0306                	slli	t1,t1,0x1
     31c:	0901                	addi	s2,s2,0
     31e:	0002                	c.slli64	zero
     320:	0501                	addi	a0,a0,0
     322:	0301                	addi	t1,t1,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     324:	0905                	addi	s2,s2,1
                line[size_b-1-j][k] = pola[k]*polb[j];
     326:	0000                	unimp
     328:	0501                	addi	a0,a0,0
     32a:	0305                	addi	t1,t1,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     32c:	0902                	c.slli64	s2
     32e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     330:	0501                	addi	a0,a0,0
     332:	0612                	slli	a2,a2,0x4
     334:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     338:	0100                	addi	s0,sp,128
     33a:	0505                	addi	a0,a0,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     33c:	06090003          	lb	zero,96(s2)
     340:	0100                	addi	s0,sp,128
     342:	2505                	jal	962 <generate_keys+0x4c>
     344:	0e090303          	lb	t1,224(s2)
     348:	0100                	addi	s0,sp,128
     34a:	0505                	addi	a0,a0,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     34c:	04096b03          	0x4096b03
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     350:	0100                	addi	s0,sp,128
     352:	1905                	addi	s2,s2,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     354:	0200                	addi	s0,sp,256
     356:	0104                	addi	s1,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     358:	0306                	slli	t1,t1,0x1
     35a:	0915                	addi	s2,s2,5
     35c:	0002                	c.slli64	zero
     35e:	0501                	addi	a0,a0,0
        array_mod(line[i],mod,(size_a+size_b-1));
     360:	000d                	c.nop	3
     362:	0402                	c.slli64	s0
     364:	0601                	addi	a2,a2,0
     366:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     36a:	0100                	addi	s0,sp,128
     36c:	2505                	jal	98c <generate_keys+0x76>
            array_add(product,line[i],size_a+size_b-1);
     36e:	06090b03          	lb	s6,96(s2)
     372:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     374:	2905                	jal	7a4 <ext_euclid+0xd8>
     376:	04090003          	lb	zero,64(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     37a:	0100                	addi	s0,sp,128
     37c:	1405                	addi	s0,s0,-31
     37e:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     382:	0100                	addi	s0,sp,128
     384:	0505                	addi	a0,a0,1
     386:	02096003          	0x2096003
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38a:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     38c:	1905                	addi	s2,s2,-31
     38e:	0306                	slli	t1,t1,0x1
     390:	0920                	addi	s0,sp,152
     392:	0002                	c.slli64	zero
     394:	0501                	addi	a0,a0,0
     396:	060d                	addi	a2,a2,3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     398:	00090003          	lb	zero,0(s2)
     39c:	0100                	addi	s0,sp,128
     39e:	0306                	slli	t1,t1,0x1
     3a0:	00040903          	lb	s2,0(s0)
     3a4:	0501                	addi	a0,a0,0
    int pola[size_a];
     3a6:	061e                	slli	a2,a2,0x7
     3a8:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     3ac:	0100                	addi	s0,sp,128
     3ae:	2905                	jal	7de <ext_euclid+0x112>
     3b0:	08090003          	lb	zero,128(s2)
    int pola[size_a];
     3b4:	0100                	addi	s0,sp,128
     3b6:	1a05                	addi	s4,s4,-31
     3b8:	06090003          	lb	zero,96(s2)
     3bc:	0100                	addi	s0,sp,128
     3be:	2505                	jal	9de <generate_keys+0xc8>
    int polb[size_b];
     3c0:	04097703          	0x4097703
     3c4:	0100                	addi	s0,sp,128
    int pola[size_a];
     3c6:	2905                	jal	7f6 <ext_euclid+0x12a>
    int polb[size_b];
     3c8:	04090003          	lb	zero,64(s2)
    int line[size_b][size_a + size_b];
     3cc:	0100                	addi	s0,sp,128
    int polb[size_b];
     3ce:	1405                	addi	s0,s0,-31
    for (i = 0; i < size_b; ++i){
     3d0:	04090003          	lb	zero,64(s2)
     3d4:	0100                	addi	s0,sp,128
            product2[j] = 0;
     3d6:	0505                	addi	a0,a0,1
     3d8:	02096603          	0x2096603
     3dc:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     3de:	1905                	addi	s2,s2,-31
     3e0:	0200                	addi	s0,sp,256
    for(i = 0; i < size_a; ++i){
     3e2:	0104                	addi	s1,sp,128
     3e4:	0306                	slli	t1,t1,0x1
     3e6:	091a                	slli	s2,s2,0x6
    for(i = 0; i < size_b; ++i){
     3e8:	0002                	c.slli64	zero
     3ea:	0501                	addi	a0,a0,0
     3ec:	000d                	c.nop	3
    if(star_mult == 1){
     3ee:	0402                	c.slli64	s0
     3f0:	0601                	addi	a2,a2,0
     3f2:	00090003          	lb	zero,0(s2)
     3f6:	0100                	addi	s0,sp,128
     3f8:	0306                	slli	t1,t1,0x1
     3fa:	00040903          	lb	s2,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3fe:	0501                	addi	a0,a0,0
     400:	061e                	slli	a2,a2,0x7
            for (k = size_a-1; k >= 0; k = k-1 ){
     402:	00090003          	lb	zero,0(s2)
            product2[j] = 0;
     406:	0100                	addi	s0,sp,128
     408:	0d05                	addi	s10,s10,1
     40a:	0306                	slli	t1,t1,0x1
            line[i][j] = 0;
     40c:	00020907          	0x20907
            product2[j] = 0;
     410:	0501                	addi	a0,a0,0
     412:	061e                	slli	a2,a2,0x7
        for(j = 0; j < size_a + size_b -1; ++j){
     414:	00090003          	lb	zero,0(s2)
     418:	0100                	addi	s0,sp,128
     41a:	2905                	jal	84a <ext_euclid+0x17e>
    for (i = 0; i < size_b; ++i){
     41c:	04090003          	lb	zero,64(s2)
     420:	0100                	addi	s0,sp,128
     422:	1a05                	addi	s4,s4,-31
        for(j = 0; j < size_a + size_b -1; ++j){
     424:	06090003          	lb	zero,96(s2)
        pola[i] = a[i];
     428:	0100                	addi	s0,sp,128
     42a:	0605                	addi	a2,a2,1
     42c:	0306                	slli	t1,t1,0x1
     42e:	0901                	addi	s2,s2,0
     430:	0002                	c.slli64	zero
     432:	0501                	addi	a0,a0,0
     434:	0601                	addi	a2,a2,0
    for(i = 0; i < size_a; ++i){
     436:	00090203          	lb	tp,0(s2)
        pola[i] = a[i];
     43a:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     43c:	1105                	addi	sp,sp,-31
        polb[i] = b[i];
     43e:	0200                	addi	s0,sp,256
     440:	0304                	addi	s1,sp,384
     442:	0306                	slli	t1,t1,0x1
     444:	0002096f          	jal	s2,20444 <_stack_start+0x10444>
     448:	0501                	addi	a0,a0,0
     44a:	0005                	c.nop	1
    for(i = 0; i < size_b; ++i){
     44c:	0402                	c.slli64	s0
        polb[i] = b[i];
     44e:	096a0303          	lb	t1,150(s4)
    for(i = 0; i < size_b; ++i){
     452:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     454:	0001                	nop
     456:	0402                	c.slli64	s0
     458:	09090303          	lb	t1,144(s2)
     45c:	000a                	c.slli	zero,0x2
     45e:	0501                	addi	a0,a0,0
     460:	0402002b          	0x402002b
            for (k = size_a-1; k >= 0; k = k-1 ){
     464:	090c0303          	lb	t1,144(s8) # 19090 <_stack_start+0x9090>
                line[size_b-1-j][k] = pola[k]*polb[j];
     468:	0000                	unimp
     46a:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     46c:	002c                	addi	a1,sp,8
     46e:	0402                	c.slli64	s0
        for (j = size_b -1; j >= 0; j = j-1){
     470:	00030603          	lb	a2,0(t1)
     474:	0009                	c.nop	2
     476:	0100                	addi	s0,sp,128
     478:	1105                	addi	sp,sp,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     47a:	0200                	addi	s0,sp,256
        array_add(product2,line[i],size_a+size_b-1);
     47c:	0304                	addi	s1,sp,384
     47e:	0306                	slli	t1,t1,0x1
     480:	0906                	slli	s2,s2,0x1
     482:	0004                	0x4
    for(i=0;i<size_b;++i){
     484:	0501                	addi	a0,a0,0
     486:	0005                	c.nop	1
}
     488:	0402                	c.slli64	s0
     48a:	09650303          	lb	t1,150(a0) # 19096 <_stack_start+0x9096>
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0402                	c.slli64	s0
     494:	09090303          	lb	t1,144(s2)
     498:	000a                	c.slli	zero,0x2
     49a:	0501                	addi	a0,a0,0
     49c:	0402002f          	0x402002f
     4a0:	09110303          	lb	t1,145(sp)
     4a4:	0000                	unimp
     4a6:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     4a8:	0030                	addi	a2,sp,8
     4aa:	0402                	c.slli64	s0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4ac:	00030603          	lb	a2,0(t1)
     4b0:	0009                	c.nop	2
     4b2:	0100                	addi	s0,sp,128
     4b4:	1105                	addi	sp,sp,-31
     4b6:	0306                	slli	t1,t1,0x1
     4b8:	00040907          	0x40907
            for (k = size_a-1; k >= 0; k = k-1 ){
     4bc:	0501                	addi	a0,a0,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     4be:	0305                	addi	t1,t1,1
     4c0:	095f 0000 0301      	0x3010000095f
            for (k = size_a-1; k >= 0; k = k-1 ){
     4c6:	0909                	addi	s2,s2,2
     4c8:	000a                	c.slli	zero,0x2
        for (j = size_b -1; j >= 0; j = j-1){
     4ca:	0501                	addi	a0,a0,0
     4cc:	0917032f          	0x917032f
     4d0:	0000                	unimp
        array_add(product2,line[i],size_a+size_b-1);
     4d2:	0501                	addi	a0,a0,0
     4d4:	0630                	addi	a2,sp,776
     4d6:	00090003          	lb	zero,0(s2)
    for(i=0;i<size_b;++i){
     4da:	0100                	addi	s0,sp,128
     4dc:	4e05                	li	t3,1
     4de:	0306                	slli	t1,t1,0x1
    int v[size_N];
     4e0:	0004090f          	0x4090f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e4:	0501                	addi	a0,a0,0
    int v[size_N];
     4e6:	0305                	addi	t1,t1,1
     4e8:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ec:	0501                	addi	a0,a0,0
     4ee:	064e                	slli	a2,a2,0x13
     4f0:	00097d03          	0x97d03
     4f4:	0100                	addi	s0,sp,128
     4f6:	22090003          	lb	zero,544(s2)
     4fa:	0100                	addi	s0,sp,128
     4fc:	1d05                	addi	s10,s10,-31
     4fe:	04090303          	lb	t1,64(s2)
     502:	0100                	addi	s0,sp,128
     504:	0905                	addi	s2,s2,1
    int v[size_N];
     506:	04090003          	lb	zero,64(s2)
     50a:	0100                	addi	s0,sp,128
    int q[size_N];
     50c:	4e05                	li	t3,1
     50e:	0c097d03          	0xc097d03
    int num_temp[size_N];
     512:	0100                	addi	s0,sp,128
     514:	0905                	addi	s2,s2,1
    int denum_temp[size_D];
     516:	02090703          	lb	a4,32(s2)
     51a:	0100                	addi	s0,sp,128
     51c:	4e05                	li	t3,1
    int num_temp[size_N];
     51e:	06097903          	0x6097903
    int denum_temp[size_D];
     522:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     524:	0905                	addi	s2,s2,1
     526:	04090303          	lb	t1,64(s2)
     52a:	0100                	addi	s0,sp,128
    int v[size_N];
     52c:	04090303          	lb	t1,64(s2)
    int denum_temp[size_D];
     530:	0100                	addi	s0,sp,128
     532:	0c05                	addi	s8,s8,1
     534:	04090403          	lb	s0,64(s2)
    for (i = 0; i < size_N; ++i){
     538:	0100                	addi	s0,sp,128
     53a:	1805                	addi	a6,a6,-31
    array_mod(num_temp, mod, size_N);
     53c:	02090303          	lb	t1,32(s2)
     540:	0100                	addi	s0,sp,128
     542:	0905                	addi	s2,s2,1
    for (i = 0; i < size_D; ++i) {
     544:	08097603          	0x8097603
     548:	0100                	addi	s0,sp,128
    array_mod(denum_temp,mod,size_D);
     54a:	08090303          	lb	t1,128(s2)
     54e:	0100                	addi	s0,sp,128
     550:	08097d03          	0x8097d03
    for (i = 0; i < size_N; ++i){
     554:	0100                	addi	s0,sp,128
     556:	0505                	addi	a0,a0,1
    for (i = size_D-1; i >= 0; i = i-1){
     558:	0306                	slli	t1,t1,0x1
     55a:	0901                	addi	s2,s2,0
     55c:	0002                	c.slli64	zero
     55e:	0301                	addi	t1,t1,0
     560:	0901                	addi	s2,s2,0
     562:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     564:	0301                	addi	t1,t1,0
     566:	0901                	addi	s2,s2,0
        if ( (b_N*u)%mod == 1 )
     568:	0000                	unimp
    for (u = 0; u < mod; ++u){
     56a:	0501                	addi	a0,a0,0
     56c:	0609                	addi	a2,a2,2
     56e:	00090003          	lb	zero,0(s2)
        num_temp[i] = num[i];
     572:	0100                	addi	s0,sp,128
     574:	0505                	addi	a0,a0,1
     576:	0306                	slli	t1,t1,0x1
     578:	0901                	addi	s2,s2,0
     57a:	0006                	c.slli	zero,0x1
     57c:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     57e:	0609                	addi	a2,a2,2
        num_temp[i] = num[i];
     580:	00090003          	lb	zero,0(s2)
        denum_temp[i] = denum[i];
     584:	0100                	addi	s0,sp,128
     586:	0505                	addi	a0,a0,1
     588:	0306                	slli	t1,t1,0x1
     58a:	00060903          	lb	s2,0(a2) # fffe0000 <_stack_start+0xfffd0000>
     58e:	0501                	addi	a0,a0,0
    for (i = 0; i < size_D; ++i) {
     590:	0011                	c.nop	4
        denum_temp[i] = denum[i];
     592:	0402                	c.slli64	s0
    for (i = 0; i < size_D; ++i) {
     594:	0301                	addi	t1,t1,0
        q[i] = 0;
     596:	0900                	addi	s0,sp,144
     598:	0004                	0x4
     59a:	0501                	addi	a0,a0,0
     59c:	0005                	c.nop	1
        v[i] = 0;
     59e:	0402                	c.slli64	s0
        q[i] = 0;
     5a0:	0601                	addi	a2,a2,0
     5a2:	00090003          	lb	zero,0(s2)
        v[i] = 0;
     5a6:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     5a8:	0c05                	addi	s8,s8,1
     5aa:	04090803          	lb	a6,64(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     5ae:	0100                	addi	s0,sp,128
     5b0:	1105                	addi	sp,sp,-31
        if ( (b_N*u)%mod == 1 )
     5b2:	0200                	addi	s0,sp,256
     5b4:	0104                	addi	s1,sp,128
     5b6:	0306                	slli	t1,t1,0x1
     5b8:	0900                	addi	s0,sp,144
     5ba:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     5bc:	0501                	addi	a0,a0,0
     5be:	0005                	c.nop	1
        if( num_temp[i] != 0 )
     5c0:	0402                	c.slli64	s0
    for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0601                	addi	a2,a2,0
     5c4:	00090003          	lb	zero,0(s2)
     5c8:	0100                	addi	s0,sp,128
     5ca:	04090403          	lb	s0,64(s2)
     5ce:	0100                	addi	s0,sp,128
    while (d >= d2){
     5d0:	0306                	slli	t1,t1,0x1
     5d2:	0900                	addi	s0,sp,144
    for(i = 0; i < size_N; ++i){
     5d4:	000a                	c.slli	zero,0x2
        result[i] = q[i];
     5d6:	0301                	addi	t1,t1,0
     5d8:	0902                	c.slli64	s2
     5da:	0002                	c.slli64	zero
     5dc:	0501                	addi	a0,a0,0
    for(i = 0; i < size_N; ++i){
     5de:	060c                	addi	a1,sp,768
     5e0:	04090003          	lb	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     5e4:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     5e6:	1105                	addi	sp,sp,-31
     5e8:	0200                	addi	s0,sp,256
     5ea:	0104                	addi	s1,sp,128
     5ec:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     5ee:	0900                	addi	s0,sp,144
     5f0:	0002                	c.slli64	zero
}
     5f2:	0501                	addi	a0,a0,0
     5f4:	0005                	c.nop	1
     5f6:	0402                	c.slli64	s0
     5f8:	0601                	addi	a2,a2,0
     5fa:	00090003          	lb	zero,0(s2)
     5fe:	0100                	addi	s0,sp,128
     600:	0306                	slli	t1,t1,0x1
     602:	0904                	addi	s1,sp,144
     604:	0004                	0x4
     606:	0301                	addi	t1,t1,0
     608:	0904                	addi	s1,sp,144
     60a:	0008                	0x8
     60c:	0501                	addi	a0,a0,0
     60e:	00030607          	0x30607
     612:	0009                	c.nop	2
     614:	0100                	addi	s0,sp,128
     616:	1d05                	addi	s10,s10,-31
     618:	0200                	addi	s0,sp,256
     61a:	0104                	addi	s1,sp,128
        v[(d-d2)] = u*r_d;
     61c:	0306                	slli	t1,t1,0x1
     61e:	0908                	addi	a0,sp,144
     620:	0014                	0x14
     622:	0501                	addi	a0,a0,0
     624:	0009                	c.nop	2
     626:	0402                	c.slli64	s0
        array_mod(v, mod, size_N);
     628:	0601                	addi	a2,a2,0
     62a:	00090003          	lb	zero,0(s2)
        v[(d-d2)] = u*r_d;
     62e:	0100                	addi	s0,sp,128
        array_mod(v, mod, size_N);
     630:	1405                	addi	s0,s0,-31
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     632:	04090103          	lb	sp,64(s2)
     636:	0100                	addi	s0,sp,128
     638:	0d05                	addi	s10,s10,1
     63a:	0200                	addi	s0,sp,256
     63c:	0304                	addi	s1,sp,384
     63e:	0306                	slli	t1,t1,0x1
         array_mod(product, mod, size_N);
     640:	00040963          	beqz	s0,652 <polydiv+0x172>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     644:	0501                	addi	a0,a0,0
         array_mod(product, mod, size_N);
     646:	0018                	0x18
        for (i = 0; i < size_N; ++i){
     648:	0402                	c.slli64	s0
     64a:	01030603          	lb	a2,16(t1)
     64e:	0009                	c.nop	2
         array_mod(num_temp, mod, size_N);
     650:	0100                	addi	s0,sp,128
     652:	0200                	addi	s0,sp,256
     654:	0304                	addi	s1,sp,384
     656:	06097f03          	0x6097f03
        array_add(q, v, size_N);
     65a:	0100                	addi	s0,sp,128
     65c:	0d05                	addi	s10,s10,1
     65e:	0200                	addi	s0,sp,256
        array_mod(q, mod, size_N);
     660:	0304                	addi	s1,sp,384
     662:	0306                	slli	t1,t1,0x1
     664:	0901                	addi	s2,s2,0
     666:	0004                	0x4
        for (i = size_N-1; i >= 0; i = i-1){
     668:	0501                	addi	a0,a0,0
     66a:	0018                	0x18
     66c:	0402                	c.slli64	s0
     66e:	00030603          	lb	a2,0(t1)
     672:	0009                	c.nop	2
     674:	0100                	addi	s0,sp,128
     676:	2c05                	jal	8a6 <ext_euclid+0x1da>
     678:	0200                	addi	s0,sp,256
            num_temp[i] = num_temp[i] - product[i];
     67a:	0304                	addi	s1,sp,384
     67c:	0306                	slli	t1,t1,0x1
     67e:	097e                	slli	s2,s2,0x1f
     680:	0004                	0x4
     682:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     684:	0014                	0x14
     686:	0402                	c.slli64	s0
            num_temp[i] = num_temp[i] - product[i];
     688:	0301                	addi	t1,t1,0
     68a:	0900                	addi	s0,sp,144
     68c:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     68e:	0501                	addi	a0,a0,0
            if( num_temp[i] != 0 )
     690:	0009                	c.nop	2
        for (i = size_N-1; i >= 0; i = i-1){
     692:	0402                	c.slli64	s0
     694:	0601                	addi	a2,a2,0
            v[i] = 0;
     696:	00090003          	lb	zero,0(s2)
     69a:	0100                	addi	s0,sp,128
     69c:	1d05                	addi	s10,s10,-31
     69e:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     6a0:	0204                	addi	s1,sp,256
     6a2:	0306                	slli	t1,t1,0x1
     6a4:	097f                	0x97f
     6a6:	0004                	0x4
        result[i] = q[i];
     6a8:	0501                	addi	a0,a0,0
     6aa:	0103060f          	0x103060f
     6ae:	0809                	addi	a6,a6,2
     6b0:	0100                	addi	s0,sp,128
     6b2:	0905                	addi	s2,s2,1
    for(i = 0; i < size_N; ++i){
     6b4:	0200                	addi	s0,sp,256
        result[i] = q[i];
     6b6:	0304                	addi	s1,sp,384
    for(i = 0; i < size_N; ++i){
     6b8:	0306                	slli	t1,t1,0x1
        result[i] = num_temp[i-size_N];
     6ba:	0908                	addi	a0,sp,144
     6bc:	0004                	0x4
     6be:	0501                	addi	a0,a0,0
     6c0:	0011                	c.nop	4
     6c2:	0402                	c.slli64	s0
     6c4:	00030603          	lb	a2,0(t1)
    for(i = size_N; i < (2*size_N); ++i){
     6c8:	0409                	addi	s0,s0,2
     6ca:	0100                	addi	s0,sp,128
    int ri_2[size]; // MX-ring poly, a
     6cc:	1405                	addi	s0,s0,-31
     6ce:	0200                	addi	s0,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     6d2:	04090003          	lb	zero,64(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d6:	0100                	addi	s0,sp,128
     6d8:	1105                	addi	sp,sp,-31
     6da:	0200                	addi	s0,sp,256
     6dc:	0304                	addi	s1,sp,384
     6de:	02090003          	lb	zero,32(s2)
     6e2:	0100                	addi	s0,sp,128
     6e4:	1d05                	addi	s10,s10,-31
     6e6:	0200                	addi	s0,sp,256
     6e8:	0304                	addi	s1,sp,384
     6ea:	02097f03          	0x2097f03
     6ee:	0100                	addi	s0,sp,128
     6f0:	1105                	addi	sp,sp,-31
    int ri_2[size]; // MX-ring poly, a
     6f2:	0200                	addi	s0,sp,256
     6f4:	0304                	addi	s1,sp,384
     6f6:	02090103          	lb	sp,32(s2)
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6fa:	0100                	addi	s0,sp,128
     6fc:	1d05                	addi	s10,s10,-31
    int ri[size];
     6fe:	0200                	addi	s0,sp,256
     700:	0304                	addi	s1,sp,384
     702:	0306                	slli	t1,t1,0x1
    int ti_1[size]; // ti_1[0] = 1
     704:	097f                	0x97f
     706:	0002                	c.slli64	zero
     708:	0501                	addi	a0,a0,0
    int ti[size];
     70a:	0009                	c.nop	2
     70c:	0402                	c.slli64	s0
     70e:	09070303          	lb	t1,144(a4)
    int qi_1[size];
     712:	0002                	c.slli64	zero
     714:	0501                	addi	a0,a0,0
    int temp[size];
     716:	0011                	c.nop	4
     718:	0402                	c.slli64	s0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     71a:	00030603          	lb	a2,0(t1)
    int ri_2[size]; // MX-ring poly, a
     71e:	0409                	addi	s0,s0,2
     720:	0100                	addi	s0,sp,128
    int temp[size];
     722:	1405                	addi	s0,s0,-31
    for (i = 0; i < size; ++i) {
     724:	0200                	addi	s0,sp,256
     726:	0304                	addi	s1,sp,384
        ti_2[i] = 0;
     728:	04090003          	lb	zero,64(s2)
     72c:	0100                	addi	s0,sp,128
     72e:	1105                	addi	sp,sp,-31
    for (i = 0; i < size; ++i) {
     730:	0200                	addi	s0,sp,256
     732:	0304                	addi	s1,sp,384
    ti_1[0] = 1;
     734:	02090003          	lb	zero,32(s2)
     738:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     73a:	1d05                	addi	s10,s10,-31
     73c:	0200                	addi	s0,sp,256
     73e:	0304                	addi	s1,sp,384
     740:	02097f03          	0x2097f03
            ti[i] = ti_2[i] - temp[i];
     744:	0100                	addi	s0,sp,128
     746:	1105                	addi	sp,sp,-31
     748:	0200                	addi	s0,sp,256
    array_mod(ri_2,mod,size);
     74a:	0304                	addi	s1,sp,384
     74c:	02090103          	lb	sp,32(s2)
     750:	0100                	addi	s0,sp,128
    array_mod(ri_1,mod,size);
     752:	1d05                	addi	s10,s10,-31
     754:	0200                	addi	s0,sp,256
     756:	0304                	addi	s1,sp,384
     758:	0306                	slli	t1,t1,0x1
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     75a:	097f                	0x97f
     75c:	0002                	c.slli64	zero
     75e:	0501                	addi	a0,a0,0
     760:	08030607          	0x8030607
     764:	0209                	addi	tp,tp,2
        for (i = N + 1; i < (2 * N + 2); ++i) {
     766:	0100                	addi	s0,sp,128
     768:	1d05                	addi	s10,s10,-31
     76a:	0200                	addi	s0,sp,256
     76c:	0104                	addi	s1,sp,128
     76e:	0306                	slli	t1,t1,0x1
     770:	0901                	addi	s2,s2,0
     772:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     774:	0501                	addi	a0,a0,0
     776:	0009                	c.nop	2
     778:	0402                	c.slli64	s0
    array_mod(temp,mod,size);
     77a:	0601                	addi	a2,a2,0
     77c:	00090003          	lb	zero,0(s2)
     780:	0100                	addi	s0,sp,128
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     782:	1405                	addi	s0,s0,-31
     784:	04090803          	lb	a6,64(s2)
     788:	0100                	addi	s0,sp,128
     78a:	1105                	addi	sp,sp,-31
     78c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     78e:	0104                	addi	s1,sp,128
     790:	0306                	slli	t1,t1,0x1
     792:	00020907          	0x20907
    array_mod(qi_1,mod,size);
     796:	0501                	addi	a0,a0,0
     798:	0005                	c.nop	1
     79a:	0402                	c.slli64	s0
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     79c:	0601                	addi	a2,a2,0
     79e:	00090003          	lb	zero,0(s2)
     7a2:	0100                	addi	s0,sp,128
     7a4:	0f05                	addi	t5,t5,1
     7a6:	04090603          	lb	a2,64(s2)
        for (i = 0; i < N + 1; ++i) {
     7aa:	0100                	addi	s0,sp,128
     7ac:	0d05                	addi	s10,s10,1
     7ae:	02090103          	lb	sp,32(s2)
    array_mod(temp,mod,size);
     7b2:	0100                	addi	s0,sp,128
     7b4:	1405                	addi	s0,s0,-31
     7b6:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7b8:	0104                	addi	s1,sp,128
     7ba:	0306                	slli	t1,t1,0x1
     7bc:	097f                	0x97f
     7be:	0008                	0x8
    array_mod(ti,mod,size);
     7c0:	0501                	addi	a0,a0,0
     7c2:	000d                	c.nop	3
     7c4:	0402                	c.slli64	s0
     7c6:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     7c8:	00090103          	lb	sp,0(s2)
     7cc:	0100                	addi	s0,sp,128
     7ce:	0905                	addi	s2,s2,1
     7d0:	0200                	addi	s0,sp,256
    while (controlR != 0) {
     7d2:	0104                	addi	s1,sp,128
        for (j = 0; j < mod; ++j) {
     7d4:	02097f03          	0x2097f03
     7d8:	0100                	addi	s0,sp,128
     7da:	0505                	addi	a0,a0,1
     7dc:	0306                	slli	t1,t1,0x1
     7de:	090a                	slli	s2,s2,0x2
     7e0:	0004                	0x4
     7e2:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     7e4:	0902                	c.slli64	s2
     7e6:	000c                	0xc
    }
     7e8:	0301                	addi	t1,t1,0
     7ea:	0902                	c.slli64	s2
     7ec:	0000                	unimp
     7ee:	0501                	addi	a0,a0,0
     7f0:	0601                	addi	a2,a2,0
     7f2:	00090103          	lb	sp,0(s2)
     7f6:	0100                	addi	s0,sp,128
     7f8:	1105                	addi	sp,sp,-31
     7fa:	0200                	addi	s0,sp,256
     7fc:	0304                	addi	s1,sp,384
     7fe:	0306                	slli	t1,t1,0x1
     800:	095e                	slli	s2,s2,0x17
     802:	002a                	c.slli	zero,0xa
     804:	0501                	addi	a0,a0,0
     806:	0025                	c.nop	9
     808:	0402                	c.slli64	s0
     80a:	00030603          	lb	a2,0(t1)
     80e:	0409                	addi	s0,s0,2
     810:	0100                	addi	s0,sp,128
        ri_2[i] = polyR[i];
     812:	2b05                	jal	d42 <ntru_deceypt+0xb4>
     814:	0200                	addi	s0,sp,256
     816:	0304                	addi	s1,sp,384
     818:	04090003          	lb	zero,64(s2)
     81c:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     81e:	2e05                	jal	b4e <generate_keys+0x238>
        ri_2[i] = polyR[i];
     820:	0200                	addi	s0,sp,256
     822:	0304                	addi	s1,sp,384
        ri_1[i] = polyf[i];
     824:	02090003          	lb	zero,32(s2)
     828:	0100                	addi	s0,sp,128
     82a:	2a05                	jal	95a <generate_keys+0x44>
     82c:	0200                	addi	s0,sp,256
     82e:	0304                	addi	s1,sp,384
     830:	06097f03          	0x6097f03
        ti_2[i] = 0;
     834:	0100                	addi	s0,sp,128
     836:	2e05                	jal	b66 <generate_keys+0x250>
     838:	0200                	addi	s0,sp,256
     83a:	0304                	addi	s1,sp,384
        ti_1[i] = 0;
     83c:	02090103          	lb	sp,32(s2)
     840:	0100                	addi	s0,sp,128
     842:	2505                	jal	e62 <memcpy+0x98>
    for (i = 0; i < size; ++i) {
     844:	0200                	addi	s0,sp,256
     846:	0304                	addi	s1,sp,384
            ri[i - (N + 1)] = res[i];
     848:	04090003          	lb	zero,64(s2)
     84c:	0100                	addi	s0,sp,128
     84e:	2805                	jal	87e <ext_euclid+0x1b2>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     850:	0200                	addi	s0,sp,256
     852:	0304                	addi	s1,sp,384
            ri[i - (N + 1)] = res[i];
     854:	0306                	slli	t1,t1,0x1
     856:	097f                	0x97f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     858:	0002                	c.slli64	zero
            temp[i] = ri_2[i] - ri[i];
     85a:	0501                	addi	a0,a0,0
     85c:	0020                	addi	s0,sp,8
     85e:	0402                	c.slli64	s0
     860:	0301                	addi	t1,t1,0
     862:	0900                	addi	s0,sp,144
     864:	0000                	unimp
     866:	0501                	addi	a0,a0,0
     868:	000d                	c.nop	3
        for (i = 0; i < N + 1; ++i) {
     86a:	0402                	c.slli64	s0
            temp[i] = ri_2[i] - ri[i];
     86c:	0601                	addi	a2,a2,0
     86e:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     872:	0100                	addi	s0,sp,128
            qi_1[i] = res1[i];
     874:	2505                	jal	e94 <memcpy+0xca>
     876:	0200                	addi	s0,sp,256
     878:	0204                	addi	s1,sp,256
     87a:	0306                	slli	t1,t1,0x1
     87c:	097f                	0x97f
     87e:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     880:	0501                	addi	a0,a0,0
            qi_1[i] = res1[i];
     882:	04020027          	0x4020027
            temp[i] = res2[i];
     886:	0602                	c.slli64	a2
     888:	00090003          	lb	zero,0(s2)
     88c:	0100                	addi	s0,sp,128
     88e:	1405                	addi	s0,s0,-31
     890:	08090103          	lb	sp,128(s2)
     894:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     896:	1105                	addi	sp,sp,-31
            ti[i] = ti_2[i] - temp[i];
     898:	0200                	addi	s0,sp,256
     89a:	0304                	addi	s1,sp,384
     89c:	0306                	slli	t1,t1,0x1
     89e:	0908                	addi	a0,sp,144
     8a0:	0004                	0x4
     8a2:	0501                	addi	a0,a0,0
     8a4:	0029                	c.nop	10
     8a6:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     8a8:	00030603          	lb	a2,0(t1)
            ti[i] = ti_2[i] - temp[i];
     8ac:	0409                	addi	s0,s0,2
        for (i = 0; i < N + 1; ++i) {
     8ae:	0100                	addi	s0,sp,128
     8b0:	2f05                	jal	fe0 <main+0x90>
            ri_2[i] = ri_1[i];
     8b2:	0200                	addi	s0,sp,256
     8b4:	0304                	addi	s1,sp,384
     8b6:	04090003          	lb	zero,64(s2)
     8ba:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8bc:	3205                	jal	1dc <polymult+0x1a>
            ri_2[i] = ri_1[i];
     8be:	0200                	addi	s0,sp,256
            ri_1[i] = ri[i];
     8c0:	0304                	addi	s1,sp,384
     8c2:	02090003          	lb	zero,32(s2)
            ti_2[i] = ti_1[i];
     8c6:	0100                	addi	s0,sp,128
     8c8:	2a05                	jal	9f8 <generate_keys+0xe2>
            ri_1[i] = ri[i];
     8ca:	0200                	addi	s0,sp,256
            ti_2[i] = ti_1[i];
     8cc:	0304                	addi	s1,sp,384
     8ce:	06097f03          	0x6097f03
     8d2:	0100                	addi	s0,sp,128
            controlR += ri[i];
     8d4:	3205                	jal	1f4 <polymult+0x32>
            ti_2[i] = ti_1[i];
     8d6:	0200                	addi	s0,sp,256
     8d8:	0304                	addi	s1,sp,384
            ti_1[i] = ti[i];
     8da:	02090103          	lb	sp,32(s2)
     8de:	0100                	addi	s0,sp,128
     8e0:	2905                	jal	d10 <ntru_deceypt+0x82>
              qi_1[i] = 0;
     8e2:	0200                	addi	s0,sp,256
     8e4:	0304                	addi	s1,sp,384
     8e6:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     8ea:	0100                	addi	s0,sp,128
     8ec:	2805                	jal	91c <generate_keys+0x6>
            if (((ri_2[0] * j) % mod) == 1)
     8ee:	0200                	addi	s0,sp,256
     8f0:	0304                	addi	s1,sp,384
     8f2:	0306                	slli	t1,t1,0x1
     8f4:	097f                	0x97f
     8f6:	0002                	c.slli64	zero
     8f8:	0501                	addi	a0,a0,0
     8fa:	0020                	addi	s0,sp,8
     8fc:	0402                	c.slli64	s0
        for (j = 0; j < mod; ++j) {
     8fe:	0301                	addi	t1,t1,0
     900:	0900                	addi	s0,sp,144
            ti_2[i] = (ti_2[i] * j) % mod;
     902:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     904:	0501                	addi	a0,a0,0
     906:	000d                	c.nop	3
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	0402                	c.slli64	s0
     90a:	0601                	addi	a2,a2,0
     90c:	00090003          	lb	zero,0(s2)
     910:	0100                	addi	s0,sp,128
     912:	2505                	jal	f32 <memset+0x8a>
        for (i = 0; i < N + 1; ++i) {
     914:	0200                	addi	s0,sp,256
int* generate_keys(int N, int p, int q){
     916:	0204                	addi	s1,sp,256
     918:	0306                	slli	t1,t1,0x1
     91a:	097f                	0x97f
     91c:	0004                	0x4
     91e:	0501                	addi	a0,a0,0
     920:	04020027          	0x4020027
     924:	0602                	c.slli64	a2
     926:	00090003          	lb	zero,0(s2)
     92a:	0100                	addi	s0,sp,128
     92c:	0905                	addi	s2,s2,1
     92e:	0200                	addi	s0,sp,256
     930:	0304                	addi	s1,sp,384
     932:	0306                	slli	t1,t1,0x1
     934:	0909                	addi	s2,s2,2
     936:	0008                	0x8
     938:	0501                	addi	a0,a0,0
     93a:	001d                	c.nop	7
     93c:	0402                	c.slli64	s0
     93e:	097f0303          	lb	t1,151(t5)
     942:	0008                	0x8
     944:	0501                	addi	a0,a0,0
     946:	000d                	c.nop	3
     948:	0402                	c.slli64	s0
     94a:	09070303          	lb	t1,144(a4)
     94e:	0006                	c.slli	zero,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     950:	0501                	addi	a0,a0,0
     952:	0020                	addi	s0,sp,8
     954:	0402                	c.slli64	s0
     956:	097f0303          	lb	t1,151(t5)
     95a:	0006                	c.slli	zero,0x1
     95c:	0501                	addi	a0,a0,0
     95e:	0346                	slli	t1,t1,0x11
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     960:	0911                	addi	s2,s2,4
     962:	0006                	c.slli	zero,0x1
     964:	0501                	addi	a0,a0,0
     966:	0305                	addi	t1,t1,1
     968:	0902                	c.slli64	s2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	0000                	unimp
     96c:	0501                	addi	a0,a0,0
     96e:	0646                	slli	a2,a2,0x11
     970:	00097e03          	0x97e03
     974:	0100                	addi	s0,sp,128
     976:	1d05                	addi	s10,s10,-31
     978:	06090203          	lb	tp,96(s2)
     97c:	0100                	addi	s0,sp,128
     97e:	4605                	li	a2,1
     980:	08097e03          	0x8097e03
     984:	0100                	addi	s0,sp,128
     986:	0905                	addi	s2,s2,1
     988:	04090203          	lb	tp,64(s2)
     98c:	0100                	addi	s0,sp,128
     98e:	4605                	li	a2,1
     990:	0c097e03          	0xc097e03
     994:	0100                	addi	s0,sp,128
     996:	0c090003          	lb	zero,192(s2)
     99a:	0100                	addi	s0,sp,128
     99c:	0905                	addi	s2,s2,1
     99e:	02090503          	lb	a0,32(s2)
     9a2:	0100                	addi	s0,sp,128
     9a4:	04097d03          	0x4097d03
     9a8:	0100                	addi	s0,sp,128
     9aa:	08090303          	lb	t1,128(s2)
     9ae:	0100                	addi	s0,sp,128
     9b0:	08097d03          	0x8097d03
     9b4:	0100                	addi	s0,sp,128
     9b6:	02090303          	lb	t1,32(s2)
     9ba:	0100                	addi	s0,sp,128
     9bc:	04090103          	lb	sp,64(s2)
     9c0:	0100                	addi	s0,sp,128
     9c2:	06097f03          	0x6097f03
     9c6:	0100                	addi	s0,sp,128
     9c8:	02090103          	lb	sp,32(s2)
     9cc:	0100                	addi	s0,sp,128
     9ce:	04097c03          	0x4097c03
     9d2:	0100                	addi	s0,sp,128
     9d4:	0505                	addi	a0,a0,1
    int polyR[N+1];
     9d6:	0306                	slli	t1,t1,0x1
     9d8:	0901                	addi	s2,s2,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	0002                	c.slli64	zero
    int polyR[N+1];
     9dc:	0301                	addi	t1,t1,0
     9de:	0901                	addi	s2,s2,0
     9e0:	0000                	unimp
     9e2:	0301                	addi	t1,t1,0
     9e4:	0901                	addi	s2,s2,0
     9e6:	0000                	unimp
     9e8:	0301                	addi	t1,t1,0
    polyR[N] = 1;
     9ea:	0901                	addi	s2,s2,0
     9ec:	0000                	unimp
     9ee:	0501                	addi	a0,a0,0
     9f0:	0609                	addi	a2,a2,2
     9f2:	00090003          	lb	zero,0(s2)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f6:	0100                	addi	s0,sp,128
     9f8:	0505                	addi	a0,a0,1
     9fa:	0306                	slli	t1,t1,0x1
     9fc:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     a00:	0501                	addi	a0,a0,0
     a02:	060c                	addi	a1,sp,768
     a04:	04090003          	lb	zero,64(s2)
     a08:	0100                	addi	s0,sp,128
     a0a:	1905                	addi	s2,s2,-31
     a0c:	02090303          	lb	t1,32(s2)
     a10:	0100                	addi	s0,sp,128
     a12:	1105                	addi	sp,sp,-31
     a14:	0200                	addi	s0,sp,256
     a16:	0104                	addi	s1,sp,128
     a18:	0306                	slli	t1,t1,0x1
     a1a:	097d                	addi	s2,s2,31
     a1c:	0008                	0x8
     a1e:	0501                	addi	a0,a0,0
     a20:	0005                	c.nop	1
     a22:	0402                	c.slli64	s0
     a24:	0601                	addi	a2,a2,0
     a26:	00090003          	lb	zero,0(s2)
     a2a:	0100                	addi	s0,sp,128
     a2c:	0b05                	addi	s6,s6,1
     a2e:	04090703          	lb	a4,64(s2)
     a32:	0100                	addi	s0,sp,128
     a34:	1005                	c.nop	-31
     a36:	0200                	addi	s0,sp,256
     a38:	0104                	addi	s1,sp,128
     a3a:	0306                	slli	t1,t1,0x1
     a3c:	0900                	addi	s0,sp,144
     a3e:	0002                	c.slli64	zero
     a40:	0501                	addi	a0,a0,0
     a42:	0005                	c.nop	1
     a44:	0402                	c.slli64	s0
     a46:	0601                	addi	a2,a2,0
     a48:	00090003          	lb	zero,0(s2)
     a4c:	0100                	addi	s0,sp,128
     a4e:	0b05                	addi	s6,s6,1
     a50:	04090403          	lb	s0,64(s2)
     a54:	0100                	addi	s0,sp,128
     a56:	1005                	c.nop	-31
    polyR[0] = -1;
     a58:	0200                	addi	s0,sp,256
     a5a:	0104                	addi	s1,sp,128
    for(i = 1; i < N; ++i){
     a5c:	0306                	slli	t1,t1,0x1
     a5e:	0900                	addi	s0,sp,144
     a60:	0002                	c.slli64	zero
     a62:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     a64:	0005                	c.nop	1
     a66:	0402                	c.slli64	s0
     a68:	0601                	addi	a2,a2,0
     a6a:	00090003          	lb	zero,0(s2)
        random_keys[i] = f[i];
     a6e:	0100                	addi	s0,sp,128
     a70:	0306                	slli	t1,t1,0x1
     a72:	0906                	slli	s2,s2,0x1
     a74:	0004                	0x4
    for(i = 0; i < N; ++i){
     a76:	0501                	addi	a0,a0,0
     a78:	00030607          	0x30607
     a7c:	0009                	c.nop	2
    for(i = N; i < (2*N); ++i){
     a7e:	0100                	addi	s0,sp,128
     a80:	1d05                	addi	s10,s10,-31
     a82:	0200                	addi	s0,sp,256
     a84:	0104                	addi	s1,sp,128
        random_keys[i] = g[i-N];
     a86:	0306                	slli	t1,t1,0x1
     a88:	0908                	addi	a0,sp,144
     a8a:	0010                	0x10
     a8c:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     a8e:	0009                	c.nop	2
     a90:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     a92:	0601                	addi	a2,a2,0
     a94:	00090003          	lb	zero,0(s2)
    fp = ext_euclid(polyR, f, (N+1), p);
     a98:	0100                	addi	s0,sp,128
     a9a:	1405                	addi	s0,s0,-31
     a9c:	04090103          	lb	sp,64(s2)
     aa0:	0100                	addi	s0,sp,128
     aa2:	0d05                	addi	s10,s10,1
    for(i = (2*N); i < (3*N); ++i){
     aa4:	0200                	addi	s0,sp,256
        random_keys[i] = fp[i-(2*N)];
     aa6:	0304                	addi	s1,sp,384
     aa8:	0306                	slli	t1,t1,0x1
     aaa:	0968                	addi	a0,sp,156
     aac:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     aae:	0501                	addi	a0,a0,0
     ab0:	0019                	c.nop	6
    fq = ext_euclid(polyR, f, (N+1), q);
     ab2:	0402                	c.slli64	s0
     ab4:	01030603          	lb	a2,16(t1)
     ab8:	0009                	c.nop	2
     aba:	0100                	addi	s0,sp,128
     abc:	1805                	addi	a6,a6,-31
    for(i = (3*N); i < (4*N); ++i){
     abe:	0200                	addi	s0,sp,256
     ac0:	0304                	addi	s1,sp,384
     ac2:	06097f03          	0x6097f03
        random_keys[i] = fq[i-(3*N)];
     ac6:	0100                	addi	s0,sp,128
     ac8:	0d05                	addi	s10,s10,1
     aca:	0200                	addi	s0,sp,256
     acc:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     ace:	0306                	slli	t1,t1,0x1
     ad0:	0901                	addi	s2,s2,0
    fg = polymult2(fq, N, g, N, 0);
     ad2:	0004                	0x4
     ad4:	0501                	addi	a0,a0,0
     ad6:	0019                	c.nop	6
     ad8:	0402                	c.slli64	s0
     ada:	00030603          	lb	a2,0(t1)
    for(i = 0; i < (2*N-1); ++i){
     ade:	0009                	c.nop	2
     ae0:	0100                	addi	s0,sp,128
     ae2:	2c05                	jal	d12 <ntru_deceypt+0x84>
     ae4:	0200                	addi	s0,sp,256
     ae6:	0304                	addi	s1,sp,384
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     ae8:	0306                	slli	t1,t1,0x1
     aea:	097e                	slli	s2,s2,0x1f
     aec:	0004                	0x4
     aee:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     af0:	0014                	0x14
     af2:	0402                	c.slli64	s0
     af4:	0301                	addi	t1,t1,0
     af6:	0900                	addi	s0,sp,144
     af8:	0004                	0x4
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     afa:	0501                	addi	a0,a0,0
     afc:	0009                	c.nop	2
     afe:	0402                	c.slli64	s0
     b00:	0601                	addi	a2,a2,0
    for(i = (4*N); i < (5*N); ++i){
     b02:	00090003          	lb	zero,0(s2)
     b06:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     b08:	1d05                	addi	s10,s10,-31
     b0a:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     b0c:	0204                	addi	s1,sp,256
     b0e:	0306                	slli	t1,t1,0x1
     b10:	097f                	0x97f
     b12:	0004                	0x4
    for(i = (5*N); i < (6*N+1); ++i){
     b14:	0501                	addi	a0,a0,0
     b16:	0103060f          	0x103060f
     b1a:	0809                	addi	a6,a6,2
     b1c:	0100                	addi	s0,sp,128
     b1e:	0905                	addi	s2,s2,1
}
     b20:	0200                	addi	s0,sp,256
     b22:	0304                	addi	s1,sp,384
     b24:	0306                	slli	t1,t1,0x1
     b26:	00040907          	0x40907
     b2a:	0501                	addi	a0,a0,0
     b2c:	0011                	c.nop	4
     b2e:	0402                	c.slli64	s0
     b30:	00030603          	lb	a2,0(t1)
     b34:	0409                	addi	s0,s0,2
     b36:	0100                	addi	s0,sp,128
     b38:	1405                	addi	s0,s0,-31
     b3a:	0200                	addi	s0,sp,256
     b3c:	0304                	addi	s1,sp,384
     b3e:	04090003          	lb	zero,64(s2)
     b42:	0100                	addi	s0,sp,128
     b44:	1105                	addi	sp,sp,-31
     b46:	0200                	addi	s0,sp,256
     b48:	0304                	addi	s1,sp,384
     b4a:	02090003          	lb	zero,32(s2)
     b4e:	0100                	addi	s0,sp,128
     b50:	1c05                	addi	s8,s8,-31
     b52:	0200                	addi	s0,sp,256
     b54:	0304                	addi	s1,sp,384
     b56:	04097f03          	0x4097f03
     b5a:	0100                	addi	s0,sp,128
     b5c:	1105                	addi	sp,sp,-31
     b5e:	0200                	addi	s0,sp,256
        polyR[i] = 0;
     b60:	0304                	addi	s1,sp,384
     b62:	02090103          	lb	sp,32(s2)
     b66:	0100                	addi	s0,sp,128
     b68:	1c05                	addi	s8,s8,-31
    for(i = 1; i < N; ++i){
     b6a:	0200                	addi	s0,sp,256
     b6c:	0304                	addi	s1,sp,384
        f[i] = 0;
     b6e:	0306                	slli	t1,t1,0x1
     b70:	097f                	0x97f
     b72:	0004                	0x4
     b74:	0501                	addi	a0,a0,0
     b76:	0009                	c.nop	2
     b78:	0402                	c.slli64	s0
     b7a:	09050303          	lb	t1,144(a0)
        g[i] = 0;
     b7e:	0002                	c.slli64	zero
     b80:	0501                	addi	a0,a0,0
     b82:	0011                	c.nop	4
     b84:	0402                	c.slli64	s0
    for (i = N; i < 55; ++i ){
     b86:	00030603          	lb	a2,0(t1)
        random_keys[i] = f[i];
     b8a:	0409                	addi	s0,s0,2
     b8c:	0100                	addi	s0,sp,128
     b8e:	1405                	addi	s0,s0,-31
     b90:	0200                	addi	s0,sp,256
     b92:	0304                	addi	s1,sp,384
     b94:	04090003          	lb	zero,64(s2)
     b98:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     b9a:	1105                	addi	sp,sp,-31
        random_keys[i] = f[i];
     b9c:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     b9e:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     ba0:	02090003          	lb	zero,32(s2)
     ba4:	0100                	addi	s0,sp,128
     ba6:	1c05                	addi	s8,s8,-31
     ba8:	0200                	addi	s0,sp,256
    for(i = N; i < (2*N); ++i){
     baa:	0304                	addi	s1,sp,384
     bac:	04097f03          	0x4097f03
        random_keys[i] = fp[i-(2*N)];
     bb0:	0100                	addi	s0,sp,128
     bb2:	1105                	addi	sp,sp,-31
     bb4:	0200                	addi	s0,sp,256
     bb6:	0304                	addi	s1,sp,384
     bb8:	02090103          	lb	sp,32(s2)
    for(i = (2*N); i < (3*N); ++i){
     bbc:	0100                	addi	s0,sp,128
     bbe:	1c05                	addi	s8,s8,-31
        random_keys[i] = fq[i-(3*N)];
     bc0:	0200                	addi	s0,sp,256
     bc2:	0304                	addi	s1,sp,384
     bc4:	0306                	slli	t1,t1,0x1
     bc6:	097f                	0x97f
     bc8:	0004                	0x4
     bca:	0501                	addi	a0,a0,0
     bcc:	0011                	c.nop	4
    for(i = (3*N); i < (4*N); ++i){
     bce:	0402                	c.slli64	s0
        random_keys[i] = fq[i-(3*N)];
     bd0:	09090303          	lb	t1,144(s2)
        fg[i] = fg[i]*p;
     bd4:	0002                	c.slli64	zero
    for(i = 0; i < (2*N-1); ++i){
     bd6:	0501                	addi	a0,a0,0
     bd8:	0025                	c.nop	9
        fg[i] = fg[i]*p;
     bda:	0402                	c.slli64	s0
     bdc:	00030603          	lb	a2,0(t1)
     be0:	0409                	addi	s0,s0,2
    for(i = 0; i < (2*N-1); ++i){
     be2:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     be4:	2b05                	jal	1114 <__DTOR_END__+0x7c>
     be6:	0200                	addi	s0,sp,256
     be8:	0304                	addi	s1,sp,384
     bea:	04090003          	lb	zero,64(s2)
     bee:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     bf0:	2e05                	jal	f20 <memset+0x78>
     bf2:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     bf4:	0304                	addi	s1,sp,384
     bf6:	02090003          	lb	zero,32(s2)
     bfa:	0100                	addi	s0,sp,128
     bfc:	2a05                	jal	d2c <ntru_deceypt+0x9e>
     bfe:	0200                	addi	s0,sp,256
     c00:	0304                	addi	s1,sp,384
    for(i = (5*N); i < (6*N+1); ++i){
     c02:	06097f03          	0x6097f03
     c06:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c08:	2e05                	jal	f38 <memset+0x90>
     c0a:	0200                	addi	s0,sp,256
     c0c:	0304                	addi	s1,sp,384
     c0e:	02090103          	lb	sp,32(s2)
     c12:	0100                	addi	s0,sp,128
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c14:	2505                	jal	1234 <_bss_start+0x18>
     c16:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c18:	0304                	addi	s1,sp,384
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1a:	04090003          	lb	zero,64(s2)
     c1e:	0100                	addi	s0,sp,128
     c20:	2805                	jal	c50 <ntru_encyrpt+0x48>
     c22:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	0304                	addi	s1,sp,384
     c26:	0306                	slli	t1,t1,0x1
     c28:	097f                	0x97f
     c2a:	0002                	c.slli64	zero
     c2c:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c2e:	0020                	addi	s0,sp,8
    temp = polymult(public_key,N,random_val,48,q,0);
     c30:	0402                	c.slli64	s0
     c32:	0301                	addi	t1,t1,0
     c34:	0900                	addi	s0,sp,144
     c36:	0000                	unimp
     c38:	0501                	addi	a0,a0,0
     c3a:	000d                	c.nop	3
     c3c:	0402                	c.slli64	s0
     c3e:	0601                	addi	a2,a2,0
     c40:	00090003          	lb	zero,0(s2)
array_add(temp,message,48);
     c44:	0100                	addi	s0,sp,128
     c46:	2505                	jal	1266 <_bss_start+0x4a>
    temp = polymult(public_key,N,random_val,48,q,0);
     c48:	0200                	addi	s0,sp,256
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c4a:	0204                	addi	s1,sp,256
     c4c:	0306                	slli	t1,t1,0x1
array_add(temp,message,48);
     c4e:	097f                	0x97f
     c50:	0004                	0x4
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c52:	0501                	addi	a0,a0,0
     c54:	04020027          	0x4020027
     c58:	0602                	c.slli64	a2
     c5a:	00090003          	lb	zero,0(s2)
     c5e:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     c60:	1d05                	addi	s10,s10,-31
     c62:	0200                	addi	s0,sp,256
     c64:	0104                	addi	s1,sp,128
     c66:	0306                	slli	t1,t1,0x1
     c68:	0900                	addi	s0,sp,144
     c6a:	0006                	c.slli	zero,0x1
}
     c6c:	0501                	addi	a0,a0,0
     c6e:	0009                	c.nop	2
     c70:	0402                	c.slli64	s0
     c72:	0601                	addi	a2,a2,0
     c74:	00090003          	lb	zero,0(s2)
     c78:	0100                	addi	s0,sp,128
     c7a:	1405                	addi	s0,s0,-31
        CT[i-(2*N)] = CT[i];
     c7c:	04090803          	lb	a6,64(s2)
     c80:	0100                	addi	s0,sp,128
     c82:	0905                	addi	s2,s2,1
    for(i = (2*N); i < (3*N); ++i){
     c84:	02090a03          	lb	s4,32(s2)
        CT[i-(2*N)] = CT[i];
     c88:	0100                	addi	s0,sp,128
     c8a:	0d05                	addi	s10,s10,1
    for(i = (2*N); i < (3*N); ++i){
     c8c:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c8e:	0104                	addi	s1,sp,128
     c90:	0306                	slli	t1,t1,0x1
     c92:	097d                	addi	s2,s2,31
     c94:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     c96:	0501                	addi	a0,a0,0
     c98:	0005                	c.nop	1
     c9a:	0402                	c.slli64	s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c9c:	0601                	addi	a2,a2,0
     c9e:	00090003          	lb	zero,0(s2)
     ca2:	0100                	addi	s0,sp,128
     ca4:	0306                	slli	t1,t1,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ca6:	00040907          	0x40907
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     caa:	0301                	addi	t1,t1,0
     cac:	0902                	c.slli64	s2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cae:	0000                	unimp
     cb0:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb2:	0601                	addi	a2,a2,0
     cb4:	00090103          	lb	sp,0(s2)
     cb8:	0100                	addi	s0,sp,128
     cba:	1405                	addi	s0,s0,-31
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cbc:	20096803          	0x20096803
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc0:	0100                	addi	s0,sp,128
     cc2:	1105                	addi	sp,sp,-31
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cc4:	0200                	addi	s0,sp,256
     cc6:	0304                	addi	s1,sp,384
     cc8:	0306                	slli	t1,t1,0x1
     cca:	0908                	addi	a0,sp,144
     ccc:	0004                	0x4
     cce:	0501                	addi	a0,a0,0
     cd0:	0029                	c.nop	10
     cd2:	0402                	c.slli64	s0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd4:	00030603          	lb	a2,0(t1)
     cd8:	0409                	addi	s0,s0,2
     cda:	0100                	addi	s0,sp,128
     cdc:	2f05                	jal	140c <_bss_start+0x1f0>
        if(a2[i] <= q/2)
     cde:	0200                	addi	s0,sp,256
     ce0:	0304                	addi	s1,sp,384
     ce2:	04090003          	lb	zero,64(s2)
    for (i = 0; i < N; ++i){
     ce6:	0100                	addi	s0,sp,128
     ce8:	3205                	jal	608 <polydiv+0x128>
    c = polymult2(secret_key_fp,N,a2,N,0);
     cea:	0200                	addi	s0,sp,256
     cec:	0304                	addi	s1,sp,384
     cee:	02090003          	lb	zero,32(s2)
     cf2:	0100                	addi	s0,sp,128
     cf4:	2a05                	jal	e24 <memcpy+0x5a>
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     cf6:	0200                	addi	s0,sp,256
     cf8:	0304                	addi	s1,sp,384
     cfa:	06097f03          	0x6097f03
     cfe:	0100                	addi	s0,sp,128
     d00:	3205                	jal	620 <polydiv+0x140>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	0200                	addi	s0,sp,256
     d04:	0304                	addi	s1,sp,384
     d06:	02090103          	lb	sp,32(s2)
}
     d0a:	0100                	addi	s0,sp,128
     d0c:	2905                	jal	113c <__DTOR_END__+0xa4>
     d0e:	0200                	addi	s0,sp,256
     d10:	0304                	addi	s1,sp,384
     d12:	04090003          	lb	zero,64(s2)
     d16:	0100                	addi	s0,sp,128
     d18:	2805                	jal	d48 <ntru_deceypt+0xba>
     d1a:	0200                	addi	s0,sp,256
     d1c:	0304                	addi	s1,sp,384
        a2[i-(2*N)] = a2[i];
     d1e:	0306                	slli	t1,t1,0x1
     d20:	097f                	0x97f
     d22:	0004                	0x4
     d24:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d26:	0020                	addi	s0,sp,8
     d28:	0402                	c.slli64	s0
        a2[i-(2*N)] = a2[i];
     d2a:	0301                	addi	t1,t1,0
     d2c:	0900                	addi	s0,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     d2e:	0000                	unimp
        if(a2[i] <= q/2)
     d30:	0501                	addi	a0,a0,0
     d32:	000d                	c.nop	3
     d34:	0402                	c.slli64	s0
            a2[i] = (-1)*(q-a2[i]);
     d36:	0601                	addi	a2,a2,0
     d38:	00090003          	lb	zero,0(s2)
    for (i = 0; i < N; ++i){
     d3c:	0100                	addi	s0,sp,128
     d3e:	2505                	jal	135e <_bss_start+0x142>
     d40:	0200                	addi	s0,sp,256
        c2[i-(2*N)] = c2[i];
     d42:	0204                	addi	s1,sp,256
     d44:	0306                	slli	t1,t1,0x1
     d46:	097f                	0x97f
     d48:	0004                	0x4
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4a:	0501                	addi	a0,a0,0
     d4c:	04020027          	0x4020027
        c2[i-(2*N)] = c2[i];
     d50:	0602                	c.slli64	a2
    for(i = (2*N); i < ((2*N)+N); ++i){
     d52:	00090003          	lb	zero,0(s2)
  jal x0, default_exc_handler
     d56:	0100                	addi	s0,sp,128
  mv  x1, x0
     d58:	0905                	addi	s2,s2,1
     d5a:	0200                	addi	s0,sp,256
  mv  x2, x1
     d5c:	0304                	addi	s1,sp,384
  mv  x3, x1
     d5e:	0306                	slli	t1,t1,0x1
  mv  x4, x1
     d60:	0008090b          	0x8090b
  mv  x6, x1
     d64:	0501                	addi	a0,a0,0
  mv  x7, x1
     d66:	0016                	c.slli	zero,0x5
  mv  x8, x1
     d68:	0402                	c.slli64	s0
  mv  x9, x1
     d6a:	097d0303          	lb	t1,151(s10)
  mv x11, x1
     d6e:	0008                	0x8
  mv x12, x1
     d70:	0501                	addi	a0,a0,0
  mv x13, x1
     d72:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
  mv x15, x1
     d76:	0006                	c.slli	zero,0x1
  mv x16, x1
     d78:	0501                	addi	a0,a0,0
  mv x17, x1
     d7a:	0305                	addi	t1,t1,1
  mv x18, x1
     d7c:	0902                	c.slli64	s2
  mv x19, x1
     d7e:	0000                	unimp
  mv x20, x1
     d80:	0301                	addi	t1,t1,0
  mv x21, x1
     d82:	0901                	addi	s2,s2,0
  mv x22, x1
     d84:	0000                	unimp
  mv x23, x1
     d86:	0301                	addi	t1,t1,0
  mv x24, x1
     d88:	0902                	c.slli64	s2
  mv x25, x1
     d8a:	0000                	unimp
  mv x26, x1
     d8c:	0501                	addi	a0,a0,0
  mv x27, x1
     d8e:	0609                	addi	a2,a2,2
  mv x28, x1
     d90:	00090003          	lb	zero,0(s2)
  mv x30, x1
     d94:	0100                	addi	s0,sp,128
  mv x31, x1
     d96:	4305                	li	t1,1
  la   x2, _stack_start
     d98:	04097b03          	0x4097b03
     d9c:	0100                	addi	s0,sp,128
     d9e:	0905                	addi	s2,s2,1
  la x26, _bss_start
     da0:	02090503          	lb	a0,32(s2)
     da4:	0100                	addi	s0,sp,128
     da6:	4305                	li	t1,1
  la x27, _bss_end
     da8:	04097b03          	0x4097b03
     dac:	0100                	addi	s0,sp,128
     dae:	0905                	addi	s2,s2,1
  bge x26, x27, zero_loop_end
     db0:	1c090503          	lb	a0,448(s2)
  sw x0, 0(x26)
     db4:	0100                	addi	s0,sp,128
     db6:	06090103          	lb	sp,96(s2)
  ble x26, x27, zero_loop
     dba:	0100                	addi	s0,sp,128
     dbc:	06090203          	lb	tp,96(s2)
  addi x10, x0, 0
     dc0:	0100                	addi	s0,sp,128
  addi x11, x0, 0
     dc2:	04090103          	lb	sp,64(s2)
  jal x1, main
     dc6:	0100                	addi	s0,sp,128
     dc8:	08097f03          	0x8097f03
     dcc:	0100                	addi	s0,sp,128
     dce:	02090103          	lb	sp,32(s2)
     dd2:	0100                	addi	s0,sp,128
     dd4:	4305                	li	t1,1
     dd6:	04097703          	0x4097703
     dda:	0100                	addi	s0,sp,128
     ddc:	0905                	addi	s2,s2,1
     dde:	08090503          	lb	a0,128(s2)
     de2:	0100                	addi	s0,sp,128
     de4:	0505                	addi	a0,a0,1
     de6:	0306                	slli	t1,t1,0x1
     de8:	0901                	addi	s2,s2,0
     dea:	0004                	0x4
     dec:	0301                	addi	t1,t1,0
     dee:	0901                	addi	s2,s2,0
     df0:	0000                	unimp
     df2:	0301                	addi	t1,t1,0
     df4:	0901                	addi	s2,s2,0
     df6:	0000                	unimp
     df8:	0301                	addi	t1,t1,0
     dfa:	0901                	addi	s2,s2,0
     dfc:	0000                	unimp
     dfe:	0501                	addi	a0,a0,0
     e00:	0609                	addi	a2,a2,2
     e02:	00090003          	lb	zero,0(s2)
     e06:	0100                	addi	s0,sp,128
     e08:	0505                	addi	a0,a0,1
     e0a:	0306                	slli	t1,t1,0x1
     e0c:	0904                	addi	s1,sp,144
     e0e:	0006                	c.slli	zero,0x1
     e10:	0501                	addi	a0,a0,0
     e12:	060c                	addi	a1,sp,768
     e14:	00090003          	lb	zero,0(s2)
     e18:	0100                	addi	s0,sp,128
     e1a:	1105                	addi	sp,sp,-31
     e1c:	0200                	addi	s0,sp,256
     e1e:	0104                	addi	s1,sp,128
     e20:	0306                	slli	t1,t1,0x1
     e22:	0900                	addi	s0,sp,144
     e24:	0002                	c.slli64	zero
     e26:	0501                	addi	a0,a0,0
     e28:	0005                	c.nop	1
     e2a:	0402                	c.slli64	s0
     e2c:	0601                	addi	a2,a2,0
     e2e:	00090003          	lb	zero,0(s2)
     e32:	0100                	addi	s0,sp,128
     e34:	0306                	slli	t1,t1,0x1
     e36:	0905                	addi	s2,s2,1
     e38:	0004                	0x4
     e3a:	0301                	addi	t1,t1,0
     e3c:	0904                	addi	s1,sp,144
     e3e:	0008                	0x8
     e40:	0501                	addi	a0,a0,0
     e42:	060c                	addi	a1,sp,768
     e44:	00090003          	lb	zero,0(s2)
     e48:	0100                	addi	s0,sp,128
     e4a:	1105                	addi	sp,sp,-31
     e4c:	0200                	addi	s0,sp,256
     e4e:	0104                	addi	s1,sp,128
     e50:	0306                	slli	t1,t1,0x1
     e52:	0900                	addi	s0,sp,144
     e54:	0002                	c.slli64	zero
     e56:	0501                	addi	a0,a0,0
     e58:	0005                	c.nop	1
     e5a:	0402                	c.slli64	s0
     e5c:	0601                	addi	a2,a2,0
     e5e:	00090003          	lb	zero,0(s2)
     e62:	0100                	addi	s0,sp,128
     e64:	0306                	slli	t1,t1,0x1
     e66:	0904                	addi	s1,sp,144
     e68:	0004                	0x4
     e6a:	0301                	addi	t1,t1,0
     e6c:	0902                	c.slli64	s2
     e6e:	0008                	0x8
     e70:	0501                	addi	a0,a0,0
     e72:	060c                	addi	a1,sp,768
     e74:	00090003          	lb	zero,0(s2)
     e78:	0100                	addi	s0,sp,128
     e7a:	1105                	addi	sp,sp,-31
     e7c:	0200                	addi	s0,sp,256
     e7e:	0104                	addi	s1,sp,128
     e80:	0306                	slli	t1,t1,0x1
     e82:	0900                	addi	s0,sp,144
     e84:	0002                	c.slli64	zero
     e86:	0501                	addi	a0,a0,0
     e88:	0005                	c.nop	1
     e8a:	0402                	c.slli64	s0
     e8c:	0601                	addi	a2,a2,0
     e8e:	00090003          	lb	zero,0(s2)
     e92:	0100                	addi	s0,sp,128
     e94:	1805                	addi	a6,a6,-31
     e96:	0200                	addi	s0,sp,256
     e98:	0104                	addi	s1,sp,128
     e9a:	0306                	slli	t1,t1,0x1
     e9c:	0906                	slli	s2,s2,0x1
     e9e:	0004                	0x4
     ea0:	0501                	addi	a0,a0,0
     ea2:	0005                	c.nop	1
     ea4:	0402                	c.slli64	s0
     ea6:	0601                	addi	a2,a2,0
     ea8:	08090003          	lb	zero,128(s2)
     eac:	0100                	addi	s0,sp,128
     eae:	0c05                	addi	s8,s8,1
     eb0:	0200                	addi	s0,sp,256
     eb2:	0104                	addi	s1,sp,128
     eb4:	04097a03          	0x4097a03
     eb8:	0100                	addi	s0,sp,128
     eba:	0200                	addi	s0,sp,256
     ebc:	0104                	addi	s1,sp,128
     ebe:	04090f03          	lb	t5,64(s2)
     ec2:	0100                	addi	s0,sp,128
     ec4:	1105                	addi	sp,sp,-31
     ec6:	0200                	addi	s0,sp,256
     ec8:	0104                	addi	s1,sp,128
     eca:	0306                	slli	t1,t1,0x1
     ecc:	097f                	0x97f
     ece:	0002                	c.slli64	zero
     ed0:	0501                	addi	a0,a0,0
     ed2:	0005                	c.nop	1
     ed4:	0402                	c.slli64	s0
     ed6:	0601                	addi	a2,a2,0
     ed8:	00090003          	lb	zero,0(s2)
     edc:	0100                	addi	s0,sp,128
     ede:	0905                	addi	s2,s2,1
     ee0:	0200                	addi	s0,sp,256
     ee2:	0304                	addi	s1,sp,384
     ee4:	0306                	slli	t1,t1,0x1
     ee6:	0964                	addi	s1,sp,156
     ee8:	0008                	0x8
     eea:	0501                	addi	a0,a0,0
     eec:	0015                	c.nop	5
     eee:	0402                	c.slli64	s0
     ef0:	00030603          	lb	a2,0(t1)
     ef4:	0409                	addi	s0,s0,2
     ef6:	0100                	addi	s0,sp,128
     ef8:	1a05                	addi	s4,s4,-31
     efa:	0200                	addi	s0,sp,256
     efc:	0304                	addi	s1,sp,384
     efe:	04090003          	lb	zero,64(s2)
     f02:	0100                	addi	s0,sp,128
     f04:	1505                	addi	a0,a0,-31
     f06:	0200                	addi	s0,sp,256
     f08:	0304                	addi	s1,sp,384
     f0a:	02090003          	lb	zero,32(s2)
     f0e:	0100                	addi	s0,sp,128
     f10:	1d05                	addi	s10,s10,-31
     f12:	0200                	addi	s0,sp,256
     f14:	0304                	addi	s1,sp,384
     f16:	02097f03          	0x2097f03
     f1a:	0100                	addi	s0,sp,128
     f1c:	1505                	addi	a0,a0,-31
     f1e:	0200                	addi	s0,sp,256
     f20:	0304                	addi	s1,sp,384
     f22:	02090103          	lb	sp,32(s2)
     f26:	0100                	addi	s0,sp,128
     f28:	1d05                	addi	s10,s10,-31
     f2a:	0200                	addi	s0,sp,256
     f2c:	0304                	addi	s1,sp,384
     f2e:	0306                	slli	t1,t1,0x1
     f30:	097f                	0x97f
     f32:	0002                	c.slli64	zero
     f34:	0501                	addi	a0,a0,0
     f36:	0009                	c.nop	2
     f38:	0402                	c.slli64	s0
     f3a:	090a0303          	lb	t1,144(s4)
     f3e:	0002                	c.slli64	zero
     f40:	0501                	addi	a0,a0,0
     f42:	04020017          	auipc	zero,0x4020
     f46:	00030603          	lb	a2,0(t1)
     f4a:	0409                	addi	s0,s0,2
     f4c:	0100                	addi	s0,sp,128
     f4e:	1e05                	addi	t3,t3,-31
int main(){
     f50:	0200                	addi	s0,sp,256
     f52:	0304                	addi	s1,sp,384
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f54:	04090003          	lb	zero,64(s2)
     f58:	0100                	addi	s0,sp,128
     f5a:	1705                	addi	a4,a4,-31
     f5c:	0200                	addi	s0,sp,256
     f5e:	0304                	addi	s1,sp,384
     f60:	02090003          	lb	zero,32(s2)
int main(){
     f64:	0100                	addi	s0,sp,128
     f66:	1d05                	addi	s10,s10,-31
     f68:	0200                	addi	s0,sp,256
     f6a:	0304                	addi	s1,sp,384
     f6c:	02097f03          	0x2097f03
     f70:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
     f72:	1705                	addi	a4,a4,-31
     f74:	0200                	addi	s0,sp,256
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f76:	0304                	addi	s1,sp,384
    resultkon[0] = 0xaaaaaaa0;
     f78:	02090103          	lb	sp,32(s2)
     f7c:	0100                	addi	s0,sp,128
     f7e:	1d05                	addi	s10,s10,-31
     f80:	0200                	addi	s0,sp,256
     f82:	0304                	addi	s1,sp,384
    keys = generate_keys(N, p, q);
     f84:	0306                	slli	t1,t1,0x1
     f86:	097f                	0x97f
     f88:	0002                	c.slli64	zero
     f8a:	0501                	addi	a0,a0,0
     f8c:	0009                	c.nop	2
    resultkon[0] = 0xaaaaaaa0;
     f8e:	0402                	c.slli64	s0
    resultkon[0] = 0xaaaaaaa1;
     f90:	09070303          	lb	t1,144(a4)
    keys = generate_keys(N, p, q);
     f94:	0002                	c.slli64	zero
    resultkon[0] = 0xaaaaaaa1;
     f96:	0501                	addi	a0,a0,0
     f98:	000e                	c.slli	zero,0x3
    for(i = 0; i < N; ++i){
     f9a:	0402                	c.slli64	s0
     f9c:	00030603          	lb	a2,0(t1)
        secret_key_f[i] = keys[i];
     fa0:	0409                	addi	s0,s0,2
     fa2:	0100                	addi	s0,sp,128
     fa4:	0200                	addi	s0,sp,256
     fa6:	0304                	addi	s1,sp,384
     fa8:	04090103          	lb	sp,64(s2)
    for(i = 0; i < N; ++i){
     fac:	0100                	addi	s0,sp,128
     fae:	0200                	addi	s0,sp,256
    for(i = N; i < (2*N); ++i){
     fb0:	0304                	addi	s1,sp,384
     fb2:	02097f03          	0x2097f03
     fb6:	0100                	addi	s0,sp,128
     fb8:	0905                	addi	s2,s2,1
     fba:	0200                	addi	s0,sp,256
        secret_key_fp[i-(2*N)] = keys[i];
     fbc:	0304                	addi	s1,sp,384
     fbe:	0306                	slli	t1,t1,0x1
     fc0:	0901                	addi	s2,s2,0
     fc2:	0004                	0x4
     fc4:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     fc6:	000e                	c.slli	zero,0x3
     fc8:	0402                	c.slli64	s0
    for(i = (3*N); i < (4*N); ++i){
     fca:	00030603          	lb	a2,0(t1)
     fce:	0009                	c.nop	2
     fd0:	0100                	addi	s0,sp,128
     fd2:	1d05                	addi	s10,s10,-31
     fd4:	0200                	addi	s0,sp,256
        public_key[i-(4*N)] = keys[i];
     fd6:	0304                	addi	s1,sp,384
     fd8:	0306                	slli	t1,t1,0x1
     fda:	097e                	slli	s2,s2,0x1f
     fdc:	0004                	0x4
     fde:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     fe0:	0309                	addi	t1,t1,2
     fe2:	00040907          	0x40907
     fe6:	0501                	addi	a0,a0,0
     fe8:	0003060b          	0x3060b
        ring_poly[i-(5*N)] = keys[i];
     fec:	0009                	c.nop	2
     fee:	0100                	addi	s0,sp,128
     ff0:	2005                	jal	1010 <main+0xc0>
     ff2:	0200                	addi	s0,sp,256
     ff4:	0204                	addi	s1,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     ff6:	0306                	slli	t1,t1,0x1
     ff8:	097f                	0x97f
    resultkon[0] = 0xbbbbbbb0;
     ffa:	0002                	c.slli64	zero
     ffc:	0501                	addi	a0,a0,0
     ffe:	0022                	c.slli	zero,0x8
    1000:	0402                	c.slli64	s0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1002:	0602                	c.slli64	a2
    1004:	00090003          	lb	zero,0(s2)
    1008:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb1;
    100a:	0905                	addi	s2,s2,1
    100c:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    100e:	0909                	addi	s2,s2,2
    1010:	0004                	0x4
    resultkon[0] = 0xbbbbbbb0;
    1012:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1014:	0615                	addi	a2,a2,5
    resultkon[0] = 0xbbbbbbb1;
    1016:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xccccccc0;
    101a:	0100                	addi	s0,sp,128
    101c:	0c05                	addi	s8,s8,1
    101e:	06090003          	lb	zero,96(s2)
    1022:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1024:	1a05                	addi	s4,s4,-31
    1026:	0200                	addi	s0,sp,256
    1028:	0204                	addi	s1,sp,256
    102a:	0306                	slli	t1,t1,0x1
    102c:	097f                	0x97f
    102e:	0004                	0x4
    1030:	0501                	addi	a0,a0,0
    1032:	0309                	addi	t1,t1,2
    1034:	00040907          	0x40907
    resultkon[0] = 0xccccccc1;	
    1038:	0501                	addi	a0,a0,0
    103a:	0003060b          	0x3060b
            resultkon[0] = 0xDEDEDEDE;
    103e:	0009                	c.nop	2
    resultkon[0] = 0xccccccc1;	
    1040:	0100                	addi	s0,sp,128
    1042:	2005                	jal	1062 <main+0x112>
            resultkon[0] = 0xDEDEDEDE;
    1044:	0200                	addi	s0,sp,256
    1046:	0204                	addi	s1,sp,256
    for(i = 0; i < 32; ++i){
    1048:	0306                	slli	t1,t1,0x1
    104a:	097f                	0x97f
        if(!(message[i] == Dec_Message[i])){
    104c:	0002                	c.slli64	zero
    104e:	0501                	addi	a0,a0,0
    1050:	0022                	c.slli	zero,0x8
    1052:	0402                	c.slli64	s0
    1054:	0602                	c.slli64	a2
    1056:	00090003          	lb	zero,0(s2)
    105a:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    105c:	1805                	addi	a6,a6,-31
    105e:	0200                	addi	s0,sp,256
    1060:	0104                	addi	s1,sp,128
    1062:	0306                	slli	t1,t1,0x1
    1064:	0900                	addi	s0,sp,144
}
    1066:	0002                	c.slli64	zero
    1068:	0501                	addi	a0,a0,0
    106a:	0005                	c.nop	1
    106c:	0402                	c.slli64	s0
    106e:	0601                	addi	a2,a2,0
    1070:	08090003          	lb	zero,128(s2)
    1074:	0100                	addi	s0,sp,128
    1076:	0b05                	addi	s6,s6,1
    1078:	0306                	slli	t1,t1,0x1
    107a:	090c                	addi	a1,sp,144
    107c:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
    107e:	0601                	addi	a2,a2,0
    for(i = 0; i < 32; ++i){
    1080:	0900cb03          	lbu	s6,144(ra)
    1084:	0004                	0x4
    1086:	0501                	addi	a0,a0,0
    1088:	09010313          	addi	t1,sp,144
    108c:	0002                	c.slli64	zero
    108e:	0501                	addi	a0,a0,0
    1090:	0010                	0x10
    1092:	0402                	c.slli64	s0
    1094:	0601                	addi	a2,a2,0
    1096:	08097f03          	0x8097f03
    109a:	0100                	addi	s0,sp,128
    109c:	0505                	addi	a0,a0,1
    109e:	0200                	addi	s0,sp,256
    10a0:	0104                	addi	s1,sp,128
    10a2:	0306                	slli	t1,t1,0x1
    10a4:	0900                	addi	s0,sp,144
    10a6:	0000                	unimp
    10a8:	0501                	addi	a0,a0,0
    10aa:	0905031b          	0x905031b
    10ae:	0004                	0x4
    10b0:	0501                	addi	a0,a0,0
    10b2:	09010313          	addi	t1,sp,144
    10b6:	0004                	0x4
    10b8:	0501                	addi	a0,a0,0
    10ba:	0015                	c.nop	5
    10bc:	0402                	c.slli64	s0
    10be:	0601                	addi	a2,a2,0
    10c0:	08097f03          	0x8097f03
    10c4:	0100                	addi	s0,sp,128
    10c6:	0505                	addi	a0,a0,1
    10c8:	0200                	addi	s0,sp,256
    10ca:	0104                	addi	s1,sp,128
    10cc:	0306                	slli	t1,t1,0x1
    10ce:	0900                	addi	s0,sp,144
    10d0:	0000                	unimp
    10d2:	0601                	addi	a2,a2,0
    10d4:	04090403          	lb	s0,64(s2)
    10d8:	0100                	addi	s0,sp,128
    10da:	00090203          	lb	tp,0(s2)
    10de:	0100                	addi	s0,sp,128
    10e0:	0105                	addi	sp,sp,1
    10e2:	0306                	slli	t1,t1,0x1
    10e4:	0901                	addi	s2,s2,0
    10e6:	0000                	unimp
    10e8:	0501                	addi	a0,a0,0
    10ea:	0609                	addi	a2,a2,2
    10ec:	097fac03          	lw	s8,151(t6)
    10f0:	002a                	c.slli	zero,0xa
    10f2:	0501                	addi	a0,a0,0
    10f4:	0616                	slli	a2,a2,0x5
    10f6:	00090003          	lb	zero,0(s2)
    10fa:	0100                	addi	s0,sp,128
    10fc:	0d05                	addi	s10,s10,1
    10fe:	04090003          	lb	zero,64(s2)
    1102:	0100                	addi	s0,sp,128
    1104:	1305                	addi	t1,t1,-31
    1106:	04090003          	lb	zero,64(s2)
    110a:	0100                	addi	s0,sp,128
    110c:	0905                	addi	s2,s2,1
    110e:	04090703          	lb	a4,64(s2)
    1112:	0100                	addi	s0,sp,128
    1114:	1305                	addi	t1,t1,-31
    1116:	06097903          	0x6097903
    111a:	0100                	addi	s0,sp,128
    111c:	0905                	addi	s2,s2,1
    111e:	0306                	slli	t1,t1,0x1
    1120:	00020907          	0x20907
    1124:	0301                	addi	t1,t1,0
    1126:	0904                	addi	s1,sp,144
    1128:	0002                	c.slli64	zero
    112a:	0501                	addi	a0,a0,0
    112c:	00030613          	mv	a2,t1
    1130:	0009                	c.nop	2
    1132:	0100                	addi	s0,sp,128
    1134:	0a05                	addi	s4,s4,1
    1136:	0e090a03          	lb	s4,224(s2)
    113a:	0100                	addi	s0,sp,128
    113c:	1305                	addi	t1,t1,-31
    113e:	04097603          	0x4097603
    1142:	0100                	addi	s0,sp,128
    1144:	0a05                	addi	s4,s4,1
    1146:	0306                	slli	t1,t1,0x1
    1148:	090a                	slli	s2,s2,0x2
    114a:	0002                	c.slli64	zero
    114c:	0501                	addi	a0,a0,0
    114e:	0309                	addi	t1,t1,2
    1150:	0904                	addi	s1,sp,144
    1152:	0002                	c.slli64	zero
    1154:	0501                	addi	a0,a0,0
    1156:	0610                	addi	a2,sp,768
    1158:	02090003          	lb	zero,32(s2)
    115c:	0100                	addi	s0,sp,128
    115e:	1505                	addi	a0,a0,-31
    1160:	0200                	addi	s0,sp,256
    1162:	0104                	addi	s1,sp,128
    1164:	0306                	slli	t1,t1,0x1
    1166:	0900                	addi	s0,sp,144
    1168:	0002                	c.slli64	zero
    116a:	0501                	addi	a0,a0,0
    116c:	0009                	c.nop	2
    116e:	0402                	c.slli64	s0
    1170:	0601                	addi	a2,a2,0
    1172:	00090003          	lb	zero,0(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	0a05                	addi	s4,s4,1
    117a:	0306                	slli	t1,t1,0x1
    117c:	090d                	addi	s2,s2,3
    117e:	0004                	0x4
    1180:	0501                	addi	a0,a0,0
    1182:	0309                	addi	t1,t1,2
    1184:	090a                	slli	s2,s2,0x2
    1186:	0008                	0x8
    1188:	0301                	addi	t1,t1,0
    118a:	0905                	addi	s2,s2,1
    118c:	0008                	0x8
    118e:	0301                	addi	t1,t1,0
    1190:	0904                	addi	s1,sp,144
    1192:	0008                	0x8
    1194:	0501                	addi	a0,a0,0
    1196:	0610                	addi	a2,sp,768
    1198:	00090003          	lb	zero,0(s2)
    119c:	0100                	addi	s0,sp,128
    119e:	1c05                	addi	s8,s8,-31
    11a0:	0200                	addi	s0,sp,256
    11a2:	0104                	addi	s1,sp,128
    11a4:	0306                	slli	t1,t1,0x1
    11a6:	0900                	addi	s0,sp,144
    11a8:	0002                	c.slli64	zero
    11aa:	0501                	addi	a0,a0,0
    11ac:	0009                	c.nop	2
    11ae:	0402                	c.slli64	s0
    11b0:	0601                	addi	a2,a2,0
    11b2:	08090003          	lb	zero,128(s2)
    11b6:	0100                	addi	s0,sp,128
    11b8:	0d05                	addi	s10,s10,1
    11ba:	0200                	addi	s0,sp,256
    11bc:	0304                	addi	s1,sp,384
    11be:	0306                	slli	t1,t1,0x1
    11c0:	0961                	addi	s2,s2,24
    11c2:	0008                	0x8
    11c4:	0501                	addi	a0,a0,0
    11c6:	0030                	addi	a2,sp,8
    11c8:	0402                	c.slli64	s0
    11ca:	00030603          	lb	a2,0(t1)
    11ce:	0009                	c.nop	2
    11d0:	0100                	addi	s0,sp,128
    11d2:	2705                	jal	18f2 <result+0x226>
    11d4:	0200                	addi	s0,sp,256
    11d6:	0304                	addi	s1,sp,384
    11d8:	06090003          	lb	zero,96(s2)
    11dc:	0100                	addi	s0,sp,128
    11de:	2105                	jal	15fe <product2+0x18a>
    11e0:	0200                	addi	s0,sp,256
    11e2:	0304                	addi	s1,sp,384
    11e4:	04097f03          	0x4097f03
    11e8:	0100                	addi	s0,sp,128
    11ea:	2705                	jal	190a <result+0x23e>
    11ec:	0200                	addi	s0,sp,256
    11ee:	0304                	addi	s1,sp,384
    11f0:	04090103          	lb	sp,64(s2)
    11f4:	0100                	addi	s0,sp,128
    11f6:	1905                	addi	s2,s2,-31
    11f8:	0200                	addi	s0,sp,256
    11fa:	0304                	addi	s1,sp,384
    11fc:	02090003          	lb	zero,32(s2)
    1200:	0100                	addi	s0,sp,128
    1202:	2105                	jal	1622 <product2+0x1ae>
    1204:	0200                	addi	s0,sp,256
    1206:	0304                	addi	s1,sp,384
    1208:	0306                	slli	t1,t1,0x1
    120a:	097f                	0x97f
    120c:	0004                	0x4
    120e:	0501                	addi	a0,a0,0
    1210:	030d                	addi	t1,t1,3
    1212:	0921                	addi	s2,s2,8
    1214:	0002                	c.slli64	zero
    1216:	0501                	addi	a0,a0,0
    1218:	0003060f          	0x3060f
    121c:	0009                	c.nop	2
    121e:	0100                	addi	s0,sp,128
    1220:	2405                	jal	1440 <_bss_start+0x224>
    1222:	0200                	addi	s0,sp,256
    1224:	0204                	addi	s1,sp,256
    1226:	0306                	slli	t1,t1,0x1
    1228:	097f                	0x97f
    122a:	0002                	c.slli64	zero
    122c:	0501                	addi	a0,a0,0
    122e:	0026                	c.slli	zero,0x9
    1230:	0402                	c.slli64	s0
    1232:	0602                	c.slli64	a2
    1234:	00090003          	lb	zero,0(s2)
    1238:	0100                	addi	s0,sp,128
    123a:	0d05                	addi	s10,s10,1
    123c:	0200                	addi	s0,sp,256
    123e:	0304                	addi	s1,sp,384
    1240:	0306                	slli	t1,t1,0x1
    1242:	0909                	addi	s2,s2,2
    1244:	0004                	0x4
    1246:	0501                	addi	a0,a0,0
    1248:	0012                	c.slli	zero,0x4
    124a:	0402                	c.slli64	s0
    124c:	00030603          	lb	a2,0(t1)
    1250:	0009                	c.nop	2
    1252:	0100                	addi	s0,sp,128
    1254:	2105                	jal	1674 <product2+0x200>
    1256:	0200                	addi	s0,sp,256
    1258:	0304                	addi	s1,sp,384
    125a:	0306                	slli	t1,t1,0x1
    125c:	097f                	0x97f
    125e:	000a                	c.slli	zero,0x2
    1260:	0501                	addi	a0,a0,0
    1262:	0015                	c.nop	5
    1264:	0402                	c.slli64	s0
    1266:	0301                	addi	t1,t1,0
    1268:	0900                	addi	s0,sp,144
    126a:	0002                	c.slli64	zero
    126c:	0501                	addi	a0,a0,0
    126e:	0009                	c.nop	2
    1270:	0402                	c.slli64	s0
    1272:	0601                	addi	a2,a2,0
    1274:	00090003          	lb	zero,0(s2)
    1278:	0100                	addi	s0,sp,128
    127a:	0200                	addi	s0,sp,256
    127c:	0304                	addi	s1,sp,384
    127e:	0306                	slli	t1,t1,0x1
    1280:	0908                	addi	a0,sp,144
    1282:	0006                	c.slli	zero,0x1
    1284:	0501                	addi	a0,a0,0
    1286:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    128a:	00030603          	lb	a2,0(t1)
    128e:	0409                	addi	s0,s0,2
    1290:	0100                	addi	s0,sp,128
    1292:	1605                	addi	a2,a2,-31
    1294:	0200                	addi	s0,sp,256
    1296:	0304                	addi	s1,sp,384
    1298:	04090003          	lb	zero,64(s2)
    129c:	0100                	addi	s0,sp,128
    129e:	1305                	addi	t1,t1,-31
    12a0:	0200                	addi	s0,sp,256
    12a2:	0304                	addi	s1,sp,384
    12a4:	02090003          	lb	zero,32(s2)
    12a8:	0100                	addi	s0,sp,128
    12aa:	1c05                	addi	s8,s8,-31
    12ac:	0200                	addi	s0,sp,256
    12ae:	0304                	addi	s1,sp,384
    12b0:	02097f03          	0x2097f03
    12b4:	0100                	addi	s0,sp,128
    12b6:	1305                	addi	t1,t1,-31
    12b8:	0200                	addi	s0,sp,256
    12ba:	0304                	addi	s1,sp,384
    12bc:	02090103          	lb	sp,32(s2)
    12c0:	0100                	addi	s0,sp,128
    12c2:	1c05                	addi	s8,s8,-31
    12c4:	0200                	addi	s0,sp,256
    12c6:	0304                	addi	s1,sp,384
    12c8:	0306                	slli	t1,t1,0x1
    12ca:	097f                	0x97f
    12cc:	0002                	c.slli64	zero
    12ce:	0501                	addi	a0,a0,0
    12d0:	0009                	c.nop	2
    12d2:	0402                	c.slli64	s0
    12d4:	09060303          	lb	t1,144(a2)
    12d8:	0002                	c.slli64	zero
    12da:	0501                	addi	a0,a0,0
    12dc:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    12e0:	00030603          	lb	a2,0(t1)
    12e4:	0009                	c.nop	2
    12e6:	0100                	addi	s0,sp,128
    12e8:	2505                	jal	1908 <result+0x23c>
    12ea:	0200                	addi	s0,sp,256
    12ec:	0304                	addi	s1,sp,384
    12ee:	0306                	slli	t1,t1,0x1
    12f0:	097f                	0x97f
    12f2:	000c                	0xc
    12f4:	0501                	addi	a0,a0,0
    12f6:	033c                	addi	a5,sp,392
    12f8:	090a                	slli	s2,s2,0x2
    12fa:	0006                	c.slli	zero,0x1
    12fc:	0501                	addi	a0,a0,0
    12fe:	0305                	addi	t1,t1,1
    1300:	0902                	c.slli64	s2
    1302:	0000                	unimp
    1304:	0301                	addi	t1,t1,0
    1306:	0901                	addi	s2,s2,0
    1308:	0000                	unimp
    130a:	0301                	addi	t1,t1,0
    130c:	0901                	addi	s2,s2,0
    130e:	0000                	unimp
    1310:	0501                	addi	a0,a0,0
    1312:	0609                	addi	a2,a2,2
    1314:	00090003          	lb	zero,0(s2)
    1318:	0100                	addi	s0,sp,128
    131a:	3c05                	jal	d4a <ntru_deceypt+0xbc>
    131c:	04097c03          	0x4097c03
    1320:	0100                	addi	s0,sp,128
    1322:	0905                	addi	s2,s2,1
    1324:	02090403          	lb	s0,32(s2)
    1328:	0100                	addi	s0,sp,128
    132a:	3c05                	jal	d5a <reset_handler+0x2>
    132c:	04097c03          	0x4097c03
    1330:	0100                	addi	s0,sp,128
    1332:	0905                	addi	s2,s2,1
    1334:	1c090403          	lb	s0,448(s2)
    1338:	0100                	addi	s0,sp,128
    133a:	06090103          	lb	sp,96(s2)
    133e:	0100                	addi	s0,sp,128
    1340:	06090103          	lb	sp,96(s2)
    1344:	0100                	addi	s0,sp,128
    1346:	06090203          	lb	tp,96(s2)
    134a:	0100                	addi	s0,sp,128
    134c:	06090103          	lb	sp,96(s2)
    1350:	0100                	addi	s0,sp,128
    1352:	06090103          	lb	sp,96(s2)
    1356:	0100                	addi	s0,sp,128
    1358:	06090103          	lb	sp,96(s2)
    135c:	0100                	addi	s0,sp,128
    135e:	3c05                	jal	d8e <reset_handler+0x36>
    1360:	04097503          	0x4097503
    1364:	0100                	addi	s0,sp,128
    1366:	0905                	addi	s2,s2,1
    1368:	04090403          	lb	s0,64(s2)
    136c:	0100                	addi	s0,sp,128
    136e:	0505                	addi	a0,a0,1
    1370:	0306                	slli	t1,t1,0x1
    1372:	0901                	addi	s2,s2,0
    1374:	0004                	0x4
    1376:	0301                	addi	t1,t1,0
    1378:	0901                	addi	s2,s2,0
    137a:	0000                	unimp
    137c:	0301                	addi	t1,t1,0
    137e:	0902                	c.slli64	s2
    1380:	0000                	unimp
    1382:	0301                	addi	t1,t1,0
    1384:	0901                	addi	s2,s2,0
    1386:	0000                	unimp
    1388:	0301                	addi	t1,t1,0
    138a:	0901                	addi	s2,s2,0
    138c:	0000                	unimp
    138e:	0301                	addi	t1,t1,0
    1390:	0901                	addi	s2,s2,0
    1392:	0000                	unimp
    1394:	0501                	addi	a0,a0,0
    1396:	0609                	addi	a2,a2,2
    1398:	00090003          	lb	zero,0(s2)
    139c:	0100                	addi	s0,sp,128
    139e:	0505                	addi	a0,a0,1
    13a0:	0306                	slli	t1,t1,0x1
    13a2:	0901                	addi	s2,s2,0
    13a4:	0002                	c.slli64	zero
    13a6:	0301                	addi	t1,t1,0
    13a8:	0901                	addi	s2,s2,0
    13aa:	0000                	unimp
    13ac:	0301                	addi	t1,t1,0
    13ae:	0901                	addi	s2,s2,0
    13b0:	0000                	unimp
    13b2:	0301                	addi	t1,t1,0
    13b4:	0901                	addi	s2,s2,0
    13b6:	0000                	unimp
    13b8:	0301                	addi	t1,t1,0
    13ba:	0902                	c.slli64	s2
    13bc:	0000                	unimp
    13be:	0301                	addi	t1,t1,0
    13c0:	0901                	addi	s2,s2,0
    13c2:	0000                	unimp
    13c4:	0501                	addi	a0,a0,0
    13c6:	060c                	addi	a1,sp,768
    13c8:	02090003          	lb	zero,32(s2)
    13cc:	0100                	addi	s0,sp,128
    13ce:	1105                	addi	sp,sp,-31
    13d0:	02090303          	lb	t1,32(s2)
    13d4:	0100                	addi	s0,sp,128
    13d6:	0200                	addi	s0,sp,256
    13d8:	0104                	addi	s1,sp,128
    13da:	0306                	slli	t1,t1,0x1
    13dc:	097d                	addi	s2,s2,31
    13de:	0008                	0x8
    13e0:	0501                	addi	a0,a0,0
    13e2:	0005                	c.nop	1
    13e4:	0402                	c.slli64	s0
    13e6:	0601                	addi	a2,a2,0
    13e8:	00090003          	lb	zero,0(s2)
    13ec:	0100                	addi	s0,sp,128
    13ee:	0306                	slli	t1,t1,0x1
    13f0:	0004090b          	0x4090b
    13f4:	0501                	addi	a0,a0,0
    13f6:	060d                	addi	a2,a2,3
    13f8:	00090003          	lb	zero,0(s2)
    13fc:	0100                	addi	s0,sp,128
    13fe:	0505                	addi	a0,a0,1
    1400:	0306                	slli	t1,t1,0x1
    1402:	00060903          	lb	s2,0(a2)
    1406:	0501                	addi	a0,a0,0
    1408:	0900030b          	0x900030b
    140c:	0000                	unimp
    140e:	0501                	addi	a0,a0,0
    1410:	0624                	addi	s1,sp,776
    1412:	00091603          	lh	a2,0(s2)
    1416:	0100                	addi	s0,sp,128
    1418:	1905                	addi	s2,s2,-31
    141a:	08093503          	0x8093503
    141e:	0100                	addi	s0,sp,128
    1420:	0905                	addi	s2,s2,1
    1422:	0306                	slli	t1,t1,0x1
    1424:	08097fb7          	lui	t6,0x8097
    1428:	0100                	addi	s0,sp,128
    142a:	0505                	addi	a0,a0,1
    142c:	00090803          	lb	a6,0(s2)
    1430:	0100                	addi	s0,sp,128
    1432:	08090903          	lb	s2,128(s2)
    1436:	0100                	addi	s0,sp,128
    1438:	0905                	addi	s2,s2,1
    143a:	08090203          	lb	tp,128(s2)
    143e:	0100                	addi	s0,sp,128
    1440:	0f05                	addi	t5,t5,1
    1442:	0306                	slli	t1,t1,0x1
    1444:	0900                	addi	s0,sp,144
    1446:	0000                	unimp
    1448:	0501                	addi	a0,a0,0
    144a:	0609                	addi	a2,a2,2
    144c:	0c090103          	lb	sp,192(s2)
    1450:	0100                	addi	s0,sp,128
    1452:	1905                	addi	s2,s2,-31
    1454:	0200                	addi	s0,sp,256
    1456:	0104                	addi	s1,sp,128
    1458:	04090003          	lb	zero,64(s2)
    145c:	0100                	addi	s0,sp,128
    145e:	0905                	addi	s2,s2,1
    1460:	0200                	addi	s0,sp,256
    1462:	0104                	addi	s1,sp,128
    1464:	0306                	slli	t1,t1,0x1
    1466:	0900                	addi	s0,sp,144
    1468:	0000                	unimp
    146a:	0501                	addi	a0,a0,0
    146c:	0310                	addi	a2,sp,384
    146e:	0906                	slli	s2,s2,0x1
    1470:	000a                	c.slli	zero,0x2
    1472:	0501                	addi	a0,a0,0
    1474:	0015                	c.nop	5
    1476:	0402                	c.slli64	s0
    1478:	0601                	addi	a2,a2,0
    147a:	02090003          	lb	zero,32(s2)
    147e:	0100                	addi	s0,sp,128
    1480:	0905                	addi	s2,s2,1
    1482:	0200                	addi	s0,sp,256
    1484:	0104                	addi	s1,sp,128
    1486:	0306                	slli	t1,t1,0x1
    1488:	0900                	addi	s0,sp,144
    148a:	0000                	unimp
    148c:	0501                	addi	a0,a0,0
    148e:	0605                	addi	a2,a2,1
    1490:	04090c03          	lb	s8,64(s2)
    1494:	0100                	addi	s0,sp,128
    1496:	0905                	addi	s2,s2,1
    1498:	08090203          	lb	tp,128(s2)
    149c:	0100                	addi	s0,sp,128
    149e:	1005                	c.nop	-31
    14a0:	0306                	slli	t1,t1,0x1
    14a2:	0900                	addi	s0,sp,144
    14a4:	0000                	unimp
    14a6:	0501                	addi	a0,a0,0
    14a8:	0609                	addi	a2,a2,2
    14aa:	0c090103          	lb	sp,192(s2)
    14ae:	0100                	addi	s0,sp,128
    14b0:	1005                	c.nop	-31
    14b2:	0306                	slli	t1,t1,0x1
    14b4:	0900                	addi	s0,sp,144
    14b6:	0000                	unimp
    14b8:	0501                	addi	a0,a0,0
    14ba:	0015                	c.nop	5
    14bc:	0402                	c.slli64	s0
    14be:	0601                	addi	a2,a2,0
    14c0:	02090003          	lb	zero,32(s2)
    14c4:	0100                	addi	s0,sp,128
    14c6:	0905                	addi	s2,s2,1
    14c8:	0200                	addi	s0,sp,256
    14ca:	0104                	addi	s1,sp,128
    14cc:	0306                	slli	t1,t1,0x1
    14ce:	0900                	addi	s0,sp,144
    14d0:	0000                	unimp
    14d2:	0501                	addi	a0,a0,0
    14d4:	0605                	addi	a2,a2,1
    14d6:	04090c03          	lb	s8,64(s2)
    14da:	0100                	addi	s0,sp,128
    14dc:	0905                	addi	s2,s2,1
    14de:	08090403          	lb	s0,128(s2)
    14e2:	0100                	addi	s0,sp,128
    14e4:	1005                	c.nop	-31
    14e6:	0306                	slli	t1,t1,0x1
    14e8:	0900                	addi	s0,sp,144
    14ea:	0000                	unimp
    14ec:	0501                	addi	a0,a0,0
    14ee:	0609                	addi	a2,a2,2
    14f0:	0e090103          	lb	sp,224(s2)
    14f4:	0100                	addi	s0,sp,128
    14f6:	1005                	c.nop	-31
    14f8:	0306                	slli	t1,t1,0x1
    14fa:	0900                	addi	s0,sp,144
    14fc:	0000                	unimp
    14fe:	0501                	addi	a0,a0,0
    1500:	0015                	c.nop	5
    1502:	0402                	c.slli64	s0
    1504:	0601                	addi	a2,a2,0
    1506:	02090003          	lb	zero,32(s2)
    150a:	0100                	addi	s0,sp,128
    150c:	0905                	addi	s2,s2,1
    150e:	0200                	addi	s0,sp,256
    1510:	0104                	addi	s1,sp,128
    1512:	0306                	slli	t1,t1,0x1
    1514:	0900                	addi	s0,sp,144
    1516:	0000                	unimp
    1518:	0501                	addi	a0,a0,0
    151a:	0605                	addi	a2,a2,1
    151c:	04090c03          	lb	s8,64(s2)
    1520:	0100                	addi	s0,sp,128
    1522:	0905                	addi	s2,s2,1
    1524:	08090203          	lb	tp,128(s2)
    1528:	0100                	addi	s0,sp,128
    152a:	1005                	c.nop	-31
    152c:	0306                	slli	t1,t1,0x1
    152e:	0900                	addi	s0,sp,144
    1530:	0002                	c.slli64	zero
    1532:	0501                	addi	a0,a0,0
    1534:	0015                	c.nop	5
    1536:	0402                	c.slli64	s0
    1538:	0601                	addi	a2,a2,0
    153a:	02090003          	lb	zero,32(s2)
    153e:	0100                	addi	s0,sp,128
    1540:	0905                	addi	s2,s2,1
    1542:	0200                	addi	s0,sp,256
    1544:	0104                	addi	s1,sp,128
    1546:	0306                	slli	t1,t1,0x1
    1548:	0900                	addi	s0,sp,144
    154a:	0000                	unimp
    154c:	0501                	addi	a0,a0,0
    154e:	0605                	addi	a2,a2,1
    1550:	04090b03          	lb	s6,64(s2)
    1554:	0100                	addi	s0,sp,128
    1556:	0905                	addi	s2,s2,1
    1558:	08090503          	lb	a0,128(s2)
    155c:	0100                	addi	s0,sp,128
    155e:	1205                	addi	tp,tp,-31
    1560:	0306                	slli	t1,t1,0x1
    1562:	7fa8                	flw	fa0,120(a5)
    1564:	0209                	addi	tp,tp,2
    1566:	0100                	addi	s0,sp,128
    1568:	1005                	c.nop	-31
    156a:	0900d803          	lhu	a6,144(ra)
    156e:	0002                	c.slli64	zero
    1570:	0501                	addi	a0,a0,0
    1572:	0015                	c.nop	5
    1574:	0402                	c.slli64	s0
    1576:	0601                	addi	a2,a2,0
    1578:	02090003          	lb	zero,32(s2)
    157c:	0100                	addi	s0,sp,128
    157e:	0905                	addi	s2,s2,1
    1580:	0200                	addi	s0,sp,256
    1582:	0104                	addi	s1,sp,128
    1584:	0306                	slli	t1,t1,0x1
    1586:	0900                	addi	s0,sp,144
    1588:	0000                	unimp
    158a:	0501                	addi	a0,a0,0
    158c:	a603060b          	0xa603060b
    1590:	097f                	0x97f
    1592:	0004                	0x4
    1594:	0501                	addi	a0,a0,0
    1596:	0610                	addi	a2,sp,768
    1598:	0900e503          	0x900e503
    159c:	0002                	c.slli64	zero
    159e:	0301                	addi	t1,t1,0
    15a0:	0901                	addi	s2,s2,0
    15a2:	0002                	c.slli64	zero
    15a4:	0501                	addi	a0,a0,0
    15a6:	0015                	c.nop	5
    15a8:	0402                	c.slli64	s0
    15aa:	0601                	addi	a2,a2,0
    15ac:	02097f03          	0x2097f03
    15b0:	0100                	addi	s0,sp,128
    15b2:	0905                	addi	s2,s2,1
    15b4:	0200                	addi	s0,sp,256
    15b6:	0104                	addi	s1,sp,128
    15b8:	0306                	slli	t1,t1,0x1
    15ba:	0900                	addi	s0,sp,144
    15bc:	0000                	unimp
    15be:	0501                	addi	a0,a0,0
    15c0:	0015                	c.nop	5
    15c2:	0402                	c.slli64	s0
    15c4:	0601                	addi	a2,a2,0
    15c6:	0c090c03          	lb	s8,192(s2)
    15ca:	0100                	addi	s0,sp,128
    15cc:	0905                	addi	s2,s2,1
    15ce:	0200                	addi	s0,sp,256
    15d0:	0104                	addi	s1,sp,128
    15d2:	0306                	slli	t1,t1,0x1
    15d4:	0900                	addi	s0,sp,144
    15d6:	0000                	unimp
    15d8:	0601                	addi	a2,a2,0
    15da:	04090503          	lb	a0,64(s2)
    15de:	0100                	addi	s0,sp,128
    15e0:	00090103          	lb	sp,0(s2)
    15e4:	0100                	addi	s0,sp,128
    15e6:	0505                	addi	a0,a0,1
    15e8:	0306                	slli	t1,t1,0x1
    15ea:	0901                	addi	s2,s2,0
    15ec:	0000                	unimp
    15ee:	0501                	addi	a0,a0,0
    15f0:	0009                	c.nop	2
    15f2:	0402                	c.slli64	s0
    15f4:	fb030603          	lb	a2,-80(t1)
    15f8:	097e                	slli	s2,s2,0x1f
    15fa:	002a                	c.slli	zero,0xa
    15fc:	0501                	addi	a0,a0,0
    15fe:	0018                	0x18
    1600:	0402                	c.slli64	s0
    1602:	00030603          	lb	a2,0(t1)
    1606:	0009                	c.nop	2
    1608:	0100                	addi	s0,sp,128
    160a:	1105                	addi	sp,sp,-31
    160c:	0200                	addi	s0,sp,256
    160e:	0304                	addi	s1,sp,384
    1610:	04090003          	lb	zero,64(s2)
    1614:	0100                	addi	s0,sp,128
    1616:	1b05                	addi	s6,s6,-31
    1618:	0200                	addi	s0,sp,256
    161a:	0304                	addi	s1,sp,384
    161c:	08097f03          	0x8097f03
    1620:	0100                	addi	s0,sp,128
    1622:	1105                	addi	sp,sp,-31
    1624:	0200                	addi	s0,sp,256
    1626:	0304                	addi	s1,sp,384
    1628:	02090103          	lb	sp,32(s2)
    162c:	0100                	addi	s0,sp,128
    162e:	0905                	addi	s2,s2,1
    1630:	0200                	addi	s0,sp,256
    1632:	0304                	addi	s1,sp,384
    1634:	0306                	slli	t1,t1,0x1
    1636:	0901                	addi	s2,s2,0
    1638:	0004                	0x4
    163a:	0501                	addi	a0,a0,0
    163c:	0018                	0x18
    163e:	0402                	c.slli64	s0
    1640:	00030603          	lb	a2,0(t1)
    1644:	0009                	c.nop	2
    1646:	0100                	addi	s0,sp,128
    1648:	1105                	addi	sp,sp,-31
    164a:	0200                	addi	s0,sp,256
    164c:	0304                	addi	s1,sp,384
    164e:	04090003          	lb	zero,64(s2)
    1652:	0100                	addi	s0,sp,128
    1654:	0905                	addi	s2,s2,1
    1656:	0200                	addi	s0,sp,256
    1658:	0304                	addi	s1,sp,384
    165a:	0306                	slli	t1,t1,0x1
    165c:	0901                	addi	s2,s2,0
    165e:	000c                	0xc
    1660:	0501                	addi	a0,a0,0
    1662:	0011                	c.nop	4
    1664:	0402                	c.slli64	s0
    1666:	00030603          	lb	a2,0(t1)
    166a:	0009                	c.nop	2
    166c:	0100                	addi	s0,sp,128
    166e:	0905                	addi	s2,s2,1
    1670:	0200                	addi	s0,sp,256
    1672:	0304                	addi	s1,sp,384
    1674:	0306                	slli	t1,t1,0x1
    1676:	0901                	addi	s2,s2,0
    1678:	0008                	0x8
    167a:	0501                	addi	a0,a0,0
    167c:	0011                	c.nop	4
    167e:	0402                	c.slli64	s0
    1680:	00030603          	lb	a2,0(t1)
    1684:	0009                	c.nop	2
    1686:	0100                	addi	s0,sp,128
    1688:	1b05                	addi	s6,s6,-31
    168a:	0200                	addi	s0,sp,256
    168c:	0304                	addi	s1,sp,384
    168e:	0306                	slli	t1,t1,0x1
    1690:	097c                	addi	a5,sp,156
    1692:	0008                	0x8
    1694:	0501                	addi	a0,a0,0
    1696:	000d                	c.nop	3
    1698:	0402                	c.slli64	s0
    169a:	09250303          	lb	t1,146(a0)
    169e:	0004                	0x4
    16a0:	0501                	addi	a0,a0,0
    16a2:	0022                	c.slli	zero,0x8
    16a4:	0402                	c.slli64	s0
    16a6:	00030603          	lb	a2,0(t1)
    16aa:	0009                	c.nop	2
    16ac:	0100                	addi	s0,sp,128
    16ae:	1d05                	addi	s10,s10,-31
    16b0:	0200                	addi	s0,sp,256
    16b2:	0304                	addi	s1,sp,384
    16b4:	06090003          	lb	zero,96(s2)
    16b8:	0100                	addi	s0,sp,128
    16ba:	2a05                	jal	17ea <result+0x11e>
    16bc:	0200                	addi	s0,sp,256
    16be:	0304                	addi	s1,sp,384
    16c0:	02097f03          	0x2097f03
    16c4:	0100                	addi	s0,sp,128
    16c6:	1d05                	addi	s10,s10,-31
    16c8:	0200                	addi	s0,sp,256
    16ca:	0304                	addi	s1,sp,384
    16cc:	04090103          	lb	sp,64(s2)
    16d0:	0100                	addi	s0,sp,128
    16d2:	2a05                	jal	1802 <result+0x136>
    16d4:	0200                	addi	s0,sp,256
    16d6:	0304                	addi	s1,sp,384
    16d8:	0306                	slli	t1,t1,0x1
    16da:	097f                	0x97f
    16dc:	0004                	0x4
    16de:	0501                	addi	a0,a0,0
    16e0:	000d                	c.nop	3
    16e2:	0402                	c.slli64	s0
    16e4:	09070303          	lb	t1,144(a4)
    16e8:	0002                	c.slli64	zero
    16ea:	0501                	addi	a0,a0,0
    16ec:	0402001b          	0x402001b
    16f0:	00030603          	lb	a2,0(t1)
    16f4:	0009                	c.nop	2
    16f6:	0100                	addi	s0,sp,128
    16f8:	2305                	jal	1c18 <random_keys+0x164>
    16fa:	0200                	addi	s0,sp,256
    16fc:	0304                	addi	s1,sp,384
    16fe:	04090003          	lb	zero,64(s2)
    1702:	0100                	addi	s0,sp,128
    1704:	1f05                	addi	t5,t5,-31
    1706:	0200                	addi	s0,sp,256
    1708:	0304                	addi	s1,sp,384
    170a:	04090003          	lb	zero,64(s2)
    170e:	0100                	addi	s0,sp,128
    1710:	1505                	addi	a0,a0,-31
    1712:	0200                	addi	s0,sp,256
    1714:	0304                	addi	s1,sp,384
    1716:	04090003          	lb	zero,64(s2)
    171a:	0100                	addi	s0,sp,128
    171c:	2005                	jal	173c <result+0x70>
    171e:	0200                	addi	s0,sp,256
    1720:	0304                	addi	s1,sp,384
    1722:	04097f03          	0x4097f03
    1726:	0100                	addi	s0,sp,128
    1728:	1f05                	addi	t5,t5,-31
    172a:	0200                	addi	s0,sp,256
    172c:	0304                	addi	s1,sp,384
    172e:	02090103          	lb	sp,32(s2)
    1732:	0100                	addi	s0,sp,128
    1734:	1505                	addi	a0,a0,-31
    1736:	0200                	addi	s0,sp,256
    1738:	0304                	addi	s1,sp,384
    173a:	02090003          	lb	zero,32(s2)
    173e:	0100                	addi	s0,sp,128
    1740:	2005                	jal	1760 <result+0x94>
    1742:	0200                	addi	s0,sp,256
    1744:	0304                	addi	s1,sp,384
    1746:	0306                	slli	t1,t1,0x1
    1748:	097f                	0x97f
    174a:	0002                	c.slli64	zero
    174c:	0501                	addi	a0,a0,0
    174e:	000d                	c.nop	3
    1750:	0402                	c.slli64	s0
    1752:	09100303          	lb	t1,145(zero) # 91 <instr_add+0x5>
    1756:	0004                	0x4
    1758:	0501                	addi	a0,a0,0
    175a:	0402001b          	0x402001b
    175e:	00030603          	lb	a2,0(t1)
    1762:	0409                	addi	s0,s0,2
    1764:	0100                	addi	s0,sp,128
    1766:	1505                	addi	a0,a0,-31
    1768:	0200                	addi	s0,sp,256
    176a:	0304                	addi	s1,sp,384
    176c:	06090003          	lb	zero,96(s2)
    1770:	0100                	addi	s0,sp,128
    1772:	2005                	jal	1792 <result+0xc6>
    1774:	0200                	addi	s0,sp,256
    1776:	0304                	addi	s1,sp,384
    1778:	02097f03          	0x2097f03
    177c:	0100                	addi	s0,sp,128
    177e:	1505                	addi	a0,a0,-31
    1780:	0200                	addi	s0,sp,256
    1782:	0304                	addi	s1,sp,384
    1784:	02090103          	lb	sp,32(s2)
    1788:	0100                	addi	s0,sp,128
    178a:	2005                	jal	17aa <result+0xde>
    178c:	0200                	addi	s0,sp,256
    178e:	0304                	addi	s1,sp,384
    1790:	0306                	slli	t1,t1,0x1
    1792:	097f                	0x97f
    1794:	0002                	c.slli64	zero
    1796:	0501                	addi	a0,a0,0
    1798:	000d                	c.nop	3
    179a:	0402                	c.slli64	s0
    179c:	09120303          	lb	t1,145(tp) # 91 <instr_add+0x5>
    17a0:	0002                	c.slli64	zero
    17a2:	0501                	addi	a0,a0,0
    17a4:	0402001b          	0x402001b
    17a8:	00030603          	lb	a2,0(t1)
    17ac:	0409                	addi	s0,s0,2
    17ae:	0100                	addi	s0,sp,128
    17b0:	1505                	addi	a0,a0,-31
    17b2:	0200                	addi	s0,sp,256
    17b4:	0304                	addi	s1,sp,384
    17b6:	06090003          	lb	zero,96(s2)
    17ba:	0100                	addi	s0,sp,128
    17bc:	2005                	jal	17dc <result+0x110>
    17be:	0200                	addi	s0,sp,256
    17c0:	0304                	addi	s1,sp,384
    17c2:	02097f03          	0x2097f03
    17c6:	0100                	addi	s0,sp,128
    17c8:	1505                	addi	a0,a0,-31
    17ca:	0200                	addi	s0,sp,256
    17cc:	0304                	addi	s1,sp,384
    17ce:	02090103          	lb	sp,32(s2)
    17d2:	0100                	addi	s0,sp,128
    17d4:	2005                	jal	17f4 <result+0x128>
    17d6:	0200                	addi	s0,sp,256
    17d8:	0304                	addi	s1,sp,384
    17da:	0306                	slli	t1,t1,0x1
    17dc:	097f                	0x97f
    17de:	0002                	c.slli64	zero
    17e0:	0501                	addi	a0,a0,0
    17e2:	000d                	c.nop	3
    17e4:	0402                	c.slli64	s0
    17e6:	090f0303          	lb	t1,144(t5)
    17ea:	0002                	c.slli64	zero
    17ec:	0501                	addi	a0,a0,0
    17ee:	0019                	c.nop	6
    17f0:	0402                	c.slli64	s0
    17f2:	00030603          	lb	a2,0(t1)
    17f6:	0009                	c.nop	2
    17f8:	0100                	addi	s0,sp,128
    17fa:	2305                	jal	1d1a <random_keys+0x266>
    17fc:	0200                	addi	s0,sp,256
    17fe:	0304                	addi	s1,sp,384
    1800:	04090003          	lb	zero,64(s2)
    1804:	0100                	addi	s0,sp,128
    1806:	1d05                	addi	s10,s10,-31
    1808:	0200                	addi	s0,sp,256
    180a:	0304                	addi	s1,sp,384
    180c:	04090003          	lb	zero,64(s2)
    1810:	0100                	addi	s0,sp,128
    1812:	1305                	addi	t1,t1,-31
    1814:	0200                	addi	s0,sp,256
    1816:	0304                	addi	s1,sp,384
    1818:	04090003          	lb	zero,64(s2)
    181c:	0100                	addi	s0,sp,128
    181e:	2005                	jal	183e <result+0x172>
    1820:	0200                	addi	s0,sp,256
    1822:	0304                	addi	s1,sp,384
    1824:	04097f03          	0x4097f03
    1828:	0100                	addi	s0,sp,128
    182a:	1d05                	addi	s10,s10,-31
    182c:	0200                	addi	s0,sp,256
    182e:	0304                	addi	s1,sp,384
    1830:	02090103          	lb	sp,32(s2)
    1834:	0100                	addi	s0,sp,128
    1836:	1305                	addi	t1,t1,-31
    1838:	0200                	addi	s0,sp,256
    183a:	0304                	addi	s1,sp,384
    183c:	02090003          	lb	zero,32(s2)
    1840:	0100                	addi	s0,sp,128
    1842:	2005                	jal	1862 <result+0x196>
    1844:	0200                	addi	s0,sp,256
    1846:	0304                	addi	s1,sp,384
    1848:	0306                	slli	t1,t1,0x1
    184a:	097f                	0x97f
    184c:	0002                	c.slli64	zero
    184e:	0501                	addi	a0,a0,0
    1850:	000d                	c.nop	3
    1852:	0402                	c.slli64	s0
    1854:	09110303          	lb	t1,145(sp)
    1858:	0004                	0x4
    185a:	0501                	addi	a0,a0,0
    185c:	0015                	c.nop	5
    185e:	0402                	c.slli64	s0
    1860:	00030603          	lb	a2,0(t1)
    1864:	0409                	addi	s0,s0,2
    1866:	0100                	addi	s0,sp,128
    1868:	2005                	jal	1888 <result+0x1bc>
    186a:	0200                	addi	s0,sp,256
    186c:	0304                	addi	s1,sp,384
    186e:	06097f03          	0x6097f03
    1872:	0100                	addi	s0,sp,128
    1874:	1505                	addi	a0,a0,-31
    1876:	0200                	addi	s0,sp,256
    1878:	0304                	addi	s1,sp,384
    187a:	02090103          	lb	sp,32(s2)
    187e:	0100                	addi	s0,sp,128
    1880:	0d05                	addi	s10,s10,1
    1882:	0200                	addi	s0,sp,256
    1884:	0304                	addi	s1,sp,384
    1886:	0306                	slli	t1,t1,0x1
    1888:	0901                	addi	s2,s2,0
    188a:	0002                	c.slli64	zero
    188c:	0501                	addi	a0,a0,0
    188e:	0019                	c.nop	6
    1890:	0402                	c.slli64	s0
    1892:	00030603          	lb	a2,0(t1)
    1896:	0009                	c.nop	2
    1898:	0100                	addi	s0,sp,128
    189a:	1505                	addi	a0,a0,-31
    189c:	0200                	addi	s0,sp,256
    189e:	0304                	addi	s1,sp,384
    18a0:	06090103          	lb	sp,96(s2)
    18a4:	0100                	addi	s0,sp,128
    18a6:	0200                	addi	s0,sp,256
    18a8:	0304                	addi	s1,sp,384
    18aa:	04097f03          	0x4097f03
    18ae:	0100                	addi	s0,sp,128
    18b0:	0d05                	addi	s10,s10,1
    18b2:	0200                	addi	s0,sp,256
    18b4:	0304                	addi	s1,sp,384
    18b6:	0306                	slli	t1,t1,0x1
    18b8:	0901                	addi	s2,s2,0
    18ba:	0002                	c.slli64	zero
    18bc:	0501                	addi	a0,a0,0
    18be:	0015                	c.nop	5
    18c0:	0402                	c.slli64	s0
    18c2:	00030603          	lb	a2,0(t1)
    18c6:	0409                	addi	s0,s0,2
    18c8:	0100                	addi	s0,sp,128
    18ca:	1605                	addi	a2,a2,-31
    18cc:	0200                	addi	s0,sp,256
    18ce:	0304                	addi	s1,sp,384
    18d0:	04090303          	lb	t1,64(s2)
    18d4:	0100                	addi	s0,sp,128
    18d6:	1505                	addi	a0,a0,-31
    18d8:	0200                	addi	s0,sp,256
    18da:	0304                	addi	s1,sp,384
    18dc:	02097d03          	0x2097d03
    18e0:	0100                	addi	s0,sp,128
    18e2:	0d05                	addi	s10,s10,1
    18e4:	0200                	addi	s0,sp,256
    18e6:	0304                	addi	s1,sp,384
    18e8:	0306                	slli	t1,t1,0x1
    18ea:	0901                	addi	s2,s2,0
    18ec:	0004                	0x4
    18ee:	0501                	addi	a0,a0,0
    18f0:	0019                	c.nop	6
    18f2:	0402                	c.slli64	s0
    18f4:	00030603          	lb	a2,0(t1)
    18f8:	0009                	c.nop	2
    18fa:	0100                	addi	s0,sp,128
    18fc:	1505                	addi	a0,a0,-31
    18fe:	0200                	addi	s0,sp,256
    1900:	0304                	addi	s1,sp,384
    1902:	04090003          	lb	zero,64(s2)
    1906:	0100                	addi	s0,sp,128
    1908:	0f05                	addi	t5,t5,1
    190a:	0200                	addi	s0,sp,256
    190c:	0304                	addi	s1,sp,384
    190e:	0306                	slli	t1,t1,0x1
    1910:	0901                	addi	s2,s2,0
    1912:	0004                	0x4
    1914:	0501                	addi	a0,a0,0
    1916:	04020017          	auipc	zero,0x4020
    191a:	00030603          	lb	a2,0(t1)
    191e:	0009                	c.nop	2
    1920:	0100                	addi	s0,sp,128
    1922:	0d05                	addi	s10,s10,1
    1924:	0200                	addi	s0,sp,256
    1926:	0304                	addi	s1,sp,384
    1928:	0306                	slli	t1,t1,0x1
    192a:	0901                	addi	s2,s2,0
    192c:	0008                	0x8
    192e:	0501                	addi	a0,a0,0
    1930:	0020                	addi	s0,sp,8
    1932:	0402                	c.slli64	s0
    1934:	097a0303          	lb	t1,151(s4)
    1938:	0000                	unimp
    193a:	0501                	addi	a0,a0,0
    193c:	030d                	addi	t1,t1,3
    193e:	090c                	addi	a1,sp,144
    1940:	0004                	0x4
    1942:	0501                	addi	a0,a0,0
    1944:	0003061b          	0x3061b
    1948:	0009                	c.nop	2
    194a:	0100                	addi	s0,sp,128
    194c:	2005                	jal	196c <ti_2+0x48>
    194e:	08090003          	lb	zero,128(s2)
    1952:	0100                	addi	s0,sp,128
    1954:	1005                	c.nop	-31
    1956:	04090003          	lb	zero,64(s2)
    195a:	0100                	addi	s0,sp,128
    195c:	1e05                	addi	t3,t3,-31
    195e:	0200                	addi	s0,sp,256
    1960:	0204                	addi	s1,sp,256
    1962:	0306                	slli	t1,t1,0x1
    1964:	097f                	0x97f
    1966:	0004                	0x4
    1968:	0501                	addi	a0,a0,0
    196a:	000d                	c.nop	3
    196c:	0402                	c.slli64	s0
    196e:	090d0303          	lb	t1,144(s10)
    1972:	0004                	0x4
    1974:	0501                	addi	a0,a0,0
    1976:	0020                	addi	s0,sp,8
    1978:	0402                	c.slli64	s0
    197a:	00030603          	lb	a2,0(t1)
    197e:	0009                	c.nop	2
    1980:	0100                	addi	s0,sp,128
    1982:	0200                	addi	s0,sp,256
    1984:	0304                	addi	s1,sp,384
    1986:	02097f03          	0x2097f03
    198a:	0100                	addi	s0,sp,128
    198c:	0200                	addi	s0,sp,256
    198e:	0304                	addi	s1,sp,384
    1990:	04090103          	lb	sp,64(s2)
    1994:	0100                	addi	s0,sp,128
    1996:	2505                	jal	1fb6 <_bss_end+0xa>
    1998:	0200                	addi	s0,sp,256
    199a:	0304                	addi	s1,sp,384
    199c:	04090003          	lb	zero,64(s2)
    19a0:	0100                	addi	s0,sp,128
    19a2:	1505                	addi	a0,a0,-31
    19a4:	0200                	addi	s0,sp,256
    19a6:	0304                	addi	s1,sp,384
    19a8:	04090003          	lb	zero,64(s2)
    19ac:	0100                	addi	s0,sp,128
    19ae:	2005                	jal	19ce <ti_2+0xaa>
    19b0:	0200                	addi	s0,sp,256
    19b2:	0304                	addi	s1,sp,384
    19b4:	0306                	slli	t1,t1,0x1
    19b6:	097f                	0x97f
    19b8:	0004                	0x4
    19ba:	0501                	addi	a0,a0,0
    19bc:	0328                	addi	a0,sp,392
    19be:	090c                	addi	a1,sp,144
    19c0:	0002                	c.slli64	zero
    19c2:	0501                	addi	a0,a0,0
    19c4:	0305                	addi	t1,t1,1
    19c6:	0902                	c.slli64	s2
    19c8:	0000                	unimp
    19ca:	0501                	addi	a0,a0,0
    19cc:	0628                	addi	a0,sp,776
    19ce:	00097e03          	0x97e03
    19d2:	0100                	addi	s0,sp,128
    19d4:	36090003          	lb	zero,864(s2)
    19d8:	0100                	addi	s0,sp,128
    19da:	0905                	addi	s2,s2,1
    19dc:	04090203          	lb	tp,64(s2)
    19e0:	0100                	addi	s0,sp,128
    19e2:	10090103          	lb	sp,256(s2)
    19e6:	0100                	addi	s0,sp,128
    19e8:	0a097f03          	0xa097f03
    19ec:	0100                	addi	s0,sp,128
    19ee:	0505                	addi	a0,a0,1
    19f0:	0306                	slli	t1,t1,0x1
    19f2:	0901                	addi	s2,s2,0
    19f4:	006c                	addi	a1,sp,12
    19f6:	0501                	addi	a0,a0,0
    19f8:	0610                	addi	a2,sp,768
    19fa:	00090603          	lb	a2,0(s2)
    19fe:	0100                	addi	s0,sp,128
    1a00:	0905                	addi	s2,s2,1
    1a02:	04097a03          	0x4097a03
    1a06:	0100                	addi	s0,sp,128
    1a08:	02090603          	lb	a2,32(s2)
    1a0c:	0100                	addi	s0,sp,128
    1a0e:	0e05                	addi	t3,t3,1
    1a10:	0e090503          	lb	a0,224(s2)
    1a14:	0100                	addi	s0,sp,128
    1a16:	0905                	addi	s2,s2,1
    1a18:	0a097503          	0xa097503
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	0505                	addi	a0,a0,1
    1a20:	0306                	slli	t1,t1,0x1
    1a22:	0902                	c.slli64	s2
    1a24:	0064                	addi	s1,sp,12
    1a26:	0301                	addi	t1,t1,0
    1a28:	0901                	addi	s2,s2,0
    1a2a:	0000                	unimp
    1a2c:	0301                	addi	t1,t1,0
    1a2e:	0901                	addi	s2,s2,0
    1a30:	0000                	unimp
    1a32:	0301                	addi	t1,t1,0
    1a34:	0901                	addi	s2,s2,0
    1a36:	0000                	unimp
    1a38:	0301                	addi	t1,t1,0
    1a3a:	0901                	addi	s2,s2,0
    1a3c:	0000                	unimp
    1a3e:	0301                	addi	t1,t1,0
    1a40:	0901                	addi	s2,s2,0
    1a42:	0000                	unimp
    1a44:	0301                	addi	t1,t1,0
    1a46:	0901                	addi	s2,s2,0
    1a48:	0000                	unimp
    1a4a:	0301                	addi	t1,t1,0
    1a4c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1a50:	0301                	addi	t1,t1,0
    1a52:	0901                	addi	s2,s2,0
    1a54:	0000                	unimp
    1a56:	0501                	addi	a0,a0,0
    1a58:	060e                	slli	a2,a2,0x3
    1a5a:	00090003          	lb	zero,0(s2)
    1a5e:	0100                	addi	s0,sp,128
    1a60:	0505                	addi	a0,a0,1
    1a62:	0306                	slli	t1,t1,0x1
    1a64:	0902                	c.slli64	s2
    1a66:	0004                	0x4
    1a68:	0501                	addi	a0,a0,0
    1a6a:	0003060b          	0x3060b
    1a6e:	0009                	c.nop	2
    1a70:	0100                	addi	s0,sp,128
    1a72:	1005                	c.nop	-31
    1a74:	0200                	addi	s0,sp,256
    1a76:	0104                	addi	s1,sp,128
    1a78:	0306                	slli	t1,t1,0x1
    1a7a:	0900                	addi	s0,sp,144
    1a7c:	0002                	c.slli64	zero
    1a7e:	0501                	addi	a0,a0,0
    1a80:	0005                	c.nop	1
    1a82:	0402                	c.slli64	s0
    1a84:	0601                	addi	a2,a2,0
    1a86:	00090003          	lb	zero,0(s2)
    1a8a:	0100                	addi	s0,sp,128
    1a8c:	06090603          	lb	a2,96(s2)
    1a90:	0100                	addi	s0,sp,128
    1a92:	1105                	addi	sp,sp,-31
    1a94:	0200                	addi	s0,sp,256
    1a96:	0104                	addi	s1,sp,128
    1a98:	0306                	slli	t1,t1,0x1
    1a9a:	0900                	addi	s0,sp,144
    1a9c:	0004                	0x4
    1a9e:	0501                	addi	a0,a0,0
    1aa0:	0005                	c.nop	1
    1aa2:	0402                	c.slli64	s0
    1aa4:	0601                	addi	a2,a2,0
    1aa6:	00090003          	lb	zero,0(s2)
    1aaa:	0100                	addi	s0,sp,128
    1aac:	0b05                	addi	s6,s6,1
    1aae:	04090703          	lb	a4,64(s2)
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	1805                	addi	a6,a6,-31
    1ab6:	02090103          	lb	sp,32(s2)
    1aba:	0100                	addi	s0,sp,128
    1abc:	1005                	c.nop	-31
    1abe:	0200                	addi	s0,sp,256
    1ac0:	0104                	addi	s1,sp,128
    1ac2:	0306                	slli	t1,t1,0x1
    1ac4:	097f                	0x97f
    1ac6:	0008                	0x8
    1ac8:	0501                	addi	a0,a0,0
    1aca:	0005                	c.nop	1
    1acc:	0402                	c.slli64	s0
    1ace:	0601                	addi	a2,a2,0
    1ad0:	00090003          	lb	zero,0(s2)
    1ad4:	0100                	addi	s0,sp,128
    1ad6:	1605                	addi	a2,a2,-31
    1ad8:	08090503          	lb	a0,128(s2)
    1adc:	0100                	addi	s0,sp,128
    1ade:	1805                	addi	a6,a6,-31
    1ae0:	08090103          	lb	sp,128(s2)
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	1005                	c.nop	-31
    1ae8:	0200                	addi	s0,sp,256
    1aea:	0104                	addi	s1,sp,128
    1aec:	0306                	slli	t1,t1,0x1
    1aee:	097f                	0x97f
    1af0:	0008                	0x8
    1af2:	0501                	addi	a0,a0,0
    1af4:	0005                	c.nop	1
    1af6:	0402                	c.slli64	s0
    1af8:	0601                	addi	a2,a2,0
    1afa:	00090003          	lb	zero,0(s2)
    1afe:	0100                	addi	s0,sp,128
    1b00:	0306                	slli	t1,t1,0x1
    1b02:	0905                	addi	s2,s2,1
    1b04:	0004                	0x4
    1b06:	0501                	addi	a0,a0,0
    1b08:	061a                	slli	a2,a2,0x6
    1b0a:	00090303          	lb	t1,0(s2)
    1b0e:	0100                	addi	s0,sp,128
    1b10:	0a05                	addi	s4,s4,1
    1b12:	06097d03          	0x6097d03
    1b16:	0100                	addi	s0,sp,128
    1b18:	0505                	addi	a0,a0,1
    1b1a:	0306                	slli	t1,t1,0x1
    1b1c:	000c0903          	lb	s2,0(s8)
    1b20:	0501                	addi	a0,a0,0
    1b22:	0618                	addi	a4,sp,768
    1b24:	02090103          	lb	sp,32(s2)
    1b28:	0100                	addi	s0,sp,128
    1b2a:	1405                	addi	s0,s0,-31
    1b2c:	0200                	addi	s0,sp,256
    1b2e:	0104                	addi	s1,sp,128
    1b30:	0306                	slli	t1,t1,0x1
    1b32:	097f                	0x97f
    1b34:	0008                	0x8
    1b36:	0501                	addi	a0,a0,0
    1b38:	0005                	c.nop	1
    1b3a:	0402                	c.slli64	s0
    1b3c:	0601                	addi	a2,a2,0
    1b3e:	00090003          	lb	zero,0(s2)
    1b42:	0100                	addi	s0,sp,128
    1b44:	0306                	slli	t1,t1,0x1
    1b46:	0906                	slli	s2,s2,0x1
    1b48:	0004                	0x4
    1b4a:	0501                	addi	a0,a0,0
    1b4c:	060a                	slli	a2,a2,0x2
    1b4e:	00090003          	lb	zero,0(s2)
    1b52:	0100                	addi	s0,sp,128
    1b54:	0505                	addi	a0,a0,1
    1b56:	0306                	slli	t1,t1,0x1
    1b58:	0904                	addi	s1,sp,144
    1b5a:	000c                	0xc
    1b5c:	0501                	addi	a0,a0,0
    1b5e:	061a                	slli	a2,a2,0x6
    1b60:	06090003          	lb	zero,96(s2)
    1b64:	0100                	addi	s0,sp,128
    1b66:	1805                	addi	a6,a6,-31
    1b68:	02090103          	lb	sp,32(s2)
    1b6c:	0100                	addi	s0,sp,128
    1b6e:	1405                	addi	s0,s0,-31
    1b70:	0200                	addi	s0,sp,256
    1b72:	0104                	addi	s1,sp,128
    1b74:	0306                	slli	t1,t1,0x1
    1b76:	097f                	0x97f
    1b78:	0008                	0x8
    1b7a:	0501                	addi	a0,a0,0
    1b7c:	0005                	c.nop	1
    1b7e:	0402                	c.slli64	s0
    1b80:	0601                	addi	a2,a2,0
    1b82:	00090003          	lb	zero,0(s2)
    1b86:	0100                	addi	s0,sp,128
    1b88:	0306                	slli	t1,t1,0x1
    1b8a:	0905                	addi	s2,s2,1
    1b8c:	0004                	0x4
    1b8e:	0501                	addi	a0,a0,0
    1b90:	060a                	slli	a2,a2,0x2
    1b92:	00090003          	lb	zero,0(s2)
    1b96:	0100                	addi	s0,sp,128
    1b98:	0505                	addi	a0,a0,1
    1b9a:	0306                	slli	t1,t1,0x1
    1b9c:	000a0903          	lb	s2,0(s4)
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	0003060b          	0x3060b
    1ba6:	0209                	addi	tp,tp,2
    1ba8:	0100                	addi	s0,sp,128
    1baa:	1805                	addi	a6,a6,-31
    1bac:	02090003          	lb	zero,32(s2)
    1bb0:	0100                	addi	s0,sp,128
    1bb2:	1005                	c.nop	-31
    1bb4:	0200                	addi	s0,sp,256
    1bb6:	0104                	addi	s1,sp,128
    1bb8:	0306                	slli	t1,t1,0x1
    1bba:	0900                	addi	s0,sp,144
    1bbc:	0004                	0x4
    1bbe:	0501                	addi	a0,a0,0
    1bc0:	0005                	c.nop	1
    1bc2:	0402                	c.slli64	s0
    1bc4:	0601                	addi	a2,a2,0
    1bc6:	00090003          	lb	zero,0(s2)
    1bca:	0100                	addi	s0,sp,128
    1bcc:	0306                	slli	t1,t1,0x1
    1bce:	0906                	slli	s2,s2,0x1
    1bd0:	0004                	0x4
    1bd2:	0501                	addi	a0,a0,0
    1bd4:	060a                	slli	a2,a2,0x2
    1bd6:	00090003          	lb	zero,0(s2)
    1bda:	0100                	addi	s0,sp,128
    1bdc:	0505                	addi	a0,a0,1
    1bde:	0306                	slli	t1,t1,0x1
    1be0:	0904                	addi	s1,sp,144
    1be2:	0008                	0x8
    1be4:	0501                	addi	a0,a0,0
    1be6:	061a                	slli	a2,a2,0x6
    1be8:	00090003          	lb	zero,0(s2)
    1bec:	0100                	addi	s0,sp,128
    1bee:	1805                	addi	a6,a6,-31
    1bf0:	0a090103          	lb	sp,160(s2)
    1bf4:	0100                	addi	s0,sp,128
    1bf6:	1405                	addi	s0,s0,-31
    1bf8:	0200                	addi	s0,sp,256
    1bfa:	0104                	addi	s1,sp,128
    1bfc:	0306                	slli	t1,t1,0x1
    1bfe:	097f                	0x97f
    1c00:	0008                	0x8
    1c02:	0501                	addi	a0,a0,0
    1c04:	0005                	c.nop	1
    1c06:	0402                	c.slli64	s0
    1c08:	0601                	addi	a2,a2,0
    1c0a:	02090003          	lb	zero,32(s2)
    1c0e:	0100                	addi	s0,sp,128
    1c10:	1a05                	addi	s4,s4,-31
    1c12:	04090503          	lb	a0,64(s2)
    1c16:	0100                	addi	s0,sp,128
    1c18:	1805                	addi	a6,a6,-31
    1c1a:	04090103          	lb	sp,64(s2)
    1c1e:	0100                	addi	s0,sp,128
    1c20:	1a05                	addi	s4,s4,-31
    1c22:	08097f03          	0x8097f03
    1c26:	0100                	addi	s0,sp,128
    1c28:	1405                	addi	s0,s0,-31
    1c2a:	0200                	addi	s0,sp,256
    1c2c:	0104                	addi	s1,sp,128
    1c2e:	0306                	slli	t1,t1,0x1
    1c30:	0900                	addi	s0,sp,144
    1c32:	0008                	0x8
    1c34:	0501                	addi	a0,a0,0
    1c36:	0005                	c.nop	1
    1c38:	0402                	c.slli64	s0
    1c3a:	0601                	addi	a2,a2,0
    1c3c:	00090003          	lb	zero,0(s2)
    1c40:	0100                	addi	s0,sp,128
    1c42:	0306                	slli	t1,t1,0x1
    1c44:	0906                	slli	s2,s2,0x1
    1c46:	0004                	0x4
    1c48:	0301                	addi	t1,t1,0
    1c4a:	0902                	c.slli64	s2
    1c4c:	0000                	unimp
    1c4e:	0501                	addi	a0,a0,0
    1c50:	0601                	addi	a2,a2,0
    1c52:	00090103          	lb	sp,0(s2)
    1c56:	0100                	addi	s0,sp,128
    1c58:	0905                	addi	s2,s2,1
    1c5a:	0200                	addi	s0,sp,256
    1c5c:	0304                	addi	s1,sp,384
    1c5e:	0306                	slli	t1,t1,0x1
    1c60:	7fbd                	lui	t6,0xfffef
    1c62:	4009                	c.li	zero,2
    1c64:	0100                	addi	s0,sp,128
    1c66:	1205                	addi	tp,tp,-31
    1c68:	0200                	addi	s0,sp,256
    1c6a:	0304                	addi	s1,sp,384
    1c6c:	0306                	slli	t1,t1,0x1
    1c6e:	0900                	addi	s0,sp,144
    1c70:	0000                	unimp
    1c72:	0501                	addi	a0,a0,0
    1c74:	04020017          	auipc	zero,0x4020
    1c78:	7f030603          	lb	a2,2032(t1)
    1c7c:	0a09                	addi	s4,s4,2
    1c7e:	0100                	addi	s0,sp,128
    1c80:	0905                	addi	s2,s2,1
    1c82:	0200                	addi	s0,sp,256
    1c84:	0304                	addi	s1,sp,384
    1c86:	04090703          	lb	a4,64(s2)
    1c8a:	0100                	addi	s0,sp,128
    1c8c:	0e05                	addi	t3,t3,1
    1c8e:	0200                	addi	s0,sp,256
    1c90:	0304                	addi	s1,sp,384
    1c92:	0306                	slli	t1,t1,0x1
    1c94:	0900                	addi	s0,sp,144
    1c96:	0004                	0x4
    1c98:	0501                	addi	a0,a0,0
    1c9a:	0009                	c.nop	2
    1c9c:	0402                	c.slli64	s0
    1c9e:	01030603          	lb	a2,16(t1)
    1ca2:	0a09                	addi	s4,s4,2
    1ca4:	0100                	addi	s0,sp,128
    1ca6:	0e05                	addi	t3,t3,1
    1ca8:	0200                	addi	s0,sp,256
    1caa:	0304                	addi	s1,sp,384
    1cac:	0306                	slli	t1,t1,0x1
    1cae:	0900                	addi	s0,sp,144
    1cb0:	0000                	unimp
    1cb2:	0501                	addi	a0,a0,0
    1cb4:	0019                	c.nop	6
    1cb6:	0402                	c.slli64	s0
    1cb8:	7e030603          	lb	a2,2016(t1)
    1cbc:	0a09                	addi	s4,s4,2
    1cbe:	0100                	addi	s0,sp,128
    1cc0:	0905                	addi	s2,s2,1
    1cc2:	0200                	addi	s0,sp,256
    1cc4:	0304                	addi	s1,sp,384
    1cc6:	04090803          	lb	a6,64(s2)
    1cca:	0100                	addi	s0,sp,128
    1ccc:	1b05                	addi	s6,s6,-31
    1cce:	0200                	addi	s0,sp,256
    1cd0:	0304                	addi	s1,sp,384
    1cd2:	0306                	slli	t1,t1,0x1
    1cd4:	0900                	addi	s0,sp,144
    1cd6:	0004                	0x4
    1cd8:	0501                	addi	a0,a0,0
    1cda:	0018                	0x18
    1cdc:	0402                	c.slli64	s0
    1cde:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ce2:	0004                	0x4
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	0402001b          	0x402001b
    1cea:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1cee:	0004                	0x4
    1cf0:	0501                	addi	a0,a0,0
    1cf2:	0018                	0x18
    1cf4:	0402                	c.slli64	s0
    1cf6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1cfa:	0002                	c.slli64	zero
    1cfc:	0501                	addi	a0,a0,0
    1cfe:	04020017          	auipc	zero,0x4020
    1d02:	097f0303          	lb	t1,151(t5)
    1d06:	0002                	c.slli64	zero
    1d08:	0501                	addi	a0,a0,0
    1d0a:	0018                	0x18
    1d0c:	0402                	c.slli64	s0
    1d0e:	09010303          	lb	t1,144(sp)
    1d12:	0002                	c.slli64	zero
    1d14:	0501                	addi	a0,a0,0
    1d16:	04020017          	auipc	zero,0x4020
    1d1a:	7f030603          	lb	a2,2032(t1)
    1d1e:	0209                	addi	tp,tp,2
    1d20:	0100                	addi	s0,sp,128
    1d22:	0905                	addi	s2,s2,1
    1d24:	0200                	addi	s0,sp,256
    1d26:	0304                	addi	s1,sp,384
    1d28:	02090603          	lb	a2,32(s2)
    1d2c:	0100                	addi	s0,sp,128
    1d2e:	1805                	addi	a6,a6,-31
    1d30:	0200                	addi	s0,sp,256
    1d32:	0304                	addi	s1,sp,384
    1d34:	0306                	slli	t1,t1,0x1
    1d36:	0900                	addi	s0,sp,144
    1d38:	0000                	unimp
    1d3a:	0501                	addi	a0,a0,0
    1d3c:	0402001b          	0x402001b
    1d40:	7f030603          	lb	a2,2032(t1)
    1d44:	0a09                	addi	s4,s4,2
    1d46:	0100                	addi	s0,sp,128
    1d48:	0905                	addi	s2,s2,1
    1d4a:	0200                	addi	s0,sp,256
    1d4c:	0304                	addi	s1,sp,384
    1d4e:	06090903          	lb	s2,96(s2)
    1d52:	0100                	addi	s0,sp,128
    1d54:	1c05                	addi	s8,s8,-31
    1d56:	0200                	addi	s0,sp,256
    1d58:	0304                	addi	s1,sp,384
    1d5a:	0306                	slli	t1,t1,0x1
    1d5c:	0900                	addi	s0,sp,144
    1d5e:	0000                	unimp
    1d60:	0501                	addi	a0,a0,0
    1d62:	0018                	0x18
    1d64:	0402                	c.slli64	s0
    1d66:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d6a:	0002                	c.slli64	zero
    1d6c:	0501                	addi	a0,a0,0
    1d6e:	001f 0402 0603      	0x6030402001f
    1d74:	08097f03          	0x8097f03
    1d78:	0100                	addi	s0,sp,128
    1d7a:	0905                	addi	s2,s2,1
    1d7c:	0200                	addi	s0,sp,256
    1d7e:	0304                	addi	s1,sp,384
    1d80:	06090b03          	lb	s6,96(s2)
    1d84:	0100                	addi	s0,sp,128
    1d86:	1c05                	addi	s8,s8,-31
    1d88:	0200                	addi	s0,sp,256
    1d8a:	0304                	addi	s1,sp,384
    1d8c:	0306                	slli	t1,t1,0x1
    1d8e:	0900                	addi	s0,sp,144
    1d90:	0004                	0x4
    1d92:	0501                	addi	a0,a0,0
    1d94:	0018                	0x18
    1d96:	0402                	c.slli64	s0
    1d98:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1d9c:	0008                	0x8
    1d9e:	0501                	addi	a0,a0,0
    1da0:	001f 0402 0303      	0x3030402001f
    1da6:	097f                	0x97f
    1da8:	0002                	c.slli64	zero
    1daa:	0501                	addi	a0,a0,0
    1dac:	0018                	0x18
    1dae:	0402                	c.slli64	s0
    1db0:	09010303          	lb	t1,144(sp)
    1db4:	0002                	c.slli64	zero
    1db6:	0501                	addi	a0,a0,0
    1db8:	001f 0402 0603      	0x6030402001f
    1dbe:	02097f03          	0x2097f03
    1dc2:	0100                	addi	s0,sp,128
    1dc4:	0905                	addi	s2,s2,1
    1dc6:	0200                	addi	s0,sp,256
    1dc8:	0304                	addi	s1,sp,384
    1dca:	02090903          	lb	s2,32(s2)
    1dce:	0100                	addi	s0,sp,128
    1dd0:	1605                	addi	a2,a2,-31
    1dd2:	0200                	addi	s0,sp,256
    1dd4:	0304                	addi	s1,sp,384
    1dd6:	0306                	slli	t1,t1,0x1
    1dd8:	0900                	addi	s0,sp,144
    1dda:	0000                	unimp
    1ddc:	0501                	addi	a0,a0,0
    1dde:	001d                	c.nop	7
    1de0:	0402                	c.slli64	s0
    1de2:	097f0303          	lb	t1,151(t5)
    1de6:	0002                	c.slli64	zero
    1de8:	0501                	addi	a0,a0,0
    1dea:	0016                	c.slli	zero,0x5
    1dec:	0402                	c.slli64	s0
    1dee:	09010303          	lb	t1,144(sp)
    1df2:	0004                	0x4
    1df4:	0501                	addi	a0,a0,0
    1df6:	0402000f          	0x402000f
    1dfa:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1dfe:	0004                	0x4
    1e00:	0501                	addi	a0,a0,0
    1e02:	001d                	c.nop	7
    1e04:	0402                	c.slli64	s0
    1e06:	7f030603          	lb	a2,2032(t1)
    1e0a:	0409                	addi	s0,s0,2
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	0905                	addi	s2,s2,1
    1e10:	0200                	addi	s0,sp,256
    1e12:	0304                	addi	s1,sp,384
    1e14:	02090b03          	lb	s6,32(s2)
    1e18:	0100                	addi	s0,sp,128
    1e1a:	1c05                	addi	s8,s8,-31
    1e1c:	0200                	addi	s0,sp,256
    1e1e:	0304                	addi	s1,sp,384
    1e20:	0306                	slli	t1,t1,0x1
    1e22:	0900                	addi	s0,sp,144
    1e24:	0000                	unimp
    1e26:	0501                	addi	a0,a0,0
    1e28:	0018                	0x18
    1e2a:	0402                	c.slli64	s0
    1e2c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e30:	0004                	0x4
    1e32:	0501                	addi	a0,a0,0
    1e34:	001f 0402 0603      	0x6030402001f
    1e3a:	08097f03          	0x8097f03
    1e3e:	0100                	addi	s0,sp,128
    1e40:	0905                	addi	s2,s2,1
    1e42:	0200                	addi	s0,sp,256
    1e44:	0304                	addi	s1,sp,384
    1e46:	04090603          	lb	a2,64(s2)
    1e4a:	0100                	addi	s0,sp,128
    1e4c:	1805                	addi	a6,a6,-31
    1e4e:	0200                	addi	s0,sp,256
    1e50:	0304                	addi	s1,sp,384
    1e52:	0306                	slli	t1,t1,0x1
    1e54:	0900                	addi	s0,sp,144
    1e56:	0004                	0x4
    1e58:	0501                	addi	a0,a0,0
    1e5a:	001f 0402 0303      	0x3030402001f
    1e60:	0900                	addi	s0,sp,144
    1e62:	0004                	0x4
    1e64:	0501                	addi	a0,a0,0
    1e66:	0018                	0x18
    1e68:	0402                	c.slli64	s0
    1e6a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1e6e:	0004                	0x4
    1e70:	0501                	addi	a0,a0,0
    1e72:	0021                	c.nop	8
    1e74:	0402                	c.slli64	s0
    1e76:	097f0303          	lb	t1,151(t5)
    1e7a:	0002                	c.slli64	zero
    1e7c:	0501                	addi	a0,a0,0
    1e7e:	0018                	0x18
    1e80:	0402                	c.slli64	s0
    1e82:	09010303          	lb	t1,144(sp)
    1e86:	0002                	c.slli64	zero
    1e88:	0501                	addi	a0,a0,0
    1e8a:	0021                	c.nop	8
    1e8c:	0402                	c.slli64	s0
    1e8e:	7f030603          	lb	a2,2032(t1)
    1e92:	0209                	addi	tp,tp,2
    1e94:	0100                	addi	s0,sp,128
    1e96:	4b05                	li	s6,1
    1e98:	02090c03          	lb	s8,32(s2)
    1e9c:	0100                	addi	s0,sp,128
    1e9e:	0505                	addi	a0,a0,1
    1ea0:	00090203          	lb	tp,0(s2)
    1ea4:	0100                	addi	s0,sp,128
    1ea6:	00090103          	lb	sp,0(s2)
    1eaa:	0100                	addi	s0,sp,128
    1eac:	00090203          	lb	tp,0(s2)
    1eb0:	0100                	addi	s0,sp,128
    1eb2:	4b05                	li	s6,1
    1eb4:	0306                	slli	t1,t1,0x1
    1eb6:	0000097b          	0x97b
    1eba:	0501                	addi	a0,a0,0
    1ebc:	0309                	addi	t1,t1,2
    1ebe:	0905                	addi	s2,s2,1
    1ec0:	000c                	0xc
    1ec2:	0501                	addi	a0,a0,0
    1ec4:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1ec8:	0004                	0x4
    1eca:	0501                	addi	a0,a0,0
    1ecc:	0309                	addi	t1,t1,2
    1ece:	0905                	addi	s2,s2,1
    1ed0:	0002                	c.slli64	zero
    1ed2:	0501                	addi	a0,a0,0
    1ed4:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1ed8:	000a                	c.slli	zero,0x2
    1eda:	0301                	addi	t1,t1,0
    1edc:	0900                	addi	s0,sp,144
    1ede:	0006                	c.slli	zero,0x1
    1ee0:	0501                	addi	a0,a0,0
    1ee2:	0309                	addi	t1,t1,2
    1ee4:	0905                	addi	s2,s2,1
    1ee6:	0004                	0x4
    1ee8:	0501                	addi	a0,a0,0
    1eea:	0605                	addi	a2,a2,1
    1eec:	02090103          	lb	sp,32(s2)
    1ef0:	0100                	addi	s0,sp,128
    1ef2:	00090103          	lb	sp,0(s2)
    1ef6:	0100                	addi	s0,sp,128
    1ef8:	00090303          	lb	t1,0(s2)
    1efc:	0100                	addi	s0,sp,128
    1efe:	0c05                	addi	s8,s8,1
    1f00:	0306                	slli	t1,t1,0x1
    1f02:	0900                	addi	s0,sp,144
    1f04:	0000                	unimp
    1f06:	0501                	addi	a0,a0,0
    1f08:	0301                	addi	t1,t1,0
    1f0a:	00120907          	0x120907
    1f0e:	0501                	addi	a0,a0,0
    1f10:	030c                	addi	a1,sp,384
    1f12:	0979                	addi	s2,s2,30
    1f14:	0006                	c.slli	zero,0x1
    1f16:	0501                	addi	a0,a0,0
    1f18:	0601                	addi	a2,a2,0
    1f1a:	02090703          	lb	a4,32(s2)
    1f1e:	0100                	addi	s0,sp,128
    1f20:	0a05                	addi	s4,s4,1
    1f22:	0306                	slli	t1,t1,0x1
    1f24:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1f28:	0501                	addi	a0,a0,0
    1f2a:	0301                	addi	t1,t1,0
    1f2c:	097d                	addi	s2,s2,31
    1f2e:	0004                	0x4
    1f30:	0501                	addi	a0,a0,0
    1f32:	0605                	addi	a2,a2,1
    1f34:	04090303          	lb	t1,64(s2)
    1f38:	0100                	addi	s0,sp,128
    1f3a:	0a05                	addi	s4,s4,1
    1f3c:	0306                	slli	t1,t1,0x1
    1f3e:	0900                	addi	s0,sp,144
    1f40:	0000                	unimp
    1f42:	0501                	addi	a0,a0,0
    1f44:	0605                	addi	a2,a2,1
    1f46:	0e090203          	lb	tp,224(s2)
    1f4a:	0100                	addi	s0,sp,128
    1f4c:	1a05                	addi	s4,s4,-31
    1f4e:	0306                	slli	t1,t1,0x1
    1f50:	0900                	addi	s0,sp,144
    1f52:	0000                	unimp
    1f54:	0501                	addi	a0,a0,0
    1f56:	0014                	0x14
    1f58:	0402                	c.slli64	s0
    1f5a:	0601                	addi	a2,a2,0
    1f5c:	08090003          	lb	zero,128(s2)
    1f60:	0100                	addi	s0,sp,128
    1f62:	0505                	addi	a0,a0,1
    1f64:	0200                	addi	s0,sp,256
    1f66:	0104                	addi	s1,sp,128
    1f68:	0306                	slli	t1,t1,0x1
    1f6a:	0900                	addi	s0,sp,144
    1f6c:	0000                	unimp
    1f6e:	0501                	addi	a0,a0,0
    1f70:	0301                	addi	t1,t1,0
    1f72:	0909                	addi	s2,s2,2
    1f74:	0004                	0x4
    1f76:	0501                	addi	a0,a0,0
    1f78:	0009                	c.nop	2
    1f7a:	0402                	c.slli64	s0
    1f7c:	78030603          	lb	a2,1920(t1)
    1f80:	1009                	c.nop	-30
    1f82:	0100                	addi	s0,sp,128
    1f84:	1905                	addi	s2,s2,-31
    1f86:	0200                	addi	s0,sp,256
    1f88:	0304                	addi	s1,sp,384
    1f8a:	0306                	slli	t1,t1,0x1
    1f8c:	0900                	addi	s0,sp,144
    1f8e:	0000                	unimp
    1f90:	0501                	addi	a0,a0,0
    1f92:	001f 0402 0303      	0x3030402001f
    1f98:	097f                	0x97f
    1f9a:	0008                	0x8
    1f9c:	0501                	addi	a0,a0,0
    1f9e:	0015                	c.nop	5
    1fa0:	0402                	c.slli64	s0
    1fa2:	09010303          	lb	t1,144(sp)
    1fa6:	0004                	0x4
    1fa8:	0501                	addi	a0,a0,0
    1faa:	001f 0402 0603      	0x6030402001f
    1fb0:	04097f03          	0x4097f03
    1fb4:	0100                	addi	s0,sp,128
    1fb6:	6c05                	lui	s8,0x1
    1fb8:	02090c03          	lb	s8,32(s2)
    1fbc:	0100                	addi	s0,sp,128
    1fbe:	0505                	addi	a0,a0,1
    1fc0:	00090203          	lb	tp,0(s2)
    1fc4:	0100                	addi	s0,sp,128
    1fc6:	00090103          	lb	sp,0(s2)
    1fca:	0100                	addi	s0,sp,128
    1fcc:	00090103          	lb	sp,0(s2)
    1fd0:	0100                	addi	s0,sp,128
    1fd2:	00090103          	lb	sp,0(s2)
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	00090103          	lb	sp,0(s2)
    1fdc:	0100                	addi	s0,sp,128
    1fde:	00090103          	lb	sp,0(s2)
    1fe2:	0100                	addi	s0,sp,128
    1fe4:	00090303          	lb	t1,0(s2)
    1fe8:	0100                	addi	s0,sp,128
    1fea:	6c05                	lui	s8,0x1
    1fec:	0306                	slli	t1,t1,0x1
    1fee:	0976                	slli	s2,s2,0x1d
    1ff0:	0000                	unimp
    1ff2:	0501                	addi	a0,a0,0
    1ff4:	031e                	slli	t1,t1,0x7
    1ff6:	0911                	addi	s2,s2,4
    1ff8:	0008                	0x8
    1ffa:	0501                	addi	a0,a0,0
    1ffc:	036c                	addi	a1,sp,396
    1ffe:	0006096f          	jal	s2,61ffe <_stack_start+0x51ffe>
    2002:	0501                	addi	a0,a0,0
    2004:	0309                	addi	t1,t1,2
    2006:	090a                	slli	s2,s2,0x2
    2008:	000a                	c.slli	zero,0x2
    200a:	0501                	addi	a0,a0,0
    200c:	036c                	addi	a1,sp,396
    200e:	0976                	slli	s2,s2,0x1d
    2010:	0004                	0x4
    2012:	0501                	addi	a0,a0,0
    2014:	0309                	addi	t1,t1,2
    2016:	090a                	slli	s2,s2,0x2
    2018:	0004                	0x4
    201a:	0501                	addi	a0,a0,0
    201c:	036c                	addi	a1,sp,396
    201e:	0976                	slli	s2,s2,0x1d
    2020:	0004                	0x4
    2022:	0301                	addi	t1,t1,0
    2024:	0900                	addi	s0,sp,144
    2026:	0008                	0x8
    2028:	0501                	addi	a0,a0,0
    202a:	030a                	slli	t1,t1,0x2
    202c:	090e                	slli	s2,s2,0x3
    202e:	0002                	c.slli64	zero
    2030:	0501                	addi	a0,a0,0
    2032:	0309                	addi	t1,t1,2
    2034:	097c                	addi	a5,sp,156
    2036:	0004                	0x4
    2038:	0501                	addi	a0,a0,0
    203a:	0605                	addi	a2,a2,1
    203c:	04090403          	lb	s0,64(s2)
    2040:	0100                	addi	s0,sp,128
    2042:	0a05                	addi	s4,s4,1
    2044:	0306                	slli	t1,t1,0x1
    2046:	0900                	addi	s0,sp,144
    2048:	0000                	unimp
    204a:	0501                	addi	a0,a0,0
    204c:	0605                	addi	a2,a2,1
    204e:	10090303          	lb	t1,256(s2)
    2052:	0100                	addi	s0,sp,128
    2054:	0b05                	addi	s6,s6,1
    2056:	0306                	slli	t1,t1,0x1
    2058:	0900                	addi	s0,sp,144
    205a:	0004                	0x4
    205c:	0501                	addi	a0,a0,0
    205e:	0014                	0x14
    2060:	0402                	c.slli64	s0
    2062:	0601                	addi	a2,a2,0
    2064:	02090003          	lb	zero,32(s2)
    2068:	0100                	addi	s0,sp,128
    206a:	0505                	addi	a0,a0,1
    206c:	0200                	addi	s0,sp,256
    206e:	0104                	addi	s1,sp,128
    2070:	0306                	slli	t1,t1,0x1
    2072:	0900                	addi	s0,sp,144
    2074:	0000                	unimp
    2076:	0501                	addi	a0,a0,0
    2078:	0316                	slli	t1,t1,0x5
    207a:	0906                	slli	s2,s2,0x1
    207c:	0004                	0x4
    207e:	0501                	addi	a0,a0,0
    2080:	030c                	addi	a1,sp,384
    2082:	097f                	0x97f
    2084:	0006                	c.slli	zero,0x1
    2086:	0501                	addi	a0,a0,0
    2088:	0011                	c.nop	4
    208a:	0402                	c.slli64	s0
    208c:	0601                	addi	a2,a2,0
    208e:	02090003          	lb	zero,32(s2)
    2092:	0100                	addi	s0,sp,128
    2094:	0505                	addi	a0,a0,1
    2096:	0200                	addi	s0,sp,256
    2098:	0104                	addi	s1,sp,128
    209a:	0306                	slli	t1,t1,0x1
    209c:	0900                	addi	s0,sp,144
    209e:	0000                	unimp
    20a0:	0601                	addi	a2,a2,0
    20a2:	04090803          	lb	a6,64(s2)
    20a6:	0100                	addi	s0,sp,128
    20a8:	0905                	addi	s2,s2,1
    20aa:	0306                	slli	t1,t1,0x1
    20ac:	0900                	addi	s0,sp,144
    20ae:	0000                	unimp
    20b0:	0501                	addi	a0,a0,0
    20b2:	0605                	addi	a2,a2,1
    20b4:	0c090403          	lb	s0,192(s2)
    20b8:	0100                	addi	s0,sp,128
    20ba:	0a05                	addi	s4,s4,1
    20bc:	0306                	slli	t1,t1,0x1
    20be:	0900                	addi	s0,sp,144
    20c0:	0000                	unimp
    20c2:	0501                	addi	a0,a0,0
    20c4:	0605                	addi	a2,a2,1
    20c6:	0c090103          	lb	sp,192(s2)
    20ca:	0100                	addi	s0,sp,128
    20cc:	1405                	addi	s0,s0,-31
    20ce:	0200                	addi	s0,sp,256
    20d0:	0104                	addi	s1,sp,128
    20d2:	02090003          	lb	zero,32(s2)
    20d6:	0100                	addi	s0,sp,128
    20d8:	0505                	addi	a0,a0,1
    20da:	0200                	addi	s0,sp,256
    20dc:	0104                	addi	s1,sp,128
    20de:	0306                	slli	t1,t1,0x1
    20e0:	0900                	addi	s0,sp,144
    20e2:	0000                	unimp
    20e4:	0501                	addi	a0,a0,0
    20e6:	0301                	addi	t1,t1,0
    20e8:	00040907          	0x40907
    20ec:	0501                	addi	a0,a0,0
    20ee:	0009                	c.nop	2
    20f0:	0402                	c.slli64	s0
    20f2:	68030603          	lb	a2,1664(t1)
    20f6:	1609                	addi	a2,a2,-30
    20f8:	0100                	addi	s0,sp,128
    20fa:	1905                	addi	s2,s2,-31
    20fc:	0200                	addi	s0,sp,256
    20fe:	0304                	addi	s1,sp,384
    2100:	0306                	slli	t1,t1,0x1
    2102:	0900                	addi	s0,sp,144
    2104:	0000                	unimp
    2106:	0501                	addi	a0,a0,0
    2108:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    210c:	097f0303          	lb	t1,151(t5)
    2110:	0008                	0x8
    2112:	0501                	addi	a0,a0,0
    2114:	0015                	c.nop	5
    2116:	0402                	c.slli64	s0
    2118:	09010303          	lb	t1,144(sp)
    211c:	0004                	0x4
    211e:	0501                	addi	a0,a0,0
    2120:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2124:	7f030603          	lb	a2,2032(t1)
    2128:	0409                	addi	s0,s0,2
    212a:	0100                	addi	s0,sp,128
    212c:	0905                	addi	s2,s2,1
    212e:	02090603          	lb	a2,32(s2)
    2132:	0100                	addi	s0,sp,128
    2134:	0e05                	addi	t3,t3,1
    2136:	0306                	slli	t1,t1,0x1
    2138:	0900                	addi	s0,sp,144
    213a:	0000                	unimp
    213c:	0501                	addi	a0,a0,0
    213e:	0900030b          	0x900030b
    2142:	0002                	c.slli64	zero
    2144:	0501                	addi	a0,a0,0
    2146:	060d                	addi	a2,a2,3
    2148:	04090303          	lb	t1,64(s2)
    214c:	0100                	addi	s0,sp,128
    214e:	1905                	addi	s2,s2,-31
    2150:	0306                	slli	t1,t1,0x1
    2152:	0900                	addi	s0,sp,144
    2154:	0000                	unimp
    2156:	0501                	addi	a0,a0,0
    2158:	09000313          	li	t1,144
    215c:	0004                	0x4
    215e:	0501                	addi	a0,a0,0
    2160:	0018                	0x18
    2162:	0402                	c.slli64	s0
    2164:	0602                	c.slli64	a2
    2166:	02097c03          	0x2097c03
    216a:	0100                	addi	s0,sp,128
    216c:	0905                	addi	s2,s2,1
    216e:	0200                	addi	s0,sp,256
    2170:	0304                	addi	s1,sp,384
    2172:	06090e03          	lb	t3,96(s2)
    2176:	0100                	addi	s0,sp,128
    2178:	1905                	addi	s2,s2,-31
    217a:	0200                	addi	s0,sp,256
    217c:	0304                	addi	s1,sp,384
    217e:	0306                	slli	t1,t1,0x1
    2180:	0900                	addi	s0,sp,144
    2182:	0000                	unimp
    2184:	0501                	addi	a0,a0,0
    2186:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    218a:	097f0303          	lb	t1,151(t5)
    218e:	0008                	0x8
    2190:	0501                	addi	a0,a0,0
    2192:	0015                	c.nop	5
    2194:	0402                	c.slli64	s0
    2196:	09010303          	lb	t1,144(sp)
    219a:	0004                	0x4
    219c:	0501                	addi	a0,a0,0
    219e:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    21a2:	7f030603          	lb	a2,2032(t1)
    21a6:	0409                	addi	s0,s0,2
    21a8:	0100                	addi	s0,sp,128
    21aa:	0209                	addi	tp,tp,2
    21ac:	0000                	unimp
    21ae:	0101                	addi	sp,sp,0
    21b0:	0b05                	addi	s6,s6,1
    21b2:	0500                	addi	s0,sp,640
    21b4:	5002                	0x5002
    21b6:	0300000f          	fence	rw,unknown
    21ba:	05c5                	addi	a1,a1,17
    21bc:	0501                	addi	a0,a0,0
    21be:	0305                	addi	t1,t1,1
    21c0:	0901                	addi	s2,s2,0
    21c2:	0000                	unimp
    21c4:	0301                	addi	t1,t1,0
    21c6:	0901                	addi	s2,s2,0
    21c8:	0000                	unimp
    21ca:	0301                	addi	t1,t1,0
    21cc:	0901                	addi	s2,s2,0
    21ce:	0000                	unimp
    21d0:	0301                	addi	t1,t1,0
    21d2:	0901                	addi	s2,s2,0
    21d4:	0000                	unimp
    21d6:	0301                	addi	t1,t1,0
    21d8:	0901                	addi	s2,s2,0
    21da:	0000                	unimp
    21dc:	0301                	addi	t1,t1,0
    21de:	0901                	addi	s2,s2,0
    21e0:	0000                	unimp
    21e2:	0301                	addi	t1,t1,0
    21e4:	0902                	c.slli64	s2
    21e6:	0000                	unimp
    21e8:	0501                	addi	a0,a0,0
    21ea:	7803060b          	0x7803060b
    21ee:	0009                	c.nop	2
    21f0:	0100                	addi	s0,sp,128
    21f2:	0905                	addi	s2,s2,1
    21f4:	04090803          	lb	a6,64(s2)
    21f8:	0100                	addi	s0,sp,128
    21fa:	0b05                	addi	s6,s6,1
    21fc:	0e097803          	0xe097803
    2200:	0100                	addi	s0,sp,128
    2202:	1205                	addi	tp,tp,-31
    2204:	10091803          	lh	a6,256(s2)
    2208:	0100                	addi	s0,sp,128
    220a:	0905                	addi	s2,s2,1
    220c:	04097003          	0x4097003
    2210:	0100                	addi	s0,sp,128
    2212:	0505                	addi	a0,a0,1
    2214:	0306                	slli	t1,t1,0x1
    2216:	0901                	addi	s2,s2,0
    2218:	0002                	c.slli64	zero
    221a:	0301                	addi	t1,t1,0
    221c:	0901                	addi	s2,s2,0
    221e:	0000                	unimp
    2220:	0301                	addi	t1,t1,0
    2222:	0901                	addi	s2,s2,0
    2224:	0000                	unimp
    2226:	0301                	addi	t1,t1,0
    2228:	0901                	addi	s2,s2,0
    222a:	0000                	unimp
    222c:	0301                	addi	t1,t1,0
    222e:	0901                	addi	s2,s2,0
    2230:	0000                	unimp
    2232:	0301                	addi	t1,t1,0
    2234:	0901                	addi	s2,s2,0
    2236:	0000                	unimp
    2238:	0301                	addi	t1,t1,0
    223a:	0901                	addi	s2,s2,0
    223c:	0000                	unimp
    223e:	0301                	addi	t1,t1,0
    2240:	0909                	addi	s2,s2,2
    2242:	0000                	unimp
    2244:	0501                	addi	a0,a0,0
    2246:	0612                	slli	a2,a2,0x4
    2248:	00090003          	lb	zero,0(s2)
    224c:	0100                	addi	s0,sp,128
    224e:	0c05                	addi	s8,s8,1
    2250:	0c090103          	lb	sp,192(s2)
    2254:	0100                	addi	s0,sp,128
    2256:	1205                	addi	tp,tp,-31
    2258:	0a097f03          	0xa097f03
    225c:	0100                	addi	s0,sp,128
    225e:	0505                	addi	a0,a0,1
    2260:	0306                	slli	t1,t1,0x1
    2262:	0901                	addi	s2,s2,0
    2264:	0002                	c.slli64	zero
    2266:	0501                	addi	a0,a0,0
    2268:	0612                	slli	a2,a2,0x4
    226a:	00090103          	lb	sp,0(s2)
    226e:	0100                	addi	s0,sp,128
    2270:	0c05                	addi	s8,s8,1
    2272:	04097f03          	0x4097f03
    2276:	0100                	addi	s0,sp,128
    2278:	0505                	addi	a0,a0,1
    227a:	0306                	slli	t1,t1,0x1
    227c:	0901                	addi	s2,s2,0
    227e:	0002                	c.slli64	zero
    2280:	0501                	addi	a0,a0,0
    2282:	0612                	slli	a2,a2,0x4
    2284:	00090003          	lb	zero,0(s2)
    2288:	0100                	addi	s0,sp,128
    228a:	0505                	addi	a0,a0,1
    228c:	0306                	slli	t1,t1,0x1
    228e:	0902                	c.slli64	s2
    2290:	0004                	0x4
    2292:	0501                	addi	a0,a0,0
    2294:	0310                	addi	a2,sp,384
    2296:	0900                	addi	s0,sp,144
    2298:	0000                	unimp
    229a:	0501                	addi	a0,a0,0
    229c:	0605                	addi	a2,a2,1
    229e:	00090003          	lb	zero,0(s2)
    22a2:	0100                	addi	s0,sp,128
    22a4:	0905                	addi	s2,s2,1
    22a6:	0200                	addi	s0,sp,256
    22a8:	0304                	addi	s1,sp,384
    22aa:	0306                	slli	t1,t1,0x1
    22ac:	0902                	c.slli64	s2
    22ae:	0004                	0x4
    22b0:	0501                	addi	a0,a0,0
    22b2:	001f 0402 0603      	0x6030402001f
    22b8:	00090003          	lb	zero,0(s2)
    22bc:	0100                	addi	s0,sp,128
    22be:	1905                	addi	s2,s2,-31
    22c0:	0200                	addi	s0,sp,256
    22c2:	0304                	addi	s1,sp,384
    22c4:	06090003          	lb	zero,96(s2)
    22c8:	0100                	addi	s0,sp,128
    22ca:	1705                	addi	a4,a4,-31
    22cc:	0200                	addi	s0,sp,256
    22ce:	0304                	addi	s1,sp,384
    22d0:	0306                	slli	t1,t1,0x1
    22d2:	097e                	slli	s2,s2,0x1f
    22d4:	0006                	c.slli	zero,0x1
    22d6:	0501                	addi	a0,a0,0
    22d8:	0010                	0x10
    22da:	0402                	c.slli64	s0
    22dc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    22e0:	0000                	unimp
    22e2:	0501                	addi	a0,a0,0
    22e4:	0005                	c.nop	1
    22e6:	0402                	c.slli64	s0
    22e8:	00030603          	lb	a2,0(t1)
    22ec:	0209                	addi	tp,tp,2
    22ee:	0100                	addi	s0,sp,128
    22f0:	0905                	addi	s2,s2,1
    22f2:	0200                	addi	s0,sp,256
    22f4:	0304                	addi	s1,sp,384
    22f6:	0306                	slli	t1,t1,0x1
    22f8:	0909                	addi	s2,s2,2
    22fa:	0004                	0x4
    22fc:	0501                	addi	a0,a0,0
    22fe:	0402001b          	0x402001b
    2302:	097e0303          	lb	t1,151(t3)
    2306:	0000                	unimp
    2308:	0501                	addi	a0,a0,0
    230a:	0010                	0x10
    230c:	0402                	c.slli64	s0
    230e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2312:	0000                	unimp
    2314:	0501                	addi	a0,a0,0
    2316:	0009                	c.nop	2
    2318:	0402                	c.slli64	s0
    231a:	09090303          	lb	t1,144(s2)
    231e:	000c                	0xc
    2320:	0501                	addi	a0,a0,0
    2322:	0026                	c.slli	zero,0x9
    2324:	0402                	c.slli64	s0
    2326:	00030603          	lb	a2,0(t1)
    232a:	0009                	c.nop	2
    232c:	0100                	addi	s0,sp,128
    232e:	2005                	jal	234e <_min_stack+0x34e>
    2330:	0200                	addi	s0,sp,256
    2332:	0304                	addi	s1,sp,384
    2334:	06090003          	lb	zero,96(s2)
    2338:	0100                	addi	s0,sp,128
    233a:	1f05                	addi	t5,t5,-31
    233c:	0200                	addi	s0,sp,256
    233e:	0304                	addi	s1,sp,384
    2340:	0306                	slli	t1,t1,0x1
    2342:	097e                	slli	s2,s2,0x1f
    2344:	0004                	0x4
    2346:	0501                	addi	a0,a0,0
    2348:	0014                	0x14
    234a:	0402                	c.slli64	s0
    234c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2350:	0000                	unimp
    2352:	0501                	addi	a0,a0,0
    2354:	0005                	c.nop	1
    2356:	0402                	c.slli64	s0
    2358:	00030603          	lb	a2,0(t1)
    235c:	0009                	c.nop	2
    235e:	0100                	addi	s0,sp,128
    2360:	0905                	addi	s2,s2,1
    2362:	0200                	addi	s0,sp,256
    2364:	0304                	addi	s1,sp,384
    2366:	0306                	slli	t1,t1,0x1
    2368:	0909                	addi	s2,s2,2
    236a:	0004                	0x4
    236c:	0501                	addi	a0,a0,0
    236e:	001f 0402 0303      	0x3030402001f
    2374:	097e                	slli	s2,s2,0x1f
    2376:	0000                	unimp
    2378:	0501                	addi	a0,a0,0
    237a:	0014                	0x14
    237c:	0402                	c.slli64	s0
    237e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2382:	0000                	unimp
    2384:	0501                	addi	a0,a0,0
    2386:	0009                	c.nop	2
    2388:	0402                	c.slli64	s0
    238a:	09090303          	lb	t1,144(s2)
    238e:	000c                	0xc
    2390:	0501                	addi	a0,a0,0
    2392:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2396:	00030603          	lb	a2,0(t1)
    239a:	0009                	c.nop	2
    239c:	0100                	addi	s0,sp,128
    239e:	1d05                	addi	s10,s10,-31
    23a0:	0200                	addi	s0,sp,256
    23a2:	0304                	addi	s1,sp,384
    23a4:	06090003          	lb	zero,96(s2)
    23a8:	0100                	addi	s0,sp,128
    23aa:	1f05                	addi	t5,t5,-31
    23ac:	0200                	addi	s0,sp,256
    23ae:	0304                	addi	s1,sp,384
    23b0:	0306                	slli	t1,t1,0x1
    23b2:	097e                	slli	s2,s2,0x1f
    23b4:	0004                	0x4
    23b6:	0501                	addi	a0,a0,0
    23b8:	0014                	0x14
    23ba:	0402                	c.slli64	s0
    23bc:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    23c0:	0000                	unimp
    23c2:	0501                	addi	a0,a0,0
    23c4:	0005                	c.nop	1
    23c6:	0402                	c.slli64	s0
    23c8:	00030603          	lb	a2,0(t1)
    23cc:	0009                	c.nop	2
    23ce:	0100                	addi	s0,sp,128
    23d0:	0905                	addi	s2,s2,1
    23d2:	0200                	addi	s0,sp,256
    23d4:	0304                	addi	s1,sp,384
    23d6:	0306                	slli	t1,t1,0x1
    23d8:	0909                	addi	s2,s2,2
    23da:	000c                	0xc
    23dc:	0501                	addi	a0,a0,0
    23de:	0022                	c.slli	zero,0x8
    23e0:	0402                	c.slli64	s0
    23e2:	00030603          	lb	a2,0(t1)
    23e6:	0009                	c.nop	2
    23e8:	0100                	addi	s0,sp,128
    23ea:	1c05                	addi	s8,s8,-31
    23ec:	0200                	addi	s0,sp,256
    23ee:	0304                	addi	s1,sp,384
    23f0:	06090003          	lb	zero,96(s2)
    23f4:	0100                	addi	s0,sp,128
    23f6:	2105                	jal	2816 <_min_stack+0x816>
    23f8:	0200                	addi	s0,sp,256
    23fa:	0304                	addi	s1,sp,384
    23fc:	0306                	slli	t1,t1,0x1
    23fe:	097e                	slli	s2,s2,0x1f
    2400:	0004                	0x4
    2402:	0501                	addi	a0,a0,0
    2404:	0014                	0x14
    2406:	0402                	c.slli64	s0
    2408:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    240c:	0000                	unimp
    240e:	0501                	addi	a0,a0,0
    2410:	0005                	c.nop	1
    2412:	0402                	c.slli64	s0
    2414:	00030603          	lb	a2,0(t1)
    2418:	0009                	c.nop	2
    241a:	0100                	addi	s0,sp,128
    241c:	0306                	slli	t1,t1,0x1
    241e:	0908                	addi	a0,sp,144
    2420:	0004                	0x4
    2422:	0501                	addi	a0,a0,0
    2424:	0612                	slli	a2,a2,0x4
    2426:	00090003          	lb	zero,0(s2)
    242a:	0100                	addi	s0,sp,128
    242c:	1305                	addi	t1,t1,-31
    242e:	08090103          	lb	sp,128(s2)
    2432:	0100                	addi	s0,sp,128
    2434:	1205                	addi	tp,tp,-31
    2436:	08090103          	lb	sp,128(s2)
    243a:	0100                	addi	s0,sp,128
    243c:	1305                	addi	t1,t1,-31
    243e:	04097f03          	0x4097f03
    2442:	0100                	addi	s0,sp,128
    2444:	1205                	addi	tp,tp,-31
    2446:	04097f03          	0x4097f03
    244a:	0100                	addi	s0,sp,128
    244c:	0505                	addi	a0,a0,1
    244e:	0306                	slli	t1,t1,0x1
    2450:	0901                	addi	s2,s2,0
    2452:	0002                	c.slli64	zero
    2454:	0501                	addi	a0,a0,0
    2456:	00030613          	mv	a2,t1
    245a:	0009                	c.nop	2
    245c:	0100                	addi	s0,sp,128
    245e:	1205                	addi	tp,tp,-31
    2460:	02090103          	lb	sp,32(s2)
    2464:	0100                	addi	s0,sp,128
    2466:	02090903          	lb	s2,32(s2)
    246a:	0100                	addi	s0,sp,128
    246c:	1305                	addi	t1,t1,-31
    246e:	08097603          	0x8097603
    2472:	0100                	addi	s0,sp,128
    2474:	0505                	addi	a0,a0,1
    2476:	0306                	slli	t1,t1,0x1
    2478:	0901                	addi	s2,s2,0
    247a:	0002                	c.slli64	zero
    247c:	0301                	addi	t1,t1,0
    247e:	0909                	addi	s2,s2,2
    2480:	0000                	unimp
    2482:	0501                	addi	a0,a0,0
    2484:	0612                	slli	a2,a2,0x4
    2486:	00090003          	lb	zero,0(s2)
    248a:	0100                	addi	s0,sp,128
    248c:	0505                	addi	a0,a0,1
    248e:	0306                	slli	t1,t1,0x1
    2490:	0901                	addi	s2,s2,0
    2492:	0002                	c.slli64	zero
    2494:	0501                	addi	a0,a0,0
    2496:	00030613          	mv	a2,t1
    249a:	0009                	c.nop	2
    249c:	0100                	addi	s0,sp,128
    249e:	0505                	addi	a0,a0,1
    24a0:	0306                	slli	t1,t1,0x1
    24a2:	0901                	addi	s2,s2,0
    24a4:	0014                	0x14
    24a6:	0501                	addi	a0,a0,0
    24a8:	0612                	slli	a2,a2,0x4
    24aa:	00090003          	lb	zero,0(s2)
    24ae:	0100                	addi	s0,sp,128
    24b0:	1a05                	addi	s4,s4,-31
    24b2:	04091b03          	lh	s6,64(s2)
    24b6:	0100                	addi	s0,sp,128
    24b8:	1205                	addi	tp,tp,-31
    24ba:	04096503          	0x4096503
    24be:	0100                	addi	s0,sp,128
    24c0:	0505                	addi	a0,a0,1
    24c2:	0306                	slli	t1,t1,0x1
    24c4:	00020913          	mv	s2,tp
    24c8:	0501                	addi	a0,a0,0
    24ca:	0310                	addi	a2,sp,384
    24cc:	0900                	addi	s0,sp,144
    24ce:	0000                	unimp
    24d0:	0501                	addi	a0,a0,0
    24d2:	0612                	slli	a2,a2,0x4
    24d4:	00096d03          	0x96d03
    24d8:	0100                	addi	s0,sp,128
    24da:	1a05                	addi	s4,s4,-31
    24dc:	02091b03          	lh	s6,32(s2)
    24e0:	0100                	addi	s0,sp,128
    24e2:	0505                	addi	a0,a0,1
    24e4:	04097803          	0x4097803
    24e8:	0100                	addi	s0,sp,128
    24ea:	0905                	addi	s2,s2,1
    24ec:	0306                	slli	t1,t1,0x1
    24ee:	0901                	addi	s2,s2,0
    24f0:	0004                	0x4
    24f2:	0501                	addi	a0,a0,0
    24f4:	0003060b          	0x3060b
    24f8:	0009                	c.nop	2
    24fa:	0100                	addi	s0,sp,128
    24fc:	2705                	jal	2c1c <_min_stack+0xc1c>
    24fe:	02090003          	lb	zero,32(s2)
    2502:	0100                	addi	s0,sp,128
    2504:	0b05                	addi	s6,s6,1
    2506:	04090003          	lb	zero,64(s2)
    250a:	0100                	addi	s0,sp,128
    250c:	0d05                	addi	s10,s10,1
    250e:	0306                	slli	t1,t1,0x1
    2510:	0902                	c.slli64	s2
    2512:	000a                	c.slli	zero,0x2
    2514:	0501                	addi	a0,a0,0
    2516:	061a                	slli	a2,a2,0x6
    2518:	00090003          	lb	zero,0(s2)
    251c:	0100                	addi	s0,sp,128
    251e:	0d05                	addi	s10,s10,1
    2520:	0306                	slli	t1,t1,0x1
    2522:	0902                	c.slli64	s2
    2524:	000a                	c.slli	zero,0x2
    2526:	0501                	addi	a0,a0,0
    2528:	0305                	addi	t1,t1,1
    252a:	0909                	addi	s2,s2,2
    252c:	0000                	unimp
    252e:	0501                	addi	a0,a0,0
    2530:	0601                	addi	a2,a2,0
    2532:	00090103          	lb	sp,0(s2)
    2536:	0100                	addi	s0,sp,128
    2538:	0d05                	addi	s10,s10,1
    253a:	0200                	addi	s0,sp,256
    253c:	0204                	addi	s1,sp,256
    253e:	0306                	slli	t1,t1,0x1
    2540:	0979                	addi	s2,s2,30
    2542:	0018                	0x18
    2544:	0501                	addi	a0,a0,0
    2546:	001a                	c.slli	zero,0x6
    2548:	0402                	c.slli64	s0
    254a:	0602                	c.slli64	a2
    254c:	00090003          	lb	zero,0(s2)
    2550:	0100                	addi	s0,sp,128
    2552:	1805                	addi	a6,a6,-31
    2554:	0200                	addi	s0,sp,256
    2556:	0204                	addi	s1,sp,256
    2558:	0306                	slli	t1,t1,0x1
    255a:	0978                	addi	a4,sp,156
    255c:	0002                	c.slli64	zero
    255e:	0501                	addi	a0,a0,0
    2560:	0010                	0x10
    2562:	0402                	c.slli64	s0
    2564:	0302                	c.slli64	t1
    2566:	0900                	addi	s0,sp,144
    2568:	0000                	unimp
    256a:	0501                	addi	a0,a0,0
    256c:	0005                	c.nop	1
    256e:	0402                	c.slli64	s0
    2570:	0602                	c.slli64	a2
    2572:	02090003          	lb	zero,32(s2)
    2576:	0100                	addi	s0,sp,128
    2578:	0609                	addi	a2,a2,2
    257a:	0000                	unimp
    257c:	0101                	addi	sp,sp,0
    257e:	0150                	addi	a2,sp,132
    2580:	0000                	unimp
    2582:	001d0003          	lb	zero,1(s10)
    2586:	0000                	unimp
    2588:	0101                	addi	sp,sp,0
    258a:	000d0efb          	0xd0efb
    258e:	0101                	addi	sp,sp,0
    2590:	0101                	addi	sp,sp,0
    2592:	0000                	unimp
    2594:	0100                	addi	s0,sp,128
    2596:	0000                	unimp
    2598:	0001                	nop
    259a:	30747263          	bgeu	s0,t2,289e <_min_stack+0x89e>
    259e:	532e                	lw	t1,232(sp)
    25a0:	0000                	unimp
    25a2:	0000                	unimp
    25a4:	0000                	unimp
    25a6:	0205                	addi	tp,tp,1
    25a8:	0d54                	addi	a3,sp,660
    25aa:	0000                	unimp
    25ac:	0315                	addi	t1,t1,5
    25ae:	0904                	addi	s1,sp,144
    25b0:	0004                	0x4
    25b2:	0301                	addi	t1,t1,0
    25b4:	0901                	addi	s2,s2,0
    25b6:	0004                	0x4
    25b8:	0301                	addi	t1,t1,0
    25ba:	0901                	addi	s2,s2,0
    25bc:	0002                	c.slli64	zero
    25be:	0301                	addi	t1,t1,0
    25c0:	0901                	addi	s2,s2,0
    25c2:	0002                	c.slli64	zero
    25c4:	0301                	addi	t1,t1,0
    25c6:	0901                	addi	s2,s2,0
    25c8:	0002                	c.slli64	zero
    25ca:	0301                	addi	t1,t1,0
    25cc:	0901                	addi	s2,s2,0
    25ce:	0002                	c.slli64	zero
    25d0:	0301                	addi	t1,t1,0
    25d2:	0901                	addi	s2,s2,0
    25d4:	0002                	c.slli64	zero
    25d6:	0301                	addi	t1,t1,0
    25d8:	0901                	addi	s2,s2,0
    25da:	0002                	c.slli64	zero
    25dc:	0301                	addi	t1,t1,0
    25de:	0901                	addi	s2,s2,0
    25e0:	0002                	c.slli64	zero
    25e2:	0301                	addi	t1,t1,0
    25e4:	0901                	addi	s2,s2,0
    25e6:	0002                	c.slli64	zero
    25e8:	0301                	addi	t1,t1,0
    25ea:	0901                	addi	s2,s2,0
    25ec:	0002                	c.slli64	zero
    25ee:	0301                	addi	t1,t1,0
    25f0:	0901                	addi	s2,s2,0
    25f2:	0002                	c.slli64	zero
    25f4:	0301                	addi	t1,t1,0
    25f6:	0901                	addi	s2,s2,0
    25f8:	0002                	c.slli64	zero
    25fa:	0301                	addi	t1,t1,0
    25fc:	0901                	addi	s2,s2,0
    25fe:	0002                	c.slli64	zero
    2600:	0301                	addi	t1,t1,0
    2602:	0901                	addi	s2,s2,0
    2604:	0002                	c.slli64	zero
    2606:	0301                	addi	t1,t1,0
    2608:	0901                	addi	s2,s2,0
    260a:	0002                	c.slli64	zero
    260c:	0301                	addi	t1,t1,0
    260e:	0901                	addi	s2,s2,0
    2610:	0002                	c.slli64	zero
    2612:	0301                	addi	t1,t1,0
    2614:	0901                	addi	s2,s2,0
    2616:	0002                	c.slli64	zero
    2618:	0301                	addi	t1,t1,0
    261a:	0901                	addi	s2,s2,0
    261c:	0002                	c.slli64	zero
    261e:	0301                	addi	t1,t1,0
    2620:	0901                	addi	s2,s2,0
    2622:	0002                	c.slli64	zero
    2624:	0301                	addi	t1,t1,0
    2626:	0901                	addi	s2,s2,0
    2628:	0002                	c.slli64	zero
    262a:	0301                	addi	t1,t1,0
    262c:	0901                	addi	s2,s2,0
    262e:	0002                	c.slli64	zero
    2630:	0301                	addi	t1,t1,0
    2632:	0901                	addi	s2,s2,0
    2634:	0002                	c.slli64	zero
    2636:	0301                	addi	t1,t1,0
    2638:	0901                	addi	s2,s2,0
    263a:	0002                	c.slli64	zero
    263c:	0301                	addi	t1,t1,0
    263e:	0901                	addi	s2,s2,0
    2640:	0002                	c.slli64	zero
    2642:	0301                	addi	t1,t1,0
    2644:	0901                	addi	s2,s2,0
    2646:	0002                	c.slli64	zero
    2648:	0301                	addi	t1,t1,0
    264a:	0901                	addi	s2,s2,0
    264c:	0002                	c.slli64	zero
    264e:	0301                	addi	t1,t1,0
    2650:	0901                	addi	s2,s2,0
    2652:	0002                	c.slli64	zero
    2654:	0301                	addi	t1,t1,0
    2656:	0901                	addi	s2,s2,0
    2658:	0002                	c.slli64	zero
    265a:	0301                	addi	t1,t1,0
    265c:	0901                	addi	s2,s2,0
    265e:	0002                	c.slli64	zero
    2660:	0301                	addi	t1,t1,0
    2662:	0901                	addi	s2,s2,0
    2664:	0002                	c.slli64	zero
    2666:	0301                	addi	t1,t1,0
    2668:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    266c:	0301                	addi	t1,t1,0
    266e:	0906                	slli	s2,s2,0x1
    2670:	0008                	0x8
    2672:	0301                	addi	t1,t1,0
    2674:	0901                	addi	s2,s2,0
    2676:	0008                	0x8
    2678:	0301                	addi	t1,t1,0
    267a:	0902                	c.slli64	s2
    267c:	0008                	0x8
    267e:	0301                	addi	t1,t1,0
    2680:	00040903          	lb	s2,0(s0)
    2684:	0301                	addi	t1,t1,0
    2686:	0901                	addi	s2,s2,0
    2688:	0004                	0x4
    268a:	0301                	addi	t1,t1,0
    268c:	0901                	addi	s2,s2,0
    268e:	0002                	c.slli64	zero
    2690:	0301                	addi	t1,t1,0
    2692:	0906                	slli	s2,s2,0x1
    2694:	0004                	0x4
    2696:	0301                	addi	t1,t1,0
    2698:	0901                	addi	s2,s2,0
    269a:	0004                	0x4
    269c:	0301                	addi	t1,t1,0
    269e:	0901                	addi	s2,s2,0
    26a0:	0004                	0x4
    26a2:	0901                	addi	s2,s2,0
    26a4:	0004                	0x4
    26a6:	0100                	addi	s0,sp,128
    26a8:	0001                	nop
    26aa:	0205                	addi	tp,tp,1
    26ac:	0000                	unimp
    26ae:	0000                	unimp
    26b0:	0100cb03          	lbu	s6,16(ra)
    26b4:	7c090103          	lb	sp,1984(s2)
    26b8:	0100                	addi	s0,sp,128
    26ba:	04090403          	lb	s0,64(s2)
    26be:	0100                	addi	s0,sp,128
    26c0:	04090403          	lb	s0,64(s2)
    26c4:	0100                	addi	s0,sp,128
    26c6:	04090403          	lb	s0,64(s2)
    26ca:	0100                	addi	s0,sp,128
    26cc:	0409                	addi	s0,s0,2
    26ce:	0000                	unimp
    26d0:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0x20>
    switch(length%3) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
  a0:	7200                	flw	fs0,32(a2)
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
            for (i = 0; i < (length / 3); i++) {
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < ((length-2) / 3); i++) {
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
  b8:	72636573          	csrrsi	a0,0x726,6
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
            a1[length-1] = a1[length-1] + a2[length-1];
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
  c8:	6572                	flw	fa0,28(sp)
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	735f6377          	0x735f6377
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	735f 6174 6574      	0x65746174735f
            a1[length-2] = a1[length-2] + a2[length-2];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x10a>
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
    asm volatile(
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 10a:	4e5f 6900 736e      	0x736e69004e5f
    asm volatile(
 110:	7274                	flw	fa3,100(a2)
 112:	6d5f 646f 7000      	0x7000646f6d5f
 118:	6d796c6f          	jal	s8,96fee <_stack_start+0x86fee>
            for (i = 0; i < ((length-1) / 3); i++) {
 11c:	6c75                	lui	s8,0x1d
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0074                	addi	a3,sp,12
 120:	755f 7562 0066      	0x667562755f
    asm volatile(
 126:	625f 7361 0065      	0x657361625f
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	5f5f 6d74 685f      	0x685f6d745f5f
    asm volatile(
 132:	0072756f          	jal	a0,27938 <_stack_start+0x17938>
    switch(length%3) {
 136:	5f5f 6673 5f00      	0x5f0066735f5f
 13c:	655f6e6f          	jal	t3,f6f90 <_stack_start+0xe6f90>
 140:	6978                	flw	fa4,84(a0)
 142:	5f74                	lw	a3,124(a4)
 144:	7261                	lui	tp,0xffff8
 146:	5f007367          	0x5f007367
            for (i = 0; i < (length / 3); i++) {
 14a:	6b6f6f63          	bltu	t5,s6,808 <ext_euclid+0x13c>
    asm volatile(
 14e:	6569                	lui	a0,0x1a
            for (i = 0; i < (length / 3); i++) {
 150:	5f00                	lw	s0,56(a4)
 152:	735f 6c67 6575      	0x65756c67735f
            for (i = 0; i < ((length-2) / 3); i++) {
 158:	7200                	flw	fs0,32(a2)
 15a:	7365                	lui	t1,0xffff9
 15c:	0031                	c.nop	12
 15e:	6572                	flw	fa0,28(sp)
    asm volatile(
 160:	5f003273          	csrrc	tp,0x5f0,zero
            for (i = 0; i < ((length-2) / 3); i++) {
 164:	6c66                	flw	fs8,88(sp)
            a1[length-1] = a1[length-1] % mod;
 166:	6761                	lui	a4,0x18
 168:	695f0073          	0x695f0073
 16c:	78635f73          	csrrwi	t5,0x786,6
 170:	0061                	c.nop	24
 172:	735f 6474 6e69      	0x6e696474735f
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	5f00                	lw	s0,56(a4)
 17a:	6c62                	flw	fs8,24(sp)
 17c:	7a69736b          	0x7a69736b
 180:	0065                	c.nop	25
    asm volatile(
 182:	7270                	flw	fa2,100(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
 184:	6375646f          	jal	s0,56fba <_stack_start+0x46fba>
            a1[length-1] = a1[length-1] % mod;
 188:	0074                	addi	a3,sp,12
            a1[length-2] = a1[length-2] % mod;
 18a:	6f70                	flw	fa2,92(a4)
 18c:	796c                	flw	fa1,116(a0)
 18e:	6964                	flw	fs1,84(a0)
 190:	0076                	c.slli	zero,0x1d
 192:	6f70                	flw	fa2,92(a4)
 194:	796c                	flw	fa1,116(a0)
} //end of function
 196:	0066                	c.slli	zero,0x19
    asm volatile(
 198:	635f 7476 7562      	0x75627476635f
 19e:	0066                	c.slli	zero,0x19
 1a0:	6f5f 6666 6573      	0x657366666f5f
 1a6:	0074                	addi	a3,sp,12
 1a8:	6d5f 7362 7472      	0x747273626d5f
 1ae:	7363776f          	jal	a4,378e4 <_stack_start+0x278e4>
            for (i = 0; i < ((length-1) / 3); i++) {
 1b2:	735f 6174 6574      	0x65746174735f
    asm volatile(
 1b8:	5f00                	lw	s0,56(a4)
 1ba:	626d                	lui	tp,0x1b
 1bc:	6c72                	flw	fs8,28(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
 1be:	6e65                	lui	t3,0x19
 1c0:	735f 6174 6574      	0x65746174735f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c6:	5f00                	lw	s0,56(a4)
 1c8:	6e66                	flw	ft8,88(sp)
 1ca:	7261                	lui	tp,0xffff8
 1cc:	6e007367          	0x6e007367
 1d0:	7274                	flw	fa3,100(a2)
 1d2:	5f75                	li	t5,-3
 1d4:	6564                	flw	fs1,76(a0)
 1d6:	70796563          	bltu	s2,t2,8e0 <ext_euclid+0x214>
 1da:	0074                	addi	a3,sp,12
 1dc:	665f 736e 5f00      	0x5f00736e665f
 1e2:	6e676973          	csrrsi	s2,0x6e6,14
 1e6:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 1e8:	6c66                	flw	fs8,88(sp)
 1ea:	5f6b636f          	jal	t1,b67e0 <_stack_start+0xa67e0>
 1ee:	0074                	addi	a3,sp,12
 1f0:	735f 6474 7265      	0x72656474735f
 1f6:	0072                	c.slli	zero,0x1c
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1f8:	425f 6769 6e69      	0x6e696769425f
    int polb[size_b];
 1fe:	0074                	addi	a3,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 200:	675f 6d61 616d      	0x616d6d61675f
    int line[size_b][size_a + size_b];
 206:	735f 6769 676e      	0x676e6769735f
    for (i = 0; i < size_b; ++i){
 20c:	6d61                	lui	s10,0x18
            product[j] = 0;
 20e:	5f00                	lw	s0,56(a4)
 210:	6572                	flw	fa0,28(sp)
 212:	6461                	lui	s0,0x18
 214:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
 216:	6572                	flw	fa0,28(sp)
 218:	746c7573          	csrrci	a0,0x746,24
 21c:	6b5f 5f00 745f      	0x745f5f006b5f
    int pola[size_a];
 222:	006d                	c.nop	27
 224:	6564                	flw	fs1,76(a0)
    int line[size_b][size_a + size_b];
 226:	756e                	flw	fa0,248(sp)
    int pola[size_a];
 228:	5f6d                	li	t5,-5
 22a:	6574                	flw	fa3,76(a0)
 22c:	706d                	c.lui	zero,0xffffb
    int polb[size_b];
 22e:	5f00                	lw	s0,56(a4)
 230:	775f 6863 0062      	0x626863775f
    for (i = 0; i < size_b; ++i){
 236:	6572                	flw	fa0,28(sp)
 238:	746c7573          	csrrci	a0,0x746,24
    for (i = 0; i < size_a; ++i){
 23c:	006e6f6b          	0x6e6f6b
 240:	735f 6474 756f      	0x756f6474735f
    array_mod(pola,mod,size_a);
 246:	0074                	addi	a3,sp,12
 248:	635f 7476 656c      	0x656c7476635f
    for (i = 0; i < size_b; ++i){
 24e:	006e                	c.slli	zero,0x1b
 250:	72636573          	csrrsi	a0,0x726,6
 254:	7465                	lui	s0,0xffff9
 256:	6b5f 7965 665f      	0x665f79656b5f
    array_mod(polb,mod,size_b);
 25c:	0071                	c.nop	28
 25e:	665f 6c69 0065      	0x656c69665f
    if(star_mult == 1){
 264:	6572                	flw	fa0,28(sp)
 266:	7574                	flw	fa3,108(a0)
 268:	6e72                	flw	ft8,28(sp)
 26a:	615f 6464 6572      	0x65726464615f
 270:	00317373          	csrrci	t1,fcsr,2
        for (j = size_b -1; j >= 0; j = j-1){
 274:	6572                	flw	fa0,28(sp)
 276:	7574                	flw	fa3,108(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 278:	6e72                	flw	ft8,28(sp)
 27a:	615f 6464 6572      	0x65726464615f
            product[j] = 0;
 280:	00327373          	csrrci	t1,fcsr,4
            line[i][j] = 0;
 284:	6572                	flw	fa0,28(sp)
            product[j] = 0;
 286:	7574                	flw	fa3,108(a0)
 288:	6e72                	flw	ft8,28(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 28a:	615f 6464 6572      	0x65726464615f
 290:	00337373          	csrrci	t1,fcsr,6
    for (i = 0; i < size_b; ++i){
 294:	6572                	flw	fa0,28(sp)
 296:	7574                	flw	fa3,108(a0)
 298:	6e72                	flw	ft8,28(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	615f 6464 6572      	0x65726464615f
        pola[i] = a[i];
 2a0:	00347373          	csrrci	t1,fcsr,8
 2a4:	6e5f 6f69 7362      	0x73626f696e5f
    for (i = 0; i < size_a; ++i){
 2aa:	7200                	flw	fs0,32(a2)
        pola[i] = a[i];
 2ac:	7465                	lui	s0,0xffff9
    for (i = 0; i < size_a; ++i){
 2ae:	7275                	lui	tp,0xffffd
        polb[i] = b[i];
 2b0:	5f6e                	lw	t5,248(sp)
 2b2:	6461                	lui	s0,0x18
 2b4:	7264                	flw	fs1,100(a2)
 2b6:	7365                	lui	t1,0xffff9
 2b8:	72003673          	csrrc	a2,0x720,zero
    for (i = 0; i < size_b; ++i){
 2bc:	7465                	lui	s0,0xffff9
        polb[i] = b[i];
 2be:	7275                	lui	tp,0xffffd
    for (i = 0; i < size_b; ++i){
 2c0:	5f6e                	lw	t5,248(sp)
    if(star_mult == 1){
 2c2:	6461                	lui	s0,0x18
        for (j = size_b -1; j >= 0; j = j-1){
 2c4:	7264                	flw	fs1,100(a2)
 2c6:	7365                	lui	t1,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 2c8:	73003773          	csrrc	a4,0x730,zero
    for (i = 0; i < size_b; ++i){
 2cc:	6f68                	flw	fa0,92(a4)
        for(i = 0; i < size_b; ++i){
 2ce:	7472                	flw	fs0,60(sp)
            array_add(product,line[i],size_a+size_b-1);
 2d0:	7520                	flw	fs0,104(a0)
 2d2:	736e                	flw	ft6,248(sp)
 2d4:	6769                	lui	a4,0x1a
 2d6:	656e                	flw	fa0,216(sp)
 2d8:	2064                	fld	fs1,192(s0)
        for(i = 0; i < size_b; ++i){
 2da:	6e69                	lui	t3,0x1a
 2dc:	0074                	addi	a3,sp,12
    array_mod(product,mod,(size_a+size_b-1));
 2de:	615f 6574 6978      	0x69786574615f
 2e4:	3074                	fld	fa3,224(s0)
 2e6:	5f00                	lw	s0,56(a4)
 2e8:	6e676973          	csrrsi	s2,0x6e6,14
}
 2ec:	6c61                	lui	s8,0x18
 2ee:	625f 6675 5f00      	0x5f006675625f
 2f4:	7361                	lui	t1,0xffff8
 2f6:	6d697463          	bgeu	s2,s6,9be <generate_keys+0xa8>
 2fa:	5f65                	li	t5,-7
 2fc:	7562                	flw	fa0,56(sp)
 2fe:	0066                	c.slli	zero,0x19
 300:	725f 7365 6c75      	0x6c757365725f
 306:	0074                	addi	a3,sp,12
 308:	5f5f 6377 0068      	0x6863775f5f
 30e:	6d6f682f          	0x6d6f682f
 312:	2f65                	jal	aca <generate_keys+0x1b4>
                line[size_b-1-j][k] = pola[k]*polb[j];
 314:	6f74                	flw	fa3,92(a4)
 316:	6170                	flw	fa2,68(a0)
 318:	636c                	flw	fa1,68(a4)
 31a:	7365442f          	0x7365442f
 31e:	706f746b          	0x706f746b
 322:	7469672f          	0x7469672f
 326:	7568                	flw	fa0,108(a0)
 328:	2f62                	fld	ft10,24(sp)
 32a:	696e6573          	csrrsi	a0,0x696,28
            for (k = size_a-1; k >= 0; k = k-1 ){
 32e:	705f726f          	jal	tp,f8232 <_stack_start+0xe8232>
        for (j = size_b -1; j >= 0; j = j-1){
 332:	6f72                	flw	ft10,28(sp)
 334:	656a                	flw	fa0,152(sp)
 336:	732f7463          	bgeu	t5,s2,a5e <generate_keys+0x148>
            for (k = size_a-1; k >= 0; k = k-1 ){
 33a:	6c6f2f77          	0x6c6f2f77
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 33e:	6c6d7563          	bgeu	s10,t1,a08 <generate_keys+0xf2>
 342:	7265                	lui	tp,0xffff9
 344:	6d2e342f          	0x6d2e342f
 348:	612b646f          	jal	s0,b695a <_stack_start+0xa695a>
            for (k = size_a-1; k >= 0; k = k-1 ){
 34c:	6464                	flw	fs1,76(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 34e:	7700                	flw	fs0,40(a4)
 350:	6e69                	lui	t3,0x1a
 352:	5f74                	lw	a3,124(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 354:	0074                	addi	a3,sp,12
 356:	656e6567          	0x656e6567
        for (j = size_b -1; j >= 0; j = j-1){
 35a:	6172                	flw	ft2,28(sp)
 35c:	6574                	flw	fa3,76(a0)
 35e:	6b5f 7965 0073      	0x7379656b5f
        array_mod(line[i],mod,(size_a+size_b-1));
 364:	5f5f 7562 6c69      	0x6c6975625f5f
    for (i = 0; i < size_b; ++i){
 36a:	6974                	flw	fa3,84(a0)
 36c:	5f6e                	lw	t5,248(sp)
            array_add(product,line[i],size_a+size_b-1);
 36e:	656d                	lui	a0,0x1b
 370:	636d                	lui	t1,0x1b
 372:	7970                	flw	fa2,116(a0)
        for(i = 0; i < size_b; ++i){
 374:	5f00                	lw	s0,56(a4)
 376:	6f6c                	flw	fa1,92(a4)
 378:	4e006b63          	bltu	zero,zero,86e <ext_euclid+0x1a2>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 37c:	5254                	lw	a3,36(a2)
 37e:	5f55                	li	t5,-11
    int line[size_b][size_a + size_b];
 380:	3834                	fld	fa3,112(s0)
 382:	625f 7469 2e4d      	0x2e4d7469625f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 388:	72700063          	beq	zero,t2,aa8 <generate_keys+0x192>
    int line[size_b][size_a + size_b];
 38c:	6375646f          	jal	s0,571c2 <_stack_start+0x471c2>
 390:	3274                	fld	fa3,224(a2)
 392:	6500                	flw	fs0,8(a0)
 394:	7478                	flw	fa4,108(s0)
 396:	655f 6375 696c      	0x696c6375655f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 39c:	0064                	addi	s1,sp,12
 39e:	775f 6972 6574      	0x65746972775f
 3a4:	5f00                	lw	s0,56(a4)
    int pola[size_a];
 3a6:	745f 5f6d 6579      	0x65795f6d745f
    int line[size_b][size_a + size_b];
 3ac:	7261                	lui	tp,0xffff8
 3ae:	7000                	flw	fs0,32(s0)
 3b0:	00626c6f          	jal	s8,263b6 <_stack_start+0x163b6>
    int pola[size_a];
 3b4:	6172                	flw	ft2,28(sp)
 3b6:	646e                	flw	fs0,216(sp)
 3b8:	765f6d6f          	jal	s10,f731c <_stack_start+0xe731c>
 3bc:	6c61                	lui	s8,0x18
 3be:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 3c0:	6d6e                	flw	fs10,216(sp)
 3c2:	6c61                	lui	s8,0x18
 3c4:	6f6c                	flw	fa1,92(a4)
    int pola[size_a];
 3c6:	6f6c0063          	beq	s8,s6,aa6 <generate_keys+0x190>
    int polb[size_b];
 3ca:	676e                	flw	fa4,216(sp)
    int line[size_b][size_a + size_b];
 3cc:	6420                	flw	fs0,72(s0)
    int polb[size_b];
 3ce:	6c62756f          	jal	a0,27a94 <_stack_start+0x17a94>
    for (i = 0; i < size_b; ++i){
 3d2:	0065                	c.nop	25
 3d4:	6e5f 7865 6674      	0x667478656e5f
            product2[j] = 0;
 3da:	6d00                	flw	fs0,24(a0)
 3dc:	7365                	lui	t1,0xffff9
    for (i = 0; i < size_b; ++i){
 3de:	65676173          	csrrsi	sp,0x656,14
    for(i = 0; i < size_a; ++i){
 3e2:	5f00                	lw	s0,56(a4)
 3e4:	745f 5f6d 6f6d      	0x6f6d5f6d745f
    for(i = 0; i < size_b; ++i){
 3ea:	006e                	c.slli	zero,0x1b
 3ec:	6572                	flw	fa0,28(sp)
    if(star_mult == 1){
 3ee:	7574                	flw	fa3,108(a0)
 3f0:	6e72                	flw	ft8,28(sp)
 3f2:	615f 6464 6572      	0x65726464615f
 3f8:	00357373          	csrrci	t1,fcsr,10
 3fc:	615f 6574 6978      	0x69786574615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 402:	0074                	addi	a3,sp,12
 404:	6f627573          	csrrci	a0,0x6f6,4
            product2[j] = 0;
 408:	7470                	flw	fa2,108(s0)
 40a:	7261                	lui	tp,0xffff8
            line[i][j] = 0;
 40c:	5f5f0067          	jr	1525(t5)
            product2[j] = 0;
 410:	64696473          	csrrsi	s0,0x646,18
        for(j = 0; j < size_a + size_b -1; ++j){
 414:	6e69                	lui	t3,0x1a
 416:	7469                	lui	s0,0xffffa
 418:	5f00                	lw	s0,56(a4)
 41a:	5f66666f          	jal	a2,66a10 <_stack_start+0x56a10>
    for (i = 0; i < size_b; ++i){
 41e:	0074                	addi	a3,sp,12
 420:	6e45                	lui	t3,0x11
 422:	654d5f63          	bge	s10,s4,a80 <generate_keys+0x16a>
        for(j = 0; j < size_a + size_b -1; ++j){
 426:	67617373          	csrrci	t1,0x676,2
        pola[i] = a[i];
 42a:	0065                	c.nop	25
 42c:	746e6f63          	bltu	t3,t1,b8a <generate_keys+0x274>
 430:	6f72                	flw	ft10,28(sp)
 432:	526c                	lw	a1,100(a2)
 434:	5f00                	lw	s0,56(a4)
    for(i = 0; i < size_a; ++i){
 436:	7266                	flw	ft4,120(sp)
        pola[i] = a[i];
 438:	6565                	lui	a0,0x19
 43a:	696c                	flw	fa1,84(a0)
    for(i = 0; i < size_a; ++i){
 43c:	72007473          	csrrci	s0,0x720,0
        polb[i] = b[i];
 440:	6e69                	lui	t3,0x1a
 442:	6f705f67          	0x6f705f67
 446:	796c                	flw	fa1,116(a0)
 448:	5f00                	lw	s0,56(a4)
 44a:	4f4c                	lw	a1,28(a4)
    for(i = 0; i < size_b; ++i){
 44c:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
        polb[i] = b[i];
 450:	4345                	li	t1,17
    for(i = 0; i < size_b; ++i){
 452:	5255                	li	tp,-11
                line[size_b-1-j][k] = pola[k]*polb[j];
 454:	45564953          	0x45564953
 458:	545f 7400 5f69      	0x5f697400545f
 45e:	0031                	c.nop	12
 460:	6974                	flw	fa3,84(a0)
 462:	325f 7500 736e      	0x736e7500325f
 468:	6769                	lui	a4,0x1a
 46a:	656e                	flw	fa0,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 46c:	2064                	fld	fs1,192(s0)
 46e:	72616863          	bltu	sp,t1,b9e <generate_keys+0x288>
        for (j = size_b -1; j >= 0; j = j-1){
 472:	7100                	flw	fs0,32(a0)
 474:	5f69                	li	t5,-6
 476:	0031                	c.nop	12
 478:	6e5f 7765 5f00      	0x5f0077656e5f
        array_add(product2,line[i],size_a+size_b-1);
 47e:	5f68                	lw	a0,124(a4)
 480:	7265                	lui	tp,0xffff9
 482:	6e72                	flw	ft8,28(sp)
    for(i=0;i<size_b;++i){
 484:	6873006f          	j	3130a <_stack_start+0x2130a>
}
 488:	2074726f          	jal	tp,47e8e <_stack_start+0x37e8e>
 48c:	6e69                	lui	t3,0x1a
 48e:	0074                	addi	a3,sp,12
 490:	5f5f 6d74 795f      	0x795f6d745f5f
 496:	6164                	flw	fs1,68(a0)
 498:	0079                	c.nop	30
 49a:	5f5f 6273 6675      	0x667562735f5f
 4a0:	5f00                	lw	s0,56(a4)
 4a2:	6c66                	flw	fs8,88(sp)
 4a4:	6761                	lui	a4,0x18
 4a6:	5f003273          	csrrc	tp,0x5f0,zero
            for (k = size_a-1; k >= 0; k = k-1 ){
 4aa:	6f69                	lui	t5,0x1a
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 4ac:	7362                	flw	ft6,56(sp)
 4ae:	5f00                	lw	s0,56(a4)
 4b0:	465f 4c49 0045      	0x454c49465f
 4b6:	6d5f 7362 6174      	0x617473626d5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 4bc:	6574                	flw	fa3,76(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 4be:	745f 5f00 735f      	0x735f5f00745f
 4c4:	4946                	lw	s2,80(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 4c6:	454c                	lw	a1,12(a0)
 4c8:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 4ca:	626d                	lui	tp,0x1b
 4cc:	74617473          	csrrci	s0,0x746,2
 4d0:	0065                	c.nop	25
        array_add(product2,line[i],size_a+size_b-1);
 4d2:	725f 6e61 5f64      	0x5f646e61725f
 4d8:	656e                	flw	fa0,216(sp)
    for(i=0;i<size_b;++i){
 4da:	7478                	flw	fa4,108(s0)
 4dc:	5f00                	lw	s0,56(a4)
 4de:	626d                	lui	tp,0x1b
    int v[size_N];
 4e0:	656c                	flw	fa1,76(a0)
 4e2:	5f6e                	lw	t5,248(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4e4:	74617473          	csrrci	s0,0x746,2
    int v[size_N];
 4e8:	0065                	c.nop	25
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4ea:	695f 636e 5f00      	0x5f00636e695f
 4f0:	6e69                	lui	t3,0x1a
 4f2:	0064                	addi	s1,sp,12
 4f4:	6c5f 636f 6c61      	0x6c61636f6c5f
 4fa:	0065                	c.nop	25
 4fc:	5f5f 6c63 6165      	0x61656c635f5f
 502:	756e                	flw	fa0,248(sp)
 504:	0070                	addi	a2,sp,12
    int v[size_N];
 506:	755f 736e 6570      	0x6570736e755f
    int q[size_N];
 50c:	69666963          	bltu	a2,s6,b9e <generate_keys+0x288>
 510:	6465                	lui	s0,0x19
    int num_temp[size_N];
 512:	6c5f 636f 6c61      	0x6c61636f6c5f
    int denum_temp[size_D];
 518:	5f65                	li	t5,-7
 51a:	6e69                	lui	t3,0x1a
 51c:	6f66                	flw	ft10,88(sp)
    int num_temp[size_N];
 51e:	5f00                	lw	s0,56(a4)
    int denum_temp[size_D];
 520:	616d                	addi	sp,sp,240
 522:	7778                	flw	fa4,108(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 524:	7364                	flw	fs1,100(a4)
 526:	5f00                	lw	s0,56(a4)
 528:	6572                	flw	fa0,28(sp)
 52a:	6e65                	lui	t3,0x19
    int v[size_N];
 52c:	0074                	addi	a3,sp,12
 52e:	72617473          	csrrci	s0,0x726,2
    int denum_temp[size_D];
 532:	6d5f 6c75 0074      	0x746c756d5f
    for (i = 0; i < size_N; ++i){
 538:	735f 6565 0064      	0x646565735f
    array_mod(num_temp, mod, size_N);
 53e:	6972                	flw	fs2,28(sp)
 540:	325f 5f00 635f      	0x635f5f00325f
    for (i = 0; i < size_D; ++i) {
 546:	746e756f          	jal	a0,e7c8c <_stack_start+0xd7c8c>
    array_mod(denum_temp,mod,size_D);
 54a:	5f00                	lw	s0,56(a4)
 54c:	765f 6c61 6575      	0x65756c61765f
    for (i = 0; i < size_N; ++i){
 552:	5f00                	lw	s0,56(a4)
 554:	6b656573          	csrrsi	a0,0x6b6,10
    for (i = size_D-1; i >= 0; i = i-1){
 558:	5f00                	lw	s0,56(a4)
 55a:	7066                	flw	ft0,120(sp)
 55c:	745f736f          	jal	t1,f84a0 <_stack_start+0xe84a0>
 560:	6c00                	flw	fs0,24(s0)
 562:	6e65                	lui	t3,0x19
    for (i = 0; i < size_N; ++i){
 564:	00687467          	0x687467
        if ( (b_N*u)%mod == 1 )
 568:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    for (u = 0; u < mod; ++u){
 56e:	6e69                	lui	t3,0x1a
 570:	7000                	flw	fs0,32(s0)
        num_temp[i] = num[i];
 572:	6275                	lui	tp,0x1d
 574:	696c                	flw	fa1,84(a0)
 576:	656b5f63          	bge	s6,s6,bd4 <generate_keys+0x2be>
 57a:	0079                	c.nop	30
 57c:	7261                	lui	tp,0xffff8
    for (i = 0; i < size_N; ++i){
 57e:	6172                	flw	ft2,28(sp)
        num_temp[i] = num[i];
 580:	5f79                	li	t5,-2
    for (i = 0; i < size_N; ++i){
 582:	6461                	lui	s0,0x18
        denum_temp[i] = denum[i];
 584:	0064                	addi	s1,sp,12
 586:	7261                	lui	tp,0xffff8
 588:	6172                	flw	ft2,28(sp)
 58a:	5f79                	li	t5,-2
 58c:	6f6d                	lui	t5,0x1b
 58e:	0064                	addi	s1,sp,12
    for (i = 0; i < size_D; ++i) {
 590:	735f 7274 6f74      	0x6f747274735f
        q[i] = 0;
 596:	616c5f6b          	0x616c5f6b
 59a:	5f007473          	csrrci	s0,0x5f0,0
        v[i] = 0;
 59e:	6e66                	flw	ft8,88(sp)
        q[i] = 0;
 5a0:	7974                	flw	fa3,116(a0)
 5a2:	6570                	flw	fa2,76(a0)
        v[i] = 0;
 5a4:	65730073          	0x65730073
    for (i = 0; i < size_N; ++i){
 5a8:	74657263          	bgeu	a0,t1,cec <ntru_deceypt+0x5e>
        if( denum_temp[i] != 0 )
 5ac:	6b5f 7965 665f      	0x665f79656b5f
        if ( (b_N*u)%mod == 1 )
 5b2:	0070                	addi	a2,sp,12
 5b4:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5ba:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
    for (u = 0; u < mod; ++u){
 5be:	315f 5f00 6567      	0x65675f00315f
    for (i = size_N-1; i >= 0; i = i-1){
 5c4:	6474                	flw	fa3,76(s0)
 5c6:	7461                	lui	s0,0xffff8
 5c8:	5f65                	li	t5,-7
 5ca:	7265                	lui	tp,0xffff9
 5cc:	0072                	c.slli	zero,0x1c
 5ce:	675f 6f6c 6162      	0x61626f6c675f
    for(i = 0; i < size_N; ++i){
 5d4:	5f6c                	lw	a1,124(a4)
        result[i] = q[i];
 5d6:	6d69                	lui	s10,0x1a
 5d8:	7570                	flw	fa2,108(a0)
 5da:	6572                	flw	fa0,28(sp)
 5dc:	705f 7274 4700      	0x47007274705f
    for(i = size_N; i < (2*size_N); ++i){
 5e2:	554e                	lw	a0,240(sp)
 5e4:	4320                	lw	s0,64(a4)
        result[i] = num_temp[i-size_N];
 5e6:	3731                	jal	4f2 <polydiv+0x12>
 5e8:	3920                	fld	fs0,112(a0)
 5ea:	322e                	fld	ft4,232(sp)
 5ec:	302e                	fld	ft0,232(sp)
    for(i = size_N; i < (2*size_N); ++i){
 5ee:	2d20                	fld	fs0,88(a0)
 5f0:	616d                	addi	sp,sp,240
}
 5f2:	6372                	flw	ft6,28(sp)
 5f4:	3d68                	fld	fa0,248(a0)
 5f6:	7672                	flw	fa2,60(sp)
 5f8:	6d693233          	0x6d693233
 5fc:	6d2d2063          	0x6d2d2063
 600:	6261                	lui	tp,0x18
 602:	3d69                	jal	49c <polymult2+0x122>
 604:	6c69                	lui	s8,0x1a
 606:	3370                	fld	fa2,224(a4)
 608:	2032                	fld	ft0,264(sp)
 60a:	6d2d                	lui	s10,0xb
 60c:	646f6d63          	bltu	t5,t1,c66 <ntru_encyrpt+0x5e>
 610:	6c65                	lui	s8,0x19
 612:	6d3d                	lui	s10,0xf
 614:	6465                	lui	s0,0x19
 616:	6e61                	lui	t3,0x18
 618:	2079                	jal	6a6 <polydiv+0x1c6>
 61a:	6d2d                	lui	s10,0xb
        v[(d-d2)] = u*r_d;
 61c:	7574                	flw	fa3,108(a0)
 61e:	656e                	flw	fa0,216(sp)
 620:	723d                	lui	tp,0xfffef
 622:	656b636f          	jal	t1,b6c78 <_stack_start+0xa6c78>
 626:	2074                	fld	fa3,192(s0)
        array_mod(v, mod, size_N);
 628:	672d                	lui	a4,0xb
 62a:	2d20                	fld	fs0,88(a0)
 62c:	2d20734f          	0x2d20734f
 630:	7666                	flw	fa2,120(sp)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 632:	7369                	lui	t1,0xffffa
 634:	6269                	lui	tp,0x1a
 636:	6c69                	lui	s8,0x1a
 638:	7469                	lui	s0,0xffffa
 63a:	3d79                	jal	4d8 <polymult2+0x15e>
 63c:	6968                	flw	fa0,84(a0)
 63e:	6464                	flw	fs1,76(s0)
         array_mod(product, mod, size_N);
 640:	6e65                	lui	t3,0x19
 642:	5f00                	lw	s0,56(a4)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 644:	6e75                	lui	t3,0x1d
         array_mod(product, mod, size_N);
 646:	7375                	lui	t1,0xffffd
        for (i = 0; i < size_N; ++i){
 648:	6465                	lui	s0,0x19
 64a:	725f 6e61 0064      	0x646e61725f
         array_mod(num_temp, mod, size_N);
 650:	696c                	flw	fa1,84(a0)
 652:	656e                	flw	fa0,216(sp)
 654:	5f00                	lw	s0,56(a4)
 656:	00736477          	0x736477
        array_add(q, v, size_N);
 65a:	5f5f 6d74 775f      	0x775f6d745f5f
        array_mod(q, mod, size_N);
 660:	6164                	flw	fs1,68(a0)
 662:	0079                	c.nop	30
 664:	675f 756c 0065      	0x65756c675f
        for (i = size_N-1; i >= 0; i = i-1){
 66a:	746e                	flw	fs0,248(sp)
 66c:	7572                	flw	fa0,60(sp)
 66e:	655f 636e 7279      	0x7279636e655f
 674:	7470                	flw	fa2,108(s0)
 676:	5f00                	lw	s0,56(a4)
 678:	7a697373          	csrrci	t1,0x7a6,18
            num_temp[i] = num_temp[i] - product[i];
 67c:	5f65                	li	t5,-7
 67e:	0074                	addi	a3,sp,12
 680:	6c5f 3436 5f61      	0x5f6134366c5f
        for (i = 0; i < size_N; ++i){
 686:	7562                	flw	fa0,56(sp)
            num_temp[i] = num_temp[i] - product[i];
 688:	0066                	c.slli	zero,0x19
 68a:	6564                	flw	fs1,76(a0)
 68c:	756e                	flw	fa0,248(sp)
        for (i = 0; i < size_N; ++i){
 68e:	006d                	c.nop	27
            if( num_temp[i] != 0 )
 690:	735f 6769 665f      	0x665f6769735f
            v[i] = 0;
 696:	6e75                	lui	t3,0x1d
 698:	6e5f0063          	beq	t5,t0,d78 <reset_handler+0x20>
 69c:	7562                	flw	fa0,56(sp)
 69e:	0066                	c.slli	zero,0x19
        for (i = 0; i < size_N; ++i){
 6a0:	755f 756e 6573      	0x6573756e755f
 6a6:	0064                	addi	s1,sp,12
        result[i] = q[i];
 6a8:	6f70                	flw	fa2,92(a4)
 6aa:	796c                	flw	fa1,116(a0)
 6ac:	0052                	c.slli	zero,0x14
 6ae:	657a6973          	csrrsi	s2,0x657,20
 6b2:	445f 5f00 745f      	0x745f5f00445f
    for(i = 0; i < size_N; ++i){
 6b8:	5f6d                	li	t5,-5
        result[i] = num_temp[i-size_N];
 6ba:	7369                	lui	t1,0xffffa
 6bc:	7364                	flw	fs1,100(a4)
 6be:	0074                	addi	a3,sp,12
 6c0:	6c5f 636f 6c61      	0x6c61636f6c5f
    for(i = size_N; i < (2*size_N); ++i){
 6c6:	6974                	flw	fa3,84(a0)
 6c8:	656d                	lui	a0,0x1b
 6ca:	625f 6675 5f00      	0x5f006675625f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6d0:	736f6c63          	bltu	t5,s6,e08 <memcpy+0x3e>
    int ri_2[size]; // MX-ring poly, a
 6d4:	0065                	c.nop	25
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6d6:	725f 3834 5f00      	0x5f003834725f
 6dc:	626d                	lui	tp,0x1b
 6de:	6f74                	flw	fa3,92(a4)
 6e0:	735f6377          	0x735f6377
 6e4:	6174                	flw	fa3,68(a0)
 6e6:	6574                	flw	fa3,76(a0)
 6e8:	5f00                	lw	s0,56(a4)
 6ea:	3570                	fld	fa2,232(a0)
 6ec:	616d0073          	0x616d0073
 6f0:	6e69                	lui	t3,0x1a
    int ri_2[size]; // MX-ring poly, a
 6f2:	5f00                	lw	s0,56(a4)
 6f4:	745f 5f6d 646d      	0x646d5f6d745f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6fa:	7961                	lui	s2,0xffff8
 6fc:	7300                	flw	fs0,32(a4)
    int ri[size];
 6fe:	7a69                	lui	s4,0xffffa
 700:	5f65                	li	t5,-7
 702:	0061                	c.nop	24
    int ti_1[size]; // ti_1[0] = 1
 704:	657a6973          	csrrsi	s2,0x657,20
 708:	625f 6300 7472      	0x74726300625f
    int ti[size];
 70e:	2e30                	fld	fa2,88(a2)
    int qi_1[size];
 710:	682f0053          	0x682f0053
 714:	2f656d6f          	jal	s10,56a0a <_stack_start+0x46a0a>
    int temp[size];
 718:	6f74                	flw	fa3,92(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 71a:	6170                	flw	fa2,68(a0)
 71c:	636c                	flw	fa1,68(a4)
    int ri_2[size]; // MX-ring poly, a
 71e:	7365442f          	0x7365442f
    int temp[size];
 722:	706f746b          	0x706f746b
    for (i = 0; i < size; ++i) {
 726:	6f72702f          	0x6f72702f
        ti_2[i] = 0;
 72a:	656a                	flw	fa0,152(sp)
 72c:	656c                	flw	fa1,76(a0)
 72e:	2f72                	fld	ft10,280(sp)
    for (i = 0; i < size; ++i) {
 730:	75636c6f          	jal	s8,36e86 <_stack_start+0x26e86>
    ti_1[0] = 1;
 734:	2f6d                	jal	eee <memset+0x46>
 736:	2e34                	fld	fa3,88(a2)
 738:	6f6d                	lui	t5,0x1b
        for (i = N + 1; i < (2 * N + 2); ++i) {
 73a:	2b64                	fld	fs1,208(a4)
 73c:	6461                	lui	s0,0x18
 73e:	0064                	addi	s1,sp,12
 740:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
            ti[i] = ti_2[i] - temp[i];
 744:	5341                	li	t1,-16
 746:	3220                	fld	fs0,96(a2)
 748:	332e                	fld	ft6,232(sp)
    array_mod(ri_2,mod,size);
 74a:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x1a0>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	009e                	slli	ra,ra,0x7
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0130                	addi	a2,sp,136
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	0136                	slli	sp,sp,0xd
  4a:	0000                	unimp
  4c:	008c                	addi	a1,sp,64
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	01c2                	slli	gp,gp,0x10
  5a:	0000                	unimp
  5c:	01b8                	addi	a4,sp,200
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	5850                	lw	a2,52(s0)
  64:	0288                	addi	a0,sp,320
  66:	0389                	addi	t2,t2,2
  68:	0492                	slli	s1,s1,0x4
  6a:	06940593          	addi	a1,s0,105 # 18069 <_stack_start+0x8069>
  6e:	0795                	addi	a5,a5,5
  70:	0896                	slli	a7,a7,0x5
  72:	0a980997          	auipc	s3,0xa980
  76:	0b99                	addi	s7,s7,6
  78:	0c9a                	slli	s9,s9,0x6
  7a:	0c420d9b          	0xc420d9b
  jal x0, default_exc_handler
  7e:	0008                	0x8
  jal x0, reset_handler
  80:	8142                	mv	sp,a6
  82:	0301                	addi	t1,t1,0
  jal x0, default_exc_handler
  84:	010e                	slli	sp,sp,0x3
  86:	0c0a                	slli	s8,s8,0x2
  jal x0, default_exc_handler
  88:	5002                	0x5002
  8a:	c142                	sw	a6,128(sp)
    asm volatile(
  8c:	c842                	sw	a6,16(sp)
  8e:	c942                	sw	a6,144(sp)
}
  90:	d242                	sw	a6,36(sp)
    switch(length%3) {
  92:	d342                	sw	a6,164(sp)
  94:	d442                	sw	a6,40(sp)
  96:	d542                	sw	a6,168(sp)
  98:	d642                	sw	a6,44(sp)
  9a:	d742                	sw	a6,172(sp)
  9c:	d842                	sw	a6,48(sp)
  9e:	d942                	sw	a6,176(sp)
  a0:	da42                	sw	a6,52(sp)
  a2:	db42                	sw	a6,180(sp)
  a4:	0e4a                	slli	t3,t3,0x12
            for (i = 0; i < (length / 3); i++) {
  a6:	4200                	lw	s0,0(a2)
  a8:	0000000b          	0xb
  ac:	0044                	addi	s1,sp,4
  ae:	0000                	unimp
  b0:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0000                	unimp
  b4:	037a                	slli	t1,t1,0x1e
  b6:	0000                	unimp
  b8:	0166                	slli	sp,sp,0x19
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4220                	lw	s0,64(a2)
  c0:	0389                	addi	t2,t2,2
            a1[length-1] = a1[length-1] + a2[length-1];
  c2:	924e                	add	tp,tp,s3
  c4:	9304                	0x9304
  c6:	5605                	li	a2,-31
  c8:	0288                	addi	a0,sp,320
  ca:	0694                	addi	a3,sp,832
  cc:	0795                	addi	a5,a5,5
  ce:	0181                	addi	gp,gp,0
  d0:	0896                	slli	a7,a7,0x5
  d2:	0c42                	slli	s8,s8,0x10
  d4:	0008                	0x8
  d6:	e802                	fsw	ft0,16(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
  d8:	0c0a                	slli	s8,s8,0x2
  da:	2002                	fld	ft0,0(sp)
  dc:	c142                	sw	a6,128(sp)
  de:	c842                	sw	a6,16(sp)
  e0:	c942                	sw	a6,144(sp)
  e2:	d242                	sw	a6,36(sp)
  e4:	d342                	sw	a6,164(sp)
  e6:	d442                	sw	a6,40(sp)
            a1[length-1] = a1[length-1] + a2[length-1];
  e8:	d542                	sw	a6,168(sp)
            a1[length-2] = a1[length-2] + a2[length-2];
  ea:	d642                	sw	a6,44(sp)
  ec:	0e4a                	slli	t3,t3,0x12
  ee:	4200                	lw	s0,0(a2)
  f0:	0000000b          	0xb
  f4:	0054                	addi	a3,sp,4
  f6:	0000                	unimp
} //end of function
  f8:	0000                	unimp
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  fa:	0000                	unimp
  fc:	04e0                	addi	s0,sp,588
    asm volatile(
  fe:	0000                	unimp
 100:	01ec                	addi	a1,sp,204
 102:	0000                	unimp
 104:	0e46                	slli	t3,t3,0x11
 106:	5e40                	lw	s0,60(a2)
            for (i = 0; i < (length / 3); i++) {
 108:	0288                	addi	a0,sp,320
 10a:	0389                	addi	t2,t2,2
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 10c:	0492                	slli	s1,s1,0x4
 10e:	06940593          	addi	a1,s0,105
    asm volatile(
 112:	0795                	addi	a5,a5,5
 114:	0896                	slli	a7,a7,0x5
 116:	0a980997          	auipc	s3,0xa980
            for (i = 0; i < ((length-1) / 3); i++) {
 11a:	0b99                	addi	s7,s7,6
 11c:	0c9a                	slli	s9,s9,0x6
                instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
 11e:	0181                	addi	gp,gp,0
 120:	0c420d9b          	0xc420d9b
    asm volatile(
 124:	0008                	0x8
 126:	f002                	fsw	ft0,32(sp)
 128:	0c0a                	slli	s8,s8,0x2
 12a:	4002                	0x4002
            for (i = 0; i < ((length-2) / 3); i++) {
 12c:	c142                	sw	a6,128(sp)
 12e:	c842                	sw	a6,16(sp)
    asm volatile(
 130:	c942                	sw	a6,144(sp)
 132:	d242                	sw	a6,36(sp)
}
 134:	d342                	sw	a6,164(sp)
    switch(length%3) {
 136:	d442                	sw	a6,40(sp)
 138:	d542                	sw	a6,168(sp)
 13a:	d642                	sw	a6,44(sp)
 13c:	d742                	sw	a6,172(sp)
 13e:	d842                	sw	a6,48(sp)
 140:	d942                	sw	a6,176(sp)
 142:	da42                	sw	a6,52(sp)
 144:	db42                	sw	a6,180(sp)
 146:	0e4a                	slli	t3,t3,0x12
 148:	4200                	lw	s0,0(a2)
            for (i = 0; i < (length / 3); i++) {
 14a:	0054000b          	0x54000b
    asm volatile(
 14e:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
 150:	0000                	unimp
 152:	0000                	unimp
 154:	06cc                	addi	a1,sp,836
            for (i = 0; i < ((length-2) / 3); i++) {
 156:	0000                	unimp
 158:	024a                	slli	tp,tp,0x12
 15a:	0000                	unimp
 15c:	0e46                	slli	t3,t3,0x11
 15e:	5e50                	lw	a2,60(a2)
    asm volatile(
 160:	0288                	addi	a0,sp,320
            for (i = 0; i < ((length-2) / 3); i++) {
 162:	0389                	addi	t2,t2,2
 164:	0492                	slli	s1,s1,0x4
            a1[length-1] = a1[length-1] % mod;
 166:	06940593          	addi	a1,s0,105
 16a:	0795                	addi	a5,a5,5
 16c:	0896                	slli	a7,a7,0x5
 16e:	0a980997          	auipc	s3,0xa980
 172:	0b99                	addi	s7,s7,6
 174:	01810d9b          	0x1810d9b
            for (i = 0; i < ((length-1) / 3); i++) {
 178:	0c9a                	slli	s9,s9,0x6
 17a:	0c42                	slli	s8,s8,0x10
 17c:	0008                	0x8
 17e:	0a00fa03          	0xa00fa03
    asm volatile(
 182:	020c                	addi	a1,sp,256
            for (i = 0; i < ((length-1) / 3); i++) {
 184:	4250                	lw	a2,4(a2)
 186:	42c1                	li	t0,16
            a1[length-1] = a1[length-1] % mod;
 188:	42c8                	lw	a0,4(a3)
            a1[length-2] = a1[length-2] % mod;
 18a:	42c9                	li	t0,18
 18c:	42d2                	lw	t0,20(sp)
 18e:	42d442d3          	0x42d442d3
 192:	42d5                	li	t0,21
 194:	42d6                	lw	t0,84(sp)
} //end of function
 196:	42d842d7          	0x42d842d7
    asm volatile(
 19a:	42d9                	li	t0,22
 19c:	42da                	lw	t0,148(sp)
 19e:	000e4adb          	0xe4adb
            for (i = 0; i < (length / 3); i++) {
 1a2:	0b42                	slli	s6,s6,0x10
 1a4:	0054                	addi	a3,sp,4
    asm volatile(
 1a6:	0000                	unimp
 1a8:	0000                	unimp
 1aa:	0000                	unimp
 1ac:	0916                	slli	s2,s2,0x5
 1ae:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
 1b0:	02f2                	slli	t0,t0,0x1c
 1b2:	0000                	unimp
    asm volatile(
 1b4:	0e42                	slli	t3,t3,0x10
 1b6:	03f0                	addi	a2,sp,460
 1b8:	814c                	0x814c
 1ba:	8801                	andi	s0,s0,0
 1bc:	8902                	jr	s2
            for (i = 0; i < ((length-2) / 3); i++) {
 1be:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1c2:	6400                	flw	fs0,8(s0)
 1c4:	0492                	slli	s1,s1,0x4
 1c6:	06940593          	addi	a1,s0,105
 1ca:	0795                	addi	a5,a5,5
 1cc:	0896                	slli	a7,a7,0x5
 1ce:	0c9a0997          	auipc	s3,0xc9a0
 1d2:	0a98                	addi	a4,sp,336
 1d4:	0b99                	addi	s7,s7,6
 1d6:	0a01da03          	lhu	s4,160(gp)
 1da:	020c                	addi	a1,sp,256
 1dc:	03f0                	addi	a2,sp,460
 1de:	c144                	sw	s1,4(a0)
 1e0:	c844                	sw	s1,20(s0)
 1e2:	c944                	sw	s1,20(a0)
 1e4:	d244                	sw	s1,36(a2)
 1e6:	d344                	sw	s1,36(a4)
    int line[size_b][size_a + size_b];
 1e8:	d444                	sw	s1,44(s0)
 1ea:	d544                	sw	s1,44(a0)
 1ec:	d644                	sw	s1,44(a2)
 1ee:	d744                	sw	s1,44(a4)
 1f0:	d844                	sw	s1,52(s0)
 1f2:	d944                	sw	s1,52(a0)
 1f4:	da44                	sw	s1,52(a2)
 1f6:	0e4a                	slli	t3,t3,0x12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 1f8:	4200                	lw	s0,0(a2)
    int polb[size_b];
 1fa:	0034000b          	0x34000b
 1fe:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 200:	0000                	unimp
 202:	0000                	unimp
    int line[size_b][size_a + size_b];
 204:	0c08                	addi	a0,sp,528
 206:	0000                	unimp
    int pola[size_a];
 208:	0086                	slli	ra,ra,0x1
 20a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 20c:	0e42                	slli	t3,t3,0x10
            product[j] = 0;
 20e:	01e0                	addi	s0,sp,204
 210:	8844                	0x8844
 212:	8902                	jr	s2
 214:	04924a03          	lbu	s4,73(tp) # fffe1049 <_stack_start+0xfffd1049>
    int line[size_b][size_a + size_b];
 218:	8152                	mv	sp,s4
 21a:	9301                	srli	a4,a4,0x20
 21c:	9405                	srai	s0,s0,0x21
    int pola[size_a];
 21e:	0206                	slli	tp,tp,0x1
 220:	0a44                	addi	s1,sp,276
 222:	42c1                	li	t0,16
 224:	42c8                	lw	a0,4(a3)
    int line[size_b][size_a + size_b];
 226:	42c9                	li	t0,18
    int pola[size_a];
 228:	42d2                	lw	t0,20(sp)
 22a:	42d442d3          	0x42d442d3
    int polb[size_b];
 22e:	000e                	c.slli	zero,0x3
 230:	0b42                	slli	s6,s6,0x10
 232:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 234:	0040                	addi	s0,sp,4
 236:	0000                	unimp
 238:	0000                	unimp
 23a:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 23c:	0c8e                	slli	s9,s9,0x3
 23e:	0000                	unimp
 240:	00c6                	slli	ra,ra,0x11
    array_mod(pola,mod,size_a);
 242:	0000                	unimp
 244:	0e42                	slli	t3,t3,0x10
 246:	4430                	lw	a2,72(s0)
 248:	0288                	addi	a0,sp,320
 24a:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
    for (i = 0; i < size_b; ++i){
 24e:	9504                	0x9504
 250:	58099707          	0x58099707
 254:	0181                	addi	gp,gp,0
 256:	0389                	addi	t2,t2,2
    array_mod(polb,mod,size_b);
 258:	0694                	addi	a3,sp,832
 25a:	0896                	slli	a7,a7,0x5
 25c:	5002                	0x5002
 25e:	c10a                	sw	sp,128(sp)
    if(star_mult == 1){
 260:	c842                	sw	a6,16(sp)
 262:	c942                	sw	a6,144(sp)
 264:	d242                	sw	a6,36(sp)
 266:	d342                	sw	a6,164(sp)
 268:	d442                	sw	a6,40(sp)
 26a:	d542                	sw	a6,168(sp)
 26c:	d642                	sw	a6,44(sp)
 26e:	d742                	sw	a6,172(sp)
 270:	0e42                	slli	t3,t3,0x10
 272:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 274:	0000000b          	0xb
            for (k = size_a-1; k >= 0; k = k-1 ){
 278:	002c                	addi	a1,sp,8
 27a:	0000                	unimp
            product[j] = 0;
 27c:	0000                	unimp
 27e:	0000                	unimp
 280:	0f50                	addi	a2,sp,916
            line[i][j] = 0;
 282:	0000                	unimp
 284:	0138                	addi	a4,sp,136
            product[j] = 0;
 286:	0000                	unimp
 288:	0e44                	addi	s1,sp,788
        for(j = 0; j < size_a + size_b -1; ++j){
 28a:	08b0                	addi	a2,sp,88
 28c:	815e                	mv	sp,s7
 28e:	8801                	andi	s0,s0,0
 290:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 292:	03049203          	lh	tp,48(s1)
 296:	00f8                	addi	a4,sp,76
 298:	c10a                	sw	sp,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 29a:	c844                	sw	s1,20(s0)
 29c:	c944                	sw	s1,20(a0)
        pola[i] = a[i];
 29e:	d244                	sw	s1,36(a2)
 2a0:	0e46                	slli	t3,t3,0x11
 2a2:	4200                	lw	s0,0(a2)
 2a4:	0000000b          	0xb

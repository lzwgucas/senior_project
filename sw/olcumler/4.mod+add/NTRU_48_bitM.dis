
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4290006f          	j	ca4 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4290006f          	j	ca8 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4210006f          	j	ca4 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	41d0006f          	j	ca4 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
  8c:	06b5750b          	0x6b5750b

    );
    return;


}
  90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
  92:	478d                	li	a5,3
  94:	02f64633          	div	a2,a2,a5
  98:	4831                	li	a6,12
  9a:	4781                	li	a5,0
  9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
  a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	03078733          	mul	a4,a5,a6
    asm volatile(
  a6:	00e506b3          	add	a3,a0,a4
  aa:	972e                	add	a4,a4,a1
  ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
  b0:	0785                	addi	a5,a5,1
  b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_mod>:


void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
  b4:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
  b8:	8082                	ret

000000ba <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    for(i=0;i<(length/3);i++) {
  ba:	478d                	li	a5,3
  bc:	02f64633          	div	a2,a2,a5
    asm volatile(
  c0:	46b1                	li	a3,12
    for(i=0;i<(length/3);i++) {
  c2:	4781                	li	a5,0
  c4:	00c7c363          	blt	a5,a2,ca <array_mod+0x10>
        instr_mod((unsigned int*)&a1[3 * i], (unsigned int)mod);
    }

}
  c8:	8082                	ret
    asm volatile(
  ca:	02d78733          	mul	a4,a5,a3
  ce:	972a                	add	a4,a4,a0
  d0:	0cb7770b          	0xcb7770b
    for(i=0;i<(length/3);i++) {
  d4:	0785                	addi	a5,a5,1
  d6:	b7fd                	j	c4 <array_mod+0xa>

000000d8 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	715d                	addi	sp,sp,-80
  da:	882e                	mv	a6,a1
  dc:	c0ca                	sw	s2,64(sp)
  de:	8936                	mv	s2,a3
  e0:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
  e2:	96c2                	add	a3,a3,a6
  e4:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	d462                	sw	s8,40(sp)
  ea:	d06a                	sw	s10,32(sp)
    int line[size_b][size_a + size_b];
  ec:	fff68c13          	addi	s8,a3,-1
  f0:	00269d13          	slli	s10,a3,0x2
  f4:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	c4a2                	sw	s0,72(sp)
  fa:	c2a6                	sw	s1,68(sp)
  fc:	0880                	addi	s0,sp,80
  fe:	dc52                	sw	s4,56(sp)
 100:	da56                	sw	s5,52(sp)
 102:	d85a                	sw	s6,48(sp)
 104:	d65e                	sw	s7,44(sp)
 106:	d266                	sw	s9,36(sp)
 108:	ce6e                	sw	s11,28(sp)
 10a:	c686                	sw	ra,76(sp)
 10c:	faf42c23          	sw	a5,-72(s0)
    int line[size_b][size_a + size_b];
 110:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
 112:	00281793          	slli	a5,a6,0x2
    int line[size_b][size_a + size_b];
 116:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
 118:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
 11a:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
 11e:	9bc1                	andi	a5,a5,-16
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 120:	85ba                	mv	a1,a4
    int polb[size_b];
 122:	00f98713          	addi	a4,s3,15
    int line[size_b][size_a + size_b];
 126:	8c8a                	mv	s9,sp
    int polb[size_b];
 128:	9b41                	andi	a4,a4,-16
    int pola[size_a];
 12a:	40f10133          	sub	sp,sp,a5
 12e:	8a8a                	mv	s5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
 130:	002d5793          	srli	a5,s10,0x2
    int polb[size_b];
 134:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	8db2                	mv	s11,a2
    int line[size_b][size_a + size_b];
 13a:	fff90b93          	addi	s7,s2,-1
    int pola[size_a];
 13e:	fff80b13          	addi	s6,a6,-1
    int polb[size_b];
 142:	848a                	mv	s1,sp
            line[i][j] = 0;
 144:	faf42e23          	sw	a5,-68(s0)
 148:	8a66                	mv	s4,s9
    for (i = 0; i < size_b; ++i){
 14a:	88e6                	mv	a7,s9
 14c:	4601                	li	a2,0
            product[j] = 0;
 14e:	00001e97          	auipc	t4,0x1
 152:	01ee8e93          	addi	t4,t4,30 # 116c <_bss_start>
    for (i = 0; i < size_b; ++i){
 156:	07264263          	blt	a2,s2,1ba <polymult+0xe2>
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
 15a:	4701                	li	a4,0
 15c:	07074263          	blt	a4,a6,1c0 <polymult+0xe8>
        pola[i] = a[i];
    }

    array_mod(pola,mod,size_a);
 160:	8642                	mv	a2,a6
 162:	8556                	mv	a0,s5
 164:	fab42a23          	sw	a1,-76(s0)
 168:	3f89                	jal	ba <array_mod>

    for (i = 0; i < size_b; ++i){
 16a:	fb442583          	lw	a1,-76(s0)
 16e:	4701                	li	a4,0
 170:	07274263          	blt	a4,s2,1d4 <polymult+0xfc>
        polb[i] = b[i];
    }

    array_mod(polb,mod,size_b);
 174:	8526                	mv	a0,s1
 176:	864a                	mv	a2,s2
 178:	fab42a23          	sw	a1,-76(s0)
 17c:	3f3d                	jal	ba <array_mod>


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 17e:	fb842783          	lw	a5,-72(s0)
 182:	4705                	li	a4,1
 184:	fb442583          	lw	a1,-76(s0)
 188:	94ce                	add	s1,s1,s3
 18a:	04e78e63          	beq	a5,a4,1e6 <polymult+0x10e>
 18e:	19f1                	addi	s3,s3,-4
 190:	ffcd0513          	addi	a0,s10,-4
 194:	99e6                	add	s3,s3,s9
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 196:	040bcb63          	bltz	s7,1ec <polymult+0x114>
            for (k = size_a-1; k >= 0; k = k-1 ){
 19a:	875a                	mv	a4,s6
 19c:	a8f9                	j	27a <polymult+0x1a2>
            product[j] = 0;
 19e:	00271e13          	slli	t3,a4,0x2
 1a2:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
 1a4:	00032023          	sw	zero,0(t1)
            product[j] = 0;
 1a8:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
 1ac:	0705                	addi	a4,a4,1
 1ae:	0311                	addi	t1,t1,4
 1b0:	ff8747e3          	blt	a4,s8,19e <polymult+0xc6>
    for (i = 0; i < size_b; ++i){
 1b4:	0605                	addi	a2,a2,1
 1b6:	98ea                	add	a7,a7,s10
 1b8:	bf79                	j	156 <polymult+0x7e>
 1ba:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	4701                	li	a4,0
 1be:	bfcd                	j	1b0 <polymult+0xd8>
        pola[i] = a[i];
 1c0:	00271613          	slli	a2,a4,0x2
 1c4:	00ca88b3          	add	a7,s5,a2
 1c8:	962a                	add	a2,a2,a0
 1ca:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_a; ++i){
 1cc:	0705                	addi	a4,a4,1
        pola[i] = a[i];
 1ce:	00c8a023          	sw	a2,0(a7)
    for (i = 0; i < size_a; ++i){
 1d2:	b769                	j	15c <polymult+0x84>
        polb[i] = b[i];
 1d4:	00271613          	slli	a2,a4,0x2
 1d8:	00c48533          	add	a0,s1,a2
 1dc:	966e                	add	a2,a2,s11
 1de:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_b; ++i){
 1e0:	0705                	addi	a4,a4,1
        polb[i] = b[i];
 1e2:	c110                	sw	a2,0(a0)
    for (i = 0; i < size_b; ++i){
 1e4:	b771                	j	170 <polymult+0x98>
    if(star_mult == 1){
 1e6:	8566                	mv	a0,s9
        for (j = size_b -1; j >= 0; j = j-1){
 1e8:	060bda63          	bgez	s7,25c <polymult+0x184>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
 1ec:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
 1ee:	0b274863          	blt	a4,s2,29e <polymult+0x1c6>
 1f2:	00001697          	auipc	a3,0x1
 1f6:	f7a68693          	addi	a3,a3,-134 # 116c <_bss_start>
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	4701                	li	a4,0
 1fc:	0d874563          	blt	a4,s8,2c6 <polymult+0x1ee>
//    //mod calculations
//    for(j = 0; j < size_a + size_b -1; ++j){
//        product[j] = product[j] % mod;
//    }

    array_mod(product,mod,(size_a+size_b-1));
 200:	8662                	mv	a2,s8
 202:	00001517          	auipc	a0,0x1
 206:	f6a50513          	addi	a0,a0,-150 # 116c <_bss_start>
 20a:	3d45                	jal	ba <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
 20c:	fb040113          	addi	sp,s0,-80
 210:	40b6                	lw	ra,76(sp)
 212:	4426                	lw	s0,72(sp)
 214:	4496                	lw	s1,68(sp)
 216:	4906                	lw	s2,64(sp)
 218:	59f2                	lw	s3,60(sp)
 21a:	5a62                	lw	s4,56(sp)
 21c:	5ad2                	lw	s5,52(sp)
 21e:	5b42                	lw	s6,48(sp)
 220:	5bb2                	lw	s7,44(sp)
 222:	5c22                	lw	s8,40(sp)
 224:	5c92                	lw	s9,36(sp)
 226:	5d02                	lw	s10,32(sp)
 228:	4df2                	lw	s11,28(sp)
 22a:	00001517          	auipc	a0,0x1
 22e:	f4250513          	addi	a0,a0,-190 # 116c <_bss_start>
 232:	6161                	addi	sp,sp,80
 234:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
 236:	00271613          	slli	a2,a4,0x2
 23a:	00c50833          	add	a6,a0,a2
 23e:	9656                	add	a2,a2,s5
 240:	4210                	lw	a2,0(a2)
 242:	ffc4a883          	lw	a7,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 246:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	03160633          	mul	a2,a2,a7
 24c:	00c82023          	sw	a2,0(a6)
            for (k = size_a-1; k >= 0; k = k-1 ){
 250:	fe0753e3          	bgez	a4,236 <polymult+0x15e>
        for (j = size_b -1; j >= 0; j = j-1){
 254:	1bfd                	addi	s7,s7,-1
 256:	14f1                	addi	s1,s1,-4
 258:	956a                	add	a0,a0,s10
 25a:	b779                	j	1e8 <polymult+0x110>
            for (k = size_a-1; k >= 0; k = k-1 ){
 25c:	875a                	mv	a4,s6
 25e:	bfcd                	j	250 <polymult+0x178>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 260:	00271613          	slli	a2,a4,0x2
 264:	00c98833          	add	a6,s3,a2
 268:	9656                	add	a2,a2,s5
 26a:	4210                	lw	a2,0(a2)
 26c:	ffc4a883          	lw	a7,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 272:	03160633          	mul	a2,a2,a7
 276:	00c82023          	sw	a2,0(a6)
            for (k = size_a-1; k >= 0; k = k-1 ){
 27a:	fe0753e3          	bgez	a4,260 <polymult+0x188>
        for (j = size_b -1; j >= 0; j = j-1){
 27e:	1bfd                	addi	s7,s7,-1
 280:	14f1                	addi	s1,s1,-4
 282:	99aa                	add	s3,s3,a0
 284:	bf09                	j	196 <polymult+0xbe>
            line[i][j] = line[i][j] % mod;
 286:	4388                	lw	a0,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 288:	0605                	addi	a2,a2,1
 28a:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
 28c:	02b56533          	rem	a0,a0,a1
 290:	fea7ae23          	sw	a0,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	ff8649e3          	blt	a2,s8,286 <polymult+0x1ae>
    for (i = 0; i < size_b; ++i){
 298:	0705                	addi	a4,a4,1
 29a:	9a6a                	add	s4,s4,s10
 29c:	bf89                	j	1ee <polymult+0x116>
 29e:	87d2                	mv	a5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	4601                	li	a2,0
 2a2:	bfcd                	j	294 <polymult+0x1bc>
            product[j] += line[i][j];
 2a4:	fbc42783          	lw	a5,-68(s0)
 2a8:	4288                	lw	a0,0(a3)
 2aa:	02f607b3          	mul	a5,a2,a5
        for(i = 0; i < size_b; ++i){
 2ae:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
 2b0:	97ba                	add	a5,a5,a4
 2b2:	078a                	slli	a5,a5,0x2
 2b4:	97e6                	add	a5,a5,s9
 2b6:	439c                	lw	a5,0(a5)
 2b8:	97aa                	add	a5,a5,a0
 2ba:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
 2bc:	ff2644e3          	blt	a2,s2,2a4 <polymult+0x1cc>
    for(j = 0; j < size_a + size_b -1; ++j){
 2c0:	0705                	addi	a4,a4,1
 2c2:	0691                	addi	a3,a3,4
 2c4:	bf25                	j	1fc <polymult+0x124>
        for(i = 0; i < size_b; ++i){
 2c6:	4601                	li	a2,0
 2c8:	bfd5                	j	2bc <polymult+0x1e4>

000002ca <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ca:	1101                	addi	sp,sp,-32
 2cc:	ca26                	sw	s1,20(sp)
 2ce:	84b6                	mv	s1,a3

    int line[size_b][size_a + size_b];
 2d0:	00d587b3          	add	a5,a1,a3
 2d4:	00249893          	slli	a7,s1,0x2
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	c84a                	sw	s2,16(sp)
 2da:	c64e                	sw	s3,12(sp)
    int line[size_b][size_a + size_b];
 2dc:	00279913          	slli	s2,a5,0x2
 2e0:	fff78993          	addi	s3,a5,-1
 2e4:	02f887b3          	mul	a5,a7,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e8:	cc22                	sw	s0,24(sp)
 2ea:	c452                	sw	s4,8(sp)
 2ec:	c256                	sw	s5,4(sp)
 2ee:	ce06                	sw	ra,28(sp)
 2f0:	c05a                	sw	s6,0(sp)
 2f2:	1000                	addi	s0,sp,32
 2f4:	832e                	mv	t1,a1
    int i,j,k;
    int *return_address2;
    int pola[size_a];
 2f6:	fff58e13          	addi	t3,a1,-1
    int line[size_b][size_a + size_b];
 2fa:	07bd                	addi	a5,a5,15
 2fc:	9bc1                	andi	a5,a5,-16
 2fe:	40f10133          	sub	sp,sp,a5
    int pola[size_a];
 302:	00259793          	slli	a5,a1,0x2
 306:	07bd                	addi	a5,a5,15
 308:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
 30a:	880a                	mv	a6,sp
    int pola[size_a];
 30c:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
 310:	00f88793          	addi	a5,a7,15
 314:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
 316:	858a                	mv	a1,sp
    int polb[size_b];
 318:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
 31c:	16fd                	addi	a3,a3,-1
    int polb[size_b];
 31e:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
 320:	8a42                	mv	s4,a6
 322:	8fc2                	mv	t6,a6
 324:	4f01                	li	t5,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
 326:	00001a97          	auipc	s5,0x1
 32a:	09ea8a93          	addi	s5,s5,158 # 13c4 <product2>
    for (i = 0; i < size_b; ++i){
 32e:	049f4263          	blt	t5,s1,372 <polymult2+0xa8>
        }
    }

    for(i = 0; i < size_a; ++i){
 332:	4e81                	li	t4,0
 334:	046ec263          	blt	t4,t1,378 <polymult2+0xae>
        pola[i] = a[i];
    }

    for(i = 0; i < size_b; ++i){
 338:	4501                	li	a0,0
 33a:	04954a63          	blt	a0,s1,38e <polymult2+0xc4>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
 33e:	4605                	li	a2,1
 340:	97c6                	add	a5,a5,a7
 342:	08c70263          	beq	a4,a2,3c6 <polymult2+0xfc>
 346:	18f1                	addi	a7,a7,-4
 348:	ffc90313          	addi	t1,s2,-4
 34c:	9846                	add	a6,a6,a7
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
 34e:	0606ce63          	bltz	a3,3ca <polymult2+0x100>
            for (k = size_a-1; k >= 0; k = k-1 ){
 352:	8772                	mv	a4,t3
 354:	a0c9                	j	416 <polymult2+0x14c>
            product2[j] = 0;
 356:	002e9393          	slli	t2,t4,0x2
 35a:	93d6                	add	t2,t2,s5
            line[i][j] = 0;
 35c:	0002a023          	sw	zero,0(t0)
            product2[j] = 0;
 360:	0003a023          	sw	zero,0(t2)
        for(j = 0; j < size_a + size_b -1; ++j){
 364:	0e85                	addi	t4,t4,1
 366:	0291                	addi	t0,t0,4
 368:	ff3ec7e3          	blt	t4,s3,356 <polymult2+0x8c>
    for (i = 0; i < size_b; ++i){
 36c:	0f05                	addi	t5,t5,1
 36e:	9fca                	add	t6,t6,s2
 370:	bf7d                	j	32e <polymult2+0x64>
 372:	82fe                	mv	t0,t6
        for(j = 0; j < size_a + size_b -1; ++j){
 374:	4e81                	li	t4,0
 376:	bfcd                	j	368 <polymult2+0x9e>
        pola[i] = a[i];
 378:	002e9f13          	slli	t5,t4,0x2
 37c:	01e58fb3          	add	t6,a1,t5
 380:	9f2a                	add	t5,t5,a0
 382:	000f2f03          	lw	t5,0(t5)
    for(i = 0; i < size_a; ++i){
 386:	0e85                	addi	t4,t4,1
        pola[i] = a[i];
 388:	01efa023          	sw	t5,0(t6)
    for(i = 0; i < size_a; ++i){
 38c:	b765                	j	334 <polymult2+0x6a>
        polb[i] = b[i];
 38e:	00251313          	slli	t1,a0,0x2
 392:	00678eb3          	add	t4,a5,t1
 396:	9332                	add	t1,t1,a2
 398:	00032303          	lw	t1,0(t1)
    for(i = 0; i < size_b; ++i){
 39c:	0505                	addi	a0,a0,1
        polb[i] = b[i];
 39e:	006ea023          	sw	t1,0(t4)
    for(i = 0; i < size_b; ++i){
 3a2:	bf61                	j	33a <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
 3a4:	00271613          	slli	a2,a4,0x2
 3a8:	00c80533          	add	a0,a6,a2
 3ac:	962e                	add	a2,a2,a1
 3ae:	4210                	lw	a2,0(a2)
 3b0:	ffc7a883          	lw	a7,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b6:	03160633          	mul	a2,a2,a7
 3ba:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3bc:	fe0754e3          	bgez	a4,3a4 <polymult2+0xda>
        for (j = size_b -1; j >= 0; j = j-1){
 3c0:	16fd                	addi	a3,a3,-1
 3c2:	17f1                	addi	a5,a5,-4
 3c4:	984a                	add	a6,a6,s2
 3c6:	0206d963          	bgez	a3,3f8 <polymult2+0x12e>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	4a81                	li	s5,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
 3cc:	00001b17          	auipc	s6,0x1
 3d0:	ff8b0b13          	addi	s6,s6,-8 # 13c4 <product2>
    for(i=0;i<size_b;++i){
 3d4:	049ac763          	blt	s5,s1,422 <polymult2+0x158>
    }

    return_address2 = &product2[0];

    return return_address2;
}
 3d8:	fe040113          	addi	sp,s0,-32
 3dc:	40f2                	lw	ra,28(sp)
 3de:	4462                	lw	s0,24(sp)
 3e0:	44d2                	lw	s1,20(sp)
 3e2:	4942                	lw	s2,16(sp)
 3e4:	49b2                	lw	s3,12(sp)
 3e6:	4a22                	lw	s4,8(sp)
 3e8:	4a92                	lw	s5,4(sp)
 3ea:	4b02                	lw	s6,0(sp)
 3ec:	00001517          	auipc	a0,0x1
 3f0:	fd850513          	addi	a0,a0,-40 # 13c4 <product2>
 3f4:	6105                	addi	sp,sp,32
 3f6:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
 3f8:	8772                	mv	a4,t3
 3fa:	b7c9                	j	3bc <polymult2+0xf2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fc:	00271513          	slli	a0,a4,0x2
 400:	00a808b3          	add	a7,a6,a0
 404:	952e                	add	a0,a0,a1
 406:	4110                	lw	a2,0(a0)
 408:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
 40c:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 40e:	02a60633          	mul	a2,a2,a0
 412:	00c8a023          	sw	a2,0(a7)
            for (k = size_a-1; k >= 0; k = k-1 ){
 416:	fe0753e3          	bgez	a4,3fc <polymult2+0x132>
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	16fd                	addi	a3,a3,-1
 41c:	17f1                	addi	a5,a5,-4
 41e:	981a                	add	a6,a6,t1
 420:	b73d                	j	34e <polymult2+0x84>
        array_add(product2,line[i],size_a+size_b-1);
 422:	85d2                	mv	a1,s4
 424:	864e                	mv	a2,s3
 426:	855a                	mv	a0,s6
 428:	31ad                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
 42a:	0a85                	addi	s5,s5,1
 42c:	9a4a                	add	s4,s4,s2
 42e:	b75d                	j	3d4 <polymult2+0x10a>

00000430 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
 430:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	7139                	addi	sp,sp,-64
    int v[size_N];
 436:	07bd                	addi	a5,a5,15
 438:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 43a:	dc22                	sw	s0,56(sp)
 43c:	da26                	sw	s1,52(sp)
 43e:	d84a                	sw	s2,48(sp)
 440:	d64e                	sw	s3,44(sp)
 442:	d452                	sw	s4,40(sp)
 444:	d256                	sw	s5,36(sp)
 446:	d05a                	sw	s6,32(sp)
 448:	ce5e                	sw	s7,28(sp)
 44a:	cc62                	sw	s8,24(sp)
 44c:	ca66                	sw	s9,20(sp)
 44e:	c86a                	sw	s10,16(sp)
 450:	de06                	sw	ra,60(sp)
 452:	c66e                	sw	s11,12(sp)
 454:	0080                	addi	s0,sp,64
    int v[size_N];
 456:	40f10133          	sub	sp,sp,a5
 45a:	8a8a                	mv	s5,sp
    int q[size_N];
 45c:	40f10133          	sub	sp,sp,a5
 460:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
 462:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
 466:	00269793          	slli	a5,a3,0x2
 46a:	07bd                	addi	a5,a5,15
 46c:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
 46e:	8c8a                	mv	s9,sp
    int denum_temp[size_D];
 470:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 474:	84ae                	mv	s1,a1
 476:	8d32                	mv	s10,a2
 478:	89b6                	mv	s3,a3
 47a:	893a                	mv	s2,a4
    int v[size_N];
 47c:	fff58c13          	addi	s8,a1,-1
    int denum_temp[size_D];
 480:	fff68a13          	addi	s4,a3,-1
 484:	8b8a                	mv	s7,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
 486:	4781                	li	a5,0
 488:	0297cd63          	blt	a5,s1,4c2 <polydiv+0x92>
        num_temp[i] = num[i];
    }

    array_mod(num_temp,mod,size_N);
 48c:	8626                	mv	a2,s1
 48e:	85ca                	mv	a1,s2
 490:	8566                	mv	a0,s9
 492:	3125                	jal	ba <array_mod>

    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
 494:	4781                	li	a5,0
 496:	0337cf63          	blt	a5,s3,4d4 <polydiv+0xa4>
        denum_temp[i] = denum[i];
    }

    array_mod(denum_temp,mod,size_D);
 49a:	864e                	mv	a2,s3
 49c:	85ca                	mv	a1,s2
 49e:	855e                	mv	a0,s7
 4a0:	3929                	jal	ba <array_mod>

    for (i = 0; i < size_N; ++i){
 4a2:	4781                	li	a5,0
 4a4:	0497c163          	blt	a5,s1,4e6 <polydiv+0xb6>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
 4a8:	002a1793          	slli	a5,s4,0x2
 4ac:	97de                	add	a5,a5,s7
 4ae:	4398                	lw	a4,0(a5)
 4b0:	040a5663          	bgez	s4,4fc <polydiv+0xcc>
    for (i = 0; i < size_N; ++i){
 4b4:	4781                	li	a5,0
 4b6:	4d01                	li	s10,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
 4b8:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
 4ba:	052d4463          	blt	s10,s2,502 <polydiv+0xd2>
 4be:	87e2                	mv	a5,s8
 4c0:	a891                	j	514 <polydiv+0xe4>
        num_temp[i] = num[i];
 4c2:	00279713          	slli	a4,a5,0x2
 4c6:	00ec86b3          	add	a3,s9,a4
 4ca:	972a                	add	a4,a4,a0
 4cc:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_N; ++i){
 4ce:	0785                	addi	a5,a5,1
        num_temp[i] = num[i];
 4d0:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_N; ++i){
 4d2:	bf5d                	j	488 <polydiv+0x58>
        denum_temp[i] = denum[i];
 4d4:	00279713          	slli	a4,a5,0x2
 4d8:	00eb86b3          	add	a3,s7,a4
 4dc:	976a                	add	a4,a4,s10
 4de:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_D; ++i) {
 4e0:	0785                	addi	a5,a5,1
        denum_temp[i] = denum[i];
 4e2:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_D; ++i) {
 4e4:	bf4d                	j	496 <polydiv+0x66>
        q[i] = 0;
 4e6:	00279713          	slli	a4,a5,0x2
 4ea:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
 4ee:	9756                	add	a4,a4,s5
        q[i] = 0;
 4f0:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
 4f4:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
 4f8:	0785                	addi	a5,a5,1
 4fa:	b76d                	j	4a4 <polydiv+0x74>
        if( denum_temp[i] != 0 )
 4fc:	ff45                	bnez	a4,4b4 <polydiv+0x84>
    for (i = size_D-1; i >= 0; i = i-1){
 4fe:	1a7d                	addi	s4,s4,-1
 500:	b765                	j	4a8 <polydiv+0x78>
        if ( (b_N*u)%mod == 1 )
 502:	0327e633          	rem	a2,a5,s2
 506:	97ba                	add	a5,a5,a4
 508:	fad60be3          	beq	a2,a3,4be <polydiv+0x8e>
    for (u = 0; u < mod; ++u){
 50c:	0d05                	addi	s10,s10,1
 50e:	b775                	j	4ba <polydiv+0x8a>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
 510:	eb01                	bnez	a4,520 <polydiv+0xf0>
    for (i = size_N-1; i >= 0; i = i-1){
 512:	17fd                	addi	a5,a5,-1
 514:	00279713          	slli	a4,a5,0x2
 518:	9766                	add	a4,a4,s9
 51a:	4318                	lw	a4,0(a4)
 51c:	fe07dae3          	bgez	a5,510 <polydiv+0xe0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
 520:	0547d663          	bge	a5,s4,56c <polydiv+0x13c>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
 524:	4781                	li	a5,0
        result[i] = q[i];
 526:	00001697          	auipc	a3,0x1
 52a:	0f668693          	addi	a3,a3,246 # 161c <result>
    for(i = 0; i < size_N; ++i){
 52e:	0c97c563          	blt	a5,s1,5f8 <polydiv+0x1c8>
    }


    for(i = size_N; i < (2*size_N); ++i){
 532:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
 536:	00001697          	auipc	a3,0x1
 53a:	0e668693          	addi	a3,a3,230 # 161c <result>
    for(i = size_N; i < (2*size_N); ++i){
 53e:	0ce4c663          	blt	s1,a4,60a <polydiv+0x1da>
    }

    return_address3 = &result[0];

    return return_address3;
}
 542:	fc040113          	addi	sp,s0,-64
 546:	50f2                	lw	ra,60(sp)
 548:	5462                	lw	s0,56(sp)
 54a:	54d2                	lw	s1,52(sp)
 54c:	5942                	lw	s2,48(sp)
 54e:	59b2                	lw	s3,44(sp)
 550:	5a22                	lw	s4,40(sp)
 552:	5a92                	lw	s5,36(sp)
 554:	5b02                	lw	s6,32(sp)
 556:	4bf2                	lw	s7,28(sp)
 558:	4c62                	lw	s8,24(sp)
 55a:	4cd2                	lw	s9,20(sp)
 55c:	4d42                	lw	s10,16(sp)
 55e:	4db2                	lw	s11,12(sp)
 560:	00001517          	auipc	a0,0x1
 564:	0bc50513          	addi	a0,a0,188 # 161c <result>
 568:	6121                	addi	sp,sp,64
 56a:	8082                	ret
        v[(d-d2)] = u*r_d;
 56c:	03a70733          	mul	a4,a4,s10
 570:	414787b3          	sub	a5,a5,s4
 574:	078a                	slli	a5,a5,0x2
 576:	97d6                	add	a5,a5,s5
    array_mod(v,mod,size_N);
 578:	8626                	mv	a2,s1
 57a:	85ca                	mv	a1,s2
 57c:	8556                	mv	a0,s5
        v[(d-d2)] = u*r_d;
 57e:	c398                	sw	a4,0(a5)
    array_mod(v,mod,size_N);
 580:	3e2d                	jal	ba <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 582:	4781                	li	a5,0
 584:	874a                	mv	a4,s2
 586:	86ce                	mv	a3,s3
 588:	8656                	mv	a2,s5
 58a:	85ce                	mv	a1,s3
 58c:	855e                	mv	a0,s7
 58e:	36a9                	jal	d8 <polymult>
    array_mod(product,mod,size_N);
 590:	8626                	mv	a2,s1
 592:	85ca                	mv	a1,s2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 594:	8daa                	mv	s11,a0
    array_mod(product,mod,size_N);
 596:	3615                	jal	ba <array_mod>
        for (i = 0; i < size_N; ++i){
 598:	8766                	mv	a4,s9
 59a:	4781                	li	a5,0
 59c:	0297c763          	blt	a5,s1,5ca <polydiv+0x19a>
    array_mod(num_temp,mod,size_N);
 5a0:	8626                	mv	a2,s1
 5a2:	85ca                	mv	a1,s2
 5a4:	8566                	mv	a0,s9
 5a6:	3e11                	jal	ba <array_mod>
    array_add(q,v,size_N);
 5a8:	8626                	mv	a2,s1
 5aa:	85d6                	mv	a1,s5
 5ac:	855a                	mv	a0,s6
 5ae:	34d5                	jal	92 <array_add>
    array_mod(q,mod,size_N);
 5b0:	8626                	mv	a2,s1
 5b2:	85ca                	mv	a1,s2
 5b4:	855a                	mv	a0,s6
 5b6:	3611                	jal	ba <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
 5b8:	87e2                	mv	a5,s8
 5ba:	00279713          	slli	a4,a5,0x2
 5be:	9766                	add	a4,a4,s9
 5c0:	4318                	lw	a4,0(a4)
 5c2:	0007df63          	bgez	a5,5e0 <polydiv+0x1b0>
 5c6:	4681                	li	a3,0
 5c8:	a02d                	j	5f2 <polydiv+0x1c2>
            num_temp[i] = num_temp[i] - product[i];
 5ca:	00279613          	slli	a2,a5,0x2
 5ce:	966e                	add	a2,a2,s11
 5d0:	4314                	lw	a3,0(a4)
 5d2:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
 5d4:	0785                	addi	a5,a5,1
 5d6:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
 5d8:	8e91                	sub	a3,a3,a2
 5da:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
 5de:	bf7d                	j	59c <polydiv+0x16c>
            if( num_temp[i] != 0 )
 5e0:	f37d                	bnez	a4,5c6 <polydiv+0x196>
        for (i = size_N-1; i >= 0; i = i-1){
 5e2:	17fd                	addi	a5,a5,-1
 5e4:	bfd9                	j	5ba <polydiv+0x18a>
            v[i] = 0;
 5e6:	00269613          	slli	a2,a3,0x2
 5ea:	9656                	add	a2,a2,s5
 5ec:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
 5f0:	0685                	addi	a3,a3,1
 5f2:	fe96cae3          	blt	a3,s1,5e6 <polydiv+0x1b6>
 5f6:	b72d                	j	520 <polydiv+0xf0>
        result[i] = q[i];
 5f8:	00279713          	slli	a4,a5,0x2
 5fc:	00e68633          	add	a2,a3,a4
 600:	975a                	add	a4,a4,s6
 602:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
 604:	0785                	addi	a5,a5,1
        result[i] = q[i];
 606:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
 608:	b71d                	j	52e <polydiv+0xfe>
        result[i] = num_temp[i-size_N];
 60a:	000ca603          	lw	a2,0(s9)
 60e:	00249793          	slli	a5,s1,0x2
 612:	97b6                	add	a5,a5,a3
 614:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
 616:	0485                	addi	s1,s1,1
 618:	0c91                	addi	s9,s9,4
 61a:	b715                	j	53e <polydiv+0x10e>

0000061c <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
 61c:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 620:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
 622:	07bd                	addi	a5,a5,15
 624:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 626:	c4a2                	sw	s0,72(sp)
 628:	c2a6                	sw	s1,68(sp)
 62a:	c0ca                	sw	s2,64(sp)
 62c:	de4e                	sw	s3,60(sp)
 62e:	dc52                	sw	s4,56(sp)
 630:	da56                	sw	s5,52(sp)
 632:	d85a                	sw	s6,48(sp)
 634:	d65e                	sw	s7,44(sp)
 636:	d462                	sw	s8,40(sp)
 638:	d266                	sw	s9,36(sp)
 63a:	ce6e                	sw	s11,28(sp)
 63c:	c686                	sw	ra,76(sp)
 63e:	d06a                	sw	s10,32(sp)
 640:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
 642:	40f10133          	sub	sp,sp,a5
 646:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
 648:	40f10133          	sub	sp,sp,a5
 64c:	8a8a                	mv	s5,sp
    int ri[size];
 64e:	40f10133          	sub	sp,sp,a5
 652:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
 654:	40f10133          	sub	sp,sp,a5
 658:	8b0a                	mv	s6,sp
    int ti[size];
 65a:	40f10133          	sub	sp,sp,a5
 65e:	8c8a                	mv	s9,sp
    int qi_1[size];
 660:	40f10133          	sub	sp,sp,a5
 664:	8b8a                	mv	s7,sp
    int temp[size];
 666:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 66a:	84b6                	mv	s1,a3
 66c:	8db2                	mv	s11,a2
    int ri_2[size]; // MX-ring poly, a
 66e:	fff60913          	addi	s2,a2,-1
    int temp[size];
 672:	8a0a                	mv	s4,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
 674:	4781                	li	a5,0
 676:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
 678:	00001697          	auipc	a3,0x1
 67c:	1fc68693          	addi	a3,a3,508 # 1874 <ti_2>
    for (i = 0; i < size; ++i) {
 680:	0fb74163          	blt	a4,s11,762 <ext_euclid+0x146>

///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
 684:	4785                	li	a5,1
 686:	00fb2023          	sw	a5,0(s6)
//            ri_1[i] = ri_1[i] % mod;
//        }
    array_mod(ri_1,mod,size);

        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
 68a:	001d9793          	slli	a5,s11,0x1
 68e:	faf42e23          	sw	a5,-68(s0)
//            temp[i] = temp[i] % mod;
//        }
    array_mod(temp,mod,size);

        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
 692:	00001d17          	auipc	s10,0x1
 696:	1e2d0d13          	addi	s10,s10,482 # 1874 <ti_2>
    array_mod(ri_2,mod,size);
 69a:	866e                	mv	a2,s11
 69c:	85a6                	mv	a1,s1
 69e:	854e                	mv	a0,s3
 6a0:	3c29                	jal	ba <array_mod>
    array_mod(ri_1,mod,size);
 6a2:	866e                	mv	a2,s11
 6a4:	85a6                	mv	a1,s1
 6a6:	8556                	mv	a0,s5
 6a8:	3c09                	jal	ba <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 6aa:	8726                	mv	a4,s1
 6ac:	86ee                	mv	a3,s11
 6ae:	8656                	mv	a2,s5
 6b0:	85ee                	mv	a1,s11
 6b2:	854e                	mv	a0,s3
 6b4:	3bb5                	jal	430 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6b6:	8762                	mv	a4,s8
 6b8:	87ee                	mv	a5,s11
 6ba:	fbc42683          	lw	a3,-68(s0)
 6be:	0cd7cd63          	blt	a5,a3,798 <ext_euclid+0x17c>
 6c2:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
 6c4:	4701                	li	a4,0
 6c6:	0ee95263          	bge	s2,a4,7aa <ext_euclid+0x18e>
    array_mod(temp,mod,size);
 6ca:	866e                	mv	a2,s11
 6cc:	85a6                	mv	a1,s1
 6ce:	8552                	mv	a0,s4
 6d0:	32ed                	jal	ba <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6d2:	8726                	mv	a4,s1
 6d4:	86ee                	mv	a3,s11
 6d6:	8656                	mv	a2,s5
 6d8:	85ee                	mv	a1,s11
 6da:	8552                	mv	a0,s4
 6dc:	3b91                	jal	430 <polydiv>
        for (i = 0; i < N + 1; ++i) {
 6de:	4781                	li	a5,0
 6e0:	0ef95263          	bge	s2,a5,7c4 <ext_euclid+0x1a8>
    array_mod(qi_1,mod,size);
 6e4:	866e                	mv	a2,s11
 6e6:	85a6                	mv	a1,s1
 6e8:	855e                	mv	a0,s7
 6ea:	3ac1                	jal	ba <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6ec:	4781                	li	a5,0
 6ee:	8726                	mv	a4,s1
 6f0:	86ee                	mv	a3,s11
 6f2:	865a                	mv	a2,s6
 6f4:	85ee                	mv	a1,s11
 6f6:	855e                	mv	a0,s7
 6f8:	32c5                	jal	d8 <polymult>
        for (i = 0; i < N + 1; ++i) {
 6fa:	4781                	li	a5,0
 6fc:	0cf95d63          	bge	s2,a5,7d6 <ext_euclid+0x1ba>
    array_mod(temp,mod,size);
 700:	866e                	mv	a2,s11
 702:	85a6                	mv	a1,s1
 704:	8552                	mv	a0,s4
 706:	3a55                	jal	ba <array_mod>
        for (i = 0; i < N + 1; ++i) {
 708:	4781                	li	a5,0
 70a:	4701                	li	a4,0
 70c:	0ce95e63          	bge	s2,a4,7e8 <ext_euclid+0x1cc>
//            while (ti[i] < 0) {
//                ti[i] = ti[i] + mod;
//            }
//            ti[i] = ti[i] % mod;
//        }
    array_mod(ti,mod,size);
 710:	866e                	mv	a2,s11
 712:	85a6                	mv	a1,s1
 714:	8566                	mv	a0,s9
 716:	3255                	jal	ba <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///


        for (i = 0; i < N + 1; ++i) {
 718:	4781                	li	a5,0
        controlR = 0;
 71a:	4701                	li	a4,0
        for (i = 0; i < N + 1; ++i) {
 71c:	4681                	li	a3,0
 71e:	0ed95263          	bge	s2,a3,802 <ext_euclid+0x1e6>
    while (controlR != 0) {
 722:	ff25                	bnez	a4,69a <ext_euclid+0x7e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
 724:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
 726:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
 728:	1097cb63          	blt	a5,s1,83e <ext_euclid+0x222>
 72c:	00001617          	auipc	a2,0x1
 730:	14860613          	addi	a2,a2,328 # 1874 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
 734:	10e95f63          	bge	s2,a4,852 <ext_euclid+0x236>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
 738:	fb040113          	addi	sp,s0,-80
 73c:	40b6                	lw	ra,76(sp)
 73e:	4426                	lw	s0,72(sp)
 740:	4496                	lw	s1,68(sp)
 742:	4906                	lw	s2,64(sp)
 744:	59f2                	lw	s3,60(sp)
 746:	5a62                	lw	s4,56(sp)
 748:	5ad2                	lw	s5,52(sp)
 74a:	5b42                	lw	s6,48(sp)
 74c:	5bb2                	lw	s7,44(sp)
 74e:	5c22                	lw	s8,40(sp)
 750:	5c92                	lw	s9,36(sp)
 752:	5d02                	lw	s10,32(sp)
 754:	4df2                	lw	s11,28(sp)
 756:	00001517          	auipc	a0,0x1
 75a:	11e50513          	addi	a0,a0,286 # 1874 <ti_2>
 75e:	6161                	addi	sp,sp,80
 760:	8082                	ret
        ri_2[i] = polyR[i];
 762:	00f508b3          	add	a7,a0,a5
 766:	0008a883          	lw	a7,0(a7)
 76a:	00f98633          	add	a2,s3,a5
    for (i = 0; i < size; ++i) {
 76e:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
 770:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
 774:	00f588b3          	add	a7,a1,a5
 778:	0008a883          	lw	a7,0(a7)
 77c:	00fa8633          	add	a2,s5,a5
 780:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
 784:	00f68633          	add	a2,a3,a5
 788:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
 78c:	00fb0633          	add	a2,s6,a5
 790:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
 794:	0791                	addi	a5,a5,4
 796:	b5ed                	j	680 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
 798:	00279693          	slli	a3,a5,0x2
 79c:	96aa                	add	a3,a3,a0
 79e:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 7a0:	0785                	addi	a5,a5,1
 7a2:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
 7a4:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 7a8:	bf09                	j	6ba <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
 7aa:	00f986b3          	add	a3,s3,a5
 7ae:	00fc05b3          	add	a1,s8,a5
 7b2:	4294                	lw	a3,0(a3)
 7b4:	418c                	lw	a1,0(a1)
 7b6:	00fa0633          	add	a2,s4,a5
        for (i = 0; i < N + 1; ++i) {
 7ba:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
 7bc:	8e8d                	sub	a3,a3,a1
 7be:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7c0:	0791                	addi	a5,a5,4
 7c2:	b711                	j	6c6 <ext_euclid+0xaa>
            qi_1[i] = res1[i];
 7c4:	00279713          	slli	a4,a5,0x2
 7c8:	00e506b3          	add	a3,a0,a4
 7cc:	4294                	lw	a3,0(a3)
 7ce:	975e                	add	a4,a4,s7
        for (i = 0; i < N + 1; ++i) {
 7d0:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
 7d2:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
 7d4:	b731                	j	6e0 <ext_euclid+0xc4>
            temp[i] = res2[i];
 7d6:	00279713          	slli	a4,a5,0x2
 7da:	00e506b3          	add	a3,a0,a4
 7de:	4294                	lw	a3,0(a3)
 7e0:	9752                	add	a4,a4,s4
        for (i = 0; i < N + 1; ++i) {
 7e2:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
 7e4:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
 7e6:	bf19                	j	6fc <ext_euclid+0xe0>
            ti[i] = ti_2[i] - temp[i];
 7e8:	00fd06b3          	add	a3,s10,a5
 7ec:	00fa05b3          	add	a1,s4,a5
 7f0:	4294                	lw	a3,0(a3)
 7f2:	418c                	lw	a1,0(a1)
 7f4:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
 7f8:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
 7fa:	8e8d                	sub	a3,a3,a1
 7fc:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 7fe:	0791                	addi	a5,a5,4
 800:	b731                	j	70c <ext_euclid+0xf0>
            ri_2[i] = ri_1[i];
 802:	00fa85b3          	add	a1,s5,a5
 806:	4188                	lw	a0,0(a1)
 808:	00f98633          	add	a2,s3,a5
        for (i = 0; i < N + 1; ++i) {
 80c:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
 80e:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
 810:	00fc0633          	add	a2,s8,a5
 814:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
 816:	00fd0533          	add	a0,s10,a5
            ri_1[i] = ri[i];
 81a:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
 81c:	00fb05b3          	add	a1,s6,a5
 820:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
 824:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
 826:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
 82a:	00fc8533          	add	a0,s9,a5
 82e:	4108                	lw	a0,0(a0)
 830:	c188                	sw	a0,0(a1)
              qi_1[i] = 0;
 832:	00fb85b3          	add	a1,s7,a5
 836:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
 83a:	0791                	addi	a5,a5,4
 83c:	b5cd                	j	71e <ext_euclid+0x102>
            if (((ri_2[0] * j) % mod) == 1)
 83e:	0009a683          	lw	a3,0(s3)
 842:	02d786b3          	mul	a3,a5,a3
 846:	0296e6b3          	rem	a3,a3,s1
 84a:	eec681e3          	beq	a3,a2,72c <ext_euclid+0x110>
        for (j = 0; j < mod; ++j) {
 84e:	0785                	addi	a5,a5,1
 850:	bde1                	j	728 <ext_euclid+0x10c>
            ti_2[i] = (ti_2[i] * j) % mod;
 852:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
 854:	0705                	addi	a4,a4,1
 856:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
 858:	02d786b3          	mul	a3,a5,a3
 85c:	0296e6b3          	rem	a3,a3,s1
 860:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
 864:	bdc1                	j	734 <ext_euclid+0x118>

00000866 <generate_keys>:




int* generate_keys(int N, int p, int q){
 866:	7141                	addi	sp,sp,-496
 868:	1e112623          	sw	ra,492(sp)
 86c:	1e812423          	sw	s0,488(sp)
 870:	1e912223          	sw	s1,484(sp)
 874:	1b80                	addi	s0,sp,496
 876:	1f212023          	sw	s2,480(sp)
 87a:	1d312e23          	sw	s3,476(sp)
 87e:	1d412c23          	sw	s4,472(sp)
 882:	1d512a23          	sw	s5,468(sp)
 886:	1d612823          	sw	s6,464(sp)
 88a:	1d712623          	sw	s7,460(sp)
 88e:	1da12023          	sw	s10,448(sp)
 892:	1d812423          	sw	s8,456(sp)
 896:	1d912223          	sw	s9,452(sp)
 89a:	892a                	mv	s2,a0
 89c:	8bae                	mv	s7,a1
 89e:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 8a0:	4581                	li	a1,0
 8a2:	0d000613          	li	a2,208
 8a6:	e2440513          	addi	a0,s0,-476
 8aa:	23b9                	jal	df8 <memset>
 8ac:	4485                	li	s1,1
 8ae:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 8b0:	0d800613          	li	a2,216
 8b4:	4581                	li	a1,0
 8b6:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
 8ba:	e1342c23          	sw	s3,-488(s0)
 8be:	e0942e23          	sw	s1,-484(s0)
 8c2:	e2942023          	sw	s1,-480(s0)
 8c6:	e3342423          	sw	s3,-472(s0)
 8ca:	e2942823          	sw	s1,-464(s0)
 8ce:	e2942e23          	sw	s1,-452(s0)
 8d2:	e5342023          	sw	s3,-448(s0)
 8d6:	e5342223          	sw	s3,-444(s0)
 8da:	e4942623          	sw	s1,-436(s0)
 8de:	e5342a23          	sw	s3,-428(s0)
 8e2:	e4942e23          	sw	s1,-420(s0)
 8e6:	e6942023          	sw	s1,-416(s0)
 8ea:	e7342623          	sw	s3,-404(s0)
 8ee:	e6942a23          	sw	s1,-396(s0)
 8f2:	e8942023          	sw	s1,-384(s0)
 8f6:	e8942223          	sw	s1,-380(s0)
 8fa:	e8942423          	sw	s1,-376(s0)
 8fe:	e9342623          	sw	s3,-372(s0)
 902:	e8942a23          	sw	s1,-364(s0)
 906:	ea942023          	sw	s1,-352(s0)
 90a:	ea942223          	sw	s1,-348(s0)
 90e:	ea942423          	sw	s1,-344(s0)
 912:	eb342623          	sw	s3,-340(s0)
 916:	ea942a23          	sw	s1,-332(s0)
 91a:	ec942023          	sw	s1,-320(s0)
 91e:	ec942223          	sw	s1,-316(s0)
 922:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
 926:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 92a:	21f9                	jal	df8 <memset>
    int polyR[N+1];
 92c:	002a9793          	slli	a5,s5,0x2
 930:	07bd                	addi	a5,a5,15
 932:	9bc1                	andi	a5,a5,-16
 934:	40f10133          	sub	sp,sp,a5
 938:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
 93a:	00291d13          	slli	s10,s2,0x2
 93e:	01aa07b3          	add	a5,s4,s10
 942:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
 944:	ef342a23          	sw	s3,-268(s0)
 948:	ee942e23          	sw	s1,-260(s0)
 94c:	f0942023          	sw	s1,-256(s0)
 950:	f0942423          	sw	s1,-248(s0)
 954:	f1342a23          	sw	s3,-236(s0)
 958:	f1342e23          	sw	s3,-228(s0)
 95c:	f3342023          	sw	s3,-224(s0)
 960:	f2942423          	sw	s1,-216(s0)
 964:	f3342823          	sw	s3,-208(s0)
 968:	f2942c23          	sw	s1,-200(s0)
 96c:	f4942223          	sw	s1,-188(s0)
 970:	f5342423          	sw	s3,-184(s0)
 974:	f4942823          	sw	s1,-176(s0)
 978:	f4942e23          	sw	s1,-164(s0)
 97c:	f7342023          	sw	s3,-160(s0)
 980:	f6942423          	sw	s1,-152(s0)
 984:	f6942a23          	sw	s1,-140(s0)
 988:	f7342c23          	sw	s3,-136(s0)
 98c:	f8942023          	sw	s1,-128(s0)
 990:	f8942423          	sw	s1,-120(s0)
 994:	f8942623          	sw	s1,-116(s0)
 998:	f8942c23          	sw	s1,-104(s0)
 99c:	f9342e23          	sw	s3,-100(s0)
 9a0:	fa942223          	sw	s1,-92(s0)
 9a4:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
 9a8:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
 9ac:	4785                	li	a5,1
 9ae:	1127c163          	blt	a5,s2,ab0 <generate_keys+0x24a>
 9b2:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
 9b4:	03600693          	li	a3,54
 9b8:	10f6d363          	bge	a3,a5,abe <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
 9bc:	4781                	li	a5,0
        random_keys[i] = f[i];
 9be:	00001697          	auipc	a3,0x1
 9c2:	04668693          	addi	a3,a3,70 # 1a04 <random_keys>
    for(i = 0; i < N; ++i){
 9c6:	1127ca63          	blt	a5,s2,ada <generate_keys+0x274>
 9ca:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
 9ce:	00191993          	slli	s3,s2,0x1
 9d2:	87ca                	mv	a5,s2
 9d4:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
 9d6:	00001617          	auipc	a2,0x1
 9da:	02e60613          	addi	a2,a2,46 # 1a04 <random_keys>
    for(i = N; i < (2*N); ++i){
 9de:	1137c963          	blt	a5,s3,af0 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
 9e2:	448d                	li	s1,3
 9e4:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
 9e8:	86de                	mv	a3,s7
 9ea:	8656                	mv	a2,s5
 9ec:	e1840593          	addi	a1,s0,-488
 9f0:	8552                	mv	a0,s4
 9f2:	312d                	jal	61c <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
 9f4:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
 9f6:	00001697          	auipc	a3,0x1
 9fa:	00e68693          	addi	a3,a3,14 # 1a04 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
 9fe:	1097c163          	blt	a5,s1,b00 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
 a02:	8656                	mv	a2,s5
 a04:	86da                	mv	a3,s6
 a06:	e1840593          	addi	a1,s0,-488
 a0a:	8552                	mv	a0,s4
 a0c:	3901                	jal	61c <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
 a0e:	5751                	li	a4,-12
 a10:	02e90733          	mul	a4,s2,a4
 a14:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
 a16:	00001617          	auipc	a2,0x1
 a1a:	fee60613          	addi	a2,a2,-18 # 1a04 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
 a1e:	0fa4c963          	blt	s1,s10,b10 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
 a22:	4701                	li	a4,0
 a24:	85ca                	mv	a1,s2
 a26:	86ca                	mv	a3,s2
 a28:	8666                	mv	a2,s9
 a2a:	3045                	jal	2ca <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
 a2c:	87aa                	mv	a5,a0
 a2e:	4701                	li	a4,0
 a30:	fff98593          	addi	a1,s3,-1
 a34:	0eb74863          	blt	a4,a1,b24 <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
 a38:	86d6                	mv	a3,s5
 a3a:	875a                	mv	a4,s6
 a3c:	8652                	mv	a2,s4
 a3e:	3acd                	jal	430 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
 a40:	4795                	li	a5,5
 a42:	02f907b3          	mul	a5,s2,a5
 a46:	098a                	slli	s3,s3,0x2
 a48:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 a4a:	00001697          	auipc	a3,0x1
 a4e:	fba68693          	addi	a3,a3,-70 # 1a04 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
 a52:	0991                	addi	s3,s3,4
 a54:	0efc4063          	blt	s8,a5,b34 <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
 a58:	4699                	li	a3,6
 a5a:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
 a5c:	00001617          	auipc	a2,0x1
 a60:	fa860613          	addi	a2,a2,-88 # 1a04 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
 a64:	02d906b3          	mul	a3,s2,a3
 a68:	02a90933          	mul	s2,s2,a0
 a6c:	0cf6dc63          	bge	a3,a5,b44 <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
 a70:	e1040113          	addi	sp,s0,-496
 a74:	1ec12083          	lw	ra,492(sp)
 a78:	1e812403          	lw	s0,488(sp)
 a7c:	1e412483          	lw	s1,484(sp)
 a80:	1e012903          	lw	s2,480(sp)
 a84:	1dc12983          	lw	s3,476(sp)
 a88:	1d812a03          	lw	s4,472(sp)
 a8c:	1d412a83          	lw	s5,468(sp)
 a90:	1d012b03          	lw	s6,464(sp)
 a94:	1cc12b83          	lw	s7,460(sp)
 a98:	1c812c03          	lw	s8,456(sp)
 a9c:	1c412c83          	lw	s9,452(sp)
 aa0:	1c012d03          	lw	s10,448(sp)
 aa4:	00001517          	auipc	a0,0x1
 aa8:	f6050513          	addi	a0,a0,-160 # 1a04 <random_keys>
 aac:	617d                	addi	sp,sp,496
 aae:	8082                	ret
        polyR[i] = 0;
 ab0:	00279713          	slli	a4,a5,0x2
 ab4:	9752                	add	a4,a4,s4
 ab6:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
 aba:	0785                	addi	a5,a5,1
 abc:	bdcd                	j	9ae <generate_keys+0x148>
        f[i] = 0;
 abe:	00279713          	slli	a4,a5,0x2
 ac2:	e1840613          	addi	a2,s0,-488
 ac6:	963a                	add	a2,a2,a4
 ac8:	00062023          	sw	zero,0(a2)
        g[i] = 0;
 acc:	ef440613          	addi	a2,s0,-268
 ad0:	9732                	add	a4,a4,a2
 ad2:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
 ad6:	0785                	addi	a5,a5,1
 ad8:	b5c5                	j	9b8 <generate_keys+0x152>
        random_keys[i] = f[i];
 ada:	00279713          	slli	a4,a5,0x2
 ade:	e1840593          	addi	a1,s0,-488
 ae2:	00e68633          	add	a2,a3,a4
 ae6:	972e                	add	a4,a4,a1
 ae8:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
 aea:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
 aec:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
 aee:	bde1                	j	9c6 <generate_keys+0x160>
        random_keys[i] = g[i-N];
 af0:	430c                	lw	a1,0(a4)
 af2:	00279693          	slli	a3,a5,0x2
 af6:	96b2                	add	a3,a3,a2
 af8:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
 afa:	0785                	addi	a5,a5,1
 afc:	0711                	addi	a4,a4,4
 afe:	b5c5                	j	9de <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
 b00:	4110                	lw	a2,0(a0)
 b02:	00279713          	slli	a4,a5,0x2
 b06:	9736                	add	a4,a4,a3
 b08:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 b0a:	0785                	addi	a5,a5,1
 b0c:	0511                	addi	a0,a0,4
 b0e:	bdc5                	j	9fe <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
 b10:	00249793          	slli	a5,s1,0x2
 b14:	00f706b3          	add	a3,a4,a5
 b18:	96aa                	add	a3,a3,a0
 b1a:	4294                	lw	a3,0(a3)
 b1c:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
 b1e:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
 b20:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
 b22:	bdf5                	j	a1e <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
 b24:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
 b26:	0705                	addi	a4,a4,1
 b28:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
 b2a:	037686b3          	mul	a3,a3,s7
 b2e:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
 b32:	b709                	j	a34 <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
 b34:	ff89a603          	lw	a2,-8(s3)
 b38:	002c1713          	slli	a4,s8,0x2
 b3c:	9736                	add	a4,a4,a3
 b3e:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
 b40:	0c05                	addi	s8,s8,1
 b42:	bf01                	j	a52 <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
 b44:	00279713          	slli	a4,a5,0x2
 b48:	00e605b3          	add	a1,a2,a4
 b4c:	974a                	add	a4,a4,s2
 b4e:	9752                	add	a4,a4,s4
 b50:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
 b52:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
 b54:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
 b56:	bf19                	j	a6c <generate_keys+0x206>

00000b58 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b58:	7115                	addi	sp,sp,-224
 b5a:	cda2                	sw	s0,216(sp)
 b5c:	cba6                	sw	s1,212(sp)
 b5e:	842a                	mv	s0,a0
 b60:	84b2                	mv	s1,a2
 b62:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b64:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b68:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b6a:	850a                	mv	a0,sp
 b6c:	00000597          	auipc	a1,0x0
 b70:	47c58593          	addi	a1,a1,1148 # fe8 <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
 b74:	cf86                	sw	ra,220(sp)
 b76:	c7ce                	sw	s3,204(sp)
 b78:	c5d2                	sw	s4,200(sp)
 b7a:	89b6                	mv	s3,a3
 b7c:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
 b7e:	2a71                	jal	d1a <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
 b80:	4781                	li	a5,0
 b82:	874a                	mv	a4,s2
 b84:	03000693          	li	a3,48
 b88:	85a2                	mv	a1,s0
 b8a:	860a                	mv	a2,sp
 b8c:	854e                	mv	a0,s3
 b8e:	d4aff0ef          	jal	ra,d8 <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
 b92:	85a6                	mv	a1,s1
 b94:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
 b98:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 b9a:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
 b9e:	cf4ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
 ba2:	00140693          	addi	a3,s0,1
 ba6:	874a                	mv	a4,s2
 ba8:	8652                	mv	a2,s4
 baa:	85a6                	mv	a1,s1
 bac:	854e                	mv	a0,s3
 bae:	3049                	jal	430 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
 bb0:	478d                	li	a5,3
 bb2:	02f40433          	mul	s0,s0,a5
 bb6:	87aa                	mv	a5,a0
 bb8:	0084ca63          	blt	s1,s0,bcc <ntru_encyrpt+0x74>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
 bbc:	40fe                	lw	ra,220(sp)
 bbe:	446e                	lw	s0,216(sp)
 bc0:	44de                	lw	s1,212(sp)
 bc2:	494e                	lw	s2,208(sp)
 bc4:	49be                	lw	s3,204(sp)
 bc6:	4a2e                	lw	s4,200(sp)
 bc8:	612d                	addi	sp,sp,224
 bca:	8082                	ret
        CT[i-(2*N)] = CT[i];
 bcc:	00249713          	slli	a4,s1,0x2
 bd0:	972a                	add	a4,a4,a0
 bd2:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
 bd4:	0485                	addi	s1,s1,1
 bd6:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
 bd8:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
 bdc:	bff1                	j	bb8 <ntru_encyrpt+0x60>

00000bde <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 bde:	7179                	addi	sp,sp,-48
 be0:	d422                	sw	s0,40(sp)
 be2:	ce4e                	sw	s3,28(sp)
 be4:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
 be6:	498d                	li	s3,3
 be8:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 bec:	d04a                	sw	s2,32(sp)
 bee:	ca56                	sw	s5,20(sp)
 bf0:	c65e                	sw	s7,12(sp)
 bf2:	8932                	mv	s2,a2
 bf4:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 bf6:	863e                	mv	a2,a5
 bf8:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 bfa:	8aae                	mv	s5,a1
 bfc:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 bfe:	85a2                	mv	a1,s0
 c00:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
 c02:	d606                	sw	ra,44(sp)
 c04:	d226                	sw	s1,36(sp)
 c06:	cc52                	sw	s4,24(sp)
 c08:	c85a                	sw	s6,16(sp)
 c0a:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 c0c:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
 c10:	ebaff0ef          	jal	ra,2ca <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
 c14:	00140b13          	addi	s6,s0,1
 c18:	874a                	mv	a4,s2
 c1a:	86da                	mv	a3,s6
 c1c:	8652                	mv	a2,s4
 c1e:	85a6                	mv	a1,s1
 c20:	3801                	jal	430 <polydiv>
 c22:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
 c24:	87aa                	mv	a5,a0
 c26:	872a                	mv	a4,a0
 c28:	86a6                	mv	a3,s1
 c2a:	0536c263          	blt	a3,s3,c6e <ntru_deceypt+0x90>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
 c2e:	4589                	li	a1,2
 c30:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
 c34:	4701                	li	a4,0
 c36:	04874563          	blt	a4,s0,c80 <ntru_deceypt+0xa2>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
 c3a:	4701                	li	a4,0
 c3c:	86a2                	mv	a3,s0
 c3e:	85a2                	mv	a1,s0
 c40:	855e                	mv	a0,s7
 c42:	e88ff0ef          	jal	ra,2ca <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
 c46:	8756                	mv	a4,s5
 c48:	86da                	mv	a3,s6
 c4a:	8652                	mv	a2,s4
 c4c:	85a6                	mv	a1,s1
 c4e:	fe2ff0ef          	jal	ra,430 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
 c52:	87aa                	mv	a5,a0
 c54:	0334cf63          	blt	s1,s3,c92 <ntru_deceypt+0xb4>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
 c58:	50b2                	lw	ra,44(sp)
 c5a:	5422                	lw	s0,40(sp)
 c5c:	5492                	lw	s1,36(sp)
 c5e:	5902                	lw	s2,32(sp)
 c60:	49f2                	lw	s3,28(sp)
 c62:	4a62                	lw	s4,24(sp)
 c64:	4ad2                	lw	s5,20(sp)
 c66:	4b42                	lw	s6,16(sp)
 c68:	4bb2                	lw	s7,12(sp)
 c6a:	6145                	addi	sp,sp,48
 c6c:	8082                	ret
        a2[i-(2*N)] = a2[i];
 c6e:	00269593          	slli	a1,a3,0x2
 c72:	95b2                	add	a1,a1,a2
 c74:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c76:	0685                	addi	a3,a3,1
 c78:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
 c7a:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c7e:	b775                	j	c2a <ntru_deceypt+0x4c>
        if(a2[i] <= q/2)
 c80:	4394                	lw	a3,0(a5)
 c82:	00d5d563          	bge	a1,a3,c8c <ntru_deceypt+0xae>
            a2[i] = (-1)*(q-a2[i]);
 c86:	412686b3          	sub	a3,a3,s2
 c8a:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
 c8c:	0705                	addi	a4,a4,1
 c8e:	0791                	addi	a5,a5,4
 c90:	b75d                	j	c36 <ntru_deceypt+0x58>
        c2[i-(2*N)] = c2[i];
 c92:	00249713          	slli	a4,s1,0x2
 c96:	972a                	add	a4,a4,a0
 c98:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
 c9a:	0485                	addi	s1,s1,1
 c9c:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
 c9e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
 ca2:	bf4d                	j	c54 <ntru_deceypt+0x76>

00000ca4 <default_exc_handler>:
  jal x0, default_exc_handler
 ca4:	0000006f          	j	ca4 <default_exc_handler>

00000ca8 <reset_handler>:
  mv  x1, x0
 ca8:	00000093          	li	ra,0
  mv  x2, x1
 cac:	8106                	mv	sp,ra
  mv  x3, x1
 cae:	8186                	mv	gp,ra
  mv  x4, x1
 cb0:	8206                	mv	tp,ra
  mv  x5, x1
 cb2:	8286                	mv	t0,ra
  mv  x6, x1
 cb4:	8306                	mv	t1,ra
  mv  x7, x1
 cb6:	8386                	mv	t2,ra
  mv  x8, x1
 cb8:	8406                	mv	s0,ra
  mv  x9, x1
 cba:	8486                	mv	s1,ra
  mv x10, x1
 cbc:	8506                	mv	a0,ra
  mv x11, x1
 cbe:	8586                	mv	a1,ra
  mv x12, x1
 cc0:	8606                	mv	a2,ra
  mv x13, x1
 cc2:	8686                	mv	a3,ra
  mv x14, x1
 cc4:	8706                	mv	a4,ra
  mv x15, x1
 cc6:	8786                	mv	a5,ra
  mv x16, x1
 cc8:	8806                	mv	a6,ra
  mv x17, x1
 cca:	8886                	mv	a7,ra
  mv x18, x1
 ccc:	8906                	mv	s2,ra
  mv x19, x1
 cce:	8986                	mv	s3,ra
  mv x20, x1
 cd0:	8a06                	mv	s4,ra
  mv x21, x1
 cd2:	8a86                	mv	s5,ra
  mv x22, x1
 cd4:	8b06                	mv	s6,ra
  mv x23, x1
 cd6:	8b86                	mv	s7,ra
  mv x24, x1
 cd8:	8c06                	mv	s8,ra
  mv x25, x1
 cda:	8c86                	mv	s9,ra
  mv x26, x1
 cdc:	8d06                	mv	s10,ra
  mv x27, x1
 cde:	8d86                	mv	s11,ra
  mv x28, x1
 ce0:	8e06                	mv	t3,ra
  mv x29, x1
 ce2:	8e86                	mv	t4,ra
  mv x30, x1
 ce4:	8f06                	mv	t5,ra
  mv x31, x1
 ce6:	8f86                	mv	t6,ra
  la   x2, _stack_start
 ce8:	0000f117          	auipc	sp,0xf
 cec:	31810113          	addi	sp,sp,792 # 10000 <_stack_start>

00000cf0 <_start>:
  la x26, _bss_start
 cf0:	00000d17          	auipc	s10,0x0
 cf4:	47cd0d13          	addi	s10,s10,1148 # 116c <_bss_start>
  la x27, _bss_end
 cf8:	00001d97          	auipc	s11,0x1
 cfc:	204d8d93          	addi	s11,s11,516 # 1efc <_bss_end>
  bge x26, x27, zero_loop_end
 d00:	01bd5763          	bge	s10,s11,d0e <main_entry>

00000d04 <zero_loop>:
  sw x0, 0(x26)
 d04:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
 d08:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
 d0a:	ffaddde3          	bge	s11,s10,d04 <zero_loop>

00000d0e <main_entry>:
  addi x10, x0, 0
 d0e:	00000513          	li	a0,0
  addi x11, x0, 0
 d12:	00000593          	li	a1,0
  jal x1, main
 d16:	18a000ef          	jal	ra,ea0 <main>

00000d1a <memcpy>:
 d1a:	00a5c7b3          	xor	a5,a1,a0
 d1e:	8b8d                	andi	a5,a5,3
 d20:	00c508b3          	add	a7,a0,a2
 d24:	e7a1                	bnez	a5,d6c <memcpy+0x52>
 d26:	478d                	li	a5,3
 d28:	04c7f263          	bgeu	a5,a2,d6c <memcpy+0x52>
 d2c:	00357793          	andi	a5,a0,3
 d30:	872a                	mv	a4,a0
 d32:	eba9                	bnez	a5,d84 <memcpy+0x6a>
 d34:	ffc8f613          	andi	a2,a7,-4
 d38:	fe060793          	addi	a5,a2,-32
 d3c:	06f76763          	bltu	a4,a5,daa <memcpy+0x90>
 d40:	02c77363          	bgeu	a4,a2,d66 <memcpy+0x4c>
 d44:	86ae                	mv	a3,a1
 d46:	87ba                	mv	a5,a4
 d48:	0006a803          	lw	a6,0(a3)
 d4c:	0791                	addi	a5,a5,4
 d4e:	0691                	addi	a3,a3,4
 d50:	ff07ae23          	sw	a6,-4(a5)
 d54:	fec7eae3          	bltu	a5,a2,d48 <memcpy+0x2e>
 d58:	fff60793          	addi	a5,a2,-1
 d5c:	8f99                	sub	a5,a5,a4
 d5e:	9bf1                	andi	a5,a5,-4
 d60:	0791                	addi	a5,a5,4
 d62:	973e                	add	a4,a4,a5
 d64:	95be                	add	a1,a1,a5
 d66:	01176663          	bltu	a4,a7,d72 <memcpy+0x58>
 d6a:	8082                	ret
 d6c:	872a                	mv	a4,a0
 d6e:	ff157ee3          	bgeu	a0,a7,d6a <memcpy+0x50>
 d72:	0005c783          	lbu	a5,0(a1)
 d76:	0705                	addi	a4,a4,1
 d78:	0585                	addi	a1,a1,1
 d7a:	fef70fa3          	sb	a5,-1(a4)
 d7e:	ff176ae3          	bltu	a4,a7,d72 <memcpy+0x58>
 d82:	8082                	ret
 d84:	0005c683          	lbu	a3,0(a1)
 d88:	0705                	addi	a4,a4,1
 d8a:	00377793          	andi	a5,a4,3
 d8e:	fed70fa3          	sb	a3,-1(a4)
 d92:	0585                	addi	a1,a1,1
 d94:	d3c5                	beqz	a5,d34 <memcpy+0x1a>
 d96:	0005c683          	lbu	a3,0(a1)
 d9a:	0705                	addi	a4,a4,1
 d9c:	00377793          	andi	a5,a4,3
 da0:	fed70fa3          	sb	a3,-1(a4)
 da4:	0585                	addi	a1,a1,1
 da6:	fff9                	bnez	a5,d84 <memcpy+0x6a>
 da8:	b771                	j	d34 <memcpy+0x1a>
 daa:	41d4                	lw	a3,4(a1)
 dac:	0005a283          	lw	t0,0(a1)
 db0:	0085af83          	lw	t6,8(a1)
 db4:	00c5af03          	lw	t5,12(a1)
 db8:	0105ae83          	lw	t4,16(a1)
 dbc:	0145ae03          	lw	t3,20(a1)
 dc0:	0185a303          	lw	t1,24(a1)
 dc4:	01c5a803          	lw	a6,28(a1)
 dc8:	c354                	sw	a3,4(a4)
 dca:	5194                	lw	a3,32(a1)
 dcc:	00572023          	sw	t0,0(a4)
 dd0:	01f72423          	sw	t6,8(a4)
 dd4:	01e72623          	sw	t5,12(a4)
 dd8:	01d72823          	sw	t4,16(a4)
 ddc:	01c72a23          	sw	t3,20(a4)
 de0:	00672c23          	sw	t1,24(a4)
 de4:	01072e23          	sw	a6,28(a4)
 de8:	d314                	sw	a3,32(a4)
 dea:	02470713          	addi	a4,a4,36
 dee:	02458593          	addi	a1,a1,36
 df2:	faf76ce3          	bltu	a4,a5,daa <memcpy+0x90>
 df6:	b7a9                	j	d40 <memcpy+0x26>

00000df8 <memset>:
 df8:	433d                	li	t1,15
 dfa:	872a                	mv	a4,a0
 dfc:	02c37363          	bgeu	t1,a2,e22 <memset+0x2a>
 e00:	00f77793          	andi	a5,a4,15
 e04:	efbd                	bnez	a5,e82 <memset+0x8a>
 e06:	e5ad                	bnez	a1,e70 <memset+0x78>
 e08:	ff067693          	andi	a3,a2,-16
 e0c:	8a3d                	andi	a2,a2,15
 e0e:	96ba                	add	a3,a3,a4
 e10:	c30c                	sw	a1,0(a4)
 e12:	c34c                	sw	a1,4(a4)
 e14:	c70c                	sw	a1,8(a4)
 e16:	c74c                	sw	a1,12(a4)
 e18:	0741                	addi	a4,a4,16
 e1a:	fed76be3          	bltu	a4,a3,e10 <memset+0x18>
 e1e:	e211                	bnez	a2,e22 <memset+0x2a>
 e20:	8082                	ret
 e22:	40c306b3          	sub	a3,t1,a2
 e26:	068a                	slli	a3,a3,0x2
 e28:	00000297          	auipc	t0,0x0
 e2c:	9696                	add	a3,a3,t0
 e2e:	00a68067          	jr	10(a3)
 e32:	00b70723          	sb	a1,14(a4)
 e36:	00b706a3          	sb	a1,13(a4)
 e3a:	00b70623          	sb	a1,12(a4)
 e3e:	00b705a3          	sb	a1,11(a4)
 e42:	00b70523          	sb	a1,10(a4)
 e46:	00b704a3          	sb	a1,9(a4)
 e4a:	00b70423          	sb	a1,8(a4)
 e4e:	00b703a3          	sb	a1,7(a4)
 e52:	00b70323          	sb	a1,6(a4)
 e56:	00b702a3          	sb	a1,5(a4)
 e5a:	00b70223          	sb	a1,4(a4)
 e5e:	00b701a3          	sb	a1,3(a4)
 e62:	00b70123          	sb	a1,2(a4)
 e66:	00b700a3          	sb	a1,1(a4)
 e6a:	00b70023          	sb	a1,0(a4)
 e6e:	8082                	ret
 e70:	0ff5f593          	andi	a1,a1,255
 e74:	00859693          	slli	a3,a1,0x8
 e78:	8dd5                	or	a1,a1,a3
 e7a:	01059693          	slli	a3,a1,0x10
 e7e:	8dd5                	or	a1,a1,a3
 e80:	b761                	j	e08 <memset+0x10>
 e82:	00279693          	slli	a3,a5,0x2
 e86:	00000297          	auipc	t0,0x0
 e8a:	9696                	add	a3,a3,t0
 e8c:	8286                	mv	t0,ra
 e8e:	fa8680e7          	jalr	-88(a3)
 e92:	8096                	mv	ra,t0
 e94:	17c1                	addi	a5,a5,-16
 e96:	8f1d                	sub	a4,a4,a5
 e98:	963e                	add	a2,a2,a5
 e9a:	f8c374e3          	bgeu	t1,a2,e22 <memset+0x2a>
 e9e:	b7a5                	j	e06 <memset+0xe>

00000ea0 <main>:


int main(){
 ea0:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 ea4:	0c000613          	li	a2,192
 ea8:	00000597          	auipc	a1,0x0
 eac:	20058593          	addi	a1,a1,512 # 10a8 <__DTOR_END__+0xc0>
 eb0:	0068                	addi	a0,sp,12
int main(){
 eb2:	42112623          	sw	ra,1068(sp)
 eb6:	42812423          	sw	s0,1064(sp)
 eba:	42912223          	sw	s1,1060(sp)
 ebe:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
 ec2:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
 ec6:	3d91                	jal	d1a <memcpy>
    resultkon[0] = 0xaaaaaaa0;
 ec8:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
 ecc:	00000417          	auipc	s0,0x0
 ed0:	29c40413          	addi	s0,s0,668 # 1168 <_edata>
    keys = generate_keys(N, p, q);
 ed4:	06500613          	li	a2,101
 ed8:	458d                	li	a1,3
 eda:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
 ede:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
 ee0:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
 ee4:	3249                	jal	866 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
 ee6:	4781                	li	a5,0
 ee8:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
 eea:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
 eee:	00f506b3          	add	a3,a0,a5
 ef2:	4290                	lw	a2,0(a3)
 ef4:	1314                	addi	a3,sp,416
 ef6:	96be                	add	a3,a3,a5
 ef8:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
 efa:	0791                	addi	a5,a5,4
 efc:	fee799e3          	bne	a5,a4,eee <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
 f00:	1cd8                	addi	a4,sp,628
 f02:	1a850793          	addi	a5,a0,424
 f06:	27c50693          	addi	a3,a0,636
 f0a:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
 f0c:	4390                	lw	a2,0(a5)
 f0e:	0791                	addi	a5,a5,4
 f10:	0711                	addi	a4,a4,4
 f12:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
 f16:	fed79be3          	bne	a5,a3,f0c <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
 f1a:	01f8                	addi	a4,sp,204
 f1c:	35050793          	addi	a5,a0,848
 f20:	42450613          	addi	a2,a0,1060
 f24:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
 f26:	438c                	lw	a1,0(a5)
 f28:	0791                	addi	a5,a5,4
 f2a:	0711                	addi	a4,a4,4
 f2c:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
 f30:	fec79be3          	bne	a5,a2,f26 <main+0x86>
 f34:	06b0                	addi	a2,sp,840
 f36:	4fc50513          	addi	a0,a0,1276
 f3a:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
 f3c:	4398                	lw	a4,0(a5)
 f3e:	0791                	addi	a5,a5,4
 f40:	0611                	addi	a2,a2,4
 f42:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
 f46:	fea79be3          	bne	a5,a0,f3c <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
 f4a:	bbbbc4b7          	lui	s1,0xbbbbc
 f4e:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f52:	8742                	mv	a4,a6
 f54:	0070                	addi	a2,sp,12
 f56:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
 f5a:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f5e:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
 f62:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f64:	3ed5                	jal	b58 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
 f66:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
 f68:	ccccd4b7          	lui	s1,0xccccd
 f6c:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
 f70:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
 f72:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
 f74:	458d                	li	a1,3
 f76:	874a                	mv	a4,s2
 f78:	34810813          	addi	a6,sp,840
 f7c:	1314                	addi	a3,sp,416
 f7e:	06500613          	li	a2,101
 f82:	03500513          	li	a0,53
 f86:	39a1                	jal	bde <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
 f88:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
 f8c:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
 f90:	c004                	sw	s1,0(s0)
 f92:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
 f94:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
 f98:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
 f9c:	0070                	addi	a2,sp,12
 f9e:	00f506b3          	add	a3,a0,a5
 fa2:	963e                	add	a2,a2,a5
 fa4:	4210                	lw	a2,0(a2)
 fa6:	4294                	lw	a3,0(a3)
 fa8:	02d60363          	beq	a2,a3,fce <main+0x12e>
            resultkon[0] = 0xBABABABA;
 fac:	babac7b7          	lui	a5,0xbabac
 fb0:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
 fb4:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
 fb6:	42c12083          	lw	ra,1068(sp)
 fba:	42812403          	lw	s0,1064(sp)
 fbe:	42412483          	lw	s1,1060(sp)
 fc2:	42012903          	lw	s2,1056(sp)
 fc6:	4501                	li	a0,0
 fc8:	43010113          	addi	sp,sp,1072
 fcc:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
 fce:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
 fd0:	0791                	addi	a5,a5,4
 fd2:	fcb795e3          	bne	a5,a1,f9c <main+0xfc>
 fd6:	b7c5                	j	fb6 <main+0x116>

00000fd8 <__CTOR_LIST__>:
	...

00000fe0 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00000fe8 <.rodata>:
     fe8:	0001                	nop
     fea:	0000                	unimp
     fec:	ffff                	0xffff
     fee:	ffff                	0xffff
     ff0:	0000                	unimp
     ff2:	0000                	unimp
     ff4:	0001                	nop
     ff6:	0000                	unimp
     ff8:	ffff                	0xffff
     ffa:	ffff                	0xffff
     ffc:	0001                	nop
     ffe:	0000                	unimp
    1000:	ffff                	0xffff
    1002:	ffff                	0xffff
    1004:	0000                	unimp
    1006:	0000                	unimp
    1008:	0001                	nop
    100a:	0000                	unimp
    100c:	0001                	nop
    100e:	0000                	unimp
    1010:	0000                	unimp
    1012:	0000                	unimp
    1014:	ffff                	0xffff
    1016:	ffff                	0xffff
    1018:	0001                	nop
    101a:	0000                	unimp
    101c:	ffff                	0xffff
    101e:	ffff                	0xffff
    1020:	0001                	nop
    1022:	0000                	unimp
    1024:	0000                	unimp
    1026:	0000                	unimp
    1028:	0001                	nop
    102a:	0000                	unimp
    102c:	0001                	nop
    102e:	0000                	unimp
    1030:	0000                	unimp
    1032:	0000                	unimp
    1034:	ffff                	0xffff
    1036:	ffff                	0xffff
    1038:	0001                	nop
    103a:	0000                	unimp
    103c:	ffff                	0xffff
    103e:	ffff                	0xffff
    1040:	0001                	nop
    1042:	0000                	unimp
    1044:	0000                	unimp
    1046:	0000                	unimp
    1048:	0001                	nop
    104a:	0000                	unimp
    104c:	0001                	nop
    104e:	0000                	unimp
    1050:	0000                	unimp
    1052:	0000                	unimp
    1054:	0001                	nop
    1056:	0000                	unimp
    1058:	ffff                	0xffff
    105a:	ffff                	0xffff
    105c:	0001                	nop
    105e:	0000                	unimp
    1060:	ffff                	0xffff
    1062:	ffff                	0xffff
    1064:	0000                	unimp
    1066:	0000                	unimp
    1068:	0001                	nop
    106a:	0000                	unimp
    106c:	ffff                	0xffff
    106e:	ffff                	0xffff
    1070:	0000                	unimp
    1072:	0000                	unimp
    1074:	0001                	nop
    1076:	0000                	unimp
    1078:	ffff                	0xffff
    107a:	ffff                	0xffff
    107c:	0001                	nop
    107e:	0000                	unimp
    1080:	ffff                	0xffff
    1082:	ffff                	0xffff
    1084:	0000                	unimp
    1086:	0000                	unimp
    1088:	0001                	nop
    108a:	0000                	unimp
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0000                	unimp
    1092:	0000                	unimp
    1094:	ffff                	0xffff
    1096:	ffff                	0xffff
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	ffff                	0xffff
    109e:	ffff                	0xffff
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	0000                	unimp
    10a6:	0000                	unimp
    10a8:	0001                	nop
    10aa:	0000                	unimp
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	0002                	c.slli64	zero
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	0002                	c.slli64	zero
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	0001                	nop
    10ce:	0000                	unimp
    10d0:	0000                	unimp
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0002                	c.slli64	zero
    10de:	0000                	unimp
    10e0:	0001                	nop
    10e2:	0000                	unimp
    10e4:	0000                	unimp
    10e6:	0000                	unimp
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	0002                	c.slli64	zero
    10ee:	0000                	unimp
    10f0:	0000                	unimp
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	0000                	unimp
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	0000                	unimp
    1112:	0000                	unimp
    1114:	0002                	c.slli64	zero
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0002                	c.slli64	zero
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0000                	unimp
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	0002                	c.slli64	zero
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0002                	c.slli64	zero
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	0002                	c.slli64	zero
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001168 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1168:	bebe                	fsd	fa5,376(sp)
    116a:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

0000116c <_bss_start>:
	...

000013c4 <product2>:
	...

0000161c <result>:
	...

00001874 <ti_2>:
	...

00001a04 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1b0a                	slli	s6,s6,0x22
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05ce                	slli	a1,a1,0x13
       e:	0000                	unimp
      10:	3a0c                	fld	fa1,48(a2)
      12:	df000003          	lb	zero,-528(zero) # fffffdf0 <_stack_start+0xfffefdf0>
      16:	18000003          	lb	zero,384(zero) # 180 <polymult+0xa8>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0454                	addi	a3,sp,516
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	5208                	lw	a0,32(a2)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	00000473          	0x473
      3a:	0202                	c.slli64	tp
      3c:	0002cb07          	flq	fs6,0(t0) # e86 <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	8704                	0x8704
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	030e                	slli	t1,t1,0x3
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	d806                	sw	ra,48(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4606                	lw	a2,64(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6406                	flw	fs0,64(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	0308                	addi	a0,sp,384
    asm volatile(
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
    for(i=0;i<(length/3);i++) {
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0000022f          	0x22f
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
}
      c8:	0000                	unimp
    asm volatile(
      ca:	2c09                	jal	2dc <polymult2+0x12>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
    for(i=0;i<(length/3);i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
    int line[size_b][size_a + size_b];
      e2:	0c00                	addi	s0,sp,528
      e4:	0530                	addi	a2,sp,648
      e6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	5d07a403          	lw	s0,1488(a5)
    int line[size_b][size_a + size_b];
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	380c                	fld	fa1,48(s0)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	a306                	fsd	ft1,384(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	a106                	fsd	ft1,128(sp)
     10e:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     110:	0400                	addi	s0,sp,512
    int pola[size_a];
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
    int line[size_b][size_a + size_b];
     116:	0000                	unimp
    int pola[size_a];
     118:	3606                	fld	fa2,96(sp)
    int line[size_b][size_a + size_b];
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
    int pola[size_a];
     11e:	0d0c                	addi	a1,sp,656
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     120:	005d                	c.nop	23
    int polb[size_b];
     122:	0000                	unimp
     124:	e706                	fsw	ft1,140(sp)
    int line[size_b][size_a + size_b];
     126:	0001                	nop
    int polb[size_b];
     128:	0400                	addi	s0,sp,512
    int pola[size_a];
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
            line[i][j] = 0;
     130:	f80e                	fsw	ft3,48(sp)
     132:	0001                	nop
    int polb[size_b];
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
    int pola[size_a];
     13e:	04c4                	addi	s1,sp,580
     140:	0000                	unimp
    int polb[size_b];
     142:	3604                	fld	fs1,40(a2)
            line[i][j] = 0;
     144:	00018a13          	mv	s4,gp
     148:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     14a:	006b5f0f          	0x6b5f0f
            product[j] = 0;
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     156:	0c0c                	addi	a1,sp,528
     158:	0005                	c.nop	1
    for (i = 0; i < size_a; ++i){
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    array_mod(pola,mod,size_a);
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	01e1                	addi	gp,gp,24
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
    for (i = 0; i < size_b; ++i){
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	420c                	lw	a1,0(a2)
     172:	0006                	c.slli	zero,0x1
    array_mod(polb,mod,size_b);
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
    if(star_mult == 1){
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
            for (k = size_a-1; k >= 0; k = k-1 ){
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
            product[j] = 0;
     19e:	0000                	unimp
     1a0:	1f0e                	slli	t5,t5,0x23
     1a2:	0002                	c.slli64	zero
            line[i][j] = 0;
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
            product[j] = 0;
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
        for(j = 0; j < size_a + size_b -1; ++j){
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <polymult+0xd6>
     1b2:	3e04                	fld	fs1,56(a2)
    for (i = 0; i < size_b; ++i){
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	550c                	lw	a1,40(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
        pola[i] = a[i];
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	012c                	addi	a1,sp,136
     1ca:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1cc:	4004                	lw	s1,0(s0)
        pola[i] = a[i];
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1d2:	0800                	addi	s0,sp,16
        polb[i] = b[i];
     1d4:	e00c                	fsw	fa1,0(s0)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1e0:	0c0c                	addi	a1,sp,528
        polb[i] = b[i];
     1e2:	03a2                	slli	t2,t2,0x8
    for (i = 0; i < size_b; ++i){
     1e4:	0000                	unimp
    if(star_mult == 1){
     1e6:	4204                	lw	s1,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1ec:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     1ee:	640c                	flw	fa1,8(s0)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
     1f8:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	0c14                	addi	a3,sp,528
     1fc:	00000647          	fmsub.s	fa2,ft0,ft0,ft0,rne
    array_mod(product,mod,(size_a+size_b-1));
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	7d0c                	flw	fa1,56(a0)
     20a:	0004                	0x4
}
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	06a2                	slli	a3,a3,0x8
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	0000013b          	0x13b
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
     232:	000001c7          	fmsub.s	ft3,ft0,ft0,ft0,rne
                line[size_b-1-j][k] = pola[k]*polb[j];
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
            for (k = size_a-1; k >= 0; k = k-1 ){
     246:	0268                	addi	a0,sp,268
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	058a                	slli	a1,a1,0x2
     24e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
        for (j = size_b -1; j >= 0; j = j-1){
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	016a                	slli	sp,sp,0x1a
            for (k = size_a-1; k >= 0; k = k-1 ){
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0a00                	addi	s0,sp,272
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f bb11 0003      	0x3bb11001f
            for (k = size_a-1; k >= 0; k = k-1 ){
     27c:	9000                	0x9000
        for (j = size_b -1; j >= 0; j = j-1){
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
            line[i][j] = line[i][j] % mod;
     286:	c40c                	sw	a1,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
            line[i][j] = line[i][j] % mod;
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x1d8>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     294:	04dc                	addi	a5,sp,580
     296:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	dc0c                	sw	a1,56(s0)
     2a2:	0001                	nop
            product[j] += line[i][j];
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
        for(i = 0; i < size_b; ++i){
     2ae:	0000013b          	0x13b
            product[j] += line[i][j];
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
        for(i = 0; i < size_b; ++i){
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
    for(j = 0; j < size_a + size_b -1; ++j){
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
    int line[size_b][size_a + size_b];
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	870e                	mv	a4,gp
     2da:	0004                	0x4
    int line[size_b][size_a + size_b];
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_mod+0x6>
     2e6:	0126                	slli	sp,sp,0x9
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
    int pola[size_a];
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
    int line[size_b][size_a + size_b];
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
    int pola[size_a];
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	ae0e                	fsd	ft3,280(sp)
     308:	0004                	0x4
    int line[size_b][size_a + size_b];
     30a:	6800                	flw	fs0,16(s0)
    int pola[size_a];
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
    int polb[size_b];
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     31c:	0000                	unimp
    int polb[size_b];
     31e:	0f00                	addi	s0,sp,912
    for (i = 0; i < size_b; ++i){
     320:	725f 0400 07bc      	0x7bc0400725f
            product2[j] = 0;
     326:	005d                	c.nop	23
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    for(i = 0; i < size_a; ++i){
     332:	005d                	c.nop	23
     334:	0000                	unimp
     336:	0c08                	addi	a0,sp,528
    for(i = 0; i < size_b; ++i){
     338:	00000163          	beqz	zero,33a <polymult2+0x70>
     33c:	be04                	fsd	fs1,56(a2)
    if(star_mult == 1){
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
     344:	5e0c                	lw	a1,56(a2)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
            for (k = size_a-1; k >= 0; k = k-1 ){
     352:	625f 0066 c004      	0xc0040066625f
            product2[j] = 0;
     358:	d811                	beqz	s0,26c <polymult+0x194>
     35a:	0002                	c.slli64	zero
            line[i][j] = 0;
     35c:	1000                	addi	s0,sp,32
     35e:	980c                	0x980c
            product2[j] = 0;
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
    for (i = 0; i < size_b; ++i){
     36c:	0149                	addi	sp,sp,18
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
        for(j = 0; j < size_a + size_b -1; ++j){
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
        pola[i] = a[i];
     378:	0f0c                	addi	a1,sp,912
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
    for(i = 0; i < size_a; ++i){
     386:	035d                	addi	t1,t1,23
        pola[i] = a[i];
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
    for(i = 0; i < size_a; ++i){
     38c:	f71d                	bnez	a4,2ba <polymult+0x1e2>
        polb[i] = b[i];
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	400c                	lw	a1,0(s0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
    for(i = 0; i < size_b; ++i){
     39c:	0000                	unimp
        polb[i] = b[i];
     39e:	0c28                	addi	a0,sp,536
     3a0:	06bc                	addi	a5,sp,840
    for(i = 0; i < size_b; ++i){
     3a2:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     3a4:	d004                	sw	s1,32(s0)
     3a6:	3509                	jal	1a8 <polymult+0xd0>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
        for (j = size_b -1; j >= 0; j = j-1){
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xb6>
     3c6:	72755f0f          	0x72755f0f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0400                	addi	s0,sp,512
        array_add(product2,line[i],size_a+size_b-1);
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
    for(i=0;i<size_b;++i){
     3d4:	0120                	addi	s0,sp,136
     3d6:	0000                	unimp
}
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <polymult+0x16>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	870c                	0x870c
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x3e>
     3f6:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f8:	4400                	lw	s0,8(s0)
     3fa:	790c                	flw	fa1,48(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01a0                	addi	s0,sp,200
     40a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     40c:	e004                	fsw	fs1,0(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	046712e3          	bne	a4,t1,c5e <ntru_deceypt+0x80>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
        array_add(product2,line[i],size_a+size_b-1);
     422:	0334                	addi	a3,sp,392
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
    for(i=0;i<size_b;++i){
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	b60c                	fsd	fa1,40(a2)
    int v[size_N];
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	0ee9                	addi	t4,t4,26
    int v[size_N];
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     43a:	0c5c                	addi	a5,sp,532
     43c:	048e                	slli	s1,s1,0x3
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
    int v[size_N];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
    int q[size_N];
     45c:	bb15                	j	190 <polymult+0xb8>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
    int num_temp[size_N];
     462:	005d                	c.nop	23
     464:	0000                	unimp
    int denum_temp[size_D];
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
    int num_temp[size_N];
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int denum_temp[size_D];
     472:	00051417          	auipc	s0,0x51
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    int v[size_N];
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
    int denum_temp[size_D];
     480:	1800                	addi	s0,sp,48
     482:	046c                	addi	a1,sp,524
     484:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
    array_mod(num_temp,mod,size_N);
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0172                	slli	sp,sp,0x1c
     492:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
    array_mod(denum_temp,mod,size_D);
     49c:	1804                	addi	s1,sp,48
     49e:	0240                	addi	s0,sp,260
     4a0:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
    for (i = size_D-1; i >= 0; i = i-1){
     4aa:	1808                	addi	a0,sp,48
     4ac:	01f0                	addi	a2,sp,204
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
    for (i = 0; i < size_N; ++i){
     4b4:	000006a7          	0x6a7
        if ( (b_N*u)%mod == 1 )
     4b8:	180c                	addi	a1,sp,48
    for (u = 0; u < mod; ++u){
     4ba:	000004d7          	0x4d7
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
        num_temp[i] = num[i];
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for (i = 0; i < size_N; ++i){
     4ce:	0802                	c.slli64	a6
        num_temp[i] = num[i];
     4d0:	000008a7          	0x8a7
        denum_temp[i] = denum[i];
     4d4:	1814                	addi	a3,sp,48
     4d6:	000004f3          	0x4f3
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
    for (i = 0; i < size_D; ++i) {
     4e0:	0000                	unimp
        denum_temp[i] = denum[i];
     4e2:	1830                	addi	a2,sp,56
    for (i = 0; i < size_D; ++i) {
     4e4:	04e1                	addi	s1,s1,24
        q[i] = 0;
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
        v[i] = 0;
     4ee:	0000                	unimp
        q[i] = 0;
     4f0:	1834                	addi	a3,sp,56
     4f2:	03cd                	addi	t2,t2,19
        v[i] = 0;
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
    for (i = 0; i < size_N; ++i){
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
        if( denum_temp[i] != 0 )
     4fc:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4fe:	1838                	addi	a4,sp,56
     500:	04e9                	addi	s1,s1,26
        if ( (b_N*u)%mod == 1 )
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
    for (u = 0; u < mod; ++u){
     50c:	183c                	addi	a5,sp,56
     50e:	0300                	addi	s0,sp,384
        if( num_temp[i] != 0 )
     510:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	0215                	addi	tp,tp,5
     51e:	0000                	unimp
    while (d >= d2){
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
    for(i = 0; i < size_N; ++i){
     524:	005d                	c.nop	23
        result[i] = q[i];
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06d6                	slli	a3,a3,0x15
     52c:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
    for(i = size_N; i < (2*size_N); ++i){
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
        result[i] = num_temp[i-size_N];
     536:	1848                	addi	a0,sp,52
     538:	0422                	slli	s0,s0,0x8
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
    for(i = size_N; i < (2*size_N); ++i){
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
}
     544:	184c                	addi	a1,sp,52
     546:	0248                	addi	a0,sp,260
     548:	0000                	unimp
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	0198                	addi	a4,sp,192
     556:	0000                	unimp
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
     562:	0465                	addi	s0,s0,25
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
        v[(d-d2)] = u*r_d;
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	000003bb          	0x3bb
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
    array_mod(v,mod,size_N);
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
        v[(d-d2)] = u*r_d;
     57e:	de19                	beqz	a2,49c <polydiv+0x6c>
    array_mod(v,mod,size_N);
     580:	0002                	c.slli64	zero
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	067d                	addi	a2,a2,31
    array_mod(product,mod,size_N);
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	0c02                	c.slli64	s8
    array_mod(product,mod,size_N);
     596:	08e4                	addi	s1,sp,92
        for (i = 0; i < size_N; ++i){
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	5119                	li	sp,-26
     59e:	0001                	nop
    array_mod(num_temp,mod,size_N);
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
    array_add(q,v,size_N);
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0136                	slli	sp,sp,0xd
     5ae:	0000                	unimp
    array_mod(q,mod,size_N);
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	0000045b          	0x45b
     5c8:	c116                	sw	t0,128(sp)
            num_temp[i] = num_temp[i] - product[i];
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
        for (i = 0; i < size_N; ++i){
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
        for (i = 0; i < size_N; ++i){
     5de:	0004                	0x4
            if( num_temp[i] != 0 )
     5e0:	1500                	addi	s0,sp,672
        for (i = size_N-1; i >= 0; i = i-1){
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
            v[i] = 0;
     5e6:	f115                	bnez	a0,50a <polydiv+0xda>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5f0:	1000                	addi	s0,sp,32
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
        result[i] = q[i];
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
    for(i = 0; i < size_N; ++i){
     608:	0004                	0x4
        result[i] = num_temp[i-size_N];
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
    for(i = size_N; i < (2*size_N); ++i){
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
    int ri_2[size]; // MX-ring poly, a
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     620:	1400                	addi	s0,sp,544
    int ri_2[size]; // MX-ring poly, a
     622:	005d                	c.nop	23
     624:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     626:	0635                	addi	a2,a2,13
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
    int ri_2[size]; // MX-ring poly, a
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
    int ri[size];
     64e:	0000                	unimp
     650:	0000065b          	0x65b
    int ti_1[size]; // ti_1[0] = 1
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
    int ti[size];
     65a:	0500                	addi	s0,sp,640
     65c:	049c                	addi	a5,sp,576
     65e:	0000                	unimp
    int qi_1[size];
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
    int temp[size];
     666:	0000                	unimp
     668:	511a                	lw	sp,164(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
    int ri_2[size]; // MX-ring poly, a
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
    int temp[size];
     672:	06a1                	addi	a3,a3,8
    for (i = 0; i < size; ++i) {
     674:	0000                	unimp
     676:	c418                	sw	a4,8(s0)
        ti_2[i] = 0;
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x21c>
    for (i = 0; i < size; ++i) {
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
    ti_1[0] = 1;
     684:	a418                	fsd	fa4,8(s0)
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
            ti[i] = ti_2[i] - temp[i];
     692:	9618                	0x9618
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
    array_mod(ri_2,mod,size);
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
    array_mod(ri_1,mod,size);
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
     6bc:	0525                	addi	a0,a0,9
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
        for (i = 0; i < N + 1; ++i) {
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
    array_mod(temp,mod,size);
     6ca:	051f 0000 4604      	0x46040000051f
     6d0:	1201                	addi	tp,tp,-32
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000003f 12014704 	0x120147040000003f
        for (i = 0; i < N + 1; ++i) {
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
    array_mod(qi_1,mod,size);
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
        for (i = 0; i < N + 1; ++i) {
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
    array_mod(temp,mod,size);
     700:	3018                	fld	fa4,32(s0)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
        for (i = 0; i < N + 1; ++i) {
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	7d18                	flw	fa4,56(a0)
    array_mod(ti,mod,size);
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
        for (i = 0; i < N + 1; ++i) {
     718:	0005                	c.nop	1
        controlR = 0;
     71a:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     71c:	f318                	fsw	fa4,32(a4)
     71e:	0002                	c.slli64	zero
     720:	0400                	addi	s0,sp,512
    while (controlR != 0) {
     722:	0289                	addi	t0,t0,2
        for (j = 0; j < mod; ++j) {
     724:	0b10                	addi	a2,sp,400
            if (((ri_2[0] * j) % mod) == 1)
     726:	0008                	0x8
        for (j = 0; j < mod; ++j) {
     728:	0800                	addi	s0,sp,16
     72a:	ad18                	fsd	fa4,24(a0)
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
        for (i = 0; i < N + 1; ++i) {
     736:	2400                	fld	fs0,8(s0)
    }
     738:	0018                	0x18
     73a:	0002                	c.slli64	zero
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	bf18                	fsd	fa4,56(a4)
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	c318                	sw	a4,0(a4)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
        ri_2[i] = polyR[i];
     762:	ca18                	sw	a4,16(a2)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
     76c:	0000                	unimp
    for (i = 0; i < size; ++i) {
     76e:	6800                	flw	fs0,16(s0)
        ri_2[i] = polyR[i];
     770:	c818                	sw	a4,16(s0)
     772:	0006                	c.slli	zero,0x1
        ri_1[i] = polyf[i];
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
        ti_1[i] = 0;
     78c:	6d18                	flw	fa4,24(a0)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
    for (i = 0; i < size; ++i) {
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
            ri[i - (N + 1)] = res[i];
     798:	8000                	0x8000
     79a:	e718                	fsw	fa4,8(a4)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
            ri[i - (N + 1)] = res[i];
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	ae18                	fsd	fa4,24(a2)
            temp[i] = ri_2[i] - ri[i];
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	b918                	fsd	fa4,48(a0)
     7b8:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     7ba:	0400                	addi	s0,sp,512
            temp[i] = ri_2[i] - ri[i];
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
        for (i = 0; i < N + 1; ++i) {
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
            qi_1[i] = res1[i];
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7d0:	ac00                	fsd	fs0,24(s0)
            qi_1[i] = res1[i];
     7d2:	a818                	fsd	fa4,16(s0)
        for (i = 0; i < N + 1; ++i) {
     7d4:	0001                	nop
            temp[i] = res2[i];
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	4418                	lw	a4,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7e2:	0000                	unimp
            temp[i] = res2[i];
     7e4:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7e6:	fe160297          	auipc	t0,0xfe160
            ti[i] = ti_2[i] - temp[i];
     7ea:	0000                	unimp
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	5318                	lw	a4,32(a4)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
        for (i = 0; i < N + 1; ++i) {
     7f8:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     7fa:	c400                	sw	s0,8(s0)
     7fc:	6a18                	flw	fa4,16(a2)
        for (i = 0; i < N + 1; ++i) {
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
            ri_2[i] = ri_1[i];
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     80c:	05c1                	addi	a1,a1,16
            ri_2[i] = ri_1[i];
     80e:	0000                	unimp
            ri_1[i] = ri[i];
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
            ti_2[i] = ti_1[i];
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
            ri_1[i] = ri[i];
     81a:	0900                	addi	s0,sp,144
            ti_2[i] = ti_1[i];
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
            controlR += ri[i];
     824:	690a                	flw	fs2,128(sp)
            ti_2[i] = ti_1[i];
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
            ti_1[i] = ti[i];
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
              qi_1[i] = 0;
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
        for (i = 0; i < N + 1; ++i) {
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
            if (((ri_2[0] * j) % mod) == 1)
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	00000393          	li	t2,0
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
        for (j = 0; j < mod; ++j) {
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     852:	1800                	addi	s0,sp,48
        for (i = 0; i < N + 1; ++i) {
     854:	037e                	slli	t1,t1,0x1f
     856:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x104>
int* generate_keys(int N, int p, int q){
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
     88c:	141d                	addi	s0,s0,-25
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	068d                	addi	a3,a3,3
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	00ad                	addi	ra,ra,11
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	c220                	sw	s0,64(a2)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	000005bb          	0x5bb
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
     91a:	c321                	beqz	a4,95a <generate_keys+0xf4>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
    int polyR[N+1];
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     92a:	3600                	fld	fs0,40(a2)
    int polyR[N+1];
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	8222                	mv	tp,s0
     938:	0001                	nop
    polyR[N] = 1;
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     944:	116c                	addi	a1,sp,172
     946:	0000                	unimp
     948:	4922                	lw	s2,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	13c4                	addi	s1,sp,484
     958:	0000                	unimp
     95a:	0122                	slli	sp,sp,0x8
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	161c                	addi	a5,sp,800
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	4d220063          	beq	tp,s2,e3a <memset+0x42>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1874                	addi	a3,sp,60
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
    polyR[0] = -1;
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
    for(i = 1; i < N; ++i){
     9ac:	001a0403          	lb	s0,1(s4)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
    for (i = N; i < 55; ++i ){
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
    for(i = 0; i < N; ++i){
     9bc:	0000                	unimp
        random_keys[i] = f[i];
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
    for(i = 0; i < N; ++i){
     9c6:	3624                	fld	fs1,104(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
    for(i = N; i < (2*N); ++i){
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1168                	addi	a0,sp,172
        random_keys[i] = g[i-N];
     9d6:	0000                	unimp
     9d8:	db25                	beqz	a4,948 <generate_keys+0xe2>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     9de:	0294                	addi	a3,sp,320
     9e0:	5d05                	li	s10,-31
    for(i = (2*N); i < (3*N); ++i){
     9e2:	0000                	unimp
     9e4:	a000                	fsd	fs0,0(s0)
     9e6:	000e                	c.slli	zero,0x3
    fp = ext_euclid(polyR, f, (N+1), p);
     9e8:	3800                	fld	fs0,48(s0)
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
    for(i = (2*N); i < (3*N); ++i){
     9f4:	040d                	addi	s0,s0,3
        random_keys[i] = fp[i-(2*N)];
     9f6:	0000                	unimp
     9f8:	9501                	srai	a0,a0,0x20
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x1ac>
    for(i = (2*N); i < (3*N); ++i){
     a00:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     a02:	0000                	unimp
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	0296                	slli	t0,t0,0x5
     a0c:	630a                	flw	ft6,128(sp)
    for(i = (3*N); i < (4*N); ++i){
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
        random_keys[i] = fq[i-(3*N)];
     a16:	031e                	slli	t1,t1,0x7
     a18:	0000                	unimp
     a1a:	9701                	srai	a4,a4,0x20
     a1c:	0a02                	c.slli64	s4
    for(i = (3*N); i < (4*N); ++i){
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x1ce>
    fg = polymult2(fq, N, g, N, 0);
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	0298                	addi	a4,sp,320
    for(i = 0; i < (2*N-1); ++i){
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	0299                	addi	t0,t0,6
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
    for(i = (4*N); i < (5*N); ++i){
     a42:	029a                	slli	t0,t0,0x6
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a4a:	9a28                	0x9a28
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	029c                	addi	a5,sp,320
    for(i = (4*N); i < (5*N); ++i){
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
    for(i = (5*N); i < (6*N+1); ++i){
     a58:	dc91                	beqz	s1,974 <generate_keys+0x10e>
     a5a:	055e2677          	0x55e2677
        random_keys[i] = polyR[i-(5*N)];
     a5e:	0000                	unimp
     a60:	9d01                	0x9d01
     a62:	0902                	c.slli64	s2
    for(i = (5*N); i < (6*N+1); ++i){
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
}
     a70:	0100                	addi	s0,sp,128
     a72:	029e                	slli	t0,t0,0x7
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
     a82:	9f01                	0x9f01
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	9326                	add	t1,t1,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	02a0                	addi	s0,sp,328
     a92:	af09                	j	11a4 <_bss_start+0x38>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0250                	addi	a2,sp,260
     a9e:	0000                	unimp
     aa0:	a101                	j	ea0 <main>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	2c26                	fld	fs8,72(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	02a2                	slli	t0,t0,0x8
        polyR[i] = 0;
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x14c>
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
    for(i = 1; i < N; ++i){
     aba:	0069                	c.nop	26
     abc:	a301                	j	fbc <main+0x11c>
        f[i] = 0;
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000ec82b          	0xec82b
        g[i] = 0;
     acc:	f700                	fsw	fs0,40(a4)
     ace:	001a                	c.slli	zero,0x6
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
    for (i = N; i < 55; ++i ){
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
        random_keys[i] = f[i];
     adc:	012c                	addi	a1,sp,136
     ade:	a803055b          	0xa803055b
     ae2:	0010                	0x10
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    for(i = 0; i < N; ++i){
     aea:	00c0                	addi	s0,sp,68
        random_keys[i] = f[i];
     aec:	000ee62b          	0xee62b
        random_keys[i] = g[i-N];
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = N; i < (2*N); ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <memcpy+0x20>
        random_keys[i] = fp[i-(2*N)];
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x1e6>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
    for(i = (2*N); i < (3*N); ++i){
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	0f66                	slli	t5,t5,0x19
     b0e:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    for(i = (3*N); i < (4*N); ++i){
     b1e:	012c                	addi	a1,sp,136
        random_keys[i] = fq[i-(3*N)];
     b20:	6508025b          	0x6508025b
        fg[i] = fg[i]*p;
     b24:	012c                	addi	a1,sp,136
    for(i = 0; i < (2*N-1); ++i){
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x1de>
        fg[i] = fg[i]*p;
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x1cd>
    for(i = 0; i < (2*N-1); ++i){
     b32:	2d00                	fld	fs0,24(a0)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b34:	0f88                	addi	a0,sp,976
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
    for(i = (4*N); i < (5*N); ++i){
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
        random_keys[i] = polyR[i-(5*N)];
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memset+0xc>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
    for(i = (5*N); i < (6*N+1); ++i){
     b56:	025e                	slli	tp,tp,0x17
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b68:	0900                	addi	s0,sp,144
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b7e:	00000b8b          	0xb8b
    temp = polymult(public_key,N,random_val,48,q,0);
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
array_add(temp,message,48);
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     b98:	0200                	addi	s0,sp,256
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
array_add(temp,message,48);
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
}
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
        CT[i-(2*N)] = CT[i];
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     bdc:	692e                	flw	fs2,200(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     be6:	000001cf          	fnmadd.s	ft3,ft0,ft0,ft0,rne
     bea:	6701                	0x6701
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <ntru_deceypt+0x26>
     bf2:	0bde                	slli	s7,s7,0x17
     bf4:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bf6:	00c6                	slli	ra,ra,0x11
     bf8:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c02:	0100                	addi	s0,sp,128
     c04:	5d170267          	jalr	tp,1489(a4) # 55d1 <_stack_len+0x15d1>
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c10:	0070                	addi	a2,sp,12
     c12:	6701                	0x6701
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	5d250267          	jalr	tp,1490(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
        if(a2[i] <= q/2)
     c2e:	00b8                	addi	a4,sp,72
     c30:	0000                	unimp
     c32:	6701                	0x6701
    for (i = 0; i < N; ++i){
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <ntru_deceypt+0x6e>
    c = polymult2(secret_key_fp,N,a2,N,0);
     c3a:	0000028b          	0x28b
     c3e:	9331                	srli	a4,a4,0x2c
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	63400267          	jalr	tp,1588(zero) # 0 <__DYNAMIC>
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	040d                	addi	s0,s0,3
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	0000                	unimp
     c54:	6701                	0x6701
     c56:	5402                	lw	s0,32(sp)
}
     c58:	00000b63          	beqz	zero,c6e <ntru_deceypt+0x90>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	9531                	srai	a0,a0,0x2c
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	63660267          	jalr	tp,1590(a2)
     c6a:	0f00000b          	0xf00000b
        a2[i-(2*N)] = a2[i];
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x1b8>
     c72:	000002bb          	0x2bb
    for(i = (2*N); i < ((2*N)+N); ++i){
     c76:	6901                	0x6901
     c78:	0a02                	c.slli64	s4
        a2[i-(2*N)] = a2[i];
     c7a:	00000b63          	beqz	zero,c90 <ntru_deceypt+0xb2>
    for(i = (2*N); i < ((2*N)+N); ++i){
     c7e:	612a                	flw	ft2,136(sp)
        if(a2[i] <= q/2)
     c80:	0100                	addi	s0,sp,128
     c82:	026a                	slli	tp,tp,0x1a
     c84:	630a                	flw	ft6,128(sp)
            a2[i] = (-1)*(q-a2[i]);
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c8>
    for (i = 0; i < N; ++i){
     c8e:	3261                	jal	616 <polydiv+0x1e6>
     c90:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     c92:	630a026b          	0x630a026b
     c96:	5900000b          	0x5900000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c8>
        c2[i-(2*N)] = c2[i];
     c9e:	6c010063          	beqz	sp,135e <_bss_start+0x1f2>
    for(i = (2*N); i < ((2*N)+N); ++i){
     ca2:	0a02                	c.slli64	s4
  jal x0, default_exc_handler
     ca4:	00000b63          	beqz	zero,cba <reset_handler+0x12>
  mv  x1, x0
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
  mv  x2, x1
     cac:	632a                	flw	ft6,136(sp)
  mv  x3, x1
     cae:	0032                	c.slli	zero,0xc
  mv  x4, x1
     cb0:	6d01                	0x6d01
  mv  x5, x1
     cb2:	0a02                	c.slli64	s4
  mv  x6, x1
     cb4:	00000b63          	beqz	zero,cca <reset_handler+0x22>
  mv  x8, x1
     cb8:	0395                	addi	t2,t2,5
  mv  x9, x1
     cba:	0000                	unimp
  mv x10, x1
     cbc:	692a                	flw	fs2,136(sp)
  mv x11, x1
     cbe:	0100                	addi	s0,sp,128
  mv x12, x1
     cc0:	026e                	slli	tp,tp,0x1b
  mv x13, x1
     cc2:	5d09                	li	s10,-30
  mv x14, x1
     cc4:	0000                	unimp
  mv x15, x1
     cc6:	b300                	fsd	fs0,32(a4)
  mv x16, x1
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x1d8>
  mv x18, x1
     ccc:	0c14                	addi	a3,sp,528
  mv x19, x1
     cce:	0000                	unimp
  mv x20, x1
     cd0:	1684                	addi	s1,sp,864
  mv x21, x1
     cd2:	0000                	unimp
  mv x22, x1
     cd4:	0cf8                	addi	a4,sp,604
  mv x23, x1
     cd6:	0000                	unimp
  mv x24, x1
     cd8:	012c                	addi	a1,sp,136
  mv x25, x1
     cda:	035a                	slli	t1,t1,0x16
  mv x26, x1
     cdc:	2c5d01f3          	0x2c5d01f3
  mv x28, x1
     ce0:	5b01                	li	s6,-32
  mv x29, x1
     ce2:	7802                	flw	fa6,32(sp)
  mv x30, x1
     ce4:	2c00                	fld	fs0,24(s0)
  mv x31, x1
     ce6:	5c01                	li	s8,-32
  la   x2, _stack_start
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
  la x26, _bss_start
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
  la x27, _bss_end
     cf8:	000c222b          	0xc222b
     cfc:	ef00                	fsw	fs0,24(a4)
     cfe:	1e000013          	li	zero,480
  bge x26, x27, zero_loop_end
     d02:	000d                	c.nop	3
  sw x0, 0(x26)
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
  addi x26, x26, 4
     d08:	7902                	flw	fs2,32(sp)
  ble x26, x27, zero_loop
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
  addi x10, x0, 0
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
  addi x11, x0, 0
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
  jal x1, main
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000c462b          	0xc462b
     d22:	8400                	0x8400
     d24:	0016                	c.slli	zero,0x5
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x110>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0c52                	slli	s8,s8,0x14
     d46:	0000                	unimp
     d48:	000013ef          	jal	t2,1d48 <random_keys+0x344>
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	0006572f          	0x6572f
     d6a:	0100                	addi	s0,sp,128
     d6c:	0245                	addi	tp,tp,17
     d6e:	6306                	flw	ft6,64(sp)
     d70:	5800000b          	0x5800000b
     d74:	8600000b          	0x8600000b
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	bc9c                	fsd	fa5,56(s1)
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	4501                	li	a0,0
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0245                	addi	tp,tp,17
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	039a                	slli	t2,t2,0x6
     da2:	0000                	unimp
     da4:	4501                	li	a0,0
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memcpy+0xa4>
     dac:	0000049b          	0x49b
     db0:	5e31                	li	t3,-20
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	0245                	addi	tp,tp,17
     db8:	6334                	flw	fa3,64(a4)
     dba:	d200000b          	0xd200000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	0695                	addi	a3,a3,5
     dc4:	0000                	unimp
     dc6:	4501                	li	a0,0
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memcpy+0xc6>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	ab29                	j	12ec <_bss_start+0x180>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	630a0247          	fmsub.d	ft4,fs4,fa6,fa2,rne
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	0248                	addi	a0,sp,260
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	00000373          	0x373
     df2:	4a01                	li	s4,0
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2a26                	fld	fs4,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	630a024b          	fnmsub.d	ft4,fs4,fa6,fa2,rne
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	4c01                	li	s8,0
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000b802b          	0xb802b
     e22:	f700                	fsw	fs0,40(a4)
     e24:	001a                	c.slli	zero,0x6
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	0fe8                	addi	a0,sp,988
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0b92                	slli	s7,s7,0x4
     e44:	0000                	unimp
     e46:	000017d7          	0x17d7
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8)
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 a22b      	0xa22b0030015f
     e74:	1900000b          	0x1900000b
     e78:	001a                	c.slli	zero,0x6
     e7a:	9300                	0x9300
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0bb0                	addi	a2,sp,472
     e96:	0000                	unimp
     e98:	000013ef          	jal	t2,1e98 <random_keys+0x494>
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
int main(){
     ea0:	012c0083          	lb	ra,18(s8)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
     eb0:	025d                	addi	tp,tp,23
int main(){
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
     ebc:	0003152f          	0x3152f
     ec0:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
     ec2:	01ed                	addi	gp,gp,27
     ec4:	6306                	flw	ft6,64(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ec6:	6600000b          	0x6600000b
    resultkon[0] = 0xaaaaaaa0;
     eca:	0008                	0x8
     ecc:	f200                	fsw	fs0,32(a2)
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
    keys = generate_keys(N, p, q);
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	ed01                	bnez	a0,ef2 <main+0x52>
     edc:	1801                	addi	a6,a6,-32
    resultkon[0] = 0xaaaaaaa0;
     ede:	005d                	c.nop	23
    resultkon[0] = 0xaaaaaaa1;
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
    keys = generate_keys(N, p, q);
     ee4:	0000                	unimp
    resultkon[0] = 0xaaaaaaa1;
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     eea:	01ed                	addi	gp,gp,27
     eec:	5d1f 0000 e500      	0xe50000005d1f
        secret_key_f[i] = keys[i];
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	ed01                	bnez	a0,f10 <main+0x70>
    for(i = 0; i < N; ++i){
     efa:	2601                	jal	11fa <_bss_start+0x8e>
     efc:	005d                	c.nop	23
     efe:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	6c0901ef          	jal	gp,915c8 <_stack_start+0x815c8>
        secret_key_fp[i-(2*N)] = keys[i];
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	f0010067          	jr	-256(sp)
    for(i = (2*N); i < (3*N); ++i){
     f18:	0901                	addi	s2,s2,0
    for(i = (3*N); i < (4*N); ++i){
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
        public_key[i-(4*N)] = keys[i];
     f26:	f201                	bnez	a2,e26 <memset+0x2e>
     f28:	0a01                	addi	s4,s4,0
     f2a:	00000b63          	beqz	zero,f40 <main+0xa0>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
    for(i = (4*N); i < (5*N); ++i){
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	f301                	bnez	a4,e36 <memset+0x3e>
     f38:	0a01                	addi	s4,s4,0
     f3a:	00000b63          	beqz	zero,f50 <main+0xb0>
        ring_poly[i-(5*N)] = keys[i];
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	f4010067          	jr	-192(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     f48:	0a01                	addi	s4,s4,0
    resultkon[0] = 0xbbbbbbb0;
     f4a:	00000b63          	beqz	zero,f60 <main+0xc0>
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f52:	702a                	flw	ft0,168(sp)
     f54:	f501006b          	0xf501006b
     f58:	0a01                	addi	s4,s4,0
    resultkon[0] = 0xbbbbbbb1;
     f5a:	00000b63          	beqz	zero,f70 <main+0xd0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     f62:	9526                	add	a0,a0,s1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f64:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xbbbbbbb1;
     f66:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc0;
     f68:	01f6                	slli	gp,gp,0x1d
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f70:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xccccccc0;
     f72:	2a00                	fld	fs0,16(a2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f74:	0069                	c.nop	26
     f76:	f701                	bnez	a4,e7e <memset+0x86>
     f78:	0901                	addi	s2,s2,0
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
     f82:	ab26                	fsd	fs1,400(sp)
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    resultkon[0] = 0xccccccc1;	
     f88:	01f8                	addi	a4,sp,204
     f8a:	630a                	flw	ft6,128(sp)
            resultkon[0] = 0xDEDEDEDE;
     f8c:	5f00000b          	0x5f00000b
    resultkon[0] = 0xccccccc1;	
     f90:	0008                	0x8
     f92:	3300                	fld	fs0,32(a4)
            resultkon[0] = 0xDEDEDEDE;
     f94:	0069                	c.nop	26
     f96:	0000                	unimp
    for(i = 0; i < 32; ++i){
     f98:	00000877          	0x877
        if(!(message[i] == Dec_Message[i])){
     f9c:	0008ac2b          	0x8ac2b
     fa0:	0200                	addi	s0,sp,256
     fa2:	bc00001b          	0xbc00001b
     fa6:	2c00000f          	0x2c00000f
     faa:	5a01                	li	s4,-32
            resultkon[0] = 0xBABABABA;
     fac:	7ca47803          	0x7ca47803
     fb0:	012c                	addi	a1,sp,136
     fb2:	2c30015b          	0x2c30015b
}
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
     fba:	00d0                	addi	a2,sp,68
     fbc:	00092c2b          	0x92c2b
     fc0:	0200                	addi	s0,sp,256
     fc2:	dc00001b          	0xdc00001b
     fc6:	2c00000f          	0x2c00000f
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
    for(i = 0; i < 32; ++i){
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
     fdc:	0009f42b          	0x9f42b
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	2b000087          	0x2b000087
    1004:	0a0e                	slli	s4,s4,0x3
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
    100c:	102a                	c.slli	zero,0x2a
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    101c:	2c7c                	fld	fa5,216(s0)
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    102a:	000a2c2b          	0xa2c2b
    102e:	8400                	0x8400
    1030:	0016                	c.slli	zero,0x5
    1032:	4f00                	lw	s0,24(a4)
    1034:	0010                	0x10
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    1040:	8902                	jr	s2
    1042:	2c00                	fld	fs0,24(s0)
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    104c:	3001                	jal	84c <ext_euclid+0x230>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	0a40                	addi	s0,sp,276
    1052:	0000                	unimp
    1054:	000013ef          	jal	t2,2054 <_min_stack+0x54>
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	0352                	slli	t1,t1,0x14
    1092:	0000                	unimp
    1094:	5001                	c.li	zero,-32
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <__DTOR_END__+0xc6>
    109c:	061c                	addi	a5,sp,768
    109e:	0000                	unimp
    10a0:	024a                	slli	tp,tp,0x12
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	136a                	slli	t1,t1,0x3a
    10a8:	0000                	unimp
    10aa:	9531                	srai	a0,a0,0x2c
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	0150                	addi	a2,sp,132
    10b2:	6316                	flw	ft6,68(sp)
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	0192                	slli	gp,gp,0x4
    10be:	0000                	unimp
    10c0:	5001                	c.li	zero,-32
    10c2:	2201                	jal	11c2 <_bss_start+0x56>
    10c4:	00000b63          	beqz	zero,10da <__DTOR_END__+0xf2>
    10c8:	000008f7          	0x8f7
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	0150                	addi	a2,sp,132
    10d4:	5d2d                	li	s10,-21
    10d6:	0000                	unimp
    10d8:	3100                	fld	fs0,32(a0)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	5001                	c.li	zero,-32
    10e4:	3701                	jal	fe4 <__CTOR_END__+0x4>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0968                	addi	a0,sp,156
    10ec:	0000                	unimp
    10ee:	9426                	add	s0,s0,s1
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	0152                	slli	sp,sp,0x14
    10f6:	630a                	flw	ft6,128(sp)
    10f8:	9f00000b          	0x9f00000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	5301                	li	t1,-32
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	000009b7          	lui	s3,0x0
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	5d0c0153          	0x5d0c0153
    1116:	0000                	unimp
    1118:	f200                	fsw	fs0,32(a2)
    111a:	0009                	c.nop	2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	5301                	li	t1,-32
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	00000b9b          	0xb9b
    112c:	2b26                	fld	fs6,72(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	0154                	addi	a3,sp,132
    1134:	6a09                	lui	s4,0x2
    1136:	b9000013          	li	zero,-1136
    113a:	2600000b          	0x2600000b
    113e:	05a9                	addi	a1,a1,10
    1140:	0000                	unimp
    1142:	5501                	li	a0,-32
    1144:	0901                	addi	s2,s2,0
    1146:	137d                	addi	t1,t1,-1
    1148:	0000                	unimp
    114a:	0bd9                	addi	s7,s7,22
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	5601                	li	a2,-32
    1154:	0901                	addi	s2,s2,0
    1156:	1390                	addi	a2,sp,480
    1158:	0000                	unimp
    115a:	0bf9                	addi	s7,s7,30
    115c:	0000                	unimp
    115e:	4826                	lw	a6,72(sp)
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	0158                	addi	a4,sp,132
    1166:	a309                	j	1668 <result+0x4c>
    1168:	19000013          	li	zero,400
    116c:	000c                	0xc
    116e:	2a00                	fld	fs0,16(a2)
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	0159                	addi	sp,sp,22
    1176:	b609                	j	c78 <ntru_deceypt+0x9a>
    1178:	4f000013          	li	zero,1264
    117c:	000c                	0xc
    117e:	2600                	fld	fs0,8(a2)
    1180:	0460                	addi	s0,sp,524
    1182:	0000                	unimp
    1184:	5a01                	li	s4,-32
    1186:	0901                	addi	s2,s2,0
    1188:	13c9                	addi	t2,t2,-14
    118a:	0000                	unimp
    118c:	00000c6f          	jal	s8,118c <_bss_start+0x20>
    1190:	2a26                	fld	fs4,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	dc09015b          	0xdc09015b
    119a:	a5000013          	li	zero,-1456
    119e:	000c                	0xc
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	5c010073          	0x5c010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <_bss_start+0x54>
    11ae:	0cff                	0xcff
    11b0:	0000                	unimp
    11b2:	5926                	lw	s2,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	015d                	addi	sp,sp,23
    11ba:	630a                	flw	ft6,128(sp)
    11bc:	1d00000b          	0x1d00000b
    11c0:	000d                	c.nop	3
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	015e                	slli	sp,sp,0x17
    11c6:	0000                	unimp
    11c8:	5e01                	li	t3,-32
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <_bss_start+0x76>
    11d0:	00000d3b          	0xd3b
    11d4:	1926                	slli	s2,s2,0x29
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	015f 5d09 0000      	0x5d09015f
    11e0:	5900                	lw	s0,48(a0)
    11e2:	000d                	c.nop	3
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	0db2                	slli	s11,s11,0xc
    11ec:	0000                	unimp
    11ee:	00006933          	or	s2,zero,zero
    11f2:	ed00                	fsw	fs0,24(a0)
    11f4:	000d                	c.nop	3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	0e28                	addi	a0,sp,792
    11fe:	0000                	unimp
    1200:	00006933          	or	s2,zero,zero
    1204:	6300                	flw	fs0,0(a4)
    1206:	000e                	c.slli	zero,0x3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	0e9e                	slli	t4,t4,0x7
    1210:	0000                	unimp
    1212:	00006933          	or	s2,zero,zero
    1216:	d900                	sw	s0,48(a0)
    1218:	000e                	c.slli	zero,0x3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0f14                	addi	a3,sp,912
    1222:	0000                	unimp
    1224:	0006a22b          	0x6a22b
    1228:	7b00                	flw	fs0,48(a4)
    122a:	0019                	c.nop	6
    122c:	4400                	lw	s0,8(s0)
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8302                	jr	t1
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	2c00                	fld	fs0,24(s0)
    123e:	5c01                	li	s8,-32
    1240:	8b02                	jr	s6
    1242:	0000                	unimp
    1244:	0006aa2b          	0x6aa2b
    1248:	7b00                	flw	fs0,48(a4)
    124a:	0019                	c.nop	6
    124c:	6400                	flw	fs0,8(s0)
    124e:	0012                	c.slli	zero,0x4
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5a01                	li	s4,-32
    1254:	8502                	jr	a0
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5b01                	li	s6,-32
    125a:	7902                	flw	fs2,32(sp)
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5c01                	li	s8,-32
    1260:	8b02                	jr	s6
    1262:	0000                	unimp
    1264:	0006b62b          	0x6b62b
    1268:	ef00                	fsw	fs0,24(a4)
    126a:	90000013          	li	zero,-1792
    126e:	0012                	c.slli	zero,0x4
    1270:	2c00                	fld	fs0,24(s0)
    1272:	5a01                	li	s4,-32
    1274:	8302                	jr	t1
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5b01                	li	s6,-32
    127a:	8b02                	jr	s6
    127c:	2c00                	fld	fs0,24(s0)
    127e:	5c01                	li	s8,-32
    1280:	8502                	jr	a0
    1282:	2c00                	fld	fs0,24(s0)
    1284:	5d01                	li	s10,-32
    1286:	8b02                	jr	s6
    1288:	2c00                	fld	fs0,24(s0)
    128a:	5e01                	li	t3,-32
    128c:	7902                	flw	fs2,32(sp)
    128e:	0000                	unimp
    1290:	0006d22b          	0x6d22b
    1294:	7b00                	flw	fs0,48(a4)
    1296:	0019                	c.nop	6
    1298:	b000                	fsd	fs0,32(s0)
    129a:	0012                	c.slli	zero,0x4
    129c:	2c00                	fld	fs0,24(s0)
    129e:	5a01                	li	s4,-32
    12a0:	7202                	flw	ft4,32(sp)
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5b01                	li	s6,-32
    12a6:	7902                	flw	fs2,32(sp)
    12a8:	2c00                	fld	fs0,24(s0)
    12aa:	5c01                	li	s8,-32
    12ac:	8b02                	jr	s6
    12ae:	0000                	unimp
    12b0:	0006de2b          	0x6de2b
    12b4:	ef00                	fsw	fs0,24(a4)
    12b6:	dc000013          	li	zero,-576
    12ba:	0012                	c.slli	zero,0x4
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5a01                	li	s4,-32
    12c0:	7202                	flw	ft4,32(sp)
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5b01                	li	s6,-32
    12c6:	8b02                	jr	s6
    12c8:	2c00                	fld	fs0,24(s0)
    12ca:	5c01                	li	s8,-32
    12cc:	8502                	jr	a0
    12ce:	2c00                	fld	fs0,24(s0)
    12d0:	5d01                	li	s10,-32
    12d2:	8b02                	jr	s6
    12d4:	2c00                	fld	fs0,24(s0)
    12d6:	5e01                	li	t3,-32
    12d8:	7902                	flw	fs2,32(sp)
    12da:	0000                	unimp
    12dc:	0006ec2b          	0x6ec2b
    12e0:	7b00                	flw	fs0,48(a4)
    12e2:	0019                	c.nop	6
    12e4:	fc00                	fsw	fs0,56(s0)
    12e6:	0012                	c.slli	zero,0x4
    12e8:	2c00                	fld	fs0,24(s0)
    12ea:	5a01                	li	s4,-32
    12ec:	8702                	jr	a4
    12ee:	2c00                	fld	fs0,24(s0)
    12f0:	5b01                	li	s6,-32
    12f2:	7902                	flw	fs2,32(sp)
    12f4:	2c00                	fld	fs0,24(s0)
    12f6:	5c01                	li	s8,-32
    12f8:	8b02                	jr	s6
    12fa:	0000                	unimp
    12fc:	0006fa2b          	0x6fa2b
    1300:	d700                	sw	s0,40(a4)
    1302:	2d000017          	auipc	zero,0x2d000
    1306:	2c000013          	li	zero,704
    130a:	5a01                	li	s4,-32
    130c:	8702                	jr	a4
    130e:	2c00                	fld	fs0,24(s0)
    1310:	5b01                	li	s6,-32
    1312:	8b02                	jr	s6
    1314:	2c00                	fld	fs0,24(s0)
    1316:	5c01                	li	s8,-32
    1318:	8602                	jr	a2
    131a:	2c00                	fld	fs0,24(s0)
    131c:	5d01                	li	s10,-32
    131e:	8b02                	jr	s6
    1320:	2c00                	fld	fs0,24(s0)
    1322:	5e01                	li	t3,-32
    1324:	7902                	flw	fs2,32(sp)
    1326:	2c00                	fld	fs0,24(s0)
    1328:	5f01                	li	t5,-32
    132a:	3001                	jal	b2a <generate_keys+0x2c4>
    132c:	2b00                	fld	fs0,16(a4)
    132e:	0708                	addi	a0,sp,896
    1330:	0000                	unimp
    1332:	0000197b          	0x197b
    1336:	134d                	addi	t1,t1,-13
    1338:	0000                	unimp
    133a:	012c                	addi	a1,sp,136
    133c:	025a                	slli	tp,tp,0x16
    133e:	0072                	c.slli	zero,0x1c
    1340:	012c                	addi	a1,sp,136
    1342:	0079025b          	0x79025b
    1346:	012c                	addi	a1,sp,136
    1348:	025c                	addi	a5,sp,260
    134a:	2d00008b          	0x2d00008b
    134e:	0718                	addi	a4,sp,896
    1350:	0000                	unimp
    1352:	0000197b          	0x197b
    1356:	012c                	addi	a1,sp,136
    1358:	025a                	slli	tp,tp,0x16
    135a:	0089                	addi	ra,ra,2
    135c:	012c                	addi	a1,sp,136
    135e:	0079025b          	0x79025b
    1362:	012c                	addi	a1,sp,136
    1364:	025c                	addi	a5,sp,260
    1366:	0000008b          	0x8b
    136a:	5d09                	li	s10,-30
    136c:	0000                	unimp
    136e:	7d00                	flw	fs0,56(a0)
    1370:	34000013          	li	zero,832
    1374:	0069                	c.nop	26
    1376:	0000                	unimp
    1378:	11e5                	addi	gp,gp,-7
    137a:	0000                	unimp
    137c:	0900                	addi	s0,sp,144
    137e:	005d                	c.nop	23
    1380:	0000                	unimp
    1382:	1390                	addi	a2,sp,480
    1384:	0000                	unimp
    1386:	6934                	flw	fa3,80(a0)
    1388:	0000                	unimp
    138a:	ee00                	fsw	fs0,24(a2)
    138c:	0011                	c.nop	4
    138e:	0000                	unimp
    1390:	5d09                	li	s10,-30
    1392:	0000                	unimp
    1394:	a300                	fsd	fs0,0(a4)
    1396:	34000013          	li	zero,832
    139a:	0069                	c.nop	26
    139c:	0000                	unimp
    139e:	000011f7          	0x11f7
    13a2:	0900                	addi	s0,sp,144
    13a4:	005d                	c.nop	23
    13a6:	0000                	unimp
    13a8:	13b6                	slli	t2,t2,0x2d
    13aa:	0000                	unimp
    13ac:	6934                	flw	fa3,80(a0)
    13ae:	0000                	unimp
    13b0:	0000                	unimp
    13b2:	0012                	c.slli	zero,0x4
    13b4:	0000                	unimp
    13b6:	5d09                	li	s10,-30
    13b8:	0000                	unimp
    13ba:	c900                	sw	s0,16(a0)
    13bc:	34000013          	li	zero,832
    13c0:	0069                	c.nop	26
    13c2:	0000                	unimp
    13c4:	1209                	addi	tp,tp,-30
    13c6:	0000                	unimp
    13c8:	0900                	addi	s0,sp,144
    13ca:	005d                	c.nop	23
    13cc:	0000                	unimp
    13ce:	13dc                	addi	a5,sp,484
    13d0:	0000                	unimp
    13d2:	6934                	flw	fa3,80(a0)
    13d4:	0000                	unimp
    13d6:	1200                	addi	s0,sp,288
    13d8:	0012                	c.slli	zero,0x4
    13da:	0000                	unimp
    13dc:	5d09                	li	s10,-30
    13de:	0000                	unimp
    13e0:	ef00                	fsw	fs0,24(a4)
    13e2:	34000013          	li	zero,832
    13e6:	0069                	c.nop	26
    13e8:	0000                	unimp
    13ea:	0000121b          	0x121b
    13ee:	3500                	fld	fs0,40(a0)
    13f0:	018a                	slli	gp,gp,0x2
    13f2:	0000                	unimp
    13f4:	c801                	beqz	s0,1404 <product2+0x40>
    13f6:	6306                	flw	ft6,64(sp)
    13f8:	3000000b          	0x3000000b
    13fc:	0004                	0x4
    13fe:	ec00                	fsw	fs0,24(s0)
    1400:	0001                	nop
    1402:	0100                	addi	s0,sp,128
    1404:	389c                	fld	fa5,48(s1)
    1406:	0016                	c.slli	zero,0x5
    1408:	3600                	fld	fs0,40(a2)
    140a:	756e                	flw	fa0,248(sp)
    140c:	006d                	c.nop	27
    140e:	c801                	beqz	s0,141e <product2+0x5a>
    1410:	000b6313          	ori	t1,s6,0
    1414:	4f00                	lw	s0,24(a4)
    1416:	3700000f          	0x3700000f
    141a:	0106                	slli	sp,sp,0x1
    141c:	0000                	unimp
    141e:	c801                	beqz	s0,142e <product2+0x6a>
    1420:	5d1c                	lw	a5,56(a0)
    1422:	0000                	unimp
    1424:	8900                	0x8900
    1426:	3700000f          	0x3700000f
    142a:	00000677          	0x677
    142e:	c801                	beqz	s0,143e <product2+0x7a>
    1430:	6328                	flw	fa0,64(a4)
    1432:	da00000b          	0xda00000b
    1436:	3700000f          	0x3700000f
    143a:	0000069b          	0x69b
    143e:	c801                	beqz	s0,144e <product2+0x8a>
    1440:	00005d33          	srl	s10,zero,zero
    1444:	2a00                	fld	fs0,16(a2)
    1446:	0010                	0x10
    1448:	3600                	fld	fs0,40(a2)
    144a:	6f6d                	lui	t5,0x1b
    144c:	0064                	addi	s1,sp,12
    144e:	c801                	beqz	s0,145e <product2+0x9a>
    1450:	00005d3f 00106100 	0x10610000005d3f
    1458:	3800                	fld	fs0,48(s0)
    145a:	0075                	c.nop	29
    145c:	ca01                	beqz	a2,146c <product2+0xa8>
    145e:	5d09                	li	s10,-30
    1460:	0000                	unimp
    1462:	9800                	0x9800
    1464:	0010                	0x10
    1466:	3800                	fld	fs0,48(s0)
    1468:	0064                	addi	s1,sp,12
    146a:	ca01                	beqz	a2,147a <product2+0xb6>
    146c:	00005d0b          	0x5d0b
    1470:	c100                	sw	s0,0(a0)
    1472:	0010                	0x10
    1474:	3900                	fld	fs0,48(a0)
    1476:	3264                	fld	fs1,224(a2)
    1478:	0100                	addi	s0,sp,128
    147a:	0dca                	slli	s11,s11,0x12
    147c:	005d                	c.nop	23
    147e:	0000                	unimp
    1480:	6938                	flw	fa4,80(a0)
    1482:	0100                	addi	s0,sp,128
    1484:	10ca                	slli	ra,ra,0x32
    1486:	005d                	c.nop	23
    1488:	0000                	unimp
    148a:	10df 0000 6239      	0x6239000010df
    1490:	4e5f 0100 12ca      	0x12ca01004e5f
    1496:	005d                	c.nop	23
    1498:	0000                	unimp
    149a:	7238                	flw	fa4,96(a2)
    149c:	645f 0100 16ca      	0x16ca0100645f
    14a2:	005d                	c.nop	23
    14a4:	0000                	unimp
    14a6:	121c                	addi	a5,sp,288
    14a8:	0000                	unimp
    14aa:	843a                	mv	s0,a4
    14ac:	0002                	c.slli64	zero
    14ae:	0100                	addi	s0,sp,128
    14b0:	0b630acb          	fnmsub.d	fs5,ft6,fs6,ft1,rne
    14b4:	0000                	unimp
    14b6:	123a                	slli	tp,tp,0x2e
    14b8:	0000                	unimp
    14ba:	7638                	flw	fa4,104(a2)
    14bc:	0100                	addi	s0,sp,128
    14be:	09cd                	addi	s3,s3,19
    14c0:	1638                	addi	a4,sp,808
    14c2:	0000                	unimp
    14c4:	1252                	slli	tp,tp,0x34
    14c6:	0000                	unimp
    14c8:	7138                	flw	fa4,96(a0)
    14ca:	0100                	addi	s0,sp,128
    14cc:	09ce                	slli	s3,s3,0x13
    14ce:	0000164b          	fnmsub.s	fa2,ft0,ft0,ft0,rtz
    14d2:	1272                	slli	tp,tp,0x3c
    14d4:	0000                	unimp
    14d6:	823a                	mv	tp,a4
    14d8:	0001                	nop
    14da:	0100                	addi	s0,sp,128
    14dc:	0b630acf          	fnmadd.d	fs5,ft6,fs6,ft1,rne
    14e0:	0000                	unimp
    14e2:	1292                	slli	t0,t0,0x24
    14e4:	0000                	unimp
    14e6:	263a                	fld	fa2,392(sp)
    14e8:	0002                	c.slli64	zero
    14ea:	0100                	addi	s0,sp,128
    14ec:	09d0                	addi	a2,sp,212
    14ee:	165e                	slli	a2,a2,0x37
    14f0:	0000                	unimp
    14f2:	12b0                	addi	a2,sp,360
    14f4:	0000                	unimp
    14f6:	243a                	fld	fs0,392(sp)
    14f8:	0002                	c.slli64	zero
    14fa:	0100                	addi	s0,sp,128
    14fc:	09d1                	addi	s3,s3,20
    14fe:	1671                	addi	a2,a2,-4
    1500:	0000                	unimp
    1502:	12fc                	addi	a5,sp,364
    1504:	0000                	unimp
    1506:	00006933          	or	s2,zero,zero
    150a:	2800                	fld	fs0,16(s0)
    150c:	33000013          	li	zero,816
    1510:	0069                	c.nop	26
    1512:	0000                	unimp
    1514:	1356                	slli	t1,t1,0x35
    1516:	0000                	unimp
    1518:	00006933          	or	s2,zero,zero
    151c:	8400                	0x8400
    151e:	33000013          	li	zero,816
    1522:	0069                	c.nop	26
    1524:	0000                	unimp
    1526:	13b2                	slli	t2,t2,0x2c
    1528:	0000                	unimp
    152a:	0004942b          	0x4942b
    152e:	7b00                	flw	fs0,48(a4)
    1530:	0019                	c.nop	6
    1532:	4a00                	lw	s0,16(a2)
    1534:	0015                	c.nop	5
    1536:	2c00                	fld	fs0,24(s0)
    1538:	5a01                	li	s4,-32
    153a:	8902                	jr	s2
    153c:	2c00                	fld	fs0,24(s0)
    153e:	5b01                	li	s6,-32
    1540:	8202                	jr	tp
    1542:	2c00                	fld	fs0,24(s0)
    1544:	5c01                	li	s8,-32
    1546:	7902                	flw	fs2,32(sp)
    1548:	0000                	unimp
    154a:	0004a22b          	0x4a22b
    154e:	7b00                	flw	fs0,48(a4)
    1550:	0019                	c.nop	6
    1552:	6a00                	flw	fs0,16(a2)
    1554:	0015                	c.nop	5
    1556:	2c00                	fld	fs0,24(s0)
    1558:	5a01                	li	s4,-32
    155a:	7202                	flw	ft4,32(sp)
    155c:	2c00                	fld	fs0,24(s0)
    155e:	5b01                	li	s6,-32
    1560:	8202                	jr	tp
    1562:	2c00                	fld	fs0,24(s0)
    1564:	5c01                	li	s8,-32
    1566:	8302                	jr	t1
    1568:	0000                	unimp
    156a:	0005822b          	0x5822b
    156e:	7b00                	flw	fs0,48(a4)
    1570:	0019                	c.nop	6
    1572:	8a00                	0x8a00
    1574:	0015                	c.nop	5
    1576:	2c00                	fld	fs0,24(s0)
    1578:	5a01                	li	s4,-32
    157a:	8502                	jr	a0
    157c:	2c00                	fld	fs0,24(s0)
    157e:	5b01                	li	s6,-32
    1580:	8202                	jr	tp
    1582:	2c00                	fld	fs0,24(s0)
    1584:	5c01                	li	s8,-32
    1586:	7902                	flw	fs2,32(sp)
    1588:	0000                	unimp
    158a:	0005902b          	0x5902b
    158e:	d700                	sw	s0,40(a4)
    1590:	bb000017          	auipc	zero,0xbb000
    1594:	0015                	c.nop	5
    1596:	2c00                	fld	fs0,24(s0)
    1598:	5a01                	li	s4,-32
    159a:	7202                	flw	ft4,32(sp)
    159c:	2c00                	fld	fs0,24(s0)
    159e:	5b01                	li	s6,-32
    15a0:	8302                	jr	t1
    15a2:	2c00                	fld	fs0,24(s0)
    15a4:	5c01                	li	s8,-32
    15a6:	8502                	jr	a0
    15a8:	2c00                	fld	fs0,24(s0)
    15aa:	5d01                	li	s10,-32
    15ac:	8302                	jr	t1
    15ae:	2c00                	fld	fs0,24(s0)
    15b0:	5e01                	li	t3,-32
    15b2:	8202                	jr	tp
    15b4:	2c00                	fld	fs0,24(s0)
    15b6:	5f01                	li	t5,-32
    15b8:	3001                	jal	db8 <memcpy+0x9e>
    15ba:	2b00                	fld	fs0,16(a4)
    15bc:	0598                	addi	a4,sp,704
    15be:	0000                	unimp
    15c0:	0000197b          	0x197b
    15c4:	000015db          	0x15db
    15c8:	012c                	addi	a1,sp,136
    15ca:	025a                	slli	tp,tp,0x16
    15cc:	012c008b          	0x12c008b
    15d0:	0082025b          	0x82025b
    15d4:	012c                	addi	a1,sp,136
    15d6:	025c                	addi	a5,sp,260
    15d8:	0079                	c.nop	30
    15da:	2b00                	fld	fs0,16(a4)
    15dc:	05a8                	addi	a0,sp,712
    15de:	0000                	unimp
    15e0:	0000197b          	0x197b
    15e4:	000015fb          	0x15fb
    15e8:	012c                	addi	a1,sp,136
    15ea:	025a                	slli	tp,tp,0x16
    15ec:	0089                	addi	ra,ra,2
    15ee:	012c                	addi	a1,sp,136
    15f0:	0082025b          	0x82025b
    15f4:	012c                	addi	a1,sp,136
    15f6:	025c                	addi	a5,sp,260
    15f8:	0079                	c.nop	30
    15fa:	2b00                	fld	fs0,16(a4)
    15fc:	05b0                	addi	a2,sp,712
    15fe:	0000                	unimp
    1600:	1a19                	addi	s4,s4,-26
    1602:	0000                	unimp
    1604:	0000161b          	0x161b
    1608:	012c                	addi	a1,sp,136
    160a:	025a                	slli	tp,tp,0x16
    160c:	0086                	slli	ra,ra,0x1
    160e:	012c                	addi	a1,sp,136
    1610:	0085025b          	0x85025b
    1614:	012c                	addi	a1,sp,136
    1616:	025c                	addi	a5,sp,260
    1618:	0079                	c.nop	30
    161a:	2d00                	fld	fs0,24(a0)
    161c:	05b8                	addi	a4,sp,712
    161e:	0000                	unimp
    1620:	0000197b          	0x197b
    1624:	012c                	addi	a1,sp,136
    1626:	025a                	slli	tp,tp,0x16
    1628:	0086                	slli	ra,ra,0x1
    162a:	012c                	addi	a1,sp,136
    162c:	0082025b          	0x82025b
    1630:	012c                	addi	a1,sp,136
    1632:	025c                	addi	a5,sp,260
    1634:	0079                	c.nop	30
    1636:	0000                	unimp
    1638:	5d09                	li	s10,-30
    163a:	0000                	unimp
    163c:	4b00                	lw	s0,16(a4)
    163e:	0016                	c.slli	zero,0x5
    1640:	3400                	fld	fs0,40(s0)
    1642:	0069                	c.nop	26
    1644:	0000                	unimp
    1646:	1506                	slli	a0,a0,0x21
    1648:	0000                	unimp
    164a:	0900                	addi	s0,sp,144
    164c:	005d                	c.nop	23
    164e:	0000                	unimp
    1650:	165e                	slli	a2,a2,0x37
    1652:	0000                	unimp
    1654:	6934                	flw	fa3,80(a0)
    1656:	0000                	unimp
    1658:	0f00                	addi	s0,sp,912
    165a:	0015                	c.nop	5
    165c:	0000                	unimp
    165e:	5d09                	li	s10,-30
    1660:	0000                	unimp
    1662:	7100                	flw	fs0,32(a0)
    1664:	0016                	c.slli	zero,0x5
    1666:	3400                	fld	fs0,40(s0)
    1668:	0069                	c.nop	26
    166a:	0000                	unimp
    166c:	1518                	addi	a4,sp,672
    166e:	0000                	unimp
    1670:	0900                	addi	s0,sp,144
    1672:	005d                	c.nop	23
    1674:	0000                	unimp
    1676:	1684                	addi	s1,sp,864
    1678:	0000                	unimp
    167a:	6934                	flw	fa3,80(a0)
    167c:	0000                	unimp
    167e:	2100                	fld	fs0,0(a0)
    1680:	0015                	c.nop	5
    1682:	0000                	unimp
    1684:	2a35                	jal	17c0 <result+0x1a4>
    1686:	0000                	unimp
    1688:	0100                	addi	s0,sp,128
    168a:	0692                	slli	a3,a3,0x4
    168c:	00000b63          	beqz	zero,16a2 <result+0x86>
    1690:	02ca                	slli	t0,t0,0x12
    1692:	0000                	unimp
    1694:	0166                	slli	sp,sp,0x19
    1696:	0000                	unimp
    1698:	9c01                	0x9c01
    169a:	1795                	addi	a5,a5,-27
    169c:	0000                	unimp
    169e:	6136                	flw	ft2,76(sp)
    16a0:	0100                	addi	s0,sp,128
    16a2:	1592                	slli	a1,a1,0x24
    16a4:	00000b63          	beqz	zero,16ba <result+0x9e>
    16a8:	00001407          	0x1407
    16ac:	0006ea37          	lui	s4,0x6e
    16b0:	0100                	addi	s0,sp,128
    16b2:	1c92                	slli	s9,s9,0x24
    16b4:	005d                	c.nop	23
    16b6:	0000                	unimp
    16b8:	1441                	addi	s0,s0,-16
    16ba:	0000                	unimp
    16bc:	6236                	flw	ft4,76(sp)
    16be:	0100                	addi	s0,sp,128
    16c0:	2992                	fld	fs3,256(sp)
    16c2:	00000b63          	beqz	zero,16d8 <result+0xbc>
    16c6:	1492                	slli	s1,s1,0x24
    16c8:	0000                	unimp
    16ca:	0006f137          	lui	sp,0x6f
    16ce:	0100                	addi	s0,sp,128
    16d0:	3092                	fld	ft1,288(sp)
    16d2:	005d                	c.nop	23
    16d4:	0000                	unimp
    16d6:	14cc                	addi	a1,sp,612
    16d8:	0000                	unimp
    16da:	00051b37          	lui	s6,0x51
    16de:	0100                	addi	s0,sp,128
    16e0:	3c92                	fld	fs9,288(sp)
    16e2:	005d                	c.nop	23
    16e4:	0000                	unimp
    16e6:	00001503          	lh	a0,0(zero) # 0 <__DYNAMIC>
    16ea:	3d3a                	fld	fs10,424(sp)
    16ec:	0006                	c.slli	zero,0x1
    16ee:	0100                	addi	s0,sp,128
    16f0:	0994                	addi	a3,sp,208
    16f2:	1795                	addi	a5,a5,-27
    16f4:	0000                	unimp
    16f6:	153d                	addi	a0,a0,-17
    16f8:	0000                	unimp
    16fa:	6938                	flw	fa4,80(a0)
    16fc:	0100                	addi	s0,sp,128
    16fe:	0995                	addi	s3,s3,5
    1700:	005d                	c.nop	23
    1702:	0000                	unimp
    1704:	1581                	addi	a1,a1,-32
    1706:	0000                	unimp
    1708:	6a38                	flw	fa4,80(a2)
    170a:	0100                	addi	s0,sp,128
    170c:	0b95                	addi	s7,s7,5
    170e:	005d                	c.nop	23
    1710:	0000                	unimp
    1712:	161d                	addi	a2,a2,-25
    1714:	0000                	unimp
    1716:	6b38                	flw	fa4,80(a4)
    1718:	0100                	addi	s0,sp,128
    171a:	0d95                	addi	s11,s11,5
    171c:	005d                	c.nop	23
    171e:	0000                	unimp
    1720:	1651                	addi	a2,a2,-12
    1722:	0000                	unimp
    1724:	743a                	flw	fs0,172(sp)
    1726:	0002                	c.slli64	zero
    1728:	0100                	addi	s0,sp,128
    172a:	0a96                	slli	s5,s5,0x5
    172c:	00000b63          	beqz	zero,1742 <result+0x126>
    1730:	169f 0000 0c3a      	0xc3a0000169f
    1736:	0000                	unimp
    1738:	0100                	addi	s0,sp,128
    173a:	17b10997          	auipc	s3,0x17b10
    173e:	0000                	unimp
    1740:	000016b7          	lui	a3,0x1
    1744:	6e3a                	flw	ft8,140(sp)
    1746:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    174a:	0998                	addi	a4,sp,208
    174c:	17c4                	addi	s1,sp,996
    174e:	0000                	unimp
    1750:	000016d7          	0x16d7
    1754:	00006933          	or	s2,zero,zero
    1758:	f700                	fsw	fs0,40(a4)
    175a:	0016                	c.slli	zero,0x5
    175c:	3300                	fld	fs0,32(a4)
    175e:	0069                	c.nop	26
    1760:	0000                	unimp
    1762:	174c                	addi	a1,sp,932
    1764:	0000                	unimp
    1766:	00006933          	or	s2,zero,zero
    176a:	7e00                	flw	fs0,56(a2)
    176c:	33000017          	auipc	zero,0x33000
    1770:	0069                	c.nop	26
    1772:	0000                	unimp
    1774:	17bc                	addi	a5,sp,1000
    1776:	0000                	unimp
    1778:	2a2d                	jal	18b2 <ti_2+0x3e>
    177a:	0004                	0x4
    177c:	1900                	addi	s0,sp,176
    177e:	001a                	c.slli	zero,0x6
    1780:	2c00                	fld	fs0,24(s0)
    1782:	5a01                	li	s4,-32
    1784:	8602                	jr	a2
    1786:	2c00                	fld	fs0,24(s0)
    1788:	5b01                	li	s6,-32
    178a:	8402                	jr	s0
    178c:	2c00                	fld	fs0,24(s0)
    178e:	5c01                	li	s8,-32
    1790:	8302                	jr	t1
    1792:	0000                	unimp
    1794:	0900                	addi	s0,sp,144
    1796:	005d                	c.nop	23
    1798:	0000                	unimp
    179a:	17b1                	addi	a5,a5,-20
    179c:	0000                	unimp
    179e:	6934                	flw	fa3,80(a0)
    17a0:	0000                	unimp
    17a2:	5400                	lw	s0,40(s0)
    17a4:	34000017          	auipc	zero,0x34000
    17a8:	0069                	c.nop	26
    17aa:	0000                	unimp
    17ac:	175d                	addi	a4,a4,-9
    17ae:	0000                	unimp
    17b0:	0900                	addi	s0,sp,144
    17b2:	005d                	c.nop	23
    17b4:	0000                	unimp
    17b6:	17c4                	addi	s1,sp,996
    17b8:	0000                	unimp
    17ba:	6934                	flw	fa3,80(a0)
    17bc:	0000                	unimp
    17be:	6600                	flw	fs0,8(a2)
    17c0:	00000017          	auipc	zero,0x0
    17c4:	5d09                	li	s10,-30
    17c6:	0000                	unimp
    17c8:	d700                	sw	s0,40(a4)
    17ca:	34000017          	auipc	zero,0x34000
    17ce:	0069                	c.nop	26
    17d0:	0000                	unimp
    17d2:	0000176f          	jal	a4,27d2 <_min_stack+0x7d2>
    17d6:	3500                	fld	fs0,40(a0)
    17d8:	00000117          	auipc	sp,0x0
    17dc:	4901                	li	s2,0
    17de:	6306                	flw	ft6,64(sp)
    17e0:	d800000b          	0xd800000b
    17e4:	0000                	unimp
    17e6:	f200                	fsw	fs0,32(a2)
    17e8:	0001                	nop
    17ea:	0100                	addi	s0,sp,128
    17ec:	399c                	fld	fa5,48(a1)
    17ee:	0019                	c.nop	6
    17f0:	3600                	fld	fs0,40(a2)
    17f2:	0061                	c.nop	24
    17f4:	4901                	li	s2,0
    17f6:	6314                	flw	fa3,0(a4)
    17f8:	1100000b          	0x1100000b
    17fc:	0018                	0x18
    17fe:	3700                	fld	fs0,40(a4)
    1800:	06ea                	slli	a3,a3,0x1a
    1802:	0000                	unimp
    1804:	4901                	li	s2,0
    1806:	00005d1b          	0x5d1b
    180a:	4b00                	lw	s0,16(a4)
    180c:	0018                	0x18
    180e:	3600                	fld	fs0,40(a2)
    1810:	0062                	c.slli	zero,0x18
    1812:	4901                	li	s2,0
    1814:	6328                	flw	fa0,64(a4)
    1816:	9c00000b          	0x9c00000b
    181a:	0018                	0x18
    181c:	3700                	fld	fs0,40(a4)
    181e:	06f1                	addi	a3,a3,28
    1820:	0000                	unimp
    1822:	4901                	li	s2,0
    1824:	00005d2f          	0x5d2f
    1828:	d300                	sw	s0,32(a4)
    182a:	0018                	0x18
    182c:	3600                	fld	fs0,40(a2)
    182e:	6f6d                	lui	t5,0x1b
    1830:	0064                	addi	s1,sp,12
    1832:	4901                	li	s2,0
    1834:	00005d3b          	0x5d3b
    1838:	0a00                	addi	s0,sp,272
    183a:	0019                	c.nop	6
    183c:	3700                	fld	fs0,40(a4)
    183e:	0000051b          	0x51b
    1842:	4901                	li	s2,0
    1844:	5d44                	lw	s1,60(a0)
    1846:	0000                	unimp
    1848:	6900                	flw	fs0,16(a0)
    184a:	0019                	c.nop	6
    184c:	3a00                	fld	fs0,48(a2)
    184e:	063d                	addi	a2,a2,15
    1850:	0000                	unimp
    1852:	4c01                	li	s8,0
    1854:	3909                	jal	1466 <product2+0xa2>
    1856:	0019                	c.nop	6
    1858:	9600                	0x9600
    185a:	0019                	c.nop	6
    185c:	3800                	fld	fs0,48(s0)
    185e:	0069                	c.nop	26
    1860:	4d01                	li	s10,0
    1862:	5d09                	li	s10,-30
    1864:	0000                	unimp
    1866:	da00                	sw	s0,48(a2)
    1868:	0019                	c.nop	6
    186a:	3800                	fld	fs0,48(s0)
    186c:	006a                	c.slli	zero,0x1a
    186e:	4d01                	li	s10,0
    1870:	00005d0b          	0x5d0b
    1874:	9a00                	0x9a00
    1876:	001a                	c.slli	zero,0x6
    1878:	3800                	fld	fs0,48(s0)
    187a:	4d01006b          	0x4d01006b
    187e:	5d0d                	li	s10,-29
    1880:	0000                	unimp
    1882:	0700                	addi	s0,sp,896
    1884:	3a00001b          	0x3a00001b
    1888:	0264                	addi	s1,sp,268
    188a:	0000                	unimp
    188c:	4e01                	li	t3,0
    188e:	630a                	flw	ft6,128(sp)
    1890:	5500000b          	0x5500000b
    1894:	3a00001b          	0x3a00001b
    1898:	000c                	0xc
    189a:	0000                	unimp
    189c:	4f01                	li	t5,0
    189e:	5509                	li	a0,-30
    18a0:	0019                	c.nop	6
    18a2:	6d00                	flw	fs0,24(a0)
    18a4:	3a00001b          	0x3a00001b
    18a8:	036e                	slli	t1,t1,0x1b
    18aa:	0000                	unimp
    18ac:	5001                	c.li	zero,-32
    18ae:	6809                	lui	a6,0x2
    18b0:	0019                	c.nop	6
    18b2:	ba00                	fsd	fs0,48(a2)
    18b4:	3300001b          	0x3300001b
    18b8:	0069                	c.nop	26
    18ba:	0000                	unimp
    18bc:	1c4a                	slli	s8,s8,0x32
    18be:	0000                	unimp
    18c0:	00006933          	or	s2,zero,zero
    18c4:	9f00                	0x9f00
    18c6:	001c                	0x1c
    18c8:	3300                	fld	fs0,32(a4)
    18ca:	0069                	c.nop	26
    18cc:	0000                	unimp
    18ce:	1cd1                	addi	s9,s9,-12
    18d0:	0000                	unimp
    18d2:	00006933          	or	s2,zero,zero
    18d6:	ff00                	fsw	fs0,56(a4)
    18d8:	001c                	0x1c
    18da:	2b00                	fld	fs0,16(a4)
    18dc:	016a                	slli	sp,sp,0x1a
    18de:	0000                	unimp
    18e0:	0000197b          	0x197b
    18e4:	18fd                	addi	a7,a7,-1
    18e6:	0000                	unimp
    18e8:	012c                	addi	a1,sp,136
    18ea:	025a                	slli	tp,tp,0x16
    18ec:	0085                	addi	ra,ra,1
    18ee:	012c                	addi	a1,sp,136
    18f0:	b478045b          	0xb478045b
    18f4:	067f                	0x67f
    18f6:	012c                	addi	a1,sp,136
    18f8:	025c                	addi	a5,sp,260
    18fa:	0186                	slli	gp,gp,0x1
    18fc:	2b00                	fld	fs0,16(a4)
    18fe:	017e                	slli	sp,sp,0x1f
    1900:	0000                	unimp
    1902:	0000197b          	0x197b
    1906:	191f 0000 012c      	0x12c0000191f
    190c:	025a                	slli	tp,tp,0x16
    190e:	0072                	c.slli	zero,0x1c
    1910:	012c                	addi	a1,sp,136
    1912:	b478045b          	0xb478045b
    1916:	067f                	0x67f
    1918:	012c                	addi	a1,sp,136
    191a:	025c                	addi	a5,sp,260
    191c:	0082                	c.slli64	ra
    191e:	2d00                	fld	fs0,24(a0)
    1920:	020c                	addi	a1,sp,256
    1922:	0000                	unimp
    1924:	0000197b          	0x197b
    1928:	012c                	addi	a1,sp,136
    192a:	055a                	slli	a0,a0,0x16
    192c:	00116c03          	0x116c03
    1930:	2c00                	fld	fs0,24(s0)
    1932:	5c01                	li	s8,-32
    1934:	8802                	jr	a6
    1936:	0000                	unimp
    1938:	0900                	addi	s0,sp,144
    193a:	005d                	c.nop	23
    193c:	0000                	unimp
    193e:	1955                	addi	s2,s2,-11
    1940:	0000                	unimp
    1942:	6934                	flw	fa3,80(a0)
    1944:	0000                	unimp
    1946:	b700                	fsd	fs0,40(a4)
    1948:	0018                	0x18
    194a:	3400                	fld	fs0,40(s0)
    194c:	0069                	c.nop	26
    194e:	0000                	unimp
    1950:	18c0                	addi	s0,sp,116
    1952:	0000                	unimp
    1954:	0900                	addi	s0,sp,144
    1956:	005d                	c.nop	23
    1958:	0000                	unimp
    195a:	1968                	addi	a0,sp,188
    195c:	0000                	unimp
    195e:	6934                	flw	fa3,80(a0)
    1960:	0000                	unimp
    1962:	c900                	sw	s0,16(a0)
    1964:	0018                	0x18
    1966:	0000                	unimp
    1968:	5d09                	li	s10,-30
    196a:	0000                	unimp
    196c:	7b00                	flw	fs0,48(a4)
    196e:	0019                	c.nop	6
    1970:	3400                	fld	fs0,40(s0)
    1972:	0069                	c.nop	26
    1974:	0000                	unimp
    1976:	18d2                	slli	a7,a7,0x34
    1978:	0000                	unimp
    197a:	3b00                	fld	fs0,48(a4)
    197c:	00000573          	0x573
    1980:	3801                	jal	1190 <_bss_start+0x24>
    1982:	ba06                	fsd	ft1,304(sp)
    1984:	0000                	unimp
    1986:	1e00                	addi	s0,sp,816
    1988:	0000                	unimp
    198a:	0100                	addi	s0,sp,128
    198c:	ee9c                	fsw	fa5,24(a3)
    198e:	0019                	c.nop	6
    1990:	3c00                	fld	fs0,56(s0)
    1992:	3161                	jal	161a <product2+0x256>
    1994:	0100                	addi	s0,sp,128
    1996:	1538                	addi	a4,sp,680
    1998:	00000b63          	beqz	zero,19ae <ti_2+0x13a>
    199c:	5a01                	li	s4,-32
    199e:	6d3c                	flw	fa5,88(a0)
    19a0:	0100646f          	jal	s0,79b0 <_stack_len+0x39b0>
    19a4:	1d38                	addi	a4,sp,696
    19a6:	005d                	c.nop	23
    19a8:	0000                	unimp
    19aa:	5b01                	li	s6,-32
    19ac:	00054e37          	lui	t3,0x54
    19b0:	0100                	addi	s0,sp,128
    19b2:	2538                	fld	fa4,72(a0)
    19b4:	005d                	c.nop	23
    19b6:	0000                	unimp
    19b8:	1d54                	addi	a3,sp,692
    19ba:	0000                	unimp
    19bc:	6938                	flw	fa4,80(a0)
    19be:	0100                	addi	s0,sp,128
    19c0:	053d                	addi	a0,a0,15
    19c2:	005d                	c.nop	23
    19c4:	0000                	unimp
    19c6:	1d75                	addi	s10,s10,-3
    19c8:	0000                	unimp
    19ca:	ee3d                	bnez	a2,1a48 <random_keys+0x44>
    19cc:	0019                	c.nop	6
    19ce:	c000                	sw	s0,0(s0)
    19d0:	0000                	unimp
    19d2:	0000                	unimp
    19d4:	0000                	unimp
    19d6:	0100                	addi	s0,sp,128
    19d8:	0940                	addi	s0,sp,148
    19da:	063e                	slli	a2,a2,0xf
    19dc:	001a                	c.slli	zero,0x6
    19de:	9400                	0x9400
    19e0:	001d                	c.nop	7
    19e2:	3e00                	fld	fs0,56(a2)
    19e4:	000019fb          	0x19fb
    19e8:	00001da7          	0x1da7
    19ec:	0000                	unimp
    19ee:	00010d3f 062b0100 	0x62b010000010d3f
    19f6:	1301                	addi	t1,t1,-32
    19f8:	001a                	c.slli	zero,0x6
    19fa:	4000                	lw	s0,0(s0)
    19fc:	3161                	jal	1684 <result+0x68>
    19fe:	0100                	addi	s0,sp,128
    1a00:	1a131e2b          	0x1a131e2b
    1a04:	0000                	unimp
    1a06:	6d40                	flw	fs0,28(a0)
    1a08:	0100646f          	jal	s0,7a18 <_stack_len+0x3a18>
    1a0c:	00692f2b          	0x692f2b
    1a10:	0000                	unimp
    1a12:	1000                	addi	s0,sp,32
    1a14:	6904                	flw	fs1,16(a0)
    1a16:	0000                	unimp
    1a18:	3b00                	fld	fs0,48(a4)
    1a1a:	0569                	addi	a0,a0,26
    1a1c:	0000                	unimp
    1a1e:	2301                	jal	1f1e <_bss_end+0x22>
    1a20:	9206                	add	tp,tp,ra
    1a22:	0000                	unimp
    1a24:	2200                	fld	fs0,0(a2)
    1a26:	0000                	unimp
    1a28:	0100                	addi	s0,sp,128
    1a2a:	8b9c                	0x8b9c
    1a2c:	001a                	c.slli	zero,0x6
    1a2e:	3c00                	fld	fs0,56(s0)
    1a30:	3161                	jal	16b8 <result+0x9c>
    1a32:	0100                	addi	s0,sp,128
    1a34:	0b631523          	sh	s6,170(t1)
    1a38:	0000                	unimp
    1a3a:	5a01                	li	s4,-32
    1a3c:	613c                	flw	fa5,64(a0)
    1a3e:	0032                	c.slli	zero,0xc
    1a40:	2301                	jal	1f40 <_bss_end+0x44>
    1a42:	631e                	flw	ft6,196(sp)
    1a44:	0100000b          	0x100000b
    1a48:	054e375b          	0x54e375b
    1a4c:	0000                	unimp
    1a4e:	2301                	jal	1f4e <_bss_end+0x52>
    1a50:	5d26                	lw	s10,104(sp)
    1a52:	0000                	unimp
    1a54:	c100                	sw	s0,0(a0)
    1a56:	001d                	c.nop	7
    1a58:	3800                	fld	fs0,48(s0)
    1a5a:	0069                	c.nop	26
    1a5c:	2401                	jal	1c5c <random_keys+0x258>
    1a5e:	5d05                	li	s10,-31
    1a60:	0000                	unimp
    1a62:	e200                	fsw	fs0,0(a2)
    1a64:	001d                	c.nop	7
    1a66:	4100                	lw	s0,0(a0)
    1a68:	00001a8b          	0x1a8b
    1a6c:	00a6                	slli	ra,ra,0x9
    1a6e:	0000                	unimp
    1a70:	000a                	c.slli	zero,0x2
    1a72:	0000                	unimp
    1a74:	2601                	jal	1d74 <random_keys+0x370>
    1a76:	3e09                	jal	1588 <product2+0x1c4>
    1a78:	00001aa3          	sh	zero,21(zero) # 15 <__DYNAMIC+0x15>
    1a7c:	1e01                	addi	t3,t3,-32
    1a7e:	0000                	unimp
    1a80:	983e                	add	a6,a6,a5
    1a82:	001a                	c.slli	zero,0x6
    1a84:	2400                	fld	fs0,8(s0)
    1a86:	001e                	c.slli	zero,0x7
    1a88:	0000                	unimp
    1a8a:	3f00                	fld	fs0,56(a4)
    1a8c:	003a                	c.slli	zero,0xe
    1a8e:	0000                	unimp
    1a90:	0f01                	addi	t5,t5,0
    1a92:	0106                	slli	sp,sp,0x1
    1a94:	00001aaf          	0x1aaf
    1a98:	6140                	flw	fs0,4(a0)
    1a9a:	0031                	c.nop	12
    1a9c:	0f01                	addi	t5,t5,0
    1a9e:	131e                	slli	t1,t1,0x27
    1aa0:	001a                	c.slli	zero,0x6
    1aa2:	4000                	lw	s0,0(s0)
    1aa4:	3261                	jal	142c <product2+0x68>
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	1a13300f          	0x1a13300f
    1aac:	0000                	unimp
    1aae:	4200                	lw	s0,0(a2)
    1ab0:	00001a8b          	0x1a8b
    1ab4:	008c                	addi	a1,sp,64
    1ab6:	0000                	unimp
    1ab8:	0006                	c.slli	zero,0x1
    1aba:	0000                	unimp
    1abc:	9c01                	0x9c01
    1abe:	00001ad3          	fadd.s	fs5,ft0,ft0,rtz
    1ac2:	983e                	add	a6,a6,a5
    1ac4:	001a                	c.slli	zero,0x6
    1ac6:	4700                	lw	s0,8(a4)
    1ac8:	001e                	c.slli	zero,0x7
    1aca:	4300                	lw	s0,0(a4)
    1acc:	00001aa3          	sh	zero,21(zero) # 15 <__DYNAMIC+0x15>
    1ad0:	5b01                	li	s6,-32
    1ad2:	4200                	lw	s0,0(a2)
    1ad4:	19ee                	slli	s3,s3,0x3b
    1ad6:	0000                	unimp
    1ad8:	00b4                	addi	a3,sp,72
    1ada:	0000                	unimp
    1adc:	0006                	c.slli	zero,0x1
    1ade:	0000                	unimp
    1ae0:	9c01                	0x9c01
    1ae2:	00001af7          	0x1af7
    1ae6:	fb3e                	fsw	fa5,180(sp)
    1ae8:	0019                	c.nop	6
    1aea:	5a00                	lw	s0,48(a2)
    1aec:	001e                	c.slli	zero,0x7
    1aee:	4300                	lw	s0,0(a4)
    1af0:	1a06                	slli	s4,s4,0x21
    1af2:	0000                	unimp
    1af4:	5b01                	li	s6,-32
    1af6:	4400                	lw	s0,8(s0)
    1af8:	032d                	addi	t1,t1,11
    1afa:	0000                	unimp
    1afc:	00000323          	sb	zero,6(zero) # 6 <__DYNAMIC+0x6>
    1b00:	6e440007          	0x6e440007
    1b04:	0000                	unimp
    1b06:	6400                	flw	fs0,8(s0)
    1b08:	0000                	unimp
    1b0a:	0700                	addi	s0,sp,896
    1b0c:	0000                	unimp
    1b0e:	001e                	c.slli	zero,0x7
    1b10:	0000                	unimp
    1b12:	0002                	c.slli64	zero
    1b14:	00000403          	lb	s0,0(zero) # 0 <__DYNAMIC>
    1b18:	0104                	addi	s1,sp,128
    1b1a:	0000240b          	0x240b
    1b1e:	0030                	addi	a2,sp,8
    1b20:	0000                	unimp
    1b22:	06f8                	addi	a4,sp,844
    1b24:	0000                	unimp
    1b26:	03df 0000 06ff      	0x6ff000003df
    1b2c:	0000                	unimp
    1b2e:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x1d2>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 6e0b3 <_stack_start+0x5e0b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
    asm volatile(
  c0:	3813490b          	0x3813490b
    for(i=0;i<(length/3);i++) {
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
    asm volatile(
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
    for(i=0;i<(length/3);i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
    int line[size_b][size_a + size_b];
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	0b390b3b          	0xb390b3b
    int line[size_b][size_a + size_b];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 110:	0000                	unimp
    int pola[size_a];
 112:	03011317          	auipc	t1,0x3011
    int line[size_b][size_a + size_b];
 116:	0b0e                	slli	s6,s6,0x3
    int pola[size_a];
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    int line[size_b][size_a + size_b];
 11a:	39053b0b          	0x39053b0b
    int pola[size_a];
 11e:	0013010b          	0x13010b
    int polb[size_b];
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
 126:	0b3a0e03          	lb	t3,179(s4)
    int pola[size_a];
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
            line[i][j] = 0;
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
    int polb[size_b];
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
    int pola[size_a];
 13e:	3813490b          	0x3813490b
    int polb[size_b];
 142:	0005                	c.nop	1
            line[i][j] = 0;
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
    for (i = 0; i < size_b; ++i){
 14a:	0b3a0b0b          	0xb3a0b0b
            product[j] = 0;
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 156:	0b01131b          	0xb01131b
    for (i = 0; i < size_a; ++i){
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    array_mod(pola,mod,size_a);
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
    for (i = 0; i < size_b; ++i){
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
    array_mod(polb,mod,size_b);
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
    if(star_mult == 1){
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
 192:	20000013          	li	zero,512
        for (j = size_b -1; j >= 0; j = j-1){
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 19c:	0b39053b          	0xb39053b
            product[j] = 0;
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
 1aa:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
    for (i = 0; i < size_b; ++i){
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
        pola[i] = a[i];
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x52>
        pola[i] = a[i];
 1d0:	00052f13          	slti	t5,a0,0
        polb[i] = b[i];
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
 1dc:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
 1e0:	1349                	addi	t1,t1,-14
        polb[i] = b[i];
 1e2:	1802193f 2e250000 	0x2e2500001802193f
        for (j = size_b -1; j >= 0; j = j-1){
 1ea:	3f01                	jal	fa <polymult+0x22>
        for(j = 0; j < size_a + size_b -1; ++j){
 1ec:	0319                	addi	t1,t1,6
    for (i = 0; i < size_b; ++i){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
 1f8:	1201                	addi	tp,tp,-32
    for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
    array_mod(product,mod,(size_a+size_b-1));
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
}
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
 234:	0018                	0x18
                line[size_b-1-j][k] = pola[k]*polb[j];
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 246:	342a                	fld	fs0,168(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 250:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
            for (k = size_a-1; k >= 0; k = k-1 ){
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	892d                	andi	a0,a0,11
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
            for (k = size_a-1; k >= 0; k = k-1 ){
 27c:	0021                	c.nop	8
        for (j = size_b -1; j >= 0; j = j-1){
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
        for(j = 0; j < size_a + size_b -1; ++j){
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
            line[i][j] = line[i][j] % mod;
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	12011113          	0x12011113
    for (i = 0; i < size_b; ++i){
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
            product[j] += line[i][j];
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
        for(i = 0; i < size_b; ++i){
 2be:	1349                	addi	t1,t1,-14
    for(j = 0; j < size_a + size_b -1; ++j){
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
        for(i = 0; i < size_b; ++i){
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
    int line[size_b][size_a + size_b];
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
    int line[size_b][size_a + size_b];
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 2f4:	0b39                	addi	s6,s6,14
    int pola[size_a];
 2f6:	13491927          	0x13491927
    int line[size_b][size_a + size_b];
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
    int pola[size_a];
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
 30a:	0b3a0803          	lb	a6,179(s4)
    int pola[size_a];
 30e:	0b390b3b          	0xb390b3b
    int polb[size_b];
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
    int pola[size_a];
 316:	0000                	unimp
    int polb[size_b];
 318:	03000537          	lui	a0,0x3000
    int line[size_b][size_a + size_b];
 31c:	3a0e                	fld	fs4,224(sp)
    int polb[size_b];
 31e:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_b; ++i){
 322:	0213490b          	0x213490b
            product2[j] = 0;
 326:	38000017          	auipc	zero,0x38000
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
    for (i = 0; i < size_b; ++i){
 330:	0b390b3b          	0xb390b3b
    for(i = 0; i < size_a; ++i){
 334:	1349                	addi	t1,t1,-14
 336:	1702                	slli	a4,a4,0x20
    for(i = 0; i < size_b; ++i){
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
    if(star_mult == 1){
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
        for (j = size_b -1; j >= 0; j = j-1){
 350:	0b390b3b          	0xb390b3b
            for (k = size_a-1; k >= 0; k = k-1 ){
 354:	1349                	addi	t1,t1,-14
            product2[j] = 0;
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
            line[i][j] = 0;
 35e:	0319                	addi	t1,t1,6
            product2[j] = 0;
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
        for(j = 0; j < size_a + size_b -1; ++j){
 366:	1119270b          	0x1119270b
 36a:	1201                	addi	tp,tp,-32
    for (i = 0; i < size_b; ++i){
 36c:	4006                	0x4006
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 374:	0000                	unimp
 376:	053c                	addi	a5,sp,648
        pola[i] = a[i];
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
 384:	0018                	0x18
    for(i = 0; i < size_a; ++i){
 386:	3d00                	fld	fs0,56(a0)
        pola[i] = a[i];
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
    for(i = 0; i < size_a; ++i){
 38c:	0152                	slli	sp,sp,0x14
        polb[i] = b[i];
 38e:	1755                	addi	a4,a4,-11
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
 398:	053e                	slli	a0,a0,0xf
 39a:	3100                	fld	fs0,32(a0)
    for(i = 0; i < size_b; ++i){
 39c:	00170213          	addi	tp,a4,1
        polb[i] = b[i];
 3a0:	3f00                	fld	fs0,56(a4)
    for(i = 0; i < size_b; ++i){
 3a2:	012e                	slli	sp,sp,0xb
                line[size_b-1-j][k] = pola[k]*polb[j];
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 3ac:	0b39                	addi	s6,s6,14
 3ae:	0b201927          	0xb201927
 3b2:	1301                	addi	t1,t1,-32
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b6:	0540                	addi	s0,sp,644
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3bc:	390b3b0b          	0x390b3b0b
        for (j = size_b -1; j >= 0; j = j-1){
 3c0:	0013490b          	0x13490b
 3c4:	4100                	lw	s0,0(a0)
 3c6:	011d                	addi	sp,sp,7
 3c8:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	0111                	addi	sp,sp,4
        array_add(product2,line[i],size_a+size_b-1);
 3cc:	0612                	slli	a2,a2,0x4
 3ce:	0b58                	addi	a4,sp,404
 3d0:	0b59                	addi	s6,s6,22
 3d2:	00000b57          	0xb57
    for(i=0;i<size_b;++i){
 3d6:	2e42                	fld	ft8,16(sp)
}
 3d8:	3101                	jal	ffffffd8 <_stack_start+0xfffeffd8>
 3da:	12011113          	0x12011113
 3de:	4006                	0x4006
 3e0:	9718                	0x9718
 3e2:	1942                	slli	s2,s2,0x30
 3e4:	1301                	addi	t1,t1,-32
 3e6:	0000                	unimp
 3e8:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
 3ec:	00180213          	addi	tp,a6,1 # 2001 <_min_stack+0x1>
 3f0:	4400                	lw	s0,8(s0)
 3f2:	002e                	c.slli	zero,0xb
 3f4:	193c193f 0e030e6e 	0xe030e6e193c193f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fc:	0b3a                	slli	s6,s6,0xe
 3fe:	00000b3b          	0xb3b
 402:	0100                	addi	s0,sp,128
 404:	0011                	c.nop	4
 406:	0610                	addi	a2,sp,768
 408:	0655                	addi	a2,a2,21
 40a:	0e1b0e03          	lb	t3,225(s6) # 510e1 <_stack_start+0x410e1>
 40e:	0e25                	addi	t3,t3,9
 410:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	0f72                	slli	t5,t5,0x1c
       2:	0000                	unimp
       4:	0f86                	slli	t6,t6,0x1
       6:	0000                	unimp
       8:	0001                	nop
       a:	865a                	mv	a2,s6
       c:	8700000f          	0x8700000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0f88                	addi	a0,sp,976
      20:	0000                	unimp
      22:	0fc8                	addi	a0,sp,980
      24:	0000                	unimp
      26:	0001                	nop
      28:	ce5a                	sw	s6,28(sp)
      2a:	d800000f          	0xd800000f
      2e:	0100000f          	fence	w,unknown
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0ee6                	slli	t4,t4,0x19
      3e:	0000                	unimp
      40:	0f3a                	slli	t5,t5,0xe
      42:	0000                	unimp
      44:	0001                	nop
      46:	3a5a                	fld	fs4,432(sp)
      48:	6200000f          	0x6200000f
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	c800                	sw	s0,16(s0)
      5e:	000e                	c.slli	zero,0x3
      60:	1c00                	addi	s0,sp,560
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0f1c                	addi	a5,sp,912
      6c:	0000                	unimp
      6e:	0f26                	slli	t5,t5,0x9
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0f26                	slli	t5,t5,0x9
      78:	0000                	unimp
      7a:	0f65                	addi	t5,t5,25
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	0f65                	addi	t5,t5,25
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	0fcc                	addi	a1,sp,980
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	cc79                	beqz	s0,16c <polymult+0x94>
}
      90:	ce00000f          	0xce00000f
    for(i=0;i<(length/3);i++) {
      94:	0300000f          	fence	rw,unknown
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	0fce                	slli	t6,t6,0x13
      9e:	0000                	unimp
}
      a0:	0fd8                	addi	a4,sp,980
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	c800                	sw	s0,16(s0)
      b2:	000e                	c.slli	zero,0x3
    asm volatile(
      b4:	f600                	fsw	fs0,40(a2)
      b6:	000e                	c.slli	zero,0x3
}
      b8:	0300                	addi	s0,sp,384
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0ef6                	slli	t4,t4,0x1d
    asm volatile(
      c0:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      c2:	0ef8                	addi	a4,sp,860
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
    asm volatile(
      ca:	0ef8                	addi	a4,sp,860
      cc:	0000                	unimp
      ce:	0f7e                	slli	t5,t5,0x1f
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
    for(i=0;i<(length/3);i++) {
      d6:	7e7a                	flw	ft8,188(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	8700000f          	0x8700000f
      dc:	0200000f          	fence	r,unknown
      e0:	7d00                	flw	fs0,56(a0)
    int line[size_b][size_a + size_b];
      e2:	8700                	0x8700
      e4:	cc00000f          	0xcc00000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	0300000f          	fence	rw,unknown
    int line[size_b][size_a + size_b];
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	0fcc                	addi	a1,sp,980
      f2:	0000                	unimp
      f4:	0fce                	slli	t6,t6,0x13
      f6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
      fc:	ce7a                	sw	t5,28(sp)
      fe:	d800000f          	0xd800000f
     102:	0300000f          	fence	rw,unknown
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    int pola[size_a];
     112:	0ec8                	addi	a0,sp,852
     114:	0000                	unimp
    int line[size_b][size_a + size_b];
     116:	0f02                	c.slli64	t5
    int pola[size_a];
     118:	0000                	unimp
    int line[size_b][size_a + size_b];
     11a:	c4910003          	lb	zero,-951(sp)
    int pola[size_a];
     11e:	027c                	addi	a5,sp,268
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     120:	0c00000f          	fence	io,unknown
    int polb[size_b];
     124:	0200000f          	fence	r,unknown
     128:	7e00                	flw	fs0,56(a2)
    int pola[size_a];
     12a:	0c00                	addi	s0,sp,528
     12c:	c600000f          	0xc600000f
            line[i][j] = 0;
     130:	0200000f          	fence	r,unknown
    int polb[size_b];
     134:	8200                	0x8200
     136:	c600                	sw	s0,8(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	cc00000f          	0xcc00000f
    int line[size_b][size_a + size_b];
     13c:	0300000f          	fence	rw,unknown
    int pola[size_a];
     140:	9100                	0x9100
    int polb[size_b];
     142:	7cc4                	flw	fs1,60(s1)
            line[i][j] = 0;
     144:	0fcc                	addi	a1,sp,980
     146:	0000                	unimp
     148:	0fce                	slli	t6,t6,0x13
    for (i = 0; i < size_b; ++i){
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
            product[j] = 0;
     150:	ce7c                	sw	a5,92(a2)
     152:	d800000f          	0xd800000f
    for (i = 0; i < size_b; ++i){
     156:	0200000f          	fence	r,unknown
    for (i = 0; i < size_a; ++i){
     15a:	8200                	0x8200
	...
    array_mod(pola,mod,size_a);
     164:	c800                	sw	s0,16(s0)
     166:	000e                	c.slli	zero,0x3
     168:	3600                	fld	fs0,40(a2)
    for (i = 0; i < size_b; ++i){
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	0f36                	slli	t5,t5,0xd
    array_mod(polb,mod,size_b);
     174:	0000                	unimp
     176:	0f3c                	addi	a5,sp,920
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
    if(star_mult == 1){
     17e:	0f3c                	addi	a5,sp,920
     180:	0000                	unimp
     182:	0f65                	addi	t5,t5,25
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	0f65                	addi	t5,t5,25
     18c:	0000                	unimp
     18e:	0fcc                	addi	a1,sp,980
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
        for (j = size_b -1; j >= 0; j = j-1){
     196:	cc7e                	sw	t6,24(sp)
     198:	ce00000f          	0xce00000f
            for (k = size_a-1; k >= 0; k = k-1 ){
     19c:	0300000f          	fence	rw,unknown
            product[j] = 0;
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
            line[i][j] = 0;
     1a4:	0fce                	slli	t6,t6,0x13
     1a6:	0000                	unimp
            product[j] = 0;
     1a8:	0fd8                	addi	a4,sp,980
     1aa:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	ea00                	fsw	fs0,16(a2)
     1ba:	000e                	c.slli	zero,0x3
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	ee00                	fsw	fs0,24(a2)
     1be:	000e                	c.slli	zero,0x3
        pola[i] = a[i];
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	929f 000f 9c00      	0x9c00000f929f
     1ca:	0200000f          	fence	r,unknown
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
        polb[i] = b[i];
     1d6:	0000                	unimp
     1d8:	de00                	sw	s0,56(a2)
     1da:	f600000b          	0xf600000b
     1de:	0100000b          	0x100000b
     1e2:	5a00                	lw	s0,48(a2)
    for (i = 0; i < size_b; ++i){
     1e4:	0bf6                	slli	s7,s7,0x1d
    if(star_mult == 1){
     1e6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     1e8:	0c5c                	addi	a5,sp,532
     1ea:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1ec:	0001                	nop
    for (i = 0; i < size_b; ++i){
     1ee:	5c58                	lw	a4,60(s0)
     1f0:	000c                	0xc
     1f2:	6800                	flw	fs0,16(s0)
     1f4:	000c                	0xc
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
    for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	9f7f                	0x9f7f
     1fc:	0c68                	addi	a0,sp,540
     1fe:	0000                	unimp
    array_mod(product,mod,(size_a+size_b-1));
     200:	0c6e                	slli	s8,s8,0x1b
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0c6e                	slli	s8,s8,0x1b
}
     20c:	0000                	unimp
     20e:	0ca4                	addi	s1,sp,600
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	de00                	sw	s0,56(a2)
     21e:	0000000b          	0xb
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0c00                	addi	s0,sp,528
     22a:	0000                	unimp
     22c:	0c66                	slli	s8,s8,0x19
     22e:	0000                	unimp
     230:	0001                	nop
     232:	6665                	lui	a2,0x19
     234:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     236:	6e00                	flw	fs0,24(a2)
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	6e9f 000c a400      	0xa400000c6e9f
            for (k = size_a-1; k >= 0; k = k-1 ){
     246:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
        for (j = size_b -1; j >= 0; j = j-1){
     254:	0bde                	slli	s7,s7,0x17
     256:	0000                	unimp
     258:	0bf8                	addi	a4,sp,476
     25a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     25c:	0001                	nop
     25e:	f85c                	fsw	fa5,52(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     260:	6000000b          	0x6000000b
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0c60                	addi	s0,sp,540
     26c:	0000                	unimp
     26e:	0c6e                	slli	s8,s8,0x1b
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0c6e                	slli	s8,s8,0x1b
            for (k = size_a-1; k >= 0; k = k-1 ){
     27a:	0000                	unimp
     27c:	0ca4                	addi	s1,sp,600
        for (j = size_b -1; j >= 0; j = j-1){
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     286:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     288:	0000                	unimp
     28a:	de00                	sw	s0,56(a2)
            line[i][j] = line[i][j] % mod;
     28c:	fa00000b          	0xfa00000b
     290:	0100000b          	0x100000b
        for(j = 0; j < size_a + size_b -1; ++j){
     294:	5d00                	lw	s0,56(a0)
     296:	0bfa                	slli	s7,s7,0x1e
    for (i = 0; i < size_b; ++i){
     298:	0000                	unimp
     29a:	00000c13          	li	s8,0
     29e:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	135a                	slli	t1,t1,0x36
     2a2:	000c                	0xc
            product[j] += line[i][j];
     2a4:	a400                	fsd	fs0,8(s0)
     2a6:	000c                	0xc
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
        for(i = 0; i < size_b; ++i){
     2ae:	009f 0000 0000      	0x9f
            product[j] += line[i][j];
     2b4:	0000                	unimp
     2b6:	de00                	sw	s0,56(a2)
     2b8:	0200000b          	0x200000b
        for(i = 0; i < size_b; ++i){
     2bc:	000c                	0xc
     2be:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0c02                	c.slli64	s8
     2c4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2c6:	0c6a                	slli	s8,s8,0x1a
     2c8:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ca:	0001                	nop
     2cc:	000c6a67          	0xc6a67
    int line[size_b][size_a + size_b];
     2d0:	6e00                	flw	fs0,24(a2)
     2d2:	000c                	0xc
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	5e01                	li	t3,-32
     2da:	6e9f 000c a400      	0xa400000c6e9f
    int line[size_b][size_a + size_b];
     2e0:	000c                	0xc
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	0bde                	slli	s7,s7,0x17
     2f0:	0000                	unimp
     2f2:	00000c13          	li	s8,0
    int pola[size_a];
     2f6:	0001                	nop
     2f8:	135f 000c a400      	0xa400000c135f
    int line[size_b][size_a + size_b];
     2fe:	000c                	0xc
     300:	0400                	addi	s0,sp,512
    int pola[size_a];
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	de00                	sw	s0,56(a2)
    int polb[size_b];
     310:	1300000b          	0x1300000b
     314:	000c                	0xc
    int pola[size_a];
     316:	0100                	addi	s0,sp,128
    int polb[size_b];
     318:	6000                	flw	fs0,0(s0)
     31a:	00000c13          	li	s8,0
     31e:	0c64                	addi	s1,sp,540
    for (i = 0; i < size_b; ++i){
     320:	0000                	unimp
     322:	0001                	nop
     324:	6464                	flw	fs1,76(s0)
            product2[j] = 0;
     326:	000c                	0xc
     328:	6e00                	flw	fs0,24(a2)
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
    for(i = 0; i < size_a; ++i){
     332:	6e9f 000c a400      	0xa400000c6e9f
    for(i = 0; i < size_b; ++i){
     338:	000c                	0xc
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
    if(star_mult == 1){
     346:	0c14                	addi	a3,sp,528
     348:	0000                	unimp
     34a:	0c21                	addi	s8,s8,8
     34c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
            for (k = size_a-1; k >= 0; k = k-1 ){
     352:	0000                	unimp
     354:	0000                	unimp
            product2[j] = 0;
     356:	0000                	unimp
     358:	2400                	fld	fs0,8(s0)
     35a:	000c                	0xc
            line[i][j] = 0;
     35c:	4200                	lw	s0,0(a2)
     35e:	000c                	0xc
            product2[j] = 0;
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     364:	0c42                	slli	s8,s8,0x10
     366:	0000                	unimp
     368:	0c45                	addi	s8,s8,17
     36a:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     36c:	0001                	nop
     36e:	6e5c                	flw	fa5,28(a2)
     370:	000c                	0xc
     372:	9200                	0x9200
        for(j = 0; j < size_a + size_b -1; ++j){
     374:	000c                	0xc
     376:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0c46                	slli	s8,s8,0x11
     384:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     386:	0c51                	addi	s8,s8,20
        pola[i] = a[i];
     388:	0000                	unimp
     38a:	0001                	nop
    for(i = 0; i < size_a; ++i){
     38c:	005a                	c.slli	zero,0x16
        polb[i] = b[i];
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	5200                	lw	s0,32(a2)
     396:	000c                	0xc
     398:	6e00                	flw	fs0,24(a2)
     39a:	000c                	0xc
    for(i = 0; i < size_b; ++i){
     39c:	0100                	addi	s0,sp,128
        polb[i] = b[i];
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0c92                	slli	s9,s9,0x4
    for(i = 0; i < size_b; ++i){
     3a2:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     3a4:	0ca4                	addi	s1,sp,600
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	2400                	fld	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b6:	2a00                	fld	fs0,16(a2)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3bc:	5900                	lw	s0,48(a0)
     3be:	0c2a                	slli	s8,s8,0xa
        for (j = size_b -1; j >= 0; j = j-1){
     3c0:	0000                	unimp
     3c2:	0c36                	slli	s8,s8,0xd
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	365d                	jal	ffffff6e <_stack_start+0xfffeff6e>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	000c                	0xc
        array_add(product2,line[i],size_a+size_b-1);
     3cc:	3c00                	fld	fs0,56(s0)
     3ce:	000c                	0xc
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
    for(i=0;i<size_b;++i){
     3d4:	0c52                	slli	s8,s8,0x14
     3d6:	0000                	unimp
}
     3d8:	0c5e                	slli	s8,s8,0x17
     3da:	0000                	unimp
     3dc:	0001                	nop
     3de:	6e59                	lui	t3,0x16
     3e0:	000c                	0xc
     3e2:	7800                	flw	fs0,48(s0)
     3e4:	000c                	0xc
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0c78                	addi	a4,sp,540
     3ec:	0000                	unimp
     3ee:	0c7e                	slli	s8,s8,0x1f
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	7e9f 000c 8000      	0x8000000c7e9f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fc:	000c                	0xc
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0c80                	addi	s0,sp,592
     404:	0000                	unimp
     406:	0c92                	slli	s9,s9,0x4
     408:	0000                	unimp
     40a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     40c:	925e                	add	tp,tp,s7
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     40e:	000c                	0xc
     410:	9c00                	0x9c00
     412:	000c                	0xc
     414:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	5900                	lw	s0,48(a0)
     418:	0c9c                	addi	a5,sp,592
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0000                	unimp
     41c:	0ca2                	slli	s9,s9,0x8
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
        array_add(product2,line[i],size_a+size_b-1);
     424:	a29f 000c a400      	0xa400000ca29f
    for(i=0;i<size_b;++i){
     42a:	000c                	0xc
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
    int v[size_N];
     438:	0b58                	addi	a4,sp,404
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     43a:	0000                	unimp
     43c:	0b6c                	addi	a1,sp,412
     43e:	0000                	unimp
     440:	0001                	nop
     442:	6c5a                	flw	fs8,148(sp)
     444:	b600000b          	0xb600000b
     448:	0100000b          	0x100000b
     44c:	5800                	lw	s0,48(s0)
     44e:	0bb6                	slli	s7,s7,0xd
     450:	0000                	unimp
     452:	0bde                	slli	s7,s7,0x17
     454:	0000                	unimp
    int v[size_N];
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    int num_temp[size_N];
     464:	0b58                	addi	a4,sp,404
    int denum_temp[size_D];
     466:	0000                	unimp
     468:	0b74                	addi	a3,sp,412
     46a:	0000                	unimp
     46c:	0001                	nop
    int num_temp[size_N];
     46e:	000b745b          	0xb745b
    int denum_temp[size_D];
     472:	c400                	sw	s0,8(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	0100000b          	0x100000b
     478:	6200                	flw	fs0,0(a2)
     47a:	0bc4                	addi	s1,sp,468
    int v[size_N];
     47c:	0000                	unimp
     47e:	0bcc                	addi	a1,sp,468
    int denum_temp[size_D];
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    for (i = 0; i < size_N; ++i){
     488:	0bcc                	addi	a1,sp,468
     48a:	0000                	unimp
    array_mod(num_temp,mod,size_N);
     48c:	0bde                	slli	s7,s7,0x17
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
    for (i = 0; i < size_D; ++i) {
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
    array_mod(denum_temp,mod,size_D);
     49a:	5800                	lw	s0,48(s0)
     49c:	6800000b          	0x6800000b
     4a0:	0100000b          	0x100000b
    for (i = 0; i < size_N; ++i){
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0b68                	addi	a0,sp,412
    for (i = size_D-1; i >= 0; i = i-1){
     4a8:	0000                	unimp
     4aa:	0b9e                	slli	s7,s7,0x7
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	9e59                	0x9e59
     4b2:	a100000b          	0xa100000b
    for (i = 0; i < size_N; ++i){
     4b6:	0100000b          	0x100000b
    for (u = 0; u < mod; ++u){
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	0ba1                	addi	s7,s7,8
     4be:	0000                	unimp
     4c0:	0bde                	slli	s7,s7,0x17
        num_temp[i] = num[i];
     4c2:	0000                	unimp
     4c4:	0004                	0x4
     4c6:	9f5c01f3          	0x9f5c01f3
	...
    for (i = 0; i < size_N; ++i){
     4d2:	0b58                	addi	a4,sp,404
        denum_temp[i] = denum[i];
     4d4:	0000                	unimp
     4d6:	0b7f                	0xb7f
     4d8:	0000                	unimp
     4da:	0001                	nop
     4dc:	7f5d                	lui	t5,0xffff7
     4de:	9a00000b          	0x9a00000b
     4e2:	0100000b          	0x100000b
        q[i] = 0;
     4e6:	6300                	flw	fs0,0(a4)
     4e8:	0b9a                	slli	s7,s7,0x6
     4ea:	0000                	unimp
     4ec:	0bde                	slli	s7,s7,0x17
        v[i] = 0;
     4ee:	0000                	unimp
        q[i] = 0;
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
    for (i = size_D-1; i >= 0; i = i-1){
     4fe:	0b58                	addi	a4,sp,404
     500:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     502:	0b7f                	0xb7f
     504:	0000                	unimp
     506:	0001                	nop
     508:	7f5e                	flw	ft10,244(sp)
     50a:	c800000b          	0xc800000b
    for (u = 0; u < mod; ++u){
     50e:	0100000b          	0x100000b
    for (i = size_N-1; i >= 0; i = i-1){
     512:	6400                	flw	fs0,8(s0)
     514:	0bc8                	addi	a0,sp,468
     516:	0000                	unimp
     518:	0bcc                	addi	a1,sp,468
     51a:	0000                	unimp
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
    while (d >= d2){
     522:	0bcc                	addi	a1,sp,468
    for(i = 0; i < size_N; ++i){
     524:	0000                	unimp
        result[i] = q[i];
     526:	0bde                	slli	s7,s7,0x17
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
    for(i = 0; i < size_N; ++i){
     52e:	0000                	unimp
     530:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     532:	0000                	unimp
     534:	9a00                	0x9a00
        result[i] = num_temp[i-size_N];
     536:	a100000b          	0xa100000b
     53a:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     53e:	5a00                	lw	s0,48(a2)
     540:	0ba1                	addi	s7,s7,8
}
     542:	0000                	unimp
     544:	0bc6                	slli	s7,s7,0x11
     546:	0000                	unimp
     548:	0001                	nop
     54a:	000bcc63          	bltz	s7,562 <polydiv+0x132>
     54e:	de00                	sw	s0,56(a2)
     550:	0100000b          	0x100000b
     554:	6300                	flw	fs0,0(a4)
	...
     55e:	0bb0                	addi	a2,sp,472
     560:	0000                	unimp
     562:	0bc2                	slli	s7,s7,0x10
     564:	0000                	unimp
     566:	0001                	nop
     568:	cc59                	beqz	s0,606 <polydiv+0x1d6>
     56a:	d600000b          	0xd600000b
        v[(d-d2)] = u*r_d;
     56e:	0100000b          	0x100000b
     572:	5900                	lw	s0,48(a0)
     574:	0bd6                	slli	s7,s7,0x15
     576:	0000                	unimp
    array_mod(v,mod,size_N);
     578:	0bdc                	addi	a5,sp,468
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
     580:	dc9f 000b de00      	0xde00000bdc9f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     586:	0100000b          	0x100000b
     58a:	5900                	lw	s0,48(a0)
	...
     594:	0866                	slli	a6,a6,0x19
    array_mod(product,mod,size_N);
     596:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     598:	08aa                	slli	a7,a7,0xa
     59a:	0000                	unimp
     59c:	0001                	nop
     59e:	aa5a                	fsd	fs6,272(sp)
    array_mod(num_temp,mod,size_N);
     5a0:	0008                	0x8
     5a2:	6c00                	flw	fs0,24(s0)
     5a4:	000a                	c.slli	zero,0x2
     5a6:	0100                	addi	s0,sp,128
    array_add(q,v,size_N);
     5a8:	6200                	flw	fs0,0(a2)
     5aa:	0a6c                	addi	a1,sp,284
     5ac:	0000                	unimp
     5ae:	0a90                	addi	a2,sp,336
    array_mod(q,mod,size_N);
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5b6:	909f 000a b000      	0xb000000a909f
        for (i = size_N-1; i >= 0; i = i-1){
     5bc:	000a                	c.slli	zero,0x2
     5be:	0400                	addi	s0,sp,512
     5c0:	f300                	fsw	fs0,32(a4)
     5c2:	5a01                	li	s4,-32
     5c4:	b09f 000a 4400      	0x4400000ab09f
            num_temp[i] = num_temp[i] - product[i];
     5ca:	0100000b          	0x100000b
     5ce:	6200                	flw	fs0,0(a2)
     5d0:	0b44                	addi	s1,sp,404
     5d2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5d4:	0b58                	addi	a4,sp,404
     5d6:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
        for (i = size_N-1; i >= 0; i = i-1){
     5e2:	0000                	unimp
     5e4:	6600                	flw	fs0,8(a2)
            v[i] = 0;
     5e6:	0008                	0x8
     5e8:	a200                	fsd	fs0,0(a2)
     5ea:	0008                	0x8
     5ec:	0100                	addi	s0,sp,128
     5ee:	5b00                	lw	s0,48(a4)
        for (i = 0; i < size_N; ++i){
     5f0:	08a2                	slli	a7,a7,0x8
     5f2:	0000                	unimp
     5f4:	0a98                	addi	a4,sp,336
     5f6:	0000                	unimp
        result[i] = q[i];
     5f8:	0001                	nop
     5fa:	000a9867          	0xa9867
     5fe:	b000                	fsd	fs0,32(s0)
     600:	000a                	c.slli	zero,0x2
     602:	0400                	addi	s0,sp,512
    for(i = 0; i < size_N; ++i){
     604:	f300                	fsw	fs0,32(a4)
        result[i] = q[i];
     606:	5b01                	li	s6,-32
    for(i = 0; i < size_N; ++i){
     608:	b09f 000a 5800      	0x5800000ab09f
        result[i] = num_temp[i-size_N];
     60e:	0100000b          	0x100000b
     612:	6700                	flw	fs0,8(a4)
	...
    int ri_2[size]; // MX-ring poly, a
     61c:	0866                	slli	a6,a6,0x19
     61e:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     620:	08a6                	slli	a7,a7,0x9
    int ri_2[size]; // MX-ring poly, a
     622:	0000                	unimp
     624:	0001                	nop
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     626:	a65c                	fsd	fa5,136(a2)
     628:	0008                	0x8
     62a:	9400                	0x9400
     62c:	000a                	c.slli	zero,0x2
     62e:	0100                	addi	s0,sp,128
     630:	6600                	flw	fs0,8(a2)
     632:	0a94                	addi	a3,sp,336
     634:	0000                	unimp
     636:	0ab0                	addi	a2,sp,344
     638:	0000                	unimp
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
     640:	0ab0                	addi	a2,sp,344
    int ri_2[size]; // MX-ring poly, a
     642:	0000                	unimp
     644:	0b58                	addi	a4,sp,404
     646:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     648:	0001                	nop
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
    int ri[size];
     64e:	0000                	unimp
     650:	0000                	unimp
     652:	f400                	fsw	fs0,40(s0)
    int ti_1[size]; // ti_1[0] = 1
     654:	0009                	c.nop	2
     656:	fe00                	fsw	fs0,56(a2)
     658:	0009                	c.nop	2
    int ti[size];
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
    int temp[size];
     666:	0a0e                	slli	s4,s4,0x3
     668:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     66a:	00000a2b          	0xa2b
    int ri_2[size]; // MX-ring poly, a
     66e:	0001                	nop
     670:	105a                	c.slli	zero,0x36
    int temp[size];
     672:	2400000b          	0x2400000b
    for (i = 0; i < size; ++i) {
     676:	0100000b          	0x100000b
        ti_2[i] = 0;
     67a:	5a00                	lw	s0,48(a2)
	...
    ti_1[0] = 1;
     684:	0a2c                	addi	a1,sp,280
     686:	0000                	unimp
     688:	00000a3f 245a0001 	0x245a000100000a3f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     690:	3400000b          	0x3400000b
            ti[i] = ti_2[i] - temp[i];
     694:	0100000b          	0x100000b
     698:	5a00                	lw	s0,48(a2)
	...
    array_mod(ri_1,mod,size);
     6a2:	0a40                	addi	s0,sp,276
     6a4:	0000                	unimp
     6a6:	0a5c                	addi	a5,sp,276
     6a8:	0000                	unimp
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6aa:	0001                	nop
     6ac:	345a                	fld	fs0,432(sp)
     6ae:	4400000b          	0x4400000b
     6b2:	0100000b          	0x100000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6b6:	5a00                	lw	s0,48(a2)
	...
     6c0:	09a8                	addi	a0,sp,216
     6c2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6c4:	0a74                	addi	a3,sp,284
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
    array_mod(temp,mod,size);
     6ca:	0072                	c.slli	zero,0x1c
     6cc:	0a74                	addi	a3,sp,284
     6ce:	0000                	unimp
     6d0:	0a8c                	addi	a1,sp,336
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
     6d6:	0084                	addi	s1,sp,64
     6d8:	0a8c                	addi	a1,sp,336
     6da:	0000                	unimp
     6dc:	0a90                	addi	a2,sp,336
        for (i = 0; i < N + 1; ++i) {
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
    array_mod(qi_1,mod,size);
     6e4:	0085                	addi	ra,ra,1
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
     6f2:	0a90                	addi	a2,sp,336
     6f4:	0000                	unimp
     6f6:	0ab0                	addi	a2,sp,344
     6f8:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6fa:	00910013          	addi	zero,sp,9
     6fe:	235a01f3          	0x235a01f3
    array_mod(temp,mod,size);
     702:	3201                	jal	2 <__DYNAMIC+0x2>
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
        for (i = 0; i < N + 1; ++i) {
     70a:	0a1c                	addi	a5,sp,272
     70c:	01f0                	addi	a2,sp,204
     70e:	b01c                	fsd	fa5,32(s0)
    array_mod(ti,mod,size);
     710:	000a                	c.slli	zero,0x2
     712:	5800                	lw	s0,48(s0)
     714:	0200000b          	0x200000b
        for (i = 0; i < N + 1; ++i) {
     718:	7200                	flw	fs0,32(a2)
	...
    while (controlR != 0) {
     722:	ac00                	fsd	fs0,24(s0)
        for (j = 0; j < mod; ++j) {
     724:	0009                	c.nop	2
            if (((ri_2[0] * j) % mod) == 1)
     726:	ae00                	fsd	fs0,24(a2)
        for (j = 0; j < mod; ++j) {
     728:	0009                	c.nop	2
     72a:	0200                	addi	s0,sp,256
     72c:	3100                	fld	fs0,32(a0)
     72e:	ae9f 0009 b400      	0xb4000009ae9f
        for (i = 0; i < N + 1; ++i) {
     734:	0009                	c.nop	2
     736:	0100                	addi	s0,sp,128
    }
     738:	5f00                	lw	s0,56(a4)
     73a:	09b8                	addi	a4,sp,216
     73c:	0000                	unimp
     73e:	09be                	slli	s3,s3,0xf
     740:	0000                	unimp
     742:	0001                	nop
     744:	c65f 0009 d400      	0xd4000009c65f
     74a:	0009                	c.nop	2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	09de                	slli	s3,s3,0x17
     752:	0000                	unimp
     754:	000009f3          	0x9f3
     758:	0001                	nop
     75a:	f45f 0009 fe00      	0xfe000009f45f
     760:	0009                	c.nop	2
        ri_2[i] = polyR[i];
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	09fe                	slli	s3,s3,0x1f
     76c:	0000                	unimp
    for (i = 0; i < size; ++i) {
     76e:	0a0d                	addi	s4,s4,3
        ri_2[i] = polyR[i];
     770:	0000                	unimp
     772:	0001                	nop
        ri_1[i] = polyf[i];
     774:	0e5f 000a 1e00      	0x1e00000a0e5f
     77a:	000a                	c.slli	zero,0x2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
        ti_2[i] = 0;
     784:	0a1e                	slli	s4,s4,0x7
     786:	0000                	unimp
     788:	0a2c                	addi	a1,sp,280
     78a:	0000                	unimp
        ti_1[i] = 0;
     78c:	0001                	nop
     78e:	2c59                	jal	a24 <generate_keys+0x1be>
     790:	000a                	c.slli	zero,0x2
     792:	3400                	fld	fs0,40(s0)
    for (i = 0; i < size; ++i) {
     794:	000a                	c.slli	zero,0x2
     796:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     798:	3000                	fld	fs0,32(s0)
     79a:	349f 000a 3c00      	0x3c00000a349f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a0:	000a                	c.slli	zero,0x2
     7a2:	0100                	addi	s0,sp,128
            ri[i - (N + 1)] = res[i];
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0a40                	addi	s0,sp,276
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a8:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     7aa:	0a52                	slli	s4,s4,0x14
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
     7b4:	529f 000a 6c00      	0x6c00000a529f
        for (i = 0; i < N + 1; ++i) {
     7ba:	000a                	c.slli	zero,0x2
            temp[i] = ri_2[i] - ri[i];
     7bc:	0100                	addi	s0,sp,128
     7be:	6800                	flw	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     7c0:	0a6c                	addi	a1,sp,284
     7c2:	0000                	unimp
            qi_1[i] = res1[i];
     7c4:	0aec                	addi	a1,sp,348
     7c6:	0000                	unimp
     7c8:	0001                	nop
     7ca:	ec5f 000a ee00      	0xee00000aec5f
        for (i = 0; i < N + 1; ++i) {
     7d0:	000a                	c.slli	zero,0x2
            qi_1[i] = res1[i];
     7d2:	0300                	addi	s0,sp,384
        for (i = 0; i < N + 1; ++i) {
     7d4:	7f00                	flw	fs0,56(a4)
            temp[i] = res2[i];
     7d6:	9f7f                	0x9f7f
     7d8:	0aee                	slli	s5,s5,0x1b
     7da:	0000                	unimp
     7dc:	0b10                	addi	a2,sp,400
     7de:	0000                	unimp
     7e0:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     7e2:	105f 000b 2000      	0x2000000b105f
            ti[i] = ti_2[i] - temp[i];
     7e8:	0100000b          	0x100000b
     7ec:	5900                	lw	s0,48(a0)
     7ee:	0b20                	addi	s0,sp,408
     7f0:	0000                	unimp
     7f2:	0b22                	slli	s6,s6,0x8
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	229f 000b 2400      	0x2400000b229f
        for (i = 0; i < N + 1; ++i) {
     800:	0100000b          	0x100000b
            ri_2[i] = ri_1[i];
     804:	5900                	lw	s0,48(a0)
     806:	0b24                	addi	s1,sp,408
     808:	0000                	unimp
     80a:	0b28                	addi	a0,sp,408
        for (i = 0; i < N + 1; ++i) {
     80c:	0000                	unimp
            ri_2[i] = ri_1[i];
     80e:	0001                	nop
            ri_1[i] = ri[i];
     810:	285e                	fld	fa6,464(sp)
     812:	3200000b          	0x3200000b
            ti_2[i] = ti_1[i];
     816:	0300000b          	0x300000b
            ri_1[i] = ri[i];
     81a:	7e00                	flw	fs0,56(a2)
            ti_2[i] = ti_1[i];
     81c:	9f7f                	0x9f7f
     81e:	0b32                	slli	s6,s6,0xc
     820:	0000                	unimp
     822:	0b34                	addi	a3,sp,408
            controlR += ri[i];
     824:	0000                	unimp
            ti_2[i] = ti_1[i];
     826:	0001                	nop
     828:	345e                	fld	fs0,496(sp)
            ti_1[i] = ti[i];
     82a:	4400000b          	0x4400000b
     82e:	0100000b          	0x100000b
              qi_1[i] = 0;
     832:	6800                	flw	fs0,16(s0)
     834:	0b44                	addi	s1,sp,404
     836:	0000                	unimp
     838:	0b54                	addi	a3,sp,404
        for (i = 0; i < N + 1; ++i) {
     83a:	0000                	unimp
     83c:	0001                	nop
            if (((ri_2[0] * j) % mod) == 1)
     83e:	545f 000b 5600      	0x5600000b545f
     844:	0300000b          	0x300000b
     848:	7f00                	flw	fs0,56(a4)
     84a:	9f7f                	0x9f7f
     84c:	0b56                	slli	s6,s6,0x15
        for (j = 0; j < mod; ++j) {
     84e:	0000                	unimp
     850:	0b58                	addi	a4,sp,404
            ti_2[i] = (ti_2[i] * j) % mod;
     852:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
            ti_2[i] = (ti_2[i] * j) % mod;
     85c:	0000                	unimp
     85e:	7000                	flw	fs0,32(s0)
     860:	000a                	c.slli	zero,0x2
     862:	b000                	fsd	fs0,32(s0)
        for (i = 0; i < N + 1; ++i) {
     864:	000a                	c.slli	zero,0x2
int* generate_keys(int N, int p, int q){
     866:	0600                	addi	s0,sp,768
     868:	0300                	addi	s0,sp,384
     86a:	1a04                	addi	s1,sp,304
     86c:	0000                	unimp
     86e:	009f 0000 0000      	0x9f
     874:	0000                	unimp
     876:	a800                	fsd	fs0,16(s0)
     878:	0009                	c.nop	2
     87a:	6c00                	flw	fs0,24(s0)
     87c:	000a                	c.slli	zero,0x2
     87e:	0100                	addi	s0,sp,128
     880:	6200                	flw	fs0,0(a2)
     882:	0a6c                	addi	a1,sp,284
     884:	0000                	unimp
     886:	0a90                	addi	a2,sp,336
     888:	0000                	unimp
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	909f 000a b000      	0xb000000a909f
     894:	000a                	c.slli	zero,0x2
     896:	0400                	addi	s0,sp,512
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
     89c:	b09f 000a 4400      	0x4400000ab09f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8a2:	0100000b          	0x100000b
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0b44                	addi	s1,sp,404
     8aa:	0000                	unimp
     8ac:	0b58                	addi	a4,sp,404
     8ae:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8b0:	7f850003          	lb	zero,2040(a0)
     8b4:	009f 0000 0000      	0x9f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8ba:	0000                	unimp
     8bc:	1c00                	addi	s0,sp,560
     8be:	0006                	c.slli	zero,0x1
     8c0:	9a00                	0x9a00
     8c2:	0006                	c.slli	zero,0x1
     8c4:	0100                	addi	s0,sp,128
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	069a                	slli	a3,a3,0x6
     8ca:	0000                	unimp
     8cc:	0762                	slli	a4,a4,0x18
     8ce:	0000                	unimp
     8d0:	0004                	0x4
     8d2:	9f5a01f3          	0x9f5a01f3
     8d6:	0762                	slli	a4,a4,0x18
     8d8:	0000                	unimp
     8da:	0798                	addi	a4,sp,960
     8dc:	0000                	unimp
     8de:	0001                	nop
     8e0:	985a                	add	a6,a6,s6
     8e2:	66000007          	0x66000007
     8e6:	0008                	0x8
     8e8:	0400                	addi	s0,sp,512
     8ea:	f300                	fsw	fs0,32(a4)
     8ec:	5a01                	li	s4,-32
     8ee:	009f 0000 0000      	0x9f
     8f4:	0000                	unimp
     8f6:	1c00                	addi	s0,sp,560
     8f8:	0006                	c.slli	zero,0x1
     8fa:	9a00                	0x9a00
     8fc:	0006                	c.slli	zero,0x1
     8fe:	0100                	addi	s0,sp,128
     900:	5b00                	lw	s0,48(a4)
     902:	069a                	slli	a3,a3,0x6
     904:	0000                	unimp
     906:	0762                	slli	a4,a4,0x18
     908:	0000                	unimp
     90a:	0004                	0x4
     90c:	9f5b01f3          	0x9f5b01f3
     910:	0762                	slli	a4,a4,0x18
     912:	0000                	unimp
     914:	0798                	addi	a4,sp,960
     916:	0000                	unimp
     918:	0001                	nop
     91a:	0007985b          	0x7985b
     91e:	6600                	flw	fs0,8(a2)
     920:	0008                	0x8
     922:	0400                	addi	s0,sp,512
     924:	f300                	fsw	fs0,32(a4)
    int polyR[N+1];
     926:	5b01                	li	s6,-32
     928:	009f 0000 0000      	0x9f
     92e:	0000                	unimp
     930:	1c00                	addi	s0,sp,560
     932:	0006                	c.slli	zero,0x1
     934:	8000                	0x8000
     936:	0006                	c.slli	zero,0x1
     938:	0100                	addi	s0,sp,128
    polyR[N] = 1;
     93a:	5c00                	lw	s0,56(s0)
     93c:	0680                	addi	s0,sp,832
     93e:	0000                	unimp
     940:	0756                	slli	a4,a4,0x15
     942:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     944:	0001                	nop
     946:	0007566b          	0x7566b
     94a:	6200                	flw	fs0,0(a2)
     94c:	04000007          	0x4000007
     950:	f300                	fsw	fs0,32(a4)
     952:	5c01                	li	s8,-32
     954:	629f 0007 6600      	0x66000007629f
     95a:	0008                	0x8
     95c:	0100                	addi	s0,sp,128
     95e:	6b00                	flw	fs0,16(a4)
	...
     968:	061c                	addi	a5,sp,768
     96a:	0000                	unimp
     96c:	0680                	addi	s0,sp,832
     96e:	0000                	unimp
     970:	0001                	nop
     972:	805d                	srli	s0,s0,0x17
     974:	0006                	c.slli	zero,0x1
     976:	4200                	lw	s0,0(a2)
     978:	01000007          	0x1000007
     97c:	5900                	lw	s0,48(a0)
     97e:	0742                	slli	a4,a4,0x10
     980:	0000                	unimp
     982:	0762                	slli	a4,a4,0x18
     984:	0000                	unimp
     986:	0004                	0x4
     988:	9f5d01f3          	0x9f5d01f3
     98c:	0762                	slli	a4,a4,0x18
     98e:	0000                	unimp
     990:	0866                	slli	a6,a6,0x19
     992:	0000                	unimp
     994:	0001                	nop
     996:	0059                	c.nop	22
     998:	0000                	unimp
     99a:	0000                	unimp
     99c:	0000                	unimp
     99e:	3800                	fld	fs0,48(s0)
     9a0:	62000007          	0x62000007
     9a4:	06000007          	0x6000007
    polyR[0] = -1;
     9a8:	0300                	addi	s0,sp,384
     9aa:	1874                	addi	a3,sp,60
    for(i = 1; i < N; ++i){
     9ac:	0000                	unimp
     9ae:	009f 0000 0000      	0x9f
    for (i = N; i < 55; ++i ){
     9b4:	0000                	unimp
     9b6:	7400                	flw	fs0,40(s0)
     9b8:	0006                	c.slli	zero,0x1
     9ba:	4400                	lw	s0,8(s0)
    for(i = 0; i < N; ++i){
     9bc:	01000007          	0x1000007
        random_keys[i] = f[i];
     9c0:	6200                	flw	fs0,0(a2)
     9c2:	0744                	addi	s1,sp,900
     9c4:	0000                	unimp
    for(i = 0; i < N; ++i){
     9c6:	0756                	slli	a4,a4,0x15
     9c8:	0000                	unimp
     9ca:	7f8b0003          	lb	zero,2040(s6)
    for(i = N; i < (2*N); ++i){
     9ce:	569f 0007 6200      	0x62000007569f
     9d4:	06000007          	0x6000007
        random_keys[i] = g[i-N];
     9d8:	f300                	fsw	fs0,32(a4)
     9da:	5c01                	li	s8,-32
     9dc:	1c31                	addi	s8,s8,-20
    for(i = N; i < (2*N); ++i){
     9de:	629f 0007 6600      	0x66000007629f
    for(i = (2*N); i < (3*N); ++i){
     9e4:	0008                	0x8
     9e6:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     9e8:	6200                	flw	fs0,0(a2)
	...
     9f2:	0674                	addi	a3,sp,780
    for(i = (2*N); i < (3*N); ++i){
     9f4:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     9f6:	0680                	addi	s0,sp,832
     9f8:	0000                	unimp
     9fa:	0002                	c.slli64	zero
     9fc:	9f30                	0x9f30
    for(i = (2*N); i < (3*N); ++i){
     9fe:	0680                	addi	s0,sp,832
     a00:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     a02:	069a                	slli	a3,a3,0x6
     a04:	0000                	unimp
     a06:	0001                	nop
     a08:	b65e                	fsd	fs7,296(sp)
     a0a:	0006                	c.slli	zero,0x1
     a0c:	ba00                	fsd	fs0,48(a2)
    for(i = (3*N); i < (4*N); ++i){
     a0e:	0006                	c.slli	zero,0x1
     a10:	0100                	addi	s0,sp,128
     a12:	6b00                	flw	fs0,16(a4)
     a14:	06ba                	slli	a3,a3,0xe
        random_keys[i] = fq[i-(3*N)];
     a16:	0000                	unimp
     a18:	06c4                	addi	s1,sp,836
     a1a:	0000                	unimp
     a1c:	0001                	nop
    for(i = (3*N); i < (4*N); ++i){
     a1e:	c65f 0006 d100      	0xd1000006c65f
    fg = polymult2(fq, N, g, N, 0);
     a24:	0006                	c.slli	zero,0x1
     a26:	0100                	addi	s0,sp,128
     a28:	5e00                	lw	s0,56(a2)
     a2a:	06de                	slli	a3,a3,0x17
    for(i = 0; i < (2*N-1); ++i){
     a2c:	0000                	unimp
     a2e:	06e0                	addi	s0,sp,844
     a30:	0000                	unimp
     a32:	0002                	c.slli64	zero
     a34:	9f30                	0x9f30
     a36:	06e0                	addi	s0,sp,844
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a38:	0000                	unimp
     a3a:	000006eb          	0x6eb
     a3e:	0001                	nop
    for(i = (4*N); i < (5*N); ++i){
     a40:	fa5f 0006 fc00      	0xfc000006fa5f
     a46:	0006                	c.slli	zero,0x1
     a48:	0200                	addi	s0,sp,256
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a4a:	3000                	fld	fs0,32(s0)
     a4c:	fc9f 0006 0700      	0x7000006fc9f
    for(i = (4*N); i < (5*N); ++i){
     a52:	01000007          	0x1000007
     a56:	5f00                	lw	s0,56(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     a58:	0708                	addi	a0,sp,896
     a5a:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     a5c:	070c                	addi	a1,sp,896
     a5e:	0000                	unimp
     a60:	0002                	c.slli64	zero
     a62:	9f30                	0x9f30
    for(i = (5*N); i < (6*N+1); ++i){
     a64:	070c                	addi	a1,sp,896
     a66:	0000                	unimp
     a68:	00000717          	auipc	a4,0x0
     a6c:	0001                	nop
     a6e:	185e                	slli	a6,a6,0x37
}
     a70:	1e000007          	0x1e000007
     a74:	02000007          	0x2000007
     a78:	3000                	fld	fs0,32(s0)
     a7a:	1e9f 0007 2800      	0x280000071e9f
     a80:	01000007          	0x1000007
     a84:	5d00                	lw	s0,56(a0)
     a86:	0734                	addi	a3,sp,904
     a88:	0000                	unimp
     a8a:	0770                	addi	a2,sp,908
     a8c:	0000                	unimp
     a8e:	0001                	nop
     a90:	705e                	flw	ft0,244(sp)
     a92:	94000007          	0x94000007
     a96:	03000007          	0x3000007
     a9a:	7e00                	flw	fs0,56(a2)
     a9c:	9f7f                	0x9f7f
     a9e:	0794                	addi	a3,sp,960
     aa0:	0000                	unimp
     aa2:	0798                	addi	a4,sp,960
     aa4:	0000                	unimp
     aa6:	0001                	nop
     aa8:	985e                	add	a6,a6,s7
     aaa:	a2000007          	0xa2000007
     aae:	01000007          	0x1000007
        polyR[i] = 0;
     ab2:	5f00                	lw	s0,56(a4)
     ab4:	07a2                	slli	a5,a5,0x8
     ab6:	0000                	unimp
     ab8:	07a8                	addi	a0,sp,968
    for(i = 1; i < N; ++i){
     aba:	0000                	unimp
     abc:	7f7f0003          	lb	zero,2039(t5) # ffff77f7 <_stack_start+0xfffe77f7>
        f[i] = 0;
     ac0:	a89f 0007 aa00      	0xaa000007a89f
     ac6:	01000007          	0x1000007
     aca:	5f00                	lw	s0,56(a4)
        g[i] = 0;
     acc:	07aa                	slli	a5,a5,0xa
     ace:	0000                	unimp
     ad0:	07bc                	addi	a5,sp,968
     ad2:	0000                	unimp
     ad4:	0001                	nop
    for (i = N; i < 55; ++i ){
     ad6:	bc5e                	fsd	fs7,56(sp)
     ad8:	c0000007          	0xc0000007
        random_keys[i] = f[i];
     adc:	03000007          	0x3000007
     ae0:	7e00                	flw	fs0,56(a2)
     ae2:	9f7f                	0x9f7f
     ae4:	07c0                	addi	s0,sp,964
     ae6:	0000                	unimp
     ae8:	07c4                	addi	s1,sp,964
    for(i = 0; i < N; ++i){
     aea:	0000                	unimp
        random_keys[i] = f[i];
     aec:	0001                	nop
    for(i = 0; i < N; ++i){
     aee:	c45e                	sw	s7,8(sp)
        random_keys[i] = g[i-N];
     af0:	d2000007          	0xd2000007
     af4:	01000007          	0x1000007
     af8:	5f00                	lw	s0,56(a4)
    for(i = N; i < (2*N); ++i){
     afa:	07d2                	slli	a5,a5,0x14
     afc:	0000                	unimp
     afe:	07d4                	addi	a3,sp,964
        random_keys[i] = fp[i-(2*N)];
     b00:	0000                	unimp
     b02:	7f7f0003          	lb	zero,2039(t5)
     b06:	d49f 0007 e400      	0xe4000007d49f
    for(i = (2*N); i < (3*N); ++i){
     b0c:	01000007          	0x1000007
        random_keys[i] = fq[i-(3*N)];
     b10:	5f00                	lw	s0,56(a4)
     b12:	07e4                	addi	s1,sp,972
     b14:	0000                	unimp
     b16:	07e6                	slli	a5,a5,0x19
     b18:	0000                	unimp
     b1a:	7f7f0003          	lb	zero,2039(t5)
    for(i = (3*N); i < (4*N); ++i){
     b1e:	e69f 0007 e800      	0xe8000007e69f
        fg[i] = fg[i]*p;
     b24:	01000007          	0x1000007
    for(i = 0; i < (2*N-1); ++i){
     b28:	5f00                	lw	s0,56(a4)
        fg[i] = fg[i]*p;
     b2a:	07e8                	addi	a0,sp,972
     b2c:	0000                	unimp
     b2e:	07fa                	slli	a5,a5,0x1e
     b30:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     b32:	0001                	nop
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b34:	fa5e                	fsw	fs7,52(sp)
     b36:	fe000007          	0xfe000007
     b3a:	03000007          	0x3000007
     b3e:	7e00                	flw	fs0,56(a2)
    for(i = (4*N); i < (5*N); ++i){
     b40:	9f7f                	0x9f7f
     b42:	07fe                	slli	a5,a5,0x1f
        random_keys[i] = polyR[i-(5*N)];
     b44:	0000                	unimp
     b46:	0802                	c.slli64	a6
     b48:	0000                	unimp
     b4a:	0001                	nop
     b4c:	025e                	slli	tp,tp,0x17
     b4e:	0008                	0x8
     b50:	0e00                	addi	s0,sp,784
    for(i = (5*N); i < (6*N+1); ++i){
     b52:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     b54:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     b56:	5d00                	lw	s0,56(a0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b58:	080e                	slli	a6,a6,0x3
     b5a:	0000                	unimp
     b5c:	083a                	slli	a6,a6,0xe
     b5e:	0000                	unimp
     b60:	7f7d0003          	lb	zero,2039(s10)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b64:	3a9f 0008 3e00      	0x3e0000083a9f
     b6a:	0008                	0x8
     b6c:	0100                	addi	s0,sp,128
     b6e:	5d00                	lw	s0,56(a0)
     b70:	0852                	slli	a6,a6,0x14
     b72:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b74:	0856                	slli	a6,a6,0x15
     b76:	0000                	unimp
     b78:	0001                	nop
     b7a:	565e                	lw	a2,244(sp)
     b7c:	0008                	0x8
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b7e:	6400                	flw	fs0,8(s0)
    temp = polymult(public_key,N,random_val,48,q,0);
     b80:	0008                	0x8
     b82:	0300                	addi	s0,sp,384
     b84:	7e00                	flw	fs0,56(a2)
     b86:	9f7f                	0x9f7f
     b88:	0864                	addi	s1,sp,28
     b8a:	0000                	unimp
     b8c:	0866                	slli	a6,a6,0x19
     b8e:	0000                	unimp
     b90:	0001                	nop
array_add(temp,message,48);
     b92:	005e                	c.slli	zero,0x17
     b94:	0000                	unimp
     b96:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     b98:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b9a:	2800                	fld	fs0,16(s0)
     b9c:	62000007          	0x62000007
array_add(temp,message,48);
     ba0:	01000007          	0x1000007
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ba4:	5f00                	lw	s0,56(a4)
     ba6:	083e                	slli	a6,a6,0xf
     ba8:	0000                	unimp
     baa:	0866                	slli	a6,a6,0x19
     bac:	0000                	unimp
     bae:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     bb0:	005f 0000 0000      	0x5f
     bb6:	0000                	unimp
     bb8:	7200                	flw	fs0,32(a2)
     bba:	0006                	c.slli	zero,0x1
}
     bbc:	4600                	lw	s0,8(a2)
     bbe:	02000007          	0x2000007
     bc2:	8300                	0x8300
     bc4:	6200                	flw	fs0,0(a2)
     bc6:	66000007          	0x66000007
     bca:	0008                	0x8
        CT[i-(2*N)] = CT[i];
     bcc:	0200                	addi	s0,sp,256
     bce:	8300                	0x8300
	...
     bd8:	7200                	flw	fs0,32(a2)
     bda:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < (3*N); ++i){
     bdc:	4a00                	lw	s0,16(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bde:	02000007          	0x2000007
     be2:	8500                	0x8500
     be4:	6200                	flw	fs0,0(a2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     be6:	66000007          	0x66000007
     bea:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bec:	0200                	addi	s0,sp,256
     bee:	8500                	0x8500
	...
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bf8:	7200                	flw	fs0,32(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bfa:	0006                	c.slli	zero,0x1
     bfc:	5000                	lw	s0,32(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bfe:	02000007          	0x2000007
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c02:	8800                	0x8800
     c04:	6200                	flw	fs0,0(a2)
     c06:	66000007          	0x66000007
     c0a:	0008                	0x8
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c0c:	0200                	addi	s0,sp,256
     c0e:	8800                	0x8800
	...
     c18:	7200                	flw	fs0,32(a2)
     c1a:	0006                	c.slli	zero,0x1
     c1c:	4c00                	lw	s0,24(s0)
     c1e:	02000007          	0x2000007
     c22:	8600                	0x8600
    for(i = (2*N); i < ((2*N)+N); ++i){
     c24:	4c00                	lw	s0,24(s0)
     c26:	50000007          	0x50000007
     c2a:	0c000007          	0xc000007
        if(a2[i] <= q/2)
     c2e:	8800                	0x8800
     c30:	8b00                	0x8b00
     c32:	3200                	fld	fs0,32(a2)
    for (i = 0; i < N; ++i){
     c34:	2324                	fld	fs1,64(a4)
     c36:	1af0090f          	0x1af0090f
    c = polymult2(secret_key_fp,N,a2,N,0);
     c3a:	621c                	flw	fa5,0(a2)
     c3c:	66000007          	0x66000007
     c40:	0008                	0x8
     c42:	0200                	addi	s0,sp,256
     c44:	8600                	0x8600
	...
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     c4e:	7200                	flw	fs0,32(a2)
     c50:	0006                	c.slli	zero,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	5200                	lw	s0,32(a2)
     c54:	02000007          	0x2000007
}
     c58:	8900                	0x8900
     c5a:	6200                	flw	fs0,0(a2)
     c5c:	66000007          	0x66000007
     c60:	0008                	0x8
     c62:	0200                	addi	s0,sp,256
     c64:	8900                	0x8900
	...
        a2[i-(2*N)] = a2[i];
     c6e:	7200                	flw	fs0,32(a2)
     c70:	0006                	c.slli	zero,0x1
     c72:	4e00                	lw	s0,24(a2)
     c74:	02000007          	0x2000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     c78:	8700                	0x8700
        a2[i-(2*N)] = a2[i];
     c7a:	4e00                	lw	s0,24(a2)
     c7c:	52000007          	0x52000007
        if(a2[i] <= q/2)
     c80:	0c000007          	0xc000007
     c84:	8900                	0x8900
            a2[i] = (-1)*(q-a2[i]);
     c86:	8b00                	0x8b00
     c88:	3200                	fld	fs0,32(a2)
     c8a:	2324                	fld	fs1,64(a4)
    for (i = 0; i < N; ++i){
     c8c:	1af0090f          	0x1af0090f
     c90:	621c                	flw	fa5,0(a2)
        c2[i-(2*N)] = c2[i];
     c92:	66000007          	0x66000007
     c96:	0008                	0x8
     c98:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     c9a:	8700                	0x8700
	...
  jal x0, default_exc_handler
     ca4:	7400                	flw	fs0,40(s0)
     ca6:	0006                	c.slli	zero,0x1
  mv  x1, x0
     ca8:	3c00                	fld	fs0,56(s0)
     caa:	02000007          	0x2000007
  mv  x3, x1
     cae:	7200                	flw	fs0,32(a2)
  mv  x4, x1
     cb0:	3c00                	fld	fs0,56(s0)
  mv  x5, x1
     cb2:	48000007          	0x48000007
  mv  x7, x1
     cb6:	02000007          	0x2000007
  mv  x9, x1
     cba:	8400                	0x8400
  mv x10, x1
     cbc:	4800                	lw	s0,16(s0)
  mv x11, x1
     cbe:	4e000007          	0x4e000007
  mv x13, x1
     cc2:	0c000007          	0xc000007
  mv x15, x1
     cc6:	8700                	0x8700
  mv x16, x1
     cc8:	8b00                	0x8b00
  mv x17, x1
     cca:	3200                	fld	fs0,32(a2)
  mv x18, x1
     ccc:	2324                	fld	fs1,64(a4)
  mv x19, x1
     cce:	1af0090f          	0x1af0090f
  mv x21, x1
     cd2:	4e1c                	lw	a5,24(a2)
  mv x22, x1
     cd4:	52000007          	0x52000007
  mv x24, x1
     cd8:	0e000007          	0xe000007
  mv x26, x1
     cdc:	8900                	0x8900
  mv x27, x1
     cde:	8b00                	0x8b00
  mv x28, x1
     ce0:	3200                	fld	fs0,32(a2)
  mv x29, x1
     ce2:	2324                	fld	fs1,64(a4)
  mv x30, x1
     ce4:	1af0090f          	0x1af0090f
  la   x2, _stack_start
     ce8:	2431                	jal	ef4 <main+0x54>
     cea:	621c                	flw	fa5,0(a2)
     cec:	66000007          	0x66000007
  la x26, _bss_start
     cf0:	0008                	0x8
     cf2:	0200                	addi	s0,sp,256
     cf4:	7200                	flw	fs0,32(a2)
	...
  la x27, _bss_end
     cfe:	b600                	fsd	fs0,40(a2)
  bge x26, x27, zero_loop_end
     d00:	0006                	c.slli	zero,0x1
     d02:	d000                	sw	s0,32(s0)
  sw x0, 0(x26)
     d04:	0006                	c.slli	zero,0x1
     d06:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     d08:	5a00                	lw	s0,48(a2)
  ble x26, x27, zero_loop
     d0a:	0798                	addi	a4,sp,960
     d0c:	0000                	unimp
  addi x10, x0, 0
     d0e:	07c4                	addi	s1,sp,964
     d10:	0000                	unimp
  addi x11, x0, 0
     d12:	0001                	nop
     d14:	005a                	c.slli	zero,0x16
  jal x1, main
     d16:	0000                	unimp
     d18:	0000                	unimp
     d1a:	0000                	unimp
     d1c:	de00                	sw	s0,56(a2)
     d1e:	0006                	c.slli	zero,0x1
     d20:	ea00                	fsw	fs0,16(a2)
     d22:	0006                	c.slli	zero,0x1
     d24:	0100                	addi	s0,sp,128
     d26:	5a00                	lw	s0,48(a2)
     d28:	07c4                	addi	s1,sp,964
     d2a:	0000                	unimp
     d2c:	07d6                	slli	a5,a5,0x15
     d2e:	0000                	unimp
     d30:	0001                	nop
     d32:	005a                	c.slli	zero,0x16
     d34:	0000                	unimp
     d36:	0000                	unimp
     d38:	0000                	unimp
     d3a:	fa00                	fsw	fs0,48(a2)
     d3c:	0006                	c.slli	zero,0x1
     d3e:	0600                	addi	s0,sp,768
     d40:	01000007          	0x1000007
     d44:	5a00                	lw	s0,48(a2)
     d46:	07d6                	slli	a5,a5,0x15
     d48:	0000                	unimp
     d4a:	07e8                	addi	a0,sp,972
     d4c:	0000                	unimp
     d4e:	0001                	nop
     d50:	005a                	c.slli	zero,0x16
     d52:	0000                	unimp
     d54:	0000                	unimp
     d56:	0000                	unimp
     d58:	7400                	flw	fs0,40(s0)
     d5a:	0006                	c.slli	zero,0x1
     d5c:	9a00                	0x9a00
     d5e:	0006                	c.slli	zero,0x1
     d60:	0200                	addi	s0,sp,256
     d62:	3100                	fld	fs0,32(a0)
     d64:	9a9f 0006 1e00      	0x1e0000069a9f
     d6a:	02000007          	0x2000007
     d6e:	3000                	fld	fs0,32(s0)
     d70:	1e9f 0007 3400      	0x340000071e9f
     d76:	01000007          	0x1000007
     d7a:	5e00                	lw	s0,56(a2)
     d7c:	0762                	slli	a4,a4,0x18
     d7e:	0000                	unimp
     d80:	0798                	addi	a4,sp,960
     d82:	0000                	unimp
     d84:	0002                	c.slli64	zero
     d86:	9f31                	0x9f31
     d88:	0798                	addi	a4,sp,960
     d8a:	0000                	unimp
     d8c:	0802                	c.slli64	a6
     d8e:	0000                	unimp
     d90:	0002                	c.slli64	zero
     d92:	9f30                	0x9f30
     d94:	0802                	c.slli64	a6
     d96:	0000                	unimp
     d98:	0826                	slli	a6,a6,0x9
     d9a:	0000                	unimp
     d9c:	0001                	nop
     d9e:	3a5e                	fld	fs4,496(sp)
     da0:	0008                	0x8
     da2:	5200                	lw	s0,32(a2)
     da4:	0008                	0x8
     da6:	0100                	addi	s0,sp,128
     da8:	5e00                	lw	s0,56(a2)
	...
     db2:	0672                	slli	a2,a2,0x1c
     db4:	0000                	unimp
     db6:	0744                	addi	s1,sp,900
     db8:	0000                	unimp
     dba:	0001                	nop
     dbc:	4462                	lw	s0,24(sp)
     dbe:	56000007          	0x56000007
     dc2:	03000007          	0x3000007
     dc6:	8b00                	0x8b00
     dc8:	9f7f                	0x9f7f
     dca:	0756                	slli	a4,a4,0x15
     dcc:	0000                	unimp
     dce:	0762                	slli	a4,a4,0x18
     dd0:	0000                	unimp
     dd2:	0006                	c.slli	zero,0x1
     dd4:	315c01f3          	0x315c01f3
     dd8:	9f1c                	0x9f1c
     dda:	0762                	slli	a4,a4,0x18
     ddc:	0000                	unimp
     dde:	0866                	slli	a6,a6,0x19
     de0:	0000                	unimp
     de2:	0001                	nop
     de4:	0062                	c.slli	zero,0x18
     de6:	0000                	unimp
     de8:	0000                	unimp
     dea:	0000                	unimp
     dec:	7200                	flw	fs0,32(a2)
     dee:	0006                	c.slli	zero,0x1
     df0:	4400                	lw	s0,8(s0)
     df2:	01000007          	0x1000007
     df6:	6200                	flw	fs0,0(a2)
     df8:	0744                	addi	s1,sp,900
     dfa:	0000                	unimp
     dfc:	0756                	slli	a4,a4,0x15
     dfe:	0000                	unimp
     e00:	7f8b0003          	lb	zero,2040(s6)
     e04:	569f 0007 6200      	0x62000007569f
     e0a:	06000007          	0x6000007
     e0e:	f300                	fsw	fs0,32(a4)
     e10:	5c01                	li	s8,-32
     e12:	1c31                	addi	s8,s8,-20
     e14:	629f 0007 6600      	0x66000007629f
     e1a:	0008                	0x8
     e1c:	0100                	addi	s0,sp,128
     e1e:	6200                	flw	fs0,0(a2)
	...
     e28:	0672                	slli	a2,a2,0x1c
     e2a:	0000                	unimp
     e2c:	0744                	addi	s1,sp,900
     e2e:	0000                	unimp
     e30:	0001                	nop
     e32:	4462                	lw	s0,24(sp)
     e34:	56000007          	0x56000007
     e38:	03000007          	0x3000007
     e3c:	8b00                	0x8b00
     e3e:	9f7f                	0x9f7f
     e40:	0756                	slli	a4,a4,0x15
     e42:	0000                	unimp
     e44:	0762                	slli	a4,a4,0x18
     e46:	0000                	unimp
     e48:	0006                	c.slli	zero,0x1
     e4a:	315c01f3          	0x315c01f3
     e4e:	9f1c                	0x9f1c
     e50:	0762                	slli	a4,a4,0x18
     e52:	0000                	unimp
     e54:	0866                	slli	a6,a6,0x19
     e56:	0000                	unimp
     e58:	0001                	nop
     e5a:	0062                	c.slli	zero,0x18
     e5c:	0000                	unimp
     e5e:	0000                	unimp
     e60:	0000                	unimp
     e62:	7200                	flw	fs0,32(a2)
     e64:	0006                	c.slli	zero,0x1
     e66:	4400                	lw	s0,8(s0)
     e68:	01000007          	0x1000007
     e6c:	6200                	flw	fs0,0(a2)
     e6e:	0744                	addi	s1,sp,900
     e70:	0000                	unimp
     e72:	0756                	slli	a4,a4,0x15
     e74:	0000                	unimp
     e76:	7f8b0003          	lb	zero,2040(s6)
     e7a:	569f 0007 6200      	0x62000007569f
     e80:	06000007          	0x6000007
     e84:	f300                	fsw	fs0,32(a4)
     e86:	5c01                	li	s8,-32
     e88:	1c31                	addi	s8,s8,-20
     e8a:	629f 0007 6600      	0x66000007629f
     e90:	0008                	0x8
     e92:	0100                	addi	s0,sp,128
     e94:	6200                	flw	fs0,0(a2)
	...
     e9e:	0672                	slli	a2,a2,0x1c
int main(){
     ea0:	0000                	unimp
     ea2:	0744                	addi	s1,sp,900
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ea4:	0000                	unimp
     ea6:	0001                	nop
     ea8:	4462                	lw	s0,24(sp)
     eaa:	56000007          	0x56000007
     eae:	03000007          	0x3000007
int main(){
     eb2:	8b00                	0x8b00
     eb4:	9f7f                	0x9f7f
     eb6:	0756                	slli	a4,a4,0x15
     eb8:	0000                	unimp
     eba:	0762                	slli	a4,a4,0x18
     ebc:	0000                	unimp
     ebe:	0006                	c.slli	zero,0x1
     ec0:	315c01f3          	0x315c01f3
    resultkon[0] = 0xaaaaaaa0;
     ec4:	9f1c                	0x9f1c
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ec6:	0762                	slli	a4,a4,0x18
    resultkon[0] = 0xaaaaaaa0;
     ec8:	0000                	unimp
     eca:	0866                	slli	a6,a6,0x19
     ecc:	0000                	unimp
     ece:	0001                	nop
     ed0:	0062                	c.slli	zero,0x18
     ed2:	0000                	unimp
    keys = generate_keys(N, p, q);
     ed4:	0000                	unimp
     ed6:	0000                	unimp
     ed8:	7200                	flw	fs0,32(a2)
     eda:	0006                	c.slli	zero,0x1
     edc:	4400                	lw	s0,8(s0)
    resultkon[0] = 0xaaaaaaa0;
     ede:	01000007          	0x1000007
    resultkon[0] = 0xaaaaaaa1;
     ee2:	6200                	flw	fs0,0(a2)
    keys = generate_keys(N, p, q);
     ee4:	0744                	addi	s1,sp,900
    resultkon[0] = 0xaaaaaaa1;
     ee6:	0000                	unimp
     ee8:	0756                	slli	a4,a4,0x15
    for(i = 0; i < N; ++i){
     eea:	0000                	unimp
     eec:	7f8b0003          	lb	zero,2040(s6)
        secret_key_f[i] = keys[i];
     ef0:	569f 0007 6200      	0x62000007569f
     ef6:	06000007          	0x6000007
    for(i = 0; i < N; ++i){
     efa:	f300                	fsw	fs0,32(a4)
     efc:	5c01                	li	s8,-32
     efe:	1c31                	addi	s8,s8,-20
    for(i = N; i < (2*N); ++i){
     f00:	629f 0007 6600      	0x66000007629f
     f06:	0008                	0x8
     f08:	0100                	addi	s0,sp,128
     f0a:	6200                	flw	fs0,0(a2)
	...
        secret_key_fp[i-(2*N)] = keys[i];
     f14:	0672                	slli	a2,a2,0x1c
    for(i = (2*N); i < (3*N); ++i){
     f16:	0000                	unimp
     f18:	0744                	addi	s1,sp,900
    for(i = (3*N); i < (4*N); ++i){
     f1a:	0000                	unimp
     f1c:	0001                	nop
     f1e:	4462                	lw	s0,24(sp)
     f20:	56000007          	0x56000007
     f24:	03000007          	0x3000007
        public_key[i-(4*N)] = keys[i];
     f28:	8b00                	0x8b00
     f2a:	9f7f                	0x9f7f
     f2c:	0756                	slli	a4,a4,0x15
     f2e:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     f30:	0762                	slli	a4,a4,0x18
     f32:	0000                	unimp
     f34:	0006                	c.slli	zero,0x1
     f36:	315c01f3          	0x315c01f3
     f3a:	9f1c                	0x9f1c
        ring_poly[i-(5*N)] = keys[i];
     f3c:	0762                	slli	a4,a4,0x18
     f3e:	0000                	unimp
     f40:	0866                	slli	a6,a6,0x19
     f42:	0000                	unimp
     f44:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     f46:	0062                	c.slli	zero,0x18
     f48:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     f4a:	0000                	unimp
     f4c:	0000                	unimp
     f4e:	3000                	fld	fs0,32(s0)
     f50:	0004                	0x4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f52:	9200                	0x9200
     f54:	0004                	0x4
     f56:	0100                	addi	s0,sp,128
     f58:	5a00                	lw	s0,48(a2)
    resultkon[0] = 0xbbbbbbb1;
     f5a:	0492                	slli	s1,s1,0x4
     f5c:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f5e:	04c2                	slli	s1,s1,0x10
     f60:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     f62:	0004                	0x4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f64:	9f5a01f3          	0x9f5a01f3
    resultkon[0] = 0xccccccc0;
     f68:	04c2                	slli	s1,s1,0x10
     f6a:	0000                	unimp
     f6c:	04d4                	addi	a3,sp,580
     f6e:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f70:	0001                	nop
    resultkon[0] = 0xccccccc0;
     f72:	d45a                	sw	s6,40(sp)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f74:	0004                	0x4
     f76:	1c00                	addi	s0,sp,560
     f78:	0006                	c.slli	zero,0x1
     f7a:	0400                	addi	s0,sp,512
     f7c:	f300                	fsw	fs0,32(a4)
     f7e:	5a01                	li	s4,-32
     f80:	009f 0000 0000      	0x9f
     f86:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
     f88:	3000                	fld	fs0,32(s0)
     f8a:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
     f8c:	9000                	0x9000
     f8e:	0004                	0x4
    resultkon[0] = 0xccccccc1;	
     f90:	0100                	addi	s0,sp,128
     f92:	5b00                	lw	s0,48(a4)
            resultkon[0] = 0xDEDEDEDE;
     f94:	0490                	addi	a2,sp,576
     f96:	0000                	unimp
    for(i = 0; i < 32; ++i){
     f98:	053e                	slli	a0,a0,0xf
     f9a:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
     f9c:	0001                	nop
     f9e:	3e59                	jal	b34 <generate_keys+0x2ce>
     fa0:	0005                	c.nop	1
     fa2:	5a00                	lw	s0,48(a2)
     fa4:	0005                	c.nop	1
     fa6:	0300                	addi	s0,sp,384
     fa8:	8800                	0x8800
     faa:	9f01                	0x9f01
            resultkon[0] = 0xBABABABA;
     fac:	055a                	slli	a0,a0,0x16
     fae:	0000                	unimp
     fb0:	056c                	addi	a1,sp,652
     fb2:	0000                	unimp
     fb4:	0004                	0x4
}
     fb6:	9f5b01f3          	0x9f5b01f3
     fba:	056c                	addi	a1,sp,652
     fbc:	0000                	unimp
     fbe:	060a                	slli	a2,a2,0x2
     fc0:	0000                	unimp
     fc2:	0001                	nop
     fc4:	0a59                	addi	s4,s4,22
     fc6:	0006                	c.slli	zero,0x1
     fc8:	1c00                	addi	s0,sp,560
     fca:	0006                	c.slli	zero,0x1
     fcc:	0300                	addi	s0,sp,384
            resultkon[0] = 0xDEDEDEDE;
     fce:	8800                	0x8800
    for(i = 0; i < 32; ++i){
     fd0:	9f01                	0x9f01
	...
     fda:	0430                	addi	a2,sp,520
     fdc:	0000                	unimp
     fde:	048e                	slli	s1,s1,0x3
     fe0:	0000                	unimp
     fe2:	0001                	nop
     fe4:	8e5c                	0x8e5c
     fe6:	0004                	0x4
     fe8:	b800                	fsd	fs0,48(s0)
     fea:	0004                	0x4
     fec:	0100                	addi	s0,sp,128
     fee:	6a00                	flw	fs0,16(a2)
     ff0:	04b8                	addi	a4,sp,584
     ff2:	0000                	unimp
     ff4:	04c2                	slli	s1,s1,0x10
     ff6:	0000                	unimp
     ff8:	0004                	0x4
     ffa:	9f5c01f3          	0x9f5c01f3
     ffe:	04c2                	slli	s1,s1,0x10
    1000:	0000                	unimp
    1002:	04d4                	addi	a3,sp,580
    1004:	0000                	unimp
    1006:	0001                	nop
    1008:	d45c                	sw	a5,44(s0)
    100a:	0004                	0x4
    100c:	0200                	addi	s0,sp,256
    100e:	0005                	c.nop	1
    1010:	0100                	addi	s0,sp,128
    1012:	6a00                	flw	fs0,16(a2)
    1014:	0502                	c.slli64	a0
    1016:	0000                	unimp
    1018:	061c                	addi	a5,sp,768
    101a:	0000                	unimp
    101c:	0004                	0x4
    101e:	9f5c01f3          	0x9f5c01f3
	...
    102a:	0430                	addi	a2,sp,520
    102c:	0000                	unimp
    102e:	0488                	addi	a0,sp,576
    1030:	0000                	unimp
    1032:	0001                	nop
    1034:	885d                	andi	s0,s0,23
    1036:	0004                	0x4
    1038:	5000                	lw	s0,32(s0)
    103a:	0005                	c.nop	1
    103c:	0100                	addi	s0,sp,128
    103e:	6300                	flw	fs0,0(a4)
    1040:	0550                	addi	a2,sp,644
    1042:	0000                	unimp
    1044:	056c                	addi	a1,sp,652
    1046:	0000                	unimp
    1048:	0004                	0x4
    104a:	9f5d01f3          	0x9f5d01f3
    104e:	056c                	addi	a1,sp,652
    1050:	0000                	unimp
    1052:	061c                	addi	a5,sp,768
    1054:	0000                	unimp
    1056:	0001                	nop
    1058:	00000063          	beqz	zero,1058 <__DTOR_END__+0x70>
    105c:	0000                	unimp
    105e:	0000                	unimp
    1060:	3000                	fld	fs0,32(s0)
    1062:	0004                	0x4
    1064:	8800                	0x8800
    1066:	0004                	0x4
    1068:	0100                	addi	s0,sp,128
    106a:	5e00                	lw	s0,56(a2)
    106c:	0488                	addi	a0,sp,576
    106e:	0000                	unimp
    1070:	054e                	slli	a0,a0,0x13
    1072:	0000                	unimp
    1074:	0001                	nop
    1076:	4e62                	lw	t3,24(sp)
    1078:	0005                	c.nop	1
    107a:	6c00                	flw	fs0,24(s0)
    107c:	0005                	c.nop	1
    107e:	0400                	addi	s0,sp,512
    1080:	f300                	fsw	fs0,32(a4)
    1082:	5e01                	li	t3,-32
    1084:	6c9f 0005 1c00      	0x1c0000056c9f
    108a:	0006                	c.slli	zero,0x1
    108c:	0100                	addi	s0,sp,128
    108e:	6200                	flw	fs0,0(a2)
	...
    1098:	04ba                	slli	s1,s1,0xe
    109a:	0000                	unimp
    109c:	04c2                	slli	s1,s1,0x10
    109e:	0000                	unimp
    10a0:	0001                	nop
    10a2:	026a                	slli	tp,tp,0x1a
    10a4:	0005                	c.nop	1
    10a6:	5e00                	lw	s0,56(a2)
    10a8:	0005                	c.nop	1
    10aa:	0100                	addi	s0,sp,128
    10ac:	6a00                	flw	fs0,16(a2)
    10ae:	056c                	addi	a1,sp,652
    10b0:	0000                	unimp
    10b2:	061c                	addi	a5,sp,768
    10b4:	0000                	unimp
    10b6:	0001                	nop
    10b8:	006a                	c.slli	zero,0x1a
    10ba:	0000                	unimp
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	2000                	fld	fs0,0(s0)
    10c2:	0005                	c.nop	1
    10c4:	2600                	fld	fs0,8(a2)
    10c6:	0005                	c.nop	1
    10c8:	0100                	addi	s0,sp,128
    10ca:	5f00                	lw	s0,56(a4)
    10cc:	056c                	addi	a1,sp,652
    10ce:	0000                	unimp
    10d0:	0574                	addi	a3,sp,652
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	005f 0000 0000      	0x5f
    10dc:	0000                	unimp
    10de:	8600                	0x8600
    10e0:	0004                	0x4
    10e2:	8800                	0x8800
    10e4:	0004                	0x4
    10e6:	0200                	addi	s0,sp,256
    10e8:	3000                	fld	fs0,32(s0)
    10ea:	889f 0004 9300      	0x93000004889f
    10f0:	0004                	0x4
    10f2:	0100                	addi	s0,sp,128
    10f4:	5f00                	lw	s0,56(a4)
    10f6:	0494                	addi	a3,sp,576
    10f8:	0000                	unimp
    10fa:	0496                	slli	s1,s1,0x5
    10fc:	0000                	unimp
    10fe:	0002                	c.slli64	zero
    1100:	9f30                	0x9f30
    1102:	0496                	slli	s1,s1,0x5
    1104:	0000                	unimp
    1106:	04a1                	addi	s1,s1,8
    1108:	0000                	unimp
    110a:	0001                	nop
    110c:	a25f 0004 a400      	0xa4000004a25f
    1112:	0004                	0x4
    1114:	0200                	addi	s0,sp,256
    1116:	3000                	fld	fs0,32(s0)
    1118:	a49f 0004 a800      	0xa8000004a49f
    111e:	0004                	0x4
    1120:	0100                	addi	s0,sp,128
    1122:	5f00                	lw	s0,56(a4)
    1124:	04a8                	addi	a0,sp,584
    1126:	0000                	unimp
    1128:	04c2                	slli	s1,s1,0x10
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	c264                	sw	s1,68(a2)
    1130:	0004                	0x4
    1132:	d000                	sw	s0,32(s0)
    1134:	0004                	0x4
    1136:	0100                	addi	s0,sp,128
    1138:	5f00                	lw	s0,56(a4)
    113a:	04d0                	addi	a2,sp,580
    113c:	0000                	unimp
    113e:	04d2                	slli	s1,s1,0x14
    1140:	0000                	unimp
    1142:	7f7f0003          	lb	zero,2039(t5)
    1146:	d29f 0004 e200      	0xe2000004d29f
    114c:	0004                	0x4
    114e:	0100                	addi	s0,sp,128
    1150:	5f00                	lw	s0,56(a4)
    1152:	04e2                	slli	s1,s1,0x18
    1154:	0000                	unimp
    1156:	04e4                	addi	s1,sp,588
    1158:	0000                	unimp
    115a:	7f7f0003          	lb	zero,2039(t5)
    115e:	e49f 0004 fc00      	0xfc000004e49f
    1164:	0004                	0x4
    1166:	0100                	addi	s0,sp,128
    1168:	5f00                	lw	s0,56(a4)
    116a:	04fc                	addi	a5,sp,588
    116c:	0000                	unimp
    116e:	0510                	addi	a2,sp,640
    1170:	0000                	unimp
    1172:	0001                	nop
    1174:	1064                	addi	s1,sp,44
    1176:	0005                	c.nop	1
    1178:	2000                	fld	fs0,0(s0)
    117a:	0005                	c.nop	1
    117c:	0100                	addi	s0,sp,128
    117e:	5f00                	lw	s0,56(a4)
    1180:	052e                	slli	a0,a0,0xb
    1182:	0000                	unimp
    1184:	053e                	slli	a0,a0,0xf
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	3e5f 0005 4c00      	0x4c0000053e5f
    1190:	0005                	c.nop	1
    1192:	0100                	addi	s0,sp,128
    1194:	5900                	lw	s0,48(a0)
    1196:	0598                	addi	a4,sp,704
    1198:	0000                	unimp
    119a:	059c                	addi	a5,sp,704
    119c:	0000                	unimp
    119e:	0002                	c.slli64	zero
    11a0:	9f30                	0x9f30
    11a2:	059c                	addi	a5,sp,704
    11a4:	0000                	unimp
    11a6:	000005a7          	0x5a7
    11aa:	0001                	nop
    11ac:	b85f 0005 ba00      	0xba000005b85f
    11b2:	0005                	c.nop	1
    11b4:	0100                	addi	s0,sp,128
    11b6:	6800                	flw	fs0,16(s0)
    11b8:	05ba                	slli	a1,a1,0xe
    11ba:	0000                	unimp
    11bc:	05d6                	slli	a1,a1,0x15
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	d65f 0005 de00      	0xde000005d65f
    11c8:	0005                	c.nop	1
    11ca:	0300                	addi	s0,sp,384
    11cc:	7f00                	flw	fs0,56(a4)
    11ce:	9f7f                	0x9f7f
    11d0:	05de                	slli	a1,a1,0x17
    11d2:	0000                	unimp
    11d4:	05e6                	slli	a1,a1,0x19
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	e65f 0005 f800      	0xf8000005e65f
    11e0:	0005                	c.nop	1
    11e2:	0100                	addi	s0,sp,128
    11e4:	5d00                	lw	s0,56(a0)
    11e6:	05f8                	addi	a4,sp,716
    11e8:	0000                	unimp
    11ea:	0606                	slli	a2,a2,0x1
    11ec:	0000                	unimp
    11ee:	0001                	nop
    11f0:	065f 0006 0800      	0x8000006065f
    11f6:	0006                	c.slli	zero,0x1
    11f8:	0300                	addi	s0,sp,384
    11fa:	7f00                	flw	fs0,56(a4)
    11fc:	9f7f                	0x9f7f
    11fe:	0608                	addi	a0,sp,768
    1200:	0000                	unimp
    1202:	060a                	slli	a2,a2,0x2
    1204:	0000                	unimp
    1206:	0001                	nop
    1208:	0a5f 0006 1c00      	0x1c0000060a5f
    120e:	0006                	c.slli	zero,0x1
    1210:	0100                	addi	s0,sp,128
    1212:	5900                	lw	s0,48(a0)
	...
    121c:	0520                	addi	s0,sp,648
    121e:	0000                	unimp
    1220:	052e                	slli	a0,a0,0xb
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	6c5e                	flw	fs8,212(sp)
    1228:	0005                	c.nop	1
    122a:	7000                	flw	fs0,32(s0)
    122c:	0005                	c.nop	1
    122e:	0100                	addi	s0,sp,128
    1230:	5e00                	lw	s0,56(a2)
	...
    123a:	0542                	slli	a0,a0,0x10
    123c:	0000                	unimp
    123e:	056c                	addi	a1,sp,652
    1240:	0000                	unimp
    1242:	0006                	c.slli	zero,0x1
    1244:	00161c03          	lh	s8,1(a2) # 19001 <_stack_start+0x9001>
    1248:	9f00                	0x9f00
	...
    1252:	0480                	addi	s0,sp,576
    1254:	0000                	unimp
    1256:	0554                	addi	a3,sp,644
    1258:	0000                	unimp
    125a:	0002                	c.slli64	zero
    125c:	0085                	addi	ra,ra,1
    125e:	056c                	addi	a1,sp,652
    1260:	0000                	unimp
    1262:	061c                	addi	a5,sp,768
    1264:	0000                	unimp
    1266:	0002                	c.slli64	zero
    1268:	0085                	addi	ra,ra,1
	...
    1272:	0480                	addi	s0,sp,576
    1274:	0000                	unimp
    1276:	0556                	slli	a0,a0,0x15
    1278:	0000                	unimp
    127a:	0002                	c.slli64	zero
    127c:	0086                	slli	ra,ra,0x1
    127e:	056c                	addi	a1,sp,652
    1280:	0000                	unimp
    1282:	061c                	addi	a5,sp,768
    1284:	0000                	unimp
    1286:	0002                	c.slli64	zero
    1288:	0086                	slli	ra,ra,0x1
	...
    1292:	0596                	slli	a1,a1,0x5
    1294:	0000                	unimp
    1296:	00000597          	auipc	a1,0x0
    129a:	0001                	nop
    129c:	975a                	add	a4,a4,s6
    129e:	0005                	c.nop	1
    12a0:	f800                	fsw	fs0,48(s0)
    12a2:	0005                	c.nop	1
    12a4:	0100                	addi	s0,sp,128
    12a6:	6b00                	flw	fs0,16(a4)
	...
    12b0:	0480                	addi	s0,sp,576
    12b2:	0000                	unimp
    12b4:	053e                	slli	a0,a0,0xf
    12b6:	0000                	unimp
    12b8:	0002                	c.slli64	zero
    12ba:	0089                	addi	ra,ra,2
    12bc:	053e                	slli	a0,a0,0xf
    12be:	0000                	unimp
    12c0:	0556                	slli	a0,a0,0x15
    12c2:	0000                	unimp
    12c4:	000c                	0xc
    12c6:	0086                	slli	ra,ra,0x1
    12c8:	0188                	addi	a0,sp,192
    12ca:	2432                	fld	fs0,264(sp)
    12cc:	f0090f23          	sb	zero,-226(s2)
    12d0:	1c1a                	slli	s8,s8,0x26
    12d2:	056c                	addi	a1,sp,652
    12d4:	0000                	unimp
    12d6:	060a                	slli	a2,a2,0x2
    12d8:	0000                	unimp
    12da:	0002                	c.slli64	zero
    12dc:	0089                	addi	ra,ra,2
    12de:	060a                	slli	a2,a2,0x2
    12e0:	0000                	unimp
    12e2:	061c                	addi	a5,sp,768
    12e4:	0000                	unimp
    12e6:	000c                	0xc
    12e8:	0086                	slli	ra,ra,0x1
    12ea:	0188                	addi	a0,sp,192
    12ec:	2432                	fld	fs0,264(sp)
    12ee:	f0090f23          	sb	zero,-226(s2)
    12f2:	1c1a                	slli	s8,s8,0x26
	...
    12fc:	0486                	slli	s1,s1,0x1
    12fe:	0000                	unimp
    1300:	0546                	slli	a0,a0,0x11
    1302:	0000                	unimp
    1304:	0002                	c.slli64	zero
    1306:	0072                	c.slli	zero,0x1c
    1308:	0546                	slli	a0,a0,0x11
    130a:	0000                	unimp
    130c:	0558                	addi	a4,sp,644
    130e:	0000                	unimp
    1310:	0002                	c.slli64	zero
    1312:	056c0087          	0x56c0087
    1316:	0000                	unimp
    1318:	061c                	addi	a5,sp,768
    131a:	0000                	unimp
    131c:	0002                	c.slli64	zero
    131e:	0072                	c.slli	zero,0x1c
	...
    1328:	0480                	addi	s0,sp,576
    132a:	0000                	unimp
    132c:	055a                	slli	a0,a0,0x16
    132e:	0000                	unimp
    1330:	0001                	nop
    1332:	5a68                	lw	a0,116(a2)
    1334:	0005                	c.nop	1
    1336:	6c00                	flw	fs0,24(s0)
    1338:	0005                	c.nop	1
    133a:	0600                	addi	s0,sp,768
    133c:	f300                	fsw	fs0,32(a4)
    133e:	5b01                	li	s6,-32
    1340:	1c31                	addi	s8,s8,-20
    1342:	6c9f 0005 1c00      	0x1c0000056c9f
    1348:	0006                	c.slli	zero,0x1
    134a:	0100                	addi	s0,sp,128
    134c:	6800                	flw	fs0,16(s0)
	...
    1356:	0480                	addi	s0,sp,576
    1358:	0000                	unimp
    135a:	055a                	slli	a0,a0,0x16
    135c:	0000                	unimp
    135e:	0001                	nop
    1360:	5a68                	lw	a0,116(a2)
    1362:	0005                	c.nop	1
    1364:	6c00                	flw	fs0,24(s0)
    1366:	0005                	c.nop	1
    1368:	0600                	addi	s0,sp,768
    136a:	f300                	fsw	fs0,32(a4)
    136c:	5b01                	li	s6,-32
    136e:	1c31                	addi	s8,s8,-20
    1370:	6c9f 0005 1c00      	0x1c0000056c9f
    1376:	0006                	c.slli	zero,0x1
    1378:	0100                	addi	s0,sp,128
    137a:	6800                	flw	fs0,16(s0)
	...
    1384:	0480                	addi	s0,sp,576
    1386:	0000                	unimp
    1388:	055a                	slli	a0,a0,0x16
    138a:	0000                	unimp
    138c:	0001                	nop
    138e:	5a68                	lw	a0,116(a2)
    1390:	0005                	c.nop	1
    1392:	6c00                	flw	fs0,24(s0)
    1394:	0005                	c.nop	1
    1396:	0600                	addi	s0,sp,768
    1398:	f300                	fsw	fs0,32(a4)
    139a:	5b01                	li	s6,-32
    139c:	1c31                	addi	s8,s8,-20
    139e:	6c9f 0005 1c00      	0x1c0000056c9f
    13a4:	0006                	c.slli	zero,0x1
    13a6:	0100                	addi	s0,sp,128
    13a8:	6800                	flw	fs0,16(s0)
	...
    13b2:	0484                	addi	s1,sp,576
    13b4:	0000                	unimp
    13b6:	04a8                	addi	a0,sp,584
    13b8:	0000                	unimp
    13ba:	0001                	nop
    13bc:	a864                	fsd	fs1,208(s0)
    13be:	0004                	0x4
    13c0:	c200                	sw	s0,0(a2)
    13c2:	0004                	0x4
    13c4:	0300                	addi	s0,sp,384
    13c6:	8300                	0x8300
    13c8:	9f7f                	0x9f7f
    13ca:	04c2                	slli	s1,s1,0x10
    13cc:	0000                	unimp
    13ce:	04fc                	addi	a5,sp,588
    13d0:	0000                	unimp
    13d2:	0001                	nop
    13d4:	fc64                	fsw	fs1,124(s0)
    13d6:	0004                	0x4
    13d8:	5000                	lw	s0,32(s0)
    13da:	0005                	c.nop	1
    13dc:	0300                	addi	s0,sp,384
    13de:	8300                	0x8300
    13e0:	9f7f                	0x9f7f
    13e2:	0550                	addi	a2,sp,644
    13e4:	0000                	unimp
    13e6:	056c                	addi	a1,sp,652
    13e8:	0000                	unimp
    13ea:	0006                	c.slli	zero,0x1
    13ec:	315d01f3          	0x315d01f3
    13f0:	9f1c                	0x9f1c
    13f2:	056c                	addi	a1,sp,652
    13f4:	0000                	unimp
    13f6:	061c                	addi	a5,sp,768
    13f8:	0000                	unimp
    13fa:	7f830003          	lb	zero,2040(t1)
    13fe:	009f 0000 0000      	0x9f
    1404:	0000                	unimp
    1406:	ca00                	sw	s0,16(a2)
    1408:	0002                	c.slli64	zero
    140a:	3a00                	fld	fs0,48(a2)
    140c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1410:	5a00                	lw	s0,48(a2)
    1412:	033a                	slli	t1,t1,0xe
    1414:	0000                	unimp
    1416:	0356                	slli	t1,t1,0x15
    1418:	0000                	unimp
    141a:	0004                	0x4
    141c:	9f5a01f3          	0x9f5a01f3
    1420:	0356                	slli	t1,t1,0x15
    1422:	0000                	unimp
    1424:	038e                	slli	t2,t2,0x3
    1426:	0000                	unimp
    1428:	0001                	nop
    142a:	8e5a                	mv	t3,s6
    142c:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x36>
    1430:	0004                	0x4
    1432:	0400                	addi	s0,sp,512
    1434:	f300                	fsw	fs0,32(a4)
    1436:	5a01                	li	s4,-32
    1438:	009f 0000 0000      	0x9f
    143e:	0000                	unimp
    1440:	ca00                	sw	s0,16(a2)
    1442:	0002                	c.slli64	zero
    1444:	1800                	addi	s0,sp,48
    1446:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    144a:	5b00                	lw	s0,48(a4)
    144c:	0318                	addi	a4,sp,384
    144e:	0000                	unimp
    1450:	033a                	slli	t1,t1,0xe
    1452:	0000                	unimp
    1454:	0001                	nop
    1456:	3a56                	fld	fs4,368(sp)
    1458:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x130>
    145c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1460:	8c00                	0x8c00
    1462:	9f01                	0x9f01
    1464:	0356                	slli	t1,t1,0x15
    1466:	0000                	unimp
    1468:	038e                	slli	t2,t2,0x3
    146a:	0000                	unimp
    146c:	0001                	nop
    146e:	8e56                	mv	t3,s5
    1470:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1474:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1478:	8c00                	0x8c00
    147a:	9f01                	0x9f01
    147c:	03d4                	addi	a3,sp,452
    147e:	0000                	unimp
    1480:	0430                	addi	a2,sp,520
    1482:	0000                	unimp
    1484:	0004                	0x4
    1486:	9f5b01f3          	0x9f5b01f3
	...
    1492:	02ca                	slli	t0,t0,0x12
    1494:	0000                	unimp
    1496:	0340                	addi	s0,sp,388
    1498:	0000                	unimp
    149a:	0001                	nop
    149c:	405c                	lw	a5,4(s0)
    149e:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x130>
    14a2:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    14a6:	f300                	fsw	fs0,32(a4)
    14a8:	5c01                	li	s8,-32
    14aa:	569f 0003 a400      	0xa4000003569f
    14b0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14b4:	5c00                	lw	s0,56(s0)
    14b6:	03a4                	addi	s1,sp,456
    14b8:	0000                	unimp
    14ba:	0430                	addi	a2,sp,520
    14bc:	0000                	unimp
    14be:	0004                	0x4
    14c0:	9f5c01f3          	0x9f5c01f3
	...
    14cc:	02ca                	slli	t0,t0,0x12
    14ce:	0000                	unimp
    14d0:	031e                	slli	t1,t1,0x7
    14d2:	0000                	unimp
    14d4:	0001                	nop
    14d6:	1e5d                	addi	t3,t3,-9
    14d8:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    14dc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14e0:	5900                	lw	s0,48(a0)
    14e2:	03e2                	slli	t2,t2,0x18
    14e4:	0000                	unimp
    14e6:	03f8                	addi	a4,sp,460
    14e8:	0000                	unimp
    14ea:	0004                	0x4
    14ec:	9f5d01f3          	0x9f5d01f3
    14f0:	03f8                	addi	a4,sp,460
    14f2:	0000                	unimp
    14f4:	0430                	addi	a2,sp,520
    14f6:	0000                	unimp
    14f8:	0001                	nop
    14fa:	0059                	c.nop	22
    14fc:	0000                	unimp
    14fe:	0000                	unimp
    1500:	0000                	unimp
    1502:	ca00                	sw	s0,16(a2)
    1504:	0002                	c.slli64	zero
    1506:	4e00                	lw	s0,24(a2)
    1508:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    150c:	5e00                	lw	s0,56(a2)
    150e:	034e                	slli	t1,t1,0x13
    1510:	0000                	unimp
    1512:	0356                	slli	t1,t1,0x15
    1514:	0000                	unimp
    1516:	0004                	0x4
    1518:	9f5e01f3          	0x9f5e01f3
    151c:	0356                	slli	t1,t1,0x15
    151e:	0000                	unimp
    1520:	03a4                	addi	s1,sp,456
    1522:	0000                	unimp
    1524:	0001                	nop
    1526:	a45e                	fsd	fs7,8(sp)
    1528:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x36>
    152c:	0004                	0x4
    152e:	0400                	addi	s0,sp,512
    1530:	f300                	fsw	fs0,32(a4)
    1532:	5e01                	li	t3,-32
    1534:	009f 0000 0000      	0x9f
    153a:	0000                	unimp
    153c:	1e00                	addi	s0,sp,816
    153e:	4e000003          	lb	zero,1248(zero) # 4e0 <polydiv+0xb0>
    1542:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1546:	8000                	0x8000
    1548:	4e00                	lw	s0,24(a2)
    154a:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x130>
    154e:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1552:	8400                	0x8400
    1554:	5600                	lw	s0,40(a2)
    1556:	a4000003          	lb	zero,-1472(zero) # fffffa40 <_stack_start+0xfffefa40>
    155a:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    155e:	8000                	0x8000
    1560:	a400                	fsd	fs0,8(s0)
    1562:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1566:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    156a:	8400                	0x8400
    156c:	f800                	fsw	fs0,48(s0)
    156e:	22000003          	lb	zero,544(zero) # 220 <polymult+0x148>
    1572:	0004                	0x4
    1574:	0200                	addi	s0,sp,256
    1576:	8400                	0x8400
	...
    1580:	2000                	fld	fs0,0(s0)
    1582:	2e000003          	lb	zero,736(zero) # 2e0 <polymult2+0x16>
    1586:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    158a:	3000                	fld	fs0,32(s0)
    158c:	2e9f 0003 3400      	0x340000032e9f
    1592:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1596:	6e00                	flw	fs0,24(a2)
    1598:	0334                	addi	a3,sp,392
    159a:	0000                	unimp
    159c:	033a                	slli	t1,t1,0xe
    159e:	0000                	unimp
    15a0:	0001                	nop
    15a2:	3a6d                	jal	f5c <main+0xbc>
    15a4:	4e000003          	lb	zero,1248(zero) # 4e0 <polydiv+0xb0>
    15a8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ac:	5a00                	lw	s0,48(a2)
    15ae:	0356                	slli	t1,t1,0x15
    15b0:	0000                	unimp
    15b2:	0378                	addi	a4,sp,396
    15b4:	0000                	unimp
    15b6:	0001                	nop
    15b8:	786e                	flw	fa6,248(sp)
    15ba:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    15be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15c2:	6d00                	flw	fs0,24(a0)
    15c4:	0388                	addi	a0,sp,448
    15c6:	0000                	unimp
    15c8:	038c                	addi	a1,sp,448
    15ca:	0000                	unimp
    15cc:	7f8d0003          	lb	zero,2040(s10)
    15d0:	8c9f 0003 8e00      	0x8e0000038c9f
    15d6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15da:	6d00                	flw	fs0,24(a0)
    15dc:	038e                	slli	t2,t2,0x3
    15de:	0000                	unimp
    15e0:	039e                	slli	t2,t2,0x7
    15e2:	0000                	unimp
    15e4:	0001                	nop
    15e6:	9e5a                	add	t3,t3,s6
    15e8:	a2000003          	lb	zero,-1504(zero) # fffffa20 <_stack_start+0xfffefa20>
    15ec:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    15f0:	7a00                	flw	fs0,48(a2)
    15f2:	9f7f                	0x9f7f
    15f4:	03a2                	slli	t2,t2,0x8
    15f6:	0000                	unimp
    15f8:	03a4                	addi	s1,sp,456
    15fa:	0000                	unimp
    15fc:	0001                	nop
    15fe:	d45a                	sw	s6,40(sp)
    1600:	ea000003          	lb	zero,-352(zero) # fffffea0 <_stack_start+0xfffefea0>
    1604:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1608:	6500                	flw	fs0,8(a0)
    160a:	0422                	slli	s0,s0,0x8
    160c:	0000                	unimp
    160e:	0430                	addi	a2,sp,520
    1610:	0000                	unimp
    1612:	0001                	nop
    1614:	0065                	c.nop	25
    1616:	0000                	unimp
    1618:	0000                	unimp
    161a:	0000                	unimp
    161c:	4e00                	lw	s0,24(a2)
    161e:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x130>
    1622:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1626:	5d00                	lw	s0,56(a0)
    1628:	0356                	slli	t1,t1,0x15
    162a:	0000                	unimp
    162c:	0372                	slli	t1,t1,0x1c
    162e:	0000                	unimp
    1630:	0001                	nop
    1632:	a46d                	j	18dc <ti_2+0x68>
    1634:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1638:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    163c:	5d00                	lw	s0,56(a0)
    163e:	03f8                	addi	a4,sp,460
    1640:	0000                	unimp
    1642:	0422                	slli	s0,s0,0x8
    1644:	0000                	unimp
    1646:	0001                	nop
    1648:	005d                	c.nop	23
    164a:	0000                	unimp
    164c:	0000                	unimp
    164e:	0000                	unimp
    1650:	a400                	fsd	fs0,8(s0)
    1652:	b6000003          	lb	zero,-1184(zero) # fffffb60 <_stack_start+0xfffefb60>
    1656:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    165a:	5e00                	lw	s0,56(a2)
    165c:	03b6                	slli	t2,t2,0xd
    165e:	0000                	unimp
    1660:	03bc                	addi	a5,sp,456
    1662:	0000                	unimp
    1664:	017e0003          	lb	zero,23(t3) # 16017 <_stack_start+0x6017>
    1668:	bc9f 0003 c600      	0xc6000003bc9f
    166e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1672:	5e00                	lw	s0,56(a2)
    1674:	03fc                	addi	a5,sp,460
    1676:	0000                	unimp
    1678:	040e                	slli	s0,s0,0x3
    167a:	0000                	unimp
    167c:	0001                	nop
    167e:	0e5e                	slli	t3,t3,0x17
    1680:	0004                	0x4
    1682:	1600                	addi	s0,sp,800
    1684:	0004                	0x4
    1686:	0300                	addi	s0,sp,384
    1688:	7e00                	flw	fs0,56(a2)
    168a:	9f01                	0x9f01
    168c:	0416                	slli	s0,s0,0x5
    168e:	0000                	unimp
    1690:	0422                	slli	s0,s0,0x8
    1692:	0000                	unimp
    1694:	0001                	nop
    1696:	005e                	c.slli	zero,0x17
    1698:	0000                	unimp
    169a:	0000                	unimp
    169c:	0000                	unimp
    169e:	d800                	sw	s0,48(s0)
    16a0:	f8000003          	lb	zero,-128(zero) # ffffff80 <_stack_start+0xfffeff80>
    16a4:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    16a8:	0300                	addi	s0,sp,384
    16aa:	13c4                	addi	s1,sp,484
    16ac:	0000                	unimp
    16ae:	009f 0000 0000      	0x9f
    16b4:	0000                	unimp
    16b6:	1e00                	addi	s0,sp,816
    16b8:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    16bc:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16c0:	7b00                	flw	fs0,48(a4)
    16c2:	f800                	fsw	fs0,48(s0)
    16c4:	22000003          	lb	zero,544(zero) # 220 <polymult+0x148>
    16c8:	0004                	0x4
    16ca:	0200                	addi	s0,sp,256
    16cc:	7b00                	flw	fs0,48(a4)
	...
    16d6:	2000                	fld	fs0,0(s0)
    16d8:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    16dc:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16e0:	7200                	flw	fs0,32(a2)
    16e2:	f800                	fsw	fs0,48(s0)
    16e4:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x36>
    16e8:	0004                	0x4
    16ea:	0200                	addi	s0,sp,256
    16ec:	7200                	flw	fs0,32(a2)
	...
    16f6:	1e00                	addi	s0,sp,816
    16f8:	4e000003          	lb	zero,1248(zero) # 4e0 <polydiv+0xb0>
    16fc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1700:	5d00                	lw	s0,56(a0)
    1702:	034e                	slli	t1,t1,0x13
    1704:	0000                	unimp
    1706:	0356                	slli	t1,t1,0x15
    1708:	0000                	unimp
    170a:	7f790003          	lb	zero,2039(s2)
    170e:	569f 0003 a400      	0xa4000003569f
    1714:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1718:	5d00                	lw	s0,56(a0)
    171a:	03a4                	addi	s1,sp,456
    171c:	0000                	unimp
    171e:	03e2                	slli	t2,t2,0x18
    1720:	0000                	unimp
    1722:	7f790003          	lb	zero,2039(s2)
    1726:	e29f 0003 f800      	0xf8000003e29f
    172c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1730:	f300                	fsw	fs0,32(a4)
    1732:	5d01                	li	s10,-32
    1734:	1c31                	addi	s8,s8,-20
    1736:	f89f 0003 3000      	0x30000003f89f
    173c:	0004                	0x4
    173e:	0300                	addi	s0,sp,384
    1740:	7900                	flw	fs0,48(a0)
    1742:	9f7f                	0x9f7f
	...
    174c:	02e4                	addi	s1,sp,332
    174e:	0000                	unimp
    1750:	03e6                	slli	t2,t2,0x19
    1752:	0000                	unimp
    1754:	0001                	nop
    1756:	0003e663          	bltu	t2,zero,1762 <result+0x146>
    175a:	f800                	fsw	fs0,48(s0)
    175c:	0a000003          	lb	zero,160(zero) # a0 <array_add+0xe>
    1760:	f300                	fsw	fs0,32(a4)
    1762:	5b01                	li	s6,-32
    1764:	225d01f3          	0x225d01f3
    1768:	1c31                	addi	s8,s8,-20
    176a:	f89f 0003 3000      	0x30000003f89f
    1770:	0004                	0x4
    1772:	0100                	addi	s0,sp,128
    1774:	6300                	flw	fs0,0(a4)
	...
    177e:	031e                	slli	t1,t1,0x7
    1780:	0000                	unimp
    1782:	03d4                	addi	a3,sp,452
    1784:	0000                	unimp
    1786:	0001                	nop
    1788:	d46c                	sw	a1,108(s0)
    178a:	f8000003          	lb	zero,-128(zero) # ffffff80 <_stack_start+0xfffeff80>
    178e:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    1792:	f300                	fsw	fs0,32(a4)
    1794:	5b01                	li	s6,-32
    1796:	1c31                	addi	s8,s8,-20
    1798:	f89f 0003 2200      	0x22000003f89f
    179e:	0004                	0x4
    17a0:	0100                	addi	s0,sp,128
    17a2:	6c00                	flw	fs0,24(s0)
    17a4:	0422                	slli	s0,s0,0x8
    17a6:	0000                	unimp
    17a8:	0430                	addi	a2,sp,520
    17aa:	0000                	unimp
    17ac:	0006                	c.slli	zero,0x1
    17ae:	315b01f3          	0x315b01f3
    17b2:	9f1c                	0x9f1c
	...
    17bc:	031e                	slli	t1,t1,0x7
    17be:	0000                	unimp
    17c0:	034e                	slli	t1,t1,0x13
    17c2:	0000                	unimp
    17c4:	0001                	nop
    17c6:	4e5d                	li	t3,23
    17c8:	56000003          	lb	zero,1376(zero) # 560 <polydiv+0x130>
    17cc:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17d0:	7900                	flw	fs0,48(a0)
    17d2:	9f7f                	0x9f7f
    17d4:	0356                	slli	t1,t1,0x15
    17d6:	0000                	unimp
    17d8:	03a4                	addi	s1,sp,456
    17da:	0000                	unimp
    17dc:	0001                	nop
    17de:	a45d                	j	1a84 <random_keys+0x80>
    17e0:	e2000003          	lb	zero,-480(zero) # fffffe20 <_stack_start+0xfffefe20>
    17e4:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17e8:	7900                	flw	fs0,48(a0)
    17ea:	9f7f                	0x9f7f
    17ec:	03e2                	slli	t2,t2,0x18
    17ee:	0000                	unimp
    17f0:	03f8                	addi	a4,sp,460
    17f2:	0000                	unimp
    17f4:	0006                	c.slli	zero,0x1
    17f6:	315d01f3          	0x315d01f3
    17fa:	9f1c                	0x9f1c
    17fc:	03f8                	addi	a4,sp,460
    17fe:	0000                	unimp
    1800:	0430                	addi	a2,sp,520
    1802:	0000                	unimp
    1804:	7f790003          	lb	zero,2039(s2)
    1808:	009f 0000 0000      	0x9f
    180e:	0000                	unimp
    1810:	d800                	sw	s0,48(s0)
    1812:	0000                	unimp
    1814:	6400                	flw	fs0,8(s0)
    1816:	0001                	nop
    1818:	0100                	addi	s0,sp,128
    181a:	5a00                	lw	s0,48(a2)
    181c:	0164                	addi	s1,sp,140
    181e:	0000                	unimp
    1820:	019e                	slli	gp,gp,0x7
    1822:	0000                	unimp
    1824:	0004                	0x4
    1826:	9f5a01f3          	0x9f5a01f3
    182a:	019e                	slli	gp,gp,0x7
    182c:	0000                	unimp
    182e:	01d4                	addi	a3,sp,196
    1830:	0000                	unimp
    1832:	0001                	nop
    1834:	d45a                	sw	s6,40(sp)
    1836:	0001                	nop
    1838:	ca00                	sw	s0,16(a2)
    183a:	0002                	c.slli64	zero
    183c:	0400                	addi	s0,sp,512
    183e:	f300                	fsw	fs0,32(a4)
    1840:	5a01                	li	s4,-32
    1842:	009f 0000 0000      	0x9f
    1848:	0000                	unimp
    184a:	d800                	sw	s0,48(s0)
    184c:	0000                	unimp
    184e:	2200                	fld	fs0,0(a2)
    1850:	0001                	nop
    1852:	0100                	addi	s0,sp,128
    1854:	5b00                	lw	s0,48(a4)
    1856:	0122                	slli	sp,sp,0x8
    1858:	0000                	unimp
    185a:	0169                	addi	sp,sp,26
    185c:	0000                	unimp
    185e:	0001                	nop
    1860:	6960                	flw	fs0,84(a0)
    1862:	0001                	nop
    1864:	9e00                	0x9e00
    1866:	0001                	nop
    1868:	0300                	addi	s0,sp,384
    186a:	8600                	0x8600
    186c:	9f01                	0x9f01
    186e:	019e                	slli	gp,gp,0x7
    1870:	0000                	unimp
    1872:	01d4                	addi	a3,sp,196
    1874:	0000                	unimp
    1876:	0001                	nop
    1878:	d460                	sw	s0,108(s0)
    187a:	0001                	nop
    187c:	2000                	fld	fs0,0(s0)
    187e:	0002                	c.slli64	zero
    1880:	0300                	addi	s0,sp,384
    1882:	8600                	0x8600
    1884:	9f01                	0x9f01
    1886:	0220                	addi	s0,sp,264
    1888:	0000                	unimp
    188a:	02ca                	slli	t0,t0,0x12
    188c:	0000                	unimp
    188e:	0004                	0x4
    1890:	9f5b01f3          	0x9f5b01f3
	...
    189c:	00d8                	addi	a4,sp,68
    189e:	0000                	unimp
    18a0:	014e                	slli	sp,sp,0x13
    18a2:	0000                	unimp
    18a4:	0001                	nop
    18a6:	4e5c                	lw	a5,28(a2)
    18a8:	0001                	nop
    18aa:	2a00                	fld	fs0,16(a2)
    18ac:	0002                	c.slli64	zero
    18ae:	0100                	addi	s0,sp,128
    18b0:	6b00                	flw	fs0,16(a4)
    18b2:	022a                	slli	tp,tp,0xa
    18b4:	0000                	unimp
    18b6:	0236                	slli	tp,tp,0xd
    18b8:	0000                	unimp
    18ba:	0004                	0x4
    18bc:	9f5c01f3          	0x9f5c01f3
    18c0:	0236                	slli	tp,tp,0xd
    18c2:	0000                	unimp
    18c4:	02ca                	slli	t0,t0,0x12
    18c6:	0000                	unimp
    18c8:	0001                	nop
    18ca:	0000006b          	0x6b
    18ce:	0000                	unimp
    18d0:	0000                	unimp
    18d2:	d800                	sw	s0,48(s0)
    18d4:	0000                	unimp
    18d6:	e400                	fsw	fs0,8(s0)
    18d8:	0000                	unimp
    18da:	0100                	addi	s0,sp,128
    18dc:	5d00                	lw	s0,56(a0)
    18de:	00e4                	addi	s1,sp,76
    18e0:	0000                	unimp
    18e2:	0218                	addi	a4,sp,256
    18e4:	0000                	unimp
    18e6:	0001                	nop
    18e8:	1862                	slli	a6,a6,0x38
    18ea:	0002                	c.slli64	zero
    18ec:	3600                	fld	fs0,40(a2)
    18ee:	0002                	c.slli64	zero
    18f0:	0400                	addi	s0,sp,512
    18f2:	f300                	fsw	fs0,32(a4)
    18f4:	5d01                	li	s10,-32
    18f6:	369f 0002 ca00      	0xca000002369f
    18fc:	0002                	c.slli64	zero
    18fe:	0100                	addi	s0,sp,128
    1900:	6200                	flw	fs0,0(a2)
	...
    190a:	00d8                	addi	a4,sp,68
    190c:	0000                	unimp
    190e:	0126                	slli	sp,sp,0x9
    1910:	0000                	unimp
    1912:	0001                	nop
    1914:	265e                	fld	fa2,464(sp)
    1916:	0001                	nop
    1918:	6900                	flw	fs0,16(a0)
    191a:	0001                	nop
    191c:	0100                	addi	s0,sp,128
    191e:	5b00                	lw	s0,48(a4)
    1920:	0169                	addi	sp,sp,26
    1922:	0000                	unimp
    1924:	017c                	addi	a5,sp,140
    1926:	0000                	unimp
    1928:	b4780003          	lb	zero,-1209(a6)
    192c:	7c7f                	0x7c7f
    192e:	0001                	nop
    1930:	9e00                	0x9e00
    1932:	0001                	nop
    1934:	0400                	addi	s0,sp,512
    1936:	f300                	fsw	fs0,32(a4)
    1938:	5e01                	li	t3,-32
    193a:	9e9f 0001 d400      	0xd40000019e9f
    1940:	0001                	nop
    1942:	0100                	addi	s0,sp,128
    1944:	5b00                	lw	s0,48(a4)
    1946:	01d4                	addi	a3,sp,196
    1948:	0000                	unimp
    194a:	01e6                	slli	gp,gp,0x19
    194c:	0000                	unimp
    194e:	b4780003          	lb	zero,-1209(a6)
    1952:	e67f                	0xe67f
    1954:	0001                	nop
    1956:	ca00                	sw	s0,16(a2)
    1958:	0002                	c.slli64	zero
    195a:	0400                	addi	s0,sp,512
    195c:	f300                	fsw	fs0,32(a4)
    195e:	5e01                	li	t3,-32
    1960:	009f 0000 0000      	0x9f
    1966:	0000                	unimp
    1968:	d800                	sw	s0,48(s0)
    196a:	0000                	unimp
    196c:	1600                	addi	s0,sp,800
    196e:	0001                	nop
    1970:	0100                	addi	s0,sp,128
    1972:	5f00                	lw	s0,56(a4)
    1974:	0116                	slli	sp,sp,0x5
    1976:	0000                	unimp
    1978:	0214                	addi	a3,sp,256
    197a:	0000                	unimp
    197c:	b8780003          	lb	zero,-1145(a6)
    1980:	147f                	0x147f
    1982:	0002                	c.slli64	zero
    1984:	ca00                	sw	s0,16(a2)
    1986:	0002                	c.slli64	zero
    1988:	0300                	addi	s0,sp,384
    198a:	9100                	0x9100
    198c:	7fb8                	flw	fa4,120(a5)
	...
    1996:	013e                	slli	sp,sp,0xf
    1998:	0000                	unimp
    199a:	0156                	slli	sp,sp,0x15
    199c:	0000                	unimp
    199e:	0002                	c.slli64	zero
    19a0:	0089                	addi	ra,ra,2
    19a2:	0156                	slli	sp,sp,0x15
    19a4:	0000                	unimp
    19a6:	01ee                	slli	gp,gp,0x1b
    19a8:	0000                	unimp
    19aa:	0002                	c.slli64	zero
    19ac:	0084                	addi	s1,sp,64
    19ae:	01ee                	slli	gp,gp,0x1b
    19b0:	0000                	unimp
    19b2:	0226                	slli	tp,tp,0x9
    19b4:	0000                	unimp
    19b6:	0002                	c.slli64	zero
    19b8:	0089                	addi	ra,ra,2
    19ba:	0236                	slli	tp,tp,0xd
    19bc:	0000                	unimp
    19be:	0286                	slli	t0,t0,0x1
    19c0:	0000                	unimp
    19c2:	0002                	c.slli64	zero
    19c4:	0084                	addi	s1,sp,64
    19c6:	0286                	slli	t0,t0,0x1
    19c8:	0000                	unimp
    19ca:	02ca                	slli	t0,t0,0x12
    19cc:	0000                	unimp
    19ce:	0002                	c.slli64	zero
    19d0:	0089                	addi	ra,ra,2
	...
    19da:	0144                	addi	s1,sp,132
    19dc:	0000                	unimp
    19de:	0156                	slli	sp,sp,0x15
    19e0:	0000                	unimp
    19e2:	0002                	c.slli64	zero
    19e4:	9f30                	0x9f30
    19e6:	0156                	slli	sp,sp,0x15
    19e8:	0000                	unimp
    19ea:	015c                	addi	a5,sp,132
    19ec:	0000                	unimp
    19ee:	0001                	nop
    19f0:	5c5c                	lw	a5,60(s0)
    19f2:	0001                	nop
    19f4:	6900                	flw	fs0,16(a0)
    19f6:	0001                	nop
    19f8:	0100                	addi	s0,sp,128
    19fa:	5e00                	lw	s0,56(a2)
    19fc:	016a                	slli	sp,sp,0x1a
    19fe:	0000                	unimp
    1a00:	0170                	addi	a2,sp,140
    1a02:	0000                	unimp
    1a04:	0002                	c.slli64	zero
    1a06:	9f30                	0x9f30
    1a08:	0170                	addi	a2,sp,140
    1a0a:	0000                	unimp
    1a0c:	017d                	addi	sp,sp,31
    1a0e:	0000                	unimp
    1a10:	0001                	nop
    1a12:	9e5e                	add	t3,t3,s7
    1a14:	0001                	nop
    1a16:	c000                	sw	s0,0(s0)
    1a18:	0001                	nop
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	5c00                	lw	s0,56(s0)
    1a1e:	01c0                	addi	s0,sp,196
    1a20:	0000                	unimp
    1a22:	01ce                	slli	gp,gp,0x13
    1a24:	0000                	unimp
    1a26:	0001                	nop
    1a28:	ce5e                	sw	s7,28(sp)
    1a2a:	0001                	nop
    1a2c:	d200                	sw	s0,32(a2)
    1a2e:	0001                	nop
    1a30:	0300                	addi	s0,sp,384
    1a32:	7e00                	flw	fs0,56(a2)
    1a34:	9f7f                	0x9f7f
    1a36:	01d2                	slli	gp,gp,0x14
    1a38:	0000                	unimp
    1a3a:	01e2                	slli	gp,gp,0x18
    1a3c:	0000                	unimp
    1a3e:	0001                	nop
    1a40:	e25e                	fsw	fs7,4(sp)
    1a42:	0001                	nop
    1a44:	e400                	fsw	fs0,8(s0)
    1a46:	0001                	nop
    1a48:	0300                	addi	s0,sp,384
    1a4a:	7e00                	flw	fs0,56(a2)
    1a4c:	9f7f                	0x9f7f
    1a4e:	01e4                	addi	s1,sp,204
    1a50:	0000                	unimp
    1a52:	01e6                	slli	gp,gp,0x19
    1a54:	0000                	unimp
    1a56:	0001                	nop
    1a58:	ee5e                	fsw	fs7,28(sp)
    1a5a:	0001                	nop
    1a5c:	fc00                	fsw	fs0,56(s0)
    1a5e:	0001                	nop
    1a60:	0100                	addi	s0,sp,128
    1a62:	5e00                	lw	s0,56(a2)
    1a64:	0286                	slli	t0,t0,0x1
    1a66:	0000                	unimp
    1a68:	02a4                	addi	s1,sp,328
    1a6a:	0000                	unimp
    1a6c:	0001                	nop
    1a6e:	a45e                	fsd	fs7,8(sp)
    1a70:	0002                	c.slli64	zero
    1a72:	b000                	fsd	fs0,32(s0)
    1a74:	0002                	c.slli64	zero
    1a76:	0100                	addi	s0,sp,128
    1a78:	5c00                	lw	s0,56(s0)
    1a7a:	02b0                	addi	a2,sp,328
    1a7c:	0000                	unimp
    1a7e:	02bc                	addi	a5,sp,328
    1a80:	0000                	unimp
    1a82:	7f7c0003          	lb	zero,2039(s8) # fffe27f7 <_stack_start+0xfffd27f7>
    1a86:	bc9f 0002 c600      	0xc6000002bc9f
    1a8c:	0002                	c.slli64	zero
    1a8e:	0100                	addi	s0,sp,128
    1a90:	5c00                	lw	s0,56(s0)
	...
    1a9a:	0196                	slli	gp,gp,0x5
    1a9c:	0000                	unimp
    1a9e:	019e                	slli	gp,gp,0x7
    1aa0:	0000                	unimp
    1aa2:	0001                	nop
    1aa4:	00019e67          	0x19e67
    1aa8:	ba00                	fsd	fs0,48(a2)
    1aaa:	0001                	nop
    1aac:	0100                	addi	s0,sp,128
    1aae:	5e00                	lw	s0,56(a2)
    1ab0:	01e8                	addi	a0,sp,204
    1ab2:	0000                	unimp
    1ab4:	01ee                	slli	gp,gp,0x1b
    1ab6:	0000                	unimp
    1ab8:	0001                	nop
    1aba:	0001fc67          	0x1fc67
    1abe:	0b00                	addi	s0,sp,400
    1ac0:	0002                	c.slli64	zero
    1ac2:	0100                	addi	s0,sp,128
    1ac4:	5e00                	lw	s0,56(a2)
    1ac6:	0236                	slli	tp,tp,0xd
    1ac8:	0000                	unimp
    1aca:	0286                	slli	t0,t0,0x1
    1acc:	0000                	unimp
    1ace:	0001                	nop
    1ad0:	00028667          	jalr	a2,t0 # 1194300 <_stack_start+0x1184300>
    1ad4:	8a00                	0x8a00
    1ad6:	0002                	c.slli64	zero
    1ad8:	0100                	addi	s0,sp,128
    1ada:	5c00                	lw	s0,56(s0)
    1adc:	028a                	slli	t0,t0,0x2
    1ade:	0000                	unimp
    1ae0:	0294                	addi	a3,sp,320
    1ae2:	0000                	unimp
    1ae4:	7f7c0003          	lb	zero,2039(s8)
    1ae8:	949f 0002 9e00      	0x9e000002949f
    1aee:	0002                	c.slli64	zero
    1af0:	0100                	addi	s0,sp,128
    1af2:	5c00                	lw	s0,56(s0)
    1af4:	02a4                	addi	s1,sp,328
    1af6:	0000                	unimp
    1af8:	02ca                	slli	t0,t0,0x12
    1afa:	0000                	unimp
    1afc:	0001                	nop
    1afe:	005e                	c.slli	zero,0x17
    1b00:	0000                	unimp
    1b02:	0000                	unimp
    1b04:	0000                	unimp
    1b06:	3600                	fld	fs0,40(a2)
    1b08:	0002                	c.slli64	zero
    1b0a:	4800                	lw	s0,16(s0)
    1b0c:	0002                	c.slli64	zero
    1b0e:	0100                	addi	s0,sp,128
    1b10:	5e00                	lw	s0,56(a2)
    1b12:	0248                	addi	a0,sp,260
    1b14:	0000                	unimp
    1b16:	0250                	addi	a2,sp,260
    1b18:	0000                	unimp
    1b1a:	017e0003          	lb	zero,23(t3)
    1b1e:	509f 0002 5c00      	0x5c000002509f
    1b24:	0002                	c.slli64	zero
    1b26:	0100                	addi	s0,sp,128
    1b28:	5e00                	lw	s0,56(a2)
    1b2a:	0260                	addi	s0,sp,268
    1b2c:	0000                	unimp
    1b2e:	0272                	slli	tp,tp,0x1c
    1b30:	0000                	unimp
    1b32:	0001                	nop
    1b34:	725e                	flw	ft4,244(sp)
    1b36:	0002                	c.slli64	zero
    1b38:	7a00                	flw	fs0,48(a2)
    1b3a:	0002                	c.slli64	zero
    1b3c:	0300                	addi	s0,sp,384
    1b3e:	7e00                	flw	fs0,56(a2)
    1b40:	9f01                	0x9f01
    1b42:	027a                	slli	tp,tp,0x1e
    1b44:	0000                	unimp
    1b46:	0286                	slli	t0,t0,0x1
    1b48:	0000                	unimp
    1b4a:	0001                	nop
    1b4c:	005e                	c.slli	zero,0x17
    1b4e:	0000                	unimp
    1b50:	0000                	unimp
    1b52:	0000                	unimp
    1b54:	0c00                	addi	s0,sp,528
    1b56:	0002                	c.slli64	zero
    1b58:	3600                	fld	fs0,40(a2)
    1b5a:	0002                	c.slli64	zero
    1b5c:	0600                	addi	s0,sp,768
    1b5e:	0300                	addi	s0,sp,384
    1b60:	116c                	addi	a1,sp,172
    1b62:	0000                	unimp
    1b64:	009f 0000 0000      	0x9f
    1b6a:	0000                	unimp
    1b6c:	4200                	lw	s0,0(a2)
    1b6e:	0001                	nop
    1b70:	1e00                	addi	s0,sp,816
    1b72:	0002                	c.slli64	zero
    1b74:	0200                	addi	s0,sp,256
    1b76:	8500                	0x8500
    1b78:	1e00                	addi	s0,sp,816
    1b7a:	0002                	c.slli64	zero
    1b7c:	2000                	fld	fs0,0(s0)
    1b7e:	0002                	c.slli64	zero
    1b80:	0c00                	addi	s0,sp,528
    1b82:	8900                	0x8900
    1b84:	8600                	0x8600
    1b86:	3201                	jal	1486 <product2+0xc2>
    1b88:	2324                	fld	fs1,64(a4)
    1b8a:	1af0090f          	0x1af0090f
    1b8e:	201c                	fld	fa5,0(s0)
    1b90:	0002                	c.slli64	zero
    1b92:	2600                	fld	fs0,8(a2)
    1b94:	0002                	c.slli64	zero
    1b96:	0d00                	addi	s0,sp,656
    1b98:	8900                	0x8900
    1b9a:	f300                	fsw	fs0,32(a4)
    1b9c:	5b01                	li	s6,-32
    1b9e:	2432                	fld	fs0,264(sp)
    1ba0:	f0090f23          	sb	zero,-226(s2)
    1ba4:	1c1a                	slli	s8,s8,0x26
    1ba6:	0236                	slli	tp,tp,0xd
    1ba8:	0000                	unimp
    1baa:	02ca                	slli	t0,t0,0x12
    1bac:	0000                	unimp
    1bae:	0002                	c.slli64	zero
    1bb0:	0085                	addi	ra,ra,1
	...
    1bba:	0144                	addi	s1,sp,132
    1bbc:	0000                	unimp
    1bbe:	0210                	addi	a2,sp,256
    1bc0:	0000                	unimp
    1bc2:	0002                	c.slli64	zero
    1bc4:	0072                	c.slli	zero,0x1c
    1bc6:	0210                	addi	a2,sp,256
    1bc8:	0000                	unimp
    1bca:	0218                	addi	a4,sp,256
    1bcc:	0000                	unimp
    1bce:	000c                	0xc
    1bd0:	0085                	addi	ra,ra,1
    1bd2:	0082                	c.slli64	ra
    1bd4:	2432                	fld	fs0,264(sp)
    1bd6:	f0090f23          	sb	zero,-226(s2)
    1bda:	1c1a                	slli	s8,s8,0x26
    1bdc:	0218                	addi	a4,sp,256
    1bde:	0000                	unimp
    1be0:	021e                	slli	tp,tp,0x7
    1be2:	0000                	unimp
    1be4:	000d                	c.nop	3
    1be6:	0085                	addi	ra,ra,1
    1be8:	325d01f3          	0x325d01f3
    1bec:	2324                	fld	fs1,64(a4)
    1bee:	1af0090f          	0x1af0090f
    1bf2:	1e1c                	addi	a5,sp,816
    1bf4:	0002                	c.slli64	zero
    1bf6:	2000                	fld	fs0,0(s0)
    1bf8:	0002                	c.slli64	zero
    1bfa:	1700                	addi	s0,sp,928
    1bfc:	8900                	0x8900
    1bfe:	8600                	0x8600
    1c00:	3201                	jal	1500 <product2+0x13c>
    1c02:	2324                	fld	fs1,64(a4)
    1c04:	1af0090f          	0x1af0090f
    1c08:	f31c                	fsw	fa5,32(a4)
    1c0a:	5d01                	li	s10,-32
    1c0c:	2432                	fld	fs0,264(sp)
    1c0e:	f0090f23          	sb	zero,-226(s2)
    1c12:	1c1a                	slli	s8,s8,0x26
    1c14:	0220                	addi	s0,sp,264
    1c16:	0000                	unimp
    1c18:	0226                	slli	tp,tp,0x9
    1c1a:	0000                	unimp
    1c1c:	0018                	0x18
    1c1e:	0089                	addi	ra,ra,2
    1c20:	325b01f3          	0x325b01f3
    1c24:	2324                	fld	fs1,64(a4)
    1c26:	1af0090f          	0x1af0090f
    1c2a:	f31c                	fsw	fa5,32(a4)
    1c2c:	5d01                	li	s10,-32
    1c2e:	2432                	fld	fs0,264(sp)
    1c30:	f0090f23          	sb	zero,-226(s2)
    1c34:	1c1a                	slli	s8,s8,0x26
    1c36:	0236                	slli	tp,tp,0xd
    1c38:	0000                	unimp
    1c3a:	02ca                	slli	t0,t0,0x12
    1c3c:	0000                	unimp
    1c3e:	0002                	c.slli64	zero
    1c40:	0072                	c.slli	zero,0x1c
	...
    1c4a:	013e                	slli	sp,sp,0xf
    1c4c:	0000                	unimp
    1c4e:	0196                	slli	gp,gp,0x5
    1c50:	0000                	unimp
    1c52:	0001                	nop
    1c54:	00019667          	0x19667
    1c58:	9e00                	0x9e00
    1c5a:	0001                	nop
    1c5c:	0300                	addi	s0,sp,384
    1c5e:	8200                	0x8200
    1c60:	9f7f                	0x9f7f
    1c62:	019e                	slli	gp,gp,0x7
    1c64:	0000                	unimp
    1c66:	01e8                	addi	a0,sp,204
    1c68:	0000                	unimp
    1c6a:	0001                	nop
    1c6c:	0001e867          	0x1e867
    1c70:	1800                	addi	s0,sp,48
    1c72:	0002                	c.slli64	zero
    1c74:	0300                	addi	s0,sp,384
    1c76:	8200                	0x8200
    1c78:	9f7f                	0x9f7f
    1c7a:	0218                	addi	a4,sp,256
    1c7c:	0000                	unimp
    1c7e:	0236                	slli	tp,tp,0xd
    1c80:	0000                	unimp
    1c82:	0006                	c.slli	zero,0x1
    1c84:	315d01f3          	0x315d01f3
    1c88:	9f1c                	0x9f1c
    1c8a:	0236                	slli	tp,tp,0xd
    1c8c:	0000                	unimp
    1c8e:	02ca                	slli	t0,t0,0x12
    1c90:	0000                	unimp
    1c92:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x1dc>
    1c96:	009f 0000 0000      	0x9f
    1c9c:	0000                	unimp
    1c9e:	f000                	fsw	fs0,32(s0)
    1ca0:	0000                	unimp
    1ca2:	2400                	fld	fs0,8(s0)
    1ca4:	0002                	c.slli64	zero
    1ca6:	0100                	addi	s0,sp,128
    1ca8:	6800                	flw	fs0,16(s0)
    1caa:	0224                	addi	s1,sp,264
    1cac:	0000                	unimp
    1cae:	0236                	slli	tp,tp,0xd
    1cb0:	0000                	unimp
    1cb2:	000a                	c.slli	zero,0x2
    1cb4:	f35b01f3          	0xf35b01f3
    1cb8:	5d01                	li	s10,-32
    1cba:	3122                	fld	ft2,40(sp)
    1cbc:	9f1c                	0x9f1c
    1cbe:	0236                	slli	tp,tp,0xd
    1cc0:	0000                	unimp
    1cc2:	02ca                	slli	t0,t0,0x12
    1cc4:	0000                	unimp
    1cc6:	0001                	nop
    1cc8:	0068                	addi	a0,sp,12
    1cca:	0000                	unimp
    1ccc:	0000                	unimp
    1cce:	0000                	unimp
    1cd0:	4200                	lw	s0,0(a2)
    1cd2:	0001                	nop
    1cd4:	2000                	fld	fs0,0(s0)
    1cd6:	0002                	c.slli64	zero
    1cd8:	0100                	addi	s0,sp,128
    1cda:	6600                	flw	fs0,8(a2)
    1cdc:	0220                	addi	s0,sp,264
    1cde:	0000                	unimp
    1ce0:	0236                	slli	tp,tp,0xd
    1ce2:	0000                	unimp
    1ce4:	0006                	c.slli	zero,0x1
    1ce6:	315b01f3          	0x315b01f3
    1cea:	9f1c                	0x9f1c
    1cec:	0236                	slli	tp,tp,0xd
    1cee:	0000                	unimp
    1cf0:	02ca                	slli	t0,t0,0x12
    1cf2:	0000                	unimp
    1cf4:	0001                	nop
    1cf6:	0066                	c.slli	zero,0x19
    1cf8:	0000                	unimp
    1cfa:	0000                	unimp
    1cfc:	0000                	unimp
    1cfe:	4200                	lw	s0,0(a2)
    1d00:	0001                	nop
    1d02:	9600                	0x9600
    1d04:	0001                	nop
    1d06:	0100                	addi	s0,sp,128
    1d08:	6700                	flw	fs0,8(a4)
    1d0a:	0196                	slli	gp,gp,0x5
    1d0c:	0000                	unimp
    1d0e:	019e                	slli	gp,gp,0x7
    1d10:	0000                	unimp
    1d12:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x1dc>
    1d16:	9e9f 0001 e800      	0xe80000019e9f
    1d1c:	0001                	nop
    1d1e:	0100                	addi	s0,sp,128
    1d20:	6700                	flw	fs0,8(a4)
    1d22:	01e8                	addi	a0,sp,204
    1d24:	0000                	unimp
    1d26:	0218                	addi	a4,sp,256
    1d28:	0000                	unimp
    1d2a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x1dc>
    1d2e:	189f 0002 3600      	0x36000002189f
    1d34:	0002                	c.slli64	zero
    1d36:	0600                	addi	s0,sp,768
    1d38:	f300                	fsw	fs0,32(a4)
    1d3a:	5d01                	li	s10,-32
    1d3c:	1c31                	addi	s8,s8,-20
    1d3e:	369f 0002 ca00      	0xca000002369f
    1d44:	0002                	c.slli64	zero
    1d46:	0300                	addi	s0,sp,384
    1d48:	8200                	0x8200
    1d4a:	9f7f                	0x9f7f
	...
    1d54:	00ba                	slli	ra,ra,0xe
    1d56:	0000                	unimp
    1d58:	00c0                	addi	s0,sp,68
    1d5a:	0000                	unimp
    1d5c:	0001                	nop
    1d5e:	c05c                	sw	a5,4(s0)
    1d60:	0000                	unimp
    1d62:	d800                	sw	s0,48(s0)
    1d64:	0000                	unimp
    1d66:	0400                	addi	s0,sp,512
    1d68:	f300                	fsw	fs0,32(a4)
    1d6a:	5c01                	li	s8,-32
    1d6c:	009f 0000 0000      	0x9f
    1d72:	0000                	unimp
    1d74:	ba00                	fsd	fs0,48(a2)
    1d76:	0000                	unimp
    1d78:	c400                	sw	s0,8(s0)
    1d7a:	0000                	unimp
    1d7c:	0200                	addi	s0,sp,256
    1d7e:	3000                	fld	fs0,32(s0)
    1d80:	c49f 0000 d800      	0xd8000000c49f
    1d86:	0000                	unimp
    1d88:	0100                	addi	s0,sp,128
    1d8a:	5f00                	lw	s0,56(a4)
	...
    1d94:	00ca                	slli	ra,ra,0x12
    1d96:	0000                	unimp
    1d98:	00d4                	addi	a3,sp,68
    1d9a:	0000                	unimp
    1d9c:	0001                	nop
    1d9e:	0000005b          	0x5b
    1da2:	0000                	unimp
    1da4:	0000                	unimp
    1da6:	ca00                	sw	s0,16(a2)
    1da8:	0000                	unimp
    1daa:	d400                	sw	s0,40(s0)
    1dac:	0000                	unimp
    1dae:	0800                	addi	s0,sp,16
    1db0:	7f00                	flw	fs0,56(a4)
    1db2:	3c00                	fld	fs0,56(s0)
    1db4:	7a1e                	flw	fs4,228(sp)
    1db6:	2200                	fld	fs0,0(a2)
    1db8:	009f 0000 0000      	0x9f
    1dbe:	0000                	unimp
    1dc0:	9200                	0x9200
    1dc2:	0000                	unimp
    1dc4:	9800                	0x9800
    1dc6:	0000                	unimp
    1dc8:	0100                	addi	s0,sp,128
    1dca:	5c00                	lw	s0,56(s0)
    1dcc:	0098                	addi	a4,sp,64
    1dce:	0000                	unimp
    1dd0:	00b4                	addi	a3,sp,72
    1dd2:	0000                	unimp
    1dd4:	0004                	0x4
    1dd6:	9f5c01f3          	0x9f5c01f3
	...
    1de2:	0092                	slli	ra,ra,0x4
    1de4:	0000                	unimp
    1de6:	009c                	addi	a5,sp,64
    1de8:	0000                	unimp
    1dea:	0002                	c.slli64	zero
    1dec:	9f30                	0x9f30
    1dee:	009c                	addi	a5,sp,64
    1df0:	0000                	unimp
    1df2:	00b4                	addi	a3,sp,72
    1df4:	0000                	unimp
    1df6:	0001                	nop
    1df8:	005f 0000 0000      	0x5f
    1dfe:	0000                	unimp
    1e00:	a600                	fsd	fs0,8(a2)
    1e02:	0000                	unimp
    1e04:	ac00                	fsd	fs0,24(s0)
    1e06:	0000                	unimp
    1e08:	0600                	addi	s0,sp,768
    1e0a:	7b00                	flw	fs0,48(a4)
    1e0c:	7e00                	flw	fs0,56(a2)
    1e0e:	2200                	fld	fs0,0(a2)
    1e10:	ac9f 0000 b000      	0xb0000000ac9f
    1e16:	0000                	unimp
    1e18:	0100                	addi	s0,sp,128
    1e1a:	5e00                	lw	s0,56(a2)
	...
    1e24:	00a6                	slli	ra,ra,0x9
    1e26:	0000                	unimp
    1e28:	00aa                	slli	ra,ra,0xa
    1e2a:	0000                	unimp
    1e2c:	0006                	c.slli	zero,0x1
    1e2e:	007a                	c.slli	zero,0x1e
    1e30:	007e                	c.slli	zero,0x1f
    1e32:	9f22                	add	t5,t5,s0
    1e34:	00aa                	slli	ra,ra,0xa
    1e36:	0000                	unimp
    1e38:	00b0                	addi	a2,sp,72
    1e3a:	0000                	unimp
    1e3c:	0001                	nop
    1e3e:	005d                	c.nop	23
    1e40:	0000                	unimp
    1e42:	0000                	unimp
    1e44:	0000                	unimp
    1e46:	8c00                	0x8c00
    1e48:	0000                	unimp
    1e4a:	9000                	0x9000
    1e4c:	0000                	unimp
    1e4e:	0100                	addi	s0,sp,128
    1e50:	5a00                	lw	s0,48(a2)
	...
    1e5a:	00b4                	addi	a3,sp,72
    1e5c:	0000                	unimp
    1e5e:	00b8                	addi	a4,sp,72
    1e60:	0000                	unimp
    1e62:	0001                	nop
    1e64:	005a                	c.slli	zero,0x16
    1e66:	0000                	unimp
    1e68:	0000                	unimp
    1e6a:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0c18                	addi	a4,sp,528
  16:	0000                	unimp
  18:	0ea0                	addi	s0,sp,856
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1b0e                	slli	s6,s6,0x23
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0ca4                	addi	s1,sp,600
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00c0                	addi	s0,sp,68
   2:	0000                	unimp
   4:	00c2                	slli	ra,ra,0x10
   6:	0000                	unimp
   8:	00ca                	slli	ra,ra,0x12
   a:	0000                	unimp
   c:	00d4                	addi	a3,sp,68
	...
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0ca4                	addi	s1,sp,600
  1e:	0000                	unimp
  20:	0ea0                	addi	s0,sp,856
  22:	0000                	unimp
  24:	0fd8                	addi	a4,sp,980
	...
  2e:	0000                	unimp
  30:	ffff                	0xffff
  32:	ffff                	0xffff
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0ca4                	addi	s1,sp,600
  3a:	0000                	unimp
  3c:	0d1a                	slli	s10,s10,0x6
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00002407          	flw	fs0,0(zero) # 0 <__DYNAMIC>
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x10e>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x96>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x86>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x168>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xc0>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0xd8>
}
      a0:	0065                	c.nop	25
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
    asm volatile(
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
}
      b8:	6564                	flw	fs1,76(a0)
    for(i=0;i<(length/3);i++) {
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
    asm volatile(
      c0:	5f00                	lw	s0,56(a4)
    for(i=0;i<(length/3);i++) {
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
    asm volatile(
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
    for(i=0;i<(length/3);i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x154>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
    int line[size_b][size_a + size_b];
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
     10a:	0305                	addi	t1,t1,1
     10c:	00000907          	0x907
    int line[size_b][size_a + size_b];
     110:	0301                	addi	t1,t1,0
    int pola[size_a];
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
    int line[size_b][size_a + size_b];
     116:	0501                	addi	a0,a0,0
    int pola[size_a];
     118:	0601                	addi	a2,a2,0
    int line[size_b][size_a + size_b];
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
    int pola[size_a];
     11e:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     120:	2e05                	jal	450 <polydiv+0x20>
    int polb[size_b];
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
    int line[size_b][size_a + size_b];
     126:	0002                	c.slli64	zero
    int polb[size_b];
     128:	0501                	addi	a0,a0,0
    int pola[size_a];
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
            line[i][j] = 0;
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
    int polb[size_b];
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0616                	slli	a2,a2,0x5
     13c:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     140:	0100                	addi	s0,sp,128
    int polb[size_b];
     142:	0a05                	addi	s4,s4,1
            line[i][j] = 0;
     144:	08090003          	lb	zero,128(s2)
     148:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
            product[j] = 0;
     14e:	0104                	addi	s1,sp,128
     150:	0306                	slli	t1,t1,0x1
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     156:	0501                	addi	a0,a0,0
     158:	0005                	c.nop	1
    for (i = 0; i < size_a; ++i){
     15a:	0402                	c.slli64	s0
     15c:	0601                	addi	a2,a2,0
     15e:	00090003          	lb	zero,0(s2)
    array_mod(pola,mod,size_a);
     162:	0100                	addi	s0,sp,128
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
    for (i = 0; i < size_b; ++i){
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
     172:	0306                	slli	t1,t1,0x1
    array_mod(polb,mod,size_b);
     174:	097e                	slli	s2,s2,0x1f
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
    if(star_mult == 1){
     17e:	09700303          	lb	t1,151(zero) # 97 <array_add+0x5>
     182:	0004                	0x4
     184:	0001                	nop
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
     18c:	000a                	c.slli	zero,0x2
     18e:	0501                	addi	a0,a0,0
     190:	001a                	c.slli	zero,0x6
     192:	0402                	c.slli64	s0
     194:	09060303          	lb	t1,144(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     198:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
            product[j] = 0;
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
            line[i][j] = 0;
     1a4:	0009                	c.nop	2
     1a6:	0100                	addi	s0,sp,128
            product[j] = 0;
     1a8:	3405                	jal	fffffbc8 <_stack_start+0xfffefbc8>
     1aa:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     1ac:	0906                	slli	s2,s2,0x1
     1ae:	0004                	0x4
     1b0:	0501                	addi	a0,a0,0
     1b2:	0305                	addi	t1,t1,1
    for (i = 0; i < size_b; ++i){
     1b4:	0902                	c.slli64	s2
     1b6:	0000                	unimp
     1b8:	0301                	addi	t1,t1,0
     1ba:	0909                	addi	s2,s2,2
        for(j = 0; j < size_a + size_b -1; ++j){
     1bc:	0004                	0x4
     1be:	0501                	addi	a0,a0,0
        pola[i] = a[i];
     1c0:	0601                	addi	a2,a2,0
     1c2:	00090103          	lb	sp,0(s2)
     1c6:	0100                	addi	s0,sp,128
     1c8:	2c05                	jal	3f8 <polymult2+0x12e>
     1ca:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_a; ++i){
     1cc:	0901                	addi	s2,s2,0
        pola[i] = a[i];
     1ce:	0002                	c.slli64	zero
     1d0:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     1d2:	0301                	addi	t1,t1,0
        polb[i] = b[i];
     1d4:	0905                	addi	s2,s2,1
     1d6:	0000                	unimp
     1d8:	0501                	addi	a0,a0,0
     1da:	0305                	addi	t1,t1,1
     1dc:	0902                	c.slli64	s2
     1de:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1e0:	0501                	addi	a0,a0,0
        polb[i] = b[i];
     1e2:	0616                	slli	a2,a2,0x5
    for (i = 0; i < size_b; ++i){
     1e4:	00090003          	lb	zero,0(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     1e8:	0100                	addi	s0,sp,128
     1ea:	0505                	addi	a0,a0,1
        for(j = 0; j < size_a + size_b -1; ++j){
     1ec:	06096e03          	0x6096e03
    for (i = 0; i < size_b; ++i){
     1f0:	0100                	addi	s0,sp,128
     1f2:	0a05                	addi	s4,s4,1
     1f4:	02091203          	lh	tp,32(s2)
     1f8:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     1fa:	0d05                	addi	s10,s10,1
     1fc:	0200                	addi	s0,sp,256
     1fe:	0104                	addi	s1,sp,128
    array_mod(product,mod,(size_a+size_b-1));
     200:	0306                	slli	t1,t1,0x1
     202:	0900                	addi	s0,sp,144
     204:	0002                	c.slli64	zero
     206:	0501                	addi	a0,a0,0
     208:	0005                	c.nop	1
     20a:	0402                	c.slli64	s0
}
     20c:	0601                	addi	a2,a2,0
     20e:	00090003          	lb	zero,0(s2)
     212:	0100                	addi	s0,sp,128
     214:	0105                	addi	sp,sp,1
     216:	04090403          	lb	s0,64(s2)
     21a:	0100                	addi	s0,sp,128
     21c:	0905                	addi	s2,s2,1
     21e:	0200                	addi	s0,sp,256
     220:	0304                	addi	s1,sp,384
     222:	0306                	slli	t1,t1,0x1
     224:	097d                	addi	s2,s2,31
     226:	0002                	c.slli64	zero
     228:	0501                	addi	a0,a0,0
     22a:	0005                	c.nop	1
     22c:	0402                	c.slli64	s0
     22e:	096d0303          	lb	t1,150(s10)
     232:	0000                	unimp
     234:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     236:	0402                	c.slli64	s0
     238:	09090303          	lb	t1,144(s2)
     23c:	000a                	c.slli	zero,0x2
     23e:	0501                	addi	a0,a0,0
     240:	001a                	c.slli	zero,0x6
     242:	0402                	c.slli64	s0
     244:	09090303          	lb	t1,144(s2)
     248:	0000                	unimp
     24a:	0501                	addi	a0,a0,0
     24c:	0402001b          	0x402001b
            for (k = size_a-1; k >= 0; k = k-1 ){
     250:	00030603          	lb	a2,0(t1)
        for (j = size_b -1; j >= 0; j = j-1){
     254:	0009                	c.nop	2
     256:	0100                	addi	s0,sp,128
     258:	4e05                	li	t3,1
     25a:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     25c:	090a                	slli	s2,s2,0x2
     25e:	0004                	0x4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     260:	0501                	addi	a0,a0,0
     262:	0305                	addi	t1,t1,1
     264:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     268:	0501                	addi	a0,a0,0
     26a:	064e                	slli	a2,a2,0x13
     26c:	00097d03          	0x97d03
            for (k = size_a-1; k >= 0; k = k-1 ){
     270:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     272:	1d05                	addi	s10,s10,-31
     274:	0a090303          	lb	t1,160(s2)
     278:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     27a:	4e05                	li	t3,1
     27c:	06097d03          	0x6097d03
        for (j = size_b -1; j >= 0; j = j-1){
     280:	0100                	addi	s0,sp,128
     282:	0905                	addi	s2,s2,1
     284:	04090303          	lb	t1,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     288:	0100                	addi	s0,sp,128
     28a:	4e05                	li	t3,1
            line[i][j] = line[i][j] % mod;
     28c:	0c097d03          	0xc097d03
     290:	0100                	addi	s0,sp,128
     292:	14090003          	lb	zero,320(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     296:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     298:	0905                	addi	s2,s2,1
     29a:	04090303          	lb	t1,64(s2)
     29e:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     2a0:	02090303          	lb	t1,32(s2)
            product[j] += line[i][j];
     2a4:	0100                	addi	s0,sp,128
     2a6:	04097d03          	0x4097d03
     2aa:	0100                	addi	s0,sp,128
     2ac:	02090303          	lb	t1,32(s2)
     2b0:	0100                	addi	s0,sp,128
     2b2:	02097d03          	0x2097d03
     2b6:	0100                	addi	s0,sp,128
     2b8:	04090303          	lb	t1,64(s2)
        for(i = 0; i < size_b; ++i){
     2bc:	0100                	addi	s0,sp,128
     2be:	4e05                	li	t3,1
    for(j = 0; j < size_a + size_b -1; ++j){
     2c0:	02097a03          	0x2097a03
     2c4:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     2c6:	0905                	addi	s2,s2,1
     2c8:	02090703          	lb	a4,32(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2cc:	0100                	addi	s0,sp,128
     2ce:	04097c03          	0x4097c03
    int line[size_b][size_a + size_b];
     2d2:	0100                	addi	s0,sp,128
     2d4:	02090403          	lb	s0,32(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2d8:	0100                	addi	s0,sp,128
     2da:	02097f03          	0x2097f03
    int line[size_b][size_a + size_b];
     2de:	0100                	addi	s0,sp,128
     2e0:	1405                	addi	s0,s0,-31
     2e2:	06090603          	lb	a2,96(s2)
     2e6:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e8:	0905                	addi	s2,s2,1
     2ea:	04097b03          	0x4097b03
     2ee:	0100                	addi	s0,sp,128
     2f0:	4e05                	li	t3,1
     2f2:	04097903          	0x4097903
    int pola[size_a];
     2f6:	0100                	addi	s0,sp,128
     2f8:	0905                	addi	s2,s2,1
    int line[size_b][size_a + size_b];
     2fa:	02090303          	lb	t1,32(s2)
     2fe:	0100                	addi	s0,sp,128
     300:	0505                	addi	a0,a0,1
    int pola[size_a];
     302:	0306                	slli	t1,t1,0x1
     304:	0901                	addi	s2,s2,0
     306:	0004                	0x4
     308:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     30a:	0901                	addi	s2,s2,0
    int pola[size_a];
     30c:	0000                	unimp
     30e:	0301                	addi	t1,t1,0
    int polb[size_b];
     310:	0901                	addi	s2,s2,0
     312:	0000                	unimp
     314:	0501                	addi	a0,a0,0
    int pola[size_a];
     316:	0609                	addi	a2,a2,2
    int polb[size_b];
     318:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     31c:	0100                	addi	s0,sp,128
    int polb[size_b];
     31e:	0505                	addi	a0,a0,1
    for (i = 0; i < size_b; ++i){
     320:	0306                	slli	t1,t1,0x1
     322:	0901                	addi	s2,s2,0
     324:	0004                	0x4
            product2[j] = 0;
     326:	0501                	addi	a0,a0,0
     328:	0609                	addi	a2,a2,2
     32a:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     32e:	0100                	addi	s0,sp,128
     330:	0505                	addi	a0,a0,1
    for(i = 0; i < size_a; ++i){
     332:	0306                	slli	t1,t1,0x1
     334:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
    for(i = 0; i < size_b; ++i){
     338:	0501                	addi	a0,a0,0
     33a:	0614                	addi	a3,sp,768
     33c:	00090203          	lb	tp,0(s2)
    if(star_mult == 1){
     340:	0100                	addi	s0,sp,128
     342:	0505                	addi	a0,a0,1
     344:	06097e03          	0x6097e03
     348:	0100                	addi	s0,sp,128
     34a:	0c05                	addi	s8,s8,1
     34c:	02090003          	lb	zero,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     350:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     352:	1805                	addi	a6,a6,-31
     354:	02090303          	lb	t1,32(s2)
            product2[j] = 0;
     358:	0100                	addi	s0,sp,128
     35a:	1105                	addi	sp,sp,-31
            line[i][j] = 0;
     35c:	0200                	addi	s0,sp,256
     35e:	0104                	addi	s1,sp,128
            product2[j] = 0;
     360:	0306                	slli	t1,t1,0x1
     362:	097d                	addi	s2,s2,31
        for(j = 0; j < size_a + size_b -1; ++j){
     364:	0008                	0x8
     366:	0501                	addi	a0,a0,0
     368:	0005                	c.nop	1
     36a:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     36c:	0601                	addi	a2,a2,0
     36e:	00090003          	lb	zero,0(s2)
     372:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     374:	0c05                	addi	s8,s8,1
     376:	04090803          	lb	a6,64(s2)
        pola[i] = a[i];
     37a:	0100                	addi	s0,sp,128
     37c:	1105                	addi	sp,sp,-31
     37e:	0200                	addi	s0,sp,256
     380:	0104                	addi	s1,sp,128
     382:	0306                	slli	t1,t1,0x1
     384:	0900                	addi	s0,sp,144
    for(i = 0; i < size_a; ++i){
     386:	0002                	c.slli64	zero
        pola[i] = a[i];
     388:	0501                	addi	a0,a0,0
     38a:	0005                	c.nop	1
    for(i = 0; i < size_a; ++i){
     38c:	0402                	c.slli64	s0
        polb[i] = b[i];
     38e:	0601                	addi	a2,a2,0
     390:	00090003          	lb	zero,0(s2)
     394:	0100                	addi	s0,sp,128
     396:	0306                	slli	t1,t1,0x1
     398:	0904                	addi	s1,sp,144
     39a:	0004                	0x4
    for(i = 0; i < size_b; ++i){
     39c:	0301                	addi	t1,t1,0
        polb[i] = b[i];
     39e:	0902                	c.slli64	s2
     3a0:	000a                	c.slli	zero,0x2
    for(i = 0; i < size_b; ++i){
     3a2:	0501                	addi	a0,a0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     3a4:	060c                	addi	a1,sp,768
     3a6:	04090003          	lb	zero,64(s2)
     3aa:	0100                	addi	s0,sp,128
     3ac:	1105                	addi	sp,sp,-31
     3ae:	0200                	addi	s0,sp,256
     3b0:	0104                	addi	s1,sp,128
     3b2:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3b4:	0900                	addi	s0,sp,144
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b6:	0002                	c.slli64	zero
     3b8:	0501                	addi	a0,a0,0
     3ba:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3bc:	0402                	c.slli64	s0
     3be:	0601                	addi	a2,a2,0
        for (j = size_b -1; j >= 0; j = j-1){
     3c0:	00090003          	lb	zero,0(s2)
     3c4:	0100                	addi	s0,sp,128
     3c6:	0306                	slli	t1,t1,0x1
     3c8:	0904                	addi	s1,sp,144
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0004                	0x4
        array_add(product2,line[i],size_a+size_b-1);
     3cc:	0301                	addi	t1,t1,0
     3ce:	0904                	addi	s1,sp,144
     3d0:	000a                	c.slli	zero,0x2
     3d2:	0501                	addi	a0,a0,0
    for(i=0;i<size_b;++i){
     3d4:	00030607          	0x30607
}
     3d8:	0009                	c.nop	2
     3da:	0100                	addi	s0,sp,128
     3dc:	1d05                	addi	s10,s10,-31
     3de:	0200                	addi	s0,sp,256
     3e0:	0104                	addi	s1,sp,128
     3e2:	0306                	slli	t1,t1,0x1
     3e4:	0908                	addi	a0,sp,144
     3e6:	0018                	0x18
     3e8:	0501                	addi	a0,a0,0
     3ea:	0009                	c.nop	2
     3ec:	0402                	c.slli64	s0
     3ee:	0601                	addi	a2,a2,0
     3f0:	00090003          	lb	zero,0(s2)
     3f4:	0100                	addi	s0,sp,128
     3f6:	1405                	addi	s0,s0,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     3f8:	04090103          	lb	sp,64(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3fc:	0100                	addi	s0,sp,128
     3fe:	0d05                	addi	s10,s10,1
     400:	0200                	addi	s0,sp,256
     402:	0304                	addi	s1,sp,384
     404:	0306                	slli	t1,t1,0x1
     406:	00040963          	beqz	s0,418 <polymult2+0x14e>
     40a:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     40c:	0018                	0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     40e:	0402                	c.slli64	s0
     410:	01030603          	lb	a2,16(t1)
     414:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0100                	addi	s0,sp,128
     418:	0200                	addi	s0,sp,256
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0304                	addi	s1,sp,384
     41c:	06097f03          	0x6097f03
     420:	0100                	addi	s0,sp,128
        array_add(product2,line[i],size_a+size_b-1);
     422:	0d05                	addi	s10,s10,1
     424:	0200                	addi	s0,sp,256
     426:	0304                	addi	s1,sp,384
     428:	0306                	slli	t1,t1,0x1
    for(i=0;i<size_b;++i){
     42a:	0901                	addi	s2,s2,0
     42c:	0004                	0x4
     42e:	0501                	addi	a0,a0,0
    int v[size_N];
     430:	0018                	0x18
     432:	0402                	c.slli64	s0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	00030603          	lb	a2,0(t1)
    int v[size_N];
     438:	0009                	c.nop	2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     43a:	0100                	addi	s0,sp,128
     43c:	2c05                	jal	66c <ext_euclid+0x50>
     43e:	0200                	addi	s0,sp,256
     440:	0304                	addi	s1,sp,384
     442:	0306                	slli	t1,t1,0x1
     444:	097e                	slli	s2,s2,0x1f
     446:	0004                	0x4
     448:	0501                	addi	a0,a0,0
     44a:	0014                	0x14
     44c:	0402                	c.slli64	s0
     44e:	0301                	addi	t1,t1,0
     450:	0900                	addi	s0,sp,144
     452:	0004                	0x4
     454:	0501                	addi	a0,a0,0
    int v[size_N];
     456:	0009                	c.nop	2
     458:	0402                	c.slli64	s0
     45a:	0601                	addi	a2,a2,0
    int q[size_N];
     45c:	00090003          	lb	zero,0(s2)
     460:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     462:	1d05                	addi	s10,s10,-31
     464:	0200                	addi	s0,sp,256
    int denum_temp[size_D];
     466:	0204                	addi	s1,sp,256
     468:	0306                	slli	t1,t1,0x1
     46a:	097f                	0x97f
     46c:	0004                	0x4
    int num_temp[size_N];
     46e:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     470:	0103060f          	0x103060f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	0809                	addi	a6,a6,2
     476:	0100                	addi	s0,sp,128
     478:	0905                	addi	s2,s2,1
     47a:	0200                	addi	s0,sp,256
    int v[size_N];
     47c:	0304                	addi	s1,sp,384
     47e:	0306                	slli	t1,t1,0x1
    int denum_temp[size_D];
     480:	0908                	addi	a0,sp,144
     482:	0004                	0x4
     484:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     486:	0011                	c.nop	4
     488:	0402                	c.slli64	s0
     48a:	00030603          	lb	a2,0(t1)
    array_mod(num_temp,mod,size_N);
     48e:	0409                	addi	s0,s0,2
     490:	0100                	addi	s0,sp,128
     492:	1405                	addi	s0,s0,-31
    for (i = 0; i < size_D; ++i) {
     494:	0200                	addi	s0,sp,256
     496:	0304                	addi	s1,sp,384
     498:	04090003          	lb	zero,64(s2)
    array_mod(denum_temp,mod,size_D);
     49c:	0100                	addi	s0,sp,128
     49e:	1105                	addi	sp,sp,-31
     4a0:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     4a2:	0304                	addi	s1,sp,384
     4a4:	02090003          	lb	zero,32(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     4a8:	0100                	addi	s0,sp,128
     4aa:	1d05                	addi	s10,s10,-31
     4ac:	0200                	addi	s0,sp,256
     4ae:	0304                	addi	s1,sp,384
     4b0:	02097f03          	0x2097f03
    for (i = 0; i < size_N; ++i){
     4b4:	0100                	addi	s0,sp,128
     4b6:	1105                	addi	sp,sp,-31
        if ( (b_N*u)%mod == 1 )
     4b8:	0200                	addi	s0,sp,256
    for (u = 0; u < mod; ++u){
     4ba:	0304                	addi	s1,sp,384
     4bc:	02090103          	lb	sp,32(s2)
     4c0:	0100                	addi	s0,sp,128
        num_temp[i] = num[i];
     4c2:	1d05                	addi	s10,s10,-31
     4c4:	0200                	addi	s0,sp,256
     4c6:	0304                	addi	s1,sp,384
     4c8:	0306                	slli	t1,t1,0x1
     4ca:	097f                	0x97f
     4cc:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     4ce:	0501                	addi	a0,a0,0
        num_temp[i] = num[i];
     4d0:	0009                	c.nop	2
    for (i = 0; i < size_N; ++i){
     4d2:	0402                	c.slli64	s0
        denum_temp[i] = denum[i];
     4d4:	09070303          	lb	t1,144(a4) # af8 <generate_keys+0x292>
     4d8:	0002                	c.slli64	zero
     4da:	0501                	addi	a0,a0,0
     4dc:	0011                	c.nop	4
     4de:	0402                	c.slli64	s0
    for (i = 0; i < size_D; ++i) {
     4e0:	00030603          	lb	a2,0(t1)
     4e4:	0409                	addi	s0,s0,2
        q[i] = 0;
     4e6:	0100                	addi	s0,sp,128
     4e8:	1405                	addi	s0,s0,-31
     4ea:	0200                	addi	s0,sp,256
     4ec:	0304                	addi	s1,sp,384
        v[i] = 0;
     4ee:	04090003          	lb	zero,64(s2)
        q[i] = 0;
     4f2:	0100                	addi	s0,sp,128
        v[i] = 0;
     4f4:	1105                	addi	sp,sp,-31
     4f6:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     4f8:	0304                	addi	s1,sp,384
     4fa:	02090003          	lb	zero,32(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     4fe:	0100                	addi	s0,sp,128
     500:	1d05                	addi	s10,s10,-31
        if ( (b_N*u)%mod == 1 )
     502:	0200                	addi	s0,sp,256
     504:	0304                	addi	s1,sp,384
     506:	02097f03          	0x2097f03
     50a:	0100                	addi	s0,sp,128
    for (u = 0; u < mod; ++u){
     50c:	1105                	addi	sp,sp,-31
     50e:	0200                	addi	s0,sp,256
        if( num_temp[i] != 0 )
     510:	0304                	addi	s1,sp,384
    for (i = size_N-1; i >= 0; i = i-1){
     512:	02090103          	lb	sp,32(s2)
     516:	0100                	addi	s0,sp,128
     518:	1d05                	addi	s10,s10,-31
     51a:	0200                	addi	s0,sp,256
     51c:	0304                	addi	s1,sp,384
     51e:	0306                	slli	t1,t1,0x1
    while (d >= d2){
     520:	097f                	0x97f
     522:	0002                	c.slli64	zero
    for(i = 0; i < size_N; ++i){
     524:	0501                	addi	a0,a0,0
        result[i] = q[i];
     526:	08030607          	0x8030607
     52a:	0209                	addi	tp,tp,2
     52c:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     52e:	1d05                	addi	s10,s10,-31
     530:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     532:	0104                	addi	s1,sp,128
     534:	0306                	slli	t1,t1,0x1
        result[i] = num_temp[i-size_N];
     536:	0901                	addi	s2,s2,0
     538:	0002                	c.slli64	zero
     53a:	0501                	addi	a0,a0,0
     53c:	0009                	c.nop	2
    for(i = size_N; i < (2*size_N); ++i){
     53e:	0402                	c.slli64	s0
     540:	0601                	addi	a2,a2,0
}
     542:	00090003          	lb	zero,0(s2)
     546:	0100                	addi	s0,sp,128
     548:	0f05                	addi	t5,t5,1
     54a:	04091003          	lh	zero,64(s2)
     54e:	0100                	addi	s0,sp,128
     550:	1105                	addi	sp,sp,-31
     552:	0200                	addi	s0,sp,256
     554:	0104                	addi	s1,sp,128
     556:	0306                	slli	t1,t1,0x1
     558:	097f                	0x97f
     55a:	0002                	c.slli64	zero
     55c:	0501                	addi	a0,a0,0
     55e:	0005                	c.nop	1
     560:	0402                	c.slli64	s0
     562:	0601                	addi	a2,a2,0
     564:	00090003          	lb	zero,0(s2)
     568:	0100                	addi	s0,sp,128
     56a:	0b05                	addi	s6,s6,1
        v[(d-d2)] = u*r_d;
     56c:	0c090703          	lb	a4,192(s2)
     570:	0100                	addi	s0,sp,128
     572:	1005                	c.nop	-31
     574:	0200                	addi	s0,sp,256
     576:	0104                	addi	s1,sp,128
    array_mod(v,mod,size_N);
     578:	0306                	slli	t1,t1,0x1
     57a:	0900                	addi	s0,sp,144
     57c:	0002                	c.slli64	zero
        v[(d-d2)] = u*r_d;
     57e:	0501                	addi	a0,a0,0
    array_mod(v,mod,size_N);
     580:	0005                	c.nop	1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     582:	0402                	c.slli64	s0
     584:	0601                	addi	a2,a2,0
     586:	00090003          	lb	zero,0(s2)
     58a:	0100                	addi	s0,sp,128
     58c:	0306                	slli	t1,t1,0x1
     58e:	0004090b          	0x4090b
    array_mod(product,mod,size_N);
     592:	0301                	addi	t1,t1,0
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	0902                	c.slli64	s2
    array_mod(product,mod,size_N);
     596:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     598:	0301                	addi	t1,t1,0
     59a:	0902                	c.slli64	s2
     59c:	0000                	unimp
     59e:	0501                	addi	a0,a0,0
    array_mod(num_temp,mod,size_N);
     5a0:	0601                	addi	a2,a2,0
     5a2:	00090103          	lb	sp,0(s2)
     5a6:	0100                	addi	s0,sp,128
    array_add(q,v,size_N);
     5a8:	1105                	addi	sp,sp,-31
     5aa:	0200                	addi	s0,sp,256
     5ac:	0304                	addi	s1,sp,384
     5ae:	0306                	slli	t1,t1,0x1
    array_mod(q,mod,size_N);
     5b0:	095c                	addi	a5,sp,148
     5b2:	002a                	c.slli	zero,0xa
     5b4:	0501                	addi	a0,a0,0
     5b6:	0025                	c.nop	9
        for (i = size_N-1; i >= 0; i = i-1){
     5b8:	0402                	c.slli64	s0
     5ba:	00030603          	lb	a2,0(t1)
     5be:	0409                	addi	s0,s0,2
     5c0:	0100                	addi	s0,sp,128
     5c2:	2b05                	jal	af2 <generate_keys+0x28c>
     5c4:	0200                	addi	s0,sp,256
     5c6:	0304                	addi	s1,sp,384
     5c8:	04090003          	lb	zero,64(s2)
            num_temp[i] = num_temp[i] - product[i];
     5cc:	0100                	addi	s0,sp,128
     5ce:	2e05                	jal	8fe <generate_keys+0x98>
     5d0:	0200                	addi	s0,sp,256
     5d2:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     5d4:	02090003          	lb	zero,32(s2)
            num_temp[i] = num_temp[i] - product[i];
     5d8:	0100                	addi	s0,sp,128
     5da:	2a05                	jal	70a <ext_euclid+0xee>
     5dc:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5de:	0304                	addi	s1,sp,384
            if( num_temp[i] != 0 )
     5e0:	06097f03          	0x6097f03
        for (i = size_N-1; i >= 0; i = i-1){
     5e4:	0100                	addi	s0,sp,128
            v[i] = 0;
     5e6:	2e05                	jal	916 <generate_keys+0xb0>
     5e8:	0200                	addi	s0,sp,256
     5ea:	0304                	addi	s1,sp,384
     5ec:	02090103          	lb	sp,32(s2)
        for (i = 0; i < size_N; ++i){
     5f0:	0100                	addi	s0,sp,128
     5f2:	2505                	jal	c12 <ntru_deceypt+0x34>
     5f4:	0200                	addi	s0,sp,256
     5f6:	0304                	addi	s1,sp,384
        result[i] = q[i];
     5f8:	04090003          	lb	zero,64(s2)
     5fc:	0100                	addi	s0,sp,128
     5fe:	2805                	jal	62e <ext_euclid+0x12>
     600:	0200                	addi	s0,sp,256
     602:	0304                	addi	s1,sp,384
    for(i = 0; i < size_N; ++i){
     604:	0306                	slli	t1,t1,0x1
        result[i] = q[i];
     606:	097f                	0x97f
    for(i = 0; i < size_N; ++i){
     608:	0004                	0x4
        result[i] = num_temp[i-size_N];
     60a:	0501                	addi	a0,a0,0
     60c:	0020                	addi	s0,sp,8
     60e:	0402                	c.slli64	s0
     610:	0301                	addi	t1,t1,0
     612:	0900                	addi	s0,sp,144
     614:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     616:	0501                	addi	a0,a0,0
     618:	000d                	c.nop	3
     61a:	0402                	c.slli64	s0
    int ri_2[size]; // MX-ring poly, a
     61c:	0601                	addi	a2,a2,0
     61e:	00090003          	lb	zero,0(s2)
     622:	0100                	addi	s0,sp,128
     624:	2505                	jal	c44 <ntru_deceypt+0x66>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     626:	0200                	addi	s0,sp,256
     628:	0204                	addi	s1,sp,256
     62a:	0306                	slli	t1,t1,0x1
     62c:	097f                	0x97f
     62e:	0004                	0x4
     630:	0501                	addi	a0,a0,0
     632:	04020027          	0x4020027
     636:	0602                	c.slli64	a2
     638:	00090003          	lb	zero,0(s2)
     63c:	0100                	addi	s0,sp,128
     63e:	1405                	addi	s0,s0,-31
     640:	08090103          	lb	sp,128(s2)
    int ri_2[size]; // MX-ring poly, a
     644:	0100                	addi	s0,sp,128
     646:	1105                	addi	sp,sp,-31
    int ri_1[size]; // f-random poly, f[N] = 0, b
     648:	0200                	addi	s0,sp,256
     64a:	0304                	addi	s1,sp,384
     64c:	0306                	slli	t1,t1,0x1
    int ri[size];
     64e:	0908                	addi	a0,sp,144
     650:	0004                	0x4
     652:	0501                	addi	a0,a0,0
    int ti_1[size]; // ti_1[0] = 1
     654:	0029                	c.nop	10
     656:	0402                	c.slli64	s0
     658:	00030603          	lb	a2,0(t1)
    int ti[size];
     65c:	0409                	addi	s0,s0,2
     65e:	0100                	addi	s0,sp,128
    int qi_1[size];
     660:	2f05                	jal	d90 <memcpy+0x76>
     662:	0200                	addi	s0,sp,256
     664:	0304                	addi	s1,sp,384
    int temp[size];
     666:	04090003          	lb	zero,64(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     66a:	0100                	addi	s0,sp,128
     66c:	3205                	jal	ffffff8c <_stack_start+0xfffeff8c>
    int ri_2[size]; // MX-ring poly, a
     66e:	0200                	addi	s0,sp,256
     670:	0304                	addi	s1,sp,384
    int temp[size];
     672:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size; ++i) {
     676:	0100                	addi	s0,sp,128
        ti_2[i] = 0;
     678:	2a05                	jal	7a8 <ext_euclid+0x18c>
     67a:	0200                	addi	s0,sp,256
     67c:	0304                	addi	s1,sp,384
     67e:	06097f03          	0x6097f03
    for (i = 0; i < size; ++i) {
     682:	0100                	addi	s0,sp,128
    ti_1[0] = 1;
     684:	3205                	jal	ffffffa4 <_stack_start+0xfffeffa4>
     686:	0200                	addi	s0,sp,256
     688:	0304                	addi	s1,sp,384
        for (i = N + 1; i < (2 * N + 2); ++i) {
     68a:	02090103          	lb	sp,32(s2)
     68e:	0100                	addi	s0,sp,128
     690:	2905                	jal	ac0 <generate_keys+0x25a>
            ti[i] = ti_2[i] - temp[i];
     692:	0200                	addi	s0,sp,256
     694:	0304                	addi	s1,sp,384
     696:	04090003          	lb	zero,64(s2)
    array_mod(ri_2,mod,size);
     69a:	0100                	addi	s0,sp,128
     69c:	2805                	jal	6cc <ext_euclid+0xb0>
     69e:	0200                	addi	s0,sp,256
     6a0:	0304                	addi	s1,sp,384
    array_mod(ri_1,mod,size);
     6a2:	0306                	slli	t1,t1,0x1
     6a4:	097f                	0x97f
     6a6:	0004                	0x4
     6a8:	0501                	addi	a0,a0,0
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6aa:	0020                	addi	s0,sp,8
     6ac:	0402                	c.slli64	s0
     6ae:	0301                	addi	t1,t1,0
     6b0:	0900                	addi	s0,sp,144
     6b2:	0000                	unimp
     6b4:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6b6:	000d                	c.nop	3
     6b8:	0402                	c.slli64	s0
     6ba:	0601                	addi	a2,a2,0
     6bc:	00090003          	lb	zero,0(s2)
     6c0:	0100                	addi	s0,sp,128
     6c2:	2505                	jal	ce2 <reset_handler+0x3a>
        for (i = 0; i < N + 1; ++i) {
     6c4:	0200                	addi	s0,sp,256
     6c6:	0204                	addi	s1,sp,256
     6c8:	0306                	slli	t1,t1,0x1
    array_mod(temp,mod,size);
     6ca:	097f                	0x97f
     6cc:	0004                	0x4
     6ce:	0501                	addi	a0,a0,0
     6d0:	04020027          	0x4020027
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     6d4:	0602                	c.slli64	a2
     6d6:	00090003          	lb	zero,0(s2)
     6da:	0100                	addi	s0,sp,128
     6dc:	0d05                	addi	s10,s10,1
        for (i = 0; i < N + 1; ++i) {
     6de:	0200                	addi	s0,sp,256
     6e0:	0304                	addi	s1,sp,384
     6e2:	0306                	slli	t1,t1,0x1
    array_mod(qi_1,mod,size);
     6e4:	090a                	slli	s2,s2,0x2
     6e6:	0008                	0x8
     6e8:	0501                	addi	a0,a0,0
     6ea:	0025                	c.nop	9
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     6ec:	0402                	c.slli64	s0
     6ee:	00030603          	lb	a2,0(t1)
     6f2:	0009                	c.nop	2
     6f4:	0100                	addi	s0,sp,128
     6f6:	2c05                	jal	926 <generate_keys+0xc0>
     6f8:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     6fa:	0304                	addi	s1,sp,384
     6fc:	02097f03          	0x2097f03
    array_mod(temp,mod,size);
     700:	0100                	addi	s0,sp,128
     702:	2505                	jal	d22 <memcpy+0x8>
     704:	0200                	addi	s0,sp,256
     706:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     708:	04090103          	lb	sp,64(s2)
     70c:	0100                	addi	s0,sp,128
     70e:	1805                	addi	a6,a6,-31
    array_mod(ti,mod,size);
     710:	0200                	addi	s0,sp,256
     712:	0304                	addi	s1,sp,384
     714:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     718:	0100                	addi	s0,sp,128
        controlR = 0;
     71a:	2c05                	jal	94a <generate_keys+0xe4>
        for (i = 0; i < N + 1; ++i) {
     71c:	0200                	addi	s0,sp,256
     71e:	0304                	addi	s1,sp,384
     720:	0306                	slli	t1,t1,0x1
    while (controlR != 0) {
     722:	097f                	0x97f
        for (j = 0; j < mod; ++j) {
     724:	0004                	0x4
            if (((ri_2[0] * j) % mod) == 1)
     726:	0501                	addi	a0,a0,0
        for (j = 0; j < mod; ++j) {
     728:	0014                	0x14
     72a:	0402                	c.slli64	s0
     72c:	0301                	addi	t1,t1,0
     72e:	0900                	addi	s0,sp,144
     730:	0000                	unimp
     732:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     734:	0009                	c.nop	2
     736:	0402                	c.slli64	s0
    }
     738:	0601                	addi	a2,a2,0
     73a:	00090003          	lb	zero,0(s2)
     73e:	0100                	addi	s0,sp,128
     740:	1d05                	addi	s10,s10,-31
     742:	0200                	addi	s0,sp,256
     744:	0204                	addi	s1,sp,256
     746:	0306                	slli	t1,t1,0x1
     748:	097f                	0x97f
     74a:	0004                	0x4
     74c:	0501                	addi	a0,a0,0
     74e:	0103060f          	0x103060f
     752:	0809                	addi	a6,a6,2
     754:	0100                	addi	s0,sp,128
     756:	0d05                	addi	s10,s10,1
     758:	0200                	addi	s0,sp,256
     75a:	0304                	addi	s1,sp,384
     75c:	0306                	slli	t1,t1,0x1
     75e:	0908                	addi	a0,sp,144
     760:	0004                	0x4
        ri_2[i] = polyR[i];
     762:	0501                	addi	a0,a0,0
     764:	0022                	c.slli	zero,0x8
     766:	0402                	c.slli64	s0
     768:	00030603          	lb	a2,0(t1)
     76c:	0009                	c.nop	2
    for (i = 0; i < size; ++i) {
     76e:	0100                	addi	s0,sp,128
        ri_2[i] = polyR[i];
     770:	1805                	addi	a6,a6,-31
     772:	0200                	addi	s0,sp,256
        ri_1[i] = polyf[i];
     774:	0304                	addi	s1,sp,384
     776:	04090003          	lb	zero,64(s2)
     77a:	0100                	addi	s0,sp,128
     77c:	2205                	jal	89c <generate_keys+0x36>
     77e:	0200                	addi	s0,sp,256
     780:	0304                	addi	s1,sp,384
     782:	02090003          	lb	zero,32(s2)
        ti_2[i] = 0;
     786:	0100                	addi	s0,sp,128
     788:	2005                	jal	7a8 <ext_euclid+0x18c>
     78a:	0200                	addi	s0,sp,256
        ti_1[i] = 0;
     78c:	0304                	addi	s1,sp,384
     78e:	04097f03          	0x4097f03
     792:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     794:	2205                	jal	8b4 <generate_keys+0x4e>
     796:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     798:	0304                	addi	s1,sp,384
     79a:	02090103          	lb	sp,32(s2)
     79e:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7a0:	1805                	addi	a6,a6,-31
     7a2:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     7a4:	0304                	addi	s1,sp,384
     7a6:	06090003          	lb	zero,96(s2)
            temp[i] = ri_2[i] - ri[i];
     7aa:	0100                	addi	s0,sp,128
     7ac:	2005                	jal	7cc <ext_euclid+0x1b0>
     7ae:	0200                	addi	s0,sp,256
     7b0:	0304                	addi	s1,sp,384
     7b2:	0306                	slli	t1,t1,0x1
     7b4:	097f                	0x97f
     7b6:	0006                	c.slli	zero,0x1
     7b8:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     7ba:	0014                	0x14
            temp[i] = ri_2[i] - ri[i];
     7bc:	0402                	c.slli64	s0
     7be:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     7c0:	0900                	addi	s0,sp,144
     7c2:	0000                	unimp
            qi_1[i] = res1[i];
     7c4:	0501                	addi	a0,a0,0
     7c6:	0009                	c.nop	2
     7c8:	0402                	c.slli64	s0
     7ca:	0601                	addi	a2,a2,0
     7cc:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     7d0:	0100                	addi	s0,sp,128
            qi_1[i] = res1[i];
     7d2:	2805                	jal	802 <ext_euclid+0x1e6>
        for (i = 0; i < N + 1; ++i) {
     7d4:	0200                	addi	s0,sp,256
            temp[i] = res2[i];
     7d6:	0204                	addi	s1,sp,256
     7d8:	0306                	slli	t1,t1,0x1
     7da:	097f                	0x97f
     7dc:	0004                	0x4
     7de:	0501                	addi	a0,a0,0
     7e0:	0103060f          	0x103060f
     7e4:	0609                	addi	a2,a2,2
        for (i = 0; i < N + 1; ++i) {
     7e6:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     7e8:	4605                	li	a2,1
     7ea:	0306                	slli	t1,t1,0x1
     7ec:	0911                	addi	s2,s2,4
     7ee:	0004                	0x4
     7f0:	0501                	addi	a0,a0,0
     7f2:	0305                	addi	t1,t1,1
     7f4:	0902                	c.slli64	s2
     7f6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7f8:	0501                	addi	a0,a0,0
            ti[i] = ti_2[i] - temp[i];
     7fa:	0646                	slli	a2,a2,0x11
     7fc:	00097e03          	0x97e03
        for (i = 0; i < N + 1; ++i) {
     800:	0100                	addi	s0,sp,128
            ri_2[i] = ri_1[i];
     802:	1d05                	addi	s10,s10,-31
     804:	06090203          	lb	tp,96(s2)
     808:	0100                	addi	s0,sp,128
     80a:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     80c:	08097e03          	0x8097e03
            ri_1[i] = ri[i];
     810:	0100                	addi	s0,sp,128
     812:	0905                	addi	s2,s2,1
     814:	04090203          	lb	tp,64(s2)
            ti_2[i] = ti_1[i];
     818:	0100                	addi	s0,sp,128
            ri_1[i] = ri[i];
     81a:	4605                	li	a2,1
            ti_2[i] = ti_1[i];
     81c:	0c097e03          	0xc097e03
     820:	0100                	addi	s0,sp,128
     822:	0c090003          	lb	zero,192(s2)
     826:	0100                	addi	s0,sp,128
     828:	0905                	addi	s2,s2,1
            ti_1[i] = ti[i];
     82a:	02090503          	lb	a0,32(s2)
     82e:	0100                	addi	s0,sp,128
     830:	04097d03          	0x4097d03
              qi_1[i] = 0;
     834:	0100                	addi	s0,sp,128
     836:	08090303          	lb	t1,128(s2)
        for (i = 0; i < N + 1; ++i) {
     83a:	0100                	addi	s0,sp,128
     83c:	08097d03          	0x8097d03
            if (((ri_2[0] * j) % mod) == 1)
     840:	0100                	addi	s0,sp,128
     842:	02090303          	lb	t1,32(s2)
     846:	0100                	addi	s0,sp,128
     848:	04090103          	lb	sp,64(s2)
     84c:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     84e:	06097f03          	0x6097f03
            ti_2[i] = (ti_2[i] * j) % mod;
     852:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     854:	02090103          	lb	sp,32(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     858:	0100                	addi	s0,sp,128
     85a:	04097c03          	0x4097c03
     85e:	0100                	addi	s0,sp,128
     860:	0505                	addi	a0,a0,1
     862:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     864:	0901                	addi	s2,s2,0
int* generate_keys(int N, int p, int q){
     866:	0002                	c.slli64	zero
     868:	0301                	addi	t1,t1,0
     86a:	0901                	addi	s2,s2,0
     86c:	0000                	unimp
     86e:	0301                	addi	t1,t1,0
     870:	0901                	addi	s2,s2,0
     872:	0000                	unimp
     874:	0301                	addi	t1,t1,0
     876:	0901                	addi	s2,s2,0
     878:	0000                	unimp
     87a:	0501                	addi	a0,a0,0
     87c:	0609                	addi	a2,a2,2
     87e:	00090003          	lb	zero,0(s2)
     882:	0100                	addi	s0,sp,128
     884:	0505                	addi	a0,a0,1
     886:	0306                	slli	t1,t1,0x1
     888:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     88c:	0501                	addi	a0,a0,0
     88e:	060c                	addi	a1,sp,768
     890:	04090003          	lb	zero,64(s2)
     894:	0100                	addi	s0,sp,128
     896:	1905                	addi	s2,s2,-31
     898:	02090303          	lb	t1,32(s2)
     89c:	0100                	addi	s0,sp,128
     89e:	1105                	addi	sp,sp,-31
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8a0:	0200                	addi	s0,sp,256
     8a2:	0104                	addi	s1,sp,128
     8a4:	0306                	slli	t1,t1,0x1
     8a6:	097d                	addi	s2,s2,31
     8a8:	0008                	0x8
     8aa:	0501                	addi	a0,a0,0
     8ac:	0005                	c.nop	1
     8ae:	0402                	c.slli64	s0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     8b0:	0601                	addi	a2,a2,0
     8b2:	00090003          	lb	zero,0(s2)
     8b6:	0100                	addi	s0,sp,128
     8b8:	0b05                	addi	s6,s6,1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8ba:	04090703          	lb	a4,64(s2)
     8be:	0100                	addi	s0,sp,128
     8c0:	1005                	c.nop	-31
     8c2:	0200                	addi	s0,sp,256
     8c4:	0104                	addi	s1,sp,128
     8c6:	0306                	slli	t1,t1,0x1
     8c8:	0900                	addi	s0,sp,144
     8ca:	0002                	c.slli64	zero
     8cc:	0501                	addi	a0,a0,0
     8ce:	0005                	c.nop	1
     8d0:	0402                	c.slli64	s0
     8d2:	0601                	addi	a2,a2,0
     8d4:	00090003          	lb	zero,0(s2)
     8d8:	0100                	addi	s0,sp,128
     8da:	0b05                	addi	s6,s6,1
     8dc:	04090403          	lb	s0,64(s2)
     8e0:	0100                	addi	s0,sp,128
     8e2:	1005                	c.nop	-31
     8e4:	0200                	addi	s0,sp,256
     8e6:	0104                	addi	s1,sp,128
     8e8:	0306                	slli	t1,t1,0x1
     8ea:	0900                	addi	s0,sp,144
     8ec:	0002                	c.slli64	zero
     8ee:	0501                	addi	a0,a0,0
     8f0:	0005                	c.nop	1
     8f2:	0402                	c.slli64	s0
     8f4:	0601                	addi	a2,a2,0
     8f6:	00090003          	lb	zero,0(s2)
     8fa:	0100                	addi	s0,sp,128
     8fc:	0306                	slli	t1,t1,0x1
     8fe:	0906                	slli	s2,s2,0x1
     900:	0004                	0x4
     902:	0501                	addi	a0,a0,0
     904:	00030607          	0x30607
     908:	0009                	c.nop	2
     90a:	0100                	addi	s0,sp,128
     90c:	1d05                	addi	s10,s10,-31
     90e:	0200                	addi	s0,sp,256
     910:	0104                	addi	s1,sp,128
     912:	0306                	slli	t1,t1,0x1
     914:	0908                	addi	a0,sp,144
     916:	0010                	0x10
     918:	0501                	addi	a0,a0,0
     91a:	0009                	c.nop	2
     91c:	0402                	c.slli64	s0
     91e:	0601                	addi	a2,a2,0
     920:	00090003          	lb	zero,0(s2)
     924:	0100                	addi	s0,sp,128
    int polyR[N+1];
     926:	1405                	addi	s0,s0,-31
     928:	04090103          	lb	sp,64(s2)
     92c:	0100                	addi	s0,sp,128
     92e:	0d05                	addi	s10,s10,1
     930:	0200                	addi	s0,sp,256
     932:	0304                	addi	s1,sp,384
     934:	0306                	slli	t1,t1,0x1
     936:	0968                	addi	a0,sp,156
     938:	0004                	0x4
    polyR[N] = 1;
     93a:	0501                	addi	a0,a0,0
     93c:	0019                	c.nop	6
     93e:	0402                	c.slli64	s0
     940:	01030603          	lb	a2,16(t1)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     944:	0009                	c.nop	2
     946:	0100                	addi	s0,sp,128
     948:	1805                	addi	a6,a6,-31
     94a:	0200                	addi	s0,sp,256
     94c:	0304                	addi	s1,sp,384
     94e:	06097f03          	0x6097f03
     952:	0100                	addi	s0,sp,128
     954:	0d05                	addi	s10,s10,1
     956:	0200                	addi	s0,sp,256
     958:	0304                	addi	s1,sp,384
     95a:	0306                	slli	t1,t1,0x1
     95c:	0901                	addi	s2,s2,0
     95e:	0004                	0x4
     960:	0501                	addi	a0,a0,0
     962:	0019                	c.nop	6
     964:	0402                	c.slli64	s0
     966:	00030603          	lb	a2,0(t1)
     96a:	0009                	c.nop	2
     96c:	0100                	addi	s0,sp,128
     96e:	2c05                	jal	b9e <ntru_encyrpt+0x46>
     970:	0200                	addi	s0,sp,256
     972:	0304                	addi	s1,sp,384
     974:	0306                	slli	t1,t1,0x1
     976:	097e                	slli	s2,s2,0x1f
     978:	0004                	0x4
     97a:	0501                	addi	a0,a0,0
     97c:	0014                	0x14
     97e:	0402                	c.slli64	s0
     980:	0301                	addi	t1,t1,0
     982:	0900                	addi	s0,sp,144
     984:	0004                	0x4
     986:	0501                	addi	a0,a0,0
     988:	0009                	c.nop	2
     98a:	0402                	c.slli64	s0
     98c:	0601                	addi	a2,a2,0
     98e:	00090003          	lb	zero,0(s2)
     992:	0100                	addi	s0,sp,128
     994:	1d05                	addi	s10,s10,-31
     996:	0200                	addi	s0,sp,256
     998:	0204                	addi	s1,sp,256
     99a:	0306                	slli	t1,t1,0x1
     99c:	097f                	0x97f
     99e:	0004                	0x4
     9a0:	0501                	addi	a0,a0,0
     9a2:	0103060f          	0x103060f
     9a6:	0809                	addi	a6,a6,2
    polyR[0] = -1;
     9a8:	0100                	addi	s0,sp,128
     9aa:	0905                	addi	s2,s2,1
    for(i = 1; i < N; ++i){
     9ac:	0200                	addi	s0,sp,256
     9ae:	0304                	addi	s1,sp,384
     9b0:	0306                	slli	t1,t1,0x1
     9b2:	00040907          	0x40907
    for (i = N; i < 55; ++i ){
     9b6:	0501                	addi	a0,a0,0
     9b8:	0011                	c.nop	4
     9ba:	0402                	c.slli64	s0
    for(i = 0; i < N; ++i){
     9bc:	00030603          	lb	a2,0(t1)
        random_keys[i] = f[i];
     9c0:	0409                	addi	s0,s0,2
     9c2:	0100                	addi	s0,sp,128
     9c4:	1405                	addi	s0,s0,-31
    for(i = 0; i < N; ++i){
     9c6:	0200                	addi	s0,sp,256
     9c8:	0304                	addi	s1,sp,384
     9ca:	04090003          	lb	zero,64(s2)
    for(i = N; i < (2*N); ++i){
     9ce:	0100                	addi	s0,sp,128
     9d0:	1105                	addi	sp,sp,-31
     9d2:	0200                	addi	s0,sp,256
     9d4:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     9d6:	02090003          	lb	zero,32(s2)
     9da:	0100                	addi	s0,sp,128
     9dc:	1c05                	addi	s8,s8,-31
    for(i = N; i < (2*N); ++i){
     9de:	0200                	addi	s0,sp,256
     9e0:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     9e2:	04097f03          	0x4097f03
     9e6:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     9e8:	1105                	addi	sp,sp,-31
     9ea:	0200                	addi	s0,sp,256
     9ec:	0304                	addi	s1,sp,384
     9ee:	02090103          	lb	sp,32(s2)
     9f2:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     9f4:	1c05                	addi	s8,s8,-31
        random_keys[i] = fp[i-(2*N)];
     9f6:	0200                	addi	s0,sp,256
     9f8:	0304                	addi	s1,sp,384
     9fa:	0306                	slli	t1,t1,0x1
     9fc:	097f                	0x97f
    for(i = (2*N); i < (3*N); ++i){
     9fe:	0004                	0x4
     a00:	0501                	addi	a0,a0,0
    fq = ext_euclid(polyR, f, (N+1), q);
     a02:	0009                	c.nop	2
     a04:	0402                	c.slli64	s0
     a06:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     a0a:	0002                	c.slli64	zero
     a0c:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     a0e:	0011                	c.nop	4
     a10:	0402                	c.slli64	s0
     a12:	00030603          	lb	a2,0(t1)
        random_keys[i] = fq[i-(3*N)];
     a16:	0409                	addi	s0,s0,2
     a18:	0100                	addi	s0,sp,128
     a1a:	1405                	addi	s0,s0,-31
     a1c:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     a1e:	0304                	addi	s1,sp,384
     a20:	04090003          	lb	zero,64(s2)
    fg = polymult2(fq, N, g, N, 0);
     a24:	0100                	addi	s0,sp,128
     a26:	1105                	addi	sp,sp,-31
     a28:	0200                	addi	s0,sp,256
     a2a:	0304                	addi	s1,sp,384
    for(i = 0; i < (2*N-1); ++i){
     a2c:	02090003          	lb	zero,32(s2)
     a30:	0100                	addi	s0,sp,128
     a32:	1c05                	addi	s8,s8,-31
     a34:	0200                	addi	s0,sp,256
     a36:	0304                	addi	s1,sp,384
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a38:	04097f03          	0x4097f03
     a3c:	0100                	addi	s0,sp,128
     a3e:	1105                	addi	sp,sp,-31
    for(i = (4*N); i < (5*N); ++i){
     a40:	0200                	addi	s0,sp,256
     a42:	0304                	addi	s1,sp,384
     a44:	02090103          	lb	sp,32(s2)
     a48:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a4a:	1c05                	addi	s8,s8,-31
     a4c:	0200                	addi	s0,sp,256
     a4e:	0304                	addi	s1,sp,384
     a50:	0306                	slli	t1,t1,0x1
    for(i = (4*N); i < (5*N); ++i){
     a52:	097f                	0x97f
     a54:	0004                	0x4
     a56:	0501                	addi	a0,a0,0
    for(i = (5*N); i < (6*N+1); ++i){
     a58:	0011                	c.nop	4
     a5a:	0402                	c.slli64	s0
        random_keys[i] = polyR[i-(5*N)];
     a5c:	09090303          	lb	t1,144(s2)
     a60:	0002                	c.slli64	zero
     a62:	0501                	addi	a0,a0,0
    for(i = (5*N); i < (6*N+1); ++i){
     a64:	0025                	c.nop	9
     a66:	0402                	c.slli64	s0
     a68:	00030603          	lb	a2,0(t1)
     a6c:	0409                	addi	s0,s0,2
     a6e:	0100                	addi	s0,sp,128
}
     a70:	2b05                	jal	fa0 <main+0x100>
     a72:	0200                	addi	s0,sp,256
     a74:	0304                	addi	s1,sp,384
     a76:	04090003          	lb	zero,64(s2)
     a7a:	0100                	addi	s0,sp,128
     a7c:	2e05                	jal	dac <memcpy+0x92>
     a7e:	0200                	addi	s0,sp,256
     a80:	0304                	addi	s1,sp,384
     a82:	02090003          	lb	zero,32(s2)
     a86:	0100                	addi	s0,sp,128
     a88:	2a05                	jal	bb8 <ntru_encyrpt+0x60>
     a8a:	0200                	addi	s0,sp,256
     a8c:	0304                	addi	s1,sp,384
     a8e:	06097f03          	0x6097f03
     a92:	0100                	addi	s0,sp,128
     a94:	2e05                	jal	dc4 <memcpy+0xaa>
     a96:	0200                	addi	s0,sp,256
     a98:	0304                	addi	s1,sp,384
     a9a:	02090103          	lb	sp,32(s2)
     a9e:	0100                	addi	s0,sp,128
     aa0:	2505                	jal	10c0 <__DTOR_END__+0xd8>
     aa2:	0200                	addi	s0,sp,256
     aa4:	0304                	addi	s1,sp,384
     aa6:	04090003          	lb	zero,64(s2)
     aaa:	0100                	addi	s0,sp,128
     aac:	2805                	jal	adc <generate_keys+0x276>
     aae:	0200                	addi	s0,sp,256
        polyR[i] = 0;
     ab0:	0304                	addi	s1,sp,384
     ab2:	0306                	slli	t1,t1,0x1
     ab4:	097f                	0x97f
     ab6:	0002                	c.slli64	zero
     ab8:	0501                	addi	a0,a0,0
    for(i = 1; i < N; ++i){
     aba:	0020                	addi	s0,sp,8
     abc:	0402                	c.slli64	s0
        f[i] = 0;
     abe:	0301                	addi	t1,t1,0
     ac0:	0900                	addi	s0,sp,144
     ac2:	0000                	unimp
     ac4:	0501                	addi	a0,a0,0
     ac6:	000d                	c.nop	3
     ac8:	0402                	c.slli64	s0
     aca:	0601                	addi	a2,a2,0
        g[i] = 0;
     acc:	00090003          	lb	zero,0(s2)
     ad0:	0100                	addi	s0,sp,128
     ad2:	2505                	jal	10f2 <__DTOR_END__+0x10a>
     ad4:	0200                	addi	s0,sp,256
    for (i = N; i < 55; ++i ){
     ad6:	0204                	addi	s1,sp,256
     ad8:	0306                	slli	t1,t1,0x1
        random_keys[i] = f[i];
     ada:	097f                	0x97f
     adc:	0004                	0x4
     ade:	0501                	addi	a0,a0,0
     ae0:	04020027          	0x4020027
     ae4:	0602                	c.slli64	a2
     ae6:	00090003          	lb	zero,0(s2)
    for(i = 0; i < N; ++i){
     aea:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     aec:	1d05                	addi	s10,s10,-31
    for(i = 0; i < N; ++i){
     aee:	0200                	addi	s0,sp,256
        random_keys[i] = g[i-N];
     af0:	0104                	addi	s1,sp,128
     af2:	0306                	slli	t1,t1,0x1
     af4:	0900                	addi	s0,sp,144
     af6:	0006                	c.slli	zero,0x1
     af8:	0501                	addi	a0,a0,0
    for(i = N; i < (2*N); ++i){
     afa:	0009                	c.nop	2
     afc:	0402                	c.slli64	s0
     afe:	0601                	addi	a2,a2,0
        random_keys[i] = fp[i-(2*N)];
     b00:	00090003          	lb	zero,0(s2)
     b04:	0100                	addi	s0,sp,128
     b06:	1405                	addi	s0,s0,-31
     b08:	04090803          	lb	a6,64(s2)
    for(i = (2*N); i < (3*N); ++i){
     b0c:	0100                	addi	s0,sp,128
     b0e:	0905                	addi	s2,s2,1
        random_keys[i] = fq[i-(3*N)];
     b10:	02090a03          	lb	s4,32(s2)
     b14:	0100                	addi	s0,sp,128
     b16:	0d05                	addi	s10,s10,1
     b18:	0200                	addi	s0,sp,256
     b1a:	0104                	addi	s1,sp,128
     b1c:	0306                	slli	t1,t1,0x1
    for(i = (3*N); i < (4*N); ++i){
     b1e:	097d                	addi	s2,s2,31
        random_keys[i] = fq[i-(3*N)];
     b20:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     b22:	0501                	addi	a0,a0,0
        fg[i] = fg[i]*p;
     b24:	0005                	c.nop	1
    for(i = 0; i < (2*N-1); ++i){
     b26:	0402                	c.slli64	s0
     b28:	0601                	addi	a2,a2,0
        fg[i] = fg[i]*p;
     b2a:	00090003          	lb	zero,0(s2)
     b2e:	0100                	addi	s0,sp,128
     b30:	0306                	slli	t1,t1,0x1
    for(i = 0; i < (2*N-1); ++i){
     b32:	00040907          	0x40907
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b36:	0301                	addi	t1,t1,0
     b38:	0902                	c.slli64	s2
     b3a:	0000                	unimp
     b3c:	0501                	addi	a0,a0,0
     b3e:	0601                	addi	a2,a2,0
    for(i = (4*N); i < (5*N); ++i){
     b40:	00090103          	lb	sp,0(s2)
        random_keys[i] = polyR[i-(5*N)];
     b44:	0100                	addi	s0,sp,128
     b46:	1405                	addi	s0,s0,-31
     b48:	20096803          	0x20096803
     b4c:	0100                	addi	s0,sp,128
     b4e:	1105                	addi	sp,sp,-31
     b50:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     b52:	0304                	addi	s1,sp,384
        random_keys[i] = polyR[i-(5*N)];
     b54:	0306                	slli	t1,t1,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     b56:	0908                	addi	a0,sp,144
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b58:	0004                	0x4
     b5a:	0501                	addi	a0,a0,0
     b5c:	0029                	c.nop	10
     b5e:	0402                	c.slli64	s0
     b60:	00030603          	lb	a2,0(t1)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b64:	0409                	addi	s0,s0,2
     b66:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b68:	2f05                	jal	1298 <_bss_start+0x12c>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b6a:	0200                	addi	s0,sp,256
     b6c:	0304                	addi	s1,sp,384
     b6e:	04090003          	lb	zero,64(s2)
     b72:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     b74:	3205                	jal	494 <polydiv+0x64>
     b76:	0200                	addi	s0,sp,256
     b78:	0304                	addi	s1,sp,384
     b7a:	02090003          	lb	zero,32(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     b7e:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     b80:	2a05                	jal	cb0 <reset_handler+0x8>
     b82:	0200                	addi	s0,sp,256
     b84:	0304                	addi	s1,sp,384
     b86:	06097f03          	0x6097f03
     b8a:	0100                	addi	s0,sp,128
     b8c:	3205                	jal	4ac <polydiv+0x7c>
     b8e:	0200                	addi	s0,sp,256
     b90:	0304                	addi	s1,sp,384
array_add(temp,message,48);
     b92:	02090103          	lb	sp,32(s2)
     b96:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     b98:	2905                	jal	fc8 <main+0x128>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     b9a:	0200                	addi	s0,sp,256
     b9c:	0304                	addi	s1,sp,384
array_add(temp,message,48);
     b9e:	04090003          	lb	zero,64(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     ba2:	0100                	addi	s0,sp,128
     ba4:	2805                	jal	bd4 <ntru_encyrpt+0x7c>
     ba6:	0200                	addi	s0,sp,256
     ba8:	0304                	addi	s1,sp,384
     baa:	0306                	slli	t1,t1,0x1
     bac:	097f                	0x97f
     bae:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     bb0:	0501                	addi	a0,a0,0
     bb2:	0020                	addi	s0,sp,8
     bb4:	0402                	c.slli64	s0
     bb6:	0301                	addi	t1,t1,0
     bb8:	0900                	addi	s0,sp,144
     bba:	0000                	unimp
}
     bbc:	0501                	addi	a0,a0,0
     bbe:	000d                	c.nop	3
     bc0:	0402                	c.slli64	s0
     bc2:	0601                	addi	a2,a2,0
     bc4:	00090003          	lb	zero,0(s2)
     bc8:	0100                	addi	s0,sp,128
     bca:	2505                	jal	11ea <_bss_start+0x7e>
        CT[i-(2*N)] = CT[i];
     bcc:	0200                	addi	s0,sp,256
     bce:	0204                	addi	s1,sp,256
     bd0:	0306                	slli	t1,t1,0x1
     bd2:	097f                	0x97f
    for(i = (2*N); i < (3*N); ++i){
     bd4:	0004                	0x4
     bd6:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     bd8:	04020027          	0x4020027
    for(i = (2*N); i < (3*N); ++i){
     bdc:	0602                	c.slli64	a2
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bde:	00090003          	lb	zero,0(s2)
     be2:	0100                	addi	s0,sp,128
     be4:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     be6:	0200                	addi	s0,sp,256
     be8:	0304                	addi	s1,sp,384
     bea:	0306                	slli	t1,t1,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bec:	0008090b          	0x8090b
     bf0:	0501                	addi	a0,a0,0
     bf2:	0016                	c.slli	zero,0x5
     bf4:	0402                	c.slli64	s0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bf6:	097d0303          	lb	t1,151(s10)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     bfa:	0008                	0x8
     bfc:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     bfe:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c02:	0006                	c.slli	zero,0x1
     c04:	0501                	addi	a0,a0,0
     c06:	0305                	addi	t1,t1,1
     c08:	0902                	c.slli64	s2
     c0a:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c0c:	0301                	addi	t1,t1,0
     c0e:	0901                	addi	s2,s2,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c10:	0000                	unimp
     c12:	0301                	addi	t1,t1,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c14:	0902                	c.slli64	s2
     c16:	0000                	unimp
     c18:	0501                	addi	a0,a0,0
     c1a:	0609                	addi	a2,a2,2
     c1c:	00090003          	lb	zero,0(s2)
     c20:	0100                	addi	s0,sp,128
     c22:	4305                	li	t1,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     c24:	04097b03          	0x4097b03
     c28:	0100                	addi	s0,sp,128
     c2a:	0905                	addi	s2,s2,1
     c2c:	02090503          	lb	a0,32(s2)
        if(a2[i] <= q/2)
     c30:	0100                	addi	s0,sp,128
     c32:	4305                	li	t1,1
    for (i = 0; i < N; ++i){
     c34:	04097b03          	0x4097b03
     c38:	0100                	addi	s0,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     c3a:	0905                	addi	s2,s2,1
     c3c:	1c090503          	lb	a0,448(s2)
     c40:	0100                	addi	s0,sp,128
     c42:	06090103          	lb	sp,96(s2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     c46:	0100                	addi	s0,sp,128
     c48:	06090203          	lb	tp,96(s2)
     c4c:	0100                	addi	s0,sp,128
     c4e:	04090103          	lb	sp,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c52:	0100                	addi	s0,sp,128
     c54:	08097f03          	0x8097f03
}
     c58:	0100                	addi	s0,sp,128
     c5a:	02090103          	lb	sp,32(s2)
     c5e:	0100                	addi	s0,sp,128
     c60:	4305                	li	t1,1
     c62:	04097703          	0x4097703
     c66:	0100                	addi	s0,sp,128
     c68:	0905                	addi	s2,s2,1
     c6a:	08090503          	lb	a0,128(s2)
        a2[i-(2*N)] = a2[i];
     c6e:	0100                	addi	s0,sp,128
     c70:	0505                	addi	a0,a0,1
     c72:	0306                	slli	t1,t1,0x1
     c74:	0901                	addi	s2,s2,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c76:	0004                	0x4
     c78:	0301                	addi	t1,t1,0
        a2[i-(2*N)] = a2[i];
     c7a:	0901                	addi	s2,s2,0
     c7c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     c7e:	0301                	addi	t1,t1,0
        if(a2[i] <= q/2)
     c80:	0901                	addi	s2,s2,0
     c82:	0000                	unimp
     c84:	0301                	addi	t1,t1,0
            a2[i] = (-1)*(q-a2[i]);
     c86:	0901                	addi	s2,s2,0
     c88:	0000                	unimp
     c8a:	0501                	addi	a0,a0,0
    for (i = 0; i < N; ++i){
     c8c:	0609                	addi	a2,a2,2
     c8e:	00090003          	lb	zero,0(s2)
        c2[i-(2*N)] = c2[i];
     c92:	0100                	addi	s0,sp,128
     c94:	0505                	addi	a0,a0,1
     c96:	0306                	slli	t1,t1,0x1
     c98:	0904                	addi	s1,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     c9a:	0006                	c.slli	zero,0x1
     c9c:	0501                	addi	a0,a0,0
        c2[i-(2*N)] = c2[i];
     c9e:	060c                	addi	a1,sp,768
     ca0:	00090003          	lb	zero,0(s2)
  jal x0, default_exc_handler
     ca4:	0100                	addi	s0,sp,128
     ca6:	1105                	addi	sp,sp,-31
  mv  x1, x0
     ca8:	0200                	addi	s0,sp,256
     caa:	0104                	addi	s1,sp,128
  mv  x2, x1
     cac:	0306                	slli	t1,t1,0x1
  mv  x3, x1
     cae:	0900                	addi	s0,sp,144
  mv  x4, x1
     cb0:	0002                	c.slli64	zero
  mv  x5, x1
     cb2:	0501                	addi	a0,a0,0
  mv  x6, x1
     cb4:	0005                	c.nop	1
  mv  x7, x1
     cb6:	0402                	c.slli64	s0
  mv  x8, x1
     cb8:	0601                	addi	a2,a2,0
  mv  x9, x1
     cba:	00090003          	lb	zero,0(s2)
  mv x11, x1
     cbe:	0100                	addi	s0,sp,128
  mv x12, x1
     cc0:	0306                	slli	t1,t1,0x1
  mv x13, x1
     cc2:	0904                	addi	s1,sp,144
  mv x14, x1
     cc4:	0004                	0x4
  mv x15, x1
     cc6:	0301                	addi	t1,t1,0
  mv x16, x1
     cc8:	00080903          	lb	s2,0(a6)
  mv x18, x1
     ccc:	0501                	addi	a0,a0,0
  mv x19, x1
     cce:	060c                	addi	a1,sp,768
  mv x20, x1
     cd0:	00090003          	lb	zero,0(s2)
  mv x22, x1
     cd4:	0100                	addi	s0,sp,128
  mv x23, x1
     cd6:	1105                	addi	sp,sp,-31
  mv x24, x1
     cd8:	0200                	addi	s0,sp,256
  mv x25, x1
     cda:	0104                	addi	s1,sp,128
  mv x26, x1
     cdc:	0306                	slli	t1,t1,0x1
  mv x27, x1
     cde:	0900                	addi	s0,sp,144
  mv x28, x1
     ce0:	0002                	c.slli64	zero
  mv x29, x1
     ce2:	0501                	addi	a0,a0,0
  mv x30, x1
     ce4:	0005                	c.nop	1
  mv x31, x1
     ce6:	0402                	c.slli64	s0
  la   x2, _stack_start
     ce8:	0601                	addi	a2,a2,0
     cea:	00090003          	lb	zero,0(s2)
     cee:	0100                	addi	s0,sp,128
  la x26, _bss_start
     cf0:	0306                	slli	t1,t1,0x1
     cf2:	0904                	addi	s1,sp,144
     cf4:	0004                	0x4
     cf6:	0301                	addi	t1,t1,0
  la x27, _bss_end
     cf8:	0902                	c.slli64	s2
     cfa:	0008                	0x8
     cfc:	0501                	addi	a0,a0,0
     cfe:	060c                	addi	a1,sp,768
  bge x26, x27, zero_loop_end
     d00:	00090003          	lb	zero,0(s2)
  sw x0, 0(x26)
     d04:	0100                	addi	s0,sp,128
     d06:	1105                	addi	sp,sp,-31
  addi x26, x26, 4
     d08:	0200                	addi	s0,sp,256
  ble x26, x27, zero_loop
     d0a:	0104                	addi	s1,sp,128
     d0c:	0306                	slli	t1,t1,0x1
  addi x10, x0, 0
     d0e:	0900                	addi	s0,sp,144
     d10:	0002                	c.slli64	zero
  addi x11, x0, 0
     d12:	0501                	addi	a0,a0,0
     d14:	0005                	c.nop	1
  jal x1, main
     d16:	0402                	c.slli64	s0
     d18:	0601                	addi	a2,a2,0
     d1a:	00090003          	lb	zero,0(s2)
     d1e:	0100                	addi	s0,sp,128
     d20:	1805                	addi	a6,a6,-31
     d22:	0200                	addi	s0,sp,256
     d24:	0104                	addi	s1,sp,128
     d26:	0306                	slli	t1,t1,0x1
     d28:	0906                	slli	s2,s2,0x1
     d2a:	0004                	0x4
     d2c:	0501                	addi	a0,a0,0
     d2e:	0005                	c.nop	1
     d30:	0402                	c.slli64	s0
     d32:	0601                	addi	a2,a2,0
     d34:	08090003          	lb	zero,128(s2)
     d38:	0100                	addi	s0,sp,128
     d3a:	0c05                	addi	s8,s8,1
     d3c:	0200                	addi	s0,sp,256
     d3e:	0104                	addi	s1,sp,128
     d40:	04097a03          	0x4097a03
     d44:	0100                	addi	s0,sp,128
     d46:	0200                	addi	s0,sp,256
     d48:	0104                	addi	s1,sp,128
     d4a:	04090f03          	lb	t5,64(s2)
     d4e:	0100                	addi	s0,sp,128
     d50:	1105                	addi	sp,sp,-31
     d52:	0200                	addi	s0,sp,256
     d54:	0104                	addi	s1,sp,128
     d56:	0306                	slli	t1,t1,0x1
     d58:	097f                	0x97f
     d5a:	0002                	c.slli64	zero
     d5c:	0501                	addi	a0,a0,0
     d5e:	0005                	c.nop	1
     d60:	0402                	c.slli64	s0
     d62:	0601                	addi	a2,a2,0
     d64:	00090003          	lb	zero,0(s2)
     d68:	0100                	addi	s0,sp,128
     d6a:	0905                	addi	s2,s2,1
     d6c:	0200                	addi	s0,sp,256
     d6e:	0304                	addi	s1,sp,384
     d70:	0306                	slli	t1,t1,0x1
     d72:	0966                	slli	s2,s2,0x19
     d74:	0008                	0x8
     d76:	0501                	addi	a0,a0,0
     d78:	0015                	c.nop	5
     d7a:	0402                	c.slli64	s0
     d7c:	00030603          	lb	a2,0(t1)
     d80:	0409                	addi	s0,s0,2
     d82:	0100                	addi	s0,sp,128
     d84:	1a05                	addi	s4,s4,-31
     d86:	0200                	addi	s0,sp,256
     d88:	0304                	addi	s1,sp,384
     d8a:	04090003          	lb	zero,64(s2)
     d8e:	0100                	addi	s0,sp,128
     d90:	1505                	addi	a0,a0,-31
     d92:	0200                	addi	s0,sp,256
     d94:	0304                	addi	s1,sp,384
     d96:	02090003          	lb	zero,32(s2)
     d9a:	0100                	addi	s0,sp,128
     d9c:	1d05                	addi	s10,s10,-31
     d9e:	0200                	addi	s0,sp,256
     da0:	0304                	addi	s1,sp,384
     da2:	02097f03          	0x2097f03
     da6:	0100                	addi	s0,sp,128
     da8:	1505                	addi	a0,a0,-31
     daa:	0200                	addi	s0,sp,256
     dac:	0304                	addi	s1,sp,384
     dae:	02090103          	lb	sp,32(s2)
     db2:	0100                	addi	s0,sp,128
     db4:	1d05                	addi	s10,s10,-31
     db6:	0200                	addi	s0,sp,256
     db8:	0304                	addi	s1,sp,384
     dba:	0306                	slli	t1,t1,0x1
     dbc:	097f                	0x97f
     dbe:	0002                	c.slli64	zero
     dc0:	0501                	addi	a0,a0,0
     dc2:	0009                	c.nop	2
     dc4:	0402                	c.slli64	s0
     dc6:	09080303          	lb	t1,144(a6)
     dca:	0002                	c.slli64	zero
     dcc:	0501                	addi	a0,a0,0
     dce:	04020017          	auipc	zero,0x4020
     dd2:	00030603          	lb	a2,0(t1)
     dd6:	0409                	addi	s0,s0,2
     dd8:	0100                	addi	s0,sp,128
     dda:	1e05                	addi	t3,t3,-31
     ddc:	0200                	addi	s0,sp,256
     dde:	0304                	addi	s1,sp,384
     de0:	04090003          	lb	zero,64(s2)
     de4:	0100                	addi	s0,sp,128
     de6:	1705                	addi	a4,a4,-31
     de8:	0200                	addi	s0,sp,256
     dea:	0304                	addi	s1,sp,384
     dec:	02090003          	lb	zero,32(s2)
     df0:	0100                	addi	s0,sp,128
     df2:	1d05                	addi	s10,s10,-31
     df4:	0200                	addi	s0,sp,256
     df6:	0304                	addi	s1,sp,384
     df8:	02097f03          	0x2097f03
     dfc:	0100                	addi	s0,sp,128
     dfe:	1705                	addi	a4,a4,-31
     e00:	0200                	addi	s0,sp,256
     e02:	0304                	addi	s1,sp,384
     e04:	02090103          	lb	sp,32(s2)
     e08:	0100                	addi	s0,sp,128
     e0a:	1d05                	addi	s10,s10,-31
     e0c:	0200                	addi	s0,sp,256
     e0e:	0304                	addi	s1,sp,384
     e10:	0306                	slli	t1,t1,0x1
     e12:	097f                	0x97f
     e14:	0002                	c.slli64	zero
     e16:	0501                	addi	a0,a0,0
     e18:	0009                	c.nop	2
     e1a:	0402                	c.slli64	s0
     e1c:	09070303          	lb	t1,144(a4)
     e20:	0002                	c.slli64	zero
     e22:	0501                	addi	a0,a0,0
     e24:	000e                	c.slli	zero,0x3
     e26:	0402                	c.slli64	s0
     e28:	00030603          	lb	a2,0(t1)
     e2c:	0409                	addi	s0,s0,2
     e2e:	0100                	addi	s0,sp,128
     e30:	0200                	addi	s0,sp,256
     e32:	0304                	addi	s1,sp,384
     e34:	04090103          	lb	sp,64(s2)
     e38:	0100                	addi	s0,sp,128
     e3a:	0200                	addi	s0,sp,256
     e3c:	0304                	addi	s1,sp,384
     e3e:	02097f03          	0x2097f03
     e42:	0100                	addi	s0,sp,128
     e44:	0905                	addi	s2,s2,1
     e46:	0200                	addi	s0,sp,256
     e48:	0304                	addi	s1,sp,384
     e4a:	0306                	slli	t1,t1,0x1
     e4c:	0901                	addi	s2,s2,0
     e4e:	0004                	0x4
     e50:	0501                	addi	a0,a0,0
     e52:	000e                	c.slli	zero,0x3
     e54:	0402                	c.slli64	s0
     e56:	00030603          	lb	a2,0(t1)
     e5a:	0009                	c.nop	2
     e5c:	0100                	addi	s0,sp,128
     e5e:	1d05                	addi	s10,s10,-31
     e60:	0200                	addi	s0,sp,256
     e62:	0304                	addi	s1,sp,384
     e64:	0306                	slli	t1,t1,0x1
     e66:	097e                	slli	s2,s2,0x1f
     e68:	0004                	0x4
     e6a:	0501                	addi	a0,a0,0
     e6c:	0309                	addi	t1,t1,2
     e6e:	00040907          	0x40907
     e72:	0501                	addi	a0,a0,0
     e74:	0003060b          	0x3060b
     e78:	0009                	c.nop	2
     e7a:	0100                	addi	s0,sp,128
     e7c:	2005                	jal	e9c <memset+0xa4>
     e7e:	0200                	addi	s0,sp,256
     e80:	0204                	addi	s1,sp,256
     e82:	0306                	slli	t1,t1,0x1
     e84:	097f                	0x97f
     e86:	0002                	c.slli64	zero
     e88:	0501                	addi	a0,a0,0
     e8a:	0022                	c.slli	zero,0x8
     e8c:	0402                	c.slli64	s0
     e8e:	0602                	c.slli64	a2
     e90:	00090003          	lb	zero,0(s2)
     e94:	0100                	addi	s0,sp,128
     e96:	0905                	addi	s2,s2,1
     e98:	0306                	slli	t1,t1,0x1
     e9a:	0909                	addi	s2,s2,2
     e9c:	0004                	0x4
     e9e:	0501                	addi	a0,a0,0
int main(){
     ea0:	0615                	addi	a2,a2,5
     ea2:	00090003          	lb	zero,0(s2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ea6:	0100                	addi	s0,sp,128
     ea8:	0c05                	addi	s8,s8,1
     eaa:	06090003          	lb	zero,96(s2)
     eae:	0100                	addi	s0,sp,128
     eb0:	1a05                	addi	s4,s4,-31
int main(){
     eb2:	0200                	addi	s0,sp,256
     eb4:	0204                	addi	s1,sp,256
     eb6:	0306                	slli	t1,t1,0x1
     eb8:	097f                	0x97f
     eba:	0004                	0x4
     ebc:	0501                	addi	a0,a0,0
     ebe:	0309                	addi	t1,t1,2
     ec0:	00040907          	0x40907
    resultkon[0] = 0xaaaaaaa0;
     ec4:	0501                	addi	a0,a0,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     ec6:	0003060b          	0x3060b
    resultkon[0] = 0xaaaaaaa0;
     eca:	0009                	c.nop	2
     ecc:	0100                	addi	s0,sp,128
     ece:	2005                	jal	eee <main+0x4e>
     ed0:	0200                	addi	s0,sp,256
     ed2:	0204                	addi	s1,sp,256
    keys = generate_keys(N, p, q);
     ed4:	0306                	slli	t1,t1,0x1
     ed6:	097f                	0x97f
     ed8:	0002                	c.slli64	zero
     eda:	0501                	addi	a0,a0,0
     edc:	0022                	c.slli	zero,0x8
    resultkon[0] = 0xaaaaaaa0;
     ede:	0402                	c.slli64	s0
    resultkon[0] = 0xaaaaaaa1;
     ee0:	0602                	c.slli64	a2
     ee2:	00090003          	lb	zero,0(s2)
     ee6:	0100                	addi	s0,sp,128
     ee8:	1805                	addi	a6,a6,-31
    for(i = 0; i < N; ++i){
     eea:	0200                	addi	s0,sp,256
     eec:	0104                	addi	s1,sp,128
        secret_key_f[i] = keys[i];
     eee:	0306                	slli	t1,t1,0x1
     ef0:	0900                	addi	s0,sp,144
     ef2:	0002                	c.slli64	zero
     ef4:	0501                	addi	a0,a0,0
     ef6:	0005                	c.nop	1
     ef8:	0402                	c.slli64	s0
    for(i = 0; i < N; ++i){
     efa:	0601                	addi	a2,a2,0
     efc:	08090003          	lb	zero,128(s2)
    for(i = N; i < (2*N); ++i){
     f00:	0100                	addi	s0,sp,128
     f02:	0b05                	addi	s6,s6,1
     f04:	0306                	slli	t1,t1,0x1
     f06:	090c                	addi	a1,sp,144
     f08:	0004                	0x4
     f0a:	0601                	addi	a2,a2,0
        secret_key_fp[i-(2*N)] = keys[i];
     f0c:	04093f03          	0x4093f03
     f10:	0100                	addi	s0,sp,128
     f12:	1305                	addi	t1,t1,-31
     f14:	02090103          	lb	sp,32(s2)
    for(i = (2*N); i < (3*N); ++i){
     f18:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     f1a:	1005                	c.nop	-31
     f1c:	0200                	addi	s0,sp,256
     f1e:	0104                	addi	s1,sp,128
     f20:	0306                	slli	t1,t1,0x1
     f22:	097f                	0x97f
     f24:	0008                	0x8
        public_key[i-(4*N)] = keys[i];
     f26:	0501                	addi	a0,a0,0
     f28:	0005                	c.nop	1
     f2a:	0402                	c.slli64	s0
     f2c:	0601                	addi	a2,a2,0
     f2e:	00090003          	lb	zero,0(s2)
    for(i = (4*N); i < (5*N); ++i){
     f32:	0100                	addi	s0,sp,128
     f34:	1b05                	addi	s6,s6,-31
     f36:	04090503          	lb	a0,64(s2)
     f3a:	0100                	addi	s0,sp,128
        ring_poly[i-(5*N)] = keys[i];
     f3c:	1305                	addi	t1,t1,-31
     f3e:	04090103          	lb	sp,64(s2)
     f42:	0100                	addi	s0,sp,128
     f44:	1505                	addi	a0,a0,-31
    for(i = (5*N); i < (6*N+1); ++i){
     f46:	0200                	addi	s0,sp,256
     f48:	0104                	addi	s1,sp,128
    resultkon[0] = 0xbbbbbbb0;
     f4a:	0306                	slli	t1,t1,0x1
     f4c:	097f                	0x97f
     f4e:	0008                	0x8
     f50:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f52:	0005                	c.nop	1
     f54:	0402                	c.slli64	s0
     f56:	0601                	addi	a2,a2,0
     f58:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xbbbbbbb1;
     f5c:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f5e:	0306                	slli	t1,t1,0x1
     f60:	0904                	addi	s1,sp,144
    resultkon[0] = 0xbbbbbbb0;
     f62:	0004                	0x4
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     f64:	0301                	addi	t1,t1,0
    resultkon[0] = 0xbbbbbbb1;
     f66:	0902                	c.slli64	s2
    resultkon[0] = 0xccccccc0;
     f68:	0000                	unimp
     f6a:	0501                	addi	a0,a0,0
     f6c:	0601                	addi	a2,a2,0
     f6e:	00090103          	lb	sp,0(s2)
     f72:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     f74:	0905                	addi	s2,s2,1
     f76:	0306                	slli	t1,t1,0x1
     f78:	7fb8                	flw	fa4,120(a5)
     f7a:	2a09                	jal	108c <__DTOR_END__+0xa4>
     f7c:	0100                	addi	s0,sp,128
     f7e:	1605                	addi	a2,a2,-31
     f80:	0306                	slli	t1,t1,0x1
     f82:	0900                	addi	s0,sp,144
     f84:	0000                	unimp
     f86:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
     f88:	030d                	addi	t1,t1,3
     f8a:	0900                	addi	s0,sp,144
            resultkon[0] = 0xDEDEDEDE;
     f8c:	0004                	0x4
     f8e:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
     f90:	09000313          	li	t1,144
            resultkon[0] = 0xDEDEDEDE;
     f94:	0004                	0x4
     f96:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
     f98:	0305                	addi	t1,t1,1
     f9a:	0906                	slli	s2,s2,0x1
        if(!(message[i] == Dec_Message[i])){
     f9c:	0004                	0x4
     f9e:	0501                	addi	a0,a0,0
     fa0:	097a0313          	addi	t1,s4,151
     fa4:	0006                	c.slli	zero,0x1
     fa6:	0501                	addi	a0,a0,0
     fa8:	0605                	addi	a2,a2,1
     faa:	02090603          	lb	a2,32(s2)
            resultkon[0] = 0xBABABABA;
     fae:	0100                	addi	s0,sp,128
     fb0:	0905                	addi	s2,s2,1
     fb2:	02090303          	lb	t1,32(s2)
}
     fb6:	0100                	addi	s0,sp,128
     fb8:	1305                	addi	t1,t1,-31
     fba:	0306                	slli	t1,t1,0x1
     fbc:	0900                	addi	s0,sp,144
     fbe:	0000                	unimp
     fc0:	0501                	addi	a0,a0,0
     fc2:	0305                	addi	t1,t1,1
     fc4:	0909                	addi	s2,s2,2
     fc6:	000e                	c.slli	zero,0x3
     fc8:	0501                	addi	a0,a0,0
     fca:	09770313          	addi	t1,a4,151
            resultkon[0] = 0xDEDEDEDE;
     fce:	0004                	0x4
    for(i = 0; i < 32; ++i){
     fd0:	0501                	addi	a0,a0,0
     fd2:	0605                	addi	a2,a2,1
     fd4:	02090903          	lb	s2,32(s2)
     fd8:	0100                	addi	s0,sp,128
     fda:	0905                	addi	s2,s2,1
     fdc:	02090303          	lb	t1,32(s2)
     fe0:	0100                	addi	s0,sp,128
     fe2:	1005                	c.nop	-31
     fe4:	0306                	slli	t1,t1,0x1
     fe6:	0900                	addi	s0,sp,144
     fe8:	0002                	c.slli64	zero
     fea:	0501                	addi	a0,a0,0
     fec:	0015                	c.nop	5
     fee:	0402                	c.slli64	s0
     ff0:	0601                	addi	a2,a2,0
     ff2:	02090003          	lb	zero,32(s2)
     ff6:	0100                	addi	s0,sp,128
     ff8:	0905                	addi	s2,s2,1
     ffa:	0200                	addi	s0,sp,256
     ffc:	0104                	addi	s1,sp,128
     ffe:	0306                	slli	t1,t1,0x1
    1000:	0900                	addi	s0,sp,144
    1002:	0000                	unimp
    1004:	0501                	addi	a0,a0,0
    1006:	0605                	addi	a2,a2,1
    1008:	04090c03          	lb	s8,64(s2)
    100c:	0100                	addi	s0,sp,128
    100e:	08090703          	lb	a4,128(s2)
    1012:	0100                	addi	s0,sp,128
    1014:	08090103          	lb	sp,128(s2)
    1018:	0100                	addi	s0,sp,128
    101a:	0905                	addi	s2,s2,1
    101c:	08090403          	lb	s0,128(s2)
    1020:	0100                	addi	s0,sp,128
    1022:	1005                	c.nop	-31
    1024:	0306                	slli	t1,t1,0x1
    1026:	0900                	addi	s0,sp,144
    1028:	0000                	unimp
    102a:	0501                	addi	a0,a0,0
    102c:	001c                	0x1c
    102e:	0402                	c.slli64	s0
    1030:	0601                	addi	a2,a2,0
    1032:	02090003          	lb	zero,32(s2)
    1036:	0100                	addi	s0,sp,128
    1038:	0905                	addi	s2,s2,1
    103a:	0200                	addi	s0,sp,256
    103c:	0104                	addi	s1,sp,128
    103e:	0306                	slli	t1,t1,0x1
    1040:	0900                	addi	s0,sp,144
    1042:	0008                	0x8
    1044:	0501                	addi	a0,a0,0
    1046:	000d                	c.nop	3
    1048:	0402                	c.slli64	s0
    104a:	69030603          	lb	a2,1680(t1)
    104e:	0809                	addi	a6,a6,2
    1050:	0100                	addi	s0,sp,128
    1052:	3005                	jal	872 <generate_keys+0xc>
    1054:	0200                	addi	s0,sp,256
    1056:	0304                	addi	s1,sp,384
    1058:	0306                	slli	t1,t1,0x1
    105a:	0900                	addi	s0,sp,144
    105c:	0000                	unimp
    105e:	0501                	addi	a0,a0,0
    1060:	04020027          	0x4020027
    1064:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1068:	0006                	c.slli	zero,0x1
    106a:	0501                	addi	a0,a0,0
    106c:	0021                	c.nop	8
    106e:	0402                	c.slli64	s0
    1070:	097f0303          	lb	t1,151(t5)
    1074:	0004                	0x4
    1076:	0501                	addi	a0,a0,0
    1078:	04020027          	0x4020027
    107c:	09010303          	lb	t1,144(sp)
    1080:	0004                	0x4
    1082:	0501                	addi	a0,a0,0
    1084:	0019                	c.nop	6
    1086:	0402                	c.slli64	s0
    1088:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    108c:	0002                	c.slli64	zero
    108e:	0501                	addi	a0,a0,0
    1090:	0021                	c.nop	8
    1092:	0402                	c.slli64	s0
    1094:	7f030603          	lb	a2,2032(t1)
    1098:	0409                	addi	s0,s0,2
    109a:	0100                	addi	s0,sp,128
    109c:	0d05                	addi	s10,s10,1
    109e:	02091903          	lh	s2,32(s2)
    10a2:	0100                	addi	s0,sp,128
    10a4:	0f05                	addi	t5,t5,1
    10a6:	0306                	slli	t1,t1,0x1
    10a8:	0900                	addi	s0,sp,144
    10aa:	0000                	unimp
    10ac:	0501                	addi	a0,a0,0
    10ae:	0024                	addi	s1,sp,8
    10b0:	0402                	c.slli64	s0
    10b2:	0602                	c.slli64	a2
    10b4:	02097f03          	0x2097f03
    10b8:	0100                	addi	s0,sp,128
    10ba:	2605                	jal	13da <product2+0x16>
    10bc:	0200                	addi	s0,sp,256
    10be:	0204                	addi	s1,sp,256
    10c0:	0306                	slli	t1,t1,0x1
    10c2:	0900                	addi	s0,sp,144
    10c4:	0000                	unimp
    10c6:	0501                	addi	a0,a0,0
    10c8:	000d                	c.nop	3
    10ca:	0402                	c.slli64	s0
    10cc:	09030603          	lb	a2,144(t1)
    10d0:	0409                	addi	s0,s0,2
    10d2:	0100                	addi	s0,sp,128
    10d4:	1205                	addi	tp,tp,-31
    10d6:	0200                	addi	s0,sp,256
    10d8:	0304                	addi	s1,sp,384
    10da:	0306                	slli	t1,t1,0x1
    10dc:	0900                	addi	s0,sp,144
    10de:	0000                	unimp
    10e0:	0501                	addi	a0,a0,0
    10e2:	0021                	c.nop	8
    10e4:	0402                	c.slli64	s0
    10e6:	7f030603          	lb	a2,2032(t1)
    10ea:	0a09                	addi	s4,s4,2
    10ec:	0100                	addi	s0,sp,128
    10ee:	1505                	addi	a0,a0,-31
    10f0:	0200                	addi	s0,sp,256
    10f2:	0104                	addi	s1,sp,128
    10f4:	02090003          	lb	zero,32(s2)
    10f8:	0100                	addi	s0,sp,128
    10fa:	0905                	addi	s2,s2,1
    10fc:	0200                	addi	s0,sp,256
    10fe:	0104                	addi	s1,sp,128
    1100:	0306                	slli	t1,t1,0x1
    1102:	0900                	addi	s0,sp,144
    1104:	0000                	unimp
    1106:	0001                	nop
    1108:	0402                	c.slli64	s0
    110a:	08030603          	lb	a2,128(t1)
    110e:	0609                	addi	a2,a2,2
    1110:	0100                	addi	s0,sp,128
    1112:	1305                	addi	t1,t1,-31
    1114:	0200                	addi	s0,sp,256
    1116:	0304                	addi	s1,sp,384
    1118:	0306                	slli	t1,t1,0x1
    111a:	0900                	addi	s0,sp,144
    111c:	0004                	0x4
    111e:	0501                	addi	a0,a0,0
    1120:	0016                	c.slli	zero,0x5
    1122:	0402                	c.slli64	s0
    1124:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1128:	0004                	0x4
    112a:	0501                	addi	a0,a0,0
    112c:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1130:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1134:	0002                	c.slli64	zero
    1136:	0501                	addi	a0,a0,0
    1138:	001c                	0x1c
    113a:	0402                	c.slli64	s0
    113c:	097f0303          	lb	t1,151(t5)
    1140:	0002                	c.slli64	zero
    1142:	0501                	addi	a0,a0,0
    1144:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1148:	09010303          	lb	t1,144(sp)
    114c:	0002                	c.slli64	zero
    114e:	0501                	addi	a0,a0,0
    1150:	001c                	0x1c
    1152:	0402                	c.slli64	s0
    1154:	7f030603          	lb	a2,2032(t1)
    1158:	0209                	addi	tp,tp,2
    115a:	0100                	addi	s0,sp,128
    115c:	0905                	addi	s2,s2,1
    115e:	0200                	addi	s0,sp,256
    1160:	0304                	addi	s1,sp,384
    1162:	02090603          	lb	a2,32(s2)
    1166:	0100                	addi	s0,sp,128
    1168:	1305                	addi	t1,t1,-31
    116a:	0200                	addi	s0,sp,256
    116c:	0304                	addi	s1,sp,384
    116e:	0306                	slli	t1,t1,0x1
    1170:	0900                	addi	s0,sp,144
    1172:	0000                	unimp
    1174:	0501                	addi	a0,a0,0
    1176:	0025                	c.nop	9
    1178:	0402                	c.slli64	s0
    117a:	7f030603          	lb	a2,2032(t1)
    117e:	0c09                	addi	s8,s8,2
    1180:	0100                	addi	s0,sp,128
    1182:	3c05                	jal	bb2 <ntru_encyrpt+0x5a>
    1184:	06090a03          	lb	s4,96(s2)
    1188:	0100                	addi	s0,sp,128
    118a:	0505                	addi	a0,a0,1
    118c:	00090203          	lb	tp,0(s2)
    1190:	0100                	addi	s0,sp,128
    1192:	00090103          	lb	sp,0(s2)
    1196:	0100                	addi	s0,sp,128
    1198:	00090103          	lb	sp,0(s2)
    119c:	0100                	addi	s0,sp,128
    119e:	0905                	addi	s2,s2,1
    11a0:	0306                	slli	t1,t1,0x1
    11a2:	0900                	addi	s0,sp,144
    11a4:	0000                	unimp
    11a6:	0501                	addi	a0,a0,0
    11a8:	033c                	addi	a5,sp,392
    11aa:	097c                	addi	a5,sp,156
    11ac:	0004                	0x4
    11ae:	0501                	addi	a0,a0,0
    11b0:	0309                	addi	t1,t1,2
    11b2:	0904                	addi	s1,sp,144
    11b4:	0002                	c.slli64	zero
    11b6:	0501                	addi	a0,a0,0
    11b8:	033c                	addi	a5,sp,392
    11ba:	097c                	addi	a5,sp,156
    11bc:	0004                	0x4
    11be:	0501                	addi	a0,a0,0
    11c0:	0309                	addi	t1,t1,2
    11c2:	0904                	addi	s1,sp,144
    11c4:	001c                	0x1c
    11c6:	0301                	addi	t1,t1,0
    11c8:	0901                	addi	s2,s2,0
    11ca:	0006                	c.slli	zero,0x1
    11cc:	0301                	addi	t1,t1,0
    11ce:	0901                	addi	s2,s2,0
    11d0:	0006                	c.slli	zero,0x1
    11d2:	0301                	addi	t1,t1,0
    11d4:	0902                	c.slli64	s2
    11d6:	0006                	c.slli	zero,0x1
    11d8:	0301                	addi	t1,t1,0
    11da:	0901                	addi	s2,s2,0
    11dc:	0006                	c.slli	zero,0x1
    11de:	0301                	addi	t1,t1,0
    11e0:	0901                	addi	s2,s2,0
    11e2:	0006                	c.slli	zero,0x1
    11e4:	0301                	addi	t1,t1,0
    11e6:	0901                	addi	s2,s2,0
    11e8:	0006                	c.slli	zero,0x1
    11ea:	0501                	addi	a0,a0,0
    11ec:	033c                	addi	a5,sp,392
    11ee:	0975                	addi	s2,s2,29
    11f0:	0004                	0x4
    11f2:	0501                	addi	a0,a0,0
    11f4:	0309                	addi	t1,t1,2
    11f6:	0904                	addi	s1,sp,144
    11f8:	0004                	0x4
    11fa:	0501                	addi	a0,a0,0
    11fc:	0605                	addi	a2,a2,1
    11fe:	04090103          	lb	sp,64(s2)
    1202:	0100                	addi	s0,sp,128
    1204:	00090103          	lb	sp,0(s2)
    1208:	0100                	addi	s0,sp,128
    120a:	00090203          	lb	tp,0(s2)
    120e:	0100                	addi	s0,sp,128
    1210:	00090103          	lb	sp,0(s2)
    1214:	0100                	addi	s0,sp,128
    1216:	00090103          	lb	sp,0(s2)
    121a:	0100                	addi	s0,sp,128
    121c:	00090103          	lb	sp,0(s2)
    1220:	0100                	addi	s0,sp,128
    1222:	0905                	addi	s2,s2,1
    1224:	0306                	slli	t1,t1,0x1
    1226:	0900                	addi	s0,sp,144
    1228:	0000                	unimp
    122a:	0501                	addi	a0,a0,0
    122c:	0605                	addi	a2,a2,1
    122e:	02090103          	lb	sp,32(s2)
    1232:	0100                	addi	s0,sp,128
    1234:	00090103          	lb	sp,0(s2)
    1238:	0100                	addi	s0,sp,128
    123a:	00090103          	lb	sp,0(s2)
    123e:	0100                	addi	s0,sp,128
    1240:	00090103          	lb	sp,0(s2)
    1244:	0100                	addi	s0,sp,128
    1246:	00090203          	lb	tp,0(s2)
    124a:	0100                	addi	s0,sp,128
    124c:	00090103          	lb	sp,0(s2)
    1250:	0100                	addi	s0,sp,128
    1252:	0c05                	addi	s8,s8,1
    1254:	0306                	slli	t1,t1,0x1
    1256:	0900                	addi	s0,sp,144
    1258:	0002                	c.slli64	zero
    125a:	0501                	addi	a0,a0,0
    125c:	0311                	addi	t1,t1,4
    125e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    1262:	0001                	nop
    1264:	0402                	c.slli64	s0
    1266:	0601                	addi	a2,a2,0
    1268:	08097d03          	0x8097d03
    126c:	0100                	addi	s0,sp,128
    126e:	0505                	addi	a0,a0,1
    1270:	0200                	addi	s0,sp,256
    1272:	0104                	addi	s1,sp,128
    1274:	0306                	slli	t1,t1,0x1
    1276:	0900                	addi	s0,sp,144
    1278:	0000                	unimp
    127a:	0601                	addi	a2,a2,0
    127c:	04090b03          	lb	s6,64(s2)
    1280:	0100                	addi	s0,sp,128
    1282:	0d05                	addi	s10,s10,1
    1284:	0306                	slli	t1,t1,0x1
    1286:	0900                	addi	s0,sp,144
    1288:	0000                	unimp
    128a:	0501                	addi	a0,a0,0
    128c:	0605                	addi	a2,a2,1
    128e:	06090303          	lb	t1,96(s2)
    1292:	0100                	addi	s0,sp,128
    1294:	0b05                	addi	s6,s6,1
    1296:	00090003          	lb	zero,0(s2)
    129a:	0100                	addi	s0,sp,128
    129c:	2405                	jal	14bc <product2+0xf8>
    129e:	0306                	slli	t1,t1,0x1
    12a0:	0916                	slli	s2,s2,0x5
    12a2:	0000                	unimp
    12a4:	0501                	addi	a0,a0,0
    12a6:	0319                	addi	t1,t1,6
    12a8:	0935                	addi	s2,s2,13
    12aa:	0008                	0x8
    12ac:	0501                	addi	a0,a0,0
    12ae:	0609                	addi	a2,a2,2
    12b0:	097fb703          	0x97fb703
    12b4:	0008                	0x8
    12b6:	0501                	addi	a0,a0,0
    12b8:	0305                	addi	t1,t1,1
    12ba:	0908                	addi	a0,sp,144
    12bc:	0000                	unimp
    12be:	0301                	addi	t1,t1,0
    12c0:	0909                	addi	s2,s2,2
    12c2:	0008                	0x8
    12c4:	0501                	addi	a0,a0,0
    12c6:	0309                	addi	t1,t1,2
    12c8:	0902                	c.slli64	s2
    12ca:	0008                	0x8
    12cc:	0501                	addi	a0,a0,0
    12ce:	0003060f          	0x3060f
    12d2:	0009                	c.nop	2
    12d4:	0100                	addi	s0,sp,128
    12d6:	0905                	addi	s2,s2,1
    12d8:	0306                	slli	t1,t1,0x1
    12da:	0901                	addi	s2,s2,0
    12dc:	000c                	0xc
    12de:	0501                	addi	a0,a0,0
    12e0:	0019                	c.nop	6
    12e2:	0402                	c.slli64	s0
    12e4:	0301                	addi	t1,t1,0
    12e6:	0900                	addi	s0,sp,144
    12e8:	0004                	0x4
    12ea:	0501                	addi	a0,a0,0
    12ec:	0009                	c.nop	2
    12ee:	0402                	c.slli64	s0
    12f0:	0601                	addi	a2,a2,0
    12f2:	00090003          	lb	zero,0(s2)
    12f6:	0100                	addi	s0,sp,128
    12f8:	1005                	c.nop	-31
    12fa:	0a090603          	lb	a2,160(s2)
    12fe:	0100                	addi	s0,sp,128
    1300:	1505                	addi	a0,a0,-31
    1302:	0200                	addi	s0,sp,256
    1304:	0104                	addi	s1,sp,128
    1306:	0306                	slli	t1,t1,0x1
    1308:	0900                	addi	s0,sp,144
    130a:	0002                	c.slli64	zero
    130c:	0501                	addi	a0,a0,0
    130e:	0009                	c.nop	2
    1310:	0402                	c.slli64	s0
    1312:	0601                	addi	a2,a2,0
    1314:	00090003          	lb	zero,0(s2)
    1318:	0100                	addi	s0,sp,128
    131a:	0505                	addi	a0,a0,1
    131c:	0306                	slli	t1,t1,0x1
    131e:	090c                	addi	a1,sp,144
    1320:	0004                	0x4
    1322:	0501                	addi	a0,a0,0
    1324:	0309                	addi	t1,t1,2
    1326:	0902                	c.slli64	s2
    1328:	0008                	0x8
    132a:	0501                	addi	a0,a0,0
    132c:	0610                	addi	a2,sp,768
    132e:	00090003          	lb	zero,0(s2)
    1332:	0100                	addi	s0,sp,128
    1334:	0905                	addi	s2,s2,1
    1336:	0306                	slli	t1,t1,0x1
    1338:	0901                	addi	s2,s2,0
    133a:	000c                	0xc
    133c:	0501                	addi	a0,a0,0
    133e:	0610                	addi	a2,sp,768
    1340:	00090003          	lb	zero,0(s2)
    1344:	0100                	addi	s0,sp,128
    1346:	1505                	addi	a0,a0,-31
    1348:	0200                	addi	s0,sp,256
    134a:	0104                	addi	s1,sp,128
    134c:	0306                	slli	t1,t1,0x1
    134e:	0900                	addi	s0,sp,144
    1350:	0002                	c.slli64	zero
    1352:	0501                	addi	a0,a0,0
    1354:	0009                	c.nop	2
    1356:	0402                	c.slli64	s0
    1358:	0601                	addi	a2,a2,0
    135a:	00090003          	lb	zero,0(s2)
    135e:	0100                	addi	s0,sp,128
    1360:	0505                	addi	a0,a0,1
    1362:	0306                	slli	t1,t1,0x1
    1364:	090c                	addi	a1,sp,144
    1366:	0004                	0x4
    1368:	0501                	addi	a0,a0,0
    136a:	0309                	addi	t1,t1,2
    136c:	0904                	addi	s1,sp,144
    136e:	0008                	0x8
    1370:	0501                	addi	a0,a0,0
    1372:	0610                	addi	a2,sp,768
    1374:	00090003          	lb	zero,0(s2)
    1378:	0100                	addi	s0,sp,128
    137a:	0905                	addi	s2,s2,1
    137c:	0306                	slli	t1,t1,0x1
    137e:	0901                	addi	s2,s2,0
    1380:	000e                	c.slli	zero,0x3
    1382:	0501                	addi	a0,a0,0
    1384:	0610                	addi	a2,sp,768
    1386:	00090003          	lb	zero,0(s2)
    138a:	0100                	addi	s0,sp,128
    138c:	1505                	addi	a0,a0,-31
    138e:	0200                	addi	s0,sp,256
    1390:	0104                	addi	s1,sp,128
    1392:	0306                	slli	t1,t1,0x1
    1394:	0900                	addi	s0,sp,144
    1396:	0002                	c.slli64	zero
    1398:	0501                	addi	a0,a0,0
    139a:	0009                	c.nop	2
    139c:	0402                	c.slli64	s0
    139e:	0601                	addi	a2,a2,0
    13a0:	00090003          	lb	zero,0(s2)
    13a4:	0100                	addi	s0,sp,128
    13a6:	0505                	addi	a0,a0,1
    13a8:	0306                	slli	t1,t1,0x1
    13aa:	090c                	addi	a1,sp,144
    13ac:	0004                	0x4
    13ae:	0501                	addi	a0,a0,0
    13b0:	0309                	addi	t1,t1,2
    13b2:	0902                	c.slli64	s2
    13b4:	0008                	0x8
    13b6:	0501                	addi	a0,a0,0
    13b8:	0610                	addi	a2,sp,768
    13ba:	02090003          	lb	zero,32(s2)
    13be:	0100                	addi	s0,sp,128
    13c0:	1505                	addi	a0,a0,-31
    13c2:	0200                	addi	s0,sp,256
    13c4:	0104                	addi	s1,sp,128
    13c6:	0306                	slli	t1,t1,0x1
    13c8:	0900                	addi	s0,sp,144
    13ca:	0002                	c.slli64	zero
    13cc:	0501                	addi	a0,a0,0
    13ce:	0009                	c.nop	2
    13d0:	0402                	c.slli64	s0
    13d2:	0601                	addi	a2,a2,0
    13d4:	00090003          	lb	zero,0(s2)
    13d8:	0100                	addi	s0,sp,128
    13da:	0505                	addi	a0,a0,1
    13dc:	0306                	slli	t1,t1,0x1
    13de:	0004090b          	0x4090b
    13e2:	0501                	addi	a0,a0,0
    13e4:	0309                	addi	t1,t1,2
    13e6:	0905                	addi	s2,s2,1
    13e8:	0008                	0x8
    13ea:	0501                	addi	a0,a0,0
    13ec:	0612                	slli	a2,a2,0x4
    13ee:	097fa803          	lw	a6,151(t6)
    13f2:	0002                	c.slli64	zero
    13f4:	0501                	addi	a0,a0,0
    13f6:	0310                	addi	a2,sp,384
    13f8:	00d8                	addi	a4,sp,68
    13fa:	0209                	addi	tp,tp,2
    13fc:	0100                	addi	s0,sp,128
    13fe:	1505                	addi	a0,a0,-31
    1400:	0200                	addi	s0,sp,256
    1402:	0104                	addi	s1,sp,128
    1404:	0306                	slli	t1,t1,0x1
    1406:	0900                	addi	s0,sp,144
    1408:	0002                	c.slli64	zero
    140a:	0501                	addi	a0,a0,0
    140c:	0009                	c.nop	2
    140e:	0402                	c.slli64	s0
    1410:	0601                	addi	a2,a2,0
    1412:	00090003          	lb	zero,0(s2)
    1416:	0100                	addi	s0,sp,128
    1418:	0b05                	addi	s6,s6,1
    141a:	0306                	slli	t1,t1,0x1
    141c:	7fa6                	flw	ft11,104(sp)
    141e:	0409                	addi	s0,s0,2
    1420:	0100                	addi	s0,sp,128
    1422:	1005                	c.nop	-31
    1424:	0306                	slli	t1,t1,0x1
    1426:	00e5                	addi	ra,ra,25
    1428:	0209                	addi	tp,tp,2
    142a:	0100                	addi	s0,sp,128
    142c:	02090103          	lb	sp,32(s2)
    1430:	0100                	addi	s0,sp,128
    1432:	1505                	addi	a0,a0,-31
    1434:	0200                	addi	s0,sp,256
    1436:	0104                	addi	s1,sp,128
    1438:	0306                	slli	t1,t1,0x1
    143a:	097f                	0x97f
    143c:	0002                	c.slli64	zero
    143e:	0501                	addi	a0,a0,0
    1440:	0009                	c.nop	2
    1442:	0402                	c.slli64	s0
    1444:	0601                	addi	a2,a2,0
    1446:	00090003          	lb	zero,0(s2)
    144a:	0100                	addi	s0,sp,128
    144c:	1505                	addi	a0,a0,-31
    144e:	0200                	addi	s0,sp,256
    1450:	0104                	addi	s1,sp,128
    1452:	0306                	slli	t1,t1,0x1
    1454:	090c                	addi	a1,sp,144
    1456:	000c                	0xc
    1458:	0501                	addi	a0,a0,0
    145a:	0009                	c.nop	2
    145c:	0402                	c.slli64	s0
    145e:	0601                	addi	a2,a2,0
    1460:	00090003          	lb	zero,0(s2)
    1464:	0100                	addi	s0,sp,128
    1466:	0306                	slli	t1,t1,0x1
    1468:	0905                	addi	s2,s2,1
    146a:	0004                	0x4
    146c:	0301                	addi	t1,t1,0
    146e:	0901                	addi	s2,s2,0
    1470:	0000                	unimp
    1472:	0501                	addi	a0,a0,0
    1474:	0605                	addi	a2,a2,1
    1476:	00090103          	lb	sp,0(s2)
    147a:	0100                	addi	s0,sp,128
    147c:	0905                	addi	s2,s2,1
    147e:	0200                	addi	s0,sp,256
    1480:	0304                	addi	s1,sp,384
    1482:	0306                	slli	t1,t1,0x1
    1484:	2a097efb          	0x2a097efb
    1488:	0100                	addi	s0,sp,128
    148a:	1805                	addi	a6,a6,-31
    148c:	0200                	addi	s0,sp,256
    148e:	0304                	addi	s1,sp,384
    1490:	0306                	slli	t1,t1,0x1
    1492:	0900                	addi	s0,sp,144
    1494:	0000                	unimp
    1496:	0501                	addi	a0,a0,0
    1498:	0011                	c.nop	4
    149a:	0402                	c.slli64	s0
    149c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    14a0:	0004                	0x4
    14a2:	0501                	addi	a0,a0,0
    14a4:	0402001b          	0x402001b
    14a8:	097f0303          	lb	t1,151(t5)
    14ac:	0008                	0x8
    14ae:	0501                	addi	a0,a0,0
    14b0:	0011                	c.nop	4
    14b2:	0402                	c.slli64	s0
    14b4:	09010303          	lb	t1,144(sp)
    14b8:	0002                	c.slli64	zero
    14ba:	0501                	addi	a0,a0,0
    14bc:	0009                	c.nop	2
    14be:	0402                	c.slli64	s0
    14c0:	01030603          	lb	a2,16(t1)
    14c4:	0409                	addi	s0,s0,2
    14c6:	0100                	addi	s0,sp,128
    14c8:	1805                	addi	a6,a6,-31
    14ca:	0200                	addi	s0,sp,256
    14cc:	0304                	addi	s1,sp,384
    14ce:	0306                	slli	t1,t1,0x1
    14d0:	0900                	addi	s0,sp,144
    14d2:	0000                	unimp
    14d4:	0501                	addi	a0,a0,0
    14d6:	0011                	c.nop	4
    14d8:	0402                	c.slli64	s0
    14da:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    14de:	0004                	0x4
    14e0:	0501                	addi	a0,a0,0
    14e2:	0009                	c.nop	2
    14e4:	0402                	c.slli64	s0
    14e6:	01030603          	lb	a2,16(t1)
    14ea:	0c09                	addi	s8,s8,2
    14ec:	0100                	addi	s0,sp,128
    14ee:	1105                	addi	sp,sp,-31
    14f0:	0200                	addi	s0,sp,256
    14f2:	0304                	addi	s1,sp,384
    14f4:	0306                	slli	t1,t1,0x1
    14f6:	0900                	addi	s0,sp,144
    14f8:	0000                	unimp
    14fa:	0501                	addi	a0,a0,0
    14fc:	0009                	c.nop	2
    14fe:	0402                	c.slli64	s0
    1500:	01030603          	lb	a2,16(t1)
    1504:	0809                	addi	a6,a6,2
    1506:	0100                	addi	s0,sp,128
    1508:	1105                	addi	sp,sp,-31
    150a:	0200                	addi	s0,sp,256
    150c:	0304                	addi	s1,sp,384
    150e:	0306                	slli	t1,t1,0x1
    1510:	0900                	addi	s0,sp,144
    1512:	0000                	unimp
    1514:	0501                	addi	a0,a0,0
    1516:	0402001b          	0x402001b
    151a:	7c030603          	lb	a2,1984(t1)
    151e:	0809                	addi	a6,a6,2
    1520:	0100                	addi	s0,sp,128
    1522:	0d05                	addi	s10,s10,1
    1524:	0200                	addi	s0,sp,256
    1526:	0304                	addi	s1,sp,384
    1528:	04092503          	lw	a0,64(s2)
    152c:	0100                	addi	s0,sp,128
    152e:	2205                	jal	164e <result+0x32>
    1530:	0200                	addi	s0,sp,256
    1532:	0304                	addi	s1,sp,384
    1534:	0306                	slli	t1,t1,0x1
    1536:	0900                	addi	s0,sp,144
    1538:	0000                	unimp
    153a:	0501                	addi	a0,a0,0
    153c:	001d                	c.nop	7
    153e:	0402                	c.slli64	s0
    1540:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1544:	0006                	c.slli	zero,0x1
    1546:	0501                	addi	a0,a0,0
    1548:	002a                	c.slli	zero,0xa
    154a:	0402                	c.slli64	s0
    154c:	097f0303          	lb	t1,151(t5)
    1550:	0002                	c.slli64	zero
    1552:	0501                	addi	a0,a0,0
    1554:	001d                	c.nop	7
    1556:	0402                	c.slli64	s0
    1558:	09010303          	lb	t1,144(sp)
    155c:	0004                	0x4
    155e:	0501                	addi	a0,a0,0
    1560:	002a                	c.slli	zero,0xa
    1562:	0402                	c.slli64	s0
    1564:	7f030603          	lb	a2,2032(t1)
    1568:	0409                	addi	s0,s0,2
    156a:	0100                	addi	s0,sp,128
    156c:	0d05                	addi	s10,s10,1
    156e:	0200                	addi	s0,sp,256
    1570:	0304                	addi	s1,sp,384
    1572:	02090703          	lb	a4,32(s2)
    1576:	0100                	addi	s0,sp,128
    1578:	1b05                	addi	s6,s6,-31
    157a:	0200                	addi	s0,sp,256
    157c:	0304                	addi	s1,sp,384
    157e:	0306                	slli	t1,t1,0x1
    1580:	0900                	addi	s0,sp,144
    1582:	0000                	unimp
    1584:	0501                	addi	a0,a0,0
    1586:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    158a:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    158e:	0004                	0x4
    1590:	0501                	addi	a0,a0,0
    1592:	001f 0402 0303      	0x3030402001f
    1598:	0900                	addi	s0,sp,144
    159a:	0004                	0x4
    159c:	0501                	addi	a0,a0,0
    159e:	0015                	c.nop	5
    15a0:	0402                	c.slli64	s0
    15a2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    15a6:	0004                	0x4
    15a8:	0501                	addi	a0,a0,0
    15aa:	0020                	addi	s0,sp,8
    15ac:	0402                	c.slli64	s0
    15ae:	097f0303          	lb	t1,151(t5)
    15b2:	0004                	0x4
    15b4:	0501                	addi	a0,a0,0
    15b6:	001f 0402 0303      	0x3030402001f
    15bc:	0901                	addi	s2,s2,0
    15be:	0002                	c.slli64	zero
    15c0:	0501                	addi	a0,a0,0
    15c2:	0015                	c.nop	5
    15c4:	0402                	c.slli64	s0
    15c6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    15ca:	0002                	c.slli64	zero
    15cc:	0501                	addi	a0,a0,0
    15ce:	0020                	addi	s0,sp,8
    15d0:	0402                	c.slli64	s0
    15d2:	7f030603          	lb	a2,2032(t1)
    15d6:	0209                	addi	tp,tp,2
    15d8:	0100                	addi	s0,sp,128
    15da:	0d05                	addi	s10,s10,1
    15dc:	0200                	addi	s0,sp,256
    15de:	0304                	addi	s1,sp,384
    15e0:	04091003          	lh	zero,64(s2)
    15e4:	0100                	addi	s0,sp,128
    15e6:	1b05                	addi	s6,s6,-31
    15e8:	0200                	addi	s0,sp,256
    15ea:	0304                	addi	s1,sp,384
    15ec:	0306                	slli	t1,t1,0x1
    15ee:	0900                	addi	s0,sp,144
    15f0:	0004                	0x4
    15f2:	0501                	addi	a0,a0,0
    15f4:	0015                	c.nop	5
    15f6:	0402                	c.slli64	s0
    15f8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    15fc:	0006                	c.slli	zero,0x1
    15fe:	0501                	addi	a0,a0,0
    1600:	0020                	addi	s0,sp,8
    1602:	0402                	c.slli64	s0
    1604:	097f0303          	lb	t1,151(t5)
    1608:	0002                	c.slli64	zero
    160a:	0501                	addi	a0,a0,0
    160c:	0015                	c.nop	5
    160e:	0402                	c.slli64	s0
    1610:	09010303          	lb	t1,144(sp)
    1614:	0002                	c.slli64	zero
    1616:	0501                	addi	a0,a0,0
    1618:	0020                	addi	s0,sp,8
    161a:	0402                	c.slli64	s0
    161c:	7f030603          	lb	a2,2032(t1)
    1620:	0209                	addi	tp,tp,2
    1622:	0100                	addi	s0,sp,128
    1624:	0d05                	addi	s10,s10,1
    1626:	0200                	addi	s0,sp,256
    1628:	0304                	addi	s1,sp,384
    162a:	02091203          	lh	tp,32(s2)
    162e:	0100                	addi	s0,sp,128
    1630:	1b05                	addi	s6,s6,-31
    1632:	0200                	addi	s0,sp,256
    1634:	0304                	addi	s1,sp,384
    1636:	0306                	slli	t1,t1,0x1
    1638:	0900                	addi	s0,sp,144
    163a:	0004                	0x4
    163c:	0501                	addi	a0,a0,0
    163e:	0015                	c.nop	5
    1640:	0402                	c.slli64	s0
    1642:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1646:	0006                	c.slli	zero,0x1
    1648:	0501                	addi	a0,a0,0
    164a:	0020                	addi	s0,sp,8
    164c:	0402                	c.slli64	s0
    164e:	097f0303          	lb	t1,151(t5)
    1652:	0002                	c.slli64	zero
    1654:	0501                	addi	a0,a0,0
    1656:	0015                	c.nop	5
    1658:	0402                	c.slli64	s0
    165a:	09010303          	lb	t1,144(sp)
    165e:	0002                	c.slli64	zero
    1660:	0501                	addi	a0,a0,0
    1662:	0020                	addi	s0,sp,8
    1664:	0402                	c.slli64	s0
    1666:	7f030603          	lb	a2,2032(t1)
    166a:	0209                	addi	tp,tp,2
    166c:	0100                	addi	s0,sp,128
    166e:	0d05                	addi	s10,s10,1
    1670:	0200                	addi	s0,sp,256
    1672:	0304                	addi	s1,sp,384
    1674:	02090f03          	lb	t5,32(s2)
    1678:	0100                	addi	s0,sp,128
    167a:	1905                	addi	s2,s2,-31
    167c:	0200                	addi	s0,sp,256
    167e:	0304                	addi	s1,sp,384
    1680:	0306                	slli	t1,t1,0x1
    1682:	0900                	addi	s0,sp,144
    1684:	0000                	unimp
    1686:	0501                	addi	a0,a0,0
    1688:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    168c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1690:	0004                	0x4
    1692:	0501                	addi	a0,a0,0
    1694:	001d                	c.nop	7
    1696:	0402                	c.slli64	s0
    1698:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    169c:	0004                	0x4
    169e:	0501                	addi	a0,a0,0
    16a0:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    16a4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    16a8:	0004                	0x4
    16aa:	0501                	addi	a0,a0,0
    16ac:	0020                	addi	s0,sp,8
    16ae:	0402                	c.slli64	s0
    16b0:	097f0303          	lb	t1,151(t5)
    16b4:	0004                	0x4
    16b6:	0501                	addi	a0,a0,0
    16b8:	001d                	c.nop	7
    16ba:	0402                	c.slli64	s0
    16bc:	09010303          	lb	t1,144(sp)
    16c0:	0002                	c.slli64	zero
    16c2:	0501                	addi	a0,a0,0
    16c4:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    16c8:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    16cc:	0002                	c.slli64	zero
    16ce:	0501                	addi	a0,a0,0
    16d0:	0020                	addi	s0,sp,8
    16d2:	0402                	c.slli64	s0
    16d4:	7f030603          	lb	a2,2032(t1)
    16d8:	0209                	addi	tp,tp,2
    16da:	0100                	addi	s0,sp,128
    16dc:	0d05                	addi	s10,s10,1
    16de:	0200                	addi	s0,sp,256
    16e0:	0304                	addi	s1,sp,384
    16e2:	04091103          	lh	sp,64(s2)
    16e6:	0100                	addi	s0,sp,128
    16e8:	1505                	addi	a0,a0,-31
    16ea:	0200                	addi	s0,sp,256
    16ec:	0304                	addi	s1,sp,384
    16ee:	0306                	slli	t1,t1,0x1
    16f0:	0900                	addi	s0,sp,144
    16f2:	0004                	0x4
    16f4:	0501                	addi	a0,a0,0
    16f6:	0020                	addi	s0,sp,8
    16f8:	0402                	c.slli64	s0
    16fa:	097f0303          	lb	t1,151(t5)
    16fe:	0006                	c.slli	zero,0x1
    1700:	0501                	addi	a0,a0,0
    1702:	0015                	c.nop	5
    1704:	0402                	c.slli64	s0
    1706:	09010303          	lb	t1,144(sp)
    170a:	0002                	c.slli64	zero
    170c:	0501                	addi	a0,a0,0
    170e:	000d                	c.nop	3
    1710:	0402                	c.slli64	s0
    1712:	01030603          	lb	a2,16(t1)
    1716:	0209                	addi	tp,tp,2
    1718:	0100                	addi	s0,sp,128
    171a:	1905                	addi	s2,s2,-31
    171c:	0200                	addi	s0,sp,256
    171e:	0304                	addi	s1,sp,384
    1720:	0306                	slli	t1,t1,0x1
    1722:	0900                	addi	s0,sp,144
    1724:	0000                	unimp
    1726:	0501                	addi	a0,a0,0
    1728:	0015                	c.nop	5
    172a:	0402                	c.slli64	s0
    172c:	09010303          	lb	t1,144(sp)
    1730:	0006                	c.slli	zero,0x1
    1732:	0001                	nop
    1734:	0402                	c.slli64	s0
    1736:	097f0303          	lb	t1,151(t5)
    173a:	0004                	0x4
    173c:	0501                	addi	a0,a0,0
    173e:	000d                	c.nop	3
    1740:	0402                	c.slli64	s0
    1742:	01030603          	lb	a2,16(t1)
    1746:	0209                	addi	tp,tp,2
    1748:	0100                	addi	s0,sp,128
    174a:	1505                	addi	a0,a0,-31
    174c:	0200                	addi	s0,sp,256
    174e:	0304                	addi	s1,sp,384
    1750:	0306                	slli	t1,t1,0x1
    1752:	0900                	addi	s0,sp,144
    1754:	0004                	0x4
    1756:	0501                	addi	a0,a0,0
    1758:	0016                	c.slli	zero,0x5
    175a:	0402                	c.slli64	s0
    175c:	09030303          	lb	t1,144(t1)
    1760:	0004                	0x4
    1762:	0501                	addi	a0,a0,0
    1764:	0015                	c.nop	5
    1766:	0402                	c.slli64	s0
    1768:	097d0303          	lb	t1,151(s10)
    176c:	0002                	c.slli64	zero
    176e:	0501                	addi	a0,a0,0
    1770:	000d                	c.nop	3
    1772:	0402                	c.slli64	s0
    1774:	01030603          	lb	a2,16(t1)
    1778:	0409                	addi	s0,s0,2
    177a:	0100                	addi	s0,sp,128
    177c:	1905                	addi	s2,s2,-31
    177e:	0200                	addi	s0,sp,256
    1780:	0304                	addi	s1,sp,384
    1782:	0306                	slli	t1,t1,0x1
    1784:	0900                	addi	s0,sp,144
    1786:	0000                	unimp
    1788:	0501                	addi	a0,a0,0
    178a:	0015                	c.nop	5
    178c:	0402                	c.slli64	s0
    178e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1792:	0004                	0x4
    1794:	0501                	addi	a0,a0,0
    1796:	0402000f          	0x402000f
    179a:	01030603          	lb	a2,16(t1)
    179e:	0409                	addi	s0,s0,2
    17a0:	0100                	addi	s0,sp,128
    17a2:	1705                	addi	a4,a4,-31
    17a4:	0200                	addi	s0,sp,256
    17a6:	0304                	addi	s1,sp,384
    17a8:	0306                	slli	t1,t1,0x1
    17aa:	0900                	addi	s0,sp,144
    17ac:	0000                	unimp
    17ae:	0501                	addi	a0,a0,0
    17b0:	000d                	c.nop	3
    17b2:	0402                	c.slli64	s0
    17b4:	01030603          	lb	a2,16(t1)
    17b8:	0809                	addi	a6,a6,2
    17ba:	0100                	addi	s0,sp,128
    17bc:	2005                	jal	17dc <result+0x1c0>
    17be:	0200                	addi	s0,sp,256
    17c0:	0304                	addi	s1,sp,384
    17c2:	00097a03          	0x97a03
    17c6:	0100                	addi	s0,sp,128
    17c8:	0d05                	addi	s10,s10,1
    17ca:	04090c03          	lb	s8,64(s2)
    17ce:	0100                	addi	s0,sp,128
    17d0:	1b05                	addi	s6,s6,-31
    17d2:	0306                	slli	t1,t1,0x1
    17d4:	0900                	addi	s0,sp,144
    17d6:	0000                	unimp
    17d8:	0501                	addi	a0,a0,0
    17da:	0320                	addi	s0,sp,392
    17dc:	0900                	addi	s0,sp,144
    17de:	0008                	0x8
    17e0:	0501                	addi	a0,a0,0
    17e2:	0310                	addi	a2,sp,384
    17e4:	0900                	addi	s0,sp,144
    17e6:	0004                	0x4
    17e8:	0501                	addi	a0,a0,0
    17ea:	001e                	c.slli	zero,0x7
    17ec:	0402                	c.slli64	s0
    17ee:	0602                	c.slli64	a2
    17f0:	04097f03          	0x4097f03
    17f4:	0100                	addi	s0,sp,128
    17f6:	0d05                	addi	s10,s10,1
    17f8:	0200                	addi	s0,sp,256
    17fa:	0304                	addi	s1,sp,384
    17fc:	04090d03          	lb	s10,64(s2)
    1800:	0100                	addi	s0,sp,128
    1802:	2005                	jal	1822 <result+0x206>
    1804:	0200                	addi	s0,sp,256
    1806:	0304                	addi	s1,sp,384
    1808:	0306                	slli	t1,t1,0x1
    180a:	0900                	addi	s0,sp,144
    180c:	0000                	unimp
    180e:	0001                	nop
    1810:	0402                	c.slli64	s0
    1812:	097f0303          	lb	t1,151(t5)
    1816:	0002                	c.slli64	zero
    1818:	0001                	nop
    181a:	0402                	c.slli64	s0
    181c:	09010303          	lb	t1,144(sp)
    1820:	0004                	0x4
    1822:	0501                	addi	a0,a0,0
    1824:	0025                	c.nop	9
    1826:	0402                	c.slli64	s0
    1828:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    182c:	0004                	0x4
    182e:	0501                	addi	a0,a0,0
    1830:	0015                	c.nop	5
    1832:	0402                	c.slli64	s0
    1834:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1838:	0004                	0x4
    183a:	0501                	addi	a0,a0,0
    183c:	0020                	addi	s0,sp,8
    183e:	0402                	c.slli64	s0
    1840:	7f030603          	lb	a2,2032(t1)
    1844:	0409                	addi	s0,s0,2
    1846:	0100                	addi	s0,sp,128
    1848:	2805                	jal	1878 <ti_2+0x4>
    184a:	02090c03          	lb	s8,32(s2)
    184e:	0100                	addi	s0,sp,128
    1850:	0505                	addi	a0,a0,1
    1852:	00090203          	lb	tp,0(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	2805                	jal	1888 <ti_2+0x14>
    185a:	0306                	slli	t1,t1,0x1
    185c:	097e                	slli	s2,s2,0x1f
    185e:	0000                	unimp
    1860:	0301                	addi	t1,t1,0
    1862:	0900                	addi	s0,sp,144
    1864:	0036                	c.slli	zero,0xd
    1866:	0501                	addi	a0,a0,0
    1868:	0309                	addi	t1,t1,2
    186a:	0902                	c.slli64	s2
    186c:	0004                	0x4
    186e:	0301                	addi	t1,t1,0
    1870:	0901                	addi	s2,s2,0
    1872:	0010                	0x10
    1874:	0301                	addi	t1,t1,0
    1876:	097f                	0x97f
    1878:	000a                	c.slli	zero,0x2
    187a:	0501                	addi	a0,a0,0
    187c:	0605                	addi	a2,a2,1
    187e:	6c090103          	lb	sp,1728(s2)
    1882:	0100                	addi	s0,sp,128
    1884:	1005                	c.nop	-31
    1886:	0306                	slli	t1,t1,0x1
    1888:	0906                	slli	s2,s2,0x1
    188a:	0000                	unimp
    188c:	0501                	addi	a0,a0,0
    188e:	0309                	addi	t1,t1,2
    1890:	097a                	slli	s2,s2,0x1e
    1892:	0004                	0x4
    1894:	0301                	addi	t1,t1,0
    1896:	0906                	slli	s2,s2,0x1
    1898:	0002                	c.slli64	zero
    189a:	0501                	addi	a0,a0,0
    189c:	030e                	slli	t1,t1,0x3
    189e:	0905                	addi	s2,s2,1
    18a0:	000e                	c.slli	zero,0x3
    18a2:	0501                	addi	a0,a0,0
    18a4:	0309                	addi	t1,t1,2
    18a6:	0975                	addi	s2,s2,29
    18a8:	000a                	c.slli	zero,0x2
    18aa:	0501                	addi	a0,a0,0
    18ac:	0605                	addi	a2,a2,1
    18ae:	64090203          	lb	tp,1600(s2)
    18b2:	0100                	addi	s0,sp,128
    18b4:	00090103          	lb	sp,0(s2)
    18b8:	0100                	addi	s0,sp,128
    18ba:	00090103          	lb	sp,0(s2)
    18be:	0100                	addi	s0,sp,128
    18c0:	00090103          	lb	sp,0(s2)
    18c4:	0100                	addi	s0,sp,128
    18c6:	00090103          	lb	sp,0(s2)
    18ca:	0100                	addi	s0,sp,128
    18cc:	00090103          	lb	sp,0(s2)
    18d0:	0100                	addi	s0,sp,128
    18d2:	00090103          	lb	sp,0(s2)
    18d6:	0100                	addi	s0,sp,128
    18d8:	00090303          	lb	t1,0(s2)
    18dc:	0100                	addi	s0,sp,128
    18de:	00090103          	lb	sp,0(s2)
    18e2:	0100                	addi	s0,sp,128
    18e4:	0e05                	addi	t3,t3,1
    18e6:	0306                	slli	t1,t1,0x1
    18e8:	0900                	addi	s0,sp,144
    18ea:	0000                	unimp
    18ec:	0501                	addi	a0,a0,0
    18ee:	0605                	addi	a2,a2,1
    18f0:	04090203          	lb	tp,64(s2)
    18f4:	0100                	addi	s0,sp,128
    18f6:	0b05                	addi	s6,s6,1
    18f8:	0306                	slli	t1,t1,0x1
    18fa:	0900                	addi	s0,sp,144
    18fc:	0000                	unimp
    18fe:	0501                	addi	a0,a0,0
    1900:	0010                	0x10
    1902:	0402                	c.slli64	s0
    1904:	0601                	addi	a2,a2,0
    1906:	02090003          	lb	zero,32(s2)
    190a:	0100                	addi	s0,sp,128
    190c:	0505                	addi	a0,a0,1
    190e:	0200                	addi	s0,sp,256
    1910:	0104                	addi	s1,sp,128
    1912:	0306                	slli	t1,t1,0x1
    1914:	0900                	addi	s0,sp,144
    1916:	0000                	unimp
    1918:	0301                	addi	t1,t1,0
    191a:	0906                	slli	s2,s2,0x1
    191c:	0006                	c.slli	zero,0x1
    191e:	0501                	addi	a0,a0,0
    1920:	0011                	c.nop	4
    1922:	0402                	c.slli64	s0
    1924:	0601                	addi	a2,a2,0
    1926:	04090003          	lb	zero,64(s2)
    192a:	0100                	addi	s0,sp,128
    192c:	0505                	addi	a0,a0,1
    192e:	0200                	addi	s0,sp,256
    1930:	0104                	addi	s1,sp,128
    1932:	0306                	slli	t1,t1,0x1
    1934:	0900                	addi	s0,sp,144
    1936:	0000                	unimp
    1938:	0501                	addi	a0,a0,0
    193a:	0907030b          	0x907030b
    193e:	0004                	0x4
    1940:	0501                	addi	a0,a0,0
    1942:	0318                	addi	a4,sp,384
    1944:	0901                	addi	s2,s2,0
    1946:	0002                	c.slli64	zero
    1948:	0501                	addi	a0,a0,0
    194a:	0010                	0x10
    194c:	0402                	c.slli64	s0
    194e:	0601                	addi	a2,a2,0
    1950:	08097f03          	0x8097f03
    1954:	0100                	addi	s0,sp,128
    1956:	0505                	addi	a0,a0,1
    1958:	0200                	addi	s0,sp,256
    195a:	0104                	addi	s1,sp,128
    195c:	0306                	slli	t1,t1,0x1
    195e:	0900                	addi	s0,sp,144
    1960:	0000                	unimp
    1962:	0501                	addi	a0,a0,0
    1964:	0316                	slli	t1,t1,0x5
    1966:	0905                	addi	s2,s2,1
    1968:	0008                	0x8
    196a:	0501                	addi	a0,a0,0
    196c:	0318                	addi	a4,sp,384
    196e:	0901                	addi	s2,s2,0
    1970:	0008                	0x8
    1972:	0501                	addi	a0,a0,0
    1974:	0010                	0x10
    1976:	0402                	c.slli64	s0
    1978:	0601                	addi	a2,a2,0
    197a:	08097f03          	0x8097f03
    197e:	0100                	addi	s0,sp,128
    1980:	0505                	addi	a0,a0,1
    1982:	0200                	addi	s0,sp,256
    1984:	0104                	addi	s1,sp,128
    1986:	0306                	slli	t1,t1,0x1
    1988:	0900                	addi	s0,sp,144
    198a:	0000                	unimp
    198c:	0601                	addi	a2,a2,0
    198e:	04090503          	lb	a0,64(s2)
    1992:	0100                	addi	s0,sp,128
    1994:	1a05                	addi	s4,s4,-31
    1996:	0306                	slli	t1,t1,0x1
    1998:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    199c:	0501                	addi	a0,a0,0
    199e:	030a                	slli	t1,t1,0x2
    19a0:	097d                	addi	s2,s2,31
    19a2:	0006                	c.slli	zero,0x1
    19a4:	0501                	addi	a0,a0,0
    19a6:	0605                	addi	a2,a2,1
    19a8:	0c090303          	lb	t1,192(s2)
    19ac:	0100                	addi	s0,sp,128
    19ae:	1805                	addi	a6,a6,-31
    19b0:	0306                	slli	t1,t1,0x1
    19b2:	0901                	addi	s2,s2,0
    19b4:	0002                	c.slli64	zero
    19b6:	0501                	addi	a0,a0,0
    19b8:	0014                	0x14
    19ba:	0402                	c.slli64	s0
    19bc:	0601                	addi	a2,a2,0
    19be:	08097f03          	0x8097f03
    19c2:	0100                	addi	s0,sp,128
    19c4:	0505                	addi	a0,a0,1
    19c6:	0200                	addi	s0,sp,256
    19c8:	0104                	addi	s1,sp,128
    19ca:	0306                	slli	t1,t1,0x1
    19cc:	0900                	addi	s0,sp,144
    19ce:	0000                	unimp
    19d0:	0601                	addi	a2,a2,0
    19d2:	04090603          	lb	a2,64(s2)
    19d6:	0100                	addi	s0,sp,128
    19d8:	0a05                	addi	s4,s4,1
    19da:	0306                	slli	t1,t1,0x1
    19dc:	0900                	addi	s0,sp,144
    19de:	0000                	unimp
    19e0:	0501                	addi	a0,a0,0
    19e2:	0605                	addi	a2,a2,1
    19e4:	0c090403          	lb	s0,192(s2)
    19e8:	0100                	addi	s0,sp,128
    19ea:	1a05                	addi	s4,s4,-31
    19ec:	0306                	slli	t1,t1,0x1
    19ee:	0900                	addi	s0,sp,144
    19f0:	0006                	c.slli	zero,0x1
    19f2:	0501                	addi	a0,a0,0
    19f4:	0318                	addi	a4,sp,384
    19f6:	0901                	addi	s2,s2,0
    19f8:	0002                	c.slli64	zero
    19fa:	0501                	addi	a0,a0,0
    19fc:	0014                	0x14
    19fe:	0402                	c.slli64	s0
    1a00:	0601                	addi	a2,a2,0
    1a02:	08097f03          	0x8097f03
    1a06:	0100                	addi	s0,sp,128
    1a08:	0505                	addi	a0,a0,1
    1a0a:	0200                	addi	s0,sp,256
    1a0c:	0104                	addi	s1,sp,128
    1a0e:	0306                	slli	t1,t1,0x1
    1a10:	0900                	addi	s0,sp,144
    1a12:	0000                	unimp
    1a14:	0601                	addi	a2,a2,0
    1a16:	04090503          	lb	a0,64(s2)
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	0a05                	addi	s4,s4,1
    1a1e:	0306                	slli	t1,t1,0x1
    1a20:	0900                	addi	s0,sp,144
    1a22:	0000                	unimp
    1a24:	0501                	addi	a0,a0,0
    1a26:	0605                	addi	a2,a2,1
    1a28:	0a090303          	lb	t1,160(s2)
    1a2c:	0100                	addi	s0,sp,128
    1a2e:	0b05                	addi	s6,s6,1
    1a30:	0306                	slli	t1,t1,0x1
    1a32:	0900                	addi	s0,sp,144
    1a34:	0002                	c.slli64	zero
    1a36:	0501                	addi	a0,a0,0
    1a38:	0318                	addi	a4,sp,384
    1a3a:	0900                	addi	s0,sp,144
    1a3c:	0002                	c.slli64	zero
    1a3e:	0501                	addi	a0,a0,0
    1a40:	0010                	0x10
    1a42:	0402                	c.slli64	s0
    1a44:	0601                	addi	a2,a2,0
    1a46:	04090003          	lb	zero,64(s2)
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	0505                	addi	a0,a0,1
    1a4e:	0200                	addi	s0,sp,256
    1a50:	0104                	addi	s1,sp,128
    1a52:	0306                	slli	t1,t1,0x1
    1a54:	0900                	addi	s0,sp,144
    1a56:	0000                	unimp
    1a58:	0601                	addi	a2,a2,0
    1a5a:	04090603          	lb	a2,64(s2)
    1a5e:	0100                	addi	s0,sp,128
    1a60:	0a05                	addi	s4,s4,1
    1a62:	0306                	slli	t1,t1,0x1
    1a64:	0900                	addi	s0,sp,144
    1a66:	0000                	unimp
    1a68:	0501                	addi	a0,a0,0
    1a6a:	0605                	addi	a2,a2,1
    1a6c:	08090403          	lb	s0,128(s2)
    1a70:	0100                	addi	s0,sp,128
    1a72:	1a05                	addi	s4,s4,-31
    1a74:	0306                	slli	t1,t1,0x1
    1a76:	0900                	addi	s0,sp,144
    1a78:	0000                	unimp
    1a7a:	0501                	addi	a0,a0,0
    1a7c:	0318                	addi	a4,sp,384
    1a7e:	0901                	addi	s2,s2,0
    1a80:	000a                	c.slli	zero,0x2
    1a82:	0501                	addi	a0,a0,0
    1a84:	0014                	0x14
    1a86:	0402                	c.slli64	s0
    1a88:	0601                	addi	a2,a2,0
    1a8a:	08097f03          	0x8097f03
    1a8e:	0100                	addi	s0,sp,128
    1a90:	0505                	addi	a0,a0,1
    1a92:	0200                	addi	s0,sp,256
    1a94:	0104                	addi	s1,sp,128
    1a96:	0306                	slli	t1,t1,0x1
    1a98:	0900                	addi	s0,sp,144
    1a9a:	0002                	c.slli64	zero
    1a9c:	0501                	addi	a0,a0,0
    1a9e:	031a                	slli	t1,t1,0x6
    1aa0:	0905                	addi	s2,s2,1
    1aa2:	0004                	0x4
    1aa4:	0501                	addi	a0,a0,0
    1aa6:	0318                	addi	a4,sp,384
    1aa8:	0901                	addi	s2,s2,0
    1aaa:	0004                	0x4
    1aac:	0501                	addi	a0,a0,0
    1aae:	031a                	slli	t1,t1,0x6
    1ab0:	097f                	0x97f
    1ab2:	0008                	0x8
    1ab4:	0501                	addi	a0,a0,0
    1ab6:	0014                	0x14
    1ab8:	0402                	c.slli64	s0
    1aba:	0601                	addi	a2,a2,0
    1abc:	08090003          	lb	zero,128(s2)
    1ac0:	0100                	addi	s0,sp,128
    1ac2:	0505                	addi	a0,a0,1
    1ac4:	0200                	addi	s0,sp,256
    1ac6:	0104                	addi	s1,sp,128
    1ac8:	0306                	slli	t1,t1,0x1
    1aca:	0900                	addi	s0,sp,144
    1acc:	0000                	unimp
    1ace:	0601                	addi	a2,a2,0
    1ad0:	04090603          	lb	a2,64(s2)
    1ad4:	0100                	addi	s0,sp,128
    1ad6:	00090203          	lb	tp,0(s2)
    1ada:	0100                	addi	s0,sp,128
    1adc:	0105                	addi	sp,sp,1
    1ade:	0306                	slli	t1,t1,0x1
    1ae0:	0901                	addi	s2,s2,0
    1ae2:	0000                	unimp
    1ae4:	0501                	addi	a0,a0,0
    1ae6:	0009                	c.nop	2
    1ae8:	0402                	c.slli64	s0
    1aea:	bd030603          	lb	a2,-1072(t1)
    1aee:	097f                	0x97f
    1af0:	0040                	addi	s0,sp,4
    1af2:	0501                	addi	a0,a0,0
    1af4:	0012                	c.slli	zero,0x4
    1af6:	0402                	c.slli64	s0
    1af8:	00030603          	lb	a2,0(t1)
    1afc:	0009                	c.nop	2
    1afe:	0100                	addi	s0,sp,128
    1b00:	1705                	addi	a4,a4,-31
    1b02:	0200                	addi	s0,sp,256
    1b04:	0304                	addi	s1,sp,384
    1b06:	0306                	slli	t1,t1,0x1
    1b08:	097f                	0x97f
    1b0a:	000a                	c.slli	zero,0x2
    1b0c:	0501                	addi	a0,a0,0
    1b0e:	0009                	c.nop	2
    1b10:	0402                	c.slli64	s0
    1b12:	09070303          	lb	t1,144(a4)
    1b16:	0004                	0x4
    1b18:	0501                	addi	a0,a0,0
    1b1a:	000e                	c.slli	zero,0x3
    1b1c:	0402                	c.slli64	s0
    1b1e:	00030603          	lb	a2,0(t1)
    1b22:	0409                	addi	s0,s0,2
    1b24:	0100                	addi	s0,sp,128
    1b26:	0905                	addi	s2,s2,1
    1b28:	0200                	addi	s0,sp,256
    1b2a:	0304                	addi	s1,sp,384
    1b2c:	0306                	slli	t1,t1,0x1
    1b2e:	0901                	addi	s2,s2,0
    1b30:	000a                	c.slli	zero,0x2
    1b32:	0501                	addi	a0,a0,0
    1b34:	000e                	c.slli	zero,0x3
    1b36:	0402                	c.slli64	s0
    1b38:	00030603          	lb	a2,0(t1)
    1b3c:	0009                	c.nop	2
    1b3e:	0100                	addi	s0,sp,128
    1b40:	1905                	addi	s2,s2,-31
    1b42:	0200                	addi	s0,sp,256
    1b44:	0304                	addi	s1,sp,384
    1b46:	0306                	slli	t1,t1,0x1
    1b48:	097e                	slli	s2,s2,0x1f
    1b4a:	000a                	c.slli	zero,0x2
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	0009                	c.nop	2
    1b50:	0402                	c.slli64	s0
    1b52:	09080303          	lb	t1,144(a6)
    1b56:	0004                	0x4
    1b58:	0501                	addi	a0,a0,0
    1b5a:	0402001b          	0x402001b
    1b5e:	00030603          	lb	a2,0(t1)
    1b62:	0409                	addi	s0,s0,2
    1b64:	0100                	addi	s0,sp,128
    1b66:	1805                	addi	a6,a6,-31
    1b68:	0200                	addi	s0,sp,256
    1b6a:	0304                	addi	s1,sp,384
    1b6c:	04090003          	lb	zero,64(s2)
    1b70:	0100                	addi	s0,sp,128
    1b72:	1b05                	addi	s6,s6,-31
    1b74:	0200                	addi	s0,sp,256
    1b76:	0304                	addi	s1,sp,384
    1b78:	04090003          	lb	zero,64(s2)
    1b7c:	0100                	addi	s0,sp,128
    1b7e:	1805                	addi	a6,a6,-31
    1b80:	0200                	addi	s0,sp,256
    1b82:	0304                	addi	s1,sp,384
    1b84:	02090003          	lb	zero,32(s2)
    1b88:	0100                	addi	s0,sp,128
    1b8a:	1705                	addi	a4,a4,-31
    1b8c:	0200                	addi	s0,sp,256
    1b8e:	0304                	addi	s1,sp,384
    1b90:	02097f03          	0x2097f03
    1b94:	0100                	addi	s0,sp,128
    1b96:	1805                	addi	a6,a6,-31
    1b98:	0200                	addi	s0,sp,256
    1b9a:	0304                	addi	s1,sp,384
    1b9c:	02090103          	lb	sp,32(s2)
    1ba0:	0100                	addi	s0,sp,128
    1ba2:	1705                	addi	a4,a4,-31
    1ba4:	0200                	addi	s0,sp,256
    1ba6:	0304                	addi	s1,sp,384
    1ba8:	0306                	slli	t1,t1,0x1
    1baa:	097f                	0x97f
    1bac:	0002                	c.slli64	zero
    1bae:	0501                	addi	a0,a0,0
    1bb0:	0009                	c.nop	2
    1bb2:	0402                	c.slli64	s0
    1bb4:	09060303          	lb	t1,144(a2)
    1bb8:	0002                	c.slli64	zero
    1bba:	0501                	addi	a0,a0,0
    1bbc:	0018                	0x18
    1bbe:	0402                	c.slli64	s0
    1bc0:	00030603          	lb	a2,0(t1)
    1bc4:	0009                	c.nop	2
    1bc6:	0100                	addi	s0,sp,128
    1bc8:	1b05                	addi	s6,s6,-31
    1bca:	0200                	addi	s0,sp,256
    1bcc:	0304                	addi	s1,sp,384
    1bce:	0306                	slli	t1,t1,0x1
    1bd0:	097f                	0x97f
    1bd2:	000a                	c.slli	zero,0x2
    1bd4:	0501                	addi	a0,a0,0
    1bd6:	0009                	c.nop	2
    1bd8:	0402                	c.slli64	s0
    1bda:	09090303          	lb	t1,144(s2)
    1bde:	0006                	c.slli	zero,0x1
    1be0:	0501                	addi	a0,a0,0
    1be2:	001c                	0x1c
    1be4:	0402                	c.slli64	s0
    1be6:	00030603          	lb	a2,0(t1)
    1bea:	0009                	c.nop	2
    1bec:	0100                	addi	s0,sp,128
    1bee:	1805                	addi	a6,a6,-31
    1bf0:	0200                	addi	s0,sp,256
    1bf2:	0304                	addi	s1,sp,384
    1bf4:	02090003          	lb	zero,32(s2)
    1bf8:	0100                	addi	s0,sp,128
    1bfa:	1f05                	addi	t5,t5,-31
    1bfc:	0200                	addi	s0,sp,256
    1bfe:	0304                	addi	s1,sp,384
    1c00:	0306                	slli	t1,t1,0x1
    1c02:	097f                	0x97f
    1c04:	0008                	0x8
    1c06:	0501                	addi	a0,a0,0
    1c08:	0009                	c.nop	2
    1c0a:	0402                	c.slli64	s0
    1c0c:	090b0303          	lb	t1,144(s6)
    1c10:	0006                	c.slli	zero,0x1
    1c12:	0501                	addi	a0,a0,0
    1c14:	001c                	0x1c
    1c16:	0402                	c.slli64	s0
    1c18:	00030603          	lb	a2,0(t1)
    1c1c:	0409                	addi	s0,s0,2
    1c1e:	0100                	addi	s0,sp,128
    1c20:	1805                	addi	a6,a6,-31
    1c22:	0200                	addi	s0,sp,256
    1c24:	0304                	addi	s1,sp,384
    1c26:	08090003          	lb	zero,128(s2)
    1c2a:	0100                	addi	s0,sp,128
    1c2c:	1f05                	addi	t5,t5,-31
    1c2e:	0200                	addi	s0,sp,256
    1c30:	0304                	addi	s1,sp,384
    1c32:	02097f03          	0x2097f03
    1c36:	0100                	addi	s0,sp,128
    1c38:	1805                	addi	a6,a6,-31
    1c3a:	0200                	addi	s0,sp,256
    1c3c:	0304                	addi	s1,sp,384
    1c3e:	02090103          	lb	sp,32(s2)
    1c42:	0100                	addi	s0,sp,128
    1c44:	1f05                	addi	t5,t5,-31
    1c46:	0200                	addi	s0,sp,256
    1c48:	0304                	addi	s1,sp,384
    1c4a:	0306                	slli	t1,t1,0x1
    1c4c:	097f                	0x97f
    1c4e:	0002                	c.slli64	zero
    1c50:	0501                	addi	a0,a0,0
    1c52:	0009                	c.nop	2
    1c54:	0402                	c.slli64	s0
    1c56:	09090303          	lb	t1,144(s2)
    1c5a:	0002                	c.slli64	zero
    1c5c:	0501                	addi	a0,a0,0
    1c5e:	0016                	c.slli	zero,0x5
    1c60:	0402                	c.slli64	s0
    1c62:	00030603          	lb	a2,0(t1)
    1c66:	0009                	c.nop	2
    1c68:	0100                	addi	s0,sp,128
    1c6a:	1d05                	addi	s10,s10,-31
    1c6c:	0200                	addi	s0,sp,256
    1c6e:	0304                	addi	s1,sp,384
    1c70:	02097f03          	0x2097f03
    1c74:	0100                	addi	s0,sp,128
    1c76:	1605                	addi	a2,a2,-31
    1c78:	0200                	addi	s0,sp,256
    1c7a:	0304                	addi	s1,sp,384
    1c7c:	04090103          	lb	sp,64(s2)
    1c80:	0100                	addi	s0,sp,128
    1c82:	0f05                	addi	t5,t5,1
    1c84:	0200                	addi	s0,sp,256
    1c86:	0304                	addi	s1,sp,384
    1c88:	04090003          	lb	zero,64(s2)
    1c8c:	0100                	addi	s0,sp,128
    1c8e:	1d05                	addi	s10,s10,-31
    1c90:	0200                	addi	s0,sp,256
    1c92:	0304                	addi	s1,sp,384
    1c94:	0306                	slli	t1,t1,0x1
    1c96:	097f                	0x97f
    1c98:	0004                	0x4
    1c9a:	0501                	addi	a0,a0,0
    1c9c:	0009                	c.nop	2
    1c9e:	0402                	c.slli64	s0
    1ca0:	090b0303          	lb	t1,144(s6)
    1ca4:	0002                	c.slli64	zero
    1ca6:	0501                	addi	a0,a0,0
    1ca8:	001c                	0x1c
    1caa:	0402                	c.slli64	s0
    1cac:	00030603          	lb	a2,0(t1)
    1cb0:	0009                	c.nop	2
    1cb2:	0100                	addi	s0,sp,128
    1cb4:	1805                	addi	a6,a6,-31
    1cb6:	0200                	addi	s0,sp,256
    1cb8:	0304                	addi	s1,sp,384
    1cba:	04090003          	lb	zero,64(s2)
    1cbe:	0100                	addi	s0,sp,128
    1cc0:	1f05                	addi	t5,t5,-31
    1cc2:	0200                	addi	s0,sp,256
    1cc4:	0304                	addi	s1,sp,384
    1cc6:	0306                	slli	t1,t1,0x1
    1cc8:	097f                	0x97f
    1cca:	0008                	0x8
    1ccc:	0501                	addi	a0,a0,0
    1cce:	0009                	c.nop	2
    1cd0:	0402                	c.slli64	s0
    1cd2:	09060303          	lb	t1,144(a2)
    1cd6:	0004                	0x4
    1cd8:	0501                	addi	a0,a0,0
    1cda:	0018                	0x18
    1cdc:	0402                	c.slli64	s0
    1cde:	00030603          	lb	a2,0(t1)
    1ce2:	0409                	addi	s0,s0,2
    1ce4:	0100                	addi	s0,sp,128
    1ce6:	1f05                	addi	t5,t5,-31
    1ce8:	0200                	addi	s0,sp,256
    1cea:	0304                	addi	s1,sp,384
    1cec:	04090003          	lb	zero,64(s2)
    1cf0:	0100                	addi	s0,sp,128
    1cf2:	1805                	addi	a6,a6,-31
    1cf4:	0200                	addi	s0,sp,256
    1cf6:	0304                	addi	s1,sp,384
    1cf8:	04090003          	lb	zero,64(s2)
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	2105                	jal	211e <_min_stack+0x11e>
    1d00:	0200                	addi	s0,sp,256
    1d02:	0304                	addi	s1,sp,384
    1d04:	02097f03          	0x2097f03
    1d08:	0100                	addi	s0,sp,128
    1d0a:	1805                	addi	a6,a6,-31
    1d0c:	0200                	addi	s0,sp,256
    1d0e:	0304                	addi	s1,sp,384
    1d10:	02090103          	lb	sp,32(s2)
    1d14:	0100                	addi	s0,sp,128
    1d16:	2105                	jal	2136 <_min_stack+0x136>
    1d18:	0200                	addi	s0,sp,256
    1d1a:	0304                	addi	s1,sp,384
    1d1c:	0306                	slli	t1,t1,0x1
    1d1e:	097f                	0x97f
    1d20:	0002                	c.slli64	zero
    1d22:	0501                	addi	a0,a0,0
    1d24:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    1d28:	0002                	c.slli64	zero
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	0305                	addi	t1,t1,1
    1d2e:	0902                	c.slli64	s2
    1d30:	0000                	unimp
    1d32:	0301                	addi	t1,t1,0
    1d34:	0901                	addi	s2,s2,0
    1d36:	0000                	unimp
    1d38:	0301                	addi	t1,t1,0
    1d3a:	0902                	c.slli64	s2
    1d3c:	0000                	unimp
    1d3e:	0501                	addi	a0,a0,0
    1d40:	7b03064b          	fnmsub.d	fa2,ft6,fa6,fa5,rne
    1d44:	0009                	c.nop	2
    1d46:	0100                	addi	s0,sp,128
    1d48:	0905                	addi	s2,s2,1
    1d4a:	0c090503          	lb	a0,192(s2)
    1d4e:	0100                	addi	s0,sp,128
    1d50:	4b05                	li	s6,1
    1d52:	04097b03          	0x4097b03
    1d56:	0100                	addi	s0,sp,128
    1d58:	0905                	addi	s2,s2,1
    1d5a:	02090503          	lb	a0,32(s2)
    1d5e:	0100                	addi	s0,sp,128
    1d60:	4b05                	li	s6,1
    1d62:	0a097b03          	0xa097b03
    1d66:	0100                	addi	s0,sp,128
    1d68:	06090003          	lb	zero,96(s2)
    1d6c:	0100                	addi	s0,sp,128
    1d6e:	0905                	addi	s2,s2,1
    1d70:	04090503          	lb	a0,64(s2)
    1d74:	0100                	addi	s0,sp,128
    1d76:	0505                	addi	a0,a0,1
    1d78:	0306                	slli	t1,t1,0x1
    1d7a:	0901                	addi	s2,s2,0
    1d7c:	0002                	c.slli64	zero
    1d7e:	0301                	addi	t1,t1,0
    1d80:	0901                	addi	s2,s2,0
    1d82:	0000                	unimp
    1d84:	0301                	addi	t1,t1,0
    1d86:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1d8a:	0501                	addi	a0,a0,0
    1d8c:	060c                	addi	a1,sp,768
    1d8e:	00090003          	lb	zero,0(s2)
    1d92:	0100                	addi	s0,sp,128
    1d94:	0105                	addi	sp,sp,1
    1d96:	12090703          	lb	a4,288(s2)
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	0c05                	addi	s8,s8,1
    1d9e:	06097903          	0x6097903
    1da2:	0100                	addi	s0,sp,128
    1da4:	0105                	addi	sp,sp,1
    1da6:	0306                	slli	t1,t1,0x1
    1da8:	00020907          	0x20907
    1dac:	0501                	addi	a0,a0,0
    1dae:	060a                	slli	a2,a2,0x2
    1db0:	00090303          	lb	t1,0(s2)
    1db4:	0100                	addi	s0,sp,128
    1db6:	0105                	addi	sp,sp,1
    1db8:	04097d03          	0x4097d03
    1dbc:	0100                	addi	s0,sp,128
    1dbe:	0505                	addi	a0,a0,1
    1dc0:	0306                	slli	t1,t1,0x1
    1dc2:	00040903          	lb	s2,0(s0) # 51472 <_stack_start+0x41472>
    1dc6:	0501                	addi	a0,a0,0
    1dc8:	060a                	slli	a2,a2,0x2
    1dca:	00090003          	lb	zero,0(s2)
    1dce:	0100                	addi	s0,sp,128
    1dd0:	0505                	addi	a0,a0,1
    1dd2:	0306                	slli	t1,t1,0x1
    1dd4:	0902                	c.slli64	s2
    1dd6:	000e                	c.slli	zero,0x3
    1dd8:	0501                	addi	a0,a0,0
    1dda:	061a                	slli	a2,a2,0x6
    1ddc:	00090003          	lb	zero,0(s2)
    1de0:	0100                	addi	s0,sp,128
    1de2:	1405                	addi	s0,s0,-31
    1de4:	0200                	addi	s0,sp,256
    1de6:	0104                	addi	s1,sp,128
    1de8:	0306                	slli	t1,t1,0x1
    1dea:	0900                	addi	s0,sp,144
    1dec:	0008                	0x8
    1dee:	0501                	addi	a0,a0,0
    1df0:	0005                	c.nop	1
    1df2:	0402                	c.slli64	s0
    1df4:	0601                	addi	a2,a2,0
    1df6:	00090003          	lb	zero,0(s2)
    1dfa:	0100                	addi	s0,sp,128
    1dfc:	0105                	addi	sp,sp,1
    1dfe:	04090903          	lb	s2,64(s2)
    1e02:	0100                	addi	s0,sp,128
    1e04:	0905                	addi	s2,s2,1
    1e06:	0200                	addi	s0,sp,256
    1e08:	0304                	addi	s1,sp,384
    1e0a:	0306                	slli	t1,t1,0x1
    1e0c:	0978                	addi	a4,sp,156
    1e0e:	0010                	0x10
    1e10:	0501                	addi	a0,a0,0
    1e12:	0019                	c.nop	6
    1e14:	0402                	c.slli64	s0
    1e16:	00030603          	lb	a2,0(t1)
    1e1a:	0009                	c.nop	2
    1e1c:	0100                	addi	s0,sp,128
    1e1e:	1f05                	addi	t5,t5,-31
    1e20:	0200                	addi	s0,sp,256
    1e22:	0304                	addi	s1,sp,384
    1e24:	08097f03          	0x8097f03
    1e28:	0100                	addi	s0,sp,128
    1e2a:	1505                	addi	a0,a0,-31
    1e2c:	0200                	addi	s0,sp,256
    1e2e:	0304                	addi	s1,sp,384
    1e30:	04090103          	lb	sp,64(s2)
    1e34:	0100                	addi	s0,sp,128
    1e36:	1f05                	addi	t5,t5,-31
    1e38:	0200                	addi	s0,sp,256
    1e3a:	0304                	addi	s1,sp,384
    1e3c:	0306                	slli	t1,t1,0x1
    1e3e:	097f                	0x97f
    1e40:	0004                	0x4
    1e42:	0501                	addi	a0,a0,0
    1e44:	036c                	addi	a1,sp,396
    1e46:	090c                	addi	a1,sp,144
    1e48:	0002                	c.slli64	zero
    1e4a:	0501                	addi	a0,a0,0
    1e4c:	0305                	addi	t1,t1,1
    1e4e:	0902                	c.slli64	s2
    1e50:	0000                	unimp
    1e52:	0301                	addi	t1,t1,0
    1e54:	0901                	addi	s2,s2,0
    1e56:	0000                	unimp
    1e58:	0301                	addi	t1,t1,0
    1e5a:	0901                	addi	s2,s2,0
    1e5c:	0000                	unimp
    1e5e:	0301                	addi	t1,t1,0
    1e60:	0901                	addi	s2,s2,0
    1e62:	0000                	unimp
    1e64:	0301                	addi	t1,t1,0
    1e66:	0901                	addi	s2,s2,0
    1e68:	0000                	unimp
    1e6a:	0301                	addi	t1,t1,0
    1e6c:	0901                	addi	s2,s2,0
    1e6e:	0000                	unimp
    1e70:	0301                	addi	t1,t1,0
    1e72:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1e76:	0501                	addi	a0,a0,0
    1e78:	066c                	addi	a1,sp,780
    1e7a:	00097603          	0x97603
    1e7e:	0100                	addi	s0,sp,128
    1e80:	1e05                	addi	t3,t3,-31
    1e82:	08091103          	lh	sp,128(s2)
    1e86:	0100                	addi	s0,sp,128
    1e88:	6c05                	lui	s8,0x1
    1e8a:	06096f03          	0x6096f03
    1e8e:	0100                	addi	s0,sp,128
    1e90:	0905                	addi	s2,s2,1
    1e92:	0a090a03          	lb	s4,160(s2)
    1e96:	0100                	addi	s0,sp,128
    1e98:	6c05                	lui	s8,0x1
    1e9a:	04097603          	0x4097603
    1e9e:	0100                	addi	s0,sp,128
    1ea0:	0905                	addi	s2,s2,1
    1ea2:	04090a03          	lb	s4,64(s2)
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	6c05                	lui	s8,0x1
    1eaa:	04097603          	0x4097603
    1eae:	0100                	addi	s0,sp,128
    1eb0:	08090003          	lb	zero,128(s2)
    1eb4:	0100                	addi	s0,sp,128
    1eb6:	0a05                	addi	s4,s4,1
    1eb8:	02090e03          	lb	t3,32(s2)
    1ebc:	0100                	addi	s0,sp,128
    1ebe:	0905                	addi	s2,s2,1
    1ec0:	04097c03          	0x4097c03
    1ec4:	0100                	addi	s0,sp,128
    1ec6:	0505                	addi	a0,a0,1
    1ec8:	0306                	slli	t1,t1,0x1
    1eca:	0904                	addi	s1,sp,144
    1ecc:	0004                	0x4
    1ece:	0501                	addi	a0,a0,0
    1ed0:	060a                	slli	a2,a2,0x2
    1ed2:	00090003          	lb	zero,0(s2)
    1ed6:	0100                	addi	s0,sp,128
    1ed8:	0505                	addi	a0,a0,1
    1eda:	0306                	slli	t1,t1,0x1
    1edc:	00100903          	lb	s2,1(zero) # 1 <__DYNAMIC+0x1>
    1ee0:	0501                	addi	a0,a0,0
    1ee2:	0003060b          	0x3060b
    1ee6:	0409                	addi	s0,s0,2
    1ee8:	0100                	addi	s0,sp,128
    1eea:	1405                	addi	s0,s0,-31
    1eec:	0200                	addi	s0,sp,256
    1eee:	0104                	addi	s1,sp,128
    1ef0:	0306                	slli	t1,t1,0x1
    1ef2:	0900                	addi	s0,sp,144
    1ef4:	0002                	c.slli64	zero
    1ef6:	0501                	addi	a0,a0,0
    1ef8:	0005                	c.nop	1
    1efa:	0402                	c.slli64	s0
    1efc:	0601                	addi	a2,a2,0
    1efe:	00090003          	lb	zero,0(s2)
    1f02:	0100                	addi	s0,sp,128
    1f04:	1605                	addi	a2,a2,-31
    1f06:	04090603          	lb	a2,64(s2)
    1f0a:	0100                	addi	s0,sp,128
    1f0c:	0c05                	addi	s8,s8,1
    1f0e:	06097f03          	0x6097f03
    1f12:	0100                	addi	s0,sp,128
    1f14:	1105                	addi	sp,sp,-31
    1f16:	0200                	addi	s0,sp,256
    1f18:	0104                	addi	s1,sp,128
    1f1a:	0306                	slli	t1,t1,0x1
    1f1c:	0900                	addi	s0,sp,144
    1f1e:	0002                	c.slli64	zero
    1f20:	0501                	addi	a0,a0,0
    1f22:	0005                	c.nop	1
    1f24:	0402                	c.slli64	s0
    1f26:	0601                	addi	a2,a2,0
    1f28:	00090003          	lb	zero,0(s2)
    1f2c:	0100                	addi	s0,sp,128
    1f2e:	0306                	slli	t1,t1,0x1
    1f30:	0908                	addi	a0,sp,144
    1f32:	0004                	0x4
    1f34:	0501                	addi	a0,a0,0
    1f36:	0609                	addi	a2,a2,2
    1f38:	00090003          	lb	zero,0(s2)
    1f3c:	0100                	addi	s0,sp,128
    1f3e:	0505                	addi	a0,a0,1
    1f40:	0306                	slli	t1,t1,0x1
    1f42:	0904                	addi	s1,sp,144
    1f44:	000c                	0xc
    1f46:	0501                	addi	a0,a0,0
    1f48:	060a                	slli	a2,a2,0x2
    1f4a:	00090003          	lb	zero,0(s2)
    1f4e:	0100                	addi	s0,sp,128
    1f50:	0505                	addi	a0,a0,1
    1f52:	0306                	slli	t1,t1,0x1
    1f54:	0901                	addi	s2,s2,0
    1f56:	000c                	0xc
    1f58:	0501                	addi	a0,a0,0
    1f5a:	0014                	0x14
    1f5c:	0402                	c.slli64	s0
    1f5e:	0301                	addi	t1,t1,0
    1f60:	0900                	addi	s0,sp,144
    1f62:	0002                	c.slli64	zero
    1f64:	0501                	addi	a0,a0,0
    1f66:	0005                	c.nop	1
    1f68:	0402                	c.slli64	s0
    1f6a:	0601                	addi	a2,a2,0
    1f6c:	00090003          	lb	zero,0(s2)
    1f70:	0100                	addi	s0,sp,128
    1f72:	0105                	addi	sp,sp,1
    1f74:	04090703          	lb	a4,64(s2)
    1f78:	0100                	addi	s0,sp,128
    1f7a:	0905                	addi	s2,s2,1
    1f7c:	0200                	addi	s0,sp,256
    1f7e:	0304                	addi	s1,sp,384
    1f80:	0306                	slli	t1,t1,0x1
    1f82:	0968                	addi	a0,sp,156
    1f84:	0016                	c.slli	zero,0x5
    1f86:	0501                	addi	a0,a0,0
    1f88:	0019                	c.nop	6
    1f8a:	0402                	c.slli64	s0
    1f8c:	00030603          	lb	a2,0(t1)
    1f90:	0009                	c.nop	2
    1f92:	0100                	addi	s0,sp,128
    1f94:	2305                	jal	24b4 <_min_stack+0x4b4>
    1f96:	0200                	addi	s0,sp,256
    1f98:	0304                	addi	s1,sp,384
    1f9a:	08097f03          	0x8097f03
    1f9e:	0100                	addi	s0,sp,128
    1fa0:	1505                	addi	a0,a0,-31
    1fa2:	0200                	addi	s0,sp,256
    1fa4:	0304                	addi	s1,sp,384
    1fa6:	04090103          	lb	sp,64(s2)
    1faa:	0100                	addi	s0,sp,128
    1fac:	2305                	jal	24cc <_min_stack+0x4cc>
    1fae:	0200                	addi	s0,sp,256
    1fb0:	0304                	addi	s1,sp,384
    1fb2:	0306                	slli	t1,t1,0x1
    1fb4:	097f                	0x97f
    1fb6:	0004                	0x4
    1fb8:	0501                	addi	a0,a0,0
    1fba:	0309                	addi	t1,t1,2
    1fbc:	0906                	slli	s2,s2,0x1
    1fbe:	0002                	c.slli64	zero
    1fc0:	0501                	addi	a0,a0,0
    1fc2:	060e                	slli	a2,a2,0x3
    1fc4:	00090003          	lb	zero,0(s2)
    1fc8:	0100                	addi	s0,sp,128
    1fca:	0b05                	addi	s6,s6,1
    1fcc:	02090003          	lb	zero,32(s2)
    1fd0:	0100                	addi	s0,sp,128
    1fd2:	0d05                	addi	s10,s10,1
    1fd4:	0306                	slli	t1,t1,0x1
    1fd6:	00040903          	lb	s2,0(s0)
    1fda:	0501                	addi	a0,a0,0
    1fdc:	0619                	addi	a2,a2,6
    1fde:	00090003          	lb	zero,0(s2)
    1fe2:	0100                	addi	s0,sp,128
    1fe4:	1305                	addi	t1,t1,-31
    1fe6:	04090003          	lb	zero,64(s2)
    1fea:	0100                	addi	s0,sp,128
    1fec:	1805                	addi	a6,a6,-31
    1fee:	0200                	addi	s0,sp,256
    1ff0:	0204                	addi	s1,sp,256
    1ff2:	0306                	slli	t1,t1,0x1
    1ff4:	097c                	addi	a5,sp,156
    1ff6:	0002                	c.slli64	zero
    1ff8:	0501                	addi	a0,a0,0
    1ffa:	0009                	c.nop	2
    1ffc:	0402                	c.slli64	s0
    1ffe:	090e0303          	lb	t1,144(t3) # 1a090 <_stack_start+0xa090>
    2002:	0006                	c.slli	zero,0x1
    2004:	0501                	addi	a0,a0,0
    2006:	0019                	c.nop	6
    2008:	0402                	c.slli64	s0
    200a:	00030603          	lb	a2,0(t1)
    200e:	0009                	c.nop	2
    2010:	0100                	addi	s0,sp,128
    2012:	2305                	jal	2532 <_min_stack+0x532>
    2014:	0200                	addi	s0,sp,256
    2016:	0304                	addi	s1,sp,384
    2018:	08097f03          	0x8097f03
    201c:	0100                	addi	s0,sp,128
    201e:	1505                	addi	a0,a0,-31
    2020:	0200                	addi	s0,sp,256
    2022:	0304                	addi	s1,sp,384
    2024:	04090103          	lb	sp,64(s2)
    2028:	0100                	addi	s0,sp,128
    202a:	2305                	jal	254a <_min_stack+0x54a>
    202c:	0200                	addi	s0,sp,256
    202e:	0304                	addi	s1,sp,384
    2030:	0306                	slli	t1,t1,0x1
    2032:	097f                	0x97f
    2034:	0004                	0x4
    2036:	0901                	addi	s2,s2,0
    2038:	0002                	c.slli64	zero
    203a:	0100                	addi	s0,sp,128
    203c:	0501                	addi	a0,a0,0
    203e:	0205000b          	0x205000b
    2042:	0ea0                	addi	s0,sp,856
    2044:	0000                	unimp
    2046:	01059303          	lh	t1,16(a1) # 12a6 <_bss_start+0x13a>
    204a:	0505                	addi	a0,a0,1
    204c:	00090103          	lb	sp,0(s2)
    2050:	0100                	addi	s0,sp,128
    2052:	00090103          	lb	sp,0(s2)
    2056:	0100                	addi	s0,sp,128
    2058:	00090103          	lb	sp,0(s2)
    205c:	0100                	addi	s0,sp,128
    205e:	00090103          	lb	sp,0(s2)
    2062:	0100                	addi	s0,sp,128
    2064:	00090103          	lb	sp,0(s2)
    2068:	0100                	addi	s0,sp,128
    206a:	00090103          	lb	sp,0(s2)
    206e:	0100                	addi	s0,sp,128
    2070:	00090203          	lb	tp,0(s2)
    2074:	0100                	addi	s0,sp,128
    2076:	0b05                	addi	s6,s6,1
    2078:	0306                	slli	t1,t1,0x1
    207a:	0978                	addi	a4,sp,156
    207c:	0000                	unimp
    207e:	0501                	addi	a0,a0,0
    2080:	0309                	addi	t1,t1,2
    2082:	0908                	addi	a0,sp,144
    2084:	0004                	0x4
    2086:	0501                	addi	a0,a0,0
    2088:	0978030b          	0x978030b
    208c:	000e                	c.slli	zero,0x3
    208e:	0501                	addi	a0,a0,0
    2090:	0312                	slli	t1,t1,0x4
    2092:	0918                	addi	a4,sp,144
    2094:	0010                	0x10
    2096:	0501                	addi	a0,a0,0
    2098:	0309                	addi	t1,t1,2
    209a:	0970                	addi	a2,sp,156
    209c:	0004                	0x4
    209e:	0501                	addi	a0,a0,0
    20a0:	0605                	addi	a2,a2,1
    20a2:	02090103          	lb	sp,32(s2)
    20a6:	0100                	addi	s0,sp,128
    20a8:	00090103          	lb	sp,0(s2)
    20ac:	0100                	addi	s0,sp,128
    20ae:	00090103          	lb	sp,0(s2)
    20b2:	0100                	addi	s0,sp,128
    20b4:	00090103          	lb	sp,0(s2)
    20b8:	0100                	addi	s0,sp,128
    20ba:	00090103          	lb	sp,0(s2)
    20be:	0100                	addi	s0,sp,128
    20c0:	00090103          	lb	sp,0(s2)
    20c4:	0100                	addi	s0,sp,128
    20c6:	00090103          	lb	sp,0(s2)
    20ca:	0100                	addi	s0,sp,128
    20cc:	00090903          	lb	s2,0(s2)
    20d0:	0100                	addi	s0,sp,128
    20d2:	1205                	addi	tp,tp,-31
    20d4:	0306                	slli	t1,t1,0x1
    20d6:	0900                	addi	s0,sp,144
    20d8:	0000                	unimp
    20da:	0501                	addi	a0,a0,0
    20dc:	030c                	addi	a1,sp,384
    20de:	0901                	addi	s2,s2,0
    20e0:	000c                	0xc
    20e2:	0501                	addi	a0,a0,0
    20e4:	0312                	slli	t1,t1,0x4
    20e6:	097f                	0x97f
    20e8:	000a                	c.slli	zero,0x2
    20ea:	0501                	addi	a0,a0,0
    20ec:	0605                	addi	a2,a2,1
    20ee:	02090103          	lb	sp,32(s2)
    20f2:	0100                	addi	s0,sp,128
    20f4:	1205                	addi	tp,tp,-31
    20f6:	0306                	slli	t1,t1,0x1
    20f8:	0901                	addi	s2,s2,0
    20fa:	0000                	unimp
    20fc:	0501                	addi	a0,a0,0
    20fe:	030c                	addi	a1,sp,384
    2100:	097f                	0x97f
    2102:	0004                	0x4
    2104:	0501                	addi	a0,a0,0
    2106:	0605                	addi	a2,a2,1
    2108:	02090103          	lb	sp,32(s2)
    210c:	0100                	addi	s0,sp,128
    210e:	1205                	addi	tp,tp,-31
    2110:	0306                	slli	t1,t1,0x1
    2112:	0900                	addi	s0,sp,144
    2114:	0000                	unimp
    2116:	0501                	addi	a0,a0,0
    2118:	0605                	addi	a2,a2,1
    211a:	04090203          	lb	tp,64(s2)
    211e:	0100                	addi	s0,sp,128
    2120:	1005                	c.nop	-31
    2122:	00090003          	lb	zero,0(s2)
    2126:	0100                	addi	s0,sp,128
    2128:	0505                	addi	a0,a0,1
    212a:	0306                	slli	t1,t1,0x1
    212c:	0900                	addi	s0,sp,144
    212e:	0000                	unimp
    2130:	0501                	addi	a0,a0,0
    2132:	0009                	c.nop	2
    2134:	0402                	c.slli64	s0
    2136:	02030603          	lb	a2,32(t1)
    213a:	0409                	addi	s0,s0,2
    213c:	0100                	addi	s0,sp,128
    213e:	1f05                	addi	t5,t5,-31
    2140:	0200                	addi	s0,sp,256
    2142:	0304                	addi	s1,sp,384
    2144:	0306                	slli	t1,t1,0x1
    2146:	0900                	addi	s0,sp,144
    2148:	0000                	unimp
    214a:	0501                	addi	a0,a0,0
    214c:	0019                	c.nop	6
    214e:	0402                	c.slli64	s0
    2150:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2154:	0006                	c.slli	zero,0x1
    2156:	0501                	addi	a0,a0,0
    2158:	04020017          	auipc	zero,0x4020
    215c:	7e030603          	lb	a2,2016(t1)
    2160:	0609                	addi	a2,a2,2
    2162:	0100                	addi	s0,sp,128
    2164:	1005                	c.nop	-31
    2166:	0200                	addi	s0,sp,256
    2168:	0304                	addi	s1,sp,384
    216a:	00090003          	lb	zero,0(s2)
    216e:	0100                	addi	s0,sp,128
    2170:	0505                	addi	a0,a0,1
    2172:	0200                	addi	s0,sp,256
    2174:	0304                	addi	s1,sp,384
    2176:	0306                	slli	t1,t1,0x1
    2178:	0900                	addi	s0,sp,144
    217a:	0002                	c.slli64	zero
    217c:	0501                	addi	a0,a0,0
    217e:	0009                	c.nop	2
    2180:	0402                	c.slli64	s0
    2182:	09030603          	lb	a2,144(t1)
    2186:	0409                	addi	s0,s0,2
    2188:	0100                	addi	s0,sp,128
    218a:	1b05                	addi	s6,s6,-31
    218c:	0200                	addi	s0,sp,256
    218e:	0304                	addi	s1,sp,384
    2190:	00097e03          	0x97e03
    2194:	0100                	addi	s0,sp,128
    2196:	1005                	c.nop	-31
    2198:	0200                	addi	s0,sp,256
    219a:	0304                	addi	s1,sp,384
    219c:	00090003          	lb	zero,0(s2)
    21a0:	0100                	addi	s0,sp,128
    21a2:	0905                	addi	s2,s2,1
    21a4:	0200                	addi	s0,sp,256
    21a6:	0304                	addi	s1,sp,384
    21a8:	0c090903          	lb	s2,192(s2)
    21ac:	0100                	addi	s0,sp,128
    21ae:	2605                	jal	24ce <_min_stack+0x4ce>
    21b0:	0200                	addi	s0,sp,256
    21b2:	0304                	addi	s1,sp,384
    21b4:	0306                	slli	t1,t1,0x1
    21b6:	0900                	addi	s0,sp,144
    21b8:	0000                	unimp
    21ba:	0501                	addi	a0,a0,0
    21bc:	0020                	addi	s0,sp,8
    21be:	0402                	c.slli64	s0
    21c0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    21c4:	0006                	c.slli	zero,0x1
    21c6:	0501                	addi	a0,a0,0
    21c8:	001f 0402 0603      	0x6030402001f
    21ce:	04097e03          	0x4097e03
    21d2:	0100                	addi	s0,sp,128
    21d4:	1405                	addi	s0,s0,-31
    21d6:	0200                	addi	s0,sp,256
    21d8:	0304                	addi	s1,sp,384
    21da:	00090003          	lb	zero,0(s2)
    21de:	0100                	addi	s0,sp,128
    21e0:	0505                	addi	a0,a0,1
    21e2:	0200                	addi	s0,sp,256
    21e4:	0304                	addi	s1,sp,384
    21e6:	0306                	slli	t1,t1,0x1
    21e8:	0900                	addi	s0,sp,144
    21ea:	0000                	unimp
    21ec:	0501                	addi	a0,a0,0
    21ee:	0009                	c.nop	2
    21f0:	0402                	c.slli64	s0
    21f2:	09030603          	lb	a2,144(t1)
    21f6:	0409                	addi	s0,s0,2
    21f8:	0100                	addi	s0,sp,128
    21fa:	1f05                	addi	t5,t5,-31
    21fc:	0200                	addi	s0,sp,256
    21fe:	0304                	addi	s1,sp,384
    2200:	00097e03          	0x97e03
    2204:	0100                	addi	s0,sp,128
    2206:	1405                	addi	s0,s0,-31
    2208:	0200                	addi	s0,sp,256
    220a:	0304                	addi	s1,sp,384
    220c:	00090003          	lb	zero,0(s2)
    2210:	0100                	addi	s0,sp,128
    2212:	0905                	addi	s2,s2,1
    2214:	0200                	addi	s0,sp,256
    2216:	0304                	addi	s1,sp,384
    2218:	0c090903          	lb	s2,192(s2)
    221c:	0100                	addi	s0,sp,128
    221e:	2305                	jal	273e <_min_stack+0x73e>
    2220:	0200                	addi	s0,sp,256
    2222:	0304                	addi	s1,sp,384
    2224:	0306                	slli	t1,t1,0x1
    2226:	0900                	addi	s0,sp,144
    2228:	0000                	unimp
    222a:	0501                	addi	a0,a0,0
    222c:	001d                	c.nop	7
    222e:	0402                	c.slli64	s0
    2230:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2234:	0006                	c.slli	zero,0x1
    2236:	0501                	addi	a0,a0,0
    2238:	001f 0402 0603      	0x6030402001f
    223e:	04097e03          	0x4097e03
    2242:	0100                	addi	s0,sp,128
    2244:	1405                	addi	s0,s0,-31
    2246:	0200                	addi	s0,sp,256
    2248:	0304                	addi	s1,sp,384
    224a:	00090003          	lb	zero,0(s2)
    224e:	0100                	addi	s0,sp,128
    2250:	0505                	addi	a0,a0,1
    2252:	0200                	addi	s0,sp,256
    2254:	0304                	addi	s1,sp,384
    2256:	0306                	slli	t1,t1,0x1
    2258:	0900                	addi	s0,sp,144
    225a:	0000                	unimp
    225c:	0501                	addi	a0,a0,0
    225e:	0009                	c.nop	2
    2260:	0402                	c.slli64	s0
    2262:	09030603          	lb	a2,144(t1)
    2266:	0c09                	addi	s8,s8,2
    2268:	0100                	addi	s0,sp,128
    226a:	2205                	jal	238a <_min_stack+0x38a>
    226c:	0200                	addi	s0,sp,256
    226e:	0304                	addi	s1,sp,384
    2270:	0306                	slli	t1,t1,0x1
    2272:	0900                	addi	s0,sp,144
    2274:	0000                	unimp
    2276:	0501                	addi	a0,a0,0
    2278:	001c                	0x1c
    227a:	0402                	c.slli64	s0
    227c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2280:	0006                	c.slli	zero,0x1
    2282:	0501                	addi	a0,a0,0
    2284:	0021                	c.nop	8
    2286:	0402                	c.slli64	s0
    2288:	7e030603          	lb	a2,2016(t1)
    228c:	0409                	addi	s0,s0,2
    228e:	0100                	addi	s0,sp,128
    2290:	1405                	addi	s0,s0,-31
    2292:	0200                	addi	s0,sp,256
    2294:	0304                	addi	s1,sp,384
    2296:	00090003          	lb	zero,0(s2)
    229a:	0100                	addi	s0,sp,128
    229c:	0505                	addi	a0,a0,1
    229e:	0200                	addi	s0,sp,256
    22a0:	0304                	addi	s1,sp,384
    22a2:	0306                	slli	t1,t1,0x1
    22a4:	0900                	addi	s0,sp,144
    22a6:	0000                	unimp
    22a8:	0601                	addi	a2,a2,0
    22aa:	04090803          	lb	a6,64(s2)
    22ae:	0100                	addi	s0,sp,128
    22b0:	1205                	addi	tp,tp,-31
    22b2:	0306                	slli	t1,t1,0x1
    22b4:	0900                	addi	s0,sp,144
    22b6:	0000                	unimp
    22b8:	0501                	addi	a0,a0,0
    22ba:	09010313          	addi	t1,sp,144
    22be:	0008                	0x8
    22c0:	0501                	addi	a0,a0,0
    22c2:	0312                	slli	t1,t1,0x4
    22c4:	0901                	addi	s2,s2,0
    22c6:	0008                	0x8
    22c8:	0501                	addi	a0,a0,0
    22ca:	097f0313          	addi	t1,t5,151
    22ce:	0004                	0x4
    22d0:	0501                	addi	a0,a0,0
    22d2:	0312                	slli	t1,t1,0x4
    22d4:	097f                	0x97f
    22d6:	0004                	0x4
    22d8:	0501                	addi	a0,a0,0
    22da:	0605                	addi	a2,a2,1
    22dc:	02090103          	lb	sp,32(s2)
    22e0:	0100                	addi	s0,sp,128
    22e2:	1305                	addi	t1,t1,-31
    22e4:	0306                	slli	t1,t1,0x1
    22e6:	0900                	addi	s0,sp,144
    22e8:	0000                	unimp
    22ea:	0501                	addi	a0,a0,0
    22ec:	0312                	slli	t1,t1,0x4
    22ee:	0901                	addi	s2,s2,0
    22f0:	0002                	c.slli64	zero
    22f2:	0301                	addi	t1,t1,0
    22f4:	0909                	addi	s2,s2,2
    22f6:	0002                	c.slli64	zero
    22f8:	0501                	addi	a0,a0,0
    22fa:	09760313          	addi	t1,a2,151
    22fe:	0008                	0x8
    2300:	0501                	addi	a0,a0,0
    2302:	0605                	addi	a2,a2,1
    2304:	02090103          	lb	sp,32(s2)
    2308:	0100                	addi	s0,sp,128
    230a:	00090903          	lb	s2,0(s2)
    230e:	0100                	addi	s0,sp,128
    2310:	1205                	addi	tp,tp,-31
    2312:	0306                	slli	t1,t1,0x1
    2314:	0900                	addi	s0,sp,144
    2316:	0000                	unimp
    2318:	0501                	addi	a0,a0,0
    231a:	0605                	addi	a2,a2,1
    231c:	02090103          	lb	sp,32(s2)
    2320:	0100                	addi	s0,sp,128
    2322:	1305                	addi	t1,t1,-31
    2324:	0306                	slli	t1,t1,0x1
    2326:	0900                	addi	s0,sp,144
    2328:	0000                	unimp
    232a:	0501                	addi	a0,a0,0
    232c:	0605                	addi	a2,a2,1
    232e:	14090103          	lb	sp,320(s2)
    2332:	0100                	addi	s0,sp,128
    2334:	1205                	addi	tp,tp,-31
    2336:	0306                	slli	t1,t1,0x1
    2338:	0900                	addi	s0,sp,144
    233a:	0000                	unimp
    233c:	0501                	addi	a0,a0,0
    233e:	031a                	slli	t1,t1,0x6
    2340:	0004091b          	0x4091b
    2344:	0501                	addi	a0,a0,0
    2346:	0312                	slli	t1,t1,0x4
    2348:	0965                	addi	s2,s2,25
    234a:	0004                	0x4
    234c:	0501                	addi	a0,a0,0
    234e:	0605                	addi	a2,a2,1
    2350:	02091303          	lh	t1,32(s2)
    2354:	0100                	addi	s0,sp,128
    2356:	1005                	c.nop	-31
    2358:	00090003          	lb	zero,0(s2)
    235c:	0100                	addi	s0,sp,128
    235e:	1205                	addi	tp,tp,-31
    2360:	0306                	slli	t1,t1,0x1
    2362:	096d                	addi	s2,s2,27
    2364:	0000                	unimp
    2366:	0501                	addi	a0,a0,0
    2368:	031a                	slli	t1,t1,0x6
    236a:	0002091b          	0x2091b
    236e:	0501                	addi	a0,a0,0
    2370:	0305                	addi	t1,t1,1
    2372:	0978                	addi	a4,sp,156
    2374:	0004                	0x4
    2376:	0501                	addi	a0,a0,0
    2378:	0609                	addi	a2,a2,2
    237a:	04090103          	lb	sp,64(s2)
    237e:	0100                	addi	s0,sp,128
    2380:	0b05                	addi	s6,s6,1
    2382:	0306                	slli	t1,t1,0x1
    2384:	0900                	addi	s0,sp,144
    2386:	0000                	unimp
    2388:	0501                	addi	a0,a0,0
    238a:	09000327          	0x9000327
    238e:	0002                	c.slli64	zero
    2390:	0501                	addi	a0,a0,0
    2392:	0900030b          	0x900030b
    2396:	0004                	0x4
    2398:	0501                	addi	a0,a0,0
    239a:	060d                	addi	a2,a2,3
    239c:	0a090203          	lb	tp,160(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	1a05                	addi	s4,s4,-31
    23a4:	0306                	slli	t1,t1,0x1
    23a6:	0900                	addi	s0,sp,144
    23a8:	0000                	unimp
    23aa:	0501                	addi	a0,a0,0
    23ac:	060d                	addi	a2,a2,3
    23ae:	0a090203          	lb	tp,160(s2)
    23b2:	0100                	addi	s0,sp,128
    23b4:	0505                	addi	a0,a0,1
    23b6:	00090903          	lb	s2,0(s2)
    23ba:	0100                	addi	s0,sp,128
    23bc:	0105                	addi	sp,sp,1
    23be:	0306                	slli	t1,t1,0x1
    23c0:	0901                	addi	s2,s2,0
    23c2:	0000                	unimp
    23c4:	0501                	addi	a0,a0,0
    23c6:	000d                	c.nop	3
    23c8:	0402                	c.slli64	s0
    23ca:	0602                	c.slli64	a2
    23cc:	18097903          	0x18097903
    23d0:	0100                	addi	s0,sp,128
    23d2:	1a05                	addi	s4,s4,-31
    23d4:	0200                	addi	s0,sp,256
    23d6:	0204                	addi	s1,sp,256
    23d8:	0306                	slli	t1,t1,0x1
    23da:	0900                	addi	s0,sp,144
    23dc:	0000                	unimp
    23de:	0501                	addi	a0,a0,0
    23e0:	0018                	0x18
    23e2:	0402                	c.slli64	s0
    23e4:	0602                	c.slli64	a2
    23e6:	02097803          	0x2097803
    23ea:	0100                	addi	s0,sp,128
    23ec:	1005                	c.nop	-31
    23ee:	0200                	addi	s0,sp,256
    23f0:	0204                	addi	s1,sp,256
    23f2:	00090003          	lb	zero,0(s2)
    23f6:	0100                	addi	s0,sp,128
    23f8:	0505                	addi	a0,a0,1
    23fa:	0200                	addi	s0,sp,256
    23fc:	0204                	addi	s1,sp,256
    23fe:	0306                	slli	t1,t1,0x1
    2400:	0900                	addi	s0,sp,144
    2402:	0002                	c.slli64	zero
    2404:	0901                	addi	s2,s2,0
    2406:	0006                	c.slli	zero,0x1
    2408:	0100                	addi	s0,sp,128
    240a:	5001                	c.li	zero,-32
    240c:	0001                	nop
    240e:	0300                	addi	s0,sp,384
    2410:	1d00                	addi	s0,sp,688
    2412:	0000                	unimp
    2414:	0100                	addi	s0,sp,128
    2416:	fb01                	bnez	a4,2326 <_min_stack+0x326>
    2418:	0d0e                	slli	s10,s10,0x3
    241a:	0100                	addi	s0,sp,128
    241c:	0101                	addi	sp,sp,0
    241e:	0001                	nop
    2420:	0000                	unimp
    2422:	0001                	nop
    2424:	0100                	addi	s0,sp,128
    2426:	6300                	flw	fs0,0(a4)
    2428:	7472                	flw	fs0,60(sp)
    242a:	2e30                	fld	fa2,88(a2)
    242c:	00000053          	fadd.s	ft0,ft0,ft0,rne
    2430:	0000                	unimp
    2432:	0500                	addi	s0,sp,640
    2434:	a402                	fsd	ft0,8(sp)
    2436:	000c                	0xc
    2438:	1500                	addi	s0,sp,672
    243a:	04090403          	lb	s0,64(s2)
    243e:	0100                	addi	s0,sp,128
    2440:	04090103          	lb	sp,64(s2)
    2444:	0100                	addi	s0,sp,128
    2446:	02090103          	lb	sp,32(s2)
    244a:	0100                	addi	s0,sp,128
    244c:	02090103          	lb	sp,32(s2)
    2450:	0100                	addi	s0,sp,128
    2452:	02090103          	lb	sp,32(s2)
    2456:	0100                	addi	s0,sp,128
    2458:	02090103          	lb	sp,32(s2)
    245c:	0100                	addi	s0,sp,128
    245e:	02090103          	lb	sp,32(s2)
    2462:	0100                	addi	s0,sp,128
    2464:	02090103          	lb	sp,32(s2)
    2468:	0100                	addi	s0,sp,128
    246a:	02090103          	lb	sp,32(s2)
    246e:	0100                	addi	s0,sp,128
    2470:	02090103          	lb	sp,32(s2)
    2474:	0100                	addi	s0,sp,128
    2476:	02090103          	lb	sp,32(s2)
    247a:	0100                	addi	s0,sp,128
    247c:	02090103          	lb	sp,32(s2)
    2480:	0100                	addi	s0,sp,128
    2482:	02090103          	lb	sp,32(s2)
    2486:	0100                	addi	s0,sp,128
    2488:	02090103          	lb	sp,32(s2)
    248c:	0100                	addi	s0,sp,128
    248e:	02090103          	lb	sp,32(s2)
    2492:	0100                	addi	s0,sp,128
    2494:	02090103          	lb	sp,32(s2)
    2498:	0100                	addi	s0,sp,128
    249a:	02090103          	lb	sp,32(s2)
    249e:	0100                	addi	s0,sp,128
    24a0:	02090103          	lb	sp,32(s2)
    24a4:	0100                	addi	s0,sp,128
    24a6:	02090103          	lb	sp,32(s2)
    24aa:	0100                	addi	s0,sp,128
    24ac:	02090103          	lb	sp,32(s2)
    24b0:	0100                	addi	s0,sp,128
    24b2:	02090103          	lb	sp,32(s2)
    24b6:	0100                	addi	s0,sp,128
    24b8:	02090103          	lb	sp,32(s2)
    24bc:	0100                	addi	s0,sp,128
    24be:	02090103          	lb	sp,32(s2)
    24c2:	0100                	addi	s0,sp,128
    24c4:	02090103          	lb	sp,32(s2)
    24c8:	0100                	addi	s0,sp,128
    24ca:	02090103          	lb	sp,32(s2)
    24ce:	0100                	addi	s0,sp,128
    24d0:	02090103          	lb	sp,32(s2)
    24d4:	0100                	addi	s0,sp,128
    24d6:	02090103          	lb	sp,32(s2)
    24da:	0100                	addi	s0,sp,128
    24dc:	02090103          	lb	sp,32(s2)
    24e0:	0100                	addi	s0,sp,128
    24e2:	02090103          	lb	sp,32(s2)
    24e6:	0100                	addi	s0,sp,128
    24e8:	02090103          	lb	sp,32(s2)
    24ec:	0100                	addi	s0,sp,128
    24ee:	02090103          	lb	sp,32(s2)
    24f2:	0100                	addi	s0,sp,128
    24f4:	02090303          	lb	t1,32(s2)
    24f8:	0100                	addi	s0,sp,128
    24fa:	08090603          	lb	a2,128(s2)
    24fe:	0100                	addi	s0,sp,128
    2500:	08090103          	lb	sp,128(s2)
    2504:	0100                	addi	s0,sp,128
    2506:	08090203          	lb	tp,128(s2)
    250a:	0100                	addi	s0,sp,128
    250c:	04090303          	lb	t1,64(s2)
    2510:	0100                	addi	s0,sp,128
    2512:	04090103          	lb	sp,64(s2)
    2516:	0100                	addi	s0,sp,128
    2518:	02090103          	lb	sp,32(s2)
    251c:	0100                	addi	s0,sp,128
    251e:	04090603          	lb	a2,64(s2)
    2522:	0100                	addi	s0,sp,128
    2524:	04090103          	lb	sp,64(s2)
    2528:	0100                	addi	s0,sp,128
    252a:	04090103          	lb	sp,64(s2)
    252e:	0100                	addi	s0,sp,128
    2530:	0409                	addi	s0,s0,2
    2532:	0000                	unimp
    2534:	0101                	addi	sp,sp,0
    2536:	0500                	addi	s0,sp,640
    2538:	0002                	c.slli64	zero
    253a:	0000                	unimp
    253c:	0300                	addi	s0,sp,384
    253e:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    2542:	0901                	addi	s2,s2,0
    2544:	007c                	addi	a5,sp,12
    2546:	0301                	addi	t1,t1,0
    2548:	0904                	addi	s1,sp,144
    254a:	0004                	0x4
    254c:	0301                	addi	t1,t1,0
    254e:	0904                	addi	s1,sp,144
    2550:	0004                	0x4
    2552:	0301                	addi	t1,t1,0
    2554:	0904                	addi	s1,sp,144
    2556:	0004                	0x4
    2558:	0901                	addi	s2,s2,0
    255a:	0004                	0x4
    255c:	0100                	addi	s0,sp,128
    255e:	01              	Address 0x000000000000255e is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0xd0>
    for(i=0;i<(length/3);i++) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
}
  a0:	7200                	flw	fs0,32(a2)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    asm volatile(
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
}
  b8:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
}
  c8:	6572                	flw	fa0,28(sp)
    asm volatile(
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
  d0:	6d5f0067          	jr	1749(t5)
    for(i=0;i<(length/3);i++) {
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	735f6377          	0x735f6377
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
    int line[size_b][size_a + size_b];
  e2:	6f746377          	0x6f746377
  e6:	626d                	lui	tp,0x1b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	735f 6174 6574      	0x65746174735f
    int line[size_b][size_a + size_b];
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x1ba>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
 10a:	4e5f 6900 736e      	0x736e69004e5f
    int line[size_b][size_a + size_b];
 110:	7274                	flw	fa3,100(a2)
    int pola[size_a];
 112:	6d5f 646f 7000      	0x7000646f6d5f
 118:	6d796c6f          	jal	s8,96fee <_stack_start+0x86fee>
    int line[size_b][size_a + size_b];
 11c:	6c75                	lui	s8,0x1d
    int pola[size_a];
 11e:	0074                	addi	a3,sp,12
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 120:	755f 7562 0066      	0x667562755f
    int line[size_b][size_a + size_b];
 126:	625f 7361 0065      	0x657361625f
    int pola[size_a];
 12c:	5f5f 6d74 685f      	0x685f6d745f5f
            line[i][j] = 0;
 132:	0072756f          	jal	a0,27938 <_stack_start+0x17938>
    int polb[size_b];
 136:	5f5f 6673 5f00      	0x5f0066735f5f
    int line[size_b][size_a + size_b];
 13c:	655f6e6f          	jal	t3,f6f90 <_stack_start+0xe6f90>
    int pola[size_a];
 140:	6978                	flw	fa4,84(a0)
    int polb[size_b];
 142:	5f74                	lw	a3,124(a4)
            line[i][j] = 0;
 144:	7261                	lui	tp,0xffff8
 146:	5f007367          	0x5f007367
    for (i = 0; i < size_b; ++i){
 14a:	6b6f6f63          	bltu	t5,s6,808 <ext_euclid+0x1ec>
            product[j] = 0;
 14e:	6569                	lui	a0,0x1a
 150:	5f00                	lw	s0,56(a4)
 152:	735f 6c67 6575      	0x65756c67735f
    for (i = 0; i < size_b; ++i){
 158:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_a; ++i){
 15a:	7365                	lui	t1,0xffff9
 15c:	0031                	c.nop	12
 15e:	6572                	flw	fa0,28(sp)
    array_mod(pola,mod,size_a);
 160:	5f003273          	csrrc	tp,0x5f0,zero
 164:	6c66                	flw	fs8,88(sp)
 166:	6761                	lui	a4,0x18
 168:	695f0073          	0x695f0073
    for (i = 0; i < size_b; ++i){
 16c:	78635f73          	csrrwi	t5,0x786,6
 170:	0061                	c.nop	24
 172:	735f 6474 6e69      	0x6e696474735f
    array_mod(polb,mod,size_b);
 178:	5f00                	lw	s0,56(a4)
 17a:	6c62                	flw	fs8,24(sp)
 17c:	7a69736b          	0x7a69736b
    if(star_mult == 1){
 180:	0065                	c.nop	25
 182:	7270                	flw	fa2,100(a2)
 184:	6375646f          	jal	s0,56fba <_stack_start+0x46fba>
 188:	0074                	addi	a3,sp,12
 18a:	6f70                	flw	fa2,92(a4)
 18c:	796c                	flw	fa1,116(a0)
 18e:	6964                	flw	fs1,84(a0)
 190:	0076                	c.slli	zero,0x1d
 192:	6f70                	flw	fa2,92(a4)
 194:	796c                	flw	fa1,116(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 196:	0066                	c.slli	zero,0x19
 198:	635f 7476 7562      	0x75627476635f
            product[j] = 0;
 19e:	0066                	c.slli	zero,0x19
 1a0:	6f5f 6666 6573      	0x657366666f5f
            line[i][j] = 0;
 1a6:	0074                	addi	a3,sp,12
            product[j] = 0;
 1a8:	6d5f 7362 7472      	0x747273626d5f
        for(j = 0; j < size_a + size_b -1; ++j){
 1ae:	7363776f          	jal	a4,378e4 <_stack_start+0x278e4>
 1b2:	735f 6174 6574      	0x65746174735f
    for (i = 0; i < size_b; ++i){
 1b8:	5f00                	lw	s0,56(a4)
 1ba:	626d                	lui	tp,0x1b
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	6c72                	flw	fs8,28(sp)
 1be:	6e65                	lui	t3,0x19
        pola[i] = a[i];
 1c0:	735f 6174 6574      	0x65746174735f
 1c6:	5f00                	lw	s0,56(a4)
 1c8:	6e66                	flw	ft8,88(sp)
 1ca:	7261                	lui	tp,0xffff8
    for (i = 0; i < size_a; ++i){
 1cc:	6e007367          	0x6e007367
        pola[i] = a[i];
 1d0:	7274                	flw	fa3,100(a2)
    for (i = 0; i < size_a; ++i){
 1d2:	5f75                	li	t5,-3
        polb[i] = b[i];
 1d4:	6564                	flw	fs1,76(a0)
 1d6:	70796563          	bltu	s2,t2,8e0 <generate_keys+0x7a>
 1da:	0074                	addi	a3,sp,12
 1dc:	665f 736e 5f00      	0x5f00736e665f
 1e2:	6e676973          	csrrsi	s2,0x6e6,14
    if(star_mult == 1){
 1e6:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 1e8:	6c66                	flw	fs8,88(sp)
 1ea:	5f6b636f          	jal	t1,b67e0 <_stack_start+0xa67e0>
    for (i = 0; i < size_b; ++i){
 1ee:	0074                	addi	a3,sp,12
 1f0:	735f 6474 7265      	0x72656474735f
 1f6:	0072                	c.slli	zero,0x1c
 1f8:	425f 6769 6e69      	0x6e696769425f
    for(j = 0; j < size_a + size_b -1; ++j){
 1fe:	0074                	addi	a3,sp,12
    array_mod(product,mod,(size_a+size_b-1));
 200:	675f 6d61 616d      	0x616d6d61675f
 206:	735f 6769 676e      	0x676e6769735f
}
 20c:	6d61                	lui	s10,0x18
 20e:	5f00                	lw	s0,56(a4)
 210:	6572                	flw	fa0,28(sp)
 212:	6461                	lui	s0,0x18
 214:	5f00                	lw	s0,56(a4)
 216:	6572                	flw	fa0,28(sp)
 218:	746c7573          	csrrci	a0,0x746,24
 21c:	6b5f 5f00 745f      	0x745f5f006b5f
 222:	006d                	c.nop	27
 224:	6564                	flw	fs1,76(a0)
 226:	756e                	flw	fa0,248(sp)
 228:	5f6d                	li	t5,-5
 22a:	6574                	flw	fa3,76(a0)
 22c:	706d                	c.lui	zero,0xffffb
 22e:	5f00                	lw	s0,56(a4)
 230:	775f 6863 0062      	0x626863775f
                line[size_b-1-j][k] = pola[k]*polb[j];
 236:	6572                	flw	fa0,28(sp)
 238:	746c7573          	csrrci	a0,0x746,24
 23c:	006e6f6b          	0x6e6f6b
 240:	735f 6474 756f      	0x756f6474735f
            for (k = size_a-1; k >= 0; k = k-1 ){
 246:	0074                	addi	a3,sp,12
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	635f 7476 656c      	0x656c7476635f
 24e:	006e                	c.slli	zero,0x1b
            for (k = size_a-1; k >= 0; k = k-1 ){
 250:	72636573          	csrrsi	a0,0x726,6
        for (j = size_b -1; j >= 0; j = j-1){
 254:	7465                	lui	s0,0xffff9
 256:	6b5f 7965 665f      	0x665f79656b5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 25c:	0071                	c.nop	28
 25e:	665f 6c69 0065      	0x656c69665f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 264:	6572                	flw	fa0,28(sp)
 266:	7574                	flw	fa3,108(a0)
 268:	6e72                	flw	ft8,28(sp)
 26a:	615f 6464 6572      	0x65726464615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	00317373          	csrrci	t1,fcsr,2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 274:	6572                	flw	fa0,28(sp)
 276:	7574                	flw	fa3,108(a0)
 278:	6e72                	flw	ft8,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 27a:	615f 6464 6572      	0x65726464615f
        for (j = size_b -1; j >= 0; j = j-1){
 280:	00327373          	csrrci	t1,fcsr,4
 284:	6572                	flw	fa0,28(sp)
            line[i][j] = line[i][j] % mod;
 286:	7574                	flw	fa3,108(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 288:	6e72                	flw	ft8,28(sp)
 28a:	615f 6464 6572      	0x65726464615f
            line[i][j] = line[i][j] % mod;
 290:	00337373          	csrrci	t1,fcsr,6
        for(j = 0; j < size_a + size_b -1; ++j){
 294:	6572                	flw	fa0,28(sp)
 296:	7574                	flw	fa3,108(a0)
    for (i = 0; i < size_b; ++i){
 298:	6e72                	flw	ft8,28(sp)
 29a:	615f 6464 6572      	0x65726464615f
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	00347373          	csrrci	t1,fcsr,8
            product[j] += line[i][j];
 2a4:	6e5f 6f69 7362      	0x73626f696e5f
 2aa:	7200                	flw	fs0,32(a2)
 2ac:	7465                	lui	s0,0xffff9
        for(i = 0; i < size_b; ++i){
 2ae:	7275                	lui	tp,0xffffd
            product[j] += line[i][j];
 2b0:	5f6e                	lw	t5,248(sp)
 2b2:	6461                	lui	s0,0x18
 2b4:	7264                	flw	fs1,100(a2)
 2b6:	7365                	lui	t1,0xffff9
 2b8:	72003673          	csrrc	a2,0x720,zero
        for(i = 0; i < size_b; ++i){
 2bc:	7465                	lui	s0,0xffff9
 2be:	7275                	lui	tp,0xffffd
    for(j = 0; j < size_a + size_b -1; ++j){
 2c0:	5f6e                	lw	t5,248(sp)
 2c2:	6461                	lui	s0,0x18
 2c4:	7264                	flw	fs1,100(a2)
        for(i = 0; i < size_b; ++i){
 2c6:	7365                	lui	t1,0xffff9
 2c8:	73003773          	csrrc	a4,0x730,zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2cc:	6f68                	flw	fa0,92(a4)
 2ce:	7472                	flw	fs0,60(sp)
    int line[size_b][size_a + size_b];
 2d0:	7520                	flw	fs0,104(a0)
 2d2:	736e                	flw	ft6,248(sp)
 2d4:	6769                	lui	a4,0x1a
 2d6:	656e                	flw	fa0,216(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2d8:	2064                	fld	fs1,192(s0)
 2da:	6e69                	lui	t3,0x1a
    int line[size_b][size_a + size_b];
 2dc:	0074                	addi	a3,sp,12
 2de:	615f 6574 6978      	0x69786574615f
 2e4:	3074                	fld	fa3,224(s0)
 2e6:	5f00                	lw	s0,56(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e8:	6e676973          	csrrsi	s2,0x6e6,14
 2ec:	6c61                	lui	s8,0x18
 2ee:	625f 6675 5f00      	0x5f006675625f
 2f4:	7361                	lui	t1,0xffff8
    int pola[size_a];
 2f6:	6d697463          	bgeu	s2,s6,9be <generate_keys+0x158>
    int line[size_b][size_a + size_b];
 2fa:	5f65                	li	t5,-7
 2fc:	7562                	flw	fa0,56(sp)
 2fe:	0066                	c.slli	zero,0x19
 300:	725f 7365 6c75      	0x6c757365725f
    int pola[size_a];
 306:	0074                	addi	a3,sp,12
 308:	5f5f 6377 0068      	0x6863775f5f
 30e:	746e6977          	0x746e6977
    int polb[size_b];
 312:	745f 6700 6e65      	0x6e656700745f
 318:	7265                	lui	tp,0xffff9
 31a:	7461                	lui	s0,0xffff8
    int line[size_b][size_a + size_b];
 31c:	5f65                	li	t5,-7
    int polb[size_b];
 31e:	7379656b          	0x7379656b
    for (i = 0; i < size_b; ++i){
 322:	5f00                	lw	s0,56(a4)
 324:	625f 6975 746c      	0x746c6975625f
            product2[j] = 0;
 32a:	6e69                	lui	t3,0x1a
 32c:	6d5f 6d65 7063      	0x70636d656d5f
    for(i = 0; i < size_a; ++i){
 332:	0079                	c.nop	30
 334:	6c5f 636f 006b      	0x6b636f6c5f
    for(i = 0; i < size_b; ++i){
 33a:	544e                	lw	s0,240(sp)
 33c:	5552                	lw	a0,52(sp)
    if(star_mult == 1){
 33e:	345f 5f38 6962      	0x69625f38345f
 344:	4d74                	lw	a3,92(a0)
 346:	632e                	flw	ft6,200(sp)
 348:	7000                	flw	fs0,32(s0)
 34a:	6f72                	flw	ft10,28(sp)
 34c:	7564                	flw	fs1,108(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 34e:	00327463          	bgeu	tp,gp,356 <polymult2+0x8c>
            for (k = size_a-1; k >= 0; k = k-1 ){
 352:	7865                	lui	a6,0xffff9
 354:	5f74                	lw	a3,124(a4)
            product2[j] = 0;
 356:	7565                	lui	a0,0xffff9
 358:	64696c63          	bltu	s2,t1,9b0 <generate_keys+0x14a>
            line[i][j] = 0;
 35c:	5f00                	lw	s0,56(a4)
 35e:	74697277          	0x74697277
            product2[j] = 0;
 362:	0065                	c.nop	25
        for(j = 0; j < size_a + size_b -1; ++j){
 364:	5f5f 6d74 795f      	0x795f6d745f5f
 36a:	6165                	addi	sp,sp,112
    for (i = 0; i < size_b; ++i){
 36c:	0072                	c.slli	zero,0x1c
 36e:	6f70                	flw	fa2,92(a4)
 370:	626c                	flw	fa1,68(a2)
 372:	7200                	flw	fs0,32(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 374:	6e61                	lui	t3,0x18
 376:	6f64                	flw	fs1,92(a4)
        pola[i] = a[i];
 378:	5f6d                	li	t5,-5
 37a:	6176                	flw	ft2,92(sp)
 37c:	006c                	addi	a1,sp,12
 37e:	6e5f 616d 6c6c      	0x6c6c616d6e5f
 384:	6c00636f          	jal	t1,6a44 <_stack_len+0x2a44>
 388:	20676e6f          	jal	t3,7658e <_stack_start+0x6658e>
    for(i = 0; i < size_a; ++i){
 38c:	6f64                	flw	fs1,92(a4)
        polb[i] = b[i];
 38e:	6275                	lui	tp,0x1d
 390:	656c                	flw	fa1,76(a0)
 392:	5f00                	lw	s0,56(a4)
 394:	656e                	flw	fa0,216(sp)
 396:	7478                	flw	fa4,108(s0)
 398:	0066                	c.slli	zero,0x19
 39a:	656d                	lui	a0,0x1b
    for(i = 0; i < size_b; ++i){
 39c:	67617373          	csrrci	t1,0x676,2
        polb[i] = b[i];
 3a0:	0065                	c.nop	25
    for(i = 0; i < size_b; ++i){
 3a2:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3a8:	72006e6f          	jal	t3,6ac8 <_stack_len+0x2ac8>
 3ac:	7465                	lui	s0,0xffff9
 3ae:	7275                	lui	tp,0xffffd
 3b0:	5f6e                	lw	t5,248(sp)
 3b2:	6461                	lui	s0,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 3b4:	7264                	flw	fs1,100(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b6:	7365                	lui	t1,0xffff9
 3b8:	5f003573          	csrrc	a0,0x5f0,zero
            for (k = size_a-1; k >= 0; k = k-1 ){
 3bc:	7461                	lui	s0,0xffff8
 3be:	7865                	lui	a6,0xffff9
        for (j = size_b -1; j >= 0; j = j-1){
 3c0:	7469                	lui	s0,0xffffa
 3c2:	7300                	flw	fs0,32(a4)
 3c4:	6275                	lui	tp,0x1d
 3c6:	6174706f          	j	481dc <_stack_start+0x381dc>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	6772                	flw	fa4,28(sp)
        array_add(product2,line[i],size_a+size_b-1);
 3cc:	5f00                	lw	s0,56(a4)
 3ce:	735f 6964 6964      	0x69646964735f
    for(i=0;i<size_b;++i){
 3d4:	696e                	flw	fs2,216(sp)
 3d6:	0074                	addi	a3,sp,12
}
 3d8:	6f5f 6666 745f      	0x745f66666f5f
 3de:	2f00                	fld	fs0,24(a4)
 3e0:	6f68                	flw	fa0,92(a4)
 3e2:	656d                	lui	a0,0x1b
 3e4:	706f742f          	0x706f742f
 3e8:	6c61                	lui	s8,0x18
 3ea:	65442f63          	0x65442f63
 3ee:	6f746b73          	csrrsi	s6,0x6f7,8
 3f2:	2f70                	fld	fa2,216(a4)
 3f4:	7270                	flw	fa2,100(a2)
 3f6:	6c656a6f          	jal	s4,56abc <_stack_start+0x46abc>
            for (k = size_a-1; k >= 0; k = k-1 ){
 3fa:	7265                	lui	tp,0xffff9
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3fc:	636c6f2f          	0x636c6f2f
 400:	6d75                	lui	s10,0x1d
 402:	6d2e342f          	0x6d2e342f
 406:	612b646f          	jal	s0,b6a18 <_stack_start+0xa6a18>
 40a:	6464                	flw	fs1,76(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 40c:	4500                	lw	s0,8(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 40e:	636e                	flw	ft6,216(sp)
 410:	4d5f 7365 6173      	0x617373654d5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 416:	63006567          	0x63006567
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	72746e6f          	jal	t3,47340 <_stack_start+0x37340>
 41e:	00526c6f          	jal	s8,26c22 <_stack_start+0x16c22>
        array_add(product2,line[i],size_a+size_b-1);
 422:	665f 6572 6c65      	0x6c656572665f
 428:	7369                	lui	t1,0xffffa
    for(i=0;i<size_b;++i){
 42a:	0074                	addi	a3,sp,12
 42c:	6972                	flw	fs2,28(sp)
 42e:	676e                	flw	fa4,216(sp)
    int v[size_N];
 430:	705f 6c6f 0079      	0x796c6f705f
 436:	4c5f 434f 5f4b      	0x5f4b434f4c5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 43c:	4552                	lw	a0,20(sp)
 43e:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
 442:	5649                	li	a2,-14
 444:	5f45                	li	t5,-15
 446:	0054                	addi	a3,sp,4
 448:	6974                	flw	fa3,84(a0)
 44a:	315f 7400 5f69      	0x5f697400315f
 450:	0032                	c.slli	zero,0xc
 452:	6e75                	lui	t3,0x1d
 454:	6e676973          	csrrsi	s2,0x6e6,14
    int v[size_N];
 458:	6465                	lui	s0,0x19
 45a:	6320                	flw	fs0,64(a4)
    int q[size_N];
 45c:	6168                	flw	fa0,68(a0)
 45e:	0072                	c.slli	zero,0x1c
 460:	6971                	lui	s2,0x1c
    int num_temp[size_N];
 462:	315f 5f00 656e      	0x656e5f00315f
    int denum_temp[size_D];
 468:	685f0077          	0x685f0077
 46c:	655f 7272 6f6e      	0x6f6e7272655f
 472:	7300                	flw	fs0,32(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 474:	6f68                	flw	fa0,92(a4)
 476:	7472                	flw	fs0,60(sp)
 478:	6920                	flw	fs0,80(a0)
 47a:	746e                	flw	fs0,248(sp)
    int v[size_N];
 47c:	5f00                	lw	s0,56(a4)
 47e:	745f 5f6d 6479      	0x64795f6d745f
    int denum_temp[size_D];
 484:	7961                	lui	s2,0xffff8
    for (i = 0; i < size_N; ++i){
 486:	5f00                	lw	s0,56(a4)
 488:	735f 7562 0066      	0x667562735f
    array_mod(num_temp,mod,size_N);
 48e:	665f 616c 7367      	0x7367616c665f
    for (i = 0; i < size_D; ++i) {
 494:	0032                	c.slli	zero,0xc
 496:	695f 626f 0073      	0x73626f695f
    array_mod(denum_temp,mod,size_D);
 49c:	5f5f 4946 454c      	0x454c49465f5f
    for (i = 0; i < size_N; ++i){
 4a2:	5f00                	lw	s0,56(a4)
 4a4:	626d                	lui	tp,0x1b
 4a6:	74617473          	csrrci	s0,0x746,2
    for (i = size_D-1; i >= 0; i = i-1){
 4aa:	5f65                	li	t5,-7
 4ac:	0074                	addi	a3,sp,12
 4ae:	5f5f 4673 4c49      	0x4c4946735f5f
    for (i = 0; i < size_N; ++i){
 4b4:	0045                	c.nop	17
 4b6:	6d5f 7362 6174      	0x617473626d5f
    for (u = 0; u < mod; ++u){
 4bc:	6574                	flw	fa3,76(a0)
 4be:	5f00                	lw	s0,56(a4)
 4c0:	6172                	flw	ft2,28(sp)
        num_temp[i] = num[i];
 4c2:	646e                	flw	fs0,216(sp)
 4c4:	6e5f 7865 0074      	0x7478656e5f
 4ca:	6d5f 6c62 6e65      	0x6e656c626d5f
 4d0:	735f 6174 6574      	0x65746174735f
        denum_temp[i] = denum[i];
 4d6:	5f00                	lw	s0,56(a4)
 4d8:	6e69                	lui	t3,0x1a
 4da:	695f0063          	beq	t5,s5,b5a <ntru_encyrpt+0x2>
 4de:	646e                	flw	fs0,216(sp)
    for (i = 0; i < size_D; ++i) {
 4e0:	5f00                	lw	s0,56(a4)
        denum_temp[i] = denum[i];
 4e2:	6f6c                	flw	fa1,92(a4)
    for (i = 0; i < size_D; ++i) {
 4e4:	656c6163          	bltu	s8,s6,b26 <generate_keys+0x2c0>
        q[i] = 0;
 4e8:	5f00                	lw	s0,56(a4)
 4ea:	635f 656c 6e61      	0x6e61656c635f
 4f0:	7075                	c.lui	zero,0xffffd
 4f2:	5f00                	lw	s0,56(a4)
        v[i] = 0;
 4f4:	6e75                	lui	t3,0x1d
 4f6:	63657073          	csrci	0x636,10
    for (i = 0; i < size_N; ++i){
 4fa:	6669                	lui	a2,0x1a
        if( denum_temp[i] != 0 )
 4fc:	6569                	lui	a0,0x1a
    for (i = size_D-1; i >= 0; i = i-1){
 4fe:	5f64                	lw	s1,124(a4)
 500:	6f6c                	flw	fa1,92(a4)
        if ( (b_N*u)%mod == 1 )
 502:	656c6163          	bltu	s8,s6,b44 <generate_keys+0x2de>
 506:	695f 666e 006f      	0x6f666e695f
    for (u = 0; u < mod; ++u){
 50c:	6d5f 7861 6477      	0x647778616d5f
    for (i = size_N-1; i >= 0; i = i-1){
 512:	725f0073          	0x725f0073
 516:	6565                	lui	a0,0x19
 518:	746e                	flw	fs0,248(sp)
 51a:	7300                	flw	fs0,32(a4)
 51c:	6174                	flw	fa3,68(a0)
 51e:	5f72                	lw	t5,60(sp)
    while (d >= d2){
 520:	756d                	lui	a0,0xffffb
 522:	746c                	flw	fa1,108(s0)
    for(i = 0; i < size_N; ++i){
 524:	5f00                	lw	s0,56(a4)
        result[i] = q[i];
 526:	64656573          	csrrsi	a0,0x646,10
 52a:	7200                	flw	fs0,32(a2)
 52c:	5f69                	li	t5,-6
    for(i = 0; i < size_N; ++i){
 52e:	0032                	c.slli	zero,0xc
 530:	5f5f 6f63 6e75      	0x6e756f635f5f
        result[i] = num_temp[i-size_N];
 536:	0074                	addi	a3,sp,12
 538:	5f5f 6176 756c      	0x756c61765f5f
    for(i = size_N; i < (2*size_N); ++i){
 53e:	0065                	c.nop	25
 540:	735f 6565 006b      	0x6b6565735f
}
 546:	665f 6f70 5f73      	0x5f736f70665f
 54c:	0074                	addi	a3,sp,12
 54e:	656c                	flw	fa1,76(a0)
 550:	676e                	flw	fa4,216(sp)
 552:	6874                	flw	fa3,84(s0)
 554:	5f00                	lw	s0,56(a4)
 556:	745f 5f6d 696d      	0x696d5f6d745f
 55c:	006e                	c.slli	zero,0x1b
 55e:	7570                	flw	fa2,108(a0)
 560:	6c62                	flw	fs8,24(sp)
 562:	6369                	lui	t1,0x1a
 564:	6b5f 7965 6100      	0x610079656b5f
 56a:	7272                	flw	ft4,60(sp)
        v[(d-d2)] = u*r_d;
 56c:	7961                	lui	s2,0xffff8
 56e:	615f 6464 6100      	0x61006464615f
 574:	7272                	flw	ft4,60(sp)
 576:	7961                	lui	s2,0xffff8
    array_mod(v,mod,size_N);
 578:	6d5f 646f 5f00      	0x5f00646f6d5f
        v[(d-d2)] = u*r_d;
 57e:	74727473          	csrrci	s0,0x747,4
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 582:	6c5f6b6f          	jal	s6,f7446 <_stack_start+0xe7446>
 586:	7361                	lui	t1,0xffff8
 588:	0074                	addi	a3,sp,12
 58a:	665f 746e 7079      	0x7079746e665f
    array_mod(product,mod,size_N);
 590:	7365                	lui	t1,0xffff9
 592:	7300                	flw	fs0,32(a4)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 594:	6365                	lui	t1,0x19
    array_mod(product,mod,size_N);
 596:	6572                	flw	fa0,28(sp)
        for (i = 0; i < size_N; ++i){
 598:	5f74                	lw	a3,124(a4)
 59a:	5f79656b          	0x5f79656b
 59e:	7066                	flw	ft0,120(sp)
    array_mod(num_temp,mod,size_N);
 5a0:	5f00                	lw	s0,56(a4)
 5a2:	555f 6f4c 676e      	0x676e6f4c555f
    array_add(q,v,size_N);
 5a8:	7200                	flw	fs0,32(a2)
 5aa:	5f69                	li	t5,-6
 5ac:	0031                	c.nop	12
 5ae:	675f 7465 6164      	0x61647465675f
    array_mod(q,mod,size_N);
 5b4:	6574                	flw	fa3,76(a0)
 5b6:	655f 7272 5f00      	0x5f007272655f
        for (i = size_N-1; i >= 0; i = i-1){
 5bc:	626f6c67          	0x626f6c67
 5c0:	6c61                	lui	s8,0x18
 5c2:	695f 706d 7275      	0x7275706d695f
 5c8:	5f65                	li	t5,-7
            num_temp[i] = num_temp[i] - product[i];
 5ca:	7470                	flw	fa2,108(s0)
 5cc:	0072                	c.slli	zero,0x1c
 5ce:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 5d2:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
        for (i = 0; i < size_N; ++i){
 5d6:	2e39                	jal	8f4 <generate_keys+0x8e>
            num_temp[i] = num_temp[i] - product[i];
 5d8:	2e32                	fld	ft8,264(sp)
 5da:	2030                	fld	fa2,64(s0)
 5dc:	6d2d                	lui	s10,0xb
        for (i = 0; i < size_N; ++i){
 5de:	7261                	lui	tp,0xffff8
            if( num_temp[i] != 0 )
 5e0:	723d6863          	bltu	s10,gp,d10 <main_entry+0x2>
        for (i = size_N-1; i >= 0; i = i-1){
 5e4:	3376                	fld	ft6,376(sp)
            v[i] = 0;
 5e6:	6932                	flw	fs2,12(sp)
 5e8:	636d                	lui	t1,0x1b
 5ea:	2d20                	fld	fs0,88(a0)
 5ec:	616d                	addi	sp,sp,240
 5ee:	6962                	flw	fs2,24(sp)
        for (i = 0; i < size_N; ++i){
 5f0:	693d                	lui	s2,0xf
 5f2:	706c                	flw	fa1,100(s0)
 5f4:	2d203233          	0x2d203233
        result[i] = q[i];
 5f8:	636d                	lui	t1,0x1b
 5fa:	6f6d                	lui	t5,0x1b
 5fc:	6564                	flw	fs1,76(a0)
 5fe:	3d6c                	fld	fa1,248(a0)
 600:	656d                	lui	a0,0x1b
 602:	6164                	flw	fs1,68(a0)
    for(i = 0; i < size_N; ++i){
 604:	796e                	flw	fs2,248(sp)
        result[i] = q[i];
 606:	2d20                	fld	fs0,88(a0)
    for(i = 0; i < size_N; ++i){
 608:	746d                	lui	s0,0xffffb
        result[i] = num_temp[i-size_N];
 60a:	6e75                	lui	t3,0x1d
 60c:	3d65                	jal	4c4 <polydiv+0x94>
 60e:	6f72                	flw	ft10,28(sp)
 610:	74656b63          	bltu	a0,t1,d66 <memcpy+0x4c>
 614:	2d20                	fld	fs0,88(a0)
    for(i = size_N; i < (2*size_N); ++i){
 616:	4f2d2067          	0x4f2d2067
 61a:	662d2073          	csrs	0x662,s10
    int ri_2[size]; // MX-ring poly, a
 61e:	6976                	flw	fs2,92(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 620:	69626973          	csrrsi	s2,0x696,4
    int ri_2[size]; // MX-ring poly, a
 624:	696c                	flw	fa1,84(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 626:	7974                	flw	fa3,116(a0)
 628:	683d                	lui	a6,0xf
 62a:	6469                	lui	s0,0x1a
 62c:	6564                	flw	fs1,76(a0)
 62e:	006e                	c.slli	zero,0x1b
 630:	755f 756e 6573      	0x6573756e755f
 636:	5f64                	lw	s1,124(a4)
 638:	6172                	flw	ft2,28(sp)
 63a:	646e                	flw	fs0,216(sp)
 63c:	6c00                	flw	fs0,24(s0)
 63e:	6e69                	lui	t3,0x1a
 640:	0065                	c.nop	25
    int ri_2[size]; // MX-ring poly, a
 642:	775f 7364 5f00      	0x5f007364775f
    int ri_1[size]; // f-random poly, f[N] = 0, b
 648:	745f 5f6d 6477      	0x64775f6d745f
    int ri[size];
 64e:	7961                	lui	s2,0xffff8
 650:	5f00                	lw	s0,56(a4)
 652:	65756c67          	0x65756c67
    int ti_1[size]; // ti_1[0] = 1
 656:	6e00                	flw	fs0,24(a2)
 658:	7274                	flw	fa3,100(a2)
    int ti[size];
 65a:	5f75                	li	t5,-3
 65c:	6e65                	lui	t3,0x19
 65e:	70727963          	bgeu	tp,t2,d70 <memcpy+0x56>
    int qi_1[size];
 662:	0074                	addi	a3,sp,12
 664:	735f 6973 657a      	0x657a6973735f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 66a:	745f 5f00 366c      	0x366c5f00745f
    int ri_2[size]; // MX-ring poly, a
 670:	6134                	flw	fa3,64(a0)
    int temp[size];
 672:	625f 6675 6400      	0x64006675625f
        ti_2[i] = 0;
 678:	6e65                	lui	t3,0x19
 67a:	6d75                	lui	s10,0x1d
 67c:	5f00                	lw	s0,56(a4)
 67e:	5f676973          	csrrsi	s2,0x5f6,14
    for (i = 0; i < size; ++i) {
 682:	7566                	flw	fa0,120(sp)
    ti_1[0] = 1;
 684:	636e                	flw	ft6,216(sp)
 686:	5f00                	lw	s0,56(a4)
 688:	626e                	flw	ft4,216(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 68a:	6675                	lui	a2,0x1d
 68c:	5f00                	lw	s0,56(a4)
 68e:	6e75                	lui	t3,0x1d
 690:	7375                	lui	t1,0xffffd
            ti[i] = ti_2[i] - temp[i];
 692:	6465                	lui	s0,0x19
 694:	7000                	flw	fs0,32(s0)
 696:	52796c6f          	jal	s8,973bc <_stack_start+0x873bc>
    array_mod(ri_2,mod,size);
 69a:	7300                	flw	fs0,32(a4)
 69c:	7a69                	lui	s4,0xffffa
 69e:	5f65                	li	t5,-7
 6a0:	0044                	addi	s1,sp,4
    array_mod(ri_1,mod,size);
 6a2:	5f5f 6d74 695f      	0x695f6d745f5f
 6a8:	74736473          	csrrsi	s0,0x747,6
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 6ac:	5f00                	lw	s0,56(a4)
 6ae:	6f6c                	flw	fa1,92(a4)
 6b0:	746c6163          	bltu	s8,t1,df2 <memcpy+0xd8>
 6b4:	6d69                	lui	s10,0x1a
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6b6:	5f65                	li	t5,-7
 6b8:	7562                	flw	fa0,56(sp)
 6ba:	0066                	c.slli	zero,0x19
 6bc:	635f 6f6c 6573      	0x65736f6c635f
 6c2:	5f00                	lw	s0,56(a4)
        for (i = 0; i < N + 1; ++i) {
 6c4:	3472                	fld	fs0,312(sp)
 6c6:	0038                	addi	a4,sp,8
 6c8:	6d5f 7462 776f      	0x776f74626d5f
    array_mod(temp,mod,size);
 6ce:	74735f63          	bge	t1,t2,e2c <memset+0x34>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 6d2:	7461                	lui	s0,0xffff8
 6d4:	0065                	c.nop	25
 6d6:	705f 7335 6d00      	0x6d007335705f
 6dc:	6961                	lui	s2,0x18
        for (i = 0; i < N + 1; ++i) {
 6de:	006e                	c.slli	zero,0x1b
 6e0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    array_mod(qi_1,mod,size);
 6e6:	6164                	flw	fs1,68(a0)
 6e8:	0079                	c.nop	30
 6ea:	657a6973          	csrrsi	s2,0x657,20
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
 6ee:	615f 7300 7a69      	0x7a697300615f
 6f4:	5f65                	li	t5,-7
 6f6:	0062                	c.slli	zero,0x18
 6f8:	30747263          	bgeu	s0,t2,9fc <generate_keys+0x196>
        for (i = 0; i < N + 1; ++i) {
 6fc:	532e                	lw	t1,232(sp)
 6fe:	4700                	lw	s0,8(a4)
    array_mod(temp,mod,size);
 700:	554e                	lw	a0,240(sp)
 702:	4120                	lw	s0,64(a0)
 704:	2e322053          	0x2e322053
        for (i = 0; i < N + 1; ++i) {
 708:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x64>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	001e                	c.slli	zero,0x7
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00d8                	addi	a4,sp,68
  5a:	0000                	unimp
  5c:	01f2                	slli	gp,gp,0x1c
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4450                	lw	a2,12(s0)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0a98                	addi	a4,sp,336
  6c:	0c9a                	slli	s9,s9,0x6
  6e:	8850                	0x8850
  70:	8902                	jr	s2
  72:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  76:	4e00                	lw	s0,24(a2)
  78:	0694                	addi	a3,sp,832
  7a:	0795                	addi	a5,a5,5
  jal x0, default_exc_handler
  7c:	0896                	slli	a7,a7,0x5
  7e:	0b990997          	auipc	s3,0xb990
  jal x0, reset_handler
  82:	01810d9b          	0x1810d9b
  jal x0, default_exc_handler
  86:	0a010403          	lb	s0,160(sp)
  jal x0, default_exc_handler
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    for(i=0;i<(length/3);i++) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
    asm volatile(
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0044                	addi	s1,sp,4
  ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  b0:	0000                	unimp
  b2:	0000                	unimp
    asm volatile(
  b4:	02ca                	slli	t0,t0,0x12
  b6:	0000                	unimp
}
  b8:	0166                	slli	sp,sp,0x19
    for(i=0;i<(length/3);i++) {
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4220                	lw	s0,64(a2)
    asm volatile(
  c0:	0389                	addi	t2,t2,2
    for(i=0;i<(length/3);i++) {
  c2:	924e                	add	tp,tp,s3
  c4:	9304                	0x9304
  c6:	5605                	li	a2,-31
}
  c8:	0288                	addi	a0,sp,320
    asm volatile(
  ca:	0694                	addi	a3,sp,832
  cc:	0795                	addi	a5,a5,5
  ce:	0181                	addi	gp,gp,0
  d0:	0896                	slli	a7,a7,0x5
  d2:	0c42                	slli	s8,s8,0x10
    for(i=0;i<(length/3);i++) {
  d4:	0008                	0x8
  d6:	e802                	fsw	ft0,16(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d8:	0c0a                	slli	s8,s8,0x2
  da:	2002                	fld	ft0,0(sp)
  dc:	c142                	sw	a6,128(sp)
  de:	c842                	sw	a6,16(sp)
  e0:	c942                	sw	a6,144(sp)
    int line[size_b][size_a + size_b];
  e2:	d242                	sw	a6,36(sp)
  e4:	d342                	sw	a6,164(sp)
  e6:	d442                	sw	a6,40(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  e8:	d542                	sw	a6,168(sp)
  ea:	d642                	sw	a6,44(sp)
    int line[size_b][size_a + size_b];
  ec:	0e4a                	slli	t3,t3,0x12
  ee:	4200                	lw	s0,0(a2)
  f0:	0000000b          	0xb
  f4:	0054                	addi	a3,sp,4
  f6:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  f8:	0000                	unimp
  fa:	0000                	unimp
  fc:	0430                	addi	a2,sp,520
  fe:	0000                	unimp
 100:	01ec                	addi	a1,sp,204
 102:	0000                	unimp
 104:	0e46                	slli	t3,t3,0x11
 106:	5e40                	lw	s0,60(a2)
 108:	0288                	addi	a0,sp,320
 10a:	0389                	addi	t2,t2,2
 10c:	0492                	slli	s1,s1,0x4
 10e:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
    int pola[size_a];
 112:	0795                	addi	a5,a5,5
 114:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 116:	0a980997          	auipc	s3,0xa980
 11a:	0b99                	addi	s7,s7,6
 11c:	0c9a                	slli	s9,s9,0x6
    int pola[size_a];
 11e:	0181                	addi	gp,gp,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 120:	0c420d9b          	0xc420d9b
    int polb[size_b];
 124:	0008                	0x8
    int line[size_b][size_a + size_b];
 126:	f002                	fsw	ft0,32(sp)
    int polb[size_b];
 128:	0c0a                	slli	s8,s8,0x2
    int pola[size_a];
 12a:	4002                	0x4002
 12c:	c142                	sw	a6,128(sp)
 12e:	c842                	sw	a6,16(sp)
            line[i][j] = 0;
 130:	c942                	sw	a6,144(sp)
 132:	d242                	sw	a6,36(sp)
    int polb[size_b];
 134:	d342                	sw	a6,164(sp)
 136:	d442                	sw	a6,40(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	d542                	sw	a6,168(sp)
    int line[size_b][size_a + size_b];
 13a:	d642                	sw	a6,44(sp)
 13c:	d742                	sw	a6,172(sp)
    int pola[size_a];
 13e:	d842                	sw	a6,48(sp)
 140:	d942                	sw	a6,176(sp)
    int polb[size_b];
 142:	da42                	sw	a6,52(sp)
            line[i][j] = 0;
 144:	db42                	sw	a6,180(sp)
 146:	0e4a                	slli	t3,t3,0x12
 148:	4200                	lw	s0,0(a2)
    for (i = 0; i < size_b; ++i){
 14a:	0054000b          	0x54000b
            product[j] = 0;
 14e:	0000                	unimp
 150:	0000                	unimp
 152:	0000                	unimp
 154:	061c                	addi	a5,sp,768
    for (i = 0; i < size_b; ++i){
 156:	0000                	unimp
 158:	024a                	slli	tp,tp,0x12
    for (i = 0; i < size_a; ++i){
 15a:	0000                	unimp
 15c:	0e46                	slli	t3,t3,0x11
 15e:	5e50                	lw	a2,60(a2)
    array_mod(pola,mod,size_a);
 160:	0288                	addi	a0,sp,320
 162:	0389                	addi	t2,t2,2
 164:	0492                	slli	s1,s1,0x4
 166:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_b; ++i){
 16a:	0795                	addi	a5,a5,5
 16c:	0896                	slli	a7,a7,0x5
 16e:	0a980997          	auipc	s3,0xa980
 172:	0b99                	addi	s7,s7,6
    array_mod(polb,mod,size_b);
 174:	01810d9b          	0x1810d9b
 178:	0c9a                	slli	s9,s9,0x6
 17a:	0c42                	slli	s8,s8,0x10
 17c:	0008                	0x8
    if(star_mult == 1){
 17e:	0a00fa03          	0xa00fa03
 182:	020c                	addi	a1,sp,256
 184:	4250                	lw	a2,4(a2)
 186:	42c1                	li	t0,16
 188:	42c8                	lw	a0,4(a3)
 18a:	42c9                	li	t0,18
 18c:	42d2                	lw	t0,20(sp)
 18e:	42d442d3          	0x42d442d3
 192:	42d5                	li	t0,21
 194:	42d6                	lw	t0,84(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 196:	42d842d7          	0x42d842d7
            for (k = size_a-1; k >= 0; k = k-1 ){
 19a:	42d9                	li	t0,22
 19c:	42da                	lw	t0,148(sp)
            product[j] = 0;
 19e:	000e4adb          	0xe4adb
 1a2:	0b42                	slli	s6,s6,0x10
            line[i][j] = 0;
 1a4:	0054                	addi	a3,sp,4
 1a6:	0000                	unimp
            product[j] = 0;
 1a8:	0000                	unimp
 1aa:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1ac:	0866                	slli	a6,a6,0x19
 1ae:	0000                	unimp
 1b0:	02f2                	slli	t0,t0,0x1c
 1b2:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1b4:	0e42                	slli	t3,t3,0x10
 1b6:	03f0                	addi	a2,sp,460
 1b8:	814c                	0x814c
 1ba:	8801                	andi	s0,s0,0
        for(j = 0; j < size_a + size_b -1; ++j){
 1bc:	8902                	jr	s2
 1be:	080c4203          	lbu	tp,128(s8)
        pola[i] = a[i];
 1c2:	6400                	flw	fs0,8(s0)
 1c4:	0492                	slli	s1,s1,0x4
 1c6:	06940593          	addi	a1,s0,105
 1ca:	0795                	addi	a5,a5,5
    for (i = 0; i < size_a; ++i){
 1cc:	0896                	slli	a7,a7,0x5
        pola[i] = a[i];
 1ce:	0c9a0997          	auipc	s3,0xc9a0
    for (i = 0; i < size_a; ++i){
 1d2:	0a98                	addi	a4,sp,336
        polb[i] = b[i];
 1d4:	0b99                	addi	s7,s7,6
 1d6:	0a01da03          	lhu	s4,160(gp)
 1da:	020c                	addi	a1,sp,256
 1dc:	03f0                	addi	a2,sp,460
 1de:	c144                	sw	s1,4(a0)
    for (i = 0; i < size_b; ++i){
 1e0:	c844                	sw	s1,20(s0)
        polb[i] = b[i];
 1e2:	c944                	sw	s1,20(a0)
    for (i = 0; i < size_b; ++i){
 1e4:	d244                	sw	s1,36(a2)
    if(star_mult == 1){
 1e6:	d344                	sw	s1,36(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 1e8:	d444                	sw	s1,44(s0)
 1ea:	d544                	sw	s1,44(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 1ec:	d644                	sw	s1,44(a2)
    for (i = 0; i < size_b; ++i){
 1ee:	d744                	sw	s1,44(a4)
 1f0:	d844                	sw	s1,52(s0)
 1f2:	d944                	sw	s1,52(a0)
 1f4:	da44                	sw	s1,52(a2)
 1f6:	0e4a                	slli	t3,t3,0x12
 1f8:	4200                	lw	s0,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 1fa:	0034000b          	0x34000b
 1fe:	0000                	unimp
    array_mod(product,mod,(size_a+size_b-1));
 200:	0000                	unimp
 202:	0000                	unimp
 204:	0b58                	addi	a4,sp,404
 206:	0000                	unimp
 208:	0086                	slli	ra,ra,0x1
 20a:	0000                	unimp
}
 20c:	0e42                	slli	t3,t3,0x10
 20e:	01e0                	addi	s0,sp,204
 210:	8844                	0x8844
 212:	8902                	jr	s2
 214:	04924a03          	lbu	s4,73(tp) # fffe1049 <_stack_start+0xfffd1049>
 218:	8152                	mv	sp,s4
 21a:	9301                	srli	a4,a4,0x20
 21c:	9405                	srai	s0,s0,0x21
 21e:	0206                	slli	tp,tp,0x1
 220:	0a44                	addi	s1,sp,276
 222:	42c1                	li	t0,16
 224:	42c8                	lw	a0,4(a3)
 226:	42c9                	li	t0,18
 228:	42d2                	lw	t0,20(sp)
 22a:	42d442d3          	0x42d442d3
 22e:	000e                	c.slli	zero,0x3
 230:	0b42                	slli	s6,s6,0x10
 232:	0000                	unimp
 234:	0040                	addi	s0,sp,4
                line[size_b-1-j][k] = pola[k]*polb[j];
 236:	0000                	unimp
 238:	0000                	unimp
 23a:	0000                	unimp
 23c:	0bde                	slli	s7,s7,0x17
 23e:	0000                	unimp
 240:	00c6                	slli	ra,ra,0x11
 242:	0000                	unimp
 244:	0e42                	slli	t3,t3,0x10
            for (k = size_a-1; k >= 0; k = k-1 ){
 246:	4430                	lw	a2,72(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	0288                	addi	a0,sp,320
 24a:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
 24e:	9504                	0x9504
            for (k = size_a-1; k >= 0; k = k-1 ){
 250:	58099707          	0x58099707
        for (j = size_b -1; j >= 0; j = j-1){
 254:	0181                	addi	gp,gp,0
 256:	0389                	addi	t2,t2,2
 258:	0694                	addi	a3,sp,832
 25a:	0896                	slli	a7,a7,0x5
            for (k = size_a-1; k >= 0; k = k-1 ){
 25c:	5002                	0x5002
 25e:	c10a                	sw	sp,128(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 260:	c842                	sw	a6,16(sp)
 262:	c942                	sw	a6,144(sp)
 264:	d242                	sw	a6,36(sp)
 266:	d342                	sw	a6,164(sp)
 268:	d442                	sw	a6,40(sp)
 26a:	d542                	sw	a6,168(sp)
 26c:	d642                	sw	a6,44(sp)
 26e:	d742                	sw	a6,172(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 270:	0e42                	slli	t3,t3,0x10
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 272:	4200                	lw	s0,0(a2)
 274:	0000000b          	0xb
 278:	002c                	addi	a1,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
 27a:	0000                	unimp
 27c:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 27e:	0000                	unimp
 280:	0ea0                	addi	s0,sp,856
 282:	0000                	unimp
 284:	0138                	addi	a4,sp,136
            line[i][j] = line[i][j] % mod;
 286:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 288:	0e44                	addi	s1,sp,788
 28a:	08b0                	addi	a2,sp,88
            line[i][j] = line[i][j] % mod;
 28c:	815e                	mv	sp,s7
 28e:	8801                	andi	s0,s0,0
 290:	8902                	jr	s2
 292:	03049203          	lh	tp,48(s1)
        for(j = 0; j < size_a + size_b -1; ++j){
 296:	00f8                	addi	a4,sp,76
    for (i = 0; i < size_b; ++i){
 298:	c10a                	sw	sp,128(sp)
 29a:	c844                	sw	s1,20(s0)
 29c:	c944                	sw	s1,20(a0)
 29e:	d244                	sw	s1,36(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 2a0:	0e46                	slli	t3,t3,0x11
 2a2:	4200                	lw	s0,0(a2)
            product[j] += line[i][j];
 2a4:	0000000b          	0xb

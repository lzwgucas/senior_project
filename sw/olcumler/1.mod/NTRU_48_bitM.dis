
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  7c:	4890006f          	j	d04 <default_exc_handler>
  80:	4890006f          	j	d08 <reset_handler>
  84:	4810006f          	j	d04 <default_exc_handler>
  88:	47d0006f          	j	d04 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_mod>:
////////////////CUSTOM INSTRUCTION SET///////////////


void instr_mod(unsigned int *a1, unsigned int mod) {

    asm volatile(
      8c:	0cb5750b          	0xcb5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(mod)			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
      90:	8082                	ret

00000092 <array_mod>:
    ////// bu kod arrayin uzunlugunu ücüncü instruction operand olarak gonderemedigimiz icin var. //////////
    ////// üc sayisi custom modülün dondürdügü eleman sayisindan geliyor. bizim ebob'umuz 3 oldugu icin 3 secildi./////
    ///// ebob(54(N+1),105(N+N-1)) = 3
int i = 0;

    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78d63          	beq	a5,a3,d4 <array_mod+0x42>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_mod+0x20>
      a4:	e7b9                	bnez	a5,f2 <array_mod+0x60>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
    asm volatile(
      aa:	46b1                	li	a3,12
            for (i = 0; i < (length / 3); i++) {
      ac:	04c7c463          	blt	a5,a2,f4 <array_mod+0x62>
      b0:	8082                	ret
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
    asm volatile(
      bc:	4831                	li	a6,12
            for (i = 0; i < ((length-2) / 3); i++) {
      be:	04d7c963          	blt	a5,a3,110 <array_mod+0x7e>
                instr_mod((unsigned int *) &a1[3 * i], (unsigned int) mod);
            }
            a1[length-1] = a1[length-1] % mod;
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c50733          	add	a4,a0,a2
      ca:	431c                	lw	a5,0(a4)
      cc:	02b7e7b3          	rem	a5,a5,a1
      d0:	c31c                	sw	a5,0(a4)
      d2:	a811                	j	e6 <array_mod+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	fff60693          	addi	a3,a2,-1
      d8:	02e6c6b3          	div	a3,a3,a4
      dc:	4781                	li	a5,0
    asm volatile(
      de:	4831                	li	a6,12
            for (i = 0; i < ((length-1) / 3); i++) {
      e0:	02d7c163          	blt	a5,a3,102 <array_mod+0x70>
            a1[length-1] = a1[length-1] % mod;
      e4:	060a                	slli	a2,a2,0x2
            a1[length-2] = a1[length-2] % mod;
      e6:	1671                	addi	a2,a2,-4
      e8:	962a                	add	a2,a2,a0
      ea:	421c                	lw	a5,0(a2)
      ec:	02b7e5b3          	rem	a1,a5,a1
      f0:	c20c                	sw	a1,0(a2)
	    break;
    } //end of switch case
} //end of function
      f2:	8082                	ret
    asm volatile(
      f4:	02d78733          	mul	a4,a5,a3
      f8:	972a                	add	a4,a4,a0
      fa:	0cb7770b          	0xcb7770b
            for (i = 0; i < (length / 3); i++) {
      fe:	0785                	addi	a5,a5,1
     100:	b775                	j	ac <array_mod+0x1a>
    asm volatile(
     102:	03078733          	mul	a4,a5,a6
     106:	972a                	add	a4,a4,a0
     108:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-1) / 3); i++) {
     10c:	0785                	addi	a5,a5,1
     10e:	bfc9                	j	e0 <array_mod+0x4e>
    asm volatile(
     110:	03078733          	mul	a4,a5,a6
     114:	972a                	add	a4,a4,a0
     116:	0cb7770b          	0xcb7770b
            for (i = 0; i < ((length-2) / 3); i++) {
     11a:	0785                	addi	a5,a5,1
     11c:	b74d                	j	be <array_mod+0x2c>

0000011e <polymult>:

/////////////////////////////////////////////////


int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	715d                	addi	sp,sp,-80
     120:	de4e                	sw	s3,60(sp)
     122:	d462                	sw	s8,40(sp)
     124:	00269993          	slli	s3,a3,0x2
     128:	8c3a                	mv	s8,a4

    int line[size_b][size_a + size_b];
     12a:	00d58733          	add	a4,a1,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	dc52                	sw	s4,56(sp)
     130:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     132:	fff70a13          	addi	s4,a4,-1
     136:	00271b93          	slli	s7,a4,0x2
     13a:	03370733          	mul	a4,a4,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13e:	c4a2                	sw	s0,72(sp)
     140:	c2a6                	sw	s1,68(sp)
     142:	0880                	addi	s0,sp,80
     144:	c0ca                	sw	s2,64(sp)
     146:	da56                	sw	s5,52(sp)
     148:	d85a                	sw	s6,48(sp)
     14a:	d266                	sw	s9,36(sp)
     14c:	d06a                	sw	s10,32(sp)
     14e:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     150:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	c686                	sw	ra,76(sp)
    int line[size_b][size_a + size_b];
     154:	9b41                	andi	a4,a4,-16
     156:	40e10133          	sub	sp,sp,a4
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     15a:	00259713          	slli	a4,a1,0x2
     15e:	073d                	addi	a4,a4,15
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     160:	8936                	mv	s2,a3
    int line[size_b][size_a + size_b];
     162:	fff68d13          	addi	s10,a3,-1
    int pola[size_a];
     166:	9b41                	andi	a4,a4,-16
    int polb[size_b];
     168:	00f98693          	addi	a3,s3,15
    int line[size_b][size_a + size_b];
     16c:	8d8a                	mv	s11,sp
    int polb[size_b];
     16e:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     170:	40e10133          	sub	sp,sp,a4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     174:	faf42c23          	sw	a5,-72(s0)
    int pola[size_a];
     178:	8c8a                	mv	s9,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     17a:	002bd793          	srli	a5,s7,0x2
    int polb[size_b];
     17e:	40d10133          	sub	sp,sp,a3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     182:	8832                	mv	a6,a2
    int pola[size_a];
     184:	fff58b13          	addi	s6,a1,-1
    int polb[size_b];
     188:	848a                	mv	s1,sp
            line[i][j] = 0;
     18a:	faf42e23          	sw	a5,-68(s0)
     18e:	8aee                	mv	s5,s11
    for (i = 0; i < size_b; ++i){
     190:	88ee                	mv	a7,s11
     192:	4601                	li	a2,0
            product[j] = 0;
     194:	00001e97          	auipc	t4,0x1
     198:	038e8e93          	addi	t4,t4,56 # 11cc <_bss_start>
    for (i = 0; i < size_b; ++i){
     19c:	07264063          	blt	a2,s2,1fc <polymult+0xde>
        }
    }

    // make mod calculations
    for (i = 0; i < size_a; ++i){
     1a0:	4681                	li	a3,0
     1a2:	06b6c063          	blt	a3,a1,202 <polymult+0xe4>
        pola[i] = a[i];
    }

	array_mod(pola,mod,size_a);
     1a6:	862e                	mv	a2,a1
     1a8:	8566                	mv	a0,s9
     1aa:	85e2                	mv	a1,s8
     1ac:	fb042a23          	sw	a6,-76(s0)
     1b0:	35cd                	jal	92 <array_mod>

    for (i = 0; i < size_b; ++i){
     1b2:	fb442803          	lw	a6,-76(s0)
     1b6:	4681                	li	a3,0
     1b8:	0526cf63          	blt	a3,s2,216 <polymult+0xf8>
        polb[i] = b[i];
    }

	array_mod(polb,mod,size_b);
     1bc:	8526                	mv	a0,s1
     1be:	864a                	mv	a2,s2
     1c0:	85e2                	mv	a1,s8
     1c2:	3dc1                	jal	92 <array_mod>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1c4:	fb842783          	lw	a5,-72(s0)
     1c8:	4685                	li	a3,1
     1ca:	94ce                	add	s1,s1,s3
     1cc:	04d78e63          	beq	a5,a3,228 <polymult+0x10a>
     1d0:	19f1                	addi	s3,s3,-4
     1d2:	ffcb8593          	addi	a1,s7,-4
     1d6:	99ee                	add	s3,s3,s11
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1d8:	040d4b63          	bltz	s10,22e <polymult+0x110>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1dc:	86da                	mv	a3,s6
     1de:	a8f1                	j	2ba <polymult+0x19c>
            product[j] = 0;
     1e0:	00269e13          	slli	t3,a3,0x2
     1e4:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     1e6:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     1ea:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     1ee:	0685                	addi	a3,a3,1
     1f0:	0311                	addi	t1,t1,4
     1f2:	ff46c7e3          	blt	a3,s4,1e0 <polymult+0xc2>
    for (i = 0; i < size_b; ++i){
     1f6:	0605                	addi	a2,a2,1
     1f8:	98de                	add	a7,a7,s7
     1fa:	b74d                	j	19c <polymult+0x7e>
     1fc:	8346                	mv	t1,a7
        for(j = 0; j < size_a + size_b -1; ++j){
     1fe:	4681                	li	a3,0
     200:	bfcd                	j	1f2 <polymult+0xd4>
        pola[i] = a[i];
     202:	00269613          	slli	a2,a3,0x2
     206:	00cc88b3          	add	a7,s9,a2
     20a:	962a                	add	a2,a2,a0
     20c:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_a; ++i){
     20e:	0685                	addi	a3,a3,1
        pola[i] = a[i];
     210:	00c8a023          	sw	a2,0(a7)
    for (i = 0; i < size_a; ++i){
     214:	b779                	j	1a2 <polymult+0x84>
        polb[i] = b[i];
     216:	00269613          	slli	a2,a3,0x2
     21a:	00c485b3          	add	a1,s1,a2
     21e:	9642                	add	a2,a2,a6
     220:	4210                	lw	a2,0(a2)
    for (i = 0; i < size_b; ++i){
     222:	0685                	addi	a3,a3,1
        polb[i] = b[i];
     224:	c190                	sw	a2,0(a1)
    for (i = 0; i < size_b; ++i){
     226:	bf49                	j	1b8 <polymult+0x9a>
    if(star_mult == 1){
     228:	85ee                	mv	a1,s11
        for (j = size_b -1; j >= 0; j = j-1){
     22a:	060d5a63          	bgez	s10,29e <polymult+0x180>
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	4481                	li	s1,0
            }
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
     230:	0924cb63          	blt	s1,s2,2c6 <polymult+0x1a8>
     234:	00001697          	auipc	a3,0x1
     238:	f9868693          	addi	a3,a3,-104 # 11cc <_bss_start>
        array_mod(line[i],mod,(size_a+size_b-1));
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     23c:	4701                	li	a4,0
     23e:	0b474c63          	blt	a4,s4,2f6 <polymult+0x1d8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    array_mod(product,mod,size_a+size_b-1);
     242:	8652                	mv	a2,s4
     244:	85e2                	mv	a1,s8
     246:	00001517          	auipc	a0,0x1
     24a:	f8650513          	addi	a0,a0,-122 # 11cc <_bss_start>
     24e:	3591                	jal	92 <array_mod>

    return_address1 = &product[0];

    return return_address1;
}
     250:	fb040113          	addi	sp,s0,-80
     254:	40b6                	lw	ra,76(sp)
     256:	4426                	lw	s0,72(sp)
     258:	4496                	lw	s1,68(sp)
     25a:	4906                	lw	s2,64(sp)
     25c:	59f2                	lw	s3,60(sp)
     25e:	5a62                	lw	s4,56(sp)
     260:	5ad2                	lw	s5,52(sp)
     262:	5b42                	lw	s6,48(sp)
     264:	5bb2                	lw	s7,44(sp)
     266:	5c22                	lw	s8,40(sp)
     268:	5c92                	lw	s9,36(sp)
     26a:	5d02                	lw	s10,32(sp)
     26c:	4df2                	lw	s11,28(sp)
     26e:	00001517          	auipc	a0,0x1
     272:	f5e50513          	addi	a0,a0,-162 # 11cc <_bss_start>
     276:	6161                	addi	sp,sp,80
     278:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     27a:	00269613          	slli	a2,a3,0x2
     27e:	00c58533          	add	a0,a1,a2
     282:	9666                	add	a2,a2,s9
     284:	4210                	lw	a2,0(a2)
     286:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     28a:	16fd                	addi	a3,a3,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     28c:	03060633          	mul	a2,a2,a6
     290:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	fe06d4e3          	bgez	a3,27a <polymult+0x15c>
        for (j = size_b -1; j >= 0; j = j-1){
     296:	1d7d                	addi	s10,s10,-1
     298:	14f1                	addi	s1,s1,-4
     29a:	95de                	add	a1,a1,s7
     29c:	b779                	j	22a <polymult+0x10c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	86da                	mv	a3,s6
     2a0:	bfcd                	j	292 <polymult+0x174>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a2:	00269613          	slli	a2,a3,0x2
     2a6:	00c98533          	add	a0,s3,a2
     2aa:	9666                	add	a2,a2,s9
     2ac:	4210                	lw	a2,0(a2)
     2ae:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b2:	16fd                	addi	a3,a3,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b4:	03060633          	mul	a2,a2,a6
     2b8:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ba:	fe06d4e3          	bgez	a3,2a2 <polymult+0x184>
        for (j = size_b -1; j >= 0; j = j-1){
     2be:	1d7d                	addi	s10,s10,-1
     2c0:	14f1                	addi	s1,s1,-4
     2c2:	99ae                	add	s3,s3,a1
     2c4:	bf11                	j	1d8 <polymult+0xba>
        array_mod(line[i],mod,(size_a+size_b-1));
     2c6:	8556                	mv	a0,s5
     2c8:	8652                	mv	a2,s4
     2ca:	85e2                	mv	a1,s8
     2cc:	33d9                	jal	92 <array_mod>
    for (i = 0; i < size_b; ++i){
     2ce:	0485                	addi	s1,s1,1
     2d0:	9ade                	add	s5,s5,s7
     2d2:	bfb9                	j	230 <polymult+0x112>
            product[j] += line[i][j];
     2d4:	fbc42783          	lw	a5,-68(s0)
     2d8:	428c                	lw	a1,0(a3)
     2da:	02f607b3          	mul	a5,a2,a5
        for(i = 0; i < size_b; ++i){
     2de:	0605                	addi	a2,a2,1
            product[j] += line[i][j];
     2e0:	97ba                	add	a5,a5,a4
     2e2:	078a                	slli	a5,a5,0x2
     2e4:	97ee                	add	a5,a5,s11
     2e6:	439c                	lw	a5,0(a5)
     2e8:	97ae                	add	a5,a5,a1
     2ea:	c29c                	sw	a5,0(a3)
        for(i = 0; i < size_b; ++i){
     2ec:	ff2644e3          	blt	a2,s2,2d4 <polymult+0x1b6>
    for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0705                	addi	a4,a4,1
     2f2:	0691                	addi	a3,a3,4
     2f4:	b7a9                	j	23e <polymult+0x120>
        for(i = 0; i < size_b; ++i){
     2f6:	4601                	li	a2,0
     2f8:	bfd5                	j	2ec <polymult+0x1ce>

000002fa <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
   

    int line[size_b][size_a + size_b];
     2fa:	00d587b3          	add	a5,a1,a3
     2fe:	00269813          	slli	a6,a3,0x2
     302:	00279313          	slli	t1,a5,0x2
     306:	fff78e93          	addi	t4,a5,-1
     30a:	030787b3          	mul	a5,a5,a6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	1101                	addi	sp,sp,-32
     310:	ce22                	sw	s0,28(sp)
     312:	cc26                	sw	s1,24(sp)
     314:	ca4a                	sw	s2,20(sp)
     316:	c84e                	sw	s3,16(sp)
     318:	c25a                	sw	s6,4(sp)
     31a:	c652                	sw	s4,12(sp)
     31c:	c456                	sw	s5,8(sp)
     31e:	1000                	addi	s0,sp,32
    int line[size_b][size_a + size_b];
     320:	07bd                	addi	a5,a5,15
     322:	9bc1                	andi	a5,a5,-16
     324:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     328:	00259793          	slli	a5,a1,0x2
     32c:	07bd                	addi	a5,a5,15
     32e:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     330:	8e0a                	mv	t3,sp
    int pola[size_a];
     332:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     336:	00f80793          	addi	a5,a6,15
     33a:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     33c:	828a                	mv	t0,sp
    int polb[size_b];
     33e:	40f10133          	sub	sp,sp,a5
    int line[size_b][size_a + size_b];
     342:	fff68893          	addi	a7,a3,-1
    int pola[size_a];
     346:	fff58f93          	addi	t6,a1,-1
    int polb[size_b];
     34a:	878a                	mv	a5,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     34c:	00235f13          	srli	t5,t1,0x2
     350:	8972                	mv	s2,t3
    for (i = 0; i < size_b; ++i){
     352:	89f2                	mv	s3,t3
     354:	4481                	li	s1,0
            product2[j] = 0;
     356:	00001b17          	auipc	s6,0x1
     35a:	0ceb0b13          	addi	s6,s6,206 # 1424 <product2>
    for (i = 0; i < size_b; ++i){
     35e:	04d4c163          	blt	s1,a3,3a0 <polymult2+0xa6>
        }
    }

    for(i = 0; i < size_a; ++i){
     362:	4381                	li	t2,0
     364:	04b3c163          	blt	t2,a1,3a6 <polymult2+0xac>
        pola[i] = a[i];
    }


    for(i = 0; i < size_b; ++i){
     368:	4581                	li	a1,0
     36a:	04d5c863          	blt	a1,a3,3ba <polymult2+0xc0>
        polb[i] = b[i];
    }


    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     36e:	4605                	li	a2,1
     370:	97c2                	add	a5,a5,a6
     372:	06c70f63          	beq	a4,a2,3f0 <polymult2+0xf6>
     376:	1871                	addi	a6,a6,-4
     378:	1371                	addi	t1,t1,-4
     37a:	9872                	add	a6,a6,t3
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	0608cc63          	bltz	a7,3f4 <polymult2+0xfa>
            for (k = size_a-1; k >= 0; k = k-1 ){
     380:	877e                	mv	a4,t6
     382:	a86d                	j	43c <polymult2+0x142>
            product2[j] = 0;
     384:	00239a93          	slli	s5,t2,0x2
     388:	9ada                	add	s5,s5,s6
            line[i][j] = 0;
     38a:	000a2023          	sw	zero,0(s4)
            product2[j] = 0;
     38e:	000aa023          	sw	zero,0(s5)
        for(j = 0; j < size_a + size_b -1; ++j){
     392:	0385                	addi	t2,t2,1
     394:	0a11                	addi	s4,s4,4
     396:	ffd3c7e3          	blt	t2,t4,384 <polymult2+0x8a>
    for (i = 0; i < size_b; ++i){
     39a:	0485                	addi	s1,s1,1
     39c:	999a                	add	s3,s3,t1
     39e:	b7c1                	j	35e <polymult2+0x64>
     3a0:	8a4e                	mv	s4,s3
        for(j = 0; j < size_a + size_b -1; ++j){
     3a2:	4381                	li	t2,0
     3a4:	bfcd                	j	396 <polymult2+0x9c>
        pola[i] = a[i];
     3a6:	00239493          	slli	s1,t2,0x2
     3aa:	009289b3          	add	s3,t0,s1
     3ae:	94aa                	add	s1,s1,a0
     3b0:	4084                	lw	s1,0(s1)
    for(i = 0; i < size_a; ++i){
     3b2:	0385                	addi	t2,t2,1
        pola[i] = a[i];
     3b4:	0099a023          	sw	s1,0(s3)
    for(i = 0; i < size_a; ++i){
     3b8:	b775                	j	364 <polymult2+0x6a>
        polb[i] = b[i];
     3ba:	00259513          	slli	a0,a1,0x2
     3be:	00a783b3          	add	t2,a5,a0
     3c2:	9532                	add	a0,a0,a2
     3c4:	4108                	lw	a0,0(a0)
    for(i = 0; i < size_b; ++i){
     3c6:	0585                	addi	a1,a1,1
        polb[i] = b[i];
     3c8:	00a3a023          	sw	a0,0(t2)
    for(i = 0; i < size_b; ++i){
     3cc:	bf79                	j	36a <polymult2+0x70>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ce:	00271613          	slli	a2,a4,0x2
     3d2:	00c905b3          	add	a1,s2,a2
     3d6:	9616                	add	a2,a2,t0
     3d8:	4210                	lw	a2,0(a2)
     3da:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3de:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3e0:	02a60633          	mul	a2,a2,a0
     3e4:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	fe0754e3          	bgez	a4,3ce <polymult2+0xd4>
        for (j = size_b -1; j >= 0; j = j-1){
     3ea:	18fd                	addi	a7,a7,-1
     3ec:	17f1                	addi	a5,a5,-4
     3ee:	991a                	add	s2,s2,t1
     3f0:	0208d863          	bgez	a7,420 <polymult2+0x126>
     3f4:	00001617          	auipc	a2,0x1
     3f8:	03060613          	addi	a2,a2,48 # 1424 <product2>
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
        for(i = 0; i < size_b; ++i){
     3fc:	4701                	li	a4,0
    for(j = 0; j < size_a + size_b -1; ++j){
     3fe:	07d74463          	blt	a4,t4,466 <polymult2+0x16c>


    return_address2 = &product2[0];

    return return_address2;
}
     402:	fe040113          	addi	sp,s0,-32
     406:	4472                	lw	s0,28(sp)
     408:	44e2                	lw	s1,24(sp)
     40a:	4952                	lw	s2,20(sp)
     40c:	49c2                	lw	s3,16(sp)
     40e:	4a32                	lw	s4,12(sp)
     410:	4aa2                	lw	s5,8(sp)
     412:	4b12                	lw	s6,4(sp)
     414:	00001517          	auipc	a0,0x1
     418:	01050513          	addi	a0,a0,16 # 1424 <product2>
     41c:	6105                	addi	sp,sp,32
     41e:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     420:	877e                	mv	a4,t6
     422:	b7d1                	j	3e6 <polymult2+0xec>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     424:	00271613          	slli	a2,a4,0x2
     428:	00c805b3          	add	a1,a6,a2
     42c:	9616                	add	a2,a2,t0
     42e:	4210                	lw	a2,0(a2)
     430:	ffc7a503          	lw	a0,-4(a5)
            for (k = size_a-1; k >= 0; k = k-1 ){
     434:	177d                	addi	a4,a4,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     436:	02a60633          	mul	a2,a2,a0
     43a:	c190                	sw	a2,0(a1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     43c:	fe0754e3          	bgez	a4,424 <polymult2+0x12a>
        for (j = size_b -1; j >= 0; j = j-1){
     440:	18fd                	addi	a7,a7,-1
     442:	17f1                	addi	a5,a5,-4
     444:	981a                	add	a6,a6,t1
     446:	bf1d                	j	37c <polymult2+0x82>
            product2[j] += line[i][j];
     448:	03e587b3          	mul	a5,a1,t5
     44c:	4208                	lw	a0,0(a2)
        for(i = 0; i < size_b; ++i){
     44e:	0585                	addi	a1,a1,1
            product2[j] += line[i][j];
     450:	97ba                	add	a5,a5,a4
     452:	078a                	slli	a5,a5,0x2
     454:	97f2                	add	a5,a5,t3
     456:	439c                	lw	a5,0(a5)
     458:	97aa                	add	a5,a5,a0
     45a:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     45c:	fed5c6e3          	blt	a1,a3,448 <polymult2+0x14e>
    for(j = 0; j < size_a + size_b -1; ++j){
     460:	0705                	addi	a4,a4,1
     462:	0611                	addi	a2,a2,4
     464:	bf69                	j	3fe <polymult2+0x104>
        for(i = 0; i < size_b; ++i){
     466:	4581                	li	a1,0
     468:	bfd5                	j	45c <polymult2+0x162>

0000046a <polydiv>:
 

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     46a:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46e:	7139                	addi	sp,sp,-64
    int v[size_N];
     470:	07bd                	addi	a5,a5,15
     472:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	dc22                	sw	s0,56(sp)
     476:	da26                	sw	s1,52(sp)
     478:	d84a                	sw	s2,48(sp)
     47a:	d64e                	sw	s3,44(sp)
     47c:	d452                	sw	s4,40(sp)
     47e:	d256                	sw	s5,36(sp)
     480:	d05a                	sw	s6,32(sp)
     482:	ce5e                	sw	s7,28(sp)
     484:	cc62                	sw	s8,24(sp)
     486:	ca66                	sw	s9,20(sp)
     488:	c86a                	sw	s10,16(sp)
     48a:	de06                	sw	ra,60(sp)
     48c:	c66e                	sw	s11,12(sp)
     48e:	0080                	addi	s0,sp,64
    int v[size_N];
     490:	40f10133          	sub	sp,sp,a5
     494:	8b0a                	mv	s6,sp
    int q[size_N];
     496:	40f10133          	sub	sp,sp,a5
     49a:	8b8a                	mv	s7,sp
    int *product;
    int num_temp[size_N];
     49c:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     4a0:	00269793          	slli	a5,a3,0x2
     4a4:	07bd                	addi	a5,a5,15
     4a6:	9bc1                	andi	a5,a5,-16
    int num_temp[size_N];
     4a8:	890a                	mv	s2,sp
    int denum_temp[size_D];
     4aa:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ae:	84ae                	mv	s1,a1
     4b0:	8c32                	mv	s8,a2
     4b2:	8a36                	mv	s4,a3
     4b4:	89ba                	mv	s3,a4
    int v[size_N];
     4b6:	fff58d13          	addi	s10,a1,-1
    int denum_temp[size_D];
     4ba:	fff68a93          	addi	s5,a3,-1
     4be:	8c8a                	mv	s9,sp


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     4c0:	4781                	li	a5,0
     4c2:	0297cd63          	blt	a5,s1,4fc <polydiv+0x92>
        num_temp[i] = num[i];
    }
    
    
        array_mod(num_temp, mod, size_N);
     4c6:	8626                	mv	a2,s1
     4c8:	85ce                	mv	a1,s3
     4ca:	854a                	mv	a0,s2
     4cc:	36d9                	jal	92 <array_mod>
    


    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     4ce:	4781                	li	a5,0
     4d0:	0347cf63          	blt	a5,s4,50e <polydiv+0xa4>
        denum_temp[i] = denum[i];
    }

	array_mod(denum_temp,mod,size_D);
     4d4:	8652                	mv	a2,s4
     4d6:	85ce                	mv	a1,s3
     4d8:	8566                	mv	a0,s9
     4da:	3e65                	jal	92 <array_mod>

    for (i = 0; i < size_N; ++i){
     4dc:	4781                	li	a5,0
     4de:	0497c163          	blt	a5,s1,520 <polydiv+0xb6>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	002a9793          	slli	a5,s5,0x2
     4e6:	97e6                	add	a5,a5,s9
     4e8:	4398                	lw	a4,0(a5)
     4ea:	040ad663          	bgez	s5,536 <polydiv+0xcc>
    for (i = 0; i < size_N; ++i){
     4ee:	4781                	li	a5,0
     4f0:	4c01                	li	s8,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4f2:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4f4:	053c4463          	blt	s8,s3,53c <polydiv+0xd2>
     4f8:	87ea                	mv	a5,s10
     4fa:	a891                	j	54e <polydiv+0xe4>
        num_temp[i] = num[i];
     4fc:	00279713          	slli	a4,a5,0x2
     500:	00e906b3          	add	a3,s2,a4
     504:	972a                	add	a4,a4,a0
     506:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_N; ++i){
     508:	0785                	addi	a5,a5,1
        num_temp[i] = num[i];
     50a:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_N; ++i){
     50c:	bf5d                	j	4c2 <polydiv+0x58>
        denum_temp[i] = denum[i];
     50e:	00279713          	slli	a4,a5,0x2
     512:	00ec86b3          	add	a3,s9,a4
     516:	9762                	add	a4,a4,s8
     518:	4318                	lw	a4,0(a4)
    for (i = 0; i < size_D; ++i) {
     51a:	0785                	addi	a5,a5,1
        denum_temp[i] = denum[i];
     51c:	c298                	sw	a4,0(a3)
    for (i = 0; i < size_D; ++i) {
     51e:	bf4d                	j	4d0 <polydiv+0x66>
        q[i] = 0;
     520:	00279713          	slli	a4,a5,0x2
     524:	00eb86b3          	add	a3,s7,a4
        v[i] = 0;
     528:	975a                	add	a4,a4,s6
        q[i] = 0;
     52a:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     52e:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     532:	0785                	addi	a5,a5,1
     534:	b76d                	j	4de <polydiv+0x74>
        if( denum_temp[i] != 0 )
     536:	ff45                	bnez	a4,4ee <polydiv+0x84>
    for (i = size_D-1; i >= 0; i = i-1){
     538:	1afd                	addi	s5,s5,-1
     53a:	b765                	j	4e2 <polydiv+0x78>
        if ( (b_N*u)%mod == 1 )
     53c:	0337e633          	rem	a2,a5,s3
     540:	97ba                	add	a5,a5,a4
     542:	fad60be3          	beq	a2,a3,4f8 <polydiv+0x8e>
    for (u = 0; u < mod; ++u){
     546:	0c05                	addi	s8,s8,1
     548:	b775                	j	4f4 <polydiv+0x8a>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     54a:	eb01                	bnez	a4,55a <polydiv+0xf0>
    for (i = size_N-1; i >= 0; i = i-1){
     54c:	17fd                	addi	a5,a5,-1
     54e:	00279713          	slli	a4,a5,0x2
     552:	974a                	add	a4,a4,s2
     554:	4318                	lw	a4,0(a4)
     556:	fe07dae3          	bgez	a5,54a <polydiv+0xe0>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     55a:	0557d663          	bge	a5,s5,5a6 <polydiv+0x13c>
        }


    } //End While-1

    for(i = 0; i < size_N; ++i){
     55e:	4781                	li	a5,0
        result[i] = q[i];
     560:	00001697          	auipc	a3,0x1
     564:	11c68693          	addi	a3,a3,284 # 167c <result>
    for(i = 0; i < size_N; ++i){
     568:	0e97c063          	blt	a5,s1,648 <polydiv+0x1de>
    }
    for(i = size_N; i < (2*size_N); ++i){
     56c:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     570:	00001697          	auipc	a3,0x1
     574:	10c68693          	addi	a3,a3,268 # 167c <result>
    for(i = size_N; i < (2*size_N); ++i){
     578:	0ee4c163          	blt	s1,a4,65a <polydiv+0x1f0>
    }

    return_address3 = &result[0];

    return return_address3;
}
     57c:	fc040113          	addi	sp,s0,-64
     580:	50f2                	lw	ra,60(sp)
     582:	5462                	lw	s0,56(sp)
     584:	54d2                	lw	s1,52(sp)
     586:	5942                	lw	s2,48(sp)
     588:	59b2                	lw	s3,44(sp)
     58a:	5a22                	lw	s4,40(sp)
     58c:	5a92                	lw	s5,36(sp)
     58e:	5b02                	lw	s6,32(sp)
     590:	4bf2                	lw	s7,28(sp)
     592:	4c62                	lw	s8,24(sp)
     594:	4cd2                	lw	s9,20(sp)
     596:	4d42                	lw	s10,16(sp)
     598:	4db2                	lw	s11,12(sp)
     59a:	00001517          	auipc	a0,0x1
     59e:	0e250513          	addi	a0,a0,226 # 167c <result>
     5a2:	6121                	addi	sp,sp,64
     5a4:	8082                	ret
        v[(d-d2)] = u*r_d;
     5a6:	03870733          	mul	a4,a4,s8
     5aa:	415787b3          	sub	a5,a5,s5
     5ae:	078a                	slli	a5,a5,0x2
     5b0:	97da                	add	a5,a5,s6
        array_mod(v, mod, size_N);
     5b2:	8626                	mv	a2,s1
     5b4:	85ce                	mv	a1,s3
     5b6:	855a                	mv	a0,s6
        v[(d-d2)] = u*r_d;
     5b8:	c398                	sw	a4,0(a5)
        array_mod(v, mod, size_N);
     5ba:	3ce1                	jal	92 <array_mod>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5bc:	4781                	li	a5,0
     5be:	874e                	mv	a4,s3
     5c0:	86d2                	mv	a3,s4
     5c2:	865a                	mv	a2,s6
     5c4:	85d2                	mv	a1,s4
     5c6:	8566                	mv	a0,s9
     5c8:	3e99                	jal	11e <polymult>
        array_mod(product, mod, size_N);
     5ca:	8626                	mv	a2,s1
     5cc:	85ce                	mv	a1,s3
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ce:	8daa                	mv	s11,a0
        array_mod(product, mod, size_N);
     5d0:	34c9                	jal	92 <array_mod>
        for (i = 0; i < size_N; ++i){
     5d2:	874a                	mv	a4,s2
     5d4:	4781                	li	a5,0
     5d6:	0297c763          	blt	a5,s1,604 <polydiv+0x19a>
        array_mod(num_temp, mod, size_N);
     5da:	8626                	mv	a2,s1
     5dc:	85ce                	mv	a1,s3
     5de:	854a                	mv	a0,s2
     5e0:	3c4d                	jal	92 <array_mod>
        for(i = 0; i < size_N; ++i){
     5e2:	875e                	mv	a4,s7
     5e4:	4781                	li	a5,0
     5e6:	0297ca63          	blt	a5,s1,61a <polydiv+0x1b0>
        array_mod(q, mod, size_N);
     5ea:	8626                	mv	a2,s1
     5ec:	85ce                	mv	a1,s3
     5ee:	855e                	mv	a0,s7
     5f0:	344d                	jal	92 <array_mod>
        for (i = size_N-1; i >= 0; i = i-1){
     5f2:	87ea                	mv	a5,s10
     5f4:	00279713          	slli	a4,a5,0x2
     5f8:	974a                	add	a4,a4,s2
     5fa:	4318                	lw	a4,0(a4)
     5fc:	0207da63          	bgez	a5,630 <polydiv+0x1c6>
     600:	4681                	li	a3,0
     602:	a081                	j	642 <polydiv+0x1d8>
            num_temp[i] = num_temp[i] - product[i];
     604:	00279613          	slli	a2,a5,0x2
     608:	966e                	add	a2,a2,s11
     60a:	4314                	lw	a3,0(a4)
     60c:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     60e:	0785                	addi	a5,a5,1
     610:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     612:	8e91                	sub	a3,a3,a2
     614:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     618:	bf7d                	j	5d6 <polydiv+0x16c>
            q[i] = q[i] + v[i];
     61a:	00279613          	slli	a2,a5,0x2
     61e:	965a                	add	a2,a2,s6
     620:	4314                	lw	a3,0(a4)
     622:	4210                	lw	a2,0(a2)
        for(i = 0; i < size_N; ++i){
     624:	0785                	addi	a5,a5,1
     626:	0711                	addi	a4,a4,4
            q[i] = q[i] + v[i];
     628:	96b2                	add	a3,a3,a2
     62a:	fed72e23          	sw	a3,-4(a4)
        for(i = 0; i < size_N; ++i){
     62e:	bf65                	j	5e6 <polydiv+0x17c>
            if( num_temp[i] != 0 )
     630:	fb61                	bnez	a4,600 <polydiv+0x196>
        for (i = size_N-1; i >= 0; i = i-1){
     632:	17fd                	addi	a5,a5,-1
     634:	b7c1                	j	5f4 <polydiv+0x18a>
            v[i] = 0;
     636:	00269613          	slli	a2,a3,0x2
     63a:	965a                	add	a2,a2,s6
     63c:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     640:	0685                	addi	a3,a3,1
     642:	fe96cae3          	blt	a3,s1,636 <polydiv+0x1cc>
     646:	bf11                	j	55a <polydiv+0xf0>
        result[i] = q[i];
     648:	00279713          	slli	a4,a5,0x2
     64c:	00e68633          	add	a2,a3,a4
     650:	975e                	add	a4,a4,s7
     652:	4318                	lw	a4,0(a4)
    for(i = 0; i < size_N; ++i){
     654:	0785                	addi	a5,a5,1
        result[i] = q[i];
     656:	c218                	sw	a4,0(a2)
    for(i = 0; i < size_N; ++i){
     658:	bf01                	j	568 <polydiv+0xfe>
        result[i] = num_temp[i-size_N];
     65a:	00092603          	lw	a2,0(s2)
     65e:	00249793          	slli	a5,s1,0x2
     662:	97b6                	add	a5,a5,a3
     664:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     666:	0485                	addi	s1,s1,1
     668:	0911                	addi	s2,s2,4
     66a:	b739                	j	578 <polydiv+0x10e>

0000066c <ext_euclid>:
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
   

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     66c:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     670:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     672:	07bd                	addi	a5,a5,15
     674:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     676:	c4a2                	sw	s0,72(sp)
     678:	c2a6                	sw	s1,68(sp)
     67a:	c0ca                	sw	s2,64(sp)
     67c:	de4e                	sw	s3,60(sp)
     67e:	dc52                	sw	s4,56(sp)
     680:	da56                	sw	s5,52(sp)
     682:	d85a                	sw	s6,48(sp)
     684:	d65e                	sw	s7,44(sp)
     686:	d462                	sw	s8,40(sp)
     688:	d266                	sw	s9,36(sp)
     68a:	ce6e                	sw	s11,28(sp)
     68c:	c686                	sw	ra,76(sp)
     68e:	d06a                	sw	s10,32(sp)
     690:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     692:	40f10133          	sub	sp,sp,a5
     696:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     698:	40f10133          	sub	sp,sp,a5
     69c:	8a8a                	mv	s5,sp
    int ri[size];
     69e:	40f10133          	sub	sp,sp,a5
     6a2:	8c0a                	mv	s8,sp

    int ti_1[size]; // ti_1[0] = 1
     6a4:	40f10133          	sub	sp,sp,a5
     6a8:	8b0a                	mv	s6,sp
    int ti[size];
     6aa:	40f10133          	sub	sp,sp,a5
     6ae:	8c8a                	mv	s9,sp
    int qi_1[size];
     6b0:	40f10133          	sub	sp,sp,a5
     6b4:	8b8a                	mv	s7,sp
    int temp[size];
     6b6:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	84b6                	mv	s1,a3
     6bc:	8db2                	mv	s11,a2
    int ri_2[size]; // MX-ring poly, a
     6be:	fff60913          	addi	s2,a2,-1
    int temp[size];
     6c2:	8a0a                	mv	s4,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     6c4:	4781                	li	a5,0
     6c6:	4701                	li	a4,0
        ri_2[i] = polyR[i];
        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     6c8:	00001697          	auipc	a3,0x1
     6cc:	20c68693          	addi	a3,a3,524 # 18d4 <ti_2>
    for (i = 0; i < size; ++i) {
     6d0:	0fb74163          	blt	a4,s11,7b2 <ext_euclid+0x146>
    }
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     6d4:	4785                	li	a5,1
     6d6:	00fb2023          	sw	a5,0(s6)
        // make mod for ri_1
	array_mod(ri_1,mod,N+1);


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6da:	001d9793          	slli	a5,s11,0x1
     6de:	faf42e23          	sw	a5,-68(s0)
	
	array_mod(temp,mod,size);


        for (i = 0; i < N + 1; ++i) {
            ti[i] = ti_2[i] - temp[i];
     6e2:	00001d17          	auipc	s10,0x1
     6e6:	1f2d0d13          	addi	s10,s10,498 # 18d4 <ti_2>
	array_mod(ri_2,mod,N+1);
     6ea:	866e                	mv	a2,s11
     6ec:	85a6                	mv	a1,s1
     6ee:	854e                	mv	a0,s3
     6f0:	324d                	jal	92 <array_mod>
	array_mod(ri_1,mod,N+1);
     6f2:	866e                	mv	a2,s11
     6f4:	85a6                	mv	a1,s1
     6f6:	8556                	mv	a0,s5
     6f8:	3a69                	jal	92 <array_mod>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6fa:	8726                	mv	a4,s1
     6fc:	86ee                	mv	a3,s11
     6fe:	8656                	mv	a2,s5
     700:	85ee                	mv	a1,s11
     702:	854e                	mv	a0,s3
     704:	339d                	jal	46a <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     706:	8762                	mv	a4,s8
     708:	87ee                	mv	a5,s11
     70a:	fbc42683          	lw	a3,-68(s0)
     70e:	0cd7cd63          	blt	a5,a3,7e8 <ext_euclid+0x17c>
     712:	4781                	li	a5,0
        for (i = 0; i < N + 1; ++i) {
     714:	4701                	li	a4,0
     716:	0ee95263          	bge	s2,a4,7fa <ext_euclid+0x18e>
        array_mod(temp,mod,N+1);
     71a:	866e                	mv	a2,s11
     71c:	85a6                	mv	a1,s1
     71e:	8552                	mv	a0,s4
     720:	3a8d                	jal	92 <array_mod>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     722:	8726                	mv	a4,s1
     724:	86ee                	mv	a3,s11
     726:	8656                	mv	a2,s5
     728:	85ee                	mv	a1,s11
     72a:	8552                	mv	a0,s4
     72c:	3b3d                	jal	46a <polydiv>
        for (i = 0; i < N + 1; ++i) {
     72e:	4781                	li	a5,0
     730:	0ef95263          	bge	s2,a5,814 <ext_euclid+0x1a8>
	array_mod(qi_1,mod,size);
     734:	866e                	mv	a2,s11
     736:	85a6                	mv	a1,s1
     738:	855e                	mv	a0,s7
     73a:	3aa1                	jal	92 <array_mod>
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     73c:	4781                	li	a5,0
     73e:	8726                	mv	a4,s1
     740:	86ee                	mv	a3,s11
     742:	865a                	mv	a2,s6
     744:	85ee                	mv	a1,s11
     746:	855e                	mv	a0,s7
     748:	3ad9                	jal	11e <polymult>
        for (i = 0; i < N + 1; ++i) {
     74a:	4781                	li	a5,0
     74c:	0cf95d63          	bge	s2,a5,826 <ext_euclid+0x1ba>
	array_mod(temp,mod,size);
     750:	866e                	mv	a2,s11
     752:	85a6                	mv	a1,s1
     754:	8552                	mv	a0,s4
     756:	3a35                	jal	92 <array_mod>
        for (i = 0; i < N + 1; ++i) {
     758:	4781                	li	a5,0
     75a:	4701                	li	a4,0
     75c:	0ce95e63          	bge	s2,a4,838 <ext_euclid+0x1cc>
        }

        array_mod(ti,mod,N+1);
     760:	866e                	mv	a2,s11
     762:	85a6                	mv	a1,s1
     764:	8566                	mv	a0,s9
     766:	3235                	jal	92 <array_mod>

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

        for (i = 0; i < N + 1; ++i) {
     768:	4781                	li	a5,0
        controlR = 0;
     76a:	4701                	li	a4,0
        for (i = 0; i < N + 1; ++i) {
     76c:	4681                	li	a3,0
     76e:	0ed95263          	bge	s2,a3,852 <ext_euclid+0x1e6>
    while (controlR != 0) {
     772:	ff25                	bnez	a4,6ea <ext_euclid+0x7e>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     774:	4781                	li	a5,0
            if (((ri_2[0] * j) % mod) == 1)
     776:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     778:	1097cb63          	blt	a5,s1,88e <ext_euclid+0x222>
     77c:	00001617          	auipc	a2,0x1
     780:	15860613          	addi	a2,a2,344 # 18d4 <ti_2>
            if (ri_2[i] != 0)
                //	printf("** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! ***\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     784:	10e95f63          	bge	s2,a4,8a2 <ext_euclid+0x236>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     788:	fb040113          	addi	sp,s0,-80
     78c:	40b6                	lw	ra,76(sp)
     78e:	4426                	lw	s0,72(sp)
     790:	4496                	lw	s1,68(sp)
     792:	4906                	lw	s2,64(sp)
     794:	59f2                	lw	s3,60(sp)
     796:	5a62                	lw	s4,56(sp)
     798:	5ad2                	lw	s5,52(sp)
     79a:	5b42                	lw	s6,48(sp)
     79c:	5bb2                	lw	s7,44(sp)
     79e:	5c22                	lw	s8,40(sp)
     7a0:	5c92                	lw	s9,36(sp)
     7a2:	5d02                	lw	s10,32(sp)
     7a4:	4df2                	lw	s11,28(sp)
     7a6:	00001517          	auipc	a0,0x1
     7aa:	12e50513          	addi	a0,a0,302 # 18d4 <ti_2>
     7ae:	6161                	addi	sp,sp,80
     7b0:	8082                	ret
        ri_2[i] = polyR[i];
     7b2:	00f508b3          	add	a7,a0,a5
     7b6:	0008a883          	lw	a7,0(a7)
     7ba:	00f98633          	add	a2,s3,a5
    for (i = 0; i < size; ++i) {
     7be:	0705                	addi	a4,a4,1
        ri_2[i] = polyR[i];
     7c0:	01162023          	sw	a7,0(a2)
        ri_1[i] = polyf[i];
     7c4:	00f588b3          	add	a7,a1,a5
     7c8:	0008a883          	lw	a7,0(a7)
     7cc:	00fa8633          	add	a2,s5,a5
     7d0:	01162023          	sw	a7,0(a2)
        ti_2[i] = 0;
     7d4:	00f68633          	add	a2,a3,a5
     7d8:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     7dc:	00fb0633          	add	a2,s6,a5
     7e0:	00062023          	sw	zero,0(a2)
    for (i = 0; i < size; ++i) {
     7e4:	0791                	addi	a5,a5,4
     7e6:	b5ed                	j	6d0 <ext_euclid+0x64>
            ri[i - (N + 1)] = res[i];
     7e8:	00279693          	slli	a3,a5,0x2
     7ec:	96aa                	add	a3,a3,a0
     7ee:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f0:	0785                	addi	a5,a5,1
     7f2:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     7f4:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f8:	bf09                	j	70a <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
     7fa:	00f986b3          	add	a3,s3,a5
     7fe:	00fc05b3          	add	a1,s8,a5
     802:	4294                	lw	a3,0(a3)
     804:	418c                	lw	a1,0(a1)
     806:	00fa0633          	add	a2,s4,a5
        for (i = 0; i < N + 1; ++i) {
     80a:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     80c:	8e8d                	sub	a3,a3,a1
     80e:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     810:	0791                	addi	a5,a5,4
     812:	b711                	j	716 <ext_euclid+0xaa>
            qi_1[i] = res1[i];
     814:	00279713          	slli	a4,a5,0x2
     818:	00e506b3          	add	a3,a0,a4
     81c:	4294                	lw	a3,0(a3)
     81e:	975e                	add	a4,a4,s7
        for (i = 0; i < N + 1; ++i) {
     820:	0785                	addi	a5,a5,1
            qi_1[i] = res1[i];
     822:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     824:	b731                	j	730 <ext_euclid+0xc4>
            temp[i] = res2[i];
     826:	00279713          	slli	a4,a5,0x2
     82a:	00e506b3          	add	a3,a0,a4
     82e:	4294                	lw	a3,0(a3)
     830:	9752                	add	a4,a4,s4
        for (i = 0; i < N + 1; ++i) {
     832:	0785                	addi	a5,a5,1
            temp[i] = res2[i];
     834:	c314                	sw	a3,0(a4)
        for (i = 0; i < N + 1; ++i) {
     836:	bf19                	j	74c <ext_euclid+0xe0>
            ti[i] = ti_2[i] - temp[i];
     838:	00fd06b3          	add	a3,s10,a5
     83c:	00fa05b3          	add	a1,s4,a5
     840:	4294                	lw	a3,0(a3)
     842:	418c                	lw	a1,0(a1)
     844:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     848:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     84a:	8e8d                	sub	a3,a3,a1
     84c:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     84e:	0791                	addi	a5,a5,4
     850:	b731                	j	75c <ext_euclid+0xf0>
            ri_2[i] = ri_1[i];
     852:	00fa85b3          	add	a1,s5,a5
     856:	4188                	lw	a0,0(a1)
     858:	00f98633          	add	a2,s3,a5
        for (i = 0; i < N + 1; ++i) {
     85c:	0685                	addi	a3,a3,1
            ri_2[i] = ri_1[i];
     85e:	c208                	sw	a0,0(a2)
            ri_1[i] = ri[i];
     860:	00fc0633          	add	a2,s8,a5
     864:	4210                	lw	a2,0(a2)
            ti_2[i] = ti_1[i];
     866:	00fd0533          	add	a0,s10,a5
            ri_1[i] = ri[i];
     86a:	c190                	sw	a2,0(a1)
            ti_2[i] = ti_1[i];
     86c:	00fb05b3          	add	a1,s6,a5
     870:	0005a883          	lw	a7,0(a1)
            controlR += ri[i];
     874:	9732                	add	a4,a4,a2
            ti_2[i] = ti_1[i];
     876:	01152023          	sw	a7,0(a0)
            ti_1[i] = ti[i];
     87a:	00fc8533          	add	a0,s9,a5
     87e:	4108                	lw	a0,0(a0)
     880:	c188                	sw	a0,0(a1)
            qi_1[i] = 0;
     882:	00fb85b3          	add	a1,s7,a5
     886:	0005a023          	sw	zero,0(a1)
        for (i = 0; i < N + 1; ++i) {
     88a:	0791                	addi	a5,a5,4
     88c:	b5cd                	j	76e <ext_euclid+0x102>
            if (((ri_2[0] * j) % mod) == 1)
     88e:	0009a683          	lw	a3,0(s3)
     892:	02d786b3          	mul	a3,a5,a3
     896:	0296e6b3          	rem	a3,a3,s1
     89a:	eec681e3          	beq	a3,a2,77c <ext_euclid+0x110>
        for (j = 0; j < mod; ++j) {
     89e:	0785                	addi	a5,a5,1
     8a0:	bde1                	j	778 <ext_euclid+0x10c>
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a2:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8a4:	0705                	addi	a4,a4,1
     8a6:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a8:	02d786b3          	mul	a3,a5,a3
     8ac:	0296e6b3          	rem	a3,a3,s1
     8b0:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     8b4:	bdc1                	j	784 <ext_euclid+0x118>

000008b6 <generate_keys>:




int* generate_keys(int N, int p, int q){
     8b6:	7141                	addi	sp,sp,-496
     8b8:	1e112623          	sw	ra,492(sp)
     8bc:	1e812423          	sw	s0,488(sp)
     8c0:	1e912223          	sw	s1,484(sp)
     8c4:	1b80                	addi	s0,sp,496
     8c6:	1f212023          	sw	s2,480(sp)
     8ca:	1d312e23          	sw	s3,476(sp)
     8ce:	1d412c23          	sw	s4,472(sp)
     8d2:	1d512a23          	sw	s5,468(sp)
     8d6:	1d612823          	sw	s6,464(sp)
     8da:	1d712623          	sw	s7,460(sp)
     8de:	1da12023          	sw	s10,448(sp)
     8e2:	1d812423          	sw	s8,456(sp)
     8e6:	1d912223          	sw	s9,452(sp)
     8ea:	892a                	mv	s2,a0
     8ec:	8bae                	mv	s7,a1
     8ee:	8b32                	mv	s6,a2
  

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8f0:	4581                	li	a1,0
     8f2:	0d000613          	li	a2,208
     8f6:	e2440513          	addi	a0,s0,-476
     8fa:	2bb9                	jal	e58 <memset>
     8fc:	4485                	li	s1,1
     8fe:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     900:	0d800613          	li	a2,216
     904:	4581                	li	a1,0
     906:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     90a:	e1342c23          	sw	s3,-488(s0)
     90e:	e0942e23          	sw	s1,-484(s0)
     912:	e2942023          	sw	s1,-480(s0)
     916:	e3342423          	sw	s3,-472(s0)
     91a:	e2942823          	sw	s1,-464(s0)
     91e:	e2942e23          	sw	s1,-452(s0)
     922:	e5342023          	sw	s3,-448(s0)
     926:	e5342223          	sw	s3,-444(s0)
     92a:	e4942623          	sw	s1,-436(s0)
     92e:	e5342a23          	sw	s3,-428(s0)
     932:	e4942e23          	sw	s1,-420(s0)
     936:	e6942023          	sw	s1,-416(s0)
     93a:	e7342623          	sw	s3,-404(s0)
     93e:	e6942a23          	sw	s1,-396(s0)
     942:	e8942023          	sw	s1,-384(s0)
     946:	e8942223          	sw	s1,-380(s0)
     94a:	e8942423          	sw	s1,-376(s0)
     94e:	e9342623          	sw	s3,-372(s0)
     952:	e8942a23          	sw	s1,-364(s0)
     956:	ea942023          	sw	s1,-352(s0)
     95a:	ea942223          	sw	s1,-348(s0)
     95e:	ea942423          	sw	s1,-344(s0)
     962:	eb342623          	sw	s3,-340(s0)
     966:	ea942a23          	sw	s1,-332(s0)
     96a:	ec942023          	sw	s1,-320(s0)
     96e:	ec942223          	sw	s1,-316(s0)
     972:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     976:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	29f9                	jal	e58 <memset>
    int polyR[N+1];
     97c:	002a9793          	slli	a5,s5,0x2
     980:	07bd                	addi	a5,a5,15
     982:	9bc1                	andi	a5,a5,-16
     984:	40f10133          	sub	sp,sp,a5
     988:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     98a:	00291d13          	slli	s10,s2,0x2
     98e:	01aa07b3          	add	a5,s4,s10
     992:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     994:	ef342a23          	sw	s3,-268(s0)
     998:	ee942e23          	sw	s1,-260(s0)
     99c:	f0942023          	sw	s1,-256(s0)
     9a0:	f0942423          	sw	s1,-248(s0)
     9a4:	f1342a23          	sw	s3,-236(s0)
     9a8:	f1342e23          	sw	s3,-228(s0)
     9ac:	f3342023          	sw	s3,-224(s0)
     9b0:	f2942423          	sw	s1,-216(s0)
     9b4:	f3342823          	sw	s3,-208(s0)
     9b8:	f2942c23          	sw	s1,-200(s0)
     9bc:	f4942223          	sw	s1,-188(s0)
     9c0:	f5342423          	sw	s3,-184(s0)
     9c4:	f4942823          	sw	s1,-176(s0)
     9c8:	f4942e23          	sw	s1,-164(s0)
     9cc:	f7342023          	sw	s3,-160(s0)
     9d0:	f6942423          	sw	s1,-152(s0)
     9d4:	f6942a23          	sw	s1,-140(s0)
     9d8:	f7342c23          	sw	s3,-136(s0)
     9dc:	f8942023          	sw	s1,-128(s0)
     9e0:	f8942423          	sw	s1,-120(s0)
     9e4:	f8942623          	sw	s1,-116(s0)
     9e8:	f8942c23          	sw	s1,-104(s0)
     9ec:	f9342e23          	sw	s3,-100(s0)
     9f0:	fa942223          	sw	s1,-92(s0)
     9f4:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     9f8:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     9fc:	4785                	li	a5,1
     9fe:	1127c163          	blt	a5,s2,b00 <generate_keys+0x24a>
     a02:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a04:	03600693          	li	a3,54
     a08:	10f6d363          	bge	a3,a5,b0e <generate_keys+0x258>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a0c:	4781                	li	a5,0
        random_keys[i] = f[i];
     a0e:	00001697          	auipc	a3,0x1
     a12:	05668693          	addi	a3,a3,86 # 1a64 <random_keys>
    for(i = 0; i < N; ++i){
     a16:	1127ca63          	blt	a5,s2,b2a <generate_keys+0x274>
     a1a:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a1e:	00191993          	slli	s3,s2,0x1
     a22:	87ca                	mv	a5,s2
     a24:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a26:	00001617          	auipc	a2,0x1
     a2a:	03e60613          	addi	a2,a2,62 # 1a64 <random_keys>
    for(i = N; i < (2*N); ++i){
     a2e:	1137c963          	blt	a5,s3,b40 <generate_keys+0x28a>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a32:	448d                	li	s1,3
     a34:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a38:	86de                	mv	a3,s7
     a3a:	8656                	mv	a2,s5
     a3c:	e1840593          	addi	a1,s0,-488
     a40:	8552                	mv	a0,s4
     a42:	312d                	jal	66c <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     a44:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     a46:	00001697          	auipc	a3,0x1
     a4a:	01e68693          	addi	a3,a3,30 # 1a64 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     a4e:	1097c163          	blt	a5,s1,b50 <generate_keys+0x29a>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     a52:	8656                	mv	a2,s5
     a54:	86da                	mv	a3,s6
     a56:	e1840593          	addi	a1,s0,-488
     a5a:	8552                	mv	a0,s4
     a5c:	3901                	jal	66c <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     a5e:	5751                	li	a4,-12
     a60:	02e90733          	mul	a4,s2,a4
     a64:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     a66:	00001617          	auipc	a2,0x1
     a6a:	ffe60613          	addi	a2,a2,-2 # 1a64 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     a6e:	0fa4c963          	blt	s1,s10,b60 <generate_keys+0x2aa>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     a72:	4701                	li	a4,0
     a74:	85ca                	mv	a1,s2
     a76:	86ca                	mv	a3,s2
     a78:	8666                	mv	a2,s9
     a7a:	3041                	jal	2fa <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     a7c:	87aa                	mv	a5,a0
     a7e:	4701                	li	a4,0
     a80:	fff98593          	addi	a1,s3,-1
     a84:	0eb74863          	blt	a4,a1,b74 <generate_keys+0x2be>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a88:	86d6                	mv	a3,s5
     a8a:	875a                	mv	a4,s6
     a8c:	8652                	mv	a2,s4
     a8e:	3af1                	jal	46a <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     a90:	4795                	li	a5,5
     a92:	02f907b3          	mul	a5,s2,a5
     a96:	098a                	slli	s3,s3,0x2
     a98:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a9a:	00001697          	auipc	a3,0x1
     a9e:	fca68693          	addi	a3,a3,-54 # 1a64 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     aa2:	0991                	addi	s3,s3,4
     aa4:	0efc4063          	blt	s8,a5,b84 <generate_keys+0x2ce>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     aa8:	4699                	li	a3,6
     aaa:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     aac:	00001617          	auipc	a2,0x1
     ab0:	fb860613          	addi	a2,a2,-72 # 1a64 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     ab4:	02d906b3          	mul	a3,s2,a3
     ab8:	02a90933          	mul	s2,s2,a0
     abc:	0cf6dc63          	bge	a3,a5,b94 <generate_keys+0x2de>


    return_address5 = &random_keys[0];

    return return_address5;
}
     ac0:	e1040113          	addi	sp,s0,-496
     ac4:	1ec12083          	lw	ra,492(sp)
     ac8:	1e812403          	lw	s0,488(sp)
     acc:	1e412483          	lw	s1,484(sp)
     ad0:	1e012903          	lw	s2,480(sp)
     ad4:	1dc12983          	lw	s3,476(sp)
     ad8:	1d812a03          	lw	s4,472(sp)
     adc:	1d412a83          	lw	s5,468(sp)
     ae0:	1d012b03          	lw	s6,464(sp)
     ae4:	1cc12b83          	lw	s7,460(sp)
     ae8:	1c812c03          	lw	s8,456(sp)
     aec:	1c412c83          	lw	s9,452(sp)
     af0:	1c012d03          	lw	s10,448(sp)
     af4:	00001517          	auipc	a0,0x1
     af8:	f7050513          	addi	a0,a0,-144 # 1a64 <random_keys>
     afc:	617d                	addi	sp,sp,496
     afe:	8082                	ret
        polyR[i] = 0;
     b00:	00279713          	slli	a4,a5,0x2
     b04:	9752                	add	a4,a4,s4
     b06:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b0a:	0785                	addi	a5,a5,1
     b0c:	bdcd                	j	9fe <generate_keys+0x148>
        f[i] = 0;
     b0e:	00279713          	slli	a4,a5,0x2
     b12:	e1840613          	addi	a2,s0,-488
     b16:	963a                	add	a2,a2,a4
     b18:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b1c:	ef440613          	addi	a2,s0,-268
     b20:	9732                	add	a4,a4,a2
     b22:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b26:	0785                	addi	a5,a5,1
     b28:	b5c5                	j	a08 <generate_keys+0x152>
        random_keys[i] = f[i];
     b2a:	00279713          	slli	a4,a5,0x2
     b2e:	e1840593          	addi	a1,s0,-488
     b32:	00e68633          	add	a2,a3,a4
     b36:	972e                	add	a4,a4,a1
     b38:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     b3a:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     b3c:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     b3e:	bde1                	j	a16 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     b40:	430c                	lw	a1,0(a4)
     b42:	00279693          	slli	a3,a5,0x2
     b46:	96b2                	add	a3,a3,a2
     b48:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     b4a:	0785                	addi	a5,a5,1
     b4c:	0711                	addi	a4,a4,4
     b4e:	b5c5                	j	a2e <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     b50:	4110                	lw	a2,0(a0)
     b52:	00279713          	slli	a4,a5,0x2
     b56:	9736                	add	a4,a4,a3
     b58:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     b5a:	0785                	addi	a5,a5,1
     b5c:	0511                	addi	a0,a0,4
     b5e:	bdc5                	j	a4e <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     b60:	00249793          	slli	a5,s1,0x2
     b64:	00f706b3          	add	a3,a4,a5
     b68:	96aa                	add	a3,a3,a0
     b6a:	4294                	lw	a3,0(a3)
     b6c:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     b6e:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     b70:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     b72:	bdf5                	j	a6e <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     b74:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     b76:	0705                	addi	a4,a4,1
     b78:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     b7a:	037686b3          	mul	a3,a3,s7
     b7e:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     b82:	b709                	j	a84 <generate_keys+0x1ce>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b84:	ff89a603          	lw	a2,-8(s3)
     b88:	002c1713          	slli	a4,s8,0x2
     b8c:	9736                	add	a4,a4,a3
     b8e:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     b90:	0c05                	addi	s8,s8,1
     b92:	bf01                	j	aa2 <generate_keys+0x1ec>
        random_keys[i] = polyR[i-(5*N)];
     b94:	00279713          	slli	a4,a5,0x2
     b98:	00e605b3          	add	a1,a2,a4
     b9c:	974a                	add	a4,a4,s2
     b9e:	9752                	add	a4,a4,s4
     ba0:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     ba2:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     ba4:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	bf19                	j	abc <generate_keys+0x206>

00000ba8 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ba8:	7115                	addi	sp,sp,-224
     baa:	cda2                	sw	s0,216(sp)
     bac:	cba6                	sw	s1,212(sp)
     bae:	c9ca                	sw	s2,208(sp)
     bb0:	842a                	mv	s0,a0
     bb2:	892e                	mv	s2,a1
     bb4:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bb6:	00000597          	auipc	a1,0x0
     bba:	49258593          	addi	a1,a1,1170 # 1048 <__DTOR_END__>
     bbe:	0c000613          	li	a2,192
     bc2:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	cf86                	sw	ra,220(sp)
     bc6:	c7ce                	sw	s3,204(sp)
     bc8:	c5d2                	sw	s4,200(sp)
     bca:	89ba                	mv	s3,a4
     bcc:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	2275                	jal	d7a <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     bd0:	4781                	li	a5,0
     bd2:	860a                	mv	a2,sp
     bd4:	874a                	mv	a4,s2
     bd6:	03000693          	li	a3,48
     bda:	85a2                	mv	a1,s0
     bdc:	8552                	mv	a0,s4
     bde:	d40ff0ef          	jal	ra,11e <polymult>
     be2:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////

    for(i = 0; i < 48; ++i){
     be4:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     be8:	00f506b3          	add	a3,a0,a5
     bec:	00f485b3          	add	a1,s1,a5
     bf0:	4298                	lw	a4,0(a3)
     bf2:	418c                	lw	a1,0(a1)
     bf4:	0791                	addi	a5,a5,4
     bf6:	972e                	add	a4,a4,a1
     bf8:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     bfa:	fec797e3          	bne	a5,a2,be8 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     bfe:	00141493          	slli	s1,s0,0x1
     c02:	00140693          	addi	a3,s0,1
     c06:	874a                	mv	a4,s2
     c08:	864e                	mv	a2,s3
     c0a:	85a6                	mv	a1,s1
     c0c:	38b9                	jal	46a <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c0e:	478d                	li	a5,3
     c10:	02f40433          	mul	s0,s0,a5
     c14:	87aa                	mv	a5,a0
     c16:	0084ca63          	blt	s1,s0,c2a <ntru_encyrpt+0x82>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c1a:	40fe                	lw	ra,220(sp)
     c1c:	446e                	lw	s0,216(sp)
     c1e:	44de                	lw	s1,212(sp)
     c20:	494e                	lw	s2,208(sp)
     c22:	49be                	lw	s3,204(sp)
     c24:	4a2e                	lw	s4,200(sp)
     c26:	612d                	addi	sp,sp,224
     c28:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c2a:	00249713          	slli	a4,s1,0x2
     c2e:	972a                	add	a4,a4,a0
     c30:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c32:	0485                	addi	s1,s1,1
     c34:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     c36:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     c3a:	bff1                	j	c16 <ntru_encyrpt+0x6e>

00000c3c <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c3c:	7179                	addi	sp,sp,-48
     c3e:	d422                	sw	s0,40(sp)
     c40:	ce4e                	sw	s3,28(sp)
     c42:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     c44:	498d                	li	s3,3
     c46:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	d04a                	sw	s2,32(sp)
     c4c:	ca56                	sw	s5,20(sp)
     c4e:	c65e                	sw	s7,12(sp)
     c50:	8932                	mv	s2,a2
     c52:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c54:	863e                	mv	a2,a5
     c56:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	8aae                	mv	s5,a1
     c5a:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c5c:	85a2                	mv	a1,s0
     c5e:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c60:	d606                	sw	ra,44(sp)
     c62:	d226                	sw	s1,36(sp)
     c64:	cc52                	sw	s4,24(sp)
     c66:	c85a                	sw	s6,16(sp)
     c68:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c6a:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6e:	e8cff0ef          	jal	ra,2fa <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c72:	00140b13          	addi	s6,s0,1
     c76:	874a                	mv	a4,s2
     c78:	86da                	mv	a3,s6
     c7a:	8652                	mv	a2,s4
     c7c:	85a6                	mv	a1,s1
     c7e:	fecff0ef          	jal	ra,46a <polydiv>
     c82:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     c84:	87aa                	mv	a5,a0
     c86:	872a                	mv	a4,a0
     c88:	86a6                	mv	a3,s1
     c8a:	0536c263          	blt	a3,s3,cce <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     c8e:	4589                	li	a1,2
     c90:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     c94:	4701                	li	a4,0
     c96:	04874563          	blt	a4,s0,ce0 <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     c9a:	4701                	li	a4,0
     c9c:	86a2                	mv	a3,s0
     c9e:	85a2                	mv	a1,s0
     ca0:	855e                	mv	a0,s7
     ca2:	e58ff0ef          	jal	ra,2fa <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     ca6:	8756                	mv	a4,s5
     ca8:	86da                	mv	a3,s6
     caa:	8652                	mv	a2,s4
     cac:	85a6                	mv	a1,s1
     cae:	fbcff0ef          	jal	ra,46a <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	87aa                	mv	a5,a0
     cb4:	0334cf63          	blt	s1,s3,cf2 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     cb8:	50b2                	lw	ra,44(sp)
     cba:	5422                	lw	s0,40(sp)
     cbc:	5492                	lw	s1,36(sp)
     cbe:	5902                	lw	s2,32(sp)
     cc0:	49f2                	lw	s3,28(sp)
     cc2:	4a62                	lw	s4,24(sp)
     cc4:	4ad2                	lw	s5,20(sp)
     cc6:	4b42                	lw	s6,16(sp)
     cc8:	4bb2                	lw	s7,12(sp)
     cca:	6145                	addi	sp,sp,48
     ccc:	8082                	ret
        a2[i-(2*N)] = a2[i];
     cce:	00269593          	slli	a1,a3,0x2
     cd2:	95b2                	add	a1,a1,a2
     cd4:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd6:	0685                	addi	a3,a3,1
     cd8:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     cda:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	b775                	j	c8a <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     ce0:	4394                	lw	a3,0(a5)
     ce2:	00d5d563          	bge	a1,a3,cec <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     ce6:	412686b3          	sub	a3,a3,s2
     cea:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     cec:	0705                	addi	a4,a4,1
     cee:	0791                	addi	a5,a5,4
     cf0:	b75d                	j	c96 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     cf2:	00249713          	slli	a4,s1,0x2
     cf6:	972a                	add	a4,a4,a0
     cf8:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfa:	0485                	addi	s1,s1,1
     cfc:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     cfe:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	bf4d                	j	cb4 <ntru_deceypt+0x78>

00000d04 <default_exc_handler>:
     d04:	0000006f          	j	d04 <default_exc_handler>

00000d08 <reset_handler>:
     d08:	00000093          	li	ra,0
     d0c:	8106                	mv	sp,ra
     d0e:	8186                	mv	gp,ra
     d10:	8206                	mv	tp,ra
     d12:	8286                	mv	t0,ra
     d14:	8306                	mv	t1,ra
     d16:	8386                	mv	t2,ra
     d18:	8406                	mv	s0,ra
     d1a:	8486                	mv	s1,ra
     d1c:	8506                	mv	a0,ra
     d1e:	8586                	mv	a1,ra
     d20:	8606                	mv	a2,ra
     d22:	8686                	mv	a3,ra
     d24:	8706                	mv	a4,ra
     d26:	8786                	mv	a5,ra
     d28:	8806                	mv	a6,ra
     d2a:	8886                	mv	a7,ra
     d2c:	8906                	mv	s2,ra
     d2e:	8986                	mv	s3,ra
     d30:	8a06                	mv	s4,ra
     d32:	8a86                	mv	s5,ra
     d34:	8b06                	mv	s6,ra
     d36:	8b86                	mv	s7,ra
     d38:	8c06                	mv	s8,ra
     d3a:	8c86                	mv	s9,ra
     d3c:	8d06                	mv	s10,ra
     d3e:	8d86                	mv	s11,ra
     d40:	8e06                	mv	t3,ra
     d42:	8e86                	mv	t4,ra
     d44:	8f06                	mv	t5,ra
     d46:	8f86                	mv	t6,ra
     d48:	0000f117          	auipc	sp,0xf
     d4c:	2b810113          	addi	sp,sp,696 # 10000 <_stack_start>

00000d50 <_start>:
     d50:	00000d17          	auipc	s10,0x0
     d54:	47cd0d13          	addi	s10,s10,1148 # 11cc <_bss_start>
     d58:	00001d97          	auipc	s11,0x1
     d5c:	204d8d93          	addi	s11,s11,516 # 1f5c <_bss_end>
     d60:	01bd5763          	bge	s10,s11,d6e <main_entry>

00000d64 <zero_loop>:
     d64:	000d2023          	sw	zero,0(s10)
     d68:	0d11                	addi	s10,s10,4
     d6a:	ffaddde3          	bge	s11,s10,d64 <zero_loop>

00000d6e <main_entry>:
     d6e:	00000513          	li	a0,0
     d72:	00000593          	li	a1,0
     d76:	18a000ef          	jal	ra,f00 <main>

00000d7a <memcpy>:
     d7a:	00a5c7b3          	xor	a5,a1,a0
     d7e:	8b8d                	andi	a5,a5,3
     d80:	00c508b3          	add	a7,a0,a2
     d84:	e7a1                	bnez	a5,dcc <memcpy+0x52>
     d86:	478d                	li	a5,3
     d88:	04c7f263          	bgeu	a5,a2,dcc <memcpy+0x52>
     d8c:	00357793          	andi	a5,a0,3
     d90:	872a                	mv	a4,a0
     d92:	eba9                	bnez	a5,de4 <memcpy+0x6a>
     d94:	ffc8f613          	andi	a2,a7,-4
     d98:	fe060793          	addi	a5,a2,-32
     d9c:	06f76763          	bltu	a4,a5,e0a <memcpy+0x90>
     da0:	02c77363          	bgeu	a4,a2,dc6 <memcpy+0x4c>
     da4:	86ae                	mv	a3,a1
     da6:	87ba                	mv	a5,a4
     da8:	0006a803          	lw	a6,0(a3)
     dac:	0791                	addi	a5,a5,4
     dae:	0691                	addi	a3,a3,4
     db0:	ff07ae23          	sw	a6,-4(a5)
     db4:	fec7eae3          	bltu	a5,a2,da8 <memcpy+0x2e>
     db8:	fff60793          	addi	a5,a2,-1
     dbc:	8f99                	sub	a5,a5,a4
     dbe:	9bf1                	andi	a5,a5,-4
     dc0:	0791                	addi	a5,a5,4
     dc2:	973e                	add	a4,a4,a5
     dc4:	95be                	add	a1,a1,a5
     dc6:	01176663          	bltu	a4,a7,dd2 <memcpy+0x58>
     dca:	8082                	ret
     dcc:	872a                	mv	a4,a0
     dce:	ff157ee3          	bgeu	a0,a7,dca <memcpy+0x50>
     dd2:	0005c783          	lbu	a5,0(a1)
     dd6:	0705                	addi	a4,a4,1
     dd8:	0585                	addi	a1,a1,1
     dda:	fef70fa3          	sb	a5,-1(a4)
     dde:	ff176ae3          	bltu	a4,a7,dd2 <memcpy+0x58>
     de2:	8082                	ret
     de4:	0005c683          	lbu	a3,0(a1)
     de8:	0705                	addi	a4,a4,1
     dea:	00377793          	andi	a5,a4,3
     dee:	fed70fa3          	sb	a3,-1(a4)
     df2:	0585                	addi	a1,a1,1
     df4:	d3c5                	beqz	a5,d94 <memcpy+0x1a>
     df6:	0005c683          	lbu	a3,0(a1)
     dfa:	0705                	addi	a4,a4,1
     dfc:	00377793          	andi	a5,a4,3
     e00:	fed70fa3          	sb	a3,-1(a4)
     e04:	0585                	addi	a1,a1,1
     e06:	fff9                	bnez	a5,de4 <memcpy+0x6a>
     e08:	b771                	j	d94 <memcpy+0x1a>
     e0a:	41d4                	lw	a3,4(a1)
     e0c:	0005a283          	lw	t0,0(a1)
     e10:	0085af83          	lw	t6,8(a1)
     e14:	00c5af03          	lw	t5,12(a1)
     e18:	0105ae83          	lw	t4,16(a1)
     e1c:	0145ae03          	lw	t3,20(a1)
     e20:	0185a303          	lw	t1,24(a1)
     e24:	01c5a803          	lw	a6,28(a1)
     e28:	c354                	sw	a3,4(a4)
     e2a:	5194                	lw	a3,32(a1)
     e2c:	00572023          	sw	t0,0(a4)
     e30:	01f72423          	sw	t6,8(a4)
     e34:	01e72623          	sw	t5,12(a4)
     e38:	01d72823          	sw	t4,16(a4)
     e3c:	01c72a23          	sw	t3,20(a4)
     e40:	00672c23          	sw	t1,24(a4)
     e44:	01072e23          	sw	a6,28(a4)
     e48:	d314                	sw	a3,32(a4)
     e4a:	02470713          	addi	a4,a4,36
     e4e:	02458593          	addi	a1,a1,36
     e52:	faf76ce3          	bltu	a4,a5,e0a <memcpy+0x90>
     e56:	b7a9                	j	da0 <memcpy+0x26>

00000e58 <memset>:
     e58:	433d                	li	t1,15
     e5a:	872a                	mv	a4,a0
     e5c:	02c37363          	bgeu	t1,a2,e82 <memset+0x2a>
     e60:	00f77793          	andi	a5,a4,15
     e64:	efbd                	bnez	a5,ee2 <memset+0x8a>
     e66:	e5ad                	bnez	a1,ed0 <memset+0x78>
     e68:	ff067693          	andi	a3,a2,-16
     e6c:	8a3d                	andi	a2,a2,15
     e6e:	96ba                	add	a3,a3,a4
     e70:	c30c                	sw	a1,0(a4)
     e72:	c34c                	sw	a1,4(a4)
     e74:	c70c                	sw	a1,8(a4)
     e76:	c74c                	sw	a1,12(a4)
     e78:	0741                	addi	a4,a4,16
     e7a:	fed76be3          	bltu	a4,a3,e70 <memset+0x18>
     e7e:	e211                	bnez	a2,e82 <memset+0x2a>
     e80:	8082                	ret
     e82:	40c306b3          	sub	a3,t1,a2
     e86:	068a                	slli	a3,a3,0x2
     e88:	00000297          	auipc	t0,0x0
     e8c:	9696                	add	a3,a3,t0
     e8e:	00a68067          	jr	10(a3)
     e92:	00b70723          	sb	a1,14(a4)
     e96:	00b706a3          	sb	a1,13(a4)
     e9a:	00b70623          	sb	a1,12(a4)
     e9e:	00b705a3          	sb	a1,11(a4)
     ea2:	00b70523          	sb	a1,10(a4)
     ea6:	00b704a3          	sb	a1,9(a4)
     eaa:	00b70423          	sb	a1,8(a4)
     eae:	00b703a3          	sb	a1,7(a4)
     eb2:	00b70323          	sb	a1,6(a4)
     eb6:	00b702a3          	sb	a1,5(a4)
     eba:	00b70223          	sb	a1,4(a4)
     ebe:	00b701a3          	sb	a1,3(a4)
     ec2:	00b70123          	sb	a1,2(a4)
     ec6:	00b700a3          	sb	a1,1(a4)
     eca:	00b70023          	sb	a1,0(a4)
     ece:	8082                	ret
     ed0:	0ff5f593          	andi	a1,a1,255
     ed4:	00859693          	slli	a3,a1,0x8
     ed8:	8dd5                	or	a1,a1,a3
     eda:	01059693          	slli	a3,a1,0x10
     ede:	8dd5                	or	a1,a1,a3
     ee0:	b761                	j	e68 <memset+0x10>
     ee2:	00279693          	slli	a3,a5,0x2
     ee6:	00000297          	auipc	t0,0x0
     eea:	9696                	add	a3,a3,t0
     eec:	8286                	mv	t0,ra
     eee:	fa8680e7          	jalr	-88(a3)
     ef2:	8096                	mv	ra,t0
     ef4:	17c1                	addi	a5,a5,-16
     ef6:	8f1d                	sub	a4,a4,a5
     ef8:	963e                	add	a2,a2,a5
     efa:	f8c374e3          	bgeu	t1,a2,e82 <memset+0x2a>
     efe:	b7a5                	j	e66 <memset+0xe>

00000f00 <main>:

int main(){
     f00:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f04:	0c000613          	li	a2,192
     f08:	00000597          	auipc	a1,0x0
     f0c:	20058593          	addi	a1,a1,512 # 1108 <__DTOR_END__+0xc0>
     f10:	0068                	addi	a0,sp,12
int main(){
     f12:	42112623          	sw	ra,1068(sp)
     f16:	42812423          	sw	s0,1064(sp)
     f1a:	42912223          	sw	s1,1060(sp)
     f1e:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f22:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f26:	3d91                	jal	d7a <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f28:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f2c:	00000417          	auipc	s0,0x0
     f30:	29c40413          	addi	s0,s0,668 # 11c8 <_edata>
    keys = generate_keys(N, p, q);
     f34:	06500613          	li	a2,101
     f38:	458d                	li	a1,3
     f3a:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     f3e:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     f40:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     f44:	3a8d                	jal	8b6 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     f46:	4781                	li	a5,0
     f48:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     f4a:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     f4e:	00f506b3          	add	a3,a0,a5
     f52:	4290                	lw	a2,0(a3)
     f54:	1314                	addi	a3,sp,416
     f56:	96be                	add	a3,a3,a5
     f58:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     f5a:	0791                	addi	a5,a5,4
     f5c:	fee799e3          	bne	a5,a4,f4e <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     f60:	1cd8                	addi	a4,sp,628
     f62:	1a850793          	addi	a5,a0,424
     f66:	27c50693          	addi	a3,a0,636
     f6a:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     f6c:	4390                	lw	a2,0(a5)
     f6e:	0791                	addi	a5,a5,4
     f70:	0711                	addi	a4,a4,4
     f72:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     f76:	fed79be3          	bne	a5,a3,f6c <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     f7a:	01f8                	addi	a4,sp,204
     f7c:	35050793          	addi	a5,a0,848
     f80:	42450613          	addi	a2,a0,1060
     f84:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     f86:	438c                	lw	a1,0(a5)
     f88:	0791                	addi	a5,a5,4
     f8a:	0711                	addi	a4,a4,4
     f8c:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     f90:	fec79be3          	bne	a5,a2,f86 <main+0x86>
     f94:	06b0                	addi	a2,sp,840
     f96:	4fc50513          	addi	a0,a0,1276
     f9a:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
     f9c:	4398                	lw	a4,0(a5)
     f9e:	0791                	addi	a5,a5,4
     fa0:	0611                	addi	a2,a2,4
     fa2:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     fa6:	fea79be3          	bne	a5,a0,f9c <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
     faa:	bbbbc4b7          	lui	s1,0xbbbbc
     fae:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb2:	8742                	mv	a4,a6
     fb4:	0070                	addi	a2,sp,12
     fb6:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
     fba:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fbe:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
     fc2:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fc4:	36d5                	jal	ba8 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
     fc6:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
     fc8:	ccccd4b7          	lui	s1,0xccccd
     fcc:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd0:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
     fd2:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fd4:	458d                	li	a1,3
     fd6:	874a                	mv	a4,s2
     fd8:	34810813          	addi	a6,sp,840
     fdc:	1314                	addi	a3,sp,416
     fde:	06500613          	li	a2,101
     fe2:	03500513          	li	a0,53
     fe6:	3999                	jal	c3c <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
     fe8:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
     fec:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
     ff0:	c004                	sw	s1,0(s0)
     ff2:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
     ff4:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
     ff8:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
     ffc:	0070                	addi	a2,sp,12
     ffe:	00f506b3          	add	a3,a0,a5
    1002:	963e                	add	a2,a2,a5
    1004:	4210                	lw	a2,0(a2)
    1006:	4294                	lw	a3,0(a3)
    1008:	02d60363          	beq	a2,a3,102e <main+0x12e>
            resultkon[0] = 0xBABABABA;
    100c:	babac7b7          	lui	a5,0xbabac
    1010:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1014:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    1016:	42c12083          	lw	ra,1068(sp)
    101a:	42812403          	lw	s0,1064(sp)
    101e:	42412483          	lw	s1,1060(sp)
    1022:	42012903          	lw	s2,1056(sp)
    1026:	4501                	li	a0,0
    1028:	43010113          	addi	sp,sp,1072
    102c:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    102e:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    1030:	0791                	addi	a5,a5,4
    1032:	fcb795e3          	bne	a5,a1,ffc <main+0xfc>
    1036:	b7c5                	j	1016 <main+0x116>

00001038 <__CTOR_LIST__>:
	...

00001040 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00001048 <.rodata>:
    1048:	0001                	nop
    104a:	0000                	unimp
    104c:	ffff                	0xffff
    104e:	ffff                	0xffff
    1050:	0000                	unimp
    1052:	0000                	unimp
    1054:	0001                	nop
    1056:	0000                	unimp
    1058:	ffff                	0xffff
    105a:	ffff                	0xffff
    105c:	0001                	nop
    105e:	0000                	unimp
    1060:	ffff                	0xffff
    1062:	ffff                	0xffff
    1064:	0000                	unimp
    1066:	0000                	unimp
    1068:	0001                	nop
    106a:	0000                	unimp
    106c:	0001                	nop
    106e:	0000                	unimp
    1070:	0000                	unimp
    1072:	0000                	unimp
    1074:	ffff                	0xffff
    1076:	ffff                	0xffff
    1078:	0001                	nop
    107a:	0000                	unimp
    107c:	ffff                	0xffff
    107e:	ffff                	0xffff
    1080:	0001                	nop
    1082:	0000                	unimp
    1084:	0000                	unimp
    1086:	0000                	unimp
    1088:	0001                	nop
    108a:	0000                	unimp
    108c:	0001                	nop
    108e:	0000                	unimp
    1090:	0000                	unimp
    1092:	0000                	unimp
    1094:	ffff                	0xffff
    1096:	ffff                	0xffff
    1098:	0001                	nop
    109a:	0000                	unimp
    109c:	ffff                	0xffff
    109e:	ffff                	0xffff
    10a0:	0001                	nop
    10a2:	0000                	unimp
    10a4:	0000                	unimp
    10a6:	0000                	unimp
    10a8:	0001                	nop
    10aa:	0000                	unimp
    10ac:	0001                	nop
    10ae:	0000                	unimp
    10b0:	0000                	unimp
    10b2:	0000                	unimp
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	ffff                	0xffff
    10ba:	ffff                	0xffff
    10bc:	0001                	nop
    10be:	0000                	unimp
    10c0:	ffff                	0xffff
    10c2:	ffff                	0xffff
    10c4:	0000                	unimp
    10c6:	0000                	unimp
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0000                	unimp
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	ffff                	0xffff
    10da:	ffff                	0xffff
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	ffff                	0xffff
    10e2:	ffff                	0xffff
    10e4:	0000                	unimp
    10e6:	0000                	unimp
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	0000                	unimp
    10f2:	0000                	unimp
    10f4:	ffff                	0xffff
    10f6:	ffff                	0xffff
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	ffff                	0xffff
    10fe:	ffff                	0xffff
    1100:	0001                	nop
    1102:	0000                	unimp
    1104:	0000                	unimp
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	0000                	unimp
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	0002                	c.slli64	zero
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	0002                	c.slli64	zero
    1126:	0000                	unimp
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	0000                	unimp
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	0002                	c.slli64	zero
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	0000                	unimp
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0002                	c.slli64	zero
    114e:	0000                	unimp
    1150:	0000                	unimp
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0000                	unimp
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0000                	unimp
    1172:	0000                	unimp
    1174:	0002                	c.slli64	zero
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0002                	c.slli64	zero
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0000                	unimp
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0002                	c.slli64	zero
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0002                	c.slli64	zero
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0002                	c.slli64	zero
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000011c8 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    11c8:	bebe                	fsd	fa5,376(sp)
    11ca:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

000011cc <_bss_start>:
	...

00001424 <product2>:
	...

0000167c <result>:
	...

000018d4 <ti_2>:
	...

00001a64 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	1a96                	slli	s5,s5,0x25
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05ce                	slli	a1,a1,0x13
       e:	0000                	unimp
      10:	630c                	flw	fa1,0(a4)
      12:	22000003          	lb	zero,544(zero) # 220 <polymult+0x102>
      16:	0001                	nop
      18:	6800                	flw	fs0,16(s0)
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0000044f          	fnmadd.s	fs0,ft0,ft0,ft0,rne
      2c:	0102                	c.slli64	sp
      2e:	4d08                	lw	a0,24(a0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	046e                	slli	s0,s0,0x1b
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002f407          	0x2f407
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	b004                	fsd	fs1,32(s0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	00000337          	lui	t1,0x0
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
      80:	0069                	c.nop	26
      82:	0000                	unimp
      84:	0106                	slli	sp,sp,0x1
      86:	0004                	0x4
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4b06                	lw	s6,64(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6406                	flw	fs0,64(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0331                	addi	t1,t1,12
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
    asm volatile(
      bc:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      be:	0258                	addi	a4,sp,260
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] % mod;
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x1be>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
            a1[length-1] = a1[length-1] % mod;
      e4:	0000052b          	0x52b
            a1[length-2] = a1[length-2] % mod;
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
      f0:	330c                	fld	fa1,32(a4)
} //end of function
      f2:	0005                	c.nop	1
    asm volatile(
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
            for (i = 0; i < (length / 3); i++) {
      fe:	9e06                	add	t3,t3,ra
     100:	0004                	0x4
    asm volatile(
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
            for (i = 0; i < ((length-1) / 3); i++) {
     10c:	a106                	fsd	ft1,128(sp)
     10e:	0005                	c.nop	1
    asm volatile(
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
     118:	3106                	fld	ft2,96(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
     124:	1006                	c.slli	zero,0x21
     126:	0002                	c.slli64	zero
     128:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     12a:	01181b23          	sh	a7,22(a6)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	0000                	unimp
     130:	210e                	fld	ft2,192(sp)
    int line[size_b][size_a + size_b];
     132:	0002                	c.slli64	zero
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13e:	000004bf 8a133604 	0x8a133604000004bf
     146:	0001                	nop
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
    int line[size_b][size_a + size_b];
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	070c                	addi	a1,sp,896
     158:	0005                	c.nop	1
    int pola[size_a];
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     160:	0000                	unimp
    int line[size_b][size_a + size_b];
     162:	0c08                	addi	a0,sp,528
     164:	020a                	slli	tp,tp,0x2
    int pola[size_a];
     166:	0000                	unimp
    int polb[size_b];
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
    int line[size_b][size_a + size_b];
     16c:	0000                	unimp
    int polb[size_b];
     16e:	0c00                	addi	s0,sp,528
    int pola[size_a];
     170:	420c                	lw	a1,0(a2)
     172:	0006                	c.slli	zero,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
            line[i][j] = 0;
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
    int polb[size_b];
     17e:	785f 0400 0b38      	0xb380400785f
    int pola[size_a];
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
    int polb[size_b];
     188:	0014                	0x14
            line[i][j] = 0;
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
            product[j] = 0;
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
    for (i = 0; i < size_b; ++i){
     19c:	0000                	unimp
     19e:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1a0:	480e                	lw	a6,192(sp)
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
	array_mod(pola,mod,size_a);
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
     1ba:	5a0c                	lw	a1,48(a2)
	array_mod(polb,mod,size_b);
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
    if(star_mult == 1){
     1c8:	0000053b          	0x53b
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	e00c                	fsw	fa1,0(s0)
     1d6:	0006                	c.slli	zero,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     1d8:	0400                	addi	s0,sp,512
     1da:	0941                	addi	s2,s2,16
            for (k = size_a-1; k >= 0; k = k-1 ){
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
            product[j] = 0;
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	000003cb          	fnmsub.s	ft7,ft0,ft0,ft0,rne
            line[i][j] = 0;
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
            product[j] = 0;
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
        for(j = 0; j < size_a + size_b -1; ++j){
     1ee:	8d0c                	0x8d0c
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
    for (i = 0; i < size_b; ++i){
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	00000647          	fmsub.s	fa2,ft0,ft0,ft0,rne
        for(j = 0; j < size_a + size_b -1; ++j){
     200:	4404                	lw	s1,8(s0)
        pola[i] = a[i];
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	780c                	flw	fa1,48(s0)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
    for (i = 0; i < size_a; ++i){
     20e:	0945                	addi	s2,s2,17
        pola[i] = a[i];
     210:	005d                	c.nop	23
     212:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     214:	0c1c                	addi	a5,sp,528
        polb[i] = b[i];
     216:	06a2                	slli	a3,a3,0x8
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
    for (i = 0; i < size_b; ++i){
     222:	1100                	addi	s0,sp,160
        polb[i] = b[i];
     224:	0164                	addi	s1,sp,140
    for (i = 0; i < size_b; ++i){
     226:	0000                	unimp
    if(star_mult == 1){
     228:	0108                	addi	a0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     230:	0c00                	addi	s0,sp,528
     232:	01f0                	addi	a2,sp,204
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
    for(j = 0; j < size_a + size_b -1; ++j){
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
    array_mod(product,mod,size_a+size_b-1);
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0585                	addi	a1,a1,1
     24e:	0000                	unimp
}
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	00000193          	li	gp,0
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f e411 0003      	0x3e411001f
                line[size_b-1-j][k] = pola[k]*polb[j];
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	bf0c                	fsd	fa1,56(a4)
     288:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     28a:	0400                	addi	s0,sp,512
                line[size_b-1-j][k] = pola[k]*polb[j];
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x192>
     290:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	0c00                	addi	s0,sp,528
     294:	000004d7          	0x4d7
        for (j = size_b -1; j >= 0; j = j-1){
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0400                	addi	s0,sp,512
     2a0:	050c                	addi	a1,sp,640
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a2:	0002                	c.slli64	zero
     2a4:	0400                	addi	s0,sp,512
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
     2ae:	0164                	addi	s1,sp,140
     2b0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b2:	6704                	flw	fs1,8(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
            product[j] += line[i][j];
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
     2d8:	820e                	mv	tp,gp
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
        for(i = 0; i < size_b; ++i){
     2de:	7a04                	flw	fs1,48(a2)
            product[j] += line[i][j];
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_mod+0x2e>
     2e6:	011c                	addi	a5,sp,128
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
        for(i = 0; i < size_b; ++i){
     2ec:	0011                	c.nop	4
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for(j = 0; j < size_a + size_b -1; ++j){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
    int line[size_b][size_a + size_b];
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	a90e                	fsd	ft3,144(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
    int line[size_b][size_a + size_b];
     320:	725f 0400 07bc      	0x7bc0400725f
     326:	005d                	c.nop	23
    int pola[size_a];
     328:	0000                	unimp
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
     332:	005d                	c.nop	23
     334:	0000                	unimp
    int polb[size_b];
     336:	0c08                	addi	a0,sp,528
     338:	018c                	addi	a1,sp,192
     33a:	0000                	unimp
    int pola[size_a];
     33c:	be04                	fsd	fs1,56(a2)
    int polb[size_b];
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
    int line[size_b][size_a + size_b];
     342:	0c00                	addi	s0,sp,528
     344:	870c                	0x870c
    int pola[size_a];
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
    int polb[size_b];
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
    for (i = 0; i < size_b; ++i){
     352:	625f 0066 c004      	0xc0040066625f
            product2[j] = 0;
     358:	d811                	beqz	s0,26c <polymult+0x14e>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
    for (i = 0; i < size_b; ++i){
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    for(i = 0; i < size_b; ++i){
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0172                	slli	sp,sp,0x1c
    if(star_mult == 1){
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
     376:	1c00                	addi	s0,sp,560
     378:	380c                	fld	fa1,48(s0)
     37a:	0002                	c.slli64	zero
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
            for (k = size_a-1; k >= 0; k = k-1 ){
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
            product2[j] = 0;
     384:	0c20                	addi	s0,sp,536
     386:	0386                	slli	t2,t2,0x1
     388:	0000                	unimp
            line[i][j] = 0;
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0x19c>
            product2[j] = 0;
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     392:	450c                	lw	a1,8(a0)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
    for (i = 0; i < size_b; ++i){
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06bc                	addi	a5,sp,840
        for(j = 0; j < size_a + size_b -1; ++j){
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
        pola[i] = a[i];
     3a6:	3509                	jal	1a8 <polymult+0x8a>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
    for(i = 0; i < size_a; ++i){
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
        pola[i] = a[i];
     3b6:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     3b8:	0f30                	addi	a2,sp,920
        polb[i] = b[i];
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x86>
    for(i = 0; i < size_b; ++i){
     3c6:	72755f0f          	0x72755f0f
        polb[i] = b[i];
     3ca:	0400                	addi	s0,sp,512
    for(i = 0; i < size_b; ++i){
     3cc:	07d5                	addi	a5,a5,21
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_mod+0x5c>
     3dc:	0006                	c.slli	zero,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     3de:	4000                	lw	s0,0(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     3e0:	870c                	0x870c
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for (j = size_b -1; j >= 0; j = j-1){
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0xe>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	a20c                	fsd	fa1,0(a2)
        for(i = 0; i < size_b; ++i){
     3fc:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
}
     406:	0c4c                	addi	a1,sp,532
     408:	01c9                	addi	gp,gp,18
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_deceypt+0x22>
     41e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     420:	0c54                	addi	a3,sp,532
     422:	035d                	addi	t1,t1,23
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     424:	0000                	unimp
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	b10c                	fsd	fa1,32(a0)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     434:	0ee9                	addi	t4,t4,26
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     436:	00fe                	slli	ra,ra,0x1f
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
            for (k = size_a-1; k >= 0; k = k-1 ){
     43c:	0489                	addi	s1,s1,2
     43e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
            product2[j] += line[i][j];
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            product2[j] += line[i][j];
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     45c:	bb15                	j	190 <polymult+0x72>
     45e:	0005                	c.nop	1
    for(j = 0; j < size_a + size_b -1; ++j){
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
    int v[size_N];
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int v[size_N];
     472:	00050f17          	auipc	t5,0x50
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
    int v[size_N];
     490:	0000019b          	0x19b
     494:	6c04                	flw	fs1,24(s0)
    int q[size_N];
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
    int num_temp[size_N];
     49c:	1804                	addi	s1,sp,48
     49e:	0269                	addi	tp,tp,26
    int denum_temp[size_D];
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
     4ac:	0219                	addi	tp,tp,6
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
    int v[size_N];
     4b8:	180c                	addi	a1,sp,48
    int denum_temp[size_D];
     4ba:	04d2                	slli	s1,s1,0x14
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
    for (i = 0; i < size_N; ++i){
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
        array_mod(num_temp, mod, size_N);
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    for (i = 0; i < size_D; ++i) {
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
	array_mod(denum_temp,mod,size_D);
     4d4:	1814                	addi	a3,sp,48
     4d6:	04ee                	slli	s1,s1,0x1b
     4d8:	0000                	unimp
     4da:	7204                	flw	fs1,32(a2)
    for (i = 0; i < size_N; ++i){
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	1830                	addi	a2,sp,56
     4e4:	04dc                	addi	a5,sp,580
     4e6:	0000                	unimp
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
    for (i = 0; i < size_N; ++i){
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
        if ( (b_N*u)%mod == 1 )
     4f2:	03f6                	slli	t2,t2,0x1d
    for (u = 0; u < mod; ++u){
     4f4:	0000                	unimp
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
        num_temp[i] = num[i];
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
     500:	04e4                	addi	s1,sp,588
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
    for (i = 0; i < size_N; ++i){
     508:	08cd                	addi	a7,a7,19
        num_temp[i] = num[i];
     50a:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     50c:	183c                	addi	a5,sp,56
        denum_temp[i] = denum[i];
     50e:	0329                	addi	t1,t1,10
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     51a:	1840                	addi	s0,sp,52
        denum_temp[i] = denum[i];
     51c:	023e                	slli	tp,tp,0xf
    for (i = 0; i < size_D; ++i) {
     51e:	0000                	unimp
        q[i] = 0;
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
        v[i] = 0;
     528:	1844                	addi	s1,sp,52
        q[i] = 0;
     52a:	06d6                	slli	a3,a3,0x15
     52c:	0000                	unimp
        v[i] = 0;
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
    for (i = 0; i < size_N; ++i){
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
        if( denum_temp[i] != 0 )
     536:	1848                	addi	a0,sp,52
    for (i = size_D-1; i >= 0; i = i-1){
     538:	041d                	addi	s0,s0,7
     53a:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
    for (u = 0; u < mod; ++u){
     546:	0271                	addi	tp,tp,28
     548:	0000                	unimp
        if( num_temp[i] != 0 )
     54a:	8004                	0x8004
    for (i = size_N-1; i >= 0; i = i-1){
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	01c1                	addi	gp,gp,16
     556:	0000                	unimp
     558:	8104                	0x8104
    while (d >= d2){
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        result[i] = q[i];
     560:	1854                	addi	a3,sp,52
     562:	0460                	addi	s0,sp,524
     564:	0000                	unimp
     566:	a404                	fsd	fs1,8(s0)
    for(i = 0; i < size_N; ++i){
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
    for(i = size_N; i < (2*size_N); ++i){
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
        result[i] = num_temp[i-size_N];
     570:	03e4                	addi	s1,sp,460
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
    for(i = size_N; i < (2*size_N); ++i){
     578:	000002bb          	0x2bb
}
     57c:	0148                	addi	a0,sp,132
     57e:	0719                	addi	a4,a4,6
     580:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	067d                	addi	a2,a2,31
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	7a19                	lui	s4,0xfffe6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
        v[(d-d2)] = u*r_d;
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	015f 0000 b404      	0xb4040000015f
        array_mod(v, mod, size_N);
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
        v[(d-d2)] = u*r_d;
     5b8:	02ec                	addi	a1,sp,332
        array_mod(v, mod, size_N);
     5ba:	1000                	addi	s0,sp,32
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
     5c4:	0456                	slli	s0,s0,0x15
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
        array_mod(product, mod, size_N);
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ce:	4904                	lw	s1,16(a0)
        array_mod(product, mod, size_N);
     5d0:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
        array_mod(num_temp, mod, size_N);
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
        for(i = 0; i < size_N; ++i){
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xa0>
     5e8:	0005                	c.nop	1
        array_mod(q, mod, size_N);
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        for (i = size_N-1; i >= 0; i = i-1){
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
            num_temp[i] = num_temp[i] - product[i];
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
        for (i = 0; i < size_N; ++i){
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
            num_temp[i] = num_temp[i] - product[i];
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
        for (i = 0; i < size_N; ++i){
     618:	0000                	unimp
            q[i] = q[i] + v[i];
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
        for(i = 0; i < size_N; ++i){
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
            q[i] = q[i] + v[i];
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
        for(i = 0; i < size_N; ++i){
     62e:	1500                	addi	s0,sp,672
            if( num_temp[i] != 0 )
     630:	010a                	slli	sp,sp,0x2
        for (i = size_N-1; i >= 0; i = i-1){
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
            v[i] = 0;
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
        result[i] = q[i];
     648:	0200                	addi	s0,sp,256
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
    for(i = 0; i < size_N; ++i){
     654:	690a                	flw	fs2,128(sp)
        result[i] = q[i];
     656:	0000                	unimp
    for(i = 0; i < size_N; ++i){
     658:	0000                	unimp
        result[i] = num_temp[i-size_N];
     65a:	0500                	addi	s0,sp,640
     65c:	00000497          	auipc	s1,0x0
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     666:	0000                	unimp
     668:	511a                	lw	sp,164(sp)
     66a:	0006                	c.slli	zero,0x1
    int ri_2[size]; // MX-ring poly, a
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     670:	0801                	addi	a6,a6,0
    int ri_2[size]; // MX-ring poly, a
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     676:	bf18                	fsd	fa4,56(a4)
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x1cc>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	cd18                	sw	a4,24(a0)
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
    int ri_2[size]; // MX-ring poly, a
     692:	9118                	0x9118
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
    int ri_1[size]; // f-random poly, f[N] = 0, b
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
    int ri[size];
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
    int ti_1[size]; // ti_1[0] = 1
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
    int ti[size];
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
    int qi_1[size];
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
    int temp[size];
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	1800                	addi	s0,sp,48
     6bc:	0520                	addi	s0,sp,648
    int ri_2[size]; // MX-ring poly, a
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
    int temp[size];
     6c2:	1201                	addi	tp,tp,-32
    for (i = 0; i < size; ++i) {
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
        ti_2[i] = 0;
     6c8:	1800                	addi	s0,sp,48
     6ca:	051a                	slli	a0,a0,0x6
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
    for (i = 0; i < size; ++i) {
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
    ti_1[0] = 1;
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	059c                	addi	a5,sp,704
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6da:	0000                	unimp
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
            ti[i] = ti_2[i] - temp[i];
     6e2:	0000                	unimp
     6e4:	000c                	0xc
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
	array_mod(ri_2,mod,N+1);
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
	array_mod(ri_1,mod,N+1);
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	3018                	fld	fa4,32(s0)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
        for (i = N + 1; i < (2 * N + 2); ++i) {
     706:	69180287          	0x69180287
     70a:	0000                	unimp
     70c:	0000                	unimp
     70e:	7818                	flw	fa4,48(s0)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
        array_mod(temp,mod,N+1);
     71a:	0400                	addi	s0,sp,512
     71c:	1c18                	addi	a4,sp,560
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	ad18                	fsd	fa4,24(a0)
     72c:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
	array_mod(qi_1,mod,size);
     736:	2400                	fld	fs0,8(s0)
     738:	2918                	fld	fa4,16(a0)
     73a:	0002                	c.slli64	zero
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	ba18                	fsd	fa4,48(a2)
     748:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
	array_mod(temp,mod,size);
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	c318                	sw	a4,0(a4)
     756:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
        array_mod(ti,mod,N+1);
     760:	5800                	lw	s0,48(s0)
     762:	c518                	sw	a4,8(a0)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     768:	028e                	slli	t0,t0,0x3
        controlR = 0;
     76a:	fe16                	fsw	ft5,60(sp)
        for (i = 0; i < N + 1; ++i) {
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	c818                	sw	a4,16(s0)
    while (controlR != 0) {
     772:	0006                	c.slli	zero,0x1
        for (j = 0; j < mod; ++j) {
     774:	0400                	addi	s0,sp,512
            if (((ri_2[0] * j) % mod) == 1)
     776:	fe16028f          	0xfe16028f
        for (j = 0; j < mod; ++j) {
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
    }
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	6d18                	flw	fa4,24(a0)
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	1018                	addi	a4,sp,32
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	ae18                	fsd	fa4,24(a2)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488 # 50a42 <_stack_start+0x40a42>
        ri_2[i] = polyR[i];
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	e218                	fsw	fa4,0(a2)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
    for (i = 0; i < size; ++i) {
     7be:	fe16                	fsw	ft5,60(sp)
        ri_2[i] = polyR[i];
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
        ri_1[i] = polyf[i];
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	d118                	sw	a4,32(a0)
        ti_2[i] = 0;
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
        ti_1[i] = 0;
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
    for (i = 0; i < size; ++i) {
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
            ri[i - (N + 1)] = res[i];
     7ea:	0000                	unimp
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
            ri[i - (N + 1)] = res[i];
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f8:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     7fa:	c400                	sw	s0,8(s0)
     7fc:	6518                	flw	fa4,8(a0)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
        for (i = 0; i < N + 1; ++i) {
     80a:	0900                	addi	s0,sp,144
            temp[i] = ri_2[i] - ri[i];
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     810:	0000081b          	0x81b
            qi_1[i] = res1[i];
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
            temp[i] = res2[i];
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
        for (i = 0; i < N + 1; ++i) {
     836:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	03bc                	addi	a5,sp,456
        for (i = 0; i < N + 1; ++i) {
     848:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
        for (i = 0; i < N + 1; ++i) {
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
            ri_2[i] = ri_1[i];
     852:	1800                	addi	s0,sp,48
     854:	000003a7          	0x3a7
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
        for (i = 0; i < N + 1; ++i) {
     85c:	0872                	slli	a6,a6,0x1c
            ri_2[i] = ri_1[i];
     85e:	0000                	unimp
            ri_1[i] = ri[i];
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0xb4>
            ti_2[i] = ti_1[i];
     868:	0008                	0x8
            ri_1[i] = ri[i];
     86a:	0a00                	addi	s0,sp,272
            ti_2[i] = ti_1[i];
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
            controlR += ri[i];
     874:	0000                	unimp
            ti_2[i] = ti_1[i];
     876:	8200                	0x8200
     878:	0008                	0x8
            ti_1[i] = ti[i];
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
            qi_1[i] = 0;
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
        for (i = 0; i < N + 1; ++i) {
     88c:	0f1d                	addi	t5,t5,7
            if (((ri_2[0] * j) % mod) == 1)
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
     898:	1d00                	addi	s0,sp,688
     89a:	068d                	addi	a3,a3,3
     89c:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a2:	0000083b          	0x83b
        for (i = 0; i < N + 1; ++i) {
     8a6:	0900                	addi	s0,sp,144
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b4:	1800                	addi	s0,sp,48
int* generate_keys(int N, int p, int q){
     8b6:	1e00                	addi	s0,sp,816
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     900:	c220                	sw	s0,64(a2)
     902:	0005                	c.nop	1
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	000005bb          	0x5bb
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
     91a:	ec21                	bnez	s0,972 <generate_keys+0xbc>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	ab22                	fsd	fs0,400(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	11cc                	addi	a1,sp,228
     946:	0000                	unimp
     948:	7222                	flw	ft4,40(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1424                	addi	s1,sp,552
     958:	0000                	unimp
     95a:	2a22                	fld	fs4,8(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	167c                	addi	a5,sp,812
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
    int polyR[N+1];
     976:	0069                	c.nop	26
     978:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	48220063          	beq	tp,sp,dfa <memcpy+0x80>
    int polyR[N+1];
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
    polyR[N] = 1;
     98a:	18d4                	addi	a3,sp,116
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001a6403          	0x1a6403
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	5f24                	lw	s1,120(a4)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	11c8                	addi	a0,sp,228
     9d6:	0000                	unimp
     9d8:	db25                	beqz	a4,948 <generate_keys+0x92>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	0256                	slli	tp,tp,0x15
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	0000                	unimp
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
     9f4:	0408                	addi	a0,sp,512
     9f6:	0000                	unimp
    polyR[0] = -1;
     9f8:	5701                	li	a4,-32
     9fa:	0a02                	c.slli64	s4
    for(i = 1; i < N; ++i){
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x15c>
     a00:	0000                	unimp
     a02:	0000                	unimp
    for (i = N; i < 55; ++i ){
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	0258                	addi	a4,sp,260
    for(i = 0; i < N; ++i){
     a0c:	630a                	flw	ft6,128(sp)
        random_keys[i] = f[i];
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
    for(i = 0; i < N; ++i){
     a16:	00000347          	fmsub.s	ft6,ft0,ft0,ft0,rne
     a1a:	5901                	li	s2,-32
     a1c:	0a02                	c.slli64	s4
    for(i = N; i < (2*N); ++i){
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x17e>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
        random_keys[i] = g[i-N];
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	025a                	slli	tp,tp,0x16
     a2c:	5d09                	li	s10,-30
    for(i = N; i < (2*N); ++i){
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
    for(i = (2*N); i < (3*N); ++i){
     a32:	01007027          	0x1007027
     a36:	5d09025b          	0x5d09025b
    fp = ext_euclid(polyR, f, (N+1), p);
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	025c                	addi	a5,sp,260
    for(i = (2*N); i < (3*N); ++i){
     a44:	5d09                	li	s10,-30
        random_keys[i] = fp[i-(2*N)];
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	c328                	sw	a0,64(a4)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    for(i = (2*N); i < (3*N); ++i){
     a50:	025e                	slli	tp,tp,0x17
    fq = ext_euclid(polyR, f, (N+1), q);
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0xbe>
     a5a:	05632677          	0x5632677
    for(i = (3*N); i < (4*N); ++i){
     a5e:	0000                	unimp
     a60:	5f01                	li	t5,-32
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
        random_keys[i] = fq[i-(3*N)];
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
    for(i = (3*N); i < (4*N); ++i){
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    fg = polymult2(fq, N, g, N, 0);
     a72:	0260                	addi	s0,sp,268
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	6101                	0x6101
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a88:	0000                	unimp
     a8a:	8e26                	mv	t3,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     a90:	0262                	slli	tp,tp,0x18
     a92:	af09                	j	11a4 <__DTOR_END__+0x15c>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0279                	addi	tp,tp,30
     a9e:	0000                	unimp
     aa0:	6301                	0x6301
    for(i = (4*N); i < (5*N); ++i){
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     aa8:	2726                	fld	fa4,72(sp)
     aaa:	0004                	0x4
        random_keys[i] = polyR[i-(5*N)];
     aac:	0100                	addi	s0,sp,128
     aae:	0264                	addi	s1,sp,268
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0xfc>
     ab2:	6500000b          	0x6500000b
    for(i = (5*N); i < (6*N+1); ++i){
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	6501                	0x6501
     abe:	0902                	c.slli64	s2
}
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000f282b          	0xf282b
     acc:	8300                	0x8300
     ace:	001a                	c.slli	zero,0x6
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	0803055b          	0x803055b
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	000f462b          	0xf462b
     af0:	9500                	0x9500
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <reset_handler+0x32>
        polyR[i] = 0;
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x196>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
    for(i = 1; i < N; ++i){
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	0fc6                	slli	t6,t6,0x11
        f[i] = 0;
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
        g[i] = 0;
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
    for (i = N; i < 55; ++i ){
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x18e>
        random_keys[i] = f[i];
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x17d>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	0fe8                	addi	a0,sp,988
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
    for(i = 0; i < N; ++i){
     b3a:	0000                	unimp
        random_keys[i] = f[i];
     b3c:	012c                	addi	a1,sp,136
    for(i = 0; i < N; ++i){
     b3e:	025a                	slli	tp,tp,0x16
        random_keys[i] = g[i-N];
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
    for(i = N; i < (2*N); ++i){
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x8a>
     b4e:	5d01                	li	s10,-32
        random_keys[i] = fp[i-(2*N)];
     b50:	7af09103          	lh	sp,1967(ra) # 114f <__DTOR_END__+0x107>
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
    for(i = (2*N); i < (3*N); ++i){
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
        random_keys[i] = fq[i-(3*N)];
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b6e:	0b79                	addi	s6,s6,30
        random_keys[i] = fq[i-(3*N)];
     b70:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b72:	690a                	flw	fs2,128(sp)
        fg[i] = fg[i]*p;
     b74:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
        fg[i] = fg[i]*p;
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
    for(i = 0; i < (2*N-1); ++i){
     b82:	692e                	flw	fs2,200(sp)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0200                	addi	s0,sp,256
    temp = polymult(public_key,N,random_val,48,q,0);
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
    for(i = 0; i < 48; ++i){
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01f8                	addi	a4,sp,204
        temp[i] = temp[i] + message[i];
     be8:	0000                	unimp
     bea:	2a01                	jal	cfa <ntru_deceypt+0xbe>
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <ntru_encyrpt+0x5c>
     bf2:	0c3c                	addi	a5,sp,536
     bf4:	0000                	unimp
     bf6:	00c8                	addi	a0,sp,68
     bf8:	0000                	unimp
    for(i = 0; i < 48; ++i){
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	022a                	slli	tp,tp,0xa
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
     c12:	2a01                	jal	d22 <reset_handler+0x1a>
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
}
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	022a                	slli	tp,tp,0xa
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
        CT[i-(2*N)] = CT[i];
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
     c30:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c32:	2a01                	jal	d42 <reset_handler+0x3a>
     c34:	2d02                	fld	fs10,0(sp)
        CT[i-(2*N)] = CT[i];
     c36:	00000b63          	beqz	zero,c4c <ntru_deceypt+0x10>
    for(i = (2*N); i < (3*N); ++i){
     c3a:	0000028b          	0x28b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c3e:	8e31                	xor	a2,a2,a2
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     c44:	022a                	slli	tp,tp,0xa
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	0408                	addi	a0,sp,512
     c52:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c54:	2a01                	jal	d64 <zero_loop>
     c56:	5402                	lw	s0,32(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	00000b63          	beqz	zero,c6e <ntru_deceypt+0x32>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c60:	9531                	srai	a0,a0,0x2c
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	022a                	slli	tp,tp,0xa
     c68:	6366                	flw	ft6,88(sp)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c6a:	0f00000b          	0xf00000b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x172>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c72:	02e4                	addi	s1,sp,332
     c74:	0000                	unimp
     c76:	2c01                	jal	e86 <memset+0x2e>
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_deceypt+0x54>
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	022d                	addi	tp,tp,11
    for(i = (2*N); i < ((2*N)+N); ++i){
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x182>
        if(a2[i] <= q/2)
     c8e:	3261                	jal	616 <polydiv+0x1ac>
     c90:	0100                	addi	s0,sp,128
     c92:	022e                	slli	tp,tp,0xb
    for (i = 0; i < N; ++i){
     c94:	630a                	flw	ft6,128(sp)
     c96:	5900000b          	0x5900000b
    c = polymult2(secret_key_fp,N,a2,N,0);
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x182>
     c9e:	2f010063          	beq	sp,a6,f7e <main+0x7e>
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0x7e>
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	3001                	jal	4b0 <polydiv+0x46>
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x8e>
}
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	0231                	addi	tp,tp,12
     cc2:	5d09                	li	s10,-30
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x192>
     ccc:	0c72                	slli	s8,s8,0x1c
        a2[i-(2*N)] = a2[i];
     cce:	0000                	unimp
     cd0:	163d                	addi	a2,a2,-17
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
        a2[i-(2*N)] = a2[i];
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
        if(a2[i] <= q/2)
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
            a2[i] = (-1)*(q-a2[i]);
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
    for (i = 0; i < N; ++i){
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
        c2[i-(2*N)] = c2[i];
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000c822b          	0xc822b
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfc:	c800                	sw	s0,16(s0)
        c2[i-(2*N)] = c2[i];
     cfe:	1e000013          	li	zero,480
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000ca62b          	0xca62b
     d22:	3d00                	fld	fs0,56(a0)
     d24:	0016                	c.slli	zero,0x5
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0xd6>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0cb2                	slli	s9,s9,0xc
     d46:	0000                	unimp
     d48:	13c8                	addi	a0,sp,484
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	0006572f          	0x6572f
     d6a:	0100                	addi	s0,sp,128
     d6c:	0208                	addi	a0,sp,256
     d6e:	6306                	flw	ft6,64(sp)
     d70:	a800000b          	0xa800000b
     d74:	9400000b          	0x9400000b
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	959c                	0x959c
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
     d84:	0801                	addi	a6,a6,0
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0208                	addi	a0,sp,256
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
     da4:	0801                	addi	a6,a6,0
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <memcpy+0x44>
     dac:	0000049b          	0x49b
     db0:	6331                	lui	t1,0xc
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	0208                	addi	a0,sp,256
     db8:	6334                	flw	fa3,64(a4)
     dba:	c700000b          	0xc700000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	0695                	addi	a3,a3,5
     dc4:	0000                	unimp
     dc6:	0801                	addi	a6,a6,0
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <memcpy+0x66>
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
     dd2:	d429                	beqz	s0,d1c <reset_handler+0x14>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
     dd8:	020a                	slli	tp,tp,0x2
     dda:	630a                	flw	ft6,128(sp)
     ddc:	3200000b          	0x3200000b
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	630a020b          	0x630a020b
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	039c                	addi	a5,sp,448
     df0:	0000                	unimp
     df2:	0d01                	addi	s10,s10,0
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	5326                	lw	t1,104(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	020e                	slli	tp,tp,0x3
     e06:	630a                	flw	ft6,128(sp)
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	0f01                	addi	t5,t5,0
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	0548                	addi	a0,sp,644
     e1c:	0000                	unimp
     e1e:	000bd02b          	0xbd02b
     e22:	8300                	0x8300
     e24:	001a                	c.slli	zero,0x6
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	1048                	addi	a0,sp,36
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0be2                	slli	s7,s7,0x18
     e44:	0000                	unimp
     e46:	175d                	addi	a4,a4,-9
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	0084                	addi	s1,sp,64
     e54:	012c                	addi	a1,sp,136
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 0e2d      	0xe2d0030015f
     e74:	000c                	0xc
     e76:	c800                	sw	s0,16(s0)
     e78:	2c000013          	li	zero,704
     e7c:	5b01                	li	s6,-32
     e7e:	7902                	flw	fs2,32(sp)
     e80:	2c00                	fld	fs0,24(s0)
     e82:	5c01                	li	s8,-32
     e84:	8302                	jr	t1
     e86:	2c00                	fld	fs0,24(s0)
     e88:	5d01                	li	s10,-32
     e8a:	7802                	flw	fa6,32(sp)
     e8c:	2c01                	jal	109c <__DTOR_END__+0x54>
     e8e:	5e01                	li	t3,-32
     e90:	8202                	jr	tp
     e92:	0000                	unimp
     e94:	2f00                	fld	fs0,24(a4)
     e96:	033e                	slli	t1,t1,0xf
     e98:	0000                	unimp
     e9a:	af01                	j	15aa <product2+0x186>
     e9c:	0601                	addi	a2,a2,0
     e9e:	00000b63          	beqz	zero,eb4 <memset+0x5c>
     ea2:	08b6                	slli	a7,a7,0xd
     ea4:	0000                	unimp
     ea6:	02f2                	slli	t0,t0,0x1c
     ea8:	0000                	unimp
     eaa:	9c01                	0x9c01
     eac:	1045                	c.nop	-15
     eae:	0000                	unimp
     eb0:	4e30                	lw	a2,88(a2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	5d1801af          	0x5d1801af
     eb8:	0000                	unimp
     eba:	8a00                	0x8a00
     ebc:	0005                	c.nop	1
     ebe:	3000                	fld	fs0,32(s0)
     ec0:	0070                	addi	a2,sp,12
     ec2:	af01                	j	15d2 <product2+0x1ae>
     ec4:	1f01                	addi	t5,t5,-32
     ec6:	005d                	c.nop	23
     ec8:	0000                	unimp
     eca:	000005db          	0x5db
     ece:	7130                	flw	fa2,96(a0)
     ed0:	0100                	addi	s0,sp,128
     ed2:	5d2601af          	0x5d2601af
     ed6:	0000                	unimp
     ed8:	1200                	addi	s0,sp,288
     eda:	0006                	c.slli	zero,0x1
     edc:	3200                	fld	fs0,32(a2)
     ede:	0066                	c.slli	zero,0x19
     ee0:	b201                	j	7e0 <ext_euclid+0x174>
     ee2:	0901                	addi	s2,s2,0
     ee4:	1045                	c.nop	-15
     ee6:	0000                	unimp
     ee8:	7c989103          	lh	sp,1993(a7)
     eec:	6732                	flw	fa4,12(sp)
     eee:	0100                	addi	s0,sp,128
     ef0:	450901b3          	0x450901b3
     ef4:	0010                	0x10
     ef6:	0300                	addi	s0,sp,384
     ef8:	f491                	bnez	s1,e04 <memcpy+0x8a>
     efa:	2a7d                	jal	10b8 <__DTOR_END__+0x70>
     efc:	7066                	flw	ft0,120(sp)
     efe:	0100                	addi	s0,sp,128
int main(){
     f00:	01b5                	addi	gp,gp,13
     f02:	630a                	flw	ft6,128(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f04:	4900000b          	0x4900000b
     f08:	0006                	c.slli	zero,0x1
     f0a:	2a00                	fld	fs0,16(a2)
     f0c:	7166                	flw	ft2,120(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	01b6                	slli	gp,gp,0xd
int main(){
     f12:	630a                	flw	ft6,128(sp)
     f14:	5c00000b          	0x5c00000b
     f18:	0006                	c.slli	zero,0x1
     f1a:	2a00                	fld	fs0,16(a2)
     f1c:	6766                	flw	fa4,88(sp)
     f1e:	0100                	addi	s0,sp,128
     f20:	630a01b7          	lui	gp,0x630a0
    resultkon[0] = 0xaaaaaaa0;
     f24:	7a00000b          	0x7a00000b
     f28:	0006                	c.slli	zero,0x1
     f2a:	2a00                	fld	fs0,16(a2)
     f2c:	6b70                	flw	fa2,84(a4)
     f2e:	0100                	addi	s0,sp,128
     f30:	01b8                	addi	a4,sp,200
     f32:	630a                	flw	ft6,128(sp)
    keys = generate_keys(N, p, q);
     f34:	9800000b          	0x9800000b
     f38:	0006                	c.slli	zero,0x1
     f3a:	2600                	fld	fs0,8(a2)
     f3c:	0695                	addi	a3,a3,5
    resultkon[0] = 0xaaaaaaa0;
     f3e:	0000                	unimp
    resultkon[0] = 0xaaaaaaa1;
     f40:	b901                	j	b50 <generate_keys+0x29a>
     f42:	0901                	addi	s2,s2,0
    keys = generate_keys(N, p, q);
     f44:	1055                	c.nop	-11
    resultkon[0] = 0xaaaaaaa1;
     f46:	0000                	unimp
     f48:	06b6                	slli	a3,a3,0xd
    for(i = 0; i < N; ++i){
     f4a:	0000                	unimp
     f4c:	692a                	flw	fs2,136(sp)
        secret_key_f[i] = keys[i];
     f4e:	0100                	addi	s0,sp,128
     f50:	01ba                	slli	gp,gp,0xe
     f52:	5d09                	li	s10,-30
     f54:	0000                	unimp
     f56:	1900                	addi	s0,sp,176
     f58:	26000007          	0x26000007
    for(i = 0; i < N; ++i){
     f5c:	03d4                	addi	a3,sp,452
     f5e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     f60:	bb01                	j	c70 <ntru_deceypt+0x34>
     f62:	0a01                	addi	s4,s4,0
     f64:	00000b63          	beqz	zero,f7a <main+0x7a>
     f68:	0855                	addi	a6,a6,21
     f6a:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
     f6c:	00006933          	or	s2,zero,zero
     f70:	6d00                	flw	fs0,24(a0)
     f72:	0008                	0x8
     f74:	2b00                	fld	fs0,16(a4)
    for(i = (2*N); i < (3*N); ++i){
     f76:	08fc                	addi	a5,sp,92
     f78:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     f7a:	1a8e                	slli	s5,s5,0x23
     f7c:	0000                	unimp
     f7e:	0f95                	addi	t6,t6,5
     f80:	0000                	unimp
     f82:	012c                	addi	a1,sp,136
     f84:	035a                	slli	t1,t1,0x16
        public_key[i-(4*N)] = keys[i];
     f86:	a478                	fsd	fa4,200(s0)
     f88:	2c7c                	fld	fa5,216(s0)
     f8a:	5b01                	li	s6,-32
     f8c:	3001                	jal	78c <ext_euclid+0x120>
     f8e:	012c                	addi	a1,sp,136
    for(i = (4*N); i < (5*N); ++i){
     f90:	025c                	addi	a5,sp,260
     f92:	d008                	sw	a0,32(s0)
     f94:	2b00                	fld	fs0,16(a4)
     f96:	097c                	addi	a5,sp,156
     f98:	0000                	unimp
     f9a:	1a8e                	slli	s5,s5,0x23
        ring_poly[i-(5*N)] = keys[i];
     f9c:	0000                	unimp
     f9e:	0fb5                	addi	t6,t6,13
     fa0:	0000                	unimp
     fa2:	012c                	addi	a1,sp,136
     fa4:	035a                	slli	t1,t1,0x16
    for(i = (5*N); i < (6*N+1); ++i){
     fa6:	f878                	fsw	fa4,116(s0)
     fa8:	2c7d                	jal	1266 <_bss_start+0x9a>
    resultkon[0] = 0xbbbbbbb0;
     faa:	5b01                	li	s6,-32
     fac:	3001                	jal	7ac <ext_euclid+0x140>
     fae:	012c                	addi	a1,sp,136
     fb0:	025c                	addi	a5,sp,260
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb2:	d808                	sw	a0,48(s0)
     fb4:	2b00                	fld	fs0,16(a4)
     fb6:	0a44                	addi	s1,sp,276
     fb8:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
     fba:	1068                	addi	a0,sp,44
     fbc:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fbe:	0fdc                	addi	a5,sp,980
     fc0:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     fc2:	012c                	addi	a1,sp,136
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fc4:	025a                	slli	tp,tp,0x16
    resultkon[0] = 0xbbbbbbb1;
     fc6:	0072                	c.slli	zero,0x1c
    resultkon[0] = 0xccccccc0;
     fc8:	012c                	addi	a1,sp,136
     fca:	9878035b          	0x9878035b
     fce:	2c7c                	fld	fa5,216(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd0:	5c01                	li	s8,-32
    resultkon[0] = 0xccccccc0;
     fd2:	8502                	jr	a0
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fd4:	2c00                	fld	fs0,24(s0)
     fd6:	5d01                	li	s10,-32
     fd8:	8702                	jr	a4
     fda:	0000                	unimp
     fdc:	000a5e2b          	0xa5e2b
     fe0:	6800                	flw	fs0,16(s0)
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
    resultkon[0] = 0xccccccc1;	
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
            resultkon[0] = 0xDEDEDEDE;
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xccccccc1;	
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
            resultkon[0] = 0xDEDEDEDE;
     ff6:	012c                	addi	a1,sp,136
    for(i = 0; i < 32; ++i){
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
        if(!(message[i] == Dec_Message[i])){
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	0086                	slli	ra,ra,0x1
    1002:	2b00                	fld	fs0,16(a4)
    1004:	0a7c                	addi	a5,sp,284
    1006:	0000                	unimp
    1008:	163d                	addi	a2,a2,-17
    100a:	0000                	unimp
            resultkon[0] = 0xBABABABA;
    100c:	1028                	addi	a0,sp,40
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	0082025b          	0x82025b
}
    1016:	012c                	addi	a1,sp,136
    1018:	025c                	addi	a5,sp,260
    101a:	0089                	addi	ra,ra,2
    101c:	012c                	addi	a1,sp,136
    101e:	025d                	addi	tp,tp,23
    1020:	0082                	c.slli64	ra
    1022:	012c                	addi	a1,sp,136
    1024:	015e                	slli	sp,sp,0x17
    1026:	0030                	addi	a2,sp,8
    1028:	902d                	srli	s0,s0,0x2b
    102a:	000a                	c.slli	zero,0x2
    102c:	c800                	sw	s0,16(s0)
            resultkon[0] = 0xDEDEDEDE;
    102e:	2c000013          	li	zero,704
    for(i = 0; i < 32; ++i){
    1032:	5c01                	li	s8,-32
    1034:	7202                	flw	ft4,32(sp)
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5d01                	li	s10,-32
    103a:	8502                	jr	a0
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5e01                	li	t3,-32
    1040:	8602                	jr	a2
    1042:	0000                	unimp
    1044:	0900                	addi	s0,sp,144
    1046:	005d                	c.nop	23
    1048:	0000                	unimp
    104a:	1055                	c.nop	-11
    104c:	0000                	unimp
    104e:	690a                	flw	fs2,128(sp)
    1050:	0000                	unimp
    1052:	3600                	fld	fs0,40(a2)
    1054:	0900                	addi	s0,sp,144
    1056:	005d                	c.nop	23
    1058:	0000                	unimp
    105a:	1068                	addi	a0,sp,44
    105c:	0000                	unimp
    105e:	6934                	flw	fa3,80(a0)
    1060:	0000                	unimp
    1062:	6c00                	flw	fs0,24(s0)
    1064:	0000000f          	fence	unknown,unknown
    1068:	00037b2f          	0x37b2f
    106c:	0100                	addi	s0,sp,128
    106e:	63060137          	lui	sp,0x63060
    1072:	6c00000b          	0x6c00000b
    1076:	0006                	c.slli	zero,0x1
    1078:	4a00                	lw	s0,16(a2)
    107a:	0002                	c.slli64	zero
    107c:	0100                	addi	s0,sp,128
    107e:	439c                	lw	a5,0(a5)
    1080:	31000013          	li	zero,784
    1084:	0695                	addi	a3,a3,5
    1086:	0000                	unimp
    1088:	3701                	jal	f88 <main+0x88>
    108a:	1601                	addi	a2,a2,-32
    108c:	00000b63          	beqz	zero,10a2 <__DTOR_END__+0x5a>
    1090:	000008b3          	add	a7,zero,zero
    1094:	bb31                	j	db0 <memcpy+0x36>
    1096:	0001                	nop
    1098:	0100                	addi	s0,sp,128
    109a:	63220137          	lui	sp,0x63220
    109e:	ed00000b          	0xed00000b
    10a2:	0008                	0x8
    10a4:	3100                	fld	fs0,32(a0)
    10a6:	0012                	c.slli	zero,0x4
    10a8:	0000                	unimp
    10aa:	3701                	jal	faa <main+0xaa>
    10ac:	2d01                	jal	16bc <result+0x40>
    10ae:	005d                	c.nop	23
    10b0:	0000                	unimp
    10b2:	00000927          	0x927
    10b6:	6d30                	flw	fa2,88(a0)
    10b8:	0100646f          	jal	s0,70c8 <_stack_len+0x30c8>
    10bc:	5d370137          	lui	sp,0x5d370
    10c0:	0000                	unimp
    10c2:	5e00                	lw	s0,56(a2)
    10c4:	0009                	c.nop	2
    10c6:	2600                	fld	fs0,8(a2)
    10c8:	02bd                	addi	t0,t0,15
    10ca:	0000                	unimp
    10cc:	3a01                	jal	9dc <generate_keys+0x126>
    10ce:	0a01                	addi	s4,s4,0
    10d0:	00000b63          	beqz	zero,10e6 <__DTOR_END__+0x9e>
    10d4:	0995                	addi	s3,s3,5
    10d6:	0000                	unimp
    10d8:	4e2a                	lw	t3,136(sp)
    10da:	0100                	addi	s0,sp,128
    10dc:	5d09013b          	0x5d09013b
    10e0:	0000                	unimp
    10e2:	ad00                	fsd	fs0,24(a0)
    10e4:	0009                	c.nop	2
    10e6:	2a00                	fld	fs0,16(a2)
    10e8:	0069                	c.nop	26
    10ea:	3b01                	jal	dfa <memcpy+0x80>
    10ec:	0c01                	addi	s8,s8,0
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09e8                	addi	a0,sp,220
    10f4:	0000                	unimp
    10f6:	6a2a                	flw	fs4,136(sp)
    10f8:	0100                	addi	s0,sp,128
    10fa:	5d0f013b          	0x5d0f013b
    10fe:	0000                	unimp
    1100:	9100                	0x9100
    1102:	2600000b          	0x2600000b
    1106:	0526                	slli	a0,a0,0x9
    1108:	0000                	unimp
    110a:	3c01                	jal	b1a <generate_keys+0x264>
    110c:	0901                	addi	s2,s2,0
    110e:	00001343          	fmadd.s	ft6,ft0,ft0,ft0,rtz
    1112:	00000baf          	0xbaf
    1116:	a926                	fsd	fs1,144(sp)
    1118:	0005                	c.nop	1
    111a:	0100                	addi	s0,sp,128
    111c:	013d                	addi	sp,sp,15
    111e:	5609                	li	a2,-30
    1120:	cf000013          	li	zero,-784
    1124:	2a00000b          	0x2a00000b
    1128:	6972                	flw	fs2,28(sp)
    112a:	0100                	addi	s0,sp,128
    112c:	013e                	slli	sp,sp,0xf
    112e:	6909                	lui	s2,0x2
    1130:	ef000013          	li	zero,-272
    1134:	2600000b          	0x2600000b
    1138:	00000443          	fmadd.s	fs0,ft0,ft0,ft0,rne
    113c:	4001                	c.li	zero,0
    113e:	0901                	addi	s2,s2,0
    1140:	137c                	addi	a5,sp,428
    1142:	0000                	unimp
    1144:	00000c0f          	0xc0f
    1148:	742a                	flw	fs0,168(sp)
    114a:	0069                	c.nop	26
    114c:	4101                	li	sp,0
    114e:	0901                	addi	s2,s2,0
    1150:	0000138f          	0x138f
    1154:	0c45                	addi	s8,s8,17
    1156:	0000                	unimp
    1158:	5b26                	lw	s6,104(sp)
    115a:	0004                	0x4
    115c:	0100                	addi	s0,sp,128
    115e:	0142                	slli	sp,sp,0x10
    1160:	a209                	j	1262 <_bss_start+0x96>
    1162:	65000013          	li	zero,1616
    1166:	000c                	0xc
    1168:	2600                	fld	fs0,8(a2)
    116a:	00000253          	fadd.s	ft4,ft0,ft0,rne
    116e:	4301                	li	t1,0
    1170:	0901                	addi	s2,s2,0
    1172:	13b5                	addi	t2,t2,-19
    1174:	0000                	unimp
    1176:	00000c9b          	0xc9b
    117a:	722a                	flw	ft4,168(sp)
    117c:	7365                	lui	t1,0xffff9
    117e:	0100                	addi	s0,sp,128
    1180:	0144                	addi	s1,sp,132
    1182:	630a                	flw	ft6,128(sp)
    1184:	f500000b          	0xf500000b
    1188:	000c                	0xc
    118a:	2600                	fld	fs0,8(a2)
    118c:	0182                	c.slli64	gp
    118e:	0000                	unimp
    1190:	4501                	li	a0,0
    1192:	0a01                	addi	s4,s4,0
    1194:	00000b63          	beqz	zero,11aa <__DTOR_END__+0x162>
    1198:	00000d13          	li	s10,0
    119c:	8726                	mv	a4,s1
    119e:	0001                	nop
    11a0:	0100                	addi	s0,sp,128
    11a2:	0146                	slli	sp,sp,0x11
    11a4:	630a                	flw	ft6,128(sp)
    11a6:	3100000b          	0x3100000b
    11aa:	000d                	c.nop	3
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	0414                	addi	a3,sp,512
    11b0:	0000                	unimp
    11b2:	4701                	li	a4,0
    11b4:	0901                	addi	s2,s2,0
    11b6:	005d                	c.nop	23
    11b8:	0000                	unimp
    11ba:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
    11be:	00006933          	or	s2,zero,zero
    11c2:	a800                	fsd	fs0,16(s0)
    11c4:	000d                	c.nop	3
    11c6:	3300                	fld	fs0,32(a4)
    11c8:	0069                	c.nop	26
    11ca:	0000                	unimp
    11cc:	00000de3          	beqz	zero,19e6 <ti_2+0x112>
    11d0:	00006933          	or	s2,zero,zero
    11d4:	1e00                	addi	s0,sp,816
    11d6:	000e                	c.slli	zero,0x3
    11d8:	3300                	fld	fs0,32(a4)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	0e59                	addi	t3,t3,22
    11e0:	0000                	unimp
    11e2:	00006933          	or	s2,zero,zero
    11e6:	9400                	0x9400
    11e8:	000e                	c.slli	zero,0x3
    11ea:	3300                	fld	fs0,32(a4)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	00000ecf          	fnmadd.s	ft9,ft0,ft0,ft0,rne
    11f4:	00006933          	or	s2,zero,zero
    11f8:	0a00                	addi	s0,sp,272
    11fa:	2b00000f          	0x2b00000f
    11fe:	06f2                	slli	a3,a3,0x1c
    1200:	0000                	unimp
    1202:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    1206:	121d                	addi	tp,tp,-25
    1208:	0000                	unimp
    120a:	012c                	addi	a1,sp,136
    120c:	025a                	slli	tp,tp,0x16
    120e:	012c0083          	lb	ra,18(s8)
    1212:	0079025b          	0x79025b
    1216:	012c                	addi	a1,sp,136
    1218:	025c                	addi	a5,sp,260
    121a:	2b00008b          	0x2b00008b
    121e:	06fa                	slli	a3,a3,0x1e
    1220:	0000                	unimp
    1222:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    1226:	123d                	addi	tp,tp,-17
    1228:	0000                	unimp
    122a:	012c                	addi	a1,sp,136
    122c:	025a                	slli	tp,tp,0x16
    122e:	0085                	addi	ra,ra,1
    1230:	012c                	addi	a1,sp,136
    1232:	0079025b          	0x79025b
    1236:	012c                	addi	a1,sp,136
    1238:	025c                	addi	a5,sp,260
    123a:	2b00008b          	0x2b00008b
    123e:	0706                	slli	a4,a4,0x1
    1240:	0000                	unimp
    1242:	13c8                	addi	a0,sp,484
    1244:	0000                	unimp
    1246:	1269                	addi	tp,tp,-6
    1248:	0000                	unimp
    124a:	012c                	addi	a1,sp,136
    124c:	025a                	slli	tp,tp,0x16
    124e:	012c0083          	lb	ra,18(s8)
    1252:	008b025b          	0x8b025b
    1256:	012c                	addi	a1,sp,136
    1258:	025c                	addi	a5,sp,260
    125a:	0085                	addi	ra,ra,1
    125c:	012c                	addi	a1,sp,136
    125e:	025d                	addi	tp,tp,23
    1260:	012c008b          	0x12c008b
    1264:	025e                	slli	tp,tp,0x17
    1266:	0079                	c.nop	30
    1268:	2b00                	fld	fs0,16(a4)
    126a:	0722                	slli	a4,a4,0x8
    126c:	0000                	unimp
    126e:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    1272:	1289                	addi	t0,t0,-30
    1274:	0000                	unimp
    1276:	012c                	addi	a1,sp,136
    1278:	025a                	slli	tp,tp,0x16
    127a:	0072                	c.slli	zero,0x1c
    127c:	012c                	addi	a1,sp,136
    127e:	0079025b          	0x79025b
    1282:	012c                	addi	a1,sp,136
    1284:	025c                	addi	a5,sp,260
    1286:	2b00008b          	0x2b00008b
    128a:	072e                	slli	a4,a4,0xb
    128c:	0000                	unimp
    128e:	13c8                	addi	a0,sp,484
    1290:	0000                	unimp
    1292:	12b5                	addi	t0,t0,-19
    1294:	0000                	unimp
    1296:	012c                	addi	a1,sp,136
    1298:	025a                	slli	tp,tp,0x16
    129a:	0072                	c.slli	zero,0x1c
    129c:	012c                	addi	a1,sp,136
    129e:	008b025b          	0x8b025b
    12a2:	012c                	addi	a1,sp,136
    12a4:	025c                	addi	a5,sp,260
    12a6:	0085                	addi	ra,ra,1
    12a8:	012c                	addi	a1,sp,136
    12aa:	025d                	addi	tp,tp,23
    12ac:	012c008b          	0x12c008b
    12b0:	025e                	slli	tp,tp,0x17
    12b2:	0079                	c.nop	30
    12b4:	2b00                	fld	fs0,16(a4)
    12b6:	073c                	addi	a5,sp,904
    12b8:	0000                	unimp
    12ba:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    12be:	12d5                	addi	t0,t0,-11
    12c0:	0000                	unimp
    12c2:	012c                	addi	a1,sp,136
    12c4:	025a                	slli	tp,tp,0x16
    12c6:	012c0087          	0x12c0087
    12ca:	0079025b          	0x79025b
    12ce:	012c                	addi	a1,sp,136
    12d0:	025c                	addi	a5,sp,260
    12d2:	2b00008b          	0x2b00008b
    12d6:	074a                	slli	a4,a4,0x12
    12d8:	0000                	unimp
    12da:	175d                	addi	a4,a4,-9
    12dc:	0000                	unimp
    12de:	1306                	slli	t1,t1,0x21
    12e0:	0000                	unimp
    12e2:	012c                	addi	a1,sp,136
    12e4:	025a                	slli	tp,tp,0x16
    12e6:	012c0087          	0x12c0087
    12ea:	008b025b          	0x8b025b
    12ee:	012c                	addi	a1,sp,136
    12f0:	025c                	addi	a5,sp,260
    12f2:	0086                	slli	ra,ra,0x1
    12f4:	012c                	addi	a1,sp,136
    12f6:	025d                	addi	tp,tp,23
    12f8:	012c008b          	0x12c008b
    12fc:	025e                	slli	tp,tp,0x17
    12fe:	0079                	c.nop	30
    1300:	012c                	addi	a1,sp,136
    1302:	015f 0030 582b      	0x582b0030015f
    1308:	23000007          	0x23000007
    130c:	0019                	c.nop	6
    130e:	2600                	fld	fs0,8(a2)
    1310:	2c000013          	li	zero,704
    1314:	5a01                	li	s4,-32
    1316:	7202                	flw	ft4,32(sp)
    1318:	2c00                	fld	fs0,24(s0)
    131a:	5b01                	li	s6,-32
    131c:	7902                	flw	fs2,32(sp)
    131e:	2c00                	fld	fs0,24(s0)
    1320:	5c01                	li	s8,-32
    1322:	8b02                	jr	s6
    1324:	0000                	unimp
    1326:	682d                	lui	a6,0xb
    1328:	23000007          	0x23000007
    132c:	0019                	c.nop	6
    132e:	2c00                	fld	fs0,24(s0)
    1330:	5a01                	li	s4,-32
    1332:	8902                	jr	s2
    1334:	2c00                	fld	fs0,24(s0)
    1336:	5b01                	li	s6,-32
    1338:	7902                	flw	fs2,32(sp)
    133a:	2c00                	fld	fs0,24(s0)
    133c:	5c01                	li	s8,-32
    133e:	8b02                	jr	s6
    1340:	0000                	unimp
    1342:	0900                	addi	s0,sp,144
    1344:	005d                	c.nop	23
    1346:	0000                	unimp
    1348:	1356                	slli	t1,t1,0x35
    134a:	0000                	unimp
    134c:	6934                	flw	fa3,80(a0)
    134e:	0000                	unimp
    1350:	be00                	fsd	fs0,56(a2)
    1352:	0011                	c.nop	4
    1354:	0000                	unimp
    1356:	5d09                	li	s10,-30
    1358:	0000                	unimp
    135a:	6900                	flw	fs0,16(a0)
    135c:	34000013          	li	zero,832
    1360:	0069                	c.nop	26
    1362:	0000                	unimp
    1364:	000011c7          	fmsub.s	ft3,ft0,ft0,ft0,rtz
    1368:	0900                	addi	s0,sp,144
    136a:	005d                	c.nop	23
    136c:	0000                	unimp
    136e:	137c                	addi	a5,sp,428
    1370:	0000                	unimp
    1372:	6934                	flw	fa3,80(a0)
    1374:	0000                	unimp
    1376:	d000                	sw	s0,32(s0)
    1378:	0011                	c.nop	4
    137a:	0000                	unimp
    137c:	5d09                	li	s10,-30
    137e:	0000                	unimp
    1380:	8f00                	0x8f00
    1382:	34000013          	li	zero,832
    1386:	0069                	c.nop	26
    1388:	0000                	unimp
    138a:	11d9                	addi	gp,gp,-10
    138c:	0000                	unimp
    138e:	0900                	addi	s0,sp,144
    1390:	005d                	c.nop	23
    1392:	0000                	unimp
    1394:	13a2                	slli	t2,t2,0x28
    1396:	0000                	unimp
    1398:	6934                	flw	fa3,80(a0)
    139a:	0000                	unimp
    139c:	e200                	fsw	fs0,0(a2)
    139e:	0011                	c.nop	4
    13a0:	0000                	unimp
    13a2:	5d09                	li	s10,-30
    13a4:	0000                	unimp
    13a6:	b500                	fsd	fs0,40(a0)
    13a8:	34000013          	li	zero,832
    13ac:	0069                	c.nop	26
    13ae:	0000                	unimp
    13b0:	000011eb          	0x11eb
    13b4:	0900                	addi	s0,sp,144
    13b6:	005d                	c.nop	23
    13b8:	0000                	unimp
    13ba:	13c8                	addi	a0,sp,484
    13bc:	0000                	unimp
    13be:	6934                	flw	fa3,80(a0)
    13c0:	0000                	unimp
    13c2:	f400                	fsw	fs0,40(s0)
    13c4:	0011                	c.nop	4
    13c6:	0000                	unimp
    13c8:	b335                	j	10f4 <__DTOR_END__+0xac>
    13ca:	0001                	nop
    13cc:	0100                	addi	s0,sp,128
    13ce:	06b8                	addi	a4,sp,840
    13d0:	00000b63          	beqz	zero,13e6 <_bss_start+0x21a>
    13d4:	046a                	slli	s0,s0,0x1a
    13d6:	0000                	unimp
    13d8:	0202                	c.slli64	tp
    13da:	0000                	unimp
    13dc:	9c01                	0x9c01
    13de:	15f1                	addi	a1,a1,-4
    13e0:	0000                	unimp
    13e2:	6e36                	flw	ft8,76(sp)
    13e4:	6d75                	lui	s10,0x1d
    13e6:	0100                	addi	s0,sp,128
    13e8:	13b8                	addi	a4,sp,488
    13ea:	00000b63          	beqz	zero,1400 <_bss_start+0x234>
    13ee:	0f45                	addi	t5,t5,17
    13f0:	0000                	unimp
    13f2:	0000fc37          	lui	s8,0xf
    13f6:	0100                	addi	s0,sp,128
    13f8:	1cb8                	addi	a4,sp,632
    13fa:	005d                	c.nop	23
    13fc:	0000                	unimp
    13fe:	0f7f                	0xf7f
    1400:	0000                	unimp
    1402:	00067737          	lui	a4,0x67
    1406:	0100                	addi	s0,sp,128
    1408:	28b8                	fld	fa4,80(s1)
    140a:	00000b63          	beqz	zero,1420 <_bss_start+0x254>
    140e:	0fd0                	addi	a2,sp,980
    1410:	0000                	unimp
    1412:	00069b37          	lui	s6,0x69
    1416:	0100                	addi	s0,sp,128
    1418:	33b8                	fld	fa4,96(a5)
    141a:	005d                	c.nop	23
    141c:	0000                	unimp
    141e:	1020                	addi	s0,sp,40
    1420:	0000                	unimp
    1422:	6d36                	flw	fs10,76(sp)
    1424:	0100646f          	jal	s0,7434 <_stack_len+0x3434>
    1428:	3fb8                	fld	fa4,120(a5)
    142a:	005d                	c.nop	23
    142c:	0000                	unimp
    142e:	00001057          	0x1057
    1432:	7538                	flw	fa4,104(a0)
    1434:	0100                	addi	s0,sp,128
    1436:	005d09bb          	0x5d09bb
    143a:	0000                	unimp
    143c:	108e                	slli	ra,ra,0x23
    143e:	0000                	unimp
    1440:	6438                	flw	fa4,72(s0)
    1442:	0100                	addi	s0,sp,128
    1444:	005d0bbb          	0x5d0bbb
    1448:	0000                	unimp
    144a:	000010b7          	lui	ra,0x1
    144e:	6439                	lui	s0,0xe
    1450:	0032                	c.slli	zero,0xc
    1452:	bb01                	j	1162 <__DTOR_END__+0x11a>
    1454:	5d0d                	li	s10,-29
    1456:	0000                	unimp
    1458:	3800                	fld	fs0,48(s0)
    145a:	0069                	c.nop	26
    145c:	bb01                	j	116c <__DTOR_END__+0x124>
    145e:	5d10                	lw	a2,56(a0)
    1460:	0000                	unimp
    1462:	d500                	sw	s0,40(a0)
    1464:	0010                	0x10
    1466:	3900                	fld	fs0,48(a0)
    1468:	5f62                	lw	t5,56(sp)
    146a:	004e                	c.slli	zero,0x13
    146c:	bb01                	j	117c <__DTOR_END__+0x134>
    146e:	5d12                	lw	s10,36(sp)
    1470:	0000                	unimp
    1472:	3800                	fld	fs0,48(s0)
    1474:	5f72                	lw	t5,60(sp)
    1476:	0064                	addi	s1,sp,12
    1478:	bb01                	j	1188 <__DTOR_END__+0x140>
    147a:	5d16                	lw	s10,100(sp)
    147c:	0000                	unimp
    147e:	4100                	lw	s0,0(a0)
    1480:	0012                	c.slli	zero,0x4
    1482:	3a00                	fld	fs0,48(a2)
    1484:	02ad                	addi	t0,t0,11
    1486:	0000                	unimp
    1488:	bc01                	j	e98 <memset+0x40>
    148a:	630a                	flw	ft6,128(sp)
    148c:	5f00000b          	0x5f00000b
    1490:	0012                	c.slli	zero,0x4
    1492:	3800                	fld	fs0,48(s0)
    1494:	0076                	c.slli	zero,0x1d
    1496:	be01                	j	fa6 <main+0xa6>
    1498:	f109                	bnez	a0,139a <_bss_start+0x1ce>
    149a:	0015                	c.nop	5
    149c:	7700                	flw	fs0,40(a4)
    149e:	0012                	c.slli	zero,0x4
    14a0:	3800                	fld	fs0,48(s0)
    14a2:	0071                	c.nop	28
    14a4:	bf01                	j	13b4 <_bss_start+0x1e8>
    14a6:	0409                	addi	s0,s0,2
    14a8:	0016                	c.slli	zero,0x5
    14aa:	9700                	0x9700
    14ac:	0012                	c.slli	zero,0x4
    14ae:	3a00                	fld	fs0,48(a2)
    14b0:	000001ab          	0x1ab
    14b4:	c001                	beqz	s0,14b4 <product2+0x90>
    14b6:	630a                	flw	ft6,128(sp)
    14b8:	b700000b          	0xb700000b
    14bc:	0012                	c.slli	zero,0x4
    14be:	3a00                	fld	fs0,48(a2)
    14c0:	0000024f          	fnmadd.s	ft4,ft0,ft0,ft0,rne
    14c4:	c101                	beqz	a0,14c4 <product2+0xa0>
    14c6:	1709                	addi	a4,a4,-30
    14c8:	0016                	c.slli	zero,0x5
    14ca:	d500                	sw	s0,40(a0)
    14cc:	0012                	c.slli	zero,0x4
    14ce:	3a00                	fld	fs0,48(a2)
    14d0:	024d                	addi	tp,tp,19
    14d2:	0000                	unimp
    14d4:	c201                	beqz	a2,14d4 <product2+0xb0>
    14d6:	2a09                	jal	15e8 <product2+0x1c4>
    14d8:	0016                	c.slli	zero,0x5
    14da:	2100                	fld	fs0,0(a0)
    14dc:	33000013          	li	zero,816
    14e0:	0069                	c.nop	26
    14e2:	0000                	unimp
    14e4:	134d                	addi	t1,t1,-13
    14e6:	0000                	unimp
    14e8:	00006933          	or	s2,zero,zero
    14ec:	7b00                	flw	fs0,48(a4)
    14ee:	33000013          	li	zero,816
    14f2:	0069                	c.nop	26
    14f4:	0000                	unimp
    14f6:	13a9                	addi	t2,t2,-22
    14f8:	0000                	unimp
    14fa:	00006933          	or	s2,zero,zero
    14fe:	d700                	sw	s0,40(a4)
    1500:	2b000013          	li	zero,688
    1504:	04ce                	slli	s1,s1,0x13
    1506:	0000                	unimp
    1508:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    150c:	00001523          	sh	zero,10(zero) # a <__DYNAMIC+0xa>
    1510:	012c                	addi	a1,sp,136
    1512:	025a                	slli	tp,tp,0x16
    1514:	0082                	c.slli64	ra
    1516:	012c                	addi	a1,sp,136
    1518:	0083025b          	0x83025b
    151c:	012c                	addi	a1,sp,136
    151e:	025c                	addi	a5,sp,260
    1520:	0079                	c.nop	30
    1522:	2b00                	fld	fs0,16(a4)
    1524:	04dc                	addi	a5,sp,580
    1526:	0000                	unimp
    1528:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    152c:	00001543          	fmadd.s	fa0,ft0,ft0,ft0,rtz
    1530:	012c                	addi	a1,sp,136
    1532:	025a                	slli	tp,tp,0x16
    1534:	0072                	c.slli	zero,0x1c
    1536:	012c                	addi	a1,sp,136
    1538:	0083025b          	0x83025b
    153c:	012c                	addi	a1,sp,136
    153e:	025c                	addi	a5,sp,260
    1540:	0084                	addi	s1,sp,64
    1542:	2b00                	fld	fs0,16(a4)
    1544:	05bc                	addi	a5,sp,712
    1546:	0000                	unimp
    1548:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    154c:	00001563          	bnez	zero,1556 <product2+0x132>
    1550:	012c                	addi	a1,sp,136
    1552:	025a                	slli	tp,tp,0x16
    1554:	0086                	slli	ra,ra,0x1
    1556:	012c                	addi	a1,sp,136
    1558:	0083025b          	0x83025b
    155c:	012c                	addi	a1,sp,136
    155e:	025c                	addi	a5,sp,260
    1560:	0079                	c.nop	30
    1562:	2b00                	fld	fs0,16(a4)
    1564:	05ca                	slli	a1,a1,0x12
    1566:	0000                	unimp
    1568:	175d                	addi	a4,a4,-9
    156a:	0000                	unimp
    156c:	1594                	addi	a3,sp,736
    156e:	0000                	unimp
    1570:	012c                	addi	a1,sp,136
    1572:	025a                	slli	tp,tp,0x16
    1574:	0072                	c.slli	zero,0x1c
    1576:	012c                	addi	a1,sp,136
    1578:	0084025b          	0x84025b
    157c:	012c                	addi	a1,sp,136
    157e:	025c                	addi	a5,sp,260
    1580:	0086                	slli	ra,ra,0x1
    1582:	012c                	addi	a1,sp,136
    1584:	025d                	addi	tp,tp,23
    1586:	0084                	addi	s1,sp,64
    1588:	012c                	addi	a1,sp,136
    158a:	025e                	slli	tp,tp,0x17
    158c:	012c0083          	lb	ra,18(s8) # f012 <_stack+0x1012>
    1590:	015f 0030 d22b      	0xd22b0030015f
    1596:	0005                	c.nop	1
    1598:	2300                	fld	fs0,0(a4)
    159a:	0019                	c.nop	6
    159c:	b400                	fsd	fs0,40(s0)
    159e:	0015                	c.nop	5
    15a0:	2c00                	fld	fs0,24(s0)
    15a2:	5a01                	li	s4,-32
    15a4:	8b02                	jr	s6
    15a6:	2c00                	fld	fs0,24(s0)
    15a8:	5b01                	li	s6,-32
    15aa:	8302                	jr	t1
    15ac:	2c00                	fld	fs0,24(s0)
    15ae:	5c01                	li	s8,-32
    15b0:	7902                	flw	fs2,32(sp)
    15b2:	0000                	unimp
    15b4:	0005e22b          	0x5e22b
    15b8:	2300                	fld	fs0,0(a4)
    15ba:	0019                	c.nop	6
    15bc:	d400                	sw	s0,40(s0)
    15be:	0015                	c.nop	5
    15c0:	2c00                	fld	fs0,24(s0)
    15c2:	5a01                	li	s4,-32
    15c4:	8202                	jr	tp
    15c6:	2c00                	fld	fs0,24(s0)
    15c8:	5b01                	li	s6,-32
    15ca:	8302                	jr	t1
    15cc:	2c00                	fld	fs0,24(s0)
    15ce:	5c01                	li	s8,-32
    15d0:	7902                	flw	fs2,32(sp)
    15d2:	0000                	unimp
    15d4:	f22d                	bnez	a2,1536 <product2+0x112>
    15d6:	0005                	c.nop	1
    15d8:	2300                	fld	fs0,0(a4)
    15da:	0019                	c.nop	6
    15dc:	2c00                	fld	fs0,24(s0)
    15de:	5a01                	li	s4,-32
    15e0:	8702                	jr	a4
    15e2:	2c00                	fld	fs0,24(s0)
    15e4:	5b01                	li	s6,-32
    15e6:	8302                	jr	t1
    15e8:	2c00                	fld	fs0,24(s0)
    15ea:	5c01                	li	s8,-32
    15ec:	7902                	flw	fs2,32(sp)
    15ee:	0000                	unimp
    15f0:	0900                	addi	s0,sp,144
    15f2:	005d                	c.nop	23
    15f4:	0000                	unimp
    15f6:	1604                	addi	s1,sp,800
    15f8:	0000                	unimp
    15fa:	6934                	flw	fa3,80(a0)
    15fc:	0000                	unimp
    15fe:	df00                	sw	s0,56(a4)
    1600:	0014                	0x14
    1602:	0000                	unimp
    1604:	5d09                	li	s10,-30
    1606:	0000                	unimp
    1608:	1700                	addi	s0,sp,928
    160a:	0016                	c.slli	zero,0x5
    160c:	3400                	fld	fs0,40(s0)
    160e:	0069                	c.nop	26
    1610:	0000                	unimp
    1612:	14e8                	addi	a0,sp,620
    1614:	0000                	unimp
    1616:	0900                	addi	s0,sp,144
    1618:	005d                	c.nop	23
    161a:	0000                	unimp
    161c:	162a                	slli	a2,a2,0x2a
    161e:	0000                	unimp
    1620:	6934                	flw	fa3,80(a0)
    1622:	0000                	unimp
    1624:	f100                	fsw	fs0,32(a0)
    1626:	0014                	0x14
    1628:	0000                	unimp
    162a:	5d09                	li	s10,-30
    162c:	0000                	unimp
    162e:	3d00                	fld	fs0,56(a0)
    1630:	0016                	c.slli	zero,0x5
    1632:	3400                	fld	fs0,40(s0)
    1634:	0069                	c.nop	26
    1636:	0000                	unimp
    1638:	14fa                	slli	s1,s1,0x3e
    163a:	0000                	unimp
    163c:	3500                	fld	fs0,40(a0)
    163e:	002a                	c.slli	zero,0xa
    1640:	0000                	unimp
    1642:	8001                	c.srli64	s0
    1644:	6306                	flw	ft6,64(sp)
    1646:	fa00000b          	0xfa00000b
    164a:	0002                	c.slli64	zero
    164c:	7000                	flw	fs0,32(s0)
    164e:	0001                	nop
    1650:	0100                	addi	s0,sp,128
    1652:	1d9c                	addi	a5,sp,752
    1654:	36000017          	auipc	zero,0x36000
    1658:	0061                	c.nop	24
    165a:	8001                	c.srli64	s0
    165c:	6315                	lui	t1,0x5
    165e:	2c00000b          	0x2c00000b
    1662:	0014                	0x14
    1664:	3700                	fld	fs0,40(a4)
    1666:	06ea                	slli	a3,a3,0x1a
    1668:	0000                	unimp
    166a:	8001                	c.srli64	s0
    166c:	5d1c                	lw	a5,56(a0)
    166e:	0000                	unimp
    1670:	6600                	flw	fs0,8(a2)
    1672:	0014                	0x14
    1674:	3600                	fld	fs0,40(a2)
    1676:	0062                	c.slli	zero,0x18
    1678:	8001                	c.srli64	s0
    167a:	6329                	lui	t1,0xa
    167c:	9e00000b          	0x9e00000b
    1680:	0014                	0x14
    1682:	3b00                	fld	fs0,48(a4)
    1684:	06f1                	addi	a3,a3,28
    1686:	0000                	unimp
    1688:	8001                	c.srli64	s0
    168a:	5d30                	lw	a2,120(a0)
    168c:	0000                	unimp
    168e:	0100                	addi	s0,sp,128
    1690:	375d                	jal	1636 <product2+0x212>
    1692:	0516                	slli	a0,a0,0x5
    1694:	0000                	unimp
    1696:	8001                	c.srli64	s0
    1698:	5d3c                	lw	a5,120(a0)
    169a:	0000                	unimp
    169c:	d800                	sw	s0,48(s0)
    169e:	0014                	0x14
    16a0:	3a00                	fld	fs0,48(a2)
    16a2:	063d                	addi	a2,a2,15
    16a4:	0000                	unimp
    16a6:	8301                	c.srli64	a4
    16a8:	1d09                	addi	s10,s10,-30
    16aa:	12000017          	auipc	zero,0x12000
    16ae:	0015                	c.nop	5
    16b0:	3800                	fld	fs0,48(s0)
    16b2:	0069                	c.nop	26
    16b4:	8401                	c.srai64	s0
    16b6:	5d09                	li	s10,-30
    16b8:	0000                	unimp
    16ba:	5600                	lw	s0,40(a2)
    16bc:	0015                	c.nop	5
    16be:	3800                	fld	fs0,48(s0)
    16c0:	006a                	c.slli	zero,0x1a
    16c2:	8401                	c.srai64	s0
    16c4:	00005d0b          	0x5d0b
    16c8:	ff00                	fsw	fs0,56(a4)
    16ca:	0015                	c.nop	5
    16cc:	3800                	fld	fs0,48(s0)
    16ce:	8401006b          	0x8401006b
    16d2:	5d0d                	li	s10,-29
    16d4:	0000                	unimp
    16d6:	4900                	lw	s0,16(a0)
    16d8:	0016                	c.slli	zero,0x5
    16da:	3a00                	fld	fs0,48(a2)
    16dc:	029d                	addi	t0,t0,7
    16de:	0000                	unimp
    16e0:	8501                	c.srai64	a0
    16e2:	630a                	flw	ft6,128(sp)
    16e4:	9700000b          	0x9700000b
    16e8:	0016                	c.slli	zero,0x5
    16ea:	2200                	fld	fs0,0(a2)
    16ec:	000c                	0xc
    16ee:	0000                	unimp
    16f0:	8601                	c.srai64	a2
    16f2:	3809                	jal	f04 <main+0x4>
    16f4:	02000017          	auipc	zero,0x2000
    16f8:	0075                	c.nop	29
    16fa:	973a                	add	a4,a4,a4
    16fc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1700:	174a0987          	0x174a0987
    1704:	0000                	unimp
    1706:	000016af          	0x16af
    170a:	00006933          	or	s2,zero,zero
    170e:	e500                	fsw	fs0,8(a0)
    1710:	0016                	c.slli	zero,0x5
    1712:	3300                	fld	fs0,32(a4)
    1714:	0069                	c.nop	26
    1716:	0000                	unimp
    1718:	171d                	addi	a4,a4,-25
    171a:	0000                	unimp
    171c:	0900                	addi	s0,sp,144
    171e:	005d                	c.nop	23
    1720:	0000                	unimp
    1722:	1738                	addi	a4,sp,936
    1724:	0000                	unimp
    1726:	6934                	flw	fa3,80(a0)
    1728:	0000                	unimp
    172a:	0a00                	addi	s0,sp,272
    172c:	2e000017          	auipc	zero,0x2e000
    1730:	0069                	c.nop	26
    1732:	0000                	unimp
    1734:	8d02                	jr	s10
    1736:	0000                	unimp
    1738:	5d09                	li	s10,-30
    173a:	0000                	unimp
    173c:	4a00                	lw	s0,16(a2)
    173e:	2e000017          	auipc	zero,0x2e000
    1742:	0069                	c.nop	26
    1744:	0000                	unimp
    1746:	8f02                	jr	t5
    1748:	0000                	unimp
    174a:	5d09                	li	s10,-30
    174c:	0000                	unimp
    174e:	5d00                	lw	s0,56(a0)
    1750:	34000017          	auipc	zero,0x34000
    1754:	0069                	c.nop	26
    1756:	0000                	unimp
    1758:	00001713          	slli	a4,zero,0x0
    175c:	3500                	fld	fs0,40(a0)
    175e:	010d                	addi	sp,sp,3
    1760:	0000                	unimp
    1762:	3f01                	jal	1672 <product2+0x24e>
    1764:	6306                	flw	ft6,64(sp)
    1766:	1e00000b          	0x1e00000b
    176a:	0001                	nop
    176c:	dc00                	sw	s0,56(s0)
    176e:	0001                	nop
    1770:	0100                	addi	s0,sp,128
    1772:	e19c                	fsw	fa5,0(a1)
    1774:	0018                	0x18
    1776:	3600                	fld	fs0,40(a2)
    1778:	0061                	c.nop	24
    177a:	3f01                	jal	168a <result+0xe>
    177c:	6314                	flw	fa3,0(a4)
    177e:	5500000b          	0x5500000b
    1782:	37000017          	auipc	zero,0x37000
    1786:	06ea                	slli	a3,a3,0x1a
    1788:	0000                	unimp
    178a:	3f01                	jal	169a <result+0x1e>
    178c:	00005d1b          	0x5d1b
    1790:	8f00                	0x8f00
    1792:	36000017          	auipc	zero,0x36000
    1796:	0062                	c.slli	zero,0x18
    1798:	3f01                	jal	16a8 <result+0x2c>
    179a:	6328                	flw	fa0,64(a4)
    179c:	e000000b          	0xe000000b
    17a0:	37000017          	auipc	zero,0x37000
    17a4:	06f1                	addi	a3,a3,28
    17a6:	0000                	unimp
    17a8:	3f01                	jal	16b8 <result+0x3c>
    17aa:	00005d2f          	0x5d2f
    17ae:	3000                	fld	fs0,32(s0)
    17b0:	0018                	0x18
    17b2:	3600                	fld	fs0,40(a2)
    17b4:	6f6d                	lui	t5,0x1b
    17b6:	0064                	addi	s1,sp,12
    17b8:	3f01                	jal	16c8 <result+0x4c>
    17ba:	00005d3b          	0x5d3b
    17be:	6700                	flw	fs0,8(a4)
    17c0:	0018                	0x18
    17c2:	3700                	fld	fs0,40(a4)
    17c4:	0516                	slli	a0,a0,0x5
    17c6:	0000                	unimp
    17c8:	3f01                	jal	16d8 <result+0x5c>
    17ca:	5d44                	lw	s1,60(a0)
    17cc:	0000                	unimp
    17ce:	9e00                	0x9e00
    17d0:	0018                	0x18
    17d2:	3a00                	fld	fs0,48(a2)
    17d4:	063d                	addi	a2,a2,15
    17d6:	0000                	unimp
    17d8:	4101                	li	sp,0
    17da:	e109                	bnez	a0,17dc <result+0x160>
    17dc:	0018                	0x18
    17de:	cb00                	sw	s0,16(a4)
    17e0:	0018                	0x18
    17e2:	3800                	fld	fs0,48(s0)
    17e4:	0069                	c.nop	26
    17e6:	4201                	li	tp,0
    17e8:	5d09                	li	s10,-30
    17ea:	0000                	unimp
    17ec:	1b00                	addi	s0,sp,432
    17ee:	0019                	c.nop	6
    17f0:	3800                	fld	fs0,48(s0)
    17f2:	006a                	c.slli	zero,0x1a
    17f4:	4201                	li	tp,0
    17f6:	00005d0b          	0x5d0b
    17fa:	db00                	sw	s0,48(a4)
    17fc:	0019                	c.nop	6
    17fe:	3800                	fld	fs0,48(s0)
    1800:	4201006b          	0x4201006b
    1804:	5d0d                	li	s10,-29
    1806:	0000                	unimp
    1808:	2500                	fld	fs0,8(a0)
    180a:	001a                	c.slli	zero,0x6
    180c:	3a00                	fld	fs0,48(a2)
    180e:	028d                	addi	t0,t0,3
    1810:	0000                	unimp
    1812:	4301                	li	t1,0
    1814:	630a                	flw	ft6,128(sp)
    1816:	7300000b          	0x7300000b
    181a:	001a                	c.slli	zero,0x6
    181c:	3a00                	fld	fs0,48(a2)
    181e:	000c                	0xc
    1820:	0000                	unimp
    1822:	4401                	li	s0,0
    1824:	fd09                	bnez	a0,173e <result+0xc2>
    1826:	0018                	0x18
    1828:	8b00                	0x8b00
    182a:	001a                	c.slli	zero,0x6
    182c:	3a00                	fld	fs0,48(a2)
    182e:	00000397          	auipc	t2,0x0
    1832:	4501                	li	a0,0
    1834:	1009                	c.nop	-30
    1836:	0019                	c.nop	6
    1838:	c200                	sw	s0,0(a2)
    183a:	001a                	c.slli	zero,0x6
    183c:	3300                	fld	fs0,32(a4)
    183e:	0069                	c.nop	26
    1840:	0000                	unimp
    1842:	1b31                	addi	s6,s6,-20
    1844:	0000                	unimp
    1846:	00006933          	or	s2,zero,zero
    184a:	8600                	0x8600
    184c:	3300001b          	0x3300001b
    1850:	0069                	c.nop	26
    1852:	0000                	unimp
    1854:	1bc9                	addi	s7,s7,-14
    1856:	0000                	unimp
    1858:	00006933          	or	s2,zero,zero
    185c:	f700                	fsw	fs0,40(a4)
    185e:	2b00001b          	0x2b00001b
    1862:	01b2                	slli	gp,gp,0xc
    1864:	0000                	unimp
    1866:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    186a:	1881                	addi	a7,a7,-32
    186c:	0000                	unimp
    186e:	012c                	addi	a1,sp,136
    1870:	025a                	slli	tp,tp,0x16
    1872:	0089                	addi	ra,ra,2
    1874:	012c                	addi	a1,sp,136
    1876:	0088025b          	0x88025b
    187a:	012c                	addi	a1,sp,136
    187c:	025c                	addi	a5,sp,260
    187e:	0186                	slli	gp,gp,0x1
    1880:	2b00                	fld	fs0,16(a4)
    1882:	01c4                	addi	s1,sp,196
    1884:	0000                	unimp
    1886:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    188a:	18a1                	addi	a7,a7,-24
    188c:	0000                	unimp
    188e:	012c                	addi	a1,sp,136
    1890:	025a                	slli	tp,tp,0x16
    1892:	0072                	c.slli	zero,0x1c
    1894:	012c                	addi	a1,sp,136
    1896:	0088025b          	0x88025b
    189a:	012c                	addi	a1,sp,136
    189c:	025c                	addi	a5,sp,260
    189e:	0082                	c.slli64	ra
    18a0:	2b00                	fld	fs0,16(a4)
    18a2:	0250                	addi	a2,sp,260
    18a4:	0000                	unimp
    18a6:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    18aa:	18c4                	addi	s1,sp,116
    18ac:	0000                	unimp
    18ae:	012c                	addi	a1,sp,136
    18b0:	055a                	slli	a0,a0,0x16
    18b2:	0011cc03          	lbu	s8,1(gp) # 630a0001 <_stack_start+0x63090001>
    18b6:	2c00                	fld	fs0,24(s0)
    18b8:	5b01                	li	s6,-32
    18ba:	8802                	jr	a6
    18bc:	2c00                	fld	fs0,24(s0)
    18be:	5c01                	li	s8,-32
    18c0:	8402                	jr	s0
    18c2:	0000                	unimp
    18c4:	ce2d                	beqz	a2,193e <ti_2+0x6a>
    18c6:	0002                	c.slli64	zero
    18c8:	2300                	fld	fs0,0(a4)
    18ca:	0019                	c.nop	6
    18cc:	2c00                	fld	fs0,24(s0)
    18ce:	5a01                	li	s4,-32
    18d0:	8502                	jr	a0
    18d2:	2c00                	fld	fs0,24(s0)
    18d4:	5b01                	li	s6,-32
    18d6:	8802                	jr	a6
    18d8:	2c00                	fld	fs0,24(s0)
    18da:	5c01                	li	s8,-32
    18dc:	8402                	jr	s0
    18de:	0000                	unimp
    18e0:	0900                	addi	s0,sp,144
    18e2:	005d                	c.nop	23
    18e4:	0000                	unimp
    18e6:	18fd                	addi	a7,a7,-1
    18e8:	0000                	unimp
    18ea:	6934                	flw	fa3,80(a0)
    18ec:	0000                	unimp
    18ee:	3d00                	fld	fs0,56(a0)
    18f0:	0018                	0x18
    18f2:	3400                	fld	fs0,40(s0)
    18f4:	0069                	c.nop	26
    18f6:	0000                	unimp
    18f8:	1846                	slli	a6,a6,0x31
    18fa:	0000                	unimp
    18fc:	0900                	addi	s0,sp,144
    18fe:	005d                	c.nop	23
    1900:	0000                	unimp
    1902:	1910                	addi	a2,sp,176
    1904:	0000                	unimp
    1906:	6934                	flw	fa3,80(a0)
    1908:	0000                	unimp
    190a:	4f00                	lw	s0,24(a4)
    190c:	0018                	0x18
    190e:	0000                	unimp
    1910:	5d09                	li	s10,-30
    1912:	0000                	unimp
    1914:	2300                	fld	fs0,0(a4)
    1916:	0019                	c.nop	6
    1918:	3400                	fld	fs0,40(s0)
    191a:	0069                	c.nop	26
    191c:	0000                	unimp
    191e:	1858                	addi	a4,sp,52
    1920:	0000                	unimp
    1922:	3c00                	fld	fs0,56(s0)
    1924:	056e                	slli	a0,a0,0x1b
    1926:	0000                	unimp
    1928:	1e01                	addi	t3,t3,-32
    192a:	0106                	slli	sp,sp,0x1
    192c:	195e                	slli	s2,s2,0x37
    192e:	0000                	unimp
    1930:	613d                	addi	sp,sp,480
    1932:	0031                	c.nop	12
    1934:	1e01                	addi	t3,t3,-32
    1936:	6315                	lui	t1,0x5
    1938:	3d00000b          	0x3d00000b
    193c:	6f6d                	lui	t5,0x1b
    193e:	0064                	addi	s1,sp,12
    1940:	1e01                	addi	t3,t3,-32
    1942:	5d1d                	li	s10,-25
    1944:	0000                	unimp
    1946:	3e00                	fld	fs0,56(a2)
    1948:	00000553          	fadd.s	fa0,ft0,ft0,rne
    194c:	1e01                	addi	t3,t3,-32
    194e:	5d25                	li	s10,-23
    1950:	0000                	unimp
    1952:	3900                	fld	fs0,48(a0)
    1954:	0069                	c.nop	26
    1956:	2301                	jal	1e56 <random_keys+0x3f2>
    1958:	5d05                	li	s10,-31
    195a:	0000                	unimp
    195c:	0000                	unimp
    195e:	033c                	addi	a5,sp,392
    1960:	0001                	nop
    1962:	0100                	addi	s0,sp,128
    1964:	0611                	addi	a2,a2,4
    1966:	8301                	c.srli64	a4
    1968:	0019                	c.nop	6
    196a:	3d00                	fld	fs0,56(a0)
    196c:	3161                	jal	15f4 <product2+0x1d0>
    196e:	0100                	addi	s0,sp,128
    1970:	1e11                	addi	t3,t3,-28
    1972:	00001983          	lh	s3,0(zero) # 0 <__DYNAMIC>
    1976:	6d3d                	lui	s10,0xf
    1978:	0100646f          	jal	s0,7988 <_stack_len+0x3988>
    197c:	2f11                	jal	2090 <_min_stack+0x90>
    197e:	0069                	c.nop	26
    1980:	0000                	unimp
    1982:	1000                	addi	s0,sp,32
    1984:	6904                	flw	fs1,16(a0)
    1986:	0000                	unimp
    1988:	3f00                	fld	fs0,56(a4)
    198a:	195e                	slli	s2,s2,0x37
    198c:	0000                	unimp
    198e:	008c                	addi	a1,sp,64
    1990:	0000                	unimp
    1992:	0006                	c.slli	zero,0x1
    1994:	0000                	unimp
    1996:	9c01                	0x9c01
    1998:	19ad                	addi	s3,s3,-21
    199a:	0000                	unimp
    199c:	6b40                	flw	fs0,20(a4)
    199e:	0019                	c.nop	6
    19a0:	4c00                	lw	s0,24(s0)
    19a2:	001c                	0x1c
    19a4:	4100                	lw	s0,0(a0)
    19a6:	1976                	slli	s2,s2,0x3d
    19a8:	0000                	unimp
    19aa:	5b01                	li	s6,-32
    19ac:	3f00                	fld	fs0,56(a4)
    19ae:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    19b2:	0092                	slli	ra,ra,0x4
    19b4:	0000                	unimp
    19b6:	008c                	addi	a1,sp,64
    19b8:	0000                	unimp
    19ba:	9c01                	0x9c01
    19bc:	00001a83          	lh	s5,0(zero) # 0 <__DYNAMIC>
    19c0:	3041                	jal	1240 <_bss_start+0x74>
    19c2:	0019                	c.nop	6
    19c4:	0100                	addi	s0,sp,128
    19c6:	405a                	0x405a
    19c8:	0000193b          	0x193b
    19cc:	1c5f 0000 4740      	0x474000001c5f
    19d2:	0019                	c.nop	6
    19d4:	8b00                	0x8b00
    19d6:	001c                	0x1c
    19d8:	4200                	lw	s0,0(a2)
    19da:	00001953          	fadd.s	fs2,ft0,ft0,rtz
    19de:	1ce9                	addi	s9,s9,-6
    19e0:	0000                	unimp
    19e2:	00195e43          	fmadd.s	ft8,fs2,ft1,ft0,unknown
    19e6:	aa00                	fsd	fs0,16(a2)
    19e8:	0000                	unimp
    19ea:	0000                	unimp
    19ec:	0000                	unimp
    19ee:	0100                	addi	s0,sp,128
    19f0:	1129                	addi	sp,sp,-22
    19f2:	1a09                	addi	s4,s4,-30
    19f4:	0000                	unimp
    19f6:	7640                	flw	fs0,44(a2)
    19f8:	0019                	c.nop	6
    19fa:	3600                	fld	fs0,40(a2)
    19fc:	001d                	c.nop	7
    19fe:	4000                	lw	s0,0(s0)
    1a00:	0000196b          	0x196b
    1a04:	1d49                	addi	s10,s10,-14
    1a06:	0000                	unimp
    1a08:	4300                	lw	s0,0(a4)
    1a0a:	00001923          	sh	zero,18(zero) # 12 <__DYNAMIC+0x12>
    1a0e:	00b2                	slli	ra,ra,0xc
    1a10:	0000                	unimp
    1a12:	0018                	0x18
    1a14:	0000                	unimp
    1a16:	1e01                	addi	t3,t3,-32
    1a18:	5f06                	lw	t5,96(sp)
    1a1a:	001a                	c.slli	zero,0x6
    1a1c:	4400                	lw	s0,8(s0)
    1a1e:	00001947          	fmsub.s	fs2,ft0,ft0,ft0,rtz
    1a22:	3b44                	fld	fs1,176(a4)
    1a24:	0019                	c.nop	6
    1a26:	4400                	lw	s0,8(s0)
    1a28:	1930                	addi	a2,sp,184
    1a2a:	0000                	unimp
    1a2c:	1845                	addi	a6,a6,-15
    1a2e:	0000                	unimp
    1a30:	4200                	lw	s0,0(a2)
    1a32:	00001953          	fadd.s	fs2,ft0,ft0,rtz
    1a36:	00001d63          	bnez	zero,1a50 <ti_2+0x17c>
    1a3a:	5e46                	lw	t3,112(sp)
    1a3c:	0019                	c.nop	6
    1a3e:	bc00                	fsd	fs0,56(s0)
    1a40:	0000                	unimp
    1a42:	3800                	fld	fs0,48(s0)
    1a44:	0000                	unimp
    1a46:	0100                	addi	s0,sp,128
    1a48:	1134                	addi	a3,sp,168
    1a4a:	7640                	flw	fs0,44(a2)
    1a4c:	0019                	c.nop	6
    1a4e:	8100                	0x8100
    1a50:	001d                	c.nop	7
    1a52:	4000                	lw	s0,0(s0)
    1a54:	0000196b          	0x196b
    1a58:	1d94                	addi	a3,sp,752
    1a5a:	0000                	unimp
    1a5c:	0000                	unimp
    1a5e:	4600                	lw	s0,8(a2)
    1a60:	195e                	slli	s2,s2,0x37
    1a62:	0000                	unimp
    1a64:	00de                	slli	ra,ra,0x17
    1a66:	0000                	unimp
    1a68:	0050                	addi	a2,sp,4
    1a6a:	0000                	unimp
    1a6c:	2e01                	jal	1d7c <random_keys+0x318>
    1a6e:	4011                	c.li	zero,4
    1a70:	1976                	slli	s2,s2,0x3d
    1a72:	0000                	unimp
    1a74:	1dae                	slli	s11,s11,0x2b
    1a76:	0000                	unimp
    1a78:	6b40                	flw	fs0,20(a4)
    1a7a:	0019                	c.nop	6
    1a7c:	c100                	sw	s0,0(a0)
    1a7e:	001d                	c.nop	7
    1a80:	0000                	unimp
    1a82:	4700                	lw	s0,8(a4)
    1a84:	0356                	slli	t1,t1,0x15
    1a86:	0000                	unimp
    1a88:	034c                	addi	a1,sp,388
    1a8a:	0000                	unimp
    1a8c:	64470007          	0x64470007
    1a90:	0000                	unimp
    1a92:	5a00                	lw	s0,48(a2)
    1a94:	0000                	unimp
    1a96:	0700                	addi	s0,sp,896
    1a98:	0000                	unimp
    1a9a:	001e                	c.slli	zero,0x7
    1a9c:	0000                	unimp
    1a9e:	0002                	c.slli64	zero
    1aa0:	0000040f          	0x40f
    1aa4:	0104                	addi	s1,sp,128
    1aa6:	257c                	fld	fa5,200(a0)
    1aa8:	0000                	unimp
    1aaa:	0080                	addi	s0,sp,64
    1aac:	0000                	unimp
    1aae:	06f8                	addi	a4,sp,844
    1ab0:	0000                	unimp
    1ab2:	06ff                	0x6ff
    1ab4:	0000                	unimp
    1ab6:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
    1aba:	8001                	c.srli64	s0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x198>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_mod+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # fffe60b3 <_stack_start+0xfffd60b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 5001 <_stack_len+0x1001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  7e:	0b01130b          	0xb01130b
  82:	3b0b3a0b          	0x3b0b3a0b
  86:	010b390b          	0x10b390b
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
    asm volatile(
  aa:	0b3a0b0b          	0xb3a0b0b
            for (i = 0; i < (length / 3); i++) {
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
    asm volatile(
  bc:	390b3b0b          	0x390b3b0b
            for (i = 0; i < ((length-2) / 3); i++) {
  c0:	3813490b          	0x3813490b
            a1[length-1] = a1[length-1] % mod;
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
            a1[length-1] = a1[length-1] % mod;
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-2] = a1[length-2] % mod;
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
} //end of function
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
            for (i = 0; i < (length / 3); i++) {
 100:	1301                	addi	t1,t1,-32
    asm volatile(
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
            for (i = 0; i < ((length-1) / 3); i++) {
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
    asm volatile(
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
            for (i = 0; i < ((length-2) / 3); i++) {
 11a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
    int line[size_b][size_a + size_b];
 12a:	0b39053b          	0xb39053b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
    int line[size_b][size_a + size_b];
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
    int pola[size_a];
 15a:	3b0b3a0b          	0x3b0b3a0b
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 160:	0013010b          	0x13010b
    int line[size_b][size_a + size_b];
 164:	1c00                	addi	s0,sp,560
    int pola[size_a];
 166:	0b0b0117          	auipc	sp,0xb0b0
    int polb[size_b];
 16a:	0b3a                	slli	s6,s6,0xe
    int line[size_b][size_a + size_b];
 16c:	0b39053b          	0xb39053b
    int pola[size_a];
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
    int pola[size_a];
 178:	3a0e                	fld	fs4,224(sp)
            line[i][j] = 0;
 17a:	39053b0b          	0x39053b0b
    int polb[size_b];
 17e:	0013490b          	0x13490b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 182:	1e00                	addi	s0,sp,816
    int pola[size_a];
 184:	0e030013          	addi	zero,t1,224
    int polb[size_b];
 188:	193c                	addi	a5,sp,184
            line[i][j] = 0;
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    for (i = 0; i < size_b; ++i){
 192:	20000013          	li	zero,512
            product[j] = 0;
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 19c:	0b39053b          	0xb39053b
    for (i = 0; i < size_a; ++i){
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
	array_mod(pola,mod,size_a);
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_b; ++i){
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
	array_mod(polb,mod,size_b);
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
    if(star_mult == 1){
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x18>
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 1d8:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1dc:	0b390b3b          	0xb390b3b
            product[j] = 0;
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_mod+0x68>
 1ec:	0319                	addi	t1,t1,6
        for(j = 0; j < size_a + size_b -1; ++j){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
    for (i = 0; i < size_b; ++i){
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
        for(j = 0; j < size_a + size_b -1; ++j){
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
        pola[i] = a[i];
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
    for (i = 0; i < size_a; ++i){
 20e:	0213490b          	0x213490b
        pola[i] = a[i];
 212:	27000017          	auipc	zero,0x27000
        polb[i] = b[i];
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_b; ++i){
 222:	0b1c                	addi	a5,sp,400
        polb[i] = b[i];
 224:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 226:	3428                	fld	fa0,104(s0)
    if(star_mult == 1){
 228:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 230:	0213490b          	0x213490b
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
    for(j = 0; j < size_a + size_b -1; ++j){
 23e:	0b39053b          	0xb39053b
    array_mod(product,mod,size_a+size_b-1);
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
}
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
                line[size_b-1-j][k] = pola[k]*polb[j];
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
 288:	0319                	addi	t1,t1,6
            for (k = size_a-1; k >= 0; k = k-1 ){
 28a:	3a0e                	fld	fs4,224(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
            for (k = size_a-1; k >= 0; k = k-1 ){
 294:	12011113          	0x12011113
        for (j = size_b -1; j >= 0; j = j-1){
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
            for (k = size_a-1; k >= 0; k = k-1 ){
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ba:	0b39053b          	0xb39053b
        for (j = size_b -1; j >= 0; j = j-1){
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
        array_mod(line[i],mod,(size_a+size_b-1));
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
            product[j] += line[i][j];
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
        for(i = 0; i < size_b; ++i){
 2de:	0000                	unimp
            product[j] += line[i][j];
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
        for(i = 0; i < size_b; ++i){
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for(j = 0; j < size_a + size_b -1; ++j){
 2f4:	0b39                	addi	s6,s6,14
        for(i = 0; i < size_b; ++i){
 2f6:	13491927          	0x13491927
    int line[size_b][size_a + size_b];
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
    int pola[size_a];
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
    int line[size_b][size_a + size_b];
 330:	0b390b3b          	0xb390b3b
    int pola[size_a];
 334:	1349                	addi	t1,t1,-14
    int polb[size_b];
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
    int pola[size_a];
 33c:	0300                	addi	s0,sp,384
    int polb[size_b];
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
 344:	0013490b          	0x13490b
    int pola[size_a];
 348:	3a00                	fld	fs0,48(a2)
    int polb[size_b];
 34a:	0034                	addi	a3,sp,8
            line[i][j] = 0;
 34c:	0b3a0e03          	lb	t3,179(s4)
 350:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
 354:	1349                	addi	t1,t1,-14
            product2[j] = 0;
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	0300053b          	0x300053b
    for (i = 0; i < size_b; ++i){
 35e:	3a0e                	fld	fs4,224(sp)
 360:	390b3b0b          	0x390b3b0b
    for(i = 0; i < size_a; ++i){
 364:	0213490b          	0x213490b
    for(i = 0; i < size_b; ++i){
 368:	0018                	0x18
 36a:	3c00                	fld	fs0,56(s0)
 36c:	012e                	slli	sp,sp,0xb
    if(star_mult == 1){
 36e:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 376:	0b39                	addi	s6,s6,14
 378:	0b201927          	0xb201927
        for (j = size_b -1; j >= 0; j = j-1){
 37c:	1301                	addi	t1,t1,-32
 37e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 380:	053d                	addi	a0,a0,15
 382:	0300                	addi	s0,sp,384
            product2[j] = 0;
 384:	3a08                	fld	fa0,48(a2)
 386:	390b3b0b          	0x390b3b0b
            line[i][j] = 0;
 38a:	0013490b          	0x13490b
            product2[j] = 0;
 38e:	3e00                	fld	fs0,56(a2)
 390:	0005                	c.nop	1
        for(j = 0; j < size_a + size_b -1; ++j){
 392:	0b3a0e03          	lb	t3,179(s4)
 396:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
 39a:	1349                	addi	t1,t1,-14
 39c:	0000                	unimp
 39e:	31012e3f 12011113 	0x1201111331012e3f
        pola[i] = a[i];
 3a6:	4006                	0x4006
 3a8:	9718                	0x9718
 3aa:	1942                	slli	s2,s2,0x30
 3ac:	1301                	addi	t1,t1,-32
 3ae:	0000                	unimp
 3b0:	0540                	addi	s0,sp,644
    for(i = 0; i < size_a; ++i){
 3b2:	3100                	fld	fs0,32(a0)
        pola[i] = a[i];
 3b4:	00170213          	addi	tp,a4,1 # 67001 <_stack_start+0x57001>
    for(i = 0; i < size_a; ++i){
 3b8:	4100                	lw	s0,0(a0)
        polb[i] = b[i];
 3ba:	0005                	c.nop	1
 3bc:	1331                	addi	t1,t1,-20
 3be:	1802                	slli	a6,a6,0x20
 3c0:	0000                	unimp
 3c2:	3442                	fld	fs0,48(sp)
 3c4:	3100                	fld	fs0,32(a0)
    for(i = 0; i < size_b; ++i){
 3c6:	00170213          	addi	tp,a4,1
        polb[i] = b[i];
 3ca:	4300                	lw	s0,0(a4)
    for(i = 0; i < size_b; ++i){
 3cc:	011d                	addi	sp,sp,7
                line[size_b-1-j][k] = pola[k]*polb[j];
 3ce:	1331                	addi	t1,t1,-20
 3d0:	0152                	slli	sp,sp,0x14
 3d2:	1755                	addi	a4,a4,-11
 3d4:	0b58                	addi	a4,sp,404
 3d6:	0b59                	addi	s6,s6,22
 3d8:	13010b57          	0x13010b57
 3dc:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3de:	0544                	addi	s1,sp,644
                line[size_b-1-j][k] = pola[k]*polb[j];
 3e0:	3100                	fld	fs0,32(a0)
 3e2:	45000013          	li	zero,1104
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e6:	1755010b          	0x1755010b
        for (j = size_b -1; j >= 0; j = j-1){
 3ea:	0000                	unimp
 3ec:	1d46                	slli	s10,s10,0x31
 3ee:	3101                	jal	ffffffee <_stack_start+0xfffeffee>
 3f0:	55015213          	0x55015213
 3f4:	590b5817          	auipc	a6,0x590b5
 3f8:	000b570b          	0xb570b
        for(i = 0; i < size_b; ++i){
 3fc:	4700                	lw	s0,8(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 3fe:	002e                	c.slli	zero,0xb
 400:	193c193f 0e030e6e 	0xe030e6e193c193f
}
 408:	0b3a                	slli	s6,s6,0xe
 40a:	00000b3b          	0xb3b
 40e:	0100                	addi	s0,sp,128
 410:	0011                	c.nop	4
 412:	0610                	addi	a2,sp,768
 414:	0655                	addi	a2,a2,21
 416:	0e1b0e03          	lb	t3,225(s6) # 690e1 <_stack_start+0x590e1>
 41a:	0e25                	addi	t3,t3,9
 41c:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0fd2                	slli	t6,t6,0x14
       2:	0000                	unimp
       4:	0fe6                	slli	t6,t6,0x19
       6:	0000                	unimp
       8:	0001                	nop
       a:	e65a                	fsw	fs6,12(sp)
       c:	e700000f          	0xe700000f
      10:	0100000f          	fence	w,unknown
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	0fe8                	addi	a0,sp,988
      20:	0000                	unimp
      22:	1028                	addi	a0,sp,40
      24:	0000                	unimp
      26:	0001                	nop
      28:	2e5a                	fld	ft8,400(sp)
      2a:	0010                	0x10
      2c:	3800                	fld	fs0,48(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0f46                	slli	t5,t5,0x11
      3e:	0000                	unimp
      40:	0f9a                	slli	t6,t6,0x6
      42:	0000                	unimp
      44:	0001                	nop
      46:	9a5a                	add	s4,s4,s6
      48:	c200000f          	0xc200000f
      4c:	0400000f          	fence	o,unknown
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	2800                	fld	fs0,16(s0)
      5e:	7c00000f          	0x7c00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0f7c                	addi	a5,sp,924
      6c:	0000                	unimp
      6e:	0f86                	slli	t6,t6,0x1
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0f86                	slli	t6,t6,0x1
      78:	0000                	unimp
      7a:	0fc5                	addi	t6,t6,17
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
      80:	007d                	c.nop	31
      82:	0fc5                	addi	t6,t6,17
      84:	0000                	unimp
      86:	102c                	addi	a1,sp,40
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	2c79                	jal	32c <polymult2+0x32>
}
      90:	0010                	0x10
    switch(length%3) {
      92:	2e00                	fld	fs0,24(a2)
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	102e                	c.slli	zero,0x2b
      9e:	0000                	unimp
      a0:	1038                	addi	a4,sp,40
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
    asm volatile(
      aa:	0000                	unimp
            for (i = 0; i < (length / 3); i++) {
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	2800                	fld	fs0,16(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	5600000f          	0x5600000f
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
    asm volatile(
      bc:	7af0                	flw	fa2,116(a3)
            for (i = 0; i < ((length-2) / 3); i++) {
      be:	0f56                	slli	t5,t5,0x15
      c0:	0000                	unimp
            a1[length-1] = a1[length-1] % mod;
      c2:	0f58                	addi	a4,sp,916
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0f58                	addi	a4,sp,916
      cc:	0000                	unimp
      ce:	0fde                	slli	t6,t6,0x17
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d6:	de7a                	sw	t5,60(sp)
      d8:	e700000f          	0xe700000f
      dc:	0200000f          	fence	r,unknown
      e0:	7d00                	flw	fs0,56(a0)
      e2:	e700                	fsw	fs0,8(a4)
            a1[length-1] = a1[length-1] % mod;
      e4:	2c00000f          	0x2c00000f
            a1[length-2] = a1[length-2] % mod;
      e8:	0010                	0x10
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
      f0:	102c                	addi	a1,sp,40
} //end of function
      f2:	0000                	unimp
    asm volatile(
      f4:	102e                	c.slli	zero,0x2b
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
      fc:	2e7a                	fld	ft8,408(sp)
            for (i = 0; i < (length / 3); i++) {
      fe:	0010                	0x10
     100:	3800                	fld	fs0,48(s0)
    asm volatile(
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
     112:	0f28                	addi	a0,sp,920
     114:	0000                	unimp
     116:	0f62                	slli	t5,t5,0x18
     118:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     11a:	c4910003          	lb	zero,-951(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	627c                	flw	fa5,68(a2)
     120:	6c00000f          	0x6c00000f
     124:	0200000f          	fence	r,unknown
     128:	7e00                	flw	fs0,56(a2)
    int line[size_b][size_a + size_b];
     12a:	6c00                	flw	fs0,24(s0)
     12c:	2600000f          	0x2600000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     130:	0010                	0x10
    int line[size_b][size_a + size_b];
     132:	0200                	addi	s0,sp,256
     134:	8200                	0x8200
     136:	2600                	fld	fs0,8(a2)
     138:	0010                	0x10
     13a:	2c00                	fld	fs0,24(s0)
     13c:	0010                	0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	102c                	addi	a1,sp,40
     146:	0000                	unimp
     148:	102e                	c.slli	zero,0x2b
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    int line[size_b][size_a + size_b];
     150:	2e7c                	fld	fa5,216(a2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	0010                	0x10
    int line[size_b][size_a + size_b];
     154:	3800                	fld	fs0,48(s0)
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
    int pola[size_a];
     15a:	8200                	0x8200
	...
    int line[size_b][size_a + size_b];
     164:	2800                	fld	fs0,16(s0)
    int pola[size_a];
     166:	9600000f          	0x9600000f
    int polb[size_b];
     16a:	0300000f          	fence	rw,unknown
     16e:	9100                	0x9100
    int pola[size_a];
     170:	7e98                	flw	fa4,56(a3)
     172:	0f96                	slli	t6,t6,0x5
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     174:	0000                	unimp
     176:	0f9c                	addi	a5,sp,976
    int pola[size_a];
     178:	0000                	unimp
            line[i][j] = 0;
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
    int polb[size_b];
     17e:	0f9c                	addi	a5,sp,976
     180:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     182:	0fc5                	addi	t6,t6,17
    int pola[size_a];
     184:	0000                	unimp
     186:	0002                	c.slli64	zero
    int polb[size_b];
     188:	0080                	addi	s0,sp,64
            line[i][j] = 0;
     18a:	0fc5                	addi	t6,t6,17
     18c:	0000                	unimp
     18e:	102c                	addi	a1,sp,40
    for (i = 0; i < size_b; ++i){
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
            product[j] = 0;
     196:	2c7e                	fld	fs8,472(sp)
     198:	0010                	0x10
     19a:	2e00                	fld	fs0,24(a2)
    for (i = 0; i < size_b; ++i){
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
    for (i = 0; i < size_a; ++i){
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	102e                	c.slli	zero,0x2b
	array_mod(pola,mod,size_a);
     1a6:	0000                	unimp
     1a8:	1038                	addi	a4,sp,40
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
    for (i = 0; i < size_b; ++i){
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	4a00                	lw	s0,16(a2)
     1ba:	4e00000f          	0x4e00000f
	array_mod(polb,mod,size_b);
     1be:	0200000f          	fence	r,unknown
     1c2:	3000                	fld	fs0,32(s0)
    if(star_mult == 1){
     1c4:	f29f 000f fc00      	0xfc00000ff29f
     1ca:	0200000f          	fence	r,unknown
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
     1d6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     1d8:	3c00                	fld	fs0,56(s0)
     1da:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     1dc:	5400                	lw	s0,40(s0)
     1de:	000c                	0xc
            product[j] = 0;
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0c54                	addi	a3,sp,532
            line[i][j] = 0;
     1e6:	0000                	unimp
     1e8:	0cbc                	addi	a5,sp,600
            product[j] = 0;
     1ea:	0000                	unimp
     1ec:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     1ee:	bc58                	fsd	fa4,184(s0)
     1f0:	000c                	0xc
     1f2:	c800                	sw	s0,16(s0)
     1f4:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0cc8                	addi	a0,sp,596
        for(j = 0; j < size_a + size_b -1; ++j){
     1fe:	0000                	unimp
     200:	0cce                	slli	s9,s9,0x13
        pola[i] = a[i];
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0cce                	slli	s9,s9,0x13
     20c:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     20e:	0d04                	addi	s1,sp,656
        pola[i] = a[i];
     210:	0000                	unimp
     212:	0001                	nop
    for (i = 0; i < size_a; ++i){
     214:	0058                	addi	a4,sp,4
        polb[i] = b[i];
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	3c00                	fld	fs0,56(s0)
     21e:	000c                	0xc
     220:	5e00                	lw	s0,56(a2)
    for (i = 0; i < size_b; ++i){
     222:	000c                	0xc
        polb[i] = b[i];
     224:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     226:	5b00                	lw	s0,48(a4)
    if(star_mult == 1){
     228:	0c5e                	slli	s8,s8,0x17
        for (j = size_b -1; j >= 0; j = j-1){
     22a:	0000                	unimp
     22c:	0cc6                	slli	s9,s9,0x11
            for (k = size_a-1; k >= 0; k = k-1 ){
     22e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     230:	0001                	nop
     232:	c665                	beqz	a2,31a <polymult2+0x20>
     234:	000c                	0xc
     236:	ce00                	sw	s0,24(a2)
     238:	000c                	0xc
     23a:	0400                	addi	s0,sp,512
    for(j = 0; j < size_a + size_b -1; ++j){
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	ce9f 000c 0400      	0x400000cce9f
    array_mod(product,mod,size_a+size_b-1);
     246:	000d                	c.nop	3
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
}
     254:	0c3c                	addi	a5,sp,536
     256:	0000                	unimp
     258:	0c56                	slli	s8,s8,0x15
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	565c                	lw	a5,44(a2)
     260:	000c                	0xc
     262:	c000                	sw	s0,0(s0)
     264:	000c                	0xc
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0cc0                	addi	s0,sp,596
     26c:	0000                	unimp
     26e:	0cce                	slli	s9,s9,0x13
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0cce                	slli	s9,s9,0x13
                line[size_b-1-j][k] = pola[k]*polb[j];
     27a:	0000                	unimp
     27c:	0d04                	addi	s1,sp,656
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     28a:	3c00                	fld	fs0,56(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     28c:	000c                	0xc
     28e:	5800                	lw	s0,48(s0)
     290:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	0100                	addi	s0,sp,128
     294:	5d00                	lw	s0,56(a0)
        for (j = size_b -1; j >= 0; j = j-1){
     296:	0c58                	addi	a4,sp,532
     298:	0000                	unimp
     29a:	0c71                	addi	s8,s8,28
     29c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     29e:	0001                	nop
     2a0:	715a                	flw	ft2,180(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a2:	000c                	0xc
     2a4:	0400                	addi	s0,sp,512
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
     2b4:	0000                	unimp
     2b6:	3c00                	fld	fs0,56(s0)
     2b8:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ba:	6000                	flw	fs0,0(s0)
     2bc:	000c                	0xc
        for (j = size_b -1; j >= 0; j = j-1){
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0c60                	addi	s0,sp,540
     2c4:	0000                	unimp
        array_mod(line[i],mod,(size_a+size_b-1));
     2c6:	0cca                	slli	s9,s9,0x12
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000cca67          	0xcca67
    for (i = 0; i < size_b; ++i){
     2d0:	ce00                	sw	s0,24(a2)
     2d2:	000c                	0xc
            product[j] += line[i][j];
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	ce9f 000c 0400      	0x400000cce9f
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
        for(i = 0; i < size_b; ++i){
     2ee:	0c3c                	addi	a5,sp,536
    for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0000                	unimp
     2f2:	0c71                	addi	s8,s8,28
     2f4:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2f6:	0001                	nop
     2f8:	715f 000c 0400      	0x400000c715f
    int line[size_b][size_a + size_b];
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	3c00                	fld	fs0,56(s0)
     310:	000c                	0xc
     312:	7100                	flw	fs0,32(a0)
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
     31a:	0c71                	addi	s8,s8,28
     31c:	0000                	unimp
     31e:	0cc4                	addi	s1,sp,596
    int line[size_b][size_a + size_b];
     320:	0000                	unimp
     322:	0001                	nop
     324:	c464                	sw	s1,76(s0)
     326:	000c                	0xc
    int pola[size_a];
     328:	ce00                	sw	s0,24(a2)
     32a:	000c                	0xc
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
    int line[size_b][size_a + size_b];
     330:	6001                	0x6001
    int pola[size_a];
     332:	ce9f 000c 0400      	0x400000cce9f
    int polb[size_b];
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
    int pola[size_a];
     33c:	6400                	flw	fs0,8(s0)
	...
     346:	0c72                	slli	s8,s8,0x1c
     348:	0000                	unimp
    int polb[size_b];
     34a:	0c81                	addi	s9,s9,0
            line[i][j] = 0;
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
    for (i = 0; i < size_b; ++i){
     352:	0000                	unimp
     354:	0000                	unimp
            product2[j] = 0;
     356:	0000                	unimp
     358:	8400                	0x8400
     35a:	000c                	0xc
     35c:	a200                	fsd	fs0,0(a2)
    for (i = 0; i < size_b; ++i){
     35e:	000c                	0xc
     360:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     362:	5a00                	lw	s0,48(a2)
     364:	0ca2                	slli	s9,s9,0x8
     366:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     368:	0ca5                	addi	s9,s9,9
     36a:	0000                	unimp
     36c:	0001                	nop
    if(star_mult == 1){
     36e:	ce5c                	sw	a5,28(a2)
     370:	000c                	0xc
     372:	f200                	fsw	fs0,32(a2)
     374:	000c                	0xc
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     382:	0ca6                	slli	s9,s9,0x9
            product2[j] = 0;
     384:	0000                	unimp
     386:	0cb1                	addi	s9,s9,12
     388:	0000                	unimp
            line[i][j] = 0;
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
            product2[j] = 0;
     38e:	0000                	unimp
     390:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     392:	0000                	unimp
     394:	b200                	fsd	fs0,32(a2)
     396:	000c                	0xc
     398:	ce00                	sw	s0,24(a2)
    for (i = 0; i < size_b; ++i){
     39a:	000c                	0xc
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0cf2                	slli	s9,s9,0x1c
        for(j = 0; j < size_a + size_b -1; ++j){
     3a2:	0000                	unimp
     3a4:	0d04                	addi	s1,sp,656
        pola[i] = a[i];
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
    for(i = 0; i < size_a; ++i){
     3b2:	8400                	0x8400
        pola[i] = a[i];
     3b4:	000c                	0xc
     3b6:	8a00                	0x8a00
    for(i = 0; i < size_a; ++i){
     3b8:	000c                	0xc
        polb[i] = b[i];
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0c8a                	slli	s9,s9,0x2
     3c0:	0000                	unimp
     3c2:	0c96                	slli	s9,s9,0x5
     3c4:	0000                	unimp
    for(i = 0; i < size_b; ++i){
     3c6:	0001                	nop
        polb[i] = b[i];
     3c8:	965d                	srai	a2,a2,0x37
     3ca:	000c                	0xc
    for(i = 0; i < size_b; ++i){
     3cc:	9c00                	0x9c00
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ce:	000c                	0xc
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0cb2                	slli	s9,s9,0xc
     3d6:	0000                	unimp
     3d8:	0cbe                	slli	s9,s9,0xf
     3da:	0000                	unimp
     3dc:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     3de:	ce59                	beqz	a2,47c <polydiv+0x12>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3e0:	000c                	0xc
     3e2:	d800                	sw	s0,48(s0)
     3e4:	000c                	0xc
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
        for (j = size_b -1; j >= 0; j = j-1){
     3ea:	0cd8                	addi	a4,sp,596
     3ec:	0000                	unimp
     3ee:	0cde                	slli	s9,s9,0x17
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # f7f7 <_stack+0x17f7>
     3f6:	de9f 000c e000      	0xe000000cde9f
        for(i = 0; i < size_b; ++i){
     3fc:	000c                	0xc
    for(j = 0; j < size_a + size_b -1; ++j){
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
}
     402:	0ce0                	addi	s0,sp,604
     404:	0000                	unimp
     406:	0cf2                	slli	s9,s9,0x1c
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	f25e                	fsw	fs7,36(sp)
     40e:	000c                	0xc
     410:	fc00                	fsw	fs0,56(s0)
     412:	000c                	0xc
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0cfc                	addi	a5,sp,604
     41a:	0000                	unimp
     41c:	0d02                	c.slli64	s10
     41e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     424:	029f 000d 0400      	0x400000d029f
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
     438:	0ba8                	addi	a0,sp,472
     43a:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     43c:	0bc4                	addi	s1,sp,468
     43e:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     440:	0001                	nop
     442:	c45a                	sw	s6,8(sp)
     444:	1400000b          	0x1400000b
            product2[j] += line[i][j];
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
        for(i = 0; i < size_b; ++i){
     44e:	0c14                	addi	a3,sp,528
            product2[j] += line[i][j];
     450:	0000                	unimp
     452:	0c3c                	addi	a5,sp,536
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    for(j = 0; j < size_a + size_b -1; ++j){
     464:	0ba8                	addi	a0,sp,472
        for(i = 0; i < size_b; ++i){
     466:	0000                	unimp
     468:	0bbe                	slli	s7,s7,0xf
    int v[size_N];
     46a:	0000                	unimp
     46c:	0001                	nop
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46e:	000bbe5b          	0xbbe5b
    int v[size_N];
     472:	2200                	fld	fs0,0(a2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
     47a:	0c22                	slli	s8,s8,0x8
     47c:	0000                	unimp
     47e:	0c2a                	slli	s8,s8,0xa
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0c2a                	slli	s8,s8,0xa
     48a:	0000                	unimp
     48c:	0c3c                	addi	a5,sp,536
     48e:	0000                	unimp
    int v[size_N];
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
    int q[size_N];
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	a800                	fsd	fs0,16(s0)
    int num_temp[size_N];
     49c:	c200000b          	0xc200000b
    int denum_temp[size_D];
     4a0:	0100000b          	0x100000b
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0bc2                	slli	s7,s7,0x10
    int num_temp[size_N];
     4a8:	0000                	unimp
    int denum_temp[size_D];
     4aa:	0c02                	c.slli64	s8
     4ac:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ae:	0001                	nop
     4b0:	0259                	addi	tp,tp,22
     4b2:	000c                	0xc
     4b4:	3c00                	fld	fs0,56(s0)
    int v[size_N];
     4b6:	000c                	0xc
     4b8:	0400                	addi	s0,sp,512
    int denum_temp[size_D];
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
     4be:	009f 0000 0000      	0x9f
    for (i = 0; i < size_N; ++i){
     4c4:	0000                	unimp
        array_mod(num_temp, mod, size_N);
     4c6:	a800                	fsd	fs0,16(s0)
     4c8:	cf00000b          	0xcf00000b
     4cc:	0100000b          	0x100000b
    for (i = 0; i < size_D; ++i) {
     4d0:	5d00                	lw	s0,56(a0)
     4d2:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
	array_mod(denum_temp,mod,size_D);
     4d6:	0c26                	slli	s8,s8,0x9
     4d8:	0000                	unimp
     4da:	0001                	nop
    for (i = 0; i < size_N; ++i){
     4dc:	2664                	fld	fs1,200(a2)
     4de:	000c                	0xc
     4e0:	2a00                	fld	fs0,16(a2)
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	000c                	0xc
     4e4:	0400                	addi	s0,sp,512
     4e6:	f300                	fsw	fs0,32(a4)
     4e8:	5d01                	li	s10,-32
     4ea:	2a9f 000c 3c00      	0x3c00000c2a9f
    for (i = 0; i < size_N; ++i){
     4f0:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     4f2:	0100                	addi	s0,sp,128
    for (u = 0; u < mod; ++u){
     4f4:	6400                	flw	fs0,8(s0)
	...
        num_temp[i] = num[i];
     4fe:	0ba8                	addi	a0,sp,472
     500:	0000                	unimp
     502:	00000bcf          	fnmadd.s	fs7,ft0,ft0,ft0,rne
     506:	0001                	nop
    for (i = 0; i < size_N; ++i){
     508:	cf5e                	sw	s7,156(sp)
        num_temp[i] = num[i];
     50a:	2400000b          	0x2400000b
        denum_temp[i] = denum[i];
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
     514:	0c24                	addi	s1,sp,536
     516:	0000                	unimp
     518:	0c2a                	slli	s8,s8,0xa
    for (i = 0; i < size_D; ++i) {
     51a:	0000                	unimp
        denum_temp[i] = denum[i];
     51c:	0004                	0x4
    for (i = 0; i < size_D; ++i) {
     51e:	9f5e01f3          	0x9f5e01f3
        q[i] = 0;
     522:	0c2a                	slli	s8,s8,0xa
     524:	0000                	unimp
     526:	0c3c                	addi	a5,sp,536
        v[i] = 0;
     528:	0000                	unimp
        q[i] = 0;
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0xc2>
        v[i] = 0;
     530:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     532:	0000                	unimp
     534:	e200                	fsw	fs0,0(a2)
        if( denum_temp[i] != 0 )
     536:	0d00000b          	0xd00000b
    for (i = size_D-1; i >= 0; i = i-1){
     53a:	000c                	0xc
        if ( (b_N*u)%mod == 1 )
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
	...
    for (u = 0; u < mod; ++u){
     548:	0be2                	slli	s7,s7,0x18
        if( num_temp[i] != 0 )
     54a:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     54c:	0be8                	addi	a0,sp,476
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
     552:	9f30                	0x9f30
     554:	0c0e                	slli	s8,s8,0x3
     556:	0000                	unimp
     558:	0c20                	addi	s0,sp,536
    while (d >= d2){
     55a:	0000                	unimp
     55c:	0001                	nop
    for(i = 0; i < size_N; ++i){
     55e:	2a59                	jal	6f4 <ext_euclid+0x88>
        result[i] = q[i];
     560:	000c                	0xc
     562:	3400                	fld	fs0,40(s0)
     564:	000c                	0xc
     566:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     568:	5900                	lw	s0,48(a0)
     56a:	0c34                	addi	a3,sp,536
    for(i = size_N; i < (2*size_N); ++i){
     56c:	0000                	unimp
     56e:	0c3a                	slli	s8,s8,0xe
        result[i] = num_temp[i-size_N];
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
     576:	3a9f 000c 3c00      	0x3c00000c3a9f
}
     57c:	000c                	0xc
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
     58a:	08b6                	slli	a7,a7,0xd
     58c:	0000                	unimp
     58e:	08fa                	slli	a7,a7,0x1e
     590:	0000                	unimp
     592:	0001                	nop
     594:	fa5a                	fsw	fs6,52(sp)
     596:	0008                	0x8
     598:	bc00                	fsd	fs0,56(s0)
     59a:	000a                	c.slli	zero,0x2
     59c:	0100                	addi	s0,sp,128
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0abc                	addi	a5,sp,344
     5a2:	0000                	unimp
     5a4:	0ae0                	addi	s0,sp,348
        v[(d-d2)] = u*r_d;
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5ac:	e09f 000a 0000      	0xae09f
        array_mod(v, mod, size_N);
     5b2:	0400000b          	0x400000b
     5b6:	f300                	fsw	fs0,32(a4)
        v[(d-d2)] = u*r_d;
     5b8:	5a01                	li	s4,-32
        array_mod(v, mod, size_N);
     5ba:	009f 000b 9400      	0x9400000b009f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5c0:	0100000b          	0x100000b
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0b94                	addi	a3,sp,464
     5c8:	0000                	unimp
        array_mod(product, mod, size_N);
     5ca:	0ba8                	addi	a0,sp,472
     5cc:	0000                	unimp
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ce:	7f850003          	lb	zero,2040(a0)
        for (i = 0; i < size_N; ++i){
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
        array_mod(num_temp, mod, size_N);
     5da:	b600                	fsd	fs0,40(a2)
     5dc:	0008                	0x8
     5de:	f200                	fsw	fs0,32(a2)
     5e0:	0008                	0x8
        for(i = 0; i < size_N; ++i){
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	08f2                	slli	a7,a7,0x1c
     5e8:	0000                	unimp
        array_mod(q, mod, size_N);
     5ea:	0ae8                	addi	a0,sp,348
     5ec:	0000                	unimp
     5ee:	0001                	nop
     5f0:	000ae867          	0xae867
        for (i = size_N-1; i >= 0; i = i-1){
     5f4:	0000                	unimp
     5f6:	0400000b          	0x400000b
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	009f 000b a800      	0xa800000b009f
            num_temp[i] = num_temp[i] - product[i];
     604:	0100000b          	0x100000b
     608:	6700                	flw	fs0,8(a4)
	...
     612:	08b6                	slli	a7,a7,0xd
     614:	0000                	unimp
     616:	08f6                	slli	a7,a7,0x1d
        for (i = 0; i < size_N; ++i){
     618:	0000                	unimp
            q[i] = q[i] + v[i];
     61a:	0001                	nop
     61c:	f65c                	fsw	fa5,44(a2)
     61e:	0008                	0x8
     620:	e400                	fsw	fs0,8(s0)
     622:	000a                	c.slli	zero,0x2
        for(i = 0; i < size_N; ++i){
     624:	0100                	addi	s0,sp,128
     626:	6600                	flw	fs0,8(a2)
            q[i] = q[i] + v[i];
     628:	0ae4                	addi	s1,sp,348
     62a:	0000                	unimp
     62c:	0b00                	addi	s0,sp,400
        for(i = 0; i < size_N; ++i){
     62e:	0000                	unimp
            if( num_temp[i] != 0 )
     630:	0004                	0x4
        for (i = size_N-1; i >= 0; i = i-1){
     632:	9f5c01f3          	0x9f5c01f3
            v[i] = 0;
     636:	0b00                	addi	s0,sp,400
     638:	0000                	unimp
     63a:	0ba8                	addi	a0,sp,472
     63c:	0000                	unimp
     63e:	0001                	nop
        for (i = 0; i < size_N; ++i){
     640:	0066                	c.slli	zero,0x19
     642:	0000                	unimp
     644:	0000                	unimp
     646:	0000                	unimp
        result[i] = q[i];
     648:	4400                	lw	s0,8(s0)
     64a:	000a                	c.slli	zero,0x2
     64c:	4e00                	lw	s0,24(a2)
     64e:	000a                	c.slli	zero,0x2
     650:	0100                	addi	s0,sp,128
     652:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     65c:	0a5e                	slli	s4,s4,0x17
     65e:	0000                	unimp
     660:	00000a7b          	0xa7b
     664:	0001                	nop
    for(i = size_N; i < (2*size_N); ++i){
     666:	605a                	flw	ft0,148(sp)
     668:	7400000b          	0x7400000b
    int ri_2[size]; // MX-ring poly, a
     66c:	0100000b          	0x100000b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     670:	5a00                	lw	s0,48(a2)
	...
     67a:	0a7c                	addi	a5,sp,284
     67c:	0000                	unimp
     67e:	00000a8f          	0xa8f
     682:	0001                	nop
     684:	745a                	flw	fs0,180(sp)
     686:	8400000b          	0x8400000b
     68a:	0100000b          	0x100000b
     68e:	5a00                	lw	s0,48(a2)
	...
    int ri_1[size]; // f-random poly, f[N] = 0, b
     698:	0a90                	addi	a2,sp,336
     69a:	0000                	unimp
     69c:	0aac                	addi	a1,sp,344
    int ri[size];
     69e:	0000                	unimp
     6a0:	0001                	nop
     6a2:	845a                	mv	s0,s6
    int ti_1[size]; // ti_1[0] = 1
     6a4:	9400000b          	0x9400000b
     6a8:	0100000b          	0x100000b
    int ti[size];
     6ac:	5a00                	lw	s0,48(a2)
	...
    int temp[size];
     6b6:	09f8                	addi	a4,sp,220
     6b8:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	0ac4                	addi	s1,sp,340
     6bc:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
    int temp[size];
     6c2:	0ac4                	addi	s1,sp,340
    for (i = 0; i < size; ++i) {
     6c4:	0000                	unimp
     6c6:	0adc                	addi	a5,sp,340
        ti_2[i] = 0;
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
     6ce:	0adc                	addi	a5,sp,340
    for (i = 0; i < size; ++i) {
     6d0:	0000                	unimp
     6d2:	0ae0                	addi	s0,sp,348
    ti_1[0] = 1;
     6d4:	0000                	unimp
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6da:	0085                	addi	ra,ra,1
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
            ti[i] = ti_2[i] - temp[i];
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0ae0                	addi	s0,sp,348
	array_mod(ri_2,mod,N+1);
     6ea:	0000                	unimp
     6ec:	0b00                	addi	s0,sp,400
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
	array_mod(ri_1,mod,N+1);
     6f4:	235a01f3          	0x235a01f3
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
     702:	01f0                	addi	a2,sp,204
     704:	001c                	0x1c
        for (i = N + 1; i < (2 * N + 2); ++i) {
     706:	a800000b          	0xa800000b
     70a:	0200000b          	0x200000b
     70e:	7200                	flw	fs0,32(a2)
	...
        for (i = 0; i < N + 1; ++i) {
     718:	fc00                	fsw	fs0,56(s0)
        array_mod(temp,mod,N+1);
     71a:	0009                	c.nop	2
     71c:	fe00                	fsw	fs0,56(a2)
     71e:	0009                	c.nop	2
     720:	0200                	addi	s0,sp,256
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     722:	3100                	fld	fs0,32(a0)
     724:	fe9f 0009 0400      	0x4000009fe9f
     72a:	000a                	c.slli	zero,0x2
     72c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     72e:	5f00                	lw	s0,56(a4)
     730:	0a08                	addi	a0,sp,272
     732:	0000                	unimp
	array_mod(qi_1,mod,size);
     734:	0a0e                	slli	s4,s4,0x3
     736:	0000                	unimp
     738:	0001                	nop
     73a:	165f 000a 2400      	0x2400000a165f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
     744:	5f00                	lw	s0,56(a4)
     746:	0a2e                	slli	s4,s4,0xb
     748:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     74a:	00000a43          	fmadd.s	fs4,ft0,ft0,ft0,rne
     74e:	0001                	nop
	array_mod(temp,mod,size);
     750:	445f 000a 4e00      	0x4e00000a445f
     756:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
        array_mod(ti,mod,N+1);
     760:	0a4e                	slli	s4,s4,0x13
     762:	0000                	unimp
     764:	0a5d                	addi	s4,s4,23
     766:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     768:	0001                	nop
        controlR = 0;
     76a:	5e5f 000a 6e00      	0x6e00000a5e5f
        for (i = 0; i < N + 1; ++i) {
     770:	000a                	c.slli	zero,0x2
    while (controlR != 0) {
     772:	0500                	addi	s0,sp,640
        for (j = 0; j < mod; ++j) {
     774:	8200                	0x8200
            if (((ri_2[0] * j) % mod) == 1)
     776:	3300                	fld	fs0,32(a4)
        for (j = 0; j < mod; ++j) {
     778:	9f1e                	add	t5,t5,t2
     77a:	0a6e                	slli	s4,s4,0x1b
     77c:	0000                	unimp
     77e:	0a7c                	addi	a5,sp,284
     780:	0000                	unimp
     782:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     784:	7c59                	lui	s8,0xffff6
     786:	000a                	c.slli	zero,0x2
    }
     788:	8400                	0x8400
     78a:	000a                	c.slli	zero,0x2
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
     790:	849f 000a 8c00      	0x8c00000a849f
     796:	000a                	c.slli	zero,0x2
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
     79c:	0a90                	addi	a2,sp,336
     79e:	0000                	unimp
     7a0:	0aa2                	slli	s5,s5,0x8
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	a29f 000a bc00      	0xbc00000aa29f
     7b0:	000a                	c.slli	zero,0x2
        ri_2[i] = polyR[i];
     7b2:	0100                	addi	s0,sp,128
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0abc                	addi	a5,sp,344
     7b8:	0000                	unimp
     7ba:	0b3c                	addi	a5,sp,408
     7bc:	0000                	unimp
    for (i = 0; i < size; ++i) {
     7be:	0001                	nop
        ri_2[i] = polyR[i];
     7c0:	3c5f 000b 3e00      	0x3e00000b3c5f
        ri_1[i] = polyf[i];
     7c6:	0300000b          	0x300000b
     7ca:	7f00                	flw	fs0,56(a4)
     7cc:	9f7f                	0x9f7f
     7ce:	0b3e                	slli	s6,s6,0xf
     7d0:	0000                	unimp
     7d2:	0b60                	addi	s0,sp,412
        ti_2[i] = 0;
     7d4:	0000                	unimp
     7d6:	0001                	nop
     7d8:	605f 000b 7000      	0x7000000b605f
        ti_1[i] = 0;
     7de:	0100000b          	0x100000b
     7e2:	5900                	lw	s0,48(a0)
    for (i = 0; i < size; ++i) {
     7e4:	0b70                	addi	a2,sp,412
     7e6:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     7e8:	0b72                	slli	s6,s6,0x1c
     7ea:	0000                	unimp
     7ec:	7f790003          	lb	zero,2039(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f0:	729f 000b 7400      	0x7400000b729f
            ri[i - (N + 1)] = res[i];
     7f6:	0100000b          	0x100000b
            temp[i] = ri_2[i] - ri[i];
     7fa:	5900                	lw	s0,48(a0)
     7fc:	0b74                	addi	a3,sp,412
     7fe:	0000                	unimp
     800:	0b78                	addi	a4,sp,412
     802:	0000                	unimp
     804:	0001                	nop
     806:	785e                	flw	fa6,244(sp)
     808:	8200000b          	0x8200000b
     80c:	0300000b          	0x300000b
        for (i = 0; i < N + 1; ++i) {
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
            qi_1[i] = res1[i];
     814:	0b82                	c.slli64	s7
     816:	0000                	unimp
     818:	0b84                	addi	s1,sp,464
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	845e                	mv	s0,s7
        for (i = 0; i < N + 1; ++i) {
     820:	9400000b          	0x9400000b
     824:	0100000b          	0x100000b
            temp[i] = res2[i];
     828:	6800                	flw	fs0,16(s0)
     82a:	0b94                	addi	a3,sp,464
     82c:	0000                	unimp
     82e:	0ba4                	addi	s1,sp,472
     830:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     832:	0001                	nop
            temp[i] = res2[i];
     834:	a45f 000b a600      	0xa600000ba45f
            ti[i] = ti_2[i] - temp[i];
     83a:	0300000b          	0x300000b
     83e:	7f00                	flw	fs0,56(a4)
     840:	9f7f                	0x9f7f
     842:	0ba6                	slli	s7,s7,0x9
     844:	0000                	unimp
     846:	0ba8                	addi	a0,sp,472
        for (i = 0; i < N + 1; ++i) {
     848:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
            ri_2[i] = ri_1[i];
     852:	0000                	unimp
     854:	c000                	sw	s0,0(s0)
     856:	000a                	c.slli	zero,0x2
     858:	0000                	unimp
     85a:	0600000b          	0x600000b
     85e:	0300                	addi	s0,sp,384
            ri_1[i] = ri[i];
     860:	1a64                	addi	s1,sp,316
     862:	0000                	unimp
     864:	009f 0000 0000      	0x9f
     86a:	0000                	unimp
            ti_2[i] = ti_1[i];
     86c:	f800                	fsw	fs0,48(s0)
     86e:	0009                	c.nop	2
     870:	bc00                	fsd	fs0,56(s0)
     872:	000a                	c.slli	zero,0x2
            controlR += ri[i];
     874:	0100                	addi	s0,sp,128
            ti_2[i] = ti_1[i];
     876:	6200                	flw	fs0,0(a2)
     878:	0abc                	addi	a5,sp,344
            ti_1[i] = ti[i];
     87a:	0000                	unimp
     87c:	0ae0                	addi	s0,sp,348
     87e:	0000                	unimp
     880:	7f850003          	lb	zero,2040(a0)
            qi_1[i] = 0;
     884:	e09f 000a 0000      	0xae09f
        for (i = 0; i < N + 1; ++i) {
     88a:	0400000b          	0x400000b
            if (((ri_2[0] * j) % mod) == 1)
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
     892:	009f 000b 9400      	0x9400000b009f
     898:	0100000b          	0x100000b
     89c:	6200                	flw	fs0,0(a2)
        for (j = 0; j < mod; ++j) {
     89e:	0b94                	addi	a3,sp,464
     8a0:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a2:	0ba8                	addi	a0,sp,472
        for (i = 0; i < N + 1; ++i) {
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8aa:	009f 0000 0000      	0x9f
     8b0:	0000                	unimp
     8b2:	6c00                	flw	fs0,24(s0)
        for (i = 0; i < N + 1; ++i) {
     8b4:	0006                	c.slli	zero,0x1
int* generate_keys(int N, int p, int q){
     8b6:	ea00                	fsw	fs0,16(a2)
     8b8:	0006                	c.slli	zero,0x1
     8ba:	0100                	addi	s0,sp,128
     8bc:	5a00                	lw	s0,48(a2)
     8be:	06ea                	slli	a3,a3,0x1a
     8c0:	0000                	unimp
     8c2:	07b2                	slli	a5,a5,0xc
     8c4:	0000                	unimp
     8c6:	0004                	0x4
     8c8:	9f5a01f3          	0x9f5a01f3
     8cc:	07b2                	slli	a5,a5,0xc
     8ce:	0000                	unimp
     8d0:	07e8                	addi	a0,sp,972
     8d2:	0000                	unimp
     8d4:	0001                	nop
     8d6:	e85a                	fsw	fs6,16(sp)
     8d8:	b6000007          	0xb6000007
     8dc:	0008                	0x8
     8de:	0400                	addi	s0,sp,512
     8e0:	f300                	fsw	fs0,32(a4)
     8e2:	5a01                	li	s4,-32
     8e4:	009f 0000 0000      	0x9f
     8ea:	0000                	unimp
     8ec:	6c00                	flw	fs0,24(s0)
     8ee:	0006                	c.slli	zero,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8f0:	ea00                	fsw	fs0,16(a2)
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0100                	addi	s0,sp,128
     8f6:	5b00                	lw	s0,48(a4)
     8f8:	06ea                	slli	a3,a3,0x1a
     8fa:	0000                	unimp
     8fc:	07b2                	slli	a5,a5,0xc
     8fe:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     900:	0004                	0x4
     902:	9f5b01f3          	0x9f5b01f3
     906:	07b2                	slli	a5,a5,0xc
     908:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     90a:	07e8                	addi	a0,sp,972
     90c:	0000                	unimp
     90e:	0001                	nop
     910:	0007e85b          	0x7e85b
     914:	b600                	fsd	fs0,40(a2)
     916:	0008                	0x8
     918:	0400                	addi	s0,sp,512
     91a:	f300                	fsw	fs0,32(a4)
     91c:	5b01                	li	s6,-32
     91e:	009f 0000 0000      	0x9f
     924:	0000                	unimp
     926:	6c00                	flw	fs0,24(s0)
     928:	0006                	c.slli	zero,0x1
     92a:	d000                	sw	s0,32(s0)
     92c:	0006                	c.slli	zero,0x1
     92e:	0100                	addi	s0,sp,128
     930:	5c00                	lw	s0,56(s0)
     932:	06d0                	addi	a2,sp,836
     934:	0000                	unimp
     936:	07a6                	slli	a5,a5,0x9
     938:	0000                	unimp
     93a:	0001                	nop
     93c:	0007a66b          	0x7a66b
     940:	b200                	fsd	fs0,32(a2)
     942:	04000007          	0x4000007
     946:	f300                	fsw	fs0,32(a4)
     948:	5c01                	li	s8,-32
     94a:	b29f 0007 b600      	0xb6000007b29f
     950:	0008                	0x8
     952:	0100                	addi	s0,sp,128
     954:	6b00                	flw	fs0,16(a4)
	...
     95e:	066c                	addi	a1,sp,780
     960:	0000                	unimp
     962:	06d0                	addi	a2,sp,836
     964:	0000                	unimp
     966:	0001                	nop
     968:	d05d                	beqz	s0,90e <generate_keys+0x58>
     96a:	0006                	c.slli	zero,0x1
     96c:	9200                	0x9200
     96e:	01000007          	0x1000007
     972:	5900                	lw	s0,48(a0)
     974:	0792                	slli	a5,a5,0x4
    int polyR[N+1];
     976:	0000                	unimp
     978:	07b2                	slli	a5,a5,0xc
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0000                	unimp
    int polyR[N+1];
     97c:	0004                	0x4
     97e:	9f5d01f3          	0x9f5d01f3
     982:	07b2                	slli	a5,a5,0xc
     984:	0000                	unimp
     986:	08b6                	slli	a7,a7,0xd
     988:	0000                	unimp
    polyR[N] = 1;
     98a:	0001                	nop
     98c:	0059                	c.nop	22
     98e:	0000                	unimp
     990:	0000                	unimp
     992:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     994:	8800                	0x8800
     996:	b2000007          	0xb2000007
     99a:	06000007          	0x6000007
     99e:	0300                	addi	s0,sp,384
     9a0:	18d4                	addi	a3,sp,116
     9a2:	0000                	unimp
     9a4:	009f 0000 0000      	0x9f
     9aa:	0000                	unimp
     9ac:	c400                	sw	s0,8(s0)
     9ae:	0006                	c.slli	zero,0x1
     9b0:	9400                	0x9400
     9b2:	01000007          	0x1000007
     9b6:	6200                	flw	fs0,0(a2)
     9b8:	0794                	addi	a3,sp,960
     9ba:	0000                	unimp
     9bc:	07a6                	slli	a5,a5,0x9
     9be:	0000                	unimp
     9c0:	7f8b0003          	lb	zero,2040(s6)
     9c4:	a69f 0007 b200      	0xb2000007a69f
     9ca:	06000007          	0x6000007
     9ce:	f300                	fsw	fs0,32(a4)
     9d0:	5c01                	li	s8,-32
     9d2:	1c31                	addi	s8,s8,-20
     9d4:	b29f 0007 b600      	0xb6000007b29f
     9da:	0008                	0x8
     9dc:	0100                	addi	s0,sp,128
     9de:	6200                	flw	fs0,0(a2)
	...
     9e8:	06c4                	addi	s1,sp,836
     9ea:	0000                	unimp
     9ec:	06d0                	addi	a2,sp,836
     9ee:	0000                	unimp
     9f0:	0002                	c.slli64	zero
     9f2:	9f30                	0x9f30
     9f4:	06d0                	addi	a2,sp,836
     9f6:	0000                	unimp
    polyR[0] = -1;
     9f8:	06ea                	slli	a3,a3,0x1a
     9fa:	0000                	unimp
    for(i = 1; i < N; ++i){
     9fc:	0001                	nop
     9fe:	065e                	slli	a2,a2,0x17
     a00:	0a000007          	0xa000007
    for (i = N; i < 55; ++i ){
     a04:	01000007          	0x1000007
     a08:	6b00                	flw	fs0,16(a4)
     a0a:	070a                	slli	a4,a4,0x2
    for(i = 0; i < N; ++i){
     a0c:	0000                	unimp
        random_keys[i] = f[i];
     a0e:	0714                	addi	a3,sp,896
     a10:	0000                	unimp
     a12:	0001                	nop
     a14:	165f 0007 2100      	0x21000007165f
    for(i = 0; i < N; ++i){
     a1a:	01000007          	0x1000007
    for(i = N; i < (2*N); ++i){
     a1e:	5e00                	lw	s0,56(a2)
     a20:	072e                	slli	a4,a4,0xb
     a22:	0000                	unimp
     a24:	0730                	addi	a2,sp,904
        random_keys[i] = g[i-N];
     a26:	0000                	unimp
     a28:	0002                	c.slli64	zero
     a2a:	9f30                	0x9f30
     a2c:	0730                	addi	a2,sp,904
    for(i = N; i < (2*N); ++i){
     a2e:	0000                	unimp
     a30:	0000073b          	0x73b
    for(i = (2*N); i < (3*N); ++i){
     a34:	0001                	nop
     a36:	4a5f 0007 4c00      	0x4c0000074a5f
    fp = ext_euclid(polyR, f, (N+1), p);
     a3c:	02000007          	0x2000007
     a40:	3000                	fld	fs0,32(s0)
     a42:	4c9f 0007 5700      	0x570000074c9f
        random_keys[i] = fp[i-(2*N)];
     a48:	01000007          	0x1000007
     a4c:	5f00                	lw	s0,56(a4)
    for(i = (2*N); i < (3*N); ++i){
     a4e:	0758                	addi	a4,sp,900
     a50:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     a52:	075c                	addi	a5,sp,900
     a54:	0000                	unimp
     a56:	0002                	c.slli64	zero
     a58:	9f30                	0x9f30
     a5a:	075c                	addi	a5,sp,900
     a5c:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     a5e:	00000767          	jalr	a4,zero # 0 <__DYNAMIC>
     a62:	0001                	nop
     a64:	685e                	flw	fa6,212(sp)
        random_keys[i] = fq[i-(3*N)];
     a66:	6e000007          	0x6e000007
     a6a:	02000007          	0x2000007
    for(i = (3*N); i < (4*N); ++i){
     a6e:	3000                	fld	fs0,32(s0)
     a70:	6e9f 0007 7800      	0x780000076e9f
    fg = polymult2(fq, N, g, N, 0);
     a76:	01000007          	0x1000007
     a7a:	5d00                	lw	s0,56(a0)
    for(i = 0; i < (2*N-1); ++i){
     a7c:	0784                	addi	s1,sp,960
     a7e:	0000                	unimp
     a80:	07c0                	addi	s0,sp,964
     a82:	0000                	unimp
     a84:	0001                	nop
     a86:	c05e                	sw	s7,0(sp)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a88:	e4000007          	0xe4000007
     a8c:	03000007          	0x3000007
    for(i = (4*N); i < (5*N); ++i){
     a90:	7e00                	flw	fs0,56(a2)
     a92:	9f7f                	0x9f7f
     a94:	07e4                	addi	s1,sp,972
     a96:	0000                	unimp
     a98:	07e8                	addi	a0,sp,972
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a9a:	0000                	unimp
     a9c:	0001                	nop
     a9e:	e85e                	fsw	fs7,16(sp)
     aa0:	f2000007          	0xf2000007
    for(i = (4*N); i < (5*N); ++i){
     aa4:	01000007          	0x1000007
    for(i = (5*N); i < (6*N+1); ++i){
     aa8:	5f00                	lw	s0,56(a4)
     aaa:	07f2                	slli	a5,a5,0x1c
        random_keys[i] = polyR[i-(5*N)];
     aac:	0000                	unimp
     aae:	07f8                	addi	a4,sp,972
     ab0:	0000                	unimp
     ab2:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    for(i = (5*N); i < (6*N+1); ++i){
     ab6:	f89f 0007 fa00      	0xfa000007f89f
     abc:	01000007          	0x1000007
}
     ac0:	5f00                	lw	s0,56(a4)
     ac2:	07fa                	slli	a5,a5,0x1e
     ac4:	0000                	unimp
     ac6:	080c                	addi	a1,sp,16
     ac8:	0000                	unimp
     aca:	0001                	nop
     acc:	0c5e                	slli	s8,s8,0x17
     ace:	0008                	0x8
     ad0:	1000                	addi	s0,sp,32
     ad2:	0008                	0x8
     ad4:	0300                	addi	s0,sp,384
     ad6:	7e00                	flw	fs0,56(a2)
     ad8:	9f7f                	0x9f7f
     ada:	0810                	addi	a2,sp,16
     adc:	0000                	unimp
     ade:	0814                	addi	a3,sp,16
     ae0:	0000                	unimp
     ae2:	0001                	nop
     ae4:	145e                	slli	s0,s0,0x37
     ae6:	0008                	0x8
     ae8:	2200                	fld	fs0,0(a2)
     aea:	0008                	0x8
     aec:	0100                	addi	s0,sp,128
     aee:	5f00                	lw	s0,56(a4)
     af0:	0822                	slli	a6,a6,0x8
     af2:	0000                	unimp
     af4:	0824                	addi	s1,sp,24
     af6:	0000                	unimp
     af8:	7f7f0003          	lb	zero,2039(t5)
     afc:	249f 0008 3400      	0x34000008249f
        polyR[i] = 0;
     b02:	0008                	0x8
     b04:	0100                	addi	s0,sp,128
     b06:	5f00                	lw	s0,56(a4)
     b08:	0834                	addi	a3,sp,24
    for(i = 1; i < N; ++i){
     b0a:	0000                	unimp
     b0c:	0836                	slli	a6,a6,0xd
        f[i] = 0;
     b0e:	0000                	unimp
     b10:	7f7f0003          	lb	zero,2039(t5)
     b14:	369f 0008 3800      	0x38000008369f
     b1a:	0008                	0x8
        g[i] = 0;
     b1c:	0100                	addi	s0,sp,128
     b1e:	5f00                	lw	s0,56(a4)
     b20:	0838                	addi	a4,sp,24
     b22:	0000                	unimp
     b24:	084a                	slli	a6,a6,0x12
    for (i = N; i < 55; ++i ){
     b26:	0000                	unimp
     b28:	0001                	nop
        random_keys[i] = f[i];
     b2a:	4a5e                	lw	s4,212(sp)
     b2c:	0008                	0x8
     b2e:	4e00                	lw	s0,24(a2)
     b30:	0008                	0x8
     b32:	0300                	addi	s0,sp,384
     b34:	7e00                	flw	fs0,56(a2)
     b36:	9f7f                	0x9f7f
     b38:	084e                	slli	a6,a6,0x13
    for(i = 0; i < N; ++i){
     b3a:	0000                	unimp
        random_keys[i] = f[i];
     b3c:	0852                	slli	a6,a6,0x14
    for(i = 0; i < N; ++i){
     b3e:	0000                	unimp
        random_keys[i] = g[i-N];
     b40:	0001                	nop
     b42:	525e                	lw	tp,244(sp)
     b44:	0008                	0x8
     b46:	5e00                	lw	s0,56(a2)
     b48:	0008                	0x8
    for(i = N; i < (2*N); ++i){
     b4a:	0100                	addi	s0,sp,128
     b4c:	5d00                	lw	s0,56(a0)
     b4e:	085e                	slli	a6,a6,0x17
        random_keys[i] = fp[i-(2*N)];
     b50:	0000                	unimp
     b52:	088a                	slli	a7,a7,0x2
     b54:	0000                	unimp
     b56:	7f7d0003          	lb	zero,2039(s10)
    for(i = (2*N); i < (3*N); ++i){
     b5a:	8a9f 0008 8e00      	0x8e0000088a9f
        random_keys[i] = fq[i-(3*N)];
     b60:	0008                	0x8
     b62:	0100                	addi	s0,sp,128
     b64:	5d00                	lw	s0,56(a0)
     b66:	08a2                	slli	a7,a7,0x8
     b68:	0000                	unimp
     b6a:	08a6                	slli	a7,a7,0x9
     b6c:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b6e:	0001                	nop
        random_keys[i] = fq[i-(3*N)];
     b70:	a65e                	fsd	fs7,264(sp)
    for(i = (3*N); i < (4*N); ++i){
     b72:	0008                	0x8
        fg[i] = fg[i]*p;
     b74:	b400                	fsd	fs0,40(s0)
    for(i = 0; i < (2*N-1); ++i){
     b76:	0008                	0x8
     b78:	0300                	addi	s0,sp,384
        fg[i] = fg[i]*p;
     b7a:	7e00                	flw	fs0,56(a2)
     b7c:	9f7f                	0x9f7f
     b7e:	08b4                	addi	a3,sp,88
     b80:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     b82:	08b6                	slli	a7,a7,0xd
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b84:	0000                	unimp
     b86:	0001                	nop
     b88:	005e                	c.slli	zero,0x17
     b8a:	0000                	unimp
     b8c:	0000                	unimp
     b8e:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b90:	7800                	flw	fs0,48(s0)
     b92:	b2000007          	0xb2000007
        random_keys[i] = polyR[i-(5*N)];
     b96:	01000007          	0x1000007
     b9a:	5f00                	lw	s0,56(a4)
     b9c:	088e                	slli	a7,a7,0x3
     b9e:	0000                	unimp
     ba0:	08b6                	slli	a7,a7,0xd
    for(i = (5*N); i < (6*N+1); ++i){
     ba2:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     ba4:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	005f 0000 0000      	0x5f
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bac:	0000                	unimp
     bae:	c200                	sw	s0,0(a2)
     bb0:	0006                	c.slli	zero,0x1
     bb2:	9600                	0x9600
     bb4:	02000007          	0x2000007
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bb8:	8300                	0x8300
     bba:	b200                	fsd	fs0,32(a2)
     bbc:	b6000007          	0xb6000007
     bc0:	0008                	0x8
     bc2:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	8300                	0x8300
	...
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	c200                	sw	s0,0(a2)
    temp = polymult(public_key,N,random_val,48,q,0);
     bd0:	0006                	c.slli	zero,0x1
     bd2:	9a00                	0x9a00
     bd4:	02000007          	0x2000007
     bd8:	8500                	0x8500
     bda:	b200                	fsd	fs0,32(a2)
     bdc:	b6000007          	0xb6000007
     be0:	0008                	0x8
     be2:	0200                	addi	s0,sp,256
    for(i = 0; i < 48; ++i){
     be4:	8500                	0x8500
	...
        temp[i] = temp[i] + message[i];
     bee:	c200                	sw	s0,0(a2)
     bf0:	0006                	c.slli	zero,0x1
     bf2:	a000                	fsd	fs0,0(s0)
     bf4:	02000007          	0x2000007
     bf8:	8800                	0x8800
    for(i = 0; i < 48; ++i){
     bfa:	b200                	fsd	fs0,32(a2)
     bfc:	b6000007          	0xb6000007
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c00:	0008                	0x8
     c02:	0200                	addi	s0,sp,256
     c04:	8800                	0x8800
	...
    for(i = (2*N); i < (3*N); ++i){
     c0e:	c200                	sw	s0,0(a2)
     c10:	0006                	c.slli	zero,0x1
     c12:	9c00                	0x9c00
     c14:	02000007          	0x2000007
     c18:	8600                	0x8600
}
     c1a:	9c00                	0x9c00
     c1c:	a0000007          	0xa0000007
     c20:	0c000007          	0xc000007
     c24:	8800                	0x8800
     c26:	8b00                	0x8b00
     c28:	3200                	fld	fs0,32(a2)
        CT[i-(2*N)] = CT[i];
     c2a:	2324                	fld	fs1,64(a4)
     c2c:	1af0090f          	0x1af0090f
     c30:	b21c                	fsd	fa5,32(a2)
    for(i = (2*N); i < (3*N); ++i){
     c32:	b6000007          	0xb6000007
        CT[i-(2*N)] = CT[i];
     c36:	0008                	0x8
     c38:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     c3a:	8600                	0x8600
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     c44:	c200                	sw	s0,0(a2)
     c46:	0006                	c.slli	zero,0x1
     c48:	a200                	fsd	fs0,0(a2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	02000007          	0x2000007
     c4e:	8900                	0x8900
     c50:	b200                	fsd	fs0,32(a2)
     c52:	b6000007          	0xb6000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c56:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	0200                	addi	s0,sp,256
     c5a:	8900                	0x8900
	...
     c64:	c200                	sw	s0,0(a2)
     c66:	0006                	c.slli	zero,0x1
     c68:	9e00                	0x9e00
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c6a:	02000007          	0x2000007
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6e:	8700                	0x8700
     c70:	9e00                	0x9e00
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c72:	a2000007          	0xa2000007
     c76:	0c000007          	0xc000007
     c7a:	8900                	0x8900
     c7c:	8b00                	0x8b00
     c7e:	3200                	fld	fs0,32(a2)
     c80:	2324                	fld	fs1,64(a4)
     c82:	1af0090f          	0x1af0090f
    for(i = (2*N); i < ((2*N)+N); ++i){
     c86:	b21c                	fsd	fa5,32(a2)
     c88:	b6000007          	0xb6000007
     c8c:	0008                	0x8
        if(a2[i] <= q/2)
     c8e:	0200                	addi	s0,sp,256
     c90:	8700                	0x8700
	...
    c = polymult2(secret_key_fp,N,a2,N,0);
     c9a:	c400                	sw	s0,8(s0)
     c9c:	0006                	c.slli	zero,0x1
     c9e:	8c00                	0x8c00
     ca0:	02000007          	0x2000007
     ca4:	7200                	flw	fs0,32(a2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     ca6:	8c00                	0x8c00
     ca8:	98000007          	0x98000007
     cac:	02000007          	0x2000007
     cb0:	8400                	0x8400
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	9800                	0x9800
     cb4:	9e000007          	0x9e000007
}
     cb8:	0c000007          	0xc000007
     cbc:	8700                	0x8700
     cbe:	8b00                	0x8b00
     cc0:	3200                	fld	fs0,32(a2)
     cc2:	2324                	fld	fs1,64(a4)
     cc4:	1af0090f          	0x1af0090f
     cc8:	9e1c                	0x9e1c
     cca:	a2000007          	0xa2000007
        a2[i-(2*N)] = a2[i];
     cce:	0e000007          	0xe000007
     cd2:	8900                	0x8900
     cd4:	8b00                	0x8b00
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd6:	3200                	fld	fs0,32(a2)
     cd8:	2324                	fld	fs1,64(a4)
        a2[i-(2*N)] = a2[i];
     cda:	1af0090f          	0x1af0090f
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	2431                	jal	eea <memset+0x92>
        if(a2[i] <= q/2)
     ce0:	b21c                	fsd	fa5,32(a2)
     ce2:	b6000007          	0xb6000007
            a2[i] = (-1)*(q-a2[i]);
     ce6:	0008                	0x8
     ce8:	0200                	addi	s0,sp,256
     cea:	7200                	flw	fs0,32(a2)
	...
        c2[i-(2*N)] = c2[i];
     cf4:	0600                	addi	s0,sp,768
     cf6:	20000007          	0x20000007
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfa:	01000007          	0x1000007
        c2[i-(2*N)] = c2[i];
     cfe:	5a00                	lw	s0,48(a2)
     d00:	07e8                	addi	a0,sp,972
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	0000                	unimp
     d04:	0814                	addi	a3,sp,16
     d06:	0000                	unimp
     d08:	0001                	nop
     d0a:	005a                	c.slli	zero,0x16
     d0c:	0000                	unimp
     d0e:	0000                	unimp
     d10:	0000                	unimp
     d12:	2e00                	fld	fs0,24(a2)
     d14:	3a000007          	0x3a000007
     d18:	01000007          	0x1000007
     d1c:	5a00                	lw	s0,48(a2)
     d1e:	0814                	addi	a3,sp,16
     d20:	0000                	unimp
     d22:	0826                	slli	a6,a6,0x9
     d24:	0000                	unimp
     d26:	0001                	nop
     d28:	005a                	c.slli	zero,0x16
     d2a:	0000                	unimp
     d2c:	0000                	unimp
     d2e:	0000                	unimp
     d30:	4a00                	lw	s0,16(a2)
     d32:	56000007          	0x56000007
     d36:	01000007          	0x1000007
     d3a:	5a00                	lw	s0,48(a2)
     d3c:	0826                	slli	a6,a6,0x9
     d3e:	0000                	unimp
     d40:	0838                	addi	a4,sp,24
     d42:	0000                	unimp
     d44:	0001                	nop
     d46:	005a                	c.slli	zero,0x16
     d48:	0000                	unimp
     d4a:	0000                	unimp
     d4c:	0000                	unimp
     d4e:	c400                	sw	s0,8(s0)
     d50:	0006                	c.slli	zero,0x1
     d52:	ea00                	fsw	fs0,16(a2)
     d54:	0006                	c.slli	zero,0x1
     d56:	0200                	addi	s0,sp,256
     d58:	3100                	fld	fs0,32(a0)
     d5a:	ea9f 0006 6e00      	0x6e000006ea9f
     d60:	02000007          	0x2000007
     d64:	3000                	fld	fs0,32(s0)
     d66:	6e9f 0007 8400      	0x840000076e9f
     d6c:	01000007          	0x1000007
     d70:	5e00                	lw	s0,56(a2)
     d72:	07b2                	slli	a5,a5,0xc
     d74:	0000                	unimp
     d76:	07e8                	addi	a0,sp,972
     d78:	0000                	unimp
     d7a:	0002                	c.slli64	zero
     d7c:	9f31                	0x9f31
     d7e:	07e8                	addi	a0,sp,972
     d80:	0000                	unimp
     d82:	0852                	slli	a6,a6,0x14
     d84:	0000                	unimp
     d86:	0002                	c.slli64	zero
     d88:	9f30                	0x9f30
     d8a:	0852                	slli	a6,a6,0x14
     d8c:	0000                	unimp
     d8e:	0876                	slli	a6,a6,0x1d
     d90:	0000                	unimp
     d92:	0001                	nop
     d94:	8a5e                	mv	s4,s7
     d96:	0008                	0x8
     d98:	a200                	fsd	fs0,0(a2)
     d9a:	0008                	0x8
     d9c:	0100                	addi	s0,sp,128
     d9e:	5e00                	lw	s0,56(a2)
	...
     da8:	06c2                	slli	a3,a3,0x10
     daa:	0000                	unimp
     dac:	0794                	addi	a3,sp,960
     dae:	0000                	unimp
     db0:	0001                	nop
     db2:	9462                	add	s0,s0,s8
     db4:	a6000007          	0xa6000007
     db8:	03000007          	0x3000007
     dbc:	8b00                	0x8b00
     dbe:	9f7f                	0x9f7f
     dc0:	07a6                	slli	a5,a5,0x9
     dc2:	0000                	unimp
     dc4:	07b2                	slli	a5,a5,0xc
     dc6:	0000                	unimp
     dc8:	0006                	c.slli	zero,0x1
     dca:	315c01f3          	0x315c01f3
     dce:	9f1c                	0x9f1c
     dd0:	07b2                	slli	a5,a5,0xc
     dd2:	0000                	unimp
     dd4:	08b6                	slli	a7,a7,0xd
     dd6:	0000                	unimp
     dd8:	0001                	nop
     dda:	0062                	c.slli	zero,0x18
     ddc:	0000                	unimp
     dde:	0000                	unimp
     de0:	0000                	unimp
     de2:	c200                	sw	s0,0(a2)
     de4:	0006                	c.slli	zero,0x1
     de6:	9400                	0x9400
     de8:	01000007          	0x1000007
     dec:	6200                	flw	fs0,0(a2)
     dee:	0794                	addi	a3,sp,960
     df0:	0000                	unimp
     df2:	07a6                	slli	a5,a5,0x9
     df4:	0000                	unimp
     df6:	7f8b0003          	lb	zero,2040(s6)
     dfa:	a69f 0007 b200      	0xb2000007a69f
     e00:	06000007          	0x6000007
     e04:	f300                	fsw	fs0,32(a4)
     e06:	5c01                	li	s8,-32
     e08:	1c31                	addi	s8,s8,-20
     e0a:	b29f 0007 b600      	0xb6000007b29f
     e10:	0008                	0x8
     e12:	0100                	addi	s0,sp,128
     e14:	6200                	flw	fs0,0(a2)
	...
     e1e:	06c2                	slli	a3,a3,0x10
     e20:	0000                	unimp
     e22:	0794                	addi	a3,sp,960
     e24:	0000                	unimp
     e26:	0001                	nop
     e28:	9462                	add	s0,s0,s8
     e2a:	a6000007          	0xa6000007
     e2e:	03000007          	0x3000007
     e32:	8b00                	0x8b00
     e34:	9f7f                	0x9f7f
     e36:	07a6                	slli	a5,a5,0x9
     e38:	0000                	unimp
     e3a:	07b2                	slli	a5,a5,0xc
     e3c:	0000                	unimp
     e3e:	0006                	c.slli	zero,0x1
     e40:	315c01f3          	0x315c01f3
     e44:	9f1c                	0x9f1c
     e46:	07b2                	slli	a5,a5,0xc
     e48:	0000                	unimp
     e4a:	08b6                	slli	a7,a7,0xd
     e4c:	0000                	unimp
     e4e:	0001                	nop
     e50:	0062                	c.slli	zero,0x18
     e52:	0000                	unimp
     e54:	0000                	unimp
     e56:	0000                	unimp
     e58:	c200                	sw	s0,0(a2)
     e5a:	0006                	c.slli	zero,0x1
     e5c:	9400                	0x9400
     e5e:	01000007          	0x1000007
     e62:	6200                	flw	fs0,0(a2)
     e64:	0794                	addi	a3,sp,960
     e66:	0000                	unimp
     e68:	07a6                	slli	a5,a5,0x9
     e6a:	0000                	unimp
     e6c:	7f8b0003          	lb	zero,2040(s6)
     e70:	a69f 0007 b200      	0xb2000007a69f
     e76:	06000007          	0x6000007
     e7a:	f300                	fsw	fs0,32(a4)
     e7c:	5c01                	li	s8,-32
     e7e:	1c31                	addi	s8,s8,-20
     e80:	b29f 0007 b600      	0xb6000007b29f
     e86:	0008                	0x8
     e88:	0100                	addi	s0,sp,128
     e8a:	6200                	flw	fs0,0(a2)
	...
     e94:	06c2                	slli	a3,a3,0x10
     e96:	0000                	unimp
     e98:	0794                	addi	a3,sp,960
     e9a:	0000                	unimp
     e9c:	0001                	nop
     e9e:	9462                	add	s0,s0,s8
     ea0:	a6000007          	0xa6000007
     ea4:	03000007          	0x3000007
     ea8:	8b00                	0x8b00
     eaa:	9f7f                	0x9f7f
     eac:	07a6                	slli	a5,a5,0x9
     eae:	0000                	unimp
     eb0:	07b2                	slli	a5,a5,0xc
     eb2:	0000                	unimp
     eb4:	0006                	c.slli	zero,0x1
     eb6:	315c01f3          	0x315c01f3
     eba:	9f1c                	0x9f1c
     ebc:	07b2                	slli	a5,a5,0xc
     ebe:	0000                	unimp
     ec0:	08b6                	slli	a7,a7,0xd
     ec2:	0000                	unimp
     ec4:	0001                	nop
     ec6:	0062                	c.slli	zero,0x18
     ec8:	0000                	unimp
     eca:	0000                	unimp
     ecc:	0000                	unimp
     ece:	c200                	sw	s0,0(a2)
     ed0:	0006                	c.slli	zero,0x1
     ed2:	9400                	0x9400
     ed4:	01000007          	0x1000007
     ed8:	6200                	flw	fs0,0(a2)
     eda:	0794                	addi	a3,sp,960
     edc:	0000                	unimp
     ede:	07a6                	slli	a5,a5,0x9
     ee0:	0000                	unimp
     ee2:	7f8b0003          	lb	zero,2040(s6)
     ee6:	a69f 0007 b200      	0xb2000007a69f
     eec:	06000007          	0x6000007
     ef0:	f300                	fsw	fs0,32(a4)
     ef2:	5c01                	li	s8,-32
     ef4:	1c31                	addi	s8,s8,-20
     ef6:	b29f 0007 b600      	0xb6000007b29f
     efc:	0008                	0x8
     efe:	0100                	addi	s0,sp,128
int main(){
     f00:	6200                	flw	fs0,0(a2)
	...
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f0a:	06c2                	slli	a3,a3,0x10
     f0c:	0000                	unimp
     f0e:	0794                	addi	a3,sp,960
     f10:	0000                	unimp
int main(){
     f12:	0001                	nop
     f14:	9462                	add	s0,s0,s8
     f16:	a6000007          	0xa6000007
     f1a:	03000007          	0x3000007
     f1e:	8b00                	0x8b00
     f20:	9f7f                	0x9f7f
    resultkon[0] = 0xaaaaaaa0;
     f22:	07a6                	slli	a5,a5,0x9
     f24:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f26:	07b2                	slli	a5,a5,0xc
    resultkon[0] = 0xaaaaaaa0;
     f28:	0000                	unimp
     f2a:	0006                	c.slli	zero,0x1
     f2c:	315c01f3          	0x315c01f3
     f30:	9f1c                	0x9f1c
     f32:	07b2                	slli	a5,a5,0xc
    keys = generate_keys(N, p, q);
     f34:	0000                	unimp
     f36:	08b6                	slli	a7,a7,0xd
     f38:	0000                	unimp
     f3a:	0001                	nop
     f3c:	0062                	c.slli	zero,0x18
    resultkon[0] = 0xaaaaaaa0;
     f3e:	0000                	unimp
    resultkon[0] = 0xaaaaaaa1;
     f40:	0000                	unimp
     f42:	0000                	unimp
    keys = generate_keys(N, p, q);
     f44:	6a00                	flw	fs0,16(a2)
    resultkon[0] = 0xaaaaaaa1;
     f46:	0004                	0x4
     f48:	cc00                	sw	s0,24(s0)
    for(i = 0; i < N; ++i){
     f4a:	0004                	0x4
     f4c:	0100                	addi	s0,sp,128
        secret_key_f[i] = keys[i];
     f4e:	5a00                	lw	s0,48(a2)
     f50:	04cc                	addi	a1,sp,580
     f52:	0000                	unimp
     f54:	04fc                	addi	a5,sp,588
     f56:	0000                	unimp
     f58:	0004                	0x4
    for(i = 0; i < N; ++i){
     f5a:	9f5a01f3          	0x9f5a01f3
     f5e:	04fc                	addi	a5,sp,588
    for(i = N; i < (2*N); ++i){
     f60:	0000                	unimp
     f62:	050e                	slli	a0,a0,0x3
     f64:	0000                	unimp
     f66:	0001                	nop
     f68:	0e5a                	slli	t3,t3,0x16
     f6a:	0005                	c.nop	1
        secret_key_fp[i-(2*N)] = keys[i];
     f6c:	6c00                	flw	fs0,24(s0)
     f6e:	0006                	c.slli	zero,0x1
     f70:	0400                	addi	s0,sp,512
     f72:	f300                	fsw	fs0,32(a4)
     f74:	5a01                	li	s4,-32
    for(i = (2*N); i < (3*N); ++i){
     f76:	009f 0000 0000      	0x9f
    for(i = (3*N); i < (4*N); ++i){
     f7c:	0000                	unimp
     f7e:	6a00                	flw	fs0,16(a2)
     f80:	0004                	0x4
     f82:	ca00                	sw	s0,16(a2)
     f84:	0004                	0x4
        public_key[i-(4*N)] = keys[i];
     f86:	0100                	addi	s0,sp,128
     f88:	5b00                	lw	s0,48(a4)
     f8a:	04ca                	slli	s1,s1,0x12
     f8c:	0000                	unimp
     f8e:	0578                	addi	a4,sp,652
    for(i = (4*N); i < (5*N); ++i){
     f90:	0000                	unimp
     f92:	0001                	nop
     f94:	7859                	lui	a6,0xffff6
     f96:	0005                	c.nop	1
     f98:	9800                	0x9800
     f9a:	0005                	c.nop	1
        ring_poly[i-(5*N)] = keys[i];
     f9c:	0300                	addi	s0,sp,384
     f9e:	8a00                	0x8a00
     fa0:	9f01                	0x9f01
     fa2:	0598                	addi	a4,sp,704
     fa4:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     fa6:	05a6                	slli	a1,a1,0x9
     fa8:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
     faa:	0004                	0x4
     fac:	9f5b01f3          	0x9f5b01f3
     fb0:	05a6                	slli	a1,a1,0x9
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb2:	0000                	unimp
     fb4:	065a                	slli	a2,a2,0x16
     fb6:	0000                	unimp
     fb8:	0001                	nop
    resultkon[0] = 0xbbbbbbb1;
     fba:	5a59                	li	s4,-10
     fbc:	0006                	c.slli	zero,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fbe:	6c00                	flw	fs0,24(s0)
     fc0:	0006                	c.slli	zero,0x1
    resultkon[0] = 0xbbbbbbb0;
     fc2:	0300                	addi	s0,sp,384
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fc4:	8a00                	0x8a00
    resultkon[0] = 0xbbbbbbb1;
     fc6:	9f01                	0x9f01
	...
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd0:	046a                	slli	s0,s0,0x1a
    resultkon[0] = 0xccccccc0;
     fd2:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fd4:	04c8                	addi	a0,sp,580
     fd6:	0000                	unimp
     fd8:	0001                	nop
     fda:	c85c                	sw	a5,20(s0)
     fdc:	0004                	0x4
     fde:	f200                	fsw	fs0,32(a2)
     fe0:	0004                	0x4
     fe2:	0100                	addi	s0,sp,128
     fe4:	6800                	flw	fs0,16(s0)
     fe6:	04f2                	slli	s1,s1,0x1c
    resultkon[0] = 0xccccccc1;	
     fe8:	0000                	unimp
     fea:	04fc                	addi	a5,sp,588
            resultkon[0] = 0xDEDEDEDE;
     fec:	0000                	unimp
     fee:	0004                	0x4
    resultkon[0] = 0xccccccc1;	
     ff0:	9f5c01f3          	0x9f5c01f3
            resultkon[0] = 0xDEDEDEDE;
     ff4:	04fc                	addi	a5,sp,588
     ff6:	0000                	unimp
    for(i = 0; i < 32; ++i){
     ff8:	050e                	slli	a0,a0,0x3
     ffa:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
     ffc:	0001                	nop
     ffe:	0e5c                	addi	a5,sp,788
    1000:	0005                	c.nop	1
    1002:	3c00                	fld	fs0,56(s0)
    1004:	0005                	c.nop	1
    1006:	0100                	addi	s0,sp,128
    1008:	6800                	flw	fs0,16(s0)
    100a:	053c                	addi	a5,sp,648
            resultkon[0] = 0xBABABABA;
    100c:	0000                	unimp
    100e:	066c                	addi	a1,sp,780
    1010:	0000                	unimp
    1012:	0004                	0x4
    1014:	9f5c01f3          	0x9f5c01f3
	...
}
    1020:	046a                	slli	s0,s0,0x1a
    1022:	0000                	unimp
    1024:	04c2                	slli	s1,s1,0x10
    1026:	0000                	unimp
    1028:	0001                	nop
    102a:	c25d                	beqz	a2,10d0 <__DTOR_END__+0x88>
    102c:	0004                	0x4
            resultkon[0] = 0xDEDEDEDE;
    102e:	8c00                	0x8c00
    for(i = 0; i < 32; ++i){
    1030:	0005                	c.nop	1
    1032:	0100                	addi	s0,sp,128
    1034:	6400                	flw	fs0,8(s0)
    1036:	058c                	addi	a1,sp,704
    1038:	0000                	unimp
    103a:	05a6                	slli	a1,a1,0x9
    103c:	0000                	unimp
    103e:	0004                	0x4
    1040:	9f5d01f3          	0x9f5d01f3
    1044:	05a6                	slli	a1,a1,0x9
    1046:	0000                	unimp
    1048:	066c                	addi	a1,sp,780
    104a:	0000                	unimp
    104c:	0001                	nop
    104e:	0064                	addi	s1,sp,12
    1050:	0000                	unimp
    1052:	0000                	unimp
    1054:	0000                	unimp
    1056:	6a00                	flw	fs0,16(a2)
    1058:	0004                	0x4
    105a:	c200                	sw	s0,0(a2)
    105c:	0004                	0x4
    105e:	0100                	addi	s0,sp,128
    1060:	5e00                	lw	s0,56(a2)
    1062:	04c2                	slli	s1,s1,0x10
    1064:	0000                	unimp
    1066:	058a                	slli	a1,a1,0x2
    1068:	0000                	unimp
    106a:	0001                	nop
    106c:	00058a63          	beqz	a1,1080 <__DTOR_END__+0x38>
    1070:	a600                	fsd	fs0,8(a2)
    1072:	0005                	c.nop	1
    1074:	0400                	addi	s0,sp,512
    1076:	f300                	fsw	fs0,32(a4)
    1078:	5e01                	li	t3,-32
    107a:	a69f 0005 6c00      	0x6c000005a69f
    1080:	0006                	c.slli	zero,0x1
    1082:	0100                	addi	s0,sp,128
    1084:	6300                	flw	fs0,0(a4)
	...
    108e:	04f4                	addi	a3,sp,588
    1090:	0000                	unimp
    1092:	04fc                	addi	a5,sp,588
    1094:	0000                	unimp
    1096:	0001                	nop
    1098:	3c68                	fld	fa0,248(s0)
    109a:	0005                	c.nop	1
    109c:	9400                	0x9400
    109e:	0005                	c.nop	1
    10a0:	0100                	addi	s0,sp,128
    10a2:	6800                	flw	fs0,16(s0)
    10a4:	05a6                	slli	a1,a1,0x9
    10a6:	0000                	unimp
    10a8:	066c                	addi	a1,sp,780
    10aa:	0000                	unimp
    10ac:	0001                	nop
    10ae:	0068                	addi	a0,sp,12
    10b0:	0000                	unimp
    10b2:	0000                	unimp
    10b4:	0000                	unimp
    10b6:	5a00                	lw	s0,48(a2)
    10b8:	0005                	c.nop	1
    10ba:	6000                	flw	fs0,0(s0)
    10bc:	0005                	c.nop	1
    10be:	0100                	addi	s0,sp,128
    10c0:	5f00                	lw	s0,56(a4)
    10c2:	05a6                	slli	a1,a1,0x9
    10c4:	0000                	unimp
    10c6:	05ae                	slli	a1,a1,0xb
    10c8:	0000                	unimp
    10ca:	0001                	nop
    10cc:	005f 0000 0000      	0x5f
    10d2:	0000                	unimp
    10d4:	c000                	sw	s0,0(s0)
    10d6:	0004                	0x4
    10d8:	c200                	sw	s0,0(a2)
    10da:	0004                	0x4
    10dc:	0200                	addi	s0,sp,256
    10de:	3000                	fld	fs0,32(s0)
    10e0:	c29f 0004 cd00      	0xcd000004c29f
    10e6:	0004                	0x4
    10e8:	0100                	addi	s0,sp,128
    10ea:	5f00                	lw	s0,56(a4)
    10ec:	04ce                	slli	s1,s1,0x13
    10ee:	0000                	unimp
    10f0:	04d0                	addi	a2,sp,580
    10f2:	0000                	unimp
    10f4:	0002                	c.slli64	zero
    10f6:	9f30                	0x9f30
    10f8:	04d0                	addi	a2,sp,580
    10fa:	0000                	unimp
    10fc:	000004db          	0x4db
    1100:	0001                	nop
    1102:	dc5f 0004 de00      	0xde000004dc5f
    1108:	0004                	0x4
    110a:	0200                	addi	s0,sp,256
    110c:	3000                	fld	fs0,32(s0)
    110e:	de9f 0004 e200      	0xe2000004de9f
    1114:	0004                	0x4
    1116:	0100                	addi	s0,sp,128
    1118:	5f00                	lw	s0,56(a4)
    111a:	04e2                	slli	s1,s1,0x18
    111c:	0000                	unimp
    111e:	04fc                	addi	a5,sp,588
    1120:	0000                	unimp
    1122:	0001                	nop
    1124:	fc65                	bnez	s0,111c <__DTOR_END__+0xd4>
    1126:	0004                	0x4
    1128:	0a00                	addi	s0,sp,272
    112a:	0005                	c.nop	1
    112c:	0100                	addi	s0,sp,128
    112e:	5f00                	lw	s0,56(a4)
    1130:	050a                	slli	a0,a0,0x2
    1132:	0000                	unimp
    1134:	050c                	addi	a1,sp,640
    1136:	0000                	unimp
    1138:	7f7f0003          	lb	zero,2039(t5)
    113c:	0c9f 0005 1c00      	0x1c0000050c9f
    1142:	0005                	c.nop	1
    1144:	0100                	addi	s0,sp,128
    1146:	5f00                	lw	s0,56(a4)
    1148:	051c                	addi	a5,sp,640
    114a:	0000                	unimp
    114c:	051e                	slli	a0,a0,0x7
    114e:	0000                	unimp
    1150:	7f7f0003          	lb	zero,2039(t5)
    1154:	1e9f 0005 3600      	0x360000051e9f
    115a:	0005                	c.nop	1
    115c:	0100                	addi	s0,sp,128
    115e:	5f00                	lw	s0,56(a4)
    1160:	0536                	slli	a0,a0,0xd
    1162:	0000                	unimp
    1164:	054a                	slli	a0,a0,0x12
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	4a65                	li	s4,25
    116c:	0005                	c.nop	1
    116e:	5a00                	lw	s0,48(a2)
    1170:	0005                	c.nop	1
    1172:	0100                	addi	s0,sp,128
    1174:	5f00                	lw	s0,56(a4)
    1176:	0568                	addi	a0,sp,652
    1178:	0000                	unimp
    117a:	0578                	addi	a4,sp,652
    117c:	0000                	unimp
    117e:	0001                	nop
    1180:	785f 0005 8600      	0x86000005785f
    1186:	0005                	c.nop	1
    1188:	0100                	addi	s0,sp,128
    118a:	5900                	lw	s0,48(a0)
    118c:	05d2                	slli	a1,a1,0x14
    118e:	0000                	unimp
    1190:	05d6                	slli	a1,a1,0x15
    1192:	0000                	unimp
    1194:	0002                	c.slli64	zero
    1196:	9f30                	0x9f30
    1198:	05d6                	slli	a1,a1,0x15
    119a:	0000                	unimp
    119c:	05e1                	addi	a1,a1,24
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	e25f 0005 e600      	0xe6000005e25f
    11a8:	0005                	c.nop	1
    11aa:	0200                	addi	s0,sp,256
    11ac:	3000                	fld	fs0,32(s0)
    11ae:	e69f 0005 f100      	0xf1000005e69f
    11b4:	0005                	c.nop	1
    11b6:	0100                	addi	s0,sp,128
    11b8:	5f00                	lw	s0,56(a4)
    11ba:	05f2                	slli	a1,a1,0x1c
    11bc:	0000                	unimp
    11be:	05f4                	addi	a3,sp,716
    11c0:	0000                	unimp
    11c2:	0001                	nop
    11c4:	f46a                	fsw	fs10,40(sp)
    11c6:	0005                	c.nop	1
    11c8:	1000                	addi	s0,sp,32
    11ca:	0006                	c.slli	zero,0x1
    11cc:	0100                	addi	s0,sp,128
    11ce:	5f00                	lw	s0,56(a4)
    11d0:	0610                	addi	a2,sp,768
    11d2:	0000                	unimp
    11d4:	0618                	addi	a4,sp,768
    11d6:	0000                	unimp
    11d8:	7f7f0003          	lb	zero,2039(t5)
    11dc:	189f 0006 2600      	0x26000006189f
    11e2:	0006                	c.slli	zero,0x1
    11e4:	0100                	addi	s0,sp,128
    11e6:	5f00                	lw	s0,56(a4)
    11e8:	0626                	slli	a2,a2,0x9
    11ea:	0000                	unimp
    11ec:	062e                	slli	a2,a2,0xb
    11ee:	0000                	unimp
    11f0:	7f7f0003          	lb	zero,2039(t5)
    11f4:	2e9f 0006 3600      	0x360000062e9f
    11fa:	0006                	c.slli	zero,0x1
    11fc:	0100                	addi	s0,sp,128
    11fe:	5f00                	lw	s0,56(a4)
    1200:	0636                	slli	a2,a2,0xd
    1202:	0000                	unimp
    1204:	0648                	addi	a0,sp,772
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	485d                	li	a6,23
    120c:	0006                	c.slli	zero,0x1
    120e:	5600                	lw	s0,40(a2)
    1210:	0006                	c.slli	zero,0x1
    1212:	0100                	addi	s0,sp,128
    1214:	5f00                	lw	s0,56(a4)
    1216:	0656                	slli	a2,a2,0x15
    1218:	0000                	unimp
    121a:	0658                	addi	a4,sp,772
    121c:	0000                	unimp
    121e:	7f7f0003          	lb	zero,2039(t5)
    1222:	589f 0006 5a00      	0x5a000006589f
    1228:	0006                	c.slli	zero,0x1
    122a:	0100                	addi	s0,sp,128
    122c:	5f00                	lw	s0,56(a4)
    122e:	065a                	slli	a2,a2,0x16
    1230:	0000                	unimp
    1232:	066c                	addi	a1,sp,780
    1234:	0000                	unimp
    1236:	0001                	nop
    1238:	0059                	c.nop	22
    123a:	0000                	unimp
    123c:	0000                	unimp
    123e:	0000                	unimp
    1240:	5a00                	lw	s0,48(a2)
    1242:	0005                	c.nop	1
    1244:	6800                	flw	fs0,16(s0)
    1246:	0005                	c.nop	1
    1248:	0100                	addi	s0,sp,128
    124a:	5e00                	lw	s0,56(a2)
    124c:	05a6                	slli	a1,a1,0x9
    124e:	0000                	unimp
    1250:	05aa                	slli	a1,a1,0xa
    1252:	0000                	unimp
    1254:	0001                	nop
    1256:	005e                	c.slli	zero,0x17
    1258:	0000                	unimp
    125a:	0000                	unimp
    125c:	0000                	unimp
    125e:	7c00                	flw	fs0,56(s0)
    1260:	0005                	c.nop	1
    1262:	a600                	fsd	fs0,8(a2)
    1264:	0005                	c.nop	1
    1266:	0600                	addi	s0,sp,768
    1268:	0300                	addi	s0,sp,384
    126a:	167c                	addi	a5,sp,812
    126c:	0000                	unimp
    126e:	009f 0000 0000      	0x9f
    1274:	0000                	unimp
    1276:	ba00                	fsd	fs0,48(a2)
    1278:	0004                	0x4
    127a:	9000                	0x9000
    127c:	0005                	c.nop	1
    127e:	0200                	addi	s0,sp,256
    1280:	8600                	0x8600
    1282:	a600                	fsd	fs0,8(a2)
    1284:	0005                	c.nop	1
    1286:	6c00                	flw	fs0,24(s0)
    1288:	0006                	c.slli	zero,0x1
    128a:	0200                	addi	s0,sp,256
    128c:	8600                	0x8600
	...
    1296:	ba00                	fsd	fs0,48(a2)
    1298:	0004                	0x4
    129a:	9200                	0x9200
    129c:	0005                	c.nop	1
    129e:	0200                	addi	s0,sp,256
    12a0:	8700                	0x8700
    12a2:	a600                	fsd	fs0,8(a2)
    12a4:	0005                	c.nop	1
    12a6:	6c00                	flw	fs0,24(s0)
    12a8:	0006                	c.slli	zero,0x1
    12aa:	0200                	addi	s0,sp,256
    12ac:	8700                	0x8700
	...
    12b6:	d000                	sw	s0,32(s0)
    12b8:	0005                	c.nop	1
    12ba:	d100                	sw	s0,32(a0)
    12bc:	0005                	c.nop	1
    12be:	0100                	addi	s0,sp,128
    12c0:	5a00                	lw	s0,48(a2)
    12c2:	05d1                	addi	a1,a1,20
    12c4:	0000                	unimp
    12c6:	0648                	addi	a0,sp,772
    12c8:	0000                	unimp
    12ca:	0001                	nop
    12cc:	0000006b          	0x6b
    12d0:	0000                	unimp
    12d2:	0000                	unimp
    12d4:	ba00                	fsd	fs0,48(a2)
    12d6:	0004                	0x4
    12d8:	7800                	flw	fs0,48(s0)
    12da:	0005                	c.nop	1
    12dc:	0200                	addi	s0,sp,256
    12de:	8200                	0x8200
    12e0:	7800                	flw	fs0,48(s0)
    12e2:	0005                	c.nop	1
    12e4:	9200                	0x9200
    12e6:	0005                	c.nop	1
    12e8:	0c00                	addi	s0,sp,528
    12ea:	8700                	0x8700
    12ec:	8a00                	0x8a00
    12ee:	3201                	jal	bee <ntru_encyrpt+0x46>
    12f0:	2324                	fld	fs1,64(a4)
    12f2:	1af0090f          	0x1af0090f
    12f6:	a61c                	fsd	fa5,8(a2)
    12f8:	0005                	c.nop	1
    12fa:	5a00                	lw	s0,48(a2)
    12fc:	0006                	c.slli	zero,0x1
    12fe:	0200                	addi	s0,sp,256
    1300:	8200                	0x8200
    1302:	5a00                	lw	s0,48(a2)
    1304:	0006                	c.slli	zero,0x1
    1306:	6c00                	flw	fs0,24(s0)
    1308:	0006                	c.slli	zero,0x1
    130a:	0c00                	addi	s0,sp,528
    130c:	8700                	0x8700
    130e:	8a00                	0x8a00
    1310:	3201                	jal	c10 <ntru_encyrpt+0x68>
    1312:	2324                	fld	fs1,64(a4)
    1314:	1af0090f          	0x1af0090f
    1318:	001c                	0x1c
    131a:	0000                	unimp
    131c:	0000                	unimp
    131e:	0000                	unimp
    1320:	c000                	sw	s0,0(s0)
    1322:	0004                	0x4
    1324:	8000                	0x8000
    1326:	0005                	c.nop	1
    1328:	0200                	addi	s0,sp,256
    132a:	7200                	flw	fs0,32(a2)
    132c:	8000                	0x8000
    132e:	0005                	c.nop	1
    1330:	9600                	0x9600
    1332:	0005                	c.nop	1
    1334:	0200                	addi	s0,sp,256
    1336:	8900                	0x8900
    1338:	a600                	fsd	fs0,8(a2)
    133a:	0005                	c.nop	1
    133c:	6c00                	flw	fs0,24(s0)
    133e:	0006                	c.slli	zero,0x1
    1340:	0200                	addi	s0,sp,256
    1342:	7200                	flw	fs0,32(a2)
	...
    134c:	ba00                	fsd	fs0,48(a2)
    134e:	0004                	0x4
    1350:	9800                	0x9800
    1352:	0005                	c.nop	1
    1354:	0100                	addi	s0,sp,128
    1356:	6a00                	flw	fs0,16(a2)
    1358:	0598                	addi	a4,sp,704
    135a:	0000                	unimp
    135c:	05a6                	slli	a1,a1,0x9
    135e:	0000                	unimp
    1360:	0006                	c.slli	zero,0x1
    1362:	315b01f3          	0x315b01f3
    1366:	9f1c                	0x9f1c
    1368:	05a6                	slli	a1,a1,0x9
    136a:	0000                	unimp
    136c:	066c                	addi	a1,sp,780
    136e:	0000                	unimp
    1370:	0001                	nop
    1372:	006a                	c.slli	zero,0x1a
    1374:	0000                	unimp
    1376:	0000                	unimp
    1378:	0000                	unimp
    137a:	ba00                	fsd	fs0,48(a2)
    137c:	0004                	0x4
    137e:	9800                	0x9800
    1380:	0005                	c.nop	1
    1382:	0100                	addi	s0,sp,128
    1384:	6a00                	flw	fs0,16(a2)
    1386:	0598                	addi	a4,sp,704
    1388:	0000                	unimp
    138a:	05a6                	slli	a1,a1,0x9
    138c:	0000                	unimp
    138e:	0006                	c.slli	zero,0x1
    1390:	315b01f3          	0x315b01f3
    1394:	9f1c                	0x9f1c
    1396:	05a6                	slli	a1,a1,0x9
    1398:	0000                	unimp
    139a:	066c                	addi	a1,sp,780
    139c:	0000                	unimp
    139e:	0001                	nop
    13a0:	006a                	c.slli	zero,0x1a
    13a2:	0000                	unimp
    13a4:	0000                	unimp
    13a6:	0000                	unimp
    13a8:	ba00                	fsd	fs0,48(a2)
    13aa:	0004                	0x4
    13ac:	9800                	0x9800
    13ae:	0005                	c.nop	1
    13b0:	0100                	addi	s0,sp,128
    13b2:	6a00                	flw	fs0,16(a2)
    13b4:	0598                	addi	a4,sp,704
    13b6:	0000                	unimp
    13b8:	05a6                	slli	a1,a1,0x9
    13ba:	0000                	unimp
    13bc:	0006                	c.slli	zero,0x1
    13be:	315b01f3          	0x315b01f3
    13c2:	9f1c                	0x9f1c
    13c4:	05a6                	slli	a1,a1,0x9
    13c6:	0000                	unimp
    13c8:	066c                	addi	a1,sp,780
    13ca:	0000                	unimp
    13cc:	0001                	nop
    13ce:	006a                	c.slli	zero,0x1a
    13d0:	0000                	unimp
    13d2:	0000                	unimp
    13d4:	0000                	unimp
    13d6:	be00                	fsd	fs0,56(a2)
    13d8:	0004                	0x4
    13da:	e200                	fsw	fs0,0(a2)
    13dc:	0004                	0x4
    13de:	0100                	addi	s0,sp,128
    13e0:	6500                	flw	fs0,8(a0)
    13e2:	04e2                	slli	s1,s1,0x18
    13e4:	0000                	unimp
    13e6:	04fc                	addi	a5,sp,588
    13e8:	0000                	unimp
    13ea:	7f840003          	lb	zero,2040(s0) # e7f8 <_stack+0x7f8>
    13ee:	fc9f 0004 3600      	0x36000004fc9f
    13f4:	0005                	c.nop	1
    13f6:	0100                	addi	s0,sp,128
    13f8:	6500                	flw	fs0,8(a0)
    13fa:	0536                	slli	a0,a0,0xd
    13fc:	0000                	unimp
    13fe:	058c                	addi	a1,sp,704
    1400:	0000                	unimp
    1402:	7f840003          	lb	zero,2040(s0)
    1406:	8c9f 0005 a600      	0xa60000058c9f
    140c:	0005                	c.nop	1
    140e:	0600                	addi	s0,sp,768
    1410:	f300                	fsw	fs0,32(a4)
    1412:	5d01                	li	s10,-32
    1414:	1c31                	addi	s8,s8,-20
    1416:	a69f 0005 6c00      	0x6c000005a69f
    141c:	0006                	c.slli	zero,0x1
    141e:	0300                	addi	s0,sp,384
    1420:	8400                	0x8400
    1422:	9f7f                	0x9f7f
	...
    142c:	02fa                	slli	t0,t0,0x1e
    142e:	0000                	unimp
    1430:	036a                	slli	t1,t1,0x1a
    1432:	0000                	unimp
    1434:	0001                	nop
    1436:	6a5a                	flw	fs4,148(sp)
    1438:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    143c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1440:	f300                	fsw	fs0,32(a4)
    1442:	5a01                	li	s4,-32
    1444:	849f 0003 ba00      	0xba000003849f
    144a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    144e:	5a00                	lw	s0,48(a2)
    1450:	03ba                	slli	t2,t2,0xe
    1452:	0000                	unimp
    1454:	046a                	slli	s0,s0,0x1a
    1456:	0000                	unimp
    1458:	0004                	0x4
    145a:	9f5a01f3          	0x9f5a01f3
	...
    1466:	02fa                	slli	t0,t0,0x1e
    1468:	0000                	unimp
    146a:	036a                	slli	t1,t1,0x1a
    146c:	0000                	unimp
    146e:	0001                	nop
    1470:	00036a5b          	0x36a5b
    1474:	8400                	0x8400
    1476:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    147a:	8f00                	0x8f00
    147c:	9f01                	0x9f01
    147e:	0384                	addi	s1,sp,448
    1480:	0000                	unimp
    1482:	03ba                	slli	t2,t2,0xe
    1484:	0000                	unimp
    1486:	0001                	nop
    1488:	0003ba5b          	0x3ba5b
    148c:	6a00                	flw	fs0,16(a2)
    148e:	0004                	0x4
    1490:	0300                	addi	s0,sp,384
    1492:	8f00                	0x8f00
    1494:	9f01                	0x9f01
	...
    149e:	02fa                	slli	t0,t0,0x1e
    14a0:	0000                	unimp
    14a2:	0370                	addi	a2,sp,396
    14a4:	0000                	unimp
    14a6:	0001                	nop
    14a8:	705c                	flw	fa5,36(s0)
    14aa:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    14ae:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    14b2:	f300                	fsw	fs0,32(a4)
    14b4:	5c01                	li	s8,-32
    14b6:	849f 0003 ce00      	0xce000003849f
    14bc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14c0:	5c00                	lw	s0,56(s0)
    14c2:	03ce                	slli	t2,t2,0x13
    14c4:	0000                	unimp
    14c6:	046a                	slli	s0,s0,0x1a
    14c8:	0000                	unimp
    14ca:	0004                	0x4
    14cc:	9f5c01f3          	0x9f5c01f3
	...
    14d8:	02fa                	slli	t0,t0,0x1e
    14da:	0000                	unimp
    14dc:	037c                	addi	a5,sp,396
    14de:	0000                	unimp
    14e0:	0001                	nop
    14e2:	7c5e                	flw	fs8,244(sp)
    14e4:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    14e8:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    14ec:	f300                	fsw	fs0,32(a4)
    14ee:	5e01                	li	t3,-32
    14f0:	849f 0003 ce00      	0xce000003849f
    14f6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14fa:	5e00                	lw	s0,56(a2)
    14fc:	03ce                	slli	t2,t2,0x13
    14fe:	0000                	unimp
    1500:	046a                	slli	s0,s0,0x1a
    1502:	0000                	unimp
    1504:	0004                	0x4
    1506:	9f5e01f3          	0x9f5e01f3
	...
    1512:	0346                	slli	t1,t1,0x11
    1514:	0000                	unimp
    1516:	035e                	slli	t1,t1,0x17
    1518:	0000                	unimp
    151a:	0002                	c.slli64	zero
    151c:	008c                	addi	a1,sp,64
    151e:	035e                	slli	t1,t1,0x17
    1520:	0000                	unimp
    1522:	03ce                	slli	t2,t2,0x13
    1524:	0000                	unimp
    1526:	0002                	c.slli64	zero
    1528:	0082                	c.slli64	ra
    152a:	03ce                	slli	t2,t2,0x13
    152c:	0000                	unimp
    152e:	0424                	addi	s1,sp,520
    1530:	0000                	unimp
    1532:	0002                	c.slli64	zero
    1534:	008c                	addi	a1,sp,64
    1536:	0424                	addi	s1,sp,520
    1538:	0000                	unimp
    153a:	0448                	addi	a0,sp,516
    153c:	0000                	unimp
    153e:	0002                	c.slli64	zero
    1540:	0082                	c.slli64	ra
    1542:	0448                	addi	a0,sp,516
    1544:	0000                	unimp
    1546:	046a                	slli	s0,s0,0x1a
    1548:	0000                	unimp
    154a:	0002                	c.slli64	zero
    154c:	008c                	addi	a1,sp,64
	...
    1556:	034c                	addi	a1,sp,388
    1558:	0000                	unimp
    155a:	035e                	slli	t1,t1,0x17
    155c:	0000                	unimp
    155e:	0002                	c.slli64	zero
    1560:	9f30                	0x9f30
    1562:	035e                	slli	t1,t1,0x17
    1564:	0000                	unimp
    1566:	0364                	addi	s1,sp,396
    1568:	0000                	unimp
    156a:	0001                	nop
    156c:	6459                	lui	s0,0x16
    156e:	6a000003          	lb	zero,1696(zero) # 6a0 <ext_euclid+0x34>
    1572:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1576:	5700                	lw	s0,40(a4)
    1578:	036a                	slli	t1,t1,0x1a
    157a:	0000                	unimp
    157c:	037c                	addi	a5,sp,396
    157e:	0000                	unimp
    1580:	0001                	nop
    1582:	0003845b          	0x3845b
    1586:	a600                	fsd	fs0,8(a2)
    1588:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    158c:	5900                	lw	s0,48(a0)
    158e:	03a6                	slli	t2,t2,0x9
    1590:	0000                	unimp
    1592:	03b4                	addi	a3,sp,456
    1594:	0000                	unimp
    1596:	0001                	nop
    1598:	0003b457          	0x3b457
    159c:	b800                	fsd	fs0,48(s0)
    159e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    15a2:	7700                	flw	fs0,40(a4)
    15a4:	9f7f                	0x9f7f
    15a6:	03b8                	addi	a4,sp,456
    15a8:	0000                	unimp
    15aa:	03ba                	slli	t2,t2,0xe
    15ac:	0000                	unimp
    15ae:	0001                	nop
    15b0:	0003ba57          	0x3ba57
    15b4:	c800                	sw	s0,16(s0)
    15b6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15ba:	5b00                	lw	s0,48(a4)
    15bc:	03c8                	addi	a0,sp,452
    15be:	0000                	unimp
    15c0:	03cc                	addi	a1,sp,452
    15c2:	0000                	unimp
    15c4:	7f7b0003          	lb	zero,2039(s6)
    15c8:	cc9f 0003 ce00      	0xce000003cc9f
    15ce:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15d2:	5b00                	lw	s0,48(a4)
    15d4:	0448                	addi	a0,sp,516
    15d6:	0000                	unimp
    15d8:	0450                	addi	a2,sp,516
    15da:	0000                	unimp
    15dc:	0001                	nop
    15de:	0004505b          	0x4505b
    15e2:	5c00                	lw	s0,56(s0)
    15e4:	0004                	0x4
    15e6:	0300                	addi	s0,sp,384
    15e8:	7b00                	flw	fs0,48(a4)
    15ea:	9f7f                	0x9f7f
    15ec:	045c                	addi	a5,sp,516
    15ee:	0000                	unimp
    15f0:	0466                	slli	s0,s0,0x19
    15f2:	0000                	unimp
    15f4:	0001                	nop
    15f6:	0000005b          	0x5b
    15fa:	0000                	unimp
    15fc:	0000                	unimp
    15fe:	7c00                	flw	fs0,56(s0)
    1600:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    1604:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1608:	6100                	flw	fs0,0(a0)
    160a:	0384                	addi	s1,sp,448
    160c:	0000                	unimp
    160e:	03a0                	addi	s0,sp,456
    1610:	0000                	unimp
    1612:	0001                	nop
    1614:	0003ce57          	0x3ce57
    1618:	fe00                	fsw	fs0,56(a2)
    161a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    161e:	6100                	flw	fs0,0(a0)
    1620:	03fe                	slli	t2,t2,0x1f
    1622:	0000                	unimp
    1624:	0420                	addi	s0,sp,520
    1626:	0000                	unimp
    1628:	0001                	nop
    162a:	205e                	fld	ft0,464(sp)
    162c:	0004                	0x4
    162e:	4800                	lw	s0,16(s0)
    1630:	0004                	0x4
    1632:	0100                	addi	s0,sp,128
    1634:	6100                	flw	fs0,0(a0)
    1636:	0448                	addi	a0,sp,516
    1638:	0000                	unimp
    163a:	046a                	slli	s0,s0,0x1a
    163c:	0000                	unimp
    163e:	0001                	nop
    1640:	005e                	c.slli	zero,0x17
    1642:	0000                	unimp
    1644:	0000                	unimp
    1646:	0000                	unimp
    1648:	ce00                	sw	s0,24(a2)
    164a:	e0000003          	lb	zero,-512(zero) # fffffe00 <_stack_start+0xfffefe00>
    164e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1652:	5e00                	lw	s0,56(a2)
    1654:	03e0                	addi	s0,sp,460
    1656:	0000                	unimp
    1658:	03e6                	slli	t2,t2,0x19
    165a:	0000                	unimp
    165c:	017e0003          	lb	zero,23(t3) # 1a017 <_stack_start+0xa017>
    1660:	e69f 0003 f000      	0xf0000003e69f
    1666:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    166a:	5e00                	lw	s0,56(a2)
    166c:	0424                	addi	s1,sp,520
    166e:	0000                	unimp
    1670:	0436                	slli	s0,s0,0xd
    1672:	0000                	unimp
    1674:	0001                	nop
    1676:	365e                	fld	fa2,496(sp)
    1678:	0004                	0x4
    167a:	3c00                	fld	fs0,56(s0)
    167c:	0004                	0x4
    167e:	0300                	addi	s0,sp,384
    1680:	7e00                	flw	fs0,56(a2)
    1682:	9f01                	0x9f01
    1684:	043c                	addi	a5,sp,520
    1686:	0000                	unimp
    1688:	0448                	addi	a0,sp,516
    168a:	0000                	unimp
    168c:	0001                	nop
    168e:	005e                	c.slli	zero,0x17
    1690:	0000                	unimp
    1692:	0000                	unimp
    1694:	0000                	unimp
    1696:	0200                	addi	s0,sp,256
    1698:	0004                	0x4
    169a:	2000                	fld	fs0,0(s0)
    169c:	0004                	0x4
    169e:	0600                	addi	s0,sp,768
    16a0:	0300                	addi	s0,sp,384
    16a2:	1424                	addi	s1,sp,552
    16a4:	0000                	unimp
    16a6:	009f 0000 0000      	0x9f
    16ac:	0000                	unimp
    16ae:	4c00                	lw	s0,24(s0)
    16b0:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    16b4:	0004                	0x4
    16b6:	0200                	addi	s0,sp,256
    16b8:	7200                	flw	fs0,32(a2)
    16ba:	0600                	addi	s0,sp,768
    16bc:	0004                	0x4
    16be:	2000                	fld	fs0,0(s0)
    16c0:	0004                	0x4
    16c2:	0c00                	addi	s0,sp,528
    16c4:	7500                	flw	fs0,40(a0)
    16c6:	7d00                	flw	fs0,56(a0)
    16c8:	3200                	fld	fs0,32(a2)
    16ca:	2324                	fld	fs1,64(a4)
    16cc:	1af0090f          	0x1af0090f
    16d0:	201c                	fld	fa5,0(s0)
    16d2:	0004                	0x4
    16d4:	6a00                	flw	fs0,16(a2)
    16d6:	0004                	0x4
    16d8:	0200                	addi	s0,sp,256
    16da:	7200                	flw	fs0,32(a2)
	...
    16e4:	4600                	lw	s0,8(a2)
    16e6:	7c000003          	lb	zero,1984(zero) # 7c0 <ext_euclid+0x154>
    16ea:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ee:	6100                	flw	fs0,0(a0)
    16f0:	037c                	addi	a5,sp,396
    16f2:	0000                	unimp
    16f4:	0384                	addi	s1,sp,448
    16f6:	0000                	unimp
    16f8:	7f7d0003          	lb	zero,2039(s10)
    16fc:	849f 0003 ce00      	0xce000003849f
    1702:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1706:	6100                	flw	fs0,0(a0)
    1708:	03ce                	slli	t2,t2,0x13
    170a:	0000                	unimp
    170c:	046a                	slli	s0,s0,0x1a
    170e:	0000                	unimp
    1710:	7f7d0003          	lb	zero,2039(s10)
    1714:	009f 0000 0000      	0x9f
    171a:	0000                	unimp
    171c:	4a00                	lw	s0,16(a2)
    171e:	7c000003          	lb	zero,1984(zero) # 7c0 <ext_euclid+0x154>
    1722:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1726:	6100                	flw	fs0,0(a0)
    1728:	037c                	addi	a5,sp,396
    172a:	0000                	unimp
    172c:	0384                	addi	s1,sp,448
    172e:	0000                	unimp
    1730:	7f7d0003          	lb	zero,2039(s10)
    1734:	849f 0003 ce00      	0xce000003849f
    173a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    173e:	6100                	flw	fs0,0(a0)
    1740:	03ce                	slli	t2,t2,0x13
    1742:	0000                	unimp
    1744:	046a                	slli	s0,s0,0x1a
    1746:	0000                	unimp
    1748:	7f7d0003          	lb	zero,2039(s10)
    174c:	009f 0000 0000      	0x9f
    1752:	0000                	unimp
    1754:	1e00                	addi	s0,sp,816
    1756:	0001                	nop
    1758:	aa00                	fsd	fs0,16(a2)
    175a:	0001                	nop
    175c:	0100                	addi	s0,sp,128
    175e:	5a00                	lw	s0,48(a2)
    1760:	01aa                	slli	gp,gp,0xa
    1762:	0000                	unimp
    1764:	01e0                	addi	s0,sp,204
    1766:	0000                	unimp
    1768:	0004                	0x4
    176a:	9f5a01f3          	0x9f5a01f3
    176e:	01e0                	addi	s0,sp,204
    1770:	0000                	unimp
    1772:	0216                	slli	tp,tp,0x5
    1774:	0000                	unimp
    1776:	0001                	nop
    1778:	165a                	slli	a2,a2,0x36
    177a:	0002                	c.slli64	zero
    177c:	fa00                	fsw	fs0,48(a2)
    177e:	0002                	c.slli64	zero
    1780:	0400                	addi	s0,sp,512
    1782:	f300                	fsw	fs0,32(a4)
    1784:	5a01                	li	s4,-32
    1786:	009f 0000 0000      	0x9f
    178c:	0000                	unimp
    178e:	1e00                	addi	s0,sp,816
    1790:	0001                	nop
    1792:	ac00                	fsd	fs0,24(s0)
    1794:	0001                	nop
    1796:	0100                	addi	s0,sp,128
    1798:	5b00                	lw	s0,48(a4)
    179a:	01ac                	addi	a1,sp,200
    179c:	0000                	unimp
    179e:	01b1                	addi	gp,gp,12
    17a0:	0000                	unimp
    17a2:	0001                	nop
    17a4:	b15c                	fsd	fa5,160(a0)
    17a6:	0001                	nop
    17a8:	e000                	fsw	fs0,0(s0)
    17aa:	0001                	nop
    17ac:	0300                	addi	s0,sp,384
    17ae:	8600                	0x8600
    17b0:	9f01                	0x9f01
    17b2:	01e0                	addi	s0,sp,204
    17b4:	0000                	unimp
    17b6:	0216                	slli	tp,tp,0x5
    17b8:	0000                	unimp
    17ba:	0001                	nop
    17bc:	0002165b          	0x2165b
    17c0:	6400                	flw	fs0,8(s0)
    17c2:	0002                	c.slli64	zero
    17c4:	0300                	addi	s0,sp,384
    17c6:	8600                	0x8600
    17c8:	9f01                	0x9f01
    17ca:	0264                	addi	s1,sp,268
    17cc:	0000                	unimp
    17ce:	02fa                	slli	t0,t0,0x1e
    17d0:	0000                	unimp
    17d2:	0004                	0x4
    17d4:	9f5b01f3          	0x9f5b01f3
	...
    17e0:	011e                	slli	sp,sp,0x7
    17e2:	0000                	unimp
    17e4:	0194                	addi	a3,sp,192
    17e6:	0000                	unimp
    17e8:	0001                	nop
    17ea:	945c                	0x945c
    17ec:	0001                	nop
    17ee:	b100                	fsd	fs0,32(a0)
    17f0:	0001                	nop
    17f2:	0100                	addi	s0,sp,128
    17f4:	6000                	flw	fs0,0(s0)
    17f6:	01b1                	addi	gp,gp,12
    17f8:	0000                	unimp
    17fa:	01e0                	addi	s0,sp,204
    17fc:	0000                	unimp
    17fe:	b4780003          	lb	zero,-1209(a6) # ffff5b47 <_stack_start+0xfffe5b47>
    1802:	e07f                	0xe07f
    1804:	0001                	nop
    1806:	1600                	addi	s0,sp,800
    1808:	0002                	c.slli64	zero
    180a:	0100                	addi	s0,sp,128
    180c:	6000                	flw	fs0,0(s0)
    180e:	0216                	slli	tp,tp,0x5
    1810:	0000                	unimp
    1812:	0258                	addi	a4,sp,260
    1814:	0000                	unimp
    1816:	b4780003          	lb	zero,-1209(a6)
    181a:	587f                	0x587f
    181c:	0002                	c.slli64	zero
    181e:	fa00                	fsw	fs0,48(a2)
    1820:	0002                	c.slli64	zero
    1822:	0300                	addi	s0,sp,384
    1824:	9100                	0x9100
    1826:	7fb4                	flw	fa3,120(a5)
	...
    1830:	011e                	slli	sp,sp,0x7
    1832:	0000                	unimp
    1834:	016c                	addi	a1,sp,140
    1836:	0000                	unimp
    1838:	0001                	nop
    183a:	6c5d                	lui	s8,0x17
    183c:	0001                	nop
    183e:	5c00                	lw	s0,56(s0)
    1840:	0002                	c.slli64	zero
    1842:	0100                	addi	s0,sp,128
    1844:	6200                	flw	fs0,0(a2)
    1846:	025c                	addi	a5,sp,260
    1848:	0000                	unimp
    184a:	027a                	slli	tp,tp,0x1e
    184c:	0000                	unimp
    184e:	0004                	0x4
    1850:	9f5d01f3          	0x9f5d01f3
    1854:	027a                	slli	tp,tp,0x1e
    1856:	0000                	unimp
    1858:	02fa                	slli	t0,t0,0x1e
    185a:	0000                	unimp
    185c:	0001                	nop
    185e:	0062                	c.slli	zero,0x18
    1860:	0000                	unimp
    1862:	0000                	unimp
    1864:	0000                	unimp
    1866:	1e00                	addi	s0,sp,816
    1868:	0001                	nop
    186a:	2e00                	fld	fs0,24(a2)
    186c:	0001                	nop
    186e:	0100                	addi	s0,sp,128
    1870:	5e00                	lw	s0,56(a2)
    1872:	012e                	slli	sp,sp,0xb
    1874:	0000                	unimp
    1876:	0268                	addi	a0,sp,268
    1878:	0000                	unimp
    187a:	0001                	nop
    187c:	6868                	flw	fa0,84(s0)
    187e:	0002                	c.slli64	zero
    1880:	7a00                	flw	fs0,48(a2)
    1882:	0002                	c.slli64	zero
    1884:	0400                	addi	s0,sp,512
    1886:	f300                	fsw	fs0,32(a4)
    1888:	5e01                	li	t3,-32
    188a:	7a9f 0002 fa00      	0xfa0000027a9f
    1890:	0002                	c.slli64	zero
    1892:	0100                	addi	s0,sp,128
    1894:	6800                	flw	fs0,16(s0)
	...
    189e:	011e                	slli	sp,sp,0x7
    18a0:	0000                	unimp
    18a2:	017e                	slli	sp,sp,0x1f
    18a4:	0000                	unimp
    18a6:	0001                	nop
    18a8:	7e5f 0001 5800      	0x580000017e5f
    18ae:	0002                	c.slli64	zero
    18b0:	0300                	addi	s0,sp,384
    18b2:	7800                	flw	fs0,48(s0)
    18b4:	7fb8                	flw	fa4,120(a5)
    18b6:	0258                	addi	a4,sp,260
    18b8:	0000                	unimp
    18ba:	02fa                	slli	t0,t0,0x1e
    18bc:	0000                	unimp
    18be:	b8910003          	lb	zero,-1143(sp)
    18c2:	007f                	0x7f
    18c4:	0000                	unimp
    18c6:	0000                	unimp
    18c8:	0000                	unimp
    18ca:	6e00                	flw	fs0,24(a2)
    18cc:	0001                	nop
    18ce:	7400                	flw	fs0,40(s0)
    18d0:	0001                	nop
    18d2:	0200                	addi	s0,sp,256
    18d4:	7200                	flw	fs0,32(a2)
    18d6:	7400                	flw	fs0,40(s0)
    18d8:	0001                	nop
    18da:	9c00                	0x9c00
    18dc:	0001                	nop
    18de:	0200                	addi	s0,sp,256
    18e0:	8b00                	0x8b00
    18e2:	9c00                	0x9c00
    18e4:	0001                	nop
    18e6:	3000                	fld	fs0,32(s0)
    18e8:	0002                	c.slli64	zero
    18ea:	0200                	addi	s0,sp,256
    18ec:	8500                	0x8500
    18ee:	3000                	fld	fs0,32(s0)
    18f0:	0002                	c.slli64	zero
    18f2:	6e00                	flw	fs0,24(a2)
    18f4:	0002                	c.slli64	zero
    18f6:	0200                	addi	s0,sp,256
    18f8:	8b00                	0x8b00
    18fa:	7a00                	flw	fs0,48(a2)
    18fc:	0002                	c.slli64	zero
    18fe:	c600                	sw	s0,8(a2)
    1900:	0002                	c.slli64	zero
    1902:	0200                	addi	s0,sp,256
    1904:	8500                	0x8500
    1906:	c600                	sw	s0,8(a2)
    1908:	0002                	c.slli64	zero
    190a:	fa00                	fsw	fs0,48(a2)
    190c:	0002                	c.slli64	zero
    190e:	0200                	addi	s0,sp,256
    1910:	8b00                	0x8b00
	...
    191a:	8a00                	0x8a00
    191c:	0001                	nop
    191e:	9c00                	0x9c00
    1920:	0001                	nop
    1922:	0200                	addi	s0,sp,256
    1924:	3000                	fld	fs0,32(s0)
    1926:	9c9f 0001 a200      	0xa20000019c9f
    192c:	0001                	nop
    192e:	0100                	addi	s0,sp,128
    1930:	5c00                	lw	s0,56(s0)
    1932:	01a2                	slli	gp,gp,0x8
    1934:	0000                	unimp
    1936:	01b1                	addi	gp,gp,12
    1938:	0000                	unimp
    193a:	0001                	nop
    193c:	b25d                	j	12e2 <_bss_start+0x116>
    193e:	0001                	nop
    1940:	b800                	fsd	fs0,48(s0)
    1942:	0001                	nop
    1944:	0200                	addi	s0,sp,256
    1946:	3000                	fld	fs0,32(s0)
    1948:	b89f 0001 c300      	0xc3000001b89f
    194e:	0001                	nop
    1950:	0100                	addi	s0,sp,128
    1952:	5d00                	lw	s0,56(a0)
    1954:	01e0                	addi	s0,sp,204
    1956:	0000                	unimp
    1958:	0202                	c.slli64	tp
    195a:	0000                	unimp
    195c:	0001                	nop
    195e:	025c                	addi	a5,sp,260
    1960:	0002                	c.slli64	zero
    1962:	1000                	addi	s0,sp,32
    1964:	0002                	c.slli64	zero
    1966:	0100                	addi	s0,sp,128
    1968:	5d00                	lw	s0,56(a0)
    196a:	0210                	addi	a2,sp,256
    196c:	0000                	unimp
    196e:	0214                	addi	a3,sp,256
    1970:	0000                	unimp
    1972:	7f7d0003          	lb	zero,2039(s10)
    1976:	149f 0002 2400      	0x24000002149f
    197c:	0002                	c.slli64	zero
    197e:	0100                	addi	s0,sp,128
    1980:	5d00                	lw	s0,56(a0)
    1982:	0224                	addi	s1,sp,264
    1984:	0000                	unimp
    1986:	0226                	slli	tp,tp,0x9
    1988:	0000                	unimp
    198a:	7f7d0003          	lb	zero,2039(s10)
    198e:	269f 0002 2800      	0x28000002269f
    1994:	0002                	c.slli64	zero
    1996:	0100                	addi	s0,sp,128
    1998:	5d00                	lw	s0,56(a0)
    199a:	0230                	addi	a2,sp,264
    199c:	0000                	unimp
    199e:	023e                	slli	tp,tp,0xf
    19a0:	0000                	unimp
    19a2:	0001                	nop
    19a4:	c659                	beqz	a2,1a32 <ti_2+0x15e>
    19a6:	0002                	c.slli64	zero
    19a8:	d400                	sw	s0,40(s0)
    19aa:	0002                	c.slli64	zero
    19ac:	0100                	addi	s0,sp,128
    19ae:	5900                	lw	s0,48(a0)
    19b0:	02d4                	addi	a3,sp,324
    19b2:	0000                	unimp
    19b4:	02e0                	addi	s0,sp,332
    19b6:	0000                	unimp
    19b8:	0001                	nop
    19ba:	e05c                	fsw	fa5,4(s0)
    19bc:	0002                	c.slli64	zero
    19be:	ec00                	fsw	fs0,24(s0)
    19c0:	0002                	c.slli64	zero
    19c2:	0300                	addi	s0,sp,384
    19c4:	7c00                	flw	fs0,56(s0)
    19c6:	9f7f                	0x9f7f
    19c8:	02ec                	addi	a1,sp,332
    19ca:	0000                	unimp
    19cc:	02f6                	slli	t0,t0,0x1d
    19ce:	0000                	unimp
    19d0:	0001                	nop
    19d2:	005c                	addi	a5,sp,4
    19d4:	0000                	unimp
    19d6:	0000                	unimp
    19d8:	0000                	unimp
    19da:	d800                	sw	s0,48(s0)
    19dc:	0001                	nop
    19de:	e000                	fsw	fs0,0(s0)
    19e0:	0001                	nop
    19e2:	0100                	addi	s0,sp,128
    19e4:	6a00                	flw	fs0,16(a2)
    19e6:	01e0                	addi	s0,sp,204
    19e8:	0000                	unimp
    19ea:	01fc                	addi	a5,sp,204
    19ec:	0000                	unimp
    19ee:	0001                	nop
    19f0:	2a5d                	jal	1ba6 <random_keys+0x142>
    19f2:	0002                	c.slli64	zero
    19f4:	3e00                	fld	fs0,56(a2)
    19f6:	0002                	c.slli64	zero
    19f8:	0100                	addi	s0,sp,128
    19fa:	6a00                	flw	fs0,16(a2)
    19fc:	023e                	slli	tp,tp,0xf
    19fe:	0000                	unimp
    1a00:	0000024f          	fnmadd.s	ft4,ft0,ft0,ft0,rne
    1a04:	0001                	nop
    1a06:	7a5e                	flw	fs4,244(sp)
    1a08:	0002                	c.slli64	zero
    1a0a:	d400                	sw	s0,40(s0)
    1a0c:	0002                	c.slli64	zero
    1a0e:	0100                	addi	s0,sp,128
    1a10:	6a00                	flw	fs0,16(a2)
    1a12:	02d4                	addi	a3,sp,324
    1a14:	0000                	unimp
    1a16:	02fa                	slli	t0,t0,0x1e
    1a18:	0000                	unimp
    1a1a:	0001                	nop
    1a1c:	005e                	c.slli	zero,0x17
    1a1e:	0000                	unimp
    1a20:	0000                	unimp
    1a22:	0000                	unimp
    1a24:	7a00                	flw	fs0,48(a2)
    1a26:	0002                	c.slli64	zero
    1a28:	8c00                	0x8c00
    1a2a:	0002                	c.slli64	zero
    1a2c:	0100                	addi	s0,sp,128
    1a2e:	5d00                	lw	s0,56(a0)
    1a30:	028c                	addi	a1,sp,320
    1a32:	0000                	unimp
    1a34:	0292                	slli	t0,t0,0x4
    1a36:	0000                	unimp
    1a38:	017d0003          	lb	zero,23(s10)
    1a3c:	929f 0002 9e00      	0x9e000002929f
    1a42:	0002                	c.slli64	zero
    1a44:	0100                	addi	s0,sp,128
    1a46:	5d00                	lw	s0,56(a0)
    1a48:	02a2                	slli	t0,t0,0x8
    1a4a:	0000                	unimp
    1a4c:	02b4                	addi	a3,sp,328
    1a4e:	0000                	unimp
    1a50:	0001                	nop
    1a52:	b45d                	j	14f8 <product2+0xd4>
    1a54:	0002                	c.slli64	zero
    1a56:	ba00                	fsd	fs0,48(a2)
    1a58:	0002                	c.slli64	zero
    1a5a:	0300                	addi	s0,sp,384
    1a5c:	7d00                	flw	fs0,56(a0)
    1a5e:	9f01                	0x9f01
    1a60:	02ba                	slli	t0,t0,0xe
    1a62:	0000                	unimp
    1a64:	02c6                	slli	t0,t0,0x11
    1a66:	0000                	unimp
    1a68:	0001                	nop
    1a6a:	005d                	c.nop	23
    1a6c:	0000                	unimp
    1a6e:	0000                	unimp
    1a70:	0000                	unimp
    1a72:	5000                	lw	s0,32(s0)
    1a74:	0002                	c.slli64	zero
    1a76:	7a00                	flw	fs0,48(a2)
    1a78:	0002                	c.slli64	zero
    1a7a:	0600                	addi	s0,sp,768
    1a7c:	0300                	addi	s0,sp,384
    1a7e:	11cc                	addi	a1,sp,228
    1a80:	0000                	unimp
    1a82:	009f 0000 0000      	0x9f
    1a88:	0000                	unimp
    1a8a:	8800                	0x8800
    1a8c:	0001                	nop
    1a8e:	6a00                	flw	fs0,16(a2)
    1a90:	0002                	c.slli64	zero
    1a92:	0200                	addi	s0,sp,256
    1a94:	8900                	0x8900
    1a96:	6a00                	flw	fs0,16(a2)
    1a98:	0002                	c.slli64	zero
    1a9a:	6e00                	flw	fs0,24(a2)
    1a9c:	0002                	c.slli64	zero
    1a9e:	0d00                	addi	s0,sp,656
    1aa0:	8b00                	0x8b00
    1aa2:	f300                	fsw	fs0,32(a4)
    1aa4:	5b01                	li	s6,-32
    1aa6:	2432                	fld	fs0,264(sp)
    1aa8:	f0090f23          	sb	zero,-226(s2)
    1aac:	1c1a                	slli	s8,s8,0x26
    1aae:	027a                	slli	tp,tp,0x1e
    1ab0:	0000                	unimp
    1ab2:	02fa                	slli	t0,t0,0x1e
    1ab4:	0000                	unimp
    1ab6:	0002                	c.slli64	zero
    1ab8:	0089                	addi	ra,ra,2
	...
    1ac2:	018a                	slli	gp,gp,0x2
    1ac4:	0000                	unimp
    1ac6:	0254                	addi	a3,sp,260
    1ac8:	0000                	unimp
    1aca:	0002                	c.slli64	zero
    1acc:	0072                	c.slli	zero,0x1c
    1ace:	0254                	addi	a3,sp,260
    1ad0:	0000                	unimp
    1ad2:	025c                	addi	a5,sp,260
    1ad4:	0000                	unimp
    1ad6:	000c                	0xc
    1ad8:	0089                	addi	ra,ra,2
    1ada:	0082                	c.slli64	ra
    1adc:	2432                	fld	fs0,264(sp)
    1ade:	f0090f23          	sb	zero,-226(s2)
    1ae2:	1c1a                	slli	s8,s8,0x26
    1ae4:	025c                	addi	a5,sp,260
    1ae6:	0000                	unimp
    1ae8:	026a                	slli	tp,tp,0x1a
    1aea:	0000                	unimp
    1aec:	000d                	c.nop	3
    1aee:	0089                	addi	ra,ra,2
    1af0:	325d01f3          	0x325d01f3
    1af4:	2324                	fld	fs1,64(a4)
    1af6:	1af0090f          	0x1af0090f
    1afa:	6a1c                	flw	fa5,16(a2)
    1afc:	0002                	c.slli64	zero
    1afe:	6e00                	flw	fs0,24(a2)
    1b00:	0002                	c.slli64	zero
    1b02:	1800                	addi	s0,sp,48
    1b04:	8b00                	0x8b00
    1b06:	f300                	fsw	fs0,32(a4)
    1b08:	5b01                	li	s6,-32
    1b0a:	2432                	fld	fs0,264(sp)
    1b0c:	f0090f23          	sb	zero,-226(s2)
    1b10:	1c1a                	slli	s8,s8,0x26
    1b12:	325d01f3          	0x325d01f3
    1b16:	2324                	fld	fs1,64(a4)
    1b18:	1af0090f          	0x1af0090f
    1b1c:	7a1c                	flw	fa5,48(a2)
    1b1e:	0002                	c.slli64	zero
    1b20:	fa00                	fsw	fs0,48(a2)
    1b22:	0002                	c.slli64	zero
    1b24:	0200                	addi	s0,sp,256
    1b26:	7200                	flw	fs0,32(a2)
	...
    1b30:	6600                	flw	fs0,8(a2)
    1b32:	0001                	nop
    1b34:	d800                	sw	s0,48(s0)
    1b36:	0001                	nop
    1b38:	0100                	addi	s0,sp,128
    1b3a:	6a00                	flw	fs0,16(a2)
    1b3c:	01d8                	addi	a4,sp,196
    1b3e:	0000                	unimp
    1b40:	01e0                	addi	s0,sp,204
    1b42:	0000                	unimp
    1b44:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18c>
    1b48:	e09f 0001 2a00      	0x2a000001e09f
    1b4e:	0002                	c.slli64	zero
    1b50:	0100                	addi	s0,sp,128
    1b52:	6a00                	flw	fs0,16(a2)
    1b54:	022a                	slli	tp,tp,0xa
    1b56:	0000                	unimp
    1b58:	025c                	addi	a5,sp,260
    1b5a:	0000                	unimp
    1b5c:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18c>
    1b60:	5c9f 0002 7a00      	0x7a0000025c9f
    1b66:	0002                	c.slli64	zero
    1b68:	0600                	addi	s0,sp,768
    1b6a:	f300                	fsw	fs0,32(a4)
    1b6c:	5d01                	li	s10,-32
    1b6e:	1c31                	addi	s8,s8,-20
    1b70:	7a9f 0002 fa00      	0xfa0000027a9f
    1b76:	0002                	c.slli64	zero
    1b78:	0300                	addi	s0,sp,384
    1b7a:	8200                	0x8200
    1b7c:	9f7f                	0x9f7f
	...
    1b86:	0136                	slli	sp,sp,0xd
    1b88:	0000                	unimp
    1b8a:	0260                	addi	s0,sp,268
    1b8c:	0000                	unimp
    1b8e:	0001                	nop
    1b90:	6064                	flw	fs1,68(s0)
    1b92:	0002                	c.slli64	zero
    1b94:	6400                	flw	fs0,8(s0)
    1b96:	0002                	c.slli64	zero
    1b98:	0700                	addi	s0,sp,896
    1b9a:	8600                	0x8600
    1b9c:	f300                	fsw	fs0,32(a4)
    1b9e:	5d01                	li	s10,-32
    1ba0:	9f22                	add	t5,t5,s0
    1ba2:	0264                	addi	s1,sp,268
    1ba4:	0000                	unimp
    1ba6:	027a                	slli	tp,tp,0x1e
    1ba8:	0000                	unimp
    1baa:	000a                	c.slli	zero,0x2
    1bac:	f35b01f3          	0xf35b01f3
    1bb0:	5d01                	li	s10,-32
    1bb2:	3122                	fld	ft2,40(sp)
    1bb4:	9f1c                	0x9f1c
    1bb6:	027a                	slli	tp,tp,0x1e
    1bb8:	0000                	unimp
    1bba:	02fa                	slli	t0,t0,0x1e
    1bbc:	0000                	unimp
    1bbe:	0001                	nop
    1bc0:	0064                	addi	s1,sp,12
    1bc2:	0000                	unimp
    1bc4:	0000                	unimp
    1bc6:	0000                	unimp
    1bc8:	8800                	0x8800
    1bca:	0001                	nop
    1bcc:	6400                	flw	fs0,8(s0)
    1bce:	0002                	c.slli64	zero
    1bd0:	0100                	addi	s0,sp,128
    1bd2:	6600                	flw	fs0,8(a2)
    1bd4:	0264                	addi	s1,sp,268
    1bd6:	0000                	unimp
    1bd8:	027a                	slli	tp,tp,0x1e
    1bda:	0000                	unimp
    1bdc:	0006                	c.slli	zero,0x1
    1bde:	315b01f3          	0x315b01f3
    1be2:	9f1c                	0x9f1c
    1be4:	027a                	slli	tp,tp,0x1e
    1be6:	0000                	unimp
    1be8:	02fa                	slli	t0,t0,0x1e
    1bea:	0000                	unimp
    1bec:	0001                	nop
    1bee:	0066                	c.slli	zero,0x19
    1bf0:	0000                	unimp
    1bf2:	0000                	unimp
    1bf4:	0000                	unimp
    1bf6:	8800                	0x8800
    1bf8:	0001                	nop
    1bfa:	d800                	sw	s0,48(s0)
    1bfc:	0001                	nop
    1bfe:	0100                	addi	s0,sp,128
    1c00:	6a00                	flw	fs0,16(a2)
    1c02:	01d8                	addi	a4,sp,196
    1c04:	0000                	unimp
    1c06:	01e0                	addi	s0,sp,204
    1c08:	0000                	unimp
    1c0a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18c>
    1c0e:	e09f 0001 2a00      	0x2a000001e09f
    1c14:	0002                	c.slli64	zero
    1c16:	0100                	addi	s0,sp,128
    1c18:	6a00                	flw	fs0,16(a2)
    1c1a:	022a                	slli	tp,tp,0xa
    1c1c:	0000                	unimp
    1c1e:	025c                	addi	a5,sp,260
    1c20:	0000                	unimp
    1c22:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18c>
    1c26:	5c9f 0002 7a00      	0x7a0000025c9f
    1c2c:	0002                	c.slli64	zero
    1c2e:	0600                	addi	s0,sp,768
    1c30:	f300                	fsw	fs0,32(a4)
    1c32:	5d01                	li	s10,-32
    1c34:	1c31                	addi	s8,s8,-20
    1c36:	7a9f 0002 fa00      	0xfa0000027a9f
    1c3c:	0002                	c.slli64	zero
    1c3e:	0300                	addi	s0,sp,384
    1c40:	8200                	0x8200
    1c42:	9f7f                	0x9f7f
	...
    1c4c:	008c                	addi	a1,sp,64
    1c4e:	0000                	unimp
    1c50:	0090                	addi	a2,sp,64
    1c52:	0000                	unimp
    1c54:	0001                	nop
    1c56:	005a                	c.slli	zero,0x16
    1c58:	0000                	unimp
    1c5a:	0000                	unimp
    1c5c:	0000                	unimp
    1c5e:	9200                	0x9200
    1c60:	0000                	unimp
    1c62:	f000                	fsw	fs0,32(s0)
    1c64:	0000                	unimp
    1c66:	0100                	addi	s0,sp,128
    1c68:	5b00                	lw	s0,48(a4)
    1c6a:	00f0                	addi	a2,sp,76
    1c6c:	0000                	unimp
    1c6e:	00f4                	addi	a3,sp,76
    1c70:	0000                	unimp
    1c72:	0004                	0x4
    1c74:	9f5b01f3          	0x9f5b01f3
    1c78:	00f4                	addi	a3,sp,76
    1c7a:	0000                	unimp
    1c7c:	011e                	slli	sp,sp,0x7
    1c7e:	0000                	unimp
    1c80:	0001                	nop
    1c82:	0000005b          	0x5b
    1c86:	0000                	unimp
    1c88:	0000                	unimp
    1c8a:	9200                	0x9200
    1c8c:	0000                	unimp
    1c8e:	aa00                	fsd	fs0,16(a2)
    1c90:	0000                	unimp
    1c92:	0100                	addi	s0,sp,128
    1c94:	5c00                	lw	s0,56(s0)
    1c96:	00aa                	slli	ra,ra,0xa
    1c98:	0000                	unimp
    1c9a:	00b2                	slli	ra,ra,0xc
    1c9c:	0000                	unimp
    1c9e:	0004                	0x4
    1ca0:	9f5c01f3          	0x9f5c01f3
    1ca4:	00b2                	slli	ra,ra,0xc
    1ca6:	0000                	unimp
    1ca8:	00c4                	addi	s1,sp,68
    1caa:	0000                	unimp
    1cac:	0001                	nop
    1cae:	c45c                	sw	a5,12(s0)
    1cb0:	0000                	unimp
    1cb2:	d400                	sw	s0,40(s0)
    1cb4:	0000                	unimp
    1cb6:	0400                	addi	s0,sp,512
    1cb8:	f300                	fsw	fs0,32(a4)
    1cba:	5c01                	li	s8,-32
    1cbc:	d49f 0000 e600      	0xe6000000d49f
    1cc2:	0000                	unimp
    1cc4:	0100                	addi	s0,sp,128
    1cc6:	5c00                	lw	s0,56(s0)
    1cc8:	00e6                	slli	ra,ra,0x19
    1cca:	0000                	unimp
    1ccc:	0102                	c.slli64	sp
    1cce:	0000                	unimp
    1cd0:	0004                	0x4
    1cd2:	9f5c01f3          	0x9f5c01f3
    1cd6:	0102                	c.slli64	sp
    1cd8:	0000                	unimp
    1cda:	011e                	slli	sp,sp,0x7
    1cdc:	0000                	unimp
    1cde:	0001                	nop
    1ce0:	005c                	addi	a5,sp,4
    1ce2:	0000                	unimp
    1ce4:	0000                	unimp
    1ce6:	0000                	unimp
    1ce8:	9200                	0x9200
    1cea:	0000                	unimp
    1cec:	ac00                	fsd	fs0,24(s0)
    1cee:	0000                	unimp
    1cf0:	0200                	addi	s0,sp,256
    1cf2:	3000                	fld	fs0,32(s0)
    1cf4:	ac9f 0000 b200      	0xb2000000ac9f
    1cfa:	0000                	unimp
    1cfc:	0100                	addi	s0,sp,128
    1cfe:	5f00                	lw	s0,56(a4)
    1d00:	00b2                	slli	ra,ra,0xc
    1d02:	0000                	unimp
    1d04:	00e0                	addi	s0,sp,76
    1d06:	0000                	unimp
    1d08:	0002                	c.slli64	zero
    1d0a:	9f30                	0x9f30
    1d0c:	00e0                	addi	s0,sp,76
    1d0e:	0000                	unimp
    1d10:	00e6                	slli	ra,ra,0x19
    1d12:	0000                	unimp
    1d14:	0001                	nop
    1d16:	f45f 0000 1000      	0x10000000f45f
    1d1c:	0001                	nop
    1d1e:	0100                	addi	s0,sp,128
    1d20:	5f00                	lw	s0,56(a4)
    1d22:	0110                	addi	a2,sp,128
    1d24:	0000                	unimp
    1d26:	011e                	slli	sp,sp,0x7
    1d28:	0000                	unimp
    1d2a:	0002                	c.slli64	zero
    1d2c:	9f30                	0x9f30
	...
    1d36:	00f4                	addi	a3,sp,76
    1d38:	0000                	unimp
    1d3a:	00fe                	slli	ra,ra,0x1f
    1d3c:	0000                	unimp
    1d3e:	0001                	nop
    1d40:	0000005b          	0x5b
    1d44:	0000                	unimp
    1d46:	0000                	unimp
    1d48:	f400                	fsw	fs0,40(s0)
    1d4a:	0000                	unimp
    1d4c:	fe00                	fsw	fs0,56(a2)
    1d4e:	0000                	unimp
    1d50:	0800                	addi	s0,sp,16
    1d52:	7f00                	flw	fs0,56(a4)
    1d54:	3c00                	fld	fs0,56(s0)
    1d56:	7a1e                	flw	fs4,228(sp)
    1d58:	2200                	fld	fs0,0(a2)
    1d5a:	009f 0000 0000      	0x9f
    1d60:	0000                	unimp
    1d62:	be00                	fsd	fs0,56(a2)
    1d64:	0000                	unimp
    1d66:	cc00                	sw	s0,24(s0)
    1d68:	0000                	unimp
    1d6a:	0100                	addi	s0,sp,128
    1d6c:	5f00                	lw	s0,56(a4)
    1d6e:	0110                	addi	a2,sp,128
    1d70:	0000                	unimp
    1d72:	011e                	slli	sp,sp,0x7
    1d74:	0000                	unimp
    1d76:	0001                	nop
    1d78:	005f 0000 0000      	0x5f
    1d7e:	0000                	unimp
    1d80:	1000                	addi	s0,sp,32
    1d82:	0001                	nop
    1d84:	1a00                	addi	s0,sp,304
    1d86:	0001                	nop
    1d88:	0100                	addi	s0,sp,128
    1d8a:	5b00                	lw	s0,48(a4)
	...
    1d94:	0110                	addi	a2,sp,128
    1d96:	0000                	unimp
    1d98:	011a                	slli	sp,sp,0x6
    1d9a:	0000                	unimp
    1d9c:	0008                	0x8
    1d9e:	007f                	0x7f
    1da0:	1e3c                	addi	a5,sp,824
    1da2:	007a                	c.slli	zero,0x1e
    1da4:	9f22                	add	t5,t5,s0
	...
    1dae:	0102                	c.slli64	sp
    1db0:	0000                	unimp
    1db2:	010c                	addi	a1,sp,128
    1db4:	0000                	unimp
    1db6:	0001                	nop
    1db8:	0000005b          	0x5b
    1dbc:	0000                	unimp
    1dbe:	0000                	unimp
    1dc0:	0200                	addi	s0,sp,256
    1dc2:	0001                	nop
    1dc4:	0c00                	addi	s0,sp,528
    1dc6:	0001                	nop
    1dc8:	0800                	addi	s0,sp,16
    1dca:	7f00                	flw	fs0,56(a4)
    1dcc:	3c00                	fld	fs0,56(s0)
    1dce:	7a1e                	flw	fs4,228(sp)
    1dd0:	2200                	fld	fs0,0(a2)
    1dd2:	009f 0000 0000      	0x9f
    1dd8:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0c78                	addi	a4,sp,540
  16:	0000                	unimp
  18:	0f00                	addi	s0,sp,912
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1a9a                	slli	s5,s5,0x26
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d04                	addi	s1,sp,656
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	00aa                	slli	ra,ra,0xa
   2:	0000                	unimp
   4:	00ac                	addi	a1,sp,72
   6:	0000                	unimp
   8:	00f4                	addi	a3,sp,76
   a:	0000                	unimp
   c:	00fe                	slli	ra,ra,0x1f
	...
  16:	0000                	unimp
  18:	00b2                	slli	ra,ra,0xc
  1a:	0000                	unimp
  1c:	00d4                	addi	a3,sp,68
  1e:	0000                	unimp
  20:	00e6                	slli	ra,ra,0x19
  22:	0000                	unimp
  24:	00f2                	slli	ra,ra,0x1c
  26:	0000                	unimp
  28:	0110                	addi	a2,sp,128
  2a:	0000                	unimp
  2c:	011e                	slli	sp,sp,0x7
	...
  36:	0000                	unimp
  38:	00bc                	addi	a5,sp,72
  3a:	0000                	unimp
  3c:	00be                	slli	ra,ra,0xf
  3e:	0000                	unimp
  40:	0110                	addi	a2,sp,128
  42:	0000                	unimp
  44:	011a                	slli	sp,sp,0x6
	...
  4e:	0000                	unimp
  50:	00de                	slli	ra,ra,0x17
  52:	0000                	unimp
  54:	00e0                	addi	s0,sp,76
  56:	0000                	unimp
  58:	0102                	c.slli64	sp
  5a:	0000                	unimp
  5c:	010c                	addi	a1,sp,128
	...
  66:	0000                	unimp
  68:	008c                	addi	a1,sp,64
  6a:	0000                	unimp
  6c:	0d04                	addi	s1,sp,656
  6e:	0000                	unimp
  70:	0f00                	addi	s0,sp,912
  72:	0000                	unimp
  74:	1038                	addi	a4,sp,40
	...
  7e:	0000                	unimp
  80:	ffff                	0xffff
  82:	ffff                	0xffff
  84:	0000                	unimp
  86:	0000                	unimp
  88:	0d04                	addi	s1,sp,656
  8a:	0000                	unimp
    asm volatile(
  8c:	0d7a                	slli	s10,s10,0x1e
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2578                	fld	fa4,200(a0)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xbe>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x66>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x36>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x118>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x90>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
      86:	6972                	flw	fs2,28(sp)
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x88>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
    asm volatile(
      aa:	625f 7469 2e4d      	0x2e4d7469625f
            for (i = 0; i < (length / 3); i++) {
      b0:	00000063          	beqz	zero,b0 <array_mod+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
    asm volatile(
      bc:	0068                	addi	a0,sp,12
            for (i = 0; i < ((length-2) / 3); i++) {
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a1[length-1] % mod;
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x104>
    asm volatile(
      de:	0200                	addi	s0,sp,256
            for (i = 0; i < ((length-1) / 3); i++) {
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
            a1[length-2] = a1[length-2] % mod;
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
} //end of function
      f2:	746c                	flw	fa1,108(s0)
    asm volatile(
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
            for (i = 0; i < (length / 3); i++) {
      fe:	0034                	addi	a3,sp,8
     100:	0205                	addi	tp,tp,1
    asm volatile(
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05011003          	lh	zero,80(sp)
     10a:	0305                	addi	t1,t1,1
            for (i = 0; i < ((length-1) / 3); i++) {
     10c:	0902                	c.slli64	s2
     10e:	0000                	unimp
    asm volatile(
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
            for (i = 0; i < ((length-2) / 3); i++) {
     11a:	00090103          	lb	sp,0(s2) # b000 <_stack_len+0x7000>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult2+0x56>
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     12a:	0301                	addi	t1,t1,0
     12c:	0905                	addi	s2,s2,1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     132:	0305                	addi	t1,t1,1
     134:	0902                	c.slli64	s2
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0xfe>
     14c:	0e090303          	lb	t1,224(s2)
    int line[size_b][size_a + size_b];
     150:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     152:	0505                	addi	a0,a0,1
    int line[size_b][size_a + size_b];
     154:	04096b03          	0x4096b03
     158:	0100                	addi	s0,sp,128
    int pola[size_a];
     15a:	1905                	addi	s2,s2,-31
     15c:	0200                	addi	s0,sp,256
     15e:	0104                	addi	s1,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     160:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     162:	0915                	addi	s2,s2,5
     164:	0002                	c.slli64	zero
    int pola[size_a];
     166:	0501                	addi	a0,a0,0
    int polb[size_b];
     168:	000d                	c.nop	3
     16a:	0402                	c.slli64	s0
    int line[size_b][size_a + size_b];
     16c:	0601                	addi	a2,a2,0
    int polb[size_b];
     16e:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     172:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     174:	2505                	jal	794 <ext_euclid+0x128>
     176:	06090b03          	lb	s6,96(s2)
            line[i][j] = 0;
     17a:	0100                	addi	s0,sp,128
     17c:	2905                	jal	5ac <polydiv+0x142>
    int polb[size_b];
     17e:	04090003          	lb	zero,64(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     182:	0100                	addi	s0,sp,128
    int pola[size_a];
     184:	1405                	addi	s0,s0,-31
     186:	04090003          	lb	zero,64(s2)
            line[i][j] = 0;
     18a:	0100                	addi	s0,sp,128
     18c:	0505                	addi	a0,a0,1
     18e:	02096003          	0x2096003
    for (i = 0; i < size_b; ++i){
     192:	0100                	addi	s0,sp,128
            product[j] = 0;
     194:	1905                	addi	s2,s2,-31
     196:	0306                	slli	t1,t1,0x1
     198:	0920                	addi	s0,sp,152
     19a:	0002                	c.slli64	zero
    for (i = 0; i < size_b; ++i){
     19c:	0501                	addi	a0,a0,0
     19e:	060d                	addi	a2,a2,3
    for (i = 0; i < size_a; ++i){
     1a0:	00090003          	lb	zero,0(s2)
     1a4:	0100                	addi	s0,sp,128
	array_mod(pola,mod,size_a);
     1a6:	0306                	slli	t1,t1,0x1
     1a8:	00040903          	lb	s2,0(s0) # 16000 <_stack_start+0x6000>
     1ac:	0501                	addi	a0,a0,0
     1ae:	061e                	slli	a2,a2,0x7
     1b0:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     1b4:	0100                	addi	s0,sp,128
     1b6:	2905                	jal	5e6 <polydiv+0x17c>
     1b8:	08090003          	lb	zero,128(s2)
	array_mod(polb,mod,size_b);
     1bc:	0100                	addi	s0,sp,128
     1be:	1a05                	addi	s4,s4,-31
     1c0:	06090003          	lb	zero,96(s2)
    if(star_mult == 1){
     1c4:	0100                	addi	s0,sp,128
     1c6:	2505                	jal	7e6 <ext_euclid+0x17a>
     1c8:	04097703          	0x4097703
     1cc:	0100                	addi	s0,sp,128
     1ce:	2905                	jal	5fe <polydiv+0x194>
     1d0:	04090003          	lb	zero,64(s2)
     1d4:	0100                	addi	s0,sp,128
     1d6:	1405                	addi	s0,s0,-31
        for (j = size_b -1; j >= 0; j = j-1){
     1d8:	04090003          	lb	zero,64(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1dc:	0100                	addi	s0,sp,128
     1de:	0505                	addi	a0,a0,1
            product[j] = 0;
     1e0:	02096603          	0x2096603
     1e4:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     1e6:	1905                	addi	s2,s2,-31
     1e8:	0200                	addi	s0,sp,256
            product[j] = 0;
     1ea:	0104                	addi	s1,sp,128
     1ec:	0306                	slli	t1,t1,0x1
        for(j = 0; j < size_a + size_b -1; ++j){
     1ee:	091a                	slli	s2,s2,0x6
     1f0:	0002                	c.slli64	zero
     1f2:	0501                	addi	a0,a0,0
     1f4:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     1f6:	0402                	c.slli64	s0
     1f8:	0601                	addi	a2,a2,0
     1fa:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1fe:	0100                	addi	s0,sp,128
     200:	0306                	slli	t1,t1,0x1
        pola[i] = a[i];
     202:	00040903          	lb	s2,0(s0)
     206:	0501                	addi	a0,a0,0
     208:	061e                	slli	a2,a2,0x7
     20a:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_a; ++i){
     20e:	0100                	addi	s0,sp,128
        pola[i] = a[i];
     210:	0d05                	addi	s10,s10,1
     212:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_a; ++i){
     214:	00020907          	0x20907
        polb[i] = b[i];
     218:	0501                	addi	a0,a0,0
     21a:	061e                	slli	a2,a2,0x7
     21c:	00090003          	lb	zero,0(s2)
     220:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     222:	2905                	jal	652 <polydiv+0x1e8>
        polb[i] = b[i];
     224:	04090003          	lb	zero,64(s2)
    if(star_mult == 1){
     228:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     22a:	1a05                	addi	s4,s4,-31
     22c:	06090003          	lb	zero,96(s2)
    for (i = 0; i < size_b; ++i){
     230:	0100                	addi	s0,sp,128
     232:	0605                	addi	a2,a2,1
     234:	0306                	slli	t1,t1,0x1
     236:	0901                	addi	s2,s2,0
     238:	0002                	c.slli64	zero
     23a:	0501                	addi	a0,a0,0
    for(j = 0; j < size_a + size_b -1; ++j){
     23c:	0601                	addi	a2,a2,0
     23e:	00090203          	lb	tp,0(s2)
    array_mod(product,mod,size_a+size_b-1);
     242:	0100                	addi	s0,sp,128
     244:	1105                	addi	sp,sp,-31
     246:	0200                	addi	s0,sp,256
     248:	0304                	addi	s1,sp,384
     24a:	0306                	slli	t1,t1,0x1
     24c:	0002096f          	jal	s2,2024c <_stack_start+0x1024c>
}
     250:	0501                	addi	a0,a0,0
     252:	0005                	c.nop	1
     254:	0402                	c.slli64	s0
     256:	096a0303          	lb	t1,150(s4)
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	0402                	c.slli64	s0
     260:	09090303          	lb	t1,144(s2)
     264:	000a                	c.slli	zero,0x2
     266:	0501                	addi	a0,a0,0
     268:	0402002b          	0x402002b
     26c:	090c0303          	lb	t1,144(s8) # 19090 <_stack_start+0x9090>
     270:	0000                	unimp
     272:	0501                	addi	a0,a0,0
     274:	002c                	addi	a1,sp,8
     276:	0402                	c.slli64	s0
     278:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
                line[size_b-1-j][k] = pola[k]*polb[j];
     27c:	0009                	c.nop	2
     27e:	0100                	addi	s0,sp,128
     280:	1105                	addi	sp,sp,-31
     282:	0200                	addi	s0,sp,256
     284:	0304                	addi	s1,sp,384
     286:	0306                	slli	t1,t1,0x1
     288:	0906                	slli	s2,s2,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     28a:	0004                	0x4
                line[size_b-1-j][k] = pola[k]*polb[j];
     28c:	0501                	addi	a0,a0,0
     28e:	0005                	c.nop	1
     290:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     292:	09650303          	lb	t1,150(a0) # 19096 <_stack_start+0x9096>
        for (j = size_b -1; j >= 0; j = j-1){
     296:	0000                	unimp
     298:	0001                	nop
     29a:	0402                	c.slli64	s0
     29c:	09090303          	lb	t1,144(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a0:	000a                	c.slli	zero,0x2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2a2:	0501                	addi	a0,a0,0
     2a4:	0402002f          	0x402002f
     2a8:	09110303          	lb	t1,145(sp)
     2ac:	0000                	unimp
     2ae:	0501                	addi	a0,a0,0
     2b0:	0030                	addi	a2,sp,8
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b2:	0402                	c.slli64	s0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2b4:	00030603          	lb	a2,0(t1)
     2b8:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ba:	0100                	addi	s0,sp,128
     2bc:	1105                	addi	sp,sp,-31
        for (j = size_b -1; j >= 0; j = j-1){
     2be:	0306                	slli	t1,t1,0x1
     2c0:	00040907          	0x40907
     2c4:	0501                	addi	a0,a0,0
        array_mod(line[i],mod,(size_a+size_b-1));
     2c6:	0305                	addi	t1,t1,1
     2c8:	095f 0000 0301      	0x3010000095f
    for (i = 0; i < size_b; ++i){
     2ce:	0909                	addi	s2,s2,2
     2d0:	000a                	c.slli	zero,0x2
     2d2:	0501                	addi	a0,a0,0
            product[j] += line[i][j];
     2d4:	0917032f          	0x917032f
     2d8:	0000                	unimp
     2da:	0501                	addi	a0,a0,0
     2dc:	0630                	addi	a2,sp,776
        for(i = 0; i < size_b; ++i){
     2de:	00090003          	lb	zero,0(s2)
            product[j] += line[i][j];
     2e2:	0100                	addi	s0,sp,128
     2e4:	4e05                	li	t3,1
     2e6:	0306                	slli	t1,t1,0x1
     2e8:	090c                	addi	a1,sp,144
     2ea:	0004                	0x4
        for(i = 0; i < size_b; ++i){
     2ec:	0501                	addi	a0,a0,0
     2ee:	0305                	addi	t1,t1,1
    for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0902                	c.slli64	s2
     2f2:	0000                	unimp
     2f4:	0501                	addi	a0,a0,0
        for(i = 0; i < size_b; ++i){
     2f6:	064e                	slli	a2,a2,0x13
     2f8:	00097e03          	0x97e03
    int line[size_b][size_a + size_b];
     2fc:	0100                	addi	s0,sp,128
     2fe:	1d05                	addi	s10,s10,-31
     300:	0c090203          	lb	tp,192(s2)
     304:	0100                	addi	s0,sp,128
     306:	4e05                	li	t3,1
     308:	04097e03          	0x4097e03
     30c:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     30e:	0905                	addi	s2,s2,1
     310:	04090203          	lb	tp,64(s2)
     314:	0100                	addi	s0,sp,128
     316:	4e05                	li	t3,1
     318:	0c097e03          	0xc097e03
     31c:	0100                	addi	s0,sp,128
     31e:	0905                	addi	s2,s2,1
    int line[size_b][size_a + size_b];
     320:	12090203          	lb	tp,288(s2)
     324:	0100                	addi	s0,sp,128
     326:	4e05                	li	t3,1
    int pola[size_a];
     328:	02097e03          	0x2097e03
     32c:	0100                	addi	s0,sp,128
     32e:	0905                	addi	s2,s2,1
    int line[size_b][size_a + size_b];
     330:	02090203          	lb	tp,32(s2)
    int pola[size_a];
     334:	0100                	addi	s0,sp,128
    int polb[size_b];
     336:	4e05                	li	t3,1
     338:	02097e03          	0x2097e03
    int pola[size_a];
     33c:	0100                	addi	s0,sp,128
    int polb[size_b];
     33e:	0905                	addi	s2,s2,1
     340:	00090203          	lb	tp,0(s2)
    int line[size_b][size_a + size_b];
     344:	0100                	addi	s0,sp,128
    int pola[size_a];
     346:	04090303          	lb	t1,64(s2)
    int polb[size_b];
     34a:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     34c:	4e05                	li	t3,1
     34e:	06097b03          	0x6097b03
    for (i = 0; i < size_b; ++i){
     352:	0100                	addi	s0,sp,128
     354:	0905                	addi	s2,s2,1
            product2[j] = 0;
     356:	02090203          	lb	tp,32(s2)
     35a:	0100                	addi	s0,sp,128
     35c:	04090303          	lb	t1,64(s2)
    for (i = 0; i < size_b; ++i){
     360:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     362:	02090103          	lb	sp,32(s2)
     366:	0100                	addi	s0,sp,128
    for(i = 0; i < size_b; ++i){
     368:	04097c03          	0x4097c03
     36c:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     36e:	0505                	addi	a0,a0,1
     370:	0306                	slli	t1,t1,0x1
     372:	0901                	addi	s2,s2,0
     374:	0002                	c.slli64	zero
     376:	0301                	addi	t1,t1,0
     378:	0901                	addi	s2,s2,0
     37a:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     37c:	0301                	addi	t1,t1,0
     37e:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     380:	0000                	unimp
     382:	0501                	addi	a0,a0,0
            product2[j] = 0;
     384:	0609                	addi	a2,a2,2
     386:	00090103          	lb	sp,0(s2)
            line[i][j] = 0;
     38a:	0100                	addi	s0,sp,128
     38c:	02097f03          	0x2097f03
            product2[j] = 0;
     390:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     392:	4e05                	li	t3,1
     394:	04097b03          	0x4097b03
     398:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     39a:	0905                	addi	s2,s2,1
     39c:	04090503          	lb	a0,64(s2)
     3a0:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     3a2:	1405                	addi	s0,s0,-31
     3a4:	02090603          	lb	a2,32(s2)
        pola[i] = a[i];
     3a8:	0100                	addi	s0,sp,128
     3aa:	0905                	addi	s2,s2,1
     3ac:	04097b03          	0x4097b03
     3b0:	0100                	addi	s0,sp,128
    for(i = 0; i < size_a; ++i){
     3b2:	4e05                	li	t3,1
        pola[i] = a[i];
     3b4:	04097a03          	0x4097a03
    for(i = 0; i < size_a; ++i){
     3b8:	0100                	addi	s0,sp,128
        polb[i] = b[i];
     3ba:	0905                	addi	s2,s2,1
     3bc:	02090503          	lb	a0,32(s2)
     3c0:	0100                	addi	s0,sp,128
     3c2:	0505                	addi	a0,a0,1
     3c4:	0306                	slli	t1,t1,0x1
    for(i = 0; i < size_b; ++i){
     3c6:	0901                	addi	s2,s2,0
        polb[i] = b[i];
     3c8:	0004                	0x4
     3ca:	0501                	addi	a0,a0,0
    for(i = 0; i < size_b; ++i){
     3cc:	0609                	addi	a2,a2,2
                line[size_b-1-j][k] = pola[k]*polb[j];
     3ce:	00090003          	lb	zero,0(s2)
     3d2:	0100                	addi	s0,sp,128
     3d4:	0505                	addi	a0,a0,1
     3d6:	0306                	slli	t1,t1,0x1
     3d8:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     3dc:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3de:	0614                	addi	a3,sp,768
                line[size_b-1-j][k] = pola[k]*polb[j];
     3e0:	00090203          	lb	tp,0(s2)
     3e4:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e6:	0505                	addi	a0,a0,1
     3e8:	06097e03          	0x6097e03
        for (j = size_b -1; j >= 0; j = j-1){
     3ec:	0100                	addi	s0,sp,128
     3ee:	0c05                	addi	s8,s8,1
     3f0:	02090003          	lb	zero,32(s2)
     3f4:	0100                	addi	s0,sp,128
     3f6:	1805                	addi	a6,a6,-31
     3f8:	02090303          	lb	t1,32(s2)
        for(i = 0; i < size_b; ++i){
     3fc:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     3fe:	1105                	addi	sp,sp,-31
     400:	0200                	addi	s0,sp,256
}
     402:	0104                	addi	s1,sp,128
     404:	0306                	slli	t1,t1,0x1
     406:	097d                	addi	s2,s2,31
     408:	0008                	0x8
     40a:	0501                	addi	a0,a0,0
     40c:	0005                	c.nop	1
     40e:	0402                	c.slli64	s0
     410:	0601                	addi	a2,a2,0
     412:	00090003          	lb	zero,0(s2)
     416:	0100                	addi	s0,sp,128
     418:	0c05                	addi	s8,s8,1
     41a:	04090803          	lb	a6,64(s2)
     41e:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     420:	1105                	addi	sp,sp,-31
     422:	0200                	addi	s0,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     424:	0104                	addi	s1,sp,128
     426:	0306                	slli	t1,t1,0x1
     428:	0900                	addi	s0,sp,144
     42a:	0002                	c.slli64	zero
     42c:	0501                	addi	a0,a0,0
     42e:	0005                	c.nop	1
     430:	0402                	c.slli64	s0
     432:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     434:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     438:	0100                	addi	s0,sp,128
     43a:	0205                	addi	tp,tp,1
            for (k = size_a-1; k >= 0; k = k-1 ){
     43c:	04090403          	lb	s0,64(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     440:	0100                	addi	s0,sp,128
     442:	0306                	slli	t1,t1,0x1
     444:	0900                	addi	s0,sp,144
     446:	000a                	c.slli	zero,0x2
            product2[j] += line[i][j];
     448:	0501                	addi	a0,a0,0
     44a:	0305                	addi	t1,t1,1
     44c:	0902                	c.slli64	s2
        for(i = 0; i < size_b; ++i){
     44e:	0002                	c.slli64	zero
            product2[j] += line[i][j];
     450:	0501                	addi	a0,a0,0
     452:	060c                	addi	a1,sp,768
     454:	04090003          	lb	zero,64(s2)
     458:	0100                	addi	s0,sp,128
     45a:	1105                	addi	sp,sp,-31
        for(i = 0; i < size_b; ++i){
     45c:	0200                	addi	s0,sp,256
     45e:	0104                	addi	s1,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     460:	0306                	slli	t1,t1,0x1
     462:	0900                	addi	s0,sp,144
     464:	0002                	c.slli64	zero
        for(i = 0; i < size_b; ++i){
     466:	0501                	addi	a0,a0,0
     468:	0005                	c.nop	1
    int v[size_N];
     46a:	0402                	c.slli64	s0
     46c:	0601                	addi	a2,a2,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     46e:	00090003          	lb	zero,0(s2)
    int v[size_N];
     472:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	0205                	addi	tp,tp,1
     476:	0306                	slli	t1,t1,0x1
     478:	0904                	addi	s1,sp,144
     47a:	0004                	0x4
     47c:	0501                	addi	a0,a0,0
     47e:	0305                	addi	t1,t1,1
     480:	00080903          	lb	s2,0(a6)
     484:	0501                	addi	a0,a0,0
     486:	00030607          	0x30607
     48a:	0009                	c.nop	2
     48c:	0100                	addi	s0,sp,128
     48e:	1d05                	addi	s10,s10,-31
    int v[size_N];
     490:	0200                	addi	s0,sp,256
     492:	0104                	addi	s1,sp,128
     494:	0306                	slli	t1,t1,0x1
    int q[size_N];
     496:	0908                	addi	a0,sp,144
     498:	0014                	0x14
     49a:	0501                	addi	a0,a0,0
    int num_temp[size_N];
     49c:	0009                	c.nop	2
     49e:	0402                	c.slli64	s0
    int denum_temp[size_D];
     4a0:	0601                	addi	a2,a2,0
     4a2:	00090003          	lb	zero,0(s2)
     4a6:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     4a8:	1405                	addi	s0,s0,-31
    int denum_temp[size_D];
     4aa:	04090103          	lb	sp,64(s2)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ae:	0100                	addi	s0,sp,128
     4b0:	0d05                	addi	s10,s10,1
     4b2:	0200                	addi	s0,sp,256
     4b4:	0304                	addi	s1,sp,384
    int v[size_N];
     4b6:	0306                	slli	t1,t1,0x1
     4b8:	0964                	addi	s1,sp,156
    int denum_temp[size_D];
     4ba:	0004                	0x4
     4bc:	0501                	addi	a0,a0,0
     4be:	0018                	0x18
    for (i = 0; i < size_N; ++i){
     4c0:	0402                	c.slli64	s0
     4c2:	01030603          	lb	a2,16(t1)
        array_mod(num_temp, mod, size_N);
     4c6:	0009                	c.nop	2
     4c8:	0100                	addi	s0,sp,128
     4ca:	0200                	addi	s0,sp,256
     4cc:	0304                	addi	s1,sp,384
    for (i = 0; i < size_D; ++i) {
     4ce:	06097f03          	0x6097f03
     4d2:	0100                	addi	s0,sp,128
	array_mod(denum_temp,mod,size_D);
     4d4:	0d05                	addi	s10,s10,1
     4d6:	0200                	addi	s0,sp,256
     4d8:	0304                	addi	s1,sp,384
     4da:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     4dc:	0901                	addi	s2,s2,0
     4de:	0004                	0x4
     4e0:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     4e2:	0018                	0x18
     4e4:	0402                	c.slli64	s0
     4e6:	00030603          	lb	a2,0(t1)
     4ea:	0009                	c.nop	2
     4ec:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4ee:	2c05                	jal	71e <ext_euclid+0xb2>
     4f0:	0200                	addi	s0,sp,256
        if ( (b_N*u)%mod == 1 )
     4f2:	0304                	addi	s1,sp,384
    for (u = 0; u < mod; ++u){
     4f4:	0306                	slli	t1,t1,0x1
     4f6:	097e                	slli	s2,s2,0x1f
     4f8:	0004                	0x4
     4fa:	0501                	addi	a0,a0,0
        num_temp[i] = num[i];
     4fc:	0014                	0x14
     4fe:	0402                	c.slli64	s0
     500:	0301                	addi	t1,t1,0
     502:	0900                	addi	s0,sp,144
     504:	0004                	0x4
     506:	0501                	addi	a0,a0,0
    for (i = 0; i < size_N; ++i){
     508:	0009                	c.nop	2
        num_temp[i] = num[i];
     50a:	0402                	c.slli64	s0
    for (i = 0; i < size_N; ++i){
     50c:	0601                	addi	a2,a2,0
        denum_temp[i] = denum[i];
     50e:	00090003          	lb	zero,0(s2)
     512:	0100                	addi	s0,sp,128
     514:	1d05                	addi	s10,s10,-31
     516:	0200                	addi	s0,sp,256
     518:	0204                	addi	s1,sp,256
    for (i = 0; i < size_D; ++i) {
     51a:	0306                	slli	t1,t1,0x1
        denum_temp[i] = denum[i];
     51c:	097f                	0x97f
    for (i = 0; i < size_D; ++i) {
     51e:	0004                	0x4
        q[i] = 0;
     520:	0501                	addi	a0,a0,0
     522:	0103060f          	0x103060f
     526:	0809                	addi	a6,a6,2
        v[i] = 0;
     528:	0100                	addi	s0,sp,128
        q[i] = 0;
     52a:	0905                	addi	s2,s2,1
     52c:	0200                	addi	s0,sp,256
        v[i] = 0;
     52e:	0304                	addi	s1,sp,384
     530:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     532:	0908                	addi	a0,sp,144
     534:	0004                	0x4
        if( denum_temp[i] != 0 )
     536:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     538:	0011                	c.nop	4
     53a:	0402                	c.slli64	s0
        if ( (b_N*u)%mod == 1 )
     53c:	00030603          	lb	a2,0(t1)
     540:	0409                	addi	s0,s0,2
     542:	0100                	addi	s0,sp,128
     544:	1405                	addi	s0,s0,-31
    for (u = 0; u < mod; ++u){
     546:	0200                	addi	s0,sp,256
     548:	0304                	addi	s1,sp,384
        if( num_temp[i] != 0 )
     54a:	04090003          	lb	zero,64(s2)
    for (i = size_N-1; i >= 0; i = i-1){
     54e:	0100                	addi	s0,sp,128
     550:	1105                	addi	sp,sp,-31
     552:	0200                	addi	s0,sp,256
     554:	0304                	addi	s1,sp,384
     556:	02090003          	lb	zero,32(s2)
    while (d >= d2){
     55a:	0100                	addi	s0,sp,128
     55c:	1d05                	addi	s10,s10,-31
    for(i = 0; i < size_N; ++i){
     55e:	0200                	addi	s0,sp,256
        result[i] = q[i];
     560:	0304                	addi	s1,sp,384
     562:	02097f03          	0x2097f03
     566:	0100                	addi	s0,sp,128
    for(i = 0; i < size_N; ++i){
     568:	1105                	addi	sp,sp,-31
     56a:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     56c:	0304                	addi	s1,sp,384
     56e:	02090103          	lb	sp,32(s2)
        result[i] = num_temp[i-size_N];
     572:	0100                	addi	s0,sp,128
     574:	1d05                	addi	s10,s10,-31
     576:	0200                	addi	s0,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     578:	0304                	addi	s1,sp,384
     57a:	0306                	slli	t1,t1,0x1
}
     57c:	097f                	0x97f
     57e:	0004                	0x4
     580:	0501                	addi	a0,a0,0
     582:	0009                	c.nop	2
     584:	0402                	c.slli64	s0
     586:	09070303          	lb	t1,144(a4)
     58a:	0002                	c.slli64	zero
     58c:	0501                	addi	a0,a0,0
     58e:	0011                	c.nop	4
     590:	0402                	c.slli64	s0
     592:	00030603          	lb	a2,0(t1)
     596:	0409                	addi	s0,s0,2
     598:	0100                	addi	s0,sp,128
     59a:	1405                	addi	s0,s0,-31
     59c:	0200                	addi	s0,sp,256
     59e:	0304                	addi	s1,sp,384
     5a0:	04090003          	lb	zero,64(s2)
     5a4:	0100                	addi	s0,sp,128
        v[(d-d2)] = u*r_d;
     5a6:	1105                	addi	sp,sp,-31
     5a8:	0200                	addi	s0,sp,256
     5aa:	0304                	addi	s1,sp,384
     5ac:	02090003          	lb	zero,32(s2)
     5b0:	0100                	addi	s0,sp,128
        array_mod(v, mod, size_N);
     5b2:	1d05                	addi	s10,s10,-31
     5b4:	0200                	addi	s0,sp,256
     5b6:	0304                	addi	s1,sp,384
        v[(d-d2)] = u*r_d;
     5b8:	02097f03          	0x2097f03
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5bc:	0100                	addi	s0,sp,128
     5be:	1105                	addi	sp,sp,-31
     5c0:	0200                	addi	s0,sp,256
     5c2:	0304                	addi	s1,sp,384
     5c4:	02090103          	lb	sp,32(s2)
     5c8:	0100                	addi	s0,sp,128
        array_mod(product, mod, size_N);
     5ca:	1d05                	addi	s10,s10,-31
     5cc:	0200                	addi	s0,sp,256
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5ce:	0304                	addi	s1,sp,384
        array_mod(product, mod, size_N);
     5d0:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     5d2:	097f                	0x97f
     5d4:	0002                	c.slli64	zero
     5d6:	0501                	addi	a0,a0,0
     5d8:	07030607          	0x7030607
        array_mod(num_temp, mod, size_N);
     5dc:	0209                	addi	tp,tp,2
     5de:	0100                	addi	s0,sp,128
     5e0:	1d05                	addi	s10,s10,-31
        for(i = 0; i < size_N; ++i){
     5e2:	0200                	addi	s0,sp,256
     5e4:	0104                	addi	s1,sp,128
     5e6:	0306                	slli	t1,t1,0x1
     5e8:	0901                	addi	s2,s2,0
        array_mod(q, mod, size_N);
     5ea:	0002                	c.slli64	zero
     5ec:	0501                	addi	a0,a0,0
     5ee:	0009                	c.nop	2
     5f0:	0402                	c.slli64	s0
        for (i = size_N-1; i >= 0; i = i-1){
     5f2:	0601                	addi	a2,a2,0
     5f4:	00090003          	lb	zero,0(s2)
     5f8:	0100                	addi	s0,sp,128
     5fa:	1405                	addi	s0,s0,-31
     5fc:	04090803          	lb	a6,64(s2)
     600:	0100                	addi	s0,sp,128
     602:	1105                	addi	sp,sp,-31
            num_temp[i] = num_temp[i] - product[i];
     604:	0200                	addi	s0,sp,256
     606:	0104                	addi	s1,sp,128
     608:	0306                	slli	t1,t1,0x1
     60a:	00020907          	0x20907
        for (i = 0; i < size_N; ++i){
     60e:	0501                	addi	a0,a0,0
     610:	0005                	c.nop	1
            num_temp[i] = num_temp[i] - product[i];
     612:	0402                	c.slli64	s0
     614:	0601                	addi	a2,a2,0
     616:	00090003          	lb	zero,0(s2)
            q[i] = q[i] + v[i];
     61a:	0100                	addi	s0,sp,128
     61c:	0b05                	addi	s6,s6,1
     61e:	0c090503          	lb	a0,192(s2)
     622:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     624:	1005                	c.nop	-31
     626:	0200                	addi	s0,sp,256
            q[i] = q[i] + v[i];
     628:	0104                	addi	s1,sp,128
     62a:	0306                	slli	t1,t1,0x1
     62c:	0900                	addi	s0,sp,144
        for(i = 0; i < size_N; ++i){
     62e:	0002                	c.slli64	zero
            if( num_temp[i] != 0 )
     630:	0501                	addi	a0,a0,0
        for (i = size_N-1; i >= 0; i = i-1){
     632:	0005                	c.nop	1
     634:	0402                	c.slli64	s0
            v[i] = 0;
     636:	0601                	addi	a2,a2,0
     638:	00090003          	lb	zero,0(s2)
     63c:	0100                	addi	s0,sp,128
     63e:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     640:	00040907          	0x40907
     644:	0301                	addi	t1,t1,0
     646:	0902                	c.slli64	s2
        result[i] = q[i];
     648:	000e                	c.slli	zero,0x3
     64a:	0301                	addi	t1,t1,0
     64c:	0902                	c.slli64	s2
     64e:	0000                	unimp
     650:	0501                	addi	a0,a0,0
     652:	0601                	addi	a2,a2,0
    for(i = 0; i < size_N; ++i){
     654:	00090103          	lb	sp,0(s2)
     658:	0100                	addi	s0,sp,128
        result[i] = num_temp[i-size_N];
     65a:	1105                	addi	sp,sp,-31
     65c:	0200                	addi	s0,sp,256
     65e:	0304                	addi	s1,sp,384
     660:	0306                	slli	t1,t1,0x1
     662:	0962                	slli	s2,s2,0x18
     664:	002a                	c.slli	zero,0xa
    for(i = size_N; i < (2*size_N); ++i){
     666:	0501                	addi	a0,a0,0
     668:	0025                	c.nop	9
     66a:	0402                	c.slli64	s0
    int ri_2[size]; // MX-ring poly, a
     66c:	00030603          	lb	a2,0(t1)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     670:	0409                	addi	s0,s0,2
    int ri_2[size]; // MX-ring poly, a
     672:	0100                	addi	s0,sp,128
     674:	2b05                	jal	ba4 <generate_keys+0x2ee>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     676:	0200                	addi	s0,sp,256
     678:	0304                	addi	s1,sp,384
     67a:	04090003          	lb	zero,64(s2)
     67e:	0100                	addi	s0,sp,128
     680:	2e05                	jal	9b0 <generate_keys+0xfa>
     682:	0200                	addi	s0,sp,256
     684:	0304                	addi	s1,sp,384
     686:	02090003          	lb	zero,32(s2)
     68a:	0100                	addi	s0,sp,128
     68c:	2a05                	jal	7bc <ext_euclid+0x150>
     68e:	0200                	addi	s0,sp,256
     690:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     692:	06097f03          	0x6097f03
     696:	0100                	addi	s0,sp,128
    int ri_1[size]; // f-random poly, f[N] = 0, b
     698:	2e05                	jal	9c8 <generate_keys+0x112>
     69a:	0200                	addi	s0,sp,256
     69c:	0304                	addi	s1,sp,384
    int ri[size];
     69e:	02090103          	lb	sp,32(s2)
     6a2:	0100                	addi	s0,sp,128
    int ti_1[size]; // ti_1[0] = 1
     6a4:	2505                	jal	cc4 <ntru_deceypt+0x88>
     6a6:	0200                	addi	s0,sp,256
     6a8:	0304                	addi	s1,sp,384
    int ti[size];
     6aa:	04090003          	lb	zero,64(s2)
     6ae:	0100                	addi	s0,sp,128
    int qi_1[size];
     6b0:	2805                	jal	6e0 <ext_euclid+0x74>
     6b2:	0200                	addi	s0,sp,256
     6b4:	0304                	addi	s1,sp,384
    int temp[size];
     6b6:	0306                	slli	t1,t1,0x1
     6b8:	097f                	0x97f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ba:	0002                	c.slli64	zero
     6bc:	0501                	addi	a0,a0,0
    int ri_2[size]; // MX-ring poly, a
     6be:	0020                	addi	s0,sp,8
     6c0:	0402                	c.slli64	s0
    int temp[size];
     6c2:	0301                	addi	t1,t1,0
    for (i = 0; i < size; ++i) {
     6c4:	0900                	addi	s0,sp,144
     6c6:	0000                	unimp
        ti_2[i] = 0;
     6c8:	0501                	addi	a0,a0,0
     6ca:	000d                	c.nop	3
     6cc:	0402                	c.slli64	s0
     6ce:	0601                	addi	a2,a2,0
    for (i = 0; i < size; ++i) {
     6d0:	00090003          	lb	zero,0(s2)
    ti_1[0] = 1;
     6d4:	0100                	addi	s0,sp,128
     6d6:	2505                	jal	cf6 <ntru_deceypt+0xba>
     6d8:	0200                	addi	s0,sp,256
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6da:	0204                	addi	s1,sp,256
     6dc:	0306                	slli	t1,t1,0x1
     6de:	097f                	0x97f
     6e0:	0004                	0x4
            ti[i] = ti_2[i] - temp[i];
     6e2:	0501                	addi	a0,a0,0
     6e4:	04020027          	0x4020027
     6e8:	0602                	c.slli64	a2
	array_mod(ri_2,mod,N+1);
     6ea:	00090003          	lb	zero,0(s2)
     6ee:	0100                	addi	s0,sp,128
     6f0:	1405                	addi	s0,s0,-31
	array_mod(ri_1,mod,N+1);
     6f2:	08090103          	lb	sp,128(s2)
     6f6:	0100                	addi	s0,sp,128
     6f8:	1105                	addi	sp,sp,-31
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     6fa:	0200                	addi	s0,sp,256
     6fc:	0304                	addi	s1,sp,384
     6fe:	0306                	slli	t1,t1,0x1
     700:	0908                	addi	a0,sp,144
     702:	0004                	0x4
     704:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     706:	0029                	c.nop	10
     708:	0402                	c.slli64	s0
     70a:	00030603          	lb	a2,0(t1)
     70e:	0409                	addi	s0,s0,2
     710:	0100                	addi	s0,sp,128
     712:	2f05                	jal	e42 <memcpy+0xc8>
        for (i = 0; i < N + 1; ++i) {
     714:	0200                	addi	s0,sp,256
     716:	0304                	addi	s1,sp,384
     718:	04090003          	lb	zero,64(s2)
        array_mod(temp,mod,N+1);
     71c:	0100                	addi	s0,sp,128
     71e:	3205                	jal	3e <__DYNAMIC+0x3e>
     720:	0200                	addi	s0,sp,256
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     722:	0304                	addi	s1,sp,384
     724:	02090003          	lb	zero,32(s2)
     728:	0100                	addi	s0,sp,128
     72a:	2a05                	jal	85a <ext_euclid+0x1ee>
     72c:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     72e:	0304                	addi	s1,sp,384
     730:	06097f03          	0x6097f03
	array_mod(qi_1,mod,size);
     734:	0100                	addi	s0,sp,128
     736:	3205                	jal	56 <__DYNAMIC+0x56>
     738:	0200                	addi	s0,sp,256
     73a:	0304                	addi	s1,sp,384
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     73c:	02090103          	lb	sp,32(s2)
     740:	0100                	addi	s0,sp,128
     742:	2905                	jal	b72 <generate_keys+0x2bc>
     744:	0200                	addi	s0,sp,256
     746:	0304                	addi	s1,sp,384
     748:	04090003          	lb	zero,64(s2)
        for (i = 0; i < N + 1; ++i) {
     74c:	0100                	addi	s0,sp,128
     74e:	2805                	jal	77e <ext_euclid+0x112>
	array_mod(temp,mod,size);
     750:	0200                	addi	s0,sp,256
     752:	0304                	addi	s1,sp,384
     754:	0306                	slli	t1,t1,0x1
     756:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     758:	0002                	c.slli64	zero
     75a:	0501                	addi	a0,a0,0
     75c:	0020                	addi	s0,sp,8
     75e:	0402                	c.slli64	s0
        array_mod(ti,mod,N+1);
     760:	0301                	addi	t1,t1,0
     762:	0900                	addi	s0,sp,144
     764:	0000                	unimp
     766:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     768:	000d                	c.nop	3
        controlR = 0;
     76a:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     76c:	0601                	addi	a2,a2,0
     76e:	00090003          	lb	zero,0(s2)
    while (controlR != 0) {
     772:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     774:	2505                	jal	d94 <memcpy+0x1a>
            if (((ri_2[0] * j) % mod) == 1)
     776:	0200                	addi	s0,sp,256
        for (j = 0; j < mod; ++j) {
     778:	0204                	addi	s1,sp,256
     77a:	0306                	slli	t1,t1,0x1
     77c:	097f                	0x97f
     77e:	0004                	0x4
     780:	0501                	addi	a0,a0,0
     782:	04020027          	0x4020027
        for (i = 0; i < N + 1; ++i) {
     786:	0602                	c.slli64	a2
    }
     788:	00090003          	lb	zero,0(s2)
     78c:	0100                	addi	s0,sp,128
     78e:	0905                	addi	s2,s2,1
     790:	0200                	addi	s0,sp,256
     792:	0304                	addi	s1,sp,384
     794:	0306                	slli	t1,t1,0x1
     796:	0909                	addi	s2,s2,2
     798:	0008                	0x8
     79a:	0501                	addi	a0,a0,0
     79c:	001d                	c.nop	7
     79e:	0402                	c.slli64	s0
     7a0:	097f0303          	lb	t1,151(t5)
     7a4:	0008                	0x8
     7a6:	0501                	addi	a0,a0,0
     7a8:	000d                	c.nop	3
     7aa:	0402                	c.slli64	s0
     7ac:	09070303          	lb	t1,144(a4)
     7b0:	0006                	c.slli	zero,0x1
        ri_2[i] = polyR[i];
     7b2:	0501                	addi	a0,a0,0
     7b4:	0022                	c.slli	zero,0x8
     7b6:	0402                	c.slli64	s0
     7b8:	00030603          	lb	a2,0(t1)
     7bc:	0009                	c.nop	2
    for (i = 0; i < size; ++i) {
     7be:	0100                	addi	s0,sp,128
        ri_2[i] = polyR[i];
     7c0:	1805                	addi	a6,a6,-31
     7c2:	0200                	addi	s0,sp,256
        ri_1[i] = polyf[i];
     7c4:	0304                	addi	s1,sp,384
     7c6:	04090003          	lb	zero,64(s2)
     7ca:	0100                	addi	s0,sp,128
     7cc:	2205                	jal	8ec <generate_keys+0x36>
     7ce:	0200                	addi	s0,sp,256
     7d0:	0304                	addi	s1,sp,384
     7d2:	02090003          	lb	zero,32(s2)
        ti_2[i] = 0;
     7d6:	0100                	addi	s0,sp,128
     7d8:	2005                	jal	7f8 <ext_euclid+0x18c>
     7da:	0200                	addi	s0,sp,256
        ti_1[i] = 0;
     7dc:	0304                	addi	s1,sp,384
     7de:	04097f03          	0x4097f03
     7e2:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     7e4:	2205                	jal	904 <generate_keys+0x4e>
     7e6:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     7e8:	0304                	addi	s1,sp,384
     7ea:	02090103          	lb	sp,32(s2)
     7ee:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7f0:	1805                	addi	a6,a6,-31
     7f2:	0200                	addi	s0,sp,256
            ri[i - (N + 1)] = res[i];
     7f4:	0304                	addi	s1,sp,384
     7f6:	06090003          	lb	zero,96(s2)
            temp[i] = ri_2[i] - ri[i];
     7fa:	0100                	addi	s0,sp,128
     7fc:	2005                	jal	81c <ext_euclid+0x1b0>
     7fe:	0200                	addi	s0,sp,256
     800:	0304                	addi	s1,sp,384
     802:	0306                	slli	t1,t1,0x1
     804:	097f                	0x97f
     806:	0006                	c.slli	zero,0x1
     808:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     80a:	0014                	0x14
            temp[i] = ri_2[i] - ri[i];
     80c:	0402                	c.slli64	s0
     80e:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     810:	0900                	addi	s0,sp,144
     812:	0000                	unimp
            qi_1[i] = res1[i];
     814:	0501                	addi	a0,a0,0
     816:	0009                	c.nop	2
     818:	0402                	c.slli64	s0
     81a:	0601                	addi	a2,a2,0
     81c:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     820:	0100                	addi	s0,sp,128
            qi_1[i] = res1[i];
     822:	2805                	jal	852 <ext_euclid+0x1e6>
        for (i = 0; i < N + 1; ++i) {
     824:	0200                	addi	s0,sp,256
            temp[i] = res2[i];
     826:	0204                	addi	s1,sp,256
     828:	0306                	slli	t1,t1,0x1
     82a:	097f                	0x97f
     82c:	0004                	0x4
     82e:	0501                	addi	a0,a0,0
     830:	0103060f          	0x103060f
     834:	0609                	addi	a2,a2,2
        for (i = 0; i < N + 1; ++i) {
     836:	0100                	addi	s0,sp,128
            ti[i] = ti_2[i] - temp[i];
     838:	4605                	li	a2,1
     83a:	0306                	slli	t1,t1,0x1
     83c:	090d                	addi	s2,s2,3
     83e:	0004                	0x4
     840:	0501                	addi	a0,a0,0
     842:	0305                	addi	t1,t1,1
     844:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        for (i = 0; i < N + 1; ++i) {
     848:	0501                	addi	a0,a0,0
            ti[i] = ti_2[i] - temp[i];
     84a:	061d                	addi	a2,a2,7
     84c:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     850:	0100                	addi	s0,sp,128
            ri_2[i] = ri_1[i];
     852:	0905                	addi	s2,s2,1
     854:	08090003          	lb	zero,128(s2)
     858:	0100                	addi	s0,sp,128
     85a:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     85c:	0c097d03          	0xc097d03
            ri_1[i] = ri[i];
     860:	0100                	addi	s0,sp,128
     862:	0905                	addi	s2,s2,1
     864:	12090303          	lb	t1,288(s2)
            ti_2[i] = ti_1[i];
     868:	0100                	addi	s0,sp,128
            ri_1[i] = ri[i];
     86a:	4605                	li	a2,1
            ti_2[i] = ti_1[i];
     86c:	04097d03          	0x4097d03
     870:	0100                	addi	s0,sp,128
     872:	0905                	addi	s2,s2,1
            controlR += ri[i];
     874:	00090303          	lb	t1,0(s2)
            ti_2[i] = ti_1[i];
     878:	0100                	addi	s0,sp,128
            ti_1[i] = ti[i];
     87a:	04090303          	lb	t1,64(s2)
     87e:	0100                	addi	s0,sp,128
     880:	08097d03          	0x8097d03
            qi_1[i] = 0;
     884:	0100                	addi	s0,sp,128
     886:	02090303          	lb	t1,32(s2)
        for (i = 0; i < N + 1; ++i) {
     88a:	0100                	addi	s0,sp,128
     88c:	04090103          	lb	sp,64(s2)
            if (((ri_2[0] * j) % mod) == 1)
     890:	0100                	addi	s0,sp,128
     892:	06097f03          	0x6097f03
     896:	0100                	addi	s0,sp,128
     898:	02090103          	lb	sp,32(s2)
     89c:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     89e:	04097c03          	0x4097c03
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a2:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8a4:	0505                	addi	a0,a0,1
     8a6:	0306                	slli	t1,t1,0x1
            ti_2[i] = (ti_2[i] * j) % mod;        // ti_2[i]*j vardı..
     8a8:	0901                	addi	s2,s2,0
     8aa:	0004                	0x4
     8ac:	0301                	addi	t1,t1,0
     8ae:	0901                	addi	s2,s2,0
     8b0:	0000                	unimp
     8b2:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     8b4:	0901                	addi	s2,s2,0
int* generate_keys(int N, int p, int q){
     8b6:	0000                	unimp
     8b8:	0501                	addi	a0,a0,0
     8ba:	0609                	addi	a2,a2,2
     8bc:	00090003          	lb	zero,0(s2)
     8c0:	0100                	addi	s0,sp,128
     8c2:	0505                	addi	a0,a0,1
     8c4:	0306                	slli	t1,t1,0x1
     8c6:	0901                	addi	s2,s2,0
     8c8:	0004                	0x4
     8ca:	0501                	addi	a0,a0,0
     8cc:	0609                	addi	a2,a2,2
     8ce:	00090003          	lb	zero,0(s2)
     8d2:	0100                	addi	s0,sp,128
     8d4:	0505                	addi	a0,a0,1
     8d6:	0306                	slli	t1,t1,0x1
     8d8:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     8dc:	0501                	addi	a0,a0,0
     8de:	0614                	addi	a3,sp,768
     8e0:	00090203          	lb	tp,0(s2)
     8e4:	0100                	addi	s0,sp,128
     8e6:	0505                	addi	a0,a0,1
     8e8:	06097e03          	0x6097e03
     8ec:	0100                	addi	s0,sp,128
     8ee:	0c05                	addi	s8,s8,1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     8f0:	02090003          	lb	zero,32(s2)
     8f4:	0100                	addi	s0,sp,128
     8f6:	1905                	addi	s2,s2,-31
     8f8:	02090303          	lb	t1,32(s2)
     8fc:	0100                	addi	s0,sp,128
     8fe:	1105                	addi	sp,sp,-31
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     900:	0200                	addi	s0,sp,256
     902:	0104                	addi	s1,sp,128
     904:	0306                	slli	t1,t1,0x1
     906:	097d                	addi	s2,s2,31
     908:	0008                	0x8
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     90a:	0501                	addi	a0,a0,0
     90c:	0005                	c.nop	1
     90e:	0402                	c.slli64	s0
     910:	0601                	addi	a2,a2,0
     912:	00090003          	lb	zero,0(s2)
     916:	0100                	addi	s0,sp,128
     918:	0b05                	addi	s6,s6,1
     91a:	04090703          	lb	a4,64(s2)
     91e:	0100                	addi	s0,sp,128
     920:	1005                	c.nop	-31
     922:	0200                	addi	s0,sp,256
     924:	0104                	addi	s1,sp,128
     926:	0306                	slli	t1,t1,0x1
     928:	0900                	addi	s0,sp,144
     92a:	0002                	c.slli64	zero
     92c:	0501                	addi	a0,a0,0
     92e:	0005                	c.nop	1
     930:	0402                	c.slli64	s0
     932:	0601                	addi	a2,a2,0
     934:	00090003          	lb	zero,0(s2)
     938:	0100                	addi	s0,sp,128
     93a:	0b05                	addi	s6,s6,1
     93c:	04090503          	lb	a0,64(s2)
     940:	0100                	addi	s0,sp,128
     942:	1005                	c.nop	-31
     944:	0200                	addi	s0,sp,256
     946:	0104                	addi	s1,sp,128
     948:	0306                	slli	t1,t1,0x1
     94a:	0900                	addi	s0,sp,144
     94c:	0002                	c.slli64	zero
     94e:	0501                	addi	a0,a0,0
     950:	0005                	c.nop	1
     952:	0402                	c.slli64	s0
     954:	0601                	addi	a2,a2,0
     956:	00090003          	lb	zero,0(s2)
     95a:	0100                	addi	s0,sp,128
     95c:	0306                	slli	t1,t1,0x1
     95e:	0906                	slli	s2,s2,0x1
     960:	0004                	0x4
     962:	0501                	addi	a0,a0,0
     964:	00030607          	0x30607
     968:	0009                	c.nop	2
     96a:	0100                	addi	s0,sp,128
     96c:	1d05                	addi	s10,s10,-31
     96e:	0200                	addi	s0,sp,256
     970:	0104                	addi	s1,sp,128
     972:	0306                	slli	t1,t1,0x1
     974:	0908                	addi	a0,sp,144
    int polyR[N+1];
     976:	000e                	c.slli	zero,0x3
     978:	0501                	addi	a0,a0,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0009                	c.nop	2
    int polyR[N+1];
     97c:	0402                	c.slli64	s0
     97e:	0601                	addi	a2,a2,0
     980:	00090003          	lb	zero,0(s2)
     984:	0100                	addi	s0,sp,128
     986:	1405                	addi	s0,s0,-31
     988:	04090103          	lb	sp,64(s2)
    polyR[N] = 1;
     98c:	0100                	addi	s0,sp,128
     98e:	0d05                	addi	s10,s10,1
     990:	0200                	addi	s0,sp,256
     992:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     994:	0306                	slli	t1,t1,0x1
     996:	00040967          	jalr	s2,s0
     99a:	0501                	addi	a0,a0,0
     99c:	0019                	c.nop	6
     99e:	0402                	c.slli64	s0
     9a0:	01030603          	lb	a2,16(t1)
     9a4:	0009                	c.nop	2
     9a6:	0100                	addi	s0,sp,128
     9a8:	1805                	addi	a6,a6,-31
     9aa:	0200                	addi	s0,sp,256
     9ac:	0304                	addi	s1,sp,384
     9ae:	06097f03          	0x6097f03
     9b2:	0100                	addi	s0,sp,128
     9b4:	0d05                	addi	s10,s10,1
     9b6:	0200                	addi	s0,sp,256
     9b8:	0304                	addi	s1,sp,384
     9ba:	0306                	slli	t1,t1,0x1
     9bc:	0901                	addi	s2,s2,0
     9be:	0004                	0x4
     9c0:	0501                	addi	a0,a0,0
     9c2:	0019                	c.nop	6
     9c4:	0402                	c.slli64	s0
     9c6:	00030603          	lb	a2,0(t1)
     9ca:	0009                	c.nop	2
     9cc:	0100                	addi	s0,sp,128
     9ce:	2c05                	jal	bfe <ntru_encyrpt+0x56>
     9d0:	0200                	addi	s0,sp,256
     9d2:	0304                	addi	s1,sp,384
     9d4:	0306                	slli	t1,t1,0x1
     9d6:	097e                	slli	s2,s2,0x1f
     9d8:	0004                	0x4
     9da:	0501                	addi	a0,a0,0
     9dc:	0014                	0x14
     9de:	0402                	c.slli64	s0
     9e0:	0301                	addi	t1,t1,0
     9e2:	0900                	addi	s0,sp,144
     9e4:	0004                	0x4
     9e6:	0501                	addi	a0,a0,0
     9e8:	0009                	c.nop	2
     9ea:	0402                	c.slli64	s0
     9ec:	0601                	addi	a2,a2,0
     9ee:	00090003          	lb	zero,0(s2)
     9f2:	0100                	addi	s0,sp,128
     9f4:	1d05                	addi	s10,s10,-31
     9f6:	0200                	addi	s0,sp,256
    polyR[0] = -1;
     9f8:	0204                	addi	s1,sp,256
     9fa:	0306                	slli	t1,t1,0x1
    for(i = 1; i < N; ++i){
     9fc:	097f                	0x97f
     9fe:	0004                	0x4
     a00:	0501                	addi	a0,a0,0
     a02:	0103060f          	0x103060f
    for (i = N; i < 55; ++i ){
     a06:	0809                	addi	a6,a6,2
     a08:	0100                	addi	s0,sp,128
     a0a:	0905                	addi	s2,s2,1
    for(i = 0; i < N; ++i){
     a0c:	0200                	addi	s0,sp,256
        random_keys[i] = f[i];
     a0e:	0304                	addi	s1,sp,384
     a10:	0306                	slli	t1,t1,0x1
     a12:	00040907          	0x40907
    for(i = 0; i < N; ++i){
     a16:	0501                	addi	a0,a0,0
     a18:	0011                	c.nop	4
     a1a:	0402                	c.slli64	s0
     a1c:	00030603          	lb	a2,0(t1)
    for(i = N; i < (2*N); ++i){
     a20:	0409                	addi	s0,s0,2
     a22:	0100                	addi	s0,sp,128
     a24:	1405                	addi	s0,s0,-31
        random_keys[i] = g[i-N];
     a26:	0200                	addi	s0,sp,256
     a28:	0304                	addi	s1,sp,384
     a2a:	04090003          	lb	zero,64(s2)
    for(i = N; i < (2*N); ++i){
     a2e:	0100                	addi	s0,sp,128
     a30:	1105                	addi	sp,sp,-31
    for(i = (2*N); i < (3*N); ++i){
     a32:	0200                	addi	s0,sp,256
     a34:	0304                	addi	s1,sp,384
     a36:	02090003          	lb	zero,32(s2)
    fp = ext_euclid(polyR, f, (N+1), p);
     a3a:	0100                	addi	s0,sp,128
     a3c:	1c05                	addi	s8,s8,-31
     a3e:	0200                	addi	s0,sp,256
     a40:	0304                	addi	s1,sp,384
     a42:	02097f03          	0x2097f03
        random_keys[i] = fp[i-(2*N)];
     a46:	0100                	addi	s0,sp,128
     a48:	1105                	addi	sp,sp,-31
     a4a:	0200                	addi	s0,sp,256
     a4c:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     a4e:	02090103          	lb	sp,32(s2)
    fq = ext_euclid(polyR, f, (N+1), q);
     a52:	0100                	addi	s0,sp,128
     a54:	1c05                	addi	s8,s8,-31
     a56:	0200                	addi	s0,sp,256
     a58:	0304                	addi	s1,sp,384
     a5a:	0306                	slli	t1,t1,0x1
     a5c:	097f                	0x97f
    for(i = (3*N); i < (4*N); ++i){
     a5e:	0004                	0x4
     a60:	0501                	addi	a0,a0,0
     a62:	0009                	c.nop	2
     a64:	0402                	c.slli64	s0
        random_keys[i] = fq[i-(3*N)];
     a66:	09060303          	lb	t1,144(a2)
     a6a:	0002                	c.slli64	zero
     a6c:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     a6e:	0011                	c.nop	4
     a70:	0402                	c.slli64	s0
    fg = polymult2(fq, N, g, N, 0);
     a72:	00030603          	lb	a2,0(t1)
     a76:	0409                	addi	s0,s0,2
     a78:	0100                	addi	s0,sp,128
     a7a:	1405                	addi	s0,s0,-31
    for(i = 0; i < (2*N-1); ++i){
     a7c:	0200                	addi	s0,sp,256
     a7e:	0304                	addi	s1,sp,384
     a80:	04090003          	lb	zero,64(s2)
     a84:	0100                	addi	s0,sp,128
     a86:	1105                	addi	sp,sp,-31
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     a88:	0200                	addi	s0,sp,256
     a8a:	0304                	addi	s1,sp,384
     a8c:	02090003          	lb	zero,32(s2)
    for(i = (4*N); i < (5*N); ++i){
     a90:	0100                	addi	s0,sp,128
     a92:	1c05                	addi	s8,s8,-31
     a94:	0200                	addi	s0,sp,256
     a96:	0304                	addi	s1,sp,384
     a98:	02097f03          	0x2097f03
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     a9c:	0100                	addi	s0,sp,128
     a9e:	1105                	addi	sp,sp,-31
     aa0:	0200                	addi	s0,sp,256
    for(i = (4*N); i < (5*N); ++i){
     aa2:	0304                	addi	s1,sp,384
     aa4:	02090103          	lb	sp,32(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     aa8:	0100                	addi	s0,sp,128
     aaa:	1c05                	addi	s8,s8,-31
        random_keys[i] = polyR[i-(5*N)];
     aac:	0200                	addi	s0,sp,256
     aae:	0304                	addi	s1,sp,384
     ab0:	0306                	slli	t1,t1,0x1
     ab2:	097f                	0x97f
    for(i = (5*N); i < (6*N+1); ++i){
     ab4:	0004                	0x4
     ab6:	0501                	addi	a0,a0,0
     ab8:	0011                	c.nop	4
     aba:	0402                	c.slli64	s0
     abc:	09090303          	lb	t1,144(s2)
}
     ac0:	0002                	c.slli64	zero
     ac2:	0501                	addi	a0,a0,0
     ac4:	0025                	c.nop	9
     ac6:	0402                	c.slli64	s0
     ac8:	00030603          	lb	a2,0(t1)
     acc:	0409                	addi	s0,s0,2
     ace:	0100                	addi	s0,sp,128
     ad0:	2b05                	jal	1000 <main+0x100>
     ad2:	0200                	addi	s0,sp,256
     ad4:	0304                	addi	s1,sp,384
     ad6:	04090003          	lb	zero,64(s2)
     ada:	0100                	addi	s0,sp,128
     adc:	2e05                	jal	e0c <memcpy+0x92>
     ade:	0200                	addi	s0,sp,256
     ae0:	0304                	addi	s1,sp,384
     ae2:	02090003          	lb	zero,32(s2)
     ae6:	0100                	addi	s0,sp,128
     ae8:	2a05                	jal	c18 <ntru_encyrpt+0x70>
     aea:	0200                	addi	s0,sp,256
     aec:	0304                	addi	s1,sp,384
     aee:	06097f03          	0x6097f03
     af2:	0100                	addi	s0,sp,128
     af4:	2e05                	jal	e24 <memcpy+0xaa>
     af6:	0200                	addi	s0,sp,256
     af8:	0304                	addi	s1,sp,384
     afa:	02090103          	lb	sp,32(s2)
     afe:	0100                	addi	s0,sp,128
        polyR[i] = 0;
     b00:	2505                	jal	1120 <__DTOR_END__+0xd8>
     b02:	0200                	addi	s0,sp,256
     b04:	0304                	addi	s1,sp,384
     b06:	04090003          	lb	zero,64(s2)
    for(i = 1; i < N; ++i){
     b0a:	0100                	addi	s0,sp,128
     b0c:	2805                	jal	b3c <generate_keys+0x286>
        f[i] = 0;
     b0e:	0200                	addi	s0,sp,256
     b10:	0304                	addi	s1,sp,384
     b12:	0306                	slli	t1,t1,0x1
     b14:	097f                	0x97f
     b16:	0002                	c.slli64	zero
     b18:	0501                	addi	a0,a0,0
     b1a:	0020                	addi	s0,sp,8
        g[i] = 0;
     b1c:	0402                	c.slli64	s0
     b1e:	0301                	addi	t1,t1,0
     b20:	0900                	addi	s0,sp,144
     b22:	0000                	unimp
     b24:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     b26:	000d                	c.nop	3
     b28:	0402                	c.slli64	s0
        random_keys[i] = f[i];
     b2a:	0601                	addi	a2,a2,0
     b2c:	00090003          	lb	zero,0(s2)
     b30:	0100                	addi	s0,sp,128
     b32:	2505                	jal	1152 <__DTOR_END__+0x10a>
     b34:	0200                	addi	s0,sp,256
     b36:	0204                	addi	s1,sp,256
     b38:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     b3a:	097f                	0x97f
        random_keys[i] = f[i];
     b3c:	0004                	0x4
    for(i = 0; i < N; ++i){
     b3e:	0501                	addi	a0,a0,0
        random_keys[i] = g[i-N];
     b40:	04020027          	0x4020027
     b44:	0602                	c.slli64	a2
     b46:	00090003          	lb	zero,0(s2)
    for(i = N; i < (2*N); ++i){
     b4a:	0100                	addi	s0,sp,128
     b4c:	1d05                	addi	s10,s10,-31
     b4e:	0200                	addi	s0,sp,256
        random_keys[i] = fp[i-(2*N)];
     b50:	0104                	addi	s1,sp,128
     b52:	0306                	slli	t1,t1,0x1
     b54:	0900                	addi	s0,sp,144
     b56:	0006                	c.slli	zero,0x1
     b58:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     b5a:	0009                	c.nop	2
     b5c:	0402                	c.slli64	s0
     b5e:	0601                	addi	a2,a2,0
        random_keys[i] = fq[i-(3*N)];
     b60:	00090003          	lb	zero,0(s2)
     b64:	0100                	addi	s0,sp,128
     b66:	0f05                	addi	t5,t5,1
     b68:	0c091003          	lh	zero,192(s2)
     b6c:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     b6e:	1005                	c.nop	-31
        random_keys[i] = fq[i-(3*N)];
     b70:	0200                	addi	s0,sp,256
    for(i = (3*N); i < (4*N); ++i){
     b72:	0104                	addi	s1,sp,128
        fg[i] = fg[i]*p;
     b74:	0306                	slli	t1,t1,0x1
    for(i = 0; i < (2*N-1); ++i){
     b76:	097f                	0x97f
     b78:	0002                	c.slli64	zero
        fg[i] = fg[i]*p;
     b7a:	0501                	addi	a0,a0,0
     b7c:	0005                	c.nop	1
     b7e:	0402                	c.slli64	s0
     b80:	0601                	addi	a2,a2,0
    for(i = 0; i < (2*N-1); ++i){
     b82:	00090003          	lb	zero,0(s2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b86:	0100                	addi	s0,sp,128
     b88:	0306                	slli	t1,t1,0x1
     b8a:	00040907          	0x40907
     b8e:	0301                	addi	t1,t1,0
    for(i = (4*N); i < (5*N); ++i){
     b90:	0902                	c.slli64	s2
     b92:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     b94:	0501                	addi	a0,a0,0
     b96:	0601                	addi	a2,a2,0
     b98:	00090103          	lb	sp,0(s2)
     b9c:	0100                	addi	s0,sp,128
     b9e:	1405                	addi	s0,s0,-31
     ba0:	1e096803          	0x1e096803
     ba4:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     ba6:	1105                	addi	sp,sp,-31
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ba8:	0200                	addi	s0,sp,256
     baa:	0304                	addi	s1,sp,384
     bac:	0306                	slli	t1,t1,0x1
     bae:	0908                	addi	a0,sp,144
     bb0:	0004                	0x4
     bb2:	0501                	addi	a0,a0,0
     bb4:	0029                	c.nop	10
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bb6:	0402                	c.slli64	s0
     bb8:	00030603          	lb	a2,0(t1)
     bbc:	0409                	addi	s0,s0,2
     bbe:	0100                	addi	s0,sp,128
     bc0:	2f05                	jal	12f0 <_bss_start+0x124>
     bc2:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     bc4:	0304                	addi	s1,sp,384
     bc6:	04090003          	lb	zero,64(s2)
     bca:	0100                	addi	s0,sp,128
     bcc:	3205                	jal	4ec <polydiv+0x82>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     bce:	0200                	addi	s0,sp,256
    temp = polymult(public_key,N,random_val,48,q,0);
     bd0:	0304                	addi	s1,sp,384
     bd2:	02090003          	lb	zero,32(s2)
     bd6:	0100                	addi	s0,sp,128
     bd8:	2a05                	jal	d08 <reset_handler>
     bda:	0200                	addi	s0,sp,256
     bdc:	0304                	addi	s1,sp,384
     bde:	06097f03          	0x6097f03
     be2:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     be4:	3205                	jal	504 <polydiv+0x9a>
     be6:	0200                	addi	s0,sp,256
        temp[i] = temp[i] + message[i];
     be8:	0304                	addi	s1,sp,384
     bea:	02090103          	lb	sp,32(s2)
     bee:	0100                	addi	s0,sp,128
     bf0:	2905                	jal	1020 <main+0x120>
     bf2:	0200                	addi	s0,sp,256
     bf4:	0304                	addi	s1,sp,384
     bf6:	04090003          	lb	zero,64(s2)
    for(i = 0; i < 48; ++i){
     bfa:	0100                	addi	s0,sp,128
     bfc:	2805                	jal	c2c <ntru_encyrpt+0x84>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     bfe:	0200                	addi	s0,sp,256
     c00:	0304                	addi	s1,sp,384
     c02:	0306                	slli	t1,t1,0x1
     c04:	097f                	0x97f
     c06:	0002                	c.slli64	zero
     c08:	0501                	addi	a0,a0,0
     c0a:	0020                	addi	s0,sp,8
     c0c:	0402                	c.slli64	s0
    for(i = (2*N); i < (3*N); ++i){
     c0e:	0301                	addi	t1,t1,0
     c10:	0900                	addi	s0,sp,144
     c12:	0000                	unimp
     c14:	0501                	addi	a0,a0,0
     c16:	000d                	c.nop	3
     c18:	0402                	c.slli64	s0
}
     c1a:	0601                	addi	a2,a2,0
     c1c:	00090003          	lb	zero,0(s2)
     c20:	0100                	addi	s0,sp,128
     c22:	2505                	jal	1242 <_bss_start+0x76>
     c24:	0200                	addi	s0,sp,256
     c26:	0204                	addi	s1,sp,256
     c28:	0306                	slli	t1,t1,0x1
        CT[i-(2*N)] = CT[i];
     c2a:	097f                	0x97f
     c2c:	0004                	0x4
     c2e:	0501                	addi	a0,a0,0
     c30:	04020027          	0x4020027
    for(i = (2*N); i < (3*N); ++i){
     c34:	0602                	c.slli64	a2
        CT[i-(2*N)] = CT[i];
     c36:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     c3a:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c3c:	0d05                	addi	s10,s10,1
     c3e:	0200                	addi	s0,sp,256
     c40:	0304                	addi	s1,sp,384
     c42:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     c44:	090a                	slli	s2,s2,0x2
     c46:	0008                	0x8
     c48:	0501                	addi	a0,a0,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c4a:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     c4e:	00030603          	lb	a2,0(t1)
     c52:	0009                	c.nop	2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c54:	0100                	addi	s0,sp,128
     c56:	1905                	addi	s2,s2,-31
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c58:	0200                	addi	s0,sp,256
     c5a:	0304                	addi	s1,sp,384
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c5c:	04090003          	lb	zero,64(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     c60:	0100                	addi	s0,sp,128
     c62:	2005                	jal	c82 <ntru_deceypt+0x46>
     c64:	0200                	addi	s0,sp,256
     c66:	0304                	addi	s1,sp,384
     c68:	02097f03          	0x2097f03
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c6c:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     c6e:	2305                	jal	118e <__DTOR_END__+0x146>
     c70:	0200                	addi	s0,sp,256
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     c72:	0304                	addi	s1,sp,384
     c74:	02090103          	lb	sp,32(s2)
     c78:	0100                	addi	s0,sp,128
     c7a:	1905                	addi	s2,s2,-31
     c7c:	0200                	addi	s0,sp,256
     c7e:	0304                	addi	s1,sp,384
     c80:	06090003          	lb	zero,96(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     c84:	0100                	addi	s0,sp,128
     c86:	2005                	jal	ca6 <ntru_deceypt+0x6a>
     c88:	0200                	addi	s0,sp,256
     c8a:	0304                	addi	s1,sp,384
     c8c:	0306                	slli	t1,t1,0x1
        if(a2[i] <= q/2)
     c8e:	097f                	0x97f
     c90:	0006                	c.slli	zero,0x1
     c92:	0501                	addi	a0,a0,0
    for (i = 0; i < N; ++i){
     c94:	0014                	0x14
     c96:	0402                	c.slli64	s0
     c98:	0301                	addi	t1,t1,0
    c = polymult2(secret_key_fp,N,a2,N,0);
     c9a:	0900                	addi	s0,sp,144
     c9c:	0000                	unimp
     c9e:	0501                	addi	a0,a0,0
     ca0:	0009                	c.nop	2
     ca2:	0402                	c.slli64	s0
     ca4:	0601                	addi	a2,a2,0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     ca6:	00090003          	lb	zero,0(s2)
     caa:	0100                	addi	s0,sp,128
     cac:	2805                	jal	cdc <ntru_deceypt+0xa0>
     cae:	0200                	addi	s0,sp,256
     cb0:	0204                	addi	s1,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb2:	0306                	slli	t1,t1,0x1
     cb4:	097f                	0x97f
     cb6:	0004                	0x4
}
     cb8:	0501                	addi	a0,a0,0
     cba:	0103060f          	0x103060f
     cbe:	0609                	addi	a2,a2,2
     cc0:	0100                	addi	s0,sp,128
     cc2:	4305                	li	t1,1
     cc4:	0306                	slli	t1,t1,0x1
     cc6:	0004090b          	0x4090b
     cca:	0501                	addi	a0,a0,0
     ccc:	0305                	addi	t1,t1,1
        a2[i-(2*N)] = a2[i];
     cce:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
     cd2:	0301                	addi	t1,t1,0
     cd4:	0901                	addi	s2,s2,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cd6:	0000                	unimp
     cd8:	0301                	addi	t1,t1,0
        a2[i-(2*N)] = a2[i];
     cda:	0902                	c.slli64	s2
     cdc:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     cde:	0501                	addi	a0,a0,0
        if(a2[i] <= q/2)
     ce0:	0609                	addi	a2,a2,2
     ce2:	00090003          	lb	zero,0(s2)
            a2[i] = (-1)*(q-a2[i]);
     ce6:	0100                	addi	s0,sp,128
     ce8:	4305                	li	t1,1
     cea:	04097a03          	0x4097a03
    for (i = 0; i < N; ++i){
     cee:	0100                	addi	s0,sp,128
     cf0:	0905                	addi	s2,s2,1
        c2[i-(2*N)] = c2[i];
     cf2:	02090603          	lb	a2,32(s2)
     cf6:	0100                	addi	s0,sp,128
     cf8:	4305                	li	t1,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     cfa:	04097a03          	0x4097a03
        c2[i-(2*N)] = c2[i];
     cfe:	0100                	addi	s0,sp,128
     d00:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d02:	1c090603          	lb	a2,448(s2)
     d06:	0100                	addi	s0,sp,128
     d08:	06090103          	lb	sp,96(s2)
     d0c:	0100                	addi	s0,sp,128
     d0e:	06090203          	lb	tp,96(s2)
     d12:	0100                	addi	s0,sp,128
     d14:	04090103          	lb	sp,64(s2)
     d18:	0100                	addi	s0,sp,128
     d1a:	08097f03          	0x8097f03
     d1e:	0100                	addi	s0,sp,128
     d20:	02090103          	lb	sp,32(s2)
     d24:	0100                	addi	s0,sp,128
     d26:	4305                	li	t1,1
     d28:	04097603          	0x4097603
     d2c:	0100                	addi	s0,sp,128
     d2e:	0905                	addi	s2,s2,1
     d30:	08090603          	lb	a2,128(s2)
     d34:	0100                	addi	s0,sp,128
     d36:	0505                	addi	a0,a0,1
     d38:	0306                	slli	t1,t1,0x1
     d3a:	0901                	addi	s2,s2,0
     d3c:	0004                	0x4
     d3e:	0301                	addi	t1,t1,0
     d40:	0901                	addi	s2,s2,0
     d42:	0000                	unimp
     d44:	0301                	addi	t1,t1,0
     d46:	0901                	addi	s2,s2,0
     d48:	0000                	unimp
     d4a:	0301                	addi	t1,t1,0
     d4c:	0901                	addi	s2,s2,0
     d4e:	0000                	unimp
     d50:	0501                	addi	a0,a0,0
     d52:	0609                	addi	a2,a2,2
     d54:	00090003          	lb	zero,0(s2)
     d58:	0100                	addi	s0,sp,128
     d5a:	0505                	addi	a0,a0,1
     d5c:	0306                	slli	t1,t1,0x1
     d5e:	0904                	addi	s1,sp,144
     d60:	0006                	c.slli	zero,0x1
     d62:	0501                	addi	a0,a0,0
     d64:	060c                	addi	a1,sp,768
     d66:	00090003          	lb	zero,0(s2)
     d6a:	0100                	addi	s0,sp,128
     d6c:	1105                	addi	sp,sp,-31
     d6e:	0200                	addi	s0,sp,256
     d70:	0104                	addi	s1,sp,128
     d72:	0306                	slli	t1,t1,0x1
     d74:	0900                	addi	s0,sp,144
     d76:	0002                	c.slli64	zero
     d78:	0501                	addi	a0,a0,0
     d7a:	0005                	c.nop	1
     d7c:	0402                	c.slli64	s0
     d7e:	0601                	addi	a2,a2,0
     d80:	00090003          	lb	zero,0(s2)
     d84:	0100                	addi	s0,sp,128
     d86:	0905                	addi	s2,s2,1
     d88:	0306                	slli	t1,t1,0x1
     d8a:	0905                	addi	s2,s2,1
     d8c:	0004                	0x4
     d8e:	0501                	addi	a0,a0,0
     d90:	0305                	addi	t1,t1,1
     d92:	0905                	addi	s2,s2,1
     d94:	0008                	0x8
     d96:	0501                	addi	a0,a0,0
     d98:	060c                	addi	a1,sp,768
     d9a:	00090003          	lb	zero,0(s2)
     d9e:	0100                	addi	s0,sp,128
     da0:	1105                	addi	sp,sp,-31
     da2:	0200                	addi	s0,sp,256
     da4:	0104                	addi	s1,sp,128
     da6:	0306                	slli	t1,t1,0x1
     da8:	0900                	addi	s0,sp,144
     daa:	0002                	c.slli64	zero
     dac:	0501                	addi	a0,a0,0
     dae:	0005                	c.nop	1
     db0:	0402                	c.slli64	s0
     db2:	0601                	addi	a2,a2,0
     db4:	00090003          	lb	zero,0(s2)
     db8:	0100                	addi	s0,sp,128
     dba:	0205                	addi	tp,tp,1
     dbc:	0306                	slli	t1,t1,0x1
     dbe:	0904                	addi	s1,sp,144
     dc0:	0004                	0x4
     dc2:	0501                	addi	a0,a0,0
     dc4:	0305                	addi	t1,t1,1
     dc6:	0902                	c.slli64	s2
     dc8:	0008                	0x8
     dca:	0501                	addi	a0,a0,0
     dcc:	060c                	addi	a1,sp,768
     dce:	00090003          	lb	zero,0(s2)
     dd2:	0100                	addi	s0,sp,128
     dd4:	1105                	addi	sp,sp,-31
     dd6:	0200                	addi	s0,sp,256
     dd8:	0104                	addi	s1,sp,128
     dda:	0306                	slli	t1,t1,0x1
     ddc:	0900                	addi	s0,sp,144
     dde:	0002                	c.slli64	zero
     de0:	0501                	addi	a0,a0,0
     de2:	0005                	c.nop	1
     de4:	0402                	c.slli64	s0
     de6:	0601                	addi	a2,a2,0
     de8:	00090003          	lb	zero,0(s2)
     dec:	0100                	addi	s0,sp,128
     dee:	1805                	addi	a6,a6,-31
     df0:	0200                	addi	s0,sp,256
     df2:	0104                	addi	s1,sp,128
     df4:	0306                	slli	t1,t1,0x1
     df6:	0906                	slli	s2,s2,0x1
     df8:	0004                	0x4
     dfa:	0501                	addi	a0,a0,0
     dfc:	0005                	c.nop	1
     dfe:	0402                	c.slli64	s0
     e00:	0601                	addi	a2,a2,0
     e02:	08090003          	lb	zero,128(s2)
     e06:	0100                	addi	s0,sp,128
     e08:	0c05                	addi	s8,s8,1
     e0a:	0200                	addi	s0,sp,256
     e0c:	0104                	addi	s1,sp,128
     e0e:	04097a03          	0x4097a03
     e12:	0100                	addi	s0,sp,128
     e14:	0200                	addi	s0,sp,256
     e16:	0104                	addi	s1,sp,128
     e18:	04090f03          	lb	t5,64(s2)
     e1c:	0100                	addi	s0,sp,128
     e1e:	1105                	addi	sp,sp,-31
     e20:	0200                	addi	s0,sp,256
     e22:	0104                	addi	s1,sp,128
     e24:	0306                	slli	t1,t1,0x1
     e26:	097f                	0x97f
     e28:	0002                	c.slli64	zero
     e2a:	0501                	addi	a0,a0,0
     e2c:	0005                	c.nop	1
     e2e:	0402                	c.slli64	s0
     e30:	0601                	addi	a2,a2,0
     e32:	00090003          	lb	zero,0(s2)
     e36:	0100                	addi	s0,sp,128
     e38:	0905                	addi	s2,s2,1
     e3a:	0200                	addi	s0,sp,256
     e3c:	0304                	addi	s1,sp,384
     e3e:	0306                	slli	t1,t1,0x1
     e40:	00080963          	beqz	a6,e52 <memcpy+0xd8>
     e44:	0501                	addi	a0,a0,0
     e46:	0015                	c.nop	5
     e48:	0402                	c.slli64	s0
     e4a:	00030603          	lb	a2,0(t1)
     e4e:	0409                	addi	s0,s0,2
     e50:	0100                	addi	s0,sp,128
     e52:	1a05                	addi	s4,s4,-31
     e54:	0200                	addi	s0,sp,256
     e56:	0304                	addi	s1,sp,384
     e58:	04090003          	lb	zero,64(s2)
     e5c:	0100                	addi	s0,sp,128
     e5e:	1505                	addi	a0,a0,-31
     e60:	0200                	addi	s0,sp,256
     e62:	0304                	addi	s1,sp,384
     e64:	02090003          	lb	zero,32(s2)
     e68:	0100                	addi	s0,sp,128
     e6a:	1d05                	addi	s10,s10,-31
     e6c:	0200                	addi	s0,sp,256
     e6e:	0304                	addi	s1,sp,384
     e70:	02097f03          	0x2097f03
     e74:	0100                	addi	s0,sp,128
     e76:	1505                	addi	a0,a0,-31
     e78:	0200                	addi	s0,sp,256
     e7a:	0304                	addi	s1,sp,384
     e7c:	02090103          	lb	sp,32(s2)
     e80:	0100                	addi	s0,sp,128
     e82:	1d05                	addi	s10,s10,-31
     e84:	0200                	addi	s0,sp,256
     e86:	0304                	addi	s1,sp,384
     e88:	0306                	slli	t1,t1,0x1
     e8a:	097f                	0x97f
     e8c:	0002                	c.slli64	zero
     e8e:	0501                	addi	a0,a0,0
     e90:	0009                	c.nop	2
     e92:	0402                	c.slli64	s0
     e94:	090b0303          	lb	t1,144(s6)
     e98:	0002                	c.slli64	zero
     e9a:	0501                	addi	a0,a0,0
     e9c:	04020017          	auipc	zero,0x4020
     ea0:	00030603          	lb	a2,0(t1)
     ea4:	0409                	addi	s0,s0,2
     ea6:	0100                	addi	s0,sp,128
     ea8:	1e05                	addi	t3,t3,-31
     eaa:	0200                	addi	s0,sp,256
     eac:	0304                	addi	s1,sp,384
     eae:	04090003          	lb	zero,64(s2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	1705                	addi	a4,a4,-31
     eb6:	0200                	addi	s0,sp,256
     eb8:	0304                	addi	s1,sp,384
     eba:	02090003          	lb	zero,32(s2)
     ebe:	0100                	addi	s0,sp,128
     ec0:	1d05                	addi	s10,s10,-31
     ec2:	0200                	addi	s0,sp,256
     ec4:	0304                	addi	s1,sp,384
     ec6:	02097f03          	0x2097f03
     eca:	0100                	addi	s0,sp,128
     ecc:	1705                	addi	a4,a4,-31
     ece:	0200                	addi	s0,sp,256
     ed0:	0304                	addi	s1,sp,384
     ed2:	02090103          	lb	sp,32(s2)
     ed6:	0100                	addi	s0,sp,128
     ed8:	1d05                	addi	s10,s10,-31
     eda:	0200                	addi	s0,sp,256
     edc:	0304                	addi	s1,sp,384
     ede:	0306                	slli	t1,t1,0x1
     ee0:	097f                	0x97f
     ee2:	0002                	c.slli64	zero
     ee4:	0501                	addi	a0,a0,0
     ee6:	0009                	c.nop	2
     ee8:	0402                	c.slli64	s0
     eea:	09070303          	lb	t1,144(a4)
     eee:	0002                	c.slli64	zero
     ef0:	0501                	addi	a0,a0,0
     ef2:	000e                	c.slli	zero,0x3
     ef4:	0402                	c.slli64	s0
     ef6:	00030603          	lb	a2,0(t1)
     efa:	0409                	addi	s0,s0,2
     efc:	0100                	addi	s0,sp,128
     efe:	0200                	addi	s0,sp,256
int main(){
     f00:	0304                	addi	s1,sp,384
     f02:	04090103          	lb	sp,64(s2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f06:	0100                	addi	s0,sp,128
     f08:	0200                	addi	s0,sp,256
     f0a:	0304                	addi	s1,sp,384
     f0c:	02097f03          	0x2097f03
     f10:	0100                	addi	s0,sp,128
int main(){
     f12:	0905                	addi	s2,s2,1
     f14:	0200                	addi	s0,sp,256
     f16:	0304                	addi	s1,sp,384
     f18:	0306                	slli	t1,t1,0x1
     f1a:	0901                	addi	s2,s2,0
     f1c:	0004                	0x4
     f1e:	0501                	addi	a0,a0,0
     f20:	000e                	c.slli	zero,0x3
    resultkon[0] = 0xaaaaaaa0;
     f22:	0402                	c.slli64	s0
     f24:	00030603          	lb	a2,0(t1)
     f28:	0009                	c.nop	2
     f2a:	0100                	addi	s0,sp,128
     f2c:	1d05                	addi	s10,s10,-31
     f2e:	0200                	addi	s0,sp,256
     f30:	0304                	addi	s1,sp,384
     f32:	0306                	slli	t1,t1,0x1
    keys = generate_keys(N, p, q);
     f34:	097e                	slli	s2,s2,0x1f
     f36:	0004                	0x4
     f38:	0501                	addi	a0,a0,0
     f3a:	0309                	addi	t1,t1,2
     f3c:	00040907          	0x40907
    resultkon[0] = 0xaaaaaaa1;
     f40:	0501                	addi	a0,a0,0
     f42:	0003060b          	0x3060b
     f46:	0009                	c.nop	2
     f48:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     f4a:	2005                	jal	f6a <main+0x6a>
     f4c:	0200                	addi	s0,sp,256
        secret_key_f[i] = keys[i];
     f4e:	0204                	addi	s1,sp,256
     f50:	0306                	slli	t1,t1,0x1
     f52:	097f                	0x97f
     f54:	0002                	c.slli64	zero
     f56:	0501                	addi	a0,a0,0
     f58:	0022                	c.slli	zero,0x8
    for(i = 0; i < N; ++i){
     f5a:	0402                	c.slli64	s0
     f5c:	0602                	c.slli64	a2
     f5e:	00090003          	lb	zero,0(s2)
    for(i = N; i < (2*N); ++i){
     f62:	0100                	addi	s0,sp,128
     f64:	0905                	addi	s2,s2,1
     f66:	0306                	slli	t1,t1,0x1
     f68:	0909                	addi	s2,s2,2
     f6a:	0004                	0x4
        secret_key_fp[i-(2*N)] = keys[i];
     f6c:	0501                	addi	a0,a0,0
     f6e:	0615                	addi	a2,a2,5
     f70:	00090003          	lb	zero,0(s2)
     f74:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     f76:	0c05                	addi	s8,s8,1
     f78:	06090003          	lb	zero,96(s2)
    for(i = (3*N); i < (4*N); ++i){
     f7c:	0100                	addi	s0,sp,128
     f7e:	1a05                	addi	s4,s4,-31
     f80:	0200                	addi	s0,sp,256
     f82:	0204                	addi	s1,sp,256
     f84:	0306                	slli	t1,t1,0x1
        public_key[i-(4*N)] = keys[i];
     f86:	097f                	0x97f
     f88:	0004                	0x4
     f8a:	0501                	addi	a0,a0,0
     f8c:	0309                	addi	t1,t1,2
     f8e:	00040907          	0x40907
    for(i = (4*N); i < (5*N); ++i){
     f92:	0501                	addi	a0,a0,0
     f94:	0003060b          	0x3060b
     f98:	0009                	c.nop	2
     f9a:	0100                	addi	s0,sp,128
        ring_poly[i-(5*N)] = keys[i];
     f9c:	2005                	jal	fbc <main+0xbc>
     f9e:	0200                	addi	s0,sp,256
     fa0:	0204                	addi	s1,sp,256
     fa2:	0306                	slli	t1,t1,0x1
     fa4:	097f                	0x97f
    for(i = (5*N); i < (6*N+1); ++i){
     fa6:	0002                	c.slli64	zero
     fa8:	0501                	addi	a0,a0,0
    resultkon[0] = 0xbbbbbbb0;
     faa:	0022                	c.slli	zero,0x8
     fac:	0402                	c.slli64	s0
     fae:	0602                	c.slli64	a2
     fb0:	00090003          	lb	zero,0(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fb4:	0100                	addi	s0,sp,128
     fb6:	1805                	addi	a6,a6,-31
     fb8:	0200                	addi	s0,sp,256
    resultkon[0] = 0xbbbbbbb1;
     fba:	0104                	addi	s1,sp,128
     fbc:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fbe:	0900                	addi	s0,sp,144
     fc0:	0002                	c.slli64	zero
    resultkon[0] = 0xbbbbbbb0;
     fc2:	0501                	addi	a0,a0,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fc4:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb1;
     fc6:	0402                	c.slli64	s0
    resultkon[0] = 0xccccccc0;
     fc8:	0601                	addi	a2,a2,0
     fca:	08090003          	lb	zero,128(s2)
     fce:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
     fd0:	0b05                	addi	s6,s6,1
    resultkon[0] = 0xccccccc0;
     fd2:	0306                	slli	t1,t1,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
     fd4:	090c                	addi	a1,sp,144
     fd6:	0004                	0x4
     fd8:	0601                	addi	a2,a2,0
     fda:	04093403          	0x4093403
     fde:	0100                	addi	s0,sp,128
     fe0:	1305                	addi	t1,t1,-31
     fe2:	02090103          	lb	sp,32(s2)
     fe6:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc1;	
     fe8:	1005                	c.nop	-31
     fea:	0200                	addi	s0,sp,256
            resultkon[0] = 0xDEDEDEDE;
     fec:	0104                	addi	s1,sp,128
     fee:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xccccccc1;	
     ff0:	097f                	0x97f
     ff2:	0008                	0x8
            resultkon[0] = 0xDEDEDEDE;
     ff4:	0501                	addi	a0,a0,0
     ff6:	0005                	c.nop	1
    for(i = 0; i < 32; ++i){
     ff8:	0402                	c.slli64	s0
     ffa:	0601                	addi	a2,a2,0
        if(!(message[i] == Dec_Message[i])){
     ffc:	00090003          	lb	zero,0(s2)
    1000:	0100                	addi	s0,sp,128
    1002:	1b05                	addi	s6,s6,-31
    1004:	04090303          	lb	t1,64(s2)
    1008:	0100                	addi	s0,sp,128
    100a:	1305                	addi	t1,t1,-31
            resultkon[0] = 0xBABABABA;
    100c:	04090103          	lb	sp,64(s2)
    1010:	0100                	addi	s0,sp,128
    1012:	1505                	addi	a0,a0,-31
    1014:	0200                	addi	s0,sp,256
}
    1016:	0104                	addi	s1,sp,128
    1018:	0306                	slli	t1,t1,0x1
    101a:	097f                	0x97f
    101c:	0008                	0x8
    101e:	0501                	addi	a0,a0,0
    1020:	0005                	c.nop	1
    1022:	0402                	c.slli64	s0
    1024:	0601                	addi	a2,a2,0
    1026:	00090003          	lb	zero,0(s2)
    102a:	0100                	addi	s0,sp,128
    102c:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xDEDEDEDE;
    102e:	0904                	addi	s1,sp,144
    for(i = 0; i < 32; ++i){
    1030:	0004                	0x4
    1032:	0301                	addi	t1,t1,0
    1034:	0902                	c.slli64	s2
    1036:	0000                	unimp
    1038:	0501                	addi	a0,a0,0
    103a:	0601                	addi	a2,a2,0
    103c:	00090103          	lb	sp,0(s2)
    1040:	0100                	addi	s0,sp,128
    1042:	0905                	addi	s2,s2,1
    1044:	0306                	slli	t1,t1,0x1
    1046:	0945                	addi	s2,s2,17
    1048:	002a                	c.slli	zero,0xa
    104a:	0501                	addi	a0,a0,0
    104c:	0616                	slli	a2,a2,0x5
    104e:	00090003          	lb	zero,0(s2)
    1052:	0100                	addi	s0,sp,128
    1054:	0d05                	addi	s10,s10,1
    1056:	04090003          	lb	zero,64(s2)
    105a:	0100                	addi	s0,sp,128
    105c:	1305                	addi	t1,t1,-31
    105e:	04090003          	lb	zero,64(s2)
    1062:	0100                	addi	s0,sp,128
    1064:	0905                	addi	s2,s2,1
    1066:	04090303          	lb	t1,64(s2)
    106a:	0100                	addi	s0,sp,128
    106c:	1305                	addi	t1,t1,-31
    106e:	06097d03          	0x6097d03
    1072:	0100                	addi	s0,sp,128
    1074:	0905                	addi	s2,s2,1
    1076:	0306                	slli	t1,t1,0x1
    1078:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    107c:	0301                	addi	t1,t1,0
    107e:	0904                	addi	s1,sp,144
    1080:	0002                	c.slli64	zero
    1082:	0501                	addi	a0,a0,0
    1084:	00030613          	mv	a2,t1
    1088:	0009                	c.nop	2
    108a:	0100                	addi	s0,sp,128
    108c:	0905                	addi	s2,s2,1
    108e:	0e090503          	lb	a0,224(s2)
    1092:	0100                	addi	s0,sp,128
    1094:	1305                	addi	t1,t1,-31
    1096:	04097b03          	0x4097b03
    109a:	0100                	addi	s0,sp,128
    109c:	0905                	addi	s2,s2,1
    109e:	0306                	slli	t1,t1,0x1
    10a0:	0905                	addi	s2,s2,1
    10a2:	0002                	c.slli64	zero
    10a4:	0301                	addi	t1,t1,0
    10a6:	0904                	addi	s1,sp,144
    10a8:	0002                	c.slli64	zero
    10aa:	0501                	addi	a0,a0,0
    10ac:	0610                	addi	a2,sp,768
    10ae:	02090003          	lb	zero,32(s2)
    10b2:	0100                	addi	s0,sp,128
    10b4:	1505                	addi	a0,a0,-31
    10b6:	0200                	addi	s0,sp,256
    10b8:	0104                	addi	s1,sp,128
    10ba:	0306                	slli	t1,t1,0x1
    10bc:	0900                	addi	s0,sp,144
    10be:	0002                	c.slli64	zero
    10c0:	0501                	addi	a0,a0,0
    10c2:	0009                	c.nop	2
    10c4:	0402                	c.slli64	s0
    10c6:	0601                	addi	a2,a2,0
    10c8:	00090003          	lb	zero,0(s2)
    10cc:	0100                	addi	s0,sp,128
    10ce:	0306                	slli	t1,t1,0x1
    10d0:	0906                	slli	s2,s2,0x1
    10d2:	0004                	0x4
    10d4:	0301                	addi	t1,t1,0
    10d6:	00080903          	lb	s2,0(a6)
    10da:	0501                	addi	a0,a0,0
    10dc:	0003060f          	0x3060f
    10e0:	0209                	addi	tp,tp,2
    10e2:	0100                	addi	s0,sp,128
    10e4:	1405                	addi	s0,s0,-31
    10e6:	0200                	addi	s0,sp,256
    10e8:	0104                	addi	s1,sp,128
    10ea:	0306                	slli	t1,t1,0x1
    10ec:	0900                	addi	s0,sp,144
    10ee:	0002                	c.slli64	zero
    10f0:	0501                	addi	a0,a0,0
    10f2:	0009                	c.nop	2
    10f4:	0402                	c.slli64	s0
    10f6:	0601                	addi	a2,a2,0
    10f8:	00090003          	lb	zero,0(s2)
    10fc:	0100                	addi	s0,sp,128
    10fe:	0306                	slli	t1,t1,0x1
    1100:	0905                	addi	s2,s2,1
    1102:	0004                	0x4
    1104:	0301                	addi	t1,t1,0
    1106:	0904                	addi	s1,sp,144
    1108:	0008                	0x8
    110a:	0501                	addi	a0,a0,0
    110c:	0610                	addi	a2,sp,768
    110e:	00090003          	lb	zero,0(s2)
    1112:	0100                	addi	s0,sp,128
    1114:	1c05                	addi	s8,s8,-31
    1116:	0200                	addi	s0,sp,256
    1118:	0104                	addi	s1,sp,128
    111a:	0306                	slli	t1,t1,0x1
    111c:	0900                	addi	s0,sp,144
    111e:	0002                	c.slli64	zero
    1120:	0501                	addi	a0,a0,0
    1122:	0009                	c.nop	2
    1124:	0402                	c.slli64	s0
    1126:	0601                	addi	a2,a2,0
    1128:	08090003          	lb	zero,128(s2)
    112c:	0100                	addi	s0,sp,128
    112e:	0d05                	addi	s10,s10,1
    1130:	0200                	addi	s0,sp,256
    1132:	0304                	addi	s1,sp,384
    1134:	0306                	slli	t1,t1,0x1
    1136:	0008096f          	jal	s2,81136 <_stack_start+0x71136>
    113a:	0501                	addi	a0,a0,0
    113c:	0030                	addi	a2,sp,8
    113e:	0402                	c.slli64	s0
    1140:	00030603          	lb	a2,0(t1)
    1144:	0009                	c.nop	2
    1146:	0100                	addi	s0,sp,128
    1148:	2705                	jal	1868 <result+0x1ec>
    114a:	0200                	addi	s0,sp,256
    114c:	0304                	addi	s1,sp,384
    114e:	06090003          	lb	zero,96(s2)
    1152:	0100                	addi	s0,sp,128
    1154:	2105                	jal	1574 <product2+0x150>
    1156:	0200                	addi	s0,sp,256
    1158:	0304                	addi	s1,sp,384
    115a:	04097f03          	0x4097f03
    115e:	0100                	addi	s0,sp,128
    1160:	2705                	jal	1880 <result+0x204>
    1162:	0200                	addi	s0,sp,256
    1164:	0304                	addi	s1,sp,384
    1166:	04090103          	lb	sp,64(s2)
    116a:	0100                	addi	s0,sp,128
    116c:	1905                	addi	s2,s2,-31
    116e:	0200                	addi	s0,sp,256
    1170:	0304                	addi	s1,sp,384
    1172:	02090003          	lb	zero,32(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	2105                	jal	1598 <product2+0x174>
    117a:	0200                	addi	s0,sp,256
    117c:	0304                	addi	s1,sp,384
    117e:	0306                	slli	t1,t1,0x1
    1180:	097f                	0x97f
    1182:	0004                	0x4
    1184:	0501                	addi	a0,a0,0
    1186:	000d                	c.nop	3
    1188:	0402                	c.slli64	s0
    118a:	090a0303          	lb	t1,144(s4)
    118e:	0002                	c.slli64	zero
    1190:	0501                	addi	a0,a0,0
    1192:	001c                	0x1c
    1194:	0402                	c.slli64	s0
    1196:	00030603          	lb	a2,0(t1)
    119a:	0009                	c.nop	2
    119c:	0100                	addi	s0,sp,128
    119e:	1905                	addi	s2,s2,-31
    11a0:	0200                	addi	s0,sp,256
    11a2:	0304                	addi	s1,sp,384
    11a4:	06090003          	lb	zero,96(s2)
    11a8:	0100                	addi	s0,sp,128
    11aa:	2005                	jal	11ca <_edata+0x2>
    11ac:	0200                	addi	s0,sp,256
    11ae:	0304                	addi	s1,sp,384
    11b0:	04097f03          	0x4097f03
    11b4:	0100                	addi	s0,sp,128
    11b6:	1905                	addi	s2,s2,-31
    11b8:	0200                	addi	s0,sp,256
    11ba:	0304                	addi	s1,sp,384
    11bc:	04090103          	lb	sp,64(s2)
    11c0:	0100                	addi	s0,sp,128
    11c2:	1205                	addi	tp,tp,-31
    11c4:	0200                	addi	s0,sp,256
    11c6:	0304                	addi	s1,sp,384
    11c8:	02090003          	lb	zero,32(s2)
    11cc:	0100                	addi	s0,sp,128
    11ce:	2005                	jal	11ee <_bss_start+0x22>
    11d0:	0200                	addi	s0,sp,256
    11d2:	0304                	addi	s1,sp,384
    11d4:	0306                	slli	t1,t1,0x1
    11d6:	097f                	0x97f
    11d8:	0004                	0x4
    11da:	0501                	addi	a0,a0,0
    11dc:	030d                	addi	t1,t1,3
    11de:	090a                	slli	s2,s2,0x2
    11e0:	0002                	c.slli64	zero
    11e2:	0501                	addi	a0,a0,0
    11e4:	0003060f          	0x3060f
    11e8:	0009                	c.nop	2
    11ea:	0100                	addi	s0,sp,128
    11ec:	2405                	jal	140c <_bss_start+0x240>
    11ee:	0200                	addi	s0,sp,256
    11f0:	0204                	addi	s1,sp,256
    11f2:	0306                	slli	t1,t1,0x1
    11f4:	097f                	0x97f
    11f6:	0002                	c.slli64	zero
    11f8:	0501                	addi	a0,a0,0
    11fa:	0026                	c.slli	zero,0x9
    11fc:	0402                	c.slli64	s0
    11fe:	0602                	c.slli64	a2
    1200:	00090003          	lb	zero,0(s2)
    1204:	0100                	addi	s0,sp,128
    1206:	0d05                	addi	s10,s10,1
    1208:	0200                	addi	s0,sp,256
    120a:	0304                	addi	s1,sp,384
    120c:	0306                	slli	t1,t1,0x1
    120e:	0909                	addi	s2,s2,2
    1210:	0004                	0x4
    1212:	0501                	addi	a0,a0,0
    1214:	0012                	c.slli	zero,0x4
    1216:	0402                	c.slli64	s0
    1218:	00030603          	lb	a2,0(t1)
    121c:	0009                	c.nop	2
    121e:	0100                	addi	s0,sp,128
    1220:	2105                	jal	1640 <product2+0x21c>
    1222:	0200                	addi	s0,sp,256
    1224:	0304                	addi	s1,sp,384
    1226:	0306                	slli	t1,t1,0x1
    1228:	097f                	0x97f
    122a:	000a                	c.slli	zero,0x2
    122c:	0501                	addi	a0,a0,0
    122e:	0015                	c.nop	5
    1230:	0402                	c.slli64	s0
    1232:	0301                	addi	t1,t1,0
    1234:	0900                	addi	s0,sp,144
    1236:	0002                	c.slli64	zero
    1238:	0501                	addi	a0,a0,0
    123a:	0009                	c.nop	2
    123c:	0402                	c.slli64	s0
    123e:	0601                	addi	a2,a2,0
    1240:	00090003          	lb	zero,0(s2)
    1244:	0100                	addi	s0,sp,128
    1246:	0200                	addi	s0,sp,256
    1248:	0304                	addi	s1,sp,384
    124a:	0306                	slli	t1,t1,0x1
    124c:	0908                	addi	a0,sp,144
    124e:	0006                	c.slli	zero,0x1
    1250:	0501                	addi	a0,a0,0
    1252:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1256:	00030603          	lb	a2,0(t1)
    125a:	0409                	addi	s0,s0,2
    125c:	0100                	addi	s0,sp,128
    125e:	1605                	addi	a2,a2,-31
    1260:	0200                	addi	s0,sp,256
    1262:	0304                	addi	s1,sp,384
    1264:	04090003          	lb	zero,64(s2)
    1268:	0100                	addi	s0,sp,128
    126a:	1305                	addi	t1,t1,-31
    126c:	0200                	addi	s0,sp,256
    126e:	0304                	addi	s1,sp,384
    1270:	02090003          	lb	zero,32(s2)
    1274:	0100                	addi	s0,sp,128
    1276:	1c05                	addi	s8,s8,-31
    1278:	0200                	addi	s0,sp,256
    127a:	0304                	addi	s1,sp,384
    127c:	02097f03          	0x2097f03
    1280:	0100                	addi	s0,sp,128
    1282:	1305                	addi	t1,t1,-31
    1284:	0200                	addi	s0,sp,256
    1286:	0304                	addi	s1,sp,384
    1288:	02090103          	lb	sp,32(s2)
    128c:	0100                	addi	s0,sp,128
    128e:	1c05                	addi	s8,s8,-31
    1290:	0200                	addi	s0,sp,256
    1292:	0304                	addi	s1,sp,384
    1294:	0306                	slli	t1,t1,0x1
    1296:	097f                	0x97f
    1298:	0002                	c.slli64	zero
    129a:	0501                	addi	a0,a0,0
    129c:	0009                	c.nop	2
    129e:	0402                	c.slli64	s0
    12a0:	09040303          	lb	t1,144(s0)
    12a4:	0002                	c.slli64	zero
    12a6:	0501                	addi	a0,a0,0
    12a8:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    12ac:	00030603          	lb	a2,0(t1)
    12b0:	0009                	c.nop	2
    12b2:	0100                	addi	s0,sp,128
    12b4:	2505                	jal	18d4 <ti_2>
    12b6:	0200                	addi	s0,sp,256
    12b8:	0304                	addi	s1,sp,384
    12ba:	0306                	slli	t1,t1,0x1
    12bc:	097f                	0x97f
    12be:	000c                	0xc
    12c0:	0501                	addi	a0,a0,0
    12c2:	033c                	addi	a5,sp,392
    12c4:	090a                	slli	s2,s2,0x2
    12c6:	0006                	c.slli	zero,0x1
    12c8:	0501                	addi	a0,a0,0
    12ca:	0305                	addi	t1,t1,1
    12cc:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    12d0:	0301                	addi	t1,t1,0
    12d2:	0901                	addi	s2,s2,0
    12d4:	0000                	unimp
    12d6:	0301                	addi	t1,t1,0
    12d8:	0901                	addi	s2,s2,0
    12da:	0000                	unimp
    12dc:	0501                	addi	a0,a0,0
    12de:	0609                	addi	a2,a2,2
    12e0:	00090003          	lb	zero,0(s2)
    12e4:	0100                	addi	s0,sp,128
    12e6:	3c05                	jal	d16 <reset_handler+0xe>
    12e8:	04097b03          	0x4097b03
    12ec:	0100                	addi	s0,sp,128
    12ee:	0905                	addi	s2,s2,1
    12f0:	02090503          	lb	a0,32(s2)
    12f4:	0100                	addi	s0,sp,128
    12f6:	3c05                	jal	d26 <reset_handler+0x1e>
    12f8:	04097b03          	0x4097b03
    12fc:	0100                	addi	s0,sp,128
    12fe:	0905                	addi	s2,s2,1
    1300:	1c090503          	lb	a0,448(s2)
    1304:	0100                	addi	s0,sp,128
    1306:	06090103          	lb	sp,96(s2)
    130a:	0100                	addi	s0,sp,128
    130c:	06090103          	lb	sp,96(s2)
    1310:	0100                	addi	s0,sp,128
    1312:	06090203          	lb	tp,96(s2)
    1316:	0100                	addi	s0,sp,128
    1318:	06090103          	lb	sp,96(s2)
    131c:	0100                	addi	s0,sp,128
    131e:	06090103          	lb	sp,96(s2)
    1322:	0100                	addi	s0,sp,128
    1324:	06090103          	lb	sp,96(s2)
    1328:	0100                	addi	s0,sp,128
    132a:	3c05                	jal	d5a <_start+0xa>
    132c:	04097403          	0x4097403
    1330:	0100                	addi	s0,sp,128
    1332:	0905                	addi	s2,s2,1
    1334:	04090503          	lb	a0,64(s2)
    1338:	0100                	addi	s0,sp,128
    133a:	0505                	addi	a0,a0,1
    133c:	0306                	slli	t1,t1,0x1
    133e:	0901                	addi	s2,s2,0
    1340:	0004                	0x4
    1342:	0301                	addi	t1,t1,0
    1344:	0901                	addi	s2,s2,0
    1346:	0000                	unimp
    1348:	0301                	addi	t1,t1,0
    134a:	0902                	c.slli64	s2
    134c:	0000                	unimp
    134e:	0301                	addi	t1,t1,0
    1350:	0901                	addi	s2,s2,0
    1352:	0000                	unimp
    1354:	0301                	addi	t1,t1,0
    1356:	0901                	addi	s2,s2,0
    1358:	0000                	unimp
    135a:	0301                	addi	t1,t1,0
    135c:	0901                	addi	s2,s2,0
    135e:	0000                	unimp
    1360:	0501                	addi	a0,a0,0
    1362:	0609                	addi	a2,a2,2
    1364:	00090003          	lb	zero,0(s2)
    1368:	0100                	addi	s0,sp,128
    136a:	0505                	addi	a0,a0,1
    136c:	0306                	slli	t1,t1,0x1
    136e:	0901                	addi	s2,s2,0
    1370:	0002                	c.slli64	zero
    1372:	0301                	addi	t1,t1,0
    1374:	0901                	addi	s2,s2,0
    1376:	0000                	unimp
    1378:	0301                	addi	t1,t1,0
    137a:	0901                	addi	s2,s2,0
    137c:	0000                	unimp
    137e:	0301                	addi	t1,t1,0
    1380:	0901                	addi	s2,s2,0
    1382:	0000                	unimp
    1384:	0301                	addi	t1,t1,0
    1386:	0902                	c.slli64	s2
    1388:	0000                	unimp
    138a:	0301                	addi	t1,t1,0
    138c:	0901                	addi	s2,s2,0
    138e:	0000                	unimp
    1390:	0501                	addi	a0,a0,0
    1392:	060c                	addi	a1,sp,768
    1394:	02090003          	lb	zero,32(s2)
    1398:	0100                	addi	s0,sp,128
    139a:	1105                	addi	sp,sp,-31
    139c:	02090303          	lb	t1,32(s2)
    13a0:	0100                	addi	s0,sp,128
    13a2:	0200                	addi	s0,sp,256
    13a4:	0104                	addi	s1,sp,128
    13a6:	0306                	slli	t1,t1,0x1
    13a8:	097d                	addi	s2,s2,31
    13aa:	0008                	0x8
    13ac:	0501                	addi	a0,a0,0
    13ae:	0005                	c.nop	1
    13b0:	0402                	c.slli64	s0
    13b2:	0601                	addi	a2,a2,0
    13b4:	00090003          	lb	zero,0(s2)
    13b8:	0100                	addi	s0,sp,128
    13ba:	0306                	slli	t1,t1,0x1
    13bc:	090a                	slli	s2,s2,0x2
    13be:	0004                	0x4
    13c0:	0501                	addi	a0,a0,0
    13c2:	060d                	addi	a2,a2,3
    13c4:	00090003          	lb	zero,0(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	0505                	addi	a0,a0,1
    13cc:	0306                	slli	t1,t1,0x1
    13ce:	00060903          	lb	s2,0(a2)
    13d2:	0501                	addi	a0,a0,0
    13d4:	0900030b          	0x900030b
    13d8:	0000                	unimp
    13da:	0501                	addi	a0,a0,0
    13dc:	0624                	addi	s1,sp,776
    13de:	00090b03          	lb	s6,0(s2)
    13e2:	0100                	addi	s0,sp,128
    13e4:	1905                	addi	s2,s2,-31
    13e6:	08092303          	lw	t1,128(s2)
    13ea:	0100                	addi	s0,sp,128
    13ec:	0905                	addi	s2,s2,1
    13ee:	0306                	slli	t1,t1,0x1
    13f0:	0954                	addi	a3,sp,148
    13f2:	0008                	0x8
    13f4:	0501                	addi	a0,a0,0
    13f6:	0302                	c.slli64	t1
    13f8:	0902                	c.slli64	s2
    13fa:	0000                	unimp
    13fc:	0301                	addi	t1,t1,0
    13fe:	00080903          	lb	s2,0(a6)
    1402:	0501                	addi	a0,a0,0
    1404:	0309                	addi	t1,t1,2
    1406:	00080903          	lb	s2,0(a6)
    140a:	0501                	addi	a0,a0,0
    140c:	0003060f          	0x3060f
    1410:	0009                	c.nop	2
    1412:	0100                	addi	s0,sp,128
    1414:	0905                	addi	s2,s2,1
    1416:	0306                	slli	t1,t1,0x1
    1418:	0901                	addi	s2,s2,0
    141a:	000c                	0xc
    141c:	0501                	addi	a0,a0,0
    141e:	0019                	c.nop	6
    1420:	0402                	c.slli64	s0
    1422:	0301                	addi	t1,t1,0
    1424:	0900                	addi	s0,sp,144
    1426:	0004                	0x4
    1428:	0501                	addi	a0,a0,0
    142a:	0009                	c.nop	2
    142c:	0402                	c.slli64	s0
    142e:	0601                	addi	a2,a2,0
    1430:	00090003          	lb	zero,0(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	1005                	c.nop	-31
    1438:	0a090603          	lb	a2,160(s2)
    143c:	0100                	addi	s0,sp,128
    143e:	1505                	addi	a0,a0,-31
    1440:	0200                	addi	s0,sp,256
    1442:	0104                	addi	s1,sp,128
    1444:	0306                	slli	t1,t1,0x1
    1446:	0900                	addi	s0,sp,144
    1448:	0002                	c.slli64	zero
    144a:	0501                	addi	a0,a0,0
    144c:	0009                	c.nop	2
    144e:	0402                	c.slli64	s0
    1450:	0601                	addi	a2,a2,0
    1452:	00090003          	lb	zero,0(s2)
    1456:	0100                	addi	s0,sp,128
    1458:	0306                	slli	t1,t1,0x1
    145a:	0905                	addi	s2,s2,1
    145c:	0004                	0x4
    145e:	0301                	addi	t1,t1,0
    1460:	0902                	c.slli64	s2
    1462:	0008                	0x8
    1464:	0501                	addi	a0,a0,0
    1466:	0610                	addi	a2,sp,768
    1468:	00090003          	lb	zero,0(s2)
    146c:	0100                	addi	s0,sp,128
    146e:	0905                	addi	s2,s2,1
    1470:	0306                	slli	t1,t1,0x1
    1472:	0901                	addi	s2,s2,0
    1474:	000c                	0xc
    1476:	0501                	addi	a0,a0,0
    1478:	0610                	addi	a2,sp,768
    147a:	00090003          	lb	zero,0(s2)
    147e:	0100                	addi	s0,sp,128
    1480:	1505                	addi	a0,a0,-31
    1482:	0200                	addi	s0,sp,256
    1484:	0104                	addi	s1,sp,128
    1486:	0306                	slli	t1,t1,0x1
    1488:	0900                	addi	s0,sp,144
    148a:	0002                	c.slli64	zero
    148c:	0501                	addi	a0,a0,0
    148e:	0009                	c.nop	2
    1490:	0402                	c.slli64	s0
    1492:	0601                	addi	a2,a2,0
    1494:	00090003          	lb	zero,0(s2)
    1498:	0100                	addi	s0,sp,128
    149a:	0205                	addi	tp,tp,1
    149c:	0306                	slli	t1,t1,0x1
    149e:	0906                	slli	s2,s2,0x1
    14a0:	0004                	0x4
    14a2:	0501                	addi	a0,a0,0
    14a4:	0309                	addi	t1,t1,2
    14a6:	0905                	addi	s2,s2,1
    14a8:	0008                	0x8
    14aa:	0501                	addi	a0,a0,0
    14ac:	0610                	addi	a2,sp,768
    14ae:	00090003          	lb	zero,0(s2)
    14b2:	0100                	addi	s0,sp,128
    14b4:	0905                	addi	s2,s2,1
    14b6:	0306                	slli	t1,t1,0x1
    14b8:	0901                	addi	s2,s2,0
    14ba:	000e                	c.slli	zero,0x3
    14bc:	0501                	addi	a0,a0,0
    14be:	0610                	addi	a2,sp,768
    14c0:	00090003          	lb	zero,0(s2)
    14c4:	0100                	addi	s0,sp,128
    14c6:	1505                	addi	a0,a0,-31
    14c8:	0200                	addi	s0,sp,256
    14ca:	0104                	addi	s1,sp,128
    14cc:	0306                	slli	t1,t1,0x1
    14ce:	0900                	addi	s0,sp,144
    14d0:	0002                	c.slli64	zero
    14d2:	0501                	addi	a0,a0,0
    14d4:	0009                	c.nop	2
    14d6:	0402                	c.slli64	s0
    14d8:	0601                	addi	a2,a2,0
    14da:	00090003          	lb	zero,0(s2)
    14de:	0100                	addi	s0,sp,128
    14e0:	0205                	addi	tp,tp,1
    14e2:	0306                	slli	t1,t1,0x1
    14e4:	0905                	addi	s2,s2,1
    14e6:	0004                	0x4
    14e8:	0501                	addi	a0,a0,0
    14ea:	0309                	addi	t1,t1,2
    14ec:	00080903          	lb	s2,0(a6)
    14f0:	0501                	addi	a0,a0,0
    14f2:	0610                	addi	a2,sp,768
    14f4:	02090003          	lb	zero,32(s2)
    14f8:	0100                	addi	s0,sp,128
    14fa:	1505                	addi	a0,a0,-31
    14fc:	0200                	addi	s0,sp,256
    14fe:	0104                	addi	s1,sp,128
    1500:	0306                	slli	t1,t1,0x1
    1502:	0900                	addi	s0,sp,144
    1504:	0002                	c.slli64	zero
    1506:	0501                	addi	a0,a0,0
    1508:	0009                	c.nop	2
    150a:	0402                	c.slli64	s0
    150c:	0601                	addi	a2,a2,0
    150e:	00090003          	lb	zero,0(s2)
    1512:	0100                	addi	s0,sp,128
    1514:	0306                	slli	t1,t1,0x1
    1516:	0904                	addi	s1,sp,144
    1518:	0004                	0x4
    151a:	0301                	addi	t1,t1,0
    151c:	0904                	addi	s1,sp,144
    151e:	0008                	0x8
    1520:	0501                	addi	a0,a0,0
    1522:	0612                	slli	a2,a2,0x4
    1524:	02094d03          	lbu	s10,32(s2)
    1528:	0100                	addi	s0,sp,128
    152a:	1005                	c.nop	-31
    152c:	02093303          	0x2093303
    1530:	0100                	addi	s0,sp,128
    1532:	1505                	addi	a0,a0,-31
    1534:	0200                	addi	s0,sp,256
    1536:	0104                	addi	s1,sp,128
    1538:	0306                	slli	t1,t1,0x1
    153a:	0900                	addi	s0,sp,144
    153c:	0002                	c.slli64	zero
    153e:	0501                	addi	a0,a0,0
    1540:	0009                	c.nop	2
    1542:	0402                	c.slli64	s0
    1544:	0601                	addi	a2,a2,0
    1546:	00090003          	lb	zero,0(s2)
    154a:	0100                	addi	s0,sp,128
    154c:	0b05                	addi	s6,s6,1
    154e:	0306                	slli	t1,t1,0x1
    1550:	0004094b          	fnmsub.s	fs2,fs0,ft0,ft0,rne
    1554:	0501                	addi	a0,a0,0
    1556:	0610                	addi	a2,sp,768
    1558:	0900c003          	lbu	zero,144(ra) # 1090 <__DTOR_END__+0x48>
    155c:	0002                	c.slli64	zero
    155e:	0301                	addi	t1,t1,0
    1560:	0901                	addi	s2,s2,0
    1562:	0002                	c.slli64	zero
    1564:	0501                	addi	a0,a0,0
    1566:	0015                	c.nop	5
    1568:	0402                	c.slli64	s0
    156a:	0601                	addi	a2,a2,0
    156c:	02097f03          	0x2097f03
    1570:	0100                	addi	s0,sp,128
    1572:	0905                	addi	s2,s2,1
    1574:	0200                	addi	s0,sp,256
    1576:	0104                	addi	s1,sp,128
    1578:	0306                	slli	t1,t1,0x1
    157a:	0900                	addi	s0,sp,144
    157c:	0000                	unimp
    157e:	0501                	addi	a0,a0,0
    1580:	0015                	c.nop	5
    1582:	0402                	c.slli64	s0
    1584:	0601                	addi	a2,a2,0
    1586:	0c090c03          	lb	s8,192(s2)
    158a:	0100                	addi	s0,sp,128
    158c:	0905                	addi	s2,s2,1
    158e:	0200                	addi	s0,sp,256
    1590:	0104                	addi	s1,sp,128
    1592:	0306                	slli	t1,t1,0x1
    1594:	0900                	addi	s0,sp,144
    1596:	0000                	unimp
    1598:	0601                	addi	a2,a2,0
    159a:	04090503          	lb	a0,64(s2)
    159e:	0100                	addi	s0,sp,128
    15a0:	00090103          	lb	sp,0(s2)
    15a4:	0100                	addi	s0,sp,128
    15a6:	0505                	addi	a0,a0,1
    15a8:	0306                	slli	t1,t1,0x1
    15aa:	0901                	addi	s2,s2,0
    15ac:	0000                	unimp
    15ae:	0501                	addi	a0,a0,0
    15b0:	0009                	c.nop	2
    15b2:	0402                	c.slli64	s0
    15b4:	a1030603          	lb	a2,-1520(t1)
    15b8:	097f                	0x97f
    15ba:	002a                	c.slli	zero,0xa
    15bc:	0501                	addi	a0,a0,0
    15be:	0018                	0x18
    15c0:	0402                	c.slli64	s0
    15c2:	00030603          	lb	a2,0(t1)
    15c6:	0009                	c.nop	2
    15c8:	0100                	addi	s0,sp,128
    15ca:	1105                	addi	sp,sp,-31
    15cc:	0200                	addi	s0,sp,256
    15ce:	0304                	addi	s1,sp,384
    15d0:	04090003          	lb	zero,64(s2)
    15d4:	0100                	addi	s0,sp,128
    15d6:	1b05                	addi	s6,s6,-31
    15d8:	0200                	addi	s0,sp,256
    15da:	0304                	addi	s1,sp,384
    15dc:	08097f03          	0x8097f03
    15e0:	0100                	addi	s0,sp,128
    15e2:	1105                	addi	sp,sp,-31
    15e4:	0200                	addi	s0,sp,256
    15e6:	0304                	addi	s1,sp,384
    15e8:	02090103          	lb	sp,32(s2)
    15ec:	0100                	addi	s0,sp,128
    15ee:	0905                	addi	s2,s2,1
    15f0:	0200                	addi	s0,sp,256
    15f2:	0304                	addi	s1,sp,384
    15f4:	0306                	slli	t1,t1,0x1
    15f6:	0901                	addi	s2,s2,0
    15f8:	0004                	0x4
    15fa:	0501                	addi	a0,a0,0
    15fc:	0018                	0x18
    15fe:	0402                	c.slli64	s0
    1600:	00030603          	lb	a2,0(t1)
    1604:	0009                	c.nop	2
    1606:	0100                	addi	s0,sp,128
    1608:	1105                	addi	sp,sp,-31
    160a:	0200                	addi	s0,sp,256
    160c:	0304                	addi	s1,sp,384
    160e:	04090003          	lb	zero,64(s2)
    1612:	0100                	addi	s0,sp,128
    1614:	0905                	addi	s2,s2,1
    1616:	0200                	addi	s0,sp,256
    1618:	0304                	addi	s1,sp,384
    161a:	0306                	slli	t1,t1,0x1
    161c:	0901                	addi	s2,s2,0
    161e:	000c                	0xc
    1620:	0501                	addi	a0,a0,0
    1622:	0011                	c.nop	4
    1624:	0402                	c.slli64	s0
    1626:	00030603          	lb	a2,0(t1)
    162a:	0009                	c.nop	2
    162c:	0100                	addi	s0,sp,128
    162e:	0905                	addi	s2,s2,1
    1630:	0200                	addi	s0,sp,256
    1632:	0304                	addi	s1,sp,384
    1634:	0306                	slli	t1,t1,0x1
    1636:	0901                	addi	s2,s2,0
    1638:	0008                	0x8
    163a:	0501                	addi	a0,a0,0
    163c:	0011                	c.nop	4
    163e:	0402                	c.slli64	s0
    1640:	00030603          	lb	a2,0(t1)
    1644:	0009                	c.nop	2
    1646:	0100                	addi	s0,sp,128
    1648:	1b05                	addi	s6,s6,-31
    164a:	0200                	addi	s0,sp,256
    164c:	0304                	addi	s1,sp,384
    164e:	0306                	slli	t1,t1,0x1
    1650:	097c                	addi	a5,sp,156
    1652:	0008                	0x8
    1654:	0501                	addi	a0,a0,0
    1656:	000d                	c.nop	3
    1658:	0402                	c.slli64	s0
    165a:	09190303          	lb	t1,145(s2)
    165e:	0004                	0x4
    1660:	0501                	addi	a0,a0,0
    1662:	0022                	c.slli	zero,0x8
    1664:	0402                	c.slli64	s0
    1666:	00030603          	lb	a2,0(t1)
    166a:	0009                	c.nop	2
    166c:	0100                	addi	s0,sp,128
    166e:	1d05                	addi	s10,s10,-31
    1670:	0200                	addi	s0,sp,256
    1672:	0304                	addi	s1,sp,384
    1674:	06090003          	lb	zero,96(s2)
    1678:	0100                	addi	s0,sp,128
    167a:	2a05                	jal	17aa <result+0x12e>
    167c:	0200                	addi	s0,sp,256
    167e:	0304                	addi	s1,sp,384
    1680:	02097f03          	0x2097f03
    1684:	0100                	addi	s0,sp,128
    1686:	1d05                	addi	s10,s10,-31
    1688:	0200                	addi	s0,sp,256
    168a:	0304                	addi	s1,sp,384
    168c:	04090103          	lb	sp,64(s2)
    1690:	0100                	addi	s0,sp,128
    1692:	2a05                	jal	17c2 <result+0x146>
    1694:	0200                	addi	s0,sp,256
    1696:	0304                	addi	s1,sp,384
    1698:	0306                	slli	t1,t1,0x1
    169a:	097f                	0x97f
    169c:	0004                	0x4
    169e:	0501                	addi	a0,a0,0
    16a0:	000d                	c.nop	3
    16a2:	0402                	c.slli64	s0
    16a4:	09070303          	lb	t1,144(a4)
    16a8:	0002                	c.slli64	zero
    16aa:	0501                	addi	a0,a0,0
    16ac:	0402001b          	0x402001b
    16b0:	00030603          	lb	a2,0(t1)
    16b4:	0009                	c.nop	2
    16b6:	0100                	addi	s0,sp,128
    16b8:	2305                	jal	1bd8 <random_keys+0x174>
    16ba:	0200                	addi	s0,sp,256
    16bc:	0304                	addi	s1,sp,384
    16be:	04090003          	lb	zero,64(s2)
    16c2:	0100                	addi	s0,sp,128
    16c4:	1f05                	addi	t5,t5,-31
    16c6:	0200                	addi	s0,sp,256
    16c8:	0304                	addi	s1,sp,384
    16ca:	04090003          	lb	zero,64(s2)
    16ce:	0100                	addi	s0,sp,128
    16d0:	1505                	addi	a0,a0,-31
    16d2:	0200                	addi	s0,sp,256
    16d4:	0304                	addi	s1,sp,384
    16d6:	04090003          	lb	zero,64(s2)
    16da:	0100                	addi	s0,sp,128
    16dc:	2005                	jal	16fc <result+0x80>
    16de:	0200                	addi	s0,sp,256
    16e0:	0304                	addi	s1,sp,384
    16e2:	04097f03          	0x4097f03
    16e6:	0100                	addi	s0,sp,128
    16e8:	1f05                	addi	t5,t5,-31
    16ea:	0200                	addi	s0,sp,256
    16ec:	0304                	addi	s1,sp,384
    16ee:	02090103          	lb	sp,32(s2)
    16f2:	0100                	addi	s0,sp,128
    16f4:	1505                	addi	a0,a0,-31
    16f6:	0200                	addi	s0,sp,256
    16f8:	0304                	addi	s1,sp,384
    16fa:	02090003          	lb	zero,32(s2)
    16fe:	0100                	addi	s0,sp,128
    1700:	2005                	jal	1720 <result+0xa4>
    1702:	0200                	addi	s0,sp,256
    1704:	0304                	addi	s1,sp,384
    1706:	0306                	slli	t1,t1,0x1
    1708:	097f                	0x97f
    170a:	0002                	c.slli64	zero
    170c:	0501                	addi	a0,a0,0
    170e:	000d                	c.nop	3
    1710:	0402                	c.slli64	s0
    1712:	09090303          	lb	t1,144(s2)
    1716:	0004                	0x4
    1718:	0501                	addi	a0,a0,0
    171a:	0402001b          	0x402001b
    171e:	00030603          	lb	a2,0(t1)
    1722:	0409                	addi	s0,s0,2
    1724:	0100                	addi	s0,sp,128
    1726:	1505                	addi	a0,a0,-31
    1728:	0200                	addi	s0,sp,256
    172a:	0304                	addi	s1,sp,384
    172c:	06090003          	lb	zero,96(s2)
    1730:	0100                	addi	s0,sp,128
    1732:	2005                	jal	1752 <result+0xd6>
    1734:	0200                	addi	s0,sp,256
    1736:	0304                	addi	s1,sp,384
    1738:	02097f03          	0x2097f03
    173c:	0100                	addi	s0,sp,128
    173e:	1505                	addi	a0,a0,-31
    1740:	0200                	addi	s0,sp,256
    1742:	0304                	addi	s1,sp,384
    1744:	02090103          	lb	sp,32(s2)
    1748:	0100                	addi	s0,sp,128
    174a:	2005                	jal	176a <result+0xee>
    174c:	0200                	addi	s0,sp,256
    174e:	0304                	addi	s1,sp,384
    1750:	0306                	slli	t1,t1,0x1
    1752:	097f                	0x97f
    1754:	0002                	c.slli64	zero
    1756:	0501                	addi	a0,a0,0
    1758:	000d                	c.nop	3
    175a:	0402                	c.slli64	s0
    175c:	090d0303          	lb	t1,144(s10)
    1760:	0002                	c.slli64	zero
    1762:	0501                	addi	a0,a0,0
    1764:	0402001b          	0x402001b
    1768:	00030603          	lb	a2,0(t1)
    176c:	0409                	addi	s0,s0,2
    176e:	0100                	addi	s0,sp,128
    1770:	1505                	addi	a0,a0,-31
    1772:	0200                	addi	s0,sp,256
    1774:	0304                	addi	s1,sp,384
    1776:	06090003          	lb	zero,96(s2)
    177a:	0100                	addi	s0,sp,128
    177c:	2005                	jal	179c <result+0x120>
    177e:	0200                	addi	s0,sp,256
    1780:	0304                	addi	s1,sp,384
    1782:	02097f03          	0x2097f03
    1786:	0100                	addi	s0,sp,128
    1788:	1505                	addi	a0,a0,-31
    178a:	0200                	addi	s0,sp,256
    178c:	0304                	addi	s1,sp,384
    178e:	02090103          	lb	sp,32(s2)
    1792:	0100                	addi	s0,sp,128
    1794:	2005                	jal	17b4 <result+0x138>
    1796:	0200                	addi	s0,sp,256
    1798:	0304                	addi	s1,sp,384
    179a:	0306                	slli	t1,t1,0x1
    179c:	097f                	0x97f
    179e:	0002                	c.slli64	zero
    17a0:	0501                	addi	a0,a0,0
    17a2:	000d                	c.nop	3
    17a4:	0402                	c.slli64	s0
    17a6:	09090303          	lb	t1,144(s2)
    17aa:	0002                	c.slli64	zero
    17ac:	0501                	addi	a0,a0,0
    17ae:	0019                	c.nop	6
    17b0:	0402                	c.slli64	s0
    17b2:	00030603          	lb	a2,0(t1)
    17b6:	0009                	c.nop	2
    17b8:	0100                	addi	s0,sp,128
    17ba:	2305                	jal	1cda <random_keys+0x276>
    17bc:	0200                	addi	s0,sp,256
    17be:	0304                	addi	s1,sp,384
    17c0:	04090003          	lb	zero,64(s2)
    17c4:	0100                	addi	s0,sp,128
    17c6:	1d05                	addi	s10,s10,-31
    17c8:	0200                	addi	s0,sp,256
    17ca:	0304                	addi	s1,sp,384
    17cc:	04090003          	lb	zero,64(s2)
    17d0:	0100                	addi	s0,sp,128
    17d2:	1305                	addi	t1,t1,-31
    17d4:	0200                	addi	s0,sp,256
    17d6:	0304                	addi	s1,sp,384
    17d8:	04090003          	lb	zero,64(s2)
    17dc:	0100                	addi	s0,sp,128
    17de:	2005                	jal	17fe <result+0x182>
    17e0:	0200                	addi	s0,sp,256
    17e2:	0304                	addi	s1,sp,384
    17e4:	04097f03          	0x4097f03
    17e8:	0100                	addi	s0,sp,128
    17ea:	1d05                	addi	s10,s10,-31
    17ec:	0200                	addi	s0,sp,256
    17ee:	0304                	addi	s1,sp,384
    17f0:	02090103          	lb	sp,32(s2)
    17f4:	0100                	addi	s0,sp,128
    17f6:	1305                	addi	t1,t1,-31
    17f8:	0200                	addi	s0,sp,256
    17fa:	0304                	addi	s1,sp,384
    17fc:	02090003          	lb	zero,32(s2)
    1800:	0100                	addi	s0,sp,128
    1802:	2005                	jal	1822 <result+0x1a6>
    1804:	0200                	addi	s0,sp,256
    1806:	0304                	addi	s1,sp,384
    1808:	0306                	slli	t1,t1,0x1
    180a:	097f                	0x97f
    180c:	0002                	c.slli64	zero
    180e:	0501                	addi	a0,a0,0
    1810:	000d                	c.nop	3
    1812:	0402                	c.slli64	s0
    1814:	09090303          	lb	t1,144(s2)
    1818:	0004                	0x4
    181a:	0501                	addi	a0,a0,0
    181c:	0015                	c.nop	5
    181e:	0402                	c.slli64	s0
    1820:	00030603          	lb	a2,0(t1)
    1824:	0409                	addi	s0,s0,2
    1826:	0100                	addi	s0,sp,128
    1828:	2005                	jal	1848 <result+0x1cc>
    182a:	0200                	addi	s0,sp,256
    182c:	0304                	addi	s1,sp,384
    182e:	06097f03          	0x6097f03
    1832:	0100                	addi	s0,sp,128
    1834:	1505                	addi	a0,a0,-31
    1836:	0200                	addi	s0,sp,256
    1838:	0304                	addi	s1,sp,384
    183a:	02090103          	lb	sp,32(s2)
    183e:	0100                	addi	s0,sp,128
    1840:	0d05                	addi	s10,s10,1
    1842:	0200                	addi	s0,sp,256
    1844:	0304                	addi	s1,sp,384
    1846:	0306                	slli	t1,t1,0x1
    1848:	0901                	addi	s2,s2,0
    184a:	0002                	c.slli64	zero
    184c:	0501                	addi	a0,a0,0
    184e:	0019                	c.nop	6
    1850:	0402                	c.slli64	s0
    1852:	00030603          	lb	a2,0(t1)
    1856:	0009                	c.nop	2
    1858:	0100                	addi	s0,sp,128
    185a:	1505                	addi	a0,a0,-31
    185c:	0200                	addi	s0,sp,256
    185e:	0304                	addi	s1,sp,384
    1860:	06090103          	lb	sp,96(s2)
    1864:	0100                	addi	s0,sp,128
    1866:	0200                	addi	s0,sp,256
    1868:	0304                	addi	s1,sp,384
    186a:	04097f03          	0x4097f03
    186e:	0100                	addi	s0,sp,128
    1870:	0d05                	addi	s10,s10,1
    1872:	0200                	addi	s0,sp,256
    1874:	0304                	addi	s1,sp,384
    1876:	0306                	slli	t1,t1,0x1
    1878:	0901                	addi	s2,s2,0
    187a:	0002                	c.slli64	zero
    187c:	0501                	addi	a0,a0,0
    187e:	0015                	c.nop	5
    1880:	0402                	c.slli64	s0
    1882:	00030603          	lb	a2,0(t1)
    1886:	0409                	addi	s0,s0,2
    1888:	0100                	addi	s0,sp,128
    188a:	1605                	addi	a2,a2,-31
    188c:	0200                	addi	s0,sp,256
    188e:	0304                	addi	s1,sp,384
    1890:	04090303          	lb	t1,64(s2)
    1894:	0100                	addi	s0,sp,128
    1896:	1505                	addi	a0,a0,-31
    1898:	0200                	addi	s0,sp,256
    189a:	0304                	addi	s1,sp,384
    189c:	02097d03          	0x2097d03
    18a0:	0100                	addi	s0,sp,128
    18a2:	0d05                	addi	s10,s10,1
    18a4:	0200                	addi	s0,sp,256
    18a6:	0304                	addi	s1,sp,384
    18a8:	0306                	slli	t1,t1,0x1
    18aa:	0901                	addi	s2,s2,0
    18ac:	0004                	0x4
    18ae:	0501                	addi	a0,a0,0
    18b0:	0019                	c.nop	6
    18b2:	0402                	c.slli64	s0
    18b4:	00030603          	lb	a2,0(t1)
    18b8:	0009                	c.nop	2
    18ba:	0100                	addi	s0,sp,128
    18bc:	1505                	addi	a0,a0,-31
    18be:	0200                	addi	s0,sp,256
    18c0:	0304                	addi	s1,sp,384
    18c2:	04090003          	lb	zero,64(s2)
    18c6:	0100                	addi	s0,sp,128
    18c8:	0d05                	addi	s10,s10,1
    18ca:	0200                	addi	s0,sp,256
    18cc:	0304                	addi	s1,sp,384
    18ce:	0306                	slli	t1,t1,0x1
    18d0:	0901                	addi	s2,s2,0
    18d2:	0004                	0x4
    18d4:	0501                	addi	a0,a0,0
    18d6:	0015                	c.nop	5
    18d8:	0402                	c.slli64	s0
    18da:	00030603          	lb	a2,0(t1)
    18de:	0009                	c.nop	2
    18e0:	0100                	addi	s0,sp,128
    18e2:	0d05                	addi	s10,s10,1
    18e4:	0200                	addi	s0,sp,256
    18e6:	0304                	addi	s1,sp,384
    18e8:	0306                	slli	t1,t1,0x1
    18ea:	0901                	addi	s2,s2,0
    18ec:	0008                	0x8
    18ee:	0501                	addi	a0,a0,0
    18f0:	0020                	addi	s0,sp,8
    18f2:	0402                	c.slli64	s0
    18f4:	097a0303          	lb	t1,151(s4)
    18f8:	0000                	unimp
    18fa:	0501                	addi	a0,a0,0
    18fc:	030d                	addi	t1,t1,3
    18fe:	090c                	addi	a1,sp,144
    1900:	0004                	0x4
    1902:	0501                	addi	a0,a0,0
    1904:	0003061b          	0x3061b
    1908:	0009                	c.nop	2
    190a:	0100                	addi	s0,sp,128
    190c:	2005                	jal	192c <ti_2+0x58>
    190e:	08090003          	lb	zero,128(s2)
    1912:	0100                	addi	s0,sp,128
    1914:	1005                	c.nop	-31
    1916:	04090003          	lb	zero,64(s2)
    191a:	0100                	addi	s0,sp,128
    191c:	1e05                	addi	t3,t3,-31
    191e:	0200                	addi	s0,sp,256
    1920:	0204                	addi	s1,sp,256
    1922:	0306                	slli	t1,t1,0x1
    1924:	097f                	0x97f
    1926:	0004                	0x4
    1928:	0501                	addi	a0,a0,0
    192a:	000d                	c.nop	3
    192c:	0402                	c.slli64	s0
    192e:	090d0303          	lb	t1,144(s10)
    1932:	0004                	0x4
    1934:	0501                	addi	a0,a0,0
    1936:	0020                	addi	s0,sp,8
    1938:	0402                	c.slli64	s0
    193a:	00030603          	lb	a2,0(t1)
    193e:	0009                	c.nop	2
    1940:	0100                	addi	s0,sp,128
    1942:	0200                	addi	s0,sp,256
    1944:	0304                	addi	s1,sp,384
    1946:	02097f03          	0x2097f03
    194a:	0100                	addi	s0,sp,128
    194c:	0200                	addi	s0,sp,256
    194e:	0304                	addi	s1,sp,384
    1950:	04090103          	lb	sp,64(s2)
    1954:	0100                	addi	s0,sp,128
    1956:	2505                	jal	1f76 <_bss_end+0x1a>
    1958:	0200                	addi	s0,sp,256
    195a:	0304                	addi	s1,sp,384
    195c:	04090003          	lb	zero,64(s2)
    1960:	0100                	addi	s0,sp,128
    1962:	1505                	addi	a0,a0,-31
    1964:	0200                	addi	s0,sp,256
    1966:	0304                	addi	s1,sp,384
    1968:	04090003          	lb	zero,64(s2)
    196c:	0100                	addi	s0,sp,128
    196e:	2005                	jal	198e <ti_2+0xba>
    1970:	0200                	addi	s0,sp,256
    1972:	0304                	addi	s1,sp,384
    1974:	0306                	slli	t1,t1,0x1
    1976:	097f                	0x97f
    1978:	0004                	0x4
    197a:	0501                	addi	a0,a0,0
    197c:	0328                	addi	a0,sp,392
    197e:	090c                	addi	a1,sp,144
    1980:	0002                	c.slli64	zero
    1982:	0501                	addi	a0,a0,0
    1984:	0305                	addi	t1,t1,1
    1986:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    198a:	0501                	addi	a0,a0,0
    198c:	0628                	addi	a0,sp,776
    198e:	00097d03          	0x97d03
    1992:	0100                	addi	s0,sp,128
    1994:	36090003          	lb	zero,864(s2)
    1998:	0100                	addi	s0,sp,128
    199a:	0905                	addi	s2,s2,1
    199c:	04090303          	lb	t1,64(s2)
    19a0:	0100                	addi	s0,sp,128
    19a2:	10090103          	lb	sp,256(s2)
    19a6:	0100                	addi	s0,sp,128
    19a8:	0a097f03          	0xa097f03
    19ac:	0100                	addi	s0,sp,128
    19ae:	0505                	addi	a0,a0,1
    19b0:	0306                	slli	t1,t1,0x1
    19b2:	0901                	addi	s2,s2,0
    19b4:	006c                	addi	a1,sp,12
    19b6:	0501                	addi	a0,a0,0
    19b8:	0610                	addi	a2,sp,768
    19ba:	00090603          	lb	a2,0(s2)
    19be:	0100                	addi	s0,sp,128
    19c0:	0905                	addi	s2,s2,1
    19c2:	04097a03          	0x4097a03
    19c6:	0100                	addi	s0,sp,128
    19c8:	02090603          	lb	a2,32(s2)
    19cc:	0100                	addi	s0,sp,128
    19ce:	0e05                	addi	t3,t3,1
    19d0:	0e090503          	lb	a0,224(s2)
    19d4:	0100                	addi	s0,sp,128
    19d6:	0905                	addi	s2,s2,1
    19d8:	0a097503          	0xa097503
    19dc:	0100                	addi	s0,sp,128
    19de:	0505                	addi	a0,a0,1
    19e0:	0306                	slli	t1,t1,0x1
    19e2:	0902                	c.slli64	s2
    19e4:	0064                	addi	s1,sp,12
    19e6:	0301                	addi	t1,t1,0
    19e8:	0901                	addi	s2,s2,0
    19ea:	0000                	unimp
    19ec:	0301                	addi	t1,t1,0
    19ee:	0901                	addi	s2,s2,0
    19f0:	0000                	unimp
    19f2:	0301                	addi	t1,t1,0
    19f4:	0901                	addi	s2,s2,0
    19f6:	0000                	unimp
    19f8:	0301                	addi	t1,t1,0
    19fa:	0901                	addi	s2,s2,0
    19fc:	0000                	unimp
    19fe:	0301                	addi	t1,t1,0
    1a00:	0901                	addi	s2,s2,0
    1a02:	0000                	unimp
    1a04:	0301                	addi	t1,t1,0
    1a06:	0901                	addi	s2,s2,0
    1a08:	0000                	unimp
    1a0a:	0301                	addi	t1,t1,0
    1a0c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1a10:	0301                	addi	t1,t1,0
    1a12:	0901                	addi	s2,s2,0
    1a14:	0000                	unimp
    1a16:	0501                	addi	a0,a0,0
    1a18:	060e                	slli	a2,a2,0x3
    1a1a:	00090003          	lb	zero,0(s2)
    1a1e:	0100                	addi	s0,sp,128
    1a20:	0505                	addi	a0,a0,1
    1a22:	0306                	slli	t1,t1,0x1
    1a24:	0902                	c.slli64	s2
    1a26:	0004                	0x4
    1a28:	0501                	addi	a0,a0,0
    1a2a:	0003060b          	0x3060b
    1a2e:	0009                	c.nop	2
    1a30:	0100                	addi	s0,sp,128
    1a32:	1005                	c.nop	-31
    1a34:	0200                	addi	s0,sp,256
    1a36:	0104                	addi	s1,sp,128
    1a38:	0306                	slli	t1,t1,0x1
    1a3a:	0900                	addi	s0,sp,144
    1a3c:	0002                	c.slli64	zero
    1a3e:	0501                	addi	a0,a0,0
    1a40:	0005                	c.nop	1
    1a42:	0402                	c.slli64	s0
    1a44:	0601                	addi	a2,a2,0
    1a46:	00090003          	lb	zero,0(s2)
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	06090603          	lb	a2,96(s2)
    1a50:	0100                	addi	s0,sp,128
    1a52:	1105                	addi	sp,sp,-31
    1a54:	0200                	addi	s0,sp,256
    1a56:	0104                	addi	s1,sp,128
    1a58:	0306                	slli	t1,t1,0x1
    1a5a:	0900                	addi	s0,sp,144
    1a5c:	0004                	0x4
    1a5e:	0501                	addi	a0,a0,0
    1a60:	0005                	c.nop	1
    1a62:	0402                	c.slli64	s0
    1a64:	0601                	addi	a2,a2,0
    1a66:	00090003          	lb	zero,0(s2)
    1a6a:	0100                	addi	s0,sp,128
    1a6c:	0b05                	addi	s6,s6,1
    1a6e:	04090703          	lb	a4,64(s2)
    1a72:	0100                	addi	s0,sp,128
    1a74:	1805                	addi	a6,a6,-31
    1a76:	02090103          	lb	sp,32(s2)
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	1005                	c.nop	-31
    1a7e:	0200                	addi	s0,sp,256
    1a80:	0104                	addi	s1,sp,128
    1a82:	0306                	slli	t1,t1,0x1
    1a84:	097f                	0x97f
    1a86:	0008                	0x8
    1a88:	0501                	addi	a0,a0,0
    1a8a:	0005                	c.nop	1
    1a8c:	0402                	c.slli64	s0
    1a8e:	0601                	addi	a2,a2,0
    1a90:	00090003          	lb	zero,0(s2)
    1a94:	0100                	addi	s0,sp,128
    1a96:	1605                	addi	a2,a2,-31
    1a98:	08090503          	lb	a0,128(s2)
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	1805                	addi	a6,a6,-31
    1aa0:	08090103          	lb	sp,128(s2)
    1aa4:	0100                	addi	s0,sp,128
    1aa6:	1005                	c.nop	-31
    1aa8:	0200                	addi	s0,sp,256
    1aaa:	0104                	addi	s1,sp,128
    1aac:	0306                	slli	t1,t1,0x1
    1aae:	097f                	0x97f
    1ab0:	0008                	0x8
    1ab2:	0501                	addi	a0,a0,0
    1ab4:	0005                	c.nop	1
    1ab6:	0402                	c.slli64	s0
    1ab8:	0601                	addi	a2,a2,0
    1aba:	00090003          	lb	zero,0(s2)
    1abe:	0100                	addi	s0,sp,128
    1ac0:	0306                	slli	t1,t1,0x1
    1ac2:	0905                	addi	s2,s2,1
    1ac4:	0004                	0x4
    1ac6:	0501                	addi	a0,a0,0
    1ac8:	061a                	slli	a2,a2,0x6
    1aca:	00090303          	lb	t1,0(s2)
    1ace:	0100                	addi	s0,sp,128
    1ad0:	0a05                	addi	s4,s4,1
    1ad2:	06097d03          	0x6097d03
    1ad6:	0100                	addi	s0,sp,128
    1ad8:	0505                	addi	a0,a0,1
    1ada:	0306                	slli	t1,t1,0x1
    1adc:	000c0903          	lb	s2,0(s8)
    1ae0:	0501                	addi	a0,a0,0
    1ae2:	0618                	addi	a4,sp,768
    1ae4:	02090103          	lb	sp,32(s2)
    1ae8:	0100                	addi	s0,sp,128
    1aea:	1405                	addi	s0,s0,-31
    1aec:	0200                	addi	s0,sp,256
    1aee:	0104                	addi	s1,sp,128
    1af0:	0306                	slli	t1,t1,0x1
    1af2:	097f                	0x97f
    1af4:	0008                	0x8
    1af6:	0501                	addi	a0,a0,0
    1af8:	0005                	c.nop	1
    1afa:	0402                	c.slli64	s0
    1afc:	0601                	addi	a2,a2,0
    1afe:	00090003          	lb	zero,0(s2)
    1b02:	0100                	addi	s0,sp,128
    1b04:	0306                	slli	t1,t1,0x1
    1b06:	0906                	slli	s2,s2,0x1
    1b08:	0004                	0x4
    1b0a:	0501                	addi	a0,a0,0
    1b0c:	060a                	slli	a2,a2,0x2
    1b0e:	00090003          	lb	zero,0(s2)
    1b12:	0100                	addi	s0,sp,128
    1b14:	0505                	addi	a0,a0,1
    1b16:	0306                	slli	t1,t1,0x1
    1b18:	0904                	addi	s1,sp,144
    1b1a:	000c                	0xc
    1b1c:	0501                	addi	a0,a0,0
    1b1e:	061a                	slli	a2,a2,0x6
    1b20:	06090003          	lb	zero,96(s2)
    1b24:	0100                	addi	s0,sp,128
    1b26:	1805                	addi	a6,a6,-31
    1b28:	02090103          	lb	sp,32(s2)
    1b2c:	0100                	addi	s0,sp,128
    1b2e:	1405                	addi	s0,s0,-31
    1b30:	0200                	addi	s0,sp,256
    1b32:	0104                	addi	s1,sp,128
    1b34:	0306                	slli	t1,t1,0x1
    1b36:	097f                	0x97f
    1b38:	0008                	0x8
    1b3a:	0501                	addi	a0,a0,0
    1b3c:	0005                	c.nop	1
    1b3e:	0402                	c.slli64	s0
    1b40:	0601                	addi	a2,a2,0
    1b42:	00090003          	lb	zero,0(s2)
    1b46:	0100                	addi	s0,sp,128
    1b48:	0306                	slli	t1,t1,0x1
    1b4a:	0905                	addi	s2,s2,1
    1b4c:	0004                	0x4
    1b4e:	0501                	addi	a0,a0,0
    1b50:	060a                	slli	a2,a2,0x2
    1b52:	00090003          	lb	zero,0(s2)
    1b56:	0100                	addi	s0,sp,128
    1b58:	0505                	addi	a0,a0,1
    1b5a:	0306                	slli	t1,t1,0x1
    1b5c:	000a0903          	lb	s2,0(s4)
    1b60:	0501                	addi	a0,a0,0
    1b62:	0003060b          	0x3060b
    1b66:	0209                	addi	tp,tp,2
    1b68:	0100                	addi	s0,sp,128
    1b6a:	1805                	addi	a6,a6,-31
    1b6c:	02090003          	lb	zero,32(s2)
    1b70:	0100                	addi	s0,sp,128
    1b72:	1005                	c.nop	-31
    1b74:	0200                	addi	s0,sp,256
    1b76:	0104                	addi	s1,sp,128
    1b78:	0306                	slli	t1,t1,0x1
    1b7a:	0900                	addi	s0,sp,144
    1b7c:	0004                	0x4
    1b7e:	0501                	addi	a0,a0,0
    1b80:	0005                	c.nop	1
    1b82:	0402                	c.slli64	s0
    1b84:	0601                	addi	a2,a2,0
    1b86:	00090003          	lb	zero,0(s2)
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	0306                	slli	t1,t1,0x1
    1b8e:	0906                	slli	s2,s2,0x1
    1b90:	0004                	0x4
    1b92:	0501                	addi	a0,a0,0
    1b94:	060a                	slli	a2,a2,0x2
    1b96:	00090003          	lb	zero,0(s2)
    1b9a:	0100                	addi	s0,sp,128
    1b9c:	0505                	addi	a0,a0,1
    1b9e:	0306                	slli	t1,t1,0x1
    1ba0:	0904                	addi	s1,sp,144
    1ba2:	0008                	0x8
    1ba4:	0501                	addi	a0,a0,0
    1ba6:	061a                	slli	a2,a2,0x6
    1ba8:	00090003          	lb	zero,0(s2)
    1bac:	0100                	addi	s0,sp,128
    1bae:	1805                	addi	a6,a6,-31
    1bb0:	0a090103          	lb	sp,160(s2)
    1bb4:	0100                	addi	s0,sp,128
    1bb6:	1405                	addi	s0,s0,-31
    1bb8:	0200                	addi	s0,sp,256
    1bba:	0104                	addi	s1,sp,128
    1bbc:	0306                	slli	t1,t1,0x1
    1bbe:	097f                	0x97f
    1bc0:	0008                	0x8
    1bc2:	0501                	addi	a0,a0,0
    1bc4:	0005                	c.nop	1
    1bc6:	0402                	c.slli64	s0
    1bc8:	0601                	addi	a2,a2,0
    1bca:	02090003          	lb	zero,32(s2)
    1bce:	0100                	addi	s0,sp,128
    1bd0:	1a05                	addi	s4,s4,-31
    1bd2:	04090503          	lb	a0,64(s2)
    1bd6:	0100                	addi	s0,sp,128
    1bd8:	1805                	addi	a6,a6,-31
    1bda:	04090103          	lb	sp,64(s2)
    1bde:	0100                	addi	s0,sp,128
    1be0:	1a05                	addi	s4,s4,-31
    1be2:	08097f03          	0x8097f03
    1be6:	0100                	addi	s0,sp,128
    1be8:	1405                	addi	s0,s0,-31
    1bea:	0200                	addi	s0,sp,256
    1bec:	0104                	addi	s1,sp,128
    1bee:	0306                	slli	t1,t1,0x1
    1bf0:	0900                	addi	s0,sp,144
    1bf2:	0008                	0x8
    1bf4:	0501                	addi	a0,a0,0
    1bf6:	0005                	c.nop	1
    1bf8:	0402                	c.slli64	s0
    1bfa:	0601                	addi	a2,a2,0
    1bfc:	00090003          	lb	zero,0(s2)
    1c00:	0100                	addi	s0,sp,128
    1c02:	0306                	slli	t1,t1,0x1
    1c04:	0906                	slli	s2,s2,0x1
    1c06:	0004                	0x4
    1c08:	0301                	addi	t1,t1,0
    1c0a:	0902                	c.slli64	s2
    1c0c:	0000                	unimp
    1c0e:	0501                	addi	a0,a0,0
    1c10:	0601                	addi	a2,a2,0
    1c12:	00090103          	lb	sp,0(s2)
    1c16:	0100                	addi	s0,sp,128
    1c18:	0905                	addi	s2,s2,1
    1c1a:	0200                	addi	s0,sp,256
    1c1c:	0304                	addi	s1,sp,384
    1c1e:	0306                	slli	t1,t1,0x1
    1c20:	7fbd                	lui	t6,0xfffef
    1c22:	4009                	c.li	zero,2
    1c24:	0100                	addi	s0,sp,128
    1c26:	1205                	addi	tp,tp,-31
    1c28:	0200                	addi	s0,sp,256
    1c2a:	0304                	addi	s1,sp,384
    1c2c:	0306                	slli	t1,t1,0x1
    1c2e:	0900                	addi	s0,sp,144
    1c30:	0000                	unimp
    1c32:	0501                	addi	a0,a0,0
    1c34:	04020017          	auipc	zero,0x4020
    1c38:	7f030603          	lb	a2,2032(t1)
    1c3c:	0a09                	addi	s4,s4,2
    1c3e:	0100                	addi	s0,sp,128
    1c40:	0905                	addi	s2,s2,1
    1c42:	0200                	addi	s0,sp,256
    1c44:	0304                	addi	s1,sp,384
    1c46:	04090703          	lb	a4,64(s2)
    1c4a:	0100                	addi	s0,sp,128
    1c4c:	0e05                	addi	t3,t3,1
    1c4e:	0200                	addi	s0,sp,256
    1c50:	0304                	addi	s1,sp,384
    1c52:	0306                	slli	t1,t1,0x1
    1c54:	0900                	addi	s0,sp,144
    1c56:	0004                	0x4
    1c58:	0501                	addi	a0,a0,0
    1c5a:	0009                	c.nop	2
    1c5c:	0402                	c.slli64	s0
    1c5e:	01030603          	lb	a2,16(t1)
    1c62:	0a09                	addi	s4,s4,2
    1c64:	0100                	addi	s0,sp,128
    1c66:	0e05                	addi	t3,t3,1
    1c68:	0200                	addi	s0,sp,256
    1c6a:	0304                	addi	s1,sp,384
    1c6c:	0306                	slli	t1,t1,0x1
    1c6e:	0900                	addi	s0,sp,144
    1c70:	0000                	unimp
    1c72:	0501                	addi	a0,a0,0
    1c74:	0019                	c.nop	6
    1c76:	0402                	c.slli64	s0
    1c78:	7e030603          	lb	a2,2016(t1)
    1c7c:	0a09                	addi	s4,s4,2
    1c7e:	0100                	addi	s0,sp,128
    1c80:	0905                	addi	s2,s2,1
    1c82:	0200                	addi	s0,sp,256
    1c84:	0304                	addi	s1,sp,384
    1c86:	04090803          	lb	a6,64(s2)
    1c8a:	0100                	addi	s0,sp,128
    1c8c:	1b05                	addi	s6,s6,-31
    1c8e:	0200                	addi	s0,sp,256
    1c90:	0304                	addi	s1,sp,384
    1c92:	0306                	slli	t1,t1,0x1
    1c94:	0900                	addi	s0,sp,144
    1c96:	0004                	0x4
    1c98:	0501                	addi	a0,a0,0
    1c9a:	0018                	0x18
    1c9c:	0402                	c.slli64	s0
    1c9e:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1ca2:	0004                	0x4
    1ca4:	0501                	addi	a0,a0,0
    1ca6:	0402001b          	0x402001b
    1caa:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1cae:	0004                	0x4
    1cb0:	0501                	addi	a0,a0,0
    1cb2:	0018                	0x18
    1cb4:	0402                	c.slli64	s0
    1cb6:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1cba:	0002                	c.slli64	zero
    1cbc:	0501                	addi	a0,a0,0
    1cbe:	04020017          	auipc	zero,0x4020
    1cc2:	097f0303          	lb	t1,151(t5)
    1cc6:	0002                	c.slli64	zero
    1cc8:	0501                	addi	a0,a0,0
    1cca:	0018                	0x18
    1ccc:	0402                	c.slli64	s0
    1cce:	09010303          	lb	t1,144(sp)
    1cd2:	0002                	c.slli64	zero
    1cd4:	0501                	addi	a0,a0,0
    1cd6:	04020017          	auipc	zero,0x4020
    1cda:	7f030603          	lb	a2,2032(t1)
    1cde:	0209                	addi	tp,tp,2
    1ce0:	0100                	addi	s0,sp,128
    1ce2:	0905                	addi	s2,s2,1
    1ce4:	0200                	addi	s0,sp,256
    1ce6:	0304                	addi	s1,sp,384
    1ce8:	02090603          	lb	a2,32(s2)
    1cec:	0100                	addi	s0,sp,128
    1cee:	1805                	addi	a6,a6,-31
    1cf0:	0200                	addi	s0,sp,256
    1cf2:	0304                	addi	s1,sp,384
    1cf4:	0306                	slli	t1,t1,0x1
    1cf6:	0900                	addi	s0,sp,144
    1cf8:	0000                	unimp
    1cfa:	0501                	addi	a0,a0,0
    1cfc:	0402001b          	0x402001b
    1d00:	7f030603          	lb	a2,2032(t1)
    1d04:	0a09                	addi	s4,s4,2
    1d06:	0100                	addi	s0,sp,128
    1d08:	0905                	addi	s2,s2,1
    1d0a:	0200                	addi	s0,sp,256
    1d0c:	0304                	addi	s1,sp,384
    1d0e:	06090903          	lb	s2,96(s2)
    1d12:	0100                	addi	s0,sp,128
    1d14:	1c05                	addi	s8,s8,-31
    1d16:	0200                	addi	s0,sp,256
    1d18:	0304                	addi	s1,sp,384
    1d1a:	0306                	slli	t1,t1,0x1
    1d1c:	0900                	addi	s0,sp,144
    1d1e:	0000                	unimp
    1d20:	0501                	addi	a0,a0,0
    1d22:	0018                	0x18
    1d24:	0402                	c.slli64	s0
    1d26:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1d2a:	0002                	c.slli64	zero
    1d2c:	0501                	addi	a0,a0,0
    1d2e:	001f 0402 0603      	0x6030402001f
    1d34:	08097f03          	0x8097f03
    1d38:	0100                	addi	s0,sp,128
    1d3a:	0905                	addi	s2,s2,1
    1d3c:	0200                	addi	s0,sp,256
    1d3e:	0304                	addi	s1,sp,384
    1d40:	06090b03          	lb	s6,96(s2)
    1d44:	0100                	addi	s0,sp,128
    1d46:	1c05                	addi	s8,s8,-31
    1d48:	0200                	addi	s0,sp,256
    1d4a:	0304                	addi	s1,sp,384
    1d4c:	0306                	slli	t1,t1,0x1
    1d4e:	0900                	addi	s0,sp,144
    1d50:	0004                	0x4
    1d52:	0501                	addi	a0,a0,0
    1d54:	0018                	0x18
    1d56:	0402                	c.slli64	s0
    1d58:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1d5c:	0008                	0x8
    1d5e:	0501                	addi	a0,a0,0
    1d60:	001f 0402 0303      	0x3030402001f
    1d66:	097f                	0x97f
    1d68:	0002                	c.slli64	zero
    1d6a:	0501                	addi	a0,a0,0
    1d6c:	0018                	0x18
    1d6e:	0402                	c.slli64	s0
    1d70:	09010303          	lb	t1,144(sp)
    1d74:	0002                	c.slli64	zero
    1d76:	0501                	addi	a0,a0,0
    1d78:	001f 0402 0603      	0x6030402001f
    1d7e:	02097f03          	0x2097f03
    1d82:	0100                	addi	s0,sp,128
    1d84:	0905                	addi	s2,s2,1
    1d86:	0200                	addi	s0,sp,256
    1d88:	0304                	addi	s1,sp,384
    1d8a:	02090903          	lb	s2,32(s2)
    1d8e:	0100                	addi	s0,sp,128
    1d90:	1605                	addi	a2,a2,-31
    1d92:	0200                	addi	s0,sp,256
    1d94:	0304                	addi	s1,sp,384
    1d96:	0306                	slli	t1,t1,0x1
    1d98:	0900                	addi	s0,sp,144
    1d9a:	0000                	unimp
    1d9c:	0501                	addi	a0,a0,0
    1d9e:	001d                	c.nop	7
    1da0:	0402                	c.slli64	s0
    1da2:	097f0303          	lb	t1,151(t5)
    1da6:	0002                	c.slli64	zero
    1da8:	0501                	addi	a0,a0,0
    1daa:	0016                	c.slli	zero,0x5
    1dac:	0402                	c.slli64	s0
    1dae:	09010303          	lb	t1,144(sp)
    1db2:	0004                	0x4
    1db4:	0501                	addi	a0,a0,0
    1db6:	0402000f          	0x402000f
    1dba:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1dbe:	0004                	0x4
    1dc0:	0501                	addi	a0,a0,0
    1dc2:	001d                	c.nop	7
    1dc4:	0402                	c.slli64	s0
    1dc6:	7f030603          	lb	a2,2032(t1)
    1dca:	0409                	addi	s0,s0,2
    1dcc:	0100                	addi	s0,sp,128
    1dce:	0905                	addi	s2,s2,1
    1dd0:	0200                	addi	s0,sp,256
    1dd2:	0304                	addi	s1,sp,384
    1dd4:	02090b03          	lb	s6,32(s2)
    1dd8:	0100                	addi	s0,sp,128
    1dda:	1c05                	addi	s8,s8,-31
    1ddc:	0200                	addi	s0,sp,256
    1dde:	0304                	addi	s1,sp,384
    1de0:	0306                	slli	t1,t1,0x1
    1de2:	0900                	addi	s0,sp,144
    1de4:	0000                	unimp
    1de6:	0501                	addi	a0,a0,0
    1de8:	0018                	0x18
    1dea:	0402                	c.slli64	s0
    1dec:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1df0:	0004                	0x4
    1df2:	0501                	addi	a0,a0,0
    1df4:	001f 0402 0603      	0x6030402001f
    1dfa:	08097f03          	0x8097f03
    1dfe:	0100                	addi	s0,sp,128
    1e00:	0905                	addi	s2,s2,1
    1e02:	0200                	addi	s0,sp,256
    1e04:	0304                	addi	s1,sp,384
    1e06:	04090603          	lb	a2,64(s2)
    1e0a:	0100                	addi	s0,sp,128
    1e0c:	1805                	addi	a6,a6,-31
    1e0e:	0200                	addi	s0,sp,256
    1e10:	0304                	addi	s1,sp,384
    1e12:	0306                	slli	t1,t1,0x1
    1e14:	0900                	addi	s0,sp,144
    1e16:	0004                	0x4
    1e18:	0501                	addi	a0,a0,0
    1e1a:	001f 0402 0303      	0x3030402001f
    1e20:	0900                	addi	s0,sp,144
    1e22:	0004                	0x4
    1e24:	0501                	addi	a0,a0,0
    1e26:	0018                	0x18
    1e28:	0402                	c.slli64	s0
    1e2a:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1e2e:	0004                	0x4
    1e30:	0501                	addi	a0,a0,0
    1e32:	0021                	c.nop	8
    1e34:	0402                	c.slli64	s0
    1e36:	097f0303          	lb	t1,151(t5)
    1e3a:	0002                	c.slli64	zero
    1e3c:	0501                	addi	a0,a0,0
    1e3e:	0018                	0x18
    1e40:	0402                	c.slli64	s0
    1e42:	09010303          	lb	t1,144(sp)
    1e46:	0002                	c.slli64	zero
    1e48:	0501                	addi	a0,a0,0
    1e4a:	0021                	c.nop	8
    1e4c:	0402                	c.slli64	s0
    1e4e:	7f030603          	lb	a2,2032(t1)
    1e52:	0209                	addi	tp,tp,2
    1e54:	0100                	addi	s0,sp,128
    1e56:	4b05                	li	s6,1
    1e58:	02090c03          	lb	s8,32(s2)
    1e5c:	0100                	addi	s0,sp,128
    1e5e:	0505                	addi	a0,a0,1
    1e60:	00090203          	lb	tp,0(s2)
    1e64:	0100                	addi	s0,sp,128
    1e66:	00090103          	lb	sp,0(s2)
    1e6a:	0100                	addi	s0,sp,128
    1e6c:	00090203          	lb	tp,0(s2)
    1e70:	0100                	addi	s0,sp,128
    1e72:	4b05                	li	s6,1
    1e74:	0306                	slli	t1,t1,0x1
    1e76:	0000097b          	0x97b
    1e7a:	0501                	addi	a0,a0,0
    1e7c:	0309                	addi	t1,t1,2
    1e7e:	0905                	addi	s2,s2,1
    1e80:	000e                	c.slli	zero,0x3
    1e82:	0501                	addi	a0,a0,0
    1e84:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    1e88:	000e                	c.slli	zero,0x3
    1e8a:	0301                	addi	t1,t1,0
    1e8c:	0900                	addi	s0,sp,144
    1e8e:	0006                	c.slli	zero,0x1
    1e90:	0501                	addi	a0,a0,0
    1e92:	0309                	addi	t1,t1,2
    1e94:	0905                	addi	s2,s2,1
    1e96:	0004                	0x4
    1e98:	0501                	addi	a0,a0,0
    1e9a:	0605                	addi	a2,a2,1
    1e9c:	02090103          	lb	sp,32(s2)
    1ea0:	0100                	addi	s0,sp,128
    1ea2:	00090103          	lb	sp,0(s2)
    1ea6:	0100                	addi	s0,sp,128
    1ea8:	00090303          	lb	t1,0(s2)
    1eac:	0100                	addi	s0,sp,128
    1eae:	0c05                	addi	s8,s8,1
    1eb0:	0306                	slli	t1,t1,0x1
    1eb2:	0900                	addi	s0,sp,144
    1eb4:	0000                	unimp
    1eb6:	0501                	addi	a0,a0,0
    1eb8:	0605                	addi	a2,a2,1
    1eba:	12090403          	lb	s0,288(s2)
    1ebe:	0100                	addi	s0,sp,128
    1ec0:	1005                	c.nop	-31
    1ec2:	00090003          	lb	zero,0(s2)
    1ec6:	0100                	addi	s0,sp,128
    1ec8:	0c05                	addi	s8,s8,1
    1eca:	0306                	slli	t1,t1,0x1
    1ecc:	097c                	addi	a5,sp,156
    1ece:	0000                	unimp
    1ed0:	0501                	addi	a0,a0,0
    1ed2:	0305                	addi	t1,t1,1
    1ed4:	0904                	addi	s1,sp,144
    1ed6:	0002                	c.slli64	zero
    1ed8:	0501                	addi	a0,a0,0
    1eda:	0009                	c.nop	2
    1edc:	0402                	c.slli64	s0
    1ede:	01030603          	lb	a2,16(t1)
    1ee2:	0409                	addi	s0,s0,2
    1ee4:	0100                	addi	s0,sp,128
    1ee6:	2405                	jal	2106 <_min_stack+0x106>
    1ee8:	0200                	addi	s0,sp,256
    1eea:	0304                	addi	s1,sp,384
    1eec:	0306                	slli	t1,t1,0x1
    1eee:	0900                	addi	s0,sp,144
    1ef0:	0004                	0x4
    1ef2:	0501                	addi	a0,a0,0
    1ef4:	0402001b          	0x402001b
    1ef8:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1efc:	0004                	0x4
    1efe:	0501                	addi	a0,a0,0
    1f00:	0011                	c.nop	4
    1f02:	0402                	c.slli64	s0
    1f04:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    1f08:	0008                	0x8
    1f0a:	0501                	addi	a0,a0,0
    1f0c:	0018                	0x18
    1f0e:	0402                	c.slli64	s0
    1f10:	7f030603          	lb	a2,2032(t1)
    1f14:	0209                	addi	tp,tp,2
    1f16:	0100                	addi	s0,sp,128
    1f18:	1005                	c.nop	-31
    1f1a:	0200                	addi	s0,sp,256
    1f1c:	0304                	addi	s1,sp,384
    1f1e:	00090003          	lb	zero,0(s2)
    1f22:	0100                	addi	s0,sp,128
    1f24:	0505                	addi	a0,a0,1
    1f26:	0200                	addi	s0,sp,256
    1f28:	0304                	addi	s1,sp,384
    1f2a:	0306                	slli	t1,t1,0x1
    1f2c:	0900                	addi	s0,sp,144
    1f2e:	0000                	unimp
    1f30:	0601                	addi	a2,a2,0
    1f32:	04090603          	lb	a2,64(s2)
    1f36:	0100                	addi	s0,sp,128
    1f38:	0a05                	addi	s4,s4,1
    1f3a:	0306                	slli	t1,t1,0x1
    1f3c:	0900                	addi	s0,sp,144
    1f3e:	0000                	unimp
    1f40:	0501                	addi	a0,a0,0
    1f42:	0605                	addi	a2,a2,1
    1f44:	10090203          	lb	tp,256(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	1a05                	addi	s4,s4,-31
    1f4c:	0306                	slli	t1,t1,0x1
    1f4e:	0900                	addi	s0,sp,144
    1f50:	0000                	unimp
    1f52:	0501                	addi	a0,a0,0
    1f54:	0014                	0x14
    1f56:	0402                	c.slli64	s0
    1f58:	0601                	addi	a2,a2,0
    1f5a:	08090003          	lb	zero,128(s2)
    1f5e:	0100                	addi	s0,sp,128
    1f60:	0505                	addi	a0,a0,1
    1f62:	0200                	addi	s0,sp,256
    1f64:	0104                	addi	s1,sp,128
    1f66:	0306                	slli	t1,t1,0x1
    1f68:	0900                	addi	s0,sp,144
    1f6a:	0000                	unimp
    1f6c:	0501                	addi	a0,a0,0
    1f6e:	0301                	addi	t1,t1,0
    1f70:	0909                	addi	s2,s2,2
    1f72:	0004                	0x4
    1f74:	0501                	addi	a0,a0,0
    1f76:	0009                	c.nop	2
    1f78:	0402                	c.slli64	s0
    1f7a:	78030603          	lb	a2,1920(t1)
    1f7e:	1009                	c.nop	-30
    1f80:	0100                	addi	s0,sp,128
    1f82:	1905                	addi	s2,s2,-31
    1f84:	0200                	addi	s0,sp,256
    1f86:	0304                	addi	s1,sp,384
    1f88:	0306                	slli	t1,t1,0x1
    1f8a:	0900                	addi	s0,sp,144
    1f8c:	0000                	unimp
    1f8e:	0501                	addi	a0,a0,0
    1f90:	001f 0402 0303      	0x3030402001f
    1f96:	097f                	0x97f
    1f98:	0008                	0x8
    1f9a:	0501                	addi	a0,a0,0
    1f9c:	0015                	c.nop	5
    1f9e:	0402                	c.slli64	s0
    1fa0:	09010303          	lb	t1,144(sp)
    1fa4:	0004                	0x4
    1fa6:	0501                	addi	a0,a0,0
    1fa8:	001f 0402 0603      	0x6030402001f
    1fae:	04097f03          	0x4097f03
    1fb2:	0100                	addi	s0,sp,128
    1fb4:	6c05                	lui	s8,0x1
    1fb6:	02090c03          	lb	s8,32(s2)
    1fba:	0100                	addi	s0,sp,128
    1fbc:	0505                	addi	a0,a0,1
    1fbe:	00090203          	lb	tp,0(s2)
    1fc2:	0100                	addi	s0,sp,128
    1fc4:	00090103          	lb	sp,0(s2)
    1fc8:	0100                	addi	s0,sp,128
    1fca:	00090103          	lb	sp,0(s2)
    1fce:	0100                	addi	s0,sp,128
    1fd0:	00090103          	lb	sp,0(s2)
    1fd4:	0100                	addi	s0,sp,128
    1fd6:	00090103          	lb	sp,0(s2)
    1fda:	0100                	addi	s0,sp,128
    1fdc:	00090103          	lb	sp,0(s2)
    1fe0:	0100                	addi	s0,sp,128
    1fe2:	00090303          	lb	t1,0(s2)
    1fe6:	0100                	addi	s0,sp,128
    1fe8:	6c05                	lui	s8,0x1
    1fea:	0306                	slli	t1,t1,0x1
    1fec:	0976                	slli	s2,s2,0x1d
    1fee:	0000                	unimp
    1ff0:	0501                	addi	a0,a0,0
    1ff2:	031e                	slli	t1,t1,0x7
    1ff4:	0911                	addi	s2,s2,4
    1ff6:	0008                	0x8
    1ff8:	0501                	addi	a0,a0,0
    1ffa:	036c                	addi	a1,sp,396
    1ffc:	0006096f          	jal	s2,61ffc <_stack_start+0x51ffc>
    2000:	0501                	addi	a0,a0,0
    2002:	0309                	addi	t1,t1,2
    2004:	090a                	slli	s2,s2,0x2
    2006:	000a                	c.slli	zero,0x2
    2008:	0501                	addi	a0,a0,0
    200a:	036c                	addi	a1,sp,396
    200c:	0976                	slli	s2,s2,0x1d
    200e:	0004                	0x4
    2010:	0501                	addi	a0,a0,0
    2012:	0309                	addi	t1,t1,2
    2014:	090a                	slli	s2,s2,0x2
    2016:	0004                	0x4
    2018:	0501                	addi	a0,a0,0
    201a:	036c                	addi	a1,sp,396
    201c:	0976                	slli	s2,s2,0x1d
    201e:	0004                	0x4
    2020:	0301                	addi	t1,t1,0
    2022:	0900                	addi	s0,sp,144
    2024:	0008                	0x8
    2026:	0501                	addi	a0,a0,0
    2028:	030a                	slli	t1,t1,0x2
    202a:	090e                	slli	s2,s2,0x3
    202c:	0002                	c.slli64	zero
    202e:	0501                	addi	a0,a0,0
    2030:	0309                	addi	t1,t1,2
    2032:	097c                	addi	a5,sp,156
    2034:	0004                	0x4
    2036:	0501                	addi	a0,a0,0
    2038:	0605                	addi	a2,a2,1
    203a:	04090403          	lb	s0,64(s2)
    203e:	0100                	addi	s0,sp,128
    2040:	0a05                	addi	s4,s4,1
    2042:	0306                	slli	t1,t1,0x1
    2044:	0900                	addi	s0,sp,144
    2046:	0000                	unimp
    2048:	0501                	addi	a0,a0,0
    204a:	0605                	addi	a2,a2,1
    204c:	12090303          	lb	t1,288(s2)
    2050:	0100                	addi	s0,sp,128
    2052:	0b05                	addi	s6,s6,1
    2054:	0306                	slli	t1,t1,0x1
    2056:	0900                	addi	s0,sp,144
    2058:	0004                	0x4
    205a:	0501                	addi	a0,a0,0
    205c:	0014                	0x14
    205e:	0402                	c.slli64	s0
    2060:	0601                	addi	a2,a2,0
    2062:	02090003          	lb	zero,32(s2)
    2066:	0100                	addi	s0,sp,128
    2068:	0505                	addi	a0,a0,1
    206a:	0200                	addi	s0,sp,256
    206c:	0104                	addi	s1,sp,128
    206e:	0306                	slli	t1,t1,0x1
    2070:	0900                	addi	s0,sp,144
    2072:	0000                	unimp
    2074:	0501                	addi	a0,a0,0
    2076:	0316                	slli	t1,t1,0x5
    2078:	0906                	slli	s2,s2,0x1
    207a:	0004                	0x4
    207c:	0501                	addi	a0,a0,0
    207e:	030c                	addi	a1,sp,384
    2080:	097f                	0x97f
    2082:	0006                	c.slli	zero,0x1
    2084:	0501                	addi	a0,a0,0
    2086:	0011                	c.nop	4
    2088:	0402                	c.slli64	s0
    208a:	0601                	addi	a2,a2,0
    208c:	02090003          	lb	zero,32(s2)
    2090:	0100                	addi	s0,sp,128
    2092:	0505                	addi	a0,a0,1
    2094:	0200                	addi	s0,sp,256
    2096:	0104                	addi	s1,sp,128
    2098:	0306                	slli	t1,t1,0x1
    209a:	0900                	addi	s0,sp,144
    209c:	0000                	unimp
    209e:	0601                	addi	a2,a2,0
    20a0:	04090803          	lb	a6,64(s2)
    20a4:	0100                	addi	s0,sp,128
    20a6:	0905                	addi	s2,s2,1
    20a8:	0306                	slli	t1,t1,0x1
    20aa:	0900                	addi	s0,sp,144
    20ac:	0000                	unimp
    20ae:	0501                	addi	a0,a0,0
    20b0:	0605                	addi	a2,a2,1
    20b2:	0c090403          	lb	s0,192(s2)
    20b6:	0100                	addi	s0,sp,128
    20b8:	0a05                	addi	s4,s4,1
    20ba:	0306                	slli	t1,t1,0x1
    20bc:	0900                	addi	s0,sp,144
    20be:	0000                	unimp
    20c0:	0501                	addi	a0,a0,0
    20c2:	0605                	addi	a2,a2,1
    20c4:	0c090103          	lb	sp,192(s2)
    20c8:	0100                	addi	s0,sp,128
    20ca:	1405                	addi	s0,s0,-31
    20cc:	0200                	addi	s0,sp,256
    20ce:	0104                	addi	s1,sp,128
    20d0:	02090003          	lb	zero,32(s2)
    20d4:	0100                	addi	s0,sp,128
    20d6:	0505                	addi	a0,a0,1
    20d8:	0200                	addi	s0,sp,256
    20da:	0104                	addi	s1,sp,128
    20dc:	0306                	slli	t1,t1,0x1
    20de:	0900                	addi	s0,sp,144
    20e0:	0000                	unimp
    20e2:	0501                	addi	a0,a0,0
    20e4:	0301                	addi	t1,t1,0
    20e6:	00040907          	0x40907
    20ea:	0501                	addi	a0,a0,0
    20ec:	0009                	c.nop	2
    20ee:	0402                	c.slli64	s0
    20f0:	68030603          	lb	a2,1664(t1)
    20f4:	1609                	addi	a2,a2,-30
    20f6:	0100                	addi	s0,sp,128
    20f8:	1905                	addi	s2,s2,-31
    20fa:	0200                	addi	s0,sp,256
    20fc:	0304                	addi	s1,sp,384
    20fe:	0306                	slli	t1,t1,0x1
    2100:	0900                	addi	s0,sp,144
    2102:	0000                	unimp
    2104:	0501                	addi	a0,a0,0
    2106:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    210a:	097f0303          	lb	t1,151(t5)
    210e:	0008                	0x8
    2110:	0501                	addi	a0,a0,0
    2112:	0015                	c.nop	5
    2114:	0402                	c.slli64	s0
    2116:	09010303          	lb	t1,144(sp)
    211a:	0004                	0x4
    211c:	0501                	addi	a0,a0,0
    211e:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2122:	7f030603          	lb	a2,2032(t1)
    2126:	0409                	addi	s0,s0,2
    2128:	0100                	addi	s0,sp,128
    212a:	0905                	addi	s2,s2,1
    212c:	02090603          	lb	a2,32(s2)
    2130:	0100                	addi	s0,sp,128
    2132:	0e05                	addi	t3,t3,1
    2134:	0306                	slli	t1,t1,0x1
    2136:	0900                	addi	s0,sp,144
    2138:	0000                	unimp
    213a:	0501                	addi	a0,a0,0
    213c:	0900030b          	0x900030b
    2140:	0002                	c.slli64	zero
    2142:	0501                	addi	a0,a0,0
    2144:	060d                	addi	a2,a2,3
    2146:	04090303          	lb	t1,64(s2)
    214a:	0100                	addi	s0,sp,128
    214c:	1905                	addi	s2,s2,-31
    214e:	0306                	slli	t1,t1,0x1
    2150:	0900                	addi	s0,sp,144
    2152:	0000                	unimp
    2154:	0501                	addi	a0,a0,0
    2156:	09000313          	li	t1,144
    215a:	0004                	0x4
    215c:	0501                	addi	a0,a0,0
    215e:	0018                	0x18
    2160:	0402                	c.slli64	s0
    2162:	0602                	c.slli64	a2
    2164:	02097c03          	0x2097c03
    2168:	0100                	addi	s0,sp,128
    216a:	0905                	addi	s2,s2,1
    216c:	0200                	addi	s0,sp,256
    216e:	0304                	addi	s1,sp,384
    2170:	06090e03          	lb	t3,96(s2)
    2174:	0100                	addi	s0,sp,128
    2176:	1905                	addi	s2,s2,-31
    2178:	0200                	addi	s0,sp,256
    217a:	0304                	addi	s1,sp,384
    217c:	0306                	slli	t1,t1,0x1
    217e:	0900                	addi	s0,sp,144
    2180:	0000                	unimp
    2182:	0501                	addi	a0,a0,0
    2184:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2188:	097f0303          	lb	t1,151(t5)
    218c:	0008                	0x8
    218e:	0501                	addi	a0,a0,0
    2190:	0015                	c.nop	5
    2192:	0402                	c.slli64	s0
    2194:	09010303          	lb	t1,144(sp)
    2198:	0004                	0x4
    219a:	0501                	addi	a0,a0,0
    219c:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    21a0:	7f030603          	lb	a2,2032(t1)
    21a4:	0409                	addi	s0,s0,2
    21a6:	0100                	addi	s0,sp,128
    21a8:	0209                	addi	tp,tp,2
    21aa:	0000                	unimp
    21ac:	0101                	addi	sp,sp,0
    21ae:	0b05                	addi	s6,s6,1
    21b0:	0500                	addi	s0,sp,640
    21b2:	0002                	c.slli64	zero
    21b4:	0300000f          	fence	rw,unknown
    21b8:	04d5                	addi	s1,s1,21
    21ba:	0501                	addi	a0,a0,0
    21bc:	0305                	addi	t1,t1,1
    21be:	0901                	addi	s2,s2,0
    21c0:	0000                	unimp
    21c2:	0301                	addi	t1,t1,0
    21c4:	0901                	addi	s2,s2,0
    21c6:	0000                	unimp
    21c8:	0301                	addi	t1,t1,0
    21ca:	0901                	addi	s2,s2,0
    21cc:	0000                	unimp
    21ce:	0301                	addi	t1,t1,0
    21d0:	0901                	addi	s2,s2,0
    21d2:	0000                	unimp
    21d4:	0301                	addi	t1,t1,0
    21d6:	0901                	addi	s2,s2,0
    21d8:	0000                	unimp
    21da:	0301                	addi	t1,t1,0
    21dc:	0901                	addi	s2,s2,0
    21de:	0000                	unimp
    21e0:	0301                	addi	t1,t1,0
    21e2:	0902                	c.slli64	s2
    21e4:	0000                	unimp
    21e6:	0501                	addi	a0,a0,0
    21e8:	7803060b          	0x7803060b
    21ec:	0009                	c.nop	2
    21ee:	0100                	addi	s0,sp,128
    21f0:	0905                	addi	s2,s2,1
    21f2:	04090803          	lb	a6,64(s2)
    21f6:	0100                	addi	s0,sp,128
    21f8:	0b05                	addi	s6,s6,1
    21fa:	0e097803          	0xe097803
    21fe:	0100                	addi	s0,sp,128
    2200:	1205                	addi	tp,tp,-31
    2202:	10091803          	lh	a6,256(s2)
    2206:	0100                	addi	s0,sp,128
    2208:	0905                	addi	s2,s2,1
    220a:	04097003          	0x4097003
    220e:	0100                	addi	s0,sp,128
    2210:	0505                	addi	a0,a0,1
    2212:	0306                	slli	t1,t1,0x1
    2214:	0901                	addi	s2,s2,0
    2216:	0002                	c.slli64	zero
    2218:	0301                	addi	t1,t1,0
    221a:	0901                	addi	s2,s2,0
    221c:	0000                	unimp
    221e:	0301                	addi	t1,t1,0
    2220:	0901                	addi	s2,s2,0
    2222:	0000                	unimp
    2224:	0301                	addi	t1,t1,0
    2226:	0901                	addi	s2,s2,0
    2228:	0000                	unimp
    222a:	0301                	addi	t1,t1,0
    222c:	0901                	addi	s2,s2,0
    222e:	0000                	unimp
    2230:	0301                	addi	t1,t1,0
    2232:	0901                	addi	s2,s2,0
    2234:	0000                	unimp
    2236:	0301                	addi	t1,t1,0
    2238:	0901                	addi	s2,s2,0
    223a:	0000                	unimp
    223c:	0301                	addi	t1,t1,0
    223e:	0909                	addi	s2,s2,2
    2240:	0000                	unimp
    2242:	0501                	addi	a0,a0,0
    2244:	0612                	slli	a2,a2,0x4
    2246:	00090003          	lb	zero,0(s2)
    224a:	0100                	addi	s0,sp,128
    224c:	0c05                	addi	s8,s8,1
    224e:	0c090103          	lb	sp,192(s2)
    2252:	0100                	addi	s0,sp,128
    2254:	1205                	addi	tp,tp,-31
    2256:	0a097f03          	0xa097f03
    225a:	0100                	addi	s0,sp,128
    225c:	0505                	addi	a0,a0,1
    225e:	0306                	slli	t1,t1,0x1
    2260:	0901                	addi	s2,s2,0
    2262:	0002                	c.slli64	zero
    2264:	0501                	addi	a0,a0,0
    2266:	0612                	slli	a2,a2,0x4
    2268:	00090103          	lb	sp,0(s2)
    226c:	0100                	addi	s0,sp,128
    226e:	0c05                	addi	s8,s8,1
    2270:	04097f03          	0x4097f03
    2274:	0100                	addi	s0,sp,128
    2276:	0505                	addi	a0,a0,1
    2278:	0306                	slli	t1,t1,0x1
    227a:	0901                	addi	s2,s2,0
    227c:	0002                	c.slli64	zero
    227e:	0501                	addi	a0,a0,0
    2280:	0612                	slli	a2,a2,0x4
    2282:	00090003          	lb	zero,0(s2)
    2286:	0100                	addi	s0,sp,128
    2288:	0505                	addi	a0,a0,1
    228a:	0306                	slli	t1,t1,0x1
    228c:	0902                	c.slli64	s2
    228e:	0004                	0x4
    2290:	0501                	addi	a0,a0,0
    2292:	0310                	addi	a2,sp,384
    2294:	0900                	addi	s0,sp,144
    2296:	0000                	unimp
    2298:	0501                	addi	a0,a0,0
    229a:	0605                	addi	a2,a2,1
    229c:	00090003          	lb	zero,0(s2)
    22a0:	0100                	addi	s0,sp,128
    22a2:	0905                	addi	s2,s2,1
    22a4:	0200                	addi	s0,sp,256
    22a6:	0304                	addi	s1,sp,384
    22a8:	0306                	slli	t1,t1,0x1
    22aa:	0902                	c.slli64	s2
    22ac:	0004                	0x4
    22ae:	0501                	addi	a0,a0,0
    22b0:	001f 0402 0603      	0x6030402001f
    22b6:	00090003          	lb	zero,0(s2)
    22ba:	0100                	addi	s0,sp,128
    22bc:	1905                	addi	s2,s2,-31
    22be:	0200                	addi	s0,sp,256
    22c0:	0304                	addi	s1,sp,384
    22c2:	06090003          	lb	zero,96(s2)
    22c6:	0100                	addi	s0,sp,128
    22c8:	1705                	addi	a4,a4,-31
    22ca:	0200                	addi	s0,sp,256
    22cc:	0304                	addi	s1,sp,384
    22ce:	0306                	slli	t1,t1,0x1
    22d0:	097e                	slli	s2,s2,0x1f
    22d2:	0006                	c.slli	zero,0x1
    22d4:	0501                	addi	a0,a0,0
    22d6:	0010                	0x10
    22d8:	0402                	c.slli64	s0
    22da:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    22de:	0000                	unimp
    22e0:	0501                	addi	a0,a0,0
    22e2:	0005                	c.nop	1
    22e4:	0402                	c.slli64	s0
    22e6:	00030603          	lb	a2,0(t1)
    22ea:	0209                	addi	tp,tp,2
    22ec:	0100                	addi	s0,sp,128
    22ee:	0905                	addi	s2,s2,1
    22f0:	0200                	addi	s0,sp,256
    22f2:	0304                	addi	s1,sp,384
    22f4:	0306                	slli	t1,t1,0x1
    22f6:	0909                	addi	s2,s2,2
    22f8:	0004                	0x4
    22fa:	0501                	addi	a0,a0,0
    22fc:	0402001b          	0x402001b
    2300:	097e0303          	lb	t1,151(t3) # 1a097 <_stack_start+0xa097>
    2304:	0000                	unimp
    2306:	0501                	addi	a0,a0,0
    2308:	0010                	0x10
    230a:	0402                	c.slli64	s0
    230c:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    2310:	0000                	unimp
    2312:	0501                	addi	a0,a0,0
    2314:	0009                	c.nop	2
    2316:	0402                	c.slli64	s0
    2318:	09090303          	lb	t1,144(s2)
    231c:	000c                	0xc
    231e:	0501                	addi	a0,a0,0
    2320:	0026                	c.slli	zero,0x9
    2322:	0402                	c.slli64	s0
    2324:	00030603          	lb	a2,0(t1)
    2328:	0009                	c.nop	2
    232a:	0100                	addi	s0,sp,128
    232c:	2005                	jal	234c <_min_stack+0x34c>
    232e:	0200                	addi	s0,sp,256
    2330:	0304                	addi	s1,sp,384
    2332:	06090003          	lb	zero,96(s2)
    2336:	0100                	addi	s0,sp,128
    2338:	1f05                	addi	t5,t5,-31
    233a:	0200                	addi	s0,sp,256
    233c:	0304                	addi	s1,sp,384
    233e:	0306                	slli	t1,t1,0x1
    2340:	097e                	slli	s2,s2,0x1f
    2342:	0004                	0x4
    2344:	0501                	addi	a0,a0,0
    2346:	0014                	0x14
    2348:	0402                	c.slli64	s0
    234a:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    234e:	0000                	unimp
    2350:	0501                	addi	a0,a0,0
    2352:	0005                	c.nop	1
    2354:	0402                	c.slli64	s0
    2356:	00030603          	lb	a2,0(t1)
    235a:	0009                	c.nop	2
    235c:	0100                	addi	s0,sp,128
    235e:	0905                	addi	s2,s2,1
    2360:	0200                	addi	s0,sp,256
    2362:	0304                	addi	s1,sp,384
    2364:	0306                	slli	t1,t1,0x1
    2366:	0909                	addi	s2,s2,2
    2368:	0004                	0x4
    236a:	0501                	addi	a0,a0,0
    236c:	001f 0402 0303      	0x3030402001f
    2372:	097e                	slli	s2,s2,0x1f
    2374:	0000                	unimp
    2376:	0501                	addi	a0,a0,0
    2378:	0014                	0x14
    237a:	0402                	c.slli64	s0
    237c:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    2380:	0000                	unimp
    2382:	0501                	addi	a0,a0,0
    2384:	0009                	c.nop	2
    2386:	0402                	c.slli64	s0
    2388:	09090303          	lb	t1,144(s2)
    238c:	000c                	0xc
    238e:	0501                	addi	a0,a0,0
    2390:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2394:	00030603          	lb	a2,0(t1)
    2398:	0009                	c.nop	2
    239a:	0100                	addi	s0,sp,128
    239c:	1d05                	addi	s10,s10,-31
    239e:	0200                	addi	s0,sp,256
    23a0:	0304                	addi	s1,sp,384
    23a2:	06090003          	lb	zero,96(s2)
    23a6:	0100                	addi	s0,sp,128
    23a8:	1f05                	addi	t5,t5,-31
    23aa:	0200                	addi	s0,sp,256
    23ac:	0304                	addi	s1,sp,384
    23ae:	0306                	slli	t1,t1,0x1
    23b0:	097e                	slli	s2,s2,0x1f
    23b2:	0004                	0x4
    23b4:	0501                	addi	a0,a0,0
    23b6:	0014                	0x14
    23b8:	0402                	c.slli64	s0
    23ba:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    23be:	0000                	unimp
    23c0:	0501                	addi	a0,a0,0
    23c2:	0005                	c.nop	1
    23c4:	0402                	c.slli64	s0
    23c6:	00030603          	lb	a2,0(t1)
    23ca:	0009                	c.nop	2
    23cc:	0100                	addi	s0,sp,128
    23ce:	0905                	addi	s2,s2,1
    23d0:	0200                	addi	s0,sp,256
    23d2:	0304                	addi	s1,sp,384
    23d4:	0306                	slli	t1,t1,0x1
    23d6:	0909                	addi	s2,s2,2
    23d8:	000c                	0xc
    23da:	0501                	addi	a0,a0,0
    23dc:	0022                	c.slli	zero,0x8
    23de:	0402                	c.slli64	s0
    23e0:	00030603          	lb	a2,0(t1)
    23e4:	0009                	c.nop	2
    23e6:	0100                	addi	s0,sp,128
    23e8:	1c05                	addi	s8,s8,-31
    23ea:	0200                	addi	s0,sp,256
    23ec:	0304                	addi	s1,sp,384
    23ee:	06090003          	lb	zero,96(s2)
    23f2:	0100                	addi	s0,sp,128
    23f4:	2105                	jal	2814 <_min_stack+0x814>
    23f6:	0200                	addi	s0,sp,256
    23f8:	0304                	addi	s1,sp,384
    23fa:	0306                	slli	t1,t1,0x1
    23fc:	097e                	slli	s2,s2,0x1f
    23fe:	0004                	0x4
    2400:	0501                	addi	a0,a0,0
    2402:	0014                	0x14
    2404:	0402                	c.slli64	s0
    2406:	09000303          	lb	t1,144(zero) # 90 <instr_mod+0x4>
    240a:	0000                	unimp
    240c:	0501                	addi	a0,a0,0
    240e:	0005                	c.nop	1
    2410:	0402                	c.slli64	s0
    2412:	00030603          	lb	a2,0(t1)
    2416:	0009                	c.nop	2
    2418:	0100                	addi	s0,sp,128
    241a:	0306                	slli	t1,t1,0x1
    241c:	0908                	addi	a0,sp,144
    241e:	0004                	0x4
    2420:	0501                	addi	a0,a0,0
    2422:	0612                	slli	a2,a2,0x4
    2424:	00090003          	lb	zero,0(s2)
    2428:	0100                	addi	s0,sp,128
    242a:	1305                	addi	t1,t1,-31
    242c:	08090103          	lb	sp,128(s2)
    2430:	0100                	addi	s0,sp,128
    2432:	1205                	addi	tp,tp,-31
    2434:	08090103          	lb	sp,128(s2)
    2438:	0100                	addi	s0,sp,128
    243a:	1305                	addi	t1,t1,-31
    243c:	04097f03          	0x4097f03
    2440:	0100                	addi	s0,sp,128
    2442:	1205                	addi	tp,tp,-31
    2444:	04097f03          	0x4097f03
    2448:	0100                	addi	s0,sp,128
    244a:	0505                	addi	a0,a0,1
    244c:	0306                	slli	t1,t1,0x1
    244e:	0901                	addi	s2,s2,0
    2450:	0002                	c.slli64	zero
    2452:	0501                	addi	a0,a0,0
    2454:	00030613          	mv	a2,t1
    2458:	0009                	c.nop	2
    245a:	0100                	addi	s0,sp,128
    245c:	1205                	addi	tp,tp,-31
    245e:	02090103          	lb	sp,32(s2)
    2462:	0100                	addi	s0,sp,128
    2464:	02090903          	lb	s2,32(s2)
    2468:	0100                	addi	s0,sp,128
    246a:	1305                	addi	t1,t1,-31
    246c:	08097603          	0x8097603
    2470:	0100                	addi	s0,sp,128
    2472:	0505                	addi	a0,a0,1
    2474:	0306                	slli	t1,t1,0x1
    2476:	0901                	addi	s2,s2,0
    2478:	0002                	c.slli64	zero
    247a:	0301                	addi	t1,t1,0
    247c:	0909                	addi	s2,s2,2
    247e:	0000                	unimp
    2480:	0501                	addi	a0,a0,0
    2482:	0612                	slli	a2,a2,0x4
    2484:	00090003          	lb	zero,0(s2)
    2488:	0100                	addi	s0,sp,128
    248a:	0505                	addi	a0,a0,1
    248c:	0306                	slli	t1,t1,0x1
    248e:	0901                	addi	s2,s2,0
    2490:	0002                	c.slli64	zero
    2492:	0501                	addi	a0,a0,0
    2494:	00030613          	mv	a2,t1
    2498:	0009                	c.nop	2
    249a:	0100                	addi	s0,sp,128
    249c:	0505                	addi	a0,a0,1
    249e:	0306                	slli	t1,t1,0x1
    24a0:	0901                	addi	s2,s2,0
    24a2:	0014                	0x14
    24a4:	0501                	addi	a0,a0,0
    24a6:	0612                	slli	a2,a2,0x4
    24a8:	00090003          	lb	zero,0(s2)
    24ac:	0100                	addi	s0,sp,128
    24ae:	1a05                	addi	s4,s4,-31
    24b0:	04091b03          	lh	s6,64(s2)
    24b4:	0100                	addi	s0,sp,128
    24b6:	1205                	addi	tp,tp,-31
    24b8:	04096503          	0x4096503
    24bc:	0100                	addi	s0,sp,128
    24be:	0505                	addi	a0,a0,1
    24c0:	0306                	slli	t1,t1,0x1
    24c2:	00020913          	mv	s2,tp
    24c6:	0501                	addi	a0,a0,0
    24c8:	0310                	addi	a2,sp,384
    24ca:	0900                	addi	s0,sp,144
    24cc:	0000                	unimp
    24ce:	0501                	addi	a0,a0,0
    24d0:	0612                	slli	a2,a2,0x4
    24d2:	00096d03          	0x96d03
    24d6:	0100                	addi	s0,sp,128
    24d8:	1a05                	addi	s4,s4,-31
    24da:	02091b03          	lh	s6,32(s2)
    24de:	0100                	addi	s0,sp,128
    24e0:	0505                	addi	a0,a0,1
    24e2:	04097803          	0x4097803
    24e6:	0100                	addi	s0,sp,128
    24e8:	0905                	addi	s2,s2,1
    24ea:	0306                	slli	t1,t1,0x1
    24ec:	0901                	addi	s2,s2,0
    24ee:	0004                	0x4
    24f0:	0501                	addi	a0,a0,0
    24f2:	0003060b          	0x3060b
    24f6:	0009                	c.nop	2
    24f8:	0100                	addi	s0,sp,128
    24fa:	2705                	jal	2c1a <_min_stack+0xc1a>
    24fc:	02090003          	lb	zero,32(s2)
    2500:	0100                	addi	s0,sp,128
    2502:	0b05                	addi	s6,s6,1
    2504:	04090003          	lb	zero,64(s2)
    2508:	0100                	addi	s0,sp,128
    250a:	0d05                	addi	s10,s10,1
    250c:	0306                	slli	t1,t1,0x1
    250e:	0902                	c.slli64	s2
    2510:	000a                	c.slli	zero,0x2
    2512:	0501                	addi	a0,a0,0
    2514:	061a                	slli	a2,a2,0x6
    2516:	00090003          	lb	zero,0(s2)
    251a:	0100                	addi	s0,sp,128
    251c:	0d05                	addi	s10,s10,1
    251e:	0306                	slli	t1,t1,0x1
    2520:	0902                	c.slli64	s2
    2522:	000a                	c.slli	zero,0x2
    2524:	0501                	addi	a0,a0,0
    2526:	0305                	addi	t1,t1,1
    2528:	0909                	addi	s2,s2,2
    252a:	0000                	unimp
    252c:	0501                	addi	a0,a0,0
    252e:	0601                	addi	a2,a2,0
    2530:	00090103          	lb	sp,0(s2)
    2534:	0100                	addi	s0,sp,128
    2536:	0d05                	addi	s10,s10,1
    2538:	0200                	addi	s0,sp,256
    253a:	0204                	addi	s1,sp,256
    253c:	0306                	slli	t1,t1,0x1
    253e:	0979                	addi	s2,s2,30
    2540:	0018                	0x18
    2542:	0501                	addi	a0,a0,0
    2544:	001a                	c.slli	zero,0x6
    2546:	0402                	c.slli64	s0
    2548:	0602                	c.slli64	a2
    254a:	00090003          	lb	zero,0(s2)
    254e:	0100                	addi	s0,sp,128
    2550:	1805                	addi	a6,a6,-31
    2552:	0200                	addi	s0,sp,256
    2554:	0204                	addi	s1,sp,256
    2556:	0306                	slli	t1,t1,0x1
    2558:	0978                	addi	a4,sp,156
    255a:	0002                	c.slli64	zero
    255c:	0501                	addi	a0,a0,0
    255e:	0010                	0x10
    2560:	0402                	c.slli64	s0
    2562:	0302                	c.slli64	t1
    2564:	0900                	addi	s0,sp,144
    2566:	0000                	unimp
    2568:	0501                	addi	a0,a0,0
    256a:	0005                	c.nop	1
    256c:	0402                	c.slli64	s0
    256e:	0602                	c.slli64	a2
    2570:	02090003          	lb	zero,32(s2)
    2574:	0100                	addi	s0,sp,128
    2576:	0609                	addi	a2,a2,2
    2578:	0000                	unimp
    257a:	0101                	addi	sp,sp,0
    257c:	0150                	addi	a2,sp,132
    257e:	0000                	unimp
    2580:	001d0003          	lb	zero,1(s10)
    2584:	0000                	unimp
    2586:	0101                	addi	sp,sp,0
    2588:	000d0efb          	0xd0efb
    258c:	0101                	addi	sp,sp,0
    258e:	0101                	addi	sp,sp,0
    2590:	0000                	unimp
    2592:	0100                	addi	s0,sp,128
    2594:	0000                	unimp
    2596:	0001                	nop
    2598:	30747263          	bgeu	s0,t2,289c <_min_stack+0x89c>
    259c:	532e                	lw	t1,232(sp)
    259e:	0000                	unimp
    25a0:	0000                	unimp
    25a2:	0000                	unimp
    25a4:	0205                	addi	tp,tp,1
    25a6:	0d04                	addi	s1,sp,656
    25a8:	0000                	unimp
    25aa:	0315                	addi	t1,t1,5
    25ac:	0904                	addi	s1,sp,144
    25ae:	0004                	0x4
    25b0:	0301                	addi	t1,t1,0
    25b2:	0901                	addi	s2,s2,0
    25b4:	0004                	0x4
    25b6:	0301                	addi	t1,t1,0
    25b8:	0901                	addi	s2,s2,0
    25ba:	0002                	c.slli64	zero
    25bc:	0301                	addi	t1,t1,0
    25be:	0901                	addi	s2,s2,0
    25c0:	0002                	c.slli64	zero
    25c2:	0301                	addi	t1,t1,0
    25c4:	0901                	addi	s2,s2,0
    25c6:	0002                	c.slli64	zero
    25c8:	0301                	addi	t1,t1,0
    25ca:	0901                	addi	s2,s2,0
    25cc:	0002                	c.slli64	zero
    25ce:	0301                	addi	t1,t1,0
    25d0:	0901                	addi	s2,s2,0
    25d2:	0002                	c.slli64	zero
    25d4:	0301                	addi	t1,t1,0
    25d6:	0901                	addi	s2,s2,0
    25d8:	0002                	c.slli64	zero
    25da:	0301                	addi	t1,t1,0
    25dc:	0901                	addi	s2,s2,0
    25de:	0002                	c.slli64	zero
    25e0:	0301                	addi	t1,t1,0
    25e2:	0901                	addi	s2,s2,0
    25e4:	0002                	c.slli64	zero
    25e6:	0301                	addi	t1,t1,0
    25e8:	0901                	addi	s2,s2,0
    25ea:	0002                	c.slli64	zero
    25ec:	0301                	addi	t1,t1,0
    25ee:	0901                	addi	s2,s2,0
    25f0:	0002                	c.slli64	zero
    25f2:	0301                	addi	t1,t1,0
    25f4:	0901                	addi	s2,s2,0
    25f6:	0002                	c.slli64	zero
    25f8:	0301                	addi	t1,t1,0
    25fa:	0901                	addi	s2,s2,0
    25fc:	0002                	c.slli64	zero
    25fe:	0301                	addi	t1,t1,0
    2600:	0901                	addi	s2,s2,0
    2602:	0002                	c.slli64	zero
    2604:	0301                	addi	t1,t1,0
    2606:	0901                	addi	s2,s2,0
    2608:	0002                	c.slli64	zero
    260a:	0301                	addi	t1,t1,0
    260c:	0901                	addi	s2,s2,0
    260e:	0002                	c.slli64	zero
    2610:	0301                	addi	t1,t1,0
    2612:	0901                	addi	s2,s2,0
    2614:	0002                	c.slli64	zero
    2616:	0301                	addi	t1,t1,0
    2618:	0901                	addi	s2,s2,0
    261a:	0002                	c.slli64	zero
    261c:	0301                	addi	t1,t1,0
    261e:	0901                	addi	s2,s2,0
    2620:	0002                	c.slli64	zero
    2622:	0301                	addi	t1,t1,0
    2624:	0901                	addi	s2,s2,0
    2626:	0002                	c.slli64	zero
    2628:	0301                	addi	t1,t1,0
    262a:	0901                	addi	s2,s2,0
    262c:	0002                	c.slli64	zero
    262e:	0301                	addi	t1,t1,0
    2630:	0901                	addi	s2,s2,0
    2632:	0002                	c.slli64	zero
    2634:	0301                	addi	t1,t1,0
    2636:	0901                	addi	s2,s2,0
    2638:	0002                	c.slli64	zero
    263a:	0301                	addi	t1,t1,0
    263c:	0901                	addi	s2,s2,0
    263e:	0002                	c.slli64	zero
    2640:	0301                	addi	t1,t1,0
    2642:	0901                	addi	s2,s2,0
    2644:	0002                	c.slli64	zero
    2646:	0301                	addi	t1,t1,0
    2648:	0901                	addi	s2,s2,0
    264a:	0002                	c.slli64	zero
    264c:	0301                	addi	t1,t1,0
    264e:	0901                	addi	s2,s2,0
    2650:	0002                	c.slli64	zero
    2652:	0301                	addi	t1,t1,0
    2654:	0901                	addi	s2,s2,0
    2656:	0002                	c.slli64	zero
    2658:	0301                	addi	t1,t1,0
    265a:	0901                	addi	s2,s2,0
    265c:	0002                	c.slli64	zero
    265e:	0301                	addi	t1,t1,0
    2660:	0901                	addi	s2,s2,0
    2662:	0002                	c.slli64	zero
    2664:	0301                	addi	t1,t1,0
    2666:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    266a:	0301                	addi	t1,t1,0
    266c:	0906                	slli	s2,s2,0x1
    266e:	0008                	0x8
    2670:	0301                	addi	t1,t1,0
    2672:	0901                	addi	s2,s2,0
    2674:	0008                	0x8
    2676:	0301                	addi	t1,t1,0
    2678:	0902                	c.slli64	s2
    267a:	0008                	0x8
    267c:	0301                	addi	t1,t1,0
    267e:	00040903          	lb	s2,0(s0)
    2682:	0301                	addi	t1,t1,0
    2684:	0901                	addi	s2,s2,0
    2686:	0004                	0x4
    2688:	0301                	addi	t1,t1,0
    268a:	0901                	addi	s2,s2,0
    268c:	0002                	c.slli64	zero
    268e:	0301                	addi	t1,t1,0
    2690:	0906                	slli	s2,s2,0x1
    2692:	0004                	0x4
    2694:	0301                	addi	t1,t1,0
    2696:	0901                	addi	s2,s2,0
    2698:	0004                	0x4
    269a:	0301                	addi	t1,t1,0
    269c:	0901                	addi	s2,s2,0
    269e:	0004                	0x4
    26a0:	0901                	addi	s2,s2,0
    26a2:	0004                	0x4
    26a4:	0100                	addi	s0,sp,128
    26a6:	0001                	nop
    26a8:	0205                	addi	tp,tp,1
    26aa:	0000                	unimp
    26ac:	0000                	unimp
    26ae:	0100cb03          	lbu	s6,16(ra)
    26b2:	7c090103          	lb	sp,1984(s2)
    26b6:	0100                	addi	s0,sp,128
    26b8:	04090403          	lb	s0,64(s2)
    26bc:	0100                	addi	s0,sp,128
    26be:	04090403          	lb	s0,64(s2)
    26c2:	0100                	addi	s0,sp,128
    26c4:	04090403          	lb	s0,64(s2)
    26c8:	0100                	addi	s0,sp,128
    26ca:	0409                	addi	s0,s0,2
    26cc:	0000                	unimp
    26ce:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0x76>
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    switch(length%3) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  aa:	5f65                	li	t5,-7
            for (i = 0; i < (length / 3); i++) {
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	7465                	lui	s0,0xffff9
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
    asm volatile(
  bc:	6365                	lui	t1,0x19
            for (i = 0; i < ((length-2) / 3); i++) {
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
            a1[length-1] = a1[length-1] % mod;
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
    asm volatile(
  de:	735f 6174 6574      	0x65746174735f
            a1[length-1] = a1[length-1] % mod;
  e4:	5f00                	lw	s0,56(a4)
            a1[length-2] = a1[length-2] % mod;
  e6:	745f 5f6d 6573      	0x65735f6d745f
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x160>
  f0:	676e                	flw	fa4,216(sp)
} //end of function
  f2:	6c20                	flw	fs0,88(s0)
    asm volatile(
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 100:	4e5f 6900 736e      	0x736e69004e5f
    asm volatile(
 106:	7274                	flw	fa3,100(a2)
 108:	6d5f 646f 7000      	0x7000646f6d5f
            for (i = 0; i < ((length-1) / 3); i++) {
 10e:	6d796c6f          	jal	s8,96fe4 <_stack_start+0x86fe4>
    asm volatile(
 112:	6c75                	lui	s8,0x1d
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
            for (i = 0; i < ((length-2) / 3); i++) {
 11c:	625f 7361 0065      	0x657361625f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 122:	6d6f682f          	0x6d6f682f
 126:	2f65                	jal	8de <generate_keys+0x28>
 128:	6f74                	flw	fa3,92(a4)
    int line[size_b][size_a + size_b];
 12a:	6170                	flw	fa2,68(a0)
 12c:	636c                	flw	fa1,68(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	7365442f          	0x7365442f
    int line[size_b][size_a + size_b];
 132:	706f746b          	0x706f746b
 136:	7469672f          	0x7469672f
 13a:	7568                	flw	fa0,108(a0)
 13c:	2f62                	fld	ft10,24(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13e:	696e6573          	csrrsi	a0,0x696,28
 142:	705f726f          	jal	tp,f8046 <_stack_start+0xe8046>
 146:	6f72                	flw	ft10,28(sp)
 148:	656a                	flw	fa0,152(sp)
 14a:	732f7463          	bgeu	t5,s2,872 <ext_euclid+0x206>
 14e:	6c6f2f77          	0x6c6f2f77
 152:	6c6d7563          	bgeu	s10,t1,81c <ext_euclid+0x1b0>
    int line[size_b][size_a + size_b];
 156:	7265                	lui	tp,0xffff9
 158:	6d2e312f          	0x6d2e312f
    int pola[size_a];
 15c:	5f00646f          	jal	s0,674c <_stack_len+0x274c>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 160:	735f 0066 6f5f      	0x6f5f0066735f
    int pola[size_a];
 166:	5f6e                	lw	t5,248(sp)
    int polb[size_b];
 168:	7865                	lui	a6,0xffff9
 16a:	7469                	lui	s0,0xffffa
    int line[size_b][size_a + size_b];
 16c:	615f 6772 0073      	0x736772615f
    int pola[size_a];
 172:	635f 6f6f 696b      	0x696b6f6f635f
 178:	0065                	c.nop	25
            line[i][j] = 0;
 17a:	5f5f 6773 756c      	0x756c67735f5f
    int polb[size_b];
 180:	0065                	c.nop	25
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 182:	6572                	flw	fa0,28(sp)
    int pola[size_a];
 184:	72003173          	csrrc	sp,0x720,zero
    int polb[size_b];
 188:	7365                	lui	t1,0xffff9
            line[i][j] = 0;
 18a:	0032                	c.slli	zero,0xc
 18c:	665f 616c 7367      	0x7367616c665f
    for (i = 0; i < size_b; ++i){
 192:	5f00                	lw	s0,56(a4)
            product[j] = 0;
 194:	7369                	lui	t1,0xffffa
 196:	635f 6178 5f00      	0x5f006178635f
    for (i = 0; i < size_b; ++i){
 19c:	69647473          	csrrci	s0,0x696,8
    for (i = 0; i < size_a; ++i){
 1a0:	006e                	c.slli	zero,0x1b
 1a2:	625f 6b6c 6973      	0x69736b6c625f
	array_mod(pola,mod,size_a);
 1a8:	657a                	flw	fa0,156(sp)
 1aa:	7000                	flw	fs0,32(s0)
 1ac:	6f72                	flw	ft10,28(sp)
 1ae:	7564                	flw	fs1,108(a0)
 1b0:	70007463          	bgeu	zero,zero,8b8 <generate_keys+0x2>
    for (i = 0; i < size_b; ++i){
 1b4:	64796c6f          	jal	s8,96ffa <_stack_start+0x86ffa>
 1b8:	7669                	lui	a2,0xffffa
 1ba:	7000                	flw	fs0,32(s0)
	array_mod(polb,mod,size_b);
 1bc:	66796c6f          	jal	s8,97022 <_stack_start+0x87022>
 1c0:	5f00                	lw	s0,56(a4)
 1c2:	62747663          	bgeu	s0,t2,7ee <ext_euclid+0x182>
    if(star_mult == 1){
 1c6:	6675                	lui	a2,0x1d
 1c8:	5f00                	lw	s0,56(a4)
 1ca:	7366666f          	jal	a2,66900 <_stack_start+0x56900>
 1ce:	7465                	lui	s0,0xffff9
 1d0:	5f00                	lw	s0,56(a4)
 1d2:	626d                	lui	tp,0x1b
 1d4:	6f747273          	csrrci	tp,0x6f7,8
        for (j = size_b -1; j >= 0; j = j-1){
 1d8:	5f736377          	0x5f736377
            for (k = size_a-1; k >= 0; k = k-1 ){
 1dc:	74617473          	csrrci	s0,0x746,2
            product[j] = 0;
 1e0:	0065                	c.nop	25
 1e2:	6d5f 7262 656c      	0x656c72626d5f
            line[i][j] = 0;
 1e8:	5f6e                	lw	t5,248(sp)
            product[j] = 0;
 1ea:	74617473          	csrrci	s0,0x746,2
        for(j = 0; j < size_a + size_b -1; ++j){
 1ee:	0065                	c.nop	25
 1f0:	665f 616e 6772      	0x6772616e665f
    for (i = 0; i < size_b; ++i){
 1f6:	746e0073          	0x746e0073
 1fa:	7572                	flw	fa0,60(sp)
 1fc:	645f 6365 7965      	0x79656365645f
        pola[i] = a[i];
 202:	7470                	flw	fa2,108(s0)
 204:	5f00                	lw	s0,56(a4)
 206:	6e66                	flw	ft8,88(sp)
 208:	735f0073          	0x735f0073
 20c:	6769                	lui	a4,0x1a
    for (i = 0; i < size_a; ++i){
 20e:	006e                	c.slli	zero,0x1b
        pola[i] = a[i];
 210:	665f 6f6c 6b63      	0x6b636f6c665f
        polb[i] = b[i];
 216:	745f 5f00 7473      	0x74735f00745f
 21c:	6564                	flw	fs1,76(a0)
 21e:	7272                	flw	ft4,60(sp)
 220:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 222:	6942                	flw	fs2,16(sp)
        polb[i] = b[i];
 224:	746e6967          	0x746e6967
    if(star_mult == 1){
 228:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 22a:	6d6d6167          	0x6d6d6167
            for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	5f61                	li	t5,-8
    for (i = 0; i < size_b; ++i){
 230:	6e676973          	csrrsi	s2,0x6e6,14
 234:	006d6167          	0x6d6167
 238:	725f 6165 0064      	0x646165725f
    for(j = 0; j < size_a + size_b -1; ++j){
 23e:	725f 7365 6c75      	0x6c757365725f
    array_mod(product,mod,size_a+size_b-1);
 244:	5f74                	lw	a3,124(a4)
 246:	5f5f006b          	0x5f5f006b
 24a:	6d74                	flw	fa3,92(a0)
 24c:	6400                	flw	fs0,8(s0)
 24e:	6e65                	lui	t3,0x19
}
 250:	6d75                	lui	s10,0x1d
 252:	745f 6d65 0070      	0x706d65745f
 258:	5f5f 6377 6268      	0x626863775f5f
 25e:	7200                	flw	fs0,32(a2)
 260:	7365                	lui	t1,0xffff9
 262:	6c75                	lui	s8,0x1d
 264:	6b74                	flw	fa3,84(a4)
 266:	5f006e6f          	jal	t3,6856 <_stack_len+0x2856>
 26a:	6f647473          	csrrci	s0,0x6f6,8
 26e:	7475                	lui	s0,0xffffd
 270:	5f00                	lw	s0,56(a4)
 272:	6c747663          	bgeu	s0,t2,93e <generate_keys+0x88>
 276:	6e65                	lui	t3,0x19
 278:	7300                	flw	fs0,32(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 27a:	6365                	lui	t1,0x19
 27c:	6572                	flw	fa0,28(sp)
 27e:	5f74                	lw	a3,124(a4)
 280:	5f79656b          	0x5f79656b
 284:	7166                	flw	ft2,120(sp)
 286:	5f00                	lw	s0,56(a4)
 288:	6966                	flw	fs2,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 28a:	656c                	flw	fa1,76(a0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 28c:	7200                	flw	fs0,32(a2)
 28e:	7465                	lui	s0,0xffff9
 290:	7275                	lui	tp,0xffffd
            for (k = size_a-1; k >= 0; k = k-1 ){
 292:	5f6e                	lw	t5,248(sp)
 294:	6461                	lui	s0,0x18
        for (j = size_b -1; j >= 0; j = j-1){
 296:	7264                	flw	fs1,100(a2)
 298:	7365                	lui	t1,0xffff9
 29a:	72003173          	csrrc	sp,0x720,zero
            for (k = size_a-1; k >= 0; k = k-1 ){
 29e:	7465                	lui	s0,0xffff9
 2a0:	7275                	lui	tp,0xffffd
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2a2:	5f6e                	lw	t5,248(sp)
 2a4:	6461                	lui	s0,0x18
 2a6:	7264                	flw	fs1,100(a2)
 2a8:	7365                	lui	t1,0xffff9
 2aa:	72003273          	csrrc	tp,0x720,zero
 2ae:	7465                	lui	s0,0xffff9
 2b0:	7275                	lui	tp,0xffffd
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b2:	5f6e                	lw	t5,248(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2b4:	6461                	lui	s0,0x18
 2b6:	7264                	flw	fs1,100(a2)
 2b8:	7365                	lui	t1,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ba:	72003373          	csrrc	t1,0x720,zero
        for (j = size_b -1; j >= 0; j = j-1){
 2be:	7465                	lui	s0,0xffff9
 2c0:	7275                	lui	tp,0xffffd
 2c2:	5f6e                	lw	t5,248(sp)
 2c4:	6461                	lui	s0,0x18
        array_mod(line[i],mod,(size_a+size_b-1));
 2c6:	7264                	flw	fs1,100(a2)
 2c8:	7365                	lui	t1,0xffff9
 2ca:	5f003473          	csrrc	s0,0x5f0,zero
    for (i = 0; i < size_b; ++i){
 2ce:	696e                	flw	fs2,216(sp)
 2d0:	0073626f          	jal	tp,36ad6 <_stack_start+0x26ad6>
            product[j] += line[i][j];
 2d4:	6572                	flw	fa0,28(sp)
 2d6:	7574                	flw	fa3,108(a0)
 2d8:	6e72                	flw	ft8,28(sp)
 2da:	615f 6464 6572      	0x65726464615f
 2e0:	00367373          	csrrci	t1,fcsr,12
 2e4:	6572                	flw	fa0,28(sp)
 2e6:	7574                	flw	fa3,108(a0)
 2e8:	6e72                	flw	ft8,28(sp)
 2ea:	615f 6464 6572      	0x65726464615f
    for(j = 0; j < size_a + size_b -1; ++j){
 2f0:	00377373          	csrrci	t1,fcsr,14
 2f4:	726f6873          	csrrsi	a6,0x726,30
        for(i = 0; i < size_b; ++i){
 2f8:	2074                	fld	fa3,192(s0)
    int line[size_b][size_a + size_b];
 2fa:	6e75                	lui	t3,0x1d
 2fc:	6e676973          	csrrsi	s2,0x6e6,14
 300:	6465                	lui	s0,0x19
 302:	6920                	flw	fs0,80(a0)
 304:	746e                	flw	fs0,248(sp)
 306:	5f00                	lw	s0,56(a4)
 308:	7461                	lui	s0,0xffff8
 30a:	7865                	lui	a6,0xffff9
 30c:	7469                	lui	s0,0xffffa
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 30e:	0030                	addi	a2,sp,8
 310:	735f 6769 616e      	0x616e6769735f
 316:	5f6c                	lw	a1,124(a4)
 318:	7562                	flw	fa0,56(sp)
 31a:	0066                	c.slli	zero,0x19
 31c:	615f 6373 6974      	0x69746373615f
    int line[size_b][size_a + size_b];
 322:	656d                	lui	a0,0x1b
 324:	625f 6675 5f00      	0x5f006675625f
    int pola[size_a];
 32a:	6572                	flw	fa0,28(sp)
 32c:	746c7573          	csrrci	a0,0x746,24
    int line[size_b][size_a + size_b];
 330:	5f00                	lw	s0,56(a4)
    int pola[size_a];
 332:	775f 6863 7700      	0x77006863775f
    int polb[size_b];
 338:	6e69                	lui	t3,0x1a
 33a:	5f74                	lw	a3,124(a4)
    int pola[size_a];
 33c:	0074                	addi	a3,sp,12
    int polb[size_b];
 33e:	656e6567          	0x656e6567
    int line[size_b][size_a + size_b];
 342:	6172                	flw	ft2,28(sp)
 344:	6574                	flw	fa3,76(a0)
    int pola[size_a];
 346:	6b5f 7965 0073      	0x7379656b5f
            line[i][j] = 0;
 34c:	5f5f 7562 6c69      	0x6c6975625f5f
    for (i = 0; i < size_b; ++i){
 352:	6974                	flw	fa3,84(a0)
 354:	5f6e                	lw	t5,248(sp)
            product2[j] = 0;
 356:	656d                	lui	a0,0x1b
 358:	636d                	lui	t1,0x1b
 35a:	7970                	flw	fa2,116(a0)
 35c:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 35e:	6f6c                	flw	fa1,92(a4)
 360:	4e006b63          	bltu	zero,zero,856 <ext_euclid+0x1ea>
    for(i = 0; i < size_a; ++i){
 364:	5254                	lw	a3,36(a2)
 366:	5f55                	li	t5,-11
    for(i = 0; i < size_b; ++i){
 368:	3834                	fld	fa3,112(s0)
 36a:	625f 7469 2e4d      	0x2e4d7469625f
    if(star_mult == 1){
 370:	72700063          	beq	zero,t2,a90 <generate_keys+0x1da>
 374:	6375646f          	jal	s0,571aa <_stack_start+0x471aa>
 378:	3274                	fld	fa3,224(a2)
 37a:	6500                	flw	fs0,8(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 37c:	7478                	flw	fa4,108(s0)
 37e:	655f 6375 696c      	0x696c6375655f
            product2[j] = 0;
 384:	0064                	addi	s1,sp,12
 386:	775f 6972 6574      	0x65746972775f
            line[i][j] = 0;
 38c:	5f00                	lw	s0,56(a4)
            product2[j] = 0;
 38e:	745f 5f6d 6579      	0x65795f6d745f
        for(j = 0; j < size_a + size_b -1; ++j){
 394:	7261                	lui	tp,0xffff8
 396:	7000                	flw	fs0,32(s0)
 398:	00626c6f          	jal	s8,2639e <_stack_start+0x1639e>
    for (i = 0; i < size_b; ++i){
 39c:	6172                	flw	ft2,28(sp)
 39e:	646e                	flw	fs0,216(sp)
 3a0:	765f6d6f          	jal	s10,f7304 <_stack_start+0xe7304>
        for(j = 0; j < size_a + size_b -1; ++j){
 3a4:	6c61                	lui	s8,0x18
        pola[i] = a[i];
 3a6:	5f00                	lw	s0,56(a4)
 3a8:	6d6e                	flw	fs10,216(sp)
 3aa:	6c61                	lui	s8,0x18
 3ac:	6f6c                	flw	fa1,92(a4)
 3ae:	6f6c0063          	beq	s8,s6,a8e <generate_keys+0x1d8>
    for(i = 0; i < size_a; ++i){
 3b2:	676e                	flw	fa4,216(sp)
        pola[i] = a[i];
 3b4:	6420                	flw	fs0,72(s0)
 3b6:	6c62756f          	jal	a0,27a7c <_stack_start+0x17a7c>
        polb[i] = b[i];
 3ba:	0065                	c.nop	25
 3bc:	6e5f 7865 6674      	0x667478656e5f
 3c2:	6d00                	flw	fs0,24(a0)
 3c4:	7365                	lui	t1,0xffff9
    for(i = 0; i < size_b; ++i){
 3c6:	65676173          	csrrsi	sp,0x656,14
        polb[i] = b[i];
 3ca:	5f00                	lw	s0,56(a4)
    for(i = 0; i < size_b; ++i){
 3cc:	745f 5f6d 6f6d      	0x6f6d5f6d745f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3d2:	006e                	c.slli	zero,0x1b
 3d4:	6572                	flw	fa0,28(sp)
 3d6:	7574                	flw	fa3,108(a0)
 3d8:	6e72                	flw	ft8,28(sp)
 3da:	615f 6464 6572      	0x65726464615f
 3e0:	00357373          	csrrci	t1,fcsr,10
 3e4:	615f 6574 6978      	0x69786574615f
        for (j = size_b -1; j >= 0; j = j-1){
 3ea:	0074                	addi	a3,sp,12
 3ec:	6f627573          	csrrci	a0,0x6f6,4
 3f0:	7470                	flw	fa2,108(s0)
 3f2:	7261                	lui	tp,0xffff8
 3f4:	5f5f0067          	jr	1525(t5)
 3f8:	64696473          	csrrsi	s0,0x646,18
        for(i = 0; i < size_b; ++i){
 3fc:	6e69                	lui	t3,0x1a
    for(j = 0; j < size_a + size_b -1; ++j){
 3fe:	7469                	lui	s0,0xffffa
 400:	5f00                	lw	s0,56(a4)
}
 402:	5f66666f          	jal	a2,669f8 <_stack_start+0x569f8>
 406:	0074                	addi	a3,sp,12
 408:	6e45                	lui	t3,0x11
 40a:	654d5f63          	bge	s10,s4,a68 <generate_keys+0x1b2>
 40e:	67617373          	csrrci	t1,0x676,2
 412:	0065                	c.nop	25
 414:	746e6f63          	bltu	t3,t1,b72 <generate_keys+0x2bc>
 418:	6f72                	flw	ft10,28(sp)
 41a:	526c                	lw	a1,100(a2)
 41c:	5f00                	lw	s0,56(a4)
 41e:	7266                	flw	ft4,120(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 420:	6565                	lui	a0,0x19
 422:	696c                	flw	fa1,84(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 424:	72007473          	csrrci	s0,0x720,0
 428:	6e69                	lui	t3,0x1a
 42a:	6f705f67          	0x6f705f67
 42e:	796c                	flw	fa1,116(a0)
 430:	5f00                	lw	s0,56(a4)
 432:	4f4c                	lw	a1,28(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 434:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 438:	4345                	li	t1,17
 43a:	5255                	li	tp,-11
            for (k = size_a-1; k >= 0; k = k-1 ){
 43c:	45564953          	0x45564953
        for (j = size_b -1; j >= 0; j = j-1){
 440:	545f 7400 5f69      	0x5f697400545f
 446:	0031                	c.nop	12
            product2[j] += line[i][j];
 448:	6974                	flw	fa3,84(a0)
 44a:	325f 7500 736e      	0x736e7500325f
 450:	6769                	lui	a4,0x1a
 452:	656e                	flw	fa0,216(sp)
 454:	2064                	fld	fs1,192(s0)
 456:	72616863          	bltu	sp,t1,b86 <generate_keys+0x2d0>
 45a:	7100                	flw	fs0,32(a0)
        for(i = 0; i < size_b; ++i){
 45c:	5f69                	li	t5,-6
 45e:	0031                	c.nop	12
    for(j = 0; j < size_a + size_b -1; ++j){
 460:	6e5f 7765 5f00      	0x5f0077656e5f
        for(i = 0; i < size_b; ++i){
 466:	5f68                	lw	a0,124(a4)
 468:	7265                	lui	tp,0xffff9
    int v[size_N];
 46a:	6e72                	flw	ft8,28(sp)
 46c:	6873006f          	j	312f2 <_stack_start+0x212f2>
 470:	2074726f          	jal	tp,47e76 <_stack_start+0x37e76>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 474:	6e69                	lui	t3,0x1a
 476:	0074                	addi	a3,sp,12
 478:	5f5f 6d74 795f      	0x795f6d745f5f
 47e:	6164                	flw	fs1,68(a0)
 480:	0079                	c.nop	30
 482:	5f5f 6273 6675      	0x667562735f5f
 488:	5f00                	lw	s0,56(a4)
 48a:	6c66                	flw	fs8,88(sp)
 48c:	6761                	lui	a4,0x18
 48e:	5f003273          	csrrc	tp,0x5f0,zero
    int v[size_N];
 492:	6f69                	lui	t5,0x1a
 494:	7362                	flw	ft6,56(sp)
    int q[size_N];
 496:	5f00                	lw	s0,56(a4)
 498:	465f 4c49 0045      	0x454c49465f
    int num_temp[size_N];
 49e:	6d5f 7362 6174      	0x617473626d5f
    int denum_temp[size_D];
 4a4:	6574                	flw	fa3,76(a0)
 4a6:	745f 5f00 735f      	0x735f5f00745f
 4ac:	4946                	lw	s2,80(sp)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4ae:	454c                	lw	a1,12(a0)
 4b0:	5f00                	lw	s0,56(a4)
 4b2:	626d                	lui	tp,0x1b
 4b4:	74617473          	csrrci	s0,0x746,2
    int v[size_N];
 4b8:	0065                	c.nop	25
    int denum_temp[size_D];
 4ba:	725f 6e61 5f64      	0x5f646e61725f
    for (i = 0; i < size_N; ++i){
 4c0:	656e                	flw	fa0,216(sp)
 4c2:	7478                	flw	fa4,108(s0)
 4c4:	5f00                	lw	s0,56(a4)
        array_mod(num_temp, mod, size_N);
 4c6:	626d                	lui	tp,0x1b
 4c8:	656c                	flw	fa1,76(a0)
 4ca:	5f6e                	lw	t5,248(sp)
 4cc:	74617473          	csrrci	s0,0x746,2
    for (i = 0; i < size_D; ++i) {
 4d0:	0065                	c.nop	25
 4d2:	695f 636e 5f00      	0x5f00636e695f
	array_mod(denum_temp,mod,size_D);
 4d8:	6e69                	lui	t3,0x1a
 4da:	0064                	addi	s1,sp,12
    for (i = 0; i < size_N; ++i){
 4dc:	6c5f 636f 6c61      	0x6c61636f6c5f
    for (i = size_D-1; i >= 0; i = i-1){
 4e2:	0065                	c.nop	25
 4e4:	5f5f 6c63 6165      	0x61656c635f5f
 4ea:	756e                	flw	fa0,248(sp)
 4ec:	0070                	addi	a2,sp,12
    for (i = 0; i < size_N; ++i){
 4ee:	755f 736e 6570      	0x6570736e755f
    for (u = 0; u < mod; ++u){
 4f4:	69666963          	bltu	a2,s6,b86 <generate_keys+0x2d0>
 4f8:	6465                	lui	s0,0x19
 4fa:	6c5f 636f 6c61      	0x6c61636f6c5f
        num_temp[i] = num[i];
 500:	5f65                	li	t5,-7
 502:	6e69                	lui	t3,0x1a
 504:	6f66                	flw	ft10,88(sp)
 506:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_N; ++i){
 508:	616d                	addi	sp,sp,240
        num_temp[i] = num[i];
 50a:	7778                	flw	fa4,108(a4)
    for (i = 0; i < size_N; ++i){
 50c:	7364                	flw	fs1,100(a4)
        denum_temp[i] = denum[i];
 50e:	5f00                	lw	s0,56(a4)
 510:	6572                	flw	fa0,28(sp)
 512:	6e65                	lui	t3,0x19
 514:	0074                	addi	a3,sp,12
 516:	72617473          	csrrci	s0,0x726,2
    for (i = 0; i < size_D; ++i) {
 51a:	6d5f 6c75 0074      	0x746c756d5f
        q[i] = 0;
 520:	735f 6565 0064      	0x646565735f
 526:	6972                	flw	fs2,28(sp)
        v[i] = 0;
 528:	325f 5f00 635f      	0x635f5f00325f
 52e:	746e756f          	jal	a0,e7c74 <_stack_start+0xd7c74>
    for (i = 0; i < size_N; ++i){
 532:	5f00                	lw	s0,56(a4)
 534:	765f 6c61 6575      	0x65756c61765f
    for (i = size_D-1; i >= 0; i = i-1){
 53a:	5f00                	lw	s0,56(a4)
        if ( (b_N*u)%mod == 1 )
 53c:	745f 5f6d 6f68      	0x6f685f6d745f
 542:	7275                	lui	tp,0xffffd
 544:	5f00                	lw	s0,56(a4)
    for (u = 0; u < mod; ++u){
 546:	6b656573          	csrrsi	a0,0x6b6,10
        if( num_temp[i] != 0 )
 54a:	5f00                	lw	s0,56(a4)
    for (i = size_N-1; i >= 0; i = i-1){
 54c:	7066                	flw	ft0,120(sp)
 54e:	745f736f          	jal	t1,f8492 <_stack_start+0xe8492>
 552:	6c00                	flw	fs0,24(s0)
 554:	6e65                	lui	t3,0x19
 556:	00687467          	0x687467
    while (d >= d2){
 55a:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        result[i] = q[i];
 560:	6e69                	lui	t3,0x1a
 562:	7000                	flw	fs0,32(s0)
 564:	6275                	lui	tp,0x1d
 566:	696c                	flw	fa1,84(a0)
    for(i = 0; i < size_N; ++i){
 568:	656b5f63          	bge	s6,s6,bc6 <ntru_encyrpt+0x1e>
    for(i = size_N; i < (2*size_N); ++i){
 56c:	0079                	c.nop	30
 56e:	7261                	lui	tp,0xffff8
        result[i] = num_temp[i-size_N];
 570:	6172                	flw	ft2,28(sp)
 572:	5f79                	li	t5,-2
 574:	6f6d                	lui	t5,0x1b
 576:	0064                	addi	s1,sp,12
    for(i = size_N; i < (2*size_N); ++i){
 578:	735f 7274 6f74      	0x6f747274735f
}
 57e:	616c5f6b          	0x616c5f6b
 582:	5f007473          	csrrci	s0,0x5f0,0
 586:	6e66                	flw	ft8,88(sp)
 588:	7974                	flw	fa3,116(a0)
 58a:	6570                	flw	fa2,76(a0)
 58c:	65730073          	0x65730073
 590:	74657263          	bgeu	a0,t1,cd4 <ntru_deceypt+0x98>
 594:	6b5f 7965 665f      	0x665f79656b5f
 59a:	0070                	addi	a2,sp,12
 59c:	615f 6464 5f00      	0x5f006464615f
 5a2:	555f 6f4c 676e      	0x676e6f4c555f
        v[(d-d2)] = u*r_d;
 5a8:	7200                	flw	fs0,32(a2)
 5aa:	5f69                	li	t5,-6
 5ac:	0031                	c.nop	12
 5ae:	675f 7465 6164      	0x61647465675f
        array_mod(v, mod, size_N);
 5b4:	6574                	flw	fa3,76(a0)
 5b6:	655f 7272 5f00      	0x5f007272655f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 5bc:	626f6c67          	0x626f6c67
 5c0:	6c61                	lui	s8,0x18
 5c2:	695f 706d 7275      	0x7275706d695f
 5c8:	5f65                	li	t5,-7
        array_mod(product, mod, size_N);
 5ca:	7470                	flw	fa2,108(s0)
 5cc:	0072                	c.slli	zero,0x1c
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 5ce:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
        for (i = 0; i < size_N; ++i){
 5d2:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
 5d6:	2e39                	jal	8f4 <generate_keys+0x3e>
 5d8:	2e32                	fld	ft8,264(sp)
        array_mod(num_temp, mod, size_N);
 5da:	2030                	fld	fa2,64(s0)
 5dc:	6d2d                	lui	s10,0xb
 5de:	7261                	lui	tp,0xffff8
 5e0:	723d6863          	bltu	s10,gp,d10 <reset_handler+0x8>
        for(i = 0; i < size_N; ++i){
 5e4:	3376                	fld	ft6,376(sp)
 5e6:	6932                	flw	fs2,12(sp)
 5e8:	636d                	lui	t1,0x1b
        array_mod(q, mod, size_N);
 5ea:	2d20                	fld	fs0,88(a0)
 5ec:	616d                	addi	sp,sp,240
 5ee:	6962                	flw	fs2,24(sp)
 5f0:	693d                	lui	s2,0xf
        for (i = size_N-1; i >= 0; i = i-1){
 5f2:	706c                	flw	fa1,100(s0)
 5f4:	2d203233          	0x2d203233
 5f8:	636d                	lui	t1,0x1b
 5fa:	6f6d                	lui	t5,0x1b
 5fc:	6564                	flw	fs1,76(a0)
 5fe:	3d6c                	fld	fa1,248(a0)
 600:	656d                	lui	a0,0x1b
 602:	6164                	flw	fs1,68(a0)
            num_temp[i] = num_temp[i] - product[i];
 604:	796e                	flw	fs2,248(sp)
 606:	2d20                	fld	fs0,88(a0)
 608:	746d                	lui	s0,0xffffb
 60a:	6e75                	lui	t3,0x1d
 60c:	3d65                	jal	4c4 <polydiv+0x5a>
        for (i = 0; i < size_N; ++i){
 60e:	6f72                	flw	ft10,28(sp)
 610:	74656b63          	bltu	a0,t1,d66 <zero_loop+0x2>
            num_temp[i] = num_temp[i] - product[i];
 614:	2d20                	fld	fs0,88(a0)
 616:	4f2d2067          	0x4f2d2067
            q[i] = q[i] + v[i];
 61a:	662d2073          	csrs	0x662,s10
 61e:	6976                	flw	fs2,92(sp)
 620:	69626973          	csrrsi	s2,0x696,4
        for(i = 0; i < size_N; ++i){
 624:	696c                	flw	fa1,84(a0)
 626:	7974                	flw	fa3,116(a0)
            q[i] = q[i] + v[i];
 628:	683d                	lui	a6,0xf
 62a:	6469                	lui	s0,0x1a
 62c:	6564                	flw	fs1,76(a0)
        for(i = 0; i < size_N; ++i){
 62e:	006e                	c.slli	zero,0x1b
            if( num_temp[i] != 0 )
 630:	755f 756e 6573      	0x6573756e755f
            v[i] = 0;
 636:	5f64                	lw	s1,124(a4)
 638:	6172                	flw	ft2,28(sp)
 63a:	646e                	flw	fs0,216(sp)
 63c:	6c00                	flw	fs0,24(s0)
 63e:	6e69                	lui	t3,0x1a
        for (i = 0; i < size_N; ++i){
 640:	0065                	c.nop	25
 642:	775f 7364 5f00      	0x5f007364775f
        result[i] = q[i];
 648:	745f 5f6d 6477      	0x64775f6d745f
 64e:	7961                	lui	s2,0xffff8
 650:	5f00                	lw	s0,56(a4)
 652:	65756c67          	0x65756c67
 656:	6e00                	flw	fs0,24(a2)
    for(i = 0; i < size_N; ++i){
 658:	7274                	flw	fa3,100(a2)
        result[i] = num_temp[i-size_N];
 65a:	5f75                	li	t5,-3
 65c:	6e65                	lui	t3,0x19
 65e:	70727963          	bgeu	tp,t2,d70 <main_entry+0x2>
 662:	0074                	addi	a3,sp,12
 664:	735f 6973 657a      	0x657a6973735f
    for(i = size_N; i < (2*size_N); ++i){
 66a:	745f 5f00 366c      	0x366c5f00745f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 670:	6134                	flw	fa3,64(a0)
    int ri_2[size]; // MX-ring poly, a
 672:	625f 6675 6400      	0x64006675625f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 678:	6e65                	lui	t3,0x19
 67a:	6d75                	lui	s10,0x1d
 67c:	5f00                	lw	s0,56(a4)
 67e:	5f676973          	csrrsi	s2,0x5f6,14
 682:	7566                	flw	fa0,120(sp)
 684:	636e                	flw	ft6,216(sp)
 686:	5f00                	lw	s0,56(a4)
 688:	626e                	flw	ft4,216(sp)
 68a:	6675                	lui	a2,0x1d
 68c:	5f00                	lw	s0,56(a4)
 68e:	6e75                	lui	t3,0x1d
 690:	7375                	lui	t1,0xffffd
    int ri_2[size]; // MX-ring poly, a
 692:	6465                	lui	s0,0x19
 694:	7000                	flw	fs0,32(s0)
 696:	52796c6f          	jal	s8,973bc <_stack_start+0x873bc>
    int ri_1[size]; // f-random poly, f[N] = 0, b
 69a:	7300                	flw	fs0,32(a4)
 69c:	7a69                	lui	s4,0xffffa
    int ri[size];
 69e:	5f65                	li	t5,-7
 6a0:	0044                	addi	s1,sp,4
 6a2:	5f5f 6d74 695f      	0x695f6d745f5f
    int ti_1[size]; // ti_1[0] = 1
 6a8:	74736473          	csrrsi	s0,0x747,6
    int ti[size];
 6ac:	5f00                	lw	s0,56(a4)
 6ae:	6f6c                	flw	fa1,92(a4)
    int qi_1[size];
 6b0:	746c6163          	bltu	s8,t1,df2 <memcpy+0x78>
 6b4:	6d69                	lui	s10,0x1a
    int temp[size];
 6b6:	5f65                	li	t5,-7
 6b8:	7562                	flw	fa0,56(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6ba:	0066                	c.slli	zero,0x19
 6bc:	635f 6f6c 6573      	0x65736f6c635f
    int temp[size];
 6c2:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size; ++i) {
 6c4:	3472                	fld	fs0,312(sp)
 6c6:	0038                	addi	a4,sp,8
        ti_2[i] = 0;
 6c8:	6d5f 7462 776f      	0x776f74626d5f
 6ce:	74735f63          	bge	t1,t2,e2c <memcpy+0xb2>
    for (i = 0; i < size; ++i) {
 6d2:	7461                	lui	s0,0xffff8
    ti_1[0] = 1;
 6d4:	0065                	c.nop	25
 6d6:	705f 7335 6d00      	0x6d007335705f
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6dc:	6961                	lui	s2,0x18
 6de:	006e                	c.slli	zero,0x1b
 6e0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
            ti[i] = ti_2[i] - temp[i];
 6e6:	6164                	flw	fs1,68(a0)
 6e8:	0079                	c.nop	30
	array_mod(ri_2,mod,N+1);
 6ea:	657a6973          	csrrsi	s2,0x657,20
 6ee:	615f 7300 7a69      	0x7a697300615f
	array_mod(ri_1,mod,N+1);
 6f4:	5f65                	li	t5,-7
 6f6:	0062                	c.slli	zero,0x18
 6f8:	30747263          	bgeu	s0,t2,9fc <generate_keys+0x146>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
 6fc:	532e                	lw	t1,232(sp)
 6fe:	2f00                	fld	fs0,24(a4)
 700:	6f68                	flw	fa0,92(a4)
 702:	656d                	lui	a0,0x1b
 704:	706f742f          	0x706f742f
        for (i = N + 1; i < (2 * N + 2); ++i) {
 708:	6c61                	lui	s8,0x18
 70a:	65442f63          	0x65442f63
 70e:	6f746b73          	csrrsi	s6,0x6f7,8
 712:	2f70                	fld	fa2,216(a4)
        for (i = 0; i < N + 1; ++i) {
 714:	7270                	flw	fa2,100(a2)
 716:	6c656a6f          	jal	s4,56ddc <_stack_start+0x46ddc>
        array_mod(temp,mod,N+1);
 71a:	7265                	lui	tp,0xffff9
 71c:	636c6f2f          	0x636c6f2f
 720:	6d75                	lui	s10,0x1d
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
 722:	4700                	lw	s0,8(a4)
 724:	554e                	lw	a0,240(sp)
 726:	4120                	lw	s0,64(a0)
 728:	2e322053          	0x2e322053
 72c:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x14>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
  2e:	0000                	unimp
  30:	0058                	addi	a4,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	011e                	slli	sp,sp,0x7
  3a:	0000                	unimp
  3c:	01dc                	addi	a5,sp,196
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4450                	lw	a2,12(s0)
  44:	0a980593          	addi	a1,a6,169 # f0a9 <_stack+0x10a9>
  48:	944e                	add	s0,s0,s3
  4a:	9706                	add	a4,a4,ra
  4c:	5009                	c.li	zero,-30
  4e:	0288                	addi	a0,sp,320
  50:	0389                	addi	t2,t2,2
  52:	0c42                	slli	s8,s8,0x10
  54:	0008                	0x8
  56:	9252                	add	tp,tp,s4
  58:	9504                	0x9504
  5a:	99089607          	0x99089607
  5e:	9b0c9a0b          	0x9b0c9a0b
  62:	810d                	srli	a0,a0,0x3
  64:	0301                	addi	t1,t1,0
  66:	00fe                	slli	ra,ra,0x1f
  68:	0c0a                	slli	s8,s8,0x2
  6a:	5002                	0x5002
  6c:	c142                	sw	a6,128(sp)
  6e:	c842                	sw	a6,16(sp)
  70:	c942                	sw	a6,144(sp)
  72:	d242                	sw	a6,36(sp)
  74:	d342                	sw	a6,164(sp)
  76:	d442                	sw	a6,40(sp)
  78:	d542                	sw	a6,168(sp)
  7a:	d642                	sw	a6,44(sp)
  7c:	d742                	sw	a6,172(sp)
  7e:	d842                	sw	a6,48(sp)
  80:	d942                	sw	a6,176(sp)
  82:	da42                	sw	a6,52(sp)
  84:	db42                	sw	a6,180(sp)
  86:	0e4a                	slli	t3,t3,0x12
  88:	4200                	lw	s0,0(a2)
  8a:	003c000b          	0x3c000b
    asm volatile(
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	02fa                	slli	t0,t0,0x1e
  96:	0000                	unimp
  98:	0170                	addi	a2,sp,140
  9a:	0000                	unimp
  9c:	0e56                	slli	t3,t3,0x15
  9e:	4e20                	lw	s0,88(a2)
  a0:	0188                	addi	a0,sp,192
  a2:	0289                	addi	t0,t0,2
  a4:	0392                	slli	t2,t2,0x4
            for (i = 0; i < (length / 3); i++) {
  a6:	07960493          	addi	s1,a2,121 # 1d079 <_stack_start+0xd079>
    asm volatile(
  aa:	0594                	addi	a3,sp,704
            for (i = 0; i < (length / 3); i++) {
  ac:	0695                	addi	a3,a3,5
  ae:	0c42                	slli	s8,s8,0x10
  b0:	0008                	0x8
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	e602                	fsw	ft0,12(sp)
  b4:	0c0a                	slli	s8,s8,0x2
  b6:	2002                	fld	ft0,0(sp)
  b8:	c842                	sw	a6,16(sp)
  ba:	c942                	sw	a6,144(sp)
    asm volatile(
  bc:	d242                	sw	a6,36(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
  be:	d342                	sw	a6,164(sp)
  c0:	d442                	sw	a6,40(sp)
            a1[length-1] = a1[length-1] % mod;
  c2:	d542                	sw	a6,168(sp)
  c4:	d642                	sw	a6,44(sp)
  c6:	0e4a                	slli	t3,t3,0x12
  c8:	4200                	lw	s0,0(a2)
  ca:	0054000b          	0x54000b
  ce:	0000                	unimp
  d0:	0000                	unimp
  d2:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	046a                	slli	s0,s0,0x1a
  d6:	0000                	unimp
  d8:	0202                	c.slli64	tp
  da:	0000                	unimp
  dc:	0e46                	slli	t3,t3,0x11
    asm volatile(
  de:	5e40                	lw	s0,60(a2)
            for (i = 0; i < ((length-1) / 3); i++) {
  e0:	0288                	addi	a0,sp,320
  e2:	0389                	addi	t2,t2,2
            a1[length-1] = a1[length-1] % mod;
  e4:	0492                	slli	s1,s1,0x4
            a1[length-2] = a1[length-2] % mod;
  e6:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
  ea:	0795                	addi	a5,a5,5
  ec:	0896                	slli	a7,a7,0x5
  ee:	0a980997          	auipc	s3,0xa980
} //end of function
  f2:	0b99                	addi	s7,s7,6
    asm volatile(
  f4:	0c9a                	slli	s9,s9,0x6
  f6:	0181                	addi	gp,gp,0
  f8:	0c420d9b          	0xc420d9b
  fc:	0008                	0x8
            for (i = 0; i < (length / 3); i++) {
  fe:	f002                	fsw	ft0,32(sp)
 100:	0c0a                	slli	s8,s8,0x2
    asm volatile(
 102:	4002                	0x4002
 104:	c142                	sw	a6,128(sp)
 106:	c842                	sw	a6,16(sp)
 108:	c942                	sw	a6,144(sp)
 10a:	d242                	sw	a6,36(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
 10c:	d342                	sw	a6,164(sp)
 10e:	d442                	sw	a6,40(sp)
    asm volatile(
 110:	d542                	sw	a6,168(sp)
 112:	d642                	sw	a6,44(sp)
 114:	d742                	sw	a6,172(sp)
 116:	d842                	sw	a6,48(sp)
 118:	d942                	sw	a6,176(sp)
            for (i = 0; i < ((length-2) / 3); i++) {
 11a:	da42                	sw	a6,52(sp)
 11c:	db42                	sw	a6,180(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 11e:	0e4a                	slli	t3,t3,0x12
 120:	4200                	lw	s0,0(a2)
 122:	0054000b          	0x54000b
 126:	0000                	unimp
 128:	0000                	unimp
    int line[size_b][size_a + size_b];
 12a:	0000                	unimp
 12c:	066c                	addi	a1,sp,780
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12e:	0000                	unimp
 130:	024a                	slli	tp,tp,0x12
    int line[size_b][size_a + size_b];
 132:	0000                	unimp
 134:	0e46                	slli	t3,t3,0x11
 136:	5e50                	lw	a2,60(a2)
 138:	0288                	addi	a0,sp,320
 13a:	0389                	addi	t2,t2,2
 13c:	0492                	slli	s1,s1,0x4
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13e:	06940593          	addi	a1,s0,105
 142:	0795                	addi	a5,a5,5
 144:	0896                	slli	a7,a7,0x5
 146:	0a980997          	auipc	s3,0xa980
 14a:	0b99                	addi	s7,s7,6
 14c:	01810d9b          	0x1810d9b
    int line[size_b][size_a + size_b];
 150:	0c9a                	slli	s9,s9,0x6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 152:	0c42                	slli	s8,s8,0x10
    int line[size_b][size_a + size_b];
 154:	0008                	0x8
 156:	0a00fa03          	0xa00fa03
    int pola[size_a];
 15a:	020c                	addi	a1,sp,256
 15c:	4250                	lw	a2,4(a2)
 15e:	42c1                	li	t0,16
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 160:	42c8                	lw	a0,4(a3)
    int line[size_b][size_a + size_b];
 162:	42c9                	li	t0,18
 164:	42d2                	lw	t0,20(sp)
    int pola[size_a];
 166:	42d442d3          	0x42d442d3
    int polb[size_b];
 16a:	42d5                	li	t0,21
    int line[size_b][size_a + size_b];
 16c:	42d6                	lw	t0,84(sp)
    int polb[size_b];
 16e:	42d842d7          	0x42d842d7
    int pola[size_a];
 172:	42d9                	li	t0,22
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 174:	42da                	lw	t0,148(sp)
 176:	000e4adb          	0xe4adb
            line[i][j] = 0;
 17a:	0b42                	slli	s6,s6,0x10
 17c:	0054                	addi	a3,sp,4
    int polb[size_b];
 17e:	0000                	unimp
 180:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 182:	0000                	unimp
    int pola[size_a];
 184:	08b6                	slli	a7,a7,0xd
 186:	0000                	unimp
    int polb[size_b];
 188:	02f2                	slli	t0,t0,0x1c
            line[i][j] = 0;
 18a:	0000                	unimp
 18c:	0e42                	slli	t3,t3,0x10
 18e:	03f0                	addi	a2,sp,460
    for (i = 0; i < size_b; ++i){
 190:	814c                	0x814c
 192:	8801                	andi	s0,s0,0
            product[j] = 0;
 194:	8902                	jr	s2
 196:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
 19a:	6400                	flw	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
 19c:	0492                	slli	s1,s1,0x4
 19e:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_a; ++i){
 1a2:	0795                	addi	a5,a5,5
 1a4:	0896                	slli	a7,a7,0x5
	array_mod(pola,mod,size_a);
 1a6:	0c9a0997          	auipc	s3,0xc9a0
 1aa:	0a98                	addi	a4,sp,336
 1ac:	0b99                	addi	s7,s7,6
 1ae:	0a01da03          	lhu	s4,160(gp)
    for (i = 0; i < size_b; ++i){
 1b2:	020c                	addi	a1,sp,256
 1b4:	03f0                	addi	a2,sp,460
 1b6:	c144                	sw	s1,4(a0)
 1b8:	c844                	sw	s1,20(s0)
 1ba:	c944                	sw	s1,20(a0)
	array_mod(polb,mod,size_b);
 1bc:	d244                	sw	s1,36(a2)
 1be:	d344                	sw	s1,36(a4)
 1c0:	d444                	sw	s1,44(s0)
 1c2:	d544                	sw	s1,44(a0)
    if(star_mult == 1){
 1c4:	d644                	sw	s1,44(a2)
 1c6:	d744                	sw	s1,44(a4)
 1c8:	d844                	sw	s1,52(s0)
 1ca:	d944                	sw	s1,52(a0)
 1cc:	da44                	sw	s1,52(a2)
 1ce:	0e4a                	slli	t3,t3,0x12
 1d0:	4200                	lw	s0,0(a2)
 1d2:	0034000b          	0x34000b
 1d6:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 1d8:	0000                	unimp
 1da:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 1dc:	0ba8                	addi	a0,sp,472
 1de:	0000                	unimp
            product[j] = 0;
 1e0:	0094                	addi	a3,sp,64
 1e2:	0000                	unimp
 1e4:	0e42                	slli	t3,t3,0x10
            line[i][j] = 0;
 1e6:	01e0                	addi	s0,sp,204
 1e8:	8846                	mv	a6,a7
            product[j] = 0;
 1ea:	8902                	jr	s2
 1ec:	5a049203          	lh	tp,1440(s1) # bfc <ntru_encyrpt+0x54>
        for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	0181                	addi	gp,gp,0
 1f2:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_b; ++i){
 1f6:	5202                	lw	tp,32(sp)
 1f8:	c10a                	sw	sp,128(sp)
 1fa:	c842                	sw	a6,16(sp)
 1fc:	c942                	sw	a6,144(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 1fe:	d242                	sw	a6,36(sp)
 200:	d342                	sw	a6,164(sp)
        pola[i] = a[i];
 202:	d442                	sw	a6,40(sp)
 204:	0e42                	slli	t3,t3,0x10
 206:	4200                	lw	s0,0(a2)
 208:	0000000b          	0xb
 20c:	0040                	addi	s0,sp,4
    for (i = 0; i < size_a; ++i){
 20e:	0000                	unimp
        pola[i] = a[i];
 210:	0000                	unimp
 212:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 214:	0c3c                	addi	a5,sp,536
        polb[i] = b[i];
 216:	0000                	unimp
 218:	00c8                	addi	a0,sp,68
 21a:	0000                	unimp
 21c:	0e42                	slli	t3,t3,0x10
 21e:	4430                	lw	a2,72(s0)
 220:	0288                	addi	a0,sp,320
    for (i = 0; i < size_b; ++i){
 222:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
 226:	9504                	0x9504
    if(star_mult == 1){
 228:	58099707          	0x58099707
        for (j = size_b -1; j >= 0; j = j-1){
 22c:	0181                	addi	gp,gp,0
            for (k = size_a-1; k >= 0; k = k-1 ){
 22e:	0389                	addi	t2,t2,2
    for (i = 0; i < size_b; ++i){
 230:	0694                	addi	a3,sp,832
 232:	0896                	slli	a7,a7,0x5
 234:	5202                	lw	tp,32(sp)
 236:	c10a                	sw	sp,128(sp)
 238:	c842                	sw	a6,16(sp)
 23a:	c942                	sw	a6,144(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 23c:	d242                	sw	a6,36(sp)
 23e:	d342                	sw	a6,164(sp)
 240:	d442                	sw	a6,40(sp)
    array_mod(product,mod,size_a+size_b-1);
 242:	d542                	sw	a6,168(sp)
 244:	d642                	sw	a6,44(sp)
 246:	d742                	sw	a6,172(sp)
 248:	0e42                	slli	t3,t3,0x10
 24a:	4200                	lw	s0,0(a2)
 24c:	0000000b          	0xb
}
 250:	002c                	addi	a1,sp,8
 252:	0000                	unimp
 254:	0000                	unimp
 256:	0000                	unimp
 258:	0f00                	addi	s0,sp,912
 25a:	0000                	unimp
 25c:	0138                	addi	a4,sp,136
 25e:	0000                	unimp
 260:	0e44                	addi	s1,sp,788
 262:	08b0                	addi	a2,sp,88
 264:	815e                	mv	sp,s7
 266:	8801                	andi	s0,s0,0
 268:	8902                	jr	s2
 26a:	03049203          	lh	tp,48(s1)
 26e:	00f8                	addi	a4,sp,76
 270:	c10a                	sw	sp,128(sp)
 272:	c844                	sw	s1,20(s0)
 274:	c944                	sw	s1,20(a0)
 276:	d244                	sw	s1,36(a2)
 278:	0e46                	slli	t3,t3,0x11
                line[size_b-1-j][k] = pola[k]*polb[j];
 27a:	4200                	lw	s0,0(a2)
 27c:	0000000b          	0xb


NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  7c:	5d90006f          	j	e54 <default_exc_handler>
  80:	5d90006f          	j	e58 <reset_handler>
  84:	5d10006f          	j	e54 <default_exc_handler>
  88:	5cd0006f          	j	e54 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b
    : "=r"(&a1[0])				 // designation register => a0 variable'ına atılacak
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;
}
      90:	8082                	ret

00000092 <array_equ>:

void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78d63          	beq	a5,a3,d4 <array_equ+0x42>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_equ+0x20>
      a4:	e7b1                	bnez	a5,f0 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c363          	blt	a5,a2,f2 <array_equ+0x60>
      b0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	04d7cc63          	blt	a5,a3,116 <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c587b3          	add	a5,a1,a2
      ca:	4398                	lw	a4,0(a5)
      cc:	00c507b3          	add	a5,a0,a2
      d0:	c398                	sw	a4,0(a5)
      d2:	a811                	j	e6 <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	fff60693          	addi	a3,a2,-1
      d8:	02e6c6b3          	div	a3,a3,a4
      dc:	4781                	li	a5,0
      de:	48b1                	li	a7,12
      e0:	02d7c263          	blt	a5,a3,104 <array_equ+0x72>
            a1[length-1] = a2[length-1];
      e4:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
      e6:	1671                	addi	a2,a2,-4
      e8:	95b2                	add	a1,a1,a2
      ea:	419c                	lw	a5,0(a1)
      ec:	962a                	add	a2,a2,a0
      ee:	c21c                	sw	a5,0(a2)
	break;
    } //end of switch case
} //end of function
      f0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	03078733          	mul	a4,a5,a6
    asm volatile(
      f6:	00e506b3          	add	a3,a0,a4
      fa:	972e                	add	a4,a4,a1
      fc:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     100:	0785                	addi	a5,a5,1
     102:	b76d                	j	ac <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03178733          	mul	a4,a5,a7
    asm volatile(
     108:	00e50833          	add	a6,a0,a4
     10c:	972e                	add	a4,a4,a1
     10e:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0785                	addi	a5,a5,1
     114:	b7f1                	j	e0 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	03178733          	mul	a4,a5,a7
    asm volatile(
     11a:	00e50833          	add	a6,a0,a4
     11e:	972e                	add	a4,a4,a1
     120:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0785                	addi	a5,a5,1
     126:	bf61                	j	be <array_equ+0x2c>

00000128 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	715d                	addi	sp,sp,-80
     12a:	c0ca                	sw	s2,64(sp)
     12c:	8936                	mv	s2,a3
     12e:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
     130:	96ae                	add	a3,a3,a1
     132:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	d462                	sw	s8,40(sp)
     138:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     13a:	fff68c13          	addi	s8,a3,-1
     13e:	00269d93          	slli	s11,a3,0x2
     142:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	c4a2                	sw	s0,72(sp)
     148:	c2a6                	sw	s1,68(sp)
     14a:	0880                	addi	s0,sp,80
     14c:	dc52                	sw	s4,56(sp)
     14e:	da56                	sw	s5,52(sp)
     150:	d85a                	sw	s6,48(sp)
     152:	d65e                	sw	s7,44(sp)
     154:	d266                	sw	s9,36(sp)
     156:	d06a                	sw	s10,32(sp)
     158:	c686                	sw	ra,76(sp)
     15a:	faf42c23          	sw	a5,-72(s0)
    int line[size_b][size_a + size_b];
     15e:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     160:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
     164:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     166:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
     168:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
     16c:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     16e:	8d0a                	mv	s10,sp
    int pola[size_a];
     170:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     174:	00f98793          	addi	a5,s3,15
     178:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     17a:	8b0a                	mv	s6,sp
    int polb[size_b];
     17c:	40f10133          	sub	sp,sp,a5

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     180:	002dd793          	srli	a5,s11,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	882e                	mv	a6,a1
     186:	88b2                	mv	a7,a2
    int pola[size_a];
     188:	fff58a93          	addi	s5,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	8bba                	mv	s7,a4
    int line[size_b][size_a + size_b];
     18e:	fff90c93          	addi	s9,s2,-1
    int polb[size_b];
     192:	848a                	mv	s1,sp
            line[i][j] = 0;
     194:	faf42e23          	sw	a5,-68(s0)
     198:	8a6a                	mv	s4,s10
    for (i = 0; i < size_b; ++i){
     19a:	85ea                	mv	a1,s10
     19c:	4601                	li	a2,0
            product[j] = 0;
     19e:	00001e97          	auipc	t4,0x1
     1a2:	13ee8e93          	addi	t4,t4,318 # 12dc <_bss_start>
    for (i = 0; i < size_b; ++i){
     1a6:	07264663          	blt	a2,s2,212 <polymult+0xea>
    }
    else{
        array_equ(pola,a,size_a);
    }
*/	
    array_equ(pola,a,size_a); 
     1aa:	8642                	mv	a2,a6
     1ac:	85aa                	mv	a1,a0
     1ae:	855a                	mv	a0,s6
     1b0:	fb142823          	sw	a7,-80(s0)
     1b4:	fb042a23          	sw	a6,-76(s0)
     1b8:	3de9                	jal	92 <array_equ>


// make mod calculations
    for (i = 0; i < size_a; ++i){
     1ba:	fb442803          	lw	a6,-76(s0)
     1be:	fb042883          	lw	a7,-80(s0)
     1c2:	865a                	mv	a2,s6
     1c4:	4581                	li	a1,0
     1c6:	0505cb63          	blt	a1,a6,21c <polymult+0xf4>
            pola[i] = pola[i] + mod;
        }
        pola[i] = pola[i] % mod;
    }

    array_equ(polb,b,size_b);
     1ca:	864a                	mv	a2,s2
     1cc:	85c6                	mv	a1,a7
     1ce:	8526                	mv	a0,s1
     1d0:	35c9                	jal	92 <array_equ>

    for (i = 0; i < size_b; ++i){
     1d2:	8626                	mv	a2,s1
     1d4:	4581                	li	a1,0
     1d6:	0525cf63          	blt	a1,s2,234 <polymult+0x10c>




    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1da:	fb842703          	lw	a4,-72(s0)
     1de:	4785                	li	a5,1
     1e0:	94ce                	add	s1,s1,s3
     1e2:	06f70363          	beq	a4,a5,248 <polymult+0x120>
     1e6:	19f1                	addi	s3,s3,-4
     1e8:	ffcd8593          	addi	a1,s11,-4
     1ec:	99ea                	add	s3,s3,s10
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	060cc063          	bltz	s9,24e <polymult+0x126>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	87d6                	mv	a5,s5
     1f4:	a0c5                	j	2d4 <polymult+0x1ac>
            product[j] = 0;
     1f6:	00279e13          	slli	t3,a5,0x2
     1fa:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     1fc:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     200:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0785                	addi	a5,a5,1
     206:	0311                	addi	t1,t1,4
     208:	ff87c7e3          	blt	a5,s8,1f6 <polymult+0xce>
    for (i = 0; i < size_b; ++i){
     20c:	0605                	addi	a2,a2,1
     20e:	95ee                	add	a1,a1,s11
     210:	bf59                	j	1a6 <polymult+0x7e>
     212:	832e                	mv	t1,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	4781                	li	a5,0
     216:	bfcd                	j	208 <polymult+0xe0>
            pola[i] = pola[i] + mod;
     218:	97de                	add	a5,a5,s7
     21a:	c21c                	sw	a5,0(a2)
        while (pola[i] < 0){
     21c:	421c                	lw	a5,0(a2)
     21e:	fe07cde3          	bltz	a5,218 <polymult+0xf0>
        pola[i] = pola[i] % mod;
     222:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_a; ++i){
     226:	0585                	addi	a1,a1,1
     228:	0611                	addi	a2,a2,4
        pola[i] = pola[i] % mod;
     22a:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_a; ++i){
     22e:	bf61                	j	1c6 <polymult+0x9e>
            polb[i] = polb[i] + mod;
     230:	97de                	add	a5,a5,s7
     232:	c21c                	sw	a5,0(a2)
        while (polb[i] < 0){
     234:	421c                	lw	a5,0(a2)
     236:	fe07cde3          	bltz	a5,230 <polymult+0x108>
        polb[i] = polb[i] % mod;
     23a:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_b; ++i){
     23e:	0585                	addi	a1,a1,1
     240:	0611                	addi	a2,a2,4
        polb[i] = polb[i] % mod;
     242:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_b; ++i){
     246:	bf41                	j	1d6 <polymult+0xae>
    if(star_mult == 1){
     248:	85ea                	mv	a1,s10
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	060cd763          	bgez	s9,2b8 <polymult+0x190>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     24e:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     250:	0b274463          	blt	a4,s2,2f8 <polymult+0x1d0>
     254:	00001717          	auipc	a4,0x1
     258:	08870713          	addi	a4,a4,136 # 12dc <_bss_start>
     25c:	863a                	mv	a2,a4
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	4681                	li	a3,0
     260:	0d86c063          	blt	a3,s8,320 <polymult+0x1f8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	4781                	li	a5,0
     266:	0b87cf63          	blt	a5,s8,324 <polymult+0x1fc>
 

    return_address1 = &product[0];

    return return_address1;
}
     26a:	fb040113          	addi	sp,s0,-80
     26e:	40b6                	lw	ra,76(sp)
     270:	4426                	lw	s0,72(sp)
     272:	4496                	lw	s1,68(sp)
     274:	4906                	lw	s2,64(sp)
     276:	59f2                	lw	s3,60(sp)
     278:	5a62                	lw	s4,56(sp)
     27a:	5ad2                	lw	s5,52(sp)
     27c:	5b42                	lw	s6,48(sp)
     27e:	5bb2                	lw	s7,44(sp)
     280:	5c22                	lw	s8,40(sp)
     282:	5c92                	lw	s9,36(sp)
     284:	5d02                	lw	s10,32(sp)
     286:	4df2                	lw	s11,28(sp)
     288:	00001517          	auipc	a0,0x1
     28c:	05450513          	addi	a0,a0,84 # 12dc <_bss_start>
     290:	6161                	addi	sp,sp,80
     292:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	00279613          	slli	a2,a5,0x2
     298:	00c58533          	add	a0,a1,a2
     29c:	965a                	add	a2,a2,s6
     29e:	4210                	lw	a2,0(a2)
     2a0:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	03060633          	mul	a2,a2,a6
     2aa:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	fe07d4e3          	bgez	a5,294 <polymult+0x16c>
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	1cfd                	addi	s9,s9,-1
     2b2:	14f1                	addi	s1,s1,-4
     2b4:	95ee                	add	a1,a1,s11
     2b6:	bf51                	j	24a <polymult+0x122>
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	87d6                	mv	a5,s5
     2ba:	bfcd                	j	2ac <polymult+0x184>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	00279613          	slli	a2,a5,0x2
     2c0:	00c98533          	add	a0,s3,a2
     2c4:	965a                	add	a2,a2,s6
     2c6:	4210                	lw	a2,0(a2)
     2c8:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	03060633          	mul	a2,a2,a6
     2d2:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	fe07d4e3          	bgez	a5,2bc <polymult+0x194>
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	1cfd                	addi	s9,s9,-1
     2da:	14f1                	addi	s1,s1,-4
     2dc:	99ae                	add	s3,s3,a1
     2de:	bf01                	j	1ee <polymult+0xc6>
            line[i][j] = line[i][j] % mod;
     2e0:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0605                	addi	a2,a2,1
     2e4:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     2e6:	0375e5b3          	rem	a1,a1,s7
     2ea:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2ee:	ff8649e3          	blt	a2,s8,2e0 <polymult+0x1b8>
    for (i = 0; i < size_b; ++i){
     2f2:	0705                	addi	a4,a4,1
     2f4:	9a6e                	add	s4,s4,s11
     2f6:	bfa9                	j	250 <polymult+0x128>
     2f8:	87d2                	mv	a5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	4601                	li	a2,0
     2fc:	bfcd                	j	2ee <polymult+0x1c6>
            product[j] += line[i][j];
     2fe:	fbc42783          	lw	a5,-68(s0)
     302:	4208                	lw	a0,0(a2)
     304:	02f587b3          	mul	a5,a1,a5
        for(i = 0; i < size_b; ++i){
     308:	0585                	addi	a1,a1,1
            product[j] += line[i][j];
     30a:	97b6                	add	a5,a5,a3
     30c:	078a                	slli	a5,a5,0x2
     30e:	97ea                	add	a5,a5,s10
     310:	439c                	lw	a5,0(a5)
     312:	97aa                	add	a5,a5,a0
     314:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     316:	ff25c4e3          	blt	a1,s2,2fe <polymult+0x1d6>
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0685                	addi	a3,a3,1
     31c:	0611                	addi	a2,a2,4
     31e:	b789                	j	260 <polymult+0x138>
        for(i = 0; i < size_b; ++i){
     320:	4581                	li	a1,0
     322:	bfd5                	j	316 <polymult+0x1ee>
        product[j] = product[j] % mod;
     324:	4314                	lw	a3,0(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	0785                	addi	a5,a5,1
     328:	0711                	addi	a4,a4,4
        product[j] = product[j] % mod;
     32a:	0376e6b3          	rem	a3,a3,s7
     32e:	fed72e23          	sw	a3,-4(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	bf15                	j	266 <polymult+0x13e>

00000334 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     334:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     336:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	da56                	sw	s5,52(sp)
     33c:	00269a93          	slli	s5,a3,0x2
     340:	d85a                	sw	s6,48(sp)
     342:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     344:	00279b13          	slli	s6,a5,0x2
     348:	fff78b93          	addi	s7,a5,-1
     34c:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	c4a2                	sw	s0,72(sp)
     352:	c2a6                	sw	s1,68(sp)
     354:	c0ca                	sw	s2,64(sp)
     356:	de4e                	sw	s3,60(sp)
     358:	dc52                	sw	s4,56(sp)
     35a:	d462                	sw	s8,40(sp)
     35c:	d266                	sw	s9,36(sp)
     35e:	d06a                	sw	s10,32(sp)
     360:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     362:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	c686                	sw	ra,76(sp)
     366:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     368:	9bc1                	andi	a5,a5,-16
     36a:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     36e:	00259793          	slli	a5,a1,0x2
     372:	07bd                	addi	a5,a5,15
     374:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     376:	890a                	mv	s2,sp
    int pola[size_a];
     378:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     37c:	00fa8793          	addi	a5,s5,15
     380:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     382:	8d0a                	mv	s10,sp
    int polb[size_b];
     384:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	89b6                	mv	s3,a3
     38a:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     38c:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	8832                	mv	a6,a2
    int pola[size_a];
     392:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     396:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     398:	8cca                	mv	s9,s2
     39a:	86ca                	mv	a3,s2
     39c:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     39e:	00001317          	auipc	t1,0x1
     3a2:	19630313          	addi	t1,t1,406 # 1534 <product2>
    for (i = 0; i < size_b; ++i){
     3a6:	05374963          	blt	a4,s3,3f8 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     3aa:	862e                	mv	a2,a1
     3ac:	85aa                	mv	a1,a0
     3ae:	856a                	mv	a0,s10
     3b0:	fb042e23          	sw	a6,-68(s0)
     3b4:	39f9                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     3b6:	fbc42803          	lw	a6,-68(s0)
     3ba:	8526                	mv	a0,s1
     3bc:	864e                	mv	a2,s3
     3be:	85c2                	mv	a1,a6
     3c0:	39c9                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     3c2:	4785                	li	a5,1
     3c4:	01548533          	add	a0,s1,s5
     3c8:	04fd8c63          	beq	s11,a5,420 <polymult2+0xec>
     3cc:	1af1                	addi	s5,s5,-4
     3ce:	ffcb0693          	addi	a3,s6,-4
     3d2:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	040a4863          	bltz	s4,424 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	87e2                	mv	a5,s8
     3da:	a8ad                	j	454 <polymult2+0x120>
            product2[j] = 0;
     3dc:	00279893          	slli	a7,a5,0x2
     3e0:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     3e2:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     3e6:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0785                	addi	a5,a5,1
     3ec:	0611                	addi	a2,a2,4
     3ee:	ff77c7e3          	blt	a5,s7,3dc <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     3f2:	0705                	addi	a4,a4,1
     3f4:	96da                	add	a3,a3,s6
     3f6:	bf45                	j	3a6 <polymult2+0x72>
     3f8:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	4781                	li	a5,0
     3fc:	bfcd                	j	3ee <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	00279713          	slli	a4,a5,0x2
     402:	00e906b3          	add	a3,s2,a4
     406:	976a                	add	a4,a4,s10
     408:	4318                	lw	a4,0(a4)
     40a:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	02c70733          	mul	a4,a4,a2
     414:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	fe07d4e3          	bgez	a5,3fe <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	1a7d                	addi	s4,s4,-1
     41c:	1571                	addi	a0,a0,-4
     41e:	995a                	add	s2,s2,s6
     420:	000a5c63          	bgez	s4,438 <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
     424:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
     426:	05365a63          	bge	a2,s3,47a <polymult2+0x146>
     42a:	00001797          	auipc	a5,0x1
     42e:	10a78793          	addi	a5,a5,266 # 1534 <product2>
     432:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
     434:	4701                	li	a4,0
     436:	a82d                	j	470 <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	87e2                	mv	a5,s8
     43a:	bff1                	j	416 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	00279713          	slli	a4,a5,0x2
     440:	00e90633          	add	a2,s2,a4
     444:	976a                	add	a4,a4,s10
     446:	4318                	lw	a4,0(a4)
     448:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	02b70733          	mul	a4,a4,a1
     452:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	fe07d4e3          	bgez	a5,43c <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
     458:	1a7d                	addi	s4,s4,-1
     45a:	1571                	addi	a0,a0,-4
     45c:	9936                	add	s2,s2,a3
     45e:	bf9d                	j	3d4 <polymult2+0xa0>
            product2[j] += line[i][j];
     460:	438c                	lw	a1,0(a5)
     462:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
     464:	0705                	addi	a4,a4,1
     466:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
     468:	95aa                	add	a1,a1,a0
     46a:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
     46e:	0691                	addi	a3,a3,4
     470:	ff7748e3          	blt	a4,s7,460 <polymult2+0x12c>
    for(i=0;i<size_b;++i){
     474:	0605                	addi	a2,a2,1
     476:	9cda                	add	s9,s9,s6
     478:	b77d                	j	426 <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     47a:	fb040113          	addi	sp,s0,-80
     47e:	40b6                	lw	ra,76(sp)
     480:	4426                	lw	s0,72(sp)
     482:	4496                	lw	s1,68(sp)
     484:	4906                	lw	s2,64(sp)
     486:	59f2                	lw	s3,60(sp)
     488:	5a62                	lw	s4,56(sp)
     48a:	5ad2                	lw	s5,52(sp)
     48c:	5b42                	lw	s6,48(sp)
     48e:	5bb2                	lw	s7,44(sp)
     490:	5c22                	lw	s8,40(sp)
     492:	5c92                	lw	s9,36(sp)
     494:	5d02                	lw	s10,32(sp)
     496:	4df2                	lw	s11,28(sp)
     498:	00001517          	auipc	a0,0x1
     49c:	09c50513          	addi	a0,a0,156 # 1534 <product2>
     4a0:	6161                	addi	sp,sp,80
     4a2:	8082                	ret

000004a4 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     4a4:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4a8:	7139                	addi	sp,sp,-64
    int v[size_N];
     4aa:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	dc22                	sw	s0,56(sp)
     4ae:	da26                	sw	s1,52(sp)
     4b0:	d84a                	sw	s2,48(sp)
     4b2:	d64e                	sw	s3,44(sp)
     4b4:	d452                	sw	s4,40(sp)
     4b6:	d256                	sw	s5,36(sp)
     4b8:	d05a                	sw	s6,32(sp)
     4ba:	ce5e                	sw	s7,28(sp)
     4bc:	cc62                	sw	s8,24(sp)
     4be:	ca66                	sw	s9,20(sp)
     4c0:	c86a                	sw	s10,16(sp)
     4c2:	c66e                	sw	s11,12(sp)
    int v[size_N];
     4c4:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	de06                	sw	ra,60(sp)
     4c8:	0080                	addi	s0,sp,64
    int v[size_N];
     4ca:	40f10133          	sub	sp,sp,a5
     4ce:	8d0a                	mv	s10,sp
    int q[size_N];
     4d0:	40f10133          	sub	sp,sp,a5
     4d4:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
     4d6:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     4da:	00269793          	slli	a5,a3,0x2
     4de:	07bd                	addi	a5,a5,15
    int num_temp[size_N];
     4e0:	8c0a                	mv	s8,sp
    int denum_temp[size_D];
     4e2:	9bc1                	andi	a5,a5,-16
     4e4:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	84ae                	mv	s1,a1
     4ea:	8db2                	mv	s11,a2
    int v[size_N];
     4ec:	fff58b93          	addi	s7,a1,-1

    array_equ(num_temp,num,size_N);
     4f0:	862e                	mv	a2,a1
     4f2:	85aa                	mv	a1,a0
     4f4:	8562                	mv	a0,s8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	89b6                	mv	s3,a3
     4f8:	893a                	mv	s2,a4
    int denum_temp[size_D];
     4fa:	fff68c93          	addi	s9,a3,-1
    array_equ(num_temp,num,size_N);
     4fe:	3e51                	jal	92 <array_equ>
    int denum_temp[size_D];
     500:	8a0a                	mv	s4,sp
        array_equ(num_temp,num,size_N);
    }
*/

    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     502:	8ae2                	mv	s5,s8
     504:	8762                	mv	a4,s8
     506:	4681                	li	a3,0
     508:	0296cc63          	blt	a3,s1,540 <polydiv+0x9c>
        num_temp[i] = num_temp[i] % mod;
    }


    
        array_equ(denum_temp,denum,size_D);
     50c:	864e                	mv	a2,s3
     50e:	85ee                	mv	a1,s11
     510:	8552                	mv	a0,s4
     512:	3641                	jal	92 <array_equ>
   

    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     514:	8752                	mv	a4,s4
     516:	4681                	li	a3,0
     518:	0536c063          	blt	a3,s3,558 <polydiv+0xb4>
        }
        denum_temp[i] = denum_temp[i] % mod;
    }


    for (i = 0; i < size_N; ++i){
     51c:	4781                	li	a5,0
     51e:	0497c763          	blt	a5,s1,56c <polydiv+0xc8>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     522:	002c9793          	slli	a5,s9,0x2
     526:	97d2                	add	a5,a5,s4
     528:	4398                	lw	a4,0(a5)
     52a:	040cdc63          	bgez	s9,582 <polydiv+0xde>
    for (i = 0; i < size_N; ++i){
     52e:	4781                	li	a5,0
     530:	4d81                	li	s11,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     532:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     534:	052dca63          	blt	s11,s2,588 <polydiv+0xe4>
     538:	87de                	mv	a5,s7
     53a:	a085                	j	59a <polydiv+0xf6>
            num_temp[i] = num_temp[i] + mod;
     53c:	97ca                	add	a5,a5,s2
     53e:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     540:	431c                	lw	a5,0(a4)
     542:	fe07cde3          	bltz	a5,53c <polydiv+0x98>
        num_temp[i] = num_temp[i] % mod;
     546:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     54a:	0685                	addi	a3,a3,1
     54c:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     54e:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     552:	bf5d                	j	508 <polydiv+0x64>
            denum_temp[i] = denum_temp[i] + mod;
     554:	97ca                	add	a5,a5,s2
     556:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     558:	431c                	lw	a5,0(a4)
     55a:	fe07cde3          	bltz	a5,554 <polydiv+0xb0>
        denum_temp[i] = denum_temp[i] % mod;
     55e:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     562:	0685                	addi	a3,a3,1
     564:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     566:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     56a:	b77d                	j	518 <polydiv+0x74>
        q[i] = 0;
     56c:	00279713          	slli	a4,a5,0x2
     570:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
     574:	976a                	add	a4,a4,s10
        q[i] = 0;
     576:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     57a:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     57e:	0785                	addi	a5,a5,1
     580:	bf79                	j	51e <polydiv+0x7a>
        if( denum_temp[i] != 0 )
     582:	f755                	bnez	a4,52e <polydiv+0x8a>
    for (i = size_D-1; i >= 0; i = i-1){
     584:	1cfd                	addi	s9,s9,-1
     586:	bf71                	j	522 <polydiv+0x7e>
        if ( (b_N*u)%mod == 1 )
     588:	0327e633          	rem	a2,a5,s2
     58c:	97ba                	add	a5,a5,a4
     58e:	fad605e3          	beq	a2,a3,538 <polydiv+0x94>
    for (u = 0; u < mod; ++u){
     592:	0d85                	addi	s11,s11,1
     594:	b745                	j	534 <polydiv+0x90>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     596:	eb01                	bnez	a4,5a6 <polydiv+0x102>
    for (i = size_N-1; i >= 0; i = i-1){
     598:	17fd                	addi	a5,a5,-1
     59a:	00279713          	slli	a4,a5,0x2
     59e:	9762                	add	a4,a4,s8
     5a0:	4318                	lw	a4,0(a4)
     5a2:	fe07dae3          	bgez	a5,596 <polydiv+0xf2>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     5a6:	0597d663          	bge	a5,s9,5f2 <polydiv+0x14e>
    }
    else{
        array_equ(result,q,size_N);
    }
*/
	array_equ(result,q,size_N);
     5aa:	8626                	mv	a2,s1
     5ac:	85da                	mv	a1,s6
     5ae:	00001517          	auipc	a0,0x1
     5b2:	1de50513          	addi	a0,a0,478 # 178c <result>
     5b6:	3cf1                	jal	92 <array_equ>


    for(i = size_N; i < (2*size_N); ++i){
     5b8:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     5bc:	00001697          	auipc	a3,0x1
     5c0:	1d068693          	addi	a3,a3,464 # 178c <result>
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	10e4c663          	blt	s1,a4,6d0 <polydiv+0x22c>
    }

    return_address3 = &	result[0];

    return return_address3;
}
     5c8:	fc040113          	addi	sp,s0,-64
     5cc:	50f2                	lw	ra,60(sp)
     5ce:	5462                	lw	s0,56(sp)
     5d0:	54d2                	lw	s1,52(sp)
     5d2:	5942                	lw	s2,48(sp)
     5d4:	59b2                	lw	s3,44(sp)
     5d6:	5a22                	lw	s4,40(sp)
     5d8:	5a92                	lw	s5,36(sp)
     5da:	5b02                	lw	s6,32(sp)
     5dc:	4bf2                	lw	s7,28(sp)
     5de:	4c62                	lw	s8,24(sp)
     5e0:	4cd2                	lw	s9,20(sp)
     5e2:	4d42                	lw	s10,16(sp)
     5e4:	4db2                	lw	s11,12(sp)
     5e6:	00001517          	auipc	a0,0x1
     5ea:	1a650513          	addi	a0,a0,422 # 178c <result>
     5ee:	6121                	addi	sp,sp,64
     5f0:	8082                	ret
        v[(d-d2)] = u*r_d;
     5f2:	03b70733          	mul	a4,a4,s11
     5f6:	419787b3          	sub	a5,a5,s9
     5fa:	078a                	slli	a5,a5,0x2
     5fc:	97ea                	add	a5,a5,s10
     5fe:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     600:	87ea                	mv	a5,s10
     602:	4701                	li	a4,0
     604:	04974263          	blt	a4,s1,648 <polydiv+0x1a4>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	874a                	mv	a4,s2
     60a:	86ce                	mv	a3,s3
     60c:	4781                	li	a5,0
     60e:	866a                	mv	a2,s10
     610:	85ce                	mv	a1,s3
     612:	8552                	mv	a0,s4
     614:	3e11                	jal	128 <polymult>
        for (i = 0; i < size_N; ++i){
     616:	872a                	mv	a4,a0
     618:	4681                	li	a3,0
     61a:	0496c163          	blt	a3,s1,65c <polydiv+0x1b8>
     61e:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     620:	4781                	li	a5,0
     622:	0497c763          	blt	a5,s1,670 <polydiv+0x1cc>
     626:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     628:	4681                	li	a3,0
     62a:	0696c063          	blt	a3,s1,68a <polydiv+0x1e6>
     62e:	86da                	mv	a3,s6
        for(i = 0; i < size_N; ++i){
     630:	4701                	li	a4,0
     632:	06974663          	blt	a4,s1,69e <polydiv+0x1fa>
        for (i = size_N-1; i >= 0; i = i-1){
     636:	87de                	mv	a5,s7
     638:	00279713          	slli	a4,a5,0x2
     63c:	9762                	add	a4,a4,s8
     63e:	4318                	lw	a4,0(a4)
     640:	0607dc63          	bgez	a5,6b8 <polydiv+0x214>
     644:	4681                	li	a3,0
     646:	a051                	j	6ca <polydiv+0x226>
            v[i] = v[i] % mod;
     648:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     64a:	0705                	addi	a4,a4,1
     64c:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     64e:	0326e6b3          	rem	a3,a3,s2
     652:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     656:	b77d                	j	604 <polydiv+0x160>
                product[i] = product[i] + mod;
     658:	97ca                	add	a5,a5,s2
     65a:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     65c:	431c                	lw	a5,0(a4)
     65e:	fe07cde3          	bltz	a5,658 <polydiv+0x1b4>
            product[i] = product[i] % mod;
     662:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     666:	0685                	addi	a3,a3,1
     668:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     66a:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     66e:	b775                	j	61a <polydiv+0x176>
            num_temp[i] = num_temp[i] - product[i];
     670:	00279613          	slli	a2,a5,0x2
     674:	962a                	add	a2,a2,a0
     676:	4314                	lw	a3,0(a4)
     678:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     67a:	0785                	addi	a5,a5,1
     67c:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     67e:	8e91                	sub	a3,a3,a2
     680:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     684:	bf79                	j	622 <polydiv+0x17e>
                num_temp[i] = num_temp[i] + mod;
     686:	97ca                	add	a5,a5,s2
     688:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     68a:	431c                	lw	a5,0(a4)
     68c:	fe07cde3          	bltz	a5,686 <polydiv+0x1e2>
            num_temp[i] = num_temp[i] % mod;
     690:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     694:	0685                	addi	a3,a3,1
     696:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     698:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     69c:	b779                	j	62a <polydiv+0x186>
            q[i] = q[i] + v[i];
     69e:	00271793          	slli	a5,a4,0x2
     6a2:	97ea                	add	a5,a5,s10
     6a4:	4290                	lw	a2,0(a3)
     6a6:	439c                	lw	a5,0(a5)
        for(i = 0; i < size_N; ++i){
     6a8:	0705                	addi	a4,a4,1
     6aa:	0691                	addi	a3,a3,4
            q[i] = q[i] + v[i];
     6ac:	97b2                	add	a5,a5,a2
            q[i] = q[i] % mod;
     6ae:	0327e7b3          	rem	a5,a5,s2
     6b2:	fef6ae23          	sw	a5,-4(a3)
        for(i = 0; i < size_N; ++i){
     6b6:	bfb5                	j	632 <polydiv+0x18e>
            if( num_temp[i] != 0 )
     6b8:	f751                	bnez	a4,644 <polydiv+0x1a0>
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	17fd                	addi	a5,a5,-1
     6bc:	bfb5                	j	638 <polydiv+0x194>
            v[i] = 0;
     6be:	00269613          	slli	a2,a3,0x2
     6c2:	966a                	add	a2,a2,s10
     6c4:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6c8:	0685                	addi	a3,a3,1
     6ca:	fe96cae3          	blt	a3,s1,6be <polydiv+0x21a>
     6ce:	bde1                	j	5a6 <polydiv+0x102>
        result[i] = num_temp[i-size_N];
     6d0:	000aa603          	lw	a2,0(s5)
     6d4:	00249793          	slli	a5,s1,0x2
     6d8:	97b6                	add	a5,a5,a3
     6da:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	0485                	addi	s1,s1,1
     6de:	0a91                	addi	s5,s5,4
     6e0:	b5d5                	j	5c4 <polydiv+0x120>

000006e2 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6e2:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6e8:	07bd                	addi	a5,a5,15
     6ea:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	c4a2                	sw	s0,72(sp)
     6ee:	c2a6                	sw	s1,68(sp)
     6f0:	c0ca                	sw	s2,64(sp)
     6f2:	de4e                	sw	s3,60(sp)
     6f4:	dc52                	sw	s4,56(sp)
     6f6:	da56                	sw	s5,52(sp)
     6f8:	d85a                	sw	s6,48(sp)
     6fa:	d65e                	sw	s7,44(sp)
     6fc:	d462                	sw	s8,40(sp)
     6fe:	d266                	sw	s9,36(sp)
     700:	d06a                	sw	s10,32(sp)
     702:	ce6e                	sw	s11,28(sp)
     704:	c686                	sw	ra,76(sp)
     706:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     708:	40f10133          	sub	sp,sp,a5
     70c:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	40f10133          	sub	sp,sp,a5
     712:	8a0a                	mv	s4,sp
    int ri[size];
     714:	40f10133          	sub	sp,sp,a5
     718:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     71a:	40f10133          	sub	sp,sp,a5
     71e:	8b0a                	mv	s6,sp
    int ti[size];
     720:	40f10133          	sub	sp,sp,a5
     724:	8c8a                	mv	s9,sp
    int qi_1[size];
     726:	40f10133          	sub	sp,sp,a5
     72a:	8c0a                	mv	s8,sp
    int temp[size];
     72c:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	8936                	mv	s2,a3
     732:	8d2e                	mv	s10,a1
     734:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     736:	fff60d93          	addi	s11,a2,-1
    int temp[size];
     73a:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     73c:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     73e:	00001697          	auipc	a3,0x1
     742:	2a668693          	addi	a3,a3,678 # 19e4 <ti_2>
    for (i = 0; i < size; ++i) {
     746:	0297c363          	blt	a5,s1,76c <ext_euclid+0x8a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     74a:	85aa                	mv	a1,a0
     74c:	8626                	mv	a2,s1
     74e:	854e                	mv	a0,s3
     750:	3289                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
     752:	8626                	mv	a2,s1
     754:	85ea                	mv	a1,s10
     756:	8552                	mv	a0,s4
     758:	3a2d                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     75a:	4785                	li	a5,1
     75c:	00fb2023          	sw	a5,0(s6)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	00149793          	slli	a5,s1,0x1
     764:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     768:	4681                	li	a3,0
     76a:	a02d                	j	794 <ext_euclid+0xb2>
        ti_2[i] = 0;
     76c:	00279713          	slli	a4,a5,0x2
     770:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     774:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     776:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     77a:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     77e:	0785                	addi	a5,a5,1
     780:	b7d9                	j	746 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     782:	97ca                	add	a5,a5,s2
     784:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     786:	431c                	lw	a5,0(a4)
     788:	fe07cde3          	bltz	a5,782 <ext_euclid+0xa0>
            ri_2[i] = ri_2[i] % mod;
     78c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     790:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     792:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     794:	00ddc663          	blt	s11,a3,7a0 <ext_euclid+0xbe>
     798:	00269713          	slli	a4,a3,0x2
     79c:	974e                	add	a4,a4,s3
     79e:	b7e5                	j	786 <ext_euclid+0xa4>
     7a0:	8752                	mv	a4,s4
        for (i = 0; i < N + 1; ++i) {
     7a2:	4681                	li	a3,0
     7a4:	0eddd563          	bge	s11,a3,88e <ext_euclid+0x1ac>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	874a                	mv	a4,s2
     7aa:	86a6                	mv	a3,s1
     7ac:	8652                	mv	a2,s4
     7ae:	85a6                	mv	a1,s1
     7b0:	854e                	mv	a0,s3
     7b2:	39cd                	jal	4a4 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	875e                	mv	a4,s7
     7b6:	87a6                	mv	a5,s1
     7b8:	fbc42683          	lw	a3,-68(s0)
     7bc:	0ed7c363          	blt	a5,a3,8a2 <ext_euclid+0x1c0>
     7c0:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     7c2:	4701                	li	a4,0
     7c4:	0eedd863          	bge	s11,a4,8b4 <ext_euclid+0x1d2>
     7c8:	8d56                	mv	s10,s5
     7ca:	8756                	mv	a4,s5
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7cc:	4681                	li	a3,0
     7ce:	10ddd263          	bge	s11,a3,8d2 <ext_euclid+0x1f0>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	874a                	mv	a4,s2
     7d4:	86a6                	mv	a3,s1
     7d6:	8652                	mv	a2,s4
     7d8:	85a6                	mv	a1,s1
     7da:	8556                	mv	a0,s5
     7dc:	31e1                	jal	4a4 <polydiv>
     7de:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            qi_1[i] = res1[i];
//        }
    array_equ(qi_1,res1,size);
     7e0:	8626                	mv	a2,s1
     7e2:	8562                	mv	a0,s8
     7e4:	307d                	jal	92 <array_equ>

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7e6:	8762                	mv	a4,s8
     7e8:	4681                	li	a3,0
     7ea:	10ddd063          	bge	s11,a3,8ea <ext_euclid+0x208>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	874a                	mv	a4,s2
     7f0:	4781                	li	a5,0
     7f2:	86a6                	mv	a3,s1
     7f4:	865a                	mv	a2,s6
     7f6:	85a6                	mv	a1,s1
     7f8:	8562                	mv	a0,s8
     7fa:	323d                	jal	128 <polymult>
     7fc:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            temp[i] = res2[i];
//        }
    array_equ(temp,res2,size);
     7fe:	8626                	mv	a2,s1
     800:	8556                	mv	a0,s5
     802:	3841                	jal	92 <array_equ>

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     804:	4701                	li	a4,0
     806:	0eeddf63          	bge	s11,a4,904 <ext_euclid+0x222>
     80a:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     80c:	4701                	li	a4,0
     80e:	10edd663          	bge	s11,a4,91a <ext_euclid+0x238>
     812:	8766                	mv	a4,s9
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     814:	4681                	li	a3,0
     816:	12ddd463          	bge	s11,a3,93e <ext_euclid+0x25c>
        }
  

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     81a:	8626                	mv	a2,s1
     81c:	85d2                	mv	a1,s4
     81e:	854e                	mv	a0,s3
     820:	388d                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
     822:	8626                	mv	a2,s1
     824:	85de                	mv	a1,s7
     826:	8552                	mv	a0,s4
     828:	30ad                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
     82a:	8626                	mv	a2,s1
     82c:	85da                	mv	a1,s6
     82e:	00001517          	auipc	a0,0x1
     832:	1b650513          	addi	a0,a0,438 # 19e4 <ti_2>
     836:	38b1                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
     838:	8626                	mv	a2,s1
     83a:	85e6                	mv	a1,s9
     83c:	855a                	mv	a0,s6
     83e:	3891                	jal	92 <array_equ>
        controlR = 0;
     840:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     842:	4701                	li	a4,0
     844:	10edd763          	bge	s11,a4,952 <ext_euclid+0x270>
    while (controlR != 0) {
     848:	f20790e3          	bnez	a5,768 <ext_euclid+0x86>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     84c:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     84e:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     850:	11274c63          	blt	a4,s2,968 <ext_euclid+0x286>
     854:	00001617          	auipc	a2,0x1
     858:	19060613          	addi	a2,a2,400 # 19e4 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     85c:	12fdd063          	bge	s11,a5,97c <ext_euclid+0x29a>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     860:	fb040113          	addi	sp,s0,-80
     864:	40b6                	lw	ra,76(sp)
     866:	4426                	lw	s0,72(sp)
     868:	4496                	lw	s1,68(sp)
     86a:	4906                	lw	s2,64(sp)
     86c:	59f2                	lw	s3,60(sp)
     86e:	5a62                	lw	s4,56(sp)
     870:	5ad2                	lw	s5,52(sp)
     872:	5b42                	lw	s6,48(sp)
     874:	5bb2                	lw	s7,44(sp)
     876:	5c22                	lw	s8,40(sp)
     878:	5c92                	lw	s9,36(sp)
     87a:	5d02                	lw	s10,32(sp)
     87c:	4df2                	lw	s11,28(sp)
     87e:	00001517          	auipc	a0,0x1
     882:	16650513          	addi	a0,a0,358 # 19e4 <ti_2>
     886:	6161                	addi	sp,sp,80
     888:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     88a:	97ca                	add	a5,a5,s2
     88c:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     88e:	431c                	lw	a5,0(a4)
     890:	fe07cde3          	bltz	a5,88a <ext_euclid+0x1a8>
            ri_1[i] = ri_1[i] % mod;
     894:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     898:	0685                	addi	a3,a3,1
     89a:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     89c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8a0:	b711                	j	7a4 <ext_euclid+0xc2>
            ri[i - (N + 1)] = res[i];
     8a2:	00279693          	slli	a3,a5,0x2
     8a6:	96aa                	add	a3,a3,a0
     8a8:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0785                	addi	a5,a5,1
     8ac:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     8ae:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	b719                	j	7b8 <ext_euclid+0xd6>
            temp[i] = ri_2[i] - ri[i];
     8b4:	00f986b3          	add	a3,s3,a5
     8b8:	00fb85b3          	add	a1,s7,a5
     8bc:	4294                	lw	a3,0(a3)
     8be:	418c                	lw	a1,0(a1)
     8c0:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     8c4:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     8c6:	8e8d                	sub	a3,a3,a1
     8c8:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ca:	0791                	addi	a5,a5,4
     8cc:	bde5                	j	7c4 <ext_euclid+0xe2>
                temp[i] = temp[i] + mod;
     8ce:	97ca                	add	a5,a5,s2
     8d0:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     8d2:	431c                	lw	a5,0(a4)
     8d4:	fe07cde3          	bltz	a5,8ce <ext_euclid+0x1ec>
            temp[i] = temp[i] % mod;
     8d8:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8dc:	0685                	addi	a3,a3,1
     8de:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     8e0:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8e4:	b5ed                	j	7ce <ext_euclid+0xec>
                qi_1[i] = qi_1[i] + mod;
     8e6:	97ca                	add	a5,a5,s2
     8e8:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     8ea:	431c                	lw	a5,0(a4)
     8ec:	fe07cde3          	bltz	a5,8e6 <ext_euclid+0x204>
            qi_1[i] = qi_1[i] % mod;
     8f0:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8f4:	0685                	addi	a3,a3,1
     8f6:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     8f8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8fc:	b5fd                	j	7ea <ext_euclid+0x108>
                temp[i] = temp[i] + mod;
     8fe:	97ca                	add	a5,a5,s2
     900:	00fd2023          	sw	a5,0(s10)
            while (temp[i] < 0) {
     904:	000d2783          	lw	a5,0(s10)
     908:	fe07cbe3          	bltz	a5,8fe <ext_euclid+0x21c>
            temp[i] = temp[i] % mod;
     90c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     910:	0705                	addi	a4,a4,1
     912:	0d11                	addi	s10,s10,4
            temp[i] = temp[i] % mod;
     914:	fefd2e23          	sw	a5,-4(s10)
        for (i = 0; i < N + 1; ++i) {
     918:	b5fd                	j	806 <ext_euclid+0x124>
            ti[i] = ti_2[i] - temp[i];
     91a:	00001697          	auipc	a3,0x1
     91e:	0ca68693          	addi	a3,a3,202 # 19e4 <ti_2>
     922:	96be                	add	a3,a3,a5
     924:	00fa85b3          	add	a1,s5,a5
     928:	4294                	lw	a3,0(a3)
     92a:	418c                	lw	a1,0(a1)
     92c:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     930:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     932:	8e8d                	sub	a3,a3,a1
     934:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     936:	0791                	addi	a5,a5,4
     938:	bdd9                	j	80e <ext_euclid+0x12c>
                ti[i] = ti[i] + mod;
     93a:	97ca                	add	a5,a5,s2
     93c:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     93e:	431c                	lw	a5,0(a4)
     940:	fe07cde3          	bltz	a5,93a <ext_euclid+0x258>
            ti[i] = ti[i] % mod;
     944:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     948:	0685                	addi	a3,a3,1
     94a:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     94c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     950:	b5d9                	j	816 <ext_euclid+0x134>
              qi_1[i] = 0;
     952:	00271693          	slli	a3,a4,0x2
     956:	00dc0633          	add	a2,s8,a3
            controlR += ri[i];
     95a:	96de                	add	a3,a3,s7
     95c:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     95e:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     962:	0705                	addi	a4,a4,1
            controlR += ri[i];
     964:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     966:	bdf9                	j	844 <ext_euclid+0x162>
            if (((ri_2[0] * j) % mod) == 1)
     968:	0009a683          	lw	a3,0(s3)
     96c:	02d706b3          	mul	a3,a4,a3
     970:	0326e6b3          	rem	a3,a3,s2
     974:	eec680e3          	beq	a3,a2,854 <ext_euclid+0x172>
        for (j = 0; j < mod; ++j) {
     978:	0705                	addi	a4,a4,1
     97a:	bdd9                	j	850 <ext_euclid+0x16e>
            ti_2[i] = (ti_2[i] * j) % mod;
     97c:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     97e:	0785                	addi	a5,a5,1
     980:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	02d706b3          	mul	a3,a4,a3
     986:	0326e6b3          	rem	a3,a3,s2
     98a:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     98e:	b5f9                	j	85c <ext_euclid+0x17a>

00000990 <generate_keys>:




int* generate_keys(int N, int p, int q){
     990:	7101                	addi	sp,sp,-512
     992:	1e112e23          	sw	ra,508(sp)
     996:	1e812c23          	sw	s0,504(sp)
     99a:	1e912a23          	sw	s1,500(sp)
     99e:	0400                	addi	s0,sp,512
     9a0:	1f212823          	sw	s2,496(sp)
     9a4:	1f312623          	sw	s3,492(sp)
     9a8:	1f412423          	sw	s4,488(sp)
     9ac:	1f512223          	sw	s5,484(sp)
     9b0:	1f612023          	sw	s6,480(sp)
     9b4:	1d712e23          	sw	s7,476(sp)
     9b8:	1d812c23          	sw	s8,472(sp)
     9bc:	1db12623          	sw	s11,460(sp)
     9c0:	1d912a23          	sw	s9,468(sp)
     9c4:	1da12823          	sw	s10,464(sp)
	resultkon[0] = 0xaaaaaaa0;
     9c8:	aaaab7b7          	lui	a5,0xaaaab
     9cc:	aa078793          	addi	a5,a5,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
int* generate_keys(int N, int p, int q){
     9d0:	892a                	mv	s2,a0
     9d2:	8c2e                	mv	s8,a1
     9d4:	8bb2                	mv	s7,a2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9d6:	4581                	li	a1,0
     9d8:	0d000613          	li	a2,208
	resultkon[0] = 0xaaaaaaa0;
     9dc:	00001a97          	auipc	s5,0x1
     9e0:	8fca8a93          	addi	s5,s5,-1796 # 12d8 <_edata>
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	e1440513          	addi	a0,s0,-492
	resultkon[0] = 0xaaaaaaa0;
     9e8:	00faa023          	sw	a5,0(s5)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ec:	2b75                	jal	fa8 <memset>
     9ee:	4485                	li	s1,1
     9f0:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f2:	0d800613          	li	a2,216
     9f6:	4581                	li	a1,0
     9f8:	ee840513          	addi	a0,s0,-280
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9fc:	e1342423          	sw	s3,-504(s0)
     a00:	e0942623          	sw	s1,-500(s0)
     a04:	e0942823          	sw	s1,-496(s0)
     a08:	e1342c23          	sw	s3,-488(s0)
     a0c:	e2942023          	sw	s1,-480(s0)
     a10:	e2942623          	sw	s1,-468(s0)
     a14:	e3342823          	sw	s3,-464(s0)
     a18:	e3342a23          	sw	s3,-460(s0)
     a1c:	e2942e23          	sw	s1,-452(s0)
     a20:	e5342223          	sw	s3,-444(s0)
     a24:	e4942623          	sw	s1,-436(s0)
     a28:	e4942823          	sw	s1,-432(s0)
     a2c:	e5342e23          	sw	s3,-420(s0)
     a30:	e6942223          	sw	s1,-412(s0)
     a34:	e6942823          	sw	s1,-400(s0)
     a38:	e6942a23          	sw	s1,-396(s0)
     a3c:	e6942c23          	sw	s1,-392(s0)
     a40:	e7342e23          	sw	s3,-388(s0)
     a44:	e8942223          	sw	s1,-380(s0)
     a48:	e8942823          	sw	s1,-368(s0)
     a4c:	e8942a23          	sw	s1,-364(s0)
     a50:	e8942c23          	sw	s1,-360(s0)
     a54:	e9342e23          	sw	s3,-356(s0)
     a58:	ea942223          	sw	s1,-348(s0)
     a5c:	ea942823          	sw	s1,-336(s0)
     a60:	ea942a23          	sw	s1,-332(s0)
     a64:	ea942c23          	sw	s1,-328(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     a68:	00190b13          	addi	s6,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6c:	2b35                	jal	fa8 <memset>
    int polyR[N+1];
     a6e:	002b1793          	slli	a5,s6,0x2
     a72:	07bd                	addi	a5,a5,15
     a74:	9bc1                	andi	a5,a5,-16
     a76:	40f10133          	sub	sp,sp,a5
     a7a:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a7c:	00291d93          	slli	s11,s2,0x2
     a80:	01ba07b3          	add	a5,s4,s11
     a84:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a86:	ef342223          	sw	s3,-284(s0)
     a8a:	ee942623          	sw	s1,-276(s0)
     a8e:	ee942823          	sw	s1,-272(s0)
     a92:	ee942c23          	sw	s1,-264(s0)
     a96:	f1342223          	sw	s3,-252(s0)
     a9a:	f1342623          	sw	s3,-244(s0)
     a9e:	f1342823          	sw	s3,-240(s0)
     aa2:	f0942c23          	sw	s1,-232(s0)
     aa6:	f3342023          	sw	s3,-224(s0)
     aaa:	f2942423          	sw	s1,-216(s0)
     aae:	f2942a23          	sw	s1,-204(s0)
     ab2:	f3342c23          	sw	s3,-200(s0)
     ab6:	f4942023          	sw	s1,-192(s0)
     aba:	f4942623          	sw	s1,-180(s0)
     abe:	f5342823          	sw	s3,-176(s0)
     ac2:	f4942c23          	sw	s1,-168(s0)
     ac6:	f6942223          	sw	s1,-156(s0)
     aca:	f7342423          	sw	s3,-152(s0)
     ace:	f6942823          	sw	s1,-144(s0)
     ad2:	f6942c23          	sw	s1,-136(s0)
     ad6:	f6942e23          	sw	s1,-132(s0)
     ada:	f8942423          	sw	s1,-120(s0)
     ade:	f9342623          	sw	s3,-116(s0)
     ae2:	f8942a23          	sw	s1,-108(s0)
     ae6:	f8942e23          	sw	s1,-100(s0)
    polyR[0] = -1;
     aea:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     aee:	4785                	li	a5,1
     af0:	1127cb63          	blt	a5,s2,c06 <generate_keys+0x276>
     af4:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     af6:	03600693          	li	a3,54
     afa:	10f6dd63          	bge	a3,a5,c14 <generate_keys+0x284>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     afe:	4781                	li	a5,0
        random_keys[i] = f[i];
     b00:	00001697          	auipc	a3,0x1
     b04:	07468693          	addi	a3,a3,116 # 1b74 <random_keys>
    for(i = 0; i < N; ++i){
     b08:	1327c463          	blt	a5,s2,c30 <generate_keys+0x2a0>
     b0c:	ee440713          	addi	a4,s0,-284
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     b10:	00191993          	slli	s3,s2,0x1
     b14:	87ca                	mv	a5,s2
     b16:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     b18:	00001617          	auipc	a2,0x1
     b1c:	05c60613          	addi	a2,a2,92 # 1b74 <random_keys>
    for(i = N; i < (2*N); ++i){
     b20:	1337c363          	blt	a5,s3,c46 <generate_keys+0x2b6>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     b24:	448d                	li	s1,3
     b26:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     b2a:	86e2                	mv	a3,s8
     b2c:	865a                	mv	a2,s6
     b2e:	e0840593          	addi	a1,s0,-504
     b32:	8552                	mv	a0,s4
     b34:	367d                	jal	6e2 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     b36:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     b38:	00001697          	auipc	a3,0x1
     b3c:	03c68693          	addi	a3,a3,60 # 1b74 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     b40:	1097cb63          	blt	a5,s1,c56 <generate_keys+0x2c6>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     b44:	865a                	mv	a2,s6
     b46:	86de                	mv	a3,s7
     b48:	e0840593          	addi	a1,s0,-504
     b4c:	8552                	mv	a0,s4
     b4e:	3e51                	jal	6e2 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     b50:	5751                	li	a4,-12
     b52:	02e90733          	mul	a4,s2,a4
     b56:	8d6e                	mv	s10,s11
        random_keys[i] = fq[i-(3*N)];
     b58:	00001617          	auipc	a2,0x1
     b5c:	01c60613          	addi	a2,a2,28 # 1b74 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     b60:	11b4c363          	blt	s1,s11,c66 <generate_keys+0x2d6>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     b64:	4701                	li	a4,0
     b66:	85ca                	mv	a1,s2
     b68:	86ca                	mv	a3,s2
     b6a:	8666                	mv	a2,s9
     b6c:	fc8ff0ef          	jal	ra,334 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     b70:	87aa                	mv	a5,a0
     b72:	4701                	li	a4,0
     b74:	fff98593          	addi	a1,s3,-1
     b78:	10b74163          	blt	a4,a1,c7a <generate_keys+0x2ea>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b7c:	86da                	mv	a3,s6
     b7e:	875e                	mv	a4,s7
     b80:	8652                	mv	a2,s4
     b82:	320d                	jal	4a4 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b84:	4795                	li	a5,5
     b86:	02f907b3          	mul	a5,s2,a5
     b8a:	098a                	slli	s3,s3,0x2
     b8c:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b8e:	00001697          	auipc	a3,0x1
     b92:	fe668693          	addi	a3,a3,-26 # 1b74 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b96:	0991                	addi	s3,s3,4
     b98:	0efd4963          	blt	s10,a5,c8a <generate_keys+0x2fa>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b9c:	4699                	li	a3,6
     b9e:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     ba0:	00001617          	auipc	a2,0x1
     ba4:	fd460613          	addi	a2,a2,-44 # 1b74 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     ba8:	02d906b3          	mul	a3,s2,a3
     bac:	02a90933          	mul	s2,s2,a0
     bb0:	0ef6d563          	bge	a3,a5,c9a <generate_keys+0x30a>
    }
    //////// RANDOM KEYS TAŞTI? ARRAY 300LÜK YERE SAHİP AMA 318'E KADAR DOLDURULUYOR? ///////


    return_address5 = &random_keys[0];
	resultkon[0] = 0xaaaaaaa1;
     bb4:	aaaab7b7          	lui	a5,0xaaaab
     bb8:	aa178793          	addi	a5,a5,-1375 # aaaaaaa1 <_stack_start+0xaaa9aaa1>
     bbc:	00faa023          	sw	a5,0(s5)
    return return_address5;
}
     bc0:	e0040113          	addi	sp,s0,-512
     bc4:	1fc12083          	lw	ra,508(sp)
     bc8:	1f812403          	lw	s0,504(sp)
     bcc:	1f412483          	lw	s1,500(sp)
     bd0:	1f012903          	lw	s2,496(sp)
     bd4:	1ec12983          	lw	s3,492(sp)
     bd8:	1e812a03          	lw	s4,488(sp)
     bdc:	1e412a83          	lw	s5,484(sp)
     be0:	1e012b03          	lw	s6,480(sp)
     be4:	1dc12b83          	lw	s7,476(sp)
     be8:	1d812c03          	lw	s8,472(sp)
     bec:	1d412c83          	lw	s9,468(sp)
     bf0:	1d012d03          	lw	s10,464(sp)
     bf4:	1cc12d83          	lw	s11,460(sp)
     bf8:	00001517          	auipc	a0,0x1
     bfc:	f7c50513          	addi	a0,a0,-132 # 1b74 <random_keys>
     c00:	20010113          	addi	sp,sp,512
     c04:	8082                	ret
        polyR[i] = 0;
     c06:	00279713          	slli	a4,a5,0x2
     c0a:	9752                	add	a4,a4,s4
     c0c:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     c10:	0785                	addi	a5,a5,1
     c12:	bdf9                	j	af0 <generate_keys+0x160>
        f[i] = 0;
     c14:	00279713          	slli	a4,a5,0x2
     c18:	e0840613          	addi	a2,s0,-504
     c1c:	963a                	add	a2,a2,a4
     c1e:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     c22:	ee440613          	addi	a2,s0,-284
     c26:	9732                	add	a4,a4,a2
     c28:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     c2c:	0785                	addi	a5,a5,1
     c2e:	b5f1                	j	afa <generate_keys+0x16a>
        random_keys[i] = f[i];
     c30:	00279713          	slli	a4,a5,0x2
     c34:	e0840593          	addi	a1,s0,-504
     c38:	00e68633          	add	a2,a3,a4
     c3c:	972e                	add	a4,a4,a1
     c3e:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     c40:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     c42:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     c44:	b5d1                	j	b08 <generate_keys+0x178>
        random_keys[i] = g[i-N];
     c46:	430c                	lw	a1,0(a4)
     c48:	00279693          	slli	a3,a5,0x2
     c4c:	96b2                	add	a3,a3,a2
     c4e:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     c50:	0785                	addi	a5,a5,1
     c52:	0711                	addi	a4,a4,4
     c54:	b5f1                	j	b20 <generate_keys+0x190>
        random_keys[i] = fp[i-(2*N)];
     c56:	4110                	lw	a2,0(a0)
     c58:	00279713          	slli	a4,a5,0x2
     c5c:	9736                	add	a4,a4,a3
     c5e:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c60:	0785                	addi	a5,a5,1
     c62:	0511                	addi	a0,a0,4
     c64:	bdf1                	j	b40 <generate_keys+0x1b0>
        random_keys[i] = fq[i-(3*N)];
     c66:	00249793          	slli	a5,s1,0x2
     c6a:	00f706b3          	add	a3,a4,a5
     c6e:	96aa                	add	a3,a3,a0
     c70:	4294                	lw	a3,0(a3)
     c72:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     c74:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     c76:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     c78:	b5e5                	j	b60 <generate_keys+0x1d0>
        fg[i] = fg[i]*p;
     c7a:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     c7c:	0705                	addi	a4,a4,1
     c7e:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     c80:	038686b3          	mul	a3,a3,s8
     c84:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     c88:	bdc5                	j	b78 <generate_keys+0x1e8>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c8a:	ff89a603          	lw	a2,-8(s3)
     c8e:	002d1713          	slli	a4,s10,0x2
     c92:	9736                	add	a4,a4,a3
     c94:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c96:	0d05                	addi	s10,s10,1
     c98:	bdfd                	j	b96 <generate_keys+0x206>
        random_keys[i] = polyR[i-(5*N)];
     c9a:	00279713          	slli	a4,a5,0x2
     c9e:	00e605b3          	add	a1,a2,a4
     ca2:	974a                	add	a4,a4,s2
     ca4:	9752                	add	a4,a4,s4
     ca6:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     ca8:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     caa:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     cac:	b711                	j	bb0 <generate_keys+0x220>

00000cae <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cae:	7115                	addi	sp,sp,-224
	resultkon[0] = 0xbbbbbbb0;
     cb0:	bbbbc7b7          	lui	a5,0xbbbbc
     cb4:	bb078793          	addi	a5,a5,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	cda2                	sw	s0,216(sp)
     cba:	cba6                	sw	s1,212(sp)
     cbc:	c9ca                	sw	s2,208(sp)
     cbe:	c3d6                	sw	s5,196(sp)
     cc0:	842a                	mv	s0,a0
     cc2:	892e                	mv	s2,a1
     cc4:	84b2                	mv	s1,a2
    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cc6:	00000597          	auipc	a1,0x0
     cca:	49258593          	addi	a1,a1,1170 # 1158 <__DTOR_END__>
     cce:	0c000613          	li	a2,192
	resultkon[0] = 0xbbbbbbb0;
     cd2:	00000a97          	auipc	s5,0x0
     cd6:	606a8a93          	addi	s5,s5,1542 # 12d8 <_edata>
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cda:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cdc:	cf86                	sw	ra,220(sp)
     cde:	c7ce                	sw	s3,204(sp)
     ce0:	c5d2                	sw	s4,200(sp)
     ce2:	89ba                	mv	s3,a4
     ce4:	8a36                	mv	s4,a3
	resultkon[0] = 0xbbbbbbb0;
     ce6:	00faa023          	sw	a5,0(s5)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cea:	22c5                	jal	eca <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     cec:	4781                	li	a5,0
     cee:	860a                	mv	a2,sp
     cf0:	874a                	mv	a4,s2
     cf2:	03000693          	li	a3,48
     cf6:	85a2                	mv	a1,s0
     cf8:	8552                	mv	a0,s4
     cfa:	c2eff0ef          	jal	ra,128 <polymult>
     cfe:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
    for(i = 0; i < 48; ++i){
     d00:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     d04:	00f506b3          	add	a3,a0,a5
     d08:	00f485b3          	add	a1,s1,a5
     d0c:	4298                	lw	a4,0(a3)
     d0e:	418c                	lw	a1,0(a1)
     d10:	0791                	addi	a5,a5,4
     d12:	972e                	add	a4,a4,a1
     d14:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     d16:	fec797e3          	bne	a5,a2,d04 <ntru_encyrpt+0x56>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d1a:	00141493          	slli	s1,s0,0x1
     d1e:	00140693          	addi	a3,s0,1
     d22:	874a                	mv	a4,s2
     d24:	864e                	mv	a2,s3
     d26:	85a6                	mv	a1,s1
     d28:	f7cff0ef          	jal	ra,4a4 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     d2c:	478d                	li	a5,3
     d2e:	02f40433          	mul	s0,s0,a5
     d32:	87aa                	mv	a5,a0
     d34:	0284c163          	blt	s1,s0,d56 <ntru_encyrpt+0xa8>


    return_address6 = &CT[0];
	resultkon[0] = 0xbbbbbbb1;
    return return_address6;
}
     d38:	40fe                	lw	ra,220(sp)
     d3a:	446e                	lw	s0,216(sp)
	resultkon[0] = 0xbbbbbbb1;
     d3c:	bbbbc7b7          	lui	a5,0xbbbbc
     d40:	bb178793          	addi	a5,a5,-1103 # bbbbbbb1 <_stack_start+0xbbbabbb1>
     d44:	00faa023          	sw	a5,0(s5)
}
     d48:	44de                	lw	s1,212(sp)
     d4a:	494e                	lw	s2,208(sp)
     d4c:	49be                	lw	s3,204(sp)
     d4e:	4a2e                	lw	s4,200(sp)
     d50:	4a9e                	lw	s5,196(sp)
     d52:	612d                	addi	sp,sp,224
     d54:	8082                	ret
        CT[i-(2*N)] = CT[i];
     d56:	00249713          	slli	a4,s1,0x2
     d5a:	972a                	add	a4,a4,a0
     d5c:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     d5e:	0485                	addi	s1,s1,1
     d60:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     d62:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     d66:	b7f9                	j	d34 <ntru_encyrpt+0x86>

00000d68 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d68:	7179                	addi	sp,sp,-48
     d6a:	d422                	sw	s0,40(sp)
     d6c:	cc52                	sw	s4,24(sp)
     d6e:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	4a0d                	li	s4,3
     d72:	03440a33          	mul	s4,s0,s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d76:	c462                	sw	s8,8(sp)
     d78:	8c3a                	mv	s8,a4
	resultkon[0] = 0xccccccc0;
     d7a:	ccccd737          	lui	a4,0xccccd
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7e:	ce4e                	sw	s3,28(sp)
	resultkon[0] = 0xccccccc0;
     d80:	cc070713          	addi	a4,a4,-832 # ccccccc0 <_stack_start+0xcccbccc0>
     d84:	00000997          	auipc	s3,0x0
     d88:	55498993          	addi	s3,s3,1364 # 12d8 <_edata>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d8c:	d04a                	sw	s2,32(sp)
     d8e:	c85a                	sw	s6,16(sp)
     d90:	8932                	mv	s2,a2
     d92:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d94:	863e                	mv	a2,a5
	resultkon[0] = 0xccccccc0;
     d96:	00e9a023          	sw	a4,0(s3)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9a:	86a2                	mv	a3,s0
     d9c:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	8b2e                	mv	s6,a1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     da0:	85a2                	mv	a1,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     da2:	d606                	sw	ra,44(sp)
     da4:	d226                	sw	s1,36(sp)
     da6:	ca56                	sw	s5,20(sp)
     da8:	c65e                	sw	s7,12(sp)
     daa:	8ac2                	mv	s5,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     dac:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     db0:	d84ff0ef          	jal	ra,334 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db4:	00140b93          	addi	s7,s0,1
     db8:	874a                	mv	a4,s2
     dba:	86de                	mv	a3,s7
     dbc:	8656                	mv	a2,s5
     dbe:	85a6                	mv	a1,s1
     dc0:	ee4ff0ef          	jal	ra,4a4 <polydiv>
     dc4:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc6:	87aa                	mv	a5,a0
     dc8:	872a                	mv	a4,a0
     dca:	86a6                	mv	a3,s1
     dcc:	0546c963          	blt	a3,s4,e1e <ntru_deceypt+0xb6>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     dd0:	4589                	li	a1,2
     dd2:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     dd6:	4701                	li	a4,0
     dd8:	04874c63          	blt	a4,s0,e30 <ntru_deceypt+0xc8>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     ddc:	4701                	li	a4,0
     dde:	86a2                	mv	a3,s0
     de0:	85a2                	mv	a1,s0
     de2:	8562                	mv	a0,s8
     de4:	d50ff0ef          	jal	ra,334 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de8:	875a                	mv	a4,s6
     dea:	86de                	mv	a3,s7
     dec:	8656                	mv	a2,s5
     dee:	85a6                	mv	a1,s1
     df0:	eb4ff0ef          	jal	ra,4a4 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     df4:	87aa                	mv	a5,a0
     df6:	0544c663          	blt	s1,s4,e42 <ntru_deceypt+0xda>
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
	resultkon[0] = 0xccccccc1;
    return return_address7;
}
     dfa:	50b2                	lw	ra,44(sp)
     dfc:	5422                	lw	s0,40(sp)
	resultkon[0] = 0xccccccc1;
     dfe:	ccccd7b7          	lui	a5,0xccccd
     e02:	cc178793          	addi	a5,a5,-831 # ccccccc1 <_stack_start+0xcccbccc1>
     e06:	00f9a023          	sw	a5,0(s3)
}
     e0a:	5492                	lw	s1,36(sp)
     e0c:	5902                	lw	s2,32(sp)
     e0e:	49f2                	lw	s3,28(sp)
     e10:	4a62                	lw	s4,24(sp)
     e12:	4ad2                	lw	s5,20(sp)
     e14:	4b42                	lw	s6,16(sp)
     e16:	4bb2                	lw	s7,12(sp)
     e18:	4c22                	lw	s8,8(sp)
     e1a:	6145                	addi	sp,sp,48
     e1c:	8082                	ret
        a2[i-(2*N)] = a2[i];
     e1e:	00269593          	slli	a1,a3,0x2
     e22:	95b2                	add	a1,a1,a2
     e24:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e26:	0685                	addi	a3,a3,1
     e28:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     e2a:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	bf79                	j	dcc <ntru_deceypt+0x64>
        if(a2[i] <= q/2)
     e30:	4394                	lw	a3,0(a5)
     e32:	00d5d563          	bge	a1,a3,e3c <ntru_deceypt+0xd4>
            a2[i] = (-1)*(q-a2[i]);
     e36:	412686b3          	sub	a3,a3,s2
     e3a:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     e3c:	0705                	addi	a4,a4,1
     e3e:	0791                	addi	a5,a5,4
     e40:	bf61                	j	dd8 <ntru_deceypt+0x70>
        c2[i-(2*N)] = c2[i];
     e42:	00249713          	slli	a4,s1,0x2
     e46:	972a                	add	a4,a4,a0
     e48:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4a:	0485                	addi	s1,s1,1
     e4c:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     e4e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e52:	b755                	j	df6 <ntru_deceypt+0x8e>

00000e54 <default_exc_handler>:
     e54:	0000006f          	j	e54 <default_exc_handler>

00000e58 <reset_handler>:
     e58:	00000093          	li	ra,0
     e5c:	8106                	mv	sp,ra
     e5e:	8186                	mv	gp,ra
     e60:	8206                	mv	tp,ra
     e62:	8286                	mv	t0,ra
     e64:	8306                	mv	t1,ra
     e66:	8386                	mv	t2,ra
     e68:	8406                	mv	s0,ra
     e6a:	8486                	mv	s1,ra
     e6c:	8506                	mv	a0,ra
     e6e:	8586                	mv	a1,ra
     e70:	8606                	mv	a2,ra
     e72:	8686                	mv	a3,ra
     e74:	8706                	mv	a4,ra
     e76:	8786                	mv	a5,ra
     e78:	8806                	mv	a6,ra
     e7a:	8886                	mv	a7,ra
     e7c:	8906                	mv	s2,ra
     e7e:	8986                	mv	s3,ra
     e80:	8a06                	mv	s4,ra
     e82:	8a86                	mv	s5,ra
     e84:	8b06                	mv	s6,ra
     e86:	8b86                	mv	s7,ra
     e88:	8c06                	mv	s8,ra
     e8a:	8c86                	mv	s9,ra
     e8c:	8d06                	mv	s10,ra
     e8e:	8d86                	mv	s11,ra
     e90:	8e06                	mv	t3,ra
     e92:	8e86                	mv	t4,ra
     e94:	8f06                	mv	t5,ra
     e96:	8f86                	mv	t6,ra
     e98:	0000f117          	auipc	sp,0xf
     e9c:	16810113          	addi	sp,sp,360 # 10000 <_stack_start>

00000ea0 <_start>:
     ea0:	00000d17          	auipc	s10,0x0
     ea4:	43cd0d13          	addi	s10,s10,1084 # 12dc <_bss_start>
     ea8:	00001d97          	auipc	s11,0x1
     eac:	1c4d8d93          	addi	s11,s11,452 # 206c <_bss_end>
     eb0:	01bd5763          	bge	s10,s11,ebe <main_entry>

00000eb4 <zero_loop>:
     eb4:	000d2023          	sw	zero,0(s10)
     eb8:	0d11                	addi	s10,s10,4
     eba:	ffaddde3          	bge	s11,s10,eb4 <zero_loop>

00000ebe <main_entry>:
     ebe:	00000513          	li	a0,0
     ec2:	00000593          	li	a1,0
     ec6:	18a000ef          	jal	ra,1050 <main>

00000eca <memcpy>:
     eca:	00a5c7b3          	xor	a5,a1,a0
     ece:	8b8d                	andi	a5,a5,3
     ed0:	00c508b3          	add	a7,a0,a2
     ed4:	e7a1                	bnez	a5,f1c <memcpy+0x52>
     ed6:	478d                	li	a5,3
     ed8:	04c7f263          	bgeu	a5,a2,f1c <memcpy+0x52>
     edc:	00357793          	andi	a5,a0,3
     ee0:	872a                	mv	a4,a0
     ee2:	eba9                	bnez	a5,f34 <memcpy+0x6a>
     ee4:	ffc8f613          	andi	a2,a7,-4
     ee8:	fe060793          	addi	a5,a2,-32
     eec:	06f76763          	bltu	a4,a5,f5a <memcpy+0x90>
     ef0:	02c77363          	bgeu	a4,a2,f16 <memcpy+0x4c>
     ef4:	86ae                	mv	a3,a1
     ef6:	87ba                	mv	a5,a4
     ef8:	0006a803          	lw	a6,0(a3)
     efc:	0791                	addi	a5,a5,4
     efe:	0691                	addi	a3,a3,4
     f00:	ff07ae23          	sw	a6,-4(a5)
     f04:	fec7eae3          	bltu	a5,a2,ef8 <memcpy+0x2e>
     f08:	fff60793          	addi	a5,a2,-1
     f0c:	8f99                	sub	a5,a5,a4
     f0e:	9bf1                	andi	a5,a5,-4
     f10:	0791                	addi	a5,a5,4
     f12:	973e                	add	a4,a4,a5
     f14:	95be                	add	a1,a1,a5
     f16:	01176663          	bltu	a4,a7,f22 <memcpy+0x58>
     f1a:	8082                	ret
     f1c:	872a                	mv	a4,a0
     f1e:	ff157ee3          	bgeu	a0,a7,f1a <memcpy+0x50>
     f22:	0005c783          	lbu	a5,0(a1)
     f26:	0705                	addi	a4,a4,1
     f28:	0585                	addi	a1,a1,1
     f2a:	fef70fa3          	sb	a5,-1(a4)
     f2e:	ff176ae3          	bltu	a4,a7,f22 <memcpy+0x58>
     f32:	8082                	ret
     f34:	0005c683          	lbu	a3,0(a1)
     f38:	0705                	addi	a4,a4,1
     f3a:	00377793          	andi	a5,a4,3
     f3e:	fed70fa3          	sb	a3,-1(a4)
     f42:	0585                	addi	a1,a1,1
     f44:	d3c5                	beqz	a5,ee4 <memcpy+0x1a>
     f46:	0005c683          	lbu	a3,0(a1)
     f4a:	0705                	addi	a4,a4,1
     f4c:	00377793          	andi	a5,a4,3
     f50:	fed70fa3          	sb	a3,-1(a4)
     f54:	0585                	addi	a1,a1,1
     f56:	fff9                	bnez	a5,f34 <memcpy+0x6a>
     f58:	b771                	j	ee4 <memcpy+0x1a>
     f5a:	41d4                	lw	a3,4(a1)
     f5c:	0005a283          	lw	t0,0(a1)
     f60:	0085af83          	lw	t6,8(a1)
     f64:	00c5af03          	lw	t5,12(a1)
     f68:	0105ae83          	lw	t4,16(a1)
     f6c:	0145ae03          	lw	t3,20(a1)
     f70:	0185a303          	lw	t1,24(a1)
     f74:	01c5a803          	lw	a6,28(a1)
     f78:	c354                	sw	a3,4(a4)
     f7a:	5194                	lw	a3,32(a1)
     f7c:	00572023          	sw	t0,0(a4)
     f80:	01f72423          	sw	t6,8(a4)
     f84:	01e72623          	sw	t5,12(a4)
     f88:	01d72823          	sw	t4,16(a4)
     f8c:	01c72a23          	sw	t3,20(a4)
     f90:	00672c23          	sw	t1,24(a4)
     f94:	01072e23          	sw	a6,28(a4)
     f98:	d314                	sw	a3,32(a4)
     f9a:	02470713          	addi	a4,a4,36
     f9e:	02458593          	addi	a1,a1,36
     fa2:	faf76ce3          	bltu	a4,a5,f5a <memcpy+0x90>
     fa6:	b7a9                	j	ef0 <memcpy+0x26>

00000fa8 <memset>:
     fa8:	433d                	li	t1,15
     faa:	872a                	mv	a4,a0
     fac:	02c37363          	bgeu	t1,a2,fd2 <memset+0x2a>
     fb0:	00f77793          	andi	a5,a4,15
     fb4:	efbd                	bnez	a5,1032 <memset+0x8a>
     fb6:	e5ad                	bnez	a1,1020 <memset+0x78>
     fb8:	ff067693          	andi	a3,a2,-16
     fbc:	8a3d                	andi	a2,a2,15
     fbe:	96ba                	add	a3,a3,a4
     fc0:	c30c                	sw	a1,0(a4)
     fc2:	c34c                	sw	a1,4(a4)
     fc4:	c70c                	sw	a1,8(a4)
     fc6:	c74c                	sw	a1,12(a4)
     fc8:	0741                	addi	a4,a4,16
     fca:	fed76be3          	bltu	a4,a3,fc0 <memset+0x18>
     fce:	e211                	bnez	a2,fd2 <memset+0x2a>
     fd0:	8082                	ret
     fd2:	40c306b3          	sub	a3,t1,a2
     fd6:	068a                	slli	a3,a3,0x2
     fd8:	00000297          	auipc	t0,0x0
     fdc:	9696                	add	a3,a3,t0
     fde:	00a68067          	jr	10(a3)
     fe2:	00b70723          	sb	a1,14(a4)
     fe6:	00b706a3          	sb	a1,13(a4)
     fea:	00b70623          	sb	a1,12(a4)
     fee:	00b705a3          	sb	a1,11(a4)
     ff2:	00b70523          	sb	a1,10(a4)
     ff6:	00b704a3          	sb	a1,9(a4)
     ffa:	00b70423          	sb	a1,8(a4)
     ffe:	00b703a3          	sb	a1,7(a4)
    1002:	00b70323          	sb	a1,6(a4)
    1006:	00b702a3          	sb	a1,5(a4)
    100a:	00b70223          	sb	a1,4(a4)
    100e:	00b701a3          	sb	a1,3(a4)
    1012:	00b70123          	sb	a1,2(a4)
    1016:	00b700a3          	sb	a1,1(a4)
    101a:	00b70023          	sb	a1,0(a4)
    101e:	8082                	ret
    1020:	0ff5f593          	andi	a1,a1,255
    1024:	00859693          	slli	a3,a1,0x8
    1028:	8dd5                	or	a1,a1,a3
    102a:	01059693          	slli	a3,a1,0x10
    102e:	8dd5                	or	a1,a1,a3
    1030:	b761                	j	fb8 <memset+0x10>
    1032:	00279693          	slli	a3,a5,0x2
    1036:	00000297          	auipc	t0,0x0
    103a:	9696                	add	a3,a3,t0
    103c:	8286                	mv	t0,ra
    103e:	fa8680e7          	jalr	-88(a3)
    1042:	8096                	mv	ra,t0
    1044:	17c1                	addi	a5,a5,-16
    1046:	8f1d                	sub	a4,a4,a5
    1048:	963e                	add	a2,a2,a5
    104a:	f8c374e3          	bgeu	t1,a2,fd2 <memset+0x2a>
    104e:	b7a5                	j	fb6 <memset+0xe>

00001050 <main>:


int main(){
    1050:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1054:	0c000613          	li	a2,192
    1058:	00000597          	auipc	a1,0x0
    105c:	1c058593          	addi	a1,a1,448 # 1218 <__DTOR_END__+0xc0>
    1060:	0068                	addi	a0,sp,12
int main(){
    1062:	42112623          	sw	ra,1068(sp)
    1066:	42812423          	sw	s0,1064(sp)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    106a:	3585                	jal	eca <memcpy>
    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
  //  resultkon[0] = 0xaaaaaaa0;
    keys = generate_keys(N, p, q);
    106c:	06500613          	li	a2,101
    1070:	458d                	li	a1,3
    1072:	03500513          	li	a0,53
    1076:	3a29                	jal	990 <generate_keys>
    1078:	4781                	li	a5,0
  //  resultkon[0] = 0xaaaaaaa1;
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
    107a:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
    107e:	00f506b3          	add	a3,a0,a5
    1082:	4290                	lw	a2,0(a3)
    1084:	1314                	addi	a3,sp,416
    1086:	96be                	add	a3,a3,a5
    1088:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
    108a:	0791                	addi	a5,a5,4
    108c:	fee799e3          	bne	a5,a4,107e <main+0x2e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
    1090:	1cd8                	addi	a4,sp,628
    1092:	1a850793          	addi	a5,a0,424
    1096:	27c50693          	addi	a3,a0,636
    109a:	843a                	mv	s0,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
    109c:	4390                	lw	a2,0(a5)
    109e:	0791                	addi	a5,a5,4
    10a0:	0711                	addi	a4,a4,4
    10a2:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
    10a6:	fed79be3          	bne	a5,a3,109c <main+0x4c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
    10aa:	01f8                	addi	a4,sp,204
    10ac:	35050793          	addi	a5,a0,848
    10b0:	42450613          	addi	a2,a0,1060
    10b4:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    10b6:	438c                	lw	a1,0(a5)
    10b8:	0791                	addi	a5,a5,4
    10ba:	0711                	addi	a4,a4,4
    10bc:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    10c0:	fec79be3          	bne	a5,a2,10b6 <main+0x66>
    10c4:	06b0                	addi	a2,sp,840
    10c6:	4fc50513          	addi	a0,a0,1276
    10ca:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    10cc:	4398                	lw	a4,0(a5)
    10ce:	0791                	addi	a5,a5,4
    10d0:	0611                	addi	a2,a2,4
    10d2:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    10d6:	fea79be3          	bne	a5,a0,10cc <main+0x7c>
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    //resultkon[0] = 0xbbbbbbb0;
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10da:	8742                	mv	a4,a6
    10dc:	0070                	addi	a2,sp,12
    10de:	06500593          	li	a1,101
    10e2:	03500513          	li	a0,53
    10e6:	36e1                	jal	cae <ntru_encyrpt>
    10e8:	87aa                	mv	a5,a0
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
   // resultkon[0] = 0xccccccc0;
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10ea:	34810813          	addi	a6,sp,840
    10ee:	8722                	mv	a4,s0
    10f0:	458d                	li	a1,3
    10f2:	1314                	addi	a3,sp,416
    10f4:	06500613          	li	a2,101
    10f8:	03500513          	li	a0,53
    10fc:	31b5                	jal	d68 <ntru_deceypt>
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    10fe:	dedee737          	lui	a4,0xdedee
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1102:	4781                	li	a5,0
    1104:	00000597          	auipc	a1,0x0
    1108:	1d458593          	addi	a1,a1,468 # 12d8 <_edata>
            resultkon[0] = 0xDEDEDEDE;
    110c:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    1110:	08000813          	li	a6,128
        if(!(message[i] == Dec_Message[i])){
    1114:	0070                	addi	a2,sp,12
    1116:	00f506b3          	add	a3,a0,a5
    111a:	963e                	add	a2,a2,a5
    111c:	4210                	lw	a2,0(a2)
    111e:	4294                	lw	a3,0(a3)
    1120:	00d60f63          	beq	a2,a3,113e <main+0xee>
            resultkon[0] = 0xBABABABA;
    1124:	babac7b7          	lui	a5,0xbabac
    1128:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    112c:	c19c                	sw	a5,0(a1)
		}
    }
			

    return 0;
}
    112e:	42c12083          	lw	ra,1068(sp)
    1132:	42812403          	lw	s0,1064(sp)
    1136:	4501                	li	a0,0
    1138:	43010113          	addi	sp,sp,1072
    113c:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    113e:	c198                	sw	a4,0(a1)
    for(i = 0; i < 32; ++i){
    1140:	0791                	addi	a5,a5,4
    1142:	fd0799e3          	bne	a5,a6,1114 <main+0xc4>
    1146:	b7e5                	j	112e <main+0xde>

00001148 <__CTOR_LIST__>:
	...

00001150 <__CTOR_END__>:
	...

Disassembly of section .rodata:

00001158 <.rodata>:
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	ffff                	0xffff
    115e:	ffff                	0xffff
    1160:	0000                	unimp
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	ffff                	0xffff
    116a:	ffff                	0xffff
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	ffff                	0xffff
    1172:	ffff                	0xffff
    1174:	0000                	unimp
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0000                	unimp
    1182:	0000                	unimp
    1184:	ffff                	0xffff
    1186:	ffff                	0xffff
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	ffff                	0xffff
    118e:	ffff                	0xffff
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0000                	unimp
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0000                	unimp
    11a2:	0000                	unimp
    11a4:	ffff                	0xffff
    11a6:	ffff                	0xffff
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	ffff                	0xffff
    11ae:	ffff                	0xffff
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0000                	unimp
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	0000                	unimp
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	ffff                	0xffff
    11ca:	ffff                	0xffff
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	ffff                	0xffff
    11d2:	ffff                	0xffff
    11d4:	0000                	unimp
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	ffff                	0xffff
    11de:	ffff                	0xffff
    11e0:	0000                	unimp
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	ffff                	0xffff
    11ea:	ffff                	0xffff
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	ffff                	0xffff
    11f2:	ffff                	0xffff
    11f4:	0000                	unimp
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0000                	unimp
    1202:	0000                	unimp
    1204:	ffff                	0xffff
    1206:	ffff                	0xffff
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	ffff                	0xffff
    120e:	ffff                	0xffff
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0000                	unimp
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	0000                	unimp
    1220:	0002                	c.slli64	zero
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0002                	c.slli64	zero
    1236:	0000                	unimp
    1238:	0001                	nop
    123a:	0000                	unimp
    123c:	0001                	nop
    123e:	0000                	unimp
    1240:	0000                	unimp
    1242:	0000                	unimp
    1244:	0001                	nop
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	0000                	unimp
    124c:	0002                	c.slli64	zero
    124e:	0000                	unimp
    1250:	0001                	nop
    1252:	0000                	unimp
    1254:	0000                	unimp
    1256:	0000                	unimp
    1258:	0001                	nop
    125a:	0000                	unimp
    125c:	0002                	c.slli64	zero
    125e:	0000                	unimp
    1260:	0000                	unimp
    1262:	0000                	unimp
    1264:	0001                	nop
    1266:	0000                	unimp
    1268:	0001                	nop
    126a:	0000                	unimp
    126c:	0001                	nop
    126e:	0000                	unimp
    1270:	0001                	nop
    1272:	0000                	unimp
    1274:	0000                	unimp
    1276:	0000                	unimp
    1278:	0001                	nop
    127a:	0000                	unimp
    127c:	0001                	nop
    127e:	0000                	unimp
    1280:	0000                	unimp
    1282:	0000                	unimp
    1284:	0002                	c.slli64	zero
    1286:	0000                	unimp
    1288:	0001                	nop
    128a:	0000                	unimp
    128c:	0002                	c.slli64	zero
    128e:	0000                	unimp
    1290:	0001                	nop
    1292:	0000                	unimp
    1294:	0000                	unimp
    1296:	0000                	unimp
    1298:	0001                	nop
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	0000                	unimp
    12a0:	0002                	c.slli64	zero
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	0000                	unimp
    12a8:	0001                	nop
    12aa:	0000                	unimp
    12ac:	0001                	nop
    12ae:	0000                	unimp
    12b0:	0001                	nop
    12b2:	0000                	unimp
    12b4:	0002                	c.slli64	zero
    12b6:	0000                	unimp
    12b8:	0001                	nop
    12ba:	0000                	unimp
    12bc:	0001                	nop
    12be:	0000                	unimp
    12c0:	0002                	c.slli64	zero
    12c2:	0000                	unimp
    12c4:	0001                	nop
    12c6:	0000                	unimp
    12c8:	0001                	nop
    12ca:	0000                	unimp
    12cc:	0001                	nop
    12ce:	0000                	unimp
    12d0:	0001                	nop
    12d2:	0000                	unimp
    12d4:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000012d8 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    12d8:	bebe                	fsd	fa5,376(sp)
    12da:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

000012dc <_bss_start>:
	...

00001534 <product2>:
	...

0000178c <result>:
	...

000019e4 <ti_2>:
	...

00001b74 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	1a45                	addi	s4,s4,-15
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05dd                	addi	a1,a1,23
       e:	0000                	unimp
      10:	7c0c                	flw	fa1,56(s0)
      12:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
      16:	0001                	nop
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0472                	slli	s0,s0,0x1c
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	7008                	flw	fa0,32(s0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0491                	addi	s1,s1,4
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	00030d07          	0x30d07
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	c904                	sw	s1,16(a0)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0350                	addi	a2,sp,388
      7a:	0000                	unimp
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
      80:	0069                	c.nop	26
      82:	0000                	unimp
      84:	2406                	fld	fs0,64(sp)
      86:	0004                	0x4
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	6406                	flw	fs0,64(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	7d06                	flw	fs10,96(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	034a                	slli	t1,t1,0x12
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	0271                	addi	tp,tp,28
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x1b4>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
            a1[length-1] = a2[length-1];
      e4:	054e                	slli	a0,a0,0x13
            a1[length-2] = a2[length-2];
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
} //end of function
      f0:	560c                	lw	a1,40(a2)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    asm volatile(
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	c106                	sw	ra,128(sp)
            for (i = 0; i < (length / 3); i++) {
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
    asm volatile(
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	b006                	fsd	ft1,32(sp)
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0000                	unimp
     118:	5406                	lw	s0,96(sp)
    asm volatile(
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	2906                	fld	fs2,64(sp)
     126:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	3a0e                	fld	fs4,224(sp)
     132:	0002                	c.slli64	zero
     134:	1800                	addi	s0,sp,48
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	04e2                	slli	s1,s1,0x18
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	2a0c                	fld	fa1,16(a2)
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    int pola[size_a];
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
    int line[size_b][size_a + size_b];
     164:	00000223          	sb	zero,4(zero) # 4 <__DYNAMIC+0x4>
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
    int pola[size_a];
     16c:	0000                	unimp
    int line[size_b][size_a + size_b];
     16e:	0c00                	addi	s0,sp,528
    int pola[size_a];
     170:	510c                	lw	a1,32(a0)
     172:	0006                	c.slli	zero,0x1
    int polb[size_b];
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
    int pola[size_a];
     17a:	0000                	unimp
    int polb[size_b];
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
    int pola[size_a];
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	0130                	addi	a2,sp,136
    int line[size_b][size_a + size_b];
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
    int polb[size_b];
     192:	0001                	nop
            line[i][j] = 0;
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
    for (i = 0; i < size_b; ++i){
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
            product[j] = 0;
     19e:	0000                	unimp
     1a0:	610e                	flw	ft2,192(sp)
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
    array_equ(pola,a,size_a); 
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1ba:	730c                	flw	fa1,32(a4)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	016e                	slli	sp,sp,0x1b
    array_equ(polb,b,size_b);
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1d2:	0800                	addi	s0,sp,16
     1d4:	f90c                	fsw	fa1,48(a0)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
    if(star_mult == 1){
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	03ee                	slli	t2,t2,0x1b
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	a60c                	fsd	fa1,8(a2)
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
            product[j] = 0;
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
            line[i][j] = 0;
     1fc:	0656                	slli	a2,a2,0x15
     1fe:	0000                	unimp
            product[j] = 0;
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	9b0c                	0x9b0c
     20a:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0c1c                	addi	a5,sp,528
     216:	000006bb          	0x6bb
            pola[i] = pola[i] + mod;
     21a:	4604                	lw	s1,8(a2)
        while (pola[i] < 0){
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
        pola[i] = pola[i] % mod;
     222:	1100                	addi	s0,sp,160
     224:	017d                	addi	sp,sp,31
    for (i = 0; i < size_a; ++i){
     226:	0000                	unimp
     228:	0108                	addi	a0,sp,128
        pola[i] = pola[i] % mod;
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
    for (i = 0; i < size_a; ++i){
     22e:	0002                	c.slli64	zero
            polb[i] = polb[i] + mod;
     230:	0c00                	addi	s0,sp,528
     232:	0209                	addi	tp,tp,2
        while (polb[i] < 0){
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
        polb[i] = polb[i] % mod;
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     23e:	000c                	0xc
     240:	0000                	unimp
        polb[i] = polb[i] % mod;
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
    for (i = 0; i < size_b; ++i){
     246:	0268                	addi	a0,sp,268
    if(star_mult == 1){
     248:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	1280                	addi	s0,sp,352
     24c:	0594                	addi	a3,sp,704
        for(j = 0; j < size_a + size_b -1; ++j){
     24e:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	01ac                	addi	a1,sp,200
     25c:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
}
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f 0711 0004      	0x40711001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	e20c                	fsw	fa1,0(a2)
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x188>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	04fa                	slli	s1,s1,0x1e
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	1e0c                	addi	a1,sp,816
     2a2:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	0400                	addi	s0,sp,512
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	0c08                	addi	a0,sp,528
     2ae:	017d                	addi	sp,sp,31
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	a50e                	fsd	ft3,136(sp)
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
            line[i][j] = line[i][j] % mod;
     2e0:	0008                	0x8
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x2e>
            line[i][j] = line[i][j] % mod;
     2e6:	0168                	addi	a0,sp,140
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
        for(j = 0; j < size_a + size_b -1; ++j){
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
            product[j] += line[i][j];
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	cc0e                	sw	gp,24(sp)
        for(i = 0; i < size_b; ++i){
     308:	0004                	0x4
            product[j] += line[i][j];
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
        for(i = 0; i < size_b; ++i){
     320:	725f 0400 07bc      	0x7bc0400725f
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	005d                	c.nop	23
     328:	0000                	unimp
        product[j] = product[j] % mod;
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	005d                	c.nop	23
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     334:	0000                	unimp
    int line[size_b][size_a + size_b];
     336:	0c08                	addi	a0,sp,528
     338:	01a5                	addi	gp,gp,9
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
    int line[size_b][size_a + size_b];
     344:	a00c                	fsd	fa1,0(s0)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x144>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
    int line[size_b][size_a + size_b];
     362:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0000018b          	0x18b
    int pola[size_a];
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
    int line[size_b][size_a + size_b];
     376:	1c00                	addi	s0,sp,560
    int pola[size_a];
     378:	510c                	lw	a1,32(a0)
     37a:	0002                	c.slli64	zero
    int polb[size_b];
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
    int pola[size_a];
     382:	0000                	unimp
    int polb[size_b];
     384:	0c20                	addi	s0,sp,536
     386:	039f 0000 cc04      	0xcc040000039f
    int line[size_b][size_a + size_b];
     38c:	f71d                	bnez	a4,2ba <polymult+0x192>
     38e:	0005                	c.nop	1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	2400                	fld	fs0,8(s0)
    int pola[size_a];
     392:	5e0c                	lw	a1,56(a2)
     394:	0005                	c.nop	1
    int polb[size_b];
     396:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
     39c:	0000                	unimp
            product2[j] = 0;
     39e:	0c28                	addi	a0,sp,536
     3a0:	06d5                	addi	a3,a3,21
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
    for (i = 0; i < size_b; ++i){
     3a6:	3509                	jal	1a8 <polymult+0x80>
     3a8:	0006                	c.slli	zero,0x1
    array_equ(pola,a,size_a);
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
    array_equ(polb,b,size_b);
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
    if(star_mult == 1){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x4c>
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	0162                	slli	sp,sp,0x18
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_equ+0x5c>
            product2[j] = 0;
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	a00c                	fsd	fa1,0(s0)
            line[i][j] = 0;
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
            product2[j] = 0;
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for(j = 0; j < size_a + size_b -1; ++j){
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
    for (i = 0; i < size_b; ++i){
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x1e0>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	bb0c                	fsd	fa1,48(a4)
     3fc:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01e2                	slli	gp,gp,0x18
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	840a                	mv	s0,sp
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	046712e3          	bne	a4,t1,c5e <generate_keys+0x2ce>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0376                	slli	t1,t1,0x1d
        for(j=0;j<size_a+size_b-1;++j){
     424:	0000                	unimp
    for(i=0;i<size_b;++i){
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	d40c                	sw	a1,40(s0)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
        for(j=0;j<size_a+size_b-1;++j){
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	04ac                	addi	a1,sp,584
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
        for (j = size_b -1; j >= 0; j = j-1){
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0x68>
     45e:	0005                	c.nop	1
            product2[j] += line[i][j];
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
        for(j=0;j<size_a+size_b-1;++j){
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
            product2[j] += line[i][j];
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
        for(j=0;j<size_a+size_b-1;++j){
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     472:	00053217          	auipc	tp,0x53
    for(i=0;i<size_b;++i){
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
}
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	048a                	slli	s1,s1,0x2
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	01b4                	addi	a3,sp,200
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	0282                	c.slli64	t0
     4a0:	0000                	unimp
     4a2:	6c04                	flw	fs1,24(s0)
    int v[size_N];
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	0232                	slli	tp,tp,0xc
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
     4ba:	04f5                	addi	s1,s1,29
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
    int v[size_N];
     4c4:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    int v[size_N];
     4ce:	0802                	c.slli64	a6
    int q[size_N];
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
    int num_temp[size_N];
     4d6:	0511                	addi	a0,a0,4
     4d8:	0000                	unimp
    int denum_temp[size_D];
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
    int num_temp[size_N];
     4e0:	0000                	unimp
    int denum_temp[size_D];
     4e2:	1830                	addi	a2,sp,56
     4e4:	04ff                	0x4ff
     4e6:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
    int v[size_N];
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
    array_equ(num_temp,num,size_N);
     4f0:	1834                	addi	a3,sp,56
     4f2:	0419                	addi	s0,s0,6
     4f4:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
    int denum_temp[size_D];
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
    array_equ(num_temp,num,size_N);
     4fe:	1838                	addi	a4,sp,56
    int denum_temp[size_D];
     500:	00000507          	0x507
    for (i = 0; i < size_N; ++i){
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
        array_equ(denum_temp,denum,size_D);
     50c:	183c                	addi	a5,sp,56
     50e:	0342                	slli	t1,t1,0x10
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
    for (i = 0; i < size_D; ++i) {
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
    for (i = 0; i < size_N; ++i){
     51c:	00000257          	0x257
     520:	7b04                	flw	fs1,48(a4)
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	000006ef          	jal	a3,52a <polydiv+0x86>
    for (i = 0; i < size_N; ++i){
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
        if ( (b_N*u)%mod == 1 )
     532:	018a                	slli	gp,gp,0x2
    for (u = 0; u < mod; ++u){
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	0440                	addi	s0,sp,516
     53a:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
        while (num_temp[i] < 0) {
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
        num_temp[i] = num_temp[i] % mod;
     546:	028a                	slli	t0,t0,0x2
     548:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
        num_temp[i] = num_temp[i] % mod;
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     552:	1850                	addi	a2,sp,52
            denum_temp[i] = denum_temp[i] + mod;
     554:	01da                	slli	gp,gp,0x16
     556:	0000                	unimp
        while (denum_temp[i] < 0) {
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        denum_temp[i] = denum_temp[i] % mod;
     560:	1854                	addi	a3,sp,52
    for (i = 0; i < size_D; ++i) {
     562:	00000483          	lb	s1,0(zero) # 0 <__DYNAMIC>
        denum_temp[i] = denum_temp[i] % mod;
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    for (i = 0; i < size_D; ++i) {
     56a:	0882                	c.slli64	a7
        q[i] = 0;
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	00000407          	0x407
        v[i] = 0;
     574:	a804                	fsd	fs1,16(s0)
        q[i] = 0;
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
        v[i] = 0;
     57c:	0148                	addi	a0,sp,132
    for (i = 0; i < size_N; ++i){
     57e:	2019                	jal	584 <polydiv+0xe0>
     580:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    for (i = size_D-1; i >= 0; i = i-1){
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
        if ( (b_N*u)%mod == 1 )
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	0696                	slli	a3,a3,0x5
     590:	0000                	unimp
    for (u = 0; u < mod; ++u){
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
        if( num_temp[i] != 0 )
     596:	08e4                	addi	s1,sp,92
    for (i = size_N-1; i >= 0; i = i-1){
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	9319                	srli	a4,a4,0x26
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
    while (d >= d2){
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
	array_equ(result,q,size_N);
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0178                	addi	a4,sp,140
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        result[i] = num_temp[i-size_N];
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	0479                	addi	s0,s0,30
     5c6:	0000                	unimp
}
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0x66>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        v[(d-d2)] = u*r_d;
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
        for (i = 0; i < size_N; ++i){
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
        for (i = 0; i < size_N; ++i){
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
        for(i = 0; i < size_N; ++i){
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
        for (i = size_N-1; i >= 0; i = i-1){
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
            v[i] = v[i] % mod;
     648:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
            v[i] = v[i] % mod;
     64e:	0000                	unimp
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
        for (i = 0; i < size_N; ++i){
     656:	0000                	unimp
                product[i] = product[i] + mod;
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
            while (product[i] < 0) {
     65c:	04ba                	slli	s1,s1,0xe
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
            product[i] = product[i] % mod;
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     666:	0000                	unimp
     668:	601a                	flw	ft0,132(sp)
            product[i] = product[i] % mod;
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
        for (i = 0; i < size_N; ++i){
     66e:	2804                	fld	fs1,16(s0)
            num_temp[i] = num_temp[i] - product[i];
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	e218                	fsw	fa4,0(a2)
     678:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
            num_temp[i] = num_temp[i] - product[i];
     67e:	a111                	j	a82 <generate_keys+0xf2>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     684:	e618                	fsw	fa4,8(a2)
                num_temp[i] = num_temp[i] + mod;
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
            while (num_temp[i] < 0){
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
            num_temp[i] = num_temp[i] % mod;
     690:	0400                	addi	s0,sp,512
     692:	b418                	fsd	fa4,40(s0)
        for (i = 0; i < size_N; ++i){
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
            num_temp[i] = num_temp[i] % mod;
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
            q[i] = q[i] + v[i];
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
        for(i = 0; i < size_N; ++i){
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
            q[i] = q[i] + v[i];
     6ac:	1a00                	addi	s0,sp,304
            q[i] = q[i] % mod;
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
        for(i = 0; i < size_N; ++i){
     6b6:	e608                	fsw	fa0,8(a2)
            if( num_temp[i] != 0 )
     6b8:	0006                	c.slli	zero,0x1
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	1800                	addi	s0,sp,48
     6bc:	00000543          	fmadd.s	fa0,ft0,ft0,ft0,rne
            v[i] = 0;
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6c8:	1800                	addi	s0,sp,48
     6ca:	053d                	addi	a0,a0,15
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
        result[i] = num_temp[i-size_N];
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	000005ab          	0x5ab
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
    int ri_2[size]; // MX-ring poly, a
     6e2:	0000                	unimp
     6e4:	000c                	0xc
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
    int ri_2[size]; // MX-ring poly, a
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	3f18                	fld	fa4,56(a4)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ri_2[size]; // MX-ring poly, a
     70a:	0000                	unimp
     70c:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	8718                	0x8718
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
    int ri[size];
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
    int ti_1[size]; // ti_1[0] = 1
     71a:	0400                	addi	s0,sp,512
     71c:	3518                	fld	fa4,40(a0)
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    int ti[size];
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
    int qi_1[size];
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	c618                	sw	a4,8(a2)
    int temp[size];
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
    int ri_2[size]; // MX-ring poly, a
     736:	2400                	fld	fs0,8(s0)
     738:	4218                	lw	a4,0(a2)
    int temp[size];
     73a:	0002                	c.slli64	zero
    for (i = 0; i < size; ++i) {
     73c:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
    for (i = 0; i < size; ++i) {
     746:	dd18                	sw	a4,56(a0)
     748:	0004                	0x4
    array_equ(ri_2,polyR,size);
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
    array_equ(ri_1,polyf,size);
     752:	5000                	lw	s0,32(s0)
     754:	dc18                	sw	a4,56(s0)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
    ti_1[0] = 1;
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	5800                	lw	s0,48(s0)
     762:	e818                	fsw	fa4,16(s0)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
        ti_2[i] = 0;
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	e118                	fsw	fa4,0(a0)
     772:	0006                	c.slli	zero,0x1
        ti_1[i] = 0;
     774:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     776:	fe16028f          	0xfe16028f
        ti_1[i] = 0;
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
    for (i = 0; i < size; ++i) {
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
            while (ri_2[i] < 0) {
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
            ri_2[i] = ri_2[i] % mod;
     78c:	8618                	0x8618
     78e:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     790:	0400                	addi	s0,sp,512
            ri_2[i] = ri_2[i] % mod;
     792:	0291                	addi	t0,t0,4
        for (i = 0; i < N + 1; ++i) {
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	2918                	fld	fa4,16(a0)
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     7a0:	0292                	slli	t0,t0,0x4
        for (i = 0; i < N + 1; ++i) {
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	bd18                	fsd	fa4,56(a0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	fb18                	fsw	fa4,48(a4)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	ea18                	fsw	fa4,16(a2)
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
    array_equ(qi_1,res1,size);
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
     7ec:	bc00                	fsd	fs0,56(s0)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	8818                	0x8818
    array_equ(temp,res2,size);
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
        for (i = 0; i < N + 1; ++i) {
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
        for (i = 0; i < N + 1; ++i) {
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
array_equ(ri_2,ri_1,size);
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
array_equ(ri_1,ri,size);
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
array_equ(ti_2,ti_1,size);
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
array_equ(ti_1,ti,size);
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
        controlR = 0;
     840:	00086207          	0x86207
        for (i = 0; i < N + 1; ++i) {
     844:	1800                	addi	s0,sp,48
     846:	03d5                	addi	t2,t2,21
    while (controlR != 0) {
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
        for (j = 0; j < mod; ++j) {
     84c:	1b02                	slli	s6,s6,0x20
            if (((ri_2[0] * j) % mod) == 1)
     84e:	0862                	slli	a6,a6,0x18
        for (j = 0; j < mod; ++j) {
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	03c0                	addi	s0,sp,452
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
        for (i = 0; i < N + 1; ++i) {
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
    }
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x3e>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
                ri_1[i] = ri_1[i] + mod;
     88c:	321d                	jal	1b2 <polymult+0x8a>
            while (ri_1[i] < 0) {
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
            ri_1[i] = ri_1[i] % mod;
     894:	0006f60b          	0x6f60b
        for (i = 0; i < N + 1; ++i) {
     898:	1d00                	addi	s0,sp,688
     89a:	06a6                	slli	a3,a3,0x9
            ri_1[i] = ri_1[i] % mod;
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
        for (i = 0; i < N + 1; ++i) {
     8a0:	0b02                	c.slli64	s6
            ri[i - (N + 1)] = res[i];
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
            ri[i - (N + 1)] = res[i];
     8b0:	690a                	flw	fs2,128(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (i = 0; i < N + 1; ++i) {
     8cc:	1000                	addi	s0,sp,32
                temp[i] = temp[i] + mod;
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
            while (temp[i] < 0) {
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
            temp[i] = temp[i] % mod;
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
        for (i = 0; i < N + 1; ++i) {
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
            temp[i] = temp[i] % mod;
     8e0:	0000                	unimp
     8e2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8e4:	0410                	addi	a2,sp,512
                qi_1[i] = qi_1[i] + mod;
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
            while (qi_1[i] < 0) {
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
            qi_1[i] = qi_1[i] % mod;
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     8fc:	0000                	unimp
                temp[i] = temp[i] + mod;
     8fe:	0002                	c.slli64	zero
     900:	d120                	sw	s0,96(a0)
     902:	0005                	c.nop	1
            while (temp[i] < 0) {
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
            temp[i] = temp[i] % mod;
     90c:	2000                	fld	fs0,0(s0)
     90e:	05ca                	slli	a1,a1,0x12
        for (i = 0; i < N + 1; ++i) {
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
            temp[i] = temp[i] % mod;
     914:	046d1d03          	lh	s10,70(s10)
        for (i = 0; i < N + 1; ++i) {
     918:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     91a:	0f21                	addi	t5,t5,8
     91c:	0004                	0x4
     91e:	0600                	addi	s0,sp,768
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
        for (i = 0; i < N + 1; ++i) {
     930:	0069                	c.nop	26
            ti[i] = ti_2[i] - temp[i];
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
        for (i = 0; i < N + 1; ++i) {
     936:	c422                	sw	s0,8(sp)
     938:	0001                	nop
                ti[i] = ti[i] + mod;
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
            while (ti[i] < 0) {
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
            ti[i] = ti[i] % mod;
     944:	12dc                	addi	a5,sp,356
     946:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     948:	8b22                	mv	s6,s0
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
            ti[i] = ti[i] % mod;
     94e:	09260c07          	0x9260c07
              qi_1[i] = 0;
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1534                	addi	a3,sp,680
     958:	0000                	unimp
            controlR += ri[i];
     95a:	4322                	lw	t1,8(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
              qi_1[i] = 0;
     960:	0c08                	addi	a0,sp,528
        for (i = 0; i < N + 1; ++i) {
     962:	0926                	slli	s2,s2,0x9
            controlR += ri[i];
     964:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     966:	0305                	addi	t1,t1,1
            if (((ri_2[0] * j) % mod) == 1)
     968:	178c                	addi	a1,sp,992
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
        for (j = 0; j < mod; ++j) {
     978:	0000                	unimp
     97a:	6b220063          	beq	tp,s2,101a <memset+0x72>
        for (i = 0; i < N + 1; ++i) {
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	19e4                	addi	s1,sp,252
     98c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     98e:	5d09                	li	s10,-30
int* generate_keys(int N, int p, int q){
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001b7403          	0x1b7403
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	7824                	flw	fs1,112(s0)
	resultkon[0] = 0xaaaaaaa0;
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
int* generate_keys(int N, int p, int q){
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	12d8                	addi	a4,sp,356
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9d6:	0000                	unimp
     9d8:	f425                	bnez	s0,940 <ext_euclid+0x25e>
     9da:	0006                	c.slli	zero,0x1
	resultkon[0] = 0xaaaaaaa0;
     9dc:	0100                	addi	s0,sp,128
     9de:	02c2                	slli	t0,t0,0x10
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	5000                	lw	s0,32(s0)
     9e6:	0010                	0x10
	resultkon[0] = 0xaaaaaaa0;
     9e8:	f800                	fsw	fs0,48(s0)
     9ea:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	0000042b          	0x42b
     9f8:	c301                	beqz	a4,9f8 <generate_keys+0x68>
     9fa:	0a02                	c.slli64	s4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x82>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02c4                	addi	s1,sp,324
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0360                	addi	s0,sp,396
     a18:	0000                	unimp
     a1a:	c501                	beqz	a0,a22 <generate_keys+0x92>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0xa4>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02c6                	slli	t0,t0,0x11
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	5d0902c7          	0x5d0902c7
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02c8                	addi	a0,sp,324
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	e628                	fsw	fa0,72(a2)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	02ca                	slli	t0,t0,0x12
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <ext_euclid+0x292>
     a5a:	057c2677          	0x57c2677
     a5e:	0000                	unimp
     a60:	cb01                	beqz	a4,a70 <generate_keys+0xe0>
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
    int polyR[N+1];
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6c:	ae26                	fsd	fs1,280(sp)
    int polyR[N+1];
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
     a72:	02cc                	addi	a1,sp,324
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
    polyR[N] = 1;
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	cd01                	beqz	a0,a9a <generate_keys+0x10a>
     a84:	0902                	c.slli64	s2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	9d26                	add	s10,s10,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	02ce                	slli	t0,t0,0x13
     a92:	af09                	j	11a4 <__DTOR_END__+0x4c>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0292                	slli	t0,t0,0x4
     a9e:	0000                	unimp
     aa0:	cf01                	beqz	a4,ab8 <generate_keys+0x128>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	4a26                	lw	s4,72(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	02d0                	addi	a2,sp,324
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x22>
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	d101                	beqz	a0,9bc <generate_keys+0x2c>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	00106c2b          	0x106c2b
     acc:	3200                	fld	fs0,32(a2)
     ace:	001a                	c.slli	zero,0x6
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	1803055b          	0x1803055b
     ae2:	0012                	c.slli	zero,0x4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
    polyR[0] = -1;
     aea:	00c0                	addi	s0,sp,68
     aec:	0010782b          	0x10782b
    for(i = 1; i < N; ++i){
     af0:	9d00                	0x9d00
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
    for (i = N; i < 55; ++i ){
     af6:	2c00000b          	0x2c00000b
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
    for(i = 0; i < N; ++i){
     afe:	2c35                	jal	d3a <ntru_encyrpt+0x8c>
        random_keys[i] = f[i];
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x120>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
    for(i = 0; i < N; ++i){
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	10e8                	addi	a0,sp,108
     b0e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     b10:	0d6a                	slli	s10,s10,0x1a
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
        random_keys[i] = g[i-N];
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
    for(i = N; i < (2*N); ++i){
     b20:	6508025b          	0x6508025b
    for(i = (2*N); i < (3*N); ++i){
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
     b28:	dc91                	beqz	s1,a44 <generate_keys+0xb4>
    fp = ext_euclid(polyR, f, (N+1), p);
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x107>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	10fe                	slli	ra,ra,0x3f
    for(i = (2*N); i < (3*N); ++i){
     b36:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
    for(i = (2*N); i < (3*N); ++i){
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
    fq = ext_euclid(polyR, f, (N+1), q);
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <ntru_deceypt+0x9c>
     b4e:	5d01                	li	s10,-32
    for(i = (3*N); i < (4*N); ++i){
     b50:	7af09103          	lh	sp,1967(ra) # 114f <__CTOR_LIST__+0x7>
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
        random_keys[i] = fq[i-(3*N)];
     b58:	0078                	addi	a4,sp,12
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
    for(i = (3*N); i < (4*N); ++i){
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
    fg = polymult2(fq, N, g, N, 0);
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
    for(i = 0; i < (2*N-1); ++i){
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
    for(i = (4*N); i < (5*N); ++i){
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
    for(i = (4*N); i < (5*N); ++i){
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
    for(i = (5*N); i < (6*N+1); ++i){
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
        random_keys[i] = polyR[i-(5*N)];
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
	resultkon[0] = 0xaaaaaaa1;
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
}
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	0211                	addi	tp,tp,4
     be8:	0000                	unimp
     bea:	9401                	srai	s0,s0,0x20
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x274>
     bf2:	0d68                	addi	a0,sp,668
     bf4:	0000                	unimp
     bf6:	00ec                	addi	a1,sp,76
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d6a                	slli	s10,s10,0x1a
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	0294                	addi	a3,sp,320
        polyR[i] = 0;
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
    for(i = 1; i < N; ++i){
     c10:	0070                	addi	a2,sp,12
     c12:	9401                	srai	s0,s0,0x20
        f[i] = 0;
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
        g[i] = 0;
     c22:	0294                	addi	a3,sp,320
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
    for (i = N; i < 55; ++i ){
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
        random_keys[i] = f[i];
     c30:	0000                	unimp
     c32:	9401                	srai	s0,s0,0x20
     c34:	2d02                	fld	fs10,0(sp)
     c36:	00000b63          	beqz	zero,c4c <generate_keys+0x2bc>
     c3a:	0000028b          	0x28b
     c3e:	9d31                	0x9d31
    for(i = 0; i < N; ++i){
     c40:	0005                	c.nop	1
        random_keys[i] = f[i];
     c42:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     c44:	0294                	addi	a3,sp,320
        random_keys[i] = g[i-N];
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
    for(i = N; i < (2*N); ++i){
     c50:	0000042b          	0x42b
     c54:	9401                	srai	s0,s0,0x20
        random_keys[i] = fp[i-(2*N)];
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <generate_keys+0x2de>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c60:	ae31                	j	f7c <memcpy+0xb2>
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
        random_keys[i] = fq[i-(3*N)];
     c66:	0294                	addi	a3,sp,320
     c68:	6366                	flw	ft6,88(sp)
     c6a:	0f00000b          	0xf00000b
     c6e:	26000003          	lb	zero,608(zero) # 260 <polymult+0x138>
     c72:	02fd                	addi	t0,t0,31
    for(i = (3*N); i < (4*N); ++i){
     c74:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     c76:	9601                	srai	a2,a2,0x20
    for(i = (3*N); i < (4*N); ++i){
     c78:	0a02                	c.slli64	s4
        fg[i] = fg[i]*p;
     c7a:	00000b63          	beqz	zero,c90 <generate_keys+0x300>
    for(i = 0; i < (2*N-1); ++i){
     c7e:	0346                	slli	t1,t1,0x11
        fg[i] = fg[i]*p;
     c80:	0000                	unimp
     c82:	612a                	flw	ft2,136(sp)
     c84:	0100                	addi	s0,sp,128
     c86:	630a0297          	auipc	t0,0x630a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c8a:	5900000b          	0x5900000b
     c8e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
     c92:	3261                	jal	61a <polydiv+0x176>
     c94:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     c96:	0298                	addi	a4,sp,320
     c98:	630a                	flw	ft6,128(sp)
        random_keys[i] = polyR[i-(5*N)];
     c9a:	6c00000b          	0x6c00000b
     c9e:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
     ca2:	99010063          	beq	sp,a6,fffffe22 <_stack_start+0xfffefe22>
     ca6:	0a02                	c.slli64	s4
    for(i = (5*N); i < (6*N+1); ++i){
     ca8:	00000b63          	beqz	zero,cbe <ntru_encyrpt+0x10>
     cac:	0395                	addi	t2,t2,5
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cae:	0000                	unimp
	resultkon[0] = 0xbbbbbbb0;
     cb0:	632a                	flw	ft6,136(sp)
     cb2:	0032                	c.slli	zero,0xc
     cb4:	9a01                	andi	a2,a2,-32
     cb6:	0a02                	c.slli64	s4
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	00000b63          	beqz	zero,cce <ntru_encyrpt+0x20>
     cbc:	03a8                	addi	a0,sp,456
     cbe:	0000                	unimp
     cc0:	692a                	flw	fs2,136(sp)
     cc2:	0100                	addi	s0,sp,128
     cc4:	5d09029b          	0x5d09029b
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cc8:	0000                	unimp
     cca:	c600                	sw	s0,8(a2)
     ccc:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x188>
     cd0:	0db4                	addi	a3,sp,728
	resultkon[0] = 0xbbbbbbb0;
     cd2:	0000                	unimp
     cd4:	1621                	addi	a2,a2,-24
     cd6:	0000                	unimp
     cd8:	0cfc                	addi	a5,sp,604
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cda:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cdc:	012c                	addi	a1,sp,136
     cde:	035a                	slli	t1,t1,0x16
     ce0:	2c5d01f3          	0x2c5d01f3
     ce4:	5b01                	li	s6,-32
	resultkon[0] = 0xbbbbbbb0;
     ce6:	7802                	flw	fa6,32(sp)
     ce8:	2c00                	fld	fs0,24(s0)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cea:	5c01                	li	s8,-32
    temp = polymult(public_key,N,random_val,48,q,0);
     cec:	5f01f303          	0x5f01f303
     cf0:	012c                	addi	a1,sp,136
     cf2:	025d                	addi	tp,tp,23
     cf4:	0078                	addi	a4,sp,12
     cf6:	012c                	addi	a1,sp,136
     cf8:	015e                	slli	sp,sp,0x17
     cfa:	0030                	addi	a2,sp,8
     cfc:	000dc42b          	0xdc42b
    for(i = 0; i < 48; ++i){
     d00:	0800                	addi	s0,sp,16
     d02:	0014                	0x14
        temp[i] = temp[i] + message[i];
     d04:	2200                	fld	fs0,0(a2)
     d06:	000d                	c.nop	3
     d08:	2c00                	fld	fs0,24(s0)
     d0a:	5b01                	li	s6,-32
     d0c:	7902                	flw	fs2,32(sp)
     d0e:	2c00                	fld	fs0,24(s0)
     d10:	5c01                	li	s8,-32
     d12:	8502                	jr	a0
     d14:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < 48; ++i){
     d16:	5d01                	li	s10,-32
     d18:	8702                	jr	a4
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d1a:	2c00                	fld	fs0,24(s0)
     d1c:	5e01                	li	t3,-32
     d1e:	8202                	jr	tp
     d20:	0000                	unimp
     d22:	000de82b          	0xde82b
     d26:	2100                	fld	fs0,0(a0)
     d28:	0016                	c.slli	zero,0x5
     d2a:	4700                	lw	s0,8(a4)
    for(i = (2*N); i < (3*N); ++i){
     d2c:	000d                	c.nop	3
     d2e:	2c00                	fld	fs0,24(s0)
     d30:	5a01                	li	s4,-32
     d32:	8802                	jr	a6
     d34:	2c00                	fld	fs0,24(s0)
     d36:	5b01                	li	s6,-32
}
     d38:	7802                	flw	fa6,32(sp)
     d3a:	2c00                	fld	fs0,24(s0)
	resultkon[0] = 0xbbbbbbb1;
     d3c:	5d01                	li	s10,-32
     d3e:	7802                	flw	fa6,32(sp)
     d40:	2c00                	fld	fs0,24(s0)
     d42:	5e01                	li	t3,-32
     d44:	3001                	jal	544 <polydiv+0xa0>
     d46:	2d00                	fld	fs0,24(a0)
}
     d48:	0df4                	addi	a3,sp,732
     d4a:	0000                	unimp
     d4c:	1408                	addi	a0,sp,544
     d4e:	0000                	unimp
     d50:	012c                	addi	a1,sp,136
     d52:	0079025b          	0x79025b
        CT[i-(2*N)] = CT[i];
     d56:	012c                	addi	a1,sp,136
     d58:	025c                	addi	a5,sp,260
     d5a:	0085                	addi	ra,ra,1
     d5c:	012c                	addi	a1,sp,136
    for(i = (2*N); i < (3*N); ++i){
     d5e:	025d                	addi	tp,tp,23
     d60:	012c0087          	0x12c0087
        CT[i-(2*N)] = CT[i];
     d64:	025e                	slli	tp,tp,0x17
    for(i = (2*N); i < (3*N); ++i){
     d66:	0086                	slli	ra,ra,0x1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d68:	0000                	unimp
     d6a:	0006702f          	0x6702f
     d6e:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	0271                	addi	tp,tp,28
     d72:	6306                	flw	ft6,64(sp)
     d74:	ae00000b          	0xae00000b
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d78:	000c                	0xc
	resultkon[0] = 0xccccccc0;
     d7a:	ba00                	fsd	fs0,48(a2)
     d7c:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7e:	0100                	addi	s0,sp,128
	resultkon[0] = 0xccccccc0;
     d80:	9d9c                	0x9d9c
     d82:	000e                	c.slli	zero,0x3
     d84:	3000                	fld	fs0,32(s0)
     d86:	004e                	c.slli	zero,0x13
     d88:	7101                	addi	sp,sp,-512
     d8a:	1702                	slli	a4,a4,0x20
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d8c:	005d                	c.nop	23
     d8e:	0000                	unimp
     d90:	0000044b          	fnmsub.s	fs0,ft0,ft0,ft0,rne
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d94:	7130                	flw	fa2,96(a0)
	resultkon[0] = 0xccccccc0;
     d96:	0100                	addi	s0,sp,128
     d98:	0271                	addi	tp,tp,28
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9a:	5d1e                	lw	s10,228(sp)
     d9c:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	7700                	flw	fs0,40(a4)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     da0:	0004                	0x4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     da2:	3100                	fld	fs0,32(a0)
     da4:	03e6                	slli	t2,t2,0x19
     da6:	0000                	unimp
     da8:	7101                	addi	sp,sp,-512
     daa:	2602                	fld	fa2,0(sp)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     dac:	00000b63          	beqz	zero,dc2 <ntru_deceypt+0x5a>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     db0:	04ae                	slli	s1,s1,0xb
     db2:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db4:	7c31                	lui	s8,0xfffec
     db6:	0005                	c.nop	1
     db8:	0100                	addi	s0,sp,128
     dba:	0271                	addi	tp,tp,28
     dbc:	6334                	flw	fa3,64(a4)
     dbe:	da00000b          	0xda00000b
     dc2:	0004                	0x4
     dc4:	3100                	fld	fs0,32(a0)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc6:	06ae                	slli	a3,a3,0xb
     dc8:	0000                	unimp
     dca:	7101                	addi	sp,sp,-512
     dcc:	4502                	lw	a0,0(sp)
     dce:	00000b63          	beqz	zero,de4 <ntru_deceypt+0x7c>
        if(a2[i] <= q/2)
     dd2:	0511                	addi	a0,a0,4
     dd4:	0000                	unimp
    for (i = 0; i < N; ++i){
     dd6:	ed26                	fsw	fs1,152(sp)
     dd8:	0002                	c.slli64	zero
     dda:	0100                	addi	s0,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     ddc:	630a0273          	0x630a0273
     de0:	4800000b          	0x4800000b
     de4:	0005                	c.nop	1
     de6:	3200                	fld	fs0,32(a2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de8:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     dec:	0274                	addi	a3,sp,268
     dee:	630a                	flw	ft6,128(sp)
     df0:	0100000b          	0x100000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     df4:	285a                	fld	fa6,400(sp)
     df6:	03b5                	addi	t2,t2,13
     df8:	0000                	unimp
}
     dfa:	7601                	lui	a2,0xfffe0
     dfc:	0902                	c.slli64	s2
	resultkon[0] = 0xccccccc1;
     dfe:	0b69                	addi	s6,s6,26
     e00:	0000                	unimp
     e02:	7ea09103          	lh	sp,2026(ra)
     e06:	6c26                	flw	fs8,72(sp)
     e08:	0002                	c.slli64	zero
}
     e0a:	0100                	addi	s0,sp,128
     e0c:	630a0277          	0x630a0277
     e10:	5b00000b          	0x5b00000b
     e14:	0005                	c.nop	1
     e16:	2a00                	fld	fs0,16(a2)
     e18:	0069                	c.nop	26
     e1a:	7801                	lui	a6,0xfffe0
     e1c:	0902                	c.slli64	s2
        a2[i-(2*N)] = a2[i];
     e1e:	005d                	c.nop	23
     e20:	0000                	unimp
     e22:	056e                	slli	a0,a0,0x1b
     e24:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e26:	000cec2b          	0xcec2b
        a2[i-(2*N)] = a2[i];
     e2a:	3200                	fld	fs0,32(a2)
     e2c:	001a                	c.slli	zero,0x6
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	4900                	lw	s0,16(a0)
        if(a2[i] <= q/2)
     e30:	000e                	c.slli	zero,0x3
     e32:	2c00                	fld	fs0,24(s0)
     e34:	5a01                	li	s4,-32
            a2[i] = (-1)*(q-a2[i]);
     e36:	7202                	flw	ft4,32(sp)
     e38:	2c00                	fld	fs0,24(s0)
     e3a:	5b01                	li	s6,-32
    for (i = 0; i < N; ++i){
     e3c:	0305                	addi	t1,t1,1
     e3e:	1158                	addi	a4,sp,164
     e40:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     e42:	012c                	addi	a1,sp,136
     e44:	025c                	addi	a5,sp,260
     e46:	c008                	sw	a0,0(s0)
     e48:	2b00                	fld	fs0,16(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4a:	0cfe                	slli	s9,s9,0x1f
     e4c:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     e4e:	179a                	slli	a5,a5,0x26
     e50:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e52:	0e7a                	slli	t3,t3,0x1e
     e54:	0000                	unimp
     e56:	012c                	addi	a1,sp,136
     e58:	025a                	slli	tp,tp,0x16
     e5a:	0084                	addi	s1,sp,64
     e5c:	012c                	addi	a1,sp,136
     e5e:	0078025b          	0x78025b
     e62:	012c                	addi	a1,sp,136
     e64:	025c                	addi	a5,sp,260
     e66:	0072                	c.slli	zero,0x1c
     e68:	012c                	addi	a1,sp,136
     e6a:	025d                	addi	tp,tp,23
     e6c:	3008                	fld	fa0,32(s0)
     e6e:	012c                	addi	a1,sp,136
     e70:	025e                	slli	tp,tp,0x17
     e72:	0082                	c.slli64	ra
     e74:	012c                	addi	a1,sp,136
     e76:	015f 0030 2c2d      	0x2c2d0030015f
     e7c:	000d                	c.nop	3
     e7e:	0800                	addi	s0,sp,16
     e80:	0014                	0x14
     e82:	2c00                	fld	fs0,24(s0)
     e84:	5b01                	li	s6,-32
     e86:	7902                	flw	fs2,32(sp)
     e88:	2c00                	fld	fs0,24(s0)
     e8a:	5c01                	li	s8,-32
     e8c:	8302                	jr	t1
     e8e:	2c00                	fld	fs0,24(s0)
     e90:	5d01                	li	s10,-32
     e92:	7802                	flw	fa6,32(sp)
     e94:	2c01                	jal	10a4 <main+0x54>
     e96:	5e01                	li	t3,-32
     e98:	8202                	jr	tp
     e9a:	0000                	unimp
     e9c:	2f00                	fld	fs0,24(a4)
     e9e:	00000357          	0x357
     ea2:	1901                	addi	s2,s2,-32
     ea4:	0602                	c.slli64	a2
     ea6:	00000b63          	beqz	zero,ebc <zero_loop+0x8>
     eaa:	0990                	addi	a2,sp,208
     eac:	0000                	unimp
     eae:	031e                	slli	t1,t1,0x7
     eb0:	0000                	unimp
     eb2:	9c01                	0x9c01
     eb4:	104d                	c.nop	-13
     eb6:	0000                	unimp
     eb8:	4e30                	lw	a2,88(a2)
     eba:	0100                	addi	s0,sp,128
     ebc:	0219                	addi	tp,tp,6
     ebe:	5d18                	lw	a4,56(a0)
     ec0:	0000                	unimp
     ec2:	b000                	fsd	fs0,32(s0)
     ec4:	0005                	c.nop	1
     ec6:	3000                	fld	fs0,32(s0)
     ec8:	0070                	addi	a2,sp,12
     eca:	1901                	addi	s2,s2,-32
     ecc:	1f02                	slli	t5,t5,0x20
     ece:	005d                	c.nop	23
     ed0:	0000                	unimp
     ed2:	0601                	addi	a2,a2,0
     ed4:	0000                	unimp
     ed6:	7130                	flw	fa2,96(a0)
     ed8:	0100                	addi	s0,sp,128
     eda:	0219                	addi	tp,tp,6
     edc:	5d26                	lw	s10,104(sp)
     ede:	0000                	unimp
     ee0:	3800                	fld	fs0,48(s0)
     ee2:	0006                	c.slli	zero,0x1
     ee4:	3200                	fld	fs0,32(a2)
     ee6:	0066                	c.slli	zero,0x19
     ee8:	1b01                	addi	s6,s6,-32
     eea:	0902                	c.slli64	s2
     eec:	104d                	c.nop	-13
     eee:	0000                	unimp
     ef0:	7c889103          	lh	sp,1992(a7)
     ef4:	6732                	flw	fa4,12(sp)
     ef6:	0100                	addi	s0,sp,128
     ef8:	021c                	addi	a5,sp,256
     efa:	4d09                	li	s10,2
     efc:	0010                	0x10
     efe:	0300                	addi	s0,sp,384
     f00:	e491                	bnez	s1,f0c <memcpy+0x42>
     f02:	2a7d                	jal	10c0 <main+0x70>
     f04:	7066                	flw	ft0,120(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	021e                	slli	tp,tp,0x7
     f0a:	630a                	flw	ft6,128(sp)
     f0c:	6f00000b          	0x6f00000b
     f10:	0006                	c.slli	zero,0x1
     f12:	2a00                	fld	fs0,16(a2)
     f14:	7166                	flw	ft2,120(sp)
     f16:	0100                	addi	s0,sp,128
     f18:	021f 630a 000b      	0xb630a021f
     f1e:	8200                	0x8200
     f20:	0006                	c.slli	zero,0x1
     f22:	2a00                	fld	fs0,16(a2)
     f24:	6766                	flw	fa4,88(sp)
     f26:	0100                	addi	s0,sp,128
     f28:	0220                	addi	s0,sp,264
     f2a:	630a                	flw	ft6,128(sp)
     f2c:	a000000b          	0xa000000b
     f30:	0006                	c.slli	zero,0x1
     f32:	2a00                	fld	fs0,16(a2)
     f34:	6b70                	flw	fa2,84(a4)
     f36:	0100                	addi	s0,sp,128
     f38:	0221                	addi	tp,tp,8
     f3a:	630a                	flw	ft6,128(sp)
     f3c:	be00000b          	0xbe00000b
     f40:	0006                	c.slli	zero,0x1
     f42:	2600                	fld	fs0,8(a2)
     f44:	06ae                	slli	a3,a3,0xb
     f46:	0000                	unimp
     f48:	2201                	jal	1048 <memset+0xa0>
     f4a:	0902                	c.slli64	s2
     f4c:	105d                	c.nop	-9
     f4e:	0000                	unimp
     f50:	06dc                	addi	a5,sp,836
     f52:	0000                	unimp
     f54:	692a                	flw	fs2,136(sp)
     f56:	0100                	addi	s0,sp,128
     f58:	5d090223          	sb	a6,1476(s2) # 25c4 <_bss_end+0x558>
     f5c:	0000                	unimp
     f5e:	3f00                	fld	fs0,56(a4)
     f60:	26000007          	0x26000007
     f64:	000003f7          	0x3f7
     f68:	2401                	jal	1168 <__DTOR_END__+0x10>
     f6a:	0a02                	c.slli64	s4
     f6c:	00000b63          	beqz	zero,f82 <memcpy+0xb8>
     f70:	0886                	slli	a7,a7,0x1
     f72:	0000                	unimp
     f74:	00006933          	or	s2,zero,zero
     f78:	9e00                	0x9e00
     f7a:	0008                	0x8
     f7c:	2b00                	fld	fs0,16(a4)
     f7e:	09ee                	slli	s3,s3,0x1b
     f80:	0000                	unimp
     f82:	1a3d                	addi	s4,s4,-17
     f84:	0000                	unimp
     f86:	0f9d                	addi	t6,t6,7
     f88:	0000                	unimp
     f8a:	012c                	addi	a1,sp,136
     f8c:	035a                	slli	t1,t1,0x16
     f8e:	9478                	0x9478
     f90:	2c7c                	fld	fa5,216(s0)
     f92:	5b01                	li	s6,-32
     f94:	3001                	jal	794 <ext_euclid+0xb2>
     f96:	012c                	addi	a1,sp,136
     f98:	025c                	addi	a5,sp,260
     f9a:	d008                	sw	a0,32(s0)
     f9c:	2b00                	fld	fs0,16(a4)
     f9e:	0a6e                	slli	s4,s4,0x1b
     fa0:	0000                	unimp
     fa2:	1a3d                	addi	s4,s4,-17
     fa4:	0000                	unimp
     fa6:	0fbd                	addi	t6,t6,15
     fa8:	0000                	unimp
     faa:	012c                	addi	a1,sp,136
     fac:	035a                	slli	t1,t1,0x16
     fae:	e878                	fsw	fa4,84(s0)
     fb0:	2c7d                	jal	126e <__DTOR_END__+0x116>
     fb2:	5b01                	li	s6,-32
     fb4:	3001                	jal	7b4 <ext_euclid+0xd2>
     fb6:	012c                	addi	a1,sp,136
     fb8:	025c                	addi	a5,sp,260
     fba:	d808                	sw	a0,48(s0)
     fbc:	2b00                	fld	fs0,16(a4)
     fbe:	0b36                	slli	s6,s6,0xd
     fc0:	0000                	unimp
     fc2:	1070                	addi	a2,sp,44
     fc4:	0000                	unimp
     fc6:	0fe4                	addi	s1,sp,988
     fc8:	0000                	unimp
     fca:	012c                	addi	a1,sp,136
     fcc:	025a                	slli	tp,tp,0x16
     fce:	0072                	c.slli	zero,0x1c
     fd0:	012c                	addi	a1,sp,136
     fd2:	8878035b          	0x8878035b
     fd6:	2c7c                	fld	fa5,216(s0)
     fd8:	5c01                	li	s8,-32
     fda:	8602                	jr	a2
     fdc:	2c00                	fld	fs0,24(s0)
     fde:	5d01                	li	s10,-32
     fe0:	8802                	jr	a6
     fe2:	0000                	unimp
     fe4:	000b502b          	0xb502b
     fe8:	7000                	flw	fs0,32(s0)
     fea:	0010                	0x10
     fec:	0b00                	addi	s0,sp,400
     fee:	0010                	0x10
     ff0:	2c00                	fld	fs0,24(s0)
     ff2:	5a01                	li	s4,-32
     ff4:	7202                	flw	ft4,32(sp)
     ff6:	2c00                	fld	fs0,24(s0)
     ff8:	5b01                	li	s6,-32
     ffa:	7c887803          	0x7c887803
     ffe:	012c                	addi	a1,sp,136
    1000:	025c                	addi	a5,sp,260
    1002:	0086                	slli	ra,ra,0x1
    1004:	012c                	addi	a1,sp,136
    1006:	025d                	addi	tp,tp,23
    1008:	2b000087          	0x2b000087
    100c:	0b70                	addi	a2,sp,412
    100e:	0000                	unimp
    1010:	1621                	addi	a2,a2,-24
    1012:	0000                	unimp
    1014:	1030                	addi	a2,sp,40
    1016:	0000                	unimp
    1018:	012c                	addi	a1,sp,136
    101a:	0082025b          	0x82025b
    101e:	012c                	addi	a1,sp,136
    1020:	025c                	addi	a5,sp,260
    1022:	0089                	addi	ra,ra,2
    1024:	012c                	addi	a1,sp,136
    1026:	025d                	addi	tp,tp,23
    1028:	0082                	c.slli64	ra
    102a:	012c                	addi	a1,sp,136
    102c:	015e                	slli	sp,sp,0x17
    102e:	0030                	addi	a2,sp,8
    1030:	842d                	srai	s0,s0,0xb
    1032:	0800000b          	0x800000b
    1036:	0014                	0x14
    1038:	2c00                	fld	fs0,24(s0)
    103a:	5c01                	li	s8,-32
    103c:	7202                	flw	ft4,32(sp)
    103e:	2c00                	fld	fs0,24(s0)
    1040:	5d01                	li	s10,-32
    1042:	8602                	jr	a2
    1044:	2c00                	fld	fs0,24(s0)
    1046:	5e01                	li	t3,-32
    1048:	8702                	jr	a4
    104a:	0000                	unimp
    104c:	0900                	addi	s0,sp,144
    104e:	005d                	c.nop	23
int main(){
    1050:	0000                	unimp
    1052:	105d                	c.nop	-9
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1054:	0000                	unimp
    1056:	690a                	flw	fs2,128(sp)
    1058:	0000                	unimp
    105a:	3600                	fld	fs0,40(a2)
    105c:	0900                	addi	s0,sp,144
    105e:	005d                	c.nop	23
    1060:	0000                	unimp
int main(){
    1062:	1070                	addi	a2,sp,44
    1064:	0000                	unimp
    1066:	6934                	flw	fa3,80(a0)
    1068:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    106a:	7400                	flw	fs0,40(s0)
    keys = generate_keys(N, p, q);
    106c:	0000000f          	fence	unknown,unknown
    1070:	0003942f          	0x3942f
    1074:	0100                	addi	s0,sp,128
    1076:	0178                	addi	a4,sp,140
    1078:	6306                	flw	ft6,64(sp)
    for(i = 0; i < N; ++i){
    107a:	e200000b          	0xe200000b
        secret_key_f[i] = keys[i];
    107e:	0006                	c.slli	zero,0x1
    1080:	ae00                	fsd	fs0,24(a2)
    1082:	0002                	c.slli64	zero
    1084:	0100                	addi	s0,sp,128
    1086:	839c                	0x839c
    1088:	31000013          	li	zero,784
    for(i = 0; i < N; ++i){
    108c:	06ae                	slli	a3,a3,0xb
    108e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
    1090:	7801                	lui	a6,0xfffe0
    1092:	1601                	addi	a2,a2,-32
    1094:	00000b63          	beqz	zero,10aa <main+0x5a>
    1098:	08e4                	addi	s1,sp,92
    109a:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
    109c:	d431                	beqz	s0,fe8 <memset+0x40>
    109e:	0001                	nop
    10a0:	0100                	addi	s0,sp,128
    10a2:	0178                	addi	a4,sp,140
    10a4:	6322                	flw	ft6,8(sp)
    for(i = (2*N); i < (3*N); ++i){
    10a6:	2900000b          	0x2900000b
    for(i = (3*N); i < (4*N); ++i){
    10aa:	0009                	c.nop	2
    10ac:	3100                	fld	fs0,32(a0)
    10ae:	0012                	c.slli	zero,0x4
    10b0:	0000                	unimp
    10b2:	7801                	lui	a6,0xfffe0
    10b4:	2d01                	jal	16c4 <product2+0x190>
        public_key[i-(4*N)] = keys[i];
    10b6:	005d                	c.nop	23
    10b8:	0000                	unimp
    10ba:	096e                	slli	s2,s2,0x1b
    10bc:	0000                	unimp
    10be:	6d30                	flw	fa2,88(a0)
    for(i = (4*N); i < (5*N); ++i){
    10c0:	0100646f          	jal	s0,70d0 <_stack_len+0x30d0>
    10c4:	0178                	addi	a4,sp,140
    10c6:	00005d37          	lui	s10,0x5
    10ca:	b200                	fsd	fs0,32(a2)
        ring_poly[i-(5*N)] = keys[i];
    10cc:	0009                	c.nop	2
    10ce:	2600                	fld	fs0,8(a2)
    10d0:	02d6                	slli	t0,t0,0x15
    10d2:	0000                	unimp
    10d4:	7a01                	lui	s4,0xfffe0
    for(i = (5*N); i < (6*N+1); ++i){
    10d6:	0a01                	addi	s4,s4,0
    10d8:	00000b63          	beqz	zero,10ee <main+0x9e>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10dc:	09e9                	addi	s3,s3,26
    10de:	0000                	unimp
    10e0:	4e2a                	lw	t3,136(sp)
    10e2:	0100                	addi	s0,sp,128
    10e4:	5d09017b          	0x5d09017b
    10e8:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10ea:	0100                	addi	s0,sp,128
    10ec:	000a                	c.slli	zero,0x2
    10ee:	2a00                	fld	fs0,16(a2)
    10f0:	0069                	c.nop	26
    10f2:	7b01                	lui	s6,0xfffe0
    10f4:	0c01                	addi	s8,s8,0
    10f6:	005d                	c.nop	23
    10f8:	0000                	unimp
    10fa:	00000a2f          	0xa2f
            resultkon[0] = 0xDEDEDEDE;
    10fe:	6a2a                	flw	fs4,136(sp)
    1100:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1102:	5d0f017b          	0x5d0f017b
    1106:	0000                	unimp
    1108:	4b00                	lw	s0,16(a4)
    110a:	000c                	0xc
            resultkon[0] = 0xDEDEDEDE;
    110c:	2600                	fld	fs0,8(a2)
    110e:	0549                	addi	a0,a0,18
    for(i = 0; i < 32; ++i){
    1110:	0000                	unimp
    1112:	7c01                	lui	s8,0xfffe0
        if(!(message[i] == Dec_Message[i])){
    1114:	0901                	addi	s2,s2,0
    1116:	00001383          	lh	t2,0(zero) # 0 <__DYNAMIC>
    111a:	0c69                	addi	s8,s8,26
    111c:	0000                	unimp
    111e:	b826                	fsd	fs1,48(sp)
    1120:	0005                	c.nop	1
    1122:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    1124:	017d                	addi	sp,sp,31
    1126:	9609                	srai	a2,a2,0x22
    1128:	89000013          	li	zero,-1904
    112c:	000c                	0xc
}
    112e:	2a00                	fld	fs0,16(a2)
    1130:	6972                	flw	fs2,28(sp)
    1132:	0100                	addi	s0,sp,128
    1134:	017e                	slli	sp,sp,0x1f
    1136:	a909                	j	1548 <product2+0x14>
    1138:	a9000013          	li	zero,-1392
    113c:	000c                	0xc
            resultkon[0] = 0xDEDEDEDE;
    113e:	2600                	fld	fs0,8(a2)
    for(i = 0; i < 32; ++i){
    1140:	0466                	slli	s0,s0,0x19
    1142:	0000                	unimp
    1144:	8001                	c.srli64	s0
    1146:	0901                	addi	s2,s2,0
    1148:	13bc                	addi	a5,sp,488
    114a:	0000                	unimp
    114c:	0cc9                	addi	s9,s9,18
    114e:	0000                	unimp
    1150:	742a                	flw	fs0,168(sp)
    1152:	0069                	c.nop	26
    1154:	8101                	c.srli64	a0
    1156:	0901                	addi	s2,s2,0
    1158:	000013cf          	fnmadd.s	ft7,ft0,ft0,ft0,rtz
    115c:	0cff                	0xcff
    115e:	0000                	unimp
    1160:	7e26                	flw	ft8,104(sp)
    1162:	0004                	0x4
    1164:	0100                	addi	s0,sp,128
    1166:	0182                	c.slli64	gp
    1168:	e209                	bnez	a2,116a <__DTOR_END__+0x12>
    116a:	1f000013          	li	zero,496
    116e:	000d                	c.nop	3
    1170:	2600                	fld	fs0,8(a2)
    1172:	026c                	addi	a1,sp,268
    1174:	0000                	unimp
    1176:	8301                	c.srli64	a4
    1178:	0901                	addi	s2,s2,0
    117a:	13f5                	addi	t2,t2,-3
    117c:	0000                	unimp
    117e:	0d55                	addi	s10,s10,21
    1180:	0000                	unimp
    1182:	722a                	flw	ft4,168(sp)
    1184:	7365                	lui	t1,0xffff9
    1186:	0100                	addi	s0,sp,128
    1188:	0184                	addi	s1,sp,192
    118a:	630a                	flw	ft6,128(sp)
    118c:	af00000b          	0xaf00000b
    1190:	000d                	c.nop	3
    1192:	2600                	fld	fs0,8(a2)
    1194:	0000019b          	0x19b
    1198:	8501                	c.srai64	a0
    119a:	0a01                	addi	s4,s4,0
    119c:	00000b63          	beqz	zero,11b2 <__DTOR_END__+0x5a>
    11a0:	0dcd                	addi	s11,s11,19
    11a2:	0000                	unimp
    11a4:	a026                	fsd	fs1,0(sp)
    11a6:	0001                	nop
    11a8:	0100                	addi	s0,sp,128
    11aa:	0186                	slli	gp,gp,0x1
    11ac:	630a                	flw	ft6,128(sp)
    11ae:	eb00000b          	0xeb00000b
    11b2:	000d                	c.nop	3
    11b4:	2600                	fld	fs0,8(a2)
    11b6:	00000437          	lui	s0,0x0
    11ba:	8701                	c.srai64	a4
    11bc:	0901                	addi	s2,s2,0
    11be:	005d                	c.nop	23
    11c0:	0000                	unimp
    11c2:	0e09                	addi	t3,t3,2
    11c4:	0000                	unimp
    11c6:	00006933          	or	s2,zero,zero
    11ca:	3f00                	fld	fs0,56(a4)
    11cc:	000e                	c.slli	zero,0x3
    11ce:	3300                	fld	fs0,32(a4)
    11d0:	0069                	c.nop	26
    11d2:	0000                	unimp
    11d4:	0e6d                	addi	t3,t3,27
    11d6:	0000                	unimp
    11d8:	00006933          	or	s2,zero,zero
    11dc:	9b00                	0x9b00
    11de:	000e                	c.slli	zero,0x3
    11e0:	3300                	fld	fs0,32(a4)
    11e2:	0069                	c.nop	26
    11e4:	0000                	unimp
    11e6:	0ec9                	addi	t4,t4,18
    11e8:	0000                	unimp
    11ea:	00006933          	or	s2,zero,zero
    11ee:	f700                	fsw	fs0,40(a4)
    11f0:	000e                	c.slli	zero,0x3
    11f2:	3300                	fld	fs0,32(a4)
    11f4:	0069                	c.nop	26
    11f6:	0000                	unimp
    11f8:	0f25                	addi	t5,t5,9
    11fa:	0000                	unimp
    11fc:	00006933          	or	s2,zero,zero
    1200:	5300                	lw	s0,32(a4)
    1202:	2b00000f          	0x2b00000f
    1206:	0752                	slli	a4,a4,0x14
    1208:	0000                	unimp
    120a:	1922                	slli	s2,s2,0x28
    120c:	0000                	unimp
    120e:	1226                	slli	tp,tp,0x29
    1210:	0000                	unimp
    1212:	012c                	addi	a1,sp,136
    1214:	025a                	slli	tp,tp,0x16
    1216:	012c0083          	lb	ra,18(s8) # fffe0012 <_stack_start+0xfffd0012>
    121a:	01f3035b          	0x1f3035b
    121e:	2c5a                	fld	fs8,400(sp)
    1220:	5c01                	li	s8,-32
    1222:	7902                	flw	fs2,32(sp)
    1224:	0000                	unimp
    1226:	00075a2b          	0x75a2b
    122a:	2200                	fld	fs0,0(a2)
    122c:	0019                	c.nop	6
    122e:	4600                	lw	s0,8(a2)
    1230:	0012                	c.slli	zero,0x4
    1232:	2c00                	fld	fs0,24(s0)
    1234:	5a01                	li	s4,-32
    1236:	8402                	jr	s0
    1238:	2c00                	fld	fs0,24(s0)
    123a:	5b01                	li	s6,-32
    123c:	8a02                	jr	s4
    123e:	2c00                	fld	fs0,24(s0)
    1240:	5c01                	li	s8,-32
    1242:	7902                	flw	fs2,32(sp)
    1244:	0000                	unimp
    1246:	0007b42b          	0x7b42b
    124a:	0800                	addi	s0,sp,16
    124c:	0014                	0x14
    124e:	7200                	flw	fs0,32(a2)
    1250:	0012                	c.slli	zero,0x4
    1252:	2c00                	fld	fs0,24(s0)
    1254:	5a01                	li	s4,-32
    1256:	8302                	jr	t1
    1258:	2c00                	fld	fs0,24(s0)
    125a:	5b01                	li	s6,-32
    125c:	7902                	flw	fs2,32(sp)
    125e:	2c00                	fld	fs0,24(s0)
    1260:	5c01                	li	s8,-32
    1262:	8402                	jr	s0
    1264:	2c00                	fld	fs0,24(s0)
    1266:	5d01                	li	s10,-32
    1268:	7902                	flw	fs2,32(sp)
    126a:	2c00                	fld	fs0,24(s0)
    126c:	5e01                	li	t3,-32
    126e:	8202                	jr	tp
    1270:	0000                	unimp
    1272:	0007de2b          	0x7de2b
    1276:	0800                	addi	s0,sp,16
    1278:	0014                	0x14
    127a:	9e00                	0x9e00
    127c:	0012                	c.slli	zero,0x4
    127e:	2c00                	fld	fs0,24(s0)
    1280:	5a01                	li	s4,-32
    1282:	7202                	flw	ft4,32(sp)
    1284:	2c00                	fld	fs0,24(s0)
    1286:	5b01                	li	s6,-32
    1288:	7902                	flw	fs2,32(sp)
    128a:	2c00                	fld	fs0,24(s0)
    128c:	5c01                	li	s8,-32
    128e:	8402                	jr	s0
    1290:	2c00                	fld	fs0,24(s0)
    1292:	5d01                	li	s10,-32
    1294:	7902                	flw	fs2,32(sp)
    1296:	2c00                	fld	fs0,24(s0)
    1298:	5e01                	li	t3,-32
    129a:	8202                	jr	tp
    129c:	0000                	unimp
    129e:	0007e62b          	0x7e62b
    12a2:	2200                	fld	fs0,0(a2)
    12a4:	0019                	c.nop	6
    12a6:	b800                	fsd	fs0,48(s0)
    12a8:	0012                	c.slli	zero,0x4
    12aa:	2c00                	fld	fs0,24(s0)
    12ac:	5a01                	li	s4,-32
    12ae:	8802                	jr	a6
    12b0:	2c00                	fld	fs0,24(s0)
    12b2:	5c01                	li	s8,-32
    12b4:	7902                	flw	fs2,32(sp)
    12b6:	0000                	unimp
    12b8:	0007fc2b          	0x7fc2b
    12bc:	9a00                	0x9a00
    12be:	e9000017          	auipc	zero,0xe9000
    12c2:	0012                	c.slli	zero,0x4
    12c4:	2c00                	fld	fs0,24(s0)
    12c6:	5a01                	li	s4,-32
    12c8:	8802                	jr	a6
    12ca:	2c00                	fld	fs0,24(s0)
    12cc:	5b01                	li	s6,-32
    12ce:	7902                	flw	fs2,32(sp)
    12d0:	2c00                	fld	fs0,24(s0)
    12d2:	5c01                	li	s8,-32
    12d4:	8602                	jr	a2
    12d6:	2c00                	fld	fs0,24(s0)
    12d8:	5d01                	li	s10,-32
    12da:	7902                	flw	fs2,32(sp)
    12dc:	2c00                	fld	fs0,24(s0)
    12de:	5e01                	li	t3,-32
    12e0:	8202                	jr	tp
    12e2:	2c00                	fld	fs0,24(s0)
    12e4:	5f01                	li	t5,-32
    12e6:	3001                	jal	ae6 <generate_keys+0x156>
    12e8:	2b00                	fld	fs0,16(a4)
    12ea:	0804                	addi	s1,sp,16
    12ec:	0000                	unimp
    12ee:	1922                	slli	s2,s2,0x28
    12f0:	0000                	unimp
    12f2:	00001303          	lh	t1,0(zero) # 0 <__DYNAMIC>
    12f6:	012c                	addi	a1,sp,136
    12f8:	025a                	slli	tp,tp,0x16
    12fa:	0072                	c.slli	zero,0x1c
    12fc:	012c                	addi	a1,sp,136
    12fe:	025c                	addi	a5,sp,260
    1300:	0079                	c.nop	30
    1302:	2b00                	fld	fs0,16(a4)
    1304:	0822                	slli	a6,a6,0x8
    1306:	0000                	unimp
    1308:	1922                	slli	s2,s2,0x28
    130a:	0000                	unimp
    130c:	00001323          	sh	zero,6(zero) # 6 <__DYNAMIC+0x6>
    1310:	012c                	addi	a1,sp,136
    1312:	025a                	slli	tp,tp,0x16
    1314:	012c0083          	lb	ra,18(s8)
    1318:	0084025b          	0x84025b
    131c:	012c                	addi	a1,sp,136
    131e:	025c                	addi	a5,sp,260
    1320:	0079                	c.nop	30
    1322:	2b00                	fld	fs0,16(a4)
    1324:	082a                	slli	a6,a6,0xa
    1326:	0000                	unimp
    1328:	1922                	slli	s2,s2,0x28
    132a:	0000                	unimp
    132c:	00001343          	fmadd.s	ft6,ft0,ft0,ft0,rtz
    1330:	012c                	addi	a1,sp,136
    1332:	025a                	slli	tp,tp,0x16
    1334:	0084                	addi	s1,sp,64
    1336:	012c                	addi	a1,sp,136
    1338:	0087025b          	0x87025b
    133c:	012c                	addi	a1,sp,136
    133e:	025c                	addi	a5,sp,260
    1340:	0079                	c.nop	30
    1342:	2b00                	fld	fs0,16(a4)
    1344:	0838                	addi	a4,sp,24
    1346:	0000                	unimp
    1348:	1922                	slli	s2,s2,0x28
    134a:	0000                	unimp
    134c:	1366                	slli	t1,t1,0x39
    134e:	0000                	unimp
    1350:	012c                	addi	a1,sp,136
    1352:	055a                	slli	a0,a0,0x16
    1354:	0019e403          	0x19e403
    1358:	2c00                	fld	fs0,24(s0)
    135a:	5b01                	li	s6,-32
    135c:	8602                	jr	a2
    135e:	2c00                	fld	fs0,24(s0)
    1360:	5c01                	li	s8,-32
    1362:	7902                	flw	fs2,32(sp)
    1364:	0000                	unimp
    1366:	402d                	c.li	zero,11
    1368:	0008                	0x8
    136a:	2200                	fld	fs0,0(a2)
    136c:	0019                	c.nop	6
    136e:	2c00                	fld	fs0,24(s0)
    1370:	5a01                	li	s4,-32
    1372:	8602                	jr	a2
    1374:	2c00                	fld	fs0,24(s0)
    1376:	5b01                	li	s6,-32
    1378:	8902                	jr	s2
    137a:	2c00                	fld	fs0,24(s0)
    137c:	5c01                	li	s8,-32
    137e:	7902                	flw	fs2,32(sp)
    1380:	0000                	unimp
    1382:	0900                	addi	s0,sp,144
    1384:	005d                	c.nop	23
    1386:	0000                	unimp
    1388:	1396                	slli	t2,t2,0x25
    138a:	0000                	unimp
    138c:	6934                	flw	fa3,80(a0)
    138e:	0000                	unimp
    1390:	c600                	sw	s0,8(a2)
    1392:	0011                	c.nop	4
    1394:	0000                	unimp
    1396:	5d09                	li	s10,-30
    1398:	0000                	unimp
    139a:	a900                	fsd	fs0,16(a0)
    139c:	34000013          	li	zero,832
    13a0:	0069                	c.nop	26
    13a2:	0000                	unimp
    13a4:	000011cf          	fnmadd.s	ft3,ft0,ft0,ft0,rtz
    13a8:	0900                	addi	s0,sp,144
    13aa:	005d                	c.nop	23
    13ac:	0000                	unimp
    13ae:	13bc                	addi	a5,sp,488
    13b0:	0000                	unimp
    13b2:	6934                	flw	fa3,80(a0)
    13b4:	0000                	unimp
    13b6:	d800                	sw	s0,48(s0)
    13b8:	0011                	c.nop	4
    13ba:	0000                	unimp
    13bc:	5d09                	li	s10,-30
    13be:	0000                	unimp
    13c0:	cf00                	sw	s0,24(a4)
    13c2:	34000013          	li	zero,832
    13c6:	0069                	c.nop	26
    13c8:	0000                	unimp
    13ca:	11e1                	addi	gp,gp,-8
    13cc:	0000                	unimp
    13ce:	0900                	addi	s0,sp,144
    13d0:	005d                	c.nop	23
    13d2:	0000                	unimp
    13d4:	13e2                	slli	t2,t2,0x38
    13d6:	0000                	unimp
    13d8:	6934                	flw	fa3,80(a0)
    13da:	0000                	unimp
    13dc:	ea00                	fsw	fs0,16(a2)
    13de:	0011                	c.nop	4
    13e0:	0000                	unimp
    13e2:	5d09                	li	s10,-30
    13e4:	0000                	unimp
    13e6:	f500                	fsw	fs0,40(a0)
    13e8:	34000013          	li	zero,832
    13ec:	0069                	c.nop	26
    13ee:	0000                	unimp
    13f0:	000011f3          	csrrw	gp,ustatus,zero
    13f4:	0900                	addi	s0,sp,144
    13f6:	005d                	c.nop	23
    13f8:	0000                	unimp
    13fa:	1408                	addi	a0,sp,544
    13fc:	0000                	unimp
    13fe:	6934                	flw	fa3,80(a0)
    1400:	0000                	unimp
    1402:	fc00                	fsw	fs0,56(s0)
    1404:	0011                	c.nop	4
    1406:	0000                	unimp
    1408:	cc35                	beqz	s0,1484 <_bss_start+0x1a8>
    140a:	0001                	nop
    140c:	0100                	addi	s0,sp,128
    140e:	06d4                	addi	a3,sp,836
    1410:	00000b63          	beqz	zero,1426 <_bss_start+0x14a>
    1414:	04a4                	addi	s1,sp,584
    1416:	0000                	unimp
    1418:	023e                	slli	tp,tp,0xf
    141a:	0000                	unimp
    141c:	9c01                	0x9c01
    141e:	15d5                	addi	a1,a1,-11
    1420:	0000                	unimp
    1422:	6e36                	flw	ft8,76(sp)
    1424:	6d75                	lui	s10,0x1d
    1426:	0100                	addi	s0,sp,128
    1428:	13d4                	addi	a3,sp,484
    142a:	00000b63          	beqz	zero,1440 <_bss_start+0x164>
    142e:	0f81                	addi	t6,t6,0
    1430:	0000                	unimp
    1432:	0000fc37          	lui	s8,0xf
    1436:	0100                	addi	s0,sp,128
    1438:	1cd4                	addi	a3,sp,628
    143a:	005d                	c.nop	23
    143c:	0000                	unimp
    143e:	0fad                	addi	t6,t6,11
    1440:	0000                	unimp
    1442:	00069037          	lui	zero,0x69
    1446:	0100                	addi	s0,sp,128
    1448:	28d4                	fld	fa3,144(s1)
    144a:	00000b63          	beqz	zero,1460 <_bss_start+0x184>
    144e:	0ffe                	slli	t6,t6,0x1f
    1450:	0000                	unimp
    1452:	0006b437          	lui	s0,0x6b
    1456:	0100                	addi	s0,sp,128
    1458:	33d4                	fld	fa3,160(a5)
    145a:	005d                	c.nop	23
    145c:	0000                	unimp
    145e:	00001043          	fmadd.s	ft0,ft0,ft0,ft0,rtz
    1462:	6d36                	flw	fs10,76(sp)
    1464:	0100646f          	jal	s0,7474 <_stack_len+0x3474>
    1468:	3fd4                	fld	fa3,184(a5)
    146a:	005d                	c.nop	23
    146c:	0000                	unimp
    146e:	107a                	c.slli	zero,0x3e
    1470:	0000                	unimp
    1472:	7538                	flw	fa4,104(a0)
    1474:	0100                	addi	s0,sp,128
    1476:	09d6                	slli	s3,s3,0x15
    1478:	005d                	c.nop	23
    147a:	0000                	unimp
    147c:	10b1                	addi	ra,ra,-20
    147e:	0000                	unimp
    1480:	6438                	flw	fa4,72(s0)
    1482:	0100                	addi	s0,sp,128
    1484:	0bd6                	slli	s7,s7,0x15
    1486:	005d                	c.nop	23
    1488:	0000                	unimp
    148a:	10da                	slli	ra,ra,0x36
    148c:	0000                	unimp
    148e:	6439                	lui	s0,0xe
    1490:	0032                	c.slli	zero,0xc
    1492:	d601                	beqz	a2,139a <_bss_start+0xbe>
    1494:	5d0d                	li	s10,-29
    1496:	0000                	unimp
    1498:	3800                	fld	fs0,48(s0)
    149a:	0069                	c.nop	26
    149c:	d601                	beqz	a2,13a4 <_bss_start+0xc8>
    149e:	5d10                	lw	a2,56(a0)
    14a0:	0000                	unimp
    14a2:	f800                	fsw	fs0,48(s0)
    14a4:	0010                	0x10
    14a6:	3900                	fld	fs0,48(a0)
    14a8:	5f62                	lw	t5,56(sp)
    14aa:	004e                	c.slli	zero,0x13
    14ac:	d601                	beqz	a2,13b4 <_bss_start+0xd8>
    14ae:	5d12                	lw	s10,36(sp)
    14b0:	0000                	unimp
    14b2:	3800                	fld	fs0,48(s0)
    14b4:	5f72                	lw	t5,60(sp)
    14b6:	0064                	addi	s1,sp,12
    14b8:	d601                	beqz	a2,13c0 <_bss_start+0xe4>
    14ba:	5d16                	lw	s10,100(sp)
    14bc:	0000                	unimp
    14be:	d500                	sw	s0,40(a0)
    14c0:	0012                	c.slli	zero,0x4
    14c2:	3a00                	fld	fs0,48(a2)
    14c4:	02c6                	slli	t0,t0,0x11
    14c6:	0000                	unimp
    14c8:	d701                	beqz	a4,13d0 <_bss_start+0xf4>
    14ca:	630a                	flw	ft6,128(sp)
    14cc:	f300000b          	0xf300000b
    14d0:	0012                	c.slli	zero,0x4
    14d2:	3800                	fld	fs0,48(s0)
    14d4:	0076                	c.slli	zero,0x1d
    14d6:	d901                	beqz	a0,13e6 <_bss_start+0x10a>
    14d8:	d509                	beqz	a0,13e2 <_bss_start+0x106>
    14da:	0015                	c.nop	5
    14dc:	0b00                	addi	s0,sp,400
    14de:	38000013          	li	zero,896
    14e2:	0071                	c.nop	28
    14e4:	da01                	beqz	a2,13f4 <_bss_start+0x118>
    14e6:	e809                	bnez	s0,14f8 <_bss_start+0x21c>
    14e8:	0015                	c.nop	5
    14ea:	2b00                	fld	fs0,16(a4)
    14ec:	3a000013          	li	zero,928
    14f0:	01c4                	addi	s1,sp,196
    14f2:	0000                	unimp
    14f4:	db01                	beqz	a4,1404 <_bss_start+0x128>
    14f6:	630a                	flw	ft6,128(sp)
    14f8:	7800000b          	0x7800000b
    14fc:	3a000013          	li	zero,928
    1500:	0268                	addi	a0,sp,268
    1502:	0000                	unimp
    1504:	dc01                	beqz	s0,141c <_bss_start+0x140>
    1506:	fb09                	bnez	a4,1418 <_bss_start+0x13c>
    1508:	0015                	c.nop	5
    150a:	9600                	0x9600
    150c:	3a000013          	li	zero,928
    1510:	0266                	slli	tp,tp,0x19
    1512:	0000                	unimp
    1514:	dd01                	beqz	a0,142c <_bss_start+0x150>
    1516:	0e09                	addi	t3,t3,2
    1518:	0016                	c.slli	zero,0x5
    151a:	f300                	fsw	fs0,32(a4)
    151c:	33000013          	li	zero,816
    1520:	0069                	c.nop	26
    1522:	0000                	unimp
    1524:	1466                	slli	s0,s0,0x39
    1526:	0000                	unimp
    1528:	00006933          	or	s2,zero,zero
    152c:	9400                	0x9400
    152e:	0014                	0x14
    1530:	3300                	fld	fs0,32(a4)
    1532:	0069                	c.nop	26
    1534:	0000                	unimp
    1536:	14c2                	slli	s1,s1,0x30
    1538:	0000                	unimp
    153a:	00006933          	or	s2,zero,zero
    153e:	f000                	fsw	fs0,32(s0)
    1540:	0014                	0x14
    1542:	2b00                	fld	fs0,16(a4)
    1544:	0500                	addi	s0,sp,640
    1546:	0000                	unimp
    1548:	1922                	slli	s2,s2,0x28
    154a:	0000                	unimp
    154c:	1564                	addi	s1,sp,684
    154e:	0000                	unimp
    1550:	012c                	addi	a1,sp,136
    1552:	025a                	slli	tp,tp,0x16
    1554:	0088                	addi	a0,sp,64
    1556:	012c                	addi	a1,sp,136
    1558:	01f3035b          	0x1f3035b
    155c:	2c5a                	fld	fs8,400(sp)
    155e:	5c01                	li	s8,-32
    1560:	7902                	flw	fs2,32(sp)
    1562:	0000                	unimp
    1564:	0005142b          	0x5142b
    1568:	2200                	fld	fs0,0(a2)
    156a:	0019                	c.nop	6
    156c:	8400                	0x8400
    156e:	0015                	c.nop	5
    1570:	2c00                	fld	fs0,24(s0)
    1572:	5a01                	li	s4,-32
    1574:	7202                	flw	ft4,32(sp)
    1576:	2c00                	fld	fs0,24(s0)
    1578:	5b01                	li	s6,-32
    157a:	8b02                	jr	s6
    157c:	2c00                	fld	fs0,24(s0)
    157e:	5c01                	li	s8,-32
    1580:	8302                	jr	t1
    1582:	0000                	unimp
    1584:	0005b82b          	0x5b82b
    1588:	2200                	fld	fs0,0(a2)
    158a:	0019                	c.nop	6
    158c:	a700                	fsd	fs0,8(a4)
    158e:	0015                	c.nop	5
    1590:	2c00                	fld	fs0,24(s0)
    1592:	5a01                	li	s4,-32
    1594:	0305                	addi	t1,t1,1
    1596:	178c                	addi	a1,sp,992
    1598:	0000                	unimp
    159a:	012c                	addi	a1,sp,136
    159c:	0086025b          	0x86025b
    15a0:	012c                	addi	a1,sp,136
    15a2:	025c                	addi	a5,sp,260
    15a4:	0079                	c.nop	30
    15a6:	2d00                	fld	fs0,24(a0)
    15a8:	0616                	slli	a2,a2,0x5
    15aa:	0000                	unimp
    15ac:	179a                	slli	a5,a5,0x26
    15ae:	0000                	unimp
    15b0:	012c                	addi	a1,sp,136
    15b2:	025a                	slli	tp,tp,0x16
    15b4:	0072                	c.slli	zero,0x1c
    15b6:	012c                	addi	a1,sp,136
    15b8:	0083025b          	0x83025b
    15bc:	012c                	addi	a1,sp,136
    15be:	025c                	addi	a5,sp,260
    15c0:	008a                	slli	ra,ra,0x2
    15c2:	012c                	addi	a1,sp,136
    15c4:	025d                	addi	tp,tp,23
    15c6:	012c0083          	lb	ra,18(s8) # f012 <_stack+0x1012>
    15ca:	025e                	slli	tp,tp,0x17
    15cc:	0082                	c.slli64	ra
    15ce:	012c                	addi	a1,sp,136
    15d0:	015f 0030 0900      	0x9000030015f
    15d6:	005d                	c.nop	23
    15d8:	0000                	unimp
    15da:	15e8                	addi	a0,sp,748
    15dc:	0000                	unimp
    15de:	6934                	flw	fa3,80(a0)
    15e0:	0000                	unimp
    15e2:	1f00                	addi	s0,sp,944
    15e4:	0015                	c.nop	5
    15e6:	0000                	unimp
    15e8:	5d09                	li	s10,-30
    15ea:	0000                	unimp
    15ec:	fb00                	fsw	fs0,48(a4)
    15ee:	0015                	c.nop	5
    15f0:	3400                	fld	fs0,40(s0)
    15f2:	0069                	c.nop	26
    15f4:	0000                	unimp
    15f6:	1528                	addi	a0,sp,680
    15f8:	0000                	unimp
    15fa:	0900                	addi	s0,sp,144
    15fc:	005d                	c.nop	23
    15fe:	0000                	unimp
    1600:	160e                	slli	a2,a2,0x23
    1602:	0000                	unimp
    1604:	6934                	flw	fa3,80(a0)
    1606:	0000                	unimp
    1608:	3100                	fld	fs0,32(a0)
    160a:	0015                	c.nop	5
    160c:	0000                	unimp
    160e:	5d09                	li	s10,-30
    1610:	0000                	unimp
    1612:	2100                	fld	fs0,0(a0)
    1614:	0016                	c.slli	zero,0x5
    1616:	3400                	fld	fs0,40(s0)
    1618:	0069                	c.nop	26
    161a:	0000                	unimp
    161c:	153a                	slli	a0,a0,0x2e
    161e:	0000                	unimp
    1620:	3500                	fld	fs0,40(a0)
    1622:	002a                	c.slli	zero,0xa
    1624:	0000                	unimp
    1626:	9b01                	andi	a4,a4,-32
    1628:	6306                	flw	ft6,64(sp)
    162a:	3400000b          	0x3400000b
    162e:	70000003          	lb	zero,1792(zero) # 700 <ext_euclid+0x1e>
    1632:	0001                	nop
    1634:	0100                	addi	s0,sp,128
    1636:	589c                	lw	a5,48(s1)
    1638:	36000017          	auipc	zero,0x36000
    163c:	0061                	c.nop	24
    163e:	9b01                	andi	a4,a4,-32
    1640:	6315                	lui	t1,0x5
    1642:	4500000b          	0x4500000b
    1646:	0015                	c.nop	5
    1648:	3700                	fld	fs0,40(a4)
    164a:	00000703          	lb	a4,0(zero) # 0 <__DYNAMIC>
    164e:	9b01                	andi	a4,a4,-32
    1650:	5d1c                	lw	a5,56(a0)
    1652:	0000                	unimp
    1654:	8a00                	0x8a00
    1656:	0015                	c.nop	5
    1658:	3600                	fld	fs0,40(a2)
    165a:	0062                	c.slli	zero,0x18
    165c:	9b01                	andi	a4,a4,-32
    165e:	6329                	lui	t1,0xa
    1660:	db00000b          	0xdb00000b
    1664:	0015                	c.nop	5
    1666:	3700                	fld	fs0,40(a4)
    1668:	070a                	slli	a4,a4,0x2
    166a:	0000                	unimp
    166c:	9b01                	andi	a4,a4,-32
    166e:	5d30                	lw	a2,120(a0)
    1670:	0000                	unimp
    1672:	2b00                	fld	fs0,16(a4)
    1674:	0016                	c.slli	zero,0x5
    1676:	3700                	fld	fs0,40(a4)
    1678:	0539                	addi	a0,a0,14
    167a:	0000                	unimp
    167c:	9b01                	andi	a4,a4,-32
    167e:	5d3c                	lw	a5,120(a0)
    1680:	0000                	unimp
    1682:	5700                	lw	s0,40(a4)
    1684:	0016                	c.slli	zero,0x5
    1686:	3a00                	fld	fs0,48(a2)
    1688:	064c                	addi	a1,sp,772
    168a:	0000                	unimp
    168c:	9d01                	0x9d01
    168e:	5809                	li	a6,-30
    1690:	83000017          	auipc	zero,0x83000
    1694:	0016                	c.slli	zero,0x5
    1696:	3800                	fld	fs0,48(s0)
    1698:	0069                	c.nop	26
    169a:	9e01                	0x9e01
    169c:	5d09                	li	s10,-30
    169e:	0000                	unimp
    16a0:	c700                	sw	s0,8(a4)
    16a2:	0016                	c.slli	zero,0x5
    16a4:	3800                	fld	fs0,48(s0)
    16a6:	006a                	c.slli	zero,0x1a
    16a8:	9e01                	0x9e01
    16aa:	00005d0b          	0x5d0b
    16ae:	0700                	addi	s0,sp,896
    16b0:	38000017          	auipc	zero,0x38000
    16b4:	9e01006b          	0x9e01006b
    16b8:	5d0d                	li	s10,-29
    16ba:	0000                	unimp
    16bc:	5e00                	lw	s0,56(a2)
    16be:	22000017          	auipc	zero,0x22000
    16c2:	02b6                	slli	t0,t0,0xd
    16c4:	0000                	unimp
    16c6:	9f01                	0x9f01
    16c8:	630a                	flw	ft6,128(sp)
    16ca:	0600000b          	0x600000b
    16ce:	00153403          	0x153403
    16d2:	9f00                	0x9f00
    16d4:	0c3a                	slli	s8,s8,0xe
    16d6:	0000                	unimp
    16d8:	0100                	addi	s0,sp,128
    16da:	09a0                	addi	s0,sp,216
    16dc:	1774                	addi	a3,sp,940
    16de:	0000                	unimp
    16e0:	17ac                	addi	a1,sp,1000
    16e2:	0000                	unimp
    16e4:	b03a                	fsd	fa4,32(sp)
    16e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ea:	09a1                	addi	s3,s3,8
    16ec:	00001787          	0x1787
    16f0:	17c0                	addi	s0,sp,996
    16f2:	0000                	unimp
    16f4:	00006933          	or	s2,zero,zero
    16f8:	0d00                	addi	s0,sp,656
    16fa:	0018                	0x18
    16fc:	3300                	fld	fs0,32(a4)
    16fe:	0069                	c.nop	26
    1700:	0000                	unimp
    1702:	1855                	addi	a6,a6,-11
    1704:	0000                	unimp
    1706:	00006933          	or	s2,zero,zero
    170a:	8d00                	0x8d00
    170c:	0018                	0x18
    170e:	3300                	fld	fs0,32(a4)
    1710:	0069                	c.nop	26
    1712:	0000                	unimp
    1714:	18b0                	addi	a2,sp,120
    1716:	0000                	unimp
    1718:	0003b62b          	0x3b62b
    171c:	2200                	fld	fs0,0(a2)
    171e:	0019                	c.nop	6
    1720:	3900                	fld	fs0,48(a0)
    1722:	2c000017          	auipc	zero,0x2c000
    1726:	5a01                	li	s4,-32
    1728:	8a02                	jr	s4
    172a:	2c00                	fld	fs0,24(s0)
    172c:	5b01                	li	s6,-32
    172e:	5a01f303          	0x5a01f303
    1732:	012c                	addi	a1,sp,136
    1734:	025c                	addi	a5,sp,260
    1736:	0188                	addi	a0,sp,192
    1738:	2d00                	fld	fs0,24(a0)
    173a:	03c2                	slli	t2,t2,0x10
    173c:	0000                	unimp
    173e:	1922                	slli	s2,s2,0x28
    1740:	0000                	unimp
    1742:	012c                	addi	a1,sp,136
    1744:	025a                	slli	tp,tp,0x16
    1746:	0072                	c.slli	zero,0x1c
    1748:	012c                	addi	a1,sp,136
    174a:	bc78045b          	0xbc78045b
    174e:	067f                	0x67f
    1750:	012c                	addi	a1,sp,136
    1752:	025c                	addi	a5,sp,260
    1754:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    1758:	5d09                	li	s10,-30
    175a:	0000                	unimp
    175c:	7400                	flw	fs0,40(s0)
    175e:	34000017          	auipc	zero,0x34000
    1762:	0069                	c.nop	26
    1764:	0000                	unimp
    1766:	16f4                	addi	a3,sp,876
    1768:	0000                	unimp
    176a:	6934                	flw	fa3,80(a0)
    176c:	0000                	unimp
    176e:	fd00                	fsw	fs0,56(a0)
    1770:	0016                	c.slli	zero,0x5
    1772:	0000                	unimp
    1774:	5d09                	li	s10,-30
    1776:	0000                	unimp
    1778:	8700                	0x8700
    177a:	34000017          	auipc	zero,0x34000
    177e:	0069                	c.nop	26
    1780:	0000                	unimp
    1782:	1706                	slli	a4,a4,0x21
    1784:	0000                	unimp
    1786:	0900                	addi	s0,sp,144
    1788:	005d                	c.nop	23
    178a:	0000                	unimp
    178c:	179a                	slli	a5,a5,0x26
    178e:	0000                	unimp
    1790:	6934                	flw	fa3,80(a0)
    1792:	0000                	unimp
    1794:	0f00                	addi	s0,sp,912
    1796:	00000017          	auipc	zero,0x0
    179a:	5935                	li	s2,-19
    179c:	0001                	nop
    179e:	0100                	addi	s0,sp,128
    17a0:	063e                	slli	a2,a2,0xf
    17a2:	00000b63          	beqz	zero,17b8 <result+0x2c>
    17a6:	0128                	addi	a0,sp,136
    17a8:	0000                	unimp
    17aa:	020c                	addi	a1,sp,256
    17ac:	0000                	unimp
    17ae:	9c01                	0x9c01
    17b0:	18e0                	addi	s0,sp,124
    17b2:	0000                	unimp
    17b4:	6136                	flw	ft2,76(sp)
    17b6:	0100                	addi	s0,sp,128
    17b8:	143e                	slli	s0,s0,0x2f
    17ba:	00000b63          	beqz	zero,17d0 <result+0x44>
    17be:	18f8                	addi	a4,sp,124
    17c0:	0000                	unimp
    17c2:	00070337          	lui	t1,0x70
    17c6:	0100                	addi	s0,sp,128
    17c8:	1b3e                	slli	s6,s6,0x2f
    17ca:	005d                	c.nop	23
    17cc:	0000                	unimp
    17ce:	193d                	addi	s2,s2,-17
    17d0:	0000                	unimp
    17d2:	6236                	flw	ft4,76(sp)
    17d4:	0100                	addi	s0,sp,128
    17d6:	283e                	fld	fa6,456(sp)
    17d8:	00000b63          	beqz	zero,17ee <result+0x62>
    17dc:	198d                	addi	s3,s3,-29
    17de:	0000                	unimp
    17e0:	00070a37          	lui	s4,0x70
    17e4:	0100                	addi	s0,sp,128
    17e6:	2f3e                	fld	ft10,456(sp)
    17e8:	005d                	c.nop	23
    17ea:	0000                	unimp
    17ec:	19f6                	slli	s3,s3,0x3d
    17ee:	0000                	unimp
    17f0:	6d36                	flw	fs10,76(sp)
    17f2:	0100646f          	jal	s0,7802 <_stack_len+0x3802>
    17f6:	3b3e                	fld	fs6,488(sp)
    17f8:	005d                	c.nop	23
    17fa:	0000                	unimp
    17fc:	1a2d                	addi	s4,s4,-21
    17fe:	0000                	unimp
    1800:	00053937          	lui	s2,0x53
    1804:	0100                	addi	s0,sp,128
    1806:	443e                	lw	s0,204(sp)
    1808:	005d                	c.nop	23
    180a:	0000                	unimp
    180c:	1a7a                	slli	s4,s4,0x3e
    180e:	0000                	unimp
    1810:	4c3a                	lw	s8,140(sp)
    1812:	0006                	c.slli	zero,0x1
    1814:	0100                	addi	s0,sp,128
    1816:	0941                	addi	s2,s2,16
    1818:	18e0                	addi	s0,sp,124
    181a:	0000                	unimp
    181c:	00001aa7          	0x1aa7
    1820:	6938                	flw	fa4,80(a0)
    1822:	0100                	addi	s0,sp,128
    1824:	0942                	slli	s2,s2,0x10
    1826:	005d                	c.nop	23
    1828:	0000                	unimp
    182a:	00001aeb          	0x1aeb
    182e:	6a38                	flw	fa4,80(a2)
    1830:	0100                	addi	s0,sp,128
    1832:	0b42                	slli	s6,s6,0x10
    1834:	005d                	c.nop	23
    1836:	0000                	unimp
    1838:	00001bb7          	lui	s7,0x1
    183c:	6b38                	flw	fa4,80(a4)
    183e:	0100                	addi	s0,sp,128
    1840:	0d42                	slli	s10,s10,0x10
    1842:	005d                	c.nop	23
    1844:	0000                	unimp
    1846:	1c52                	slli	s8,s8,0x34
    1848:	0000                	unimp
    184a:	a63a                	fsd	fa4,264(sp)
    184c:	0002                	c.slli64	zero
    184e:	0100                	addi	s0,sp,128
    1850:	0b630a43          	fmadd.d	fs4,ft6,fs6,ft1,rne
    1854:	0000                	unimp
    1856:	1ca0                	addi	s0,sp,632
    1858:	0000                	unimp
    185a:	0c3a                	slli	s8,s8,0xe
    185c:	0000                	unimp
    185e:	0100                	addi	s0,sp,128
    1860:	0944                	addi	s1,sp,148
    1862:	18fc                	addi	a5,sp,124
    1864:	0000                	unimp
    1866:	1cb8                	addi	a4,sp,632
    1868:	0000                	unimp
    186a:	b03a                	fsd	fa4,32(sp)
    186c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1870:	0945                	addi	s2,s2,17
    1872:	0000190f          	0x190f
    1876:	1cf0                	addi	a2,sp,636
    1878:	0000                	unimp
    187a:	00006933          	or	s2,zero,zero
    187e:	6000                	flw	fs0,0(s0)
    1880:	001d                	c.nop	7
    1882:	3300                	fld	fs0,32(a4)
    1884:	0069                	c.nop	26
    1886:	0000                	unimp
    1888:	1db5                	addi	s11,s11,-19
    188a:	0000                	unimp
    188c:	00006933          	or	s2,zero,zero
    1890:	e800                	fsw	fs0,16(s0)
    1892:	001d                	c.nop	7
    1894:	3300                	fld	fs0,32(a4)
    1896:	0069                	c.nop	26
    1898:	0000                	unimp
    189a:	00001e17          	auipc	t3,0x1
    189e:	0001ba2b          	0x1ba2b
    18a2:	2200                	fld	fs0,0(a2)
    18a4:	0019                	c.nop	6
    18a6:	c100                	sw	s0,0(a0)
    18a8:	0018                	0x18
    18aa:	2c00                	fld	fs0,24(s0)
    18ac:	5a01                	li	s4,-32
    18ae:	8602                	jr	a2
    18b0:	2c00                	fld	fs0,24(s0)
    18b2:	5b01                	li	s6,-32
    18b4:	5a01f303          	0x5a01f303
    18b8:	012c                	addi	a1,sp,136
    18ba:	045c                	addi	a5,sp,516
    18bc:	b478                	fsd	fa4,232(s0)
    18be:	067f                	0x67f
    18c0:	2d00                	fld	fs0,24(a0)
    18c2:	01d2                	slli	gp,gp,0x14
    18c4:	0000                	unimp
    18c6:	1922                	slli	s2,s2,0x28
    18c8:	0000                	unimp
    18ca:	012c                	addi	a1,sp,136
    18cc:	025a                	slli	tp,tp,0x16
    18ce:	0072                	c.slli	zero,0x1c
    18d0:	012c                	addi	a1,sp,136
    18d2:	b078045b          	0xb078045b
    18d6:	067f                	0x67f
    18d8:	012c                	addi	a1,sp,136
    18da:	025c                	addi	a5,sp,260
    18dc:	0082                	c.slli64	ra
    18de:	0000                	unimp
    18e0:	5d09                	li	s10,-30
    18e2:	0000                	unimp
    18e4:	fc00                	fsw	fs0,56(s0)
    18e6:	0018                	0x18
    18e8:	3400                	fld	fs0,40(s0)
    18ea:	0069                	c.nop	26
    18ec:	0000                	unimp
    18ee:	187a                	slli	a6,a6,0x3e
    18f0:	0000                	unimp
    18f2:	6934                	flw	fa3,80(a0)
    18f4:	0000                	unimp
    18f6:	8300                	0x8300
    18f8:	0018                	0x18
    18fa:	0000                	unimp
    18fc:	5d09                	li	s10,-30
    18fe:	0000                	unimp
    1900:	0f00                	addi	s0,sp,912
    1902:	0019                	c.nop	6
    1904:	3400                	fld	fs0,40(s0)
    1906:	0069                	c.nop	26
    1908:	0000                	unimp
    190a:	188c                	addi	a1,sp,112
    190c:	0000                	unimp
    190e:	0900                	addi	s0,sp,144
    1910:	005d                	c.nop	23
    1912:	0000                	unimp
    1914:	1922                	slli	s2,s2,0x28
    1916:	0000                	unimp
    1918:	6934                	flw	fa3,80(a0)
    191a:	0000                	unimp
    191c:	9500                	0x9500
    191e:	0018                	0x18
    1920:	0000                	unimp
    1922:	0003dc3b          	0x3dc3b
    1926:	0100                	addi	s0,sp,128
    1928:	0621                	addi	a2,a2,8
    192a:	0092                	slli	ra,ra,0x4
    192c:	0000                	unimp
    192e:	0096                	slli	ra,ra,0x5
    1930:	0000                	unimp
    1932:	9c01                	0x9c01
    1934:	19e4                	addi	s1,sp,252
    1936:	0000                	unimp
    1938:	613c                	flw	fa5,64(a0)
    193a:	0031                	c.nop	12
    193c:	2101                	jal	1d3c <random_keys+0x1c8>
    193e:	6315                	lui	t1,0x5
    1940:	0100000b          	0x100000b
    1944:	365a                	fld	fa2,432(sp)
    1946:	3261                	jal	12ce <__DTOR_END__+0x176>
    1948:	0100                	addi	s0,sp,128
    194a:	1d21                	addi	s10,s10,-24
    194c:	00000b63          	beqz	zero,1962 <result+0x1d6>
    1950:	1e6c                	addi	a1,sp,828
    1952:	0000                	unimp
    1954:	00056c37          	lui	s8,0x56
    1958:	0100                	addi	s0,sp,128
    195a:	2421                	jal	1b62 <ti_2+0x17e>
    195c:	005d                	c.nop	23
    195e:	0000                	unimp
    1960:	1e98                	addi	a4,sp,880
    1962:	0000                	unimp
    1964:	6938                	flw	fa4,80(a0)
    1966:	0100                	addi	s0,sp,128
    1968:	0522                	slli	a0,a0,0x8
    196a:	005d                	c.nop	23
    196c:	0000                	unimp
    196e:	1ef6                	slli	t4,t4,0x3d
    1970:	0000                	unimp
    1972:	e43d                	bnez	s0,19e0 <result+0x254>
    1974:	0019                	c.nop	6
    1976:	f600                	fsw	fs0,40(a2)
    1978:	0000                	unimp
    197a:	0a00                	addi	s0,sp,272
    197c:	0000                	unimp
    197e:	0100                	addi	s0,sp,128
    1980:	19991127          	0x19991127
    1984:	0000                	unimp
    1986:	fc3e                	fsw	fa5,56(sp)
    1988:	0019                	c.nop	6
    198a:	4e00                	lw	s0,24(a2)
    198c:	001f 3e00 19f1      	0x19f13e00001f
    1992:	0000                	unimp
    1994:	1f71                	addi	t5,t5,-4
    1996:	0000                	unimp
    1998:	3d00                	fld	fs0,56(a0)
    199a:	19e4                	addi	s1,sp,252
    199c:	0000                	unimp
    199e:	0108                	addi	a0,sp,128
    19a0:	0000                	unimp
    19a2:	000a                	c.slli	zero,0x2
    19a4:	0000                	unimp
    19a6:	2c01                	jal	1bb6 <random_keys+0x42>
    19a8:	c011                	beqz	s0,19ac <result+0x220>
    19aa:	0019                	c.nop	6
    19ac:	3e00                	fld	fs0,56(a2)
    19ae:	19fc                	addi	a5,sp,252
    19b0:	0000                	unimp
    19b2:	1f94                	addi	a3,sp,1008
    19b4:	0000                	unimp
    19b6:	f13e                	fsw	fa5,160(sp)
    19b8:	0019                	c.nop	6
    19ba:	b700                	fsd	fs0,40(a4)
    19bc:	001f 0000 e43f      	0xe43f0000001f
    19c2:	0019                	c.nop	6
    19c4:	1a00                	addi	s0,sp,304
    19c6:	0001                	nop
    19c8:	0a00                	addi	s0,sp,272
    19ca:	0000                	unimp
    19cc:	0100                	addi	s0,sp,128
    19ce:	1132                	slli	sp,sp,0x2c
    19d0:	fc3e                	fsw	fa5,56(sp)
    19d2:	0019                	c.nop	6
    19d4:	da00                	sw	s0,48(a2)
    19d6:	001f 3e00 19f1      	0x19f13e00001f
    19dc:	0000                	unimp
    19de:	1ffd                	addi	t6,t6,-1
    19e0:	0000                	unimp
    19e2:	0000                	unimp
    19e4:	6640                	flw	fs0,12(a2)
    19e6:	0006                	c.slli	zero,0x1
    19e8:	0100                	addi	s0,sp,128
    19ea:	0801060f          	0x801060f
    19ee:	001a                	c.slli	zero,0x6
    19f0:	4100                	lw	s0,0(a0)
    19f2:	3161                	jal	167a <product2+0x146>
    19f4:	0100                	addi	s0,sp,128
    19f6:	1a081e0f          	0x1a081e0f
    19fa:	0000                	unimp
    19fc:	6141                	addi	sp,sp,16
    19fe:	0032                	c.slli	zero,0xc
    1a00:	0f01                	addi	t5,t5,0
    1a02:	0830                	addi	a2,sp,24
    1a04:	001a                	c.slli	zero,0x6
    1a06:	0000                	unimp
    1a08:	0410                	addi	a2,sp,512
    1a0a:	0069                	c.nop	26
    1a0c:	0000                	unimp
    1a0e:	e442                	fsw	fa6,8(sp)
    1a10:	0019                	c.nop	6
    1a12:	8c00                	0x8c00
    1a14:	0000                	unimp
    1a16:	0600                	addi	s0,sp,768
    1a18:	0000                	unimp
    1a1a:	0100                	addi	s0,sp,128
    1a1c:	329c                	fld	fa5,32(a3)
    1a1e:	001a                	c.slli	zero,0x6
    1a20:	3e00                	fld	fs0,56(a2)
    1a22:	19f1                	addi	s3,s3,-4
    1a24:	0000                	unimp
    1a26:	2020                	fld	fs0,64(s0)
    1a28:	0000                	unimp
    1a2a:	0019fc43          	fmadd.s	fs8,fs3,ft1,ft0
    1a2e:	0100                	addi	s0,sp,128
    1a30:	6f44005b          	0x6f44005b
    1a34:	65000003          	lb	zero,1616(zero) # 650 <polydiv+0x1ac>
    1a38:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1a3c:	4400                	lw	s0,8(s0)
    1a3e:	0064                	addi	s1,sp,12
    1a40:	0000                	unimp
    1a42:	005a                	c.slli	zero,0x16
    1a44:	0000                	unimp
    1a46:	1e000007          	0x1e000007
    1a4a:	0000                	unimp
    1a4c:	0200                	addi	s0,sp,256
    1a4e:	0500                	addi	s0,sp,640
    1a50:	0004                	0x4
    1a52:	0400                	addi	s0,sp,512
    1a54:	f701                	bnez	a4,195c <result+0x1d0>
    1a56:	0028                	addi	a0,sp,8
    1a58:	1800                	addi	s0,sp,48
    1a5a:	0000                	unimp
    1a5c:	1100                	addi	s0,sp,160
    1a5e:	18000007          	0x18000007
    1a62:	42000007          	0x42000007
    1a66:	01000007          	0x1000007
    1a6a:	80              	Address 0x0000000000001a6a is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x15e>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 700b3 <_stack_start+0x600b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 5001 <_stack_len+0x1001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  7e:	0b01130b          	0xb01130b
  82:	3b0b3a0b          	0x3b0b3a0b
  86:	010b390b          	0x10b390b
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
            a1[length-1] = a2[length-1];
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-2] = a2[length-2];
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
} //end of function
  f0:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
            for (i = 0; i < (length / 3); i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    asm volatile(
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	03011317          	auipc	t1,0x3011
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
    int line[size_b][size_a + size_b];
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    int pola[size_a];
 160:	0013010b          	0x13010b
    int line[size_b][size_a + size_b];
 164:	1c00                	addi	s0,sp,560
    int pola[size_a];
 166:	0b0b0117          	auipc	sp,0xb0b0
    int line[size_b][size_a + size_b];
 16a:	0b3a                	slli	s6,s6,0xe
    int pola[size_a];
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
    int polb[size_b];
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 17a:	39053b0b          	0x39053b0b
    int polb[size_b];
 17e:	0013490b          	0x13490b
            line[i][j] = 0;
 182:	1e00                	addi	s0,sp,816
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	0e030013          	addi	zero,t1,224
    int pola[size_a];
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	151f 2701 0119      	0x1192701151f
    int polb[size_b];
 192:	20000013          	li	zero,512
            line[i][j] = 0;
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 19c:	0b39053b          	0xb39053b
            product[j] = 0;
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    array_equ(pola,a,size_a); 
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
    for (i = 0; i < size_a; ++i){
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
    array_equ(polb,b,size_b);
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0x14e>
 1d0:	00052f13          	slti	t5,a0,0
    for (i = 0; i < size_b; ++i){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    if(star_mult == 1){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_equ+0x68>
 1ec:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f4:	1113490b          	0x1113490b
            product[j] = 0;
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
            line[i][j] = 0;
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
            product[j] = 0;
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
        for(j = 0; j < size_a + size_b -1; ++j){
 216:	0034                	addi	a3,sp,8
            pola[i] = pola[i] + mod;
 218:	0b3a0803          	lb	a6,179(s4)
        while (pola[i] < 0){
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
        pola[i] = pola[i] % mod;
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
        pola[i] = pola[i] % mod;
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
            polb[i] = polb[i] + mod;
 230:	0213490b          	0x213490b
        while (polb[i] < 0){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
        polb[i] = polb[i] % mod;
 23a:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 23e:	0b39053b          	0xb39053b
        polb[i] = polb[i] % mod;
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 246:	342a                	fld	fs0,168(sp)
    if(star_mult == 1){
 248:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
    for(j = 0; j < size_a + size_b -1; ++j){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
}
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
                line[size_b-1-j][k] = pola[k]*polb[j];
 294:	12011113          	0x12011113
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
            for (k = size_a-1; k >= 0; k = k-1 ){
 2a4:	0300                	addi	s0,sp,384
                line[size_b-1-j][k] = pola[k]*polb[j];
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ac:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ba:	0b39053b          	0xb39053b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 2e0:	2134                	fld	fa3,64(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
            line[i][j] = line[i][j] % mod;
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for (i = 0; i < size_b; ++i){
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
        for(j = 0; j < size_a + size_b -1; ++j){
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
            product[j] += line[i][j];
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
        for(i = 0; i < size_b; ++i){
 308:	0005                	c.nop	1
            product[j] += line[i][j];
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
        for(i = 0; i < size_b; ++i){
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
    for(j = 0; j < size_a + size_b -1; ++j){
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 322:	0213490b          	0x213490b
    for(j = 0; j < size_a + size_b -1; ++j){
 326:	38000017          	auipc	zero,0x38000
        product[j] = product[j] % mod;
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 334:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 362:	390b3b0b          	0x390b3b0b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 366:	1119270b          	0x1119270b
    int line[size_b][size_a + size_b];
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
    int pola[size_a];
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
    int line[size_b][size_a + size_b];
 376:	053c                	addi	a5,sp,648
    int pola[size_a];
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
    int polb[size_b];
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
    int line[size_b][size_a + size_b];
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 390:	0b58                	addi	a4,sp,404
    int pola[size_a];
 392:	0b59                	addi	s6,s6,22
 394:	13010b57          	0x13010b57
    for (i = 0; i < size_b; ++i){
 398:	0000                	unimp
 39a:	053e                	slli	a0,a0,0xf
 39c:	3100                	fld	fs0,32(a0)
            product2[j] = 0;
 39e:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
 3a2:	3f00                	fld	fs0,56(a4)
 3a4:	011d                	addi	sp,sp,7
    for (i = 0; i < size_b; ++i){
 3a6:	1331                	addi	t1,t1,-20
 3a8:	0111                	addi	sp,sp,4
    array_equ(pola,a,size_a);
 3aa:	0612                	slli	a2,a2,0x4
 3ac:	0b58                	addi	a4,sp,404
 3ae:	0b59                	addi	s6,s6,22
 3b0:	00000b57          	0xb57
 3b4:	2e40                	fld	fs0,152(a2)
    array_equ(polb,b,size_b);
 3b6:	3f01                	jal	2c6 <polymult+0x19e>
 3b8:	0319                	addi	t1,t1,6
 3ba:	3a0e                	fld	fs4,224(sp)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	2019270b          	0x2019270b
    if(star_mult == 1){
 3c4:	0013010b          	0x13010b
 3c8:	4100                	lw	s0,0(a0)
 3ca:	0005                	c.nop	1
 3cc:	0b3a0803          	lb	a6,179(s4)
 3d0:	0b390b3b          	0xb390b3b
        for (j = size_b -1; j >= 0; j = j-1){
 3d4:	1349                	addi	t1,t1,-14
 3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	2e42                	fld	ft8,16(sp)
 3da:	3101                	jal	ffffffda <_stack_start+0xfffeffda>
            product2[j] = 0;
 3dc:	12011113          	0x12011113
 3e0:	4006                	0x4006
            line[i][j] = 0;
 3e2:	9718                	0x9718
 3e4:	1942                	slli	s2,s2,0x30
            product2[j] = 0;
 3e6:	1301                	addi	t1,t1,-32
 3e8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 3ea:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
 3ee:	00180213          	addi	tp,a6,1 # fffe0001 <_stack_start+0xfffd0001>
    for (i = 0; i < size_b; ++i){
 3f2:	4400                	lw	s0,8(s0)
 3f4:	002e                	c.slli	zero,0xb
 3f6:	193c193f 0e030e6e 	0xe030e6e193c193f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3fe:	0b3a                	slli	s6,s6,0xe
 400:	00000b3b          	0xb3b
 404:	0100                	addi	s0,sp,128
 406:	0011                	c.nop	4
 408:	0610                	addi	a2,sp,768
 40a:	0655                	addi	a2,a2,21
 40c:	0e1b0e03          	lb	t3,225(s6) # fffe00e1 <_stack_start+0xfffd00e1>
 410:	0e25                	addi	t3,t3,9
 412:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	10ea                	slli	ra,ra,0x3a
       2:	0000                	unimp
       4:	10fc                	addi	a5,sp,108
       6:	0000                	unimp
       8:	0001                	nop
       a:	fc5a                	fsw	fs6,56(sp)
       c:	0010                	0x10
       e:	fd00                	fsw	fs0,56(a0)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	10fe                	slli	ra,ra,0x3f
      20:	0000                	unimp
      22:	1138                	addi	a4,sp,168
      24:	0000                	unimp
      26:	0001                	nop
      28:	3e5a                	fld	ft8,432(sp)
      2a:	0011                	c.nop	4
      2c:	4800                	lw	s0,16(s0)
      2e:	0011                	c.nop	4
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	1078                	addi	a4,sp,44
      3e:	0000                	unimp
      40:	10ca                	slli	ra,ra,0x32
      42:	0000                	unimp
      44:	0001                	nop
      46:	ca5a                	sw	s6,20(sp)
      48:	0010                	0x10
      4a:	e600                	fsw	fs0,8(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	6c00                	flw	fs0,24(s0)
      5e:	0010                	0x10
      60:	ac00                	fsd	fs0,24(s0)
      62:	0010                	0x10
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	10ac                	addi	a1,sp,104
      6c:	0000                	unimp
      6e:	10b6                	slli	ra,ra,0x2d
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	10b6                	slli	ra,ra,0x2d
      78:	0000                	unimp
      7a:	000010e7          	0x10e7
      7e:	0002                	c.slli64	zero
      80:	007d                	c.nop	31
      82:	000010e7          	0x10e7
      86:	113c                	addi	a5,sp,168
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	3c79                	jal	fffffb2c <_stack_start+0xfffefb2c>
}
      90:	0011                	c.nop	4
    switch(length%3) {
      92:	3e00                	fld	fs0,56(a2)
      94:	0011                	c.nop	4
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	113e                	slli	sp,sp,0x2f
      9e:	0000                	unimp
      a0:	1148                	addi	a0,sp,164
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	6c00                	flw	fs0,24(s0)
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0010                	0x10
      b4:	8600                	0x8600
      b6:	0010                	0x10
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	1086                	slli	ra,ra,0x21
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	1088                	addi	a0,sp,96
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	1088                	addi	a0,sp,96
      cc:	0000                	unimp
      ce:	10f4                	addi	a3,sp,108
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d6:	f47a                	fsw	ft10,40(sp)
      d8:	0010                	0x10
      da:	fd00                	fsw	fs0,56(a0)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	fd00                	fsw	fs0,56(a0)
            a1[length-1] = a2[length-1];
      e4:	0010                	0x10
            a1[length-2] = a2[length-2];
      e6:	3c00                	fld	fs0,56(s0)
      e8:	0011                	c.nop	4
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
} //end of function
      f0:	113c                	addi	a5,sp,168
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	113e                	slli	sp,sp,0x2f
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # 53379 <_stack_start+0x43379>
      fc:	3e7a                	fld	ft8,440(sp)
      fe:	0011                	c.nop	4
            for (i = 0; i < (length / 3); i++) {
     100:	4800                	lw	s0,16(s0)
     102:	0011                	c.nop	4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
    asm volatile(
     108:	7af0                	flw	fa2,116(a3)
	...
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	106c                	addi	a1,sp,44
     114:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	1092                	slli	ra,ra,0x24
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	927c                	0x927c
     120:	0010                	0x10
     122:	9c00                	0x9c00
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0010                	0x10
     126:	0200                	addi	s0,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	7e00                	flw	fs0,56(a2)
     12a:	9c00                	0x9c00
     12c:	0010                	0x10
     12e:	3600                	fld	fs0,40(a2)
    int line[size_b][size_a + size_b];
     130:	0011                	c.nop	4
     132:	0200                	addi	s0,sp,256
     134:	7800                	flw	fs0,48(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	3600                	fld	fs0,40(a2)
     138:	0011                	c.nop	4
    int line[size_b][size_a + size_b];
     13a:	3c00                	fld	fs0,56(s0)
     13c:	0011                	c.nop	4
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	113c                	addi	a5,sp,168
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	0000                	unimp
     148:	113e                	slli	sp,sp,0x2f
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	3e7c                	fld	fa5,248(a2)
     152:	0011                	c.nop	4
     154:	4800                	lw	s0,16(s0)
     156:	0011                	c.nop	4
     158:	0200                	addi	s0,sp,256
     15a:	7800                	flw	fs0,48(s0)
	...
    int line[size_b][size_a + size_b];
     164:	6c00                	flw	fs0,24(s0)
    int pola[size_a];
     166:	0010                	0x10
    int line[size_b][size_a + size_b];
     168:	c600                	sw	s0,8(a2)
     16a:	0010                	0x10
    int pola[size_a];
     16c:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     16e:	9100                	0x9100
    int pola[size_a];
     170:	7e98                	flw	fa4,56(a3)
     172:	10c6                	slli	ra,ra,0x31
    int polb[size_b];
     174:	0000                	unimp
     176:	10cc                	addi	a1,sp,100
     178:	0000                	unimp
    int pola[size_a];
     17a:	0002                	c.slli64	zero
    int polb[size_b];
     17c:	007c                	addi	a5,sp,12
     17e:	10cc                	addi	a1,sp,100
            line[i][j] = 0;
     180:	0000                	unimp
     182:	000010e7          	0x10e7
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     186:	0002                	c.slli64	zero
    int pola[size_a];
     188:	0080                	addi	s0,sp,64
     18a:	000010e7          	0x10e7
    int line[size_b][size_a + size_b];
     18e:	113c                	addi	a5,sp,168
     190:	0000                	unimp
    int polb[size_b];
     192:	98910003          	lb	zero,-1655(sp)
            line[i][j] = 0;
     196:	3c7e                	fld	fs8,504(sp)
     198:	0011                	c.nop	4
    for (i = 0; i < size_b; ++i){
     19a:	3e00                	fld	fs0,56(a2)
     19c:	0011                	c.nop	4
            product[j] = 0;
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	113e                	slli	sp,sp,0x2f
    for (i = 0; i < size_b; ++i){
     1a6:	0000                	unimp
     1a8:	1148                	addi	a0,sp,164
    array_equ(pola,a,size_a); 
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	7800                	flw	fs0,48(s0)
    for (i = 0; i < size_a; ++i){
     1ba:	0010                	0x10
     1bc:	7e00                	flw	fs0,56(a2)
     1be:	0010                	0x10
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	fe9f 0010 1400      	0x14000010fe9f
    array_equ(polb,b,size_b);
     1ca:	0011                	c.nop	4
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    for (i = 0; i < size_b; ++i){
     1d6:	0000                	unimp
     1d8:	6800                	flw	fs0,16(s0)
    if(star_mult == 1){
     1da:	000d                	c.nop	3
     1dc:	9400                	0x9400
     1de:	000d                	c.nop	3
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0d94                	addi	a3,sp,720
     1e6:	0000                	unimp
     1e8:	0dfe                	slli	s11,s11,0x1f
     1ea:	0000                	unimp
     1ec:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	fe58                	fsw	fa4,60(a2)
     1f0:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	1800                	addi	s0,sp,48
     1f4:	000e                	c.slli	zero,0x3
            product[j] = 0;
     1f6:	0300                	addi	s0,sp,384
     1f8:	8700                	0x8700
     1fa:	9f7f                	0x9f7f
            line[i][j] = 0;
     1fc:	0e18                	addi	a4,sp,784
     1fe:	0000                	unimp
            product[j] = 0;
     200:	0e1e                	slli	t3,t3,0x7
     202:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0e1e                	slli	t3,t3,0x7
    for (i = 0; i < size_b; ++i){
     20c:	0000                	unimp
     20e:	0e54                	addi	a3,sp,788
     210:	0000                	unimp
     212:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
            pola[i] = pola[i] + mod;
     218:	0000                	unimp
     21a:	0000                	unimp
        while (pola[i] < 0){
     21c:	6800                	flw	fs0,16(s0)
     21e:	000d                	c.nop	3
     220:	a200                	fsd	fs0,0(a2)
        pola[i] = pola[i] % mod;
     222:	000d                	c.nop	3
     224:	0100                	addi	s0,sp,128
    for (i = 0; i < size_a; ++i){
     226:	5b00                	lw	s0,48(a4)
     228:	0da2                	slli	s11,s11,0x8
        pola[i] = pola[i] % mod;
     22a:	0000                	unimp
     22c:	0e16                	slli	t3,t3,0x5
    for (i = 0; i < size_a; ++i){
     22e:	0000                	unimp
            polb[i] = polb[i] + mod;
     230:	0001                	nop
     232:	1666                	slli	a2,a2,0x39
        while (polb[i] < 0){
     234:	000e                	c.slli	zero,0x3
     236:	1e00                	addi	s0,sp,816
     238:	000e                	c.slli	zero,0x3
        polb[i] = polb[i] % mod;
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
    for (i = 0; i < size_b; ++i){
     23e:	5b01                	li	s6,-32
     240:	1e9f 000e 5400      	0x5400000e1e9f
     246:	000e                	c.slli	zero,0x3
    if(star_mult == 1){
     248:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	6600                	flw	fs0,8(a2)
	...
    for (i = 0; i < size_b; ++i){
     254:	0d68                	addi	a0,sp,668
     256:	0000                	unimp
     258:	0d96                	slli	s11,s11,0x5
     25a:	0000                	unimp
     25c:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	965c                	0x965c
     260:	000d                	c.nop	3
     262:	0e00                	addi	s0,sp,784
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	000e                	c.slli	zero,0x3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
}
     26a:	0e0e                	slli	t3,t3,0x3
     26c:	0000                	unimp
     26e:	0e1e                	slli	t3,t3,0x7
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0e1e                	slli	t3,t3,0x7
     27a:	0000                	unimp
     27c:	0e54                	addi	a3,sp,788
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	6800                	flw	fs0,16(s0)
     28c:	000d                	c.nop	3
     28e:	9c00                	0x9c00
     290:	000d                	c.nop	3
     292:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	5d00                	lw	s0,56(a0)
     296:	0d9c                	addi	a5,sp,720
     298:	0000                	unimp
     29a:	00000db3          	add	s11,zero,zero
     29e:	0001                	nop
     2a0:	b35a                	fsd	fs6,416(sp)
     2a2:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	5400                	lw	s0,40(s0)
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	000e                	c.slli	zero,0x3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
        for (j = size_b -1; j >= 0; j = j-1){
     2b4:	0000                	unimp
     2b6:	6800                	flw	fs0,16(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	000d                	c.nop	3
     2ba:	7e00                	flw	fs0,56(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	000d                	c.nop	3
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0d7e                	slli	s10,s10,0x1f
     2c4:	0000                	unimp
     2c6:	0e1a                	slli	t3,t3,0x6
     2c8:	0000                	unimp
     2ca:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	1a68                	addi	a0,sp,316
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	000e                	c.slli	zero,0x3
     2d0:	1e00                	addi	s0,sp,816
     2d2:	000e                	c.slli	zero,0x3
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	5e01                	li	t3,-32
     2da:	1e9f 000e 5400      	0x5400000e1e9f
            line[i][j] = line[i][j] % mod;
     2e0:	000e                	c.slli	zero,0x3
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0100                	addi	s0,sp,128
     2e4:	6800                	flw	fs0,16(s0)
	...
     2ee:	0d68                	addi	a0,sp,668
     2f0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2f2:	00000db3          	add	s11,zero,zero
     2f6:	0001                	nop
     2f8:	b35f 000d 5400      	0x5400000db35f
            product[j] += line[i][j];
     2fe:	000e                	c.slli	zero,0x3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	6800                	flw	fs0,16(s0)
     310:	000d                	c.nop	3
     312:	b300                	fsd	fs0,32(a4)
     314:	000d                	c.nop	3
        for(i = 0; i < size_b; ++i){
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	00000db3          	add	s11,zero,zero
     31e:	0e14                	addi	a3,sp,784
        for(i = 0; i < size_b; ++i){
     320:	0000                	unimp
     322:	0001                	nop
        product[j] = product[j] % mod;
     324:	1465                	addi	s0,s0,-7
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	000e                	c.slli	zero,0x3
     328:	1e00                	addi	s0,sp,816
        product[j] = product[j] % mod;
     32a:	000e                	c.slli	zero,0x3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	1e9f 000e 5400      	0x5400000e1e9f
    int line[size_b][size_a + size_b];
     338:	000e                	c.slli	zero,0x3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	0100                	addi	s0,sp,128
     33c:	6500                	flw	fs0,8(a0)
	...
    int line[size_b][size_a + size_b];
     346:	0dfa                	slli	s11,s11,0x1e
     348:	0000                	unimp
     34a:	0e1e                	slli	t3,t3,0x7
     34c:	0000                	unimp
     34e:	0001                	nop
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	b400                	fsd	fs0,40(s0)
     35a:	000d                	c.nop	3
     35c:	c300                	sw	s0,0(a4)
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     362:	5a00                	lw	s0,48(a2)
	...
     36c:	0dc6                	slli	s11,s11,0x11
    int pola[size_a];
     36e:	0000                	unimp
     370:	0de4                	addi	s1,sp,732
     372:	0000                	unimp
     374:	0001                	nop
    int line[size_b][size_a + size_b];
     376:	e45a                	fsw	fs6,8(sp)
    int pola[size_a];
     378:	000d                	c.nop	3
     37a:	e700                	fsw	fs0,8(a4)
    int polb[size_b];
     37c:	000d                	c.nop	3
     37e:	0100                	addi	s0,sp,128
     380:	5c00                	lw	s0,56(s0)
    int pola[size_a];
     382:	0e1e                	slli	t3,t3,0x7
    int polb[size_b];
     384:	0000                	unimp
     386:	0e42                	slli	t3,t3,0x10
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0000                	unimp
     38a:	0001                	nop
    int line[size_b][size_a + size_b];
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	0000                	unimp
    int pola[size_a];
     392:	0000                	unimp
     394:	e800                	fsw	fs0,16(s0)
    int polb[size_b];
     396:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     398:	f300                	fsw	fs0,32(a4)
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
            product2[j] = 0;
     39e:	5a00                	lw	s0,48(a2)
	...
    for (i = 0; i < size_b; ++i){
     3a8:	0df4                	addi	a3,sp,732
    array_equ(pola,a,size_a);
     3aa:	0000                	unimp
     3ac:	0e1e                	slli	t3,t3,0x7
     3ae:	0000                	unimp
     3b0:	0001                	nop
     3b2:	425a                	lw	tp,148(sp)
     3b4:	000e                	c.slli	zero,0x3
    array_equ(polb,b,size_b);
     3b6:	5400                	lw	s0,40(s0)
     3b8:	000e                	c.slli	zero,0x3
     3ba:	0100                	addi	s0,sp,128
     3bc:	5a00                	lw	s0,48(a2)
	...
    if(star_mult == 1){
     3c6:	0dc6                	slli	s11,s11,0x11
     3c8:	0000                	unimp
     3ca:	0dcc                	addi	a1,sp,724
     3cc:	0000                	unimp
     3ce:	0001                	nop
     3d0:	cc59                	beqz	s0,46e <polymult2+0x13a>
     3d2:	000d                	c.nop	3
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	d800                	sw	s0,48(s0)
     3d6:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0100                	addi	s0,sp,128
     3da:	5d00                	lw	s0,56(a0)
            product2[j] = 0;
     3dc:	0dd8                	addi	a4,sp,724
     3de:	0000                	unimp
     3e0:	0dde                	slli	s11,s11,0x17
            line[i][j] = 0;
     3e2:	0000                	unimp
     3e4:	0001                	nop
            product2[j] = 0;
     3e6:	f45e                	fsw	fs7,40(sp)
     3e8:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0c00                	addi	s0,sp,528
     3ec:	000e                	c.slli	zero,0x3
     3ee:	0100                	addi	s0,sp,128
     3f0:	5900                	lw	s0,48(a0)
    for (i = 0; i < size_b; ++i){
     3f2:	0e1e                	slli	t3,t3,0x7
     3f4:	0000                	unimp
     3f6:	0e28                	addi	a0,sp,792
     3f8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	0001                	nop
     3fc:	285d                	jal	4b2 <polydiv+0xe>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	000e                	c.slli	zero,0x3
     400:	2e00                	fld	fs0,24(a2)
     402:	000e                	c.slli	zero,0x3
     404:	0300                	addi	s0,sp,384
     406:	7d00                	flw	fs0,56(a0)
     408:	9f7f                	0x9f7f
     40a:	0e2e                	slli	t3,t3,0xb
     40c:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	0e30                	addi	a2,sp,792
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	0000                	unimp
     412:	0001                	nop
     414:	305d                	jal	fffffcba <_stack_start+0xfffefcba>
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	000e                	c.slli	zero,0x3
     418:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	000e                	c.slli	zero,0x3
     41c:	0100                	addi	s0,sp,128
     41e:	5e00                	lw	s0,56(a2)
     420:	0e42                	slli	t3,t3,0x10
     422:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     424:	0e4c                	addi	a1,sp,788
    for(i=0;i<size_b;++i){
     426:	0000                	unimp
     428:	0001                	nop
     42a:	4c59                	li	s8,22
     42c:	000e                	c.slli	zero,0x3
     42e:	5200                	lw	s0,32(a2)
     430:	000e                	c.slli	zero,0x3
     432:	0300                	addi	s0,sp,384
        for(j=0;j<size_a+size_b-1;++j){
     434:	7900                	flw	fs0,48(a0)
     436:	9f7f                	0x9f7f
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	0e52                	slli	t3,t3,0x14
     43a:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	0e54                	addi	a3,sp,788
     43e:	0000                	unimp
     440:	0001                	nop
     442:	0059                	c.nop	22
     444:	0000                	unimp
     446:	0000                	unimp
     448:	0000                	unimp
     44a:	ae00                	fsd	fs0,24(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	000c                	0xc
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	dc00                	sw	s0,56(s0)
     450:	000c                	0xc
     452:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	5a00                	lw	s0,48(a2)
     456:	0cdc                	addi	a5,sp,596
        for (j = size_b -1; j >= 0; j = j-1){
     458:	0000                	unimp
     45a:	0d32                	slli	s10,s10,0xc
     45c:	0000                	unimp
     45e:	0001                	nop
            product2[j] += line[i][j];
     460:	3258                	fld	fa4,160(a2)
     462:	000d                	c.nop	3
        for(j=0;j<size_a+size_b-1;++j){
     464:	6800                	flw	fs0,16(s0)
     466:	000d                	c.nop	3
            product2[j] += line[i][j];
     468:	0400                	addi	s0,sp,512
     46a:	f300                	fsw	fs0,32(a4)
     46c:	5a01                	li	s4,-32
        for(j=0;j<size_a+size_b-1;++j){
     46e:	009f 0000 0000      	0x9f
    for(i=0;i<size_b;++i){
     474:	0000                	unimp
     476:	ae00                	fsd	fs0,24(a2)
     478:	000c                	0xc
}
     47a:	ce00                	sw	s0,24(a2)
     47c:	000c                	0xc
     47e:	0100                	addi	s0,sp,128
     480:	5b00                	lw	s0,48(a4)
     482:	0cce                	slli	s9,s9,0x13
     484:	0000                	unimp
     486:	0d4c                	addi	a1,sp,660
     488:	0000                	unimp
     48a:	0001                	nop
     48c:	4c62                	lw	s8,24(sp)
     48e:	000d                	c.nop	3
     490:	5600                	lw	s0,40(a2)
     492:	000d                	c.nop	3
     494:	0400                	addi	s0,sp,512
     496:	f300                	fsw	fs0,32(a4)
     498:	5b01                	li	s6,-32
     49a:	569f 000d 6800      	0x6800000d569f
     4a0:	000d                	c.nop	3
     4a2:	0100                	addi	s0,sp,128
    int v[size_N];
     4a4:	6200                	flw	fs0,0(a2)
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ae:	0cae                	slli	s9,s9,0xb
     4b0:	0000                	unimp
     4b2:	0cd2                	slli	s9,s9,0x14
     4b4:	0000                	unimp
     4b6:	0001                	nop
     4b8:	d25c                	sw	a5,36(a2)
     4ba:	000c                	0xc
     4bc:	1e00                	addi	s0,sp,816
     4be:	000d                	c.nop	3
     4c0:	0100                	addi	s0,sp,128
     4c2:	5900                	lw	s0,48(a0)
    int v[size_N];
     4c4:	0d1e                	slli	s10,s10,0x7
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	0000                	unimp
     4c8:	0d68                	addi	a0,sp,668
    int v[size_N];
     4ca:	0000                	unimp
     4cc:	0004                	0x4
     4ce:	9f5c01f3          	0x9f5c01f3
	...
    int denum_temp[size_D];
     4da:	0cae                	slli	s9,s9,0xb
     4dc:	0000                	unimp
     4de:	00000ceb          	0xceb
     4e2:	0001                	nop
     4e4:	eb5d                	bnez	a4,59a <polydiv+0xf6>
     4e6:	000c                	0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	5000                	lw	s0,32(s0)
     4ea:	000d                	c.nop	3
    int v[size_N];
     4ec:	0100                	addi	s0,sp,128
     4ee:	6400                	flw	fs0,8(s0)
    array_equ(num_temp,num,size_N);
     4f0:	0d50                	addi	a2,sp,660
     4f2:	0000                	unimp
     4f4:	0d56                	slli	s10,s10,0x15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	0000                	unimp
     4f8:	0004                	0x4
    int denum_temp[size_D];
     4fa:	9f5d01f3          	0x9f5d01f3
    array_equ(num_temp,num,size_N);
     4fe:	0d56                	slli	s10,s10,0x15
    int denum_temp[size_D];
     500:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     502:	0d68                	addi	a0,sp,668
     504:	0000                	unimp
     506:	0001                	nop
     508:	0064                	addi	s1,sp,12
     50a:	0000                	unimp
        array_equ(denum_temp,denum,size_D);
     50c:	0000                	unimp
     50e:	0000                	unimp
     510:	ae00                	fsd	fs0,24(a2)
     512:	000c                	0xc
    for (i = 0; i < size_D; ++i) {
     514:	eb00                	fsw	fs0,16(a4)
     516:	000c                	0xc
     518:	0100                	addi	s0,sp,128
     51a:	5e00                	lw	s0,56(a2)
    for (i = 0; i < size_N; ++i){
     51c:	00000ceb          	0xceb
     520:	0d4e                	slli	s10,s10,0x13
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0000                	unimp
     524:	0001                	nop
     526:	000d4e63          	bltz	s10,542 <polydiv+0x9e>
     52a:	5600                	lw	s0,40(a2)
     52c:	000d                	c.nop	3
    for (i = 0; i < size_N; ++i){
     52e:	0400                	addi	s0,sp,512
     530:	f300                	fsw	fs0,32(a4)
        if ( (b_N*u)%mod == 1 )
     532:	5e01                	li	t3,-32
    for (u = 0; u < mod; ++u){
     534:	569f 000d 6800      	0x6800000d569f
     53a:	000d                	c.nop	3
            num_temp[i] = num_temp[i] + mod;
     53c:	0100                	addi	s0,sp,128
     53e:	6300                	flw	fs0,0(a4)
	...
        num_temp[i] = num_temp[i] % mod;
     548:	0d38                	addi	a4,sp,664
    for (i = 0; i < size_N; ++i){
     54a:	0000                	unimp
     54c:	0d56                	slli	s10,s10,0x15
        num_temp[i] = num_temp[i] % mod;
     54e:	0000                	unimp
     550:	0001                	nop
    for (i = 0; i < size_N; ++i){
     552:	005a                	c.slli	zero,0x16
            denum_temp[i] = denum_temp[i] + mod;
     554:	0000                	unimp
     556:	0000                	unimp
        while (denum_temp[i] < 0) {
     558:	0000                	unimp
     55a:	fe00                	fsw	fs0,56(a2)
     55c:	000c                	0xc
        denum_temp[i] = denum_temp[i] % mod;
     55e:	2b00                	fld	fs0,16(a4)
     560:	000d                	c.nop	3
    for (i = 0; i < size_D; ++i) {
     562:	0100                	addi	s0,sp,128
     564:	5a00                	lw	s0,48(a2)
	...
        q[i] = 0;
     56e:	0cfe                	slli	s9,s9,0x1f
     570:	0000                	unimp
     572:	0d04                	addi	s1,sp,656
        v[i] = 0;
     574:	0000                	unimp
        q[i] = 0;
     576:	0002                	c.slli64	zero
     578:	9f30                	0x9f30
        v[i] = 0;
     57a:	0d2c                	addi	a1,sp,664
     57c:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     57e:	0d4a                	slli	s10,s10,0x12
     580:	0000                	unimp
        if( denum_temp[i] != 0 )
     582:	0001                	nop
    for (i = size_D-1; i >= 0; i = i-1){
     584:	5659                	li	a2,-10
     586:	000d                	c.nop	3
        if ( (b_N*u)%mod == 1 )
     588:	6000                	flw	fs0,0(s0)
     58a:	000d                	c.nop	3
     58c:	0100                	addi	s0,sp,128
     58e:	5900                	lw	s0,48(a0)
     590:	0d60                	addi	s0,sp,668
    for (u = 0; u < mod; ++u){
     592:	0000                	unimp
     594:	0d66                	slli	s10,s10,0x19
        if( num_temp[i] != 0 )
     596:	0000                	unimp
    for (i = size_N-1; i >= 0; i = i-1){
     598:	7f790003          	lb	zero,2039(s2) # 537f7 <_stack_start+0x437f7>
     59c:	669f 000d 6800      	0x6800000d669f
     5a2:	000d                	c.nop	3
     5a4:	0100                	addi	s0,sp,128
    while (d >= d2){
     5a6:	5900                	lw	s0,48(a0)
	...
	array_equ(result,q,size_N);
     5b0:	0990                	addi	a2,sp,208
     5b2:	0000                	unimp
     5b4:	09e8                	addi	a0,sp,220
     5b6:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	0001                	nop
     5ba:	e85a                	fsw	fs6,16(sp)
        result[i] = num_temp[i-size_N];
     5bc:	0009                	c.nop	2
     5be:	b000                	fsd	fs0,32(s0)
     5c0:	0100000b          	0x100000b
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0bb0                	addi	a2,sp,472
}
     5c8:	0000                	unimp
     5ca:	0be4                	addi	s1,sp,476
     5cc:	0000                	unimp
     5ce:	7f860003          	lb	zero,2040(a2) # fffe07f8 <_stack_start+0xfffd07f8>
     5d2:	e49f 000b 0600      	0x600000be49f
     5d8:	000c                	0xc
     5da:	0400                	addi	s0,sp,512
     5dc:	f300                	fsw	fs0,32(a4)
     5de:	5a01                	li	s4,-32
     5e0:	069f 000c 9a00      	0x9a00000c069f
     5e6:	000c                	0xc
     5e8:	0100                	addi	s0,sp,128
     5ea:	6200                	flw	fs0,0(a2)
     5ec:	0c9a                	slli	s9,s9,0x6
     5ee:	0000                	unimp
     5f0:	0cae                	slli	s9,s9,0xb
        v[(d-d2)] = u*r_d;
     5f2:	0000                	unimp
     5f4:	7f860003          	lb	zero,2040(a2)
     5f8:	009f 0000 0000      	0x9f
     5fe:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     600:	9000                	0x9000
     602:	0009                	c.nop	2
     604:	d800                	sw	s0,48(s0)
     606:	0009                	c.nop	2
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	0100                	addi	s0,sp,128
     60a:	5b00                	lw	s0,48(a4)
     60c:	09d8                	addi	a4,sp,212
     60e:	0000                	unimp
     610:	0bec                	addi	a1,sp,476
     612:	0000                	unimp
     614:	0001                	nop
        for (i = 0; i < size_N; ++i){
     616:	ec68                	fsw	fa0,92(s0)
     618:	0600000b          	0x600000b
     61c:	000c                	0xc
     61e:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     620:	f300                	fsw	fs0,32(a4)
     622:	5b01                	li	s6,-32
     624:	069f 000c ae00      	0xae00000c069f
        for (i = 0; i < size_N; ++i){
     62a:	000c                	0xc
     62c:	0100                	addi	s0,sp,128
     62e:	6800                	flw	fs0,16(s0)
	...
        for (i = size_N-1; i >= 0; i = i-1){
     638:	0990                	addi	a2,sp,208
     63a:	0000                	unimp
     63c:	09dc                	addi	a5,sp,212
     63e:	0000                	unimp
     640:	0001                	nop
     642:	dc5c                	sw	a5,60(s0)
     644:	0009                	c.nop	2
     646:	e800                	fsw	fs0,16(s0)
            v[i] = v[i] % mod;
     648:	0100000b          	0x100000b
        for (i = 0; i < size_N; ++i){
     64c:	6700                	flw	fs0,8(a4)
            v[i] = v[i] % mod;
     64e:	0be8                	addi	a0,sp,476
     650:	0000                	unimp
     652:	0c06                	slli	s8,s8,0x1
     654:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     656:	0004                	0x4
                product[i] = product[i] + mod;
     658:	9f5c01f3          	0x9f5c01f3
            while (product[i] < 0) {
     65c:	0c06                	slli	s8,s8,0x1
     65e:	0000                	unimp
     660:	0cae                	slli	s9,s9,0xb
            product[i] = product[i] % mod;
     662:	0000                	unimp
     664:	0001                	nop
        for (i = 0; i < size_N; ++i){
     666:	00000067          	jr	zero # 0 <__DYNAMIC>
            product[i] = product[i] % mod;
     66a:	0000                	unimp
     66c:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     66e:	3600                	fld	fs0,40(a2)
            num_temp[i] = num_temp[i] - product[i];
     670:	4000000b          	0x4000000b
     674:	0100000b          	0x100000b
     678:	5a00                	lw	s0,48(a2)
	...
     682:	0b50                	addi	a2,sp,404
        for (i = 0; i < size_N; ++i){
     684:	0000                	unimp
                num_temp[i] = num_temp[i] + mod;
     686:	00000b6f          	jal	s6,686 <polydiv+0x1e2>
            while (num_temp[i] < 0){
     68a:	0001                	nop
     68c:	665a                	flw	fa2,148(sp)
     68e:	000c                	0xc
            num_temp[i] = num_temp[i] % mod;
     690:	7a00                	flw	fs0,48(a2)
     692:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     694:	0100                	addi	s0,sp,128
     696:	5a00                	lw	s0,48(a2)
	...
            q[i] = q[i] + v[i];
     6a0:	0b70                	addi	a2,sp,412
     6a2:	0000                	unimp
     6a4:	00000b83          	lb	s7,0(zero) # 0 <__DYNAMIC>
        for(i = 0; i < size_N; ++i){
     6a8:	0001                	nop
     6aa:	7a5a                	flw	fs4,180(sp)
            q[i] = q[i] + v[i];
     6ac:	000c                	0xc
            q[i] = q[i] % mod;
     6ae:	8a00                	0x8a00
     6b0:	000c                	0xc
     6b2:	0100                	addi	s0,sp,128
     6b4:	5a00                	lw	s0,48(a2)
	...
            v[i] = 0;
     6be:	0b84                	addi	s1,sp,464
     6c0:	0000                	unimp
     6c2:	0ba0                	addi	s0,sp,472
     6c4:	0000                	unimp
     6c6:	0001                	nop
        for (i = 0; i < size_N; ++i){
     6c8:	8a5a                	mv	s4,s6
     6ca:	000c                	0xc
     6cc:	9a00                	0x9a00
     6ce:	000c                	0xc
        result[i] = num_temp[i-size_N];
     6d0:	0100                	addi	s0,sp,128
     6d2:	5a00                	lw	s0,48(a2)
	...
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	0aea                	slli	s5,s5,0x1a
     6de:	0000                	unimp
     6e0:	0bc4                	addi	s1,sp,468
    int ri_2[size]; // MX-ring poly, a
     6e2:	0000                	unimp
     6e4:	0002                	c.slli64	zero
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	0072                	c.slli	zero,0x1c
    int ri_2[size]; // MX-ring poly, a
     6e8:	0bc4                	addi	s1,sp,468
     6ea:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0bdc                	addi	a5,sp,468
     6ee:	0000                	unimp
     6f0:	0002                	c.slli64	zero
     6f2:	0084                	addi	s1,sp,64
     6f4:	0bdc                	addi	a5,sp,468
     6f6:	0000                	unimp
     6f8:	0be4                	addi	s1,sp,476
     6fa:	0000                	unimp
     6fc:	0010                	0x10
     6fe:	0091                	addi	ra,ra,4
     700:	0086                	slli	ra,ra,0x1
     702:	2432                	fld	fs0,264(sp)
     704:	f0090f23          	sb	zero,-226(s2)
    int ri_2[size]; // MX-ring poly, a
     708:	1c1a                	slli	s8,s8,0x26
     70a:	000a                	c.slli	zero,0x2
     70c:	1c02                	slli	s8,s8,0x20
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	0be4                	addi	s1,sp,476
     710:	0000                	unimp
     712:	0c06                	slli	s8,s8,0x1
    int ri[size];
     714:	0000                	unimp
     716:	00910013          	addi	zero,sp,9
    int ti_1[size]; // ti_1[0] = 1
     71a:	235a01f3          	0x235a01f3
     71e:	3201                	jal	1e <__DYNAMIC+0x1e>
    int ti[size];
     720:	2324                	fld	fs1,64(a4)
     722:	1af0090f          	0x1af0090f
    int qi_1[size];
     726:	0a1c                	addi	a5,sp,272
     728:	0200                	addi	s0,sp,256
     72a:	061c                	addi	a5,sp,768
    int temp[size];
     72c:	000c                	0xc
     72e:	ae00                	fsd	fs0,24(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	000c                	0xc
     732:	0200                	addi	s0,sp,256
     734:	7200                	flw	fs0,32(a2)
	...
        ti_2[i] = 0;
     73e:	ee00                	fsw	fs0,24(a2)
     740:	000a                	c.slli	zero,0x2
     742:	f000                	fsw	fs0,32(s0)
     744:	000a                	c.slli	zero,0x2
    for (i = 0; i < size; ++i) {
     746:	0200                	addi	s0,sp,256
     748:	3100                	fld	fs0,32(a0)
    array_equ(ri_2,polyR,size);
     74a:	f09f 000a f600      	0xf600000af09f
     750:	000a                	c.slli	zero,0x2
    array_equ(ri_1,polyf,size);
     752:	0100                	addi	s0,sp,128
     754:	5f00                	lw	s0,56(a4)
     756:	0afa                	slli	s5,s5,0x1e
     758:	0000                	unimp
    ti_1[0] = 1;
     75a:	0b00                	addi	s0,sp,400
     75c:	0000                	unimp
     75e:	0001                	nop
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	085f 000b 1600      	0x1600000b085f
     766:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     76a:	5f00                	lw	s0,56(a4)
        ti_2[i] = 0;
     76c:	0b20                	addi	s0,sp,408
     76e:	0000                	unimp
     770:	0b35                	addi	s6,s6,13
     772:	0000                	unimp
        ti_1[i] = 0;
     774:	0001                	nop
        ti_2[i] = 0;
     776:	365f 000b 4000      	0x4000000b365f
        ti_1[i] = 0;
     77c:	0500000b          	0x500000b
    for (i = 0; i < size; ++i) {
     780:	8200                	0x8200
                ri_2[i] = ri_2[i] + mod;
     782:	3100                	fld	fs0,32(a0)
     784:	9f24                	0x9f24
            while (ri_2[i] < 0) {
     786:	0b40                	addi	s0,sp,404
     788:	0000                	unimp
     78a:	00000b4f          	fnmadd.s	fs6,ft0,ft0,ft0,rne
            ri_2[i] = ri_2[i] % mod;
     78e:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     790:	505f 000b 6000      	0x6000000b505f
     796:	0500000b          	0x500000b
     79a:	8200                	0x8200
     79c:	3300                	fld	fs0,32(a4)
     79e:	9f1e                	add	t5,t5,t2
     7a0:	0b60                	addi	s0,sp,412
        for (i = 0; i < N + 1; ++i) {
     7a2:	0000                	unimp
     7a4:	0b70                	addi	a2,sp,412
     7a6:	0000                	unimp
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	0001                	nop
     7aa:	7059                	c.lui	zero,0xffff6
     7ac:	7800000b          	0x7800000b
     7b0:	0200000b          	0x200000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	3000                	fld	fs0,32(s0)
     7b6:	789f 000b 8000      	0x8000000b789f
     7bc:	0100000b          	0x100000b
     7c0:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     7c2:	0b84                	addi	s1,sp,464
     7c4:	0000                	unimp
     7c6:	0b96                	slli	s7,s7,0x5
     7c8:	0000                	unimp
     7ca:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     7cc:	0082                	c.slli64	ra
     7ce:	2432                	fld	fs0,264(sp)
     7d0:	969f 000b b000      	0xb000000b969f
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d6:	0100000b          	0x100000b
     7da:	6a00                	flw	fs0,16(a2)
     7dc:	0bb0                	addi	a2,sp,472
     7de:	0000                	unimp
    array_equ(qi_1,res1,size);
     7e0:	0bb8                	addi	a4,sp,472
     7e2:	0000                	unimp
     7e4:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     7e6:	065f 000c 4200      	0x4200000c065f
     7ec:	000c                	0xc
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	0100                	addi	s0,sp,128
     7f0:	5f00                	lw	s0,56(a4)
     7f2:	0c42                	slli	s8,s8,0x10
     7f4:	0000                	unimp
     7f6:	0c44                	addi	s1,sp,532
     7f8:	0000                	unimp
     7fa:	7f7f0003          	lb	zero,2039(t5)
    array_equ(temp,res2,size);
     7fe:	449f 000c 6600      	0x6600000c449f
        for (i = 0; i < N + 1; ++i) {
     804:	000c                	0xc
     806:	0100                	addi	s0,sp,128
     808:	5f00                	lw	s0,56(a4)
     80a:	0c66                	slli	s8,s8,0x19
        for (i = 0; i < N + 1; ++i) {
     80c:	0000                	unimp
     80e:	0c76                	slli	s8,s8,0x1d
     810:	0000                	unimp
     812:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     814:	7659                	lui	a2,0xffff6
     816:	000c                	0xc
     818:	7800                	flw	fs0,48(s0)
array_equ(ri_2,ri_1,size);
     81a:	000c                	0xc
     81c:	0300                	addi	s0,sp,384
     81e:	7900                	flw	fs0,48(a0)
     820:	9f7f                	0x9f7f
array_equ(ri_1,ri,size);
     822:	0c78                	addi	a4,sp,540
     824:	0000                	unimp
     826:	0c7a                	slli	s8,s8,0x1e
     828:	0000                	unimp
array_equ(ti_2,ti_1,size);
     82a:	0001                	nop
     82c:	7a59                	lui	s4,0xffff6
     82e:	000c                	0xc
     830:	7e00                	flw	fs0,56(a2)
     832:	000c                	0xc
     834:	0100                	addi	s0,sp,128
     836:	5e00                	lw	s0,56(a2)
array_equ(ti_1,ti,size);
     838:	0c7e                	slli	s8,s8,0x1f
     83a:	0000                	unimp
     83c:	0c88                	addi	a0,sp,592
     83e:	0000                	unimp
        controlR = 0;
     840:	7f7e0003          	lb	zero,2039(t3) # 3091 <_bss_end+0x1025>
        for (i = 0; i < N + 1; ++i) {
     844:	889f 000c 8a00      	0x8a00000c889f
    while (controlR != 0) {
     84a:	000c                	0xc
        for (j = 0; j < mod; ++j) {
     84c:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     84e:	5e00                	lw	s0,56(a2)
        for (j = 0; j < mod; ++j) {
     850:	0c8a                	slli	s9,s9,0x2
     852:	0000                	unimp
     854:	0c9a                	slli	s9,s9,0x6
     856:	0000                	unimp
     858:	0001                	nop
     85a:	9a6a                	add	s4,s4,s10
        for (i = 0; i < N + 1; ++i) {
     85c:	000c                	0xc
     85e:	aa00                	fsd	fs0,16(a2)
    }
     860:	000c                	0xc
     862:	0100                	addi	s0,sp,128
     864:	5f00                	lw	s0,56(a4)
     866:	0caa                	slli	s9,s9,0xa
     868:	0000                	unimp
     86a:	0cac                	addi	a1,sp,600
     86c:	0000                	unimp
     86e:	7f7f0003          	lb	zero,2039(t5)
     872:	ac9f 000c ae00      	0xae00000cac9f
     878:	000c                	0xc
     87a:	0100                	addi	s0,sp,128
     87c:	5f00                	lw	s0,56(a4)
	...
     886:	0bb4                	addi	a3,sp,472
     888:	0000                	unimp
                ri_1[i] = ri_1[i] + mod;
     88a:	0c06                	slli	s8,s8,0x1
     88c:	0000                	unimp
            while (ri_1[i] < 0) {
     88e:	0006                	c.slli	zero,0x1
     890:	001b7403          	0x1b7403
            ri_1[i] = ri_1[i] % mod;
     894:	9f00                	0x9f00
	...
     89e:	0aea                	slli	s5,s5,0x1a
        for (i = 0; i < N + 1; ++i) {
     8a0:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     8a2:	0bb0                	addi	a2,sp,472
     8a4:	0000                	unimp
     8a6:	0001                	nop
     8a8:	b062                	fsd	fs8,32(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	e400000b          	0xe400000b
            ri[i - (N + 1)] = res[i];
     8ae:	0300000b          	0x300000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	8600                	0x8600
            temp[i] = ri_2[i] - ri[i];
     8b4:	9f7f                	0x9f7f
     8b6:	0be4                	addi	s1,sp,476
     8b8:	0000                	unimp
     8ba:	0c06                	slli	s8,s8,0x1
     8bc:	0000                	unimp
     8be:	0004                	0x4
     8c0:	9f5a01f3          	0x9f5a01f3
        for (i = 0; i < N + 1; ++i) {
     8c4:	0c06                	slli	s8,s8,0x1
            temp[i] = ri_2[i] - ri[i];
     8c6:	0000                	unimp
     8c8:	0c9a                	slli	s9,s9,0x6
        for (i = 0; i < N + 1; ++i) {
     8ca:	0000                	unimp
     8cc:	0001                	nop
                temp[i] = temp[i] + mod;
     8ce:	9a62                	add	s4,s4,s8
     8d0:	000c                	0xc
            while (temp[i] < 0) {
     8d2:	ae00                	fsd	fs0,24(a2)
     8d4:	000c                	0xc
     8d6:	0300                	addi	s0,sp,384
            temp[i] = temp[i] % mod;
     8d8:	8600                	0x8600
     8da:	9f7f                	0x9f7f
	...
        for (i = 0; i < N + 1; ++i) {
     8e4:	06e2                	slli	a3,a3,0x18
                qi_1[i] = qi_1[i] + mod;
     8e6:	0000                	unimp
     8e8:	0750                	addi	a2,sp,900
            while (qi_1[i] < 0) {
     8ea:	0000                	unimp
     8ec:	0001                	nop
     8ee:	505a                	0x505a
            qi_1[i] = qi_1[i] % mod;
     8f0:	51000007          	0x51000007
        for (i = 0; i < N + 1; ++i) {
     8f4:	01000007          	0x1000007
            qi_1[i] = qi_1[i] % mod;
     8f8:	5b00                	lw	s0,48(a4)
     8fa:	0751                	addi	a4,a4,20
        for (i = 0; i < N + 1; ++i) {
     8fc:	0000                	unimp
                temp[i] = temp[i] + mod;
     8fe:	076c                	addi	a1,sp,908
     900:	0000                	unimp
     902:	0004                	0x4
            while (temp[i] < 0) {
     904:	9f5a01f3          	0x9f5a01f3
     908:	076c                	addi	a1,sp,908
     90a:	0000                	unimp
            temp[i] = temp[i] % mod;
     90c:	0782                	c.slli64	a5
     90e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     910:	0001                	nop
     912:	825a                	mv	tp,s6
            temp[i] = temp[i] % mod;
     914:	90000007          	0x90000007
        for (i = 0; i < N + 1; ++i) {
     918:	0009                	c.nop	2
            ti[i] = ti_2[i] - temp[i];
     91a:	0400                	addi	s0,sp,512
     91c:	f300                	fsw	fs0,32(a4)
     91e:	5a01                	li	s4,-32
     920:	009f 0000 0000      	0x9f
     926:	0000                	unimp
     928:	e200                	fsw	fs0,0(a2)
     92a:	0006                	c.slli	zero,0x1
     92c:	4c00                	lw	s0,24(s0)
     92e:	01000007          	0x1000007
     932:	5b00                	lw	s0,48(a4)
     934:	074c                	addi	a1,sp,900
        for (i = 0; i < N + 1; ++i) {
     936:	0000                	unimp
     938:	0768                	addi	a0,sp,908
                ti[i] = ti[i] + mod;
     93a:	0000                	unimp
     93c:	0001                	nop
            while (ti[i] < 0) {
     93e:	686a                	flw	fa6,152(sp)
     940:	6c000007          	0x6c000007
            ti[i] = ti[i] % mod;
     944:	04000007          	0x4000007
        for (i = 0; i < N + 1; ++i) {
     948:	f300                	fsw	fs0,32(a4)
     94a:	5b01                	li	s6,-32
            ti[i] = ti[i] % mod;
     94c:	6c9f 0007 8200      	0x820000076c9f
              qi_1[i] = 0;
     952:	01000007          	0x1000007
     956:	5b00                	lw	s0,48(a4)
     958:	0782                	c.slli64	a5
            controlR += ri[i];
     95a:	0000                	unimp
     95c:	0990                	addi	a2,sp,208
              qi_1[i] = 0;
     95e:	0000                	unimp
     960:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     962:	9f5b01f3          	0x9f5b01f3
	...
            if (((ri_2[0] * j) % mod) == 1)
     96e:	06e2                	slli	a3,a3,0x18
     970:	0000                	unimp
     972:	0746                	slli	a4,a4,0x11
     974:	0000                	unimp
     976:	0001                	nop
        for (j = 0; j < mod; ++j) {
     978:	465c                	lw	a5,12(a2)
     97a:	6a000007          	0x6a000007
        for (i = 0; i < N + 1; ++i) {
     97e:	0008                	0x8
     980:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	5900                	lw	s0,48(a0)
     984:	086a                	slli	a6,a6,0x1a
     986:	0000                	unimp
     988:	087e                	slli	a6,a6,0x1f
     98a:	0000                	unimp
     98c:	018b0003          	lb	zero,24(s6)
int* generate_keys(int N, int p, int q){
     990:	7e9f 0008 8a00      	0x8a0000087e9f
     996:	0008                	0x8
     998:	0400                	addi	s0,sp,512
     99a:	f300                	fsw	fs0,32(a4)
     99c:	5c01                	li	s8,-32
     99e:	8a9f 0008 9000      	0x900000088a9f
     9a4:	0009                	c.nop	2
     9a6:	0100                	addi	s0,sp,128
     9a8:	5900                	lw	s0,48(a0)
	...
     9b2:	06e2                	slli	a3,a3,0x18
     9b4:	0000                	unimp
     9b6:	0746                	slli	a4,a4,0x11
     9b8:	0000                	unimp
     9ba:	0001                	nop
     9bc:	465d                	li	a2,23
     9be:	6c000007          	0x6c000007
     9c2:	0008                	0x8
     9c4:	0100                	addi	s0,sp,128
     9c6:	6200                	flw	fs0,0(a2)
	resultkon[0] = 0xaaaaaaa0;
     9c8:	086c                	addi	a1,sp,28
     9ca:	0000                	unimp
     9cc:	088a                	slli	a7,a7,0x2
     9ce:	0000                	unimp
int* generate_keys(int N, int p, int q){
     9d0:	0004                	0x4
     9d2:	9f5d01f3          	0x9f5d01f3
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9d6:	088a                	slli	a7,a7,0x2
     9d8:	0000                	unimp
     9da:	0990                	addi	a2,sp,208
	resultkon[0] = 0xaaaaaaa0;
     9dc:	0000                	unimp
     9de:	0001                	nop
     9e0:	0062                	c.slli	zero,0x18
     9e2:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	0000                	unimp
     9e6:	0000                	unimp
	resultkon[0] = 0xaaaaaaa0;
     9e8:	6000                	flw	fs0,0(s0)
     9ea:	0008                	0x8
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ec:	8a00                	0x8a00
     9ee:	0008                	0x8
     9f0:	0600                	addi	s0,sp,768
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f2:	0300                	addi	s0,sp,384
     9f4:	19e4                	addi	s1,sp,252
     9f6:	0000                	unimp
     9f8:	009f 0000 0000      	0x9f
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9fe:	0000                	unimp
     a00:	3c00                	fld	fs0,56(s0)
     a02:	7e000007          	0x7e000007
     a06:	0008                	0x8
     a08:	0100                	addi	s0,sp,128
     a0a:	6b00                	flw	fs0,16(a4)
     a0c:	087e                	slli	a6,a6,0x1f
     a0e:	0000                	unimp
     a10:	088a                	slli	a7,a7,0x2
     a12:	0000                	unimp
     a14:	0006                	c.slli	zero,0x1
     a16:	315c01f3          	0x315c01f3
     a1a:	9f1c                	0x9f1c
     a1c:	088a                	slli	a7,a7,0x2
     a1e:	0000                	unimp
     a20:	0990                	addi	a2,sp,208
     a22:	0000                	unimp
     a24:	0001                	nop
     a26:	0000006b          	0x6b
     a2a:	0000                	unimp
     a2c:	0000                	unimp
     a2e:	3c00                	fld	fs0,56(s0)
     a30:	46000007          	0x46000007
     a34:	02000007          	0x2000007
     a38:	3000                	fld	fs0,32(s0)
     a3a:	469f 0007 5100      	0x51000007469f
     a40:	01000007          	0x1000007
     a44:	5f00                	lw	s0,56(a4)
     a46:	076c                	addi	a1,sp,908
     a48:	0000                	unimp
     a4a:	0782                	c.slli64	a5
     a4c:	0000                	unimp
     a4e:	0001                	nop
     a50:	825f 0007 9200      	0x92000007825f
     a56:	01000007          	0x1000007
     a5a:	5d00                	lw	s0,56(a0)
     a5c:	0792                	slli	a5,a5,0x4
     a5e:	0000                	unimp
     a60:	0794                	addi	a3,sp,960
     a62:	0000                	unimp
     a64:	7f7d0003          	lb	zero,2039(s10) # 1d7f7 <_stack_start+0xd7f7>
    int polyR[N+1];
     a68:	949f 0007 ac00      	0xac000007949f
     a6e:	01000007          	0x1000007
     a72:	5d00                	lw	s0,56(a0)
     a74:	07b4                	addi	a3,sp,968
     a76:	0000                	unimp
     a78:	07b8                	addi	a4,sp,968
     a7a:	0000                	unimp
    polyR[N] = 1;
     a7c:	0001                	nop
     a7e:	b859                	j	314 <polymult+0x1ec>
     a80:	c2000007          	0xc2000007
     a84:	01000007          	0x1000007
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a88:	5f00                	lw	s0,56(a4)
     a8a:	07c4                	addi	s1,sp,964
     a8c:	0000                	unimp
     a8e:	07cc                	addi	a1,sp,964
     a90:	0000                	unimp
     a92:	0001                	nop
     a94:	ce5e                	sw	s7,28(sp)
     a96:	d6000007          	0xd6000007
     a9a:	01000007          	0x1000007
     a9e:	5d00                	lw	s0,56(a0)
     aa0:	07e6                	slli	a5,a5,0x19
     aa2:	0000                	unimp
     aa4:	07ea                	slli	a5,a5,0x1a
     aa6:	0000                	unimp
     aa8:	0002                	c.slli64	zero
     aaa:	9f30                	0x9f30
     aac:	07ea                	slli	a5,a5,0x1a
     aae:	0000                	unimp
     ab0:	07f4                	addi	a3,sp,972
     ab2:	0000                	unimp
     ab4:	0001                	nop
     ab6:	045d                	addi	s0,s0,23
     ab8:	0008                	0x8
     aba:	0600                	addi	s0,sp,768
     abc:	0008                	0x8
     abe:	0200                	addi	s0,sp,256
     ac0:	3000                	fld	fs0,32(s0)
     ac2:	069f 0008 1400      	0x14000008069f
     ac8:	0008                	0x8
     aca:	0100                	addi	s0,sp,128
     acc:	5e00                	lw	s0,56(a2)
     ace:	0816                	slli	a6,a6,0x5
     ad0:	0000                	unimp
     ad2:	0821                	addi	a6,a6,8
     ad4:	0000                	unimp
     ad6:	0001                	nop
     ad8:	405d                	c.li	zero,23
     ada:	0008                	0x8
     adc:	4400                	lw	s0,8(s0)
     ade:	0008                	0x8
     ae0:	0200                	addi	s0,sp,256
     ae2:	3000                	fld	fs0,32(s0)
     ae4:	449f 0008 4e00      	0x4e000008449f
    polyR[0] = -1;
     aea:	0008                	0x8
     aec:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     aee:	5e00                	lw	s0,56(a2)
     af0:	085c                	addi	a5,sp,20
     af2:	0000                	unimp
     af4:	088a                	slli	a7,a7,0x2
    for (i = N; i < 55; ++i ){
     af6:	0000                	unimp
     af8:	0001                	nop
     afa:	8a5f 0008 9a00      	0x9a0000088a5f
        random_keys[i] = f[i];
     b00:	0008                	0x8
     b02:	0100                	addi	s0,sp,128
     b04:	5d00                	lw	s0,56(a0)
     b06:	089a                	slli	a7,a7,0x6
    for(i = 0; i < N; ++i){
     b08:	0000                	unimp
     b0a:	08a0                	addi	s0,sp,88
     b0c:	0000                	unimp
     b0e:	7f7d0003          	lb	zero,2039(s10)
    for(i = N; i < (2*N); ++i){
     b12:	a09f 0008 a200      	0xa2000008a09f
        random_keys[i] = g[i-N];
     b18:	0008                	0x8
     b1a:	0100                	addi	s0,sp,128
     b1c:	5d00                	lw	s0,56(a0)
     b1e:	08a2                	slli	a7,a7,0x8
    for(i = N; i < (2*N); ++i){
     b20:	0000                	unimp
     b22:	08ac                	addi	a1,sp,88
    for(i = (2*N); i < (3*N); ++i){
     b24:	0000                	unimp
     b26:	0001                	nop
     b28:	ac5f 0008 b200      	0xb2000008ac5f
    fp = ext_euclid(polyR, f, (N+1), p);
     b2e:	0008                	0x8
     b30:	0300                	addi	s0,sp,384
     b32:	7f00                	flw	fs0,56(a4)
     b34:	9f7f                	0x9f7f
    for(i = (2*N); i < (3*N); ++i){
     b36:	08b2                	slli	a7,a7,0xc
        random_keys[i] = fp[i-(2*N)];
     b38:	0000                	unimp
     b3a:	08b4                	addi	a3,sp,88
     b3c:	0000                	unimp
     b3e:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     b40:	b45f 0008 c600      	0xc6000008b45f
    fq = ext_euclid(polyR, f, (N+1), q);
     b46:	0008                	0x8
     b48:	0100                	addi	s0,sp,128
     b4a:	5e00                	lw	s0,56(a2)
     b4c:	08c6                	slli	a7,a7,0x11
     b4e:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b50:	08ca                	slli	a7,a7,0x12
     b52:	0000                	unimp
     b54:	7f7e0003          	lb	zero,2039(t3)
        random_keys[i] = fq[i-(3*N)];
     b58:	ca9f 0008 ce00      	0xce000008ca9f
     b5e:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     b60:	0100                	addi	s0,sp,128
     b62:	5e00                	lw	s0,56(a2)
    fg = polymult2(fq, N, g, N, 0);
     b64:	08ce                	slli	a7,a7,0x13
     b66:	0000                	unimp
     b68:	08de                	slli	a7,a7,0x17
     b6a:	0000                	unimp
     b6c:	0001                	nop
     b6e:	de5d                	beqz	a2,b2c <generate_keys+0x19c>
    for(i = 0; i < (2*N-1); ++i){
     b70:	0008                	0x8
     b72:	e400                	fsw	fs0,8(s0)
     b74:	0008                	0x8
     b76:	0300                	addi	s0,sp,384
     b78:	7d00                	flw	fs0,56(a0)
     b7a:	9f7f                	0x9f7f
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b7c:	08e4                	addi	s1,sp,92
     b7e:	0000                	unimp
     b80:	08f6                	slli	a7,a7,0x1d
     b82:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b84:	0001                	nop
     b86:	f65d                	bnez	a2,b34 <generate_keys+0x1a4>
     b88:	0008                	0x8
     b8a:	fc00                	fsw	fs0,56(s0)
     b8c:	0008                	0x8
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b8e:	0300                	addi	s0,sp,384
     b90:	7d00                	flw	fs0,56(a0)
     b92:	9f7f                	0x9f7f
     b94:	08fc                	addi	a5,sp,92
    for(i = (4*N); i < (5*N); ++i){
     b96:	0000                	unimp
     b98:	08fe                	slli	a7,a7,0x1f
     b9a:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b9c:	0001                	nop
     b9e:	fe5d                	bnez	a2,b5c <generate_keys+0x1cc>
        random_keys[i] = polyR[i-(5*N)];
     ba0:	0008                	0x8
     ba2:	1200                	addi	s0,sp,288
     ba4:	0009                	c.nop	2
     ba6:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     ba8:	5e00                	lw	s0,56(a2)
     baa:	0912                	slli	s2,s2,0x4
     bac:	0000                	unimp
     bae:	0918                	addi	a4,sp,144
     bb0:	0000                	unimp
     bb2:	7f7e0003          	lb	zero,2039(t3)
	resultkon[0] = 0xaaaaaaa1;
     bb6:	189f 0009 3200      	0x32000009189f
     bbc:	0009                	c.nop	2
     bbe:	0100                	addi	s0,sp,128
}
     bc0:	5e00                	lw	s0,56(a2)
     bc2:	0932                	slli	s2,s2,0xc
     bc4:	0000                	unimp
     bc6:	0936                	slli	s2,s2,0xd
     bc8:	0000                	unimp
     bca:	7f7e0003          	lb	zero,2039(t3)
     bce:	369f 0009 3a00      	0x3a000009369f
     bd4:	0009                	c.nop	2
     bd6:	0100                	addi	s0,sp,128
     bd8:	5e00                	lw	s0,56(a2)
     bda:	093a                	slli	s2,s2,0xe
     bdc:	0000                	unimp
     bde:	094a                	slli	s2,s2,0x12
     be0:	0000                	unimp
     be2:	0001                	nop
     be4:	4a5d                	li	s4,23
     be6:	0009                	c.nop	2
     be8:	5000                	lw	s0,32(s0)
     bea:	0009                	c.nop	2
     bec:	0300                	addi	s0,sp,384
     bee:	7d00                	flw	fs0,56(a0)
     bf0:	9f7f                	0x9f7f
     bf2:	0950                	addi	a2,sp,148
     bf4:	0000                	unimp
     bf6:	0952                	slli	s2,s2,0x14
     bf8:	0000                	unimp
     bfa:	0001                	nop
     bfc:	525d                	li	tp,-9
     bfe:	0009                	c.nop	2
     c00:	6400                	flw	fs0,8(s0)
     c02:	0009                	c.nop	2
     c04:	0100                	addi	s0,sp,128
        polyR[i] = 0;
     c06:	5e00                	lw	s0,56(a2)
     c08:	0964                	addi	s1,sp,156
     c0a:	0000                	unimp
     c0c:	0966                	slli	s2,s2,0x19
     c0e:	0000                	unimp
    for(i = 1; i < N; ++i){
     c10:	7f7e0003          	lb	zero,2039(t3)
        f[i] = 0;
     c14:	669f 0009 6800      	0x68000009669f
     c1a:	0009                	c.nop	2
     c1c:	0100                	addi	s0,sp,128
     c1e:	5e00                	lw	s0,56(a2)
     c20:	097c                	addi	a5,sp,156
        g[i] = 0;
     c22:	0000                	unimp
     c24:	0980                	addi	s0,sp,208
     c26:	0000                	unimp
     c28:	0001                	nop
     c2a:	805f 0009 8e00      	0x8e000009805f
        random_keys[i] = f[i];
     c30:	0009                	c.nop	2
     c32:	0300                	addi	s0,sp,384
     c34:	7f00                	flw	fs0,56(a4)
     c36:	9f7f                	0x9f7f
     c38:	098e                	slli	s3,s3,0x3
     c3a:	0000                	unimp
     c3c:	0990                	addi	a2,sp,208
     c3e:	0000                	unimp
    for(i = 0; i < N; ++i){
     c40:	0001                	nop
        random_keys[i] = f[i];
     c42:	005f 0000 0000      	0x5f
        random_keys[i] = g[i-N];
     c48:	0000                	unimp
     c4a:	5000                	lw	s0,32(s0)
     c4c:	0008                	0x8
     c4e:	8a00                	0x8a00
    for(i = N; i < (2*N); ++i){
     c50:	0008                	0x8
     c52:	0100                	addi	s0,sp,128
     c54:	5e00                	lw	s0,56(a2)
        random_keys[i] = fp[i-(2*N)];
     c56:	0968                	addi	a0,sp,156
     c58:	0000                	unimp
     c5a:	0990                	addi	a2,sp,208
     c5c:	0000                	unimp
     c5e:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     c60:	005e                	c.slli	zero,0x17
     c62:	0000                	unimp
     c64:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     c66:	0000                	unimp
     c68:	3a00                	fld	fs0,48(a2)
     c6a:	6e000007          	0x6e000007
     c6e:	0008                	0x8
     c70:	0200                	addi	s0,sp,256
     c72:	8300                	0x8300
    for(i = (3*N); i < (4*N); ++i){
     c74:	8a00                	0x8a00
        random_keys[i] = fq[i-(3*N)];
     c76:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     c78:	9000                	0x9000
        fg[i] = fg[i]*p;
     c7a:	0009                	c.nop	2
    for(i = 0; i < (2*N-1); ++i){
     c7c:	0200                	addi	s0,sp,256
     c7e:	8300                	0x8300
	...
     c88:	3a00                	fld	fs0,48(a2)
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c8a:	70000007          	0x70000007
     c8e:	0008                	0x8
     c90:	0200                	addi	s0,sp,256
     c92:	8400                	0x8400
     c94:	8a00                	0x8a00
    for(i = (4*N); i < (5*N); ++i){
     c96:	0008                	0x8
     c98:	9000                	0x9000
        random_keys[i] = polyR[i-(5*N)];
     c9a:	0009                	c.nop	2
     c9c:	0200                	addi	s0,sp,256
     c9e:	8400                	0x8400
	...
    for(i = (5*N); i < (6*N+1); ++i){
     ca8:	3a00                	fld	fs0,48(a2)
        random_keys[i] = polyR[i-(5*N)];
     caa:	76000007          	0x76000007
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cae:	0008                	0x8
	resultkon[0] = 0xbbbbbbb0;
     cb0:	0200                	addi	s0,sp,256
     cb2:	8700                	0x8700
     cb4:	8a00                	0x8a00
     cb6:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	9000                	0x9000
     cba:	0009                	c.nop	2
     cbc:	0200                	addi	s0,sp,256
     cbe:	8700                	0x8700
	...
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cc8:	3a00                	fld	fs0,48(a2)
     cca:	74000007          	0x74000007
     cce:	0008                	0x8
     cd0:	0200                	addi	s0,sp,256
	resultkon[0] = 0xbbbbbbb0;
     cd2:	8600                	0x8600
     cd4:	7400                	flw	fs0,40(s0)
     cd6:	0008                	0x8
     cd8:	7600                	flw	fs0,40(a2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cda:	0008                	0x8
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cdc:	0c00                	addi	s0,sp,528
     cde:	8700                	0x8700
     ce0:	8b00                	0x8b00
     ce2:	3201                	jal	5e2 <polydiv+0x13e>
     ce4:	2324                	fld	fs1,64(a4)
	resultkon[0] = 0xbbbbbbb0;
     ce6:	1af0090f          	0x1af0090f
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cea:	8a1c                	0x8a1c
    temp = polymult(public_key,N,random_val,48,q,0);
     cec:	0008                	0x8
     cee:	9000                	0x9000
     cf0:	0009                	c.nop	2
     cf2:	0200                	addi	s0,sp,256
     cf4:	8600                	0x8600
	...
     cfe:	3a00                	fld	fs0,48(a2)
    for(i = 0; i < 48; ++i){
     d00:	7a000007          	0x7a000007
        temp[i] = temp[i] + message[i];
     d04:	0008                	0x8
     d06:	0200                	addi	s0,sp,256
     d08:	8900                	0x8900
     d0a:	8a00                	0x8a00
     d0c:	0008                	0x8
     d0e:	9000                	0x9000
     d10:	0009                	c.nop	2
     d12:	0200                	addi	s0,sp,256
     d14:	8900                	0x8900
	...
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d1e:	3a00                	fld	fs0,48(a2)
     d20:	78000007          	0x78000007
     d24:	0008                	0x8
     d26:	0200                	addi	s0,sp,256
     d28:	8800                	0x8800
     d2a:	7800                	flw	fs0,48(s0)
    for(i = (2*N); i < (3*N); ++i){
     d2c:	0008                	0x8
     d2e:	7a00                	flw	fs0,48(a2)
     d30:	0008                	0x8
     d32:	0c00                	addi	s0,sp,528
     d34:	8900                	0x8900
     d36:	8b00                	0x8b00
}
     d38:	3201                	jal	638 <polydiv+0x194>
     d3a:	2324                	fld	fs1,64(a4)
	resultkon[0] = 0xbbbbbbb1;
     d3c:	1af0090f          	0x1af0090f
     d40:	8a1c                	0x8a1c
     d42:	0008                	0x8
     d44:	9000                	0x9000
     d46:	0009                	c.nop	2
}
     d48:	0200                	addi	s0,sp,256
     d4a:	8800                	0x8800
	...
     d54:	3c00                	fld	fs0,56(s0)
        CT[i-(2*N)] = CT[i];
     d56:	64000007          	0x64000007
     d5a:	0008                	0x8
     d5c:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     d5e:	7200                	flw	fs0,32(a2)
     d60:	6400                	flw	fs0,8(s0)
        CT[i-(2*N)] = CT[i];
     d62:	0008                	0x8
     d64:	7200                	flw	fs0,32(a2)
    for(i = (2*N); i < (3*N); ++i){
     d66:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d68:	0200                	addi	s0,sp,256
     d6a:	8500                	0x8500
     d6c:	7200                	flw	fs0,32(a2)
     d6e:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d70:	7800                	flw	fs0,48(s0)
     d72:	0008                	0x8
     d74:	0c00                	addi	s0,sp,528
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d76:	8800                	0x8800
     d78:	8b00                	0x8b00
	resultkon[0] = 0xccccccc0;
     d7a:	3201                	jal	67a <polydiv+0x1d6>
     d7c:	2324                	fld	fs1,64(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7e:	1af0090f          	0x1af0090f
	resultkon[0] = 0xccccccc0;
     d82:	781c                	flw	fa5,48(s0)
     d84:	0008                	0x8
     d86:	7a00                	flw	fs0,48(a2)
     d88:	0008                	0x8
     d8a:	0e00                	addi	s0,sp,784
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d8c:	8900                	0x8900
     d8e:	8b00                	0x8b00
     d90:	3201                	jal	690 <polydiv+0x1ec>
     d92:	2324                	fld	fs1,64(a4)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d94:	1af0090f          	0x1af0090f
	resultkon[0] = 0xccccccc0;
     d98:	2431                	jal	fa4 <memcpy+0xda>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9a:	8a1c                	0x8a1c
     d9c:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	9000                	0x9000
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     da0:	0009                	c.nop	2
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     da2:	0200                	addi	s0,sp,256
     da4:	7200                	flw	fs0,32(a2)
	...
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     dae:	b400                	fsd	fs0,40(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     db0:	dc000007          	0xdc000007
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db4:	01000007          	0x1000007
     db8:	5a00                	lw	s0,48(a2)
     dba:	08a2                	slli	a7,a7,0x8
     dbc:	0000                	unimp
     dbe:	08e6                	slli	a7,a7,0x19
     dc0:	0000                	unimp
     dc2:	0001                	nop
     dc4:	005a                	c.slli	zero,0x16
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc6:	0000                	unimp
     dc8:	0000                	unimp
     dca:	0000                	unimp
     dcc:	e000                	fsw	fs0,0(s0)
     dce:	e4000007          	0xe4000007
        if(a2[i] <= q/2)
     dd2:	01000007          	0x1000007
    for (i = 0; i < N; ++i){
     dd6:	5a00                	lw	s0,48(a2)
     dd8:	07e4                	addi	s1,sp,972
     dda:	0000                	unimp
    c = polymult2(secret_key_fp,N,a2,N,0);
     ddc:	07e5                	addi	a5,a5,25
     dde:	0000                	unimp
     de0:	0001                	nop
     de2:	0000005b          	0x5b
     de6:	0000                	unimp
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de8:	0000                	unimp
     dea:	fe00                	fsw	fs0,56(a2)
     dec:	02000007          	0x2000007
     df0:	0008                	0x8
     df2:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     df4:	5a00                	lw	s0,48(a2)
     df6:	0802                	c.slli64	a6
     df8:	0000                	unimp
}
     dfa:	00000803          	lb	a6,0(zero) # 0 <__DYNAMIC>
	resultkon[0] = 0xccccccc1;
     dfe:	0001                	nop
     e00:	0000005b          	0x5b
     e04:	0000                	unimp
     e06:	0000                	unimp
     e08:	3c00                	fld	fs0,56(s0)
}
     e0a:	68000007          	0x68000007
     e0e:	02000007          	0x2000007
     e12:	3100                	fld	fs0,32(a0)
     e14:	6c9f 0007 8200      	0x820000076c9f
     e1a:	02000007          	0x2000007
        a2[i-(2*N)] = a2[i];
     e1e:	3100                	fld	fs0,32(a0)
     e20:	449f 0008 5c00      	0x5c000008449f
    for(i = (2*N); i < ((2*N)+N); ++i){
     e26:	0008                	0x8
     e28:	0100                	addi	s0,sp,128
        a2[i-(2*N)] = a2[i];
     e2a:	5f00                	lw	s0,56(a4)
     e2c:	0952                	slli	s2,s2,0x14
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	0000                	unimp
        if(a2[i] <= q/2)
     e30:	097c                	addi	a5,sp,156
     e32:	0000                	unimp
     e34:	0001                	nop
            a2[i] = (-1)*(q-a2[i]);
     e36:	005f 0000 0000      	0x5f
    for (i = 0; i < N; ++i){
     e3c:	0000                	unimp
     e3e:	3a00                	fld	fs0,48(a2)
     e40:	7e000007          	0x7e000007
        c2[i-(2*N)] = c2[i];
     e44:	0008                	0x8
     e46:	0100                	addi	s0,sp,128
     e48:	6b00                	flw	fs0,16(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4a:	087e                	slli	a6,a6,0x1f
     e4c:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     e4e:	088a                	slli	a7,a7,0x2
     e50:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     e52:	0006                	c.slli	zero,0x1
     e54:	315c01f3          	0x315c01f3
     e58:	9f1c                	0x9f1c
     e5a:	088a                	slli	a7,a7,0x2
     e5c:	0000                	unimp
     e5e:	0990                	addi	a2,sp,208
     e60:	0000                	unimp
     e62:	0001                	nop
     e64:	0000006b          	0x6b
     e68:	0000                	unimp
     e6a:	0000                	unimp
     e6c:	3a00                	fld	fs0,48(a2)
     e6e:	7e000007          	0x7e000007
     e72:	0008                	0x8
     e74:	0100                	addi	s0,sp,128
     e76:	6b00                	flw	fs0,16(a4)
     e78:	087e                	slli	a6,a6,0x1f
     e7a:	0000                	unimp
     e7c:	088a                	slli	a7,a7,0x2
     e7e:	0000                	unimp
     e80:	0006                	c.slli	zero,0x1
     e82:	315c01f3          	0x315c01f3
     e86:	9f1c                	0x9f1c
     e88:	088a                	slli	a7,a7,0x2
     e8a:	0000                	unimp
     e8c:	0990                	addi	a2,sp,208
     e8e:	0000                	unimp
     e90:	0001                	nop
     e92:	0000006b          	0x6b
     e96:	0000                	unimp
     e98:	0000                	unimp
     e9a:	3a00                	fld	fs0,48(a2)
     e9c:	7e000007          	0x7e000007
     ea0:	0008                	0x8
     ea2:	0100                	addi	s0,sp,128
     ea4:	6b00                	flw	fs0,16(a4)
     ea6:	087e                	slli	a6,a6,0x1f
     ea8:	0000                	unimp
     eaa:	088a                	slli	a7,a7,0x2
     eac:	0000                	unimp
     eae:	0006                	c.slli	zero,0x1
     eb0:	315c01f3          	0x315c01f3
     eb4:	9f1c                	0x9f1c
     eb6:	088a                	slli	a7,a7,0x2
     eb8:	0000                	unimp
     eba:	0990                	addi	a2,sp,208
     ebc:	0000                	unimp
     ebe:	0001                	nop
     ec0:	0000006b          	0x6b
     ec4:	0000                	unimp
     ec6:	0000                	unimp
     ec8:	3a00                	fld	fs0,48(a2)
     eca:	7e000007          	0x7e000007
     ece:	0008                	0x8
     ed0:	0100                	addi	s0,sp,128
     ed2:	6b00                	flw	fs0,16(a4)
     ed4:	087e                	slli	a6,a6,0x1f
     ed6:	0000                	unimp
     ed8:	088a                	slli	a7,a7,0x2
     eda:	0000                	unimp
     edc:	0006                	c.slli	zero,0x1
     ede:	315c01f3          	0x315c01f3
     ee2:	9f1c                	0x9f1c
     ee4:	088a                	slli	a7,a7,0x2
     ee6:	0000                	unimp
     ee8:	0990                	addi	a2,sp,208
     eea:	0000                	unimp
     eec:	0001                	nop
     eee:	0000006b          	0x6b
     ef2:	0000                	unimp
     ef4:	0000                	unimp
     ef6:	3a00                	fld	fs0,48(a2)
     ef8:	7e000007          	0x7e000007
     efc:	0008                	0x8
     efe:	0100                	addi	s0,sp,128
     f00:	6b00                	flw	fs0,16(a4)
     f02:	087e                	slli	a6,a6,0x1f
     f04:	0000                	unimp
     f06:	088a                	slli	a7,a7,0x2
     f08:	0000                	unimp
     f0a:	0006                	c.slli	zero,0x1
     f0c:	315c01f3          	0x315c01f3
     f10:	9f1c                	0x9f1c
     f12:	088a                	slli	a7,a7,0x2
     f14:	0000                	unimp
     f16:	0990                	addi	a2,sp,208
     f18:	0000                	unimp
     f1a:	0001                	nop
     f1c:	0000006b          	0x6b
     f20:	0000                	unimp
     f22:	0000                	unimp
     f24:	3a00                	fld	fs0,48(a2)
     f26:	7e000007          	0x7e000007
     f2a:	0008                	0x8
     f2c:	0100                	addi	s0,sp,128
     f2e:	6b00                	flw	fs0,16(a4)
     f30:	087e                	slli	a6,a6,0x1f
     f32:	0000                	unimp
     f34:	088a                	slli	a7,a7,0x2
     f36:	0000                	unimp
     f38:	0006                	c.slli	zero,0x1
     f3a:	315c01f3          	0x315c01f3
     f3e:	9f1c                	0x9f1c
     f40:	088a                	slli	a7,a7,0x2
     f42:	0000                	unimp
     f44:	0990                	addi	a2,sp,208
     f46:	0000                	unimp
     f48:	0001                	nop
     f4a:	0000006b          	0x6b
     f4e:	0000                	unimp
     f50:	0000                	unimp
     f52:	3a00                	fld	fs0,48(a2)
     f54:	7e000007          	0x7e000007
     f58:	0008                	0x8
     f5a:	0100                	addi	s0,sp,128
     f5c:	6b00                	flw	fs0,16(a4)
     f5e:	087e                	slli	a6,a6,0x1f
     f60:	0000                	unimp
     f62:	088a                	slli	a7,a7,0x2
     f64:	0000                	unimp
     f66:	0006                	c.slli	zero,0x1
     f68:	315c01f3          	0x315c01f3
     f6c:	9f1c                	0x9f1c
     f6e:	088a                	slli	a7,a7,0x2
     f70:	0000                	unimp
     f72:	0990                	addi	a2,sp,208
     f74:	0000                	unimp
     f76:	0001                	nop
     f78:	0000006b          	0x6b
     f7c:	0000                	unimp
     f7e:	0000                	unimp
     f80:	a400                	fsd	fs0,8(s0)
     f82:	0004                	0x4
     f84:	f600                	fsw	fs0,40(a2)
     f86:	0004                	0x4
     f88:	0100                	addi	s0,sp,128
     f8a:	5a00                	lw	s0,48(a2)
     f8c:	04f6                	slli	s1,s1,0x1d
     f8e:	0000                	unimp
     f90:	04ff                	0x4ff
     f92:	0000                	unimp
     f94:	0001                	nop
     f96:	0004ff5b          	0x4ff5b
     f9a:	e200                	fsw	fs0,0(a2)
     f9c:	0006                	c.slli	zero,0x1
     f9e:	0400                	addi	s0,sp,512
     fa0:	f300                	fsw	fs0,32(a4)
     fa2:	5a01                	li	s4,-32
     fa4:	009f 0000 0000      	0x9f
     faa:	0000                	unimp
     fac:	a400                	fsd	fs0,8(s0)
     fae:	0004                	0x4
     fb0:	f400                	fsw	fs0,40(s0)
     fb2:	0004                	0x4
     fb4:	0100                	addi	s0,sp,128
     fb6:	5b00                	lw	s0,48(a4)
     fb8:	04f4                	addi	a3,sp,588
     fba:	0000                	unimp
     fbc:	05c4                	addi	s1,sp,708
     fbe:	0000                	unimp
     fc0:	0001                	nop
     fc2:	c459                	beqz	s0,1050 <main>
     fc4:	0005                	c.nop	1
     fc6:	de00                	sw	s0,56(a2)
     fc8:	0005                	c.nop	1
     fca:	0300                	addi	s0,sp,384
     fcc:	8700                	0x8700
     fce:	9f01                	0x9f01
     fd0:	05de                	slli	a1,a1,0x17
     fd2:	0000                	unimp
     fd4:	05f2                	slli	a1,a1,0x1c
     fd6:	0000                	unimp
     fd8:	0004                	0x4
     fda:	9f5b01f3          	0x9f5b01f3
     fde:	05f2                	slli	a1,a1,0x1c
     fe0:	0000                	unimp
     fe2:	06d0                	addi	a2,sp,836
     fe4:	0000                	unimp
     fe6:	0001                	nop
     fe8:	d059                	beqz	s0,f6e <memcpy+0xa4>
     fea:	0006                	c.slli	zero,0x1
     fec:	e200                	fsw	fs0,0(a2)
     fee:	0006                	c.slli	zero,0x1
     ff0:	0300                	addi	s0,sp,384
     ff2:	8700                	0x8700
     ff4:	9f01                	0x9f01
	...
     ffe:	04a4                	addi	s1,sp,584
    1000:	0000                	unimp
    1002:	04f2                	slli	s1,s1,0x1c
    1004:	0000                	unimp
    1006:	0001                	nop
    1008:	f25c                	fsw	fa5,36(a2)
    100a:	0004                	0x4
    100c:	3200                	fld	fs0,32(a2)
    100e:	0005                	c.nop	1
    1010:	0100                	addi	s0,sp,128
    1012:	6b00                	flw	fs0,16(a4)
    1014:	0532                	slli	a0,a0,0xc
    1016:	0000                	unimp
    1018:	053c                	addi	a5,sp,648
    101a:	0000                	unimp
    101c:	0004                	0x4
    101e:	9f5c01f3          	0x9f5c01f3
    1022:	053c                	addi	a5,sp,648
    1024:	0000                	unimp
    1026:	0588                	addi	a0,sp,704
    1028:	0000                	unimp
    102a:	0001                	nop
    102c:	0005886b          	0x5886b
    1030:	e200                	fsw	fs0,0(a2)
    1032:	0006                	c.slli	zero,0x1
    1034:	0400                	addi	s0,sp,512
    1036:	f300                	fsw	fs0,32(a4)
    1038:	5c01                	li	s8,-32
    103a:	009f 0000 0000      	0x9f
    1040:	0000                	unimp
    1042:	a400                	fsd	fs0,8(s0)
    1044:	0004                	0x4
    1046:	ff00                	fsw	fs0,56(a4)
    1048:	0004                	0x4
    104a:	0100                	addi	s0,sp,128
    104c:	5d00                	lw	s0,56(a0)
    104e:	04ff                	0x4ff
int main(){
    1050:	0000                	unimp
    1052:	05d6                	slli	a1,a1,0x15
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1054:	0000                	unimp
    1056:	0001                	nop
    1058:	0005d663          	bgez	a1,1064 <main+0x14>
    105c:	f200                	fsw	fs0,32(a2)
    105e:	0005                	c.nop	1
    1060:	0400                	addi	s0,sp,512
int main(){
    1062:	f300                	fsw	fs0,32(a4)
    1064:	5d01                	li	s10,-32
    1066:	f29f 0005 e200      	0xe2000005f29f
    keys = generate_keys(N, p, q);
    106c:	0006                	c.slli	zero,0x1
    106e:	0100                	addi	s0,sp,128
    1070:	6300                	flw	fs0,0(a4)
	...
    for(i = 0; i < N; ++i){
    107a:	04a4                	addi	s1,sp,584
    107c:	0000                	unimp
        secret_key_f[i] = keys[i];
    107e:	04ff                	0x4ff
    1080:	0000                	unimp
    1082:	0001                	nop
    1084:	ff5e                	fsw	fs7,188(sp)
    1086:	0004                	0x4
    1088:	d400                	sw	s0,40(s0)
    for(i = 0; i < N; ++i){
    108a:	0005                	c.nop	1
    108c:	0100                	addi	s0,sp,128
    108e:	6200                	flw	fs0,0(a2)
    for(i = N; i < (2*N); ++i){
    1090:	05d4                	addi	a3,sp,708
    1092:	0000                	unimp
    1094:	05f2                	slli	a1,a1,0x1c
    1096:	0000                	unimp
    1098:	0004                	0x4
    109a:	9f5e01f3          	0x9f5e01f3
        secret_key_fp[i-(2*N)] = keys[i];
    109e:	05f2                	slli	a1,a1,0x1c
    10a0:	0000                	unimp
    10a2:	06e2                	slli	a3,a3,0x18
    10a4:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
    10a6:	0001                	nop
    10a8:	0062                	c.slli	zero,0x18
    for(i = (3*N); i < (4*N); ++i){
    10aa:	0000                	unimp
    10ac:	0000                	unimp
    10ae:	0000                	unimp
    10b0:	3400                	fld	fs0,40(s0)
    10b2:	0005                	c.nop	1
    10b4:	3c00                	fld	fs0,56(s0)
        public_key[i-(4*N)] = keys[i];
    10b6:	0005                	c.nop	1
    10b8:	0100                	addi	s0,sp,128
    10ba:	6b00                	flw	fs0,16(a4)
    10bc:	0588                	addi	a0,sp,704
    10be:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
    10c0:	05e6                	slli	a1,a1,0x19
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0005f26b          	0x5f26b
    10ca:	e200                	fsw	fs0,0(a2)
        ring_poly[i-(5*N)] = keys[i];
    10cc:	0006                	c.slli	zero,0x1
    10ce:	0100                	addi	s0,sp,128
    10d0:	6b00                	flw	fs0,16(a4)
	...
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10da:	05a6                	slli	a1,a1,0x9
    10dc:	0000                	unimp
    10de:	000005b7          	lui	a1,0x0
    10e2:	0001                	nop
    10e4:	f25f 0005 fa00      	0xfa000005f25f
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10ea:	0005                	c.nop	1
    10ec:	0100                	addi	s0,sp,128
    10ee:	5f00                	lw	s0,56(a4)
	...
    10f8:	0502                	c.slli64	a0
    10fa:	0000                	unimp
    10fc:	0508                	addi	a0,sp,640
            resultkon[0] = 0xDEDEDEDE;
    10fe:	0000                	unimp
    1100:	0002                	c.slli64	zero
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1102:	9f30                	0x9f30
    1104:	0508                	addi	a0,sp,640
    1106:	0000                	unimp
    1108:	00000513          	li	a0,0
            resultkon[0] = 0xDEDEDEDE;
    110c:	0001                	nop
    110e:	145d                	addi	s0,s0,-9
    for(i = 0; i < 32; ++i){
    1110:	0005                	c.nop	1
    1112:	1800                	addi	s0,sp,48
        if(!(message[i] == Dec_Message[i])){
    1114:	0005                	c.nop	1
    1116:	0200                	addi	s0,sp,256
    1118:	3000                	fld	fs0,32(s0)
    111a:	189f 0005 1e00      	0x1e000005189f
    1120:	0005                	c.nop	1
    1122:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    1124:	5d00                	lw	s0,56(a0)
    1126:	051e                	slli	a0,a0,0x7
    1128:	0000                	unimp
    112a:	0522                	slli	a0,a0,0x8
    112c:	0000                	unimp
}
    112e:	0001                	nop
    1130:	225f 0005 3c00      	0x3c000005225f
    1136:	0005                	c.nop	1
    1138:	0100                	addi	s0,sp,128
    113a:	6900                	flw	fs0,16(a0)
    113c:	053c                	addi	a5,sp,648
            resultkon[0] = 0xDEDEDEDE;
    113e:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1140:	054c                	addi	a1,sp,644
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	4c5d                	li	s8,23
    1148:	0005                	c.nop	1
    114a:	5200                	lw	s0,32(a2)
    114c:	0005                	c.nop	1
    114e:	0300                	addi	s0,sp,384
    1150:	7d00                	flw	fs0,56(a0)
    1152:	9f7f                	0x9f7f
    1154:	0552                	slli	a0,a0,0x14
    1156:	0000                	unimp
    1158:	0564                	addi	s1,sp,652
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	645d                	lui	s0,0x17
    1160:	0005                	c.nop	1
    1162:	6a00                	flw	fs0,16(a2)
    1164:	0005                	c.nop	1
    1166:	0300                	addi	s0,sp,384
    1168:	7d00                	flw	fs0,56(a0)
    116a:	9f7f                	0x9f7f
    116c:	056a                	slli	a0,a0,0x1a
    116e:	0000                	unimp
    1170:	056c                	addi	a1,sp,652
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	6c5d                	lui	s8,0x17
    1178:	0005                	c.nop	1
    117a:	8200                	0x8200
    117c:	0005                	c.nop	1
    117e:	0100                	addi	s0,sp,128
    1180:	5f00                	lw	s0,56(a4)
    1182:	0582                	c.slli64	a1
    1184:	0000                	unimp
    1186:	0596                	slli	a1,a1,0x5
    1188:	0000                	unimp
    118a:	0001                	nop
    118c:	9669                	srai	a2,a2,0x3a
    118e:	0005                	c.nop	1
    1190:	a600                	fsd	fs0,8(a2)
    1192:	0005                	c.nop	1
    1194:	0100                	addi	s0,sp,128
    1196:	5f00                	lw	s0,56(a4)
    1198:	05b8                	addi	a4,sp,712
    119a:	0000                	unimp
    119c:	05d2                	slli	a1,a1,0x14
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0059                	c.nop	22
    11a4:	0006                	c.slli	zero,0x1
    11a6:	0400                	addi	s0,sp,512
    11a8:	0006                	c.slli	zero,0x1
    11aa:	0200                	addi	s0,sp,256
    11ac:	3000                	fld	fs0,32(s0)
    11ae:	049f 0006 0a00      	0xa000006049f
    11b4:	0006                	c.slli	zero,0x1
    11b6:	0100                	addi	s0,sp,128
    11b8:	5e00                	lw	s0,56(a2)
    11ba:	0616                	slli	a2,a2,0x5
    11bc:	0000                	unimp
    11be:	061a                	slli	a2,a2,0x6
    11c0:	0000                	unimp
    11c2:	0002                	c.slli64	zero
    11c4:	9f30                	0x9f30
    11c6:	061a                	slli	a2,a2,0x6
    11c8:	0000                	unimp
    11ca:	0622                	slli	a2,a2,0x8
    11cc:	0000                	unimp
    11ce:	0001                	nop
    11d0:	225d                	jal	1376 <_bss_start+0x9a>
    11d2:	0006                	c.slli	zero,0x1
    11d4:	2a00                	fld	fs0,16(a2)
    11d6:	0006                	c.slli	zero,0x1
    11d8:	0100                	addi	s0,sp,128
    11da:	5f00                	lw	s0,56(a4)
    11dc:	062a                	slli	a2,a2,0xa
    11de:	0000                	unimp
    11e0:	0630                	addi	a2,sp,776
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	325d                	jal	b8c <generate_keys+0x1fc>
    11e8:	0006                	c.slli	zero,0x1
    11ea:	3800                	fld	fs0,48(s0)
    11ec:	0006                	c.slli	zero,0x1
    11ee:	0100                	addi	s0,sp,128
    11f0:	5e00                	lw	s0,56(a2)
    11f2:	0638                	addi	a4,sp,776
    11f4:	0000                	unimp
    11f6:	0648                	addi	a0,sp,772
    11f8:	0000                	unimp
    11fa:	0001                	nop
    11fc:	485f 0006 4c00      	0x4c000006485f
    1202:	0006                	c.slli	zero,0x1
    1204:	0100                	addi	s0,sp,128
    1206:	5e00                	lw	s0,56(a2)
    1208:	064c                	addi	a1,sp,772
    120a:	0000                	unimp
    120c:	0656                	slli	a2,a2,0x15
    120e:	0000                	unimp
    1210:	7f7e0003          	lb	zero,2039(t3)
    1214:	569f 0006 5800      	0x58000006569f
    121a:	0006                	c.slli	zero,0x1
    121c:	0100                	addi	s0,sp,128
    121e:	5e00                	lw	s0,56(a2)
    1220:	0658                	addi	a4,sp,772
    1222:	0000                	unimp
    1224:	0668                	addi	a0,sp,780
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	685d                	lui	a6,0x17
    122c:	0006                	c.slli	zero,0x1
    122e:	6e00                	flw	fs0,24(a2)
    1230:	0006                	c.slli	zero,0x1
    1232:	0300                	addi	s0,sp,384
    1234:	7d00                	flw	fs0,56(a0)
    1236:	9f7f                	0x9f7f
    1238:	066e                	slli	a2,a2,0x1b
    123a:	0000                	unimp
    123c:	0670                	addi	a2,sp,780
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	705d                	c.lui	zero,0xffff7
    1244:	0006                	c.slli	zero,0x1
    1246:	7c00                	flw	fs0,56(s0)
    1248:	0006                	c.slli	zero,0x1
    124a:	0100                	addi	s0,sp,128
    124c:	5f00                	lw	s0,56(a4)
    124e:	067c                	addi	a5,sp,780
    1250:	0000                	unimp
    1252:	0684                	addi	s1,sp,832
    1254:	0000                	unimp
    1256:	7f7f0003          	lb	zero,2039(t5)
    125a:	849f 0006 8600      	0x86000006849f
    1260:	0006                	c.slli	zero,0x1
    1262:	0100                	addi	s0,sp,128
    1264:	5f00                	lw	s0,56(a4)
    1266:	0686                	slli	a3,a3,0x1
    1268:	0000                	unimp
    126a:	0696                	slli	a3,a3,0x5
    126c:	0000                	unimp
    126e:	0001                	nop
    1270:	965d                	srai	a2,a2,0x37
    1272:	0006                	c.slli	zero,0x1
    1274:	9c00                	0x9c00
    1276:	0006                	c.slli	zero,0x1
    1278:	0300                	addi	s0,sp,384
    127a:	7d00                	flw	fs0,56(a0)
    127c:	9f7f                	0x9f7f
    127e:	069c                	addi	a5,sp,832
    1280:	0000                	unimp
    1282:	069e                	slli	a3,a3,0x7
    1284:	0000                	unimp
    1286:	0001                	nop
    1288:	9e5d                	0x9e5d
    128a:	0006                	c.slli	zero,0x1
    128c:	aa00                	fsd	fs0,16(a2)
    128e:	0006                	c.slli	zero,0x1
    1290:	0100                	addi	s0,sp,128
    1292:	5e00                	lw	s0,56(a2)
    1294:	06aa                	slli	a3,a3,0xa
    1296:	0000                	unimp
    1298:	06b6                	slli	a3,a3,0xd
    129a:	0000                	unimp
    129c:	7f7e0003          	lb	zero,2039(t3)
    12a0:	b69f 0006 b800      	0xb8000006b69f
    12a6:	0006                	c.slli	zero,0x1
    12a8:	0100                	addi	s0,sp,128
    12aa:	5e00                	lw	s0,56(a2)
    12ac:	06b8                	addi	a4,sp,840
    12ae:	0000                	unimp
    12b0:	06be                	slli	a3,a3,0xf
    12b2:	0000                	unimp
    12b4:	0001                	nop
    12b6:	be5f 0006 d000      	0xd0000006be5f
    12bc:	0006                	c.slli	zero,0x1
    12be:	0100                	addi	s0,sp,128
    12c0:	5d00                	lw	s0,56(a0)
    12c2:	06d0                	addi	a2,sp,836
    12c4:	0000                	unimp
    12c6:	06e2                	slli	a3,a3,0x18
    12c8:	0000                	unimp
    12ca:	0001                	nop
    12cc:	0059                	c.nop	22
    12ce:	0000                	unimp
    12d0:	0000                	unimp
    12d2:	0000                	unimp
    12d4:	a600                	fsd	fs0,8(a2)
    12d6:	0005                	c.nop	1
    12d8:	b700                	fsd	fs0,40(a4)
    12da:	0005                	c.nop	1
    12dc:	0100                	addi	s0,sp,128
    12de:	5e00                	lw	s0,56(a2)
    12e0:	05f2                	slli	a1,a1,0x1c
    12e2:	0000                	unimp
    12e4:	05f6                	slli	a1,a1,0x1d
    12e6:	0000                	unimp
    12e8:	0001                	nop
    12ea:	005e                	c.slli	zero,0x17
    12ec:	0000                	unimp
    12ee:	0000                	unimp
    12f0:	0000                	unimp
    12f2:	c800                	sw	s0,16(s0)
    12f4:	0005                	c.nop	1
    12f6:	f200                	fsw	fs0,32(a2)
    12f8:	0005                	c.nop	1
    12fa:	0600                	addi	s0,sp,768
    12fc:	0300                	addi	s0,sp,384
    12fe:	178c                	addi	a1,sp,992
    1300:	0000                	unimp
    1302:	009f 0000 0000      	0x9f
    1308:	0000                	unimp
    130a:	f000                	fsw	fs0,32(s0)
    130c:	0004                	0x4
    130e:	e400                	fsw	fs0,8(s0)
    1310:	0005                	c.nop	1
    1312:	0200                	addi	s0,sp,256
    1314:	8a00                	0x8a00
    1316:	f200                	fsw	fs0,32(a2)
    1318:	0005                	c.nop	1
    131a:	e200                	fsw	fs0,0(a2)
    131c:	0006                	c.slli	zero,0x1
    131e:	0200                	addi	s0,sp,256
    1320:	8a00                	0x8a00
	...
    132a:	f000                	fsw	fs0,32(s0)
    132c:	0004                	0x4
    132e:	dc00                	sw	s0,56(s0)
    1330:	0005                	c.nop	1
    1332:	0200                	addi	s0,sp,256
    1334:	8600                	0x8600
    1336:	dc00                	sw	s0,56(s0)
    1338:	0005                	c.nop	1
    133a:	de00                	sw	s0,56(a2)
    133c:	0005                	c.nop	1
    133e:	0c00                	addi	s0,sp,528
    1340:	8a00                	0x8a00
    1342:	8700                	0x8700
    1344:	3201                	jal	c44 <generate_keys+0x2b4>
    1346:	2324                	fld	fs1,64(a4)
    1348:	1af0090f          	0x1af0090f
    134c:	de1c                	sw	a5,56(a2)
    134e:	0005                	c.nop	1
    1350:	e400                	fsw	fs0,8(s0)
    1352:	0005                	c.nop	1
    1354:	0d00                	addi	s0,sp,656
    1356:	8a00                	0x8a00
    1358:	f300                	fsw	fs0,32(a4)
    135a:	5b01                	li	s6,-32
    135c:	2432                	fld	fs0,264(sp)
    135e:	f0090f23          	sb	zero,-226(s2)
    1362:	1c1a                	slli	s8,s8,0x26
    1364:	05f2                	slli	a1,a1,0x1c
    1366:	0000                	unimp
    1368:	06e2                	slli	a3,a3,0x18
    136a:	0000                	unimp
    136c:	0002                	c.slli64	zero
    136e:	0086                	slli	ra,ra,0x1
	...
    1378:	0616                	slli	a2,a2,0x5
    137a:	0000                	unimp
    137c:	0648                	addi	a0,sp,772
    137e:	0000                	unimp
    1380:	0001                	nop
    1382:	585a                	lw	a6,180(sp)
    1384:	0006                	c.slli	zero,0x1
    1386:	d000                	sw	s0,32(s0)
    1388:	0006                	c.slli	zero,0x1
    138a:	0100                	addi	s0,sp,128
    138c:	5a00                	lw	s0,48(a2)
	...
    1396:	04f0                	addi	a2,sp,588
    1398:	0000                	unimp
    139a:	0508                	addi	a0,sp,640
    139c:	0000                	unimp
    139e:	0002                	c.slli64	zero
    13a0:	0088                	addi	a0,sp,64
    13a2:	0508                	addi	a0,sp,640
    13a4:	0000                	unimp
    13a6:	05c4                	addi	s1,sp,708
    13a8:	0000                	unimp
    13aa:	0002                	c.slli64	zero
    13ac:	0085                	addi	ra,ra,1
    13ae:	05c4                	addi	s1,sp,708
    13b0:	0000                	unimp
    13b2:	05e0                	addi	s0,sp,716
    13b4:	0000                	unimp
    13b6:	0002                	c.slli64	zero
    13b8:	0088                	addi	a0,sp,64
    13ba:	05e0                	addi	s0,sp,716
    13bc:	0000                	unimp
    13be:	05e4                	addi	s1,sp,716
    13c0:	0000                	unimp
    13c2:	008a000f          	0x8a000f
    13c6:	325b01f3          	0x325b01f3
    13ca:	2324                	fld	fs1,64(a4)
    13cc:	1af0090f          	0x1af0090f
    13d0:	2431                	jal	15dc <product2+0xa8>
    13d2:	f21c                	fsw	fa5,32(a2)
    13d4:	0005                	c.nop	1
    13d6:	d000                	sw	s0,32(s0)
    13d8:	0006                	c.slli	zero,0x1
    13da:	0200                	addi	s0,sp,256
    13dc:	8500                	0x8500
    13de:	d000                	sw	s0,32(s0)
    13e0:	0006                	c.slli	zero,0x1
    13e2:	e200                	fsw	fs0,0(a2)
    13e4:	0006                	c.slli	zero,0x1
    13e6:	0200                	addi	s0,sp,256
    13e8:	8800                	0x8800
	...
    13f2:	0200                	addi	s0,sp,256
    13f4:	0005                	c.nop	1
    13f6:	0800                	addi	s0,sp,16
    13f8:	0005                	c.nop	1
    13fa:	0200                	addi	s0,sp,256
    13fc:	8400                	0x8400
    13fe:	0800                	addi	s0,sp,16
    1400:	0005                	c.nop	1
    1402:	cc00                	sw	s0,24(s0)
    1404:	0005                	c.nop	1
    1406:	0200                	addi	s0,sp,256
    1408:	7200                	flw	fs0,32(a2)
    140a:	cc00                	sw	s0,24(s0)
    140c:	0005                	c.nop	1
    140e:	d800                	sw	s0,48(s0)
    1410:	0005                	c.nop	1
    1412:	0200                	addi	s0,sp,256
    1414:	8400                	0x8400
    1416:	d800                	sw	s0,48(s0)
    1418:	0005                	c.nop	1
    141a:	e000                	fsw	fs0,0(s0)
    141c:	0005                	c.nop	1
    141e:	0d00                	addi	s0,sp,656
    1420:	8800                	0x8800
    1422:	f300                	fsw	fs0,32(a4)
    1424:	5d01                	li	s10,-32
    1426:	2432                	fld	fs0,264(sp)
    1428:	f0090f23          	sb	zero,-226(s2)
    142c:	1c1a                	slli	s8,s8,0x26
    142e:	05e0                	addi	s0,sp,716
    1430:	0000                	unimp
    1432:	05e4                	addi	s1,sp,716
    1434:	0000                	unimp
    1436:	001a                	c.slli	zero,0x6
    1438:	008a                	slli	ra,ra,0x2
    143a:	325b01f3          	0x325b01f3
    143e:	2324                	fld	fs1,64(a4)
    1440:	1af0090f          	0x1af0090f
    1444:	2431                	jal	1650 <product2+0x11c>
    1446:	f31c                	fsw	fa5,32(a4)
    1448:	5d01                	li	s10,-32
    144a:	2432                	fld	fs0,264(sp)
    144c:	f0090f23          	sb	zero,-226(s2)
    1450:	1c1a                	slli	s8,s8,0x26
    1452:	05f2                	slli	a1,a1,0x1c
    1454:	0000                	unimp
    1456:	06e2                	slli	a3,a3,0x18
    1458:	0000                	unimp
    145a:	0002                	c.slli64	zero
    145c:	0072                	c.slli	zero,0x1c
	...
    1466:	04f0                	addi	a2,sp,588
    1468:	0000                	unimp
    146a:	05de                	slli	a1,a1,0x17
    146c:	0000                	unimp
    146e:	0001                	nop
    1470:	0005de67          	0x5de67
    1474:	f200                	fsw	fs0,32(a2)
    1476:	0005                	c.nop	1
    1478:	0600                	addi	s0,sp,768
    147a:	f300                	fsw	fs0,32(a4)
    147c:	5b01                	li	s6,-32
    147e:	1c31                	addi	s8,s8,-20
    1480:	f29f 0005 e200      	0xe2000005f29f
    1486:	0006                	c.slli	zero,0x1
    1488:	0100                	addi	s0,sp,128
    148a:	6700                	flw	fs0,8(a4)
	...
    1494:	04f0                	addi	a2,sp,588
    1496:	0000                	unimp
    1498:	05de                	slli	a1,a1,0x17
    149a:	0000                	unimp
    149c:	0001                	nop
    149e:	0005de67          	0x5de67
    14a2:	f200                	fsw	fs0,32(a2)
    14a4:	0005                	c.nop	1
    14a6:	0600                	addi	s0,sp,768
    14a8:	f300                	fsw	fs0,32(a4)
    14aa:	5b01                	li	s6,-32
    14ac:	1c31                	addi	s8,s8,-20
    14ae:	f29f 0005 e200      	0xe2000005f29f
    14b4:	0006                	c.slli	zero,0x1
    14b6:	0100                	addi	s0,sp,128
    14b8:	6700                	flw	fs0,8(a4)
	...
    14c2:	04f0                	addi	a2,sp,588
    14c4:	0000                	unimp
    14c6:	05de                	slli	a1,a1,0x17
    14c8:	0000                	unimp
    14ca:	0001                	nop
    14cc:	0005de67          	0x5de67
    14d0:	f200                	fsw	fs0,32(a2)
    14d2:	0005                	c.nop	1
    14d4:	0600                	addi	s0,sp,768
    14d6:	f300                	fsw	fs0,32(a4)
    14d8:	5b01                	li	s6,-32
    14da:	1c31                	addi	s8,s8,-20
    14dc:	f29f 0005 e200      	0xe2000005f29f
    14e2:	0006                	c.slli	zero,0x1
    14e4:	0100                	addi	s0,sp,128
    14e6:	6700                	flw	fs0,8(a4)
	...
    14f0:	04fe                	slli	s1,s1,0x1f
    14f2:	0000                	unimp
    14f4:	0522                	slli	a0,a0,0x8
    14f6:	0000                	unimp
    14f8:	0001                	nop
    14fa:	2269                	jal	1684 <product2+0x150>
    14fc:	0005                	c.nop	1
    14fe:	3c00                	fld	fs0,56(s0)
    1500:	0005                	c.nop	1
    1502:	0300                	addi	s0,sp,384
    1504:	8300                	0x8300
    1506:	9f7f                	0x9f7f
    1508:	053c                	addi	a5,sp,648
    150a:	0000                	unimp
    150c:	0582                	c.slli64	a1
    150e:	0000                	unimp
    1510:	0001                	nop
    1512:	8269                	srli	a2,a2,0x1a
    1514:	0005                	c.nop	1
    1516:	d600                	sw	s0,40(a2)
    1518:	0005                	c.nop	1
    151a:	0300                	addi	s0,sp,384
    151c:	8300                	0x8300
    151e:	9f7f                	0x9f7f
    1520:	05d6                	slli	a1,a1,0x15
    1522:	0000                	unimp
    1524:	05f2                	slli	a1,a1,0x1c
    1526:	0000                	unimp
    1528:	0006                	c.slli	zero,0x1
    152a:	315d01f3          	0x315d01f3
    152e:	9f1c                	0x9f1c
    1530:	05f2                	slli	a1,a1,0x1c
    1532:	0000                	unimp
    1534:	06e2                	slli	a3,a3,0x18
    1536:	0000                	unimp
    1538:	7f830003          	lb	zero,2040(t1)
    153c:	009f 0000 0000      	0x9f
    1542:	0000                	unimp
    1544:	3400                	fld	fs0,40(s0)
    1546:	b0000003          	lb	zero,-1280(zero) # fffffb00 <_stack_start+0xfffefb00>
    154a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    154e:	5a00                	lw	s0,48(a2)
    1550:	03b0                	addi	a2,sp,456
    1552:	0000                	unimp
    1554:	03b5                	addi	t2,t2,13
    1556:	0000                	unimp
    1558:	0001                	nop
    155a:	0003b55b          	0x3b55b
    155e:	dc00                	sw	s0,56(s0)
    1560:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1564:	f300                	fsw	fs0,32(a4)
    1566:	5a01                	li	s4,-32
    1568:	dc9f 0003 fe00      	0xfe000003dc9f
    156e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1572:	5a00                	lw	s0,48(a2)
    1574:	03fe                	slli	t2,t2,0x1f
    1576:	0000                	unimp
    1578:	04a4                	addi	s1,sp,584
    157a:	0000                	unimp
    157c:	0004                	0x4
    157e:	9f5a01f3          	0x9f5a01f3
	...
    158a:	0334                	addi	a3,sp,392
    158c:	0000                	unimp
    158e:	03ae                	slli	t2,t2,0xb
    1590:	0000                	unimp
    1592:	0001                	nop
    1594:	0003ae5b          	0x3ae5b
    1598:	b500                	fsd	fs0,40(a0)
    159a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    159e:	5c00                	lw	s0,56(s0)
    15a0:	03b5                	addi	t2,t2,13
    15a2:	0000                	unimp
    15a4:	03dc                	addi	a5,sp,452
    15a6:	0000                	unimp
    15a8:	01880003          	lb	zero,24(a6) # 17018 <_stack_start+0x7018>
    15ac:	dc9f 0003 fe00      	0xfe000003dc9f
    15b2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15b6:	5b00                	lw	s0,48(a4)
    15b8:	03fe                	slli	t2,t2,0x1f
    15ba:	0000                	unimp
    15bc:	0492                	slli	s1,s1,0x4
    15be:	0000                	unimp
    15c0:	01880003          	lb	zero,24(a6)
    15c4:	929f 0004 a400      	0xa4000004929f
    15ca:	0004                	0x4
    15cc:	0400                	addi	s0,sp,512
    15ce:	f300                	fsw	fs0,32(a4)
    15d0:	5b01                	li	s6,-32
    15d2:	009f 0000 0000      	0x9f
    15d8:	0000                	unimp
    15da:	3400                	fld	fs0,40(s0)
    15dc:	a6000003          	lb	zero,-1440(zero) # fffffa60 <_stack_start+0xfffefa60>
    15e0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15e4:	5c00                	lw	s0,56(s0)
    15e6:	03a6                	slli	t2,t2,0x9
    15e8:	0000                	unimp
    15ea:	03b5                	addi	t2,t2,13
    15ec:	0000                	unimp
    15ee:	0001                	nop
    15f0:	b560                	fsd	fs0,232(a0)
    15f2:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    15f6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    15fa:	7800                	flw	fs0,48(s0)
    15fc:	7fbc                	flw	fa5,120(a5)
    15fe:	03dc                	addi	a5,sp,452
    1600:	0000                	unimp
    1602:	03fe                	slli	t2,t2,0x1f
    1604:	0000                	unimp
    1606:	0001                	nop
    1608:	fe60                	fsw	fs0,124(a2)
    160a:	82000003          	lb	zero,-2016(zero) # fffff820 <_stack_start+0xfffef820>
    160e:	0004                	0x4
    1610:	0300                	addi	s0,sp,384
    1612:	7800                	flw	fs0,48(s0)
    1614:	7fbc                	flw	fa5,120(a5)
    1616:	0482                	c.slli64	s1
    1618:	0000                	unimp
    161a:	04a4                	addi	s1,sp,584
    161c:	0000                	unimp
    161e:	bc910003          	lb	zero,-1079(sp)
    1622:	007f                	0x7f
    1624:	0000                	unimp
    1626:	0000                	unimp
    1628:	0000                	unimp
    162a:	3400                	fld	fs0,40(s0)
    162c:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    1630:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1634:	5d00                	lw	s0,56(a0)
    1636:	039c                	addi	a5,sp,448
    1638:	0000                	unimp
    163a:	0488                	addi	a0,sp,576
    163c:	0000                	unimp
    163e:	0001                	nop
    1640:	00048863          	beqz	s1,1650 <product2+0x11c>
    1644:	a400                	fsd	fs0,8(s0)
    1646:	0004                	0x4
    1648:	0400                	addi	s0,sp,512
    164a:	f300                	fsw	fs0,32(a4)
    164c:	5d01                	li	s10,-32
    164e:	009f 0000 0000      	0x9f
    1654:	0000                	unimp
    1656:	3400                	fld	fs0,40(s0)
    1658:	9e000003          	lb	zero,-1568(zero) # fffff9e0 <_stack_start+0xfffef9e0>
    165c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1660:	5e00                	lw	s0,56(a2)
    1662:	039e                	slli	t2,t2,0x7
    1664:	0000                	unimp
    1666:	0498                	addi	a4,sp,576
    1668:	0000                	unimp
    166a:	0001                	nop
    166c:	0004986b          	0x4986b
    1670:	a400                	fsd	fs0,8(s0)
    1672:	0004                	0x4
    1674:	0400                	addi	s0,sp,512
    1676:	f300                	fsw	fs0,32(a4)
    1678:	5e01                	li	t3,-32
    167a:	009f 0000 0000      	0x9f
    1680:	0000                	unimp
    1682:	9000                	0x9000
    1684:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1688:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    168c:	8200                	0x8200
    168e:	d400                	sw	s0,40(s0)
    1690:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    1694:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1698:	8900                	0x8900
    169a:	dc00                	sw	s0,56(s0)
    169c:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    16a0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16a4:	8200                	0x8200
    16a6:	fe00                	fsw	fs0,56(a2)
    16a8:	26000003          	lb	zero,608(zero) # 260 <polymult+0x138>
    16ac:	0004                	0x4
    16ae:	0200                	addi	s0,sp,256
    16b0:	8900                	0x8900
    16b2:	3800                	fld	fs0,48(s0)
    16b4:	0004                	0x4
    16b6:	6000                	flw	fs0,0(s0)
    16b8:	0004                	0x4
    16ba:	0200                	addi	s0,sp,256
    16bc:	8900                	0x8900
	...
    16c6:	9800                	0x9800
    16c8:	a6000003          	lb	zero,-1440(zero) # fffffa60 <_stack_start+0xfffefa60>
    16cc:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    16d0:	3000                	fld	fs0,32(s0)
    16d2:	a69f 0003 b500      	0xb5000003a69f
    16d8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16dc:	5e00                	lw	s0,56(a2)
    16de:	03dc                	addi	a5,sp,452
    16e0:	0000                	unimp
    16e2:	03fe                	slli	t2,t2,0x1f
    16e4:	0000                	unimp
    16e6:	0001                	nop
    16e8:	265e                	fld	fa2,464(sp)
    16ea:	0004                	0x4
    16ec:	3800                	fld	fs0,48(s0)
    16ee:	0004                	0x4
    16f0:	0100                	addi	s0,sp,128
    16f2:	5c00                	lw	s0,56(s0)
    16f4:	0460                	addi	s0,sp,524
    16f6:	0000                	unimp
    16f8:	04a4                	addi	s1,sp,584
    16fa:	0000                	unimp
    16fc:	0001                	nop
    16fe:	005c                	addi	a5,sp,4
    1700:	0000                	unimp
    1702:	0000                	unimp
    1704:	0000                	unimp
    1706:	d400                	sw	s0,40(s0)
    1708:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    170c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1710:	6400                	flw	fs0,8(s0)
    1712:	03dc                	addi	a5,sp,452
    1714:	0000                	unimp
    1716:	03f8                	addi	a4,sp,460
    1718:	0000                	unimp
    171a:	0001                	nop
    171c:	fe5f 0003 2600      	0x26000003fe5f
    1722:	0004                	0x4
    1724:	0100                	addi	s0,sp,128
    1726:	6400                	flw	fs0,8(s0)
    1728:	0438                	addi	a4,sp,520
    172a:	0000                	unimp
    172c:	0460                	addi	s0,sp,524
    172e:	0000                	unimp
    1730:	0001                	nop
    1732:	6064                	flw	fs1,68(s0)
    1734:	0004                	0x4
    1736:	6600                	flw	fs0,8(a2)
    1738:	0004                	0x4
    173a:	0100                	addi	s0,sp,128
    173c:	5e00                	lw	s0,56(a2)
    173e:	0466                	slli	s0,s0,0x19
    1740:	0000                	unimp
    1742:	046e                	slli	s0,s0,0x1b
    1744:	0000                	unimp
    1746:	7f7e0003          	lb	zero,2039(t3)
    174a:	6e9f 0004 7a00      	0x7a0000046e9f
    1750:	0004                	0x4
    1752:	0100                	addi	s0,sp,128
    1754:	5e00                	lw	s0,56(a2)
	...
    175e:	03fe                	slli	t2,t2,0x1f
    1760:	0000                	unimp
    1762:	0410                	addi	a2,sp,512
    1764:	0000                	unimp
    1766:	0001                	nop
    1768:	105f 0004 1600      	0x16000004105f
    176e:	0004                	0x4
    1770:	0300                	addi	s0,sp,384
    1772:	7f00                	flw	fs0,56(a4)
    1774:	9f01                	0x9f01
    1776:	0416                	slli	s0,s0,0x5
    1778:	0000                	unimp
    177a:	0420                	addi	s0,sp,520
    177c:	0000                	unimp
    177e:	0001                	nop
    1780:	3c5f 0004 4e00      	0x4e0000043c5f
    1786:	0004                	0x4
    1788:	0100                	addi	s0,sp,128
    178a:	5f00                	lw	s0,56(a4)
    178c:	044e                	slli	s0,s0,0x13
    178e:	0000                	unimp
    1790:	0454                	addi	a3,sp,516
    1792:	0000                	unimp
    1794:	017f0003          	lb	zero,23(t5)
    1798:	549f 0004 6000      	0x60000004549f
    179e:	0004                	0x4
    17a0:	0100                	addi	s0,sp,128
    17a2:	5f00                	lw	s0,56(a4)
	...
    17ac:	0396                	slli	t2,t2,0x5
    17ae:	0000                	unimp
    17b0:	0496                	slli	s1,s1,0x5
    17b2:	0000                	unimp
    17b4:	0002                	c.slli64	zero
    17b6:	008a                	slli	ra,ra,0x2
	...
    17c0:	0398                	addi	a4,sp,448
    17c2:	0000                	unimp
    17c4:	047e                	slli	s0,s0,0x1f
    17c6:	0000                	unimp
    17c8:	0002                	c.slli64	zero
    17ca:	0072                	c.slli	zero,0x1c
    17cc:	047e                	slli	s0,s0,0x1f
    17ce:	0000                	unimp
    17d0:	0484                	addi	s1,sp,576
    17d2:	0000                	unimp
    17d4:	0002                	c.slli64	zero
    17d6:	0079                	c.nop	30
    17d8:	0484                	addi	s1,sp,576
    17da:	0000                	unimp
    17dc:	0488                	addi	a0,sp,576
    17de:	0000                	unimp
    17e0:	000c                	0xc
    17e2:	008a                	slli	ra,ra,0x2
    17e4:	24320083          	lb	ra,579(tp) # 243 <polymult+0x11b>
    17e8:	f0090f23          	sb	zero,-226(s2)
    17ec:	1c1a                	slli	s8,s8,0x26
    17ee:	0488                	addi	a0,sp,576
    17f0:	0000                	unimp
    17f2:	0496                	slli	s1,s1,0x5
    17f4:	0000                	unimp
    17f6:	000d                	c.nop	3
    17f8:	008a                	slli	ra,ra,0x2
    17fa:	325d01f3          	0x325d01f3
    17fe:	2324                	fld	fs1,64(a4)
    1800:	1af0090f          	0x1af0090f
    1804:	001c                	0x1c
    1806:	0000                	unimp
    1808:	0000                	unimp
    180a:	0000                	unimp
    180c:	9000                	0x9000
    180e:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1812:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1816:	6400                	flw	fs0,8(s0)
    1818:	03d4                	addi	a3,sp,452
    181a:	0000                	unimp
    181c:	03dc                	addi	a5,sp,452
    181e:	0000                	unimp
    1820:	7f830003          	lb	zero,2040(t1)
    1824:	dc9f 0003 fe00      	0xfe000003dc9f
    182a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    182e:	6400                	flw	fs0,8(s0)
    1830:	03fe                	slli	t2,t2,0x1f
    1832:	0000                	unimp
    1834:	0488                	addi	a0,sp,576
    1836:	0000                	unimp
    1838:	7f830003          	lb	zero,2040(t1)
    183c:	889f 0004 a400      	0xa4000004889f
    1842:	0004                	0x4
    1844:	0600                	addi	s0,sp,768
    1846:	f300                	fsw	fs0,32(a4)
    1848:	5d01                	li	s10,-32
    184a:	1c31                	addi	s8,s8,-20
    184c:	009f 0000 0000      	0x9f
    1852:	0000                	unimp
    1854:	4c00                	lw	s0,24(s0)
    1856:	90000003          	lb	zero,-1792(zero) # fffff900 <_stack_start+0xfffef900>
    185a:	0004                	0x4
    185c:	0100                	addi	s0,sp,128
    185e:	6700                	flw	fs0,8(a4)
    1860:	0490                	addi	a2,sp,576
    1862:	0000                	unimp
    1864:	0492                	slli	s1,s1,0x4
    1866:	0000                	unimp
    1868:	00880007          	0x880007
    186c:	225d01f3          	0x225d01f3
    1870:	929f 0004 a400      	0xa4000004929f
    1876:	0004                	0x4
    1878:	0a00                	addi	s0,sp,272
    187a:	f300                	fsw	fs0,32(a4)
    187c:	5b01                	li	s6,-32
    187e:	225d01f3          	0x225d01f3
    1882:	1c31                	addi	s8,s8,-20
    1884:	009f 0000 0000      	0x9f
    188a:	0000                	unimp
    188c:	9600                	0x9600
    188e:	92000003          	lb	zero,-1760(zero) # fffff920 <_stack_start+0xfffef920>
    1892:	0004                	0x4
    1894:	0100                	addi	s0,sp,128
    1896:	6800                	flw	fs0,16(s0)
    1898:	0492                	slli	s1,s1,0x4
    189a:	0000                	unimp
    189c:	04a4                	addi	s1,sp,584
    189e:	0000                	unimp
    18a0:	0006                	c.slli	zero,0x1
    18a2:	315b01f3          	0x315b01f3
    18a6:	9f1c                	0x9f1c
	...
    18b0:	0396                	slli	t2,t2,0x5
    18b2:	0000                	unimp
    18b4:	03d4                	addi	a3,sp,452
    18b6:	0000                	unimp
    18b8:	0001                	nop
    18ba:	d464                	sw	s1,108(s0)
    18bc:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    18c0:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    18c4:	8300                	0x8300
    18c6:	9f7f                	0x9f7f
    18c8:	03dc                	addi	a5,sp,452
    18ca:	0000                	unimp
    18cc:	03fe                	slli	t2,t2,0x1f
    18ce:	0000                	unimp
    18d0:	0001                	nop
    18d2:	fe64                	fsw	fs1,124(a2)
    18d4:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    18d8:	0004                	0x4
    18da:	0300                	addi	s0,sp,384
    18dc:	8300                	0x8300
    18de:	9f7f                	0x9f7f
    18e0:	0488                	addi	a0,sp,576
    18e2:	0000                	unimp
    18e4:	04a4                	addi	s1,sp,584
    18e6:	0000                	unimp
    18e8:	0006                	c.slli	zero,0x1
    18ea:	315d01f3          	0x315d01f3
    18ee:	9f1c                	0x9f1c
	...
    18f8:	0128                	addi	a0,sp,136
    18fa:	0000                	unimp
    18fc:	01b0                	addi	a2,sp,200
    18fe:	0000                	unimp
    1900:	0001                	nop
    1902:	b05a                	fsd	fs6,32(sp)
    1904:	0001                	nop
    1906:	b900                	fsd	fs0,48(a0)
    1908:	0001                	nop
    190a:	0100                	addi	s0,sp,128
    190c:	5b00                	lw	s0,48(a4)
    190e:	01b9                	addi	gp,gp,14
    1910:	0000                	unimp
    1912:	01f6                	slli	gp,gp,0x1d
    1914:	0000                	unimp
    1916:	0004                	0x4
    1918:	9f5a01f3          	0x9f5a01f3
    191c:	01f6                	slli	gp,gp,0x1d
    191e:	0000                	unimp
    1920:	0218                	addi	a4,sp,256
    1922:	0000                	unimp
    1924:	0001                	nop
    1926:	185a                	slli	a6,a6,0x36
    1928:	0002                	c.slli64	zero
    192a:	3400                	fld	fs0,40(s0)
    192c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1930:	f300                	fsw	fs0,32(a4)
    1932:	5a01                	li	s4,-32
    1934:	009f 0000 0000      	0x9f
    193a:	0000                	unimp
    193c:	2800                	fld	fs0,16(s0)
    193e:	0001                	nop
    1940:	9c00                	0x9c00
    1942:	0001                	nop
    1944:	0100                	addi	s0,sp,128
    1946:	5b00                	lw	s0,48(a4)
    1948:	019c                	addi	a5,sp,192
    194a:	0000                	unimp
    194c:	01b9                	addi	gp,gp,14
    194e:	0000                	unimp
    1950:	0001                	nop
    1952:	b960                	fsd	fs0,240(a0)
    1954:	0001                	nop
    1956:	f600                	fsw	fs0,40(a2)
    1958:	0001                	nop
    195a:	0300                	addi	s0,sp,384
    195c:	7800                	flw	fs0,48(s0)
    195e:	7fb4                	flw	fa3,120(a5)
    1960:	01f6                	slli	gp,gp,0x1d
    1962:	0000                	unimp
    1964:	0218                	addi	a4,sp,256
    1966:	0000                	unimp
    1968:	0001                	nop
    196a:	1860                	addi	s0,sp,60
    196c:	0002                	c.slli64	zero
    196e:	7200                	flw	fs0,32(a2)
    1970:	0002                	c.slli64	zero
    1972:	0300                	addi	s0,sp,384
    1974:	7800                	flw	fs0,48(s0)
    1976:	7fb4                	flw	fa3,120(a5)
    1978:	0272                	slli	tp,tp,0x1c
    197a:	0000                	unimp
    197c:	0334                	addi	a3,sp,392
    197e:	0000                	unimp
    1980:	b4910003          	lb	zero,-1207(sp)
    1984:	007f                	0x7f
    1986:	0000                	unimp
    1988:	0000                	unimp
    198a:	0000                	unimp
    198c:	2800                	fld	fs0,16(s0)
    198e:	0001                	nop
    1990:	9e00                	0x9e00
    1992:	0001                	nop
    1994:	0100                	addi	s0,sp,128
    1996:	5c00                	lw	s0,56(s0)
    1998:	019e                	slli	gp,gp,0x7
    199a:	0000                	unimp
    199c:	01b9                	addi	gp,gp,14
    199e:	0000                	unimp
    19a0:	0001                	nop
    19a2:	b961                	j	163a <product2+0x106>
    19a4:	0001                	nop
    19a6:	f600                	fsw	fs0,40(a2)
    19a8:	0001                	nop
    19aa:	0300                	addi	s0,sp,384
    19ac:	7800                	flw	fs0,48(s0)
    19ae:	7fb0                	flw	fa2,120(a5)
    19b0:	01f6                	slli	gp,gp,0x1d
    19b2:	0000                	unimp
    19b4:	0218                	addi	a4,sp,256
    19b6:	0000                	unimp
    19b8:	0001                	nop
    19ba:	1861                	addi	a6,a6,-8
    19bc:	0002                	c.slli64	zero
    19be:	6e00                	flw	fs0,24(a2)
    19c0:	0002                	c.slli64	zero
    19c2:	0300                	addi	s0,sp,384
    19c4:	7800                	flw	fs0,48(s0)
    19c6:	7fb0                	flw	fa2,120(a5)
    19c8:	026e                	slli	tp,tp,0x1b
    19ca:	0000                	unimp
    19cc:	0292                	slli	t0,t0,0x4
    19ce:	0000                	unimp
    19d0:	0002                	c.slli64	zero
    19d2:	0072                	c.slli	zero,0x1c
    19d4:	0292                	slli	t0,t0,0x4
    19d6:	0000                	unimp
    19d8:	0294                	addi	a3,sp,320
    19da:	0000                	unimp
    19dc:	b0720003          	lb	zero,-1273(tp) # fffffb07 <_stack_start+0xfffefb07>
    19e0:	947f                	0x947f
    19e2:	0002                	c.slli64	zero
    19e4:	3400                	fld	fs0,40(s0)
    19e6:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    19ea:	9100                	0x9100
    19ec:	7fb0                	flw	fa2,120(a5)
	...
    19f6:	0128                	addi	a0,sp,136
    19f8:	0000                	unimp
    19fa:	0132                	slli	sp,sp,0xc
    19fc:	0000                	unimp
    19fe:	0001                	nop
    1a00:	325d                	jal	13a6 <_bss_start+0xca>
    1a02:	0001                	nop
    1a04:	7600                	flw	fs0,40(a2)
    1a06:	0002                	c.slli64	zero
    1a08:	0100                	addi	s0,sp,128
    1a0a:	6200                	flw	fs0,0(a2)
    1a0c:	0276                	slli	tp,tp,0x1d
    1a0e:	0000                	unimp
    1a10:	0294                	addi	a3,sp,320
    1a12:	0000                	unimp
    1a14:	0004                	0x4
    1a16:	9f5d01f3          	0x9f5d01f3
    1a1a:	0294                	addi	a3,sp,320
    1a1c:	0000                	unimp
    1a1e:	0334                	addi	a3,sp,392
    1a20:	0000                	unimp
    1a22:	0001                	nop
    1a24:	0062                	c.slli	zero,0x18
    1a26:	0000                	unimp
    1a28:	0000                	unimp
    1a2a:	0000                	unimp
    1a2c:	2800                	fld	fs0,16(s0)
    1a2e:	0001                	nop
    1a30:	b900                	fsd	fs0,48(a0)
    1a32:	0001                	nop
    1a34:	0100                	addi	s0,sp,128
    1a36:	5e00                	lw	s0,56(a2)
    1a38:	01b9                	addi	gp,gp,14
    1a3a:	0000                	unimp
    1a3c:	01f6                	slli	gp,gp,0x1d
    1a3e:	0000                	unimp
    1a40:	0001                	nop
    1a42:	0001f667          	0x1f667
    1a46:	1800                	addi	s0,sp,48
    1a48:	0002                	c.slli64	zero
    1a4a:	0100                	addi	s0,sp,128
    1a4c:	5e00                	lw	s0,56(a2)
    1a4e:	0218                	addi	a4,sp,256
    1a50:	0000                	unimp
    1a52:	0280                	addi	s0,sp,320
    1a54:	0000                	unimp
    1a56:	0001                	nop
    1a58:	00028067          	jr	t0 # 1194300 <_stack_start+0x1184300>
    1a5c:	9400                	0x9400
    1a5e:	0002                	c.slli64	zero
    1a60:	0400                	addi	s0,sp,512
    1a62:	f300                	fsw	fs0,32(a4)
    1a64:	5e01                	li	t3,-32
    1a66:	949f 0002 3400      	0x34000002949f
    1a6c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1a70:	6700                	flw	fs0,8(a4)
	...
    1a7a:	0128                	addi	a0,sp,136
    1a7c:	0000                	unimp
    1a7e:	0164                	addi	s1,sp,140
    1a80:	0000                	unimp
    1a82:	0001                	nop
    1a84:	645f 0001 7200      	0x72000001645f
    1a8a:	0002                	c.slli64	zero
    1a8c:	0300                	addi	s0,sp,384
    1a8e:	7800                	flw	fs0,48(s0)
    1a90:	7fb8                	flw	fa4,120(a5)
    1a92:	0272                	slli	tp,tp,0x1c
    1a94:	0000                	unimp
    1a96:	0334                	addi	a3,sp,392
    1a98:	0000                	unimp
    1a9a:	b8910003          	lb	zero,-1143(sp)
    1a9e:	007f                	0x7f
    1aa0:	0000                	unimp
    1aa2:	0000                	unimp
    1aa4:	0000                	unimp
    1aa6:	9200                	0x9200
    1aa8:	0001                	nop
    1aaa:	a600                	fsd	fs0,8(a2)
    1aac:	0001                	nop
    1aae:	0200                	addi	s0,sp,256
    1ab0:	8a00                	0x8a00
    1ab2:	a600                	fsd	fs0,8(a2)
    1ab4:	0001                	nop
    1ab6:	5000                	lw	s0,32(s0)
    1ab8:	0002                	c.slli64	zero
    1aba:	0200                	addi	s0,sp,256
    1abc:	8400                	0x8400
    1abe:	5000                	lw	s0,32(s0)
    1ac0:	0002                	c.slli64	zero
    1ac2:	8600                	0x8600
    1ac4:	0002                	c.slli64	zero
    1ac6:	0200                	addi	s0,sp,256
    1ac8:	8a00                	0x8a00
    1aca:	9400                	0x9400
    1acc:	0002                	c.slli64	zero
    1ace:	e000                	fsw	fs0,0(s0)
    1ad0:	0002                	c.slli64	zero
    1ad2:	0200                	addi	s0,sp,256
    1ad4:	8400                	0x8400
    1ad6:	e000                	fsw	fs0,0(s0)
    1ad8:	0002                	c.slli64	zero
    1ada:	3400                	fld	fs0,40(s0)
    1adc:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1ae0:	8a00                	0x8a00
	...
    1aea:	9400                	0x9400
    1aec:	0001                	nop
    1aee:	a600                	fsd	fs0,8(a2)
    1af0:	0001                	nop
    1af2:	0200                	addi	s0,sp,256
    1af4:	3000                	fld	fs0,32(s0)
    1af6:	a69f 0001 ac00      	0xac000001a69f
    1afc:	0001                	nop
    1afe:	0100                	addi	s0,sp,128
    1b00:	5c00                	lw	s0,56(s0)
    1b02:	01ba                	slli	gp,gp,0xe
    1b04:	0000                	unimp
    1b06:	01c6                	slli	gp,gp,0x11
    1b08:	0000                	unimp
    1b0a:	0002                	c.slli64	zero
    1b0c:	9f30                	0x9f30
    1b0e:	01c6                	slli	gp,gp,0x11
    1b10:	0000                	unimp
    1b12:	01ce                	slli	gp,gp,0x13
    1b14:	0000                	unimp
    1b16:	0001                	nop
    1b18:	0001d25b          	0x1d25b
    1b1c:	d600                	sw	s0,40(a2)
    1b1e:	0001                	nop
    1b20:	0200                	addi	s0,sp,256
    1b22:	3000                	fld	fs0,32(s0)
    1b24:	d69f 0001 ec00      	0xec000001d69f
    1b2a:	0001                	nop
    1b2c:	0100                	addi	s0,sp,128
    1b2e:	5b00                	lw	s0,48(a4)
    1b30:	01f6                	slli	gp,gp,0x1d
    1b32:	0000                	unimp
    1b34:	0218                	addi	a4,sp,256
    1b36:	0000                	unimp
    1b38:	0001                	nop
    1b3a:	185c                	addi	a5,sp,52
    1b3c:	0002                	c.slli64	zero
    1b3e:	2800                	fld	fs0,16(s0)
    1b40:	0002                	c.slli64	zero
    1b42:	0100                	addi	s0,sp,128
    1b44:	5b00                	lw	s0,48(a4)
    1b46:	0228                	addi	a0,sp,264
    1b48:	0000                	unimp
    1b4a:	022e                	slli	tp,tp,0xb
    1b4c:	0000                	unimp
    1b4e:	7f7b0003          	lb	zero,2039(s6)
    1b52:	2e9f 0002 4000      	0x400000022e9f
    1b58:	0002                	c.slli64	zero
    1b5a:	0100                	addi	s0,sp,128
    1b5c:	5b00                	lw	s0,48(a4)
    1b5e:	0240                	addi	s0,sp,260
    1b60:	0000                	unimp
    1b62:	0246                	slli	tp,tp,0x11
    1b64:	0000                	unimp
    1b66:	7f7b0003          	lb	zero,2039(s6)
    1b6a:	469f 0002 4a00      	0x4a000002469f
    1b70:	0002                	c.slli64	zero
    1b72:	0100                	addi	s0,sp,128
    1b74:	5b00                	lw	s0,48(a4)
    1b76:	0250                	addi	a2,sp,260
    1b78:	0000                	unimp
    1b7a:	025c                	addi	a5,sp,260
    1b7c:	0000                	unimp
    1b7e:	0001                	nop
    1b80:	e05e                	fsw	fs7,0(sp)
    1b82:	0002                	c.slli64	zero
    1b84:	fe00                	fsw	fs0,56(a2)
    1b86:	0002                	c.slli64	zero
    1b88:	0100                	addi	s0,sp,128
    1b8a:	5e00                	lw	s0,56(a2)
    1b8c:	02fe                	slli	t0,t0,0x1f
    1b8e:	0000                	unimp
    1b90:	030a                	slli	t1,t1,0x2
    1b92:	0000                	unimp
    1b94:	0001                	nop
    1b96:	00030a5b          	0x30a5b
    1b9a:	1600                	addi	s0,sp,800
    1b9c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1ba0:	7b00                	flw	fs0,48(a4)
    1ba2:	9f7f                	0x9f7f
    1ba4:	0316                	slli	t1,t1,0x5
    1ba6:	0000                	unimp
    1ba8:	0320                	addi	s0,sp,392
    1baa:	0000                	unimp
    1bac:	0001                	nop
    1bae:	0000005b          	0x5b
    1bb2:	0000                	unimp
    1bb4:	0000                	unimp
    1bb6:	ee00                	fsw	fs0,24(a2)
    1bb8:	0001                	nop
    1bba:	f600                	fsw	fs0,40(a2)
    1bbc:	0001                	nop
    1bbe:	0100                	addi	s0,sp,128
    1bc0:	6900                	flw	fs0,16(a0)
    1bc2:	01f6                	slli	gp,gp,0x1d
    1bc4:	0000                	unimp
    1bc6:	0212                	slli	tp,tp,0x4
    1bc8:	0000                	unimp
    1bca:	0001                	nop
    1bcc:	4a5f 0002 5000      	0x500000024a5f
    1bd2:	0002                	c.slli64	zero
    1bd4:	0100                	addi	s0,sp,128
    1bd6:	6900                	flw	fs0,16(a0)
    1bd8:	0260                	addi	s0,sp,268
    1bda:	0000                	unimp
    1bdc:	0266                	slli	tp,tp,0x19
    1bde:	0000                	unimp
    1be0:	0001                	nop
    1be2:	665d                	lui	a2,0x17
    1be4:	0002                	c.slli64	zero
    1be6:	9400                	0x9400
    1be8:	0002                	c.slli64	zero
    1bea:	0100                	addi	s0,sp,128
    1bec:	5f00                	lw	s0,56(a4)
    1bee:	0294                	addi	a3,sp,320
    1bf0:	0000                	unimp
    1bf2:	02e0                	addi	s0,sp,332
    1bf4:	0000                	unimp
    1bf6:	0001                	nop
    1bf8:	e069                	bnez	s0,1cba <random_keys+0x146>
    1bfa:	0002                	c.slli64	zero
    1bfc:	e400                	fsw	fs0,8(s0)
    1bfe:	0002                	c.slli64	zero
    1c00:	0100                	addi	s0,sp,128
    1c02:	5c00                	lw	s0,56(s0)
    1c04:	02e4                	addi	s1,sp,332
    1c06:	0000                	unimp
    1c08:	02ee                	slli	t0,t0,0x1b
    1c0a:	0000                	unimp
    1c0c:	7f7c0003          	lb	zero,2039(s8) # 177f7 <_stack_start+0x77f7>
    1c10:	ee9f 0002 f800      	0xf8000002ee9f
    1c16:	0002                	c.slli64	zero
    1c18:	0100                	addi	s0,sp,128
    1c1a:	5c00                	lw	s0,56(s0)
    1c1c:	02fe                	slli	t0,t0,0x1f
    1c1e:	0000                	unimp
    1c20:	0324                	addi	s1,sp,392
    1c22:	0000                	unimp
    1c24:	0001                	nop
    1c26:	245d                	jal	1ecc <random_keys+0x358>
    1c28:	28000003          	lb	zero,640(zero) # 280 <polymult+0x158>
    1c2c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c30:	5f00                	lw	s0,56(a4)
    1c32:	0328                	addi	a0,sp,392
    1c34:	0000                	unimp
    1c36:	0332                	slli	t1,t1,0xc
    1c38:	0000                	unimp
    1c3a:	7f7f0003          	lb	zero,2039(t5)
    1c3e:	329f 0003 3400      	0x34000003329f
    1c44:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1c48:	5f00                	lw	s0,56(a4)
	...
    1c52:	0294                	addi	a3,sp,320
    1c54:	0000                	unimp
    1c56:	02a6                	slli	t0,t0,0x9
    1c58:	0000                	unimp
    1c5a:	0001                	nop
    1c5c:	a65f 0002 ac00      	0xac000002a65f
    1c62:	0002                	c.slli64	zero
    1c64:	0300                	addi	s0,sp,384
    1c66:	7f00                	flw	fs0,56(a4)
    1c68:	9f01                	0x9f01
    1c6a:	02ac                	addi	a1,sp,328
    1c6c:	0000                	unimp
    1c6e:	02b8                	addi	a4,sp,328
    1c70:	0000                	unimp
    1c72:	0001                	nop
    1c74:	bc5f 0002 ce00      	0xce000002bc5f
    1c7a:	0002                	c.slli64	zero
    1c7c:	0100                	addi	s0,sp,128
    1c7e:	5f00                	lw	s0,56(a4)
    1c80:	02ce                	slli	t0,t0,0x13
    1c82:	0000                	unimp
    1c84:	02d4                	addi	a3,sp,324
    1c86:	0000                	unimp
    1c88:	017f0003          	lb	zero,23(t5)
    1c8c:	d49f 0002 e000      	0xe0000002d49f
    1c92:	0002                	c.slli64	zero
    1c94:	0100                	addi	s0,sp,128
    1c96:	5f00                	lw	s0,56(a4)
	...
    1ca0:	026a                	slli	tp,tp,0x1a
    1ca2:	0000                	unimp
    1ca4:	0294                	addi	a3,sp,320
    1ca6:	0000                	unimp
    1ca8:	0006                	c.slli	zero,0x1
    1caa:	0012dc03          	lhu	s8,1(t0)
    1cae:	9f00                	0x9f00
	...
    1cb8:	0192                	slli	gp,gp,0x4
    1cba:	0000                	unimp
    1cbc:	027e                	slli	tp,tp,0x1f
    1cbe:	0000                	unimp
    1cc0:	0002                	c.slli64	zero
    1cc2:	0086                	slli	ra,ra,0x1
    1cc4:	027e                	slli	tp,tp,0x1f
    1cc6:	0000                	unimp
    1cc8:	0286                	slli	t0,t0,0x1
    1cca:	0000                	unimp
    1ccc:	000e                	c.slli	zero,0x3
    1cce:	008a                	slli	ra,ra,0x2
    1cd0:	b491                	j	1714 <product2+0x1e0>
    1cd2:	067f                	0x67f
    1cd4:	2432                	fld	fs0,264(sp)
    1cd6:	f0090f23          	sb	zero,-226(s2)
    1cda:	1c1a                	slli	s8,s8,0x26
    1cdc:	0294                	addi	a3,sp,320
    1cde:	0000                	unimp
    1ce0:	0334                	addi	a3,sp,392
    1ce2:	0000                	unimp
    1ce4:	0002                	c.slli64	zero
    1ce6:	0086                	slli	ra,ra,0x1
	...
    1cf0:	0194                	addi	a3,sp,192
    1cf2:	0000                	unimp
    1cf4:	026e                	slli	tp,tp,0x1b
    1cf6:	0000                	unimp
    1cf8:	0002                	c.slli64	zero
    1cfa:	0072                	c.slli	zero,0x1c
    1cfc:	026e                	slli	tp,tp,0x1b
    1cfe:	0000                	unimp
    1d00:	0276                	slli	tp,tp,0x1d
    1d02:	0000                	unimp
    1d04:	000c                	0xc
    1d06:	0086                	slli	ra,ra,0x1
    1d08:	0082                	c.slli64	ra
    1d0a:	2432                	fld	fs0,264(sp)
    1d0c:	f0090f23          	sb	zero,-226(s2)
    1d10:	1c1a                	slli	s8,s8,0x26
    1d12:	0276                	slli	tp,tp,0x1d
    1d14:	0000                	unimp
    1d16:	027e                	slli	tp,tp,0x1f
    1d18:	0000                	unimp
    1d1a:	000d                	c.nop	3
    1d1c:	0086                	slli	ra,ra,0x1
    1d1e:	325d01f3          	0x325d01f3
    1d22:	2324                	fld	fs1,64(a4)
    1d24:	1af0090f          	0x1af0090f
    1d28:	7e1c                	flw	fa5,56(a2)
    1d2a:	0002                	c.slli64	zero
    1d2c:	8600                	0x8600
    1d2e:	0002                	c.slli64	zero
    1d30:	1900                	addi	s0,sp,176
    1d32:	8a00                	0x8a00
    1d34:	9100                	0x9100
    1d36:	7fb4                	flw	fa3,120(a5)
    1d38:	3206                	fld	ft4,96(sp)
    1d3a:	2324                	fld	fs1,64(a4)
    1d3c:	1af0090f          	0x1af0090f
    1d40:	f31c                	fsw	fa5,32(a4)
    1d42:	5d01                	li	s10,-32
    1d44:	2432                	fld	fs0,264(sp)
    1d46:	f0090f23          	sb	zero,-226(s2)
    1d4a:	1c1a                	slli	s8,s8,0x26
    1d4c:	0294                	addi	a3,sp,320
    1d4e:	0000                	unimp
    1d50:	0334                	addi	a3,sp,392
    1d52:	0000                	unimp
    1d54:	0002                	c.slli64	zero
    1d56:	0072                	c.slli	zero,0x1c
	...
    1d60:	0192                	slli	gp,gp,0x4
    1d62:	0000                	unimp
    1d64:	01ee                	slli	gp,gp,0x1b
    1d66:	0000                	unimp
    1d68:	0001                	nop
    1d6a:	ee69                	bnez	a2,1e44 <random_keys+0x2d0>
    1d6c:	0001                	nop
    1d6e:	f600                	fsw	fs0,40(a2)
    1d70:	0001                	nop
    1d72:	0300                	addi	s0,sp,384
    1d74:	8200                	0x8200
    1d76:	9f7f                	0x9f7f
    1d78:	01f6                	slli	gp,gp,0x1d
    1d7a:	0000                	unimp
    1d7c:	024a                	slli	tp,tp,0x12
    1d7e:	0000                	unimp
    1d80:	0001                	nop
    1d82:	4a69                	li	s4,26
    1d84:	0002                	c.slli64	zero
    1d86:	7600                	flw	fs0,40(a2)
    1d88:	0002                	c.slli64	zero
    1d8a:	0300                	addi	s0,sp,384
    1d8c:	8200                	0x8200
    1d8e:	9f7f                	0x9f7f
    1d90:	0276                	slli	tp,tp,0x1d
    1d92:	0000                	unimp
    1d94:	0294                	addi	a3,sp,320
    1d96:	0000                	unimp
    1d98:	0006                	c.slli	zero,0x1
    1d9a:	315d01f3          	0x315d01f3
    1d9e:	9f1c                	0x9f1c
    1da0:	0294                	addi	a3,sp,320
    1da2:	0000                	unimp
    1da4:	0334                	addi	a3,sp,392
    1da6:	0000                	unimp
    1da8:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1dac:	009f 0000 0000      	0x9f
    1db2:	0000                	unimp
    1db4:	3e00                	fld	fs0,56(a2)
    1db6:	0001                	nop
    1db8:	8200                	0x8200
    1dba:	0002                	c.slli64	zero
    1dbc:	0100                	addi	s0,sp,128
    1dbe:	6800                	flw	fs0,16(s0)
    1dc0:	0282                	c.slli64	t0
    1dc2:	0000                	unimp
    1dc4:	0294                	addi	a3,sp,320
    1dc6:	0000                	unimp
    1dc8:	b491000b          	0xb491000b
    1dcc:	067f                	0x67f
    1dce:	225d01f3          	0x225d01f3
    1dd2:	1c31                	addi	s8,s8,-20
    1dd4:	949f 0002 3400      	0x34000002949f
    1dda:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1dde:	6800                	flw	fs0,16(s0)
	...
    1de8:	0192                	slli	gp,gp,0x4
    1dea:	0000                	unimp
    1dec:	027c                	addi	a5,sp,268
    1dee:	0000                	unimp
    1df0:	0001                	nop
    1df2:	7c65                	lui	s8,0xffff9
    1df4:	0002                	c.slli64	zero
    1df6:	9400                	0x9400
    1df8:	0002                	c.slli64	zero
    1dfa:	0700                	addi	s0,sp,896
    1dfc:	9100                	0x9100
    1dfe:	7fb4                	flw	fa3,120(a5)
    1e00:	3106                	fld	ft2,96(sp)
    1e02:	9f1c                	0x9f1c
    1e04:	0294                	addi	a3,sp,320
    1e06:	0000                	unimp
    1e08:	0334                	addi	a3,sp,392
    1e0a:	0000                	unimp
    1e0c:	0001                	nop
    1e0e:	0065                	c.nop	25
    1e10:	0000                	unimp
    1e12:	0000                	unimp
    1e14:	0000                	unimp
    1e16:	9200                	0x9200
    1e18:	0001                	nop
    1e1a:	ee00                	fsw	fs0,24(a2)
    1e1c:	0001                	nop
    1e1e:	0100                	addi	s0,sp,128
    1e20:	6900                	flw	fs0,16(a0)
    1e22:	01ee                	slli	gp,gp,0x1b
    1e24:	0000                	unimp
    1e26:	01f6                	slli	gp,gp,0x1d
    1e28:	0000                	unimp
    1e2a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1e2e:	f69f 0001 4a00      	0x4a000001f69f
    1e34:	0002                	c.slli64	zero
    1e36:	0100                	addi	s0,sp,128
    1e38:	6900                	flw	fs0,16(a0)
    1e3a:	024a                	slli	tp,tp,0x12
    1e3c:	0000                	unimp
    1e3e:	0276                	slli	tp,tp,0x1d
    1e40:	0000                	unimp
    1e42:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1e46:	769f 0002 9400      	0x94000002769f
    1e4c:	0002                	c.slli64	zero
    1e4e:	0600                	addi	s0,sp,768
    1e50:	f300                	fsw	fs0,32(a4)
    1e52:	5d01                	li	s10,-32
    1e54:	1c31                	addi	s8,s8,-20
    1e56:	949f 0002 3400      	0x34000002949f
    1e5c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1e60:	8200                	0x8200
    1e62:	9f7f                	0x9f7f
	...
    1e6c:	0092                	slli	ra,ra,0x4
    1e6e:	0000                	unimp
    1e70:	00ea                	slli	ra,ra,0x1a
    1e72:	0000                	unimp
    1e74:	0001                	nop
    1e76:	0000ea5b          	0xea5b
    1e7a:	f200                	fsw	fs0,32(a2)
    1e7c:	0000                	unimp
    1e7e:	0400                	addi	s0,sp,512
    1e80:	f300                	fsw	fs0,32(a4)
    1e82:	5b01                	li	s6,-32
    1e84:	f29f 0000 2800      	0x28000000f29f
    1e8a:	0001                	nop
    1e8c:	0100                	addi	s0,sp,128
    1e8e:	5b00                	lw	s0,48(a4)
	...
    1e98:	0092                	slli	ra,ra,0x4
    1e9a:	0000                	unimp
    1e9c:	00aa                	slli	ra,ra,0xa
    1e9e:	0000                	unimp
    1ea0:	0001                	nop
    1ea2:	aa5c                	fsd	fa5,144(a2)
    1ea4:	0000                	unimp
    1ea6:	b200                	fsd	fs0,32(a2)
    1ea8:	0000                	unimp
    1eaa:	0400                	addi	s0,sp,512
    1eac:	f300                	fsw	fs0,32(a4)
    1eae:	5c01                	li	s8,-32
    1eb0:	b29f 0000 c400      	0xc4000000b29f
    1eb6:	0000                	unimp
    1eb8:	0100                	addi	s0,sp,128
    1eba:	5c00                	lw	s0,56(s0)
    1ebc:	00c4                	addi	s1,sp,68
    1ebe:	0000                	unimp
    1ec0:	00d4                	addi	a3,sp,68
    1ec2:	0000                	unimp
    1ec4:	0004                	0x4
    1ec6:	9f5c01f3          	0x9f5c01f3
    1eca:	00d4                	addi	a3,sp,68
    1ecc:	0000                	unimp
    1ece:	00e6                	slli	ra,ra,0x19
    1ed0:	0000                	unimp
    1ed2:	0001                	nop
    1ed4:	e65c                	fsw	fa5,12(a2)
    1ed6:	0000                	unimp
    1ed8:	0400                	addi	s0,sp,512
    1eda:	0001                	nop
    1edc:	0400                	addi	s0,sp,512
    1ede:	f300                	fsw	fs0,32(a4)
    1ee0:	5c01                	li	s8,-32
    1ee2:	049f 0001 2800      	0x28000001049f
    1ee8:	0001                	nop
    1eea:	0100                	addi	s0,sp,128
    1eec:	5c00                	lw	s0,56(s0)
	...
    1ef6:	0092                	slli	ra,ra,0x4
    1ef8:	0000                	unimp
    1efa:	00ac                	addi	a1,sp,72
    1efc:	0000                	unimp
    1efe:	0002                	c.slli64	zero
    1f00:	9f30                	0x9f30
    1f02:	00ac                	addi	a1,sp,72
    1f04:	0000                	unimp
    1f06:	00b2                	slli	ra,ra,0xc
    1f08:	0000                	unimp
    1f0a:	0001                	nop
    1f0c:	b25f 0000 be00      	0xbe000000b25f
    1f12:	0000                	unimp
    1f14:	0200                	addi	s0,sp,256
    1f16:	3000                	fld	fs0,32(s0)
    1f18:	be9f 0000 ca00      	0xca000000be9f
    1f1e:	0000                	unimp
    1f20:	0100                	addi	s0,sp,128
    1f22:	5f00                	lw	s0,56(a4)
    1f24:	00d4                	addi	a3,sp,68
    1f26:	0000                	unimp
    1f28:	00e0                	addi	s0,sp,76
    1f2a:	0000                	unimp
    1f2c:	0002                	c.slli64	zero
    1f2e:	9f30                	0x9f30
    1f30:	00e0                	addi	s0,sp,76
    1f32:	0000                	unimp
    1f34:	00e6                	slli	ra,ra,0x19
    1f36:	0000                	unimp
    1f38:	0001                	nop
    1f3a:	f25f 0000 2800      	0x28000000f25f
    1f40:	0001                	nop
    1f42:	0100                	addi	s0,sp,128
    1f44:	5f00                	lw	s0,56(a4)
	...
    1f4e:	00f6                	slli	ra,ra,0x1d
    1f50:	0000                	unimp
    1f52:	00fc                	addi	a5,sp,76
    1f54:	0000                	unimp
    1f56:	0006                	c.slli	zero,0x1
    1f58:	007e007b          	0x7e007b
    1f5c:	9f22                	add	t5,t5,s0
    1f5e:	00fc                	addi	a5,sp,76
    1f60:	0000                	unimp
    1f62:	0100                	addi	s0,sp,128
    1f64:	0000                	unimp
    1f66:	0001                	nop
    1f68:	005e                	c.slli	zero,0x17
    1f6a:	0000                	unimp
    1f6c:	0000                	unimp
    1f6e:	0000                	unimp
    1f70:	f600                	fsw	fs0,40(a2)
    1f72:	0000                	unimp
    1f74:	fa00                	fsw	fs0,48(a2)
    1f76:	0000                	unimp
    1f78:	0600                	addi	s0,sp,768
    1f7a:	7a00                	flw	fs0,48(a2)
    1f7c:	7e00                	flw	fs0,56(a2)
    1f7e:	2200                	fld	fs0,0(a2)
    1f80:	fa9f 0000 0000      	0xfa9f
    1f86:	0001                	nop
    1f88:	0100                	addi	s0,sp,128
    1f8a:	5d00                	lw	s0,56(a0)
	...
    1f94:	0108                	addi	a0,sp,128
    1f96:	0000                	unimp
    1f98:	010e                	slli	sp,sp,0x3
    1f9a:	0000                	unimp
    1f9c:	0006                	c.slli	zero,0x1
    1f9e:	007e007b          	0x7e007b
    1fa2:	9f22                	add	t5,t5,s0
    1fa4:	010e                	slli	sp,sp,0x3
    1fa6:	0000                	unimp
    1fa8:	0112                	slli	sp,sp,0x4
    1faa:	0000                	unimp
    1fac:	0001                	nop
    1fae:	005e                	c.slli	zero,0x17
    1fb0:	0000                	unimp
    1fb2:	0000                	unimp
    1fb4:	0000                	unimp
    1fb6:	0800                	addi	s0,sp,16
    1fb8:	0001                	nop
    1fba:	0c00                	addi	s0,sp,528
    1fbc:	0001                	nop
    1fbe:	0600                	addi	s0,sp,768
    1fc0:	7a00                	flw	fs0,48(a2)
    1fc2:	7e00                	flw	fs0,56(a2)
    1fc4:	2200                	fld	fs0,0(a2)
    1fc6:	0c9f 0001 1200      	0x120000010c9f
    1fcc:	0001                	nop
    1fce:	0100                	addi	s0,sp,128
    1fd0:	6000                	flw	fs0,0(s0)
	...
    1fda:	011a                	slli	sp,sp,0x6
    1fdc:	0000                	unimp
    1fde:	0120                	addi	s0,sp,136
    1fe0:	0000                	unimp
    1fe2:	0006                	c.slli	zero,0x1
    1fe4:	007e007b          	0x7e007b
    1fe8:	9f22                	add	t5,t5,s0
    1fea:	0120                	addi	s0,sp,136
    1fec:	0000                	unimp
    1fee:	0124                	addi	s1,sp,136
    1ff0:	0000                	unimp
    1ff2:	0001                	nop
    1ff4:	005e                	c.slli	zero,0x17
    1ff6:	0000                	unimp
    1ff8:	0000                	unimp
    1ffa:	0000                	unimp
    1ffc:	1a00                	addi	s0,sp,304
    1ffe:	0001                	nop
    2000:	1e00                	addi	s0,sp,816
    2002:	0001                	nop
    2004:	0600                	addi	s0,sp,768
    2006:	7a00                	flw	fs0,48(a2)
    2008:	7e00                	flw	fs0,56(a2)
    200a:	2200                	fld	fs0,0(a2)
    200c:	1e9f 0001 2400      	0x240000011e9f
    2012:	0001                	nop
    2014:	0100                	addi	s0,sp,128
    2016:	6000                	flw	fs0,0(s0)
	...
    2020:	008c                	addi	a1,sp,64
    2022:	0000                	unimp
    2024:	0090                	addi	a2,sp,64
    2026:	0000                	unimp
    2028:	0001                	nop
    202a:	005a                	c.slli	zero,0x16
    202c:	0000                	unimp
    202e:	0000                	unimp
    2030:	0000                	unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0dc8                	addi	a0,sp,724
  16:	0000                	unimp
  18:	1050                	addi	a2,sp,36
  1a:	0000                	unimp
  1c:	00f8                	addi	a4,sp,76
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1a49                	addi	s4,s4,-14
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0e54                	addi	a3,sp,788
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0e54                	addi	a3,sp,788
   6:	0000                	unimp
   8:	1050                	addi	a2,sp,36
   a:	0000                	unimp
   c:	1148                	addi	a0,sp,164
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0e54                	addi	a3,sp,788
  22:	0000                	unimp
  24:	0eca                	slli	t4,t4,0x12
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000028f3          	csrr	a7,ustatus
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x48>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x2c>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x1fe>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xa2>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x56>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
      86:	6972                	flw	fs2,28(sp)
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x12>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x8e>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
            a1[length-2] = a2[length-2];
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
} //end of function
      f0:	6975                	lui	s2,0x1d
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    asm volatile(
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
            for (i = 0; i < (length / 3); i++) {
     102:	008c                	addi	a1,sp,64
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
    asm volatile(
     10a:	0305                	addi	t1,t1,1
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
     110:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
    asm volatile(
     11a:	00090103          	lb	sp,0(s2) # b000 <_stack_len+0x7000>
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult2+0x1c>
     122:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0902                	c.slli64	s2
     126:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0x88>
     14c:	0e090303          	lb	t1,224(s2)
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
    int line[size_b][size_a + size_b];
     15e:	0501                	addi	a0,a0,0
    int pola[size_a];
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
    int line[size_b][size_a + size_b];
     164:	0601                	addi	a2,a2,0
    int pola[size_a];
     166:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     16a:	0100                	addi	s0,sp,128
    int pola[size_a];
     16c:	2505                	jal	78c <ext_euclid+0xaa>
    int line[size_b][size_a + size_b];
     16e:	06090b03          	lb	s6,96(s2)
    int pola[size_a];
     172:	0100                	addi	s0,sp,128
    int polb[size_b];
     174:	2905                	jal	5a4 <polydiv+0x100>
     176:	04090003          	lb	zero,64(s2)
    int pola[size_a];
     17a:	0100                	addi	s0,sp,128
    int polb[size_b];
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
            line[i][j] = 0;
     182:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
    int pola[size_a];
     188:	0104                	addi	s1,sp,128
     18a:	0306                	slli	t1,t1,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	0900                	addi	s0,sp,144
    int line[size_b][size_a + size_b];
     18e:	0004                	0x4
     190:	0501                	addi	a0,a0,0
    int polb[size_b];
     192:	000d                	c.nop	3
            line[i][j] = 0;
     194:	0402                	c.slli64	s0
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     19c:	0100                	addi	s0,sp,128
            product[j] = 0;
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0) # 17000 <_stack_start+0x7000>
     1a4:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1a6:	061e                	slli	a2,a2,0x7
     1a8:	00090003          	lb	zero,0(s2)
    array_equ(pola,a,size_a); 
     1ac:	0100                	addi	s0,sp,128
     1ae:	1a05                	addi	s4,s4,-31
     1b0:	0a090003          	lb	zero,160(s2)
     1b4:	0100                	addi	s0,sp,128
     1b6:	2505                	jal	7d6 <ext_euclid+0xf4>
     1b8:	08097703          	0x8097703
    for (i = 0; i < size_a; ++i){
     1bc:	0100                	addi	s0,sp,128
     1be:	2905                	jal	5ee <polydiv+0x14a>
     1c0:	04090003          	lb	zero,64(s2)
     1c4:	0100                	addi	s0,sp,128
     1c6:	1405                	addi	s0,s0,-31
     1c8:	04090003          	lb	zero,64(s2)
    array_equ(polb,b,size_b);
     1cc:	0100                	addi	s0,sp,128
     1ce:	1905                	addi	s2,s2,-31
     1d0:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     1d2:	0104                	addi	s1,sp,128
     1d4:	0306                	slli	t1,t1,0x1
     1d6:	0900                	addi	s0,sp,144
     1d8:	0004                	0x4
    if(star_mult == 1){
     1da:	0501                	addi	a0,a0,0
     1dc:	000d                	c.nop	3
     1de:	0402                	c.slli64	s0
     1e0:	0601                	addi	a2,a2,0
     1e2:	00090003          	lb	zero,0(s2)
     1e6:	0100                	addi	s0,sp,128
     1e8:	0306                	slli	t1,t1,0x1
     1ea:	00040903          	lb	s2,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	0501                	addi	a0,a0,0
     1f0:	061e                	slli	a2,a2,0x7
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	00090003          	lb	zero,0(s2)
            product[j] = 0;
     1f6:	0100                	addi	s0,sp,128
     1f8:	0d05                	addi	s10,s10,1
     1fa:	0306                	slli	t1,t1,0x1
            line[i][j] = 0;
     1fc:	00020907          	0x20907
            product[j] = 0;
     200:	0501                	addi	a0,a0,0
     202:	061e                	slli	a2,a2,0x7
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	00090003          	lb	zero,0(s2)
     208:	0100                	addi	s0,sp,128
     20a:	1a05                	addi	s4,s4,-31
    for (i = 0; i < size_b; ++i){
     20c:	06090003          	lb	zero,96(s2)
     210:	0100                	addi	s0,sp,128
     212:	0205                	addi	tp,tp,1
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0306                	slli	t1,t1,0x1
     216:	0901                	addi	s2,s2,0
            pola[i] = pola[i] + mod;
     218:	0004                	0x4
     21a:	0501                	addi	a0,a0,0
        while (pola[i] < 0){
     21c:	0601                	addi	a2,a2,0
     21e:	00090203          	lb	tp,0(s2)
        pola[i] = pola[i] % mod;
     222:	0100                	addi	s0,sp,128
     224:	1105                	addi	sp,sp,-31
    for (i = 0; i < size_a; ++i){
     226:	0200                	addi	s0,sp,256
     228:	0304                	addi	s1,sp,384
        pola[i] = pola[i] % mod;
     22a:	0306                	slli	t1,t1,0x1
     22c:	0002096f          	jal	s2,2022c <_stack_start+0x1022c>
            polb[i] = polb[i] + mod;
     230:	0501                	addi	a0,a0,0
     232:	0005                	c.nop	1
        while (polb[i] < 0){
     234:	0402                	c.slli64	s0
     236:	096e0303          	lb	t1,150(t3) # 1a096 <_stack_start+0xa096>
        polb[i] = polb[i] % mod;
     23a:	0004                	0x4
     23c:	0001                	nop
    for (i = 0; i < size_b; ++i){
     23e:	0402                	c.slli64	s0
     240:	09090303          	lb	t1,144(s2)
        polb[i] = polb[i] % mod;
     244:	000a                	c.slli	zero,0x2
    for (i = 0; i < size_b; ++i){
     246:	0501                	addi	a0,a0,0
    if(star_mult == 1){
     248:	0402002b          	0x402002b
        for (j = size_b -1; j >= 0; j = j-1){
     24c:	09080303          	lb	t1,144(a6)
    for (i = 0; i < size_b; ++i){
     250:	0000                	unimp
     252:	0501                	addi	a0,a0,0
     254:	002c                	addi	a1,sp,8
     256:	0402                	c.slli64	s0
     258:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     25c:	0009                	c.nop	2
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	0100                	addi	s0,sp,128
     260:	1105                	addi	sp,sp,-31
     262:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0304                	addi	s1,sp,384
     266:	0306                	slli	t1,t1,0x1
     268:	0906                	slli	s2,s2,0x1
}
     26a:	0004                	0x4
     26c:	0501                	addi	a0,a0,0
     26e:	0005                	c.nop	1
     270:	0402                	c.slli64	s0
     272:	09690303          	lb	t1,150(s2)
     276:	0004                	0x4
     278:	0001                	nop
     27a:	0402                	c.slli64	s0
     27c:	09090303          	lb	t1,144(s2)
     280:	000a                	c.slli	zero,0x2
     282:	0501                	addi	a0,a0,0
     284:	0402002f          	0x402002f
     288:	090d0303          	lb	t1,144(s10)
     28c:	0000                	unimp
     28e:	0501                	addi	a0,a0,0
     290:	0030                	addi	a2,sp,8
     292:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	00030603          	lb	a2,0(t1)
     298:	0009                	c.nop	2
     29a:	0100                	addi	s0,sp,128
     29c:	1105                	addi	sp,sp,-31
     29e:	0200                	addi	s0,sp,256
     2a0:	0304                	addi	s1,sp,384
     2a2:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	00040907          	0x40907
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a8:	0501                	addi	a0,a0,0
     2aa:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	0402                	c.slli64	s0
     2ae:	09630303          	lb	t1,150(t1)
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	0004                	0x4
     2b4:	0001                	nop
     2b6:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	09090303          	lb	t1,144(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	000a                	c.slli	zero,0x2
     2be:	0501                	addi	a0,a0,0
     2c0:	0402002f          	0x402002f
     2c4:	09130303          	lb	t1,145(t1)
     2c8:	0000                	unimp
     2ca:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	0030                	addi	a2,sp,8
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	0402                	c.slli64	s0
     2d0:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0009                	c.nop	2
     2d6:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	4e05                	li	t3,1
     2da:	0306                	slli	t1,t1,0x1
     2dc:	090d                	addi	s2,s2,3
     2de:	0004                	0x4
            line[i][j] = line[i][j] % mod;
     2e0:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0305                	addi	t1,t1,1
     2e4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
            line[i][j] = line[i][j] % mod;
     2e8:	0501                	addi	a0,a0,0
     2ea:	064e                	slli	a2,a2,0x13
     2ec:	00097d03          	0x97d03
        for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2f2:	1d05                	addi	s10,s10,-31
     2f4:	08090303          	lb	t1,128(s2)
     2f8:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	4e05                	li	t3,1
     2fc:	06097d03          	0x6097d03
            product[j] += line[i][j];
     300:	0100                	addi	s0,sp,128
     302:	0905                	addi	s2,s2,1
     304:	04090303          	lb	t1,64(s2)
        for(i = 0; i < size_b; ++i){
     308:	0100                	addi	s0,sp,128
            product[j] += line[i][j];
     30a:	4e05                	li	t3,1
     30c:	0c097d03          	0xc097d03
     310:	0100                	addi	s0,sp,128
     312:	14090003          	lb	zero,320(s2)
        for(i = 0; i < size_b; ++i){
     316:	0100                	addi	s0,sp,128
     318:	0905                	addi	s2,s2,1
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	04090303          	lb	t1,64(s2)
     31e:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     320:	02090303          	lb	t1,32(s2)
        product[j] = product[j] % mod;
     324:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	04097d03          	0x4097d03
        product[j] = product[j] % mod;
     32a:	0100                	addi	s0,sp,128
     32c:	02090303          	lb	t1,32(s2)
     330:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	02097d03          	0x2097d03
    int line[size_b][size_a + size_b];
     336:	0100                	addi	s0,sp,128
     338:	04090303          	lb	t1,64(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	0100                	addi	s0,sp,128
     33e:	02097d03          	0x2097d03
     342:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     344:	02090303          	lb	t1,32(s2)
     348:	0100                	addi	s0,sp,128
     34a:	04090103          	lb	sp,64(s2)
     34e:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	06097f03          	0x6097f03
     354:	0100                	addi	s0,sp,128
     356:	02090103          	lb	sp,32(s2)
     35a:	0100                	addi	s0,sp,128
     35c:	1405                	addi	s0,s0,-31
     35e:	04090503          	lb	a0,64(s2)
    int line[size_b][size_a + size_b];
     362:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	4e05                	li	t3,1
     366:	04097403          	0x4097403
    int line[size_b][size_a + size_b];
     36a:	0100                	addi	s0,sp,128
     36c:	0905                	addi	s2,s2,1
    int pola[size_a];
     36e:	04090603          	lb	a2,64(s2)
     372:	0100                	addi	s0,sp,128
     374:	4e05                	li	t3,1
    int line[size_b][size_a + size_b];
     376:	04097a03          	0x4097a03
    int pola[size_a];
     37a:	0100                	addi	s0,sp,128
    int polb[size_b];
     37c:	0905                	addi	s2,s2,1
     37e:	02090303          	lb	t1,32(s2)
    int pola[size_a];
     382:	0100                	addi	s0,sp,128
    int polb[size_b];
     384:	0505                	addi	a0,a0,1
     386:	0306                	slli	t1,t1,0x1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0901                	addi	s2,s2,0
     38a:	0004                	0x4
    int line[size_b][size_a + size_b];
     38c:	0301                	addi	t1,t1,0
     38e:	0901                	addi	s2,s2,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	0000                	unimp
    int pola[size_a];
     392:	0301                	addi	t1,t1,0
     394:	0901                	addi	s2,s2,0
    int polb[size_b];
     396:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     398:	0301                	addi	t1,t1,0
     39a:	0901                	addi	s2,s2,0
     39c:	0000                	unimp
            product2[j] = 0;
     39e:	0501                	addi	a0,a0,0
     3a0:	0609                	addi	a2,a2,2
     3a2:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     3a6:	0100                	addi	s0,sp,128
     3a8:	0505                	addi	a0,a0,1
    array_equ(pola,a,size_a);
     3aa:	0306                	slli	t1,t1,0x1
     3ac:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     3b0:	0501                	addi	a0,a0,0
     3b2:	0614                	addi	a3,sp,768
     3b4:	00090203          	lb	tp,0(s2)
    array_equ(polb,b,size_b);
     3b8:	0100                	addi	s0,sp,128
     3ba:	0505                	addi	a0,a0,1
     3bc:	06097e03          	0x6097e03
     3c0:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     3c2:	0c05                	addi	s8,s8,1
     3c4:	02090003          	lb	zero,32(s2)
     3c8:	0100                	addi	s0,sp,128
     3ca:	1805                	addi	a6,a6,-31
     3cc:	02090303          	lb	t1,32(s2)
     3d0:	0100                	addi	s0,sp,128
     3d2:	1105                	addi	sp,sp,-31
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	0200                	addi	s0,sp,256
     3d6:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0306                	slli	t1,t1,0x1
     3da:	097d                	addi	s2,s2,31
            product2[j] = 0;
     3dc:	0008                	0x8
     3de:	0501                	addi	a0,a0,0
     3e0:	0005                	c.nop	1
            line[i][j] = 0;
     3e2:	0402                	c.slli64	s0
     3e4:	0601                	addi	a2,a2,0
            product2[j] = 0;
     3e6:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0100                	addi	s0,sp,128
     3ec:	04091203          	lh	tp,64(s2)
     3f0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     3f2:	0306                	slli	t1,t1,0x1
     3f4:	0900                	addi	s0,sp,144
     3f6:	000a                	c.slli	zero,0x2
     3f8:	0301                	addi	t1,t1,0
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	0904                	addi	s1,sp,144
     3fc:	0006                	c.slli	zero,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	0501                	addi	a0,a0,0
     400:	060c                	addi	a1,sp,768
     402:	0a090003          	lb	zero,160(s2)
     406:	0100                	addi	s0,sp,128
     408:	1105                	addi	sp,sp,-31
     40a:	0200                	addi	s0,sp,256
     40c:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	0900                	addi	s0,sp,144
     412:	0002                	c.slli64	zero
     414:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0005                	c.nop	1
     418:	0402                	c.slli64	s0
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0601                	addi	a2,a2,0
     41c:	00090003          	lb	zero,0(s2)
     420:	0100                	addi	s0,sp,128
     422:	0306                	slli	t1,t1,0x1
        for(j=0;j<size_a+size_b-1;++j){
     424:	00040907          	0x40907
    for(i=0;i<size_b;++i){
     428:	0301                	addi	t1,t1,0
     42a:	0902                	c.slli64	s2
     42c:	0008                	0x8
     42e:	0501                	addi	a0,a0,0
     430:	060c                	addi	a1,sp,768
     432:	02090003          	lb	zero,32(s2)
        for(j=0;j<size_a+size_b-1;++j){
     436:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	1105                	addi	sp,sp,-31
     43a:	0200                	addi	s0,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	0104                	addi	s1,sp,128
     43e:	0306                	slli	t1,t1,0x1
     440:	0900                	addi	s0,sp,144
     442:	0002                	c.slli64	zero
     444:	0501                	addi	a0,a0,0
     446:	0005                	c.nop	1
     448:	0402                	c.slli64	s0
     44a:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     450:	0100                	addi	s0,sp,128
     452:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	0004090b          	0x4090b
        for (j = size_b -1; j >= 0; j = j-1){
     458:	0501                	addi	a0,a0,0
     45a:	00030607          	0x30607
     45e:	0009                	c.nop	2
            product2[j] += line[i][j];
     460:	0100                	addi	s0,sp,128
     462:	1d05                	addi	s10,s10,-31
        for(j=0;j<size_a+size_b-1;++j){
     464:	0200                	addi	s0,sp,256
     466:	0104                	addi	s1,sp,128
            product2[j] += line[i][j];
     468:	0306                	slli	t1,t1,0x1
     46a:	0908                	addi	a0,sp,144
     46c:	0014                	0x14
        for(j=0;j<size_a+size_b-1;++j){
     46e:	0501                	addi	a0,a0,0
     470:	0009                	c.nop	2
     472:	0402                	c.slli64	s0
    for(i=0;i<size_b;++i){
     474:	0601                	addi	a2,a2,0
     476:	00090003          	lb	zero,0(s2)
}
     47a:	0100                	addi	s0,sp,128
     47c:	1405                	addi	s0,s0,-31
     47e:	04090103          	lb	sp,64(s2)
     482:	0100                	addi	s0,sp,128
     484:	0d05                	addi	s10,s10,1
     486:	0200                	addi	s0,sp,256
     488:	0304                	addi	s1,sp,384
     48a:	0306                	slli	t1,t1,0x1
     48c:	0004094f          	fnmadd.s	fs2,fs0,ft0,ft0,rne
     490:	0501                	addi	a0,a0,0
     492:	0018                	0x18
     494:	0402                	c.slli64	s0
     496:	01030603          	lb	a2,16(t1)
     49a:	0009                	c.nop	2
     49c:	0100                	addi	s0,sp,128
     49e:	0200                	addi	s0,sp,256
     4a0:	0304                	addi	s1,sp,384
     4a2:	06097f03          	0x6097f03
    int v[size_N];
     4a6:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4a8:	0d05                	addi	s10,s10,1
    int v[size_N];
     4aa:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	0304                	addi	s1,sp,384
     4ae:	0306                	slli	t1,t1,0x1
     4b0:	0901                	addi	s2,s2,0
     4b2:	0004                	0x4
     4b4:	0501                	addi	a0,a0,0
     4b6:	0018                	0x18
     4b8:	0402                	c.slli64	s0
     4ba:	00030603          	lb	a2,0(t1)
     4be:	0009                	c.nop	2
     4c0:	0100                	addi	s0,sp,128
     4c2:	2c05                	jal	6f2 <ext_euclid+0x10>
    int v[size_N];
     4c4:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	0304                	addi	s1,sp,384
     4c8:	0306                	slli	t1,t1,0x1
    int v[size_N];
     4ca:	097e                	slli	s2,s2,0x1f
     4cc:	0004                	0x4
     4ce:	0501                	addi	a0,a0,0
    int q[size_N];
     4d0:	0014                	0x14
     4d2:	0402                	c.slli64	s0
     4d4:	0301                	addi	t1,t1,0
    int num_temp[size_N];
     4d6:	0900                	addi	s0,sp,144
     4d8:	0004                	0x4
    int denum_temp[size_D];
     4da:	0501                	addi	a0,a0,0
     4dc:	0009                	c.nop	2
     4de:	0402                	c.slli64	s0
    int num_temp[size_N];
     4e0:	0601                	addi	a2,a2,0
    int denum_temp[size_D];
     4e2:	00090003          	lb	zero,0(s2)
     4e6:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	1d05                	addi	s10,s10,-31
     4ea:	0200                	addi	s0,sp,256
    int v[size_N];
     4ec:	0204                	addi	s1,sp,256
     4ee:	0306                	slli	t1,t1,0x1
    array_equ(num_temp,num,size_N);
     4f0:	097f                	0x97f
     4f2:	0004                	0x4
     4f4:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	0103060f          	0x103060f
    int denum_temp[size_D];
     4fa:	0809                	addi	a6,a6,2
     4fc:	0100                	addi	s0,sp,128
    array_equ(num_temp,num,size_N);
     4fe:	0d05                	addi	s10,s10,1
    int denum_temp[size_D];
     500:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     502:	00040917          	auipc	s2,0x40
     506:	0501                	addi	a0,a0,0
     508:	061f 0003 0009      	0x90003061f
        array_equ(denum_temp,denum,size_D);
     50e:	0100                	addi	s0,sp,128
     510:	1505                	addi	a0,a0,-31
     512:	02090003          	lb	zero,32(s2) # 40522 <_stack_start+0x30522>
    for (i = 0; i < size_D; ++i) {
     516:	0100                	addi	s0,sp,128
     518:	0f05                	addi	t5,t5,1
     51a:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     51c:	097f                	0x97f
     51e:	0002                	c.slli64	zero
     520:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0614                	addi	a3,sp,768
     524:	00090003          	lb	zero,0(s2)
     528:	0100                	addi	s0,sp,128
     52a:	0f05                	addi	t5,t5,1
     52c:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size_N; ++i){
     530:	0100                	addi	s0,sp,128
        if ( (b_N*u)%mod == 1 )
     532:	0905                	addi	s2,s2,1
    for (u = 0; u < mod; ++u){
     534:	0200                	addi	s0,sp,256
     536:	0204                	addi	s1,sp,256
     538:	0306                	slli	t1,t1,0x1
     53a:	00040903          	lb	s2,0(s0)
            num_temp[i] = num_temp[i] + mod;
     53e:	0501                	addi	a0,a0,0
        while (num_temp[i] < 0) {
     540:	0402001b          	0x402001b
     544:	0602                	c.slli64	a2
        num_temp[i] = num_temp[i] % mod;
     546:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_N; ++i){
     54a:	0100                	addi	s0,sp,128
     54c:	1d05                	addi	s10,s10,-31
        num_temp[i] = num_temp[i] % mod;
     54e:	0200                	addi	s0,sp,256
     550:	0204                	addi	s1,sp,256
    for (i = 0; i < size_N; ++i){
     552:	04097c03          	0x4097c03
            denum_temp[i] = denum_temp[i] + mod;
     556:	0100                	addi	s0,sp,128
        while (denum_temp[i] < 0) {
     558:	1105                	addi	sp,sp,-31
     55a:	0200                	addi	s0,sp,256
     55c:	0204                	addi	s1,sp,256
        denum_temp[i] = denum_temp[i] % mod;
     55e:	04090403          	lb	s0,64(s2)
    for (i = 0; i < size_D; ++i) {
     562:	0100                	addi	s0,sp,128
     564:	1d05                	addi	s10,s10,-31
        denum_temp[i] = denum_temp[i] % mod;
     566:	0200                	addi	s0,sp,256
     568:	0204                	addi	s1,sp,256
    for (i = 0; i < size_D; ++i) {
     56a:	0306                	slli	t1,t1,0x1
        q[i] = 0;
     56c:	097c                	addi	a5,sp,156
     56e:	0004                	0x4
     570:	0501                	addi	a0,a0,0
     572:	030d                	addi	t1,t1,3
        v[i] = 0;
     574:	0002090b          	0x2090b
        q[i] = 0;
     578:	0501                	addi	a0,a0,0
        v[i] = 0;
     57a:	061f 0003 0009      	0x90003061f
    for (i = 0; i < size_N; ++i){
     580:	0100                	addi	s0,sp,128
        if( denum_temp[i] != 0 )
     582:	1505                	addi	a0,a0,-31
    for (i = size_D-1; i >= 0; i = i-1){
     584:	02090003          	lb	zero,32(s2)
        if ( (b_N*u)%mod == 1 )
     588:	0100                	addi	s0,sp,128
     58a:	0f05                	addi	t5,t5,1
     58c:	0306                	slli	t1,t1,0x1
     58e:	097f                	0x97f
     590:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     592:	0501                	addi	a0,a0,0
     594:	0614                	addi	a3,sp,768
        if( num_temp[i] != 0 )
     596:	00090003          	lb	zero,0(s2)
    for (i = size_N-1; i >= 0; i = i-1){
     59a:	0100                	addi	s0,sp,128
     59c:	0f05                	addi	t5,t5,1
     59e:	02090003          	lb	zero,32(s2)
     5a2:	0100                	addi	s0,sp,128
     5a4:	0905                	addi	s2,s2,1
    while (d >= d2){
     5a6:	0200                	addi	s0,sp,256
     5a8:	0204                	addi	s1,sp,256
	array_equ(result,q,size_N);
     5aa:	0306                	slli	t1,t1,0x1
     5ac:	00040903          	lb	s2,0(s0)
     5b0:	0501                	addi	a0,a0,0
     5b2:	0402001b          	0x402001b
     5b6:	0602                	c.slli64	a2
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	00090003          	lb	zero,0(s2)
        result[i] = num_temp[i-size_N];
     5bc:	0100                	addi	s0,sp,128
     5be:	1d05                	addi	s10,s10,-31
     5c0:	0200                	addi	s0,sp,256
     5c2:	0204                	addi	s1,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	04097c03          	0x4097c03
}
     5c8:	0100                	addi	s0,sp,128
     5ca:	1105                	addi	sp,sp,-31
     5cc:	0200                	addi	s0,sp,256
     5ce:	0204                	addi	s1,sp,256
     5d0:	04090403          	lb	s0,64(s2)
     5d4:	0100                	addi	s0,sp,128
     5d6:	1d05                	addi	s10,s10,-31
     5d8:	0200                	addi	s0,sp,256
     5da:	0204                	addi	s1,sp,256
     5dc:	0306                	slli	t1,t1,0x1
     5de:	097c                	addi	a5,sp,156
     5e0:	0004                	0x4
     5e2:	0501                	addi	a0,a0,0
     5e4:	0b030607          	0xb030607
     5e8:	0209                	addi	tp,tp,2
     5ea:	0100                	addi	s0,sp,128
     5ec:	1d05                	addi	s10,s10,-31
     5ee:	0200                	addi	s0,sp,256
     5f0:	0104                	addi	s1,sp,128
        v[(d-d2)] = u*r_d;
     5f2:	0306                	slli	t1,t1,0x1
     5f4:	0901                	addi	s2,s2,0
     5f6:	0002                	c.slli64	zero
     5f8:	0501                	addi	a0,a0,0
     5fa:	0009                	c.nop	2
     5fc:	0402                	c.slli64	s0
     5fe:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     600:	00090003          	lb	zero,0(s2)
     604:	0100                	addi	s0,sp,128
     606:	0f05                	addi	t5,t5,1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	04091003          	lh	zero,64(s2)
     60c:	0100                	addi	s0,sp,128
     60e:	1105                	addi	sp,sp,-31
     610:	0200                	addi	s0,sp,256
     612:	0104                	addi	s1,sp,128
     614:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     616:	097f                	0x97f
     618:	0002                	c.slli64	zero
     61a:	0501                	addi	a0,a0,0
     61c:	0005                	c.nop	1
     61e:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     620:	0601                	addi	a2,a2,0
     622:	00090003          	lb	zero,0(s2)
     626:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     628:	0c090003          	lb	zero,192(s2)
     62c:	0100                	addi	s0,sp,128
     62e:	0b05                	addi	s6,s6,1
        for(i = 0; i < size_N; ++i){
     630:	02090703          	lb	a4,32(s2)
     634:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     636:	1005                	c.nop	-31
     638:	0200                	addi	s0,sp,256
     63a:	0104                	addi	s1,sp,128
     63c:	0306                	slli	t1,t1,0x1
     63e:	0900                	addi	s0,sp,144
     640:	0002                	c.slli64	zero
     642:	0501                	addi	a0,a0,0
     644:	0005                	c.nop	1
     646:	0402                	c.slli64	s0
            v[i] = v[i] % mod;
     648:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     64a:	00090003          	lb	zero,0(s2)
            v[i] = v[i] % mod;
     64e:	0100                	addi	s0,sp,128
     650:	0b05                	addi	s6,s6,1
     652:	04090703          	lb	a4,64(s2)
        for (i = 0; i < size_N; ++i){
     656:	0100                	addi	s0,sp,128
                product[i] = product[i] + mod;
     658:	1005                	c.nop	-31
     65a:	0200                	addi	s0,sp,256
            while (product[i] < 0) {
     65c:	0104                	addi	s1,sp,128
     65e:	0306                	slli	t1,t1,0x1
     660:	0900                	addi	s0,sp,144
            product[i] = product[i] % mod;
     662:	0002                	c.slli64	zero
     664:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     666:	0005                	c.nop	1
     668:	0402                	c.slli64	s0
            product[i] = product[i] % mod;
     66a:	0601                	addi	a2,a2,0
     66c:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     670:	0100                	addi	s0,sp,128
     672:	0306                	slli	t1,t1,0x1
     674:	0906                	slli	s2,s2,0x1
     676:	0004                	0x4
     678:	0301                	addi	t1,t1,0
        for (i = 0; i < size_N; ++i){
     67a:	0902                	c.slli64	s2
     67c:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     67e:	0501                	addi	a0,a0,0
     680:	0601                	addi	a2,a2,0
     682:	00090103          	lb	sp,0(s2)
                num_temp[i] = num_temp[i] + mod;
     686:	0100                	addi	s0,sp,128
     688:	1105                	addi	sp,sp,-31
            while (num_temp[i] < 0){
     68a:	0200                	addi	s0,sp,256
     68c:	0304                	addi	s1,sp,384
     68e:	0306                	slli	t1,t1,0x1
            num_temp[i] = num_temp[i] % mod;
     690:	095c                	addi	a5,sp,148
     692:	002a                	c.slli	zero,0xa
        for (i = 0; i < size_N; ++i){
     694:	0501                	addi	a0,a0,0
     696:	0025                	c.nop	9
            num_temp[i] = num_temp[i] % mod;
     698:	0402                	c.slli64	s0
     69a:	00030603          	lb	a2,0(t1)
            q[i] = q[i] + v[i];
     69e:	0409                	addi	s0,s0,2
     6a0:	0100                	addi	s0,sp,128
     6a2:	2b05                	jal	bd2 <generate_keys+0x242>
     6a4:	0200                	addi	s0,sp,256
     6a6:	0304                	addi	s1,sp,384
        for(i = 0; i < size_N; ++i){
     6a8:	04090003          	lb	zero,64(s2)
            q[i] = q[i] + v[i];
     6ac:	0100                	addi	s0,sp,128
            q[i] = q[i] % mod;
     6ae:	2e05                	jal	9de <generate_keys+0x4e>
     6b0:	0200                	addi	s0,sp,256
     6b2:	0304                	addi	s1,sp,384
     6b4:	02090003          	lb	zero,32(s2)
            if( num_temp[i] != 0 )
     6b8:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	2a05                	jal	7ea <ext_euclid+0x108>
     6bc:	0200                	addi	s0,sp,256
            v[i] = 0;
     6be:	0304                	addi	s1,sp,384
     6c0:	06097f03          	0x6097f03
     6c4:	0100                	addi	s0,sp,128
     6c6:	2e05                	jal	9f6 <generate_keys+0x66>
        for (i = 0; i < size_N; ++i){
     6c8:	0200                	addi	s0,sp,256
     6ca:	0304                	addi	s1,sp,384
     6cc:	02090103          	lb	sp,32(s2)
        result[i] = num_temp[i-size_N];
     6d0:	0100                	addi	s0,sp,128
     6d2:	2505                	jal	cf2 <ntru_encyrpt+0x44>
     6d4:	0200                	addi	s0,sp,256
     6d6:	0304                	addi	s1,sp,384
     6d8:	04090003          	lb	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	0100                	addi	s0,sp,128
     6de:	2805                	jal	70e <ext_euclid+0x2c>
     6e0:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6e2:	0304                	addi	s1,sp,384
     6e4:	0306                	slli	t1,t1,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	097f                	0x97f
    int ri_2[size]; // MX-ring poly, a
     6e8:	0002                	c.slli64	zero
     6ea:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0020                	addi	s0,sp,8
     6ee:	0402                	c.slli64	s0
     6f0:	0301                	addi	t1,t1,0
     6f2:	0900                	addi	s0,sp,144
     6f4:	0000                	unimp
     6f6:	0501                	addi	a0,a0,0
     6f8:	000d                	c.nop	3
     6fa:	0402                	c.slli64	s0
     6fc:	0601                	addi	a2,a2,0
     6fe:	00090003          	lb	zero,0(s2)
     702:	0100                	addi	s0,sp,128
     704:	2505                	jal	d24 <ntru_encyrpt+0x76>
     706:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     708:	0204                	addi	s1,sp,256
     70a:	0306                	slli	t1,t1,0x1
     70c:	097f                	0x97f
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	0004                	0x4
     710:	0501                	addi	a0,a0,0
     712:	04020027          	0x4020027
    int ri[size];
     716:	0602                	c.slli64	a2
     718:	00090003          	lb	zero,0(s2)
    int ti_1[size]; // ti_1[0] = 1
     71c:	0100                	addi	s0,sp,128
     71e:	1405                	addi	s0,s0,-31
    int ti[size];
     720:	08090103          	lb	sp,128(s2)
     724:	0100                	addi	s0,sp,128
    int qi_1[size];
     726:	1105                	addi	sp,sp,-31
     728:	0200                	addi	s0,sp,256
     72a:	0304                	addi	s1,sp,384
    int temp[size];
     72c:	0306                	slli	t1,t1,0x1
     72e:	0908                	addi	a0,sp,144
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	0004                	0x4
     732:	0501                	addi	a0,a0,0
     734:	0029                	c.nop	10
    int ri_2[size]; // MX-ring poly, a
     736:	0402                	c.slli64	s0
     738:	00030603          	lb	a2,0(t1)
    for (i = 0; i < size; ++i) {
     73c:	0409                	addi	s0,s0,2
        ti_2[i] = 0;
     73e:	0100                	addi	s0,sp,128
     740:	2f05                	jal	e70 <reset_handler+0x18>
     742:	0200                	addi	s0,sp,256
     744:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     746:	04090003          	lb	zero,64(s2)
    array_equ(ri_2,polyR,size);
     74a:	0100                	addi	s0,sp,128
     74c:	3205                	jal	6c <__DYNAMIC+0x6c>
     74e:	0200                	addi	s0,sp,256
     750:	0304                	addi	s1,sp,384
    array_equ(ri_1,polyf,size);
     752:	02090003          	lb	zero,32(s2)
     756:	0100                	addi	s0,sp,128
     758:	2a05                	jal	888 <ext_euclid+0x1a6>
    ti_1[0] = 1;
     75a:	0200                	addi	s0,sp,256
     75c:	0304                	addi	s1,sp,384
     75e:	06097f03          	0x6097f03
        for (i = N + 1; i < (2 * N + 2); ++i) {
     762:	0100                	addi	s0,sp,128
     764:	3205                	jal	84 <__DYNAMIC+0x84>
     766:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     768:	0304                	addi	s1,sp,384
     76a:	02090103          	lb	sp,32(s2)
        ti_2[i] = 0;
     76e:	0100                	addi	s0,sp,128
     770:	2905                	jal	ba0 <generate_keys+0x210>
     772:	0200                	addi	s0,sp,256
        ti_1[i] = 0;
     774:	0304                	addi	s1,sp,384
        ti_2[i] = 0;
     776:	04090003          	lb	zero,64(s2)
        ti_1[i] = 0;
     77a:	0100                	addi	s0,sp,128
     77c:	2805                	jal	7ac <ext_euclid+0xca>
    for (i = 0; i < size; ++i) {
     77e:	0200                	addi	s0,sp,256
     780:	0304                	addi	s1,sp,384
                ri_2[i] = ri_2[i] + mod;
     782:	0306                	slli	t1,t1,0x1
     784:	097f                	0x97f
            while (ri_2[i] < 0) {
     786:	0002                	c.slli64	zero
     788:	0501                	addi	a0,a0,0
     78a:	0020                	addi	s0,sp,8
            ri_2[i] = ri_2[i] % mod;
     78c:	0402                	c.slli64	s0
     78e:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     790:	0900                	addi	s0,sp,144
            ri_2[i] = ri_2[i] % mod;
     792:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     794:	0501                	addi	a0,a0,0
     796:	000d                	c.nop	3
     798:	0402                	c.slli64	s0
     79a:	0601                	addi	a2,a2,0
     79c:	00090003          	lb	zero,0(s2)
     7a0:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7a2:	2505                	jal	dc2 <ntru_deceypt+0x5a>
     7a4:	0200                	addi	s0,sp,256
     7a6:	0204                	addi	s1,sp,256
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	0306                	slli	t1,t1,0x1
     7aa:	097f                	0x97f
     7ac:	0004                	0x4
     7ae:	0501                	addi	a0,a0,0
     7b0:	04020027          	0x4020027
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	0602                	c.slli64	a2
     7b6:	00090003          	lb	zero,0(s2)
     7ba:	0100                	addi	s0,sp,128
     7bc:	0d05                	addi	s10,s10,1
     7be:	0200                	addi	s0,sp,256
     7c0:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     7c2:	0306                	slli	t1,t1,0x1
     7c4:	090a                	slli	s2,s2,0x2
     7c6:	0008                	0x8
     7c8:	0501                	addi	a0,a0,0
     7ca:	0025                	c.nop	9
        for (i = 0; i < N + 1; ++i) {
     7cc:	0402                	c.slli64	s0
     7ce:	00030603          	lb	a2,0(t1)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	0009                	c.nop	2
     7d4:	0100                	addi	s0,sp,128
     7d6:	2c05                	jal	a06 <generate_keys+0x76>
     7d8:	0200                	addi	s0,sp,256
     7da:	0304                	addi	s1,sp,384
     7dc:	02097f03          	0x2097f03
    array_equ(qi_1,res1,size);
     7e0:	0100                	addi	s0,sp,128
     7e2:	2505                	jal	e02 <ntru_deceypt+0x9a>
     7e4:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7e6:	0304                	addi	s1,sp,384
     7e8:	04090103          	lb	sp,64(s2)
     7ec:	0100                	addi	s0,sp,128
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	1805                	addi	a6,a6,-31
     7f0:	0200                	addi	s0,sp,256
     7f2:	0304                	addi	s1,sp,384
     7f4:	04090003          	lb	zero,64(s2)
     7f8:	0100                	addi	s0,sp,128
     7fa:	2c05                	jal	a2a <generate_keys+0x9a>
     7fc:	0200                	addi	s0,sp,256
    array_equ(temp,res2,size);
     7fe:	0304                	addi	s1,sp,384
     800:	0306                	slli	t1,t1,0x1
     802:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     804:	0004                	0x4
     806:	0501                	addi	a0,a0,0
     808:	0014                	0x14
     80a:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     80c:	0301                	addi	t1,t1,0
     80e:	0900                	addi	s0,sp,144
     810:	0000                	unimp
     812:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     814:	0009                	c.nop	2
     816:	0402                	c.slli64	s0
     818:	0601                	addi	a2,a2,0
array_equ(ri_2,ri_1,size);
     81a:	00090003          	lb	zero,0(s2)
     81e:	0100                	addi	s0,sp,128
     820:	1d05                	addi	s10,s10,-31
array_equ(ri_1,ri,size);
     822:	0200                	addi	s0,sp,256
     824:	0204                	addi	s1,sp,256
     826:	0306                	slli	t1,t1,0x1
     828:	097f                	0x97f
array_equ(ti_2,ti_1,size);
     82a:	0004                	0x4
     82c:	0501                	addi	a0,a0,0
     82e:	0103060f          	0x103060f
     832:	0809                	addi	a6,a6,2
     834:	0100                	addi	s0,sp,128
     836:	0d05                	addi	s10,s10,1
array_equ(ti_1,ti,size);
     838:	0200                	addi	s0,sp,256
     83a:	0304                	addi	s1,sp,384
     83c:	0306                	slli	t1,t1,0x1
     83e:	0908                	addi	a0,sp,144
        controlR = 0;
     840:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     842:	0501                	addi	a0,a0,0
     844:	0022                	c.slli	zero,0x8
     846:	0402                	c.slli64	s0
    while (controlR != 0) {
     848:	00030603          	lb	a2,0(t1)
        for (j = 0; j < mod; ++j) {
     84c:	0009                	c.nop	2
            if (((ri_2[0] * j) % mod) == 1)
     84e:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     850:	1805                	addi	a6,a6,-31
     852:	0200                	addi	s0,sp,256
     854:	0304                	addi	s1,sp,384
     856:	04090003          	lb	zero,64(s2)
     85a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     85c:	2205                	jal	97c <ext_euclid+0x29a>
     85e:	0200                	addi	s0,sp,256
    }
     860:	0304                	addi	s1,sp,384
     862:	02090003          	lb	zero,32(s2)
     866:	0100                	addi	s0,sp,128
     868:	2005                	jal	888 <ext_euclid+0x1a6>
     86a:	0200                	addi	s0,sp,256
     86c:	0304                	addi	s1,sp,384
     86e:	04097f03          	0x4097f03
     872:	0100                	addi	s0,sp,128
     874:	2205                	jal	994 <generate_keys+0x4>
     876:	0200                	addi	s0,sp,256
     878:	0304                	addi	s1,sp,384
     87a:	02090103          	lb	sp,32(s2)
     87e:	0100                	addi	s0,sp,128
     880:	1805                	addi	a6,a6,-31
     882:	0200                	addi	s0,sp,256
     884:	0304                	addi	s1,sp,384
     886:	06090003          	lb	zero,96(s2)
                ri_1[i] = ri_1[i] + mod;
     88a:	0100                	addi	s0,sp,128
     88c:	2005                	jal	8ac <ext_euclid+0x1ca>
            while (ri_1[i] < 0) {
     88e:	0200                	addi	s0,sp,256
     890:	0304                	addi	s1,sp,384
     892:	0306                	slli	t1,t1,0x1
            ri_1[i] = ri_1[i] % mod;
     894:	097f                	0x97f
     896:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     898:	0501                	addi	a0,a0,0
     89a:	0014                	0x14
            ri_1[i] = ri_1[i] % mod;
     89c:	0402                	c.slli64	s0
     89e:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     8a0:	0900                	addi	s0,sp,144
            ri[i - (N + 1)] = res[i];
     8a2:	0000                	unimp
     8a4:	0501                	addi	a0,a0,0
     8a6:	0009                	c.nop	2
     8a8:	0402                	c.slli64	s0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0601                	addi	a2,a2,0
     8ac:	00090003          	lb	zero,0(s2)
            ri[i - (N + 1)] = res[i];
     8b0:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	2805                	jal	8e2 <ext_euclid+0x200>
            temp[i] = ri_2[i] - ri[i];
     8b4:	0200                	addi	s0,sp,256
     8b6:	0204                	addi	s1,sp,256
     8b8:	0306                	slli	t1,t1,0x1
     8ba:	097f                	0x97f
     8bc:	0004                	0x4
     8be:	0501                	addi	a0,a0,0
     8c0:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     8c4:	0609                	addi	a2,a2,2
            temp[i] = ri_2[i] - ri[i];
     8c6:	0100                	addi	s0,sp,128
     8c8:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     8ca:	0200                	addi	s0,sp,256
     8cc:	0304                	addi	s1,sp,384
                temp[i] = temp[i] + mod;
     8ce:	0306                	slli	t1,t1,0x1
     8d0:	00040907          	0x40907
            while (temp[i] < 0) {
     8d4:	0501                	addi	a0,a0,0
     8d6:	0021                	c.nop	8
            temp[i] = temp[i] % mod;
     8d8:	0402                	c.slli64	s0
     8da:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     8de:	0009                	c.nop	2
            temp[i] = temp[i] % mod;
     8e0:	0100                	addi	s0,sp,128
     8e2:	2805                	jal	912 <ext_euclid+0x230>
        for (i = 0; i < N + 1; ++i) {
     8e4:	0200                	addi	s0,sp,256
                qi_1[i] = qi_1[i] + mod;
     8e6:	0304                	addi	s1,sp,384
     8e8:	02097f03          	0x2097f03
            while (qi_1[i] < 0) {
     8ec:	0100                	addi	s0,sp,128
     8ee:	2105                	jal	d0e <ntru_encyrpt+0x60>
            qi_1[i] = qi_1[i] % mod;
     8f0:	0200                	addi	s0,sp,256
     8f2:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     8f4:	04090103          	lb	sp,64(s2)
            qi_1[i] = qi_1[i] % mod;
     8f8:	0100                	addi	s0,sp,128
     8fa:	1405                	addi	s0,s0,-31
        for (i = 0; i < N + 1; ++i) {
     8fc:	0200                	addi	s0,sp,256
                temp[i] = temp[i] + mod;
     8fe:	0304                	addi	s1,sp,384
     900:	04090003          	lb	zero,64(s2)
            while (temp[i] < 0) {
     904:	0100                	addi	s0,sp,128
     906:	2805                	jal	936 <ext_euclid+0x254>
     908:	0200                	addi	s0,sp,256
     90a:	0304                	addi	s1,sp,384
            temp[i] = temp[i] % mod;
     90c:	0306                	slli	t1,t1,0x1
     90e:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     910:	0004                	0x4
     912:	0501                	addi	a0,a0,0
            temp[i] = temp[i] % mod;
     914:	0346                	slli	t1,t1,0x11
     916:	0002090b          	0x2090b
            ti[i] = ti_2[i] - temp[i];
     91a:	0501                	addi	a0,a0,0
     91c:	0305                	addi	t1,t1,1
     91e:	0902                	c.slli64	s2
     920:	0000                	unimp
     922:	0501                	addi	a0,a0,0
     924:	0646                	slli	a2,a2,0x11
     926:	00097e03          	0x97e03
     92a:	0100                	addi	s0,sp,128
     92c:	1d05                	addi	s10,s10,-31
     92e:	02090203          	lb	tp,32(s2)
     932:	0100                	addi	s0,sp,128
     934:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     936:	04097e03          	0x4097e03
                ti[i] = ti[i] + mod;
     93a:	0100                	addi	s0,sp,128
     93c:	0905                	addi	s2,s2,1
            while (ti[i] < 0) {
     93e:	0a090203          	lb	tp,160(s2)
     942:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     944:	4605                	li	a2,1
     946:	0c097e03          	0xc097e03
        for (i = 0; i < N + 1; ++i) {
     94a:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     94c:	0905                	addi	s2,s2,1
     94e:	12090203          	lb	tp,288(s2)
              qi_1[i] = 0;
     952:	0100                	addi	s0,sp,128
     954:	4605                	li	a2,1
     956:	02097e03          	0x2097e03
            controlR += ri[i];
     95a:	0100                	addi	s0,sp,128
     95c:	0905                	addi	s2,s2,1
              qi_1[i] = 0;
     95e:	04090203          	lb	tp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     962:	0100                	addi	s0,sp,128
            controlR += ri[i];
     964:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     966:	02097e03          	0x2097e03
            if (((ri_2[0] * j) % mod) == 1)
     96a:	0100                	addi	s0,sp,128
     96c:	0905                	addi	s2,s2,1
     96e:	00090203          	lb	tp,0(s2)
     972:	0100                	addi	s0,sp,128
     974:	04090303          	lb	t1,64(s2)
        for (j = 0; j < mod; ++j) {
     978:	0100                	addi	s0,sp,128
     97a:	08097d03          	0x8097d03
        for (i = 0; i < N + 1; ++i) {
     97e:	0100                	addi	s0,sp,128
     980:	02090303          	lb	t1,32(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     984:	0100                	addi	s0,sp,128
     986:	04090103          	lb	sp,64(s2)
     98a:	0100                	addi	s0,sp,128
     98c:	06097f03          	0x6097f03
int* generate_keys(int N, int p, int q){
     990:	0100                	addi	s0,sp,128
     992:	02090103          	lb	sp,32(s2)
     996:	0100                	addi	s0,sp,128
     998:	4605                	li	a2,1
     99a:	04097a03          	0x4097a03
     99e:	0100                	addi	s0,sp,128
     9a0:	0905                	addi	s2,s2,1
     9a2:	04090203          	lb	tp,64(s2)
     9a6:	0100                	addi	s0,sp,128
     9a8:	0505                	addi	a0,a0,1
     9aa:	0306                	slli	t1,t1,0x1
     9ac:	0901                	addi	s2,s2,0
     9ae:	0004                	0x4
     9b0:	0301                	addi	t1,t1,0
     9b2:	0901                	addi	s2,s2,0
     9b4:	0000                	unimp
     9b6:	0301                	addi	t1,t1,0
     9b8:	0901                	addi	s2,s2,0
     9ba:	0000                	unimp
     9bc:	0501                	addi	a0,a0,0
     9be:	0646                	slli	a2,a2,0x11
     9c0:	00097b03          	0x97b03
     9c4:	0100                	addi	s0,sp,128
     9c6:	0905                	addi	s2,s2,1
	resultkon[0] = 0xaaaaaaa0;
     9c8:	02090503          	lb	a0,32(s2)
     9cc:	0100                	addi	s0,sp,128
     9ce:	0505                	addi	a0,a0,1
int* generate_keys(int N, int p, int q){
     9d0:	0306                	slli	t1,t1,0x1
     9d2:	0901                	addi	s2,s2,0
     9d4:	0004                	0x4
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9d6:	0501                	addi	a0,a0,0
     9d8:	0609                	addi	a2,a2,2
     9da:	00090003          	lb	zero,0(s2)
	resultkon[0] = 0xaaaaaaa0;
     9de:	0100                	addi	s0,sp,128
     9e0:	0505                	addi	a0,a0,1
     9e2:	0306                	slli	t1,t1,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
	resultkon[0] = 0xaaaaaaa0;
     9e8:	0501                	addi	a0,a0,0
     9ea:	060c                	addi	a1,sp,768
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ec:	04090003          	lb	zero,64(s2)
     9f0:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f2:	1905                	addi	s2,s2,-31
     9f4:	02090303          	lb	t1,32(s2)
     9f8:	0100                	addi	s0,sp,128
     9fa:	1105                	addi	sp,sp,-31
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9fc:	0200                	addi	s0,sp,256
     9fe:	0104                	addi	s1,sp,128
     a00:	0306                	slli	t1,t1,0x1
     a02:	097d                	addi	s2,s2,31
     a04:	0008                	0x8
     a06:	0501                	addi	a0,a0,0
     a08:	0005                	c.nop	1
     a0a:	0402                	c.slli64	s0
     a0c:	0601                	addi	a2,a2,0
     a0e:	00090003          	lb	zero,0(s2)
     a12:	0100                	addi	s0,sp,128
     a14:	04090b03          	lb	s6,64(s2)
     a18:	0100                	addi	s0,sp,128
     a1a:	0306                	slli	t1,t1,0x1
     a1c:	0900                	addi	s0,sp,144
     a1e:	000a                	c.slli	zero,0x2
     a20:	0301                	addi	t1,t1,0
     a22:	0906                	slli	s2,s2,0x1
     a24:	0002                	c.slli64	zero
     a26:	0301                	addi	t1,t1,0
     a28:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     a2c:	0501                	addi	a0,a0,0
     a2e:	00030607          	0x30607
     a32:	0009                	c.nop	2
     a34:	0100                	addi	s0,sp,128
     a36:	1d05                	addi	s10,s10,-31
     a38:	0200                	addi	s0,sp,256
     a3a:	0104                	addi	s1,sp,128
     a3c:	0306                	slli	t1,t1,0x1
     a3e:	0908                	addi	a0,sp,144
     a40:	0012                	c.slli	zero,0x4
     a42:	0501                	addi	a0,a0,0
     a44:	0009                	c.nop	2
     a46:	0402                	c.slli64	s0
     a48:	0601                	addi	a2,a2,0
     a4a:	00090003          	lb	zero,0(s2)
     a4e:	0100                	addi	s0,sp,128
     a50:	1405                	addi	s0,s0,-31
     a52:	04090103          	lb	sp,64(s2)
     a56:	0100                	addi	s0,sp,128
     a58:	0d05                	addi	s10,s10,1
     a5a:	0200                	addi	s0,sp,256
     a5c:	0304                	addi	s1,sp,384
     a5e:	0306                	slli	t1,t1,0x1
     a60:	0965                	addi	s2,s2,25
     a62:	0004                	0x4
     a64:	0501                	addi	a0,a0,0
     a66:	0019                	c.nop	6
    int polyR[N+1];
     a68:	0402                	c.slli64	s0
     a6a:	01030603          	lb	a2,16(t1)
     a6e:	0009                	c.nop	2
     a70:	0100                	addi	s0,sp,128
     a72:	1805                	addi	a6,a6,-31
     a74:	0200                	addi	s0,sp,256
     a76:	0304                	addi	s1,sp,384
     a78:	06097f03          	0x6097f03
    polyR[N] = 1;
     a7c:	0100                	addi	s0,sp,128
     a7e:	0d05                	addi	s10,s10,1
     a80:	0200                	addi	s0,sp,256
     a82:	0304                	addi	s1,sp,384
     a84:	0306                	slli	t1,t1,0x1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a86:	0901                	addi	s2,s2,0
     a88:	0004                	0x4
     a8a:	0501                	addi	a0,a0,0
     a8c:	0019                	c.nop	6
     a8e:	0402                	c.slli64	s0
     a90:	00030603          	lb	a2,0(t1)
     a94:	0009                	c.nop	2
     a96:	0100                	addi	s0,sp,128
     a98:	2c05                	jal	cc8 <ntru_encyrpt+0x1a>
     a9a:	0200                	addi	s0,sp,256
     a9c:	0304                	addi	s1,sp,384
     a9e:	0306                	slli	t1,t1,0x1
     aa0:	097e                	slli	s2,s2,0x1f
     aa2:	0004                	0x4
     aa4:	0501                	addi	a0,a0,0
     aa6:	0014                	0x14
     aa8:	0402                	c.slli64	s0
     aaa:	0301                	addi	t1,t1,0
     aac:	0900                	addi	s0,sp,144
     aae:	0004                	0x4
     ab0:	0501                	addi	a0,a0,0
     ab2:	0009                	c.nop	2
     ab4:	0402                	c.slli64	s0
     ab6:	0601                	addi	a2,a2,0
     ab8:	00090003          	lb	zero,0(s2)
     abc:	0100                	addi	s0,sp,128
     abe:	1d05                	addi	s10,s10,-31
     ac0:	0200                	addi	s0,sp,256
     ac2:	0204                	addi	s1,sp,256
     ac4:	0306                	slli	t1,t1,0x1
     ac6:	097f                	0x97f
     ac8:	0004                	0x4
     aca:	0501                	addi	a0,a0,0
     acc:	0103060f          	0x103060f
     ad0:	0809                	addi	a6,a6,2
     ad2:	0100                	addi	s0,sp,128
     ad4:	1105                	addi	sp,sp,-31
     ad6:	0200                	addi	s0,sp,256
     ad8:	0304                	addi	s1,sp,384
     ada:	0306                	slli	t1,t1,0x1
     adc:	0916                	slli	s2,s2,0x5
     ade:	0004                	0x4
     ae0:	0501                	addi	a0,a0,0
     ae2:	0025                	c.nop	9
     ae4:	0402                	c.slli64	s0
     ae6:	00030603          	lb	a2,0(t1)
    polyR[0] = -1;
     aea:	0409                	addi	s0,s0,2
     aec:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     aee:	2b05                	jal	101e <memset+0x76>
     af0:	0200                	addi	s0,sp,256
     af2:	0304                	addi	s1,sp,384
     af4:	04090003          	lb	zero,64(s2)
    for (i = N; i < 55; ++i ){
     af8:	0100                	addi	s0,sp,128
     afa:	2e05                	jal	e2a <ntru_deceypt+0xc2>
     afc:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     afe:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     b00:	02090003          	lb	zero,32(s2)
     b04:	0100                	addi	s0,sp,128
     b06:	2a05                	jal	c36 <generate_keys+0x2a6>
    for(i = 0; i < N; ++i){
     b08:	0200                	addi	s0,sp,256
     b0a:	0304                	addi	s1,sp,384
     b0c:	06097f03          	0x6097f03
    for(i = N; i < (2*N); ++i){
     b10:	0100                	addi	s0,sp,128
     b12:	2e05                	jal	e42 <ntru_deceypt+0xda>
     b14:	0200                	addi	s0,sp,256
     b16:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     b18:	02090103          	lb	sp,32(s2)
     b1c:	0100                	addi	s0,sp,128
     b1e:	2505                	jal	113e <main+0xee>
    for(i = N; i < (2*N); ++i){
     b20:	0200                	addi	s0,sp,256
     b22:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     b24:	04090003          	lb	zero,64(s2)
     b28:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     b2a:	2805                	jal	b5a <generate_keys+0x1ca>
     b2c:	0200                	addi	s0,sp,256
     b2e:	0304                	addi	s1,sp,384
     b30:	0306                	slli	t1,t1,0x1
     b32:	097f                	0x97f
     b34:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     b36:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     b38:	0020                	addi	s0,sp,8
     b3a:	0402                	c.slli64	s0
     b3c:	0301                	addi	t1,t1,0
     b3e:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     b40:	0000                	unimp
     b42:	0501                	addi	a0,a0,0
    fq = ext_euclid(polyR, f, (N+1), q);
     b44:	000d                	c.nop	3
     b46:	0402                	c.slli64	s0
     b48:	0601                	addi	a2,a2,0
     b4a:	00090003          	lb	zero,0(s2)
     b4e:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     b50:	2505                	jal	1170 <__DTOR_END__+0x18>
     b52:	0200                	addi	s0,sp,256
     b54:	0204                	addi	s1,sp,256
     b56:	0306                	slli	t1,t1,0x1
        random_keys[i] = fq[i-(3*N)];
     b58:	097f                	0x97f
     b5a:	0004                	0x4
     b5c:	0501                	addi	a0,a0,0
     b5e:	04020027          	0x4020027
    for(i = (3*N); i < (4*N); ++i){
     b62:	0602                	c.slli64	a2
    fg = polymult2(fq, N, g, N, 0);
     b64:	00090003          	lb	zero,0(s2)
     b68:	0100                	addi	s0,sp,128
     b6a:	1d05                	addi	s10,s10,-31
     b6c:	0200                	addi	s0,sp,256
     b6e:	0104                	addi	s1,sp,128
    for(i = 0; i < (2*N-1); ++i){
     b70:	0306                	slli	t1,t1,0x1
     b72:	0900                	addi	s0,sp,144
     b74:	0006                	c.slli	zero,0x1
     b76:	0501                	addi	a0,a0,0
     b78:	0009                	c.nop	2
     b7a:	0402                	c.slli64	s0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b7c:	0601                	addi	a2,a2,0
     b7e:	00090003          	lb	zero,0(s2)
     b82:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     b84:	0e05                	addi	t3,t3,1
     b86:	04091003          	lh	zero,64(s2)
     b8a:	0100                	addi	s0,sp,128
     b8c:	0d05                	addi	s10,s10,1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b8e:	0200                	addi	s0,sp,256
     b90:	0104                	addi	s1,sp,128
     b92:	0306                	slli	t1,t1,0x1
     b94:	097f                	0x97f
    for(i = (4*N); i < (5*N); ++i){
     b96:	0002                	c.slli64	zero
     b98:	0501                	addi	a0,a0,0
     b9a:	0005                	c.nop	1
    for(i = (5*N); i < (6*N+1); ++i){
     b9c:	0402                	c.slli64	s0
     b9e:	0601                	addi	a2,a2,0
        random_keys[i] = polyR[i-(5*N)];
     ba0:	00090003          	lb	zero,0(s2)
     ba4:	0100                	addi	s0,sp,128
     ba6:	0c090003          	lb	zero,192(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     baa:	0100                	addi	s0,sp,128
     bac:	0e05                	addi	t3,t3,1
     bae:	02090103          	lb	sp,32(s2)
     bb2:	0100                	addi	s0,sp,128
	resultkon[0] = 0xaaaaaaa1;
     bb4:	1405                	addi	s0,s0,-31
     bb6:	04097103          	0x4097103
     bba:	0100                	addi	s0,sp,128
     bbc:	1105                	addi	sp,sp,-31
     bbe:	0200                	addi	s0,sp,256
}
     bc0:	0304                	addi	s1,sp,384
     bc2:	0306                	slli	t1,t1,0x1
     bc4:	0908                	addi	a0,sp,144
     bc6:	0004                	0x4
     bc8:	0501                	addi	a0,a0,0
     bca:	0029                	c.nop	10
     bcc:	0402                	c.slli64	s0
     bce:	00030603          	lb	a2,0(t1)
     bd2:	0409                	addi	s0,s0,2
     bd4:	0100                	addi	s0,sp,128
     bd6:	2f05                	jal	1306 <_bss_start+0x2a>
     bd8:	0200                	addi	s0,sp,256
     bda:	0304                	addi	s1,sp,384
     bdc:	04090003          	lb	zero,64(s2)
     be0:	0100                	addi	s0,sp,128
     be2:	3205                	jal	502 <polydiv+0x5e>
     be4:	0200                	addi	s0,sp,256
     be6:	0304                	addi	s1,sp,384
     be8:	02090003          	lb	zero,32(s2)
     bec:	0100                	addi	s0,sp,128
     bee:	2a05                	jal	d1e <ntru_encyrpt+0x70>
     bf0:	0200                	addi	s0,sp,256
     bf2:	0304                	addi	s1,sp,384
     bf4:	06097f03          	0x6097f03
     bf8:	0100                	addi	s0,sp,128
     bfa:	3205                	jal	51a <polydiv+0x76>
     bfc:	0200                	addi	s0,sp,256
     bfe:	0304                	addi	s1,sp,384
     c00:	02090103          	lb	sp,32(s2)
     c04:	0100                	addi	s0,sp,128
        polyR[i] = 0;
     c06:	2905                	jal	1036 <memset+0x8e>
     c08:	0200                	addi	s0,sp,256
     c0a:	0304                	addi	s1,sp,384
     c0c:	04090003          	lb	zero,64(s2)
    for(i = 1; i < N; ++i){
     c10:	0100                	addi	s0,sp,128
     c12:	2805                	jal	c42 <generate_keys+0x2b2>
        f[i] = 0;
     c14:	0200                	addi	s0,sp,256
     c16:	0304                	addi	s1,sp,384
     c18:	0306                	slli	t1,t1,0x1
     c1a:	097f                	0x97f
     c1c:	0002                	c.slli64	zero
     c1e:	0501                	addi	a0,a0,0
     c20:	0020                	addi	s0,sp,8
        g[i] = 0;
     c22:	0402                	c.slli64	s0
     c24:	0301                	addi	t1,t1,0
     c26:	0900                	addi	s0,sp,144
     c28:	0000                	unimp
     c2a:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     c2c:	000d                	c.nop	3
     c2e:	0402                	c.slli64	s0
        random_keys[i] = f[i];
     c30:	0601                	addi	a2,a2,0
     c32:	00090003          	lb	zero,0(s2)
     c36:	0100                	addi	s0,sp,128
     c38:	2505                	jal	1258 <__DTOR_END__+0x100>
     c3a:	0200                	addi	s0,sp,256
     c3c:	0204                	addi	s1,sp,256
     c3e:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     c40:	097f                	0x97f
        random_keys[i] = f[i];
     c42:	0004                	0x4
    for(i = 0; i < N; ++i){
     c44:	0501                	addi	a0,a0,0
        random_keys[i] = g[i-N];
     c46:	04020027          	0x4020027
     c4a:	0602                	c.slli64	a2
     c4c:	00090003          	lb	zero,0(s2)
    for(i = N; i < (2*N); ++i){
     c50:	0100                	addi	s0,sp,128
     c52:	0d05                	addi	s10,s10,1
     c54:	0200                	addi	s0,sp,256
        random_keys[i] = fp[i-(2*N)];
     c56:	0304                	addi	s1,sp,384
     c58:	0306                	slli	t1,t1,0x1
     c5a:	090a                	slli	s2,s2,0x2
     c5c:	0008                	0x8
     c5e:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     c60:	0019                	c.nop	6
     c62:	0402                	c.slli64	s0
     c64:	00030603          	lb	a2,0(t1)
        random_keys[i] = fq[i-(3*N)];
     c68:	0009                	c.nop	2
     c6a:	0100                	addi	s0,sp,128
     c6c:	2305                	jal	118c <__DTOR_END__+0x34>
     c6e:	0200                	addi	s0,sp,256
     c70:	0304                	addi	s1,sp,384
     c72:	04097f03          	0x4097f03
     c76:	0100                	addi	s0,sp,128
    for(i = (3*N); i < (4*N); ++i){
     c78:	1905                	addi	s2,s2,-31
        fg[i] = fg[i]*p;
     c7a:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     c7c:	0304                	addi	s1,sp,384
     c7e:	04090103          	lb	sp,64(s2)
        fg[i] = fg[i]*p;
     c82:	0100                	addi	s0,sp,128
     c84:	2305                	jal	11a4 <__DTOR_END__+0x4c>
     c86:	0200                	addi	s0,sp,256
    for(i = 0; i < (2*N-1); ++i){
     c88:	0304                	addi	s1,sp,384
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c8a:	0306                	slli	t1,t1,0x1
     c8c:	097f                	0x97f
     c8e:	0006                	c.slli	zero,0x1
     c90:	0501                	addi	a0,a0,0
     c92:	0011                	c.nop	4
     c94:	0402                	c.slli64	s0
    for(i = (4*N); i < (5*N); ++i){
     c96:	0301                	addi	t1,t1,0
     c98:	0900                	addi	s0,sp,144
        random_keys[i] = polyR[i-(5*N)];
     c9a:	0002                	c.slli64	zero
     c9c:	0501                	addi	a0,a0,0
     c9e:	0009                	c.nop	2
     ca0:	0402                	c.slli64	s0
     ca2:	0601                	addi	a2,a2,0
     ca4:	00090003          	lb	zero,0(s2)
    for(i = (5*N); i < (6*N+1); ++i){
     ca8:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     caa:	1605                	addi	a2,a2,-31
    for(i = (5*N); i < (6*N+1); ++i){
     cac:	0200                	addi	s0,sp,256
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cae:	0204                	addi	s1,sp,256
	resultkon[0] = 0xbbbbbbb0;
     cb0:	0306                	slli	t1,t1,0x1
     cb2:	097f                	0x97f
     cb4:	0004                	0x4
     cb6:	0501                	addi	a0,a0,0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cb8:	0305                	addi	t1,t1,1
     cba:	00060907          	0x60907
     cbe:	0301                	addi	t1,t1,0
     cc0:	0902                	c.slli64	s2
     cc2:	0000                	unimp
     cc4:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cc6:	0601                	addi	a2,a2,0
     cc8:	00090103          	lb	sp,0(s2)
     ccc:	0100                	addi	s0,sp,128
     cce:	4305                	li	t1,1
     cd0:	0306                	slli	t1,t1,0x1
	resultkon[0] = 0xbbbbbbb0;
     cd2:	0902                	c.slli64	s2
     cd4:	002a                	c.slli	zero,0xa
     cd6:	0501                	addi	a0,a0,0
     cd8:	0305                	addi	t1,t1,1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cda:	0902                	c.slli64	s2
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     cdc:	0000                	unimp
     cde:	0301                	addi	t1,t1,0
     ce0:	0901                	addi	s2,s2,0
     ce2:	0000                	unimp
     ce4:	0301                	addi	t1,t1,0
	resultkon[0] = 0xbbbbbbb0;
     ce6:	0902                	c.slli64	s2
     ce8:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     cea:	0501                	addi	a0,a0,0
    temp = polymult(public_key,N,random_val,48,q,0);
     cec:	0609                	addi	a2,a2,2
     cee:	00090003          	lb	zero,0(s2)
     cf2:	0100                	addi	s0,sp,128
     cf4:	4305                	li	t1,1
     cf6:	04097b03          	0x4097b03
     cfa:	0100                	addi	s0,sp,128
     cfc:	0905                	addi	s2,s2,1
     cfe:	02090503          	lb	a0,32(s2)
    for(i = 0; i < 48; ++i){
     d02:	0100                	addi	s0,sp,128
        temp[i] = temp[i] + message[i];
     d04:	4305                	li	t1,1
     d06:	02097b03          	0x2097b03
     d0a:	0100                	addi	s0,sp,128
     d0c:	0905                	addi	s2,s2,1
     d0e:	18090503          	lb	a0,384(s2)
     d12:	0100                	addi	s0,sp,128
     d14:	4305                	li	t1,1
    for(i = 0; i < 48; ++i){
     d16:	02097b03          	0x2097b03
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     d1a:	0100                	addi	s0,sp,128
     d1c:	0905                	addi	s2,s2,1
     d1e:	04090503          	lb	a0,64(s2)
     d22:	0100                	addi	s0,sp,128
     d24:	06090103          	lb	sp,96(s2)
     d28:	0100                	addi	s0,sp,128
     d2a:	06090203          	lb	tp,96(s2)
    for(i = (2*N); i < (3*N); ++i){
     d2e:	0100                	addi	s0,sp,128
     d30:	04090103          	lb	sp,64(s2)
     d34:	0100                	addi	s0,sp,128
     d36:	06097f03          	0x6097f03
}
     d3a:	0100                	addi	s0,sp,128
	resultkon[0] = 0xbbbbbbb1;
     d3c:	02090103          	lb	sp,32(s2)
     d40:	0100                	addi	s0,sp,128
     d42:	4305                	li	t1,1
     d44:	06097703          	0x6097703
}
     d48:	0100                	addi	s0,sp,128
     d4a:	0905                	addi	s2,s2,1
     d4c:	04090503          	lb	a0,64(s2)
     d50:	0100                	addi	s0,sp,128
     d52:	0505                	addi	a0,a0,1
     d54:	0306                	slli	t1,t1,0x1
        CT[i-(2*N)] = CT[i];
     d56:	0901                	addi	s2,s2,0
     d58:	0004                	0x4
     d5a:	0301                	addi	t1,t1,0
     d5c:	0901                	addi	s2,s2,0
    for(i = (2*N); i < (3*N); ++i){
     d5e:	0000                	unimp
     d60:	0301                	addi	t1,t1,0
        CT[i-(2*N)] = CT[i];
     d62:	0901                	addi	s2,s2,0
     d64:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     d66:	0301                	addi	t1,t1,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d68:	0901                	addi	s2,s2,0
     d6a:	0000                	unimp
     d6c:	0601                	addi	a2,a2,0
     d6e:	00090203          	lb	tp,0(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	0100                	addi	s0,sp,128
     d74:	4305                	li	t1,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d76:	06097503          	0x6097503
	resultkon[0] = 0xccccccc0;
     d7a:	0100                	addi	s0,sp,128
     d7c:	0905                	addi	s2,s2,1
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d7e:	04090903          	lb	s2,64(s2)
	resultkon[0] = 0xccccccc0;
     d82:	0100                	addi	s0,sp,128
     d84:	0505                	addi	a0,a0,1
     d86:	04090203          	lb	tp,64(s2)
     d8a:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d8c:	0905                	addi	s2,s2,1
     d8e:	02097e03          	0x2097e03
     d92:	0100                	addi	s0,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d94:	0505                	addi	a0,a0,1
	resultkon[0] = 0xccccccc0;
     d96:	0306                	slli	t1,t1,0x1
     d98:	0902                	c.slli64	s2
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d9a:	0002                	c.slli64	zero
     d9c:	0301                	addi	t1,t1,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d9e:	090d                	addi	s2,s2,3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     da0:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     da2:	0501                	addi	a0,a0,0
     da4:	060c                	addi	a1,sp,768
     da6:	04090003          	lb	zero,64(s2)
     daa:	0100                	addi	s0,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     dac:	1105                	addi	sp,sp,-31
     dae:	0200                	addi	s0,sp,256
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     db0:	0104                	addi	s1,sp,128
     db2:	0306                	slli	t1,t1,0x1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     db4:	0900                	addi	s0,sp,144
     db6:	0002                	c.slli64	zero
     db8:	0501                	addi	a0,a0,0
     dba:	0005                	c.nop	1
     dbc:	0402                	c.slli64	s0
     dbe:	0601                	addi	a2,a2,0
     dc0:	00090003          	lb	zero,0(s2)
     dc4:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     dc6:	0905                	addi	s2,s2,1
     dc8:	0306                	slli	t1,t1,0x1
     dca:	0909                	addi	s2,s2,2
     dcc:	0004                	0x4
     dce:	0501                	addi	a0,a0,0
        if(a2[i] <= q/2)
     dd0:	0305                	addi	t1,t1,1
     dd2:	0904                	addi	s1,sp,144
     dd4:	0008                	0x8
    for (i = 0; i < N; ++i){
     dd6:	0501                	addi	a0,a0,0
     dd8:	060c                	addi	a1,sp,768
     dda:	02090003          	lb	zero,32(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     dde:	0100                	addi	s0,sp,128
     de0:	1105                	addi	sp,sp,-31
     de2:	0200                	addi	s0,sp,256
     de4:	0104                	addi	s1,sp,128
     de6:	0306                	slli	t1,t1,0x1
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     de8:	0900                	addi	s0,sp,144
     dea:	0002                	c.slli64	zero
     dec:	0501                	addi	a0,a0,0
     dee:	0005                	c.nop	1
     df0:	0402                	c.slli64	s0
     df2:	0601                	addi	a2,a2,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     df4:	00090003          	lb	zero,0(s2)
     df8:	0100                	addi	s0,sp,128
}
     dfa:	0c05                	addi	s8,s8,1
     dfc:	04090803          	lb	a6,64(s2)
	resultkon[0] = 0xccccccc1;
     e00:	0100                	addi	s0,sp,128
     e02:	1105                	addi	sp,sp,-31
     e04:	0200                	addi	s0,sp,256
     e06:	0104                	addi	s1,sp,128
     e08:	0306                	slli	t1,t1,0x1
}
     e0a:	0900                	addi	s0,sp,144
     e0c:	0002                	c.slli64	zero
     e0e:	0501                	addi	a0,a0,0
     e10:	0005                	c.nop	1
     e12:	0402                	c.slli64	s0
     e14:	0601                	addi	a2,a2,0
     e16:	00090003          	lb	zero,0(s2)
     e1a:	0100                	addi	s0,sp,128
     e1c:	1805                	addi	a6,a6,-31
        a2[i-(2*N)] = a2[i];
     e1e:	0200                	addi	s0,sp,256
     e20:	0104                	addi	s1,sp,128
     e22:	0306                	slli	t1,t1,0x1
     e24:	0906                	slli	s2,s2,0x1
    for(i = (2*N); i < ((2*N)+N); ++i){
     e26:	0004                	0x4
     e28:	0501                	addi	a0,a0,0
        a2[i-(2*N)] = a2[i];
     e2a:	0005                	c.nop	1
     e2c:	0402                	c.slli64	s0
    for(i = (2*N); i < ((2*N)+N); ++i){
     e2e:	0601                	addi	a2,a2,0
        if(a2[i] <= q/2)
     e30:	08090003          	lb	zero,128(s2)
     e34:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     e36:	0c05                	addi	s8,s8,1
     e38:	0200                	addi	s0,sp,256
     e3a:	0104                	addi	s1,sp,128
    for (i = 0; i < N; ++i){
     e3c:	04097a03          	0x4097a03
     e40:	0100                	addi	s0,sp,128
        c2[i-(2*N)] = c2[i];
     e42:	0200                	addi	s0,sp,256
     e44:	0104                	addi	s1,sp,128
     e46:	04090f03          	lb	t5,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     e4a:	0100                	addi	s0,sp,128
     e4c:	1105                	addi	sp,sp,-31
        c2[i-(2*N)] = c2[i];
     e4e:	0200                	addi	s0,sp,256
     e50:	0104                	addi	s1,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     e52:	0306                	slli	t1,t1,0x1
     e54:	097f                	0x97f
     e56:	0002                	c.slli64	zero
     e58:	0501                	addi	a0,a0,0
     e5a:	0005                	c.nop	1
     e5c:	0402                	c.slli64	s0
     e5e:	0601                	addi	a2,a2,0
     e60:	00090003          	lb	zero,0(s2)
     e64:	0100                	addi	s0,sp,128
     e66:	0d05                	addi	s10,s10,1
     e68:	0306                	slli	t1,t1,0x1
     e6a:	095f 0008 0501      	0x5010008095f
     e70:	00030627          	0x30627
     e74:	0009                	c.nop	2
     e76:	0100                	addi	s0,sp,128
     e78:	1905                	addi	s2,s2,-31
     e7a:	02090003          	lb	zero,32(s2)
     e7e:	0100                	addi	s0,sp,128
     e80:	0f05                	addi	t5,t5,1
     e82:	0306                	slli	t1,t1,0x1
     e84:	097f                	0x97f
     e86:	0002                	c.slli64	zero
     e88:	0501                	addi	a0,a0,0
     e8a:	0618                	addi	a4,sp,768
     e8c:	00090003          	lb	zero,0(s2)
     e90:	0100                	addi	s0,sp,128
     e92:	0f05                	addi	t5,t5,1
     e94:	02090003          	lb	zero,32(s2)
     e98:	0100                	addi	s0,sp,128
     e9a:	0905                	addi	s2,s2,1
     e9c:	0200                	addi	s0,sp,256
     e9e:	0204                	addi	s1,sp,256
     ea0:	0306                	slli	t1,t1,0x1
     ea2:	00040903          	lb	s2,0(s0)
     ea6:	0501                	addi	a0,a0,0
     ea8:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     eac:	0602                	c.slli64	a2
     eae:	00090003          	lb	zero,0(s2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	1d05                	addi	s10,s10,-31
     eb6:	0200                	addi	s0,sp,256
     eb8:	0204                	addi	s1,sp,256
     eba:	04097c03          	0x4097c03
     ebe:	0100                	addi	s0,sp,128
     ec0:	1505                	addi	a0,a0,-31
     ec2:	0200                	addi	s0,sp,256
     ec4:	0204                	addi	s1,sp,256
     ec6:	04090403          	lb	s0,64(s2)
     eca:	0100                	addi	s0,sp,128
     ecc:	1d05                	addi	s10,s10,-31
     ece:	0200                	addi	s0,sp,256
     ed0:	0204                	addi	s1,sp,256
     ed2:	0306                	slli	t1,t1,0x1
     ed4:	097c                	addi	a5,sp,156
     ed6:	0004                	0x4
     ed8:	0501                	addi	a0,a0,0
     eda:	030d                	addi	t1,t1,3
     edc:	0002090f          	0x2090f
     ee0:	0501                	addi	a0,a0,0
     ee2:	0003062b          	0x3062b
     ee6:	0009                	c.nop	2
     ee8:	0100                	addi	s0,sp,128
     eea:	1b05                	addi	s6,s6,-31
     eec:	02090003          	lb	zero,32(s2)
     ef0:	0100                	addi	s0,sp,128
     ef2:	0f05                	addi	t5,t5,1
     ef4:	0306                	slli	t1,t1,0x1
     ef6:	097f                	0x97f
     ef8:	0002                	c.slli64	zero
     efa:	0501                	addi	a0,a0,0
     efc:	061a                	slli	a2,a2,0x6
     efe:	00090003          	lb	zero,0(s2)
     f02:	0100                	addi	s0,sp,128
     f04:	0f05                	addi	t5,t5,1
     f06:	02090003          	lb	zero,32(s2)
     f0a:	0100                	addi	s0,sp,128
     f0c:	0905                	addi	s2,s2,1
     f0e:	0200                	addi	s0,sp,256
     f10:	0204                	addi	s1,sp,256
     f12:	0306                	slli	t1,t1,0x1
     f14:	00040903          	lb	s2,0(s0)
     f18:	0501                	addi	a0,a0,0
     f1a:	04020027          	0x4020027
     f1e:	0602                	c.slli64	a2
     f20:	00090003          	lb	zero,0(s2)
     f24:	0100                	addi	s0,sp,128
     f26:	1d05                	addi	s10,s10,-31
     f28:	0200                	addi	s0,sp,256
     f2a:	0204                	addi	s1,sp,256
     f2c:	04097c03          	0x4097c03
     f30:	0100                	addi	s0,sp,128
     f32:	1705                	addi	a4,a4,-31
     f34:	0200                	addi	s0,sp,256
     f36:	0204                	addi	s1,sp,256
     f38:	04090403          	lb	s0,64(s2)
     f3c:	0100                	addi	s0,sp,128
     f3e:	1d05                	addi	s10,s10,-31
     f40:	0200                	addi	s0,sp,256
     f42:	0204                	addi	s1,sp,256
     f44:	0306                	slli	t1,t1,0x1
     f46:	097c                	addi	a5,sp,156
     f48:	0004                	0x4
     f4a:	0501                	addi	a0,a0,0
     f4c:	0009                	c.nop	2
     f4e:	0402                	c.slli64	s0
     f50:	09090303          	lb	t1,144(s2)
     f54:	0002                	c.slli64	zero
     f56:	0501                	addi	a0,a0,0
     f58:	000e                	c.slli	zero,0x3
     f5a:	0402                	c.slli64	s0
     f5c:	00030603          	lb	a2,0(t1)
     f60:	0409                	addi	s0,s0,2
     f62:	0100                	addi	s0,sp,128
     f64:	0200                	addi	s0,sp,256
     f66:	0304                	addi	s1,sp,384
     f68:	04090103          	lb	sp,64(s2)
     f6c:	0100                	addi	s0,sp,128
     f6e:	0200                	addi	s0,sp,256
     f70:	0304                	addi	s1,sp,384
     f72:	02097f03          	0x2097f03
     f76:	0100                	addi	s0,sp,128
     f78:	0905                	addi	s2,s2,1
     f7a:	0200                	addi	s0,sp,256
     f7c:	0304                	addi	s1,sp,384
     f7e:	0306                	slli	t1,t1,0x1
     f80:	0901                	addi	s2,s2,0
     f82:	0004                	0x4
     f84:	0501                	addi	a0,a0,0
     f86:	000e                	c.slli	zero,0x3
     f88:	0402                	c.slli64	s0
     f8a:	00030603          	lb	a2,0(t1)
     f8e:	0009                	c.nop	2
     f90:	0100                	addi	s0,sp,128
     f92:	1d05                	addi	s10,s10,-31
     f94:	0200                	addi	s0,sp,256
     f96:	0304                	addi	s1,sp,384
     f98:	0306                	slli	t1,t1,0x1
     f9a:	097e                	slli	s2,s2,0x1f
     f9c:	0004                	0x4
     f9e:	0501                	addi	a0,a0,0
     fa0:	0309                	addi	t1,t1,2
     fa2:	00040907          	0x40907
     fa6:	0501                	addi	a0,a0,0
     fa8:	0003060b          	0x3060b
     fac:	0009                	c.nop	2
     fae:	0100                	addi	s0,sp,128
     fb0:	2005                	jal	fd0 <memset+0x28>
     fb2:	0200                	addi	s0,sp,256
     fb4:	0204                	addi	s1,sp,256
     fb6:	0306                	slli	t1,t1,0x1
     fb8:	097f                	0x97f
     fba:	0002                	c.slli64	zero
     fbc:	0501                	addi	a0,a0,0
     fbe:	0022                	c.slli	zero,0x8
     fc0:	0402                	c.slli64	s0
     fc2:	0602                	c.slli64	a2
     fc4:	00090003          	lb	zero,0(s2)
     fc8:	0100                	addi	s0,sp,128
     fca:	0905                	addi	s2,s2,1
     fcc:	0306                	slli	t1,t1,0x1
     fce:	0909                	addi	s2,s2,2
     fd0:	0004                	0x4
     fd2:	0501                	addi	a0,a0,0
     fd4:	0615                	addi	a2,a2,5
     fd6:	00090003          	lb	zero,0(s2)
     fda:	0100                	addi	s0,sp,128
     fdc:	0c05                	addi	s8,s8,1
     fde:	06090003          	lb	zero,96(s2)
     fe2:	0100                	addi	s0,sp,128
     fe4:	1a05                	addi	s4,s4,-31
     fe6:	0200                	addi	s0,sp,256
     fe8:	0204                	addi	s1,sp,256
     fea:	0306                	slli	t1,t1,0x1
     fec:	097f                	0x97f
     fee:	0004                	0x4
     ff0:	0501                	addi	a0,a0,0
     ff2:	0309                	addi	t1,t1,2
     ff4:	00040907          	0x40907
     ff8:	0501                	addi	a0,a0,0
     ffa:	0003060b          	0x3060b
     ffe:	0009                	c.nop	2
    1000:	0100                	addi	s0,sp,128
    1002:	2005                	jal	1022 <memset+0x7a>
    1004:	0200                	addi	s0,sp,256
    1006:	0204                	addi	s1,sp,256
    1008:	0306                	slli	t1,t1,0x1
    100a:	097f                	0x97f
    100c:	0002                	c.slli64	zero
    100e:	0501                	addi	a0,a0,0
    1010:	0022                	c.slli	zero,0x8
    1012:	0402                	c.slli64	s0
    1014:	0602                	c.slli64	a2
    1016:	00090003          	lb	zero,0(s2)
    101a:	0100                	addi	s0,sp,128
    101c:	1805                	addi	a6,a6,-31
    101e:	0200                	addi	s0,sp,256
    1020:	0104                	addi	s1,sp,128
    1022:	0306                	slli	t1,t1,0x1
    1024:	0900                	addi	s0,sp,144
    1026:	0002                	c.slli64	zero
    1028:	0501                	addi	a0,a0,0
    102a:	0005                	c.nop	1
    102c:	0402                	c.slli64	s0
    102e:	0601                	addi	a2,a2,0
    1030:	08090003          	lb	zero,128(s2)
    1034:	0100                	addi	s0,sp,128
    1036:	0b05                	addi	s6,s6,1
    1038:	0306                	slli	t1,t1,0x1
    103a:	090c                	addi	a1,sp,144
    103c:	0004                	0x4
    103e:	0501                	addi	a0,a0,0
    1040:	0302                	c.slli64	t1
    1042:	00ca                	slli	ra,ra,0x12
    1044:	0409                	addi	s0,s0,2
    1046:	0100                	addi	s0,sp,128
    1048:	0505                	addi	a0,a0,1
    104a:	0e090303          	lb	t1,224(s2)
    104e:	0100                	addi	s0,sp,128
int main(){
    1050:	1b05                	addi	s6,s6,-31
    1052:	0306                	slli	t1,t1,0x1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1054:	0900                	addi	s0,sp,144
    1056:	0000                	unimp
    1058:	0501                	addi	a0,a0,0
    105a:	09010313          	addi	t1,sp,144
    105e:	0004                	0x4
    1060:	0501                	addi	a0,a0,0
int main(){
    1062:	0015                	c.nop	5
    1064:	0402                	c.slli64	s0
    1066:	0601                	addi	a2,a2,0
    1068:	08097f03          	0x8097f03
    keys = generate_keys(N, p, q);
    106c:	0100                	addi	s0,sp,128
    106e:	0505                	addi	a0,a0,1
    1070:	0200                	addi	s0,sp,256
    1072:	0104                	addi	s1,sp,128
    1074:	0306                	slli	t1,t1,0x1
    1076:	0900                	addi	s0,sp,144
    1078:	0000                	unimp
    for(i = 0; i < N; ++i){
    107a:	0601                	addi	a2,a2,0
    107c:	04090403          	lb	s0,64(s2)
        secret_key_f[i] = keys[i];
    1080:	0100                	addi	s0,sp,128
    1082:	00090203          	lb	tp,0(s2)
    1086:	0100                	addi	s0,sp,128
    1088:	0105                	addi	sp,sp,1
    for(i = 0; i < N; ++i){
    108a:	0306                	slli	t1,t1,0x1
    108c:	0901                	addi	s2,s2,0
    108e:	0000                	unimp
    for(i = N; i < (2*N); ++i){
    1090:	0501                	addi	a0,a0,0
    1092:	0609                	addi	a2,a2,2
    1094:	097faf03          	lw	t5,151(t6)
    1098:	002a                	c.slli	zero,0xa
    109a:	0501                	addi	a0,a0,0
        secret_key_fp[i-(2*N)] = keys[i];
    109c:	0616                	slli	a2,a2,0x5
    109e:	00090003          	lb	zero,0(s2)
    10a2:	0100                	addi	s0,sp,128
    10a4:	0d05                	addi	s10,s10,1
    for(i = (2*N); i < (3*N); ++i){
    10a6:	04090003          	lb	zero,64(s2)
    for(i = (3*N); i < (4*N); ++i){
    10aa:	0100                	addi	s0,sp,128
    10ac:	1305                	addi	t1,t1,-31
    10ae:	04090003          	lb	zero,64(s2)
    10b2:	0100                	addi	s0,sp,128
    10b4:	0905                	addi	s2,s2,1
        public_key[i-(4*N)] = keys[i];
    10b6:	0306                	slli	t1,t1,0x1
    10b8:	0902                	c.slli64	s2
    10ba:	0006                	c.slli	zero,0x1
    10bc:	0501                	addi	a0,a0,0
    10be:	0610                	addi	a2,sp,768
    for(i = (4*N); i < (5*N); ++i){
    10c0:	02090003          	lb	zero,32(s2)
    10c4:	0100                	addi	s0,sp,128
    10c6:	1505                	addi	a0,a0,-31
    10c8:	0200                	addi	s0,sp,256
    10ca:	0104                	addi	s1,sp,128
        ring_poly[i-(5*N)] = keys[i];
    10cc:	0306                	slli	t1,t1,0x1
    10ce:	0900                	addi	s0,sp,144
    10d0:	0002                	c.slli64	zero
    10d2:	0501                	addi	a0,a0,0
    10d4:	0009                	c.nop	2
    for(i = (5*N); i < (6*N+1); ++i){
    10d6:	0402                	c.slli64	s0
    10d8:	0601                	addi	a2,a2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10da:	00090003          	lb	zero,0(s2)
    10de:	0100                	addi	s0,sp,128
    10e0:	0306                	slli	t1,t1,0x1
    10e2:	0906                	slli	s2,s2,0x1
    10e4:	0004                	0x4
    10e6:	0501                	addi	a0,a0,0
    10e8:	00030613          	mv	a2,t1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10ec:	0009                	c.nop	2
    10ee:	0100                	addi	s0,sp,128
    10f0:	0905                	addi	s2,s2,1
    10f2:	0306                	slli	t1,t1,0x1
    10f4:	000e0903          	lb	s2,0(t3)
    10f8:	0501                	addi	a0,a0,0
    10fa:	0610                	addi	a2,sp,768
    10fc:	02090003          	lb	zero,32(s2)
            resultkon[0] = 0xDEDEDEDE;
    1100:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1102:	1505                	addi	a0,a0,-31
    1104:	0200                	addi	s0,sp,256
    1106:	0104                	addi	s1,sp,128
    1108:	0306                	slli	t1,t1,0x1
    110a:	0900                	addi	s0,sp,144
            resultkon[0] = 0xDEDEDEDE;
    110c:	0002                	c.slli64	zero
    110e:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
    1110:	0009                	c.nop	2
    1112:	0402                	c.slli64	s0
        if(!(message[i] == Dec_Message[i])){
    1114:	0601                	addi	a2,a2,0
    1116:	00090003          	lb	zero,0(s2)
    111a:	0100                	addi	s0,sp,128
    111c:	1005                	c.nop	-31
    111e:	06090903          	lb	s2,96(s2)
    1122:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    1124:	1505                	addi	a0,a0,-31
    1126:	0200                	addi	s0,sp,256
    1128:	0104                	addi	s1,sp,128
    112a:	0306                	slli	t1,t1,0x1
    112c:	0900                	addi	s0,sp,144
}
    112e:	0002                	c.slli64	zero
    1130:	0501                	addi	a0,a0,0
    1132:	0009                	c.nop	2
    1134:	0402                	c.slli64	s0
    1136:	0601                	addi	a2,a2,0
    1138:	00090003          	lb	zero,0(s2)
    113c:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    113e:	1005                	c.nop	-31
    for(i = 0; i < 32; ++i){
    1140:	06090603          	lb	a2,96(s2)
    1144:	0100                	addi	s0,sp,128
    1146:	1505                	addi	a0,a0,-31
    1148:	0200                	addi	s0,sp,256
    114a:	0104                	addi	s1,sp,128
    114c:	0306                	slli	t1,t1,0x1
    114e:	0900                	addi	s0,sp,144
    1150:	0002                	c.slli64	zero
    1152:	0501                	addi	a0,a0,0
    1154:	0009                	c.nop	2
    1156:	0402                	c.slli64	s0
    1158:	0601                	addi	a2,a2,0
    115a:	00090003          	lb	zero,0(s2)
    115e:	0100                	addi	s0,sp,128
    1160:	0f05                	addi	t5,t5,1
    1162:	06090903          	lb	s2,96(s2)
    1166:	0100                	addi	s0,sp,128
    1168:	1405                	addi	s0,s0,-31
    116a:	0200                	addi	s0,sp,256
    116c:	0104                	addi	s1,sp,128
    116e:	0306                	slli	t1,t1,0x1
    1170:	0900                	addi	s0,sp,144
    1172:	0002                	c.slli64	zero
    1174:	0501                	addi	a0,a0,0
    1176:	0009                	c.nop	2
    1178:	0402                	c.slli64	s0
    117a:	0601                	addi	a2,a2,0
    117c:	00090003          	lb	zero,0(s2)
    1180:	0100                	addi	s0,sp,128
    1182:	1005                	c.nop	-31
    1184:	04090803          	lb	a6,64(s2)
    1188:	0100                	addi	s0,sp,128
    118a:	1c05                	addi	s8,s8,-31
    118c:	0200                	addi	s0,sp,256
    118e:	0104                	addi	s1,sp,128
    1190:	0306                	slli	t1,t1,0x1
    1192:	0900                	addi	s0,sp,144
    1194:	0002                	c.slli64	zero
    1196:	0501                	addi	a0,a0,0
    1198:	0009                	c.nop	2
    119a:	0402                	c.slli64	s0
    119c:	0601                	addi	a2,a2,0
    119e:	08090003          	lb	zero,128(s2)
    11a2:	0100                	addi	s0,sp,128
    11a4:	0d05                	addi	s10,s10,1
    11a6:	0200                	addi	s0,sp,256
    11a8:	0304                	addi	s1,sp,384
    11aa:	0306                	slli	t1,t1,0x1
    11ac:	0958                	addi	a4,sp,148
    11ae:	0008                	0x8
    11b0:	0501                	addi	a0,a0,0
    11b2:	0019                	c.nop	6
    11b4:	0402                	c.slli64	s0
    11b6:	00030603          	lb	a2,0(t1)
    11ba:	0009                	c.nop	2
    11bc:	0100                	addi	s0,sp,128
    11be:	2105                	jal	15de <product2+0xaa>
    11c0:	0200                	addi	s0,sp,256
    11c2:	0304                	addi	s1,sp,384
    11c4:	02097f03          	0x2097f03
    11c8:	0100                	addi	s0,sp,128
    11ca:	1905                	addi	s2,s2,-31
    11cc:	0200                	addi	s0,sp,256
    11ce:	0304                	addi	s1,sp,384
    11d0:	04090103          	lb	sp,64(s2)
    11d4:	0100                	addi	s0,sp,128
    11d6:	1205                	addi	tp,tp,-31
    11d8:	0200                	addi	s0,sp,256
    11da:	0304                	addi	s1,sp,384
    11dc:	04090003          	lb	zero,64(s2)
    11e0:	0100                	addi	s0,sp,128
    11e2:	2105                	jal	1602 <product2+0xce>
    11e4:	0200                	addi	s0,sp,256
    11e6:	0304                	addi	s1,sp,384
    11e8:	0306                	slli	t1,t1,0x1
    11ea:	097f                	0x97f
    11ec:	0004                	0x4
    11ee:	0501                	addi	a0,a0,0
    11f0:	0311                	addi	t1,t1,4
    11f2:	0002090b          	0x2090b
    11f6:	0501                	addi	a0,a0,0
    11f8:	0629                	addi	a2,a2,10
    11fa:	00090003          	lb	zero,0(s2)
    11fe:	0100                	addi	s0,sp,128
    1200:	1c05                	addi	s8,s8,-31
    1202:	02090003          	lb	zero,32(s2)
    1206:	0100                	addi	s0,sp,128
    1208:	1305                	addi	t1,t1,-31
    120a:	0306                	slli	t1,t1,0x1
    120c:	097f                	0x97f
    120e:	0002                	c.slli64	zero
    1210:	0501                	addi	a0,a0,0
    1212:	0003061b          	0x3061b
    1216:	0009                	c.nop	2
    1218:	0100                	addi	s0,sp,128
    121a:	1305                	addi	t1,t1,-31
    121c:	02090003          	lb	zero,32(s2)
    1220:	0100                	addi	s0,sp,128
    1222:	0d05                	addi	s10,s10,1
    1224:	0200                	addi	s0,sp,256
    1226:	0204                	addi	s1,sp,256
    1228:	0306                	slli	t1,t1,0x1
    122a:	00040903          	lb	s2,0(s0)
    122e:	0501                	addi	a0,a0,0
    1230:	0025                	c.nop	9
    1232:	0402                	c.slli64	s0
    1234:	0602                	c.slli64	a2
    1236:	00090003          	lb	zero,0(s2)
    123a:	0100                	addi	s0,sp,128
    123c:	2105                	jal	165c <product2+0x128>
    123e:	0200                	addi	s0,sp,256
    1240:	0204                	addi	s1,sp,256
    1242:	04097c03          	0x4097c03
    1246:	0100                	addi	s0,sp,128
    1248:	1805                	addi	a6,a6,-31
    124a:	0200                	addi	s0,sp,256
    124c:	0204                	addi	s1,sp,256
    124e:	04090403          	lb	s0,64(s2)
    1252:	0100                	addi	s0,sp,128
    1254:	2105                	jal	1674 <product2+0x140>
    1256:	0200                	addi	s0,sp,256
    1258:	0204                	addi	s1,sp,256
    125a:	0306                	slli	t1,t1,0x1
    125c:	097c                	addi	a5,sp,156
    125e:	0004                	0x4
    1260:	0501                	addi	a0,a0,0
    1262:	000d                	c.nop	3
    1264:	0402                	c.slli64	s0
    1266:	090a0303          	lb	t1,144(s4) # ffff6090 <_stack_start+0xfffe6090>
    126a:	0002                	c.slli64	zero
    126c:	0501                	addi	a0,a0,0
    126e:	0030                	addi	a2,sp,8
    1270:	0402                	c.slli64	s0
    1272:	00030603          	lb	a2,0(t1)
    1276:	0009                	c.nop	2
    1278:	0100                	addi	s0,sp,128
    127a:	2705                	jal	199a <result+0x20e>
    127c:	0200                	addi	s0,sp,256
    127e:	0304                	addi	s1,sp,384
    1280:	06090003          	lb	zero,96(s2)
    1284:	0100                	addi	s0,sp,128
    1286:	2105                	jal	16a6 <product2+0x172>
    1288:	0200                	addi	s0,sp,256
    128a:	0304                	addi	s1,sp,384
    128c:	04097f03          	0x4097f03
    1290:	0100                	addi	s0,sp,128
    1292:	2705                	jal	19b2 <result+0x226>
    1294:	0200                	addi	s0,sp,256
    1296:	0304                	addi	s1,sp,384
    1298:	04090103          	lb	sp,64(s2)
    129c:	0100                	addi	s0,sp,128
    129e:	1905                	addi	s2,s2,-31
    12a0:	0200                	addi	s0,sp,256
    12a2:	0304                	addi	s1,sp,384
    12a4:	02090003          	lb	zero,32(s2)
    12a8:	0100                	addi	s0,sp,128
    12aa:	2105                	jal	16ca <product2+0x196>
    12ac:	0200                	addi	s0,sp,256
    12ae:	0304                	addi	s1,sp,384
    12b0:	0306                	slli	t1,t1,0x1
    12b2:	097f                	0x97f
    12b4:	0004                	0x4
    12b6:	0501                	addi	a0,a0,0
    12b8:	0311                	addi	t1,t1,4
    12ba:	0908                	addi	a0,sp,144
    12bc:	0002                	c.slli64	zero
    12be:	0501                	addi	a0,a0,0
    12c0:	0003062b          	0x3062b
    12c4:	0009                	c.nop	2
    12c6:	0100                	addi	s0,sp,128
    12c8:	1d05                	addi	s10,s10,-31
    12ca:	02090003          	lb	zero,32(s2)
    12ce:	0100                	addi	s0,sp,128
    12d0:	1305                	addi	t1,t1,-31
    12d2:	0306                	slli	t1,t1,0x1
    12d4:	097f                	0x97f
    12d6:	0002                	c.slli64	zero
    12d8:	0501                	addi	a0,a0,0
    12da:	061c                	addi	a5,sp,768
    12dc:	00090003          	lb	zero,0(s2)
    12e0:	0100                	addi	s0,sp,128
    12e2:	1305                	addi	t1,t1,-31
    12e4:	02090003          	lb	zero,32(s2)
    12e8:	0100                	addi	s0,sp,128
    12ea:	0d05                	addi	s10,s10,1
    12ec:	0200                	addi	s0,sp,256
    12ee:	0204                	addi	s1,sp,256
    12f0:	0306                	slli	t1,t1,0x1
    12f2:	00040903          	lb	s2,0(s0)
    12f6:	0501                	addi	a0,a0,0
    12f8:	04020027          	0x4020027
    12fc:	0602                	c.slli64	a2
    12fe:	00090003          	lb	zero,0(s2)
    1302:	0100                	addi	s0,sp,128
    1304:	2105                	jal	1724 <product2+0x1f0>
    1306:	0200                	addi	s0,sp,256
    1308:	0204                	addi	s1,sp,256
    130a:	04097c03          	0x4097c03
    130e:	0100                	addi	s0,sp,128
    1310:	1905                	addi	s2,s2,-31
    1312:	0200                	addi	s0,sp,256
    1314:	0204                	addi	s1,sp,256
    1316:	04090403          	lb	s0,64(s2)
    131a:	0100                	addi	s0,sp,128
    131c:	2105                	jal	173c <product2+0x208>
    131e:	0200                	addi	s0,sp,256
    1320:	0204                	addi	s1,sp,256
    1322:	0306                	slli	t1,t1,0x1
    1324:	097c                	addi	a5,sp,156
    1326:	0004                	0x4
    1328:	0501                	addi	a0,a0,0
    132a:	000d                	c.nop	3
    132c:	0402                	c.slli64	s0
    132e:	090a0303          	lb	t1,144(s4)
    1332:	0002                	c.slli64	zero
    1334:	0001                	nop
    1336:	0402                	c.slli64	s0
    1338:	09010303          	lb	t1,144(sp)
    133c:	0000                	unimp
    133e:	0501                	addi	a0,a0,0
    1340:	001c                	0x1c
    1342:	0402                	c.slli64	s0
    1344:	7f030603          	lb	a2,2032(t1)
    1348:	0009                	c.nop	2
    134a:	0100                	addi	s0,sp,128
    134c:	1905                	addi	s2,s2,-31
    134e:	0200                	addi	s0,sp,256
    1350:	0304                	addi	s1,sp,384
    1352:	06090003          	lb	zero,96(s2)
    1356:	0100                	addi	s0,sp,128
    1358:	2005                	jal	1378 <_bss_start+0x9c>
    135a:	0200                	addi	s0,sp,256
    135c:	0304                	addi	s1,sp,384
    135e:	04097f03          	0x4097f03
    1362:	0100                	addi	s0,sp,128
    1364:	1905                	addi	s2,s2,-31
    1366:	0200                	addi	s0,sp,256
    1368:	0304                	addi	s1,sp,384
    136a:	04090103          	lb	sp,64(s2)
    136e:	0100                	addi	s0,sp,128
    1370:	0200                	addi	s0,sp,256
    1372:	0304                	addi	s1,sp,384
    1374:	02090103          	lb	sp,32(s2)
    1378:	0100                	addi	s0,sp,128
    137a:	1205                	addi	tp,tp,-31
    137c:	0200                	addi	s0,sp,256
    137e:	0304                	addi	s1,sp,384
    1380:	04090003          	lb	zero,64(s2)
    1384:	0100                	addi	s0,sp,128
    1386:	2005                	jal	13a6 <_bss_start+0xca>
    1388:	0200                	addi	s0,sp,256
    138a:	0304                	addi	s1,sp,384
    138c:	0306                	slli	t1,t1,0x1
    138e:	097e                	slli	s2,s2,0x1f
    1390:	0004                	0x4
    1392:	0501                	addi	a0,a0,0
    1394:	030d                	addi	t1,t1,3
    1396:	0909                	addi	s2,s2,2
    1398:	0002                	c.slli64	zero
    139a:	0501                	addi	a0,a0,0
    139c:	0003060f          	0x3060f
    13a0:	0009                	c.nop	2
    13a2:	0100                	addi	s0,sp,128
    13a4:	2405                	jal	15c4 <product2+0x90>
    13a6:	0200                	addi	s0,sp,256
    13a8:	0204                	addi	s1,sp,256
    13aa:	0306                	slli	t1,t1,0x1
    13ac:	097f                	0x97f
    13ae:	0002                	c.slli64	zero
    13b0:	0501                	addi	a0,a0,0
    13b2:	0026                	c.slli	zero,0x9
    13b4:	0402                	c.slli64	s0
    13b6:	0602                	c.slli64	a2
    13b8:	00090003          	lb	zero,0(s2)
    13bc:	0100                	addi	s0,sp,128
    13be:	0d05                	addi	s10,s10,1
    13c0:	0200                	addi	s0,sp,256
    13c2:	0304                	addi	s1,sp,384
    13c4:	0306                	slli	t1,t1,0x1
    13c6:	0909                	addi	s2,s2,2
    13c8:	0004                	0x4
    13ca:	0501                	addi	a0,a0,0
    13cc:	0012                	c.slli	zero,0x4
    13ce:	0402                	c.slli64	s0
    13d0:	00030603          	lb	a2,0(t1)
    13d4:	0009                	c.nop	2
    13d6:	0100                	addi	s0,sp,128
    13d8:	2105                	jal	17f8 <result+0x6c>
    13da:	0200                	addi	s0,sp,256
    13dc:	0304                	addi	s1,sp,384
    13de:	0306                	slli	t1,t1,0x1
    13e0:	097f                	0x97f
    13e2:	000a                	c.slli	zero,0x2
    13e4:	0501                	addi	a0,a0,0
    13e6:	0015                	c.nop	5
    13e8:	0402                	c.slli64	s0
    13ea:	0301                	addi	t1,t1,0
    13ec:	0900                	addi	s0,sp,144
    13ee:	0002                	c.slli64	zero
    13f0:	0501                	addi	a0,a0,0
    13f2:	0009                	c.nop	2
    13f4:	0402                	c.slli64	s0
    13f6:	0601                	addi	a2,a2,0
    13f8:	00090003          	lb	zero,0(s2)
    13fc:	0100                	addi	s0,sp,128
    13fe:	0200                	addi	s0,sp,256
    1400:	0304                	addi	s1,sp,384
    1402:	0306                	slli	t1,t1,0x1
    1404:	0918                	addi	a4,sp,144
    1406:	0006                	c.slli	zero,0x1
    1408:	0501                	addi	a0,a0,0
    140a:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    140e:	00030603          	lb	a2,0(t1)
    1412:	0009                	c.nop	2
    1414:	0100                	addi	s0,sp,128
    1416:	2505                	jal	1a36 <ti_2+0x52>
    1418:	0200                	addi	s0,sp,256
    141a:	0304                	addi	s1,sp,384
    141c:	0306                	slli	t1,t1,0x1
    141e:	097f                	0x97f
    1420:	000c                	0xc
    1422:	0501                	addi	a0,a0,0
    1424:	033c                	addi	a5,sp,392
    1426:	090a                	slli	s2,s2,0x2
    1428:	0006                	c.slli	zero,0x1
    142a:	0501                	addi	a0,a0,0
    142c:	0305                	addi	t1,t1,1
    142e:	0902                	c.slli64	s2
    1430:	0000                	unimp
    1432:	0301                	addi	t1,t1,0
    1434:	0901                	addi	s2,s2,0
    1436:	0000                	unimp
    1438:	0301                	addi	t1,t1,0
    143a:	0901                	addi	s2,s2,0
    143c:	0000                	unimp
    143e:	0501                	addi	a0,a0,0
    1440:	0609                	addi	a2,a2,2
    1442:	00090003          	lb	zero,0(s2)
    1446:	0100                	addi	s0,sp,128
    1448:	3c05                	jal	e78 <reset_handler+0x20>
    144a:	04097c03          	0x4097c03
    144e:	0100                	addi	s0,sp,128
    1450:	0905                	addi	s2,s2,1
    1452:	02090403          	lb	s0,32(s2)
    1456:	0100                	addi	s0,sp,128
    1458:	3c05                	jal	e88 <reset_handler+0x30>
    145a:	04097c03          	0x4097c03
    145e:	0100                	addi	s0,sp,128
    1460:	0905                	addi	s2,s2,1
    1462:	1c090403          	lb	s0,448(s2)
    1466:	0100                	addi	s0,sp,128
    1468:	06090103          	lb	sp,96(s2)
    146c:	0100                	addi	s0,sp,128
    146e:	06090103          	lb	sp,96(s2)
    1472:	0100                	addi	s0,sp,128
    1474:	06090203          	lb	tp,96(s2)
    1478:	0100                	addi	s0,sp,128
    147a:	06090103          	lb	sp,96(s2)
    147e:	0100                	addi	s0,sp,128
    1480:	06090103          	lb	sp,96(s2)
    1484:	0100                	addi	s0,sp,128
    1486:	06090103          	lb	sp,96(s2)
    148a:	0100                	addi	s0,sp,128
    148c:	3c05                	jal	ebc <zero_loop+0x8>
    148e:	04097503          	0x4097503
    1492:	0100                	addi	s0,sp,128
    1494:	0905                	addi	s2,s2,1
    1496:	06090403          	lb	s0,96(s2)
    149a:	0100                	addi	s0,sp,128
    149c:	0505                	addi	a0,a0,1
    149e:	0306                	slli	t1,t1,0x1
    14a0:	0901                	addi	s2,s2,0
    14a2:	0004                	0x4
    14a4:	0301                	addi	t1,t1,0
    14a6:	0901                	addi	s2,s2,0
    14a8:	0000                	unimp
    14aa:	0301                	addi	t1,t1,0
    14ac:	0902                	c.slli64	s2
    14ae:	0000                	unimp
    14b0:	0301                	addi	t1,t1,0
    14b2:	0901                	addi	s2,s2,0
    14b4:	0000                	unimp
    14b6:	0301                	addi	t1,t1,0
    14b8:	0901                	addi	s2,s2,0
    14ba:	0000                	unimp
    14bc:	0301                	addi	t1,t1,0
    14be:	0901                	addi	s2,s2,0
    14c0:	0000                	unimp
    14c2:	0501                	addi	a0,a0,0
    14c4:	0609                	addi	a2,a2,2
    14c6:	00090003          	lb	zero,0(s2)
    14ca:	0100                	addi	s0,sp,128
    14cc:	0505                	addi	a0,a0,1
    14ce:	0306                	slli	t1,t1,0x1
    14d0:	0901                	addi	s2,s2,0
    14d2:	0002                	c.slli64	zero
    14d4:	0301                	addi	t1,t1,0
    14d6:	0901                	addi	s2,s2,0
    14d8:	0000                	unimp
    14da:	0301                	addi	t1,t1,0
    14dc:	0901                	addi	s2,s2,0
    14de:	0000                	unimp
    14e0:	0301                	addi	t1,t1,0
    14e2:	0901                	addi	s2,s2,0
    14e4:	0000                	unimp
    14e6:	0301                	addi	t1,t1,0
    14e8:	0902                	c.slli64	s2
    14ea:	0000                	unimp
    14ec:	0301                	addi	t1,t1,0
    14ee:	0901                	addi	s2,s2,0
    14f0:	0000                	unimp
    14f2:	0501                	addi	a0,a0,0
    14f4:	060c                	addi	a1,sp,768
    14f6:	00090003          	lb	zero,0(s2)
    14fa:	0100                	addi	s0,sp,128
    14fc:	1105                	addi	sp,sp,-31
    14fe:	02090303          	lb	t1,32(s2)
    1502:	0100                	addi	s0,sp,128
    1504:	0200                	addi	s0,sp,256
    1506:	0104                	addi	s1,sp,128
    1508:	0306                	slli	t1,t1,0x1
    150a:	097d                	addi	s2,s2,31
    150c:	0008                	0x8
    150e:	0501                	addi	a0,a0,0
    1510:	0005                	c.nop	1
    1512:	0402                	c.slli64	s0
    1514:	0601                	addi	a2,a2,0
    1516:	00090003          	lb	zero,0(s2)
    151a:	0100                	addi	s0,sp,128
    151c:	0306                	slli	t1,t1,0x1
    151e:	0906                	slli	s2,s2,0x1
    1520:	0004                	0x4
    1522:	0301                	addi	t1,t1,0
    1524:	0901                	addi	s2,s2,0
    1526:	0008                	0x8
    1528:	0301                	addi	t1,t1,0
    152a:	0905                	addi	s2,s2,1
    152c:	0008                	0x8
    152e:	0501                	addi	a0,a0,0
    1530:	060d                	addi	a2,a2,3
    1532:	00090003          	lb	zero,0(s2)
    1536:	0100                	addi	s0,sp,128
    1538:	0505                	addi	a0,a0,1
    153a:	0306                	slli	t1,t1,0x1
    153c:	00060903          	lb	s2,0(a2) # 17000 <_stack_start+0x7000>
    1540:	0501                	addi	a0,a0,0
    1542:	0900030b          	0x900030b
    1546:	0000                	unimp
    1548:	0501                	addi	a0,a0,0
    154a:	0624                	addi	s1,sp,776
    154c:	00091603          	lh	a2,0(s2)
    1550:	0100                	addi	s0,sp,128
    1552:	1005                	c.nop	-31
    1554:	08096e03          	0x8096e03
    1558:	0100                	addi	s0,sp,128
    155a:	0905                	addi	s2,s2,1
    155c:	0200                	addi	s0,sp,256
    155e:	0304                	addi	s1,sp,384
    1560:	0306                	slli	t1,t1,0x1
    1562:	0970                	addi	a2,sp,156
    1564:	0004                	0x4
    1566:	0501                	addi	a0,a0,0
    1568:	0011                	c.nop	4
    156a:	0402                	c.slli64	s0
    156c:	00030603          	lb	a2,0(t1)
    1570:	0409                	addi	s0,s0,2
    1572:	0100                	addi	s0,sp,128
    1574:	0200                	addi	s0,sp,256
    1576:	0304                	addi	s1,sp,384
    1578:	04090103          	lb	sp,64(s2)
    157c:	0100                	addi	s0,sp,128
    157e:	0200                	addi	s0,sp,256
    1580:	0304                	addi	s1,sp,384
    1582:	02097f03          	0x2097f03
    1586:	0100                	addi	s0,sp,128
    1588:	0905                	addi	s2,s2,1
    158a:	0200                	addi	s0,sp,256
    158c:	0304                	addi	s1,sp,384
    158e:	0306                	slli	t1,t1,0x1
    1590:	0901                	addi	s2,s2,0
    1592:	0004                	0x4
    1594:	0501                	addi	a0,a0,0
    1596:	0011                	c.nop	4
    1598:	0402                	c.slli64	s0
    159a:	00030603          	lb	a2,0(t1)
    159e:	0009                	c.nop	2
    15a0:	0100                	addi	s0,sp,128
    15a2:	1b05                	addi	s6,s6,-31
    15a4:	0200                	addi	s0,sp,256
    15a6:	0304                	addi	s1,sp,384
    15a8:	0306                	slli	t1,t1,0x1
    15aa:	097c                	addi	a5,sp,156
    15ac:	0004                	0x4
    15ae:	0501                	addi	a0,a0,0
    15b0:	0311                	addi	t1,t1,4
    15b2:	0915                	addi	s2,s2,5
    15b4:	0004                	0x4
    15b6:	0501                	addi	a0,a0,0
    15b8:	00030623          	sb	zero,12(t1)
    15bc:	0009                	c.nop	2
    15be:	0100                	addi	s0,sp,128
    15c0:	1905                	addi	s2,s2,-31
    15c2:	02090003          	lb	zero,32(s2)
    15c6:	0100                	addi	s0,sp,128
    15c8:	1305                	addi	t1,t1,-31
    15ca:	0306                	slli	t1,t1,0x1
    15cc:	097f                	0x97f
    15ce:	0002                	c.slli64	zero
    15d0:	0501                	addi	a0,a0,0
    15d2:	0618                	addi	a4,sp,768
    15d4:	00090003          	lb	zero,0(s2)
    15d8:	0100                	addi	s0,sp,128
    15da:	1305                	addi	t1,t1,-31
    15dc:	02090003          	lb	zero,32(s2)
    15e0:	0100                	addi	s0,sp,128
    15e2:	0d05                	addi	s10,s10,1
    15e4:	0200                	addi	s0,sp,256
    15e6:	0204                	addi	s1,sp,256
    15e8:	0306                	slli	t1,t1,0x1
    15ea:	00040903          	lb	s2,0(s0)
    15ee:	0501                	addi	a0,a0,0
    15f0:	001f 0402 0602      	0x6020402001f
    15f6:	00090003          	lb	zero,0(s2)
    15fa:	0100                	addi	s0,sp,128
    15fc:	2005                	jal	161c <product2+0xe8>
    15fe:	0200                	addi	s0,sp,256
    1600:	0204                	addi	s1,sp,256
    1602:	04097c03          	0x4097c03
    1606:	0100                	addi	s0,sp,128
    1608:	1505                	addi	a0,a0,-31
    160a:	0200                	addi	s0,sp,256
    160c:	0204                	addi	s1,sp,256
    160e:	02090403          	lb	s0,32(s2)
    1612:	0100                	addi	s0,sp,128
    1614:	2005                	jal	1634 <product2+0x100>
    1616:	0200                	addi	s0,sp,256
    1618:	0204                	addi	s1,sp,256
    161a:	0306                	slli	t1,t1,0x1
    161c:	097c                	addi	a5,sp,156
    161e:	0002                	c.slli64	zero
    1620:	0501                	addi	a0,a0,0
    1622:	0015                	c.nop	5
    1624:	0402                	c.slli64	s0
    1626:	0301                	addi	t1,t1,0
    1628:	0900                	addi	s0,sp,144
    162a:	0000                	unimp
    162c:	0501                	addi	a0,a0,0
    162e:	0009                	c.nop	2
    1630:	0402                	c.slli64	s0
    1632:	0601                	addi	a2,a2,0
    1634:	00090003          	lb	zero,0(s2)
    1638:	0100                	addi	s0,sp,128
    163a:	1005                	c.nop	-31
    163c:	0e090903          	lb	s2,224(s2)
    1640:	0100                	addi	s0,sp,128
    1642:	1505                	addi	a0,a0,-31
    1644:	0200                	addi	s0,sp,256
    1646:	0104                	addi	s1,sp,128
    1648:	0306                	slli	t1,t1,0x1
    164a:	0900                	addi	s0,sp,144
    164c:	0002                	c.slli64	zero
    164e:	0501                	addi	a0,a0,0
    1650:	0009                	c.nop	2
    1652:	0402                	c.slli64	s0
    1654:	0601                	addi	a2,a2,0
    1656:	00090003          	lb	zero,0(s2)
    165a:	0100                	addi	s0,sp,128
    165c:	0306                	slli	t1,t1,0x1
    165e:	0908                	addi	a0,sp,144
    1660:	0004                	0x4
    1662:	0501                	addi	a0,a0,0
    1664:	0003060f          	0x3060f
    1668:	0009                	c.nop	2
    166a:	0100                	addi	s0,sp,128
    166c:	0905                	addi	s2,s2,1
    166e:	0306                	slli	t1,t1,0x1
    1670:	0901                	addi	s2,s2,0
    1672:	000c                	0xc
    1674:	0501                	addi	a0,a0,0
    1676:	0019                	c.nop	6
    1678:	0402                	c.slli64	s0
    167a:	0301                	addi	t1,t1,0
    167c:	0900                	addi	s0,sp,144
    167e:	0004                	0x4
    1680:	0501                	addi	a0,a0,0
    1682:	0009                	c.nop	2
    1684:	0402                	c.slli64	s0
    1686:	0601                	addi	a2,a2,0
    1688:	00090003          	lb	zero,0(s2)
    168c:	0100                	addi	s0,sp,128
    168e:	1005                	c.nop	-31
    1690:	0a090603          	lb	a2,160(s2)
    1694:	0100                	addi	s0,sp,128
    1696:	1505                	addi	a0,a0,-31
    1698:	0200                	addi	s0,sp,256
    169a:	0104                	addi	s1,sp,128
    169c:	0306                	slli	t1,t1,0x1
    169e:	0900                	addi	s0,sp,144
    16a0:	0002                	c.slli64	zero
    16a2:	0501                	addi	a0,a0,0
    16a4:	0009                	c.nop	2
    16a6:	0402                	c.slli64	s0
    16a8:	0601                	addi	a2,a2,0
    16aa:	00090003          	lb	zero,0(s2)
    16ae:	0100                	addi	s0,sp,128
    16b0:	06090003          	lb	zero,96(s2)
    16b4:	0100                	addi	s0,sp,128
    16b6:	1005                	c.nop	-31
    16b8:	02090603          	lb	a2,32(s2)
    16bc:	0100                	addi	s0,sp,128
    16be:	1505                	addi	a0,a0,-31
    16c0:	0200                	addi	s0,sp,256
    16c2:	0104                	addi	s1,sp,128
    16c4:	0306                	slli	t1,t1,0x1
    16c6:	0900                	addi	s0,sp,144
    16c8:	0002                	c.slli64	zero
    16ca:	0501                	addi	a0,a0,0
    16cc:	0009                	c.nop	2
    16ce:	0402                	c.slli64	s0
    16d0:	0601                	addi	a2,a2,0
    16d2:	00090003          	lb	zero,0(s2)
    16d6:	0100                	addi	s0,sp,128
    16d8:	0306                	slli	t1,t1,0x1
    16da:	00040907          	0x40907
    16de:	0501                	addi	a0,a0,0
    16e0:	0610                	addi	a2,sp,768
    16e2:	00090003          	lb	zero,0(s2)
    16e6:	0100                	addi	s0,sp,128
    16e8:	0505                	addi	a0,a0,1
    16ea:	0306                	slli	t1,t1,0x1
    16ec:	0904                	addi	s1,sp,144
    16ee:	000e                	c.slli	zero,0x3
    16f0:	0501                	addi	a0,a0,0
    16f2:	0309                	addi	t1,t1,2
    16f4:	00060903          	lb	s2,0(a2)
    16f8:	0501                	addi	a0,a0,0
    16fa:	0610                	addi	a2,sp,768
    16fc:	02090003          	lb	zero,32(s2)
    1700:	0100                	addi	s0,sp,128
    1702:	1505                	addi	a0,a0,-31
    1704:	0200                	addi	s0,sp,256
    1706:	0104                	addi	s1,sp,128
    1708:	0306                	slli	t1,t1,0x1
    170a:	0900                	addi	s0,sp,144
    170c:	0002                	c.slli64	zero
    170e:	0501                	addi	a0,a0,0
    1710:	0009                	c.nop	2
    1712:	0402                	c.slli64	s0
    1714:	0601                	addi	a2,a2,0
    1716:	00090003          	lb	zero,0(s2)
    171a:	0100                	addi	s0,sp,128
    171c:	0306                	slli	t1,t1,0x1
    171e:	090a                	slli	s2,s2,0x2
    1720:	0004                	0x4
    1722:	0501                	addi	a0,a0,0
    1724:	0610                	addi	a2,sp,768
    1726:	00090003          	lb	zero,0(s2)
    172a:	0100                	addi	s0,sp,128
    172c:	0505                	addi	a0,a0,1
    172e:	0306                	slli	t1,t1,0x1
    1730:	0904                	addi	s1,sp,144
    1732:	0010                	0x10
    1734:	0501                	addi	a0,a0,0
    1736:	0309                	addi	t1,t1,2
    1738:	00060903          	lb	s2,0(a2)
    173c:	0501                	addi	a0,a0,0
    173e:	0610                	addi	a2,sp,768
    1740:	00090003          	lb	zero,0(s2)
    1744:	0100                	addi	s0,sp,128
    1746:	1505                	addi	a0,a0,-31
    1748:	0200                	addi	s0,sp,256
    174a:	0104                	addi	s1,sp,128
    174c:	0306                	slli	t1,t1,0x1
    174e:	0900                	addi	s0,sp,144
    1750:	0002                	c.slli64	zero
    1752:	0501                	addi	a0,a0,0
    1754:	0009                	c.nop	2
    1756:	0402                	c.slli64	s0
    1758:	0601                	addi	a2,a2,0
    175a:	00090003          	lb	zero,0(s2)
    175e:	0100                	addi	s0,sp,128
    1760:	1005                	c.nop	-31
    1762:	06090803          	lb	a6,96(s2)
    1766:	0100                	addi	s0,sp,128
    1768:	1505                	addi	a0,a0,-31
    176a:	0200                	addi	s0,sp,256
    176c:	0104                	addi	s1,sp,128
    176e:	0306                	slli	t1,t1,0x1
    1770:	0900                	addi	s0,sp,144
    1772:	0002                	c.slli64	zero
    1774:	0501                	addi	a0,a0,0
    1776:	0009                	c.nop	2
    1778:	0402                	c.slli64	s0
    177a:	0601                	addi	a2,a2,0
    177c:	00090003          	lb	zero,0(s2)
    1780:	0100                	addi	s0,sp,128
    1782:	1005                	c.nop	-31
    1784:	06090503          	lb	a0,96(s2)
    1788:	0100                	addi	s0,sp,128
    178a:	1505                	addi	a0,a0,-31
    178c:	0200                	addi	s0,sp,256
    178e:	0104                	addi	s1,sp,128
    1790:	0306                	slli	t1,t1,0x1
    1792:	0900                	addi	s0,sp,144
    1794:	0002                	c.slli64	zero
    1796:	0501                	addi	a0,a0,0
    1798:	0009                	c.nop	2
    179a:	0402                	c.slli64	s0
    179c:	0601                	addi	a2,a2,0
    179e:	00090003          	lb	zero,0(s2)
    17a2:	0100                	addi	s0,sp,128
    17a4:	0105                	addi	sp,sp,1
    17a6:	0306                	slli	t1,t1,0x1
    17a8:	090a                	slli	s2,s2,0x2
    17aa:	0004                	0x4
    17ac:	0301                	addi	t1,t1,0
    17ae:	0901                	addi	s2,s2,0
    17b0:	0008                	0x8
    17b2:	0301                	addi	t1,t1,0
    17b4:	0901                	addi	s2,s2,0
    17b6:	0008                	0x8
    17b8:	0301                	addi	t1,t1,0
    17ba:	0901                	addi	s2,s2,0
    17bc:	000e                	c.slli	zero,0x3
    17be:	0501                	addi	a0,a0,0
    17c0:	0309                	addi	t1,t1,2
    17c2:	0902                	c.slli64	s2
    17c4:	0008                	0x8
    17c6:	0501                	addi	a0,a0,0
    17c8:	0612                	slli	a2,a2,0x4
    17ca:	097fa503          	lw	a0,151(t6)
    17ce:	0000                	unimp
    17d0:	0501                	addi	a0,a0,0
    17d2:	0310                	addi	a2,sp,384
    17d4:	020900db          	0x20900db
    17d8:	0100                	addi	s0,sp,128
    17da:	1505                	addi	a0,a0,-31
    17dc:	0200                	addi	s0,sp,256
    17de:	0104                	addi	s1,sp,128
    17e0:	0306                	slli	t1,t1,0x1
    17e2:	0900                	addi	s0,sp,144
    17e4:	0002                	c.slli64	zero
    17e6:	0501                	addi	a0,a0,0
    17e8:	0009                	c.nop	2
    17ea:	0402                	c.slli64	s0
    17ec:	0601                	addi	a2,a2,0
    17ee:	00090003          	lb	zero,0(s2)
    17f2:	0100                	addi	s0,sp,128
    17f4:	0b05                	addi	s6,s6,1
    17f6:	0306                	slli	t1,t1,0x1
    17f8:	04097fa3          	0x4097fa3
    17fc:	0100                	addi	s0,sp,128
    17fe:	1005                	c.nop	-31
    1800:	0306                	slli	t1,t1,0x1
    1802:	00e8                	addi	a0,sp,76
    1804:	0409                	addi	s0,s0,2
    1806:	0100                	addi	s0,sp,128
    1808:	02090103          	lb	sp,32(s2)
    180c:	0100                	addi	s0,sp,128
    180e:	1505                	addi	a0,a0,-31
    1810:	0200                	addi	s0,sp,256
    1812:	0104                	addi	s1,sp,128
    1814:	0306                	slli	t1,t1,0x1
    1816:	097f                	0x97f
    1818:	0002                	c.slli64	zero
    181a:	0501                	addi	a0,a0,0
    181c:	0009                	c.nop	2
    181e:	0402                	c.slli64	s0
    1820:	0601                	addi	a2,a2,0
    1822:	00090003          	lb	zero,0(s2)
    1826:	0100                	addi	s0,sp,128
    1828:	1505                	addi	a0,a0,-31
    182a:	0200                	addi	s0,sp,256
    182c:	0104                	addi	s1,sp,128
    182e:	0306                	slli	t1,t1,0x1
    1830:	090c                	addi	a1,sp,144
    1832:	000c                	0xc
    1834:	0501                	addi	a0,a0,0
    1836:	0009                	c.nop	2
    1838:	0402                	c.slli64	s0
    183a:	0601                	addi	a2,a2,0
    183c:	00090003          	lb	zero,0(s2)
    1840:	0100                	addi	s0,sp,128
    1842:	0306                	slli	t1,t1,0x1
    1844:	0905                	addi	s2,s2,1
    1846:	0004                	0x4
    1848:	0301                	addi	t1,t1,0
    184a:	0901                	addi	s2,s2,0
    184c:	0000                	unimp
    184e:	0501                	addi	a0,a0,0
    1850:	0605                	addi	a2,a2,1
    1852:	00090103          	lb	sp,0(s2)
    1856:	0100                	addi	s0,sp,128
    1858:	1105                	addi	sp,sp,-31
    185a:	0306                	slli	t1,t1,0x1
    185c:	7f94                	flw	fa3,56(a5)
    185e:	2a09                	jal	1970 <result+0x1e4>
    1860:	0100                	addi	s0,sp,128
    1862:	2305                	jal	1d82 <random_keys+0x20e>
    1864:	0306                	slli	t1,t1,0x1
    1866:	0900                	addi	s0,sp,144
    1868:	0000                	unimp
    186a:	0501                	addi	a0,a0,0
    186c:	0319                	addi	t1,t1,6
    186e:	0900                	addi	s0,sp,144
    1870:	0002                	c.slli64	zero
    1872:	0501                	addi	a0,a0,0
    1874:	7f030613          	addi	a2,t1,2032
    1878:	0209                	addi	tp,tp,2
    187a:	0100                	addi	s0,sp,128
    187c:	1805                	addi	a6,a6,-31
    187e:	0306                	slli	t1,t1,0x1
    1880:	0900                	addi	s0,sp,144
    1882:	0000                	unimp
    1884:	0501                	addi	a0,a0,0
    1886:	09000313          	li	t1,144
    188a:	0002                	c.slli64	zero
    188c:	0501                	addi	a0,a0,0
    188e:	000d                	c.nop	3
    1890:	0402                	c.slli64	s0
    1892:	0602                	c.slli64	a2
    1894:	04090303          	lb	t1,64(s2)
    1898:	0100                	addi	s0,sp,128
    189a:	1f05                	addi	t5,t5,-31
    189c:	0200                	addi	s0,sp,256
    189e:	0204                	addi	s1,sp,256
    18a0:	0306                	slli	t1,t1,0x1
    18a2:	0900                	addi	s0,sp,144
    18a4:	0000                	unimp
    18a6:	0501                	addi	a0,a0,0
    18a8:	0020                	addi	s0,sp,8
    18aa:	0402                	c.slli64	s0
    18ac:	0302                	c.slli64	t1
    18ae:	097c                	addi	a5,sp,156
    18b0:	0004                	0x4
    18b2:	0501                	addi	a0,a0,0
    18b4:	0015                	c.nop	5
    18b6:	0402                	c.slli64	s0
    18b8:	0302                	c.slli64	t1
    18ba:	0904                	addi	s1,sp,144
    18bc:	0004                	0x4
    18be:	0501                	addi	a0,a0,0
    18c0:	0020                	addi	s0,sp,8
    18c2:	0402                	c.slli64	s0
    18c4:	0602                	c.slli64	a2
    18c6:	04097c03          	0x4097c03
    18ca:	0100                	addi	s0,sp,128
    18cc:	0d05                	addi	s10,s10,1
    18ce:	0200                	addi	s0,sp,256
    18d0:	0304                	addi	s1,sp,384
    18d2:	02090a03          	lb	s4,32(s2)
    18d6:	0100                	addi	s0,sp,128
    18d8:	2205                	jal	19f8 <ti_2+0x14>
    18da:	0200                	addi	s0,sp,256
    18dc:	0304                	addi	s1,sp,384
    18de:	0306                	slli	t1,t1,0x1
    18e0:	0900                	addi	s0,sp,144
    18e2:	0000                	unimp
    18e4:	0501                	addi	a0,a0,0
    18e6:	002a                	c.slli	zero,0xa
    18e8:	0402                	c.slli64	s0
    18ea:	097f0303          	lb	t1,151(t5)
    18ee:	0008                	0x8
    18f0:	0501                	addi	a0,a0,0
    18f2:	001d                	c.nop	7
    18f4:	0402                	c.slli64	s0
    18f6:	09010303          	lb	t1,144(sp)
    18fa:	0004                	0x4
    18fc:	0501                	addi	a0,a0,0
    18fe:	002a                	c.slli	zero,0xa
    1900:	0402                	c.slli64	s0
    1902:	7f030603          	lb	a2,2032(t1)
    1906:	0409                	addi	s0,s0,2
    1908:	0100                	addi	s0,sp,128
    190a:	0d05                	addi	s10,s10,1
    190c:	0200                	addi	s0,sp,256
    190e:	0304                	addi	s1,sp,384
    1910:	02090703          	lb	a4,32(s2)
    1914:	0100                	addi	s0,sp,128
    1916:	1b05                	addi	s6,s6,-31
    1918:	0200                	addi	s0,sp,256
    191a:	0304                	addi	s1,sp,384
    191c:	0306                	slli	t1,t1,0x1
    191e:	0900                	addi	s0,sp,144
    1920:	0000                	unimp
    1922:	0501                	addi	a0,a0,0
    1924:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1928:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    192c:	0004                	0x4
    192e:	0501                	addi	a0,a0,0
    1930:	001f 0402 0303      	0x3030402001f
    1936:	0900                	addi	s0,sp,144
    1938:	0004                	0x4
    193a:	0501                	addi	a0,a0,0
    193c:	0015                	c.nop	5
    193e:	0402                	c.slli64	s0
    1940:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1944:	0004                	0x4
    1946:	0501                	addi	a0,a0,0
    1948:	0020                	addi	s0,sp,8
    194a:	0402                	c.slli64	s0
    194c:	097f0303          	lb	t1,151(t5)
    1950:	0004                	0x4
    1952:	0501                	addi	a0,a0,0
    1954:	001f 0402 0303      	0x3030402001f
    195a:	0901                	addi	s2,s2,0
    195c:	0002                	c.slli64	zero
    195e:	0501                	addi	a0,a0,0
    1960:	0015                	c.nop	5
    1962:	0402                	c.slli64	s0
    1964:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1968:	0002                	c.slli64	zero
    196a:	0501                	addi	a0,a0,0
    196c:	0020                	addi	s0,sp,8
    196e:	0402                	c.slli64	s0
    1970:	7f030603          	lb	a2,2032(t1)
    1974:	0209                	addi	tp,tp,2
    1976:	0100                	addi	s0,sp,128
    1978:	1105                	addi	sp,sp,-31
    197a:	04090803          	lb	a6,64(s2)
    197e:	0100                	addi	s0,sp,128
    1980:	2305                	jal	1ea0 <random_keys+0x32c>
    1982:	0306                	slli	t1,t1,0x1
    1984:	0900                	addi	s0,sp,144
    1986:	0000                	unimp
    1988:	0501                	addi	a0,a0,0
    198a:	0319                	addi	t1,t1,6
    198c:	0900                	addi	s0,sp,144
    198e:	0002                	c.slli64	zero
    1990:	0501                	addi	a0,a0,0
    1992:	7f030613          	addi	a2,t1,2032
    1996:	0209                	addi	tp,tp,2
    1998:	0100                	addi	s0,sp,128
    199a:	1805                	addi	a6,a6,-31
    199c:	0306                	slli	t1,t1,0x1
    199e:	0900                	addi	s0,sp,144
    19a0:	0000                	unimp
    19a2:	0501                	addi	a0,a0,0
    19a4:	09000313          	li	t1,144
    19a8:	0002                	c.slli64	zero
    19aa:	0501                	addi	a0,a0,0
    19ac:	000d                	c.nop	3
    19ae:	0402                	c.slli64	s0
    19b0:	0602                	c.slli64	a2
    19b2:	04090303          	lb	t1,64(s2)
    19b6:	0100                	addi	s0,sp,128
    19b8:	1f05                	addi	t5,t5,-31
    19ba:	0200                	addi	s0,sp,256
    19bc:	0204                	addi	s1,sp,256
    19be:	0306                	slli	t1,t1,0x1
    19c0:	0900                	addi	s0,sp,144
    19c2:	0000                	unimp
    19c4:	0501                	addi	a0,a0,0
    19c6:	0020                	addi	s0,sp,8
    19c8:	0402                	c.slli64	s0
    19ca:	0302                	c.slli64	t1
    19cc:	097c                	addi	a5,sp,156
    19ce:	0004                	0x4
    19d0:	0501                	addi	a0,a0,0
    19d2:	0015                	c.nop	5
    19d4:	0402                	c.slli64	s0
    19d6:	0302                	c.slli64	t1
    19d8:	0904                	addi	s1,sp,144
    19da:	0004                	0x4
    19dc:	0501                	addi	a0,a0,0
    19de:	0020                	addi	s0,sp,8
    19e0:	0402                	c.slli64	s0
    19e2:	0602                	c.slli64	a2
    19e4:	04097c03          	0x4097c03
    19e8:	0100                	addi	s0,sp,128
    19ea:	1105                	addi	sp,sp,-31
    19ec:	02091003          	lh	zero,32(s2)
    19f0:	0100                	addi	s0,sp,128
    19f2:	2305                	jal	1f12 <random_keys+0x39e>
    19f4:	0306                	slli	t1,t1,0x1
    19f6:	0900                	addi	s0,sp,144
    19f8:	0000                	unimp
    19fa:	0501                	addi	a0,a0,0
    19fc:	0319                	addi	t1,t1,6
    19fe:	0900                	addi	s0,sp,144
    1a00:	0002                	c.slli64	zero
    1a02:	0501                	addi	a0,a0,0
    1a04:	7f030613          	addi	a2,t1,2032
    1a08:	0209                	addi	tp,tp,2
    1a0a:	0100                	addi	s0,sp,128
    1a0c:	1805                	addi	a6,a6,-31
    1a0e:	0306                	slli	t1,t1,0x1
    1a10:	0900                	addi	s0,sp,144
    1a12:	0000                	unimp
    1a14:	0501                	addi	a0,a0,0
    1a16:	09000313          	li	t1,144
    1a1a:	0002                	c.slli64	zero
    1a1c:	0501                	addi	a0,a0,0
    1a1e:	000d                	c.nop	3
    1a20:	0402                	c.slli64	s0
    1a22:	0602                	c.slli64	a2
    1a24:	04090303          	lb	t1,64(s2)
    1a28:	0100                	addi	s0,sp,128
    1a2a:	1f05                	addi	t5,t5,-31
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0204                	addi	s1,sp,256
    1a30:	0306                	slli	t1,t1,0x1
    1a32:	0900                	addi	s0,sp,144
    1a34:	0000                	unimp
    1a36:	0501                	addi	a0,a0,0
    1a38:	0020                	addi	s0,sp,8
    1a3a:	0402                	c.slli64	s0
    1a3c:	0302                	c.slli64	t1
    1a3e:	097c                	addi	a5,sp,156
    1a40:	0004                	0x4
    1a42:	0501                	addi	a0,a0,0
    1a44:	0015                	c.nop	5
    1a46:	0402                	c.slli64	s0
    1a48:	0302                	c.slli64	t1
    1a4a:	0904                	addi	s1,sp,144
    1a4c:	0004                	0x4
    1a4e:	0501                	addi	a0,a0,0
    1a50:	0020                	addi	s0,sp,8
    1a52:	0402                	c.slli64	s0
    1a54:	0602                	c.slli64	a2
    1a56:	04097c03          	0x4097c03
    1a5a:	0100                	addi	s0,sp,128
    1a5c:	1105                	addi	sp,sp,-31
    1a5e:	02091303          	lh	t1,32(s2)
    1a62:	0100                	addi	s0,sp,128
    1a64:	2305                	jal	1f84 <random_keys+0x410>
    1a66:	0306                	slli	t1,t1,0x1
    1a68:	0900                	addi	s0,sp,144
    1a6a:	0000                	unimp
    1a6c:	0501                	addi	a0,a0,0
    1a6e:	0319                	addi	t1,t1,6
    1a70:	0900                	addi	s0,sp,144
    1a72:	0002                	c.slli64	zero
    1a74:	0501                	addi	a0,a0,0
    1a76:	7f030613          	addi	a2,t1,2032
    1a7a:	0409                	addi	s0,s0,2
    1a7c:	0100                	addi	s0,sp,128
    1a7e:	1805                	addi	a6,a6,-31
    1a80:	0306                	slli	t1,t1,0x1
    1a82:	0900                	addi	s0,sp,144
    1a84:	0000                	unimp
    1a86:	0501                	addi	a0,a0,0
    1a88:	09000313          	li	t1,144
    1a8c:	0004                	0x4
    1a8e:	0501                	addi	a0,a0,0
    1a90:	000d                	c.nop	3
    1a92:	0402                	c.slli64	s0
    1a94:	0602                	c.slli64	a2
    1a96:	04090303          	lb	t1,64(s2)
    1a9a:	0100                	addi	s0,sp,128
    1a9c:	1f05                	addi	t5,t5,-31
    1a9e:	0200                	addi	s0,sp,256
    1aa0:	0204                	addi	s1,sp,256
    1aa2:	0306                	slli	t1,t1,0x1
    1aa4:	0900                	addi	s0,sp,144
    1aa6:	0000                	unimp
    1aa8:	0501                	addi	a0,a0,0
    1aaa:	0020                	addi	s0,sp,8
    1aac:	0402                	c.slli64	s0
    1aae:	0302                	c.slli64	t1
    1ab0:	097c                	addi	a5,sp,156
    1ab2:	0004                	0x4
    1ab4:	0501                	addi	a0,a0,0
    1ab6:	0015                	c.nop	5
    1ab8:	0402                	c.slli64	s0
    1aba:	0302                	c.slli64	t1
    1abc:	0904                	addi	s1,sp,144
    1abe:	0004                	0x4
    1ac0:	0501                	addi	a0,a0,0
    1ac2:	0020                	addi	s0,sp,8
    1ac4:	0402                	c.slli64	s0
    1ac6:	0602                	c.slli64	a2
    1ac8:	04097c03          	0x4097c03
    1acc:	0100                	addi	s0,sp,128
    1ace:	0d05                	addi	s10,s10,1
    1ad0:	0200                	addi	s0,sp,256
    1ad2:	0304                	addi	s1,sp,384
    1ad4:	02090903          	lb	s2,32(s2)
    1ad8:	0100                	addi	s0,sp,128
    1ada:	1905                	addi	s2,s2,-31
    1adc:	0200                	addi	s0,sp,256
    1ade:	0304                	addi	s1,sp,384
    1ae0:	0306                	slli	t1,t1,0x1
    1ae2:	0900                	addi	s0,sp,144
    1ae4:	0000                	unimp
    1ae6:	0501                	addi	a0,a0,0
    1ae8:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1aec:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1af0:	000a                	c.slli	zero,0x2
    1af2:	0501                	addi	a0,a0,0
    1af4:	001d                	c.nop	7
    1af6:	0402                	c.slli64	s0
    1af8:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1afc:	0004                	0x4
    1afe:	0501                	addi	a0,a0,0
    1b00:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b04:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b08:	0004                	0x4
    1b0a:	0501                	addi	a0,a0,0
    1b0c:	0020                	addi	s0,sp,8
    1b0e:	0402                	c.slli64	s0
    1b10:	097f0303          	lb	t1,151(t5)
    1b14:	0004                	0x4
    1b16:	0501                	addi	a0,a0,0
    1b18:	001d                	c.nop	7
    1b1a:	0402                	c.slli64	s0
    1b1c:	09010303          	lb	t1,144(sp)
    1b20:	0002                	c.slli64	zero
    1b22:	0501                	addi	a0,a0,0
    1b24:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b28:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b2c:	0002                	c.slli64	zero
    1b2e:	0501                	addi	a0,a0,0
    1b30:	0020                	addi	s0,sp,8
    1b32:	0402                	c.slli64	s0
    1b34:	7f030603          	lb	a2,2032(t1)
    1b38:	0209                	addi	tp,tp,2
    1b3a:	0100                	addi	s0,sp,128
    1b3c:	1105                	addi	sp,sp,-31
    1b3e:	04090703          	lb	a4,64(s2)
    1b42:	0100                	addi	s0,sp,128
    1b44:	1f05                	addi	t5,t5,-31
    1b46:	0306                	slli	t1,t1,0x1
    1b48:	0900                	addi	s0,sp,144
    1b4a:	0000                	unimp
    1b4c:	0501                	addi	a0,a0,0
    1b4e:	09000317          	auipc	t1,0x9000
    1b52:	0002                	c.slli64	zero
    1b54:	0501                	addi	a0,a0,0
    1b56:	7f030613          	addi	a2,t1,2032 # 900233e <_stack_start+0x8ff233e>
    1b5a:	0209                	addi	tp,tp,2
    1b5c:	0100                	addi	s0,sp,128
    1b5e:	1605                	addi	a2,a2,-31
    1b60:	0306                	slli	t1,t1,0x1
    1b62:	0900                	addi	s0,sp,144
    1b64:	0000                	unimp
    1b66:	0501                	addi	a0,a0,0
    1b68:	09000313          	li	t1,144
    1b6c:	0002                	c.slli64	zero
    1b6e:	0501                	addi	a0,a0,0
    1b70:	000d                	c.nop	3
    1b72:	0402                	c.slli64	s0
    1b74:	0602                	c.slli64	a2
    1b76:	04090303          	lb	t1,64(s2)
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	1b05                	addi	s6,s6,-31
    1b7e:	0200                	addi	s0,sp,256
    1b80:	0204                	addi	s1,sp,256
    1b82:	0306                	slli	t1,t1,0x1
    1b84:	0900                	addi	s0,sp,144
    1b86:	0000                	unimp
    1b88:	0501                	addi	a0,a0,0
    1b8a:	0020                	addi	s0,sp,8
    1b8c:	0402                	c.slli64	s0
    1b8e:	0302                	c.slli64	t1
    1b90:	097c                	addi	a5,sp,156
    1b92:	0004                	0x4
    1b94:	0501                	addi	a0,a0,0
    1b96:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b9a:	0302                	c.slli64	t1
    1b9c:	0904                	addi	s1,sp,144
    1b9e:	0004                	0x4
    1ba0:	0501                	addi	a0,a0,0
    1ba2:	0020                	addi	s0,sp,8
    1ba4:	0402                	c.slli64	s0
    1ba6:	0602                	c.slli64	a2
    1ba8:	04097c03          	0x4097c03
    1bac:	0100                	addi	s0,sp,128
    1bae:	0f05                	addi	t5,t5,1
    1bb0:	0200                	addi	s0,sp,256
    1bb2:	0304                	addi	s1,sp,384
    1bb4:	02091403          	lh	s0,32(s2)
    1bb8:	0100                	addi	s0,sp,128
    1bba:	1705                	addi	a4,a4,-31
    1bbc:	0200                	addi	s0,sp,256
    1bbe:	0304                	addi	s1,sp,384
    1bc0:	0306                	slli	t1,t1,0x1
    1bc2:	0900                	addi	s0,sp,144
    1bc4:	0004                	0x4
    1bc6:	0501                	addi	a0,a0,0
    1bc8:	0402001b          	0x402001b
    1bcc:	09010303          	lb	t1,144(sp)
    1bd0:	0004                	0x4
    1bd2:	0501                	addi	a0,a0,0
    1bd4:	0016                	c.slli	zero,0x5
    1bd6:	0402                	c.slli64	s0
    1bd8:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1bdc:	0002                	c.slli64	zero
    1bde:	0501                	addi	a0,a0,0
    1be0:	04020017          	auipc	zero,0x4020
    1be4:	097f0303          	lb	t1,151(t5)
    1be8:	0002                	c.slli64	zero
    1bea:	0501                	addi	a0,a0,0
    1bec:	000d                	c.nop	3
    1bee:	0402                	c.slli64	s0
    1bf0:	01030603          	lb	a2,16(t1)
    1bf4:	0409                	addi	s0,s0,2
    1bf6:	0100                	addi	s0,sp,128
    1bf8:	2005                	jal	1c18 <random_keys+0xa4>
    1bfa:	0200                	addi	s0,sp,256
    1bfc:	0304                	addi	s1,sp,384
    1bfe:	0306                	slli	t1,t1,0x1
    1c00:	097a                	slli	s2,s2,0x1e
    1c02:	0000                	unimp
    1c04:	0501                	addi	a0,a0,0
    1c06:	0016                	c.slli	zero,0x5
    1c08:	0402                	c.slli64	s0
    1c0a:	09060303          	lb	t1,144(a2)
    1c0e:	0002                	c.slli64	zero
    1c10:	0501                	addi	a0,a0,0
    1c12:	0020                	addi	s0,sp,8
    1c14:	0402                	c.slli64	s0
    1c16:	7a030603          	lb	a2,1952(t1)
    1c1a:	0209                	addi	tp,tp,2
    1c1c:	0100                	addi	s0,sp,128
    1c1e:	0d05                	addi	s10,s10,1
    1c20:	02090c03          	lb	s8,32(s2)
    1c24:	0100                	addi	s0,sp,128
    1c26:	1b05                	addi	s6,s6,-31
    1c28:	0306                	slli	t1,t1,0x1
    1c2a:	0900                	addi	s0,sp,144
    1c2c:	0000                	unimp
    1c2e:	0501                	addi	a0,a0,0
    1c30:	0320                	addi	s0,sp,392
    1c32:	0900                	addi	s0,sp,144
    1c34:	0008                	0x8
    1c36:	0501                	addi	a0,a0,0
    1c38:	0310                	addi	a2,sp,384
    1c3a:	0900                	addi	s0,sp,144
    1c3c:	0004                	0x4
    1c3e:	0501                	addi	a0,a0,0
    1c40:	001e                	c.slli	zero,0x7
    1c42:	0402                	c.slli64	s0
    1c44:	0602                	c.slli64	a2
    1c46:	04097f03          	0x4097f03
    1c4a:	0100                	addi	s0,sp,128
    1c4c:	0d05                	addi	s10,s10,1
    1c4e:	0200                	addi	s0,sp,256
    1c50:	0304                	addi	s1,sp,384
    1c52:	04090d03          	lb	s10,64(s2)
    1c56:	0100                	addi	s0,sp,128
    1c58:	2005                	jal	1c78 <random_keys+0x104>
    1c5a:	0200                	addi	s0,sp,256
    1c5c:	0304                	addi	s1,sp,384
    1c5e:	0306                	slli	t1,t1,0x1
    1c60:	0900                	addi	s0,sp,144
    1c62:	0000                	unimp
    1c64:	0001                	nop
    1c66:	0402                	c.slli64	s0
    1c68:	097f0303          	lb	t1,151(t5)
    1c6c:	0002                	c.slli64	zero
    1c6e:	0001                	nop
    1c70:	0402                	c.slli64	s0
    1c72:	09010303          	lb	t1,144(sp)
    1c76:	0004                	0x4
    1c78:	0501                	addi	a0,a0,0
    1c7a:	0025                	c.nop	9
    1c7c:	0402                	c.slli64	s0
    1c7e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1c82:	0004                	0x4
    1c84:	0501                	addi	a0,a0,0
    1c86:	0015                	c.nop	5
    1c88:	0402                	c.slli64	s0
    1c8a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1c8e:	0004                	0x4
    1c90:	0501                	addi	a0,a0,0
    1c92:	0020                	addi	s0,sp,8
    1c94:	0402                	c.slli64	s0
    1c96:	7f030603          	lb	a2,2032(t1)
    1c9a:	0409                	addi	s0,s0,2
    1c9c:	0100                	addi	s0,sp,128
    1c9e:	2805                	jal	1cce <random_keys+0x15a>
    1ca0:	02090c03          	lb	s8,32(s2)
    1ca4:	0100                	addi	s0,sp,128
    1ca6:	0205                	addi	tp,tp,1
    1ca8:	00090103          	lb	sp,0(s2)
    1cac:	0100                	addi	s0,sp,128
    1cae:	2805                	jal	1cde <random_keys+0x16a>
    1cb0:	0306                	slli	t1,t1,0x1
    1cb2:	097f                	0x97f
    1cb4:	0000                	unimp
    1cb6:	0501                	addi	a0,a0,0
    1cb8:	0901030f          	0x901030f
    1cbc:	0038                	addi	a4,sp,8
    1cbe:	0501                	addi	a0,a0,0
    1cc0:	0328                	addi	a0,sp,392
    1cc2:	097f                	0x97f
    1cc4:	0008                	0x8
    1cc6:	0301                	addi	t1,t1,0
    1cc8:	0900                	addi	s0,sp,144
    1cca:	0000                	unimp
    1ccc:	0501                	addi	a0,a0,0
    1cce:	0309                	addi	t1,t1,2
    1cd0:	0902                	c.slli64	s2
    1cd2:	0006                	c.slli	zero,0x1
    1cd4:	0501                	addi	a0,a0,0
    1cd6:	097f030f          	0x97f030f
    1cda:	0006                	c.slli	zero,0x1
    1cdc:	0501                	addi	a0,a0,0
    1cde:	0309                	addi	t1,t1,2
    1ce0:	0901                	addi	s2,s2,0
    1ce2:	0008                	0x8
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	097f030f          	0x97f030f
    1cea:	0004                	0x4
    1cec:	0501                	addi	a0,a0,0
    1cee:	0605                	addi	a2,a2,1
    1cf0:	04090103          	lb	sp,64(s2)
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	0905                	addi	s2,s2,1
    1cf8:	0306                	slli	t1,t1,0x1
    1cfa:	0900                	addi	s0,sp,144
    1cfc:	0000                	unimp
    1cfe:	0301                	addi	t1,t1,0
    1d00:	0901                	addi	s2,s2,0
    1d02:	0006                	c.slli	zero,0x1
    1d04:	0301                	addi	t1,t1,0
    1d06:	097f                	0x97f
    1d08:	000a                	c.slli	zero,0x2
    1d0a:	0501                	addi	a0,a0,0
    1d0c:	0605                	addi	a2,a2,1
    1d0e:	6c090103          	lb	sp,1728(s2)
    1d12:	0100                	addi	s0,sp,128
    1d14:	1005                	c.nop	-31
    1d16:	0306                	slli	t1,t1,0x1
    1d18:	0906                	slli	s2,s2,0x1
    1d1a:	0000                	unimp
    1d1c:	0501                	addi	a0,a0,0
    1d1e:	0309                	addi	t1,t1,2
    1d20:	097a                	slli	s2,s2,0x1e
    1d22:	0004                	0x4
    1d24:	0301                	addi	t1,t1,0
    1d26:	0906                	slli	s2,s2,0x1
    1d28:	0002                	c.slli64	zero
    1d2a:	0501                	addi	a0,a0,0
    1d2c:	030e                	slli	t1,t1,0x3
    1d2e:	0905                	addi	s2,s2,1
    1d30:	000e                	c.slli	zero,0x3
    1d32:	0501                	addi	a0,a0,0
    1d34:	0309                	addi	t1,t1,2
    1d36:	0975                	addi	s2,s2,29
    1d38:	000a                	c.slli	zero,0x2
    1d3a:	0501                	addi	a0,a0,0
    1d3c:	0605                	addi	a2,a2,1
    1d3e:	64090203          	lb	tp,1600(s2)
    1d42:	0100                	addi	s0,sp,128
    1d44:	00090103          	lb	sp,0(s2)
    1d48:	0100                	addi	s0,sp,128
    1d4a:	00090103          	lb	sp,0(s2)
    1d4e:	0100                	addi	s0,sp,128
    1d50:	00090103          	lb	sp,0(s2)
    1d54:	0100                	addi	s0,sp,128
    1d56:	00090103          	lb	sp,0(s2)
    1d5a:	0100                	addi	s0,sp,128
    1d5c:	00090103          	lb	sp,0(s2)
    1d60:	0100                	addi	s0,sp,128
    1d62:	00090103          	lb	sp,0(s2)
    1d66:	0100                	addi	s0,sp,128
    1d68:	00090303          	lb	t1,0(s2)
    1d6c:	0100                	addi	s0,sp,128
    1d6e:	00090103          	lb	sp,0(s2)
    1d72:	0100                	addi	s0,sp,128
    1d74:	0e05                	addi	t3,t3,1
    1d76:	0306                	slli	t1,t1,0x1
    1d78:	0900                	addi	s0,sp,144
    1d7a:	0000                	unimp
    1d7c:	0501                	addi	a0,a0,0
    1d7e:	0605                	addi	a2,a2,1
    1d80:	04090203          	lb	tp,64(s2)
    1d84:	0100                	addi	s0,sp,128
    1d86:	0b05                	addi	s6,s6,1
    1d88:	0306                	slli	t1,t1,0x1
    1d8a:	0900                	addi	s0,sp,144
    1d8c:	0000                	unimp
    1d8e:	0501                	addi	a0,a0,0
    1d90:	0010                	0x10
    1d92:	0402                	c.slli64	s0
    1d94:	0601                	addi	a2,a2,0
    1d96:	02090003          	lb	zero,32(s2)
    1d9a:	0100                	addi	s0,sp,128
    1d9c:	0505                	addi	a0,a0,1
    1d9e:	0200                	addi	s0,sp,256
    1da0:	0104                	addi	s1,sp,128
    1da2:	0306                	slli	t1,t1,0x1
    1da4:	0900                	addi	s0,sp,144
    1da6:	0000                	unimp
    1da8:	0301                	addi	t1,t1,0
    1daa:	0906                	slli	s2,s2,0x1
    1dac:	0006                	c.slli	zero,0x1
    1dae:	0501                	addi	a0,a0,0
    1db0:	0011                	c.nop	4
    1db2:	0402                	c.slli64	s0
    1db4:	0601                	addi	a2,a2,0
    1db6:	04090003          	lb	zero,64(s2)
    1dba:	0100                	addi	s0,sp,128
    1dbc:	0505                	addi	a0,a0,1
    1dbe:	0200                	addi	s0,sp,256
    1dc0:	0104                	addi	s1,sp,128
    1dc2:	0306                	slli	t1,t1,0x1
    1dc4:	0900                	addi	s0,sp,144
    1dc6:	0000                	unimp
    1dc8:	0501                	addi	a0,a0,0
    1dca:	0907030b          	0x907030b
    1dce:	0004                	0x4
    1dd0:	0501                	addi	a0,a0,0
    1dd2:	0318                	addi	a4,sp,384
    1dd4:	0901                	addi	s2,s2,0
    1dd6:	0002                	c.slli64	zero
    1dd8:	0501                	addi	a0,a0,0
    1dda:	0010                	0x10
    1ddc:	0402                	c.slli64	s0
    1dde:	0601                	addi	a2,a2,0
    1de0:	08097f03          	0x8097f03
    1de4:	0100                	addi	s0,sp,128
    1de6:	0505                	addi	a0,a0,1
    1de8:	0200                	addi	s0,sp,256
    1dea:	0104                	addi	s1,sp,128
    1dec:	0306                	slli	t1,t1,0x1
    1dee:	0900                	addi	s0,sp,144
    1df0:	0000                	unimp
    1df2:	0501                	addi	a0,a0,0
    1df4:	0316                	slli	t1,t1,0x5
    1df6:	0905                	addi	s2,s2,1
    1df8:	0008                	0x8
    1dfa:	0501                	addi	a0,a0,0
    1dfc:	0318                	addi	a4,sp,384
    1dfe:	0901                	addi	s2,s2,0
    1e00:	0008                	0x8
    1e02:	0501                	addi	a0,a0,0
    1e04:	0010                	0x10
    1e06:	0402                	c.slli64	s0
    1e08:	0601                	addi	a2,a2,0
    1e0a:	08097f03          	0x8097f03
    1e0e:	0100                	addi	s0,sp,128
    1e10:	0505                	addi	a0,a0,1
    1e12:	0200                	addi	s0,sp,256
    1e14:	0104                	addi	s1,sp,128
    1e16:	0306                	slli	t1,t1,0x1
    1e18:	0900                	addi	s0,sp,144
    1e1a:	0000                	unimp
    1e1c:	0601                	addi	a2,a2,0
    1e1e:	04090503          	lb	a0,64(s2)
    1e22:	0100                	addi	s0,sp,128
    1e24:	1a05                	addi	s4,s4,-31
    1e26:	0306                	slli	t1,t1,0x1
    1e28:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1e2c:	0501                	addi	a0,a0,0
    1e2e:	030a                	slli	t1,t1,0x2
    1e30:	097d                	addi	s2,s2,31
    1e32:	0006                	c.slli	zero,0x1
    1e34:	0501                	addi	a0,a0,0
    1e36:	0605                	addi	a2,a2,1
    1e38:	0c090303          	lb	t1,192(s2)
    1e3c:	0100                	addi	s0,sp,128
    1e3e:	1805                	addi	a6,a6,-31
    1e40:	0306                	slli	t1,t1,0x1
    1e42:	0901                	addi	s2,s2,0
    1e44:	0002                	c.slli64	zero
    1e46:	0501                	addi	a0,a0,0
    1e48:	0014                	0x14
    1e4a:	0402                	c.slli64	s0
    1e4c:	0601                	addi	a2,a2,0
    1e4e:	08097f03          	0x8097f03
    1e52:	0100                	addi	s0,sp,128
    1e54:	0505                	addi	a0,a0,1
    1e56:	0200                	addi	s0,sp,256
    1e58:	0104                	addi	s1,sp,128
    1e5a:	0306                	slli	t1,t1,0x1
    1e5c:	0900                	addi	s0,sp,144
    1e5e:	0000                	unimp
    1e60:	0601                	addi	a2,a2,0
    1e62:	04090603          	lb	a2,64(s2)
    1e66:	0100                	addi	s0,sp,128
    1e68:	0a05                	addi	s4,s4,1
    1e6a:	0306                	slli	t1,t1,0x1
    1e6c:	0900                	addi	s0,sp,144
    1e6e:	0000                	unimp
    1e70:	0501                	addi	a0,a0,0
    1e72:	0605                	addi	a2,a2,1
    1e74:	0c090403          	lb	s0,192(s2)
    1e78:	0100                	addi	s0,sp,128
    1e7a:	1a05                	addi	s4,s4,-31
    1e7c:	0306                	slli	t1,t1,0x1
    1e7e:	0900                	addi	s0,sp,144
    1e80:	0006                	c.slli	zero,0x1
    1e82:	0501                	addi	a0,a0,0
    1e84:	0318                	addi	a4,sp,384
    1e86:	0901                	addi	s2,s2,0
    1e88:	0002                	c.slli64	zero
    1e8a:	0501                	addi	a0,a0,0
    1e8c:	0014                	0x14
    1e8e:	0402                	c.slli64	s0
    1e90:	0601                	addi	a2,a2,0
    1e92:	08097f03          	0x8097f03
    1e96:	0100                	addi	s0,sp,128
    1e98:	0505                	addi	a0,a0,1
    1e9a:	0200                	addi	s0,sp,256
    1e9c:	0104                	addi	s1,sp,128
    1e9e:	0306                	slli	t1,t1,0x1
    1ea0:	0900                	addi	s0,sp,144
    1ea2:	0000                	unimp
    1ea4:	0601                	addi	a2,a2,0
    1ea6:	04090503          	lb	a0,64(s2)
    1eaa:	0100                	addi	s0,sp,128
    1eac:	0a05                	addi	s4,s4,1
    1eae:	0306                	slli	t1,t1,0x1
    1eb0:	0900                	addi	s0,sp,144
    1eb2:	0000                	unimp
    1eb4:	0501                	addi	a0,a0,0
    1eb6:	0605                	addi	a2,a2,1
    1eb8:	0c090303          	lb	t1,192(s2)
    1ebc:	0100                	addi	s0,sp,128
    1ebe:	0b05                	addi	s6,s6,1
    1ec0:	0306                	slli	t1,t1,0x1
    1ec2:	0900                	addi	s0,sp,144
    1ec4:	0002                	c.slli64	zero
    1ec6:	0501                	addi	a0,a0,0
    1ec8:	0318                	addi	a4,sp,384
    1eca:	0900                	addi	s0,sp,144
    1ecc:	0002                	c.slli64	zero
    1ece:	0501                	addi	a0,a0,0
    1ed0:	0010                	0x10
    1ed2:	0402                	c.slli64	s0
    1ed4:	0601                	addi	a2,a2,0
    1ed6:	04090003          	lb	zero,64(s2)
    1eda:	0100                	addi	s0,sp,128
    1edc:	0505                	addi	a0,a0,1
    1ede:	0200                	addi	s0,sp,256
    1ee0:	0104                	addi	s1,sp,128
    1ee2:	0306                	slli	t1,t1,0x1
    1ee4:	0900                	addi	s0,sp,144
    1ee6:	0000                	unimp
    1ee8:	0601                	addi	a2,a2,0
    1eea:	04090603          	lb	a2,64(s2)
    1eee:	0100                	addi	s0,sp,128
    1ef0:	0a05                	addi	s4,s4,1
    1ef2:	0306                	slli	t1,t1,0x1
    1ef4:	0900                	addi	s0,sp,144
    1ef6:	0000                	unimp
    1ef8:	0501                	addi	a0,a0,0
    1efa:	0605                	addi	a2,a2,1
    1efc:	08090403          	lb	s0,128(s2)
    1f00:	0100                	addi	s0,sp,128
    1f02:	1a05                	addi	s4,s4,-31
    1f04:	0306                	slli	t1,t1,0x1
    1f06:	0900                	addi	s0,sp,144
    1f08:	0000                	unimp
    1f0a:	0501                	addi	a0,a0,0
    1f0c:	0318                	addi	a4,sp,384
    1f0e:	0901                	addi	s2,s2,0
    1f10:	000a                	c.slli	zero,0x2
    1f12:	0501                	addi	a0,a0,0
    1f14:	0014                	0x14
    1f16:	0402                	c.slli64	s0
    1f18:	0601                	addi	a2,a2,0
    1f1a:	08097f03          	0x8097f03
    1f1e:	0100                	addi	s0,sp,128
    1f20:	0505                	addi	a0,a0,1
    1f22:	0200                	addi	s0,sp,256
    1f24:	0104                	addi	s1,sp,128
    1f26:	0306                	slli	t1,t1,0x1
    1f28:	0900                	addi	s0,sp,144
    1f2a:	0002                	c.slli64	zero
    1f2c:	0501                	addi	a0,a0,0
    1f2e:	031a                	slli	t1,t1,0x6
    1f30:	0905                	addi	s2,s2,1
    1f32:	0004                	0x4
    1f34:	0501                	addi	a0,a0,0
    1f36:	0318                	addi	a4,sp,384
    1f38:	0901                	addi	s2,s2,0
    1f3a:	0004                	0x4
    1f3c:	0501                	addi	a0,a0,0
    1f3e:	031a                	slli	t1,t1,0x6
    1f40:	097f                	0x97f
    1f42:	0008                	0x8
    1f44:	0501                	addi	a0,a0,0
    1f46:	0014                	0x14
    1f48:	0402                	c.slli64	s0
    1f4a:	0601                	addi	a2,a2,0
    1f4c:	08090003          	lb	zero,128(s2)
    1f50:	0100                	addi	s0,sp,128
    1f52:	0505                	addi	a0,a0,1
    1f54:	0200                	addi	s0,sp,256
    1f56:	0104                	addi	s1,sp,128
    1f58:	0306                	slli	t1,t1,0x1
    1f5a:	0900                	addi	s0,sp,144
    1f5c:	0000                	unimp
    1f5e:	0601                	addi	a2,a2,0
    1f60:	04090603          	lb	a2,64(s2)
    1f64:	0100                	addi	s0,sp,128
    1f66:	0205                	addi	tp,tp,1
    1f68:	00090103          	lb	sp,0(s2)
    1f6c:	0100                	addi	s0,sp,128
    1f6e:	0f05                	addi	t5,t5,1
    1f70:	0306                	slli	t1,t1,0x1
    1f72:	0900                	addi	s0,sp,144
    1f74:	0000                	unimp
    1f76:	0501                	addi	a0,a0,0
    1f78:	0605                	addi	a2,a2,1
    1f7a:	0c090103          	lb	sp,192(s2)
    1f7e:	0100                	addi	s0,sp,128
    1f80:	0105                	addi	sp,sp,1
    1f82:	0306                	slli	t1,t1,0x1
    1f84:	0901                	addi	s2,s2,0
    1f86:	0000                	unimp
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0009                	c.nop	2
    1f8c:	0402                	c.slli64	s0
    1f8e:	bd030603          	lb	a2,-1072(t1)
    1f92:	097f                	0x97f
    1f94:	0046                	c.slli	zero,0x11
    1f96:	0501                	addi	a0,a0,0
    1f98:	0012                	c.slli	zero,0x4
    1f9a:	0402                	c.slli64	s0
    1f9c:	00030603          	lb	a2,0(t1)
    1fa0:	0009                	c.nop	2
    1fa2:	0100                	addi	s0,sp,128
    1fa4:	1705                	addi	a4,a4,-31
    1fa6:	0200                	addi	s0,sp,256
    1fa8:	0304                	addi	s1,sp,384
    1faa:	0306                	slli	t1,t1,0x1
    1fac:	097f                	0x97f
    1fae:	000a                	c.slli	zero,0x2
    1fb0:	0501                	addi	a0,a0,0
    1fb2:	0009                	c.nop	2
    1fb4:	0402                	c.slli64	s0
    1fb6:	09070303          	lb	t1,144(a4)
    1fba:	0004                	0x4
    1fbc:	0501                	addi	a0,a0,0
    1fbe:	000e                	c.slli	zero,0x3
    1fc0:	0402                	c.slli64	s0
    1fc2:	00030603          	lb	a2,0(t1)
    1fc6:	0409                	addi	s0,s0,2
    1fc8:	0100                	addi	s0,sp,128
    1fca:	0905                	addi	s2,s2,1
    1fcc:	0200                	addi	s0,sp,256
    1fce:	0304                	addi	s1,sp,384
    1fd0:	0306                	slli	t1,t1,0x1
    1fd2:	0901                	addi	s2,s2,0
    1fd4:	000a                	c.slli	zero,0x2
    1fd6:	0501                	addi	a0,a0,0
    1fd8:	000e                	c.slli	zero,0x3
    1fda:	0402                	c.slli64	s0
    1fdc:	00030603          	lb	a2,0(t1)
    1fe0:	0009                	c.nop	2
    1fe2:	0100                	addi	s0,sp,128
    1fe4:	1905                	addi	s2,s2,-31
    1fe6:	0200                	addi	s0,sp,256
    1fe8:	0304                	addi	s1,sp,384
    1fea:	0306                	slli	t1,t1,0x1
    1fec:	097e                	slli	s2,s2,0x1f
    1fee:	000a                	c.slli	zero,0x2
    1ff0:	0501                	addi	a0,a0,0
    1ff2:	0009                	c.nop	2
    1ff4:	0402                	c.slli64	s0
    1ff6:	09080303          	lb	t1,144(a6)
    1ffa:	0004                	0x4
    1ffc:	0501                	addi	a0,a0,0
    1ffe:	0402001b          	0x402001b
    2002:	00030603          	lb	a2,0(t1)
    2006:	0409                	addi	s0,s0,2
    2008:	0100                	addi	s0,sp,128
    200a:	1805                	addi	a6,a6,-31
    200c:	0200                	addi	s0,sp,256
    200e:	0304                	addi	s1,sp,384
    2010:	04090003          	lb	zero,64(s2)
    2014:	0100                	addi	s0,sp,128
    2016:	1b05                	addi	s6,s6,-31
    2018:	0200                	addi	s0,sp,256
    201a:	0304                	addi	s1,sp,384
    201c:	04090003          	lb	zero,64(s2)
    2020:	0100                	addi	s0,sp,128
    2022:	1805                	addi	a6,a6,-31
    2024:	0200                	addi	s0,sp,256
    2026:	0304                	addi	s1,sp,384
    2028:	02090003          	lb	zero,32(s2)
    202c:	0100                	addi	s0,sp,128
    202e:	1705                	addi	a4,a4,-31
    2030:	0200                	addi	s0,sp,256
    2032:	0304                	addi	s1,sp,384
    2034:	02097f03          	0x2097f03
    2038:	0100                	addi	s0,sp,128
    203a:	1805                	addi	a6,a6,-31
    203c:	0200                	addi	s0,sp,256
    203e:	0304                	addi	s1,sp,384
    2040:	02090103          	lb	sp,32(s2)
    2044:	0100                	addi	s0,sp,128
    2046:	1705                	addi	a4,a4,-31
    2048:	0200                	addi	s0,sp,256
    204a:	0304                	addi	s1,sp,384
    204c:	0306                	slli	t1,t1,0x1
    204e:	097f                	0x97f
    2050:	0002                	c.slli64	zero
    2052:	0501                	addi	a0,a0,0
    2054:	0009                	c.nop	2
    2056:	0402                	c.slli64	s0
    2058:	09060303          	lb	t1,144(a2)
    205c:	0002                	c.slli64	zero
    205e:	0501                	addi	a0,a0,0
    2060:	0018                	0x18
    2062:	0402                	c.slli64	s0
    2064:	00030603          	lb	a2,0(t1)
    2068:	0009                	c.nop	2
    206a:	0100                	addi	s0,sp,128
    206c:	1b05                	addi	s6,s6,-31
    206e:	0200                	addi	s0,sp,256
    2070:	0304                	addi	s1,sp,384
    2072:	0306                	slli	t1,t1,0x1
    2074:	097f                	0x97f
    2076:	000a                	c.slli	zero,0x2
    2078:	0501                	addi	a0,a0,0
    207a:	0009                	c.nop	2
    207c:	0402                	c.slli64	s0
    207e:	09090303          	lb	t1,144(s2)
    2082:	0006                	c.slli	zero,0x1
    2084:	0501                	addi	a0,a0,0
    2086:	001c                	0x1c
    2088:	0402                	c.slli64	s0
    208a:	00030603          	lb	a2,0(t1)
    208e:	0009                	c.nop	2
    2090:	0100                	addi	s0,sp,128
    2092:	1805                	addi	a6,a6,-31
    2094:	0200                	addi	s0,sp,256
    2096:	0304                	addi	s1,sp,384
    2098:	02090003          	lb	zero,32(s2)
    209c:	0100                	addi	s0,sp,128
    209e:	1f05                	addi	t5,t5,-31
    20a0:	0200                	addi	s0,sp,256
    20a2:	0304                	addi	s1,sp,384
    20a4:	0306                	slli	t1,t1,0x1
    20a6:	097f                	0x97f
    20a8:	0008                	0x8
    20aa:	0501                	addi	a0,a0,0
    20ac:	0009                	c.nop	2
    20ae:	0402                	c.slli64	s0
    20b0:	090b0303          	lb	t1,144(s6)
    20b4:	0006                	c.slli	zero,0x1
    20b6:	0501                	addi	a0,a0,0
    20b8:	001c                	0x1c
    20ba:	0402                	c.slli64	s0
    20bc:	00030603          	lb	a2,0(t1)
    20c0:	0409                	addi	s0,s0,2
    20c2:	0100                	addi	s0,sp,128
    20c4:	1805                	addi	a6,a6,-31
    20c6:	0200                	addi	s0,sp,256
    20c8:	0304                	addi	s1,sp,384
    20ca:	08090003          	lb	zero,128(s2)
    20ce:	0100                	addi	s0,sp,128
    20d0:	1f05                	addi	t5,t5,-31
    20d2:	0200                	addi	s0,sp,256
    20d4:	0304                	addi	s1,sp,384
    20d6:	02097f03          	0x2097f03
    20da:	0100                	addi	s0,sp,128
    20dc:	1805                	addi	a6,a6,-31
    20de:	0200                	addi	s0,sp,256
    20e0:	0304                	addi	s1,sp,384
    20e2:	02090103          	lb	sp,32(s2)
    20e6:	0100                	addi	s0,sp,128
    20e8:	1f05                	addi	t5,t5,-31
    20ea:	0200                	addi	s0,sp,256
    20ec:	0304                	addi	s1,sp,384
    20ee:	0306                	slli	t1,t1,0x1
    20f0:	097f                	0x97f
    20f2:	0002                	c.slli64	zero
    20f4:	0501                	addi	a0,a0,0
    20f6:	0009                	c.nop	2
    20f8:	0402                	c.slli64	s0
    20fa:	09090303          	lb	t1,144(s2)
    20fe:	0002                	c.slli64	zero
    2100:	0501                	addi	a0,a0,0
    2102:	0016                	c.slli	zero,0x5
    2104:	0402                	c.slli64	s0
    2106:	00030603          	lb	a2,0(t1)
    210a:	0009                	c.nop	2
    210c:	0100                	addi	s0,sp,128
    210e:	1d05                	addi	s10,s10,-31
    2110:	0200                	addi	s0,sp,256
    2112:	0304                	addi	s1,sp,384
    2114:	02097f03          	0x2097f03
    2118:	0100                	addi	s0,sp,128
    211a:	1605                	addi	a2,a2,-31
    211c:	0200                	addi	s0,sp,256
    211e:	0304                	addi	s1,sp,384
    2120:	04090103          	lb	sp,64(s2)
    2124:	0100                	addi	s0,sp,128
    2126:	0f05                	addi	t5,t5,1
    2128:	0200                	addi	s0,sp,256
    212a:	0304                	addi	s1,sp,384
    212c:	04090003          	lb	zero,64(s2)
    2130:	0100                	addi	s0,sp,128
    2132:	1d05                	addi	s10,s10,-31
    2134:	0200                	addi	s0,sp,256
    2136:	0304                	addi	s1,sp,384
    2138:	0306                	slli	t1,t1,0x1
    213a:	097f                	0x97f
    213c:	0004                	0x4
    213e:	0501                	addi	a0,a0,0
    2140:	0009                	c.nop	2
    2142:	0402                	c.slli64	s0
    2144:	090b0303          	lb	t1,144(s6)
    2148:	0002                	c.slli64	zero
    214a:	0501                	addi	a0,a0,0
    214c:	001c                	0x1c
    214e:	0402                	c.slli64	s0
    2150:	00030603          	lb	a2,0(t1)
    2154:	0009                	c.nop	2
    2156:	0100                	addi	s0,sp,128
    2158:	1805                	addi	a6,a6,-31
    215a:	0200                	addi	s0,sp,256
    215c:	0304                	addi	s1,sp,384
    215e:	04090003          	lb	zero,64(s2)
    2162:	0100                	addi	s0,sp,128
    2164:	1f05                	addi	t5,t5,-31
    2166:	0200                	addi	s0,sp,256
    2168:	0304                	addi	s1,sp,384
    216a:	0306                	slli	t1,t1,0x1
    216c:	097f                	0x97f
    216e:	0008                	0x8
    2170:	0501                	addi	a0,a0,0
    2172:	0009                	c.nop	2
    2174:	0402                	c.slli64	s0
    2176:	09060303          	lb	t1,144(a2)
    217a:	0004                	0x4
    217c:	0501                	addi	a0,a0,0
    217e:	0018                	0x18
    2180:	0402                	c.slli64	s0
    2182:	00030603          	lb	a2,0(t1)
    2186:	0409                	addi	s0,s0,2
    2188:	0100                	addi	s0,sp,128
    218a:	1f05                	addi	t5,t5,-31
    218c:	0200                	addi	s0,sp,256
    218e:	0304                	addi	s1,sp,384
    2190:	04090003          	lb	zero,64(s2)
    2194:	0100                	addi	s0,sp,128
    2196:	1805                	addi	a6,a6,-31
    2198:	0200                	addi	s0,sp,256
    219a:	0304                	addi	s1,sp,384
    219c:	04090003          	lb	zero,64(s2)
    21a0:	0100                	addi	s0,sp,128
    21a2:	2105                	jal	25c2 <_bss_end+0x556>
    21a4:	0200                	addi	s0,sp,256
    21a6:	0304                	addi	s1,sp,384
    21a8:	02097f03          	0x2097f03
    21ac:	0100                	addi	s0,sp,128
    21ae:	1805                	addi	a6,a6,-31
    21b0:	0200                	addi	s0,sp,256
    21b2:	0304                	addi	s1,sp,384
    21b4:	02090103          	lb	sp,32(s2)
    21b8:	0100                	addi	s0,sp,128
    21ba:	2105                	jal	25da <_bss_end+0x56e>
    21bc:	0200                	addi	s0,sp,256
    21be:	0304                	addi	s1,sp,384
    21c0:	0306                	slli	t1,t1,0x1
    21c2:	097f                	0x97f
    21c4:	0002                	c.slli64	zero
    21c6:	0501                	addi	a0,a0,0
    21c8:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    21cc:	0002                	c.slli64	zero
    21ce:	0501                	addi	a0,a0,0
    21d0:	0302                	c.slli64	t1
    21d2:	0901                	addi	s2,s2,0
    21d4:	0000                	unimp
    21d6:	0501                	addi	a0,a0,0
    21d8:	7f03064b          	fnmsub.q	fa2,ft6,fa6,fa5,rne
    21dc:	0009                	c.nop	2
    21de:	0100                	addi	s0,sp,128
    21e0:	0f05                	addi	t5,t5,1
    21e2:	02090103          	lb	sp,32(s2)
    21e6:	0100                	addi	s0,sp,128
    21e8:	4b05                	li	s6,1
    21ea:	08097f03          	0x8097f03
    21ee:	0100                	addi	s0,sp,128
    21f0:	0905                	addi	s2,s2,1
    21f2:	0e090503          	lb	a0,224(s2)
    21f6:	0100                	addi	s0,sp,128
    21f8:	0f05                	addi	t5,t5,1
    21fa:	0c097c03          	0xc097c03
    21fe:	0100                	addi	s0,sp,128
    2200:	0905                	addi	s2,s2,1
    2202:	08090403          	lb	s0,128(s2)
    2206:	0100                	addi	s0,sp,128
    2208:	4b05                	li	s6,1
    220a:	02097b03          	0x2097b03
    220e:	0100                	addi	s0,sp,128
    2210:	06090003          	lb	zero,96(s2)
    2214:	0100                	addi	s0,sp,128
    2216:	0f05                	addi	t5,t5,1
    2218:	04090103          	lb	sp,64(s2)
    221c:	0100                	addi	s0,sp,128
    221e:	0505                	addi	a0,a0,1
    2220:	0306                	slli	t1,t1,0x1
    2222:	0901                	addi	s2,s2,0
    2224:	0004                	0x4
    2226:	0301                	addi	t1,t1,0
    2228:	0901                	addi	s2,s2,0
    222a:	0000                	unimp
    222c:	0301                	addi	t1,t1,0
    222e:	0902                	c.slli64	s2
    2230:	0000                	unimp
    2232:	0501                	addi	a0,a0,0
    2234:	0609                	addi	a2,a2,2
    2236:	00090003          	lb	zero,0(s2)
    223a:	0100                	addi	s0,sp,128
    223c:	0505                	addi	a0,a0,1
    223e:	0306                	slli	t1,t1,0x1
    2240:	0901                	addi	s2,s2,0
    2242:	0002                	c.slli64	zero
    2244:	0301                	addi	t1,t1,0
    2246:	0901                	addi	s2,s2,0
    2248:	0000                	unimp
    224a:	0301                	addi	t1,t1,0
    224c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    2250:	0501                	addi	a0,a0,0
    2252:	060c                	addi	a1,sp,768
    2254:	00090003          	lb	zero,0(s2)
    2258:	0100                	addi	s0,sp,128
    225a:	0505                	addi	a0,a0,1
    225c:	0306                	slli	t1,t1,0x1
    225e:	0904                	addi	s1,sp,144
    2260:	0012                	c.slli	zero,0x4
    2262:	0501                	addi	a0,a0,0
    2264:	0310                	addi	a2,sp,384
    2266:	0900                	addi	s0,sp,144
    2268:	0000                	unimp
    226a:	0501                	addi	a0,a0,0
    226c:	060c                	addi	a1,sp,768
    226e:	00097c03          	0x97c03
    2272:	0100                	addi	s0,sp,128
    2274:	0505                	addi	a0,a0,1
    2276:	02090403          	lb	s0,32(s2)
    227a:	0100                	addi	s0,sp,128
    227c:	0905                	addi	s2,s2,1
    227e:	0200                	addi	s0,sp,256
    2280:	0304                	addi	s1,sp,384
    2282:	0306                	slli	t1,t1,0x1
    2284:	0901                	addi	s2,s2,0
    2286:	0004                	0x4
    2288:	0501                	addi	a0,a0,0
    228a:	0024                	addi	s1,sp,8
    228c:	0402                	c.slli64	s0
    228e:	00030603          	lb	a2,0(t1)
    2292:	0409                	addi	s0,s0,2
    2294:	0100                	addi	s0,sp,128
    2296:	1b05                	addi	s6,s6,-31
    2298:	0200                	addi	s0,sp,256
    229a:	0304                	addi	s1,sp,384
    229c:	04090003          	lb	zero,64(s2)
    22a0:	0100                	addi	s0,sp,128
    22a2:	1105                	addi	sp,sp,-31
    22a4:	0200                	addi	s0,sp,256
    22a6:	0304                	addi	s1,sp,384
    22a8:	08090003          	lb	zero,128(s2)
    22ac:	0100                	addi	s0,sp,128
    22ae:	1805                	addi	a6,a6,-31
    22b0:	0200                	addi	s0,sp,256
    22b2:	0304                	addi	s1,sp,384
    22b4:	0306                	slli	t1,t1,0x1
    22b6:	097f                	0x97f
    22b8:	0002                	c.slli64	zero
    22ba:	0501                	addi	a0,a0,0
    22bc:	0010                	0x10
    22be:	0402                	c.slli64	s0
    22c0:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    22c4:	0000                	unimp
    22c6:	0501                	addi	a0,a0,0
    22c8:	0005                	c.nop	1
    22ca:	0402                	c.slli64	s0
    22cc:	00030603          	lb	a2,0(t1)
    22d0:	0009                	c.nop	2
    22d2:	0100                	addi	s0,sp,128
    22d4:	0306                	slli	t1,t1,0x1
    22d6:	0906                	slli	s2,s2,0x1
    22d8:	0004                	0x4
    22da:	0501                	addi	a0,a0,0
    22dc:	060a                	slli	a2,a2,0x2
    22de:	00090003          	lb	zero,0(s2)
    22e2:	0100                	addi	s0,sp,128
    22e4:	0505                	addi	a0,a0,1
    22e6:	0306                	slli	t1,t1,0x1
    22e8:	0902                	c.slli64	s2
    22ea:	0012                	c.slli	zero,0x4
    22ec:	0501                	addi	a0,a0,0
    22ee:	061a                	slli	a2,a2,0x6
    22f0:	00090003          	lb	zero,0(s2)
    22f4:	0100                	addi	s0,sp,128
    22f6:	1405                	addi	s0,s0,-31
    22f8:	0200                	addi	s0,sp,256
    22fa:	0104                	addi	s1,sp,128
    22fc:	0306                	slli	t1,t1,0x1
    22fe:	0900                	addi	s0,sp,144
    2300:	0008                	0x8
    2302:	0501                	addi	a0,a0,0
    2304:	0005                	c.nop	1
    2306:	0402                	c.slli64	s0
    2308:	0601                	addi	a2,a2,0
    230a:	00090003          	lb	zero,0(s2)
    230e:	0100                	addi	s0,sp,128
    2310:	0306                	slli	t1,t1,0x1
    2312:	00040907          	0x40907
    2316:	0501                	addi	a0,a0,0
    2318:	0302                	c.slli64	t1
    231a:	0901                	addi	s2,s2,0
    231c:	0000                	unimp
    231e:	0501                	addi	a0,a0,0
    2320:	0601                	addi	a2,a2,0
    2322:	00090203          	lb	tp,0(s2)
    2326:	0100                	addi	s0,sp,128
    2328:	0f05                	addi	t5,t5,1
    232a:	04097e03          	0x4097e03
    232e:	0100                	addi	s0,sp,128
    2330:	0505                	addi	a0,a0,1
    2332:	0306                	slli	t1,t1,0x1
    2334:	0901                	addi	s2,s2,0
    2336:	000c                	0xc
    2338:	0501                	addi	a0,a0,0
    233a:	0601                	addi	a2,a2,0
    233c:	00090103          	lb	sp,0(s2)
    2340:	0100                	addi	s0,sp,128
    2342:	0905                	addi	s2,s2,1
    2344:	0200                	addi	s0,sp,256
    2346:	0304                	addi	s1,sp,384
    2348:	0306                	slli	t1,t1,0x1
    234a:	000e0977          	0xe0977
    234e:	0501                	addi	a0,a0,0
    2350:	0019                	c.nop	6
    2352:	0402                	c.slli64	s0
    2354:	00030603          	lb	a2,0(t1)
    2358:	0009                	c.nop	2
    235a:	0100                	addi	s0,sp,128
    235c:	1f05                	addi	t5,t5,-31
    235e:	0200                	addi	s0,sp,256
    2360:	0304                	addi	s1,sp,384
    2362:	08097f03          	0x8097f03
    2366:	0100                	addi	s0,sp,128
    2368:	1505                	addi	a0,a0,-31
    236a:	0200                	addi	s0,sp,256
    236c:	0304                	addi	s1,sp,384
    236e:	04090103          	lb	sp,64(s2)
    2372:	0100                	addi	s0,sp,128
    2374:	1f05                	addi	t5,t5,-31
    2376:	0200                	addi	s0,sp,256
    2378:	0304                	addi	s1,sp,384
    237a:	0306                	slli	t1,t1,0x1
    237c:	097f                	0x97f
    237e:	0004                	0x4
    2380:	0501                	addi	a0,a0,0
    2382:	036c                	addi	a1,sp,396
    2384:	090d                	addi	s2,s2,3
    2386:	0002                	c.slli64	zero
    2388:	0501                	addi	a0,a0,0
    238a:	0302                	c.slli64	t1
    238c:	0901                	addi	s2,s2,0
    238e:	0000                	unimp
    2390:	0501                	addi	a0,a0,0
    2392:	066c                	addi	a1,sp,780
    2394:	00097f03          	0x97f03
    2398:	0100                	addi	s0,sp,128
    239a:	1e05                	addi	t3,t3,-31
    239c:	08091103          	lh	sp,128(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	6c05                	lui	s8,0x1
    23a4:	06096f03          	0x6096f03
    23a8:	0100                	addi	s0,sp,128
    23aa:	0f05                	addi	t5,t5,1
    23ac:	04090103          	lb	sp,64(s2)
    23b0:	0100                	addi	s0,sp,128
    23b2:	6c05                	lui	s8,0x1
    23b4:	04097f03          	0x4097f03
    23b8:	0100                	addi	s0,sp,128
    23ba:	0f05                	addi	t5,t5,1
    23bc:	02090103          	lb	sp,32(s2)
    23c0:	0100                	addi	s0,sp,128
    23c2:	6c05                	lui	s8,0x1
    23c4:	0c097f03          	0xc097f03
    23c8:	0100                	addi	s0,sp,128
    23ca:	0905                	addi	s2,s2,1
    23cc:	08090a03          	lb	s4,128(s2)
    23d0:	0100                	addi	s0,sp,128
    23d2:	0f05                	addi	t5,t5,1
    23d4:	02097703          	0x2097703
    23d8:	0100                	addi	s0,sp,128
    23da:	0505                	addi	a0,a0,1
    23dc:	0306                	slli	t1,t1,0x1
    23de:	0901                	addi	s2,s2,0
    23e0:	0004                	0x4
    23e2:	0301                	addi	t1,t1,0
    23e4:	0901                	addi	s2,s2,0
    23e6:	0000                	unimp
    23e8:	0301                	addi	t1,t1,0
    23ea:	0901                	addi	s2,s2,0
    23ec:	0000                	unimp
    23ee:	0301                	addi	t1,t1,0
    23f0:	0901                	addi	s2,s2,0
    23f2:	0000                	unimp
    23f4:	0301                	addi	t1,t1,0
    23f6:	0901                	addi	s2,s2,0
    23f8:	0000                	unimp
    23fa:	0301                	addi	t1,t1,0
    23fc:	0901                	addi	s2,s2,0
    23fe:	0000                	unimp
    2400:	0301                	addi	t1,t1,0
    2402:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    2406:	0501                	addi	a0,a0,0
    2408:	0609                	addi	a2,a2,2
    240a:	00090003          	lb	zero,0(s2)
    240e:	0100                	addi	s0,sp,128
    2410:	6c05                	lui	s8,0x1
    2412:	04097603          	0x4097603
    2416:	0100                	addi	s0,sp,128
    2418:	0905                	addi	s2,s2,1
    241a:	02090a03          	lb	s4,32(s2)
    241e:	0100                	addi	s0,sp,128
    2420:	6c05                	lui	s8,0x1
    2422:	02097603          	0x2097603
    2426:	0100                	addi	s0,sp,128
    2428:	08090003          	lb	zero,128(s2)
    242c:	0100                	addi	s0,sp,128
    242e:	0a05                	addi	s4,s4,1
    2430:	02090e03          	lb	t3,32(s2)
    2434:	0100                	addi	s0,sp,128
    2436:	0905                	addi	s2,s2,1
    2438:	04097c03          	0x4097c03
    243c:	0100                	addi	s0,sp,128
    243e:	0505                	addi	a0,a0,1
    2440:	0306                	slli	t1,t1,0x1
    2442:	0904                	addi	s1,sp,144
    2444:	0004                	0x4
    2446:	0501                	addi	a0,a0,0
    2448:	060a                	slli	a2,a2,0x2
    244a:	00090003          	lb	zero,0(s2)
    244e:	0100                	addi	s0,sp,128
    2450:	0505                	addi	a0,a0,1
    2452:	0306                	slli	t1,t1,0x1
    2454:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    2458:	0501                	addi	a0,a0,0
    245a:	0003060b          	0x3060b
    245e:	0409                	addi	s0,s0,2
    2460:	0100                	addi	s0,sp,128
    2462:	1405                	addi	s0,s0,-31
    2464:	0200                	addi	s0,sp,256
    2466:	0104                	addi	s1,sp,128
    2468:	0306                	slli	t1,t1,0x1
    246a:	0900                	addi	s0,sp,144
    246c:	0002                	c.slli64	zero
    246e:	0501                	addi	a0,a0,0
    2470:	0005                	c.nop	1
    2472:	0402                	c.slli64	s0
    2474:	0601                	addi	a2,a2,0
    2476:	00090003          	lb	zero,0(s2)
    247a:	0100                	addi	s0,sp,128
    247c:	1605                	addi	a2,a2,-31
    247e:	04090603          	lb	a2,64(s2)
    2482:	0100                	addi	s0,sp,128
    2484:	0c05                	addi	s8,s8,1
    2486:	06097f03          	0x6097f03
    248a:	0100                	addi	s0,sp,128
    248c:	1105                	addi	sp,sp,-31
    248e:	0200                	addi	s0,sp,256
    2490:	0104                	addi	s1,sp,128
    2492:	0306                	slli	t1,t1,0x1
    2494:	0900                	addi	s0,sp,144
    2496:	0002                	c.slli64	zero
    2498:	0501                	addi	a0,a0,0
    249a:	0005                	c.nop	1
    249c:	0402                	c.slli64	s0
    249e:	0601                	addi	a2,a2,0
    24a0:	00090003          	lb	zero,0(s2)
    24a4:	0100                	addi	s0,sp,128
    24a6:	0306                	slli	t1,t1,0x1
    24a8:	0908                	addi	a0,sp,144
    24aa:	0004                	0x4
    24ac:	0501                	addi	a0,a0,0
    24ae:	0609                	addi	a2,a2,2
    24b0:	00090003          	lb	zero,0(s2)
    24b4:	0100                	addi	s0,sp,128
    24b6:	0505                	addi	a0,a0,1
    24b8:	0306                	slli	t1,t1,0x1
    24ba:	0904                	addi	s1,sp,144
    24bc:	000c                	0xc
    24be:	0501                	addi	a0,a0,0
    24c0:	060a                	slli	a2,a2,0x2
    24c2:	00090003          	lb	zero,0(s2)
    24c6:	0100                	addi	s0,sp,128
    24c8:	0505                	addi	a0,a0,1
    24ca:	0306                	slli	t1,t1,0x1
    24cc:	0901                	addi	s2,s2,0
    24ce:	000c                	0xc
    24d0:	0501                	addi	a0,a0,0
    24d2:	0014                	0x14
    24d4:	0402                	c.slli64	s0
    24d6:	0301                	addi	t1,t1,0
    24d8:	0900                	addi	s0,sp,144
    24da:	0002                	c.slli64	zero
    24dc:	0501                	addi	a0,a0,0
    24de:	0005                	c.nop	1
    24e0:	0402                	c.slli64	s0
    24e2:	0601                	addi	a2,a2,0
    24e4:	00090003          	lb	zero,0(s2)
    24e8:	0100                	addi	s0,sp,128
    24ea:	0306                	slli	t1,t1,0x1
    24ec:	0905                	addi	s2,s2,1
    24ee:	0004                	0x4
    24f0:	0501                	addi	a0,a0,0
    24f2:	0302                	c.slli64	t1
    24f4:	0901                	addi	s2,s2,0
    24f6:	0000                	unimp
    24f8:	0501                	addi	a0,a0,0
    24fa:	0601                	addi	a2,a2,0
    24fc:	00090203          	lb	tp,0(s2)
    2500:	0100                	addi	s0,sp,128
    2502:	0f05                	addi	t5,t5,1
    2504:	04097e03          	0x4097e03
    2508:	0100                	addi	s0,sp,128
    250a:	0505                	addi	a0,a0,1
    250c:	0306                	slli	t1,t1,0x1
    250e:	0901                	addi	s2,s2,0
    2510:	000c                	0xc
    2512:	0501                	addi	a0,a0,0
    2514:	0601                	addi	a2,a2,0
    2516:	00090103          	lb	sp,0(s2)
    251a:	0100                	addi	s0,sp,128
    251c:	0905                	addi	s2,s2,1
    251e:	0200                	addi	s0,sp,256
    2520:	0304                	addi	s1,sp,384
    2522:	0306                	slli	t1,t1,0x1
    2524:	00140967          	jalr	s2,1(s0)
    2528:	0501                	addi	a0,a0,0
    252a:	0019                	c.nop	6
    252c:	0402                	c.slli64	s0
    252e:	00030603          	lb	a2,0(t1)
    2532:	0009                	c.nop	2
    2534:	0100                	addi	s0,sp,128
    2536:	2305                	jal	2a56 <_bss_end+0x9ea>
    2538:	0200                	addi	s0,sp,256
    253a:	0304                	addi	s1,sp,384
    253c:	08097f03          	0x8097f03
    2540:	0100                	addi	s0,sp,128
    2542:	1505                	addi	a0,a0,-31
    2544:	0200                	addi	s0,sp,256
    2546:	0304                	addi	s1,sp,384
    2548:	04090103          	lb	sp,64(s2)
    254c:	0100                	addi	s0,sp,128
    254e:	2305                	jal	2a6e <_bss_end+0xa02>
    2550:	0200                	addi	s0,sp,256
    2552:	0304                	addi	s1,sp,384
    2554:	0306                	slli	t1,t1,0x1
    2556:	097f                	0x97f
    2558:	0004                	0x4
    255a:	0501                	addi	a0,a0,0
    255c:	0309                	addi	t1,t1,2
    255e:	0906                	slli	s2,s2,0x1
    2560:	0002                	c.slli64	zero
    2562:	0501                	addi	a0,a0,0
    2564:	060e                	slli	a2,a2,0x3
    2566:	00090003          	lb	zero,0(s2)
    256a:	0100                	addi	s0,sp,128
    256c:	0b05                	addi	s6,s6,1
    256e:	02090003          	lb	zero,32(s2)
    2572:	0100                	addi	s0,sp,128
    2574:	0d05                	addi	s10,s10,1
    2576:	0306                	slli	t1,t1,0x1
    2578:	00040903          	lb	s2,0(s0)
    257c:	0501                	addi	a0,a0,0
    257e:	0619                	addi	a2,a2,6
    2580:	00090003          	lb	zero,0(s2)
    2584:	0100                	addi	s0,sp,128
    2586:	1305                	addi	t1,t1,-31
    2588:	04090003          	lb	zero,64(s2)
    258c:	0100                	addi	s0,sp,128
    258e:	1805                	addi	a6,a6,-31
    2590:	0200                	addi	s0,sp,256
    2592:	0204                	addi	s1,sp,256
    2594:	0306                	slli	t1,t1,0x1
    2596:	097c                	addi	a5,sp,156
    2598:	0002                	c.slli64	zero
    259a:	0501                	addi	a0,a0,0
    259c:	0009                	c.nop	2
    259e:	0402                	c.slli64	s0
    25a0:	090e0303          	lb	t1,144(t3)
    25a4:	0006                	c.slli	zero,0x1
    25a6:	0501                	addi	a0,a0,0
    25a8:	0019                	c.nop	6
    25aa:	0402                	c.slli64	s0
    25ac:	00030603          	lb	a2,0(t1)
    25b0:	0009                	c.nop	2
    25b2:	0100                	addi	s0,sp,128
    25b4:	2305                	jal	2ad4 <_bss_end+0xa68>
    25b6:	0200                	addi	s0,sp,256
    25b8:	0304                	addi	s1,sp,384
    25ba:	08097f03          	0x8097f03
    25be:	0100                	addi	s0,sp,128
    25c0:	1505                	addi	a0,a0,-31
    25c2:	0200                	addi	s0,sp,256
    25c4:	0304                	addi	s1,sp,384
    25c6:	04090103          	lb	sp,64(s2)
    25ca:	0100                	addi	s0,sp,128
    25cc:	2305                	jal	2aec <_bss_end+0xa80>
    25ce:	0200                	addi	s0,sp,256
    25d0:	0304                	addi	s1,sp,384
    25d2:	0306                	slli	t1,t1,0x1
    25d4:	097f                	0x97f
    25d6:	0004                	0x4
    25d8:	0901                	addi	s2,s2,0
    25da:	0002                	c.slli64	zero
    25dc:	0100                	addi	s0,sp,128
    25de:	0501                	addi	a0,a0,0
    25e0:	0205000b          	0x205000b
    25e4:	1050                	addi	a2,sp,36
    25e6:	0000                	unimp
    25e8:	0105c103          	lbu	sp,16(a1) # 10 <__DYNAMIC+0x10>
    25ec:	0505                	addi	a0,a0,1
    25ee:	00090103          	lb	sp,0(s2)
    25f2:	0100                	addi	s0,sp,128
    25f4:	00090103          	lb	sp,0(s2)
    25f8:	0100                	addi	s0,sp,128
    25fa:	00090103          	lb	sp,0(s2)
    25fe:	0100                	addi	s0,sp,128
    2600:	00090103          	lb	sp,0(s2)
    2604:	0100                	addi	s0,sp,128
    2606:	00090103          	lb	sp,0(s2)
    260a:	0100                	addi	s0,sp,128
    260c:	00090103          	lb	sp,0(s2)
    2610:	0100                	addi	s0,sp,128
    2612:	00090203          	lb	tp,0(s2)
    2616:	0100                	addi	s0,sp,128
    2618:	0b05                	addi	s6,s6,1
    261a:	0306                	slli	t1,t1,0x1
    261c:	0978                	addi	a4,sp,156
    261e:	0000                	unimp
    2620:	0501                	addi	a0,a0,0
    2622:	0309                	addi	t1,t1,2
    2624:	0908                	addi	a0,sp,144
    2626:	0004                	0x4
    2628:	0501                	addi	a0,a0,0
    262a:	0978030b          	0x978030b
    262e:	000e                	c.slli	zero,0x3
    2630:	0501                	addi	a0,a0,0
    2632:	0309                	addi	t1,t1,2
    2634:	0908                	addi	a0,sp,144
    2636:	0008                	0x8
    2638:	0501                	addi	a0,a0,0
    263a:	0605                	addi	a2,a2,1
    263c:	02090103          	lb	sp,32(s2)
    2640:	0100                	addi	s0,sp,128
    2642:	00090103          	lb	sp,0(s2)
    2646:	0100                	addi	s0,sp,128
    2648:	00090103          	lb	sp,0(s2)
    264c:	0100                	addi	s0,sp,128
    264e:	00090103          	lb	sp,0(s2)
    2652:	0100                	addi	s0,sp,128
    2654:	00090103          	lb	sp,0(s2)
    2658:	0100                	addi	s0,sp,128
    265a:	00090103          	lb	sp,0(s2)
    265e:	0100                	addi	s0,sp,128
    2660:	00090103          	lb	sp,0(s2)
    2664:	0100                	addi	s0,sp,128
    2666:	00090a03          	lb	s4,0(s2)
    266a:	0100                	addi	s0,sp,128
    266c:	0c05                	addi	s8,s8,1
    266e:	0306                	slli	t1,t1,0x1
    2670:	0900                	addi	s0,sp,144
    2672:	0000                	unimp
    2674:	0501                	addi	a0,a0,0
    2676:	0605                	addi	a2,a2,1
    2678:	0c090303          	lb	t1,192(s2)
    267c:	0100                	addi	s0,sp,128
    267e:	1005                	c.nop	-31
    2680:	00090003          	lb	zero,0(s2)
    2684:	0100                	addi	s0,sp,128
    2686:	0c05                	addi	s8,s8,1
    2688:	0306                	slli	t1,t1,0x1
    268a:	097d                	addi	s2,s2,31
    268c:	0000                	unimp
    268e:	0501                	addi	a0,a0,0
    2690:	0305                	addi	t1,t1,1
    2692:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2696:	0501                	addi	a0,a0,0
    2698:	0009                	c.nop	2
    269a:	0402                	c.slli64	s0
    269c:	02030603          	lb	a2,32(t1)
    26a0:	0409                	addi	s0,s0,2
    26a2:	0100                	addi	s0,sp,128
    26a4:	1f05                	addi	t5,t5,-31
    26a6:	0200                	addi	s0,sp,256
    26a8:	0304                	addi	s1,sp,384
    26aa:	0306                	slli	t1,t1,0x1
    26ac:	0900                	addi	s0,sp,144
    26ae:	0000                	unimp
    26b0:	0501                	addi	a0,a0,0
    26b2:	0019                	c.nop	6
    26b4:	0402                	c.slli64	s0
    26b6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    26ba:	0006                	c.slli	zero,0x1
    26bc:	0501                	addi	a0,a0,0
    26be:	04020017          	auipc	zero,0x4020
    26c2:	7e030603          	lb	a2,2016(t1)
    26c6:	0609                	addi	a2,a2,2
    26c8:	0100                	addi	s0,sp,128
    26ca:	1005                	c.nop	-31
    26cc:	0200                	addi	s0,sp,256
    26ce:	0304                	addi	s1,sp,384
    26d0:	00090003          	lb	zero,0(s2)
    26d4:	0100                	addi	s0,sp,128
    26d6:	0505                	addi	a0,a0,1
    26d8:	0200                	addi	s0,sp,256
    26da:	0304                	addi	s1,sp,384
    26dc:	0306                	slli	t1,t1,0x1
    26de:	0900                	addi	s0,sp,144
    26e0:	0002                	c.slli64	zero
    26e2:	0501                	addi	a0,a0,0
    26e4:	0009                	c.nop	2
    26e6:	0402                	c.slli64	s0
    26e8:	09030603          	lb	a2,144(t1)
    26ec:	0409                	addi	s0,s0,2
    26ee:	0100                	addi	s0,sp,128
    26f0:	1b05                	addi	s6,s6,-31
    26f2:	0200                	addi	s0,sp,256
    26f4:	0304                	addi	s1,sp,384
    26f6:	00097e03          	0x97e03
    26fa:	0100                	addi	s0,sp,128
    26fc:	1005                	c.nop	-31
    26fe:	0200                	addi	s0,sp,256
    2700:	0304                	addi	s1,sp,384
    2702:	00090003          	lb	zero,0(s2)
    2706:	0100                	addi	s0,sp,128
    2708:	0905                	addi	s2,s2,1
    270a:	0200                	addi	s0,sp,256
    270c:	0304                	addi	s1,sp,384
    270e:	0c090903          	lb	s2,192(s2)
    2712:	0100                	addi	s0,sp,128
    2714:	2605                	jal	2a34 <_bss_end+0x9c8>
    2716:	0200                	addi	s0,sp,256
    2718:	0304                	addi	s1,sp,384
    271a:	0306                	slli	t1,t1,0x1
    271c:	0900                	addi	s0,sp,144
    271e:	0000                	unimp
    2720:	0501                	addi	a0,a0,0
    2722:	0020                	addi	s0,sp,8
    2724:	0402                	c.slli64	s0
    2726:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    272a:	0006                	c.slli	zero,0x1
    272c:	0501                	addi	a0,a0,0
    272e:	001f 0402 0603      	0x6030402001f
    2734:	04097e03          	0x4097e03
    2738:	0100                	addi	s0,sp,128
    273a:	1405                	addi	s0,s0,-31
    273c:	0200                	addi	s0,sp,256
    273e:	0304                	addi	s1,sp,384
    2740:	00090003          	lb	zero,0(s2)
    2744:	0100                	addi	s0,sp,128
    2746:	0505                	addi	a0,a0,1
    2748:	0200                	addi	s0,sp,256
    274a:	0304                	addi	s1,sp,384
    274c:	0306                	slli	t1,t1,0x1
    274e:	0900                	addi	s0,sp,144
    2750:	0000                	unimp
    2752:	0501                	addi	a0,a0,0
    2754:	0009                	c.nop	2
    2756:	0402                	c.slli64	s0
    2758:	09030603          	lb	a2,144(t1)
    275c:	0409                	addi	s0,s0,2
    275e:	0100                	addi	s0,sp,128
    2760:	1f05                	addi	t5,t5,-31
    2762:	0200                	addi	s0,sp,256
    2764:	0304                	addi	s1,sp,384
    2766:	00097e03          	0x97e03
    276a:	0100                	addi	s0,sp,128
    276c:	1405                	addi	s0,s0,-31
    276e:	0200                	addi	s0,sp,256
    2770:	0304                	addi	s1,sp,384
    2772:	00090003          	lb	zero,0(s2)
    2776:	0100                	addi	s0,sp,128
    2778:	0905                	addi	s2,s2,1
    277a:	0200                	addi	s0,sp,256
    277c:	0304                	addi	s1,sp,384
    277e:	0c090903          	lb	s2,192(s2)
    2782:	0100                	addi	s0,sp,128
    2784:	2305                	jal	2ca4 <_bss_end+0xc38>
    2786:	0200                	addi	s0,sp,256
    2788:	0304                	addi	s1,sp,384
    278a:	0306                	slli	t1,t1,0x1
    278c:	0900                	addi	s0,sp,144
    278e:	0000                	unimp
    2790:	0501                	addi	a0,a0,0
    2792:	001d                	c.nop	7
    2794:	0402                	c.slli64	s0
    2796:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    279a:	0006                	c.slli	zero,0x1
    279c:	0501                	addi	a0,a0,0
    279e:	001f 0402 0603      	0x6030402001f
    27a4:	04097e03          	0x4097e03
    27a8:	0100                	addi	s0,sp,128
    27aa:	1405                	addi	s0,s0,-31
    27ac:	0200                	addi	s0,sp,256
    27ae:	0304                	addi	s1,sp,384
    27b0:	00090003          	lb	zero,0(s2)
    27b4:	0100                	addi	s0,sp,128
    27b6:	0505                	addi	a0,a0,1
    27b8:	0200                	addi	s0,sp,256
    27ba:	0304                	addi	s1,sp,384
    27bc:	0306                	slli	t1,t1,0x1
    27be:	0900                	addi	s0,sp,144
    27c0:	0000                	unimp
    27c2:	0501                	addi	a0,a0,0
    27c4:	0009                	c.nop	2
    27c6:	0402                	c.slli64	s0
    27c8:	09030603          	lb	a2,144(t1)
    27cc:	0c09                	addi	s8,s8,2
    27ce:	0100                	addi	s0,sp,128
    27d0:	2205                	jal	28f0 <_bss_end+0x884>
    27d2:	0200                	addi	s0,sp,256
    27d4:	0304                	addi	s1,sp,384
    27d6:	0306                	slli	t1,t1,0x1
    27d8:	0900                	addi	s0,sp,144
    27da:	0000                	unimp
    27dc:	0501                	addi	a0,a0,0
    27de:	001c                	0x1c
    27e0:	0402                	c.slli64	s0
    27e2:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    27e6:	0006                	c.slli	zero,0x1
    27e8:	0501                	addi	a0,a0,0
    27ea:	0021                	c.nop	8
    27ec:	0402                	c.slli64	s0
    27ee:	7e030603          	lb	a2,2016(t1)
    27f2:	0409                	addi	s0,s0,2
    27f4:	0100                	addi	s0,sp,128
    27f6:	1405                	addi	s0,s0,-31
    27f8:	0200                	addi	s0,sp,256
    27fa:	0304                	addi	s1,sp,384
    27fc:	00090003          	lb	zero,0(s2)
    2800:	0100                	addi	s0,sp,128
    2802:	0505                	addi	a0,a0,1
    2804:	0200                	addi	s0,sp,256
    2806:	0304                	addi	s1,sp,384
    2808:	0306                	slli	t1,t1,0x1
    280a:	0900                	addi	s0,sp,144
    280c:	0000                	unimp
    280e:	0601                	addi	a2,a2,0
    2810:	04090903          	lb	s2,64(s2)
    2814:	0100                	addi	s0,sp,128
    2816:	1305                	addi	t1,t1,-31
    2818:	0306                	slli	t1,t1,0x1
    281a:	0900                	addi	s0,sp,144
    281c:	0000                	unimp
    281e:	0501                	addi	a0,a0,0
    2820:	0605                	addi	a2,a2,1
    2822:	10090b03          	lb	s6,256(s2)
    2826:	0100                	addi	s0,sp,128
    2828:	1305                	addi	t1,t1,-31
    282a:	0306                	slli	t1,t1,0x1
    282c:	0900                	addi	s0,sp,144
    282e:	0000                	unimp
    2830:	0501                	addi	a0,a0,0
    2832:	0605                	addi	a2,a2,1
    2834:	14091403          	lh	s0,320(s2)
    2838:	0100                	addi	s0,sp,128
    283a:	1005                	c.nop	-31
    283c:	00090003          	lb	zero,0(s2)
    2840:	0100                	addi	s0,sp,128
    2842:	1a05                	addi	s4,s4,-31
    2844:	0306                	slli	t1,t1,0x1
    2846:	0908                	addi	a0,sp,144
    2848:	0000                	unimp
    284a:	0501                	addi	a0,a0,0
    284c:	09640313          	addi	t1,s0,150
    2850:	0004                	0x4
    2852:	0501                	addi	a0,a0,0
    2854:	031a                	slli	t1,t1,0x6
    2856:	091c                	addi	a5,sp,144
    2858:	000a                	c.slli	zero,0x2
    285a:	0501                	addi	a0,a0,0
    285c:	0305                	addi	t1,t1,1
    285e:	0978                	addi	a4,sp,156
    2860:	0004                	0x4
    2862:	0501                	addi	a0,a0,0
    2864:	0609                	addi	a2,a2,2
    2866:	04090103          	lb	sp,64(s2)
    286a:	0100                	addi	s0,sp,128
    286c:	0b05                	addi	s6,s6,1
    286e:	0306                	slli	t1,t1,0x1
    2870:	0900                	addi	s0,sp,144
    2872:	0000                	unimp
    2874:	0501                	addi	a0,a0,0
    2876:	09000327          	0x9000327
    287a:	0002                	c.slli64	zero
    287c:	0501                	addi	a0,a0,0
    287e:	0900030b          	0x900030b
    2882:	0004                	0x4
    2884:	0501                	addi	a0,a0,0
    2886:	060d                	addi	a2,a2,3
    2888:	0a090203          	lb	tp,160(s2)
    288c:	0100                	addi	s0,sp,128
    288e:	1a05                	addi	s4,s4,-31
    2890:	0306                	slli	t1,t1,0x1
    2892:	0900                	addi	s0,sp,144
    2894:	0000                	unimp
    2896:	0501                	addi	a0,a0,0
    2898:	060d                	addi	a2,a2,3
    289a:	0a090203          	lb	tp,160(s2)
    289e:	0100                	addi	s0,sp,128
    28a0:	0505                	addi	a0,a0,1
    28a2:	00090903          	lb	s2,0(s2)
    28a6:	0100                	addi	s0,sp,128
    28a8:	0105                	addi	sp,sp,1
    28aa:	0306                	slli	t1,t1,0x1
    28ac:	0901                	addi	s2,s2,0
    28ae:	0000                	unimp
    28b0:	0501                	addi	a0,a0,0
    28b2:	000d                	c.nop	3
    28b4:	0402                	c.slli64	s0
    28b6:	0602                	c.slli64	a2
    28b8:	10097903          	0x10097903
    28bc:	0100                	addi	s0,sp,128
    28be:	1a05                	addi	s4,s4,-31
    28c0:	0200                	addi	s0,sp,256
    28c2:	0204                	addi	s1,sp,256
    28c4:	0306                	slli	t1,t1,0x1
    28c6:	0900                	addi	s0,sp,144
    28c8:	0000                	unimp
    28ca:	0501                	addi	a0,a0,0
    28cc:	0018                	0x18
    28ce:	0402                	c.slli64	s0
    28d0:	0602                	c.slli64	a2
    28d2:	02097803          	0x2097803
    28d6:	0100                	addi	s0,sp,128
    28d8:	1005                	c.nop	-31
    28da:	0200                	addi	s0,sp,256
    28dc:	0204                	addi	s1,sp,256
    28de:	00090003          	lb	zero,0(s2)
    28e2:	0100                	addi	s0,sp,128
    28e4:	0505                	addi	a0,a0,1
    28e6:	0200                	addi	s0,sp,256
    28e8:	0204                	addi	s1,sp,256
    28ea:	0306                	slli	t1,t1,0x1
    28ec:	0900                	addi	s0,sp,144
    28ee:	0002                	c.slli64	zero
    28f0:	0901                	addi	s2,s2,0
    28f2:	0006                	c.slli	zero,0x1
    28f4:	0100                	addi	s0,sp,128
    28f6:	5001                	c.li	zero,-32
    28f8:	0001                	nop
    28fa:	0300                	addi	s0,sp,384
    28fc:	1d00                	addi	s0,sp,688
    28fe:	0000                	unimp
    2900:	0100                	addi	s0,sp,128
    2902:	fb01                	bnez	a4,2812 <_bss_end+0x7a6>
    2904:	0d0e                	slli	s10,s10,0x3
    2906:	0100                	addi	s0,sp,128
    2908:	0101                	addi	sp,sp,0
    290a:	0001                	nop
    290c:	0000                	unimp
    290e:	0001                	nop
    2910:	0100                	addi	s0,sp,128
    2912:	6300                	flw	fs0,0(a4)
    2914:	7472                	flw	fs0,60(sp)
    2916:	2e30                	fld	fa2,88(a2)
    2918:	00000053          	fadd.s	ft0,ft0,ft0,rne
    291c:	0000                	unimp
    291e:	0500                	addi	s0,sp,640
    2920:	5402                	lw	s0,32(sp)
    2922:	000e                	c.slli	zero,0x3
    2924:	1500                	addi	s0,sp,672
    2926:	04090403          	lb	s0,64(s2)
    292a:	0100                	addi	s0,sp,128
    292c:	04090103          	lb	sp,64(s2)
    2930:	0100                	addi	s0,sp,128
    2932:	02090103          	lb	sp,32(s2)
    2936:	0100                	addi	s0,sp,128
    2938:	02090103          	lb	sp,32(s2)
    293c:	0100                	addi	s0,sp,128
    293e:	02090103          	lb	sp,32(s2)
    2942:	0100                	addi	s0,sp,128
    2944:	02090103          	lb	sp,32(s2)
    2948:	0100                	addi	s0,sp,128
    294a:	02090103          	lb	sp,32(s2)
    294e:	0100                	addi	s0,sp,128
    2950:	02090103          	lb	sp,32(s2)
    2954:	0100                	addi	s0,sp,128
    2956:	02090103          	lb	sp,32(s2)
    295a:	0100                	addi	s0,sp,128
    295c:	02090103          	lb	sp,32(s2)
    2960:	0100                	addi	s0,sp,128
    2962:	02090103          	lb	sp,32(s2)
    2966:	0100                	addi	s0,sp,128
    2968:	02090103          	lb	sp,32(s2)
    296c:	0100                	addi	s0,sp,128
    296e:	02090103          	lb	sp,32(s2)
    2972:	0100                	addi	s0,sp,128
    2974:	02090103          	lb	sp,32(s2)
    2978:	0100                	addi	s0,sp,128
    297a:	02090103          	lb	sp,32(s2)
    297e:	0100                	addi	s0,sp,128
    2980:	02090103          	lb	sp,32(s2)
    2984:	0100                	addi	s0,sp,128
    2986:	02090103          	lb	sp,32(s2)
    298a:	0100                	addi	s0,sp,128
    298c:	02090103          	lb	sp,32(s2)
    2990:	0100                	addi	s0,sp,128
    2992:	02090103          	lb	sp,32(s2)
    2996:	0100                	addi	s0,sp,128
    2998:	02090103          	lb	sp,32(s2)
    299c:	0100                	addi	s0,sp,128
    299e:	02090103          	lb	sp,32(s2)
    29a2:	0100                	addi	s0,sp,128
    29a4:	02090103          	lb	sp,32(s2)
    29a8:	0100                	addi	s0,sp,128
    29aa:	02090103          	lb	sp,32(s2)
    29ae:	0100                	addi	s0,sp,128
    29b0:	02090103          	lb	sp,32(s2)
    29b4:	0100                	addi	s0,sp,128
    29b6:	02090103          	lb	sp,32(s2)
    29ba:	0100                	addi	s0,sp,128
    29bc:	02090103          	lb	sp,32(s2)
    29c0:	0100                	addi	s0,sp,128
    29c2:	02090103          	lb	sp,32(s2)
    29c6:	0100                	addi	s0,sp,128
    29c8:	02090103          	lb	sp,32(s2)
    29cc:	0100                	addi	s0,sp,128
    29ce:	02090103          	lb	sp,32(s2)
    29d2:	0100                	addi	s0,sp,128
    29d4:	02090103          	lb	sp,32(s2)
    29d8:	0100                	addi	s0,sp,128
    29da:	02090103          	lb	sp,32(s2)
    29de:	0100                	addi	s0,sp,128
    29e0:	02090303          	lb	t1,32(s2)
    29e4:	0100                	addi	s0,sp,128
    29e6:	08090603          	lb	a2,128(s2)
    29ea:	0100                	addi	s0,sp,128
    29ec:	08090103          	lb	sp,128(s2)
    29f0:	0100                	addi	s0,sp,128
    29f2:	08090203          	lb	tp,128(s2)
    29f6:	0100                	addi	s0,sp,128
    29f8:	04090303          	lb	t1,64(s2)
    29fc:	0100                	addi	s0,sp,128
    29fe:	04090103          	lb	sp,64(s2)
    2a02:	0100                	addi	s0,sp,128
    2a04:	02090103          	lb	sp,32(s2)
    2a08:	0100                	addi	s0,sp,128
    2a0a:	04090603          	lb	a2,64(s2)
    2a0e:	0100                	addi	s0,sp,128
    2a10:	04090103          	lb	sp,64(s2)
    2a14:	0100                	addi	s0,sp,128
    2a16:	04090103          	lb	sp,64(s2)
    2a1a:	0100                	addi	s0,sp,128
    2a1c:	0409                	addi	s0,s0,2
    2a1e:	0000                	unimp
    2a20:	0101                	addi	sp,sp,0
    2a22:	0500                	addi	s0,sp,640
    2a24:	0002                	c.slli64	zero
    2a26:	0000                	unimp
    2a28:	0300                	addi	s0,sp,384
    2a2a:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    2a2e:	0901                	addi	s2,s2,0
    2a30:	007c                	addi	a5,sp,12
    2a32:	0301                	addi	t1,t1,0
    2a34:	0904                	addi	s1,sp,144
    2a36:	0004                	0x4
    2a38:	0301                	addi	t1,t1,0
    2a3a:	0904                	addi	s1,sp,144
    2a3c:	0004                	0x4
    2a3e:	0301                	addi	t1,t1,0
    2a40:	0904                	addi	s1,sp,144
    2a42:	0004                	0x4
    2a44:	0901                	addi	s2,s2,0
    2a46:	0004                	0x4
    2a48:	0100                	addi	s0,sp,128
    2a4a:	01              	Address 0x0000000000002a4a is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid>
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    switch(length%3) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < (length / 3); i++) {
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	7465                	lui	s0,0xffff9
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
            a1[length-1] = a2[length-1];
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
            a1[length-1] = a2[length-1];
  e4:	5f00                	lw	s0,56(a4)
            a1[length-2] = a2[length-2];
  e6:	745f 5f6d 6573      	0x65735f6d745f
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0xea>
} //end of function
  f0:	676e                	flw	fa4,216(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    asm volatile(
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 100:	4e5f 2f00 6f68      	0x6f682f004e5f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 106:	656d                	lui	a0,0x1b
    asm volatile(
 108:	696c652f          	0x696c652f
 10c:	6e66                	flw	ft8,88(sp)
 10e:	7275                	lui	tp,0xffffd
 110:	7365442f          	0x7365442f
            for (i = 0; i < ((length-1) / 3); i++) {
 114:	706f746b          	0x706f746b
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 118:	6e65732f          	0x6e65732f
    asm volatile(
 11c:	6f69                	lui	t5,0x1a
 11e:	5f72                	lw	t5,60(sp)
 120:	7270                	flw	fa2,100(a2)
 122:	63656a6f          	jal	s4,56758 <_stack_start+0x46758>
            for (i = 0; i < ((length-2) / 3); i++) {
 126:	2d74                	fld	fa3,216(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	616d                	addi	sp,sp,240
 12a:	72657473          	csrrci	s0,0x726,10
 12e:	2f77732f          	0x2f77732f
    int line[size_b][size_a + size_b];
 132:	75636c6f          	jal	s8,36888 <_stack_start+0x26888>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	6c6d                	lui	s8,0x1b
 138:	7265                	lui	tp,0xffff9
    int line[size_b][size_a + size_b];
 13a:	795f 6e65 2f69      	0x2f696e65795f
 140:	28322e33          	0x28322e33
 144:	695f5343          	fmadd.s	ft6,ft10,fs5,fa3,unknown
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 148:	5f6e                	lw	t5,248(sp)
 14a:	7566                	flw	fa0,120(sp)
 14c:	636e                	flw	ft6,216(sp)
 14e:	6974                	flw	fa3,84(a0)
 150:	29736e6f          	jal	t3,36be6 <_stack_start+0x26be6>
 154:	652e                	flw	fa0,200(sp)
 156:	7571                	lui	a0,0xffffc
 158:	7000                	flw	fs0,32(s0)
 15a:	6d796c6f          	jal	s8,97030 <_stack_start+0x87030>
    int line[size_b][size_a + size_b];
 15e:	6c75                	lui	s8,0x1d
    int pola[size_a];
 160:	0074                	addi	a3,sp,12
 162:	755f 7562 0066      	0x667562755f
    int line[size_b][size_a + size_b];
 168:	625f 7361 0065      	0x657361625f
 16e:	5f5f 6d74 685f      	0x685f6d745f5f
    int polb[size_b];
 174:	0072756f          	jal	a0,2797a <_stack_start+0x1797a>
 178:	5f5f 6673 5f00      	0x5f0066735f5f
 17e:	655f6e6f          	jal	t3,f6fd2 <_stack_start+0xe6fd2>
            line[i][j] = 0;
 182:	6978                	flw	fa4,84(a0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	5f74                	lw	a3,124(a4)
 186:	7261                	lui	tp,0xffff8
    int pola[size_a];
 188:	5f007367          	0x5f007367
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	6b6f6f63          	bltu	t5,s6,84a <ext_euclid+0x168>
    int line[size_b][size_a + size_b];
 190:	6569                	lui	a0,0x1a
    int polb[size_b];
 192:	5f00                	lw	s0,56(a4)
            line[i][j] = 0;
 194:	735f 6c67 6575      	0x65756c67735f
    for (i = 0; i < size_b; ++i){
 19a:	7200                	flw	fs0,32(a2)
 19c:	7365                	lui	t1,0xffff9
            product[j] = 0;
 19e:	0031                	c.nop	12
 1a0:	6572                	flw	fa0,28(sp)
 1a2:	5f003273          	csrrc	tp,0x5f0,zero
    for (i = 0; i < size_b; ++i){
 1a6:	6c66                	flw	fs8,88(sp)
 1a8:	6761                	lui	a4,0x18
    array_equ(pola,a,size_a); 
 1aa:	695f0073          	0x695f0073
 1ae:	78635f73          	csrrwi	t5,0x786,6
 1b2:	0061                	c.nop	24
 1b4:	735f 6474 6e69      	0x6e696474735f
    for (i = 0; i < size_a; ++i){
 1ba:	5f00                	lw	s0,56(a4)
 1bc:	6c62                	flw	fs8,24(sp)
 1be:	7a69736b          	0x7a69736b
 1c2:	0065                	c.nop	25
 1c4:	7270                	flw	fa2,100(a2)
 1c6:	6375646f          	jal	s0,56ffc <_stack_start+0x46ffc>
    array_equ(polb,b,size_b);
 1ca:	0074                	addi	a3,sp,12
 1cc:	6f70                	flw	fa2,92(a4)
 1ce:	796c                	flw	fa1,116(a0)
 1d0:	6964                	flw	fs1,84(a0)
    for (i = 0; i < size_b; ++i){
 1d2:	0076                	c.slli	zero,0x1d
 1d4:	6f70                	flw	fa2,92(a4)
 1d6:	796c                	flw	fa1,116(a0)
 1d8:	0066                	c.slli	zero,0x19
    if(star_mult == 1){
 1da:	635f 7476 7562      	0x75627476635f
 1e0:	0066                	c.slli	zero,0x19
 1e2:	6f5f 6666 6573      	0x657366666f5f
 1e8:	0074                	addi	a3,sp,12
 1ea:	6d5f 7362 7472      	0x747273626d5f
        for (j = size_b -1; j >= 0; j = j-1){
 1f0:	7363776f          	jal	a4,37926 <_stack_start+0x27926>
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f4:	735f 6174 6574      	0x65746174735f
            product[j] = 0;
 1fa:	5f00                	lw	s0,56(a4)
            line[i][j] = 0;
 1fc:	626d                	lui	tp,0x1b
 1fe:	6c72                	flw	fs8,28(sp)
            product[j] = 0;
 200:	6e65                	lui	t3,0x19
 202:	735f 6174 6574      	0x65746174735f
        for(j = 0; j < size_a + size_b -1; ++j){
 208:	5f00                	lw	s0,56(a4)
 20a:	6e66                	flw	ft8,88(sp)
    for (i = 0; i < size_b; ++i){
 20c:	7261                	lui	tp,0xffff8
 20e:	6e007367          	0x6e007367
 212:	7274                	flw	fa3,100(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 214:	5f75                	li	t5,-3
 216:	6564                	flw	fs1,76(a0)
            pola[i] = pola[i] + mod;
 218:	70796563          	bltu	s2,t2,922 <ext_euclid+0x240>
        while (pola[i] < 0){
 21c:	0074                	addi	a3,sp,12
 21e:	665f 736e 5f00      	0x5f00736e665f
        pola[i] = pola[i] % mod;
 224:	6e676973          	csrrsi	s2,0x6e6,14
    for (i = 0; i < size_a; ++i){
 228:	5f00                	lw	s0,56(a4)
        pola[i] = pola[i] % mod;
 22a:	6c66                	flw	fs8,88(sp)
 22c:	5f6b636f          	jal	t1,b6822 <_stack_start+0xa6822>
            polb[i] = polb[i] + mod;
 230:	0074                	addi	a3,sp,12
 232:	735f 6474 7265      	0x72656474735f
        while (polb[i] < 0){
 238:	0072                	c.slli	zero,0x1c
        polb[i] = polb[i] % mod;
 23a:	425f 6769 6e69      	0x6e696769425f
    for (i = 0; i < size_b; ++i){
 240:	0074                	addi	a3,sp,12
        polb[i] = polb[i] % mod;
 242:	675f 6d61 616d      	0x616d6d61675f
    if(star_mult == 1){
 248:	735f 6769 676e      	0x676e6769735f
        for(j = 0; j < size_a + size_b -1; ++j){
 24e:	6d61                	lui	s10,0x18
    for (i = 0; i < size_b; ++i){
 250:	5f00                	lw	s0,56(a4)
 252:	6572                	flw	fa0,28(sp)
 254:	6461                	lui	s0,0x18
 256:	5f00                	lw	s0,56(a4)
 258:	6572                	flw	fa0,28(sp)
 25a:	746c7573          	csrrci	a0,0x746,24
    for(j = 0; j < size_a + size_b -1; ++j){
 25e:	6b5f 5f00 745f      	0x745f5f006b5f
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	006d                	c.nop	27
 266:	6564                	flw	fs1,76(a0)
 268:	756e                	flw	fa0,248(sp)
}
 26a:	5f6d                	li	t5,-5
 26c:	6574                	flw	fa3,76(a0)
 26e:	706d                	c.lui	zero,0xffffb
 270:	5f00                	lw	s0,56(a4)
 272:	775f 6863 0062      	0x626863775f
 278:	6572                	flw	fa0,28(sp)
 27a:	746c7573          	csrrci	a0,0x746,24
 27e:	006e6f6b          	0x6e6f6b
 282:	735f 6474 756f      	0x756f6474735f
 288:	0074                	addi	a3,sp,12
 28a:	635f 7476 656c      	0x656c7476635f
 290:	006e                	c.slli	zero,0x1b
 292:	72636573          	csrrsi	a0,0x726,6
                line[size_b-1-j][k] = pola[k]*polb[j];
 296:	7465                	lui	s0,0xffff9
 298:	6b5f 7965 665f      	0x665f79656b5f
 29e:	0071                	c.nop	28
 2a0:	665f 6c69 0065      	0x656c69665f
 2a6:	6572                	flw	fa0,28(sp)
 2a8:	7574                	flw	fa3,108(a0)
 2aa:	6e72                	flw	ft8,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ac:	615f 6464 6572      	0x65726464615f
        for (j = size_b -1; j >= 0; j = j-1){
 2b2:	00317373          	csrrci	t1,fcsr,2
 2b6:	6572                	flw	fa0,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b8:	7574                	flw	fa3,108(a0)
 2ba:	6e72                	flw	ft8,28(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2bc:	615f 6464 6572      	0x65726464615f
 2c2:	00327373          	csrrci	t1,fcsr,4
 2c6:	6572                	flw	fa0,28(sp)
 2c8:	7574                	flw	fa3,108(a0)
 2ca:	6e72                	flw	ft8,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2cc:	615f 6464 6572      	0x65726464615f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2d2:	00337373          	csrrci	t1,fcsr,6
            for (k = size_a-1; k >= 0; k = k-1 ){
 2d6:	6572                	flw	fa0,28(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 2d8:	7574                	flw	fa3,108(a0)
 2da:	6e72                	flw	ft8,28(sp)
 2dc:	615f 6464 6572      	0x65726464615f
        for(j = 0; j < size_a + size_b -1; ++j){
 2e2:	00347373          	csrrci	t1,fcsr,8
            line[i][j] = line[i][j] % mod;
 2e6:	6e5f 6f69 7362      	0x73626f696e5f
 2ec:	7200                	flw	fs0,32(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 2ee:	7465                	lui	s0,0xffff9
 2f0:	7275                	lui	tp,0xffffd
    for (i = 0; i < size_b; ++i){
 2f2:	5f6e                	lw	t5,248(sp)
 2f4:	6461                	lui	s0,0x18
 2f6:	7264                	flw	fs1,100(a2)
 2f8:	7365                	lui	t1,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 2fa:	72003673          	csrrc	a2,0x720,zero
            product[j] += line[i][j];
 2fe:	7465                	lui	s0,0xffff9
 300:	7275                	lui	tp,0xffffd
 302:	5f6e                	lw	t5,248(sp)
 304:	6461                	lui	s0,0x18
 306:	7264                	flw	fs1,100(a2)
        for(i = 0; i < size_b; ++i){
 308:	7365                	lui	t1,0xffff9
            product[j] += line[i][j];
 30a:	73003773          	csrrc	a4,0x730,zero
 30e:	6f68                	flw	fa0,92(a4)
 310:	7472                	flw	fs0,60(sp)
 312:	7520                	flw	fs0,104(a0)
 314:	736e                	flw	ft6,248(sp)
        for(i = 0; i < size_b; ++i){
 316:	6769                	lui	a4,0x1a
 318:	656e                	flw	fa0,216(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 31a:	2064                	fld	fs1,192(s0)
 31c:	6e69                	lui	t3,0x1a
 31e:	0074                	addi	a3,sp,12
        for(i = 0; i < size_b; ++i){
 320:	615f 6574 6978      	0x69786574615f
    for(j = 0; j < size_a + size_b -1; ++j){
 326:	3074                	fld	fa3,224(s0)
 328:	5f00                	lw	s0,56(a4)
        product[j] = product[j] % mod;
 32a:	6e676973          	csrrsi	s2,0x6e6,14
 32e:	6c61                	lui	s8,0x18
 330:	625f 6675 5f00      	0x5f006675625f
    int line[size_b][size_a + size_b];
 336:	7361                	lui	t1,0xffff8
 338:	6d697463          	bgeu	s2,s6,a00 <generate_keys+0x70>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33c:	5f65                	li	t5,-7
 33e:	7562                	flw	fa0,56(sp)
 340:	0066                	c.slli	zero,0x19
 342:	725f 7365 6c75      	0x6c757365725f
    int line[size_b][size_a + size_b];
 348:	0074                	addi	a3,sp,12
 34a:	5f5f 6377 0068      	0x6863775f5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 350:	746e6977          	0x746e6977
 354:	745f 6700 6e65      	0x6e656700745f
 35a:	7265                	lui	tp,0xffff9
 35c:	7461                	lui	s0,0xffff8
 35e:	5f65                	li	t5,-7
 360:	7379656b          	0x7379656b
 364:	5f00                	lw	s0,56(a4)
 366:	625f 6975 746c      	0x746c6975625f
    int line[size_b][size_a + size_b];
 36c:	6e69                	lui	t3,0x1a
    int pola[size_a];
 36e:	6d5f 6d65 7063      	0x70636d656d5f
 374:	0079                	c.nop	30
    int line[size_b][size_a + size_b];
 376:	6c5f 636f 006b      	0x6b636f6c5f
    int polb[size_b];
 37c:	544e                	lw	s0,240(sp)
 37e:	5552                	lw	a0,52(sp)
 380:	345f 5f38 6962      	0x69625f38345f
 386:	4d74                	lw	a3,92(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 388:	632e                	flw	ft6,200(sp)
 38a:	7000                	flw	fs0,32(s0)
    int line[size_b][size_a + size_b];
 38c:	6f72                	flw	ft10,28(sp)
 38e:	7564                	flw	fs1,108(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 390:	00327463          	bgeu	tp,gp,398 <polymult2+0x64>
    int pola[size_a];
 394:	7865                	lui	a6,0xffff9
    int polb[size_b];
 396:	5f74                	lw	a3,124(a4)
    for (i = 0; i < size_b; ++i){
 398:	7565                	lui	a0,0xffff9
 39a:	64696c63          	bltu	s2,t1,9f2 <generate_keys+0x62>
            product2[j] = 0;
 39e:	5f00                	lw	s0,56(a4)
 3a0:	74697277          	0x74697277
 3a4:	0065                	c.nop	25
    for (i = 0; i < size_b; ++i){
 3a6:	5f5f 6d74 795f      	0x795f6d745f5f
    array_equ(pola,a,size_a);
 3ac:	6165                	addi	sp,sp,112
 3ae:	0072                	c.slli	zero,0x1c
 3b0:	6f70                	flw	fa2,92(a4)
 3b2:	626c                	flw	fa1,68(a2)
 3b4:	7200                	flw	fs0,32(a2)
    array_equ(polb,b,size_b);
 3b6:	6e61                	lui	t3,0x18
 3b8:	6f64                	flw	fs1,92(a4)
 3ba:	5f6d                	li	t5,-5
 3bc:	6176                	flw	ft2,92(sp)
 3be:	006c                	addi	a1,sp,12
 3c0:	6e5f 616d 6c6c      	0x6c6c616d6e5f
    if(star_mult == 1){
 3c6:	6c00636f          	jal	t1,6a86 <_stack_len+0x2a86>
 3ca:	20676e6f          	jal	t3,765d0 <_stack_start+0x665d0>
 3ce:	6f64                	flw	fs1,92(a4)
 3d0:	6275                	lui	tp,0x1d
 3d2:	656c                	flw	fa1,76(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 3d4:	5f00                	lw	s0,56(a4)
 3d6:	656e                	flw	fa0,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	7478                	flw	fa4,108(s0)
 3da:	0066                	c.slli	zero,0x19
            product2[j] = 0;
 3dc:	7261                	lui	tp,0xffff8
 3de:	6172                	flw	ft2,28(sp)
 3e0:	5f79                	li	t5,-2
            line[i][j] = 0;
 3e2:	7165                	addi	sp,sp,-400
 3e4:	0075                	c.nop	29
            product2[j] = 0;
 3e6:	656d                	lui	a0,0x1b
 3e8:	67617373          	csrrci	t1,0x676,2
        for(j = 0; j < size_a + size_b -1; ++j){
 3ec:	0065                	c.nop	25
 3ee:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    for (i = 0; i < size_b; ++i){
 3f4:	72006e6f          	jal	t3,6b14 <_stack_len+0x2b14>
 3f8:	7465                	lui	s0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 3fa:	7275                	lui	tp,0xffffd
 3fc:	5f6e                	lw	t5,248(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 3fe:	6461                	lui	s0,0x18
 400:	7264                	flw	fs1,100(a2)
 402:	7365                	lui	t1,0xffff9
 404:	5f003573          	csrrc	a0,0x5f0,zero
 408:	7461                	lui	s0,0xffff8
 40a:	7865                	lui	a6,0xffff9
 40c:	7469                	lui	s0,0xffffa
            for (k = size_a-1; k >= 0; k = k-1 ){
 40e:	7300                	flw	fs0,32(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 410:	6275                	lui	tp,0x1d
 412:	6174706f          	j	48228 <_stack_start+0x38228>
            for (k = size_a-1; k >= 0; k = k-1 ){
 416:	6772                	flw	fa4,28(sp)
 418:	5f00                	lw	s0,56(a4)
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	735f 6964 6964      	0x69646964735f
 420:	696e                	flw	fs2,216(sp)
 422:	0074                	addi	a3,sp,12
        for(j=0;j<size_a+size_b-1;++j){
 424:	6f5f 6666 745f      	0x745f66666f5f
    for(i=0;i<size_b;++i){
 42a:	4500                	lw	s0,8(a0)
 42c:	636e                	flw	ft6,216(sp)
 42e:	4d5f 7365 6173      	0x617373654d5f
        for(j=0;j<size_a+size_b-1;++j){
 434:	63006567          	0x63006567
            for (k = size_a-1; k >= 0; k = k-1 ){
 438:	72746e6f          	jal	t3,4735e <_stack_start+0x3735e>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 43c:	00526c6f          	jal	s8,26c40 <_stack_start+0x16c40>
 440:	665f 6572 6c65      	0x6c656572665f
 446:	7369                	lui	t1,0xffffa
 448:	0074                	addi	a3,sp,12
 44a:	6972                	flw	fs2,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 44c:	676e                	flw	fa4,216(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 44e:	705f 6c6f 0079      	0x796c6f705f
            for (k = size_a-1; k >= 0; k = k-1 ){
 454:	4c5f 434f 5f4b      	0x5f4b434f4c5f
        for (j = size_b -1; j >= 0; j = j-1){
 45a:	4552                	lw	a0,20(sp)
 45c:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
            product2[j] += line[i][j];
 460:	5649                	li	a2,-14
 462:	5f45                	li	t5,-15
        for(j=0;j<size_a+size_b-1;++j){
 464:	0054                	addi	a3,sp,4
 466:	6974                	flw	fa3,84(a0)
            product2[j] += line[i][j];
 468:	315f 7400 5f69      	0x5f697400315f
        for(j=0;j<size_a+size_b-1;++j){
 46e:	0032                	c.slli	zero,0xc
 470:	6e75                	lui	t3,0x1d
 472:	6e676973          	csrrsi	s2,0x6e6,14
    for(i=0;i<size_b;++i){
 476:	6465                	lui	s0,0x19
 478:	6320                	flw	fs0,64(a4)
}
 47a:	6168                	flw	fa0,68(a0)
 47c:	0072                	c.slli	zero,0x1c
 47e:	6971                	lui	s2,0x1c
 480:	315f 5f00 656e      	0x656e5f00315f
 486:	685f0077          	0x685f0077
 48a:	655f 7272 6f6e      	0x6f6e7272655f
 490:	7300                	flw	fs0,32(a4)
 492:	6f68                	flw	fa0,92(a4)
 494:	7472                	flw	fs0,60(sp)
 496:	6920                	flw	fs0,80(a0)
 498:	746e                	flw	fs0,248(sp)
 49a:	5f00                	lw	s0,56(a4)
 49c:	745f 5f6d 6479      	0x64795f6d745f
 4a2:	7961                	lui	s2,0xffff8
    int v[size_N];
 4a4:	5f00                	lw	s0,56(a4)
 4a6:	735f 7562 0066      	0x667562735f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4ac:	665f 616c 7367      	0x7367616c665f
 4b2:	0032                	c.slli	zero,0xc
 4b4:	695f 626f 0073      	0x73626f695f
 4ba:	5f5f 4946 454c      	0x454c49465f5f
 4c0:	5f00                	lw	s0,56(a4)
 4c2:	626d                	lui	tp,0x1b
    int v[size_N];
 4c4:	74617473          	csrrci	s0,0x746,2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4c8:	5f65                	li	t5,-7
    int v[size_N];
 4ca:	0074                	addi	a3,sp,12
 4cc:	5f5f 4673 4c49      	0x4c4946735f5f
    int q[size_N];
 4d2:	0045                	c.nop	17
 4d4:	6d5f 7362 6174      	0x617473626d5f
    int denum_temp[size_D];
 4da:	6574                	flw	fa3,76(a0)
 4dc:	5f00                	lw	s0,56(a4)
 4de:	6172                	flw	ft2,28(sp)
    int num_temp[size_N];
 4e0:	646e                	flw	fs0,216(sp)
    int denum_temp[size_D];
 4e2:	6e5f 7865 0074      	0x7478656e5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4e8:	6d5f 6c62 6e65      	0x6e656c626d5f
    int v[size_N];
 4ee:	735f 6174 6574      	0x65746174735f
    array_equ(num_temp,num,size_N);
 4f4:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4f6:	6e69                	lui	t3,0x1a
 4f8:	695f0063          	beq	t5,s5,b78 <generate_keys+0x1e8>
    int denum_temp[size_D];
 4fc:	646e                	flw	fs0,216(sp)
    array_equ(num_temp,num,size_N);
 4fe:	5f00                	lw	s0,56(a4)
    int denum_temp[size_D];
 500:	6f6c                	flw	fa1,92(a4)
    for (i = 0; i < size_N; ++i){
 502:	656c6163          	bltu	s8,s6,b44 <generate_keys+0x1b4>
 506:	5f00                	lw	s0,56(a4)
 508:	635f 656c 6e61      	0x6e61656c635f
        array_equ(denum_temp,denum,size_D);
 50e:	7075                	c.lui	zero,0xffffd
 510:	5f00                	lw	s0,56(a4)
 512:	6e75                	lui	t3,0x1d
    for (i = 0; i < size_D; ++i) {
 514:	63657073          	csrci	0x636,10
 518:	6669                	lui	a2,0x1a
 51a:	6569                	lui	a0,0x1a
    for (i = 0; i < size_N; ++i){
 51c:	5f64                	lw	s1,124(a4)
 51e:	6f6c                	flw	fa1,92(a4)
 520:	656c6163          	bltu	s8,s6,b62 <generate_keys+0x1d2>
    for (i = size_D-1; i >= 0; i = i-1){
 524:	695f 666e 006f      	0x6f666e695f
 52a:	6d5f 7861 6477      	0x647778616d5f
    for (i = 0; i < size_N; ++i){
 530:	725f0073          	0x725f0073
    for (u = 0; u < mod; ++u){
 534:	6565                	lui	a0,0x19
 536:	746e                	flw	fs0,248(sp)
 538:	7300                	flw	fs0,32(a4)
 53a:	6174                	flw	fa3,68(a0)
            num_temp[i] = num_temp[i] + mod;
 53c:	5f72                	lw	t5,60(sp)
 53e:	756d                	lui	a0,0xffffb
        while (num_temp[i] < 0) {
 540:	746c                	flw	fa1,108(s0)
 542:	5f00                	lw	s0,56(a4)
 544:	64656573          	csrrsi	a0,0x646,10
        num_temp[i] = num_temp[i] % mod;
 548:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_N; ++i){
 54a:	5f69                	li	t5,-6
 54c:	0032                	c.slli	zero,0xc
        num_temp[i] = num_temp[i] % mod;
 54e:	5f5f 6f63 6e75      	0x6e756f635f5f
            denum_temp[i] = denum_temp[i] + mod;
 554:	0074                	addi	a3,sp,12
 556:	5f5f 6176 756c      	0x756c61765f5f
        while (denum_temp[i] < 0) {
 55c:	0065                	c.nop	25
        denum_temp[i] = denum_temp[i] % mod;
 55e:	735f 6565 006b      	0x6b6565735f
    for (i = 0; i < size_D; ++i) {
 564:	665f 6f70 5f73      	0x5f736f70665f
 56a:	0074                	addi	a3,sp,12
        q[i] = 0;
 56c:	656c                	flw	fa1,76(a0)
 56e:	676e                	flw	fa4,216(sp)
 570:	6874                	flw	fa3,84(s0)
 572:	5f00                	lw	s0,56(a4)
        v[i] = 0;
 574:	745f 5f6d 696d      	0x696d5f6d745f
 57a:	006e                	c.slli	zero,0x1b
 57c:	7570                	flw	fa2,108(a0)
    for (i = 0; i < size_N; ++i){
 57e:	6c62                	flw	fs8,24(sp)
 580:	6369                	lui	t1,0x1a
        if( denum_temp[i] != 0 )
 582:	6b5f 7965 5f00      	0x5f0079656b5f
        if ( (b_N*u)%mod == 1 )
 588:	74727473          	csrrci	s0,0x747,4
 58c:	6c5f6b6f          	jal	s6,f7450 <_stack_start+0xe7450>
 590:	7361                	lui	t1,0xffff8
    for (u = 0; u < mod; ++u){
 592:	0074                	addi	a3,sp,12
 594:	665f 746e 7079      	0x7079746e665f
    for (i = size_N-1; i >= 0; i = i-1){
 59a:	7365                	lui	t1,0xffff9
 59c:	7300                	flw	fs0,32(a4)
 59e:	6365                	lui	t1,0x19
 5a0:	6572                	flw	fa0,28(sp)
 5a2:	5f74                	lw	a3,124(a4)
 5a4:	5f79656b          	0x5f79656b
    while (d >= d2){
 5a8:	7066                	flw	ft0,120(sp)
	array_equ(result,q,size_N);
 5aa:	5f00                	lw	s0,56(a4)
 5ac:	6461                	lui	s0,0x18
 5ae:	0064                	addi	s1,sp,12
 5b0:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 5b6:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
    for(i = size_N; i < (2*size_N); ++i){
 5ba:	315f 5f00 6567      	0x65675f00315f
        result[i] = num_temp[i-size_N];
 5c0:	6474                	flw	fa3,76(s0)
 5c2:	7461                	lui	s0,0xffff8
    for(i = size_N; i < (2*size_N); ++i){
 5c4:	5f65                	li	t5,-7
 5c6:	7265                	lui	tp,0xffff9
}
 5c8:	0072                	c.slli	zero,0x1c
 5ca:	675f 6f6c 6162      	0x61626f6c675f
 5d0:	5f6c                	lw	a1,124(a4)
 5d2:	6d69                	lui	s10,0x1a
 5d4:	7570                	flw	fa2,108(a0)
 5d6:	6572                	flw	fa0,28(sp)
 5d8:	705f 7274 4700      	0x47007274705f
 5de:	554e                	lw	a0,240(sp)
 5e0:	4320                	lw	s0,64(a4)
 5e2:	3731                	jal	4ee <polydiv+0x4a>
 5e4:	3920                	fld	fs0,112(a0)
 5e6:	322e                	fld	ft4,232(sp)
 5e8:	302e                	fld	ft0,232(sp)
 5ea:	2d20                	fld	fs0,88(a0)
 5ec:	616d                	addi	sp,sp,240
 5ee:	6372                	flw	ft6,28(sp)
 5f0:	3d68                	fld	fa0,248(a0)
        v[(d-d2)] = u*r_d;
 5f2:	7672                	flw	fa2,60(sp)
 5f4:	6d693233          	0x6d693233
 5f8:	6d2d2063          	0x6d2d2063
 5fc:	6261                	lui	tp,0x18
 5fe:	3d69                	jal	498 <polymult2+0x164>
        for (i = 0; i < size_N; ++i){
 600:	6c69                	lui	s8,0x1a
 602:	3370                	fld	fa2,224(a4)
 604:	2032                	fld	ft0,264(sp)
 606:	6d2d                	lui	s10,0xb
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 608:	646f6d63          	bltu	t5,t1,c62 <generate_keys+0x2d2>
 60c:	6c65                	lui	s8,0x19
 60e:	6d3d                	lui	s10,0xf
 610:	6465                	lui	s0,0x19
 612:	6e61                	lui	t3,0x18
 614:	2079                	jal	6a2 <polydiv+0x1fe>
        for (i = 0; i < size_N; ++i){
 616:	6d2d                	lui	s10,0xb
 618:	7574                	flw	fa3,108(a0)
 61a:	656e                	flw	fa0,216(sp)
 61c:	723d                	lui	tp,0xfffef
 61e:	656b636f          	jal	t1,b6c74 <_stack_start+0xa6c74>
        for (i = 0; i < size_N; ++i){
 622:	2074                	fld	fa3,192(s0)
 624:	672d                	lui	a4,0xb
 626:	2d20                	fld	fs0,88(a0)
        for (i = 0; i < size_N; ++i){
 628:	2d20734f          	0x2d20734f
 62c:	7666                	flw	fa2,120(sp)
 62e:	7369                	lui	t1,0xffffa
        for(i = 0; i < size_N; ++i){
 630:	6269                	lui	tp,0x1a
 632:	6c69                	lui	s8,0x1a
 634:	7469                	lui	s0,0xffffa
        for (i = size_N-1; i >= 0; i = i-1){
 636:	3d79                	jal	4d4 <polydiv+0x30>
 638:	6968                	flw	fa0,84(a0)
 63a:	6464                	flw	fs1,76(s0)
 63c:	6e65                	lui	t3,0x19
 63e:	5f00                	lw	s0,56(a4)
 640:	6e75                	lui	t3,0x1d
 642:	7375                	lui	t1,0xffffd
 644:	6465                	lui	s0,0x19
 646:	725f 6e61 0064      	0x646e61725f
        for (i = 0; i < size_N; ++i){
 64c:	696c                	flw	fa1,84(a0)
            v[i] = v[i] % mod;
 64e:	656e                	flw	fa0,216(sp)
 650:	5f00                	lw	s0,56(a4)
 652:	00736477          	0x736477
        for (i = 0; i < size_N; ++i){
 656:	5f5f 6d74 775f      	0x775f6d745f5f
            while (product[i] < 0) {
 65c:	6164                	flw	fs1,68(a0)
 65e:	0079                	c.nop	30
 660:	675f 756c 0065      	0x65756c675f
        for (i = 0; i < size_N; ++i){
 666:	6e69                	lui	t3,0x1a
 668:	5f727473          	csrrci	s0,0x5f7,4
            product[i] = product[i] % mod;
 66c:	7165                	addi	sp,sp,-400
        for (i = 0; i < size_N; ++i){
 66e:	0075                	c.nop	29
            num_temp[i] = num_temp[i] - product[i];
 670:	746e                	flw	fs0,248(sp)
 672:	7572                	flw	fa0,60(sp)
 674:	655f 636e 7279      	0x7279636e655f
        for (i = 0; i < size_N; ++i){
 67a:	7470                	flw	fa2,108(s0)
 67c:	5f00                	lw	s0,56(a4)
            num_temp[i] = num_temp[i] - product[i];
 67e:	7a697373          	csrrci	t1,0x7a6,18
 682:	5f65                	li	t5,-7
        for (i = 0; i < size_N; ++i){
 684:	0074                	addi	a3,sp,12
                num_temp[i] = num_temp[i] + mod;
 686:	6c5f 3436 5f61      	0x5f6134366c5f
            while (num_temp[i] < 0){
 68c:	7562                	flw	fa0,56(sp)
 68e:	0066                	c.slli	zero,0x19
            num_temp[i] = num_temp[i] % mod;
 690:	6564                	flw	fs1,76(a0)
 692:	756e                	flw	fa0,248(sp)
        for (i = 0; i < size_N; ++i){
 694:	006d                	c.nop	27
 696:	735f 6769 665f      	0x665f6769735f
 69c:	6e75                	lui	t3,0x1d
            q[i] = q[i] + v[i];
 69e:	6e5f0063          	beq	t5,t0,d7e <ntru_deceypt+0x16>
 6a2:	7562                	flw	fa0,56(sp)
 6a4:	0066                	c.slli	zero,0x19
 6a6:	755f 756e 6573      	0x6573756e755f
 6ac:	0064                	addi	s1,sp,12
            q[i] = q[i] % mod;
 6ae:	6f70                	flw	fa2,92(a4)
 6b0:	796c                	flw	fa1,116(a0)
 6b2:	0052                	c.slli	zero,0x14
 6b4:	657a6973          	csrrsi	s2,0x657,20
            if( num_temp[i] != 0 )
 6b8:	445f 5f00 745f      	0x745f5f00445f
            v[i] = 0;
 6be:	5f6d                	li	t5,-5
 6c0:	7369                	lui	t1,0xffffa
 6c2:	7364                	flw	fs1,100(a4)
 6c4:	0074                	addi	a3,sp,12
 6c6:	6c5f 636f 6c61      	0x6c61636f6c5f
        for (i = 0; i < size_N; ++i){
 6cc:	6974                	flw	fa3,84(a0)
 6ce:	656d                	lui	a0,0x1b
        result[i] = num_temp[i-size_N];
 6d0:	625f 6675 5f00      	0x5f006675625f
 6d6:	736f6c63          	bltu	t5,s6,e0e <ntru_deceypt+0xa6>
 6da:	0065                	c.nop	25
    for(i = size_N; i < (2*size_N); ++i){
 6dc:	725f 3834 5f00      	0x5f003834725f
    int ri_2[size]; // MX-ring poly, a
 6e2:	626d                	lui	tp,0x1b
 6e4:	6f74                	flw	fa3,92(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6e6:	735f6377          	0x735f6377
    int ri_2[size]; // MX-ring poly, a
 6ea:	6174                	flw	fa3,68(a0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6ec:	6574                	flw	fa3,76(a0)
 6ee:	5f00                	lw	s0,56(a4)
 6f0:	3570                	fld	fa2,232(a0)
 6f2:	616d0073          	0x616d0073
 6f6:	6e69                	lui	t3,0x1a
 6f8:	5f00                	lw	s0,56(a4)
 6fa:	745f 5f6d 646d      	0x646d5f6d745f
 700:	7961                	lui	s2,0xffff8
 702:	7300                	flw	fs0,32(a4)
 704:	7a69                	lui	s4,0xffffa
 706:	5f65                	li	t5,-7
    int ri_2[size]; // MX-ring poly, a
 708:	0061                	c.nop	24
 70a:	657a6973          	csrrsi	s2,0x657,20
    int ri_1[size]; // f-random poly, f[N] = 0, b
 70e:	625f 6300 7472      	0x74726300625f
    int ri[size];
 714:	2e30                	fld	fa2,88(a2)
 716:	682f0053          	0x682f0053
    int ti_1[size]; // ti_1[0] = 1
 71a:	2f656d6f          	jal	s10,56a10 <_stack_start+0x46a10>
 71e:	6f74                	flw	fa3,92(a4)
    int ti[size];
 720:	6170                	flw	fa2,68(a0)
 722:	636c                	flw	fa1,68(a4)
 724:	7365442f          	0x7365442f
    int qi_1[size];
 728:	706f746b          	0x706f746b
    int temp[size];
 72c:	6f72702f          	0x6f72702f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 730:	656a                	flw	fa0,152(sp)
 732:	656c                	flw	fa1,76(a0)
 734:	2f72                	fld	ft10,280(sp)
    int ri_2[size]; // MX-ring poly, a
 736:	75636c6f          	jal	s8,36e8c <_stack_start+0x26e8c>
    int temp[size];
 73a:	2f6d                	jal	ef4 <memcpy+0x2a>
    for (i = 0; i < size; ++i) {
 73c:	71652e33          	0x71652e33
        ti_2[i] = 0;
 740:	0075                	c.nop	29
 742:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
    for (i = 0; i < size; ++i) {
 746:	5341                	li	t1,-16
 748:	3220                	fld	fs0,96(a2)
    array_equ(ri_2,polyR,size);
 74a:	332e                	fld	ft6,232(sp)
 74c:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x1dc>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0096                	slli	ra,ra,0x5
  2e:	0000                	unimp
  30:	0058                	addi	a4,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	020c                	addi	a1,sp,256
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4250                	lw	a2,4(a2)
  44:	0492                	slli	s1,s1,0x4
  46:	9346                	add	t1,t1,a7
  48:	4805                	li	a6,1
  4a:	0a98                	addi	a4,sp,336
  4c:	88500d9b          	0x88500d9b
  50:	8902                	jr	s2
  52:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  56:	4e00                	lw	s0,24(a2)
  58:	0694                	addi	a3,sp,832
  5a:	0795                	addi	a5,a5,5
  5c:	0896                	slli	a7,a7,0x5
  5e:	0b990997          	auipc	s3,0xb990
  62:	0c9a                	slli	s9,s9,0x6
  64:	0181                	addi	gp,gp,0
  66:	0a011403          	lh	s0,160(sp)
  6a:	020c                	addi	a1,sp,256
  6c:	4250                	lw	a2,4(a2)
  6e:	42c1                	li	t0,16
  70:	42c8                	lw	a0,4(a3)
  72:	42c9                	li	t0,18
  74:	42d2                	lw	t0,20(sp)
  76:	42d442d3          	0x42d442d3
  7a:	42d5                	li	t0,21
  7c:	42d6                	lw	t0,84(sp)
  7e:	42d842d7          	0x42d842d7
  82:	42d9                	li	t0,22
  84:	42da                	lw	t0,148(sp)
  86:	000e4adb          	0xe4adb
  8a:	0b42                	slli	s6,s6,0x10
    asm volatile(
  8c:	0054                	addi	a3,sp,4
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	0334                	addi	a3,sp,392
  96:	0000                	unimp
  98:	0170                	addi	a2,sp,140
  9a:	0000                	unimp
  9c:	0e42                	slli	t3,t3,0x10
  9e:	4650                	lw	a2,12(a2)
  a0:	0795                	addi	a5,a5,5
  a2:	9648                	0x9648
  a4:	9708                	0x9708
            for (i = 0; i < (length / 3); i++) {
  a6:	6209                	lui	tp,0x2
  a8:	0288                	addi	a0,sp,320
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0a98                	addi	a4,sp,336
  b4:	0b99                	addi	s7,s7,6
  b6:	0c9a                	slli	s9,s9,0x6
  b8:	01810d9b          	0x1810d9b
  bc:	0c42                	slli	s8,s8,0x10
  be:	0008                	0x8
  c0:	0c011603          	lh	a2,192(sp)
            a1[length-1] = a2[length-1];
  c4:	5002                	0x5002
  c6:	c142                	sw	a6,128(sp)
  c8:	c842                	sw	a6,16(sp)
  ca:	c942                	sw	a6,144(sp)
  cc:	d242                	sw	a6,36(sp)
  ce:	d342                	sw	a6,164(sp)
  d0:	d442                	sw	a6,40(sp)
  d2:	d542                	sw	a6,168(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	d642                	sw	a6,44(sp)
  d6:	d742                	sw	a6,172(sp)
  d8:	d842                	sw	a6,48(sp)
  da:	d942                	sw	a6,176(sp)
  dc:	da42                	sw	a6,52(sp)
  de:	db42                	sw	a6,180(sp)
  e0:	0e4a                	slli	t3,t3,0x12
  e2:	0000                	unimp
            a1[length-1] = a2[length-1];
  e4:	0054                	addi	a3,sp,4
            a1[length-2] = a2[length-2];
  e6:	0000                	unimp
  e8:	0000                	unimp
  ea:	0000                	unimp
  ec:	04a4                	addi	s1,sp,584
  ee:	0000                	unimp
} //end of function
  f0:	023e                	slli	tp,tp,0xf
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	0000                	unimp
  f4:	0e46                	slli	t3,t3,0x11
    asm volatile(
  f6:	5e40                	lw	s0,60(a2)
  f8:	0288                	addi	a0,sp,320
  fa:	0389                	addi	t2,t2,2
  fc:	0492                	slli	s1,s1,0x4
  fe:	06940593          	addi	a1,s0,105
            for (i = 0; i < (length / 3); i++) {
 102:	0795                	addi	a5,a5,5
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0896                	slli	a7,a7,0x5
 106:	0a980997          	auipc	s3,0xa980
    asm volatile(
 10a:	0b99                	addi	s7,s7,6
 10c:	0c9a                	slli	s9,s9,0x6
 10e:	01810d9b          	0x1810d9b
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	0c42                	slli	s8,s8,0x10
 114:	0008                	0x8
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0a010203          	lb	tp,160(sp)
    asm volatile(
 11a:	020c                	addi	a1,sp,256
 11c:	4240                	lw	s0,4(a2)
 11e:	42c1                	li	t0,16
 120:	42c8                	lw	a0,4(a3)
 122:	42c9                	li	t0,18
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	42d2                	lw	t0,20(sp)
 126:	42d442d3          	0x42d442d3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	42d5                	li	t0,21
 12c:	42d6                	lw	t0,84(sp)
 12e:	42d842d7          	0x42d842d7
    int line[size_b][size_a + size_b];
 132:	42d9                	li	t0,22
 134:	42da                	lw	t0,148(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	000e4adb          	0xe4adb
    int line[size_b][size_a + size_b];
 13a:	0b42                	slli	s6,s6,0x10
 13c:	0054                	addi	a3,sp,4
 13e:	0000                	unimp
 140:	0000                	unimp
 142:	0000                	unimp
 144:	06e2                	slli	a3,a3,0x18
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	0000                	unimp
 148:	02ae                	slli	t0,t0,0xb
 14a:	0000                	unimp
 14c:	0e46                	slli	t3,t3,0x11
 14e:	5e50                	lw	a2,60(a2)
 150:	0288                	addi	a0,sp,320
 152:	0389                	addi	t2,t2,2
 154:	0492                	slli	s1,s1,0x4
 156:	06940593          	addi	a1,s0,105
 15a:	0795                	addi	a5,a5,5
 15c:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 15e:	0a980997          	auipc	s3,0xa980
    int pola[size_a];
 162:	0b99                	addi	s7,s7,6
    int line[size_b][size_a + size_b];
 164:	0c9a                	slli	s9,s9,0x6
    int pola[size_a];
 166:	01810d9b          	0x1810d9b
    int line[size_b][size_a + size_b];
 16a:	0c42                	slli	s8,s8,0x10
    int pola[size_a];
 16c:	0008                	0x8
    int line[size_b][size_a + size_b];
 16e:	0a015c03          	lhu	s8,160(sp)
    int pola[size_a];
 172:	020c                	addi	a1,sp,256
    int polb[size_b];
 174:	4250                	lw	a2,4(a2)
 176:	42c1                	li	t0,16
 178:	42c8                	lw	a0,4(a3)
    int pola[size_a];
 17a:	42c9                	li	t0,18
    int polb[size_b];
 17c:	42d2                	lw	t0,20(sp)
 17e:	42d442d3          	0x42d442d3
            line[i][j] = 0;
 182:	42d5                	li	t0,21
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	42d6                	lw	t0,84(sp)
 186:	42d842d7          	0x42d842d7
    int pola[size_a];
 18a:	42d9                	li	t0,22
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	42da                	lw	t0,148(sp)
    int line[size_b][size_a + size_b];
 18e:	000e4adb          	0xe4adb
    int polb[size_b];
 192:	0b42                	slli	s6,s6,0x10
            line[i][j] = 0;
 194:	0058                	addi	a4,sp,4
 196:	0000                	unimp
 198:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 19a:	0000                	unimp
 19c:	0990                	addi	a2,sp,208
            product[j] = 0;
 19e:	0000                	unimp
 1a0:	031e                	slli	t1,t1,0x7
 1a2:	0000                	unimp
 1a4:	0e42                	slli	t3,t3,0x10
    for (i = 0; i < size_b; ++i){
 1a6:	0480                	addi	s0,sp,576
 1a8:	814c                	0x814c
    array_equ(pola,a,size_a); 
 1aa:	8801                	andi	s0,s0,0
 1ac:	8902                	jr	s2
 1ae:	080c4203          	lbu	tp,128(s8)
 1b2:	7000                	flw	fs0,32(s0)
 1b4:	0492                	slli	s1,s1,0x4
 1b6:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_a; ++i){
 1ba:	0795                	addi	a5,a5,5
 1bc:	0896                	slli	a7,a7,0x5
 1be:	0a980997          	auipc	s3,0xa980
 1c2:	0b990d9b          	0xb990d9b
 1c6:	0c9a                	slli	s9,s9,0x6
 1c8:	0a01f403          	0xa01f403
    array_equ(polb,b,size_b);
 1cc:	020c                	addi	a1,sp,256
 1ce:	0480                	addi	s0,sp,576
 1d0:	c144                	sw	s1,4(a0)
    for (i = 0; i < size_b; ++i){
 1d2:	c844                	sw	s1,20(s0)
 1d4:	c944                	sw	s1,20(a0)
 1d6:	d244                	sw	s1,36(a2)
 1d8:	d344                	sw	s1,36(a4)
    if(star_mult == 1){
 1da:	d444                	sw	s1,44(s0)
 1dc:	d544                	sw	s1,44(a0)
 1de:	d644                	sw	s1,44(a2)
 1e0:	d744                	sw	s1,44(a4)
 1e2:	d844                	sw	s1,52(s0)
 1e4:	d944                	sw	s1,52(a0)
 1e6:	da44                	sw	s1,52(a2)
 1e8:	db44                	sw	s1,52(a4)
 1ea:	0e4c                	addi	a1,sp,788
 1ec:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	0038000b          	0x38000b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f2:	0000                	unimp
 1f4:	0000                	unimp
            product[j] = 0;
 1f6:	0000                	unimp
 1f8:	0cae                	slli	s9,s9,0xb
 1fa:	0000                	unimp
            line[i][j] = 0;
 1fc:	00ba                	slli	ra,ra,0xe
 1fe:	0000                	unimp
            product[j] = 0;
 200:	0e42                	slli	t3,t3,0x10
 202:	01e0                	addi	s0,sp,204
        for(j = 0; j < size_a + size_b -1; ++j){
 204:	8850                	0x8850
 206:	8902                	jr	s2
 208:	95049203          	lh	tp,-1712(s1)
    for (i = 0; i < size_b; ++i){
 20c:	01816207          	0x1816207
 210:	06940593          	addi	a1,s0,105
        for(j = 0; j < size_a + size_b -1; ++j){
 214:	5802                	lw	a6,32(sp)
 216:	c10a                	sw	sp,128(sp)
            pola[i] = pola[i] + mod;
 218:	c842                	sw	a6,16(sp)
 21a:	c94e                	sw	s3,144(sp)
        while (pola[i] < 0){
 21c:	d242                	sw	a6,36(sp)
 21e:	d342                	sw	a6,164(sp)
 220:	d442                	sw	a6,40(sp)
        pola[i] = pola[i] % mod;
 222:	d542                	sw	a6,168(sp)
 224:	0e42                	slli	t3,t3,0x10
    for (i = 0; i < size_a; ++i){
 226:	4200                	lw	s0,0(a2)
 228:	0000000b          	0xb
        pola[i] = pola[i] % mod;
 22c:	0044                	addi	s1,sp,4
    for (i = 0; i < size_a; ++i){
 22e:	0000                	unimp
            polb[i] = polb[i] + mod;
 230:	0000                	unimp
 232:	0000                	unimp
        while (polb[i] < 0){
 234:	0d68                	addi	a0,sp,668
 236:	0000                	unimp
 238:	00ec                	addi	a1,sp,76
        polb[i] = polb[i] % mod;
 23a:	0000                	unimp
 23c:	0e42                	slli	t3,t3,0x10
    for (i = 0; i < size_b; ++i){
 23e:	4430                	lw	a2,72(s0)
 240:	0288                	addi	a0,sp,320
        polb[i] = polb[i] % mod;
 242:	0694                	addi	a3,sp,832
 244:	984a                	add	a6,a6,s2
    for (i = 0; i < size_b; ++i){
 246:	4c0a                	lw	s8,128(sp)
    if(star_mult == 1){
 248:	924c0593          	addi	a1,s8,-1756
        for (j = size_b -1; j >= 0; j = j-1){
 24c:	9604                	0x9604
        for(j = 0; j < size_a + size_b -1; ++j){
 24e:	5a08                	lw	a0,48(a2)
    for (i = 0; i < size_b; ++i){
 250:	0181                	addi	gp,gp,0
 252:	0389                	addi	t2,t2,2
 254:	0795                	addi	a5,a5,5
 256:	52020997          	auipc	s3,0x52020
 25a:	c10a                	sw	sp,128(sp)
 25c:	c842                	sw	a6,16(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 25e:	c94e                	sw	s3,144(sp)
 260:	d242                	sw	a6,36(sp)
 262:	d342                	sw	a6,164(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	d442                	sw	a6,40(sp)
 266:	d542                	sw	a6,168(sp)
 268:	d642                	sw	a6,44(sp)
}
 26a:	d742                	sw	a6,172(sp)
 26c:	d842                	sw	a6,48(sp)
 26e:	0e42                	slli	t3,t3,0x10
 270:	4200                	lw	s0,0(a2)
 272:	0020000b          	0x20000b
 276:	0000                	unimp
 278:	0000                	unimp
 27a:	0000                	unimp
 27c:	1050                	addi	a2,sp,36
 27e:	0000                	unimp
 280:	00f8                	addi	a4,sp,76
 282:	0000                	unimp
 284:	0e44                	addi	s1,sp,788
 286:	08b0                	addi	a2,sp,88
 288:	8156                	mv	sp,s5
 28a:	8801                	andi	s0,s0,0
 28c:	0202                	c.slli64	tp
 28e:	0ac8                	addi	a0,sp,340
 290:	44c1                	li	s1,16
 292:	46c8                	lw	a0,12(a3)
                line[size_b-1-j][k] = pola[k]*polb[j];
 294:	000e                	c.slli	zero,0x3
 296:	0b42                	slli	s6,s6,0x10

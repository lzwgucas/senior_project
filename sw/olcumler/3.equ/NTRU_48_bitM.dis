
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	5670006f          	j	de2 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	5670006f          	j	de6 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	55f0006f          	j	de2 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	55b0006f          	j	de2 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
      90:	8082                	ret

00000092 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    switch(length%3) {
      92:	470d                	li	a4,3
      94:	02e667b3          	rem	a5,a2,a4
      98:	4685                	li	a3,1
      9a:	02d78d63          	beq	a5,a3,d4 <array_equ+0x42>
      9e:	4689                	li	a3,2
      a0:	00d78963          	beq	a5,a3,b2 <array_equ+0x20>
      a4:	e7b1                	bnez	a5,f0 <array_equ+0x5e>

        case 0:
            for (i = 0; i < (length / 3); i++) {
      a6:	02e64633          	div	a2,a2,a4
      aa:	4831                	li	a6,12
      ac:	04c7c363          	blt	a5,a2,f2 <array_equ+0x60>
      b0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
	    break;
        case 2:
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	ffe60693          	addi	a3,a2,-2
      b6:	02e6c6b3          	div	a3,a3,a4
      ba:	4781                	li	a5,0
      bc:	48b1                	li	a7,12
      be:	04d7cc63          	blt	a5,a3,116 <array_equ+0x84>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
            }
            a1[length-1] = a2[length-1];
      c2:	060a                	slli	a2,a2,0x2
      c4:	1671                	addi	a2,a2,-4
      c6:	00c587b3          	add	a5,a1,a2
      ca:	4398                	lw	a4,0(a5)
      cc:	00c507b3          	add	a5,a0,a2
      d0:	c398                	sw	a4,0(a5)
      d2:	a811                	j	e6 <array_equ+0x54>
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	fff60693          	addi	a3,a2,-1
      d8:	02e6c6b3          	div	a3,a3,a4
      dc:	4781                	li	a5,0
      de:	48b1                	li	a7,12
      e0:	02d7c263          	blt	a5,a3,104 <array_equ+0x72>
            a1[length-1] = a2[length-1];
      e4:	060a                	slli	a2,a2,0x2
            a1[length-2] = a2[length-2];
      e6:	1671                	addi	a2,a2,-4
      e8:	95b2                	add	a1,a1,a2
      ea:	419c                	lw	a5,0(a1)
      ec:	962a                	add	a2,a2,a0
      ee:	c21c                	sw	a5,0(a2)
	    break;
    } //end of switch case
} //end of function
      f0:	8082                	ret
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	03078733          	mul	a4,a5,a6
    asm volatile(
      f6:	00e506b3          	add	a3,a0,a4
      fa:	972e                	add	a4,a4,a1
      fc:	0ae6f70b          	0xae6f70b
            for (i = 0; i < (length / 3); i++) {
     100:	0785                	addi	a5,a5,1
     102:	b76d                	j	ac <array_equ+0x1a>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03178733          	mul	a4,a5,a7
    asm volatile(
     108:	00e50833          	add	a6,a0,a4
     10c:	972e                	add	a4,a4,a1
     10e:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0785                	addi	a5,a5,1
     114:	b7f1                	j	e0 <array_equ+0x4e>
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	03178733          	mul	a4,a5,a7
    asm volatile(
     11a:	00e50833          	add	a6,a0,a4
     11e:	972e                	add	a4,a4,a1
     120:	0ae8770b          	0xae8770b
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0785                	addi	a5,a5,1
     126:	bf61                	j	be <array_equ+0x2c>

00000128 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	715d                	addi	sp,sp,-80
     12a:	c0ca                	sw	s2,64(sp)
     12c:	8936                	mv	s2,a3
     12e:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
     130:	96ae                	add	a3,a3,a1
     132:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	d462                	sw	s8,40(sp)
     138:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     13a:	fff68c13          	addi	s8,a3,-1
     13e:	00269d93          	slli	s11,a3,0x2
     142:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	c4a2                	sw	s0,72(sp)
     148:	c2a6                	sw	s1,68(sp)
     14a:	0880                	addi	s0,sp,80
     14c:	dc52                	sw	s4,56(sp)
     14e:	da56                	sw	s5,52(sp)
     150:	d85a                	sw	s6,48(sp)
     152:	d65e                	sw	s7,44(sp)
     154:	d266                	sw	s9,36(sp)
     156:	d06a                	sw	s10,32(sp)
     158:	c686                	sw	ra,76(sp)
     15a:	faf42c23          	sw	a5,-72(s0)
    int line[size_b][size_a + size_b];
     15e:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     160:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
     164:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     166:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
     168:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
     16c:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     16e:	8d0a                	mv	s10,sp
    int pola[size_a];
     170:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     174:	00f98793          	addi	a5,s3,15
     178:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     17a:	8b0a                	mv	s6,sp
    int polb[size_b];
     17c:	40f10133          	sub	sp,sp,a5

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     180:	002dd793          	srli	a5,s11,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	882e                	mv	a6,a1
     186:	88b2                	mv	a7,a2
    int pola[size_a];
     188:	fff58a93          	addi	s5,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	8bba                	mv	s7,a4
    int line[size_b][size_a + size_b];
     18e:	fff90c93          	addi	s9,s2,-1
    int polb[size_b];
     192:	848a                	mv	s1,sp
            line[i][j] = 0;
     194:	faf42e23          	sw	a5,-68(s0)
     198:	8a6a                	mv	s4,s10
    for (i = 0; i < size_b; ++i){
     19a:	85ea                	mv	a1,s10
     19c:	4601                	li	a2,0
            product[j] = 0;
     19e:	00001e97          	auipc	t4,0x1
     1a2:	10ee8e93          	addi	t4,t4,270 # 12ac <_bss_start>
    for (i = 0; i < size_b; ++i){
     1a6:	07264663          	blt	a2,s2,212 <polymult+0xea>
        }
    }

    array_equ(pola,a,size_a);
     1aa:	8642                	mv	a2,a6
     1ac:	85aa                	mv	a1,a0
     1ae:	855a                	mv	a0,s6
     1b0:	fb142823          	sw	a7,-80(s0)
     1b4:	fb042a23          	sw	a6,-76(s0)
     1b8:	3de9                	jal	92 <array_equ>
    // make mod calculations
    for (i = 0; i < size_a; ++i){
     1ba:	fb442803          	lw	a6,-76(s0)
     1be:	fb042883          	lw	a7,-80(s0)
     1c2:	865a                	mv	a2,s6
     1c4:	4581                	li	a1,0
     1c6:	0505cb63          	blt	a1,a6,21c <polymult+0xf4>
            pola[i] = pola[i] + mod;
        }
        pola[i] = pola[i] % mod;
    }

    array_equ(polb,b,size_b);
     1ca:	864a                	mv	a2,s2
     1cc:	85c6                	mv	a1,a7
     1ce:	8526                	mv	a0,s1
     1d0:	35c9                	jal	92 <array_equ>
//
    for (i = 0; i < size_b; ++i){
     1d2:	8626                	mv	a2,s1
     1d4:	4581                	li	a1,0
     1d6:	0525cf63          	blt	a1,s2,234 <polymult+0x10c>




    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     1da:	fb842703          	lw	a4,-72(s0)
     1de:	4785                	li	a5,1
     1e0:	94ce                	add	s1,s1,s3
     1e2:	06f70363          	beq	a4,a5,248 <polymult+0x120>
     1e6:	19f1                	addi	s3,s3,-4
     1e8:	ffcd8593          	addi	a1,s11,-4
     1ec:	99ea                	add	s3,s3,s10
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	060cc063          	bltz	s9,24e <polymult+0x126>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	87d6                	mv	a5,s5
     1f4:	a0c5                	j	2d4 <polymult+0x1ac>
            product[j] = 0;
     1f6:	00279e13          	slli	t3,a5,0x2
     1fa:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     1fc:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     200:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0785                	addi	a5,a5,1
     206:	0311                	addi	t1,t1,4
     208:	ff87c7e3          	blt	a5,s8,1f6 <polymult+0xce>
    for (i = 0; i < size_b; ++i){
     20c:	0605                	addi	a2,a2,1
     20e:	95ee                	add	a1,a1,s11
     210:	bf59                	j	1a6 <polymult+0x7e>
     212:	832e                	mv	t1,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	4781                	li	a5,0
     216:	bfcd                	j	208 <polymult+0xe0>
            pola[i] = pola[i] + mod;
     218:	97de                	add	a5,a5,s7
     21a:	c21c                	sw	a5,0(a2)
        while (pola[i] < 0){
     21c:	421c                	lw	a5,0(a2)
     21e:	fe07cde3          	bltz	a5,218 <polymult+0xf0>
        pola[i] = pola[i] % mod;
     222:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_a; ++i){
     226:	0585                	addi	a1,a1,1
     228:	0611                	addi	a2,a2,4
        pola[i] = pola[i] % mod;
     22a:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_a; ++i){
     22e:	bf61                	j	1c6 <polymult+0x9e>
            polb[i] = polb[i] + mod;
     230:	97de                	add	a5,a5,s7
     232:	c21c                	sw	a5,0(a2)
        while (polb[i] < 0){
     234:	421c                	lw	a5,0(a2)
     236:	fe07cde3          	bltz	a5,230 <polymult+0x108>
        polb[i] = polb[i] % mod;
     23a:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_b; ++i){
     23e:	0585                	addi	a1,a1,1
     240:	0611                	addi	a2,a2,4
        polb[i] = polb[i] % mod;
     242:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_b; ++i){
     246:	bf41                	j	1d6 <polymult+0xae>
    if(star_mult == 1){
     248:	85ea                	mv	a1,s10
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	060cd763          	bgez	s9,2b8 <polymult+0x190>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     24e:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     250:	0b274463          	blt	a4,s2,2f8 <polymult+0x1d0>
     254:	00001717          	auipc	a4,0x1
     258:	05870713          	addi	a4,a4,88 # 12ac <_bss_start>
     25c:	863a                	mv	a2,a4
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	4681                	li	a3,0
     260:	0d86c063          	blt	a3,s8,320 <polymult+0x1f8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	4781                	li	a5,0
     266:	0b87cf63          	blt	a5,s8,324 <polymult+0x1fc>
 

    return_address1 = &product[0];

    return return_address1;
}
     26a:	fb040113          	addi	sp,s0,-80
     26e:	40b6                	lw	ra,76(sp)
     270:	4426                	lw	s0,72(sp)
     272:	4496                	lw	s1,68(sp)
     274:	4906                	lw	s2,64(sp)
     276:	59f2                	lw	s3,60(sp)
     278:	5a62                	lw	s4,56(sp)
     27a:	5ad2                	lw	s5,52(sp)
     27c:	5b42                	lw	s6,48(sp)
     27e:	5bb2                	lw	s7,44(sp)
     280:	5c22                	lw	s8,40(sp)
     282:	5c92                	lw	s9,36(sp)
     284:	5d02                	lw	s10,32(sp)
     286:	4df2                	lw	s11,28(sp)
     288:	00001517          	auipc	a0,0x1
     28c:	02450513          	addi	a0,a0,36 # 12ac <_bss_start>
     290:	6161                	addi	sp,sp,80
     292:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	00279613          	slli	a2,a5,0x2
     298:	00c58533          	add	a0,a1,a2
     29c:	965a                	add	a2,a2,s6
     29e:	4210                	lw	a2,0(a2)
     2a0:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	03060633          	mul	a2,a2,a6
     2aa:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	fe07d4e3          	bgez	a5,294 <polymult+0x16c>
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	1cfd                	addi	s9,s9,-1
     2b2:	14f1                	addi	s1,s1,-4
     2b4:	95ee                	add	a1,a1,s11
     2b6:	bf51                	j	24a <polymult+0x122>
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	87d6                	mv	a5,s5
     2ba:	bfcd                	j	2ac <polymult+0x184>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	00279613          	slli	a2,a5,0x2
     2c0:	00c98533          	add	a0,s3,a2
     2c4:	965a                	add	a2,a2,s6
     2c6:	4210                	lw	a2,0(a2)
     2c8:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	03060633          	mul	a2,a2,a6
     2d2:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	fe07d4e3          	bgez	a5,2bc <polymult+0x194>
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	1cfd                	addi	s9,s9,-1
     2da:	14f1                	addi	s1,s1,-4
     2dc:	99ae                	add	s3,s3,a1
     2de:	bf01                	j	1ee <polymult+0xc6>
            line[i][j] = line[i][j] % mod;
     2e0:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0605                	addi	a2,a2,1
     2e4:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     2e6:	0375e5b3          	rem	a1,a1,s7
     2ea:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2ee:	ff8649e3          	blt	a2,s8,2e0 <polymult+0x1b8>
    for (i = 0; i < size_b; ++i){
     2f2:	0705                	addi	a4,a4,1
     2f4:	9a6e                	add	s4,s4,s11
     2f6:	bfa9                	j	250 <polymult+0x128>
     2f8:	87d2                	mv	a5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	4601                	li	a2,0
     2fc:	bfcd                	j	2ee <polymult+0x1c6>
            product[j] += line[i][j];
     2fe:	fbc42783          	lw	a5,-68(s0)
     302:	4208                	lw	a0,0(a2)
     304:	02f587b3          	mul	a5,a1,a5
        for(i = 0; i < size_b; ++i){
     308:	0585                	addi	a1,a1,1
            product[j] += line[i][j];
     30a:	97b6                	add	a5,a5,a3
     30c:	078a                	slli	a5,a5,0x2
     30e:	97ea                	add	a5,a5,s10
     310:	439c                	lw	a5,0(a5)
     312:	97aa                	add	a5,a5,a0
     314:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     316:	ff25c4e3          	blt	a1,s2,2fe <polymult+0x1d6>
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0685                	addi	a3,a3,1
     31c:	0611                	addi	a2,a2,4
     31e:	b789                	j	260 <polymult+0x138>
        for(i = 0; i < size_b; ++i){
     320:	4581                	li	a1,0
     322:	bfd5                	j	316 <polymult+0x1ee>
        product[j] = product[j] % mod;
     324:	4314                	lw	a3,0(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	0785                	addi	a5,a5,1
     328:	0711                	addi	a4,a4,4
        product[j] = product[j] % mod;
     32a:	0376e6b3          	rem	a3,a3,s7
     32e:	fed72e23          	sw	a3,-4(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	bf15                	j	266 <polymult+0x13e>

00000334 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     334:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     336:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	da56                	sw	s5,52(sp)
     33c:	00269a93          	slli	s5,a3,0x2
     340:	d85a                	sw	s6,48(sp)
     342:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     344:	00279b13          	slli	s6,a5,0x2
     348:	fff78b93          	addi	s7,a5,-1
     34c:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	c4a2                	sw	s0,72(sp)
     352:	c2a6                	sw	s1,68(sp)
     354:	c0ca                	sw	s2,64(sp)
     356:	de4e                	sw	s3,60(sp)
     358:	dc52                	sw	s4,56(sp)
     35a:	d462                	sw	s8,40(sp)
     35c:	d266                	sw	s9,36(sp)
     35e:	d06a                	sw	s10,32(sp)
     360:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     362:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	c686                	sw	ra,76(sp)
     366:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     368:	9bc1                	andi	a5,a5,-16
     36a:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     36e:	00259793          	slli	a5,a1,0x2
     372:	07bd                	addi	a5,a5,15
     374:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     376:	890a                	mv	s2,sp
    int pola[size_a];
     378:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     37c:	00fa8793          	addi	a5,s5,15
     380:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     382:	8d0a                	mv	s10,sp
    int polb[size_b];
     384:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	89b6                	mv	s3,a3
     38a:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     38c:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	8832                	mv	a6,a2
    int pola[size_a];
     392:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     396:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     398:	8cca                	mv	s9,s2
     39a:	86ca                	mv	a3,s2
     39c:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     39e:	00001317          	auipc	t1,0x1
     3a2:	16630313          	addi	t1,t1,358 # 1504 <product2>
    for (i = 0; i < size_b; ++i){
     3a6:	05374963          	blt	a4,s3,3f8 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     3aa:	862e                	mv	a2,a1
     3ac:	85aa                	mv	a1,a0
     3ae:	856a                	mv	a0,s10
     3b0:	fb042e23          	sw	a6,-68(s0)
     3b4:	39f9                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     3b6:	fbc42803          	lw	a6,-68(s0)
     3ba:	8526                	mv	a0,s1
     3bc:	864e                	mv	a2,s3
     3be:	85c2                	mv	a1,a6
     3c0:	39c9                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     3c2:	4785                	li	a5,1
     3c4:	01548533          	add	a0,s1,s5
     3c8:	04fd8c63          	beq	s11,a5,420 <polymult2+0xec>
     3cc:	1af1                	addi	s5,s5,-4
     3ce:	ffcb0693          	addi	a3,s6,-4
     3d2:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	040a4863          	bltz	s4,424 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	87e2                	mv	a5,s8
     3da:	a8ad                	j	454 <polymult2+0x120>
            product2[j] = 0;
     3dc:	00279893          	slli	a7,a5,0x2
     3e0:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     3e2:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     3e6:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0785                	addi	a5,a5,1
     3ec:	0611                	addi	a2,a2,4
     3ee:	ff77c7e3          	blt	a5,s7,3dc <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     3f2:	0705                	addi	a4,a4,1
     3f4:	96da                	add	a3,a3,s6
     3f6:	bf45                	j	3a6 <polymult2+0x72>
     3f8:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	4781                	li	a5,0
     3fc:	bfcd                	j	3ee <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	00279713          	slli	a4,a5,0x2
     402:	00e906b3          	add	a3,s2,a4
     406:	976a                	add	a4,a4,s10
     408:	4318                	lw	a4,0(a4)
     40a:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	02c70733          	mul	a4,a4,a2
     414:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	fe07d4e3          	bgez	a5,3fe <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	1a7d                	addi	s4,s4,-1
     41c:	1571                	addi	a0,a0,-4
     41e:	995a                	add	s2,s2,s6
     420:	000a5c63          	bgez	s4,438 <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
     424:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
     426:	05365a63          	bge	a2,s3,47a <polymult2+0x146>
     42a:	00001797          	auipc	a5,0x1
     42e:	0da78793          	addi	a5,a5,218 # 1504 <product2>
     432:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
     434:	4701                	li	a4,0
     436:	a82d                	j	470 <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	87e2                	mv	a5,s8
     43a:	bff1                	j	416 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	00279713          	slli	a4,a5,0x2
     440:	00e90633          	add	a2,s2,a4
     444:	976a                	add	a4,a4,s10
     446:	4318                	lw	a4,0(a4)
     448:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	02b70733          	mul	a4,a4,a1
     452:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	fe07d4e3          	bgez	a5,43c <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
     458:	1a7d                	addi	s4,s4,-1
     45a:	1571                	addi	a0,a0,-4
     45c:	9936                	add	s2,s2,a3
     45e:	bf9d                	j	3d4 <polymult2+0xa0>
            product2[j] += line[i][j];
     460:	438c                	lw	a1,0(a5)
     462:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
     464:	0705                	addi	a4,a4,1
     466:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
     468:	95aa                	add	a1,a1,a0
     46a:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
     46e:	0691                	addi	a3,a3,4
     470:	ff7748e3          	blt	a4,s7,460 <polymult2+0x12c>
    for(i=0;i<size_b;++i){
     474:	0605                	addi	a2,a2,1
     476:	9cda                	add	s9,s9,s6
     478:	b77d                	j	426 <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     47a:	fb040113          	addi	sp,s0,-80
     47e:	40b6                	lw	ra,76(sp)
     480:	4426                	lw	s0,72(sp)
     482:	4496                	lw	s1,68(sp)
     484:	4906                	lw	s2,64(sp)
     486:	59f2                	lw	s3,60(sp)
     488:	5a62                	lw	s4,56(sp)
     48a:	5ad2                	lw	s5,52(sp)
     48c:	5b42                	lw	s6,48(sp)
     48e:	5bb2                	lw	s7,44(sp)
     490:	5c22                	lw	s8,40(sp)
     492:	5c92                	lw	s9,36(sp)
     494:	5d02                	lw	s10,32(sp)
     496:	4df2                	lw	s11,28(sp)
     498:	00001517          	auipc	a0,0x1
     49c:	06c50513          	addi	a0,a0,108 # 1504 <product2>
     4a0:	6161                	addi	sp,sp,80
     4a2:	8082                	ret

000004a4 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     4a4:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4a8:	7139                	addi	sp,sp,-64
    int v[size_N];
     4aa:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	dc22                	sw	s0,56(sp)
     4ae:	da26                	sw	s1,52(sp)
     4b0:	d84a                	sw	s2,48(sp)
     4b2:	d64e                	sw	s3,44(sp)
     4b4:	d452                	sw	s4,40(sp)
     4b6:	d256                	sw	s5,36(sp)
     4b8:	d05a                	sw	s6,32(sp)
     4ba:	ce5e                	sw	s7,28(sp)
     4bc:	cc62                	sw	s8,24(sp)
     4be:	ca66                	sw	s9,20(sp)
     4c0:	c86a                	sw	s10,16(sp)
     4c2:	c66e                	sw	s11,12(sp)
    int v[size_N];
     4c4:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	de06                	sw	ra,60(sp)
     4c8:	0080                	addi	s0,sp,64
    int v[size_N];
     4ca:	40f10133          	sub	sp,sp,a5
     4ce:	8d0a                	mv	s10,sp
    int q[size_N];
     4d0:	40f10133          	sub	sp,sp,a5
     4d4:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
     4d6:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     4da:	00269793          	slli	a5,a3,0x2
     4de:	07bd                	addi	a5,a5,15
    int num_temp[size_N];
     4e0:	8c0a                	mv	s8,sp
    int denum_temp[size_D];
     4e2:	9bc1                	andi	a5,a5,-16
     4e4:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	84ae                	mv	s1,a1
     4ea:	8db2                	mv	s11,a2
    int v[size_N];
     4ec:	fff58b93          	addi	s7,a1,-1

   // array_equ(num_temp,num,size_N);


     array_equ(num_temp,num,size_N);
     4f0:	862e                	mv	a2,a1
     4f2:	85aa                	mv	a1,a0
     4f4:	8562                	mv	a0,s8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	89b6                	mv	s3,a3
     4f8:	893a                	mv	s2,a4
    int denum_temp[size_D];
     4fa:	fff68c93          	addi	s9,a3,-1
     array_equ(num_temp,num,size_N);
     4fe:	3e51                	jal	92 <array_equ>
    int denum_temp[size_D];
     500:	8a0a                	mv	s4,sp
    


    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     502:	8ae2                	mv	s5,s8
     504:	8762                	mv	a4,s8
     506:	4681                	li	a3,0
     508:	0296cc63          	blt	a3,s1,540 <polydiv+0x9c>
        num_temp[i] = num_temp[i] % mod;
    }


    
        array_equ(denum_temp,denum,size_D);
     50c:	864e                	mv	a2,s3
     50e:	85ee                	mv	a1,s11
     510:	8552                	mv	a0,s4
     512:	3641                	jal	92 <array_equ>
   

    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     514:	8752                	mv	a4,s4
     516:	4681                	li	a3,0
     518:	0536c063          	blt	a3,s3,558 <polydiv+0xb4>
        }
        denum_temp[i] = denum_temp[i] % mod;
    }


    for (i = 0; i < size_N; ++i){
     51c:	4781                	li	a5,0
     51e:	0497c763          	blt	a5,s1,56c <polydiv+0xc8>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     522:	002c9793          	slli	a5,s9,0x2
     526:	97d2                	add	a5,a5,s4
     528:	4398                	lw	a4,0(a5)
     52a:	040cdc63          	bgez	s9,582 <polydiv+0xde>
    for (i = 0; i < size_N; ++i){
     52e:	4781                	li	a5,0
     530:	4d81                	li	s11,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     532:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     534:	052dca63          	blt	s11,s2,588 <polydiv+0xe4>
     538:	87de                	mv	a5,s7
     53a:	a085                	j	59a <polydiv+0xf6>
            num_temp[i] = num_temp[i] + mod;
     53c:	97ca                	add	a5,a5,s2
     53e:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     540:	431c                	lw	a5,0(a4)
     542:	fe07cde3          	bltz	a5,53c <polydiv+0x98>
        num_temp[i] = num_temp[i] % mod;
     546:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     54a:	0685                	addi	a3,a3,1
     54c:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     54e:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     552:	bf5d                	j	508 <polydiv+0x64>
            denum_temp[i] = denum_temp[i] + mod;
     554:	97ca                	add	a5,a5,s2
     556:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     558:	431c                	lw	a5,0(a4)
     55a:	fe07cde3          	bltz	a5,554 <polydiv+0xb0>
        denum_temp[i] = denum_temp[i] % mod;
     55e:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     562:	0685                	addi	a3,a3,1
     564:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     566:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     56a:	b77d                	j	518 <polydiv+0x74>
        q[i] = 0;
     56c:	00279713          	slli	a4,a5,0x2
     570:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
     574:	976a                	add	a4,a4,s10
        q[i] = 0;
     576:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     57a:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     57e:	0785                	addi	a5,a5,1
     580:	bf79                	j	51e <polydiv+0x7a>
        if( denum_temp[i] != 0 )
     582:	f755                	bnez	a4,52e <polydiv+0x8a>
    for (i = size_D-1; i >= 0; i = i-1){
     584:	1cfd                	addi	s9,s9,-1
     586:	bf71                	j	522 <polydiv+0x7e>
        if ( (b_N*u)%mod == 1 )
     588:	0327e633          	rem	a2,a5,s2
     58c:	97ba                	add	a5,a5,a4
     58e:	fad605e3          	beq	a2,a3,538 <polydiv+0x94>
    for (u = 0; u < mod; ++u){
     592:	0d85                	addi	s11,s11,1
     594:	b745                	j	534 <polydiv+0x90>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     596:	eb01                	bnez	a4,5a6 <polydiv+0x102>
    for (i = size_N-1; i >= 0; i = i-1){
     598:	17fd                	addi	a5,a5,-1
     59a:	00279713          	slli	a4,a5,0x2
     59e:	9762                	add	a4,a4,s8
     5a0:	4318                	lw	a4,0(a4)
     5a2:	fe07dae3          	bgez	a5,596 <polydiv+0xf2>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     5a6:	0597d663          	bge	a5,s9,5f2 <polydiv+0x14e>
//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }


    array_equ(result,q,size_N);
     5aa:	8626                	mv	a2,s1
     5ac:	85da                	mv	a1,s6
     5ae:	00001517          	auipc	a0,0x1
     5b2:	1ae50513          	addi	a0,a0,430 # 175c <result>
     5b6:	3cf1                	jal	92 <array_equ>
    


    for(i = size_N; i < (2*size_N); ++i){
     5b8:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     5bc:	00001697          	auipc	a3,0x1
     5c0:	1a068693          	addi	a3,a3,416 # 175c <result>
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	10e4c663          	blt	s1,a4,6d0 <polydiv+0x22c>
    }

    return_address3 = &	result[0];

    return return_address3;
}
     5c8:	fc040113          	addi	sp,s0,-64
     5cc:	50f2                	lw	ra,60(sp)
     5ce:	5462                	lw	s0,56(sp)
     5d0:	54d2                	lw	s1,52(sp)
     5d2:	5942                	lw	s2,48(sp)
     5d4:	59b2                	lw	s3,44(sp)
     5d6:	5a22                	lw	s4,40(sp)
     5d8:	5a92                	lw	s5,36(sp)
     5da:	5b02                	lw	s6,32(sp)
     5dc:	4bf2                	lw	s7,28(sp)
     5de:	4c62                	lw	s8,24(sp)
     5e0:	4cd2                	lw	s9,20(sp)
     5e2:	4d42                	lw	s10,16(sp)
     5e4:	4db2                	lw	s11,12(sp)
     5e6:	00001517          	auipc	a0,0x1
     5ea:	17650513          	addi	a0,a0,374 # 175c <result>
     5ee:	6121                	addi	sp,sp,64
     5f0:	8082                	ret
        v[(d-d2)] = u*r_d;
     5f2:	03b70733          	mul	a4,a4,s11
     5f6:	419787b3          	sub	a5,a5,s9
     5fa:	078a                	slli	a5,a5,0x2
     5fc:	97ea                	add	a5,a5,s10
     5fe:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     600:	87ea                	mv	a5,s10
     602:	4701                	li	a4,0
     604:	04974263          	blt	a4,s1,648 <polydiv+0x1a4>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	874a                	mv	a4,s2
     60a:	86ce                	mv	a3,s3
     60c:	4781                	li	a5,0
     60e:	866a                	mv	a2,s10
     610:	85ce                	mv	a1,s3
     612:	8552                	mv	a0,s4
     614:	3e11                	jal	128 <polymult>
        for (i = 0; i < size_N; ++i){
     616:	872a                	mv	a4,a0
     618:	4681                	li	a3,0
     61a:	0496c163          	blt	a3,s1,65c <polydiv+0x1b8>
     61e:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     620:	4781                	li	a5,0
     622:	0497c763          	blt	a5,s1,670 <polydiv+0x1cc>
     626:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     628:	4681                	li	a3,0
     62a:	0696c063          	blt	a3,s1,68a <polydiv+0x1e6>
     62e:	86da                	mv	a3,s6
        for(i = 0; i < size_N; ++i){
     630:	4701                	li	a4,0
     632:	06974663          	blt	a4,s1,69e <polydiv+0x1fa>
        for (i = size_N-1; i >= 0; i = i-1){
     636:	87de                	mv	a5,s7
     638:	00279713          	slli	a4,a5,0x2
     63c:	9762                	add	a4,a4,s8
     63e:	4318                	lw	a4,0(a4)
     640:	0607dc63          	bgez	a5,6b8 <polydiv+0x214>
     644:	4681                	li	a3,0
     646:	a051                	j	6ca <polydiv+0x226>
            v[i] = v[i] % mod;
     648:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     64a:	0705                	addi	a4,a4,1
     64c:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     64e:	0326e6b3          	rem	a3,a3,s2
     652:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     656:	b77d                	j	604 <polydiv+0x160>
                product[i] = product[i] + mod;
     658:	97ca                	add	a5,a5,s2
     65a:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     65c:	431c                	lw	a5,0(a4)
     65e:	fe07cde3          	bltz	a5,658 <polydiv+0x1b4>
            product[i] = product[i] % mod;
     662:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     666:	0685                	addi	a3,a3,1
     668:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     66a:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     66e:	b775                	j	61a <polydiv+0x176>
            num_temp[i] = num_temp[i] - product[i];
     670:	00279613          	slli	a2,a5,0x2
     674:	962a                	add	a2,a2,a0
     676:	4314                	lw	a3,0(a4)
     678:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     67a:	0785                	addi	a5,a5,1
     67c:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     67e:	8e91                	sub	a3,a3,a2
     680:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     684:	bf79                	j	622 <polydiv+0x17e>
                num_temp[i] = num_temp[i] + mod;
     686:	97ca                	add	a5,a5,s2
     688:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     68a:	431c                	lw	a5,0(a4)
     68c:	fe07cde3          	bltz	a5,686 <polydiv+0x1e2>
            num_temp[i] = num_temp[i] % mod;
     690:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     694:	0685                	addi	a3,a3,1
     696:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     698:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     69c:	b779                	j	62a <polydiv+0x186>
            q[i] = q[i] + v[i];
     69e:	00271793          	slli	a5,a4,0x2
     6a2:	97ea                	add	a5,a5,s10
     6a4:	4290                	lw	a2,0(a3)
     6a6:	439c                	lw	a5,0(a5)
        for(i = 0; i < size_N; ++i){
     6a8:	0705                	addi	a4,a4,1
     6aa:	0691                	addi	a3,a3,4
            q[i] = q[i] + v[i];
     6ac:	97b2                	add	a5,a5,a2
            q[i] = q[i] % mod;
     6ae:	0327e7b3          	rem	a5,a5,s2
     6b2:	fef6ae23          	sw	a5,-4(a3)
        for(i = 0; i < size_N; ++i){
     6b6:	bfb5                	j	632 <polydiv+0x18e>
            if( num_temp[i] != 0 )
     6b8:	f751                	bnez	a4,644 <polydiv+0x1a0>
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	17fd                	addi	a5,a5,-1
     6bc:	bfb5                	j	638 <polydiv+0x194>
            v[i] = 0;
     6be:	00269613          	slli	a2,a3,0x2
     6c2:	966a                	add	a2,a2,s10
     6c4:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     6c8:	0685                	addi	a3,a3,1
     6ca:	fe96cae3          	blt	a3,s1,6be <polydiv+0x21a>
     6ce:	bde1                	j	5a6 <polydiv+0x102>
        result[i] = num_temp[i-size_N];
     6d0:	000aa603          	lw	a2,0(s5)
     6d4:	00249793          	slli	a5,s1,0x2
     6d8:	97b6                	add	a5,a5,a3
     6da:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	0485                	addi	s1,s1,1
     6de:	0a91                	addi	s5,s5,4
     6e0:	b5d5                	j	5c4 <polydiv+0x120>

000006e2 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     6e2:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     6e8:	07bd                	addi	a5,a5,15
     6ea:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	c4a2                	sw	s0,72(sp)
     6ee:	c2a6                	sw	s1,68(sp)
     6f0:	c0ca                	sw	s2,64(sp)
     6f2:	de4e                	sw	s3,60(sp)
     6f4:	dc52                	sw	s4,56(sp)
     6f6:	da56                	sw	s5,52(sp)
     6f8:	d85a                	sw	s6,48(sp)
     6fa:	d65e                	sw	s7,44(sp)
     6fc:	d462                	sw	s8,40(sp)
     6fe:	d266                	sw	s9,36(sp)
     700:	d06a                	sw	s10,32(sp)
     702:	ce6e                	sw	s11,28(sp)
     704:	c686                	sw	ra,76(sp)
     706:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     708:	40f10133          	sub	sp,sp,a5
     70c:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	40f10133          	sub	sp,sp,a5
     712:	8a0a                	mv	s4,sp
    int ri[size];
     714:	40f10133          	sub	sp,sp,a5
     718:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     71a:	40f10133          	sub	sp,sp,a5
     71e:	8b0a                	mv	s6,sp
    int ti[size];
     720:	40f10133          	sub	sp,sp,a5
     724:	8c8a                	mv	s9,sp
    int qi_1[size];
     726:	40f10133          	sub	sp,sp,a5
     72a:	8c0a                	mv	s8,sp
    int temp[size];
     72c:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	8936                	mv	s2,a3
     732:	8d2e                	mv	s10,a1
     734:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     736:	fff60d93          	addi	s11,a2,-1
    int temp[size];
     73a:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     73c:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     73e:	00001697          	auipc	a3,0x1
     742:	27668693          	addi	a3,a3,630 # 19b4 <ti_2>
    for (i = 0; i < size; ++i) {
     746:	0297c363          	blt	a5,s1,76c <ext_euclid+0x8a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     74a:	85aa                	mv	a1,a0
     74c:	8626                	mv	a2,s1
     74e:	854e                	mv	a0,s3
     750:	3289                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
     752:	8626                	mv	a2,s1
     754:	85ea                	mv	a1,s10
     756:	8552                	mv	a0,s4
     758:	3a2d                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     75a:	4785                	li	a5,1
     75c:	00fb2023          	sw	a5,0(s6)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	00149793          	slli	a5,s1,0x1
     764:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     768:	4681                	li	a3,0
     76a:	a02d                	j	794 <ext_euclid+0xb2>
        ti_2[i] = 0;
     76c:	00279713          	slli	a4,a5,0x2
     770:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     774:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     776:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     77a:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     77e:	0785                	addi	a5,a5,1
     780:	b7d9                	j	746 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     782:	97ca                	add	a5,a5,s2
     784:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     786:	431c                	lw	a5,0(a4)
     788:	fe07cde3          	bltz	a5,782 <ext_euclid+0xa0>
            ri_2[i] = ri_2[i] % mod;
     78c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     790:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     792:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     794:	00ddc663          	blt	s11,a3,7a0 <ext_euclid+0xbe>
     798:	00269713          	slli	a4,a3,0x2
     79c:	974e                	add	a4,a4,s3
     79e:	b7e5                	j	786 <ext_euclid+0xa4>
     7a0:	8752                	mv	a4,s4
        for (i = 0; i < N + 1; ++i) {
     7a2:	4681                	li	a3,0
     7a4:	0eddd563          	bge	s11,a3,88e <ext_euclid+0x1ac>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	874a                	mv	a4,s2
     7aa:	86a6                	mv	a3,s1
     7ac:	8652                	mv	a2,s4
     7ae:	85a6                	mv	a1,s1
     7b0:	854e                	mv	a0,s3
     7b2:	39cd                	jal	4a4 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	875e                	mv	a4,s7
     7b6:	87a6                	mv	a5,s1
     7b8:	fbc42683          	lw	a3,-68(s0)
     7bc:	0ed7c363          	blt	a5,a3,8a2 <ext_euclid+0x1c0>
     7c0:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     7c2:	4701                	li	a4,0
     7c4:	0eedd863          	bge	s11,a4,8b4 <ext_euclid+0x1d2>
     7c8:	8d56                	mv	s10,s5
     7ca:	8756                	mv	a4,s5
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7cc:	4681                	li	a3,0
     7ce:	10ddd263          	bge	s11,a3,8d2 <ext_euclid+0x1f0>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	874a                	mv	a4,s2
     7d4:	86a6                	mv	a3,s1
     7d6:	8652                	mv	a2,s4
     7d8:	85a6                	mv	a1,s1
     7da:	8556                	mv	a0,s5
     7dc:	31e1                	jal	4a4 <polydiv>
     7de:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            qi_1[i] = res1[i];
//        }
    array_equ(qi_1,res1,size);
     7e0:	8626                	mv	a2,s1
     7e2:	8562                	mv	a0,s8
     7e4:	307d                	jal	92 <array_equ>

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     7e6:	8762                	mv	a4,s8
     7e8:	4681                	li	a3,0
     7ea:	10ddd063          	bge	s11,a3,8ea <ext_euclid+0x208>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	874a                	mv	a4,s2
     7f0:	4781                	li	a5,0
     7f2:	86a6                	mv	a3,s1
     7f4:	865a                	mv	a2,s6
     7f6:	85a6                	mv	a1,s1
     7f8:	8562                	mv	a0,s8
     7fa:	323d                	jal	128 <polymult>
     7fc:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            temp[i] = res2[i];
//        }
    array_equ(temp,res2,size);
     7fe:	8626                	mv	a2,s1
     800:	8556                	mv	a0,s5
     802:	3841                	jal	92 <array_equ>

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     804:	4701                	li	a4,0
     806:	0eeddf63          	bge	s11,a4,904 <ext_euclid+0x222>
     80a:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     80c:	4701                	li	a4,0
     80e:	10edd663          	bge	s11,a4,91a <ext_euclid+0x238>
     812:	8766                	mv	a4,s9
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     814:	4681                	li	a3,0
     816:	12ddd463          	bge	s11,a3,93e <ext_euclid+0x25c>
        }
  

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     81a:	8626                	mv	a2,s1
     81c:	85d2                	mv	a1,s4
     81e:	854e                	mv	a0,s3
     820:	388d                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
     822:	8626                	mv	a2,s1
     824:	85de                	mv	a1,s7
     826:	8552                	mv	a0,s4
     828:	30ad                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
     82a:	8626                	mv	a2,s1
     82c:	85da                	mv	a1,s6
     82e:	00001517          	auipc	a0,0x1
     832:	18650513          	addi	a0,a0,390 # 19b4 <ti_2>
     836:	38b1                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
     838:	8626                	mv	a2,s1
     83a:	85e6                	mv	a1,s9
     83c:	855a                	mv	a0,s6
     83e:	3891                	jal	92 <array_equ>
        controlR = 0;
     840:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     842:	4701                	li	a4,0
     844:	10edd763          	bge	s11,a4,952 <ext_euclid+0x270>
    while (controlR != 0) {
     848:	f20790e3          	bnez	a5,768 <ext_euclid+0x86>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     84c:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     84e:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     850:	11274c63          	blt	a4,s2,968 <ext_euclid+0x286>
     854:	00001617          	auipc	a2,0x1
     858:	16060613          	addi	a2,a2,352 # 19b4 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     85c:	12fdd063          	bge	s11,a5,97c <ext_euclid+0x29a>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     860:	fb040113          	addi	sp,s0,-80
     864:	40b6                	lw	ra,76(sp)
     866:	4426                	lw	s0,72(sp)
     868:	4496                	lw	s1,68(sp)
     86a:	4906                	lw	s2,64(sp)
     86c:	59f2                	lw	s3,60(sp)
     86e:	5a62                	lw	s4,56(sp)
     870:	5ad2                	lw	s5,52(sp)
     872:	5b42                	lw	s6,48(sp)
     874:	5bb2                	lw	s7,44(sp)
     876:	5c22                	lw	s8,40(sp)
     878:	5c92                	lw	s9,36(sp)
     87a:	5d02                	lw	s10,32(sp)
     87c:	4df2                	lw	s11,28(sp)
     87e:	00001517          	auipc	a0,0x1
     882:	13650513          	addi	a0,a0,310 # 19b4 <ti_2>
     886:	6161                	addi	sp,sp,80
     888:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     88a:	97ca                	add	a5,a5,s2
     88c:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     88e:	431c                	lw	a5,0(a4)
     890:	fe07cde3          	bltz	a5,88a <ext_euclid+0x1a8>
            ri_1[i] = ri_1[i] % mod;
     894:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     898:	0685                	addi	a3,a3,1
     89a:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     89c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8a0:	b711                	j	7a4 <ext_euclid+0xc2>
            ri[i - (N + 1)] = res[i];
     8a2:	00279693          	slli	a3,a5,0x2
     8a6:	96aa                	add	a3,a3,a0
     8a8:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0785                	addi	a5,a5,1
     8ac:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     8ae:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	b719                	j	7b8 <ext_euclid+0xd6>
            temp[i] = ri_2[i] - ri[i];
     8b4:	00f986b3          	add	a3,s3,a5
     8b8:	00fb85b3          	add	a1,s7,a5
     8bc:	4294                	lw	a3,0(a3)
     8be:	418c                	lw	a1,0(a1)
     8c0:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     8c4:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     8c6:	8e8d                	sub	a3,a3,a1
     8c8:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ca:	0791                	addi	a5,a5,4
     8cc:	bde5                	j	7c4 <ext_euclid+0xe2>
                temp[i] = temp[i] + mod;
     8ce:	97ca                	add	a5,a5,s2
     8d0:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     8d2:	431c                	lw	a5,0(a4)
     8d4:	fe07cde3          	bltz	a5,8ce <ext_euclid+0x1ec>
            temp[i] = temp[i] % mod;
     8d8:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8dc:	0685                	addi	a3,a3,1
     8de:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     8e0:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8e4:	b5ed                	j	7ce <ext_euclid+0xec>
                qi_1[i] = qi_1[i] + mod;
     8e6:	97ca                	add	a5,a5,s2
     8e8:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     8ea:	431c                	lw	a5,0(a4)
     8ec:	fe07cde3          	bltz	a5,8e6 <ext_euclid+0x204>
            qi_1[i] = qi_1[i] % mod;
     8f0:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8f4:	0685                	addi	a3,a3,1
     8f6:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     8f8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8fc:	b5fd                	j	7ea <ext_euclid+0x108>
                temp[i] = temp[i] + mod;
     8fe:	97ca                	add	a5,a5,s2
     900:	00fd2023          	sw	a5,0(s10)
            while (temp[i] < 0) {
     904:	000d2783          	lw	a5,0(s10)
     908:	fe07cbe3          	bltz	a5,8fe <ext_euclid+0x21c>
            temp[i] = temp[i] % mod;
     90c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     910:	0705                	addi	a4,a4,1
     912:	0d11                	addi	s10,s10,4
            temp[i] = temp[i] % mod;
     914:	fefd2e23          	sw	a5,-4(s10)
        for (i = 0; i < N + 1; ++i) {
     918:	b5fd                	j	806 <ext_euclid+0x124>
            ti[i] = ti_2[i] - temp[i];
     91a:	00001697          	auipc	a3,0x1
     91e:	09a68693          	addi	a3,a3,154 # 19b4 <ti_2>
     922:	96be                	add	a3,a3,a5
     924:	00fa85b3          	add	a1,s5,a5
     928:	4294                	lw	a3,0(a3)
     92a:	418c                	lw	a1,0(a1)
     92c:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     930:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     932:	8e8d                	sub	a3,a3,a1
     934:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     936:	0791                	addi	a5,a5,4
     938:	bdd9                	j	80e <ext_euclid+0x12c>
                ti[i] = ti[i] + mod;
     93a:	97ca                	add	a5,a5,s2
     93c:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     93e:	431c                	lw	a5,0(a4)
     940:	fe07cde3          	bltz	a5,93a <ext_euclid+0x258>
            ti[i] = ti[i] % mod;
     944:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     948:	0685                	addi	a3,a3,1
     94a:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     94c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     950:	b5d9                	j	816 <ext_euclid+0x134>
              qi_1[i] = 0;
     952:	00271693          	slli	a3,a4,0x2
     956:	00dc0633          	add	a2,s8,a3
            controlR += ri[i];
     95a:	96de                	add	a3,a3,s7
     95c:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     95e:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     962:	0705                	addi	a4,a4,1
            controlR += ri[i];
     964:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     966:	bdf9                	j	844 <ext_euclid+0x162>
            if (((ri_2[0] * j) % mod) == 1)
     968:	0009a683          	lw	a3,0(s3)
     96c:	02d706b3          	mul	a3,a4,a3
     970:	0326e6b3          	rem	a3,a3,s2
     974:	eec680e3          	beq	a3,a2,854 <ext_euclid+0x172>
        for (j = 0; j < mod; ++j) {
     978:	0705                	addi	a4,a4,1
     97a:	bdd9                	j	850 <ext_euclid+0x16e>
            ti_2[i] = (ti_2[i] * j) % mod;
     97c:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     97e:	0785                	addi	a5,a5,1
     980:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	02d706b3          	mul	a3,a4,a3
     986:	0326e6b3          	rem	a3,a3,s2
     98a:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     98e:	b5f9                	j	85c <ext_euclid+0x17a>

00000990 <generate_keys>:




int* generate_keys(int N, int p, int q){
     990:	7141                	addi	sp,sp,-496
     992:	1e112623          	sw	ra,492(sp)
     996:	1e812423          	sw	s0,488(sp)
     99a:	1e912223          	sw	s1,484(sp)
     99e:	1b80                	addi	s0,sp,496
     9a0:	1f212023          	sw	s2,480(sp)
     9a4:	1d312e23          	sw	s3,476(sp)
     9a8:	1d412c23          	sw	s4,472(sp)
     9ac:	1d512a23          	sw	s5,468(sp)
     9b0:	1d612823          	sw	s6,464(sp)
     9b4:	1d712623          	sw	s7,460(sp)
     9b8:	1da12023          	sw	s10,448(sp)
     9bc:	1d812423          	sw	s8,456(sp)
     9c0:	1d912223          	sw	s9,452(sp)
     9c4:	892a                	mv	s2,a0
     9c6:	8bae                	mv	s7,a1
     9c8:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ca:	4581                	li	a1,0
     9cc:	0d000613          	li	a2,208
     9d0:	e2440513          	addi	a0,s0,-476
     9d4:	238d                	jal	f36 <memset>
     9d6:	4485                	li	s1,1
     9d8:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	0d800613          	li	a2,216
     9de:	4581                	li	a1,0
     9e0:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	e1342c23          	sw	s3,-488(s0)
     9e8:	e0942e23          	sw	s1,-484(s0)
     9ec:	e2942023          	sw	s1,-480(s0)
     9f0:	e3342423          	sw	s3,-472(s0)
     9f4:	e2942823          	sw	s1,-464(s0)
     9f8:	e2942e23          	sw	s1,-452(s0)
     9fc:	e5342023          	sw	s3,-448(s0)
     a00:	e5342223          	sw	s3,-444(s0)
     a04:	e4942623          	sw	s1,-436(s0)
     a08:	e5342a23          	sw	s3,-428(s0)
     a0c:	e4942e23          	sw	s1,-420(s0)
     a10:	e6942023          	sw	s1,-416(s0)
     a14:	e7342623          	sw	s3,-404(s0)
     a18:	e6942a23          	sw	s1,-396(s0)
     a1c:	e8942023          	sw	s1,-384(s0)
     a20:	e8942223          	sw	s1,-380(s0)
     a24:	e8942423          	sw	s1,-376(s0)
     a28:	e9342623          	sw	s3,-372(s0)
     a2c:	e8942a23          	sw	s1,-364(s0)
     a30:	ea942023          	sw	s1,-352(s0)
     a34:	ea942223          	sw	s1,-348(s0)
     a38:	ea942423          	sw	s1,-344(s0)
     a3c:	eb342623          	sw	s3,-340(s0)
     a40:	ea942a23          	sw	s1,-332(s0)
     a44:	ec942023          	sw	s1,-320(s0)
     a48:	ec942223          	sw	s1,-316(s0)
     a4c:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     a50:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a54:	21cd                	jal	f36 <memset>
    int polyR[N+1];
     a56:	002a9793          	slli	a5,s5,0x2
     a5a:	07bd                	addi	a5,a5,15
     a5c:	9bc1                	andi	a5,a5,-16
     a5e:	40f10133          	sub	sp,sp,a5
     a62:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a64:	00291d13          	slli	s10,s2,0x2
     a68:	01aa07b3          	add	a5,s4,s10
     a6c:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6e:	ef342a23          	sw	s3,-268(s0)
     a72:	ee942e23          	sw	s1,-260(s0)
     a76:	f0942023          	sw	s1,-256(s0)
     a7a:	f0942423          	sw	s1,-248(s0)
     a7e:	f1342a23          	sw	s3,-236(s0)
     a82:	f1342e23          	sw	s3,-228(s0)
     a86:	f3342023          	sw	s3,-224(s0)
     a8a:	f2942423          	sw	s1,-216(s0)
     a8e:	f3342823          	sw	s3,-208(s0)
     a92:	f2942c23          	sw	s1,-200(s0)
     a96:	f4942223          	sw	s1,-188(s0)
     a9a:	f5342423          	sw	s3,-184(s0)
     a9e:	f4942823          	sw	s1,-176(s0)
     aa2:	f4942e23          	sw	s1,-164(s0)
     aa6:	f7342023          	sw	s3,-160(s0)
     aaa:	f6942423          	sw	s1,-152(s0)
     aae:	f6942a23          	sw	s1,-140(s0)
     ab2:	f7342c23          	sw	s3,-136(s0)
     ab6:	f8942023          	sw	s1,-128(s0)
     aba:	f8942423          	sw	s1,-120(s0)
     abe:	f8942623          	sw	s1,-116(s0)
     ac2:	f8942c23          	sw	s1,-104(s0)
     ac6:	f9342e23          	sw	s3,-100(s0)
     aca:	fa942223          	sw	s1,-92(s0)
     ace:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     ad2:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     ad6:	4785                	li	a5,1
     ad8:	1127c263          	blt	a5,s2,bdc <generate_keys+0x24c>
     adc:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     ade:	03600693          	li	a3,54
     ae2:	10f6d463          	bge	a3,a5,bea <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     ae6:	4781                	li	a5,0
        random_keys[i] = f[i];
     ae8:	00001697          	auipc	a3,0x1
     aec:	05c68693          	addi	a3,a3,92 # 1b44 <random_keys>
    for(i = 0; i < N; ++i){
     af0:	1127cb63          	blt	a5,s2,c06 <generate_keys+0x276>
     af4:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     af8:	00191993          	slli	s3,s2,0x1
     afc:	87ca                	mv	a5,s2
     afe:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     b00:	00001617          	auipc	a2,0x1
     b04:	04460613          	addi	a2,a2,68 # 1b44 <random_keys>
    for(i = N; i < (2*N); ++i){
     b08:	1137ca63          	blt	a5,s3,c1c <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     b0c:	448d                	li	s1,3
     b0e:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     b12:	86de                	mv	a3,s7
     b14:	8656                	mv	a2,s5
     b16:	e1840593          	addi	a1,s0,-488
     b1a:	8552                	mv	a0,s4
     b1c:	36d9                	jal	6e2 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     b1e:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     b20:	00001697          	auipc	a3,0x1
     b24:	02468693          	addi	a3,a3,36 # 1b44 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     b28:	1097c263          	blt	a5,s1,c2c <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     b2c:	8656                	mv	a2,s5
     b2e:	86da                	mv	a3,s6
     b30:	e1840593          	addi	a1,s0,-488
     b34:	8552                	mv	a0,s4
     b36:	3675                	jal	6e2 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     b38:	5751                	li	a4,-12
     b3a:	02e90733          	mul	a4,s2,a4
     b3e:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     b40:	00001617          	auipc	a2,0x1
     b44:	00460613          	addi	a2,a2,4 # 1b44 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     b48:	0fa4ca63          	blt	s1,s10,c3c <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     b4c:	4701                	li	a4,0
     b4e:	85ca                	mv	a1,s2
     b50:	86ca                	mv	a3,s2
     b52:	8666                	mv	a2,s9
     b54:	fe0ff0ef          	jal	ra,334 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     b58:	87aa                	mv	a5,a0
     b5a:	4701                	li	a4,0
     b5c:	fff98593          	addi	a1,s3,-1
     b60:	0eb74863          	blt	a4,a1,c50 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b64:	86d6                	mv	a3,s5
     b66:	875a                	mv	a4,s6
     b68:	8652                	mv	a2,s4
     b6a:	3a2d                	jal	4a4 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b6c:	4795                	li	a5,5
     b6e:	02f907b3          	mul	a5,s2,a5
     b72:	098a                	slli	s3,s3,0x2
     b74:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b76:	00001697          	auipc	a3,0x1
     b7a:	fce68693          	addi	a3,a3,-50 # 1b44 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b7e:	0991                	addi	s3,s3,4
     b80:	0efc4063          	blt	s8,a5,c60 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b84:	4699                	li	a3,6
     b86:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b88:	00001617          	auipc	a2,0x1
     b8c:	fbc60613          	addi	a2,a2,-68 # 1b44 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b90:	02d906b3          	mul	a3,s2,a3
     b94:	02a90933          	mul	s2,s2,a0
     b98:	0cf6dc63          	bge	a3,a5,c70 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b9c:	e1040113          	addi	sp,s0,-496
     ba0:	1ec12083          	lw	ra,492(sp)
     ba4:	1e812403          	lw	s0,488(sp)
     ba8:	1e412483          	lw	s1,484(sp)
     bac:	1e012903          	lw	s2,480(sp)
     bb0:	1dc12983          	lw	s3,476(sp)
     bb4:	1d812a03          	lw	s4,472(sp)
     bb8:	1d412a83          	lw	s5,468(sp)
     bbc:	1d012b03          	lw	s6,464(sp)
     bc0:	1cc12b83          	lw	s7,460(sp)
     bc4:	1c812c03          	lw	s8,456(sp)
     bc8:	1c412c83          	lw	s9,452(sp)
     bcc:	1c012d03          	lw	s10,448(sp)
     bd0:	00001517          	auipc	a0,0x1
     bd4:	f7450513          	addi	a0,a0,-140 # 1b44 <random_keys>
     bd8:	617d                	addi	sp,sp,496
     bda:	8082                	ret
        polyR[i] = 0;
     bdc:	00279713          	slli	a4,a5,0x2
     be0:	9752                	add	a4,a4,s4
     be2:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     be6:	0785                	addi	a5,a5,1
     be8:	bdc5                	j	ad8 <generate_keys+0x148>
        f[i] = 0;
     bea:	00279713          	slli	a4,a5,0x2
     bee:	e1840613          	addi	a2,s0,-488
     bf2:	963a                	add	a2,a2,a4
     bf4:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     bf8:	ef440613          	addi	a2,s0,-268
     bfc:	9732                	add	a4,a4,a2
     bfe:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     c02:	0785                	addi	a5,a5,1
     c04:	bdf9                	j	ae2 <generate_keys+0x152>
        random_keys[i] = f[i];
     c06:	00279713          	slli	a4,a5,0x2
     c0a:	e1840593          	addi	a1,s0,-488
     c0e:	00e68633          	add	a2,a3,a4
     c12:	972e                	add	a4,a4,a1
     c14:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     c16:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     c18:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     c1a:	bdd9                	j	af0 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     c1c:	430c                	lw	a1,0(a4)
     c1e:	00279693          	slli	a3,a5,0x2
     c22:	96b2                	add	a3,a3,a2
     c24:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     c26:	0785                	addi	a5,a5,1
     c28:	0711                	addi	a4,a4,4
     c2a:	bdf9                	j	b08 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     c2c:	4110                	lw	a2,0(a0)
     c2e:	00279713          	slli	a4,a5,0x2
     c32:	9736                	add	a4,a4,a3
     c34:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c36:	0785                	addi	a5,a5,1
     c38:	0511                	addi	a0,a0,4
     c3a:	b5fd                	j	b28 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     c3c:	00249793          	slli	a5,s1,0x2
     c40:	00f706b3          	add	a3,a4,a5
     c44:	96aa                	add	a3,a3,a0
     c46:	4294                	lw	a3,0(a3)
     c48:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     c4a:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     c4c:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     c4e:	bded                	j	b48 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     c50:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     c52:	0705                	addi	a4,a4,1
     c54:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     c56:	037686b3          	mul	a3,a3,s7
     c5a:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     c5e:	b709                	j	b60 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c60:	ff89a603          	lw	a2,-8(s3)
     c64:	002c1713          	slli	a4,s8,0x2
     c68:	9736                	add	a4,a4,a3
     c6a:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c6c:	0c05                	addi	s8,s8,1
     c6e:	bf01                	j	b7e <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     c70:	00279713          	slli	a4,a5,0x2
     c74:	00e605b3          	add	a1,a2,a4
     c78:	974a                	add	a4,a4,s2
     c7a:	9752                	add	a4,a4,s4
     c7c:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c7e:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c80:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c82:	bf19                	j	b98 <generate_keys+0x208>

00000c84 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c84:	7115                	addi	sp,sp,-224
     c86:	cda2                	sw	s0,216(sp)
     c88:	cba6                	sw	s1,212(sp)
     c8a:	c9ca                	sw	s2,208(sp)
     c8c:	842a                	mv	s0,a0
     c8e:	892e                	mv	s2,a1
     c90:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c92:	00000597          	auipc	a1,0x0
     c96:	49658593          	addi	a1,a1,1174 # 1128 <_endtext>
     c9a:	0c000613          	li	a2,192
     c9e:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ca0:	cf86                	sw	ra,220(sp)
     ca2:	c7ce                	sw	s3,204(sp)
     ca4:	c5d2                	sw	s4,200(sp)
     ca6:	89ba                	mv	s3,a4
     ca8:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     caa:	227d                	jal	e58 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     cac:	4781                	li	a5,0
     cae:	860a                	mv	a2,sp
     cb0:	874a                	mv	a4,s2
     cb2:	03000693          	li	a3,48
     cb6:	85a2                	mv	a1,s0
     cb8:	8552                	mv	a0,s4
     cba:	c6eff0ef          	jal	ra,128 <polymult>
     cbe:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
    for(i = 0; i < 48; ++i){
     cc0:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     cc4:	00f506b3          	add	a3,a0,a5
     cc8:	00f485b3          	add	a1,s1,a5
     ccc:	4298                	lw	a4,0(a3)
     cce:	418c                	lw	a1,0(a1)
     cd0:	0791                	addi	a5,a5,4
     cd2:	972e                	add	a4,a4,a1
     cd4:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     cd6:	fec797e3          	bne	a5,a2,cc4 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     cda:	00141493          	slli	s1,s0,0x1
     cde:	00140693          	addi	a3,s0,1
     ce2:	874a                	mv	a4,s2
     ce4:	864e                	mv	a2,s3
     ce6:	85a6                	mv	a1,s1
     ce8:	fbcff0ef          	jal	ra,4a4 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     cec:	478d                	li	a5,3
     cee:	02f40433          	mul	s0,s0,a5
     cf2:	87aa                	mv	a5,a0
     cf4:	0084ca63          	blt	s1,s0,d08 <ntru_encyrpt+0x84>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     cf8:	40fe                	lw	ra,220(sp)
     cfa:	446e                	lw	s0,216(sp)
     cfc:	44de                	lw	s1,212(sp)
     cfe:	494e                	lw	s2,208(sp)
     d00:	49be                	lw	s3,204(sp)
     d02:	4a2e                	lw	s4,200(sp)
     d04:	612d                	addi	sp,sp,224
     d06:	8082                	ret
        CT[i-(2*N)] = CT[i];
     d08:	00249713          	slli	a4,s1,0x2
     d0c:	972a                	add	a4,a4,a0
     d0e:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     d10:	0485                	addi	s1,s1,1
     d12:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     d14:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     d18:	bff1                	j	cf4 <ntru_encyrpt+0x70>

00000d1a <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d1a:	7179                	addi	sp,sp,-48
     d1c:	d422                	sw	s0,40(sp)
     d1e:	ce4e                	sw	s3,28(sp)
     d20:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	498d                	li	s3,3
     d24:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d28:	d04a                	sw	s2,32(sp)
     d2a:	ca56                	sw	s5,20(sp)
     d2c:	c65e                	sw	s7,12(sp)
     d2e:	8932                	mv	s2,a2
     d30:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d32:	863e                	mv	a2,a5
     d34:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d36:	8aae                	mv	s5,a1
     d38:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d3a:	85a2                	mv	a1,s0
     d3c:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d3e:	d606                	sw	ra,44(sp)
     d40:	d226                	sw	s1,36(sp)
     d42:	cc52                	sw	s4,24(sp)
     d44:	c85a                	sw	s6,16(sp)
     d46:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d48:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d4c:	de8ff0ef          	jal	ra,334 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d50:	00140b13          	addi	s6,s0,1
     d54:	874a                	mv	a4,s2
     d56:	86da                	mv	a3,s6
     d58:	8652                	mv	a2,s4
     d5a:	85a6                	mv	a1,s1
     d5c:	f48ff0ef          	jal	ra,4a4 <polydiv>
     d60:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d62:	87aa                	mv	a5,a0
     d64:	872a                	mv	a4,a0
     d66:	86a6                	mv	a3,s1
     d68:	0536c263          	blt	a3,s3,dac <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     d6c:	4589                	li	a1,2
     d6e:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d72:	4701                	li	a4,0
     d74:	04874563          	blt	a4,s0,dbe <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d78:	4701                	li	a4,0
     d7a:	86a2                	mv	a3,s0
     d7c:	85a2                	mv	a1,s0
     d7e:	855e                	mv	a0,s7
     d80:	db4ff0ef          	jal	ra,334 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d84:	8756                	mv	a4,s5
     d86:	86da                	mv	a3,s6
     d88:	8652                	mv	a2,s4
     d8a:	85a6                	mv	a1,s1
     d8c:	f18ff0ef          	jal	ra,4a4 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d90:	87aa                	mv	a5,a0
     d92:	0334cf63          	blt	s1,s3,dd0 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d96:	50b2                	lw	ra,44(sp)
     d98:	5422                	lw	s0,40(sp)
     d9a:	5492                	lw	s1,36(sp)
     d9c:	5902                	lw	s2,32(sp)
     d9e:	49f2                	lw	s3,28(sp)
     da0:	4a62                	lw	s4,24(sp)
     da2:	4ad2                	lw	s5,20(sp)
     da4:	4b42                	lw	s6,16(sp)
     da6:	4bb2                	lw	s7,12(sp)
     da8:	6145                	addi	sp,sp,48
     daa:	8082                	ret
        a2[i-(2*N)] = a2[i];
     dac:	00269593          	slli	a1,a3,0x2
     db0:	95b2                	add	a1,a1,a2
     db2:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     db4:	0685                	addi	a3,a3,1
     db6:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     db8:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dbc:	b775                	j	d68 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     dbe:	4394                	lw	a3,0(a5)
     dc0:	00d5d563          	bge	a1,a3,dca <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     dc4:	412686b3          	sub	a3,a3,s2
     dc8:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     dca:	0705                	addi	a4,a4,1
     dcc:	0791                	addi	a5,a5,4
     dce:	b75d                	j	d74 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     dd0:	00249713          	slli	a4,s1,0x2
     dd4:	972a                	add	a4,a4,a0
     dd6:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	0485                	addi	s1,s1,1
     dda:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     ddc:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     de0:	bf4d                	j	d92 <ntru_deceypt+0x78>

00000de2 <default_exc_handler>:
  jal x0, default_exc_handler
     de2:	0000006f          	j	de2 <default_exc_handler>

00000de6 <reset_handler>:
  mv  x1, x0
     de6:	00000093          	li	ra,0
  mv  x2, x1
     dea:	8106                	mv	sp,ra
  mv  x3, x1
     dec:	8186                	mv	gp,ra
  mv  x4, x1
     dee:	8206                	mv	tp,ra
  mv  x5, x1
     df0:	8286                	mv	t0,ra
  mv  x6, x1
     df2:	8306                	mv	t1,ra
  mv  x7, x1
     df4:	8386                	mv	t2,ra
  mv  x8, x1
     df6:	8406                	mv	s0,ra
  mv  x9, x1
     df8:	8486                	mv	s1,ra
  mv x10, x1
     dfa:	8506                	mv	a0,ra
  mv x11, x1
     dfc:	8586                	mv	a1,ra
  mv x12, x1
     dfe:	8606                	mv	a2,ra
  mv x13, x1
     e00:	8686                	mv	a3,ra
  mv x14, x1
     e02:	8706                	mv	a4,ra
  mv x15, x1
     e04:	8786                	mv	a5,ra
  mv x16, x1
     e06:	8806                	mv	a6,ra
  mv x17, x1
     e08:	8886                	mv	a7,ra
  mv x18, x1
     e0a:	8906                	mv	s2,ra
  mv x19, x1
     e0c:	8986                	mv	s3,ra
  mv x20, x1
     e0e:	8a06                	mv	s4,ra
  mv x21, x1
     e10:	8a86                	mv	s5,ra
  mv x22, x1
     e12:	8b06                	mv	s6,ra
  mv x23, x1
     e14:	8b86                	mv	s7,ra
  mv x24, x1
     e16:	8c06                	mv	s8,ra
  mv x25, x1
     e18:	8c86                	mv	s9,ra
  mv x26, x1
     e1a:	8d06                	mv	s10,ra
  mv x27, x1
     e1c:	8d86                	mv	s11,ra
  mv x28, x1
     e1e:	8e06                	mv	t3,ra
  mv x29, x1
     e20:	8e86                	mv	t4,ra
  mv x30, x1
     e22:	8f06                	mv	t5,ra
  mv x31, x1
     e24:	8f86                	mv	t6,ra
  la   x2, _stack_start
     e26:	0000f117          	auipc	sp,0xf
     e2a:	1da10113          	addi	sp,sp,474 # 10000 <_stack_start>

00000e2e <_start>:
  la x26, _bss_start
     e2e:	00000d17          	auipc	s10,0x0
     e32:	47ed0d13          	addi	s10,s10,1150 # 12ac <_bss_start>
  la x27, _bss_end
     e36:	00001d97          	auipc	s11,0x1
     e3a:	206d8d93          	addi	s11,s11,518 # 203c <_bss_end>
  bge x26, x27, zero_loop_end
     e3e:	01bd5763          	bge	s10,s11,e4c <main_entry>

00000e42 <zero_loop>:
  sw x0, 0(x26)
     e42:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     e46:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     e48:	ffaddde3          	bge	s11,s10,e42 <zero_loop>

00000e4c <main_entry>:
  addi x10, x0, 0
     e4c:	00000513          	li	a0,0
  addi x11, x0, 0
     e50:	00000593          	li	a1,0
  jal x1, main
     e54:	18a000ef          	jal	ra,fde <main>

00000e58 <memcpy>:
     e58:	00a5c7b3          	xor	a5,a1,a0
     e5c:	8b8d                	andi	a5,a5,3
     e5e:	00c508b3          	add	a7,a0,a2
     e62:	e7a1                	bnez	a5,eaa <memcpy+0x52>
     e64:	478d                	li	a5,3
     e66:	04c7f263          	bgeu	a5,a2,eaa <memcpy+0x52>
     e6a:	00357793          	andi	a5,a0,3
     e6e:	872a                	mv	a4,a0
     e70:	eba9                	bnez	a5,ec2 <memcpy+0x6a>
     e72:	ffc8f613          	andi	a2,a7,-4
     e76:	fe060793          	addi	a5,a2,-32
     e7a:	06f76763          	bltu	a4,a5,ee8 <memcpy+0x90>
     e7e:	02c77363          	bgeu	a4,a2,ea4 <memcpy+0x4c>
     e82:	86ae                	mv	a3,a1
     e84:	87ba                	mv	a5,a4
     e86:	0006a803          	lw	a6,0(a3)
     e8a:	0791                	addi	a5,a5,4
     e8c:	0691                	addi	a3,a3,4
     e8e:	ff07ae23          	sw	a6,-4(a5)
     e92:	fec7eae3          	bltu	a5,a2,e86 <memcpy+0x2e>
     e96:	fff60793          	addi	a5,a2,-1
     e9a:	8f99                	sub	a5,a5,a4
     e9c:	9bf1                	andi	a5,a5,-4
     e9e:	0791                	addi	a5,a5,4
     ea0:	973e                	add	a4,a4,a5
     ea2:	95be                	add	a1,a1,a5
     ea4:	01176663          	bltu	a4,a7,eb0 <memcpy+0x58>
     ea8:	8082                	ret
     eaa:	872a                	mv	a4,a0
     eac:	ff157ee3          	bgeu	a0,a7,ea8 <memcpy+0x50>
     eb0:	0005c783          	lbu	a5,0(a1)
     eb4:	0705                	addi	a4,a4,1
     eb6:	0585                	addi	a1,a1,1
     eb8:	fef70fa3          	sb	a5,-1(a4)
     ebc:	ff176ae3          	bltu	a4,a7,eb0 <memcpy+0x58>
     ec0:	8082                	ret
     ec2:	0005c683          	lbu	a3,0(a1)
     ec6:	0705                	addi	a4,a4,1
     ec8:	00377793          	andi	a5,a4,3
     ecc:	fed70fa3          	sb	a3,-1(a4)
     ed0:	0585                	addi	a1,a1,1
     ed2:	d3c5                	beqz	a5,e72 <memcpy+0x1a>
     ed4:	0005c683          	lbu	a3,0(a1)
     ed8:	0705                	addi	a4,a4,1
     eda:	00377793          	andi	a5,a4,3
     ede:	fed70fa3          	sb	a3,-1(a4)
     ee2:	0585                	addi	a1,a1,1
     ee4:	fff9                	bnez	a5,ec2 <memcpy+0x6a>
     ee6:	b771                	j	e72 <memcpy+0x1a>
     ee8:	41d4                	lw	a3,4(a1)
     eea:	0005a283          	lw	t0,0(a1)
     eee:	0085af83          	lw	t6,8(a1)
     ef2:	00c5af03          	lw	t5,12(a1)
     ef6:	0105ae83          	lw	t4,16(a1)
     efa:	0145ae03          	lw	t3,20(a1)
     efe:	0185a303          	lw	t1,24(a1)
     f02:	01c5a803          	lw	a6,28(a1)
     f06:	c354                	sw	a3,4(a4)
     f08:	5194                	lw	a3,32(a1)
     f0a:	00572023          	sw	t0,0(a4)
     f0e:	01f72423          	sw	t6,8(a4)
     f12:	01e72623          	sw	t5,12(a4)
     f16:	01d72823          	sw	t4,16(a4)
     f1a:	01c72a23          	sw	t3,20(a4)
     f1e:	00672c23          	sw	t1,24(a4)
     f22:	01072e23          	sw	a6,28(a4)
     f26:	d314                	sw	a3,32(a4)
     f28:	02470713          	addi	a4,a4,36
     f2c:	02458593          	addi	a1,a1,36
     f30:	faf76ce3          	bltu	a4,a5,ee8 <memcpy+0x90>
     f34:	b7a9                	j	e7e <memcpy+0x26>

00000f36 <memset>:
     f36:	433d                	li	t1,15
     f38:	872a                	mv	a4,a0
     f3a:	02c37363          	bgeu	t1,a2,f60 <memset+0x2a>
     f3e:	00f77793          	andi	a5,a4,15
     f42:	efbd                	bnez	a5,fc0 <memset+0x8a>
     f44:	e5ad                	bnez	a1,fae <memset+0x78>
     f46:	ff067693          	andi	a3,a2,-16
     f4a:	8a3d                	andi	a2,a2,15
     f4c:	96ba                	add	a3,a3,a4
     f4e:	c30c                	sw	a1,0(a4)
     f50:	c34c                	sw	a1,4(a4)
     f52:	c70c                	sw	a1,8(a4)
     f54:	c74c                	sw	a1,12(a4)
     f56:	0741                	addi	a4,a4,16
     f58:	fed76be3          	bltu	a4,a3,f4e <memset+0x18>
     f5c:	e211                	bnez	a2,f60 <memset+0x2a>
     f5e:	8082                	ret
     f60:	40c306b3          	sub	a3,t1,a2
     f64:	068a                	slli	a3,a3,0x2
     f66:	00000297          	auipc	t0,0x0
     f6a:	9696                	add	a3,a3,t0
     f6c:	00a68067          	jr	10(a3)
     f70:	00b70723          	sb	a1,14(a4)
     f74:	00b706a3          	sb	a1,13(a4)
     f78:	00b70623          	sb	a1,12(a4)
     f7c:	00b705a3          	sb	a1,11(a4)
     f80:	00b70523          	sb	a1,10(a4)
     f84:	00b704a3          	sb	a1,9(a4)
     f88:	00b70423          	sb	a1,8(a4)
     f8c:	00b703a3          	sb	a1,7(a4)
     f90:	00b70323          	sb	a1,6(a4)
     f94:	00b702a3          	sb	a1,5(a4)
     f98:	00b70223          	sb	a1,4(a4)
     f9c:	00b701a3          	sb	a1,3(a4)
     fa0:	00b70123          	sb	a1,2(a4)
     fa4:	00b700a3          	sb	a1,1(a4)
     fa8:	00b70023          	sb	a1,0(a4)
     fac:	8082                	ret
     fae:	0ff5f593          	andi	a1,a1,255
     fb2:	00859693          	slli	a3,a1,0x8
     fb6:	8dd5                	or	a1,a1,a3
     fb8:	01059693          	slli	a3,a1,0x10
     fbc:	8dd5                	or	a1,a1,a3
     fbe:	b761                	j	f46 <memset+0x10>
     fc0:	00279693          	slli	a3,a5,0x2
     fc4:	00000297          	auipc	t0,0x0
     fc8:	9696                	add	a3,a3,t0
     fca:	8286                	mv	t0,ra
     fcc:	fa8680e7          	jalr	-88(a3)
     fd0:	8096                	mv	ra,t0
     fd2:	17c1                	addi	a5,a5,-16
     fd4:	8f1d                	sub	a4,a4,a5
     fd6:	963e                	add	a2,a2,a5
     fd8:	f8c374e3          	bgeu	t1,a2,f60 <memset+0x2a>
     fdc:	b7a5                	j	f44 <memset+0xe>

00000fde <main>:


int main(){
     fde:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fe2:	0c000613          	li	a2,192
     fe6:	00000597          	auipc	a1,0x0
     fea:	20258593          	addi	a1,a1,514 # 11e8 <_endtext+0xc0>
     fee:	0068                	addi	a0,sp,12
int main(){
     ff0:	42112623          	sw	ra,1068(sp)
     ff4:	42812423          	sw	s0,1064(sp)
     ff8:	42912223          	sw	s1,1060(sp)
     ffc:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
    1000:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1004:	3d91                	jal	e58 <memcpy>
    resultkon[0] = 0xaaaaaaa0;
    1006:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
    100a:	00000417          	auipc	s0,0x0
    100e:	29e40413          	addi	s0,s0,670 # 12a8 <_edata>
    keys = generate_keys(N, p, q);
    1012:	06500613          	li	a2,101
    1016:	458d                	li	a1,3
    1018:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
    101c:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
    101e:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
    1022:	32bd                	jal	990 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
    1024:	4781                	li	a5,0
    1026:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
    1028:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
    102c:	00f506b3          	add	a3,a0,a5
    1030:	4290                	lw	a2,0(a3)
    1032:	1314                	addi	a3,sp,416
    1034:	96be                	add	a3,a3,a5
    1036:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
    1038:	0791                	addi	a5,a5,4
    103a:	fee799e3          	bne	a5,a4,102c <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
    103e:	1cd8                	addi	a4,sp,628
    1040:	1a850793          	addi	a5,a0,424
    1044:	27c50693          	addi	a3,a0,636
    1048:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
    104a:	4390                	lw	a2,0(a5)
    104c:	0791                	addi	a5,a5,4
    104e:	0711                	addi	a4,a4,4
    1050:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
    1054:	fed79be3          	bne	a5,a3,104a <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
    1058:	01f8                	addi	a4,sp,204
    105a:	35050793          	addi	a5,a0,848
    105e:	42450613          	addi	a2,a0,1060
    1062:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
    1064:	438c                	lw	a1,0(a5)
    1066:	0791                	addi	a5,a5,4
    1068:	0711                	addi	a4,a4,4
    106a:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    106e:	fec79be3          	bne	a5,a2,1064 <main+0x86>
    1072:	06b0                	addi	a2,sp,840
    1074:	4fc50513          	addi	a0,a0,1276
    1078:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    107a:	4398                	lw	a4,0(a5)
    107c:	0791                	addi	a5,a5,4
    107e:	0611                	addi	a2,a2,4
    1080:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1084:	fea79be3          	bne	a5,a0,107a <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    1088:	bbbbc4b7          	lui	s1,0xbbbbc
    108c:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1090:	8742                	mv	a4,a6
    1092:	0070                	addi	a2,sp,12
    1094:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    1098:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    109c:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    10a0:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10a2:	36cd                	jal	c84 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    10a4:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    10a6:	ccccd4b7          	lui	s1,0xccccd
    10aa:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10ae:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    10b0:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10b2:	458d                	li	a1,3
    10b4:	874a                	mv	a4,s2
    10b6:	34810813          	addi	a6,sp,840
    10ba:	1314                	addi	a3,sp,416
    10bc:	06500613          	li	a2,101
    10c0:	03500513          	li	a0,53
    10c4:	3999                	jal	d1a <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    10c6:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    10ca:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    10ce:	c004                	sw	s1,0(s0)
    10d0:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    10d2:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    10d6:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    10da:	0070                	addi	a2,sp,12
    10dc:	00f506b3          	add	a3,a0,a5
    10e0:	963e                	add	a2,a2,a5
    10e2:	4210                	lw	a2,0(a2)
    10e4:	4294                	lw	a3,0(a3)
    10e6:	02d60363          	beq	a2,a3,110c <main+0x12e>
            resultkon[0] = 0xBABABABA;
    10ea:	babac7b7          	lui	a5,0xbabac
    10ee:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    10f2:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    10f4:	42c12083          	lw	ra,1068(sp)
    10f8:	42812403          	lw	s0,1064(sp)
    10fc:	42412483          	lw	s1,1060(sp)
    1100:	42012903          	lw	s2,1056(sp)
    1104:	4501                	li	a0,0
    1106:	43010113          	addi	sp,sp,1072
    110a:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    110c:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    110e:	0791                	addi	a5,a5,4
    1110:	fcb795e3          	bne	a5,a1,10da <main+0xfc>
    1114:	b7c5                	j	10f4 <main+0x116>

00001116 <__CTOR_LIST__>:
	...

0000111e <__CTOR_END__>:
	...

00001126 <__DTOR_END__>:
	...

Disassembly of section .rodata:

00001128 <.rodata>:
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	ffff                	0xffff
    112e:	ffff                	0xffff
    1130:	0000                	unimp
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	ffff                	0xffff
    113a:	ffff                	0xffff
    113c:	0001                	nop
    113e:	0000                	unimp
    1140:	ffff                	0xffff
    1142:	ffff                	0xffff
    1144:	0000                	unimp
    1146:	0000                	unimp
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	0000                	unimp
    1152:	0000                	unimp
    1154:	ffff                	0xffff
    1156:	ffff                	0xffff
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	ffff                	0xffff
    115e:	ffff                	0xffff
    1160:	0001                	nop
    1162:	0000                	unimp
    1164:	0000                	unimp
    1166:	0000                	unimp
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0000                	unimp
    1172:	0000                	unimp
    1174:	ffff                	0xffff
    1176:	ffff                	0xffff
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	ffff                	0xffff
    117e:	ffff                	0xffff
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0000                	unimp
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0000                	unimp
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	ffff                	0xffff
    119a:	ffff                	0xffff
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	ffff                	0xffff
    11a2:	ffff                	0xffff
    11a4:	0000                	unimp
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	ffff                	0xffff
    11ae:	ffff                	0xffff
    11b0:	0000                	unimp
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	ffff                	0xffff
    11ba:	ffff                	0xffff
    11bc:	0001                	nop
    11be:	0000                	unimp
    11c0:	ffff                	0xffff
    11c2:	ffff                	0xffff
    11c4:	0000                	unimp
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0000                	unimp
    11d2:	0000                	unimp
    11d4:	ffff                	0xffff
    11d6:	ffff                	0xffff
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	ffff                	0xffff
    11de:	ffff                	0xffff
    11e0:	0001                	nop
    11e2:	0000                	unimp
    11e4:	0000                	unimp
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0002                	c.slli64	zero
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0002                	c.slli64	zero
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0000                	unimp
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0000                	unimp
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0002                	c.slli64	zero
    122e:	0000                	unimp
    1230:	0000                	unimp
    1232:	0000                	unimp
    1234:	0001                	nop
    1236:	0000                	unimp
    1238:	0001                	nop
    123a:	0000                	unimp
    123c:	0001                	nop
    123e:	0000                	unimp
    1240:	0001                	nop
    1242:	0000                	unimp
    1244:	0000                	unimp
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	0000                	unimp
    124c:	0001                	nop
    124e:	0000                	unimp
    1250:	0000                	unimp
    1252:	0000                	unimp
    1254:	0002                	c.slli64	zero
    1256:	0000                	unimp
    1258:	0001                	nop
    125a:	0000                	unimp
    125c:	0002                	c.slli64	zero
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	0000                	unimp
    1264:	0000                	unimp
    1266:	0000                	unimp
    1268:	0001                	nop
    126a:	0000                	unimp
    126c:	0001                	nop
    126e:	0000                	unimp
    1270:	0002                	c.slli64	zero
    1272:	0000                	unimp
    1274:	0001                	nop
    1276:	0000                	unimp
    1278:	0001                	nop
    127a:	0000                	unimp
    127c:	0001                	nop
    127e:	0000                	unimp
    1280:	0001                	nop
    1282:	0000                	unimp
    1284:	0002                	c.slli64	zero
    1286:	0000                	unimp
    1288:	0001                	nop
    128a:	0000                	unimp
    128c:	0001                	nop
    128e:	0000                	unimp
    1290:	0002                	c.slli64	zero
    1292:	0000                	unimp
    1294:	0001                	nop
    1296:	0000                	unimp
    1298:	0001                	nop
    129a:	0000                	unimp
    129c:	0001                	nop
    129e:	0000                	unimp
    12a0:	0001                	nop
    12a2:	0000                	unimp
    12a4:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

000012a8 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    12a8:	bebe                	fsd	fa5,376(sp)
    12aa:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

000012ac <_bss_start>:
	...

00001504 <product2>:
	...

0000175c <result>:
	...

000019b4 <ti_2>:
	...

00001b44 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	1a3d                	addi	s4,s4,-17
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05c4                	addi	s1,sp,708
       e:	0000                	unimp
      10:	590c                	lw	a1,48(a0)
      12:	18000003          	lb	zero,384(zero) # 180 <polymult+0x58>
      16:	0001                	nop
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0000044f          	fnmadd.s	fs0,ft0,ft0,ft0,rne
      2c:	0102                	c.slli64	sp
      2e:	4d08                	lw	a0,24(a0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	046e                	slli	s0,s0,0x1b
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002ea07          	0x2ea07
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	a604                	fsd	fs1,8(a2)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	032d                	addi	t1,t1,11
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	0106                	slli	sp,sp,0x1
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4b06                	lw	s6,64(sp)
    switch(length%3) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6406                	flw	fs0,64(sp)
      9e:	0006                	c.slli	zero,0x1
      a0:	0300                	addi	s0,sp,384
      a2:	005d1793          	slli	a5,s10,0x5
            for (i = 0; i < (length / 3); i++) {
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
      b0:	0800                	addi	s0,sp,16
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	00000327          	0x327
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	024e                	slli	tp,tp,0x13
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult+0x1b4>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
            a1[length-1] = a2[length-1];
      e4:	0000052b          	0x52b
            a1[length-2] = a2[length-2];
      e8:	5d07a403          	lw	s0,1488(a5)
      ec:	0000                	unimp
      ee:	0000                	unimp
} //end of function
      f0:	330c                	fld	fa1,32(a4)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
    asm volatile(
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	9e06                	add	t3,t3,ra
            for (i = 0; i < (length / 3); i++) {
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
    asm volatile(
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	9706                	add	a4,a4,ra
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	1916                	slli	s2,s2,0x25
     114:	0048                	addi	a0,sp,4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0000                	unimp
     118:	3106                	fld	ft2,96(sp)
    asm volatile(
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
     120:	005d                	c.nop	23
     122:	0000                	unimp
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0606                	slli	a2,a2,0x1
     126:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	170e                	slli	a4,a4,0x23
     132:	0002                	c.slli64	zero
     134:	1800                	addi	s0,sp,48
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
    int line[size_b][size_a + size_b];
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	000004bf 8a133604 	0x8a133604000004bf
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	0001                	nop
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
     156:	070c                	addi	a1,sp,896
     158:	0005                	c.nop	1
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    int pola[size_a];
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
    int line[size_b][size_a + size_b];
     164:	0200                	addi	s0,sp,256
    int pola[size_a];
     166:	0000                	unimp
    int line[size_b][size_a + size_b];
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
    int pola[size_a];
     16c:	0000                	unimp
    int line[size_b][size_a + size_b];
     16e:	0c00                	addi	s0,sp,528
    int pola[size_a];
     170:	380c                	fld	fa1,48(s0)
     172:	0006                	c.slli	zero,0x1
    int polb[size_b];
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
    int pola[size_a];
     17a:	0000                	unimp
    int polb[size_b];
     17c:	0f10                	addi	a2,sp,912
     17e:	785f 0400 0b38      	0xb380400785f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
    int pola[size_a];
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	0130                	addi	a2,sp,136
    int line[size_b][size_a + size_b];
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
    int polb[size_b];
     192:	0001                	nop
            line[i][j] = 0;
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
    for (i = 0; i < size_b; ++i){
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
            product[j] = 0;
     19e:	0000                	unimp
     1a0:	3e0e                	fld	ft8,224(sp)
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
    for (i = 0; i < size_b; ++i){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
    array_equ(pola,a,size_a);
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
     1b8:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1ba:	5a0c                	lw	a1,48(a2)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
     1c0:	005d093f 0c040000 	0xc040000005d093f
     1c8:	0000053b          	0x53b
    array_equ(polb,b,size_b);
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1d2:	0800                	addi	s0,sp,16
     1d4:	e00c                	fsw	fa1,0(s0)
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
    if(star_mult == 1){
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	000003cb          	fnmsub.s	ft7,ft0,ft0,ft0,rne
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	830c                	0x830c
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
            product[j] = 0;
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
            line[i][j] = 0;
     1fc:	063d                	addi	a2,a2,15
     1fe:	0000                	unimp
            product[j] = 0;
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	780c                	flw	fa1,48(s0)
     20a:	0004                	0x4
    for (i = 0; i < size_b; ++i){
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0c1c                	addi	a5,sp,528
     216:	06a2                	slli	a3,a3,0x8
            pola[i] = pola[i] + mod;
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
        while (pola[i] < 0){
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
        pola[i] = pola[i] % mod;
     222:	1100                	addi	s0,sp,160
     224:	015a                	slli	sp,sp,0x16
    for (i = 0; i < size_a; ++i){
     226:	0000                	unimp
     228:	0108                	addi	a0,sp,128
        pola[i] = pola[i] % mod;
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
    for (i = 0; i < size_a; ++i){
     22e:	0002                	c.slli64	zero
            polb[i] = polb[i] + mod;
     230:	0c00                	addi	s0,sp,528
     232:	01e6                	slli	gp,gp,0x19
        while (polb[i] < 0){
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
        polb[i] = polb[i] % mod;
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     23e:	000c                	0xc
     240:	0000                	unimp
        polb[i] = polb[i] % mod;
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
    for (i = 0; i < size_b; ++i){
     246:	0268                	addi	a0,sp,268
    if(star_mult == 1){
     248:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	1280                	addi	s0,sp,352
     24c:	0000057b          	0x57b
    for (i = 0; i < size_b; ++i){
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
     258:	1201                	addi	tp,tp,-32
     25a:	0189                	addi	gp,gp,2
     25c:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	5604                	lw	s1,40(a2)
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
}
     26a:	0001                	nop
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f e411 0003      	0x3e411001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
     286:	bf0c                	fsd	fa1,56(a4)
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x188>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	000004d7          	0x4d7
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	fb0c                	fsw	fa1,48(a4)
     2a2:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	0400                	addi	s0,sp,512
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	0c08                	addi	a0,sp,528
     2ae:	015a                	slli	sp,sp,0x16
        for (j = size_b -1; j >= 0; j = j-1){
     2b0:	0000                	unimp
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	7804                	flw	fs1,48(s0)
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	820e                	mv	tp,gp
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
            line[i][j] = line[i][j] % mod;
     2e0:	0008                	0x8
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x2e>
            line[i][j] = line[i][j] % mod;
     2e6:	0112                	slli	sp,sp,0x4
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
        for(j = 0; j < size_a + size_b -1; ++j){
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
    for (i = 0; i < size_b; ++i){
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
            product[j] += line[i][j];
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
     304:	0000                	unimp
     306:	a90e                	fsd	ft3,144(sp)
        for(i = 0; i < size_b; ++i){
     308:	0004                	0x4
            product[j] += line[i][j];
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	0300                	addi	s0,sp,384
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
        for(i = 0; i < size_b; ++i){
     320:	725f 0400 07bc      	0x7bc0400725f
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	005d                	c.nop	23
     328:	0000                	unimp
        product[j] = product[j] % mod;
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	005d                	c.nop	23
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     334:	0000                	unimp
    int line[size_b][size_a + size_b];
     336:	0c08                	addi	a0,sp,528
     338:	0182                	c.slli64	gp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	0000                	unimp
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
    int line[size_b][size_a + size_b];
     344:	7d0c                	flw	fa1,56(a0)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x144>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	8e0c                	0x8e0c
     360:	0000                	unimp
    int line[size_b][size_a + size_b];
     362:	0400                	addi	s0,sp,512
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0168                	addi	a0,sp,140
    int pola[size_a];
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
    int line[size_b][size_a + size_b];
     376:	1c00                	addi	s0,sp,560
    int pola[size_a];
     378:	2e0c                	fld	fa1,24(a2)
     37a:	0002                	c.slli64	zero
    int polb[size_b];
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
    int pola[size_a];
     382:	0000                	unimp
    int polb[size_b];
     384:	0c20                	addi	s0,sp,536
     386:	037c                	addi	a5,sp,396
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
    int line[size_b][size_a + size_b];
     38c:	f71d                	bnez	a4,2ba <polymult+0x192>
     38e:	0005                	c.nop	1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	2400                	fld	fs0,8(s0)
    int pola[size_a];
     392:	450c                	lw	a1,8(a0)
     394:	0005                	c.nop	1
    int polb[size_b];
     396:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
     39c:	0000                	unimp
            product2[j] = 0;
     39e:	0c28                	addi	a0,sp,536
     3a0:	06bc                	addi	a5,sp,840
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
    for (i = 0; i < size_b; ++i){
     3a6:	3509                	jal	1a8 <polymult+0x80>
     3a8:	0006                	c.slli	zero,0x1
    array_equ(pola,a,size_a);
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
     3b0:	0400                	addi	s0,sp,512
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
    array_equ(polb,b,size_b);
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
    if(star_mult == 1){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x4c>
     3c6:	72755f0f          	0x72755f0f
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	010c                	addi	a1,sp,128
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	d804                	sw	s1,48(s0)
     3da:	3b11                	jal	ee <array_equ+0x5c>
            product2[j] = 0;
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	870c                	0x870c
            line[i][j] = 0;
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
            product2[j] = 0;
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
        for(j = 0; j < size_a + size_b -1; ++j){
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
    for (i = 0; i < size_b; ++i){
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult+0x1e0>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	980c                	0x980c
     3fc:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	000001bf 840ae004 	0x840ae004000001bf
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	046712e3          	bne	a4,t1,c5e <generate_keys+0x2ce>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	00000353          	fadd.s	ft6,ft0,ft0,rne
    for(i=0;i<size_b;++i){
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	b10c                	fsd	fa1,32(a0)
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
        for(j=0;j<size_a+size_b-1;++j){
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	0489                	addi	s1,s1,2
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
        for (j = size_b -1; j >= 0; j = j-1){
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0x68>
     45e:	0005                	c.nop	1
            product2[j] += line[i][j];
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
        for(j=0;j<size_a+size_b-1;++j){
     464:	0000                	unimp
     466:	1000                	addi	s0,sp,32
            product2[j] += line[i][j];
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
     46c:	1600                	addi	s0,sp,800
        for(j=0;j<size_a+size_b-1;++j){
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     472:	00050f17          	auipc	t5,0x50
    for(i=0;i<size_b;++i){
     476:	2800                	fld	fs0,16(s0)
     478:	0404                	addi	s1,sp,512
}
     47a:	0265                	addi	tp,tp,25
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
     482:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
     48e:	1800                	addi	s0,sp,48
     490:	0191                	addi	gp,gp,4
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	025f 0000 6c04      	0x6c040000025f
    int v[size_N];
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	0000020f          	0x20f
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
     4ba:	04d2                	slli	s1,s1,0x14
     4bc:	0000                	unimp
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
    int v[size_N];
     4c4:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
    int v[size_N];
     4ce:	0802                	c.slli64	a6
    int q[size_N];
     4d0:	000008a7          	0x8a7
     4d4:	1814                	addi	a3,sp,48
    int num_temp[size_N];
     4d6:	04ee                	slli	s1,s1,0x1b
     4d8:	0000                	unimp
    int denum_temp[size_D];
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
     4de:	005d                	c.nop	23
    int num_temp[size_N];
     4e0:	0000                	unimp
    int denum_temp[size_D];
     4e2:	1830                	addi	a2,sp,56
     4e4:	04dc                	addi	a5,sp,580
     4e6:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
    int v[size_N];
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
     array_equ(num_temp,num,size_N);
     4f0:	1834                	addi	a3,sp,56
     4f2:	03f6                	slli	t2,t2,0x1d
     4f4:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
    int denum_temp[size_D];
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     array_equ(num_temp,num,size_N);
     4fe:	1838                	addi	a4,sp,56
    int denum_temp[size_D];
     500:	04e4                	addi	s1,sp,588
    for (i = 0; i < size_N; ++i){
     502:	0000                	unimp
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
        array_equ(denum_temp,denum,size_D);
     50c:	183c                	addi	a5,sp,56
     50e:	031f 0000 7a04      	0x7a040000031f
    for (i = 0; i < size_D; ++i) {
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
    for (i = 0; i < size_N; ++i){
     51c:	0234                	addi	a3,sp,264
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0702                	c.slli64	a4
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	06d6                	slli	a3,a3,0x15
     52c:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
        if ( (b_N*u)%mod == 1 )
     532:	018a                	slli	gp,gp,0x2
    for (u = 0; u < mod; ++u){
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
     538:	041d                	addi	s0,s0,7
     53a:	0000                	unimp
            num_temp[i] = num_temp[i] + mod;
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
        while (num_temp[i] < 0) {
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
        num_temp[i] = num_temp[i] % mod;
     546:	00000267          	jalr	tp,zero # 0 <__DYNAMIC>
    for (i = 0; i < size_N; ++i){
     54a:	8004                	0x8004
     54c:	0702                	c.slli64	a4
        num_temp[i] = num_temp[i] % mod;
     54e:	005d                	c.nop	23
     550:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     552:	1850                	addi	a2,sp,52
            denum_temp[i] = denum_temp[i] + mod;
     554:	000001b7          	lui	gp,0x0
        while (denum_temp[i] < 0) {
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        denum_temp[i] = denum_temp[i] % mod;
     560:	1854                	addi	a3,sp,52
    for (i = 0; i < size_D; ++i) {
     562:	0460                	addi	s0,sp,524
     564:	0000                	unimp
        denum_temp[i] = denum_temp[i] % mod;
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
    for (i = 0; i < size_D; ++i) {
     56a:	0882                	c.slli64	a7
        q[i] = 0;
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03e4                	addi	s1,sp,460
     572:	0000                	unimp
        v[i] = 0;
     574:	a804                	fsd	fs1,16(s0)
        q[i] = 0;
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
        v[i] = 0;
     57c:	0148                	addi	a0,sp,132
    for (i = 0; i < size_N; ++i){
     57e:	fd19                	bnez	a0,49c <polymult2+0x168>
     580:	0002                	c.slli64	zero
        if( denum_temp[i] != 0 )
     582:	0400                	addi	s0,sp,512
    for (i = size_D-1; i >= 0; i = i-1){
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
        if ( (b_N*u)%mod == 1 )
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	067d                	addi	a2,a2,31
     590:	0000                	unimp
    for (u = 0; u < mod; ++u){
     592:	ad04                	fsd	fs1,24(a0)
     594:	0c02                	c.slli64	s8
        if( num_temp[i] != 0 )
     596:	08e4                	addi	s1,sp,92
    for (i = size_N-1; i >= 0; i = i-1){
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	7019                	c.lui	zero,0xfffe6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
    while (d >= d2){
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
    array_equ(result,q,size_N);
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	0155                	addi	sp,sp,21
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        result[i] = num_temp[i-size_N];
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
     5c2:	0801                	addi	a6,a6,0
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	0456                	slli	s0,s0,0x15
     5c6:	0000                	unimp
}
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0x66>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        v[(d-d2)] = u*r_d;
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
        for (i = 0; i < size_N; ++i){
     600:	0000                	unimp
     602:	0000061b          	0x61b
     606:	6715                	lui	a4,0x5
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
        for (i = 0; i < size_N; ++i){
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
        for(i = 0; i < size_N; ++i){
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
     634:	1000                	addi	s0,sp,32
        for (i = size_N-1; i >= 0; i = i-1){
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     644:	690a                	flw	fs2,128(sp)
     646:	0000                	unimp
            v[i] = v[i] % mod;
     648:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
            v[i] = v[i] % mod;
     64e:	0000                	unimp
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
        for (i = 0; i < size_N; ++i){
     656:	0000                	unimp
                product[i] = product[i] + mod;
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
            while (product[i] < 0) {
     65c:	00000497          	auipc	s1,0x0
     660:	2404                	fld	fs1,8(s0)
            product[i] = product[i] % mod;
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     666:	0000                	unimp
     668:	471a                	lw	a4,132(sp)
            product[i] = product[i] % mod;
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
        for (i = 0; i < size_N; ++i){
     66e:	2804                	fld	fs1,16(s0)
            num_temp[i] = num_temp[i] - product[i];
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	bf18                	fsd	fa4,56(a4)
     678:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
            num_temp[i] = num_temp[i] - product[i];
     67e:	a111                	j	a82 <generate_keys+0xf2>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     684:	c318                	sw	a4,0(a4)
                num_temp[i] = num_temp[i] + mod;
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
            while (num_temp[i] < 0){
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
            num_temp[i] = num_temp[i] % mod;
     690:	0400                	addi	s0,sp,512
     692:	9118                	0x9118
        for (i = 0; i < size_N; ++i){
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
            num_temp[i] = num_temp[i] % mod;
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
            q[i] = q[i] + v[i];
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
        for(i = 0; i < size_N; ++i){
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
            q[i] = q[i] + v[i];
     6ac:	1a00                	addi	s0,sp,304
            q[i] = q[i] % mod;
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
        for(i = 0; i < size_N; ++i){
     6b6:	e608                	fsw	fa0,8(a2)
            if( num_temp[i] != 0 )
     6b8:	0006                	c.slli	zero,0x1
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	1800                	addi	s0,sp,48
     6bc:	0520                	addi	s0,sp,648
            v[i] = 0;
     6be:	0000                	unimp
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
     6c6:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     6c8:	1800                	addi	s0,sp,48
     6ca:	051a                	slli	a0,a0,0x6
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
        result[i] = num_temp[i-size_N];
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0592                	slli	a1,a1,0x4
     6da:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	4704                	lw	s1,8(a4)
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
    int ri_2[size]; // MX-ring poly, a
     6e2:	0000                	unimp
     6e4:	000c                	0xc
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
    int ri_2[size]; // MX-ring poly, a
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
     700:	2618                	fld	fa4,8(a2)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
    int ri_2[size]; // MX-ring poly, a
     70a:	0000                	unimp
     70c:	0000                	unimp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	6e18                	flw	fa4,24(a2)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
    int ri[size];
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
    int ti_1[size]; // ti_1[0] = 1
     71a:	0400                	addi	s0,sp,512
     71c:	1218                	addi	a4,sp,288
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    int ti[size];
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
    int qi_1[size];
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	ad18                	fsd	fa4,24(a0)
    int temp[size];
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
    int ri_2[size]; // MX-ring poly, a
     736:	2400                	fld	fs0,8(s0)
     738:	1f18                	addi	a4,sp,944
    int temp[size];
     73a:	0002                	c.slli64	zero
    for (i = 0; i < size; ++i) {
     73c:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     73e:	5d0f028b          	0x5d0f028b
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
    for (i = 0; i < size; ++i) {
     746:	ba18                	fsd	fa4,48(a2)
     748:	0004                	0x4
    array_equ(ri_2,polyR,size);
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
    array_equ(ri_1,polyf,size);
     752:	5000                	lw	s0,32(s0)
     754:	c318                	sw	a4,0(a4)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
    ti_1[0] = 1;
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	5800                	lw	s0,48(s0)
     762:	c518                	sw	a4,8(a0)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
        ti_2[i] = 0;
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	c818                	sw	a4,16(s0)
     772:	0006                	c.slli	zero,0x1
        ti_1[i] = 0;
     774:	0400                	addi	s0,sp,512
        ti_2[i] = 0;
     776:	fe16028f          	0xfe16028f
        ti_1[i] = 0;
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
    for (i = 0; i < size; ++i) {
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
            while (ri_2[i] < 0) {
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
            ri_2[i] = ri_2[i] % mod;
     78c:	6d18                	flw	fa4,24(a0)
     78e:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     790:	0400                	addi	s0,sp,512
            ri_2[i] = ri_2[i] % mod;
     792:	0291                	addi	t0,t0,4
        for (i = 0; i < N + 1; ++i) {
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	0618                	addi	a4,sp,768
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     7a0:	0292                	slli	t0,t0,0x4
        for (i = 0; i < N + 1; ++i) {
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	a418                	fsd	fa4,8(s0)
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488 # 50a42 <_stack_start+0x40a42>
     7b2:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	d818                	sw	a4,48(s0)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
        for (i = 0; i < N + 1; ++i) {
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	c718                	sw	a4,8(a4)
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
    array_equ(qi_1,res1,size);
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7e6:	fe160297          	auipc	t0,0xfe160
     7ea:	0000                	unimp
     7ec:	bc00                	fsd	fs0,56(s0)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	6518                	flw	fa4,8(a0)
    array_equ(temp,res2,size);
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
        for (i = 0; i < N + 1; ++i) {
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
        for (i = 0; i < N + 1; ++i) {
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
array_equ(ri_2,ri_1,size);
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
array_equ(ri_1,ri,size);
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
array_equ(ti_2,ti_1,size);
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
array_equ(ti_1,ti,size);
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
        controlR = 0;
     840:	00086207          	0x86207
        for (i = 0; i < N + 1; ++i) {
     844:	1800                	addi	s0,sp,48
     846:	03b2                	slli	t2,t2,0xc
    while (controlR != 0) {
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
        for (j = 0; j < mod; ++j) {
     84c:	1b02                	slli	s6,s6,0x20
            if (((ri_2[0] * j) % mod) == 1)
     84e:	0862                	slli	a6,a6,0x18
        for (j = 0; j < mod; ++j) {
     850:	0000                	unimp
     852:	1800                	addi	s0,sp,48
     854:	039d                	addi	t2,t2,7
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
        for (i = 0; i < N + 1; ++i) {
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
    }
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x3e>
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
     870:	001d                	c.nop	7
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
                ri_1[i] = ri_1[i] + mod;
     88c:	0f1d                	addi	t5,t5,7
            while (ri_1[i] < 0) {
     88e:	0005                	c.nop	1
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
            ri_1[i] = ri_1[i] % mod;
     894:	0006f60b          	0x6f60b
        for (i = 0; i < N + 1; ++i) {
     898:	1d00                	addi	s0,sp,688
     89a:	068d                	addi	a3,a3,3
            ri_1[i] = ri_1[i] % mod;
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
        for (i = 0; i < N + 1; ++i) {
     8a0:	0b02                	c.slli64	s6
            ri[i - (N + 1)] = res[i];
     8a2:	0000083b          	0x83b
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
            ri[i - (N + 1)] = res[i];
     8b0:	690a                	flw	fs2,128(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
        for (i = 0; i < N + 1; ++i) {
     8cc:	1000                	addi	s0,sp,32
                temp[i] = temp[i] + mod;
     8ce:	c204                	sw	s1,0(a2)
     8d0:	0008                	0x8
            while (temp[i] < 0) {
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
            temp[i] = temp[i] % mod;
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
        for (i = 0; i < N + 1; ++i) {
     8dc:	0000                	unimp
     8de:	5d15                	li	s10,-27
            temp[i] = temp[i] % mod;
     8e0:	0000                	unimp
     8e2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8e4:	0410                	addi	a2,sp,512
                qi_1[i] = qi_1[i] + mod;
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
            while (qi_1[i] < 0) {
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     8f0:	5b09                	li	s6,-30
     8f2:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
            qi_1[i] = qi_1[i] % mod;
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
        for (i = 0; i < N + 1; ++i) {
     8fc:	0000                	unimp
                temp[i] = temp[i] + mod;
     8fe:	0002                	c.slli64	zero
     900:	b820                	fsd	fs0,112(s0)
     902:	0005                	c.nop	1
            while (temp[i] < 0) {
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
     90a:	0004                	0x4
            temp[i] = temp[i] % mod;
     90c:	2000                	fld	fs0,0(s0)
     90e:	05b1                	addi	a1,a1,12
        for (i = 0; i < N + 1; ++i) {
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
            temp[i] = temp[i] % mod;
     914:	046d1d03          	lh	s10,70(s10)
        for (i = 0; i < N + 1; ++i) {
     918:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     91a:	ec21                	bnez	s0,972 <ext_euclid+0x290>
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
        for (i = 0; i < N + 1; ++i) {
     930:	0069                	c.nop	26
            ti[i] = ti_2[i] - temp[i];
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
        for (i = 0; i < N + 1; ++i) {
     936:	a122                	fsd	fs0,128(sp)
     938:	0001                	nop
                ti[i] = ti[i] + mod;
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
            while (ti[i] < 0) {
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
            ti[i] = ti[i] % mod;
     944:	12ac                	addi	a1,sp,360
     946:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     948:	6822                	flw	fa6,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
            ti[i] = ti[i] % mod;
     94e:	09260c07          	0x9260c07
              qi_1[i] = 0;
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1504                	addi	s1,sp,672
     958:	0000                	unimp
            controlR += ri[i];
     95a:	2022                	fld	ft0,8(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
              qi_1[i] = 0;
     960:	0c08                	addi	a0,sp,528
        for (i = 0; i < N + 1; ++i) {
     962:	0926                	slli	s2,s2,0x9
            controlR += ri[i];
     964:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     966:	0305                	addi	t1,t1,1
            if (((ri_2[0] * j) % mod) == 1)
     968:	175c                	addi	a5,sp,932
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
        for (j = 0; j < mod; ++j) {
     978:	0000                	unimp
     97a:	48220063          	beq	tp,sp,dfa <reset_handler+0x14>
        for (i = 0; i < N + 1; ++i) {
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	19b4                	addi	a3,sp,248
     98c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     98e:	5d09                	li	s10,-30
int* generate_keys(int N, int p, int q){
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001b4403          	lbu	s0,1(s6)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	5524                	lw	s1,104(a0)
     9c8:	0002                	c.slli64	zero
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	12a8                	addi	a0,sp,360
     9d6:	0000                	unimp
     9d8:	db25                	beqz	a4,948 <ext_euclid+0x266>
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	02a8                	addi	a0,sp,328
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	de00                	sw	s0,56(a2)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
     9f0:	2600000b          	0x2600000b
     9f4:	0408                	addi	a0,sp,512
     9f6:	0000                	unimp
     9f8:	a901                	j	e08 <reset_handler+0x22>
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0x82>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02aa                	slli	t0,t0,0xa
     a0c:	630a                	flw	ft6,128(sp)
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	033d                	addi	t1,t1,15
     a18:	0000                	unimp
     a1a:	ab01                	j	f2a <memcpy+0xd2>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0xa4>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02ac                	addi	a1,sp,328
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	02ad                	addi	t0,t0,11
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02ae                	slli	t0,t0,0xb
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	c328                	sw	a0,64(a4)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    int polyR[N+1];
     a50:	02b0                	addi	a2,sp,328
     a52:	6909                	lui	s2,0x2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a54:	0300000b          	0x300000b
    int polyR[N+1];
     a58:	dc91                	beqz	s1,974 <ext_euclid+0x292>
     a5a:	05632677          	0x5632677
     a5e:	0000                	unimp
     a60:	b101                	j	660 <polydiv+0x1bc>
     a62:	0902                	c.slli64	s2
    polyR[N] = 1;
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
     a72:	02b2                	slli	t0,t0,0xc
     a74:	8b09                	andi	a4,a4,2
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	b301                	j	782 <ext_euclid+0xa0>
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	8426                	mv	s0,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	02b4                	addi	a3,sp,328
     a92:	af09                	j	11a4 <_endtext+0x7c>
     a94:	1200000b          	0x1200000b
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0000026f          	jal	tp,a9c <generate_keys+0x10c>
     aa0:	b501                	j	8a0 <ext_euclid+0x1be>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	2726                	fld	fa4,72(sp)
     aaa:	0004                	0x4
     aac:	0100                	addi	s0,sp,128
     aae:	02b6                	slli	t0,t0,0xd
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x22>
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	b701                	j	9bc <generate_keys+0x2c>
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	0010062b          	0x10062b
     acc:	2a00                	fld	fs0,16(a2)
     ace:	001a                	c.slli	zero,0x6
     ad0:	ec00                	fsw	fs0,24(s0)
    polyR[0] = -1;
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
    for(i = 1; i < N; ++i){
     ad6:	5a01                	li	s4,-32
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
    for (i = N; i < 55; ++i ){
     ade:	e803055b          	0xe803055b
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < N; ++i){
     ae6:	5c01                	li	s8,-32
        random_keys[i] = f[i];
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	0010242b          	0x10242b
    for(i = 0; i < N; ++i){
     af0:	9500                	0x9500
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = N; i < (2*N); ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x20>
        random_keys[i] = g[i-N];
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x120>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
    for(i = N; i < (2*N); ++i){
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
    for(i = (2*N); i < (3*N); ++i){
     b0c:	10a4                	addi	s1,sp,104
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
    fp = ext_euclid(polyR, f, (N+1), p);
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    for(i = (2*N); i < (3*N); ++i){
     b1e:	012c                	addi	a1,sp,136
        random_keys[i] = fp[i-(2*N)];
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
    for(i = (2*N); i < (3*N); ++i){
     b28:	dc91                	beqz	s1,a44 <generate_keys+0xb4>
     b2a:	5e012c77          	0x5e012c77
    fq = ext_euclid(polyR, f, (N+1), q);
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x107>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	10c6                	slli	ra,ra,0x31
     b36:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
        random_keys[i] = fq[i-(3*N)];
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
    for(i = (3*N); i < (4*N); ++i){
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
    fg = polymult2(fq, N, g, N, 0);
     b4c:	2c65                	jal	e04 <reset_handler+0x1e>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra) # 114f <_endtext+0x27>
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
    for(i = 0; i < (2*N-1); ++i){
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
    for(i = (4*N); i < (5*N); ++i){
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
}
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
        polyR[i] = 0;
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
    for(i = 1; i < N; ++i){
     be6:	01ee                	slli	gp,gp,0x1b
     be8:	0000                	unimp
        f[i] = 0;
     bea:	7b01                	lui	s6,0xfffe0
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x274>
     bf2:	0d1a                	slli	s10,s10,0x6
     bf4:	0000                	unimp
     bf6:	00c8                	addi	a0,sp,68
        g[i] = 0;
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
    for (i = N; i < 55; ++i ){
     c02:	0100                	addi	s0,sp,128
     c04:	5d17027b          	0x5d17027b
        random_keys[i] = f[i];
     c08:	0000                	unimp
     c0a:	d900                	sw	s0,48(a0)
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
     c10:	0070                	addi	a2,sp,12
     c12:	7b01                	lui	s6,0xfffe0
     c14:	1e02                	slli	t3,t3,0x20
    for(i = 0; i < N; ++i){
     c16:	005d                	c.nop	23
        random_keys[i] = f[i];
     c18:	0000                	unimp
    for(i = 0; i < N; ++i){
     c1a:	021d                	addi	tp,tp,7
        random_keys[i] = g[i-N];
     c1c:	0000                	unimp
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	5d25027b          	0x5d25027b
    for(i = N; i < (2*N); ++i){
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
        random_keys[i] = fp[i-(2*N)];
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
     c30:	0000                	unimp
     c32:	7b01                	lui	s6,0xfffe0
     c34:	2d02                	fld	fs10,0(sp)
    for(i = (2*N); i < (3*N); ++i){
     c36:	00000b63          	beqz	zero,c4c <generate_keys+0x2bc>
     c3a:	0000028b          	0x28b
        random_keys[i] = fq[i-(3*N)];
     c3e:	8431                	srai	s0,s0,0xc
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	6340027b          	0x6340027b
     c48:	b700000b          	0xb700000b
     c4c:	0002                	c.slli64	zero
    for(i = (3*N); i < (4*N); ++i){
     c4e:	3100                	fld	fs0,32(a0)
        fg[i] = fg[i]*p;
     c50:	0408                	addi	a0,sp,512
    for(i = 0; i < (2*N-1); ++i){
     c52:	0000                	unimp
     c54:	7b01                	lui	s6,0xfffe0
        fg[i] = fg[i]*p;
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <generate_keys+0x2de>
     c5c:	02ee                	slli	t0,t0,0x1b
    for(i = 0; i < (2*N-1); ++i){
     c5e:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c60:	9531                	srai	a0,a0,0x2c
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
     c66:	6366027b          	0x6366027b
     c6a:	0f00000b          	0xf00000b
    for(i = (4*N); i < (5*N); ++i){
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x168>
        random_keys[i] = polyR[i-(5*N)];
     c72:	02da                	slli	t0,t0,0x16
     c74:	0000                	unimp
     c76:	7d01                	lui	s10,0xfffe0
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0xc>
    for(i = (5*N); i < (6*N+1); ++i){
     c7e:	612a                	flw	ft2,136(sp)
        random_keys[i] = polyR[i-(5*N)];
     c80:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c82:	027e                	slli	tp,tp,0x1f
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
     c8e:	3261                	jal	616 <polydiv+0x172>
     c90:	0100                	addi	s0,sp,128
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c92:	027f                	0x27f
     c94:	630a                	flw	ft6,128(sp)
     c96:	5900000b          	0x5900000b
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x178>
     c9e:	80010063          	beqz	sp,fffffc9e <_stack_start+0xfffefc9e>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_encyrpt+0x36>
     ca8:	0382                	c.slli64	t2
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     caa:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	8101                	c.srli64	a0
     cb2:	0a02                	c.slli64	s4
     cb4:	00000b63          	beqz	zero,cca <ntru_encyrpt+0x46>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     cc0:	0282                	c.slli64	t0
     cc2:	5d09                	li	s10,-30
        temp[i] = temp[i] + message[i];
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x188>
     ccc:	0d50                	addi	a2,sp,660
     cce:	0000                	unimp
     cd0:	1619                	addi	a2,a2,-26
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
    for(i = 0; i < 48; ++i){
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
    for(i = (2*N); i < (3*N); ++i){
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
}
     cf8:	000d602b          	0xd602b
     cfc:	0000                	unimp
     cfe:	0014                	0x14
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
        CT[i-(2*N)] = CT[i];
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
    for(i = (2*N); i < (3*N); ++i){
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
        CT[i-(2*N)] = CT[i];
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
    for(i = (2*N); i < (3*N); ++i){
     d18:	5e01                	li	t3,-32
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000d842b          	0xd842b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	1900                	addi	s0,sp,176
     d24:	0016                	c.slli	zero,0x5
     d26:	4300                	lw	s0,0(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0x9c>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0d90                	addi	a2,sp,720
     d46:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d48:	1400                	addi	s0,sp,544
     d4a:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
    for(i = (2*N); i < ((2*N)+N); ++i){
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	0006572f          	0x6572f
     d6a:	0100                	addi	s0,sp,128
        if(a2[i] <= q/2)
     d6c:	0259                	addi	tp,tp,22
     d6e:	6306                	flw	ft6,64(sp)
     d70:	8400000b          	0x8400000b
    for (i = 0; i < N; ++i){
     d74:	000c                	0xc
     d76:	9600                	0x9600
    c = polymult2(secret_key_fp,N,a2,N,0);
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
     d7c:	959c                	0x959c
     d7e:	000e                	c.slli	zero,0x3
     d80:	3000                	fld	fs0,32(s0)
     d82:	004e                	c.slli	zero,0x13
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d84:	5901                	li	s2,-32
     d86:	1702                	slli	a4,a4,0x20
     d88:	005d                	c.nop	23
     d8a:	0000                	unimp
     d8c:	0438                	addi	a4,sp,520
     d8e:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d90:	7130                	flw	fa2,96(a0)
     d92:	0100                	addi	s0,sp,128
     d94:	0259                	addi	tp,tp,22
}
     d96:	5d1e                	lw	s10,228(sp)
     d98:	0000                	unimp
     d9a:	6400                	flw	fs0,8(s0)
     d9c:	0004                	0x4
     d9e:	3100                	fld	fs0,32(a0)
     da0:	000003c3          	fmadd.s	ft7,ft0,ft0,ft0,rne
     da4:	5901                	li	s2,-32
     da6:	2602                	fld	fa2,0(sp)
     da8:	00000b63          	beqz	zero,dbe <ntru_deceypt+0xa4>
        a2[i-(2*N)] = a2[i];
     dac:	0000049b          	0x49b
     db0:	6331                	lui	t1,0xc
     db2:	0005                	c.nop	1
    for(i = (2*N); i < ((2*N)+N); ++i){
     db4:	0100                	addi	s0,sp,128
     db6:	0259                	addi	tp,tp,22
        a2[i-(2*N)] = a2[i];
     db8:	6334                	flw	fa3,64(a4)
     dba:	c700000b          	0xc700000b
        if(a2[i] <= q/2)
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	0695                	addi	a3,a3,5
            a2[i] = (-1)*(q-a2[i]);
     dc4:	0000                	unimp
     dc6:	5901                	li	s2,-32
     dc8:	4502                	lw	a0,0(sp)
    for (i = 0; i < N; ++i){
     dca:	00000b63          	beqz	zero,de0 <ntru_deceypt+0xc6>
     dce:	04fe                	slli	s1,s1,0x1f
        c2[i-(2*N)] = c2[i];
     dd0:	0000                	unimp
     dd2:	ca29                	beqz	a2,e24 <reset_handler+0x3e>
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	630a025b          	0x630a025b
        c2[i-(2*N)] = c2[i];
     ddc:	3200000b          	0x3200000b
    for(i = (2*N); i < ((2*N)+N); ++i){
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
  jal x0, default_exc_handler
     de4:	025c                	addi	a5,sp,260
  mv  x1, x0
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
  mv  x3, x1
     dec:	285a                	fld	fa6,400(sp)
  mv  x4, x1
     dee:	0392                	slli	t2,t2,0x4
  mv  x5, x1
     df0:	0000                	unimp
  mv  x6, x1
     df2:	5e01                	li	t3,-32
  mv  x7, x1
     df4:	0902                	c.slli64	s2
  mv  x8, x1
     df6:	0b69                	addi	s6,s6,26
  mv  x9, x1
     df8:	0000                	unimp
  mv x10, x1
     dfa:	7ea09103          	lh	sp,2026(ra)
  mv x12, x1
     dfe:	4926                	lw	s2,72(sp)
  mv x13, x1
     e00:	0002                	c.slli64	zero
  mv x14, x1
     e02:	0100                	addi	s0,sp,128
  mv x15, x1
     e04:	025f 630a 000b      	0xb630a025f
  mv x18, x1
     e0a:	3500                	fld	fs0,40(a0)
  mv x19, x1
     e0c:	0005                	c.nop	1
  mv x20, x1
     e0e:	2a00                	fld	fs0,16(a2)
  mv x21, x1
     e10:	0069                	c.nop	26
  mv x22, x1
     e12:	6001                	0x6001
  mv x23, x1
     e14:	0902                	c.slli64	s2
  mv x24, x1
     e16:	005d                	c.nop	23
  mv x25, x1
     e18:	0000                	unimp
  mv x26, x1
     e1a:	0548                	addi	a0,sp,644
  mv x27, x1
     e1c:	0000                	unimp
  mv x28, x1
     e1e:	000cac2b          	0xcac2b
  mv x30, x1
     e22:	2a00                	fld	fs0,16(a2)
  mv x31, x1
     e24:	001a                	c.slli	zero,0x6
  la   x2, _stack_start
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
  la x26, _bss_start
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
  la x27, _bss_end
     e36:	1128                	addi	a0,sp,168
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
  bge x26, x27, zero_loop_end
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
  sw x0, 0(x26)
     e42:	0cbe                	slli	s9,s9,0xf
     e44:	0000                	unimp
  addi x26, x26, 4
     e46:	1792                	slli	a5,a5,0x24
  ble x26, x27, zero_loop
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
  addi x10, x0, 0
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
  addi x11, x0, 0
     e50:	025a                	slli	tp,tp,0x16
     e52:	0084                	addi	s1,sp,64
  jal x1, main
     e54:	012c                	addi	a1,sp,136
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 ec2d      	0xec2d0030015f
     e74:	000c                	0xc
     e76:	0000                	unimp
     e78:	0014                	0x14
     e7a:	2c00                	fld	fs0,24(s0)
     e7c:	5b01                	li	s6,-32
     e7e:	7902                	flw	fs2,32(sp)
     e80:	2c00                	fld	fs0,24(s0)
     e82:	5c01                	li	s8,-32
     e84:	8302                	jr	t1
     e86:	2c00                	fld	fs0,24(s0)
     e88:	5d01                	li	s10,-32
     e8a:	7802                	flw	fa6,32(sp)
     e8c:	2c01                	jal	109c <main+0xbe>
     e8e:	5e01                	li	t3,-32
     e90:	8202                	jr	tp
     e92:	0000                	unimp
     e94:	2f00                	fld	fs0,24(a4)
     e96:	0334                	addi	a3,sp,392
     e98:	0000                	unimp
     e9a:	0101                	addi	sp,sp,0
     e9c:	0602                	c.slli64	a2
     e9e:	00000b63          	beqz	zero,eb4 <memcpy+0x5c>
     ea2:	0990                	addi	a2,sp,208
     ea4:	0000                	unimp
     ea6:	02f4                	addi	a3,sp,332
     ea8:	0000                	unimp
     eaa:	9c01                	0x9c01
     eac:	1045                	c.nop	-15
     eae:	0000                	unimp
     eb0:	4e30                	lw	a2,88(a2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	0201                	addi	tp,tp,0
     eb6:	5d18                	lw	a4,56(a0)
     eb8:	0000                	unimp
     eba:	8a00                	0x8a00
     ebc:	0005                	c.nop	1
     ebe:	3000                	fld	fs0,32(s0)
     ec0:	0070                	addi	a2,sp,12
     ec2:	0101                	addi	sp,sp,0
     ec4:	1f02                	slli	t5,t5,0x20
     ec6:	005d                	c.nop	23
     ec8:	0000                	unimp
     eca:	000005db          	0x5db
     ece:	7130                	flw	fa2,96(a0)
     ed0:	0100                	addi	s0,sp,128
     ed2:	0201                	addi	tp,tp,0
     ed4:	5d26                	lw	s10,104(sp)
     ed6:	0000                	unimp
     ed8:	1200                	addi	s0,sp,288
     eda:	0006                	c.slli	zero,0x1
     edc:	3200                	fld	fs0,32(a2)
     ede:	0066                	c.slli	zero,0x19
     ee0:	0301                	addi	t1,t1,0
     ee2:	0902                	c.slli64	s2
     ee4:	1045                	c.nop	-15
     ee6:	0000                	unimp
     ee8:	7c989103          	lh	sp,1993(a7)
     eec:	6732                	flw	fa4,12(sp)
     eee:	0100                	addi	s0,sp,128
     ef0:	0204                	addi	s1,sp,256
     ef2:	4509                	li	a0,2
     ef4:	0010                	0x10
     ef6:	0300                	addi	s0,sp,384
     ef8:	f491                	bnez	s1,e04 <reset_handler+0x1e>
     efa:	2a7d                	jal	10b8 <main+0xda>
     efc:	7066                	flw	ft0,120(sp)
     efe:	0100                	addi	s0,sp,128
     f00:	0206                	slli	tp,tp,0x1
     f02:	630a                	flw	ft6,128(sp)
     f04:	4900000b          	0x4900000b
     f08:	0006                	c.slli	zero,0x1
     f0a:	2a00                	fld	fs0,16(a2)
     f0c:	7166                	flw	ft2,120(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	630a0207          	0x630a0207
     f14:	5c00000b          	0x5c00000b
     f18:	0006                	c.slli	zero,0x1
     f1a:	2a00                	fld	fs0,16(a2)
     f1c:	6766                	flw	fa4,88(sp)
     f1e:	0100                	addi	s0,sp,128
     f20:	0208                	addi	a0,sp,256
     f22:	630a                	flw	ft6,128(sp)
     f24:	7a00000b          	0x7a00000b
     f28:	0006                	c.slli	zero,0x1
     f2a:	2a00                	fld	fs0,16(a2)
     f2c:	6b70                	flw	fa2,84(a4)
     f2e:	0100                	addi	s0,sp,128
     f30:	0209                	addi	tp,tp,2
     f32:	630a                	flw	ft6,128(sp)
     f34:	9800000b          	0x9800000b
     f38:	0006                	c.slli	zero,0x1
     f3a:	2600                	fld	fs0,8(a2)
     f3c:	0695                	addi	a3,a3,5
     f3e:	0000                	unimp
     f40:	0a01                	addi	s4,s4,0
     f42:	0902                	c.slli64	s2
     f44:	1055                	c.nop	-11
     f46:	0000                	unimp
     f48:	06b6                	slli	a3,a3,0xd
     f4a:	0000                	unimp
     f4c:	692a                	flw	fs2,136(sp)
     f4e:	0100                	addi	s0,sp,128
     f50:	5d09020b          	0x5d09020b
     f54:	0000                	unimp
     f56:	1900                	addi	s0,sp,176
     f58:	26000007          	0x26000007
     f5c:	03d4                	addi	a3,sp,452
     f5e:	0000                	unimp
     f60:	0c01                	addi	s8,s8,0
     f62:	0a02                	c.slli64	s4
     f64:	00000b63          	beqz	zero,f7a <memset+0x44>
     f68:	0855                	addi	a6,a6,21
     f6a:	0000                	unimp
     f6c:	00006933          	or	s2,zero,zero
     f70:	6d00                	flw	fs0,24(a0)
     f72:	0008                	0x8
     f74:	2b00                	fld	fs0,16(a4)
     f76:	09d6                	slli	s3,s3,0x15
     f78:	0000                	unimp
     f7a:	1a35                	addi	s4,s4,-19
     f7c:	0000                	unimp
     f7e:	0f95                	addi	t6,t6,5
     f80:	0000                	unimp
     f82:	012c                	addi	a1,sp,136
     f84:	035a                	slli	t1,t1,0x16
     f86:	a478                	fsd	fa4,200(s0)
     f88:	2c7c                	fld	fa5,216(s0)
     f8a:	5b01                	li	s6,-32
     f8c:	3001                	jal	78c <ext_euclid+0xaa>
     f8e:	012c                	addi	a1,sp,136
     f90:	025c                	addi	a5,sp,260
     f92:	d008                	sw	a0,32(s0)
     f94:	2b00                	fld	fs0,16(a4)
     f96:	0a56                	slli	s4,s4,0x15
     f98:	0000                	unimp
     f9a:	1a35                	addi	s4,s4,-19
     f9c:	0000                	unimp
     f9e:	0fb5                	addi	t6,t6,13
     fa0:	0000                	unimp
     fa2:	012c                	addi	a1,sp,136
     fa4:	035a                	slli	t1,t1,0x16
     fa6:	f878                	fsw	fa4,116(s0)
     fa8:	2c7d                	jal	1266 <_endtext+0x13e>
     faa:	5b01                	li	s6,-32
     fac:	3001                	jal	7ac <ext_euclid+0xca>
     fae:	012c                	addi	a1,sp,136
     fb0:	025c                	addi	a5,sp,260
     fb2:	d808                	sw	a0,48(s0)
     fb4:	2b00                	fld	fs0,16(a4)
     fb6:	0b1e                	slli	s6,s6,0x7
     fb8:	0000                	unimp
     fba:	1068                	addi	a0,sp,44
     fbc:	0000                	unimp
     fbe:	0fdc                	addi	a5,sp,980
     fc0:	0000                	unimp
     fc2:	012c                	addi	a1,sp,136
     fc4:	025a                	slli	tp,tp,0x16
     fc6:	0072                	c.slli	zero,0x1c
     fc8:	012c                	addi	a1,sp,136
     fca:	9878035b          	0x9878035b
     fce:	2c7c                	fld	fa5,216(s0)
     fd0:	5c01                	li	s8,-32
     fd2:	8502                	jr	a0
     fd4:	2c00                	fld	fs0,24(s0)
     fd6:	5d01                	li	s10,-32
     fd8:	8702                	jr	a4
     fda:	0000                	unimp
     fdc:	000b382b          	0xb382b
int main(){
     fe0:	6800                	flw	fs0,16(s0)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
int main(){
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    resultkon[0] = 0xaaaaaaa0;
    1000:	0086                	slli	ra,ra,0x1
    1002:	2b00                	fld	fs0,16(a4)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1004:	0b58                	addi	a4,sp,404
    resultkon[0] = 0xaaaaaaa0;
    1006:	0000                	unimp
    1008:	1619                	addi	a2,a2,-26
    100a:	0000                	unimp
    100c:	1028                	addi	a0,sp,40
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    keys = generate_keys(N, p, q);
    1012:	0082025b          	0x82025b
    1016:	012c                	addi	a1,sp,136
    1018:	025c                	addi	a5,sp,260
    101a:	0089                	addi	ra,ra,2
    resultkon[0] = 0xaaaaaaa0;
    101c:	012c                	addi	a1,sp,136
    resultkon[0] = 0xaaaaaaa1;
    101e:	025d                	addi	tp,tp,23
    1020:	0082                	c.slli64	ra
    keys = generate_keys(N, p, q);
    1022:	012c                	addi	a1,sp,136
    resultkon[0] = 0xaaaaaaa1;
    1024:	015e                	slli	sp,sp,0x17
    1026:	0030                	addi	a2,sp,8
    for(i = 0; i < N; ++i){
    1028:	6c2d                	lui	s8,0xb
    102a:	0000000b          	0xb
        secret_key_f[i] = keys[i];
    102e:	0014                	0x14
    1030:	2c00                	fld	fs0,24(s0)
    1032:	5c01                	li	s8,-32
    1034:	7202                	flw	ft4,32(sp)
    1036:	2c00                	fld	fs0,24(s0)
    for(i = 0; i < N; ++i){
    1038:	5d01                	li	s10,-32
    103a:	8502                	jr	a0
    103c:	2c00                	fld	fs0,24(s0)
    for(i = N; i < (2*N); ++i){
    103e:	5e01                	li	t3,-32
    1040:	8602                	jr	a2
    1042:	0000                	unimp
    1044:	0900                	addi	s0,sp,144
    1046:	005d                	c.nop	23
    1048:	0000                	unimp
        secret_key_fp[i-(2*N)] = keys[i];
    104a:	1055                	c.nop	-11
    104c:	0000                	unimp
    104e:	690a                	flw	fs2,128(sp)
    1050:	0000                	unimp
    1052:	3600                	fld	fs0,40(a2)
    for(i = (2*N); i < (3*N); ++i){
    1054:	0900                	addi	s0,sp,144
    1056:	005d                	c.nop	23
    for(i = (3*N); i < (4*N); ++i){
    1058:	0000                	unimp
    105a:	1068                	addi	a0,sp,44
    105c:	0000                	unimp
    105e:	6934                	flw	fa3,80(a0)
    1060:	0000                	unimp
    1062:	6c00                	flw	fs0,24(s0)
        public_key[i-(4*N)] = keys[i];
    1064:	0000000f          	fence	unknown,unknown
    1068:	0003712f          	0x3712f
    106c:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
    106e:	0160                	addi	s0,sp,140
    1070:	6306                	flw	ft6,64(sp)
    1072:	e200000b          	0xe200000b
    1076:	0006                	c.slli	zero,0x1
    1078:	ae00                	fsd	fs0,24(a2)
        ring_poly[i-(5*N)] = keys[i];
    107a:	0002                	c.slli64	zero
    107c:	0100                	addi	s0,sp,128
    107e:	7b9c                	flw	fa5,48(a5)
    1080:	31000013          	li	zero,784
    for(i = (5*N); i < (6*N+1); ++i){
    1084:	0695                	addi	a3,a3,5
    1086:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    1088:	6001                	0x6001
    108a:	1601                	addi	a2,a2,-32
    108c:	00000b63          	beqz	zero,10a2 <main+0xc4>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1090:	000008b3          	add	a7,zero,zero
    1094:	b131                	j	ca0 <ntru_encyrpt+0x1c>
    1096:	0001                	nop
    resultkon[0] = 0xbbbbbbb1;
    1098:	0100                	addi	s0,sp,128
    109a:	0160                	addi	s0,sp,140
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    109c:	6322                	flw	ft6,8(sp)
    109e:	f800000b          	0xf800000b
    10a2:	0008                	0x8
    resultkon[0] = 0xbbbbbbb1;
    10a4:	3100                	fld	fs0,32(a0)
    resultkon[0] = 0xccccccc0;
    10a6:	0012                	c.slli	zero,0x4
    10a8:	0000                	unimp
    10aa:	6001                	0x6001
    10ac:	2d01                	jal	16bc <product2+0x1b8>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10ae:	005d                	c.nop	23
    resultkon[0] = 0xccccccc0;
    10b0:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10b2:	093d                	addi	s2,s2,15
    10b4:	0000                	unimp
    10b6:	6d30                	flw	fa2,88(a0)
    10b8:	0100646f          	jal	s0,70c8 <_stack_len+0x30c8>
    10bc:	0160                	addi	s0,sp,140
    10be:	00005d37          	lui	s10,0x5
    10c2:	8100                	0x8100
    10c4:	0009                	c.nop	2
    resultkon[0] = 0xccccccc1;	
    10c6:	2600                	fld	fs0,8(a2)
    10c8:	000002b3          	add	t0,zero,zero
            resultkon[0] = 0xDEDEDEDE;
    10cc:	6201                	0x6201
    resultkon[0] = 0xccccccc1;	
    10ce:	0a01                	addi	s4,s4,0
    10d0:	00000b63          	beqz	zero,10e6 <main+0x108>
            resultkon[0] = 0xDEDEDEDE;
    10d4:	09b8                	addi	a4,sp,216
    for(i = 0; i < 32; ++i){
    10d6:	0000                	unimp
    10d8:	4e2a                	lw	t3,136(sp)
        if(!(message[i] == Dec_Message[i])){
    10da:	0100                	addi	s0,sp,128
    10dc:	5d090163          	beq	s2,a6,169e <product2+0x19a>
    10e0:	0000                	unimp
    10e2:	d000                	sw	s0,32(s0)
    10e4:	0009                	c.nop	2
    10e6:	2a00                	fld	fs0,16(a2)
    10e8:	0069                	c.nop	26
            resultkon[0] = 0xBABABABA;
    10ea:	6301                	0x6301
    10ec:	0c01                	addi	s8,s8,0
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09fe                	slli	s3,s3,0x1f
}
    10f4:	0000                	unimp
    10f6:	6a2a                	flw	fs4,136(sp)
    10f8:	0100                	addi	s0,sp,128
    10fa:	5d0f0163          	beq	t5,a6,16bc <product2+0x1b8>
    10fe:	0000                	unimp
    1100:	1a00                	addi	s0,sp,304
    1102:	000c                	0xc
    1104:	2600                	fld	fs0,8(a2)
    1106:	0526                	slli	a0,a0,0x9
    1108:	0000                	unimp
    110a:	6401                	0x6401
            resultkon[0] = 0xDEDEDEDE;
    110c:	0901                	addi	s2,s2,0
    for(i = 0; i < 32; ++i){
    110e:	0000137b          	0x137b
    1112:	0c38                	addi	a4,sp,536
    1114:	0000                	unimp
    1116:	9f26                	add	t5,t5,s1
    1118:	0005                	c.nop	1
    111a:	0100                	addi	s0,sp,128
    111c:	0165                	addi	sp,sp,25
    111e:	8e09                	sub	a2,a2,a0
    1120:	58000013          	li	zero,1408
    1124:	000c                	0xc
    1126:	2a00                	fld	fs0,16(a2)
    1128:	6972                	flw	fs2,28(sp)
    112a:	0100                	addi	s0,sp,128
    112c:	0166                	slli	sp,sp,0x19
    112e:	a109                	j	1530 <product2+0x2c>
    1130:	78000013          	li	zero,1920
    1134:	000c                	0xc
    1136:	2600                	fld	fs0,8(a2)
    1138:	00000443          	fmadd.s	fs0,ft0,ft0,ft0,rne
    113c:	6801                	0x6801
    113e:	0901                	addi	s2,s2,0
    1140:	13b4                	addi	a3,sp,488
    1142:	0000                	unimp
    1144:	0c98                	addi	a4,sp,592
    1146:	0000                	unimp
    1148:	742a                	flw	fs0,168(sp)
    114a:	0069                	c.nop	26
    114c:	6901                	0x6901
    114e:	0901                	addi	s2,s2,0
    1150:	000013c7          	fmsub.s	ft7,ft0,ft0,ft0,rtz
    1154:	0cce                	slli	s9,s9,0x13
    1156:	0000                	unimp
    1158:	5b26                	lw	s6,104(sp)
    115a:	0004                	0x4
    115c:	0100                	addi	s0,sp,128
    115e:	016a                	slli	sp,sp,0x1a
    1160:	da09                	beqz	a2,1072 <main+0x94>
    1162:	ee000013          	li	zero,-288
    1166:	000c                	0xc
    1168:	2600                	fld	fs0,8(a2)
    116a:	0249                	addi	tp,tp,18
    116c:	0000                	unimp
    116e:	6b01                	0x6b01
    1170:	0901                	addi	s2,s2,0
    1172:	13ed                	addi	t2,t2,-5
    1174:	0000                	unimp
    1176:	0d24                	addi	s1,sp,664
    1178:	0000                	unimp
    117a:	722a                	flw	ft4,168(sp)
    117c:	7365                	lui	t1,0xffff9
    117e:	0100                	addi	s0,sp,128
    1180:	016c                	addi	a1,sp,140
    1182:	630a                	flw	ft6,128(sp)
    1184:	7e00000b          	0x7e00000b
    1188:	000d                	c.nop	3
    118a:	2600                	fld	fs0,8(a2)
    118c:	0178                	addi	a4,sp,140
    118e:	0000                	unimp
    1190:	6d01                	0x6d01
    1192:	0a01                	addi	s4,s4,0
    1194:	00000b63          	beqz	zero,11aa <_endtext+0x82>
    1198:	0d9c                	addi	a5,sp,720
    119a:	0000                	unimp
    119c:	7d26                	flw	fs10,104(sp)
    119e:	0001                	nop
    11a0:	0100                	addi	s0,sp,128
    11a2:	016e                	slli	sp,sp,0x1b
    11a4:	630a                	flw	ft6,128(sp)
    11a6:	ba00000b          	0xba00000b
    11aa:	000d                	c.nop	3
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	0414                	addi	a3,sp,512
    11b0:	0000                	unimp
    11b2:	6f01                	0x6f01
    11b4:	0901                	addi	s2,s2,0
    11b6:	005d                	c.nop	23
    11b8:	0000                	unimp
    11ba:	0dd8                	addi	a4,sp,724
    11bc:	0000                	unimp
    11be:	00006933          	or	s2,zero,zero
    11c2:	0e00                	addi	s0,sp,784
    11c4:	000e                	c.slli	zero,0x3
    11c6:	3300                	fld	fs0,32(a4)
    11c8:	0069                	c.nop	26
    11ca:	0000                	unimp
    11cc:	0e3c                	addi	a5,sp,792
    11ce:	0000                	unimp
    11d0:	00006933          	or	s2,zero,zero
    11d4:	6a00                	flw	fs0,16(a2)
    11d6:	000e                	c.slli	zero,0x3
    11d8:	3300                	fld	fs0,32(a4)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	0e98                	addi	a4,sp,848
    11e0:	0000                	unimp
    11e2:	00006933          	or	s2,zero,zero
    11e6:	c600                	sw	s0,8(a2)
    11e8:	000e                	c.slli	zero,0x3
    11ea:	3300                	fld	fs0,32(a4)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	0ef4                	addi	a3,sp,860
    11f2:	0000                	unimp
    11f4:	00006933          	or	s2,zero,zero
    11f8:	2200                	fld	fs0,0(a2)
    11fa:	2b00000f          	0x2b00000f
    11fe:	0752                	slli	a4,a4,0x14
    1200:	0000                	unimp
    1202:	191a                	slli	s2,s2,0x26
    1204:	0000                	unimp
    1206:	121e                	slli	tp,tp,0x27
    1208:	0000                	unimp
    120a:	012c                	addi	a1,sp,136
    120c:	025a                	slli	tp,tp,0x16
    120e:	012c0083          	lb	ra,18(s8) # b012 <_stack_len+0x7012>
    1212:	01f3035b          	0x1f3035b
    1216:	2c5a                	fld	fs8,400(sp)
    1218:	5c01                	li	s8,-32
    121a:	7902                	flw	fs2,32(sp)
    121c:	0000                	unimp
    121e:	00075a2b          	0x75a2b
    1222:	1a00                	addi	s0,sp,304
    1224:	0019                	c.nop	6
    1226:	3e00                	fld	fs0,56(a2)
    1228:	0012                	c.slli	zero,0x4
    122a:	2c00                	fld	fs0,24(s0)
    122c:	5a01                	li	s4,-32
    122e:	8402                	jr	s0
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5b01                	li	s6,-32
    1234:	8a02                	jr	s4
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5c01                	li	s8,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	0000                	unimp
    123e:	0007b42b          	0x7b42b
    1242:	0000                	unimp
    1244:	0014                	0x14
    1246:	6a00                	flw	fs0,16(a2)
    1248:	0012                	c.slli	zero,0x4
    124a:	2c00                	fld	fs0,24(s0)
    124c:	5a01                	li	s4,-32
    124e:	8302                	jr	t1
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5b01                	li	s6,-32
    1254:	7902                	flw	fs2,32(sp)
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5c01                	li	s8,-32
    125a:	8402                	jr	s0
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5d01                	li	s10,-32
    1260:	7902                	flw	fs2,32(sp)
    1262:	2c00                	fld	fs0,24(s0)
    1264:	5e01                	li	t3,-32
    1266:	8202                	jr	tp
    1268:	0000                	unimp
    126a:	0007de2b          	0x7de2b
    126e:	0000                	unimp
    1270:	0014                	0x14
    1272:	9600                	0x9600
    1274:	0012                	c.slli	zero,0x4
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5a01                	li	s4,-32
    127a:	7202                	flw	ft4,32(sp)
    127c:	2c00                	fld	fs0,24(s0)
    127e:	5b01                	li	s6,-32
    1280:	7902                	flw	fs2,32(sp)
    1282:	2c00                	fld	fs0,24(s0)
    1284:	5c01                	li	s8,-32
    1286:	8402                	jr	s0
    1288:	2c00                	fld	fs0,24(s0)
    128a:	5d01                	li	s10,-32
    128c:	7902                	flw	fs2,32(sp)
    128e:	2c00                	fld	fs0,24(s0)
    1290:	5e01                	li	t3,-32
    1292:	8202                	jr	tp
    1294:	0000                	unimp
    1296:	0007e62b          	0x7e62b
    129a:	1a00                	addi	s0,sp,304
    129c:	0019                	c.nop	6
    129e:	b000                	fsd	fs0,32(s0)
    12a0:	0012                	c.slli	zero,0x4
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5a01                	li	s4,-32
    12a6:	8802                	jr	a6
    12a8:	2c00                	fld	fs0,24(s0)
    12aa:	5c01                	li	s8,-32
    12ac:	7902                	flw	fs2,32(sp)
    12ae:	0000                	unimp
    12b0:	0007fc2b          	0x7fc2b
    12b4:	9200                	0x9200
    12b6:	e1000017          	auipc	zero,0xe1000
    12ba:	0012                	c.slli	zero,0x4
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5a01                	li	s4,-32
    12c0:	8802                	jr	a6
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5b01                	li	s6,-32
    12c6:	7902                	flw	fs2,32(sp)
    12c8:	2c00                	fld	fs0,24(s0)
    12ca:	5c01                	li	s8,-32
    12cc:	8602                	jr	a2
    12ce:	2c00                	fld	fs0,24(s0)
    12d0:	5d01                	li	s10,-32
    12d2:	7902                	flw	fs2,32(sp)
    12d4:	2c00                	fld	fs0,24(s0)
    12d6:	5e01                	li	t3,-32
    12d8:	8202                	jr	tp
    12da:	2c00                	fld	fs0,24(s0)
    12dc:	5f01                	li	t5,-32
    12de:	3001                	jal	ade <generate_keys+0x14e>
    12e0:	2b00                	fld	fs0,16(a4)
    12e2:	0804                	addi	s1,sp,16
    12e4:	0000                	unimp
    12e6:	191a                	slli	s2,s2,0x26
    12e8:	0000                	unimp
    12ea:	000012fb          	0x12fb
    12ee:	012c                	addi	a1,sp,136
    12f0:	025a                	slli	tp,tp,0x16
    12f2:	0072                	c.slli	zero,0x1c
    12f4:	012c                	addi	a1,sp,136
    12f6:	025c                	addi	a5,sp,260
    12f8:	0079                	c.nop	30
    12fa:	2b00                	fld	fs0,16(a4)
    12fc:	0822                	slli	a6,a6,0x8
    12fe:	0000                	unimp
    1300:	191a                	slli	s2,s2,0x26
    1302:	0000                	unimp
    1304:	0000131b          	0x131b
    1308:	012c                	addi	a1,sp,136
    130a:	025a                	slli	tp,tp,0x16
    130c:	012c0083          	lb	ra,18(s8)
    1310:	0084025b          	0x84025b
    1314:	012c                	addi	a1,sp,136
    1316:	025c                	addi	a5,sp,260
    1318:	0079                	c.nop	30
    131a:	2b00                	fld	fs0,16(a4)
    131c:	082a                	slli	a6,a6,0xa
    131e:	0000                	unimp
    1320:	191a                	slli	s2,s2,0x26
    1322:	0000                	unimp
    1324:	0000133b          	0x133b
    1328:	012c                	addi	a1,sp,136
    132a:	025a                	slli	tp,tp,0x16
    132c:	0084                	addi	s1,sp,64
    132e:	012c                	addi	a1,sp,136
    1330:	0087025b          	0x87025b
    1334:	012c                	addi	a1,sp,136
    1336:	025c                	addi	a5,sp,260
    1338:	0079                	c.nop	30
    133a:	2b00                	fld	fs0,16(a4)
    133c:	0838                	addi	a4,sp,24
    133e:	0000                	unimp
    1340:	191a                	slli	s2,s2,0x26
    1342:	0000                	unimp
    1344:	135e                	slli	t1,t1,0x37
    1346:	0000                	unimp
    1348:	012c                	addi	a1,sp,136
    134a:	055a                	slli	a0,a0,0x16
    134c:	0019b403          	0x19b403
    1350:	2c00                	fld	fs0,24(s0)
    1352:	5b01                	li	s6,-32
    1354:	8602                	jr	a2
    1356:	2c00                	fld	fs0,24(s0)
    1358:	5c01                	li	s8,-32
    135a:	7902                	flw	fs2,32(sp)
    135c:	0000                	unimp
    135e:	402d                	c.li	zero,11
    1360:	0008                	0x8
    1362:	1a00                	addi	s0,sp,304
    1364:	0019                	c.nop	6
    1366:	2c00                	fld	fs0,24(s0)
    1368:	5a01                	li	s4,-32
    136a:	8602                	jr	a2
    136c:	2c00                	fld	fs0,24(s0)
    136e:	5b01                	li	s6,-32
    1370:	8902                	jr	s2
    1372:	2c00                	fld	fs0,24(s0)
    1374:	5c01                	li	s8,-32
    1376:	7902                	flw	fs2,32(sp)
    1378:	0000                	unimp
    137a:	0900                	addi	s0,sp,144
    137c:	005d                	c.nop	23
    137e:	0000                	unimp
    1380:	138e                	slli	t2,t2,0x23
    1382:	0000                	unimp
    1384:	6934                	flw	fa3,80(a0)
    1386:	0000                	unimp
    1388:	be00                	fsd	fs0,56(a2)
    138a:	0011                	c.nop	4
    138c:	0000                	unimp
    138e:	5d09                	li	s10,-30
    1390:	0000                	unimp
    1392:	a100                	fsd	fs0,0(a0)
    1394:	34000013          	li	zero,832
    1398:	0069                	c.nop	26
    139a:	0000                	unimp
    139c:	000011c7          	fmsub.s	ft3,ft0,ft0,ft0,rtz
    13a0:	0900                	addi	s0,sp,144
    13a2:	005d                	c.nop	23
    13a4:	0000                	unimp
    13a6:	13b4                	addi	a3,sp,488
    13a8:	0000                	unimp
    13aa:	6934                	flw	fa3,80(a0)
    13ac:	0000                	unimp
    13ae:	d000                	sw	s0,32(s0)
    13b0:	0011                	c.nop	4
    13b2:	0000                	unimp
    13b4:	5d09                	li	s10,-30
    13b6:	0000                	unimp
    13b8:	c700                	sw	s0,8(a4)
    13ba:	34000013          	li	zero,832
    13be:	0069                	c.nop	26
    13c0:	0000                	unimp
    13c2:	11d9                	addi	gp,gp,-10
    13c4:	0000                	unimp
    13c6:	0900                	addi	s0,sp,144
    13c8:	005d                	c.nop	23
    13ca:	0000                	unimp
    13cc:	13da                	slli	t2,t2,0x36
    13ce:	0000                	unimp
    13d0:	6934                	flw	fa3,80(a0)
    13d2:	0000                	unimp
    13d4:	e200                	fsw	fs0,0(a2)
    13d6:	0011                	c.nop	4
    13d8:	0000                	unimp
    13da:	5d09                	li	s10,-30
    13dc:	0000                	unimp
    13de:	ed00                	fsw	fs0,24(a0)
    13e0:	34000013          	li	zero,832
    13e4:	0069                	c.nop	26
    13e6:	0000                	unimp
    13e8:	000011eb          	0x11eb
    13ec:	0900                	addi	s0,sp,144
    13ee:	005d                	c.nop	23
    13f0:	0000                	unimp
    13f2:	1400                	addi	s0,sp,544
    13f4:	0000                	unimp
    13f6:	6934                	flw	fa3,80(a0)
    13f8:	0000                	unimp
    13fa:	f400                	fsw	fs0,40(s0)
    13fc:	0011                	c.nop	4
    13fe:	0000                	unimp
    1400:	a935                	j	183c <result+0xe0>
    1402:	0001                	nop
    1404:	0100                	addi	s0,sp,128
    1406:	06c8                	addi	a0,sp,836
    1408:	00000b63          	beqz	zero,141e <_bss_start+0x172>
    140c:	04a4                	addi	s1,sp,584
    140e:	0000                	unimp
    1410:	023e                	slli	tp,tp,0xf
    1412:	0000                	unimp
    1414:	9c01                	0x9c01
    1416:	15cd                	addi	a1,a1,-13
    1418:	0000                	unimp
    141a:	6e36                	flw	ft8,76(sp)
    141c:	6d75                	lui	s10,0x1d
    141e:	0100                	addi	s0,sp,128
    1420:	13c8                	addi	a0,sp,484
    1422:	00000b63          	beqz	zero,1438 <_bss_start+0x18c>
    1426:	0f50                	addi	a2,sp,916
    1428:	0000                	unimp
    142a:	0000fc37          	lui	s8,0xf
    142e:	0100                	addi	s0,sp,128
    1430:	1cc8                	addi	a0,sp,628
    1432:	005d                	c.nop	23
    1434:	0000                	unimp
    1436:	0f7c                	addi	a5,sp,924
    1438:	0000                	unimp
    143a:	00067737          	lui	a4,0x67
    143e:	0100                	addi	s0,sp,128
    1440:	28c8                	fld	fa0,144(s1)
    1442:	00000b63          	beqz	zero,1458 <_bss_start+0x1ac>
    1446:	0fcd                	addi	t6,t6,19
    1448:	0000                	unimp
    144a:	00069b37          	lui	s6,0x69
    144e:	0100                	addi	s0,sp,128
    1450:	33c8                	fld	fa0,160(a5)
    1452:	005d                	c.nop	23
    1454:	0000                	unimp
    1456:	1012                	c.slli	zero,0x24
    1458:	0000                	unimp
    145a:	6d36                	flw	fs10,76(sp)
    145c:	0100646f          	jal	s0,746c <_stack_len+0x346c>
    1460:	3fc8                	fld	fa0,184(a5)
    1462:	005d                	c.nop	23
    1464:	0000                	unimp
    1466:	1049                	c.nop	-14
    1468:	0000                	unimp
    146a:	7538                	flw	fa4,104(a0)
    146c:	0100                	addi	s0,sp,128
    146e:	09ca                	slli	s3,s3,0x12
    1470:	005d                	c.nop	23
    1472:	0000                	unimp
    1474:	1080                	addi	s0,sp,96
    1476:	0000                	unimp
    1478:	6438                	flw	fa4,72(s0)
    147a:	0100                	addi	s0,sp,128
    147c:	0bca                	slli	s7,s7,0x12
    147e:	005d                	c.nop	23
    1480:	0000                	unimp
    1482:	10a9                	addi	ra,ra,-22
    1484:	0000                	unimp
    1486:	6439                	lui	s0,0xe
    1488:	0032                	c.slli	zero,0xc
    148a:	ca01                	beqz	a2,149a <_bss_start+0x1ee>
    148c:	5d0d                	li	s10,-29
    148e:	0000                	unimp
    1490:	3800                	fld	fs0,48(s0)
    1492:	0069                	c.nop	26
    1494:	ca01                	beqz	a2,14a4 <_bss_start+0x1f8>
    1496:	5d10                	lw	a2,56(a0)
    1498:	0000                	unimp
    149a:	c700                	sw	s0,8(a4)
    149c:	0010                	0x10
    149e:	3900                	fld	fs0,48(a0)
    14a0:	5f62                	lw	t5,56(sp)
    14a2:	004e                	c.slli	zero,0x13
    14a4:	ca01                	beqz	a2,14b4 <_bss_start+0x208>
    14a6:	5d12                	lw	s10,36(sp)
    14a8:	0000                	unimp
    14aa:	3800                	fld	fs0,48(s0)
    14ac:	5f72                	lw	t5,60(sp)
    14ae:	0064                	addi	s1,sp,12
    14b0:	ca01                	beqz	a2,14c0 <_bss_start+0x214>
    14b2:	5d16                	lw	s10,100(sp)
    14b4:	0000                	unimp
    14b6:	a400                	fsd	fs0,8(s0)
    14b8:	0012                	c.slli	zero,0x4
    14ba:	3a00                	fld	fs0,48(a2)
    14bc:	000002a3          	sb	zero,5(zero) # 5 <__DYNAMIC+0x5>
    14c0:	cb01                	beqz	a4,14d0 <_bss_start+0x224>
    14c2:	630a                	flw	ft6,128(sp)
    14c4:	c200000b          	0xc200000b
    14c8:	0012                	c.slli	zero,0x4
    14ca:	3800                	fld	fs0,48(s0)
    14cc:	0076                	c.slli	zero,0x1d
    14ce:	cd01                	beqz	a0,14e6 <_bss_start+0x23a>
    14d0:	cd09                	beqz	a0,14ea <_bss_start+0x23e>
    14d2:	0015                	c.nop	5
    14d4:	da00                	sw	s0,48(a2)
    14d6:	0012                	c.slli	zero,0x4
    14d8:	3800                	fld	fs0,48(s0)
    14da:	0071                	c.nop	28
    14dc:	ce01                	beqz	a2,14f4 <_bss_start+0x248>
    14de:	e009                	bnez	s0,14e0 <_bss_start+0x234>
    14e0:	0015                	c.nop	5
    14e2:	fa00                	fsw	fs0,48(a2)
    14e4:	0012                	c.slli	zero,0x4
    14e6:	3a00                	fld	fs0,48(a2)
    14e8:	01a1                	addi	gp,gp,8
    14ea:	0000                	unimp
    14ec:	cf01                	beqz	a4,1504 <product2>
    14ee:	630a                	flw	ft6,128(sp)
    14f0:	4700000b          	0x4700000b
    14f4:	3a000013          	li	zero,928
    14f8:	0245                	addi	tp,tp,17
    14fa:	0000                	unimp
    14fc:	d001                	beqz	s0,13fc <_bss_start+0x150>
    14fe:	f309                	bnez	a4,1400 <_bss_start+0x154>
    1500:	0015                	c.nop	5
    1502:	6500                	flw	fs0,8(a0)
    1504:	3a000013          	li	zero,928
    1508:	00000243          	fmadd.s	ft4,ft0,ft0,ft0,rne
    150c:	d101                	beqz	a0,140c <_bss_start+0x160>
    150e:	0609                	addi	a2,a2,2
    1510:	0016                	c.slli	zero,0x5
    1512:	c200                	sw	s0,0(a2)
    1514:	33000013          	li	zero,816
    1518:	0069                	c.nop	26
    151a:	0000                	unimp
    151c:	1435                	addi	s0,s0,-19
    151e:	0000                	unimp
    1520:	00006933          	or	s2,zero,zero
    1524:	6300                	flw	fs0,0(a4)
    1526:	0014                	0x14
    1528:	3300                	fld	fs0,32(a4)
    152a:	0069                	c.nop	26
    152c:	0000                	unimp
    152e:	1491                	addi	s1,s1,-28
    1530:	0000                	unimp
    1532:	00006933          	or	s2,zero,zero
    1536:	bf00                	fsd	fs0,56(a4)
    1538:	0014                	0x14
    153a:	2b00                	fld	fs0,16(a4)
    153c:	0500                	addi	s0,sp,640
    153e:	0000                	unimp
    1540:	191a                	slli	s2,s2,0x26
    1542:	0000                	unimp
    1544:	155c                	addi	a5,sp,676
    1546:	0000                	unimp
    1548:	012c                	addi	a1,sp,136
    154a:	025a                	slli	tp,tp,0x16
    154c:	0088                	addi	a0,sp,64
    154e:	012c                	addi	a1,sp,136
    1550:	01f3035b          	0x1f3035b
    1554:	2c5a                	fld	fs8,400(sp)
    1556:	5c01                	li	s8,-32
    1558:	7902                	flw	fs2,32(sp)
    155a:	0000                	unimp
    155c:	0005142b          	0x5142b
    1560:	1a00                	addi	s0,sp,304
    1562:	0019                	c.nop	6
    1564:	7c00                	flw	fs0,56(s0)
    1566:	0015                	c.nop	5
    1568:	2c00                	fld	fs0,24(s0)
    156a:	5a01                	li	s4,-32
    156c:	7202                	flw	ft4,32(sp)
    156e:	2c00                	fld	fs0,24(s0)
    1570:	5b01                	li	s6,-32
    1572:	8b02                	jr	s6
    1574:	2c00                	fld	fs0,24(s0)
    1576:	5c01                	li	s8,-32
    1578:	8302                	jr	t1
    157a:	0000                	unimp
    157c:	0005b82b          	0x5b82b
    1580:	1a00                	addi	s0,sp,304
    1582:	0019                	c.nop	6
    1584:	9f00                	0x9f00
    1586:	0015                	c.nop	5
    1588:	2c00                	fld	fs0,24(s0)
    158a:	5a01                	li	s4,-32
    158c:	0305                	addi	t1,t1,1
    158e:	175c                	addi	a5,sp,932
    1590:	0000                	unimp
    1592:	012c                	addi	a1,sp,136
    1594:	0086025b          	0x86025b
    1598:	012c                	addi	a1,sp,136
    159a:	025c                	addi	a5,sp,260
    159c:	0079                	c.nop	30
    159e:	2d00                	fld	fs0,24(a0)
    15a0:	0616                	slli	a2,a2,0x5
    15a2:	0000                	unimp
    15a4:	1792                	slli	a5,a5,0x24
    15a6:	0000                	unimp
    15a8:	012c                	addi	a1,sp,136
    15aa:	025a                	slli	tp,tp,0x16
    15ac:	0072                	c.slli	zero,0x1c
    15ae:	012c                	addi	a1,sp,136
    15b0:	0083025b          	0x83025b
    15b4:	012c                	addi	a1,sp,136
    15b6:	025c                	addi	a5,sp,260
    15b8:	008a                	slli	ra,ra,0x2
    15ba:	012c                	addi	a1,sp,136
    15bc:	025d                	addi	tp,tp,23
    15be:	012c0083          	lb	ra,18(s8) # f012 <_stack+0x1012>
    15c2:	025e                	slli	tp,tp,0x17
    15c4:	0082                	c.slli64	ra
    15c6:	012c                	addi	a1,sp,136
    15c8:	015f 0030 0900      	0x9000030015f
    15ce:	005d                	c.nop	23
    15d0:	0000                	unimp
    15d2:	15e0                	addi	s0,sp,748
    15d4:	0000                	unimp
    15d6:	6934                	flw	fa3,80(a0)
    15d8:	0000                	unimp
    15da:	1700                	addi	s0,sp,928
    15dc:	0015                	c.nop	5
    15de:	0000                	unimp
    15e0:	5d09                	li	s10,-30
    15e2:	0000                	unimp
    15e4:	f300                	fsw	fs0,32(a4)
    15e6:	0015                	c.nop	5
    15e8:	3400                	fld	fs0,40(s0)
    15ea:	0069                	c.nop	26
    15ec:	0000                	unimp
    15ee:	1520                	addi	s0,sp,680
    15f0:	0000                	unimp
    15f2:	0900                	addi	s0,sp,144
    15f4:	005d                	c.nop	23
    15f6:	0000                	unimp
    15f8:	1606                	slli	a2,a2,0x21
    15fa:	0000                	unimp
    15fc:	6934                	flw	fa3,80(a0)
    15fe:	0000                	unimp
    1600:	2900                	fld	fs0,16(a0)
    1602:	0015                	c.nop	5
    1604:	0000                	unimp
    1606:	5d09                	li	s10,-30
    1608:	0000                	unimp
    160a:	1900                	addi	s0,sp,176
    160c:	0016                	c.slli	zero,0x5
    160e:	3400                	fld	fs0,40(s0)
    1610:	0069                	c.nop	26
    1612:	0000                	unimp
    1614:	1532                	slli	a0,a0,0x2c
    1616:	0000                	unimp
    1618:	3500                	fld	fs0,40(a0)
    161a:	002a                	c.slli	zero,0xa
    161c:	0000                	unimp
    161e:	8f01                	sub	a4,a4,s0
    1620:	6306                	flw	ft6,64(sp)
    1622:	3400000b          	0x3400000b
    1626:	70000003          	lb	zero,1792(zero) # 700 <ext_euclid+0x1e>
    162a:	0001                	nop
    162c:	0100                	addi	s0,sp,128
    162e:	509c                	lw	a5,32(s1)
    1630:	36000017          	auipc	zero,0x36000
    1634:	0061                	c.nop	24
    1636:	8f01                	sub	a4,a4,s0
    1638:	6315                	lui	t1,0x5
    163a:	1400000b          	0x1400000b
    163e:	0015                	c.nop	5
    1640:	3700                	fld	fs0,40(a4)
    1642:	06ea                	slli	a3,a3,0x1a
    1644:	0000                	unimp
    1646:	8f01                	sub	a4,a4,s0
    1648:	5d1c                	lw	a5,56(a0)
    164a:	0000                	unimp
    164c:	5900                	lw	s0,48(a0)
    164e:	0015                	c.nop	5
    1650:	3600                	fld	fs0,40(a2)
    1652:	0062                	c.slli	zero,0x18
    1654:	8f01                	sub	a4,a4,s0
    1656:	6329                	lui	t1,0xa
    1658:	aa00000b          	0xaa00000b
    165c:	0015                	c.nop	5
    165e:	3700                	fld	fs0,40(a4)
    1660:	06f1                	addi	a3,a3,28
    1662:	0000                	unimp
    1664:	8f01                	sub	a4,a4,s0
    1666:	5d30                	lw	a2,120(a0)
    1668:	0000                	unimp
    166a:	fa00                	fsw	fs0,48(a2)
    166c:	0015                	c.nop	5
    166e:	3700                	fld	fs0,40(a4)
    1670:	0516                	slli	a0,a0,0x5
    1672:	0000                	unimp
    1674:	8f01                	sub	a4,a4,s0
    1676:	5d3c                	lw	a5,120(a0)
    1678:	0000                	unimp
    167a:	2600                	fld	fs0,8(a2)
    167c:	0016                	c.slli	zero,0x5
    167e:	3a00                	fld	fs0,48(a2)
    1680:	00000633          	add	a2,zero,zero
    1684:	9101                	srli	a0,a0,0x20
    1686:	5009                	c.li	zero,-30
    1688:	52000017          	auipc	zero,0x52000
    168c:	0016                	c.slli	zero,0x5
    168e:	3800                	fld	fs0,48(s0)
    1690:	0069                	c.nop	26
    1692:	9201                	srli	a2,a2,0x20
    1694:	5d09                	li	s10,-30
    1696:	0000                	unimp
    1698:	9600                	0x9600
    169a:	0016                	c.slli	zero,0x5
    169c:	3800                	fld	fs0,48(s0)
    169e:	006a                	c.slli	zero,0x1a
    16a0:	9201                	srli	a2,a2,0x20
    16a2:	00005d0b          	0x5d0b
    16a6:	d600                	sw	s0,40(a2)
    16a8:	0016                	c.slli	zero,0x5
    16aa:	3800                	fld	fs0,48(s0)
    16ac:	9201006b          	0x9201006b
    16b0:	5d0d                	li	s10,-29
    16b2:	0000                	unimp
    16b4:	2d00                	fld	fs0,24(a0)
    16b6:	22000017          	auipc	zero,0x22000
    16ba:	00000293          	li	t0,0
    16be:	9301                	srli	a4,a4,0x20
    16c0:	630a                	flw	ft6,128(sp)
    16c2:	0600000b          	0x600000b
    16c6:	00150403          	lb	s0,1(a0)
    16ca:	9f00                	0x9f00
    16cc:	0c3a                	slli	s8,s8,0xe
    16ce:	0000                	unimp
    16d0:	0100                	addi	s0,sp,128
    16d2:	0994                	addi	a3,sp,208
    16d4:	176c                	addi	a1,sp,940
    16d6:	0000                	unimp
    16d8:	0000177b          	0x177b
    16dc:	8d3a                	mv	s10,a4
    16de:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16e2:	0995                	addi	s3,s3,5
    16e4:	177f                	0x177f
    16e6:	0000                	unimp
    16e8:	0000178f          	0x178f
    16ec:	00006933          	or	s2,zero,zero
    16f0:	dc00                	sw	s0,56(s0)
    16f2:	33000017          	auipc	zero,0x33000
    16f6:	0069                	c.nop	26
    16f8:	0000                	unimp
    16fa:	1824                	addi	s1,sp,56
    16fc:	0000                	unimp
    16fe:	00006933          	or	s2,zero,zero
    1702:	5c00                	lw	s0,56(s0)
    1704:	0018                	0x18
    1706:	3300                	fld	fs0,32(a4)
    1708:	0069                	c.nop	26
    170a:	0000                	unimp
    170c:	187f                	0x187f
    170e:	0000                	unimp
    1710:	0003b62b          	0x3b62b
    1714:	1a00                	addi	s0,sp,304
    1716:	0019                	c.nop	6
    1718:	3100                	fld	fs0,32(a0)
    171a:	2c000017          	auipc	zero,0x2c000
    171e:	5a01                	li	s4,-32
    1720:	8a02                	jr	s4
    1722:	2c00                	fld	fs0,24(s0)
    1724:	5b01                	li	s6,-32
    1726:	5a01f303          	0x5a01f303
    172a:	012c                	addi	a1,sp,136
    172c:	025c                	addi	a5,sp,260
    172e:	0188                	addi	a0,sp,192
    1730:	2d00                	fld	fs0,24(a0)
    1732:	03c2                	slli	t2,t2,0x10
    1734:	0000                	unimp
    1736:	191a                	slli	s2,s2,0x26
    1738:	0000                	unimp
    173a:	012c                	addi	a1,sp,136
    173c:	025a                	slli	tp,tp,0x16
    173e:	0072                	c.slli	zero,0x1c
    1740:	012c                	addi	a1,sp,136
    1742:	bc78045b          	0xbc78045b
    1746:	067f                	0x67f
    1748:	012c                	addi	a1,sp,136
    174a:	025c                	addi	a5,sp,260
    174c:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    1750:	5d09                	li	s10,-30
    1752:	0000                	unimp
    1754:	6c00                	flw	fs0,24(s0)
    1756:	34000017          	auipc	zero,0x34000
    175a:	0069                	c.nop	26
    175c:	0000                	unimp
    175e:	16ec                	addi	a1,sp,876
    1760:	0000                	unimp
    1762:	6934                	flw	fa3,80(a0)
    1764:	0000                	unimp
    1766:	f500                	fsw	fs0,40(a0)
    1768:	0016                	c.slli	zero,0x5
    176a:	0000                	unimp
    176c:	5d09                	li	s10,-30
    176e:	0000                	unimp
    1770:	7f00                	flw	fs0,56(a4)
    1772:	34000017          	auipc	zero,0x34000
    1776:	0069                	c.nop	26
    1778:	0000                	unimp
    177a:	16fe                	slli	a3,a3,0x3f
    177c:	0000                	unimp
    177e:	0900                	addi	s0,sp,144
    1780:	005d                	c.nop	23
    1782:	0000                	unimp
    1784:	1792                	slli	a5,a5,0x24
    1786:	0000                	unimp
    1788:	6934                	flw	fa3,80(a0)
    178a:	0000                	unimp
    178c:	0700                	addi	s0,sp,896
    178e:	00000017          	auipc	zero,0x0
    1792:	0335                	addi	t1,t1,13
    1794:	0001                	nop
    1796:	0100                	addi	s0,sp,128
    1798:	0b63063f 01280000 	0x12800000b63063f
    17a0:	0000                	unimp
    17a2:	020c                	addi	a1,sp,256
    17a4:	0000                	unimp
    17a6:	9c01                	0x9c01
    17a8:	18d8                	addi	a4,sp,116
    17aa:	0000                	unimp
    17ac:	6136                	flw	ft2,76(sp)
    17ae:	0100                	addi	s0,sp,128
    17b0:	0b63143f 18c70000 	0x18c700000b63143f
    17b8:	0000                	unimp
    17ba:	0006ea37          	lui	s4,0x6e
    17be:	0100                	addi	s0,sp,128
    17c0:	005d1b3f 190c0000 	0x190c0000005d1b3f
    17c8:	0000                	unimp
    17ca:	6236                	flw	ft4,76(sp)
    17cc:	0100                	addi	s0,sp,128
    17ce:	0b63283f 195c0000 	0x195c00000b63283f
    17d6:	0000                	unimp
    17d8:	0006f137          	lui	sp,0x6f
    17dc:	0100                	addi	s0,sp,128
    17de:	005d2f3f 19c50000 	0x19c50000005d2f3f
    17e6:	0000                	unimp
    17e8:	6d36                	flw	fs10,76(sp)
    17ea:	0100646f          	jal	s0,77fa <_stack_len+0x37fa>
    17ee:	005d3b3f 19fc0000 	0x19fc0000005d3b3f
    17f6:	0000                	unimp
    17f8:	00051637          	lui	a2,0x51
    17fc:	0100                	addi	s0,sp,128
    17fe:	005d443f 1a490000 	0x1a490000005d443f
    1806:	0000                	unimp
    1808:	333a                	fld	ft6,424(sp)
    180a:	0006                	c.slli	zero,0x1
    180c:	0100                	addi	s0,sp,128
    180e:	0942                	slli	s2,s2,0x10
    1810:	18d8                	addi	a4,sp,116
    1812:	0000                	unimp
    1814:	1a76                	slli	s4,s4,0x3d
    1816:	0000                	unimp
    1818:	6938                	flw	fa4,80(a0)
    181a:	0100                	addi	s0,sp,128
    181c:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
    1820:	0000                	unimp
    1822:	1aba                	slli	s5,s5,0x2e
    1824:	0000                	unimp
    1826:	6a38                	flw	fa4,80(a2)
    1828:	0100                	addi	s0,sp,128
    182a:	005d0b43          	fmadd.s	fs6,fs10,ft5,ft0,rne
    182e:	0000                	unimp
    1830:	1b86                	slli	s7,s7,0x21
    1832:	0000                	unimp
    1834:	6b38                	flw	fa4,80(a4)
    1836:	0100                	addi	s0,sp,128
    1838:	005d0d43          	fmadd.s	fs10,fs10,ft5,ft0,rne
    183c:	0000                	unimp
    183e:	1c21                	addi	s8,s8,-24
    1840:	0000                	unimp
    1842:	833a                	mv	t1,a4
    1844:	0002                	c.slli64	zero
    1846:	0100                	addi	s0,sp,128
    1848:	0a44                	addi	s1,sp,276
    184a:	00000b63          	beqz	zero,1860 <result+0x104>
    184e:	00001c6f          	jal	s8,284e <_bss_end+0x812>
    1852:	0c3a                	slli	s8,s8,0xe
    1854:	0000                	unimp
    1856:	0100                	addi	s0,sp,128
    1858:	0945                	addi	s2,s2,17
    185a:	18f4                	addi	a3,sp,124
    185c:	0000                	unimp
    185e:	00001c87          	0x1c87
    1862:	8d3a                	mv	s10,a4
    1864:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1868:	0946                	slli	s2,s2,0x11
    186a:	00001907          	0x1907
    186e:	00001cbf 00006933 	0x693300001cbf
    1876:	2f00                	fld	fs0,24(a4)
    1878:	001d                	c.nop	7
    187a:	3300                	fld	fs0,32(a4)
    187c:	0069                	c.nop	26
    187e:	0000                	unimp
    1880:	1d84                	addi	s1,sp,752
    1882:	0000                	unimp
    1884:	00006933          	or	s2,zero,zero
    1888:	b700                	fsd	fs0,40(a4)
    188a:	001d                	c.nop	7
    188c:	3300                	fld	fs0,32(a4)
    188e:	0069                	c.nop	26
    1890:	0000                	unimp
    1892:	1de6                	slli	s11,s11,0x39
    1894:	0000                	unimp
    1896:	0001ba2b          	0x1ba2b
    189a:	1a00                	addi	s0,sp,304
    189c:	0019                	c.nop	6
    189e:	b900                	fsd	fs0,48(a0)
    18a0:	0018                	0x18
    18a2:	2c00                	fld	fs0,24(s0)
    18a4:	5a01                	li	s4,-32
    18a6:	8602                	jr	a2
    18a8:	2c00                	fld	fs0,24(s0)
    18aa:	5b01                	li	s6,-32
    18ac:	5a01f303          	0x5a01f303
    18b0:	012c                	addi	a1,sp,136
    18b2:	045c                	addi	a5,sp,516
    18b4:	b478                	fsd	fa4,232(s0)
    18b6:	067f                	0x67f
    18b8:	2d00                	fld	fs0,24(a0)
    18ba:	01d2                	slli	gp,gp,0x14
    18bc:	0000                	unimp
    18be:	191a                	slli	s2,s2,0x26
    18c0:	0000                	unimp
    18c2:	012c                	addi	a1,sp,136
    18c4:	025a                	slli	tp,tp,0x16
    18c6:	0072                	c.slli	zero,0x1c
    18c8:	012c                	addi	a1,sp,136
    18ca:	b078045b          	0xb078045b
    18ce:	067f                	0x67f
    18d0:	012c                	addi	a1,sp,136
    18d2:	025c                	addi	a5,sp,260
    18d4:	0082                	c.slli64	ra
    18d6:	0000                	unimp
    18d8:	5d09                	li	s10,-30
    18da:	0000                	unimp
    18dc:	f400                	fsw	fs0,40(s0)
    18de:	0018                	0x18
    18e0:	3400                	fld	fs0,40(s0)
    18e2:	0069                	c.nop	26
    18e4:	0000                	unimp
    18e6:	1872                	slli	a6,a6,0x3c
    18e8:	0000                	unimp
    18ea:	6934                	flw	fa3,80(a0)
    18ec:	0000                	unimp
    18ee:	7b00                	flw	fs0,48(a4)
    18f0:	0018                	0x18
    18f2:	0000                	unimp
    18f4:	5d09                	li	s10,-30
    18f6:	0000                	unimp
    18f8:	0700                	addi	s0,sp,896
    18fa:	0019                	c.nop	6
    18fc:	3400                	fld	fs0,40(s0)
    18fe:	0069                	c.nop	26
    1900:	0000                	unimp
    1902:	1884                	addi	s1,sp,112
    1904:	0000                	unimp
    1906:	0900                	addi	s0,sp,144
    1908:	005d                	c.nop	23
    190a:	0000                	unimp
    190c:	191a                	slli	s2,s2,0x26
    190e:	0000                	unimp
    1910:	6934                	flw	fa3,80(a0)
    1912:	0000                	unimp
    1914:	8d00                	0x8d00
    1916:	0018                	0x18
    1918:	0000                	unimp
    191a:	0003b93b          	0x3b93b
    191e:	0100                	addi	s0,sp,128
    1920:	0622                	slli	a2,a2,0x8
    1922:	0092                	slli	ra,ra,0x4
    1924:	0000                	unimp
    1926:	0096                	slli	ra,ra,0x5
    1928:	0000                	unimp
    192a:	9c01                	0x9c01
    192c:	19dc                	addi	a5,sp,244
    192e:	0000                	unimp
    1930:	613c                	flw	fa5,64(a0)
    1932:	0031                	c.nop	12
    1934:	2201                	jal	1a34 <ti_2+0x80>
    1936:	6315                	lui	t1,0x5
    1938:	0100000b          	0x100000b
    193c:	365a                	fld	fa2,432(sp)
    193e:	3261                	jal	12c6 <_bss_start+0x1a>
    1940:	0100                	addi	s0,sp,128
    1942:	1d22                	slli	s10,s10,0x28
    1944:	00000b63          	beqz	zero,195a <result+0x1fe>
    1948:	00001e3b          	0x1e3b
    194c:	00055337          	lui	t1,0x55
    1950:	0100                	addi	s0,sp,128
    1952:	2422                	fld	fs0,8(sp)
    1954:	005d                	c.nop	23
    1956:	0000                	unimp
    1958:	00001e67          	0x1e67
    195c:	6938                	flw	fa4,80(a0)
    195e:	0100                	addi	s0,sp,128
    1960:	005d0523          	sb	t0,10(s10) # 1d00a <_stack_start+0xd00a>
    1964:	0000                	unimp
    1966:	1ec5                	addi	t4,t4,-15
    1968:	0000                	unimp
    196a:	dc3d                	beqz	s0,18e8 <result+0x18c>
    196c:	0019                	c.nop	6
    196e:	f600                	fsw	fs0,40(a2)
    1970:	0000                	unimp
    1972:	0a00                	addi	s0,sp,272
    1974:	0000                	unimp
    1976:	0100                	addi	s0,sp,128
    1978:	1128                	addi	a0,sp,168
    197a:	1991                	addi	s3,s3,-28
    197c:	0000                	unimp
    197e:	f43e                	fsw	fa5,40(sp)
    1980:	0019                	c.nop	6
    1982:	1d00                	addi	s0,sp,688
    1984:	001f 3e00 19e9      	0x19e93e00001f
    198a:	0000                	unimp
    198c:	1f40                	addi	s0,sp,948
    198e:	0000                	unimp
    1990:	3d00                	fld	fs0,56(a0)
    1992:	19dc                	addi	a5,sp,244
    1994:	0000                	unimp
    1996:	0108                	addi	a0,sp,128
    1998:	0000                	unimp
    199a:	000a                	c.slli	zero,0x2
    199c:	0000                	unimp
    199e:	2d01                	jal	1fae <random_keys+0x46a>
    19a0:	b811                	j	11b4 <_endtext+0x8c>
    19a2:	0019                	c.nop	6
    19a4:	3e00                	fld	fs0,56(a2)
    19a6:	19f4                	addi	a3,sp,252
    19a8:	0000                	unimp
    19aa:	00001f63          	bnez	zero,19c8 <ti_2+0x14>
    19ae:	e93e                	fsw	fa5,144(sp)
    19b0:	0019                	c.nop	6
    19b2:	8600                	0x8600
    19b4:	001f 0000 dc3f      	0xdc3f0000001f
    19ba:	0019                	c.nop	6
    19bc:	1a00                	addi	s0,sp,304
    19be:	0001                	nop
    19c0:	0a00                	addi	s0,sp,272
    19c2:	0000                	unimp
    19c4:	0100                	addi	s0,sp,128
    19c6:	f43e1133          	0xf43e1133
    19ca:	0019                	c.nop	6
    19cc:	a900                	fsd	fs0,16(a0)
    19ce:	001f 3e00 19e9      	0x19e93e00001f
    19d4:	0000                	unimp
    19d6:	1fcc                	addi	a1,sp,1012
    19d8:	0000                	unimp
    19da:	0000                	unimp
    19dc:	4d40                	lw	s0,28(a0)
    19de:	0006                	c.slli	zero,0x1
    19e0:	0100                	addi	s0,sp,128
    19e2:	0610                	addi	a2,sp,768
    19e4:	0001                	nop
    19e6:	001a                	c.slli	zero,0x6
    19e8:	4100                	lw	s0,0(a0)
    19ea:	3161                	jal	1672 <product2+0x16e>
    19ec:	0100                	addi	s0,sp,128
    19ee:	1e10                	addi	a2,sp,816
    19f0:	1a00                	addi	s0,sp,304
    19f2:	0000                	unimp
    19f4:	6141                	addi	sp,sp,16
    19f6:	0032                	c.slli	zero,0xc
    19f8:	1001                	c.nop	-32
    19fa:	0030                	addi	a2,sp,8
    19fc:	001a                	c.slli	zero,0x6
    19fe:	0000                	unimp
    1a00:	0410                	addi	a2,sp,512
    1a02:	0069                	c.nop	26
    1a04:	0000                	unimp
    1a06:	dc42                	sw	a6,56(sp)
    1a08:	0019                	c.nop	6
    1a0a:	8c00                	0x8c00
    1a0c:	0000                	unimp
    1a0e:	0600                	addi	s0,sp,768
    1a10:	0000                	unimp
    1a12:	0100                	addi	s0,sp,128
    1a14:	2a9c                	fld	fa5,16(a3)
    1a16:	001a                	c.slli	zero,0x6
    1a18:	3e00                	fld	fs0,56(a2)
    1a1a:	19e9                	addi	s3,s3,-6
    1a1c:	0000                	unimp
    1a1e:	00001fef          	jal	t6,2a1e <_bss_end+0x9e2>
    1a22:	0019f443          	fmadd.s	fs0,fs3,ft1,ft0
    1a26:	0100                	addi	s0,sp,128
    1a28:	4c44005b          	0x4c44005b
    1a2c:	42000003          	lb	zero,1056(zero) # 420 <polymult2+0xec>
    1a30:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1a34:	4400                	lw	s0,8(s0)
    1a36:	0064                	addi	s1,sp,12
    1a38:	0000                	unimp
    1a3a:	005a                	c.slli	zero,0x16
    1a3c:	0000                	unimp
    1a3e:	1e000007          	0x1e000007
    1a42:	0000                	unimp
    1a44:	0200                	addi	s0,sp,256
    1a46:	0500                	addi	s0,sp,640
    1a48:	0004                	0x4
    1a4a:	0400                	addi	s0,sp,512
    1a4c:	a101                	j	1e4c <random_keys+0x308>
    1a4e:	0028                	addi	a0,sp,8
    1a50:	1800                	addi	s0,sp,48
    1a52:	0000                	unimp
    1a54:	f800                	fsw	fs0,48(s0)
    1a56:	0006                	c.slli	zero,0x1
    1a58:	ff00                	fsw	fs0,56(a4)
    1a5a:	0006                	c.slli	zero,0x1
    1a5c:	2900                	fld	fs0,16(a0)
    1a5e:	01000007          	0x1000007
    1a62:	80              	Address 0x0000000000001a62 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x15e>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 6e0b3 <_stack_start+0x5e0b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 55001 <_stack_start+0x45001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    switch(length%3) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
  a0:	0b00                	addi	s0,sp,400
  a2:	0e00000b          	0xe00000b
            for (i = 0; i < (length / 3); i++) {
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	1301                	addi	t1,t1,-32
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
            a1[length-1] = a2[length-1];
  c4:	1000000b          	0x1000000b
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
            a1[length-1] = a2[length-1];
  e4:	0b3a0e03          	lb	t3,179(s4)
            a1[length-2] = a2[length-2];
  e8:	0b390b3b          	0xb390b3b
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
} //end of function
  f0:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	27001513          	0x27001513
    asm volatile(
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
            for (i = 0; i < (length / 3); i++) {
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
    asm volatile(
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	03011317          	auipc	t1,0x3011
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0b0e                	slli	s6,s6,0x3
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    asm volatile(
 11a:	39053b0b          	0x39053b0b
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
    int line[size_b][size_a + size_b];
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
    int pola[size_a];
 160:	0013010b          	0x13010b
    int line[size_b][size_a + size_b];
 164:	1c00                	addi	s0,sp,560
    int pola[size_a];
 166:	0b0b0117          	auipc	sp,0xb0b0
    int line[size_b][size_a + size_b];
 16a:	0b3a                	slli	s6,s6,0xe
    int pola[size_a];
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
    int polb[size_b];
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 17a:	39053b0b          	0x39053b0b
    int polb[size_b];
 17e:	0013490b          	0x13490b
            line[i][j] = 0;
 182:	1e00                	addi	s0,sp,816
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	0e030013          	addi	zero,t1,224
    int pola[size_a];
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	151f 2701 0119      	0x1192701151f
    int polb[size_b];
 192:	20000013          	li	zero,512
            line[i][j] = 0;
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 19c:	0b39053b          	0xb39053b
            product[j] = 0;
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
    array_equ(pola,a,size_a);
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
 1b2:	3f13490b          	0x3f13490b
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
    for (i = 0; i < size_a; ++i){
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
    array_equ(polb,b,size_b);
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polymult2+0x14e>
 1d0:	00052f13          	slti	t5,a0,0
    for (i = 0; i < size_b; ++i){
 1d4:	2400                	fld	fs0,8(s0)
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    if(star_mult == 1){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
 1ea:	3f01                	jal	fa <array_equ+0x68>
 1ec:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f4:	1113490b          	0x1113490b
            product[j] = 0;
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
            line[i][j] = 0;
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
            product[j] = 0;
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
        for(j = 0; j < size_a + size_b -1; ++j){
 216:	0034                	addi	a3,sp,8
            pola[i] = pola[i] + mod;
 218:	0b3a0803          	lb	a6,179(s4)
        while (pola[i] < 0){
 21c:	0b39053b          	0xb39053b
 220:	1349                	addi	t1,t1,-14
        pola[i] = pola[i] % mod;
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
    for (i = 0; i < size_a; ++i){
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
        pola[i] = pola[i] % mod;
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
            polb[i] = polb[i] + mod;
 230:	0213490b          	0x213490b
        while (polb[i] < 0){
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
        polb[i] = polb[i] % mod;
 23a:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 23e:	0b39053b          	0xb39053b
        polb[i] = polb[i] % mod;
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 246:	342a                	fld	fs0,168(sp)
    if(star_mult == 1){
 248:	0300                	addi	s0,sp,384
        for (j = size_b -1; j >= 0; j = j-1){
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
    for (i = 0; i < size_b; ++i){
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
 258:	8289                	srli	a3,a3,0x2
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
    for(j = 0; j < size_a + size_b -1; ++j){
 25e:	1331                	addi	t1,t1,-20
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
}
 26a:	9118                	0x9118
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
                line[size_b-1-j][k] = pola[k]*polb[j];
 294:	12011113          	0x12011113
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
 2a2:	0530                	addi	a2,sp,648
            for (k = size_a-1; k >= 0; k = k-1 ){
 2a4:	0300                	addi	s0,sp,384
                line[size_b-1-j][k] = pola[k]*polb[j];
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ac:	0213490b          	0x213490b
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	31000017          	auipc	zero,0x31000
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ba:	0b39053b          	0xb39053b
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
        for (j = size_b -1; j >= 0; j = j-1){
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 2e0:	2134                	fld	fa3,64(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
            line[i][j] = line[i][j] % mod;
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for (i = 0; i < size_b; ++i){
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
        for(j = 0; j < size_a + size_b -1; ++j){
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
            product[j] += line[i][j];
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
        for(i = 0; i < size_b; ++i){
 308:	0005                	c.nop	1
            product[j] += line[i][j];
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
        for(i = 0; i < size_b; ++i){
 316:	0000                	unimp
 318:	03000537          	lui	a0,0x3000
    for(j = 0; j < size_a + size_b -1; ++j){
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
        for(i = 0; i < size_b; ++i){
 322:	0213490b          	0x213490b
    for(j = 0; j < size_a + size_b -1; ++j){
 326:	38000017          	auipc	zero,0x38000
        product[j] = product[j] % mod;
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 334:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
    int line[size_b][size_a + size_b];
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
    int line[size_b][size_a + size_b];
 362:	390b3b0b          	0x390b3b0b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 366:	1119270b          	0x1119270b
    int line[size_b][size_a + size_b];
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
    int pola[size_a];
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
    int line[size_b][size_a + size_b];
 376:	053c                	addi	a5,sp,648
    int pola[size_a];
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
    int polb[size_b];
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
    int line[size_b][size_a + size_b];
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 390:	0b58                	addi	a4,sp,404
    int pola[size_a];
 392:	0b59                	addi	s6,s6,22
 394:	13010b57          	0x13010b57
    for (i = 0; i < size_b; ++i){
 398:	0000                	unimp
 39a:	053e                	slli	a0,a0,0xf
 39c:	3100                	fld	fs0,32(a0)
            product2[j] = 0;
 39e:	00170213          	addi	tp,a4,1 # 67001 <_stack_start+0x57001>
 3a2:	3f00                	fld	fs0,56(a4)
 3a4:	011d                	addi	sp,sp,7
    for (i = 0; i < size_b; ++i){
 3a6:	1331                	addi	t1,t1,-20
 3a8:	0111                	addi	sp,sp,4
    array_equ(pola,a,size_a);
 3aa:	0612                	slli	a2,a2,0x4
 3ac:	0b58                	addi	a4,sp,404
 3ae:	0b59                	addi	s6,s6,22
 3b0:	00000b57          	0xb57
 3b4:	2e40                	fld	fs0,152(a2)
    array_equ(polb,b,size_b);
 3b6:	3f01                	jal	2c6 <polymult+0x19e>
 3b8:	0319                	addi	t1,t1,6
 3ba:	3a0e                	fld	fs4,224(sp)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	2019270b          	0x2019270b
    if(star_mult == 1){
 3c4:	0013010b          	0x13010b
 3c8:	4100                	lw	s0,0(a0)
 3ca:	0005                	c.nop	1
 3cc:	0b3a0803          	lb	a6,179(s4)
 3d0:	0b390b3b          	0xb390b3b
        for (j = size_b -1; j >= 0; j = j-1){
 3d4:	1349                	addi	t1,t1,-14
 3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	2e42                	fld	ft8,16(sp)
 3da:	3101                	jal	ffffffda <_stack_start+0xfffeffda>
            product2[j] = 0;
 3dc:	12011113          	0x12011113
 3e0:	4006                	0x4006
            line[i][j] = 0;
 3e2:	9718                	0x9718
 3e4:	1942                	slli	s2,s2,0x30
            product2[j] = 0;
 3e6:	1301                	addi	t1,t1,-32
 3e8:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 3ea:	31000543          	fmadd.s	fa0,ft0,fa6,ft6,rne
 3ee:	00180213          	addi	tp,a6,1
    for (i = 0; i < size_b; ++i){
 3f2:	4400                	lw	s0,8(s0)
 3f4:	002e                	c.slli	zero,0xb
 3f6:	193c193f 0e030e6e 	0xe030e6e193c193f
                line[size_b-1-j][k] = pola[k]*polb[j];
 3fe:	0b3a                	slli	s6,s6,0xe
 400:	00000b3b          	0xb3b
 404:	0100                	addi	s0,sp,128
 406:	0011                	c.nop	4
 408:	0610                	addi	a2,sp,768
 40a:	0655                	addi	a2,a2,21
 40c:	0e1b0e03          	lb	t3,225(s6) # 690e1 <_stack_start+0x590e1>
 410:	0e25                	addi	t3,t3,9
 412:	00000513          	li	a0,0
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	10b0                	addi	a2,sp,104
       2:	0000                	unimp
       4:	10c4                	addi	s1,sp,100
       6:	0000                	unimp
       8:	0001                	nop
       a:	c45a                	sw	s6,8(sp)
       c:	0010                	0x10
       e:	c500                	sw	s0,8(a0)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	10c6                	slli	ra,ra,0x31
      20:	0000                	unimp
      22:	1106                	slli	sp,sp,0x21
      24:	0000                	unimp
      26:	0001                	nop
      28:	0c5a                	slli	s8,s8,0x16
      2a:	0011                	c.nop	4
      2c:	1600                	addi	s0,sp,800
      2e:	0011                	c.nop	4
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	1024                	addi	s1,sp,40
      3e:	0000                	unimp
      40:	1078                	addi	a4,sp,44
      42:	0000                	unimp
      44:	0001                	nop
      46:	785a                	flw	fa6,180(sp)
      48:	0010                	0x10
      4a:	a000                	fsd	fs0,0(s0)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	0600                	addi	s0,sp,768
      5e:	0010                	0x10
      60:	5a00                	lw	s0,48(a2)
      62:	0010                	0x10
      64:	0300                	addi	s0,sp,384
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	105a                	c.slli	zero,0x36
      6c:	0000                	unimp
      6e:	1064                	addi	s1,sp,44
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	1064                	addi	s1,sp,44
      78:	0000                	unimp
      7a:	000010a3          	sh	zero,1(zero) # 1 <__DYNAMIC+0x1>
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	000010a3          	sh	zero,1(zero) # 1 <__DYNAMIC+0x1>
  jal x0, default_exc_handler
      86:	110a                	slli	sp,sp,0x22
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	0a79                	addi	s4,s4,30
}
      90:	0011                	c.nop	4
    switch(length%3) {
      92:	0c00                	addi	s0,sp,528
      94:	0011                	c.nop	4
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	110c                	addi	a1,sp,160
      9e:	0000                	unimp
      a0:	1116                	slli	sp,sp,0x25
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
            for (i = 0; i < (length / 3); i++) {
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
      b0:	0600                	addi	s0,sp,768
            for (i = 0; i < ((length-2) / 3); i++) {
      b2:	0010                	0x10
      b4:	3400                	fld	fs0,40(s0)
      b6:	0010                	0x10
      b8:	0300                	addi	s0,sp,384
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	1034                	addi	a3,sp,40
      c0:	0000                	unimp
            a1[length-1] = a2[length-1];
      c2:	1036                	c.slli	zero,0x2d
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	1036                	c.slli	zero,0x2d
      cc:	0000                	unimp
      ce:	10bc                	addi	a5,sp,104
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d6:	bc7a                	fsd	ft10,56(sp)
      d8:	0010                	0x10
      da:	c500                	sw	s0,8(a0)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	c500                	sw	s0,8(a0)
            a1[length-1] = a2[length-1];
      e4:	0010                	0x10
            a1[length-2] = a2[length-2];
      e6:	0a00                	addi	s0,sp,272
      e8:	0011                	c.nop	4
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
} //end of function
      f0:	110a                	slli	sp,sp,0x22
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	0000                	unimp
      f4:	110c                	addi	a1,sp,160
    asm volatile(
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
      fc:	0c7a                	slli	s8,s8,0x1e
      fe:	0011                	c.nop	4
            for (i = 0; i < (length / 3); i++) {
     100:	1600                	addi	s0,sp,800
     102:	0011                	c.nop	4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
    asm volatile(
     108:	7af0                	flw	fa2,116(a3)
	...
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	1006                	c.slli	zero,0x21
     114:	0000                	unimp
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	1040                	addi	s0,sp,36
     118:	0000                	unimp
    asm volatile(
     11a:	c4910003          	lb	zero,-951(sp)
     11e:	407c                	lw	a5,68(s0)
     120:	0010                	0x10
     122:	4a00                	lw	s0,16(a2)
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0010                	0x10
     126:	0200                	addi	s0,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	7e00                	flw	fs0,56(a2)
     12a:	4a00                	lw	s0,16(a2)
     12c:	0010                	0x10
     12e:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     130:	0011                	c.nop	4
     132:	0200                	addi	s0,sp,256
     134:	8200                	0x8200
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	0400                	addi	s0,sp,512
     138:	0011                	c.nop	4
    int line[size_b][size_a + size_b];
     13a:	0a00                	addi	s0,sp,272
     13c:	0011                	c.nop	4
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	110a                	slli	sp,sp,0x22
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     146:	0000                	unimp
     148:	110c                	addi	a1,sp,160
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	0c7c                	addi	a5,sp,540
     152:	0011                	c.nop	4
     154:	1600                	addi	s0,sp,800
     156:	0011                	c.nop	4
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
    int line[size_b][size_a + size_b];
     164:	0600                	addi	s0,sp,768
    int pola[size_a];
     166:	0010                	0x10
    int line[size_b][size_a + size_b];
     168:	7400                	flw	fs0,40(s0)
     16a:	0010                	0x10
    int pola[size_a];
     16c:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     16e:	9100                	0x9100
    int pola[size_a];
     170:	7e98                	flw	fa4,56(a3)
     172:	1074                	addi	a3,sp,44
    int polb[size_b];
     174:	0000                	unimp
     176:	107a                	c.slli	zero,0x3e
     178:	0000                	unimp
    int pola[size_a];
     17a:	0002                	c.slli64	zero
    int polb[size_b];
     17c:	007c                	addi	a5,sp,12
     17e:	107a                	c.slli	zero,0x3e
            line[i][j] = 0;
     180:	0000                	unimp
     182:	000010a3          	sh	zero,1(zero) # 1 <__DYNAMIC+0x1>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     186:	0002                	c.slli64	zero
    int pola[size_a];
     188:	0080                	addi	s0,sp,64
     18a:	000010a3          	sh	zero,1(zero) # 1 <__DYNAMIC+0x1>
    int line[size_b][size_a + size_b];
     18e:	110a                	slli	sp,sp,0x22
     190:	0000                	unimp
    int polb[size_b];
     192:	98910003          	lb	zero,-1655(sp)
            line[i][j] = 0;
     196:	0a7e                	slli	s4,s4,0x1f
     198:	0011                	c.nop	4
    for (i = 0; i < size_b; ++i){
     19a:	0c00                	addi	s0,sp,528
     19c:	0011                	c.nop	4
            product[j] = 0;
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	110c                	addi	a1,sp,160
    for (i = 0; i < size_b; ++i){
     1a6:	0000                	unimp
     1a8:	1116                	slli	sp,sp,0x25
    array_equ(pola,a,size_a);
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
     1b4:	0000                	unimp
     1b6:	0000                	unimp
     1b8:	2800                	fld	fs0,16(s0)
    for (i = 0; i < size_a; ++i){
     1ba:	0010                	0x10
     1bc:	2c00                	fld	fs0,24(s0)
     1be:	0010                	0x10
     1c0:	0200                	addi	s0,sp,256
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	d09f 0010 da00      	0xda000010d09f
    array_equ(polb,b,size_b);
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
    for (i = 0; i < size_b; ++i){
     1d6:	0000                	unimp
     1d8:	1a00                	addi	s0,sp,304
    if(star_mult == 1){
     1da:	000d                	c.nop	3
     1dc:	3200                	fld	fs0,32(a2)
     1de:	000d                	c.nop	3
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0d32                	slli	s10,s10,0xc
     1e6:	0000                	unimp
     1e8:	0d9a                	slli	s11,s11,0x6
     1ea:	0000                	unimp
     1ec:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	9a58                	0x9a58
     1f0:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	a600                	fsd	fs0,8(a2)
     1f4:	000d                	c.nop	3
            product[j] = 0;
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
            line[i][j] = 0;
     1fc:	0da6                	slli	s11,s11,0x9
     1fe:	0000                	unimp
            product[j] = 0;
     200:	0dac                	addi	a1,sp,728
     202:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0dac                	addi	a1,sp,728
    for (i = 0; i < size_b; ++i){
     20c:	0000                	unimp
     20e:	0de2                	slli	s11,s11,0x18
     210:	0000                	unimp
     212:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
            pola[i] = pola[i] + mod;
     218:	0000                	unimp
     21a:	0000                	unimp
        while (pola[i] < 0){
     21c:	1a00                	addi	s0,sp,304
     21e:	000d                	c.nop	3
     220:	3c00                	fld	fs0,56(s0)
        pola[i] = pola[i] % mod;
     222:	000d                	c.nop	3
     224:	0100                	addi	s0,sp,128
    for (i = 0; i < size_a; ++i){
     226:	5b00                	lw	s0,48(a4)
     228:	0d3c                	addi	a5,sp,664
        pola[i] = pola[i] % mod;
     22a:	0000                	unimp
     22c:	0da4                	addi	s1,sp,728
    for (i = 0; i < size_a; ++i){
     22e:	0000                	unimp
            polb[i] = polb[i] + mod;
     230:	0001                	nop
     232:	a465                	j	4da <polydiv+0x36>
        while (polb[i] < 0){
     234:	000d                	c.nop	3
     236:	ac00                	fsd	fs0,24(s0)
     238:	000d                	c.nop	3
        polb[i] = polb[i] % mod;
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
    for (i = 0; i < size_b; ++i){
     23e:	5b01                	li	s6,-32
     240:	ac9f 000d e200      	0xe200000dac9f
     246:	000d                	c.nop	3
    if(star_mult == 1){
     248:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     24a:	6500                	flw	fs0,8(a0)
	...
    for (i = 0; i < size_b; ++i){
     254:	0d1a                	slli	s10,s10,0x6
     256:	0000                	unimp
     258:	0d34                	addi	a3,sp,664
     25a:	0000                	unimp
     25c:	0001                	nop
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	345c                	fld	fa5,168(s0)
     260:	000d                	c.nop	3
     262:	9e00                	0x9e00
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
}
     26a:	0d9e                	slli	s11,s11,0x7
     26c:	0000                	unimp
     26e:	0dac                	addi	a1,sp,728
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0dac                	addi	a1,sp,728
     27a:	0000                	unimp
     27c:	0de2                	slli	s11,s11,0x18
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
     288:	0000                	unimp
     28a:	1a00                	addi	s0,sp,304
     28c:	000d                	c.nop	3
     28e:	3600                	fld	fs0,40(a2)
     290:	000d                	c.nop	3
     292:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	5d00                	lw	s0,56(a0)
     296:	0d36                	slli	s10,s10,0xd
     298:	0000                	unimp
     29a:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
     29e:	0001                	nop
     2a0:	4f5a                	lw	t5,148(sp)
     2a2:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	e200                	fsw	fs0,0(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
        for (j = size_b -1; j >= 0; j = j-1){
     2b4:	0000                	unimp
     2b6:	1a00                	addi	s0,sp,304
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	000d                	c.nop	3
     2ba:	3e00                	fld	fs0,56(a2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	000d                	c.nop	3
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0d3e                	slli	s10,s10,0xf
     2c4:	0000                	unimp
     2c6:	0da8                	addi	a0,sp,728
     2c8:	0000                	unimp
     2ca:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	000da867          	0xda867
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2d0:	ac00                	fsd	fs0,24(s0)
     2d2:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	5e01                	li	t3,-32
     2da:	ac9f 000d e200      	0xe200000dac9f
            line[i][j] = line[i][j] % mod;
     2e0:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
     2ee:	0d1a                	slli	s10,s10,0x6
     2f0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     2f2:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
     2f6:	0001                	nop
     2f8:	4f5f 000d e200      	0xe200000d4f5f
            product[j] += line[i][j];
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	1a00                	addi	s0,sp,304
     310:	000d                	c.nop	3
     312:	4f00                	lw	s0,24(a4)
     314:	000d                	c.nop	3
        for(i = 0; i < size_b; ++i){
     316:	0100                	addi	s0,sp,128
     318:	6000                	flw	fs0,0(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	00000d4f          	fnmadd.s	fs10,ft0,ft0,ft0,rne
     31e:	0da2                	slli	s11,s11,0x8
        for(i = 0; i < size_b; ++i){
     320:	0000                	unimp
     322:	0001                	nop
        product[j] = product[j] % mod;
     324:	a264                	fsd	fs1,192(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	000d                	c.nop	3
     328:	ac00                	fsd	fs0,24(s0)
        product[j] = product[j] % mod;
     32a:	000d                	c.nop	3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	ac9f 000d e200      	0xe200000dac9f
    int line[size_b][size_a + size_b];
     338:	000d                	c.nop	3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
    int line[size_b][size_a + size_b];
     346:	0d50                	addi	a2,sp,660
     348:	0000                	unimp
     34a:	0d5f 0000 0001      	0x100000d5f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	6200                	flw	fs0,0(a2)
     35a:	000d                	c.nop	3
     35c:	8000                	0x8000
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     362:	5a00                	lw	s0,48(a2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	0d80                	addi	s0,sp,720
     366:	0000                	unimp
    int line[size_b][size_a + size_b];
     368:	00000d83          	lb	s11,0(zero) # 0 <__DYNAMIC>
     36c:	0001                	nop
    int pola[size_a];
     36e:	ac5c                	fsd	fa5,152(s0)
     370:	000d                	c.nop	3
     372:	d000                	sw	s0,32(s0)
     374:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
     376:	0100                	addi	s0,sp,128
    int pola[size_a];
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0d84                	addi	s1,sp,720
    int polb[size_b];
     384:	0000                	unimp
     386:	00000d8f          	0xd8f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     38a:	0001                	nop
    int line[size_b][size_a + size_b];
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	0000                	unimp
    int pola[size_a];
     392:	0000                	unimp
     394:	9000                	0x9000
    int polb[size_b];
     396:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
     398:	ac00                	fsd	fs0,24(s0)
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
            product2[j] = 0;
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0dd0                	addi	a2,sp,724
     3a2:	0000                	unimp
     3a4:	0de2                	slli	s11,s11,0x18
    for (i = 0; i < size_b; ++i){
     3a6:	0000                	unimp
     3a8:	0001                	nop
    array_equ(pola,a,size_a);
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
     3b0:	0000                	unimp
     3b2:	6200                	flw	fs0,0(a2)
     3b4:	000d                	c.nop	3
    array_equ(polb,b,size_b);
     3b6:	6800                	flw	fs0,16(s0)
     3b8:	000d                	c.nop	3
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0d68                	addi	a0,sp,668
     3c0:	0000                	unimp
    if(star_mult == 1){
     3c2:	0d74                	addi	a3,sp,668
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	745d                	lui	s0,0xffff7
     3ca:	000d                	c.nop	3
     3cc:	7a00                	flw	fs0,48(a2)
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	0d90                	addi	a2,sp,720
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0d9c                	addi	a5,sp,720
     3da:	0000                	unimp
            product2[j] = 0;
     3dc:	0001                	nop
     3de:	ac59                	j	674 <polydiv+0x1d0>
     3e0:	000d                	c.nop	3
            line[i][j] = 0;
     3e2:	b600                	fsd	fs0,40(a2)
     3e4:	000d                	c.nop	3
            product2[j] = 0;
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0db6                	slli	s11,s11,0xd
     3ec:	0000                	unimp
     3ee:	0dbc                	addi	a5,sp,728
     3f0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	bc9f 000d be00      	0xbe00000dbc9f
        for(j = 0; j < size_a + size_b -1; ++j){
     3fc:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0dbe                	slli	s11,s11,0xf
     404:	0000                	unimp
     406:	0dd0                	addi	a2,sp,724
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	d05e                	sw	s7,32(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	da00                	sw	s0,48(a2)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	5900                	lw	s0,48(a0)
     418:	0dda                	slli	s11,s11,0x16
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0000                	unimp
     41c:	0de0                	addi	s0,sp,732
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_bss_end+0x7bb>
        for(j=0;j<size_a+size_b-1;++j){
     424:	e09f 000d e200      	0xe200000de09f
    for(i=0;i<size_b;++i){
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	0c84                	addi	s1,sp,592
     43a:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	0ca0                	addi	s0,sp,600
     43e:	0000                	unimp
     440:	0001                	nop
     442:	a05a                	fsd	fs6,0(sp)
     444:	000c                	0xc
     446:	f200                	fsw	fs0,32(a2)
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	5800                	lw	s0,48(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     44e:	0cf2                	slli	s9,s9,0x1c
     450:	0000                	unimp
     452:	0d1a                	slli	s10,s10,0x6
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	0000                	unimp
     456:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     458:	9f5a01f3          	0x9f5a01f3
	...
        for(j=0;j<size_a+size_b-1;++j){
     464:	0c84                	addi	s1,sp,592
     466:	0000                	unimp
            product2[j] += line[i][j];
     468:	0c9a                	slli	s9,s9,0x6
     46a:	0000                	unimp
     46c:	0001                	nop
        for(j=0;j<size_a+size_b-1;++j){
     46e:	000c9a5b          	0xc9a5b
     472:	0000                	unimp
    for(i=0;i<size_b;++i){
     474:	000d                	c.nop	3
     476:	0100                	addi	s0,sp,128
     478:	6200                	flw	fs0,0(a2)
}
     47a:	0d00                	addi	s0,sp,656
     47c:	0000                	unimp
     47e:	0d08                	addi	a0,sp,656
     480:	0000                	unimp
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
     488:	0d08                	addi	a0,sp,656
     48a:	0000                	unimp
     48c:	0d1a                	slli	s10,s10,0x6
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
     498:	0000                	unimp
     49a:	8400                	0x8400
     49c:	000c                	0xc
     49e:	9e00                	0x9e00
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
    int v[size_N];
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c9e                	slli	s9,s9,0x7
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4a8:	0000                	unimp
    int v[size_N];
     4aa:	0cde                	slli	s9,s9,0x17
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	0000                	unimp
     4ae:	0001                	nop
     4b0:	de59                	beqz	a2,44e <polymult2+0x11a>
     4b2:	000c                	0xc
     4b4:	1a00                	addi	s0,sp,304
     4b6:	000d                	c.nop	3
     4b8:	0400                	addi	s0,sp,512
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
     4be:	009f 0000 0000      	0x9f
    int v[size_N];
     4c4:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	8400                	0x8400
     4c8:	000c                	0xc
    int v[size_N];
     4ca:	ab00                	fsd	fs0,16(a4)
     4cc:	000c                	0xc
     4ce:	0100                	addi	s0,sp,128
    int q[size_N];
     4d0:	5d00                	lw	s0,56(a0)
     4d2:	00000cab          	0xcab
    int num_temp[size_N];
     4d6:	0d04                	addi	s1,sp,656
     4d8:	0000                	unimp
    int denum_temp[size_D];
     4da:	0001                	nop
     4dc:	0464                	addi	s1,sp,524
     4de:	000d                	c.nop	3
    int num_temp[size_N];
     4e0:	0800                	addi	s0,sp,16
    int denum_temp[size_D];
     4e2:	000d                	c.nop	3
     4e4:	0400                	addi	s0,sp,512
     4e6:	f300                	fsw	fs0,32(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	5d01                	li	s10,-32
     4ea:	089f 000d 1a00      	0x1a00000d089f
     array_equ(num_temp,num,size_N);
     4f0:	000d                	c.nop	3
     4f2:	0100                	addi	s0,sp,128
     4f4:	6400                	flw	fs0,8(s0)
	...
     4fe:	0c84                	addi	s1,sp,592
    int denum_temp[size_D];
     500:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     502:	00000cab          	0xcab
     506:	0001                	nop
     508:	ab5e                	fsd	fs7,400(sp)
     50a:	000c                	0xc
        array_equ(denum_temp,denum,size_D);
     50c:	0200                	addi	s0,sp,256
     50e:	000d                	c.nop	3
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
    for (i = 0; i < size_D; ++i) {
     514:	0d02                	c.slli64	s10
     516:	0000                	unimp
     518:	0d08                	addi	a0,sp,656
     51a:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0d08                	addi	a0,sp,656
     524:	0000                	unimp
     526:	0d1a                	slli	s10,s10,0x6
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0x88>
    for (i = 0; i < size_N; ++i){
     530:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     532:	0000                	unimp
    for (u = 0; u < mod; ++u){
     534:	be00                	fsd	fs0,56(a2)
     536:	000c                	0xc
     538:	eb00                	fsw	fs0,16(a4)
     53a:	000c                	0xc
            num_temp[i] = num_temp[i] + mod;
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
	...
        num_temp[i] = num_temp[i] % mod;
     548:	0cbe                	slli	s9,s9,0xf
    for (i = 0; i < size_N; ++i){
     54a:	0000                	unimp
     54c:	0cc4                	addi	s1,sp,596
        num_temp[i] = num_temp[i] % mod;
     54e:	0000                	unimp
     550:	0002                	c.slli64	zero
    for (i = 0; i < size_N; ++i){
     552:	9f30                	0x9f30
            denum_temp[i] = denum_temp[i] + mod;
     554:	0cec                	addi	a1,sp,604
     556:	0000                	unimp
        while (denum_temp[i] < 0) {
     558:	0cfe                	slli	s9,s9,0x1f
     55a:	0000                	unimp
     55c:	0001                	nop
        denum_temp[i] = denum_temp[i] % mod;
     55e:	0859                	addi	a6,a6,22
     560:	000d                	c.nop	3
    for (i = 0; i < size_D; ++i) {
     562:	1200                	addi	s0,sp,288
     564:	000d                	c.nop	3
        denum_temp[i] = denum_temp[i] % mod;
     566:	0100                	addi	s0,sp,128
     568:	5900                	lw	s0,48(a0)
    for (i = 0; i < size_D; ++i) {
     56a:	0d12                	slli	s10,s10,0x4
        q[i] = 0;
     56c:	0000                	unimp
     56e:	0d18                	addi	a4,sp,656
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
     576:	189f 000d 1a00      	0x1a00000d189f
        v[i] = 0;
     57c:	000d                	c.nop	3
    for (i = 0; i < size_N; ++i){
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
        if ( (b_N*u)%mod == 1 )
     58a:	0990                	addi	a2,sp,208
     58c:	0000                	unimp
     58e:	09d4                	addi	a3,sp,212
     590:	0000                	unimp
    for (u = 0; u < mod; ++u){
     592:	0001                	nop
     594:	d45a                	sw	s6,40(sp)
        if( num_temp[i] != 0 )
     596:	0009                	c.nop	2
    for (i = size_N-1; i >= 0; i = i-1){
     598:	9800                	0x9800
     59a:	0100000b          	0x100000b
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0b98                	addi	a4,sp,464
     5a2:	0000                	unimp
     5a4:	0bbc                	addi	a5,sp,472
    while (d >= d2){
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
    array_equ(result,q,size_N);
     5ac:	bc9f 000b dc00      	0xdc00000bbc9f
     5b2:	0400000b          	0x400000b
     5b6:	f300                	fsw	fs0,32(a4)
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	5a01                	li	s4,-32
     5ba:	dc9f 000b 7000      	0x7000000bdc9f
        result[i] = num_temp[i-size_N];
     5c0:	000c                	0xc
     5c2:	0100                	addi	s0,sp,128
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0c70                	addi	a2,sp,540
}
     5c8:	0000                	unimp
     5ca:	0c84                	addi	s1,sp,592
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
     5d2:	009f 0000 0000      	0x9f
     5d8:	0000                	unimp
     5da:	9000                	0x9000
     5dc:	0009                	c.nop	2
     5de:	cc00                	sw	s0,24(s0)
     5e0:	0009                	c.nop	2
     5e2:	0100                	addi	s0,sp,128
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	09cc                	addi	a1,sp,212
     5e8:	0000                	unimp
     5ea:	0bc4                	addi	s1,sp,468
     5ec:	0000                	unimp
     5ee:	0001                	nop
     5f0:	000bc467          	0xbc467
        v[(d-d2)] = u*r_d;
     5f4:	dc00                	sw	s0,56(s0)
     5f6:	0400000b          	0x400000b
     5fa:	f300                	fsw	fs0,32(a4)
     5fc:	5b01                	li	s6,-32
     5fe:	dc9f 000b 8400      	0x8400000bdc9f
        for (i = 0; i < size_N; ++i){
     604:	000c                	0xc
     606:	0100                	addi	s0,sp,128
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	6700                	flw	fs0,8(a4)
	...
     612:	0990                	addi	a2,sp,208
     614:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     616:	09d0                	addi	a2,sp,212
     618:	0000                	unimp
     61a:	0001                	nop
     61c:	d05c                	sw	a5,36(s0)
     61e:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     620:	c000                	sw	s0,0(s0)
     622:	0100000b          	0x100000b
     626:	6600                	flw	fs0,8(a2)
        for (i = 0; i < size_N; ++i){
     628:	0bc0                	addi	s0,sp,468
     62a:	0000                	unimp
     62c:	0bdc                	addi	a5,sp,468
     62e:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
        for (i = size_N-1; i >= 0; i = i-1){
     636:	0bdc                	addi	a5,sp,468
     638:	0000                	unimp
     63a:	0c84                	addi	s1,sp,592
     63c:	0000                	unimp
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
     642:	0000                	unimp
     644:	0000                	unimp
     646:	0000                	unimp
            v[i] = v[i] % mod;
     648:	1e00                	addi	s0,sp,816
        for (i = 0; i < size_N; ++i){
     64a:	2800000b          	0x2800000b
            v[i] = v[i] % mod;
     64e:	0100000b          	0x100000b
     652:	5a00                	lw	s0,48(a2)
	...
            while (product[i] < 0) {
     65c:	0b38                	addi	a4,sp,408
     65e:	0000                	unimp
     660:	00000b57          	0xb57
            product[i] = product[i] % mod;
     664:	0001                	nop
        for (i = 0; i < size_N; ++i){
     666:	3c5a                	fld	fs8,432(sp)
     668:	000c                	0xc
            product[i] = product[i] % mod;
     66a:	5000                	lw	s0,32(s0)
     66c:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     66e:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] - product[i];
     670:	5a00                	lw	s0,48(a2)
	...
        for (i = 0; i < size_N; ++i){
     67a:	0b58                	addi	a4,sp,404
     67c:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     67e:	00000b6b          	0xb6b
     682:	0001                	nop
        for (i = 0; i < size_N; ++i){
     684:	505a                	0x505a
                num_temp[i] = num_temp[i] + mod;
     686:	000c                	0xc
     688:	6000                	flw	fs0,0(s0)
            while (num_temp[i] < 0){
     68a:	000c                	0xc
     68c:	0100                	addi	s0,sp,128
     68e:	5a00                	lw	s0,48(a2)
	...
            num_temp[i] = num_temp[i] % mod;
     698:	0b6c                	addi	a1,sp,412
     69a:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     69c:	0b88                	addi	a0,sp,464
            q[i] = q[i] + v[i];
     69e:	0000                	unimp
     6a0:	0001                	nop
     6a2:	605a                	flw	ft0,148(sp)
     6a4:	000c                	0xc
     6a6:	7000                	flw	fs0,32(s0)
        for(i = 0; i < size_N; ++i){
     6a8:	000c                	0xc
     6aa:	0100                	addi	s0,sp,128
            q[i] = q[i] + v[i];
     6ac:	5a00                	lw	s0,48(a2)
	...
        for(i = 0; i < size_N; ++i){
     6b6:	0ad2                	slli	s5,s5,0x14
            if( num_temp[i] != 0 )
     6b8:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	0ba0                	addi	s0,sp,472
     6bc:	0000                	unimp
            v[i] = 0;
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
     6c2:	0ba0                	addi	s0,sp,472
     6c4:	0000                	unimp
     6c6:	0bb8                	addi	a4,sp,472
        for (i = 0; i < size_N; ++i){
     6c8:	0000                	unimp
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
     6ce:	0bb8                	addi	a4,sp,472
        result[i] = num_temp[i-size_N];
     6d0:	0000                	unimp
     6d2:	0bbc                	addi	a5,sp,472
     6d4:	0000                	unimp
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
     6da:	0085                	addi	ra,ra,1
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	2432                	fld	fs0,264(sp)
     6de:	f0090f23          	sb	zero,-226(s2)
    int ri_2[size]; // MX-ring poly, a
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	1c01                	addi	s8,s8,-32
    int ri_2[size]; // MX-ring poly, a
     6e8:	0bbc                	addi	a5,sp,472
     6ea:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0bdc                	addi	a5,sp,468
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
     6f4:	235a01f3          	0x235a01f3
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
     700:	0a1c                	addi	a5,sp,272
     702:	01f0                	addi	a2,sp,204
     704:	dc1c                	sw	a5,56(s0)
     706:	8400000b          	0x8400000b
    int ri_2[size]; // MX-ring poly, a
     70a:	000c                	0xc
     70c:	0200                	addi	s0,sp,256
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	7200                	flw	fs0,32(a2)
	...
    int ri[size];
     718:	d600                	sw	s0,40(a2)
    int ti_1[size]; // ti_1[0] = 1
     71a:	000a                	c.slli	zero,0x2
     71c:	d800                	sw	s0,48(s0)
     71e:	000a                	c.slli	zero,0x2
    int ti[size];
     720:	0200                	addi	s0,sp,256
     722:	3100                	fld	fs0,32(a0)
     724:	d89f 000a de00      	0xde00000ad89f
    int qi_1[size];
     72a:	000a                	c.slli	zero,0x2
    int temp[size];
     72c:	0100                	addi	s0,sp,128
     72e:	5f00                	lw	s0,56(a4)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	0ae2                	slli	s5,s5,0x18
     732:	0000                	unimp
     734:	0ae8                	addi	a0,sp,348
    int ri_2[size]; // MX-ring poly, a
     736:	0000                	unimp
     738:	0001                	nop
    int temp[size];
     73a:	f05f 000a fe00      	0xfe00000af05f
        ti_2[i] = 0;
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
     744:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size; ++i) {
     746:	0b08                	addi	a0,sp,400
     748:	0000                	unimp
    array_equ(ri_2,polyR,size);
     74a:	0b1d                	addi	s6,s6,7
     74c:	0000                	unimp
     74e:	0001                	nop
     750:	1e5f 000b 2800      	0x2800000b1e5f
    array_equ(ri_1,polyf,size);
     756:	0500000b          	0x500000b
    ti_1[0] = 1;
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
     75e:	9f24                	0x9f24
        for (i = N + 1; i < (2 * N + 2); ++i) {
     760:	0b28                	addi	a0,sp,408
     762:	0000                	unimp
     764:	00000b37          	lui	s6,0x0
        for (i = 0; i < N + 1; ++i) {
     768:	0001                	nop
     76a:	385f 000b 4800      	0x4800000b385f
        ti_2[i] = 0;
     770:	0500000b          	0x500000b
        ti_1[i] = 0;
     774:	8200                	0x8200
        ti_2[i] = 0;
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
        ti_1[i] = 0;
     77a:	0b48                	addi	a0,sp,404
     77c:	0000                	unimp
    for (i = 0; i < size; ++i) {
     77e:	0b58                	addi	a4,sp,404
     780:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     782:	0001                	nop
     784:	5859                	li	a6,-10
            while (ri_2[i] < 0) {
     786:	6000000b          	0x6000000b
     78a:	0200000b          	0x200000b
            ri_2[i] = ri_2[i] % mod;
     78e:	3000                	fld	fs0,32(s0)
        for (i = 0; i < N + 1; ++i) {
     790:	609f 000b 6800      	0x6800000b609f
     796:	0100000b          	0x100000b
     79a:	5e00                	lw	s0,56(a2)
     79c:	0b6c                	addi	a1,sp,412
     79e:	0000                	unimp
     7a0:	0b7e                	slli	s6,s6,0x1f
        for (i = 0; i < N + 1; ++i) {
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
     7a6:	0082                	c.slli64	ra
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	7e9f 000b 9800      	0x9800000b7e9f
     7b0:	0100000b          	0x100000b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	6800                	flw	fs0,16(s0)
     7b6:	0b98                	addi	a4,sp,464
     7b8:	0000                	unimp
     7ba:	0c18                	addi	a4,sp,528
     7bc:	0000                	unimp
     7be:	0001                	nop
     7c0:	185f 000c 1a00      	0x1a00000c185f
        for (i = 0; i < N + 1; ++i) {
     7c6:	000c                	0xc
     7c8:	0300                	addi	s0,sp,384
     7ca:	7f00                	flw	fs0,56(a4)
        for (i = 0; i < N + 1; ++i) {
     7cc:	9f7f                	0x9f7f
     7ce:	0c1a                	slli	s8,s8,0x6
     7d0:	0000                	unimp
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	0c3c                	addi	a5,sp,536
     7d4:	0000                	unimp
     7d6:	0001                	nop
     7d8:	3c5f 000c 4c00      	0x4c00000c3c5f
     7de:	000c                	0xc
    array_equ(qi_1,res1,size);
     7e0:	0100                	addi	s0,sp,128
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0c4c                	addi	a1,sp,532
        for (i = 0; i < N + 1; ++i) {
     7e6:	0000                	unimp
     7e8:	0c4e                	slli	s8,s8,0x13
     7ea:	0000                	unimp
     7ec:	7f790003          	lb	zero,2039(s2)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7f0:	4e9f 000c 5000      	0x5000000c4e9f
     7f6:	000c                	0xc
     7f8:	0100                	addi	s0,sp,128
     7fa:	5900                	lw	s0,48(a0)
     7fc:	0c50                	addi	a2,sp,532
    array_equ(temp,res2,size);
     7fe:	0000                	unimp
     800:	0c54                	addi	a3,sp,532
     802:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     804:	0001                	nop
     806:	545e                	lw	s0,244(sp)
     808:	000c                	0xc
     80a:	5e00                	lw	s0,56(a2)
        for (i = 0; i < N + 1; ++i) {
     80c:	000c                	0xc
     80e:	0300                	addi	s0,sp,384
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     814:	0c5e                	slli	s8,s8,0x17
     816:	0000                	unimp
     818:	0c60                	addi	s0,sp,540
array_equ(ri_2,ri_1,size);
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	605e                	flw	ft0,212(sp)
     820:	000c                	0xc
array_equ(ri_1,ri,size);
     822:	7000                	flw	fs0,32(s0)
     824:	000c                	0xc
     826:	0100                	addi	s0,sp,128
     828:	6800                	flw	fs0,16(s0)
array_equ(ti_2,ti_1,size);
     82a:	0c70                	addi	a2,sp,540
     82c:	0000                	unimp
     82e:	0c80                	addi	s0,sp,592
     830:	0000                	unimp
     832:	0001                	nop
     834:	805f 000c 8200      	0x8200000c805f
array_equ(ti_1,ti,size);
     83a:	000c                	0xc
     83c:	0300                	addi	s0,sp,384
     83e:	7f00                	flw	fs0,56(a4)
        controlR = 0;
     840:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     842:	0c82                	c.slli64	s9
     844:	0000                	unimp
     846:	0c84                	addi	s1,sp,592
    while (controlR != 0) {
     848:	0000                	unimp
     84a:	0001                	nop
        for (j = 0; j < mod; ++j) {
     84c:	005f 0000 0000      	0x5f
     852:	0000                	unimp
     854:	9c00                	0x9c00
     856:	dc00000b          	0xdc00000b
     85a:	0600000b          	0x600000b
        for (i = 0; i < N + 1; ++i) {
     85e:	0300                	addi	s0,sp,384
    }
     860:	1b44                	addi	s1,sp,436
     862:	0000                	unimp
     864:	009f 0000 0000      	0x9f
     86a:	0000                	unimp
     86c:	d200                	sw	s0,32(a2)
     86e:	000a                	c.slli	zero,0x2
     870:	9800                	0x9800
     872:	0100000b          	0x100000b
     876:	6200                	flw	fs0,0(a2)
     878:	0b98                	addi	a4,sp,464
     87a:	0000                	unimp
     87c:	0bbc                	addi	a5,sp,472
     87e:	0000                	unimp
     880:	7f850003          	lb	zero,2040(a0)
     884:	bc9f 000b dc00      	0xdc00000bbc9f
                ri_1[i] = ri_1[i] + mod;
     88a:	0400000b          	0x400000b
            while (ri_1[i] < 0) {
     88e:	f300                	fsw	fs0,32(a4)
     890:	5a01                	li	s4,-32
     892:	dc9f 000b 7000      	0x7000000bdc9f
        for (i = 0; i < N + 1; ++i) {
     898:	000c                	0xc
     89a:	0100                	addi	s0,sp,128
            ri_1[i] = ri_1[i] % mod;
     89c:	6200                	flw	fs0,0(a2)
     89e:	0c70                	addi	a2,sp,540
        for (i = 0; i < N + 1; ++i) {
     8a0:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     8a2:	0c84                	addi	s1,sp,592
     8a4:	0000                	unimp
     8a6:	7f850003          	lb	zero,2040(a0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	009f 0000 0000      	0x9f
            ri[i - (N + 1)] = res[i];
     8b0:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	e200                	fsw	fs0,0(a2)
            temp[i] = ri_2[i] - ri[i];
     8b4:	0006                	c.slli	zero,0x1
     8b6:	5000                	lw	s0,32(s0)
     8b8:	01000007          	0x1000007
     8bc:	5a00                	lw	s0,48(a2)
     8be:	0750                	addi	a2,sp,900
     8c0:	0000                	unimp
     8c2:	0751                	addi	a4,a4,20
        for (i = 0; i < N + 1; ++i) {
     8c4:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     8c6:	0001                	nop
     8c8:	0007515b          	0x7515b
        for (i = 0; i < N + 1; ++i) {
     8cc:	6c00                	flw	fs0,24(s0)
                temp[i] = temp[i] + mod;
     8ce:	04000007          	0x4000007
            while (temp[i] < 0) {
     8d2:	f300                	fsw	fs0,32(a4)
     8d4:	5a01                	li	s4,-32
     8d6:	6c9f 0007 8200      	0x820000076c9f
        for (i = 0; i < N + 1; ++i) {
     8dc:	01000007          	0x1000007
            temp[i] = temp[i] % mod;
     8e0:	5a00                	lw	s0,48(a2)
     8e2:	0782                	c.slli64	a5
        for (i = 0; i < N + 1; ++i) {
     8e4:	0000                	unimp
                qi_1[i] = qi_1[i] + mod;
     8e6:	0990                	addi	a2,sp,208
     8e8:	0000                	unimp
            while (qi_1[i] < 0) {
     8ea:	0004                	0x4
     8ec:	9f5a01f3          	0x9f5a01f3
	...
            qi_1[i] = qi_1[i] % mod;
     8f8:	06e2                	slli	a3,a3,0x18
     8fa:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8fc:	074c                	addi	a1,sp,900
                temp[i] = temp[i] + mod;
     8fe:	0000                	unimp
     900:	0001                	nop
     902:	00074c5b          	0x74c5b
            while (temp[i] < 0) {
     906:	6800                	flw	fs0,16(s0)
     908:	01000007          	0x1000007
            temp[i] = temp[i] % mod;
     90c:	6a00                	flw	fs0,16(a2)
     90e:	0768                	addi	a0,sp,908
        for (i = 0; i < N + 1; ++i) {
     910:	0000                	unimp
     912:	076c                	addi	a1,sp,908
            temp[i] = temp[i] % mod;
     914:	0000                	unimp
     916:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     918:	9f5b01f3          	0x9f5b01f3
            ti[i] = ti_2[i] - temp[i];
     91c:	076c                	addi	a1,sp,908
     91e:	0000                	unimp
     920:	0782                	c.slli64	a5
     922:	0000                	unimp
     924:	0001                	nop
     926:	0007825b          	0x7825b
     92a:	9000                	0x9000
     92c:	0009                	c.nop	2
     92e:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     930:	f300                	fsw	fs0,32(a4)
            ti[i] = ti_2[i] - temp[i];
     932:	5b01                	li	s6,-32
     934:	009f 0000 0000      	0x9f
                ti[i] = ti[i] + mod;
     93a:	0000                	unimp
     93c:	e200                	fsw	fs0,0(a2)
            while (ti[i] < 0) {
     93e:	0006                	c.slli	zero,0x1
     940:	4600                	lw	s0,8(a2)
     942:	01000007          	0x1000007
            ti[i] = ti[i] % mod;
     946:	5c00                	lw	s0,56(s0)
        for (i = 0; i < N + 1; ++i) {
     948:	0746                	slli	a4,a4,0x11
     94a:	0000                	unimp
            ti[i] = ti[i] % mod;
     94c:	086a                	slli	a6,a6,0x1a
     94e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     950:	0001                	nop
              qi_1[i] = 0;
     952:	6a59                	lui	s4,0x16
     954:	0008                	0x8
     956:	7e00                	flw	fs0,56(a2)
     958:	0008                	0x8
            controlR += ri[i];
     95a:	0300                	addi	s0,sp,384
     95c:	8b00                	0x8b00
              qi_1[i] = 0;
     95e:	9f01                	0x9f01
     960:	087e                	slli	a6,a6,0x1f
        for (i = 0; i < N + 1; ++i) {
     962:	0000                	unimp
            controlR += ri[i];
     964:	088a                	slli	a7,a7,0x2
        for (i = 0; i < N + 1; ++i) {
     966:	0000                	unimp
            if (((ri_2[0] * j) % mod) == 1)
     968:	0004                	0x4
     96a:	9f5c01f3          	0x9f5c01f3
     96e:	088a                	slli	a7,a7,0x2
     970:	0000                	unimp
     972:	0990                	addi	a2,sp,208
     974:	0000                	unimp
     976:	0001                	nop
        for (j = 0; j < mod; ++j) {
     978:	0059                	c.nop	22
     97a:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     97c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     97e:	0000                	unimp
     980:	e200                	fsw	fs0,0(a2)
            ti_2[i] = (ti_2[i] * j) % mod;
     982:	0006                	c.slli	zero,0x1
     984:	4600                	lw	s0,8(a2)
     986:	01000007          	0x1000007
     98a:	5d00                	lw	s0,56(a0)
     98c:	0746                	slli	a4,a4,0x11
        for (i = 0; i < N + 1; ++i) {
     98e:	0000                	unimp
int* generate_keys(int N, int p, int q){
     990:	086c                	addi	a1,sp,28
     992:	0000                	unimp
     994:	0001                	nop
     996:	6c62                	flw	fs8,24(sp)
     998:	0008                	0x8
     99a:	8a00                	0x8a00
     99c:	0008                	0x8
     99e:	0400                	addi	s0,sp,512
     9a0:	f300                	fsw	fs0,32(a4)
     9a2:	5d01                	li	s10,-32
     9a4:	8a9f 0008 9000      	0x900000088a9f
     9aa:	0009                	c.nop	2
     9ac:	0100                	addi	s0,sp,128
     9ae:	6200                	flw	fs0,0(a2)
	...
     9b8:	0860                	addi	s0,sp,28
     9ba:	0000                	unimp
     9bc:	088a                	slli	a7,a7,0x2
     9be:	0000                	unimp
     9c0:	0006                	c.slli	zero,0x1
     9c2:	0019b403          	0x19b403
     9c6:	9f00                	0x9f00
	...
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9d0:	073c                	addi	a5,sp,904
     9d2:	0000                	unimp
     9d4:	087e                	slli	a6,a6,0x1f
     9d6:	0000                	unimp
     9d8:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	00087e6b          	0x87e6b
     9de:	8a00                	0x8a00
     9e0:	0008                	0x8
     9e2:	0600                	addi	s0,sp,768
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	f300                	fsw	fs0,32(a4)
     9e6:	5c01                	li	s8,-32
     9e8:	1c31                	addi	s8,s8,-20
     9ea:	8a9f 0008 9000      	0x900000088a9f
     9f0:	0009                	c.nop	2
     9f2:	0100                	addi	s0,sp,128
     9f4:	6b00                	flw	fs0,16(a4)
	...
     9fe:	073c                	addi	a5,sp,904
     a00:	0000                	unimp
     a02:	0746                	slli	a4,a4,0x11
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
     a08:	9f30                	0x9f30
     a0a:	0746                	slli	a4,a4,0x11
     a0c:	0000                	unimp
     a0e:	0751                	addi	a4,a4,20
     a10:	0000                	unimp
     a12:	0001                	nop
     a14:	6c5f 0007 8200      	0x820000076c5f
     a1a:	01000007          	0x1000007
     a1e:	5f00                	lw	s0,56(a4)
     a20:	0782                	c.slli64	a5
     a22:	0000                	unimp
     a24:	0792                	slli	a5,a5,0x4
     a26:	0000                	unimp
     a28:	0001                	nop
     a2a:	925d                	srli	a2,a2,0x37
     a2c:	94000007          	0x94000007
     a30:	03000007          	0x3000007
     a34:	7d00                	flw	fs0,56(a0)
     a36:	9f7f                	0x9f7f
     a38:	0794                	addi	a3,sp,960
     a3a:	0000                	unimp
     a3c:	07ac                	addi	a1,sp,968
     a3e:	0000                	unimp
     a40:	0001                	nop
     a42:	b45d                	j	4e8 <polydiv+0x44>
     a44:	b8000007          	0xb8000007
     a48:	01000007          	0x1000007
     a4c:	5900                	lw	s0,48(a0)
     a4e:	07b8                	addi	a4,sp,968
    int polyR[N+1];
     a50:	0000                	unimp
     a52:	07c2                	slli	a5,a5,0x10
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a54:	0000                	unimp
    int polyR[N+1];
     a56:	0001                	nop
     a58:	c45f 0007 cc00      	0xcc000007c45f
     a5e:	01000007          	0x1000007
     a62:	5e00                	lw	s0,56(a2)
    polyR[N] = 1;
     a64:	07ce                	slli	a5,a5,0x13
     a66:	0000                	unimp
     a68:	07d6                	slli	a5,a5,0x15
     a6a:	0000                	unimp
     a6c:	0001                	nop
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6e:	e65d                	bnez	a2,b1c <generate_keys+0x18c>
     a70:	ea000007          	0xea000007
     a74:	02000007          	0x2000007
     a78:	3000                	fld	fs0,32(s0)
     a7a:	ea9f 0007 f400      	0xf4000007ea9f
     a80:	01000007          	0x1000007
     a84:	5d00                	lw	s0,56(a0)
     a86:	0804                	addi	s1,sp,16
     a88:	0000                	unimp
     a8a:	0806                	slli	a6,a6,0x1
     a8c:	0000                	unimp
     a8e:	0002                	c.slli64	zero
     a90:	9f30                	0x9f30
     a92:	0806                	slli	a6,a6,0x1
     a94:	0000                	unimp
     a96:	0814                	addi	a3,sp,16
     a98:	0000                	unimp
     a9a:	0001                	nop
     a9c:	165e                	slli	a2,a2,0x37
     a9e:	0008                	0x8
     aa0:	2100                	fld	fs0,0(a0)
     aa2:	0008                	0x8
     aa4:	0100                	addi	s0,sp,128
     aa6:	5d00                	lw	s0,56(a0)
     aa8:	0840                	addi	s0,sp,20
     aaa:	0000                	unimp
     aac:	0844                	addi	s1,sp,20
     aae:	0000                	unimp
     ab0:	0002                	c.slli64	zero
     ab2:	9f30                	0x9f30
     ab4:	0844                	addi	s1,sp,20
     ab6:	0000                	unimp
     ab8:	084e                	slli	a6,a6,0x13
     aba:	0000                	unimp
     abc:	0001                	nop
     abe:	5c5e                	lw	s8,244(sp)
     ac0:	0008                	0x8
     ac2:	8a00                	0x8a00
     ac4:	0008                	0x8
     ac6:	0100                	addi	s0,sp,128
     ac8:	5f00                	lw	s0,56(a4)
     aca:	088a                	slli	a7,a7,0x2
     acc:	0000                	unimp
     ace:	089a                	slli	a7,a7,0x6
     ad0:	0000                	unimp
    polyR[0] = -1;
     ad2:	0001                	nop
     ad4:	9a5d                	andi	a2,a2,-9
    for(i = 1; i < N; ++i){
     ad6:	0008                	0x8
     ad8:	a000                	fsd	fs0,0(s0)
     ada:	0008                	0x8
     adc:	0300                	addi	s0,sp,384
    for (i = N; i < 55; ++i ){
     ade:	7d00                	flw	fs0,56(a0)
     ae0:	9f7f                	0x9f7f
     ae2:	08a0                	addi	s0,sp,88
     ae4:	0000                	unimp
    for(i = 0; i < N; ++i){
     ae6:	08a2                	slli	a7,a7,0x8
        random_keys[i] = f[i];
     ae8:	0000                	unimp
     aea:	0001                	nop
     aec:	a25d                	j	c92 <ntru_encyrpt+0xe>
     aee:	0008                	0x8
    for(i = 0; i < N; ++i){
     af0:	ac00                	fsd	fs0,24(s0)
     af2:	0008                	0x8
     af4:	0100                	addi	s0,sp,128
     af6:	5f00                	lw	s0,56(a4)
    for(i = N; i < (2*N); ++i){
     af8:	08ac                	addi	a1,sp,88
     afa:	0000                	unimp
     afc:	08b2                	slli	a7,a7,0xc
     afe:	0000                	unimp
        random_keys[i] = g[i-N];
     b00:	7f7f0003          	lb	zero,2039(t5)
     b04:	b29f 0008 b400      	0xb4000008b29f
    for(i = N; i < (2*N); ++i){
     b0a:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     b0c:	0100                	addi	s0,sp,128
     b0e:	5f00                	lw	s0,56(a4)
     b10:	08b4                	addi	a3,sp,88
    fp = ext_euclid(polyR, f, (N+1), p);
     b12:	0000                	unimp
     b14:	08c6                	slli	a7,a7,0x11
     b16:	0000                	unimp
     b18:	0001                	nop
     b1a:	c65e                	sw	s7,12(sp)
     b1c:	0008                	0x8
    for(i = (2*N); i < (3*N); ++i){
     b1e:	ca00                	sw	s0,16(a2)
        random_keys[i] = fp[i-(2*N)];
     b20:	0008                	0x8
     b22:	0300                	addi	s0,sp,384
     b24:	7e00                	flw	fs0,56(a2)
     b26:	9f7f                	0x9f7f
    for(i = (2*N); i < (3*N); ++i){
     b28:	08ca                	slli	a7,a7,0x12
     b2a:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     b2c:	08ce                	slli	a7,a7,0x13
     b2e:	0000                	unimp
     b30:	0001                	nop
     b32:	ce5e                	sw	s7,28(sp)
     b34:	0008                	0x8
     b36:	de00                	sw	s0,56(a2)
    for(i = (3*N); i < (4*N); ++i){
     b38:	0008                	0x8
     b3a:	0100                	addi	s0,sp,128
     b3c:	5d00                	lw	s0,56(a0)
     b3e:	08de                	slli	a7,a7,0x17
        random_keys[i] = fq[i-(3*N)];
     b40:	0000                	unimp
     b42:	08e4                	addi	s1,sp,92
     b44:	0000                	unimp
     b46:	7f7d0003          	lb	zero,2039(s10)
    for(i = (3*N); i < (4*N); ++i){
     b4a:	e49f 0008 f600      	0xf6000008e49f
    fg = polymult2(fq, N, g, N, 0);
     b50:	0008                	0x8
     b52:	0100                	addi	s0,sp,128
     b54:	5d00                	lw	s0,56(a0)
     b56:	08f6                	slli	a7,a7,0x1d
    for(i = 0; i < (2*N-1); ++i){
     b58:	0000                	unimp
     b5a:	08fc                	addi	a5,sp,92
     b5c:	0000                	unimp
     b5e:	7f7d0003          	lb	zero,2039(s10)
     b62:	fc9f 0008 fe00      	0xfe000008fc9f
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b68:	0008                	0x8
     b6a:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     b6c:	5d00                	lw	s0,56(a0)
     b6e:	08fe                	slli	a7,a7,0x1f
     b70:	0000                	unimp
     b72:	0912                	slli	s2,s2,0x4
     b74:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b76:	0001                	nop
     b78:	125e                	slli	tp,tp,0x37
     b7a:	0009                	c.nop	2
     b7c:	1800                	addi	s0,sp,48
    for(i = (4*N); i < (5*N); ++i){
     b7e:	0009                	c.nop	2
     b80:	0300                	addi	s0,sp,384
     b82:	7e00                	flw	fs0,56(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     b84:	9f7f                	0x9f7f
     b86:	0918                	addi	a4,sp,144
        random_keys[i] = polyR[i-(5*N)];
     b88:	0000                	unimp
     b8a:	0932                	slli	s2,s2,0xc
     b8c:	0000                	unimp
     b8e:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     b90:	325e                	fld	ft4,496(sp)
     b92:	0009                	c.nop	2
     b94:	3600                	fld	fs0,40(a2)
     b96:	0009                	c.nop	2
     b98:	0300                	addi	s0,sp,384
     b9a:	7e00                	flw	fs0,56(a2)
}
     b9c:	9f7f                	0x9f7f
     b9e:	0936                	slli	s2,s2,0xd
     ba0:	0000                	unimp
     ba2:	093a                	slli	s2,s2,0xe
     ba4:	0000                	unimp
     ba6:	0001                	nop
     ba8:	3a5e                	fld	fs4,496(sp)
     baa:	0009                	c.nop	2
     bac:	4a00                	lw	s0,16(a2)
     bae:	0009                	c.nop	2
     bb0:	0100                	addi	s0,sp,128
     bb2:	5d00                	lw	s0,56(a0)
     bb4:	094a                	slli	s2,s2,0x12
     bb6:	0000                	unimp
     bb8:	0950                	addi	a2,sp,148
     bba:	0000                	unimp
     bbc:	7f7d0003          	lb	zero,2039(s10)
     bc0:	509f 0009 5200      	0x52000009509f
     bc6:	0009                	c.nop	2
     bc8:	0100                	addi	s0,sp,128
     bca:	5d00                	lw	s0,56(a0)
     bcc:	0952                	slli	s2,s2,0x14
     bce:	0000                	unimp
     bd0:	0964                	addi	s1,sp,156
     bd2:	0000                	unimp
     bd4:	0001                	nop
     bd6:	645e                	flw	fs0,212(sp)
     bd8:	0009                	c.nop	2
     bda:	6600                	flw	fs0,8(a2)
        polyR[i] = 0;
     bdc:	0009                	c.nop	2
     bde:	0300                	addi	s0,sp,384
     be0:	7e00                	flw	fs0,56(a2)
     be2:	9f7f                	0x9f7f
     be4:	0966                	slli	s2,s2,0x19
    for(i = 1; i < N; ++i){
     be6:	0000                	unimp
     be8:	0968                	addi	a0,sp,156
        f[i] = 0;
     bea:	0000                	unimp
     bec:	0001                	nop
     bee:	7c5e                	flw	fs8,244(sp)
     bf0:	0009                	c.nop	2
     bf2:	8000                	0x8000
     bf4:	0009                	c.nop	2
     bf6:	0100                	addi	s0,sp,128
        g[i] = 0;
     bf8:	5f00                	lw	s0,56(a4)
     bfa:	0980                	addi	s0,sp,208
     bfc:	0000                	unimp
     bfe:	098e                	slli	s3,s3,0x3
     c00:	0000                	unimp
    for (i = N; i < 55; ++i ){
     c02:	7f7f0003          	lb	zero,2039(t5)
        random_keys[i] = f[i];
     c06:	8e9f 0009 9000      	0x900000098e9f
     c0c:	0009                	c.nop	2
     c0e:	0100                	addi	s0,sp,128
     c10:	5f00                	lw	s0,56(a4)
	...
    for(i = 0; i < N; ++i){
     c1a:	0850                	addi	a2,sp,20
        random_keys[i] = g[i-N];
     c1c:	0000                	unimp
     c1e:	088a                	slli	a7,a7,0x2
     c20:	0000                	unimp
     c22:	0001                	nop
     c24:	685e                	flw	fa6,212(sp)
    for(i = N; i < (2*N); ++i){
     c26:	0009                	c.nop	2
     c28:	9000                	0x9000
     c2a:	0009                	c.nop	2
        random_keys[i] = fp[i-(2*N)];
     c2c:	0100                	addi	s0,sp,128
     c2e:	5e00                	lw	s0,56(a2)
	...
    for(i = (2*N); i < (3*N); ++i){
     c38:	073a                	slli	a4,a4,0xe
     c3a:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     c3c:	086e                	slli	a6,a6,0x1b
     c3e:	0000                	unimp
     c40:	0002                	c.slli64	zero
     c42:	088a0083          	lb	ra,136(s4) # 16088 <_stack_start+0x6088>
     c46:	0000                	unimp
     c48:	0990                	addi	a2,sp,208
    for(i = (3*N); i < (4*N); ++i){
     c4a:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     c4c:	0002                	c.slli64	zero
    for(i = (3*N); i < (4*N); ++i){
     c4e:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    for(i = 0; i < (2*N-1); ++i){
     c52:	0000                	unimp
     c54:	0000                	unimp
        fg[i] = fg[i]*p;
     c56:	0000                	unimp
     c58:	073a                	slli	a4,a4,0xe
     c5a:	0000                	unimp
     c5c:	0870                	addi	a2,sp,28
    for(i = 0; i < (2*N-1); ++i){
     c5e:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c60:	0002                	c.slli64	zero
     c62:	0084                	addi	s1,sp,64
     c64:	088a                	slli	a7,a7,0x2
     c66:	0000                	unimp
     c68:	0990                	addi	a2,sp,208
     c6a:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     c6c:	0002                	c.slli64	zero
     c6e:	0084                	addi	s1,sp,64
	...
        random_keys[i] = polyR[i-(5*N)];
     c78:	073a                	slli	a4,a4,0xe
     c7a:	0000                	unimp
     c7c:	0876                	slli	a6,a6,0x1d
    for(i = (5*N); i < (6*N+1); ++i){
     c7e:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     c80:	0002                	c.slli64	zero
    for(i = (5*N); i < (6*N+1); ++i){
     c82:	088a0087          	0x88a0087
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c86:	0000                	unimp
     c88:	0990                	addi	a2,sp,208
     c8a:	0000                	unimp
     c8c:	0002                	c.slli64	zero
     c8e:	00000087          	0x87
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c92:	0000                	unimp
     c94:	0000                	unimp
     c96:	0000                	unimp
     c98:	073a                	slli	a4,a4,0xe
     c9a:	0000                	unimp
     c9c:	0874                	addi	a3,sp,28
     c9e:	0000                	unimp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ca0:	0002                	c.slli64	zero
     ca2:	0086                	slli	ra,ra,0x1
     ca4:	0874                	addi	a3,sp,28
     ca6:	0000                	unimp
     ca8:	0876                	slli	a6,a6,0x1d
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     caa:	0000                	unimp
    temp = polymult(public_key,N,random_val,48,q,0);
     cac:	000c                	0xc
     cae:	018b0087          	0x18b0087
     cb2:	2432                	fld	fs0,264(sp)
     cb4:	f0090f23          	sb	zero,-226(s2)
     cb8:	1c1a                	slli	s8,s8,0x26
     cba:	088a                	slli	a7,a7,0x2
     cbc:	0000                	unimp
     cbe:	0990                	addi	a2,sp,208
    for(i = 0; i < 48; ++i){
     cc0:	0000                	unimp
     cc2:	0002                	c.slli64	zero
        temp[i] = temp[i] + message[i];
     cc4:	0086                	slli	ra,ra,0x1
	...
     cce:	073a                	slli	a4,a4,0xe
     cd0:	0000                	unimp
     cd2:	087a                	slli	a6,a6,0x1e
     cd4:	0000                	unimp
    for(i = 0; i < 48; ++i){
     cd6:	0002                	c.slli64	zero
     cd8:	0089                	addi	ra,ra,2
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     cda:	088a                	slli	a7,a7,0x2
     cdc:	0000                	unimp
     cde:	0990                	addi	a2,sp,208
     ce0:	0000                	unimp
     ce2:	0002                	c.slli64	zero
     ce4:	0089                	addi	ra,ra,2
	...
    for(i = (2*N); i < (3*N); ++i){
     cee:	073a                	slli	a4,a4,0xe
     cf0:	0000                	unimp
     cf2:	0878                	addi	a4,sp,28
     cf4:	0000                	unimp
     cf6:	0002                	c.slli64	zero
}
     cf8:	0088                	addi	a0,sp,64
     cfa:	0878                	addi	a4,sp,28
     cfc:	0000                	unimp
     cfe:	087a                	slli	a6,a6,0x1e
     d00:	0000                	unimp
     d02:	000c                	0xc
     d04:	0089                	addi	ra,ra,2
     d06:	2432018b          	0x2432018b
        CT[i-(2*N)] = CT[i];
     d0a:	f0090f23          	sb	zero,-226(s2)
     d0e:	1c1a                	slli	s8,s8,0x26
    for(i = (2*N); i < (3*N); ++i){
     d10:	088a                	slli	a7,a7,0x2
     d12:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     d14:	0990                	addi	a2,sp,208
     d16:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     d18:	0002                	c.slli64	zero
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d1a:	0088                	addi	a0,sp,64
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     d24:	073c                	addi	a5,sp,904
     d26:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d28:	0864                	addi	s1,sp,28
     d2a:	0000                	unimp
     d2c:	0002                	c.slli64	zero
     d2e:	0072                	c.slli	zero,0x1c
     d30:	0864                	addi	s1,sp,28
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d32:	0000                	unimp
     d34:	0872                	slli	a6,a6,0x1c
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d36:	0000                	unimp
     d38:	0002                	c.slli64	zero
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d3a:	0085                	addi	ra,ra,1
     d3c:	0872                	slli	a6,a6,0x1c
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d3e:	0000                	unimp
     d40:	0878                	addi	a4,sp,28
     d42:	0000                	unimp
     d44:	000c                	0xc
     d46:	0088                	addi	a0,sp,64
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d48:	2432018b          	0x2432018b
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d4c:	f0090f23          	sb	zero,-226(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d50:	1c1a                	slli	s8,s8,0x26
     d52:	0878                	addi	a4,sp,28
     d54:	0000                	unimp
     d56:	087a                	slli	a6,a6,0x1e
     d58:	0000                	unimp
     d5a:	000e                	c.slli	zero,0x3
     d5c:	0089                	addi	ra,ra,2
     d5e:	2432018b          	0x2432018b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d62:	f0090f23          	sb	zero,-226(s2)
     d66:	311a                	fld	ft2,416(sp)
     d68:	1c24                	addi	s1,sp,568
     d6a:	088a                	slli	a7,a7,0x2
        if(a2[i] <= q/2)
     d6c:	0000                	unimp
     d6e:	0990                	addi	a2,sp,208
     d70:	0000                	unimp
    for (i = 0; i < N; ++i){
     d72:	0002                	c.slli64	zero
     d74:	0072                	c.slli	zero,0x1c
	...
    c = polymult2(secret_key_fp,N,a2,N,0);
     d7e:	07b4                	addi	a3,sp,968
     d80:	0000                	unimp
     d82:	07dc                	addi	a5,sp,964
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d84:	0000                	unimp
     d86:	0001                	nop
     d88:	a25a                	fsd	fs6,256(sp)
     d8a:	0008                	0x8
     d8c:	e600                	fsw	fs0,8(a2)
     d8e:	0008                	0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d90:	0100                	addi	s0,sp,128
     d92:	5a00                	lw	s0,48(a2)
	...
}
     d9c:	07e0                	addi	s0,sp,972
     d9e:	0000                	unimp
     da0:	07e4                	addi	s1,sp,972
     da2:	0000                	unimp
     da4:	0001                	nop
     da6:	e45a                	fsw	fs6,8(sp)
     da8:	e5000007          	0xe5000007
        a2[i-(2*N)] = a2[i];
     dac:	01000007          	0x1000007
     db0:	5b00                	lw	s0,48(a4)
	...
     dba:	07fe                	slli	a5,a5,0x1f
    for(i = (2*N); i < ((2*N)+N); ++i){
     dbc:	0000                	unimp
        if(a2[i] <= q/2)
     dbe:	0802                	c.slli64	a6
     dc0:	0000                	unimp
     dc2:	0001                	nop
            a2[i] = (-1)*(q-a2[i]);
     dc4:	025a                	slli	tp,tp,0x16
     dc6:	0008                	0x8
     dc8:	0300                	addi	s0,sp,384
    for (i = 0; i < N; ++i){
     dca:	0008                	0x8
     dcc:	0100                	addi	s0,sp,128
     dce:	5b00                	lw	s0,48(a4)
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	073c                	addi	a5,sp,904
     dda:	0000                	unimp
        c2[i-(2*N)] = c2[i];
     ddc:	0768                	addi	a0,sp,908
     dde:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     de0:	0002                	c.slli64	zero
  jal x0, default_exc_handler
     de2:	9f31                	0x9f31
     de4:	076c                	addi	a1,sp,908
  mv  x1, x0
     de6:	0000                	unimp
     de8:	0782                	c.slli64	a5
  mv  x2, x1
     dea:	0000                	unimp
  mv  x3, x1
     dec:	0002                	c.slli64	zero
  mv  x4, x1
     dee:	9f31                	0x9f31
  mv  x5, x1
     df0:	0844                	addi	s1,sp,20
  mv  x6, x1
     df2:	0000                	unimp
  mv  x7, x1
     df4:	085c                	addi	a5,sp,20
  mv  x8, x1
     df6:	0000                	unimp
  mv  x9, x1
     df8:	0001                	nop
  mv x10, x1
     dfa:	525f 0009 7c00      	0x7c000009525f
  mv x13, x1
     e00:	0009                	c.nop	2
  mv x14, x1
     e02:	0100                	addi	s0,sp,128
  mv x15, x1
     e04:	5f00                	lw	s0,56(a4)
	...
  mv x20, x1
     e0e:	073a                	slli	a4,a4,0xe
  mv x21, x1
     e10:	0000                	unimp
  mv x22, x1
     e12:	087e                	slli	a6,a6,0x1f
  mv x23, x1
     e14:	0000                	unimp
  mv x24, x1
     e16:	0001                	nop
  mv x25, x1
     e18:	00087e6b          	0x87e6b
  mv x27, x1
     e1c:	8a00                	0x8a00
  mv x28, x1
     e1e:	0008                	0x8
  mv x29, x1
     e20:	0600                	addi	s0,sp,768
  mv x30, x1
     e22:	f300                	fsw	fs0,32(a4)
  mv x31, x1
     e24:	5c01                	li	s8,-32
  la   x2, _stack_start
     e26:	1c31                	addi	s8,s8,-20
     e28:	8a9f 0008 9000      	0x900000088a9f
  la x26, _bss_start
     e2e:	0009                	c.nop	2
     e30:	0100                	addi	s0,sp,128
     e32:	6b00                	flw	fs0,16(a4)
	...
  la x27, _bss_end
     e3c:	073a                	slli	a4,a4,0xe
  bge x26, x27, zero_loop_end
     e3e:	0000                	unimp
     e40:	087e                	slli	a6,a6,0x1f
  sw x0, 0(x26)
     e42:	0000                	unimp
     e44:	0001                	nop
  addi x26, x26, 4
     e46:	00087e6b          	0x87e6b
  ble x26, x27, zero_loop
     e4a:	8a00                	0x8a00
  addi x10, x0, 0
     e4c:	0008                	0x8
     e4e:	0600                	addi	s0,sp,768
  addi x11, x0, 0
     e50:	f300                	fsw	fs0,32(a4)
     e52:	5c01                	li	s8,-32
  jal x1, main
     e54:	1c31                	addi	s8,s8,-20
     e56:	8a9f 0008 9000      	0x900000088a9f
     e5c:	0009                	c.nop	2
     e5e:	0100                	addi	s0,sp,128
     e60:	6b00                	flw	fs0,16(a4)
	...
     e6a:	073a                	slli	a4,a4,0xe
     e6c:	0000                	unimp
     e6e:	087e                	slli	a6,a6,0x1f
     e70:	0000                	unimp
     e72:	0001                	nop
     e74:	00087e6b          	0x87e6b
     e78:	8a00                	0x8a00
     e7a:	0008                	0x8
     e7c:	0600                	addi	s0,sp,768
     e7e:	f300                	fsw	fs0,32(a4)
     e80:	5c01                	li	s8,-32
     e82:	1c31                	addi	s8,s8,-20
     e84:	8a9f 0008 9000      	0x900000088a9f
     e8a:	0009                	c.nop	2
     e8c:	0100                	addi	s0,sp,128
     e8e:	6b00                	flw	fs0,16(a4)
	...
     e98:	073a                	slli	a4,a4,0xe
     e9a:	0000                	unimp
     e9c:	087e                	slli	a6,a6,0x1f
     e9e:	0000                	unimp
     ea0:	0001                	nop
     ea2:	00087e6b          	0x87e6b
     ea6:	8a00                	0x8a00
     ea8:	0008                	0x8
     eaa:	0600                	addi	s0,sp,768
     eac:	f300                	fsw	fs0,32(a4)
     eae:	5c01                	li	s8,-32
     eb0:	1c31                	addi	s8,s8,-20
     eb2:	8a9f 0008 9000      	0x900000088a9f
     eb8:	0009                	c.nop	2
     eba:	0100                	addi	s0,sp,128
     ebc:	6b00                	flw	fs0,16(a4)
	...
     ec6:	073a                	slli	a4,a4,0xe
     ec8:	0000                	unimp
     eca:	087e                	slli	a6,a6,0x1f
     ecc:	0000                	unimp
     ece:	0001                	nop
     ed0:	00087e6b          	0x87e6b
     ed4:	8a00                	0x8a00
     ed6:	0008                	0x8
     ed8:	0600                	addi	s0,sp,768
     eda:	f300                	fsw	fs0,32(a4)
     edc:	5c01                	li	s8,-32
     ede:	1c31                	addi	s8,s8,-20
     ee0:	8a9f 0008 9000      	0x900000088a9f
     ee6:	0009                	c.nop	2
     ee8:	0100                	addi	s0,sp,128
     eea:	6b00                	flw	fs0,16(a4)
	...
     ef4:	073a                	slli	a4,a4,0xe
     ef6:	0000                	unimp
     ef8:	087e                	slli	a6,a6,0x1f
     efa:	0000                	unimp
     efc:	0001                	nop
     efe:	00087e6b          	0x87e6b
     f02:	8a00                	0x8a00
     f04:	0008                	0x8
     f06:	0600                	addi	s0,sp,768
     f08:	f300                	fsw	fs0,32(a4)
     f0a:	5c01                	li	s8,-32
     f0c:	1c31                	addi	s8,s8,-20
     f0e:	8a9f 0008 9000      	0x900000088a9f
     f14:	0009                	c.nop	2
     f16:	0100                	addi	s0,sp,128
     f18:	6b00                	flw	fs0,16(a4)
	...
     f22:	073a                	slli	a4,a4,0xe
     f24:	0000                	unimp
     f26:	087e                	slli	a6,a6,0x1f
     f28:	0000                	unimp
     f2a:	0001                	nop
     f2c:	00087e6b          	0x87e6b
     f30:	8a00                	0x8a00
     f32:	0008                	0x8
     f34:	0600                	addi	s0,sp,768
     f36:	f300                	fsw	fs0,32(a4)
     f38:	5c01                	li	s8,-32
     f3a:	1c31                	addi	s8,s8,-20
     f3c:	8a9f 0008 9000      	0x900000088a9f
     f42:	0009                	c.nop	2
     f44:	0100                	addi	s0,sp,128
     f46:	6b00                	flw	fs0,16(a4)
	...
     f50:	04a4                	addi	s1,sp,584
     f52:	0000                	unimp
     f54:	04f6                	slli	s1,s1,0x1d
     f56:	0000                	unimp
     f58:	0001                	nop
     f5a:	f65a                	fsw	fs6,44(sp)
     f5c:	0004                	0x4
     f5e:	ff00                	fsw	fs0,56(a4)
     f60:	0004                	0x4
     f62:	0100                	addi	s0,sp,128
     f64:	5b00                	lw	s0,48(a4)
     f66:	04ff                	0x4ff
     f68:	0000                	unimp
     f6a:	06e2                	slli	a3,a3,0x18
     f6c:	0000                	unimp
     f6e:	0004                	0x4
     f70:	9f5a01f3          	0x9f5a01f3
	...
     f7c:	04a4                	addi	s1,sp,584
     f7e:	0000                	unimp
     f80:	04f4                	addi	a3,sp,588
     f82:	0000                	unimp
     f84:	0001                	nop
     f86:	0004f45b          	0x4f45b
     f8a:	c400                	sw	s0,8(s0)
     f8c:	0005                	c.nop	1
     f8e:	0100                	addi	s0,sp,128
     f90:	5900                	lw	s0,48(a0)
     f92:	05c4                	addi	s1,sp,708
     f94:	0000                	unimp
     f96:	05de                	slli	a1,a1,0x17
     f98:	0000                	unimp
     f9a:	01870003          	lb	zero,24(a4)
     f9e:	de9f 0005 f200      	0xf2000005de9f
     fa4:	0005                	c.nop	1
     fa6:	0400                	addi	s0,sp,512
     fa8:	f300                	fsw	fs0,32(a4)
     faa:	5b01                	li	s6,-32
     fac:	f29f 0005 d000      	0xd0000005f29f
     fb2:	0006                	c.slli	zero,0x1
     fb4:	0100                	addi	s0,sp,128
     fb6:	5900                	lw	s0,48(a0)
     fb8:	06d0                	addi	a2,sp,836
     fba:	0000                	unimp
     fbc:	06e2                	slli	a3,a3,0x18
     fbe:	0000                	unimp
     fc0:	01870003          	lb	zero,24(a4)
     fc4:	009f 0000 0000      	0x9f
     fca:	0000                	unimp
     fcc:	a400                	fsd	fs0,8(s0)
     fce:	0004                	0x4
     fd0:	f200                	fsw	fs0,32(a2)
     fd2:	0004                	0x4
     fd4:	0100                	addi	s0,sp,128
     fd6:	5c00                	lw	s0,56(s0)
     fd8:	04f2                	slli	s1,s1,0x1c
     fda:	0000                	unimp
     fdc:	0532                	slli	a0,a0,0xc
int main(){
     fde:	0000                	unimp
     fe0:	0001                	nop
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fe2:	0005326b          	0x5326b
     fe6:	3c00                	fld	fs0,56(s0)
     fe8:	0005                	c.nop	1
     fea:	0400                	addi	s0,sp,512
     fec:	f300                	fsw	fs0,32(a4)
     fee:	5c01                	li	s8,-32
int main(){
     ff0:	3c9f 0005 8800      	0x880000053c9f
     ff6:	0005                	c.nop	1
     ff8:	0100                	addi	s0,sp,128
     ffa:	6b00                	flw	fs0,16(a4)
     ffc:	0588                	addi	a0,sp,704
     ffe:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
    1000:	06e2                	slli	a3,a3,0x18
    1002:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1004:	0004                	0x4
    resultkon[0] = 0xaaaaaaa0;
    1006:	9f5c01f3          	0x9f5c01f3
	...
    keys = generate_keys(N, p, q);
    1012:	04a4                	addi	s1,sp,584
    1014:	0000                	unimp
    1016:	04ff                	0x4ff
    1018:	0000                	unimp
    101a:	0001                	nop
    resultkon[0] = 0xaaaaaaa0;
    101c:	ff5d                	bnez	a4,fda <memset+0xa4>
    resultkon[0] = 0xaaaaaaa1;
    101e:	0004                	0x4
    1020:	d600                	sw	s0,40(a2)
    keys = generate_keys(N, p, q);
    1022:	0005                	c.nop	1
    resultkon[0] = 0xaaaaaaa1;
    1024:	0100                	addi	s0,sp,128
    1026:	6300                	flw	fs0,0(a4)
    for(i = 0; i < N; ++i){
    1028:	05d6                	slli	a1,a1,0x15
    102a:	0000                	unimp
        secret_key_f[i] = keys[i];
    102c:	05f2                	slli	a1,a1,0x1c
    102e:	0000                	unimp
    1030:	0004                	0x4
    1032:	9f5d01f3          	0x9f5d01f3
    1036:	05f2                	slli	a1,a1,0x1c
    for(i = 0; i < N; ++i){
    1038:	0000                	unimp
    103a:	06e2                	slli	a3,a3,0x18
    103c:	0000                	unimp
    for(i = N; i < (2*N); ++i){
    103e:	0001                	nop
    1040:	00000063          	beqz	zero,1040 <main+0x62>
    1044:	0000                	unimp
    1046:	0000                	unimp
    1048:	a400                	fsd	fs0,8(s0)
        secret_key_fp[i-(2*N)] = keys[i];
    104a:	0004                	0x4
    104c:	ff00                	fsw	fs0,56(a4)
    104e:	0004                	0x4
    1050:	0100                	addi	s0,sp,128
    1052:	5e00                	lw	s0,56(a2)
    for(i = (2*N); i < (3*N); ++i){
    1054:	04ff                	0x4ff
    1056:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
    1058:	05d4                	addi	a3,sp,708
    105a:	0000                	unimp
    105c:	0001                	nop
    105e:	d462                	sw	s8,40(sp)
    1060:	0005                	c.nop	1
    1062:	f200                	fsw	fs0,32(a2)
        public_key[i-(4*N)] = keys[i];
    1064:	0005                	c.nop	1
    1066:	0400                	addi	s0,sp,512
    1068:	f300                	fsw	fs0,32(a4)
    106a:	5e01                	li	t3,-32
    106c:	f29f 0005 e200      	0xe2000005f29f
    for(i = (4*N); i < (5*N); ++i){
    1072:	0006                	c.slli	zero,0x1
    1074:	0100                	addi	s0,sp,128
    1076:	6200                	flw	fs0,0(a2)
	...
        ring_poly[i-(5*N)] = keys[i];
    1080:	0534                	addi	a3,sp,648
    1082:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
    1084:	053c                	addi	a5,sp,648
    1086:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    1088:	0001                	nop
    108a:	0005886b          	0x5886b
    108e:	e600                	fsw	fs0,8(a2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1090:	0005                	c.nop	1
    1092:	0100                	addi	s0,sp,128
    1094:	6b00                	flw	fs0,16(a4)
    1096:	05f2                	slli	a1,a1,0x1c
    resultkon[0] = 0xbbbbbbb1;
    1098:	0000                	unimp
    109a:	06e2                	slli	a3,a3,0x18
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    109c:	0000                	unimp
    109e:	0001                	nop
    resultkon[0] = 0xbbbbbbb0;
    10a0:	0000006b          	0x6b
    resultkon[0] = 0xbbbbbbb1;
    10a4:	0000                	unimp
    resultkon[0] = 0xccccccc0;
    10a6:	0000                	unimp
    10a8:	a600                	fsd	fs0,8(a2)
    10aa:	0005                	c.nop	1
    10ac:	b700                	fsd	fs0,40(a4)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10ae:	0005                	c.nop	1
    resultkon[0] = 0xccccccc0;
    10b0:	0100                	addi	s0,sp,128
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10b2:	5f00                	lw	s0,56(a4)
    10b4:	05f2                	slli	a1,a1,0x1c
    10b6:	0000                	unimp
    10b8:	05fa                	slli	a1,a1,0x1e
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	005f 0000 0000      	0x5f
    10c4:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    10c6:	0200                	addi	s0,sp,256
    10c8:	0005                	c.nop	1
            resultkon[0] = 0xDEDEDEDE;
    10ca:	0800                	addi	s0,sp,16
    10cc:	0005                	c.nop	1
    resultkon[0] = 0xccccccc1;	
    10ce:	0200                	addi	s0,sp,256
    10d0:	3000                	fld	fs0,32(s0)
            resultkon[0] = 0xDEDEDEDE;
    10d2:	089f 0005 1300      	0x13000005089f
    for(i = 0; i < 32; ++i){
    10d8:	0005                	c.nop	1
        if(!(message[i] == Dec_Message[i])){
    10da:	0100                	addi	s0,sp,128
    10dc:	5d00                	lw	s0,56(a0)
    10de:	0514                	addi	a3,sp,640
    10e0:	0000                	unimp
    10e2:	0518                	addi	a4,sp,640
    10e4:	0000                	unimp
    10e6:	0002                	c.slli64	zero
    10e8:	9f30                	0x9f30
            resultkon[0] = 0xBABABABA;
    10ea:	0518                	addi	a4,sp,640
    10ec:	0000                	unimp
    10ee:	051e                	slli	a0,a0,0x7
    10f0:	0000                	unimp
    10f2:	0001                	nop
}
    10f4:	1e5d                	addi	t3,t3,-9
    10f6:	0005                	c.nop	1
    10f8:	2200                	fld	fs0,0(a2)
    10fa:	0005                	c.nop	1
    10fc:	0100                	addi	s0,sp,128
    10fe:	5f00                	lw	s0,56(a4)
    1100:	0522                	slli	a0,a0,0x8
    1102:	0000                	unimp
    1104:	053c                	addi	a5,sp,648
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	3c69                	jal	ba4 <generate_keys+0x214>
            resultkon[0] = 0xDEDEDEDE;
    110c:	0005                	c.nop	1
    for(i = 0; i < 32; ++i){
    110e:	4c00                	lw	s0,24(s0)
    1110:	0005                	c.nop	1
    1112:	0100                	addi	s0,sp,128
    1114:	5d00                	lw	s0,56(a0)
    1116:	054c                	addi	a1,sp,644
    1118:	0000                	unimp
    111a:	0552                	slli	a0,a0,0x14
    111c:	0000                	unimp
    111e:	7f7d0003          	lb	zero,2039(s10)
    1122:	529f 0005 6400      	0x64000005529f
    1128:	0005                	c.nop	1
    112a:	0100                	addi	s0,sp,128
    112c:	5d00                	lw	s0,56(a0)
    112e:	0564                	addi	s1,sp,652
    1130:	0000                	unimp
    1132:	056a                	slli	a0,a0,0x1a
    1134:	0000                	unimp
    1136:	7f7d0003          	lb	zero,2039(s10)
    113a:	6a9f 0005 6c00      	0x6c0000056a9f
    1140:	0005                	c.nop	1
    1142:	0100                	addi	s0,sp,128
    1144:	5d00                	lw	s0,56(a0)
    1146:	056c                	addi	a1,sp,652
    1148:	0000                	unimp
    114a:	0582                	c.slli64	a1
    114c:	0000                	unimp
    114e:	0001                	nop
    1150:	825f 0005 9600      	0x96000005825f
    1156:	0005                	c.nop	1
    1158:	0100                	addi	s0,sp,128
    115a:	6900                	flw	fs0,16(a0)
    115c:	0596                	slli	a1,a1,0x5
    115e:	0000                	unimp
    1160:	05a6                	slli	a1,a1,0x9
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	b85f 0005 d200      	0xd2000005b85f
    116c:	0005                	c.nop	1
    116e:	0100                	addi	s0,sp,128
    1170:	5900                	lw	s0,48(a0)
    1172:	0600                	addi	s0,sp,768
    1174:	0000                	unimp
    1176:	0604                	addi	s1,sp,768
    1178:	0000                	unimp
    117a:	0002                	c.slli64	zero
    117c:	9f30                	0x9f30
    117e:	0604                	addi	s1,sp,768
    1180:	0000                	unimp
    1182:	060a                	slli	a2,a2,0x2
    1184:	0000                	unimp
    1186:	0001                	nop
    1188:	165e                	slli	a2,a2,0x37
    118a:	0006                	c.slli	zero,0x1
    118c:	1a00                	addi	s0,sp,304
    118e:	0006                	c.slli	zero,0x1
    1190:	0200                	addi	s0,sp,256
    1192:	3000                	fld	fs0,32(s0)
    1194:	1a9f 0006 2200      	0x220000061a9f
    119a:	0006                	c.slli	zero,0x1
    119c:	0100                	addi	s0,sp,128
    119e:	5d00                	lw	s0,56(a0)
    11a0:	0622                	slli	a2,a2,0x8
    11a2:	0000                	unimp
    11a4:	062a                	slli	a2,a2,0xa
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	2a5f 0006 3000      	0x300000062a5f
    11b0:	0006                	c.slli	zero,0x1
    11b2:	0100                	addi	s0,sp,128
    11b4:	5d00                	lw	s0,56(a0)
    11b6:	0632                	slli	a2,a2,0xc
    11b8:	0000                	unimp
    11ba:	0638                	addi	a4,sp,776
    11bc:	0000                	unimp
    11be:	0001                	nop
    11c0:	385e                	fld	fa6,496(sp)
    11c2:	0006                	c.slli	zero,0x1
    11c4:	4800                	lw	s0,16(s0)
    11c6:	0006                	c.slli	zero,0x1
    11c8:	0100                	addi	s0,sp,128
    11ca:	5f00                	lw	s0,56(a4)
    11cc:	0648                	addi	a0,sp,772
    11ce:	0000                	unimp
    11d0:	064c                	addi	a1,sp,772
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	4c5e                	lw	s8,212(sp)
    11d8:	0006                	c.slli	zero,0x1
    11da:	5600                	lw	s0,40(a2)
    11dc:	0006                	c.slli	zero,0x1
    11de:	0300                	addi	s0,sp,384
    11e0:	7e00                	flw	fs0,56(a2)
    11e2:	9f7f                	0x9f7f
    11e4:	0656                	slli	a2,a2,0x15
    11e6:	0000                	unimp
    11e8:	0658                	addi	a4,sp,772
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	585e                	lw	a6,244(sp)
    11f0:	0006                	c.slli	zero,0x1
    11f2:	6800                	flw	fs0,16(s0)
    11f4:	0006                	c.slli	zero,0x1
    11f6:	0100                	addi	s0,sp,128
    11f8:	5d00                	lw	s0,56(a0)
    11fa:	0668                	addi	a0,sp,780
    11fc:	0000                	unimp
    11fe:	066e                	slli	a2,a2,0x1b
    1200:	0000                	unimp
    1202:	7f7d0003          	lb	zero,2039(s10)
    1206:	6e9f 0006 7000      	0x700000066e9f
    120c:	0006                	c.slli	zero,0x1
    120e:	0100                	addi	s0,sp,128
    1210:	5d00                	lw	s0,56(a0)
    1212:	0670                	addi	a2,sp,780
    1214:	0000                	unimp
    1216:	067c                	addi	a5,sp,780
    1218:	0000                	unimp
    121a:	0001                	nop
    121c:	7c5f 0006 8400      	0x840000067c5f
    1222:	0006                	c.slli	zero,0x1
    1224:	0300                	addi	s0,sp,384
    1226:	7f00                	flw	fs0,56(a4)
    1228:	9f7f                	0x9f7f
    122a:	0684                	addi	s1,sp,832
    122c:	0000                	unimp
    122e:	0686                	slli	a3,a3,0x1
    1230:	0000                	unimp
    1232:	0001                	nop
    1234:	865f 0006 9600      	0x96000006865f
    123a:	0006                	c.slli	zero,0x1
    123c:	0100                	addi	s0,sp,128
    123e:	5d00                	lw	s0,56(a0)
    1240:	0696                	slli	a3,a3,0x5
    1242:	0000                	unimp
    1244:	069c                	addi	a5,sp,832
    1246:	0000                	unimp
    1248:	7f7d0003          	lb	zero,2039(s10)
    124c:	9c9f 0006 9e00      	0x9e0000069c9f
    1252:	0006                	c.slli	zero,0x1
    1254:	0100                	addi	s0,sp,128
    1256:	5d00                	lw	s0,56(a0)
    1258:	069e                	slli	a3,a3,0x7
    125a:	0000                	unimp
    125c:	06aa                	slli	a3,a3,0xa
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	aa5e                	fsd	fs7,272(sp)
    1264:	0006                	c.slli	zero,0x1
    1266:	b600                	fsd	fs0,40(a2)
    1268:	0006                	c.slli	zero,0x1
    126a:	0300                	addi	s0,sp,384
    126c:	7e00                	flw	fs0,56(a2)
    126e:	9f7f                	0x9f7f
    1270:	06b6                	slli	a3,a3,0xd
    1272:	0000                	unimp
    1274:	06b8                	addi	a4,sp,840
    1276:	0000                	unimp
    1278:	0001                	nop
    127a:	b85e                	fsd	fs7,48(sp)
    127c:	0006                	c.slli	zero,0x1
    127e:	be00                	fsd	fs0,56(a2)
    1280:	0006                	c.slli	zero,0x1
    1282:	0100                	addi	s0,sp,128
    1284:	5f00                	lw	s0,56(a4)
    1286:	06be                	slli	a3,a3,0xf
    1288:	0000                	unimp
    128a:	06d0                	addi	a2,sp,836
    128c:	0000                	unimp
    128e:	0001                	nop
    1290:	d05d                	beqz	s0,1236 <_endtext+0x10e>
    1292:	0006                	c.slli	zero,0x1
    1294:	e200                	fsw	fs0,0(a2)
    1296:	0006                	c.slli	zero,0x1
    1298:	0100                	addi	s0,sp,128
    129a:	5900                	lw	s0,48(a0)
	...
    12a4:	05a6                	slli	a1,a1,0x9
    12a6:	0000                	unimp
    12a8:	000005b7          	lui	a1,0x0
    12ac:	0001                	nop
    12ae:	f25e                	fsw	fs7,36(sp)
    12b0:	0005                	c.nop	1
    12b2:	f600                	fsw	fs0,40(a2)
    12b4:	0005                	c.nop	1
    12b6:	0100                	addi	s0,sp,128
    12b8:	5e00                	lw	s0,56(a2)
	...
    12c2:	05c8                	addi	a0,sp,708
    12c4:	0000                	unimp
    12c6:	05f2                	slli	a1,a1,0x1c
    12c8:	0000                	unimp
    12ca:	0006                	c.slli	zero,0x1
    12cc:	00175c03          	lhu	s8,1(a4)
    12d0:	9f00                	0x9f00
	...
    12da:	04f0                	addi	a2,sp,588
    12dc:	0000                	unimp
    12de:	05e4                	addi	s1,sp,716
    12e0:	0000                	unimp
    12e2:	0002                	c.slli64	zero
    12e4:	008a                	slli	ra,ra,0x2
    12e6:	05f2                	slli	a1,a1,0x1c
    12e8:	0000                	unimp
    12ea:	06e2                	slli	a3,a3,0x18
    12ec:	0000                	unimp
    12ee:	0002                	c.slli64	zero
    12f0:	008a                	slli	ra,ra,0x2
	...
    12fa:	04f0                	addi	a2,sp,588
    12fc:	0000                	unimp
    12fe:	05dc                	addi	a5,sp,708
    1300:	0000                	unimp
    1302:	0002                	c.slli64	zero
    1304:	0086                	slli	ra,ra,0x1
    1306:	05dc                	addi	a5,sp,708
    1308:	0000                	unimp
    130a:	05de                	slli	a1,a1,0x17
    130c:	0000                	unimp
    130e:	000c                	0xc
    1310:	008a                	slli	ra,ra,0x2
    1312:	24320187          	0x24320187
    1316:	f0090f23          	sb	zero,-226(s2)
    131a:	1c1a                	slli	s8,s8,0x26
    131c:	05de                	slli	a1,a1,0x17
    131e:	0000                	unimp
    1320:	05e4                	addi	s1,sp,716
    1322:	0000                	unimp
    1324:	000d                	c.nop	3
    1326:	008a                	slli	ra,ra,0x2
    1328:	325b01f3          	0x325b01f3
    132c:	2324                	fld	fs1,64(a4)
    132e:	1af0090f          	0x1af0090f
    1332:	f21c                	fsw	fa5,32(a2)
    1334:	0005                	c.nop	1
    1336:	e200                	fsw	fs0,0(a2)
    1338:	0006                	c.slli	zero,0x1
    133a:	0200                	addi	s0,sp,256
    133c:	8600                	0x8600
	...
    1346:	1600                	addi	s0,sp,800
    1348:	0006                	c.slli	zero,0x1
    134a:	4800                	lw	s0,16(s0)
    134c:	0006                	c.slli	zero,0x1
    134e:	0100                	addi	s0,sp,128
    1350:	5a00                	lw	s0,48(a2)
    1352:	0658                	addi	a4,sp,772
    1354:	0000                	unimp
    1356:	06d0                	addi	a2,sp,836
    1358:	0000                	unimp
    135a:	0001                	nop
    135c:	005a                	c.slli	zero,0x16
    135e:	0000                	unimp
    1360:	0000                	unimp
    1362:	0000                	unimp
    1364:	f000                	fsw	fs0,32(s0)
    1366:	0004                	0x4
    1368:	0800                	addi	s0,sp,16
    136a:	0005                	c.nop	1
    136c:	0200                	addi	s0,sp,256
    136e:	8800                	0x8800
    1370:	0800                	addi	s0,sp,16
    1372:	0005                	c.nop	1
    1374:	c400                	sw	s0,8(s0)
    1376:	0005                	c.nop	1
    1378:	0200                	addi	s0,sp,256
    137a:	8500                	0x8500
    137c:	c400                	sw	s0,8(s0)
    137e:	0005                	c.nop	1
    1380:	e000                	fsw	fs0,0(s0)
    1382:	0005                	c.nop	1
    1384:	0200                	addi	s0,sp,256
    1386:	8800                	0x8800
    1388:	e000                	fsw	fs0,0(s0)
    138a:	0005                	c.nop	1
    138c:	e400                	fsw	fs0,8(s0)
    138e:	0005                	c.nop	1
    1390:	0f00                	addi	s0,sp,912
    1392:	8a00                	0x8a00
    1394:	f300                	fsw	fs0,32(a4)
    1396:	5b01                	li	s6,-32
    1398:	2432                	fld	fs0,264(sp)
    139a:	f0090f23          	sb	zero,-226(s2)
    139e:	311a                	fld	ft2,416(sp)
    13a0:	1c24                	addi	s1,sp,568
    13a2:	05f2                	slli	a1,a1,0x1c
    13a4:	0000                	unimp
    13a6:	06d0                	addi	a2,sp,836
    13a8:	0000                	unimp
    13aa:	0002                	c.slli64	zero
    13ac:	0085                	addi	ra,ra,1
    13ae:	06d0                	addi	a2,sp,836
    13b0:	0000                	unimp
    13b2:	06e2                	slli	a3,a3,0x18
    13b4:	0000                	unimp
    13b6:	0002                	c.slli64	zero
    13b8:	0088                	addi	a0,sp,64
	...
    13c2:	0502                	c.slli64	a0
    13c4:	0000                	unimp
    13c6:	0508                	addi	a0,sp,640
    13c8:	0000                	unimp
    13ca:	0002                	c.slli64	zero
    13cc:	0084                	addi	s1,sp,64
    13ce:	0508                	addi	a0,sp,640
    13d0:	0000                	unimp
    13d2:	05cc                	addi	a1,sp,708
    13d4:	0000                	unimp
    13d6:	0002                	c.slli64	zero
    13d8:	0072                	c.slli	zero,0x1c
    13da:	05cc                	addi	a1,sp,708
    13dc:	0000                	unimp
    13de:	05d8                	addi	a4,sp,708
    13e0:	0000                	unimp
    13e2:	0002                	c.slli64	zero
    13e4:	0084                	addi	s1,sp,64
    13e6:	05d8                	addi	a4,sp,708
    13e8:	0000                	unimp
    13ea:	05e0                	addi	s0,sp,716
    13ec:	0000                	unimp
    13ee:	000d                	c.nop	3
    13f0:	0088                	addi	a0,sp,64
    13f2:	325d01f3          	0x325d01f3
    13f6:	2324                	fld	fs1,64(a4)
    13f8:	1af0090f          	0x1af0090f
    13fc:	e01c                	fsw	fa5,0(s0)
    13fe:	0005                	c.nop	1
    1400:	e400                	fsw	fs0,8(s0)
    1402:	0005                	c.nop	1
    1404:	1a00                	addi	s0,sp,304
    1406:	8a00                	0x8a00
    1408:	f300                	fsw	fs0,32(a4)
    140a:	5b01                	li	s6,-32
    140c:	2432                	fld	fs0,264(sp)
    140e:	f0090f23          	sb	zero,-226(s2)
    1412:	311a                	fld	ft2,416(sp)
    1414:	1c24                	addi	s1,sp,568
    1416:	325d01f3          	0x325d01f3
    141a:	2324                	fld	fs1,64(a4)
    141c:	1af0090f          	0x1af0090f
    1420:	f21c                	fsw	fa5,32(a2)
    1422:	0005                	c.nop	1
    1424:	e200                	fsw	fs0,0(a2)
    1426:	0006                	c.slli	zero,0x1
    1428:	0200                	addi	s0,sp,256
    142a:	7200                	flw	fs0,32(a2)
	...
    1434:	f000                	fsw	fs0,32(s0)
    1436:	0004                	0x4
    1438:	de00                	sw	s0,56(a2)
    143a:	0005                	c.nop	1
    143c:	0100                	addi	s0,sp,128
    143e:	6700                	flw	fs0,8(a4)
    1440:	05de                	slli	a1,a1,0x17
    1442:	0000                	unimp
    1444:	05f2                	slli	a1,a1,0x1c
    1446:	0000                	unimp
    1448:	0006                	c.slli	zero,0x1
    144a:	315b01f3          	0x315b01f3
    144e:	9f1c                	0x9f1c
    1450:	05f2                	slli	a1,a1,0x1c
    1452:	0000                	unimp
    1454:	06e2                	slli	a3,a3,0x18
    1456:	0000                	unimp
    1458:	0001                	nop
    145a:	00000067          	jr	zero # 0 <__DYNAMIC>
    145e:	0000                	unimp
    1460:	0000                	unimp
    1462:	f000                	fsw	fs0,32(s0)
    1464:	0004                	0x4
    1466:	de00                	sw	s0,56(a2)
    1468:	0005                	c.nop	1
    146a:	0100                	addi	s0,sp,128
    146c:	6700                	flw	fs0,8(a4)
    146e:	05de                	slli	a1,a1,0x17
    1470:	0000                	unimp
    1472:	05f2                	slli	a1,a1,0x1c
    1474:	0000                	unimp
    1476:	0006                	c.slli	zero,0x1
    1478:	315b01f3          	0x315b01f3
    147c:	9f1c                	0x9f1c
    147e:	05f2                	slli	a1,a1,0x1c
    1480:	0000                	unimp
    1482:	06e2                	slli	a3,a3,0x18
    1484:	0000                	unimp
    1486:	0001                	nop
    1488:	00000067          	jr	zero # 0 <__DYNAMIC>
    148c:	0000                	unimp
    148e:	0000                	unimp
    1490:	f000                	fsw	fs0,32(s0)
    1492:	0004                	0x4
    1494:	de00                	sw	s0,56(a2)
    1496:	0005                	c.nop	1
    1498:	0100                	addi	s0,sp,128
    149a:	6700                	flw	fs0,8(a4)
    149c:	05de                	slli	a1,a1,0x17
    149e:	0000                	unimp
    14a0:	05f2                	slli	a1,a1,0x1c
    14a2:	0000                	unimp
    14a4:	0006                	c.slli	zero,0x1
    14a6:	315b01f3          	0x315b01f3
    14aa:	9f1c                	0x9f1c
    14ac:	05f2                	slli	a1,a1,0x1c
    14ae:	0000                	unimp
    14b0:	06e2                	slli	a3,a3,0x18
    14b2:	0000                	unimp
    14b4:	0001                	nop
    14b6:	00000067          	jr	zero # 0 <__DYNAMIC>
    14ba:	0000                	unimp
    14bc:	0000                	unimp
    14be:	fe00                	fsw	fs0,56(a2)
    14c0:	0004                	0x4
    14c2:	2200                	fld	fs0,0(a2)
    14c4:	0005                	c.nop	1
    14c6:	0100                	addi	s0,sp,128
    14c8:	6900                	flw	fs0,16(a0)
    14ca:	0522                	slli	a0,a0,0x8
    14cc:	0000                	unimp
    14ce:	053c                	addi	a5,sp,648
    14d0:	0000                	unimp
    14d2:	7f830003          	lb	zero,2040(t1)
    14d6:	3c9f 0005 8200      	0x820000053c9f
    14dc:	0005                	c.nop	1
    14de:	0100                	addi	s0,sp,128
    14e0:	6900                	flw	fs0,16(a0)
    14e2:	0582                	c.slli64	a1
    14e4:	0000                	unimp
    14e6:	05d6                	slli	a1,a1,0x15
    14e8:	0000                	unimp
    14ea:	7f830003          	lb	zero,2040(t1)
    14ee:	d69f 0005 f200      	0xf2000005d69f
    14f4:	0005                	c.nop	1
    14f6:	0600                	addi	s0,sp,768
    14f8:	f300                	fsw	fs0,32(a4)
    14fa:	5d01                	li	s10,-32
    14fc:	1c31                	addi	s8,s8,-20
    14fe:	f29f 0005 e200      	0xe2000005f29f
    1504:	0006                	c.slli	zero,0x1
    1506:	0300                	addi	s0,sp,384
    1508:	8300                	0x8300
    150a:	9f7f                	0x9f7f
	...
    1514:	0334                	addi	a3,sp,392
    1516:	0000                	unimp
    1518:	03b0                	addi	a2,sp,456
    151a:	0000                	unimp
    151c:	0001                	nop
    151e:	b05a                	fsd	fs6,32(sp)
    1520:	b5000003          	lb	zero,-1200(zero) # fffffb50 <_stack_start+0xfffefb50>
    1524:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1528:	5b00                	lw	s0,48(a4)
    152a:	03b5                	addi	t2,t2,13
    152c:	0000                	unimp
    152e:	03dc                	addi	a5,sp,452
    1530:	0000                	unimp
    1532:	0004                	0x4
    1534:	9f5a01f3          	0x9f5a01f3
    1538:	03dc                	addi	a5,sp,452
    153a:	0000                	unimp
    153c:	03fe                	slli	t2,t2,0x1f
    153e:	0000                	unimp
    1540:	0001                	nop
    1542:	fe5a                	fsw	fs6,60(sp)
    1544:	a4000003          	lb	zero,-1472(zero) # fffffa40 <_stack_start+0xfffefa40>
    1548:	0004                	0x4
    154a:	0400                	addi	s0,sp,512
    154c:	f300                	fsw	fs0,32(a4)
    154e:	5a01                	li	s4,-32
    1550:	009f 0000 0000      	0x9f
    1556:	0000                	unimp
    1558:	3400                	fld	fs0,40(s0)
    155a:	ae000003          	lb	zero,-1312(zero) # fffffae0 <_stack_start+0xfffefae0>
    155e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1562:	5b00                	lw	s0,48(a4)
    1564:	03ae                	slli	t2,t2,0xb
    1566:	0000                	unimp
    1568:	03b5                	addi	t2,t2,13
    156a:	0000                	unimp
    156c:	0001                	nop
    156e:	b55c                	fsd	fa5,168(a0)
    1570:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    1574:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1578:	8800                	0x8800
    157a:	9f01                	0x9f01
    157c:	03dc                	addi	a5,sp,452
    157e:	0000                	unimp
    1580:	03fe                	slli	t2,t2,0x1f
    1582:	0000                	unimp
    1584:	0001                	nop
    1586:	0003fe5b          	0x3fe5b
    158a:	9200                	0x9200
    158c:	0004                	0x4
    158e:	0300                	addi	s0,sp,384
    1590:	8800                	0x8800
    1592:	9f01                	0x9f01
    1594:	0492                	slli	s1,s1,0x4
    1596:	0000                	unimp
    1598:	04a4                	addi	s1,sp,584
    159a:	0000                	unimp
    159c:	0004                	0x4
    159e:	9f5b01f3          	0x9f5b01f3
	...
    15aa:	0334                	addi	a3,sp,392
    15ac:	0000                	unimp
    15ae:	03a6                	slli	t2,t2,0x9
    15b0:	0000                	unimp
    15b2:	0001                	nop
    15b4:	a65c                	fsd	fa5,136(a2)
    15b6:	b5000003          	lb	zero,-1200(zero) # fffffb50 <_stack_start+0xfffefb50>
    15ba:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15be:	6000                	flw	fs0,0(s0)
    15c0:	03b5                	addi	t2,t2,13
    15c2:	0000                	unimp
    15c4:	03dc                	addi	a5,sp,452
    15c6:	0000                	unimp
    15c8:	bc780003          	lb	zero,-1081(a6)
    15cc:	dc7f                	0xdc7f
    15ce:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    15d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15d6:	6000                	flw	fs0,0(s0)
    15d8:	03fe                	slli	t2,t2,0x1f
    15da:	0000                	unimp
    15dc:	0482                	c.slli64	s1
    15de:	0000                	unimp
    15e0:	bc780003          	lb	zero,-1081(a6)
    15e4:	827f                	0x827f
    15e6:	0004                	0x4
    15e8:	a400                	fsd	fs0,8(s0)
    15ea:	0004                	0x4
    15ec:	0300                	addi	s0,sp,384
    15ee:	9100                	0x9100
    15f0:	7fbc                	flw	fa5,120(a5)
	...
    15fa:	0334                	addi	a3,sp,392
    15fc:	0000                	unimp
    15fe:	039c                	addi	a5,sp,448
    1600:	0000                	unimp
    1602:	0001                	nop
    1604:	9c5d                	0x9c5d
    1606:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    160a:	0004                	0x4
    160c:	0100                	addi	s0,sp,128
    160e:	6300                	flw	fs0,0(a4)
    1610:	0488                	addi	a0,sp,576
    1612:	0000                	unimp
    1614:	04a4                	addi	s1,sp,584
    1616:	0000                	unimp
    1618:	0004                	0x4
    161a:	9f5d01f3          	0x9f5d01f3
	...
    1626:	0334                	addi	a3,sp,392
    1628:	0000                	unimp
    162a:	039e                	slli	t2,t2,0x7
    162c:	0000                	unimp
    162e:	0001                	nop
    1630:	9e5e                	add	t3,t3,s7
    1632:	98000003          	lb	zero,-1664(zero) # fffff980 <_stack_start+0xfffef980>
    1636:	0004                	0x4
    1638:	0100                	addi	s0,sp,128
    163a:	6b00                	flw	fs0,16(a4)
    163c:	0498                	addi	a4,sp,576
    163e:	0000                	unimp
    1640:	04a4                	addi	s1,sp,584
    1642:	0000                	unimp
    1644:	0004                	0x4
    1646:	9f5e01f3          	0x9f5e01f3
	...
    1652:	0390                	addi	a2,sp,448
    1654:	0000                	unimp
    1656:	03d4                	addi	a3,sp,452
    1658:	0000                	unimp
    165a:	0002                	c.slli64	zero
    165c:	0082                	c.slli64	ra
    165e:	03d4                	addi	a3,sp,452
    1660:	0000                	unimp
    1662:	03dc                	addi	a5,sp,452
    1664:	0000                	unimp
    1666:	0002                	c.slli64	zero
    1668:	0089                	addi	ra,ra,2
    166a:	03dc                	addi	a5,sp,452
    166c:	0000                	unimp
    166e:	03fe                	slli	t2,t2,0x1f
    1670:	0000                	unimp
    1672:	0002                	c.slli64	zero
    1674:	0082                	c.slli64	ra
    1676:	03fe                	slli	t2,t2,0x1f
    1678:	0000                	unimp
    167a:	0426                	slli	s0,s0,0x9
    167c:	0000                	unimp
    167e:	0002                	c.slli64	zero
    1680:	0089                	addi	ra,ra,2
    1682:	0438                	addi	a4,sp,520
    1684:	0000                	unimp
    1686:	0460                	addi	s0,sp,524
    1688:	0000                	unimp
    168a:	0002                	c.slli64	zero
    168c:	0089                	addi	ra,ra,2
	...
    1696:	0398                	addi	a4,sp,448
    1698:	0000                	unimp
    169a:	03a6                	slli	t2,t2,0x9
    169c:	0000                	unimp
    169e:	0002                	c.slli64	zero
    16a0:	9f30                	0x9f30
    16a2:	03a6                	slli	t2,t2,0x9
    16a4:	0000                	unimp
    16a6:	03b5                	addi	t2,t2,13
    16a8:	0000                	unimp
    16aa:	0001                	nop
    16ac:	dc5e                	sw	s7,56(sp)
    16ae:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    16b2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16b6:	5e00                	lw	s0,56(a2)
    16b8:	0426                	slli	s0,s0,0x9
    16ba:	0000                	unimp
    16bc:	0438                	addi	a4,sp,520
    16be:	0000                	unimp
    16c0:	0001                	nop
    16c2:	605c                	flw	fa5,4(s0)
    16c4:	0004                	0x4
    16c6:	a400                	fsd	fs0,8(s0)
    16c8:	0004                	0x4
    16ca:	0100                	addi	s0,sp,128
    16cc:	5c00                	lw	s0,56(s0)
	...
    16d6:	03d4                	addi	a3,sp,452
    16d8:	0000                	unimp
    16da:	03dc                	addi	a5,sp,452
    16dc:	0000                	unimp
    16de:	0001                	nop
    16e0:	dc64                	sw	s1,124(s0)
    16e2:	f8000003          	lb	zero,-128(zero) # ffffff80 <_stack_start+0xfffeff80>
    16e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ea:	5f00                	lw	s0,56(a4)
    16ec:	03fe                	slli	t2,t2,0x1f
    16ee:	0000                	unimp
    16f0:	0426                	slli	s0,s0,0x9
    16f2:	0000                	unimp
    16f4:	0001                	nop
    16f6:	3864                	fld	fs1,240(s0)
    16f8:	0004                	0x4
    16fa:	6000                	flw	fs0,0(s0)
    16fc:	0004                	0x4
    16fe:	0100                	addi	s0,sp,128
    1700:	6400                	flw	fs0,8(s0)
    1702:	0460                	addi	s0,sp,524
    1704:	0000                	unimp
    1706:	0466                	slli	s0,s0,0x19
    1708:	0000                	unimp
    170a:	0001                	nop
    170c:	665e                	flw	fa2,212(sp)
    170e:	0004                	0x4
    1710:	6e00                	flw	fs0,24(a2)
    1712:	0004                	0x4
    1714:	0300                	addi	s0,sp,384
    1716:	7e00                	flw	fs0,56(a2)
    1718:	9f7f                	0x9f7f
    171a:	046e                	slli	s0,s0,0x1b
    171c:	0000                	unimp
    171e:	047a                	slli	s0,s0,0x1e
    1720:	0000                	unimp
    1722:	0001                	nop
    1724:	005e                	c.slli	zero,0x17
    1726:	0000                	unimp
    1728:	0000                	unimp
    172a:	0000                	unimp
    172c:	fe00                	fsw	fs0,56(a2)
    172e:	10000003          	lb	zero,256(zero) # 100 <array_equ+0x6e>
    1732:	0004                	0x4
    1734:	0100                	addi	s0,sp,128
    1736:	5f00                	lw	s0,56(a4)
    1738:	0410                	addi	a2,sp,512
    173a:	0000                	unimp
    173c:	0416                	slli	s0,s0,0x5
    173e:	0000                	unimp
    1740:	017f0003          	lb	zero,23(t5)
    1744:	169f 0004 2000      	0x20000004169f
    174a:	0004                	0x4
    174c:	0100                	addi	s0,sp,128
    174e:	5f00                	lw	s0,56(a4)
    1750:	043c                	addi	a5,sp,520
    1752:	0000                	unimp
    1754:	044e                	slli	s0,s0,0x13
    1756:	0000                	unimp
    1758:	0001                	nop
    175a:	4e5f 0004 5400      	0x540000044e5f
    1760:	0004                	0x4
    1762:	0300                	addi	s0,sp,384
    1764:	7f00                	flw	fs0,56(a4)
    1766:	9f01                	0x9f01
    1768:	0454                	addi	a3,sp,516
    176a:	0000                	unimp
    176c:	0460                	addi	s0,sp,524
    176e:	0000                	unimp
    1770:	0001                	nop
    1772:	005f 0000 0000      	0x5f
    1778:	0000                	unimp
    177a:	9600                	0x9600
    177c:	96000003          	lb	zero,-1696(zero) # fffff960 <_stack_start+0xfffef960>
    1780:	0004                	0x4
    1782:	0200                	addi	s0,sp,256
    1784:	8a00                	0x8a00
	...
    178e:	9800                	0x9800
    1790:	7e000003          	lb	zero,2016(zero) # 7e0 <ext_euclid+0xfe>
    1794:	0004                	0x4
    1796:	0200                	addi	s0,sp,256
    1798:	7200                	flw	fs0,32(a2)
    179a:	7e00                	flw	fs0,56(a2)
    179c:	0004                	0x4
    179e:	8400                	0x8400
    17a0:	0004                	0x4
    17a2:	0200                	addi	s0,sp,256
    17a4:	7900                	flw	fs0,48(a0)
    17a6:	8400                	0x8400
    17a8:	0004                	0x4
    17aa:	8800                	0x8800
    17ac:	0004                	0x4
    17ae:	0c00                	addi	s0,sp,528
    17b0:	8a00                	0x8a00
    17b2:	8300                	0x8300
    17b4:	3200                	fld	fs0,32(a2)
    17b6:	2324                	fld	fs1,64(a4)
    17b8:	1af0090f          	0x1af0090f
    17bc:	881c                	0x881c
    17be:	0004                	0x4
    17c0:	9600                	0x9600
    17c2:	0004                	0x4
    17c4:	0d00                	addi	s0,sp,656
    17c6:	8a00                	0x8a00
    17c8:	f300                	fsw	fs0,32(a4)
    17ca:	5d01                	li	s10,-32
    17cc:	2432                	fld	fs0,264(sp)
    17ce:	f0090f23          	sb	zero,-226(s2)
    17d2:	1c1a                	slli	s8,s8,0x26
	...
    17dc:	0390                	addi	a2,sp,448
    17de:	0000                	unimp
    17e0:	03d4                	addi	a3,sp,452
    17e2:	0000                	unimp
    17e4:	0001                	nop
    17e6:	d464                	sw	s1,108(s0)
    17e8:	dc000003          	lb	zero,-576(zero) # fffffdc0 <_stack_start+0xfffefdc0>
    17ec:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17f0:	8300                	0x8300
    17f2:	9f7f                	0x9f7f
    17f4:	03dc                	addi	a5,sp,452
    17f6:	0000                	unimp
    17f8:	03fe                	slli	t2,t2,0x1f
    17fa:	0000                	unimp
    17fc:	0001                	nop
    17fe:	fe64                	fsw	fs1,124(a2)
    1800:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    1804:	0004                	0x4
    1806:	0300                	addi	s0,sp,384
    1808:	8300                	0x8300
    180a:	9f7f                	0x9f7f
    180c:	0488                	addi	a0,sp,576
    180e:	0000                	unimp
    1810:	04a4                	addi	s1,sp,584
    1812:	0000                	unimp
    1814:	0006                	c.slli	zero,0x1
    1816:	315d01f3          	0x315d01f3
    181a:	9f1c                	0x9f1c
	...
    1824:	034c                	addi	a1,sp,388
    1826:	0000                	unimp
    1828:	0490                	addi	a2,sp,576
    182a:	0000                	unimp
    182c:	0001                	nop
    182e:	00049067          	0x49067
    1832:	9200                	0x9200
    1834:	0004                	0x4
    1836:	0700                	addi	s0,sp,896
    1838:	8800                	0x8800
    183a:	f300                	fsw	fs0,32(a4)
    183c:	5d01                	li	s10,-32
    183e:	9f22                	add	t5,t5,s0
    1840:	0492                	slli	s1,s1,0x4
    1842:	0000                	unimp
    1844:	04a4                	addi	s1,sp,584
    1846:	0000                	unimp
    1848:	000a                	c.slli	zero,0x2
    184a:	f35b01f3          	0xf35b01f3
    184e:	5d01                	li	s10,-32
    1850:	3122                	fld	ft2,40(sp)
    1852:	9f1c                	0x9f1c
	...
    185c:	0396                	slli	t2,t2,0x5
    185e:	0000                	unimp
    1860:	0492                	slli	s1,s1,0x4
    1862:	0000                	unimp
    1864:	0001                	nop
    1866:	9268                	0x9268
    1868:	0004                	0x4
    186a:	a400                	fsd	fs0,8(s0)
    186c:	0004                	0x4
    186e:	0600                	addi	s0,sp,768
    1870:	f300                	fsw	fs0,32(a4)
    1872:	5b01                	li	s6,-32
    1874:	1c31                	addi	s8,s8,-20
    1876:	009f 0000 0000      	0x9f
    187c:	0000                	unimp
    187e:	9600                	0x9600
    1880:	d4000003          	lb	zero,-704(zero) # fffffd40 <_stack_start+0xfffefd40>
    1884:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1888:	6400                	flw	fs0,8(s0)
    188a:	03d4                	addi	a3,sp,452
    188c:	0000                	unimp
    188e:	03dc                	addi	a5,sp,452
    1890:	0000                	unimp
    1892:	7f830003          	lb	zero,2040(t1)
    1896:	dc9f 0003 fe00      	0xfe000003dc9f
    189c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18a0:	6400                	flw	fs0,8(s0)
    18a2:	03fe                	slli	t2,t2,0x1f
    18a4:	0000                	unimp
    18a6:	0488                	addi	a0,sp,576
    18a8:	0000                	unimp
    18aa:	7f830003          	lb	zero,2040(t1)
    18ae:	889f 0004 a400      	0xa4000004889f
    18b4:	0004                	0x4
    18b6:	0600                	addi	s0,sp,768
    18b8:	f300                	fsw	fs0,32(a4)
    18ba:	5d01                	li	s10,-32
    18bc:	1c31                	addi	s8,s8,-20
    18be:	009f 0000 0000      	0x9f
    18c4:	0000                	unimp
    18c6:	2800                	fld	fs0,16(s0)
    18c8:	0001                	nop
    18ca:	b000                	fsd	fs0,32(s0)
    18cc:	0001                	nop
    18ce:	0100                	addi	s0,sp,128
    18d0:	5a00                	lw	s0,48(a2)
    18d2:	01b0                	addi	a2,sp,200
    18d4:	0000                	unimp
    18d6:	01b9                	addi	gp,gp,14
    18d8:	0000                	unimp
    18da:	0001                	nop
    18dc:	0001b95b          	0x1b95b
    18e0:	f600                	fsw	fs0,40(a2)
    18e2:	0001                	nop
    18e4:	0400                	addi	s0,sp,512
    18e6:	f300                	fsw	fs0,32(a4)
    18e8:	5a01                	li	s4,-32
    18ea:	f69f 0001 1800      	0x18000001f69f
    18f0:	0002                	c.slli64	zero
    18f2:	0100                	addi	s0,sp,128
    18f4:	5a00                	lw	s0,48(a2)
    18f6:	0218                	addi	a4,sp,256
    18f8:	0000                	unimp
    18fa:	0334                	addi	a3,sp,392
    18fc:	0000                	unimp
    18fe:	0004                	0x4
    1900:	9f5a01f3          	0x9f5a01f3
	...
    190c:	0128                	addi	a0,sp,136
    190e:	0000                	unimp
    1910:	019c                	addi	a5,sp,192
    1912:	0000                	unimp
    1914:	0001                	nop
    1916:	00019c5b          	0x19c5b
    191a:	b900                	fsd	fs0,48(a0)
    191c:	0001                	nop
    191e:	0100                	addi	s0,sp,128
    1920:	6000                	flw	fs0,0(s0)
    1922:	01b9                	addi	gp,gp,14
    1924:	0000                	unimp
    1926:	01f6                	slli	gp,gp,0x1d
    1928:	0000                	unimp
    192a:	b4780003          	lb	zero,-1209(a6)
    192e:	f67f                	0xf67f
    1930:	0001                	nop
    1932:	1800                	addi	s0,sp,48
    1934:	0002                	c.slli64	zero
    1936:	0100                	addi	s0,sp,128
    1938:	6000                	flw	fs0,0(s0)
    193a:	0218                	addi	a4,sp,256
    193c:	0000                	unimp
    193e:	0272                	slli	tp,tp,0x1c
    1940:	0000                	unimp
    1942:	b4780003          	lb	zero,-1209(a6)
    1946:	727f                	0x727f
    1948:	0002                	c.slli64	zero
    194a:	3400                	fld	fs0,40(s0)
    194c:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1950:	9100                	0x9100
    1952:	7fb4                	flw	fa3,120(a5)
	...
    195c:	0128                	addi	a0,sp,136
    195e:	0000                	unimp
    1960:	019e                	slli	gp,gp,0x7
    1962:	0000                	unimp
    1964:	0001                	nop
    1966:	9e5c                	0x9e5c
    1968:	0001                	nop
    196a:	b900                	fsd	fs0,48(a0)
    196c:	0001                	nop
    196e:	0100                	addi	s0,sp,128
    1970:	6100                	flw	fs0,0(a0)
    1972:	01b9                	addi	gp,gp,14
    1974:	0000                	unimp
    1976:	01f6                	slli	gp,gp,0x1d
    1978:	0000                	unimp
    197a:	b0780003          	lb	zero,-1273(a6)
    197e:	f67f                	0xf67f
    1980:	0001                	nop
    1982:	1800                	addi	s0,sp,48
    1984:	0002                	c.slli64	zero
    1986:	0100                	addi	s0,sp,128
    1988:	6100                	flw	fs0,0(a0)
    198a:	0218                	addi	a4,sp,256
    198c:	0000                	unimp
    198e:	026e                	slli	tp,tp,0x1b
    1990:	0000                	unimp
    1992:	b0780003          	lb	zero,-1273(a6)
    1996:	6e7f                	0x6e7f
    1998:	0002                	c.slli64	zero
    199a:	9200                	0x9200
    199c:	0002                	c.slli64	zero
    199e:	0200                	addi	s0,sp,256
    19a0:	7200                	flw	fs0,32(a2)
    19a2:	9200                	0x9200
    19a4:	0002                	c.slli64	zero
    19a6:	9400                	0x9400
    19a8:	0002                	c.slli64	zero
    19aa:	0300                	addi	s0,sp,384
    19ac:	7200                	flw	fs0,32(a2)
    19ae:	7fb0                	flw	fa2,120(a5)
    19b0:	0294                	addi	a3,sp,320
    19b2:	0000                	unimp
    19b4:	0334                	addi	a3,sp,392
    19b6:	0000                	unimp
    19b8:	b0910003          	lb	zero,-1271(sp)
    19bc:	007f                	0x7f
    19be:	0000                	unimp
    19c0:	0000                	unimp
    19c2:	0000                	unimp
    19c4:	2800                	fld	fs0,16(s0)
    19c6:	0001                	nop
    19c8:	3200                	fld	fs0,32(a2)
    19ca:	0001                	nop
    19cc:	0100                	addi	s0,sp,128
    19ce:	5d00                	lw	s0,56(a0)
    19d0:	0132                	slli	sp,sp,0xc
    19d2:	0000                	unimp
    19d4:	0276                	slli	tp,tp,0x1d
    19d6:	0000                	unimp
    19d8:	0001                	nop
    19da:	7662                	flw	fa2,56(sp)
    19dc:	0002                	c.slli64	zero
    19de:	9400                	0x9400
    19e0:	0002                	c.slli64	zero
    19e2:	0400                	addi	s0,sp,512
    19e4:	f300                	fsw	fs0,32(a4)
    19e6:	5d01                	li	s10,-32
    19e8:	949f 0002 3400      	0x34000002949f
    19ee:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    19f2:	6200                	flw	fs0,0(a2)
	...
    19fc:	0128                	addi	a0,sp,136
    19fe:	0000                	unimp
    1a00:	01b9                	addi	gp,gp,14
    1a02:	0000                	unimp
    1a04:	0001                	nop
    1a06:	b95e                	fsd	fs7,176(sp)
    1a08:	0001                	nop
    1a0a:	f600                	fsw	fs0,40(a2)
    1a0c:	0001                	nop
    1a0e:	0100                	addi	s0,sp,128
    1a10:	6700                	flw	fs0,8(a4)
    1a12:	01f6                	slli	gp,gp,0x1d
    1a14:	0000                	unimp
    1a16:	0218                	addi	a4,sp,256
    1a18:	0000                	unimp
    1a1a:	0001                	nop
    1a1c:	185e                	slli	a6,a6,0x37
    1a1e:	0002                	c.slli64	zero
    1a20:	8000                	0x8000
    1a22:	0002                	c.slli64	zero
    1a24:	0100                	addi	s0,sp,128
    1a26:	6700                	flw	fs0,8(a4)
    1a28:	0280                	addi	s0,sp,320
    1a2a:	0000                	unimp
    1a2c:	0294                	addi	a3,sp,320
    1a2e:	0000                	unimp
    1a30:	0004                	0x4
    1a32:	9f5e01f3          	0x9f5e01f3
    1a36:	0294                	addi	a3,sp,320
    1a38:	0000                	unimp
    1a3a:	0334                	addi	a3,sp,392
    1a3c:	0000                	unimp
    1a3e:	0001                	nop
    1a40:	00000067          	jr	zero # 0 <__DYNAMIC>
    1a44:	0000                	unimp
    1a46:	0000                	unimp
    1a48:	2800                	fld	fs0,16(s0)
    1a4a:	0001                	nop
    1a4c:	6400                	flw	fs0,8(s0)
    1a4e:	0001                	nop
    1a50:	0100                	addi	s0,sp,128
    1a52:	5f00                	lw	s0,56(a4)
    1a54:	0164                	addi	s1,sp,140
    1a56:	0000                	unimp
    1a58:	0272                	slli	tp,tp,0x1c
    1a5a:	0000                	unimp
    1a5c:	b8780003          	lb	zero,-1145(a6)
    1a60:	727f                	0x727f
    1a62:	0002                	c.slli64	zero
    1a64:	3400                	fld	fs0,40(s0)
    1a66:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1a6a:	9100                	0x9100
    1a6c:	7fb8                	flw	fa4,120(a5)
	...
    1a76:	0192                	slli	gp,gp,0x4
    1a78:	0000                	unimp
    1a7a:	01a6                	slli	gp,gp,0x9
    1a7c:	0000                	unimp
    1a7e:	0002                	c.slli64	zero
    1a80:	008a                	slli	ra,ra,0x2
    1a82:	01a6                	slli	gp,gp,0x9
    1a84:	0000                	unimp
    1a86:	0250                	addi	a2,sp,260
    1a88:	0000                	unimp
    1a8a:	0002                	c.slli64	zero
    1a8c:	0084                	addi	s1,sp,64
    1a8e:	0250                	addi	a2,sp,260
    1a90:	0000                	unimp
    1a92:	0286                	slli	t0,t0,0x1
    1a94:	0000                	unimp
    1a96:	0002                	c.slli64	zero
    1a98:	008a                	slli	ra,ra,0x2
    1a9a:	0294                	addi	a3,sp,320
    1a9c:	0000                	unimp
    1a9e:	02e0                	addi	s0,sp,332
    1aa0:	0000                	unimp
    1aa2:	0002                	c.slli64	zero
    1aa4:	0084                	addi	s1,sp,64
    1aa6:	02e0                	addi	s0,sp,332
    1aa8:	0000                	unimp
    1aaa:	0334                	addi	a3,sp,392
    1aac:	0000                	unimp
    1aae:	0002                	c.slli64	zero
    1ab0:	008a                	slli	ra,ra,0x2
	...
    1aba:	0194                	addi	a3,sp,192
    1abc:	0000                	unimp
    1abe:	01a6                	slli	gp,gp,0x9
    1ac0:	0000                	unimp
    1ac2:	0002                	c.slli64	zero
    1ac4:	9f30                	0x9f30
    1ac6:	01a6                	slli	gp,gp,0x9
    1ac8:	0000                	unimp
    1aca:	01ac                	addi	a1,sp,200
    1acc:	0000                	unimp
    1ace:	0001                	nop
    1ad0:	ba5c                	fsd	fa5,176(a2)
    1ad2:	0001                	nop
    1ad4:	c600                	sw	s0,8(a2)
    1ad6:	0001                	nop
    1ad8:	0200                	addi	s0,sp,256
    1ada:	3000                	fld	fs0,32(s0)
    1adc:	c69f 0001 ce00      	0xce000001c69f
    1ae2:	0001                	nop
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	5b00                	lw	s0,48(a4)
    1ae8:	01d2                	slli	gp,gp,0x14
    1aea:	0000                	unimp
    1aec:	01d6                	slli	gp,gp,0x15
    1aee:	0000                	unimp
    1af0:	0002                	c.slli64	zero
    1af2:	9f30                	0x9f30
    1af4:	01d6                	slli	gp,gp,0x15
    1af6:	0000                	unimp
    1af8:	01ec                	addi	a1,sp,204
    1afa:	0000                	unimp
    1afc:	0001                	nop
    1afe:	0001f65b          	0x1f65b
    1b02:	1800                	addi	s0,sp,48
    1b04:	0002                	c.slli64	zero
    1b06:	0100                	addi	s0,sp,128
    1b08:	5c00                	lw	s0,56(s0)
    1b0a:	0218                	addi	a4,sp,256
    1b0c:	0000                	unimp
    1b0e:	0228                	addi	a0,sp,264
    1b10:	0000                	unimp
    1b12:	0001                	nop
    1b14:	0002285b          	0x2285b
    1b18:	2e00                	fld	fs0,24(a2)
    1b1a:	0002                	c.slli64	zero
    1b1c:	0300                	addi	s0,sp,384
    1b1e:	7b00                	flw	fs0,48(a4)
    1b20:	9f7f                	0x9f7f
    1b22:	022e                	slli	tp,tp,0xb
    1b24:	0000                	unimp
    1b26:	0240                	addi	s0,sp,260
    1b28:	0000                	unimp
    1b2a:	0001                	nop
    1b2c:	0002405b          	0x2405b
    1b30:	4600                	lw	s0,8(a2)
    1b32:	0002                	c.slli64	zero
    1b34:	0300                	addi	s0,sp,384
    1b36:	7b00                	flw	fs0,48(a4)
    1b38:	9f7f                	0x9f7f
    1b3a:	0246                	slli	tp,tp,0x11
    1b3c:	0000                	unimp
    1b3e:	024a                	slli	tp,tp,0x12
    1b40:	0000                	unimp
    1b42:	0001                	nop
    1b44:	0002505b          	0x2505b
    1b48:	5c00                	lw	s0,56(s0)
    1b4a:	0002                	c.slli64	zero
    1b4c:	0100                	addi	s0,sp,128
    1b4e:	5e00                	lw	s0,56(a2)
    1b50:	02e0                	addi	s0,sp,332
    1b52:	0000                	unimp
    1b54:	02fe                	slli	t0,t0,0x1f
    1b56:	0000                	unimp
    1b58:	0001                	nop
    1b5a:	fe5e                	fsw	fs7,60(sp)
    1b5c:	0002                	c.slli64	zero
    1b5e:	0a00                	addi	s0,sp,272
    1b60:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b64:	5b00                	lw	s0,48(a4)
    1b66:	030a                	slli	t1,t1,0x2
    1b68:	0000                	unimp
    1b6a:	0316                	slli	t1,t1,0x5
    1b6c:	0000                	unimp
    1b6e:	7f7b0003          	lb	zero,2039(s6) # 7f7 <ext_euclid+0x115>
    1b72:	169f 0003 2000      	0x20000003169f
    1b78:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1b7c:	5b00                	lw	s0,48(a4)
	...
    1b86:	01ee                	slli	gp,gp,0x1b
    1b88:	0000                	unimp
    1b8a:	01f6                	slli	gp,gp,0x1d
    1b8c:	0000                	unimp
    1b8e:	0001                	nop
    1b90:	f669                	bnez	a2,1b5a <random_keys+0x16>
    1b92:	0001                	nop
    1b94:	1200                	addi	s0,sp,288
    1b96:	0002                	c.slli64	zero
    1b98:	0100                	addi	s0,sp,128
    1b9a:	5f00                	lw	s0,56(a4)
    1b9c:	024a                	slli	tp,tp,0x12
    1b9e:	0000                	unimp
    1ba0:	0250                	addi	a2,sp,260
    1ba2:	0000                	unimp
    1ba4:	0001                	nop
    1ba6:	6069                	c.lui	zero,0x1a
    1ba8:	0002                	c.slli64	zero
    1baa:	6600                	flw	fs0,8(a2)
    1bac:	0002                	c.slli64	zero
    1bae:	0100                	addi	s0,sp,128
    1bb0:	5d00                	lw	s0,56(a0)
    1bb2:	0266                	slli	tp,tp,0x19
    1bb4:	0000                	unimp
    1bb6:	0294                	addi	a3,sp,320
    1bb8:	0000                	unimp
    1bba:	0001                	nop
    1bbc:	945f 0002 e000      	0xe0000002945f
    1bc2:	0002                	c.slli64	zero
    1bc4:	0100                	addi	s0,sp,128
    1bc6:	6900                	flw	fs0,16(a0)
    1bc8:	02e0                	addi	s0,sp,332
    1bca:	0000                	unimp
    1bcc:	02e4                	addi	s1,sp,332
    1bce:	0000                	unimp
    1bd0:	0001                	nop
    1bd2:	e45c                	fsw	fa5,12(s0)
    1bd4:	0002                	c.slli64	zero
    1bd6:	ee00                	fsw	fs0,24(a2)
    1bd8:	0002                	c.slli64	zero
    1bda:	0300                	addi	s0,sp,384
    1bdc:	7c00                	flw	fs0,56(s0)
    1bde:	9f7f                	0x9f7f
    1be0:	02ee                	slli	t0,t0,0x1b
    1be2:	0000                	unimp
    1be4:	02f8                	addi	a4,sp,332
    1be6:	0000                	unimp
    1be8:	0001                	nop
    1bea:	fe5c                	fsw	fa5,60(a2)
    1bec:	0002                	c.slli64	zero
    1bee:	2400                	fld	fs0,8(s0)
    1bf0:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1bf4:	5d00                	lw	s0,56(a0)
    1bf6:	0324                	addi	s1,sp,392
    1bf8:	0000                	unimp
    1bfa:	0328                	addi	a0,sp,392
    1bfc:	0000                	unimp
    1bfe:	0001                	nop
    1c00:	285f 0003 3200      	0x32000003285f
    1c06:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1c0a:	7f00                	flw	fs0,56(a4)
    1c0c:	9f7f                	0x9f7f
    1c0e:	0332                	slli	t1,t1,0xc
    1c10:	0000                	unimp
    1c12:	0334                	addi	a3,sp,392
    1c14:	0000                	unimp
    1c16:	0001                	nop
    1c18:	005f 0000 0000      	0x5f
    1c1e:	0000                	unimp
    1c20:	9400                	0x9400
    1c22:	0002                	c.slli64	zero
    1c24:	a600                	fsd	fs0,8(a2)
    1c26:	0002                	c.slli64	zero
    1c28:	0100                	addi	s0,sp,128
    1c2a:	5f00                	lw	s0,56(a4)
    1c2c:	02a6                	slli	t0,t0,0x9
    1c2e:	0000                	unimp
    1c30:	02ac                	addi	a1,sp,328
    1c32:	0000                	unimp
    1c34:	017f0003          	lb	zero,23(t5)
    1c38:	ac9f 0002 b800      	0xb8000002ac9f
    1c3e:	0002                	c.slli64	zero
    1c40:	0100                	addi	s0,sp,128
    1c42:	5f00                	lw	s0,56(a4)
    1c44:	02bc                	addi	a5,sp,328
    1c46:	0000                	unimp
    1c48:	02ce                	slli	t0,t0,0x13
    1c4a:	0000                	unimp
    1c4c:	0001                	nop
    1c4e:	ce5f 0002 d400      	0xd4000002ce5f
    1c54:	0002                	c.slli64	zero
    1c56:	0300                	addi	s0,sp,384
    1c58:	7f00                	flw	fs0,56(a4)
    1c5a:	9f01                	0x9f01
    1c5c:	02d4                	addi	a3,sp,324
    1c5e:	0000                	unimp
    1c60:	02e0                	addi	s0,sp,332
    1c62:	0000                	unimp
    1c64:	0001                	nop
    1c66:	005f 0000 0000      	0x5f
    1c6c:	0000                	unimp
    1c6e:	6a00                	flw	fs0,16(a2)
    1c70:	0002                	c.slli64	zero
    1c72:	9400                	0x9400
    1c74:	0002                	c.slli64	zero
    1c76:	0600                	addi	s0,sp,768
    1c78:	0300                	addi	s0,sp,384
    1c7a:	12ac                	addi	a1,sp,360
    1c7c:	0000                	unimp
    1c7e:	009f 0000 0000      	0x9f
    1c84:	0000                	unimp
    1c86:	9200                	0x9200
    1c88:	0001                	nop
    1c8a:	7e00                	flw	fs0,56(a2)
    1c8c:	0002                	c.slli64	zero
    1c8e:	0200                	addi	s0,sp,256
    1c90:	8600                	0x8600
    1c92:	7e00                	flw	fs0,56(a2)
    1c94:	0002                	c.slli64	zero
    1c96:	8600                	0x8600
    1c98:	0002                	c.slli64	zero
    1c9a:	0e00                	addi	s0,sp,784
    1c9c:	8a00                	0x8a00
    1c9e:	9100                	0x9100
    1ca0:	7fb4                	flw	fa3,120(a5)
    1ca2:	3206                	fld	ft4,96(sp)
    1ca4:	2324                	fld	fs1,64(a4)
    1ca6:	1af0090f          	0x1af0090f
    1caa:	941c                	0x941c
    1cac:	0002                	c.slli64	zero
    1cae:	3400                	fld	fs0,40(s0)
    1cb0:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1cb4:	8600                	0x8600
	...
    1cbe:	9400                	0x9400
    1cc0:	0001                	nop
    1cc2:	6e00                	flw	fs0,24(a2)
    1cc4:	0002                	c.slli64	zero
    1cc6:	0200                	addi	s0,sp,256
    1cc8:	7200                	flw	fs0,32(a2)
    1cca:	6e00                	flw	fs0,24(a2)
    1ccc:	0002                	c.slli64	zero
    1cce:	7600                	flw	fs0,40(a2)
    1cd0:	0002                	c.slli64	zero
    1cd2:	0c00                	addi	s0,sp,528
    1cd4:	8600                	0x8600
    1cd6:	8200                	0x8200
    1cd8:	3200                	fld	fs0,32(a2)
    1cda:	2324                	fld	fs1,64(a4)
    1cdc:	1af0090f          	0x1af0090f
    1ce0:	761c                	flw	fa5,40(a2)
    1ce2:	0002                	c.slli64	zero
    1ce4:	7e00                	flw	fs0,56(a2)
    1ce6:	0002                	c.slli64	zero
    1ce8:	0d00                	addi	s0,sp,656
    1cea:	8600                	0x8600
    1cec:	f300                	fsw	fs0,32(a4)
    1cee:	5d01                	li	s10,-32
    1cf0:	2432                	fld	fs0,264(sp)
    1cf2:	f0090f23          	sb	zero,-226(s2)
    1cf6:	1c1a                	slli	s8,s8,0x26
    1cf8:	027e                	slli	tp,tp,0x1f
    1cfa:	0000                	unimp
    1cfc:	0286                	slli	t0,t0,0x1
    1cfe:	0000                	unimp
    1d00:	0019                	c.nop	6
    1d02:	008a                	slli	ra,ra,0x2
    1d04:	b491                	j	1748 <product2+0x244>
    1d06:	067f                	0x67f
    1d08:	2432                	fld	fs0,264(sp)
    1d0a:	f0090f23          	sb	zero,-226(s2)
    1d0e:	1c1a                	slli	s8,s8,0x26
    1d10:	325d01f3          	0x325d01f3
    1d14:	2324                	fld	fs1,64(a4)
    1d16:	1af0090f          	0x1af0090f
    1d1a:	941c                	0x941c
    1d1c:	0002                	c.slli64	zero
    1d1e:	3400                	fld	fs0,40(s0)
    1d20:	02000003          	lb	zero,32(zero) # 20 <__DYNAMIC+0x20>
    1d24:	7200                	flw	fs0,32(a2)
	...
    1d2e:	9200                	0x9200
    1d30:	0001                	nop
    1d32:	ee00                	fsw	fs0,24(a2)
    1d34:	0001                	nop
    1d36:	0100                	addi	s0,sp,128
    1d38:	6900                	flw	fs0,16(a0)
    1d3a:	01ee                	slli	gp,gp,0x1b
    1d3c:	0000                	unimp
    1d3e:	01f6                	slli	gp,gp,0x1d
    1d40:	0000                	unimp
    1d42:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1d46:	f69f 0001 4a00      	0x4a000001f69f
    1d4c:	0002                	c.slli64	zero
    1d4e:	0100                	addi	s0,sp,128
    1d50:	6900                	flw	fs0,16(a0)
    1d52:	024a                	slli	tp,tp,0x12
    1d54:	0000                	unimp
    1d56:	0276                	slli	tp,tp,0x1d
    1d58:	0000                	unimp
    1d5a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1d5e:	769f 0002 9400      	0x94000002769f
    1d64:	0002                	c.slli64	zero
    1d66:	0600                	addi	s0,sp,768
    1d68:	f300                	fsw	fs0,32(a4)
    1d6a:	5d01                	li	s10,-32
    1d6c:	1c31                	addi	s8,s8,-20
    1d6e:	949f 0002 3400      	0x34000002949f
    1d74:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1d78:	8200                	0x8200
    1d7a:	9f7f                	0x9f7f
	...
    1d84:	013e                	slli	sp,sp,0xf
    1d86:	0000                	unimp
    1d88:	0282                	c.slli64	t0
    1d8a:	0000                	unimp
    1d8c:	0001                	nop
    1d8e:	8268                	0x8268
    1d90:	0002                	c.slli64	zero
    1d92:	9400                	0x9400
    1d94:	0002                	c.slli64	zero
    1d96:	0b00                	addi	s0,sp,400
    1d98:	9100                	0x9100
    1d9a:	7fb4                	flw	fa3,120(a5)
    1d9c:	f306                	fsw	ft1,164(sp)
    1d9e:	5d01                	li	s10,-32
    1da0:	3122                	fld	ft2,40(sp)
    1da2:	9f1c                	0x9f1c
    1da4:	0294                	addi	a3,sp,320
    1da6:	0000                	unimp
    1da8:	0334                	addi	a3,sp,392
    1daa:	0000                	unimp
    1dac:	0001                	nop
    1dae:	0068                	addi	a0,sp,12
    1db0:	0000                	unimp
    1db2:	0000                	unimp
    1db4:	0000                	unimp
    1db6:	9200                	0x9200
    1db8:	0001                	nop
    1dba:	7c00                	flw	fs0,56(s0)
    1dbc:	0002                	c.slli64	zero
    1dbe:	0100                	addi	s0,sp,128
    1dc0:	6500                	flw	fs0,8(a0)
    1dc2:	027c                	addi	a5,sp,268
    1dc4:	0000                	unimp
    1dc6:	0294                	addi	a3,sp,320
    1dc8:	0000                	unimp
    1dca:	b4910007          	0xb4910007
    1dce:	067f                	0x67f
    1dd0:	1c31                	addi	s8,s8,-20
    1dd2:	949f 0002 3400      	0x34000002949f
    1dd8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1ddc:	6500                	flw	fs0,8(a0)
	...
    1de6:	0192                	slli	gp,gp,0x4
    1de8:	0000                	unimp
    1dea:	01ee                	slli	gp,gp,0x1b
    1dec:	0000                	unimp
    1dee:	0001                	nop
    1df0:	ee69                	bnez	a2,1eca <random_keys+0x386>
    1df2:	0001                	nop
    1df4:	f600                	fsw	fs0,40(a2)
    1df6:	0001                	nop
    1df8:	0300                	addi	s0,sp,384
    1dfa:	8200                	0x8200
    1dfc:	9f7f                	0x9f7f
    1dfe:	01f6                	slli	gp,gp,0x1d
    1e00:	0000                	unimp
    1e02:	024a                	slli	tp,tp,0x12
    1e04:	0000                	unimp
    1e06:	0001                	nop
    1e08:	4a69                	li	s4,26
    1e0a:	0002                	c.slli64	zero
    1e0c:	7600                	flw	fs0,40(a2)
    1e0e:	0002                	c.slli64	zero
    1e10:	0300                	addi	s0,sp,384
    1e12:	8200                	0x8200
    1e14:	9f7f                	0x9f7f
    1e16:	0276                	slli	tp,tp,0x1d
    1e18:	0000                	unimp
    1e1a:	0294                	addi	a3,sp,320
    1e1c:	0000                	unimp
    1e1e:	0006                	c.slli	zero,0x1
    1e20:	315d01f3          	0x315d01f3
    1e24:	9f1c                	0x9f1c
    1e26:	0294                	addi	a3,sp,320
    1e28:	0000                	unimp
    1e2a:	0334                	addi	a3,sp,392
    1e2c:	0000                	unimp
    1e2e:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x116>
    1e32:	009f 0000 0000      	0x9f
    1e38:	0000                	unimp
    1e3a:	9200                	0x9200
    1e3c:	0000                	unimp
    1e3e:	ea00                	fsw	fs0,16(a2)
    1e40:	0000                	unimp
    1e42:	0100                	addi	s0,sp,128
    1e44:	5b00                	lw	s0,48(a4)
    1e46:	00ea                	slli	ra,ra,0x1a
    1e48:	0000                	unimp
    1e4a:	00f2                	slli	ra,ra,0x1c
    1e4c:	0000                	unimp
    1e4e:	0004                	0x4
    1e50:	9f5b01f3          	0x9f5b01f3
    1e54:	00f2                	slli	ra,ra,0x1c
    1e56:	0000                	unimp
    1e58:	0128                	addi	a0,sp,136
    1e5a:	0000                	unimp
    1e5c:	0001                	nop
    1e5e:	0000005b          	0x5b
    1e62:	0000                	unimp
    1e64:	0000                	unimp
    1e66:	9200                	0x9200
    1e68:	0000                	unimp
    1e6a:	aa00                	fsd	fs0,16(a2)
    1e6c:	0000                	unimp
    1e6e:	0100                	addi	s0,sp,128
    1e70:	5c00                	lw	s0,56(s0)
    1e72:	00aa                	slli	ra,ra,0xa
    1e74:	0000                	unimp
    1e76:	00b2                	slli	ra,ra,0xc
    1e78:	0000                	unimp
    1e7a:	0004                	0x4
    1e7c:	9f5c01f3          	0x9f5c01f3
    1e80:	00b2                	slli	ra,ra,0xc
    1e82:	0000                	unimp
    1e84:	00c4                	addi	s1,sp,68
    1e86:	0000                	unimp
    1e88:	0001                	nop
    1e8a:	c45c                	sw	a5,12(s0)
    1e8c:	0000                	unimp
    1e8e:	d400                	sw	s0,40(s0)
    1e90:	0000                	unimp
    1e92:	0400                	addi	s0,sp,512
    1e94:	f300                	fsw	fs0,32(a4)
    1e96:	5c01                	li	s8,-32
    1e98:	d49f 0000 e600      	0xe6000000d49f
    1e9e:	0000                	unimp
    1ea0:	0100                	addi	s0,sp,128
    1ea2:	5c00                	lw	s0,56(s0)
    1ea4:	00e6                	slli	ra,ra,0x19
    1ea6:	0000                	unimp
    1ea8:	0104                	addi	s1,sp,128
    1eaa:	0000                	unimp
    1eac:	0004                	0x4
    1eae:	9f5c01f3          	0x9f5c01f3
    1eb2:	0104                	addi	s1,sp,128
    1eb4:	0000                	unimp
    1eb6:	0128                	addi	a0,sp,136
    1eb8:	0000                	unimp
    1eba:	0001                	nop
    1ebc:	005c                	addi	a5,sp,4
    1ebe:	0000                	unimp
    1ec0:	0000                	unimp
    1ec2:	0000                	unimp
    1ec4:	9200                	0x9200
    1ec6:	0000                	unimp
    1ec8:	ac00                	fsd	fs0,24(s0)
    1eca:	0000                	unimp
    1ecc:	0200                	addi	s0,sp,256
    1ece:	3000                	fld	fs0,32(s0)
    1ed0:	ac9f 0000 b200      	0xb2000000ac9f
    1ed6:	0000                	unimp
    1ed8:	0100                	addi	s0,sp,128
    1eda:	5f00                	lw	s0,56(a4)
    1edc:	00b2                	slli	ra,ra,0xc
    1ede:	0000                	unimp
    1ee0:	00be                	slli	ra,ra,0xf
    1ee2:	0000                	unimp
    1ee4:	0002                	c.slli64	zero
    1ee6:	9f30                	0x9f30
    1ee8:	00be                	slli	ra,ra,0xf
    1eea:	0000                	unimp
    1eec:	00ca                	slli	ra,ra,0x12
    1eee:	0000                	unimp
    1ef0:	0001                	nop
    1ef2:	d45f 0000 e000      	0xe0000000d45f
    1ef8:	0000                	unimp
    1efa:	0200                	addi	s0,sp,256
    1efc:	3000                	fld	fs0,32(s0)
    1efe:	e09f 0000 e600      	0xe6000000e09f
    1f04:	0000                	unimp
    1f06:	0100                	addi	s0,sp,128
    1f08:	5f00                	lw	s0,56(a4)
    1f0a:	00f2                	slli	ra,ra,0x1c
    1f0c:	0000                	unimp
    1f0e:	0128                	addi	a0,sp,136
    1f10:	0000                	unimp
    1f12:	0001                	nop
    1f14:	005f 0000 0000      	0x5f
    1f1a:	0000                	unimp
    1f1c:	f600                	fsw	fs0,40(a2)
    1f1e:	0000                	unimp
    1f20:	fc00                	fsw	fs0,56(s0)
    1f22:	0000                	unimp
    1f24:	0600                	addi	s0,sp,768
    1f26:	7b00                	flw	fs0,48(a4)
    1f28:	7e00                	flw	fs0,56(a2)
    1f2a:	2200                	fld	fs0,0(a2)
    1f2c:	fc9f 0000 0000      	0xfc9f
    1f32:	0001                	nop
    1f34:	0100                	addi	s0,sp,128
    1f36:	5e00                	lw	s0,56(a2)
	...
    1f40:	00f6                	slli	ra,ra,0x1d
    1f42:	0000                	unimp
    1f44:	00fa                	slli	ra,ra,0x1e
    1f46:	0000                	unimp
    1f48:	0006                	c.slli	zero,0x1
    1f4a:	007a                	c.slli	zero,0x1e
    1f4c:	007e                	c.slli	zero,0x1f
    1f4e:	9f22                	add	t5,t5,s0
    1f50:	00fa                	slli	ra,ra,0x1e
    1f52:	0000                	unimp
    1f54:	0100                	addi	s0,sp,128
    1f56:	0000                	unimp
    1f58:	0001                	nop
    1f5a:	005d                	c.nop	23
    1f5c:	0000                	unimp
    1f5e:	0000                	unimp
    1f60:	0000                	unimp
    1f62:	0800                	addi	s0,sp,16
    1f64:	0001                	nop
    1f66:	0e00                	addi	s0,sp,784
    1f68:	0001                	nop
    1f6a:	0600                	addi	s0,sp,768
    1f6c:	7b00                	flw	fs0,48(a4)
    1f6e:	7e00                	flw	fs0,56(a2)
    1f70:	2200                	fld	fs0,0(a2)
    1f72:	0e9f 0001 1200      	0x120000010e9f
    1f78:	0001                	nop
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	5e00                	lw	s0,56(a2)
	...
    1f86:	0108                	addi	a0,sp,128
    1f88:	0000                	unimp
    1f8a:	010c                	addi	a1,sp,128
    1f8c:	0000                	unimp
    1f8e:	0006                	c.slli	zero,0x1
    1f90:	007a                	c.slli	zero,0x1e
    1f92:	007e                	c.slli	zero,0x1f
    1f94:	9f22                	add	t5,t5,s0
    1f96:	010c                	addi	a1,sp,128
    1f98:	0000                	unimp
    1f9a:	0112                	slli	sp,sp,0x4
    1f9c:	0000                	unimp
    1f9e:	0001                	nop
    1fa0:	0060                	addi	s0,sp,12
    1fa2:	0000                	unimp
    1fa4:	0000                	unimp
    1fa6:	0000                	unimp
    1fa8:	1a00                	addi	s0,sp,304
    1faa:	0001                	nop
    1fac:	2000                	fld	fs0,0(s0)
    1fae:	0001                	nop
    1fb0:	0600                	addi	s0,sp,768
    1fb2:	7b00                	flw	fs0,48(a4)
    1fb4:	7e00                	flw	fs0,56(a2)
    1fb6:	2200                	fld	fs0,0(a2)
    1fb8:	209f 0001 2400      	0x24000001209f
    1fbe:	0001                	nop
    1fc0:	0100                	addi	s0,sp,128
    1fc2:	5e00                	lw	s0,56(a2)
	...
    1fcc:	011a                	slli	sp,sp,0x6
    1fce:	0000                	unimp
    1fd0:	011e                	slli	sp,sp,0x7
    1fd2:	0000                	unimp
    1fd4:	0006                	c.slli	zero,0x1
    1fd6:	007a                	c.slli	zero,0x1e
    1fd8:	007e                	c.slli	zero,0x1f
    1fda:	9f22                	add	t5,t5,s0
    1fdc:	011e                	slli	sp,sp,0x7
    1fde:	0000                	unimp
    1fe0:	0124                	addi	s1,sp,136
    1fe2:	0000                	unimp
    1fe4:	0001                	nop
    1fe6:	0060                	addi	s0,sp,12
    1fe8:	0000                	unimp
    1fea:	0000                	unimp
    1fec:	0000                	unimp
    1fee:	8c00                	0x8c00
    1ff0:	0000                	unimp
    1ff2:	9000                	0x9000
    1ff4:	0000                	unimp
    1ff6:	0100                	addi	s0,sp,128
    1ff8:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0d56                	slli	s10,s10,0x15
  16:	0000                	unimp
  18:	0fde                	slli	t6,t6,0x17
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	1a41                	addi	s4,s4,-16
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0de2                	slli	s11,s11,0x18
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0de2                	slli	s11,s11,0x18
   6:	0000                	unimp
   8:	0fde                	slli	t6,t6,0x17
   a:	0000                	unimp
   c:	1116                	slli	sp,sp,0x25
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0de2                	slli	s11,s11,0x18
  22:	0000                	unimp
  24:	0e58                	addi	a4,sp,788
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	289d                	jal	76 <__DYNAMIC+0x76>
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0x48>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x2c>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <polydiv+0x1fe>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0xa2>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0x56>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    switch(length%3) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x12>
      a0:	0065                	c.nop	25
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
            for (i = 0; i < (length / 3); i++) {
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
            for (i = 0; i < ((length-2) / 3); i++) {
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
            a1[length-1] = a2[length-1];
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x8e>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
            a1[length-2] = a2[length-2];
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
} //end of function
      f0:	6975                	lui	s2,0x1d
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
    asm volatile(
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
            for (i = 0; i < (length / 3); i++) {
     102:	008c                	addi	a1,sp,64
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     104:	0000                	unimp
     106:	05010f03          	lb	t5,80(sp)
    asm volatile(
     10a:	0305                	addi	t1,t1,1
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
     110:	0301                	addi	t1,t1,0
            for (i = 0; i < ((length-1) / 3); i++) {
     112:	0909                	addi	s2,s2,2
     114:	0004                	0x4
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
     116:	0501                	addi	a0,a0,0
     118:	0601                	addi	a2,a2,0
    asm volatile(
     11a:	00090203          	lb	tp,0(s2) # b000 <_stack_len+0x7000>
     11e:	0100                	addi	s0,sp,128
     120:	2c05                	jal	350 <polymult2+0x1c>
     122:	0306                	slli	t1,t1,0x1
            for (i = 0; i < ((length-2) / 3); i++) {
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
    int line[size_b][size_a + size_b];
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     13a:	0612                	slli	a2,a2,0x4
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0505                	addi	a0,a0,1
     144:	06090003          	lb	zero,96(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     148:	0100                	addi	s0,sp,128
     14a:	2505                	jal	76a <ext_euclid+0x88>
     14c:	0e090303          	lb	t1,224(s2)
     150:	0100                	addi	s0,sp,128
     152:	1905                	addi	s2,s2,-31
     154:	0200                	addi	s0,sp,256
     156:	0104                	addi	s1,sp,128
     158:	0306                	slli	t1,t1,0x1
     15a:	0900                	addi	s0,sp,144
     15c:	0006                	c.slli	zero,0x1
    int line[size_b][size_a + size_b];
     15e:	0501                	addi	a0,a0,0
    int pola[size_a];
     160:	000d                	c.nop	3
     162:	0402                	c.slli64	s0
    int line[size_b][size_a + size_b];
     164:	0601                	addi	a2,a2,0
    int pola[size_a];
     166:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     16a:	0100                	addi	s0,sp,128
    int pola[size_a];
     16c:	2505                	jal	78c <ext_euclid+0xaa>
    int line[size_b][size_a + size_b];
     16e:	06090b03          	lb	s6,96(s2)
    int pola[size_a];
     172:	0100                	addi	s0,sp,128
    int polb[size_b];
     174:	2905                	jal	5a4 <polydiv+0x100>
     176:	04090003          	lb	zero,64(s2)
    int pola[size_a];
     17a:	0100                	addi	s0,sp,128
    int polb[size_b];
     17c:	1405                	addi	s0,s0,-31
     17e:	04090003          	lb	zero,64(s2)
            line[i][j] = 0;
     182:	0100                	addi	s0,sp,128
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     184:	1905                	addi	s2,s2,-31
     186:	0200                	addi	s0,sp,256
    int pola[size_a];
     188:	0104                	addi	s1,sp,128
     18a:	0306                	slli	t1,t1,0x1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     18c:	0900                	addi	s0,sp,144
    int line[size_b][size_a + size_b];
     18e:	0004                	0x4
     190:	0501                	addi	a0,a0,0
    int polb[size_b];
     192:	000d                	c.nop	3
            line[i][j] = 0;
     194:	0402                	c.slli64	s0
     196:	0601                	addi	a2,a2,0
     198:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     19c:	0100                	addi	s0,sp,128
            product[j] = 0;
     19e:	0306                	slli	t1,t1,0x1
     1a0:	00040903          	lb	s2,0(s0) # ffff7000 <_stack_start+0xfffe7000>
     1a4:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1a6:	061e                	slli	a2,a2,0x7
     1a8:	00090003          	lb	zero,0(s2)
    array_equ(pola,a,size_a);
     1ac:	0100                	addi	s0,sp,128
     1ae:	1a05                	addi	s4,s4,-31
     1b0:	0a090003          	lb	zero,160(s2)
     1b4:	0100                	addi	s0,sp,128
     1b6:	2505                	jal	7d6 <ext_euclid+0xf4>
     1b8:	08097703          	0x8097703
    for (i = 0; i < size_a; ++i){
     1bc:	0100                	addi	s0,sp,128
     1be:	2905                	jal	5ee <polydiv+0x14a>
     1c0:	04090003          	lb	zero,64(s2)
     1c4:	0100                	addi	s0,sp,128
     1c6:	1405                	addi	s0,s0,-31
     1c8:	04090003          	lb	zero,64(s2)
    array_equ(polb,b,size_b);
     1cc:	0100                	addi	s0,sp,128
     1ce:	1905                	addi	s2,s2,-31
     1d0:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     1d2:	0104                	addi	s1,sp,128
     1d4:	0306                	slli	t1,t1,0x1
     1d6:	0900                	addi	s0,sp,144
     1d8:	0004                	0x4
    if(star_mult == 1){
     1da:	0501                	addi	a0,a0,0
     1dc:	000d                	c.nop	3
     1de:	0402                	c.slli64	s0
     1e0:	0601                	addi	a2,a2,0
     1e2:	00090003          	lb	zero,0(s2)
     1e6:	0100                	addi	s0,sp,128
     1e8:	0306                	slli	t1,t1,0x1
     1ea:	00040903          	lb	s2,0(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     1ee:	0501                	addi	a0,a0,0
     1f0:	061e                	slli	a2,a2,0x7
            for (k = size_a-1; k >= 0; k = k-1 ){
     1f2:	00090003          	lb	zero,0(s2)
            product[j] = 0;
     1f6:	0100                	addi	s0,sp,128
     1f8:	0d05                	addi	s10,s10,1
     1fa:	0306                	slli	t1,t1,0x1
            line[i][j] = 0;
     1fc:	00020907          	0x20907
            product[j] = 0;
     200:	0501                	addi	a0,a0,0
     202:	061e                	slli	a2,a2,0x7
        for(j = 0; j < size_a + size_b -1; ++j){
     204:	00090003          	lb	zero,0(s2)
     208:	0100                	addi	s0,sp,128
     20a:	1a05                	addi	s4,s4,-31
    for (i = 0; i < size_b; ++i){
     20c:	06090003          	lb	zero,96(s2)
     210:	0100                	addi	s0,sp,128
     212:	0605                	addi	a2,a2,1
        for(j = 0; j < size_a + size_b -1; ++j){
     214:	0306                	slli	t1,t1,0x1
     216:	0901                	addi	s2,s2,0
            pola[i] = pola[i] + mod;
     218:	0004                	0x4
     21a:	0501                	addi	a0,a0,0
        while (pola[i] < 0){
     21c:	0601                	addi	a2,a2,0
     21e:	00090203          	lb	tp,0(s2)
        pola[i] = pola[i] % mod;
     222:	0100                	addi	s0,sp,128
     224:	1105                	addi	sp,sp,-31
    for (i = 0; i < size_a; ++i){
     226:	0200                	addi	s0,sp,256
     228:	0304                	addi	s1,sp,384
        pola[i] = pola[i] % mod;
     22a:	0306                	slli	t1,t1,0x1
     22c:	0002096f          	jal	s2,2022c <_stack_start+0x1022c>
            polb[i] = polb[i] + mod;
     230:	0501                	addi	a0,a0,0
     232:	0005                	c.nop	1
        while (polb[i] < 0){
     234:	0402                	c.slli64	s0
     236:	096e0303          	lb	t1,150(t3) # 1a096 <_stack_start+0xa096>
        polb[i] = polb[i] % mod;
     23a:	0004                	0x4
     23c:	0001                	nop
    for (i = 0; i < size_b; ++i){
     23e:	0402                	c.slli64	s0
     240:	09090303          	lb	t1,144(s2)
        polb[i] = polb[i] % mod;
     244:	000a                	c.slli	zero,0x2
    for (i = 0; i < size_b; ++i){
     246:	0501                	addi	a0,a0,0
    if(star_mult == 1){
     248:	0402002b          	0x402002b
        for (j = size_b -1; j >= 0; j = j-1){
     24c:	09080303          	lb	t1,144(a6)
    for (i = 0; i < size_b; ++i){
     250:	0000                	unimp
     252:	0501                	addi	a0,a0,0
     254:	002c                	addi	a1,sp,8
     256:	0402                	c.slli64	s0
     258:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
     25c:	0009                	c.nop	2
    for(j = 0; j < size_a + size_b -1; ++j){
     25e:	0100                	addi	s0,sp,128
     260:	1105                	addi	sp,sp,-31
     262:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     264:	0304                	addi	s1,sp,384
     266:	0306                	slli	t1,t1,0x1
     268:	0906                	slli	s2,s2,0x1
}
     26a:	0004                	0x4
     26c:	0501                	addi	a0,a0,0
     26e:	0005                	c.nop	1
     270:	0402                	c.slli64	s0
     272:	09690303          	lb	t1,150(s2)
     276:	0004                	0x4
     278:	0001                	nop
     27a:	0402                	c.slli64	s0
     27c:	09090303          	lb	t1,144(s2)
     280:	000a                	c.slli	zero,0x2
     282:	0501                	addi	a0,a0,0
     284:	0402002f          	0x402002f
     288:	090d0303          	lb	t1,144(s10)
     28c:	0000                	unimp
     28e:	0501                	addi	a0,a0,0
     290:	0030                	addi	a2,sp,8
     292:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     294:	00030603          	lb	a2,0(t1)
     298:	0009                	c.nop	2
     29a:	0100                	addi	s0,sp,128
     29c:	1105                	addi	sp,sp,-31
     29e:	0200                	addi	s0,sp,256
     2a0:	0304                	addi	s1,sp,384
     2a2:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     2a4:	00040907          	0x40907
                line[size_b-1-j][k] = pola[k]*polb[j];
     2a8:	0501                	addi	a0,a0,0
     2aa:	0005                	c.nop	1
            for (k = size_a-1; k >= 0; k = k-1 ){
     2ac:	0402                	c.slli64	s0
     2ae:	09630303          	lb	t1,150(t1)
        for (j = size_b -1; j >= 0; j = j-1){
     2b2:	0004                	0x4
     2b4:	0001                	nop
     2b6:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2b8:	09090303          	lb	t1,144(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2bc:	000a                	c.slli	zero,0x2
     2be:	0501                	addi	a0,a0,0
     2c0:	0402002f          	0x402002f
     2c4:	09130303          	lb	t1,145(t1)
     2c8:	0000                	unimp
     2ca:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     2cc:	0030                	addi	a2,sp,8
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     2ce:	0402                	c.slli64	s0
     2d0:	00030603          	lb	a2,0(t1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     2d4:	0009                	c.nop	2
     2d6:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     2d8:	4e05                	li	t3,1
     2da:	0306                	slli	t1,t1,0x1
     2dc:	090d                	addi	s2,s2,3
     2de:	0004                	0x4
            line[i][j] = line[i][j] % mod;
     2e0:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     2e2:	0305                	addi	t1,t1,1
     2e4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
            line[i][j] = line[i][j] % mod;
     2e8:	0501                	addi	a0,a0,0
     2ea:	064e                	slli	a2,a2,0x13
     2ec:	00097d03          	0x97d03
        for(j = 0; j < size_a + size_b -1; ++j){
     2f0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     2f2:	1d05                	addi	s10,s10,-31
     2f4:	08090303          	lb	t1,128(s2)
     2f8:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     2fa:	4e05                	li	t3,1
     2fc:	06097d03          	0x6097d03
            product[j] += line[i][j];
     300:	0100                	addi	s0,sp,128
     302:	0905                	addi	s2,s2,1
     304:	04090303          	lb	t1,64(s2)
        for(i = 0; i < size_b; ++i){
     308:	0100                	addi	s0,sp,128
            product[j] += line[i][j];
     30a:	4e05                	li	t3,1
     30c:	0c097d03          	0xc097d03
     310:	0100                	addi	s0,sp,128
     312:	14090003          	lb	zero,320(s2)
        for(i = 0; i < size_b; ++i){
     316:	0100                	addi	s0,sp,128
     318:	0905                	addi	s2,s2,1
    for(j = 0; j < size_a + size_b -1; ++j){
     31a:	04090303          	lb	t1,64(s2)
     31e:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     320:	02090303          	lb	t1,32(s2)
        product[j] = product[j] % mod;
     324:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     326:	04097d03          	0x4097d03
        product[j] = product[j] % mod;
     32a:	0100                	addi	s0,sp,128
     32c:	02090303          	lb	t1,32(s2)
     330:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     332:	02097d03          	0x2097d03
    int line[size_b][size_a + size_b];
     336:	0100                	addi	s0,sp,128
     338:	04090303          	lb	t1,64(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	0100                	addi	s0,sp,128
     33e:	02097d03          	0x2097d03
     342:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     344:	02090303          	lb	t1,32(s2)
     348:	0100                	addi	s0,sp,128
     34a:	04090103          	lb	sp,64(s2)
     34e:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     350:	06097f03          	0x6097f03
     354:	0100                	addi	s0,sp,128
     356:	02090103          	lb	sp,32(s2)
     35a:	0100                	addi	s0,sp,128
     35c:	1405                	addi	s0,s0,-31
     35e:	04090503          	lb	a0,64(s2)
    int line[size_b][size_a + size_b];
     362:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     364:	4e05                	li	t3,1
     366:	04097403          	0x4097403
    int line[size_b][size_a + size_b];
     36a:	0100                	addi	s0,sp,128
     36c:	0905                	addi	s2,s2,1
    int pola[size_a];
     36e:	04090603          	lb	a2,64(s2)
     372:	0100                	addi	s0,sp,128
     374:	4e05                	li	t3,1
    int line[size_b][size_a + size_b];
     376:	04097a03          	0x4097a03
    int pola[size_a];
     37a:	0100                	addi	s0,sp,128
    int polb[size_b];
     37c:	0905                	addi	s2,s2,1
     37e:	02090303          	lb	t1,32(s2)
    int pola[size_a];
     382:	0100                	addi	s0,sp,128
    int polb[size_b];
     384:	0505                	addi	a0,a0,1
     386:	0306                	slli	t1,t1,0x1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     388:	0901                	addi	s2,s2,0
     38a:	0004                	0x4
    int line[size_b][size_a + size_b];
     38c:	0301                	addi	t1,t1,0
     38e:	0901                	addi	s2,s2,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     390:	0000                	unimp
    int pola[size_a];
     392:	0301                	addi	t1,t1,0
     394:	0901                	addi	s2,s2,0
    int polb[size_b];
     396:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     398:	0301                	addi	t1,t1,0
     39a:	0901                	addi	s2,s2,0
     39c:	0000                	unimp
            product2[j] = 0;
     39e:	0501                	addi	a0,a0,0
     3a0:	0609                	addi	a2,a2,2
     3a2:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_b; ++i){
     3a6:	0100                	addi	s0,sp,128
     3a8:	0505                	addi	a0,a0,1
    array_equ(pola,a,size_a);
     3aa:	0306                	slli	t1,t1,0x1
     3ac:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     3b0:	0501                	addi	a0,a0,0
     3b2:	0614                	addi	a3,sp,768
     3b4:	00090203          	lb	tp,0(s2)
    array_equ(polb,b,size_b);
     3b8:	0100                	addi	s0,sp,128
     3ba:	0505                	addi	a0,a0,1
     3bc:	06097e03          	0x6097e03
     3c0:	0100                	addi	s0,sp,128
    if(star_mult == 1){
     3c2:	0c05                	addi	s8,s8,1
     3c4:	02090003          	lb	zero,32(s2)
     3c8:	0100                	addi	s0,sp,128
     3ca:	1805                	addi	a6,a6,-31
     3cc:	02090303          	lb	t1,32(s2)
     3d0:	0100                	addi	s0,sp,128
     3d2:	1105                	addi	sp,sp,-31
        for (j = size_b -1; j >= 0; j = j-1){
     3d4:	0200                	addi	s0,sp,256
     3d6:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0306                	slli	t1,t1,0x1
     3da:	097d                	addi	s2,s2,31
            product2[j] = 0;
     3dc:	0008                	0x8
     3de:	0501                	addi	a0,a0,0
     3e0:	0005                	c.nop	1
            line[i][j] = 0;
     3e2:	0402                	c.slli64	s0
     3e4:	0601                	addi	a2,a2,0
            product2[j] = 0;
     3e6:	00090003          	lb	zero,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     3ea:	0100                	addi	s0,sp,128
     3ec:	04090703          	lb	a4,64(s2)
     3f0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     3f2:	0306                	slli	t1,t1,0x1
     3f4:	0900                	addi	s0,sp,144
     3f6:	000a                	c.slli	zero,0x2
     3f8:	0301                	addi	t1,t1,0
        for(j = 0; j < size_a + size_b -1; ++j){
     3fa:	0902                	c.slli64	s2
     3fc:	0006                	c.slli	zero,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3fe:	0501                	addi	a0,a0,0
     400:	060c                	addi	a1,sp,768
     402:	0a090003          	lb	zero,160(s2)
     406:	0100                	addi	s0,sp,128
     408:	1105                	addi	sp,sp,-31
     40a:	0200                	addi	s0,sp,256
     40c:	0104                	addi	s1,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     40e:	0306                	slli	t1,t1,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     410:	0900                	addi	s0,sp,144
     412:	0002                	c.slli64	zero
     414:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     416:	0005                	c.nop	1
     418:	0402                	c.slli64	s0
        for (j = size_b -1; j >= 0; j = j-1){
     41a:	0601                	addi	a2,a2,0
     41c:	00090003          	lb	zero,0(s2)
     420:	0100                	addi	s0,sp,128
     422:	0306                	slli	t1,t1,0x1
        for(j=0;j<size_a+size_b-1;++j){
     424:	00040907          	0x40907
    for(i=0;i<size_b;++i){
     428:	0301                	addi	t1,t1,0
     42a:	0902                	c.slli64	s2
     42c:	0008                	0x8
     42e:	0501                	addi	a0,a0,0
     430:	060c                	addi	a1,sp,768
     432:	02090003          	lb	zero,32(s2)
        for(j=0;j<size_a+size_b-1;++j){
     436:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     438:	1105                	addi	sp,sp,-31
     43a:	0200                	addi	s0,sp,256
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     43c:	0104                	addi	s1,sp,128
     43e:	0306                	slli	t1,t1,0x1
     440:	0900                	addi	s0,sp,144
     442:	0002                	c.slli64	zero
     444:	0501                	addi	a0,a0,0
     446:	0005                	c.nop	1
     448:	0402                	c.slli64	s0
     44a:	0601                	addi	a2,a2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     44c:	00090003          	lb	zero,0(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     450:	0100                	addi	s0,sp,128
     452:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     454:	0004090b          	0x4090b
        for (j = size_b -1; j >= 0; j = j-1){
     458:	0501                	addi	a0,a0,0
     45a:	00030607          	0x30607
     45e:	0009                	c.nop	2
            product2[j] += line[i][j];
     460:	0100                	addi	s0,sp,128
     462:	1d05                	addi	s10,s10,-31
        for(j=0;j<size_a+size_b-1;++j){
     464:	0200                	addi	s0,sp,256
     466:	0104                	addi	s1,sp,128
            product2[j] += line[i][j];
     468:	0306                	slli	t1,t1,0x1
     46a:	0908                	addi	a0,sp,144
     46c:	0014                	0x14
        for(j=0;j<size_a+size_b-1;++j){
     46e:	0501                	addi	a0,a0,0
     470:	0009                	c.nop	2
     472:	0402                	c.slli64	s0
    for(i=0;i<size_b;++i){
     474:	0601                	addi	a2,a2,0
     476:	00090003          	lb	zero,0(s2)
}
     47a:	0100                	addi	s0,sp,128
     47c:	1405                	addi	s0,s0,-31
     47e:	04090103          	lb	sp,64(s2)
     482:	0100                	addi	s0,sp,128
     484:	0d05                	addi	s10,s10,1
     486:	0200                	addi	s0,sp,256
     488:	0304                	addi	s1,sp,384
     48a:	0306                	slli	t1,t1,0x1
     48c:	095c                	addi	a5,sp,148
     48e:	0004                	0x4
     490:	0501                	addi	a0,a0,0
     492:	0018                	0x18
     494:	0402                	c.slli64	s0
     496:	01030603          	lb	a2,16(t1)
     49a:	0009                	c.nop	2
     49c:	0100                	addi	s0,sp,128
     49e:	0200                	addi	s0,sp,256
     4a0:	0304                	addi	s1,sp,384
     4a2:	06097f03          	0x6097f03
    int v[size_N];
     4a6:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4a8:	0d05                	addi	s10,s10,1
    int v[size_N];
     4aa:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4ac:	0304                	addi	s1,sp,384
     4ae:	0306                	slli	t1,t1,0x1
     4b0:	0901                	addi	s2,s2,0
     4b2:	0004                	0x4
     4b4:	0501                	addi	a0,a0,0
     4b6:	0018                	0x18
     4b8:	0402                	c.slli64	s0
     4ba:	00030603          	lb	a2,0(t1)
     4be:	0009                	c.nop	2
     4c0:	0100                	addi	s0,sp,128
     4c2:	2c05                	jal	6f2 <ext_euclid+0x10>
    int v[size_N];
     4c4:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4c6:	0304                	addi	s1,sp,384
     4c8:	0306                	slli	t1,t1,0x1
    int v[size_N];
     4ca:	097e                	slli	s2,s2,0x1f
     4cc:	0004                	0x4
     4ce:	0501                	addi	a0,a0,0
    int q[size_N];
     4d0:	0014                	0x14
     4d2:	0402                	c.slli64	s0
     4d4:	0301                	addi	t1,t1,0
    int num_temp[size_N];
     4d6:	0900                	addi	s0,sp,144
     4d8:	0004                	0x4
    int denum_temp[size_D];
     4da:	0501                	addi	a0,a0,0
     4dc:	0009                	c.nop	2
     4de:	0402                	c.slli64	s0
    int num_temp[size_N];
     4e0:	0601                	addi	a2,a2,0
    int denum_temp[size_D];
     4e2:	00090003          	lb	zero,0(s2)
     4e6:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4e8:	1d05                	addi	s10,s10,-31
     4ea:	0200                	addi	s0,sp,256
    int v[size_N];
     4ec:	0204                	addi	s1,sp,256
     4ee:	0306                	slli	t1,t1,0x1
     array_equ(num_temp,num,size_N);
     4f0:	097f                	0x97f
     4f2:	0004                	0x4
     4f4:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     4f6:	0103060f          	0x103060f
    int denum_temp[size_D];
     4fa:	0809                	addi	a6,a6,2
     4fc:	0100                	addi	s0,sp,128
     array_equ(num_temp,num,size_N);
     4fe:	0d05                	addi	s10,s10,1
    int denum_temp[size_D];
     500:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     502:	090a                	slli	s2,s2,0x2
     504:	0004                	0x4
     506:	0501                	addi	a0,a0,0
     508:	061f 0003 0009      	0x90003061f
        array_equ(denum_temp,denum,size_D);
     50e:	0100                	addi	s0,sp,128
     510:	1505                	addi	a0,a0,-31
     512:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size_D; ++i) {
     516:	0100                	addi	s0,sp,128
     518:	0f05                	addi	t5,t5,1
     51a:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_N; ++i){
     51c:	097f                	0x97f
     51e:	0002                	c.slli64	zero
     520:	0501                	addi	a0,a0,0
    for (i = size_D-1; i >= 0; i = i-1){
     522:	0614                	addi	a3,sp,768
     524:	00090003          	lb	zero,0(s2)
     528:	0100                	addi	s0,sp,128
     52a:	0f05                	addi	t5,t5,1
     52c:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size_N; ++i){
     530:	0100                	addi	s0,sp,128
        if ( (b_N*u)%mod == 1 )
     532:	0905                	addi	s2,s2,1
    for (u = 0; u < mod; ++u){
     534:	0200                	addi	s0,sp,256
     536:	0204                	addi	s1,sp,256
     538:	0306                	slli	t1,t1,0x1
     53a:	00040903          	lb	s2,0(s0)
            num_temp[i] = num_temp[i] + mod;
     53e:	0501                	addi	a0,a0,0
        while (num_temp[i] < 0) {
     540:	0402001b          	0x402001b
     544:	0602                	c.slli64	a2
        num_temp[i] = num_temp[i] % mod;
     546:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_N; ++i){
     54a:	0100                	addi	s0,sp,128
     54c:	1d05                	addi	s10,s10,-31
        num_temp[i] = num_temp[i] % mod;
     54e:	0200                	addi	s0,sp,256
     550:	0204                	addi	s1,sp,256
    for (i = 0; i < size_N; ++i){
     552:	04097c03          	0x4097c03
            denum_temp[i] = denum_temp[i] + mod;
     556:	0100                	addi	s0,sp,128
        while (denum_temp[i] < 0) {
     558:	1105                	addi	sp,sp,-31
     55a:	0200                	addi	s0,sp,256
     55c:	0204                	addi	s1,sp,256
        denum_temp[i] = denum_temp[i] % mod;
     55e:	04090403          	lb	s0,64(s2)
    for (i = 0; i < size_D; ++i) {
     562:	0100                	addi	s0,sp,128
     564:	1d05                	addi	s10,s10,-31
        denum_temp[i] = denum_temp[i] % mod;
     566:	0200                	addi	s0,sp,256
     568:	0204                	addi	s1,sp,256
    for (i = 0; i < size_D; ++i) {
     56a:	0306                	slli	t1,t1,0x1
        q[i] = 0;
     56c:	097c                	addi	a5,sp,156
     56e:	0004                	0x4
     570:	0501                	addi	a0,a0,0
     572:	030d                	addi	t1,t1,3
        v[i] = 0;
     574:	0002090b          	0x2090b
        q[i] = 0;
     578:	0501                	addi	a0,a0,0
        v[i] = 0;
     57a:	061f 0003 0009      	0x90003061f
    for (i = 0; i < size_N; ++i){
     580:	0100                	addi	s0,sp,128
        if( denum_temp[i] != 0 )
     582:	1505                	addi	a0,a0,-31
    for (i = size_D-1; i >= 0; i = i-1){
     584:	02090003          	lb	zero,32(s2)
        if ( (b_N*u)%mod == 1 )
     588:	0100                	addi	s0,sp,128
     58a:	0f05                	addi	t5,t5,1
     58c:	0306                	slli	t1,t1,0x1
     58e:	097f                	0x97f
     590:	0002                	c.slli64	zero
    for (u = 0; u < mod; ++u){
     592:	0501                	addi	a0,a0,0
     594:	0614                	addi	a3,sp,768
        if( num_temp[i] != 0 )
     596:	00090003          	lb	zero,0(s2)
    for (i = size_N-1; i >= 0; i = i-1){
     59a:	0100                	addi	s0,sp,128
     59c:	0f05                	addi	t5,t5,1
     59e:	02090003          	lb	zero,32(s2)
     5a2:	0100                	addi	s0,sp,128
     5a4:	0905                	addi	s2,s2,1
    while (d >= d2){
     5a6:	0200                	addi	s0,sp,256
     5a8:	0204                	addi	s1,sp,256
    array_equ(result,q,size_N);
     5aa:	0306                	slli	t1,t1,0x1
     5ac:	00040903          	lb	s2,0(s0)
     5b0:	0501                	addi	a0,a0,0
     5b2:	0402001b          	0x402001b
     5b6:	0602                	c.slli64	a2
    for(i = size_N; i < (2*size_N); ++i){
     5b8:	00090003          	lb	zero,0(s2)
        result[i] = num_temp[i-size_N];
     5bc:	0100                	addi	s0,sp,128
     5be:	1d05                	addi	s10,s10,-31
     5c0:	0200                	addi	s0,sp,256
     5c2:	0204                	addi	s1,sp,256
    for(i = size_N; i < (2*size_N); ++i){
     5c4:	04097c03          	0x4097c03
}
     5c8:	0100                	addi	s0,sp,128
     5ca:	1105                	addi	sp,sp,-31
     5cc:	0200                	addi	s0,sp,256
     5ce:	0204                	addi	s1,sp,256
     5d0:	04090403          	lb	s0,64(s2)
     5d4:	0100                	addi	s0,sp,128
     5d6:	1d05                	addi	s10,s10,-31
     5d8:	0200                	addi	s0,sp,256
     5da:	0204                	addi	s1,sp,256
     5dc:	0306                	slli	t1,t1,0x1
     5de:	097c                	addi	a5,sp,156
     5e0:	0004                	0x4
     5e2:	0501                	addi	a0,a0,0
     5e4:	0b030607          	0xb030607
     5e8:	0209                	addi	tp,tp,2
     5ea:	0100                	addi	s0,sp,128
     5ec:	1d05                	addi	s10,s10,-31
     5ee:	0200                	addi	s0,sp,256
     5f0:	0104                	addi	s1,sp,128
        v[(d-d2)] = u*r_d;
     5f2:	0306                	slli	t1,t1,0x1
     5f4:	0901                	addi	s2,s2,0
     5f6:	0002                	c.slli64	zero
     5f8:	0501                	addi	a0,a0,0
     5fa:	0009                	c.nop	2
     5fc:	0402                	c.slli64	s0
     5fe:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     600:	00090003          	lb	zero,0(s2)
     604:	0100                	addi	s0,sp,128
     606:	0f05                	addi	t5,t5,1
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     608:	04091003          	lh	zero,64(s2)
     60c:	0100                	addi	s0,sp,128
     60e:	1105                	addi	sp,sp,-31
     610:	0200                	addi	s0,sp,256
     612:	0104                	addi	s1,sp,128
     614:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     616:	097f                	0x97f
     618:	0002                	c.slli64	zero
     61a:	0501                	addi	a0,a0,0
     61c:	0005                	c.nop	1
     61e:	0402                	c.slli64	s0
        for (i = 0; i < size_N; ++i){
     620:	0601                	addi	a2,a2,0
     622:	00090003          	lb	zero,0(s2)
     626:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     628:	0c090003          	lb	zero,192(s2)
     62c:	0100                	addi	s0,sp,128
     62e:	0b05                	addi	s6,s6,1
        for(i = 0; i < size_N; ++i){
     630:	02090703          	lb	a4,32(s2)
     634:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     636:	1005                	c.nop	-31
     638:	0200                	addi	s0,sp,256
     63a:	0104                	addi	s1,sp,128
     63c:	0306                	slli	t1,t1,0x1
     63e:	0900                	addi	s0,sp,144
     640:	0002                	c.slli64	zero
     642:	0501                	addi	a0,a0,0
     644:	0005                	c.nop	1
     646:	0402                	c.slli64	s0
            v[i] = v[i] % mod;
     648:	0601                	addi	a2,a2,0
        for (i = 0; i < size_N; ++i){
     64a:	00090003          	lb	zero,0(s2)
            v[i] = v[i] % mod;
     64e:	0100                	addi	s0,sp,128
     650:	0b05                	addi	s6,s6,1
     652:	04090703          	lb	a4,64(s2)
        for (i = 0; i < size_N; ++i){
     656:	0100                	addi	s0,sp,128
                product[i] = product[i] + mod;
     658:	1005                	c.nop	-31
     65a:	0200                	addi	s0,sp,256
            while (product[i] < 0) {
     65c:	0104                	addi	s1,sp,128
     65e:	0306                	slli	t1,t1,0x1
     660:	0900                	addi	s0,sp,144
            product[i] = product[i] % mod;
     662:	0002                	c.slli64	zero
     664:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     666:	0005                	c.nop	1
     668:	0402                	c.slli64	s0
            product[i] = product[i] % mod;
     66a:	0601                	addi	a2,a2,0
     66c:	00090003          	lb	zero,0(s2)
            num_temp[i] = num_temp[i] - product[i];
     670:	0100                	addi	s0,sp,128
     672:	0306                	slli	t1,t1,0x1
     674:	0906                	slli	s2,s2,0x1
     676:	0004                	0x4
     678:	0301                	addi	t1,t1,0
        for (i = 0; i < size_N; ++i){
     67a:	0902                	c.slli64	s2
     67c:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     67e:	0501                	addi	a0,a0,0
     680:	0601                	addi	a2,a2,0
     682:	00090103          	lb	sp,0(s2)
                num_temp[i] = num_temp[i] + mod;
     686:	0100                	addi	s0,sp,128
     688:	1105                	addi	sp,sp,-31
            while (num_temp[i] < 0){
     68a:	0200                	addi	s0,sp,256
     68c:	0304                	addi	s1,sp,384
     68e:	0306                	slli	t1,t1,0x1
            num_temp[i] = num_temp[i] % mod;
     690:	095c                	addi	a5,sp,148
     692:	002a                	c.slli	zero,0xa
        for (i = 0; i < size_N; ++i){
     694:	0501                	addi	a0,a0,0
     696:	0025                	c.nop	9
            num_temp[i] = num_temp[i] % mod;
     698:	0402                	c.slli64	s0
     69a:	00030603          	lb	a2,0(t1)
            q[i] = q[i] + v[i];
     69e:	0409                	addi	s0,s0,2
     6a0:	0100                	addi	s0,sp,128
     6a2:	2b05                	jal	bd2 <generate_keys+0x242>
     6a4:	0200                	addi	s0,sp,256
     6a6:	0304                	addi	s1,sp,384
        for(i = 0; i < size_N; ++i){
     6a8:	04090003          	lb	zero,64(s2)
            q[i] = q[i] + v[i];
     6ac:	0100                	addi	s0,sp,128
            q[i] = q[i] % mod;
     6ae:	2e05                	jal	9de <generate_keys+0x4e>
     6b0:	0200                	addi	s0,sp,256
     6b2:	0304                	addi	s1,sp,384
     6b4:	02090003          	lb	zero,32(s2)
            if( num_temp[i] != 0 )
     6b8:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     6ba:	2a05                	jal	7ea <ext_euclid+0x108>
     6bc:	0200                	addi	s0,sp,256
            v[i] = 0;
     6be:	0304                	addi	s1,sp,384
     6c0:	06097f03          	0x6097f03
     6c4:	0100                	addi	s0,sp,128
     6c6:	2e05                	jal	9f6 <generate_keys+0x66>
        for (i = 0; i < size_N; ++i){
     6c8:	0200                	addi	s0,sp,256
     6ca:	0304                	addi	s1,sp,384
     6cc:	02090103          	lb	sp,32(s2)
        result[i] = num_temp[i-size_N];
     6d0:	0100                	addi	s0,sp,128
     6d2:	2505                	jal	cf2 <ntru_encyrpt+0x6e>
     6d4:	0200                	addi	s0,sp,256
     6d6:	0304                	addi	s1,sp,384
     6d8:	04090003          	lb	zero,64(s2)
    for(i = size_N; i < (2*size_N); ++i){
     6dc:	0100                	addi	s0,sp,128
     6de:	2805                	jal	70e <ext_euclid+0x2c>
     6e0:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6e2:	0304                	addi	s1,sp,384
     6e4:	0306                	slli	t1,t1,0x1
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6e6:	097f                	0x97f
    int ri_2[size]; // MX-ring poly, a
     6e8:	0002                	c.slli64	zero
     6ea:	0501                	addi	a0,a0,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6ec:	0020                	addi	s0,sp,8
     6ee:	0402                	c.slli64	s0
     6f0:	0301                	addi	t1,t1,0
     6f2:	0900                	addi	s0,sp,144
     6f4:	0000                	unimp
     6f6:	0501                	addi	a0,a0,0
     6f8:	000d                	c.nop	3
     6fa:	0402                	c.slli64	s0
     6fc:	0601                	addi	a2,a2,0
     6fe:	00090003          	lb	zero,0(s2)
     702:	0100                	addi	s0,sp,128
     704:	2505                	jal	d24 <ntru_deceypt+0xa>
     706:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     708:	0204                	addi	s1,sp,256
     70a:	0306                	slli	t1,t1,0x1
     70c:	097f                	0x97f
    int ri_1[size]; // f-random poly, f[N] = 0, b
     70e:	0004                	0x4
     710:	0501                	addi	a0,a0,0
     712:	04020027          	0x4020027
    int ri[size];
     716:	0602                	c.slli64	a2
     718:	00090003          	lb	zero,0(s2)
    int ti_1[size]; // ti_1[0] = 1
     71c:	0100                	addi	s0,sp,128
     71e:	1405                	addi	s0,s0,-31
    int ti[size];
     720:	08090103          	lb	sp,128(s2)
     724:	0100                	addi	s0,sp,128
    int qi_1[size];
     726:	1105                	addi	sp,sp,-31
     728:	0200                	addi	s0,sp,256
     72a:	0304                	addi	s1,sp,384
    int temp[size];
     72c:	0306                	slli	t1,t1,0x1
     72e:	0908                	addi	a0,sp,144
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     730:	0004                	0x4
     732:	0501                	addi	a0,a0,0
     734:	0029                	c.nop	10
    int ri_2[size]; // MX-ring poly, a
     736:	0402                	c.slli64	s0
     738:	00030603          	lb	a2,0(t1)
    for (i = 0; i < size; ++i) {
     73c:	0409                	addi	s0,s0,2
        ti_2[i] = 0;
     73e:	0100                	addi	s0,sp,128
     740:	2f05                	jal	e70 <memcpy+0x18>
     742:	0200                	addi	s0,sp,256
     744:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     746:	04090003          	lb	zero,64(s2)
    array_equ(ri_2,polyR,size);
     74a:	0100                	addi	s0,sp,128
     74c:	3205                	jal	6c <__DYNAMIC+0x6c>
     74e:	0200                	addi	s0,sp,256
     750:	0304                	addi	s1,sp,384
    array_equ(ri_1,polyf,size);
     752:	02090003          	lb	zero,32(s2)
     756:	0100                	addi	s0,sp,128
     758:	2a05                	jal	888 <ext_euclid+0x1a6>
    ti_1[0] = 1;
     75a:	0200                	addi	s0,sp,256
     75c:	0304                	addi	s1,sp,384
     75e:	06097f03          	0x6097f03
        for (i = N + 1; i < (2 * N + 2); ++i) {
     762:	0100                	addi	s0,sp,128
     764:	3205                	jal	84 <__DYNAMIC+0x84>
     766:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     768:	0304                	addi	s1,sp,384
     76a:	02090103          	lb	sp,32(s2)
        ti_2[i] = 0;
     76e:	0100                	addi	s0,sp,128
     770:	2905                	jal	ba0 <generate_keys+0x210>
     772:	0200                	addi	s0,sp,256
        ti_1[i] = 0;
     774:	0304                	addi	s1,sp,384
        ti_2[i] = 0;
     776:	04090003          	lb	zero,64(s2)
        ti_1[i] = 0;
     77a:	0100                	addi	s0,sp,128
     77c:	2805                	jal	7ac <ext_euclid+0xca>
    for (i = 0; i < size; ++i) {
     77e:	0200                	addi	s0,sp,256
     780:	0304                	addi	s1,sp,384
                ri_2[i] = ri_2[i] + mod;
     782:	0306                	slli	t1,t1,0x1
     784:	097f                	0x97f
            while (ri_2[i] < 0) {
     786:	0002                	c.slli64	zero
     788:	0501                	addi	a0,a0,0
     78a:	0020                	addi	s0,sp,8
            ri_2[i] = ri_2[i] % mod;
     78c:	0402                	c.slli64	s0
     78e:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     790:	0900                	addi	s0,sp,144
            ri_2[i] = ri_2[i] % mod;
     792:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     794:	0501                	addi	a0,a0,0
     796:	000d                	c.nop	3
     798:	0402                	c.slli64	s0
     79a:	0601                	addi	a2,a2,0
     79c:	00090003          	lb	zero,0(s2)
     7a0:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7a2:	2505                	jal	dc2 <ntru_deceypt+0xa8>
     7a4:	0200                	addi	s0,sp,256
     7a6:	0204                	addi	s1,sp,256
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     7a8:	0306                	slli	t1,t1,0x1
     7aa:	097f                	0x97f
     7ac:	0004                	0x4
     7ae:	0501                	addi	a0,a0,0
     7b0:	04020027          	0x4020027
        for (i = N + 1; i < (2 * N + 2); ++i) {
     7b4:	0602                	c.slli64	a2
     7b6:	00090003          	lb	zero,0(s2)
     7ba:	0100                	addi	s0,sp,128
     7bc:	0d05                	addi	s10,s10,1
     7be:	0200                	addi	s0,sp,256
     7c0:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     7c2:	0306                	slli	t1,t1,0x1
     7c4:	090a                	slli	s2,s2,0x2
     7c6:	0008                	0x8
     7c8:	0501                	addi	a0,a0,0
     7ca:	0025                	c.nop	9
        for (i = 0; i < N + 1; ++i) {
     7cc:	0402                	c.slli64	s0
     7ce:	00030603          	lb	a2,0(t1)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     7d2:	0009                	c.nop	2
     7d4:	0100                	addi	s0,sp,128
     7d6:	2c05                	jal	a06 <generate_keys+0x76>
     7d8:	0200                	addi	s0,sp,256
     7da:	0304                	addi	s1,sp,384
     7dc:	02097f03          	0x2097f03
    array_equ(qi_1,res1,size);
     7e0:	0100                	addi	s0,sp,128
     7e2:	2505                	jal	e02 <reset_handler+0x1c>
     7e4:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7e6:	0304                	addi	s1,sp,384
     7e8:	04090103          	lb	sp,64(s2)
     7ec:	0100                	addi	s0,sp,128
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     7ee:	1805                	addi	a6,a6,-31
     7f0:	0200                	addi	s0,sp,256
     7f2:	0304                	addi	s1,sp,384
     7f4:	04090003          	lb	zero,64(s2)
     7f8:	0100                	addi	s0,sp,128
     7fa:	2c05                	jal	a2a <generate_keys+0x9a>
     7fc:	0200                	addi	s0,sp,256
    array_equ(temp,res2,size);
     7fe:	0304                	addi	s1,sp,384
     800:	0306                	slli	t1,t1,0x1
     802:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     804:	0004                	0x4
     806:	0501                	addi	a0,a0,0
     808:	0014                	0x14
     80a:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     80c:	0301                	addi	t1,t1,0
     80e:	0900                	addi	s0,sp,144
     810:	0000                	unimp
     812:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     814:	0009                	c.nop	2
     816:	0402                	c.slli64	s0
     818:	0601                	addi	a2,a2,0
array_equ(ri_2,ri_1,size);
     81a:	00090003          	lb	zero,0(s2)
     81e:	0100                	addi	s0,sp,128
     820:	1d05                	addi	s10,s10,-31
array_equ(ri_1,ri,size);
     822:	0200                	addi	s0,sp,256
     824:	0204                	addi	s1,sp,256
     826:	0306                	slli	t1,t1,0x1
     828:	097f                	0x97f
array_equ(ti_2,ti_1,size);
     82a:	0004                	0x4
     82c:	0501                	addi	a0,a0,0
     82e:	0103060f          	0x103060f
     832:	0809                	addi	a6,a6,2
     834:	0100                	addi	s0,sp,128
     836:	0d05                	addi	s10,s10,1
array_equ(ti_1,ti,size);
     838:	0200                	addi	s0,sp,256
     83a:	0304                	addi	s1,sp,384
     83c:	0306                	slli	t1,t1,0x1
     83e:	0908                	addi	a0,sp,144
        controlR = 0;
     840:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     842:	0501                	addi	a0,a0,0
     844:	0022                	c.slli	zero,0x8
     846:	0402                	c.slli64	s0
    while (controlR != 0) {
     848:	00030603          	lb	a2,0(t1)
        for (j = 0; j < mod; ++j) {
     84c:	0009                	c.nop	2
            if (((ri_2[0] * j) % mod) == 1)
     84e:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     850:	1805                	addi	a6,a6,-31
     852:	0200                	addi	s0,sp,256
     854:	0304                	addi	s1,sp,384
     856:	04090003          	lb	zero,64(s2)
     85a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     85c:	2205                	jal	97c <ext_euclid+0x29a>
     85e:	0200                	addi	s0,sp,256
    }
     860:	0304                	addi	s1,sp,384
     862:	02090003          	lb	zero,32(s2)
     866:	0100                	addi	s0,sp,128
     868:	2005                	jal	888 <ext_euclid+0x1a6>
     86a:	0200                	addi	s0,sp,256
     86c:	0304                	addi	s1,sp,384
     86e:	04097f03          	0x4097f03
     872:	0100                	addi	s0,sp,128
     874:	2205                	jal	994 <generate_keys+0x4>
     876:	0200                	addi	s0,sp,256
     878:	0304                	addi	s1,sp,384
     87a:	02090103          	lb	sp,32(s2)
     87e:	0100                	addi	s0,sp,128
     880:	1805                	addi	a6,a6,-31
     882:	0200                	addi	s0,sp,256
     884:	0304                	addi	s1,sp,384
     886:	06090003          	lb	zero,96(s2)
                ri_1[i] = ri_1[i] + mod;
     88a:	0100                	addi	s0,sp,128
     88c:	2005                	jal	8ac <ext_euclid+0x1ca>
            while (ri_1[i] < 0) {
     88e:	0200                	addi	s0,sp,256
     890:	0304                	addi	s1,sp,384
     892:	0306                	slli	t1,t1,0x1
            ri_1[i] = ri_1[i] % mod;
     894:	097f                	0x97f
     896:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     898:	0501                	addi	a0,a0,0
     89a:	0014                	0x14
            ri_1[i] = ri_1[i] % mod;
     89c:	0402                	c.slli64	s0
     89e:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     8a0:	0900                	addi	s0,sp,144
            ri[i - (N + 1)] = res[i];
     8a2:	0000                	unimp
     8a4:	0501                	addi	a0,a0,0
     8a6:	0009                	c.nop	2
     8a8:	0402                	c.slli64	s0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8aa:	0601                	addi	a2,a2,0
     8ac:	00090003          	lb	zero,0(s2)
            ri[i - (N + 1)] = res[i];
     8b0:	0100                	addi	s0,sp,128
        for (i = N + 1; i < (2 * N + 2); ++i) {
     8b2:	2805                	jal	8e2 <ext_euclid+0x200>
            temp[i] = ri_2[i] - ri[i];
     8b4:	0200                	addi	s0,sp,256
     8b6:	0204                	addi	s1,sp,256
     8b8:	0306                	slli	t1,t1,0x1
     8ba:	097f                	0x97f
     8bc:	0004                	0x4
     8be:	0501                	addi	a0,a0,0
     8c0:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     8c4:	0609                	addi	a2,a2,2
            temp[i] = ri_2[i] - ri[i];
     8c6:	0100                	addi	s0,sp,128
     8c8:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     8ca:	0200                	addi	s0,sp,256
     8cc:	0304                	addi	s1,sp,384
                temp[i] = temp[i] + mod;
     8ce:	0306                	slli	t1,t1,0x1
     8d0:	00040907          	0x40907
            while (temp[i] < 0) {
     8d4:	0501                	addi	a0,a0,0
     8d6:	0021                	c.nop	8
            temp[i] = temp[i] % mod;
     8d8:	0402                	c.slli64	s0
     8da:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     8de:	0009                	c.nop	2
            temp[i] = temp[i] % mod;
     8e0:	0100                	addi	s0,sp,128
     8e2:	2805                	jal	912 <ext_euclid+0x230>
        for (i = 0; i < N + 1; ++i) {
     8e4:	0200                	addi	s0,sp,256
                qi_1[i] = qi_1[i] + mod;
     8e6:	0304                	addi	s1,sp,384
     8e8:	02097f03          	0x2097f03
            while (qi_1[i] < 0) {
     8ec:	0100                	addi	s0,sp,128
     8ee:	2105                	jal	d0e <ntru_encyrpt+0x8a>
            qi_1[i] = qi_1[i] % mod;
     8f0:	0200                	addi	s0,sp,256
     8f2:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     8f4:	04090103          	lb	sp,64(s2)
            qi_1[i] = qi_1[i] % mod;
     8f8:	0100                	addi	s0,sp,128
     8fa:	1405                	addi	s0,s0,-31
        for (i = 0; i < N + 1; ++i) {
     8fc:	0200                	addi	s0,sp,256
                temp[i] = temp[i] + mod;
     8fe:	0304                	addi	s1,sp,384
     900:	04090003          	lb	zero,64(s2)
            while (temp[i] < 0) {
     904:	0100                	addi	s0,sp,128
     906:	2805                	jal	936 <ext_euclid+0x254>
     908:	0200                	addi	s0,sp,256
     90a:	0304                	addi	s1,sp,384
            temp[i] = temp[i] % mod;
     90c:	0306                	slli	t1,t1,0x1
     90e:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     910:	0004                	0x4
     912:	0501                	addi	a0,a0,0
            temp[i] = temp[i] % mod;
     914:	0346                	slli	t1,t1,0x11
     916:	0002090b          	0x2090b
            ti[i] = ti_2[i] - temp[i];
     91a:	0501                	addi	a0,a0,0
     91c:	0305                	addi	t1,t1,1
     91e:	0902                	c.slli64	s2
     920:	0000                	unimp
     922:	0501                	addi	a0,a0,0
     924:	0646                	slli	a2,a2,0x11
     926:	00097e03          	0x97e03
     92a:	0100                	addi	s0,sp,128
     92c:	1d05                	addi	s10,s10,-31
     92e:	02090203          	lb	tp,32(s2)
     932:	0100                	addi	s0,sp,128
     934:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     936:	04097e03          	0x4097e03
                ti[i] = ti[i] + mod;
     93a:	0100                	addi	s0,sp,128
     93c:	0905                	addi	s2,s2,1
            while (ti[i] < 0) {
     93e:	0a090203          	lb	tp,160(s2)
     942:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     944:	4605                	li	a2,1
     946:	0c097e03          	0xc097e03
        for (i = 0; i < N + 1; ++i) {
     94a:	0100                	addi	s0,sp,128
            ti[i] = ti[i] % mod;
     94c:	0905                	addi	s2,s2,1
     94e:	12090203          	lb	tp,288(s2)
              qi_1[i] = 0;
     952:	0100                	addi	s0,sp,128
     954:	4605                	li	a2,1
     956:	02097e03          	0x2097e03
            controlR += ri[i];
     95a:	0100                	addi	s0,sp,128
     95c:	0905                	addi	s2,s2,1
              qi_1[i] = 0;
     95e:	04090203          	lb	tp,64(s2)
        for (i = 0; i < N + 1; ++i) {
     962:	0100                	addi	s0,sp,128
            controlR += ri[i];
     964:	4605                	li	a2,1
        for (i = 0; i < N + 1; ++i) {
     966:	02097e03          	0x2097e03
            if (((ri_2[0] * j) % mod) == 1)
     96a:	0100                	addi	s0,sp,128
     96c:	0905                	addi	s2,s2,1
     96e:	00090203          	lb	tp,0(s2)
     972:	0100                	addi	s0,sp,128
     974:	04090303          	lb	t1,64(s2)
        for (j = 0; j < mod; ++j) {
     978:	0100                	addi	s0,sp,128
     97a:	08097d03          	0x8097d03
        for (i = 0; i < N + 1; ++i) {
     97e:	0100                	addi	s0,sp,128
     980:	02090303          	lb	t1,32(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     984:	0100                	addi	s0,sp,128
     986:	04090103          	lb	sp,64(s2)
     98a:	0100                	addi	s0,sp,128
     98c:	06097f03          	0x6097f03
int* generate_keys(int N, int p, int q){
     990:	0100                	addi	s0,sp,128
     992:	02090103          	lb	sp,32(s2)
     996:	0100                	addi	s0,sp,128
     998:	4605                	li	a2,1
     99a:	04097a03          	0x4097a03
     99e:	0100                	addi	s0,sp,128
     9a0:	0905                	addi	s2,s2,1
     9a2:	04090203          	lb	tp,64(s2)
     9a6:	0100                	addi	s0,sp,128
     9a8:	0505                	addi	a0,a0,1
     9aa:	0306                	slli	t1,t1,0x1
     9ac:	0901                	addi	s2,s2,0
     9ae:	0004                	0x4
     9b0:	0301                	addi	t1,t1,0
     9b2:	0901                	addi	s2,s2,0
     9b4:	0000                	unimp
     9b6:	0301                	addi	t1,t1,0
     9b8:	0901                	addi	s2,s2,0
     9ba:	0000                	unimp
     9bc:	0501                	addi	a0,a0,0
     9be:	0646                	slli	a2,a2,0x11
     9c0:	00097b03          	0x97b03
     9c4:	0100                	addi	s0,sp,128
     9c6:	0905                	addi	s2,s2,1
     9c8:	02090503          	lb	a0,32(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9cc:	0100                	addi	s0,sp,128
     9ce:	0505                	addi	a0,a0,1
     9d0:	0306                	slli	t1,t1,0x1
     9d2:	0901                	addi	s2,s2,0
     9d4:	0004                	0x4
     9d6:	0501                	addi	a0,a0,0
     9d8:	0609                	addi	a2,a2,2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9da:	00090003          	lb	zero,0(s2)
     9de:	0100                	addi	s0,sp,128
     9e0:	0505                	addi	a0,a0,1
     9e2:	0306                	slli	t1,t1,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     9e4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     9e8:	0501                	addi	a0,a0,0
     9ea:	060c                	addi	a1,sp,768
     9ec:	04090003          	lb	zero,64(s2)
     9f0:	0100                	addi	s0,sp,128
     9f2:	1905                	addi	s2,s2,-31
     9f4:	02090303          	lb	t1,32(s2)
     9f8:	0100                	addi	s0,sp,128
     9fa:	1105                	addi	sp,sp,-31
     9fc:	0200                	addi	s0,sp,256
     9fe:	0104                	addi	s1,sp,128
     a00:	0306                	slli	t1,t1,0x1
     a02:	097d                	addi	s2,s2,31
     a04:	0008                	0x8
     a06:	0501                	addi	a0,a0,0
     a08:	0005                	c.nop	1
     a0a:	0402                	c.slli64	s0
     a0c:	0601                	addi	a2,a2,0
     a0e:	00090003          	lb	zero,0(s2)
     a12:	0100                	addi	s0,sp,128
     a14:	04090b03          	lb	s6,64(s2)
     a18:	0100                	addi	s0,sp,128
     a1a:	0306                	slli	t1,t1,0x1
     a1c:	0900                	addi	s0,sp,144
     a1e:	000a                	c.slli	zero,0x2
     a20:	0301                	addi	t1,t1,0
     a22:	0906                	slli	s2,s2,0x1
     a24:	0002                	c.slli64	zero
     a26:	0301                	addi	t1,t1,0
     a28:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     a2c:	0501                	addi	a0,a0,0
     a2e:	00030607          	0x30607
     a32:	0009                	c.nop	2
     a34:	0100                	addi	s0,sp,128
     a36:	1d05                	addi	s10,s10,-31
     a38:	0200                	addi	s0,sp,256
     a3a:	0104                	addi	s1,sp,128
     a3c:	0306                	slli	t1,t1,0x1
     a3e:	0908                	addi	a0,sp,144
     a40:	0012                	c.slli	zero,0x4
     a42:	0501                	addi	a0,a0,0
     a44:	0009                	c.nop	2
     a46:	0402                	c.slli64	s0
     a48:	0601                	addi	a2,a2,0
     a4a:	00090003          	lb	zero,0(s2)
     a4e:	0100                	addi	s0,sp,128
    int polyR[N+1];
     a50:	1405                	addi	s0,s0,-31
     a52:	04090103          	lb	sp,64(s2)
     a56:	0100                	addi	s0,sp,128
     a58:	0d05                	addi	s10,s10,1
     a5a:	0200                	addi	s0,sp,256
     a5c:	0304                	addi	s1,sp,384
     a5e:	0306                	slli	t1,t1,0x1
     a60:	0965                	addi	s2,s2,25
     a62:	0004                	0x4
    polyR[N] = 1;
     a64:	0501                	addi	a0,a0,0
     a66:	0019                	c.nop	6
     a68:	0402                	c.slli64	s0
     a6a:	01030603          	lb	a2,16(t1)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a6e:	0009                	c.nop	2
     a70:	0100                	addi	s0,sp,128
     a72:	1805                	addi	a6,a6,-31
     a74:	0200                	addi	s0,sp,256
     a76:	0304                	addi	s1,sp,384
     a78:	06097f03          	0x6097f03
     a7c:	0100                	addi	s0,sp,128
     a7e:	0d05                	addi	s10,s10,1
     a80:	0200                	addi	s0,sp,256
     a82:	0304                	addi	s1,sp,384
     a84:	0306                	slli	t1,t1,0x1
     a86:	0901                	addi	s2,s2,0
     a88:	0004                	0x4
     a8a:	0501                	addi	a0,a0,0
     a8c:	0019                	c.nop	6
     a8e:	0402                	c.slli64	s0
     a90:	00030603          	lb	a2,0(t1)
     a94:	0009                	c.nop	2
     a96:	0100                	addi	s0,sp,128
     a98:	2c05                	jal	cc8 <ntru_encyrpt+0x44>
     a9a:	0200                	addi	s0,sp,256
     a9c:	0304                	addi	s1,sp,384
     a9e:	0306                	slli	t1,t1,0x1
     aa0:	097e                	slli	s2,s2,0x1f
     aa2:	0004                	0x4
     aa4:	0501                	addi	a0,a0,0
     aa6:	0014                	0x14
     aa8:	0402                	c.slli64	s0
     aaa:	0301                	addi	t1,t1,0
     aac:	0900                	addi	s0,sp,144
     aae:	0004                	0x4
     ab0:	0501                	addi	a0,a0,0
     ab2:	0009                	c.nop	2
     ab4:	0402                	c.slli64	s0
     ab6:	0601                	addi	a2,a2,0
     ab8:	00090003          	lb	zero,0(s2)
     abc:	0100                	addi	s0,sp,128
     abe:	1d05                	addi	s10,s10,-31
     ac0:	0200                	addi	s0,sp,256
     ac2:	0204                	addi	s1,sp,256
     ac4:	0306                	slli	t1,t1,0x1
     ac6:	097f                	0x97f
     ac8:	0004                	0x4
     aca:	0501                	addi	a0,a0,0
     acc:	0103060f          	0x103060f
     ad0:	0809                	addi	a6,a6,2
    polyR[0] = -1;
     ad2:	0100                	addi	s0,sp,128
     ad4:	1105                	addi	sp,sp,-31
    for(i = 1; i < N; ++i){
     ad6:	0200                	addi	s0,sp,256
     ad8:	0304                	addi	s1,sp,384
     ada:	0306                	slli	t1,t1,0x1
     adc:	0916                	slli	s2,s2,0x5
    for (i = N; i < 55; ++i ){
     ade:	0004                	0x4
     ae0:	0501                	addi	a0,a0,0
     ae2:	0025                	c.nop	9
     ae4:	0402                	c.slli64	s0
    for(i = 0; i < N; ++i){
     ae6:	00030603          	lb	a2,0(t1)
        random_keys[i] = f[i];
     aea:	0409                	addi	s0,s0,2
     aec:	0100                	addi	s0,sp,128
     aee:	2b05                	jal	101e <main+0x40>
    for(i = 0; i < N; ++i){
     af0:	0200                	addi	s0,sp,256
     af2:	0304                	addi	s1,sp,384
     af4:	04090003          	lb	zero,64(s2)
    for(i = N; i < (2*N); ++i){
     af8:	0100                	addi	s0,sp,128
     afa:	2e05                	jal	e2a <reset_handler+0x44>
     afc:	0200                	addi	s0,sp,256
     afe:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     b00:	02090003          	lb	zero,32(s2)
     b04:	0100                	addi	s0,sp,128
     b06:	2a05                	jal	c36 <generate_keys+0x2a6>
    for(i = N; i < (2*N); ++i){
     b08:	0200                	addi	s0,sp,256
     b0a:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     b0c:	06097f03          	0x6097f03
     b10:	0100                	addi	s0,sp,128
    fp = ext_euclid(polyR, f, (N+1), p);
     b12:	2e05                	jal	e42 <zero_loop>
     b14:	0200                	addi	s0,sp,256
     b16:	0304                	addi	s1,sp,384
     b18:	02090103          	lb	sp,32(s2)
     b1c:	0100                	addi	s0,sp,128
    for(i = (2*N); i < (3*N); ++i){
     b1e:	2505                	jal	113e <_endtext+0x16>
        random_keys[i] = fp[i-(2*N)];
     b20:	0200                	addi	s0,sp,256
     b22:	0304                	addi	s1,sp,384
     b24:	04090003          	lb	zero,64(s2)
    for(i = (2*N); i < (3*N); ++i){
     b28:	0100                	addi	s0,sp,128
     b2a:	2805                	jal	b5a <generate_keys+0x1ca>
    fq = ext_euclid(polyR, f, (N+1), q);
     b2c:	0200                	addi	s0,sp,256
     b2e:	0304                	addi	s1,sp,384
     b30:	0306                	slli	t1,t1,0x1
     b32:	097f                	0x97f
     b34:	0002                	c.slli64	zero
     b36:	0501                	addi	a0,a0,0
    for(i = (3*N); i < (4*N); ++i){
     b38:	0020                	addi	s0,sp,8
     b3a:	0402                	c.slli64	s0
     b3c:	0301                	addi	t1,t1,0
     b3e:	0900                	addi	s0,sp,144
        random_keys[i] = fq[i-(3*N)];
     b40:	0000                	unimp
     b42:	0501                	addi	a0,a0,0
     b44:	000d                	c.nop	3
     b46:	0402                	c.slli64	s0
    for(i = (3*N); i < (4*N); ++i){
     b48:	0601                	addi	a2,a2,0
     b4a:	00090003          	lb	zero,0(s2)
    fg = polymult2(fq, N, g, N, 0);
     b4e:	0100                	addi	s0,sp,128
     b50:	2505                	jal	1170 <_endtext+0x48>
     b52:	0200                	addi	s0,sp,256
     b54:	0204                	addi	s1,sp,256
     b56:	0306                	slli	t1,t1,0x1
    for(i = 0; i < (2*N-1); ++i){
     b58:	097f                	0x97f
     b5a:	0004                	0x4
     b5c:	0501                	addi	a0,a0,0
     b5e:	04020027          	0x4020027
     b62:	0602                	c.slli64	a2
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b64:	00090003          	lb	zero,0(s2)
     b68:	0100                	addi	s0,sp,128
     b6a:	1d05                	addi	s10,s10,-31
    for(i = (4*N); i < (5*N); ++i){
     b6c:	0200                	addi	s0,sp,256
     b6e:	0104                	addi	s1,sp,128
     b70:	0306                	slli	t1,t1,0x1
     b72:	0900                	addi	s0,sp,144
     b74:	0006                	c.slli	zero,0x1
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b76:	0501                	addi	a0,a0,0
     b78:	0009                	c.nop	2
     b7a:	0402                	c.slli64	s0
     b7c:	0601                	addi	a2,a2,0
    for(i = (4*N); i < (5*N); ++i){
     b7e:	00090003          	lb	zero,0(s2)
     b82:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     b84:	0e05                	addi	t3,t3,1
     b86:	04091003          	lh	zero,64(s2)
        random_keys[i] = polyR[i-(5*N)];
     b8a:	0100                	addi	s0,sp,128
     b8c:	0d05                	addi	s10,s10,1
     b8e:	0200                	addi	s0,sp,256
    for(i = (5*N); i < (6*N+1); ++i){
     b90:	0104                	addi	s1,sp,128
     b92:	0306                	slli	t1,t1,0x1
     b94:	097f                	0x97f
     b96:	0002                	c.slli64	zero
     b98:	0501                	addi	a0,a0,0
     b9a:	0005                	c.nop	1
}
     b9c:	0402                	c.slli64	s0
     b9e:	0601                	addi	a2,a2,0
     ba0:	00090003          	lb	zero,0(s2)
     ba4:	0100                	addi	s0,sp,128
     ba6:	0c090003          	lb	zero,192(s2)
     baa:	0100                	addi	s0,sp,128
     bac:	0e05                	addi	t3,t3,1
     bae:	02090103          	lb	sp,32(s2)
     bb2:	0100                	addi	s0,sp,128
     bb4:	1405                	addi	s0,s0,-31
     bb6:	04097103          	0x4097103
     bba:	0100                	addi	s0,sp,128
     bbc:	1105                	addi	sp,sp,-31
     bbe:	0200                	addi	s0,sp,256
     bc0:	0304                	addi	s1,sp,384
     bc2:	0306                	slli	t1,t1,0x1
     bc4:	0908                	addi	a0,sp,144
     bc6:	0004                	0x4
     bc8:	0501                	addi	a0,a0,0
     bca:	0029                	c.nop	10
     bcc:	0402                	c.slli64	s0
     bce:	00030603          	lb	a2,0(t1)
     bd2:	0409                	addi	s0,s0,2
     bd4:	0100                	addi	s0,sp,128
     bd6:	2f05                	jal	1306 <_bss_start+0x5a>
     bd8:	0200                	addi	s0,sp,256
     bda:	0304                	addi	s1,sp,384
        polyR[i] = 0;
     bdc:	04090003          	lb	zero,64(s2)
     be0:	0100                	addi	s0,sp,128
     be2:	3205                	jal	502 <polydiv+0x5e>
     be4:	0200                	addi	s0,sp,256
    for(i = 1; i < N; ++i){
     be6:	0304                	addi	s1,sp,384
     be8:	02090003          	lb	zero,32(s2)
        f[i] = 0;
     bec:	0100                	addi	s0,sp,128
     bee:	2a05                	jal	d1e <ntru_deceypt+0x4>
     bf0:	0200                	addi	s0,sp,256
     bf2:	0304                	addi	s1,sp,384
     bf4:	06097f03          	0x6097f03
        g[i] = 0;
     bf8:	0100                	addi	s0,sp,128
     bfa:	3205                	jal	51a <polydiv+0x76>
     bfc:	0200                	addi	s0,sp,256
     bfe:	0304                	addi	s1,sp,384
     c00:	02090103          	lb	sp,32(s2)
    for (i = N; i < 55; ++i ){
     c04:	0100                	addi	s0,sp,128
        random_keys[i] = f[i];
     c06:	2905                	jal	1036 <main+0x58>
     c08:	0200                	addi	s0,sp,256
     c0a:	0304                	addi	s1,sp,384
     c0c:	04090003          	lb	zero,64(s2)
     c10:	0100                	addi	s0,sp,128
     c12:	2805                	jal	c42 <generate_keys+0x2b2>
     c14:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     c16:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     c18:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     c1a:	097f                	0x97f
        random_keys[i] = g[i-N];
     c1c:	0002                	c.slli64	zero
     c1e:	0501                	addi	a0,a0,0
     c20:	0020                	addi	s0,sp,8
     c22:	0402                	c.slli64	s0
     c24:	0301                	addi	t1,t1,0
    for(i = N; i < (2*N); ++i){
     c26:	0900                	addi	s0,sp,144
     c28:	0000                	unimp
     c2a:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     c2c:	000d                	c.nop	3
     c2e:	0402                	c.slli64	s0
     c30:	0601                	addi	a2,a2,0
     c32:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     c36:	0100                	addi	s0,sp,128
     c38:	2505                	jal	1258 <_endtext+0x130>
     c3a:	0200                	addi	s0,sp,256
        random_keys[i] = fq[i-(3*N)];
     c3c:	0204                	addi	s1,sp,256
     c3e:	0306                	slli	t1,t1,0x1
     c40:	097f                	0x97f
     c42:	0004                	0x4
     c44:	0501                	addi	a0,a0,0
     c46:	04020027          	0x4020027
    for(i = (3*N); i < (4*N); ++i){
     c4a:	0602                	c.slli64	a2
        random_keys[i] = fq[i-(3*N)];
     c4c:	00090003          	lb	zero,0(s2)
        fg[i] = fg[i]*p;
     c50:	0100                	addi	s0,sp,128
    for(i = 0; i < (2*N-1); ++i){
     c52:	0d05                	addi	s10,s10,1
     c54:	0200                	addi	s0,sp,256
        fg[i] = fg[i]*p;
     c56:	0304                	addi	s1,sp,384
     c58:	0306                	slli	t1,t1,0x1
     c5a:	090a                	slli	s2,s2,0x2
     c5c:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     c5e:	0501                	addi	a0,a0,0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c60:	0019                	c.nop	6
     c62:	0402                	c.slli64	s0
     c64:	00030603          	lb	a2,0(t1)
     c68:	0009                	c.nop	2
     c6a:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     c6c:	2305                	jal	118c <_endtext+0x64>
     c6e:	0200                	addi	s0,sp,256
        random_keys[i] = polyR[i-(5*N)];
     c70:	0304                	addi	s1,sp,384
     c72:	04097f03          	0x4097f03
     c76:	0100                	addi	s0,sp,128
     c78:	1905                	addi	s2,s2,-31
     c7a:	0200                	addi	s0,sp,256
     c7c:	0304                	addi	s1,sp,384
    for(i = (5*N); i < (6*N+1); ++i){
     c7e:	04090103          	lb	sp,64(s2)
     c82:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c84:	2305                	jal	11a4 <_endtext+0x7c>
     c86:	0200                	addi	s0,sp,256
     c88:	0304                	addi	s1,sp,384
     c8a:	0306                	slli	t1,t1,0x1
     c8c:	097f                	0x97f
     c8e:	0006                	c.slli	zero,0x1
     c90:	0501                	addi	a0,a0,0
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c92:	0011                	c.nop	4
     c94:	0402                	c.slli64	s0
     c96:	0301                	addi	t1,t1,0
     c98:	0900                	addi	s0,sp,144
     c9a:	0002                	c.slli64	zero
     c9c:	0501                	addi	a0,a0,0
     c9e:	0009                	c.nop	2
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     ca0:	0402                	c.slli64	s0
     ca2:	0601                	addi	a2,a2,0
     ca4:	00090003          	lb	zero,0(s2)
     ca8:	0100                	addi	s0,sp,128
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     caa:	1605                	addi	a2,a2,-31
    temp = polymult(public_key,N,random_val,48,q,0);
     cac:	0200                	addi	s0,sp,256
     cae:	0204                	addi	s1,sp,256
     cb0:	0306                	slli	t1,t1,0x1
     cb2:	097f                	0x97f
     cb4:	0004                	0x4
     cb6:	0501                	addi	a0,a0,0
     cb8:	0305                	addi	t1,t1,1
     cba:	00060907          	0x60907
     cbe:	0301                	addi	t1,t1,0
    for(i = 0; i < 48; ++i){
     cc0:	0902                	c.slli64	s2
     cc2:	0000                	unimp
        temp[i] = temp[i] + message[i];
     cc4:	0501                	addi	a0,a0,0
     cc6:	0601                	addi	a2,a2,0
     cc8:	00090103          	lb	sp,0(s2)
     ccc:	0100                	addi	s0,sp,128
     cce:	4305                	li	t1,1
     cd0:	0306                	slli	t1,t1,0x1
     cd2:	0902                	c.slli64	s2
     cd4:	002a                	c.slli	zero,0xa
    for(i = 0; i < 48; ++i){
     cd6:	0501                	addi	a0,a0,0
     cd8:	0305                	addi	t1,t1,1
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     cda:	0902                	c.slli64	s2
     cdc:	0000                	unimp
     cde:	0301                	addi	t1,t1,0
     ce0:	0901                	addi	s2,s2,0
     ce2:	0000                	unimp
     ce4:	0301                	addi	t1,t1,0
     ce6:	0902                	c.slli64	s2
     ce8:	0000                	unimp
     cea:	0501                	addi	a0,a0,0
    for(i = (2*N); i < (3*N); ++i){
     cec:	0609                	addi	a2,a2,2
     cee:	00090003          	lb	zero,0(s2)
     cf2:	0100                	addi	s0,sp,128
     cf4:	4305                	li	t1,1
     cf6:	04097b03          	0x4097b03
}
     cfa:	0100                	addi	s0,sp,128
     cfc:	0905                	addi	s2,s2,1
     cfe:	02090503          	lb	a0,32(s2)
     d02:	0100                	addi	s0,sp,128
     d04:	4305                	li	t1,1
     d06:	02097b03          	0x2097b03
        CT[i-(2*N)] = CT[i];
     d0a:	0100                	addi	s0,sp,128
     d0c:	0905                	addi	s2,s2,1
     d0e:	18090503          	lb	a0,384(s2)
    for(i = (2*N); i < (3*N); ++i){
     d12:	0100                	addi	s0,sp,128
        CT[i-(2*N)] = CT[i];
     d14:	4305                	li	t1,1
     d16:	02097b03          	0x2097b03
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d1a:	0100                	addi	s0,sp,128
     d1c:	0905                	addi	s2,s2,1
     d1e:	04090503          	lb	a0,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	0100                	addi	s0,sp,128
     d24:	06090103          	lb	sp,96(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d28:	0100                	addi	s0,sp,128
     d2a:	06090203          	lb	tp,96(s2)
     d2e:	0100                	addi	s0,sp,128
     d30:	04090103          	lb	sp,64(s2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d34:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d36:	06097f03          	0x6097f03
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d3a:	0100                	addi	s0,sp,128
     d3c:	02090103          	lb	sp,32(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     d40:	0100                	addi	s0,sp,128
     d42:	4305                	li	t1,1
     d44:	06097703          	0x6097703
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d48:	0100                	addi	s0,sp,128
     d4a:	0905                	addi	s2,s2,1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     d4c:	04090503          	lb	a0,64(s2)
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     d50:	0100                	addi	s0,sp,128
     d52:	0505                	addi	a0,a0,1
     d54:	0306                	slli	t1,t1,0x1
     d56:	0901                	addi	s2,s2,0
     d58:	0004                	0x4
     d5a:	0301                	addi	t1,t1,0
     d5c:	0901                	addi	s2,s2,0
     d5e:	0000                	unimp
     d60:	0301                	addi	t1,t1,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d62:	0901                	addi	s2,s2,0
     d64:	0000                	unimp
     d66:	0301                	addi	t1,t1,0
     d68:	0901                	addi	s2,s2,0
     d6a:	0000                	unimp
        if(a2[i] <= q/2)
     d6c:	0501                	addi	a0,a0,0
     d6e:	0606                	slli	a2,a2,0x1
     d70:	00090503          	lb	a0,0(s2)
    for (i = 0; i < N; ++i){
     d74:	0100                	addi	s0,sp,128
     d76:	4305                	li	t1,1
    c = polymult2(secret_key_fp,N,a2,N,0);
     d78:	06097203          	0x6097203
     d7c:	0100                	addi	s0,sp,128
     d7e:	0905                	addi	s2,s2,1
     d80:	04090903          	lb	s2,64(s2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d84:	0100                	addi	s0,sp,128
     d86:	0605                	addi	a2,a2,1
     d88:	04090503          	lb	a0,64(s2)
     d8c:	0100                	addi	s0,sp,128
     d8e:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d90:	02097b03          	0x2097b03
     d94:	0100                	addi	s0,sp,128
}
     d96:	0605                	addi	a2,a2,1
     d98:	0306                	slli	t1,t1,0x1
     d9a:	0905                	addi	s2,s2,1
     d9c:	0002                	c.slli64	zero
     d9e:	0501                	addi	a0,a0,0
     da0:	0305                	addi	t1,t1,1
     da2:	0905                	addi	s2,s2,1
     da4:	0000                	unimp
     da6:	0501                	addi	a0,a0,0
     da8:	060c                	addi	a1,sp,768
     daa:	04090003          	lb	zero,64(s2)
        a2[i-(2*N)] = a2[i];
     dae:	0100                	addi	s0,sp,128
     db0:	1105                	addi	sp,sp,-31
     db2:	0200                	addi	s0,sp,256
    for(i = (2*N); i < ((2*N)+N); ++i){
     db4:	0104                	addi	s1,sp,128
     db6:	0306                	slli	t1,t1,0x1
        a2[i-(2*N)] = a2[i];
     db8:	0900                	addi	s0,sp,144
     dba:	0002                	c.slli64	zero
    for(i = (2*N); i < ((2*N)+N); ++i){
     dbc:	0501                	addi	a0,a0,0
        if(a2[i] <= q/2)
     dbe:	0005                	c.nop	1
     dc0:	0402                	c.slli64	s0
     dc2:	0601                	addi	a2,a2,0
            a2[i] = (-1)*(q-a2[i]);
     dc4:	00090003          	lb	zero,0(s2)
     dc8:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     dca:	0905                	addi	s2,s2,1
     dcc:	0306                	slli	t1,t1,0x1
     dce:	0909                	addi	s2,s2,2
        c2[i-(2*N)] = c2[i];
     dd0:	0004                	0x4
     dd2:	0501                	addi	a0,a0,0
     dd4:	0305                	addi	t1,t1,1
     dd6:	0904                	addi	s1,sp,144
    for(i = (2*N); i < ((2*N)+N); ++i){
     dd8:	0008                	0x8
     dda:	0501                	addi	a0,a0,0
        c2[i-(2*N)] = c2[i];
     ddc:	060c                	addi	a1,sp,768
     dde:	02090003          	lb	zero,32(s2)
  jal x0, default_exc_handler
     de2:	0100                	addi	s0,sp,128
     de4:	1105                	addi	sp,sp,-31
  mv  x1, x0
     de6:	0200                	addi	s0,sp,256
     de8:	0104                	addi	s1,sp,128
  mv  x2, x1
     dea:	0306                	slli	t1,t1,0x1
  mv  x3, x1
     dec:	0900                	addi	s0,sp,144
  mv  x4, x1
     dee:	0002                	c.slli64	zero
  mv  x5, x1
     df0:	0501                	addi	a0,a0,0
  mv  x6, x1
     df2:	0005                	c.nop	1
  mv  x7, x1
     df4:	0402                	c.slli64	s0
  mv  x8, x1
     df6:	0601                	addi	a2,a2,0
  mv  x9, x1
     df8:	00090003          	lb	zero,0(s2)
  mv x11, x1
     dfc:	0100                	addi	s0,sp,128
  mv x12, x1
     dfe:	0c05                	addi	s8,s8,1
  mv x13, x1
     e00:	04090803          	lb	a6,64(s2)
  mv x15, x1
     e04:	0100                	addi	s0,sp,128
  mv x16, x1
     e06:	1105                	addi	sp,sp,-31
  mv x17, x1
     e08:	0200                	addi	s0,sp,256
  mv x18, x1
     e0a:	0104                	addi	s1,sp,128
  mv x19, x1
     e0c:	0306                	slli	t1,t1,0x1
  mv x20, x1
     e0e:	0900                	addi	s0,sp,144
  mv x21, x1
     e10:	0002                	c.slli64	zero
  mv x22, x1
     e12:	0501                	addi	a0,a0,0
  mv x23, x1
     e14:	0005                	c.nop	1
  mv x24, x1
     e16:	0402                	c.slli64	s0
  mv x25, x1
     e18:	0601                	addi	a2,a2,0
  mv x26, x1
     e1a:	00090003          	lb	zero,0(s2)
  mv x28, x1
     e1e:	0100                	addi	s0,sp,128
  mv x29, x1
     e20:	1805                	addi	a6,a6,-31
  mv x30, x1
     e22:	0200                	addi	s0,sp,256
  mv x31, x1
     e24:	0104                	addi	s1,sp,128
  la   x2, _stack_start
     e26:	0306                	slli	t1,t1,0x1
     e28:	0906                	slli	s2,s2,0x1
     e2a:	0004                	0x4
     e2c:	0501                	addi	a0,a0,0
  la x26, _bss_start
     e2e:	0005                	c.nop	1
     e30:	0402                	c.slli64	s0
     e32:	0601                	addi	a2,a2,0
     e34:	08090003          	lb	zero,128(s2)
  la x27, _bss_end
     e38:	0100                	addi	s0,sp,128
     e3a:	0c05                	addi	s8,s8,1
     e3c:	0200                	addi	s0,sp,256
  bge x26, x27, zero_loop_end
     e3e:	0104                	addi	s1,sp,128
     e40:	04097a03          	0x4097a03
  sw x0, 0(x26)
     e44:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     e46:	0200                	addi	s0,sp,256
  ble x26, x27, zero_loop
     e48:	0104                	addi	s1,sp,128
     e4a:	04090f03          	lb	t5,64(s2)
  addi x10, x0, 0
     e4e:	0100                	addi	s0,sp,128
  addi x11, x0, 0
     e50:	1105                	addi	sp,sp,-31
     e52:	0200                	addi	s0,sp,256
  jal x1, main
     e54:	0104                	addi	s1,sp,128
     e56:	0306                	slli	t1,t1,0x1
     e58:	097f                	0x97f
     e5a:	0002                	c.slli64	zero
     e5c:	0501                	addi	a0,a0,0
     e5e:	0005                	c.nop	1
     e60:	0402                	c.slli64	s0
     e62:	0601                	addi	a2,a2,0
     e64:	00090003          	lb	zero,0(s2)
     e68:	0100                	addi	s0,sp,128
     e6a:	0d05                	addi	s10,s10,1
     e6c:	0306                	slli	t1,t1,0x1
     e6e:	095f 0008 0501      	0x5010008095f
     e74:	00030627          	0x30627
     e78:	0009                	c.nop	2
     e7a:	0100                	addi	s0,sp,128
     e7c:	1905                	addi	s2,s2,-31
     e7e:	02090003          	lb	zero,32(s2)
     e82:	0100                	addi	s0,sp,128
     e84:	0f05                	addi	t5,t5,1
     e86:	0306                	slli	t1,t1,0x1
     e88:	097f                	0x97f
     e8a:	0002                	c.slli64	zero
     e8c:	0501                	addi	a0,a0,0
     e8e:	0618                	addi	a4,sp,768
     e90:	00090003          	lb	zero,0(s2)
     e94:	0100                	addi	s0,sp,128
     e96:	0f05                	addi	t5,t5,1
     e98:	02090003          	lb	zero,32(s2)
     e9c:	0100                	addi	s0,sp,128
     e9e:	0905                	addi	s2,s2,1
     ea0:	0200                	addi	s0,sp,256
     ea2:	0204                	addi	s1,sp,256
     ea4:	0306                	slli	t1,t1,0x1
     ea6:	00040903          	lb	s2,0(s0)
     eaa:	0501                	addi	a0,a0,0
     eac:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
     eb0:	0602                	c.slli64	a2
     eb2:	00090003          	lb	zero,0(s2)
     eb6:	0100                	addi	s0,sp,128
     eb8:	1d05                	addi	s10,s10,-31
     eba:	0200                	addi	s0,sp,256
     ebc:	0204                	addi	s1,sp,256
     ebe:	04097c03          	0x4097c03
     ec2:	0100                	addi	s0,sp,128
     ec4:	1505                	addi	a0,a0,-31
     ec6:	0200                	addi	s0,sp,256
     ec8:	0204                	addi	s1,sp,256
     eca:	04090403          	lb	s0,64(s2)
     ece:	0100                	addi	s0,sp,128
     ed0:	1d05                	addi	s10,s10,-31
     ed2:	0200                	addi	s0,sp,256
     ed4:	0204                	addi	s1,sp,256
     ed6:	0306                	slli	t1,t1,0x1
     ed8:	097c                	addi	a5,sp,156
     eda:	0004                	0x4
     edc:	0501                	addi	a0,a0,0
     ede:	030d                	addi	t1,t1,3
     ee0:	0002090f          	0x2090f
     ee4:	0501                	addi	a0,a0,0
     ee6:	0003062b          	0x3062b
     eea:	0009                	c.nop	2
     eec:	0100                	addi	s0,sp,128
     eee:	1b05                	addi	s6,s6,-31
     ef0:	02090003          	lb	zero,32(s2)
     ef4:	0100                	addi	s0,sp,128
     ef6:	0f05                	addi	t5,t5,1
     ef8:	0306                	slli	t1,t1,0x1
     efa:	097f                	0x97f
     efc:	0002                	c.slli64	zero
     efe:	0501                	addi	a0,a0,0
     f00:	061a                	slli	a2,a2,0x6
     f02:	00090003          	lb	zero,0(s2)
     f06:	0100                	addi	s0,sp,128
     f08:	0f05                	addi	t5,t5,1
     f0a:	02090003          	lb	zero,32(s2)
     f0e:	0100                	addi	s0,sp,128
     f10:	0905                	addi	s2,s2,1
     f12:	0200                	addi	s0,sp,256
     f14:	0204                	addi	s1,sp,256
     f16:	0306                	slli	t1,t1,0x1
     f18:	00040903          	lb	s2,0(s0)
     f1c:	0501                	addi	a0,a0,0
     f1e:	04020027          	0x4020027
     f22:	0602                	c.slli64	a2
     f24:	00090003          	lb	zero,0(s2)
     f28:	0100                	addi	s0,sp,128
     f2a:	1d05                	addi	s10,s10,-31
     f2c:	0200                	addi	s0,sp,256
     f2e:	0204                	addi	s1,sp,256
     f30:	04097c03          	0x4097c03
     f34:	0100                	addi	s0,sp,128
     f36:	1705                	addi	a4,a4,-31
     f38:	0200                	addi	s0,sp,256
     f3a:	0204                	addi	s1,sp,256
     f3c:	04090403          	lb	s0,64(s2)
     f40:	0100                	addi	s0,sp,128
     f42:	1d05                	addi	s10,s10,-31
     f44:	0200                	addi	s0,sp,256
     f46:	0204                	addi	s1,sp,256
     f48:	0306                	slli	t1,t1,0x1
     f4a:	097c                	addi	a5,sp,156
     f4c:	0004                	0x4
     f4e:	0501                	addi	a0,a0,0
     f50:	0009                	c.nop	2
     f52:	0402                	c.slli64	s0
     f54:	09090303          	lb	t1,144(s2)
     f58:	0002                	c.slli64	zero
     f5a:	0501                	addi	a0,a0,0
     f5c:	000e                	c.slli	zero,0x3
     f5e:	0402                	c.slli64	s0
     f60:	00030603          	lb	a2,0(t1)
     f64:	0409                	addi	s0,s0,2
     f66:	0100                	addi	s0,sp,128
     f68:	0200                	addi	s0,sp,256
     f6a:	0304                	addi	s1,sp,384
     f6c:	04090103          	lb	sp,64(s2)
     f70:	0100                	addi	s0,sp,128
     f72:	0200                	addi	s0,sp,256
     f74:	0304                	addi	s1,sp,384
     f76:	02097f03          	0x2097f03
     f7a:	0100                	addi	s0,sp,128
     f7c:	0905                	addi	s2,s2,1
     f7e:	0200                	addi	s0,sp,256
     f80:	0304                	addi	s1,sp,384
     f82:	0306                	slli	t1,t1,0x1
     f84:	0901                	addi	s2,s2,0
     f86:	0004                	0x4
     f88:	0501                	addi	a0,a0,0
     f8a:	000e                	c.slli	zero,0x3
     f8c:	0402                	c.slli64	s0
     f8e:	00030603          	lb	a2,0(t1)
     f92:	0009                	c.nop	2
     f94:	0100                	addi	s0,sp,128
     f96:	1d05                	addi	s10,s10,-31
     f98:	0200                	addi	s0,sp,256
     f9a:	0304                	addi	s1,sp,384
     f9c:	0306                	slli	t1,t1,0x1
     f9e:	097e                	slli	s2,s2,0x1f
     fa0:	0004                	0x4
     fa2:	0501                	addi	a0,a0,0
     fa4:	0309                	addi	t1,t1,2
     fa6:	00040907          	0x40907
     faa:	0501                	addi	a0,a0,0
     fac:	0003060b          	0x3060b
     fb0:	0009                	c.nop	2
     fb2:	0100                	addi	s0,sp,128
     fb4:	2005                	jal	fd4 <memset+0x9e>
     fb6:	0200                	addi	s0,sp,256
     fb8:	0204                	addi	s1,sp,256
     fba:	0306                	slli	t1,t1,0x1
     fbc:	097f                	0x97f
     fbe:	0002                	c.slli64	zero
     fc0:	0501                	addi	a0,a0,0
     fc2:	0022                	c.slli	zero,0x8
     fc4:	0402                	c.slli64	s0
     fc6:	0602                	c.slli64	a2
     fc8:	00090003          	lb	zero,0(s2)
     fcc:	0100                	addi	s0,sp,128
     fce:	0905                	addi	s2,s2,1
     fd0:	0306                	slli	t1,t1,0x1
     fd2:	0909                	addi	s2,s2,2
     fd4:	0004                	0x4
     fd6:	0501                	addi	a0,a0,0
     fd8:	0615                	addi	a2,a2,5
     fda:	00090003          	lb	zero,0(s2)
int main(){
     fde:	0100                	addi	s0,sp,128
     fe0:	0c05                	addi	s8,s8,1
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     fe2:	06090003          	lb	zero,96(s2)
     fe6:	0100                	addi	s0,sp,128
     fe8:	1a05                	addi	s4,s4,-31
     fea:	0200                	addi	s0,sp,256
     fec:	0204                	addi	s1,sp,256
     fee:	0306                	slli	t1,t1,0x1
int main(){
     ff0:	097f                	0x97f
     ff2:	0004                	0x4
     ff4:	0501                	addi	a0,a0,0
     ff6:	0309                	addi	t1,t1,2
     ff8:	00040907          	0x40907
     ffc:	0501                	addi	a0,a0,0
     ffe:	0003060b          	0x3060b
    resultkon[0] = 0xaaaaaaa0;
    1002:	0009                	c.nop	2
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
    1004:	0100                	addi	s0,sp,128
    resultkon[0] = 0xaaaaaaa0;
    1006:	2005                	jal	1026 <main+0x48>
    1008:	0200                	addi	s0,sp,256
    100a:	0204                	addi	s1,sp,256
    100c:	0306                	slli	t1,t1,0x1
    100e:	097f                	0x97f
    1010:	0002                	c.slli64	zero
    keys = generate_keys(N, p, q);
    1012:	0501                	addi	a0,a0,0
    1014:	0022                	c.slli	zero,0x8
    1016:	0402                	c.slli64	s0
    1018:	0602                	c.slli64	a2
    101a:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xaaaaaaa1;
    101e:	0100                	addi	s0,sp,128
    1020:	1805                	addi	a6,a6,-31
    keys = generate_keys(N, p, q);
    1022:	0200                	addi	s0,sp,256
    resultkon[0] = 0xaaaaaaa1;
    1024:	0104                	addi	s1,sp,128
    1026:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
    1028:	0900                	addi	s0,sp,144
    102a:	0002                	c.slli64	zero
        secret_key_f[i] = keys[i];
    102c:	0501                	addi	a0,a0,0
    102e:	0005                	c.nop	1
    1030:	0402                	c.slli64	s0
    1032:	0601                	addi	a2,a2,0
    1034:	08090003          	lb	zero,128(s2)
    for(i = 0; i < N; ++i){
    1038:	0100                	addi	s0,sp,128
    103a:	0b05                	addi	s6,s6,1
    103c:	0306                	slli	t1,t1,0x1
    for(i = N; i < (2*N); ++i){
    103e:	090c                	addi	a1,sp,144
    1040:	0004                	0x4
    1042:	0501                	addi	a0,a0,0
    1044:	0305                	addi	t1,t1,1
    1046:	00c2                	slli	ra,ra,0x10
    1048:	0409                	addi	s0,s0,2
        secret_key_fp[i-(2*N)] = keys[i];
    104a:	0100                	addi	s0,sp,128
    104c:	0e090403          	lb	s0,224(s2)
    1050:	0100                	addi	s0,sp,128
    1052:	1b05                	addi	s6,s6,-31
    for(i = (2*N); i < (3*N); ++i){
    1054:	0306                	slli	t1,t1,0x1
    1056:	0900                	addi	s0,sp,144
    for(i = (3*N); i < (4*N); ++i){
    1058:	0000                	unimp
    105a:	0501                	addi	a0,a0,0
    105c:	09010313          	addi	t1,sp,144
    1060:	0004                	0x4
    1062:	0501                	addi	a0,a0,0
        public_key[i-(4*N)] = keys[i];
    1064:	0015                	c.nop	5
    1066:	0402                	c.slli64	s0
    1068:	0601                	addi	a2,a2,0
    106a:	08097f03          	0x8097f03
    for(i = (4*N); i < (5*N); ++i){
    106e:	0100                	addi	s0,sp,128
    1070:	0505                	addi	a0,a0,1
    1072:	0200                	addi	s0,sp,256
    1074:	0104                	addi	s1,sp,128
    1076:	0306                	slli	t1,t1,0x1
    1078:	0900                	addi	s0,sp,144
        ring_poly[i-(5*N)] = keys[i];
    107a:	0000                	unimp
    107c:	0601                	addi	a2,a2,0
    107e:	04090403          	lb	s0,64(s2)
    1082:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
    1084:	00090203          	lb	tp,0(s2)
    resultkon[0] = 0xbbbbbbb0;
    1088:	0100                	addi	s0,sp,128
    108a:	0105                	addi	sp,sp,1
    108c:	0306                	slli	t1,t1,0x1
    108e:	0901                	addi	s2,s2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1090:	0000                	unimp
    1092:	0501                	addi	a0,a0,0
    1094:	0609                	addi	a2,a2,2
    1096:	097fb603          	0x97fb603
    resultkon[0] = 0xbbbbbbb1;
    109a:	002a                	c.slli	zero,0xa
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    109c:	0501                	addi	a0,a0,0
    109e:	0616                	slli	a2,a2,0x5
    resultkon[0] = 0xbbbbbbb0;
    10a0:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xbbbbbbb1;
    10a4:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc0;
    10a6:	0d05                	addi	s10,s10,1
    10a8:	04090003          	lb	zero,64(s2)
    10ac:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    10ae:	1305                	addi	t1,t1,-31
    resultkon[0] = 0xccccccc0;
    10b0:	04090003          	lb	zero,64(s2)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    10b4:	0100                	addi	s0,sp,128
    10b6:	0905                	addi	s2,s2,1
    10b8:	0306                	slli	t1,t1,0x1
    10ba:	0902                	c.slli64	s2
    10bc:	0006                	c.slli	zero,0x1
    10be:	0501                	addi	a0,a0,0
    10c0:	0610                	addi	a2,sp,768
    10c2:	02090003          	lb	zero,32(s2)
    resultkon[0] = 0xccccccc1;	
    10c6:	0100                	addi	s0,sp,128
    10c8:	1505                	addi	a0,a0,-31
            resultkon[0] = 0xDEDEDEDE;
    10ca:	0200                	addi	s0,sp,256
    10cc:	0104                	addi	s1,sp,128
    resultkon[0] = 0xccccccc1;	
    10ce:	0306                	slli	t1,t1,0x1
    10d0:	0900                	addi	s0,sp,144
            resultkon[0] = 0xDEDEDEDE;
    10d2:	0002                	c.slli64	zero
    10d4:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
    10d6:	0009                	c.nop	2
    10d8:	0402                	c.slli64	s0
        if(!(message[i] == Dec_Message[i])){
    10da:	0601                	addi	a2,a2,0
    10dc:	00090003          	lb	zero,0(s2)
    10e0:	0100                	addi	s0,sp,128
    10e2:	0306                	slli	t1,t1,0x1
    10e4:	0906                	slli	s2,s2,0x1
    10e6:	0004                	0x4
    10e8:	0501                	addi	a0,a0,0
            resultkon[0] = 0xBABABABA;
    10ea:	00030613          	mv	a2,t1
    10ee:	0009                	c.nop	2
    10f0:	0100                	addi	s0,sp,128
    10f2:	0905                	addi	s2,s2,1
}
    10f4:	0306                	slli	t1,t1,0x1
    10f6:	000e0903          	lb	s2,0(t3)
    10fa:	0501                	addi	a0,a0,0
    10fc:	0610                	addi	a2,sp,768
    10fe:	02090003          	lb	zero,32(s2)
    1102:	0100                	addi	s0,sp,128
    1104:	1505                	addi	a0,a0,-31
    1106:	0200                	addi	s0,sp,256
    1108:	0104                	addi	s1,sp,128
    110a:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xDEDEDEDE;
    110c:	0900                	addi	s0,sp,144
    for(i = 0; i < 32; ++i){
    110e:	0002                	c.slli64	zero
    1110:	0501                	addi	a0,a0,0
    1112:	0009                	c.nop	2
    1114:	0402                	c.slli64	s0
    1116:	0601                	addi	a2,a2,0
    1118:	00090003          	lb	zero,0(s2)
    111c:	0100                	addi	s0,sp,128
    111e:	1005                	c.nop	-31
    1120:	06090903          	lb	s2,96(s2)
    1124:	0100                	addi	s0,sp,128
    1126:	1505                	addi	a0,a0,-31
    1128:	0200                	addi	s0,sp,256
    112a:	0104                	addi	s1,sp,128
    112c:	0306                	slli	t1,t1,0x1
    112e:	0900                	addi	s0,sp,144
    1130:	0002                	c.slli64	zero
    1132:	0501                	addi	a0,a0,0
    1134:	0009                	c.nop	2
    1136:	0402                	c.slli64	s0
    1138:	0601                	addi	a2,a2,0
    113a:	00090003          	lb	zero,0(s2)
    113e:	0100                	addi	s0,sp,128
    1140:	1005                	c.nop	-31
    1142:	06090603          	lb	a2,96(s2)
    1146:	0100                	addi	s0,sp,128
    1148:	1505                	addi	a0,a0,-31
    114a:	0200                	addi	s0,sp,256
    114c:	0104                	addi	s1,sp,128
    114e:	0306                	slli	t1,t1,0x1
    1150:	0900                	addi	s0,sp,144
    1152:	0002                	c.slli64	zero
    1154:	0501                	addi	a0,a0,0
    1156:	0009                	c.nop	2
    1158:	0402                	c.slli64	s0
    115a:	0601                	addi	a2,a2,0
    115c:	00090003          	lb	zero,0(s2)
    1160:	0100                	addi	s0,sp,128
    1162:	0f05                	addi	t5,t5,1
    1164:	06090903          	lb	s2,96(s2)
    1168:	0100                	addi	s0,sp,128
    116a:	1405                	addi	s0,s0,-31
    116c:	0200                	addi	s0,sp,256
    116e:	0104                	addi	s1,sp,128
    1170:	0306                	slli	t1,t1,0x1
    1172:	0900                	addi	s0,sp,144
    1174:	0002                	c.slli64	zero
    1176:	0501                	addi	a0,a0,0
    1178:	0009                	c.nop	2
    117a:	0402                	c.slli64	s0
    117c:	0601                	addi	a2,a2,0
    117e:	00090003          	lb	zero,0(s2)
    1182:	0100                	addi	s0,sp,128
    1184:	1005                	c.nop	-31
    1186:	04090803          	lb	a6,64(s2)
    118a:	0100                	addi	s0,sp,128
    118c:	1c05                	addi	s8,s8,-31
    118e:	0200                	addi	s0,sp,256
    1190:	0104                	addi	s1,sp,128
    1192:	0306                	slli	t1,t1,0x1
    1194:	0900                	addi	s0,sp,144
    1196:	0002                	c.slli64	zero
    1198:	0501                	addi	a0,a0,0
    119a:	0009                	c.nop	2
    119c:	0402                	c.slli64	s0
    119e:	0601                	addi	a2,a2,0
    11a0:	08090003          	lb	zero,128(s2)
    11a4:	0100                	addi	s0,sp,128
    11a6:	0d05                	addi	s10,s10,1
    11a8:	0200                	addi	s0,sp,256
    11aa:	0304                	addi	s1,sp,384
    11ac:	0306                	slli	t1,t1,0x1
    11ae:	0958                	addi	a4,sp,148
    11b0:	0008                	0x8
    11b2:	0501                	addi	a0,a0,0
    11b4:	0019                	c.nop	6
    11b6:	0402                	c.slli64	s0
    11b8:	00030603          	lb	a2,0(t1)
    11bc:	0009                	c.nop	2
    11be:	0100                	addi	s0,sp,128
    11c0:	2105                	jal	15e0 <product2+0xdc>
    11c2:	0200                	addi	s0,sp,256
    11c4:	0304                	addi	s1,sp,384
    11c6:	02097f03          	0x2097f03
    11ca:	0100                	addi	s0,sp,128
    11cc:	1905                	addi	s2,s2,-31
    11ce:	0200                	addi	s0,sp,256
    11d0:	0304                	addi	s1,sp,384
    11d2:	04090103          	lb	sp,64(s2)
    11d6:	0100                	addi	s0,sp,128
    11d8:	1205                	addi	tp,tp,-31
    11da:	0200                	addi	s0,sp,256
    11dc:	0304                	addi	s1,sp,384
    11de:	04090003          	lb	zero,64(s2)
    11e2:	0100                	addi	s0,sp,128
    11e4:	2105                	jal	1604 <product2+0x100>
    11e6:	0200                	addi	s0,sp,256
    11e8:	0304                	addi	s1,sp,384
    11ea:	0306                	slli	t1,t1,0x1
    11ec:	097f                	0x97f
    11ee:	0004                	0x4
    11f0:	0501                	addi	a0,a0,0
    11f2:	0311                	addi	t1,t1,4
    11f4:	0002090b          	0x2090b
    11f8:	0501                	addi	a0,a0,0
    11fa:	0629                	addi	a2,a2,10
    11fc:	00090003          	lb	zero,0(s2)
    1200:	0100                	addi	s0,sp,128
    1202:	1c05                	addi	s8,s8,-31
    1204:	02090003          	lb	zero,32(s2)
    1208:	0100                	addi	s0,sp,128
    120a:	1305                	addi	t1,t1,-31
    120c:	0306                	slli	t1,t1,0x1
    120e:	097f                	0x97f
    1210:	0002                	c.slli64	zero
    1212:	0501                	addi	a0,a0,0
    1214:	0003061b          	0x3061b
    1218:	0009                	c.nop	2
    121a:	0100                	addi	s0,sp,128
    121c:	1305                	addi	t1,t1,-31
    121e:	02090003          	lb	zero,32(s2)
    1222:	0100                	addi	s0,sp,128
    1224:	0d05                	addi	s10,s10,1
    1226:	0200                	addi	s0,sp,256
    1228:	0204                	addi	s1,sp,256
    122a:	0306                	slli	t1,t1,0x1
    122c:	00040903          	lb	s2,0(s0)
    1230:	0501                	addi	a0,a0,0
    1232:	0025                	c.nop	9
    1234:	0402                	c.slli64	s0
    1236:	0602                	c.slli64	a2
    1238:	00090003          	lb	zero,0(s2)
    123c:	0100                	addi	s0,sp,128
    123e:	2105                	jal	165e <product2+0x15a>
    1240:	0200                	addi	s0,sp,256
    1242:	0204                	addi	s1,sp,256
    1244:	04097c03          	0x4097c03
    1248:	0100                	addi	s0,sp,128
    124a:	1805                	addi	a6,a6,-31
    124c:	0200                	addi	s0,sp,256
    124e:	0204                	addi	s1,sp,256
    1250:	04090403          	lb	s0,64(s2)
    1254:	0100                	addi	s0,sp,128
    1256:	2105                	jal	1676 <product2+0x172>
    1258:	0200                	addi	s0,sp,256
    125a:	0204                	addi	s1,sp,256
    125c:	0306                	slli	t1,t1,0x1
    125e:	097c                	addi	a5,sp,156
    1260:	0004                	0x4
    1262:	0501                	addi	a0,a0,0
    1264:	000d                	c.nop	3
    1266:	0402                	c.slli64	s0
    1268:	090a0303          	lb	t1,144(s4)
    126c:	0002                	c.slli64	zero
    126e:	0501                	addi	a0,a0,0
    1270:	0030                	addi	a2,sp,8
    1272:	0402                	c.slli64	s0
    1274:	00030603          	lb	a2,0(t1)
    1278:	0009                	c.nop	2
    127a:	0100                	addi	s0,sp,128
    127c:	2705                	jal	199c <result+0x240>
    127e:	0200                	addi	s0,sp,256
    1280:	0304                	addi	s1,sp,384
    1282:	06090003          	lb	zero,96(s2)
    1286:	0100                	addi	s0,sp,128
    1288:	2105                	jal	16a8 <product2+0x1a4>
    128a:	0200                	addi	s0,sp,256
    128c:	0304                	addi	s1,sp,384
    128e:	04097f03          	0x4097f03
    1292:	0100                	addi	s0,sp,128
    1294:	2705                	jal	19b4 <ti_2>
    1296:	0200                	addi	s0,sp,256
    1298:	0304                	addi	s1,sp,384
    129a:	04090103          	lb	sp,64(s2)
    129e:	0100                	addi	s0,sp,128
    12a0:	1905                	addi	s2,s2,-31
    12a2:	0200                	addi	s0,sp,256
    12a4:	0304                	addi	s1,sp,384
    12a6:	02090003          	lb	zero,32(s2)
    12aa:	0100                	addi	s0,sp,128
    12ac:	2105                	jal	16cc <product2+0x1c8>
    12ae:	0200                	addi	s0,sp,256
    12b0:	0304                	addi	s1,sp,384
    12b2:	0306                	slli	t1,t1,0x1
    12b4:	097f                	0x97f
    12b6:	0004                	0x4
    12b8:	0501                	addi	a0,a0,0
    12ba:	0311                	addi	t1,t1,4
    12bc:	0908                	addi	a0,sp,144
    12be:	0002                	c.slli64	zero
    12c0:	0501                	addi	a0,a0,0
    12c2:	0003062b          	0x3062b
    12c6:	0009                	c.nop	2
    12c8:	0100                	addi	s0,sp,128
    12ca:	1d05                	addi	s10,s10,-31
    12cc:	02090003          	lb	zero,32(s2)
    12d0:	0100                	addi	s0,sp,128
    12d2:	1305                	addi	t1,t1,-31
    12d4:	0306                	slli	t1,t1,0x1
    12d6:	097f                	0x97f
    12d8:	0002                	c.slli64	zero
    12da:	0501                	addi	a0,a0,0
    12dc:	061c                	addi	a5,sp,768
    12de:	00090003          	lb	zero,0(s2)
    12e2:	0100                	addi	s0,sp,128
    12e4:	1305                	addi	t1,t1,-31
    12e6:	02090003          	lb	zero,32(s2)
    12ea:	0100                	addi	s0,sp,128
    12ec:	0d05                	addi	s10,s10,1
    12ee:	0200                	addi	s0,sp,256
    12f0:	0204                	addi	s1,sp,256
    12f2:	0306                	slli	t1,t1,0x1
    12f4:	00040903          	lb	s2,0(s0)
    12f8:	0501                	addi	a0,a0,0
    12fa:	04020027          	0x4020027
    12fe:	0602                	c.slli64	a2
    1300:	00090003          	lb	zero,0(s2)
    1304:	0100                	addi	s0,sp,128
    1306:	2105                	jal	1726 <product2+0x222>
    1308:	0200                	addi	s0,sp,256
    130a:	0204                	addi	s1,sp,256
    130c:	04097c03          	0x4097c03
    1310:	0100                	addi	s0,sp,128
    1312:	1905                	addi	s2,s2,-31
    1314:	0200                	addi	s0,sp,256
    1316:	0204                	addi	s1,sp,256
    1318:	04090403          	lb	s0,64(s2)
    131c:	0100                	addi	s0,sp,128
    131e:	2105                	jal	173e <product2+0x23a>
    1320:	0200                	addi	s0,sp,256
    1322:	0204                	addi	s1,sp,256
    1324:	0306                	slli	t1,t1,0x1
    1326:	097c                	addi	a5,sp,156
    1328:	0004                	0x4
    132a:	0501                	addi	a0,a0,0
    132c:	000d                	c.nop	3
    132e:	0402                	c.slli64	s0
    1330:	090a0303          	lb	t1,144(s4)
    1334:	0002                	c.slli64	zero
    1336:	0001                	nop
    1338:	0402                	c.slli64	s0
    133a:	09010303          	lb	t1,144(sp)
    133e:	0000                	unimp
    1340:	0501                	addi	a0,a0,0
    1342:	001c                	0x1c
    1344:	0402                	c.slli64	s0
    1346:	7f030603          	lb	a2,2032(t1)
    134a:	0009                	c.nop	2
    134c:	0100                	addi	s0,sp,128
    134e:	1905                	addi	s2,s2,-31
    1350:	0200                	addi	s0,sp,256
    1352:	0304                	addi	s1,sp,384
    1354:	06090003          	lb	zero,96(s2)
    1358:	0100                	addi	s0,sp,128
    135a:	2005                	jal	137a <_bss_start+0xce>
    135c:	0200                	addi	s0,sp,256
    135e:	0304                	addi	s1,sp,384
    1360:	04097f03          	0x4097f03
    1364:	0100                	addi	s0,sp,128
    1366:	1905                	addi	s2,s2,-31
    1368:	0200                	addi	s0,sp,256
    136a:	0304                	addi	s1,sp,384
    136c:	04090103          	lb	sp,64(s2)
    1370:	0100                	addi	s0,sp,128
    1372:	0200                	addi	s0,sp,256
    1374:	0304                	addi	s1,sp,384
    1376:	02090103          	lb	sp,32(s2)
    137a:	0100                	addi	s0,sp,128
    137c:	1205                	addi	tp,tp,-31
    137e:	0200                	addi	s0,sp,256
    1380:	0304                	addi	s1,sp,384
    1382:	04090003          	lb	zero,64(s2)
    1386:	0100                	addi	s0,sp,128
    1388:	2005                	jal	13a8 <_bss_start+0xfc>
    138a:	0200                	addi	s0,sp,256
    138c:	0304                	addi	s1,sp,384
    138e:	0306                	slli	t1,t1,0x1
    1390:	097e                	slli	s2,s2,0x1f
    1392:	0004                	0x4
    1394:	0501                	addi	a0,a0,0
    1396:	030d                	addi	t1,t1,3
    1398:	0909                	addi	s2,s2,2
    139a:	0002                	c.slli64	zero
    139c:	0501                	addi	a0,a0,0
    139e:	0003060f          	0x3060f
    13a2:	0009                	c.nop	2
    13a4:	0100                	addi	s0,sp,128
    13a6:	2405                	jal	15c6 <product2+0xc2>
    13a8:	0200                	addi	s0,sp,256
    13aa:	0204                	addi	s1,sp,256
    13ac:	0306                	slli	t1,t1,0x1
    13ae:	097f                	0x97f
    13b0:	0002                	c.slli64	zero
    13b2:	0501                	addi	a0,a0,0
    13b4:	0026                	c.slli	zero,0x9
    13b6:	0402                	c.slli64	s0
    13b8:	0602                	c.slli64	a2
    13ba:	00090003          	lb	zero,0(s2)
    13be:	0100                	addi	s0,sp,128
    13c0:	0d05                	addi	s10,s10,1
    13c2:	0200                	addi	s0,sp,256
    13c4:	0304                	addi	s1,sp,384
    13c6:	0306                	slli	t1,t1,0x1
    13c8:	0909                	addi	s2,s2,2
    13ca:	0004                	0x4
    13cc:	0501                	addi	a0,a0,0
    13ce:	0012                	c.slli	zero,0x4
    13d0:	0402                	c.slli64	s0
    13d2:	00030603          	lb	a2,0(t1)
    13d6:	0009                	c.nop	2
    13d8:	0100                	addi	s0,sp,128
    13da:	2105                	jal	17fa <result+0x9e>
    13dc:	0200                	addi	s0,sp,256
    13de:	0304                	addi	s1,sp,384
    13e0:	0306                	slli	t1,t1,0x1
    13e2:	097f                	0x97f
    13e4:	000a                	c.slli	zero,0x2
    13e6:	0501                	addi	a0,a0,0
    13e8:	0015                	c.nop	5
    13ea:	0402                	c.slli64	s0
    13ec:	0301                	addi	t1,t1,0
    13ee:	0900                	addi	s0,sp,144
    13f0:	0002                	c.slli64	zero
    13f2:	0501                	addi	a0,a0,0
    13f4:	0009                	c.nop	2
    13f6:	0402                	c.slli64	s0
    13f8:	0601                	addi	a2,a2,0
    13fa:	00090003          	lb	zero,0(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	0200                	addi	s0,sp,256
    1402:	0304                	addi	s1,sp,384
    1404:	0306                	slli	t1,t1,0x1
    1406:	0911                	addi	s2,s2,4
    1408:	0006                	c.slli	zero,0x1
    140a:	0501                	addi	a0,a0,0
    140c:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1410:	00030603          	lb	a2,0(t1)
    1414:	0009                	c.nop	2
    1416:	0100                	addi	s0,sp,128
    1418:	2505                	jal	1a38 <ti_2+0x84>
    141a:	0200                	addi	s0,sp,256
    141c:	0304                	addi	s1,sp,384
    141e:	0306                	slli	t1,t1,0x1
    1420:	097f                	0x97f
    1422:	000c                	0xc
    1424:	0501                	addi	a0,a0,0
    1426:	033c                	addi	a5,sp,392
    1428:	090a                	slli	s2,s2,0x2
    142a:	0006                	c.slli	zero,0x1
    142c:	0501                	addi	a0,a0,0
    142e:	0305                	addi	t1,t1,1
    1430:	0902                	c.slli64	s2
    1432:	0000                	unimp
    1434:	0301                	addi	t1,t1,0
    1436:	0901                	addi	s2,s2,0
    1438:	0000                	unimp
    143a:	0301                	addi	t1,t1,0
    143c:	0901                	addi	s2,s2,0
    143e:	0000                	unimp
    1440:	0501                	addi	a0,a0,0
    1442:	0609                	addi	a2,a2,2
    1444:	00090003          	lb	zero,0(s2)
    1448:	0100                	addi	s0,sp,128
    144a:	3c05                	jal	e7a <memcpy+0x22>
    144c:	04097c03          	0x4097c03
    1450:	0100                	addi	s0,sp,128
    1452:	0905                	addi	s2,s2,1
    1454:	02090403          	lb	s0,32(s2)
    1458:	0100                	addi	s0,sp,128
    145a:	3c05                	jal	e8a <memcpy+0x32>
    145c:	04097c03          	0x4097c03
    1460:	0100                	addi	s0,sp,128
    1462:	0905                	addi	s2,s2,1
    1464:	1c090403          	lb	s0,448(s2)
    1468:	0100                	addi	s0,sp,128
    146a:	06090103          	lb	sp,96(s2)
    146e:	0100                	addi	s0,sp,128
    1470:	06090103          	lb	sp,96(s2)
    1474:	0100                	addi	s0,sp,128
    1476:	06090203          	lb	tp,96(s2)
    147a:	0100                	addi	s0,sp,128
    147c:	06090103          	lb	sp,96(s2)
    1480:	0100                	addi	s0,sp,128
    1482:	06090103          	lb	sp,96(s2)
    1486:	0100                	addi	s0,sp,128
    1488:	06090103          	lb	sp,96(s2)
    148c:	0100                	addi	s0,sp,128
    148e:	3c05                	jal	ebe <memcpy+0x66>
    1490:	04097503          	0x4097503
    1494:	0100                	addi	s0,sp,128
    1496:	0905                	addi	s2,s2,1
    1498:	06090403          	lb	s0,96(s2)
    149c:	0100                	addi	s0,sp,128
    149e:	0505                	addi	a0,a0,1
    14a0:	0306                	slli	t1,t1,0x1
    14a2:	0901                	addi	s2,s2,0
    14a4:	0004                	0x4
    14a6:	0301                	addi	t1,t1,0
    14a8:	0901                	addi	s2,s2,0
    14aa:	0000                	unimp
    14ac:	0301                	addi	t1,t1,0
    14ae:	0902                	c.slli64	s2
    14b0:	0000                	unimp
    14b2:	0301                	addi	t1,t1,0
    14b4:	0901                	addi	s2,s2,0
    14b6:	0000                	unimp
    14b8:	0301                	addi	t1,t1,0
    14ba:	0901                	addi	s2,s2,0
    14bc:	0000                	unimp
    14be:	0301                	addi	t1,t1,0
    14c0:	0901                	addi	s2,s2,0
    14c2:	0000                	unimp
    14c4:	0501                	addi	a0,a0,0
    14c6:	0609                	addi	a2,a2,2
    14c8:	00090003          	lb	zero,0(s2)
    14cc:	0100                	addi	s0,sp,128
    14ce:	0505                	addi	a0,a0,1
    14d0:	0306                	slli	t1,t1,0x1
    14d2:	0901                	addi	s2,s2,0
    14d4:	0002                	c.slli64	zero
    14d6:	0301                	addi	t1,t1,0
    14d8:	0901                	addi	s2,s2,0
    14da:	0000                	unimp
    14dc:	0301                	addi	t1,t1,0
    14de:	0901                	addi	s2,s2,0
    14e0:	0000                	unimp
    14e2:	0301                	addi	t1,t1,0
    14e4:	0901                	addi	s2,s2,0
    14e6:	0000                	unimp
    14e8:	0301                	addi	t1,t1,0
    14ea:	0902                	c.slli64	s2
    14ec:	0000                	unimp
    14ee:	0301                	addi	t1,t1,0
    14f0:	0901                	addi	s2,s2,0
    14f2:	0000                	unimp
    14f4:	0501                	addi	a0,a0,0
    14f6:	060c                	addi	a1,sp,768
    14f8:	00090003          	lb	zero,0(s2)
    14fc:	0100                	addi	s0,sp,128
    14fe:	1105                	addi	sp,sp,-31
    1500:	02090303          	lb	t1,32(s2)
    1504:	0100                	addi	s0,sp,128
    1506:	0200                	addi	s0,sp,256
    1508:	0104                	addi	s1,sp,128
    150a:	0306                	slli	t1,t1,0x1
    150c:	097d                	addi	s2,s2,31
    150e:	0008                	0x8
    1510:	0501                	addi	a0,a0,0
    1512:	0005                	c.nop	1
    1514:	0402                	c.slli64	s0
    1516:	0601                	addi	a2,a2,0
    1518:	00090003          	lb	zero,0(s2)
    151c:	0100                	addi	s0,sp,128
    151e:	0306                	slli	t1,t1,0x1
    1520:	0906                	slli	s2,s2,0x1
    1522:	0004                	0x4
    1524:	0301                	addi	t1,t1,0
    1526:	0901                	addi	s2,s2,0
    1528:	0008                	0x8
    152a:	0301                	addi	t1,t1,0
    152c:	0905                	addi	s2,s2,1
    152e:	0008                	0x8
    1530:	0501                	addi	a0,a0,0
    1532:	060d                	addi	a2,a2,3
    1534:	00090003          	lb	zero,0(s2)
    1538:	0100                	addi	s0,sp,128
    153a:	0505                	addi	a0,a0,1
    153c:	0306                	slli	t1,t1,0x1
    153e:	00060903          	lb	s2,0(a2) # 51000 <_stack_start+0x41000>
    1542:	0501                	addi	a0,a0,0
    1544:	0900030b          	0x900030b
    1548:	0000                	unimp
    154a:	0501                	addi	a0,a0,0
    154c:	0624                	addi	s1,sp,776
    154e:	00091603          	lh	a2,0(s2)
    1552:	0100                	addi	s0,sp,128
    1554:	1005                	c.nop	-31
    1556:	08096e03          	0x8096e03
    155a:	0100                	addi	s0,sp,128
    155c:	0905                	addi	s2,s2,1
    155e:	0200                	addi	s0,sp,256
    1560:	0304                	addi	s1,sp,384
    1562:	0306                	slli	t1,t1,0x1
    1564:	0970                	addi	a2,sp,156
    1566:	0004                	0x4
    1568:	0501                	addi	a0,a0,0
    156a:	0011                	c.nop	4
    156c:	0402                	c.slli64	s0
    156e:	00030603          	lb	a2,0(t1)
    1572:	0409                	addi	s0,s0,2
    1574:	0100                	addi	s0,sp,128
    1576:	0200                	addi	s0,sp,256
    1578:	0304                	addi	s1,sp,384
    157a:	04090103          	lb	sp,64(s2)
    157e:	0100                	addi	s0,sp,128
    1580:	0200                	addi	s0,sp,256
    1582:	0304                	addi	s1,sp,384
    1584:	02097f03          	0x2097f03
    1588:	0100                	addi	s0,sp,128
    158a:	0905                	addi	s2,s2,1
    158c:	0200                	addi	s0,sp,256
    158e:	0304                	addi	s1,sp,384
    1590:	0306                	slli	t1,t1,0x1
    1592:	0901                	addi	s2,s2,0
    1594:	0004                	0x4
    1596:	0501                	addi	a0,a0,0
    1598:	0011                	c.nop	4
    159a:	0402                	c.slli64	s0
    159c:	00030603          	lb	a2,0(t1)
    15a0:	0009                	c.nop	2
    15a2:	0100                	addi	s0,sp,128
    15a4:	1b05                	addi	s6,s6,-31
    15a6:	0200                	addi	s0,sp,256
    15a8:	0304                	addi	s1,sp,384
    15aa:	0306                	slli	t1,t1,0x1
    15ac:	097c                	addi	a5,sp,156
    15ae:	0004                	0x4
    15b0:	0501                	addi	a0,a0,0
    15b2:	0311                	addi	t1,t1,4
    15b4:	0915                	addi	s2,s2,5
    15b6:	0004                	0x4
    15b8:	0501                	addi	a0,a0,0
    15ba:	00030623          	sb	zero,12(t1)
    15be:	0009                	c.nop	2
    15c0:	0100                	addi	s0,sp,128
    15c2:	1905                	addi	s2,s2,-31
    15c4:	02090003          	lb	zero,32(s2)
    15c8:	0100                	addi	s0,sp,128
    15ca:	1305                	addi	t1,t1,-31
    15cc:	0306                	slli	t1,t1,0x1
    15ce:	097f                	0x97f
    15d0:	0002                	c.slli64	zero
    15d2:	0501                	addi	a0,a0,0
    15d4:	0618                	addi	a4,sp,768
    15d6:	00090003          	lb	zero,0(s2)
    15da:	0100                	addi	s0,sp,128
    15dc:	1305                	addi	t1,t1,-31
    15de:	02090003          	lb	zero,32(s2)
    15e2:	0100                	addi	s0,sp,128
    15e4:	0d05                	addi	s10,s10,1
    15e6:	0200                	addi	s0,sp,256
    15e8:	0204                	addi	s1,sp,256
    15ea:	0306                	slli	t1,t1,0x1
    15ec:	00040903          	lb	s2,0(s0)
    15f0:	0501                	addi	a0,a0,0
    15f2:	001f 0402 0602      	0x6020402001f
    15f8:	00090003          	lb	zero,0(s2)
    15fc:	0100                	addi	s0,sp,128
    15fe:	2005                	jal	161e <product2+0x11a>
    1600:	0200                	addi	s0,sp,256
    1602:	0204                	addi	s1,sp,256
    1604:	04097c03          	0x4097c03
    1608:	0100                	addi	s0,sp,128
    160a:	1505                	addi	a0,a0,-31
    160c:	0200                	addi	s0,sp,256
    160e:	0204                	addi	s1,sp,256
    1610:	02090403          	lb	s0,32(s2)
    1614:	0100                	addi	s0,sp,128
    1616:	2005                	jal	1636 <product2+0x132>
    1618:	0200                	addi	s0,sp,256
    161a:	0204                	addi	s1,sp,256
    161c:	0306                	slli	t1,t1,0x1
    161e:	097c                	addi	a5,sp,156
    1620:	0002                	c.slli64	zero
    1622:	0501                	addi	a0,a0,0
    1624:	0015                	c.nop	5
    1626:	0402                	c.slli64	s0
    1628:	0301                	addi	t1,t1,0
    162a:	0900                	addi	s0,sp,144
    162c:	0000                	unimp
    162e:	0501                	addi	a0,a0,0
    1630:	0009                	c.nop	2
    1632:	0402                	c.slli64	s0
    1634:	0601                	addi	a2,a2,0
    1636:	00090003          	lb	zero,0(s2)
    163a:	0100                	addi	s0,sp,128
    163c:	1005                	c.nop	-31
    163e:	0e090903          	lb	s2,224(s2)
    1642:	0100                	addi	s0,sp,128
    1644:	1505                	addi	a0,a0,-31
    1646:	0200                	addi	s0,sp,256
    1648:	0104                	addi	s1,sp,128
    164a:	0306                	slli	t1,t1,0x1
    164c:	0900                	addi	s0,sp,144
    164e:	0002                	c.slli64	zero
    1650:	0501                	addi	a0,a0,0
    1652:	0009                	c.nop	2
    1654:	0402                	c.slli64	s0
    1656:	0601                	addi	a2,a2,0
    1658:	00090003          	lb	zero,0(s2)
    165c:	0100                	addi	s0,sp,128
    165e:	0306                	slli	t1,t1,0x1
    1660:	0908                	addi	a0,sp,144
    1662:	0004                	0x4
    1664:	0501                	addi	a0,a0,0
    1666:	0003060f          	0x3060f
    166a:	0009                	c.nop	2
    166c:	0100                	addi	s0,sp,128
    166e:	0905                	addi	s2,s2,1
    1670:	0306                	slli	t1,t1,0x1
    1672:	0901                	addi	s2,s2,0
    1674:	000c                	0xc
    1676:	0501                	addi	a0,a0,0
    1678:	0019                	c.nop	6
    167a:	0402                	c.slli64	s0
    167c:	0301                	addi	t1,t1,0
    167e:	0900                	addi	s0,sp,144
    1680:	0004                	0x4
    1682:	0501                	addi	a0,a0,0
    1684:	0009                	c.nop	2
    1686:	0402                	c.slli64	s0
    1688:	0601                	addi	a2,a2,0
    168a:	00090003          	lb	zero,0(s2)
    168e:	0100                	addi	s0,sp,128
    1690:	1005                	c.nop	-31
    1692:	0a090603          	lb	a2,160(s2)
    1696:	0100                	addi	s0,sp,128
    1698:	1505                	addi	a0,a0,-31
    169a:	0200                	addi	s0,sp,256
    169c:	0104                	addi	s1,sp,128
    169e:	0306                	slli	t1,t1,0x1
    16a0:	0900                	addi	s0,sp,144
    16a2:	0002                	c.slli64	zero
    16a4:	0501                	addi	a0,a0,0
    16a6:	0009                	c.nop	2
    16a8:	0402                	c.slli64	s0
    16aa:	0601                	addi	a2,a2,0
    16ac:	00090003          	lb	zero,0(s2)
    16b0:	0100                	addi	s0,sp,128
    16b2:	06090003          	lb	zero,96(s2)
    16b6:	0100                	addi	s0,sp,128
    16b8:	1005                	c.nop	-31
    16ba:	02090603          	lb	a2,32(s2)
    16be:	0100                	addi	s0,sp,128
    16c0:	1505                	addi	a0,a0,-31
    16c2:	0200                	addi	s0,sp,256
    16c4:	0104                	addi	s1,sp,128
    16c6:	0306                	slli	t1,t1,0x1
    16c8:	0900                	addi	s0,sp,144
    16ca:	0002                	c.slli64	zero
    16cc:	0501                	addi	a0,a0,0
    16ce:	0009                	c.nop	2
    16d0:	0402                	c.slli64	s0
    16d2:	0601                	addi	a2,a2,0
    16d4:	00090003          	lb	zero,0(s2)
    16d8:	0100                	addi	s0,sp,128
    16da:	0306                	slli	t1,t1,0x1
    16dc:	00040907          	0x40907
    16e0:	0501                	addi	a0,a0,0
    16e2:	0610                	addi	a2,sp,768
    16e4:	00090003          	lb	zero,0(s2)
    16e8:	0100                	addi	s0,sp,128
    16ea:	0505                	addi	a0,a0,1
    16ec:	0306                	slli	t1,t1,0x1
    16ee:	0904                	addi	s1,sp,144
    16f0:	000e                	c.slli	zero,0x3
    16f2:	0501                	addi	a0,a0,0
    16f4:	0309                	addi	t1,t1,2
    16f6:	00060903          	lb	s2,0(a2)
    16fa:	0501                	addi	a0,a0,0
    16fc:	0610                	addi	a2,sp,768
    16fe:	02090003          	lb	zero,32(s2)
    1702:	0100                	addi	s0,sp,128
    1704:	1505                	addi	a0,a0,-31
    1706:	0200                	addi	s0,sp,256
    1708:	0104                	addi	s1,sp,128
    170a:	0306                	slli	t1,t1,0x1
    170c:	0900                	addi	s0,sp,144
    170e:	0002                	c.slli64	zero
    1710:	0501                	addi	a0,a0,0
    1712:	0009                	c.nop	2
    1714:	0402                	c.slli64	s0
    1716:	0601                	addi	a2,a2,0
    1718:	00090003          	lb	zero,0(s2)
    171c:	0100                	addi	s0,sp,128
    171e:	0306                	slli	t1,t1,0x1
    1720:	090a                	slli	s2,s2,0x2
    1722:	0004                	0x4
    1724:	0501                	addi	a0,a0,0
    1726:	0610                	addi	a2,sp,768
    1728:	00090003          	lb	zero,0(s2)
    172c:	0100                	addi	s0,sp,128
    172e:	0505                	addi	a0,a0,1
    1730:	0306                	slli	t1,t1,0x1
    1732:	0904                	addi	s1,sp,144
    1734:	0010                	0x10
    1736:	0501                	addi	a0,a0,0
    1738:	0309                	addi	t1,t1,2
    173a:	00060903          	lb	s2,0(a2)
    173e:	0501                	addi	a0,a0,0
    1740:	0610                	addi	a2,sp,768
    1742:	00090003          	lb	zero,0(s2)
    1746:	0100                	addi	s0,sp,128
    1748:	1505                	addi	a0,a0,-31
    174a:	0200                	addi	s0,sp,256
    174c:	0104                	addi	s1,sp,128
    174e:	0306                	slli	t1,t1,0x1
    1750:	0900                	addi	s0,sp,144
    1752:	0002                	c.slli64	zero
    1754:	0501                	addi	a0,a0,0
    1756:	0009                	c.nop	2
    1758:	0402                	c.slli64	s0
    175a:	0601                	addi	a2,a2,0
    175c:	00090003          	lb	zero,0(s2)
    1760:	0100                	addi	s0,sp,128
    1762:	1005                	c.nop	-31
    1764:	06090803          	lb	a6,96(s2)
    1768:	0100                	addi	s0,sp,128
    176a:	1505                	addi	a0,a0,-31
    176c:	0200                	addi	s0,sp,256
    176e:	0104                	addi	s1,sp,128
    1770:	0306                	slli	t1,t1,0x1
    1772:	0900                	addi	s0,sp,144
    1774:	0002                	c.slli64	zero
    1776:	0501                	addi	a0,a0,0
    1778:	0009                	c.nop	2
    177a:	0402                	c.slli64	s0
    177c:	0601                	addi	a2,a2,0
    177e:	00090003          	lb	zero,0(s2)
    1782:	0100                	addi	s0,sp,128
    1784:	1005                	c.nop	-31
    1786:	06090503          	lb	a0,96(s2)
    178a:	0100                	addi	s0,sp,128
    178c:	1505                	addi	a0,a0,-31
    178e:	0200                	addi	s0,sp,256
    1790:	0104                	addi	s1,sp,128
    1792:	0306                	slli	t1,t1,0x1
    1794:	0900                	addi	s0,sp,144
    1796:	0002                	c.slli64	zero
    1798:	0501                	addi	a0,a0,0
    179a:	0009                	c.nop	2
    179c:	0402                	c.slli64	s0
    179e:	0601                	addi	a2,a2,0
    17a0:	00090003          	lb	zero,0(s2)
    17a4:	0100                	addi	s0,sp,128
    17a6:	0105                	addi	sp,sp,1
    17a8:	0306                	slli	t1,t1,0x1
    17aa:	090a                	slli	s2,s2,0x2
    17ac:	0004                	0x4
    17ae:	0301                	addi	t1,t1,0
    17b0:	0901                	addi	s2,s2,0
    17b2:	0008                	0x8
    17b4:	0301                	addi	t1,t1,0
    17b6:	0901                	addi	s2,s2,0
    17b8:	0008                	0x8
    17ba:	0301                	addi	t1,t1,0
    17bc:	0901                	addi	s2,s2,0
    17be:	000e                	c.slli	zero,0x3
    17c0:	0501                	addi	a0,a0,0
    17c2:	0309                	addi	t1,t1,2
    17c4:	0902                	c.slli64	s2
    17c6:	0008                	0x8
    17c8:	0501                	addi	a0,a0,0
    17ca:	0612                	slli	a2,a2,0x4
    17cc:	097fa503          	lw	a0,151(t6)
    17d0:	0000                	unimp
    17d2:	0501                	addi	a0,a0,0
    17d4:	0310                	addi	a2,sp,384
    17d6:	020900db          	0x20900db
    17da:	0100                	addi	s0,sp,128
    17dc:	1505                	addi	a0,a0,-31
    17de:	0200                	addi	s0,sp,256
    17e0:	0104                	addi	s1,sp,128
    17e2:	0306                	slli	t1,t1,0x1
    17e4:	0900                	addi	s0,sp,144
    17e6:	0002                	c.slli64	zero
    17e8:	0501                	addi	a0,a0,0
    17ea:	0009                	c.nop	2
    17ec:	0402                	c.slli64	s0
    17ee:	0601                	addi	a2,a2,0
    17f0:	00090003          	lb	zero,0(s2)
    17f4:	0100                	addi	s0,sp,128
    17f6:	0b05                	addi	s6,s6,1
    17f8:	0306                	slli	t1,t1,0x1
    17fa:	04097fa3          	0x4097fa3
    17fe:	0100                	addi	s0,sp,128
    1800:	1005                	c.nop	-31
    1802:	0306                	slli	t1,t1,0x1
    1804:	00e8                	addi	a0,sp,76
    1806:	0409                	addi	s0,s0,2
    1808:	0100                	addi	s0,sp,128
    180a:	02090103          	lb	sp,32(s2)
    180e:	0100                	addi	s0,sp,128
    1810:	1505                	addi	a0,a0,-31
    1812:	0200                	addi	s0,sp,256
    1814:	0104                	addi	s1,sp,128
    1816:	0306                	slli	t1,t1,0x1
    1818:	097f                	0x97f
    181a:	0002                	c.slli64	zero
    181c:	0501                	addi	a0,a0,0
    181e:	0009                	c.nop	2
    1820:	0402                	c.slli64	s0
    1822:	0601                	addi	a2,a2,0
    1824:	00090003          	lb	zero,0(s2)
    1828:	0100                	addi	s0,sp,128
    182a:	1505                	addi	a0,a0,-31
    182c:	0200                	addi	s0,sp,256
    182e:	0104                	addi	s1,sp,128
    1830:	0306                	slli	t1,t1,0x1
    1832:	090c                	addi	a1,sp,144
    1834:	000c                	0xc
    1836:	0501                	addi	a0,a0,0
    1838:	0009                	c.nop	2
    183a:	0402                	c.slli64	s0
    183c:	0601                	addi	a2,a2,0
    183e:	00090003          	lb	zero,0(s2)
    1842:	0100                	addi	s0,sp,128
    1844:	0306                	slli	t1,t1,0x1
    1846:	0905                	addi	s2,s2,1
    1848:	0004                	0x4
    184a:	0301                	addi	t1,t1,0
    184c:	0901                	addi	s2,s2,0
    184e:	0000                	unimp
    1850:	0501                	addi	a0,a0,0
    1852:	0605                	addi	a2,a2,1
    1854:	00090103          	lb	sp,0(s2)
    1858:	0100                	addi	s0,sp,128
    185a:	1105                	addi	sp,sp,-31
    185c:	0306                	slli	t1,t1,0x1
    185e:	7f94                	flw	fa3,56(a5)
    1860:	2a09                	jal	1972 <result+0x216>
    1862:	0100                	addi	s0,sp,128
    1864:	2305                	jal	1d84 <random_keys+0x240>
    1866:	0306                	slli	t1,t1,0x1
    1868:	0900                	addi	s0,sp,144
    186a:	0000                	unimp
    186c:	0501                	addi	a0,a0,0
    186e:	0319                	addi	t1,t1,6
    1870:	0900                	addi	s0,sp,144
    1872:	0002                	c.slli64	zero
    1874:	0501                	addi	a0,a0,0
    1876:	7f030613          	addi	a2,t1,2032
    187a:	0209                	addi	tp,tp,2
    187c:	0100                	addi	s0,sp,128
    187e:	1805                	addi	a6,a6,-31
    1880:	0306                	slli	t1,t1,0x1
    1882:	0900                	addi	s0,sp,144
    1884:	0000                	unimp
    1886:	0501                	addi	a0,a0,0
    1888:	09000313          	li	t1,144
    188c:	0002                	c.slli64	zero
    188e:	0501                	addi	a0,a0,0
    1890:	000d                	c.nop	3
    1892:	0402                	c.slli64	s0
    1894:	0602                	c.slli64	a2
    1896:	04090303          	lb	t1,64(s2)
    189a:	0100                	addi	s0,sp,128
    189c:	1f05                	addi	t5,t5,-31
    189e:	0200                	addi	s0,sp,256
    18a0:	0204                	addi	s1,sp,256
    18a2:	0306                	slli	t1,t1,0x1
    18a4:	0900                	addi	s0,sp,144
    18a6:	0000                	unimp
    18a8:	0501                	addi	a0,a0,0
    18aa:	0020                	addi	s0,sp,8
    18ac:	0402                	c.slli64	s0
    18ae:	0302                	c.slli64	t1
    18b0:	097c                	addi	a5,sp,156
    18b2:	0004                	0x4
    18b4:	0501                	addi	a0,a0,0
    18b6:	0015                	c.nop	5
    18b8:	0402                	c.slli64	s0
    18ba:	0302                	c.slli64	t1
    18bc:	0904                	addi	s1,sp,144
    18be:	0004                	0x4
    18c0:	0501                	addi	a0,a0,0
    18c2:	0020                	addi	s0,sp,8
    18c4:	0402                	c.slli64	s0
    18c6:	0602                	c.slli64	a2
    18c8:	04097c03          	0x4097c03
    18cc:	0100                	addi	s0,sp,128
    18ce:	0d05                	addi	s10,s10,1
    18d0:	0200                	addi	s0,sp,256
    18d2:	0304                	addi	s1,sp,384
    18d4:	02090a03          	lb	s4,32(s2)
    18d8:	0100                	addi	s0,sp,128
    18da:	2205                	jal	19fa <ti_2+0x46>
    18dc:	0200                	addi	s0,sp,256
    18de:	0304                	addi	s1,sp,384
    18e0:	0306                	slli	t1,t1,0x1
    18e2:	0900                	addi	s0,sp,144
    18e4:	0000                	unimp
    18e6:	0501                	addi	a0,a0,0
    18e8:	002a                	c.slli	zero,0xa
    18ea:	0402                	c.slli64	s0
    18ec:	097f0303          	lb	t1,151(t5)
    18f0:	0008                	0x8
    18f2:	0501                	addi	a0,a0,0
    18f4:	001d                	c.nop	7
    18f6:	0402                	c.slli64	s0
    18f8:	09010303          	lb	t1,144(sp)
    18fc:	0004                	0x4
    18fe:	0501                	addi	a0,a0,0
    1900:	002a                	c.slli	zero,0xa
    1902:	0402                	c.slli64	s0
    1904:	7f030603          	lb	a2,2032(t1)
    1908:	0409                	addi	s0,s0,2
    190a:	0100                	addi	s0,sp,128
    190c:	0d05                	addi	s10,s10,1
    190e:	0200                	addi	s0,sp,256
    1910:	0304                	addi	s1,sp,384
    1912:	02090703          	lb	a4,32(s2)
    1916:	0100                	addi	s0,sp,128
    1918:	1b05                	addi	s6,s6,-31
    191a:	0200                	addi	s0,sp,256
    191c:	0304                	addi	s1,sp,384
    191e:	0306                	slli	t1,t1,0x1
    1920:	0900                	addi	s0,sp,144
    1922:	0000                	unimp
    1924:	0501                	addi	a0,a0,0
    1926:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    192a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    192e:	0004                	0x4
    1930:	0501                	addi	a0,a0,0
    1932:	001f 0402 0303      	0x3030402001f
    1938:	0900                	addi	s0,sp,144
    193a:	0004                	0x4
    193c:	0501                	addi	a0,a0,0
    193e:	0015                	c.nop	5
    1940:	0402                	c.slli64	s0
    1942:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1946:	0004                	0x4
    1948:	0501                	addi	a0,a0,0
    194a:	0020                	addi	s0,sp,8
    194c:	0402                	c.slli64	s0
    194e:	097f0303          	lb	t1,151(t5)
    1952:	0004                	0x4
    1954:	0501                	addi	a0,a0,0
    1956:	001f 0402 0303      	0x3030402001f
    195c:	0901                	addi	s2,s2,0
    195e:	0002                	c.slli64	zero
    1960:	0501                	addi	a0,a0,0
    1962:	0015                	c.nop	5
    1964:	0402                	c.slli64	s0
    1966:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    196a:	0002                	c.slli64	zero
    196c:	0501                	addi	a0,a0,0
    196e:	0020                	addi	s0,sp,8
    1970:	0402                	c.slli64	s0
    1972:	7f030603          	lb	a2,2032(t1)
    1976:	0209                	addi	tp,tp,2
    1978:	0100                	addi	s0,sp,128
    197a:	1105                	addi	sp,sp,-31
    197c:	04090803          	lb	a6,64(s2)
    1980:	0100                	addi	s0,sp,128
    1982:	2305                	jal	1ea2 <random_keys+0x35e>
    1984:	0306                	slli	t1,t1,0x1
    1986:	0900                	addi	s0,sp,144
    1988:	0000                	unimp
    198a:	0501                	addi	a0,a0,0
    198c:	0319                	addi	t1,t1,6
    198e:	0900                	addi	s0,sp,144
    1990:	0002                	c.slli64	zero
    1992:	0501                	addi	a0,a0,0
    1994:	7f030613          	addi	a2,t1,2032
    1998:	0209                	addi	tp,tp,2
    199a:	0100                	addi	s0,sp,128
    199c:	1805                	addi	a6,a6,-31
    199e:	0306                	slli	t1,t1,0x1
    19a0:	0900                	addi	s0,sp,144
    19a2:	0000                	unimp
    19a4:	0501                	addi	a0,a0,0
    19a6:	09000313          	li	t1,144
    19aa:	0002                	c.slli64	zero
    19ac:	0501                	addi	a0,a0,0
    19ae:	000d                	c.nop	3
    19b0:	0402                	c.slli64	s0
    19b2:	0602                	c.slli64	a2
    19b4:	04090303          	lb	t1,64(s2)
    19b8:	0100                	addi	s0,sp,128
    19ba:	1f05                	addi	t5,t5,-31
    19bc:	0200                	addi	s0,sp,256
    19be:	0204                	addi	s1,sp,256
    19c0:	0306                	slli	t1,t1,0x1
    19c2:	0900                	addi	s0,sp,144
    19c4:	0000                	unimp
    19c6:	0501                	addi	a0,a0,0
    19c8:	0020                	addi	s0,sp,8
    19ca:	0402                	c.slli64	s0
    19cc:	0302                	c.slli64	t1
    19ce:	097c                	addi	a5,sp,156
    19d0:	0004                	0x4
    19d2:	0501                	addi	a0,a0,0
    19d4:	0015                	c.nop	5
    19d6:	0402                	c.slli64	s0
    19d8:	0302                	c.slli64	t1
    19da:	0904                	addi	s1,sp,144
    19dc:	0004                	0x4
    19de:	0501                	addi	a0,a0,0
    19e0:	0020                	addi	s0,sp,8
    19e2:	0402                	c.slli64	s0
    19e4:	0602                	c.slli64	a2
    19e6:	04097c03          	0x4097c03
    19ea:	0100                	addi	s0,sp,128
    19ec:	1105                	addi	sp,sp,-31
    19ee:	02091003          	lh	zero,32(s2)
    19f2:	0100                	addi	s0,sp,128
    19f4:	2305                	jal	1f14 <random_keys+0x3d0>
    19f6:	0306                	slli	t1,t1,0x1
    19f8:	0900                	addi	s0,sp,144
    19fa:	0000                	unimp
    19fc:	0501                	addi	a0,a0,0
    19fe:	0319                	addi	t1,t1,6
    1a00:	0900                	addi	s0,sp,144
    1a02:	0002                	c.slli64	zero
    1a04:	0501                	addi	a0,a0,0
    1a06:	7f030613          	addi	a2,t1,2032
    1a0a:	0209                	addi	tp,tp,2
    1a0c:	0100                	addi	s0,sp,128
    1a0e:	1805                	addi	a6,a6,-31
    1a10:	0306                	slli	t1,t1,0x1
    1a12:	0900                	addi	s0,sp,144
    1a14:	0000                	unimp
    1a16:	0501                	addi	a0,a0,0
    1a18:	09000313          	li	t1,144
    1a1c:	0002                	c.slli64	zero
    1a1e:	0501                	addi	a0,a0,0
    1a20:	000d                	c.nop	3
    1a22:	0402                	c.slli64	s0
    1a24:	0602                	c.slli64	a2
    1a26:	04090303          	lb	t1,64(s2)
    1a2a:	0100                	addi	s0,sp,128
    1a2c:	1f05                	addi	t5,t5,-31
    1a2e:	0200                	addi	s0,sp,256
    1a30:	0204                	addi	s1,sp,256
    1a32:	0306                	slli	t1,t1,0x1
    1a34:	0900                	addi	s0,sp,144
    1a36:	0000                	unimp
    1a38:	0501                	addi	a0,a0,0
    1a3a:	0020                	addi	s0,sp,8
    1a3c:	0402                	c.slli64	s0
    1a3e:	0302                	c.slli64	t1
    1a40:	097c                	addi	a5,sp,156
    1a42:	0004                	0x4
    1a44:	0501                	addi	a0,a0,0
    1a46:	0015                	c.nop	5
    1a48:	0402                	c.slli64	s0
    1a4a:	0302                	c.slli64	t1
    1a4c:	0904                	addi	s1,sp,144
    1a4e:	0004                	0x4
    1a50:	0501                	addi	a0,a0,0
    1a52:	0020                	addi	s0,sp,8
    1a54:	0402                	c.slli64	s0
    1a56:	0602                	c.slli64	a2
    1a58:	04097c03          	0x4097c03
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	1105                	addi	sp,sp,-31
    1a60:	02091303          	lh	t1,32(s2)
    1a64:	0100                	addi	s0,sp,128
    1a66:	2305                	jal	1f86 <random_keys+0x442>
    1a68:	0306                	slli	t1,t1,0x1
    1a6a:	0900                	addi	s0,sp,144
    1a6c:	0000                	unimp
    1a6e:	0501                	addi	a0,a0,0
    1a70:	0319                	addi	t1,t1,6
    1a72:	0900                	addi	s0,sp,144
    1a74:	0002                	c.slli64	zero
    1a76:	0501                	addi	a0,a0,0
    1a78:	7f030613          	addi	a2,t1,2032
    1a7c:	0409                	addi	s0,s0,2
    1a7e:	0100                	addi	s0,sp,128
    1a80:	1805                	addi	a6,a6,-31
    1a82:	0306                	slli	t1,t1,0x1
    1a84:	0900                	addi	s0,sp,144
    1a86:	0000                	unimp
    1a88:	0501                	addi	a0,a0,0
    1a8a:	09000313          	li	t1,144
    1a8e:	0004                	0x4
    1a90:	0501                	addi	a0,a0,0
    1a92:	000d                	c.nop	3
    1a94:	0402                	c.slli64	s0
    1a96:	0602                	c.slli64	a2
    1a98:	04090303          	lb	t1,64(s2)
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	1f05                	addi	t5,t5,-31
    1aa0:	0200                	addi	s0,sp,256
    1aa2:	0204                	addi	s1,sp,256
    1aa4:	0306                	slli	t1,t1,0x1
    1aa6:	0900                	addi	s0,sp,144
    1aa8:	0000                	unimp
    1aaa:	0501                	addi	a0,a0,0
    1aac:	0020                	addi	s0,sp,8
    1aae:	0402                	c.slli64	s0
    1ab0:	0302                	c.slli64	t1
    1ab2:	097c                	addi	a5,sp,156
    1ab4:	0004                	0x4
    1ab6:	0501                	addi	a0,a0,0
    1ab8:	0015                	c.nop	5
    1aba:	0402                	c.slli64	s0
    1abc:	0302                	c.slli64	t1
    1abe:	0904                	addi	s1,sp,144
    1ac0:	0004                	0x4
    1ac2:	0501                	addi	a0,a0,0
    1ac4:	0020                	addi	s0,sp,8
    1ac6:	0402                	c.slli64	s0
    1ac8:	0602                	c.slli64	a2
    1aca:	04097c03          	0x4097c03
    1ace:	0100                	addi	s0,sp,128
    1ad0:	0d05                	addi	s10,s10,1
    1ad2:	0200                	addi	s0,sp,256
    1ad4:	0304                	addi	s1,sp,384
    1ad6:	02090903          	lb	s2,32(s2)
    1ada:	0100                	addi	s0,sp,128
    1adc:	1905                	addi	s2,s2,-31
    1ade:	0200                	addi	s0,sp,256
    1ae0:	0304                	addi	s1,sp,384
    1ae2:	0306                	slli	t1,t1,0x1
    1ae4:	0900                	addi	s0,sp,144
    1ae6:	0000                	unimp
    1ae8:	0501                	addi	a0,a0,0
    1aea:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    1aee:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1af2:	000a                	c.slli	zero,0x2
    1af4:	0501                	addi	a0,a0,0
    1af6:	001d                	c.nop	7
    1af8:	0402                	c.slli64	s0
    1afa:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1afe:	0004                	0x4
    1b00:	0501                	addi	a0,a0,0
    1b02:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b06:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b0a:	0004                	0x4
    1b0c:	0501                	addi	a0,a0,0
    1b0e:	0020                	addi	s0,sp,8
    1b10:	0402                	c.slli64	s0
    1b12:	097f0303          	lb	t1,151(t5)
    1b16:	0004                	0x4
    1b18:	0501                	addi	a0,a0,0
    1b1a:	001d                	c.nop	7
    1b1c:	0402                	c.slli64	s0
    1b1e:	09010303          	lb	t1,144(sp)
    1b22:	0002                	c.slli64	zero
    1b24:	0501                	addi	a0,a0,0
    1b26:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b2a:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b2e:	0002                	c.slli64	zero
    1b30:	0501                	addi	a0,a0,0
    1b32:	0020                	addi	s0,sp,8
    1b34:	0402                	c.slli64	s0
    1b36:	7f030603          	lb	a2,2032(t1)
    1b3a:	0209                	addi	tp,tp,2
    1b3c:	0100                	addi	s0,sp,128
    1b3e:	1105                	addi	sp,sp,-31
    1b40:	04090703          	lb	a4,64(s2)
    1b44:	0100                	addi	s0,sp,128
    1b46:	1f05                	addi	t5,t5,-31
    1b48:	0306                	slli	t1,t1,0x1
    1b4a:	0900                	addi	s0,sp,144
    1b4c:	0000                	unimp
    1b4e:	0501                	addi	a0,a0,0
    1b50:	09000317          	auipc	t1,0x9000
    1b54:	0002                	c.slli64	zero
    1b56:	0501                	addi	a0,a0,0
    1b58:	7f030613          	addi	a2,t1,2032 # 9002340 <_stack_start+0x8ff2340>
    1b5c:	0209                	addi	tp,tp,2
    1b5e:	0100                	addi	s0,sp,128
    1b60:	1605                	addi	a2,a2,-31
    1b62:	0306                	slli	t1,t1,0x1
    1b64:	0900                	addi	s0,sp,144
    1b66:	0000                	unimp
    1b68:	0501                	addi	a0,a0,0
    1b6a:	09000313          	li	t1,144
    1b6e:	0002                	c.slli64	zero
    1b70:	0501                	addi	a0,a0,0
    1b72:	000d                	c.nop	3
    1b74:	0402                	c.slli64	s0
    1b76:	0602                	c.slli64	a2
    1b78:	04090303          	lb	t1,64(s2)
    1b7c:	0100                	addi	s0,sp,128
    1b7e:	1b05                	addi	s6,s6,-31
    1b80:	0200                	addi	s0,sp,256
    1b82:	0204                	addi	s1,sp,256
    1b84:	0306                	slli	t1,t1,0x1
    1b86:	0900                	addi	s0,sp,144
    1b88:	0000                	unimp
    1b8a:	0501                	addi	a0,a0,0
    1b8c:	0020                	addi	s0,sp,8
    1b8e:	0402                	c.slli64	s0
    1b90:	0302                	c.slli64	t1
    1b92:	097c                	addi	a5,sp,156
    1b94:	0004                	0x4
    1b96:	0501                	addi	a0,a0,0
    1b98:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1b9c:	0302                	c.slli64	t1
    1b9e:	0904                	addi	s1,sp,144
    1ba0:	0004                	0x4
    1ba2:	0501                	addi	a0,a0,0
    1ba4:	0020                	addi	s0,sp,8
    1ba6:	0402                	c.slli64	s0
    1ba8:	0602                	c.slli64	a2
    1baa:	04097c03          	0x4097c03
    1bae:	0100                	addi	s0,sp,128
    1bb0:	0f05                	addi	t5,t5,1
    1bb2:	0200                	addi	s0,sp,256
    1bb4:	0304                	addi	s1,sp,384
    1bb6:	02091403          	lh	s0,32(s2)
    1bba:	0100                	addi	s0,sp,128
    1bbc:	1705                	addi	a4,a4,-31
    1bbe:	0200                	addi	s0,sp,256
    1bc0:	0304                	addi	s1,sp,384
    1bc2:	0306                	slli	t1,t1,0x1
    1bc4:	0900                	addi	s0,sp,144
    1bc6:	0004                	0x4
    1bc8:	0501                	addi	a0,a0,0
    1bca:	0402001b          	0x402001b
    1bce:	09010303          	lb	t1,144(sp)
    1bd2:	0004                	0x4
    1bd4:	0501                	addi	a0,a0,0
    1bd6:	0016                	c.slli	zero,0x5
    1bd8:	0402                	c.slli64	s0
    1bda:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1bde:	0002                	c.slli64	zero
    1be0:	0501                	addi	a0,a0,0
    1be2:	04020017          	auipc	zero,0x4020
    1be6:	097f0303          	lb	t1,151(t5)
    1bea:	0002                	c.slli64	zero
    1bec:	0501                	addi	a0,a0,0
    1bee:	000d                	c.nop	3
    1bf0:	0402                	c.slli64	s0
    1bf2:	01030603          	lb	a2,16(t1)
    1bf6:	0409                	addi	s0,s0,2
    1bf8:	0100                	addi	s0,sp,128
    1bfa:	2005                	jal	1c1a <random_keys+0xd6>
    1bfc:	0200                	addi	s0,sp,256
    1bfe:	0304                	addi	s1,sp,384
    1c00:	0306                	slli	t1,t1,0x1
    1c02:	097a                	slli	s2,s2,0x1e
    1c04:	0000                	unimp
    1c06:	0501                	addi	a0,a0,0
    1c08:	0016                	c.slli	zero,0x5
    1c0a:	0402                	c.slli64	s0
    1c0c:	09060303          	lb	t1,144(a2)
    1c10:	0002                	c.slli64	zero
    1c12:	0501                	addi	a0,a0,0
    1c14:	0020                	addi	s0,sp,8
    1c16:	0402                	c.slli64	s0
    1c18:	7a030603          	lb	a2,1952(t1)
    1c1c:	0209                	addi	tp,tp,2
    1c1e:	0100                	addi	s0,sp,128
    1c20:	0d05                	addi	s10,s10,1
    1c22:	02090c03          	lb	s8,32(s2)
    1c26:	0100                	addi	s0,sp,128
    1c28:	1b05                	addi	s6,s6,-31
    1c2a:	0306                	slli	t1,t1,0x1
    1c2c:	0900                	addi	s0,sp,144
    1c2e:	0000                	unimp
    1c30:	0501                	addi	a0,a0,0
    1c32:	0320                	addi	s0,sp,392
    1c34:	0900                	addi	s0,sp,144
    1c36:	0008                	0x8
    1c38:	0501                	addi	a0,a0,0
    1c3a:	0310                	addi	a2,sp,384
    1c3c:	0900                	addi	s0,sp,144
    1c3e:	0004                	0x4
    1c40:	0501                	addi	a0,a0,0
    1c42:	001e                	c.slli	zero,0x7
    1c44:	0402                	c.slli64	s0
    1c46:	0602                	c.slli64	a2
    1c48:	04097f03          	0x4097f03
    1c4c:	0100                	addi	s0,sp,128
    1c4e:	0d05                	addi	s10,s10,1
    1c50:	0200                	addi	s0,sp,256
    1c52:	0304                	addi	s1,sp,384
    1c54:	04090d03          	lb	s10,64(s2)
    1c58:	0100                	addi	s0,sp,128
    1c5a:	2005                	jal	1c7a <random_keys+0x136>
    1c5c:	0200                	addi	s0,sp,256
    1c5e:	0304                	addi	s1,sp,384
    1c60:	0306                	slli	t1,t1,0x1
    1c62:	0900                	addi	s0,sp,144
    1c64:	0000                	unimp
    1c66:	0001                	nop
    1c68:	0402                	c.slli64	s0
    1c6a:	097f0303          	lb	t1,151(t5)
    1c6e:	0002                	c.slli64	zero
    1c70:	0001                	nop
    1c72:	0402                	c.slli64	s0
    1c74:	09010303          	lb	t1,144(sp)
    1c78:	0004                	0x4
    1c7a:	0501                	addi	a0,a0,0
    1c7c:	0025                	c.nop	9
    1c7e:	0402                	c.slli64	s0
    1c80:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1c84:	0004                	0x4
    1c86:	0501                	addi	a0,a0,0
    1c88:	0015                	c.nop	5
    1c8a:	0402                	c.slli64	s0
    1c8c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1c90:	0004                	0x4
    1c92:	0501                	addi	a0,a0,0
    1c94:	0020                	addi	s0,sp,8
    1c96:	0402                	c.slli64	s0
    1c98:	7f030603          	lb	a2,2032(t1)
    1c9c:	0409                	addi	s0,s0,2
    1c9e:	0100                	addi	s0,sp,128
    1ca0:	2805                	jal	1cd0 <random_keys+0x18c>
    1ca2:	02090c03          	lb	s8,32(s2)
    1ca6:	0100                	addi	s0,sp,128
    1ca8:	0505                	addi	a0,a0,1
    1caa:	00090203          	lb	tp,0(s2)
    1cae:	0100                	addi	s0,sp,128
    1cb0:	2805                	jal	1ce0 <random_keys+0x19c>
    1cb2:	0306                	slli	t1,t1,0x1
    1cb4:	097e                	slli	s2,s2,0x1f
    1cb6:	0000                	unimp
    1cb8:	0301                	addi	t1,t1,0
    1cba:	0900                	addi	s0,sp,144
    1cbc:	0036                	c.slli	zero,0xd
    1cbe:	0501                	addi	a0,a0,0
    1cc0:	0309                	addi	t1,t1,2
    1cc2:	0902                	c.slli64	s2
    1cc4:	0004                	0x4
    1cc6:	0301                	addi	t1,t1,0
    1cc8:	0901                	addi	s2,s2,0
    1cca:	0010                	0x10
    1ccc:	0301                	addi	t1,t1,0
    1cce:	097f                	0x97f
    1cd0:	000a                	c.slli	zero,0x2
    1cd2:	0501                	addi	a0,a0,0
    1cd4:	0605                	addi	a2,a2,1
    1cd6:	6c090103          	lb	sp,1728(s2)
    1cda:	0100                	addi	s0,sp,128
    1cdc:	1005                	c.nop	-31
    1cde:	0306                	slli	t1,t1,0x1
    1ce0:	0906                	slli	s2,s2,0x1
    1ce2:	0000                	unimp
    1ce4:	0501                	addi	a0,a0,0
    1ce6:	0309                	addi	t1,t1,2
    1ce8:	097a                	slli	s2,s2,0x1e
    1cea:	0004                	0x4
    1cec:	0301                	addi	t1,t1,0
    1cee:	0906                	slli	s2,s2,0x1
    1cf0:	0002                	c.slli64	zero
    1cf2:	0501                	addi	a0,a0,0
    1cf4:	030e                	slli	t1,t1,0x3
    1cf6:	0905                	addi	s2,s2,1
    1cf8:	000e                	c.slli	zero,0x3
    1cfa:	0501                	addi	a0,a0,0
    1cfc:	0309                	addi	t1,t1,2
    1cfe:	0975                	addi	s2,s2,29
    1d00:	000a                	c.slli	zero,0x2
    1d02:	0501                	addi	a0,a0,0
    1d04:	0605                	addi	a2,a2,1
    1d06:	64090203          	lb	tp,1600(s2)
    1d0a:	0100                	addi	s0,sp,128
    1d0c:	00090103          	lb	sp,0(s2)
    1d10:	0100                	addi	s0,sp,128
    1d12:	00090103          	lb	sp,0(s2)
    1d16:	0100                	addi	s0,sp,128
    1d18:	00090103          	lb	sp,0(s2)
    1d1c:	0100                	addi	s0,sp,128
    1d1e:	00090103          	lb	sp,0(s2)
    1d22:	0100                	addi	s0,sp,128
    1d24:	00090103          	lb	sp,0(s2)
    1d28:	0100                	addi	s0,sp,128
    1d2a:	00090103          	lb	sp,0(s2)
    1d2e:	0100                	addi	s0,sp,128
    1d30:	00090303          	lb	t1,0(s2)
    1d34:	0100                	addi	s0,sp,128
    1d36:	00090103          	lb	sp,0(s2)
    1d3a:	0100                	addi	s0,sp,128
    1d3c:	0e05                	addi	t3,t3,1
    1d3e:	0306                	slli	t1,t1,0x1
    1d40:	0900                	addi	s0,sp,144
    1d42:	0000                	unimp
    1d44:	0501                	addi	a0,a0,0
    1d46:	0605                	addi	a2,a2,1
    1d48:	04090203          	lb	tp,64(s2)
    1d4c:	0100                	addi	s0,sp,128
    1d4e:	0b05                	addi	s6,s6,1
    1d50:	0306                	slli	t1,t1,0x1
    1d52:	0900                	addi	s0,sp,144
    1d54:	0000                	unimp
    1d56:	0501                	addi	a0,a0,0
    1d58:	0010                	0x10
    1d5a:	0402                	c.slli64	s0
    1d5c:	0601                	addi	a2,a2,0
    1d5e:	02090003          	lb	zero,32(s2)
    1d62:	0100                	addi	s0,sp,128
    1d64:	0505                	addi	a0,a0,1
    1d66:	0200                	addi	s0,sp,256
    1d68:	0104                	addi	s1,sp,128
    1d6a:	0306                	slli	t1,t1,0x1
    1d6c:	0900                	addi	s0,sp,144
    1d6e:	0000                	unimp
    1d70:	0301                	addi	t1,t1,0
    1d72:	0906                	slli	s2,s2,0x1
    1d74:	0006                	c.slli	zero,0x1
    1d76:	0501                	addi	a0,a0,0
    1d78:	0011                	c.nop	4
    1d7a:	0402                	c.slli64	s0
    1d7c:	0601                	addi	a2,a2,0
    1d7e:	04090003          	lb	zero,64(s2)
    1d82:	0100                	addi	s0,sp,128
    1d84:	0505                	addi	a0,a0,1
    1d86:	0200                	addi	s0,sp,256
    1d88:	0104                	addi	s1,sp,128
    1d8a:	0306                	slli	t1,t1,0x1
    1d8c:	0900                	addi	s0,sp,144
    1d8e:	0000                	unimp
    1d90:	0501                	addi	a0,a0,0
    1d92:	0907030b          	0x907030b
    1d96:	0004                	0x4
    1d98:	0501                	addi	a0,a0,0
    1d9a:	0318                	addi	a4,sp,384
    1d9c:	0901                	addi	s2,s2,0
    1d9e:	0002                	c.slli64	zero
    1da0:	0501                	addi	a0,a0,0
    1da2:	0010                	0x10
    1da4:	0402                	c.slli64	s0
    1da6:	0601                	addi	a2,a2,0
    1da8:	08097f03          	0x8097f03
    1dac:	0100                	addi	s0,sp,128
    1dae:	0505                	addi	a0,a0,1
    1db0:	0200                	addi	s0,sp,256
    1db2:	0104                	addi	s1,sp,128
    1db4:	0306                	slli	t1,t1,0x1
    1db6:	0900                	addi	s0,sp,144
    1db8:	0000                	unimp
    1dba:	0501                	addi	a0,a0,0
    1dbc:	0316                	slli	t1,t1,0x5
    1dbe:	0905                	addi	s2,s2,1
    1dc0:	0008                	0x8
    1dc2:	0501                	addi	a0,a0,0
    1dc4:	0318                	addi	a4,sp,384
    1dc6:	0901                	addi	s2,s2,0
    1dc8:	0008                	0x8
    1dca:	0501                	addi	a0,a0,0
    1dcc:	0010                	0x10
    1dce:	0402                	c.slli64	s0
    1dd0:	0601                	addi	a2,a2,0
    1dd2:	08097f03          	0x8097f03
    1dd6:	0100                	addi	s0,sp,128
    1dd8:	0505                	addi	a0,a0,1
    1dda:	0200                	addi	s0,sp,256
    1ddc:	0104                	addi	s1,sp,128
    1dde:	0306                	slli	t1,t1,0x1
    1de0:	0900                	addi	s0,sp,144
    1de2:	0000                	unimp
    1de4:	0601                	addi	a2,a2,0
    1de6:	04090503          	lb	a0,64(s2)
    1dea:	0100                	addi	s0,sp,128
    1dec:	1a05                	addi	s4,s4,-31
    1dee:	0306                	slli	t1,t1,0x1
    1df0:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1df4:	0501                	addi	a0,a0,0
    1df6:	030a                	slli	t1,t1,0x2
    1df8:	097d                	addi	s2,s2,31
    1dfa:	0006                	c.slli	zero,0x1
    1dfc:	0501                	addi	a0,a0,0
    1dfe:	0605                	addi	a2,a2,1
    1e00:	0c090303          	lb	t1,192(s2)
    1e04:	0100                	addi	s0,sp,128
    1e06:	1805                	addi	a6,a6,-31
    1e08:	0306                	slli	t1,t1,0x1
    1e0a:	0901                	addi	s2,s2,0
    1e0c:	0002                	c.slli64	zero
    1e0e:	0501                	addi	a0,a0,0
    1e10:	0014                	0x14
    1e12:	0402                	c.slli64	s0
    1e14:	0601                	addi	a2,a2,0
    1e16:	08097f03          	0x8097f03
    1e1a:	0100                	addi	s0,sp,128
    1e1c:	0505                	addi	a0,a0,1
    1e1e:	0200                	addi	s0,sp,256
    1e20:	0104                	addi	s1,sp,128
    1e22:	0306                	slli	t1,t1,0x1
    1e24:	0900                	addi	s0,sp,144
    1e26:	0000                	unimp
    1e28:	0601                	addi	a2,a2,0
    1e2a:	04090603          	lb	a2,64(s2)
    1e2e:	0100                	addi	s0,sp,128
    1e30:	0a05                	addi	s4,s4,1
    1e32:	0306                	slli	t1,t1,0x1
    1e34:	0900                	addi	s0,sp,144
    1e36:	0000                	unimp
    1e38:	0501                	addi	a0,a0,0
    1e3a:	0605                	addi	a2,a2,1
    1e3c:	0c090403          	lb	s0,192(s2)
    1e40:	0100                	addi	s0,sp,128
    1e42:	1a05                	addi	s4,s4,-31
    1e44:	0306                	slli	t1,t1,0x1
    1e46:	0900                	addi	s0,sp,144
    1e48:	0006                	c.slli	zero,0x1
    1e4a:	0501                	addi	a0,a0,0
    1e4c:	0318                	addi	a4,sp,384
    1e4e:	0901                	addi	s2,s2,0
    1e50:	0002                	c.slli64	zero
    1e52:	0501                	addi	a0,a0,0
    1e54:	0014                	0x14
    1e56:	0402                	c.slli64	s0
    1e58:	0601                	addi	a2,a2,0
    1e5a:	08097f03          	0x8097f03
    1e5e:	0100                	addi	s0,sp,128
    1e60:	0505                	addi	a0,a0,1
    1e62:	0200                	addi	s0,sp,256
    1e64:	0104                	addi	s1,sp,128
    1e66:	0306                	slli	t1,t1,0x1
    1e68:	0900                	addi	s0,sp,144
    1e6a:	0000                	unimp
    1e6c:	0601                	addi	a2,a2,0
    1e6e:	04090503          	lb	a0,64(s2)
    1e72:	0100                	addi	s0,sp,128
    1e74:	0a05                	addi	s4,s4,1
    1e76:	0306                	slli	t1,t1,0x1
    1e78:	0900                	addi	s0,sp,144
    1e7a:	0000                	unimp
    1e7c:	0501                	addi	a0,a0,0
    1e7e:	0605                	addi	a2,a2,1
    1e80:	0c090303          	lb	t1,192(s2)
    1e84:	0100                	addi	s0,sp,128
    1e86:	0b05                	addi	s6,s6,1
    1e88:	0306                	slli	t1,t1,0x1
    1e8a:	0900                	addi	s0,sp,144
    1e8c:	0002                	c.slli64	zero
    1e8e:	0501                	addi	a0,a0,0
    1e90:	0318                	addi	a4,sp,384
    1e92:	0900                	addi	s0,sp,144
    1e94:	0002                	c.slli64	zero
    1e96:	0501                	addi	a0,a0,0
    1e98:	0010                	0x10
    1e9a:	0402                	c.slli64	s0
    1e9c:	0601                	addi	a2,a2,0
    1e9e:	04090003          	lb	zero,64(s2)
    1ea2:	0100                	addi	s0,sp,128
    1ea4:	0505                	addi	a0,a0,1
    1ea6:	0200                	addi	s0,sp,256
    1ea8:	0104                	addi	s1,sp,128
    1eaa:	0306                	slli	t1,t1,0x1
    1eac:	0900                	addi	s0,sp,144
    1eae:	0000                	unimp
    1eb0:	0601                	addi	a2,a2,0
    1eb2:	04090603          	lb	a2,64(s2)
    1eb6:	0100                	addi	s0,sp,128
    1eb8:	0a05                	addi	s4,s4,1
    1eba:	0306                	slli	t1,t1,0x1
    1ebc:	0900                	addi	s0,sp,144
    1ebe:	0000                	unimp
    1ec0:	0501                	addi	a0,a0,0
    1ec2:	0605                	addi	a2,a2,1
    1ec4:	08090403          	lb	s0,128(s2)
    1ec8:	0100                	addi	s0,sp,128
    1eca:	1a05                	addi	s4,s4,-31
    1ecc:	0306                	slli	t1,t1,0x1
    1ece:	0900                	addi	s0,sp,144
    1ed0:	0000                	unimp
    1ed2:	0501                	addi	a0,a0,0
    1ed4:	0318                	addi	a4,sp,384
    1ed6:	0901                	addi	s2,s2,0
    1ed8:	000a                	c.slli	zero,0x2
    1eda:	0501                	addi	a0,a0,0
    1edc:	0014                	0x14
    1ede:	0402                	c.slli64	s0
    1ee0:	0601                	addi	a2,a2,0
    1ee2:	08097f03          	0x8097f03
    1ee6:	0100                	addi	s0,sp,128
    1ee8:	0505                	addi	a0,a0,1
    1eea:	0200                	addi	s0,sp,256
    1eec:	0104                	addi	s1,sp,128
    1eee:	0306                	slli	t1,t1,0x1
    1ef0:	0900                	addi	s0,sp,144
    1ef2:	0002                	c.slli64	zero
    1ef4:	0501                	addi	a0,a0,0
    1ef6:	031a                	slli	t1,t1,0x6
    1ef8:	0905                	addi	s2,s2,1
    1efa:	0004                	0x4
    1efc:	0501                	addi	a0,a0,0
    1efe:	0318                	addi	a4,sp,384
    1f00:	0901                	addi	s2,s2,0
    1f02:	0004                	0x4
    1f04:	0501                	addi	a0,a0,0
    1f06:	031a                	slli	t1,t1,0x6
    1f08:	097f                	0x97f
    1f0a:	0008                	0x8
    1f0c:	0501                	addi	a0,a0,0
    1f0e:	0014                	0x14
    1f10:	0402                	c.slli64	s0
    1f12:	0601                	addi	a2,a2,0
    1f14:	08090003          	lb	zero,128(s2)
    1f18:	0100                	addi	s0,sp,128
    1f1a:	0505                	addi	a0,a0,1
    1f1c:	0200                	addi	s0,sp,256
    1f1e:	0104                	addi	s1,sp,128
    1f20:	0306                	slli	t1,t1,0x1
    1f22:	0900                	addi	s0,sp,144
    1f24:	0000                	unimp
    1f26:	0601                	addi	a2,a2,0
    1f28:	04090603          	lb	a2,64(s2)
    1f2c:	0100                	addi	s0,sp,128
    1f2e:	00090203          	lb	tp,0(s2)
    1f32:	0100                	addi	s0,sp,128
    1f34:	0105                	addi	sp,sp,1
    1f36:	0306                	slli	t1,t1,0x1
    1f38:	0901                	addi	s2,s2,0
    1f3a:	0000                	unimp
    1f3c:	0501                	addi	a0,a0,0
    1f3e:	0009                	c.nop	2
    1f40:	0402                	c.slli64	s0
    1f42:	bd030603          	lb	a2,-1072(t1)
    1f46:	097f                	0x97f
    1f48:	0040                	addi	s0,sp,4
    1f4a:	0501                	addi	a0,a0,0
    1f4c:	0012                	c.slli	zero,0x4
    1f4e:	0402                	c.slli64	s0
    1f50:	00030603          	lb	a2,0(t1)
    1f54:	0009                	c.nop	2
    1f56:	0100                	addi	s0,sp,128
    1f58:	1705                	addi	a4,a4,-31
    1f5a:	0200                	addi	s0,sp,256
    1f5c:	0304                	addi	s1,sp,384
    1f5e:	0306                	slli	t1,t1,0x1
    1f60:	097f                	0x97f
    1f62:	000a                	c.slli	zero,0x2
    1f64:	0501                	addi	a0,a0,0
    1f66:	0009                	c.nop	2
    1f68:	0402                	c.slli64	s0
    1f6a:	09070303          	lb	t1,144(a4)
    1f6e:	0004                	0x4
    1f70:	0501                	addi	a0,a0,0
    1f72:	000e                	c.slli	zero,0x3
    1f74:	0402                	c.slli64	s0
    1f76:	00030603          	lb	a2,0(t1)
    1f7a:	0409                	addi	s0,s0,2
    1f7c:	0100                	addi	s0,sp,128
    1f7e:	0905                	addi	s2,s2,1
    1f80:	0200                	addi	s0,sp,256
    1f82:	0304                	addi	s1,sp,384
    1f84:	0306                	slli	t1,t1,0x1
    1f86:	0901                	addi	s2,s2,0
    1f88:	000a                	c.slli	zero,0x2
    1f8a:	0501                	addi	a0,a0,0
    1f8c:	000e                	c.slli	zero,0x3
    1f8e:	0402                	c.slli64	s0
    1f90:	00030603          	lb	a2,0(t1)
    1f94:	0009                	c.nop	2
    1f96:	0100                	addi	s0,sp,128
    1f98:	1905                	addi	s2,s2,-31
    1f9a:	0200                	addi	s0,sp,256
    1f9c:	0304                	addi	s1,sp,384
    1f9e:	0306                	slli	t1,t1,0x1
    1fa0:	097e                	slli	s2,s2,0x1f
    1fa2:	000a                	c.slli	zero,0x2
    1fa4:	0501                	addi	a0,a0,0
    1fa6:	0009                	c.nop	2
    1fa8:	0402                	c.slli64	s0
    1faa:	09080303          	lb	t1,144(a6)
    1fae:	0004                	0x4
    1fb0:	0501                	addi	a0,a0,0
    1fb2:	0402001b          	0x402001b
    1fb6:	00030603          	lb	a2,0(t1)
    1fba:	0409                	addi	s0,s0,2
    1fbc:	0100                	addi	s0,sp,128
    1fbe:	1805                	addi	a6,a6,-31
    1fc0:	0200                	addi	s0,sp,256
    1fc2:	0304                	addi	s1,sp,384
    1fc4:	04090003          	lb	zero,64(s2)
    1fc8:	0100                	addi	s0,sp,128
    1fca:	1b05                	addi	s6,s6,-31
    1fcc:	0200                	addi	s0,sp,256
    1fce:	0304                	addi	s1,sp,384
    1fd0:	04090003          	lb	zero,64(s2)
    1fd4:	0100                	addi	s0,sp,128
    1fd6:	1805                	addi	a6,a6,-31
    1fd8:	0200                	addi	s0,sp,256
    1fda:	0304                	addi	s1,sp,384
    1fdc:	02090003          	lb	zero,32(s2)
    1fe0:	0100                	addi	s0,sp,128
    1fe2:	1705                	addi	a4,a4,-31
    1fe4:	0200                	addi	s0,sp,256
    1fe6:	0304                	addi	s1,sp,384
    1fe8:	02097f03          	0x2097f03
    1fec:	0100                	addi	s0,sp,128
    1fee:	1805                	addi	a6,a6,-31
    1ff0:	0200                	addi	s0,sp,256
    1ff2:	0304                	addi	s1,sp,384
    1ff4:	02090103          	lb	sp,32(s2)
    1ff8:	0100                	addi	s0,sp,128
    1ffa:	1705                	addi	a4,a4,-31
    1ffc:	0200                	addi	s0,sp,256
    1ffe:	0304                	addi	s1,sp,384
    2000:	0306                	slli	t1,t1,0x1
    2002:	097f                	0x97f
    2004:	0002                	c.slli64	zero
    2006:	0501                	addi	a0,a0,0
    2008:	0009                	c.nop	2
    200a:	0402                	c.slli64	s0
    200c:	09060303          	lb	t1,144(a2)
    2010:	0002                	c.slli64	zero
    2012:	0501                	addi	a0,a0,0
    2014:	0018                	0x18
    2016:	0402                	c.slli64	s0
    2018:	00030603          	lb	a2,0(t1)
    201c:	0009                	c.nop	2
    201e:	0100                	addi	s0,sp,128
    2020:	1b05                	addi	s6,s6,-31
    2022:	0200                	addi	s0,sp,256
    2024:	0304                	addi	s1,sp,384
    2026:	0306                	slli	t1,t1,0x1
    2028:	097f                	0x97f
    202a:	000a                	c.slli	zero,0x2
    202c:	0501                	addi	a0,a0,0
    202e:	0009                	c.nop	2
    2030:	0402                	c.slli64	s0
    2032:	09090303          	lb	t1,144(s2)
    2036:	0006                	c.slli	zero,0x1
    2038:	0501                	addi	a0,a0,0
    203a:	001c                	0x1c
    203c:	0402                	c.slli64	s0
    203e:	00030603          	lb	a2,0(t1)
    2042:	0009                	c.nop	2
    2044:	0100                	addi	s0,sp,128
    2046:	1805                	addi	a6,a6,-31
    2048:	0200                	addi	s0,sp,256
    204a:	0304                	addi	s1,sp,384
    204c:	02090003          	lb	zero,32(s2)
    2050:	0100                	addi	s0,sp,128
    2052:	1f05                	addi	t5,t5,-31
    2054:	0200                	addi	s0,sp,256
    2056:	0304                	addi	s1,sp,384
    2058:	0306                	slli	t1,t1,0x1
    205a:	097f                	0x97f
    205c:	0008                	0x8
    205e:	0501                	addi	a0,a0,0
    2060:	0009                	c.nop	2
    2062:	0402                	c.slli64	s0
    2064:	090b0303          	lb	t1,144(s6)
    2068:	0006                	c.slli	zero,0x1
    206a:	0501                	addi	a0,a0,0
    206c:	001c                	0x1c
    206e:	0402                	c.slli64	s0
    2070:	00030603          	lb	a2,0(t1)
    2074:	0409                	addi	s0,s0,2
    2076:	0100                	addi	s0,sp,128
    2078:	1805                	addi	a6,a6,-31
    207a:	0200                	addi	s0,sp,256
    207c:	0304                	addi	s1,sp,384
    207e:	08090003          	lb	zero,128(s2)
    2082:	0100                	addi	s0,sp,128
    2084:	1f05                	addi	t5,t5,-31
    2086:	0200                	addi	s0,sp,256
    2088:	0304                	addi	s1,sp,384
    208a:	02097f03          	0x2097f03
    208e:	0100                	addi	s0,sp,128
    2090:	1805                	addi	a6,a6,-31
    2092:	0200                	addi	s0,sp,256
    2094:	0304                	addi	s1,sp,384
    2096:	02090103          	lb	sp,32(s2)
    209a:	0100                	addi	s0,sp,128
    209c:	1f05                	addi	t5,t5,-31
    209e:	0200                	addi	s0,sp,256
    20a0:	0304                	addi	s1,sp,384
    20a2:	0306                	slli	t1,t1,0x1
    20a4:	097f                	0x97f
    20a6:	0002                	c.slli64	zero
    20a8:	0501                	addi	a0,a0,0
    20aa:	0009                	c.nop	2
    20ac:	0402                	c.slli64	s0
    20ae:	09090303          	lb	t1,144(s2)
    20b2:	0002                	c.slli64	zero
    20b4:	0501                	addi	a0,a0,0
    20b6:	0016                	c.slli	zero,0x5
    20b8:	0402                	c.slli64	s0
    20ba:	00030603          	lb	a2,0(t1)
    20be:	0009                	c.nop	2
    20c0:	0100                	addi	s0,sp,128
    20c2:	1d05                	addi	s10,s10,-31
    20c4:	0200                	addi	s0,sp,256
    20c6:	0304                	addi	s1,sp,384
    20c8:	02097f03          	0x2097f03
    20cc:	0100                	addi	s0,sp,128
    20ce:	1605                	addi	a2,a2,-31
    20d0:	0200                	addi	s0,sp,256
    20d2:	0304                	addi	s1,sp,384
    20d4:	04090103          	lb	sp,64(s2)
    20d8:	0100                	addi	s0,sp,128
    20da:	0f05                	addi	t5,t5,1
    20dc:	0200                	addi	s0,sp,256
    20de:	0304                	addi	s1,sp,384
    20e0:	04090003          	lb	zero,64(s2)
    20e4:	0100                	addi	s0,sp,128
    20e6:	1d05                	addi	s10,s10,-31
    20e8:	0200                	addi	s0,sp,256
    20ea:	0304                	addi	s1,sp,384
    20ec:	0306                	slli	t1,t1,0x1
    20ee:	097f                	0x97f
    20f0:	0004                	0x4
    20f2:	0501                	addi	a0,a0,0
    20f4:	0009                	c.nop	2
    20f6:	0402                	c.slli64	s0
    20f8:	090b0303          	lb	t1,144(s6)
    20fc:	0002                	c.slli64	zero
    20fe:	0501                	addi	a0,a0,0
    2100:	001c                	0x1c
    2102:	0402                	c.slli64	s0
    2104:	00030603          	lb	a2,0(t1)
    2108:	0009                	c.nop	2
    210a:	0100                	addi	s0,sp,128
    210c:	1805                	addi	a6,a6,-31
    210e:	0200                	addi	s0,sp,256
    2110:	0304                	addi	s1,sp,384
    2112:	04090003          	lb	zero,64(s2)
    2116:	0100                	addi	s0,sp,128
    2118:	1f05                	addi	t5,t5,-31
    211a:	0200                	addi	s0,sp,256
    211c:	0304                	addi	s1,sp,384
    211e:	0306                	slli	t1,t1,0x1
    2120:	097f                	0x97f
    2122:	0008                	0x8
    2124:	0501                	addi	a0,a0,0
    2126:	0009                	c.nop	2
    2128:	0402                	c.slli64	s0
    212a:	09060303          	lb	t1,144(a2)
    212e:	0004                	0x4
    2130:	0501                	addi	a0,a0,0
    2132:	0018                	0x18
    2134:	0402                	c.slli64	s0
    2136:	00030603          	lb	a2,0(t1)
    213a:	0409                	addi	s0,s0,2
    213c:	0100                	addi	s0,sp,128
    213e:	1f05                	addi	t5,t5,-31
    2140:	0200                	addi	s0,sp,256
    2142:	0304                	addi	s1,sp,384
    2144:	04090003          	lb	zero,64(s2)
    2148:	0100                	addi	s0,sp,128
    214a:	1805                	addi	a6,a6,-31
    214c:	0200                	addi	s0,sp,256
    214e:	0304                	addi	s1,sp,384
    2150:	04090003          	lb	zero,64(s2)
    2154:	0100                	addi	s0,sp,128
    2156:	2105                	jal	2576 <_bss_end+0x53a>
    2158:	0200                	addi	s0,sp,256
    215a:	0304                	addi	s1,sp,384
    215c:	02097f03          	0x2097f03
    2160:	0100                	addi	s0,sp,128
    2162:	1805                	addi	a6,a6,-31
    2164:	0200                	addi	s0,sp,256
    2166:	0304                	addi	s1,sp,384
    2168:	02090103          	lb	sp,32(s2)
    216c:	0100                	addi	s0,sp,128
    216e:	2105                	jal	258e <_bss_end+0x552>
    2170:	0200                	addi	s0,sp,256
    2172:	0304                	addi	s1,sp,384
    2174:	0306                	slli	t1,t1,0x1
    2176:	097f                	0x97f
    2178:	0002                	c.slli64	zero
    217a:	0501                	addi	a0,a0,0
    217c:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    2180:	0002                	c.slli64	zero
    2182:	0501                	addi	a0,a0,0
    2184:	0305                	addi	t1,t1,1
    2186:	0902                	c.slli64	s2
    2188:	0000                	unimp
    218a:	0301                	addi	t1,t1,0
    218c:	0901                	addi	s2,s2,0
    218e:	0000                	unimp
    2190:	0301                	addi	t1,t1,0
    2192:	0902                	c.slli64	s2
    2194:	0000                	unimp
    2196:	0501                	addi	a0,a0,0
    2198:	7b03064b          	fnmsub.d	fa2,ft6,fa6,fa5,rne
    219c:	0009                	c.nop	2
    219e:	0100                	addi	s0,sp,128
    21a0:	0905                	addi	s2,s2,1
    21a2:	0e090503          	lb	a0,224(s2)
    21a6:	0100                	addi	s0,sp,128
    21a8:	4b05                	li	s6,1
    21aa:	0e097b03          	0xe097b03
    21ae:	0100                	addi	s0,sp,128
    21b0:	06090003          	lb	zero,96(s2)
    21b4:	0100                	addi	s0,sp,128
    21b6:	0905                	addi	s2,s2,1
    21b8:	04090503          	lb	a0,64(s2)
    21bc:	0100                	addi	s0,sp,128
    21be:	0505                	addi	a0,a0,1
    21c0:	0306                	slli	t1,t1,0x1
    21c2:	0901                	addi	s2,s2,0
    21c4:	0002                	c.slli64	zero
    21c6:	0301                	addi	t1,t1,0
    21c8:	0901                	addi	s2,s2,0
    21ca:	0000                	unimp
    21cc:	0301                	addi	t1,t1,0
    21ce:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    21d2:	0501                	addi	a0,a0,0
    21d4:	060c                	addi	a1,sp,768
    21d6:	00090003          	lb	zero,0(s2)
    21da:	0100                	addi	s0,sp,128
    21dc:	0505                	addi	a0,a0,1
    21de:	0306                	slli	t1,t1,0x1
    21e0:	0904                	addi	s1,sp,144
    21e2:	0012                	c.slli	zero,0x4
    21e4:	0501                	addi	a0,a0,0
    21e6:	0310                	addi	a2,sp,384
    21e8:	0900                	addi	s0,sp,144
    21ea:	0000                	unimp
    21ec:	0501                	addi	a0,a0,0
    21ee:	060c                	addi	a1,sp,768
    21f0:	00097c03          	0x97c03
    21f4:	0100                	addi	s0,sp,128
    21f6:	0505                	addi	a0,a0,1
    21f8:	02090403          	lb	s0,32(s2)
    21fc:	0100                	addi	s0,sp,128
    21fe:	0905                	addi	s2,s2,1
    2200:	0200                	addi	s0,sp,256
    2202:	0304                	addi	s1,sp,384
    2204:	0306                	slli	t1,t1,0x1
    2206:	0901                	addi	s2,s2,0
    2208:	0004                	0x4
    220a:	0501                	addi	a0,a0,0
    220c:	0024                	addi	s1,sp,8
    220e:	0402                	c.slli64	s0
    2210:	00030603          	lb	a2,0(t1)
    2214:	0409                	addi	s0,s0,2
    2216:	0100                	addi	s0,sp,128
    2218:	1b05                	addi	s6,s6,-31
    221a:	0200                	addi	s0,sp,256
    221c:	0304                	addi	s1,sp,384
    221e:	04090003          	lb	zero,64(s2)
    2222:	0100                	addi	s0,sp,128
    2224:	1105                	addi	sp,sp,-31
    2226:	0200                	addi	s0,sp,256
    2228:	0304                	addi	s1,sp,384
    222a:	08090003          	lb	zero,128(s2)
    222e:	0100                	addi	s0,sp,128
    2230:	1805                	addi	a6,a6,-31
    2232:	0200                	addi	s0,sp,256
    2234:	0304                	addi	s1,sp,384
    2236:	0306                	slli	t1,t1,0x1
    2238:	097f                	0x97f
    223a:	0002                	c.slli64	zero
    223c:	0501                	addi	a0,a0,0
    223e:	0010                	0x10
    2240:	0402                	c.slli64	s0
    2242:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2246:	0000                	unimp
    2248:	0501                	addi	a0,a0,0
    224a:	0005                	c.nop	1
    224c:	0402                	c.slli64	s0
    224e:	00030603          	lb	a2,0(t1)
    2252:	0009                	c.nop	2
    2254:	0100                	addi	s0,sp,128
    2256:	0306                	slli	t1,t1,0x1
    2258:	0906                	slli	s2,s2,0x1
    225a:	0004                	0x4
    225c:	0501                	addi	a0,a0,0
    225e:	060a                	slli	a2,a2,0x2
    2260:	00090003          	lb	zero,0(s2)
    2264:	0100                	addi	s0,sp,128
    2266:	0505                	addi	a0,a0,1
    2268:	0306                	slli	t1,t1,0x1
    226a:	0902                	c.slli64	s2
    226c:	0012                	c.slli	zero,0x4
    226e:	0501                	addi	a0,a0,0
    2270:	061a                	slli	a2,a2,0x6
    2272:	00090003          	lb	zero,0(s2)
    2276:	0100                	addi	s0,sp,128
    2278:	1405                	addi	s0,s0,-31
    227a:	0200                	addi	s0,sp,256
    227c:	0104                	addi	s1,sp,128
    227e:	0306                	slli	t1,t1,0x1
    2280:	0900                	addi	s0,sp,144
    2282:	0008                	0x8
    2284:	0501                	addi	a0,a0,0
    2286:	0005                	c.nop	1
    2288:	0402                	c.slli64	s0
    228a:	0601                	addi	a2,a2,0
    228c:	00090003          	lb	zero,0(s2)
    2290:	0100                	addi	s0,sp,128
    2292:	0105                	addi	sp,sp,1
    2294:	04090903          	lb	s2,64(s2)
    2298:	0100                	addi	s0,sp,128
    229a:	0905                	addi	s2,s2,1
    229c:	0200                	addi	s0,sp,256
    229e:	0304                	addi	s1,sp,384
    22a0:	0306                	slli	t1,t1,0x1
    22a2:	0978                	addi	a4,sp,156
    22a4:	0010                	0x10
    22a6:	0501                	addi	a0,a0,0
    22a8:	0019                	c.nop	6
    22aa:	0402                	c.slli64	s0
    22ac:	00030603          	lb	a2,0(t1)
    22b0:	0009                	c.nop	2
    22b2:	0100                	addi	s0,sp,128
    22b4:	1f05                	addi	t5,t5,-31
    22b6:	0200                	addi	s0,sp,256
    22b8:	0304                	addi	s1,sp,384
    22ba:	08097f03          	0x8097f03
    22be:	0100                	addi	s0,sp,128
    22c0:	1505                	addi	a0,a0,-31
    22c2:	0200                	addi	s0,sp,256
    22c4:	0304                	addi	s1,sp,384
    22c6:	04090103          	lb	sp,64(s2)
    22ca:	0100                	addi	s0,sp,128
    22cc:	1f05                	addi	t5,t5,-31
    22ce:	0200                	addi	s0,sp,256
    22d0:	0304                	addi	s1,sp,384
    22d2:	0306                	slli	t1,t1,0x1
    22d4:	097f                	0x97f
    22d6:	0004                	0x4
    22d8:	0501                	addi	a0,a0,0
    22da:	036c                	addi	a1,sp,396
    22dc:	090c                	addi	a1,sp,144
    22de:	0002                	c.slli64	zero
    22e0:	0501                	addi	a0,a0,0
    22e2:	0305                	addi	t1,t1,1
    22e4:	0902                	c.slli64	s2
    22e6:	0000                	unimp
    22e8:	0301                	addi	t1,t1,0
    22ea:	0901                	addi	s2,s2,0
    22ec:	0000                	unimp
    22ee:	0301                	addi	t1,t1,0
    22f0:	0901                	addi	s2,s2,0
    22f2:	0000                	unimp
    22f4:	0301                	addi	t1,t1,0
    22f6:	0901                	addi	s2,s2,0
    22f8:	0000                	unimp
    22fa:	0301                	addi	t1,t1,0
    22fc:	0901                	addi	s2,s2,0
    22fe:	0000                	unimp
    2300:	0301                	addi	t1,t1,0
    2302:	0901                	addi	s2,s2,0
    2304:	0000                	unimp
    2306:	0301                	addi	t1,t1,0
    2308:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    230c:	0501                	addi	a0,a0,0
    230e:	066c                	addi	a1,sp,780
    2310:	00097603          	0x97603
    2314:	0100                	addi	s0,sp,128
    2316:	1e05                	addi	t3,t3,-31
    2318:	08091103          	lh	sp,128(s2)
    231c:	0100                	addi	s0,sp,128
    231e:	6c05                	lui	s8,0x1
    2320:	06096f03          	0x6096f03
    2324:	0100                	addi	s0,sp,128
    2326:	0905                	addi	s2,s2,1
    2328:	0a090a03          	lb	s4,160(s2)
    232c:	0100                	addi	s0,sp,128
    232e:	6c05                	lui	s8,0x1
    2330:	04097603          	0x4097603
    2334:	0100                	addi	s0,sp,128
    2336:	0905                	addi	s2,s2,1
    2338:	04090a03          	lb	s4,64(s2)
    233c:	0100                	addi	s0,sp,128
    233e:	6c05                	lui	s8,0x1
    2340:	04097603          	0x4097603
    2344:	0100                	addi	s0,sp,128
    2346:	08090003          	lb	zero,128(s2)
    234a:	0100                	addi	s0,sp,128
    234c:	0a05                	addi	s4,s4,1
    234e:	02090e03          	lb	t3,32(s2)
    2352:	0100                	addi	s0,sp,128
    2354:	0905                	addi	s2,s2,1
    2356:	04097c03          	0x4097c03
    235a:	0100                	addi	s0,sp,128
    235c:	0505                	addi	a0,a0,1
    235e:	0306                	slli	t1,t1,0x1
    2360:	0904                	addi	s1,sp,144
    2362:	0004                	0x4
    2364:	0501                	addi	a0,a0,0
    2366:	060a                	slli	a2,a2,0x2
    2368:	00090003          	lb	zero,0(s2)
    236c:	0100                	addi	s0,sp,128
    236e:	0505                	addi	a0,a0,1
    2370:	0306                	slli	t1,t1,0x1
    2372:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    2376:	0501                	addi	a0,a0,0
    2378:	0003060b          	0x3060b
    237c:	0409                	addi	s0,s0,2
    237e:	0100                	addi	s0,sp,128
    2380:	1405                	addi	s0,s0,-31
    2382:	0200                	addi	s0,sp,256
    2384:	0104                	addi	s1,sp,128
    2386:	0306                	slli	t1,t1,0x1
    2388:	0900                	addi	s0,sp,144
    238a:	0002                	c.slli64	zero
    238c:	0501                	addi	a0,a0,0
    238e:	0005                	c.nop	1
    2390:	0402                	c.slli64	s0
    2392:	0601                	addi	a2,a2,0
    2394:	00090003          	lb	zero,0(s2)
    2398:	0100                	addi	s0,sp,128
    239a:	1605                	addi	a2,a2,-31
    239c:	04090603          	lb	a2,64(s2)
    23a0:	0100                	addi	s0,sp,128
    23a2:	0c05                	addi	s8,s8,1
    23a4:	06097f03          	0x6097f03
    23a8:	0100                	addi	s0,sp,128
    23aa:	1105                	addi	sp,sp,-31
    23ac:	0200                	addi	s0,sp,256
    23ae:	0104                	addi	s1,sp,128
    23b0:	0306                	slli	t1,t1,0x1
    23b2:	0900                	addi	s0,sp,144
    23b4:	0002                	c.slli64	zero
    23b6:	0501                	addi	a0,a0,0
    23b8:	0005                	c.nop	1
    23ba:	0402                	c.slli64	s0
    23bc:	0601                	addi	a2,a2,0
    23be:	00090003          	lb	zero,0(s2)
    23c2:	0100                	addi	s0,sp,128
    23c4:	0306                	slli	t1,t1,0x1
    23c6:	0908                	addi	a0,sp,144
    23c8:	0004                	0x4
    23ca:	0501                	addi	a0,a0,0
    23cc:	0609                	addi	a2,a2,2
    23ce:	00090003          	lb	zero,0(s2)
    23d2:	0100                	addi	s0,sp,128
    23d4:	0505                	addi	a0,a0,1
    23d6:	0306                	slli	t1,t1,0x1
    23d8:	0904                	addi	s1,sp,144
    23da:	000c                	0xc
    23dc:	0501                	addi	a0,a0,0
    23de:	060a                	slli	a2,a2,0x2
    23e0:	00090003          	lb	zero,0(s2)
    23e4:	0100                	addi	s0,sp,128
    23e6:	0505                	addi	a0,a0,1
    23e8:	0306                	slli	t1,t1,0x1
    23ea:	0901                	addi	s2,s2,0
    23ec:	000c                	0xc
    23ee:	0501                	addi	a0,a0,0
    23f0:	0014                	0x14
    23f2:	0402                	c.slli64	s0
    23f4:	0301                	addi	t1,t1,0
    23f6:	0900                	addi	s0,sp,144
    23f8:	0002                	c.slli64	zero
    23fa:	0501                	addi	a0,a0,0
    23fc:	0005                	c.nop	1
    23fe:	0402                	c.slli64	s0
    2400:	0601                	addi	a2,a2,0
    2402:	00090003          	lb	zero,0(s2)
    2406:	0100                	addi	s0,sp,128
    2408:	0105                	addi	sp,sp,1
    240a:	04090703          	lb	a4,64(s2)
    240e:	0100                	addi	s0,sp,128
    2410:	0905                	addi	s2,s2,1
    2412:	0200                	addi	s0,sp,256
    2414:	0304                	addi	s1,sp,384
    2416:	0306                	slli	t1,t1,0x1
    2418:	0968                	addi	a0,sp,156
    241a:	0016                	c.slli	zero,0x5
    241c:	0501                	addi	a0,a0,0
    241e:	0019                	c.nop	6
    2420:	0402                	c.slli64	s0
    2422:	00030603          	lb	a2,0(t1)
    2426:	0009                	c.nop	2
    2428:	0100                	addi	s0,sp,128
    242a:	2305                	jal	294a <_bss_end+0x90e>
    242c:	0200                	addi	s0,sp,256
    242e:	0304                	addi	s1,sp,384
    2430:	08097f03          	0x8097f03
    2434:	0100                	addi	s0,sp,128
    2436:	1505                	addi	a0,a0,-31
    2438:	0200                	addi	s0,sp,256
    243a:	0304                	addi	s1,sp,384
    243c:	04090103          	lb	sp,64(s2)
    2440:	0100                	addi	s0,sp,128
    2442:	2305                	jal	2962 <_bss_end+0x926>
    2444:	0200                	addi	s0,sp,256
    2446:	0304                	addi	s1,sp,384
    2448:	0306                	slli	t1,t1,0x1
    244a:	097f                	0x97f
    244c:	0004                	0x4
    244e:	0501                	addi	a0,a0,0
    2450:	0309                	addi	t1,t1,2
    2452:	0906                	slli	s2,s2,0x1
    2454:	0002                	c.slli64	zero
    2456:	0501                	addi	a0,a0,0
    2458:	060e                	slli	a2,a2,0x3
    245a:	00090003          	lb	zero,0(s2)
    245e:	0100                	addi	s0,sp,128
    2460:	0b05                	addi	s6,s6,1
    2462:	02090003          	lb	zero,32(s2)
    2466:	0100                	addi	s0,sp,128
    2468:	0d05                	addi	s10,s10,1
    246a:	0306                	slli	t1,t1,0x1
    246c:	00040903          	lb	s2,0(s0)
    2470:	0501                	addi	a0,a0,0
    2472:	0619                	addi	a2,a2,6
    2474:	00090003          	lb	zero,0(s2)
    2478:	0100                	addi	s0,sp,128
    247a:	1305                	addi	t1,t1,-31
    247c:	04090003          	lb	zero,64(s2)
    2480:	0100                	addi	s0,sp,128
    2482:	1805                	addi	a6,a6,-31
    2484:	0200                	addi	s0,sp,256
    2486:	0204                	addi	s1,sp,256
    2488:	0306                	slli	t1,t1,0x1
    248a:	097c                	addi	a5,sp,156
    248c:	0002                	c.slli64	zero
    248e:	0501                	addi	a0,a0,0
    2490:	0009                	c.nop	2
    2492:	0402                	c.slli64	s0
    2494:	090e0303          	lb	t1,144(t3)
    2498:	0006                	c.slli	zero,0x1
    249a:	0501                	addi	a0,a0,0
    249c:	0019                	c.nop	6
    249e:	0402                	c.slli64	s0
    24a0:	00030603          	lb	a2,0(t1)
    24a4:	0009                	c.nop	2
    24a6:	0100                	addi	s0,sp,128
    24a8:	2305                	jal	29c8 <_bss_end+0x98c>
    24aa:	0200                	addi	s0,sp,256
    24ac:	0304                	addi	s1,sp,384
    24ae:	08097f03          	0x8097f03
    24b2:	0100                	addi	s0,sp,128
    24b4:	1505                	addi	a0,a0,-31
    24b6:	0200                	addi	s0,sp,256
    24b8:	0304                	addi	s1,sp,384
    24ba:	04090103          	lb	sp,64(s2)
    24be:	0100                	addi	s0,sp,128
    24c0:	2305                	jal	29e0 <_bss_end+0x9a4>
    24c2:	0200                	addi	s0,sp,256
    24c4:	0304                	addi	s1,sp,384
    24c6:	0306                	slli	t1,t1,0x1
    24c8:	097f                	0x97f
    24ca:	0004                	0x4
    24cc:	0901                	addi	s2,s2,0
    24ce:	0002                	c.slli64	zero
    24d0:	0100                	addi	s0,sp,128
    24d2:	0501                	addi	a0,a0,0
    24d4:	0205000b          	0x205000b
    24d8:	0fde                	slli	t6,t6,0x17
    24da:	0000                	unimp
    24dc:	0105a703          	lw	a4,16(a1) # 10 <__DYNAMIC+0x10>
    24e0:	0505                	addi	a0,a0,1
    24e2:	00090103          	lb	sp,0(s2)
    24e6:	0100                	addi	s0,sp,128
    24e8:	00090103          	lb	sp,0(s2)
    24ec:	0100                	addi	s0,sp,128
    24ee:	00090103          	lb	sp,0(s2)
    24f2:	0100                	addi	s0,sp,128
    24f4:	00090103          	lb	sp,0(s2)
    24f8:	0100                	addi	s0,sp,128
    24fa:	00090103          	lb	sp,0(s2)
    24fe:	0100                	addi	s0,sp,128
    2500:	00090103          	lb	sp,0(s2)
    2504:	0100                	addi	s0,sp,128
    2506:	00090203          	lb	tp,0(s2)
    250a:	0100                	addi	s0,sp,128
    250c:	0b05                	addi	s6,s6,1
    250e:	0306                	slli	t1,t1,0x1
    2510:	0978                	addi	a4,sp,156
    2512:	0000                	unimp
    2514:	0501                	addi	a0,a0,0
    2516:	0309                	addi	t1,t1,2
    2518:	0908                	addi	a0,sp,144
    251a:	0004                	0x4
    251c:	0501                	addi	a0,a0,0
    251e:	0978030b          	0x978030b
    2522:	000e                	c.slli	zero,0x3
    2524:	0501                	addi	a0,a0,0
    2526:	0312                	slli	t1,t1,0x4
    2528:	0918                	addi	a4,sp,144
    252a:	0010                	0x10
    252c:	0501                	addi	a0,a0,0
    252e:	0309                	addi	t1,t1,2
    2530:	0970                	addi	a2,sp,156
    2532:	0004                	0x4
    2534:	0501                	addi	a0,a0,0
    2536:	0605                	addi	a2,a2,1
    2538:	02090103          	lb	sp,32(s2)
    253c:	0100                	addi	s0,sp,128
    253e:	00090103          	lb	sp,0(s2)
    2542:	0100                	addi	s0,sp,128
    2544:	00090103          	lb	sp,0(s2)
    2548:	0100                	addi	s0,sp,128
    254a:	00090103          	lb	sp,0(s2)
    254e:	0100                	addi	s0,sp,128
    2550:	00090103          	lb	sp,0(s2)
    2554:	0100                	addi	s0,sp,128
    2556:	00090103          	lb	sp,0(s2)
    255a:	0100                	addi	s0,sp,128
    255c:	00090103          	lb	sp,0(s2)
    2560:	0100                	addi	s0,sp,128
    2562:	00090903          	lb	s2,0(s2)
    2566:	0100                	addi	s0,sp,128
    2568:	1205                	addi	tp,tp,-31
    256a:	0306                	slli	t1,t1,0x1
    256c:	0900                	addi	s0,sp,144
    256e:	0000                	unimp
    2570:	0501                	addi	a0,a0,0
    2572:	030c                	addi	a1,sp,384
    2574:	0901                	addi	s2,s2,0
    2576:	000c                	0xc
    2578:	0501                	addi	a0,a0,0
    257a:	0312                	slli	t1,t1,0x4
    257c:	097f                	0x97f
    257e:	000a                	c.slli	zero,0x2
    2580:	0501                	addi	a0,a0,0
    2582:	0605                	addi	a2,a2,1
    2584:	02090103          	lb	sp,32(s2)
    2588:	0100                	addi	s0,sp,128
    258a:	1205                	addi	tp,tp,-31
    258c:	0306                	slli	t1,t1,0x1
    258e:	0901                	addi	s2,s2,0
    2590:	0000                	unimp
    2592:	0501                	addi	a0,a0,0
    2594:	030c                	addi	a1,sp,384
    2596:	097f                	0x97f
    2598:	0004                	0x4
    259a:	0501                	addi	a0,a0,0
    259c:	0605                	addi	a2,a2,1
    259e:	02090103          	lb	sp,32(s2)
    25a2:	0100                	addi	s0,sp,128
    25a4:	1205                	addi	tp,tp,-31
    25a6:	0306                	slli	t1,t1,0x1
    25a8:	0900                	addi	s0,sp,144
    25aa:	0000                	unimp
    25ac:	0501                	addi	a0,a0,0
    25ae:	0605                	addi	a2,a2,1
    25b0:	04090203          	lb	tp,64(s2)
    25b4:	0100                	addi	s0,sp,128
    25b6:	1005                	c.nop	-31
    25b8:	00090003          	lb	zero,0(s2)
    25bc:	0100                	addi	s0,sp,128
    25be:	0505                	addi	a0,a0,1
    25c0:	0306                	slli	t1,t1,0x1
    25c2:	0900                	addi	s0,sp,144
    25c4:	0000                	unimp
    25c6:	0501                	addi	a0,a0,0
    25c8:	0009                	c.nop	2
    25ca:	0402                	c.slli64	s0
    25cc:	02030603          	lb	a2,32(t1)
    25d0:	0409                	addi	s0,s0,2
    25d2:	0100                	addi	s0,sp,128
    25d4:	1f05                	addi	t5,t5,-31
    25d6:	0200                	addi	s0,sp,256
    25d8:	0304                	addi	s1,sp,384
    25da:	0306                	slli	t1,t1,0x1
    25dc:	0900                	addi	s0,sp,144
    25de:	0000                	unimp
    25e0:	0501                	addi	a0,a0,0
    25e2:	0019                	c.nop	6
    25e4:	0402                	c.slli64	s0
    25e6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    25ea:	0006                	c.slli	zero,0x1
    25ec:	0501                	addi	a0,a0,0
    25ee:	04020017          	auipc	zero,0x4020
    25f2:	7e030603          	lb	a2,2016(t1)
    25f6:	0609                	addi	a2,a2,2
    25f8:	0100                	addi	s0,sp,128
    25fa:	1005                	c.nop	-31
    25fc:	0200                	addi	s0,sp,256
    25fe:	0304                	addi	s1,sp,384
    2600:	00090003          	lb	zero,0(s2)
    2604:	0100                	addi	s0,sp,128
    2606:	0505                	addi	a0,a0,1
    2608:	0200                	addi	s0,sp,256
    260a:	0304                	addi	s1,sp,384
    260c:	0306                	slli	t1,t1,0x1
    260e:	0900                	addi	s0,sp,144
    2610:	0002                	c.slli64	zero
    2612:	0501                	addi	a0,a0,0
    2614:	0009                	c.nop	2
    2616:	0402                	c.slli64	s0
    2618:	09030603          	lb	a2,144(t1)
    261c:	0409                	addi	s0,s0,2
    261e:	0100                	addi	s0,sp,128
    2620:	1b05                	addi	s6,s6,-31
    2622:	0200                	addi	s0,sp,256
    2624:	0304                	addi	s1,sp,384
    2626:	00097e03          	0x97e03
    262a:	0100                	addi	s0,sp,128
    262c:	1005                	c.nop	-31
    262e:	0200                	addi	s0,sp,256
    2630:	0304                	addi	s1,sp,384
    2632:	00090003          	lb	zero,0(s2)
    2636:	0100                	addi	s0,sp,128
    2638:	0905                	addi	s2,s2,1
    263a:	0200                	addi	s0,sp,256
    263c:	0304                	addi	s1,sp,384
    263e:	0c090903          	lb	s2,192(s2)
    2642:	0100                	addi	s0,sp,128
    2644:	2605                	jal	2964 <_bss_end+0x928>
    2646:	0200                	addi	s0,sp,256
    2648:	0304                	addi	s1,sp,384
    264a:	0306                	slli	t1,t1,0x1
    264c:	0900                	addi	s0,sp,144
    264e:	0000                	unimp
    2650:	0501                	addi	a0,a0,0
    2652:	0020                	addi	s0,sp,8
    2654:	0402                	c.slli64	s0
    2656:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    265a:	0006                	c.slli	zero,0x1
    265c:	0501                	addi	a0,a0,0
    265e:	001f 0402 0603      	0x6030402001f
    2664:	04097e03          	0x4097e03
    2668:	0100                	addi	s0,sp,128
    266a:	1405                	addi	s0,s0,-31
    266c:	0200                	addi	s0,sp,256
    266e:	0304                	addi	s1,sp,384
    2670:	00090003          	lb	zero,0(s2)
    2674:	0100                	addi	s0,sp,128
    2676:	0505                	addi	a0,a0,1
    2678:	0200                	addi	s0,sp,256
    267a:	0304                	addi	s1,sp,384
    267c:	0306                	slli	t1,t1,0x1
    267e:	0900                	addi	s0,sp,144
    2680:	0000                	unimp
    2682:	0501                	addi	a0,a0,0
    2684:	0009                	c.nop	2
    2686:	0402                	c.slli64	s0
    2688:	09030603          	lb	a2,144(t1)
    268c:	0409                	addi	s0,s0,2
    268e:	0100                	addi	s0,sp,128
    2690:	1f05                	addi	t5,t5,-31
    2692:	0200                	addi	s0,sp,256
    2694:	0304                	addi	s1,sp,384
    2696:	00097e03          	0x97e03
    269a:	0100                	addi	s0,sp,128
    269c:	1405                	addi	s0,s0,-31
    269e:	0200                	addi	s0,sp,256
    26a0:	0304                	addi	s1,sp,384
    26a2:	00090003          	lb	zero,0(s2)
    26a6:	0100                	addi	s0,sp,128
    26a8:	0905                	addi	s2,s2,1
    26aa:	0200                	addi	s0,sp,256
    26ac:	0304                	addi	s1,sp,384
    26ae:	0c090903          	lb	s2,192(s2)
    26b2:	0100                	addi	s0,sp,128
    26b4:	2305                	jal	2bd4 <_bss_end+0xb98>
    26b6:	0200                	addi	s0,sp,256
    26b8:	0304                	addi	s1,sp,384
    26ba:	0306                	slli	t1,t1,0x1
    26bc:	0900                	addi	s0,sp,144
    26be:	0000                	unimp
    26c0:	0501                	addi	a0,a0,0
    26c2:	001d                	c.nop	7
    26c4:	0402                	c.slli64	s0
    26c6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    26ca:	0006                	c.slli	zero,0x1
    26cc:	0501                	addi	a0,a0,0
    26ce:	001f 0402 0603      	0x6030402001f
    26d4:	04097e03          	0x4097e03
    26d8:	0100                	addi	s0,sp,128
    26da:	1405                	addi	s0,s0,-31
    26dc:	0200                	addi	s0,sp,256
    26de:	0304                	addi	s1,sp,384
    26e0:	00090003          	lb	zero,0(s2)
    26e4:	0100                	addi	s0,sp,128
    26e6:	0505                	addi	a0,a0,1
    26e8:	0200                	addi	s0,sp,256
    26ea:	0304                	addi	s1,sp,384
    26ec:	0306                	slli	t1,t1,0x1
    26ee:	0900                	addi	s0,sp,144
    26f0:	0000                	unimp
    26f2:	0501                	addi	a0,a0,0
    26f4:	0009                	c.nop	2
    26f6:	0402                	c.slli64	s0
    26f8:	09030603          	lb	a2,144(t1)
    26fc:	0c09                	addi	s8,s8,2
    26fe:	0100                	addi	s0,sp,128
    2700:	2205                	jal	2820 <_bss_end+0x7e4>
    2702:	0200                	addi	s0,sp,256
    2704:	0304                	addi	s1,sp,384
    2706:	0306                	slli	t1,t1,0x1
    2708:	0900                	addi	s0,sp,144
    270a:	0000                	unimp
    270c:	0501                	addi	a0,a0,0
    270e:	001c                	0x1c
    2710:	0402                	c.slli64	s0
    2712:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2716:	0006                	c.slli	zero,0x1
    2718:	0501                	addi	a0,a0,0
    271a:	0021                	c.nop	8
    271c:	0402                	c.slli64	s0
    271e:	7e030603          	lb	a2,2016(t1)
    2722:	0409                	addi	s0,s0,2
    2724:	0100                	addi	s0,sp,128
    2726:	1405                	addi	s0,s0,-31
    2728:	0200                	addi	s0,sp,256
    272a:	0304                	addi	s1,sp,384
    272c:	00090003          	lb	zero,0(s2)
    2730:	0100                	addi	s0,sp,128
    2732:	0505                	addi	a0,a0,1
    2734:	0200                	addi	s0,sp,256
    2736:	0304                	addi	s1,sp,384
    2738:	0306                	slli	t1,t1,0x1
    273a:	0900                	addi	s0,sp,144
    273c:	0000                	unimp
    273e:	0601                	addi	a2,a2,0
    2740:	04090803          	lb	a6,64(s2)
    2744:	0100                	addi	s0,sp,128
    2746:	1205                	addi	tp,tp,-31
    2748:	0306                	slli	t1,t1,0x1
    274a:	0900                	addi	s0,sp,144
    274c:	0000                	unimp
    274e:	0501                	addi	a0,a0,0
    2750:	09010313          	addi	t1,sp,144
    2754:	0008                	0x8
    2756:	0501                	addi	a0,a0,0
    2758:	0312                	slli	t1,t1,0x4
    275a:	0901                	addi	s2,s2,0
    275c:	0008                	0x8
    275e:	0501                	addi	a0,a0,0
    2760:	097f0313          	addi	t1,t5,151
    2764:	0004                	0x4
    2766:	0501                	addi	a0,a0,0
    2768:	0312                	slli	t1,t1,0x4
    276a:	097f                	0x97f
    276c:	0004                	0x4
    276e:	0501                	addi	a0,a0,0
    2770:	0605                	addi	a2,a2,1
    2772:	02090103          	lb	sp,32(s2)
    2776:	0100                	addi	s0,sp,128
    2778:	1305                	addi	t1,t1,-31
    277a:	0306                	slli	t1,t1,0x1
    277c:	0900                	addi	s0,sp,144
    277e:	0000                	unimp
    2780:	0501                	addi	a0,a0,0
    2782:	0312                	slli	t1,t1,0x4
    2784:	0901                	addi	s2,s2,0
    2786:	0002                	c.slli64	zero
    2788:	0301                	addi	t1,t1,0
    278a:	0909                	addi	s2,s2,2
    278c:	0002                	c.slli64	zero
    278e:	0501                	addi	a0,a0,0
    2790:	09760313          	addi	t1,a2,151
    2794:	0008                	0x8
    2796:	0501                	addi	a0,a0,0
    2798:	0605                	addi	a2,a2,1
    279a:	02090103          	lb	sp,32(s2)
    279e:	0100                	addi	s0,sp,128
    27a0:	00090903          	lb	s2,0(s2)
    27a4:	0100                	addi	s0,sp,128
    27a6:	1205                	addi	tp,tp,-31
    27a8:	0306                	slli	t1,t1,0x1
    27aa:	0900                	addi	s0,sp,144
    27ac:	0000                	unimp
    27ae:	0501                	addi	a0,a0,0
    27b0:	0605                	addi	a2,a2,1
    27b2:	02090103          	lb	sp,32(s2)
    27b6:	0100                	addi	s0,sp,128
    27b8:	1305                	addi	t1,t1,-31
    27ba:	0306                	slli	t1,t1,0x1
    27bc:	0900                	addi	s0,sp,144
    27be:	0000                	unimp
    27c0:	0501                	addi	a0,a0,0
    27c2:	0605                	addi	a2,a2,1
    27c4:	14090103          	lb	sp,320(s2)
    27c8:	0100                	addi	s0,sp,128
    27ca:	1205                	addi	tp,tp,-31
    27cc:	0306                	slli	t1,t1,0x1
    27ce:	0900                	addi	s0,sp,144
    27d0:	0000                	unimp
    27d2:	0501                	addi	a0,a0,0
    27d4:	031a                	slli	t1,t1,0x6
    27d6:	0004091b          	0x4091b
    27da:	0501                	addi	a0,a0,0
    27dc:	0312                	slli	t1,t1,0x4
    27de:	0965                	addi	s2,s2,25
    27e0:	0004                	0x4
    27e2:	0501                	addi	a0,a0,0
    27e4:	0605                	addi	a2,a2,1
    27e6:	02091303          	lh	t1,32(s2)
    27ea:	0100                	addi	s0,sp,128
    27ec:	1005                	c.nop	-31
    27ee:	00090003          	lb	zero,0(s2)
    27f2:	0100                	addi	s0,sp,128
    27f4:	1205                	addi	tp,tp,-31
    27f6:	0306                	slli	t1,t1,0x1
    27f8:	096d                	addi	s2,s2,27
    27fa:	0000                	unimp
    27fc:	0501                	addi	a0,a0,0
    27fe:	031a                	slli	t1,t1,0x6
    2800:	0002091b          	0x2091b
    2804:	0501                	addi	a0,a0,0
    2806:	0305                	addi	t1,t1,1
    2808:	0978                	addi	a4,sp,156
    280a:	0004                	0x4
    280c:	0501                	addi	a0,a0,0
    280e:	0609                	addi	a2,a2,2
    2810:	04090103          	lb	sp,64(s2)
    2814:	0100                	addi	s0,sp,128
    2816:	0b05                	addi	s6,s6,1
    2818:	0306                	slli	t1,t1,0x1
    281a:	0900                	addi	s0,sp,144
    281c:	0000                	unimp
    281e:	0501                	addi	a0,a0,0
    2820:	09000327          	0x9000327
    2824:	0002                	c.slli64	zero
    2826:	0501                	addi	a0,a0,0
    2828:	0900030b          	0x900030b
    282c:	0004                	0x4
    282e:	0501                	addi	a0,a0,0
    2830:	060d                	addi	a2,a2,3
    2832:	0a090203          	lb	tp,160(s2)
    2836:	0100                	addi	s0,sp,128
    2838:	1a05                	addi	s4,s4,-31
    283a:	0306                	slli	t1,t1,0x1
    283c:	0900                	addi	s0,sp,144
    283e:	0000                	unimp
    2840:	0501                	addi	a0,a0,0
    2842:	060d                	addi	a2,a2,3
    2844:	0a090203          	lb	tp,160(s2)
    2848:	0100                	addi	s0,sp,128
    284a:	0505                	addi	a0,a0,1
    284c:	00090903          	lb	s2,0(s2)
    2850:	0100                	addi	s0,sp,128
    2852:	0105                	addi	sp,sp,1
    2854:	0306                	slli	t1,t1,0x1
    2856:	0901                	addi	s2,s2,0
    2858:	0000                	unimp
    285a:	0501                	addi	a0,a0,0
    285c:	000d                	c.nop	3
    285e:	0402                	c.slli64	s0
    2860:	0602                	c.slli64	a2
    2862:	18097903          	0x18097903
    2866:	0100                	addi	s0,sp,128
    2868:	1a05                	addi	s4,s4,-31
    286a:	0200                	addi	s0,sp,256
    286c:	0204                	addi	s1,sp,256
    286e:	0306                	slli	t1,t1,0x1
    2870:	0900                	addi	s0,sp,144
    2872:	0000                	unimp
    2874:	0501                	addi	a0,a0,0
    2876:	0018                	0x18
    2878:	0402                	c.slli64	s0
    287a:	0602                	c.slli64	a2
    287c:	02097803          	0x2097803
    2880:	0100                	addi	s0,sp,128
    2882:	1005                	c.nop	-31
    2884:	0200                	addi	s0,sp,256
    2886:	0204                	addi	s1,sp,256
    2888:	00090003          	lb	zero,0(s2)
    288c:	0100                	addi	s0,sp,128
    288e:	0505                	addi	a0,a0,1
    2890:	0200                	addi	s0,sp,256
    2892:	0204                	addi	s1,sp,256
    2894:	0306                	slli	t1,t1,0x1
    2896:	0900                	addi	s0,sp,144
    2898:	0002                	c.slli64	zero
    289a:	0901                	addi	s2,s2,0
    289c:	0006                	c.slli	zero,0x1
    289e:	0100                	addi	s0,sp,128
    28a0:	5001                	c.li	zero,-32
    28a2:	0001                	nop
    28a4:	0300                	addi	s0,sp,384
    28a6:	1d00                	addi	s0,sp,688
    28a8:	0000                	unimp
    28aa:	0100                	addi	s0,sp,128
    28ac:	fb01                	bnez	a4,27bc <_bss_end+0x780>
    28ae:	0d0e                	slli	s10,s10,0x3
    28b0:	0100                	addi	s0,sp,128
    28b2:	0101                	addi	sp,sp,0
    28b4:	0001                	nop
    28b6:	0000                	unimp
    28b8:	0001                	nop
    28ba:	0100                	addi	s0,sp,128
    28bc:	6300                	flw	fs0,0(a4)
    28be:	7472                	flw	fs0,60(sp)
    28c0:	2e30                	fld	fa2,88(a2)
    28c2:	00000053          	fadd.s	ft0,ft0,ft0,rne
    28c6:	0000                	unimp
    28c8:	0500                	addi	s0,sp,640
    28ca:	e202                	fsw	ft0,4(sp)
    28cc:	000d                	c.nop	3
    28ce:	1500                	addi	s0,sp,672
    28d0:	04090403          	lb	s0,64(s2)
    28d4:	0100                	addi	s0,sp,128
    28d6:	04090103          	lb	sp,64(s2)
    28da:	0100                	addi	s0,sp,128
    28dc:	02090103          	lb	sp,32(s2)
    28e0:	0100                	addi	s0,sp,128
    28e2:	02090103          	lb	sp,32(s2)
    28e6:	0100                	addi	s0,sp,128
    28e8:	02090103          	lb	sp,32(s2)
    28ec:	0100                	addi	s0,sp,128
    28ee:	02090103          	lb	sp,32(s2)
    28f2:	0100                	addi	s0,sp,128
    28f4:	02090103          	lb	sp,32(s2)
    28f8:	0100                	addi	s0,sp,128
    28fa:	02090103          	lb	sp,32(s2)
    28fe:	0100                	addi	s0,sp,128
    2900:	02090103          	lb	sp,32(s2)
    2904:	0100                	addi	s0,sp,128
    2906:	02090103          	lb	sp,32(s2)
    290a:	0100                	addi	s0,sp,128
    290c:	02090103          	lb	sp,32(s2)
    2910:	0100                	addi	s0,sp,128
    2912:	02090103          	lb	sp,32(s2)
    2916:	0100                	addi	s0,sp,128
    2918:	02090103          	lb	sp,32(s2)
    291c:	0100                	addi	s0,sp,128
    291e:	02090103          	lb	sp,32(s2)
    2922:	0100                	addi	s0,sp,128
    2924:	02090103          	lb	sp,32(s2)
    2928:	0100                	addi	s0,sp,128
    292a:	02090103          	lb	sp,32(s2)
    292e:	0100                	addi	s0,sp,128
    2930:	02090103          	lb	sp,32(s2)
    2934:	0100                	addi	s0,sp,128
    2936:	02090103          	lb	sp,32(s2)
    293a:	0100                	addi	s0,sp,128
    293c:	02090103          	lb	sp,32(s2)
    2940:	0100                	addi	s0,sp,128
    2942:	02090103          	lb	sp,32(s2)
    2946:	0100                	addi	s0,sp,128
    2948:	02090103          	lb	sp,32(s2)
    294c:	0100                	addi	s0,sp,128
    294e:	02090103          	lb	sp,32(s2)
    2952:	0100                	addi	s0,sp,128
    2954:	02090103          	lb	sp,32(s2)
    2958:	0100                	addi	s0,sp,128
    295a:	02090103          	lb	sp,32(s2)
    295e:	0100                	addi	s0,sp,128
    2960:	02090103          	lb	sp,32(s2)
    2964:	0100                	addi	s0,sp,128
    2966:	02090103          	lb	sp,32(s2)
    296a:	0100                	addi	s0,sp,128
    296c:	02090103          	lb	sp,32(s2)
    2970:	0100                	addi	s0,sp,128
    2972:	02090103          	lb	sp,32(s2)
    2976:	0100                	addi	s0,sp,128
    2978:	02090103          	lb	sp,32(s2)
    297c:	0100                	addi	s0,sp,128
    297e:	02090103          	lb	sp,32(s2)
    2982:	0100                	addi	s0,sp,128
    2984:	02090103          	lb	sp,32(s2)
    2988:	0100                	addi	s0,sp,128
    298a:	02090303          	lb	t1,32(s2)
    298e:	0100                	addi	s0,sp,128
    2990:	08090603          	lb	a2,128(s2)
    2994:	0100                	addi	s0,sp,128
    2996:	08090103          	lb	sp,128(s2)
    299a:	0100                	addi	s0,sp,128
    299c:	08090203          	lb	tp,128(s2)
    29a0:	0100                	addi	s0,sp,128
    29a2:	04090303          	lb	t1,64(s2)
    29a6:	0100                	addi	s0,sp,128
    29a8:	04090103          	lb	sp,64(s2)
    29ac:	0100                	addi	s0,sp,128
    29ae:	02090103          	lb	sp,32(s2)
    29b2:	0100                	addi	s0,sp,128
    29b4:	04090603          	lb	a2,64(s2)
    29b8:	0100                	addi	s0,sp,128
    29ba:	04090103          	lb	sp,64(s2)
    29be:	0100                	addi	s0,sp,128
    29c0:	04090103          	lb	sp,64(s2)
    29c4:	0100                	addi	s0,sp,128
    29c6:	0409                	addi	s0,s0,2
    29c8:	0000                	unimp
    29ca:	0101                	addi	sp,sp,0
    29cc:	0500                	addi	s0,sp,640
    29ce:	0002                	c.slli64	zero
    29d0:	0000                	unimp
    29d2:	0300                	addi	s0,sp,384
    29d4:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    29d8:	0901                	addi	s2,s2,0
    29da:	007c                	addi	a5,sp,12
    29dc:	0301                	addi	t1,t1,0
    29de:	0904                	addi	s1,sp,144
    29e0:	0004                	0x4
    29e2:	0301                	addi	t1,t1,0
    29e4:	0904                	addi	s1,sp,144
    29e6:	0004                	0x4
    29e8:	0301                	addi	t1,t1,0
    29ea:	0904                	addi	s1,sp,144
    29ec:	0004                	0x4
    29ee:	0901                	addi	s2,s2,0
    29f0:	0004                	0x4
    29f2:	0100                	addi	s0,sp,128
    29f4:	01              	Address 0x00000000000029f4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  jal x0, reset_handler
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  jal x0, default_exc_handler
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid>
  jal x0, default_exc_handler
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    switch(length%3) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
            for (i = 0; i < (length / 3); i++) {
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	7465                	lui	s0,0xffff9
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
            a1[length-1] = a2[length-1];
  c2:	5f79656b          	0x5f79656b
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
  d2:	6174                	flw	fa3,68(a0)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
            a1[length-1] = a2[length-1];
  e4:	5f00                	lw	s0,56(a4)
            a1[length-2] = a2[length-2];
  e6:	745f 5f6d 6573      	0x65735f6d745f
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0xea>
} //end of function
  f0:	676e                	flw	fa4,216(sp)
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	6c20                	flw	fs0,88(s0)
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    asm volatile(
  f8:	6e69                	lui	t3,0x1a
  fa:	0074                	addi	a3,sp,12
  fc:	657a6973          	csrrsi	s2,0x657,20
            for (i = 0; i < (length / 3); i++) {
 100:	4e5f 7000 6c6f      	0x6c6f70004e5f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 106:	6d79                	lui	s10,0x1e
    asm volatile(
 108:	6c75                	lui	s8,0x1d
 10a:	0074                	addi	a3,sp,12
 10c:	755f 7562 0066      	0x667562755f
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	625f 7361 0065      	0x657361625f
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 118:	6d6f682f          	0x6d6f682f
    asm volatile(
 11c:	2f65                	jal	8d4 <ext_euclid+0x1f2>
 11e:	6f74                	flw	fa3,92(a4)
 120:	6170                	flw	fa2,68(a0)
 122:	636c                	flw	fa1,68(a4)
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	7365442f          	0x7365442f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 128:	706f746b          	0x706f746b
 12c:	7469672f          	0x7469672f
    int line[size_b][size_a + size_b];
 130:	7568                	flw	fa0,108(a0)
 132:	2f62                	fld	ft10,24(sp)
 134:	696e6573          	csrrsi	a0,0x696,28
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	705f726f          	jal	tp,f803c <_stack_start+0xe803c>
    int line[size_b][size_a + size_b];
 13c:	6f72                	flw	ft10,28(sp)
 13e:	656a                	flw	fa0,152(sp)
 140:	732f7463          	bgeu	t5,s2,868 <ext_euclid+0x186>
 144:	6c6f2f77          	0x6c6f2f77
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 148:	6c6d7563          	bgeu	s10,t1,812 <ext_euclid+0x130>
 14c:	7265                	lui	tp,0xffff9
 14e:	652e332f          	0x652e332f
 152:	7571                	lui	a0,0xffffc
 154:	5f00                	lw	s0,56(a4)
 156:	735f 0066 6f5f      	0x6f5f0066735f
 15c:	5f6e                	lw	t5,248(sp)
    int line[size_b][size_a + size_b];
 15e:	7865                	lui	a6,0xffff9
    int pola[size_a];
 160:	7469                	lui	s0,0xffffa
 162:	615f 6772 0073      	0x736772615f
    int line[size_b][size_a + size_b];
 168:	635f 6f6f 696b      	0x696b6f6f635f
 16e:	0065                	c.nop	25
    int pola[size_a];
 170:	5f5f 6773 756c      	0x756c67735f5f
    int polb[size_b];
 176:	0065                	c.nop	25
 178:	6572                	flw	fa0,28(sp)
    int pola[size_a];
 17a:	72003173          	csrrc	sp,0x720,zero
    int polb[size_b];
 17e:	7365                	lui	t1,0xffff9
            line[i][j] = 0;
 180:	0032                	c.slli	zero,0xc
 182:	665f 616c 7367      	0x7367616c665f
    int pola[size_a];
 188:	5f00                	lw	s0,56(a4)
 18a:	7369                	lui	t1,0xffffa
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	635f 6178 5f00      	0x5f006178635f
    int polb[size_b];
 192:	69647473          	csrrci	s0,0x696,8
            line[i][j] = 0;
 196:	006e                	c.slli	zero,0x1b
 198:	625f 6b6c 6973      	0x69736b6c625f
            product[j] = 0;
 19e:	657a                	flw	fa0,156(sp)
 1a0:	7000                	flw	fs0,32(s0)
 1a2:	6f72                	flw	ft10,28(sp)
 1a4:	7564                	flw	fs1,108(a0)
    for (i = 0; i < size_b; ++i){
 1a6:	70007463          	bgeu	zero,zero,8ae <ext_euclid+0x1cc>
    array_equ(pola,a,size_a);
 1aa:	64796c6f          	jal	s8,96ff0 <_stack_start+0x86ff0>
 1ae:	7669                	lui	a2,0xffffa
 1b0:	7000                	flw	fs0,32(s0)
 1b2:	66796c6f          	jal	s8,97018 <_stack_start+0x87018>
 1b6:	5f00                	lw	s0,56(a4)
 1b8:	62747663          	bgeu	s0,t2,7e4 <ext_euclid+0x102>
    for (i = 0; i < size_a; ++i){
 1bc:	6675                	lui	a2,0x1d
 1be:	5f00                	lw	s0,56(a4)
 1c0:	7366666f          	jal	a2,668f6 <_stack_start+0x568f6>
 1c4:	7465                	lui	s0,0xffff9
 1c6:	5f00                	lw	s0,56(a4)
 1c8:	626d                	lui	tp,0x1b
    array_equ(polb,b,size_b);
 1ca:	6f747273          	csrrci	tp,0x6f7,8
 1ce:	5f736377          	0x5f736377
    for (i = 0; i < size_b; ++i){
 1d2:	74617473          	csrrci	s0,0x746,2
 1d6:	0065                	c.nop	25
 1d8:	6d5f 7262 656c      	0x656c72626d5f
    if(star_mult == 1){
 1de:	5f6e                	lw	t5,248(sp)
 1e0:	74617473          	csrrci	s0,0x746,2
 1e4:	0065                	c.nop	25
 1e6:	665f 616e 6772      	0x6772616e665f
 1ec:	746e0073          	0x746e0073
        for (j = size_b -1; j >= 0; j = j-1){
 1f0:	7572                	flw	fa0,60(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f2:	645f 6365 7965      	0x79656365645f
            product[j] = 0;
 1f8:	7470                	flw	fa2,108(s0)
 1fa:	5f00                	lw	s0,56(a4)
            line[i][j] = 0;
 1fc:	6e66                	flw	ft8,88(sp)
 1fe:	735f0073          	0x735f0073
            product[j] = 0;
 202:	6769                	lui	a4,0x1a
        for(j = 0; j < size_a + size_b -1; ++j){
 204:	006e                	c.slli	zero,0x1b
 206:	665f 6f6c 6b63      	0x6b636f6c665f
    for (i = 0; i < size_b; ++i){
 20c:	745f 5f00 7473      	0x74735f00745f
 212:	6564                	flw	fs1,76(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 214:	7272                	flw	ft4,60(sp)
 216:	5f00                	lw	s0,56(a4)
            pola[i] = pola[i] + mod;
 218:	6942                	flw	fs2,16(sp)
 21a:	746e6967          	0x746e6967
        while (pola[i] < 0){
 21e:	5f00                	lw	s0,56(a4)
 220:	6d6d6167          	0x6d6d6167
        pola[i] = pola[i] % mod;
 224:	5f61                	li	t5,-8
    for (i = 0; i < size_a; ++i){
 226:	6e676973          	csrrsi	s2,0x6e6,14
        pola[i] = pola[i] % mod;
 22a:	006d6167          	0x6d6167
    for (i = 0; i < size_a; ++i){
 22e:	725f 6165 0064      	0x646165725f
        while (polb[i] < 0){
 234:	725f 7365 6c75      	0x6c757365725f
        polb[i] = polb[i] % mod;
 23a:	5f74                	lw	a3,124(a4)
 23c:	5f5f006b          	0x5f5f006b
    for (i = 0; i < size_b; ++i){
 240:	6d74                	flw	fa3,92(a0)
        polb[i] = polb[i] % mod;
 242:	6400                	flw	fs0,8(s0)
 244:	6e65                	lui	t3,0x19
    for (i = 0; i < size_b; ++i){
 246:	6d75                	lui	s10,0x1d
    if(star_mult == 1){
 248:	745f 6d65 0070      	0x706d65745f
        for(j = 0; j < size_a + size_b -1; ++j){
 24e:	5f5f 6377 6268      	0x626863775f5f
    for (i = 0; i < size_b; ++i){
 254:	7200                	flw	fs0,32(a2)
 256:	7365                	lui	t1,0xffff9
 258:	6c75                	lui	s8,0x1d
 25a:	6b74                	flw	fa3,84(a4)
 25c:	5f006e6f          	jal	t3,684c <_stack_len+0x284c>
    for(j = 0; j < size_a + size_b -1; ++j){
 260:	6f647473          	csrrci	s0,0x6f6,8
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	7475                	lui	s0,0xffffd
 266:	5f00                	lw	s0,56(a4)
 268:	6c747663          	bgeu	s0,t2,934 <ext_euclid+0x252>
}
 26c:	6e65                	lui	t3,0x19
 26e:	7300                	flw	fs0,32(a4)
 270:	6365                	lui	t1,0x19
 272:	6572                	flw	fa0,28(sp)
 274:	5f74                	lw	a3,124(a4)
 276:	5f79656b          	0x5f79656b
 27a:	7166                	flw	ft2,120(sp)
 27c:	5f00                	lw	s0,56(a4)
 27e:	6966                	flw	fs2,88(sp)
 280:	656c                	flw	fa1,76(a0)
 282:	7200                	flw	fs0,32(a2)
 284:	7465                	lui	s0,0xffff9
 286:	7275                	lui	tp,0xffffd
 288:	5f6e                	lw	t5,248(sp)
 28a:	6461                	lui	s0,0x18
 28c:	7264                	flw	fs1,100(a2)
 28e:	7365                	lui	t1,0xffff9
 290:	72003173          	csrrc	sp,0x720,zero
                line[size_b-1-j][k] = pola[k]*polb[j];
 294:	7465                	lui	s0,0xffff9
 296:	7275                	lui	tp,0xffffd
 298:	5f6e                	lw	t5,248(sp)
 29a:	6461                	lui	s0,0x18
 29c:	7264                	flw	fs1,100(a2)
 29e:	7365                	lui	t1,0xffff9
 2a0:	72003273          	csrrc	tp,0x720,zero
            for (k = size_a-1; k >= 0; k = k-1 ){
 2a4:	7465                	lui	s0,0xffff9
                line[size_b-1-j][k] = pola[k]*polb[j];
 2a6:	7275                	lui	tp,0xffffd
 2a8:	5f6e                	lw	t5,248(sp)
 2aa:	6461                	lui	s0,0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
 2ac:	7264                	flw	fs1,100(a2)
 2ae:	7365                	lui	t1,0xffff9
        for (j = size_b -1; j >= 0; j = j-1){
 2b0:	72003373          	csrrc	t1,0x720,zero
 2b4:	7465                	lui	s0,0xffff9
 2b6:	7275                	lui	tp,0xffffd
            for (k = size_a-1; k >= 0; k = k-1 ){
 2b8:	5f6e                	lw	t5,248(sp)
 2ba:	6461                	lui	s0,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2bc:	7264                	flw	fs1,100(a2)
 2be:	7365                	lui	t1,0xffff9
 2c0:	5f003473          	csrrc	s0,0x5f0,zero
 2c4:	696e                	flw	fs2,216(sp)
 2c6:	0073626f          	jal	tp,36acc <_stack_start+0x26acc>
 2ca:	6572                	flw	fa0,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 2cc:	7574                	flw	fa3,108(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 2ce:	6e72                	flw	ft8,28(sp)
 2d0:	615f 6464 6572      	0x65726464615f
            for (k = size_a-1; k >= 0; k = k-1 ){
 2d6:	00367373          	csrrci	t1,fcsr,12
        for (j = size_b -1; j >= 0; j = j-1){
 2da:	6572                	flw	fa0,28(sp)
 2dc:	7574                	flw	fa3,108(a0)
 2de:	6e72                	flw	ft8,28(sp)
            line[i][j] = line[i][j] % mod;
 2e0:	615f 6464 6572      	0x65726464615f
 2e6:	00377373          	csrrci	t1,fcsr,14
 2ea:	726f6873          	csrrsi	a6,0x726,30
        for(j = 0; j < size_a + size_b -1; ++j){
 2ee:	2074                	fld	fa3,192(s0)
 2f0:	6e75                	lui	t3,0x1d
    for (i = 0; i < size_b; ++i){
 2f2:	6e676973          	csrrsi	s2,0x6e6,14
 2f6:	6465                	lui	s0,0x19
 2f8:	6920                	flw	fs0,80(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
 2fa:	746e                	flw	fs0,248(sp)
 2fc:	5f00                	lw	s0,56(a4)
            product[j] += line[i][j];
 2fe:	7461                	lui	s0,0xffff8
 300:	7865                	lui	a6,0xffff9
 302:	7469                	lui	s0,0xffffa
 304:	0030                	addi	a2,sp,8
 306:	735f 6769 616e      	0x616e6769735f
 30c:	5f6c                	lw	a1,124(a4)
 30e:	7562                	flw	fa0,56(sp)
 310:	0066                	c.slli	zero,0x19
 312:	615f 6373 6974      	0x69746373615f
        for(i = 0; i < size_b; ++i){
 318:	656d                	lui	a0,0x1b
    for(j = 0; j < size_a + size_b -1; ++j){
 31a:	625f 6675 5f00      	0x5f006675625f
        for(i = 0; i < size_b; ++i){
 320:	6572                	flw	fa0,28(sp)
 322:	746c7573          	csrrci	a0,0x746,24
    for(j = 0; j < size_a + size_b -1; ++j){
 326:	5f00                	lw	s0,56(a4)
 328:	775f 6863 7700      	0x77006863775f
        product[j] = product[j] % mod;
 32e:	6e69                	lui	t3,0x1a
 330:	5f74                	lw	a3,124(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 332:	0074                	addi	a3,sp,12
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 334:	656e6567          	0x656e6567
    int line[size_b][size_a + size_b];
 338:	6172                	flw	ft2,28(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33a:	6574                	flw	fa3,76(a0)
 33c:	6b5f 7965 0073      	0x7379656b5f
 342:	5f5f 7562 6c69      	0x6c6975625f5f
    int line[size_b][size_a + size_b];
 348:	6974                	flw	fa3,84(a0)
 34a:	5f6e                	lw	t5,248(sp)
 34c:	656d                	lui	a0,0x1b
 34e:	636d                	lui	t1,0x1b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 350:	7970                	flw	fa2,116(a0)
 352:	5f00                	lw	s0,56(a4)
 354:	6f6c                	flw	fa1,92(a4)
 356:	4e006b63          	bltu	zero,zero,84c <ext_euclid+0x16a>
 35a:	5254                	lw	a3,36(a2)
 35c:	5f55                	li	t5,-11
 35e:	3834                	fld	fa3,112(s0)
 360:	625f 7469 2e4d      	0x2e4d7469625f
 366:	72700063          	beq	zero,t2,a86 <generate_keys+0xf6>
    int line[size_b][size_a + size_b];
 36a:	6375646f          	jal	s0,571a0 <_stack_start+0x471a0>
    int pola[size_a];
 36e:	3274                	fld	fa3,224(a2)
 370:	6500                	flw	fs0,8(a0)
 372:	7478                	flw	fa4,108(s0)
 374:	655f 6375 696c      	0x696c6375655f
 37a:	0064                	addi	s1,sp,12
    int polb[size_b];
 37c:	775f 6972 6574      	0x65746972775f
    int pola[size_a];
 382:	5f00                	lw	s0,56(a4)
    int polb[size_b];
 384:	745f 5f6d 6579      	0x65795f6d745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 38a:	7261                	lui	tp,0xffff8
    int line[size_b][size_a + size_b];
 38c:	7000                	flw	fs0,32(s0)
 38e:	00626c6f          	jal	s8,26394 <_stack_start+0x16394>
    int pola[size_a];
 392:	6172                	flw	ft2,28(sp)
 394:	646e                	flw	fs0,216(sp)
    int polb[size_b];
 396:	765f6d6f          	jal	s10,f72fa <_stack_start+0xe72fa>
    for (i = 0; i < size_b; ++i){
 39a:	6c61                	lui	s8,0x18
 39c:	5f00                	lw	s0,56(a4)
            product2[j] = 0;
 39e:	6d6e                	flw	fs10,216(sp)
 3a0:	6c61                	lui	s8,0x18
 3a2:	6f6c                	flw	fa1,92(a4)
 3a4:	6f6c0063          	beq	s8,s6,a84 <generate_keys+0xf4>
    for (i = 0; i < size_b; ++i){
 3a8:	676e                	flw	fa4,216(sp)
    array_equ(pola,a,size_a);
 3aa:	6420                	flw	fs0,72(s0)
 3ac:	6c62756f          	jal	a0,27a72 <_stack_start+0x17a72>
 3b0:	0065                	c.nop	25
 3b2:	6e5f 7865 6674      	0x667478656e5f
    array_equ(polb,b,size_b);
 3b8:	6100                	flw	fs0,0(a0)
 3ba:	7272                	flw	ft4,60(sp)
 3bc:	7961                	lui	s2,0xffff8
 3be:	655f 7571 6d00      	0x6d007571655f
    if(star_mult == 1){
 3c4:	7365                	lui	t1,0xffff9
 3c6:	65676173          	csrrsi	sp,0x656,14
 3ca:	5f00                	lw	s0,56(a4)
 3cc:	745f 5f6d 6f6d      	0x6f6d5f6d745f
 3d2:	006e                	c.slli	zero,0x1b
        for (j = size_b -1; j >= 0; j = j-1){
 3d4:	6572                	flw	fa0,28(sp)
 3d6:	7574                	flw	fa3,108(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	6e72                	flw	ft8,28(sp)
 3da:	615f 6464 6572      	0x65726464615f
            product2[j] = 0;
 3e0:	00357373          	csrrci	t1,fcsr,10
            line[i][j] = 0;
 3e4:	615f 6574 6978      	0x69786574615f
        for(j = 0; j < size_a + size_b -1; ++j){
 3ea:	0074                	addi	a3,sp,12
 3ec:	6f627573          	csrrci	a0,0x6f6,4
 3f0:	7470                	flw	fa2,108(s0)
    for (i = 0; i < size_b; ++i){
 3f2:	7261                	lui	tp,0xffff8
 3f4:	5f5f0067          	jr	1525(t5)
 3f8:	64696473          	csrrsi	s0,0x646,18
        for(j = 0; j < size_a + size_b -1; ++j){
 3fc:	6e69                	lui	t3,0x1a
                line[size_b-1-j][k] = pola[k]*polb[j];
 3fe:	7469                	lui	s0,0xffffa
 400:	5f00                	lw	s0,56(a4)
 402:	5f66666f          	jal	a2,669f8 <_stack_start+0x569f8>
 406:	0074                	addi	a3,sp,12
 408:	6e45                	lui	t3,0x11
 40a:	654d5f63          	bge	s10,s4,a68 <generate_keys+0xd8>
            for (k = size_a-1; k >= 0; k = k-1 ){
 40e:	67617373          	csrrci	t1,0x676,2
                line[size_b-1-j][k] = pola[k]*polb[j];
 412:	0065                	c.nop	25
 414:	746e6f63          	bltu	t3,t1,b72 <generate_keys+0x1e2>
            for (k = size_a-1; k >= 0; k = k-1 ){
 418:	6f72                	flw	ft10,28(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 41a:	526c                	lw	a1,100(a2)
 41c:	5f00                	lw	s0,56(a4)
 41e:	7266                	flw	ft4,120(sp)
 420:	6565                	lui	a0,0x19
 422:	696c                	flw	fa1,84(a0)
        for(j=0;j<size_a+size_b-1;++j){
 424:	72007473          	csrrci	s0,0x720,0
    for(i=0;i<size_b;++i){
 428:	6e69                	lui	t3,0x1a
 42a:	6f705f67          	0x6f705f67
 42e:	796c                	flw	fa1,116(a0)
 430:	5f00                	lw	s0,56(a4)
 432:	4f4c                	lw	a1,28(a4)
        for(j=0;j<size_a+size_b-1;++j){
 434:	525f4b43          	fmadd.d	fs6,ft10,ft5,fa0,rmm
            for (k = size_a-1; k >= 0; k = k-1 ){
 438:	4345                	li	t1,17
 43a:	5255                	li	tp,-11
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 43c:	45564953          	0x45564953
 440:	545f 7400 5f69      	0x5f697400545f
 446:	0031                	c.nop	12
 448:	6974                	flw	fa3,84(a0)
 44a:	325f 7500 736e      	0x736e7500325f
 450:	6769                	lui	a4,0x1a
 452:	656e                	flw	fa0,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 454:	2064                	fld	fs1,192(s0)
 456:	72616863          	bltu	sp,t1,b86 <generate_keys+0x1f6>
        for (j = size_b -1; j >= 0; j = j-1){
 45a:	7100                	flw	fs0,32(a0)
 45c:	5f69                	li	t5,-6
 45e:	0031                	c.nop	12
            product2[j] += line[i][j];
 460:	6e5f 7765 5f00      	0x5f0077656e5f
        for(j=0;j<size_a+size_b-1;++j){
 466:	5f68                	lw	a0,124(a4)
            product2[j] += line[i][j];
 468:	7265                	lui	tp,0xffff9
 46a:	6e72                	flw	ft8,28(sp)
 46c:	6873006f          	j	312f2 <_stack_start+0x212f2>
        for(j=0;j<size_a+size_b-1;++j){
 470:	2074726f          	jal	tp,47e76 <_stack_start+0x37e76>
    for(i=0;i<size_b;++i){
 474:	6e69                	lui	t3,0x1a
 476:	0074                	addi	a3,sp,12
 478:	5f5f 6d74 795f      	0x795f6d745f5f
}
 47e:	6164                	flw	fs1,68(a0)
 480:	0079                	c.nop	30
 482:	5f5f 6273 6675      	0x667562735f5f
 488:	5f00                	lw	s0,56(a4)
 48a:	6c66                	flw	fs8,88(sp)
 48c:	6761                	lui	a4,0x18
 48e:	5f003273          	csrrc	tp,0x5f0,zero
 492:	6f69                	lui	t5,0x1a
 494:	7362                	flw	ft6,56(sp)
 496:	5f00                	lw	s0,56(a4)
 498:	465f 4c49 0045      	0x454c49465f
 49e:	6d5f 7362 6174      	0x617473626d5f
    int v[size_N];
 4a4:	6574                	flw	fa3,76(a0)
 4a6:	745f 5f00 735f      	0x735f5f00745f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4ac:	4946                	lw	s2,80(sp)
 4ae:	454c                	lw	a1,12(a0)
 4b0:	5f00                	lw	s0,56(a4)
 4b2:	626d                	lui	tp,0x1b
 4b4:	74617473          	csrrci	s0,0x746,2
 4b8:	0065                	c.nop	25
 4ba:	725f 6e61 5f64      	0x5f646e61725f
 4c0:	656e                	flw	fa0,216(sp)
 4c2:	7478                	flw	fa4,108(s0)
    int v[size_N];
 4c4:	5f00                	lw	s0,56(a4)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4c6:	626d                	lui	tp,0x1b
 4c8:	656c                	flw	fa1,76(a0)
    int v[size_N];
 4ca:	5f6e                	lw	t5,248(sp)
 4cc:	74617473          	csrrci	s0,0x746,2
    int q[size_N];
 4d0:	0065                	c.nop	25
 4d2:	695f 636e 5f00      	0x5f00636e695f
    int num_temp[size_N];
 4d8:	6e69                	lui	t3,0x1a
    int denum_temp[size_D];
 4da:	0064                	addi	s1,sp,12
 4dc:	6c5f 636f 6c61      	0x6c61636f6c5f
 4e2:	0065                	c.nop	25
 4e4:	5f5f 6c63 6165      	0x61656c635f5f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4ea:	756e                	flw	fa0,248(sp)
    int v[size_N];
 4ec:	0070                	addi	a2,sp,12
 4ee:	755f 736e 6570      	0x6570736e755f
     array_equ(num_temp,num,size_N);
 4f4:	69666963          	bltu	a2,s6,b86 <generate_keys+0x1f6>
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 4f8:	6465                	lui	s0,0x19
    int denum_temp[size_D];
 4fa:	6c5f 636f 6c61      	0x6c61636f6c5f
 500:	5f65                	li	t5,-7
    for (i = 0; i < size_N; ++i){
 502:	6e69                	lui	t3,0x1a
 504:	6f66                	flw	ft10,88(sp)
 506:	5f00                	lw	s0,56(a4)
 508:	616d                	addi	sp,sp,240
 50a:	7778                	flw	fa4,108(a4)
        array_equ(denum_temp,denum,size_D);
 50c:	7364                	flw	fs1,100(a4)
 50e:	5f00                	lw	s0,56(a4)
 510:	6572                	flw	fa0,28(sp)
 512:	6e65                	lui	t3,0x19
    for (i = 0; i < size_D; ++i) {
 514:	0074                	addi	a3,sp,12
 516:	72617473          	csrrci	s0,0x726,2
 51a:	6d5f 6c75 0074      	0x746c756d5f
    for (i = 0; i < size_N; ++i){
 520:	735f 6565 0064      	0x646565735f
    for (i = size_D-1; i >= 0; i = i-1){
 526:	6972                	flw	fs2,28(sp)
 528:	325f 5f00 635f      	0x635f5f00325f
    for (i = 0; i < size_N; ++i){
 52e:	746e756f          	jal	a0,e7c74 <_stack_start+0xd7c74>
        if ( (b_N*u)%mod == 1 )
 532:	5f00                	lw	s0,56(a4)
    for (u = 0; u < mod; ++u){
 534:	765f 6c61 6575      	0x65756c61765f
 53a:	5f00                	lw	s0,56(a4)
            num_temp[i] = num_temp[i] + mod;
 53c:	745f 5f6d 6f68      	0x6f685f6d745f
        while (num_temp[i] < 0) {
 542:	7275                	lui	tp,0xffffd
 544:	5f00                	lw	s0,56(a4)
        num_temp[i] = num_temp[i] % mod;
 546:	6b656573          	csrrsi	a0,0x6b6,10
    for (i = 0; i < size_N; ++i){
 54a:	5f00                	lw	s0,56(a4)
 54c:	7066                	flw	ft0,120(sp)
        num_temp[i] = num_temp[i] % mod;
 54e:	745f736f          	jal	t1,f8492 <_stack_start+0xe8492>
    for (i = 0; i < size_N; ++i){
 552:	6c00                	flw	fs0,24(s0)
            denum_temp[i] = denum_temp[i] + mod;
 554:	6e65                	lui	t3,0x19
 556:	00687467          	0x687467
        while (denum_temp[i] < 0) {
 55a:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
        denum_temp[i] = denum_temp[i] % mod;
 560:	6e69                	lui	t3,0x1a
    for (i = 0; i < size_D; ++i) {
 562:	7000                	flw	fs0,32(s0)
 564:	6275                	lui	tp,0x1d
        denum_temp[i] = denum_temp[i] % mod;
 566:	696c                	flw	fa1,84(a0)
 568:	656b5f63          	bge	s6,s6,bc6 <generate_keys+0x236>
        q[i] = 0;
 56c:	0079                	c.nop	30
 56e:	735f 7274 6f74      	0x6f747274735f
        v[i] = 0;
 574:	616c5f6b          	0x616c5f6b
        q[i] = 0;
 578:	5f007473          	csrrci	s0,0x5f0,0
        v[i] = 0;
 57c:	6e66                	flw	ft8,88(sp)
    for (i = 0; i < size_N; ++i){
 57e:	7974                	flw	fa3,116(a0)
 580:	6570                	flw	fa2,76(a0)
        if( denum_temp[i] != 0 )
 582:	65730073          	0x65730073
    for (i = size_D-1; i >= 0; i = i-1){
 586:	74657263          	bgeu	a0,t1,cca <ntru_encyrpt+0x46>
        if ( (b_N*u)%mod == 1 )
 58a:	6b5f 7965 665f      	0x665f79656b5f
 590:	0070                	addi	a2,sp,12
    for (u = 0; u < mod; ++u){
 592:	615f 6464 5f00      	0x5f006464615f
    for (i = size_N-1; i >= 0; i = i-1){
 598:	555f 6f4c 676e      	0x676e6f4c555f
 59e:	7200                	flw	fs0,32(a2)
 5a0:	5f69                	li	t5,-6
 5a2:	0031                	c.nop	12
 5a4:	675f 7465 6164      	0x61647465675f
    array_equ(result,q,size_N);
 5aa:	6574                	flw	fa3,76(a0)
 5ac:	655f 7272 5f00      	0x5f007272655f
 5b2:	626f6c67          	0x626f6c67
 5b6:	6c61                	lui	s8,0x18
    for(i = size_N; i < (2*size_N); ++i){
 5b8:	695f 706d 7275      	0x7275706d695f
        result[i] = num_temp[i-size_N];
 5be:	5f65                	li	t5,-7
 5c0:	7470                	flw	fa2,108(s0)
 5c2:	0072                	c.slli	zero,0x1c
    for(i = size_N; i < (2*size_N); ++i){
 5c4:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
}
 5c8:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
 5cc:	2e39                	jal	8ea <ext_euclid+0x208>
 5ce:	2e32                	fld	ft8,264(sp)
 5d0:	2030                	fld	fa2,64(s0)
 5d2:	6d2d                	lui	s10,0xb
 5d4:	7261                	lui	tp,0xffff8
 5d6:	723d6863          	bltu	s10,gp,d06 <ntru_encyrpt+0x82>
 5da:	3376                	fld	ft6,376(sp)
 5dc:	6932                	flw	fs2,12(sp)
 5de:	636d                	lui	t1,0x1b
 5e0:	2d20                	fld	fs0,88(a0)
 5e2:	616d                	addi	sp,sp,240
 5e4:	6962                	flw	fs2,24(sp)
 5e6:	693d                	lui	s2,0xf
 5e8:	706c                	flw	fa1,100(s0)
 5ea:	2d203233          	0x2d203233
 5ee:	636d                	lui	t1,0x1b
 5f0:	6f6d                	lui	t5,0x1b
        v[(d-d2)] = u*r_d;
 5f2:	6564                	flw	fs1,76(a0)
 5f4:	3d6c                	fld	fa1,248(a0)
 5f6:	656d                	lui	a0,0x1b
 5f8:	6164                	flw	fs1,68(a0)
 5fa:	796e                	flw	fs2,248(sp)
 5fc:	2d20                	fld	fs0,88(a0)
 5fe:	746d                	lui	s0,0xffffb
        for (i = 0; i < size_N; ++i){
 600:	6e75                	lui	t3,0x1d
 602:	3d65                	jal	4ba <polydiv+0x16>
 604:	6f72                	flw	ft10,28(sp)
 606:	74656b63          	bltu	a0,t1,d5c <ntru_deceypt+0x42>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 60a:	2d20                	fld	fs0,88(a0)
 60c:	4f2d2067          	0x4f2d2067
 610:	662d2073          	csrs	0x662,s10
 614:	6976                	flw	fs2,92(sp)
        for (i = 0; i < size_N; ++i){
 616:	69626973          	csrrsi	s2,0x696,4
 61a:	696c                	flw	fa1,84(a0)
 61c:	7974                	flw	fa3,116(a0)
 61e:	683d                	lui	a6,0xf
        for (i = 0; i < size_N; ++i){
 620:	6469                	lui	s0,0x1a
 622:	6564                	flw	fs1,76(a0)
 624:	006e                	c.slli	zero,0x1b
 626:	755f 756e 6573      	0x6573756e755f
        for (i = 0; i < size_N; ++i){
 62c:	5f64                	lw	s1,124(a4)
 62e:	6172                	flw	ft2,28(sp)
        for(i = 0; i < size_N; ++i){
 630:	646e                	flw	fs0,216(sp)
 632:	6c00                	flw	fs0,24(s0)
 634:	6e69                	lui	t3,0x1a
        for (i = size_N-1; i >= 0; i = i-1){
 636:	0065                	c.nop	25
 638:	775f 7364 5f00      	0x5f007364775f
 63e:	745f 5f6d 6477      	0x64775f6d745f
 644:	7961                	lui	s2,0xffff8
 646:	5f00                	lw	s0,56(a4)
            v[i] = v[i] % mod;
 648:	65756c67          	0x65756c67
        for (i = 0; i < size_N; ++i){
 64c:	6900                	flw	fs0,16(a0)
            v[i] = v[i] % mod;
 64e:	736e                	flw	ft6,248(sp)
 650:	7274                	flw	fa3,100(a2)
 652:	655f 7571 6e00      	0x6e007571655f
                product[i] = product[i] + mod;
 658:	7274                	flw	fa3,100(a2)
 65a:	5f75                	li	t5,-3
            while (product[i] < 0) {
 65c:	6e65                	lui	t3,0x19
 65e:	70727963          	bgeu	tp,t2,d70 <ntru_deceypt+0x56>
            product[i] = product[i] % mod;
 662:	0074                	addi	a3,sp,12
 664:	735f 6973 657a      	0x657a6973735f
 66a:	745f 5f00 366c      	0x366c5f00745f
            num_temp[i] = num_temp[i] - product[i];
 670:	6134                	flw	fa3,64(a0)
 672:	625f 6675 6400      	0x64006675625f
 678:	6e65                	lui	t3,0x19
        for (i = 0; i < size_N; ++i){
 67a:	6d75                	lui	s10,0x1d
 67c:	5f00                	lw	s0,56(a4)
            num_temp[i] = num_temp[i] - product[i];
 67e:	5f676973          	csrrsi	s2,0x5f6,14
 682:	7566                	flw	fa0,120(sp)
        for (i = 0; i < size_N; ++i){
 684:	636e                	flw	ft6,216(sp)
                num_temp[i] = num_temp[i] + mod;
 686:	5f00                	lw	s0,56(a4)
 688:	626e                	flw	ft4,216(sp)
            while (num_temp[i] < 0){
 68a:	6675                	lui	a2,0x1d
 68c:	5f00                	lw	s0,56(a4)
 68e:	6e75                	lui	t3,0x1d
            num_temp[i] = num_temp[i] % mod;
 690:	7375                	lui	t1,0xffffd
 692:	6465                	lui	s0,0x19
        for (i = 0; i < size_N; ++i){
 694:	7000                	flw	fs0,32(s0)
 696:	52796c6f          	jal	s8,973bc <_stack_start+0x873bc>
            num_temp[i] = num_temp[i] % mod;
 69a:	7300                	flw	fs0,32(a4)
        for (i = 0; i < size_N; ++i){
 69c:	7a69                	lui	s4,0xffffa
            q[i] = q[i] + v[i];
 69e:	5f65                	li	t5,-7
 6a0:	0044                	addi	s1,sp,4
 6a2:	5f5f 6d74 695f      	0x695f6d745f5f
        for(i = 0; i < size_N; ++i){
 6a8:	74736473          	csrrsi	s0,0x747,6
            q[i] = q[i] + v[i];
 6ac:	5f00                	lw	s0,56(a4)
            q[i] = q[i] % mod;
 6ae:	6f6c                	flw	fa1,92(a4)
 6b0:	746c6163          	bltu	s8,t1,df2 <reset_handler+0xc>
 6b4:	6d69                	lui	s10,0x1a
        for(i = 0; i < size_N; ++i){
 6b6:	5f65                	li	t5,-7
            if( num_temp[i] != 0 )
 6b8:	7562                	flw	fa0,56(sp)
        for (i = size_N-1; i >= 0; i = i-1){
 6ba:	0066                	c.slli	zero,0x19
 6bc:	635f 6f6c 6573      	0x65736f6c635f
            v[i] = 0;
 6c2:	5f00                	lw	s0,56(a4)
 6c4:	3472                	fld	fs0,312(sp)
 6c6:	0038                	addi	a4,sp,8
        for (i = 0; i < size_N; ++i){
 6c8:	6d5f 7462 776f      	0x776f74626d5f
 6ce:	74735f63          	bge	t1,t2,e2c <reset_handler+0x46>
        result[i] = num_temp[i-size_N];
 6d2:	7461                	lui	s0,0xffff8
 6d4:	0065                	c.nop	25
 6d6:	705f 7335 6d00      	0x6d007335705f
    for(i = size_N; i < (2*size_N); ++i){
 6dc:	6961                	lui	s2,0x18
 6de:	006e                	c.slli	zero,0x1b
 6e0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6e6:	6164                	flw	fs1,68(a0)
    int ri_2[size]; // MX-ring poly, a
 6e8:	0079                	c.nop	30
 6ea:	657a6973          	csrrsi	s2,0x657,20
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6ee:	615f 7300 7a69      	0x7a697300615f
 6f4:	5f65                	li	t5,-7
 6f6:	0062                	c.slli	zero,0x18
 6f8:	30747263          	bgeu	s0,t2,9fc <generate_keys+0x6c>
 6fc:	532e                	lw	t1,232(sp)
 6fe:	2f00                	fld	fs0,24(a4)
 700:	6f68                	flw	fa0,92(a4)
 702:	656d                	lui	a0,0x1b
 704:	706f742f          	0x706f742f
    int ri_2[size]; // MX-ring poly, a
 708:	6c61                	lui	s8,0x18
 70a:	65442f63          	0x65442f63
    int ri_1[size]; // f-random poly, f[N] = 0, b
 70e:	6f746b73          	csrrsi	s6,0x6f7,8
 712:	2f70                	fld	fa2,216(a4)
    int ri[size];
 714:	7270                	flw	fa2,100(a2)
 716:	6c656a6f          	jal	s4,56ddc <_stack_start+0x46ddc>
    int ti_1[size]; // ti_1[0] = 1
 71a:	7265                	lui	tp,0xffff9
 71c:	636c6f2f          	0x636c6f2f
    int ti[size];
 720:	6d75                	lui	s10,0x1d
 722:	652e332f          	0x652e332f
    int qi_1[size];
 726:	7571                	lui	a0,0xffffc
 728:	4700                	lw	s0,8(a4)
 72a:	554e                	lw	a0,240(sp)
    int temp[size];
 72c:	4120                	lw	s0,64(a0)
 72e:	2e322053          	0x2e322053
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 732:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x1dc>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0096                	slli	ra,ra,0x5
  2e:	0000                	unimp
  30:	0058                	addi	a4,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0128                	addi	a0,sp,136
  3a:	0000                	unimp
  3c:	020c                	addi	a1,sp,256
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4250                	lw	a2,4(a2)
  44:	0492                	slli	s1,s1,0x4
  46:	9346                	add	t1,t1,a7
  48:	4805                	li	a6,1
  4a:	0a98                	addi	a4,sp,336
  4c:	88500d9b          	0x88500d9b
  50:	8902                	jr	s2
  52:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  56:	4e00                	lw	s0,24(a2)
  58:	0694                	addi	a3,sp,832
  5a:	0795                	addi	a5,a5,5
  5c:	0896                	slli	a7,a7,0x5
  5e:	0b990997          	auipc	s3,0xb990
  62:	0c9a                	slli	s9,s9,0x6
  64:	0181                	addi	gp,gp,0
  66:	0a011403          	lh	s0,160(sp)
  6a:	020c                	addi	a1,sp,256
  6c:	4250                	lw	a2,4(a2)
  6e:	42c1                	li	t0,16
  70:	42c8                	lw	a0,4(a3)
  72:	42c9                	li	t0,18
  74:	42d2                	lw	t0,20(sp)
  76:	42d442d3          	0x42d442d3
  7a:	42d5                	li	t0,21
  jal x0, default_exc_handler
  7c:	42d6                	lw	t0,84(sp)
  7e:	42d842d7          	0x42d842d7
  jal x0, reset_handler
  82:	42d9                	li	t0,22
  jal x0, default_exc_handler
  84:	42da                	lw	t0,148(sp)
  86:	000e4adb          	0xe4adb
  jal x0, default_exc_handler
  8a:	0b42                	slli	s6,s6,0x10
    asm volatile(
  8c:	0054                	addi	a3,sp,4
  8e:	0000                	unimp
}
  90:	0000                	unimp
    switch(length%3) {
  92:	0000                	unimp
  94:	0334                	addi	a3,sp,392
  96:	0000                	unimp
  98:	0170                	addi	a2,sp,140
  9a:	0000                	unimp
  9c:	0e42                	slli	t3,t3,0x10
  9e:	4650                	lw	a2,12(a2)
  a0:	0795                	addi	a5,a5,5
  a2:	9648                	0x9648
  a4:	9708                	0x9708
            for (i = 0; i < (length / 3); i++) {
  a6:	6209                	lui	tp,0x2
  a8:	0288                	addi	a0,sp,320
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
            for (i = 0; i < ((length-2) / 3); i++) {
  b2:	0a98                	addi	a4,sp,336
  b4:	0b99                	addi	s7,s7,6
  b6:	0c9a                	slli	s9,s9,0x6
  b8:	01810d9b          	0x1810d9b
  bc:	0c42                	slli	s8,s8,0x10
  be:	0008                	0x8
  c0:	0c011603          	lh	a2,192(sp)
            a1[length-1] = a2[length-1];
  c4:	5002                	0x5002
  c6:	c142                	sw	a6,128(sp)
  c8:	c842                	sw	a6,16(sp)
  ca:	c942                	sw	a6,144(sp)
  cc:	d242                	sw	a6,36(sp)
  ce:	d342                	sw	a6,164(sp)
  d0:	d442                	sw	a6,40(sp)
  d2:	d542                	sw	a6,168(sp)
            for (i = 0; i < ((length-1) / 3); i++) {
  d4:	d642                	sw	a6,44(sp)
  d6:	d742                	sw	a6,172(sp)
  d8:	d842                	sw	a6,48(sp)
  da:	d942                	sw	a6,176(sp)
  dc:	da42                	sw	a6,52(sp)
  de:	db42                	sw	a6,180(sp)
  e0:	0e4a                	slli	t3,t3,0x12
  e2:	0000                	unimp
            a1[length-1] = a2[length-1];
  e4:	0054                	addi	a3,sp,4
            a1[length-2] = a2[length-2];
  e6:	0000                	unimp
  e8:	0000                	unimp
  ea:	0000                	unimp
  ec:	04a4                	addi	s1,sp,584
  ee:	0000                	unimp
} //end of function
  f0:	023e                	slli	tp,tp,0xf
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  f2:	0000                	unimp
  f4:	0e46                	slli	t3,t3,0x11
    asm volatile(
  f6:	5e40                	lw	s0,60(a2)
  f8:	0288                	addi	a0,sp,320
  fa:	0389                	addi	t2,t2,2
  fc:	0492                	slli	s1,s1,0x4
  fe:	06940593          	addi	a1,s0,105
            for (i = 0; i < (length / 3); i++) {
 102:	0795                	addi	a5,a5,5
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 104:	0896                	slli	a7,a7,0x5
 106:	0a980997          	auipc	s3,0xa980
    asm volatile(
 10a:	0b99                	addi	s7,s7,6
 10c:	0c9a                	slli	s9,s9,0x6
 10e:	01810d9b          	0x1810d9b
            for (i = 0; i < ((length-1) / 3); i++) {
 112:	0c42                	slli	s8,s8,0x10
 114:	0008                	0x8
                instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
 116:	0a010203          	lb	tp,160(sp)
    asm volatile(
 11a:	020c                	addi	a1,sp,256
 11c:	4240                	lw	s0,4(a2)
 11e:	42c1                	li	t0,16
 120:	42c8                	lw	a0,4(a3)
 122:	42c9                	li	t0,18
            for (i = 0; i < ((length-2) / 3); i++) {
 124:	42d2                	lw	t0,20(sp)
 126:	42d442d3          	0x42d442d3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 12a:	42d5                	li	t0,21
 12c:	42d6                	lw	t0,84(sp)
 12e:	42d842d7          	0x42d842d7
    int line[size_b][size_a + size_b];
 132:	42d9                	li	t0,22
 134:	42da                	lw	t0,148(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 136:	000e4adb          	0xe4adb
    int line[size_b][size_a + size_b];
 13a:	0b42                	slli	s6,s6,0x10
 13c:	0054                	addi	a3,sp,4
 13e:	0000                	unimp
 140:	0000                	unimp
 142:	0000                	unimp
 144:	06e2                	slli	a3,a3,0x18
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 146:	0000                	unimp
 148:	02ae                	slli	t0,t0,0xb
 14a:	0000                	unimp
 14c:	0e46                	slli	t3,t3,0x11
 14e:	5e50                	lw	a2,60(a2)
 150:	0288                	addi	a0,sp,320
 152:	0389                	addi	t2,t2,2
 154:	0492                	slli	s1,s1,0x4
 156:	06940593          	addi	a1,s0,105
 15a:	0795                	addi	a5,a5,5
 15c:	0896                	slli	a7,a7,0x5
    int line[size_b][size_a + size_b];
 15e:	0a980997          	auipc	s3,0xa980
    int pola[size_a];
 162:	0b99                	addi	s7,s7,6
    int line[size_b][size_a + size_b];
 164:	0c9a                	slli	s9,s9,0x6
    int pola[size_a];
 166:	01810d9b          	0x1810d9b
    int line[size_b][size_a + size_b];
 16a:	0c42                	slli	s8,s8,0x10
    int pola[size_a];
 16c:	0008                	0x8
    int line[size_b][size_a + size_b];
 16e:	0a015c03          	lhu	s8,160(sp)
    int pola[size_a];
 172:	020c                	addi	a1,sp,256
    int polb[size_b];
 174:	4250                	lw	a2,4(a2)
 176:	42c1                	li	t0,16
 178:	42c8                	lw	a0,4(a3)
    int pola[size_a];
 17a:	42c9                	li	t0,18
    int polb[size_b];
 17c:	42d2                	lw	t0,20(sp)
 17e:	42d442d3          	0x42d442d3
            line[i][j] = 0;
 182:	42d5                	li	t0,21
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 184:	42d6                	lw	t0,84(sp)
 186:	42d842d7          	0x42d842d7
    int pola[size_a];
 18a:	42d9                	li	t0,22
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 18c:	42da                	lw	t0,148(sp)
    int line[size_b][size_a + size_b];
 18e:	000e4adb          	0xe4adb
    int polb[size_b];
 192:	0b42                	slli	s6,s6,0x10
            line[i][j] = 0;
 194:	0054                	addi	a3,sp,4
 196:	0000                	unimp
 198:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 19a:	0000                	unimp
 19c:	0990                	addi	a2,sp,208
            product[j] = 0;
 19e:	0000                	unimp
 1a0:	02f4                	addi	a3,sp,332
 1a2:	0000                	unimp
 1a4:	0e42                	slli	t3,t3,0x10
    for (i = 0; i < size_b; ++i){
 1a6:	03f0                	addi	a2,sp,460
 1a8:	814c                	0x814c
    array_equ(pola,a,size_a);
 1aa:	8801                	andi	s0,s0,0
 1ac:	8902                	jr	s2
 1ae:	080c4203          	lbu	tp,128(s8)
 1b2:	6400                	flw	fs0,8(s0)
 1b4:	0492                	slli	s1,s1,0x4
 1b6:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_a; ++i){
 1ba:	0795                	addi	a5,a5,5
 1bc:	0896                	slli	a7,a7,0x5
 1be:	0c9a0997          	auipc	s3,0xc9a0
 1c2:	0a98                	addi	a4,sp,336
 1c4:	0b99                	addi	s7,s7,6
 1c6:	0a01dc03          	lhu	s8,160(gp) # a0 <array_equ+0xe>
    array_equ(polb,b,size_b);
 1ca:	020c                	addi	a1,sp,256
 1cc:	03f0                	addi	a2,sp,460
 1ce:	c144                	sw	s1,4(a0)
 1d0:	c844                	sw	s1,20(s0)
    for (i = 0; i < size_b; ++i){
 1d2:	c944                	sw	s1,20(a0)
 1d4:	d244                	sw	s1,36(a2)
 1d6:	d344                	sw	s1,36(a4)
 1d8:	d444                	sw	s1,44(s0)
    if(star_mult == 1){
 1da:	d544                	sw	s1,44(a0)
 1dc:	d644                	sw	s1,44(a2)
 1de:	d744                	sw	s1,44(a4)
 1e0:	d844                	sw	s1,52(s0)
 1e2:	d944                	sw	s1,52(a0)
 1e4:	da44                	sw	s1,52(a2)
 1e6:	0e4a                	slli	t3,t3,0x12
 1e8:	4200                	lw	s0,0(a2)
 1ea:	0034000b          	0x34000b
        for (j = size_b -1; j >= 0; j = j-1){
 1ee:	0000                	unimp
 1f0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 1f2:	0000                	unimp
 1f4:	0c84                	addi	s1,sp,592
            product[j] = 0;
 1f6:	0000                	unimp
 1f8:	0096                	slli	ra,ra,0x5
 1fa:	0000                	unimp
            line[i][j] = 0;
 1fc:	0e42                	slli	t3,t3,0x10
 1fe:	01e0                	addi	s0,sp,204
            product[j] = 0;
 200:	8846                	mv	a6,a7
 202:	8902                	jr	s2
        for(j = 0; j < size_a + size_b -1; ++j){
 204:	5a049203          	lh	tp,1440(s1) # bfc <generate_keys+0x26c>
 208:	0181                	addi	gp,gp,0
 20a:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_b; ++i){
 20e:	5402                	lw	s0,32(sp)
 210:	c10a                	sw	sp,128(sp)
 212:	c842                	sw	a6,16(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 214:	c942                	sw	a6,144(sp)
 216:	d242                	sw	a6,36(sp)
            pola[i] = pola[i] + mod;
 218:	d342                	sw	a6,164(sp)
 21a:	d442                	sw	a6,40(sp)
        while (pola[i] < 0){
 21c:	0e42                	slli	t3,t3,0x10
 21e:	4200                	lw	s0,0(a2)
 220:	0000000b          	0xb
        pola[i] = pola[i] % mod;
 224:	0040                	addi	s0,sp,4
    for (i = 0; i < size_a; ++i){
 226:	0000                	unimp
 228:	0000                	unimp
        pola[i] = pola[i] % mod;
 22a:	0000                	unimp
 22c:	0d1a                	slli	s10,s10,0x6
    for (i = 0; i < size_a; ++i){
 22e:	0000                	unimp
            polb[i] = polb[i] + mod;
 230:	00c8                	addi	a0,sp,68
 232:	0000                	unimp
        while (polb[i] < 0){
 234:	0e42                	slli	t3,t3,0x10
 236:	4430                	lw	a2,72(s0)
 238:	0288                	addi	a0,sp,320
        polb[i] = polb[i] % mod;
 23a:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
    for (i = 0; i < size_b; ++i){
 23e:	9504                	0x9504
 240:	58099707          	0x58099707
        polb[i] = polb[i] % mod;
 244:	0181                	addi	gp,gp,0
    for (i = 0; i < size_b; ++i){
 246:	0389                	addi	t2,t2,2
    if(star_mult == 1){
 248:	0694                	addi	a3,sp,832
        for (j = size_b -1; j >= 0; j = j-1){
 24a:	0896                	slli	a7,a7,0x5
 24c:	5202                	lw	tp,32(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 24e:	c10a                	sw	sp,128(sp)
    for (i = 0; i < size_b; ++i){
 250:	c842                	sw	a6,16(sp)
 252:	c942                	sw	a6,144(sp)
 254:	d242                	sw	a6,36(sp)
 256:	d342                	sw	a6,164(sp)
 258:	d442                	sw	a6,40(sp)
 25a:	d542                	sw	a6,168(sp)
 25c:	d642                	sw	a6,44(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 25e:	d742                	sw	a6,172(sp)
 260:	0e42                	slli	t3,t3,0x10
 262:	4200                	lw	s0,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 264:	0000000b          	0xb
 268:	002c                	addi	a1,sp,8
}
 26a:	0000                	unimp
 26c:	0000                	unimp
 26e:	0000                	unimp
 270:	0fde                	slli	t6,t6,0x17
 272:	0000                	unimp
 274:	0138                	addi	a4,sp,136
 276:	0000                	unimp
 278:	0e44                	addi	s1,sp,788
 27a:	08b0                	addi	a2,sp,88
 27c:	815e                	mv	sp,s7
 27e:	8801                	andi	s0,s0,0
 280:	8902                	jr	s2
 282:	03049203          	lh	tp,48(s1)
 286:	00f8                	addi	a4,sp,76
 288:	c10a                	sw	sp,128(sp)
 28a:	c844                	sw	s1,20(s0)
 28c:	c944                	sw	s1,20(a0)
 28e:	d244                	sw	s1,36(a2)
 290:	0e46                	slli	t3,t3,0x11
 292:	4200                	lw	s0,0(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
 294:	0000000b          	0xb

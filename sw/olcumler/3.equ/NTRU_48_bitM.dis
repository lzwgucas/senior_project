
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4f30006f          	j	d6e <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4f30006f          	j	d72 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4eb0006f          	j	d6e <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4e70006f          	j	d6e <default_exc_handler>

Disassembly of section .text:

0000008c <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
      90:	8082                	ret

00000092 <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
      a0:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_equ+0xa>

000000b4 <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	715d                	addi	sp,sp,-80
      b6:	c0ca                	sw	s2,64(sp)
      b8:	8936                	mv	s2,a3
      ba:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
      bc:	96ae                	add	a3,a3,a1
      be:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c2:	d462                	sw	s8,40(sp)
      c4:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
      c6:	fff68c13          	addi	s8,a3,-1
      ca:	00269d93          	slli	s11,a3,0x2
      ce:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	c4a2                	sw	s0,72(sp)
      d4:	c2a6                	sw	s1,68(sp)
      d6:	0880                	addi	s0,sp,80
      d8:	dc52                	sw	s4,56(sp)
      da:	da56                	sw	s5,52(sp)
      dc:	d85a                	sw	s6,48(sp)
      de:	d65e                	sw	s7,44(sp)
      e0:	d266                	sw	s9,36(sp)
      e2:	d06a                	sw	s10,32(sp)
      e4:	c686                	sw	ra,76(sp)
      e6:	faf42c23          	sw	a5,-72(s0)
    int line[size_b][size_a + size_b];
      ea:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
      ec:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
      f0:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
      f2:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
      f4:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
      f8:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
      fa:	8d0a                	mv	s10,sp
    int pola[size_a];
      fc:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     100:	00f98793          	addi	a5,s3,15
     104:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     106:	8b0a                	mv	s6,sp
    int polb[size_b];
     108:	40f10133          	sub	sp,sp,a5

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     10c:	002dd793          	srli	a5,s11,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     110:	882e                	mv	a6,a1
     112:	88b2                	mv	a7,a2
    int pola[size_a];
     114:	fff58a93          	addi	s5,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     118:	8bba                	mv	s7,a4
    int line[size_b][size_a + size_b];
     11a:	fff90c93          	addi	s9,s2,-1
    int polb[size_b];
     11e:	848a                	mv	s1,sp
            line[i][j] = 0;
     120:	faf42e23          	sw	a5,-68(s0)
     124:	8a6a                	mv	s4,s10
    for (i = 0; i < size_b; ++i){
     126:	85ea                	mv	a1,s10
     128:	4601                	li	a2,0
            product[j] = 0;
     12a:	00001e97          	auipc	t4,0x1
     12e:	10ee8e93          	addi	t4,t4,270 # 1238 <_bss_start>
    for (i = 0; i < size_b; ++i){
     132:	07264663          	blt	a2,s2,19e <polymult+0xea>
        }
    }

    array_equ(pola,a,size_a);
     136:	8642                	mv	a2,a6
     138:	85aa                	mv	a1,a0
     13a:	855a                	mv	a0,s6
     13c:	fb142823          	sw	a7,-80(s0)
     140:	fb042a23          	sw	a6,-76(s0)
     144:	37b9                	jal	92 <array_equ>
    // make mod calculations
    for (i = 0; i < size_a; ++i){
     146:	fb442803          	lw	a6,-76(s0)
     14a:	fb042883          	lw	a7,-80(s0)
     14e:	865a                	mv	a2,s6
     150:	4581                	li	a1,0
     152:	0505cb63          	blt	a1,a6,1a8 <polymult+0xf4>
            pola[i] = pola[i] + mod;
        }
        pola[i] = pola[i] % mod;
    }

    array_equ(polb,b,size_b);
     156:	864a                	mv	a2,s2
     158:	85c6                	mv	a1,a7
     15a:	8526                	mv	a0,s1
     15c:	3f1d                	jal	92 <array_equ>
//
    for (i = 0; i < size_b; ++i){
     15e:	8626                	mv	a2,s1
     160:	4581                	li	a1,0
     162:	0525cf63          	blt	a1,s2,1c0 <polymult+0x10c>




    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     166:	fb842703          	lw	a4,-72(s0)
     16a:	4785                	li	a5,1
     16c:	94ce                	add	s1,s1,s3
     16e:	06f70363          	beq	a4,a5,1d4 <polymult+0x120>
     172:	19f1                	addi	s3,s3,-4
     174:	ffcd8593          	addi	a1,s11,-4
     178:	99ea                	add	s3,s3,s10
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     17a:	060cc063          	bltz	s9,1da <polymult+0x126>
            for (k = size_a-1; k >= 0; k = k-1 ){
     17e:	87d6                	mv	a5,s5
     180:	a0c5                	j	260 <polymult+0x1ac>
            product[j] = 0;
     182:	00279e13          	slli	t3,a5,0x2
     186:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     188:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     18c:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	0785                	addi	a5,a5,1
     192:	0311                	addi	t1,t1,4
     194:	ff87c7e3          	blt	a5,s8,182 <polymult+0xce>
    for (i = 0; i < size_b; ++i){
     198:	0605                	addi	a2,a2,1
     19a:	95ee                	add	a1,a1,s11
     19c:	bf59                	j	132 <polymult+0x7e>
     19e:	832e                	mv	t1,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	4781                	li	a5,0
     1a2:	bfcd                	j	194 <polymult+0xe0>
            pola[i] = pola[i] + mod;
     1a4:	97de                	add	a5,a5,s7
     1a6:	c21c                	sw	a5,0(a2)
        while (pola[i] < 0){
     1a8:	421c                	lw	a5,0(a2)
     1aa:	fe07cde3          	bltz	a5,1a4 <polymult+0xf0>
        pola[i] = pola[i] % mod;
     1ae:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_a; ++i){
     1b2:	0585                	addi	a1,a1,1
     1b4:	0611                	addi	a2,a2,4
        pola[i] = pola[i] % mod;
     1b6:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_a; ++i){
     1ba:	bf61                	j	152 <polymult+0x9e>
            polb[i] = polb[i] + mod;
     1bc:	97de                	add	a5,a5,s7
     1be:	c21c                	sw	a5,0(a2)
        while (polb[i] < 0){
     1c0:	421c                	lw	a5,0(a2)
     1c2:	fe07cde3          	bltz	a5,1bc <polymult+0x108>
        polb[i] = polb[i] % mod;
     1c6:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_b; ++i){
     1ca:	0585                	addi	a1,a1,1
     1cc:	0611                	addi	a2,a2,4
        polb[i] = polb[i] % mod;
     1ce:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_b; ++i){
     1d2:	bf41                	j	162 <polymult+0xae>
    if(star_mult == 1){
     1d4:	85ea                	mv	a1,s10
        for (j = size_b -1; j >= 0; j = j-1){
     1d6:	060cd763          	bgez	s9,244 <polymult+0x190>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     1da:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     1dc:	0b274463          	blt	a4,s2,284 <polymult+0x1d0>
     1e0:	00001717          	auipc	a4,0x1
     1e4:	05870713          	addi	a4,a4,88 # 1238 <_bss_start>
     1e8:	863a                	mv	a2,a4
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	4681                	li	a3,0
     1ec:	0d86c063          	blt	a3,s8,2ac <polymult+0x1f8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	4781                	li	a5,0
     1f2:	0b87cf63          	blt	a5,s8,2b0 <polymult+0x1fc>
 

    return_address1 = &product[0];

    return return_address1;
}
     1f6:	fb040113          	addi	sp,s0,-80
     1fa:	40b6                	lw	ra,76(sp)
     1fc:	4426                	lw	s0,72(sp)
     1fe:	4496                	lw	s1,68(sp)
     200:	4906                	lw	s2,64(sp)
     202:	59f2                	lw	s3,60(sp)
     204:	5a62                	lw	s4,56(sp)
     206:	5ad2                	lw	s5,52(sp)
     208:	5b42                	lw	s6,48(sp)
     20a:	5bb2                	lw	s7,44(sp)
     20c:	5c22                	lw	s8,40(sp)
     20e:	5c92                	lw	s9,36(sp)
     210:	5d02                	lw	s10,32(sp)
     212:	4df2                	lw	s11,28(sp)
     214:	00001517          	auipc	a0,0x1
     218:	02450513          	addi	a0,a0,36 # 1238 <_bss_start>
     21c:	6161                	addi	sp,sp,80
     21e:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     220:	00279613          	slli	a2,a5,0x2
     224:	00c58533          	add	a0,a1,a2
     228:	965a                	add	a2,a2,s6
     22a:	4210                	lw	a2,0(a2)
     22c:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     232:	03060633          	mul	a2,a2,a6
     236:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     238:	fe07d4e3          	bgez	a5,220 <polymult+0x16c>
        for (j = size_b -1; j >= 0; j = j-1){
     23c:	1cfd                	addi	s9,s9,-1
     23e:	14f1                	addi	s1,s1,-4
     240:	95ee                	add	a1,a1,s11
     242:	bf51                	j	1d6 <polymult+0x122>
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	87d6                	mv	a5,s5
     246:	bfcd                	j	238 <polymult+0x184>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	00279613          	slli	a2,a5,0x2
     24c:	00c98533          	add	a0,s3,a2
     250:	965a                	add	a2,a2,s6
     252:	4210                	lw	a2,0(a2)
     254:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	03060633          	mul	a2,a2,a6
     25e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	fe07d4e3          	bgez	a5,248 <polymult+0x194>
        for (j = size_b -1; j >= 0; j = j-1){
     264:	1cfd                	addi	s9,s9,-1
     266:	14f1                	addi	s1,s1,-4
     268:	99ae                	add	s3,s3,a1
     26a:	bf01                	j	17a <polymult+0xc6>
            line[i][j] = line[i][j] % mod;
     26c:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     26e:	0605                	addi	a2,a2,1
     270:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     272:	0375e5b3          	rem	a1,a1,s7
     276:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     27a:	ff8649e3          	blt	a2,s8,26c <polymult+0x1b8>
    for (i = 0; i < size_b; ++i){
     27e:	0705                	addi	a4,a4,1
     280:	9a6e                	add	s4,s4,s11
     282:	bfa9                	j	1dc <polymult+0x128>
     284:	87d2                	mv	a5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     286:	4601                	li	a2,0
     288:	bfcd                	j	27a <polymult+0x1c6>
            product[j] += line[i][j];
     28a:	fbc42783          	lw	a5,-68(s0)
     28e:	4208                	lw	a0,0(a2)
     290:	02f587b3          	mul	a5,a1,a5
        for(i = 0; i < size_b; ++i){
     294:	0585                	addi	a1,a1,1
            product[j] += line[i][j];
     296:	97b6                	add	a5,a5,a3
     298:	078a                	slli	a5,a5,0x2
     29a:	97ea                	add	a5,a5,s10
     29c:	439c                	lw	a5,0(a5)
     29e:	97aa                	add	a5,a5,a0
     2a0:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     2a2:	ff25c4e3          	blt	a1,s2,28a <polymult+0x1d6>
    for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	0685                	addi	a3,a3,1
     2a8:	0611                	addi	a2,a2,4
     2aa:	b789                	j	1ec <polymult+0x138>
        for(i = 0; i < size_b; ++i){
     2ac:	4581                	li	a1,0
     2ae:	bfd5                	j	2a2 <polymult+0x1ee>
        product[j] = product[j] % mod;
     2b0:	4314                	lw	a3,0(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	0785                	addi	a5,a5,1
     2b4:	0711                	addi	a4,a4,4
        product[j] = product[j] % mod;
     2b6:	0376e6b3          	rem	a3,a3,s7
     2ba:	fed72e23          	sw	a3,-4(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     2be:	bf15                	j	1f2 <polymult+0x13e>

000002c0 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c0:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     2c2:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	da56                	sw	s5,52(sp)
     2c8:	00269a93          	slli	s5,a3,0x2
     2cc:	d85a                	sw	s6,48(sp)
     2ce:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     2d0:	00279b13          	slli	s6,a5,0x2
     2d4:	fff78b93          	addi	s7,a5,-1
     2d8:	035787b3          	mul	a5,a5,s5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2dc:	c4a2                	sw	s0,72(sp)
     2de:	c2a6                	sw	s1,68(sp)
     2e0:	c0ca                	sw	s2,64(sp)
     2e2:	de4e                	sw	s3,60(sp)
     2e4:	dc52                	sw	s4,56(sp)
     2e6:	d462                	sw	s8,40(sp)
     2e8:	d266                	sw	s9,36(sp)
     2ea:	d06a                	sw	s10,32(sp)
     2ec:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     2ee:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2f0:	c686                	sw	ra,76(sp)
     2f2:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     2f4:	9bc1                	andi	a5,a5,-16
     2f6:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     2fa:	00259793          	slli	a5,a1,0x2
     2fe:	07bd                	addi	a5,a5,15
     300:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     302:	890a                	mv	s2,sp
    int pola[size_a];
     304:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     308:	00fa8793          	addi	a5,s5,15
     30c:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     30e:	8d0a                	mv	s10,sp
    int polb[size_b];
     310:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     314:	89b6                	mv	s3,a3
     316:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     318:	fff68a13          	addi	s4,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31c:	8832                	mv	a6,a2
    int pola[size_a];
     31e:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     322:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     324:	8cca                	mv	s9,s2
     326:	86ca                	mv	a3,s2
     328:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     32a:	00001317          	auipc	t1,0x1
     32e:	16630313          	addi	t1,t1,358 # 1490 <product2>
    for (i = 0; i < size_b; ++i){
     332:	05374963          	blt	a4,s3,384 <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     336:	862e                	mv	a2,a1
     338:	85aa                	mv	a1,a0
     33a:	856a                	mv	a0,s10
     33c:	fb042e23          	sw	a6,-68(s0)
     340:	3b89                	jal	92 <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     342:	fbc42803          	lw	a6,-68(s0)
     346:	8526                	mv	a0,s1
     348:	864e                	mv	a2,s3
     34a:	85c2                	mv	a1,a6
     34c:	3399                	jal	92 <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     34e:	4785                	li	a5,1
     350:	01548533          	add	a0,s1,s5
     354:	04fd8c63          	beq	s11,a5,3ac <polymult2+0xec>
     358:	1af1                	addi	s5,s5,-4
     35a:	ffcb0693          	addi	a3,s6,-4
     35e:	9956                	add	s2,s2,s5
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     360:	040a4863          	bltz	s4,3b0 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     364:	87e2                	mv	a5,s8
     366:	a8ad                	j	3e0 <polymult2+0x120>
            product2[j] = 0;
     368:	00279893          	slli	a7,a5,0x2
     36c:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     36e:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     372:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     376:	0785                	addi	a5,a5,1
     378:	0611                	addi	a2,a2,4
     37a:	ff77c7e3          	blt	a5,s7,368 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     37e:	0705                	addi	a4,a4,1
     380:	96da                	add	a3,a3,s6
     382:	bf45                	j	332 <polymult2+0x72>
     384:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     386:	4781                	li	a5,0
     388:	bfcd                	j	37a <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	00279713          	slli	a4,a5,0x2
     38e:	00e906b3          	add	a3,s2,a4
     392:	976a                	add	a4,a4,s10
     394:	4318                	lw	a4,0(a4)
     396:	ffc52603          	lw	a2,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	02c70733          	mul	a4,a4,a2
     3a0:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3a2:	fe07d4e3          	bgez	a5,38a <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     3a6:	1a7d                	addi	s4,s4,-1
     3a8:	1571                	addi	a0,a0,-4
     3aa:	995a                	add	s2,s2,s6
     3ac:	000a5c63          	bgez	s4,3c4 <polymult2+0x104>
        }
    }

    // construct product
    for(i=0;i<size_b;++i){
        for(j=0;j<size_a+size_b-1;++j){
     3b0:	4601                	li	a2,0
    for(i=0;i<size_b;++i){
     3b2:	05365a63          	bge	a2,s3,406 <polymult2+0x146>
     3b6:	00001797          	auipc	a5,0x1
     3ba:	0da78793          	addi	a5,a5,218 # 1490 <product2>
     3be:	86e6                	mv	a3,s9
        for(j=0;j<size_a+size_b-1;++j){
     3c0:	4701                	li	a4,0
     3c2:	a82d                	j	3fc <polymult2+0x13c>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c4:	87e2                	mv	a5,s8
     3c6:	bff1                	j	3a2 <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c8:	00279713          	slli	a4,a5,0x2
     3cc:	00e90633          	add	a2,s2,a4
     3d0:	976a                	add	a4,a4,s10
     3d2:	4318                	lw	a4,0(a4)
     3d4:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3da:	02b70733          	mul	a4,a4,a1
     3de:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e0:	fe07d4e3          	bgez	a5,3c8 <polymult2+0x108>
        for (j = size_b -1; j >= 0; j = j-1){
     3e4:	1a7d                	addi	s4,s4,-1
     3e6:	1571                	addi	a0,a0,-4
     3e8:	9936                	add	s2,s2,a3
     3ea:	bf9d                	j	360 <polymult2+0xa0>
            product2[j] += line[i][j];
     3ec:	438c                	lw	a1,0(a5)
     3ee:	4288                	lw	a0,0(a3)
        for(j=0;j<size_a+size_b-1;++j){
     3f0:	0705                	addi	a4,a4,1
     3f2:	0791                	addi	a5,a5,4
            product2[j] += line[i][j];
     3f4:	95aa                	add	a1,a1,a0
     3f6:	feb7ae23          	sw	a1,-4(a5)
        for(j=0;j<size_a+size_b-1;++j){
     3fa:	0691                	addi	a3,a3,4
     3fc:	ff7748e3          	blt	a4,s7,3ec <polymult2+0x12c>
    for(i=0;i<size_b;++i){
     400:	0605                	addi	a2,a2,1
     402:	9cda                	add	s9,s9,s6
     404:	b77d                	j	3b2 <polymult2+0xf2>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     406:	fb040113          	addi	sp,s0,-80
     40a:	40b6                	lw	ra,76(sp)
     40c:	4426                	lw	s0,72(sp)
     40e:	4496                	lw	s1,68(sp)
     410:	4906                	lw	s2,64(sp)
     412:	59f2                	lw	s3,60(sp)
     414:	5a62                	lw	s4,56(sp)
     416:	5ad2                	lw	s5,52(sp)
     418:	5b42                	lw	s6,48(sp)
     41a:	5bb2                	lw	s7,44(sp)
     41c:	5c22                	lw	s8,40(sp)
     41e:	5c92                	lw	s9,36(sp)
     420:	5d02                	lw	s10,32(sp)
     422:	4df2                	lw	s11,28(sp)
     424:	00001517          	auipc	a0,0x1
     428:	06c50513          	addi	a0,a0,108 # 1490 <product2>
     42c:	6161                	addi	sp,sp,80
     42e:	8082                	ret

00000430 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     430:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	7139                	addi	sp,sp,-64
    int v[size_N];
     436:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	dc22                	sw	s0,56(sp)
     43a:	da26                	sw	s1,52(sp)
     43c:	d84a                	sw	s2,48(sp)
     43e:	d64e                	sw	s3,44(sp)
     440:	d452                	sw	s4,40(sp)
     442:	d256                	sw	s5,36(sp)
     444:	d05a                	sw	s6,32(sp)
     446:	ce5e                	sw	s7,28(sp)
     448:	cc62                	sw	s8,24(sp)
     44a:	ca66                	sw	s9,20(sp)
     44c:	c86a                	sw	s10,16(sp)
     44e:	c66e                	sw	s11,12(sp)
    int v[size_N];
     450:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     452:	de06                	sw	ra,60(sp)
     454:	0080                	addi	s0,sp,64
    int v[size_N];
     456:	40f10133          	sub	sp,sp,a5
     45a:	8d0a                	mv	s10,sp
    int q[size_N];
     45c:	40f10133          	sub	sp,sp,a5
     460:	8b0a                	mv	s6,sp
    int *product;
    int num_temp[size_N];
     462:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     466:	00269793          	slli	a5,a3,0x2
     46a:	07bd                	addi	a5,a5,15
    int num_temp[size_N];
     46c:	8c0a                	mv	s8,sp
    int denum_temp[size_D];
     46e:	9bc1                	andi	a5,a5,-16
     470:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	84ae                	mv	s1,a1
     476:	8db2                	mv	s11,a2
    int v[size_N];
     478:	fff58b93          	addi	s7,a1,-1

    array_equ(num_temp,num,size_N);
     47c:	862e                	mv	a2,a1
     47e:	85aa                	mv	a1,a0
     480:	8562                	mv	a0,s8
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	89b6                	mv	s3,a3
     484:	893a                	mv	s2,a4
    int denum_temp[size_D];
     486:	fff68c93          	addi	s9,a3,-1
    array_equ(num_temp,num,size_N);
     48a:	3121                	jal	92 <array_equ>
    int denum_temp[size_D];
     48c:	8a0a                	mv	s4,sp
    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     48e:	8ae2                	mv	s5,s8
     490:	8762                	mv	a4,s8
     492:	4681                	li	a3,0
     494:	0296cc63          	blt	a3,s1,4cc <polydiv+0x9c>
        num_temp[i] = num_temp[i] % mod;
    }


   
  array_equ(denum_temp,denum,size_D);
     498:	864e                	mv	a2,s3
     49a:	85ee                	mv	a1,s11
     49c:	8552                	mv	a0,s4
     49e:	3ed5                	jal	92 <array_equ>
    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     4a0:	8752                	mv	a4,s4
     4a2:	4681                	li	a3,0
     4a4:	0536c063          	blt	a3,s3,4e4 <polydiv+0xb4>
        }
        denum_temp[i] = denum_temp[i] % mod;
    }


    for (i = 0; i < size_N; ++i){
     4a8:	4781                	li	a5,0
     4aa:	0497c763          	blt	a5,s1,4f8 <polydiv+0xc8>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4ae:	002c9793          	slli	a5,s9,0x2
     4b2:	97d2                	add	a5,a5,s4
     4b4:	4398                	lw	a4,0(a5)
     4b6:	040cdc63          	bgez	s9,50e <polydiv+0xde>
    for (i = 0; i < size_N; ++i){
     4ba:	4781                	li	a5,0
     4bc:	4d81                	li	s11,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4be:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4c0:	052dca63          	blt	s11,s2,514 <polydiv+0xe4>
     4c4:	87de                	mv	a5,s7
     4c6:	a085                	j	526 <polydiv+0xf6>
            num_temp[i] = num_temp[i] + mod;
     4c8:	97ca                	add	a5,a5,s2
     4ca:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     4cc:	431c                	lw	a5,0(a4)
     4ce:	fe07cde3          	bltz	a5,4c8 <polydiv+0x98>
        num_temp[i] = num_temp[i] % mod;
     4d2:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_N; ++i){
     4d6:	0685                	addi	a3,a3,1
     4d8:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     4da:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     4de:	bf5d                	j	494 <polydiv+0x64>
            denum_temp[i] = denum_temp[i] + mod;
     4e0:	97ca                	add	a5,a5,s2
     4e2:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     4e4:	431c                	lw	a5,0(a4)
     4e6:	fe07cde3          	bltz	a5,4e0 <polydiv+0xb0>
        denum_temp[i] = denum_temp[i] % mod;
     4ea:	0327e7b3          	rem	a5,a5,s2
    for (i = 0; i < size_D; ++i) {
     4ee:	0685                	addi	a3,a3,1
     4f0:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     4f2:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     4f6:	b77d                	j	4a4 <polydiv+0x74>
        q[i] = 0;
     4f8:	00279713          	slli	a4,a5,0x2
     4fc:	00eb06b3          	add	a3,s6,a4
        v[i] = 0;
     500:	976a                	add	a4,a4,s10
        q[i] = 0;
     502:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     506:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     50a:	0785                	addi	a5,a5,1
     50c:	bf79                	j	4aa <polydiv+0x7a>
        if( denum_temp[i] != 0 )
     50e:	f755                	bnez	a4,4ba <polydiv+0x8a>
    for (i = size_D-1; i >= 0; i = i-1){
     510:	1cfd                	addi	s9,s9,-1
     512:	bf71                	j	4ae <polydiv+0x7e>
        if ( (b_N*u)%mod == 1 )
     514:	0327e633          	rem	a2,a5,s2
     518:	97ba                	add	a5,a5,a4
     51a:	fad605e3          	beq	a2,a3,4c4 <polydiv+0x94>
    for (u = 0; u < mod; ++u){
     51e:	0d85                	addi	s11,s11,1
     520:	b745                	j	4c0 <polydiv+0x90>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     522:	eb01                	bnez	a4,532 <polydiv+0x102>
    for (i = size_N-1; i >= 0; i = i-1){
     524:	17fd                	addi	a5,a5,-1
     526:	00279713          	slli	a4,a5,0x2
     52a:	9762                	add	a4,a4,s8
     52c:	4318                	lw	a4,0(a4)
     52e:	fe07dae3          	bgez	a5,522 <polydiv+0xf2>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     532:	0597d663          	bge	a5,s9,57e <polydiv+0x14e>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    array_equ(result,q,size_N);
     536:	8626                	mv	a2,s1
     538:	85da                	mv	a1,s6
     53a:	00001517          	auipc	a0,0x1
     53e:	1ae50513          	addi	a0,a0,430 # 16e8 <result>
     542:	3e81                	jal	92 <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
     544:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     548:	00001697          	auipc	a3,0x1
     54c:	1a068693          	addi	a3,a3,416 # 16e8 <result>
    for(i = size_N; i < (2*size_N); ++i){
     550:	10e4c663          	blt	s1,a4,65c <polydiv+0x22c>
    }

    return_address3 = &result[0];

    return return_address3;
}
     554:	fc040113          	addi	sp,s0,-64
     558:	50f2                	lw	ra,60(sp)
     55a:	5462                	lw	s0,56(sp)
     55c:	54d2                	lw	s1,52(sp)
     55e:	5942                	lw	s2,48(sp)
     560:	59b2                	lw	s3,44(sp)
     562:	5a22                	lw	s4,40(sp)
     564:	5a92                	lw	s5,36(sp)
     566:	5b02                	lw	s6,32(sp)
     568:	4bf2                	lw	s7,28(sp)
     56a:	4c62                	lw	s8,24(sp)
     56c:	4cd2                	lw	s9,20(sp)
     56e:	4d42                	lw	s10,16(sp)
     570:	4db2                	lw	s11,12(sp)
     572:	00001517          	auipc	a0,0x1
     576:	17650513          	addi	a0,a0,374 # 16e8 <result>
     57a:	6121                	addi	sp,sp,64
     57c:	8082                	ret
        v[(d-d2)] = u*r_d;
     57e:	03b70733          	mul	a4,a4,s11
     582:	419787b3          	sub	a5,a5,s9
     586:	078a                	slli	a5,a5,0x2
     588:	97ea                	add	a5,a5,s10
     58a:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     58c:	87ea                	mv	a5,s10
     58e:	4701                	li	a4,0
     590:	04974263          	blt	a4,s1,5d4 <polydiv+0x1a4>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	874a                	mv	a4,s2
     596:	86ce                	mv	a3,s3
     598:	4781                	li	a5,0
     59a:	866a                	mv	a2,s10
     59c:	85ce                	mv	a1,s3
     59e:	8552                	mv	a0,s4
     5a0:	3e11                	jal	b4 <polymult>
        for (i = 0; i < size_N; ++i){
     5a2:	872a                	mv	a4,a0
     5a4:	4681                	li	a3,0
     5a6:	0496c163          	blt	a3,s1,5e8 <polydiv+0x1b8>
     5aa:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     5ac:	4781                	li	a5,0
     5ae:	0497c763          	blt	a5,s1,5fc <polydiv+0x1cc>
     5b2:	8762                	mv	a4,s8
        for (i = 0; i < size_N; ++i){
     5b4:	4681                	li	a3,0
     5b6:	0696c063          	blt	a3,s1,616 <polydiv+0x1e6>
     5ba:	86da                	mv	a3,s6
        for(i = 0; i < size_N; ++i){
     5bc:	4701                	li	a4,0
     5be:	06974663          	blt	a4,s1,62a <polydiv+0x1fa>
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	87de                	mv	a5,s7
     5c4:	00279713          	slli	a4,a5,0x2
     5c8:	9762                	add	a4,a4,s8
     5ca:	4318                	lw	a4,0(a4)
     5cc:	0607dc63          	bgez	a5,644 <polydiv+0x214>
     5d0:	4681                	li	a3,0
     5d2:	a051                	j	656 <polydiv+0x226>
            v[i] = v[i] % mod;
     5d4:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     5d6:	0705                	addi	a4,a4,1
     5d8:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     5da:	0326e6b3          	rem	a3,a3,s2
     5de:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     5e2:	b77d                	j	590 <polydiv+0x160>
                product[i] = product[i] + mod;
     5e4:	97ca                	add	a5,a5,s2
     5e6:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     5e8:	431c                	lw	a5,0(a4)
     5ea:	fe07cde3          	bltz	a5,5e4 <polydiv+0x1b4>
            product[i] = product[i] % mod;
     5ee:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     5f2:	0685                	addi	a3,a3,1
     5f4:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     5f6:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     5fa:	b775                	j	5a6 <polydiv+0x176>
            num_temp[i] = num_temp[i] - product[i];
     5fc:	00279613          	slli	a2,a5,0x2
     600:	962a                	add	a2,a2,a0
     602:	4314                	lw	a3,0(a4)
     604:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     606:	0785                	addi	a5,a5,1
     608:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     60a:	8e91                	sub	a3,a3,a2
     60c:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     610:	bf79                	j	5ae <polydiv+0x17e>
                num_temp[i] = num_temp[i] + mod;
     612:	97ca                	add	a5,a5,s2
     614:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     616:	431c                	lw	a5,0(a4)
     618:	fe07cde3          	bltz	a5,612 <polydiv+0x1e2>
            num_temp[i] = num_temp[i] % mod;
     61c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < size_N; ++i){
     620:	0685                	addi	a3,a3,1
     622:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     624:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     628:	b779                	j	5b6 <polydiv+0x186>
            q[i] = q[i] + v[i];
     62a:	00271793          	slli	a5,a4,0x2
     62e:	97ea                	add	a5,a5,s10
     630:	4290                	lw	a2,0(a3)
     632:	439c                	lw	a5,0(a5)
        for(i = 0; i < size_N; ++i){
     634:	0705                	addi	a4,a4,1
     636:	0691                	addi	a3,a3,4
            q[i] = q[i] + v[i];
     638:	97b2                	add	a5,a5,a2
            q[i] = q[i] % mod;
     63a:	0327e7b3          	rem	a5,a5,s2
     63e:	fef6ae23          	sw	a5,-4(a3)
        for(i = 0; i < size_N; ++i){
     642:	bfb5                	j	5be <polydiv+0x18e>
            if( num_temp[i] != 0 )
     644:	f751                	bnez	a4,5d0 <polydiv+0x1a0>
        for (i = size_N-1; i >= 0; i = i-1){
     646:	17fd                	addi	a5,a5,-1
     648:	bfb5                	j	5c4 <polydiv+0x194>
            v[i] = 0;
     64a:	00269613          	slli	a2,a3,0x2
     64e:	966a                	add	a2,a2,s10
     650:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     654:	0685                	addi	a3,a3,1
     656:	fe96cae3          	blt	a3,s1,64a <polydiv+0x21a>
     65a:	bde1                	j	532 <polydiv+0x102>
        result[i] = num_temp[i-size_N];
     65c:	000aa603          	lw	a2,0(s5)
     660:	00249793          	slli	a5,s1,0x2
     664:	97b6                	add	a5,a5,a3
     666:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     668:	0485                	addi	s1,s1,1
     66a:	0a91                	addi	s5,s5,4
     66c:	b5d5                	j	550 <polydiv+0x120>

0000066e <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     66e:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     672:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     674:	07bd                	addi	a5,a5,15
     676:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     678:	c4a2                	sw	s0,72(sp)
     67a:	c2a6                	sw	s1,68(sp)
     67c:	c0ca                	sw	s2,64(sp)
     67e:	de4e                	sw	s3,60(sp)
     680:	dc52                	sw	s4,56(sp)
     682:	da56                	sw	s5,52(sp)
     684:	d85a                	sw	s6,48(sp)
     686:	d65e                	sw	s7,44(sp)
     688:	d462                	sw	s8,40(sp)
     68a:	d266                	sw	s9,36(sp)
     68c:	d06a                	sw	s10,32(sp)
     68e:	ce6e                	sw	s11,28(sp)
     690:	c686                	sw	ra,76(sp)
     692:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     694:	40f10133          	sub	sp,sp,a5
     698:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     69a:	40f10133          	sub	sp,sp,a5
     69e:	8a0a                	mv	s4,sp
    int ri[size];
     6a0:	40f10133          	sub	sp,sp,a5
     6a4:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     6a6:	40f10133          	sub	sp,sp,a5
     6aa:	8b0a                	mv	s6,sp
    int ti[size];
     6ac:	40f10133          	sub	sp,sp,a5
     6b0:	8c8a                	mv	s9,sp
    int qi_1[size];
     6b2:	40f10133          	sub	sp,sp,a5
     6b6:	8c0a                	mv	s8,sp
    int temp[size];
     6b8:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6bc:	8936                	mv	s2,a3
     6be:	8d2e                	mv	s10,a1
     6c0:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     6c2:	fff60d93          	addi	s11,a2,-1
    int temp[size];
     6c6:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     6c8:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     6ca:	00001697          	auipc	a3,0x1
     6ce:	27668693          	addi	a3,a3,630 # 1940 <ti_2>
    for (i = 0; i < size; ++i) {
     6d2:	0297c363          	blt	a5,s1,6f8 <ext_euclid+0x8a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     6d6:	85aa                	mv	a1,a0
     6d8:	8626                	mv	a2,s1
     6da:	854e                	mv	a0,s3
     6dc:	3a5d                	jal	92 <array_equ>
    array_equ(ri_1,polyf,size);
     6de:	8626                	mv	a2,s1
     6e0:	85ea                	mv	a1,s10
     6e2:	8552                	mv	a0,s4
     6e4:	327d                	jal	92 <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     6e6:	4785                	li	a5,1
     6e8:	00fb2023          	sw	a5,0(s6)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6ec:	00149793          	slli	a5,s1,0x1
     6f0:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     6f4:	4681                	li	a3,0
     6f6:	a02d                	j	720 <ext_euclid+0xb2>
        ti_2[i] = 0;
     6f8:	00279713          	slli	a4,a5,0x2
     6fc:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     700:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     702:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     706:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     70a:	0785                	addi	a5,a5,1
     70c:	b7d9                	j	6d2 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     70e:	97ca                	add	a5,a5,s2
     710:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     712:	431c                	lw	a5,0(a4)
     714:	fe07cde3          	bltz	a5,70e <ext_euclid+0xa0>
            ri_2[i] = ri_2[i] % mod;
     718:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     71c:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     71e:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     720:	00ddc663          	blt	s11,a3,72c <ext_euclid+0xbe>
     724:	00269713          	slli	a4,a3,0x2
     728:	974e                	add	a4,a4,s3
     72a:	b7e5                	j	712 <ext_euclid+0xa4>
     72c:	8752                	mv	a4,s4
        for (i = 0; i < N + 1; ++i) {
     72e:	4681                	li	a3,0
     730:	0eddd563          	bge	s11,a3,81a <ext_euclid+0x1ac>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     734:	874a                	mv	a4,s2
     736:	86a6                	mv	a3,s1
     738:	8652                	mv	a2,s4
     73a:	85a6                	mv	a1,s1
     73c:	854e                	mv	a0,s3
     73e:	39cd                	jal	430 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     740:	875e                	mv	a4,s7
     742:	87a6                	mv	a5,s1
     744:	fbc42683          	lw	a3,-68(s0)
     748:	0ed7c363          	blt	a5,a3,82e <ext_euclid+0x1c0>
     74c:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     74e:	4701                	li	a4,0
     750:	0eedd863          	bge	s11,a4,840 <ext_euclid+0x1d2>
     754:	8d56                	mv	s10,s5
     756:	8756                	mv	a4,s5
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     758:	4681                	li	a3,0
     75a:	10ddd263          	bge	s11,a3,85e <ext_euclid+0x1f0>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     75e:	874a                	mv	a4,s2
     760:	86a6                	mv	a3,s1
     762:	8652                	mv	a2,s4
     764:	85a6                	mv	a1,s1
     766:	8556                	mv	a0,s5
     768:	31e1                	jal	430 <polydiv>
     76a:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            qi_1[i] = res1[i];
//        }
    array_equ(qi_1,res1,size);
     76c:	8626                	mv	a2,s1
     76e:	8562                	mv	a0,s8
     770:	320d                	jal	92 <array_equ>

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     772:	8762                	mv	a4,s8
     774:	4681                	li	a3,0
     776:	10ddd063          	bge	s11,a3,876 <ext_euclid+0x208>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     77a:	874a                	mv	a4,s2
     77c:	4781                	li	a5,0
     77e:	86a6                	mv	a3,s1
     780:	865a                	mv	a2,s6
     782:	85a6                	mv	a1,s1
     784:	8562                	mv	a0,s8
     786:	323d                	jal	b4 <polymult>
     788:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            temp[i] = res2[i];
//        }
    array_equ(temp,res2,size);
     78a:	8626                	mv	a2,s1
     78c:	8556                	mv	a0,s5
     78e:	3211                	jal	92 <array_equ>

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     790:	4701                	li	a4,0
     792:	0eeddf63          	bge	s11,a4,890 <ext_euclid+0x222>
     796:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     798:	4701                	li	a4,0
     79a:	10edd663          	bge	s11,a4,8a6 <ext_euclid+0x238>
     79e:	8766                	mv	a4,s9
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     7a0:	4681                	li	a3,0
     7a2:	12ddd463          	bge	s11,a3,8ca <ext_euclid+0x25c>
        }
  

/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     7a6:	8626                	mv	a2,s1
     7a8:	85d2                	mv	a1,s4
     7aa:	854e                	mv	a0,s3
     7ac:	30dd                	jal	92 <array_equ>
array_equ(ri_1,ri,size);
     7ae:	8626                	mv	a2,s1
     7b0:	85de                	mv	a1,s7
     7b2:	8552                	mv	a0,s4
     7b4:	38f9                	jal	92 <array_equ>
array_equ(ti_2,ti_1,size);
     7b6:	8626                	mv	a2,s1
     7b8:	85da                	mv	a1,s6
     7ba:	00001517          	auipc	a0,0x1
     7be:	18650513          	addi	a0,a0,390 # 1940 <ti_2>
     7c2:	38c1                	jal	92 <array_equ>
array_equ(ti_1,ti,size);
     7c4:	8626                	mv	a2,s1
     7c6:	85e6                	mv	a1,s9
     7c8:	855a                	mv	a0,s6
     7ca:	30e1                	jal	92 <array_equ>
        controlR = 0;
     7cc:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     7ce:	4701                	li	a4,0
     7d0:	10edd763          	bge	s11,a4,8de <ext_euclid+0x270>
    while (controlR != 0) {
     7d4:	f20790e3          	bnez	a5,6f4 <ext_euclid+0x86>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7d8:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     7da:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7dc:	11274c63          	blt	a4,s2,8f4 <ext_euclid+0x286>
     7e0:	00001617          	auipc	a2,0x1
     7e4:	16060613          	addi	a2,a2,352 # 1940 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7e8:	12fdd063          	bge	s11,a5,908 <ext_euclid+0x29a>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     7ec:	fb040113          	addi	sp,s0,-80
     7f0:	40b6                	lw	ra,76(sp)
     7f2:	4426                	lw	s0,72(sp)
     7f4:	4496                	lw	s1,68(sp)
     7f6:	4906                	lw	s2,64(sp)
     7f8:	59f2                	lw	s3,60(sp)
     7fa:	5a62                	lw	s4,56(sp)
     7fc:	5ad2                	lw	s5,52(sp)
     7fe:	5b42                	lw	s6,48(sp)
     800:	5bb2                	lw	s7,44(sp)
     802:	5c22                	lw	s8,40(sp)
     804:	5c92                	lw	s9,36(sp)
     806:	5d02                	lw	s10,32(sp)
     808:	4df2                	lw	s11,28(sp)
     80a:	00001517          	auipc	a0,0x1
     80e:	13650513          	addi	a0,a0,310 # 1940 <ti_2>
     812:	6161                	addi	sp,sp,80
     814:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     816:	97ca                	add	a5,a5,s2
     818:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     81a:	431c                	lw	a5,0(a4)
     81c:	fe07cde3          	bltz	a5,816 <ext_euclid+0x1a8>
            ri_1[i] = ri_1[i] % mod;
     820:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     824:	0685                	addi	a3,a3,1
     826:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     828:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     82c:	b711                	j	730 <ext_euclid+0xc2>
            ri[i - (N + 1)] = res[i];
     82e:	00279693          	slli	a3,a5,0x2
     832:	96aa                	add	a3,a3,a0
     834:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     836:	0785                	addi	a5,a5,1
     838:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     83a:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	b719                	j	744 <ext_euclid+0xd6>
            temp[i] = ri_2[i] - ri[i];
     840:	00f986b3          	add	a3,s3,a5
     844:	00fb85b3          	add	a1,s7,a5
     848:	4294                	lw	a3,0(a3)
     84a:	418c                	lw	a1,0(a1)
     84c:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     850:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     852:	8e8d                	sub	a3,a3,a1
     854:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     856:	0791                	addi	a5,a5,4
     858:	bde5                	j	750 <ext_euclid+0xe2>
                temp[i] = temp[i] + mod;
     85a:	97ca                	add	a5,a5,s2
     85c:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     85e:	431c                	lw	a5,0(a4)
     860:	fe07cde3          	bltz	a5,85a <ext_euclid+0x1ec>
            temp[i] = temp[i] % mod;
     864:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     868:	0685                	addi	a3,a3,1
     86a:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     86c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     870:	b5ed                	j	75a <ext_euclid+0xec>
                qi_1[i] = qi_1[i] + mod;
     872:	97ca                	add	a5,a5,s2
     874:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     876:	431c                	lw	a5,0(a4)
     878:	fe07cde3          	bltz	a5,872 <ext_euclid+0x204>
            qi_1[i] = qi_1[i] % mod;
     87c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     880:	0685                	addi	a3,a3,1
     882:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     884:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     888:	b5fd                	j	776 <ext_euclid+0x108>
                temp[i] = temp[i] + mod;
     88a:	97ca                	add	a5,a5,s2
     88c:	00fd2023          	sw	a5,0(s10)
            while (temp[i] < 0) {
     890:	000d2783          	lw	a5,0(s10)
     894:	fe07cbe3          	bltz	a5,88a <ext_euclid+0x21c>
            temp[i] = temp[i] % mod;
     898:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     89c:	0705                	addi	a4,a4,1
     89e:	0d11                	addi	s10,s10,4
            temp[i] = temp[i] % mod;
     8a0:	fefd2e23          	sw	a5,-4(s10)
        for (i = 0; i < N + 1; ++i) {
     8a4:	b5fd                	j	792 <ext_euclid+0x124>
            ti[i] = ti_2[i] - temp[i];
     8a6:	00001697          	auipc	a3,0x1
     8aa:	09a68693          	addi	a3,a3,154 # 1940 <ti_2>
     8ae:	96be                	add	a3,a3,a5
     8b0:	00fa85b3          	add	a1,s5,a5
     8b4:	4294                	lw	a3,0(a3)
     8b6:	418c                	lw	a1,0(a1)
     8b8:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     8bc:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8be:	8e8d                	sub	a3,a3,a1
     8c0:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8c2:	0791                	addi	a5,a5,4
     8c4:	bdd9                	j	79a <ext_euclid+0x12c>
                ti[i] = ti[i] + mod;
     8c6:	97ca                	add	a5,a5,s2
     8c8:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     8ca:	431c                	lw	a5,0(a4)
     8cc:	fe07cde3          	bltz	a5,8c6 <ext_euclid+0x258>
            ti[i] = ti[i] % mod;
     8d0:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8d4:	0685                	addi	a3,a3,1
     8d6:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     8d8:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8dc:	b5d9                	j	7a2 <ext_euclid+0x134>
              qi_1[i] = 0;
     8de:	00271693          	slli	a3,a4,0x2
     8e2:	00dc0633          	add	a2,s8,a3
            controlR += ri[i];
     8e6:	96de                	add	a3,a3,s7
     8e8:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8ea:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8ee:	0705                	addi	a4,a4,1
            controlR += ri[i];
     8f0:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     8f2:	bdf9                	j	7d0 <ext_euclid+0x162>
            if (((ri_2[0] * j) % mod) == 1)
     8f4:	0009a683          	lw	a3,0(s3)
     8f8:	02d706b3          	mul	a3,a4,a3
     8fc:	0326e6b3          	rem	a3,a3,s2
     900:	eec680e3          	beq	a3,a2,7e0 <ext_euclid+0x172>
        for (j = 0; j < mod; ++j) {
     904:	0705                	addi	a4,a4,1
     906:	bdd9                	j	7dc <ext_euclid+0x16e>
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     90a:	0785                	addi	a5,a5,1
     90c:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     90e:	02d706b3          	mul	a3,a4,a3
     912:	0326e6b3          	rem	a3,a3,s2
     916:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     91a:	b5f9                	j	7e8 <ext_euclid+0x17a>

0000091c <generate_keys>:




int* generate_keys(int N, int p, int q){
     91c:	7141                	addi	sp,sp,-496
     91e:	1e112623          	sw	ra,492(sp)
     922:	1e812423          	sw	s0,488(sp)
     926:	1e912223          	sw	s1,484(sp)
     92a:	1b80                	addi	s0,sp,496
     92c:	1f212023          	sw	s2,480(sp)
     930:	1d312e23          	sw	s3,476(sp)
     934:	1d412c23          	sw	s4,472(sp)
     938:	1d512a23          	sw	s5,468(sp)
     93c:	1d612823          	sw	s6,464(sp)
     940:	1d712623          	sw	s7,460(sp)
     944:	1da12023          	sw	s10,448(sp)
     948:	1d812423          	sw	s8,456(sp)
     94c:	1d912223          	sw	s9,452(sp)
     950:	892a                	mv	s2,a0
     952:	8bae                	mv	s7,a1
     954:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     956:	4581                	li	a1,0
     958:	0d000613          	li	a2,208
     95c:	e2440513          	addi	a0,s0,-476
     960:	238d                	jal	ec2 <memset>
     962:	4485                	li	s1,1
     964:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     966:	0d800613          	li	a2,216
     96a:	4581                	li	a1,0
     96c:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     970:	e1342c23          	sw	s3,-488(s0)
     974:	e0942e23          	sw	s1,-484(s0)
     978:	e2942023          	sw	s1,-480(s0)
     97c:	e3342423          	sw	s3,-472(s0)
     980:	e2942823          	sw	s1,-464(s0)
     984:	e2942e23          	sw	s1,-452(s0)
     988:	e5342023          	sw	s3,-448(s0)
     98c:	e5342223          	sw	s3,-444(s0)
     990:	e4942623          	sw	s1,-436(s0)
     994:	e5342a23          	sw	s3,-428(s0)
     998:	e4942e23          	sw	s1,-420(s0)
     99c:	e6942023          	sw	s1,-416(s0)
     9a0:	e7342623          	sw	s3,-404(s0)
     9a4:	e6942a23          	sw	s1,-396(s0)
     9a8:	e8942023          	sw	s1,-384(s0)
     9ac:	e8942223          	sw	s1,-380(s0)
     9b0:	e8942423          	sw	s1,-376(s0)
     9b4:	e9342623          	sw	s3,-372(s0)
     9b8:	e8942a23          	sw	s1,-364(s0)
     9bc:	ea942023          	sw	s1,-352(s0)
     9c0:	ea942223          	sw	s1,-348(s0)
     9c4:	ea942423          	sw	s1,-344(s0)
     9c8:	eb342623          	sw	s3,-340(s0)
     9cc:	ea942a23          	sw	s1,-332(s0)
     9d0:	ec942023          	sw	s1,-320(s0)
     9d4:	ec942223          	sw	s1,-316(s0)
     9d8:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9dc:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e0:	21cd                	jal	ec2 <memset>
    int polyR[N+1];
     9e2:	002a9793          	slli	a5,s5,0x2
     9e6:	07bd                	addi	a5,a5,15
     9e8:	9bc1                	andi	a5,a5,-16
     9ea:	40f10133          	sub	sp,sp,a5
     9ee:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     9f0:	00291d13          	slli	s10,s2,0x2
     9f4:	01aa07b3          	add	a5,s4,s10
     9f8:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fa:	ef342a23          	sw	s3,-268(s0)
     9fe:	ee942e23          	sw	s1,-260(s0)
     a02:	f0942023          	sw	s1,-256(s0)
     a06:	f0942423          	sw	s1,-248(s0)
     a0a:	f1342a23          	sw	s3,-236(s0)
     a0e:	f1342e23          	sw	s3,-228(s0)
     a12:	f3342023          	sw	s3,-224(s0)
     a16:	f2942423          	sw	s1,-216(s0)
     a1a:	f3342823          	sw	s3,-208(s0)
     a1e:	f2942c23          	sw	s1,-200(s0)
     a22:	f4942223          	sw	s1,-188(s0)
     a26:	f5342423          	sw	s3,-184(s0)
     a2a:	f4942823          	sw	s1,-176(s0)
     a2e:	f4942e23          	sw	s1,-164(s0)
     a32:	f7342023          	sw	s3,-160(s0)
     a36:	f6942423          	sw	s1,-152(s0)
     a3a:	f6942a23          	sw	s1,-140(s0)
     a3e:	f7342c23          	sw	s3,-136(s0)
     a42:	f8942023          	sw	s1,-128(s0)
     a46:	f8942423          	sw	s1,-120(s0)
     a4a:	f8942623          	sw	s1,-116(s0)
     a4e:	f8942c23          	sw	s1,-104(s0)
     a52:	f9342e23          	sw	s3,-100(s0)
     a56:	fa942223          	sw	s1,-92(s0)
     a5a:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a5e:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a62:	4785                	li	a5,1
     a64:	1127c263          	blt	a5,s2,b68 <generate_keys+0x24c>
     a68:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a6a:	03600693          	li	a3,54
     a6e:	10f6d463          	bge	a3,a5,b76 <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a72:	4781                	li	a5,0
        random_keys[i] = f[i];
     a74:	00001697          	auipc	a3,0x1
     a78:	05c68693          	addi	a3,a3,92 # 1ad0 <random_keys>
    for(i = 0; i < N; ++i){
     a7c:	1127cb63          	blt	a5,s2,b92 <generate_keys+0x276>
     a80:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a84:	00191993          	slli	s3,s2,0x1
     a88:	87ca                	mv	a5,s2
     a8a:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     a8c:	00001617          	auipc	a2,0x1
     a90:	04460613          	addi	a2,a2,68 # 1ad0 <random_keys>
    for(i = N; i < (2*N); ++i){
     a94:	1137ca63          	blt	a5,s3,ba8 <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     a98:	448d                	li	s1,3
     a9a:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     a9e:	86de                	mv	a3,s7
     aa0:	8656                	mv	a2,s5
     aa2:	e1840593          	addi	a1,s0,-488
     aa6:	8552                	mv	a0,s4
     aa8:	36d9                	jal	66e <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     aaa:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     aac:	00001697          	auipc	a3,0x1
     ab0:	02468693          	addi	a3,a3,36 # 1ad0 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ab4:	1097c263          	blt	a5,s1,bb8 <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     ab8:	8656                	mv	a2,s5
     aba:	86da                	mv	a3,s6
     abc:	e1840593          	addi	a1,s0,-488
     ac0:	8552                	mv	a0,s4
     ac2:	3675                	jal	66e <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ac4:	5751                	li	a4,-12
     ac6:	02e90733          	mul	a4,s2,a4
     aca:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     acc:	00001617          	auipc	a2,0x1
     ad0:	00460613          	addi	a2,a2,4 # 1ad0 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ad4:	0fa4ca63          	blt	s1,s10,bc8 <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     ad8:	4701                	li	a4,0
     ada:	85ca                	mv	a1,s2
     adc:	86ca                	mv	a3,s2
     ade:	8666                	mv	a2,s9
     ae0:	fe0ff0ef          	jal	ra,2c0 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     ae4:	87aa                	mv	a5,a0
     ae6:	4701                	li	a4,0
     ae8:	fff98593          	addi	a1,s3,-1
     aec:	0eb74863          	blt	a4,a1,bdc <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af0:	86d6                	mv	a3,s5
     af2:	875a                	mv	a4,s6
     af4:	8652                	mv	a2,s4
     af6:	3a2d                	jal	430 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     af8:	4795                	li	a5,5
     afa:	02f907b3          	mul	a5,s2,a5
     afe:	098a                	slli	s3,s3,0x2
     b00:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b02:	00001697          	auipc	a3,0x1
     b06:	fce68693          	addi	a3,a3,-50 # 1ad0 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b0a:	0991                	addi	s3,s3,4
     b0c:	0efc4063          	blt	s8,a5,bec <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b10:	4699                	li	a3,6
     b12:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b14:	00001617          	auipc	a2,0x1
     b18:	fbc60613          	addi	a2,a2,-68 # 1ad0 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b1c:	02d906b3          	mul	a3,s2,a3
     b20:	02a90933          	mul	s2,s2,a0
     b24:	0cf6dc63          	bge	a3,a5,bfc <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b28:	e1040113          	addi	sp,s0,-496
     b2c:	1ec12083          	lw	ra,492(sp)
     b30:	1e812403          	lw	s0,488(sp)
     b34:	1e412483          	lw	s1,484(sp)
     b38:	1e012903          	lw	s2,480(sp)
     b3c:	1dc12983          	lw	s3,476(sp)
     b40:	1d812a03          	lw	s4,472(sp)
     b44:	1d412a83          	lw	s5,468(sp)
     b48:	1d012b03          	lw	s6,464(sp)
     b4c:	1cc12b83          	lw	s7,460(sp)
     b50:	1c812c03          	lw	s8,456(sp)
     b54:	1c412c83          	lw	s9,452(sp)
     b58:	1c012d03          	lw	s10,448(sp)
     b5c:	00001517          	auipc	a0,0x1
     b60:	f7450513          	addi	a0,a0,-140 # 1ad0 <random_keys>
     b64:	617d                	addi	sp,sp,496
     b66:	8082                	ret
        polyR[i] = 0;
     b68:	00279713          	slli	a4,a5,0x2
     b6c:	9752                	add	a4,a4,s4
     b6e:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b72:	0785                	addi	a5,a5,1
     b74:	bdc5                	j	a64 <generate_keys+0x148>
        f[i] = 0;
     b76:	00279713          	slli	a4,a5,0x2
     b7a:	e1840613          	addi	a2,s0,-488
     b7e:	963a                	add	a2,a2,a4
     b80:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b84:	ef440613          	addi	a2,s0,-268
     b88:	9732                	add	a4,a4,a2
     b8a:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     b8e:	0785                	addi	a5,a5,1
     b90:	bdf9                	j	a6e <generate_keys+0x152>
        random_keys[i] = f[i];
     b92:	00279713          	slli	a4,a5,0x2
     b96:	e1840593          	addi	a1,s0,-488
     b9a:	00e68633          	add	a2,a3,a4
     b9e:	972e                	add	a4,a4,a1
     ba0:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     ba2:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     ba4:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     ba6:	bdd9                	j	a7c <generate_keys+0x160>
        random_keys[i] = g[i-N];
     ba8:	430c                	lw	a1,0(a4)
     baa:	00279693          	slli	a3,a5,0x2
     bae:	96b2                	add	a3,a3,a2
     bb0:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bb2:	0785                	addi	a5,a5,1
     bb4:	0711                	addi	a4,a4,4
     bb6:	bdf9                	j	a94 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bb8:	4110                	lw	a2,0(a0)
     bba:	00279713          	slli	a4,a5,0x2
     bbe:	9736                	add	a4,a4,a3
     bc0:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bc2:	0785                	addi	a5,a5,1
     bc4:	0511                	addi	a0,a0,4
     bc6:	b5fd                	j	ab4 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bc8:	00249793          	slli	a5,s1,0x2
     bcc:	00f706b3          	add	a3,a4,a5
     bd0:	96aa                	add	a3,a3,a0
     bd2:	4294                	lw	a3,0(a3)
     bd4:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bd8:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bda:	bded                	j	ad4 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bdc:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bde:	0705                	addi	a4,a4,1
     be0:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     be2:	037686b3          	mul	a3,a3,s7
     be6:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bea:	b709                	j	aec <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bec:	ff89a603          	lw	a2,-8(s3)
     bf0:	002c1713          	slli	a4,s8,0x2
     bf4:	9736                	add	a4,a4,a3
     bf6:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     bf8:	0c05                	addi	s8,s8,1
     bfa:	bf01                	j	b0a <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     bfc:	00279713          	slli	a4,a5,0x2
     c00:	00e605b3          	add	a1,a2,a4
     c04:	974a                	add	a4,a4,s2
     c06:	9752                	add	a4,a4,s4
     c08:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c0c:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	bf19                	j	b24 <generate_keys+0x208>

00000c10 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c10:	7115                	addi	sp,sp,-224
     c12:	cda2                	sw	s0,216(sp)
     c14:	cba6                	sw	s1,212(sp)
     c16:	c9ca                	sw	s2,208(sp)
     c18:	842a                	mv	s0,a0
     c1a:	892e                	mv	s2,a1
     c1c:	84b2                	mv	s1,a2

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	00000597          	auipc	a1,0x0
     c22:	49658593          	addi	a1,a1,1174 # 10b4 <_endtext>
     c26:	0c000613          	li	a2,192
     c2a:	850a                	mv	a0,sp
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2c:	cf86                	sw	ra,220(sp)
     c2e:	c7ce                	sw	s3,204(sp)
     c30:	c5d2                	sw	s4,200(sp)
     c32:	89ba                	mv	s3,a4
     c34:	8a36                	mv	s4,a3
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	227d                	jal	de4 <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	4781                	li	a5,0
     c3a:	860a                	mv	a2,sp
     c3c:	874a                	mv	a4,s2
     c3e:	03000693          	li	a3,48
     c42:	85a2                	mv	a1,s0
     c44:	8552                	mv	a0,s4
     c46:	c6eff0ef          	jal	ra,b4 <polymult>
     c4a:	4781                	li	a5,0

    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
    for(i = 0; i < 48; ++i){
     c4c:	0c000613          	li	a2,192
        temp[i] = temp[i] + message[i];
     c50:	00f506b3          	add	a3,a0,a5
     c54:	00f485b3          	add	a1,s1,a5
     c58:	4298                	lw	a4,0(a3)
     c5a:	418c                	lw	a1,0(a1)
     c5c:	0791                	addi	a5,a5,4
     c5e:	972e                	add	a4,a4,a1
     c60:	c298                	sw	a4,0(a3)
    for(i = 0; i < 48; ++i){
     c62:	fec797e3          	bne	a5,a2,c50 <ntru_encyrpt+0x40>
    }

    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	00141493          	slli	s1,s0,0x1
     c6a:	00140693          	addi	a3,s0,1
     c6e:	874a                	mv	a4,s2
     c70:	864e                	mv	a2,s3
     c72:	85a6                	mv	a1,s1
     c74:	fbcff0ef          	jal	ra,430 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c78:	478d                	li	a5,3
     c7a:	02f40433          	mul	s0,s0,a5
     c7e:	87aa                	mv	a5,a0
     c80:	0084ca63          	blt	s1,s0,c94 <ntru_encyrpt+0x84>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c84:	40fe                	lw	ra,220(sp)
     c86:	446e                	lw	s0,216(sp)
     c88:	44de                	lw	s1,212(sp)
     c8a:	494e                	lw	s2,208(sp)
     c8c:	49be                	lw	s3,204(sp)
     c8e:	4a2e                	lw	s4,200(sp)
     c90:	612d                	addi	sp,sp,224
     c92:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c94:	00249713          	slli	a4,s1,0x2
     c98:	972a                	add	a4,a4,a0
     c9a:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     c9c:	0485                	addi	s1,s1,1
     c9e:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     ca0:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     ca4:	bff1                	j	c80 <ntru_encyrpt+0x70>

00000ca6 <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca6:	7179                	addi	sp,sp,-48
     ca8:	d422                	sw	s0,40(sp)
     caa:	ce4e                	sw	s3,28(sp)
     cac:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cae:	498d                	li	s3,3
     cb0:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	d04a                	sw	s2,32(sp)
     cb6:	ca56                	sw	s5,20(sp)
     cb8:	c65e                	sw	s7,12(sp)
     cba:	8932                	mv	s2,a2
     cbc:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbe:	863e                	mv	a2,a5
     cc0:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	8aae                	mv	s5,a1
     cc4:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc6:	85a2                	mv	a1,s0
     cc8:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	d606                	sw	ra,44(sp)
     ccc:	d226                	sw	s1,36(sp)
     cce:	cc52                	sw	s4,24(sp)
     cd0:	c85a                	sw	s6,16(sp)
     cd2:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd4:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd8:	de8ff0ef          	jal	ra,2c0 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cdc:	00140b13          	addi	s6,s0,1
     ce0:	874a                	mv	a4,s2
     ce2:	86da                	mv	a3,s6
     ce4:	8652                	mv	a2,s4
     ce6:	85a6                	mv	a1,s1
     ce8:	f48ff0ef          	jal	ra,430 <polydiv>
     cec:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cee:	87aa                	mv	a5,a0
     cf0:	872a                	mv	a4,a0
     cf2:	86a6                	mv	a3,s1
     cf4:	0536c263          	blt	a3,s3,d38 <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cf8:	4589                	li	a1,2
     cfa:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     cfe:	4701                	li	a4,0
     d00:	04874563          	blt	a4,s0,d4a <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d04:	4701                	li	a4,0
     d06:	86a2                	mv	a3,s0
     d08:	85a2                	mv	a1,s0
     d0a:	855e                	mv	a0,s7
     d0c:	db4ff0ef          	jal	ra,2c0 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d10:	8756                	mv	a4,s5
     d12:	86da                	mv	a3,s6
     d14:	8652                	mv	a2,s4
     d16:	85a6                	mv	a1,s1
     d18:	f18ff0ef          	jal	ra,430 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1c:	87aa                	mv	a5,a0
     d1e:	0334cf63          	blt	s1,s3,d5c <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d22:	50b2                	lw	ra,44(sp)
     d24:	5422                	lw	s0,40(sp)
     d26:	5492                	lw	s1,36(sp)
     d28:	5902                	lw	s2,32(sp)
     d2a:	49f2                	lw	s3,28(sp)
     d2c:	4a62                	lw	s4,24(sp)
     d2e:	4ad2                	lw	s5,20(sp)
     d30:	4b42                	lw	s6,16(sp)
     d32:	4bb2                	lw	s7,12(sp)
     d34:	6145                	addi	sp,sp,48
     d36:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d38:	00269593          	slli	a1,a3,0x2
     d3c:	95b2                	add	a1,a1,a2
     d3e:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	0685                	addi	a3,a3,1
     d42:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d44:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d48:	b775                	j	cf4 <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d4a:	4394                	lw	a3,0(a5)
     d4c:	00d5d563          	bge	a1,a3,d56 <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d50:	412686b3          	sub	a3,a3,s2
     d54:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d56:	0705                	addi	a4,a4,1
     d58:	0791                	addi	a5,a5,4
     d5a:	b75d                	j	d00 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d5c:	00249713          	slli	a4,s1,0x2
     d60:	972a                	add	a4,a4,a0
     d62:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d64:	0485                	addi	s1,s1,1
     d66:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d68:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	bf4d                	j	d1e <ntru_deceypt+0x78>

00000d6e <default_exc_handler>:
  jal x0, default_exc_handler
     d6e:	0000006f          	j	d6e <default_exc_handler>

00000d72 <reset_handler>:
  mv  x1, x0
     d72:	00000093          	li	ra,0
  mv  x2, x1
     d76:	8106                	mv	sp,ra
  mv  x3, x1
     d78:	8186                	mv	gp,ra
  mv  x4, x1
     d7a:	8206                	mv	tp,ra
  mv  x5, x1
     d7c:	8286                	mv	t0,ra
  mv  x6, x1
     d7e:	8306                	mv	t1,ra
  mv  x7, x1
     d80:	8386                	mv	t2,ra
  mv  x8, x1
     d82:	8406                	mv	s0,ra
  mv  x9, x1
     d84:	8486                	mv	s1,ra
  mv x10, x1
     d86:	8506                	mv	a0,ra
  mv x11, x1
     d88:	8586                	mv	a1,ra
  mv x12, x1
     d8a:	8606                	mv	a2,ra
  mv x13, x1
     d8c:	8686                	mv	a3,ra
  mv x14, x1
     d8e:	8706                	mv	a4,ra
  mv x15, x1
     d90:	8786                	mv	a5,ra
  mv x16, x1
     d92:	8806                	mv	a6,ra
  mv x17, x1
     d94:	8886                	mv	a7,ra
  mv x18, x1
     d96:	8906                	mv	s2,ra
  mv x19, x1
     d98:	8986                	mv	s3,ra
  mv x20, x1
     d9a:	8a06                	mv	s4,ra
  mv x21, x1
     d9c:	8a86                	mv	s5,ra
  mv x22, x1
     d9e:	8b06                	mv	s6,ra
  mv x23, x1
     da0:	8b86                	mv	s7,ra
  mv x24, x1
     da2:	8c06                	mv	s8,ra
  mv x25, x1
     da4:	8c86                	mv	s9,ra
  mv x26, x1
     da6:	8d06                	mv	s10,ra
  mv x27, x1
     da8:	8d86                	mv	s11,ra
  mv x28, x1
     daa:	8e06                	mv	t3,ra
  mv x29, x1
     dac:	8e86                	mv	t4,ra
  mv x30, x1
     dae:	8f06                	mv	t5,ra
  mv x31, x1
     db0:	8f86                	mv	t6,ra
  la   x2, _stack_start
     db2:	0000f117          	auipc	sp,0xf
     db6:	24e10113          	addi	sp,sp,590 # 10000 <_stack_start>

00000dba <_start>:
  la x26, _bss_start
     dba:	00000d17          	auipc	s10,0x0
     dbe:	47ed0d13          	addi	s10,s10,1150 # 1238 <_bss_start>
  la x27, _bss_end
     dc2:	00001d97          	auipc	s11,0x1
     dc6:	206d8d93          	addi	s11,s11,518 # 1fc8 <_bss_end>
  bge x26, x27, zero_loop_end
     dca:	01bd5763          	bge	s10,s11,dd8 <main_entry>

00000dce <zero_loop>:
  sw x0, 0(x26)
     dce:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     dd2:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dd4:	ffaddde3          	bge	s11,s10,dce <zero_loop>

00000dd8 <main_entry>:
  addi x10, x0, 0
     dd8:	00000513          	li	a0,0
  addi x11, x0, 0
     ddc:	00000593          	li	a1,0
  jal x1, main
     de0:	18a000ef          	jal	ra,f6a <main>

00000de4 <memcpy>:
     de4:	00a5c7b3          	xor	a5,a1,a0
     de8:	8b8d                	andi	a5,a5,3
     dea:	00c508b3          	add	a7,a0,a2
     dee:	e7a1                	bnez	a5,e36 <memcpy+0x52>
     df0:	478d                	li	a5,3
     df2:	04c7f263          	bgeu	a5,a2,e36 <memcpy+0x52>
     df6:	00357793          	andi	a5,a0,3
     dfa:	872a                	mv	a4,a0
     dfc:	eba9                	bnez	a5,e4e <memcpy+0x6a>
     dfe:	ffc8f613          	andi	a2,a7,-4
     e02:	fe060793          	addi	a5,a2,-32
     e06:	06f76763          	bltu	a4,a5,e74 <memcpy+0x90>
     e0a:	02c77363          	bgeu	a4,a2,e30 <memcpy+0x4c>
     e0e:	86ae                	mv	a3,a1
     e10:	87ba                	mv	a5,a4
     e12:	0006a803          	lw	a6,0(a3)
     e16:	0791                	addi	a5,a5,4
     e18:	0691                	addi	a3,a3,4
     e1a:	ff07ae23          	sw	a6,-4(a5)
     e1e:	fec7eae3          	bltu	a5,a2,e12 <memcpy+0x2e>
     e22:	fff60793          	addi	a5,a2,-1
     e26:	8f99                	sub	a5,a5,a4
     e28:	9bf1                	andi	a5,a5,-4
     e2a:	0791                	addi	a5,a5,4
     e2c:	973e                	add	a4,a4,a5
     e2e:	95be                	add	a1,a1,a5
     e30:	01176663          	bltu	a4,a7,e3c <memcpy+0x58>
     e34:	8082                	ret
     e36:	872a                	mv	a4,a0
     e38:	ff157ee3          	bgeu	a0,a7,e34 <memcpy+0x50>
     e3c:	0005c783          	lbu	a5,0(a1)
     e40:	0705                	addi	a4,a4,1
     e42:	0585                	addi	a1,a1,1
     e44:	fef70fa3          	sb	a5,-1(a4)
     e48:	ff176ae3          	bltu	a4,a7,e3c <memcpy+0x58>
     e4c:	8082                	ret
     e4e:	0005c683          	lbu	a3,0(a1)
     e52:	0705                	addi	a4,a4,1
     e54:	00377793          	andi	a5,a4,3
     e58:	fed70fa3          	sb	a3,-1(a4)
     e5c:	0585                	addi	a1,a1,1
     e5e:	d3c5                	beqz	a5,dfe <memcpy+0x1a>
     e60:	0005c683          	lbu	a3,0(a1)
     e64:	0705                	addi	a4,a4,1
     e66:	00377793          	andi	a5,a4,3
     e6a:	fed70fa3          	sb	a3,-1(a4)
     e6e:	0585                	addi	a1,a1,1
     e70:	fff9                	bnez	a5,e4e <memcpy+0x6a>
     e72:	b771                	j	dfe <memcpy+0x1a>
     e74:	41d4                	lw	a3,4(a1)
     e76:	0005a283          	lw	t0,0(a1)
     e7a:	0085af83          	lw	t6,8(a1)
     e7e:	00c5af03          	lw	t5,12(a1)
     e82:	0105ae83          	lw	t4,16(a1)
     e86:	0145ae03          	lw	t3,20(a1)
     e8a:	0185a303          	lw	t1,24(a1)
     e8e:	01c5a803          	lw	a6,28(a1)
     e92:	c354                	sw	a3,4(a4)
     e94:	5194                	lw	a3,32(a1)
     e96:	00572023          	sw	t0,0(a4)
     e9a:	01f72423          	sw	t6,8(a4)
     e9e:	01e72623          	sw	t5,12(a4)
     ea2:	01d72823          	sw	t4,16(a4)
     ea6:	01c72a23          	sw	t3,20(a4)
     eaa:	00672c23          	sw	t1,24(a4)
     eae:	01072e23          	sw	a6,28(a4)
     eb2:	d314                	sw	a3,32(a4)
     eb4:	02470713          	addi	a4,a4,36
     eb8:	02458593          	addi	a1,a1,36
     ebc:	faf76ce3          	bltu	a4,a5,e74 <memcpy+0x90>
     ec0:	b7a9                	j	e0a <memcpy+0x26>

00000ec2 <memset>:
     ec2:	433d                	li	t1,15
     ec4:	872a                	mv	a4,a0
     ec6:	02c37363          	bgeu	t1,a2,eec <memset+0x2a>
     eca:	00f77793          	andi	a5,a4,15
     ece:	efbd                	bnez	a5,f4c <memset+0x8a>
     ed0:	e5ad                	bnez	a1,f3a <memset+0x78>
     ed2:	ff067693          	andi	a3,a2,-16
     ed6:	8a3d                	andi	a2,a2,15
     ed8:	96ba                	add	a3,a3,a4
     eda:	c30c                	sw	a1,0(a4)
     edc:	c34c                	sw	a1,4(a4)
     ede:	c70c                	sw	a1,8(a4)
     ee0:	c74c                	sw	a1,12(a4)
     ee2:	0741                	addi	a4,a4,16
     ee4:	fed76be3          	bltu	a4,a3,eda <memset+0x18>
     ee8:	e211                	bnez	a2,eec <memset+0x2a>
     eea:	8082                	ret
     eec:	40c306b3          	sub	a3,t1,a2
     ef0:	068a                	slli	a3,a3,0x2
     ef2:	00000297          	auipc	t0,0x0
     ef6:	9696                	add	a3,a3,t0
     ef8:	00a68067          	jr	10(a3)
     efc:	00b70723          	sb	a1,14(a4)
     f00:	00b706a3          	sb	a1,13(a4)
     f04:	00b70623          	sb	a1,12(a4)
     f08:	00b705a3          	sb	a1,11(a4)
     f0c:	00b70523          	sb	a1,10(a4)
     f10:	00b704a3          	sb	a1,9(a4)
     f14:	00b70423          	sb	a1,8(a4)
     f18:	00b703a3          	sb	a1,7(a4)
     f1c:	00b70323          	sb	a1,6(a4)
     f20:	00b702a3          	sb	a1,5(a4)
     f24:	00b70223          	sb	a1,4(a4)
     f28:	00b701a3          	sb	a1,3(a4)
     f2c:	00b70123          	sb	a1,2(a4)
     f30:	00b700a3          	sb	a1,1(a4)
     f34:	00b70023          	sb	a1,0(a4)
     f38:	8082                	ret
     f3a:	0ff5f593          	andi	a1,a1,255
     f3e:	00859693          	slli	a3,a1,0x8
     f42:	8dd5                	or	a1,a1,a3
     f44:	01059693          	slli	a3,a1,0x10
     f48:	8dd5                	or	a1,a1,a3
     f4a:	b761                	j	ed2 <memset+0x10>
     f4c:	00279693          	slli	a3,a5,0x2
     f50:	00000297          	auipc	t0,0x0
     f54:	9696                	add	a3,a3,t0
     f56:	8286                	mv	t0,ra
     f58:	fa8680e7          	jalr	-88(a3)
     f5c:	8096                	mv	ra,t0
     f5e:	17c1                	addi	a5,a5,-16
     f60:	8f1d                	sub	a4,a4,a5
     f62:	963e                	add	a2,a2,a5
     f64:	f8c374e3          	bgeu	t1,a2,eec <memset+0x2a>
     f68:	b7a5                	j	ed0 <memset+0xe>

00000f6a <main>:


int main(){
     f6a:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	0c000613          	li	a2,192
     f72:	00000597          	auipc	a1,0x0
     f76:	20258593          	addi	a1,a1,514 # 1174 <_endtext+0xc0>
     f7a:	0068                	addi	a0,sp,12
int main(){
     f7c:	42112623          	sw	ra,1068(sp)
     f80:	42812423          	sw	s0,1064(sp)
     f84:	42912223          	sw	s1,1060(sp)
     f88:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f8c:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f90:	3d91                	jal	de4 <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f92:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f96:	00000417          	auipc	s0,0x0
     f9a:	29e40413          	addi	s0,s0,670 # 1234 <_edata>
    keys = generate_keys(N, p, q);
     f9e:	06500613          	li	a2,101
     fa2:	458d                	li	a1,3
     fa4:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     fa8:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     faa:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     fae:	32bd                	jal	91c <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     fb0:	4781                	li	a5,0
     fb2:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fb4:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fb8:	00f506b3          	add	a3,a0,a5
     fbc:	4290                	lw	a2,0(a3)
     fbe:	1314                	addi	a3,sp,416
     fc0:	96be                	add	a3,a3,a5
     fc2:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fc4:	0791                	addi	a5,a5,4
     fc6:	fee799e3          	bne	a5,a4,fb8 <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fca:	1cd8                	addi	a4,sp,628
     fcc:	1a850793          	addi	a5,a0,424
     fd0:	27c50693          	addi	a3,a0,636
     fd4:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fd6:	4390                	lw	a2,0(a5)
     fd8:	0791                	addi	a5,a5,4
     fda:	0711                	addi	a4,a4,4
     fdc:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fe0:	fed79be3          	bne	a5,a3,fd6 <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fe4:	01f8                	addi	a4,sp,204
     fe6:	35050793          	addi	a5,a0,848
     fea:	42450613          	addi	a2,a0,1060
     fee:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     ff0:	438c                	lw	a1,0(a5)
     ff2:	0791                	addi	a5,a5,4
     ff4:	0711                	addi	a4,a4,4
     ff6:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
     ffa:	fec79be3          	bne	a5,a2,ff0 <main+0x86>
     ffe:	06b0                	addi	a2,sp,840
    1000:	4fc50513          	addi	a0,a0,1276
    1004:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    1006:	4398                	lw	a4,0(a5)
    1008:	0791                	addi	a5,a5,4
    100a:	0611                	addi	a2,a2,4
    100c:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1010:	fea79be3          	bne	a5,a0,1006 <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    1014:	bbbbc4b7          	lui	s1,0xbbbbc
    1018:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    101c:	8742                	mv	a4,a6
    101e:	0070                	addi	a2,sp,12
    1020:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    1024:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    102c:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	36cd                	jal	c10 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    1030:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    1032:	ccccd4b7          	lui	s1,0xccccd
    1036:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    103a:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    103c:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    103e:	458d                	li	a1,3
    1040:	874a                	mv	a4,s2
    1042:	34810813          	addi	a6,sp,840
    1046:	1314                	addi	a3,sp,416
    1048:	06500613          	li	a2,101
    104c:	03500513          	li	a0,53
    1050:	3999                	jal	ca6 <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    1052:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    1056:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    105a:	c004                	sw	s1,0(s0)
    105c:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    105e:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    1062:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    1066:	0070                	addi	a2,sp,12
    1068:	00f506b3          	add	a3,a0,a5
    106c:	963e                	add	a2,a2,a5
    106e:	4210                	lw	a2,0(a2)
    1070:	4294                	lw	a3,0(a3)
    1072:	02d60363          	beq	a2,a3,1098 <main+0x12e>
            resultkon[0] = 0xBABABABA;
    1076:	babac7b7          	lui	a5,0xbabac
    107a:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    107e:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    1080:	42c12083          	lw	ra,1068(sp)
    1084:	42812403          	lw	s0,1064(sp)
    1088:	42412483          	lw	s1,1060(sp)
    108c:	42012903          	lw	s2,1056(sp)
    1090:	4501                	li	a0,0
    1092:	43010113          	addi	sp,sp,1072
    1096:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    1098:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    109a:	0791                	addi	a5,a5,4
    109c:	fcb795e3          	bne	a5,a1,1066 <main+0xfc>
    10a0:	b7c5                	j	1080 <main+0x116>

000010a2 <__CTOR_LIST__>:
	...

000010aa <__CTOR_END__>:
	...

000010b2 <__DTOR_END__>:
	...

Disassembly of section .rodata:

000010b4 <.rodata>:
    10b4:	0001                	nop
    10b6:	0000                	unimp
    10b8:	ffff                	0xffff
    10ba:	ffff                	0xffff
    10bc:	0000                	unimp
    10be:	0000                	unimp
    10c0:	0001                	nop
    10c2:	0000                	unimp
    10c4:	ffff                	0xffff
    10c6:	ffff                	0xffff
    10c8:	0001                	nop
    10ca:	0000                	unimp
    10cc:	ffff                	0xffff
    10ce:	ffff                	0xffff
    10d0:	0000                	unimp
    10d2:	0000                	unimp
    10d4:	0001                	nop
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0000                	unimp
    10de:	0000                	unimp
    10e0:	ffff                	0xffff
    10e2:	ffff                	0xffff
    10e4:	0001                	nop
    10e6:	0000                	unimp
    10e8:	ffff                	0xffff
    10ea:	ffff                	0xffff
    10ec:	0001                	nop
    10ee:	0000                	unimp
    10f0:	0000                	unimp
    10f2:	0000                	unimp
    10f4:	0001                	nop
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0000                	unimp
    10fe:	0000                	unimp
    1100:	ffff                	0xffff
    1102:	ffff                	0xffff
    1104:	0001                	nop
    1106:	0000                	unimp
    1108:	ffff                	0xffff
    110a:	ffff                	0xffff
    110c:	0001                	nop
    110e:	0000                	unimp
    1110:	0000                	unimp
    1112:	0000                	unimp
    1114:	0001                	nop
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0000                	unimp
    111e:	0000                	unimp
    1120:	0001                	nop
    1122:	0000                	unimp
    1124:	ffff                	0xffff
    1126:	ffff                	0xffff
    1128:	0001                	nop
    112a:	0000                	unimp
    112c:	ffff                	0xffff
    112e:	ffff                	0xffff
    1130:	0000                	unimp
    1132:	0000                	unimp
    1134:	0001                	nop
    1136:	0000                	unimp
    1138:	ffff                	0xffff
    113a:	ffff                	0xffff
    113c:	0000                	unimp
    113e:	0000                	unimp
    1140:	0001                	nop
    1142:	0000                	unimp
    1144:	ffff                	0xffff
    1146:	ffff                	0xffff
    1148:	0001                	nop
    114a:	0000                	unimp
    114c:	ffff                	0xffff
    114e:	ffff                	0xffff
    1150:	0000                	unimp
    1152:	0000                	unimp
    1154:	0001                	nop
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0000                	unimp
    115e:	0000                	unimp
    1160:	ffff                	0xffff
    1162:	ffff                	0xffff
    1164:	0001                	nop
    1166:	0000                	unimp
    1168:	ffff                	0xffff
    116a:	ffff                	0xffff
    116c:	0001                	nop
    116e:	0000                	unimp
    1170:	0000                	unimp
    1172:	0000                	unimp
    1174:	0001                	nop
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0002                	c.slli64	zero
    117e:	0000                	unimp
    1180:	0001                	nop
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0002                	c.slli64	zero
    1192:	0000                	unimp
    1194:	0001                	nop
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0000                	unimp
    119e:	0000                	unimp
    11a0:	0001                	nop
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0002                	c.slli64	zero
    11aa:	0000                	unimp
    11ac:	0001                	nop
    11ae:	0000                	unimp
    11b0:	0000                	unimp
    11b2:	0000                	unimp
    11b4:	0001                	nop
    11b6:	0000                	unimp
    11b8:	0002                	c.slli64	zero
    11ba:	0000                	unimp
    11bc:	0000                	unimp
    11be:	0000                	unimp
    11c0:	0001                	nop
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0000                	unimp
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	0000                	unimp
    11de:	0000                	unimp
    11e0:	0002                	c.slli64	zero
    11e2:	0000                	unimp
    11e4:	0001                	nop
    11e6:	0000                	unimp
    11e8:	0002                	c.slli64	zero
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	0000                	unimp
    11f0:	0000                	unimp
    11f2:	0000                	unimp
    11f4:	0001                	nop
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0002                	c.slli64	zero
    11fe:	0000                	unimp
    1200:	0001                	nop
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0002                	c.slli64	zero
    1212:	0000                	unimp
    1214:	0001                	nop
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0002                	c.slli64	zero
    121e:	0000                	unimp
    1220:	0001                	nop
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001234 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1234:	bebe                	fsd	fa5,376(sp)
    1236:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

00001238 <_bss_start>:
	...

00001490 <product2>:
	...

000016e8 <result>:
	...

00001940 <ti_2>:
	...

00001ad0 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	19ed                	addi	s3,s3,-5
       2:	0000                	unimp
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05b1                	addi	a1,a1,12
       e:	0000                	unimp
      10:	310c                	fld	fa1,32(a0)
      12:	ce000003          	lb	zero,-800(zero) # fffffce0 <_stack_start+0xfffefce0>
      16:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
	...
      22:	0000                	unimp
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0446                	slli	s0,s0,0x11
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	4408                	lw	a0,8(s0)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	0465                	addi	s0,s0,25
      38:	0000                	unimp
      3a:	0202                	c.slli64	tp
      3c:	0002c207          	flq	ft4,0(t0) # f50 <memset+0x8e>
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	000000f3          	0xf3
      48:	0402                	c.slli64	s0
      4a:	00007007          	0x7007
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00ee                	slli	ra,ra,0x1b
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00006b07          	0x6b07
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	0075                	c.nop	29
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	7e04                	flw	fs1,56(a2)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0305                	addi	t1,t1,1
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	f806                	fsw	ft1,48(sp)
      86:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
  jal x0, default_exc_handler
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	3806                	fld	fa6,96(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	5106                	lw	sp,96(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	02ff                	0x2ff
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
      ba:	0000                	unimp
    int line[size_b][size_a + size_b];
      bc:	0800                	addi	s0,sp,16
      be:	0226                	slli	tp,tp,0x9
      c0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c2:	ca13a803          	lw	a6,-863(t2)
    int line[size_b][size_a + size_b];
      c6:	0000                	unimp
      c8:	0000                	unimp
      ca:	2c09                	jal	2dc <polymult2+0x1c>
      cc:	0000                	unimp
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
      d8:	080b0003          	lb	zero,128(s6)
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
      e4:	0522                	slli	a0,a0,0x8
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
    int pola[size_a];
      ec:	0000                	unimp
      ee:	0000                	unimp
    int line[size_b][size_a + size_b];
      f0:	2a0c                	fld	fa1,16(a2)
    int pola[size_a];
      f2:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
    int pola[size_a];
      f8:	00a8                	addi	a0,sp,72
    int line[size_b][size_a + size_b];
      fa:	0000                	unimp
    int pola[size_a];
      fc:	0004                	0x4
      fe:	9506                	add	a0,a0,ra
    int polb[size_b];
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
    int pola[size_a];
     106:	00da                	slli	ra,ra,0x16
    int polb[size_b];
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
            line[i][j] = 0;
     10c:	8406                	mv	s0,ra
     10e:	0005                	c.nop	1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     110:	0400                	addi	s0,sp,512
     112:	1916                	slli	s2,s2,0x25
    int pola[size_a];
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     118:	2806                	fld	fa6,64(sp)
    int line[size_b][size_a + size_b];
     11a:	0004                	0x4
     11c:	0500                	addi	s0,sp,640
    int polb[size_b];
     11e:	0d0c                	addi	a1,sp,656
            line[i][j] = 0;
     120:	005d                	c.nop	23
     122:	0000                	unimp
     124:	de06                	sw	ra,60(sp)
    for (i = 0; i < size_b; ++i){
     126:	0001                	nop
     128:	0400                	addi	s0,sp,512
            product[j] = 0;
     12a:	01181b23          	sh	a7,22(a6)
     12e:	0000                	unimp
     130:	ef0e                	fsw	ft3,156(sp)
    for (i = 0; i < size_b; ++i){
     132:	0001                	nop
     134:	1800                	addi	s0,sp,48
    array_equ(pola,a,size_a);
     136:	3404                	fld	fs1,40(s0)
     138:	8a08                	0x8a08
     13a:	0001                	nop
     13c:	0c00                	addi	s0,sp,528
     13e:	04b6                	slli	s1,s1,0xd
     140:	0000                	unimp
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
    for (i = 0; i < size_a; ++i){
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
     154:	0400                	addi	s0,sp,512
    array_equ(polb,b,size_b);
     156:	fe0c                	fsw	fa1,56(a2)
     158:	0004                	0x4
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    for (i = 0; i < size_b; ++i){
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	01d8                	addi	a4,sp,196
    if(star_mult == 1){
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
     16e:	0c00                	addi	s0,sp,528
     170:	250c                	fld	fa1,8(a0)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
        for (j = size_b -1; j >= 0; j = j-1){
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
            for (k = size_a-1; k >= 0; k = k-1 ){
     17e:	785f 0400 0b38      	0xb380400785f
            product[j] = 0;
     184:	0190                	addi	a2,sp,192
     186:	0000                	unimp
            line[i][j] = 0;
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
            product[j] = 0;
     18c:	0130                	addi	a2,sp,136
     18e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
    for (i = 0; i < size_b; ++i){
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	160e                	slli	a2,a2,0x23
     1a2:	0002                	c.slli64	zero
            pola[i] = pola[i] + mod;
     1a4:	2400                	fld	fs0,8(s0)
     1a6:	3c04                	fld	fs1,56(s0)
        while (pola[i] < 0){
     1a8:	2308                	fld	fa0,0(a4)
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
        pola[i] = pola[i] % mod;
     1ae:	00e5                	addi	ra,ra,25
     1b0:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1b2:	3e04                	fld	fs1,56(a2)
     1b4:	5d09                	li	s10,-30
        pola[i] = pola[i] % mod;
     1b6:	0000                	unimp
     1b8:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     1ba:	470c                	lw	a1,8(a4)
            polb[i] = polb[i] + mod;
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
        while (polb[i] < 0){
     1c0:	005d093f 0c040000 	0xc040000005d093f
        polb[i] = polb[i] % mod;
     1c8:	0118                	addi	a4,sp,128
    for (i = 0; i < size_b; ++i){
     1ca:	0000                	unimp
     1cc:	4004                	lw	s1,0(s0)
        polb[i] = polb[i] % mod;
     1ce:	5d09                	li	s10,-30
     1d0:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     1d2:	0800                	addi	s0,sp,16
    if(star_mult == 1){
     1d4:	cd0c                	sw	a1,24(a0)
        for (j = size_b -1; j >= 0; j = j-1){
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
        for(j = 0; j < size_a + size_b -1; ++j){
     1da:	0941                	addi	s2,s2,16
    for (i = 0; i < size_b; ++i){
     1dc:	005d                	c.nop	23
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
     1e2:	000003a3          	sb	zero,7(zero) # 7 <__DYNAMIC+0x7>
     1e6:	4204                	lw	s1,0(a2)
     1e8:	5d09                	li	s10,-30
    for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
     1ee:	5b0c                	lw	a1,48(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
}
     1f8:	0000                	unimp
     1fa:	0c14                	addi	a3,sp,528
     1fc:	062a                	slli	a2,a2,0xa
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
     202:	5d09                	li	s10,-30
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	6f0c                	flw	fa1,24(a4)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	0000068f          	0x68f
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
     21e:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	00000127          	0x127
     228:	0108                	addi	a0,sp,128
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	0c00                	addi	s0,sp,528
                line[size_b-1-j][k] = pola[k]*polb[j];
     232:	01be                	slli	gp,gp,0xf
     234:	0000                	unimp
     236:	5004                	lw	s1,32(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
        for (j = size_b -1; j >= 0; j = j-1){
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0568                	addi	a0,sp,652
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	1201                	addi	tp,tp,-32
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0156                	slli	sp,sp,0x15
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
            line[i][j] = line[i][j] % mod;
     26c:	7800                	flw	fs0,48(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     26e:	0002                	c.slli64	zero
     270:	0a00                	addi	s0,sp,272
            line[i][j] = line[i][j] % mod;
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f bc11 0003      	0x3bc11001f
        for(j = 0; j < size_a + size_b -1; ++j){
     27c:	9000                	0x9000
    for (i = 0; i < size_b; ++i){
     27e:	0401                	addi	s0,s0,0
     280:	0862                	slli	a6,a6,0x18
     282:	000002bb          	0x2bb
        for(j = 0; j < size_a + size_b -1; ++j){
     286:	b60c                	fsd	fa1,40(a2)
     288:	0004                	0x4
            product[j] += line[i][j];
     28a:	0400                	addi	s0,sp,512
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x1fc>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
        for(i = 0; i < size_b; ++i){
     294:	04ce                	slli	s1,s1,0x13
            product[j] += line[i][j];
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	d30c                	sw	a1,32(a4)
        for(i = 0; i < size_b; ++i){
     2a2:	0001                	nop
     2a4:	0400                	addi	s0,sp,512
    for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2ac:	0c08                	addi	a0,sp,528
     2ae:	00000127          	0x127
    for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	6704                	flw	fs1,8(a4)
     2b4:	231e                	fld	ft6,448(sp)
        product[j] = product[j] % mod;
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
     2bc:	7804                	flw	fs1,48(s0)
    for(j = 0; j < size_a + size_b -1; ++j){
     2be:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c0:	0900                	addi	s0,sp,144
    int line[size_b][size_a + size_b];
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
     2ce:	1f00                	addi	s0,sp,944
    int line[size_b][size_a + size_b];
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
     2d8:	790e                	flw	fs2,224(sp)
     2da:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2dc:	0800                	addi	s0,sp,16
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <polymult+0xc>
     2e6:	0112                	slli	sp,sp,0x4
     2e8:	0000                	unimp
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
    int line[size_b][size_a + size_b];
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2f2:	110c                	addi	a1,sp,160
    int line[size_b][size_a + size_b];
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
     2f8:	067c                	addi	a5,sp,780
    int pola[size_a];
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
    int line[size_b][size_a + size_b];
     302:	002c                	addi	a1,sp,8
    int pola[size_a];
     304:	0000                	unimp
     306:	a00e                	fsd	ft3,0(sp)
    int polb[size_b];
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
    int pola[size_a];
     30e:	4908                	lw	a0,16(a0)
    int polb[size_b];
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     314:	705f 0400 12bb      	0x12bb0400705f
    int line[size_b][size_a + size_b];
     31a:	0300                	addi	s0,sp,384
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31c:	0000                	unimp
    int pola[size_a];
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
    for (i = 0; i < size_b; ++i){
     326:	005d                	c.nop	23
     328:	0000                	unimp
            product2[j] = 0;
     32a:	0f04                	addi	s1,sp,912
     32c:	775f 0400 07bd      	0x7bd0400775f
    for (i = 0; i < size_b; ++i){
     332:	005d                	c.nop	23
     334:	0000                	unimp
    array_equ(pola,a,size_a);
     336:	0c08                	addi	a0,sp,528
     338:	0000014f          	fnmadd.s	ft2,ft0,ft0,ft0,rne
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
     340:	0000                	unimp
    array_equ(polb,b,size_b);
     342:	0c00                	addi	s0,sp,528
     344:	550c                	lw	a1,40(a0)
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
    if(star_mult == 1){
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x1b8>
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
     35e:	8e0c                	0x8e0c
        for (j = size_b -1; j >= 0; j = j-1){
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
            for (k = size_a-1; k >= 0; k = k-1 ){
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
            product2[j] = 0;
     368:	0000                	unimp
     36a:	0c18                	addi	a4,sp,528
     36c:	0135                	addi	sp,sp,13
            line[i][j] = 0;
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
            product2[j] = 0;
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
        for(j = 0; j < size_a + size_b -1; ++j){
     376:	1c00                	addi	s0,sp,560
     378:	060c                	addi	a1,sp,768
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
        for(j = 0; j < size_a + size_b -1; ++j){
     386:	0354                	addi	a3,sp,388
     388:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	cc04                	sw	s1,24(s0)
     38c:	f71d                	bnez	a4,2ba <polymult+0x206>
     38e:	0005                	c.nop	1
     390:	2400                	fld	fs0,8(s0)
     392:	320c                	fld	fa1,32(a2)
     394:	0005                	c.nop	1
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
     39c:	0000                	unimp
     39e:	0c28                	addi	a0,sp,536
     3a0:	06a9                	addi	a3,a3,10
            for (k = size_a-1; k >= 0; k = k-1 ){
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     3a6:	3509                	jal	1a8 <polymult+0xf4>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
        for(j=0;j<size_a+size_b-1;++j){
     3b0:	0400                	addi	s0,sp,512
    for(i=0;i<size_b;++i){
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
        for(j=0;j<size_a+size_b-1;++j){
     3c0:	0012                	c.slli	zero,0x4
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0xc0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c6:	72755f0f          	0x72755f0f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	010c                	addi	a1,sp,128
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	d804                	sw	s1,48(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3da:	3b11                	jal	ee <polymult+0x3a>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e0:	740c                	flw	fa1,40(s0)
     3e2:	0006                	c.slli	zero,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     3e4:	0400                	addi	s0,sp,512
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
            product2[j] += line[i][j];
     3ec:	6c5f0f43          	0x6c5f0f43
        for(j=0;j<size_a+size_b-1;++j){
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
            product2[j] += line[i][j];
     3f4:	d811                	beqz	s0,308 <polymult2+0x48>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
        for(j=0;j<size_a+size_b-1;++j){
     3fa:	650c                	flw	fa1,8(a0)
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
    for(i=0;i<size_b;++i){
     400:	07df 005d 0000      	0x5d07df
}
     406:	0c4c                	addi	a1,sp,532
     408:	00000197          	auipc	gp,0x0
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x4e>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0000032b          	0x32b
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
     42c:	5800                	lw	s0,48(s0)
     42e:	a80c                	fsd	fa1,16(s0)
    int v[size_N];
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	0ee9                	addi	t4,t4,26
    int v[size_N];
     436:	00fe                	slli	ra,ra,0x1f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	0480                	addi	s0,sp,576
     43e:	0000                	unimp
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
     44a:	009c                	addi	a5,sp,64
     44c:	0000                	unimp
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
    int v[size_N];
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
    int q[size_N];
     45c:	bb15                	j	190 <polymult+0xdc>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
    int num_temp[size_N];
     462:	005d                	c.nop	23
     464:	0000                	unimp
    int denum_temp[size_D];
     466:	1000                	addi	s0,sp,32
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
    int num_temp[size_N];
     46c:	1600                	addi	s0,sp,800
    int denum_temp[size_D];
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     472:	00050617          	auipc	a2,0x50
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     476:	2800                	fld	fs0,16(s0)
    int v[size_N];
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    array_equ(num_temp,num,size_N);
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	045e                	slli	s0,s0,0x17
     484:	0000                	unimp
    int denum_temp[size_D];
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
    array_equ(num_temp,num,size_N);
     48a:	005d                	c.nop	23
    int denum_temp[size_D];
     48c:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     48e:	1800                	addi	s0,sp,48
     490:	015e                	slli	sp,sp,0x17
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
  array_equ(denum_temp,denum,size_D);
     498:	000006a7          	0x6a7
     49c:	1804                	addi	s1,sp,48
     49e:	00000237          	lui	tp,0x0
    for (i = 0; i < size_D; ++i) {
     4a2:	6c04                	flw	fs1,24(s0)
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
    for (i = 0; i < size_N; ++i){
     4aa:	1808                	addi	a0,sp,48
     4ac:	000001e7          	jalr	gp,zero # 0 <__DYNAMIC>
    for (i = size_D-1; i >= 0; i = i-1){
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
     4b8:	180c                	addi	a1,sp,48
    for (i = 0; i < size_N; ++i){
     4ba:	04c9                	addi	s1,s1,18
     4bc:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     4be:	6e04                	flw	fs1,24(a2)
    for (u = 0; u < mod; ++u){
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
            num_temp[i] = num_temp[i] + mod;
     4c8:	001f 0000 6f04      	0x6f040000001f
        while (num_temp[i] < 0) {
     4ce:	0802                	c.slli64	a6
     4d0:	000008a7          	0x8a7
        num_temp[i] = num_temp[i] % mod;
     4d4:	1814                	addi	a3,sp,48
    for (i = 0; i < size_N; ++i){
     4d6:	04e5                	addi	s1,s1,25
     4d8:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
    for (i = 0; i < size_N; ++i){
     4de:	005d                	c.nop	23
            denum_temp[i] = denum_temp[i] + mod;
     4e0:	0000                	unimp
     4e2:	1830                	addi	a2,sp,56
        while (denum_temp[i] < 0) {
     4e4:	000004d3          	fadd.s	fs1,ft0,ft0,rne
     4e8:	7304                	flw	fs1,32(a4)
        denum_temp[i] = denum_temp[i] % mod;
     4ea:	1602                	slli	a2,a2,0x20
     4ec:	08bc                	addi	a5,sp,88
    for (i = 0; i < size_D; ++i) {
     4ee:	0000                	unimp
     4f0:	1834                	addi	a3,sp,56
        denum_temp[i] = denum_temp[i] % mod;
     4f2:	0184                	addi	s1,sp,192
     4f4:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     4f6:	7504                	flw	fs1,40(a0)
        q[i] = 0;
     4f8:	0702                	c.slli64	a4
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
        v[i] = 0;
     500:	000004db          	0x4db
        q[i] = 0;
     504:	7704                	flw	fs1,40(a4)
        v[i] = 0;
     506:	0a02                	c.slli64	s4
     508:	08cd                	addi	a7,a7,19
    for (i = 0; i < size_N; ++i){
     50a:	0000                	unimp
     50c:	183c                	addi	a5,sp,56
        if( denum_temp[i] != 0 )
     50e:	000002f7          	0x2f7
    for (i = size_D-1; i >= 0; i = i-1){
     512:	7a04                	flw	fs1,48(a2)
        if ( (b_N*u)%mod == 1 )
     514:	1302                	slli	t1,t1,0x20
     516:	018a                	slli	gp,gp,0x2
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
     51c:	020c                	addi	a1,sp,256
    for (u = 0; u < mod; ++u){
     51e:	0000                	unimp
     520:	7b04                	flw	fs1,48(a4)
        if( num_temp[i] != 0 )
     522:	0702                	c.slli64	a4
    for (i = size_N-1; i >= 0; i = i-1){
     524:	005d                	c.nop	23
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
     52a:	000006c3          	fmadd.s	fa3,ft0,ft0,ft0,rne
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
    while (d >= d2){
     532:	018a                	slli	gp,gp,0x2
     534:	0000                	unimp
    array_equ(result,q,size_N);
     536:	1848                	addi	a0,sp,52
     538:	0414                	addi	a3,sp,512
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
    for(i = size_N; i < (2*size_N); ++i){
     544:	184c                	addi	a1,sp,52
     546:	0000023f 07028004 	0x70280040000023f
        result[i] = num_temp[i-size_N];
     54e:	005d                	c.nop	23
    for(i = size_N; i < (2*size_N); ++i){
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
}
     554:	0000018f          	0x18f
     558:	8104                	0x8104
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
     560:	1854                	addi	a3,sp,52
     562:	00000457          	0x457
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03bc                	addi	a5,sp,456
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
        v[(d-d2)] = u*r_d;
     57e:	d519                	beqz	a0,48c <polydiv+0x5c>
     580:	0002                	c.slli64	zero
     582:	0400                	addi	s0,sp,512
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
        for (i = 0; i < size_N; ++i){
     58c:	1901                	addi	s2,s2,-32
     58e:	066a                	slli	a2,a2,0x1a
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	3d19                	jal	3b2 <polymult2+0xf2>
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
     5aa:	1902                	slli	s2,s2,0x20
        for (i = 0; i < size_N; ++i){
     5ac:	0122                	slli	sp,sp,0x8
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
        for (i = 0; i < size_N; ++i){
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
        for(i = 0; i < size_N; ++i){
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0801                	addi	a6,a6,0
     5c4:	044d                	addi	s0,s0,19
     5c6:	0000                	unimp
     5c8:	c116                	sw	t0,128(sp)
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
            v[i] = v[i] % mod;
     5d4:	009c                	addi	a5,sp,64
        for (i = 0; i < size_N; ++i){
     5d6:	0000                	unimp
     5d8:	05f1                	addi	a1,a1,28
            v[i] = v[i] % mod;
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
     5e0:	1500                	addi	s0,sp,672
        for (i = 0; i < size_N; ++i){
     5e2:	010a                	slli	sp,sp,0x2
                product[i] = product[i] + mod;
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xda>
            while (product[i] < 0) {
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
            product[i] = product[i] % mod;
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
        for (i = 0; i < size_N; ++i){
     5f2:	c804                	sw	s1,16(s0)
     5f4:	0005                	c.nop	1
            product[i] = product[i] % mod;
     5f6:	1000                	addi	s0,sp,32
     5f8:	d304                	sw	s1,32(a4)
        for (i = 0; i < size_N; ++i){
     5fa:	0005                	c.nop	1
            num_temp[i] = num_temp[i] - product[i];
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
     600:	0000                	unimp
     602:	0000061b          	0x61b
        for (i = 0; i < size_N; ++i){
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
            num_temp[i] = num_temp[i] - product[i];
     60a:	1500                	addi	s0,sp,672
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     610:	9015                	srli	s0,s0,0x25
                num_temp[i] = num_temp[i] + mod;
     612:	0000                	unimp
     614:	1500                	addi	s0,sp,672
            while (num_temp[i] < 0){
     616:	005d                	c.nop	23
     618:	0000                	unimp
     61a:	1000                	addi	s0,sp,32
            num_temp[i] = num_temp[i] % mod;
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
            num_temp[i] = num_temp[i] % mod;
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
        for (i = 0; i < size_N; ++i){
     628:	0000                	unimp
            q[i] = q[i] + v[i];
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
     62e:	1500                	addi	s0,sp,672
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
            q[i] = q[i] + v[i];
     638:	0006                	c.slli	zero,0x1
            q[i] = q[i] % mod;
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
            if( num_temp[i] != 0 )
     644:	690a                	flw	fs2,128(sp)
        for (i = size_N-1; i >= 0; i = i-1){
     646:	0000                	unimp
     648:	0200                	addi	s0,sp,256
            v[i] = 0;
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
     64e:	0000                	unimp
     650:	0000065b          	0x65b
        for (i = 0; i < size_N; ++i){
     654:	690a                	flw	fs2,128(sp)
     656:	0000                	unimp
     658:	0000                	unimp
     65a:	0500                	addi	s0,sp,640
        result[i] = num_temp[i-size_N];
     65c:	048e                	slli	s1,s1,0x3
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     668:	341a                	fld	fs0,416(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
    int ri_2[size]; // MX-ring poly, a
     66e:	2804                	fld	fs1,16(s0)
     670:	0801                	addi	a6,a6,0
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     672:	06a1                	addi	a3,a3,8
    int ri_2[size]; // MX-ring poly, a
     674:	0000                	unimp
     676:	b618                	fsd	fa4,40(a2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x166>
     680:	0006                	c.slli	zero,0x1
     682:	0000                	unimp
     684:	9b18                	0x9b18
     686:	0002                	c.slli64	zero
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	8818                	0x8818
    int ri_2[size]; // MX-ring poly, a
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
    int ri_1[size]; // f-random poly, f[N] = 0, b
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
    int ri[size];
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     6a6:	1000                	addi	s0,sp,32
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
    int ti[size];
     6ac:	1a00                	addi	s0,sp,304
     6ae:	00000017          	auipc	zero,0x0
    int qi_1[size];
     6b2:	040e                	slli	s0,s0,0x3
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
    int temp[size];
     6b8:	0006                	c.slli	zero,0x1
     6ba:	1800                	addi	s0,sp,48
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6bc:	00000517          	auipc	a0,0x0
     6c0:	4504                	lw	s1,8(a0)
    int ri_2[size]; // MX-ring poly, a
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
    int temp[size];
     6c6:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6c8:	1800                	addi	s0,sp,48
        ti_2[i] = 0;
     6ca:	0511                	addi	a0,a0,4
     6cc:	0000                	unimp
     6ce:	4604                	lw	s1,8(a2)
     6d0:	1201                	addi	tp,tp,-32
    for (i = 0; i < size; ++i) {
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
    array_equ(ri_2,polyR,size);
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	057f                	0x57f
     6da:	0000                	unimp
     6dc:	4704                	lw	s1,8(a4)
    array_equ(ri_1,polyf,size);
     6de:	1201                	addi	tp,tp,-32
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
    ti_1[0] = 1;
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
     6ea:	f600                	fsw	fs0,40(a2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
     6f2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
        ti_2[i] = 0;
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
        ti_1[i] = 0;
     700:	1318                	addi	a4,sp,416
        ti_2[i] = 0;
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
        ti_1[i] = 0;
     706:	69180287          	0x69180287
    for (i = 0; i < size; ++i) {
     70a:	0000                	unimp
     70c:	0000                	unimp
                ri_2[i] = ri_2[i] + mod;
     70e:	5b18                	lw	a4,48(a4)
     710:	0005                	c.nop	1
            while (ri_2[i] < 0) {
     712:	0400                	addi	s0,sp,512
     714:	0288                	addi	a0,sp,320
     716:	bb12                	fsd	ft4,432(sp)
            ri_2[i] = ri_2[i] % mod;
     718:	0005                	c.nop	1
     71a:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     71c:	ea18                	fsw	fa4,16(a2)
            ri_2[i] = ri_2[i] % mod;
     71e:	0002                	c.slli64	zero
        for (i = 0; i < N + 1; ++i) {
     720:	0400                	addi	s0,sp,512
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	9a18                	0x9a18
     72c:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     72e:	0400                	addi	s0,sp,512
     730:	028a                	slli	t0,t0,0x2
     732:	0001a017          	auipc	zero,0x1a
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     736:	2400                	fld	fs0,8(s0)
     738:	f718                	fsw	fa4,40(a4)
     73a:	0001                	nop
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	b118                	fsd	fa4,32(a0)
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
        for (i = 0; i < N + 1; ++i) {
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
     754:	b018                	fsd	fa4,32(s0)
     756:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
     762:	bc18                	fsd	fa4,56(s0)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
    array_equ(qi_1,res1,size);
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	b518                	fsd	fa4,40(a0)
        for (i = 0; i < N + 1; ++i) {
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	d718                	sw	a4,40(a4)
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
    array_equ(temp,res2,size);
     78a:	7800                	flw	fs0,48(s0)
     78c:	5a18                	lw	a4,48(a2)
     78e:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     798:	8000                	0x8000
     79a:	de18                	sw	a4,56(a2)
     79c:	0002                	c.slli64	zero
     79e:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
     7a4:	0008                	0x8
array_equ(ri_2,ri_1,size);
     7a6:	8800                	0x8800
     7a8:	9118                	0x9118
     7aa:	0005                	c.nop	1
     7ac:	0400                	addi	s0,sp,512
array_equ(ri_1,ri,size);
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
     7b4:	a000                	fsd	fs0,0(s0)
array_equ(ti_2,ti_1,size);
     7b6:	b018                	fsd	fa4,32(s0)
     7b8:	0001                	nop
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
     7c2:	a400                	fsd	fs0,8(s0)
array_equ(ti_1,ti,size);
     7c4:	c818                	sw	a4,16(s0)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
     7ca:	0295                	addi	t0,t0,5
        controlR = 0;
     7cc:	fe16                	fsw	ft5,60(sp)
        for (i = 0; i < N + 1; ++i) {
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	9f18                	0x9f18
    while (controlR != 0) {
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
        for (j = 0; j < mod; ++j) {
     7d8:	0296                	slli	t0,t0,0x5
            if (((ri_2[0] * j) % mod) == 1)
     7da:	fe16                	fsw	ft5,60(sp)
        for (j = 0; j < mod; ++j) {
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
     7e0:	3a18                	fld	fa4,48(a2)
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
        for (i = 0; i < N + 1; ++i) {
     7ea:	0000                	unimp
    }
     7ec:	bc00                	fsd	fs0,56(s0)
     7ee:	4918                	lw	a4,16(a0)
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
     7fc:	5c18                	lw	a4,56(s0)
     7fe:	0004                	0x4
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
                ri_1[i] = ri_1[i] + mod;
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
            while (ri_1[i] < 0) {
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
            ri_1[i] = ri_1[i] % mod;
     820:	0000082b          	0x82b
        for (i = 0; i < N + 1; ++i) {
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
            ri_1[i] = ri_1[i] % mod;
     828:	0700                	addi	s0,sp,896
     82a:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     82c:	05c1                	addi	a1,a1,16
            ri[i - (N + 1)] = res[i];
     82e:	0000                	unimp
     830:	0000083b          	0x83b
     834:	690a                	flw	fs2,128(sp)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     836:	0000                	unimp
     838:	1700                	addi	s0,sp,928
            ri[i - (N + 1)] = res[i];
     83a:	1b00                	addi	s0,sp,432
     83c:	04f0                	addi	a2,sp,588
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	029e                	slli	t0,t0,0x7
            temp[i] = ri_2[i] - ri[i];
     840:	00086207          	0x86207
     844:	1800                	addi	s0,sp,48
     846:	038a                	slli	t2,t2,0x2
     848:	0000                	unimp
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
     84e:	0862                	slli	a6,a6,0x18
        for (i = 0; i < N + 1; ++i) {
     850:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     852:	1800                	addi	s0,sp,48
     854:	0375                	addi	t1,t1,29
        for (i = 0; i < N + 1; ++i) {
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
                temp[i] = temp[i] + mod;
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
            while (temp[i] < 0) {
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
            temp[i] = temp[i] % mod;
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0xb2>
        for (i = 0; i < N + 1; ++i) {
     868:	0008                	0x8
     86a:	0a00                	addi	s0,sp,272
            temp[i] = temp[i] % mod;
     86c:	0069                	c.nop	26
     86e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     870:	001d                	c.nop	7
                qi_1[i] = qi_1[i] + mod;
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
            while (qi_1[i] < 0) {
     876:	8200                	0x8200
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
            qi_1[i] = qi_1[i] % mod;
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
            qi_1[i] = qi_1[i] % mod;
     884:	8304                	0x8304
     886:	0302                	c.slli64	t1
        for (i = 0; i < N + 1; ++i) {
     888:	000008a7          	0x8a7
                temp[i] = temp[i] + mod;
     88c:	061d                	addi	a2,a2,7
     88e:	0005                	c.nop	1
            while (temp[i] < 0) {
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
     894:	0006f60b          	0x6f60b
            temp[i] = temp[i] % mod;
     898:	1d00                	addi	s0,sp,688
     89a:	067a                	slli	a2,a2,0x1e
        for (i = 0; i < N + 1; ++i) {
     89c:	0000                	unimp
     89e:	a304                	fsd	fs1,0(a4)
            temp[i] = temp[i] % mod;
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
            ti[i] = ti_2[i] - temp[i];
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
     8ac:	000008b7          	lui	a7,0x0
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
     8b8:	000000a3          	sb	zero,1(zero) # 1 <__DYNAMIC+0x1>
        for (i = 0; i < N + 1; ++i) {
     8bc:	0410                	addi	a2,sp,512
            ti[i] = ti_2[i] - temp[i];
     8be:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8c2:	cd1f 0008 1500      	0x15000008cd1f
                ti[i] = ti[i] + mod;
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
            while (ti[i] < 0) {
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
            ti[i] = ti[i] % mod;
     8d0:	0008                	0x8
     8d2:	1000                	addi	s0,sp,32
        for (i = 0; i < N + 1; ++i) {
     8d4:	8a04                	0x8a04
     8d6:	0001                	nop
            ti[i] = ti[i] % mod;
     8d8:	1f00                	addi	s0,sp,944
     8da:	08e4                	addi	s1,sp,92
        for (i = 0; i < N + 1; ++i) {
     8dc:	0000                	unimp
              qi_1[i] = 0;
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
     8e4:	0410                	addi	a2,sp,512
            controlR += ri[i];
     8e6:	08ea                	slli	a7,a7,0x1a
     8e8:	0000                	unimp
              qi_1[i] = 0;
     8ea:	0410                	addi	a2,sp,512
     8ec:	08d9                	addi	a7,a7,22
        for (i = 0; i < N + 1; ++i) {
     8ee:	0000                	unimp
            controlR += ri[i];
     8f0:	5b09                	li	s6,-30
        for (i = 0; i < N + 1; ++i) {
     8f2:	0006                	c.slli	zero,0x1
            if (((ri_2[0] * j) % mod) == 1)
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
     8fe:	0002                	c.slli64	zero
     900:	a520                	fsd	fs0,72(a0)
     902:	0005                	c.nop	1
        for (j = 0; j < mod; ++j) {
     904:	0400                	addi	s0,sp,512
     906:	67170333          	0x67170333
        for (i = 0; i < N + 1; ++i) {
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
            ti_2[i] = (ti_2[i] * j) % mod;
     90e:	059e                	slli	a1,a1,0x7
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
     918:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     91a:	c421                	beqz	s0,962 <generate_keys+0x46>
int* generate_keys(int N, int p, int q){
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
     92e:	0a00                	addi	s0,sp,272
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	6e22                	flw	ft8,8(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	1238                	addi	a4,sp,296
     946:	0000                	unimp
     948:	4022                	0x4022
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     956:	1490                	addi	a2,sp,608
     958:	0000                	unimp
     95a:	f822                	fsw	fs0,48(sp)
     95c:	0002                	c.slli64	zero
     95e:	0100                	addi	s0,sp,128
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     966:	0305                	addi	t1,t1,1
     968:	16e8                	addi	a0,sp,876
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
     97a:	3f220063          	beq	tp,s2,d5a <ntru_deceypt+0xb4>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1940                	addi	s0,sp,180
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00000097          	auipc	ra,0x0
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ad003          	lhu	zero,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	2d24                	fld	fs1,88(a0)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1234                	addi	a3,sp,296
     9d6:	0000                	unimp
     9d8:	c825                	beqz	s0,a48 <generate_keys+0x12c>
     9da:	0006                	c.slli	zero,0x1
    int polyR[N+1];
     9dc:	0100                	addi	s0,sp,128
     9de:	0289                	addi	t0,t0,2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e0:	5d05                	li	s10,-31
    int polyR[N+1];
     9e2:	0000                	unimp
     9e4:	6a00                	flw	fs0,16(a2)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    polyR[N] = 1;
     9f0:	2600000b          	0x2600000b
     9f4:	03ff                	0x3ff
     9f6:	0000                	unimp
     9f8:	8a01                	andi	a2,a2,0
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xf6>
     a00:	0000                	unimp
     a02:	0000                	unimp
     a04:	8226                	mv	tp,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	630a028b          	0x630a028b
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0315                	addi	t1,t1,5
     a18:	0000                	unimp
     a1a:	8c01                	sub	s0,s0,s0
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x118>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	028d                	addi	t0,t0,3
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	028e                	slli	t0,t0,0x3
     a38:	5d09                	li	s10,-30
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	5d09028f          	0x5d09028f
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	9b28                	0x9b28
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	0291                	addi	t0,t0,4
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x58>
     a5a:	05502677          	0x5502677
    polyR[0] = -1;
     a5e:	0000                	unimp
     a60:	9201                	srli	a2,a2,0x20
    for(i = 1; i < N; ++i){
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
    for (i = N; i < 55; ++i ){
     a6a:	0000                	unimp
     a6c:	ae26                	fsd	fs1,280(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a72:	8b090293          	addi	t0,s2,-1872 # 18b0 <result+0x1c8>
        random_keys[i] = f[i];
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
    for(i = 0; i < N; ++i){
     a7c:	2900                	fld	fs0,16(a0)
     a7e:	000000bb          	0xbb
     a82:	9401                	srai	s0,s0,0x20
    for(i = N; i < (2*N); ++i){
     a84:	0902                	c.slli64	s2
     a86:	0b9d                	addi	s7,s7,7
     a88:	0000                	unimp
     a8a:	7126                	flw	ft2,104(sp)
        random_keys[i] = g[i-N];
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
     a90:	0295                	addi	t0,t0,5
     a92:	af09                	j	11a4 <_endtext+0xf0>
    for(i = N; i < (2*N); ++i){
     a94:	1200000b          	0x1200000b
    for(i = (2*N); i < (3*N); ++i){
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	00000247          	fmsub.s	ft4,ft0,ft0,ft0,rne
    fp = ext_euclid(polyR, f, (N+1), p);
     aa0:	9601                	srai	a2,a2,0x20
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
     aa8:	1e26                	slli	t3,t3,0x29
    for(i = (2*N); i < (3*N); ++i){
     aaa:	0004                	0x4
        random_keys[i] = fp[i-(2*N)];
     aac:	0100                	addi	s0,sp,128
     aae:	d3090297          	auipc	t0,0xd3090
     ab2:	6500000b          	0x6500000b
    for(i = (2*N); i < (3*N); ++i){
     ab6:	0001                	nop
    fq = ext_euclid(polyR, f, (N+1), q);
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	9801                	andi	s0,s0,-32
     abe:	0902                	c.slli64	s2
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
     ac8:	000f922b          	0xf922b
        random_keys[i] = fq[i-(3*N)];
     acc:	da00                	sw	s0,48(a2)
     ace:	0019                	c.nop	6
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
    for(i = (3*N); i < (4*N); ++i){
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    fg = polymult2(fq, N, g, N, 0);
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	7403055b          	0x7403055b
     ae2:	0011                	c.nop	4
    for(i = 0; i < (2*N-1); ++i){
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
     aec:	000fb02b          	0xfb02b
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af0:	9500                	0x9500
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = (4*N); i < (5*N); ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x94>
     b00:	5b01                	li	s6,-32
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b02:	3301                	jal	802 <ext_euclid+0x194>
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
    for(i = (4*N); i < (5*N); ++i){
     b0a:	2b00                	fld	fs0,16(a4)
     b0c:	1030                	addi	a2,sp,40
     b0e:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     b14:	00000b33          	add	s6,zero,zero
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
    for(i = (5*N); i < (6*N+1); ++i){
     b1c:	3508                	fld	fa0,40(a0)
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
}
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x128>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x17b>
     b32:	2d00                	fld	fs0,24(a0)
     b34:	1052                	c.slli	zero,0x34
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x20>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra) # 114f <_endtext+0x9b>
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
        polyR[i] = 0;
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
    for(i = 1; i < N; ++i){
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
        f[i] = 0;
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
        g[i] = 0;
     b84:	0000                	unimp
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
    for (i = N; i < 55; ++i ){
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
        random_keys[i] = f[i];
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
    for(i = 0; i < N; ++i){
     ba2:	00000baf          	0xbaf
     ba6:	692e                	flw	fs2,200(sp)
        random_keys[i] = g[i-N];
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
    for(i = N; i < (2*N); ++i){
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
     bb6:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     bb8:	692e                	flw	fs2,200(sp)
     bba:	0000                	unimp
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
    for(i = (2*N); i < (3*N); ++i){
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
        random_keys[i] = fq[i-(3*N)];
     bca:	692e                	flw	fs2,200(sp)
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
    for(i = (3*N); i < (4*N); ++i){
     bd6:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bd8:	0be5                	addi	s7,s7,25
    for(i = (3*N); i < (4*N); ++i){
     bda:	0000                	unimp
        fg[i] = fg[i]*p;
     bdc:	692e                	flw	fs2,200(sp)
    for(i = 0; i < (2*N-1); ++i){
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
        fg[i] = fg[i]*p;
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	01c6                	slli	gp,gp,0x11
     be8:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bea:	5c01                	li	s8,-32
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bec:	0602                	c.slli64	a2
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2e8>
     bf2:	0ca6                	slli	s9,s9,0x9
     bf4:	0000                	unimp
     bf6:	00c8                	addi	a0,sp,68
    for(i = (4*N); i < (5*N); ++i){
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
        random_keys[i] = polyR[i-(5*N)];
     bfc:	0d66                	slli	s10,s10,0x19
     bfe:	0000                	unimp
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	025c                	addi	a5,sp,260
     c06:	00005d17          	auipc	s10,0x5
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	d900                	sw	s0,48(a0)
        random_keys[i] = polyR[i-(5*N)];
     c0c:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	3000                	fld	fs0,32(s0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c10:	0070                	addi	a2,sp,12
     c12:	5c01                	li	s8,-32
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	7130                	flw	fa2,96(a0)
     c20:	0100                	addi	s0,sp,128
     c22:	025c                	addi	a5,sp,260
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00ae                	slli	ra,ra,0xb
     c30:	0000                	unimp
     c32:	5c01                	li	s8,-32
     c34:	2d02                	fld	fs10,0(sp)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x3c>
    temp = polymult(public_key,N,random_val,48,q,0);
     c3a:	0000028b          	0x28b
     c3e:	7131                	addi	sp,sp,-192
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	025c                	addi	a5,sp,260
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
    for(i = 0; i < 48; ++i){
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
        temp[i] = temp[i] + message[i];
     c50:	03ff                	0x3ff
     c52:	0000                	unimp
     c54:	5c01                	li	s8,-32
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x5e>
     c5c:	02ee                	slli	t0,t0,0x1b
     c5e:	0000                	unimp
     c60:	8231                	srli	a2,a2,0xc
    for(i = 0; i < 48; ++i){
     c62:	0006                	c.slli	zero,0x1
     c64:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	025c                	addi	a5,sp,260
     c68:	6366                	flw	ft6,88(sp)
     c6a:	0f00000b          	0xf00000b
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x1dc>
     c72:	02b2                	slli	t0,t0,0xc
     c74:	0000                	unimp
     c76:	5e01                	li	t3,-32
    for(i = (2*N); i < (3*N); ++i){
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x80>
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	025f 630a 000b      	0xb630a025f
}
     c88:	4600                	lw	s0,8(a2)
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1ec>
     c8e:	3261                	jal	616 <polydiv+0x1e6>
     c90:	0100                	addi	s0,sp,128
     c92:	0260                	addi	s0,sp,268
        CT[i-(2*N)] = CT[i];
     c94:	630a                	flw	ft6,128(sp)
     c96:	5900000b          	0x5900000b
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1ec>
    for(i = (2*N); i < (3*N); ++i){
     c9e:	61010063          	beq	sp,a6,129e <_bss_start+0x66>
        CT[i-(2*N)] = CT[i];
     ca2:	0a02                	c.slli64	s4
    for(i = (2*N); i < (3*N); ++i){
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0x14>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca8:	0382                	c.slli64	t2
     caa:	0000                	unimp
     cac:	632a                	flw	ft6,136(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cae:	0032                	c.slli	zero,0xc
     cb0:	6201                	0x6201
     cb2:	0a02                	c.slli64	s4
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x24>
     cb8:	0395                	addi	t2,t2,5
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbe:	0100                	addi	s0,sp,128
     cc0:	5d090263          	beq	s2,a6,1284 <_bss_start+0x4c>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc4:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc6:	b300                	fsd	fs0,32(a4)
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x1fc>
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ccc:	0cdc                	addi	a5,sp,596
     cce:	0000                	unimp
     cd0:	1619                	addi	a2,a2,-26
     cd2:	0000                	unimp
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd8:	012c                	addi	a1,sp,136
     cda:	035a                	slli	t1,t1,0x16
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cdc:	2c5d01f3          	0x2c5d01f3
     ce0:	5b01                	li	s6,-32
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
        if(a2[i] <= q/2)
     cf8:	000cec2b          	0xcec2b
     cfc:	0000                	unimp
    for (i = 0; i < N; ++i){
     cfe:	0014                	0x14
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
    c = polymult2(secret_key_fp,N,a2,N,0);
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1c:	0000                	unimp
     d1e:	000d102b          	0xd102b
}
     d22:	1900                	addi	s0,sp,176
     d24:	0016                	c.slli	zero,0x5
     d26:	4300                	lw	s0,0(a4)
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
        a2[i-(2*N)] = a2[i];
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
     d3e:	5e01                	li	t3,-32
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	3001                	jal	540 <polydiv+0x110>
     d42:	2d00                	fld	fs0,24(a0)
        a2[i-(2*N)] = a2[i];
     d44:	0d1c                	addi	a5,sp,656
     d46:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d48:	1400                	addi	s0,sp,544
        if(a2[i] <= q/2)
     d4a:	0000                	unimp
     d4c:	012c                	addi	a1,sp,136
     d4e:	0079025b          	0x79025b
            a2[i] = (-1)*(q-a2[i]);
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
    for (i = 0; i < N; ++i){
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
        c2[i-(2*N)] = c2[i];
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
     d62:	0085                	addi	ra,ra,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d64:	0000                	unimp
     d66:	0006442f          	0x6442f
        c2[i-(2*N)] = c2[i];
     d6a:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	023a                	slli	tp,tp,0xe
  jal x0, default_exc_handler
     d6e:	6306                	flw	ft6,64(sp)
     d70:	1000000b          	0x1000000b
  mv  x1, x0
     d74:	000c                	0xc
  mv  x2, x1
     d76:	9600                	0x9600
  mv  x3, x1
     d78:	0000                	unimp
  mv  x4, x1
     d7a:	0100                	addi	s0,sp,128
  mv  x5, x1
     d7c:	959c                	0x959c
  mv  x6, x1
     d7e:	000e                	c.slli	zero,0x3
  mv  x7, x1
     d80:	3000                	fld	fs0,32(s0)
  mv  x8, x1
     d82:	004e                	c.slli	zero,0x13
  mv  x9, x1
     d84:	3a01                	jal	694 <ext_euclid+0x26>
  mv x10, x1
     d86:	1702                	slli	a4,a4,0x20
  mv x11, x1
     d88:	005d                	c.nop	23
  mv x12, x1
     d8a:	0000                	unimp
  mv x13, x1
     d8c:	0438                	addi	a4,sp,520
  mv x14, x1
     d8e:	0000                	unimp
  mv x15, x1
     d90:	7130                	flw	fa2,96(a0)
  mv x16, x1
     d92:	0100                	addi	s0,sp,128
  mv x17, x1
     d94:	023a                	slli	tp,tp,0xe
  mv x18, x1
     d96:	5d1e                	lw	s10,228(sp)
  mv x19, x1
     d98:	0000                	unimp
  mv x20, x1
     d9a:	6400                	flw	fs0,8(s0)
  mv x21, x1
     d9c:	0004                	0x4
  mv x22, x1
     d9e:	3100                	fld	fs0,32(a0)
  mv x23, x1
     da0:	0000039b          	0x39b
  mv x25, x1
     da4:	3a01                	jal	6b4 <ext_euclid+0x46>
  mv x26, x1
     da6:	2602                	fld	fa2,0(sp)
  mv x27, x1
     da8:	00000b63          	beqz	zero,dbe <_start+0x4>
  mv x29, x1
     dac:	0000049b          	0x49b
  mv x31, x1
     db0:	5031                	c.li	zero,-20
  la   x2, _stack_start
     db2:	0005                	c.nop	1
     db4:	0100                	addi	s0,sp,128
     db6:	023a                	slli	tp,tp,0xe
     db8:	6334                	flw	fa3,64(a4)
  la x26, _bss_start
     dba:	c700000b          	0xc700000b
     dbe:	0004                	0x4
     dc0:	3100                	fld	fs0,32(a0)
  la x27, _bss_end
     dc2:	0682                	c.slli64	a3
     dc4:	0000                	unimp
     dc6:	3a01                	jal	6d6 <ext_euclid+0x68>
     dc8:	4502                	lw	a0,0(sp)
  bge x26, x27, zero_loop_end
     dca:	00000b63          	beqz	zero,de0 <main_entry+0x8>
  sw x0, 0(x26)
     dce:	04fe                	slli	s1,s1,0x1f
     dd0:	0000                	unimp
  addi x26, x26, 4
     dd2:	a229                	j	edc <memset+0x1a>
  ble x26, x27, zero_loop
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
  addi x10, x0, 0
     dd8:	023c                	addi	a5,sp,264
     dda:	630a                	flw	ft6,128(sp)
  addi x11, x0, 0
     ddc:	3200000b          	0x3200000b
  jal x1, main
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
     de4:	023d                	addi	tp,tp,15
     de6:	630a                	flw	ft6,128(sp)
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	036a                	slli	t1,t1,0x1a
     df0:	0000                	unimp
     df2:	3f01                	jal	d02 <ntru_deceypt+0x5c>
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	2126                	fld	ft2,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	0240                	addi	s0,sp,260
     e06:	630a                	flw	ft6,128(sp)
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	4101                	li	sp,0
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	0548                	addi	a0,sp,644
     e1c:	0000                	unimp
     e1e:	000c382b          	0xc382b
     e22:	da00                	sw	s0,48(a2)
     e24:	0019                	c.nop	6
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	10b4                	addi	a3,sp,104
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c4a                	slli	s8,s8,0x12
     e44:	0000                	unimp
     e46:	1792                	slli	a5,a5,0x24
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	0084                	addi	s1,sp,64
     e54:	012c                	addi	a1,sp,136
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 782d      	0x782d0030015f
     e74:	000c                	0xc
     e76:	0000                	unimp
     e78:	0014                	0x14
     e7a:	2c00                	fld	fs0,24(s0)
     e7c:	5b01                	li	s6,-32
     e7e:	7902                	flw	fs2,32(sp)
     e80:	2c00                	fld	fs0,24(s0)
     e82:	5c01                	li	s8,-32
     e84:	8302                	jr	t1
     e86:	2c00                	fld	fs0,24(s0)
     e88:	5d01                	li	s10,-32
     e8a:	7802                	flw	fa6,32(sp)
     e8c:	2c01                	jal	109c <main+0x132>
     e8e:	5e01                	li	t3,-32
     e90:	8202                	jr	tp
     e92:	0000                	unimp
     e94:	2f00                	fld	fs0,24(a4)
     e96:	030c                	addi	a1,sp,384
     e98:	0000                	unimp
     e9a:	e201                	bnez	a2,e9a <memcpy+0xb6>
     e9c:	0601                	addi	a2,a2,0
     e9e:	00000b63          	beqz	zero,eb4 <memcpy+0xd0>
     ea2:	091c                	addi	a5,sp,144
     ea4:	0000                	unimp
     ea6:	02f4                	addi	a3,sp,332
     ea8:	0000                	unimp
     eaa:	9c01                	0x9c01
     eac:	1045                	c.nop	-15
     eae:	0000                	unimp
     eb0:	4e30                	lw	a2,88(a2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	01e2                	slli	gp,gp,0x18
     eb6:	5d18                	lw	a4,56(a0)
     eb8:	0000                	unimp
     eba:	8a00                	0x8a00
     ebc:	0005                	c.nop	1
     ebe:	3000                	fld	fs0,32(s0)
     ec0:	0070                	addi	a2,sp,12
     ec2:	e201                	bnez	a2,ec2 <memset>
     ec4:	1f01                	addi	t5,t5,-32
     ec6:	005d                	c.nop	23
     ec8:	0000                	unimp
     eca:	000005db          	0x5db
     ece:	7130                	flw	fa2,96(a0)
     ed0:	0100                	addi	s0,sp,128
     ed2:	01e2                	slli	gp,gp,0x18
     ed4:	5d26                	lw	s10,104(sp)
     ed6:	0000                	unimp
     ed8:	1200                	addi	s0,sp,288
     eda:	0006                	c.slli	zero,0x1
     edc:	3200                	fld	fs0,32(a2)
     ede:	0066                	c.slli	zero,0x19
     ee0:	e401                	bnez	s0,ee8 <memset+0x26>
     ee2:	0901                	addi	s2,s2,0
     ee4:	1045                	c.nop	-15
     ee6:	0000                	unimp
     ee8:	7c989103          	lh	sp,1993(a7)
     eec:	6732                	flw	fa4,12(sp)
     eee:	0100                	addi	s0,sp,128
     ef0:	01e5                	addi	gp,gp,25
     ef2:	4509                	li	a0,2
     ef4:	0010                	0x10
     ef6:	0300                	addi	s0,sp,384
     ef8:	f491                	bnez	s1,e04 <memcpy+0x20>
     efa:	2a7d                	jal	10b8 <_endtext+0x4>
     efc:	7066                	flw	ft0,120(sp)
     efe:	0100                	addi	s0,sp,128
     f00:	630a01e7          	jalr	gp,1584(s4)
     f04:	4900000b          	0x4900000b
     f08:	0006                	c.slli	zero,0x1
     f0a:	2a00                	fld	fs0,16(a2)
     f0c:	7166                	flw	ft2,120(sp)
     f0e:	0100                	addi	s0,sp,128
     f10:	01e8                	addi	a0,sp,204
     f12:	630a                	flw	ft6,128(sp)
     f14:	5c00000b          	0x5c00000b
     f18:	0006                	c.slli	zero,0x1
     f1a:	2a00                	fld	fs0,16(a2)
     f1c:	6766                	flw	fa4,88(sp)
     f1e:	0100                	addi	s0,sp,128
     f20:	01e9                	addi	gp,gp,26
     f22:	630a                	flw	ft6,128(sp)
     f24:	7a00000b          	0x7a00000b
     f28:	0006                	c.slli	zero,0x1
     f2a:	2a00                	fld	fs0,16(a2)
     f2c:	6b70                	flw	fa2,84(a4)
     f2e:	0100                	addi	s0,sp,128
     f30:	01ea                	slli	gp,gp,0x1a
     f32:	630a                	flw	ft6,128(sp)
     f34:	9800000b          	0x9800000b
     f38:	0006                	c.slli	zero,0x1
     f3a:	2600                	fld	fs0,8(a2)
     f3c:	0682                	c.slli64	a3
     f3e:	0000                	unimp
     f40:	eb01                	bnez	a4,f50 <memset+0x8e>
     f42:	0901                	addi	s2,s2,0
     f44:	1055                	c.nop	-11
     f46:	0000                	unimp
     f48:	06b6                	slli	a3,a3,0xd
     f4a:	0000                	unimp
     f4c:	692a                	flw	fs2,136(sp)
     f4e:	0100                	addi	s0,sp,128
     f50:	01ec                	addi	a1,sp,204
     f52:	5d09                	li	s10,-30
     f54:	0000                	unimp
     f56:	1900                	addi	s0,sp,176
     f58:	26000007          	0x26000007
     f5c:	03ac                	addi	a1,sp,456
     f5e:	0000                	unimp
     f60:	ed01                	bnez	a0,f78 <main+0xe>
     f62:	0a01                	addi	s4,s4,0
     f64:	00000b63          	beqz	zero,f7a <main+0x10>
     f68:	0855                	addi	a6,a6,21
int main(){
     f6a:	0000                	unimp
     f6c:	00006933          	or	s2,zero,zero
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f70:	6d00                	flw	fs0,24(a0)
     f72:	0008                	0x8
     f74:	2b00                	fld	fs0,16(a4)
     f76:	0962                	slli	s2,s2,0x18
     f78:	0000                	unimp
     f7a:	19e5                	addi	s3,s3,-7
int main(){
     f7c:	0000                	unimp
     f7e:	0f95                	addi	t6,t6,5
     f80:	0000                	unimp
     f82:	012c                	addi	a1,sp,136
     f84:	035a                	slli	t1,t1,0x16
     f86:	a478                	fsd	fa4,200(s0)
     f88:	2c7c                	fld	fa5,216(s0)
     f8a:	5b01                	li	s6,-32
    resultkon[0] = 0xaaaaaaa0;
     f8c:	3001                	jal	78c <ext_euclid+0x11e>
     f8e:	012c                	addi	a1,sp,136
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f90:	025c                	addi	a5,sp,260
    resultkon[0] = 0xaaaaaaa0;
     f92:	d008                	sw	a0,32(s0)
     f94:	2b00                	fld	fs0,16(a4)
     f96:	09e2                	slli	s3,s3,0x18
     f98:	0000                	unimp
     f9a:	19e5                	addi	s3,s3,-7
     f9c:	0000                	unimp
    keys = generate_keys(N, p, q);
     f9e:	0fb5                	addi	t6,t6,13
     fa0:	0000                	unimp
     fa2:	012c                	addi	a1,sp,136
     fa4:	035a                	slli	t1,t1,0x16
     fa6:	f878                	fsw	fa4,116(s0)
    resultkon[0] = 0xaaaaaaa0;
     fa8:	2c7d                	jal	1266 <_bss_start+0x2e>
    resultkon[0] = 0xaaaaaaa1;
     faa:	5b01                	li	s6,-32
     fac:	3001                	jal	7ac <ext_euclid+0x13e>
    keys = generate_keys(N, p, q);
     fae:	012c                	addi	a1,sp,136
    resultkon[0] = 0xaaaaaaa1;
     fb0:	025c                	addi	a5,sp,260
     fb2:	d808                	sw	a0,48(s0)
    for(i = 0; i < N; ++i){
     fb4:	2b00                	fld	fs0,16(a4)
     fb6:	0aaa                	slli	s5,s5,0xa
        secret_key_f[i] = keys[i];
     fb8:	0000                	unimp
     fba:	1068                	addi	a0,sp,44
     fbc:	0000                	unimp
     fbe:	0fdc                	addi	a5,sp,980
     fc0:	0000                	unimp
     fc2:	012c                	addi	a1,sp,136
    for(i = 0; i < N; ++i){
     fc4:	025a                	slli	tp,tp,0x16
     fc6:	0072                	c.slli	zero,0x1c
     fc8:	012c                	addi	a1,sp,136
    for(i = N; i < (2*N); ++i){
     fca:	9878035b          	0x9878035b
     fce:	2c7c                	fld	fa5,216(s0)
     fd0:	5c01                	li	s8,-32
     fd2:	8502                	jr	a0
     fd4:	2c00                	fld	fs0,24(s0)
        secret_key_fp[i-(2*N)] = keys[i];
     fd6:	5d01                	li	s10,-32
     fd8:	8702                	jr	a4
     fda:	0000                	unimp
     fdc:	000ac42b          	0xac42b
    for(i = (2*N); i < (3*N); ++i){
     fe0:	6800                	flw	fs0,16(s0)
     fe2:	0010                	0x10
    for(i = (3*N); i < (4*N); ++i){
     fe4:	0300                	addi	s0,sp,384
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
        public_key[i-(4*N)] = keys[i];
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
    for(i = (4*N); i < (5*N); ++i){
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    1000:	0086                	slli	ra,ra,0x1
    1002:	2b00                	fld	fs0,16(a4)
    1004:	0ae4                	addi	s1,sp,348
        ring_poly[i-(5*N)] = keys[i];
    1006:	0000                	unimp
    1008:	1619                	addi	a2,a2,-26
    100a:	0000                	unimp
    100c:	1028                	addi	a0,sp,40
    100e:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
    1010:	012c                	addi	a1,sp,136
    1012:	0082025b          	0x82025b
    resultkon[0] = 0xbbbbbbb0;
    1016:	012c                	addi	a1,sp,136
    1018:	025c                	addi	a5,sp,260
    101a:	0089                	addi	ra,ra,2
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    101c:	012c                	addi	a1,sp,136
    101e:	025d                	addi	tp,tp,23
    1020:	0082                	c.slli64	ra
    1022:	012c                	addi	a1,sp,136
    resultkon[0] = 0xbbbbbbb1;
    1024:	015e                	slli	sp,sp,0x17
    1026:	0030                	addi	a2,sp,8
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	f82d                	bnez	s0,f9a <main+0x30>
    102a:	000a                	c.slli	zero,0x2
    resultkon[0] = 0xbbbbbbb0;
    102c:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	0014                	0x14
    resultkon[0] = 0xbbbbbbb1;
    1030:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xccccccc0;
    1032:	5c01                	li	s8,-32
    1034:	7202                	flw	ft4,32(sp)
    1036:	2c00                	fld	fs0,24(s0)
    1038:	5d01                	li	s10,-32
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    103a:	8502                	jr	a0
    resultkon[0] = 0xccccccc0;
    103c:	2c00                	fld	fs0,24(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    103e:	5e01                	li	t3,-32
    1040:	8602                	jr	a2
    1042:	0000                	unimp
    1044:	0900                	addi	s0,sp,144
    1046:	005d                	c.nop	23
    1048:	0000                	unimp
    104a:	1055                	c.nop	-11
    104c:	0000                	unimp
    104e:	690a                	flw	fs2,128(sp)
    1050:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    1052:	3600                	fld	fs0,40(a2)
    1054:	0900                	addi	s0,sp,144
            resultkon[0] = 0xDEDEDEDE;
    1056:	005d                	c.nop	23
    1058:	0000                	unimp
    resultkon[0] = 0xccccccc1;	
    105a:	1068                	addi	a0,sp,44
    105c:	0000                	unimp
            resultkon[0] = 0xDEDEDEDE;
    105e:	6934                	flw	fa3,80(a0)
    1060:	0000                	unimp
    for(i = 0; i < 32; ++i){
    1062:	6c00                	flw	fs0,24(s0)
    1064:	0000000f          	fence	unknown,unknown
        if(!(message[i] == Dec_Message[i])){
    1068:	0003492f          	0x3492f
    106c:	0100                	addi	s0,sp,128
    106e:	0141                	addi	sp,sp,16
    1070:	6306                	flw	ft6,64(sp)
    1072:	6e00000b          	0x6e00000b
            resultkon[0] = 0xBABABABA;
    1076:	0006                	c.slli	zero,0x1
    1078:	ae00                	fsd	fs0,24(a2)
    107a:	0002                	c.slli64	zero
    107c:	0100                	addi	s0,sp,128
    107e:	7b9c                	flw	fa5,48(a5)
}
    1080:	31000013          	li	zero,784
    1084:	0682                	c.slli64	a3
    1086:	0000                	unimp
    1088:	4101                	li	sp,0
    108a:	1601                	addi	a2,a2,-32
    108c:	00000b63          	beqz	zero,10a2 <__CTOR_LIST__>
    1090:	000008b3          	add	a7,zero,zero
    1094:	7e31                	lui	t3,0xfffec
    1096:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
    1098:	0100                	addi	s0,sp,128
    for(i = 0; i < 32; ++i){
    109a:	0141                	addi	sp,sp,16
    109c:	6322                	flw	ft6,8(sp)
    109e:	f800000b          	0xf800000b
    10a2:	0008                	0x8
    10a4:	3100                	fld	fs0,32(a0)
    10a6:	0012                	c.slli	zero,0x4
    10a8:	0000                	unimp
    10aa:	4101                	li	sp,0
    10ac:	2d01                	jal	16bc <product2+0x22c>
    10ae:	005d                	c.nop	23
    10b0:	0000                	unimp
    10b2:	093d                	addi	s2,s2,15
    10b4:	0000                	unimp
    10b6:	6d30                	flw	fa2,88(a0)
    10b8:	0100646f          	jal	s0,70c8 <_stack_len+0x30c8>
    10bc:	0141                	addi	sp,sp,16
    10be:	00005d37          	lui	s10,0x5
    10c2:	8100                	0x8100
    10c4:	0009                	c.nop	2
    10c6:	2600                	fld	fs0,8(a2)
    10c8:	0000028b          	0x28b
    10cc:	4301                	li	t1,0
    10ce:	0a01                	addi	s4,s4,0
    10d0:	00000b63          	beqz	zero,10e6 <_endtext+0x32>
    10d4:	09b8                	addi	a4,sp,216
    10d6:	0000                	unimp
    10d8:	4e2a                	lw	t3,136(sp)
    10da:	0100                	addi	s0,sp,128
    10dc:	0144                	addi	s1,sp,132
    10de:	5d09                	li	s10,-30
    10e0:	0000                	unimp
    10e2:	d000                	sw	s0,32(s0)
    10e4:	0009                	c.nop	2
    10e6:	2a00                	fld	fs0,16(a2)
    10e8:	0069                	c.nop	26
    10ea:	4401                	li	s0,0
    10ec:	0c01                	addi	s8,s8,0
    10ee:	005d                	c.nop	23
    10f0:	0000                	unimp
    10f2:	09fe                	slli	s3,s3,0x1f
    10f4:	0000                	unimp
    10f6:	6a2a                	flw	fs4,136(sp)
    10f8:	0100                	addi	s0,sp,128
    10fa:	0144                	addi	s1,sp,132
    10fc:	00005d0f          	0x5d0f
    1100:	1a00                	addi	s0,sp,304
    1102:	000c                	0xc
    1104:	2600                	fld	fs0,8(a2)
    1106:	051d                	addi	a0,a0,7
    1108:	0000                	unimp
    110a:	4501                	li	a0,0
    110c:	0901                	addi	s2,s2,0
    110e:	0000137b          	0x137b
    1112:	0c38                	addi	a4,sp,536
    1114:	0000                	unimp
    1116:	8c26                	mv	s8,s1
    1118:	0005                	c.nop	1
    111a:	0100                	addi	s0,sp,128
    111c:	0146                	slli	sp,sp,0x11
    111e:	8e09                	sub	a2,a2,a0
    1120:	58000013          	li	zero,1408
    1124:	000c                	0xc
    1126:	2a00                	fld	fs0,16(a2)
    1128:	6972                	flw	fs2,28(sp)
    112a:	0100                	addi	s0,sp,128
    112c:	a1090147          	fmsub.s	ft2,fs2,fa6,fs4,rne
    1130:	78000013          	li	zero,1920
    1134:	000c                	0xc
    1136:	2600                	fld	fs0,8(a2)
    1138:	043a                	slli	s0,s0,0xe
    113a:	0000                	unimp
    113c:	4901                	li	s2,0
    113e:	0901                	addi	s2,s2,0
    1140:	13b4                	addi	a3,sp,488
    1142:	0000                	unimp
    1144:	0c98                	addi	a4,sp,592
    1146:	0000                	unimp
    1148:	742a                	flw	fs0,168(sp)
    114a:	0069                	c.nop	26
    114c:	4a01                	li	s4,0
    114e:	0901                	addi	s2,s2,0
    1150:	000013c7          	fmsub.s	ft7,ft0,ft0,ft0,rtz
    1154:	0cce                	slli	s9,s9,0x13
    1156:	0000                	unimp
    1158:	5226                	lw	tp,104(sp)
    115a:	0004                	0x4
    115c:	0100                	addi	s0,sp,128
    115e:	da09014b          	fnmsub.d	ft2,fs2,ft0,fs11,rne
    1162:	ee000013          	li	zero,-288
    1166:	000c                	0xc
    1168:	2600                	fld	fs0,8(a2)
    116a:	0221                	addi	tp,tp,8
    116c:	0000                	unimp
    116e:	4c01                	li	s8,0
    1170:	0901                	addi	s2,s2,0
    1172:	13ed                	addi	t2,t2,-5
    1174:	0000                	unimp
    1176:	0d24                	addi	s1,sp,664
    1178:	0000                	unimp
    117a:	722a                	flw	ft4,168(sp)
    117c:	7365                	lui	t1,0xffff9
    117e:	0100                	addi	s0,sp,128
    1180:	014d                	addi	sp,sp,19
    1182:	630a                	flw	ft6,128(sp)
    1184:	7e00000b          	0x7e00000b
    1188:	000d                	c.nop	3
    118a:	2600                	fld	fs0,8(a2)
    118c:	0145                	addi	sp,sp,17
    118e:	0000                	unimp
    1190:	4e01                	li	t3,0
    1192:	0a01                	addi	s4,s4,0
    1194:	00000b63          	beqz	zero,11aa <_endtext+0xf6>
    1198:	0d9c                	addi	a5,sp,720
    119a:	0000                	unimp
    119c:	4a26                	lw	s4,72(sp)
    119e:	0001                	nop
    11a0:	0100                	addi	s0,sp,128
    11a2:	630a014f          	fnmadd.d	ft2,fs4,fa6,fa2,rne
    11a6:	ba00000b          	0xba00000b
    11aa:	000d                	c.nop	3
    11ac:	2600                	fld	fs0,8(a2)
    11ae:	0000040b          	0x40b
    11b2:	5001                	c.li	zero,-32
    11b4:	0901                	addi	s2,s2,0
    11b6:	005d                	c.nop	23
    11b8:	0000                	unimp
    11ba:	0dd8                	addi	a4,sp,724
    11bc:	0000                	unimp
    11be:	00006933          	or	s2,zero,zero
    11c2:	0e00                	addi	s0,sp,784
    11c4:	000e                	c.slli	zero,0x3
    11c6:	3300                	fld	fs0,32(a4)
    11c8:	0069                	c.nop	26
    11ca:	0000                	unimp
    11cc:	0e3c                	addi	a5,sp,792
    11ce:	0000                	unimp
    11d0:	00006933          	or	s2,zero,zero
    11d4:	6a00                	flw	fs0,16(a2)
    11d6:	000e                	c.slli	zero,0x3
    11d8:	3300                	fld	fs0,32(a4)
    11da:	0069                	c.nop	26
    11dc:	0000                	unimp
    11de:	0e98                	addi	a4,sp,848
    11e0:	0000                	unimp
    11e2:	00006933          	or	s2,zero,zero
    11e6:	c600                	sw	s0,8(a2)
    11e8:	000e                	c.slli	zero,0x3
    11ea:	3300                	fld	fs0,32(a4)
    11ec:	0069                	c.nop	26
    11ee:	0000                	unimp
    11f0:	0ef4                	addi	a3,sp,860
    11f2:	0000                	unimp
    11f4:	00006933          	or	s2,zero,zero
    11f8:	2200                	fld	fs0,0(a2)
    11fa:	2b00000f          	0x2b00000f
    11fe:	06de                	slli	a3,a3,0x17
    1200:	0000                	unimp
    1202:	191a                	slli	s2,s2,0x26
    1204:	0000                	unimp
    1206:	121e                	slli	tp,tp,0x27
    1208:	0000                	unimp
    120a:	012c                	addi	a1,sp,136
    120c:	025a                	slli	tp,tp,0x16
    120e:	012c0083          	lb	ra,18(s8)
    1212:	01f3035b          	0x1f3035b
    1216:	2c5a                	fld	fs8,400(sp)
    1218:	5c01                	li	s8,-32
    121a:	7902                	flw	fs2,32(sp)
    121c:	0000                	unimp
    121e:	0006e62b          	0x6e62b
    1222:	1a00                	addi	s0,sp,304
    1224:	0019                	c.nop	6
    1226:	3e00                	fld	fs0,56(a2)
    1228:	0012                	c.slli	zero,0x4
    122a:	2c00                	fld	fs0,24(s0)
    122c:	5a01                	li	s4,-32
    122e:	8402                	jr	s0
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5b01                	li	s6,-32
    1234:	8a02                	jr	s4
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5c01                	li	s8,-32
    123a:	7902                	flw	fs2,32(sp)
    123c:	0000                	unimp
    123e:	0007402b          	0x7402b
    1242:	0000                	unimp
    1244:	0014                	0x14
    1246:	6a00                	flw	fs0,16(a2)
    1248:	0012                	c.slli	zero,0x4
    124a:	2c00                	fld	fs0,24(s0)
    124c:	5a01                	li	s4,-32
    124e:	8302                	jr	t1
    1250:	2c00                	fld	fs0,24(s0)
    1252:	5b01                	li	s6,-32
    1254:	7902                	flw	fs2,32(sp)
    1256:	2c00                	fld	fs0,24(s0)
    1258:	5c01                	li	s8,-32
    125a:	8402                	jr	s0
    125c:	2c00                	fld	fs0,24(s0)
    125e:	5d01                	li	s10,-32
    1260:	7902                	flw	fs2,32(sp)
    1262:	2c00                	fld	fs0,24(s0)
    1264:	5e01                	li	t3,-32
    1266:	8202                	jr	tp
    1268:	0000                	unimp
    126a:	00076a2b          	0x76a2b
    126e:	0000                	unimp
    1270:	0014                	0x14
    1272:	9600                	0x9600
    1274:	0012                	c.slli	zero,0x4
    1276:	2c00                	fld	fs0,24(s0)
    1278:	5a01                	li	s4,-32
    127a:	7202                	flw	ft4,32(sp)
    127c:	2c00                	fld	fs0,24(s0)
    127e:	5b01                	li	s6,-32
    1280:	7902                	flw	fs2,32(sp)
    1282:	2c00                	fld	fs0,24(s0)
    1284:	5c01                	li	s8,-32
    1286:	8402                	jr	s0
    1288:	2c00                	fld	fs0,24(s0)
    128a:	5d01                	li	s10,-32
    128c:	7902                	flw	fs2,32(sp)
    128e:	2c00                	fld	fs0,24(s0)
    1290:	5e01                	li	t3,-32
    1292:	8202                	jr	tp
    1294:	0000                	unimp
    1296:	0007722b          	0x7722b
    129a:	1a00                	addi	s0,sp,304
    129c:	0019                	c.nop	6
    129e:	b000                	fsd	fs0,32(s0)
    12a0:	0012                	c.slli	zero,0x4
    12a2:	2c00                	fld	fs0,24(s0)
    12a4:	5a01                	li	s4,-32
    12a6:	8802                	jr	a6
    12a8:	2c00                	fld	fs0,24(s0)
    12aa:	5c01                	li	s8,-32
    12ac:	7902                	flw	fs2,32(sp)
    12ae:	0000                	unimp
    12b0:	0007882b          	0x7882b
    12b4:	9200                	0x9200
    12b6:	e1000017          	auipc	zero,0xe1000
    12ba:	0012                	c.slli	zero,0x4
    12bc:	2c00                	fld	fs0,24(s0)
    12be:	5a01                	li	s4,-32
    12c0:	8802                	jr	a6
    12c2:	2c00                	fld	fs0,24(s0)
    12c4:	5b01                	li	s6,-32
    12c6:	7902                	flw	fs2,32(sp)
    12c8:	2c00                	fld	fs0,24(s0)
    12ca:	5c01                	li	s8,-32
    12cc:	8602                	jr	a2
    12ce:	2c00                	fld	fs0,24(s0)
    12d0:	5d01                	li	s10,-32
    12d2:	7902                	flw	fs2,32(sp)
    12d4:	2c00                	fld	fs0,24(s0)
    12d6:	5e01                	li	t3,-32
    12d8:	8202                	jr	tp
    12da:	2c00                	fld	fs0,24(s0)
    12dc:	5f01                	li	t5,-32
    12de:	3001                	jal	ade <generate_keys+0x1c2>
    12e0:	2b00                	fld	fs0,16(a4)
    12e2:	0790                	addi	a2,sp,960
    12e4:	0000                	unimp
    12e6:	191a                	slli	s2,s2,0x26
    12e8:	0000                	unimp
    12ea:	000012fb          	0x12fb
    12ee:	012c                	addi	a1,sp,136
    12f0:	025a                	slli	tp,tp,0x16
    12f2:	0072                	c.slli	zero,0x1c
    12f4:	012c                	addi	a1,sp,136
    12f6:	025c                	addi	a5,sp,260
    12f8:	0079                	c.nop	30
    12fa:	2b00                	fld	fs0,16(a4)
    12fc:	07ae                	slli	a5,a5,0xb
    12fe:	0000                	unimp
    1300:	191a                	slli	s2,s2,0x26
    1302:	0000                	unimp
    1304:	0000131b          	0x131b
    1308:	012c                	addi	a1,sp,136
    130a:	025a                	slli	tp,tp,0x16
    130c:	012c0083          	lb	ra,18(s8)
    1310:	0084025b          	0x84025b
    1314:	012c                	addi	a1,sp,136
    1316:	025c                	addi	a5,sp,260
    1318:	0079                	c.nop	30
    131a:	2b00                	fld	fs0,16(a4)
    131c:	07b6                	slli	a5,a5,0xd
    131e:	0000                	unimp
    1320:	191a                	slli	s2,s2,0x26
    1322:	0000                	unimp
    1324:	0000133b          	0x133b
    1328:	012c                	addi	a1,sp,136
    132a:	025a                	slli	tp,tp,0x16
    132c:	0084                	addi	s1,sp,64
    132e:	012c                	addi	a1,sp,136
    1330:	0087025b          	0x87025b
    1334:	012c                	addi	a1,sp,136
    1336:	025c                	addi	a5,sp,260
    1338:	0079                	c.nop	30
    133a:	2b00                	fld	fs0,16(a4)
    133c:	07c4                	addi	s1,sp,964
    133e:	0000                	unimp
    1340:	191a                	slli	s2,s2,0x26
    1342:	0000                	unimp
    1344:	135e                	slli	t1,t1,0x37
    1346:	0000                	unimp
    1348:	012c                	addi	a1,sp,136
    134a:	055a                	slli	a0,a0,0x16
    134c:	00194003          	lbu	zero,1(s2)
    1350:	2c00                	fld	fs0,24(s0)
    1352:	5b01                	li	s6,-32
    1354:	8602                	jr	a2
    1356:	2c00                	fld	fs0,24(s0)
    1358:	5c01                	li	s8,-32
    135a:	7902                	flw	fs2,32(sp)
    135c:	0000                	unimp
    135e:	cc2d                	beqz	s0,13d8 <_bss_start+0x1a0>
    1360:	1a000007          	0x1a000007
    1364:	0019                	c.nop	6
    1366:	2c00                	fld	fs0,24(s0)
    1368:	5a01                	li	s4,-32
    136a:	8602                	jr	a2
    136c:	2c00                	fld	fs0,24(s0)
    136e:	5b01                	li	s6,-32
    1370:	8902                	jr	s2
    1372:	2c00                	fld	fs0,24(s0)
    1374:	5c01                	li	s8,-32
    1376:	7902                	flw	fs2,32(sp)
    1378:	0000                	unimp
    137a:	0900                	addi	s0,sp,144
    137c:	005d                	c.nop	23
    137e:	0000                	unimp
    1380:	138e                	slli	t2,t2,0x23
    1382:	0000                	unimp
    1384:	6934                	flw	fa3,80(a0)
    1386:	0000                	unimp
    1388:	be00                	fsd	fs0,56(a2)
    138a:	0011                	c.nop	4
    138c:	0000                	unimp
    138e:	5d09                	li	s10,-30
    1390:	0000                	unimp
    1392:	a100                	fsd	fs0,0(a0)
    1394:	34000013          	li	zero,832
    1398:	0069                	c.nop	26
    139a:	0000                	unimp
    139c:	000011c7          	fmsub.s	ft3,ft0,ft0,ft0,rtz
    13a0:	0900                	addi	s0,sp,144
    13a2:	005d                	c.nop	23
    13a4:	0000                	unimp
    13a6:	13b4                	addi	a3,sp,488
    13a8:	0000                	unimp
    13aa:	6934                	flw	fa3,80(a0)
    13ac:	0000                	unimp
    13ae:	d000                	sw	s0,32(s0)
    13b0:	0011                	c.nop	4
    13b2:	0000                	unimp
    13b4:	5d09                	li	s10,-30
    13b6:	0000                	unimp
    13b8:	c700                	sw	s0,8(a4)
    13ba:	34000013          	li	zero,832
    13be:	0069                	c.nop	26
    13c0:	0000                	unimp
    13c2:	11d9                	addi	gp,gp,-10
    13c4:	0000                	unimp
    13c6:	0900                	addi	s0,sp,144
    13c8:	005d                	c.nop	23
    13ca:	0000                	unimp
    13cc:	13da                	slli	t2,t2,0x36
    13ce:	0000                	unimp
    13d0:	6934                	flw	fa3,80(a0)
    13d2:	0000                	unimp
    13d4:	e200                	fsw	fs0,0(a2)
    13d6:	0011                	c.nop	4
    13d8:	0000                	unimp
    13da:	5d09                	li	s10,-30
    13dc:	0000                	unimp
    13de:	ed00                	fsw	fs0,24(a0)
    13e0:	34000013          	li	zero,832
    13e4:	0069                	c.nop	26
    13e6:	0000                	unimp
    13e8:	000011eb          	0x11eb
    13ec:	0900                	addi	s0,sp,144
    13ee:	005d                	c.nop	23
    13f0:	0000                	unimp
    13f2:	1400                	addi	s0,sp,544
    13f4:	0000                	unimp
    13f6:	6934                	flw	fa3,80(a0)
    13f8:	0000                	unimp
    13fa:	f400                	fsw	fs0,40(s0)
    13fc:	0011                	c.nop	4
    13fe:	0000                	unimp
    1400:	7635                	lui	a2,0xfffed
    1402:	0001                	nop
    1404:	0100                	addi	s0,sp,128
    1406:	06b5                	addi	a3,a3,13
    1408:	00000b63          	beqz	zero,141e <_bss_start+0x1e6>
    140c:	0430                	addi	a2,sp,520
    140e:	0000                	unimp
    1410:	023e                	slli	tp,tp,0xf
    1412:	0000                	unimp
    1414:	9c01                	0x9c01
    1416:	15cd                	addi	a1,a1,-13
    1418:	0000                	unimp
    141a:	6e36                	flw	ft8,76(sp)
    141c:	6d75                	lui	s10,0x1d
    141e:	0100                	addi	s0,sp,128
    1420:	13b5                	addi	t2,t2,-19
    1422:	00000b63          	beqz	zero,1438 <_bss_start+0x200>
    1426:	0f50                	addi	a2,sp,916
    1428:	0000                	unimp
    142a:	0000fc37          	lui	s8,0xf
    142e:	0100                	addi	s0,sp,128
    1430:	1cb5                	addi	s9,s9,-19
    1432:	005d                	c.nop	23
    1434:	0000                	unimp
    1436:	0f7c                	addi	a5,sp,924
    1438:	0000                	unimp
    143a:	00066437          	lui	s0,0x66
    143e:	0100                	addi	s0,sp,128
    1440:	28b5                	jal	14bc <product2+0x2c>
    1442:	00000b63          	beqz	zero,1458 <_bss_start+0x220>
    1446:	0fcd                	addi	t6,t6,19
    1448:	0000                	unimp
    144a:	00068837          	lui	a6,0x68
    144e:	0100                	addi	s0,sp,128
    1450:	33b5                	jal	11bc <_endtext+0x108>
    1452:	005d                	c.nop	23
    1454:	0000                	unimp
    1456:	1012                	c.slli	zero,0x24
    1458:	0000                	unimp
    145a:	6d36                	flw	fs10,76(sp)
    145c:	0100646f          	jal	s0,746c <_stack_len+0x346c>
    1460:	3fb5                	jal	13dc <_bss_start+0x1a4>
    1462:	005d                	c.nop	23
    1464:	0000                	unimp
    1466:	1049                	c.nop	-14
    1468:	0000                	unimp
    146a:	7538                	flw	fa4,104(a0)
    146c:	0100                	addi	s0,sp,128
    146e:	005d09b7          	lui	s3,0x5d0
    1472:	0000                	unimp
    1474:	1080                	addi	s0,sp,96
    1476:	0000                	unimp
    1478:	6438                	flw	fa4,72(s0)
    147a:	0100                	addi	s0,sp,128
    147c:	005d0bb7          	lui	s7,0x5d0
    1480:	0000                	unimp
    1482:	10a9                	addi	ra,ra,-22
    1484:	0000                	unimp
    1486:	6439                	lui	s0,0xe
    1488:	0032                	c.slli	zero,0xc
    148a:	b701                	j	138a <_bss_start+0x152>
    148c:	5d0d                	li	s10,-29
    148e:	0000                	unimp
    1490:	3800                	fld	fs0,48(s0)
    1492:	0069                	c.nop	26
    1494:	b701                	j	1394 <_bss_start+0x15c>
    1496:	5d10                	lw	a2,56(a0)
    1498:	0000                	unimp
    149a:	c700                	sw	s0,8(a4)
    149c:	0010                	0x10
    149e:	3900                	fld	fs0,48(a0)
    14a0:	5f62                	lw	t5,56(sp)
    14a2:	004e                	c.slli	zero,0x13
    14a4:	b701                	j	13a4 <_bss_start+0x16c>
    14a6:	5d12                	lw	s10,36(sp)
    14a8:	0000                	unimp
    14aa:	3800                	fld	fs0,48(s0)
    14ac:	5f72                	lw	t5,60(sp)
    14ae:	0064                	addi	s1,sp,12
    14b0:	b701                	j	13b0 <_bss_start+0x178>
    14b2:	5d16                	lw	s10,100(sp)
    14b4:	0000                	unimp
    14b6:	a400                	fsd	fs0,8(s0)
    14b8:	0012                	c.slli	zero,0x4
    14ba:	3a00                	fld	fs0,48(a2)
    14bc:	0000027b          	0x27b
    14c0:	b801                	j	cd0 <ntru_deceypt+0x2a>
    14c2:	630a                	flw	ft6,128(sp)
    14c4:	c200000b          	0xc200000b
    14c8:	0012                	c.slli	zero,0x4
    14ca:	3800                	fld	fs0,48(s0)
    14cc:	0076                	c.slli	zero,0x1d
    14ce:	ba01                	j	dde <main_entry+0x6>
    14d0:	cd09                	beqz	a0,14ea <product2+0x5a>
    14d2:	0015                	c.nop	5
    14d4:	da00                	sw	s0,48(a2)
    14d6:	0012                	c.slli	zero,0x4
    14d8:	3800                	fld	fs0,48(s0)
    14da:	0071                	c.nop	28
    14dc:	bb01                	j	11ec <_endtext+0x138>
    14de:	e009                	bnez	s0,14e0 <product2+0x50>
    14e0:	0015                	c.nop	5
    14e2:	fa00                	fsw	fs0,48(a2)
    14e4:	0012                	c.slli	zero,0x4
    14e6:	3a00                	fld	fs0,48(a2)
    14e8:	016e                	slli	sp,sp,0x1b
    14ea:	0000                	unimp
    14ec:	bc01                	j	efc <memset+0x3a>
    14ee:	630a                	flw	ft6,128(sp)
    14f0:	4700000b          	0x4700000b
    14f4:	3a000013          	li	zero,928
    14f8:	021d                	addi	tp,tp,7
    14fa:	0000                	unimp
    14fc:	bd01                	j	130c <_bss_start+0xd4>
    14fe:	f309                	bnez	a4,1400 <_bss_start+0x1c8>
    1500:	0015                	c.nop	5
    1502:	6500                	flw	fs0,8(a0)
    1504:	3a000013          	li	zero,928
    1508:	0000021b          	0x21b
    150c:	be01                	j	101c <main+0xb2>
    150e:	0609                	addi	a2,a2,2
    1510:	0016                	c.slli	zero,0x5
    1512:	c200                	sw	s0,0(a2)
    1514:	33000013          	li	zero,816
    1518:	0069                	c.nop	26
    151a:	0000                	unimp
    151c:	1435                	addi	s0,s0,-19
    151e:	0000                	unimp
    1520:	00006933          	or	s2,zero,zero
    1524:	6300                	flw	fs0,0(a4)
    1526:	0014                	0x14
    1528:	3300                	fld	fs0,32(a4)
    152a:	0069                	c.nop	26
    152c:	0000                	unimp
    152e:	1491                	addi	s1,s1,-28
    1530:	0000                	unimp
    1532:	00006933          	or	s2,zero,zero
    1536:	bf00                	fsd	fs0,56(a4)
    1538:	0014                	0x14
    153a:	2b00                	fld	fs0,16(a4)
    153c:	048c                	addi	a1,sp,576
    153e:	0000                	unimp
    1540:	191a                	slli	s2,s2,0x26
    1542:	0000                	unimp
    1544:	155c                	addi	a5,sp,676
    1546:	0000                	unimp
    1548:	012c                	addi	a1,sp,136
    154a:	025a                	slli	tp,tp,0x16
    154c:	0088                	addi	a0,sp,64
    154e:	012c                	addi	a1,sp,136
    1550:	01f3035b          	0x1f3035b
    1554:	2c5a                	fld	fs8,400(sp)
    1556:	5c01                	li	s8,-32
    1558:	7902                	flw	fs2,32(sp)
    155a:	0000                	unimp
    155c:	0004a02b          	0x4a02b
    1560:	1a00                	addi	s0,sp,304
    1562:	0019                	c.nop	6
    1564:	7c00                	flw	fs0,56(s0)
    1566:	0015                	c.nop	5
    1568:	2c00                	fld	fs0,24(s0)
    156a:	5a01                	li	s4,-32
    156c:	7202                	flw	ft4,32(sp)
    156e:	2c00                	fld	fs0,24(s0)
    1570:	5b01                	li	s6,-32
    1572:	8b02                	jr	s6
    1574:	2c00                	fld	fs0,24(s0)
    1576:	5c01                	li	s8,-32
    1578:	8302                	jr	t1
    157a:	0000                	unimp
    157c:	0005442b          	0x5442b
    1580:	1a00                	addi	s0,sp,304
    1582:	0019                	c.nop	6
    1584:	9f00                	0x9f00
    1586:	0015                	c.nop	5
    1588:	2c00                	fld	fs0,24(s0)
    158a:	5a01                	li	s4,-32
    158c:	0305                	addi	t1,t1,1
    158e:	16e8                	addi	a0,sp,876
    1590:	0000                	unimp
    1592:	012c                	addi	a1,sp,136
    1594:	0086025b          	0x86025b
    1598:	012c                	addi	a1,sp,136
    159a:	025c                	addi	a5,sp,260
    159c:	0079                	c.nop	30
    159e:	2d00                	fld	fs0,24(a0)
    15a0:	05a2                	slli	a1,a1,0x8
    15a2:	0000                	unimp
    15a4:	1792                	slli	a5,a5,0x24
    15a6:	0000                	unimp
    15a8:	012c                	addi	a1,sp,136
    15aa:	025a                	slli	tp,tp,0x16
    15ac:	0072                	c.slli	zero,0x1c
    15ae:	012c                	addi	a1,sp,136
    15b0:	0083025b          	0x83025b
    15b4:	012c                	addi	a1,sp,136
    15b6:	025c                	addi	a5,sp,260
    15b8:	008a                	slli	ra,ra,0x2
    15ba:	012c                	addi	a1,sp,136
    15bc:	025d                	addi	tp,tp,23
    15be:	012c0083          	lb	ra,18(s8) # f012 <_stack+0x1012>
    15c2:	025e                	slli	tp,tp,0x17
    15c4:	0082                	c.slli64	ra
    15c6:	012c                	addi	a1,sp,136
    15c8:	015f 0030 0900      	0x9000030015f
    15ce:	005d                	c.nop	23
    15d0:	0000                	unimp
    15d2:	15e0                	addi	s0,sp,748
    15d4:	0000                	unimp
    15d6:	6934                	flw	fa3,80(a0)
    15d8:	0000                	unimp
    15da:	1700                	addi	s0,sp,928
    15dc:	0015                	c.nop	5
    15de:	0000                	unimp
    15e0:	5d09                	li	s10,-30
    15e2:	0000                	unimp
    15e4:	f300                	fsw	fs0,32(a4)
    15e6:	0015                	c.nop	5
    15e8:	3400                	fld	fs0,40(s0)
    15ea:	0069                	c.nop	26
    15ec:	0000                	unimp
    15ee:	1520                	addi	s0,sp,680
    15f0:	0000                	unimp
    15f2:	0900                	addi	s0,sp,144
    15f4:	005d                	c.nop	23
    15f6:	0000                	unimp
    15f8:	1606                	slli	a2,a2,0x21
    15fa:	0000                	unimp
    15fc:	6934                	flw	fa3,80(a0)
    15fe:	0000                	unimp
    1600:	2900                	fld	fs0,16(a0)
    1602:	0015                	c.nop	5
    1604:	0000                	unimp
    1606:	5d09                	li	s10,-30
    1608:	0000                	unimp
    160a:	1900                	addi	s0,sp,176
    160c:	0016                	c.slli	zero,0x5
    160e:	3400                	fld	fs0,40(s0)
    1610:	0069                	c.nop	26
    1612:	0000                	unimp
    1614:	1532                	slli	a0,a0,0x2c
    1616:	0000                	unimp
    1618:	3500                	fld	fs0,40(a0)
    161a:	002a                	c.slli	zero,0xa
    161c:	0000                	unimp
    161e:	7c01                	lui	s8,0xfffe0
    1620:	6306                	flw	ft6,64(sp)
    1622:	c000000b          	0xc000000b
    1626:	0002                	c.slli64	zero
    1628:	7000                	flw	fs0,32(s0)
    162a:	0001                	nop
    162c:	0100                	addi	s0,sp,128
    162e:	509c                	lw	a5,32(s1)
    1630:	36000017          	auipc	zero,0x36000
    1634:	0061                	c.nop	24
    1636:	7c01                	lui	s8,0xfffe0
    1638:	6315                	lui	t1,0x5
    163a:	1400000b          	0x1400000b
    163e:	0015                	c.nop	5
    1640:	3700                	fld	fs0,40(a4)
    1642:	000006d7          	0x6d7
    1646:	7c01                	lui	s8,0xfffe0
    1648:	5d1c                	lw	a5,56(a0)
    164a:	0000                	unimp
    164c:	5900                	lw	s0,48(a0)
    164e:	0015                	c.nop	5
    1650:	3600                	fld	fs0,40(a2)
    1652:	0062                	c.slli	zero,0x18
    1654:	7c01                	lui	s8,0xfffe0
    1656:	6329                	lui	t1,0xa
    1658:	aa00000b          	0xaa00000b
    165c:	0015                	c.nop	5
    165e:	3700                	fld	fs0,40(a4)
    1660:	06de                	slli	a3,a3,0x17
    1662:	0000                	unimp
    1664:	7c01                	lui	s8,0xfffe0
    1666:	5d30                	lw	a2,120(a0)
    1668:	0000                	unimp
    166a:	fa00                	fsw	fs0,48(a2)
    166c:	0015                	c.nop	5
    166e:	3700                	fld	fs0,40(a4)
    1670:	050d                	addi	a0,a0,3
    1672:	0000                	unimp
    1674:	7c01                	lui	s8,0xfffe0
    1676:	5d3c                	lw	a5,120(a0)
    1678:	0000                	unimp
    167a:	2600                	fld	fs0,8(a2)
    167c:	0016                	c.slli	zero,0x5
    167e:	3a00                	fld	fs0,48(a2)
    1680:	0620                	addi	s0,sp,776
    1682:	0000                	unimp
    1684:	7e01                	lui	t3,0xfffe0
    1686:	5009                	c.li	zero,-30
    1688:	52000017          	auipc	zero,0x52000
    168c:	0016                	c.slli	zero,0x5
    168e:	3800                	fld	fs0,48(s0)
    1690:	0069                	c.nop	26
    1692:	7f01                	lui	t5,0xfffe0
    1694:	5d09                	li	s10,-30
    1696:	0000                	unimp
    1698:	9600                	0x9600
    169a:	0016                	c.slli	zero,0x5
    169c:	3800                	fld	fs0,48(s0)
    169e:	006a                	c.slli	zero,0x1a
    16a0:	7f01                	lui	t5,0xfffe0
    16a2:	00005d0b          	0x5d0b
    16a6:	d600                	sw	s0,40(a2)
    16a8:	0016                	c.slli	zero,0x5
    16aa:	3800                	fld	fs0,48(s0)
    16ac:	7f01006b          	0x7f01006b
    16b0:	5d0d                	li	s10,-29
    16b2:	0000                	unimp
    16b4:	2d00                	fld	fs0,24(a0)
    16b6:	22000017          	auipc	zero,0x22000
    16ba:	0000026b          	0x26b
    16be:	8001                	c.srli64	s0
    16c0:	630a                	flw	ft6,128(sp)
    16c2:	0600000b          	0x600000b
    16c6:	00149003          	lh	zero,1(s1)
    16ca:	9f00                	0x9f00
    16cc:	0c3a                	slli	s8,s8,0xe
    16ce:	0000                	unimp
    16d0:	0100                	addi	s0,sp,128
    16d2:	0981                	addi	s3,s3,0
    16d4:	176c                	addi	a1,sp,940
    16d6:	0000                	unimp
    16d8:	0000177b          	0x177b
    16dc:	653a                	flw	fa0,140(sp)
    16de:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16e2:	0982                	c.slli64	s3
    16e4:	177f                	0x177f
    16e6:	0000                	unimp
    16e8:	0000178f          	0x178f
    16ec:	00006933          	or	s2,zero,zero
    16f0:	dc00                	sw	s0,56(s0)
    16f2:	33000017          	auipc	zero,0x33000
    16f6:	0069                	c.nop	26
    16f8:	0000                	unimp
    16fa:	1824                	addi	s1,sp,56
    16fc:	0000                	unimp
    16fe:	00006933          	or	s2,zero,zero
    1702:	5c00                	lw	s0,56(s0)
    1704:	0018                	0x18
    1706:	3300                	fld	fs0,32(a4)
    1708:	0069                	c.nop	26
    170a:	0000                	unimp
    170c:	187f                	0x187f
    170e:	0000                	unimp
    1710:	0003422b          	0x3422b
    1714:	1a00                	addi	s0,sp,304
    1716:	0019                	c.nop	6
    1718:	3100                	fld	fs0,32(a0)
    171a:	2c000017          	auipc	zero,0x2c000
    171e:	5a01                	li	s4,-32
    1720:	8a02                	jr	s4
    1722:	2c00                	fld	fs0,24(s0)
    1724:	5b01                	li	s6,-32
    1726:	5a01f303          	0x5a01f303
    172a:	012c                	addi	a1,sp,136
    172c:	025c                	addi	a5,sp,260
    172e:	0188                	addi	a0,sp,192
    1730:	2d00                	fld	fs0,24(a0)
    1732:	034e                	slli	t1,t1,0x13
    1734:	0000                	unimp
    1736:	191a                	slli	s2,s2,0x26
    1738:	0000                	unimp
    173a:	012c                	addi	a1,sp,136
    173c:	025a                	slli	tp,tp,0x16
    173e:	0072                	c.slli	zero,0x1c
    1740:	012c                	addi	a1,sp,136
    1742:	bc78045b          	0xbc78045b
    1746:	067f                	0x67f
    1748:	012c                	addi	a1,sp,136
    174a:	025c                	addi	a5,sp,260
    174c:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    1750:	5d09                	li	s10,-30
    1752:	0000                	unimp
    1754:	6c00                	flw	fs0,24(s0)
    1756:	34000017          	auipc	zero,0x34000
    175a:	0069                	c.nop	26
    175c:	0000                	unimp
    175e:	16ec                	addi	a1,sp,876
    1760:	0000                	unimp
    1762:	6934                	flw	fa3,80(a0)
    1764:	0000                	unimp
    1766:	f500                	fsw	fs0,40(a0)
    1768:	0016                	c.slli	zero,0x5
    176a:	0000                	unimp
    176c:	5d09                	li	s10,-30
    176e:	0000                	unimp
    1770:	7f00                	flw	fs0,56(a4)
    1772:	34000017          	auipc	zero,0x34000
    1776:	0069                	c.nop	26
    1778:	0000                	unimp
    177a:	16fe                	slli	a3,a3,0x3f
    177c:	0000                	unimp
    177e:	0900                	addi	s0,sp,144
    1780:	005d                	c.nop	23
    1782:	0000                	unimp
    1784:	1792                	slli	a5,a5,0x24
    1786:	0000                	unimp
    1788:	6934                	flw	fa3,80(a0)
    178a:	0000                	unimp
    178c:	0700                	addi	s0,sp,896
    178e:	00000017          	auipc	zero,0x0
    1792:	0335                	addi	t1,t1,13
    1794:	0001                	nop
    1796:	0100                	addi	s0,sp,128
    1798:	062c                	addi	a1,sp,776
    179a:	00000b63          	beqz	zero,17b0 <result+0xc8>
    179e:	00b4                	addi	a3,sp,72
    17a0:	0000                	unimp
    17a2:	020c                	addi	a1,sp,256
    17a4:	0000                	unimp
    17a6:	9c01                	0x9c01
    17a8:	18d8                	addi	a4,sp,116
    17aa:	0000                	unimp
    17ac:	6136                	flw	ft2,76(sp)
    17ae:	0100                	addi	s0,sp,128
    17b0:	142c                	addi	a1,sp,552
    17b2:	00000b63          	beqz	zero,17c8 <result+0xe0>
    17b6:	000018c7          	fmsub.s	fa7,ft0,ft0,ft0,rtz
    17ba:	0006d737          	lui	a4,0x6d
    17be:	0100                	addi	s0,sp,128
    17c0:	1b2c                	addi	a1,sp,440
    17c2:	005d                	c.nop	23
    17c4:	0000                	unimp
    17c6:	190c                	addi	a1,sp,176
    17c8:	0000                	unimp
    17ca:	6236                	flw	ft4,76(sp)
    17cc:	0100                	addi	s0,sp,128
    17ce:	282c                	fld	fa1,80(s0)
    17d0:	00000b63          	beqz	zero,17e6 <result+0xfe>
    17d4:	195c                	addi	a5,sp,180
    17d6:	0000                	unimp
    17d8:	0006de37          	lui	t3,0x6d
    17dc:	0100                	addi	s0,sp,128
    17de:	2f2c                	fld	fa1,88(a4)
    17e0:	005d                	c.nop	23
    17e2:	0000                	unimp
    17e4:	19c5                	addi	s3,s3,-15
    17e6:	0000                	unimp
    17e8:	6d36                	flw	fs10,76(sp)
    17ea:	0100646f          	jal	s0,77fa <_stack_len+0x37fa>
    17ee:	3b2c                	fld	fa1,112(a4)
    17f0:	005d                	c.nop	23
    17f2:	0000                	unimp
    17f4:	19fc                	addi	a5,sp,252
    17f6:	0000                	unimp
    17f8:	00050d37          	lui	s10,0x50
    17fc:	0100                	addi	s0,sp,128
    17fe:	442c                	lw	a1,72(s0)
    1800:	005d                	c.nop	23
    1802:	0000                	unimp
    1804:	1a49                	addi	s4,s4,-14
    1806:	0000                	unimp
    1808:	203a                	fld	ft0,392(sp)
    180a:	0006                	c.slli	zero,0x1
    180c:	0100                	addi	s0,sp,128
    180e:	18d8092f          	0x18d8092f
    1812:	0000                	unimp
    1814:	1a76                	slli	s4,s4,0x3d
    1816:	0000                	unimp
    1818:	6938                	flw	fa4,80(a0)
    181a:	0100                	addi	s0,sp,128
    181c:	0930                	addi	a2,sp,152
    181e:	005d                	c.nop	23
    1820:	0000                	unimp
    1822:	1aba                	slli	s5,s5,0x2e
    1824:	0000                	unimp
    1826:	6a38                	flw	fa4,80(a2)
    1828:	0100                	addi	s0,sp,128
    182a:	0b30                	addi	a2,sp,408
    182c:	005d                	c.nop	23
    182e:	0000                	unimp
    1830:	1b86                	slli	s7,s7,0x21
    1832:	0000                	unimp
    1834:	6b38                	flw	fa4,80(a4)
    1836:	0100                	addi	s0,sp,128
    1838:	0d30                	addi	a2,sp,664
    183a:	005d                	c.nop	23
    183c:	0000                	unimp
    183e:	1c21                	addi	s8,s8,-24
    1840:	0000                	unimp
    1842:	5b3a                	lw	s6,172(sp)
    1844:	0002                	c.slli64	zero
    1846:	0100                	addi	s0,sp,128
    1848:	0a31                	addi	s4,s4,12
    184a:	00000b63          	beqz	zero,1860 <result+0x178>
    184e:	00001c6f          	jal	s8,284e <_min_stack+0x84e>
    1852:	0c3a                	slli	s8,s8,0xe
    1854:	0000                	unimp
    1856:	0100                	addi	s0,sp,128
    1858:	0932                	slli	s2,s2,0xc
    185a:	18f4                	addi	a3,sp,124
    185c:	0000                	unimp
    185e:	00001c87          	0x1c87
    1862:	653a                	flw	fa0,140(sp)
    1864:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1868:	19070933          	0x19070933
    186c:	0000                	unimp
    186e:	00001cbf 00006933 	0x693300001cbf
    1876:	2f00                	fld	fs0,24(a4)
    1878:	001d                	c.nop	7
    187a:	3300                	fld	fs0,32(a4)
    187c:	0069                	c.nop	26
    187e:	0000                	unimp
    1880:	1d84                	addi	s1,sp,752
    1882:	0000                	unimp
    1884:	00006933          	or	s2,zero,zero
    1888:	b700                	fsd	fs0,40(a4)
    188a:	001d                	c.nop	7
    188c:	3300                	fld	fs0,32(a4)
    188e:	0069                	c.nop	26
    1890:	0000                	unimp
    1892:	1de6                	slli	s11,s11,0x39
    1894:	0000                	unimp
    1896:	0001462b          	0x1462b
    189a:	1a00                	addi	s0,sp,304
    189c:	0019                	c.nop	6
    189e:	b900                	fsd	fs0,48(a0)
    18a0:	0018                	0x18
    18a2:	2c00                	fld	fs0,24(s0)
    18a4:	5a01                	li	s4,-32
    18a6:	8602                	jr	a2
    18a8:	2c00                	fld	fs0,24(s0)
    18aa:	5b01                	li	s6,-32
    18ac:	5a01f303          	0x5a01f303
    18b0:	012c                	addi	a1,sp,136
    18b2:	045c                	addi	a5,sp,516
    18b4:	b478                	fsd	fa4,232(s0)
    18b6:	067f                	0x67f
    18b8:	2d00                	fld	fs0,24(a0)
    18ba:	015e                	slli	sp,sp,0x17
    18bc:	0000                	unimp
    18be:	191a                	slli	s2,s2,0x26
    18c0:	0000                	unimp
    18c2:	012c                	addi	a1,sp,136
    18c4:	025a                	slli	tp,tp,0x16
    18c6:	0072                	c.slli	zero,0x1c
    18c8:	012c                	addi	a1,sp,136
    18ca:	b078045b          	0xb078045b
    18ce:	067f                	0x67f
    18d0:	012c                	addi	a1,sp,136
    18d2:	025c                	addi	a5,sp,260
    18d4:	0082                	c.slli64	ra
    18d6:	0000                	unimp
    18d8:	5d09                	li	s10,-30
    18da:	0000                	unimp
    18dc:	f400                	fsw	fs0,40(s0)
    18de:	0018                	0x18
    18e0:	3400                	fld	fs0,40(s0)
    18e2:	0069                	c.nop	26
    18e4:	0000                	unimp
    18e6:	1872                	slli	a6,a6,0x3c
    18e8:	0000                	unimp
    18ea:	6934                	flw	fa3,80(a0)
    18ec:	0000                	unimp
    18ee:	7b00                	flw	fs0,48(a4)
    18f0:	0018                	0x18
    18f2:	0000                	unimp
    18f4:	5d09                	li	s10,-30
    18f6:	0000                	unimp
    18f8:	0700                	addi	s0,sp,896
    18fa:	0019                	c.nop	6
    18fc:	3400                	fld	fs0,40(s0)
    18fe:	0069                	c.nop	26
    1900:	0000                	unimp
    1902:	1884                	addi	s1,sp,112
    1904:	0000                	unimp
    1906:	0900                	addi	s0,sp,144
    1908:	005d                	c.nop	23
    190a:	0000                	unimp
    190c:	191a                	slli	s2,s2,0x26
    190e:	0000                	unimp
    1910:	6934                	flw	fa3,80(a0)
    1912:	0000                	unimp
    1914:	8d00                	0x8d00
    1916:	0018                	0x18
    1918:	0000                	unimp
    191a:	0003913b          	0x3913b
    191e:	0100                	addi	s0,sp,128
    1920:	0621                	addi	a2,a2,8
    1922:	0092                	slli	ra,ra,0x4
    1924:	0000                	unimp
    1926:	0022                	c.slli	zero,0x8
    1928:	0000                	unimp
    192a:	9c01                	0x9c01
    192c:	198c                	addi	a1,sp,240
    192e:	0000                	unimp
    1930:	613c                	flw	fa5,64(a0)
    1932:	0031                	c.nop	12
    1934:	2101                	jal	1d34 <random_keys+0x264>
    1936:	6315                	lui	t1,0x5
    1938:	0100000b          	0x100000b
    193c:	3c5a                	fld	fs8,432(sp)
    193e:	3261                	jal	12c6 <_bss_start+0x8e>
    1940:	0100                	addi	s0,sp,128
    1942:	1d21                	addi	s10,s10,-24
    1944:	00000b63          	beqz	zero,195a <ti_2+0x1a>
    1948:	5b01                	li	s6,-32
    194a:	00054037          	lui	zero,0x54
    194e:	0100                	addi	s0,sp,128
    1950:	2421                	jal	1b58 <random_keys+0x88>
    1952:	005d                	c.nop	23
    1954:	0000                	unimp
    1956:	00001e3b          	0x1e3b
    195a:	6938                	flw	fa4,80(a0)
    195c:	0100                	addi	s0,sp,128
    195e:	0522                	slli	a0,a0,0x8
    1960:	005d                	c.nop	23
    1962:	0000                	unimp
    1964:	1e5c                	addi	a5,sp,820
    1966:	0000                	unimp
    1968:	8c3d                	xor	s0,s0,a5
    196a:	0019                	c.nop	6
    196c:	a600                	fsd	fs0,8(a2)
    196e:	0000                	unimp
    1970:	0a00                	addi	s0,sp,272
    1972:	0000                	unimp
    1974:	0100                	addi	s0,sp,128
    1976:	0924                	addi	s1,sp,152
    1978:	a43e                	fsd	fa5,8(sp)
    197a:	0019                	c.nop	6
    197c:	7b00                	flw	fs0,48(a4)
    197e:	001e                	c.slli	zero,0x7
    1980:	3e00                	fld	fs0,56(a2)
    1982:	1999                	addi	s3,s3,-26
    1984:	0000                	unimp
    1986:	1e9e                	slli	t4,t4,0x27
    1988:	0000                	unimp
    198a:	0000                	unimp
    198c:	00063a3f 060f0100 	0x60f010000063a3f
    1994:	b001                	j	1194 <_endtext+0xe0>
    1996:	0019                	c.nop	6
    1998:	4000                	lw	s0,0(s0)
    199a:	3161                	jal	1622 <product2+0x192>
    199c:	0100                	addi	s0,sp,128
    199e:	19b01e0f          	0x19b01e0f
    19a2:	0000                	unimp
    19a4:	6140                	flw	fs0,4(a0)
    19a6:	0032                	c.slli	zero,0xc
    19a8:	0f01                	addi	t5,t5,0
    19aa:	b030                	fsd	fa2,96(s0)
    19ac:	0019                	c.nop	6
    19ae:	0000                	unimp
    19b0:	0410                	addi	a2,sp,512
    19b2:	0069                	c.nop	26
    19b4:	0000                	unimp
    19b6:	8c41                	or	s0,s0,s0
    19b8:	0019                	c.nop	6
    19ba:	8c00                	0x8c00
    19bc:	0000                	unimp
    19be:	0600                	addi	s0,sp,768
    19c0:	0000                	unimp
    19c2:	0100                	addi	s0,sp,128
    19c4:	da9c                	sw	a5,48(a3)
    19c6:	0019                	c.nop	6
    19c8:	3e00                	fld	fs0,56(a2)
    19ca:	1999                	addi	s3,s3,-26
    19cc:	0000                	unimp
    19ce:	1ec1                	addi	t4,t4,-16
    19d0:	0000                	unimp
    19d2:	a442                	fsd	fa6,8(sp)
    19d4:	0019                	c.nop	6
    19d6:	0100                	addi	s0,sp,128
    19d8:	2443005b          	0x2443005b
    19dc:	1a000003          	lb	zero,416(zero) # 1a0 <polymult+0xec>
    19e0:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    19e4:	4300                	lw	s0,0(a4)
    19e6:	0064                	addi	s1,sp,12
    19e8:	0000                	unimp
    19ea:	005a                	c.slli	zero,0x16
    19ec:	0000                	unimp
    19ee:	1e000007          	0x1e000007
    19f2:	0000                	unimp
    19f4:	0200                	addi	s0,sp,256
    19f6:	f200                	fsw	fs0,32(a2)
    19f8:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    19fc:	6d01                	0x6d01
    19fe:	18000027          	0x18000027
    1a02:	0000                	unimp
    1a04:	e500                	fsw	fs0,8(a0)
    1a06:	0006                	c.slli	zero,0x1
    1a08:	ce00                	sw	s0,24(a2)
    1a0a:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    1a0e:	0006                	c.slli	zero,0x1
    1a10:	0100                	addi	s0,sp,128
    1a12:	80              	Address 0x0000000000001a12 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x1d2>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_equ+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4)
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1 # 5001 <_stack_len+0x1001>
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
  ba:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c4:	1000000b          	0x1000000b
    int line[size_b][size_a + size_b];
  c8:	0b0b000f          	0xb0b000f
  cc:	1349                	addi	t1,t1,-14
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
  d8:	390b3b0b          	0x390b3b0b
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
    int pola[size_a];
  ec:	1349                	addi	t1,t1,-14
  ee:	0538                	addi	a4,sp,648
    int line[size_b][size_a + size_b];
  f0:	0000                	unimp
    int pola[size_a];
  f2:	27001513          	0x27001513
    int line[size_b][size_a + size_b];
  f6:	0019                	c.nop	6
    int pola[size_a];
  f8:	1400                	addi	s0,sp,544
    int line[size_b][size_a + size_b];
  fa:	0115                	addi	sp,sp,5
    int pola[size_a];
  fc:	13491927          	0x13491927
    int polb[size_b];
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
    int pola[size_a];
 106:	4900                	lw	s0,16(a0)
    int polb[size_b];
 108:	16000013          	li	zero,352
            line[i][j] = 0;
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 110:	0000                	unimp
 112:	03011317          	auipc	t1,0x3011
    int pola[size_a];
 116:	0b0e                	slli	s6,s6,0x3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    int line[size_b][size_a + size_b];
 11a:	39053b0b          	0x39053b0b
    int polb[size_b];
 11e:	0013010b          	0x13010b
            line[i][j] = 0;
 122:	1800                	addi	s0,sp,48
 124:	000d                	c.nop	3
    for (i = 0; i < size_b; ++i){
 126:	0b3a0e03          	lb	t3,179(s4)
            product[j] = 0;
 12a:	0b39053b          	0xb39053b
 12e:	1349                	addi	t1,t1,-14
 130:	0b38                	addi	a4,sp,408
    for (i = 0; i < size_b; ++i){
 132:	0000                	unimp
 134:	0d19                	addi	s10,s10,6
    array_equ(pola,a,size_a);
 136:	0300                	addi	s0,sp,384
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
 13e:	3813490b          	0x3813490b
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    for (i = 0; i < size_a; ++i){
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
 14a:	0b3a0b0b          	0xb3a0b0b
 14e:	0b39053b          	0xb39053b
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
    array_equ(polb,b,size_b);
 156:	0b01131b          	0xb01131b
 15a:	3b0b3a0b          	0x3b0b3a0b
    for (i = 0; i < size_b; ++i){
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
    if(star_mult == 1){
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 17a:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 17e:	0013490b          	0x13490b
            product[j] = 0;
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
            line[i][j] = 0;
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
            product[j] = 0;
 18c:	151f 2701 0119      	0x1192701151f
        for(j = 0; j < size_a + size_b -1; ++j){
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
    for (i = 0; i < size_b; ++i){
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
        for(j = 0; j < size_a + size_b -1; ++j){
 1a0:	1349                	addi	t1,t1,-14
 1a2:	193c193f 34210000 	0x34210000193c193f
        while (pola[i] < 0){
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
        pola[i] = pola[i] % mod;
 1ae:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_a; ++i){
 1b2:	3f13490b          	0x3f13490b
        pola[i] = pola[i] % mod;
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
 1b8:	0019                	c.nop	6
    for (i = 0; i < size_a; ++i){
 1ba:	2200                	fld	fs0,0(a2)
            polb[i] = polb[i] + mod;
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
        while (polb[i] < 0){
 1c2:	0b390b3b          	0xb390b3b
        polb[i] = polb[i] % mod;
 1c6:	1349                	addi	t1,t1,-14
 1c8:	1802                	slli	a6,a6,0x20
    for (i = 0; i < size_b; ++i){
 1ca:	0000                	unimp
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x52>
        polb[i] = polb[i] % mod;
 1d0:	00052f13          	slti	t5,a0,0
    if(star_mult == 1){
 1d4:	2400                	fld	fs0,8(s0)
        for (j = size_b -1; j >= 0; j = j-1){
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1dc:	0b390b3b          	0xb390b3b
 1e0:	1349                	addi	t1,t1,-14
 1e2:	1802193f 2e250000 	0x2e2500001802193f
    for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	3f01                	jal	fa <polymult+0x46>
 1ec:	0319                	addi	t1,t1,6
 1ee:	3a0e                	fld	fs4,224(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	39053b0b          	0x39053b0b
 1f4:	1113490b          	0x1113490b
}
 1f8:	1201                	addi	tp,tp,-32
 1fa:	4006                	0x4006
 1fc:	9718                	0x9718
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
 202:	0000                	unimp
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
                line[size_b-1-j][k] = pola[k]*polb[j];
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 230:	0213490b          	0x213490b
                line[size_b-1-j][k] = pola[k]*polb[j];
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
        for (j = size_b -1; j >= 0; j = j-1){
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	8289                	srli	a3,a3,0x2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
            line[i][j] = line[i][j] % mod;
 26c:	1842                	slli	a6,a6,0x30
        for(j = 0; j < size_a + size_b -1; ++j){
 26e:	0000                	unimp
 270:	892d                	andi	a0,a0,11
            line[i][j] = line[i][j] % mod;
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
        for(j = 0; j < size_a + size_b -1; ++j){
 27c:	0021                	c.nop	8
    for (i = 0; i < size_b; ++i){
 27e:	1349                	addi	t1,t1,-14
 280:	0000182f          	0x182f
 284:	3f012e2f          	0x3f012e2f
        for(j = 0; j < size_a + size_b -1; ++j){
 288:	0319                	addi	t1,t1,6
            product[j] += line[i][j];
 28a:	3a0e                	fld	fs4,224(sp)
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
        for(i = 0; i < size_b; ++i){
 294:	12011113          	0x12011113
            product[j] += line[i][j];
 298:	4006                	0x4006
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
        for(i = 0; i < size_b; ++i){
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
    for(j = 0; j < size_a + size_b -1; ++j){
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
        for(i = 0; i < size_b; ++i){
 2ac:	0213490b          	0x213490b
        product[j] = product[j] % mod;
 2b0:	31000017          	auipc	zero,0x31000
    for(j = 0; j < size_a + size_b -1; ++j){
 2b4:	0005                	c.nop	1
        product[j] = product[j] % mod;
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
    for(j = 0; j < size_a + size_b -1; ++j){
 2be:	1349                	addi	t1,t1,-14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c0:	1702                	slli	a4,a4,0x20
    int line[size_b][size_a + size_b];
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
 2ca:	39053b0b          	0x39053b0b
 2ce:	0213490b          	0x213490b
    int line[size_b][size_a + size_b];
 2d2:	0018                	0x18
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
 2d8:	1349                	addi	t1,t1,-14
 2da:	1934                	addi	a3,sp,184
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2dc:	1702                	slli	a4,a4,0x20
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
 2e8:	3500                	fld	fs0,40(a0)
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    int line[size_b][size_a + size_b];
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
    int pola[size_a];
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
 304:	36000013          	li	zero,864
    int polb[size_b];
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
    int pola[size_a];
 30e:	0b390b3b          	0xb390b3b
    int polb[size_b];
 312:	1349                	addi	t1,t1,-14
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 314:	1702                	slli	a4,a4,0x20
 316:	0000                	unimp
    int line[size_b][size_a + size_b];
 318:	03000537          	lui	a0,0x3000
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 31c:	3a0e                	fld	fs4,224(sp)
    int pola[size_a];
 31e:	390b3b0b          	0x390b3b0b
    int polb[size_b];
 322:	0213490b          	0x213490b
    for (i = 0; i < size_b; ++i){
 326:	38000017          	auipc	zero,0x38000
            product2[j] = 0;
 32a:	0034                	addi	a3,sp,8
 32c:	0b3a0803          	lb	a6,179(s4)
 330:	0b390b3b          	0xb390b3b
    for (i = 0; i < size_b; ++i){
 334:	1349                	addi	t1,t1,-14
    array_equ(pola,a,size_a);
 336:	1702                	slli	a4,a4,0x20
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
 340:	390b3b0b          	0x390b3b0b
    array_equ(polb,b,size_b);
 344:	0013490b          	0x13490b
 348:	3a00                	fld	fs0,48(a2)
 34a:	0034                	addi	a3,sp,8
 34c:	0b3a0e03          	lb	t3,179(s4)
    if(star_mult == 1){
 350:	0b390b3b          	0xb390b3b
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
 35a:	3f012e3b          	0x3f012e3b
 35e:	0319                	addi	t1,t1,6
        for (j = size_b -1; j >= 0; j = j-1){
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
            for (k = size_a-1; k >= 0; k = k-1 ){
 366:	1119270b          	0x1119270b
            product2[j] = 0;
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
            line[i][j] = 0;
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
            product2[j] = 0;
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
    for (i = 0; i < size_b; ++i){
 380:	0213490b          	0x213490b
 384:	0018                	0x18
        for(j = 0; j < size_a + size_b -1; ++j){
 386:	3d00                	fld	fs0,56(a0)
 388:	011d                	addi	sp,sp,7
                line[size_b-1-j][k] = pola[k]*polb[j];
 38a:	1331                	addi	t1,t1,-20
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
 398:	053e                	slli	a0,a0,0xf
            for (k = size_a-1; k >= 0; k = k-1 ){
 39a:	3100                	fld	fs0,32(a0)
                line[size_b-1-j][k] = pola[k]*polb[j];
 39c:	00170213          	addi	tp,a4,1 # 6d001 <_stack_start+0x5d001>
 3a0:	3f00                	fld	fs0,56(a4)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3a2:	012e                	slli	sp,sp,0xb
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
        for (j = size_b -1; j >= 0; j = j-1){
 3ac:	0b39                	addi	s6,s6,14
 3ae:	0b201927          	0xb201927
    for(i=0;i<size_b;++i){
 3b2:	1301                	addi	t1,t1,-32
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
        for(j=0;j<size_a+size_b-1;++j){
 3c0:	0013490b          	0x13490b
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c4:	4100                	lw	s0,0(a0)
 3c6:	012e                	slli	sp,sp,0xb
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c8:	1331                	addi	t1,t1,-20
 3ca:	0111                	addi	sp,sp,4
 3cc:	0612                	slli	a2,a2,0x4
 3ce:	1840                	addi	s0,sp,52
 3d0:	01194297          	auipc	t0,0x1194
 3d4:	42000013          	li	zero,1056
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	0005                	c.nop	1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3da:	1331                	addi	t1,t1,-20
 3dc:	1802                	slli	a6,a6,0x20
 3de:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e0:	3f002e43          	fmadd.q	ft8,ft0,fa6,ft7,rdn
        for (j = size_b -1; j >= 0; j = j-1){
 3e4:	3c19                	jal	fffffdfa <_stack_start+0xfffefdfa>
 3e6:	6e19                	lui	t3,0x6
 3e8:	030e                	slli	t1,t1,0x3
 3ea:	3a0e                	fld	fs4,224(sp)
            product2[j] += line[i][j];
 3ec:	000b3b0b          	0xb3b0b
        for(j=0;j<size_a+size_b-1;++j){
 3f0:	0000                	unimp
 3f2:	1101                	addi	sp,sp,-32
            product2[j] += line[i][j];
 3f4:	1000                	addi	s0,sp,32
 3f6:	5506                	lw	a0,96(sp)
 3f8:	0306                	slli	t1,t1,0x1
        for(j=0;j<size_a+size_b-1;++j){
 3fa:	1b0e                	slli	s6,s6,0x23
 3fc:	250e                	fld	fa0,192(sp)
 3fe:	130e                	slli	t1,t1,0x23
    for(i=0;i<size_b;++i){
 400:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	103c                	addi	a5,sp,40
       2:	0000                	unimp
       4:	1050                	addi	a2,sp,36
       6:	0000                	unimp
       8:	0001                	nop
       a:	505a                	0x505a
       c:	0010                	0x10
       e:	5100                	lw	s0,32(a0)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1052                	c.slli	zero,0x34
      20:	0000                	unimp
      22:	1092                	slli	ra,ra,0x24
      24:	0000                	unimp
      26:	0001                	nop
      28:	985a                	add	a6,a6,s6
      2a:	0010                	0x10
      2c:	a200                	fsd	fs0,0(a2)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0fb0                	addi	a2,sp,984
      3e:	0000                	unimp
      40:	1004                	addi	s1,sp,32
      42:	0000                	unimp
      44:	0001                	nop
      46:	045a                	slli	s0,s0,0x16
      48:	0010                	0x10
      4a:	2c00                	fld	fs0,24(s0)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	9200                	0x9200
      5e:	e600000f          	0xe600000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fe6                	slli	t6,t6,0x19
      6c:	0000                	unimp
      6e:	0ff0                	addi	a2,sp,988
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0ff0                	addi	a2,sp,988
      78:	0000                	unimp
      7a:	0000102f          	0x102f
  jal x0, default_exc_handler
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	0000102f          	0x102f
  jal x0, default_exc_handler
      86:	1096                	slli	ra,ra,0x25
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	9679                	srai	a2,a2,0x3e
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	9800                	0x9800
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	1098                	addi	a4,sp,96
      9e:	0000                	unimp
}
      a0:	10a2                	slli	ra,ra,0x28
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	9200                	0x9200
      b2:	c000000f          	0xc000000f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b6:	0300000f          	fence	rw,unknown
      ba:	9100                	0x9100
    int line[size_b][size_a + size_b];
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fc0                	addi	s0,sp,980
      c0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c2:	0fc2                	slli	t6,t6,0x10
      c4:	0000                	unimp
    int line[size_b][size_a + size_b];
      c6:	0002                	c.slli64	zero
      c8:	007d                	c.nop	31
      ca:	0fc2                	slli	t6,t6,0x10
      cc:	0000                	unimp
      ce:	1048                	addi	a0,sp,36
      d0:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	487a                	lw	a6,156(sp)
      d8:	0010                	0x10
      da:	5100                	lw	s0,32(a0)
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	5100                	lw	s0,32(a0)
      e4:	0010                	0x10
      e6:	9600                	0x9600
      e8:	0010                	0x10
    int line[size_b][size_a + size_b];
      ea:	0300                	addi	s0,sp,384
    int pola[size_a];
      ec:	9100                	0x9100
      ee:	7af0                	flw	fa2,116(a3)
    int line[size_b][size_a + size_b];
      f0:	1096                	slli	ra,ra,0x25
    int pola[size_a];
      f2:	0000                	unimp
    int line[size_b][size_a + size_b];
      f4:	1098                	addi	a4,sp,96
      f6:	0000                	unimp
    int pola[size_a];
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
      fc:	987a                	add	a6,a6,t5
      fe:	0010                	0x10
    int polb[size_b];
     100:	a200                	fsd	fs0,0(a2)
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
    int pola[size_a];
     106:	9100                	0x9100
    int polb[size_b];
     108:	7af0                	flw	fa2,116(a3)
	...
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     112:	0f92                	slli	t6,t6,0x4
    int pola[size_a];
     114:	0000                	unimp
     116:	0fcc                	addi	a1,sp,980
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     118:	0000                	unimp
    int line[size_b][size_a + size_b];
     11a:	c4910003          	lb	zero,-951(sp)
    int polb[size_b];
     11e:	cc7c                	sw	a5,92(s0)
            line[i][j] = 0;
     120:	d600000f          	0xd600000f
     124:	0200000f          	fence	r,unknown
    for (i = 0; i < size_b; ++i){
     128:	7e00                	flw	fs0,56(a2)
            product[j] = 0;
     12a:	d600                	sw	s0,40(a2)
     12c:	9000000f          	0x9000000f
     130:	0010                	0x10
    for (i = 0; i < size_b; ++i){
     132:	0200                	addi	s0,sp,256
     134:	8200                	0x8200
    array_equ(pola,a,size_a);
     136:	9000                	0x9000
     138:	0010                	0x10
     13a:	9600                	0x9600
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
     140:	9100                	0x9100
     142:	7cc4                	flw	fs1,60(s1)
     144:	1096                	slli	ra,ra,0x25
    for (i = 0; i < size_a; ++i){
     146:	0000                	unimp
     148:	1098                	addi	a4,sp,96
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
     150:	987c                	0x987c
     152:	0010                	0x10
     154:	a200                	fsd	fs0,0(a2)
    array_equ(polb,b,size_b);
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
     15a:	8200                	0x8200
	...
    for (i = 0; i < size_b; ++i){
     164:	9200                	0x9200
    if(star_mult == 1){
     166:	0000000f          	fence	unknown,unknown
     16a:	0010                	0x10
     16c:	0300                	addi	s0,sp,384
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	1000                	addi	s0,sp,32
     174:	0000                	unimp
     176:	1006                	c.slli	zero,0x21
     178:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
     17e:	1006                	c.slli	zero,0x21
     180:	0000                	unimp
            product[j] = 0;
     182:	0000102f          	0x102f
     186:	0002                	c.slli64	zero
            line[i][j] = 0;
     188:	0080                	addi	s0,sp,64
     18a:	0000102f          	0x102f
            product[j] = 0;
     18e:	1096                	slli	ra,ra,0x25
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	967e                	add	a2,a2,t6
    for (i = 0; i < size_b; ++i){
     198:	0010                	0x10
     19a:	9800                	0x9800
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	7200                	flw	fs0,32(a2)
     1a2:	7e98                	flw	fa4,56(a3)
            pola[i] = pola[i] + mod;
     1a4:	1098                	addi	a4,sp,96
     1a6:	0000                	unimp
        while (pola[i] < 0){
     1a8:	10a2                	slli	ra,ra,0x28
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
        pola[i] = pola[i] % mod;
     1b0:	007e                	c.slli	zero,0x1f
    for (i = 0; i < size_a; ++i){
     1b2:	0000                	unimp
     1b4:	0000                	unimp
        pola[i] = pola[i] % mod;
     1b6:	0000                	unimp
     1b8:	b400                	fsd	fs0,40(s0)
    for (i = 0; i < size_a; ++i){
     1ba:	b800000f          	0xb800000f
            polb[i] = polb[i] + mod;
     1be:	0200000f          	fence	r,unknown
        while (polb[i] < 0){
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	5c9f 0010 6600      	0x660000105c9f
    for (i = 0; i < size_b; ++i){
     1ca:	0010                	0x10
     1cc:	0200                	addi	s0,sp,256
        polb[i] = polb[i] % mod;
     1ce:	3000                	fld	fs0,32(s0)
     1d0:	009f 0000 0000      	0x9f
        for (j = size_b -1; j >= 0; j = j-1){
     1d6:	0000                	unimp
     1d8:	a600                	fsd	fs0,8(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
     1da:	000c                	0xc
    for (i = 0; i < size_b; ++i){
     1dc:	be00                	fsd	fs0,56(a2)
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
     1e2:	5a00                	lw	s0,48(a2)
     1e4:	0cbe                	slli	s9,s9,0xf
     1e6:	0000                	unimp
     1e8:	0d26                	slli	s10,s10,0x9
    for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	0000                	unimp
     1ec:	0001                	nop
     1ee:	2658                	fld	fa4,136(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	000d                	c.nop	3
     1f2:	3200                	fld	fs0,32(a2)
     1f4:	000d                	c.nop	3
}
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
     1fa:	9f7f                	0x9f7f
     1fc:	0d32                	slli	s10,s10,0xc
     1fe:	0000                	unimp
     200:	0d38                	addi	a4,sp,664
     202:	0000                	unimp
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0d38                	addi	a4,sp,664
     20c:	0000                	unimp
     20e:	0d6e                	slli	s10,s10,0x1b
     210:	0000                	unimp
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	a600                	fsd	fs0,8(a2)
     21e:	000c                	0xc
                line[size_b-1-j][k] = pola[k]*polb[j];
     220:	c800                	sw	s0,16(s0)
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0cc8                	addi	a0,sp,596
     22a:	0000                	unimp
     22c:	0d30                	addi	a2,sp,664
     22e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     230:	0001                	nop
                line[size_b-1-j][k] = pola[k]*polb[j];
     232:	3065                	jal	fffffada <_stack_start+0xfffefada>
     234:	000d                	c.nop	3
     236:	3800                	fld	fs0,48(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	389f 000d 6e00      	0x6e00000d389f
            for (k = size_a-1; k >= 0; k = k-1 ){
     246:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0ca6                	slli	s9,s9,0x9
     256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0cc0                	addi	s0,sp,596
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	c05c                	sw	a5,4(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	000c                	0xc
     262:	2a00                	fld	fs0,16(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d2a                	slli	s10,s10,0xa
            line[i][j] = line[i][j] % mod;
     26c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     26e:	0d38                	addi	a4,sp,664
     270:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d38                	addi	a4,sp,664
        for(j = 0; j < size_a + size_b -1; ++j){
     27a:	0000                	unimp
     27c:	0d6e                	slli	s10,s10,0x1b
    for (i = 0; i < size_b; ++i){
     27e:	0000                	unimp
     280:	0001                	nop
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     286:	0000                	unimp
     288:	0000                	unimp
            product[j] += line[i][j];
     28a:	a600                	fsd	fs0,8(a2)
     28c:	000c                	0xc
     28e:	c200                	sw	s0,0(a2)
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     294:	5d00                	lw	s0,56(a0)
            product[j] += line[i][j];
     296:	0cc2                	slli	s9,s9,0x10
     298:	0000                	unimp
     29a:	00000cdb          	0xcdb
     29e:	0001                	nop
     2a0:	db5a                	sw	s6,180(sp)
        for(i = 0; i < size_b; ++i){
     2a2:	000c                	0xc
     2a4:	6e00                	flw	fs0,24(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
        for(i = 0; i < size_b; ++i){
     2ac:	5d01                	li	s10,-32
     2ae:	009f 0000 0000      	0x9f
    for(j = 0; j < size_a + size_b -1; ++j){
     2b4:	0000                	unimp
        product[j] = product[j] % mod;
     2b6:	a600                	fsd	fs0,8(a2)
     2b8:	000c                	0xc
     2ba:	ca00                	sw	s0,16(a2)
     2bc:	000c                	0xc
    for(j = 0; j < size_a + size_b -1; ++j){
     2be:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c0:	5e00                	lw	s0,56(a2)
    int line[size_b][size_a + size_b];
     2c2:	0cca                	slli	s9,s9,0x12
     2c4:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	0d34                	addi	a3,sp,664
     2c8:	0000                	unimp
     2ca:	0001                	nop
     2cc:	000d3467          	0xd3467
    int line[size_b][size_a + size_b];
     2d0:	3800                	fld	fs0,48(s0)
     2d2:	000d                	c.nop	3
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
     2d8:	5e01                	li	t3,-32
     2da:	389f 000d 6e00      	0x6e00000d389f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
    int line[size_b][size_a + size_b];
     2ee:	0ca6                	slli	s9,s9,0x9
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2f0:	0000                	unimp
     2f2:	00000cdb          	0xcdb
    int line[size_b][size_a + size_b];
     2f6:	0001                	nop
     2f8:	db5f 000c 6e00      	0x6e00000cdb5f
    int pola[size_a];
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     302:	f300                	fsw	fs0,32(a4)
    int pola[size_a];
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
    int polb[size_b];
     30c:	0000                	unimp
    int pola[size_a];
     30e:	a600                	fsd	fs0,8(a2)
    int polb[size_b];
     310:	000c                	0xc
     312:	db00                	sw	s0,48(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     314:	000c                	0xc
     316:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     318:	6000                	flw	fs0,0(s0)
     31a:	00000cdb          	0xcdb
    int pola[size_a];
     31e:	0d2e                	slli	s10,s10,0xb
     320:	0000                	unimp
    int polb[size_b];
     322:	0001                	nop
    for (i = 0; i < size_b; ++i){
     324:	2e64                	fld	fs1,216(a2)
     326:	000d                	c.nop	3
     328:	3800                	fld	fs0,48(s0)
            product2[j] = 0;
     32a:	000d                	c.nop	3
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
     330:	6001                	0x6001
    for (i = 0; i < size_b; ++i){
     332:	389f 000d 6e00      	0x6e00000d389f
    array_equ(pola,a,size_a);
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
     33c:	6400                	flw	fs0,8(s0)
	...
    array_equ(polb,b,size_b);
     346:	0cdc                	addi	a5,sp,596
     348:	0000                	unimp
     34a:	00000ceb          	0xceb
    if(star_mult == 1){
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	ee00                	fsw	fs0,24(a2)
     35a:	000c                	0xc
     35c:	0c00                	addi	s0,sp,528
     35e:	000d                	c.nop	3
        for (j = size_b -1; j >= 0; j = j-1){
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     364:	0d0c                	addi	a1,sp,656
     366:	0000                	unimp
            product2[j] = 0;
     368:	00000d0f          	0xd0f
     36c:	0001                	nop
            line[i][j] = 0;
     36e:	385c                	fld	fa5,176(s0)
     370:	000d                	c.nop	3
            product2[j] = 0;
     372:	5c00                	lw	s0,56(s0)
     374:	000d                	c.nop	3
        for(j = 0; j < size_a + size_b -1; ++j){
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
    for (i = 0; i < size_b; ++i){
     382:	0d10                	addi	a2,sp,656
     384:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     386:	00000d1b          	0xd1b
                line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	0001                	nop
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
     390:	0000                	unimp
     392:	0000                	unimp
     394:	1c00                	addi	s0,sp,560
     396:	000d                	c.nop	3
     398:	3800                	fld	fs0,48(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0100                	addi	s0,sp,128
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d5c                	addi	a5,sp,660
            for (k = size_a-1; k >= 0; k = k-1 ){
     3a2:	0000                	unimp
     3a4:	0d6e                	slli	s10,s10,0x1b
        for (j = size_b -1; j >= 0; j = j-1){
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
     3ae:	0000                	unimp
        for(j=0;j<size_a+size_b-1;++j){
     3b0:	0000                	unimp
    for(i=0;i<size_b;++i){
     3b2:	ee00                	fsw	fs0,24(a2)
     3b4:	000c                	0xc
     3b6:	f400                	fsw	fs0,40(s0)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cf4                	addi	a3,sp,604
        for(j=0;j<size_a+size_b-1;++j){
     3c0:	0000                	unimp
     3c2:	0d00                	addi	s0,sp,656
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c4:	0000                	unimp
     3c6:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3c8:	005d                	c.nop	23
     3ca:	000d                	c.nop	3
     3cc:	0600                	addi	s0,sp,768
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0d1c                	addi	a5,sp,656
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0d28                	addi	a0,sp,664
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3da:	0000                	unimp
     3dc:	0001                	nop
     3de:	3859                	jal	fffffc74 <_stack_start+0xfffefc74>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e0:	000d                	c.nop	3
     3e2:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     3e4:	000d                	c.nop	3
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d42                	slli	s10,s10,0x10
            product2[j] += line[i][j];
     3ec:	0000                	unimp
     3ee:	0d48                	addi	a0,sp,660
        for(j=0;j<size_a+size_b-1;++j){
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10) # 507f7 <_stack_start+0x407f7>
            product2[j] += line[i][j];
     3f6:	489f 000d 4a00      	0x4a00000d489f
        for(j=0;j<size_a+size_b-1;++j){
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
    for(i=0;i<size_b;++i){
     400:	5d00                	lw	s0,56(a0)
     402:	0d4a                	slli	s10,s10,0x12
     404:	0000                	unimp
}
     406:	0d5c                	addi	a5,sp,660
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	5c5e                	lw	s8,244(sp)
     40e:	000d                	c.nop	3
     410:	6600                	flw	fs0,8(a2)
     412:	000d                	c.nop	3
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d66                	slli	s10,s10,0x19
     41a:	0000                	unimp
     41c:	0d6c                	addi	a1,sp,668
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2)
     424:	6c9f 000d 6e00      	0x6e00000d6c9f
     42a:	000d                	c.nop	3
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0c10                	addi	a2,sp,528
     43a:	0000                	unimp
     43c:	0c2c                	addi	a1,sp,536
     43e:	0000                	unimp
     440:	0001                	nop
     442:	2c5a                	fld	fs8,400(sp)
     444:	000c                	0xc
     446:	7e00                	flw	fs0,56(a2)
     448:	000c                	0xc
     44a:	0100                	addi	s0,sp,128
     44c:	5800                	lw	s0,48(s0)
     44e:	0c7e                	slli	s8,s8,0x1f
    int v[size_N];
     450:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     452:	0ca6                	slli	s9,s9,0x9
     454:	0000                	unimp
    int v[size_N];
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
    int num_temp[size_N];
     464:	0c10                	addi	a2,sp,528
    int denum_temp[size_D];
     466:	0000                	unimp
     468:	0c26                	slli	s8,s8,0x9
     46a:	0000                	unimp
    int num_temp[size_N];
     46c:	0001                	nop
    int denum_temp[size_D];
     46e:	000c265b          	0xc265b
     472:	8c00                	0x8c00
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
    int v[size_N];
     478:	6200                	flw	fs0,0(a2)
     47a:	0c8c                	addi	a1,sp,592
    array_equ(num_temp,num,size_N);
     47c:	0000                	unimp
     47e:	0c94                	addi	a3,sp,592
     480:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	0004                	0x4
     484:	9f5b01f3          	0x9f5b01f3
    int denum_temp[size_D];
     488:	0c94                	addi	a3,sp,592
    array_equ(num_temp,num,size_N);
     48a:	0000                	unimp
    int denum_temp[size_D];
     48c:	0ca6                	slli	s9,s9,0x9
    for (i = 0; i < size_N; ++i){
     48e:	0000                	unimp
     490:	0001                	nop
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
  array_equ(denum_temp,denum,size_D);
     498:	0000                	unimp
     49a:	1000                	addi	s0,sp,32
     49c:	000c                	0xc
     49e:	2a00                	fld	fs0,16(a2)
    for (i = 0; i < size_D; ++i) {
     4a0:	000c                	0xc
     4a2:	0100                	addi	s0,sp,128
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c2a                	slli	s8,s8,0xa
    for (i = 0; i < size_N; ++i){
     4a8:	0000                	unimp
     4aa:	0c6a                	slli	s8,s8,0x1a
     4ac:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4ae:	0001                	nop
     4b0:	6a59                	lui	s4,0x16
     4b2:	000c                	0xc
     4b4:	a600                	fsd	fs0,8(a2)
     4b6:	000c                	0xc
     4b8:	0400                	addi	s0,sp,512
    for (i = 0; i < size_N; ++i){
     4ba:	f300                	fsw	fs0,32(a4)
     4bc:	5c01                	li	s8,-32
        if ( (b_N*u)%mod == 1 )
     4be:	009f 0000 0000      	0x9f
    for (u = 0; u < mod; ++u){
     4c4:	0000                	unimp
     4c6:	1000                	addi	s0,sp,32
            num_temp[i] = num_temp[i] + mod;
     4c8:	000c                	0xc
     4ca:	3700                	fld	fs0,40(a4)
        while (num_temp[i] < 0) {
     4cc:	000c                	0xc
     4ce:	0100                	addi	s0,sp,128
     4d0:	5d00                	lw	s0,56(a0)
        num_temp[i] = num_temp[i] % mod;
     4d2:	00000c37          	lui	s8,0x0
    for (i = 0; i < size_N; ++i){
     4d6:	0c90                	addi	a2,sp,592
     4d8:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     4da:	0001                	nop
     4dc:	9064                	0x9064
    for (i = 0; i < size_N; ++i){
     4de:	000c                	0xc
            denum_temp[i] = denum_temp[i] + mod;
     4e0:	9400                	0x9400
     4e2:	000c                	0xc
        while (denum_temp[i] < 0) {
     4e4:	0400                	addi	s0,sp,512
     4e6:	f300                	fsw	fs0,32(a4)
     4e8:	5d01                	li	s10,-32
        denum_temp[i] = denum_temp[i] % mod;
     4ea:	949f 000c a600      	0xa600000c949f
    for (i = 0; i < size_D; ++i) {
     4f0:	000c                	0xc
        denum_temp[i] = denum_temp[i] % mod;
     4f2:	0100                	addi	s0,sp,128
     4f4:	6400                	flw	fs0,8(s0)
	...
        q[i] = 0;
     4fe:	0c10                	addi	a2,sp,528
        v[i] = 0;
     500:	0000                	unimp
        q[i] = 0;
     502:	00000c37          	lui	s8,0x0
        v[i] = 0;
     506:	0001                	nop
     508:	375e                	fld	fa4,496(sp)
    for (i = 0; i < size_N; ++i){
     50a:	000c                	0xc
     50c:	8e00                	0x8e00
        if( denum_temp[i] != 0 )
     50e:	000c                	0xc
    for (i = size_D-1; i >= 0; i = i-1){
     510:	0100                	addi	s0,sp,128
     512:	6300                	flw	fs0,0(a4)
        if ( (b_N*u)%mod == 1 )
     514:	0c8e                	slli	s9,s9,0x3
     516:	0000                	unimp
     518:	0c94                	addi	a3,sp,592
     51a:	0000                	unimp
     51c:	0004                	0x4
    for (u = 0; u < mod; ++u){
     51e:	9f5e01f3          	0x9f5e01f3
        if( num_temp[i] != 0 )
     522:	0c94                	addi	a3,sp,592
    for (i = size_N-1; i >= 0; i = i-1){
     524:	0000                	unimp
     526:	0ca6                	slli	s9,s9,0x9
     528:	0000                	unimp
     52a:	0001                	nop
     52c:	00000063          	beqz	zero,52c <polydiv+0xfc>
     530:	0000                	unimp
    while (d >= d2){
     532:	0000                	unimp
     534:	4a00                	lw	s0,16(a2)
    array_equ(result,q,size_N);
     536:	000c                	0xc
     538:	7700                	flw	fs0,40(a4)
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     548:	0c4a                	slli	s8,s8,0x12
     54a:	0000                	unimp
     54c:	0c50                	addi	a2,sp,532
     54e:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     550:	0002                	c.slli64	zero
     552:	9f30                	0x9f30
}
     554:	0c78                	addi	a4,sp,540
     556:	0000                	unimp
     558:	0c8a                	slli	s9,s9,0x2
     55a:	0000                	unimp
     55c:	0001                	nop
     55e:	9459                	srai	s0,s0,0x36
     560:	000c                	0xc
     562:	9e00                	0x9e00
     564:	000c                	0xc
     566:	0100                	addi	s0,sp,128
     568:	5900                	lw	s0,48(a0)
     56a:	0c9e                	slli	s9,s9,0x7
     56c:	0000                	unimp
     56e:	0ca4                	addi	s1,sp,600
     570:	0000                	unimp
     572:	7f790003          	lb	zero,2039(s2)
     576:	a49f 000c a600      	0xa600000ca49f
     57c:	000c                	0xc
        v[(d-d2)] = u*r_d;
     57e:	0100                	addi	s0,sp,128
     580:	5900                	lw	s0,48(a0)
	...
     58a:	091c                	addi	a5,sp,144
        for (i = 0; i < size_N; ++i){
     58c:	0000                	unimp
     58e:	0960                	addi	s0,sp,156
     590:	0000                	unimp
     592:	0001                	nop
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	605a                	flw	ft0,148(sp)
     596:	0009                	c.nop	2
     598:	2400                	fld	fs0,8(s0)
     59a:	0100000b          	0x100000b
     59e:	6200                	flw	fs0,0(a2)
     5a0:	0b24                	addi	s1,sp,408
        for (i = 0; i < size_N; ++i){
     5a2:	0000                	unimp
     5a4:	0b48                	addi	a0,sp,404
     5a6:	0000                	unimp
     5a8:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
        for (i = 0; i < size_N; ++i){
     5ac:	489f 000b 6800      	0x6800000b489f
     5b2:	0400000b          	0x400000b
        for (i = 0; i < size_N; ++i){
     5b6:	f300                	fsw	fs0,32(a4)
     5b8:	5a01                	li	s4,-32
     5ba:	689f 000b fc00      	0xfc00000b689f
        for(i = 0; i < size_N; ++i){
     5c0:	0100000b          	0x100000b
        for (i = size_N-1; i >= 0; i = i-1){
     5c4:	6200                	flw	fs0,0(a2)
     5c6:	0bfc                	addi	a5,sp,476
     5c8:	0000                	unimp
     5ca:	0c10                	addi	a2,sp,528
     5cc:	0000                	unimp
     5ce:	7f850003          	lb	zero,2040(a0)
     5d2:	009f 0000 0000      	0x9f
        for (i = 0; i < size_N; ++i){
     5d8:	0000                	unimp
            v[i] = v[i] % mod;
     5da:	1c00                	addi	s0,sp,560
     5dc:	0009                	c.nop	2
     5de:	5800                	lw	s0,48(s0)
     5e0:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     5e2:	0100                	addi	s0,sp,128
                product[i] = product[i] + mod;
     5e4:	5b00                	lw	s0,48(a4)
     5e6:	0958                	addi	a4,sp,148
            while (product[i] < 0) {
     5e8:	0000                	unimp
     5ea:	0b50                	addi	a2,sp,404
     5ec:	0000                	unimp
            product[i] = product[i] % mod;
     5ee:	0001                	nop
     5f0:	000b5067          	0xb5067
        for (i = 0; i < size_N; ++i){
     5f4:	6800                	flw	fs0,16(s0)
            product[i] = product[i] % mod;
     5f6:	0400000b          	0x400000b
        for (i = 0; i < size_N; ++i){
     5fa:	f300                	fsw	fs0,32(a4)
            num_temp[i] = num_temp[i] - product[i];
     5fc:	5b01                	li	s6,-32
     5fe:	689f 000b 1000      	0x1000000b689f
     604:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     606:	0100                	addi	s0,sp,128
     608:	6700                	flw	fs0,8(a4)
	...
                num_temp[i] = num_temp[i] + mod;
     612:	091c                	addi	a5,sp,144
     614:	0000                	unimp
            while (num_temp[i] < 0){
     616:	095c                	addi	a5,sp,148
     618:	0000                	unimp
     61a:	0001                	nop
            num_temp[i] = num_temp[i] % mod;
     61c:	5c5c                	lw	a5,60(s0)
     61e:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     620:	4c00                	lw	s0,24(s0)
     622:	0100000b          	0x100000b
            num_temp[i] = num_temp[i] % mod;
     626:	6600                	flw	fs0,8(a2)
        for (i = 0; i < size_N; ++i){
     628:	0b4c                	addi	a1,sp,404
            q[i] = q[i] + v[i];
     62a:	0000                	unimp
     62c:	0b68                	addi	a0,sp,412
     62e:	0000                	unimp
     630:	0004                	0x4
     632:	9f5c01f3          	0x9f5c01f3
        for(i = 0; i < size_N; ++i){
     636:	0b68                	addi	a0,sp,412
            q[i] = q[i] + v[i];
     638:	0000                	unimp
            q[i] = q[i] % mod;
     63a:	0c10                	addi	a2,sp,528
     63c:	0000                	unimp
     63e:	0001                	nop
     640:	0066                	c.slli	zero,0x19
        for(i = 0; i < size_N; ++i){
     642:	0000                	unimp
            if( num_temp[i] != 0 )
     644:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     646:	0000                	unimp
     648:	aa00                	fsd	fs0,16(a2)
            v[i] = 0;
     64a:	000a                	c.slli	zero,0x2
     64c:	b400                	fsd	fs0,40(s0)
     64e:	000a                	c.slli	zero,0x2
     650:	0100                	addi	s0,sp,128
     652:	5a00                	lw	s0,48(a2)
	...
        result[i] = num_temp[i-size_N];
     65c:	0ac4                	addi	s1,sp,340
     65e:	0000                	unimp
     660:	00000ae3          	beqz	zero,e74 <memcpy+0x90>
     664:	0001                	nop
     666:	c85a                	sw	s6,16(sp)
    for(i = size_N; i < (2*size_N); ++i){
     668:	dc00000b          	0xdc00000b
     66c:	0100000b          	0x100000b
    int ri_2[size]; // MX-ring poly, a
     670:	5a00                	lw	s0,48(a2)
	...
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     67a:	0ae4                	addi	s1,sp,348
     67c:	0000                	unimp
     67e:	00000af7          	0xaf7
     682:	0001                	nop
     684:	dc5a                	sw	s6,56(sp)
     686:	ec00000b          	0xec00000b
     68a:	0100000b          	0x100000b
     68e:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     698:	0af8                	addi	a4,sp,348
    int ri_1[size]; // f-random poly, f[N] = 0, b
     69a:	0000                	unimp
     69c:	0b14                	addi	a3,sp,400
     69e:	0000                	unimp
    int ri[size];
     6a0:	0001                	nop
     6a2:	ec5a                	fsw	fs6,24(sp)
     6a4:	fc00000b          	0xfc00000b
    int ti_1[size]; // ti_1[0] = 1
     6a8:	0100000b          	0x100000b
    int ti[size];
     6ac:	5a00                	lw	s0,48(a2)
	...
    int qi_1[size];
     6b6:	0a5e                	slli	s4,s4,0x17
    int temp[size];
     6b8:	0000                	unimp
     6ba:	0b2c                	addi	a1,sp,408
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6bc:	0000                	unimp
     6be:	0002                	c.slli64	zero
     6c0:	0072                	c.slli	zero,0x1c
    int ri_2[size]; // MX-ring poly, a
     6c2:	0b2c                	addi	a1,sp,408
     6c4:	0000                	unimp
    int temp[size];
     6c6:	0b44                	addi	s1,sp,404
    for (i = 0; i < size; ++i) {
     6c8:	0000                	unimp
        ti_2[i] = 0;
     6ca:	0002                	c.slli64	zero
     6cc:	0084                	addi	s1,sp,64
     6ce:	0b44                	addi	s1,sp,404
     6d0:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6d2:	0b48                	addi	a0,sp,404
     6d4:	0000                	unimp
    array_equ(ri_2,polyR,size);
     6d6:	0010                	0x10
     6d8:	0091                	addi	ra,ra,4
     6da:	0085                	addi	ra,ra,1
     6dc:	2432                	fld	fs0,264(sp)
    array_equ(ri_1,polyf,size);
     6de:	f0090f23          	sb	zero,-226(s2)
     6e2:	1c1a                	slli	s8,s8,0x26
     6e4:	f00a                	fsw	ft2,32(sp)
    ti_1[0] = 1;
     6e6:	1c01                	addi	s8,s8,-32
     6e8:	0b48                	addi	a0,sp,404
     6ea:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6ec:	0b68                	addi	a0,sp,412
     6ee:	0000                	unimp
     6f0:	00910013          	addi	zero,sp,9
        for (i = 0; i < N + 1; ++i) {
     6f4:	235a01f3          	0x235a01f3
        ti_2[i] = 0;
     6f8:	3201                	jal	fffffff8 <_stack_start+0xfffefff8>
     6fa:	2324                	fld	fs1,64(a4)
     6fc:	1af0090f          	0x1af0090f
        ti_1[i] = 0;
     700:	0a1c                	addi	a5,sp,272
        ti_2[i] = 0;
     702:	01f0                	addi	a2,sp,204
     704:	681c                	flw	fa5,16(s0)
        ti_1[i] = 0;
     706:	1000000b          	0x1000000b
    for (i = 0; i < size; ++i) {
     70a:	000c                	0xc
     70c:	0200                	addi	s0,sp,256
                ri_2[i] = ri_2[i] + mod;
     70e:	7200                	flw	fs0,32(a2)
	...
            ri_2[i] = ri_2[i] % mod;
     718:	6200                	flw	fs0,0(a2)
     71a:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     71c:	6400                	flw	fs0,8(s0)
            ri_2[i] = ri_2[i] % mod;
     71e:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     720:	0200                	addi	s0,sp,256
     722:	3100                	fld	fs0,32(a0)
     724:	649f 000a 6a00      	0x6a00000a649f
     72a:	000a                	c.slli	zero,0x2
     72c:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     72e:	5f00                	lw	s0,56(a4)
     730:	0a6e                	slli	s4,s4,0x1b
     732:	0000                	unimp
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     734:	0a74                	addi	a3,sp,284
     736:	0000                	unimp
     738:	0001                	nop
     73a:	7c5f 000a 8a00      	0x8a00000a7c5f
        for (i = N + 1; i < (2 * N + 2); ++i) {
     740:	000a                	c.slli	zero,0x2
     742:	0100                	addi	s0,sp,128
     744:	5f00                	lw	s0,56(a4)
     746:	0a94                	addi	a3,sp,336
     748:	0000                	unimp
     74a:	0aa9                	addi	s5,s5,10
     74c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     74e:	0001                	nop
     750:	aa5f 000a b400      	0xb400000aaa5f
     756:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     758:	0500                	addi	s0,sp,640
     75a:	8200                	0x8200
     75c:	3100                	fld	fs0,32(a0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     75e:	9f24                	0x9f24
     760:	0ab4                	addi	a3,sp,344
     762:	0000                	unimp
     764:	00000ac3          	fmadd.s	fs5,ft0,ft0,ft0,rne
     768:	0001                	nop
     76a:	c45f 000a d400      	0xd400000ac45f
    array_equ(qi_1,res1,size);
     770:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     772:	0500                	addi	s0,sp,640
     774:	8200                	0x8200
     776:	3300                	fld	fs0,32(a4)
     778:	9f1e                	add	t5,t5,t2
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     77a:	0ad4                	addi	a3,sp,340
     77c:	0000                	unimp
     77e:	0ae4                	addi	s1,sp,348
     780:	0000                	unimp
     782:	0001                	nop
     784:	e459                	bnez	s0,812 <ext_euclid+0x1a4>
     786:	000a                	c.slli	zero,0x2
     788:	ec00                	fsw	fs0,24(s0)
    array_equ(temp,res2,size);
     78a:	000a                	c.slli	zero,0x2
     78c:	0200                	addi	s0,sp,256
     78e:	3000                	fld	fs0,32(s0)
        for (i = 0; i < N + 1; ++i) {
     790:	ec9f 000a f400      	0xf400000aec9f
     796:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     798:	0100                	addi	s0,sp,128
     79a:	5e00                	lw	s0,56(a2)
     79c:	0af8                	addi	a4,sp,348
     79e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7a0:	0b0a                	slli	s6,s6,0x2
     7a2:	0000                	unimp
     7a4:	0005                	c.nop	1
array_equ(ri_2,ri_1,size);
     7a6:	0082                	c.slli64	ra
     7a8:	2432                	fld	fs0,264(sp)
     7aa:	0a9f 000b 2400      	0x2400000b0a9f
array_equ(ri_1,ri,size);
     7b0:	0100000b          	0x100000b
     7b4:	6800                	flw	fs0,16(s0)
array_equ(ti_2,ti_1,size);
     7b6:	0b24                	addi	s1,sp,408
     7b8:	0000                	unimp
     7ba:	0ba4                	addi	s1,sp,472
     7bc:	0000                	unimp
     7be:	0001                	nop
     7c0:	a45f 000b a600      	0xa600000ba45f
array_equ(ti_1,ti,size);
     7c6:	0300000b          	0x300000b
     7ca:	7f00                	flw	fs0,56(a4)
        controlR = 0;
     7cc:	9f7f                	0x9f7f
        for (i = 0; i < N + 1; ++i) {
     7ce:	0ba6                	slli	s7,s7,0x9
     7d0:	0000                	unimp
     7d2:	0bc8                	addi	a0,sp,468
    while (controlR != 0) {
     7d4:	0000                	unimp
     7d6:	0001                	nop
        for (j = 0; j < mod; ++j) {
     7d8:	c85f 000b d800      	0xd800000bc85f
     7de:	0100000b          	0x100000b
     7e2:	5900                	lw	s0,48(a0)
     7e4:	0bd8                	addi	a4,sp,468
     7e6:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7e8:	0bda                	slli	s7,s7,0x16
     7ea:	0000                	unimp
    }
     7ec:	7f790003          	lb	zero,2039(s2)
     7f0:	da9f 000b dc00      	0xdc00000bda9f
     7f6:	0100000b          	0x100000b
     7fa:	5900                	lw	s0,48(a0)
     7fc:	0bdc                	addi	a5,sp,468
     7fe:	0000                	unimp
     800:	0be0                	addi	s0,sp,476
     802:	0000                	unimp
     804:	0001                	nop
     806:	e05e                	fsw	fs7,0(sp)
     808:	ea00000b          	0xea00000b
     80c:	0300000b          	0x300000b
     810:	7e00                	flw	fs0,56(a2)
     812:	9f7f                	0x9f7f
     814:	0bea                	slli	s7,s7,0x1a
                ri_1[i] = ri_1[i] + mod;
     816:	0000                	unimp
     818:	0bec                	addi	a1,sp,476
            while (ri_1[i] < 0) {
     81a:	0000                	unimp
     81c:	0001                	nop
     81e:	ec5e                	fsw	fs7,24(sp)
            ri_1[i] = ri_1[i] % mod;
     820:	fc00000b          	0xfc00000b
        for (i = 0; i < N + 1; ++i) {
     824:	0100000b          	0x100000b
            ri_1[i] = ri_1[i] % mod;
     828:	6800                	flw	fs0,16(s0)
     82a:	0bfc                	addi	a5,sp,476
        for (i = 0; i < N + 1; ++i) {
     82c:	0000                	unimp
            ri[i - (N + 1)] = res[i];
     82e:	0c0c                	addi	a1,sp,528
     830:	0000                	unimp
     832:	0001                	nop
     834:	0c5f 000c 0e00      	0xe00000c0c5f
     83a:	000c                	0xc
     83c:	0300                	addi	s0,sp,384
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	7f00                	flw	fs0,56(a4)
            temp[i] = ri_2[i] - ri[i];
     840:	9f7f                	0x9f7f
     842:	0c0e                	slli	s8,s8,0x3
     844:	0000                	unimp
     846:	0c10                	addi	a2,sp,528
     848:	0000                	unimp
     84a:	0001                	nop
     84c:	005f 0000 0000      	0x5f
     852:	0000                	unimp
     854:	2800                	fld	fs0,16(s0)
        for (i = 0; i < N + 1; ++i) {
     856:	6800000b          	0x6800000b
                temp[i] = temp[i] + mod;
     85a:	0600000b          	0x600000b
            while (temp[i] < 0) {
     85e:	0300                	addi	s0,sp,384
     860:	1ad0                	addi	a2,sp,372
     862:	0000                	unimp
            temp[i] = temp[i] % mod;
     864:	009f 0000 0000      	0x9f
        for (i = 0; i < N + 1; ++i) {
     86a:	0000                	unimp
            temp[i] = temp[i] % mod;
     86c:	5e00                	lw	s0,56(a2)
     86e:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     870:	2400                	fld	fs0,8(s0)
                qi_1[i] = qi_1[i] + mod;
     872:	0100000b          	0x100000b
            while (qi_1[i] < 0) {
     876:	6200                	flw	fs0,0(a2)
     878:	0b24                	addi	s1,sp,408
     87a:	0000                	unimp
            qi_1[i] = qi_1[i] % mod;
     87c:	0b48                	addi	a0,sp,404
     87e:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     880:	7f850003          	lb	zero,2040(a0)
            qi_1[i] = qi_1[i] % mod;
     884:	489f 000b 6800      	0x6800000b489f
                temp[i] = temp[i] + mod;
     88a:	0400000b          	0x400000b
     88e:	f300                	fsw	fs0,32(a4)
            while (temp[i] < 0) {
     890:	5a01                	li	s4,-32
     892:	689f 000b fc00      	0xfc00000b689f
            temp[i] = temp[i] % mod;
     898:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     89c:	6200                	flw	fs0,0(a2)
     89e:	0bfc                	addi	a5,sp,476
            temp[i] = temp[i] % mod;
     8a0:	0000                	unimp
     8a2:	0c10                	addi	a2,sp,528
        for (i = 0; i < N + 1; ++i) {
     8a4:	0000                	unimp
            ti[i] = ti_2[i] - temp[i];
     8a6:	7f850003          	lb	zero,2040(a0)
     8aa:	009f 0000 0000      	0x9f
     8b0:	0000                	unimp
     8b2:	6e00                	flw	fs0,24(a2)
     8b4:	0006                	c.slli	zero,0x1
     8b6:	dc00                	sw	s0,56(s0)
     8b8:	0006                	c.slli	zero,0x1
     8ba:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8bc:	5a00                	lw	s0,48(a2)
            ti[i] = ti_2[i] - temp[i];
     8be:	06dc                	addi	a5,sp,836
     8c0:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8c2:	06dd                	addi	a3,a3,23
     8c4:	0000                	unimp
                ti[i] = ti[i] + mod;
     8c6:	0001                	nop
     8c8:	0006dd5b          	0x6dd5b
            while (ti[i] < 0) {
     8cc:	f800                	fsw	fs0,48(s0)
     8ce:	0006                	c.slli	zero,0x1
            ti[i] = ti[i] % mod;
     8d0:	0400                	addi	s0,sp,512
     8d2:	f300                	fsw	fs0,32(a4)
        for (i = 0; i < N + 1; ++i) {
     8d4:	5a01                	li	s4,-32
     8d6:	f89f 0006 0e00      	0xe000006f89f
     8dc:	01000007          	0x1000007
              qi_1[i] = 0;
     8e0:	5a00                	lw	s0,48(a2)
     8e2:	070e                	slli	a4,a4,0x3
     8e4:	0000                	unimp
            controlR += ri[i];
     8e6:	091c                	addi	a5,sp,144
     8e8:	0000                	unimp
              qi_1[i] = 0;
     8ea:	0004                	0x4
     8ec:	9f5a01f3          	0x9f5a01f3
	...
            if (((ri_2[0] * j) % mod) == 1)
     8f8:	066e                	slli	a2,a2,0x1b
     8fa:	0000                	unimp
     8fc:	06d8                	addi	a4,sp,836
     8fe:	0000                	unimp
     900:	0001                	nop
     902:	0006d85b          	0x6d85b
        for (j = 0; j < mod; ++j) {
     906:	f400                	fsw	fs0,40(s0)
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	0006                	c.slli	zero,0x1
        for (i = 0; i < N + 1; ++i) {
     90a:	0100                	addi	s0,sp,128
     90c:	6a00                	flw	fs0,16(a2)
            ti_2[i] = (ti_2[i] * j) % mod;
     90e:	06f4                	addi	a3,sp,844
     910:	0000                	unimp
     912:	06f8                	addi	a4,sp,844
     914:	0000                	unimp
     916:	0004                	0x4
     918:	9f5b01f3          	0x9f5b01f3
int* generate_keys(int N, int p, int q){
     91c:	06f8                	addi	a4,sp,844
     91e:	0000                	unimp
     920:	070e                	slli	a4,a4,0x3
     922:	0000                	unimp
     924:	0001                	nop
     926:	00070e5b          	0x70e5b
     92a:	1c00                	addi	s0,sp,560
     92c:	0009                	c.nop	2
     92e:	0400                	addi	s0,sp,512
     930:	f300                	fsw	fs0,32(a4)
     932:	5b01                	li	s6,-32
     934:	009f 0000 0000      	0x9f
     93a:	0000                	unimp
     93c:	6e00                	flw	fs0,24(a2)
     93e:	0006                	c.slli	zero,0x1
     940:	d200                	sw	s0,32(a2)
     942:	0006                	c.slli	zero,0x1
     944:	0100                	addi	s0,sp,128
     946:	5c00                	lw	s0,56(s0)
     948:	06d2                	slli	a3,a3,0x14
     94a:	0000                	unimp
     94c:	07f6                	slli	a5,a5,0x1d
     94e:	0000                	unimp
     950:	0001                	nop
     952:	f659                	bnez	a2,8e0 <ext_euclid+0x272>
     954:	0a000007          	0xa000007
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     958:	0008                	0x8
     95a:	0300                	addi	s0,sp,384
     95c:	8b00                	0x8b00
     95e:	9f01                	0x9f01
     960:	080a                	slli	a6,a6,0x2
     962:	0000                	unimp
     964:	0816                	slli	a6,a6,0x5
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     966:	0000                	unimp
     968:	0004                	0x4
     96a:	9f5c01f3          	0x9f5c01f3
     96e:	0816                	slli	a6,a6,0x5
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     970:	0000                	unimp
     972:	091c                	addi	a5,sp,144
     974:	0000                	unimp
     976:	0001                	nop
     978:	0059                	c.nop	22
     97a:	0000                	unimp
     97c:	0000                	unimp
     97e:	0000                	unimp
     980:	6e00                	flw	fs0,24(a2)
     982:	0006                	c.slli	zero,0x1
     984:	d200                	sw	s0,32(a2)
     986:	0006                	c.slli	zero,0x1
     988:	0100                	addi	s0,sp,128
     98a:	5d00                	lw	s0,56(a0)
     98c:	06d2                	slli	a3,a3,0x14
     98e:	0000                	unimp
     990:	07f8                	addi	a4,sp,972
     992:	0000                	unimp
     994:	0001                	nop
     996:	f862                	fsw	fs8,48(sp)
     998:	16000007          	0x16000007
     99c:	0008                	0x8
     99e:	0400                	addi	s0,sp,512
     9a0:	f300                	fsw	fs0,32(a4)
     9a2:	5d01                	li	s10,-32
     9a4:	169f 0008 1c00      	0x1c000008169f
     9aa:	0009                	c.nop	2
     9ac:	0100                	addi	s0,sp,128
     9ae:	6200                	flw	fs0,0(a2)
	...
     9b8:	07ec                	addi	a1,sp,972
     9ba:	0000                	unimp
     9bc:	0816                	slli	a6,a6,0x5
     9be:	0000                	unimp
     9c0:	0006                	c.slli	zero,0x1
     9c2:	00194003          	lbu	zero,1(s2)
     9c6:	9f00                	0x9f00
	...
     9d0:	06c8                	addi	a0,sp,836
     9d2:	0000                	unimp
     9d4:	080a                	slli	a6,a6,0x2
     9d6:	0000                	unimp
     9d8:	0001                	nop
     9da:	00080a6b          	0x80a6b
    int polyR[N+1];
     9de:	1600                	addi	s0,sp,800
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e0:	0008                	0x8
    int polyR[N+1];
     9e2:	0600                	addi	s0,sp,768
     9e4:	f300                	fsw	fs0,32(a4)
     9e6:	5c01                	li	s8,-32
     9e8:	1c31                	addi	s8,s8,-20
     9ea:	169f 0008 1c00      	0x1c000008169f
    polyR[N] = 1;
     9f0:	0009                	c.nop	2
     9f2:	0100                	addi	s0,sp,128
     9f4:	6b00                	flw	fs0,16(a4)
	...
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fe:	06c8                	addi	a0,sp,836
     a00:	0000                	unimp
     a02:	06d2                	slli	a3,a3,0x14
     a04:	0000                	unimp
     a06:	0002                	c.slli64	zero
     a08:	9f30                	0x9f30
     a0a:	06d2                	slli	a3,a3,0x14
     a0c:	0000                	unimp
     a0e:	06dd                	addi	a3,a3,23
     a10:	0000                	unimp
     a12:	0001                	nop
     a14:	f85f 0006 0e00      	0xe000006f85f
     a1a:	01000007          	0x1000007
     a1e:	5f00                	lw	s0,56(a4)
     a20:	070e                	slli	a4,a4,0x3
     a22:	0000                	unimp
     a24:	071e                	slli	a4,a4,0x7
     a26:	0000                	unimp
     a28:	0001                	nop
     a2a:	1e5d                	addi	t3,t3,-9
     a2c:	20000007          	0x20000007
     a30:	03000007          	0x3000007
     a34:	7d00                	flw	fs0,56(a0)
     a36:	9f7f                	0x9f7f
     a38:	0720                	addi	s0,sp,904
     a3a:	0000                	unimp
     a3c:	0738                	addi	a4,sp,904
     a3e:	0000                	unimp
     a40:	0001                	nop
     a42:	405d                	c.li	zero,23
     a44:	44000007          	0x44000007
     a48:	01000007          	0x1000007
     a4c:	5900                	lw	s0,48(a0)
     a4e:	0744                	addi	s1,sp,900
     a50:	0000                	unimp
     a52:	074e                	slli	a4,a4,0x13
     a54:	0000                	unimp
     a56:	0001                	nop
     a58:	505f 0007 5800      	0x58000007505f
    polyR[0] = -1;
     a5e:	01000007          	0x1000007
    for(i = 1; i < N; ++i){
     a62:	5e00                	lw	s0,56(a2)
     a64:	075a                	slli	a4,a4,0x16
     a66:	0000                	unimp
     a68:	0762                	slli	a4,a4,0x18
    for (i = N; i < 55; ++i ){
     a6a:	0000                	unimp
     a6c:	0001                	nop
     a6e:	725d                	lui	tp,0xffff7
     a70:	76000007          	0x76000007
        random_keys[i] = f[i];
     a74:	02000007          	0x2000007
     a78:	3000                	fld	fs0,32(s0)
     a7a:	769f 0007 8000      	0x80000007769f
    for(i = 0; i < N; ++i){
     a80:	01000007          	0x1000007
    for(i = N; i < (2*N); ++i){
     a84:	5d00                	lw	s0,56(a0)
     a86:	0790                	addi	a2,sp,960
     a88:	0000                	unimp
     a8a:	0792                	slli	a5,a5,0x4
        random_keys[i] = g[i-N];
     a8c:	0000                	unimp
     a8e:	0002                	c.slli64	zero
     a90:	9f30                	0x9f30
     a92:	0792                	slli	a5,a5,0x4
    for(i = N; i < (2*N); ++i){
     a94:	0000                	unimp
     a96:	07a0                	addi	s0,sp,968
    for(i = (2*N); i < (3*N); ++i){
     a98:	0000                	unimp
     a9a:	0001                	nop
     a9c:	a25e                	fsd	fs7,256(sp)
    fp = ext_euclid(polyR, f, (N+1), p);
     a9e:	ad000007          	0xad000007
     aa2:	01000007          	0x1000007
     aa6:	5d00                	lw	s0,56(a0)
     aa8:	07cc                	addi	a1,sp,964
    for(i = (2*N); i < (3*N); ++i){
     aaa:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     aac:	07d0                	addi	a2,sp,964
     aae:	0000                	unimp
     ab0:	0002                	c.slli64	zero
     ab2:	9f30                	0x9f30
    for(i = (2*N); i < (3*N); ++i){
     ab4:	07d0                	addi	a2,sp,964
     ab6:	0000                	unimp
    fq = ext_euclid(polyR, f, (N+1), q);
     ab8:	07da                	slli	a5,a5,0x16
     aba:	0000                	unimp
     abc:	0001                	nop
     abe:	e85e                	fsw	fs7,16(sp)
     ac0:	16000007          	0x16000007
    for(i = (3*N); i < (4*N); ++i){
     ac4:	0008                	0x8
     ac6:	0100                	addi	s0,sp,128
     ac8:	5f00                	lw	s0,56(a4)
     aca:	0816                	slli	a6,a6,0x5
        random_keys[i] = fq[i-(3*N)];
     acc:	0000                	unimp
     ace:	0826                	slli	a6,a6,0x9
     ad0:	0000                	unimp
     ad2:	0001                	nop
    for(i = (3*N); i < (4*N); ++i){
     ad4:	265d                	jal	e7a <memcpy+0x96>
     ad6:	0008                	0x8
    fg = polymult2(fq, N, g, N, 0);
     ad8:	2c00                	fld	fs0,24(s0)
     ada:	0008                	0x8
     adc:	0300                	addi	s0,sp,384
     ade:	7d00                	flw	fs0,56(a0)
     ae0:	9f7f                	0x9f7f
     ae2:	082c                	addi	a1,sp,24
    for(i = 0; i < (2*N-1); ++i){
     ae4:	0000                	unimp
     ae6:	082e                	slli	a6,a6,0xb
     ae8:	0000                	unimp
     aea:	0001                	nop
     aec:	2e5d                	jal	ea2 <memcpy+0xbe>
     aee:	0008                	0x8
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af0:	3800                	fld	fs0,48(s0)
     af2:	0008                	0x8
     af4:	0100                	addi	s0,sp,128
     af6:	5f00                	lw	s0,56(a4)
    for(i = (4*N); i < (5*N); ++i){
     af8:	0838                	addi	a4,sp,24
     afa:	0000                	unimp
     afc:	083e                	slli	a6,a6,0xf
     afe:	0000                	unimp
     b00:	7f7f0003          	lb	zero,2039(t5) # fffe07f7 <_stack_start+0xfffd07f7>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b04:	3e9f 0008 4000      	0x400000083e9f
    for(i = (4*N); i < (5*N); ++i){
     b0a:	0008                	0x8
     b0c:	0100                	addi	s0,sp,128
     b0e:	5f00                	lw	s0,56(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     b10:	0840                	addi	s0,sp,20
     b12:	0000                	unimp
        random_keys[i] = polyR[i-(5*N)];
     b14:	0852                	slli	a6,a6,0x14
     b16:	0000                	unimp
     b18:	0001                	nop
     b1a:	525e                	lw	tp,244(sp)
    for(i = (5*N); i < (6*N+1); ++i){
     b1c:	0008                	0x8
     b1e:	5600                	lw	s0,40(a2)
     b20:	0008                	0x8
     b22:	0300                	addi	s0,sp,384
     b24:	7e00                	flw	fs0,56(a2)
     b26:	9f7f                	0x9f7f
}
     b28:	0856                	slli	a6,a6,0x15
     b2a:	0000                	unimp
     b2c:	085a                	slli	a6,a6,0x16
     b2e:	0000                	unimp
     b30:	0001                	nop
     b32:	5a5e                	lw	s4,244(sp)
     b34:	0008                	0x8
     b36:	6a00                	flw	fs0,16(a2)
     b38:	0008                	0x8
     b3a:	0100                	addi	s0,sp,128
     b3c:	5d00                	lw	s0,56(a0)
     b3e:	086a                	slli	a6,a6,0x1a
     b40:	0000                	unimp
     b42:	0870                	addi	a2,sp,28
     b44:	0000                	unimp
     b46:	7f7d0003          	lb	zero,2039(s10)
     b4a:	709f 0008 8200      	0x82000008709f
     b50:	0008                	0x8
     b52:	0100                	addi	s0,sp,128
     b54:	5d00                	lw	s0,56(a0)
     b56:	0882                	c.slli64	a7
     b58:	0000                	unimp
     b5a:	0888                	addi	a0,sp,80
     b5c:	0000                	unimp
     b5e:	7f7d0003          	lb	zero,2039(s10)
     b62:	889f 0008 8a00      	0x8a000008889f
        polyR[i] = 0;
     b68:	0008                	0x8
     b6a:	0100                	addi	s0,sp,128
     b6c:	5d00                	lw	s0,56(a0)
     b6e:	088a                	slli	a7,a7,0x2
     b70:	0000                	unimp
    for(i = 1; i < N; ++i){
     b72:	089e                	slli	a7,a7,0x7
     b74:	0000                	unimp
        f[i] = 0;
     b76:	0001                	nop
     b78:	9e5e                	add	t3,t3,s7
     b7a:	0008                	0x8
     b7c:	a400                	fsd	fs0,8(s0)
     b7e:	0008                	0x8
     b80:	0300                	addi	s0,sp,384
     b82:	7e00                	flw	fs0,56(a2)
        g[i] = 0;
     b84:	9f7f                	0x9f7f
     b86:	08a4                	addi	s1,sp,88
     b88:	0000                	unimp
     b8a:	08be                	slli	a7,a7,0xf
     b8c:	0000                	unimp
    for (i = N; i < 55; ++i ){
     b8e:	0001                	nop
     b90:	be5e                	fsd	fs7,312(sp)
        random_keys[i] = f[i];
     b92:	0008                	0x8
     b94:	c200                	sw	s0,0(a2)
     b96:	0008                	0x8
     b98:	0300                	addi	s0,sp,384
     b9a:	7e00                	flw	fs0,56(a2)
     b9c:	9f7f                	0x9f7f
     b9e:	08c2                	slli	a7,a7,0x10
     ba0:	0000                	unimp
    for(i = 0; i < N; ++i){
     ba2:	08c6                	slli	a7,a7,0x11
        random_keys[i] = f[i];
     ba4:	0000                	unimp
    for(i = 0; i < N; ++i){
     ba6:	0001                	nop
        random_keys[i] = g[i-N];
     ba8:	c65e                	sw	s7,12(sp)
     baa:	0008                	0x8
     bac:	d600                	sw	s0,40(a2)
     bae:	0008                	0x8
     bb0:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     bb2:	5d00                	lw	s0,56(a0)
     bb4:	08d6                	slli	a7,a7,0x15
     bb6:	0000                	unimp
        random_keys[i] = fp[i-(2*N)];
     bb8:	08dc                	addi	a5,sp,84
     bba:	0000                	unimp
     bbc:	7f7d0003          	lb	zero,2039(s10)
     bc0:	dc9f 0008 de00      	0xde000008dc9f
    for(i = (2*N); i < (3*N); ++i){
     bc6:	0008                	0x8
        random_keys[i] = fq[i-(3*N)];
     bc8:	0100                	addi	s0,sp,128
     bca:	5d00                	lw	s0,56(a0)
     bcc:	08de                	slli	a7,a7,0x17
     bce:	0000                	unimp
     bd0:	08f0                	addi	a2,sp,92
     bd2:	0000                	unimp
     bd4:	0001                	nop
    for(i = (3*N); i < (4*N); ++i){
     bd6:	f05e                	fsw	fs7,32(sp)
        random_keys[i] = fq[i-(3*N)];
     bd8:	0008                	0x8
    for(i = (3*N); i < (4*N); ++i){
     bda:	f200                	fsw	fs0,32(a2)
        fg[i] = fg[i]*p;
     bdc:	0008                	0x8
    for(i = 0; i < (2*N-1); ++i){
     bde:	0300                	addi	s0,sp,384
     be0:	7e00                	flw	fs0,56(a2)
        fg[i] = fg[i]*p;
     be2:	9f7f                	0x9f7f
     be4:	08f2                	slli	a7,a7,0x1c
     be6:	0000                	unimp
     be8:	08f4                	addi	a3,sp,92
    for(i = 0; i < (2*N-1); ++i){
     bea:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bec:	0001                	nop
     bee:	085e                	slli	a6,a6,0x17
     bf0:	0009                	c.nop	2
     bf2:	0c00                	addi	s0,sp,528
     bf4:	0009                	c.nop	2
     bf6:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     bf8:	5f00                	lw	s0,56(a4)
     bfa:	090c                	addi	a1,sp,144
        random_keys[i] = polyR[i-(5*N)];
     bfc:	0000                	unimp
     bfe:	091a                	slli	s2,s2,0x6
     c00:	0000                	unimp
     c02:	7f7f0003          	lb	zero,2039(t5)
     c06:	1a9f 0009 1c00      	0x1c0000091a9f
     c0c:	0009                	c.nop	2
    for(i = (5*N); i < (6*N+1); ++i){
     c0e:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c10:	5f00                	lw	s0,56(a4)
	...
     c1a:	07dc                	addi	a5,sp,964
     c1c:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c1e:	0816                	slli	a6,a6,0x5
     c20:	0000                	unimp
     c22:	0001                	nop
     c24:	f45e                	fsw	fs7,40(sp)
     c26:	0008                	0x8
     c28:	1c00                	addi	s0,sp,560
     c2a:	0009                	c.nop	2
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2c:	0100                	addi	s0,sp,128
     c2e:	5e00                	lw	s0,56(a2)
	...
    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	06c6                	slli	a3,a3,0x11
     c3a:	0000                	unimp
     c3c:	07fa                	slli	a5,a5,0x1e
     c3e:	0000                	unimp
     c40:	0002                	c.slli64	zero
     c42:	08160083          	lb	ra,129(a2) # fffed081 <_stack_start+0xfffdd081>
     c46:	0000                	unimp
     c48:	091c                	addi	a5,sp,144
     c4a:	0000                	unimp
    for(i = 0; i < 48; ++i){
     c4c:	0002                	c.slli64	zero
     c4e:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
        temp[i] = temp[i] + message[i];
     c52:	0000                	unimp
     c54:	0000                	unimp
     c56:	0000                	unimp
     c58:	06c6                	slli	a3,a3,0x11
     c5a:	0000                	unimp
     c5c:	07fc                	addi	a5,sp,972
     c5e:	0000                	unimp
     c60:	0002                	c.slli64	zero
    for(i = 0; i < 48; ++i){
     c62:	0084                	addi	s1,sp,64
     c64:	0816                	slli	a6,a6,0x5
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	0000                	unimp
     c68:	091c                	addi	a5,sp,144
     c6a:	0000                	unimp
     c6c:	0002                	c.slli64	zero
     c6e:	0084                	addi	s1,sp,64
	...
    for(i = (2*N); i < (3*N); ++i){
     c78:	06c6                	slli	a3,a3,0x11
     c7a:	0000                	unimp
     c7c:	0802                	c.slli64	a6
     c7e:	0000                	unimp
     c80:	0002                	c.slli64	zero
     c82:	08160087          	0x8160087
}
     c86:	0000                	unimp
     c88:	091c                	addi	a5,sp,144
     c8a:	0000                	unimp
     c8c:	0002                	c.slli64	zero
     c8e:	00000087          	0x87
     c92:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     c94:	0000                	unimp
     c96:	0000                	unimp
     c98:	06c6                	slli	a3,a3,0x11
     c9a:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     c9c:	0800                	addi	s0,sp,16
     c9e:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     ca0:	0002                	c.slli64	zero
     ca2:	0086                	slli	ra,ra,0x1
    for(i = (2*N); i < (3*N); ++i){
     ca4:	0800                	addi	s0,sp,16
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca6:	0000                	unimp
     ca8:	0802                	c.slli64	a6
     caa:	0000                	unimp
     cac:	000c                	0xc
    for(i = (2*N); i < ((2*N)+N); ++i){
     cae:	018b0087          	0x18b0087
     cb2:	2432                	fld	fs0,264(sp)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	f0090f23          	sb	zero,-226(s2)
     cb8:	1c1a                	slli	s8,s8,0x26
     cba:	0816                	slli	a6,a6,0x5
     cbc:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbe:	091c                	addi	a5,sp,144
     cc0:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	0002                	c.slli64	zero
     cc4:	0086                	slli	ra,ra,0x1
	...
     cce:	06c6                	slli	a3,a3,0x11
     cd0:	0000                	unimp
     cd2:	0806                	slli	a6,a6,0x1
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd4:	0000                	unimp
     cd6:	0002                	c.slli64	zero
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd8:	0089                	addi	ra,ra,2
     cda:	0816                	slli	a6,a6,0x5
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cdc:	0000                	unimp
     cde:	091c                	addi	a5,sp,144
     ce0:	0000                	unimp
     ce2:	0002                	c.slli64	zero
     ce4:	0089                	addi	ra,ra,2
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     cee:	06c6                	slli	a3,a3,0x11
     cf0:	0000                	unimp
     cf2:	0804                	addi	s1,sp,16
     cf4:	0000                	unimp
     cf6:	0002                	c.slli64	zero
        if(a2[i] <= q/2)
     cf8:	0088                	addi	a0,sp,64
     cfa:	0804                	addi	s1,sp,16
     cfc:	0000                	unimp
    for (i = 0; i < N; ++i){
     cfe:	0806                	slli	a6,a6,0x1
     d00:	0000                	unimp
     d02:	000c                	0xc
    c = polymult2(secret_key_fp,N,a2,N,0);
     d04:	0089                	addi	ra,ra,2
     d06:	2432018b          	0x2432018b
     d0a:	f0090f23          	sb	zero,-226(s2)
     d0e:	1c1a                	slli	s8,s8,0x26
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d10:	0816                	slli	a6,a6,0x5
     d12:	0000                	unimp
     d14:	091c                	addi	a5,sp,144
     d16:	0000                	unimp
     d18:	0002                	c.slli64	zero
     d1a:	0088                	addi	a0,sp,64
	...
}
     d24:	06c8                	addi	a0,sp,836
     d26:	0000                	unimp
     d28:	07f0                	addi	a2,sp,972
     d2a:	0000                	unimp
     d2c:	0002                	c.slli64	zero
     d2e:	0072                	c.slli	zero,0x1c
     d30:	07f0                	addi	a2,sp,972
     d32:	0000                	unimp
     d34:	07fe                	slli	a5,a5,0x1f
     d36:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d38:	0002                	c.slli64	zero
     d3a:	0085                	addi	ra,ra,1
     d3c:	07fe                	slli	a5,a5,0x1f
     d3e:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	0804                	addi	s1,sp,16
     d42:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d44:	000c                	0xc
     d46:	0088                	addi	a0,sp,64
    for(i = (2*N); i < ((2*N)+N); ++i){
     d48:	2432018b          	0x2432018b
        if(a2[i] <= q/2)
     d4c:	f0090f23          	sb	zero,-226(s2)
            a2[i] = (-1)*(q-a2[i]);
     d50:	1c1a                	slli	s8,s8,0x26
     d52:	0804                	addi	s1,sp,16
     d54:	0000                	unimp
    for (i = 0; i < N; ++i){
     d56:	0806                	slli	a6,a6,0x1
     d58:	0000                	unimp
     d5a:	000e                	c.slli	zero,0x3
        c2[i-(2*N)] = c2[i];
     d5c:	0089                	addi	ra,ra,2
     d5e:	2432018b          	0x2432018b
     d62:	f0090f23          	sb	zero,-226(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d66:	311a                	fld	ft2,416(sp)
        c2[i-(2*N)] = c2[i];
     d68:	1c24                	addi	s1,sp,568
     d6a:	0816                	slli	a6,a6,0x5
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	0000                	unimp
  jal x0, default_exc_handler
     d6e:	091c                	addi	a5,sp,144
     d70:	0000                	unimp
  mv  x1, x0
     d72:	0002                	c.slli64	zero
     d74:	0072                	c.slli	zero,0x1c
	...
  mv  x6, x1
     d7e:	0740                	addi	s0,sp,900
  mv  x7, x1
     d80:	0000                	unimp
  mv  x8, x1
     d82:	0768                	addi	a0,sp,908
  mv  x9, x1
     d84:	0000                	unimp
  mv x10, x1
     d86:	0001                	nop
  mv x11, x1
     d88:	2e5a                	fld	ft8,400(sp)
  mv x12, x1
     d8a:	0008                	0x8
  mv x13, x1
     d8c:	7200                	flw	fs0,32(a2)
  mv x14, x1
     d8e:	0008                	0x8
  mv x15, x1
     d90:	0100                	addi	s0,sp,128
  mv x16, x1
     d92:	5a00                	lw	s0,48(a2)
	...
  mv x21, x1
     d9c:	076c                	addi	a1,sp,908
  mv x22, x1
     d9e:	0000                	unimp
  mv x23, x1
     da0:	0770                	addi	a2,sp,908
  mv x24, x1
     da2:	0000                	unimp
  mv x25, x1
     da4:	0001                	nop
  mv x26, x1
     da6:	705a                	flw	ft0,180(sp)
  mv x27, x1
     da8:	71000007          	0x71000007
  mv x29, x1
     dac:	01000007          	0x1000007
  mv x31, x1
     db0:	5b00                	lw	s0,48(a4)
	...
  la x26, _bss_start
     dba:	078a                	slli	a5,a5,0x2
     dbc:	0000                	unimp
     dbe:	078e                	slli	a5,a5,0x3
     dc0:	0000                	unimp
  la x27, _bss_end
     dc2:	0001                	nop
     dc4:	8e5a                	mv	t3,s6
     dc6:	8f000007          	0x8f000007
  bge x26, x27, zero_loop_end
     dca:	01000007          	0x1000007
  sw x0, 0(x26)
     dce:	5b00                	lw	s0,48(a4)
	...
  addi x10, x0, 0
     dd8:	06c8                	addi	a0,sp,836
     dda:	0000                	unimp
  addi x11, x0, 0
     ddc:	06f4                	addi	a3,sp,844
     dde:	0000                	unimp
  jal x1, main
     de0:	0002                	c.slli64	zero
     de2:	9f31                	0x9f31
     de4:	06f8                	addi	a4,sp,844
     de6:	0000                	unimp
     de8:	070e                	slli	a4,a4,0x3
     dea:	0000                	unimp
     dec:	0002                	c.slli64	zero
     dee:	9f31                	0x9f31
     df0:	07d0                	addi	a2,sp,964
     df2:	0000                	unimp
     df4:	07e8                	addi	a0,sp,972
     df6:	0000                	unimp
     df8:	0001                	nop
     dfa:	de5f 0008 0800      	0x8000008de5f
     e00:	0009                	c.nop	2
     e02:	0100                	addi	s0,sp,128
     e04:	5f00                	lw	s0,56(a4)
	...
     e0e:	06c6                	slli	a3,a3,0x11
     e10:	0000                	unimp
     e12:	080a                	slli	a6,a6,0x2
     e14:	0000                	unimp
     e16:	0001                	nop
     e18:	00080a6b          	0x80a6b
     e1c:	1600                	addi	s0,sp,800
     e1e:	0008                	0x8
     e20:	0600                	addi	s0,sp,768
     e22:	f300                	fsw	fs0,32(a4)
     e24:	5c01                	li	s8,-32
     e26:	1c31                	addi	s8,s8,-20
     e28:	169f 0008 1c00      	0x1c000008169f
     e2e:	0009                	c.nop	2
     e30:	0100                	addi	s0,sp,128
     e32:	6b00                	flw	fs0,16(a4)
	...
     e3c:	06c6                	slli	a3,a3,0x11
     e3e:	0000                	unimp
     e40:	080a                	slli	a6,a6,0x2
     e42:	0000                	unimp
     e44:	0001                	nop
     e46:	00080a6b          	0x80a6b
     e4a:	1600                	addi	s0,sp,800
     e4c:	0008                	0x8
     e4e:	0600                	addi	s0,sp,768
     e50:	f300                	fsw	fs0,32(a4)
     e52:	5c01                	li	s8,-32
     e54:	1c31                	addi	s8,s8,-20
     e56:	169f 0008 1c00      	0x1c000008169f
     e5c:	0009                	c.nop	2
     e5e:	0100                	addi	s0,sp,128
     e60:	6b00                	flw	fs0,16(a4)
	...
     e6a:	06c6                	slli	a3,a3,0x11
     e6c:	0000                	unimp
     e6e:	080a                	slli	a6,a6,0x2
     e70:	0000                	unimp
     e72:	0001                	nop
     e74:	00080a6b          	0x80a6b
     e78:	1600                	addi	s0,sp,800
     e7a:	0008                	0x8
     e7c:	0600                	addi	s0,sp,768
     e7e:	f300                	fsw	fs0,32(a4)
     e80:	5c01                	li	s8,-32
     e82:	1c31                	addi	s8,s8,-20
     e84:	169f 0008 1c00      	0x1c000008169f
     e8a:	0009                	c.nop	2
     e8c:	0100                	addi	s0,sp,128
     e8e:	6b00                	flw	fs0,16(a4)
	...
     e98:	06c6                	slli	a3,a3,0x11
     e9a:	0000                	unimp
     e9c:	080a                	slli	a6,a6,0x2
     e9e:	0000                	unimp
     ea0:	0001                	nop
     ea2:	00080a6b          	0x80a6b
     ea6:	1600                	addi	s0,sp,800
     ea8:	0008                	0x8
     eaa:	0600                	addi	s0,sp,768
     eac:	f300                	fsw	fs0,32(a4)
     eae:	5c01                	li	s8,-32
     eb0:	1c31                	addi	s8,s8,-20
     eb2:	169f 0008 1c00      	0x1c000008169f
     eb8:	0009                	c.nop	2
     eba:	0100                	addi	s0,sp,128
     ebc:	6b00                	flw	fs0,16(a4)
	...
     ec6:	06c6                	slli	a3,a3,0x11
     ec8:	0000                	unimp
     eca:	080a                	slli	a6,a6,0x2
     ecc:	0000                	unimp
     ece:	0001                	nop
     ed0:	00080a6b          	0x80a6b
     ed4:	1600                	addi	s0,sp,800
     ed6:	0008                	0x8
     ed8:	0600                	addi	s0,sp,768
     eda:	f300                	fsw	fs0,32(a4)
     edc:	5c01                	li	s8,-32
     ede:	1c31                	addi	s8,s8,-20
     ee0:	169f 0008 1c00      	0x1c000008169f
     ee6:	0009                	c.nop	2
     ee8:	0100                	addi	s0,sp,128
     eea:	6b00                	flw	fs0,16(a4)
	...
     ef4:	06c6                	slli	a3,a3,0x11
     ef6:	0000                	unimp
     ef8:	080a                	slli	a6,a6,0x2
     efa:	0000                	unimp
     efc:	0001                	nop
     efe:	00080a6b          	0x80a6b
     f02:	1600                	addi	s0,sp,800
     f04:	0008                	0x8
     f06:	0600                	addi	s0,sp,768
     f08:	f300                	fsw	fs0,32(a4)
     f0a:	5c01                	li	s8,-32
     f0c:	1c31                	addi	s8,s8,-20
     f0e:	169f 0008 1c00      	0x1c000008169f
     f14:	0009                	c.nop	2
     f16:	0100                	addi	s0,sp,128
     f18:	6b00                	flw	fs0,16(a4)
	...
     f22:	06c6                	slli	a3,a3,0x11
     f24:	0000                	unimp
     f26:	080a                	slli	a6,a6,0x2
     f28:	0000                	unimp
     f2a:	0001                	nop
     f2c:	00080a6b          	0x80a6b
     f30:	1600                	addi	s0,sp,800
     f32:	0008                	0x8
     f34:	0600                	addi	s0,sp,768
     f36:	f300                	fsw	fs0,32(a4)
     f38:	5c01                	li	s8,-32
     f3a:	1c31                	addi	s8,s8,-20
     f3c:	169f 0008 1c00      	0x1c000008169f
     f42:	0009                	c.nop	2
     f44:	0100                	addi	s0,sp,128
     f46:	6b00                	flw	fs0,16(a4)
	...
     f50:	0430                	addi	a2,sp,520
     f52:	0000                	unimp
     f54:	0482                	c.slli64	s1
     f56:	0000                	unimp
     f58:	0001                	nop
     f5a:	825a                	mv	tp,s6
     f5c:	0004                	0x4
     f5e:	8b00                	0x8b00
     f60:	0004                	0x4
     f62:	0100                	addi	s0,sp,128
     f64:	5b00                	lw	s0,48(a4)
     f66:	0000048b          	0x48b
int main(){
     f6a:	066e                	slli	a2,a2,0x1b
     f6c:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f6e:	0004                	0x4
     f70:	9f5a01f3          	0x9f5a01f3
	...
int main(){
     f7c:	0430                	addi	a2,sp,520
     f7e:	0000                	unimp
     f80:	0480                	addi	s0,sp,576
     f82:	0000                	unimp
     f84:	0001                	nop
     f86:	0004805b          	0x4805b
     f8a:	5000                	lw	s0,32(s0)
    resultkon[0] = 0xaaaaaaa0;
     f8c:	0005                	c.nop	1
     f8e:	0100                	addi	s0,sp,128
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f90:	5900                	lw	s0,48(a0)
    resultkon[0] = 0xaaaaaaa0;
     f92:	0550                	addi	a2,sp,644
     f94:	0000                	unimp
     f96:	056a                	slli	a0,a0,0x1a
     f98:	0000                	unimp
     f9a:	01870003          	lb	zero,24(a4)
    keys = generate_keys(N, p, q);
     f9e:	6a9f 0005 7e00      	0x7e0000056a9f
     fa4:	0005                	c.nop	1
     fa6:	0400                	addi	s0,sp,512
    resultkon[0] = 0xaaaaaaa0;
     fa8:	f300                	fsw	fs0,32(a4)
    resultkon[0] = 0xaaaaaaa1;
     faa:	5b01                	li	s6,-32
     fac:	7e9f 0005 5c00      	0x5c0000057e9f
     fb2:	0006                	c.slli	zero,0x1
    for(i = 0; i < N; ++i){
     fb4:	0100                	addi	s0,sp,128
     fb6:	5900                	lw	s0,48(a0)
        secret_key_f[i] = keys[i];
     fb8:	065c                	addi	a5,sp,772
     fba:	0000                	unimp
     fbc:	066e                	slli	a2,a2,0x1b
     fbe:	0000                	unimp
     fc0:	01870003          	lb	zero,24(a4)
    for(i = 0; i < N; ++i){
     fc4:	009f 0000 0000      	0x9f
    for(i = N; i < (2*N); ++i){
     fca:	0000                	unimp
     fcc:	3000                	fld	fs0,32(s0)
     fce:	0004                	0x4
     fd0:	7e00                	flw	fs0,56(a2)
     fd2:	0004                	0x4
     fd4:	0100                	addi	s0,sp,128
        secret_key_fp[i-(2*N)] = keys[i];
     fd6:	5c00                	lw	s0,56(s0)
     fd8:	047e                	slli	s0,s0,0x1f
     fda:	0000                	unimp
     fdc:	04be                	slli	s1,s1,0xf
     fde:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     fe0:	0001                	nop
     fe2:	0004be6b          	0x4be6b
    for(i = (3*N); i < (4*N); ++i){
     fe6:	c800                	sw	s0,16(s0)
     fe8:	0004                	0x4
     fea:	0400                	addi	s0,sp,512
     fec:	f300                	fsw	fs0,32(a4)
     fee:	5c01                	li	s8,-32
        public_key[i-(4*N)] = keys[i];
     ff0:	c89f 0004 1400      	0x14000004c89f
     ff6:	0005                	c.nop	1
     ff8:	0100                	addi	s0,sp,128
    for(i = (4*N); i < (5*N); ++i){
     ffa:	6b00                	flw	fs0,16(a4)
     ffc:	0514                	addi	a3,sp,640
     ffe:	0000                	unimp
    1000:	066e                	slli	a2,a2,0x1b
    1002:	0000                	unimp
    1004:	0004                	0x4
        ring_poly[i-(5*N)] = keys[i];
    1006:	9f5c01f3          	0x9f5c01f3
	...
    for(i = (5*N); i < (6*N+1); ++i){
    1012:	0430                	addi	a2,sp,520
    resultkon[0] = 0xbbbbbbb0;
    1014:	0000                	unimp
    1016:	0000048b          	0x48b
    101a:	0001                	nop
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    101c:	8b5d                	andi	a4,a4,23
    101e:	0004                	0x4
    1020:	6200                	flw	fs0,0(a2)
    1022:	0005                	c.nop	1
    resultkon[0] = 0xbbbbbbb1;
    1024:	0100                	addi	s0,sp,128
    1026:	6300                	flw	fs0,0(a4)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	0562                	slli	a0,a0,0x18
    102a:	0000                	unimp
    resultkon[0] = 0xbbbbbbb0;
    102c:	057e                	slli	a0,a0,0x1f
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    1030:	0004                	0x4
    resultkon[0] = 0xccccccc0;
    1032:	9f5d01f3          	0x9f5d01f3
    1036:	057e                	slli	a0,a0,0x1f
    1038:	0000                	unimp
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    103a:	066e                	slli	a2,a2,0x1b
    resultkon[0] = 0xccccccc0;
    103c:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    103e:	0001                	nop
    1040:	00000063          	beqz	zero,1040 <main+0xd6>
    1044:	0000                	unimp
    1046:	0000                	unimp
    1048:	3000                	fld	fs0,32(s0)
    104a:	0004                	0x4
    104c:	8b00                	0x8b00
    104e:	0004                	0x4
    1050:	0100                	addi	s0,sp,128
    resultkon[0] = 0xccccccc1;	
    1052:	5e00                	lw	s0,56(a2)
    1054:	0000048b          	0x48b
            resultkon[0] = 0xDEDEDEDE;
    1058:	0560                	addi	s0,sp,652
    resultkon[0] = 0xccccccc1;	
    105a:	0000                	unimp
    105c:	0001                	nop
            resultkon[0] = 0xDEDEDEDE;
    105e:	6062                	flw	ft0,24(sp)
    1060:	0005                	c.nop	1
    for(i = 0; i < 32; ++i){
    1062:	7e00                	flw	fs0,56(a2)
    1064:	0005                	c.nop	1
        if(!(message[i] == Dec_Message[i])){
    1066:	0400                	addi	s0,sp,512
    1068:	f300                	fsw	fs0,32(a4)
    106a:	5e01                	li	t3,-32
    106c:	7e9f 0005 6e00      	0x6e0000057e9f
    1072:	0006                	c.slli	zero,0x1
    1074:	0100                	addi	s0,sp,128
            resultkon[0] = 0xBABABABA;
    1076:	6200                	flw	fs0,0(a2)
	...
}
    1080:	04c0                	addi	s0,sp,580
    1082:	0000                	unimp
    1084:	04c8                	addi	a0,sp,580
    1086:	0000                	unimp
    1088:	0001                	nop
    108a:	0005146b          	0x5146b
    108e:	7200                	flw	fs0,32(a2)
    1090:	0005                	c.nop	1
    1092:	0100                	addi	s0,sp,128
    1094:	6b00                	flw	fs0,16(a4)
    1096:	057e                	slli	a0,a0,0x1f
            resultkon[0] = 0xDEDEDEDE;
    1098:	0000                	unimp
    for(i = 0; i < 32; ++i){
    109a:	066e                	slli	a2,a2,0x1b
    109c:	0000                	unimp
    109e:	0001                	nop
    10a0:	0000006b          	0x6b
    10a4:	0000                	unimp
    10a6:	0000                	unimp
    10a8:	3200                	fld	fs0,32(a2)
    10aa:	0005                	c.nop	1
    10ac:	4300                	lw	s0,0(a4)
    10ae:	0005                	c.nop	1
    10b0:	0100                	addi	s0,sp,128
    10b2:	5f00                	lw	s0,56(a4)
    10b4:	057e                	slli	a0,a0,0x1f
    10b6:	0000                	unimp
    10b8:	0586                	slli	a1,a1,0x1
    10ba:	0000                	unimp
    10bc:	0001                	nop
    10be:	005f 0000 0000      	0x5f
    10c4:	0000                	unimp
    10c6:	8e00                	0x8e00
    10c8:	0004                	0x4
    10ca:	9400                	0x9400
    10cc:	0004                	0x4
    10ce:	0200                	addi	s0,sp,256
    10d0:	3000                	fld	fs0,32(s0)
    10d2:	949f 0004 9f00      	0x9f000004949f
    10d8:	0004                	0x4
    10da:	0100                	addi	s0,sp,128
    10dc:	5d00                	lw	s0,56(a0)
    10de:	04a0                	addi	s0,sp,584
    10e0:	0000                	unimp
    10e2:	04a4                	addi	s1,sp,584
    10e4:	0000                	unimp
    10e6:	0002                	c.slli64	zero
    10e8:	9f30                	0x9f30
    10ea:	04a4                	addi	s1,sp,584
    10ec:	0000                	unimp
    10ee:	04aa                	slli	s1,s1,0xa
    10f0:	0000                	unimp
    10f2:	0001                	nop
    10f4:	aa5d                	j	12aa <_bss_start+0x72>
    10f6:	0004                	0x4
    10f8:	ae00                	fsd	fs0,24(a2)
    10fa:	0004                	0x4
    10fc:	0100                	addi	s0,sp,128
    10fe:	5f00                	lw	s0,56(a4)
    1100:	04ae                	slli	s1,s1,0xb
    1102:	0000                	unimp
    1104:	04c8                	addi	a0,sp,580
    1106:	0000                	unimp
    1108:	0001                	nop
    110a:	c869                	beqz	s0,11dc <_endtext+0x128>
    110c:	0004                	0x4
    110e:	d800                	sw	s0,48(s0)
    1110:	0004                	0x4
    1112:	0100                	addi	s0,sp,128
    1114:	5d00                	lw	s0,56(a0)
    1116:	04d8                	addi	a4,sp,580
    1118:	0000                	unimp
    111a:	04de                	slli	s1,s1,0x17
    111c:	0000                	unimp
    111e:	7f7d0003          	lb	zero,2039(s10)
    1122:	de9f 0004 f000      	0xf0000004de9f
    1128:	0004                	0x4
    112a:	0100                	addi	s0,sp,128
    112c:	5d00                	lw	s0,56(a0)
    112e:	04f0                	addi	a2,sp,588
    1130:	0000                	unimp
    1132:	04f6                	slli	s1,s1,0x1d
    1134:	0000                	unimp
    1136:	7f7d0003          	lb	zero,2039(s10)
    113a:	f69f 0004 f800      	0xf8000004f69f
    1140:	0004                	0x4
    1142:	0100                	addi	s0,sp,128
    1144:	5d00                	lw	s0,56(a0)
    1146:	04f8                	addi	a4,sp,588
    1148:	0000                	unimp
    114a:	050e                	slli	a0,a0,0x3
    114c:	0000                	unimp
    114e:	0001                	nop
    1150:	0e5f 0005 2200      	0x220000050e5f
    1156:	0005                	c.nop	1
    1158:	0100                	addi	s0,sp,128
    115a:	6900                	flw	fs0,16(a0)
    115c:	0522                	slli	a0,a0,0x8
    115e:	0000                	unimp
    1160:	0532                	slli	a0,a0,0xc
    1162:	0000                	unimp
    1164:	0001                	nop
    1166:	445f 0005 5e00      	0x5e000005445f
    116c:	0005                	c.nop	1
    116e:	0100                	addi	s0,sp,128
    1170:	5900                	lw	s0,48(a0)
    1172:	058c                	addi	a1,sp,704
    1174:	0000                	unimp
    1176:	0590                	addi	a2,sp,704
    1178:	0000                	unimp
    117a:	0002                	c.slli64	zero
    117c:	9f30                	0x9f30
    117e:	0590                	addi	a2,sp,704
    1180:	0000                	unimp
    1182:	0596                	slli	a1,a1,0x5
    1184:	0000                	unimp
    1186:	0001                	nop
    1188:	a25e                	fsd	fs7,256(sp)
    118a:	0005                	c.nop	1
    118c:	a600                	fsd	fs0,8(a2)
    118e:	0005                	c.nop	1
    1190:	0200                	addi	s0,sp,256
    1192:	3000                	fld	fs0,32(s0)
    1194:	a69f 0005 ae00      	0xae000005a69f
    119a:	0005                	c.nop	1
    119c:	0100                	addi	s0,sp,128
    119e:	5d00                	lw	s0,56(a0)
    11a0:	05ae                	slli	a1,a1,0xb
    11a2:	0000                	unimp
    11a4:	05b6                	slli	a1,a1,0xd
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	b65f 0005 bc00      	0xbc000005b65f
    11b0:	0005                	c.nop	1
    11b2:	0100                	addi	s0,sp,128
    11b4:	5d00                	lw	s0,56(a0)
    11b6:	05be                	slli	a1,a1,0xf
    11b8:	0000                	unimp
    11ba:	05c4                	addi	s1,sp,708
    11bc:	0000                	unimp
    11be:	0001                	nop
    11c0:	c45e                	sw	s7,8(sp)
    11c2:	0005                	c.nop	1
    11c4:	d400                	sw	s0,40(s0)
    11c6:	0005                	c.nop	1
    11c8:	0100                	addi	s0,sp,128
    11ca:	5f00                	lw	s0,56(a4)
    11cc:	05d4                	addi	a3,sp,708
    11ce:	0000                	unimp
    11d0:	05d8                	addi	a4,sp,708
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	d85e                	sw	s7,48(sp)
    11d8:	0005                	c.nop	1
    11da:	e200                	fsw	fs0,0(a2)
    11dc:	0005                	c.nop	1
    11de:	0300                	addi	s0,sp,384
    11e0:	7e00                	flw	fs0,56(a2)
    11e2:	9f7f                	0x9f7f
    11e4:	05e2                	slli	a1,a1,0x18
    11e6:	0000                	unimp
    11e8:	05e4                	addi	s1,sp,716
    11ea:	0000                	unimp
    11ec:	0001                	nop
    11ee:	e45e                	fsw	fs7,8(sp)
    11f0:	0005                	c.nop	1
    11f2:	f400                	fsw	fs0,40(s0)
    11f4:	0005                	c.nop	1
    11f6:	0100                	addi	s0,sp,128
    11f8:	5d00                	lw	s0,56(a0)
    11fa:	05f4                	addi	a3,sp,716
    11fc:	0000                	unimp
    11fe:	05fa                	slli	a1,a1,0x1e
    1200:	0000                	unimp
    1202:	7f7d0003          	lb	zero,2039(s10)
    1206:	fa9f 0005 fc00      	0xfc000005fa9f
    120c:	0005                	c.nop	1
    120e:	0100                	addi	s0,sp,128
    1210:	5d00                	lw	s0,56(a0)
    1212:	05fc                	addi	a5,sp,716
    1214:	0000                	unimp
    1216:	0608                	addi	a0,sp,768
    1218:	0000                	unimp
    121a:	0001                	nop
    121c:	085f 0006 1000      	0x10000006085f
    1222:	0006                	c.slli	zero,0x1
    1224:	0300                	addi	s0,sp,384
    1226:	7f00                	flw	fs0,56(a4)
    1228:	9f7f                	0x9f7f
    122a:	0610                	addi	a2,sp,768
    122c:	0000                	unimp
    122e:	0612                	slli	a2,a2,0x4
    1230:	0000                	unimp
    1232:	0001                	nop
    1234:	125f 0006 2200      	0x22000006125f
    123a:	0006                	c.slli	zero,0x1
    123c:	0100                	addi	s0,sp,128
    123e:	5d00                	lw	s0,56(a0)
    1240:	0622                	slli	a2,a2,0x8
    1242:	0000                	unimp
    1244:	0628                	addi	a0,sp,776
    1246:	0000                	unimp
    1248:	7f7d0003          	lb	zero,2039(s10)
    124c:	289f 0006 2a00      	0x2a000006289f
    1252:	0006                	c.slli	zero,0x1
    1254:	0100                	addi	s0,sp,128
    1256:	5d00                	lw	s0,56(a0)
    1258:	062a                	slli	a2,a2,0xa
    125a:	0000                	unimp
    125c:	0636                	slli	a2,a2,0xd
    125e:	0000                	unimp
    1260:	0001                	nop
    1262:	365e                	fld	fa2,496(sp)
    1264:	0006                	c.slli	zero,0x1
    1266:	4200                	lw	s0,0(a2)
    1268:	0006                	c.slli	zero,0x1
    126a:	0300                	addi	s0,sp,384
    126c:	7e00                	flw	fs0,56(a2)
    126e:	9f7f                	0x9f7f
    1270:	0642                	slli	a2,a2,0x10
    1272:	0000                	unimp
    1274:	0644                	addi	s1,sp,772
    1276:	0000                	unimp
    1278:	0001                	nop
    127a:	445e                	lw	s0,212(sp)
    127c:	0006                	c.slli	zero,0x1
    127e:	4a00                	lw	s0,16(a2)
    1280:	0006                	c.slli	zero,0x1
    1282:	0100                	addi	s0,sp,128
    1284:	5f00                	lw	s0,56(a4)
    1286:	064a                	slli	a2,a2,0x12
    1288:	0000                	unimp
    128a:	065c                	addi	a5,sp,772
    128c:	0000                	unimp
    128e:	0001                	nop
    1290:	5c5d                	li	s8,-9
    1292:	0006                	c.slli	zero,0x1
    1294:	6e00                	flw	fs0,24(a2)
    1296:	0006                	c.slli	zero,0x1
    1298:	0100                	addi	s0,sp,128
    129a:	5900                	lw	s0,48(a0)
	...
    12a4:	0532                	slli	a0,a0,0xc
    12a6:	0000                	unimp
    12a8:	00000543          	fmadd.s	fa0,ft0,ft0,ft0,rne
    12ac:	0001                	nop
    12ae:	7e5e                	flw	ft8,244(sp)
    12b0:	0005                	c.nop	1
    12b2:	8200                	0x8200
    12b4:	0005                	c.nop	1
    12b6:	0100                	addi	s0,sp,128
    12b8:	5e00                	lw	s0,56(a2)
	...
    12c2:	0554                	addi	a3,sp,644
    12c4:	0000                	unimp
    12c6:	057e                	slli	a0,a0,0x1f
    12c8:	0000                	unimp
    12ca:	0006                	c.slli	zero,0x1
    12cc:	0016e803          	0x16e803
    12d0:	9f00                	0x9f00
	...
    12da:	047c                	addi	a5,sp,524
    12dc:	0000                	unimp
    12de:	0570                	addi	a2,sp,652
    12e0:	0000                	unimp
    12e2:	0002                	c.slli64	zero
    12e4:	008a                	slli	ra,ra,0x2
    12e6:	057e                	slli	a0,a0,0x1f
    12e8:	0000                	unimp
    12ea:	066e                	slli	a2,a2,0x1b
    12ec:	0000                	unimp
    12ee:	0002                	c.slli64	zero
    12f0:	008a                	slli	ra,ra,0x2
	...
    12fa:	047c                	addi	a5,sp,524
    12fc:	0000                	unimp
    12fe:	0568                	addi	a0,sp,652
    1300:	0000                	unimp
    1302:	0002                	c.slli64	zero
    1304:	0086                	slli	ra,ra,0x1
    1306:	0568                	addi	a0,sp,652
    1308:	0000                	unimp
    130a:	056a                	slli	a0,a0,0x1a
    130c:	0000                	unimp
    130e:	000c                	0xc
    1310:	008a                	slli	ra,ra,0x2
    1312:	24320187          	0x24320187
    1316:	f0090f23          	sb	zero,-226(s2)
    131a:	1c1a                	slli	s8,s8,0x26
    131c:	056a                	slli	a0,a0,0x1a
    131e:	0000                	unimp
    1320:	0570                	addi	a2,sp,652
    1322:	0000                	unimp
    1324:	000d                	c.nop	3
    1326:	008a                	slli	ra,ra,0x2
    1328:	325b01f3          	0x325b01f3
    132c:	2324                	fld	fs1,64(a4)
    132e:	1af0090f          	0x1af0090f
    1332:	7e1c                	flw	fa5,56(a2)
    1334:	0005                	c.nop	1
    1336:	6e00                	flw	fs0,24(a2)
    1338:	0006                	c.slli	zero,0x1
    133a:	0200                	addi	s0,sp,256
    133c:	8600                	0x8600
	...
    1346:	a200                	fsd	fs0,0(a2)
    1348:	0005                	c.nop	1
    134a:	d400                	sw	s0,40(s0)
    134c:	0005                	c.nop	1
    134e:	0100                	addi	s0,sp,128
    1350:	5a00                	lw	s0,48(a2)
    1352:	05e4                	addi	s1,sp,716
    1354:	0000                	unimp
    1356:	065c                	addi	a5,sp,772
    1358:	0000                	unimp
    135a:	0001                	nop
    135c:	005a                	c.slli	zero,0x16
    135e:	0000                	unimp
    1360:	0000                	unimp
    1362:	0000                	unimp
    1364:	7c00                	flw	fs0,56(s0)
    1366:	0004                	0x4
    1368:	9400                	0x9400
    136a:	0004                	0x4
    136c:	0200                	addi	s0,sp,256
    136e:	8800                	0x8800
    1370:	9400                	0x9400
    1372:	0004                	0x4
    1374:	5000                	lw	s0,32(s0)
    1376:	0005                	c.nop	1
    1378:	0200                	addi	s0,sp,256
    137a:	8500                	0x8500
    137c:	5000                	lw	s0,32(s0)
    137e:	0005                	c.nop	1
    1380:	6c00                	flw	fs0,24(s0)
    1382:	0005                	c.nop	1
    1384:	0200                	addi	s0,sp,256
    1386:	8800                	0x8800
    1388:	6c00                	flw	fs0,24(s0)
    138a:	0005                	c.nop	1
    138c:	7000                	flw	fs0,32(s0)
    138e:	0005                	c.nop	1
    1390:	0f00                	addi	s0,sp,912
    1392:	8a00                	0x8a00
    1394:	f300                	fsw	fs0,32(a4)
    1396:	5b01                	li	s6,-32
    1398:	2432                	fld	fs0,264(sp)
    139a:	f0090f23          	sb	zero,-226(s2)
    139e:	311a                	fld	ft2,416(sp)
    13a0:	1c24                	addi	s1,sp,568
    13a2:	057e                	slli	a0,a0,0x1f
    13a4:	0000                	unimp
    13a6:	065c                	addi	a5,sp,772
    13a8:	0000                	unimp
    13aa:	0002                	c.slli64	zero
    13ac:	0085                	addi	ra,ra,1
    13ae:	065c                	addi	a5,sp,772
    13b0:	0000                	unimp
    13b2:	066e                	slli	a2,a2,0x1b
    13b4:	0000                	unimp
    13b6:	0002                	c.slli64	zero
    13b8:	0088                	addi	a0,sp,64
	...
    13c2:	048e                	slli	s1,s1,0x3
    13c4:	0000                	unimp
    13c6:	0494                	addi	a3,sp,576
    13c8:	0000                	unimp
    13ca:	0002                	c.slli64	zero
    13cc:	0084                	addi	s1,sp,64
    13ce:	0494                	addi	a3,sp,576
    13d0:	0000                	unimp
    13d2:	0558                	addi	a4,sp,644
    13d4:	0000                	unimp
    13d6:	0002                	c.slli64	zero
    13d8:	0072                	c.slli	zero,0x1c
    13da:	0558                	addi	a4,sp,644
    13dc:	0000                	unimp
    13de:	0564                	addi	s1,sp,652
    13e0:	0000                	unimp
    13e2:	0002                	c.slli64	zero
    13e4:	0084                	addi	s1,sp,64
    13e6:	0564                	addi	s1,sp,652
    13e8:	0000                	unimp
    13ea:	056c                	addi	a1,sp,652
    13ec:	0000                	unimp
    13ee:	000d                	c.nop	3
    13f0:	0088                	addi	a0,sp,64
    13f2:	325d01f3          	0x325d01f3
    13f6:	2324                	fld	fs1,64(a4)
    13f8:	1af0090f          	0x1af0090f
    13fc:	6c1c                	flw	fa5,24(s0)
    13fe:	0005                	c.nop	1
    1400:	7000                	flw	fs0,32(s0)
    1402:	0005                	c.nop	1
    1404:	1a00                	addi	s0,sp,304
    1406:	8a00                	0x8a00
    1408:	f300                	fsw	fs0,32(a4)
    140a:	5b01                	li	s6,-32
    140c:	2432                	fld	fs0,264(sp)
    140e:	f0090f23          	sb	zero,-226(s2)
    1412:	311a                	fld	ft2,416(sp)
    1414:	1c24                	addi	s1,sp,568
    1416:	325d01f3          	0x325d01f3
    141a:	2324                	fld	fs1,64(a4)
    141c:	1af0090f          	0x1af0090f
    1420:	7e1c                	flw	fa5,56(a2)
    1422:	0005                	c.nop	1
    1424:	6e00                	flw	fs0,24(a2)
    1426:	0006                	c.slli	zero,0x1
    1428:	0200                	addi	s0,sp,256
    142a:	7200                	flw	fs0,32(a2)
	...
    1434:	7c00                	flw	fs0,56(s0)
    1436:	0004                	0x4
    1438:	6a00                	flw	fs0,16(a2)
    143a:	0005                	c.nop	1
    143c:	0100                	addi	s0,sp,128
    143e:	6700                	flw	fs0,8(a4)
    1440:	056a                	slli	a0,a0,0x1a
    1442:	0000                	unimp
    1444:	057e                	slli	a0,a0,0x1f
    1446:	0000                	unimp
    1448:	0006                	c.slli	zero,0x1
    144a:	315b01f3          	0x315b01f3
    144e:	9f1c                	0x9f1c
    1450:	057e                	slli	a0,a0,0x1f
    1452:	0000                	unimp
    1454:	066e                	slli	a2,a2,0x1b
    1456:	0000                	unimp
    1458:	0001                	nop
    145a:	00000067          	jr	zero # 0 <__DYNAMIC>
    145e:	0000                	unimp
    1460:	0000                	unimp
    1462:	7c00                	flw	fs0,56(s0)
    1464:	0004                	0x4
    1466:	6a00                	flw	fs0,16(a2)
    1468:	0005                	c.nop	1
    146a:	0100                	addi	s0,sp,128
    146c:	6700                	flw	fs0,8(a4)
    146e:	056a                	slli	a0,a0,0x1a
    1470:	0000                	unimp
    1472:	057e                	slli	a0,a0,0x1f
    1474:	0000                	unimp
    1476:	0006                	c.slli	zero,0x1
    1478:	315b01f3          	0x315b01f3
    147c:	9f1c                	0x9f1c
    147e:	057e                	slli	a0,a0,0x1f
    1480:	0000                	unimp
    1482:	066e                	slli	a2,a2,0x1b
    1484:	0000                	unimp
    1486:	0001                	nop
    1488:	00000067          	jr	zero # 0 <__DYNAMIC>
    148c:	0000                	unimp
    148e:	0000                	unimp
    1490:	7c00                	flw	fs0,56(s0)
    1492:	0004                	0x4
    1494:	6a00                	flw	fs0,16(a2)
    1496:	0005                	c.nop	1
    1498:	0100                	addi	s0,sp,128
    149a:	6700                	flw	fs0,8(a4)
    149c:	056a                	slli	a0,a0,0x1a
    149e:	0000                	unimp
    14a0:	057e                	slli	a0,a0,0x1f
    14a2:	0000                	unimp
    14a4:	0006                	c.slli	zero,0x1
    14a6:	315b01f3          	0x315b01f3
    14aa:	9f1c                	0x9f1c
    14ac:	057e                	slli	a0,a0,0x1f
    14ae:	0000                	unimp
    14b0:	066e                	slli	a2,a2,0x1b
    14b2:	0000                	unimp
    14b4:	0001                	nop
    14b6:	00000067          	jr	zero # 0 <__DYNAMIC>
    14ba:	0000                	unimp
    14bc:	0000                	unimp
    14be:	8a00                	0x8a00
    14c0:	0004                	0x4
    14c2:	ae00                	fsd	fs0,24(a2)
    14c4:	0004                	0x4
    14c6:	0100                	addi	s0,sp,128
    14c8:	6900                	flw	fs0,16(a0)
    14ca:	04ae                	slli	s1,s1,0xb
    14cc:	0000                	unimp
    14ce:	04c8                	addi	a0,sp,580
    14d0:	0000                	unimp
    14d2:	7f830003          	lb	zero,2040(t1)
    14d6:	c89f 0004 0e00      	0xe000004c89f
    14dc:	0005                	c.nop	1
    14de:	0100                	addi	s0,sp,128
    14e0:	6900                	flw	fs0,16(a0)
    14e2:	050e                	slli	a0,a0,0x3
    14e4:	0000                	unimp
    14e6:	0562                	slli	a0,a0,0x18
    14e8:	0000                	unimp
    14ea:	7f830003          	lb	zero,2040(t1)
    14ee:	629f 0005 7e00      	0x7e000005629f
    14f4:	0005                	c.nop	1
    14f6:	0600                	addi	s0,sp,768
    14f8:	f300                	fsw	fs0,32(a4)
    14fa:	5d01                	li	s10,-32
    14fc:	1c31                	addi	s8,s8,-20
    14fe:	7e9f 0005 6e00      	0x6e0000057e9f
    1504:	0006                	c.slli	zero,0x1
    1506:	0300                	addi	s0,sp,384
    1508:	8300                	0x8300
    150a:	9f7f                	0x9f7f
	...
    1514:	02c0                	addi	s0,sp,324
    1516:	0000                	unimp
    1518:	033c                	addi	a5,sp,392
    151a:	0000                	unimp
    151c:	0001                	nop
    151e:	3c5a                	fld	fs8,432(sp)
    1520:	41000003          	lb	zero,1040(zero) # 410 <polymult2+0x150>
    1524:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1528:	5b00                	lw	s0,48(a4)
    152a:	0341                	addi	t1,t1,16
    152c:	0000                	unimp
    152e:	0368                	addi	a0,sp,396
    1530:	0000                	unimp
    1532:	0004                	0x4
    1534:	9f5a01f3          	0x9f5a01f3
    1538:	0368                	addi	a0,sp,396
    153a:	0000                	unimp
    153c:	038a                	slli	t2,t2,0x2
    153e:	0000                	unimp
    1540:	0001                	nop
    1542:	8a5a                	mv	s4,s6
    1544:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x40>
    1548:	0004                	0x4
    154a:	0400                	addi	s0,sp,512
    154c:	f300                	fsw	fs0,32(a4)
    154e:	5a01                	li	s4,-32
    1550:	009f 0000 0000      	0x9f
    1556:	0000                	unimp
    1558:	c000                	sw	s0,0(s0)
    155a:	0002                	c.slli64	zero
    155c:	3a00                	fld	fs0,48(a2)
    155e:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1562:	5b00                	lw	s0,48(a4)
    1564:	033a                	slli	t1,t1,0xe
    1566:	0000                	unimp
    1568:	0341                	addi	t1,t1,16
    156a:	0000                	unimp
    156c:	0001                	nop
    156e:	415c                	lw	a5,4(a0)
    1570:	68000003          	lb	zero,1664(zero) # 680 <ext_euclid+0x12>
    1574:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1578:	8800                	0x8800
    157a:	9f01                	0x9f01
    157c:	0368                	addi	a0,sp,396
    157e:	0000                	unimp
    1580:	038a                	slli	t2,t2,0x2
    1582:	0000                	unimp
    1584:	0001                	nop
    1586:	00038a5b          	0x38a5b
    158a:	1e00                	addi	s0,sp,816
    158c:	0004                	0x4
    158e:	0300                	addi	s0,sp,384
    1590:	8800                	0x8800
    1592:	9f01                	0x9f01
    1594:	041e                	slli	s0,s0,0x7
    1596:	0000                	unimp
    1598:	0430                	addi	a2,sp,520
    159a:	0000                	unimp
    159c:	0004                	0x4
    159e:	9f5b01f3          	0x9f5b01f3
	...
    15aa:	02c0                	addi	s0,sp,324
    15ac:	0000                	unimp
    15ae:	0332                	slli	t1,t1,0xc
    15b0:	0000                	unimp
    15b2:	0001                	nop
    15b4:	325c                	fld	fa5,160(a2)
    15b6:	41000003          	lb	zero,1040(zero) # 410 <polymult2+0x150>
    15ba:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15be:	6000                	flw	fs0,0(s0)
    15c0:	0341                	addi	t1,t1,16
    15c2:	0000                	unimp
    15c4:	0368                	addi	a0,sp,396
    15c6:	0000                	unimp
    15c8:	bc780003          	lb	zero,-1081(a6) # 67bc7 <_stack_start+0x57bc7>
    15cc:	687f                	0x687f
    15ce:	8a000003          	lb	zero,-1888(zero) # fffff8a0 <_stack_start+0xfffef8a0>
    15d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15d6:	6000                	flw	fs0,0(s0)
    15d8:	038a                	slli	t2,t2,0x2
    15da:	0000                	unimp
    15dc:	040e                	slli	s0,s0,0x3
    15de:	0000                	unimp
    15e0:	bc780003          	lb	zero,-1081(a6)
    15e4:	0e7f                	0xe7f
    15e6:	0004                	0x4
    15e8:	3000                	fld	fs0,32(s0)
    15ea:	0004                	0x4
    15ec:	0300                	addi	s0,sp,384
    15ee:	9100                	0x9100
    15f0:	7fbc                	flw	fa5,120(a5)
	...
    15fa:	02c0                	addi	s0,sp,324
    15fc:	0000                	unimp
    15fe:	0328                	addi	a0,sp,392
    1600:	0000                	unimp
    1602:	0001                	nop
    1604:	285d                	jal	16ba <product2+0x22a>
    1606:	14000003          	lb	zero,320(zero) # 140 <polymult+0x8c>
    160a:	0004                	0x4
    160c:	0100                	addi	s0,sp,128
    160e:	6300                	flw	fs0,0(a4)
    1610:	0414                	addi	a3,sp,512
    1612:	0000                	unimp
    1614:	0430                	addi	a2,sp,520
    1616:	0000                	unimp
    1618:	0004                	0x4
    161a:	9f5d01f3          	0x9f5d01f3
	...
    1626:	02c0                	addi	s0,sp,324
    1628:	0000                	unimp
    162a:	032a                	slli	t1,t1,0xa
    162c:	0000                	unimp
    162e:	0001                	nop
    1630:	2a5e                	fld	fs4,464(sp)
    1632:	24000003          	lb	zero,576(zero) # 240 <polymult+0x18c>
    1636:	0004                	0x4
    1638:	0100                	addi	s0,sp,128
    163a:	6b00                	flw	fs0,16(a4)
    163c:	0424                	addi	s1,sp,520
    163e:	0000                	unimp
    1640:	0430                	addi	a2,sp,520
    1642:	0000                	unimp
    1644:	0004                	0x4
    1646:	9f5e01f3          	0x9f5e01f3
	...
    1652:	031c                	addi	a5,sp,384
    1654:	0000                	unimp
    1656:	0360                	addi	s0,sp,396
    1658:	0000                	unimp
    165a:	0002                	c.slli64	zero
    165c:	0082                	c.slli64	ra
    165e:	0360                	addi	s0,sp,396
    1660:	0000                	unimp
    1662:	0368                	addi	a0,sp,396
    1664:	0000                	unimp
    1666:	0002                	c.slli64	zero
    1668:	0089                	addi	ra,ra,2
    166a:	0368                	addi	a0,sp,396
    166c:	0000                	unimp
    166e:	038a                	slli	t2,t2,0x2
    1670:	0000                	unimp
    1672:	0002                	c.slli64	zero
    1674:	0082                	c.slli64	ra
    1676:	038a                	slli	t2,t2,0x2
    1678:	0000                	unimp
    167a:	03b2                	slli	t2,t2,0xc
    167c:	0000                	unimp
    167e:	0002                	c.slli64	zero
    1680:	0089                	addi	ra,ra,2
    1682:	03c4                	addi	s1,sp,452
    1684:	0000                	unimp
    1686:	03ec                	addi	a1,sp,460
    1688:	0000                	unimp
    168a:	0002                	c.slli64	zero
    168c:	0089                	addi	ra,ra,2
	...
    1696:	0324                	addi	s1,sp,392
    1698:	0000                	unimp
    169a:	0332                	slli	t1,t1,0xc
    169c:	0000                	unimp
    169e:	0002                	c.slli64	zero
    16a0:	9f30                	0x9f30
    16a2:	0332                	slli	t1,t1,0xc
    16a4:	0000                	unimp
    16a6:	0341                	addi	t1,t1,16
    16a8:	0000                	unimp
    16aa:	0001                	nop
    16ac:	685e                	flw	fa6,212(sp)
    16ae:	8a000003          	lb	zero,-1888(zero) # fffff8a0 <_stack_start+0xfffef8a0>
    16b2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16b6:	5e00                	lw	s0,56(a2)
    16b8:	03b2                	slli	t2,t2,0xc
    16ba:	0000                	unimp
    16bc:	03c4                	addi	s1,sp,452
    16be:	0000                	unimp
    16c0:	0001                	nop
    16c2:	ec5c                	fsw	fa5,28(s0)
    16c4:	30000003          	lb	zero,768(zero) # 300 <polymult2+0x40>
    16c8:	0004                	0x4
    16ca:	0100                	addi	s0,sp,128
    16cc:	5c00                	lw	s0,56(s0)
	...
    16d6:	0360                	addi	s0,sp,396
    16d8:	0000                	unimp
    16da:	0368                	addi	a0,sp,396
    16dc:	0000                	unimp
    16de:	0001                	nop
    16e0:	6864                	flw	fs1,84(s0)
    16e2:	84000003          	lb	zero,-1984(zero) # fffff840 <_stack_start+0xfffef840>
    16e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16ea:	5f00                	lw	s0,56(a4)
    16ec:	038a                	slli	t2,t2,0x2
    16ee:	0000                	unimp
    16f0:	03b2                	slli	t2,t2,0xc
    16f2:	0000                	unimp
    16f4:	0001                	nop
    16f6:	c464                	sw	s1,76(s0)
    16f8:	ec000003          	lb	zero,-320(zero) # fffffec0 <_stack_start+0xfffefec0>
    16fc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1700:	6400                	flw	fs0,8(s0)
    1702:	03ec                	addi	a1,sp,460
    1704:	0000                	unimp
    1706:	03f2                	slli	t2,t2,0x1c
    1708:	0000                	unimp
    170a:	0001                	nop
    170c:	f25e                	fsw	fs7,36(sp)
    170e:	fa000003          	lb	zero,-96(zero) # ffffffa0 <_stack_start+0xfffeffa0>
    1712:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1716:	7e00                	flw	fs0,56(a2)
    1718:	9f7f                	0x9f7f
    171a:	03fa                	slli	t2,t2,0x1e
    171c:	0000                	unimp
    171e:	0406                	slli	s0,s0,0x1
    1720:	0000                	unimp
    1722:	0001                	nop
    1724:	005e                	c.slli	zero,0x17
    1726:	0000                	unimp
    1728:	0000                	unimp
    172a:	0000                	unimp
    172c:	8a00                	0x8a00
    172e:	9c000003          	lb	zero,-1600(zero) # fffff9c0 <_stack_start+0xfffef9c0>
    1732:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1736:	5f00                	lw	s0,56(a4)
    1738:	039c                	addi	a5,sp,448
    173a:	0000                	unimp
    173c:	03a2                	slli	t2,t2,0x8
    173e:	0000                	unimp
    1740:	017f0003          	lb	zero,23(t5)
    1744:	a29f 0003 ac00      	0xac000003a29f
    174a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    174e:	5f00                	lw	s0,56(a4)
    1750:	03c8                	addi	a0,sp,452
    1752:	0000                	unimp
    1754:	03da                	slli	t2,t2,0x16
    1756:	0000                	unimp
    1758:	0001                	nop
    175a:	da5f 0003 e000      	0xe0000003da5f
    1760:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1764:	7f00                	flw	fs0,56(a4)
    1766:	9f01                	0x9f01
    1768:	03e0                	addi	s0,sp,460
    176a:	0000                	unimp
    176c:	03ec                	addi	a1,sp,460
    176e:	0000                	unimp
    1770:	0001                	nop
    1772:	005f 0000 0000      	0x5f
    1778:	0000                	unimp
    177a:	2200                	fld	fs0,0(a2)
    177c:	22000003          	lb	zero,544(zero) # 220 <polymult+0x16c>
    1780:	0004                	0x4
    1782:	0200                	addi	s0,sp,256
    1784:	8a00                	0x8a00
	...
    178e:	2400                	fld	fs0,8(s0)
    1790:	0a000003          	lb	zero,160(zero) # a0 <array_equ+0xe>
    1794:	0004                	0x4
    1796:	0200                	addi	s0,sp,256
    1798:	7200                	flw	fs0,32(a2)
    179a:	0a00                	addi	s0,sp,272
    179c:	0004                	0x4
    179e:	1000                	addi	s0,sp,32
    17a0:	0004                	0x4
    17a2:	0200                	addi	s0,sp,256
    17a4:	7900                	flw	fs0,48(a0)
    17a6:	1000                	addi	s0,sp,32
    17a8:	0004                	0x4
    17aa:	1400                	addi	s0,sp,544
    17ac:	0004                	0x4
    17ae:	0c00                	addi	s0,sp,528
    17b0:	8a00                	0x8a00
    17b2:	8300                	0x8300
    17b4:	3200                	fld	fs0,32(a2)
    17b6:	2324                	fld	fs1,64(a4)
    17b8:	1af0090f          	0x1af0090f
    17bc:	141c                	addi	a5,sp,544
    17be:	0004                	0x4
    17c0:	2200                	fld	fs0,0(a2)
    17c2:	0004                	0x4
    17c4:	0d00                	addi	s0,sp,656
    17c6:	8a00                	0x8a00
    17c8:	f300                	fsw	fs0,32(a4)
    17ca:	5d01                	li	s10,-32
    17cc:	2432                	fld	fs0,264(sp)
    17ce:	f0090f23          	sb	zero,-226(s2)
    17d2:	1c1a                	slli	s8,s8,0x26
	...
    17dc:	031c                	addi	a5,sp,384
    17de:	0000                	unimp
    17e0:	0360                	addi	s0,sp,396
    17e2:	0000                	unimp
    17e4:	0001                	nop
    17e6:	6064                	flw	fs1,68(s0)
    17e8:	68000003          	lb	zero,1664(zero) # 680 <ext_euclid+0x12>
    17ec:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    17f0:	8300                	0x8300
    17f2:	9f7f                	0x9f7f
    17f4:	0368                	addi	a0,sp,396
    17f6:	0000                	unimp
    17f8:	038a                	slli	t2,t2,0x2
    17fa:	0000                	unimp
    17fc:	0001                	nop
    17fe:	8a64                	0x8a64
    1800:	14000003          	lb	zero,320(zero) # 140 <polymult+0x8c>
    1804:	0004                	0x4
    1806:	0300                	addi	s0,sp,384
    1808:	8300                	0x8300
    180a:	9f7f                	0x9f7f
    180c:	0414                	addi	a3,sp,512
    180e:	0000                	unimp
    1810:	0430                	addi	a2,sp,520
    1812:	0000                	unimp
    1814:	0006                	c.slli	zero,0x1
    1816:	315d01f3          	0x315d01f3
    181a:	9f1c                	0x9f1c
	...
    1824:	02d8                	addi	a4,sp,324
    1826:	0000                	unimp
    1828:	041c                	addi	a5,sp,512
    182a:	0000                	unimp
    182c:	0001                	nop
    182e:	00041c67          	0x41c67
    1832:	1e00                	addi	s0,sp,816
    1834:	0004                	0x4
    1836:	0700                	addi	s0,sp,896
    1838:	8800                	0x8800
    183a:	f300                	fsw	fs0,32(a4)
    183c:	5d01                	li	s10,-32
    183e:	9f22                	add	t5,t5,s0
    1840:	041e                	slli	s0,s0,0x7
    1842:	0000                	unimp
    1844:	0430                	addi	a2,sp,520
    1846:	0000                	unimp
    1848:	000a                	c.slli	zero,0x2
    184a:	f35b01f3          	0xf35b01f3
    184e:	5d01                	li	s10,-32
    1850:	3122                	fld	ft2,40(sp)
    1852:	9f1c                	0x9f1c
	...
    185c:	0322                	slli	t1,t1,0x8
    185e:	0000                	unimp
    1860:	041e                	slli	s0,s0,0x7
    1862:	0000                	unimp
    1864:	0001                	nop
    1866:	1e68                	addi	a0,sp,828
    1868:	0004                	0x4
    186a:	3000                	fld	fs0,32(s0)
    186c:	0004                	0x4
    186e:	0600                	addi	s0,sp,768
    1870:	f300                	fsw	fs0,32(a4)
    1872:	5b01                	li	s6,-32
    1874:	1c31                	addi	s8,s8,-20
    1876:	009f 0000 0000      	0x9f
    187c:	0000                	unimp
    187e:	2200                	fld	fs0,0(a2)
    1880:	60000003          	lb	zero,1536(zero) # 600 <polydiv+0x1d0>
    1884:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1888:	6400                	flw	fs0,8(s0)
    188a:	0360                	addi	s0,sp,396
    188c:	0000                	unimp
    188e:	0368                	addi	a0,sp,396
    1890:	0000                	unimp
    1892:	7f830003          	lb	zero,2040(t1)
    1896:	689f 0003 8a00      	0x8a000003689f
    189c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18a0:	6400                	flw	fs0,8(s0)
    18a2:	038a                	slli	t2,t2,0x2
    18a4:	0000                	unimp
    18a6:	0414                	addi	a3,sp,512
    18a8:	0000                	unimp
    18aa:	7f830003          	lb	zero,2040(t1)
    18ae:	149f 0004 3000      	0x30000004149f
    18b4:	0004                	0x4
    18b6:	0600                	addi	s0,sp,768
    18b8:	f300                	fsw	fs0,32(a4)
    18ba:	5d01                	li	s10,-32
    18bc:	1c31                	addi	s8,s8,-20
    18be:	009f 0000 0000      	0x9f
    18c4:	0000                	unimp
    18c6:	b400                	fsd	fs0,40(s0)
    18c8:	0000                	unimp
    18ca:	3c00                	fld	fs0,56(s0)
    18cc:	0001                	nop
    18ce:	0100                	addi	s0,sp,128
    18d0:	5a00                	lw	s0,48(a2)
    18d2:	013c                	addi	a5,sp,136
    18d4:	0000                	unimp
    18d6:	0145                	addi	sp,sp,17
    18d8:	0000                	unimp
    18da:	0001                	nop
    18dc:	0001455b          	0x1455b
    18e0:	8200                	0x8200
    18e2:	0001                	nop
    18e4:	0400                	addi	s0,sp,512
    18e6:	f300                	fsw	fs0,32(a4)
    18e8:	5a01                	li	s4,-32
    18ea:	829f 0001 a400      	0xa4000001829f
    18f0:	0001                	nop
    18f2:	0100                	addi	s0,sp,128
    18f4:	5a00                	lw	s0,48(a2)
    18f6:	01a4                	addi	s1,sp,200
    18f8:	0000                	unimp
    18fa:	02c0                	addi	s0,sp,324
    18fc:	0000                	unimp
    18fe:	0004                	0x4
    1900:	9f5a01f3          	0x9f5a01f3
	...
    190c:	00b4                	addi	a3,sp,72
    190e:	0000                	unimp
    1910:	0128                	addi	a0,sp,136
    1912:	0000                	unimp
    1914:	0001                	nop
    1916:	0001285b          	0x1285b
    191a:	4500                	lw	s0,8(a0)
    191c:	0001                	nop
    191e:	0100                	addi	s0,sp,128
    1920:	6000                	flw	fs0,0(s0)
    1922:	0145                	addi	sp,sp,17
    1924:	0000                	unimp
    1926:	0182                	c.slli64	gp
    1928:	0000                	unimp
    192a:	b4780003          	lb	zero,-1209(a6)
    192e:	827f                	0x827f
    1930:	0001                	nop
    1932:	a400                	fsd	fs0,8(s0)
    1934:	0001                	nop
    1936:	0100                	addi	s0,sp,128
    1938:	6000                	flw	fs0,0(s0)
    193a:	01a4                	addi	s1,sp,200
    193c:	0000                	unimp
    193e:	01fe                	slli	gp,gp,0x1f
    1940:	0000                	unimp
    1942:	b4780003          	lb	zero,-1209(a6)
    1946:	fe7f                	0xfe7f
    1948:	0001                	nop
    194a:	c000                	sw	s0,0(s0)
    194c:	0002                	c.slli64	zero
    194e:	0300                	addi	s0,sp,384
    1950:	9100                	0x9100
    1952:	7fb4                	flw	fa3,120(a5)
	...
    195c:	00b4                	addi	a3,sp,72
    195e:	0000                	unimp
    1960:	012a                	slli	sp,sp,0xa
    1962:	0000                	unimp
    1964:	0001                	nop
    1966:	2a5c                	fld	fa5,144(a2)
    1968:	0001                	nop
    196a:	4500                	lw	s0,8(a0)
    196c:	0001                	nop
    196e:	0100                	addi	s0,sp,128
    1970:	6100                	flw	fs0,0(a0)
    1972:	0145                	addi	sp,sp,17
    1974:	0000                	unimp
    1976:	0182                	c.slli64	gp
    1978:	0000                	unimp
    197a:	b0780003          	lb	zero,-1273(a6)
    197e:	827f                	0x827f
    1980:	0001                	nop
    1982:	a400                	fsd	fs0,8(s0)
    1984:	0001                	nop
    1986:	0100                	addi	s0,sp,128
    1988:	6100                	flw	fs0,0(a0)
    198a:	01a4                	addi	s1,sp,200
    198c:	0000                	unimp
    198e:	01fa                	slli	gp,gp,0x1e
    1990:	0000                	unimp
    1992:	b0780003          	lb	zero,-1273(a6)
    1996:	fa7f                	0xfa7f
    1998:	0001                	nop
    199a:	1e00                	addi	s0,sp,816
    199c:	0002                	c.slli64	zero
    199e:	0200                	addi	s0,sp,256
    19a0:	7200                	flw	fs0,32(a2)
    19a2:	1e00                	addi	s0,sp,816
    19a4:	0002                	c.slli64	zero
    19a6:	2000                	fld	fs0,0(s0)
    19a8:	0002                	c.slli64	zero
    19aa:	0300                	addi	s0,sp,384
    19ac:	7200                	flw	fs0,32(a2)
    19ae:	7fb0                	flw	fa2,120(a5)
    19b0:	0220                	addi	s0,sp,264
    19b2:	0000                	unimp
    19b4:	02c0                	addi	s0,sp,324
    19b6:	0000                	unimp
    19b8:	b0910003          	lb	zero,-1271(sp)
    19bc:	007f                	0x7f
    19be:	0000                	unimp
    19c0:	0000                	unimp
    19c2:	0000                	unimp
    19c4:	b400                	fsd	fs0,40(s0)
    19c6:	0000                	unimp
    19c8:	be00                	fsd	fs0,56(a2)
    19ca:	0000                	unimp
    19cc:	0100                	addi	s0,sp,128
    19ce:	5d00                	lw	s0,56(a0)
    19d0:	00be                	slli	ra,ra,0xf
    19d2:	0000                	unimp
    19d4:	0202                	c.slli64	tp
    19d6:	0000                	unimp
    19d8:	0001                	nop
    19da:	0262                	slli	tp,tp,0x18
    19dc:	0002                	c.slli64	zero
    19de:	2000                	fld	fs0,0(s0)
    19e0:	0002                	c.slli64	zero
    19e2:	0400                	addi	s0,sp,512
    19e4:	f300                	fsw	fs0,32(a4)
    19e6:	5d01                	li	s10,-32
    19e8:	209f 0002 c000      	0xc0000002209f
    19ee:	0002                	c.slli64	zero
    19f0:	0100                	addi	s0,sp,128
    19f2:	6200                	flw	fs0,0(a2)
	...
    19fc:	00b4                	addi	a3,sp,72
    19fe:	0000                	unimp
    1a00:	0145                	addi	sp,sp,17
    1a02:	0000                	unimp
    1a04:	0001                	nop
    1a06:	455e                	lw	a0,212(sp)
    1a08:	0001                	nop
    1a0a:	8200                	0x8200
    1a0c:	0001                	nop
    1a0e:	0100                	addi	s0,sp,128
    1a10:	6700                	flw	fs0,8(a4)
    1a12:	0182                	c.slli64	gp
    1a14:	0000                	unimp
    1a16:	01a4                	addi	s1,sp,200
    1a18:	0000                	unimp
    1a1a:	0001                	nop
    1a1c:	a45e                	fsd	fs7,8(sp)
    1a1e:	0001                	nop
    1a20:	0c00                	addi	s0,sp,528
    1a22:	0002                	c.slli64	zero
    1a24:	0100                	addi	s0,sp,128
    1a26:	6700                	flw	fs0,8(a4)
    1a28:	020c                	addi	a1,sp,256
    1a2a:	0000                	unimp
    1a2c:	0220                	addi	s0,sp,264
    1a2e:	0000                	unimp
    1a30:	0004                	0x4
    1a32:	9f5e01f3          	0x9f5e01f3
    1a36:	0220                	addi	s0,sp,264
    1a38:	0000                	unimp
    1a3a:	02c0                	addi	s0,sp,324
    1a3c:	0000                	unimp
    1a3e:	0001                	nop
    1a40:	00000067          	jr	zero # 0 <__DYNAMIC>
    1a44:	0000                	unimp
    1a46:	0000                	unimp
    1a48:	b400                	fsd	fs0,40(s0)
    1a4a:	0000                	unimp
    1a4c:	f000                	fsw	fs0,32(s0)
    1a4e:	0000                	unimp
    1a50:	0100                	addi	s0,sp,128
    1a52:	5f00                	lw	s0,56(a4)
    1a54:	00f0                	addi	a2,sp,76
    1a56:	0000                	unimp
    1a58:	01fe                	slli	gp,gp,0x1f
    1a5a:	0000                	unimp
    1a5c:	b8780003          	lb	zero,-1145(a6)
    1a60:	fe7f                	0xfe7f
    1a62:	0001                	nop
    1a64:	c000                	sw	s0,0(s0)
    1a66:	0002                	c.slli64	zero
    1a68:	0300                	addi	s0,sp,384
    1a6a:	9100                	0x9100
    1a6c:	7fb8                	flw	fa4,120(a5)
	...
    1a76:	011e                	slli	sp,sp,0x7
    1a78:	0000                	unimp
    1a7a:	0132                	slli	sp,sp,0xc
    1a7c:	0000                	unimp
    1a7e:	0002                	c.slli64	zero
    1a80:	008a                	slli	ra,ra,0x2
    1a82:	0132                	slli	sp,sp,0xc
    1a84:	0000                	unimp
    1a86:	01dc                	addi	a5,sp,196
    1a88:	0000                	unimp
    1a8a:	0002                	c.slli64	zero
    1a8c:	0084                	addi	s1,sp,64
    1a8e:	01dc                	addi	a5,sp,196
    1a90:	0000                	unimp
    1a92:	0212                	slli	tp,tp,0x4
    1a94:	0000                	unimp
    1a96:	0002                	c.slli64	zero
    1a98:	008a                	slli	ra,ra,0x2
    1a9a:	0220                	addi	s0,sp,264
    1a9c:	0000                	unimp
    1a9e:	026c                	addi	a1,sp,268
    1aa0:	0000                	unimp
    1aa2:	0002                	c.slli64	zero
    1aa4:	0084                	addi	s1,sp,64
    1aa6:	026c                	addi	a1,sp,268
    1aa8:	0000                	unimp
    1aaa:	02c0                	addi	s0,sp,324
    1aac:	0000                	unimp
    1aae:	0002                	c.slli64	zero
    1ab0:	008a                	slli	ra,ra,0x2
	...
    1aba:	0120                	addi	s0,sp,136
    1abc:	0000                	unimp
    1abe:	0132                	slli	sp,sp,0xc
    1ac0:	0000                	unimp
    1ac2:	0002                	c.slli64	zero
    1ac4:	9f30                	0x9f30
    1ac6:	0132                	slli	sp,sp,0xc
    1ac8:	0000                	unimp
    1aca:	0138                	addi	a4,sp,136
    1acc:	0000                	unimp
    1ace:	0001                	nop
    1ad0:	465c                	lw	a5,12(a2)
    1ad2:	0001                	nop
    1ad4:	5200                	lw	s0,32(a2)
    1ad6:	0001                	nop
    1ad8:	0200                	addi	s0,sp,256
    1ada:	3000                	fld	fs0,32(s0)
    1adc:	529f 0001 5a00      	0x5a000001529f
    1ae2:	0001                	nop
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	5b00                	lw	s0,48(a4)
    1ae8:	015e                	slli	sp,sp,0x17
    1aea:	0000                	unimp
    1aec:	0162                	slli	sp,sp,0x18
    1aee:	0000                	unimp
    1af0:	0002                	c.slli64	zero
    1af2:	9f30                	0x9f30
    1af4:	0162                	slli	sp,sp,0x18
    1af6:	0000                	unimp
    1af8:	0178                	addi	a4,sp,140
    1afa:	0000                	unimp
    1afc:	0001                	nop
    1afe:	0001825b          	0x1825b
    1b02:	a400                	fsd	fs0,8(s0)
    1b04:	0001                	nop
    1b06:	0100                	addi	s0,sp,128
    1b08:	5c00                	lw	s0,56(s0)
    1b0a:	01a4                	addi	s1,sp,200
    1b0c:	0000                	unimp
    1b0e:	01b4                	addi	a3,sp,200
    1b10:	0000                	unimp
    1b12:	0001                	nop
    1b14:	0001b45b          	0x1b45b
    1b18:	ba00                	fsd	fs0,48(a2)
    1b1a:	0001                	nop
    1b1c:	0300                	addi	s0,sp,384
    1b1e:	7b00                	flw	fs0,48(a4)
    1b20:	9f7f                	0x9f7f
    1b22:	01ba                	slli	gp,gp,0xe
    1b24:	0000                	unimp
    1b26:	01cc                	addi	a1,sp,196
    1b28:	0000                	unimp
    1b2a:	0001                	nop
    1b2c:	0001cc5b          	0x1cc5b
    1b30:	d200                	sw	s0,32(a2)
    1b32:	0001                	nop
    1b34:	0300                	addi	s0,sp,384
    1b36:	7b00                	flw	fs0,48(a4)
    1b38:	9f7f                	0x9f7f
    1b3a:	01d2                	slli	gp,gp,0x14
    1b3c:	0000                	unimp
    1b3e:	01d6                	slli	gp,gp,0x15
    1b40:	0000                	unimp
    1b42:	0001                	nop
    1b44:	0001dc5b          	0x1dc5b
    1b48:	e800                	fsw	fs0,16(s0)
    1b4a:	0001                	nop
    1b4c:	0100                	addi	s0,sp,128
    1b4e:	5e00                	lw	s0,56(a2)
    1b50:	026c                	addi	a1,sp,268
    1b52:	0000                	unimp
    1b54:	028a                	slli	t0,t0,0x2
    1b56:	0000                	unimp
    1b58:	0001                	nop
    1b5a:	8a5e                	mv	s4,s7
    1b5c:	0002                	c.slli64	zero
    1b5e:	9600                	0x9600
    1b60:	0002                	c.slli64	zero
    1b62:	0100                	addi	s0,sp,128
    1b64:	5b00                	lw	s0,48(a4)
    1b66:	0296                	slli	t0,t0,0x5
    1b68:	0000                	unimp
    1b6a:	02a2                	slli	t0,t0,0x8
    1b6c:	0000                	unimp
    1b6e:	7f7b0003          	lb	zero,2039(s6)
    1b72:	a29f 0002 ac00      	0xac000002a29f
    1b78:	0002                	c.slli64	zero
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	5b00                	lw	s0,48(a4)
	...
    1b86:	017a                	slli	sp,sp,0x1e
    1b88:	0000                	unimp
    1b8a:	0182                	c.slli64	gp
    1b8c:	0000                	unimp
    1b8e:	0001                	nop
    1b90:	8269                	srli	a2,a2,0x1a
    1b92:	0001                	nop
    1b94:	9e00                	0x9e00
    1b96:	0001                	nop
    1b98:	0100                	addi	s0,sp,128
    1b9a:	5f00                	lw	s0,56(a4)
    1b9c:	01d6                	slli	gp,gp,0x15
    1b9e:	0000                	unimp
    1ba0:	01dc                	addi	a5,sp,196
    1ba2:	0000                	unimp
    1ba4:	0001                	nop
    1ba6:	ec69                	bnez	s0,1c80 <random_keys+0x1b0>
    1ba8:	0001                	nop
    1baa:	f200                	fsw	fs0,32(a2)
    1bac:	0001                	nop
    1bae:	0100                	addi	s0,sp,128
    1bb0:	5d00                	lw	s0,56(a0)
    1bb2:	01f2                	slli	gp,gp,0x1c
    1bb4:	0000                	unimp
    1bb6:	0220                	addi	s0,sp,264
    1bb8:	0000                	unimp
    1bba:	0001                	nop
    1bbc:	205f 0002 6c00      	0x6c000002205f
    1bc2:	0002                	c.slli64	zero
    1bc4:	0100                	addi	s0,sp,128
    1bc6:	6900                	flw	fs0,16(a0)
    1bc8:	026c                	addi	a1,sp,268
    1bca:	0000                	unimp
    1bcc:	0270                	addi	a2,sp,268
    1bce:	0000                	unimp
    1bd0:	0001                	nop
    1bd2:	705c                	flw	fa5,36(s0)
    1bd4:	0002                	c.slli64	zero
    1bd6:	7a00                	flw	fs0,48(a2)
    1bd8:	0002                	c.slli64	zero
    1bda:	0300                	addi	s0,sp,384
    1bdc:	7c00                	flw	fs0,56(s0)
    1bde:	9f7f                	0x9f7f
    1be0:	027a                	slli	tp,tp,0x1e
    1be2:	0000                	unimp
    1be4:	0284                	addi	s1,sp,320
    1be6:	0000                	unimp
    1be8:	0001                	nop
    1bea:	8a5c                	0x8a5c
    1bec:	0002                	c.slli64	zero
    1bee:	b000                	fsd	fs0,32(s0)
    1bf0:	0002                	c.slli64	zero
    1bf2:	0100                	addi	s0,sp,128
    1bf4:	5d00                	lw	s0,56(a0)
    1bf6:	02b0                	addi	a2,sp,328
    1bf8:	0000                	unimp
    1bfa:	02b4                	addi	a3,sp,328
    1bfc:	0000                	unimp
    1bfe:	0001                	nop
    1c00:	b45f 0002 be00      	0xbe000002b45f
    1c06:	0002                	c.slli64	zero
    1c08:	0300                	addi	s0,sp,384
    1c0a:	7f00                	flw	fs0,56(a4)
    1c0c:	9f7f                	0x9f7f
    1c0e:	02be                	slli	t0,t0,0xf
    1c10:	0000                	unimp
    1c12:	02c0                	addi	s0,sp,324
    1c14:	0000                	unimp
    1c16:	0001                	nop
    1c18:	005f 0000 0000      	0x5f
    1c1e:	0000                	unimp
    1c20:	2000                	fld	fs0,0(s0)
    1c22:	0002                	c.slli64	zero
    1c24:	3200                	fld	fs0,32(a2)
    1c26:	0002                	c.slli64	zero
    1c28:	0100                	addi	s0,sp,128
    1c2a:	5f00                	lw	s0,56(a4)
    1c2c:	0232                	slli	tp,tp,0xc
    1c2e:	0000                	unimp
    1c30:	0238                	addi	a4,sp,264
    1c32:	0000                	unimp
    1c34:	017f0003          	lb	zero,23(t5)
    1c38:	389f 0002 4400      	0x44000002389f
    1c3e:	0002                	c.slli64	zero
    1c40:	0100                	addi	s0,sp,128
    1c42:	5f00                	lw	s0,56(a4)
    1c44:	0248                	addi	a0,sp,260
    1c46:	0000                	unimp
    1c48:	025a                	slli	tp,tp,0x16
    1c4a:	0000                	unimp
    1c4c:	0001                	nop
    1c4e:	5a5f 0002 6000      	0x600000025a5f
    1c54:	0002                	c.slli64	zero
    1c56:	0300                	addi	s0,sp,384
    1c58:	7f00                	flw	fs0,56(a4)
    1c5a:	9f01                	0x9f01
    1c5c:	0260                	addi	s0,sp,268
    1c5e:	0000                	unimp
    1c60:	026c                	addi	a1,sp,268
    1c62:	0000                	unimp
    1c64:	0001                	nop
    1c66:	005f 0000 0000      	0x5f
    1c6c:	0000                	unimp
    1c6e:	f600                	fsw	fs0,40(a2)
    1c70:	0001                	nop
    1c72:	2000                	fld	fs0,0(s0)
    1c74:	0002                	c.slli64	zero
    1c76:	0600                	addi	s0,sp,768
    1c78:	0300                	addi	s0,sp,384
    1c7a:	1238                	addi	a4,sp,296
    1c7c:	0000                	unimp
    1c7e:	009f 0000 0000      	0x9f
    1c84:	0000                	unimp
    1c86:	1e00                	addi	s0,sp,816
    1c88:	0001                	nop
    1c8a:	0a00                	addi	s0,sp,272
    1c8c:	0002                	c.slli64	zero
    1c8e:	0200                	addi	s0,sp,256
    1c90:	8600                	0x8600
    1c92:	0a00                	addi	s0,sp,272
    1c94:	0002                	c.slli64	zero
    1c96:	1200                	addi	s0,sp,288
    1c98:	0002                	c.slli64	zero
    1c9a:	0e00                	addi	s0,sp,784
    1c9c:	8a00                	0x8a00
    1c9e:	9100                	0x9100
    1ca0:	7fb4                	flw	fa3,120(a5)
    1ca2:	3206                	fld	ft4,96(sp)
    1ca4:	2324                	fld	fs1,64(a4)
    1ca6:	1af0090f          	0x1af0090f
    1caa:	201c                	fld	fa5,0(s0)
    1cac:	0002                	c.slli64	zero
    1cae:	c000                	sw	s0,0(s0)
    1cb0:	0002                	c.slli64	zero
    1cb2:	0200                	addi	s0,sp,256
    1cb4:	8600                	0x8600
	...
    1cbe:	2000                	fld	fs0,0(s0)
    1cc0:	0001                	nop
    1cc2:	fa00                	fsw	fs0,48(a2)
    1cc4:	0001                	nop
    1cc6:	0200                	addi	s0,sp,256
    1cc8:	7200                	flw	fs0,32(a2)
    1cca:	fa00                	fsw	fs0,48(a2)
    1ccc:	0001                	nop
    1cce:	0200                	addi	s0,sp,256
    1cd0:	0002                	c.slli64	zero
    1cd2:	0c00                	addi	s0,sp,528
    1cd4:	8600                	0x8600
    1cd6:	8200                	0x8200
    1cd8:	3200                	fld	fs0,32(a2)
    1cda:	2324                	fld	fs1,64(a4)
    1cdc:	1af0090f          	0x1af0090f
    1ce0:	021c                	addi	a5,sp,256
    1ce2:	0002                	c.slli64	zero
    1ce4:	0a00                	addi	s0,sp,272
    1ce6:	0002                	c.slli64	zero
    1ce8:	0d00                	addi	s0,sp,656
    1cea:	8600                	0x8600
    1cec:	f300                	fsw	fs0,32(a4)
    1cee:	5d01                	li	s10,-32
    1cf0:	2432                	fld	fs0,264(sp)
    1cf2:	f0090f23          	sb	zero,-226(s2)
    1cf6:	1c1a                	slli	s8,s8,0x26
    1cf8:	020a                	slli	tp,tp,0x2
    1cfa:	0000                	unimp
    1cfc:	0212                	slli	tp,tp,0x4
    1cfe:	0000                	unimp
    1d00:	0019                	c.nop	6
    1d02:	008a                	slli	ra,ra,0x2
    1d04:	b491                	j	1748 <result+0x60>
    1d06:	067f                	0x67f
    1d08:	2432                	fld	fs0,264(sp)
    1d0a:	f0090f23          	sb	zero,-226(s2)
    1d0e:	1c1a                	slli	s8,s8,0x26
    1d10:	325d01f3          	0x325d01f3
    1d14:	2324                	fld	fs1,64(a4)
    1d16:	1af0090f          	0x1af0090f
    1d1a:	201c                	fld	fa5,0(s0)
    1d1c:	0002                	c.slli64	zero
    1d1e:	c000                	sw	s0,0(s0)
    1d20:	0002                	c.slli64	zero
    1d22:	0200                	addi	s0,sp,256
    1d24:	7200                	flw	fs0,32(a2)
	...
    1d2e:	1e00                	addi	s0,sp,816
    1d30:	0001                	nop
    1d32:	7a00                	flw	fs0,48(a2)
    1d34:	0001                	nop
    1d36:	0100                	addi	s0,sp,128
    1d38:	6900                	flw	fs0,16(a0)
    1d3a:	017a                	slli	sp,sp,0x1e
    1d3c:	0000                	unimp
    1d3e:	0182                	c.slli64	gp
    1d40:	0000                	unimp
    1d42:	7f820003          	lb	zero,2040(tp) # ffff77f8 <_stack_start+0xfffe77f8>
    1d46:	829f 0001 d600      	0xd6000001829f
    1d4c:	0001                	nop
    1d4e:	0100                	addi	s0,sp,128
    1d50:	6900                	flw	fs0,16(a0)
    1d52:	01d6                	slli	gp,gp,0x15
    1d54:	0000                	unimp
    1d56:	0202                	c.slli64	tp
    1d58:	0000                	unimp
    1d5a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18a>
    1d5e:	029f 0002 2000      	0x20000002029f
    1d64:	0002                	c.slli64	zero
    1d66:	0600                	addi	s0,sp,768
    1d68:	f300                	fsw	fs0,32(a4)
    1d6a:	5d01                	li	s10,-32
    1d6c:	1c31                	addi	s8,s8,-20
    1d6e:	209f 0002 c000      	0xc0000002209f
    1d74:	0002                	c.slli64	zero
    1d76:	0300                	addi	s0,sp,384
    1d78:	8200                	0x8200
    1d7a:	9f7f                	0x9f7f
	...
    1d84:	00ca                	slli	ra,ra,0x12
    1d86:	0000                	unimp
    1d88:	020e                	slli	tp,tp,0x3
    1d8a:	0000                	unimp
    1d8c:	0001                	nop
    1d8e:	0e68                	addi	a0,sp,796
    1d90:	0002                	c.slli64	zero
    1d92:	2000                	fld	fs0,0(s0)
    1d94:	0002                	c.slli64	zero
    1d96:	0b00                	addi	s0,sp,400
    1d98:	9100                	0x9100
    1d9a:	7fb4                	flw	fa3,120(a5)
    1d9c:	f306                	fsw	ft1,164(sp)
    1d9e:	5d01                	li	s10,-32
    1da0:	3122                	fld	ft2,40(sp)
    1da2:	9f1c                	0x9f1c
    1da4:	0220                	addi	s0,sp,264
    1da6:	0000                	unimp
    1da8:	02c0                	addi	s0,sp,324
    1daa:	0000                	unimp
    1dac:	0001                	nop
    1dae:	0068                	addi	a0,sp,12
    1db0:	0000                	unimp
    1db2:	0000                	unimp
    1db4:	0000                	unimp
    1db6:	1e00                	addi	s0,sp,816
    1db8:	0001                	nop
    1dba:	0800                	addi	s0,sp,16
    1dbc:	0002                	c.slli64	zero
    1dbe:	0100                	addi	s0,sp,128
    1dc0:	6500                	flw	fs0,8(a0)
    1dc2:	0208                	addi	a0,sp,256
    1dc4:	0000                	unimp
    1dc6:	0220                	addi	s0,sp,264
    1dc8:	0000                	unimp
    1dca:	b4910007          	0xb4910007
    1dce:	067f                	0x67f
    1dd0:	1c31                	addi	s8,s8,-20
    1dd2:	209f 0002 c000      	0xc0000002209f
    1dd8:	0002                	c.slli64	zero
    1dda:	0100                	addi	s0,sp,128
    1ddc:	6500                	flw	fs0,8(a0)
	...
    1de6:	011e                	slli	sp,sp,0x7
    1de8:	0000                	unimp
    1dea:	017a                	slli	sp,sp,0x1e
    1dec:	0000                	unimp
    1dee:	0001                	nop
    1df0:	7a69                	lui	s4,0xffffa
    1df2:	0001                	nop
    1df4:	8200                	0x8200
    1df6:	0001                	nop
    1df8:	0300                	addi	s0,sp,384
    1dfa:	8200                	0x8200
    1dfc:	9f7f                	0x9f7f
    1dfe:	0182                	c.slli64	gp
    1e00:	0000                	unimp
    1e02:	01d6                	slli	gp,gp,0x15
    1e04:	0000                	unimp
    1e06:	0001                	nop
    1e08:	d669                	beqz	a2,1dd2 <random_keys+0x302>
    1e0a:	0001                	nop
    1e0c:	0200                	addi	s0,sp,256
    1e0e:	0002                	c.slli64	zero
    1e10:	0300                	addi	s0,sp,384
    1e12:	8200                	0x8200
    1e14:	9f7f                	0x9f7f
    1e16:	0202                	c.slli64	tp
    1e18:	0000                	unimp
    1e1a:	0220                	addi	s0,sp,264
    1e1c:	0000                	unimp
    1e1e:	0006                	c.slli	zero,0x1
    1e20:	315d01f3          	0x315d01f3
    1e24:	9f1c                	0x9f1c
    1e26:	0220                	addi	s0,sp,264
    1e28:	0000                	unimp
    1e2a:	02c0                	addi	s0,sp,324
    1e2c:	0000                	unimp
    1e2e:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x18a>
    1e32:	009f 0000 0000      	0x9f
    1e38:	0000                	unimp
    1e3a:	9200                	0x9200
    1e3c:	0000                	unimp
    1e3e:	9800                	0x9800
    1e40:	0000                	unimp
    1e42:	0100                	addi	s0,sp,128
    1e44:	5c00                	lw	s0,56(s0)
    1e46:	0098                	addi	a4,sp,64
    1e48:	0000                	unimp
    1e4a:	00b4                	addi	a3,sp,72
    1e4c:	0000                	unimp
    1e4e:	0004                	0x4
    1e50:	9f5c01f3          	0x9f5c01f3
	...
    1e5c:	0092                	slli	ra,ra,0x4
    1e5e:	0000                	unimp
    1e60:	009c                	addi	a5,sp,64
    1e62:	0000                	unimp
    1e64:	0002                	c.slli64	zero
    1e66:	9f30                	0x9f30
    1e68:	009c                	addi	a5,sp,64
    1e6a:	0000                	unimp
    1e6c:	00b4                	addi	a3,sp,72
    1e6e:	0000                	unimp
    1e70:	0001                	nop
    1e72:	005f 0000 0000      	0x5f
    1e78:	0000                	unimp
    1e7a:	a600                	fsd	fs0,8(a2)
    1e7c:	0000                	unimp
    1e7e:	ac00                	fsd	fs0,24(s0)
    1e80:	0000                	unimp
    1e82:	0600                	addi	s0,sp,768
    1e84:	7b00                	flw	fs0,48(a4)
    1e86:	7e00                	flw	fs0,56(a2)
    1e88:	2200                	fld	fs0,0(a2)
    1e8a:	ac9f 0000 b000      	0xb0000000ac9f
    1e90:	0000                	unimp
    1e92:	0100                	addi	s0,sp,128
    1e94:	5e00                	lw	s0,56(a2)
	...
    1e9e:	00a6                	slli	ra,ra,0x9
    1ea0:	0000                	unimp
    1ea2:	00aa                	slli	ra,ra,0xa
    1ea4:	0000                	unimp
    1ea6:	0006                	c.slli	zero,0x1
    1ea8:	007a                	c.slli	zero,0x1e
    1eaa:	007e                	c.slli	zero,0x1f
    1eac:	9f22                	add	t5,t5,s0
    1eae:	00aa                	slli	ra,ra,0xa
    1eb0:	0000                	unimp
    1eb2:	00b0                	addi	a2,sp,72
    1eb4:	0000                	unimp
    1eb6:	0001                	nop
    1eb8:	005d                	c.nop	23
    1eba:	0000                	unimp
    1ebc:	0000                	unimp
    1ebe:	0000                	unimp
    1ec0:	8c00                	0x8c00
    1ec2:	0000                	unimp
    1ec4:	9000                	0x9000
    1ec6:	0000                	unimp
    1ec8:	0100                	addi	s0,sp,128
    1eca:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0ce2                	slli	s9,s9,0x18
  16:	0000                	unimp
  18:	0f6a                	slli	t5,t5,0x1a
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	19f1                	addi	s3,s3,-4
  30:	0000                	unimp
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d6e                	slli	s10,s10,0x1b
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0d6e                	slli	s10,s10,0x1b
   6:	0000                	unimp
   8:	0f6a                	slli	t5,t5,0x1a
   a:	0000                	unimp
   c:	10a2                	slli	ra,ra,0x28
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0d6e                	slli	s10,s10,0x1b
  22:	0000                	unimp
  24:	0de4                	addi	s1,sp,732
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2769                	jal	78a <ext_euclid+0x11c>
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xbc>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0xa0>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x34>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x116>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xca>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x86>
}
      a0:	0065                	c.nop	25
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_equ+0x1e>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
      b8:	6564                	flw	fs1,76(a0)
      ba:	2e66                	fld	ft8,88(sp)
    int line[size_b][size_a + size_b];
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
    int line[size_b][size_a + size_b];
      c6:	00682e73          	csrrs	t3,0x6,a6
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0x102>
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
    int line[size_b][size_a + size_b];
      ea:	0300                	addi	s0,sp,384
    int pola[size_a];
      ec:	0000                	unimp
      ee:	623c                	flw	fa5,64(a2)
    int line[size_b][size_a + size_b];
      f0:	6975                	lui	s2,0x1d
    int pola[size_a];
      f2:	746c                	flw	fa1,108(s0)
    int line[size_b][size_a + size_b];
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
    int pola[size_a];
      f8:	0000                	unimp
    int line[size_b][size_a + size_b];
      fa:	0000                	unimp
    int pola[size_a];
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
    int polb[size_b];
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
    int pola[size_a];
     106:	05010e03          	lb	t3,80(sp)
    int polb[size_b];
     10a:	0305                	addi	t1,t1,1
            line[i][j] = 0;
     10c:	0906                	slli	s2,s2,0x1
     10e:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     110:	0301                	addi	t1,t1,0
     112:	0909                	addi	s2,s2,2
    int pola[size_a];
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     118:	0601                	addi	a2,a2,0
    int line[size_b][size_a + size_b];
     11a:	00090203          	lb	tp,0(s2) # b000 <_stack_len+0x7000>
    int polb[size_b];
     11e:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     120:	2c05                	jal	350 <polymult2+0x90>
     122:	0306                	slli	t1,t1,0x1
     124:	0901                	addi	s2,s2,0
    for (i = 0; i < size_b; ++i){
     126:	0002                	c.slli64	zero
     128:	0501                	addi	a0,a0,0
            product[j] = 0;
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
     12e:	0000                	unimp
     130:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     132:	0305                	addi	t1,t1,1
     134:	0901                	addi	s2,s2,0
    array_equ(pola,a,size_a);
     136:	0000                	unimp
     138:	0501                	addi	a0,a0,0
     13a:	0616                	slli	a2,a2,0x5
     13c:	00090003          	lb	zero,0(s2)
     140:	0100                	addi	s0,sp,128
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
    for (i = 0; i < size_a; ++i){
     148:	0100                	addi	s0,sp,128
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
     14e:	0104                	addi	s1,sp,128
     150:	0306                	slli	t1,t1,0x1
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
    array_equ(polb,b,size_b);
     156:	0501                	addi	a0,a0,0
     158:	0005                	c.nop	1
     15a:	0402                	c.slli64	s0
     15c:	0601                	addi	a2,a2,0
    for (i = 0; i < size_b; ++i){
     15e:	00090003          	lb	zero,0(s2)
     162:	0100                	addi	s0,sp,128
     164:	0105                	addi	sp,sp,1
    if(star_mult == 1){
     166:	04090303          	lb	t1,64(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
        for (j = size_b -1; j >= 0; j = j-1){
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
            for (k = size_a-1; k >= 0; k = k-1 ){
     17e:	09710303          	lb	t1,151(sp)
            product[j] = 0;
     182:	0004                	0x4
     184:	0001                	nop
     186:	0402                	c.slli64	s0
            line[i][j] = 0;
     188:	09090303          	lb	t1,144(s2)
            product[j] = 0;
     18c:	000a                	c.slli	zero,0x2
     18e:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     190:	001a                	c.slli	zero,0x6
     192:	0402                	c.slli64	s0
     194:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
    for (i = 0; i < size_b; ++i){
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
        for(j = 0; j < size_a + size_b -1; ++j){
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
            pola[i] = pola[i] + mod;
     1a4:	0009                	c.nop	2
     1a6:	0100                	addi	s0,sp,128
        while (pola[i] < 0){
     1a8:	4e05                	li	t3,1
     1aa:	0306                	slli	t1,t1,0x1
     1ac:	0909                	addi	s2,s2,2
        pola[i] = pola[i] % mod;
     1ae:	0004                	0x4
     1b0:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     1b2:	0305                	addi	t1,t1,1
     1b4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
        pola[i] = pola[i] % mod;
     1b8:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     1ba:	064e                	slli	a2,a2,0x13
            polb[i] = polb[i] + mod;
     1bc:	00097d03          	0x97d03
        while (polb[i] < 0){
     1c0:	0100                	addi	s0,sp,128
     1c2:	1d05                	addi	s10,s10,-31
     1c4:	08090303          	lb	t1,128(s2)
        polb[i] = polb[i] % mod;
     1c8:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     1ca:	4e05                	li	t3,1
     1cc:	06097d03          	0x6097d03
        polb[i] = polb[i] % mod;
     1d0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     1d2:	0905                	addi	s2,s2,1
    if(star_mult == 1){
     1d4:	04090303          	lb	t1,64(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     1d8:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     1da:	4e05                	li	t3,1
    for (i = 0; i < size_b; ++i){
     1dc:	0c097d03          	0xc097d03
     1e0:	0100                	addi	s0,sp,128
     1e2:	14090003          	lb	zero,320(s2)
     1e6:	0100                	addi	s0,sp,128
     1e8:	0905                	addi	s2,s2,1
    for(j = 0; j < size_a + size_b -1; ++j){
     1ea:	04090303          	lb	t1,64(s2)
     1ee:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     1f0:	02090303          	lb	t1,32(s2)
     1f4:	0100                	addi	s0,sp,128
}
     1f6:	04097d03          	0x4097d03
     1fa:	0100                	addi	s0,sp,128
     1fc:	02090303          	lb	t1,32(s2)
     200:	0100                	addi	s0,sp,128
     202:	02097d03          	0x2097d03
     206:	0100                	addi	s0,sp,128
     208:	04090303          	lb	t1,64(s2)
     20c:	0100                	addi	s0,sp,128
     20e:	02097d03          	0x2097d03
     212:	0100                	addi	s0,sp,128
     214:	02090303          	lb	t1,32(s2)
     218:	0100                	addi	s0,sp,128
     21a:	04090103          	lb	sp,64(s2)
     21e:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     220:	06097f03          	0x6097f03
     224:	0100                	addi	s0,sp,128
     226:	02090103          	lb	sp,32(s2)
     22a:	0100                	addi	s0,sp,128
     22c:	1405                	addi	s0,s0,-31
     22e:	04090503          	lb	a0,64(s2)
     232:	0100                	addi	s0,sp,128
     234:	4e05                	li	t3,1
     236:	04097403          	0x4097403
            for (k = size_a-1; k >= 0; k = k-1 ){
     23a:	0100                	addi	s0,sp,128
        for (j = size_b -1; j >= 0; j = j-1){
     23c:	0905                	addi	s2,s2,1
     23e:	04090603          	lb	a2,64(s2)
     242:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     244:	4e05                	li	t3,1
     246:	04097a03          	0x4097a03
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     24a:	0100                	addi	s0,sp,128
     24c:	0905                	addi	s2,s2,1
     24e:	02090303          	lb	t1,32(s2)
     252:	0100                	addi	s0,sp,128
     254:	0505                	addi	a0,a0,1
     256:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0901                	addi	s2,s2,0
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     25a:	0004                	0x4
     25c:	0301                	addi	t1,t1,0
     25e:	0901                	addi	s2,s2,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	0000                	unimp
     262:	0301                	addi	t1,t1,0
        for (j = size_b -1; j >= 0; j = j-1){
     264:	0901                	addi	s2,s2,0
     266:	0000                	unimp
     268:	0301                	addi	t1,t1,0
     26a:	0901                	addi	s2,s2,0
            line[i][j] = line[i][j] % mod;
     26c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     26e:	0501                	addi	a0,a0,0
     270:	0609                	addi	a2,a2,2
            line[i][j] = line[i][j] % mod;
     272:	00090003          	lb	zero,0(s2)
     276:	0100                	addi	s0,sp,128
     278:	0505                	addi	a0,a0,1
        for(j = 0; j < size_a + size_b -1; ++j){
     27a:	0306                	slli	t1,t1,0x1
     27c:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
    for (i = 0; i < size_b; ++i){
     280:	0501                	addi	a0,a0,0
     282:	0614                	addi	a3,sp,768
     284:	00090203          	lb	tp,0(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     288:	0100                	addi	s0,sp,128
            product[j] += line[i][j];
     28a:	0505                	addi	a0,a0,1
     28c:	06097e03          	0x6097e03
     290:	0100                	addi	s0,sp,128
     292:	0c05                	addi	s8,s8,1
        for(i = 0; i < size_b; ++i){
     294:	02090003          	lb	zero,32(s2)
            product[j] += line[i][j];
     298:	0100                	addi	s0,sp,128
     29a:	1805                	addi	a6,a6,-31
     29c:	02090303          	lb	t1,32(s2)
     2a0:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     2a2:	1105                	addi	sp,sp,-31
     2a4:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     2a6:	0104                	addi	s1,sp,128
     2a8:	0306                	slli	t1,t1,0x1
     2aa:	097d                	addi	s2,s2,31
        for(i = 0; i < size_b; ++i){
     2ac:	0008                	0x8
     2ae:	0501                	addi	a0,a0,0
        product[j] = product[j] % mod;
     2b0:	0005                	c.nop	1
    for(j = 0; j < size_a + size_b -1; ++j){
     2b2:	0402                	c.slli64	s0
     2b4:	0601                	addi	a2,a2,0
        product[j] = product[j] % mod;
     2b6:	00090003          	lb	zero,0(s2)
     2ba:	0100                	addi	s0,sp,128
     2bc:	04090703          	lb	a4,64(s2)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c0:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     2c2:	0306                	slli	t1,t1,0x1
     2c4:	0900                	addi	s0,sp,144
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2c6:	000a                	c.slli	zero,0x2
     2c8:	0301                	addi	t1,t1,0
     2ca:	0902                	c.slli64	s2
     2cc:	0006                	c.slli	zero,0x1
     2ce:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     2d0:	060c                	addi	a1,sp,768
     2d2:	0a090003          	lb	zero,160(s2)
     2d6:	0100                	addi	s0,sp,128
     2d8:	1105                	addi	sp,sp,-31
     2da:	0200                	addi	s0,sp,256
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2dc:	0104                	addi	s1,sp,128
     2de:	0306                	slli	t1,t1,0x1
     2e0:	0900                	addi	s0,sp,144
     2e2:	0002                	c.slli64	zero
     2e4:	0501                	addi	a0,a0,0
     2e6:	0005                	c.nop	1
     2e8:	0402                	c.slli64	s0
     2ea:	0601                	addi	a2,a2,0
     2ec:	00090003          	lb	zero,0(s2)
     2f0:	0100                	addi	s0,sp,128
     2f2:	0306                	slli	t1,t1,0x1
    int line[size_b][size_a + size_b];
     2f4:	00040907          	0x40907
     2f8:	0301                	addi	t1,t1,0
    int pola[size_a];
     2fa:	0902                	c.slli64	s2
     2fc:	0008                	0x8
     2fe:	0501                	addi	a0,a0,0
     300:	060c                	addi	a1,sp,768
    int line[size_b][size_a + size_b];
     302:	02090003          	lb	zero,32(s2)
    int pola[size_a];
     306:	0100                	addi	s0,sp,128
    int polb[size_b];
     308:	1105                	addi	sp,sp,-31
     30a:	0200                	addi	s0,sp,256
     30c:	0104                	addi	s1,sp,128
    int pola[size_a];
     30e:	0306                	slli	t1,t1,0x1
    int polb[size_b];
     310:	0900                	addi	s0,sp,144
     312:	0002                	c.slli64	zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     314:	0501                	addi	a0,a0,0
     316:	0005                	c.nop	1
    int line[size_b][size_a + size_b];
     318:	0402                	c.slli64	s0
     31a:	0601                	addi	a2,a2,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     31c:	00090003          	lb	zero,0(s2)
    int pola[size_a];
     320:	0100                	addi	s0,sp,128
    int polb[size_b];
     322:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_b; ++i){
     324:	0004090b          	0x4090b
     328:	0501                	addi	a0,a0,0
            product2[j] = 0;
     32a:	00030607          	0x30607
     32e:	0009                	c.nop	2
     330:	0100                	addi	s0,sp,128
    for (i = 0; i < size_b; ++i){
     332:	1d05                	addi	s10,s10,-31
     334:	0200                	addi	s0,sp,256
    array_equ(pola,a,size_a);
     336:	0104                	addi	s1,sp,128
     338:	0306                	slli	t1,t1,0x1
     33a:	0908                	addi	a0,sp,144
     33c:	0014                	0x14
     33e:	0501                	addi	a0,a0,0
     340:	0009                	c.nop	2
    array_equ(polb,b,size_b);
     342:	0402                	c.slli64	s0
     344:	0601                	addi	a2,a2,0
     346:	00090003          	lb	zero,0(s2)
     34a:	0100                	addi	s0,sp,128
     34c:	1405                	addi	s0,s0,-31
    if(star_mult == 1){
     34e:	04090103          	lb	sp,64(s2)
     352:	0100                	addi	s0,sp,128
     354:	0d05                	addi	s10,s10,1
     356:	0200                	addi	s0,sp,256
     358:	0304                	addi	s1,sp,384
     35a:	0306                	slli	t1,t1,0x1
     35c:	095c                	addi	a5,sp,148
     35e:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     360:	0501                	addi	a0,a0,0
     362:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
     364:	0402                	c.slli64	s0
     366:	01030603          	lb	a2,16(t1)
            product2[j] = 0;
     36a:	0009                	c.nop	2
     36c:	0100                	addi	s0,sp,128
            line[i][j] = 0;
     36e:	0200                	addi	s0,sp,256
     370:	0304                	addi	s1,sp,384
            product2[j] = 0;
     372:	06097f03          	0x6097f03
        for(j = 0; j < size_a + size_b -1; ++j){
     376:	0100                	addi	s0,sp,128
     378:	0d05                	addi	s10,s10,1
     37a:	0200                	addi	s0,sp,256
     37c:	0304                	addi	s1,sp,384
    for (i = 0; i < size_b; ++i){
     37e:	0306                	slli	t1,t1,0x1
     380:	0901                	addi	s2,s2,0
     382:	0004                	0x4
     384:	0501                	addi	a0,a0,0
        for(j = 0; j < size_a + size_b -1; ++j){
     386:	0018                	0x18
     388:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     38a:	00030603          	lb	a2,0(t1)
     38e:	0009                	c.nop	2
     390:	0100                	addi	s0,sp,128
     392:	2c05                	jal	5c2 <polydiv+0x192>
     394:	0200                	addi	s0,sp,256
     396:	0304                	addi	s1,sp,384
     398:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     39a:	097e                	slli	s2,s2,0x1f
                line[size_b-1-j][k] = pola[k]*polb[j];
     39c:	0004                	0x4
     39e:	0501                	addi	a0,a0,0
     3a0:	0014                	0x14
            for (k = size_a-1; k >= 0; k = k-1 ){
     3a2:	0402                	c.slli64	s0
     3a4:	0301                	addi	t1,t1,0
        for (j = size_b -1; j >= 0; j = j-1){
     3a6:	0900                	addi	s0,sp,144
     3a8:	0004                	0x4
     3aa:	0501                	addi	a0,a0,0
     3ac:	0009                	c.nop	2
     3ae:	0402                	c.slli64	s0
        for(j=0;j<size_a+size_b-1;++j){
     3b0:	0601                	addi	a2,a2,0
    for(i=0;i<size_b;++i){
     3b2:	00090003          	lb	zero,0(s2)
     3b6:	0100                	addi	s0,sp,128
     3b8:	1d05                	addi	s10,s10,-31
     3ba:	0200                	addi	s0,sp,256
     3bc:	0204                	addi	s1,sp,256
     3be:	0306                	slli	t1,t1,0x1
        for(j=0;j<size_a+size_b-1;++j){
     3c0:	097f                	0x97f
     3c2:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c4:	0501                	addi	a0,a0,0
     3c6:	0103060f          	0x103060f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3ca:	0809                	addi	a6,a6,2
     3cc:	0100                	addi	s0,sp,128
     3ce:	0d05                	addi	s10,s10,1
     3d0:	0306                	slli	t1,t1,0x1
     3d2:	090a                	slli	s2,s2,0x2
     3d4:	0004                	0x4
     3d6:	0501                	addi	a0,a0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	061f 0003 0009      	0x90003061f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     3de:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     3e0:	1505                	addi	a0,a0,-31
     3e2:	02090003          	lb	zero,32(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     3e6:	0100                	addi	s0,sp,128
     3e8:	0f05                	addi	t5,t5,1
     3ea:	0306                	slli	t1,t1,0x1
            product2[j] += line[i][j];
     3ec:	097f                	0x97f
     3ee:	0002                	c.slli64	zero
        for(j=0;j<size_a+size_b-1;++j){
     3f0:	0501                	addi	a0,a0,0
     3f2:	0614                	addi	a3,sp,768
            product2[j] += line[i][j];
     3f4:	00090003          	lb	zero,0(s2)
     3f8:	0100                	addi	s0,sp,128
        for(j=0;j<size_a+size_b-1;++j){
     3fa:	0f05                	addi	t5,t5,1
     3fc:	02090003          	lb	zero,32(s2)
    for(i=0;i<size_b;++i){
     400:	0100                	addi	s0,sp,128
     402:	0905                	addi	s2,s2,1
     404:	0200                	addi	s0,sp,256
}
     406:	0204                	addi	s1,sp,256
     408:	0306                	slli	t1,t1,0x1
     40a:	00040903          	lb	s2,0(s0) # e000 <_stack>
     40e:	0501                	addi	a0,a0,0
     410:	0402001b          	0x402001b
     414:	0602                	c.slli64	a2
     416:	00090003          	lb	zero,0(s2)
     41a:	0100                	addi	s0,sp,128
     41c:	1d05                	addi	s10,s10,-31
     41e:	0200                	addi	s0,sp,256
     420:	0204                	addi	s1,sp,256
     422:	04097c03          	0x4097c03
     426:	0100                	addi	s0,sp,128
     428:	1105                	addi	sp,sp,-31
     42a:	0200                	addi	s0,sp,256
     42c:	0204                	addi	s1,sp,256
     42e:	04090403          	lb	s0,64(s2)
    int v[size_N];
     432:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     434:	1d05                	addi	s10,s10,-31
    int v[size_N];
     436:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     438:	0204                	addi	s1,sp,256
     43a:	0306                	slli	t1,t1,0x1
     43c:	097c                	addi	a5,sp,156
     43e:	0004                	0x4
     440:	0501                	addi	a0,a0,0
     442:	030d                	addi	t1,t1,3
     444:	0002090b          	0x2090b
     448:	0501                	addi	a0,a0,0
     44a:	061f 0003 0009      	0x90003061f
    int v[size_N];
     450:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     452:	1505                	addi	a0,a0,-31
     454:	02090003          	lb	zero,32(s2)
    int v[size_N];
     458:	0100                	addi	s0,sp,128
     45a:	0f05                	addi	t5,t5,1
    int q[size_N];
     45c:	0306                	slli	t1,t1,0x1
     45e:	097f                	0x97f
     460:	0002                	c.slli64	zero
    int num_temp[size_N];
     462:	0501                	addi	a0,a0,0
     464:	0614                	addi	a3,sp,768
    int denum_temp[size_D];
     466:	00090003          	lb	zero,0(s2)
     46a:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     46c:	0f05                	addi	t5,t5,1
    int denum_temp[size_D];
     46e:	02090003          	lb	zero,32(s2)
     472:	0100                	addi	s0,sp,128
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     474:	0905                	addi	s2,s2,1
     476:	0200                	addi	s0,sp,256
    int v[size_N];
     478:	0204                	addi	s1,sp,256
     47a:	0306                	slli	t1,t1,0x1
    array_equ(num_temp,num,size_N);
     47c:	00040903          	lb	s2,0(s0)
     480:	0501                	addi	a0,a0,0
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     482:	0402001b          	0x402001b
    int denum_temp[size_D];
     486:	0602                	c.slli64	a2
     488:	00090003          	lb	zero,0(s2)
     48c:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     48e:	1d05                	addi	s10,s10,-31
     490:	0200                	addi	s0,sp,256
     492:	0204                	addi	s1,sp,256
     494:	04097c03          	0x4097c03
  array_equ(denum_temp,denum,size_D);
     498:	0100                	addi	s0,sp,128
     49a:	1105                	addi	sp,sp,-31
     49c:	0200                	addi	s0,sp,256
     49e:	0204                	addi	s1,sp,256
    for (i = 0; i < size_D; ++i) {
     4a0:	04090403          	lb	s0,64(s2)
     4a4:	0100                	addi	s0,sp,128
     4a6:	1d05                	addi	s10,s10,-31
    for (i = 0; i < size_N; ++i){
     4a8:	0200                	addi	s0,sp,256
     4aa:	0204                	addi	s1,sp,256
     4ac:	0306                	slli	t1,t1,0x1
    for (i = size_D-1; i >= 0; i = i-1){
     4ae:	097c                	addi	a5,sp,156
     4b0:	0004                	0x4
     4b2:	0501                	addi	a0,a0,0
     4b4:	0b030607          	0xb030607
     4b8:	0209                	addi	tp,tp,2
    for (i = 0; i < size_N; ++i){
     4ba:	0100                	addi	s0,sp,128
     4bc:	1d05                	addi	s10,s10,-31
        if ( (b_N*u)%mod == 1 )
     4be:	0200                	addi	s0,sp,256
    for (u = 0; u < mod; ++u){
     4c0:	0104                	addi	s1,sp,128
     4c2:	0306                	slli	t1,t1,0x1
     4c4:	0901                	addi	s2,s2,0
     4c6:	0002                	c.slli64	zero
            num_temp[i] = num_temp[i] + mod;
     4c8:	0501                	addi	a0,a0,0
     4ca:	0009                	c.nop	2
        while (num_temp[i] < 0) {
     4cc:	0402                	c.slli64	s0
     4ce:	0601                	addi	a2,a2,0
     4d0:	00090003          	lb	zero,0(s2)
        num_temp[i] = num_temp[i] % mod;
     4d4:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4d6:	0f05                	addi	t5,t5,1
     4d8:	04091003          	lh	zero,64(s2)
        num_temp[i] = num_temp[i] % mod;
     4dc:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4de:	1105                	addi	sp,sp,-31
            denum_temp[i] = denum_temp[i] + mod;
     4e0:	0200                	addi	s0,sp,256
     4e2:	0104                	addi	s1,sp,128
        while (denum_temp[i] < 0) {
     4e4:	0306                	slli	t1,t1,0x1
     4e6:	097f                	0x97f
     4e8:	0002                	c.slli64	zero
        denum_temp[i] = denum_temp[i] % mod;
     4ea:	0501                	addi	a0,a0,0
     4ec:	0005                	c.nop	1
    for (i = 0; i < size_D; ++i) {
     4ee:	0402                	c.slli64	s0
     4f0:	0601                	addi	a2,a2,0
        denum_temp[i] = denum_temp[i] % mod;
     4f2:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_D; ++i) {
     4f6:	0100                	addi	s0,sp,128
        q[i] = 0;
     4f8:	0c090003          	lb	zero,192(s2)
     4fc:	0100                	addi	s0,sp,128
     4fe:	0b05                	addi	s6,s6,1
        v[i] = 0;
     500:	02090703          	lb	a4,32(s2)
        q[i] = 0;
     504:	0100                	addi	s0,sp,128
        v[i] = 0;
     506:	1005                	c.nop	-31
     508:	0200                	addi	s0,sp,256
    for (i = 0; i < size_N; ++i){
     50a:	0104                	addi	s1,sp,128
     50c:	0306                	slli	t1,t1,0x1
        if( denum_temp[i] != 0 )
     50e:	0900                	addi	s0,sp,144
    for (i = size_D-1; i >= 0; i = i-1){
     510:	0002                	c.slli64	zero
     512:	0501                	addi	a0,a0,0
        if ( (b_N*u)%mod == 1 )
     514:	0005                	c.nop	1
     516:	0402                	c.slli64	s0
     518:	0601                	addi	a2,a2,0
     51a:	00090003          	lb	zero,0(s2)
    for (u = 0; u < mod; ++u){
     51e:	0100                	addi	s0,sp,128
     520:	0b05                	addi	s6,s6,1
        if( num_temp[i] != 0 )
     522:	04090703          	lb	a4,64(s2)
    for (i = size_N-1; i >= 0; i = i-1){
     526:	0100                	addi	s0,sp,128
     528:	1005                	c.nop	-31
     52a:	0200                	addi	s0,sp,256
     52c:	0104                	addi	s1,sp,128
     52e:	0306                	slli	t1,t1,0x1
     530:	0900                	addi	s0,sp,144
    while (d >= d2){
     532:	0002                	c.slli64	zero
     534:	0501                	addi	a0,a0,0
    array_equ(result,q,size_N);
     536:	0005                	c.nop	1
     538:	0402                	c.slli64	s0
     53a:	0601                	addi	a2,a2,0
     53c:	00090003          	lb	zero,0(s2)
     540:	0100                	addi	s0,sp,128
     542:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     544:	0906                	slli	s2,s2,0x1
     546:	0004                	0x4
        result[i] = num_temp[i-size_N];
     548:	0301                	addi	t1,t1,0
     54a:	0902                	c.slli64	s2
     54c:	0000                	unimp
     54e:	0501                	addi	a0,a0,0
    for(i = size_N; i < (2*size_N); ++i){
     550:	0601                	addi	a2,a2,0
     552:	00090103          	lb	sp,0(s2)
}
     556:	0100                	addi	s0,sp,128
     558:	1105                	addi	sp,sp,-31
     55a:	0200                	addi	s0,sp,256
     55c:	0304                	addi	s1,sp,384
     55e:	0306                	slli	t1,t1,0x1
     560:	095c                	addi	a5,sp,148
     562:	002a                	c.slli	zero,0xa
     564:	0501                	addi	a0,a0,0
     566:	0025                	c.nop	9
     568:	0402                	c.slli64	s0
     56a:	00030603          	lb	a2,0(t1)
     56e:	0409                	addi	s0,s0,2
     570:	0100                	addi	s0,sp,128
     572:	2b05                	jal	aa2 <generate_keys+0x186>
     574:	0200                	addi	s0,sp,256
     576:	0304                	addi	s1,sp,384
     578:	04090003          	lb	zero,64(s2)
     57c:	0100                	addi	s0,sp,128
        v[(d-d2)] = u*r_d;
     57e:	2e05                	jal	8ae <ext_euclid+0x240>
     580:	0200                	addi	s0,sp,256
     582:	0304                	addi	s1,sp,384
     584:	02090003          	lb	zero,32(s2)
     588:	0100                	addi	s0,sp,128
     58a:	2a05                	jal	6ba <ext_euclid+0x4c>
        for (i = 0; i < size_N; ++i){
     58c:	0200                	addi	s0,sp,256
     58e:	0304                	addi	s1,sp,384
     590:	06097f03          	0x6097f03
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     594:	0100                	addi	s0,sp,128
     596:	2e05                	jal	8c6 <ext_euclid+0x258>
     598:	0200                	addi	s0,sp,256
     59a:	0304                	addi	s1,sp,384
     59c:	02090103          	lb	sp,32(s2)
     5a0:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     5a2:	2505                	jal	bc2 <generate_keys+0x2a6>
     5a4:	0200                	addi	s0,sp,256
     5a6:	0304                	addi	s1,sp,384
     5a8:	04090003          	lb	zero,64(s2)
        for (i = 0; i < size_N; ++i){
     5ac:	0100                	addi	s0,sp,128
     5ae:	2805                	jal	5de <polydiv+0x1ae>
     5b0:	0200                	addi	s0,sp,256
     5b2:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     5b4:	0306                	slli	t1,t1,0x1
     5b6:	097f                	0x97f
     5b8:	0002                	c.slli64	zero
     5ba:	0501                	addi	a0,a0,0
        for(i = 0; i < size_N; ++i){
     5bc:	0020                	addi	s0,sp,8
     5be:	0402                	c.slli64	s0
     5c0:	0301                	addi	t1,t1,0
        for (i = size_N-1; i >= 0; i = i-1){
     5c2:	0900                	addi	s0,sp,144
     5c4:	0000                	unimp
     5c6:	0501                	addi	a0,a0,0
     5c8:	000d                	c.nop	3
     5ca:	0402                	c.slli64	s0
     5cc:	0601                	addi	a2,a2,0
     5ce:	00090003          	lb	zero,0(s2)
     5d2:	0100                	addi	s0,sp,128
            v[i] = v[i] % mod;
     5d4:	2505                	jal	bf4 <generate_keys+0x2d8>
        for (i = 0; i < size_N; ++i){
     5d6:	0200                	addi	s0,sp,256
     5d8:	0204                	addi	s1,sp,256
            v[i] = v[i] % mod;
     5da:	0306                	slli	t1,t1,0x1
     5dc:	097f                	0x97f
     5de:	0004                	0x4
     5e0:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     5e2:	04020027          	0x4020027
                product[i] = product[i] + mod;
     5e6:	0602                	c.slli64	a2
            while (product[i] < 0) {
     5e8:	00090003          	lb	zero,0(s2)
     5ec:	0100                	addi	s0,sp,128
            product[i] = product[i] % mod;
     5ee:	1405                	addi	s0,s0,-31
     5f0:	08090103          	lb	sp,128(s2)
        for (i = 0; i < size_N; ++i){
     5f4:	0100                	addi	s0,sp,128
            product[i] = product[i] % mod;
     5f6:	1105                	addi	sp,sp,-31
     5f8:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5fa:	0304                	addi	s1,sp,384
            num_temp[i] = num_temp[i] - product[i];
     5fc:	0306                	slli	t1,t1,0x1
     5fe:	0908                	addi	a0,sp,144
     600:	0004                	0x4
     602:	0501                	addi	a0,a0,0
     604:	0029                	c.nop	10
        for (i = 0; i < size_N; ++i){
     606:	0402                	c.slli64	s0
     608:	00030603          	lb	a2,0(t1)
            num_temp[i] = num_temp[i] - product[i];
     60c:	0409                	addi	s0,s0,2
     60e:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     610:	2f05                	jal	d40 <ntru_deceypt+0x9a>
                num_temp[i] = num_temp[i] + mod;
     612:	0200                	addi	s0,sp,256
     614:	0304                	addi	s1,sp,384
            while (num_temp[i] < 0){
     616:	04090003          	lb	zero,64(s2)
     61a:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] % mod;
     61c:	3205                	jal	ffffff3c <_stack_start+0xfffeff3c>
     61e:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     620:	0304                	addi	s1,sp,384
     622:	02090003          	lb	zero,32(s2)
            num_temp[i] = num_temp[i] % mod;
     626:	0100                	addi	s0,sp,128
        for (i = 0; i < size_N; ++i){
     628:	2a05                	jal	758 <ext_euclid+0xea>
            q[i] = q[i] + v[i];
     62a:	0200                	addi	s0,sp,256
     62c:	0304                	addi	s1,sp,384
     62e:	06097f03          	0x6097f03
     632:	0100                	addi	s0,sp,128
        for(i = 0; i < size_N; ++i){
     634:	3205                	jal	ffffff54 <_stack_start+0xfffeff54>
     636:	0200                	addi	s0,sp,256
            q[i] = q[i] + v[i];
     638:	0304                	addi	s1,sp,384
            q[i] = q[i] % mod;
     63a:	02090103          	lb	sp,32(s2)
     63e:	0100                	addi	s0,sp,128
     640:	2905                	jal	a70 <generate_keys+0x154>
        for(i = 0; i < size_N; ++i){
     642:	0200                	addi	s0,sp,256
            if( num_temp[i] != 0 )
     644:	0304                	addi	s1,sp,384
        for (i = size_N-1; i >= 0; i = i-1){
     646:	04090003          	lb	zero,64(s2)
            v[i] = 0;
     64a:	0100                	addi	s0,sp,128
     64c:	2805                	jal	67c <ext_euclid+0xe>
     64e:	0200                	addi	s0,sp,256
     650:	0304                	addi	s1,sp,384
     652:	0306                	slli	t1,t1,0x1
        for (i = 0; i < size_N; ++i){
     654:	097f                	0x97f
     656:	0002                	c.slli64	zero
     658:	0501                	addi	a0,a0,0
     65a:	0020                	addi	s0,sp,8
        result[i] = num_temp[i-size_N];
     65c:	0402                	c.slli64	s0
     65e:	0301                	addi	t1,t1,0
     660:	0900                	addi	s0,sp,144
     662:	0000                	unimp
     664:	0501                	addi	a0,a0,0
     666:	000d                	c.nop	3
    for(i = size_N; i < (2*size_N); ++i){
     668:	0402                	c.slli64	s0
     66a:	0601                	addi	a2,a2,0
     66c:	00090003          	lb	zero,0(s2)
    int ri_2[size]; // MX-ring poly, a
     670:	0100                	addi	s0,sp,128
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     672:	2505                	jal	c92 <ntru_encyrpt+0x82>
    int ri_2[size]; // MX-ring poly, a
     674:	0200                	addi	s0,sp,256
     676:	0204                	addi	s1,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     678:	0306                	slli	t1,t1,0x1
     67a:	097f                	0x97f
     67c:	0004                	0x4
     67e:	0501                	addi	a0,a0,0
     680:	04020027          	0x4020027
     684:	0602                	c.slli64	a2
     686:	00090003          	lb	zero,0(s2)
     68a:	0100                	addi	s0,sp,128
     68c:	0d05                	addi	s10,s10,1
     68e:	0200                	addi	s0,sp,256
     690:	0304                	addi	s1,sp,384
     692:	0306                	slli	t1,t1,0x1
    int ri_2[size]; // MX-ring poly, a
     694:	090a                	slli	s2,s2,0x2
     696:	0008                	0x8
     698:	0501                	addi	a0,a0,0
    int ri_1[size]; // f-random poly, f[N] = 0, b
     69a:	0025                	c.nop	9
     69c:	0402                	c.slli64	s0
     69e:	00030603          	lb	a2,0(t1)
    int ri[size];
     6a2:	0009                	c.nop	2
     6a4:	0100                	addi	s0,sp,128
    int ti_1[size]; // ti_1[0] = 1
     6a6:	2c05                	jal	8d6 <ext_euclid+0x268>
     6a8:	0200                	addi	s0,sp,256
     6aa:	0304                	addi	s1,sp,384
    int ti[size];
     6ac:	02097f03          	0x2097f03
     6b0:	0100                	addi	s0,sp,128
    int qi_1[size];
     6b2:	2505                	jal	cd2 <ntru_deceypt+0x2c>
     6b4:	0200                	addi	s0,sp,256
     6b6:	0304                	addi	s1,sp,384
    int temp[size];
     6b8:	04090103          	lb	sp,64(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6bc:	0100                	addi	s0,sp,128
     6be:	1805                	addi	a6,a6,-31
     6c0:	0200                	addi	s0,sp,256
    int ri_2[size]; // MX-ring poly, a
     6c2:	0304                	addi	s1,sp,384
     6c4:	04090003          	lb	zero,64(s2)
    for (i = 0; i < size; ++i) {
     6c8:	0100                	addi	s0,sp,128
        ti_2[i] = 0;
     6ca:	2c05                	jal	8fa <ext_euclid+0x28c>
     6cc:	0200                	addi	s0,sp,256
     6ce:	0304                	addi	s1,sp,384
     6d0:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size; ++i) {
     6d2:	097f                	0x97f
     6d4:	0004                	0x4
    array_equ(ri_2,polyR,size);
     6d6:	0501                	addi	a0,a0,0
     6d8:	0014                	0x14
     6da:	0402                	c.slli64	s0
     6dc:	0301                	addi	t1,t1,0
    array_equ(ri_1,polyf,size);
     6de:	0900                	addi	s0,sp,144
     6e0:	0000                	unimp
     6e2:	0501                	addi	a0,a0,0
     6e4:	0009                	c.nop	2
    ti_1[0] = 1;
     6e6:	0402                	c.slli64	s0
     6e8:	0601                	addi	a2,a2,0
     6ea:	00090003          	lb	zero,0(s2)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     6ee:	0100                	addi	s0,sp,128
     6f0:	1d05                	addi	s10,s10,-31
     6f2:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     6f4:	0204                	addi	s1,sp,256
     6f6:	0306                	slli	t1,t1,0x1
        ti_2[i] = 0;
     6f8:	097f                	0x97f
     6fa:	0004                	0x4
     6fc:	0501                	addi	a0,a0,0
     6fe:	0103060f          	0x103060f
     702:	0809                	addi	a6,a6,2
     704:	0100                	addi	s0,sp,128
        ti_1[i] = 0;
     706:	0d05                	addi	s10,s10,1
     708:	0200                	addi	s0,sp,256
    for (i = 0; i < size; ++i) {
     70a:	0304                	addi	s1,sp,384
     70c:	0306                	slli	t1,t1,0x1
                ri_2[i] = ri_2[i] + mod;
     70e:	0908                	addi	a0,sp,144
     710:	0004                	0x4
            while (ri_2[i] < 0) {
     712:	0501                	addi	a0,a0,0
     714:	0022                	c.slli	zero,0x8
     716:	0402                	c.slli64	s0
            ri_2[i] = ri_2[i] % mod;
     718:	00030603          	lb	a2,0(t1)
        for (i = 0; i < N + 1; ++i) {
     71c:	0009                	c.nop	2
            ri_2[i] = ri_2[i] % mod;
     71e:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     720:	1805                	addi	a6,a6,-31
     722:	0200                	addi	s0,sp,256
     724:	0304                	addi	s1,sp,384
     726:	04090003          	lb	zero,64(s2)
     72a:	0100                	addi	s0,sp,128
     72c:	2205                	jal	84c <ext_euclid+0x1de>
        for (i = 0; i < N + 1; ++i) {
     72e:	0200                	addi	s0,sp,256
     730:	0304                	addi	s1,sp,384
     732:	02090003          	lb	zero,32(s2)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     736:	0100                	addi	s0,sp,128
     738:	2005                	jal	758 <ext_euclid+0xea>
     73a:	0200                	addi	s0,sp,256
     73c:	0304                	addi	s1,sp,384
     73e:	04097f03          	0x4097f03
        for (i = N + 1; i < (2 * N + 2); ++i) {
     742:	0100                	addi	s0,sp,128
     744:	2205                	jal	864 <ext_euclid+0x1f6>
     746:	0200                	addi	s0,sp,256
     748:	0304                	addi	s1,sp,384
     74a:	02090103          	lb	sp,32(s2)
        for (i = 0; i < N + 1; ++i) {
     74e:	0100                	addi	s0,sp,128
     750:	1805                	addi	a6,a6,-31
     752:	0200                	addi	s0,sp,256
     754:	0304                	addi	s1,sp,384
     756:	06090003          	lb	zero,96(s2)
        for (i = 0; i < N + 1; ++i) {
     75a:	0100                	addi	s0,sp,128
     75c:	2005                	jal	77c <ext_euclid+0x10e>
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     75e:	0200                	addi	s0,sp,256
     760:	0304                	addi	s1,sp,384
     762:	0306                	slli	t1,t1,0x1
     764:	097f                	0x97f
     766:	0006                	c.slli	zero,0x1
     768:	0501                	addi	a0,a0,0
     76a:	0014                	0x14
    array_equ(qi_1,res1,size);
     76c:	0402                	c.slli64	s0
     76e:	0301                	addi	t1,t1,0
     770:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     772:	0000                	unimp
     774:	0501                	addi	a0,a0,0
     776:	0009                	c.nop	2
     778:	0402                	c.slli64	s0
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     77a:	0601                	addi	a2,a2,0
     77c:	00090003          	lb	zero,0(s2)
     780:	0100                	addi	s0,sp,128
     782:	2805                	jal	7b2 <ext_euclid+0x144>
     784:	0200                	addi	s0,sp,256
     786:	0204                	addi	s1,sp,256
     788:	0306                	slli	t1,t1,0x1
    array_equ(temp,res2,size);
     78a:	097f                	0x97f
     78c:	0004                	0x4
     78e:	0501                	addi	a0,a0,0
        for (i = 0; i < N + 1; ++i) {
     790:	0103060f          	0x103060f
     794:	0609                	addi	a2,a2,2
     796:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     798:	0905                	addi	s2,s2,1
     79a:	0200                	addi	s0,sp,256
     79c:	0304                	addi	s1,sp,384
     79e:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     7a0:	00040907          	0x40907
     7a4:	0501                	addi	a0,a0,0
array_equ(ri_2,ri_1,size);
     7a6:	0021                	c.nop	8
     7a8:	0402                	c.slli64	s0
     7aa:	00030603          	lb	a2,0(t1)
array_equ(ri_1,ri,size);
     7ae:	0009                	c.nop	2
     7b0:	0100                	addi	s0,sp,128
     7b2:	2805                	jal	7e2 <ext_euclid+0x174>
     7b4:	0200                	addi	s0,sp,256
array_equ(ti_2,ti_1,size);
     7b6:	0304                	addi	s1,sp,384
     7b8:	02097f03          	0x2097f03
     7bc:	0100                	addi	s0,sp,128
     7be:	2105                	jal	bde <generate_keys+0x2c2>
     7c0:	0200                	addi	s0,sp,256
     7c2:	0304                	addi	s1,sp,384
array_equ(ti_1,ti,size);
     7c4:	04090103          	lb	sp,64(s2)
     7c8:	0100                	addi	s0,sp,128
     7ca:	1405                	addi	s0,s0,-31
        controlR = 0;
     7cc:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     7ce:	0304                	addi	s1,sp,384
     7d0:	04090003          	lb	zero,64(s2)
    while (controlR != 0) {
     7d4:	0100                	addi	s0,sp,128
     7d6:	2805                	jal	806 <ext_euclid+0x198>
        for (j = 0; j < mod; ++j) {
     7d8:	0200                	addi	s0,sp,256
            if (((ri_2[0] * j) % mod) == 1)
     7da:	0304                	addi	s1,sp,384
        for (j = 0; j < mod; ++j) {
     7dc:	0306                	slli	t1,t1,0x1
     7de:	097f                	0x97f
     7e0:	0004                	0x4
     7e2:	0501                	addi	a0,a0,0
     7e4:	0346                	slli	t1,t1,0x11
     7e6:	0002090b          	0x2090b
        for (i = 0; i < N + 1; ++i) {
     7ea:	0501                	addi	a0,a0,0
    }
     7ec:	0305                	addi	t1,t1,1
     7ee:	0902                	c.slli64	s2
     7f0:	0000                	unimp
     7f2:	0501                	addi	a0,a0,0
     7f4:	0646                	slli	a2,a2,0x11
     7f6:	00097e03          	0x97e03
     7fa:	0100                	addi	s0,sp,128
     7fc:	1d05                	addi	s10,s10,-31
     7fe:	02090203          	lb	tp,32(s2)
     802:	0100                	addi	s0,sp,128
     804:	4605                	li	a2,1
     806:	04097e03          	0x4097e03
     80a:	0100                	addi	s0,sp,128
     80c:	0905                	addi	s2,s2,1
     80e:	0a090203          	lb	tp,160(s2)
     812:	0100                	addi	s0,sp,128
     814:	4605                	li	a2,1
                ri_1[i] = ri_1[i] + mod;
     816:	0c097e03          	0xc097e03
            while (ri_1[i] < 0) {
     81a:	0100                	addi	s0,sp,128
     81c:	0905                	addi	s2,s2,1
     81e:	12090203          	lb	tp,288(s2)
            ri_1[i] = ri_1[i] % mod;
     822:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     824:	4605                	li	a2,1
     826:	02097e03          	0x2097e03
            ri_1[i] = ri_1[i] % mod;
     82a:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     82c:	0905                	addi	s2,s2,1
            ri[i - (N + 1)] = res[i];
     82e:	04090203          	lb	tp,64(s2)
     832:	0100                	addi	s0,sp,128
     834:	4605                	li	a2,1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     836:	02097e03          	0x2097e03
            ri[i - (N + 1)] = res[i];
     83a:	0100                	addi	s0,sp,128
     83c:	0905                	addi	s2,s2,1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     83e:	00090203          	lb	tp,0(s2)
            temp[i] = ri_2[i] - ri[i];
     842:	0100                	addi	s0,sp,128
     844:	04090303          	lb	t1,64(s2)
     848:	0100                	addi	s0,sp,128
     84a:	08097d03          	0x8097d03
     84e:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     850:	02090303          	lb	t1,32(s2)
            temp[i] = ri_2[i] - ri[i];
     854:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     856:	04090103          	lb	sp,64(s2)
                temp[i] = temp[i] + mod;
     85a:	0100                	addi	s0,sp,128
     85c:	06097f03          	0x6097f03
            while (temp[i] < 0) {
     860:	0100                	addi	s0,sp,128
     862:	02090103          	lb	sp,32(s2)
            temp[i] = temp[i] % mod;
     866:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     868:	4605                	li	a2,1
     86a:	04097a03          	0x4097a03
            temp[i] = temp[i] % mod;
     86e:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     870:	0905                	addi	s2,s2,1
                qi_1[i] = qi_1[i] + mod;
     872:	04090203          	lb	tp,64(s2)
            while (qi_1[i] < 0) {
     876:	0100                	addi	s0,sp,128
     878:	0505                	addi	a0,a0,1
     87a:	0306                	slli	t1,t1,0x1
            qi_1[i] = qi_1[i] % mod;
     87c:	0901                	addi	s2,s2,0
     87e:	0004                	0x4
        for (i = 0; i < N + 1; ++i) {
     880:	0301                	addi	t1,t1,0
     882:	0901                	addi	s2,s2,0
            qi_1[i] = qi_1[i] % mod;
     884:	0000                	unimp
     886:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     888:	0901                	addi	s2,s2,0
                temp[i] = temp[i] + mod;
     88a:	0000                	unimp
     88c:	0501                	addi	a0,a0,0
     88e:	0646                	slli	a2,a2,0x11
            while (temp[i] < 0) {
     890:	00097b03          	0x97b03
     894:	0100                	addi	s0,sp,128
     896:	0905                	addi	s2,s2,1
            temp[i] = temp[i] % mod;
     898:	02090503          	lb	a0,32(s2)
        for (i = 0; i < N + 1; ++i) {
     89c:	0100                	addi	s0,sp,128
     89e:	0505                	addi	a0,a0,1
            temp[i] = temp[i] % mod;
     8a0:	0306                	slli	t1,t1,0x1
     8a2:	0901                	addi	s2,s2,0
        for (i = 0; i < N + 1; ++i) {
     8a4:	0004                	0x4
            ti[i] = ti_2[i] - temp[i];
     8a6:	0501                	addi	a0,a0,0
     8a8:	0609                	addi	a2,a2,2
     8aa:	00090003          	lb	zero,0(s2)
     8ae:	0100                	addi	s0,sp,128
     8b0:	0505                	addi	a0,a0,1
     8b2:	0306                	slli	t1,t1,0x1
     8b4:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     8b8:	0501                	addi	a0,a0,0
     8ba:	060c                	addi	a1,sp,768
        for (i = 0; i < N + 1; ++i) {
     8bc:	04090003          	lb	zero,64(s2)
            ti[i] = ti_2[i] - temp[i];
     8c0:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8c2:	1905                	addi	s2,s2,-31
     8c4:	02090303          	lb	t1,32(s2)
                ti[i] = ti[i] + mod;
     8c8:	0100                	addi	s0,sp,128
            while (ti[i] < 0) {
     8ca:	1105                	addi	sp,sp,-31
     8cc:	0200                	addi	s0,sp,256
     8ce:	0104                	addi	s1,sp,128
            ti[i] = ti[i] % mod;
     8d0:	0306                	slli	t1,t1,0x1
     8d2:	097d                	addi	s2,s2,31
        for (i = 0; i < N + 1; ++i) {
     8d4:	0008                	0x8
     8d6:	0501                	addi	a0,a0,0
            ti[i] = ti[i] % mod;
     8d8:	0005                	c.nop	1
     8da:	0402                	c.slli64	s0
        for (i = 0; i < N + 1; ++i) {
     8dc:	0601                	addi	a2,a2,0
              qi_1[i] = 0;
     8de:	00090003          	lb	zero,0(s2)
     8e2:	0100                	addi	s0,sp,128
     8e4:	04090b03          	lb	s6,64(s2)
            controlR += ri[i];
     8e8:	0100                	addi	s0,sp,128
              qi_1[i] = 0;
     8ea:	0306                	slli	t1,t1,0x1
     8ec:	0900                	addi	s0,sp,144
        for (i = 0; i < N + 1; ++i) {
     8ee:	000a                	c.slli	zero,0x2
            controlR += ri[i];
     8f0:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     8f2:	0906                	slli	s2,s2,0x1
            if (((ri_2[0] * j) % mod) == 1)
     8f4:	0002                	c.slli64	zero
     8f6:	0301                	addi	t1,t1,0
     8f8:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     8fc:	0501                	addi	a0,a0,0
     8fe:	00030607          	0x30607
     902:	0009                	c.nop	2
        for (j = 0; j < mod; ++j) {
     904:	0100                	addi	s0,sp,128
     906:	1d05                	addi	s10,s10,-31
            ti_2[i] = (ti_2[i] * j) % mod;
     908:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     90a:	0104                	addi	s1,sp,128
     90c:	0306                	slli	t1,t1,0x1
            ti_2[i] = (ti_2[i] * j) % mod;
     90e:	0908                	addi	a0,sp,144
     910:	0012                	c.slli	zero,0x4
     912:	0501                	addi	a0,a0,0
     914:	0009                	c.nop	2
     916:	0402                	c.slli64	s0
     918:	0601                	addi	a2,a2,0
        for (i = 0; i < N + 1; ++i) {
     91a:	00090003          	lb	zero,0(s2)
int* generate_keys(int N, int p, int q){
     91e:	0100                	addi	s0,sp,128
     920:	1405                	addi	s0,s0,-31
     922:	04090103          	lb	sp,64(s2)
     926:	0100                	addi	s0,sp,128
     928:	0d05                	addi	s10,s10,1
     92a:	0200                	addi	s0,sp,256
     92c:	0304                	addi	s1,sp,384
     92e:	0306                	slli	t1,t1,0x1
     930:	0965                	addi	s2,s2,25
     932:	0004                	0x4
     934:	0501                	addi	a0,a0,0
     936:	0019                	c.nop	6
     938:	0402                	c.slli64	s0
     93a:	01030603          	lb	a2,16(t1)
     93e:	0009                	c.nop	2
     940:	0100                	addi	s0,sp,128
     942:	1805                	addi	a6,a6,-31
     944:	0200                	addi	s0,sp,256
     946:	0304                	addi	s1,sp,384
     948:	06097f03          	0x6097f03
     94c:	0100                	addi	s0,sp,128
     94e:	0d05                	addi	s10,s10,1
     950:	0200                	addi	s0,sp,256
     952:	0304                	addi	s1,sp,384
     954:	0306                	slli	t1,t1,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     956:	0901                	addi	s2,s2,0
     958:	0004                	0x4
     95a:	0501                	addi	a0,a0,0
     95c:	0019                	c.nop	6
     95e:	0402                	c.slli64	s0
     960:	00030603          	lb	a2,0(t1)
     964:	0009                	c.nop	2
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     966:	0100                	addi	s0,sp,128
     968:	2c05                	jal	b98 <generate_keys+0x27c>
     96a:	0200                	addi	s0,sp,256
     96c:	0304                	addi	s1,sp,384
     96e:	0306                	slli	t1,t1,0x1
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     970:	097e                	slli	s2,s2,0x1f
     972:	0004                	0x4
     974:	0501                	addi	a0,a0,0
     976:	0014                	0x14
     978:	0402                	c.slli64	s0
     97a:	0301                	addi	t1,t1,0
     97c:	0900                	addi	s0,sp,144
     97e:	0004                	0x4
     980:	0501                	addi	a0,a0,0
     982:	0009                	c.nop	2
     984:	0402                	c.slli64	s0
     986:	0601                	addi	a2,a2,0
     988:	00090003          	lb	zero,0(s2)
     98c:	0100                	addi	s0,sp,128
     98e:	1d05                	addi	s10,s10,-31
     990:	0200                	addi	s0,sp,256
     992:	0204                	addi	s1,sp,256
     994:	0306                	slli	t1,t1,0x1
     996:	097f                	0x97f
     998:	0004                	0x4
     99a:	0501                	addi	a0,a0,0
     99c:	0103060f          	0x103060f
     9a0:	0809                	addi	a6,a6,2
     9a2:	0100                	addi	s0,sp,128
     9a4:	1105                	addi	sp,sp,-31
     9a6:	0200                	addi	s0,sp,256
     9a8:	0304                	addi	s1,sp,384
     9aa:	0306                	slli	t1,t1,0x1
     9ac:	0916                	slli	s2,s2,0x5
     9ae:	0004                	0x4
     9b0:	0501                	addi	a0,a0,0
     9b2:	0025                	c.nop	9
     9b4:	0402                	c.slli64	s0
     9b6:	00030603          	lb	a2,0(t1)
     9ba:	0409                	addi	s0,s0,2
     9bc:	0100                	addi	s0,sp,128
     9be:	2b05                	jal	eee <memset+0x2c>
     9c0:	0200                	addi	s0,sp,256
     9c2:	0304                	addi	s1,sp,384
     9c4:	04090003          	lb	zero,64(s2)
     9c8:	0100                	addi	s0,sp,128
     9ca:	2e05                	jal	cfa <ntru_deceypt+0x54>
     9cc:	0200                	addi	s0,sp,256
     9ce:	0304                	addi	s1,sp,384
     9d0:	02090003          	lb	zero,32(s2)
     9d4:	0100                	addi	s0,sp,128
     9d6:	2a05                	jal	b06 <generate_keys+0x1ea>
     9d8:	0200                	addi	s0,sp,256
     9da:	0304                	addi	s1,sp,384
    int polyR[N+1];
     9dc:	06097f03          	0x6097f03
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9e0:	0100                	addi	s0,sp,128
    int polyR[N+1];
     9e2:	2e05                	jal	d12 <ntru_deceypt+0x6c>
     9e4:	0200                	addi	s0,sp,256
     9e6:	0304                	addi	s1,sp,384
     9e8:	02090103          	lb	sp,32(s2)
     9ec:	0100                	addi	s0,sp,128
     9ee:	2505                	jal	100e <main+0xa4>
    polyR[N] = 1;
     9f0:	0200                	addi	s0,sp,256
     9f2:	0304                	addi	s1,sp,384
     9f4:	04090003          	lb	zero,64(s2)
     9f8:	0100                	addi	s0,sp,128
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9fa:	2805                	jal	a2a <generate_keys+0x10e>
     9fc:	0200                	addi	s0,sp,256
     9fe:	0304                	addi	s1,sp,384
     a00:	0306                	slli	t1,t1,0x1
     a02:	097f                	0x97f
     a04:	0002                	c.slli64	zero
     a06:	0501                	addi	a0,a0,0
     a08:	0020                	addi	s0,sp,8
     a0a:	0402                	c.slli64	s0
     a0c:	0301                	addi	t1,t1,0
     a0e:	0900                	addi	s0,sp,144
     a10:	0000                	unimp
     a12:	0501                	addi	a0,a0,0
     a14:	000d                	c.nop	3
     a16:	0402                	c.slli64	s0
     a18:	0601                	addi	a2,a2,0
     a1a:	00090003          	lb	zero,0(s2)
     a1e:	0100                	addi	s0,sp,128
     a20:	2505                	jal	1040 <main+0xd6>
     a22:	0200                	addi	s0,sp,256
     a24:	0204                	addi	s1,sp,256
     a26:	0306                	slli	t1,t1,0x1
     a28:	097f                	0x97f
     a2a:	0004                	0x4
     a2c:	0501                	addi	a0,a0,0
     a2e:	04020027          	0x4020027
     a32:	0602                	c.slli64	a2
     a34:	00090003          	lb	zero,0(s2)
     a38:	0100                	addi	s0,sp,128
     a3a:	1d05                	addi	s10,s10,-31
     a3c:	0200                	addi	s0,sp,256
     a3e:	0104                	addi	s1,sp,128
     a40:	0306                	slli	t1,t1,0x1
     a42:	0900                	addi	s0,sp,144
     a44:	0006                	c.slli	zero,0x1
     a46:	0501                	addi	a0,a0,0
     a48:	0009                	c.nop	2
     a4a:	0402                	c.slli64	s0
     a4c:	0601                	addi	a2,a2,0
     a4e:	00090003          	lb	zero,0(s2)
     a52:	0100                	addi	s0,sp,128
     a54:	0e05                	addi	t3,t3,1
     a56:	04091003          	lh	zero,64(s2)
     a5a:	0100                	addi	s0,sp,128
     a5c:	0d05                	addi	s10,s10,1
    polyR[0] = -1;
     a5e:	0200                	addi	s0,sp,256
     a60:	0104                	addi	s1,sp,128
    for(i = 1; i < N; ++i){
     a62:	0306                	slli	t1,t1,0x1
     a64:	097f                	0x97f
     a66:	0002                	c.slli64	zero
     a68:	0501                	addi	a0,a0,0
    for (i = N; i < 55; ++i ){
     a6a:	0005                	c.nop	1
     a6c:	0402                	c.slli64	s0
     a6e:	0601                	addi	a2,a2,0
     a70:	00090003          	lb	zero,0(s2)
        random_keys[i] = f[i];
     a74:	0100                	addi	s0,sp,128
     a76:	0c090003          	lb	zero,192(s2)
     a7a:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a7c:	0e05                	addi	t3,t3,1
     a7e:	02090103          	lb	sp,32(s2)
     a82:	0100                	addi	s0,sp,128
    for(i = N; i < (2*N); ++i){
     a84:	1405                	addi	s0,s0,-31
     a86:	04097103          	0x4097103
     a8a:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     a8c:	1105                	addi	sp,sp,-31
     a8e:	0200                	addi	s0,sp,256
     a90:	0304                	addi	s1,sp,384
     a92:	0306                	slli	t1,t1,0x1
    for(i = N; i < (2*N); ++i){
     a94:	0908                	addi	a0,sp,144
     a96:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     a98:	0501                	addi	a0,a0,0
     a9a:	0029                	c.nop	10
     a9c:	0402                	c.slli64	s0
    fp = ext_euclid(polyR, f, (N+1), p);
     a9e:	00030603          	lb	a2,0(t1)
     aa2:	0409                	addi	s0,s0,2
     aa4:	0100                	addi	s0,sp,128
     aa6:	2f05                	jal	11d6 <_endtext+0x122>
     aa8:	0200                	addi	s0,sp,256
    for(i = (2*N); i < (3*N); ++i){
     aaa:	0304                	addi	s1,sp,384
        random_keys[i] = fp[i-(2*N)];
     aac:	04090003          	lb	zero,64(s2)
     ab0:	0100                	addi	s0,sp,128
     ab2:	3205                	jal	3d2 <polymult2+0x112>
    for(i = (2*N); i < (3*N); ++i){
     ab4:	0200                	addi	s0,sp,256
     ab6:	0304                	addi	s1,sp,384
    fq = ext_euclid(polyR, f, (N+1), q);
     ab8:	02090003          	lb	zero,32(s2)
     abc:	0100                	addi	s0,sp,128
     abe:	2a05                	jal	bee <generate_keys+0x2d2>
     ac0:	0200                	addi	s0,sp,256
     ac2:	0304                	addi	s1,sp,384
    for(i = (3*N); i < (4*N); ++i){
     ac4:	06097f03          	0x6097f03
     ac8:	0100                	addi	s0,sp,128
     aca:	3205                	jal	3ea <polymult2+0x12a>
        random_keys[i] = fq[i-(3*N)];
     acc:	0200                	addi	s0,sp,256
     ace:	0304                	addi	s1,sp,384
     ad0:	02090103          	lb	sp,32(s2)
    for(i = (3*N); i < (4*N); ++i){
     ad4:	0100                	addi	s0,sp,128
     ad6:	2905                	jal	f06 <memset+0x44>
    fg = polymult2(fq, N, g, N, 0);
     ad8:	0200                	addi	s0,sp,256
     ada:	0304                	addi	s1,sp,384
     adc:	04090003          	lb	zero,64(s2)
     ae0:	0100                	addi	s0,sp,128
     ae2:	2805                	jal	b12 <generate_keys+0x1f6>
    for(i = 0; i < (2*N-1); ++i){
     ae4:	0200                	addi	s0,sp,256
     ae6:	0304                	addi	s1,sp,384
     ae8:	0306                	slli	t1,t1,0x1
     aea:	097f                	0x97f
     aec:	0002                	c.slli64	zero
     aee:	0501                	addi	a0,a0,0
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     af0:	0020                	addi	s0,sp,8
     af2:	0402                	c.slli64	s0
     af4:	0301                	addi	t1,t1,0
     af6:	0900                	addi	s0,sp,144
    for(i = (4*N); i < (5*N); ++i){
     af8:	0000                	unimp
     afa:	0501                	addi	a0,a0,0
     afc:	000d                	c.nop	3
     afe:	0402                	c.slli64	s0
     b00:	0601                	addi	a2,a2,0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b02:	00090003          	lb	zero,0(s2)
     b06:	0100                	addi	s0,sp,128
     b08:	2505                	jal	1128 <_endtext+0x74>
    for(i = (4*N); i < (5*N); ++i){
     b0a:	0200                	addi	s0,sp,256
     b0c:	0204                	addi	s1,sp,256
     b0e:	0306                	slli	t1,t1,0x1
    for(i = (5*N); i < (6*N+1); ++i){
     b10:	097f                	0x97f
     b12:	0004                	0x4
        random_keys[i] = polyR[i-(5*N)];
     b14:	0501                	addi	a0,a0,0
     b16:	04020027          	0x4020027
     b1a:	0602                	c.slli64	a2
    for(i = (5*N); i < (6*N+1); ++i){
     b1c:	00090003          	lb	zero,0(s2)
     b20:	0100                	addi	s0,sp,128
     b22:	0d05                	addi	s10,s10,1
     b24:	0200                	addi	s0,sp,256
     b26:	0304                	addi	s1,sp,384
}
     b28:	0306                	slli	t1,t1,0x1
     b2a:	090a                	slli	s2,s2,0x2
     b2c:	0008                	0x8
     b2e:	0501                	addi	a0,a0,0
     b30:	0019                	c.nop	6
     b32:	0402                	c.slli64	s0
     b34:	00030603          	lb	a2,0(t1)
     b38:	0009                	c.nop	2
     b3a:	0100                	addi	s0,sp,128
     b3c:	2305                	jal	105c <main+0xf2>
     b3e:	0200                	addi	s0,sp,256
     b40:	0304                	addi	s1,sp,384
     b42:	04097f03          	0x4097f03
     b46:	0100                	addi	s0,sp,128
     b48:	1905                	addi	s2,s2,-31
     b4a:	0200                	addi	s0,sp,256
     b4c:	0304                	addi	s1,sp,384
     b4e:	04090103          	lb	sp,64(s2)
     b52:	0100                	addi	s0,sp,128
     b54:	2305                	jal	1074 <main+0x10a>
     b56:	0200                	addi	s0,sp,256
     b58:	0304                	addi	s1,sp,384
     b5a:	0306                	slli	t1,t1,0x1
     b5c:	097f                	0x97f
     b5e:	0006                	c.slli	zero,0x1
     b60:	0501                	addi	a0,a0,0
     b62:	0011                	c.nop	4
     b64:	0402                	c.slli64	s0
     b66:	0301                	addi	t1,t1,0
        polyR[i] = 0;
     b68:	0900                	addi	s0,sp,144
     b6a:	0002                	c.slli64	zero
     b6c:	0501                	addi	a0,a0,0
     b6e:	0009                	c.nop	2
     b70:	0402                	c.slli64	s0
    for(i = 1; i < N; ++i){
     b72:	0601                	addi	a2,a2,0
     b74:	00090003          	lb	zero,0(s2)
        f[i] = 0;
     b78:	0100                	addi	s0,sp,128
     b7a:	1605                	addi	a2,a2,-31
     b7c:	0200                	addi	s0,sp,256
     b7e:	0204                	addi	s1,sp,256
     b80:	0306                	slli	t1,t1,0x1
     b82:	097f                	0x97f
        g[i] = 0;
     b84:	0004                	0x4
     b86:	0501                	addi	a0,a0,0
     b88:	0305                	addi	t1,t1,1
     b8a:	00060907          	0x60907
    for (i = N; i < 55; ++i ){
     b8e:	0301                	addi	t1,t1,0
     b90:	0902                	c.slli64	s2
        random_keys[i] = f[i];
     b92:	0000                	unimp
     b94:	0501                	addi	a0,a0,0
     b96:	0601                	addi	a2,a2,0
     b98:	00090103          	lb	sp,0(s2)
     b9c:	0100                	addi	s0,sp,128
     b9e:	4305                	li	t1,1
     ba0:	0306                	slli	t1,t1,0x1
    for(i = 0; i < N; ++i){
     ba2:	0902                	c.slli64	s2
        random_keys[i] = f[i];
     ba4:	002a                	c.slli	zero,0xa
    for(i = 0; i < N; ++i){
     ba6:	0501                	addi	a0,a0,0
        random_keys[i] = g[i-N];
     ba8:	0305                	addi	t1,t1,1
     baa:	0902                	c.slli64	s2
     bac:	0000                	unimp
     bae:	0301                	addi	t1,t1,0
     bb0:	0901                	addi	s2,s2,0
    for(i = N; i < (2*N); ++i){
     bb2:	0000                	unimp
     bb4:	0301                	addi	t1,t1,0
     bb6:	0902                	c.slli64	s2
        random_keys[i] = fp[i-(2*N)];
     bb8:	0000                	unimp
     bba:	0501                	addi	a0,a0,0
     bbc:	0609                	addi	a2,a2,2
     bbe:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     bc2:	0100                	addi	s0,sp,128
     bc4:	4305                	li	t1,1
     bc6:	04097b03          	0x4097b03
        random_keys[i] = fq[i-(3*N)];
     bca:	0100                	addi	s0,sp,128
     bcc:	0905                	addi	s2,s2,1
     bce:	02090503          	lb	a0,32(s2)
     bd2:	0100                	addi	s0,sp,128
     bd4:	4305                	li	t1,1
    for(i = (3*N); i < (4*N); ++i){
     bd6:	02097b03          	0x2097b03
     bda:	0100                	addi	s0,sp,128
        fg[i] = fg[i]*p;
     bdc:	0905                	addi	s2,s2,1
    for(i = 0; i < (2*N-1); ++i){
     bde:	18090503          	lb	a0,384(s2)
        fg[i] = fg[i]*p;
     be2:	0100                	addi	s0,sp,128
     be4:	4305                	li	t1,1
     be6:	02097b03          	0x2097b03
    for(i = 0; i < (2*N-1); ++i){
     bea:	0100                	addi	s0,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     bec:	0905                	addi	s2,s2,1
     bee:	04090503          	lb	a0,64(s2)
     bf2:	0100                	addi	s0,sp,128
     bf4:	06090103          	lb	sp,96(s2)
    for(i = (4*N); i < (5*N); ++i){
     bf8:	0100                	addi	s0,sp,128
     bfa:	06090203          	lb	tp,96(s2)
        random_keys[i] = polyR[i-(5*N)];
     bfe:	0100                	addi	s0,sp,128
     c00:	04090103          	lb	sp,64(s2)
     c04:	0100                	addi	s0,sp,128
     c06:	06097f03          	0x6097f03
    for(i = (5*N); i < (6*N+1); ++i){
     c0a:	0100                	addi	s0,sp,128
        random_keys[i] = polyR[i-(5*N)];
     c0c:	02090103          	lb	sp,32(s2)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c10:	0100                	addi	s0,sp,128
     c12:	4305                	li	t1,1
     c14:	06097703          	0x6097703
     c18:	0100                	addi	s0,sp,128
     c1a:	0905                	addi	s2,s2,1
     c1c:	04090503          	lb	a0,64(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c20:	0100                	addi	s0,sp,128
     c22:	0505                	addi	a0,a0,1
     c24:	0306                	slli	t1,t1,0x1
     c26:	0901                	addi	s2,s2,0
     c28:	0004                	0x4
     c2a:	0301                	addi	t1,t1,0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c2c:	0901                	addi	s2,s2,0
     c2e:	0000                	unimp
     c30:	0301                	addi	t1,t1,0
     c32:	0901                	addi	s2,s2,0
     c34:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	0301                	addi	t1,t1,0
    temp = polymult(public_key,N,random_val,48,q,0);
     c38:	0901                	addi	s2,s2,0
     c3a:	0000                	unimp
     c3c:	0601                	addi	a2,a2,0
     c3e:	00090203          	lb	tp,0(s2)
     c42:	0100                	addi	s0,sp,128
     c44:	4305                	li	t1,1
     c46:	06097503          	0x6097503
     c4a:	0100                	addi	s0,sp,128
    for(i = 0; i < 48; ++i){
     c4c:	0905                	addi	s2,s2,1
     c4e:	04090903          	lb	s2,64(s2)
        temp[i] = temp[i] + message[i];
     c52:	0100                	addi	s0,sp,128
     c54:	0505                	addi	a0,a0,1
     c56:	04090203          	lb	tp,64(s2)
     c5a:	0100                	addi	s0,sp,128
     c5c:	0905                	addi	s2,s2,1
     c5e:	02097e03          	0x2097e03
    for(i = 0; i < 48; ++i){
     c62:	0100                	addi	s0,sp,128
     c64:	0505                	addi	a0,a0,1
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	0306                	slli	t1,t1,0x1
     c68:	0902                	c.slli64	s2
     c6a:	0002                	c.slli64	zero
     c6c:	0301                	addi	t1,t1,0
     c6e:	0902                	c.slli64	s2
     c70:	0000                	unimp
     c72:	0501                	addi	a0,a0,0
     c74:	060c                	addi	a1,sp,768
     c76:	04090003          	lb	zero,64(s2)
    for(i = (2*N); i < (3*N); ++i){
     c7a:	0100                	addi	s0,sp,128
     c7c:	1105                	addi	sp,sp,-31
     c7e:	0200                	addi	s0,sp,256
     c80:	0104                	addi	s1,sp,128
     c82:	0306                	slli	t1,t1,0x1
}
     c84:	0900                	addi	s0,sp,144
     c86:	0002                	c.slli64	zero
     c88:	0501                	addi	a0,a0,0
     c8a:	0005                	c.nop	1
     c8c:	0402                	c.slli64	s0
     c8e:	0601                	addi	a2,a2,0
     c90:	00090003          	lb	zero,0(s2)
        CT[i-(2*N)] = CT[i];
     c94:	0100                	addi	s0,sp,128
     c96:	0305                	addi	t1,t1,1
     c98:	0306                	slli	t1,t1,0x1
     c9a:	0909                	addi	s2,s2,2
    for(i = (2*N); i < (3*N); ++i){
     c9c:	0004                	0x4
     c9e:	0501                	addi	a0,a0,0
        CT[i-(2*N)] = CT[i];
     ca0:	0305                	addi	t1,t1,1
     ca2:	0902                	c.slli64	s2
    for(i = (2*N); i < (3*N); ++i){
     ca4:	0008                	0x8
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     ca6:	0501                	addi	a0,a0,0
     ca8:	060c                	addi	a1,sp,768
     caa:	02090003          	lb	zero,32(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     cae:	0100                	addi	s0,sp,128
     cb0:	1105                	addi	sp,sp,-31
     cb2:	0200                	addi	s0,sp,256
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cb4:	0104                	addi	s1,sp,128
     cb6:	0306                	slli	t1,t1,0x1
     cb8:	0900                	addi	s0,sp,144
     cba:	0002                	c.slli64	zero
     cbc:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cbe:	0005                	c.nop	1
     cc0:	0402                	c.slli64	s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc2:	0601                	addi	a2,a2,0
     cc4:	00090003          	lb	zero,0(s2)
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc8:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cca:	0c05                	addi	s8,s8,1
     ccc:	04090803          	lb	a6,64(s2)
     cd0:	0100                	addi	s0,sp,128
     cd2:	1105                	addi	sp,sp,-31
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cd4:	0200                	addi	s0,sp,256
     cd6:	0104                	addi	s1,sp,128
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cd8:	0306                	slli	t1,t1,0x1
     cda:	0900                	addi	s0,sp,144
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cdc:	0002                	c.slli64	zero
     cde:	0501                	addi	a0,a0,0
     ce0:	0005                	c.nop	1
     ce2:	0402                	c.slli64	s0
     ce4:	0601                	addi	a2,a2,0
     ce6:	00090003          	lb	zero,0(s2)
     cea:	0100                	addi	s0,sp,128
     cec:	1805                	addi	a6,a6,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     cee:	0200                	addi	s0,sp,256
     cf0:	0104                	addi	s1,sp,128
     cf2:	0306                	slli	t1,t1,0x1
     cf4:	0906                	slli	s2,s2,0x1
     cf6:	0004                	0x4
        if(a2[i] <= q/2)
     cf8:	0501                	addi	a0,a0,0
     cfa:	0005                	c.nop	1
     cfc:	0402                	c.slli64	s0
    for (i = 0; i < N; ++i){
     cfe:	0601                	addi	a2,a2,0
     d00:	08090003          	lb	zero,128(s2)
    c = polymult2(secret_key_fp,N,a2,N,0);
     d04:	0100                	addi	s0,sp,128
     d06:	0c05                	addi	s8,s8,1
     d08:	0200                	addi	s0,sp,256
     d0a:	0104                	addi	s1,sp,128
     d0c:	04097a03          	0x4097a03
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d10:	0100                	addi	s0,sp,128
     d12:	0200                	addi	s0,sp,256
     d14:	0104                	addi	s1,sp,128
     d16:	04090f03          	lb	t5,64(s2)
     d1a:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d1c:	1105                	addi	sp,sp,-31
     d1e:	0200                	addi	s0,sp,256
     d20:	0104                	addi	s1,sp,128
}
     d22:	0306                	slli	t1,t1,0x1
     d24:	097f                	0x97f
     d26:	0002                	c.slli64	zero
     d28:	0501                	addi	a0,a0,0
     d2a:	0005                	c.nop	1
     d2c:	0402                	c.slli64	s0
     d2e:	0601                	addi	a2,a2,0
     d30:	00090003          	lb	zero,0(s2)
     d34:	0100                	addi	s0,sp,128
     d36:	0d05                	addi	s10,s10,1
        a2[i-(2*N)] = a2[i];
     d38:	0306                	slli	t1,t1,0x1
     d3a:	0961                	addi	s2,s2,24
     d3c:	0008                	0x8
     d3e:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d40:	00030627          	0x30627
        a2[i-(2*N)] = a2[i];
     d44:	0009                	c.nop	2
     d46:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d48:	1905                	addi	s2,s2,-31
        if(a2[i] <= q/2)
     d4a:	02090003          	lb	zero,32(s2)
     d4e:	0100                	addi	s0,sp,128
            a2[i] = (-1)*(q-a2[i]);
     d50:	0f05                	addi	t5,t5,1
     d52:	0306                	slli	t1,t1,0x1
     d54:	097f                	0x97f
    for (i = 0; i < N; ++i){
     d56:	0002                	c.slli64	zero
     d58:	0501                	addi	a0,a0,0
     d5a:	0618                	addi	a4,sp,768
        c2[i-(2*N)] = c2[i];
     d5c:	00090003          	lb	zero,0(s2)
     d60:	0100                	addi	s0,sp,128
     d62:	0f05                	addi	t5,t5,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d64:	02090003          	lb	zero,32(s2)
        c2[i-(2*N)] = c2[i];
     d68:	0100                	addi	s0,sp,128
     d6a:	0905                	addi	s2,s2,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	0200                	addi	s0,sp,256
  jal x0, default_exc_handler
     d6e:	0204                	addi	s1,sp,256
     d70:	0306                	slli	t1,t1,0x1
  mv  x1, x0
     d72:	00040903          	lb	s2,0(s0)
  mv  x2, x1
     d76:	0501                	addi	a0,a0,0
  mv  x3, x1
     d78:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
  mv  x5, x1
     d7c:	0602                	c.slli64	a2
  mv  x6, x1
     d7e:	00090003          	lb	zero,0(s2)
  mv  x8, x1
     d82:	0100                	addi	s0,sp,128
  mv  x9, x1
     d84:	1d05                	addi	s10,s10,-31
  mv x10, x1
     d86:	0200                	addi	s0,sp,256
  mv x11, x1
     d88:	0204                	addi	s1,sp,256
  mv x12, x1
     d8a:	04097c03          	0x4097c03
  mv x14, x1
     d8e:	0100                	addi	s0,sp,128
  mv x15, x1
     d90:	1505                	addi	a0,a0,-31
  mv x16, x1
     d92:	0200                	addi	s0,sp,256
  mv x17, x1
     d94:	0204                	addi	s1,sp,256
  mv x18, x1
     d96:	04090403          	lb	s0,64(s2)
  mv x20, x1
     d9a:	0100                	addi	s0,sp,128
  mv x21, x1
     d9c:	1d05                	addi	s10,s10,-31
  mv x22, x1
     d9e:	0200                	addi	s0,sp,256
  mv x23, x1
     da0:	0204                	addi	s1,sp,256
  mv x24, x1
     da2:	0306                	slli	t1,t1,0x1
  mv x25, x1
     da4:	097c                	addi	a5,sp,156
  mv x26, x1
     da6:	0004                	0x4
  mv x27, x1
     da8:	0501                	addi	a0,a0,0
  mv x28, x1
     daa:	030d                	addi	t1,t1,3
  mv x29, x1
     dac:	090d                	addi	s2,s2,3
  mv x30, x1
     dae:	0002                	c.slli64	zero
  mv x31, x1
     db0:	0501                	addi	a0,a0,0
  la   x2, _stack_start
     db2:	0003062b          	0x3062b
     db6:	0009                	c.nop	2
     db8:	0100                	addi	s0,sp,128
  la x26, _bss_start
     dba:	1b05                	addi	s6,s6,-31
     dbc:	02090003          	lb	zero,32(s2)
     dc0:	0100                	addi	s0,sp,128
  la x27, _bss_end
     dc2:	0f05                	addi	t5,t5,1
     dc4:	0306                	slli	t1,t1,0x1
     dc6:	097f                	0x97f
     dc8:	0002                	c.slli64	zero
  bge x26, x27, zero_loop_end
     dca:	0501                	addi	a0,a0,0
     dcc:	061a                	slli	a2,a2,0x6
  sw x0, 0(x26)
     dce:	00090003          	lb	zero,0(s2)
  addi x26, x26, 4
     dd2:	0100                	addi	s0,sp,128
  ble x26, x27, zero_loop
     dd4:	0f05                	addi	t5,t5,1
     dd6:	02090003          	lb	zero,32(s2)
  addi x10, x0, 0
     dda:	0100                	addi	s0,sp,128
  addi x11, x0, 0
     ddc:	0905                	addi	s2,s2,1
     dde:	0200                	addi	s0,sp,256
  jal x1, main
     de0:	0204                	addi	s1,sp,256
     de2:	0306                	slli	t1,t1,0x1
     de4:	00040903          	lb	s2,0(s0)
     de8:	0501                	addi	a0,a0,0
     dea:	04020027          	0x4020027
     dee:	0602                	c.slli64	a2
     df0:	00090003          	lb	zero,0(s2)
     df4:	0100                	addi	s0,sp,128
     df6:	1d05                	addi	s10,s10,-31
     df8:	0200                	addi	s0,sp,256
     dfa:	0204                	addi	s1,sp,256
     dfc:	04097c03          	0x4097c03
     e00:	0100                	addi	s0,sp,128
     e02:	1705                	addi	a4,a4,-31
     e04:	0200                	addi	s0,sp,256
     e06:	0204                	addi	s1,sp,256
     e08:	04090403          	lb	s0,64(s2)
     e0c:	0100                	addi	s0,sp,128
     e0e:	1d05                	addi	s10,s10,-31
     e10:	0200                	addi	s0,sp,256
     e12:	0204                	addi	s1,sp,256
     e14:	0306                	slli	t1,t1,0x1
     e16:	097c                	addi	a5,sp,156
     e18:	0004                	0x4
     e1a:	0501                	addi	a0,a0,0
     e1c:	0009                	c.nop	2
     e1e:	0402                	c.slli64	s0
     e20:	09090303          	lb	t1,144(s2)
     e24:	0002                	c.slli64	zero
     e26:	0501                	addi	a0,a0,0
     e28:	000e                	c.slli	zero,0x3
     e2a:	0402                	c.slli64	s0
     e2c:	00030603          	lb	a2,0(t1)
     e30:	0409                	addi	s0,s0,2
     e32:	0100                	addi	s0,sp,128
     e34:	0200                	addi	s0,sp,256
     e36:	0304                	addi	s1,sp,384
     e38:	04090103          	lb	sp,64(s2)
     e3c:	0100                	addi	s0,sp,128
     e3e:	0200                	addi	s0,sp,256
     e40:	0304                	addi	s1,sp,384
     e42:	02097f03          	0x2097f03
     e46:	0100                	addi	s0,sp,128
     e48:	0905                	addi	s2,s2,1
     e4a:	0200                	addi	s0,sp,256
     e4c:	0304                	addi	s1,sp,384
     e4e:	0306                	slli	t1,t1,0x1
     e50:	0901                	addi	s2,s2,0
     e52:	0004                	0x4
     e54:	0501                	addi	a0,a0,0
     e56:	000e                	c.slli	zero,0x3
     e58:	0402                	c.slli64	s0
     e5a:	00030603          	lb	a2,0(t1)
     e5e:	0009                	c.nop	2
     e60:	0100                	addi	s0,sp,128
     e62:	1d05                	addi	s10,s10,-31
     e64:	0200                	addi	s0,sp,256
     e66:	0304                	addi	s1,sp,384
     e68:	0306                	slli	t1,t1,0x1
     e6a:	097e                	slli	s2,s2,0x1f
     e6c:	0004                	0x4
     e6e:	0501                	addi	a0,a0,0
     e70:	0309                	addi	t1,t1,2
     e72:	00040907          	0x40907
     e76:	0501                	addi	a0,a0,0
     e78:	0003060b          	0x3060b
     e7c:	0009                	c.nop	2
     e7e:	0100                	addi	s0,sp,128
     e80:	2005                	jal	ea0 <memcpy+0xbc>
     e82:	0200                	addi	s0,sp,256
     e84:	0204                	addi	s1,sp,256
     e86:	0306                	slli	t1,t1,0x1
     e88:	097f                	0x97f
     e8a:	0002                	c.slli64	zero
     e8c:	0501                	addi	a0,a0,0
     e8e:	0022                	c.slli	zero,0x8
     e90:	0402                	c.slli64	s0
     e92:	0602                	c.slli64	a2
     e94:	00090003          	lb	zero,0(s2)
     e98:	0100                	addi	s0,sp,128
     e9a:	0905                	addi	s2,s2,1
     e9c:	0306                	slli	t1,t1,0x1
     e9e:	0909                	addi	s2,s2,2
     ea0:	0004                	0x4
     ea2:	0501                	addi	a0,a0,0
     ea4:	0615                	addi	a2,a2,5
     ea6:	00090003          	lb	zero,0(s2)
     eaa:	0100                	addi	s0,sp,128
     eac:	0c05                	addi	s8,s8,1
     eae:	06090003          	lb	zero,96(s2)
     eb2:	0100                	addi	s0,sp,128
     eb4:	1a05                	addi	s4,s4,-31
     eb6:	0200                	addi	s0,sp,256
     eb8:	0204                	addi	s1,sp,256
     eba:	0306                	slli	t1,t1,0x1
     ebc:	097f                	0x97f
     ebe:	0004                	0x4
     ec0:	0501                	addi	a0,a0,0
     ec2:	0309                	addi	t1,t1,2
     ec4:	00040907          	0x40907
     ec8:	0501                	addi	a0,a0,0
     eca:	0003060b          	0x3060b
     ece:	0009                	c.nop	2
     ed0:	0100                	addi	s0,sp,128
     ed2:	2005                	jal	ef2 <memset+0x30>
     ed4:	0200                	addi	s0,sp,256
     ed6:	0204                	addi	s1,sp,256
     ed8:	0306                	slli	t1,t1,0x1
     eda:	097f                	0x97f
     edc:	0002                	c.slli64	zero
     ede:	0501                	addi	a0,a0,0
     ee0:	0022                	c.slli	zero,0x8
     ee2:	0402                	c.slli64	s0
     ee4:	0602                	c.slli64	a2
     ee6:	00090003          	lb	zero,0(s2)
     eea:	0100                	addi	s0,sp,128
     eec:	1805                	addi	a6,a6,-31
     eee:	0200                	addi	s0,sp,256
     ef0:	0104                	addi	s1,sp,128
     ef2:	0306                	slli	t1,t1,0x1
     ef4:	0900                	addi	s0,sp,144
     ef6:	0002                	c.slli64	zero
     ef8:	0501                	addi	a0,a0,0
     efa:	0005                	c.nop	1
     efc:	0402                	c.slli64	s0
     efe:	0601                	addi	a2,a2,0
     f00:	08090003          	lb	zero,128(s2)
     f04:	0100                	addi	s0,sp,128
     f06:	0b05                	addi	s6,s6,1
     f08:	0306                	slli	t1,t1,0x1
     f0a:	090c                	addi	a1,sp,144
     f0c:	0004                	0x4
     f0e:	0501                	addi	a0,a0,0
     f10:	0305                	addi	t1,t1,1
     f12:	00c0                	addi	s0,sp,68
     f14:	0409                	addi	s0,s0,2
     f16:	0100                	addi	s0,sp,128
     f18:	0e090203          	lb	tp,224(s2)
     f1c:	0100                	addi	s0,sp,128
     f1e:	1b05                	addi	s6,s6,-31
     f20:	0306                	slli	t1,t1,0x1
     f22:	0900                	addi	s0,sp,144
     f24:	0000                	unimp
     f26:	0501                	addi	a0,a0,0
     f28:	09010313          	addi	t1,sp,144
     f2c:	0004                	0x4
     f2e:	0501                	addi	a0,a0,0
     f30:	0015                	c.nop	5
     f32:	0402                	c.slli64	s0
     f34:	0601                	addi	a2,a2,0
     f36:	08097f03          	0x8097f03
     f3a:	0100                	addi	s0,sp,128
     f3c:	0505                	addi	a0,a0,1
     f3e:	0200                	addi	s0,sp,256
     f40:	0104                	addi	s1,sp,128
     f42:	0306                	slli	t1,t1,0x1
     f44:	0900                	addi	s0,sp,144
     f46:	0000                	unimp
     f48:	0601                	addi	a2,a2,0
     f4a:	04090403          	lb	s0,64(s2)
     f4e:	0100                	addi	s0,sp,128
     f50:	00090203          	lb	tp,0(s2)
     f54:	0100                	addi	s0,sp,128
     f56:	0105                	addi	sp,sp,1
     f58:	0306                	slli	t1,t1,0x1
     f5a:	0901                	addi	s2,s2,0
     f5c:	0000                	unimp
     f5e:	0501                	addi	a0,a0,0
     f60:	0609                	addi	a2,a2,2
     f62:	097fba03          	0x97fba03
     f66:	002a                	c.slli	zero,0xa
     f68:	0501                	addi	a0,a0,0
int main(){
     f6a:	0616                	slli	a2,a2,0x5
     f6c:	00090003          	lb	zero,0(s2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f70:	0100                	addi	s0,sp,128
     f72:	0d05                	addi	s10,s10,1
     f74:	04090003          	lb	zero,64(s2)
     f78:	0100                	addi	s0,sp,128
     f7a:	1305                	addi	t1,t1,-31
int main(){
     f7c:	04090003          	lb	zero,64(s2)
     f80:	0100                	addi	s0,sp,128
     f82:	0905                	addi	s2,s2,1
     f84:	0306                	slli	t1,t1,0x1
     f86:	0902                	c.slli64	s2
     f88:	0006                	c.slli	zero,0x1
     f8a:	0501                	addi	a0,a0,0
    resultkon[0] = 0xaaaaaaa0;
     f8c:	0610                	addi	a2,sp,768
     f8e:	02090003          	lb	zero,32(s2)
     f92:	0100                	addi	s0,sp,128
     f94:	1505                	addi	a0,a0,-31
     f96:	0200                	addi	s0,sp,256
     f98:	0104                	addi	s1,sp,128
     f9a:	0306                	slli	t1,t1,0x1
     f9c:	0900                	addi	s0,sp,144
    keys = generate_keys(N, p, q);
     f9e:	0002                	c.slli64	zero
     fa0:	0501                	addi	a0,a0,0
     fa2:	0009                	c.nop	2
     fa4:	0402                	c.slli64	s0
     fa6:	0601                	addi	a2,a2,0
    resultkon[0] = 0xaaaaaaa0;
     fa8:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xaaaaaaa1;
     fac:	0100                	addi	s0,sp,128
    keys = generate_keys(N, p, q);
     fae:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xaaaaaaa1;
     fb0:	0906                	slli	s2,s2,0x1
     fb2:	0004                	0x4
    for(i = 0; i < N; ++i){
     fb4:	0501                	addi	a0,a0,0
     fb6:	00030613          	mv	a2,t1
        secret_key_f[i] = keys[i];
     fba:	0009                	c.nop	2
     fbc:	0100                	addi	s0,sp,128
     fbe:	0905                	addi	s2,s2,1
     fc0:	0306                	slli	t1,t1,0x1
     fc2:	000e0903          	lb	s2,0(t3) # 1a000 <_stack_start+0xa000>
    for(i = 0; i < N; ++i){
     fc6:	0501                	addi	a0,a0,0
     fc8:	0610                	addi	a2,sp,768
    for(i = N; i < (2*N); ++i){
     fca:	02090003          	lb	zero,32(s2)
     fce:	0100                	addi	s0,sp,128
     fd0:	1505                	addi	a0,a0,-31
     fd2:	0200                	addi	s0,sp,256
     fd4:	0104                	addi	s1,sp,128
        secret_key_fp[i-(2*N)] = keys[i];
     fd6:	0306                	slli	t1,t1,0x1
     fd8:	0900                	addi	s0,sp,144
     fda:	0002                	c.slli64	zero
     fdc:	0501                	addi	a0,a0,0
     fde:	0009                	c.nop	2
    for(i = (2*N); i < (3*N); ++i){
     fe0:	0402                	c.slli64	s0
     fe2:	0601                	addi	a2,a2,0
    for(i = (3*N); i < (4*N); ++i){
     fe4:	00090003          	lb	zero,0(s2)
     fe8:	0100                	addi	s0,sp,128
     fea:	1005                	c.nop	-31
     fec:	06090903          	lb	s2,96(s2)
        public_key[i-(4*N)] = keys[i];
     ff0:	0100                	addi	s0,sp,128
     ff2:	1505                	addi	a0,a0,-31
     ff4:	0200                	addi	s0,sp,256
     ff6:	0104                	addi	s1,sp,128
     ff8:	0306                	slli	t1,t1,0x1
    for(i = (4*N); i < (5*N); ++i){
     ffa:	0900                	addi	s0,sp,144
     ffc:	0002                	c.slli64	zero
     ffe:	0501                	addi	a0,a0,0
    1000:	0009                	c.nop	2
    1002:	0402                	c.slli64	s0
    1004:	0601                	addi	a2,a2,0
        ring_poly[i-(5*N)] = keys[i];
    1006:	00090003          	lb	zero,0(s2)
    100a:	0100                	addi	s0,sp,128
    100c:	1005                	c.nop	-31
    100e:	06090603          	lb	a2,96(s2)
    for(i = (5*N); i < (6*N+1); ++i){
    1012:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
    1014:	1505                	addi	a0,a0,-31
    1016:	0200                	addi	s0,sp,256
    1018:	0104                	addi	s1,sp,128
    101a:	0306                	slli	t1,t1,0x1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    101c:	0900                	addi	s0,sp,144
    101e:	0002                	c.slli64	zero
    1020:	0501                	addi	a0,a0,0
    1022:	0009                	c.nop	2
    resultkon[0] = 0xbbbbbbb1;
    1024:	0402                	c.slli64	s0
    1026:	0601                	addi	a2,a2,0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1028:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xbbbbbbb0;
    102c:	0100                	addi	s0,sp,128
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	0f05                	addi	t5,t5,1
    resultkon[0] = 0xbbbbbbb1;
    1030:	06090903          	lb	s2,96(s2)
    resultkon[0] = 0xccccccc0;
    1034:	0100                	addi	s0,sp,128
    1036:	1405                	addi	s0,s0,-31
    1038:	0200                	addi	s0,sp,256
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    103a:	0104                	addi	s1,sp,128
    resultkon[0] = 0xccccccc0;
    103c:	0306                	slli	t1,t1,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    103e:	0900                	addi	s0,sp,144
    1040:	0002                	c.slli64	zero
    1042:	0501                	addi	a0,a0,0
    1044:	0009                	c.nop	2
    1046:	0402                	c.slli64	s0
    1048:	0601                	addi	a2,a2,0
    104a:	00090003          	lb	zero,0(s2)
    104e:	0100                	addi	s0,sp,128
    1050:	1005                	c.nop	-31
    resultkon[0] = 0xccccccc1;	
    1052:	04090803          	lb	a6,64(s2)
            resultkon[0] = 0xDEDEDEDE;
    1056:	0100                	addi	s0,sp,128
    1058:	1c05                	addi	s8,s8,-31
    resultkon[0] = 0xccccccc1;	
    105a:	0200                	addi	s0,sp,256
    105c:	0104                	addi	s1,sp,128
            resultkon[0] = 0xDEDEDEDE;
    105e:	0306                	slli	t1,t1,0x1
    1060:	0900                	addi	s0,sp,144
    for(i = 0; i < 32; ++i){
    1062:	0002                	c.slli64	zero
    1064:	0501                	addi	a0,a0,0
        if(!(message[i] == Dec_Message[i])){
    1066:	0009                	c.nop	2
    1068:	0402                	c.slli64	s0
    106a:	0601                	addi	a2,a2,0
    106c:	08090003          	lb	zero,128(s2)
    1070:	0100                	addi	s0,sp,128
    1072:	0d05                	addi	s10,s10,1
    1074:	0200                	addi	s0,sp,256
            resultkon[0] = 0xBABABABA;
    1076:	0304                	addi	s1,sp,384
    1078:	0306                	slli	t1,t1,0x1
    107a:	0958                	addi	a4,sp,148
    107c:	0008                	0x8
    107e:	0501                	addi	a0,a0,0
}
    1080:	0019                	c.nop	6
    1082:	0402                	c.slli64	s0
    1084:	00030603          	lb	a2,0(t1)
    1088:	0009                	c.nop	2
    108a:	0100                	addi	s0,sp,128
    108c:	2105                	jal	14ac <product2+0x1c>
    108e:	0200                	addi	s0,sp,256
    1090:	0304                	addi	s1,sp,384
    1092:	02097f03          	0x2097f03
    1096:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    1098:	1905                	addi	s2,s2,-31
    for(i = 0; i < 32; ++i){
    109a:	0200                	addi	s0,sp,256
    109c:	0304                	addi	s1,sp,384
    109e:	04090103          	lb	sp,64(s2)
    10a2:	0100                	addi	s0,sp,128
    10a4:	1205                	addi	tp,tp,-31
    10a6:	0200                	addi	s0,sp,256
    10a8:	0304                	addi	s1,sp,384
    10aa:	04090003          	lb	zero,64(s2)
    10ae:	0100                	addi	s0,sp,128
    10b0:	2105                	jal	14d0 <product2+0x40>
    10b2:	0200                	addi	s0,sp,256
    10b4:	0304                	addi	s1,sp,384
    10b6:	0306                	slli	t1,t1,0x1
    10b8:	097f                	0x97f
    10ba:	0004                	0x4
    10bc:	0501                	addi	a0,a0,0
    10be:	0311                	addi	t1,t1,4
    10c0:	0002090b          	0x2090b
    10c4:	0501                	addi	a0,a0,0
    10c6:	0629                	addi	a2,a2,10
    10c8:	00090003          	lb	zero,0(s2)
    10cc:	0100                	addi	s0,sp,128
    10ce:	1c05                	addi	s8,s8,-31
    10d0:	02090003          	lb	zero,32(s2)
    10d4:	0100                	addi	s0,sp,128
    10d6:	1305                	addi	t1,t1,-31
    10d8:	0306                	slli	t1,t1,0x1
    10da:	097f                	0x97f
    10dc:	0002                	c.slli64	zero
    10de:	0501                	addi	a0,a0,0
    10e0:	0003061b          	0x3061b
    10e4:	0009                	c.nop	2
    10e6:	0100                	addi	s0,sp,128
    10e8:	1305                	addi	t1,t1,-31
    10ea:	02090003          	lb	zero,32(s2)
    10ee:	0100                	addi	s0,sp,128
    10f0:	0d05                	addi	s10,s10,1
    10f2:	0200                	addi	s0,sp,256
    10f4:	0204                	addi	s1,sp,256
    10f6:	0306                	slli	t1,t1,0x1
    10f8:	00040903          	lb	s2,0(s0)
    10fc:	0501                	addi	a0,a0,0
    10fe:	0025                	c.nop	9
    1100:	0402                	c.slli64	s0
    1102:	0602                	c.slli64	a2
    1104:	00090003          	lb	zero,0(s2)
    1108:	0100                	addi	s0,sp,128
    110a:	2105                	jal	152a <product2+0x9a>
    110c:	0200                	addi	s0,sp,256
    110e:	0204                	addi	s1,sp,256
    1110:	04097c03          	0x4097c03
    1114:	0100                	addi	s0,sp,128
    1116:	1805                	addi	a6,a6,-31
    1118:	0200                	addi	s0,sp,256
    111a:	0204                	addi	s1,sp,256
    111c:	04090403          	lb	s0,64(s2)
    1120:	0100                	addi	s0,sp,128
    1122:	2105                	jal	1542 <product2+0xb2>
    1124:	0200                	addi	s0,sp,256
    1126:	0204                	addi	s1,sp,256
    1128:	0306                	slli	t1,t1,0x1
    112a:	097c                	addi	a5,sp,156
    112c:	0004                	0x4
    112e:	0501                	addi	a0,a0,0
    1130:	000d                	c.nop	3
    1132:	0402                	c.slli64	s0
    1134:	090a0303          	lb	t1,144(s4) # ffffa090 <_stack_start+0xfffea090>
    1138:	0002                	c.slli64	zero
    113a:	0501                	addi	a0,a0,0
    113c:	0030                	addi	a2,sp,8
    113e:	0402                	c.slli64	s0
    1140:	00030603          	lb	a2,0(t1)
    1144:	0009                	c.nop	2
    1146:	0100                	addi	s0,sp,128
    1148:	2705                	jal	1868 <result+0x180>
    114a:	0200                	addi	s0,sp,256
    114c:	0304                	addi	s1,sp,384
    114e:	06090003          	lb	zero,96(s2)
    1152:	0100                	addi	s0,sp,128
    1154:	2105                	jal	1574 <product2+0xe4>
    1156:	0200                	addi	s0,sp,256
    1158:	0304                	addi	s1,sp,384
    115a:	04097f03          	0x4097f03
    115e:	0100                	addi	s0,sp,128
    1160:	2705                	jal	1880 <result+0x198>
    1162:	0200                	addi	s0,sp,256
    1164:	0304                	addi	s1,sp,384
    1166:	04090103          	lb	sp,64(s2)
    116a:	0100                	addi	s0,sp,128
    116c:	1905                	addi	s2,s2,-31
    116e:	0200                	addi	s0,sp,256
    1170:	0304                	addi	s1,sp,384
    1172:	02090003          	lb	zero,32(s2)
    1176:	0100                	addi	s0,sp,128
    1178:	2105                	jal	1598 <product2+0x108>
    117a:	0200                	addi	s0,sp,256
    117c:	0304                	addi	s1,sp,384
    117e:	0306                	slli	t1,t1,0x1
    1180:	097f                	0x97f
    1182:	0004                	0x4
    1184:	0501                	addi	a0,a0,0
    1186:	0311                	addi	t1,t1,4
    1188:	0908                	addi	a0,sp,144
    118a:	0002                	c.slli64	zero
    118c:	0501                	addi	a0,a0,0
    118e:	0003062b          	0x3062b
    1192:	0009                	c.nop	2
    1194:	0100                	addi	s0,sp,128
    1196:	1d05                	addi	s10,s10,-31
    1198:	02090003          	lb	zero,32(s2)
    119c:	0100                	addi	s0,sp,128
    119e:	1305                	addi	t1,t1,-31
    11a0:	0306                	slli	t1,t1,0x1
    11a2:	097f                	0x97f
    11a4:	0002                	c.slli64	zero
    11a6:	0501                	addi	a0,a0,0
    11a8:	061c                	addi	a5,sp,768
    11aa:	00090003          	lb	zero,0(s2)
    11ae:	0100                	addi	s0,sp,128
    11b0:	1305                	addi	t1,t1,-31
    11b2:	02090003          	lb	zero,32(s2)
    11b6:	0100                	addi	s0,sp,128
    11b8:	0d05                	addi	s10,s10,1
    11ba:	0200                	addi	s0,sp,256
    11bc:	0204                	addi	s1,sp,256
    11be:	0306                	slli	t1,t1,0x1
    11c0:	00040903          	lb	s2,0(s0)
    11c4:	0501                	addi	a0,a0,0
    11c6:	04020027          	0x4020027
    11ca:	0602                	c.slli64	a2
    11cc:	00090003          	lb	zero,0(s2)
    11d0:	0100                	addi	s0,sp,128
    11d2:	2105                	jal	15f2 <product2+0x162>
    11d4:	0200                	addi	s0,sp,256
    11d6:	0204                	addi	s1,sp,256
    11d8:	04097c03          	0x4097c03
    11dc:	0100                	addi	s0,sp,128
    11de:	1905                	addi	s2,s2,-31
    11e0:	0200                	addi	s0,sp,256
    11e2:	0204                	addi	s1,sp,256
    11e4:	04090403          	lb	s0,64(s2)
    11e8:	0100                	addi	s0,sp,128
    11ea:	2105                	jal	160a <product2+0x17a>
    11ec:	0200                	addi	s0,sp,256
    11ee:	0204                	addi	s1,sp,256
    11f0:	0306                	slli	t1,t1,0x1
    11f2:	097c                	addi	a5,sp,156
    11f4:	0004                	0x4
    11f6:	0501                	addi	a0,a0,0
    11f8:	000d                	c.nop	3
    11fa:	0402                	c.slli64	s0
    11fc:	090a0303          	lb	t1,144(s4)
    1200:	0002                	c.slli64	zero
    1202:	0001                	nop
    1204:	0402                	c.slli64	s0
    1206:	09010303          	lb	t1,144(sp)
    120a:	0000                	unimp
    120c:	0501                	addi	a0,a0,0
    120e:	001c                	0x1c
    1210:	0402                	c.slli64	s0
    1212:	7f030603          	lb	a2,2032(t1)
    1216:	0009                	c.nop	2
    1218:	0100                	addi	s0,sp,128
    121a:	1905                	addi	s2,s2,-31
    121c:	0200                	addi	s0,sp,256
    121e:	0304                	addi	s1,sp,384
    1220:	06090003          	lb	zero,96(s2)
    1224:	0100                	addi	s0,sp,128
    1226:	2005                	jal	1246 <_bss_start+0xe>
    1228:	0200                	addi	s0,sp,256
    122a:	0304                	addi	s1,sp,384
    122c:	04097f03          	0x4097f03
    1230:	0100                	addi	s0,sp,128
    1232:	1905                	addi	s2,s2,-31
    1234:	0200                	addi	s0,sp,256
    1236:	0304                	addi	s1,sp,384
    1238:	04090103          	lb	sp,64(s2)
    123c:	0100                	addi	s0,sp,128
    123e:	0200                	addi	s0,sp,256
    1240:	0304                	addi	s1,sp,384
    1242:	02090103          	lb	sp,32(s2)
    1246:	0100                	addi	s0,sp,128
    1248:	1205                	addi	tp,tp,-31
    124a:	0200                	addi	s0,sp,256
    124c:	0304                	addi	s1,sp,384
    124e:	04090003          	lb	zero,64(s2)
    1252:	0100                	addi	s0,sp,128
    1254:	2005                	jal	1274 <_bss_start+0x3c>
    1256:	0200                	addi	s0,sp,256
    1258:	0304                	addi	s1,sp,384
    125a:	0306                	slli	t1,t1,0x1
    125c:	097e                	slli	s2,s2,0x1f
    125e:	0004                	0x4
    1260:	0501                	addi	a0,a0,0
    1262:	030d                	addi	t1,t1,3
    1264:	0909                	addi	s2,s2,2
    1266:	0002                	c.slli64	zero
    1268:	0501                	addi	a0,a0,0
    126a:	0003060f          	0x3060f
    126e:	0009                	c.nop	2
    1270:	0100                	addi	s0,sp,128
    1272:	2405                	jal	1492 <product2+0x2>
    1274:	0200                	addi	s0,sp,256
    1276:	0204                	addi	s1,sp,256
    1278:	0306                	slli	t1,t1,0x1
    127a:	097f                	0x97f
    127c:	0002                	c.slli64	zero
    127e:	0501                	addi	a0,a0,0
    1280:	0026                	c.slli	zero,0x9
    1282:	0402                	c.slli64	s0
    1284:	0602                	c.slli64	a2
    1286:	00090003          	lb	zero,0(s2)
    128a:	0100                	addi	s0,sp,128
    128c:	0d05                	addi	s10,s10,1
    128e:	0200                	addi	s0,sp,256
    1290:	0304                	addi	s1,sp,384
    1292:	0306                	slli	t1,t1,0x1
    1294:	0909                	addi	s2,s2,2
    1296:	0004                	0x4
    1298:	0501                	addi	a0,a0,0
    129a:	0012                	c.slli	zero,0x4
    129c:	0402                	c.slli64	s0
    129e:	00030603          	lb	a2,0(t1)
    12a2:	0009                	c.nop	2
    12a4:	0100                	addi	s0,sp,128
    12a6:	2105                	jal	16c6 <product2+0x236>
    12a8:	0200                	addi	s0,sp,256
    12aa:	0304                	addi	s1,sp,384
    12ac:	0306                	slli	t1,t1,0x1
    12ae:	097f                	0x97f
    12b0:	000a                	c.slli	zero,0x2
    12b2:	0501                	addi	a0,a0,0
    12b4:	0015                	c.nop	5
    12b6:	0402                	c.slli64	s0
    12b8:	0301                	addi	t1,t1,0
    12ba:	0900                	addi	s0,sp,144
    12bc:	0002                	c.slli64	zero
    12be:	0501                	addi	a0,a0,0
    12c0:	0009                	c.nop	2
    12c2:	0402                	c.slli64	s0
    12c4:	0601                	addi	a2,a2,0
    12c6:	00090003          	lb	zero,0(s2)
    12ca:	0100                	addi	s0,sp,128
    12cc:	0200                	addi	s0,sp,256
    12ce:	0304                	addi	s1,sp,384
    12d0:	0306                	slli	t1,t1,0x1
    12d2:	090d                	addi	s2,s2,3
    12d4:	0006                	c.slli	zero,0x1
    12d6:	0501                	addi	a0,a0,0
    12d8:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    12dc:	00030603          	lb	a2,0(t1)
    12e0:	0009                	c.nop	2
    12e2:	0100                	addi	s0,sp,128
    12e4:	2505                	jal	1904 <result+0x21c>
    12e6:	0200                	addi	s0,sp,256
    12e8:	0304                	addi	s1,sp,384
    12ea:	0306                	slli	t1,t1,0x1
    12ec:	097f                	0x97f
    12ee:	000c                	0xc
    12f0:	0501                	addi	a0,a0,0
    12f2:	033c                	addi	a5,sp,392
    12f4:	090a                	slli	s2,s2,0x2
    12f6:	0006                	c.slli	zero,0x1
    12f8:	0501                	addi	a0,a0,0
    12fa:	0305                	addi	t1,t1,1
    12fc:	0902                	c.slli64	s2
    12fe:	0000                	unimp
    1300:	0301                	addi	t1,t1,0
    1302:	0901                	addi	s2,s2,0
    1304:	0000                	unimp
    1306:	0301                	addi	t1,t1,0
    1308:	0901                	addi	s2,s2,0
    130a:	0000                	unimp
    130c:	0501                	addi	a0,a0,0
    130e:	0609                	addi	a2,a2,2
    1310:	00090003          	lb	zero,0(s2)
    1314:	0100                	addi	s0,sp,128
    1316:	3c05                	jal	d46 <ntru_deceypt+0xa0>
    1318:	04097c03          	0x4097c03
    131c:	0100                	addi	s0,sp,128
    131e:	0905                	addi	s2,s2,1
    1320:	02090403          	lb	s0,32(s2)
    1324:	0100                	addi	s0,sp,128
    1326:	3c05                	jal	d56 <ntru_deceypt+0xb0>
    1328:	04097c03          	0x4097c03
    132c:	0100                	addi	s0,sp,128
    132e:	0905                	addi	s2,s2,1
    1330:	1c090403          	lb	s0,448(s2)
    1334:	0100                	addi	s0,sp,128
    1336:	06090103          	lb	sp,96(s2)
    133a:	0100                	addi	s0,sp,128
    133c:	06090103          	lb	sp,96(s2)
    1340:	0100                	addi	s0,sp,128
    1342:	06090203          	lb	tp,96(s2)
    1346:	0100                	addi	s0,sp,128
    1348:	06090103          	lb	sp,96(s2)
    134c:	0100                	addi	s0,sp,128
    134e:	06090103          	lb	sp,96(s2)
    1352:	0100                	addi	s0,sp,128
    1354:	06090103          	lb	sp,96(s2)
    1358:	0100                	addi	s0,sp,128
    135a:	3c05                	jal	d8a <reset_handler+0x18>
    135c:	04097503          	0x4097503
    1360:	0100                	addi	s0,sp,128
    1362:	0905                	addi	s2,s2,1
    1364:	06090403          	lb	s0,96(s2)
    1368:	0100                	addi	s0,sp,128
    136a:	0505                	addi	a0,a0,1
    136c:	0306                	slli	t1,t1,0x1
    136e:	0901                	addi	s2,s2,0
    1370:	0004                	0x4
    1372:	0301                	addi	t1,t1,0
    1374:	0901                	addi	s2,s2,0
    1376:	0000                	unimp
    1378:	0301                	addi	t1,t1,0
    137a:	0902                	c.slli64	s2
    137c:	0000                	unimp
    137e:	0301                	addi	t1,t1,0
    1380:	0901                	addi	s2,s2,0
    1382:	0000                	unimp
    1384:	0301                	addi	t1,t1,0
    1386:	0901                	addi	s2,s2,0
    1388:	0000                	unimp
    138a:	0301                	addi	t1,t1,0
    138c:	0901                	addi	s2,s2,0
    138e:	0000                	unimp
    1390:	0501                	addi	a0,a0,0
    1392:	0609                	addi	a2,a2,2
    1394:	00090003          	lb	zero,0(s2)
    1398:	0100                	addi	s0,sp,128
    139a:	0505                	addi	a0,a0,1
    139c:	0306                	slli	t1,t1,0x1
    139e:	0901                	addi	s2,s2,0
    13a0:	0002                	c.slli64	zero
    13a2:	0301                	addi	t1,t1,0
    13a4:	0901                	addi	s2,s2,0
    13a6:	0000                	unimp
    13a8:	0301                	addi	t1,t1,0
    13aa:	0901                	addi	s2,s2,0
    13ac:	0000                	unimp
    13ae:	0301                	addi	t1,t1,0
    13b0:	0901                	addi	s2,s2,0
    13b2:	0000                	unimp
    13b4:	0301                	addi	t1,t1,0
    13b6:	0902                	c.slli64	s2
    13b8:	0000                	unimp
    13ba:	0301                	addi	t1,t1,0
    13bc:	0901                	addi	s2,s2,0
    13be:	0000                	unimp
    13c0:	0501                	addi	a0,a0,0
    13c2:	060c                	addi	a1,sp,768
    13c4:	00090003          	lb	zero,0(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	1105                	addi	sp,sp,-31
    13cc:	02090303          	lb	t1,32(s2)
    13d0:	0100                	addi	s0,sp,128
    13d2:	0200                	addi	s0,sp,256
    13d4:	0104                	addi	s1,sp,128
    13d6:	0306                	slli	t1,t1,0x1
    13d8:	097d                	addi	s2,s2,31
    13da:	0008                	0x8
    13dc:	0501                	addi	a0,a0,0
    13de:	0005                	c.nop	1
    13e0:	0402                	c.slli64	s0
    13e2:	0601                	addi	a2,a2,0
    13e4:	00090003          	lb	zero,0(s2)
    13e8:	0100                	addi	s0,sp,128
    13ea:	0306                	slli	t1,t1,0x1
    13ec:	0906                	slli	s2,s2,0x1
    13ee:	0004                	0x4
    13f0:	0301                	addi	t1,t1,0
    13f2:	0901                	addi	s2,s2,0
    13f4:	0008                	0x8
    13f6:	0301                	addi	t1,t1,0
    13f8:	0905                	addi	s2,s2,1
    13fa:	0008                	0x8
    13fc:	0501                	addi	a0,a0,0
    13fe:	060d                	addi	a2,a2,3
    1400:	00090003          	lb	zero,0(s2)
    1404:	0100                	addi	s0,sp,128
    1406:	0505                	addi	a0,a0,1
    1408:	0306                	slli	t1,t1,0x1
    140a:	00060903          	lb	s2,0(a2)
    140e:	0501                	addi	a0,a0,0
    1410:	0900030b          	0x900030b
    1414:	0000                	unimp
    1416:	0501                	addi	a0,a0,0
    1418:	0624                	addi	s1,sp,776
    141a:	00091603          	lh	a2,0(s2)
    141e:	0100                	addi	s0,sp,128
    1420:	1005                	c.nop	-31
    1422:	08096e03          	0x8096e03
    1426:	0100                	addi	s0,sp,128
    1428:	0905                	addi	s2,s2,1
    142a:	0200                	addi	s0,sp,256
    142c:	0304                	addi	s1,sp,384
    142e:	0306                	slli	t1,t1,0x1
    1430:	0970                	addi	a2,sp,156
    1432:	0004                	0x4
    1434:	0501                	addi	a0,a0,0
    1436:	0011                	c.nop	4
    1438:	0402                	c.slli64	s0
    143a:	00030603          	lb	a2,0(t1)
    143e:	0409                	addi	s0,s0,2
    1440:	0100                	addi	s0,sp,128
    1442:	0200                	addi	s0,sp,256
    1444:	0304                	addi	s1,sp,384
    1446:	04090103          	lb	sp,64(s2)
    144a:	0100                	addi	s0,sp,128
    144c:	0200                	addi	s0,sp,256
    144e:	0304                	addi	s1,sp,384
    1450:	02097f03          	0x2097f03
    1454:	0100                	addi	s0,sp,128
    1456:	0905                	addi	s2,s2,1
    1458:	0200                	addi	s0,sp,256
    145a:	0304                	addi	s1,sp,384
    145c:	0306                	slli	t1,t1,0x1
    145e:	0901                	addi	s2,s2,0
    1460:	0004                	0x4
    1462:	0501                	addi	a0,a0,0
    1464:	0011                	c.nop	4
    1466:	0402                	c.slli64	s0
    1468:	00030603          	lb	a2,0(t1)
    146c:	0009                	c.nop	2
    146e:	0100                	addi	s0,sp,128
    1470:	1b05                	addi	s6,s6,-31
    1472:	0200                	addi	s0,sp,256
    1474:	0304                	addi	s1,sp,384
    1476:	0306                	slli	t1,t1,0x1
    1478:	097c                	addi	a5,sp,156
    147a:	0004                	0x4
    147c:	0501                	addi	a0,a0,0
    147e:	0311                	addi	t1,t1,4
    1480:	0915                	addi	s2,s2,5
    1482:	0004                	0x4
    1484:	0501                	addi	a0,a0,0
    1486:	00030623          	sb	zero,12(t1)
    148a:	0009                	c.nop	2
    148c:	0100                	addi	s0,sp,128
    148e:	1905                	addi	s2,s2,-31
    1490:	02090003          	lb	zero,32(s2)
    1494:	0100                	addi	s0,sp,128
    1496:	1305                	addi	t1,t1,-31
    1498:	0306                	slli	t1,t1,0x1
    149a:	097f                	0x97f
    149c:	0002                	c.slli64	zero
    149e:	0501                	addi	a0,a0,0
    14a0:	0618                	addi	a4,sp,768
    14a2:	00090003          	lb	zero,0(s2)
    14a6:	0100                	addi	s0,sp,128
    14a8:	1305                	addi	t1,t1,-31
    14aa:	02090003          	lb	zero,32(s2)
    14ae:	0100                	addi	s0,sp,128
    14b0:	0d05                	addi	s10,s10,1
    14b2:	0200                	addi	s0,sp,256
    14b4:	0204                	addi	s1,sp,256
    14b6:	0306                	slli	t1,t1,0x1
    14b8:	00040903          	lb	s2,0(s0)
    14bc:	0501                	addi	a0,a0,0
    14be:	001f 0402 0602      	0x6020402001f
    14c4:	00090003          	lb	zero,0(s2)
    14c8:	0100                	addi	s0,sp,128
    14ca:	2005                	jal	14ea <product2+0x5a>
    14cc:	0200                	addi	s0,sp,256
    14ce:	0204                	addi	s1,sp,256
    14d0:	04097c03          	0x4097c03
    14d4:	0100                	addi	s0,sp,128
    14d6:	1505                	addi	a0,a0,-31
    14d8:	0200                	addi	s0,sp,256
    14da:	0204                	addi	s1,sp,256
    14dc:	02090403          	lb	s0,32(s2)
    14e0:	0100                	addi	s0,sp,128
    14e2:	2005                	jal	1502 <product2+0x72>
    14e4:	0200                	addi	s0,sp,256
    14e6:	0204                	addi	s1,sp,256
    14e8:	0306                	slli	t1,t1,0x1
    14ea:	097c                	addi	a5,sp,156
    14ec:	0002                	c.slli64	zero
    14ee:	0501                	addi	a0,a0,0
    14f0:	0015                	c.nop	5
    14f2:	0402                	c.slli64	s0
    14f4:	0301                	addi	t1,t1,0
    14f6:	0900                	addi	s0,sp,144
    14f8:	0000                	unimp
    14fa:	0501                	addi	a0,a0,0
    14fc:	0009                	c.nop	2
    14fe:	0402                	c.slli64	s0
    1500:	0601                	addi	a2,a2,0
    1502:	00090003          	lb	zero,0(s2)
    1506:	0100                	addi	s0,sp,128
    1508:	1005                	c.nop	-31
    150a:	0e090903          	lb	s2,224(s2)
    150e:	0100                	addi	s0,sp,128
    1510:	1505                	addi	a0,a0,-31
    1512:	0200                	addi	s0,sp,256
    1514:	0104                	addi	s1,sp,128
    1516:	0306                	slli	t1,t1,0x1
    1518:	0900                	addi	s0,sp,144
    151a:	0002                	c.slli64	zero
    151c:	0501                	addi	a0,a0,0
    151e:	0009                	c.nop	2
    1520:	0402                	c.slli64	s0
    1522:	0601                	addi	a2,a2,0
    1524:	00090003          	lb	zero,0(s2)
    1528:	0100                	addi	s0,sp,128
    152a:	0306                	slli	t1,t1,0x1
    152c:	0908                	addi	a0,sp,144
    152e:	0004                	0x4
    1530:	0501                	addi	a0,a0,0
    1532:	0003060f          	0x3060f
    1536:	0009                	c.nop	2
    1538:	0100                	addi	s0,sp,128
    153a:	0905                	addi	s2,s2,1
    153c:	0306                	slli	t1,t1,0x1
    153e:	0901                	addi	s2,s2,0
    1540:	000c                	0xc
    1542:	0501                	addi	a0,a0,0
    1544:	0019                	c.nop	6
    1546:	0402                	c.slli64	s0
    1548:	0301                	addi	t1,t1,0
    154a:	0900                	addi	s0,sp,144
    154c:	0004                	0x4
    154e:	0501                	addi	a0,a0,0
    1550:	0009                	c.nop	2
    1552:	0402                	c.slli64	s0
    1554:	0601                	addi	a2,a2,0
    1556:	00090003          	lb	zero,0(s2)
    155a:	0100                	addi	s0,sp,128
    155c:	1005                	c.nop	-31
    155e:	0a090603          	lb	a2,160(s2)
    1562:	0100                	addi	s0,sp,128
    1564:	1505                	addi	a0,a0,-31
    1566:	0200                	addi	s0,sp,256
    1568:	0104                	addi	s1,sp,128
    156a:	0306                	slli	t1,t1,0x1
    156c:	0900                	addi	s0,sp,144
    156e:	0002                	c.slli64	zero
    1570:	0501                	addi	a0,a0,0
    1572:	0009                	c.nop	2
    1574:	0402                	c.slli64	s0
    1576:	0601                	addi	a2,a2,0
    1578:	00090003          	lb	zero,0(s2)
    157c:	0100                	addi	s0,sp,128
    157e:	06090003          	lb	zero,96(s2)
    1582:	0100                	addi	s0,sp,128
    1584:	1005                	c.nop	-31
    1586:	02090603          	lb	a2,32(s2)
    158a:	0100                	addi	s0,sp,128
    158c:	1505                	addi	a0,a0,-31
    158e:	0200                	addi	s0,sp,256
    1590:	0104                	addi	s1,sp,128
    1592:	0306                	slli	t1,t1,0x1
    1594:	0900                	addi	s0,sp,144
    1596:	0002                	c.slli64	zero
    1598:	0501                	addi	a0,a0,0
    159a:	0009                	c.nop	2
    159c:	0402                	c.slli64	s0
    159e:	0601                	addi	a2,a2,0
    15a0:	00090003          	lb	zero,0(s2)
    15a4:	0100                	addi	s0,sp,128
    15a6:	0306                	slli	t1,t1,0x1
    15a8:	00040907          	0x40907
    15ac:	0501                	addi	a0,a0,0
    15ae:	0610                	addi	a2,sp,768
    15b0:	00090003          	lb	zero,0(s2)
    15b4:	0100                	addi	s0,sp,128
    15b6:	0505                	addi	a0,a0,1
    15b8:	0306                	slli	t1,t1,0x1
    15ba:	0904                	addi	s1,sp,144
    15bc:	000e                	c.slli	zero,0x3
    15be:	0501                	addi	a0,a0,0
    15c0:	0309                	addi	t1,t1,2
    15c2:	00060903          	lb	s2,0(a2)
    15c6:	0501                	addi	a0,a0,0
    15c8:	0610                	addi	a2,sp,768
    15ca:	02090003          	lb	zero,32(s2)
    15ce:	0100                	addi	s0,sp,128
    15d0:	1505                	addi	a0,a0,-31
    15d2:	0200                	addi	s0,sp,256
    15d4:	0104                	addi	s1,sp,128
    15d6:	0306                	slli	t1,t1,0x1
    15d8:	0900                	addi	s0,sp,144
    15da:	0002                	c.slli64	zero
    15dc:	0501                	addi	a0,a0,0
    15de:	0009                	c.nop	2
    15e0:	0402                	c.slli64	s0
    15e2:	0601                	addi	a2,a2,0
    15e4:	00090003          	lb	zero,0(s2)
    15e8:	0100                	addi	s0,sp,128
    15ea:	0306                	slli	t1,t1,0x1
    15ec:	090a                	slli	s2,s2,0x2
    15ee:	0004                	0x4
    15f0:	0501                	addi	a0,a0,0
    15f2:	0610                	addi	a2,sp,768
    15f4:	00090003          	lb	zero,0(s2)
    15f8:	0100                	addi	s0,sp,128
    15fa:	0505                	addi	a0,a0,1
    15fc:	0306                	slli	t1,t1,0x1
    15fe:	0904                	addi	s1,sp,144
    1600:	0010                	0x10
    1602:	0501                	addi	a0,a0,0
    1604:	0309                	addi	t1,t1,2
    1606:	00060903          	lb	s2,0(a2)
    160a:	0501                	addi	a0,a0,0
    160c:	0610                	addi	a2,sp,768
    160e:	00090003          	lb	zero,0(s2)
    1612:	0100                	addi	s0,sp,128
    1614:	1505                	addi	a0,a0,-31
    1616:	0200                	addi	s0,sp,256
    1618:	0104                	addi	s1,sp,128
    161a:	0306                	slli	t1,t1,0x1
    161c:	0900                	addi	s0,sp,144
    161e:	0002                	c.slli64	zero
    1620:	0501                	addi	a0,a0,0
    1622:	0009                	c.nop	2
    1624:	0402                	c.slli64	s0
    1626:	0601                	addi	a2,a2,0
    1628:	00090003          	lb	zero,0(s2)
    162c:	0100                	addi	s0,sp,128
    162e:	1005                	c.nop	-31
    1630:	06090803          	lb	a6,96(s2)
    1634:	0100                	addi	s0,sp,128
    1636:	1505                	addi	a0,a0,-31
    1638:	0200                	addi	s0,sp,256
    163a:	0104                	addi	s1,sp,128
    163c:	0306                	slli	t1,t1,0x1
    163e:	0900                	addi	s0,sp,144
    1640:	0002                	c.slli64	zero
    1642:	0501                	addi	a0,a0,0
    1644:	0009                	c.nop	2
    1646:	0402                	c.slli64	s0
    1648:	0601                	addi	a2,a2,0
    164a:	00090003          	lb	zero,0(s2)
    164e:	0100                	addi	s0,sp,128
    1650:	1005                	c.nop	-31
    1652:	06090503          	lb	a0,96(s2)
    1656:	0100                	addi	s0,sp,128
    1658:	1505                	addi	a0,a0,-31
    165a:	0200                	addi	s0,sp,256
    165c:	0104                	addi	s1,sp,128
    165e:	0306                	slli	t1,t1,0x1
    1660:	0900                	addi	s0,sp,144
    1662:	0002                	c.slli64	zero
    1664:	0501                	addi	a0,a0,0
    1666:	0009                	c.nop	2
    1668:	0402                	c.slli64	s0
    166a:	0601                	addi	a2,a2,0
    166c:	00090003          	lb	zero,0(s2)
    1670:	0100                	addi	s0,sp,128
    1672:	0105                	addi	sp,sp,1
    1674:	0306                	slli	t1,t1,0x1
    1676:	090a                	slli	s2,s2,0x2
    1678:	0004                	0x4
    167a:	0301                	addi	t1,t1,0
    167c:	0901                	addi	s2,s2,0
    167e:	0008                	0x8
    1680:	0301                	addi	t1,t1,0
    1682:	0901                	addi	s2,s2,0
    1684:	0008                	0x8
    1686:	0301                	addi	t1,t1,0
    1688:	0901                	addi	s2,s2,0
    168a:	000e                	c.slli	zero,0x3
    168c:	0501                	addi	a0,a0,0
    168e:	0309                	addi	t1,t1,2
    1690:	0902                	c.slli64	s2
    1692:	0008                	0x8
    1694:	0501                	addi	a0,a0,0
    1696:	0612                	slli	a2,a2,0x4
    1698:	097fa503          	lw	a0,151(t6)
    169c:	0000                	unimp
    169e:	0501                	addi	a0,a0,0
    16a0:	0310                	addi	a2,sp,384
    16a2:	020900db          	0x20900db
    16a6:	0100                	addi	s0,sp,128
    16a8:	1505                	addi	a0,a0,-31
    16aa:	0200                	addi	s0,sp,256
    16ac:	0104                	addi	s1,sp,128
    16ae:	0306                	slli	t1,t1,0x1
    16b0:	0900                	addi	s0,sp,144
    16b2:	0002                	c.slli64	zero
    16b4:	0501                	addi	a0,a0,0
    16b6:	0009                	c.nop	2
    16b8:	0402                	c.slli64	s0
    16ba:	0601                	addi	a2,a2,0
    16bc:	00090003          	lb	zero,0(s2)
    16c0:	0100                	addi	s0,sp,128
    16c2:	0b05                	addi	s6,s6,1
    16c4:	0306                	slli	t1,t1,0x1
    16c6:	04097fa3          	0x4097fa3
    16ca:	0100                	addi	s0,sp,128
    16cc:	1005                	c.nop	-31
    16ce:	0306                	slli	t1,t1,0x1
    16d0:	00e8                	addi	a0,sp,76
    16d2:	0409                	addi	s0,s0,2
    16d4:	0100                	addi	s0,sp,128
    16d6:	02090103          	lb	sp,32(s2)
    16da:	0100                	addi	s0,sp,128
    16dc:	1505                	addi	a0,a0,-31
    16de:	0200                	addi	s0,sp,256
    16e0:	0104                	addi	s1,sp,128
    16e2:	0306                	slli	t1,t1,0x1
    16e4:	097f                	0x97f
    16e6:	0002                	c.slli64	zero
    16e8:	0501                	addi	a0,a0,0
    16ea:	0009                	c.nop	2
    16ec:	0402                	c.slli64	s0
    16ee:	0601                	addi	a2,a2,0
    16f0:	00090003          	lb	zero,0(s2)
    16f4:	0100                	addi	s0,sp,128
    16f6:	1505                	addi	a0,a0,-31
    16f8:	0200                	addi	s0,sp,256
    16fa:	0104                	addi	s1,sp,128
    16fc:	0306                	slli	t1,t1,0x1
    16fe:	090c                	addi	a1,sp,144
    1700:	000c                	0xc
    1702:	0501                	addi	a0,a0,0
    1704:	0009                	c.nop	2
    1706:	0402                	c.slli64	s0
    1708:	0601                	addi	a2,a2,0
    170a:	00090003          	lb	zero,0(s2)
    170e:	0100                	addi	s0,sp,128
    1710:	0306                	slli	t1,t1,0x1
    1712:	0905                	addi	s2,s2,1
    1714:	0004                	0x4
    1716:	0301                	addi	t1,t1,0
    1718:	0901                	addi	s2,s2,0
    171a:	0000                	unimp
    171c:	0501                	addi	a0,a0,0
    171e:	0605                	addi	a2,a2,1
    1720:	00090103          	lb	sp,0(s2)
    1724:	0100                	addi	s0,sp,128
    1726:	1105                	addi	sp,sp,-31
    1728:	0306                	slli	t1,t1,0x1
    172a:	7f94                	flw	fa3,56(a5)
    172c:	2a09                	jal	183e <result+0x156>
    172e:	0100                	addi	s0,sp,128
    1730:	2305                	jal	1c50 <random_keys+0x180>
    1732:	0306                	slli	t1,t1,0x1
    1734:	0900                	addi	s0,sp,144
    1736:	0000                	unimp
    1738:	0501                	addi	a0,a0,0
    173a:	0319                	addi	t1,t1,6
    173c:	0900                	addi	s0,sp,144
    173e:	0002                	c.slli64	zero
    1740:	0501                	addi	a0,a0,0
    1742:	7f030613          	addi	a2,t1,2032
    1746:	0209                	addi	tp,tp,2
    1748:	0100                	addi	s0,sp,128
    174a:	1805                	addi	a6,a6,-31
    174c:	0306                	slli	t1,t1,0x1
    174e:	0900                	addi	s0,sp,144
    1750:	0000                	unimp
    1752:	0501                	addi	a0,a0,0
    1754:	09000313          	li	t1,144
    1758:	0002                	c.slli64	zero
    175a:	0501                	addi	a0,a0,0
    175c:	000d                	c.nop	3
    175e:	0402                	c.slli64	s0
    1760:	0602                	c.slli64	a2
    1762:	04090303          	lb	t1,64(s2)
    1766:	0100                	addi	s0,sp,128
    1768:	1f05                	addi	t5,t5,-31
    176a:	0200                	addi	s0,sp,256
    176c:	0204                	addi	s1,sp,256
    176e:	0306                	slli	t1,t1,0x1
    1770:	0900                	addi	s0,sp,144
    1772:	0000                	unimp
    1774:	0501                	addi	a0,a0,0
    1776:	0020                	addi	s0,sp,8
    1778:	0402                	c.slli64	s0
    177a:	0302                	c.slli64	t1
    177c:	097c                	addi	a5,sp,156
    177e:	0004                	0x4
    1780:	0501                	addi	a0,a0,0
    1782:	0015                	c.nop	5
    1784:	0402                	c.slli64	s0
    1786:	0302                	c.slli64	t1
    1788:	0904                	addi	s1,sp,144
    178a:	0004                	0x4
    178c:	0501                	addi	a0,a0,0
    178e:	0020                	addi	s0,sp,8
    1790:	0402                	c.slli64	s0
    1792:	0602                	c.slli64	a2
    1794:	04097c03          	0x4097c03
    1798:	0100                	addi	s0,sp,128
    179a:	0d05                	addi	s10,s10,1
    179c:	0200                	addi	s0,sp,256
    179e:	0304                	addi	s1,sp,384
    17a0:	02090a03          	lb	s4,32(s2)
    17a4:	0100                	addi	s0,sp,128
    17a6:	2205                	jal	18c6 <result+0x1de>
    17a8:	0200                	addi	s0,sp,256
    17aa:	0304                	addi	s1,sp,384
    17ac:	0306                	slli	t1,t1,0x1
    17ae:	0900                	addi	s0,sp,144
    17b0:	0000                	unimp
    17b2:	0501                	addi	a0,a0,0
    17b4:	002a                	c.slli	zero,0xa
    17b6:	0402                	c.slli64	s0
    17b8:	097f0303          	lb	t1,151(t5)
    17bc:	0008                	0x8
    17be:	0501                	addi	a0,a0,0
    17c0:	001d                	c.nop	7
    17c2:	0402                	c.slli64	s0
    17c4:	09010303          	lb	t1,144(sp)
    17c8:	0004                	0x4
    17ca:	0501                	addi	a0,a0,0
    17cc:	002a                	c.slli	zero,0xa
    17ce:	0402                	c.slli64	s0
    17d0:	7f030603          	lb	a2,2032(t1)
    17d4:	0409                	addi	s0,s0,2
    17d6:	0100                	addi	s0,sp,128
    17d8:	0d05                	addi	s10,s10,1
    17da:	0200                	addi	s0,sp,256
    17dc:	0304                	addi	s1,sp,384
    17de:	02090703          	lb	a4,32(s2)
    17e2:	0100                	addi	s0,sp,128
    17e4:	1b05                	addi	s6,s6,-31
    17e6:	0200                	addi	s0,sp,256
    17e8:	0304                	addi	s1,sp,384
    17ea:	0306                	slli	t1,t1,0x1
    17ec:	0900                	addi	s0,sp,144
    17ee:	0000                	unimp
    17f0:	0501                	addi	a0,a0,0
    17f2:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    17f6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    17fa:	0004                	0x4
    17fc:	0501                	addi	a0,a0,0
    17fe:	001f 0402 0303      	0x3030402001f
    1804:	0900                	addi	s0,sp,144
    1806:	0004                	0x4
    1808:	0501                	addi	a0,a0,0
    180a:	0015                	c.nop	5
    180c:	0402                	c.slli64	s0
    180e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1812:	0004                	0x4
    1814:	0501                	addi	a0,a0,0
    1816:	0020                	addi	s0,sp,8
    1818:	0402                	c.slli64	s0
    181a:	097f0303          	lb	t1,151(t5)
    181e:	0004                	0x4
    1820:	0501                	addi	a0,a0,0
    1822:	001f 0402 0303      	0x3030402001f
    1828:	0901                	addi	s2,s2,0
    182a:	0002                	c.slli64	zero
    182c:	0501                	addi	a0,a0,0
    182e:	0015                	c.nop	5
    1830:	0402                	c.slli64	s0
    1832:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1836:	0002                	c.slli64	zero
    1838:	0501                	addi	a0,a0,0
    183a:	0020                	addi	s0,sp,8
    183c:	0402                	c.slli64	s0
    183e:	7f030603          	lb	a2,2032(t1)
    1842:	0209                	addi	tp,tp,2
    1844:	0100                	addi	s0,sp,128
    1846:	1105                	addi	sp,sp,-31
    1848:	04090803          	lb	a6,64(s2)
    184c:	0100                	addi	s0,sp,128
    184e:	2305                	jal	1d6e <random_keys+0x29e>
    1850:	0306                	slli	t1,t1,0x1
    1852:	0900                	addi	s0,sp,144
    1854:	0000                	unimp
    1856:	0501                	addi	a0,a0,0
    1858:	0319                	addi	t1,t1,6
    185a:	0900                	addi	s0,sp,144
    185c:	0002                	c.slli64	zero
    185e:	0501                	addi	a0,a0,0
    1860:	7f030613          	addi	a2,t1,2032
    1864:	0209                	addi	tp,tp,2
    1866:	0100                	addi	s0,sp,128
    1868:	1805                	addi	a6,a6,-31
    186a:	0306                	slli	t1,t1,0x1
    186c:	0900                	addi	s0,sp,144
    186e:	0000                	unimp
    1870:	0501                	addi	a0,a0,0
    1872:	09000313          	li	t1,144
    1876:	0002                	c.slli64	zero
    1878:	0501                	addi	a0,a0,0
    187a:	000d                	c.nop	3
    187c:	0402                	c.slli64	s0
    187e:	0602                	c.slli64	a2
    1880:	04090303          	lb	t1,64(s2)
    1884:	0100                	addi	s0,sp,128
    1886:	1f05                	addi	t5,t5,-31
    1888:	0200                	addi	s0,sp,256
    188a:	0204                	addi	s1,sp,256
    188c:	0306                	slli	t1,t1,0x1
    188e:	0900                	addi	s0,sp,144
    1890:	0000                	unimp
    1892:	0501                	addi	a0,a0,0
    1894:	0020                	addi	s0,sp,8
    1896:	0402                	c.slli64	s0
    1898:	0302                	c.slli64	t1
    189a:	097c                	addi	a5,sp,156
    189c:	0004                	0x4
    189e:	0501                	addi	a0,a0,0
    18a0:	0015                	c.nop	5
    18a2:	0402                	c.slli64	s0
    18a4:	0302                	c.slli64	t1
    18a6:	0904                	addi	s1,sp,144
    18a8:	0004                	0x4
    18aa:	0501                	addi	a0,a0,0
    18ac:	0020                	addi	s0,sp,8
    18ae:	0402                	c.slli64	s0
    18b0:	0602                	c.slli64	a2
    18b2:	04097c03          	0x4097c03
    18b6:	0100                	addi	s0,sp,128
    18b8:	1105                	addi	sp,sp,-31
    18ba:	02091003          	lh	zero,32(s2)
    18be:	0100                	addi	s0,sp,128
    18c0:	2305                	jal	1de0 <random_keys+0x310>
    18c2:	0306                	slli	t1,t1,0x1
    18c4:	0900                	addi	s0,sp,144
    18c6:	0000                	unimp
    18c8:	0501                	addi	a0,a0,0
    18ca:	0319                	addi	t1,t1,6
    18cc:	0900                	addi	s0,sp,144
    18ce:	0002                	c.slli64	zero
    18d0:	0501                	addi	a0,a0,0
    18d2:	7f030613          	addi	a2,t1,2032
    18d6:	0209                	addi	tp,tp,2
    18d8:	0100                	addi	s0,sp,128
    18da:	1805                	addi	a6,a6,-31
    18dc:	0306                	slli	t1,t1,0x1
    18de:	0900                	addi	s0,sp,144
    18e0:	0000                	unimp
    18e2:	0501                	addi	a0,a0,0
    18e4:	09000313          	li	t1,144
    18e8:	0002                	c.slli64	zero
    18ea:	0501                	addi	a0,a0,0
    18ec:	000d                	c.nop	3
    18ee:	0402                	c.slli64	s0
    18f0:	0602                	c.slli64	a2
    18f2:	04090303          	lb	t1,64(s2)
    18f6:	0100                	addi	s0,sp,128
    18f8:	1f05                	addi	t5,t5,-31
    18fa:	0200                	addi	s0,sp,256
    18fc:	0204                	addi	s1,sp,256
    18fe:	0306                	slli	t1,t1,0x1
    1900:	0900                	addi	s0,sp,144
    1902:	0000                	unimp
    1904:	0501                	addi	a0,a0,0
    1906:	0020                	addi	s0,sp,8
    1908:	0402                	c.slli64	s0
    190a:	0302                	c.slli64	t1
    190c:	097c                	addi	a5,sp,156
    190e:	0004                	0x4
    1910:	0501                	addi	a0,a0,0
    1912:	0015                	c.nop	5
    1914:	0402                	c.slli64	s0
    1916:	0302                	c.slli64	t1
    1918:	0904                	addi	s1,sp,144
    191a:	0004                	0x4
    191c:	0501                	addi	a0,a0,0
    191e:	0020                	addi	s0,sp,8
    1920:	0402                	c.slli64	s0
    1922:	0602                	c.slli64	a2
    1924:	04097c03          	0x4097c03
    1928:	0100                	addi	s0,sp,128
    192a:	1105                	addi	sp,sp,-31
    192c:	02091303          	lh	t1,32(s2)
    1930:	0100                	addi	s0,sp,128
    1932:	2305                	jal	1e52 <random_keys+0x382>
    1934:	0306                	slli	t1,t1,0x1
    1936:	0900                	addi	s0,sp,144
    1938:	0000                	unimp
    193a:	0501                	addi	a0,a0,0
    193c:	0319                	addi	t1,t1,6
    193e:	0900                	addi	s0,sp,144
    1940:	0002                	c.slli64	zero
    1942:	0501                	addi	a0,a0,0
    1944:	7f030613          	addi	a2,t1,2032
    1948:	0409                	addi	s0,s0,2
    194a:	0100                	addi	s0,sp,128
    194c:	1805                	addi	a6,a6,-31
    194e:	0306                	slli	t1,t1,0x1
    1950:	0900                	addi	s0,sp,144
    1952:	0000                	unimp
    1954:	0501                	addi	a0,a0,0
    1956:	09000313          	li	t1,144
    195a:	0004                	0x4
    195c:	0501                	addi	a0,a0,0
    195e:	000d                	c.nop	3
    1960:	0402                	c.slli64	s0
    1962:	0602                	c.slli64	a2
    1964:	04090303          	lb	t1,64(s2)
    1968:	0100                	addi	s0,sp,128
    196a:	1f05                	addi	t5,t5,-31
    196c:	0200                	addi	s0,sp,256
    196e:	0204                	addi	s1,sp,256
    1970:	0306                	slli	t1,t1,0x1
    1972:	0900                	addi	s0,sp,144
    1974:	0000                	unimp
    1976:	0501                	addi	a0,a0,0
    1978:	0020                	addi	s0,sp,8
    197a:	0402                	c.slli64	s0
    197c:	0302                	c.slli64	t1
    197e:	097c                	addi	a5,sp,156
    1980:	0004                	0x4
    1982:	0501                	addi	a0,a0,0
    1984:	0015                	c.nop	5
    1986:	0402                	c.slli64	s0
    1988:	0302                	c.slli64	t1
    198a:	0904                	addi	s1,sp,144
    198c:	0004                	0x4
    198e:	0501                	addi	a0,a0,0
    1990:	0020                	addi	s0,sp,8
    1992:	0402                	c.slli64	s0
    1994:	0602                	c.slli64	a2
    1996:	04097c03          	0x4097c03
    199a:	0100                	addi	s0,sp,128
    199c:	0d05                	addi	s10,s10,1
    199e:	0200                	addi	s0,sp,256
    19a0:	0304                	addi	s1,sp,384
    19a2:	02090903          	lb	s2,32(s2)
    19a6:	0100                	addi	s0,sp,128
    19a8:	1905                	addi	s2,s2,-31
    19aa:	0200                	addi	s0,sp,256
    19ac:	0304                	addi	s1,sp,384
    19ae:	0306                	slli	t1,t1,0x1
    19b0:	0900                	addi	s0,sp,144
    19b2:	0000                	unimp
    19b4:	0501                	addi	a0,a0,0
    19b6:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    19ba:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    19be:	000a                	c.slli	zero,0x2
    19c0:	0501                	addi	a0,a0,0
    19c2:	001d                	c.nop	7
    19c4:	0402                	c.slli64	s0
    19c6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    19ca:	0004                	0x4
    19cc:	0501                	addi	a0,a0,0
    19ce:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    19d2:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    19d6:	0004                	0x4
    19d8:	0501                	addi	a0,a0,0
    19da:	0020                	addi	s0,sp,8
    19dc:	0402                	c.slli64	s0
    19de:	097f0303          	lb	t1,151(t5)
    19e2:	0004                	0x4
    19e4:	0501                	addi	a0,a0,0
    19e6:	001d                	c.nop	7
    19e8:	0402                	c.slli64	s0
    19ea:	09010303          	lb	t1,144(sp)
    19ee:	0002                	c.slli64	zero
    19f0:	0501                	addi	a0,a0,0
    19f2:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    19f6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    19fa:	0002                	c.slli64	zero
    19fc:	0501                	addi	a0,a0,0
    19fe:	0020                	addi	s0,sp,8
    1a00:	0402                	c.slli64	s0
    1a02:	7f030603          	lb	a2,2032(t1)
    1a06:	0209                	addi	tp,tp,2
    1a08:	0100                	addi	s0,sp,128
    1a0a:	1105                	addi	sp,sp,-31
    1a0c:	04090703          	lb	a4,64(s2)
    1a10:	0100                	addi	s0,sp,128
    1a12:	1f05                	addi	t5,t5,-31
    1a14:	0306                	slli	t1,t1,0x1
    1a16:	0900                	addi	s0,sp,144
    1a18:	0000                	unimp
    1a1a:	0501                	addi	a0,a0,0
    1a1c:	09000317          	auipc	t1,0x9000
    1a20:	0002                	c.slli64	zero
    1a22:	0501                	addi	a0,a0,0
    1a24:	7f030613          	addi	a2,t1,2032 # 900220c <_stack_start+0x8ff220c>
    1a28:	0209                	addi	tp,tp,2
    1a2a:	0100                	addi	s0,sp,128
    1a2c:	1605                	addi	a2,a2,-31
    1a2e:	0306                	slli	t1,t1,0x1
    1a30:	0900                	addi	s0,sp,144
    1a32:	0000                	unimp
    1a34:	0501                	addi	a0,a0,0
    1a36:	09000313          	li	t1,144
    1a3a:	0002                	c.slli64	zero
    1a3c:	0501                	addi	a0,a0,0
    1a3e:	000d                	c.nop	3
    1a40:	0402                	c.slli64	s0
    1a42:	0602                	c.slli64	a2
    1a44:	04090303          	lb	t1,64(s2)
    1a48:	0100                	addi	s0,sp,128
    1a4a:	1b05                	addi	s6,s6,-31
    1a4c:	0200                	addi	s0,sp,256
    1a4e:	0204                	addi	s1,sp,256
    1a50:	0306                	slli	t1,t1,0x1
    1a52:	0900                	addi	s0,sp,144
    1a54:	0000                	unimp
    1a56:	0501                	addi	a0,a0,0
    1a58:	0020                	addi	s0,sp,8
    1a5a:	0402                	c.slli64	s0
    1a5c:	0302                	c.slli64	t1
    1a5e:	097c                	addi	a5,sp,156
    1a60:	0004                	0x4
    1a62:	0501                	addi	a0,a0,0
    1a64:	04020013          	addi	zero,tp,64 # 40 <__DYNAMIC+0x40>
    1a68:	0302                	c.slli64	t1
    1a6a:	0904                	addi	s1,sp,144
    1a6c:	0004                	0x4
    1a6e:	0501                	addi	a0,a0,0
    1a70:	0020                	addi	s0,sp,8
    1a72:	0402                	c.slli64	s0
    1a74:	0602                	c.slli64	a2
    1a76:	04097c03          	0x4097c03
    1a7a:	0100                	addi	s0,sp,128
    1a7c:	0f05                	addi	t5,t5,1
    1a7e:	0200                	addi	s0,sp,256
    1a80:	0304                	addi	s1,sp,384
    1a82:	02091403          	lh	s0,32(s2)
    1a86:	0100                	addi	s0,sp,128
    1a88:	1705                	addi	a4,a4,-31
    1a8a:	0200                	addi	s0,sp,256
    1a8c:	0304                	addi	s1,sp,384
    1a8e:	0306                	slli	t1,t1,0x1
    1a90:	0900                	addi	s0,sp,144
    1a92:	0004                	0x4
    1a94:	0501                	addi	a0,a0,0
    1a96:	0402001b          	0x402001b
    1a9a:	09010303          	lb	t1,144(sp)
    1a9e:	0004                	0x4
    1aa0:	0501                	addi	a0,a0,0
    1aa2:	0016                	c.slli	zero,0x5
    1aa4:	0402                	c.slli64	s0
    1aa6:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1aaa:	0002                	c.slli64	zero
    1aac:	0501                	addi	a0,a0,0
    1aae:	04020017          	auipc	zero,0x4020
    1ab2:	097f0303          	lb	t1,151(t5)
    1ab6:	0002                	c.slli64	zero
    1ab8:	0501                	addi	a0,a0,0
    1aba:	000d                	c.nop	3
    1abc:	0402                	c.slli64	s0
    1abe:	01030603          	lb	a2,16(t1)
    1ac2:	0409                	addi	s0,s0,2
    1ac4:	0100                	addi	s0,sp,128
    1ac6:	2005                	jal	1ae6 <random_keys+0x16>
    1ac8:	0200                	addi	s0,sp,256
    1aca:	0304                	addi	s1,sp,384
    1acc:	0306                	slli	t1,t1,0x1
    1ace:	097a                	slli	s2,s2,0x1e
    1ad0:	0000                	unimp
    1ad2:	0501                	addi	a0,a0,0
    1ad4:	0016                	c.slli	zero,0x5
    1ad6:	0402                	c.slli64	s0
    1ad8:	09060303          	lb	t1,144(a2)
    1adc:	0002                	c.slli64	zero
    1ade:	0501                	addi	a0,a0,0
    1ae0:	0020                	addi	s0,sp,8
    1ae2:	0402                	c.slli64	s0
    1ae4:	7a030603          	lb	a2,1952(t1)
    1ae8:	0209                	addi	tp,tp,2
    1aea:	0100                	addi	s0,sp,128
    1aec:	0d05                	addi	s10,s10,1
    1aee:	02090c03          	lb	s8,32(s2)
    1af2:	0100                	addi	s0,sp,128
    1af4:	1b05                	addi	s6,s6,-31
    1af6:	0306                	slli	t1,t1,0x1
    1af8:	0900                	addi	s0,sp,144
    1afa:	0000                	unimp
    1afc:	0501                	addi	a0,a0,0
    1afe:	0320                	addi	s0,sp,392
    1b00:	0900                	addi	s0,sp,144
    1b02:	0008                	0x8
    1b04:	0501                	addi	a0,a0,0
    1b06:	0310                	addi	a2,sp,384
    1b08:	0900                	addi	s0,sp,144
    1b0a:	0004                	0x4
    1b0c:	0501                	addi	a0,a0,0
    1b0e:	001e                	c.slli	zero,0x7
    1b10:	0402                	c.slli64	s0
    1b12:	0602                	c.slli64	a2
    1b14:	04097f03          	0x4097f03
    1b18:	0100                	addi	s0,sp,128
    1b1a:	0d05                	addi	s10,s10,1
    1b1c:	0200                	addi	s0,sp,256
    1b1e:	0304                	addi	s1,sp,384
    1b20:	04090d03          	lb	s10,64(s2)
    1b24:	0100                	addi	s0,sp,128
    1b26:	2005                	jal	1b46 <random_keys+0x76>
    1b28:	0200                	addi	s0,sp,256
    1b2a:	0304                	addi	s1,sp,384
    1b2c:	0306                	slli	t1,t1,0x1
    1b2e:	0900                	addi	s0,sp,144
    1b30:	0000                	unimp
    1b32:	0001                	nop
    1b34:	0402                	c.slli64	s0
    1b36:	097f0303          	lb	t1,151(t5)
    1b3a:	0002                	c.slli64	zero
    1b3c:	0001                	nop
    1b3e:	0402                	c.slli64	s0
    1b40:	09010303          	lb	t1,144(sp)
    1b44:	0004                	0x4
    1b46:	0501                	addi	a0,a0,0
    1b48:	0025                	c.nop	9
    1b4a:	0402                	c.slli64	s0
    1b4c:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b50:	0004                	0x4
    1b52:	0501                	addi	a0,a0,0
    1b54:	0015                	c.nop	5
    1b56:	0402                	c.slli64	s0
    1b58:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    1b5c:	0004                	0x4
    1b5e:	0501                	addi	a0,a0,0
    1b60:	0020                	addi	s0,sp,8
    1b62:	0402                	c.slli64	s0
    1b64:	7f030603          	lb	a2,2032(t1)
    1b68:	0409                	addi	s0,s0,2
    1b6a:	0100                	addi	s0,sp,128
    1b6c:	2805                	jal	1b9c <random_keys+0xcc>
    1b6e:	02090c03          	lb	s8,32(s2)
    1b72:	0100                	addi	s0,sp,128
    1b74:	0505                	addi	a0,a0,1
    1b76:	00090203          	lb	tp,0(s2)
    1b7a:	0100                	addi	s0,sp,128
    1b7c:	2805                	jal	1bac <random_keys+0xdc>
    1b7e:	0306                	slli	t1,t1,0x1
    1b80:	097e                	slli	s2,s2,0x1f
    1b82:	0000                	unimp
    1b84:	0301                	addi	t1,t1,0
    1b86:	0900                	addi	s0,sp,144
    1b88:	0036                	c.slli	zero,0xd
    1b8a:	0501                	addi	a0,a0,0
    1b8c:	0309                	addi	t1,t1,2
    1b8e:	0902                	c.slli64	s2
    1b90:	0004                	0x4
    1b92:	0301                	addi	t1,t1,0
    1b94:	0901                	addi	s2,s2,0
    1b96:	0010                	0x10
    1b98:	0301                	addi	t1,t1,0
    1b9a:	097f                	0x97f
    1b9c:	000a                	c.slli	zero,0x2
    1b9e:	0501                	addi	a0,a0,0
    1ba0:	0605                	addi	a2,a2,1
    1ba2:	6c090103          	lb	sp,1728(s2)
    1ba6:	0100                	addi	s0,sp,128
    1ba8:	1005                	c.nop	-31
    1baa:	0306                	slli	t1,t1,0x1
    1bac:	0906                	slli	s2,s2,0x1
    1bae:	0000                	unimp
    1bb0:	0501                	addi	a0,a0,0
    1bb2:	0309                	addi	t1,t1,2
    1bb4:	097a                	slli	s2,s2,0x1e
    1bb6:	0004                	0x4
    1bb8:	0301                	addi	t1,t1,0
    1bba:	0906                	slli	s2,s2,0x1
    1bbc:	0002                	c.slli64	zero
    1bbe:	0501                	addi	a0,a0,0
    1bc0:	030e                	slli	t1,t1,0x3
    1bc2:	0905                	addi	s2,s2,1
    1bc4:	000e                	c.slli	zero,0x3
    1bc6:	0501                	addi	a0,a0,0
    1bc8:	0309                	addi	t1,t1,2
    1bca:	0975                	addi	s2,s2,29
    1bcc:	000a                	c.slli	zero,0x2
    1bce:	0501                	addi	a0,a0,0
    1bd0:	0605                	addi	a2,a2,1
    1bd2:	64090203          	lb	tp,1600(s2)
    1bd6:	0100                	addi	s0,sp,128
    1bd8:	00090103          	lb	sp,0(s2)
    1bdc:	0100                	addi	s0,sp,128
    1bde:	00090103          	lb	sp,0(s2)
    1be2:	0100                	addi	s0,sp,128
    1be4:	00090103          	lb	sp,0(s2)
    1be8:	0100                	addi	s0,sp,128
    1bea:	00090103          	lb	sp,0(s2)
    1bee:	0100                	addi	s0,sp,128
    1bf0:	00090103          	lb	sp,0(s2)
    1bf4:	0100                	addi	s0,sp,128
    1bf6:	00090103          	lb	sp,0(s2)
    1bfa:	0100                	addi	s0,sp,128
    1bfc:	00090303          	lb	t1,0(s2)
    1c00:	0100                	addi	s0,sp,128
    1c02:	00090103          	lb	sp,0(s2)
    1c06:	0100                	addi	s0,sp,128
    1c08:	0e05                	addi	t3,t3,1
    1c0a:	0306                	slli	t1,t1,0x1
    1c0c:	0900                	addi	s0,sp,144
    1c0e:	0000                	unimp
    1c10:	0501                	addi	a0,a0,0
    1c12:	0605                	addi	a2,a2,1
    1c14:	04090203          	lb	tp,64(s2)
    1c18:	0100                	addi	s0,sp,128
    1c1a:	0b05                	addi	s6,s6,1
    1c1c:	0306                	slli	t1,t1,0x1
    1c1e:	0900                	addi	s0,sp,144
    1c20:	0000                	unimp
    1c22:	0501                	addi	a0,a0,0
    1c24:	0010                	0x10
    1c26:	0402                	c.slli64	s0
    1c28:	0601                	addi	a2,a2,0
    1c2a:	02090003          	lb	zero,32(s2)
    1c2e:	0100                	addi	s0,sp,128
    1c30:	0505                	addi	a0,a0,1
    1c32:	0200                	addi	s0,sp,256
    1c34:	0104                	addi	s1,sp,128
    1c36:	0306                	slli	t1,t1,0x1
    1c38:	0900                	addi	s0,sp,144
    1c3a:	0000                	unimp
    1c3c:	0301                	addi	t1,t1,0
    1c3e:	0906                	slli	s2,s2,0x1
    1c40:	0006                	c.slli	zero,0x1
    1c42:	0501                	addi	a0,a0,0
    1c44:	0011                	c.nop	4
    1c46:	0402                	c.slli64	s0
    1c48:	0601                	addi	a2,a2,0
    1c4a:	04090003          	lb	zero,64(s2)
    1c4e:	0100                	addi	s0,sp,128
    1c50:	0505                	addi	a0,a0,1
    1c52:	0200                	addi	s0,sp,256
    1c54:	0104                	addi	s1,sp,128
    1c56:	0306                	slli	t1,t1,0x1
    1c58:	0900                	addi	s0,sp,144
    1c5a:	0000                	unimp
    1c5c:	0501                	addi	a0,a0,0
    1c5e:	0907030b          	0x907030b
    1c62:	0004                	0x4
    1c64:	0501                	addi	a0,a0,0
    1c66:	0318                	addi	a4,sp,384
    1c68:	0901                	addi	s2,s2,0
    1c6a:	0002                	c.slli64	zero
    1c6c:	0501                	addi	a0,a0,0
    1c6e:	0010                	0x10
    1c70:	0402                	c.slli64	s0
    1c72:	0601                	addi	a2,a2,0
    1c74:	08097f03          	0x8097f03
    1c78:	0100                	addi	s0,sp,128
    1c7a:	0505                	addi	a0,a0,1
    1c7c:	0200                	addi	s0,sp,256
    1c7e:	0104                	addi	s1,sp,128
    1c80:	0306                	slli	t1,t1,0x1
    1c82:	0900                	addi	s0,sp,144
    1c84:	0000                	unimp
    1c86:	0501                	addi	a0,a0,0
    1c88:	0316                	slli	t1,t1,0x5
    1c8a:	0905                	addi	s2,s2,1
    1c8c:	0008                	0x8
    1c8e:	0501                	addi	a0,a0,0
    1c90:	0318                	addi	a4,sp,384
    1c92:	0901                	addi	s2,s2,0
    1c94:	0008                	0x8
    1c96:	0501                	addi	a0,a0,0
    1c98:	0010                	0x10
    1c9a:	0402                	c.slli64	s0
    1c9c:	0601                	addi	a2,a2,0
    1c9e:	08097f03          	0x8097f03
    1ca2:	0100                	addi	s0,sp,128
    1ca4:	0505                	addi	a0,a0,1
    1ca6:	0200                	addi	s0,sp,256
    1ca8:	0104                	addi	s1,sp,128
    1caa:	0306                	slli	t1,t1,0x1
    1cac:	0900                	addi	s0,sp,144
    1cae:	0000                	unimp
    1cb0:	0601                	addi	a2,a2,0
    1cb2:	04090503          	lb	a0,64(s2)
    1cb6:	0100                	addi	s0,sp,128
    1cb8:	1a05                	addi	s4,s4,-31
    1cba:	0306                	slli	t1,t1,0x1
    1cbc:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1cc0:	0501                	addi	a0,a0,0
    1cc2:	030a                	slli	t1,t1,0x2
    1cc4:	097d                	addi	s2,s2,31
    1cc6:	0006                	c.slli	zero,0x1
    1cc8:	0501                	addi	a0,a0,0
    1cca:	0605                	addi	a2,a2,1
    1ccc:	0c090303          	lb	t1,192(s2)
    1cd0:	0100                	addi	s0,sp,128
    1cd2:	1805                	addi	a6,a6,-31
    1cd4:	0306                	slli	t1,t1,0x1
    1cd6:	0901                	addi	s2,s2,0
    1cd8:	0002                	c.slli64	zero
    1cda:	0501                	addi	a0,a0,0
    1cdc:	0014                	0x14
    1cde:	0402                	c.slli64	s0
    1ce0:	0601                	addi	a2,a2,0
    1ce2:	08097f03          	0x8097f03
    1ce6:	0100                	addi	s0,sp,128
    1ce8:	0505                	addi	a0,a0,1
    1cea:	0200                	addi	s0,sp,256
    1cec:	0104                	addi	s1,sp,128
    1cee:	0306                	slli	t1,t1,0x1
    1cf0:	0900                	addi	s0,sp,144
    1cf2:	0000                	unimp
    1cf4:	0601                	addi	a2,a2,0
    1cf6:	04090603          	lb	a2,64(s2)
    1cfa:	0100                	addi	s0,sp,128
    1cfc:	0a05                	addi	s4,s4,1
    1cfe:	0306                	slli	t1,t1,0x1
    1d00:	0900                	addi	s0,sp,144
    1d02:	0000                	unimp
    1d04:	0501                	addi	a0,a0,0
    1d06:	0605                	addi	a2,a2,1
    1d08:	0c090403          	lb	s0,192(s2)
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	1a05                	addi	s4,s4,-31
    1d10:	0306                	slli	t1,t1,0x1
    1d12:	0900                	addi	s0,sp,144
    1d14:	0006                	c.slli	zero,0x1
    1d16:	0501                	addi	a0,a0,0
    1d18:	0318                	addi	a4,sp,384
    1d1a:	0901                	addi	s2,s2,0
    1d1c:	0002                	c.slli64	zero
    1d1e:	0501                	addi	a0,a0,0
    1d20:	0014                	0x14
    1d22:	0402                	c.slli64	s0
    1d24:	0601                	addi	a2,a2,0
    1d26:	08097f03          	0x8097f03
    1d2a:	0100                	addi	s0,sp,128
    1d2c:	0505                	addi	a0,a0,1
    1d2e:	0200                	addi	s0,sp,256
    1d30:	0104                	addi	s1,sp,128
    1d32:	0306                	slli	t1,t1,0x1
    1d34:	0900                	addi	s0,sp,144
    1d36:	0000                	unimp
    1d38:	0601                	addi	a2,a2,0
    1d3a:	04090503          	lb	a0,64(s2)
    1d3e:	0100                	addi	s0,sp,128
    1d40:	0a05                	addi	s4,s4,1
    1d42:	0306                	slli	t1,t1,0x1
    1d44:	0900                	addi	s0,sp,144
    1d46:	0000                	unimp
    1d48:	0501                	addi	a0,a0,0
    1d4a:	0605                	addi	a2,a2,1
    1d4c:	0c090303          	lb	t1,192(s2)
    1d50:	0100                	addi	s0,sp,128
    1d52:	0b05                	addi	s6,s6,1
    1d54:	0306                	slli	t1,t1,0x1
    1d56:	0900                	addi	s0,sp,144
    1d58:	0002                	c.slli64	zero
    1d5a:	0501                	addi	a0,a0,0
    1d5c:	0318                	addi	a4,sp,384
    1d5e:	0900                	addi	s0,sp,144
    1d60:	0002                	c.slli64	zero
    1d62:	0501                	addi	a0,a0,0
    1d64:	0010                	0x10
    1d66:	0402                	c.slli64	s0
    1d68:	0601                	addi	a2,a2,0
    1d6a:	04090003          	lb	zero,64(s2)
    1d6e:	0100                	addi	s0,sp,128
    1d70:	0505                	addi	a0,a0,1
    1d72:	0200                	addi	s0,sp,256
    1d74:	0104                	addi	s1,sp,128
    1d76:	0306                	slli	t1,t1,0x1
    1d78:	0900                	addi	s0,sp,144
    1d7a:	0000                	unimp
    1d7c:	0601                	addi	a2,a2,0
    1d7e:	04090603          	lb	a2,64(s2)
    1d82:	0100                	addi	s0,sp,128
    1d84:	0a05                	addi	s4,s4,1
    1d86:	0306                	slli	t1,t1,0x1
    1d88:	0900                	addi	s0,sp,144
    1d8a:	0000                	unimp
    1d8c:	0501                	addi	a0,a0,0
    1d8e:	0605                	addi	a2,a2,1
    1d90:	08090403          	lb	s0,128(s2)
    1d94:	0100                	addi	s0,sp,128
    1d96:	1a05                	addi	s4,s4,-31
    1d98:	0306                	slli	t1,t1,0x1
    1d9a:	0900                	addi	s0,sp,144
    1d9c:	0000                	unimp
    1d9e:	0501                	addi	a0,a0,0
    1da0:	0318                	addi	a4,sp,384
    1da2:	0901                	addi	s2,s2,0
    1da4:	000a                	c.slli	zero,0x2
    1da6:	0501                	addi	a0,a0,0
    1da8:	0014                	0x14
    1daa:	0402                	c.slli64	s0
    1dac:	0601                	addi	a2,a2,0
    1dae:	08097f03          	0x8097f03
    1db2:	0100                	addi	s0,sp,128
    1db4:	0505                	addi	a0,a0,1
    1db6:	0200                	addi	s0,sp,256
    1db8:	0104                	addi	s1,sp,128
    1dba:	0306                	slli	t1,t1,0x1
    1dbc:	0900                	addi	s0,sp,144
    1dbe:	0002                	c.slli64	zero
    1dc0:	0501                	addi	a0,a0,0
    1dc2:	031a                	slli	t1,t1,0x6
    1dc4:	0905                	addi	s2,s2,1
    1dc6:	0004                	0x4
    1dc8:	0501                	addi	a0,a0,0
    1dca:	0318                	addi	a4,sp,384
    1dcc:	0901                	addi	s2,s2,0
    1dce:	0004                	0x4
    1dd0:	0501                	addi	a0,a0,0
    1dd2:	031a                	slli	t1,t1,0x6
    1dd4:	097f                	0x97f
    1dd6:	0008                	0x8
    1dd8:	0501                	addi	a0,a0,0
    1dda:	0014                	0x14
    1ddc:	0402                	c.slli64	s0
    1dde:	0601                	addi	a2,a2,0
    1de0:	08090003          	lb	zero,128(s2)
    1de4:	0100                	addi	s0,sp,128
    1de6:	0505                	addi	a0,a0,1
    1de8:	0200                	addi	s0,sp,256
    1dea:	0104                	addi	s1,sp,128
    1dec:	0306                	slli	t1,t1,0x1
    1dee:	0900                	addi	s0,sp,144
    1df0:	0000                	unimp
    1df2:	0601                	addi	a2,a2,0
    1df4:	04090603          	lb	a2,64(s2)
    1df8:	0100                	addi	s0,sp,128
    1dfa:	00090203          	lb	tp,0(s2)
    1dfe:	0100                	addi	s0,sp,128
    1e00:	0105                	addi	sp,sp,1
    1e02:	0306                	slli	t1,t1,0x1
    1e04:	0901                	addi	s2,s2,0
    1e06:	0000                	unimp
    1e08:	0501                	addi	a0,a0,0
    1e0a:	0009                	c.nop	2
    1e0c:	0402                	c.slli64	s0
    1e0e:	bd030603          	lb	a2,-1072(t1)
    1e12:	097f                	0x97f
    1e14:	0040                	addi	s0,sp,4
    1e16:	0501                	addi	a0,a0,0
    1e18:	0012                	c.slli	zero,0x4
    1e1a:	0402                	c.slli64	s0
    1e1c:	00030603          	lb	a2,0(t1)
    1e20:	0009                	c.nop	2
    1e22:	0100                	addi	s0,sp,128
    1e24:	1705                	addi	a4,a4,-31
    1e26:	0200                	addi	s0,sp,256
    1e28:	0304                	addi	s1,sp,384
    1e2a:	0306                	slli	t1,t1,0x1
    1e2c:	097f                	0x97f
    1e2e:	000a                	c.slli	zero,0x2
    1e30:	0501                	addi	a0,a0,0
    1e32:	0009                	c.nop	2
    1e34:	0402                	c.slli64	s0
    1e36:	09070303          	lb	t1,144(a4)
    1e3a:	0004                	0x4
    1e3c:	0501                	addi	a0,a0,0
    1e3e:	000e                	c.slli	zero,0x3
    1e40:	0402                	c.slli64	s0
    1e42:	00030603          	lb	a2,0(t1)
    1e46:	0409                	addi	s0,s0,2
    1e48:	0100                	addi	s0,sp,128
    1e4a:	0905                	addi	s2,s2,1
    1e4c:	0200                	addi	s0,sp,256
    1e4e:	0304                	addi	s1,sp,384
    1e50:	0306                	slli	t1,t1,0x1
    1e52:	0901                	addi	s2,s2,0
    1e54:	000a                	c.slli	zero,0x2
    1e56:	0501                	addi	a0,a0,0
    1e58:	000e                	c.slli	zero,0x3
    1e5a:	0402                	c.slli64	s0
    1e5c:	00030603          	lb	a2,0(t1)
    1e60:	0009                	c.nop	2
    1e62:	0100                	addi	s0,sp,128
    1e64:	1905                	addi	s2,s2,-31
    1e66:	0200                	addi	s0,sp,256
    1e68:	0304                	addi	s1,sp,384
    1e6a:	0306                	slli	t1,t1,0x1
    1e6c:	097e                	slli	s2,s2,0x1f
    1e6e:	000a                	c.slli	zero,0x2
    1e70:	0501                	addi	a0,a0,0
    1e72:	0009                	c.nop	2
    1e74:	0402                	c.slli64	s0
    1e76:	09080303          	lb	t1,144(a6)
    1e7a:	0004                	0x4
    1e7c:	0501                	addi	a0,a0,0
    1e7e:	0402001b          	0x402001b
    1e82:	00030603          	lb	a2,0(t1)
    1e86:	0409                	addi	s0,s0,2
    1e88:	0100                	addi	s0,sp,128
    1e8a:	1805                	addi	a6,a6,-31
    1e8c:	0200                	addi	s0,sp,256
    1e8e:	0304                	addi	s1,sp,384
    1e90:	04090003          	lb	zero,64(s2)
    1e94:	0100                	addi	s0,sp,128
    1e96:	1b05                	addi	s6,s6,-31
    1e98:	0200                	addi	s0,sp,256
    1e9a:	0304                	addi	s1,sp,384
    1e9c:	04090003          	lb	zero,64(s2)
    1ea0:	0100                	addi	s0,sp,128
    1ea2:	1805                	addi	a6,a6,-31
    1ea4:	0200                	addi	s0,sp,256
    1ea6:	0304                	addi	s1,sp,384
    1ea8:	02090003          	lb	zero,32(s2)
    1eac:	0100                	addi	s0,sp,128
    1eae:	1705                	addi	a4,a4,-31
    1eb0:	0200                	addi	s0,sp,256
    1eb2:	0304                	addi	s1,sp,384
    1eb4:	02097f03          	0x2097f03
    1eb8:	0100                	addi	s0,sp,128
    1eba:	1805                	addi	a6,a6,-31
    1ebc:	0200                	addi	s0,sp,256
    1ebe:	0304                	addi	s1,sp,384
    1ec0:	02090103          	lb	sp,32(s2)
    1ec4:	0100                	addi	s0,sp,128
    1ec6:	1705                	addi	a4,a4,-31
    1ec8:	0200                	addi	s0,sp,256
    1eca:	0304                	addi	s1,sp,384
    1ecc:	0306                	slli	t1,t1,0x1
    1ece:	097f                	0x97f
    1ed0:	0002                	c.slli64	zero
    1ed2:	0501                	addi	a0,a0,0
    1ed4:	0009                	c.nop	2
    1ed6:	0402                	c.slli64	s0
    1ed8:	09060303          	lb	t1,144(a2)
    1edc:	0002                	c.slli64	zero
    1ede:	0501                	addi	a0,a0,0
    1ee0:	0018                	0x18
    1ee2:	0402                	c.slli64	s0
    1ee4:	00030603          	lb	a2,0(t1)
    1ee8:	0009                	c.nop	2
    1eea:	0100                	addi	s0,sp,128
    1eec:	1b05                	addi	s6,s6,-31
    1eee:	0200                	addi	s0,sp,256
    1ef0:	0304                	addi	s1,sp,384
    1ef2:	0306                	slli	t1,t1,0x1
    1ef4:	097f                	0x97f
    1ef6:	000a                	c.slli	zero,0x2
    1ef8:	0501                	addi	a0,a0,0
    1efa:	0009                	c.nop	2
    1efc:	0402                	c.slli64	s0
    1efe:	09090303          	lb	t1,144(s2)
    1f02:	0006                	c.slli	zero,0x1
    1f04:	0501                	addi	a0,a0,0
    1f06:	001c                	0x1c
    1f08:	0402                	c.slli64	s0
    1f0a:	00030603          	lb	a2,0(t1)
    1f0e:	0009                	c.nop	2
    1f10:	0100                	addi	s0,sp,128
    1f12:	1805                	addi	a6,a6,-31
    1f14:	0200                	addi	s0,sp,256
    1f16:	0304                	addi	s1,sp,384
    1f18:	02090003          	lb	zero,32(s2)
    1f1c:	0100                	addi	s0,sp,128
    1f1e:	1f05                	addi	t5,t5,-31
    1f20:	0200                	addi	s0,sp,256
    1f22:	0304                	addi	s1,sp,384
    1f24:	0306                	slli	t1,t1,0x1
    1f26:	097f                	0x97f
    1f28:	0008                	0x8
    1f2a:	0501                	addi	a0,a0,0
    1f2c:	0009                	c.nop	2
    1f2e:	0402                	c.slli64	s0
    1f30:	090b0303          	lb	t1,144(s6)
    1f34:	0006                	c.slli	zero,0x1
    1f36:	0501                	addi	a0,a0,0
    1f38:	001c                	0x1c
    1f3a:	0402                	c.slli64	s0
    1f3c:	00030603          	lb	a2,0(t1)
    1f40:	0409                	addi	s0,s0,2
    1f42:	0100                	addi	s0,sp,128
    1f44:	1805                	addi	a6,a6,-31
    1f46:	0200                	addi	s0,sp,256
    1f48:	0304                	addi	s1,sp,384
    1f4a:	08090003          	lb	zero,128(s2)
    1f4e:	0100                	addi	s0,sp,128
    1f50:	1f05                	addi	t5,t5,-31
    1f52:	0200                	addi	s0,sp,256
    1f54:	0304                	addi	s1,sp,384
    1f56:	02097f03          	0x2097f03
    1f5a:	0100                	addi	s0,sp,128
    1f5c:	1805                	addi	a6,a6,-31
    1f5e:	0200                	addi	s0,sp,256
    1f60:	0304                	addi	s1,sp,384
    1f62:	02090103          	lb	sp,32(s2)
    1f66:	0100                	addi	s0,sp,128
    1f68:	1f05                	addi	t5,t5,-31
    1f6a:	0200                	addi	s0,sp,256
    1f6c:	0304                	addi	s1,sp,384
    1f6e:	0306                	slli	t1,t1,0x1
    1f70:	097f                	0x97f
    1f72:	0002                	c.slli64	zero
    1f74:	0501                	addi	a0,a0,0
    1f76:	0009                	c.nop	2
    1f78:	0402                	c.slli64	s0
    1f7a:	09090303          	lb	t1,144(s2)
    1f7e:	0002                	c.slli64	zero
    1f80:	0501                	addi	a0,a0,0
    1f82:	0016                	c.slli	zero,0x5
    1f84:	0402                	c.slli64	s0
    1f86:	00030603          	lb	a2,0(t1)
    1f8a:	0009                	c.nop	2
    1f8c:	0100                	addi	s0,sp,128
    1f8e:	1d05                	addi	s10,s10,-31
    1f90:	0200                	addi	s0,sp,256
    1f92:	0304                	addi	s1,sp,384
    1f94:	02097f03          	0x2097f03
    1f98:	0100                	addi	s0,sp,128
    1f9a:	1605                	addi	a2,a2,-31
    1f9c:	0200                	addi	s0,sp,256
    1f9e:	0304                	addi	s1,sp,384
    1fa0:	04090103          	lb	sp,64(s2)
    1fa4:	0100                	addi	s0,sp,128
    1fa6:	0f05                	addi	t5,t5,1
    1fa8:	0200                	addi	s0,sp,256
    1faa:	0304                	addi	s1,sp,384
    1fac:	04090003          	lb	zero,64(s2)
    1fb0:	0100                	addi	s0,sp,128
    1fb2:	1d05                	addi	s10,s10,-31
    1fb4:	0200                	addi	s0,sp,256
    1fb6:	0304                	addi	s1,sp,384
    1fb8:	0306                	slli	t1,t1,0x1
    1fba:	097f                	0x97f
    1fbc:	0004                	0x4
    1fbe:	0501                	addi	a0,a0,0
    1fc0:	0009                	c.nop	2
    1fc2:	0402                	c.slli64	s0
    1fc4:	090b0303          	lb	t1,144(s6)
    1fc8:	0002                	c.slli64	zero
    1fca:	0501                	addi	a0,a0,0
    1fcc:	001c                	0x1c
    1fce:	0402                	c.slli64	s0
    1fd0:	00030603          	lb	a2,0(t1)
    1fd4:	0009                	c.nop	2
    1fd6:	0100                	addi	s0,sp,128
    1fd8:	1805                	addi	a6,a6,-31
    1fda:	0200                	addi	s0,sp,256
    1fdc:	0304                	addi	s1,sp,384
    1fde:	04090003          	lb	zero,64(s2)
    1fe2:	0100                	addi	s0,sp,128
    1fe4:	1f05                	addi	t5,t5,-31
    1fe6:	0200                	addi	s0,sp,256
    1fe8:	0304                	addi	s1,sp,384
    1fea:	0306                	slli	t1,t1,0x1
    1fec:	097f                	0x97f
    1fee:	0008                	0x8
    1ff0:	0501                	addi	a0,a0,0
    1ff2:	0009                	c.nop	2
    1ff4:	0402                	c.slli64	s0
    1ff6:	09060303          	lb	t1,144(a2)
    1ffa:	0004                	0x4
    1ffc:	0501                	addi	a0,a0,0
    1ffe:	0018                	0x18
    2000:	0402                	c.slli64	s0
    2002:	00030603          	lb	a2,0(t1)
    2006:	0409                	addi	s0,s0,2
    2008:	0100                	addi	s0,sp,128
    200a:	1f05                	addi	t5,t5,-31
    200c:	0200                	addi	s0,sp,256
    200e:	0304                	addi	s1,sp,384
    2010:	04090003          	lb	zero,64(s2)
    2014:	0100                	addi	s0,sp,128
    2016:	1805                	addi	a6,a6,-31
    2018:	0200                	addi	s0,sp,256
    201a:	0304                	addi	s1,sp,384
    201c:	04090003          	lb	zero,64(s2)
    2020:	0100                	addi	s0,sp,128
    2022:	2105                	jal	2442 <_min_stack+0x442>
    2024:	0200                	addi	s0,sp,256
    2026:	0304                	addi	s1,sp,384
    2028:	02097f03          	0x2097f03
    202c:	0100                	addi	s0,sp,128
    202e:	1805                	addi	a6,a6,-31
    2030:	0200                	addi	s0,sp,256
    2032:	0304                	addi	s1,sp,384
    2034:	02090103          	lb	sp,32(s2)
    2038:	0100                	addi	s0,sp,128
    203a:	2105                	jal	245a <_min_stack+0x45a>
    203c:	0200                	addi	s0,sp,256
    203e:	0304                	addi	s1,sp,384
    2040:	0306                	slli	t1,t1,0x1
    2042:	097f                	0x97f
    2044:	0002                	c.slli64	zero
    2046:	0501                	addi	a0,a0,0
    2048:	090c034b          	fnmsub.s	ft6,fs8,fa6,ft1,rne
    204c:	0002                	c.slli64	zero
    204e:	0501                	addi	a0,a0,0
    2050:	0305                	addi	t1,t1,1
    2052:	0902                	c.slli64	s2
    2054:	0000                	unimp
    2056:	0301                	addi	t1,t1,0
    2058:	0901                	addi	s2,s2,0
    205a:	0000                	unimp
    205c:	0301                	addi	t1,t1,0
    205e:	0902                	c.slli64	s2
    2060:	0000                	unimp
    2062:	0501                	addi	a0,a0,0
    2064:	7b03064b          	fnmsub.d	fa2,ft6,fa6,fa5,rne
    2068:	0009                	c.nop	2
    206a:	0100                	addi	s0,sp,128
    206c:	0905                	addi	s2,s2,1
    206e:	0e090503          	lb	a0,224(s2)
    2072:	0100                	addi	s0,sp,128
    2074:	4b05                	li	s6,1
    2076:	0e097b03          	0xe097b03
    207a:	0100                	addi	s0,sp,128
    207c:	06090003          	lb	zero,96(s2)
    2080:	0100                	addi	s0,sp,128
    2082:	0905                	addi	s2,s2,1
    2084:	04090503          	lb	a0,64(s2)
    2088:	0100                	addi	s0,sp,128
    208a:	0505                	addi	a0,a0,1
    208c:	0306                	slli	t1,t1,0x1
    208e:	0901                	addi	s2,s2,0
    2090:	0002                	c.slli64	zero
    2092:	0301                	addi	t1,t1,0
    2094:	0901                	addi	s2,s2,0
    2096:	0000                	unimp
    2098:	0301                	addi	t1,t1,0
    209a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    209e:	0501                	addi	a0,a0,0
    20a0:	060c                	addi	a1,sp,768
    20a2:	00090003          	lb	zero,0(s2)
    20a6:	0100                	addi	s0,sp,128
    20a8:	0505                	addi	a0,a0,1
    20aa:	0306                	slli	t1,t1,0x1
    20ac:	0904                	addi	s1,sp,144
    20ae:	0012                	c.slli	zero,0x4
    20b0:	0501                	addi	a0,a0,0
    20b2:	0310                	addi	a2,sp,384
    20b4:	0900                	addi	s0,sp,144
    20b6:	0000                	unimp
    20b8:	0501                	addi	a0,a0,0
    20ba:	060c                	addi	a1,sp,768
    20bc:	00097c03          	0x97c03
    20c0:	0100                	addi	s0,sp,128
    20c2:	0505                	addi	a0,a0,1
    20c4:	02090403          	lb	s0,32(s2)
    20c8:	0100                	addi	s0,sp,128
    20ca:	0905                	addi	s2,s2,1
    20cc:	0200                	addi	s0,sp,256
    20ce:	0304                	addi	s1,sp,384
    20d0:	0306                	slli	t1,t1,0x1
    20d2:	0901                	addi	s2,s2,0
    20d4:	0004                	0x4
    20d6:	0501                	addi	a0,a0,0
    20d8:	0024                	addi	s1,sp,8
    20da:	0402                	c.slli64	s0
    20dc:	00030603          	lb	a2,0(t1)
    20e0:	0409                	addi	s0,s0,2
    20e2:	0100                	addi	s0,sp,128
    20e4:	1b05                	addi	s6,s6,-31
    20e6:	0200                	addi	s0,sp,256
    20e8:	0304                	addi	s1,sp,384
    20ea:	04090003          	lb	zero,64(s2)
    20ee:	0100                	addi	s0,sp,128
    20f0:	1105                	addi	sp,sp,-31
    20f2:	0200                	addi	s0,sp,256
    20f4:	0304                	addi	s1,sp,384
    20f6:	08090003          	lb	zero,128(s2)
    20fa:	0100                	addi	s0,sp,128
    20fc:	1805                	addi	a6,a6,-31
    20fe:	0200                	addi	s0,sp,256
    2100:	0304                	addi	s1,sp,384
    2102:	0306                	slli	t1,t1,0x1
    2104:	097f                	0x97f
    2106:	0002                	c.slli64	zero
    2108:	0501                	addi	a0,a0,0
    210a:	0010                	0x10
    210c:	0402                	c.slli64	s0
    210e:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2112:	0000                	unimp
    2114:	0501                	addi	a0,a0,0
    2116:	0005                	c.nop	1
    2118:	0402                	c.slli64	s0
    211a:	00030603          	lb	a2,0(t1)
    211e:	0009                	c.nop	2
    2120:	0100                	addi	s0,sp,128
    2122:	0306                	slli	t1,t1,0x1
    2124:	0906                	slli	s2,s2,0x1
    2126:	0004                	0x4
    2128:	0501                	addi	a0,a0,0
    212a:	060a                	slli	a2,a2,0x2
    212c:	00090003          	lb	zero,0(s2)
    2130:	0100                	addi	s0,sp,128
    2132:	0505                	addi	a0,a0,1
    2134:	0306                	slli	t1,t1,0x1
    2136:	0902                	c.slli64	s2
    2138:	0012                	c.slli	zero,0x4
    213a:	0501                	addi	a0,a0,0
    213c:	061a                	slli	a2,a2,0x6
    213e:	00090003          	lb	zero,0(s2)
    2142:	0100                	addi	s0,sp,128
    2144:	1405                	addi	s0,s0,-31
    2146:	0200                	addi	s0,sp,256
    2148:	0104                	addi	s1,sp,128
    214a:	0306                	slli	t1,t1,0x1
    214c:	0900                	addi	s0,sp,144
    214e:	0008                	0x8
    2150:	0501                	addi	a0,a0,0
    2152:	0005                	c.nop	1
    2154:	0402                	c.slli64	s0
    2156:	0601                	addi	a2,a2,0
    2158:	00090003          	lb	zero,0(s2)
    215c:	0100                	addi	s0,sp,128
    215e:	0105                	addi	sp,sp,1
    2160:	04090903          	lb	s2,64(s2)
    2164:	0100                	addi	s0,sp,128
    2166:	0905                	addi	s2,s2,1
    2168:	0200                	addi	s0,sp,256
    216a:	0304                	addi	s1,sp,384
    216c:	0306                	slli	t1,t1,0x1
    216e:	0978                	addi	a4,sp,156
    2170:	0010                	0x10
    2172:	0501                	addi	a0,a0,0
    2174:	0019                	c.nop	6
    2176:	0402                	c.slli64	s0
    2178:	00030603          	lb	a2,0(t1)
    217c:	0009                	c.nop	2
    217e:	0100                	addi	s0,sp,128
    2180:	1f05                	addi	t5,t5,-31
    2182:	0200                	addi	s0,sp,256
    2184:	0304                	addi	s1,sp,384
    2186:	08097f03          	0x8097f03
    218a:	0100                	addi	s0,sp,128
    218c:	1505                	addi	a0,a0,-31
    218e:	0200                	addi	s0,sp,256
    2190:	0304                	addi	s1,sp,384
    2192:	04090103          	lb	sp,64(s2)
    2196:	0100                	addi	s0,sp,128
    2198:	1f05                	addi	t5,t5,-31
    219a:	0200                	addi	s0,sp,256
    219c:	0304                	addi	s1,sp,384
    219e:	0306                	slli	t1,t1,0x1
    21a0:	097f                	0x97f
    21a2:	0004                	0x4
    21a4:	0501                	addi	a0,a0,0
    21a6:	036c                	addi	a1,sp,396
    21a8:	090c                	addi	a1,sp,144
    21aa:	0002                	c.slli64	zero
    21ac:	0501                	addi	a0,a0,0
    21ae:	0305                	addi	t1,t1,1
    21b0:	0902                	c.slli64	s2
    21b2:	0000                	unimp
    21b4:	0301                	addi	t1,t1,0
    21b6:	0901                	addi	s2,s2,0
    21b8:	0000                	unimp
    21ba:	0301                	addi	t1,t1,0
    21bc:	0901                	addi	s2,s2,0
    21be:	0000                	unimp
    21c0:	0301                	addi	t1,t1,0
    21c2:	0901                	addi	s2,s2,0
    21c4:	0000                	unimp
    21c6:	0301                	addi	t1,t1,0
    21c8:	0901                	addi	s2,s2,0
    21ca:	0000                	unimp
    21cc:	0301                	addi	t1,t1,0
    21ce:	0901                	addi	s2,s2,0
    21d0:	0000                	unimp
    21d2:	0301                	addi	t1,t1,0
    21d4:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    21d8:	0501                	addi	a0,a0,0
    21da:	066c                	addi	a1,sp,780
    21dc:	00097603          	0x97603
    21e0:	0100                	addi	s0,sp,128
    21e2:	1e05                	addi	t3,t3,-31
    21e4:	08091103          	lh	sp,128(s2)
    21e8:	0100                	addi	s0,sp,128
    21ea:	6c05                	lui	s8,0x1
    21ec:	06096f03          	0x6096f03
    21f0:	0100                	addi	s0,sp,128
    21f2:	0905                	addi	s2,s2,1
    21f4:	0a090a03          	lb	s4,160(s2)
    21f8:	0100                	addi	s0,sp,128
    21fa:	6c05                	lui	s8,0x1
    21fc:	04097603          	0x4097603
    2200:	0100                	addi	s0,sp,128
    2202:	0905                	addi	s2,s2,1
    2204:	04090a03          	lb	s4,64(s2)
    2208:	0100                	addi	s0,sp,128
    220a:	6c05                	lui	s8,0x1
    220c:	04097603          	0x4097603
    2210:	0100                	addi	s0,sp,128
    2212:	08090003          	lb	zero,128(s2)
    2216:	0100                	addi	s0,sp,128
    2218:	0a05                	addi	s4,s4,1
    221a:	02090e03          	lb	t3,32(s2)
    221e:	0100                	addi	s0,sp,128
    2220:	0905                	addi	s2,s2,1
    2222:	04097c03          	0x4097c03
    2226:	0100                	addi	s0,sp,128
    2228:	0505                	addi	a0,a0,1
    222a:	0306                	slli	t1,t1,0x1
    222c:	0904                	addi	s1,sp,144
    222e:	0004                	0x4
    2230:	0501                	addi	a0,a0,0
    2232:	060a                	slli	a2,a2,0x2
    2234:	00090003          	lb	zero,0(s2)
    2238:	0100                	addi	s0,sp,128
    223a:	0505                	addi	a0,a0,1
    223c:	0306                	slli	t1,t1,0x1
    223e:	00120903          	lb	s2,1(tp) # 1 <__DYNAMIC+0x1>
    2242:	0501                	addi	a0,a0,0
    2244:	0003060b          	0x3060b
    2248:	0409                	addi	s0,s0,2
    224a:	0100                	addi	s0,sp,128
    224c:	1405                	addi	s0,s0,-31
    224e:	0200                	addi	s0,sp,256
    2250:	0104                	addi	s1,sp,128
    2252:	0306                	slli	t1,t1,0x1
    2254:	0900                	addi	s0,sp,144
    2256:	0002                	c.slli64	zero
    2258:	0501                	addi	a0,a0,0
    225a:	0005                	c.nop	1
    225c:	0402                	c.slli64	s0
    225e:	0601                	addi	a2,a2,0
    2260:	00090003          	lb	zero,0(s2)
    2264:	0100                	addi	s0,sp,128
    2266:	1605                	addi	a2,a2,-31
    2268:	04090603          	lb	a2,64(s2)
    226c:	0100                	addi	s0,sp,128
    226e:	0c05                	addi	s8,s8,1
    2270:	06097f03          	0x6097f03
    2274:	0100                	addi	s0,sp,128
    2276:	1105                	addi	sp,sp,-31
    2278:	0200                	addi	s0,sp,256
    227a:	0104                	addi	s1,sp,128
    227c:	0306                	slli	t1,t1,0x1
    227e:	0900                	addi	s0,sp,144
    2280:	0002                	c.slli64	zero
    2282:	0501                	addi	a0,a0,0
    2284:	0005                	c.nop	1
    2286:	0402                	c.slli64	s0
    2288:	0601                	addi	a2,a2,0
    228a:	00090003          	lb	zero,0(s2)
    228e:	0100                	addi	s0,sp,128
    2290:	0306                	slli	t1,t1,0x1
    2292:	0908                	addi	a0,sp,144
    2294:	0004                	0x4
    2296:	0501                	addi	a0,a0,0
    2298:	0609                	addi	a2,a2,2
    229a:	00090003          	lb	zero,0(s2)
    229e:	0100                	addi	s0,sp,128
    22a0:	0505                	addi	a0,a0,1
    22a2:	0306                	slli	t1,t1,0x1
    22a4:	0904                	addi	s1,sp,144
    22a6:	000c                	0xc
    22a8:	0501                	addi	a0,a0,0
    22aa:	060a                	slli	a2,a2,0x2
    22ac:	00090003          	lb	zero,0(s2)
    22b0:	0100                	addi	s0,sp,128
    22b2:	0505                	addi	a0,a0,1
    22b4:	0306                	slli	t1,t1,0x1
    22b6:	0901                	addi	s2,s2,0
    22b8:	000c                	0xc
    22ba:	0501                	addi	a0,a0,0
    22bc:	0014                	0x14
    22be:	0402                	c.slli64	s0
    22c0:	0301                	addi	t1,t1,0
    22c2:	0900                	addi	s0,sp,144
    22c4:	0002                	c.slli64	zero
    22c6:	0501                	addi	a0,a0,0
    22c8:	0005                	c.nop	1
    22ca:	0402                	c.slli64	s0
    22cc:	0601                	addi	a2,a2,0
    22ce:	00090003          	lb	zero,0(s2)
    22d2:	0100                	addi	s0,sp,128
    22d4:	0105                	addi	sp,sp,1
    22d6:	04090703          	lb	a4,64(s2)
    22da:	0100                	addi	s0,sp,128
    22dc:	0905                	addi	s2,s2,1
    22de:	0200                	addi	s0,sp,256
    22e0:	0304                	addi	s1,sp,384
    22e2:	0306                	slli	t1,t1,0x1
    22e4:	0968                	addi	a0,sp,156
    22e6:	0016                	c.slli	zero,0x5
    22e8:	0501                	addi	a0,a0,0
    22ea:	0019                	c.nop	6
    22ec:	0402                	c.slli64	s0
    22ee:	00030603          	lb	a2,0(t1)
    22f2:	0009                	c.nop	2
    22f4:	0100                	addi	s0,sp,128
    22f6:	2305                	jal	2816 <_min_stack+0x816>
    22f8:	0200                	addi	s0,sp,256
    22fa:	0304                	addi	s1,sp,384
    22fc:	08097f03          	0x8097f03
    2300:	0100                	addi	s0,sp,128
    2302:	1505                	addi	a0,a0,-31
    2304:	0200                	addi	s0,sp,256
    2306:	0304                	addi	s1,sp,384
    2308:	04090103          	lb	sp,64(s2)
    230c:	0100                	addi	s0,sp,128
    230e:	2305                	jal	282e <_min_stack+0x82e>
    2310:	0200                	addi	s0,sp,256
    2312:	0304                	addi	s1,sp,384
    2314:	0306                	slli	t1,t1,0x1
    2316:	097f                	0x97f
    2318:	0004                	0x4
    231a:	0501                	addi	a0,a0,0
    231c:	0309                	addi	t1,t1,2
    231e:	0906                	slli	s2,s2,0x1
    2320:	0002                	c.slli64	zero
    2322:	0501                	addi	a0,a0,0
    2324:	060e                	slli	a2,a2,0x3
    2326:	00090003          	lb	zero,0(s2)
    232a:	0100                	addi	s0,sp,128
    232c:	0b05                	addi	s6,s6,1
    232e:	02090003          	lb	zero,32(s2)
    2332:	0100                	addi	s0,sp,128
    2334:	0d05                	addi	s10,s10,1
    2336:	0306                	slli	t1,t1,0x1
    2338:	00040903          	lb	s2,0(s0)
    233c:	0501                	addi	a0,a0,0
    233e:	0619                	addi	a2,a2,6
    2340:	00090003          	lb	zero,0(s2)
    2344:	0100                	addi	s0,sp,128
    2346:	1305                	addi	t1,t1,-31
    2348:	04090003          	lb	zero,64(s2)
    234c:	0100                	addi	s0,sp,128
    234e:	1805                	addi	a6,a6,-31
    2350:	0200                	addi	s0,sp,256
    2352:	0204                	addi	s1,sp,256
    2354:	0306                	slli	t1,t1,0x1
    2356:	097c                	addi	a5,sp,156
    2358:	0002                	c.slli64	zero
    235a:	0501                	addi	a0,a0,0
    235c:	0009                	c.nop	2
    235e:	0402                	c.slli64	s0
    2360:	090e0303          	lb	t1,144(t3)
    2364:	0006                	c.slli	zero,0x1
    2366:	0501                	addi	a0,a0,0
    2368:	0019                	c.nop	6
    236a:	0402                	c.slli64	s0
    236c:	00030603          	lb	a2,0(t1)
    2370:	0009                	c.nop	2
    2372:	0100                	addi	s0,sp,128
    2374:	2305                	jal	2894 <_min_stack+0x894>
    2376:	0200                	addi	s0,sp,256
    2378:	0304                	addi	s1,sp,384
    237a:	08097f03          	0x8097f03
    237e:	0100                	addi	s0,sp,128
    2380:	1505                	addi	a0,a0,-31
    2382:	0200                	addi	s0,sp,256
    2384:	0304                	addi	s1,sp,384
    2386:	04090103          	lb	sp,64(s2)
    238a:	0100                	addi	s0,sp,128
    238c:	2305                	jal	28ac <_min_stack+0x8ac>
    238e:	0200                	addi	s0,sp,256
    2390:	0304                	addi	s1,sp,384
    2392:	0306                	slli	t1,t1,0x1
    2394:	097f                	0x97f
    2396:	0004                	0x4
    2398:	0901                	addi	s2,s2,0
    239a:	0002                	c.slli64	zero
    239c:	0100                	addi	s0,sp,128
    239e:	0501                	addi	a0,a0,0
    23a0:	0205000b          	0x205000b
    23a4:	0f6a                	slli	t5,t5,0x1a
    23a6:	0000                	unimp
    23a8:	01058803          	lb	a6,16(a1)
    23ac:	0505                	addi	a0,a0,1
    23ae:	00090103          	lb	sp,0(s2)
    23b2:	0100                	addi	s0,sp,128
    23b4:	00090103          	lb	sp,0(s2)
    23b8:	0100                	addi	s0,sp,128
    23ba:	00090103          	lb	sp,0(s2)
    23be:	0100                	addi	s0,sp,128
    23c0:	00090103          	lb	sp,0(s2)
    23c4:	0100                	addi	s0,sp,128
    23c6:	00090103          	lb	sp,0(s2)
    23ca:	0100                	addi	s0,sp,128
    23cc:	00090103          	lb	sp,0(s2)
    23d0:	0100                	addi	s0,sp,128
    23d2:	00090203          	lb	tp,0(s2)
    23d6:	0100                	addi	s0,sp,128
    23d8:	0b05                	addi	s6,s6,1
    23da:	0306                	slli	t1,t1,0x1
    23dc:	0978                	addi	a4,sp,156
    23de:	0000                	unimp
    23e0:	0501                	addi	a0,a0,0
    23e2:	0309                	addi	t1,t1,2
    23e4:	0908                	addi	a0,sp,144
    23e6:	0004                	0x4
    23e8:	0501                	addi	a0,a0,0
    23ea:	0978030b          	0x978030b
    23ee:	000e                	c.slli	zero,0x3
    23f0:	0501                	addi	a0,a0,0
    23f2:	0312                	slli	t1,t1,0x4
    23f4:	0918                	addi	a4,sp,144
    23f6:	0010                	0x10
    23f8:	0501                	addi	a0,a0,0
    23fa:	0309                	addi	t1,t1,2
    23fc:	0970                	addi	a2,sp,156
    23fe:	0004                	0x4
    2400:	0501                	addi	a0,a0,0
    2402:	0605                	addi	a2,a2,1
    2404:	02090103          	lb	sp,32(s2)
    2408:	0100                	addi	s0,sp,128
    240a:	00090103          	lb	sp,0(s2)
    240e:	0100                	addi	s0,sp,128
    2410:	00090103          	lb	sp,0(s2)
    2414:	0100                	addi	s0,sp,128
    2416:	00090103          	lb	sp,0(s2)
    241a:	0100                	addi	s0,sp,128
    241c:	00090103          	lb	sp,0(s2)
    2420:	0100                	addi	s0,sp,128
    2422:	00090103          	lb	sp,0(s2)
    2426:	0100                	addi	s0,sp,128
    2428:	00090103          	lb	sp,0(s2)
    242c:	0100                	addi	s0,sp,128
    242e:	00090903          	lb	s2,0(s2)
    2432:	0100                	addi	s0,sp,128
    2434:	1205                	addi	tp,tp,-31
    2436:	0306                	slli	t1,t1,0x1
    2438:	0900                	addi	s0,sp,144
    243a:	0000                	unimp
    243c:	0501                	addi	a0,a0,0
    243e:	030c                	addi	a1,sp,384
    2440:	0901                	addi	s2,s2,0
    2442:	000c                	0xc
    2444:	0501                	addi	a0,a0,0
    2446:	0312                	slli	t1,t1,0x4
    2448:	097f                	0x97f
    244a:	000a                	c.slli	zero,0x2
    244c:	0501                	addi	a0,a0,0
    244e:	0605                	addi	a2,a2,1
    2450:	02090103          	lb	sp,32(s2)
    2454:	0100                	addi	s0,sp,128
    2456:	1205                	addi	tp,tp,-31
    2458:	0306                	slli	t1,t1,0x1
    245a:	0901                	addi	s2,s2,0
    245c:	0000                	unimp
    245e:	0501                	addi	a0,a0,0
    2460:	030c                	addi	a1,sp,384
    2462:	097f                	0x97f
    2464:	0004                	0x4
    2466:	0501                	addi	a0,a0,0
    2468:	0605                	addi	a2,a2,1
    246a:	02090103          	lb	sp,32(s2)
    246e:	0100                	addi	s0,sp,128
    2470:	1205                	addi	tp,tp,-31
    2472:	0306                	slli	t1,t1,0x1
    2474:	0900                	addi	s0,sp,144
    2476:	0000                	unimp
    2478:	0501                	addi	a0,a0,0
    247a:	0605                	addi	a2,a2,1
    247c:	04090203          	lb	tp,64(s2)
    2480:	0100                	addi	s0,sp,128
    2482:	1005                	c.nop	-31
    2484:	00090003          	lb	zero,0(s2)
    2488:	0100                	addi	s0,sp,128
    248a:	0505                	addi	a0,a0,1
    248c:	0306                	slli	t1,t1,0x1
    248e:	0900                	addi	s0,sp,144
    2490:	0000                	unimp
    2492:	0501                	addi	a0,a0,0
    2494:	0009                	c.nop	2
    2496:	0402                	c.slli64	s0
    2498:	02030603          	lb	a2,32(t1)
    249c:	0409                	addi	s0,s0,2
    249e:	0100                	addi	s0,sp,128
    24a0:	1f05                	addi	t5,t5,-31
    24a2:	0200                	addi	s0,sp,256
    24a4:	0304                	addi	s1,sp,384
    24a6:	0306                	slli	t1,t1,0x1
    24a8:	0900                	addi	s0,sp,144
    24aa:	0000                	unimp
    24ac:	0501                	addi	a0,a0,0
    24ae:	0019                	c.nop	6
    24b0:	0402                	c.slli64	s0
    24b2:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    24b6:	0006                	c.slli	zero,0x1
    24b8:	0501                	addi	a0,a0,0
    24ba:	04020017          	auipc	zero,0x4020
    24be:	7e030603          	lb	a2,2016(t1)
    24c2:	0609                	addi	a2,a2,2
    24c4:	0100                	addi	s0,sp,128
    24c6:	1005                	c.nop	-31
    24c8:	0200                	addi	s0,sp,256
    24ca:	0304                	addi	s1,sp,384
    24cc:	00090003          	lb	zero,0(s2)
    24d0:	0100                	addi	s0,sp,128
    24d2:	0505                	addi	a0,a0,1
    24d4:	0200                	addi	s0,sp,256
    24d6:	0304                	addi	s1,sp,384
    24d8:	0306                	slli	t1,t1,0x1
    24da:	0900                	addi	s0,sp,144
    24dc:	0002                	c.slli64	zero
    24de:	0501                	addi	a0,a0,0
    24e0:	0009                	c.nop	2
    24e2:	0402                	c.slli64	s0
    24e4:	09030603          	lb	a2,144(t1)
    24e8:	0409                	addi	s0,s0,2
    24ea:	0100                	addi	s0,sp,128
    24ec:	1b05                	addi	s6,s6,-31
    24ee:	0200                	addi	s0,sp,256
    24f0:	0304                	addi	s1,sp,384
    24f2:	00097e03          	0x97e03
    24f6:	0100                	addi	s0,sp,128
    24f8:	1005                	c.nop	-31
    24fa:	0200                	addi	s0,sp,256
    24fc:	0304                	addi	s1,sp,384
    24fe:	00090003          	lb	zero,0(s2)
    2502:	0100                	addi	s0,sp,128
    2504:	0905                	addi	s2,s2,1
    2506:	0200                	addi	s0,sp,256
    2508:	0304                	addi	s1,sp,384
    250a:	0c090903          	lb	s2,192(s2)
    250e:	0100                	addi	s0,sp,128
    2510:	2605                	jal	2830 <_min_stack+0x830>
    2512:	0200                	addi	s0,sp,256
    2514:	0304                	addi	s1,sp,384
    2516:	0306                	slli	t1,t1,0x1
    2518:	0900                	addi	s0,sp,144
    251a:	0000                	unimp
    251c:	0501                	addi	a0,a0,0
    251e:	0020                	addi	s0,sp,8
    2520:	0402                	c.slli64	s0
    2522:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2526:	0006                	c.slli	zero,0x1
    2528:	0501                	addi	a0,a0,0
    252a:	001f 0402 0603      	0x6030402001f
    2530:	04097e03          	0x4097e03
    2534:	0100                	addi	s0,sp,128
    2536:	1405                	addi	s0,s0,-31
    2538:	0200                	addi	s0,sp,256
    253a:	0304                	addi	s1,sp,384
    253c:	00090003          	lb	zero,0(s2)
    2540:	0100                	addi	s0,sp,128
    2542:	0505                	addi	a0,a0,1
    2544:	0200                	addi	s0,sp,256
    2546:	0304                	addi	s1,sp,384
    2548:	0306                	slli	t1,t1,0x1
    254a:	0900                	addi	s0,sp,144
    254c:	0000                	unimp
    254e:	0501                	addi	a0,a0,0
    2550:	0009                	c.nop	2
    2552:	0402                	c.slli64	s0
    2554:	09030603          	lb	a2,144(t1)
    2558:	0409                	addi	s0,s0,2
    255a:	0100                	addi	s0,sp,128
    255c:	1f05                	addi	t5,t5,-31
    255e:	0200                	addi	s0,sp,256
    2560:	0304                	addi	s1,sp,384
    2562:	00097e03          	0x97e03
    2566:	0100                	addi	s0,sp,128
    2568:	1405                	addi	s0,s0,-31
    256a:	0200                	addi	s0,sp,256
    256c:	0304                	addi	s1,sp,384
    256e:	00090003          	lb	zero,0(s2)
    2572:	0100                	addi	s0,sp,128
    2574:	0905                	addi	s2,s2,1
    2576:	0200                	addi	s0,sp,256
    2578:	0304                	addi	s1,sp,384
    257a:	0c090903          	lb	s2,192(s2)
    257e:	0100                	addi	s0,sp,128
    2580:	2305                	jal	2aa0 <_min_stack+0xaa0>
    2582:	0200                	addi	s0,sp,256
    2584:	0304                	addi	s1,sp,384
    2586:	0306                	slli	t1,t1,0x1
    2588:	0900                	addi	s0,sp,144
    258a:	0000                	unimp
    258c:	0501                	addi	a0,a0,0
    258e:	001d                	c.nop	7
    2590:	0402                	c.slli64	s0
    2592:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    2596:	0006                	c.slli	zero,0x1
    2598:	0501                	addi	a0,a0,0
    259a:	001f 0402 0603      	0x6030402001f
    25a0:	04097e03          	0x4097e03
    25a4:	0100                	addi	s0,sp,128
    25a6:	1405                	addi	s0,s0,-31
    25a8:	0200                	addi	s0,sp,256
    25aa:	0304                	addi	s1,sp,384
    25ac:	00090003          	lb	zero,0(s2)
    25b0:	0100                	addi	s0,sp,128
    25b2:	0505                	addi	a0,a0,1
    25b4:	0200                	addi	s0,sp,256
    25b6:	0304                	addi	s1,sp,384
    25b8:	0306                	slli	t1,t1,0x1
    25ba:	0900                	addi	s0,sp,144
    25bc:	0000                	unimp
    25be:	0501                	addi	a0,a0,0
    25c0:	0009                	c.nop	2
    25c2:	0402                	c.slli64	s0
    25c4:	09030603          	lb	a2,144(t1)
    25c8:	0c09                	addi	s8,s8,2
    25ca:	0100                	addi	s0,sp,128
    25cc:	2205                	jal	26ec <_min_stack+0x6ec>
    25ce:	0200                	addi	s0,sp,256
    25d0:	0304                	addi	s1,sp,384
    25d2:	0306                	slli	t1,t1,0x1
    25d4:	0900                	addi	s0,sp,144
    25d6:	0000                	unimp
    25d8:	0501                	addi	a0,a0,0
    25da:	001c                	0x1c
    25dc:	0402                	c.slli64	s0
    25de:	09000303          	lb	t1,144(zero) # 90 <instr_equ+0x4>
    25e2:	0006                	c.slli	zero,0x1
    25e4:	0501                	addi	a0,a0,0
    25e6:	0021                	c.nop	8
    25e8:	0402                	c.slli64	s0
    25ea:	7e030603          	lb	a2,2016(t1)
    25ee:	0409                	addi	s0,s0,2
    25f0:	0100                	addi	s0,sp,128
    25f2:	1405                	addi	s0,s0,-31
    25f4:	0200                	addi	s0,sp,256
    25f6:	0304                	addi	s1,sp,384
    25f8:	00090003          	lb	zero,0(s2)
    25fc:	0100                	addi	s0,sp,128
    25fe:	0505                	addi	a0,a0,1
    2600:	0200                	addi	s0,sp,256
    2602:	0304                	addi	s1,sp,384
    2604:	0306                	slli	t1,t1,0x1
    2606:	0900                	addi	s0,sp,144
    2608:	0000                	unimp
    260a:	0601                	addi	a2,a2,0
    260c:	04090803          	lb	a6,64(s2)
    2610:	0100                	addi	s0,sp,128
    2612:	1205                	addi	tp,tp,-31
    2614:	0306                	slli	t1,t1,0x1
    2616:	0900                	addi	s0,sp,144
    2618:	0000                	unimp
    261a:	0501                	addi	a0,a0,0
    261c:	09010313          	addi	t1,sp,144
    2620:	0008                	0x8
    2622:	0501                	addi	a0,a0,0
    2624:	0312                	slli	t1,t1,0x4
    2626:	0901                	addi	s2,s2,0
    2628:	0008                	0x8
    262a:	0501                	addi	a0,a0,0
    262c:	097f0313          	addi	t1,t5,151
    2630:	0004                	0x4
    2632:	0501                	addi	a0,a0,0
    2634:	0312                	slli	t1,t1,0x4
    2636:	097f                	0x97f
    2638:	0004                	0x4
    263a:	0501                	addi	a0,a0,0
    263c:	0605                	addi	a2,a2,1
    263e:	02090103          	lb	sp,32(s2)
    2642:	0100                	addi	s0,sp,128
    2644:	1305                	addi	t1,t1,-31
    2646:	0306                	slli	t1,t1,0x1
    2648:	0900                	addi	s0,sp,144
    264a:	0000                	unimp
    264c:	0501                	addi	a0,a0,0
    264e:	0312                	slli	t1,t1,0x4
    2650:	0901                	addi	s2,s2,0
    2652:	0002                	c.slli64	zero
    2654:	0301                	addi	t1,t1,0
    2656:	0909                	addi	s2,s2,2
    2658:	0002                	c.slli64	zero
    265a:	0501                	addi	a0,a0,0
    265c:	09760313          	addi	t1,a2,151
    2660:	0008                	0x8
    2662:	0501                	addi	a0,a0,0
    2664:	0605                	addi	a2,a2,1
    2666:	02090103          	lb	sp,32(s2)
    266a:	0100                	addi	s0,sp,128
    266c:	00090903          	lb	s2,0(s2)
    2670:	0100                	addi	s0,sp,128
    2672:	1205                	addi	tp,tp,-31
    2674:	0306                	slli	t1,t1,0x1
    2676:	0900                	addi	s0,sp,144
    2678:	0000                	unimp
    267a:	0501                	addi	a0,a0,0
    267c:	0605                	addi	a2,a2,1
    267e:	02090103          	lb	sp,32(s2)
    2682:	0100                	addi	s0,sp,128
    2684:	1305                	addi	t1,t1,-31
    2686:	0306                	slli	t1,t1,0x1
    2688:	0900                	addi	s0,sp,144
    268a:	0000                	unimp
    268c:	0501                	addi	a0,a0,0
    268e:	0605                	addi	a2,a2,1
    2690:	14090103          	lb	sp,320(s2)
    2694:	0100                	addi	s0,sp,128
    2696:	1205                	addi	tp,tp,-31
    2698:	0306                	slli	t1,t1,0x1
    269a:	0900                	addi	s0,sp,144
    269c:	0000                	unimp
    269e:	0501                	addi	a0,a0,0
    26a0:	031a                	slli	t1,t1,0x6
    26a2:	0004091b          	0x4091b
    26a6:	0501                	addi	a0,a0,0
    26a8:	0312                	slli	t1,t1,0x4
    26aa:	0965                	addi	s2,s2,25
    26ac:	0004                	0x4
    26ae:	0501                	addi	a0,a0,0
    26b0:	0605                	addi	a2,a2,1
    26b2:	02091303          	lh	t1,32(s2)
    26b6:	0100                	addi	s0,sp,128
    26b8:	1005                	c.nop	-31
    26ba:	00090003          	lb	zero,0(s2)
    26be:	0100                	addi	s0,sp,128
    26c0:	1205                	addi	tp,tp,-31
    26c2:	0306                	slli	t1,t1,0x1
    26c4:	096d                	addi	s2,s2,27
    26c6:	0000                	unimp
    26c8:	0501                	addi	a0,a0,0
    26ca:	031a                	slli	t1,t1,0x6
    26cc:	0002091b          	0x2091b
    26d0:	0501                	addi	a0,a0,0
    26d2:	0305                	addi	t1,t1,1
    26d4:	0978                	addi	a4,sp,156
    26d6:	0004                	0x4
    26d8:	0501                	addi	a0,a0,0
    26da:	0609                	addi	a2,a2,2
    26dc:	04090103          	lb	sp,64(s2)
    26e0:	0100                	addi	s0,sp,128
    26e2:	0b05                	addi	s6,s6,1
    26e4:	0306                	slli	t1,t1,0x1
    26e6:	0900                	addi	s0,sp,144
    26e8:	0000                	unimp
    26ea:	0501                	addi	a0,a0,0
    26ec:	09000327          	0x9000327
    26f0:	0002                	c.slli64	zero
    26f2:	0501                	addi	a0,a0,0
    26f4:	0900030b          	0x900030b
    26f8:	0004                	0x4
    26fa:	0501                	addi	a0,a0,0
    26fc:	060d                	addi	a2,a2,3
    26fe:	0a090203          	lb	tp,160(s2)
    2702:	0100                	addi	s0,sp,128
    2704:	1a05                	addi	s4,s4,-31
    2706:	0306                	slli	t1,t1,0x1
    2708:	0900                	addi	s0,sp,144
    270a:	0000                	unimp
    270c:	0501                	addi	a0,a0,0
    270e:	060d                	addi	a2,a2,3
    2710:	0a090203          	lb	tp,160(s2)
    2714:	0100                	addi	s0,sp,128
    2716:	0505                	addi	a0,a0,1
    2718:	00090903          	lb	s2,0(s2)
    271c:	0100                	addi	s0,sp,128
    271e:	0105                	addi	sp,sp,1
    2720:	0306                	slli	t1,t1,0x1
    2722:	0901                	addi	s2,s2,0
    2724:	0000                	unimp
    2726:	0501                	addi	a0,a0,0
    2728:	000d                	c.nop	3
    272a:	0402                	c.slli64	s0
    272c:	0602                	c.slli64	a2
    272e:	18097903          	0x18097903
    2732:	0100                	addi	s0,sp,128
    2734:	1a05                	addi	s4,s4,-31
    2736:	0200                	addi	s0,sp,256
    2738:	0204                	addi	s1,sp,256
    273a:	0306                	slli	t1,t1,0x1
    273c:	0900                	addi	s0,sp,144
    273e:	0000                	unimp
    2740:	0501                	addi	a0,a0,0
    2742:	0018                	0x18
    2744:	0402                	c.slli64	s0
    2746:	0602                	c.slli64	a2
    2748:	02097803          	0x2097803
    274c:	0100                	addi	s0,sp,128
    274e:	1005                	c.nop	-31
    2750:	0200                	addi	s0,sp,256
    2752:	0204                	addi	s1,sp,256
    2754:	00090003          	lb	zero,0(s2)
    2758:	0100                	addi	s0,sp,128
    275a:	0505                	addi	a0,a0,1
    275c:	0200                	addi	s0,sp,256
    275e:	0204                	addi	s1,sp,256
    2760:	0306                	slli	t1,t1,0x1
    2762:	0900                	addi	s0,sp,144
    2764:	0002                	c.slli64	zero
    2766:	0901                	addi	s2,s2,0
    2768:	0006                	c.slli	zero,0x1
    276a:	0100                	addi	s0,sp,128
    276c:	5001                	c.li	zero,-32
    276e:	0001                	nop
    2770:	0300                	addi	s0,sp,384
    2772:	1d00                	addi	s0,sp,688
    2774:	0000                	unimp
    2776:	0100                	addi	s0,sp,128
    2778:	fb01                	bnez	a4,2688 <_min_stack+0x688>
    277a:	0d0e                	slli	s10,s10,0x3
    277c:	0100                	addi	s0,sp,128
    277e:	0101                	addi	sp,sp,0
    2780:	0001                	nop
    2782:	0000                	unimp
    2784:	0001                	nop
    2786:	0100                	addi	s0,sp,128
    2788:	6300                	flw	fs0,0(a4)
    278a:	7472                	flw	fs0,60(sp)
    278c:	2e30                	fld	fa2,88(a2)
    278e:	00000053          	fadd.s	ft0,ft0,ft0,rne
    2792:	0000                	unimp
    2794:	0500                	addi	s0,sp,640
    2796:	6e02                	flw	ft8,0(sp)
    2798:	000d                	c.nop	3
    279a:	1500                	addi	s0,sp,672
    279c:	04090403          	lb	s0,64(s2)
    27a0:	0100                	addi	s0,sp,128
    27a2:	04090103          	lb	sp,64(s2)
    27a6:	0100                	addi	s0,sp,128
    27a8:	02090103          	lb	sp,32(s2)
    27ac:	0100                	addi	s0,sp,128
    27ae:	02090103          	lb	sp,32(s2)
    27b2:	0100                	addi	s0,sp,128
    27b4:	02090103          	lb	sp,32(s2)
    27b8:	0100                	addi	s0,sp,128
    27ba:	02090103          	lb	sp,32(s2)
    27be:	0100                	addi	s0,sp,128
    27c0:	02090103          	lb	sp,32(s2)
    27c4:	0100                	addi	s0,sp,128
    27c6:	02090103          	lb	sp,32(s2)
    27ca:	0100                	addi	s0,sp,128
    27cc:	02090103          	lb	sp,32(s2)
    27d0:	0100                	addi	s0,sp,128
    27d2:	02090103          	lb	sp,32(s2)
    27d6:	0100                	addi	s0,sp,128
    27d8:	02090103          	lb	sp,32(s2)
    27dc:	0100                	addi	s0,sp,128
    27de:	02090103          	lb	sp,32(s2)
    27e2:	0100                	addi	s0,sp,128
    27e4:	02090103          	lb	sp,32(s2)
    27e8:	0100                	addi	s0,sp,128
    27ea:	02090103          	lb	sp,32(s2)
    27ee:	0100                	addi	s0,sp,128
    27f0:	02090103          	lb	sp,32(s2)
    27f4:	0100                	addi	s0,sp,128
    27f6:	02090103          	lb	sp,32(s2)
    27fa:	0100                	addi	s0,sp,128
    27fc:	02090103          	lb	sp,32(s2)
    2800:	0100                	addi	s0,sp,128
    2802:	02090103          	lb	sp,32(s2)
    2806:	0100                	addi	s0,sp,128
    2808:	02090103          	lb	sp,32(s2)
    280c:	0100                	addi	s0,sp,128
    280e:	02090103          	lb	sp,32(s2)
    2812:	0100                	addi	s0,sp,128
    2814:	02090103          	lb	sp,32(s2)
    2818:	0100                	addi	s0,sp,128
    281a:	02090103          	lb	sp,32(s2)
    281e:	0100                	addi	s0,sp,128
    2820:	02090103          	lb	sp,32(s2)
    2824:	0100                	addi	s0,sp,128
    2826:	02090103          	lb	sp,32(s2)
    282a:	0100                	addi	s0,sp,128
    282c:	02090103          	lb	sp,32(s2)
    2830:	0100                	addi	s0,sp,128
    2832:	02090103          	lb	sp,32(s2)
    2836:	0100                	addi	s0,sp,128
    2838:	02090103          	lb	sp,32(s2)
    283c:	0100                	addi	s0,sp,128
    283e:	02090103          	lb	sp,32(s2)
    2842:	0100                	addi	s0,sp,128
    2844:	02090103          	lb	sp,32(s2)
    2848:	0100                	addi	s0,sp,128
    284a:	02090103          	lb	sp,32(s2)
    284e:	0100                	addi	s0,sp,128
    2850:	02090103          	lb	sp,32(s2)
    2854:	0100                	addi	s0,sp,128
    2856:	02090303          	lb	t1,32(s2)
    285a:	0100                	addi	s0,sp,128
    285c:	08090603          	lb	a2,128(s2)
    2860:	0100                	addi	s0,sp,128
    2862:	08090103          	lb	sp,128(s2)
    2866:	0100                	addi	s0,sp,128
    2868:	08090203          	lb	tp,128(s2)
    286c:	0100                	addi	s0,sp,128
    286e:	04090303          	lb	t1,64(s2)
    2872:	0100                	addi	s0,sp,128
    2874:	04090103          	lb	sp,64(s2)
    2878:	0100                	addi	s0,sp,128
    287a:	02090103          	lb	sp,32(s2)
    287e:	0100                	addi	s0,sp,128
    2880:	04090603          	lb	a2,64(s2)
    2884:	0100                	addi	s0,sp,128
    2886:	04090103          	lb	sp,64(s2)
    288a:	0100                	addi	s0,sp,128
    288c:	04090103          	lb	sp,64(s2)
    2890:	0100                	addi	s0,sp,128
    2892:	0409                	addi	s0,s0,2
    2894:	0000                	unimp
    2896:	0101                	addi	sp,sp,0
    2898:	0500                	addi	s0,sp,640
    289a:	0002                	c.slli64	zero
    289c:	0000                	unimp
    289e:	0300                	addi	s0,sp,384
    28a0:	030100cb          	fnmsub.d	ft1,ft2,fa6,ft0,rne
    28a4:	0901                	addi	s2,s2,0
    28a6:	007c                	addi	a5,sp,12
    28a8:	0301                	addi	t1,t1,0
    28aa:	0904                	addi	s1,sp,144
    28ac:	0004                	0x4
    28ae:	0301                	addi	t1,t1,0
    28b0:	0904                	addi	s1,sp,144
    28b2:	0004                	0x4
    28b4:	0301                	addi	t1,t1,0
    28b6:	0904                	addi	s1,sp,144
    28b8:	0004                	0x4
    28ba:	0901                	addi	s2,s2,0
    28bc:	0004                	0x4
    28be:	0100                	addi	s0,sp,128
    28c0:	01              	Address 0x00000000000028c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	775f 7263 6f74      	0x6f747263775f
  40:	626d                	lui	tp,0x1b
  42:	735f 6174 6574      	0x65746174735f
  48:	5f00                	lw	s0,56(a4)
  4a:	72736377          	0x72736377
  4e:	6f74                	flw	fa3,92(a4)
  50:	626d                	lui	tp,0x1b
  52:	74735f73          	csrrwi	t5,0x747,6
  56:	7461                	lui	s0,0xffff8
  58:	0065                	c.nop	25
  5a:	5f5f 7562 6c69      	0x6c6975625f5f
  60:	6974                	flw	fa3,84(a0)
  62:	5f6e                	lw	t5,248(sp)
  64:	656d                	lui	a0,0x1b
  66:	736d                	lui	t1,0xffffb
  68:	7465                	lui	s0,0xffff9
  6a:	6c00                	flw	fs0,24(s0)
  6c:	20676e6f          	jal	t3,76272 <_stack_start+0x66272>
  70:	6f6c                	flw	fa1,92(a4)
  72:	676e                	flw	fa4,216(sp)
  74:	7520                	flw	fs0,104(a0)
  76:	736e                	flw	ft6,248(sp)
  78:	6769                	lui	a4,0x1a
  7a:	656e                	flw	fa0,216(sp)
  jal x0, default_exc_handler
  7c:	2064                	fld	fs1,192(s0)
  7e:	6e69                	lui	t3,0x1a
  jal x0, reset_handler
  80:	0074                	addi	a3,sp,12
  82:	6544                	flw	fs1,12(a0)
  jal x0, default_exc_handler
  84:	654d5f63          	bge	s10,s4,6e2 <ext_euclid+0x74>
  jal x0, default_exc_handler
  88:	67617373          	csrrci	t1,0x676,2
    asm volatile(
  8c:	0065                	c.nop	25
  8e:	6c5f 6662 6973      	0x697366626c5f
    for(i=0;i<(length/3);i++) {
  94:	657a                	flw	fa0,156(sp)
  96:	7200                	flw	fs0,32(a2)
  98:	6e61                	lui	t3,0x18
  9a:	6f64                	flw	fs1,92(a4)
  9c:	5f6d                	li	t5,-5
  9e:	7379656b          	0x7379656b
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	5f00                	lw	s0,56(a4)
  a4:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  aa:	5f65                	li	t5,-7
  ac:	0074                	addi	a3,sp,12
  ae:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  b2:	7465                	lui	s0,0xffff9
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	6b5f 7965 665f      	0x665f79656b5f
  ba:	7300                	flw	fs0,32(a4)
    int line[size_b][size_a + size_b];
  bc:	6365                	lui	t1,0x19
  be:	6572                	flw	fa0,28(sp)
  c0:	5f74                	lw	a3,124(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c2:	5f79656b          	0x5f79656b
    int line[size_b][size_a + size_b];
  c6:	6d5f0067          	jr	1749(t5)
  ca:	7262                	flw	ft4,56(sp)
  cc:	6f74                	flw	fa3,92(a4)
  ce:	735f6377          	0x735f6377
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d2:	6174                	flw	fa3,68(a0)
  d4:	6574                	flw	fa3,76(a0)
  d6:	5f00                	lw	s0,56(a4)
  d8:	6f746377          	0x6f746377
  dc:	626d                	lui	tp,0x1b
  de:	735f 6174 6574      	0x65746174735f
  e4:	5f00                	lw	s0,56(a4)
  e6:	745f 5f6d 6573      	0x65735f6d745f
    int pola[size_a];
  ec:	6f6c0063          	beq	s8,s6,7cc <ext_euclid+0x15e>
    int line[size_b][size_a + size_b];
  f0:	676e                	flw	fa4,216(sp)
    int pola[size_a];
  f2:	6c20                	flw	fs0,88(s0)
    int line[size_b][size_a + size_b];
  f4:	20676e6f          	jal	t3,762fa <_stack_start+0x662fa>
    int pola[size_a];
  f8:	6e69                	lui	t3,0x1a
    int line[size_b][size_a + size_b];
  fa:	0074                	addi	a3,sp,12
    int pola[size_a];
  fc:	657a6973          	csrrsi	s2,0x657,20
    int polb[size_b];
 100:	4e5f 7000 6c6f      	0x6c6f70004e5f
    int pola[size_a];
 106:	6d79                	lui	s10,0x1e
    int polb[size_b];
 108:	6c75                	lui	s8,0x1d
 10a:	0074                	addi	a3,sp,12
            line[i][j] = 0;
 10c:	755f 7562 0066      	0x667562755f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 112:	625f 7361 0065      	0x657361625f
 118:	5f5f 6d74 685f      	0x685f6d745f5f
    int polb[size_b];
 11e:	0072756f          	jal	a0,27924 <_stack_start+0x17924>
            line[i][j] = 0;
 122:	5f5f 6673 5f00      	0x5f0066735f5f
    for (i = 0; i < size_b; ++i){
 128:	655f6e6f          	jal	t3,f6f7c <_stack_start+0xe6f7c>
            product[j] = 0;
 12c:	6978                	flw	fa4,84(a0)
 12e:	5f74                	lw	a3,124(a4)
 130:	7261                	lui	tp,0xffff8
    for (i = 0; i < size_b; ++i){
 132:	5f007367          	0x5f007367
    array_equ(pola,a,size_a);
 136:	6b6f6f63          	bltu	t5,s6,7f4 <ext_euclid+0x186>
 13a:	6569                	lui	a0,0x1a
 13c:	5f00                	lw	s0,56(a4)
 13e:	735f 6c67 6575      	0x65756c67735f
 144:	7200                	flw	fs0,32(a2)
    for (i = 0; i < size_a; ++i){
 146:	7365                	lui	t1,0xffff9
 148:	0031                	c.nop	12
 14a:	6572                	flw	fa0,28(sp)
 14c:	5f003273          	csrrc	tp,0x5f0,zero
 150:	6c66                	flw	fs8,88(sp)
 152:	6761                	lui	a4,0x18
 154:	695f0073          	0x695f0073
    array_equ(polb,b,size_b);
 158:	78635f73          	csrrwi	t5,0x786,6
 15c:	0061                	c.nop	24
    for (i = 0; i < size_b; ++i){
 15e:	735f 6474 6e69      	0x6e696474735f
 164:	5f00                	lw	s0,56(a4)
    if(star_mult == 1){
 166:	6c62                	flw	fs8,24(sp)
 168:	7a69736b          	0x7a69736b
 16c:	0065                	c.nop	25
 16e:	7270                	flw	fa2,100(a2)
 170:	6375646f          	jal	s0,56fa6 <_stack_start+0x46fa6>
 174:	0074                	addi	a3,sp,12
 176:	6f70                	flw	fa2,92(a4)
 178:	796c                	flw	fa1,116(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 17a:	6964                	flw	fs1,84(a0)
 17c:	0076                	c.slli	zero,0x1d
            for (k = size_a-1; k >= 0; k = k-1 ){
 17e:	6f70                	flw	fa2,92(a4)
 180:	796c                	flw	fa1,116(a0)
            product[j] = 0;
 182:	0066                	c.slli	zero,0x19
 184:	5f5f 6473 6469      	0x646964735f5f
            line[i][j] = 0;
 18a:	6e69                	lui	t3,0x1a
            product[j] = 0;
 18c:	7469                	lui	s0,0xffffa
 18e:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 190:	62747663          	bgeu	s0,t2,7bc <ext_euclid+0x14e>
 194:	6675                	lui	a2,0x1d
 196:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_b; ++i){
 198:	7366666f          	jal	a2,668ce <_stack_start+0x568ce>
 19c:	7465                	lui	s0,0xffff9
 19e:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 1a0:	626d                	lui	tp,0x1b
 1a2:	6f747273          	csrrci	tp,0x6f7,8
            pola[i] = pola[i] + mod;
 1a6:	5f736377          	0x5f736377
        while (pola[i] < 0){
 1aa:	74617473          	csrrci	s0,0x746,2
        pola[i] = pola[i] % mod;
 1ae:	0065                	c.nop	25
 1b0:	6d5f 7262 656c      	0x656c72626d5f
 1b6:	5f6e                	lw	t5,248(sp)
 1b8:	74617473          	csrrci	s0,0x746,2
            polb[i] = polb[i] + mod;
 1bc:	0065                	c.nop	25
 1be:	665f 616e 6772      	0x6772616e665f
        while (polb[i] < 0){
 1c4:	746e0073          	0x746e0073
        polb[i] = polb[i] % mod;
 1c8:	7572                	flw	fa0,60(sp)
    for (i = 0; i < size_b; ++i){
 1ca:	645f 6365 7965      	0x79656365645f
        polb[i] = polb[i] % mod;
 1d0:	7470                	flw	fa2,108(s0)
    for (i = 0; i < size_b; ++i){
 1d2:	5f00                	lw	s0,56(a4)
    if(star_mult == 1){
 1d4:	6e66                	flw	ft8,88(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1d6:	735f0073          	0x735f0073
        for(j = 0; j < size_a + size_b -1; ++j){
 1da:	6769                	lui	a4,0x1a
    for (i = 0; i < size_b; ++i){
 1dc:	006e                	c.slli	zero,0x1b
 1de:	665f 6f6c 6b63      	0x6b636f6c665f
 1e4:	745f 5f00 7473      	0x74735f00745f
    for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	6564                	flw	fs1,76(a0)
 1ec:	7272                	flw	ft4,60(sp)
 1ee:	5f00                	lw	s0,56(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	6942                	flw	fs2,16(sp)
 1f2:	746e6967          	0x746e6967
}
 1f6:	5f00                	lw	s0,56(a4)
 1f8:	6d6d6167          	0x6d6d6167
 1fc:	5f61                	li	t5,-8
 1fe:	6e676973          	csrrsi	s2,0x6e6,14
 202:	006d6167          	0x6d6167
 206:	725f 6165 0064      	0x646165725f
 20c:	725f 7365 6c75      	0x6c757365725f
 212:	5f74                	lw	a3,124(a4)
 214:	5f5f006b          	0x5f5f006b
 218:	6d74                	flw	fa3,92(a0)
 21a:	6400                	flw	fs0,8(s0)
 21c:	6e65                	lui	t3,0x19
 21e:	6d75                	lui	s10,0x1d
                line[size_b-1-j][k] = pola[k]*polb[j];
 220:	745f 6d65 0070      	0x706d65745f
 226:	5f5f 6377 6268      	0x626863775f5f
 22c:	7200                	flw	fs0,32(a2)
 22e:	7365                	lui	t1,0xffff9
            for (k = size_a-1; k >= 0; k = k-1 ){
 230:	6c75                	lui	s8,0x1d
                line[size_b-1-j][k] = pola[k]*polb[j];
 232:	6b74                	flw	fa3,84(a4)
 234:	5f006e6f          	jal	t3,6824 <_stack_len+0x2824>
            for (k = size_a-1; k >= 0; k = k-1 ){
 238:	6f647473          	csrrci	s0,0x6f6,8
        for (j = size_b -1; j >= 0; j = j-1){
 23c:	7475                	lui	s0,0xffffd
 23e:	5f00                	lw	s0,56(a4)
 240:	6c747663          	bgeu	s0,t2,90c <ext_euclid+0x29e>
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	6e65                	lui	t3,0x19
 246:	7300                	flw	fs0,32(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	6365                	lui	t1,0x19
 24a:	6572                	flw	fa0,28(sp)
 24c:	5f74                	lw	a3,124(a4)
 24e:	5f79656b          	0x5f79656b
 252:	7166                	flw	ft2,120(sp)
 254:	5f00                	lw	s0,56(a4)
 256:	6966                	flw	fs2,88(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	656c                	flw	fa1,76(a0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	7200                	flw	fs0,32(a2)
 25c:	7465                	lui	s0,0xffff9
 25e:	7275                	lui	tp,0xffffd
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	5f6e                	lw	t5,248(sp)
 262:	6461                	lui	s0,0x18
        for (j = size_b -1; j >= 0; j = j-1){
 264:	7264                	flw	fs1,100(a2)
 266:	7365                	lui	t1,0xffff9
 268:	72003173          	csrrc	sp,0x720,zero
            line[i][j] = line[i][j] % mod;
 26c:	7465                	lui	s0,0xffff9
        for(j = 0; j < size_a + size_b -1; ++j){
 26e:	7275                	lui	tp,0xffffd
 270:	5f6e                	lw	t5,248(sp)
            line[i][j] = line[i][j] % mod;
 272:	6461                	lui	s0,0x18
 274:	7264                	flw	fs1,100(a2)
 276:	7365                	lui	t1,0xffff9
 278:	72003273          	csrrc	tp,0x720,zero
        for(j = 0; j < size_a + size_b -1; ++j){
 27c:	7465                	lui	s0,0xffff9
    for (i = 0; i < size_b; ++i){
 27e:	7275                	lui	tp,0xffffd
 280:	5f6e                	lw	t5,248(sp)
 282:	6461                	lui	s0,0x18
 284:	7264                	flw	fs1,100(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 286:	7365                	lui	t1,0xffff9
 288:	72003373          	csrrc	t1,0x720,zero
            product[j] += line[i][j];
 28c:	7465                	lui	s0,0xffff9
 28e:	7275                	lui	tp,0xffffd
 290:	5f6e                	lw	t5,248(sp)
 292:	6461                	lui	s0,0x18
        for(i = 0; i < size_b; ++i){
 294:	7264                	flw	fs1,100(a2)
            product[j] += line[i][j];
 296:	7365                	lui	t1,0xffff9
 298:	5f003473          	csrrc	s0,0x5f0,zero
 29c:	696e                	flw	fs2,216(sp)
 29e:	0073626f          	jal	tp,36aa4 <_stack_start+0x26aa4>
        for(i = 0; i < size_b; ++i){
 2a2:	6572                	flw	fa0,28(sp)
 2a4:	7574                	flw	fa3,108(a0)
    for(j = 0; j < size_a + size_b -1; ++j){
 2a6:	6e72                	flw	ft8,28(sp)
 2a8:	615f 6464 6572      	0x65726464615f
        for(i = 0; i < size_b; ++i){
 2ae:	00367373          	csrrci	t1,fcsr,12
    for(j = 0; j < size_a + size_b -1; ++j){
 2b2:	6572                	flw	fa0,28(sp)
 2b4:	7574                	flw	fa3,108(a0)
        product[j] = product[j] % mod;
 2b6:	6e72                	flw	ft8,28(sp)
 2b8:	615f 6464 6572      	0x65726464615f
    for(j = 0; j < size_a + size_b -1; ++j){
 2be:	00377373          	csrrci	t1,fcsr,14
    int line[size_b][size_a + size_b];
 2c2:	726f6873          	csrrsi	a6,0x726,30
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2c6:	2074                	fld	fa3,192(s0)
 2c8:	6e75                	lui	t3,0x1d
 2ca:	6e676973          	csrrsi	s2,0x6e6,14
 2ce:	6465                	lui	s0,0x19
    int line[size_b][size_a + size_b];
 2d0:	6920                	flw	fs0,80(a0)
 2d2:	746e                	flw	fs0,248(sp)
 2d4:	5f00                	lw	s0,56(a4)
 2d6:	7461                	lui	s0,0xffff8
 2d8:	7865                	lui	a6,0xffff9
 2da:	7469                	lui	s0,0xffffa
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2dc:	0030                	addi	a2,sp,8
 2de:	735f 6769 616e      	0x616e6769735f
 2e4:	5f6c                	lw	a1,124(a4)
 2e6:	7562                	flw	fa0,56(sp)
 2e8:	0066                	c.slli	zero,0x19
 2ea:	615f 6373 6974      	0x69746373615f
 2f0:	656d                	lui	a0,0x1b
 2f2:	625f 6675 5f00      	0x5f006675625f
    int line[size_b][size_a + size_b];
 2f8:	6572                	flw	fa0,28(sp)
    int pola[size_a];
 2fa:	746c7573          	csrrci	a0,0x746,24
 2fe:	5f00                	lw	s0,56(a4)
 300:	775f 6863 7700      	0x77006863775f
 306:	6e69                	lui	t3,0x1a
    int polb[size_b];
 308:	5f74                	lw	a3,124(a4)
 30a:	0074                	addi	a3,sp,12
 30c:	656e6567          	0x656e6567
 310:	6172                	flw	ft2,28(sp)
 312:	6574                	flw	fa3,76(a0)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 314:	6b5f 7965 0073      	0x7379656b5f
    int line[size_b][size_a + size_b];
 31a:	5f5f 7562 6c69      	0x6c6975625f5f
    int pola[size_a];
 320:	6974                	flw	fa3,84(a0)
    int polb[size_b];
 322:	5f6e                	lw	t5,248(sp)
    for (i = 0; i < size_b; ++i){
 324:	656d                	lui	a0,0x1b
 326:	636d                	lui	t1,0x1b
 328:	7970                	flw	fa2,116(a0)
            product2[j] = 0;
 32a:	5f00                	lw	s0,56(a4)
 32c:	6f6c                	flw	fa1,92(a4)
 32e:	4e006b63          	bltu	zero,zero,824 <ext_euclid+0x1b6>
    for (i = 0; i < size_b; ++i){
 332:	5254                	lw	a3,36(a2)
 334:	5f55                	li	t5,-11
    array_equ(pola,a,size_a);
 336:	3834                	fld	fa3,112(s0)
 338:	625f 7469 2e4d      	0x2e4d7469625f
 33e:	72700063          	beq	zero,t2,a5e <generate_keys+0x142>
    array_equ(polb,b,size_b);
 342:	6375646f          	jal	s0,57178 <_stack_start+0x47178>
 346:	3274                	fld	fa3,224(a2)
 348:	6500                	flw	fs0,8(a0)
 34a:	7478                	flw	fa4,108(s0)
 34c:	655f 6375 696c      	0x696c6375655f
    if(star_mult == 1){
 352:	0064                	addi	s1,sp,12
 354:	775f 6972 6574      	0x65746972775f
 35a:	5f00                	lw	s0,56(a4)
 35c:	745f 5f6d 6579      	0x65795f6d745f
        for (j = size_b -1; j >= 0; j = j-1){
 362:	7261                	lui	tp,0xffff8
            for (k = size_a-1; k >= 0; k = k-1 ){
 364:	7000                	flw	fs0,32(s0)
 366:	00626c6f          	jal	s8,2636c <_stack_start+0x1636c>
            product2[j] = 0;
 36a:	6172                	flw	ft2,28(sp)
 36c:	646e                	flw	fs0,216(sp)
            line[i][j] = 0;
 36e:	765f6d6f          	jal	s10,f72d2 <_stack_start+0xe72d2>
            product2[j] = 0;
 372:	6c61                	lui	s8,0x18
 374:	5f00                	lw	s0,56(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 376:	6d6e                	flw	fs10,216(sp)
 378:	6c61                	lui	s8,0x18
 37a:	6f6c                	flw	fa1,92(a4)
 37c:	6f6c0063          	beq	s8,s6,a5c <generate_keys+0x140>
    for (i = 0; i < size_b; ++i){
 380:	676e                	flw	fa4,216(sp)
 382:	6420                	flw	fs0,72(s0)
 384:	6c62756f          	jal	a0,27a4a <_stack_start+0x17a4a>
        for(j = 0; j < size_a + size_b -1; ++j){
 388:	0065                	c.nop	25
                line[size_b-1-j][k] = pola[k]*polb[j];
 38a:	6e5f 7865 6674      	0x667478656e5f
 390:	6100                	flw	fs0,0(a0)
 392:	7272                	flw	ft4,60(sp)
 394:	7961                	lui	s2,0xffff8
 396:	655f 7571 6d00      	0x6d007571655f
 39c:	7365                	lui	t1,0xffff9
 39e:	65676173          	csrrsi	sp,0x656,14
            for (k = size_a-1; k >= 0; k = k-1 ){
 3a2:	5f00                	lw	s0,56(a4)
 3a4:	745f 5f6d 6f6d      	0x6f6d5f6d745f
        for (j = size_b -1; j >= 0; j = j-1){
 3aa:	006e                	c.slli	zero,0x1b
 3ac:	6572                	flw	fa0,28(sp)
 3ae:	7574                	flw	fa3,108(a0)
        for(j=0;j<size_a+size_b-1;++j){
 3b0:	6e72                	flw	ft8,28(sp)
    for(i=0;i<size_b;++i){
 3b2:	615f 6464 6572      	0x65726464615f
 3b8:	00357373          	csrrci	t1,fcsr,10
 3bc:	615f 6574 6978      	0x69786574615f
        for(j=0;j<size_a+size_b-1;++j){
 3c2:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c4:	6f627573          	csrrci	a0,0x6f6,4
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3c8:	7470                	flw	fa2,108(s0)
 3ca:	7261                	lui	tp,0xffff8
 3cc:	682f0067          	jr	1666(t5)
 3d0:	2f656d6f          	jal	s10,566c6 <_stack_start+0x466c6>
 3d4:	6f74                	flw	fa3,92(a4)
 3d6:	6170                	flw	fa2,68(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	636c                	flw	fa1,68(a4)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 3da:	7365442f          	0x7365442f
 3de:	706f746b          	0x706f746b
            for (k = size_a-1; k >= 0; k = k-1 ){
 3e2:	6f72702f          	0x6f72702f
        for (j = size_b -1; j >= 0; j = j-1){
 3e6:	656a                	flw	fa0,152(sp)
 3e8:	656c                	flw	fa1,76(a0)
 3ea:	2f72                	fld	ft10,280(sp)
            product2[j] += line[i][j];
 3ec:	75636c6f          	jal	s8,36b42 <_stack_start+0x26b42>
        for(j=0;j<size_a+size_b-1;++j){
 3f0:	2f6d                	jal	baa <generate_keys+0x28e>
 3f2:	71652e33          	0x71652e33
            product2[j] += line[i][j];
 3f6:	0075                	c.nop	29
 3f8:	6f5f 6666 745f      	0x745f66666f5f
        for(j=0;j<size_a+size_b-1;++j){
 3fe:	4500                	lw	s0,8(a0)
    for(i=0;i<size_b;++i){
 400:	636e                	flw	ft6,216(sp)
 402:	4d5f 7365 6173      	0x617373654d5f
}
 408:	63006567          	0x63006567
 40c:	72746e6f          	jal	t3,47332 <_stack_start+0x37332>
 410:	00526c6f          	jal	s8,26c14 <_stack_start+0x16c14>
 414:	665f 6572 6c65      	0x6c656572665f
 41a:	7369                	lui	t1,0xffffa
 41c:	0074                	addi	a3,sp,12
 41e:	6972                	flw	fs2,28(sp)
 420:	676e                	flw	fa4,216(sp)
 422:	705f 6c6f 0079      	0x796c6f705f
 428:	4c5f 434f 5f4b      	0x5f4b434f4c5f
 42e:	4552                	lw	a0,20(sp)
    int v[size_N];
 430:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 434:	5649                	li	a2,-14
    int v[size_N];
 436:	5f45                	li	t5,-15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 438:	0054                	addi	a3,sp,4
 43a:	6974                	flw	fa3,84(a0)
 43c:	315f 7400 5f69      	0x5f697400315f
 442:	0032                	c.slli	zero,0xc
 444:	6e75                	lui	t3,0x1d
 446:	6e676973          	csrrsi	s2,0x6e6,14
 44a:	6465                	lui	s0,0x19
 44c:	6320                	flw	fs0,64(a4)
 44e:	6168                	flw	fa0,68(a0)
    int v[size_N];
 450:	0072                	c.slli	zero,0x1c
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 452:	6971                	lui	s2,0x1c
 454:	315f 5f00 656e      	0x656e5f00315f
    int v[size_N];
 45a:	685f0077          	0x685f0077
    int q[size_N];
 45e:	655f 7272 6f6e      	0x6f6e7272655f
    int num_temp[size_N];
 464:	7300                	flw	fs0,32(a4)
    int denum_temp[size_D];
 466:	6f68                	flw	fa0,92(a4)
 468:	7472                	flw	fs0,60(sp)
 46a:	6920                	flw	fs0,80(a0)
    int num_temp[size_N];
 46c:	746e                	flw	fs0,248(sp)
    int denum_temp[size_D];
 46e:	5f00                	lw	s0,56(a4)
 470:	745f 5f6d 6479      	0x64795f6d745f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 476:	7961                	lui	s2,0xffff8
    int v[size_N];
 478:	5f00                	lw	s0,56(a4)
 47a:	735f 7562 0066      	0x667562735f
    array_equ(num_temp,num,size_N);
 480:	665f 616c 7367      	0x7367616c665f
    int denum_temp[size_D];
 486:	0032                	c.slli	zero,0xc
 488:	695f 626f 0073      	0x73626f695f
    for (i = 0; i < size_N; ++i){
 48e:	5f5f 4946 454c      	0x454c49465f5f
 494:	5f00                	lw	s0,56(a4)
 496:	626d                	lui	tp,0x1b
  array_equ(denum_temp,denum,size_D);
 498:	74617473          	csrrci	s0,0x746,2
 49c:	5f65                	li	t5,-7
 49e:	0074                	addi	a3,sp,12
    for (i = 0; i < size_D; ++i) {
 4a0:	5f5f 4673 4c49      	0x4c4946735f5f
 4a6:	0045                	c.nop	17
    for (i = 0; i < size_N; ++i){
 4a8:	6d5f 7362 6174      	0x617473626d5f
    for (i = size_D-1; i >= 0; i = i-1){
 4ae:	6574                	flw	fa3,76(a0)
 4b0:	5f00                	lw	s0,56(a4)
 4b2:	6172                	flw	ft2,28(sp)
 4b4:	646e                	flw	fs0,216(sp)
 4b6:	6e5f 7865 0074      	0x7478656e5f
    for (i = 0; i < size_N; ++i){
 4bc:	6d5f 6c62 6e65      	0x6e656c626d5f
    for (u = 0; u < mod; ++u){
 4c2:	735f 6174 6574      	0x65746174735f
            num_temp[i] = num_temp[i] + mod;
 4c8:	5f00                	lw	s0,56(a4)
 4ca:	6e69                	lui	t3,0x1a
        while (num_temp[i] < 0) {
 4cc:	695f0063          	beq	t5,s5,b4c <generate_keys+0x230>
 4d0:	646e                	flw	fs0,216(sp)
        num_temp[i] = num_temp[i] % mod;
 4d2:	5f00                	lw	s0,56(a4)
 4d4:	6f6c                	flw	fa1,92(a4)
    for (i = 0; i < size_N; ++i){
 4d6:	656c6163          	bltu	s8,s6,b18 <generate_keys+0x1fc>
        num_temp[i] = num_temp[i] % mod;
 4da:	5f00                	lw	s0,56(a4)
 4dc:	635f 656c 6e61      	0x6e61656c635f
            denum_temp[i] = denum_temp[i] + mod;
 4e2:	7075                	c.lui	zero,0xffffd
        while (denum_temp[i] < 0) {
 4e4:	5f00                	lw	s0,56(a4)
 4e6:	6e75                	lui	t3,0x1d
 4e8:	63657073          	csrci	0x636,10
        denum_temp[i] = denum_temp[i] % mod;
 4ec:	6669                	lui	a2,0x1a
    for (i = 0; i < size_D; ++i) {
 4ee:	6569                	lui	a0,0x1a
 4f0:	5f64                	lw	s1,124(a4)
        denum_temp[i] = denum_temp[i] % mod;
 4f2:	6f6c                	flw	fa1,92(a4)
 4f4:	656c6163          	bltu	s8,s6,b36 <generate_keys+0x21a>
        q[i] = 0;
 4f8:	695f 666e 006f      	0x6f666e695f
 4fe:	6d5f 7861 6477      	0x647778616d5f
 504:	725f0073          	0x725f0073
        v[i] = 0;
 508:	6565                	lui	a0,0x19
    for (i = 0; i < size_N; ++i){
 50a:	746e                	flw	fs0,248(sp)
 50c:	7300                	flw	fs0,32(a4)
        if( denum_temp[i] != 0 )
 50e:	6174                	flw	fa3,68(a0)
    for (i = size_D-1; i >= 0; i = i-1){
 510:	5f72                	lw	t5,60(sp)
 512:	756d                	lui	a0,0xffffb
        if ( (b_N*u)%mod == 1 )
 514:	746c                	flw	fa1,108(s0)
 516:	5f00                	lw	s0,56(a4)
 518:	64656573          	csrrsi	a0,0x646,10
 51c:	7200                	flw	fs0,32(a2)
    for (u = 0; u < mod; ++u){
 51e:	5f69                	li	t5,-6
 520:	0032                	c.slli	zero,0xc
        if( num_temp[i] != 0 )
 522:	5f5f 6f63 6e75      	0x6e756f635f5f
    for (i = size_N-1; i >= 0; i = i-1){
 528:	0074                	addi	a3,sp,12
 52a:	5f5f 6176 756c      	0x756c61765f5f
 530:	0065                	c.nop	25
    while (d >= d2){
 532:	735f 6565 006b      	0x6b6565735f
    array_equ(result,q,size_N);
 538:	665f 6f70 5f73      	0x5f736f70665f
 53e:	0074                	addi	a3,sp,12
 540:	656c                	flw	fa1,76(a0)
 542:	676e                	flw	fa4,216(sp)
    for(i = size_N; i < (2*size_N); ++i){
 544:	6874                	flw	fa3,84(s0)
 546:	5f00                	lw	s0,56(a4)
        result[i] = num_temp[i-size_N];
 548:	745f 5f6d 696d      	0x696d5f6d745f
 54e:	006e                	c.slli	zero,0x1b
    for(i = size_N; i < (2*size_N); ++i){
 550:	7570                	flw	fa2,108(a0)
 552:	6c62                	flw	fs8,24(sp)
}
 554:	6369                	lui	t1,0x1a
 556:	6b5f 7965 5f00      	0x5f0079656b5f
 55c:	74727473          	csrrci	s0,0x747,4
 560:	6c5f6b6f          	jal	s6,f7424 <_stack_start+0xe7424>
 564:	7361                	lui	t1,0xffff8
 566:	0074                	addi	a3,sp,12
 568:	665f 746e 7079      	0x7079746e665f
 56e:	7365                	lui	t1,0xffff9
 570:	7300                	flw	fs0,32(a4)
 572:	6365                	lui	t1,0x19
 574:	6572                	flw	fa0,28(sp)
 576:	5f74                	lw	a3,124(a4)
 578:	5f79656b          	0x5f79656b
 57c:	7066                	flw	ft0,120(sp)
        v[(d-d2)] = u*r_d;
 57e:	5f00                	lw	s0,56(a4)
 580:	6461                	lui	s0,0x18
 582:	0064                	addi	s1,sp,12
 584:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 58a:	69720067          	jr	1687(tp) # 0 <__DYNAMIC>
        for (i = 0; i < size_N; ++i){
 58e:	315f 5f00 6567      	0x65675f00315f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 594:	6474                	flw	fa3,76(s0)
 596:	7461                	lui	s0,0xffff8
 598:	5f65                	li	t5,-7
 59a:	7265                	lui	tp,0xffff9
 59c:	0072                	c.slli	zero,0x1c
 59e:	675f 6f6c 6162      	0x61626f6c675f
        for (i = 0; i < size_N; ++i){
 5a4:	5f6c                	lw	a1,124(a4)
 5a6:	6d69                	lui	s10,0x1a
 5a8:	7570                	flw	fa2,108(a0)
 5aa:	6572                	flw	fa0,28(sp)
        for (i = 0; i < size_N; ++i){
 5ac:	705f 7274 4700      	0x47007274705f
 5b2:	554e                	lw	a0,240(sp)
        for (i = 0; i < size_N; ++i){
 5b4:	4320                	lw	s0,64(a4)
 5b6:	3731                	jal	4c2 <polydiv+0x92>
 5b8:	3920                	fld	fs0,112(a0)
 5ba:	322e                	fld	ft4,232(sp)
        for(i = 0; i < size_N; ++i){
 5bc:	302e                	fld	ft0,232(sp)
 5be:	2d20                	fld	fs0,88(a0)
 5c0:	616d                	addi	sp,sp,240
        for (i = size_N-1; i >= 0; i = i-1){
 5c2:	6372                	flw	ft6,28(sp)
 5c4:	3d68                	fld	fa0,248(a0)
 5c6:	7672                	flw	fa2,60(sp)
 5c8:	6d693233          	0x6d693233
 5cc:	6d2d2063          	0x6d2d2063
 5d0:	6261                	lui	tp,0x18
 5d2:	3d69                	jal	46c <polydiv+0x3c>
            v[i] = v[i] % mod;
 5d4:	6c69                	lui	s8,0x1a
        for (i = 0; i < size_N; ++i){
 5d6:	3370                	fld	fa2,224(a4)
 5d8:	2032                	fld	ft0,264(sp)
            v[i] = v[i] % mod;
 5da:	6d2d                	lui	s10,0xb
 5dc:	646f6d63          	bltu	t5,t1,c36 <ntru_encyrpt+0x26>
 5e0:	6c65                	lui	s8,0x19
        for (i = 0; i < size_N; ++i){
 5e2:	6d3d                	lui	s10,0xf
                product[i] = product[i] + mod;
 5e4:	6465                	lui	s0,0x19
 5e6:	6e61                	lui	t3,0x18
            while (product[i] < 0) {
 5e8:	2079                	jal	676 <ext_euclid+0x8>
 5ea:	6d2d                	lui	s10,0xb
 5ec:	7574                	flw	fa3,108(a0)
            product[i] = product[i] % mod;
 5ee:	656e                	flw	fa0,216(sp)
 5f0:	723d                	lui	tp,0xfffef
        for (i = 0; i < size_N; ++i){
 5f2:	656b636f          	jal	t1,b6c48 <_stack_start+0xa6c48>
            product[i] = product[i] % mod;
 5f6:	2074                	fld	fa3,192(s0)
 5f8:	672d                	lui	a4,0xb
        for (i = 0; i < size_N; ++i){
 5fa:	2d20                	fld	fs0,88(a0)
            num_temp[i] = num_temp[i] - product[i];
 5fc:	2d20734f          	0x2d20734f
 600:	7666                	flw	fa2,120(sp)
 602:	7369                	lui	t1,0xffffa
 604:	6269                	lui	tp,0x1a
        for (i = 0; i < size_N; ++i){
 606:	6c69                	lui	s8,0x1a
 608:	7469                	lui	s0,0xffffa
            num_temp[i] = num_temp[i] - product[i];
 60a:	3d79                	jal	4a8 <polydiv+0x78>
 60c:	6968                	flw	fa0,84(a0)
 60e:	6464                	flw	fs1,76(s0)
        for (i = 0; i < size_N; ++i){
 610:	6e65                	lui	t3,0x19
                num_temp[i] = num_temp[i] + mod;
 612:	5f00                	lw	s0,56(a4)
 614:	6e75                	lui	t3,0x1d
            while (num_temp[i] < 0){
 616:	7375                	lui	t1,0xffffd
 618:	6465                	lui	s0,0x19
 61a:	725f 6e61 0064      	0x646e61725f
        for (i = 0; i < size_N; ++i){
 620:	696c                	flw	fa1,84(a0)
 622:	656e                	flw	fa0,216(sp)
            num_temp[i] = num_temp[i] % mod;
 624:	5f00                	lw	s0,56(a4)
 626:	00736477          	0x736477
            q[i] = q[i] + v[i];
 62a:	5f5f 6d74 775f      	0x775f6d745f5f
 630:	6164                	flw	fs1,68(a0)
 632:	0079                	c.nop	30
        for(i = 0; i < size_N; ++i){
 634:	675f 756c 0065      	0x65756c675f
            q[i] = q[i] % mod;
 63a:	6e69                	lui	t3,0x1a
 63c:	5f727473          	csrrci	s0,0x5f7,4
 640:	7165                	addi	sp,sp,-400
        for(i = 0; i < size_N; ++i){
 642:	0075                	c.nop	29
            if( num_temp[i] != 0 )
 644:	746e                	flw	fs0,248(sp)
        for (i = size_N-1; i >= 0; i = i-1){
 646:	7572                	flw	fa0,60(sp)
 648:	655f 636e 7279      	0x7279636e655f
            v[i] = 0;
 64e:	7470                	flw	fa2,108(s0)
 650:	5f00                	lw	s0,56(a4)
 652:	7a697373          	csrrci	t1,0x7a6,18
        for (i = 0; i < size_N; ++i){
 656:	5f65                	li	t5,-7
 658:	0074                	addi	a3,sp,12
 65a:	6c5f 3436 5f61      	0x5f6134366c5f
        result[i] = num_temp[i-size_N];
 660:	7562                	flw	fa0,56(sp)
 662:	0066                	c.slli	zero,0x19
 664:	6564                	flw	fs1,76(a0)
 666:	756e                	flw	fa0,248(sp)
    for(i = size_N; i < (2*size_N); ++i){
 668:	006d                	c.nop	27
 66a:	735f 6769 665f      	0x665f6769735f
    int ri_2[size]; // MX-ring poly, a
 670:	6e75                	lui	t3,0x1d
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 672:	6e5f0063          	beq	t5,t0,d52 <ntru_deceypt+0xac>
    int ri_2[size]; // MX-ring poly, a
 676:	7562                	flw	fa0,56(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 678:	0066                	c.slli	zero,0x19
 67a:	755f 756e 6573      	0x6573756e755f
 680:	0064                	addi	s1,sp,12
 682:	6f70                	flw	fa2,92(a4)
 684:	796c                	flw	fa1,116(a0)
 686:	0052                	c.slli	zero,0x14
 688:	657a6973          	csrrsi	s2,0x657,20
 68c:	445f 5f00 745f      	0x745f5f00445f
 692:	5f6d                	li	t5,-5
    int ri_2[size]; // MX-ring poly, a
 694:	7369                	lui	t1,0xffffa
 696:	7364                	flw	fs1,100(a4)
 698:	0074                	addi	a3,sp,12
    int ri_1[size]; // f-random poly, f[N] = 0, b
 69a:	6c5f 636f 6c61      	0x6c61636f6c5f
    int ri[size];
 6a0:	6974                	flw	fa3,84(a0)
 6a2:	656d                	lui	a0,0x1b
 6a4:	625f 6675 5f00      	0x5f006675625f
    int ti_1[size]; // ti_1[0] = 1
 6aa:	736f6c63          	bltu	t5,s6,de2 <main_entry+0xa>
    int ti[size];
 6ae:	0065                	c.nop	25
 6b0:	725f 3834 5f00      	0x5f003834725f
    int qi_1[size];
 6b6:	626d                	lui	tp,0x1b
    int temp[size];
 6b8:	6f74                	flw	fa3,92(a4)
 6ba:	735f6377          	0x735f6377
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6be:	6174                	flw	fa3,68(a0)
 6c0:	6574                	flw	fa3,76(a0)
    int ri_2[size]; // MX-ring poly, a
 6c2:	5f00                	lw	s0,56(a4)
 6c4:	3570                	fld	fa2,232(a0)
    int temp[size];
 6c6:	616d0073          	0x616d0073
        ti_2[i] = 0;
 6ca:	6e69                	lui	t3,0x1a
 6cc:	5f00                	lw	s0,56(a4)
 6ce:	745f 5f6d 646d      	0x646d5f6d745f
    for (i = 0; i < size; ++i) {
 6d4:	7961                	lui	s2,0xffff8
    array_equ(ri_2,polyR,size);
 6d6:	7300                	flw	fs0,32(a4)
 6d8:	7a69                	lui	s4,0xffffa
 6da:	5f65                	li	t5,-7
 6dc:	0061                	c.nop	24
    array_equ(ri_1,polyf,size);
 6de:	657a6973          	csrrsi	s2,0x657,20
 6e2:	625f 6300 7472      	0x74726300625f
    ti_1[0] = 1;
 6e8:	2e30                	fld	fa2,88(a2)
 6ea:	4e470053          	0x4e470053
        for (i = N + 1; i < (2 * N + 2); ++i) {
 6ee:	2055                	jal	792 <ext_euclid+0x124>
 6f0:	5341                	li	t1,-16
 6f2:	3220                	fld	fs0,96(a2)
        for (i = 0; i < N + 1; ++i) {
 6f4:	332e                	fld	ft6,232(sp)
 6f6:	0032                	c.slli	zero,0xc

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <ext_euclid+0x12>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	0058                	addi	a4,sp,4
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	020c                	addi	a1,sp,256
  3e:	0000                	unimp
  40:	0e42                	slli	t3,t3,0x10
  42:	4250                	lw	a2,4(a2)
  44:	0492                	slli	s1,s1,0x4
  46:	9346                	add	t1,t1,a7
  48:	4805                	li	a6,1
  4a:	0a98                	addi	a4,sp,336
  4c:	88500d9b          	0x88500d9b
  50:	8902                	jr	s2
  52:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  56:	4e00                	lw	s0,24(a2)
  58:	0694                	addi	a3,sp,832
  5a:	0795                	addi	a5,a5,5
  5c:	0896                	slli	a7,a7,0x5
  5e:	0b990997          	auipc	s3,0xb990
  62:	0c9a                	slli	s9,s9,0x6
  64:	0181                	addi	gp,gp,0
  66:	0a011403          	lh	s0,160(sp)
  6a:	020c                	addi	a1,sp,256
  6c:	4250                	lw	a2,4(a2)
  6e:	42c1                	li	t0,16
  70:	42c8                	lw	a0,4(a3)
  72:	42c9                	li	t0,18
  74:	42d2                	lw	t0,20(sp)
  76:	42d442d3          	0x42d442d3
  7a:	42d5                	li	t0,21
  jal x0, default_exc_handler
  7c:	42d6                	lw	t0,84(sp)
  7e:	42d842d7          	0x42d842d7
  jal x0, reset_handler
  82:	42d9                	li	t0,22
  jal x0, default_exc_handler
  84:	42da                	lw	t0,148(sp)
  86:	000e4adb          	0xe4adb
  jal x0, default_exc_handler
  8a:	0b42                	slli	s6,s6,0x10
    asm volatile(
  8c:	0054                	addi	a3,sp,4
  8e:	0000                	unimp
}
  90:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  92:	0000                	unimp
  94:	02c0                	addi	s0,sp,324
  96:	0000                	unimp
  98:	0170                	addi	a2,sp,140
  9a:	0000                	unimp
  9c:	0e42                	slli	t3,t3,0x10
  9e:	4650                	lw	a2,12(a2)
}
  a0:	0795                	addi	a5,a5,5
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  a2:	9648                	0x9648
  a4:	9708                	0x9708
    asm volatile(
  a6:	6209                	lui	tp,0x2
  a8:	0288                	addi	a0,sp,320
  aa:	0389                	addi	t2,t2,2
  ac:	0492                	slli	s1,s1,0x4
  ae:	06940593          	addi	a1,s0,105 # 19069 <_stack_start+0x9069>
    for(i=0;i<(length/3);i++) {
  b2:	0a98                	addi	a4,sp,336
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  b4:	0b99                	addi	s7,s7,6
  b6:	0c9a                	slli	s9,s9,0x6
  b8:	01810d9b          	0x1810d9b
    int line[size_b][size_a + size_b];
  bc:	0c42                	slli	s8,s8,0x10
  be:	0008                	0x8
  c0:	0c011603          	lh	a2,192(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  c4:	5002                	0x5002
    int line[size_b][size_a + size_b];
  c6:	c142                	sw	a6,128(sp)
  c8:	c842                	sw	a6,16(sp)
  ca:	c942                	sw	a6,144(sp)
  cc:	d242                	sw	a6,36(sp)
  ce:	d342                	sw	a6,164(sp)
  d0:	d442                	sw	a6,40(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  d2:	d542                	sw	a6,168(sp)
  d4:	d642                	sw	a6,44(sp)
  d6:	d742                	sw	a6,172(sp)
  d8:	d842                	sw	a6,48(sp)
  da:	d942                	sw	a6,176(sp)
  dc:	da42                	sw	a6,52(sp)
  de:	db42                	sw	a6,180(sp)
  e0:	0e4a                	slli	t3,t3,0x12
  e2:	0000                	unimp
  e4:	0054                	addi	a3,sp,4
  e6:	0000                	unimp
  e8:	0000                	unimp
    int line[size_b][size_a + size_b];
  ea:	0000                	unimp
    int pola[size_a];
  ec:	0430                	addi	a2,sp,520
  ee:	0000                	unimp
    int line[size_b][size_a + size_b];
  f0:	023e                	slli	tp,tp,0xf
    int pola[size_a];
  f2:	0000                	unimp
    int line[size_b][size_a + size_b];
  f4:	0e46                	slli	t3,t3,0x11
  f6:	5e40                	lw	s0,60(a2)
    int pola[size_a];
  f8:	0288                	addi	a0,sp,320
    int line[size_b][size_a + size_b];
  fa:	0389                	addi	t2,t2,2
    int pola[size_a];
  fc:	0492                	slli	s1,s1,0x4
  fe:	06940593          	addi	a1,s0,105
    int polb[size_b];
 102:	0795                	addi	a5,a5,5
 104:	0896                	slli	a7,a7,0x5
    int pola[size_a];
 106:	0a980997          	auipc	s3,0xa980
    int polb[size_b];
 10a:	0b99                	addi	s7,s7,6
            line[i][j] = 0;
 10c:	0c9a                	slli	s9,s9,0x6
 10e:	01810d9b          	0x1810d9b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 112:	0c42                	slli	s8,s8,0x10
    int pola[size_a];
 114:	0008                	0x8
 116:	0a010203          	lb	tp,160(sp)
    int line[size_b][size_a + size_b];
 11a:	020c                	addi	a1,sp,256
 11c:	4240                	lw	s0,4(a2)
    int polb[size_b];
 11e:	42c1                	li	t0,16
            line[i][j] = 0;
 120:	42c8                	lw	a0,4(a3)
 122:	42c9                	li	t0,18
 124:	42d2                	lw	t0,20(sp)
    for (i = 0; i < size_b; ++i){
 126:	42d442d3          	0x42d442d3
            product[j] = 0;
 12a:	42d5                	li	t0,21
 12c:	42d6                	lw	t0,84(sp)
 12e:	42d842d7          	0x42d842d7
    for (i = 0; i < size_b; ++i){
 132:	42d9                	li	t0,22
 134:	42da                	lw	t0,148(sp)
    array_equ(pola,a,size_a);
 136:	000e4adb          	0xe4adb
 13a:	0b42                	slli	s6,s6,0x10
 13c:	0054                	addi	a3,sp,4
 13e:	0000                	unimp
 140:	0000                	unimp
 142:	0000                	unimp
 144:	066e                	slli	a2,a2,0x1b
    for (i = 0; i < size_a; ++i){
 146:	0000                	unimp
 148:	02ae                	slli	t0,t0,0xb
 14a:	0000                	unimp
 14c:	0e46                	slli	t3,t3,0x11
 14e:	5e50                	lw	a2,60(a2)
 150:	0288                	addi	a0,sp,320
 152:	0389                	addi	t2,t2,2
 154:	0492                	slli	s1,s1,0x4
    array_equ(polb,b,size_b);
 156:	06940593          	addi	a1,s0,105
 15a:	0795                	addi	a5,a5,5
 15c:	0896                	slli	a7,a7,0x5
    for (i = 0; i < size_b; ++i){
 15e:	0a980997          	auipc	s3,0xa980
 162:	0b99                	addi	s7,s7,6
 164:	0c9a                	slli	s9,s9,0x6
    if(star_mult == 1){
 166:	01810d9b          	0x1810d9b
 16a:	0c42                	slli	s8,s8,0x10
 16c:	0008                	0x8
 16e:	0a015c03          	lhu	s8,160(sp)
 172:	020c                	addi	a1,sp,256
 174:	4250                	lw	a2,4(a2)
 176:	42c1                	li	t0,16
 178:	42c8                	lw	a0,4(a3)
        for (j = size_b -1; j >= 0; j = j-1){
 17a:	42c9                	li	t0,18
 17c:	42d2                	lw	t0,20(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 17e:	42d442d3          	0x42d442d3
            product[j] = 0;
 182:	42d5                	li	t0,21
 184:	42d6                	lw	t0,84(sp)
 186:	42d842d7          	0x42d842d7
            line[i][j] = 0;
 18a:	42d9                	li	t0,22
            product[j] = 0;
 18c:	42da                	lw	t0,148(sp)
 18e:	000e4adb          	0xe4adb
        for(j = 0; j < size_a + size_b -1; ++j){
 192:	0b42                	slli	s6,s6,0x10
 194:	0054                	addi	a3,sp,4
 196:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 198:	0000                	unimp
 19a:	0000                	unimp
 19c:	091c                	addi	a5,sp,144
 19e:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1a0:	02f4                	addi	a3,sp,332
 1a2:	0000                	unimp
            pola[i] = pola[i] + mod;
 1a4:	0e42                	slli	t3,t3,0x10
 1a6:	03f0                	addi	a2,sp,460
        while (pola[i] < 0){
 1a8:	814c                	0x814c
 1aa:	8801                	andi	s0,s0,0
 1ac:	8902                	jr	s2
        pola[i] = pola[i] % mod;
 1ae:	080c4203          	lbu	tp,128(s8)
    for (i = 0; i < size_a; ++i){
 1b2:	6400                	flw	fs0,8(s0)
 1b4:	0492                	slli	s1,s1,0x4
        pola[i] = pola[i] % mod;
 1b6:	06940593          	addi	a1,s0,105
    for (i = 0; i < size_a; ++i){
 1ba:	0795                	addi	a5,a5,5
            polb[i] = polb[i] + mod;
 1bc:	0896                	slli	a7,a7,0x5
 1be:	0c9a0997          	auipc	s3,0xc9a0
        while (polb[i] < 0){
 1c2:	0a98                	addi	a4,sp,336
 1c4:	0b99                	addi	s7,s7,6
        polb[i] = polb[i] % mod;
 1c6:	0a01dc03          	lhu	s8,160(gp) # 4a8 <polydiv+0x78>
    for (i = 0; i < size_b; ++i){
 1ca:	020c                	addi	a1,sp,256
 1cc:	03f0                	addi	a2,sp,460
        polb[i] = polb[i] % mod;
 1ce:	c144                	sw	s1,4(a0)
 1d0:	c844                	sw	s1,20(s0)
    for (i = 0; i < size_b; ++i){
 1d2:	c944                	sw	s1,20(a0)
    if(star_mult == 1){
 1d4:	d244                	sw	s1,36(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 1d6:	d344                	sw	s1,36(a4)
 1d8:	d444                	sw	s1,44(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
 1da:	d544                	sw	s1,44(a0)
    for (i = 0; i < size_b; ++i){
 1dc:	d644                	sw	s1,44(a2)
 1de:	d744                	sw	s1,44(a4)
 1e0:	d844                	sw	s1,52(s0)
 1e2:	d944                	sw	s1,52(a0)
 1e4:	da44                	sw	s1,52(a2)
 1e6:	0e4a                	slli	t3,t3,0x12
 1e8:	4200                	lw	s0,0(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 1ea:	0034000b          	0x34000b
 1ee:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 1f0:	0000                	unimp
 1f2:	0000                	unimp
 1f4:	0c10                	addi	a2,sp,528
}
 1f6:	0000                	unimp
 1f8:	0096                	slli	ra,ra,0x5
 1fa:	0000                	unimp
 1fc:	0e42                	slli	t3,t3,0x10
 1fe:	01e0                	addi	s0,sp,204
 200:	8846                	mv	a6,a7
 202:	8902                	jr	s2
 204:	5a049203          	lh	tp,1440(s1)
 208:	0181                	addi	gp,gp,0
 20a:	06940593          	addi	a1,s0,105
 20e:	5402                	lw	s0,32(sp)
 210:	c10a                	sw	sp,128(sp)
 212:	c842                	sw	a6,16(sp)
 214:	c942                	sw	a6,144(sp)
 216:	d242                	sw	a6,36(sp)
 218:	d342                	sw	a6,164(sp)
 21a:	d442                	sw	a6,40(sp)
 21c:	0e42                	slli	t3,t3,0x10
 21e:	4200                	lw	s0,0(a2)
                line[size_b-1-j][k] = pola[k]*polb[j];
 220:	0000000b          	0xb
 224:	0040                	addi	s0,sp,4
 226:	0000                	unimp
 228:	0000                	unimp
 22a:	0000                	unimp
 22c:	0ca6                	slli	s9,s9,0x9
 22e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 230:	00c8                	addi	a0,sp,68
                line[size_b-1-j][k] = pola[k]*polb[j];
 232:	0000                	unimp
 234:	0e42                	slli	t3,t3,0x10
 236:	4430                	lw	a2,72(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
 238:	0288                	addi	a0,sp,320
 23a:	924e0593          	addi	a1,t3,-1756 # 19924 <_stack_start+0x9924>
        for (j = size_b -1; j >= 0; j = j-1){
 23e:	9504                	0x9504
 240:	58099707          	0x58099707
            for (k = size_a-1; k >= 0; k = k-1 ){
 244:	0181                	addi	gp,gp,0
 246:	0389                	addi	t2,t2,2
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 248:	0694                	addi	a3,sp,832
 24a:	0896                	slli	a7,a7,0x5
 24c:	5202                	lw	tp,32(sp)
 24e:	c10a                	sw	sp,128(sp)
 250:	c842                	sw	a6,16(sp)
 252:	c942                	sw	a6,144(sp)
 254:	d242                	sw	a6,36(sp)
 256:	d342                	sw	a6,164(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	d442                	sw	a6,40(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 25a:	d542                	sw	a6,168(sp)
 25c:	d642                	sw	a6,44(sp)
 25e:	d742                	sw	a6,172(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	0e42                	slli	t3,t3,0x10
 262:	4200                	lw	s0,0(a2)
        for (j = size_b -1; j >= 0; j = j-1){
 264:	0000000b          	0xb
 268:	002c                	addi	a1,sp,8
 26a:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 26c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 26e:	0000                	unimp
 270:	0f6a                	slli	t5,t5,0x1a
            line[i][j] = line[i][j] % mod;
 272:	0000                	unimp
 274:	0138                	addi	a4,sp,136
 276:	0000                	unimp
 278:	0e44                	addi	s1,sp,788
        for(j = 0; j < size_a + size_b -1; ++j){
 27a:	08b0                	addi	a2,sp,88
 27c:	815e                	mv	sp,s7
    for (i = 0; i < size_b; ++i){
 27e:	8801                	andi	s0,s0,0
 280:	8902                	jr	s2
 282:	03049203          	lh	tp,48(s1)
        for(j = 0; j < size_a + size_b -1; ++j){
 286:	00f8                	addi	a4,sp,76
 288:	c10a                	sw	sp,128(sp)
            product[j] += line[i][j];
 28a:	c844                	sw	s1,20(s0)
 28c:	c944                	sw	s1,20(a0)
 28e:	d244                	sw	s1,36(a2)
 290:	0e46                	slli	t3,t3,0x11
 292:	4200                	lw	s0,0(a2)
        for(i = 0; i < size_b; ++i){
 294:	0000000b          	0xb

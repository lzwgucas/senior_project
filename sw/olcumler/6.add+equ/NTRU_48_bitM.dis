
NTRU_48_bitM.elf:     file format elf32-littleriscv


Disassembly of section .vectors:

00000000 <_stack_start-0x10000>:
  // external interrupts are handled by the same callback
  // until compiler supports IRQ routines
  .org 0x00
  .rept 31
  nop
  .endr
   0:	00000013          	nop
   4:	00000013          	nop
   8:	00000013          	nop
   c:	00000013          	nop
  10:	00000013          	nop
  14:	00000013          	nop
  18:	00000013          	nop
  1c:	00000013          	nop
  20:	00000013          	nop
  24:	00000013          	nop
  28:	00000013          	nop
  2c:	00000013          	nop
  30:	00000013          	nop
  34:	00000013          	nop
  38:	00000013          	nop
  3c:	00000013          	nop
  40:	00000013          	nop
  44:	00000013          	nop
  48:	00000013          	nop
  4c:	00000013          	nop
  50:	00000013          	nop
  54:	00000013          	nop
  58:	00000013          	nop
  5c:	00000013          	nop
  60:	00000013          	nop
  64:	00000013          	nop
  68:	00000013          	nop
  6c:	00000013          	nop
  70:	00000013          	nop
  74:	00000013          	nop
  78:	00000013          	nop
  jal x0, default_exc_handler
  7c:	4f90006f          	j	d74 <default_exc_handler>

  // reset vector
  .org 0x80
  jal x0, reset_handler
  80:	4f90006f          	j	d78 <reset_handler>

  // illegal instruction exception
  .org 0x84
  jal x0, default_exc_handler
  84:	4f10006f          	j	d74 <default_exc_handler>

  // ecall handler
  .org 0x88
  jal x0, default_exc_handler
  88:	4ed0006f          	j	d74 <default_exc_handler>

Disassembly of section .text:

0000008c <instr_add>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      8c:	06b5750b          	0x6b5750b

    );
    return;


}
      90:	8082                	ret

00000092 <array_add>:
void array_add(int *a1, int *a2, int length) {
int i =0;
    for(i=0;i<(length/3);i++) {
      92:	478d                	li	a5,3
      94:	02f64633          	div	a2,a2,a5
      98:	4831                	li	a6,12
      9a:	4781                	li	a5,0
      9c:	00c7c363          	blt	a5,a2,a2 <array_add+0x10>
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
    }
}
      a0:	8082                	ret
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	03078733          	mul	a4,a5,a6
    asm volatile(
      a6:	00e506b3          	add	a3,a0,a4
      aa:	972e                	add	a4,a4,a1
      ac:	06e6f70b          	0x6e6f70b
    for(i=0;i<(length/3);i++) {
      b0:	0785                	addi	a5,a5,1
      b2:	b7ed                	j	9c <array_add+0xa>

000000b4 <instr_equ>:

//static unsigned int *a0;

//not: bu instructionda işleme girecek arraylerin boyutlarının eşit ve önceden bilindiği varsayılmaktadır...

    asm volatile(
      b4:	0ab5750b          	0xab5750b
    : "r"(&a1[0]), "r"(&a2[0])			// a1 ve a2 variable'ları compiler tarafından uygun register'lara atılacak

    );
    return;

}
      b8:	8082                	ret

000000ba <array_equ>:
void array_equ(int *a1,int *a2,int length) {
int i = 0;
    for(i=0;i<(length/3);i++) {
      ba:	478d                	li	a5,3
      bc:	02f64633          	div	a2,a2,a5
      c0:	4831                	li	a6,12
      c2:	4781                	li	a5,0
      c4:	00c7c363          	blt	a5,a2,ca <array_equ+0x10>
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
    }
}
      c8:	8082                	ret
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	03078733          	mul	a4,a5,a6
    asm volatile(
      ce:	00e506b3          	add	a3,a0,a4
      d2:	972e                	add	a4,a4,a1
      d4:	0ae6f70b          	0xae6f70b
    for(i=0;i<(length/3);i++) {
      d8:	0785                	addi	a5,a5,1
      da:	b7ed                	j	c4 <array_equ+0xa>

000000dc <polymult>:

/////////////////////////////////////////////////



int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      dc:	715d                	addi	sp,sp,-80
      de:	c0ca                	sw	s2,64(sp)
      e0:	8936                	mv	s2,a3
      e2:	de4e                	sw	s3,60(sp)


    int line[size_b][size_a + size_b];
      e4:	96ae                	add	a3,a3,a1
      e6:	00291993          	slli	s3,s2,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ea:	d462                	sw	s8,40(sp)
      ec:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
      ee:	fff68c13          	addi	s8,a3,-1
      f2:	00269d93          	slli	s11,a3,0x2
      f6:	033686b3          	mul	a3,a3,s3
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fa:	c4a2                	sw	s0,72(sp)
      fc:	c2a6                	sw	s1,68(sp)
      fe:	0880                	addi	s0,sp,80
     100:	dc52                	sw	s4,56(sp)
     102:	da56                	sw	s5,52(sp)
     104:	d85a                	sw	s6,48(sp)
     106:	d65e                	sw	s7,44(sp)
     108:	d266                	sw	s9,36(sp)
     10a:	d06a                	sw	s10,32(sp)
     10c:	c686                	sw	ra,76(sp)
     10e:	faf42c23          	sw	a5,-72(s0)
    int line[size_b][size_a + size_b];
     112:	06bd                	addi	a3,a3,15
    int i,j,k;
    int *return_address1;
    int pola[size_a];
     114:	00259793          	slli	a5,a1,0x2
    int line[size_b][size_a + size_b];
     118:	9ac1                	andi	a3,a3,-16
    int pola[size_a];
     11a:	07bd                	addi	a5,a5,15
    int line[size_b][size_a + size_b];
     11c:	40d10133          	sub	sp,sp,a3
    int pola[size_a];
     120:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     122:	8d0a                	mv	s10,sp
    int pola[size_a];
     124:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     128:	00f98793          	addi	a5,s3,15
     12c:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     12e:	8b0a                	mv	s6,sp
    int polb[size_b];
     130:	40f10133          	sub	sp,sp,a5

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
     134:	002dd793          	srli	a5,s11,0x2
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	882e                	mv	a6,a1
     13a:	88b2                	mv	a7,a2
    int pola[size_a];
     13c:	fff58a93          	addi	s5,a1,-1
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     140:	8bba                	mv	s7,a4
    int line[size_b][size_a + size_b];
     142:	fff90c93          	addi	s9,s2,-1
    int polb[size_b];
     146:	848a                	mv	s1,sp
            line[i][j] = 0;
     148:	faf42e23          	sw	a5,-68(s0)
     14c:	8a6a                	mv	s4,s10
    for (i = 0; i < size_b; ++i){
     14e:	85ea                	mv	a1,s10
     150:	4601                	li	a2,0
            product[j] = 0;
     152:	00001e97          	auipc	t4,0x1
     156:	0eae8e93          	addi	t4,t4,234 # 123c <_bss_start>
    for (i = 0; i < size_b; ++i){
     15a:	07264663          	blt	a2,s2,1c6 <polymult+0xea>
        }
    }

    array_equ(pola,a,size_a);
     15e:	8642                	mv	a2,a6
     160:	85aa                	mv	a1,a0
     162:	855a                	mv	a0,s6
     164:	fb142823          	sw	a7,-80(s0)
     168:	fb042a23          	sw	a6,-76(s0)
     16c:	37b9                	jal	ba <array_equ>
    // make mod calculations
    for (i = 0; i < size_a; ++i){
     16e:	fb442803          	lw	a6,-76(s0)
     172:	fb042883          	lw	a7,-80(s0)
     176:	865a                	mv	a2,s6
     178:	4581                	li	a1,0
     17a:	0505cb63          	blt	a1,a6,1d0 <polymult+0xf4>
            pola[i] = pola[i] + mod;
        }
        pola[i] = pola[i] % mod;
    }

    array_equ(polb,b,size_b);
     17e:	864a                	mv	a2,s2
     180:	85c6                	mv	a1,a7
     182:	8526                	mv	a0,s1
     184:	3f1d                	jal	ba <array_equ>

   for (i = 0; i < size_b; ++i){
     186:	8626                	mv	a2,s1
     188:	4581                	li	a1,0
     18a:	0525cf63          	blt	a1,s2,1e8 <polymult+0x10c>
    }



    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     18e:	fb842703          	lw	a4,-72(s0)
     192:	4785                	li	a5,1
     194:	94ce                	add	s1,s1,s3
     196:	06f70363          	beq	a4,a5,1fc <polymult+0x120>
     19a:	19f1                	addi	s3,s3,-4
     19c:	ffcd8593          	addi	a1,s11,-4
     1a0:	99ea                	add	s3,s3,s10
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     1a2:	060cc063          	bltz	s9,202 <polymult+0x126>
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	87d6                	mv	a5,s5
     1a8:	a0c5                	j	288 <polymult+0x1ac>
            product[j] = 0;
     1aa:	00279e13          	slli	t3,a5,0x2
     1ae:	9e76                	add	t3,t3,t4
            line[i][j] = 0;
     1b0:	00032023          	sw	zero,0(t1)
            product[j] = 0;
     1b4:	000e2023          	sw	zero,0(t3)
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	0785                	addi	a5,a5,1
     1ba:	0311                	addi	t1,t1,4
     1bc:	ff87c7e3          	blt	a5,s8,1aa <polymult+0xce>
    for (i = 0; i < size_b; ++i){
     1c0:	0605                	addi	a2,a2,1
     1c2:	95ee                	add	a1,a1,s11
     1c4:	bf59                	j	15a <polymult+0x7e>
     1c6:	832e                	mv	t1,a1
        for(j = 0; j < size_a + size_b -1; ++j){
     1c8:	4781                	li	a5,0
     1ca:	bfcd                	j	1bc <polymult+0xe0>
            pola[i] = pola[i] + mod;
     1cc:	97de                	add	a5,a5,s7
     1ce:	c21c                	sw	a5,0(a2)
        while (pola[i] < 0){
     1d0:	421c                	lw	a5,0(a2)
     1d2:	fe07cde3          	bltz	a5,1cc <polymult+0xf0>
        pola[i] = pola[i] % mod;
     1d6:	0377e7b3          	rem	a5,a5,s7
    for (i = 0; i < size_a; ++i){
     1da:	0585                	addi	a1,a1,1
     1dc:	0611                	addi	a2,a2,4
        pola[i] = pola[i] % mod;
     1de:	fef62e23          	sw	a5,-4(a2)
    for (i = 0; i < size_a; ++i){
     1e2:	bf61                	j	17a <polymult+0x9e>
            polb[i] = polb[i] + mod;
     1e4:	97de                	add	a5,a5,s7
     1e6:	c21c                	sw	a5,0(a2)
        while (polb[i] < 0){
     1e8:	421c                	lw	a5,0(a2)
     1ea:	fe07cde3          	bltz	a5,1e4 <polymult+0x108>
        polb[i] = polb[i] % mod;
     1ee:	0377e7b3          	rem	a5,a5,s7
   for (i = 0; i < size_b; ++i){
     1f2:	0585                	addi	a1,a1,1
     1f4:	0611                	addi	a2,a2,4
        polb[i] = polb[i] % mod;
     1f6:	fef62e23          	sw	a5,-4(a2)
   for (i = 0; i < size_b; ++i){
     1fa:	bf41                	j	18a <polymult+0xae>
    if(star_mult == 1){
     1fc:	85ea                	mv	a1,s10
        for (j = size_b -1; j >= 0; j = j-1){
     1fe:	060cd763          	bgez	s9,26c <polymult+0x190>
        }
    }

    //mod calculations
    for (i = 0; i < size_b; ++i){
        for(j = 0; j < size_a + size_b -1; ++j){
     202:	4701                	li	a4,0
    for (i = 0; i < size_b; ++i){
     204:	0b274463          	blt	a4,s2,2ac <polymult+0x1d0>
     208:	00001717          	auipc	a4,0x1
     20c:	03470713          	addi	a4,a4,52 # 123c <_bss_start>
     210:	863a                	mv	a2,a4
            line[i][j] = line[i][j] % mod;
        }
    }

    // construct product
    for(j = 0; j < size_a + size_b -1; ++j){
     212:	4681                	li	a3,0
     214:	0d86c063          	blt	a3,s8,2d4 <polymult+0x1f8>
            product[j] += line[i][j];
        }
    }

    //mod calculations
    for(j = 0; j < size_a + size_b -1; ++j){
     218:	4781                	li	a5,0
     21a:	0b87cf63          	blt	a5,s8,2d8 <polymult+0x1fc>


    return_address1 = &product[0];

    return return_address1;
}
     21e:	fb040113          	addi	sp,s0,-80
     222:	40b6                	lw	ra,76(sp)
     224:	4426                	lw	s0,72(sp)
     226:	4496                	lw	s1,68(sp)
     228:	4906                	lw	s2,64(sp)
     22a:	59f2                	lw	s3,60(sp)
     22c:	5a62                	lw	s4,56(sp)
     22e:	5ad2                	lw	s5,52(sp)
     230:	5b42                	lw	s6,48(sp)
     232:	5bb2                	lw	s7,44(sp)
     234:	5c22                	lw	s8,40(sp)
     236:	5c92                	lw	s9,36(sp)
     238:	5d02                	lw	s10,32(sp)
     23a:	4df2                	lw	s11,28(sp)
     23c:	00001517          	auipc	a0,0x1
     240:	00050513          	mv	a0,a0
     244:	6161                	addi	sp,sp,80
     246:	8082                	ret
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	00279613          	slli	a2,a5,0x2
     24c:	00c58533          	add	a0,a1,a2
     250:	965a                	add	a2,a2,s6
     252:	4210                	lw	a2,0(a2)
     254:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     25a:	03060633          	mul	a2,a2,a6
     25e:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	fe07d4e3          	bgez	a5,248 <polymult+0x16c>
        for (j = size_b -1; j >= 0; j = j-1){
     264:	1cfd                	addi	s9,s9,-1
     266:	14f1                	addi	s1,s1,-4
     268:	95ee                	add	a1,a1,s11
     26a:	bf51                	j	1fe <polymult+0x122>
            for (k = size_a-1; k >= 0; k = k-1 ){
     26c:	87d6                	mv	a5,s5
     26e:	bfcd                	j	260 <polymult+0x184>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     270:	00279613          	slli	a2,a5,0x2
     274:	00c98533          	add	a0,s3,a2
     278:	965a                	add	a2,a2,s6
     27a:	4210                	lw	a2,0(a2)
     27c:	ffc4a803          	lw	a6,-4(s1)
            for (k = size_a-1; k >= 0; k = k-1 ){
     280:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     282:	03060633          	mul	a2,a2,a6
     286:	c110                	sw	a2,0(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	fe07d4e3          	bgez	a5,270 <polymult+0x194>
        for (j = size_b -1; j >= 0; j = j-1){
     28c:	1cfd                	addi	s9,s9,-1
     28e:	14f1                	addi	s1,s1,-4
     290:	99ae                	add	s3,s3,a1
     292:	bf01                	j	1a2 <polymult+0xc6>
            line[i][j] = line[i][j] % mod;
     294:	438c                	lw	a1,0(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     296:	0605                	addi	a2,a2,1
     298:	0791                	addi	a5,a5,4
            line[i][j] = line[i][j] % mod;
     29a:	0375e5b3          	rem	a1,a1,s7
     29e:	feb7ae23          	sw	a1,-4(a5)
        for(j = 0; j < size_a + size_b -1; ++j){
     2a2:	ff8649e3          	blt	a2,s8,294 <polymult+0x1b8>
    for (i = 0; i < size_b; ++i){
     2a6:	0705                	addi	a4,a4,1
     2a8:	9a6e                	add	s4,s4,s11
     2aa:	bfa9                	j	204 <polymult+0x128>
     2ac:	87d2                	mv	a5,s4
        for(j = 0; j < size_a + size_b -1; ++j){
     2ae:	4601                	li	a2,0
     2b0:	bfcd                	j	2a2 <polymult+0x1c6>
            product[j] += line[i][j];
     2b2:	fbc42783          	lw	a5,-68(s0)
     2b6:	4208                	lw	a0,0(a2)
     2b8:	02f587b3          	mul	a5,a1,a5
        for(i = 0; i < size_b; ++i){
     2bc:	0585                	addi	a1,a1,1
            product[j] += line[i][j];
     2be:	97b6                	add	a5,a5,a3
     2c0:	078a                	slli	a5,a5,0x2
     2c2:	97ea                	add	a5,a5,s10
     2c4:	439c                	lw	a5,0(a5)
     2c6:	97aa                	add	a5,a5,a0
     2c8:	c21c                	sw	a5,0(a2)
        for(i = 0; i < size_b; ++i){
     2ca:	ff25c4e3          	blt	a1,s2,2b2 <polymult+0x1d6>
    for(j = 0; j < size_a + size_b -1; ++j){
     2ce:	0685                	addi	a3,a3,1
     2d0:	0611                	addi	a2,a2,4
     2d2:	b789                	j	214 <polymult+0x138>
        for(i = 0; i < size_b; ++i){
     2d4:	4581                	li	a1,0
     2d6:	bfd5                	j	2ca <polymult+0x1ee>
        product[j] = product[j] % mod;
     2d8:	4314                	lw	a3,0(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     2da:	0785                	addi	a5,a5,1
     2dc:	0711                	addi	a4,a4,4
        product[j] = product[j] % mod;
     2de:	0376e6b3          	rem	a3,a3,s7
     2e2:	fed72e23          	sw	a3,-4(a4)
    for(j = 0; j < size_a + size_b -1; ++j){
     2e6:	bf15                	j	21a <polymult+0x13e>

000002e8 <polymult2>:

int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e8:	715d                	addi	sp,sp,-80

    int line[size_b][size_a + size_b];
     2ea:	00d587b3          	add	a5,a1,a3
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	d85a                	sw	s6,48(sp)
     2f0:	00269b13          	slli	s6,a3,0x2
     2f4:	de4e                	sw	s3,60(sp)
     2f6:	d65e                	sw	s7,44(sp)
    int line[size_b][size_a + size_b];
     2f8:	fff78993          	addi	s3,a5,-1
     2fc:	00279b93          	slli	s7,a5,0x2
     300:	036787b3          	mul	a5,a5,s6
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     304:	c4a2                	sw	s0,72(sp)
     306:	c2a6                	sw	s1,68(sp)
     308:	c0ca                	sw	s2,64(sp)
     30a:	dc52                	sw	s4,56(sp)
     30c:	da56                	sw	s5,52(sp)
     30e:	d462                	sw	s8,40(sp)
     310:	d266                	sw	s9,36(sp)
     312:	d06a                	sw	s10,32(sp)
     314:	ce6e                	sw	s11,28(sp)
    int line[size_b][size_a + size_b];
     316:	07bd                	addi	a5,a5,15
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	c686                	sw	ra,76(sp)
     31a:	0880                	addi	s0,sp,80
    int line[size_b][size_a + size_b];
     31c:	9bc1                	andi	a5,a5,-16
     31e:	40f10133          	sub	sp,sp,a5
    int i,j,k;
    int *return_address2;
    int pola[size_a];
     322:	00259793          	slli	a5,a1,0x2
     326:	07bd                	addi	a5,a5,15
     328:	9bc1                	andi	a5,a5,-16
    int line[size_b][size_a + size_b];
     32a:	890a                	mv	s2,sp
    int pola[size_a];
     32c:	40f10133          	sub	sp,sp,a5
    int polb[size_b];
     330:	00fb0793          	addi	a5,s6,15
     334:	9bc1                	andi	a5,a5,-16
    int pola[size_a];
     336:	8d0a                	mv	s10,sp
    int polb[size_b];
     338:	40f10133          	sub	sp,sp,a5
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	8a36                	mv	s4,a3
     33e:	8dba                	mv	s11,a4
    int line[size_b][size_a + size_b];
     340:	fff68a93          	addi	s5,a3,-1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     344:	8832                	mv	a6,a2
    int pola[size_a];
     346:	fff58c13          	addi	s8,a1,-1
    int polb[size_b];
     34a:	848a                	mv	s1,sp

    //make all line vectors zero
    for (i = 0; i < size_b; ++i){
     34c:	8cca                	mv	s9,s2
     34e:	86ca                	mv	a3,s2
     350:	4701                	li	a4,0
        for(j = 0; j < size_a + size_b -1; ++j){
            line[i][j] = 0;
            product2[j] = 0;
     352:	00001317          	auipc	t1,0x1
     356:	14230313          	addi	t1,t1,322 # 1494 <product2>
    for (i = 0; i < size_b; ++i){
     35a:	05474963          	blt	a4,s4,3ac <polymult2+0xc4>

//    for(i = 0; i < size_a; ++i){
//        pola[i] = a[i];
//    }

    array_equ(pola,a,size_a);
     35e:	862e                	mv	a2,a1
     360:	85aa                	mv	a1,a0
     362:	856a                	mv	a0,s10
     364:	fb042e23          	sw	a6,-68(s0)
     368:	3b89                	jal	ba <array_equ>

//    for(i = 0; i < size_b; ++i){
//        polb[i] = b[i];
//    }

    array_equ(polb,b,size_b);
     36a:	fbc42803          	lw	a6,-68(s0)
     36e:	8526                	mv	a0,s1
     370:	8652                	mv	a2,s4
     372:	85c2                	mv	a1,a6
     374:	3399                	jal	ba <array_equ>

    // make calculations for partial products, if need add mod calculations
    if(star_mult == 1){
     376:	4785                	li	a5,1
     378:	01648533          	add	a0,s1,s6
     37c:	04fd8c63          	beq	s11,a5,3d4 <polymult2+0xec>
     380:	1b71                	addi	s6,s6,-4
     382:	ffcb8693          	addi	a3,s7,-4
     386:	995a                	add	s2,s2,s6
                line[size_b-1-j][k] = pola[k]*polb[j];
            }
        }
    }
    else{
        for (j = size_b -1; j >= 0; j = j-1){
     388:	040ac863          	bltz	s5,3d8 <polymult2+0xf0>
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	87e2                	mv	a5,s8
     38e:	a879                	j	42c <polymult2+0x144>
            product2[j] = 0;
     390:	00279893          	slli	a7,a5,0x2
     394:	989a                	add	a7,a7,t1
            line[i][j] = 0;
     396:	00062023          	sw	zero,0(a2)
            product2[j] = 0;
     39a:	0008a023          	sw	zero,0(a7)
        for(j = 0; j < size_a + size_b -1; ++j){
     39e:	0785                	addi	a5,a5,1
     3a0:	0611                	addi	a2,a2,4
     3a2:	ff37c7e3          	blt	a5,s3,390 <polymult2+0xa8>
    for (i = 0; i < size_b; ++i){
     3a6:	0705                	addi	a4,a4,1
     3a8:	96de                	add	a3,a3,s7
     3aa:	bf45                	j	35a <polymult2+0x72>
     3ac:	8636                	mv	a2,a3
        for(j = 0; j < size_a + size_b -1; ++j){
     3ae:	4781                	li	a5,0
     3b0:	bfcd                	j	3a2 <polymult2+0xba>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b2:	00279713          	slli	a4,a5,0x2
     3b6:	00e906b3          	add	a3,s2,a4
     3ba:	976a                	add	a4,a4,s10
     3bc:	4318                	lw	a4,0(a4)
     3be:	ffc52603          	lw	a2,-4(a0) # 1238 <_edata>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c4:	02c70733          	mul	a4,a4,a2
     3c8:	c298                	sw	a4,0(a3)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	fe07d4e3          	bgez	a5,3b2 <polymult2+0xca>
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	1afd                	addi	s5,s5,-1
     3d0:	1571                	addi	a0,a0,-4
     3d2:	995e                	add	s2,s2,s7
     3d4:	020ade63          	bgez	s5,410 <polymult2+0x128>
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	4481                	li	s1,0

    // construct product
    for(i=0;i<size_b;++i){
        //for(j=0;j<size_a+size_b-1;++j){
         //   product2[j] += line[i][j];
        array_add(product2,line[i],size_a+size_b-1);
     3da:	00001917          	auipc	s2,0x1
     3de:	0ba90913          	addi	s2,s2,186 # 1494 <product2>
    for(i=0;i<size_b;++i){
     3e2:	0544cb63          	blt	s1,s4,438 <polymult2+0x150>
    }

    return_address2 = &product2[0];

    return return_address2;
}
     3e6:	fb040113          	addi	sp,s0,-80
     3ea:	40b6                	lw	ra,76(sp)
     3ec:	4426                	lw	s0,72(sp)
     3ee:	4496                	lw	s1,68(sp)
     3f0:	4906                	lw	s2,64(sp)
     3f2:	59f2                	lw	s3,60(sp)
     3f4:	5a62                	lw	s4,56(sp)
     3f6:	5ad2                	lw	s5,52(sp)
     3f8:	5b42                	lw	s6,48(sp)
     3fa:	5bb2                	lw	s7,44(sp)
     3fc:	5c22                	lw	s8,40(sp)
     3fe:	5c92                	lw	s9,36(sp)
     400:	5d02                	lw	s10,32(sp)
     402:	4df2                	lw	s11,28(sp)
     404:	00001517          	auipc	a0,0x1
     408:	09050513          	addi	a0,a0,144 # 1494 <product2>
     40c:	6161                	addi	sp,sp,80
     40e:	8082                	ret
            for (k = size_a-1; k >= 0; k = k-1 ){
     410:	87e2                	mv	a5,s8
     412:	bf65                	j	3ca <polymult2+0xe2>
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     414:	00279713          	slli	a4,a5,0x2
     418:	00e90633          	add	a2,s2,a4
     41c:	976a                	add	a4,a4,s10
     41e:	4318                	lw	a4,0(a4)
     420:	ffc52583          	lw	a1,-4(a0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	17fd                	addi	a5,a5,-1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     426:	02b70733          	mul	a4,a4,a1
     42a:	c218                	sw	a4,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     42c:	fe07d4e3          	bgez	a5,414 <polymult2+0x12c>
        for (j = size_b -1; j >= 0; j = j-1){
     430:	1afd                	addi	s5,s5,-1
     432:	1571                	addi	a0,a0,-4
     434:	9936                	add	s2,s2,a3
     436:	bf89                	j	388 <polymult2+0xa0>
        array_add(product2,line[i],size_a+size_b-1);
     438:	85e6                	mv	a1,s9
     43a:	864e                	mv	a2,s3
     43c:	854a                	mv	a0,s2
     43e:	3991                	jal	92 <array_add>
    for(i=0;i<size_b;++i){
     440:	0485                	addi	s1,s1,1
     442:	9cde                	add	s9,s9,s7
     444:	bf79                	j	3e2 <polymult2+0xfa>

00000446 <polydiv>:
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){

    int u,d,d2,i,b_N,r_d;
    int *return_address3;

    int v[size_N];
     446:	00259793          	slli	a5,a1,0x2
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44a:	7139                	addi	sp,sp,-64
    int v[size_N];
     44c:	07bd                	addi	a5,a5,15
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44e:	dc22                	sw	s0,56(sp)
     450:	da26                	sw	s1,52(sp)
     452:	d84a                	sw	s2,48(sp)
     454:	d64e                	sw	s3,44(sp)
     456:	d452                	sw	s4,40(sp)
     458:	d256                	sw	s5,36(sp)
     45a:	d05a                	sw	s6,32(sp)
     45c:	ce5e                	sw	s7,28(sp)
     45e:	cc62                	sw	s8,24(sp)
     460:	ca66                	sw	s9,20(sp)
     462:	c86a                	sw	s10,16(sp)
     464:	c66e                	sw	s11,12(sp)
    int v[size_N];
     466:	9bc1                	andi	a5,a5,-16
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	de06                	sw	ra,60(sp)
     46a:	0080                	addi	s0,sp,64
    int v[size_N];
     46c:	40f10133          	sub	sp,sp,a5
     470:	898a                	mv	s3,sp
    int q[size_N];
     472:	40f10133          	sub	sp,sp,a5
     476:	8a0a                	mv	s4,sp
    int *product;
    int num_temp[size_N];
     478:	40f10133          	sub	sp,sp,a5
    int denum_temp[size_D];
     47c:	00269793          	slli	a5,a3,0x2
     480:	07bd                	addi	a5,a5,15
    int num_temp[size_N];
     482:	8d0a                	mv	s10,sp
    int denum_temp[size_D];
     484:	9bc1                	andi	a5,a5,-16
     486:	40f10133          	sub	sp,sp,a5
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     48a:	84ae                	mv	s1,a1
     48c:	8db2                	mv	s11,a2
    int v[size_N];
     48e:	fff58b93          	addi	s7,a1,-1

    array_equ(num_temp,num,size_N);
     492:	862e                	mv	a2,a1
     494:	85aa                	mv	a1,a0
     496:	856a                	mv	a0,s10
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	8c36                	mv	s8,a3
     49a:	8cba                	mv	s9,a4
    int denum_temp[size_D];
     49c:	fff68913          	addi	s2,a3,-1
    array_equ(num_temp,num,size_N);
     4a0:	3929                	jal	ba <array_equ>
    int denum_temp[size_D];
     4a2:	8a8a                	mv	s5,sp
    // make mod calculation for coefficents
    for (i = 0; i < size_N; ++i){
     4a4:	8b6a                	mv	s6,s10
     4a6:	876a                	mv	a4,s10
     4a8:	4681                	li	a3,0
     4aa:	0296cc63          	blt	a3,s1,4e2 <polydiv+0x9c>
            num_temp[i] = num_temp[i] + mod;
        }
        num_temp[i] = num_temp[i] % mod;
    }

    array_equ(denum_temp,denum,size_D);
     4ae:	8662                	mv	a2,s8
     4b0:	85ee                	mv	a1,s11
     4b2:	8556                	mv	a0,s5
     4b4:	3119                	jal	ba <array_equ>
    // make mod calculation for coefficents
    for (i = 0; i < size_D; ++i) {
     4b6:	8756                	mv	a4,s5
     4b8:	4681                	li	a3,0
     4ba:	0586c063          	blt	a3,s8,4fa <polydiv+0xb4>
    }




    for (i = 0; i < size_N; ++i){
     4be:	4781                	li	a5,0
     4c0:	0497c763          	blt	a5,s1,50e <polydiv+0xc8>
        q[i] = 0;
        v[i] = 0;
    }

    //find b_N (denum) and degree denum
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	00291793          	slli	a5,s2,0x2
     4c8:	97d6                	add	a5,a5,s5
     4ca:	4398                	lw	a4,0(a5)
     4cc:	04095c63          	bgez	s2,524 <polydiv+0xde>
    for (i = 0; i < size_N; ++i){
     4d0:	4781                	li	a5,0
     4d2:	4d81                	li	s11,0
    d2 = i; //f'in derecesi
    b_N = denum_temp[i];

    // Set u := (b_N)^–1 mod p (denum) //
    for (u = 0; u < mod; ++u){
        if ( (b_N*u)%mod == 1 )
     4d4:	4685                	li	a3,1
    for (u = 0; u < mod; ++u){
     4d6:	059dca63          	blt	s11,s9,52a <polydiv+0xe4>
     4da:	87de                	mv	a5,s7
     4dc:	a085                	j	53c <polydiv+0xf6>
            num_temp[i] = num_temp[i] + mod;
     4de:	97e6                	add	a5,a5,s9
     4e0:	c31c                	sw	a5,0(a4)
        while (num_temp[i] < 0) {
     4e2:	431c                	lw	a5,0(a4)
     4e4:	fe07cde3          	bltz	a5,4de <polydiv+0x98>
        num_temp[i] = num_temp[i] % mod;
     4e8:	0397e7b3          	rem	a5,a5,s9
    for (i = 0; i < size_N; ++i){
     4ec:	0685                	addi	a3,a3,1
     4ee:	0711                	addi	a4,a4,4
        num_temp[i] = num_temp[i] % mod;
     4f0:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_N; ++i){
     4f4:	bf5d                	j	4aa <polydiv+0x64>
            denum_temp[i] = denum_temp[i] + mod;
     4f6:	97e6                	add	a5,a5,s9
     4f8:	c31c                	sw	a5,0(a4)
        while (denum_temp[i] < 0) {
     4fa:	431c                	lw	a5,0(a4)
     4fc:	fe07cde3          	bltz	a5,4f6 <polydiv+0xb0>
        denum_temp[i] = denum_temp[i] % mod;
     500:	0397e7b3          	rem	a5,a5,s9
    for (i = 0; i < size_D; ++i) {
     504:	0685                	addi	a3,a3,1
     506:	0711                	addi	a4,a4,4
        denum_temp[i] = denum_temp[i] % mod;
     508:	fef72e23          	sw	a5,-4(a4)
    for (i = 0; i < size_D; ++i) {
     50c:	b77d                	j	4ba <polydiv+0x74>
        q[i] = 0;
     50e:	00279713          	slli	a4,a5,0x2
     512:	00ea06b3          	add	a3,s4,a4
        v[i] = 0;
     516:	974e                	add	a4,a4,s3
        q[i] = 0;
     518:	0006a023          	sw	zero,0(a3)
        v[i] = 0;
     51c:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size_N; ++i){
     520:	0785                	addi	a5,a5,1
     522:	bf79                	j	4c0 <polydiv+0x7a>
        if( denum_temp[i] != 0 )
     524:	f755                	bnez	a4,4d0 <polydiv+0x8a>
    for (i = size_D-1; i >= 0; i = i-1){
     526:	197d                	addi	s2,s2,-1
     528:	bf71                	j	4c4 <polydiv+0x7e>
        if ( (b_N*u)%mod == 1 )
     52a:	0397e633          	rem	a2,a5,s9
     52e:	97ba                	add	a5,a5,a4
     530:	fad605e3          	beq	a2,a3,4da <polydiv+0x94>
    for (u = 0; u < mod; ++u){
     534:	0d85                	addi	s11,s11,1
     536:	b745                	j	4d6 <polydiv+0x90>
            break;
    }

    // find degree num and r_d
    for (i = size_N-1; i >= 0; i = i-1){
        if( num_temp[i] != 0 )
     538:	eb01                	bnez	a4,548 <polydiv+0x102>
    for (i = size_N-1; i >= 0; i = i-1){
     53a:	17fd                	addi	a5,a5,-1
     53c:	00279713          	slli	a4,a5,0x2
     540:	976a                	add	a4,a4,s10
     542:	4318                	lw	a4,0(a4)
     544:	fe07dae3          	bgez	a5,538 <polydiv+0xf2>

    //printf("\nSİL-3\n");
    //printf("\nd2 = %d, d = %d\n",d2,d);

    // While-1 deg num >= deg denum do
    while (d >= d2){
     548:	0527d663          	bge	a5,s2,594 <polydiv+0x14e>
    } //End While-1

//    for(i = 0; i < size_N; ++i){
//        result[i] = q[i];
//    }
    array_equ(result,q,size_N);
     54c:	8626                	mv	a2,s1
     54e:	85d2                	mv	a1,s4
     550:	00001517          	auipc	a0,0x1
     554:	19c50513          	addi	a0,a0,412 # 16ec <result>
     558:	368d                	jal	ba <array_equ>

    for(i = size_N; i < (2*size_N); ++i){
     55a:	00149713          	slli	a4,s1,0x1
        result[i] = num_temp[i-size_N];
     55e:	00001697          	auipc	a3,0x1
     562:	18e68693          	addi	a3,a3,398 # 16ec <result>
    for(i = size_N; i < (2*size_N); ++i){
     566:	10e4c563          	blt	s1,a4,670 <polydiv+0x22a>
    }

    return_address3 = &result[0];

    return return_address3;
}
     56a:	fc040113          	addi	sp,s0,-64
     56e:	50f2                	lw	ra,60(sp)
     570:	5462                	lw	s0,56(sp)
     572:	54d2                	lw	s1,52(sp)
     574:	5942                	lw	s2,48(sp)
     576:	59b2                	lw	s3,44(sp)
     578:	5a22                	lw	s4,40(sp)
     57a:	5a92                	lw	s5,36(sp)
     57c:	5b02                	lw	s6,32(sp)
     57e:	4bf2                	lw	s7,28(sp)
     580:	4c62                	lw	s8,24(sp)
     582:	4cd2                	lw	s9,20(sp)
     584:	4d42                	lw	s10,16(sp)
     586:	4db2                	lw	s11,12(sp)
     588:	00001517          	auipc	a0,0x1
     58c:	16450513          	addi	a0,a0,356 # 16ec <result>
     590:	6121                	addi	sp,sp,64
     592:	8082                	ret
        v[(d-d2)] = u*r_d;
     594:	03b70733          	mul	a4,a4,s11
     598:	412787b3          	sub	a5,a5,s2
     59c:	078a                	slli	a5,a5,0x2
     59e:	97ce                	add	a5,a5,s3
     5a0:	c398                	sw	a4,0(a5)
        for (i = 0; i < size_N; ++i){
     5a2:	87ce                	mv	a5,s3
     5a4:	4701                	li	a4,0
     5a6:	04974663          	blt	a4,s1,5f2 <polydiv+0x1ac>
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5aa:	8766                	mv	a4,s9
     5ac:	86e2                	mv	a3,s8
     5ae:	4781                	li	a5,0
     5b0:	864e                	mv	a2,s3
     5b2:	85e2                	mv	a1,s8
     5b4:	8556                	mv	a0,s5
     5b6:	361d                	jal	dc <polymult>
        for (i = 0; i < size_N; ++i){
     5b8:	872a                	mv	a4,a0
     5ba:	4681                	li	a3,0
     5bc:	0496c563          	blt	a3,s1,606 <polydiv+0x1c0>
     5c0:	876a                	mv	a4,s10
        for (i = 0; i < size_N; ++i){
     5c2:	4781                	li	a5,0
     5c4:	0497cb63          	blt	a5,s1,61a <polydiv+0x1d4>
     5c8:	876a                	mv	a4,s10
        for (i = 0; i < size_N; ++i){
     5ca:	4681                	li	a3,0
     5cc:	0696c463          	blt	a3,s1,634 <polydiv+0x1ee>
    array_add(q,v,size_N);
     5d0:	8626                	mv	a2,s1
     5d2:	85ce                	mv	a1,s3
     5d4:	8552                	mv	a0,s4
     5d6:	3c75                	jal	92 <array_add>
        for(i = 0; i < size_N; ++i){
     5d8:	87d2                	mv	a5,s4
     5da:	4701                	li	a4,0
     5dc:	06974663          	blt	a4,s1,648 <polydiv+0x202>
        for (i = size_N-1; i >= 0; i = i-1){
     5e0:	87de                	mv	a5,s7
     5e2:	00279713          	slli	a4,a5,0x2
     5e6:	976a                	add	a4,a4,s10
     5e8:	4318                	lw	a4,0(a4)
     5ea:	0607d763          	bgez	a5,658 <polydiv+0x212>
     5ee:	4681                	li	a3,0
     5f0:	a8ad                	j	66a <polydiv+0x224>
            v[i] = v[i] % mod;
     5f2:	4394                	lw	a3,0(a5)
        for (i = 0; i < size_N; ++i){
     5f4:	0705                	addi	a4,a4,1
     5f6:	0791                	addi	a5,a5,4
            v[i] = v[i] % mod;
     5f8:	0396e6b3          	rem	a3,a3,s9
     5fc:	fed7ae23          	sw	a3,-4(a5)
        for (i = 0; i < size_N; ++i){
     600:	b75d                	j	5a6 <polydiv+0x160>
                product[i] = product[i] + mod;
     602:	97e6                	add	a5,a5,s9
     604:	c31c                	sw	a5,0(a4)
            while (product[i] < 0) {
     606:	431c                	lw	a5,0(a4)
     608:	fe07cde3          	bltz	a5,602 <polydiv+0x1bc>
            product[i] = product[i] % mod;
     60c:	0397e7b3          	rem	a5,a5,s9
        for (i = 0; i < size_N; ++i){
     610:	0685                	addi	a3,a3,1
     612:	0711                	addi	a4,a4,4
            product[i] = product[i] % mod;
     614:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     618:	b755                	j	5bc <polydiv+0x176>
            num_temp[i] = num_temp[i] - product[i];
     61a:	00279613          	slli	a2,a5,0x2
     61e:	962a                	add	a2,a2,a0
     620:	4314                	lw	a3,0(a4)
     622:	4210                	lw	a2,0(a2)
        for (i = 0; i < size_N; ++i){
     624:	0785                	addi	a5,a5,1
     626:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] - product[i];
     628:	8e91                	sub	a3,a3,a2
     62a:	fed72e23          	sw	a3,-4(a4)
        for (i = 0; i < size_N; ++i){
     62e:	bf59                	j	5c4 <polydiv+0x17e>
                num_temp[i] = num_temp[i] + mod;
     630:	97e6                	add	a5,a5,s9
     632:	c31c                	sw	a5,0(a4)
            while (num_temp[i] < 0){
     634:	431c                	lw	a5,0(a4)
     636:	fe07cde3          	bltz	a5,630 <polydiv+0x1ea>
            num_temp[i] = num_temp[i] % mod;
     63a:	0397e7b3          	rem	a5,a5,s9
        for (i = 0; i < size_N; ++i){
     63e:	0685                	addi	a3,a3,1
     640:	0711                	addi	a4,a4,4
            num_temp[i] = num_temp[i] % mod;
     642:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < size_N; ++i){
     646:	b759                	j	5cc <polydiv+0x186>
            q[i] = q[i] % mod;
     648:	4394                	lw	a3,0(a5)
        for(i = 0; i < size_N; ++i){
     64a:	0705                	addi	a4,a4,1
     64c:	0791                	addi	a5,a5,4
            q[i] = q[i] % mod;
     64e:	0396e6b3          	rem	a3,a3,s9
     652:	fed7ae23          	sw	a3,-4(a5)
        for(i = 0; i < size_N; ++i){
     656:	b759                	j	5dc <polydiv+0x196>
            if( num_temp[i] != 0 )
     658:	fb59                	bnez	a4,5ee <polydiv+0x1a8>
        for (i = size_N-1; i >= 0; i = i-1){
     65a:	17fd                	addi	a5,a5,-1
     65c:	b759                	j	5e2 <polydiv+0x19c>
            v[i] = 0;
     65e:	00269613          	slli	a2,a3,0x2
     662:	964e                	add	a2,a2,s3
     664:	00062023          	sw	zero,0(a2)
        for (i = 0; i < size_N; ++i){
     668:	0685                	addi	a3,a3,1
     66a:	fe96cae3          	blt	a3,s1,65e <polydiv+0x218>
     66e:	bde9                	j	548 <polydiv+0x102>
        result[i] = num_temp[i-size_N];
     670:	000b2603          	lw	a2,0(s6)
     674:	00249793          	slli	a5,s1,0x2
     678:	97b6                	add	a5,a5,a3
     67a:	c390                	sw	a2,0(a5)
    for(i = size_N; i < (2*size_N); ++i){
     67c:	0485                	addi	s1,s1,1
     67e:	0b11                	addi	s6,s6,4
     680:	b5dd                	j	566 <polydiv+0x120>

00000682 <ext_euclid>:

int* ext_euclid(int* polyR, int* polyf, int size, int mod) {

    int *return_address4;
    int N, i, j;
    int ri_2[size]; // MX-ring poly, a
     682:	00261793          	slli	a5,a2,0x2
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     686:	715d                	addi	sp,sp,-80
    int ri_2[size]; // MX-ring poly, a
     688:	07bd                	addi	a5,a5,15
     68a:	9bc1                	andi	a5,a5,-16
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     68c:	c4a2                	sw	s0,72(sp)
     68e:	c2a6                	sw	s1,68(sp)
     690:	c0ca                	sw	s2,64(sp)
     692:	de4e                	sw	s3,60(sp)
     694:	dc52                	sw	s4,56(sp)
     696:	da56                	sw	s5,52(sp)
     698:	d85a                	sw	s6,48(sp)
     69a:	d65e                	sw	s7,44(sp)
     69c:	d462                	sw	s8,40(sp)
     69e:	d266                	sw	s9,36(sp)
     6a0:	d06a                	sw	s10,32(sp)
     6a2:	ce6e                	sw	s11,28(sp)
     6a4:	c686                	sw	ra,76(sp)
     6a6:	0880                	addi	s0,sp,80
    int ri_2[size]; // MX-ring poly, a
     6a8:	40f10133          	sub	sp,sp,a5
     6ac:	898a                	mv	s3,sp
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6ae:	40f10133          	sub	sp,sp,a5
     6b2:	8a0a                	mv	s4,sp
    int ri[size];
     6b4:	40f10133          	sub	sp,sp,a5
     6b8:	8b8a                	mv	s7,sp

    int ti_1[size]; // ti_1[0] = 1
     6ba:	40f10133          	sub	sp,sp,a5
     6be:	8b0a                	mv	s6,sp
    int ti[size];
     6c0:	40f10133          	sub	sp,sp,a5
     6c4:	8c8a                	mv	s9,sp
    int qi_1[size];
     6c6:	40f10133          	sub	sp,sp,a5
     6ca:	8c0a                	mv	s8,sp
    int temp[size];
     6cc:	40f10133          	sub	sp,sp,a5
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	8936                	mv	s2,a3
     6d2:	8d2e                	mv	s10,a1
     6d4:	84b2                	mv	s1,a2
    int ri_2[size]; // MX-ring poly, a
     6d6:	fff60d93          	addi	s11,a2,-1
    int temp[size];
     6da:	8a8a                	mv	s5,sp
    int *res1;
    int *res2;
    int controlR = 1;

    N = size - 1;
    for (i = 0; i < size; ++i) {
     6dc:	4781                	li	a5,0
//        ri_2[i] = polyR[i];
//        ri_1[i] = polyf[i];
        ti_2[i] = 0;
     6de:	00001697          	auipc	a3,0x1
     6e2:	26668693          	addi	a3,a3,614 # 1944 <ti_2>
    for (i = 0; i < size; ++i) {
     6e6:	0297c363          	blt	a5,s1,70c <ext_euclid+0x8a>
        ti_1[i] = 0;
    }
    array_equ(ri_2,polyR,size);
     6ea:	85aa                	mv	a1,a0
     6ec:	8626                	mv	a2,s1
     6ee:	854e                	mv	a0,s3
     6f0:	32e9                	jal	ba <array_equ>
    array_equ(ri_1,polyf,size);
     6f2:	8626                	mv	a2,s1
     6f4:	85ea                	mv	a1,s10
     6f6:	8552                	mv	a0,s4
     6f8:	32c9                	jal	ba <array_equ>
///// ri_2 = polyR      ///////
///// ri_1 = f         //////////
///// ti_2 = ti_1 = 0 /////////

    ti_1[0] = 1;
     6fa:	4785                	li	a5,1
     6fc:	00fb2023          	sw	a5,0(s6)
            ri_1[i] = ri_1[i] % mod;
        }


        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
        for (i = N + 1; i < (2 * N + 2); ++i) {
     700:	00149793          	slli	a5,s1,0x1
     704:	faf42e23          	sw	a5,-68(s0)
        for (i = 0; i < N + 1; ++i) {
     708:	4681                	li	a3,0
     70a:	a02d                	j	734 <ext_euclid+0xb2>
        ti_2[i] = 0;
     70c:	00279713          	slli	a4,a5,0x2
     710:	00e68633          	add	a2,a3,a4
        ti_1[i] = 0;
     714:	975a                	add	a4,a4,s6
        ti_2[i] = 0;
     716:	00062023          	sw	zero,0(a2)
        ti_1[i] = 0;
     71a:	00072023          	sw	zero,0(a4)
    for (i = 0; i < size; ++i) {
     71e:	0785                	addi	a5,a5,1
     720:	b7d9                	j	6e6 <ext_euclid+0x64>
                ri_2[i] = ri_2[i] + mod;
     722:	97ca                	add	a5,a5,s2
     724:	c31c                	sw	a5,0(a4)
            while (ri_2[i] < 0) {
     726:	431c                	lw	a5,0(a4)
     728:	fe07cde3          	bltz	a5,722 <ext_euclid+0xa0>
            ri_2[i] = ri_2[i] % mod;
     72c:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     730:	0685                	addi	a3,a3,1
            ri_2[i] = ri_2[i] % mod;
     732:	c31c                	sw	a5,0(a4)
        for (i = 0; i < N + 1; ++i) {
     734:	00ddc663          	blt	s11,a3,740 <ext_euclid+0xbe>
     738:	00269713          	slli	a4,a3,0x2
     73c:	974e                	add	a4,a4,s3
     73e:	b7e5                	j	726 <ext_euclid+0xa4>
     740:	8752                	mv	a4,s4
        for (i = 0; i < N + 1; ++i) {
     742:	4681                	li	a3,0
     744:	0eddd563          	bge	s11,a3,82e <ext_euclid+0x1ac>
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     748:	874a                	mv	a4,s2
     74a:	86a6                	mv	a3,s1
     74c:	8652                	mv	a2,s4
     74e:	85a6                	mv	a1,s1
     750:	854e                	mv	a0,s3
     752:	39d5                	jal	446 <polydiv>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	875e                	mv	a4,s7
     756:	87a6                	mv	a5,s1
     758:	fbc42683          	lw	a3,-68(s0)
     75c:	0ed7c363          	blt	a5,a3,842 <ext_euclid+0x1c0>
     760:	4781                	li	a5,0
            ri[i - (N + 1)] = res[i];
        }

/// qi_1 = (ri_2 - ri)/ri_1; ///

        for (i = 0; i < N + 1; ++i) {
     762:	4701                	li	a4,0
     764:	0eedd863          	bge	s11,a4,854 <ext_euclid+0x1d2>
     768:	8d56                	mv	s10,s5
     76a:	8756                	mv	a4,s5
            temp[i] = ri_2[i] - ri[i];
        }


        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     76c:	4681                	li	a3,0
     76e:	10ddd263          	bge	s11,a3,872 <ext_euclid+0x1f0>
                temp[i] = temp[i] + mod;
            }
            temp[i] = temp[i] % mod;
        }

        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     772:	874a                	mv	a4,s2
     774:	86a6                	mv	a3,s1
     776:	8652                	mv	a2,s4
     778:	85a6                	mv	a1,s1
     77a:	8556                	mv	a0,s5
     77c:	31e9                	jal	446 <polydiv>
     77e:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            qi_1[i] = res1[i];
//        }
    array_equ(qi_1,res1,size);
     780:	8626                	mv	a2,s1
     782:	8562                	mv	a0,s8
     784:	3a1d                	jal	ba <array_equ>

        //make mod calc
        for (i = 0; i < N + 1; ++i) {
     786:	8762                	mv	a4,s8
     788:	4681                	li	a3,0
     78a:	10ddd063          	bge	s11,a3,88a <ext_euclid+0x208>
        }


/// ti = ti_2 - qi_1*ti_1; ///

        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78e:	874a                	mv	a4,s2
     790:	4781                	li	a5,0
     792:	86a6                	mv	a3,s1
     794:	865a                	mv	a2,s6
     796:	85a6                	mv	a1,s1
     798:	8562                	mv	a0,s8
     79a:	3289                	jal	dc <polymult>
     79c:	85aa                	mv	a1,a0
//        for (i = 0; i < N + 1; ++i) {
//            temp[i] = res2[i];
//        }
    array_equ(temp,res2,size);
     79e:	8626                	mv	a2,s1
     7a0:	8556                	mv	a0,s5
     7a2:	3a21                	jal	ba <array_equ>

        // make mod calculations
        for (i = 0; i < N + 1; ++i) {
     7a4:	4701                	li	a4,0
     7a6:	0eeddf63          	bge	s11,a4,8a4 <ext_euclid+0x222>
     7aa:	4781                	li	a5,0
            }
            temp[i] = temp[i] % mod;
        }


        for (i = 0; i < N + 1; ++i) {
     7ac:	4701                	li	a4,0
     7ae:	10edd663          	bge	s11,a4,8ba <ext_euclid+0x238>
     7b2:	8766                	mv	a4,s9
            ti[i] = ti_2[i] - temp[i];
        }


        for (i = 0; i < N + 1; ++i) {
     7b4:	4681                	li	a3,0
     7b6:	12ddd463          	bge	s11,a3,8de <ext_euclid+0x25c>
        }


/// ri_2 = ri_1; ri_1 = ri; ti_2 = ti_1; ti_1 = ti; ///

array_equ(ri_2,ri_1,size);
     7ba:	8626                	mv	a2,s1
     7bc:	85d2                	mv	a1,s4
     7be:	854e                	mv	a0,s3
     7c0:	38ed                	jal	ba <array_equ>
array_equ(ri_1,ri,size);
     7c2:	8626                	mv	a2,s1
     7c4:	85de                	mv	a1,s7
     7c6:	8552                	mv	a0,s4
     7c8:	38cd                	jal	ba <array_equ>
array_equ(ti_2,ti_1,size);
     7ca:	8626                	mv	a2,s1
     7cc:	85da                	mv	a1,s6
     7ce:	00001517          	auipc	a0,0x1
     7d2:	17650513          	addi	a0,a0,374 # 1944 <ti_2>
     7d6:	30d5                	jal	ba <array_equ>
array_equ(ti_1,ti,size);
     7d8:	8626                	mv	a2,s1
     7da:	85e6                	mv	a1,s9
     7dc:	855a                	mv	a0,s6
     7de:	38f1                	jal	ba <array_equ>
        controlR = 0;
     7e0:	4781                	li	a5,0

        for (i = 0; i < N + 1; ++i) {
     7e2:	4701                	li	a4,0
     7e4:	10edd763          	bge	s11,a4,8f2 <ext_euclid+0x270>
    while (controlR != 0) {
     7e8:	f20790e3          	bnez	a5,708 <ext_euclid+0x86>
            controlR += ri[i];
        }
    }


        for (j = 0; j < mod; ++j) {
     7ec:	4701                	li	a4,0
            if (((ri_2[0] * j) % mod) == 1)
     7ee:	4605                	li	a2,1
        for (j = 0; j < mod; ++j) {
     7f0:	11274c63          	blt	a4,s2,908 <ext_euclid+0x286>
     7f4:	00001617          	auipc	a2,0x1
     7f8:	15060613          	addi	a2,a2,336 # 1944 <ti_2>
            if (ri_2[i] != 0)
                //	printf("**** GCD of SECRET POL and POLYR is not 1 !! OPERATION INVALID!! PICK ANOTHER RANDOM VALUE !! *****\n");
                break;
        }

        for (i = 0; i < N + 1; ++i) {
     7fc:	12fdd063          	bge	s11,a5,91c <ext_euclid+0x29a>
        }


        return_address4 = &ti_2[0];
        return return_address4;
    }
     800:	fb040113          	addi	sp,s0,-80
     804:	40b6                	lw	ra,76(sp)
     806:	4426                	lw	s0,72(sp)
     808:	4496                	lw	s1,68(sp)
     80a:	4906                	lw	s2,64(sp)
     80c:	59f2                	lw	s3,60(sp)
     80e:	5a62                	lw	s4,56(sp)
     810:	5ad2                	lw	s5,52(sp)
     812:	5b42                	lw	s6,48(sp)
     814:	5bb2                	lw	s7,44(sp)
     816:	5c22                	lw	s8,40(sp)
     818:	5c92                	lw	s9,36(sp)
     81a:	5d02                	lw	s10,32(sp)
     81c:	4df2                	lw	s11,28(sp)
     81e:	00001517          	auipc	a0,0x1
     822:	12650513          	addi	a0,a0,294 # 1944 <ti_2>
     826:	6161                	addi	sp,sp,80
     828:	8082                	ret
                ri_1[i] = ri_1[i] + mod;
     82a:	97ca                	add	a5,a5,s2
     82c:	c31c                	sw	a5,0(a4)
            while (ri_1[i] < 0) {
     82e:	431c                	lw	a5,0(a4)
     830:	fe07cde3          	bltz	a5,82a <ext_euclid+0x1a8>
            ri_1[i] = ri_1[i] % mod;
     834:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     838:	0685                	addi	a3,a3,1
     83a:	0711                	addi	a4,a4,4
            ri_1[i] = ri_1[i] % mod;
     83c:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     840:	b711                	j	744 <ext_euclid+0xc2>
            ri[i - (N + 1)] = res[i];
     842:	00279693          	slli	a3,a5,0x2
     846:	96aa                	add	a3,a3,a0
     848:	4294                	lw	a3,0(a3)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     84a:	0785                	addi	a5,a5,1
     84c:	0711                	addi	a4,a4,4
            ri[i - (N + 1)] = res[i];
     84e:	fed72e23          	sw	a3,-4(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	b719                	j	758 <ext_euclid+0xd6>
            temp[i] = ri_2[i] - ri[i];
     854:	00f986b3          	add	a3,s3,a5
     858:	00fb85b3          	add	a1,s7,a5
     85c:	4294                	lw	a3,0(a3)
     85e:	418c                	lw	a1,0(a1)
     860:	00fa8633          	add	a2,s5,a5
        for (i = 0; i < N + 1; ++i) {
     864:	0705                	addi	a4,a4,1
            temp[i] = ri_2[i] - ri[i];
     866:	8e8d                	sub	a3,a3,a1
     868:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     86a:	0791                	addi	a5,a5,4
     86c:	bde5                	j	764 <ext_euclid+0xe2>
                temp[i] = temp[i] + mod;
     86e:	97ca                	add	a5,a5,s2
     870:	c31c                	sw	a5,0(a4)
            while (temp[i] < 0) {
     872:	431c                	lw	a5,0(a4)
     874:	fe07cde3          	bltz	a5,86e <ext_euclid+0x1ec>
            temp[i] = temp[i] % mod;
     878:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     87c:	0685                	addi	a3,a3,1
     87e:	0711                	addi	a4,a4,4
            temp[i] = temp[i] % mod;
     880:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     884:	b5ed                	j	76e <ext_euclid+0xec>
                qi_1[i] = qi_1[i] + mod;
     886:	97ca                	add	a5,a5,s2
     888:	c31c                	sw	a5,0(a4)
            while (qi_1[i] < 0) {
     88a:	431c                	lw	a5,0(a4)
     88c:	fe07cde3          	bltz	a5,886 <ext_euclid+0x204>
            qi_1[i] = qi_1[i] % mod;
     890:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     894:	0685                	addi	a3,a3,1
     896:	0711                	addi	a4,a4,4
            qi_1[i] = qi_1[i] % mod;
     898:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     89c:	b5fd                	j	78a <ext_euclid+0x108>
                temp[i] = temp[i] + mod;
     89e:	97ca                	add	a5,a5,s2
     8a0:	00fd2023          	sw	a5,0(s10)
            while (temp[i] < 0) {
     8a4:	000d2783          	lw	a5,0(s10)
     8a8:	fe07cbe3          	bltz	a5,89e <ext_euclid+0x21c>
            temp[i] = temp[i] % mod;
     8ac:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8b0:	0705                	addi	a4,a4,1
     8b2:	0d11                	addi	s10,s10,4
            temp[i] = temp[i] % mod;
     8b4:	fefd2e23          	sw	a5,-4(s10)
        for (i = 0; i < N + 1; ++i) {
     8b8:	b5fd                	j	7a6 <ext_euclid+0x124>
            ti[i] = ti_2[i] - temp[i];
     8ba:	00001697          	auipc	a3,0x1
     8be:	08a68693          	addi	a3,a3,138 # 1944 <ti_2>
     8c2:	96be                	add	a3,a3,a5
     8c4:	00fa85b3          	add	a1,s5,a5
     8c8:	4294                	lw	a3,0(a3)
     8ca:	418c                	lw	a1,0(a1)
     8cc:	00fc8633          	add	a2,s9,a5
        for (i = 0; i < N + 1; ++i) {
     8d0:	0705                	addi	a4,a4,1
            ti[i] = ti_2[i] - temp[i];
     8d2:	8e8d                	sub	a3,a3,a1
     8d4:	c214                	sw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8d6:	0791                	addi	a5,a5,4
     8d8:	bdd9                	j	7ae <ext_euclid+0x12c>
                ti[i] = ti[i] + mod;
     8da:	97ca                	add	a5,a5,s2
     8dc:	c31c                	sw	a5,0(a4)
            while (ti[i] < 0) {
     8de:	431c                	lw	a5,0(a4)
     8e0:	fe07cde3          	bltz	a5,8da <ext_euclid+0x258>
            ti[i] = ti[i] % mod;
     8e4:	0327e7b3          	rem	a5,a5,s2
        for (i = 0; i < N + 1; ++i) {
     8e8:	0685                	addi	a3,a3,1
     8ea:	0711                	addi	a4,a4,4
            ti[i] = ti[i] % mod;
     8ec:	fef72e23          	sw	a5,-4(a4)
        for (i = 0; i < N + 1; ++i) {
     8f0:	b5d9                	j	7b6 <ext_euclid+0x134>
              qi_1[i] = 0;
     8f2:	00271693          	slli	a3,a4,0x2
     8f6:	00dc0633          	add	a2,s8,a3
            controlR += ri[i];
     8fa:	96de                	add	a3,a3,s7
     8fc:	4294                	lw	a3,0(a3)
              qi_1[i] = 0;
     8fe:	00062023          	sw	zero,0(a2)
        for (i = 0; i < N + 1; ++i) {
     902:	0705                	addi	a4,a4,1
            controlR += ri[i];
     904:	97b6                	add	a5,a5,a3
        for (i = 0; i < N + 1; ++i) {
     906:	bdf9                	j	7e4 <ext_euclid+0x162>
            if (((ri_2[0] * j) % mod) == 1)
     908:	0009a683          	lw	a3,0(s3)
     90c:	02d706b3          	mul	a3,a4,a3
     910:	0326e6b3          	rem	a3,a3,s2
     914:	eec680e3          	beq	a3,a2,7f4 <ext_euclid+0x172>
        for (j = 0; j < mod; ++j) {
     918:	0705                	addi	a4,a4,1
     91a:	bdd9                	j	7f0 <ext_euclid+0x16e>
            ti_2[i] = (ti_2[i] * j) % mod;
     91c:	4214                	lw	a3,0(a2)
        for (i = 0; i < N + 1; ++i) {
     91e:	0785                	addi	a5,a5,1
     920:	0611                	addi	a2,a2,4
            ti_2[i] = (ti_2[i] * j) % mod;
     922:	02d706b3          	mul	a3,a4,a3
     926:	0326e6b3          	rem	a3,a3,s2
     92a:	fed62e23          	sw	a3,-4(a2)
        for (i = 0; i < N + 1; ++i) {
     92e:	b5f9                	j	7fc <ext_euclid+0x17a>

00000930 <generate_keys>:




int* generate_keys(int N, int p, int q){
     930:	7141                	addi	sp,sp,-496
     932:	1e112623          	sw	ra,492(sp)
     936:	1e812423          	sw	s0,488(sp)
     93a:	1e912223          	sw	s1,484(sp)
     93e:	1b80                	addi	s0,sp,496
     940:	1f212023          	sw	s2,480(sp)
     944:	1d312e23          	sw	s3,476(sp)
     948:	1d412c23          	sw	s4,472(sp)
     94c:	1d512a23          	sw	s5,468(sp)
     950:	1d612823          	sw	s6,464(sp)
     954:	1d712623          	sw	s7,460(sp)
     958:	1da12023          	sw	s10,448(sp)
     95c:	1d812423          	sw	s8,456(sp)
     960:	1d912223          	sw	s9,452(sp)
     964:	892a                	mv	s2,a0
     966:	8bae                	mv	s7,a1
     968:	8b32                	mv	s6,a2

    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	4581                	li	a1,0
     96c:	0d000613          	li	a2,208
     970:	e2440513          	addi	a0,s0,-476
     974:	2b91                	jal	ec8 <memset>
     976:	4485                	li	s1,1
     978:	59fd                	li	s3,-1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0d800613          	li	a2,216
     97e:	4581                	li	a1,0
     980:	ef840513          	addi	a0,s0,-264
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	e1342c23          	sw	s3,-488(s0)
     988:	e0942e23          	sw	s1,-484(s0)
     98c:	e2942023          	sw	s1,-480(s0)
     990:	e3342423          	sw	s3,-472(s0)
     994:	e2942823          	sw	s1,-464(s0)
     998:	e2942e23          	sw	s1,-452(s0)
     99c:	e5342023          	sw	s3,-448(s0)
     9a0:	e5342223          	sw	s3,-444(s0)
     9a4:	e4942623          	sw	s1,-436(s0)
     9a8:	e5342a23          	sw	s3,-428(s0)
     9ac:	e4942e23          	sw	s1,-420(s0)
     9b0:	e6942023          	sw	s1,-416(s0)
     9b4:	e7342623          	sw	s3,-404(s0)
     9b8:	e6942a23          	sw	s1,-396(s0)
     9bc:	e8942023          	sw	s1,-384(s0)
     9c0:	e8942223          	sw	s1,-380(s0)
     9c4:	e8942423          	sw	s1,-376(s0)
     9c8:	e9342623          	sw	s3,-372(s0)
     9cc:	e8942a23          	sw	s1,-364(s0)
     9d0:	ea942023          	sw	s1,-352(s0)
     9d4:	ea942223          	sw	s1,-348(s0)
     9d8:	ea942423          	sw	s1,-344(s0)
     9dc:	eb342623          	sw	s3,-340(s0)
     9e0:	ea942a23          	sw	s1,-332(s0)
     9e4:	ec942023          	sw	s1,-320(s0)
     9e8:	ec942223          	sw	s1,-316(s0)
     9ec:	ec942423          	sw	s1,-312(s0)

    int *fp;
    int *fq;
    int *fg;
    int *pk;
    int polyR[N+1];
     9f0:	00190a93          	addi	s5,s2,1
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	29d1                	jal	ec8 <memset>
    int polyR[N+1];
     9f6:	002a9793          	slli	a5,s5,0x2
     9fa:	07bd                	addi	a5,a5,15
     9fc:	9bc1                	andi	a5,a5,-16
     9fe:	40f10133          	sub	sp,sp,a5
     a02:	8a0a                	mv	s4,sp
    int i;
    int* return_address5;


    polyR[N] = 1;
     a04:	00291d13          	slli	s10,s2,0x2
     a08:	01aa07b3          	add	a5,s4,s10
     a0c:	c384                	sw	s1,0(a5)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	ef342a23          	sw	s3,-268(s0)
     a12:	ee942e23          	sw	s1,-260(s0)
     a16:	f0942023          	sw	s1,-256(s0)
     a1a:	f0942423          	sw	s1,-248(s0)
     a1e:	f1342a23          	sw	s3,-236(s0)
     a22:	f1342e23          	sw	s3,-228(s0)
     a26:	f3342023          	sw	s3,-224(s0)
     a2a:	f2942423          	sw	s1,-216(s0)
     a2e:	f3342823          	sw	s3,-208(s0)
     a32:	f2942c23          	sw	s1,-200(s0)
     a36:	f4942223          	sw	s1,-188(s0)
     a3a:	f5342423          	sw	s3,-184(s0)
     a3e:	f4942823          	sw	s1,-176(s0)
     a42:	f4942e23          	sw	s1,-164(s0)
     a46:	f7342023          	sw	s3,-160(s0)
     a4a:	f6942423          	sw	s1,-152(s0)
     a4e:	f6942a23          	sw	s1,-140(s0)
     a52:	f7342c23          	sw	s3,-136(s0)
     a56:	f8942023          	sw	s1,-128(s0)
     a5a:	f8942423          	sw	s1,-120(s0)
     a5e:	f8942623          	sw	s1,-116(s0)
     a62:	f8942c23          	sw	s1,-104(s0)
     a66:	f9342e23          	sw	s3,-100(s0)
     a6a:	fa942223          	sw	s1,-92(s0)
     a6e:	fa942623          	sw	s1,-84(s0)
    polyR[0] = -1;
     a72:	013a2023          	sw	s3,0(s4)

    for(i = 1; i < N; ++i){
     a76:	4785                	li	a5,1
     a78:	1127c263          	blt	a5,s2,b7c <generate_keys+0x24c>
     a7c:	87ca                	mv	a5,s2
        polyR[i] = 0;
    }



    for (i = N; i < 55; ++i ){
     a7e:	03600693          	li	a3,54
     a82:	10f6d463          	bge	a3,a5,b8a <generate_keys+0x25a>
        g[i] = 0;
    }
///// F VE G ARRAYLERİNİN SONLARI SIFIRLANDI //////


    for(i = 0; i < N; ++i){
     a86:	4781                	li	a5,0
        random_keys[i] = f[i];
     a88:	00001697          	auipc	a3,0x1
     a8c:	04c68693          	addi	a3,a3,76 # 1ad4 <random_keys>
    for(i = 0; i < N; ++i){
     a90:	1127cb63          	blt	a5,s2,ba6 <generate_keys+0x276>
     a94:	ef440713          	addi	a4,s0,-268
    }
    ////RANDOM_KEYS 0-52 ARASI F////

    for(i = N; i < (2*N); ++i){
     a98:	00191993          	slli	s3,s2,0x1
     a9c:	87ca                	mv	a5,s2
     a9e:	8cba                	mv	s9,a4
        random_keys[i] = g[i-N];
     aa0:	00001617          	auipc	a2,0x1
     aa4:	03460613          	addi	a2,a2,52 # 1ad4 <random_keys>
    for(i = N; i < (2*N); ++i){
     aa8:	1137ca63          	blt	a5,s3,bbc <generate_keys+0x28c>
    ////RANDOM_KEYS 53-105 ARASI G////

    fp = ext_euclid(polyR, f, (N+1), p);
    ////FP HESAPLANDI////

    for(i = (2*N); i < (3*N); ++i){
     aac:	448d                	li	s1,3
     aae:	029904b3          	mul	s1,s2,s1
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	86de                	mv	a3,s7
     ab4:	8656                	mv	a2,s5
     ab6:	e1840593          	addi	a1,s0,-488
     aba:	8552                	mv	a0,s4
     abc:	36d9                	jal	682 <ext_euclid>
    for(i = (2*N); i < (3*N); ++i){
     abe:	87ce                	mv	a5,s3
        random_keys[i] = fp[i-(2*N)];
     ac0:	00001697          	auipc	a3,0x1
     ac4:	01468693          	addi	a3,a3,20 # 1ad4 <random_keys>
    for(i = (2*N); i < (3*N); ++i){
     ac8:	1097c263          	blt	a5,s1,bcc <generate_keys+0x29c>
    }
    ////RANDOM_KEYS 106-158 ARASI FP////


    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	8656                	mv	a2,s5
     ace:	86da                	mv	a3,s6
     ad0:	e1840593          	addi	a1,s0,-488
     ad4:	8552                	mv	a0,s4
     ad6:	3675                	jal	682 <ext_euclid>
    ////FQ HESAPLANDI ////


    for(i = (3*N); i < (4*N); ++i){
     ad8:	5751                	li	a4,-12
     ada:	02e90733          	mul	a4,s2,a4
     ade:	8c6a                	mv	s8,s10
        random_keys[i] = fq[i-(3*N)];
     ae0:	00001617          	auipc	a2,0x1
     ae4:	ff460613          	addi	a2,a2,-12 # 1ad4 <random_keys>
    for(i = (3*N); i < (4*N); ++i){
     ae8:	0fa4ca63          	blt	s1,s10,bdc <generate_keys+0x2ac>
    }
    ////RANDOM KEYS 159-211 ARASI FQ ////

    fg = polymult2(fq, N, g, N, 0);
     aec:	4701                	li	a4,0
     aee:	85ca                	mv	a1,s2
     af0:	86ca                	mv	a3,s2
     af2:	8666                	mv	a2,s9
     af4:	ff4ff0ef          	jal	ra,2e8 <polymult2>
    //// FG HESAPLANDI ////

    for(i = 0; i < (2*N-1); ++i){
     af8:	87aa                	mv	a5,a0
     afa:	4701                	li	a4,0
     afc:	fff98593          	addi	a1,s3,-1
     b00:	0eb74863          	blt	a4,a1,bf0 <generate_keys+0x2c0>
        fg[i] = fg[i]*p;
    }

    //// FG = 3FG ////

    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	86d6                	mv	a3,s5
     b06:	875a                	mv	a4,s6
     b08:	8652                	mv	a2,s4
     b0a:	3a35                	jal	446 <polydiv>

    ////PK HESAPLANDI////

    for(i = (4*N); i < (5*N); ++i){
     b0c:	4795                	li	a5,5
     b0e:	02f907b3          	mul	a5,s2,a5
     b12:	098a                	slli	s3,s3,0x2
     b14:	99aa                	add	s3,s3,a0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	00001697          	auipc	a3,0x1
     b1a:	fbe68693          	addi	a3,a3,-66 # 1ad4 <random_keys>
    for(i = (4*N); i < (5*N); ++i){
     b1e:	0991                	addi	s3,s3,4
     b20:	0efc4063          	blt	s8,a5,c00 <generate_keys+0x2d0>
    }
    //////// RANDOM KEYS SONU PK  ////////

    for(i = (5*N); i < (6*N+1); ++i){
     b24:	4699                	li	a3,6
     b26:	5531                	li	a0,-20
        random_keys[i] = polyR[i-(5*N)];
     b28:	00001617          	auipc	a2,0x1
     b2c:	fac60613          	addi	a2,a2,-84 # 1ad4 <random_keys>
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	02d906b3          	mul	a3,s2,a3
     b34:	02a90933          	mul	s2,s2,a0
     b38:	0cf6dc63          	bge	a3,a5,c10 <generate_keys+0x2e0>


    return_address5 = &random_keys[0];

    return return_address5;
}
     b3c:	e1040113          	addi	sp,s0,-496
     b40:	1ec12083          	lw	ra,492(sp)
     b44:	1e812403          	lw	s0,488(sp)
     b48:	1e412483          	lw	s1,484(sp)
     b4c:	1e012903          	lw	s2,480(sp)
     b50:	1dc12983          	lw	s3,476(sp)
     b54:	1d812a03          	lw	s4,472(sp)
     b58:	1d412a83          	lw	s5,468(sp)
     b5c:	1d012b03          	lw	s6,464(sp)
     b60:	1cc12b83          	lw	s7,460(sp)
     b64:	1c812c03          	lw	s8,456(sp)
     b68:	1c412c83          	lw	s9,452(sp)
     b6c:	1c012d03          	lw	s10,448(sp)
     b70:	00001517          	auipc	a0,0x1
     b74:	f6450513          	addi	a0,a0,-156 # 1ad4 <random_keys>
     b78:	617d                	addi	sp,sp,496
     b7a:	8082                	ret
        polyR[i] = 0;
     b7c:	00279713          	slli	a4,a5,0x2
     b80:	9752                	add	a4,a4,s4
     b82:	00072023          	sw	zero,0(a4)
    for(i = 1; i < N; ++i){
     b86:	0785                	addi	a5,a5,1
     b88:	bdc5                	j	a78 <generate_keys+0x148>
        f[i] = 0;
     b8a:	00279713          	slli	a4,a5,0x2
     b8e:	e1840613          	addi	a2,s0,-488
     b92:	963a                	add	a2,a2,a4
     b94:	00062023          	sw	zero,0(a2)
        g[i] = 0;
     b98:	ef440613          	addi	a2,s0,-268
     b9c:	9732                	add	a4,a4,a2
     b9e:	00072023          	sw	zero,0(a4)
    for (i = N; i < 55; ++i ){
     ba2:	0785                	addi	a5,a5,1
     ba4:	bdf9                	j	a82 <generate_keys+0x152>
        random_keys[i] = f[i];
     ba6:	00279713          	slli	a4,a5,0x2
     baa:	e1840593          	addi	a1,s0,-488
     bae:	00e68633          	add	a2,a3,a4
     bb2:	972e                	add	a4,a4,a1
     bb4:	4318                	lw	a4,0(a4)
    for(i = 0; i < N; ++i){
     bb6:	0785                	addi	a5,a5,1
        random_keys[i] = f[i];
     bb8:	c218                	sw	a4,0(a2)
    for(i = 0; i < N; ++i){
     bba:	bdd9                	j	a90 <generate_keys+0x160>
        random_keys[i] = g[i-N];
     bbc:	430c                	lw	a1,0(a4)
     bbe:	00279693          	slli	a3,a5,0x2
     bc2:	96b2                	add	a3,a3,a2
     bc4:	c28c                	sw	a1,0(a3)
    for(i = N; i < (2*N); ++i){
     bc6:	0785                	addi	a5,a5,1
     bc8:	0711                	addi	a4,a4,4
     bca:	bdf9                	j	aa8 <generate_keys+0x178>
        random_keys[i] = fp[i-(2*N)];
     bcc:	4110                	lw	a2,0(a0)
     bce:	00279713          	slli	a4,a5,0x2
     bd2:	9736                	add	a4,a4,a3
     bd4:	c310                	sw	a2,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     bd6:	0785                	addi	a5,a5,1
     bd8:	0511                	addi	a0,a0,4
     bda:	b5fd                	j	ac8 <generate_keys+0x198>
        random_keys[i] = fq[i-(3*N)];
     bdc:	00249793          	slli	a5,s1,0x2
     be0:	00f706b3          	add	a3,a4,a5
     be4:	96aa                	add	a3,a3,a0
     be6:	4294                	lw	a3,0(a3)
     be8:	97b2                	add	a5,a5,a2
    for(i = (3*N); i < (4*N); ++i){
     bea:	0485                	addi	s1,s1,1
        random_keys[i] = fq[i-(3*N)];
     bec:	c394                	sw	a3,0(a5)
    for(i = (3*N); i < (4*N); ++i){
     bee:	bded                	j	ae8 <generate_keys+0x1b8>
        fg[i] = fg[i]*p;
     bf0:	4394                	lw	a3,0(a5)
    for(i = 0; i < (2*N-1); ++i){
     bf2:	0705                	addi	a4,a4,1
     bf4:	0791                	addi	a5,a5,4
        fg[i] = fg[i]*p;
     bf6:	037686b3          	mul	a3,a3,s7
     bfa:	fed7ae23          	sw	a3,-4(a5)
    for(i = 0; i < (2*N-1); ++i){
     bfe:	b709                	j	b00 <generate_keys+0x1d0>
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c00:	ff89a603          	lw	a2,-8(s3)
     c04:	002c1713          	slli	a4,s8,0x2
     c08:	9736                	add	a4,a4,a3
     c0a:	c310                	sw	a2,0(a4)
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0c05                	addi	s8,s8,1
     c0e:	bf01                	j	b1e <generate_keys+0x1ee>
        random_keys[i] = polyR[i-(5*N)];
     c10:	00279713          	slli	a4,a5,0x2
     c14:	00e605b3          	add	a1,a2,a4
     c18:	974a                	add	a4,a4,s2
     c1a:	9752                	add	a4,a4,s4
     c1c:	4318                	lw	a4,0(a4)
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	0785                	addi	a5,a5,1
        random_keys[i] = polyR[i-(5*N)];
     c20:	c198                	sw	a4,0(a1)
    for(i = (5*N); i < (6*N+1); ++i){
     c22:	bf19                	j	b38 <generate_keys+0x208>

00000c24 <ntru_encyrpt>:


int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	7115                	addi	sp,sp,-224
     c26:	cda2                	sw	s0,216(sp)
     c28:	cba6                	sw	s1,212(sp)
     c2a:	842a                	mv	s0,a0
     c2c:	84b2                	mv	s1,a2
     c2e:	c9ca                	sw	s2,208(sp)

    int *return_address6;
    int *CT;

    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	0c000613          	li	a2,192
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c34:	892e                	mv	s2,a1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	850a                	mv	a0,sp
     c38:	00000597          	auipc	a1,0x0
     c3c:	48058593          	addi	a1,a1,1152 # 10b8 <__DTOR_END__>
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	cf86                	sw	ra,220(sp)
     c42:	c7ce                	sw	s3,204(sp)
     c44:	c5d2                	sw	s4,200(sp)
     c46:	89b6                	mv	s3,a3
     c48:	8a3a                	mv	s4,a4
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4a:	2245                	jal	dea <memcpy>
    int *temp;
    int i;


    temp = polymult(public_key,N,random_val,48,q,0);
     c4c:	4781                	li	a5,0
     c4e:	874a                	mv	a4,s2
     c50:	03000693          	li	a3,48
     c54:	85a2                	mv	a1,s0
     c56:	860a                	mv	a2,sp
     c58:	854e                	mv	a0,s3
     c5a:	c82ff0ef          	jal	ra,dc <polymult>
    /////// PUBLIC_KEY*RANDOM_VALUE ///////
//
//    for(i = 0; i < 48; ++i){
//        temp[i] = temp[i] + message[i];
//    }
array_add(temp,message,48);
     c5e:	85a6                	mv	a1,s1
     c60:	03000613          	li	a2,48
    temp = polymult(public_key,N,random_val,48,q,0);
     c64:	89aa                	mv	s3,a0
    ////// PUBLIC_KEY*RANDOM_VALUE + MESSAGE ///////

    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	00141493          	slli	s1,s0,0x1
array_add(temp,message,48);
     c6a:	c28ff0ef          	jal	ra,92 <array_add>
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6e:	00140693          	addi	a3,s0,1
     c72:	874a                	mv	a4,s2
     c74:	8652                	mv	a2,s4
     c76:	85a6                	mv	a1,s1
     c78:	854e                	mv	a0,s3
     c7a:	fccff0ef          	jal	ra,446 <polydiv>

    for(i = (2*N); i < (3*N); ++i){
     c7e:	478d                	li	a5,3
     c80:	02f40433          	mul	s0,s0,a5
     c84:	87aa                	mv	a5,a0
     c86:	0084ca63          	blt	s1,s0,c9a <ntru_encyrpt+0x76>
    ///// YUKARIDAKI IKI ISLEM MODULO OPERASYONU YAPIYOR /////


    return_address6 = &CT[0];
    return return_address6;
}
     c8a:	40fe                	lw	ra,220(sp)
     c8c:	446e                	lw	s0,216(sp)
     c8e:	44de                	lw	s1,212(sp)
     c90:	494e                	lw	s2,208(sp)
     c92:	49be                	lw	s3,204(sp)
     c94:	4a2e                	lw	s4,200(sp)
     c96:	612d                	addi	sp,sp,224
     c98:	8082                	ret
        CT[i-(2*N)] = CT[i];
     c9a:	00249713          	slli	a4,s1,0x2
     c9e:	972a                	add	a4,a4,a0
     ca0:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < (3*N); ++i){
     ca2:	0485                	addi	s1,s1,1
     ca4:	0791                	addi	a5,a5,4
        CT[i-(2*N)] = CT[i];
     ca6:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < (3*N); ++i){
     caa:	bff1                	j	c86 <ntru_encyrpt+0x62>

00000cac <ntru_deceypt>:


int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cac:	7179                	addi	sp,sp,-48
     cae:	d422                	sw	s0,40(sp)
     cb0:	ce4e                	sw	s3,28(sp)
     cb2:	842a                	mv	s0,a0


    a2 = polydiv(a,(2*N),polyR,(N+1),q);
/////////// Vector a2 (f.e modq) /////////

    for(i = (2*N); i < ((2*N)+N); ++i){
     cb4:	498d                	li	s3,3
     cb6:	033409b3          	mul	s3,s0,s3
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cba:	d04a                	sw	s2,32(sp)
     cbc:	ca56                	sw	s5,20(sp)
     cbe:	c65e                	sw	s7,12(sp)
     cc0:	8932                	mv	s2,a2
     cc2:	8536                	mv	a0,a3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	863e                	mv	a2,a5
     cc6:	86a2                	mv	a3,s0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	8aae                	mv	s5,a1
     cca:	8bba                	mv	s7,a4
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ccc:	85a2                	mv	a1,s0
     cce:	4701                	li	a4,0
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd0:	d606                	sw	ra,44(sp)
     cd2:	d226                	sw	s1,36(sp)
     cd4:	cc52                	sw	s4,24(sp)
     cd6:	c85a                	sw	s6,16(sp)
     cd8:	8a42                	mv	s4,a6
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	00141493          	slli	s1,s0,0x1
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cde:	e0aff0ef          	jal	ra,2e8 <polymult2>
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	00140b13          	addi	s6,s0,1
     ce6:	874a                	mv	a4,s2
     ce8:	86da                	mv	a3,s6
     cea:	8652                	mv	a2,s4
     cec:	85a6                	mv	a1,s1
     cee:	f58ff0ef          	jal	ra,446 <polydiv>
     cf2:	862a                	mv	a2,a0
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf4:	87aa                	mv	a5,a0
     cf6:	872a                	mv	a4,a0
     cf8:	86a6                	mv	a3,s1
     cfa:	0536c263          	blt	a3,s3,d3e <ntru_deceypt+0x92>
        a2[i-(2*N)] = a2[i];
    }

    //centerlifting a2
    for (i = 0; i < N; ++i){
        if(a2[i] <= q/2)
     cfe:	4589                	li	a1,2
     d00:	02b945b3          	div	a1,s2,a1
    for (i = 0; i < N; ++i){
     d04:	4701                	li	a4,0
     d06:	04874563          	blt	a4,s0,d50 <ntru_deceypt+0xa4>
        else
            a2[i] = (-1)*(q-a2[i]);
    }


    c = polymult2(secret_key_fp,N,a2,N,0);
     d0a:	4701                	li	a4,0
     d0c:	86a2                	mv	a3,s0
     d0e:	85a2                	mv	a1,s0
     d10:	855e                	mv	a0,s7
     d12:	dd6ff0ef          	jal	ra,2e8 <polymult2>
/////////"Vector c(fp*a2)//////////


    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d16:	8756                	mv	a4,s5
     d18:	86da                	mv	a3,s6
     d1a:	8652                	mv	a2,s4
     d1c:	85a6                	mv	a1,s1
     d1e:	f28ff0ef          	jal	ra,446 <polydiv>
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	87aa                	mv	a5,a0
     d24:	0334cf63          	blt	s1,s3,d62 <ntru_deceypt+0xb6>
    }
    ////////"Vector c2 (decrypted message)/////////

    return_address7 = &c2[0];
    return return_address7;
}
     d28:	50b2                	lw	ra,44(sp)
     d2a:	5422                	lw	s0,40(sp)
     d2c:	5492                	lw	s1,36(sp)
     d2e:	5902                	lw	s2,32(sp)
     d30:	49f2                	lw	s3,28(sp)
     d32:	4a62                	lw	s4,24(sp)
     d34:	4ad2                	lw	s5,20(sp)
     d36:	4b42                	lw	s6,16(sp)
     d38:	4bb2                	lw	s7,12(sp)
     d3a:	6145                	addi	sp,sp,48
     d3c:	8082                	ret
        a2[i-(2*N)] = a2[i];
     d3e:	00269593          	slli	a1,a3,0x2
     d42:	95b2                	add	a1,a1,a2
     d44:	418c                	lw	a1,0(a1)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0685                	addi	a3,a3,1
     d48:	0711                	addi	a4,a4,4
        a2[i-(2*N)] = a2[i];
     d4a:	feb72e23          	sw	a1,-4(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	b775                	j	cfa <ntru_deceypt+0x4e>
        if(a2[i] <= q/2)
     d50:	4394                	lw	a3,0(a5)
     d52:	00d5d563          	bge	a1,a3,d5c <ntru_deceypt+0xb0>
            a2[i] = (-1)*(q-a2[i]);
     d56:	412686b3          	sub	a3,a3,s2
     d5a:	c394                	sw	a3,0(a5)
    for (i = 0; i < N; ++i){
     d5c:	0705                	addi	a4,a4,1
     d5e:	0791                	addi	a5,a5,4
     d60:	b75d                	j	d06 <ntru_deceypt+0x5a>
        c2[i-(2*N)] = c2[i];
     d62:	00249713          	slli	a4,s1,0x2
     d66:	972a                	add	a4,a4,a0
     d68:	4318                	lw	a4,0(a4)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6a:	0485                	addi	s1,s1,1
     d6c:	0791                	addi	a5,a5,4
        c2[i-(2*N)] = c2[i];
     d6e:	fee7ae23          	sw	a4,-4(a5)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	bf4d                	j	d24 <ntru_deceypt+0x78>

00000d74 <default_exc_handler>:
  jal x0, default_exc_handler
     d74:	0000006f          	j	d74 <default_exc_handler>

00000d78 <reset_handler>:
  mv  x1, x0
     d78:	00000093          	li	ra,0
  mv  x2, x1
     d7c:	8106                	mv	sp,ra
  mv  x3, x1
     d7e:	8186                	mv	gp,ra
  mv  x4, x1
     d80:	8206                	mv	tp,ra
  mv  x5, x1
     d82:	8286                	mv	t0,ra
  mv  x6, x1
     d84:	8306                	mv	t1,ra
  mv  x7, x1
     d86:	8386                	mv	t2,ra
  mv  x8, x1
     d88:	8406                	mv	s0,ra
  mv  x9, x1
     d8a:	8486                	mv	s1,ra
  mv x10, x1
     d8c:	8506                	mv	a0,ra
  mv x11, x1
     d8e:	8586                	mv	a1,ra
  mv x12, x1
     d90:	8606                	mv	a2,ra
  mv x13, x1
     d92:	8686                	mv	a3,ra
  mv x14, x1
     d94:	8706                	mv	a4,ra
  mv x15, x1
     d96:	8786                	mv	a5,ra
  mv x16, x1
     d98:	8806                	mv	a6,ra
  mv x17, x1
     d9a:	8886                	mv	a7,ra
  mv x18, x1
     d9c:	8906                	mv	s2,ra
  mv x19, x1
     d9e:	8986                	mv	s3,ra
  mv x20, x1
     da0:	8a06                	mv	s4,ra
  mv x21, x1
     da2:	8a86                	mv	s5,ra
  mv x22, x1
     da4:	8b06                	mv	s6,ra
  mv x23, x1
     da6:	8b86                	mv	s7,ra
  mv x24, x1
     da8:	8c06                	mv	s8,ra
  mv x25, x1
     daa:	8c86                	mv	s9,ra
  mv x26, x1
     dac:	8d06                	mv	s10,ra
  mv x27, x1
     dae:	8d86                	mv	s11,ra
  mv x28, x1
     db0:	8e06                	mv	t3,ra
  mv x29, x1
     db2:	8e86                	mv	t4,ra
  mv x30, x1
     db4:	8f06                	mv	t5,ra
  mv x31, x1
     db6:	8f86                	mv	t6,ra
  la   x2, _stack_start
     db8:	0000f117          	auipc	sp,0xf
     dbc:	24810113          	addi	sp,sp,584 # 10000 <_stack_start>

00000dc0 <_start>:
  la x26, _bss_start
     dc0:	00000d17          	auipc	s10,0x0
     dc4:	47cd0d13          	addi	s10,s10,1148 # 123c <_bss_start>
  la x27, _bss_end
     dc8:	00001d97          	auipc	s11,0x1
     dcc:	204d8d93          	addi	s11,s11,516 # 1fcc <_bss_end>
  bge x26, x27, zero_loop_end
     dd0:	01bd5763          	bge	s10,s11,dde <main_entry>

00000dd4 <zero_loop>:
  sw x0, 0(x26)
     dd4:	000d2023          	sw	zero,0(s10)
  addi x26, x26, 4
     dd8:	0d11                	addi	s10,s10,4
  ble x26, x27, zero_loop
     dda:	ffaddde3          	bge	s11,s10,dd4 <zero_loop>

00000dde <main_entry>:
  addi x10, x0, 0
     dde:	00000513          	li	a0,0
  addi x11, x0, 0
     de2:	00000593          	li	a1,0
  jal x1, main
     de6:	18a000ef          	jal	ra,f70 <main>

00000dea <memcpy>:
     dea:	00a5c7b3          	xor	a5,a1,a0
     dee:	8b8d                	andi	a5,a5,3
     df0:	00c508b3          	add	a7,a0,a2
     df4:	e7a1                	bnez	a5,e3c <memcpy+0x52>
     df6:	478d                	li	a5,3
     df8:	04c7f263          	bgeu	a5,a2,e3c <memcpy+0x52>
     dfc:	00357793          	andi	a5,a0,3
     e00:	872a                	mv	a4,a0
     e02:	eba9                	bnez	a5,e54 <memcpy+0x6a>
     e04:	ffc8f613          	andi	a2,a7,-4
     e08:	fe060793          	addi	a5,a2,-32
     e0c:	06f76763          	bltu	a4,a5,e7a <memcpy+0x90>
     e10:	02c77363          	bgeu	a4,a2,e36 <memcpy+0x4c>
     e14:	86ae                	mv	a3,a1
     e16:	87ba                	mv	a5,a4
     e18:	0006a803          	lw	a6,0(a3)
     e1c:	0791                	addi	a5,a5,4
     e1e:	0691                	addi	a3,a3,4
     e20:	ff07ae23          	sw	a6,-4(a5)
     e24:	fec7eae3          	bltu	a5,a2,e18 <memcpy+0x2e>
     e28:	fff60793          	addi	a5,a2,-1
     e2c:	8f99                	sub	a5,a5,a4
     e2e:	9bf1                	andi	a5,a5,-4
     e30:	0791                	addi	a5,a5,4
     e32:	973e                	add	a4,a4,a5
     e34:	95be                	add	a1,a1,a5
     e36:	01176663          	bltu	a4,a7,e42 <memcpy+0x58>
     e3a:	8082                	ret
     e3c:	872a                	mv	a4,a0
     e3e:	ff157ee3          	bgeu	a0,a7,e3a <memcpy+0x50>
     e42:	0005c783          	lbu	a5,0(a1)
     e46:	0705                	addi	a4,a4,1
     e48:	0585                	addi	a1,a1,1
     e4a:	fef70fa3          	sb	a5,-1(a4)
     e4e:	ff176ae3          	bltu	a4,a7,e42 <memcpy+0x58>
     e52:	8082                	ret
     e54:	0005c683          	lbu	a3,0(a1)
     e58:	0705                	addi	a4,a4,1
     e5a:	00377793          	andi	a5,a4,3
     e5e:	fed70fa3          	sb	a3,-1(a4)
     e62:	0585                	addi	a1,a1,1
     e64:	d3c5                	beqz	a5,e04 <memcpy+0x1a>
     e66:	0005c683          	lbu	a3,0(a1)
     e6a:	0705                	addi	a4,a4,1
     e6c:	00377793          	andi	a5,a4,3
     e70:	fed70fa3          	sb	a3,-1(a4)
     e74:	0585                	addi	a1,a1,1
     e76:	fff9                	bnez	a5,e54 <memcpy+0x6a>
     e78:	b771                	j	e04 <memcpy+0x1a>
     e7a:	41d4                	lw	a3,4(a1)
     e7c:	0005a283          	lw	t0,0(a1)
     e80:	0085af83          	lw	t6,8(a1)
     e84:	00c5af03          	lw	t5,12(a1)
     e88:	0105ae83          	lw	t4,16(a1)
     e8c:	0145ae03          	lw	t3,20(a1)
     e90:	0185a303          	lw	t1,24(a1)
     e94:	01c5a803          	lw	a6,28(a1)
     e98:	c354                	sw	a3,4(a4)
     e9a:	5194                	lw	a3,32(a1)
     e9c:	00572023          	sw	t0,0(a4)
     ea0:	01f72423          	sw	t6,8(a4)
     ea4:	01e72623          	sw	t5,12(a4)
     ea8:	01d72823          	sw	t4,16(a4)
     eac:	01c72a23          	sw	t3,20(a4)
     eb0:	00672c23          	sw	t1,24(a4)
     eb4:	01072e23          	sw	a6,28(a4)
     eb8:	d314                	sw	a3,32(a4)
     eba:	02470713          	addi	a4,a4,36
     ebe:	02458593          	addi	a1,a1,36
     ec2:	faf76ce3          	bltu	a4,a5,e7a <memcpy+0x90>
     ec6:	b7a9                	j	e10 <memcpy+0x26>

00000ec8 <memset>:
     ec8:	433d                	li	t1,15
     eca:	872a                	mv	a4,a0
     ecc:	02c37363          	bgeu	t1,a2,ef2 <memset+0x2a>
     ed0:	00f77793          	andi	a5,a4,15
     ed4:	efbd                	bnez	a5,f52 <memset+0x8a>
     ed6:	e5ad                	bnez	a1,f40 <memset+0x78>
     ed8:	ff067693          	andi	a3,a2,-16
     edc:	8a3d                	andi	a2,a2,15
     ede:	96ba                	add	a3,a3,a4
     ee0:	c30c                	sw	a1,0(a4)
     ee2:	c34c                	sw	a1,4(a4)
     ee4:	c70c                	sw	a1,8(a4)
     ee6:	c74c                	sw	a1,12(a4)
     ee8:	0741                	addi	a4,a4,16
     eea:	fed76be3          	bltu	a4,a3,ee0 <memset+0x18>
     eee:	e211                	bnez	a2,ef2 <memset+0x2a>
     ef0:	8082                	ret
     ef2:	40c306b3          	sub	a3,t1,a2
     ef6:	068a                	slli	a3,a3,0x2
     ef8:	00000297          	auipc	t0,0x0
     efc:	9696                	add	a3,a3,t0
     efe:	00a68067          	jr	10(a3)
     f02:	00b70723          	sb	a1,14(a4)
     f06:	00b706a3          	sb	a1,13(a4)
     f0a:	00b70623          	sb	a1,12(a4)
     f0e:	00b705a3          	sb	a1,11(a4)
     f12:	00b70523          	sb	a1,10(a4)
     f16:	00b704a3          	sb	a1,9(a4)
     f1a:	00b70423          	sb	a1,8(a4)
     f1e:	00b703a3          	sb	a1,7(a4)
     f22:	00b70323          	sb	a1,6(a4)
     f26:	00b702a3          	sb	a1,5(a4)
     f2a:	00b70223          	sb	a1,4(a4)
     f2e:	00b701a3          	sb	a1,3(a4)
     f32:	00b70123          	sb	a1,2(a4)
     f36:	00b700a3          	sb	a1,1(a4)
     f3a:	00b70023          	sb	a1,0(a4)
     f3e:	8082                	ret
     f40:	0ff5f593          	andi	a1,a1,255
     f44:	00859693          	slli	a3,a1,0x8
     f48:	8dd5                	or	a1,a1,a3
     f4a:	01059693          	slli	a3,a1,0x10
     f4e:	8dd5                	or	a1,a1,a3
     f50:	b761                	j	ed8 <memset+0x10>
     f52:	00279693          	slli	a3,a5,0x2
     f56:	00000297          	auipc	t0,0x0
     f5a:	9696                	add	a3,a3,t0
     f5c:	8286                	mv	t0,ra
     f5e:	fa8680e7          	jalr	-88(a3)
     f62:	8096                	mv	ra,t0
     f64:	17c1                	addi	a5,a5,-16
     f66:	8f1d                	sub	a4,a4,a5
     f68:	963e                	add	a2,a2,a5
     f6a:	f8c374e3          	bgeu	t1,a2,ef2 <memset+0x2a>
     f6e:	b7a5                	j	ed6 <memset+0xe>

00000f70 <main>:

int main(){
     f70:	bd010113          	addi	sp,sp,-1072
    int* keys;
    int N = 53;
    int p = 3;
    int q = 101;

    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f74:	0c000613          	li	a2,192
     f78:	00000597          	auipc	a1,0x0
     f7c:	20058593          	addi	a1,a1,512 # 1178 <__DTOR_END__+0xc0>
     f80:	0068                	addi	a0,sp,12
int main(){
     f82:	42112623          	sw	ra,1068(sp)
     f86:	42812423          	sw	s0,1064(sp)
     f8a:	42912223          	sw	s1,1060(sp)
     f8e:	43212023          	sw	s2,1056(sp)

    // Alice generates public key from her randomly created secret keys.
  //  printf("\nKEY GENERATION STARTED \n");

 //   start = clock();
    resultkon[0] = 0xaaaaaaa0;
     f92:	aaaab4b7          	lui	s1,0xaaaab
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f96:	3d91                	jal	dea <memcpy>
    resultkon[0] = 0xaaaaaaa0;
     f98:	aa048793          	addi	a5,s1,-1376 # aaaaaaa0 <_stack_start+0xaaa9aaa0>
     f9c:	00000417          	auipc	s0,0x0
     fa0:	29c40413          	addi	s0,s0,668 # 1238 <_edata>
    keys = generate_keys(N, p, q);
     fa4:	06500613          	li	a2,101
     fa8:	458d                	li	a1,3
     faa:	03500513          	li	a0,53
    resultkon[0] = 0xaaaaaaa0;
     fae:	c01c                	sw	a5,0(s0)
    resultkon[0] = 0xaaaaaaa1;
     fb0:	aa148493          	addi	s1,s1,-1375
    keys = generate_keys(N, p, q);
     fb4:	3ab5                	jal	930 <generate_keys>
    resultkon[0] = 0xaaaaaaa1;
     fb6:	4781                	li	a5,0
     fb8:	c004                	sw	s1,0(s0)
   // printf("Secret Key f = ");
    for(i = 0; i < N; ++i){
     fba:	0d400713          	li	a4,212
  //      printf(" %d ", keys[i]);
        secret_key_f[i] = keys[i];
     fbe:	00f506b3          	add	a3,a0,a5
     fc2:	4290                	lw	a2,0(a3)
     fc4:	1314                	addi	a3,sp,416
     fc6:	96be                	add	a3,a3,a5
     fc8:	c290                	sw	a2,0(a3)
    for(i = 0; i < N; ++i){
     fca:	0791                	addi	a5,a5,4
     fcc:	fee799e3          	bne	a5,a4,fbe <main+0x4e>
    }
  //  printf("\n");

 //   printf("Secret Key g = ");
    for(i = N; i < (2*N); ++i){
     fd0:	1cd8                	addi	a4,sp,628
     fd2:	1a850793          	addi	a5,a0,424
     fd6:	27c50693          	addi	a3,a0,636
     fda:	893a                	mv	s2,a4
  //  printf("\n");

  //  printf("Secret Key fp = ");
    for(i = (2*N); i < (3*N); ++i){
  //      printf(" %d ", keys[i]);
        secret_key_fp[i-(2*N)] = keys[i];
     fdc:	4390                	lw	a2,0(a5)
     fde:	0791                	addi	a5,a5,4
     fe0:	0711                	addi	a4,a4,4
     fe2:	fec72e23          	sw	a2,-4(a4)
    for(i = (2*N); i < (3*N); ++i){
     fe6:	fed79be3          	bne	a5,a3,fdc <main+0x6c>
    }
  //  printf("\n");

 //   printf("Secret Key fq = ");
    for(i = (3*N); i < (4*N); ++i){
     fea:	01f8                	addi	a4,sp,204
     fec:	35050793          	addi	a5,a0,848
     ff0:	42450613          	addi	a2,a0,1060
     ff4:	86ba                	mv	a3,a4
 //   printf("\n");

//    printf("Public Key h = ");
    for(i = (4*N); i < (5*N); ++i){
//        printf(" %d ", keys[i]);
        public_key[i-(4*N)] = keys[i];
     ff6:	438c                	lw	a1,0(a5)
     ff8:	0791                	addi	a5,a5,4
     ffa:	0711                	addi	a4,a4,4
     ffc:	feb72e23          	sw	a1,-4(a4)
    for(i = (4*N); i < (5*N); ++i){
    1000:	fec79be3          	bne	a5,a2,ff6 <main+0x86>
    1004:	06b0                	addi	a2,sp,840
    1006:	4fc50513          	addi	a0,a0,1276
    100a:	8832                	mv	a6,a2
 //   printf("\n");

 //   printf("Ring Poly = ");
    for(i = (5*N); i < (6*N+1); ++i){
  //      printf(" %d ", keys[i]);
        ring_poly[i-(5*N)] = keys[i];
    100c:	4398                	lw	a4,0(a5)
    100e:	0791                	addi	a5,a5,4
    1010:	0611                	addi	a2,a2,4
    1012:	fee62e23          	sw	a4,-4(a2)
    for(i = (5*N); i < (6*N+1); ++i){
    1016:	fea79be3          	bne	a5,a0,100c <main+0x9c>
    }
 //   printf("\nKEY GENERATION FINISHED \n");

    // Bob encrypts message using Alice's public key and sends it to Alice.
  //  printf("\nENCRYPTION STARTED\n");
    resultkon[0] = 0xbbbbbbb0;
    101a:	bbbbc4b7          	lui	s1,0xbbbbc
    101e:	bb048793          	addi	a5,s1,-1104 # bbbbbbb0 <_stack_start+0xbbbabbb0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	8742                	mv	a4,a6
    1024:	0070                	addi	a2,sp,12
    1026:	06500593          	li	a1,101
    resultkon[0] = 0xbbbbbbb1;
    102a:	bb148493          	addi	s1,s1,-1103
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	03500513          	li	a0,53
    resultkon[0] = 0xbbbbbbb0;
    1032:	c01c                	sw	a5,0(s0)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	3ec5                	jal	c24 <ntru_encyrpt>
    resultkon[0] = 0xbbbbbbb1;
    1036:	c004                	sw	s1,0(s0)
 //   }
//    printf("\nENCRYPTION FINISHED\n");

    // Alice decrypts the message using her secret keys.
 //   printf("\nDECRYPTION STARTED\n");
    resultkon[0] = 0xccccccc0;
    1038:	ccccd4b7          	lui	s1,0xccccd
    103c:	cc048713          	addi	a4,s1,-832 # ccccccc0 <_stack_start+0xcccbccc0>
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1040:	87aa                	mv	a5,a0
    resultkon[0] = 0xccccccc0;
    1042:	c018                	sw	a4,0(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1044:	458d                	li	a1,3
    1046:	874a                	mv	a4,s2
    1048:	34810813          	addi	a6,sp,840
    104c:	1314                	addi	a3,sp,416
    104e:	06500613          	li	a2,101
    1052:	03500513          	li	a0,53
    1056:	3999                	jal	cac <ntru_deceypt>
    resultkon[0] = 0xccccccc1;	
    1058:	cc148493          	addi	s1,s1,-831
            resultkon[0] = 0xBABABABA;
 	   
            break;	}
        else{
  //          printf("*OPERATION SUCCCESSFUL*\n");
            resultkon[0] = 0xDEDEDEDE;
    105c:	dedee737          	lui	a4,0xdedee
    resultkon[0] = 0xccccccc1;	
    1060:	c004                	sw	s1,0(s0)
    1062:	4781                	li	a5,0
            resultkon[0] = 0xDEDEDEDE;
    1064:	ede70713          	addi	a4,a4,-290 # dededede <_stack_start+0xdedddede>
    for(i = 0; i < 32; ++i){
    1068:	08000593          	li	a1,128
        if(!(message[i] == Dec_Message[i])){
    106c:	0070                	addi	a2,sp,12
    106e:	00f506b3          	add	a3,a0,a5
    1072:	963e                	add	a2,a2,a5
    1074:	4210                	lw	a2,0(a2)
    1076:	4294                	lw	a3,0(a3)
    1078:	02d60363          	beq	a2,a3,109e <main+0x12e>
            resultkon[0] = 0xBABABABA;
    107c:	babac7b7          	lui	a5,0xbabac
    1080:	aba78793          	addi	a5,a5,-1350 # babababa <_stack_start+0xbab9baba>
    1084:	c01c                	sw	a5,0(s0)
		}
    }
			

    return 0;
}
    1086:	42c12083          	lw	ra,1068(sp)
    108a:	42812403          	lw	s0,1064(sp)
    108e:	42412483          	lw	s1,1060(sp)
    1092:	42012903          	lw	s2,1056(sp)
    1096:	4501                	li	a0,0
    1098:	43010113          	addi	sp,sp,1072
    109c:	8082                	ret
            resultkon[0] = 0xDEDEDEDE;
    109e:	c018                	sw	a4,0(s0)
    for(i = 0; i < 32; ++i){
    10a0:	0791                	addi	a5,a5,4
    10a2:	fcb795e3          	bne	a5,a1,106c <main+0xfc>
    10a6:	b7c5                	j	1086 <main+0x116>

000010a8 <__CTOR_LIST__>:
	...

000010b0 <__CTOR_END__>:
	...

Disassembly of section .rodata:

000010b8 <.rodata>:
    10b8:	0001                	nop
    10ba:	0000                	unimp
    10bc:	ffff                	0xffff
    10be:	ffff                	0xffff
    10c0:	0000                	unimp
    10c2:	0000                	unimp
    10c4:	0001                	nop
    10c6:	0000                	unimp
    10c8:	ffff                	0xffff
    10ca:	ffff                	0xffff
    10cc:	0001                	nop
    10ce:	0000                	unimp
    10d0:	ffff                	0xffff
    10d2:	ffff                	0xffff
    10d4:	0000                	unimp
    10d6:	0000                	unimp
    10d8:	0001                	nop
    10da:	0000                	unimp
    10dc:	0001                	nop
    10de:	0000                	unimp
    10e0:	0000                	unimp
    10e2:	0000                	unimp
    10e4:	ffff                	0xffff
    10e6:	ffff                	0xffff
    10e8:	0001                	nop
    10ea:	0000                	unimp
    10ec:	ffff                	0xffff
    10ee:	ffff                	0xffff
    10f0:	0001                	nop
    10f2:	0000                	unimp
    10f4:	0000                	unimp
    10f6:	0000                	unimp
    10f8:	0001                	nop
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	0000                	unimp
    1100:	0000                	unimp
    1102:	0000                	unimp
    1104:	ffff                	0xffff
    1106:	ffff                	0xffff
    1108:	0001                	nop
    110a:	0000                	unimp
    110c:	ffff                	0xffff
    110e:	ffff                	0xffff
    1110:	0001                	nop
    1112:	0000                	unimp
    1114:	0000                	unimp
    1116:	0000                	unimp
    1118:	0001                	nop
    111a:	0000                	unimp
    111c:	0001                	nop
    111e:	0000                	unimp
    1120:	0000                	unimp
    1122:	0000                	unimp
    1124:	0001                	nop
    1126:	0000                	unimp
    1128:	ffff                	0xffff
    112a:	ffff                	0xffff
    112c:	0001                	nop
    112e:	0000                	unimp
    1130:	ffff                	0xffff
    1132:	ffff                	0xffff
    1134:	0000                	unimp
    1136:	0000                	unimp
    1138:	0001                	nop
    113a:	0000                	unimp
    113c:	ffff                	0xffff
    113e:	ffff                	0xffff
    1140:	0000                	unimp
    1142:	0000                	unimp
    1144:	0001                	nop
    1146:	0000                	unimp
    1148:	ffff                	0xffff
    114a:	ffff                	0xffff
    114c:	0001                	nop
    114e:	0000                	unimp
    1150:	ffff                	0xffff
    1152:	ffff                	0xffff
    1154:	0000                	unimp
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	0000                	unimp
    115c:	0001                	nop
    115e:	0000                	unimp
    1160:	0000                	unimp
    1162:	0000                	unimp
    1164:	ffff                	0xffff
    1166:	ffff                	0xffff
    1168:	0001                	nop
    116a:	0000                	unimp
    116c:	ffff                	0xffff
    116e:	ffff                	0xffff
    1170:	0001                	nop
    1172:	0000                	unimp
    1174:	0000                	unimp
    1176:	0000                	unimp
    1178:	0001                	nop
    117a:	0000                	unimp
    117c:	0001                	nop
    117e:	0000                	unimp
    1180:	0002                	c.slli64	zero
    1182:	0000                	unimp
    1184:	0001                	nop
    1186:	0000                	unimp
    1188:	0001                	nop
    118a:	0000                	unimp
    118c:	0001                	nop
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	0000                	unimp
    1194:	0002                	c.slli64	zero
    1196:	0000                	unimp
    1198:	0001                	nop
    119a:	0000                	unimp
    119c:	0001                	nop
    119e:	0000                	unimp
    11a0:	0000                	unimp
    11a2:	0000                	unimp
    11a4:	0001                	nop
    11a6:	0000                	unimp
    11a8:	0001                	nop
    11aa:	0000                	unimp
    11ac:	0002                	c.slli64	zero
    11ae:	0000                	unimp
    11b0:	0001                	nop
    11b2:	0000                	unimp
    11b4:	0000                	unimp
    11b6:	0000                	unimp
    11b8:	0001                	nop
    11ba:	0000                	unimp
    11bc:	0002                	c.slli64	zero
    11be:	0000                	unimp
    11c0:	0000                	unimp
    11c2:	0000                	unimp
    11c4:	0001                	nop
    11c6:	0000                	unimp
    11c8:	0001                	nop
    11ca:	0000                	unimp
    11cc:	0001                	nop
    11ce:	0000                	unimp
    11d0:	0001                	nop
    11d2:	0000                	unimp
    11d4:	0000                	unimp
    11d6:	0000                	unimp
    11d8:	0001                	nop
    11da:	0000                	unimp
    11dc:	0001                	nop
    11de:	0000                	unimp
    11e0:	0000                	unimp
    11e2:	0000                	unimp
    11e4:	0002                	c.slli64	zero
    11e6:	0000                	unimp
    11e8:	0001                	nop
    11ea:	0000                	unimp
    11ec:	0002                	c.slli64	zero
    11ee:	0000                	unimp
    11f0:	0001                	nop
    11f2:	0000                	unimp
    11f4:	0000                	unimp
    11f6:	0000                	unimp
    11f8:	0001                	nop
    11fa:	0000                	unimp
    11fc:	0001                	nop
    11fe:	0000                	unimp
    1200:	0002                	c.slli64	zero
    1202:	0000                	unimp
    1204:	0001                	nop
    1206:	0000                	unimp
    1208:	0001                	nop
    120a:	0000                	unimp
    120c:	0001                	nop
    120e:	0000                	unimp
    1210:	0001                	nop
    1212:	0000                	unimp
    1214:	0002                	c.slli64	zero
    1216:	0000                	unimp
    1218:	0001                	nop
    121a:	0000                	unimp
    121c:	0001                	nop
    121e:	0000                	unimp
    1220:	0002                	c.slli64	zero
    1222:	0000                	unimp
    1224:	0001                	nop
    1226:	0000                	unimp
    1228:	0001                	nop
    122a:	0000                	unimp
    122c:	0001                	nop
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	0000                	unimp
    1234:	0002                	c.slli64	zero
	...

Disassembly of section .sdata:

00001238 <resultkon>:
volatile int resultkon[1]={0XBEBEBEBE};
    1238:	bebe                	fsd	fa5,376(sp)
    123a:	bebe                	fsd	fa5,376(sp)

Disassembly of section .bss:

0000123c <_bss_start>:
	...

00001494 <product2>:
	...

000016ec <result>:
	...

00001944 <ti_2>:
	...

00001ad4 <random_keys>:
	...

Disassembly of section .stack:

0000c000 <_stack-0x2000>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
  .endr
       0:	00001b0b          	0x1b0b
       4:	0004                	0x4
       6:	0000                	unimp
       8:	0000                	unimp
       a:	0104                	addi	s1,sp,128
       c:	05c4                	addi	s1,sp,708
       e:	0000                	unimp
      10:	5e0c                	lw	a1,56(a2)
      12:	22000003          	lb	zero,544(zero) # 220 <polymult+0x144>
      16:	0001                	nop
	...
      24:	0200                	addi	s0,sp,256
      26:	0601                	addi	a2,a2,0
      28:	0454                	addi	a3,sp,516
      2a:	0000                	unimp
      2c:	0102                	c.slli64	sp
      2e:	5208                	lw	a0,32(a2)
      30:	0004                	0x4
      32:	0200                	addi	s0,sp,256
      34:	0502                	c.slli64	a0
      36:	00000473          	0x473
      3a:	0202                	c.slli64	tp
      3c:	0002ef07          	0x2ef07
      40:	0200                	addi	s0,sp,256
      42:	0504                	addi	s1,sp,640
      44:	00fd                	addi	ra,ra,31
      46:	0000                	unimp
      48:	0402                	c.slli64	s0
      4a:	00007a07          	0x7a07
      4e:	0200                	addi	s0,sp,256
      50:	0508                	addi	a0,sp,640
      52:	00f8                	addi	a4,sp,76
      54:	0000                	unimp
      56:	0802                	c.slli64	a6
      58:	00007507          	0x7507
      5c:	0300                	addi	s0,sp,384
      5e:	0504                	addi	s1,sp,640
      60:	6e69                	lui	t3,0x1a
      62:	0074                	addi	a3,sp,12
      64:	5d04                	lw	s1,56(a0)
      66:	0000                	unimp
      68:	0200                	addi	s0,sp,256
      6a:	0704                	addi	s1,sp,896
      6c:	007f                	0x7f
      6e:	0000                	unimp
      70:	1002                	c.slli	zero,0x20
      72:	ab04                	fsd	fs1,16(a4)
      74:	05000003          	lb	zero,80(zero) # 50 <__DYNAMIC+0x50>
      78:	0332                	slli	t1,t1,0xc
      7a:	0000                	unimp
  jal x0, default_exc_handler
      7c:	5e02                	lw	t3,32(sp)
      7e:	1701                	addi	a4,a4,-32
  jal x0, reset_handler
      80:	0069                	c.nop	26
      82:	0000                	unimp
  jal x0, default_exc_handler
      84:	0606                	slli	a2,a2,0x1
      86:	0004                	0x4
  jal x0, default_exc_handler
      88:	0300                	addi	s0,sp,384
      8a:	0e2e                	slli	t3,t3,0xb
    asm volatile(
      8c:	0041                	c.nop	16
      8e:	0000                	unimp
}
      90:	4606                	lw	a2,64(sp)
    for(i=0;i<(length/3);i++) {
      92:	0005                	c.nop	1
      94:	0300                	addi	s0,sp,384
      96:	0e74                	addi	a3,sp,796
      98:	0041                	c.nop	16
      9a:	0000                	unimp
      9c:	6406                	flw	fs0,64(sp)
      9e:	0006                	c.slli	zero,0x1
}
      a0:	0300                	addi	s0,sp,384
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	005d1793          	slli	a5,s10,0x5
    asm volatile(
      a6:	0000                	unimp
      a8:	a5030407          	0xa5030407
      ac:	0000ca03          	lbu	s4,0(ra)
    for(i=0;i<(length/3);i++) {
      b0:	0800                	addi	s0,sp,16
      b2:	032c                	addi	a1,sp,392
    asm volatile(
      b4:	0000                	unimp
      b6:	770ca703          	lw	a4,1904(s9)
    for(i=0;i<(length/3);i++) {
      ba:	0000                	unimp
      bc:	0800                	addi	s0,sp,16
      be:	00000253          	fadd.s	ft4,ft0,ft0,rne
      c2:	ca13a803          	lw	a6,-863(t2)
      c6:	0000                	unimp
}
      c8:	0000                	unimp
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	2c09                	jal	2dc <polymult+0x200>
      cc:	0000                	unimp
    asm volatile(
      ce:	da00                	sw	s0,48(a2)
      d0:	0000                	unimp
      d2:	0a00                	addi	s0,sp,272
      d4:	0069                	c.nop	26
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	080b0003          	lb	zero,128(s6)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      dc:	fe09a203          	lw	tp,-32(s3)
      e0:	0000                	unimp
      e2:	0c00                	addi	s0,sp,528
    int line[size_b][size_a + size_b];
      e4:	0530                	addi	a2,sp,648
      e6:	0000                	unimp
      e8:	5d07a403          	lw	s0,1488(a5)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ec:	0000                	unimp
    int line[size_b][size_a + size_b];
      ee:	0000                	unimp
      f0:	380c                	fld	fa1,48(s0)
      f2:	0005                	c.nop	1
      f4:	0300                	addi	s0,sp,384
      f6:	05a9                	addi	a1,a1,10
      f8:	00a8                	addi	a0,sp,72
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fa:	0000                	unimp
      fc:	0004                	0x4
      fe:	a306                	fsd	ft1,384(sp)
     100:	0004                	0x4
     102:	0300                	addi	s0,sp,384
     104:	03aa                	slli	t2,t2,0xa
     106:	00da                	slli	ra,ra,0x16
     108:	0000                	unimp
     10a:	040d                	addi	s0,s0,3
     10c:	9706                	add	a4,a4,ra
     10e:	0005                	c.nop	1
     110:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     112:	1916                	slli	s2,s2,0x25
    int pola[size_a];
     114:	0048                	addi	a0,sp,4
     116:	0000                	unimp
    int line[size_b][size_a + size_b];
     118:	3606                	fld	fa2,96(sp)
    int pola[size_a];
     11a:	0004                	0x4
    int line[size_b][size_a + size_b];
     11c:	0500                	addi	s0,sp,640
     11e:	0d0c                	addi	a1,sp,656
    int pola[size_a];
     120:	005d                	c.nop	23
    int line[size_b][size_a + size_b];
     122:	0000                	unimp
    int pola[size_a];
     124:	0b06                	slli	s6,s6,0x1
     126:	0002                	c.slli64	zero
    int polb[size_b];
     128:	0400                	addi	s0,sp,512
     12a:	01181b23          	sh	a7,22(a6)
    int pola[size_a];
     12e:	0000                	unimp
    int polb[size_b];
     130:	1c0e                	slli	s8,s8,0x23
     132:	0002                	c.slli64	zero
            line[i][j] = 0;
     134:	1800                	addi	s0,sp,48
     136:	3404                	fld	fs1,40(s0)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	8a08                	0x8a08
     13a:	0001                	nop
    int pola[size_a];
     13c:	0c00                	addi	s0,sp,528
     13e:	04c4                	addi	s1,sp,580
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     140:	0000                	unimp
    int line[size_b][size_a + size_b];
     142:	3604                	fld	fs1,40(a2)
     144:	00018a13          	mv	s4,gp
            line[i][j] = 0;
     148:	0000                	unimp
     14a:	006b5f0f          	0x6b5f0f
    for (i = 0; i < size_b; ++i){
     14e:	3704                	fld	fs1,40(a4)
     150:	00005d07          	0x5d07
            product[j] = 0;
     154:	0400                	addi	s0,sp,512
     156:	0c0c                	addi	a1,sp,528
     158:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     15a:	0400                	addi	s0,sp,512
     15c:	005d0b37          	lui	s6,0x5d0
    array_equ(pola,a,size_a);
     160:	0000                	unimp
     162:	0c08                	addi	a0,sp,528
     164:	0205                	addi	tp,tp,1
     166:	0000                	unimp
     168:	3704                	fld	fs1,40(a4)
     16a:	5d14                	lw	a3,56(a0)
     16c:	0000                	unimp
    for (i = 0; i < size_a; ++i){
     16e:	0c00                	addi	s0,sp,528
     170:	380c                	fld	fa1,48(s0)
     172:	0006                	c.slli	zero,0x1
     174:	0400                	addi	s0,sp,512
     176:	005d1b37          	lui	s6,0x5d1
     17a:	0000                	unimp
     17c:	0f10                	addi	a2,sp,912
    array_equ(polb,b,size_b);
     17e:	785f 0400 0b38      	0xb380400785f
     184:	0190                	addi	a2,sp,192
   for (i = 0; i < size_b; ++i){
     186:	0000                	unimp
     188:	0014                	0x14
     18a:	0410                	addi	a2,sp,512
     18c:	0130                	addi	a2,sp,136
    if(star_mult == 1){
     18e:	0000                	unimp
     190:	0c09                	addi	s8,s8,2
     192:	0001                	nop
     194:	a000                	fsd	fs0,0(s0)
     196:	0001                	nop
     198:	0a00                	addi	s0,sp,272
     19a:	0069                	c.nop	26
     19c:	0000                	unimp
     19e:	0000                	unimp
     1a0:	430e                	lw	t1,192(sp)
        for (j = size_b -1; j >= 0; j = j-1){
     1a2:	0002                	c.slli64	zero
     1a4:	2400                	fld	fs0,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	3c04                	fld	fs1,56(s0)
     1a8:	2308                	fld	fa0,0(a4)
            product[j] = 0;
     1aa:	0002                	c.slli64	zero
     1ac:	0c00                	addi	s0,sp,528
     1ae:	000000ef          	jal	ra,1ae <polymult+0xd2>
            line[i][j] = 0;
     1b2:	3e04                	fld	fs1,56(a2)
            product[j] = 0;
     1b4:	5d09                	li	s10,-30
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	0000                	unimp
     1ba:	550c                	lw	a1,40(a0)
     1bc:	0005                	c.nop	1
     1be:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     1c0:	005d093f 0c040000 	0xc040000005d093f
        for(j = 0; j < size_a + size_b -1; ++j){
     1c8:	0150                	addi	a2,sp,132
     1ca:	0000                	unimp
            pola[i] = pola[i] + mod;
     1cc:	4004                	lw	s1,0(s0)
     1ce:	5d09                	li	s10,-30
        while (pola[i] < 0){
     1d0:	0000                	unimp
     1d2:	0800                	addi	s0,sp,16
     1d4:	e00c                	fsw	fa1,0(s0)
        pola[i] = pola[i] % mod;
     1d6:	0006                	c.slli	zero,0x1
     1d8:	0400                	addi	s0,sp,512
    for (i = 0; i < size_a; ++i){
     1da:	0941                	addi	s2,s2,16
     1dc:	005d                	c.nop	23
        pola[i] = pola[i] % mod;
     1de:	0000                	unimp
     1e0:	0c0c                	addi	a1,sp,528
    for (i = 0; i < size_a; ++i){
     1e2:	03d0                	addi	a2,sp,452
            polb[i] = polb[i] + mod;
     1e4:	0000                	unimp
     1e6:	4204                	lw	s1,0(a2)
        while (polb[i] < 0){
     1e8:	5d09                	li	s10,-30
     1ea:	0000                	unimp
     1ec:	1000                	addi	s0,sp,32
        polb[i] = polb[i] % mod;
     1ee:	880c                	0x880c
     1f0:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
   for (i = 0; i < size_b; ++i){
     1f4:	005d0943          	fmadd.s	fs2,fs10,ft5,ft0,rne
        polb[i] = polb[i] % mod;
     1f8:	0000                	unimp
   for (i = 0; i < size_b; ++i){
     1fa:	0c14                	addi	a3,sp,528
    if(star_mult == 1){
     1fc:	063d                	addi	a2,a2,15
        for (j = size_b -1; j >= 0; j = j-1){
     1fe:	0000                	unimp
     200:	4404                	lw	s1,8(s0)
        for(j = 0; j < size_a + size_b -1; ++j){
     202:	5d09                	li	s10,-30
    for (i = 0; i < size_b; ++i){
     204:	0000                	unimp
     206:	1800                	addi	s0,sp,48
     208:	7d0c                	flw	fa1,56(a0)
     20a:	0004                	0x4
     20c:	0400                	addi	s0,sp,512
     20e:	0945                	addi	s2,s2,17
     210:	005d                	c.nop	23
    for(j = 0; j < size_a + size_b -1; ++j){
     212:	0000                	unimp
     214:	0c1c                	addi	a5,sp,528
     216:	06a2                	slli	a3,a3,0x8
    for(j = 0; j < size_a + size_b -1; ++j){
     218:	0000                	unimp
     21a:	4604                	lw	s1,8(a2)
     21c:	5d09                	li	s10,-30
}
     21e:	0000                	unimp
     220:	2000                	fld	fs0,0(s0)
     222:	1100                	addi	s0,sp,160
     224:	015f 0000 0108      	0x1080000015f
     22a:	4f04                	lw	s1,24(a4)
     22c:	6808                	flw	fa0,16(s0)
     22e:	0002                	c.slli64	zero
     230:	0c00                	addi	s0,sp,528
     232:	000001eb          	0x1eb
     236:	5004                	lw	s1,32(s0)
     238:	680a                	flw	fa6,128(sp)
     23a:	0002                	c.slli64	zero
     23c:	0000                	unimp
     23e:	000c                	0xc
     240:	0000                	unimp
     242:	0400                	addi	s0,sp,512
     244:	0951                	addi	s2,s2,20
     246:	0268                	addi	a0,sp,268
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	0000                	unimp
     24a:	1280                	addi	s0,sp,352
     24c:	0580                	addi	s0,sp,704
     24e:	0000                	unimp
     250:	5304                	lw	s1,32(a4)
     252:	0c0a                	slli	s8,s8,0x2
     254:	0001                	nop
     256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	1201                	addi	tp,tp,-32
                line[size_b-1-j][k] = pola[k]*polb[j];
     25a:	018e                	slli	gp,gp,0x3
     25c:	0000                	unimp
     25e:	5604                	lw	s1,40(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	0c0a                	slli	s8,s8,0x2
     262:	0001                	nop
        for (j = size_b -1; j >= 0; j = j-1){
     264:	0400                	addi	s0,sp,512
     266:	0001                	nop
     268:	0a09                	addi	s4,s4,2
     26a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     26c:	7800                	flw	fs0,48(s0)
     26e:	0002                	c.slli64	zero
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     270:	0a00                	addi	s0,sp,272
     272:	0069                	c.nop	26
     274:	0000                	unimp
     276:	001f e911 0003      	0x3e911001f
     27c:	9000                	0x9000
     27e:	0401                	addi	s0,s0,0
            for (k = size_a-1; k >= 0; k = k-1 ){
     280:	0862                	slli	a6,a6,0x18
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     282:	000002bb          	0x2bb
     286:	c40c                	sw	a1,8(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0004                	0x4
     28a:	0400                	addi	s0,sp,512
        for (j = size_b -1; j >= 0; j = j-1){
     28c:	02bb1263          	bne	s6,a1,2b0 <polymult+0x1d4>
     290:	0000                	unimp
     292:	0c00                	addi	s0,sp,528
            line[i][j] = line[i][j] % mod;
     294:	04dc                	addi	a5,sp,580
        for(j = 0; j < size_a + size_b -1; ++j){
     296:	0000                	unimp
     298:	6404                	flw	fs1,8(s0)
            line[i][j] = line[i][j] % mod;
     29a:	5d06                	lw	s10,96(sp)
     29c:	0000                	unimp
     29e:	0400                	addi	s0,sp,512
     2a0:	000c                	0xc
        for(j = 0; j < size_a + size_b -1; ++j){
     2a2:	0002                	c.slli64	zero
     2a4:	0400                	addi	s0,sp,512
    for (i = 0; i < size_b; ++i){
     2a6:	0966                	slli	s2,s2,0x19
     2a8:	02c1                	addi	t0,t0,16
     2aa:	0000                	unimp
     2ac:	0c08                	addi	a0,sp,528
        for(j = 0; j < size_a + size_b -1; ++j){
     2ae:	015f 0000 6704      	0x67040000015f
            product[j] += line[i][j];
     2b4:	231e                	fld	ft6,448(sp)
     2b6:	0002                	c.slli64	zero
     2b8:	8800                	0x8800
     2ba:	1000                	addi	s0,sp,32
        for(i = 0; i < size_b; ++i){
     2bc:	7804                	flw	fs1,48(s0)
            product[j] += line[i][j];
     2be:	0002                	c.slli64	zero
     2c0:	0900                	addi	s0,sp,144
     2c2:	02d1                	addi	t0,t0,20
     2c4:	0000                	unimp
     2c6:	02d1                	addi	t0,t0,20
     2c8:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2ca:	690a                	flw	fs2,128(sp)
     2cc:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     2ce:	1f00                	addi	s0,sp,944
     2d0:	1000                	addi	s0,sp,32
     2d2:	d704                	sw	s1,40(a4)
        for(i = 0; i < size_b; ++i){
     2d4:	0002                	c.slli64	zero
     2d6:	1300                	addi	s0,sp,416
        product[j] = product[j] % mod;
     2d8:	870e                	mv	a4,gp
    for(j = 0; j < size_a + size_b -1; ++j){
     2da:	0004                	0x4
     2dc:	0800                	addi	s0,sp,16
        product[j] = product[j] % mod;
     2de:	7a04                	flw	fs1,48(a2)
     2e0:	0008                	0x8
     2e2:	0c000003          	lb	zero,192(zero) # c0 <array_equ+0x6>
    for(j = 0; j < size_a + size_b -1; ++j){
     2e6:	011c                	addi	a5,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2e8:	0000                	unimp
    int line[size_b][size_a + size_b];
     2ea:	7b04                	flw	fs1,48(a4)
     2ec:	0011                	c.nop	4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	00000003          	lb	zero,0(zero) # 0 <__DYNAMIC>
     2f2:	110c                	addi	a1,sp,160
     2f4:	0000                	unimp
     2f6:	0400                	addi	s0,sp,512
    int line[size_b][size_a + size_b];
     2f8:	067c                	addi	a5,sp,780
     2fa:	005d                	c.nop	23
     2fc:	0000                	unimp
     2fe:	0004                	0x4
     300:	0410                	addi	a2,sp,512
     302:	002c                	addi	a1,sp,8
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     304:	0000                	unimp
     306:	ae0e                	fsd	ft3,280(sp)
     308:	0004                	0x4
     30a:	6800                	flw	fs0,16(s0)
     30c:	ba04                	fsd	fs1,48(a2)
     30e:	4908                	lw	a0,16(a0)
     310:	0004                	0x4
     312:	0f00                	addi	s0,sp,912
     314:	705f 0400 12bb      	0x12bb0400705f
     31a:	0300                	addi	s0,sp,384
    int line[size_b][size_a + size_b];
     31c:	0000                	unimp
     31e:	0f00                	addi	s0,sp,912
     320:	725f 0400 07bc      	0x7bc0400725f
    int pola[size_a];
     326:	005d                	c.nop	23
     328:	0000                	unimp
    int line[size_b][size_a + size_b];
     32a:	0f04                	addi	s1,sp,912
    int pola[size_a];
     32c:	775f 0400 07bd      	0x7bd0400775f
    int polb[size_b];
     332:	005d                	c.nop	23
     334:	0000                	unimp
    int pola[size_a];
     336:	0c08                	addi	a0,sp,528
    int polb[size_b];
     338:	00000187          	0x187
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	be04                	fsd	fs1,56(a2)
     33e:	3309                	jal	40 <__DYNAMIC+0x40>
    int line[size_b][size_a + size_b];
     340:	0000                	unimp
     342:	0c00                	addi	s0,sp,528
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     344:	820c                	0x820c
    int pola[size_a];
     346:	0002                	c.slli64	zero
     348:	0400                	addi	s0,sp,512
    int polb[size_b];
     34a:	003309bf 0f0e0000 	0xf0e0000003309bf
            product2[j] = 0;
     352:	625f 0066 c004      	0xc0040066625f
     358:	d811                	beqz	s0,26c <polymult+0x190>
    for (i = 0; i < size_b; ++i){
     35a:	0002                	c.slli64	zero
     35c:	1000                	addi	s0,sp,32
    array_equ(pola,a,size_a);
     35e:	980c                	0x980c
     360:	0000                	unimp
     362:	0400                	addi	s0,sp,512
     364:	07c1                	addi	a5,a5,16
     366:	005d                	c.nop	23
     368:	0000                	unimp
    array_equ(polb,b,size_b);
     36a:	0c18                	addi	a4,sp,528
     36c:	016d                	addi	sp,sp,27
     36e:	0000                	unimp
     370:	c804                	sw	s1,16(s0)
     372:	0a0a                	slli	s4,s4,0x2
     374:	0001                	nop
    if(star_mult == 1){
     376:	1c00                	addi	s0,sp,560
     378:	330c                	fld	fa1,32(a4)
     37a:	0002                	c.slli64	zero
     37c:	0400                	addi	s0,sp,512
     37e:	1dca                	slli	s11,s11,0x32
     380:	05cd                	addi	a1,a1,19
     382:	0000                	unimp
     384:	0c20                	addi	s0,sp,536
     386:	0381                	addi	t2,t2,0
        for (j = size_b -1; j >= 0; j = j-1){
     388:	0000                	unimp
     38a:	cc04                	sw	s1,24(s0)
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	f71d                	bnez	a4,2ba <polymult+0x1de>
     38e:	0005                	c.nop	1
            product2[j] = 0;
     390:	2400                	fld	fs0,8(s0)
     392:	400c                	lw	a1,0(s0)
     394:	0005                	c.nop	1
            line[i][j] = 0;
     396:	0400                	addi	s0,sp,512
     398:	061b0dcf          	fnmadd.q	fs11,fs6,ft1,ft0,rne
            product2[j] = 0;
     39c:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     39e:	0c28                	addi	a0,sp,536
     3a0:	06bc                	addi	a5,sp,840
     3a2:	0000                	unimp
     3a4:	d004                	sw	s1,32(s0)
    for (i = 0; i < size_b; ++i){
     3a6:	3509                	jal	1a8 <polymult+0xcc>
     3a8:	0006                	c.slli	zero,0x1
     3aa:	2c00                	fld	fs0,24(s0)
     3ac:	62755f0f          	0x62755f0f
        for(j = 0; j < size_a + size_b -1; ++j){
     3b0:	0400                	addi	s0,sp,512
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b2:	02d811d3          	fadd.d	ft3,fa6,fa3,rtz
     3b6:	0000                	unimp
     3b8:	0f30                	addi	a2,sp,920
     3ba:	755f 0070 d404      	0xd4040070755f
     3c0:	0012                	c.slli	zero,0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	38000003          	lb	zero,896(zero) # 380 <polymult2+0x98>
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c6:	72755f0f          	0x72755f0f
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0400                	addi	s0,sp,512
     3cc:	07d5                	addi	a5,a5,21
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	005d                	c.nop	23
     3d0:	0000                	unimp
     3d2:	0c3c                	addi	a5,sp,536
     3d4:	0116                	slli	sp,sp,0x5
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	d804                	sw	s1,48(s0)
        array_add(product2,line[i],size_a+size_b-1);
     3da:	3b11                	jal	ee <polymult+0x12>
     3dc:	0006                	c.slli	zero,0x1
     3de:	4000                	lw	s0,0(s0)
     3e0:	870c                	0x870c
    for(i=0;i<size_b;++i){
     3e2:	0006                	c.slli	zero,0x1
     3e4:	0400                	addi	s0,sp,512
}
     3e6:	11d9                	addi	gp,gp,-10
     3e8:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
     3ec:	6c5f0f43          	0x6c5f0f43
     3f0:	0062                	c.slli	zero,0x18
     3f2:	dc04                	sw	s1,56(s0)
     3f4:	d811                	beqz	s0,308 <polymult2+0x20>
     3f6:	0002                	c.slli64	zero
     3f8:	4400                	lw	s0,8(s0)
     3fa:	9d0c                	0x9d0c
     3fc:	0001                	nop
     3fe:	0400                	addi	s0,sp,512
     400:	07df 005d 0000      	0x5d07df
     406:	0c4c                	addi	a1,sp,532
     408:	01c4                	addi	s1,sp,196
     40a:	0000                	unimp
     40c:	e004                	fsw	fs1,0(s0)
     40e:	840a                	mv	s0,sp
            for (k = size_a-1; k >= 0; k = k-1 ){
     410:	0000                	unimp
     412:	5000                	lw	s0,32(s0)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     414:	340c                	fld	fa1,40(s0)
     416:	0000                	unimp
     418:	0400                	addi	s0,sp,512
     41a:	046712e3          	bne	a4,t1,c5e <ntru_encyrpt+0x3a>
     41e:	0000                	unimp
     420:	0c54                	addi	a3,sp,532
     422:	0358                	addi	a4,sp,388
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     426:	e704                	fsw	fs1,8(a4)
     428:	240c                	fld	fa1,8(s0)
     42a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     42c:	5800                	lw	s0,48(s0)
     42e:	b60c                	fsd	fa1,40(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     430:	0004                	0x4
     432:	0400                	addi	s0,sp,512
     434:	0ee9                	addi	t4,t4,26
     436:	00fe                	slli	ra,ra,0x1f
        array_add(product2,line[i],size_a+size_b-1);
     438:	0000                	unimp
     43a:	0c5c                	addi	a5,sp,532
     43c:	048e                	slli	s1,s1,0x3
     43e:	0000                	unimp
    for(i=0;i<size_b;++i){
     440:	ea04                	fsw	fs1,16(a2)
     442:	5d09                	li	s10,-30
     444:	0000                	unimp
    int v[size_N];
     446:	6400                	flw	fs0,8(s0)
     448:	1400                	addi	s0,sp,544
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44a:	009c                	addi	a5,sp,64
    int v[size_N];
     44c:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     452:	6715                	lui	a4,0x5
     454:	0004                	0x4
     456:	1500                	addi	s0,sp,672
     458:	010a                	slli	sp,sp,0x2
     45a:	0000                	unimp
     45c:	bb15                	j	190 <polymult+0xb4>
     45e:	0005                	c.nop	1
     460:	1500                	addi	s0,sp,672
     462:	005d                	c.nop	23
     464:	0000                	unimp
    int v[size_N];
     466:	1000                	addi	s0,sp,32
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	7204                	flw	fs1,32(a2)
     46a:	0004                	0x4
    int v[size_N];
     46c:	1600                	addi	s0,sp,800
     46e:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
    int q[size_N];
     472:	00051417          	auipc	s0,0x51
     476:	2800                	fld	fs0,16(s0)
    int num_temp[size_N];
     478:	0404                	addi	s1,sp,512
     47a:	0265                	addi	tp,tp,25
    int denum_temp[size_D];
     47c:	bb08                	fsd	fa0,48(a4)
     47e:	0005                	c.nop	1
     480:	1800                	addi	s0,sp,48
    int num_temp[size_N];
     482:	046c                	addi	a1,sp,524
    int denum_temp[size_D];
     484:	0000                	unimp
     486:	6704                	flw	fs1,8(a4)
     488:	0702                	c.slli64	a4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     48a:	005d                	c.nop	23
     48c:	0000                	unimp
    int v[size_N];
     48e:	1800                	addi	s0,sp,48
     490:	0196                	slli	gp,gp,0x5
    array_equ(num_temp,num,size_N);
     492:	0000                	unimp
     494:	6c04                	flw	fs1,24(s0)
     496:	0b02                	c.slli64	s6
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	000006a7          	0x6a7
    int denum_temp[size_D];
     49c:	1804                	addi	s1,sp,48
     49e:	0264                	addi	s1,sp,268
    array_equ(num_temp,num,size_N);
     4a0:	0000                	unimp
    int denum_temp[size_D];
     4a2:	6c04                	flw	fs1,24(s0)
    for (i = 0; i < size_N; ++i){
     4a4:	1402                	slli	s0,s0,0x20
     4a6:	000006a7          	0x6a7
     4aa:	1808                	addi	a0,sp,48
     4ac:	0214                	addi	a3,sp,256
    array_equ(denum_temp,denum,size_D);
     4ae:	0000                	unimp
     4b0:	6c04                	flw	fs1,24(s0)
     4b2:	1e02                	slli	t3,t3,0x20
     4b4:	000006a7          	0x6a7
    for (i = 0; i < size_D; ++i) {
     4b8:	180c                	addi	a1,sp,48
     4ba:	000004d7          	0x4d7
    for (i = 0; i < size_N; ++i){
     4be:	6e04                	flw	fs1,24(a2)
     4c0:	0802                	c.slli64	a6
     4c2:	005d                	c.nop	23
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0000                	unimp
     4c6:	1810                	addi	a2,sp,48
     4c8:	001f 0000 6f04      	0x6f040000001f
     4ce:	0802                	c.slli64	a6
    for (i = 0; i < size_N; ++i){
     4d0:	000008a7          	0x8a7
        if ( (b_N*u)%mod == 1 )
     4d4:	1814                	addi	a3,sp,48
    for (u = 0; u < mod; ++u){
     4d6:	000004f3          	0x4f3
     4da:	7204                	flw	fs1,32(a2)
     4dc:	0702                	c.slli64	a4
            num_temp[i] = num_temp[i] + mod;
     4de:	005d                	c.nop	23
     4e0:	0000                	unimp
        while (num_temp[i] < 0) {
     4e2:	1830                	addi	a2,sp,56
     4e4:	04e1                	addi	s1,s1,24
     4e6:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     4e8:	7304                	flw	fs1,32(a4)
     4ea:	1602                	slli	a2,a2,0x20
    for (i = 0; i < size_N; ++i){
     4ec:	08bc                	addi	a5,sp,88
     4ee:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     4f0:	1834                	addi	a3,sp,56
     4f2:	000003fb          	0x3fb
            denum_temp[i] = denum_temp[i] + mod;
     4f6:	7504                	flw	fs1,40(a0)
     4f8:	0702                	c.slli64	a4
        while (denum_temp[i] < 0) {
     4fa:	005d                	c.nop	23
     4fc:	0000                	unimp
     4fe:	1838                	addi	a4,sp,56
        denum_temp[i] = denum_temp[i] % mod;
     500:	04e9                	addi	s1,s1,26
     502:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     504:	7704                	flw	fs1,40(a4)
     506:	0a02                	c.slli64	s4
        denum_temp[i] = denum_temp[i] % mod;
     508:	08cd                	addi	a7,a7,19
     50a:	0000                	unimp
    for (i = 0; i < size_D; ++i) {
     50c:	183c                	addi	a5,sp,56
        q[i] = 0;
     50e:	0324                	addi	s1,sp,392
     510:	0000                	unimp
     512:	7a04                	flw	fs1,48(a2)
     514:	1302                	slli	t1,t1,0x20
        v[i] = 0;
     516:	018a                	slli	gp,gp,0x2
        q[i] = 0;
     518:	0000                	unimp
     51a:	1840                	addi	s0,sp,52
        v[i] = 0;
     51c:	0239                	addi	tp,tp,14
     51e:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     520:	7b04                	flw	fs1,48(a4)
     522:	0702                	c.slli64	a4
        if( denum_temp[i] != 0 )
     524:	005d                	c.nop	23
    for (i = size_D-1; i >= 0; i = i-1){
     526:	0000                	unimp
     528:	1844                	addi	s1,sp,52
        if ( (b_N*u)%mod == 1 )
     52a:	06d6                	slli	a3,a3,0x15
     52c:	0000                	unimp
     52e:	7c04                	flw	fs1,56(s0)
     530:	1302                	slli	t1,t1,0x20
     532:	018a                	slli	gp,gp,0x2
    for (u = 0; u < mod; ++u){
     534:	0000                	unimp
     536:	1848                	addi	a0,sp,52
        if( num_temp[i] != 0 )
     538:	0422                	slli	s0,s0,0x8
    for (i = size_N-1; i >= 0; i = i-1){
     53a:	0000                	unimp
     53c:	7d04                	flw	fs1,56(a0)
     53e:	1402                	slli	s0,s0,0x20
     540:	000008d3          	fadd.s	fa7,ft0,ft0,rne
     544:	184c                	addi	a1,sp,52
     546:	026c                	addi	a1,sp,268
    while (d >= d2){
     548:	0000                	unimp
     54a:	8004                	0x8004
    array_equ(result,q,size_N);
     54c:	0702                	c.slli64	a4
     54e:	005d                	c.nop	23
     550:	0000                	unimp
     552:	1850                	addi	a2,sp,52
     554:	01bc                	addi	a5,sp,200
     556:	0000                	unimp
     558:	8104                	0x8104
    for(i = size_N; i < (2*size_N); ++i){
     55a:	0902                	c.slli64	s2
     55c:	000005bb          	0x5bb
        result[i] = num_temp[i-size_N];
     560:	1854                	addi	a3,sp,52
     562:	0465                	addi	s0,s0,25
     564:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     566:	a404                	fsd	fs1,8(s0)
     568:	0702                	c.slli64	a4
}
     56a:	0882                	c.slli64	a7
     56c:	0000                	unimp
     56e:	1958                	addi	a4,sp,180
     570:	03e9                	addi	t2,t2,26
     572:	0000                	unimp
     574:	a804                	fsd	fs1,16(s0)
     576:	1302                	slli	t1,t1,0x20
     578:	000002bb          	0x2bb
     57c:	0148                	addi	a0,sp,132
     57e:	0219                	addi	tp,tp,6
     580:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
     584:	02a9                	addi	t0,t0,10
     586:	7812                	flw	fa6,36(sp)
     588:	0002                	c.slli64	zero
     58a:	4c00                	lw	s0,24(s0)
     58c:	1901                	addi	s2,s2,-32
     58e:	067d                	addi	a2,a2,31
     590:	0000                	unimp
     592:	ad04                	fsd	fs1,24(a0)
        v[(d-d2)] = u*r_d;
     594:	0c02                	c.slli64	s8
     596:	08e4                	addi	s1,sp,92
     598:	0000                	unimp
     59a:	02dc                	addi	a5,sp,324
     59c:	7519                	lui	a0,0xfffe6
     59e:	0001                	nop
     5a0:	0400                	addi	s0,sp,512
        for (i = 0; i < size_N; ++i){
     5a2:	02b2                	slli	t0,t0,0xc
     5a4:	6810                	flw	fa2,16(s0)
     5a6:	0006                	c.slli	zero,0x1
     5a8:	e000                	fsw	fs0,0(s0)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5aa:	1902                	slli	s2,s2,0x20
     5ac:	015a                	slli	sp,sp,0x16
     5ae:	0000                	unimp
     5b0:	b404                	fsd	fs1,40(s0)
     5b2:	0a02                	c.slli64	s4
     5b4:	08f0                	addi	a2,sp,92
     5b6:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5b8:	02ec                	addi	a1,sp,332
     5ba:	1000                	addi	s0,sp,32
     5bc:	c104                	sw	s1,0(a0)
     5be:	0005                	c.nop	1
     5c0:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     5c2:	0801                	addi	a6,a6,0
     5c4:	0000045b          	0x45b
     5c8:	c116                	sw	t0,128(sp)
        for (i = 0; i < size_N; ++i){
     5ca:	0005                	c.nop	1
     5cc:	1000                	addi	s0,sp,32
     5ce:	4904                	lw	s1,16(a0)
    array_add(q,v,size_N);
     5d0:	0004                	0x4
     5d2:	1400                	addi	s0,sp,544
     5d4:	009c                	addi	a5,sp,64
     5d6:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     5d8:	05f1                	addi	a1,a1,28
     5da:	0000                	unimp
     5dc:	6715                	lui	a4,0x5
     5de:	0004                	0x4
        for (i = size_N-1; i >= 0; i = i-1){
     5e0:	1500                	addi	s0,sp,672
     5e2:	010a                	slli	sp,sp,0x2
     5e4:	0000                	unimp
     5e6:	f115                	bnez	a0,50a <polydiv+0xc4>
     5e8:	0005                	c.nop	1
     5ea:	1500                	addi	s0,sp,672
     5ec:	005d                	c.nop	23
     5ee:	0000                	unimp
     5f0:	1000                	addi	s0,sp,32
            v[i] = v[i] % mod;
     5f2:	c804                	sw	s1,16(s0)
        for (i = 0; i < size_N; ++i){
     5f4:	0005                	c.nop	1
     5f6:	1000                	addi	s0,sp,32
            v[i] = v[i] % mod;
     5f8:	d304                	sw	s1,32(a4)
     5fa:	0005                	c.nop	1
     5fc:	1400                	addi	s0,sp,544
     5fe:	0090                	addi	a2,sp,64
        for (i = 0; i < size_N; ++i){
     600:	0000                	unimp
                product[i] = product[i] + mod;
     602:	0000061b          	0x61b
            while (product[i] < 0) {
     606:	6715                	lui	a4,0x5
     608:	0004                	0x4
     60a:	1500                	addi	s0,sp,672
            product[i] = product[i] % mod;
     60c:	010a                	slli	sp,sp,0x2
     60e:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     610:	9015                	srli	s0,s0,0x25
     612:	0000                	unimp
            product[i] = product[i] % mod;
     614:	1500                	addi	s0,sp,672
     616:	005d                	c.nop	23
        for (i = 0; i < size_N; ++i){
     618:	0000                	unimp
            num_temp[i] = num_temp[i] - product[i];
     61a:	1000                	addi	s0,sp,32
     61c:	fd04                	fsw	fs1,56(a0)
     61e:	0005                	c.nop	1
     620:	1400                	addi	s0,sp,544
     622:	005d                	c.nop	23
        for (i = 0; i < size_N; ++i){
     624:	0000                	unimp
     626:	0635                	addi	a2,a2,13
            num_temp[i] = num_temp[i] - product[i];
     628:	0000                	unimp
     62a:	6715                	lui	a4,0x5
     62c:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     62e:	1500                	addi	s0,sp,672
                num_temp[i] = num_temp[i] + mod;
     630:	010a                	slli	sp,sp,0x2
     632:	0000                	unimp
            while (num_temp[i] < 0){
     634:	1000                	addi	s0,sp,32
     636:	2104                	fld	fs1,0(a0)
     638:	0006                	c.slli	zero,0x1
            num_temp[i] = num_temp[i] % mod;
     63a:	0900                	addi	s0,sp,144
     63c:	002c                	addi	a1,sp,8
        for (i = 0; i < size_N; ++i){
     63e:	0000                	unimp
     640:	0000064b          	fnmsub.s	fa2,ft0,ft0,ft0,rne
            num_temp[i] = num_temp[i] % mod;
     644:	690a                	flw	fs2,128(sp)
        for (i = 0; i < size_N; ++i){
     646:	0000                	unimp
            q[i] = q[i] % mod;
     648:	0200                	addi	s0,sp,256
        for(i = 0; i < size_N; ++i){
     64a:	0900                	addi	s0,sp,144
     64c:	002c                	addi	a1,sp,8
            q[i] = q[i] % mod;
     64e:	0000                	unimp
     650:	0000065b          	0x65b
     654:	690a                	flw	fs2,128(sp)
        for(i = 0; i < size_N; ++i){
     656:	0000                	unimp
            if( num_temp[i] != 0 )
     658:	0000                	unimp
        for (i = size_N-1; i >= 0; i = i-1){
     65a:	0500                	addi	s0,sp,640
     65c:	049c                	addi	a5,sp,576
            v[i] = 0;
     65e:	0000                	unimp
     660:	2404                	fld	fs1,8(s0)
     662:	1a01                	addi	s4,s4,-32
     664:	0306                	slli	t1,t1,0x1
     666:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     668:	471a                	lw	a4,132(sp)
     66a:	0006                	c.slli	zero,0x1
     66c:	0c00                	addi	s0,sp,528
     66e:	2804                	fld	fs1,16(s0)
        result[i] = num_temp[i-size_N];
     670:	0801                	addi	a6,a6,0
     672:	06a1                	addi	a3,a3,8
     674:	0000                	unimp
     676:	c418                	sw	a4,8(s0)
     678:	0004                	0x4
     67a:	0400                	addi	s0,sp,512
    for(i = size_N; i < (2*size_N); ++i){
     67c:	012a                	slli	sp,sp,0xa
     67e:	a111                	j	a82 <generate_keys+0x152>
     680:	0006                	c.slli	zero,0x1
    int ri_2[size]; // MX-ring poly, a
     682:	0000                	unimp
     684:	c818                	sw	a4,16(s0)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     686:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     688:	0400                	addi	s0,sp,512
     68a:	5d07012b          	0x5d07012b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     68e:	0000                	unimp
     690:	0400                	addi	s0,sp,512
     692:	9618                	0x9618
     694:	0004                	0x4
     696:	0400                	addi	s0,sp,512
     698:	012c                	addi	a1,sp,136
     69a:	0006a70b          	0x6a70b
     69e:	0800                	addi	s0,sp,16
     6a0:	1000                	addi	s0,sp,32
     6a2:	6804                	flw	fs1,16(s0)
     6a4:	0006                	c.slli	zero,0x1
     6a6:	1000                	addi	s0,sp,32
    int ri_2[size]; // MX-ring poly, a
     6a8:	5b04                	lw	s1,48(a4)
     6aa:	0006                	c.slli	zero,0x1
     6ac:	1a00                	addi	s0,sp,304
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6ae:	00000017          	auipc	zero,0x0
     6b2:	040e                	slli	s0,s0,0x3
    int ri[size];
     6b4:	0144                	addi	s1,sp,132
     6b6:	e608                	fsw	fa0,8(a2)
     6b8:	0006                	c.slli	zero,0x1
    int ti_1[size]; // ti_1[0] = 1
     6ba:	1800                	addi	s0,sp,48
     6bc:	0525                	addi	a0,a0,9
     6be:	0000                	unimp
    int ti[size];
     6c0:	4504                	lw	s1,8(a0)
     6c2:	1201                	addi	tp,tp,-32
     6c4:	06e6                	slli	a3,a3,0x19
    int qi_1[size];
     6c6:	0000                	unimp
     6c8:	1800                	addi	s0,sp,48
     6ca:	051f 0000 4604      	0x46040000051f
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	1201                	addi	tp,tp,-32
     6d2:	06e6                	slli	a3,a3,0x19
     6d4:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     6d6:	1806                	slli	a6,a6,0x21
     6d8:	0000003f 12014704 	0x120147040000003f
        ti_2[i] = 0;
     6e0:	003a                	c.slli	zero,0xe
     6e2:	0000                	unimp
     6e4:	000c                	0xc
    for (i = 0; i < size; ++i) {
     6e6:	3a09                	jal	fffffff8 <_stack_start+0xfffefff8>
     6e8:	0000                	unimp
    array_equ(ri_2,polyR,size);
     6ea:	f600                	fsw	fs0,40(a2)
     6ec:	0006                	c.slli	zero,0x1
     6ee:	0a00                	addi	s0,sp,272
     6f0:	0069                	c.nop	26
    array_equ(ri_1,polyf,size);
     6f2:	0000                	unimp
     6f4:	0002                	c.slli64	zero
     6f6:	8504d01b          	0x8504d01b
    ti_1[0] = 1;
     6fa:	0702                	c.slli64	a4
     6fc:	0000080b          	0x80b
        for (i = N + 1; i < (2 * N + 2); ++i) {
     700:	2618                	fld	fa4,8(a2)
     702:	0006                	c.slli	zero,0x1
     704:	0400                	addi	s0,sp,512
     706:	69180287          	0x69180287
        for (i = 0; i < N + 1; ++i) {
     70a:	0000                	unimp
        ti_2[i] = 0;
     70c:	0000                	unimp
     70e:	7318                	flw	fa4,32(a4)
     710:	0005                	c.nop	1
     712:	0400                	addi	s0,sp,512
        ti_1[i] = 0;
     714:	0288                	addi	a0,sp,320
        ti_2[i] = 0;
     716:	bb12                	fsd	ft4,432(sp)
     718:	0005                	c.nop	1
        ti_1[i] = 0;
     71a:	0400                	addi	s0,sp,512
     71c:	1718                	addi	a4,sp,928
    for (i = 0; i < size; ++i) {
     71e:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
                ri_2[i] = ri_2[i] + mod;
     722:	0289                	addi	t0,t0,2
     724:	0b10                	addi	a2,sp,400
            while (ri_2[i] < 0) {
     726:	0008                	0x8
     728:	0800                	addi	s0,sp,16
     72a:	ad18                	fsd	fa4,24(a0)
            ri_2[i] = ri_2[i] % mod;
     72c:	0006                	c.slli	zero,0x1
     72e:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     730:	028a                	slli	t0,t0,0x2
            ri_2[i] = ri_2[i] % mod;
     732:	0001a017          	auipc	zero,0x1a
        for (i = 0; i < N + 1; ++i) {
     736:	2400                	fld	fs0,8(s0)
     738:	2418                	fld	fa4,8(s0)
     73a:	0002                	c.slli64	zero
     73c:	0400                	addi	s0,sp,512
     73e:	5d0f028b          	0x5d0f028b
        for (i = 0; i < N + 1; ++i) {
     742:	0000                	unimp
     744:	4800                	lw	s0,16(s0)
     746:	bf18                	fsd	fa4,56(a4)
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     748:	0004                	0x4
     74a:	0400                	addi	s0,sp,512
     74c:	028c                	addi	a1,sp,320
     74e:	562c                	lw	a1,104(a2)
     750:	0000                	unimp
     752:	5000                	lw	s0,32(s0)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	c318                	sw	a4,0(a4)
     756:	0006                	c.slli	zero,0x1
     758:	0400                	addi	s0,sp,512
     75a:	028d                	addi	t0,t0,3
     75c:	ad1a                	fsd	ft6,152(sp)
     75e:	0006                	c.slli	zero,0x1
     760:	5800                	lw	s0,48(s0)
        for (i = 0; i < N + 1; ++i) {
     762:	ca18                	sw	a4,16(a2)
     764:	0004                	0x4
     766:	0400                	addi	s0,sp,512
     768:	028e                	slli	t0,t0,0x3
     76a:	fe16                	fsw	ft5,60(sp)
        for (i = 0; i < N + 1; ++i) {
     76c:	0000                	unimp
     76e:	6800                	flw	fs0,16(s0)
     770:	c818                	sw	a4,16(s0)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     772:	0006                	c.slli	zero,0x1
     774:	0400                	addi	s0,sp,512
     776:	fe16028f          	0xfe16028f
     77a:	0000                	unimp
     77c:	7000                	flw	fs0,32(s0)
     77e:	e118                	fsw	fa4,0(a0)
    array_equ(qi_1,res1,size);
     780:	0000                	unimp
     782:	0400                	addi	s0,sp,512
     784:	0290                	addi	a2,sp,320
        for (i = 0; i < N + 1; ++i) {
     786:	fe16                	fsw	ft5,60(sp)
     788:	0000                	unimp
     78a:	7800                	flw	fs0,48(s0)
     78c:	6d18                	flw	fa4,24(a0)
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78e:	0006                	c.slli	zero,0x1
     790:	0400                	addi	s0,sp,512
     792:	0291                	addi	t0,t0,4
     794:	1b10                	addi	a2,sp,432
     796:	0008                	0x8
     798:	8000                	0x8000
     79a:	0b18                	addi	a4,sp,400
     79c:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    array_equ(temp,res2,size);
     7a0:	0292                	slli	t0,t0,0x4
     7a2:	2b10                	fld	fa2,16(a4)
        for (i = 0; i < N + 1; ++i) {
     7a4:	0008                	0x8
     7a6:	8800                	0x8800
     7a8:	a418                	fsd	fa4,8(s0)
     7aa:	0005                	c.nop	1
        for (i = 0; i < N + 1; ++i) {
     7ac:	0400                	addi	s0,sp,512
     7ae:	5d0f0293          	addi	t0,t5,1488
     7b2:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     7b4:	a000                	fsd	fs0,0(s0)
     7b6:	dd18                	sw	a4,56(a0)
     7b8:	0001                	nop
array_equ(ri_2,ri_1,size);
     7ba:	0400                	addi	s0,sp,512
     7bc:	0294                	addi	a3,sp,320
     7be:	fe16                	fsw	ft5,60(sp)
     7c0:	0000                	unimp
array_equ(ri_1,ri,size);
     7c2:	a400                	fsd	fs0,8(s0)
     7c4:	d218                	sw	a4,32(a2)
     7c6:	0000                	unimp
     7c8:	0400                	addi	s0,sp,512
array_equ(ti_2,ti_1,size);
     7ca:	0295                	addi	t0,t0,5
     7cc:	fe16                	fsw	ft5,60(sp)
     7ce:	0000                	unimp
     7d0:	ac00                	fsd	fs0,24(s0)
     7d2:	cc18                	sw	a4,24(s0)
     7d4:	0001                	nop
     7d6:	0400                	addi	s0,sp,512
array_equ(ti_1,ti,size);
     7d8:	0296                	slli	t0,t0,0x5
     7da:	fe16                	fsw	ft5,60(sp)
     7dc:	0000                	unimp
     7de:	b400                	fsd	fs0,40(s0)
        controlR = 0;
     7e0:	4418                	lw	a4,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7e2:	0000                	unimp
     7e4:	0400                	addi	s0,sp,512
     7e6:	fe160297          	auipc	t0,0xfe160
    while (controlR != 0) {
     7ea:	0000                	unimp
        for (j = 0; j < mod; ++j) {
     7ec:	bc00                	fsd	fs0,56(s0)
            if (((ri_2[0] * j) % mod) == 1)
     7ee:	5318                	lw	a4,32(a4)
        for (j = 0; j < mod; ++j) {
     7f0:	0000                	unimp
     7f2:	0400                	addi	s0,sp,512
     7f4:	0298                	addi	a4,sp,320
     7f6:	fe16                	fsw	ft5,60(sp)
     7f8:	0000                	unimp
     7fa:	c400                	sw	s0,8(s0)
        for (i = 0; i < N + 1; ++i) {
     7fc:	6a18                	flw	fa4,16(a2)
     7fe:	0004                	0x4
    }
     800:	0400                	addi	s0,sp,512
     802:	0299                	addi	t0,t0,6
     804:	5d08                	lw	a0,56(a0)
     806:	0000                	unimp
     808:	cc00                	sw	s0,24(s0)
     80a:	0900                	addi	s0,sp,144
     80c:	05c1                	addi	a1,a1,16
     80e:	0000                	unimp
     810:	0000081b          	0x81b
     814:	690a                	flw	fs2,128(sp)
     816:	0000                	unimp
     818:	1900                	addi	s0,sp,176
     81a:	0900                	addi	s0,sp,144
     81c:	05c1                	addi	a1,a1,16
     81e:	0000                	unimp
     820:	0000082b          	0x82b
     824:	690a                	flw	fs2,128(sp)
     826:	0000                	unimp
     828:	0700                	addi	s0,sp,896
                ri_1[i] = ri_1[i] + mod;
     82a:	0900                	addi	s0,sp,144
     82c:	05c1                	addi	a1,a1,16
            while (ri_1[i] < 0) {
     82e:	0000                	unimp
     830:	0000083b          	0x83b
            ri_1[i] = ri_1[i] % mod;
     834:	690a                	flw	fs2,128(sp)
     836:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     838:	1700                	addi	s0,sp,928
     83a:	1b00                	addi	s0,sp,432
            ri_1[i] = ri_1[i] % mod;
     83c:	04f0                	addi	a2,sp,588
     83e:	029e                	slli	t0,t0,0x7
        for (i = 0; i < N + 1; ++i) {
     840:	00086207          	0x86207
            ri[i - (N + 1)] = res[i];
     844:	1800                	addi	s0,sp,48
     846:	000003b7          	lui	t2,0x0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     84a:	a104                	fsd	fs1,0(a0)
     84c:	1b02                	slli	s6,s6,0x20
            ri[i - (N + 1)] = res[i];
     84e:	0862                	slli	a6,a6,0x18
     850:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	1800                	addi	s0,sp,48
            temp[i] = ri_2[i] - ri[i];
     854:	03a2                	slli	t2,t2,0x8
     856:	0000                	unimp
     858:	a204                	fsd	fs1,0(a2)
     85a:	1802                	slli	a6,a6,0x20
     85c:	0872                	slli	a6,a6,0x1c
     85e:	0000                	unimp
     860:	0078                	addi	a4,sp,12
     862:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     864:	72000003          	lb	zero,1824(zero) # 720 <ext_euclid+0x9e>
            temp[i] = ri_2[i] - ri[i];
     868:	0008                	0x8
        for (i = 0; i < N + 1; ++i) {
     86a:	0a00                	addi	s0,sp,272
     86c:	0069                	c.nop	26
                temp[i] = temp[i] + mod;
     86e:	0000                	unimp
     870:	001d                	c.nop	7
            while (temp[i] < 0) {
     872:	6909                	lui	s2,0x2
     874:	0000                	unimp
     876:	8200                	0x8200
            temp[i] = temp[i] % mod;
     878:	0008                	0x8
     87a:	0a00                	addi	s0,sp,272
        for (i = 0; i < N + 1; ++i) {
     87c:	0069                	c.nop	26
     87e:	0000                	unimp
            temp[i] = temp[i] % mod;
     880:	001d                	c.nop	7
     882:	f01c                	fsw	fa5,32(s0)
        for (i = 0; i < N + 1; ++i) {
     884:	8304                	0x8304
                qi_1[i] = qi_1[i] + mod;
     886:	0302                	c.slli64	t1
     888:	000008a7          	0x8a7
            while (qi_1[i] < 0) {
     88c:	141d                	addi	s0,s0,-25
     88e:	0005                	c.nop	1
            qi_1[i] = qi_1[i] % mod;
     890:	0400                	addi	s0,sp,512
     892:	029a                	slli	t0,t0,0x6
        for (i = 0; i < N + 1; ++i) {
     894:	0006f60b          	0x6f60b
            qi_1[i] = qi_1[i] % mod;
     898:	1d00                	addi	s0,sp,688
     89a:	068d                	addi	a3,a3,3
        for (i = 0; i < N + 1; ++i) {
     89c:	0000                	unimp
                temp[i] = temp[i] + mod;
     89e:	a304                	fsd	fs1,0(a4)
     8a0:	0b02                	c.slli64	s6
     8a2:	0000083b          	0x83b
            while (temp[i] < 0) {
     8a6:	0900                	addi	s0,sp,144
     8a8:	05c1                	addi	a1,a1,16
     8aa:	0000                	unimp
            temp[i] = temp[i] % mod;
     8ac:	000008b7          	lui	a7,0x0
        for (i = 0; i < N + 1; ++i) {
     8b0:	690a                	flw	fs2,128(sp)
     8b2:	0000                	unimp
            temp[i] = temp[i] % mod;
     8b4:	1800                	addi	s0,sp,48
     8b6:	1e00                	addi	s0,sp,816
        for (i = 0; i < N + 1; ++i) {
     8b8:	00ad                	addi	ra,ra,11
            ti[i] = ti_2[i] - temp[i];
     8ba:	0000                	unimp
     8bc:	0410                	addi	a2,sp,512
     8be:	000008b7          	lui	a7,0x0
     8c2:	cd1f 0008 1500      	0x15000008cd1f
     8c8:	00000467          	jalr	s0,zero # 0 <__DYNAMIC>
     8cc:	1000                	addi	s0,sp,32
     8ce:	c204                	sw	s1,0(a2)
        for (i = 0; i < N + 1; ++i) {
     8d0:	0008                	0x8
            ti[i] = ti_2[i] - temp[i];
     8d2:	1000                	addi	s0,sp,32
     8d4:	8a04                	0x8a04
        for (i = 0; i < N + 1; ++i) {
     8d6:	0001                	nop
     8d8:	1f00                	addi	s0,sp,944
                ti[i] = ti[i] + mod;
     8da:	08e4                	addi	s1,sp,92
     8dc:	0000                	unimp
            while (ti[i] < 0) {
     8de:	5d15                	li	s10,-27
     8e0:	0000                	unimp
     8e2:	0000                	unimp
            ti[i] = ti[i] % mod;
     8e4:	0410                	addi	a2,sp,512
     8e6:	08ea                	slli	a7,a7,0x1a
        for (i = 0; i < N + 1; ++i) {
     8e8:	0000                	unimp
     8ea:	0410                	addi	a2,sp,512
            ti[i] = ti[i] % mod;
     8ec:	08d9                	addi	a7,a7,22
     8ee:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8f0:	5b09                	li	s6,-30
              qi_1[i] = 0;
     8f2:	0006                	c.slli	zero,0x1
     8f4:	0000                	unimp
     8f6:	0009                	c.nop	2
     8f8:	0a00                	addi	s0,sp,272
            controlR += ri[i];
     8fa:	0069                	c.nop	26
     8fc:	0000                	unimp
              qi_1[i] = 0;
     8fe:	0002                	c.slli64	zero
     900:	b820                	fsd	fs0,112(s0)
        for (i = 0; i < N + 1; ++i) {
     902:	0005                	c.nop	1
            controlR += ri[i];
     904:	0400                	addi	s0,sp,512
        for (i = 0; i < N + 1; ++i) {
     906:	67170333          	0x67170333
            if (((ri_2[0] * j) % mod) == 1)
     90a:	0004                	0x4
     90c:	2000                	fld	fs0,0(s0)
     90e:	05b1                	addi	a1,a1,12
     910:	0000                	unimp
     912:	3404                	fld	fs1,40(s0)
     914:	046d1d03          	lh	s10,70(s10)
        for (j = 0; j < mod; ++j) {
     918:	0000                	unimp
     91a:	f121                	bnez	a0,85a <ext_euclid+0x1d8>
            ti_2[i] = (ti_2[i] * j) % mod;
     91c:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
        for (i = 0; i < N + 1; ++i) {
     920:	05bb0e67          	jalr	t3,91(s6) # 5d105b <_stack_start+0x5c105b>
            ti_2[i] = (ti_2[i] * j) % mod;
     924:	0000                	unimp
     926:	5d09                	li	s10,-30
     928:	0000                	unimp
     92a:	3600                	fld	fs0,40(a2)
     92c:	0009                	c.nop	2
        for (i = 0; i < N + 1; ++i) {
     92e:	0a00                	addi	s0,sp,272
int* generate_keys(int N, int p, int q){
     930:	0069                	c.nop	26
     932:	0000                	unimp
     934:	0095                	addi	ra,ra,5
     936:	a622                	fsd	fs0,264(sp)
     938:	0001                	nop
     93a:	0100                	addi	s0,sp,128
     93c:	0c06                	slli	s8,s8,0x1
     93e:	0926                	slli	s2,s2,0x9
     940:	0000                	unimp
     942:	0305                	addi	t1,t1,1
     944:	123c                	addi	a5,sp,296
     946:	0000                	unimp
     948:	6d22                	flw	fs10,8(sp)
     94a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     94e:	09260c07          	0x9260c07
     952:	0000                	unimp
     954:	0305                	addi	t1,t1,1
     956:	1494                	addi	a3,sp,608
     958:	0000                	unimp
     95a:	2522                	fld	fa0,8(sp)
     95c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     960:	0c08                	addi	a0,sp,528
     962:	0926                	slli	s2,s2,0x9
     964:	0000                	unimp
     966:	0305                	addi	t1,t1,1
     968:	16ec                	addi	a1,sp,876
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	0000                	unimp
     96c:	5d09                	li	s10,-30
     96e:	0000                	unimp
     970:	7c00                	flw	fs0,56(s0)
     972:	0009                	c.nop	2
     974:	0a00                	addi	s0,sp,272
     976:	0069                	c.nop	26
     978:	0000                	unimp
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	4d220063          	beq	tp,s2,e3a <memcpy+0x50>
     97e:	0004                	0x4
     980:	0100                	addi	s0,sp,128
     982:	0c09                	addi	s8,s8,2
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	096c                	addi	a1,sp,156
     986:	0000                	unimp
     988:	0305                	addi	t1,t1,1
     98a:	1944                	addi	s1,sp,180
     98c:	0000                	unimp
     98e:	5d09                	li	s10,-30
     990:	0000                	unimp
     992:	9f00                	0x9f00
     994:	0009                	c.nop	2
     996:	2300                	fld	fs0,0(a4)
     998:	0069                	c.nop	26
     99a:	0000                	unimp
     99c:	013d                	addi	sp,sp,15
     99e:	2200                	fld	fs0,0(a2)
     9a0:	00a1                	addi	ra,ra,8
     9a2:	0000                	unimp
     9a4:	0a01                	addi	s4,s4,0
     9a6:	8e0c                	0x8e0c
     9a8:	0009                	c.nop	2
     9aa:	0500                	addi	s0,sp,640
     9ac:	001ad403          	lhu	s0,1(s5)
     9b0:	0900                	addi	s0,sp,144
     9b2:	0064                	addi	s1,sp,12
     9b4:	0000                	unimp
     9b6:	09c1                	addi	s3,s3,16
     9b8:	0000                	unimp
     9ba:	690a                	flw	fs2,128(sp)
     9bc:	0000                	unimp
     9be:	0000                	unimp
     9c0:	0400                	addi	s0,sp,512
     9c2:	09b1                	addi	s3,s3,12
     9c4:	0000                	unimp
     9c6:	5a24                	lw	s1,112(a2)
     9c8:	0002                	c.slli64	zero
     9ca:	0100                	addi	s0,sp,128
     9cc:	09c10e0b          	0x9c10e0b
     9d0:	0000                	unimp
     9d2:	0305                	addi	t1,t1,1
     9d4:	1238                	addi	a4,sp,296
     9d6:	0000                	unimp
     9d8:	db25                	beqz	a4,948 <generate_keys+0x18>
     9da:	0006                	c.slli	zero,0x1
     9dc:	0100                	addi	s0,sp,128
     9de:	02a2                	slli	t0,t0,0x8
     9e0:	5d05                	li	s10,-31
     9e2:	0000                	unimp
     9e4:	7000                	flw	fs0,32(s0)
     9e6:	3800000f          	0x3800000f
     9ea:	0001                	nop
     9ec:	0100                	addi	s0,sp,128
     9ee:	639c                	flw	fa5,0(a5)
    int polyR[N+1];
     9f0:	2600000b          	0x2600000b
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	040d                	addi	s0,s0,3
    int polyR[N+1];
     9f6:	0000                	unimp
     9f8:	a301                	j	ef8 <memset+0x30>
     9fa:	0a02                	c.slli64	s4
     9fc:	00000b63          	beqz	zero,a12 <generate_keys+0xe2>
     a00:	0000                	unimp
     a02:	0000                	unimp
    polyR[N] = 1;
     a04:	8c26                	mv	s8,s1
     a06:	0000                	unimp
     a08:	0100                	addi	s0,sp,128
     a0a:	02a4                	addi	s1,sp,328
     a0c:	630a                	flw	ft6,128(sp)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	1e00000b          	0x1e00000b
     a12:	0000                	unimp
     a14:	2600                	fld	fs0,8(a2)
     a16:	0342                	slli	t1,t1,0x10
     a18:	0000                	unimp
     a1a:	a501                	j	101a <main+0xaa>
     a1c:	0a02                	c.slli64	s4
     a1e:	00000b63          	beqz	zero,a34 <generate_keys+0x104>
     a22:	003c                	addi	a5,sp,8
     a24:	0000                	unimp
     a26:	01004e27          	fsq	fa6,28(zero) # 1c <__DYNAMIC+0x1c>
     a2a:	02a6                	slli	t0,t0,0x9
     a2c:	5d09                	li	s10,-30
     a2e:	0000                	unimp
     a30:	3500                	fld	fs0,40(a0)
     a32:	01007027          	0x1007027
     a36:	5d0902a7          	0x5d0902a7
     a3a:	0000                	unimp
     a3c:	0300                	addi	s0,sp,384
     a3e:	01007127          	0x1007127
     a42:	02a8                	addi	a0,sp,328
     a44:	5d09                	li	s10,-30
     a46:	0000                	unimp
     a48:	6500                	flw	fs0,8(a0)
     a4a:	c828                	sw	a0,80(s0)
     a4c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     a50:	02aa                	slli	t0,t0,0xa
     a52:	6909                	lui	s2,0x2
     a54:	0300000b          	0x300000b
     a58:	dc91                	beqz	s1,974 <generate_keys+0x44>
     a5a:	055e2677          	0x55e2677
     a5e:	0000                	unimp
     a60:	ab01                	j	f70 <main>
     a62:	0902                	c.slli64	s2
     a64:	0b79                	addi	s6,s6,30
     a66:	0000                	unimp
     a68:	005d                	c.nop	23
     a6a:	0000                	unimp
     a6c:	b826                	fsd	fs1,48(sp)
     a6e:	0000                	unimp
     a70:	0100                	addi	s0,sp,128
    polyR[0] = -1;
     a72:	02ac                	addi	a1,sp,328
     a74:	8b09                	andi	a4,a4,2
    for(i = 1; i < N; ++i){
     a76:	b100000b          	0xb100000b
     a7a:	0000                	unimp
     a7c:	2900                	fld	fs0,16(a0)
    for (i = N; i < 55; ++i ){
     a7e:	00c5                	addi	ra,ra,17
     a80:	0000                	unimp
     a82:	ad01                	j	1092 <main+0x122>
     a84:	0902                	c.slli64	s2
    for(i = 0; i < N; ++i){
     a86:	0b9d                	addi	s7,s7,7
        random_keys[i] = f[i];
     a88:	0000                	unimp
     a8a:	8926                	mv	s2,s1
     a8c:	0005                	c.nop	1
     a8e:	0100                	addi	s0,sp,128
    for(i = 0; i < N; ++i){
     a90:	02ae                	slli	t0,t0,0xb
     a92:	af09                	j	11a4 <__DTOR_END__+0xec>
     a94:	1200000b          	0x1200000b
    for(i = N; i < (2*N); ++i){
     a98:	0001                	nop
     a9a:	2900                	fld	fs0,16(a0)
     a9c:	0274                	addi	a3,sp,268
     a9e:	0000                	unimp
        random_keys[i] = g[i-N];
     aa0:	af01                	j	11b0 <__DTOR_END__+0xf8>
     aa2:	0902                	c.slli64	s2
     aa4:	0bc1                	addi	s7,s7,16
     aa6:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     aa8:	2c26                	fld	fs8,72(sp)
     aaa:	0004                	0x4
    for(i = (2*N); i < (3*N); ++i){
     aac:	0100                	addi	s0,sp,128
     aae:	02b0                	addi	a2,sp,328
     ab0:	d309                	beqz	a4,9b2 <generate_keys+0x82>
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	6500000b          	0x6500000b
     ab6:	0001                	nop
     ab8:	2a00                	fld	fs0,16(a2)
     aba:	0069                	c.nop	26
     abc:	b101                	j	6bc <ext_euclid+0x3a>
    for(i = (2*N); i < (3*N); ++i){
     abe:	0902                	c.slli64	s2
        random_keys[i] = fp[i-(2*N)];
     ac0:	005d                	c.nop	23
     ac2:	0000                	unimp
     ac4:	01b9                	addi	gp,gp,14
     ac6:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     ac8:	000f982b          	0xf982b
    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	f800                	fsw	fs0,48(s0)
     ace:	001a                	c.slli	zero,0x6
     ad0:	ec00                	fsw	fs0,24(s0)
     ad2:	000a                	c.slli	zero,0x2
     ad4:	2c00                	fld	fs0,24(s0)
     ad6:	5a01                	li	s4,-32
    for(i = (3*N); i < (4*N); ++i){
     ad8:	77dc9103          	lh	sp,1917(s9)
     adc:	012c                	addi	a1,sp,136
     ade:	7803055b          	0x7803055b
        random_keys[i] = fq[i-(3*N)];
     ae2:	0011                	c.nop	4
     ae4:	2c00                	fld	fs0,24(s0)
     ae6:	5c01                	li	s8,-32
    for(i = (3*N); i < (4*N); ++i){
     ae8:	0802                	c.slli64	a6
     aea:	00c0                	addi	s0,sp,68
    fg = polymult2(fq, N, g, N, 0);
     aec:	000fb62b          	0xfb62b
     af0:	bc00                	fsd	fs0,56(s0)
     af2:	000e                	c.slli	zero,0x3
     af4:	0b00                	addi	s0,sp,400
     af6:	2c00000b          	0x2c00000b
    for(i = 0; i < (2*N-1); ++i){
     afa:	5a01                	li	s4,-32
     afc:	0802                	c.slli64	a6
     afe:	2c35                	jal	d3a <ntru_deceypt+0x8e>
     b00:	5b01                	li	s6,-32
     b02:	3301                	jal	802 <ext_euclid+0x180>
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	012c                	addi	a1,sp,136
     b06:	025c                	addi	a5,sp,260
     b08:	6508                	flw	fa0,8(a0)
     b0a:	2b00                	fld	fs0,16(a4)
    for(i = (4*N); i < (5*N); ++i){
     b0c:	1036                	c.slli	zero,0x2d
     b0e:	0000                	unimp
     b10:	0d66                	slli	s10,s10,0x19
     b12:	0000                	unimp
     b14:	00000b33          	add	s6,zero,zero
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b18:	012c                	addi	a1,sp,136
     b1a:	025a                	slli	tp,tp,0x16
     b1c:	3508                	fld	fa0,40(a0)
    for(i = (4*N); i < (5*N); ++i){
     b1e:	012c                	addi	a1,sp,136
     b20:	6508025b          	0x6508025b
    for(i = (5*N); i < (6*N+1); ++i){
     b24:	012c                	addi	a1,sp,136
     b26:	035c                	addi	a5,sp,388
        random_keys[i] = polyR[i-(5*N)];
     b28:	dc91                	beqz	s1,a44 <generate_keys+0x114>
     b2a:	5e012c77          	0x5e012c77
     b2e:	7e989103          	lh	sp,2025(a7) # 7e9 <ext_euclid+0x167>
    for(i = (5*N); i < (6*N+1); ++i){
     b32:	2d00                	fld	fs0,24(a0)
     b34:	1058                	addi	a4,sp,36
     b36:	0000                	unimp
     b38:	0be5                	addi	s7,s7,25
     b3a:	0000                	unimp
}
     b3c:	012c                	addi	a1,sp,136
     b3e:	025a                	slli	tp,tp,0x16
     b40:	3508                	fld	fa0,40(a0)
     b42:	012c                	addi	a1,sp,136
     b44:	2c33015b          	0x2c33015b
     b48:	5c01                	li	s8,-32
     b4a:	0802                	c.slli64	a6
     b4c:	2c65                	jal	e04 <memcpy+0x1a>
     b4e:	5d01                	li	s10,-32
     b50:	7af09103          	lh	sp,1967(ra)
     b54:	012c                	addi	a1,sp,136
     b56:	025e                	slli	tp,tp,0x17
     b58:	0082                	c.slli64	ra
     b5a:	012c                	addi	a1,sp,136
     b5c:	0360                	addi	s0,sp,396
     b5e:	9891                	andi	s1,s1,-28
     b60:	007e                	c.slli	zero,0x1f
     b62:	1000                	addi	s0,sp,32
     b64:	5d04                	lw	s1,56(a0)
     b66:	0000                	unimp
     b68:	0900                	addi	s0,sp,144
     b6a:	005d                	c.nop	23
     b6c:	0000                	unimp
     b6e:	0b79                	addi	s6,s6,30
     b70:	0000                	unimp
     b72:	690a                	flw	fs2,128(sp)
     b74:	0000                	unimp
     b76:	2f00                	fld	fs0,24(a4)
     b78:	0900                	addi	s0,sp,144
     b7a:	005d                	c.nop	23
        polyR[i] = 0;
     b7c:	0000                	unimp
     b7e:	00000b8b          	0xb8b
     b82:	692e                	flw	fs2,200(sp)
     b84:	0000                	unimp
    for(i = 1; i < N; ++i){
     b86:	0200                	addi	s0,sp,256
     b88:	3408                	fld	fa0,40(s0)
        f[i] = 0;
     b8a:	0900                	addi	s0,sp,144
     b8c:	005d                	c.nop	23
     b8e:	0000                	unimp
     b90:	0b9d                	addi	s7,s7,7
     b92:	0000                	unimp
     b94:	692e                	flw	fs2,200(sp)
     b96:	0000                	unimp
        g[i] = 0;
     b98:	0200                	addi	s0,sp,256
     b9a:	3408                	fld	fa0,40(s0)
     b9c:	0900                	addi	s0,sp,144
     b9e:	005d                	c.nop	23
     ba0:	0000                	unimp
    for (i = N; i < 55; ++i ){
     ba2:	00000baf          	0xbaf
        random_keys[i] = f[i];
     ba6:	692e                	flw	fs2,200(sp)
     ba8:	0000                	unimp
     baa:	0200                	addi	s0,sp,256
     bac:	3408                	fld	fa0,40(s0)
     bae:	0900                	addi	s0,sp,144
     bb0:	005d                	c.nop	23
     bb2:	0000                	unimp
     bb4:	0bc1                	addi	s7,s7,16
    for(i = 0; i < N; ++i){
     bb6:	0000                	unimp
        random_keys[i] = f[i];
     bb8:	692e                	flw	fs2,200(sp)
    for(i = 0; i < N; ++i){
     bba:	0000                	unimp
        random_keys[i] = g[i-N];
     bbc:	0200                	addi	s0,sp,256
     bbe:	3408                	fld	fa0,40(s0)
     bc0:	0900                	addi	s0,sp,144
     bc2:	005d                	c.nop	23
     bc4:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     bc6:	00000bd3          	fadd.s	fs7,ft0,ft0,rne
     bca:	692e                	flw	fs2,200(sp)
        random_keys[i] = fp[i-(2*N)];
     bcc:	0000                	unimp
     bce:	0200                	addi	s0,sp,256
     bd0:	3408                	fld	fa0,40(s0)
     bd2:	0900                	addi	s0,sp,144
     bd4:	005d                	c.nop	23
    for(i = (2*N); i < (3*N); ++i){
     bd6:	0000                	unimp
     bd8:	0be5                	addi	s7,s7,25
     bda:	0000                	unimp
        random_keys[i] = fq[i-(3*N)];
     bdc:	692e                	flw	fs2,200(sp)
     bde:	0000                	unimp
     be0:	0200                	addi	s0,sp,256
     be2:	3508                	fld	fa0,40(a0)
     be4:	2f00                	fld	fs0,24(a4)
     be6:	000001f3          	0x1f3
    for(i = (3*N); i < (4*N); ++i){
     bea:	7601                	lui	a2,0xfffe0
        random_keys[i] = fq[i-(3*N)];
     bec:	0602                	c.slli64	a2
    for(i = (3*N); i < (4*N); ++i){
     bee:	00000b63          	beqz	zero,c04 <generate_keys+0x2d4>
    for(i = 0; i < (2*N-1); ++i){
     bf2:	0cac                	addi	a1,sp,600
     bf4:	0000                	unimp
        fg[i] = fg[i]*p;
     bf6:	00c8                	addi	a0,sp,68
     bf8:	0000                	unimp
     bfa:	9c01                	0x9c01
     bfc:	0d66                	slli	s10,s10,0x19
    for(i = 0; i < (2*N-1); ++i){
     bfe:	0000                	unimp
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c00:	4e30                	lw	a2,88(a2)
     c02:	0100                	addi	s0,sp,128
     c04:	0276                	slli	tp,tp,0x1d
     c06:	00005d17          	auipc	s10,0x5
     c0a:	d900                	sw	s0,48(a0)
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0001                	nop
     c0e:	3000                	fld	fs0,32(s0)
        random_keys[i] = polyR[i-(5*N)];
     c10:	0070                	addi	a2,sp,12
     c12:	7601                	lui	a2,0xfffe0
     c14:	1e02                	slli	t3,t3,0x20
     c16:	005d                	c.nop	23
     c18:	0000                	unimp
     c1a:	021d                	addi	tp,tp,7
     c1c:	0000                	unimp
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	7130                	flw	fa2,96(a0)
        random_keys[i] = polyR[i-(5*N)];
     c20:	0100                	addi	s0,sp,128
    for(i = (5*N); i < (6*N+1); ++i){
     c22:	0276                	slli	tp,tp,0x1d
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	5d25                	li	s10,-23
     c26:	0000                	unimp
     c28:	5400                	lw	s0,40(s0)
     c2a:	0002                	c.slli64	zero
     c2c:	3100                	fld	fs0,32(a0)
     c2e:	00b8                	addi	a4,sp,72
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	0000                	unimp
     c32:	7601                	lui	a2,0xfffe0
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c34:	2d02                	fld	fs10,0(sp)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	00000b63          	beqz	zero,c4c <ntru_encyrpt+0x28>
     c3a:	0000028b          	0x28b
     c3e:	8931                	andi	a0,a0,12
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c40:	0005                	c.nop	1
     c42:	0100                	addi	s0,sp,128
     c44:	0276                	slli	tp,tp,0x1d
     c46:	6340                	flw	fs0,4(a4)
     c48:	b700000b          	0xb700000b
    temp = polymult(public_key,N,random_val,48,q,0);
     c4c:	0002                	c.slli64	zero
     c4e:	3100                	fld	fs0,32(a0)
     c50:	040d                	addi	s0,s0,3
     c52:	0000                	unimp
     c54:	7601                	lui	a2,0xfffe0
     c56:	5402                	lw	s0,32(sp)
     c58:	00000b63          	beqz	zero,c6e <ntru_encyrpt+0x4a>
     c5c:	02ee                	slli	t0,t0,0x1b
array_add(temp,message,48);
     c5e:	0000                	unimp
     c60:	9531                	srai	a0,a0,0x2c
     c62:	0006                	c.slli	zero,0x1
    temp = polymult(public_key,N,random_val,48,q,0);
     c64:	0100                	addi	s0,sp,128
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	0276                	slli	tp,tp,0x1d
     c68:	6366                	flw	ft6,88(sp)
array_add(temp,message,48);
     c6a:	0f00000b          	0xf00000b
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6e:	29000003          	lb	zero,656(zero) # 290 <polymult+0x1b4>
     c72:	02df 0000 7801      	0x7801000002df
     c78:	0a02                	c.slli64	s4
     c7a:	00000b63          	beqz	zero,c90 <ntru_encyrpt+0x6c>
    for(i = (2*N); i < (3*N); ++i){
     c7e:	612a                	flw	ft2,136(sp)
     c80:	0100                	addi	s0,sp,128
     c82:	0279                	addi	tp,tp,30
     c84:	630a                	flw	ft6,128(sp)
     c86:	4600000b          	0x4600000b
}
     c8a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c4>
     c8e:	3261                	jal	616 <polydiv+0x1d0>
     c90:	0100                	addi	s0,sp,128
     c92:	027a                	slli	tp,tp,0x1e
     c94:	630a                	flw	ft6,128(sp)
     c96:	5900000b          	0x5900000b
        CT[i-(2*N)] = CT[i];
     c9a:	2a000003          	lb	zero,672(zero) # 2a0 <polymult+0x1c4>
     c9e:	7b010063          	beq	sp,a6,143e <_bss_start+0x202>
    for(i = (2*N); i < (3*N); ++i){
     ca2:	0a02                	c.slli64	s4
     ca4:	00000b63          	beqz	zero,cba <ntru_deceypt+0xe>
        CT[i-(2*N)] = CT[i];
     ca8:	0382                	c.slli64	t2
    for(i = (2*N); i < (3*N); ++i){
     caa:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cac:	632a                	flw	ft6,136(sp)
     cae:	0032                	c.slli	zero,0xc
     cb0:	7c01                	lui	s8,0xfffe0
     cb2:	0a02                	c.slli64	s4
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb4:	00000b63          	beqz	zero,cca <ntru_deceypt+0x1e>
     cb8:	0395                	addi	t2,t2,5
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cba:	0000                	unimp
     cbc:	692a                	flw	fs2,136(sp)
     cbe:	0100                	addi	s0,sp,128
     cc0:	027d                	addi	tp,tp,31
     cc2:	5d09                	li	s10,-30
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	0000                	unimp
     cc6:	b300                	fsd	fs0,32(a4)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	2b000003          	lb	zero,688(zero) # 2b0 <polymult+0x1d4>
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ccc:	0ce2                	slli	s9,s9,0x18
     cce:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd0:	1660                	addi	s0,sp,812
     cd2:	0000                	unimp
     cd4:	0cf8                	addi	a4,sp,604
     cd6:	0000                	unimp
     cd8:	012c                	addi	a1,sp,136
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	035a                	slli	t1,t1,0x16
     cdc:	2c5d01f3          	0x2c5d01f3
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ce0:	5b01                	li	s6,-32
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	7802                	flw	fa6,32(sp)
     ce4:	2c00                	fld	fs0,24(s0)
     ce6:	5c01                	li	s8,-32
     ce8:	5f01f303          	0x5f01f303
     cec:	012c                	addi	a1,sp,136
     cee:	025d                	addi	tp,tp,23
     cf0:	0078                	addi	a4,sp,12
     cf2:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf4:	015e                	slli	sp,sp,0x17
     cf6:	0030                	addi	a2,sp,8
     cf8:	000cf22b          	0xcf22b
     cfc:	2700                	fld	fs0,8(a4)
        if(a2[i] <= q/2)
     cfe:	0014                	0x14
     d00:	1e00                	addi	s0,sp,816
     d02:	000d                	c.nop	3
    for (i = 0; i < N; ++i){
     d04:	2c00                	fld	fs0,24(s0)
     d06:	5b01                	li	s6,-32
     d08:	7902                	flw	fs2,32(sp)
    c = polymult2(secret_key_fp,N,a2,N,0);
     d0a:	2c00                	fld	fs0,24(s0)
     d0c:	5c01                	li	s8,-32
     d0e:	8402                	jr	s0
     d10:	2c00                	fld	fs0,24(s0)
     d12:	5d01                	li	s10,-32
     d14:	8602                	jr	a2
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d16:	2c00                	fld	fs0,24(s0)
     d18:	5e01                	li	t3,-32
     d1a:	8202                	jr	tp
     d1c:	0000                	unimp
     d1e:	000d162b          	0xd162b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	6000                	flw	fs0,0(s0)
     d24:	0016                	c.slli	zero,0x5
     d26:	4300                	lw	s0,0(a4)
}
     d28:	000d                	c.nop	3
     d2a:	2c00                	fld	fs0,24(s0)
     d2c:	5a01                	li	s4,-32
     d2e:	8702                	jr	a4
     d30:	2c00                	fld	fs0,24(s0)
     d32:	5b01                	li	s6,-32
     d34:	7802                	flw	fa6,32(sp)
     d36:	2c00                	fld	fs0,24(s0)
     d38:	5d01                	li	s10,-32
     d3a:	7802                	flw	fa6,32(sp)
     d3c:	2c00                	fld	fs0,24(s0)
        a2[i-(2*N)] = a2[i];
     d3e:	5e01                	li	t3,-32
     d40:	3001                	jal	540 <polydiv+0xfa>
     d42:	2d00                	fld	fs0,24(a0)
     d44:	0d22                	slli	s10,s10,0x8
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0000                	unimp
     d48:	00001427          	0x1427
        a2[i-(2*N)] = a2[i];
     d4c:	012c                	addi	a1,sp,136
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	0079025b          	0x79025b
        if(a2[i] <= q/2)
     d52:	012c                	addi	a1,sp,136
     d54:	025c                	addi	a5,sp,260
            a2[i] = (-1)*(q-a2[i]);
     d56:	0084                	addi	s1,sp,64
     d58:	012c                	addi	a1,sp,136
     d5a:	025d                	addi	tp,tp,23
    for (i = 0; i < N; ++i){
     d5c:	0086                	slli	ra,ra,0x1
     d5e:	012c                	addi	a1,sp,136
     d60:	025e                	slli	tp,tp,0x17
        c2[i-(2*N)] = c2[i];
     d62:	0085                	addi	ra,ra,1
     d64:	0000                	unimp
     d66:	0006572f          	0x6572f
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6a:	0100                	addi	s0,sp,128
     d6c:	0254                	addi	a3,sp,260
        c2[i-(2*N)] = c2[i];
     d6e:	6306                	flw	ft6,64(sp)
     d70:	2400000b          	0x2400000b
  jal x0, default_exc_handler
     d74:	000c                	0xc
     d76:	8800                	0x8800
  mv  x1, x0
     d78:	0000                	unimp
     d7a:	0100                	addi	s0,sp,128
  mv  x2, x1
     d7c:	bc9c                	fsd	fa5,56(s1)
  mv  x3, x1
     d7e:	000e                	c.slli	zero,0x3
  mv  x4, x1
     d80:	3000                	fld	fs0,32(s0)
  mv  x5, x1
     d82:	004e                	c.slli	zero,0x13
  mv  x6, x1
     d84:	5401                	li	s0,-32
  mv  x7, x1
     d86:	1702                	slli	a4,a4,0x20
  mv  x8, x1
     d88:	005d                	c.nop	23
  mv  x9, x1
     d8a:	0000                	unimp
  mv x10, x1
     d8c:	0438                	addi	a4,sp,520
  mv x11, x1
     d8e:	0000                	unimp
  mv x12, x1
     d90:	7130                	flw	fa2,96(a0)
  mv x13, x1
     d92:	0100                	addi	s0,sp,128
  mv x14, x1
     d94:	0254                	addi	a3,sp,260
  mv x15, x1
     d96:	5d1e                	lw	s10,228(sp)
  mv x16, x1
     d98:	0000                	unimp
  mv x17, x1
     d9a:	6400                	flw	fs0,8(s0)
  mv x18, x1
     d9c:	0004                	0x4
  mv x19, x1
     d9e:	3100                	fld	fs0,32(a0)
  mv x20, x1
     da0:	03c8                	addi	a0,sp,452
  mv x21, x1
     da2:	0000                	unimp
  mv x22, x1
     da4:	5401                	li	s0,-32
  mv x23, x1
     da6:	2602                	fld	fa2,0(sp)
  mv x24, x1
     da8:	00000b63          	beqz	zero,dbe <reset_handler+0x46>
  mv x26, x1
     dac:	0000049b          	0x49b
  mv x28, x1
     db0:	5e31                	li	t3,-20
  mv x29, x1
     db2:	0005                	c.nop	1
  mv x30, x1
     db4:	0100                	addi	s0,sp,128
  mv x31, x1
     db6:	0254                	addi	a3,sp,260
  la   x2, _stack_start
     db8:	6334                	flw	fa3,64(a4)
     dba:	d200000b          	0xd200000b
     dbe:	0004                	0x4
  la x26, _bss_start
     dc0:	3100                	fld	fs0,32(a0)
     dc2:	0695                	addi	a3,a3,5
     dc4:	0000                	unimp
     dc6:	5401                	li	s0,-32
  la x27, _bss_end
     dc8:	4502                	lw	a0,0(sp)
     dca:	00000b63          	beqz	zero,de0 <main_entry+0x2>
     dce:	04fe                	slli	s1,s1,0x1f
  bge x26, x27, zero_loop_end
     dd0:	0000                	unimp
     dd2:	cf29                	beqz	a4,e2c <memcpy+0x42>
  sw x0, 0(x26)
     dd4:	0002                	c.slli64	zero
     dd6:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     dd8:	0256                	slli	tp,tp,0x15
  ble x26, x27, zero_loop
     dda:	630a                	flw	ft6,128(sp)
     ddc:	3200000b          	0x3200000b
  addi x10, x0, 0
     de0:	01005443          	fmadd.s	fs0,ft0,fa6,ft0,unknown
  addi x11, x0, 0
     de4:	630a0257          	0x630a0257
  jal x1, main
     de8:	0100000b          	0x100000b
     dec:	285a                	fld	fa6,400(sp)
     dee:	00000397          	auipc	t2,0x0
     df2:	5901                	li	s2,-32
     df4:	0902                	c.slli64	s2
     df6:	0b69                	addi	s6,s6,26
     df8:	0000                	unimp
     dfa:	7ea09103          	lh	sp,2026(ra)
     dfe:	4e26                	lw	t3,72(sp)
     e00:	0002                	c.slli64	zero
     e02:	0100                	addi	s0,sp,128
     e04:	025a                	slli	tp,tp,0x16
     e06:	630a                	flw	ft6,128(sp)
     e08:	3500000b          	0x3500000b
     e0c:	0005                	c.nop	1
     e0e:	2a00                	fld	fs0,16(a2)
     e10:	0069                	c.nop	26
     e12:	5b01                	li	s6,-32
     e14:	0902                	c.slli64	s2
     e16:	005d                	c.nop	23
     e18:	0000                	unimp
     e1a:	055e                	slli	a0,a0,0x17
     e1c:	0000                	unimp
     e1e:	000c4c2b          	0xc4c2b
     e22:	f800                	fsw	fs0,48(s0)
     e24:	001a                	c.slli	zero,0x6
     e26:	4100                	lw	s0,0(a0)
     e28:	000e                	c.slli	zero,0x3
     e2a:	2c00                	fld	fs0,24(s0)
     e2c:	5a01                	li	s4,-32
     e2e:	7202                	flw	ft4,32(sp)
     e30:	2c00                	fld	fs0,24(s0)
     e32:	5b01                	li	s6,-32
     e34:	0305                	addi	t1,t1,1
     e36:	10b8                	addi	a4,sp,104
     e38:	0000                	unimp
     e3a:	012c                	addi	a1,sp,136
     e3c:	025c                	addi	a5,sp,260
     e3e:	c008                	sw	a0,0(s0)
     e40:	2b00                	fld	fs0,16(a4)
     e42:	0c5e                	slli	s8,s8,0x17
     e44:	0000                	unimp
     e46:	17f6                	slli	a5,a5,0x3d
     e48:	0000                	unimp
     e4a:	0e72                	slli	t3,t3,0x1c
     e4c:	0000                	unimp
     e4e:	012c                	addi	a1,sp,136
     e50:	025a                	slli	tp,tp,0x16
     e52:	012c0083          	lb	ra,18(s8) # fffe0012 <_stack_start+0xfffd0012>
     e56:	0078025b          	0x78025b
     e5a:	012c                	addi	a1,sp,136
     e5c:	025c                	addi	a5,sp,260
     e5e:	0072                	c.slli	zero,0x1c
     e60:	012c                	addi	a1,sp,136
     e62:	025d                	addi	tp,tp,23
     e64:	3008                	fld	fa0,32(s0)
     e66:	012c                	addi	a1,sp,136
     e68:	025e                	slli	tp,tp,0x17
     e6a:	0082                	c.slli64	ra
     e6c:	012c                	addi	a1,sp,136
     e6e:	015f 0030 6e2b      	0x6e2b0030015f
     e74:	000c                	0xc
     e76:	1a00                	addi	s0,sp,304
     e78:	001a                	c.slli	zero,0x6
     e7a:	9300                	0x9300
     e7c:	000e                	c.slli	zero,0x3
     e7e:	2c00                	fld	fs0,24(s0)
     e80:	5a01                	li	s4,-32
     e82:	8302                	jr	t1
     e84:	2c00                	fld	fs0,24(s0)
     e86:	5b01                	li	s6,-32
     e88:	5c01f303          	0x5c01f303
     e8c:	012c                	addi	a1,sp,136
     e8e:	025c                	addi	a5,sp,260
     e90:	3008                	fld	fa0,32(s0)
     e92:	2d00                	fld	fs0,24(a0)
     e94:	0c7e                	slli	s8,s8,0x1f
     e96:	0000                	unimp
     e98:	00001427          	0x1427
     e9c:	012c                	addi	a1,sp,136
     e9e:	025a                	slli	tp,tp,0x16
     ea0:	012c0083          	lb	ra,18(s8)
     ea4:	0079025b          	0x79025b
     ea8:	012c                	addi	a1,sp,136
     eaa:	025c                	addi	a5,sp,260
     eac:	0084                	addi	s1,sp,64
     eae:	012c                	addi	a1,sp,136
     eb0:	025d                	addi	tp,tp,23
     eb2:	0178                	addi	a4,sp,140
     eb4:	012c                	addi	a1,sp,136
     eb6:	025e                	slli	tp,tp,0x17
     eb8:	0082                	c.slli64	ra
     eba:	0000                	unimp
     ebc:	0003392f          	0x3392f
     ec0:	0100                	addi	s0,sp,128
     ec2:	01fc                	addi	a5,sp,204
     ec4:	6306                	flw	ft6,64(sp)
     ec6:	3000000b          	0x3000000b
     eca:	0009                	c.nop	2
     ecc:	f400                	fsw	fs0,40(s0)
     ece:	0002                	c.slli64	zero
     ed0:	0100                	addi	s0,sp,128
     ed2:	6c9c                	flw	fa5,24(s1)
     ed4:	0010                	0x10
     ed6:	3000                	fld	fs0,32(s0)
     ed8:	004e                	c.slli	zero,0x13
     eda:	fc01                	bnez	s0,df2 <memcpy+0x8>
     edc:	1801                	addi	a6,a6,-32
     ede:	005d                	c.nop	23
     ee0:	0000                	unimp
     ee2:	0594                	addi	a3,sp,704
     ee4:	0000                	unimp
     ee6:	7030                	flw	fa2,96(s0)
     ee8:	0100                	addi	s0,sp,128
     eea:	01fc                	addi	a5,sp,204
     eec:	5d1f 0000 e500      	0xe50000005d1f
     ef2:	0005                	c.nop	1
     ef4:	3000                	fld	fs0,32(s0)
     ef6:	0071                	c.nop	28
     ef8:	fc01                	bnez	s0,e10 <memcpy+0x26>
     efa:	2601                	jal	11fa <__DTOR_END__+0x142>
     efc:	005d                	c.nop	23
     efe:	0000                	unimp
     f00:	061c                	addi	a5,sp,768
     f02:	0000                	unimp
     f04:	6632                	flw	fa2,12(sp)
     f06:	0100                	addi	s0,sp,128
     f08:	01fe                	slli	gp,gp,0x1f
     f0a:	6c09                	lui	s8,0x2
     f0c:	0010                	0x10
     f0e:	0300                	addi	s0,sp,384
     f10:	9891                	andi	s1,s1,-28
     f12:	327c                	fld	fa5,224(a2)
     f14:	ff010067          	jr	-16(sp)
     f18:	0901                	addi	s2,s2,0
     f1a:	106c                	addi	a1,sp,44
     f1c:	0000                	unimp
     f1e:	7df49103          	lh	sp,2015(s1)
     f22:	662a                	flw	fa2,136(sp)
     f24:	0070                	addi	a2,sp,12
     f26:	0101                	addi	sp,sp,0
     f28:	0a02                	c.slli64	s4
     f2a:	00000b63          	beqz	zero,f40 <memset+0x78>
     f2e:	00000653          	fadd.s	fa2,ft0,ft0,rne
     f32:	662a                	flw	fa2,136(sp)
     f34:	0071                	c.nop	28
     f36:	0201                	addi	tp,tp,0
     f38:	0a02                	c.slli64	s4
     f3a:	00000b63          	beqz	zero,f50 <memset+0x88>
     f3e:	0666                	slli	a2,a2,0x19
     f40:	0000                	unimp
     f42:	662a                	flw	fa2,136(sp)
     f44:	03010067          	jr	48(sp)
     f48:	0a02                	c.slli64	s4
     f4a:	00000b63          	beqz	zero,f60 <memset+0x98>
     f4e:	0684                	addi	s1,sp,832
     f50:	0000                	unimp
     f52:	702a                	flw	ft0,168(sp)
     f54:	0401006b          	0x401006b
     f58:	0a02                	c.slli64	s4
     f5a:	00000b63          	beqz	zero,f70 <main>
     f5e:	06a2                	slli	a3,a3,0x8
     f60:	0000                	unimp
     f62:	9526                	add	a0,a0,s1
     f64:	0006                	c.slli	zero,0x1
     f66:	0100                	addi	s0,sp,128
     f68:	0205                	addi	tp,tp,1
     f6a:	7c09                	lui	s8,0xfffe2
     f6c:	0010                	0x10
     f6e:	c000                	sw	s0,0(s0)
int main(){
     f70:	0006                	c.slli	zero,0x1
     f72:	2a00                	fld	fs0,16(a2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f74:	0069                	c.nop	26
     f76:	0601                	addi	a2,a2,0
     f78:	0902                	c.slli64	s2
     f7a:	005d                	c.nop	23
     f7c:	0000                	unimp
     f7e:	00000723          	sb	zero,14(zero) # e <__DYNAMIC+0xe>
int main(){
     f82:	d926                	sw	s1,176(sp)
     f84:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
     f88:	630a0207          	0x630a0207
     f8c:	5f00000b          	0x5f00000b
     f90:	0008                	0x8
    resultkon[0] = 0xaaaaaaa0;
     f92:	3300                	fld	fs0,32(a4)
     f94:	0069                	c.nop	26
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f96:	0000                	unimp
    resultkon[0] = 0xaaaaaaa0;
     f98:	00000877          	0x877
     f9c:	0009762b          	0x9762b
     fa0:	0300                	addi	s0,sp,384
     fa2:	bc00001b          	0xbc00001b
    keys = generate_keys(N, p, q);
     fa6:	2c00000f          	0x2c00000f
     faa:	5a01                	li	s4,-32
     fac:	7ca47803          	0x7ca47803
    resultkon[0] = 0xaaaaaaa1;
     fb0:	012c                	addi	a1,sp,136
     fb2:	2c30015b          	0x2c30015b
     fb6:	5c01                	li	s8,-32
     fb8:	0802                	c.slli64	a6
    for(i = 0; i < N; ++i){
     fba:	00d0                	addi	a2,sp,68
     fbc:	0009f62b          	0x9f62b
        secret_key_f[i] = keys[i];
     fc0:	0300                	addi	s0,sp,384
     fc2:	dc00001b          	0xdc00001b
     fc6:	2c00000f          	0x2c00000f
    for(i = 0; i < N; ++i){
     fca:	5a01                	li	s4,-32
     fcc:	7df87803          	0x7df87803
    for(i = N; i < (2*N); ++i){
     fd0:	012c                	addi	a1,sp,136
     fd2:	2c30015b          	0x2c30015b
     fd6:	5c01                	li	s8,-32
     fd8:	0802                	c.slli64	a6
     fda:	00d8                	addi	a4,sp,68
        secret_key_fp[i-(2*N)] = keys[i];
     fdc:	000abe2b          	0xabe2b
     fe0:	8f00                	0x8f00
     fe2:	0010                	0x10
     fe4:	0300                	addi	s0,sp,384
    for(i = (2*N); i < (3*N); ++i){
     fe6:	0010                	0x10
     fe8:	2c00                	fld	fs0,24(s0)
    for(i = (3*N); i < (4*N); ++i){
     fea:	5a01                	li	s4,-32
     fec:	7202                	flw	ft4,32(sp)
     fee:	2c00                	fld	fs0,24(s0)
     ff0:	5b01                	li	s6,-32
     ff2:	7c987803          	0x7c987803
        public_key[i-(4*N)] = keys[i];
     ff6:	012c                	addi	a1,sp,136
     ff8:	025c                	addi	a5,sp,260
     ffa:	0085                	addi	ra,ra,1
     ffc:	012c                	addi	a1,sp,136
     ffe:	025d                	addi	tp,tp,23
    for(i = (4*N); i < (5*N); ++i){
    1000:	2b000087          	0x2b000087
    1004:	0ad8                	addi	a4,sp,340
    1006:	0000                	unimp
    1008:	0000108f          	0x108f
        ring_poly[i-(5*N)] = keys[i];
    100c:	102a                	c.slli	zero,0x2a
    100e:	0000                	unimp
    1010:	012c                	addi	a1,sp,136
    1012:	025a                	slli	tp,tp,0x16
    1014:	0072                	c.slli	zero,0x1c
    for(i = (5*N); i < (6*N+1); ++i){
    1016:	012c                	addi	a1,sp,136
    1018:	9878035b          	0x9878035b
    resultkon[0] = 0xbbbbbbb0;
    101c:	2c7c                	fld	fa5,216(s0)
    101e:	5c01                	li	s8,-32
    1020:	8502                	jr	a0
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	2c00                	fld	fs0,24(s0)
    1024:	5d01                	li	s10,-32
    1026:	8602                	jr	a2
    1028:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    102a:	000af82b          	0xaf82b
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	6000                	flw	fs0,0(s0)
    1030:	0016                	c.slli	zero,0x5
    resultkon[0] = 0xbbbbbbb0;
    1032:	4f00                	lw	s0,24(a4)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	0010                	0x10
    resultkon[0] = 0xbbbbbbb1;
    1036:	2c00                	fld	fs0,24(s0)
    resultkon[0] = 0xccccccc0;
    1038:	5b01                	li	s6,-32
    103a:	8202                	jr	tp
    103c:	2c00                	fld	fs0,24(s0)
    103e:	5c01                	li	s8,-32
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1040:	8902                	jr	s2
    resultkon[0] = 0xccccccc0;
    1042:	2c00                	fld	fs0,24(s0)
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1044:	5d01                	li	s10,-32
    1046:	8202                	jr	tp
    1048:	2c00                	fld	fs0,24(s0)
    104a:	5e01                	li	t3,-32
    104c:	3001                	jal	84c <ext_euclid+0x1ca>
    104e:	2d00                	fld	fs0,24(a0)
    1050:	0b0c                	addi	a1,sp,400
    1052:	0000                	unimp
    1054:	00001427          	0x1427
    resultkon[0] = 0xccccccc1;	
    1058:	012c                	addi	a1,sp,136
    105a:	025c                	addi	a5,sp,260
            resultkon[0] = 0xDEDEDEDE;
    105c:	0072                	c.slli	zero,0x1c
    105e:	012c                	addi	a1,sp,136
    resultkon[0] = 0xccccccc1;	
    1060:	025d                	addi	tp,tp,23
    1062:	0085                	addi	ra,ra,1
            resultkon[0] = 0xDEDEDEDE;
    1064:	012c                	addi	a1,sp,136
    1066:	025e                	slli	tp,tp,0x17
    for(i = 0; i < 32; ++i){
    1068:	0086                	slli	ra,ra,0x1
    106a:	0000                	unimp
        if(!(message[i] == Dec_Message[i])){
    106c:	5d09                	li	s10,-30
    106e:	0000                	unimp
    1070:	7c00                	flw	fs0,56(s0)
    1072:	0010                	0x10
    1074:	0a00                	addi	s0,sp,272
    1076:	0069                	c.nop	26
    1078:	0000                	unimp
    107a:	0036                	c.slli	zero,0xd
            resultkon[0] = 0xBABABABA;
    107c:	5d09                	li	s10,-30
    107e:	0000                	unimp
    1080:	8f00                	0x8f00
    1082:	0010                	0x10
    1084:	3400                	fld	fs0,40(s0)
}
    1086:	0069                	c.nop	26
    1088:	0000                	unimp
    108a:	00000f93          	li	t6,0
    108e:	2f00                	fld	fs0,24(a4)
    1090:	0376                	slli	t1,t1,0x1d
    1092:	0000                	unimp
    1094:	5b01                	li	s6,-32
    1096:	0601                	addi	a2,a2,0
    1098:	00000b63          	beqz	zero,10ae <__CTOR_LIST__+0x6>
    109c:	0682                	c.slli64	a3
            resultkon[0] = 0xDEDEDEDE;
    109e:	0000                	unimp
    for(i = 0; i < 32; ++i){
    10a0:	02ae                	slli	t0,t0,0xb
    10a2:	0000                	unimp
    10a4:	9c01                	0x9c01
    10a6:	13a2                	slli	t2,t2,0x28
    10a8:	0000                	unimp
    10aa:	9531                	srai	a0,a0,0x2c
    10ac:	0006                	c.slli	zero,0x1
    10ae:	0100                	addi	s0,sp,128
    10b0:	6316015b          	0x6316015b
    10b4:	bd00000b          	0xbd00000b
    10b8:	0008                	0x8
    10ba:	3100                	fld	fs0,32(a0)
    10bc:	01b6                	slli	gp,gp,0xd
    10be:	0000                	unimp
    10c0:	5b01                	li	s6,-32
    10c2:	2201                	jal	11c2 <__DTOR_END__+0x10a>
    10c4:	00000b63          	beqz	zero,10da <__DTOR_END__+0x22>
    10c8:	0902                	c.slli64	s2
    10ca:	0000                	unimp
    10cc:	1231                	addi	tp,tp,-20
    10ce:	0000                	unimp
    10d0:	0100                	addi	s0,sp,128
    10d2:	5d2d015b          	0x5d2d015b
    10d6:	0000                	unimp
    10d8:	4700                	lw	s0,8(a4)
    10da:	0009                	c.nop	2
    10dc:	3000                	fld	fs0,32(s0)
    10de:	6f6d                	lui	t5,0x1b
    10e0:	0064                	addi	s1,sp,12
    10e2:	5b01                	li	s6,-32
    10e4:	3701                	jal	fe4 <main+0x74>
    10e6:	005d                	c.nop	23
    10e8:	0000                	unimp
    10ea:	0000098b          	0x98b
    10ee:	b826                	fsd	fs1,48(sp)
    10f0:	0002                	c.slli64	zero
    10f2:	0100                	addi	s0,sp,128
    10f4:	015d                	addi	sp,sp,23
    10f6:	630a                	flw	ft6,128(sp)
    10f8:	c200000b          	0xc200000b
    10fc:	0009                	c.nop	2
    10fe:	2a00                	fld	fs0,16(a2)
    1100:	004e                	c.slli	zero,0x13
    1102:	5e01                	li	t3,-32
    1104:	0901                	addi	s2,s2,0
    1106:	005d                	c.nop	23
    1108:	0000                	unimp
    110a:	09da                	slli	s3,s3,0x16
    110c:	0000                	unimp
    110e:	692a                	flw	fs2,136(sp)
    1110:	0100                	addi	s0,sp,128
    1112:	015e                	slli	sp,sp,0x17
    1114:	5d0c                	lw	a1,56(a0)
    1116:	0000                	unimp
    1118:	0800                	addi	s0,sp,16
    111a:	000a                	c.slli	zero,0x2
    111c:	2a00                	fld	fs0,16(a2)
    111e:	006a                	c.slli	zero,0x1a
    1120:	5e01                	li	t3,-32
    1122:	0f01                	addi	t5,t5,0
    1124:	005d                	c.nop	23
    1126:	0000                	unimp
    1128:	0c24                	addi	s1,sp,536
    112a:	0000                	unimp
    112c:	2b26                	fld	fs6,72(sp)
    112e:	0005                	c.nop	1
    1130:	0100                	addi	s0,sp,128
    1132:	015f a209 0013      	0x13a209015f
    1138:	4200                	lw	s0,0(a2)
    113a:	000c                	0xc
    113c:	2600                	fld	fs0,8(a2)
    113e:	059f 0000 6001      	0x60010000059f
    1144:	0901                	addi	s2,s2,0
    1146:	13b5                	addi	t2,t2,-19
    1148:	0000                	unimp
    114a:	0c62                	slli	s8,s8,0x18
    114c:	0000                	unimp
    114e:	722a                	flw	ft4,168(sp)
    1150:	0069                	c.nop	26
    1152:	6101                	0x6101
    1154:	0901                	addi	s2,s2,0
    1156:	13c8                	addi	a0,sp,484
    1158:	0000                	unimp
    115a:	0c82                	c.slli64	s9
    115c:	0000                	unimp
    115e:	4826                	lw	a6,72(sp)
    1160:	0004                	0x4
    1162:	0100                	addi	s0,sp,128
    1164:	db090163          	beq	s2,a6,706 <ext_euclid+0x84>
    1168:	a2000013          	li	zero,-1504
    116c:	000c                	0xc
    116e:	2a00                	fld	fs0,16(a2)
    1170:	6974                	flw	fa3,84(a0)
    1172:	0100                	addi	s0,sp,128
    1174:	0164                	addi	s1,sp,140
    1176:	ee09                	bnez	a2,1190 <__DTOR_END__+0xd8>
    1178:	d8000013          	li	zero,-640
    117c:	000c                	0xc
    117e:	2600                	fld	fs0,8(a2)
    1180:	0460                	addi	s0,sp,524
    1182:	0000                	unimp
    1184:	6501                	0x6501
    1186:	0901                	addi	s2,s2,0
    1188:	1401                	addi	s0,s0,-32
    118a:	0000                	unimp
    118c:	0cf8                	addi	a4,sp,604
    118e:	0000                	unimp
    1190:	4e26                	lw	t3,72(sp)
    1192:	0002                	c.slli64	zero
    1194:	0100                	addi	s0,sp,128
    1196:	0166                	slli	sp,sp,0x19
    1198:	1409                	addi	s0,s0,-30
    119a:	0014                	0x14
    119c:	2e00                	fld	fs0,24(a2)
    119e:	000d                	c.nop	3
    11a0:	2a00                	fld	fs0,16(a2)
    11a2:	6572                	flw	fa0,28(sp)
    11a4:	67010073          	0x67010073
    11a8:	0a01                	addi	s4,s4,0
    11aa:	00000b63          	beqz	zero,11c0 <__DTOR_END__+0x108>
    11ae:	0d88                	addi	a0,sp,720
    11b0:	0000                	unimp
    11b2:	7d26                	flw	fs10,104(sp)
    11b4:	0001                	nop
    11b6:	0100                	addi	s0,sp,128
    11b8:	0168                	addi	a0,sp,140
    11ba:	630a                	flw	ft6,128(sp)
    11bc:	a600000b          	0xa600000b
    11c0:	000d                	c.nop	3
    11c2:	2600                	fld	fs0,8(a2)
    11c4:	0182                	c.slli64	gp
    11c6:	0000                	unimp
    11c8:	6901                	0x6901
    11ca:	0a01                	addi	s4,s4,0
    11cc:	00000b63          	beqz	zero,11e2 <__DTOR_END__+0x12a>
    11d0:	0dc4                	addi	s1,sp,724
    11d2:	0000                	unimp
    11d4:	1926                	slli	s2,s2,0x29
    11d6:	0004                	0x4
    11d8:	0100                	addi	s0,sp,128
    11da:	016a                	slli	sp,sp,0x1a
    11dc:	5d09                	li	s10,-30
    11de:	0000                	unimp
    11e0:	e200                	fsw	fs0,0(a2)
    11e2:	000d                	c.nop	3
    11e4:	3300                	fld	fs0,32(a4)
    11e6:	0069                	c.nop	26
    11e8:	0000                	unimp
    11ea:	0e18                	addi	a4,sp,784
    11ec:	0000                	unimp
    11ee:	00006933          	or	s2,zero,zero
    11f2:	4600                	lw	s0,8(a2)
    11f4:	000e                	c.slli	zero,0x3
    11f6:	3300                	fld	fs0,32(a4)
    11f8:	0069                	c.nop	26
    11fa:	0000                	unimp
    11fc:	0e74                	addi	a3,sp,796
    11fe:	0000                	unimp
    1200:	00006933          	or	s2,zero,zero
    1204:	a200                	fsd	fs0,0(a2)
    1206:	000e                	c.slli	zero,0x3
    1208:	3300                	fld	fs0,32(a4)
    120a:	0069                	c.nop	26
    120c:	0000                	unimp
    120e:	0ed0                	addi	a2,sp,852
    1210:	0000                	unimp
    1212:	00006933          	or	s2,zero,zero
    1216:	fe00                	fsw	fs0,56(a2)
    1218:	000e                	c.slli	zero,0x3
    121a:	3300                	fld	fs0,32(a4)
    121c:	0069                	c.nop	26
    121e:	0000                	unimp
    1220:	0f2c                	addi	a1,sp,920
    1222:	0000                	unimp
    1224:	0006f22b          	0x6f22b
    1228:	7e00                	flw	fs0,56(a2)
    122a:	0019                	c.nop	6
    122c:	4500                	lw	s0,8(a0)
    122e:	0012                	c.slli	zero,0x4
    1230:	2c00                	fld	fs0,24(s0)
    1232:	5a01                	li	s4,-32
    1234:	8302                	jr	t1
    1236:	2c00                	fld	fs0,24(s0)
    1238:	5b01                	li	s6,-32
    123a:	5a01f303          	0x5a01f303
    123e:	012c                	addi	a1,sp,136
    1240:	025c                	addi	a5,sp,260
    1242:	0079                	c.nop	30
    1244:	2b00                	fld	fs0,16(a4)
    1246:	06fa                	slli	a3,a3,0x1e
    1248:	0000                	unimp
    124a:	197e                	slli	s2,s2,0x3f
    124c:	0000                	unimp
    124e:	1265                	addi	tp,tp,-7
    1250:	0000                	unimp
    1252:	012c                	addi	a1,sp,136
    1254:	025a                	slli	tp,tp,0x16
    1256:	0084                	addi	s1,sp,64
    1258:	012c                	addi	a1,sp,136
    125a:	008a025b          	0x8a025b
    125e:	012c                	addi	a1,sp,136
    1260:	025c                	addi	a5,sp,260
    1262:	0079                	c.nop	30
    1264:	2b00                	fld	fs0,16(a4)
    1266:	0754                	addi	a3,sp,900
    1268:	0000                	unimp
    126a:	00001427          	0x1427
    126e:	1291                	addi	t0,t0,-28
    1270:	0000                	unimp
    1272:	012c                	addi	a1,sp,136
    1274:	025a                	slli	tp,tp,0x16
    1276:	012c0083          	lb	ra,18(s8) # fffe2012 <_stack_start+0xfffd2012>
    127a:	0079025b          	0x79025b
    127e:	012c                	addi	a1,sp,136
    1280:	025c                	addi	a5,sp,260
    1282:	0084                	addi	s1,sp,64
    1284:	012c                	addi	a1,sp,136
    1286:	025d                	addi	tp,tp,23
    1288:	0079                	c.nop	30
    128a:	012c                	addi	a1,sp,136
    128c:	025e                	slli	tp,tp,0x17
    128e:	0082                	c.slli64	ra
    1290:	2b00                	fld	fs0,16(a4)
    1292:	077e                	slli	a4,a4,0x1f
    1294:	0000                	unimp
    1296:	00001427          	0x1427
    129a:	12bd                	addi	t0,t0,-17
    129c:	0000                	unimp
    129e:	012c                	addi	a1,sp,136
    12a0:	025a                	slli	tp,tp,0x16
    12a2:	0072                	c.slli	zero,0x1c
    12a4:	012c                	addi	a1,sp,136
    12a6:	0079025b          	0x79025b
    12aa:	012c                	addi	a1,sp,136
    12ac:	025c                	addi	a5,sp,260
    12ae:	0084                	addi	s1,sp,64
    12b0:	012c                	addi	a1,sp,136
    12b2:	025d                	addi	tp,tp,23
    12b4:	0079                	c.nop	30
    12b6:	012c                	addi	a1,sp,136
    12b8:	025e                	slli	tp,tp,0x17
    12ba:	0082                	c.slli64	ra
    12bc:	2b00                	fld	fs0,16(a4)
    12be:	0786                	slli	a5,a5,0x1
    12c0:	0000                	unimp
    12c2:	197e                	slli	s2,s2,0x3f
    12c4:	0000                	unimp
    12c6:	000012d7          	0x12d7
    12ca:	012c                	addi	a1,sp,136
    12cc:	025a                	slli	tp,tp,0x16
    12ce:	0088                	addi	a0,sp,64
    12d0:	012c                	addi	a1,sp,136
    12d2:	025c                	addi	a5,sp,260
    12d4:	0079                	c.nop	30
    12d6:	2b00                	fld	fs0,16(a4)
    12d8:	079c                	addi	a5,sp,960
    12da:	0000                	unimp
    12dc:	17f6                	slli	a5,a5,0x3d
    12de:	0000                	unimp
    12e0:	1308                	addi	a0,sp,416
    12e2:	0000                	unimp
    12e4:	012c                	addi	a1,sp,136
    12e6:	025a                	slli	tp,tp,0x16
    12e8:	0088                	addi	a0,sp,64
    12ea:	012c                	addi	a1,sp,136
    12ec:	0079025b          	0x79025b
    12f0:	012c                	addi	a1,sp,136
    12f2:	025c                	addi	a5,sp,260
    12f4:	0086                	slli	ra,ra,0x1
    12f6:	012c                	addi	a1,sp,136
    12f8:	025d                	addi	tp,tp,23
    12fa:	0079                	c.nop	30
    12fc:	012c                	addi	a1,sp,136
    12fe:	025e                	slli	tp,tp,0x17
    1300:	0082                	c.slli64	ra
    1302:	012c                	addi	a1,sp,136
    1304:	015f 0030 a42b      	0xa42b0030015f
    130a:	7e000007          	0x7e000007
    130e:	0019                	c.nop	6
    1310:	2200                	fld	fs0,0(a2)
    1312:	2c000013          	li	zero,704
    1316:	5a01                	li	s4,-32
    1318:	7202                	flw	ft4,32(sp)
    131a:	2c00                	fld	fs0,24(s0)
    131c:	5c01                	li	s8,-32
    131e:	7902                	flw	fs2,32(sp)
    1320:	0000                	unimp
    1322:	0007c22b          	0x7c22b
    1326:	7e00                	flw	fs0,56(a2)
    1328:	0019                	c.nop	6
    132a:	4200                	lw	s0,0(a2)
    132c:	2c000013          	li	zero,704
    1330:	5a01                	li	s4,-32
    1332:	8302                	jr	t1
    1334:	2c00                	fld	fs0,24(s0)
    1336:	5b01                	li	s6,-32
    1338:	8402                	jr	s0
    133a:	2c00                	fld	fs0,24(s0)
    133c:	5c01                	li	s8,-32
    133e:	7902                	flw	fs2,32(sp)
    1340:	0000                	unimp
    1342:	0007ca2b          	0x7ca2b
    1346:	7e00                	flw	fs0,56(a2)
    1348:	0019                	c.nop	6
    134a:	6200                	flw	fs0,0(a2)
    134c:	2c000013          	li	zero,704
    1350:	5a01                	li	s4,-32
    1352:	8402                	jr	s0
    1354:	2c00                	fld	fs0,24(s0)
    1356:	5b01                	li	s6,-32
    1358:	8702                	jr	a4
    135a:	2c00                	fld	fs0,24(s0)
    135c:	5c01                	li	s8,-32
    135e:	7902                	flw	fs2,32(sp)
    1360:	0000                	unimp
    1362:	0007d82b          	0x7d82b
    1366:	7e00                	flw	fs0,56(a2)
    1368:	0019                	c.nop	6
    136a:	8500                	0x8500
    136c:	2c000013          	li	zero,704
    1370:	5a01                	li	s4,-32
    1372:	0305                	addi	t1,t1,1
    1374:	1944                	addi	s1,sp,180
    1376:	0000                	unimp
    1378:	012c                	addi	a1,sp,136
    137a:	0086025b          	0x86025b
    137e:	012c                	addi	a1,sp,136
    1380:	025c                	addi	a5,sp,260
    1382:	0079                	c.nop	30
    1384:	2d00                	fld	fs0,24(a0)
    1386:	07e0                	addi	s0,sp,972
    1388:	0000                	unimp
    138a:	197e                	slli	s2,s2,0x3f
    138c:	0000                	unimp
    138e:	012c                	addi	a1,sp,136
    1390:	025a                	slli	tp,tp,0x16
    1392:	0086                	slli	ra,ra,0x1
    1394:	012c                	addi	a1,sp,136
    1396:	0089025b          	0x89025b
    139a:	012c                	addi	a1,sp,136
    139c:	025c                	addi	a5,sp,260
    139e:	0079                	c.nop	30
    13a0:	0000                	unimp
    13a2:	5d09                	li	s10,-30
    13a4:	0000                	unimp
    13a6:	b500                	fsd	fs0,40(a0)
    13a8:	34000013          	li	zero,832
    13ac:	0069                	c.nop	26
    13ae:	0000                	unimp
    13b0:	11e5                	addi	gp,gp,-7
    13b2:	0000                	unimp
    13b4:	0900                	addi	s0,sp,144
    13b6:	005d                	c.nop	23
    13b8:	0000                	unimp
    13ba:	13c8                	addi	a0,sp,484
    13bc:	0000                	unimp
    13be:	6934                	flw	fa3,80(a0)
    13c0:	0000                	unimp
    13c2:	ee00                	fsw	fs0,24(a2)
    13c4:	0011                	c.nop	4
    13c6:	0000                	unimp
    13c8:	5d09                	li	s10,-30
    13ca:	0000                	unimp
    13cc:	db00                	sw	s0,48(a4)
    13ce:	34000013          	li	zero,832
    13d2:	0069                	c.nop	26
    13d4:	0000                	unimp
    13d6:	000011f7          	0x11f7
    13da:	0900                	addi	s0,sp,144
    13dc:	005d                	c.nop	23
    13de:	0000                	unimp
    13e0:	13ee                	slli	t2,t2,0x3b
    13e2:	0000                	unimp
    13e4:	6934                	flw	fa3,80(a0)
    13e6:	0000                	unimp
    13e8:	0000                	unimp
    13ea:	0012                	c.slli	zero,0x4
    13ec:	0000                	unimp
    13ee:	5d09                	li	s10,-30
    13f0:	0000                	unimp
    13f2:	0100                	addi	s0,sp,128
    13f4:	0014                	0x14
    13f6:	3400                	fld	fs0,40(s0)
    13f8:	0069                	c.nop	26
    13fa:	0000                	unimp
    13fc:	1209                	addi	tp,tp,-30
    13fe:	0000                	unimp
    1400:	0900                	addi	s0,sp,144
    1402:	005d                	c.nop	23
    1404:	0000                	unimp
    1406:	1414                	addi	a3,sp,544
    1408:	0000                	unimp
    140a:	6934                	flw	fa3,80(a0)
    140c:	0000                	unimp
    140e:	1200                	addi	s0,sp,288
    1410:	0012                	c.slli	zero,0x4
    1412:	0000                	unimp
    1414:	5d09                	li	s10,-30
    1416:	0000                	unimp
    1418:	2700                	fld	fs0,8(a4)
    141a:	0014                	0x14
    141c:	3400                	fld	fs0,40(s0)
    141e:	0069                	c.nop	26
    1420:	0000                	unimp
    1422:	0000121b          	0x121b
    1426:	3500                	fld	fs0,40(a0)
    1428:	01ae                	slli	gp,gp,0xb
    142a:	0000                	unimp
    142c:	d001                	beqz	s0,132c <_bss_start+0xf0>
    142e:	6306                	flw	ft6,64(sp)
    1430:	4600000b          	0x4600000b
    1434:	0004                	0x4
    1436:	3c00                	fld	fs0,56(s0)
    1438:	0002                	c.slli64	zero
    143a:	0100                	addi	s0,sp,128
    143c:	149c                	addi	a5,sp,608
    143e:	0016                	c.slli	zero,0x5
    1440:	3600                	fld	fs0,40(a2)
    1442:	756e                	flw	fa0,248(sp)
    1444:	006d                	c.nop	27
    1446:	d001                	beqz	s0,1346 <_bss_start+0x10a>
    1448:	000b6313          	ori	t1,s6,0
    144c:	5a00                	lw	s0,48(a2)
    144e:	3700000f          	0x3700000f
    1452:	0106                	slli	sp,sp,0x1
    1454:	0000                	unimp
    1456:	d001                	beqz	s0,1356 <_bss_start+0x11a>
    1458:	5d1c                	lw	a5,56(a0)
    145a:	0000                	unimp
    145c:	8600                	0x8600
    145e:	3700000f          	0x3700000f
    1462:	00000677          	0x677
    1466:	d001                	beqz	s0,1366 <_bss_start+0x12a>
    1468:	6328                	flw	fa0,64(a4)
    146a:	d700000b          	0xd700000b
    146e:	3700000f          	0x3700000f
    1472:	0000069b          	0x69b
    1476:	d001                	beqz	s0,1376 <_bss_start+0x13a>
    1478:	00005d33          	srl	s10,zero,zero
    147c:	1c00                	addi	s0,sp,560
    147e:	0010                	0x10
    1480:	3600                	fld	fs0,40(a2)
    1482:	6f6d                	lui	t5,0x1b
    1484:	0064                	addi	s1,sp,12
    1486:	d001                	beqz	s0,1386 <_bss_start+0x14a>
    1488:	00005d3f 00105300 	0x10530000005d3f
    1490:	3800                	fld	fs0,48(s0)
    1492:	0075                	c.nop	29
    1494:	d201                	beqz	a2,1394 <_bss_start+0x158>
    1496:	5d09                	li	s10,-30
    1498:	0000                	unimp
    149a:	8a00                	0x8a00
    149c:	0010                	0x10
    149e:	3800                	fld	fs0,48(s0)
    14a0:	0064                	addi	s1,sp,12
    14a2:	d201                	beqz	a2,13a2 <_bss_start+0x166>
    14a4:	00005d0b          	0x5d0b
    14a8:	b300                	fsd	fs0,32(a4)
    14aa:	0010                	0x10
    14ac:	3900                	fld	fs0,48(a0)
    14ae:	3264                	fld	fs1,224(a2)
    14b0:	0100                	addi	s0,sp,128
    14b2:	0dd2                	slli	s11,s11,0x14
    14b4:	005d                	c.nop	23
    14b6:	0000                	unimp
    14b8:	6938                	flw	fa4,80(a0)
    14ba:	0100                	addi	s0,sp,128
    14bc:	10d2                	slli	ra,ra,0x34
    14be:	005d                	c.nop	23
    14c0:	0000                	unimp
    14c2:	10d1                	addi	ra,ra,-12
    14c4:	0000                	unimp
    14c6:	6239                	lui	tp,0xe
    14c8:	4e5f 0100 12d2      	0x12d201004e5f
    14ce:	005d                	c.nop	23
    14d0:	0000                	unimp
    14d2:	7238                	flw	fa4,96(a2)
    14d4:	645f 0100 16d2      	0x16d20100645f
    14da:	005d                	c.nop	23
    14dc:	0000                	unimp
    14de:	12ba                	slli	t0,t0,0x2e
    14e0:	0000                	unimp
    14e2:	a83a                	fsd	fa4,16(sp)
    14e4:	0002                	c.slli64	zero
    14e6:	0100                	addi	s0,sp,128
    14e8:	0b630ad3          	fsub.d	fs5,ft6,fs6,rne
    14ec:	0000                	unimp
    14ee:	12d8                	addi	a4,sp,356
    14f0:	0000                	unimp
    14f2:	7638                	flw	fa4,104(a2)
    14f4:	0100                	addi	s0,sp,128
    14f6:	09d5                	addi	s3,s3,21
    14f8:	1614                	addi	a3,sp,800
    14fa:	0000                	unimp
    14fc:	12f0                	addi	a2,sp,364
    14fe:	0000                	unimp
    1500:	7138                	flw	fa4,96(a0)
    1502:	0100                	addi	s0,sp,128
    1504:	09d6                	slli	s3,s3,0x15
    1506:	00001627          	0x1627
    150a:	1310                	addi	a2,sp,416
    150c:	0000                	unimp
    150e:	a63a                	fsd	fa4,264(sp)
    1510:	0001                	nop
    1512:	0100                	addi	s0,sp,128
    1514:	0b630ad7          	0xb630ad7
    1518:	0000                	unimp
    151a:	1330                	addi	a2,sp,424
    151c:	0000                	unimp
    151e:	4a3a                	lw	s4,140(sp)
    1520:	0002                	c.slli64	zero
    1522:	0100                	addi	s0,sp,128
    1524:	09d8                	addi	a4,sp,212
    1526:	163a                	slli	a2,a2,0x2e
    1528:	0000                	unimp
    152a:	134e                	slli	t1,t1,0x33
    152c:	0000                	unimp
    152e:	483a                	lw	a6,140(sp)
    1530:	0002                	c.slli64	zero
    1532:	0100                	addi	s0,sp,128
    1534:	09d9                	addi	s3,s3,22
    1536:	164d                	addi	a2,a2,-13
    1538:	0000                	unimp
    153a:	1392                	slli	t2,t2,0x24
    153c:	0000                	unimp
    153e:	00006933          	or	s2,zero,zero
    1542:	f700                	fsw	fs0,40(a4)
    1544:	33000013          	li	zero,816
    1548:	0069                	c.nop	26
    154a:	0000                	unimp
    154c:	1425                	addi	s0,s0,-23
    154e:	0000                	unimp
    1550:	00006933          	or	s2,zero,zero
    1554:	5300                	lw	s0,32(a4)
    1556:	0014                	0x14
    1558:	3300                	fld	fs0,32(a4)
    155a:	0069                	c.nop	26
    155c:	0000                	unimp
    155e:	1481                	addi	s1,s1,-32
    1560:	0000                	unimp
    1562:	0004a22b          	0x4a22b
    1566:	7e00                	flw	fs0,56(a2)
    1568:	0019                	c.nop	6
    156a:	8300                	0x8300
    156c:	0015                	c.nop	5
    156e:	2c00                	fld	fs0,24(s0)
    1570:	5a01                	li	s4,-32
    1572:	8a02                	jr	s4
    1574:	2c00                	fld	fs0,24(s0)
    1576:	5b01                	li	s6,-32
    1578:	5a01f303          	0x5a01f303
    157c:	012c                	addi	a1,sp,136
    157e:	025c                	addi	a5,sp,260
    1580:	0079                	c.nop	30
    1582:	2b00                	fld	fs0,16(a4)
    1584:	04b6                	slli	s1,s1,0xd
    1586:	0000                	unimp
    1588:	197e                	slli	s2,s2,0x3f
    158a:	0000                	unimp
    158c:	000015a3          	sh	zero,11(zero) # b <__DYNAMIC+0xb>
    1590:	012c                	addi	a1,sp,136
    1592:	025a                	slli	tp,tp,0x16
    1594:	0072                	c.slli	zero,0x1c
    1596:	012c                	addi	a1,sp,136
    1598:	008b025b          	0x8b025b
    159c:	012c                	addi	a1,sp,136
    159e:	025c                	addi	a5,sp,260
    15a0:	0088                	addi	a0,sp,64
    15a2:	2b00                	fld	fs0,16(a4)
    15a4:	055a                	slli	a0,a0,0x16
    15a6:	0000                	unimp
    15a8:	197e                	slli	s2,s2,0x3f
    15aa:	0000                	unimp
    15ac:	15c6                	slli	a1,a1,0x31
    15ae:	0000                	unimp
    15b0:	012c                	addi	a1,sp,136
    15b2:	055a                	slli	a0,a0,0x16
    15b4:	0016ec03          	0x16ec03
    15b8:	2c00                	fld	fs0,24(s0)
    15ba:	5b01                	li	s6,-32
    15bc:	8402                	jr	s0
    15be:	2c00                	fld	fs0,24(s0)
    15c0:	5c01                	li	s8,-32
    15c2:	7902                	flw	fs2,32(sp)
    15c4:	0000                	unimp
    15c6:	0005b82b          	0x5b82b
    15ca:	f600                	fsw	fs0,40(a2)
    15cc:	f7000017          	auipc	zero,0xf7000
    15d0:	0015                	c.nop	5
    15d2:	2c00                	fld	fs0,24(s0)
    15d4:	5a01                	li	s4,-32
    15d6:	7202                	flw	ft4,32(sp)
    15d8:	2c00                	fld	fs0,24(s0)
    15da:	5b01                	li	s6,-32
    15dc:	8802                	jr	a6
    15de:	2c00                	fld	fs0,24(s0)
    15e0:	5c01                	li	s8,-32
    15e2:	8302                	jr	t1
    15e4:	2c00                	fld	fs0,24(s0)
    15e6:	5d01                	li	s10,-32
    15e8:	8802                	jr	a6
    15ea:	2c00                	fld	fs0,24(s0)
    15ec:	5e01                	li	t3,-32
    15ee:	8902                	jr	s2
    15f0:	2c00                	fld	fs0,24(s0)
    15f2:	5f01                	li	t5,-32
    15f4:	3001                	jal	df4 <memcpy+0xa>
    15f6:	2d00                	fld	fs0,24(a0)
    15f8:	05d8                	addi	a4,sp,708
    15fa:	0000                	unimp
    15fc:	1a1a                	slli	s4,s4,0x26
    15fe:	0000                	unimp
    1600:	012c                	addi	a1,sp,136
    1602:	025a                	slli	tp,tp,0x16
    1604:	0084                	addi	s1,sp,64
    1606:	012c                	addi	a1,sp,136
    1608:	0083025b          	0x83025b
    160c:	012c                	addi	a1,sp,136
    160e:	025c                	addi	a5,sp,260
    1610:	0079                	c.nop	30
    1612:	0000                	unimp
    1614:	5d09                	li	s10,-30
    1616:	0000                	unimp
    1618:	2700                	fld	fs0,8(a4)
    161a:	0016                	c.slli	zero,0x5
    161c:	3400                	fld	fs0,40(s0)
    161e:	0069                	c.nop	26
    1620:	0000                	unimp
    1622:	153e                	slli	a0,a0,0x2f
    1624:	0000                	unimp
    1626:	0900                	addi	s0,sp,144
    1628:	005d                	c.nop	23
    162a:	0000                	unimp
    162c:	163a                	slli	a2,a2,0x2e
    162e:	0000                	unimp
    1630:	6934                	flw	fa3,80(a0)
    1632:	0000                	unimp
    1634:	4700                	lw	s0,8(a4)
    1636:	0015                	c.nop	5
    1638:	0000                	unimp
    163a:	5d09                	li	s10,-30
    163c:	0000                	unimp
    163e:	4d00                	lw	s0,24(a0)
    1640:	0016                	c.slli	zero,0x5
    1642:	3400                	fld	fs0,40(s0)
    1644:	0069                	c.nop	26
    1646:	0000                	unimp
    1648:	1550                	addi	a2,sp,676
    164a:	0000                	unimp
    164c:	0900                	addi	s0,sp,144
    164e:	005d                	c.nop	23
    1650:	0000                	unimp
    1652:	1660                	addi	s0,sp,812
    1654:	0000                	unimp
    1656:	6934                	flw	fa3,80(a0)
    1658:	0000                	unimp
    165a:	5900                	lw	s0,48(a0)
    165c:	0015                	c.nop	5
    165e:	0000                	unimp
    1660:	2a35                	jal	179c <result+0xb0>
    1662:	0000                	unimp
    1664:	0100                	addi	s0,sp,128
    1666:	0b630697          	auipc	a3,0xb630
    166a:	0000                	unimp
    166c:	02e8                	addi	a0,sp,332
    166e:	0000                	unimp
    1670:	015e                	slli	sp,sp,0x17
    1672:	0000                	unimp
    1674:	9c01                	0x9c01
    1676:	17b4                	addi	a3,sp,1000
    1678:	0000                	unimp
    167a:	6136                	flw	ft2,76(sp)
    167c:	0100                	addi	s0,sp,128
    167e:	0b631597          	auipc	a1,0xb631
    1682:	0000                	unimp
    1684:	14d6                	slli	s1,s1,0x35
    1686:	0000                	unimp
    1688:	0006ea37          	lui	s4,0x6e
    168c:	0100                	addi	s0,sp,128
    168e:	005d1c97          	auipc	s9,0x5d1
    1692:	0000                	unimp
    1694:	0000151b          	0x151b
    1698:	6236                	flw	ft4,76(sp)
    169a:	0100                	addi	s0,sp,128
    169c:	0b632997          	auipc	s3,0xb632
    16a0:	0000                	unimp
    16a2:	156c                	addi	a1,sp,684
    16a4:	0000                	unimp
    16a6:	0006f137          	lui	sp,0x6f
    16aa:	0100                	addi	s0,sp,128
    16ac:	005d3097          	auipc	ra,0x5d3
    16b0:	0000                	unimp
    16b2:	15bc                	addi	a5,sp,744
    16b4:	0000                	unimp
    16b6:	00051b37          	lui	s6,0x51
    16ba:	0100                	addi	s0,sp,128
    16bc:	005d3c97          	auipc	s9,0x5d3
    16c0:	0000                	unimp
    16c2:	000015f3          	csrrw	a1,ustatus,zero
    16c6:	333a                	fld	ft6,424(sp)
    16c8:	0006                	c.slli	zero,0x1
    16ca:	0100                	addi	s0,sp,128
    16cc:	0999                	addi	s3,s3,6
    16ce:	17b4                	addi	a3,sp,1000
    16d0:	0000                	unimp
    16d2:	162a                	slli	a2,a2,0x2a
    16d4:	0000                	unimp
    16d6:	6938                	flw	fa4,80(a0)
    16d8:	0100                	addi	s0,sp,128
    16da:	099a                	slli	s3,s3,0x6
    16dc:	005d                	c.nop	23
    16de:	0000                	unimp
    16e0:	166e                	slli	a2,a2,0x3b
    16e2:	0000                	unimp
    16e4:	6a38                	flw	fa4,80(a2)
    16e6:	0100                	addi	s0,sp,128
    16e8:	0b9a                	slli	s7,s7,0x6
    16ea:	005d                	c.nop	23
    16ec:	0000                	unimp
    16ee:	16ae                	slli	a3,a3,0x2b
    16f0:	0000                	unimp
    16f2:	6b38                	flw	fa4,80(a4)
    16f4:	0100                	addi	s0,sp,128
    16f6:	0d9a                	slli	s11,s11,0x6
    16f8:	005d                	c.nop	23
    16fa:	0000                	unimp
    16fc:	16e2                	slli	a3,a3,0x38
    16fe:	0000                	unimp
    1700:	983a                	add	a6,a6,a4
    1702:	0002                	c.slli64	zero
    1704:	0100                	addi	s0,sp,128
    1706:	0b630a9b          	0xb630a9b
    170a:	0000                	unimp
    170c:	1730                	addi	a2,sp,936
    170e:	0000                	unimp
    1710:	0c3a                	slli	s8,s8,0xe
    1712:	0000                	unimp
    1714:	0100                	addi	s0,sp,128
    1716:	099c                	addi	a5,sp,208
    1718:	17d0                	addi	a2,sp,996
    171a:	0000                	unimp
    171c:	1748                	addi	a0,sp,932
    171e:	0000                	unimp
    1720:	923a                	add	tp,tp,a4
    1722:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1726:	099d                	addi	s3,s3,7
    1728:	000017e3          	bnez	zero,1f36 <random_keys+0x462>
    172c:	1768                	addi	a0,sp,940
    172e:	0000                	unimp
    1730:	00006933          	or	s2,zero,zero
    1734:	b500                	fsd	fs0,40(a0)
    1736:	33000017          	auipc	zero,0x33000
    173a:	0069                	c.nop	26
    173c:	0000                	unimp
    173e:	180a                	slli	a6,a6,0x22
    1740:	0000                	unimp
    1742:	00006933          	or	s2,zero,zero
    1746:	5d00                	lw	s0,56(a0)
    1748:	0018                	0x18
    174a:	3300                	fld	fs0,32(a4)
    174c:	0069                	c.nop	26
    174e:	0000                	unimp
    1750:	0000188b          	0x188b
    1754:	00036a2b          	0x36a2b
    1758:	7e00                	flw	fs0,56(a2)
    175a:	0019                	c.nop	6
    175c:	7500                	flw	fs0,40(a0)
    175e:	2c000017          	auipc	zero,0x2c000
    1762:	5a01                	li	s4,-32
    1764:	8a02                	jr	s4
    1766:	2c00                	fld	fs0,24(s0)
    1768:	5b01                	li	s6,-32
    176a:	5a01f303          	0x5a01f303
    176e:	012c                	addi	a1,sp,136
    1770:	025c                	addi	a5,sp,260
    1772:	0188                	addi	a0,sp,192
    1774:	2b00                	fld	fs0,16(a4)
    1776:	0376                	slli	t1,t1,0x1d
    1778:	0000                	unimp
    177a:	197e                	slli	s2,s2,0x3f
    177c:	0000                	unimp
    177e:	00001797          	auipc	a5,0x1
    1782:	012c                	addi	a1,sp,136
    1784:	025a                	slli	tp,tp,0x16
    1786:	0072                	c.slli	zero,0x1c
    1788:	012c                	addi	a1,sp,136
    178a:	bc78045b          	0xbc78045b
    178e:	067f                	0x67f
    1790:	012c                	addi	a1,sp,136
    1792:	025c                	addi	a5,sp,260
    1794:	0084                	addi	s1,sp,64
    1796:	2d00                	fld	fs0,24(a0)
    1798:	0440                	addi	s0,sp,516
    179a:	0000                	unimp
    179c:	1a1a                	slli	s4,s4,0x26
    179e:	0000                	unimp
    17a0:	012c                	addi	a1,sp,136
    17a2:	025a                	slli	tp,tp,0x16
    17a4:	0082                	c.slli64	ra
    17a6:	012c                	addi	a1,sp,136
    17a8:	0089025b          	0x89025b
    17ac:	012c                	addi	a1,sp,136
    17ae:	025c                	addi	a5,sp,260
    17b0:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    17b4:	5d09                	li	s10,-30
    17b6:	0000                	unimp
    17b8:	d000                	sw	s0,32(s0)
    17ba:	34000017          	auipc	zero,0x34000
    17be:	0069                	c.nop	26
    17c0:	0000                	unimp
    17c2:	1730                	addi	a2,sp,936
    17c4:	0000                	unimp
    17c6:	6934                	flw	fa3,80(a0)
    17c8:	0000                	unimp
    17ca:	3900                	fld	fs0,48(a0)
    17cc:	00000017          	auipc	zero,0x0
    17d0:	5d09                	li	s10,-30
    17d2:	0000                	unimp
    17d4:	e300                	fsw	fs0,0(a4)
    17d6:	34000017          	auipc	zero,0x34000
    17da:	0069                	c.nop	26
    17dc:	0000                	unimp
    17de:	1742                	slli	a4,a4,0x30
    17e0:	0000                	unimp
    17e2:	0900                	addi	s0,sp,144
    17e4:	005d                	c.nop	23
    17e6:	0000                	unimp
    17e8:	17f6                	slli	a5,a5,0x3d
    17ea:	0000                	unimp
    17ec:	6934                	flw	fa3,80(a0)
    17ee:	0000                	unimp
    17f0:	4b00                	lw	s0,16(a4)
    17f2:	00000017          	auipc	zero,0x0
    17f6:	0d35                	addi	s10,s10,13
    17f8:	0001                	nop
    17fa:	0100                	addi	s0,sp,128
    17fc:	0649                	addi	a2,a2,18
    17fe:	00000b63          	beqz	zero,1814 <result+0x128>
    1802:	00dc                	addi	a5,sp,68
    1804:	0000                	unimp
    1806:	020c                	addi	a1,sp,256
    1808:	0000                	unimp
    180a:	9c01                	0x9c01
    180c:	193c                	addi	a5,sp,184
    180e:	0000                	unimp
    1810:	6136                	flw	ft2,76(sp)
    1812:	0100                	addi	s0,sp,128
    1814:	1449                	addi	s0,s0,-14
    1816:	00000b63          	beqz	zero,182c <result+0x140>
    181a:	18e0                	addi	s0,sp,124
    181c:	0000                	unimp
    181e:	0006ea37          	lui	s4,0x6e
    1822:	0100                	addi	s0,sp,128
    1824:	1b49                	addi	s6,s6,-14
    1826:	005d                	c.nop	23
    1828:	0000                	unimp
    182a:	1925                	addi	s2,s2,-23
    182c:	0000                	unimp
    182e:	6236                	flw	ft4,76(sp)
    1830:	0100                	addi	s0,sp,128
    1832:	2849                	jal	18c4 <result+0x1d8>
    1834:	00000b63          	beqz	zero,184a <result+0x15e>
    1838:	1975                	addi	s2,s2,-3
    183a:	0000                	unimp
    183c:	0006f137          	lui	sp,0x6f
    1840:	0100                	addi	s0,sp,128
    1842:	2f49                	jal	1fd4 <_bss_end+0x8>
    1844:	005d                	c.nop	23
    1846:	0000                	unimp
    1848:	19de                	slli	s3,s3,0x37
    184a:	0000                	unimp
    184c:	6d36                	flw	fs10,76(sp)
    184e:	0100646f          	jal	s0,785e <_stack_len+0x385e>
    1852:	3b49                	jal	15e4 <product2+0x150>
    1854:	005d                	c.nop	23
    1856:	0000                	unimp
    1858:	1a15                	addi	s4,s4,-27
    185a:	0000                	unimp
    185c:	00051b37          	lui	s6,0x51
    1860:	0100                	addi	s0,sp,128
    1862:	4449                	li	s0,18
    1864:	005d                	c.nop	23
    1866:	0000                	unimp
    1868:	1a62                	slli	s4,s4,0x38
    186a:	0000                	unimp
    186c:	333a                	fld	ft6,424(sp)
    186e:	0006                	c.slli	zero,0x1
    1870:	0100                	addi	s0,sp,128
    1872:	094c                	addi	a1,sp,148
    1874:	193c                	addi	a5,sp,184
    1876:	0000                	unimp
    1878:	00001a8f          	0x1a8f
    187c:	6938                	flw	fa4,80(a0)
    187e:	0100                	addi	s0,sp,128
    1880:	094d                	addi	s2,s2,19
    1882:	005d                	c.nop	23
    1884:	0000                	unimp
    1886:	00001ad3          	fadd.s	fs5,ft0,ft0,rtz
    188a:	6a38                	flw	fa4,80(a2)
    188c:	0100                	addi	s0,sp,128
    188e:	0b4d                	addi	s6,s6,19
    1890:	005d                	c.nop	23
    1892:	0000                	unimp
    1894:	1b9f 0000 6b38      	0x6b3800001b9f
    189a:	0100                	addi	s0,sp,128
    189c:	0d4d                	addi	s10,s10,19
    189e:	005d                	c.nop	23
    18a0:	0000                	unimp
    18a2:	1c3a                	slli	s8,s8,0x2e
    18a4:	0000                	unimp
    18a6:	883a                	mv	a6,a4
    18a8:	0002                	c.slli64	zero
    18aa:	0100                	addi	s0,sp,128
    18ac:	0a4e                	slli	s4,s4,0x13
    18ae:	00000b63          	beqz	zero,18c4 <result+0x1d8>
    18b2:	1c88                	addi	a0,sp,624
    18b4:	0000                	unimp
    18b6:	0c3a                	slli	s8,s8,0xe
    18b8:	0000                	unimp
    18ba:	0100                	addi	s0,sp,128
    18bc:	1958094f          	fnmadd.s	fs2,fa6,fs5,ft3,rne
    18c0:	0000                	unimp
    18c2:	1ca0                	addi	s0,sp,632
    18c4:	0000                	unimp
    18c6:	923a                	add	tp,tp,a4
    18c8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18cc:	0950                	addi	a2,sp,148
    18ce:	0000196b          	0x196b
    18d2:	1cd8                	addi	a4,sp,628
    18d4:	0000                	unimp
    18d6:	00006933          	or	s2,zero,zero
    18da:	4800                	lw	s0,16(s0)
    18dc:	001d                	c.nop	7
    18de:	3300                	fld	fs0,32(a4)
    18e0:	0069                	c.nop	26
    18e2:	0000                	unimp
    18e4:	1d9d                	addi	s11,s11,-25
    18e6:	0000                	unimp
    18e8:	00006933          	or	s2,zero,zero
    18ec:	d000                	sw	s0,32(s0)
    18ee:	001d                	c.nop	7
    18f0:	3300                	fld	fs0,32(a4)
    18f2:	0069                	c.nop	26
    18f4:	0000                	unimp
    18f6:	1dff                	0x1dff
    18f8:	0000                	unimp
    18fa:	00016e2b          	0x16e2b
    18fe:	7e00                	flw	fs0,56(a2)
    1900:	0019                	c.nop	6
    1902:	1d00                	addi	s0,sp,688
    1904:	0019                	c.nop	6
    1906:	2c00                	fld	fs0,24(s0)
    1908:	5a01                	li	s4,-32
    190a:	8602                	jr	a2
    190c:	2c00                	fld	fs0,24(s0)
    190e:	5b01                	li	s6,-32
    1910:	5a01f303          	0x5a01f303
    1914:	012c                	addi	a1,sp,136
    1916:	045c                	addi	a5,sp,516
    1918:	b478                	fsd	fa4,232(s0)
    191a:	067f                	0x67f
    191c:	2d00                	fld	fs0,24(a0)
    191e:	0186                	slli	gp,gp,0x1
    1920:	0000                	unimp
    1922:	197e                	slli	s2,s2,0x3f
    1924:	0000                	unimp
    1926:	012c                	addi	a1,sp,136
    1928:	025a                	slli	tp,tp,0x16
    192a:	0072                	c.slli	zero,0x1c
    192c:	012c                	addi	a1,sp,136
    192e:	b078045b          	0xb078045b
    1932:	067f                	0x67f
    1934:	012c                	addi	a1,sp,136
    1936:	025c                	addi	a5,sp,260
    1938:	0082                	c.slli64	ra
    193a:	0000                	unimp
    193c:	5d09                	li	s10,-30
    193e:	0000                	unimp
    1940:	5800                	lw	s0,48(s0)
    1942:	0019                	c.nop	6
    1944:	3400                	fld	fs0,40(s0)
    1946:	0069                	c.nop	26
    1948:	0000                	unimp
    194a:	18d6                	slli	a7,a7,0x35
    194c:	0000                	unimp
    194e:	6934                	flw	fa3,80(a0)
    1950:	0000                	unimp
    1952:	df00                	sw	s0,56(a4)
    1954:	0018                	0x18
    1956:	0000                	unimp
    1958:	5d09                	li	s10,-30
    195a:	0000                	unimp
    195c:	6b00                	flw	fs0,16(a4)
    195e:	0019                	c.nop	6
    1960:	3400                	fld	fs0,40(s0)
    1962:	0069                	c.nop	26
    1964:	0000                	unimp
    1966:	18e8                	addi	a0,sp,124
    1968:	0000                	unimp
    196a:	0900                	addi	s0,sp,144
    196c:	005d                	c.nop	23
    196e:	0000                	unimp
    1970:	197e                	slli	s2,s2,0x3f
    1972:	0000                	unimp
    1974:	6934                	flw	fa3,80(a0)
    1976:	0000                	unimp
    1978:	f100                	fsw	fs0,32(a0)
    197a:	0018                	0x18
    197c:	0000                	unimp
    197e:	0003be3b          	0x3be3b
    1982:	0100                	addi	s0,sp,128
    1984:	063d                	addi	a2,a2,15
    1986:	00ba                	slli	ra,ra,0xe
    1988:	0000                	unimp
    198a:	0022                	c.slli	zero,0x8
    198c:	0000                	unimp
    198e:	9c01                	0x9c01
    1990:	19f0                	addi	a2,sp,252
    1992:	0000                	unimp
    1994:	613c                	flw	fa5,64(a0)
    1996:	0031                	c.nop	12
    1998:	3d01                	jal	17a8 <result+0xbc>
    199a:	6315                	lui	t1,0x5
    199c:	0100000b          	0x100000b
    19a0:	3c5a                	fld	fs8,432(sp)
    19a2:	3261                	jal	132a <_bss_start+0xee>
    19a4:	0100                	addi	s0,sp,128
    19a6:	1d3d                	addi	s10,s10,-17
    19a8:	00000b63          	beqz	zero,19be <ti_2+0x7a>
    19ac:	5b01                	li	s6,-32
    19ae:	00054e37          	lui	t3,0x54
    19b2:	0100                	addi	s0,sp,128
    19b4:	243d                	jal	1be2 <random_keys+0x10e>
    19b6:	005d                	c.nop	23
    19b8:	0000                	unimp
    19ba:	1e54                	addi	a3,sp,820
    19bc:	0000                	unimp
    19be:	6938                	flw	fa4,80(a0)
    19c0:	0100                	addi	s0,sp,128
    19c2:	053e                	slli	a0,a0,0xf
    19c4:	005d                	c.nop	23
    19c6:	0000                	unimp
    19c8:	1e75                	addi	t3,t3,-3
    19ca:	0000                	unimp
    19cc:	f03d                	bnez	s0,1932 <result+0x246>
    19ce:	0019                	c.nop	6
    19d0:	ce00                	sw	s0,24(a2)
    19d2:	0000                	unimp
    19d4:	0a00                	addi	s0,sp,272
    19d6:	0000                	unimp
    19d8:	0100                	addi	s0,sp,128
    19da:	0940                	addi	s0,sp,148
    19dc:	083e                	slli	a6,a6,0xf
    19de:	001a                	c.slli	zero,0x6
    19e0:	9400                	0x9400
    19e2:	001e                	c.slli	zero,0x7
    19e4:	3e00                	fld	fs0,56(a2)
    19e6:	19fd                	addi	s3,s3,-1
    19e8:	0000                	unimp
    19ea:	00001eb7          	lui	t4,0x1
    19ee:	0000                	unimp
    19f0:	00064d3f 062b0100 	0x62b010000064d3f
    19f8:	1401                	addi	s0,s0,-32
    19fa:	001a                	c.slli	zero,0x6
    19fc:	4000                	lw	s0,0(s0)
    19fe:	3161                	jal	1686 <product2+0x1f2>
    1a00:	0100                	addi	s0,sp,128
    1a02:	1a141e2b          	0x1a141e2b
    1a06:	0000                	unimp
    1a08:	6140                	flw	fs0,4(a0)
    1a0a:	0032                	c.slli	zero,0xc
    1a0c:	2b01                	jal	1f1c <random_keys+0x448>
    1a0e:	1430                	addi	a2,sp,552
    1a10:	001a                	c.slli	zero,0x6
    1a12:	0000                	unimp
    1a14:	0410                	addi	a2,sp,512
    1a16:	0069                	c.nop	26
    1a18:	0000                	unimp
    1a1a:	0005693b          	0x5693b
    1a1e:	0100                	addi	s0,sp,128
    1a20:	00920623          	sb	s1,12(tp) # e00c <_stack+0xc>
    1a24:	0000                	unimp
    1a26:	0022                	c.slli	zero,0x8
    1a28:	0000                	unimp
    1a2a:	9c01                	0x9c01
    1a2c:	1a8c                	addi	a1,sp,368
    1a2e:	0000                	unimp
    1a30:	613c                	flw	fa5,64(a0)
    1a32:	0031                	c.nop	12
    1a34:	2301                	jal	1f34 <random_keys+0x460>
    1a36:	6315                	lui	t1,0x5
    1a38:	0100000b          	0x100000b
    1a3c:	3c5a                	fld	fs8,432(sp)
    1a3e:	3261                	jal	13c6 <_bss_start+0x18a>
    1a40:	0100                	addi	s0,sp,128
    1a42:	0b631e23          	sh	s6,188(t1) # 50bc <_stack_len+0x10bc>
    1a46:	0000                	unimp
    1a48:	5b01                	li	s6,-32
    1a4a:	00054e37          	lui	t3,0x54
    1a4e:	0100                	addi	s0,sp,128
    1a50:	005d2623          	sw	t0,12(s10) # 5c12 <_stack_len+0x1c12>
    1a54:	0000                	unimp
    1a56:	1eda                	slli	t4,t4,0x36
    1a58:	0000                	unimp
    1a5a:	6938                	flw	fa4,80(a0)
    1a5c:	0100                	addi	s0,sp,128
    1a5e:	0524                	addi	s1,sp,648
    1a60:	005d                	c.nop	23
    1a62:	0000                	unimp
    1a64:	00001efb          	0x1efb
    1a68:	8c3d                	xor	s0,s0,a5
    1a6a:	001a                	c.slli	zero,0x6
    1a6c:	a600                	fsd	fs0,8(a2)
    1a6e:	0000                	unimp
    1a70:	0a00                	addi	s0,sp,272
    1a72:	0000                	unimp
    1a74:	0100                	addi	s0,sp,128
    1a76:	0926                	slli	s2,s2,0x9
    1a78:	a43e                	fsd	fa5,8(sp)
    1a7a:	001a                	c.slli	zero,0x6
    1a7c:	1a00                	addi	s0,sp,304
    1a7e:	001f 3e00 1a99      	0x1a993e00001f
    1a84:	0000                	unimp
    1a86:	1f3d                	addi	t5,t5,-17
    1a88:	0000                	unimp
    1a8a:	0000                	unimp
    1a8c:	00003a3f 060f0100 	0x60f010000003a3f
    1a94:	b001                	j	1294 <_bss_start+0x58>
    1a96:	001a                	c.slli	zero,0x6
    1a98:	4000                	lw	s0,0(s0)
    1a9a:	3161                	jal	1722 <result+0x36>
    1a9c:	0100                	addi	s0,sp,128
    1a9e:	1a141e0f          	0x1a141e0f
    1aa2:	0000                	unimp
    1aa4:	6140                	flw	fs0,4(a0)
    1aa6:	0032                	c.slli	zero,0xc
    1aa8:	0f01                	addi	t5,t5,0
    1aaa:	1430                	addi	a2,sp,552
    1aac:	001a                	c.slli	zero,0x6
    1aae:	0000                	unimp
    1ab0:	8c41                	or	s0,s0,s0
    1ab2:	001a                	c.slli	zero,0x6
    1ab4:	8c00                	0x8c00
    1ab6:	0000                	unimp
    1ab8:	0600                	addi	s0,sp,768
    1aba:	0000                	unimp
    1abc:	0100                	addi	s0,sp,128
    1abe:	d49c                	sw	a5,40(s1)
    1ac0:	001a                	c.slli	zero,0x6
    1ac2:	3e00                	fld	fs0,56(a2)
    1ac4:	1a99                	addi	s5,s5,-26
    1ac6:	0000                	unimp
    1ac8:	1f60                	addi	s0,sp,956
    1aca:	0000                	unimp
    1acc:	a442                	fsd	fa6,8(sp)
    1ace:	001a                	c.slli	zero,0x6
    1ad0:	0100                	addi	s0,sp,128
    1ad2:	f041005b          	0xf041005b
    1ad6:	0019                	c.nop	6
    1ad8:	b400                	fsd	fs0,40(s0)
    1ada:	0000                	unimp
    1adc:	0600                	addi	s0,sp,768
    1ade:	0000                	unimp
    1ae0:	0100                	addi	s0,sp,128
    1ae2:	f89c                	fsw	fa5,48(s1)
    1ae4:	001a                	c.slli	zero,0x6
    1ae6:	3e00                	fld	fs0,56(a2)
    1ae8:	19fd                	addi	s3,s3,-1
    1aea:	0000                	unimp
    1aec:	00001f73          	csrrw	t5,ustatus,zero
    1af0:	0842                	slli	a6,a6,0x10
    1af2:	001a                	c.slli	zero,0x6
    1af4:	0100                	addi	s0,sp,128
    1af6:	5143005b          	0x5143005b
    1afa:	47000003          	lb	zero,1136(zero) # 470 <polydiv+0x2a>
    1afe:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    1b02:	4300                	lw	s0,0(a4)
    1b04:	006e                	c.slli	zero,0x1b
    1b06:	0000                	unimp
    1b08:	0064                	addi	s1,sp,12
    1b0a:	0000                	unimp
    1b0c:	1e000007          	0x1e000007
    1b10:	0000                	unimp
    1b12:	0200                	addi	s0,sp,256
    1b14:	f200                	fsw	fs0,32(a2)
    1b16:	04000003          	lb	zero,64(zero) # 40 <__DYNAMIC+0x40>
    1b1a:	7401                	lui	s0,0xfffe0
    1b1c:	18000027          	0x18000027
    1b20:	0000                	unimp
    1b22:	f800                	fsw	fs0,48(s0)
    1b24:	0006                	c.slli	zero,0x1
    1b26:	2200                	fld	fs0,0(a2)
    1b28:	0001                	nop
    1b2a:	ff00                	fsw	fs0,56(a4)
    1b2c:	0006                	c.slli	zero,0x1
    1b2e:	0100                	addi	s0,sp,128
    1b30:	80              	Address 0x0000000000001b30 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
  .endr
   0:	1101                	addi	sp,sp,-32
   2:	2501                	jal	602 <polydiv+0x1bc>
   4:	130e                	slli	t1,t1,0x23
   6:	1b0e030b          	0x1b0e030b
   a:	550e                	lw	a0,224(sp)
   c:	10011117          	auipc	sp,0x10011
  10:	02000017          	auipc	zero,0x2000
  14:	0024                	addi	s1,sp,8
  16:	0b3e0b0b          	0xb3e0b0b
  1a:	00000e03          	lb	t3,0(zero) # 0 <__DYNAMIC>
  1e:	0b002403          	lw	s0,176(zero) # b0 <array_add+0x1e>
  22:	030b3e0b          	0x30b3e0b
  26:	0008                	0x8
  28:	0400                	addi	s0,sp,512
  2a:	0035                	c.nop	13
  2c:	1349                	addi	t1,t1,-14
  2e:	0000                	unimp
  30:	1605                	addi	a2,a2,-31
  32:	0300                	addi	s0,sp,384
  34:	3a0e                	fld	fs4,224(sp)
  36:	39053b0b          	0x39053b0b
  3a:	0013490b          	0x13490b
  3e:	0600                	addi	s0,sp,768
  40:	0016                	c.slli	zero,0x5
  42:	0b3a0e03          	lb	t3,179(s4) # 6e0b3 <_stack_start+0x5e0b3>
  46:	0b390b3b          	0xb390b3b
  4a:	1349                	addi	t1,t1,-14
  4c:	0000                	unimp
  4e:	0b011707          	0xb011707
  52:	3b0b3a0b          	0x3b0b3a0b
  56:	010b390b          	0x10b390b
  5a:	08000013          	li	zero,128
  5e:	000d                	c.nop	3
  60:	0b3a0e03          	lb	t3,179(s4)
  64:	0b390b3b          	0xb390b3b
  68:	1349                	addi	t1,t1,-14
  6a:	0000                	unimp
  6c:	0109                	addi	sp,sp,2
  6e:	4901                	li	s2,0
  70:	00130113          	addi	sp,t1,1
  74:	0a00                	addi	s0,sp,272
  76:	0021                	c.nop	8
  78:	1349                	addi	t1,t1,-14
  7a:	00000b2f          	0xb2f
  jal x0, default_exc_handler
  7e:	0b01130b          	0xb01130b
  jal x0, reset_handler
  82:	3b0b3a0b          	0x3b0b3a0b
  jal x0, default_exc_handler
  86:	010b390b          	0x10b390b
  jal x0, default_exc_handler
  8a:	0c000013          	li	zero,192
    asm volatile(
  8e:	000d                	c.nop	3
}
  90:	0b3a0e03          	lb	t3,179(s4)
    for(i=0;i<(length/3);i++) {
  94:	0b390b3b          	0xb390b3b
  98:	1349                	addi	t1,t1,-14
  9a:	0b38                	addi	a4,sp,408
  9c:	0000                	unimp
  9e:	0f0d                	addi	t5,t5,3
}
  a0:	0b00                	addi	s0,sp,400
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	0e00000b          	0xe00000b
    asm volatile(
  a6:	0e030113          	addi	sp,t1,224
  aa:	0b3a0b0b          	0xb3a0b0b
  ae:	0b390b3b          	0xb390b3b
    for(i=0;i<(length/3);i++) {
  b2:	1301                	addi	t1,t1,-32
    asm volatile(
  b4:	0000                	unimp
  b6:	03000d0f          	0x3000d0f
    for(i=0;i<(length/3);i++) {
  ba:	3a08                	fld	fa0,48(a2)
  bc:	390b3b0b          	0x390b3b0b
  c0:	3813490b          	0x3813490b
  c4:	1000000b          	0x1000000b
}
  c8:	0b0b000f          	0xb0b000f
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  cc:	1349                	addi	t1,t1,-14
    asm volatile(
  ce:	0000                	unimp
  d0:	1311                	addi	t1,t1,-28
  d2:	0301                	addi	t1,t1,0
  d4:	0b0e                	slli	s6,s6,0x3
  d6:	3a05                	jal	fffffa06 <_stack_start+0xfffefa06>
    for(i=0;i<(length/3);i++) {
  d8:	390b3b0b          	0x390b3b0b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  dc:	0013010b          	0x13010b
  e0:	1200                	addi	s0,sp,288
  e2:	000d                	c.nop	3
    int line[size_b][size_a + size_b];
  e4:	0b3a0e03          	lb	t3,179(s4)
  e8:	0b390b3b          	0xb390b3b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  ec:	1349                	addi	t1,t1,-14
    int line[size_b][size_a + size_b];
  ee:	0538                	addi	a4,sp,648
  f0:	0000                	unimp
  f2:	27001513          	0x27001513
  f6:	0019                	c.nop	6
  f8:	1400                	addi	s0,sp,544
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fa:	0115                	addi	sp,sp,5
  fc:	13491927          	0x13491927
 100:	1301                	addi	t1,t1,-32
 102:	0000                	unimp
 104:	0515                	addi	a0,a0,5
 106:	4900                	lw	s0,16(a0)
 108:	16000013          	li	zero,352
 10c:	0026                	c.slli	zero,0x9
 10e:	1349                	addi	t1,t1,-14
 110:	0000                	unimp
    int line[size_b][size_a + size_b];
 112:	03011317          	auipc	t1,0x3011
    int pola[size_a];
 116:	0b0e                	slli	s6,s6,0x3
    int line[size_b][size_a + size_b];
 118:	3a05                	jal	fffffa48 <_stack_start+0xfffefa48>
    int pola[size_a];
 11a:	39053b0b          	0x39053b0b
    int line[size_b][size_a + size_b];
 11e:	0013010b          	0x13010b
 122:	1800                	addi	s0,sp,48
    int pola[size_a];
 124:	000d                	c.nop	3
 126:	0b3a0e03          	lb	t3,179(s4)
    int polb[size_b];
 12a:	0b39053b          	0xb39053b
    int pola[size_a];
 12e:	1349                	addi	t1,t1,-14
    int polb[size_b];
 130:	0b38                	addi	a4,sp,408
 132:	0000                	unimp
            line[i][j] = 0;
 134:	0d19                	addi	s10,s10,6
 136:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	3a0e                	fld	fs4,224(sp)
 13a:	39053b0b          	0x39053b0b
    int pola[size_a];
 13e:	3813490b          	0x3813490b
    int line[size_b][size_a + size_b];
 142:	0005                	c.nop	1
 144:	1a00                	addi	s0,sp,304
    int polb[size_b];
 146:	0e030113          	addi	sp,t1,224 # 30111f2 <_stack_start+0x30011f2>
            line[i][j] = 0;
 14a:	0b3a0b0b          	0xb3a0b0b
    for (i = 0; i < size_b; ++i){
 14e:	0b39053b          	0xb39053b
            product[j] = 0;
 152:	1301                	addi	t1,t1,-32
 154:	0000                	unimp
 156:	0b01131b          	0xb01131b
    for (i = 0; i < size_b; ++i){
 15a:	3b0b3a0b          	0x3b0b3a0b
    array_equ(pola,a,size_a);
 15e:	3905                	jal	fffffd8e <_stack_start+0xfffefd8e>
 160:	0013010b          	0x13010b
 164:	1c00                	addi	s0,sp,560
 166:	0b0b0117          	auipc	sp,0xb0b0
 16a:	0b3a                	slli	s6,s6,0xe
 16c:	0b39053b          	0xb39053b
    for (i = 0; i < size_a; ++i){
 170:	1301                	addi	t1,t1,-32
 172:	0000                	unimp
 174:	0d1d                	addi	s10,s10,7
 176:	0300                	addi	s0,sp,384
 178:	3a0e                	fld	fs4,224(sp)
 17a:	39053b0b          	0x39053b0b
    array_equ(polb,b,size_b);
 17e:	0013490b          	0x13490b
 182:	1e00                	addi	s0,sp,816
 184:	0e030013          	addi	zero,t1,224
   for (i = 0; i < size_b; ++i){
 188:	193c                	addi	a5,sp,184
 18a:	0000                	unimp
 18c:	151f 2701 0119      	0x1192701151f
    if(star_mult == 1){
 192:	20000013          	li	zero,512
 196:	0034                	addi	a3,sp,8
 198:	0b3a0e03          	lb	t3,179(s4)
 19c:	0b39053b          	0xb39053b
 1a0:	1349                	addi	t1,t1,-14
        for (j = size_b -1; j >= 0; j = j-1){
 1a2:	193c193f 34210000 	0x34210000193c193f
            product[j] = 0;
 1aa:	0300                	addi	s0,sp,384
 1ac:	3a0e                	fld	fs4,224(sp)
 1ae:	390b3b0b          	0x390b3b0b
            line[i][j] = 0;
 1b2:	3f13490b          	0x3f13490b
            product[j] = 0;
 1b6:	3c19                	jal	fffffbcc <_stack_start+0xfffefbcc>
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	0019                	c.nop	6
 1ba:	2200                	fld	fs0,0(a2)
 1bc:	0034                	addi	a3,sp,8
 1be:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_b; ++i){
 1c2:	0b390b3b          	0xb390b3b
 1c6:	1349                	addi	t1,t1,-14
        for(j = 0; j < size_a + size_b -1; ++j){
 1c8:	1802                	slli	a6,a6,0x20
 1ca:	0000                	unimp
            pola[i] = pola[i] + mod;
 1cc:	49002123          	sw	a6,1154(zero) # 482 <polydiv+0x3c>
        while (pola[i] < 0){
 1d0:	00052f13          	slti	t5,a0,0
 1d4:	2400                	fld	fs0,8(s0)
        pola[i] = pola[i] % mod;
 1d6:	0034                	addi	a3,sp,8
 1d8:	0b3a0e03          	lb	t3,179(s4)
    for (i = 0; i < size_a; ++i){
 1dc:	0b390b3b          	0xb390b3b
        pola[i] = pola[i] % mod;
 1e0:	1349                	addi	t1,t1,-14
    for (i = 0; i < size_a; ++i){
 1e2:	1802193f 2e250000 	0x2e2500001802193f
        while (polb[i] < 0){
 1ea:	3f01                	jal	fa <polymult+0x1e>
 1ec:	0319                	addi	t1,t1,6
        polb[i] = polb[i] % mod;
 1ee:	3a0e                	fld	fs4,224(sp)
 1f0:	39053b0b          	0x39053b0b
   for (i = 0; i < size_b; ++i){
 1f4:	1113490b          	0x1113490b
        polb[i] = polb[i] % mod;
 1f8:	1201                	addi	tp,tp,-32
   for (i = 0; i < size_b; ++i){
 1fa:	4006                	0x4006
    if(star_mult == 1){
 1fc:	9718                	0x9718
        for (j = size_b -1; j >= 0; j = j-1){
 1fe:	1942                	slli	s2,s2,0x30
 200:	1301                	addi	t1,t1,-32
        for(j = 0; j < size_a + size_b -1; ++j){
 202:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 204:	3426                	fld	fs0,104(sp)
 206:	0300                	addi	s0,sp,384
 208:	3a0e                	fld	fs4,224(sp)
 20a:	39053b0b          	0x39053b0b
 20e:	0213490b          	0x213490b
    for(j = 0; j < size_a + size_b -1; ++j){
 212:	27000017          	auipc	zero,0x27000
 216:	0034                	addi	a3,sp,8
    for(j = 0; j < size_a + size_b -1; ++j){
 218:	0b3a0803          	lb	a6,179(s4)
 21c:	0b39053b          	0xb39053b
}
 220:	1349                	addi	t1,t1,-14
 222:	0b1c                	addi	a5,sp,400
 224:	0000                	unimp
 226:	3428                	fld	fa0,104(s0)
 228:	0300                	addi	s0,sp,384
 22a:	3a0e                	fld	fs4,224(sp)
 22c:	39053b0b          	0x39053b0b
 230:	0213490b          	0x213490b
 234:	0018                	0x18
 236:	2900                	fld	fs0,16(a0)
 238:	0034                	addi	a3,sp,8
 23a:	0b3a0e03          	lb	t3,179(s4)
 23e:	0b39053b          	0xb39053b
 242:	1349                	addi	t1,t1,-14
 244:	0000                	unimp
 246:	342a                	fld	fs0,168(sp)
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	0300                	addi	s0,sp,384
 24a:	3a08                	fld	fa0,48(a2)
 24c:	39053b0b          	0x39053b0b
 250:	0213490b          	0x213490b
 254:	2b000017          	auipc	zero,0x2b000
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	8289                	srli	a3,a3,0x2
                line[size_b-1-j][k] = pola[k]*polb[j];
 25a:	0101                	addi	sp,sp,0
 25c:	0111                	addi	sp,sp,4
 25e:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	1301                	addi	t1,t1,-32
 262:	0000                	unimp
        for (j = size_b -1; j >= 0; j = j-1){
 264:	8a2c                	0x8a2c
 266:	0182                	c.slli64	gp
 268:	0200                	addi	s0,sp,256
 26a:	9118                	0x9118
            for (k = size_a-1; k >= 0; k = k-1 ){
 26c:	1842                	slli	a6,a6,0x30
 26e:	0000                	unimp
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 270:	892d                	andi	a0,a0,11
 272:	0182                	c.slli64	gp
 274:	1101                	addi	sp,sp,-32
 276:	3101                	jal	fffffe76 <_stack_start+0xfffefe76>
 278:	2e000013          	li	zero,736
 27c:	0021                	c.nop	8
 27e:	1349                	addi	t1,t1,-14
            for (k = size_a-1; k >= 0; k = k-1 ){
 280:	0000182f          	0x182f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 284:	3f012e2f          	0x3f012e2f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0319                	addi	t1,t1,6
 28a:	3a0e                	fld	fs4,224(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 28c:	39053b0b          	0x39053b0b
 290:	4919270b          	0x4919270b
            line[i][j] = line[i][j] % mod;
 294:	12011113          	0x12011113
        for(j = 0; j < size_a + size_b -1; ++j){
 298:	4006                	0x4006
            line[i][j] = line[i][j] % mod;
 29a:	9718                	0x9718
 29c:	1942                	slli	s2,s2,0x30
 29e:	1301                	addi	t1,t1,-32
 2a0:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 2a2:	0530                	addi	a2,sp,648
 2a4:	0300                	addi	s0,sp,384
    for (i = 0; i < size_b; ++i){
 2a6:	3a08                	fld	fa0,48(a2)
 2a8:	39053b0b          	0x39053b0b
 2ac:	0213490b          	0x213490b
        for(j = 0; j < size_a + size_b -1; ++j){
 2b0:	31000017          	auipc	zero,0x31000
            product[j] += line[i][j];
 2b4:	0005                	c.nop	1
 2b6:	0b3a0e03          	lb	t3,179(s4)
 2ba:	0b39053b          	0xb39053b
 2be:	1349                	addi	t1,t1,-14
 2c0:	1702                	slli	a4,a4,0x20
 2c2:	0000                	unimp
 2c4:	3432                	fld	fs0,296(sp)
 2c6:	0300                	addi	s0,sp,384
 2c8:	3a08                	fld	fa0,48(a2)
        for(i = 0; i < size_b; ++i){
 2ca:	39053b0b          	0x39053b0b
    for(j = 0; j < size_a + size_b -1; ++j){
 2ce:	0213490b          	0x213490b
 2d2:	0018                	0x18
        for(i = 0; i < size_b; ++i){
 2d4:	3300                	fld	fs0,32(a4)
 2d6:	0034                	addi	a3,sp,8
        product[j] = product[j] % mod;
 2d8:	1349                	addi	t1,t1,-14
    for(j = 0; j < size_a + size_b -1; ++j){
 2da:	1934                	addi	a3,sp,184
 2dc:	1702                	slli	a4,a4,0x20
        product[j] = product[j] % mod;
 2de:	0000                	unimp
 2e0:	2134                	fld	fa3,64(a0)
 2e2:	4900                	lw	s0,16(a0)
 2e4:	00132f13          	slti	t5,t1,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e8:	3500                	fld	fs0,40(a0)
    int line[size_b][size_a + size_b];
 2ea:	012e                	slli	sp,sp,0xb
 2ec:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2f4:	0b39                	addi	s6,s6,14
 2f6:	13491927          	0x13491927
    int line[size_b][size_a + size_b];
 2fa:	0111                	addi	sp,sp,4
 2fc:	0612                	slli	a2,a2,0x4
 2fe:	1840                	addi	s0,sp,52
 300:	01194297          	auipc	t0,0x1194
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 304:	36000013          	li	zero,864
 308:	0005                	c.nop	1
 30a:	0b3a0803          	lb	a6,179(s4)
 30e:	0b390b3b          	0xb390b3b
 312:	1349                	addi	t1,t1,-14
 314:	1702                	slli	a4,a4,0x20
    int line[size_b][size_a + size_b];
 316:	0000                	unimp
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 318:	03000537          	lui	a0,0x3000
    int line[size_b][size_a + size_b];
 31c:	3a0e                	fld	fs4,224(sp)
 31e:	390b3b0b          	0x390b3b0b
    int pola[size_a];
 322:	0213490b          	0x213490b
 326:	38000017          	auipc	zero,0x38000
    int line[size_b][size_a + size_b];
 32a:	0034                	addi	a3,sp,8
    int pola[size_a];
 32c:	0b3a0803          	lb	a6,179(s4)
    int polb[size_b];
 330:	0b390b3b          	0xb390b3b
 334:	1349                	addi	t1,t1,-14
    int pola[size_a];
 336:	1702                	slli	a4,a4,0x20
    int polb[size_b];
 338:	0000                	unimp
 33a:	3439                	jal	fffffd48 <_stack_start+0xfffefd48>
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33c:	0300                	addi	s0,sp,384
 33e:	3a08                	fld	fa0,48(a2)
    int line[size_b][size_a + size_b];
 340:	390b3b0b          	0x390b3b0b
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 344:	0013490b          	0x13490b
    int pola[size_a];
 348:	3a00                	fld	fs0,48(a2)
    int polb[size_b];
 34a:	0034                	addi	a3,sp,8
    for (i = 0; i < size_b; ++i){
 34c:	0b3a0e03          	lb	t3,179(s4)
 350:	0b390b3b          	0xb390b3b
            product2[j] = 0;
 354:	1349                	addi	t1,t1,-14
 356:	1702                	slli	a4,a4,0x20
 358:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 35a:	3f012e3b          	0x3f012e3b
    array_equ(pola,a,size_a);
 35e:	0319                	addi	t1,t1,6
 360:	3a0e                	fld	fs4,224(sp)
 362:	390b3b0b          	0x390b3b0b
 366:	1119270b          	0x1119270b
    array_equ(polb,b,size_b);
 36a:	1201                	addi	tp,tp,-32
 36c:	4006                	0x4006
 36e:	9718                	0x9718
 370:	1942                	slli	s2,s2,0x30
 372:	1301                	addi	t1,t1,-32
 374:	0000                	unimp
    if(star_mult == 1){
 376:	053c                	addi	a5,sp,648
 378:	0300                	addi	s0,sp,384
 37a:	3a08                	fld	fa0,48(a2)
 37c:	390b3b0b          	0x390b3b0b
 380:	0213490b          	0x213490b
 384:	0018                	0x18
 386:	3d00                	fld	fs0,56(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 388:	011d                	addi	sp,sp,7
 38a:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 38c:	0111                	addi	sp,sp,4
 38e:	0612                	slli	a2,a2,0x4
            product2[j] = 0;
 390:	0b58                	addi	a4,sp,404
 392:	0b59                	addi	s6,s6,22
 394:	00000b57          	0xb57
            line[i][j] = 0;
 398:	053e                	slli	a0,a0,0xf
            product2[j] = 0;
 39a:	3100                	fld	fs0,32(a0)
 39c:	00170213          	addi	tp,a4,1 # 5001 <_stack_len+0x1001>
        for(j = 0; j < size_a + size_b -1; ++j){
 3a0:	3f00                	fld	fs0,56(a4)
 3a2:	012e                	slli	sp,sp,0xb
 3a4:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
    for (i = 0; i < size_b; ++i){
 3ac:	0b39                	addi	s6,s6,14
        for(j = 0; j < size_a + size_b -1; ++j){
 3ae:	0b201927          	0xb201927
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b2:	1301                	addi	t1,t1,-32
 3b4:	0000                	unimp
 3b6:	0540                	addi	s0,sp,644
 3b8:	0300                	addi	s0,sp,384
 3ba:	3a08                	fld	fa0,48(a2)
 3bc:	390b3b0b          	0x390b3b0b
 3c0:	0013490b          	0x13490b
 3c4:	4100                	lw	s0,0(a0)
 3c6:	012e                	slli	sp,sp,0xb
 3c8:	1331                	addi	t1,t1,-20
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	0111                	addi	sp,sp,4
 3cc:	0612                	slli	a2,a2,0x4
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	1840                	addi	s0,sp,52
 3d0:	01194297          	auipc	t0,0x1194
 3d4:	42000013          	li	zero,1056
            for (k = size_a-1; k >= 0; k = k-1 ){
 3d8:	0005                	c.nop	1
        array_add(product2,line[i],size_a+size_b-1);
 3da:	1331                	addi	t1,t1,-20
 3dc:	1802                	slli	a6,a6,0x20
 3de:	0000                	unimp
 3e0:	3f002e43          	fmadd.q	ft8,ft0,fa6,ft7,rdn
    for(i=0;i<size_b;++i){
 3e4:	3c19                	jal	fffffdfa <_stack_start+0xfffefdfa>
}
 3e6:	6e19                	lui	t3,0x6
 3e8:	030e                	slli	t1,t1,0x3
 3ea:	3a0e                	fld	fs4,224(sp)
 3ec:	000b3b0b          	0xb3b0b
 3f0:	0000                	unimp
 3f2:	1101                	addi	sp,sp,-32
 3f4:	1000                	addi	s0,sp,32
 3f6:	5506                	lw	a0,96(sp)
 3f8:	0306                	slli	t1,t1,0x1
 3fa:	1b0e                	slli	s6,s6,0x23
 3fc:	250e                	fld	fa0,192(sp)
 3fe:	130e                	slli	t1,t1,0x23
 400:	0005                	c.nop	1
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
  .endr
       0:	1042                	c.slli	zero,0x30
       2:	0000                	unimp
       4:	1056                	c.slli	zero,0x35
       6:	0000                	unimp
       8:	0001                	nop
       a:	565a                	lw	a2,180(sp)
       c:	0010                	0x10
       e:	5700                	lw	s0,40(a4)
      10:	0010                	0x10
      12:	0100                	addi	s0,sp,128
      14:	5f00                	lw	s0,56(a4)
	...
      1e:	1058                	addi	a4,sp,36
      20:	0000                	unimp
      22:	1098                	addi	a4,sp,96
      24:	0000                	unimp
      26:	0001                	nop
      28:	9e5a                	add	t3,t3,s6
      2a:	0010                	0x10
      2c:	a800                	fsd	fs0,16(s0)
      2e:	0010                	0x10
      30:	0100                	addi	s0,sp,128
      32:	5a00                	lw	s0,48(a2)
	...
      3c:	0fb6                	slli	t6,t6,0xd
      3e:	0000                	unimp
      40:	100a                	c.slli	zero,0x22
      42:	0000                	unimp
      44:	0001                	nop
      46:	0a5a                	slli	s4,s4,0x16
      48:	0010                	0x10
      4a:	3200                	fld	fs0,32(a2)
      4c:	0010                	0x10
      4e:	0400                	addi	s0,sp,512
      50:	7a00                	flw	fs0,48(a2)
      52:	7684                	flw	fs1,40(a3)
      54:	009f 0000 0000      	0x9f
      5a:	0000                	unimp
      5c:	9800                	0x9800
      5e:	ec00000f          	0xec00000f
      62:	0300000f          	fence	rw,unknown
      66:	9100                	0x9100
      68:	799c                	flw	fa5,48(a1)
      6a:	0fec                	addi	a1,sp,988
      6c:	0000                	unimp
      6e:	0ff6                	slli	t6,t6,0x1d
      70:	0000                	unimp
      72:	0002                	c.slli64	zero
      74:	007e                	c.slli	zero,0x1f
      76:	0ff6                	slli	t6,t6,0x1d
      78:	0000                	unimp
      7a:	1035                	c.nop	-19
  jal x0, default_exc_handler
      7c:	0000                	unimp
      7e:	0002                	c.slli64	zero
  jal x0, reset_handler
      80:	007d                	c.nop	31
      82:	1035                	c.nop	-19
  jal x0, default_exc_handler
      84:	0000                	unimp
      86:	109c                	addi	a5,sp,96
  jal x0, default_exc_handler
      88:	0000                	unimp
      8a:	9c910003          	lb	zero,-1591(sp) # b0afb2f <_stack_start+0xb09fb2f>
    asm volatile(
      8e:	9c79                	0x9c79
}
      90:	0010                	0x10
    for(i=0;i<(length/3);i++) {
      92:	9e00                	0x9e00
      94:	0010                	0x10
      96:	0300                	addi	s0,sp,384
      98:	7200                	flw	fs0,32(a2)
      9a:	799c                	flw	fa5,48(a1)
      9c:	109e                	slli	ra,ra,0x27
      9e:	0000                	unimp
}
      a0:	10a8                	addi	a0,sp,104
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	0000                	unimp
      a4:	9c910003          	lb	zero,-1591(sp)
    asm volatile(
      a8:	0079                	c.nop	30
      aa:	0000                	unimp
      ac:	0000                	unimp
      ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      b0:	9800                	0x9800
      b2:	c600000f          	0xc600000f
    asm volatile(
      b6:	0300000f          	fence	rw,unknown
    for(i=0;i<(length/3);i++) {
      ba:	9100                	0x9100
      bc:	7af0                	flw	fa2,116(a3)
      be:	0fc6                	slli	t6,t6,0x11
      c0:	0000                	unimp
      c2:	0fc8                	addi	a0,sp,980
      c4:	0000                	unimp
      c6:	0002                	c.slli64	zero
}
      c8:	007d                	c.nop	31
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	0fc8                	addi	a0,sp,980
      cc:	0000                	unimp
    asm volatile(
      ce:	104e                	c.slli	zero,0x33
      d0:	0000                	unimp
      d2:	f0910003          	lb	zero,-247(sp)
      d6:	4e7a                	lw	t3,156(sp)
    for(i=0;i<(length/3);i++) {
      d8:	0010                	0x10
      da:	5700                	lw	s0,40(a4)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      dc:	0010                	0x10
      de:	0200                	addi	s0,sp,256
      e0:	7d00                	flw	fs0,56(a0)
      e2:	5700                	lw	s0,40(a4)
    int line[size_b][size_a + size_b];
      e4:	0010                	0x10
      e6:	9c00                	0x9c00
      e8:	0010                	0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ea:	0300                	addi	s0,sp,384
      ec:	9100                	0x9100
    int line[size_b][size_a + size_b];
      ee:	7af0                	flw	fa2,116(a3)
      f0:	109c                	addi	a5,sp,96
      f2:	0000                	unimp
      f4:	109e                	slli	ra,ra,0x27
      f6:	0000                	unimp
      f8:	f0720003          	lb	zero,-249(tp) # ffffff07 <_stack_start+0xfffeff07>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fc:	9e7a                	add	t3,t3,t5
      fe:	0010                	0x10
     100:	a800                	fsd	fs0,16(s0)
     102:	0010                	0x10
     104:	0300                	addi	s0,sp,384
     106:	9100                	0x9100
     108:	7af0                	flw	fa2,116(a3)
	...
    int line[size_b][size_a + size_b];
     112:	0f98                	addi	a4,sp,976
    int pola[size_a];
     114:	0000                	unimp
     116:	0fd2                	slli	t6,t6,0x14
    int line[size_b][size_a + size_b];
     118:	0000                	unimp
    int pola[size_a];
     11a:	c4910003          	lb	zero,-951(sp)
    int line[size_b][size_a + size_b];
     11e:	d27c                	sw	a5,100(a2)
    int pola[size_a];
     120:	dc00000f          	0xdc00000f
     124:	0200000f          	fence	r,unknown
    int polb[size_b];
     128:	7e00                	flw	fs0,56(a2)
     12a:	dc00                	sw	s0,56(s0)
     12c:	9600000f          	0x9600000f
     130:	0010                	0x10
     132:	0200                	addi	s0,sp,256
            line[i][j] = 0;
     134:	8200                	0x8200
     136:	9600                	0x9600
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	0010                	0x10
     13a:	9c00                	0x9c00
    int pola[size_a];
     13c:	0010                	0x10
     13e:	0300                	addi	s0,sp,384
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     140:	9100                	0x9100
    int line[size_b][size_a + size_b];
     142:	7cc4                	flw	fs1,60(s1)
     144:	109c                	addi	a5,sp,96
    int polb[size_b];
     146:	0000                	unimp
            line[i][j] = 0;
     148:	109e                	slli	ra,ra,0x27
     14a:	0000                	unimp
     14c:	c4720003          	lb	zero,-953(tp) # fffffc47 <_stack_start+0xfffefc47>
    for (i = 0; i < size_b; ++i){
     150:	9e7c                	0x9e7c
            product[j] = 0;
     152:	0010                	0x10
     154:	a800                	fsd	fs0,16(s0)
     156:	0010                	0x10
     158:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     15a:	8200                	0x8200
	...
    array_equ(pola,a,size_a);
     164:	9800                	0x9800
     166:	0600000f          	fence	or,unknown
     16a:	0010                	0x10
     16c:	0300                	addi	s0,sp,384
    for (i = 0; i < size_a; ++i){
     16e:	9100                	0x9100
     170:	7e98                	flw	fa4,56(a3)
     172:	1006                	c.slli	zero,0x21
     174:	0000                	unimp
     176:	100c                	addi	a1,sp,32
     178:	0000                	unimp
     17a:	0002                	c.slli64	zero
     17c:	007c                	addi	a5,sp,12
    array_equ(polb,b,size_b);
     17e:	100c                	addi	a1,sp,32
     180:	0000                	unimp
     182:	1035                	c.nop	-19
     184:	0000                	unimp
   for (i = 0; i < size_b; ++i){
     186:	0002                	c.slli64	zero
     188:	0080                	addi	s0,sp,64
     18a:	1035                	c.nop	-19
     18c:	0000                	unimp
    if(star_mult == 1){
     18e:	109c                	addi	a5,sp,96
     190:	0000                	unimp
     192:	98910003          	lb	zero,-1655(sp)
     196:	9c7e                	add	s8,s8,t6
     198:	0010                	0x10
     19a:	9e00                	0x9e00
     19c:	0010                	0x10
     19e:	0300                	addi	s0,sp,384
     1a0:	7200                	flw	fs0,32(a2)
        for (j = size_b -1; j >= 0; j = j-1){
     1a2:	7e98                	flw	fa4,56(a3)
     1a4:	109e                	slli	ra,ra,0x27
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	0000                	unimp
     1a8:	10a8                	addi	a0,sp,104
            product[j] = 0;
     1aa:	0000                	unimp
     1ac:	98910003          	lb	zero,-1655(sp)
            line[i][j] = 0;
     1b0:	007e                	c.slli	zero,0x1f
     1b2:	0000                	unimp
            product[j] = 0;
     1b4:	0000                	unimp
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	ba00                	fsd	fs0,48(a2)
     1ba:	be00000f          	0xbe00000f
     1be:	0200000f          	fence	r,unknown
    for (i = 0; i < size_b; ++i){
     1c2:	3000                	fld	fs0,32(s0)
     1c4:	629f 0010 6c00      	0x6c000010629f
        for(j = 0; j < size_a + size_b -1; ++j){
     1ca:	0010                	0x10
            pola[i] = pola[i] + mod;
     1cc:	0200                	addi	s0,sp,256
     1ce:	3000                	fld	fs0,32(s0)
        while (pola[i] < 0){
     1d0:	009f 0000 0000      	0x9f
        pola[i] = pola[i] % mod;
     1d6:	0000                	unimp
     1d8:	ac00                	fsd	fs0,24(s0)
    for (i = 0; i < size_a; ++i){
     1da:	000c                	0xc
     1dc:	c400                	sw	s0,8(s0)
        pola[i] = pola[i] % mod;
     1de:	000c                	0xc
     1e0:	0100                	addi	s0,sp,128
    for (i = 0; i < size_a; ++i){
     1e2:	5a00                	lw	s0,48(a2)
            polb[i] = polb[i] + mod;
     1e4:	0cc4                	addi	s1,sp,596
     1e6:	0000                	unimp
        while (polb[i] < 0){
     1e8:	0d2c                	addi	a1,sp,664
     1ea:	0000                	unimp
     1ec:	0001                	nop
        polb[i] = polb[i] % mod;
     1ee:	2c58                	fld	fa4,152(s0)
     1f0:	000d                	c.nop	3
   for (i = 0; i < size_b; ++i){
     1f2:	3800                	fld	fs0,48(s0)
     1f4:	000d                	c.nop	3
        polb[i] = polb[i] % mod;
     1f6:	0300                	addi	s0,sp,384
     1f8:	8600                	0x8600
   for (i = 0; i < size_b; ++i){
     1fa:	9f7f                	0x9f7f
    if(star_mult == 1){
     1fc:	0d38                	addi	a4,sp,664
        for (j = size_b -1; j >= 0; j = j-1){
     1fe:	0000                	unimp
     200:	0d3e                	slli	s10,s10,0xf
        for(j = 0; j < size_a + size_b -1; ++j){
     202:	0000                	unimp
    for (i = 0; i < size_b; ++i){
     204:	0004                	0x4
     206:	9f5a01f3          	0x9f5a01f3
     20a:	0d3e                	slli	s10,s10,0xf
     20c:	0000                	unimp
     20e:	0d74                	addi	a3,sp,668
     210:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     212:	0001                	nop
     214:	0058                	addi	a4,sp,4
     216:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
     218:	0000                	unimp
     21a:	0000                	unimp
     21c:	ac00                	fsd	fs0,24(s0)
}
     21e:	000c                	0xc
     220:	ce00                	sw	s0,24(a2)
     222:	000c                	0xc
     224:	0100                	addi	s0,sp,128
     226:	5b00                	lw	s0,48(a4)
     228:	0cce                	slli	s9,s9,0x13
     22a:	0000                	unimp
     22c:	0d36                	slli	s10,s10,0xd
     22e:	0000                	unimp
     230:	0001                	nop
     232:	3665                	jal	fffffdda <_stack_start+0xfffefdda>
     234:	000d                	c.nop	3
     236:	3e00                	fld	fs0,56(a2)
     238:	000d                	c.nop	3
     23a:	0400                	addi	s0,sp,512
     23c:	f300                	fsw	fs0,32(a4)
     23e:	5b01                	li	s6,-32
     240:	3e9f 000d 7400      	0x7400000d3e9f
     246:	000d                	c.nop	3
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	0100                	addi	s0,sp,128
     24a:	6500                	flw	fs0,8(a0)
	...
     254:	0cac                	addi	a1,sp,600
     256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0cc6                	slli	s9,s9,0x11
                line[size_b-1-j][k] = pola[k]*polb[j];
     25a:	0000                	unimp
     25c:	0001                	nop
     25e:	c65c                	sw	a5,12(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	000c                	0xc
     262:	3000                	fld	fs0,32(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     264:	000d                	c.nop	3
     266:	0100                	addi	s0,sp,128
     268:	6200                	flw	fs0,0(a2)
     26a:	0d30                	addi	a2,sp,664
            for (k = size_a-1; k >= 0; k = k-1 ){
     26c:	0000                	unimp
     26e:	0d3e                	slli	s10,s10,0xf
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     270:	0000                	unimp
     272:	0004                	0x4
     274:	9f5c01f3          	0x9f5c01f3
     278:	0d3e                	slli	s10,s10,0xf
     27a:	0000                	unimp
     27c:	0d74                	addi	a3,sp,668
     27e:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     280:	0001                	nop
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     282:	0062                	c.slli	zero,0x18
     284:	0000                	unimp
     286:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0000                	unimp
     28a:	ac00                	fsd	fs0,24(s0)
        for (j = size_b -1; j >= 0; j = j-1){
     28c:	000c                	0xc
     28e:	c800                	sw	s0,16(s0)
     290:	000c                	0xc
     292:	0100                	addi	s0,sp,128
            line[i][j] = line[i][j] % mod;
     294:	5d00                	lw	s0,56(a0)
        for(j = 0; j < size_a + size_b -1; ++j){
     296:	0cc8                	addi	a0,sp,596
     298:	0000                	unimp
            line[i][j] = line[i][j] % mod;
     29a:	0ce1                	addi	s9,s9,24
     29c:	0000                	unimp
     29e:	0001                	nop
     2a0:	e15a                	fsw	fs6,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
     2a2:	000c                	0xc
     2a4:	7400                	flw	fs0,40(s0)
    for (i = 0; i < size_b; ++i){
     2a6:	000d                	c.nop	3
     2a8:	0400                	addi	s0,sp,512
     2aa:	f300                	fsw	fs0,32(a4)
     2ac:	5d01                	li	s10,-32
        for(j = 0; j < size_a + size_b -1; ++j){
     2ae:	009f 0000 0000      	0x9f
            product[j] += line[i][j];
     2b4:	0000                	unimp
     2b6:	ac00                	fsd	fs0,24(s0)
     2b8:	000c                	0xc
     2ba:	d000                	sw	s0,32(s0)
        for(i = 0; i < size_b; ++i){
     2bc:	000c                	0xc
            product[j] += line[i][j];
     2be:	0100                	addi	s0,sp,128
     2c0:	5e00                	lw	s0,56(a2)
     2c2:	0cd0                	addi	a2,sp,596
     2c4:	0000                	unimp
     2c6:	0d3a                	slli	s10,s10,0xe
     2c8:	0000                	unimp
        for(i = 0; i < size_b; ++i){
     2ca:	0001                	nop
     2cc:	000d3a67          	0xd3a67
    for(j = 0; j < size_a + size_b -1; ++j){
     2d0:	3e00                	fld	fs0,56(a2)
     2d2:	000d                	c.nop	3
        for(i = 0; i < size_b; ++i){
     2d4:	0400                	addi	s0,sp,512
     2d6:	f300                	fsw	fs0,32(a4)
        product[j] = product[j] % mod;
     2d8:	5e01                	li	t3,-32
    for(j = 0; j < size_a + size_b -1; ++j){
     2da:	3e9f 000d 7400      	0x7400000d3e9f
        product[j] = product[j] % mod;
     2e0:	000d                	c.nop	3
     2e2:	0100                	addi	s0,sp,128
     2e4:	6700                	flw	fs0,8(a4)
	...
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	0cac                	addi	a1,sp,600
     2f0:	0000                	unimp
     2f2:	0ce1                	addi	s9,s9,24
     2f4:	0000                	unimp
     2f6:	0001                	nop
    int line[size_b][size_a + size_b];
     2f8:	e15f 000c 7400      	0x7400000ce15f
     2fe:	000d                	c.nop	3
     300:	0400                	addi	s0,sp,512
     302:	f300                	fsw	fs0,32(a4)
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     304:	5f01                	li	t5,-32
     306:	009f 0000 0000      	0x9f
     30c:	0000                	unimp
     30e:	ac00                	fsd	fs0,24(s0)
     310:	000c                	0xc
     312:	e100                	fsw	fs0,0(a0)
     314:	000c                	0xc
    int line[size_b][size_a + size_b];
     316:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	6000                	flw	fs0,0(s0)
     31a:	0ce1                	addi	s9,s9,24
    int line[size_b][size_a + size_b];
     31c:	0000                	unimp
     31e:	0d34                	addi	a3,sp,664
     320:	0000                	unimp
    int pola[size_a];
     322:	0001                	nop
     324:	3464                	fld	fs1,232(s0)
     326:	000d                	c.nop	3
     328:	3e00                	fld	fs0,56(a2)
    int line[size_b][size_a + size_b];
     32a:	000d                	c.nop	3
    int pola[size_a];
     32c:	0400                	addi	s0,sp,512
     32e:	f300                	fsw	fs0,32(a4)
    int polb[size_b];
     330:	6001                	0x6001
     332:	3e9f 000d 7400      	0x7400000d3e9f
     338:	000d                	c.nop	3
     33a:	0100                	addi	s0,sp,128
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	6400                	flw	fs0,8(s0)
	...
    int pola[size_a];
     346:	0ce2                	slli	s9,s9,0x18
     348:	0000                	unimp
    int polb[size_b];
     34a:	0cf1                	addi	s9,s9,28
    for (i = 0; i < size_b; ++i){
     34c:	0000                	unimp
     34e:	0001                	nop
     350:	005a                	c.slli	zero,0x16
            product2[j] = 0;
     352:	0000                	unimp
     354:	0000                	unimp
     356:	0000                	unimp
     358:	f400                	fsw	fs0,40(s0)
    for (i = 0; i < size_b; ++i){
     35a:	000c                	0xc
     35c:	1200                	addi	s0,sp,288
    array_equ(pola,a,size_a);
     35e:	000d                	c.nop	3
     360:	0100                	addi	s0,sp,128
     362:	5a00                	lw	s0,48(a2)
     364:	0d12                	slli	s10,s10,0x4
     366:	0000                	unimp
     368:	0d15                	addi	s10,s10,5
    array_equ(polb,b,size_b);
     36a:	0000                	unimp
     36c:	0001                	nop
     36e:	3e5c                	fld	fa5,184(a2)
     370:	000d                	c.nop	3
     372:	6200                	flw	fs0,0(a2)
     374:	000d                	c.nop	3
    if(star_mult == 1){
     376:	0100                	addi	s0,sp,128
     378:	5a00                	lw	s0,48(a2)
	...
     382:	0d16                	slli	s10,s10,0x5
     384:	0000                	unimp
     386:	0d21                	addi	s10,s10,8
        for (j = size_b -1; j >= 0; j = j-1){
     388:	0000                	unimp
     38a:	0001                	nop
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	005a                	c.slli	zero,0x16
     38e:	0000                	unimp
            product2[j] = 0;
     390:	0000                	unimp
     392:	0000                	unimp
     394:	2200                	fld	fs0,0(a2)
            line[i][j] = 0;
     396:	000d                	c.nop	3
     398:	3e00                	fld	fs0,56(a2)
            product2[j] = 0;
     39a:	000d                	c.nop	3
     39c:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     39e:	5a00                	lw	s0,48(a2)
     3a0:	0d62                	slli	s10,s10,0x18
     3a2:	0000                	unimp
     3a4:	0d74                	addi	a3,sp,668
    for (i = 0; i < size_b; ++i){
     3a6:	0000                	unimp
     3a8:	0001                	nop
     3aa:	005a                	c.slli	zero,0x16
     3ac:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     3ae:	0000                	unimp
     3b0:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b2:	f400                	fsw	fs0,40(s0)
     3b4:	000c                	0xc
     3b6:	fa00                	fsw	fs0,48(a2)
     3b8:	000c                	0xc
     3ba:	0100                	addi	s0,sp,128
     3bc:	5900                	lw	s0,48(a0)
     3be:	0cfa                	slli	s9,s9,0x1e
     3c0:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0d06                	slli	s10,s10,0x1
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c4:	0000                	unimp
     3c6:	0001                	nop
     3c8:	065d                	addi	a2,a2,23
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	000d                	c.nop	3
     3cc:	0c00                	addi	s0,sp,528
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	000d                	c.nop	3
     3d0:	0100                	addi	s0,sp,128
     3d2:	5e00                	lw	s0,56(a2)
     3d4:	0d22                	slli	s10,s10,0x8
     3d6:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
     3d8:	0d2e                	slli	s10,s10,0xb
        array_add(product2,line[i],size_a+size_b-1);
     3da:	0000                	unimp
     3dc:	0001                	nop
     3de:	3e59                	jal	ffffff74 <_stack_start+0xfffeff74>
     3e0:	000d                	c.nop	3
    for(i=0;i<size_b;++i){
     3e2:	4800                	lw	s0,16(s0)
     3e4:	000d                	c.nop	3
}
     3e6:	0100                	addi	s0,sp,128
     3e8:	5d00                	lw	s0,56(a0)
     3ea:	0d48                	addi	a0,sp,660
     3ec:	0000                	unimp
     3ee:	0d4e                	slli	s10,s10,0x13
     3f0:	0000                	unimp
     3f2:	7f7d0003          	lb	zero,2039(s10)
     3f6:	4e9f 000d 5000      	0x5000000d4e9f
     3fc:	000d                	c.nop	3
     3fe:	0100                	addi	s0,sp,128
     400:	5d00                	lw	s0,56(a0)
     402:	0d50                	addi	a2,sp,660
     404:	0000                	unimp
     406:	0d62                	slli	s10,s10,0x18
     408:	0000                	unimp
     40a:	0001                	nop
     40c:	625e                	flw	ft4,212(sp)
     40e:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     410:	6c00                	flw	fs0,24(s0)
     412:	000d                	c.nop	3
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     414:	0100                	addi	s0,sp,128
     416:	5900                	lw	s0,48(a0)
     418:	0d6c                	addi	a1,sp,668
     41a:	0000                	unimp
     41c:	0d72                	slli	s10,s10,0x1c
     41e:	0000                	unimp
     420:	7f790003          	lb	zero,2039(s2) # 27f7 <_min_stack+0x7f7>
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	729f 000d 7400      	0x7400000d729f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     42a:	000d                	c.nop	3
            for (k = size_a-1; k >= 0; k = k-1 ){
     42c:	0100                	addi	s0,sp,128
     42e:	5900                	lw	s0,48(a0)
	...
        array_add(product2,line[i],size_a+size_b-1);
     438:	0c24                	addi	s1,sp,536
     43a:	0000                	unimp
     43c:	0c38                	addi	a4,sp,536
     43e:	0000                	unimp
    for(i=0;i<size_b;++i){
     440:	0001                	nop
     442:	385a                	fld	fa6,432(sp)
     444:	000c                	0xc
    int v[size_N];
     446:	8400                	0x8400
     448:	000c                	0xc
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44a:	0100                	addi	s0,sp,128
    int v[size_N];
     44c:	5800                	lw	s0,48(s0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44e:	0c84                	addi	s1,sp,592
     450:	0000                	unimp
     452:	0cac                	addi	a1,sp,600
     454:	0000                	unimp
     456:	0004                	0x4
     458:	9f5a01f3          	0x9f5a01f3
	...
     464:	0c24                	addi	s1,sp,536
    int v[size_N];
     466:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	0c40                	addi	s0,sp,532
     46a:	0000                	unimp
    int v[size_N];
     46c:	0001                	nop
     46e:	000c405b          	0xc405b
    int q[size_N];
     472:	9200                	0x9200
     474:	000c                	0xc
     476:	0100                	addi	s0,sp,128
    int num_temp[size_N];
     478:	6200                	flw	fs0,0(a2)
     47a:	0c92                	slli	s9,s9,0x4
    int denum_temp[size_D];
     47c:	0000                	unimp
     47e:	0c9a                	slli	s9,s9,0x6
     480:	0000                	unimp
    int num_temp[size_N];
     482:	0004                	0x4
    int denum_temp[size_D];
     484:	9f5b01f3          	0x9f5b01f3
     488:	0c9a                	slli	s9,s9,0x6
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     48a:	0000                	unimp
     48c:	0cac                	addi	a1,sp,600
    int v[size_N];
     48e:	0000                	unimp
     490:	0001                	nop
    array_equ(num_temp,num,size_N);
     492:	0062                	c.slli	zero,0x18
     494:	0000                	unimp
     496:	0000                	unimp
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	0000                	unimp
     49a:	2400                	fld	fs0,8(s0)
    int denum_temp[size_D];
     49c:	000c                	0xc
     49e:	3400                	fld	fs0,40(s0)
    array_equ(num_temp,num,size_N);
     4a0:	000c                	0xc
    int denum_temp[size_D];
     4a2:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     4a4:	5c00                	lw	s0,56(s0)
     4a6:	0c34                	addi	a3,sp,536
     4a8:	0000                	unimp
     4aa:	0c6a                	slli	s8,s8,0x1a
     4ac:	0000                	unimp
    array_equ(denum_temp,denum,size_D);
     4ae:	0001                	nop
     4b0:	6a59                	lui	s4,0x16
     4b2:	000c                	0xc
     4b4:	6d00                	flw	fs0,24(a0)
    for (i = 0; i < size_D; ++i) {
     4b6:	000c                	0xc
     4b8:	0100                	addi	s0,sp,128
     4ba:	5b00                	lw	s0,48(a4)
     4bc:	0c6d                	addi	s8,s8,27
    for (i = 0; i < size_N; ++i){
     4be:	0000                	unimp
     4c0:	0cac                	addi	a1,sp,600
     4c2:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     4c4:	0004                	0x4
     4c6:	9f5c01f3          	0x9f5c01f3
	...
    for (i = 0; i < size_N; ++i){
     4d2:	0c24                	addi	s1,sp,536
        if ( (b_N*u)%mod == 1 )
     4d4:	0000                	unimp
    for (u = 0; u < mod; ++u){
     4d6:	00000c4b          	fnmsub.s	fs8,ft0,ft0,ft0,rne
     4da:	0001                	nop
     4dc:	4b5d                	li	s6,23
            num_temp[i] = num_temp[i] + mod;
     4de:	000c                	0xc
     4e0:	6600                	flw	fs0,8(a2)
        while (num_temp[i] < 0) {
     4e2:	000c                	0xc
     4e4:	0100                	addi	s0,sp,128
     4e6:	6300                	flw	fs0,0(a4)
        num_temp[i] = num_temp[i] % mod;
     4e8:	0c66                	slli	s8,s8,0x19
     4ea:	0000                	unimp
    for (i = 0; i < size_N; ++i){
     4ec:	0cac                	addi	a1,sp,600
     4ee:	0000                	unimp
        num_temp[i] = num_temp[i] % mod;
     4f0:	0004                	0x4
     4f2:	9f5d01f3          	0x9f5d01f3
	...
        while (denum_temp[i] < 0) {
     4fe:	0c24                	addi	s1,sp,536
        denum_temp[i] = denum_temp[i] % mod;
     500:	0000                	unimp
     502:	00000c4b          	fnmsub.s	fs8,ft0,ft0,ft0,rne
    for (i = 0; i < size_D; ++i) {
     506:	0001                	nop
        denum_temp[i] = denum_temp[i] % mod;
     508:	4b5e                	lw	s6,212(sp)
     50a:	000c                	0xc
    for (i = 0; i < size_D; ++i) {
     50c:	9600                	0x9600
        q[i] = 0;
     50e:	000c                	0xc
     510:	0100                	addi	s0,sp,128
     512:	6400                	flw	fs0,8(s0)
     514:	0c96                	slli	s9,s9,0x5
        v[i] = 0;
     516:	0000                	unimp
        q[i] = 0;
     518:	0c9a                	slli	s9,s9,0x6
     51a:	0000                	unimp
        v[i] = 0;
     51c:	0004                	0x4
     51e:	9f5e01f3          	0x9f5e01f3
    for (i = 0; i < size_N; ++i){
     522:	0c9a                	slli	s9,s9,0x6
        if( denum_temp[i] != 0 )
     524:	0000                	unimp
    for (i = size_D-1; i >= 0; i = i-1){
     526:	0cac                	addi	a1,sp,600
     528:	0000                	unimp
        if ( (b_N*u)%mod == 1 )
     52a:	0001                	nop
     52c:	0064                	addi	s1,sp,12
     52e:	0000                	unimp
     530:	0000                	unimp
     532:	0000                	unimp
    for (u = 0; u < mod; ++u){
     534:	6600                	flw	fs0,8(a2)
     536:	000c                	0xc
        if( num_temp[i] != 0 )
     538:	6d00                	flw	fs0,24(a0)
    for (i = size_N-1; i >= 0; i = i-1){
     53a:	000c                	0xc
     53c:	0100                	addi	s0,sp,128
     53e:	5a00                	lw	s0,48(a2)
     540:	0c6d                	addi	s8,s8,27
     542:	0000                	unimp
     544:	0c94                	addi	a3,sp,592
     546:	0000                	unimp
    while (d >= d2){
     548:	0001                	nop
     54a:	000c9a63          	bnez	s9,55e <polydiv+0x118>
    array_equ(result,q,size_N);
     54e:	ac00                	fsd	fs0,24(s0)
     550:	000c                	0xc
     552:	0100                	addi	s0,sp,128
     554:	6300                	flw	fs0,0(a4)
	...
        result[i] = num_temp[i-size_N];
     55e:	0c7e                	slli	s8,s8,0x1f
     560:	0000                	unimp
     562:	0c90                	addi	a2,sp,592
     564:	0000                	unimp
    for(i = size_N; i < (2*size_N); ++i){
     566:	0001                	nop
     568:	9a59                	andi	a2,a2,-10
}
     56a:	000c                	0xc
     56c:	a400                	fsd	fs0,8(s0)
     56e:	000c                	0xc
     570:	0100                	addi	s0,sp,128
     572:	5900                	lw	s0,48(a0)
     574:	0ca4                	addi	s1,sp,600
     576:	0000                	unimp
     578:	0caa                	slli	s9,s9,0xa
     57a:	0000                	unimp
     57c:	7f790003          	lb	zero,2039(s2)
     580:	aa9f 000c ac00      	0xac00000caa9f
     586:	000c                	0xc
     588:	0100                	addi	s0,sp,128
     58a:	5900                	lw	s0,48(a0)
	...
        v[(d-d2)] = u*r_d;
     594:	0930                	addi	a2,sp,152
     596:	0000                	unimp
     598:	0974                	addi	a3,sp,156
     59a:	0000                	unimp
     59c:	0001                	nop
     59e:	745a                	flw	fs0,180(sp)
     5a0:	0009                	c.nop	2
        for (i = 0; i < size_N; ++i){
     5a2:	3800                	fld	fs0,48(s0)
     5a4:	0100000b          	0x100000b
     5a8:	6200                	flw	fs0,0(a2)
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5aa:	0b38                	addi	a4,sp,408
     5ac:	0000                	unimp
     5ae:	0b5c                	addi	a5,sp,404
     5b0:	0000                	unimp
     5b2:	7f850003          	lb	zero,2040(a0) # 30007f8 <_stack_start+0x2ff07f8>
     5b6:	5c9f 000b 7c00      	0x7c00000b5c9f
        for (i = 0; i < size_N; ++i){
     5bc:	0400000b          	0x400000b
     5c0:	f300                	fsw	fs0,32(a4)
        for (i = 0; i < size_N; ++i){
     5c2:	5a01                	li	s4,-32
     5c4:	7c9f 000b 1000      	0x1000000b7c9f
        for (i = 0; i < size_N; ++i){
     5ca:	000c                	0xc
     5cc:	0100                	addi	s0,sp,128
     5ce:	6200                	flw	fs0,0(a2)
    array_add(q,v,size_N);
     5d0:	0c10                	addi	a2,sp,528
     5d2:	0000                	unimp
     5d4:	0c24                	addi	s1,sp,536
     5d6:	0000                	unimp
        for(i = 0; i < size_N; ++i){
     5d8:	7f850003          	lb	zero,2040(a0)
     5dc:	009f 0000 0000      	0x9f
        for (i = size_N-1; i >= 0; i = i-1){
     5e2:	0000                	unimp
     5e4:	3000                	fld	fs0,32(s0)
     5e6:	0009                	c.nop	2
     5e8:	6c00                	flw	fs0,24(s0)
     5ea:	0009                	c.nop	2
     5ec:	0100                	addi	s0,sp,128
     5ee:	5b00                	lw	s0,48(a4)
     5f0:	096c                	addi	a1,sp,156
            v[i] = v[i] % mod;
     5f2:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     5f4:	0b64                	addi	s1,sp,412
     5f6:	0000                	unimp
            v[i] = v[i] % mod;
     5f8:	0001                	nop
     5fa:	000b6467          	0xb6467
     5fe:	7c00                	flw	fs0,56(s0)
        for (i = 0; i < size_N; ++i){
     600:	0400000b          	0x400000b
                product[i] = product[i] + mod;
     604:	f300                	fsw	fs0,32(a4)
            while (product[i] < 0) {
     606:	5b01                	li	s6,-32
     608:	7c9f 000b 2400      	0x2400000b7c9f
            product[i] = product[i] % mod;
     60e:	000c                	0xc
        for (i = 0; i < size_N; ++i){
     610:	0100                	addi	s0,sp,128
     612:	6700                	flw	fs0,8(a4)
	...
            num_temp[i] = num_temp[i] - product[i];
     61c:	0930                	addi	a2,sp,152
     61e:	0000                	unimp
     620:	0970                	addi	a2,sp,156
     622:	0000                	unimp
        for (i = 0; i < size_N; ++i){
     624:	0001                	nop
     626:	705c                	flw	fa5,36(s0)
            num_temp[i] = num_temp[i] - product[i];
     628:	0009                	c.nop	2
     62a:	6000                	flw	fs0,0(s0)
     62c:	0100000b          	0x100000b
                num_temp[i] = num_temp[i] + mod;
     630:	6600                	flw	fs0,8(a2)
     632:	0b60                	addi	s0,sp,412
            while (num_temp[i] < 0){
     634:	0000                	unimp
     636:	0b7c                	addi	a5,sp,412
     638:	0000                	unimp
            num_temp[i] = num_temp[i] % mod;
     63a:	0004                	0x4
     63c:	9f5c01f3          	0x9f5c01f3
        for (i = 0; i < size_N; ++i){
     640:	0b7c                	addi	a5,sp,412
            num_temp[i] = num_temp[i] % mod;
     642:	0000                	unimp
     644:	0c24                	addi	s1,sp,536
        for (i = 0; i < size_N; ++i){
     646:	0000                	unimp
            q[i] = q[i] % mod;
     648:	0001                	nop
        for(i = 0; i < size_N; ++i){
     64a:	0066                	c.slli	zero,0x19
     64c:	0000                	unimp
            q[i] = q[i] % mod;
     64e:	0000                	unimp
     650:	0000                	unimp
     652:	be00                	fsd	fs0,56(a2)
     654:	000a                	c.slli	zero,0x2
        for(i = 0; i < size_N; ++i){
     656:	c800                	sw	s0,16(s0)
            if( num_temp[i] != 0 )
     658:	000a                	c.slli	zero,0x2
        for (i = size_N-1; i >= 0; i = i-1){
     65a:	0100                	addi	s0,sp,128
     65c:	5a00                	lw	s0,48(a2)
	...
            v[i] = 0;
     666:	0ad8                	addi	a4,sp,340
        for (i = 0; i < size_N; ++i){
     668:	0000                	unimp
     66a:	00000af7          	0xaf7
     66e:	0001                	nop
        result[i] = num_temp[i-size_N];
     670:	dc5a                	sw	s6,56(sp)
     672:	f000000b          	0xf000000b
     676:	0100000b          	0x100000b
     67a:	5a00                	lw	s0,48(a2)
	...
    int ri_2[size]; // MX-ring poly, a
     684:	0af8                	addi	a4,sp,348
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     686:	0000                	unimp
    int ri_2[size]; // MX-ring poly, a
     688:	00000b0b          	0xb0b
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     68c:	0001                	nop
     68e:	f05a                	fsw	fs6,32(sp)
     690:	0000000b          	0xb
     694:	000c                	0xc
     696:	0100                	addi	s0,sp,128
     698:	5a00                	lw	s0,48(a2)
	...
     6a2:	0b0c                	addi	a1,sp,400
     6a4:	0000                	unimp
     6a6:	0b28                	addi	a0,sp,408
    int ri_2[size]; // MX-ring poly, a
     6a8:	0000                	unimp
     6aa:	0001                	nop
     6ac:	005a                	c.slli	zero,0x16
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6ae:	000c                	0xc
     6b0:	1000                	addi	s0,sp,32
     6b2:	000c                	0xc
    int ri[size];
     6b4:	0100                	addi	s0,sp,128
     6b6:	5a00                	lw	s0,48(a2)
	...
    int ti[size];
     6c0:	0a72                	slli	s4,s4,0x1c
     6c2:	0000                	unimp
     6c4:	0b40                	addi	s0,sp,404
    int qi_1[size];
     6c6:	0000                	unimp
     6c8:	0002                	c.slli64	zero
     6ca:	0072                	c.slli	zero,0x1c
    int temp[size];
     6cc:	0b40                	addi	s0,sp,404
     6ce:	0000                	unimp
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d0:	0b58                	addi	a4,sp,404
     6d2:	0000                	unimp
     6d4:	0002                	c.slli64	zero
    int ri_2[size]; // MX-ring poly, a
     6d6:	0084                	addi	s1,sp,64
     6d8:	0b58                	addi	a4,sp,404
    int temp[size];
     6da:	0000                	unimp
    for (i = 0; i < size; ++i) {
     6dc:	0b5c                	addi	a5,sp,404
        ti_2[i] = 0;
     6de:	0000                	unimp
     6e0:	0010                	0x10
     6e2:	0091                	addi	ra,ra,4
     6e4:	0085                	addi	ra,ra,1
    for (i = 0; i < size; ++i) {
     6e6:	2432                	fld	fs0,264(sp)
     6e8:	f0090f23          	sb	zero,-226(s2)
    array_equ(ri_2,polyR,size);
     6ec:	1c1a                	slli	s8,s8,0x26
     6ee:	f00a                	fsw	ft2,32(sp)
     6f0:	1c01                	addi	s8,s8,-32
    array_equ(ri_1,polyf,size);
     6f2:	0b5c                	addi	a5,sp,404
     6f4:	0000                	unimp
     6f6:	0b7c                	addi	a5,sp,412
     6f8:	0000                	unimp
    ti_1[0] = 1;
     6fa:	00910013          	addi	zero,sp,9
     6fe:	235a01f3          	0x235a01f3
        for (i = N + 1; i < (2 * N + 2); ++i) {
     702:	3201                	jal	2 <__DYNAMIC+0x2>
     704:	2324                	fld	fs1,64(a4)
     706:	1af0090f          	0x1af0090f
        for (i = 0; i < N + 1; ++i) {
     70a:	0a1c                	addi	a5,sp,272
        ti_2[i] = 0;
     70c:	01f0                	addi	a2,sp,204
     70e:	7c1c                	flw	fa5,56(s0)
     710:	2400000b          	0x2400000b
        ti_1[i] = 0;
     714:	000c                	0xc
        ti_2[i] = 0;
     716:	0200                	addi	s0,sp,256
     718:	7200                	flw	fs0,32(a2)
	...
                ri_2[i] = ri_2[i] + mod;
     722:	7600                	flw	fs0,40(a2)
     724:	000a                	c.slli	zero,0x2
            while (ri_2[i] < 0) {
     726:	7800                	flw	fs0,48(s0)
     728:	000a                	c.slli	zero,0x2
     72a:	0200                	addi	s0,sp,256
            ri_2[i] = ri_2[i] % mod;
     72c:	3100                	fld	fs0,32(a0)
     72e:	789f 000a 7e00      	0x7e00000a789f
        for (i = 0; i < N + 1; ++i) {
     734:	000a                	c.slli	zero,0x2
     736:	0100                	addi	s0,sp,128
     738:	5f00                	lw	s0,56(a4)
     73a:	0a82                	c.slli64	s5
     73c:	0000                	unimp
     73e:	0a88                	addi	a0,sp,336
     740:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     742:	0001                	nop
     744:	905f 000a 9e00      	0x9e00000a905f
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     74a:	000a                	c.slli	zero,0x2
     74c:	0100                	addi	s0,sp,128
     74e:	5f00                	lw	s0,56(a4)
     750:	0aa8                	addi	a0,sp,344
     752:	0000                	unimp
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	0abd                	addi	s5,s5,15
     756:	0000                	unimp
     758:	0001                	nop
     75a:	be5f 000a c800      	0xc800000abe5f
     760:	000a                	c.slli	zero,0x2
        for (i = 0; i < N + 1; ++i) {
     762:	0500                	addi	s0,sp,640
     764:	8200                	0x8200
     766:	3100                	fld	fs0,32(a0)
     768:	9f24                	0x9f24
     76a:	0ac8                	addi	a0,sp,340
        for (i = 0; i < N + 1; ++i) {
     76c:	0000                	unimp
     76e:	00000ad7          	0xad7
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     772:	0001                	nop
     774:	d85f 000a e800      	0xe800000ad85f
     77a:	000a                	c.slli	zero,0x2
     77c:	0500                	addi	s0,sp,640
     77e:	8200                	0x8200
    array_equ(qi_1,res1,size);
     780:	3300                	fld	fs0,32(a4)
     782:	9f1e                	add	t5,t5,t2
     784:	0ae8                	addi	a0,sp,348
        for (i = 0; i < N + 1; ++i) {
     786:	0000                	unimp
     788:	0af8                	addi	a4,sp,348
     78a:	0000                	unimp
     78c:	0001                	nop
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78e:	f859                	bnez	s0,724 <ext_euclid+0xa2>
     790:	000a                	c.slli	zero,0x2
     792:	0000                	unimp
     794:	0200000b          	0x200000b
     798:	3000                	fld	fs0,32(s0)
     79a:	009f 000b 0800      	0x800000b009f
    array_equ(temp,res2,size);
     7a0:	0100000b          	0x100000b
        for (i = 0; i < N + 1; ++i) {
     7a4:	5e00                	lw	s0,56(a2)
     7a6:	0b0c                	addi	a1,sp,400
     7a8:	0000                	unimp
     7aa:	0b1e                	slli	s6,s6,0x7
        for (i = 0; i < N + 1; ++i) {
     7ac:	0000                	unimp
     7ae:	0005                	c.nop	1
     7b0:	0082                	c.slli64	ra
     7b2:	2432                	fld	fs0,264(sp)
        for (i = 0; i < N + 1; ++i) {
     7b4:	1e9f 000b 3800      	0x3800000b1e9f
array_equ(ri_2,ri_1,size);
     7ba:	0100000b          	0x100000b
     7be:	6800                	flw	fs0,16(s0)
     7c0:	0b38                	addi	a4,sp,408
array_equ(ri_1,ri,size);
     7c2:	0000                	unimp
     7c4:	0bb8                	addi	a4,sp,472
     7c6:	0000                	unimp
     7c8:	0001                	nop
array_equ(ti_2,ti_1,size);
     7ca:	b85f 000b ba00      	0xba00000bb85f
     7d0:	0300000b          	0x300000b
     7d4:	7f00                	flw	fs0,56(a4)
     7d6:	9f7f                	0x9f7f
array_equ(ti_1,ti,size);
     7d8:	0bba                	slli	s7,s7,0xe
     7da:	0000                	unimp
     7dc:	0bdc                	addi	a5,sp,468
     7de:	0000                	unimp
        controlR = 0;
     7e0:	0001                	nop
        for (i = 0; i < N + 1; ++i) {
     7e2:	dc5f 000b ec00      	0xec00000bdc5f
    while (controlR != 0) {
     7e8:	0100000b          	0x100000b
        for (j = 0; j < mod; ++j) {
     7ec:	5900                	lw	s0,48(a0)
            if (((ri_2[0] * j) % mod) == 1)
     7ee:	0bec                	addi	a1,sp,476
        for (j = 0; j < mod; ++j) {
     7f0:	0000                	unimp
     7f2:	0bee                	slli	s7,s7,0x1b
     7f4:	0000                	unimp
     7f6:	7f790003          	lb	zero,2039(s2)
     7fa:	ee9f 000b f000      	0xf000000bee9f
    }
     800:	0100000b          	0x100000b
     804:	5900                	lw	s0,48(a0)
     806:	0bf0                	addi	a2,sp,476
     808:	0000                	unimp
     80a:	0bf4                	addi	a3,sp,476
     80c:	0000                	unimp
     80e:	0001                	nop
     810:	f45e                	fsw	fs7,40(sp)
     812:	fe00000b          	0xfe00000b
     816:	0300000b          	0x300000b
     81a:	7e00                	flw	fs0,56(a2)
     81c:	9f7f                	0x9f7f
     81e:	0bfe                	slli	s7,s7,0x1f
     820:	0000                	unimp
     822:	0c00                	addi	s0,sp,528
     824:	0000                	unimp
     826:	0001                	nop
     828:	005e                	c.slli	zero,0x17
                ri_1[i] = ri_1[i] + mod;
     82a:	000c                	0xc
     82c:	1000                	addi	s0,sp,32
            while (ri_1[i] < 0) {
     82e:	000c                	0xc
     830:	0100                	addi	s0,sp,128
     832:	6800                	flw	fs0,16(s0)
            ri_1[i] = ri_1[i] % mod;
     834:	0c10                	addi	a2,sp,528
     836:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     838:	0c20                	addi	s0,sp,536
     83a:	0000                	unimp
            ri_1[i] = ri_1[i] % mod;
     83c:	0001                	nop
     83e:	205f 000c 2200      	0x2200000c205f
            ri[i - (N + 1)] = res[i];
     844:	000c                	0xc
     846:	0300                	addi	s0,sp,384
     848:	7f00                	flw	fs0,56(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
     84a:	9f7f                	0x9f7f
     84c:	0c22                	slli	s8,s8,0x8
            ri[i - (N + 1)] = res[i];
     84e:	0000                	unimp
     850:	0c24                	addi	s1,sp,536
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0000                	unimp
            temp[i] = ri_2[i] - ri[i];
     854:	0001                	nop
     856:	005f 0000 0000      	0x5f
     85c:	0000                	unimp
     85e:	3c00                	fld	fs0,56(s0)
     860:	7c00000b          	0x7c00000b
        for (i = 0; i < N + 1; ++i) {
     864:	0600000b          	0x600000b
            temp[i] = ri_2[i] - ri[i];
     868:	0300                	addi	s0,sp,384
        for (i = 0; i < N + 1; ++i) {
     86a:	1ad4                	addi	a3,sp,372
     86c:	0000                	unimp
                temp[i] = temp[i] + mod;
     86e:	009f 0000 0000      	0x9f
            while (temp[i] < 0) {
     874:	0000                	unimp
     876:	7200                	flw	fs0,32(a2)
            temp[i] = temp[i] % mod;
     878:	000a                	c.slli	zero,0x2
     87a:	3800                	fld	fs0,48(s0)
        for (i = 0; i < N + 1; ++i) {
     87c:	0100000b          	0x100000b
            temp[i] = temp[i] % mod;
     880:	6200                	flw	fs0,0(a2)
     882:	0b38                	addi	a4,sp,408
        for (i = 0; i < N + 1; ++i) {
     884:	0000                	unimp
                qi_1[i] = qi_1[i] + mod;
     886:	0b5c                	addi	a5,sp,404
     888:	0000                	unimp
            while (qi_1[i] < 0) {
     88a:	7f850003          	lb	zero,2040(a0)
     88e:	5c9f 000b 7c00      	0x7c00000b5c9f
        for (i = 0; i < N + 1; ++i) {
     894:	0400000b          	0x400000b
            qi_1[i] = qi_1[i] % mod;
     898:	f300                	fsw	fs0,32(a4)
     89a:	5a01                	li	s4,-32
        for (i = 0; i < N + 1; ++i) {
     89c:	7c9f 000b 1000      	0x1000000b7c9f
                temp[i] = temp[i] + mod;
     8a2:	000c                	0xc
            while (temp[i] < 0) {
     8a4:	0100                	addi	s0,sp,128
     8a6:	6200                	flw	fs0,0(a2)
     8a8:	0c10                	addi	a2,sp,528
     8aa:	0000                	unimp
            temp[i] = temp[i] % mod;
     8ac:	0c24                	addi	s1,sp,536
     8ae:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8b0:	7f850003          	lb	zero,2040(a0)
            temp[i] = temp[i] % mod;
     8b4:	009f 0000 0000      	0x9f
            ti[i] = ti_2[i] - temp[i];
     8ba:	0000                	unimp
     8bc:	8200                	0x8200
     8be:	0006                	c.slli	zero,0x1
     8c0:	f000                	fsw	fs0,32(s0)
     8c2:	0006                	c.slli	zero,0x1
     8c4:	0100                	addi	s0,sp,128
     8c6:	5a00                	lw	s0,48(a2)
     8c8:	06f0                	addi	a2,sp,844
     8ca:	0000                	unimp
     8cc:	06f1                	addi	a3,a3,28
     8ce:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8d0:	0001                	nop
            ti[i] = ti_2[i] - temp[i];
     8d2:	0006f15b          	0x6f15b
        for (i = 0; i < N + 1; ++i) {
     8d6:	0c00                	addi	s0,sp,528
     8d8:	04000007          	0x4000007
                ti[i] = ti[i] + mod;
     8dc:	f300                	fsw	fs0,32(a4)
            while (ti[i] < 0) {
     8de:	5a01                	li	s4,-32
     8e0:	0c9f 0007 2200      	0x220000070c9f
            ti[i] = ti[i] % mod;
     8e6:	01000007          	0x1000007
        for (i = 0; i < N + 1; ++i) {
     8ea:	5a00                	lw	s0,48(a2)
            ti[i] = ti[i] % mod;
     8ec:	0722                	slli	a4,a4,0x8
     8ee:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     8f0:	0930                	addi	a2,sp,152
              qi_1[i] = 0;
     8f2:	0000                	unimp
     8f4:	0004                	0x4
     8f6:	9f5a01f3          	0x9f5a01f3
	...
        for (i = 0; i < N + 1; ++i) {
     902:	0682                	c.slli64	a3
            controlR += ri[i];
     904:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     906:	06ec                	addi	a1,sp,844
            if (((ri_2[0] * j) % mod) == 1)
     908:	0000                	unimp
     90a:	0001                	nop
     90c:	0006ec5b          	0x6ec5b
     910:	0800                	addi	s0,sp,16
     912:	01000007          	0x1000007
     916:	6a00                	flw	fs0,16(a2)
        for (j = 0; j < mod; ++j) {
     918:	0708                	addi	a0,sp,896
     91a:	0000                	unimp
            ti_2[i] = (ti_2[i] * j) % mod;
     91c:	070c                	addi	a1,sp,896
        for (i = 0; i < N + 1; ++i) {
     91e:	0000                	unimp
     920:	0004                	0x4
            ti_2[i] = (ti_2[i] * j) % mod;
     922:	9f5b01f3          	0x9f5b01f3
     926:	070c                	addi	a1,sp,896
     928:	0000                	unimp
     92a:	0722                	slli	a4,a4,0x8
     92c:	0000                	unimp
        for (i = 0; i < N + 1; ++i) {
     92e:	0001                	nop
int* generate_keys(int N, int p, int q){
     930:	0007225b          	0x7225b
     934:	3000                	fld	fs0,32(s0)
     936:	0009                	c.nop	2
     938:	0400                	addi	s0,sp,512
     93a:	f300                	fsw	fs0,32(a4)
     93c:	5b01                	li	s6,-32
     93e:	009f 0000 0000      	0x9f
     944:	0000                	unimp
     946:	8200                	0x8200
     948:	0006                	c.slli	zero,0x1
     94a:	e600                	fsw	fs0,8(a2)
     94c:	0006                	c.slli	zero,0x1
     94e:	0100                	addi	s0,sp,128
     950:	5c00                	lw	s0,56(s0)
     952:	06e6                	slli	a3,a3,0x19
     954:	0000                	unimp
     956:	080a                	slli	a6,a6,0x2
     958:	0000                	unimp
     95a:	0001                	nop
     95c:	0a59                	addi	s4,s4,22
     95e:	0008                	0x8
     960:	1e00                	addi	s0,sp,816
     962:	0008                	0x8
     964:	0300                	addi	s0,sp,384
     966:	8b00                	0x8b00
     968:	9f01                	0x9f01
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96a:	081e                	slli	a6,a6,0x7
     96c:	0000                	unimp
     96e:	082a                	slli	a6,a6,0xa
     970:	0000                	unimp
     972:	0004                	0x4
     974:	9f5c01f3          	0x9f5c01f3
     978:	082a                	slli	a6,a6,0xa
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0000                	unimp
     97c:	0930                	addi	a2,sp,152
     97e:	0000                	unimp
     980:	0001                	nop
     982:	0059                	c.nop	22
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	0000                	unimp
     986:	0000                	unimp
     988:	0000                	unimp
     98a:	8200                	0x8200
     98c:	0006                	c.slli	zero,0x1
     98e:	e600                	fsw	fs0,8(a2)
     990:	0006                	c.slli	zero,0x1
     992:	0100                	addi	s0,sp,128
     994:	5d00                	lw	s0,56(a0)
     996:	06e6                	slli	a3,a3,0x19
     998:	0000                	unimp
     99a:	080c                	addi	a1,sp,16
     99c:	0000                	unimp
     99e:	0001                	nop
     9a0:	0c62                	slli	s8,s8,0x18
     9a2:	0008                	0x8
     9a4:	2a00                	fld	fs0,16(a2)
     9a6:	0008                	0x8
     9a8:	0400                	addi	s0,sp,512
     9aa:	f300                	fsw	fs0,32(a4)
     9ac:	5d01                	li	s10,-32
     9ae:	2a9f 0008 3000      	0x300000082a9f
     9b4:	0009                	c.nop	2
     9b6:	0100                	addi	s0,sp,128
     9b8:	6200                	flw	fs0,0(a2)
	...
     9c2:	0800                	addi	s0,sp,16
     9c4:	0000                	unimp
     9c6:	082a                	slli	a6,a6,0xa
     9c8:	0000                	unimp
     9ca:	0006                	c.slli	zero,0x1
     9cc:	00194403          	lbu	s0,1(s2)
     9d0:	9f00                	0x9f00
	...
     9da:	06dc                	addi	a5,sp,836
     9dc:	0000                	unimp
     9de:	081e                	slli	a6,a6,0x7
     9e0:	0000                	unimp
     9e2:	0001                	nop
     9e4:	00081e6b          	0x81e6b
     9e8:	2a00                	fld	fs0,16(a2)
     9ea:	0008                	0x8
     9ec:	0600                	addi	s0,sp,768
     9ee:	f300                	fsw	fs0,32(a4)
    int polyR[N+1];
     9f0:	5c01                	li	s8,-32
     9f2:	1c31                	addi	s8,s8,-20
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	2a9f 0008 3000      	0x300000082a9f
    int polyR[N+1];
     9fa:	0009                	c.nop	2
     9fc:	0100                	addi	s0,sp,128
     9fe:	6b00                	flw	fs0,16(a4)
	...
    polyR[N] = 1;
     a08:	06dc                	addi	a5,sp,836
     a0a:	0000                	unimp
     a0c:	06e6                	slli	a3,a3,0x19
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a0e:	0000                	unimp
     a10:	0002                	c.slli64	zero
     a12:	9f30                	0x9f30
     a14:	06e6                	slli	a3,a3,0x19
     a16:	0000                	unimp
     a18:	06f1                	addi	a3,a3,28
     a1a:	0000                	unimp
     a1c:	0001                	nop
     a1e:	0c5f 0007 2200      	0x220000070c5f
     a24:	01000007          	0x1000007
     a28:	5f00                	lw	s0,56(a4)
     a2a:	0722                	slli	a4,a4,0x8
     a2c:	0000                	unimp
     a2e:	0732                	slli	a4,a4,0xc
     a30:	0000                	unimp
     a32:	0001                	nop
     a34:	325d                	jal	3da <polymult2+0xf2>
     a36:	34000007          	0x34000007
     a3a:	03000007          	0x3000007
     a3e:	7d00                	flw	fs0,56(a0)
     a40:	9f7f                	0x9f7f
     a42:	0734                	addi	a3,sp,904
     a44:	0000                	unimp
     a46:	074c                	addi	a1,sp,900
     a48:	0000                	unimp
     a4a:	0001                	nop
     a4c:	545d                	li	s0,-9
     a4e:	58000007          	0x58000007
     a52:	01000007          	0x1000007
     a56:	5900                	lw	s0,48(a0)
     a58:	0758                	addi	a4,sp,900
     a5a:	0000                	unimp
     a5c:	0762                	slli	a4,a4,0x18
     a5e:	0000                	unimp
     a60:	0001                	nop
     a62:	645f 0007 6c00      	0x6c000007645f
     a68:	01000007          	0x1000007
     a6c:	5e00                	lw	s0,56(a2)
     a6e:	076e                	slli	a4,a4,0x1b
     a70:	0000                	unimp
    polyR[0] = -1;
     a72:	0776                	slli	a4,a4,0x1d
     a74:	0000                	unimp
    for(i = 1; i < N; ++i){
     a76:	0001                	nop
     a78:	865d                	srai	a2,a2,0x17
     a7a:	8a000007          	0x8a000007
    for (i = N; i < 55; ++i ){
     a7e:	02000007          	0x2000007
     a82:	3000                	fld	fs0,32(s0)
     a84:	8a9f 0007 9400      	0x940000078a9f
        random_keys[i] = f[i];
     a8a:	01000007          	0x1000007
     a8e:	5d00                	lw	s0,56(a0)
    for(i = 0; i < N; ++i){
     a90:	07a4                	addi	s1,sp,968
     a92:	0000                	unimp
     a94:	07a6                	slli	a5,a5,0x9
     a96:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     a98:	0002                	c.slli64	zero
     a9a:	9f30                	0x9f30
     a9c:	07a6                	slli	a5,a5,0x9
     a9e:	0000                	unimp
        random_keys[i] = g[i-N];
     aa0:	07b4                	addi	a3,sp,968
     aa2:	0000                	unimp
     aa4:	0001                	nop
     aa6:	b65e                	fsd	fs7,296(sp)
    for(i = N; i < (2*N); ++i){
     aa8:	c1000007          	0xc1000007
    for(i = (2*N); i < (3*N); ++i){
     aac:	01000007          	0x1000007
     ab0:	5d00                	lw	s0,56(a0)
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	07e0                	addi	s0,sp,972
     ab4:	0000                	unimp
     ab6:	07e4                	addi	s1,sp,972
     ab8:	0000                	unimp
     aba:	0002                	c.slli64	zero
     abc:	9f30                	0x9f30
    for(i = (2*N); i < (3*N); ++i){
     abe:	07e4                	addi	s1,sp,972
        random_keys[i] = fp[i-(2*N)];
     ac0:	0000                	unimp
     ac2:	07ee                	slli	a5,a5,0x1b
     ac4:	0000                	unimp
     ac6:	0001                	nop
    for(i = (2*N); i < (3*N); ++i){
     ac8:	fc5e                	fsw	fs7,56(sp)
     aca:	2a000007          	0x2a000007
    fq = ext_euclid(polyR, f, (N+1), q);
     ace:	0008                	0x8
     ad0:	0100                	addi	s0,sp,128
     ad2:	5f00                	lw	s0,56(a4)
     ad4:	082a                	slli	a6,a6,0xa
     ad6:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     ad8:	083a                	slli	a6,a6,0xe
     ada:	0000                	unimp
     adc:	0001                	nop
     ade:	3a5d                	jal	494 <polydiv+0x4e>
        random_keys[i] = fq[i-(3*N)];
     ae0:	0008                	0x8
     ae2:	4000                	lw	s0,0(s0)
     ae4:	0008                	0x8
     ae6:	0300                	addi	s0,sp,384
    for(i = (3*N); i < (4*N); ++i){
     ae8:	7d00                	flw	fs0,56(a0)
     aea:	9f7f                	0x9f7f
    fg = polymult2(fq, N, g, N, 0);
     aec:	0840                	addi	s0,sp,20
     aee:	0000                	unimp
     af0:	0842                	slli	a6,a6,0x10
     af2:	0000                	unimp
     af4:	0001                	nop
     af6:	425d                	li	tp,23
    for(i = 0; i < (2*N-1); ++i){
     af8:	0008                	0x8
     afa:	4c00                	lw	s0,24(s0)
     afc:	0008                	0x8
     afe:	0100                	addi	s0,sp,128
     b00:	5f00                	lw	s0,56(a4)
     b02:	084c                	addi	a1,sp,20
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b04:	0000                	unimp
     b06:	0852                	slli	a6,a6,0x14
     b08:	0000                	unimp
     b0a:	7f7f0003          	lb	zero,2039(t5) # 1b7f7 <_stack_start+0xb7f7>
    for(i = (4*N); i < (5*N); ++i){
     b0e:	529f 0008 5400      	0x54000008529f
     b14:	0008                	0x8
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	0100                	addi	s0,sp,128
     b18:	5f00                	lw	s0,56(a4)
     b1a:	0854                	addi	a3,sp,20
     b1c:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     b1e:	0866                	slli	a6,a6,0x19
     b20:	0000                	unimp
     b22:	0001                	nop
    for(i = (5*N); i < (6*N+1); ++i){
     b24:	665e                	flw	fa2,212(sp)
     b26:	0008                	0x8
        random_keys[i] = polyR[i-(5*N)];
     b28:	6a00                	flw	fs0,16(a2)
     b2a:	0008                	0x8
     b2c:	0300                	addi	s0,sp,384
     b2e:	7e00                	flw	fs0,56(a2)
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	9f7f                	0x9f7f
     b32:	086a                	slli	a6,a6,0x1a
     b34:	0000                	unimp
     b36:	086e                	slli	a6,a6,0x1b
     b38:	0000                	unimp
     b3a:	0001                	nop
}
     b3c:	6e5e                	flw	ft8,212(sp)
     b3e:	0008                	0x8
     b40:	7e00                	flw	fs0,56(a2)
     b42:	0008                	0x8
     b44:	0100                	addi	s0,sp,128
     b46:	5d00                	lw	s0,56(a0)
     b48:	087e                	slli	a6,a6,0x1f
     b4a:	0000                	unimp
     b4c:	0884                	addi	s1,sp,80
     b4e:	0000                	unimp
     b50:	7f7d0003          	lb	zero,2039(s10)
     b54:	849f 0008 9600      	0x96000008849f
     b5a:	0008                	0x8
     b5c:	0100                	addi	s0,sp,128
     b5e:	5d00                	lw	s0,56(a0)
     b60:	0896                	slli	a7,a7,0x5
     b62:	0000                	unimp
     b64:	089c                	addi	a5,sp,80
     b66:	0000                	unimp
     b68:	7f7d0003          	lb	zero,2039(s10)
     b6c:	9c9f 0008 9e00      	0x9e0000089c9f
     b72:	0008                	0x8
     b74:	0100                	addi	s0,sp,128
     b76:	5d00                	lw	s0,56(a0)
     b78:	089e                	slli	a7,a7,0x7
     b7a:	0000                	unimp
        polyR[i] = 0;
     b7c:	08b2                	slli	a7,a7,0xc
     b7e:	0000                	unimp
     b80:	0001                	nop
     b82:	b25e                	fsd	fs7,288(sp)
     b84:	0008                	0x8
    for(i = 1; i < N; ++i){
     b86:	b800                	fsd	fs0,48(s0)
     b88:	0008                	0x8
        f[i] = 0;
     b8a:	0300                	addi	s0,sp,384
     b8c:	7e00                	flw	fs0,56(a2)
     b8e:	9f7f                	0x9f7f
     b90:	08b8                	addi	a4,sp,88
     b92:	0000                	unimp
     b94:	08d2                	slli	a7,a7,0x14
     b96:	0000                	unimp
        g[i] = 0;
     b98:	0001                	nop
     b9a:	d25e                	sw	s7,36(sp)
     b9c:	0008                	0x8
     b9e:	d600                	sw	s0,40(a2)
     ba0:	0008                	0x8
    for (i = N; i < 55; ++i ){
     ba2:	0300                	addi	s0,sp,384
     ba4:	7e00                	flw	fs0,56(a2)
        random_keys[i] = f[i];
     ba6:	9f7f                	0x9f7f
     ba8:	08d6                	slli	a7,a7,0x15
     baa:	0000                	unimp
     bac:	08da                	slli	a7,a7,0x16
     bae:	0000                	unimp
     bb0:	0001                	nop
     bb2:	da5e                	sw	s7,52(sp)
     bb4:	0008                	0x8
    for(i = 0; i < N; ++i){
     bb6:	ea00                	fsw	fs0,16(a2)
        random_keys[i] = f[i];
     bb8:	0008                	0x8
    for(i = 0; i < N; ++i){
     bba:	0100                	addi	s0,sp,128
        random_keys[i] = g[i-N];
     bbc:	5d00                	lw	s0,56(a0)
     bbe:	08ea                	slli	a7,a7,0x1a
     bc0:	0000                	unimp
     bc2:	08f0                	addi	a2,sp,92
     bc4:	0000                	unimp
    for(i = N; i < (2*N); ++i){
     bc6:	7f7d0003          	lb	zero,2039(s10)
     bca:	f09f 0008 f200      	0xf2000008f09f
        random_keys[i] = fp[i-(2*N)];
     bd0:	0008                	0x8
     bd2:	0100                	addi	s0,sp,128
     bd4:	5d00                	lw	s0,56(a0)
    for(i = (2*N); i < (3*N); ++i){
     bd6:	08f2                	slli	a7,a7,0x1c
     bd8:	0000                	unimp
     bda:	0904                	addi	s1,sp,144
        random_keys[i] = fq[i-(3*N)];
     bdc:	0000                	unimp
     bde:	0001                	nop
     be0:	045e                	slli	s0,s0,0x17
     be2:	0009                	c.nop	2
     be4:	0600                	addi	s0,sp,768
     be6:	0009                	c.nop	2
     be8:	0300                	addi	s0,sp,384
    for(i = (3*N); i < (4*N); ++i){
     bea:	7e00                	flw	fs0,56(a2)
        random_keys[i] = fq[i-(3*N)];
     bec:	9f7f                	0x9f7f
    for(i = (3*N); i < (4*N); ++i){
     bee:	0906                	slli	s2,s2,0x1
        fg[i] = fg[i]*p;
     bf0:	0000                	unimp
    for(i = 0; i < (2*N-1); ++i){
     bf2:	0908                	addi	a0,sp,144
     bf4:	0000                	unimp
        fg[i] = fg[i]*p;
     bf6:	0001                	nop
     bf8:	1c5e                	slli	s8,s8,0x37
     bfa:	0009                	c.nop	2
     bfc:	2000                	fld	fs0,0(s0)
    for(i = 0; i < (2*N-1); ++i){
     bfe:	0009                	c.nop	2
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c00:	0100                	addi	s0,sp,128
     c02:	5f00                	lw	s0,56(a4)
     c04:	0920                	addi	s0,sp,152
     c06:	0000                	unimp
     c08:	092e                	slli	s2,s2,0xb
     c0a:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     c0c:	7f7f0003          	lb	zero,2039(t5)
        random_keys[i] = polyR[i-(5*N)];
     c10:	2e9f 0009 3000      	0x300000092e9f
     c16:	0009                	c.nop	2
     c18:	0100                	addi	s0,sp,128
     c1a:	5f00                	lw	s0,56(a4)
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	07f0                	addi	a2,sp,972
     c26:	0000                	unimp
     c28:	082a                	slli	a6,a6,0xa
     c2a:	0000                	unimp
     c2c:	0001                	nop
     c2e:	085e                	slli	a6,a6,0x17
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c30:	0009                	c.nop	2
     c32:	3000                	fld	fs0,32(s0)
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c34:	0009                	c.nop	2
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	0100                	addi	s0,sp,128
     c38:	5e00                	lw	s0,56(a2)
	...
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c42:	06da                	slli	a3,a3,0x16
     c44:	0000                	unimp
     c46:	080e                	slli	a6,a6,0x3
     c48:	0000                	unimp
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4a:	0002                	c.slli64	zero
    temp = polymult(public_key,N,random_val,48,q,0);
     c4c:	082a0083          	lb	ra,130(s4) # 16082 <_stack_start+0x6082>
     c50:	0000                	unimp
     c52:	0930                	addi	a2,sp,152
     c54:	0000                	unimp
     c56:	0002                	c.slli64	zero
     c58:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
     c5c:	0000                	unimp
array_add(temp,message,48);
     c5e:	0000                	unimp
     c60:	0000                	unimp
     c62:	06da                	slli	a3,a3,0x16
    temp = polymult(public_key,N,random_val,48,q,0);
     c64:	0000                	unimp
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c66:	0810                	addi	a2,sp,16
     c68:	0000                	unimp
array_add(temp,message,48);
     c6a:	0002                	c.slli64	zero
     c6c:	0084                	addi	s1,sp,64
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c6e:	082a                	slli	a6,a6,0xa
     c70:	0000                	unimp
     c72:	0930                	addi	a2,sp,152
     c74:	0000                	unimp
     c76:	0002                	c.slli64	zero
     c78:	0084                	addi	s1,sp,64
	...
    for(i = (2*N); i < (3*N); ++i){
     c82:	06da                	slli	a3,a3,0x16
     c84:	0000                	unimp
     c86:	0816                	slli	a6,a6,0x5
     c88:	0000                	unimp
}
     c8a:	0002                	c.slli64	zero
     c8c:	082a0087          	0x82a0087
     c90:	0000                	unimp
     c92:	0930                	addi	a2,sp,152
     c94:	0000                	unimp
     c96:	0002                	c.slli64	zero
     c98:	00000087          	0x87
        CT[i-(2*N)] = CT[i];
     c9c:	0000                	unimp
     c9e:	0000                	unimp
     ca0:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     ca2:	06da                	slli	a3,a3,0x16
     ca4:	0000                	unimp
        CT[i-(2*N)] = CT[i];
     ca6:	0814                	addi	a3,sp,16
     ca8:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     caa:	0002                	c.slli64	zero
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cac:	0086                	slli	ra,ra,0x1
     cae:	0814                	addi	a3,sp,16
     cb0:	0000                	unimp
     cb2:	0816                	slli	a6,a6,0x5
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb4:	0000                	unimp
     cb6:	000c                	0xc
     cb8:	018b0087          	0x18b0087
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cbc:	2432                	fld	fs0,264(sp)
     cbe:	f0090f23          	sb	zero,-226(s2)
     cc2:	1c1a                	slli	s8,s8,0x26
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	082a                	slli	a6,a6,0xa
     cc6:	0000                	unimp
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	0930                	addi	a2,sp,152
     cca:	0000                	unimp
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ccc:	0002                	c.slli64	zero
     cce:	0086                	slli	ra,ra,0x1
	...
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd8:	06da                	slli	a3,a3,0x16
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	0000                	unimp
     cdc:	081a                	slli	a6,a6,0x6
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cde:	0000                	unimp
     ce0:	0002                	c.slli64	zero
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	0089                	addi	ra,ra,2
     ce4:	082a                	slli	a6,a6,0xa
     ce6:	0000                	unimp
     ce8:	0930                	addi	a2,sp,152
     cea:	0000                	unimp
     cec:	0002                	c.slli64	zero
     cee:	0089                	addi	ra,ra,2
	...
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf8:	06da                	slli	a3,a3,0x16
     cfa:	0000                	unimp
     cfc:	0818                	addi	a4,sp,16
        if(a2[i] <= q/2)
     cfe:	0000                	unimp
     d00:	0002                	c.slli64	zero
     d02:	0088                	addi	a0,sp,64
    for (i = 0; i < N; ++i){
     d04:	0818                	addi	a4,sp,16
     d06:	0000                	unimp
     d08:	081a                	slli	a6,a6,0x6
    c = polymult2(secret_key_fp,N,a2,N,0);
     d0a:	0000                	unimp
     d0c:	000c                	0xc
     d0e:	0089                	addi	ra,ra,2
     d10:	2432018b          	0x2432018b
     d14:	f0090f23          	sb	zero,-226(s2)
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d18:	1c1a                	slli	s8,s8,0x26
     d1a:	082a                	slli	a6,a6,0xa
     d1c:	0000                	unimp
     d1e:	0930                	addi	a2,sp,152
     d20:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d22:	0002                	c.slli64	zero
     d24:	0088                	addi	a0,sp,64
	...
}
     d2e:	06dc                	addi	a5,sp,836
     d30:	0000                	unimp
     d32:	0804                	addi	s1,sp,16
     d34:	0000                	unimp
     d36:	0002                	c.slli64	zero
     d38:	0072                	c.slli	zero,0x1c
     d3a:	0804                	addi	s1,sp,16
     d3c:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d3e:	0812                	slli	a6,a6,0x4
     d40:	0000                	unimp
     d42:	0002                	c.slli64	zero
     d44:	0085                	addi	ra,ra,1
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0812                	slli	a6,a6,0x4
     d48:	0000                	unimp
        a2[i-(2*N)] = a2[i];
     d4a:	0818                	addi	a4,sp,16
     d4c:	0000                	unimp
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	000c                	0xc
        if(a2[i] <= q/2)
     d50:	0088                	addi	a0,sp,64
     d52:	2432018b          	0x2432018b
            a2[i] = (-1)*(q-a2[i]);
     d56:	f0090f23          	sb	zero,-226(s2)
     d5a:	1c1a                	slli	s8,s8,0x26
    for (i = 0; i < N; ++i){
     d5c:	0818                	addi	a4,sp,16
     d5e:	0000                	unimp
     d60:	081a                	slli	a6,a6,0x6
        c2[i-(2*N)] = c2[i];
     d62:	0000                	unimp
     d64:	000e                	c.slli	zero,0x3
     d66:	0089                	addi	ra,ra,2
     d68:	2432018b          	0x2432018b
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6c:	f0090f23          	sb	zero,-226(s2)
        c2[i-(2*N)] = c2[i];
     d70:	311a                	fld	ft2,416(sp)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	1c24                	addi	s1,sp,568
  jal x0, default_exc_handler
     d74:	082a                	slli	a6,a6,0xa
     d76:	0000                	unimp
  mv  x1, x0
     d78:	0930                	addi	a2,sp,152
     d7a:	0000                	unimp
  mv  x2, x1
     d7c:	0002                	c.slli64	zero
  mv  x3, x1
     d7e:	0072                	c.slli	zero,0x1c
	...
  mv  x8, x1
     d88:	0754                	addi	a3,sp,900
  mv  x9, x1
     d8a:	0000                	unimp
  mv x10, x1
     d8c:	077c                	addi	a5,sp,908
  mv x11, x1
     d8e:	0000                	unimp
  mv x12, x1
     d90:	0001                	nop
  mv x13, x1
     d92:	425a                	lw	tp,148(sp)
  mv x14, x1
     d94:	0008                	0x8
  mv x15, x1
     d96:	8600                	0x8600
  mv x16, x1
     d98:	0008                	0x8
  mv x17, x1
     d9a:	0100                	addi	s0,sp,128
  mv x18, x1
     d9c:	5a00                	lw	s0,48(a2)
	...
  mv x23, x1
     da6:	0780                	addi	s0,sp,960
  mv x24, x1
     da8:	0000                	unimp
  mv x25, x1
     daa:	0784                	addi	s1,sp,960
  mv x26, x1
     dac:	0000                	unimp
  mv x27, x1
     dae:	0001                	nop
  mv x28, x1
     db0:	845a                	mv	s0,s6
  mv x29, x1
     db2:	85000007          	0x85000007
  mv x31, x1
     db6:	01000007          	0x1000007
  la   x2, _stack_start
     dba:	5b00                	lw	s0,48(a4)
	...
  la x26, _bss_start
     dc4:	079e                	slli	a5,a5,0x7
     dc6:	0000                	unimp
  la x27, _bss_end
     dc8:	07a2                	slli	a5,a5,0x8
     dca:	0000                	unimp
     dcc:	0001                	nop
     dce:	a25a                	fsd	fs6,256(sp)
  bge x26, x27, zero_loop_end
     dd0:	a3000007          	0xa3000007
  sw x0, 0(x26)
     dd4:	01000007          	0x1000007
  addi x26, x26, 4
     dd8:	5b00                	lw	s0,48(a4)
	...
  addi x11, x0, 0
     de2:	06dc                	addi	a5,sp,836
     de4:	0000                	unimp
  jal x1, main
     de6:	0708                	addi	a0,sp,896
     de8:	0000                	unimp
     dea:	0002                	c.slli64	zero
     dec:	9f31                	0x9f31
     dee:	070c                	addi	a1,sp,896
     df0:	0000                	unimp
     df2:	0722                	slli	a4,a4,0x8
     df4:	0000                	unimp
     df6:	0002                	c.slli64	zero
     df8:	9f31                	0x9f31
     dfa:	07e4                	addi	s1,sp,972
     dfc:	0000                	unimp
     dfe:	07fc                	addi	a5,sp,972
     e00:	0000                	unimp
     e02:	0001                	nop
     e04:	f25f 0008 1c00      	0x1c000008f25f
     e0a:	0009                	c.nop	2
     e0c:	0100                	addi	s0,sp,128
     e0e:	5f00                	lw	s0,56(a4)
	...
     e18:	06da                	slli	a3,a3,0x16
     e1a:	0000                	unimp
     e1c:	081e                	slli	a6,a6,0x7
     e1e:	0000                	unimp
     e20:	0001                	nop
     e22:	00081e6b          	0x81e6b
     e26:	2a00                	fld	fs0,16(a2)
     e28:	0008                	0x8
     e2a:	0600                	addi	s0,sp,768
     e2c:	f300                	fsw	fs0,32(a4)
     e2e:	5c01                	li	s8,-32
     e30:	1c31                	addi	s8,s8,-20
     e32:	2a9f 0008 3000      	0x300000082a9f
     e38:	0009                	c.nop	2
     e3a:	0100                	addi	s0,sp,128
     e3c:	6b00                	flw	fs0,16(a4)
	...
     e46:	06da                	slli	a3,a3,0x16
     e48:	0000                	unimp
     e4a:	081e                	slli	a6,a6,0x7
     e4c:	0000                	unimp
     e4e:	0001                	nop
     e50:	00081e6b          	0x81e6b
     e54:	2a00                	fld	fs0,16(a2)
     e56:	0008                	0x8
     e58:	0600                	addi	s0,sp,768
     e5a:	f300                	fsw	fs0,32(a4)
     e5c:	5c01                	li	s8,-32
     e5e:	1c31                	addi	s8,s8,-20
     e60:	2a9f 0008 3000      	0x300000082a9f
     e66:	0009                	c.nop	2
     e68:	0100                	addi	s0,sp,128
     e6a:	6b00                	flw	fs0,16(a4)
	...
     e74:	06da                	slli	a3,a3,0x16
     e76:	0000                	unimp
     e78:	081e                	slli	a6,a6,0x7
     e7a:	0000                	unimp
     e7c:	0001                	nop
     e7e:	00081e6b          	0x81e6b
     e82:	2a00                	fld	fs0,16(a2)
     e84:	0008                	0x8
     e86:	0600                	addi	s0,sp,768
     e88:	f300                	fsw	fs0,32(a4)
     e8a:	5c01                	li	s8,-32
     e8c:	1c31                	addi	s8,s8,-20
     e8e:	2a9f 0008 3000      	0x300000082a9f
     e94:	0009                	c.nop	2
     e96:	0100                	addi	s0,sp,128
     e98:	6b00                	flw	fs0,16(a4)
	...
     ea2:	06da                	slli	a3,a3,0x16
     ea4:	0000                	unimp
     ea6:	081e                	slli	a6,a6,0x7
     ea8:	0000                	unimp
     eaa:	0001                	nop
     eac:	00081e6b          	0x81e6b
     eb0:	2a00                	fld	fs0,16(a2)
     eb2:	0008                	0x8
     eb4:	0600                	addi	s0,sp,768
     eb6:	f300                	fsw	fs0,32(a4)
     eb8:	5c01                	li	s8,-32
     eba:	1c31                	addi	s8,s8,-20
     ebc:	2a9f 0008 3000      	0x300000082a9f
     ec2:	0009                	c.nop	2
     ec4:	0100                	addi	s0,sp,128
     ec6:	6b00                	flw	fs0,16(a4)
	...
     ed0:	06da                	slli	a3,a3,0x16
     ed2:	0000                	unimp
     ed4:	081e                	slli	a6,a6,0x7
     ed6:	0000                	unimp
     ed8:	0001                	nop
     eda:	00081e6b          	0x81e6b
     ede:	2a00                	fld	fs0,16(a2)
     ee0:	0008                	0x8
     ee2:	0600                	addi	s0,sp,768
     ee4:	f300                	fsw	fs0,32(a4)
     ee6:	5c01                	li	s8,-32
     ee8:	1c31                	addi	s8,s8,-20
     eea:	2a9f 0008 3000      	0x300000082a9f
     ef0:	0009                	c.nop	2
     ef2:	0100                	addi	s0,sp,128
     ef4:	6b00                	flw	fs0,16(a4)
	...
     efe:	06da                	slli	a3,a3,0x16
     f00:	0000                	unimp
     f02:	081e                	slli	a6,a6,0x7
     f04:	0000                	unimp
     f06:	0001                	nop
     f08:	00081e6b          	0x81e6b
     f0c:	2a00                	fld	fs0,16(a2)
     f0e:	0008                	0x8
     f10:	0600                	addi	s0,sp,768
     f12:	f300                	fsw	fs0,32(a4)
     f14:	5c01                	li	s8,-32
     f16:	1c31                	addi	s8,s8,-20
     f18:	2a9f 0008 3000      	0x300000082a9f
     f1e:	0009                	c.nop	2
     f20:	0100                	addi	s0,sp,128
     f22:	6b00                	flw	fs0,16(a4)
	...
     f2c:	06da                	slli	a3,a3,0x16
     f2e:	0000                	unimp
     f30:	081e                	slli	a6,a6,0x7
     f32:	0000                	unimp
     f34:	0001                	nop
     f36:	00081e6b          	0x81e6b
     f3a:	2a00                	fld	fs0,16(a2)
     f3c:	0008                	0x8
     f3e:	0600                	addi	s0,sp,768
     f40:	f300                	fsw	fs0,32(a4)
     f42:	5c01                	li	s8,-32
     f44:	1c31                	addi	s8,s8,-20
     f46:	2a9f 0008 3000      	0x300000082a9f
     f4c:	0009                	c.nop	2
     f4e:	0100                	addi	s0,sp,128
     f50:	6b00                	flw	fs0,16(a4)
	...
     f5a:	0446                	slli	s0,s0,0x11
     f5c:	0000                	unimp
     f5e:	0498                	addi	a4,sp,576
     f60:	0000                	unimp
     f62:	0001                	nop
     f64:	985a                	add	a6,a6,s6
     f66:	0004                	0x4
     f68:	a100                	fsd	fs0,0(a0)
     f6a:	0004                	0x4
     f6c:	0100                	addi	s0,sp,128
     f6e:	5b00                	lw	s0,48(a4)
int main(){
     f70:	04a1                	addi	s1,s1,8
     f72:	0000                	unimp
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f74:	0682                	c.slli64	a3
     f76:	0000                	unimp
     f78:	0004                	0x4
     f7a:	9f5a01f3          	0x9f5a01f3
	...
int main(){
     f86:	0446                	slli	s0,s0,0x11
     f88:	0000                	unimp
     f8a:	0496                	slli	s1,s1,0x5
     f8c:	0000                	unimp
     f8e:	0001                	nop
     f90:	0004965b          	0x4965b
    resultkon[0] = 0xaaaaaaa0;
     f94:	6600                	flw	fs0,8(a2)
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f96:	0005                	c.nop	1
    resultkon[0] = 0xaaaaaaa0;
     f98:	0100                	addi	s0,sp,128
     f9a:	5900                	lw	s0,48(a0)
     f9c:	0566                	slli	a0,a0,0x19
     f9e:	0000                	unimp
     fa0:	0580                	addi	s0,sp,704
     fa2:	0000                	unimp
    keys = generate_keys(N, p, q);
     fa4:	01870003          	lb	zero,24(a4)
     fa8:	809f 0005 9400      	0x94000005809f
    resultkon[0] = 0xaaaaaaa0;
     fae:	0005                	c.nop	1
    resultkon[0] = 0xaaaaaaa1;
     fb0:	0400                	addi	s0,sp,512
     fb2:	f300                	fsw	fs0,32(a4)
    keys = generate_keys(N, p, q);
     fb4:	5b01                	li	s6,-32
    resultkon[0] = 0xaaaaaaa1;
     fb6:	949f 0005 7000      	0x70000005949f
    for(i = 0; i < N; ++i){
     fbc:	0006                	c.slli	zero,0x1
        secret_key_f[i] = keys[i];
     fbe:	0100                	addi	s0,sp,128
     fc0:	5900                	lw	s0,48(a0)
     fc2:	0670                	addi	a2,sp,780
     fc4:	0000                	unimp
     fc6:	0682                	c.slli64	a3
     fc8:	0000                	unimp
    for(i = 0; i < N; ++i){
     fca:	01870003          	lb	zero,24(a4)
     fce:	009f 0000 0000      	0x9f
    for(i = N; i < (2*N); ++i){
     fd4:	0000                	unimp
     fd6:	4600                	lw	s0,8(a2)
     fd8:	0004                	0x4
     fda:	9400                	0x9400
        secret_key_fp[i-(2*N)] = keys[i];
     fdc:	0004                	0x4
     fde:	0100                	addi	s0,sp,128
     fe0:	5c00                	lw	s0,56(s0)
     fe2:	0494                	addi	a3,sp,576
     fe4:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     fe6:	04d4                	addi	a3,sp,580
     fe8:	0000                	unimp
    for(i = (3*N); i < (4*N); ++i){
     fea:	0001                	nop
     fec:	0004d46b          	0x4d46b
     ff0:	de00                	sw	s0,56(a2)
     ff2:	0004                	0x4
     ff4:	0400                	addi	s0,sp,512
        public_key[i-(4*N)] = keys[i];
     ff6:	f300                	fsw	fs0,32(a4)
     ff8:	5c01                	li	s8,-32
     ffa:	de9f 0004 2a00      	0x2a000004de9f
    for(i = (4*N); i < (5*N); ++i){
    1000:	0005                	c.nop	1
    1002:	0100                	addi	s0,sp,128
    1004:	6b00                	flw	fs0,16(a4)
    1006:	052a                	slli	a0,a0,0xa
    1008:	0000                	unimp
    100a:	0682                	c.slli64	a3
        ring_poly[i-(5*N)] = keys[i];
    100c:	0000                	unimp
    100e:	0004                	0x4
    1010:	9f5c01f3          	0x9f5c01f3
	...
    resultkon[0] = 0xbbbbbbb0;
    101c:	0446                	slli	s0,s0,0x11
    101e:	0000                	unimp
    1020:	04a1                	addi	s1,s1,8
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	0000                	unimp
    1024:	0001                	nop
    1026:	a15d                	j	14cc <product2+0x38>
    1028:	0004                	0x4
    resultkon[0] = 0xbbbbbbb1;
    102a:	8200                	0x8200
    102c:	0005                	c.nop	1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	0100                	addi	s0,sp,128
    1030:	6800                	flw	fs0,16(s0)
    resultkon[0] = 0xbbbbbbb0;
    1032:	0582                	c.slli64	a1
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	0000                	unimp
    resultkon[0] = 0xbbbbbbb1;
    1036:	0594                	addi	a3,sp,704
    resultkon[0] = 0xccccccc0;
    1038:	0000                	unimp
    103a:	0004                	0x4
    103c:	9f5d01f3          	0x9f5d01f3
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1040:	0594                	addi	a3,sp,704
    resultkon[0] = 0xccccccc0;
    1042:	0000                	unimp
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1044:	0682                	c.slli64	a3
    1046:	0000                	unimp
    1048:	0001                	nop
    104a:	0068                	addi	a0,sp,12
    104c:	0000                	unimp
    104e:	0000                	unimp
    1050:	0000                	unimp
    1052:	4600                	lw	s0,8(a2)
    1054:	0004                	0x4
    1056:	a100                	fsd	fs0,0(a0)
    resultkon[0] = 0xccccccc1;	
    1058:	0004                	0x4
    105a:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    105c:	5e00                	lw	s0,56(a2)
    105e:	04a1                	addi	s1,s1,8
    resultkon[0] = 0xccccccc1;	
    1060:	0000                	unimp
    1062:	0584                	addi	s1,sp,704
            resultkon[0] = 0xDEDEDEDE;
    1064:	0000                	unimp
    1066:	0001                	nop
    for(i = 0; i < 32; ++i){
    1068:	8469                	srai	s0,s0,0x1a
    106a:	0005                	c.nop	1
        if(!(message[i] == Dec_Message[i])){
    106c:	9400                	0x9400
    106e:	0005                	c.nop	1
    1070:	0400                	addi	s0,sp,512
    1072:	f300                	fsw	fs0,32(a4)
    1074:	5e01                	li	t3,-32
    1076:	949f 0005 8200      	0x82000005949f
            resultkon[0] = 0xBABABABA;
    107c:	0006                	c.slli	zero,0x1
    107e:	0100                	addi	s0,sp,128
    1080:	6900                	flw	fs0,16(a0)
	...
}
    108a:	04d6                	slli	s1,s1,0x15
    108c:	0000                	unimp
    108e:	04de                	slli	s1,s1,0x17
    1090:	0000                	unimp
    1092:	0001                	nop
    1094:	00052a6b          	0x52a6b
    1098:	8800                	0x8800
    109a:	0005                	c.nop	1
    109c:	0100                	addi	s0,sp,128
            resultkon[0] = 0xDEDEDEDE;
    109e:	6b00                	flw	fs0,16(a4)
    for(i = 0; i < 32; ++i){
    10a0:	0594                	addi	a3,sp,704
    10a2:	0000                	unimp
    10a4:	0682                	c.slli64	a3
    10a6:	0000                	unimp
    10a8:	0001                	nop
    10aa:	0000006b          	0x6b
    10ae:	0000                	unimp
    10b0:	0000                	unimp
    10b2:	4800                	lw	s0,16(s0)
    10b4:	0005                	c.nop	1
    10b6:	5900                	lw	s0,48(a0)
    10b8:	0005                	c.nop	1
    10ba:	0100                	addi	s0,sp,128
    10bc:	5f00                	lw	s0,56(a4)
    10be:	0594                	addi	a3,sp,704
    10c0:	0000                	unimp
    10c2:	059c                	addi	a5,sp,704
    10c4:	0000                	unimp
    10c6:	0001                	nop
    10c8:	005f 0000 0000      	0x5f
    10ce:	0000                	unimp
    10d0:	a400                	fsd	fs0,8(s0)
    10d2:	0004                	0x4
    10d4:	aa00                	fsd	fs0,16(a2)
    10d6:	0004                	0x4
    10d8:	0200                	addi	s0,sp,256
    10da:	3000                	fld	fs0,32(s0)
    10dc:	aa9f 0004 b500      	0xb5000004aa9f
    10e2:	0004                	0x4
    10e4:	0100                	addi	s0,sp,128
    10e6:	5d00                	lw	s0,56(a0)
    10e8:	04b6                	slli	s1,s1,0xd
    10ea:	0000                	unimp
    10ec:	04ba                	slli	s1,s1,0xe
    10ee:	0000                	unimp
    10f0:	0002                	c.slli64	zero
    10f2:	9f30                	0x9f30
    10f4:	04ba                	slli	s1,s1,0xe
    10f6:	0000                	unimp
    10f8:	04c0                	addi	s0,sp,580
    10fa:	0000                	unimp
    10fc:	0001                	nop
    10fe:	c05d                	beqz	s0,11a4 <__DTOR_END__+0xec>
    1100:	0004                	0x4
    1102:	c400                	sw	s0,8(s0)
    1104:	0004                	0x4
    1106:	0100                	addi	s0,sp,128
    1108:	5f00                	lw	s0,56(a4)
    110a:	04c4                	addi	s1,sp,580
    110c:	0000                	unimp
    110e:	04de                	slli	s1,s1,0x17
    1110:	0000                	unimp
    1112:	0001                	nop
    1114:	de62                	sw	s8,60(sp)
    1116:	0004                	0x4
    1118:	ee00                	fsw	fs0,24(a2)
    111a:	0004                	0x4
    111c:	0100                	addi	s0,sp,128
    111e:	5d00                	lw	s0,56(a0)
    1120:	04ee                	slli	s1,s1,0x1b
    1122:	0000                	unimp
    1124:	04f4                	addi	a3,sp,588
    1126:	0000                	unimp
    1128:	7f7d0003          	lb	zero,2039(s10)
    112c:	f49f 0004 0600      	0x6000004f49f
    1132:	0005                	c.nop	1
    1134:	0100                	addi	s0,sp,128
    1136:	5d00                	lw	s0,56(a0)
    1138:	0506                	slli	a0,a0,0x1
    113a:	0000                	unimp
    113c:	050c                	addi	a1,sp,640
    113e:	0000                	unimp
    1140:	7f7d0003          	lb	zero,2039(s10)
    1144:	0c9f 0005 0e00      	0xe0000050c9f
    114a:	0005                	c.nop	1
    114c:	0100                	addi	s0,sp,128
    114e:	5d00                	lw	s0,56(a0)
    1150:	050e                	slli	a0,a0,0x3
    1152:	0000                	unimp
    1154:	0524                	addi	s1,sp,648
    1156:	0000                	unimp
    1158:	0001                	nop
    115a:	245f 0005 3800      	0x38000005245f
    1160:	0005                	c.nop	1
    1162:	0100                	addi	s0,sp,128
    1164:	6200                	flw	fs0,0(a2)
    1166:	0538                	addi	a4,sp,648
    1168:	0000                	unimp
    116a:	0548                	addi	a0,sp,644
    116c:	0000                	unimp
    116e:	0001                	nop
    1170:	5a5f 0005 7400      	0x740000055a5f
    1176:	0005                	c.nop	1
    1178:	0100                	addi	s0,sp,128
    117a:	5900                	lw	s0,48(a0)
    117c:	05a2                	slli	a1,a1,0x8
    117e:	0000                	unimp
    1180:	05a6                	slli	a1,a1,0x9
    1182:	0000                	unimp
    1184:	0002                	c.slli64	zero
    1186:	9f30                	0x9f30
    1188:	05a6                	slli	a1,a1,0x9
    118a:	0000                	unimp
    118c:	05ac                	addi	a1,sp,712
    118e:	0000                	unimp
    1190:	0001                	nop
    1192:	b85e                	fsd	fs7,48(sp)
    1194:	0005                	c.nop	1
    1196:	bc00                	fsd	fs0,56(s0)
    1198:	0005                	c.nop	1
    119a:	0200                	addi	s0,sp,256
    119c:	3000                	fld	fs0,32(s0)
    119e:	bc9f 0005 c400      	0xc4000005bc9f
    11a4:	0005                	c.nop	1
    11a6:	0100                	addi	s0,sp,128
    11a8:	5d00                	lw	s0,56(a0)
    11aa:	05c4                	addi	s1,sp,708
    11ac:	0000                	unimp
    11ae:	05cc                	addi	a1,sp,708
    11b0:	0000                	unimp
    11b2:	0001                	nop
    11b4:	cc5f 0005 d700      	0xd7000005cc5f
    11ba:	0005                	c.nop	1
    11bc:	0100                	addi	s0,sp,128
    11be:	5d00                	lw	s0,56(a0)
    11c0:	05d8                	addi	a4,sp,708
    11c2:	0000                	unimp
    11c4:	05dc                	addi	a5,sp,708
    11c6:	0000                	unimp
    11c8:	0002                	c.slli64	zero
    11ca:	9f30                	0x9f30
    11cc:	05dc                	addi	a5,sp,708
    11ce:	0000                	unimp
    11d0:	05e2                	slli	a1,a1,0x18
    11d2:	0000                	unimp
    11d4:	0001                	nop
    11d6:	e25e                	fsw	fs7,4(sp)
    11d8:	0005                	c.nop	1
    11da:	f200                	fsw	fs0,32(a2)
    11dc:	0005                	c.nop	1
    11de:	0100                	addi	s0,sp,128
    11e0:	5f00                	lw	s0,56(a4)
    11e2:	05f2                	slli	a1,a1,0x1c
    11e4:	0000                	unimp
    11e6:	05f6                	slli	a1,a1,0x1d
    11e8:	0000                	unimp
    11ea:	0001                	nop
    11ec:	f65e                	fsw	fs7,44(sp)
    11ee:	0005                	c.nop	1
    11f0:	0000                	unimp
    11f2:	0006                	c.slli	zero,0x1
    11f4:	0300                	addi	s0,sp,384
    11f6:	7e00                	flw	fs0,56(a2)
    11f8:	9f7f                	0x9f7f
    11fa:	0600                	addi	s0,sp,768
    11fc:	0000                	unimp
    11fe:	0602                	c.slli64	a2
    1200:	0000                	unimp
    1202:	0001                	nop
    1204:	025e                	slli	tp,tp,0x17
    1206:	0006                	c.slli	zero,0x1
    1208:	1200                	addi	s0,sp,288
    120a:	0006                	c.slli	zero,0x1
    120c:	0100                	addi	s0,sp,128
    120e:	5d00                	lw	s0,56(a0)
    1210:	0612                	slli	a2,a2,0x4
    1212:	0000                	unimp
    1214:	0618                	addi	a4,sp,768
    1216:	0000                	unimp
    1218:	7f7d0003          	lb	zero,2039(s10)
    121c:	189f 0006 1a00      	0x1a000006189f
    1222:	0006                	c.slli	zero,0x1
    1224:	0100                	addi	s0,sp,128
    1226:	5d00                	lw	s0,56(a0)
    1228:	061a                	slli	a2,a2,0x6
    122a:	0000                	unimp
    122c:	0626                	slli	a2,a2,0x9
    122e:	0000                	unimp
    1230:	0001                	nop
    1232:	265f 0006 2e00      	0x2e000006265f
    1238:	0006                	c.slli	zero,0x1
    123a:	0300                	addi	s0,sp,384
    123c:	7f00                	flw	fs0,56(a4)
    123e:	9f7f                	0x9f7f
    1240:	062e                	slli	a2,a2,0xb
    1242:	0000                	unimp
    1244:	0630                	addi	a2,sp,776
    1246:	0000                	unimp
    1248:	0001                	nop
    124a:	305f 0006 4000      	0x40000006305f
    1250:	0006                	c.slli	zero,0x1
    1252:	0100                	addi	s0,sp,128
    1254:	5d00                	lw	s0,56(a0)
    1256:	0640                	addi	s0,sp,772
    1258:	0000                	unimp
    125a:	0646                	slli	a2,a2,0x11
    125c:	0000                	unimp
    125e:	7f7d0003          	lb	zero,2039(s10)
    1262:	469f 0006 4800      	0x48000006469f
    1268:	0006                	c.slli	zero,0x1
    126a:	0100                	addi	s0,sp,128
    126c:	5d00                	lw	s0,56(a0)
    126e:	0648                	addi	a0,sp,772
    1270:	0000                	unimp
    1272:	064c                	addi	a1,sp,772
    1274:	0000                	unimp
    1276:	0001                	nop
    1278:	4c5e                	lw	s8,212(sp)
    127a:	0006                	c.slli	zero,0x1
    127c:	5600                	lw	s0,40(a2)
    127e:	0006                	c.slli	zero,0x1
    1280:	0300                	addi	s0,sp,384
    1282:	7e00                	flw	fs0,56(a2)
    1284:	9f7f                	0x9f7f
    1286:	0656                	slli	a2,a2,0x15
    1288:	0000                	unimp
    128a:	0658                	addi	a4,sp,772
    128c:	0000                	unimp
    128e:	0001                	nop
    1290:	585e                	lw	a6,244(sp)
    1292:	0006                	c.slli	zero,0x1
    1294:	5e00                	lw	s0,56(a2)
    1296:	0006                	c.slli	zero,0x1
    1298:	0100                	addi	s0,sp,128
    129a:	5f00                	lw	s0,56(a4)
    129c:	065e                	slli	a2,a2,0x17
    129e:	0000                	unimp
    12a0:	0670                	addi	a2,sp,780
    12a2:	0000                	unimp
    12a4:	0001                	nop
    12a6:	705d                	c.lui	zero,0xffff7
    12a8:	0006                	c.slli	zero,0x1
    12aa:	8200                	0x8200
    12ac:	0006                	c.slli	zero,0x1
    12ae:	0100                	addi	s0,sp,128
    12b0:	5900                	lw	s0,48(a0)
	...
    12ba:	0548                	addi	a0,sp,644
    12bc:	0000                	unimp
    12be:	0559                	addi	a0,a0,22
    12c0:	0000                	unimp
    12c2:	0001                	nop
    12c4:	945e                	add	s0,s0,s7
    12c6:	0005                	c.nop	1
    12c8:	9800                	0x9800
    12ca:	0005                	c.nop	1
    12cc:	0100                	addi	s0,sp,128
    12ce:	5e00                	lw	s0,56(a2)
	...
    12d8:	056a                	slli	a0,a0,0x1a
    12da:	0000                	unimp
    12dc:	0594                	addi	a3,sp,704
    12de:	0000                	unimp
    12e0:	0006                	c.slli	zero,0x1
    12e2:	0016ec03          	0x16ec03
    12e6:	9f00                	0x9f00
	...
    12f0:	0492                	slli	s1,s1,0x4
    12f2:	0000                	unimp
    12f4:	0578                	addi	a4,sp,652
    12f6:	0000                	unimp
    12f8:	0002                	c.slli64	zero
    12fa:	05940083          	lb	ra,89(s0) # fffe0059 <_stack_start+0xfffd0059>
    12fe:	0000                	unimp
    1300:	0682                	c.slli64	a3
    1302:	0000                	unimp
    1304:	0002                	c.slli64	zero
    1306:	00000083          	lb	ra,0(zero) # 0 <__DYNAMIC>
    130a:	0000                	unimp
    130c:	0000                	unimp
    130e:	0000                	unimp
    1310:	0492                	slli	s1,s1,0x4
    1312:	0000                	unimp
    1314:	057a                	slli	a0,a0,0x1e
    1316:	0000                	unimp
    1318:	0002                	c.slli64	zero
    131a:	0084                	addi	s1,sp,64
    131c:	0594                	addi	a3,sp,704
    131e:	0000                	unimp
    1320:	0682                	c.slli64	a3
    1322:	0000                	unimp
    1324:	0002                	c.slli64	zero
    1326:	0084                	addi	s1,sp,64
	...
    1330:	05b8                	addi	a4,sp,712
    1332:	0000                	unimp
    1334:	05d6                	slli	a1,a1,0x15
    1336:	0000                	unimp
    1338:	0001                	nop
    133a:	025a                	slli	tp,tp,0x16
    133c:	0006                	c.slli	zero,0x1
    133e:	4800                	lw	s0,16(s0)
    1340:	0006                	c.slli	zero,0x1
    1342:	0100                	addi	s0,sp,128
    1344:	5a00                	lw	s0,48(a2)
	...
    134e:	0492                	slli	s1,s1,0x4
    1350:	0000                	unimp
    1352:	04aa                	slli	s1,s1,0xa
    1354:	0000                	unimp
    1356:	0002                	c.slli64	zero
    1358:	008a                	slli	ra,ra,0x2
    135a:	04aa                	slli	s1,s1,0xa
    135c:	0000                	unimp
    135e:	0566                	slli	a0,a0,0x19
    1360:	0000                	unimp
    1362:	0002                	c.slli64	zero
    1364:	0086                	slli	ra,ra,0x1
    1366:	0566                	slli	a0,a0,0x19
    1368:	0000                	unimp
    136a:	0586                	slli	a1,a1,0x1
    136c:	0000                	unimp
    136e:	0002                	c.slli64	zero
    1370:	008a                	slli	ra,ra,0x2
    1372:	0594                	addi	a3,sp,704
    1374:	0000                	unimp
    1376:	0670                	addi	a2,sp,780
    1378:	0000                	unimp
    137a:	0002                	c.slli64	zero
    137c:	0086                	slli	ra,ra,0x1
    137e:	0670                	addi	a2,sp,780
    1380:	0000                	unimp
    1382:	0682                	c.slli64	a3
    1384:	0000                	unimp
    1386:	0002                	c.slli64	zero
    1388:	008a                	slli	ra,ra,0x2
	...
    1392:	04a4                	addi	s1,sp,584
    1394:	0000                	unimp
    1396:	04aa                	slli	s1,s1,0xa
    1398:	0000                	unimp
    139a:	0002                	c.slli64	zero
    139c:	0085                	addi	ra,ra,1
    139e:	04aa                	slli	s1,s1,0xa
    13a0:	0000                	unimp
    13a2:	056e                	slli	a0,a0,0x1b
    13a4:	0000                	unimp
    13a6:	0002                	c.slli64	zero
    13a8:	0072                	c.slli	zero,0x1c
    13aa:	056e                	slli	a0,a0,0x1b
    13ac:	0000                	unimp
    13ae:	057c                	addi	a5,sp,652
    13b0:	0000                	unimp
    13b2:	0002                	c.slli64	zero
    13b4:	0085                	addi	ra,ra,1
    13b6:	057c                	addi	a5,sp,652
    13b8:	0000                	unimp
    13ba:	0582                	c.slli64	a1
    13bc:	0000                	unimp
    13be:	000c                	0xc
    13c0:	008a                	slli	ra,ra,0x2
    13c2:	0088                	addi	a0,sp,64
    13c4:	2432                	fld	fs0,264(sp)
    13c6:	f0090f23          	sb	zero,-226(s2)
    13ca:	1c1a                	slli	s8,s8,0x26
    13cc:	0582                	c.slli64	a1
    13ce:	0000                	unimp
    13d0:	0586                	slli	a1,a1,0x1
    13d2:	0000                	unimp
    13d4:	000d                	c.nop	3
    13d6:	008a                	slli	ra,ra,0x2
    13d8:	325d01f3          	0x325d01f3
    13dc:	2324                	fld	fs1,64(a4)
    13de:	1af0090f          	0x1af0090f
    13e2:	941c                	0x941c
    13e4:	0005                	c.nop	1
    13e6:	8200                	0x8200
    13e8:	0006                	c.slli	zero,0x1
    13ea:	0200                	addi	s0,sp,256
    13ec:	7200                	flw	fs0,32(a2)
	...
    13f6:	9200                	0x9200
    13f8:	0004                	0x4
    13fa:	8000                	0x8000
    13fc:	0005                	c.nop	1
    13fe:	0100                	addi	s0,sp,128
    1400:	6700                	flw	fs0,8(a4)
    1402:	0580                	addi	s0,sp,704
    1404:	0000                	unimp
    1406:	0594                	addi	a3,sp,704
    1408:	0000                	unimp
    140a:	0006                	c.slli	zero,0x1
    140c:	315b01f3          	0x315b01f3
    1410:	9f1c                	0x9f1c
    1412:	0594                	addi	a3,sp,704
    1414:	0000                	unimp
    1416:	0682                	c.slli64	a3
    1418:	0000                	unimp
    141a:	0001                	nop
    141c:	00000067          	jr	zero # 0 <__DYNAMIC>
    1420:	0000                	unimp
    1422:	0000                	unimp
    1424:	9200                	0x9200
    1426:	0004                	0x4
    1428:	8000                	0x8000
    142a:	0005                	c.nop	1
    142c:	0100                	addi	s0,sp,128
    142e:	6700                	flw	fs0,8(a4)
    1430:	0580                	addi	s0,sp,704
    1432:	0000                	unimp
    1434:	0594                	addi	a3,sp,704
    1436:	0000                	unimp
    1438:	0006                	c.slli	zero,0x1
    143a:	315b01f3          	0x315b01f3
    143e:	9f1c                	0x9f1c
    1440:	0594                	addi	a3,sp,704
    1442:	0000                	unimp
    1444:	0682                	c.slli64	a3
    1446:	0000                	unimp
    1448:	0001                	nop
    144a:	00000067          	jr	zero # 0 <__DYNAMIC>
    144e:	0000                	unimp
    1450:	0000                	unimp
    1452:	9200                	0x9200
    1454:	0004                	0x4
    1456:	8000                	0x8000
    1458:	0005                	c.nop	1
    145a:	0100                	addi	s0,sp,128
    145c:	6700                	flw	fs0,8(a4)
    145e:	0580                	addi	s0,sp,704
    1460:	0000                	unimp
    1462:	0594                	addi	a3,sp,704
    1464:	0000                	unimp
    1466:	0006                	c.slli	zero,0x1
    1468:	315b01f3          	0x315b01f3
    146c:	9f1c                	0x9f1c
    146e:	0594                	addi	a3,sp,704
    1470:	0000                	unimp
    1472:	0682                	c.slli64	a3
    1474:	0000                	unimp
    1476:	0001                	nop
    1478:	00000067          	jr	zero # 0 <__DYNAMIC>
    147c:	0000                	unimp
    147e:	0000                	unimp
    1480:	a000                	fsd	fs0,0(s0)
    1482:	0004                	0x4
    1484:	c400                	sw	s0,8(s0)
    1486:	0004                	0x4
    1488:	0100                	addi	s0,sp,128
    148a:	6200                	flw	fs0,0(a2)
    148c:	04c4                	addi	s1,sp,580
    148e:	0000                	unimp
    1490:	04de                	slli	s1,s1,0x17
    1492:	0000                	unimp
    1494:	7f880003          	lb	zero,2040(a6)
    1498:	de9f 0004 2400      	0x24000004de9f
    149e:	0005                	c.nop	1
    14a0:	0100                	addi	s0,sp,128
    14a2:	6200                	flw	fs0,0(a2)
    14a4:	0524                	addi	s1,sp,648
    14a6:	0000                	unimp
    14a8:	0582                	c.slli64	a1
    14aa:	0000                	unimp
    14ac:	7f880003          	lb	zero,2040(a6)
    14b0:	829f 0005 9400      	0x94000005829f
    14b6:	0005                	c.nop	1
    14b8:	0600                	addi	s0,sp,768
    14ba:	f300                	fsw	fs0,32(a4)
    14bc:	5d01                	li	s10,-32
    14be:	1c31                	addi	s8,s8,-20
    14c0:	949f 0005 8200      	0x82000005949f
    14c6:	0006                	c.slli	zero,0x1
    14c8:	0300                	addi	s0,sp,384
    14ca:	8800                	0x8800
    14cc:	9f7f                	0x9f7f
	...
    14d6:	02e8                	addi	a0,sp,332
    14d8:	0000                	unimp
    14da:	0364                	addi	s1,sp,396
    14dc:	0000                	unimp
    14de:	0001                	nop
    14e0:	645a                	flw	fs0,148(sp)
    14e2:	69000003          	lb	zero,1680(zero) # 690 <ext_euclid+0xe>
    14e6:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    14ea:	5b00                	lw	s0,48(a4)
    14ec:	0369                	addi	t1,t1,26
    14ee:	0000                	unimp
    14f0:	0390                	addi	a2,sp,448
    14f2:	0000                	unimp
    14f4:	0004                	0x4
    14f6:	9f5a01f3          	0x9f5a01f3
    14fa:	0390                	addi	a2,sp,448
    14fc:	0000                	unimp
    14fe:	03b2                	slli	t2,t2,0xc
    1500:	0000                	unimp
    1502:	0001                	nop
    1504:	b25a                	fsd	fs6,288(sp)
    1506:	46000003          	lb	zero,1120(zero) # 460 <polydiv+0x1a>
    150a:	0004                	0x4
    150c:	0400                	addi	s0,sp,512
    150e:	f300                	fsw	fs0,32(a4)
    1510:	5a01                	li	s4,-32
    1512:	009f 0000 0000      	0x9f
    1518:	0000                	unimp
    151a:	e800                	fsw	fs0,16(s0)
    151c:	0002                	c.slli64	zero
    151e:	6200                	flw	fs0,0(a2)
    1520:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1524:	5b00                	lw	s0,48(a4)
    1526:	0362                	slli	t1,t1,0x18
    1528:	0000                	unimp
    152a:	0369                	addi	t1,t1,26
    152c:	0000                	unimp
    152e:	0001                	nop
    1530:	695c                	flw	fa5,20(a0)
    1532:	90000003          	lb	zero,-1792(zero) # fffff900 <_stack_start+0xfffef900>
    1536:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    153a:	8800                	0x8800
    153c:	9f01                	0x9f01
    153e:	0390                	addi	a2,sp,448
    1540:	0000                	unimp
    1542:	03b2                	slli	t2,t2,0xc
    1544:	0000                	unimp
    1546:	0001                	nop
    1548:	0003b25b          	0x3b25b
    154c:	fe00                	fsw	fs0,56(a2)
    154e:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    1552:	8800                	0x8800
    1554:	9f01                	0x9f01
    1556:	03fe                	slli	t2,t2,0x1f
    1558:	0000                	unimp
    155a:	0446                	slli	s0,s0,0x11
    155c:	0000                	unimp
    155e:	0004                	0x4
    1560:	9f5b01f3          	0x9f5b01f3
	...
    156c:	02e8                	addi	a0,sp,332
    156e:	0000                	unimp
    1570:	035a                	slli	t1,t1,0x16
    1572:	0000                	unimp
    1574:	0001                	nop
    1576:	5a5c                	lw	a5,52(a2)
    1578:	69000003          	lb	zero,1680(zero) # 690 <ext_euclid+0xe>
    157c:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1580:	6000                	flw	fs0,0(s0)
    1582:	0369                	addi	t1,t1,26
    1584:	0000                	unimp
    1586:	0390                	addi	a2,sp,448
    1588:	0000                	unimp
    158a:	bc780003          	lb	zero,-1081(a6)
    158e:	907f                	0x907f
    1590:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    1594:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1598:	6000                	flw	fs0,0(s0)
    159a:	03b2                	slli	t2,t2,0xc
    159c:	0000                	unimp
    159e:	03ee                	slli	t2,t2,0x1b
    15a0:	0000                	unimp
    15a2:	bc780003          	lb	zero,-1081(a6)
    15a6:	ee7f                	0xee7f
    15a8:	46000003          	lb	zero,1120(zero) # 460 <polydiv+0x1a>
    15ac:	0004                	0x4
    15ae:	0300                	addi	s0,sp,384
    15b0:	9100                	0x9100
    15b2:	7fbc                	flw	fa5,120(a5)
	...
    15bc:	02e8                	addi	a0,sp,332
    15be:	0000                	unimp
    15c0:	0350                	addi	a2,sp,388
    15c2:	0000                	unimp
    15c4:	0001                	nop
    15c6:	505d                	c.li	zero,-9
    15c8:	f6000003          	lb	zero,-160(zero) # ffffff60 <_stack_start+0xfffeff60>
    15cc:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15d0:	6400                	flw	fs0,8(s0)
    15d2:	03f6                	slli	t2,t2,0x1d
    15d4:	0000                	unimp
    15d6:	0410                	addi	a2,sp,512
    15d8:	0000                	unimp
    15da:	0004                	0x4
    15dc:	9f5d01f3          	0x9f5d01f3
    15e0:	0410                	addi	a2,sp,512
    15e2:	0000                	unimp
    15e4:	0446                	slli	s0,s0,0x11
    15e6:	0000                	unimp
    15e8:	0001                	nop
    15ea:	0064                	addi	s1,sp,12
    15ec:	0000                	unimp
    15ee:	0000                	unimp
    15f0:	0000                	unimp
    15f2:	e800                	fsw	fs0,16(s0)
    15f4:	0002                	c.slli64	zero
    15f6:	5200                	lw	s0,32(a2)
    15f8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    15fc:	5e00                	lw	s0,56(a2)
    15fe:	0352                	slli	t1,t1,0x14
    1600:	0000                	unimp
    1602:	0404                	addi	s1,sp,512
    1604:	0000                	unimp
    1606:	0001                	nop
    1608:	0004046b          	0x4046b
    160c:	1000                	addi	s0,sp,32
    160e:	0004                	0x4
    1610:	0400                	addi	s0,sp,512
    1612:	f300                	fsw	fs0,32(a4)
    1614:	5e01                	li	t3,-32
    1616:	109f 0004 4600      	0x46000004109f
    161c:	0004                	0x4
    161e:	0100                	addi	s0,sp,128
    1620:	6b00                	flw	fs0,16(a4)
	...
    162a:	0344                	addi	s1,sp,388
    162c:	0000                	unimp
    162e:	0388                	addi	a0,sp,448
    1630:	0000                	unimp
    1632:	0002                	c.slli64	zero
    1634:	0082                	c.slli64	ra
    1636:	0388                	addi	a0,sp,448
    1638:	0000                	unimp
    163a:	0390                	addi	a2,sp,448
    163c:	0000                	unimp
    163e:	0002                	c.slli64	zero
    1640:	0089                	addi	ra,ra,2
    1642:	0390                	addi	a2,sp,448
    1644:	0000                	unimp
    1646:	03b2                	slli	t2,t2,0xc
    1648:	0000                	unimp
    164a:	0002                	c.slli64	zero
    164c:	0082                	c.slli64	ra
    164e:	03b2                	slli	t2,t2,0xc
    1650:	0000                	unimp
    1652:	03e2                	slli	t2,t2,0x18
    1654:	0000                	unimp
    1656:	0002                	c.slli64	zero
    1658:	0089                	addi	ra,ra,2
    165a:	0410                	addi	a2,sp,512
    165c:	0000                	unimp
    165e:	0438                	addi	a4,sp,520
    1660:	0000                	unimp
    1662:	0002                	c.slli64	zero
    1664:	0089                	addi	ra,ra,2
	...
    166e:	034c                	addi	a1,sp,388
    1670:	0000                	unimp
    1672:	035a                	slli	t1,t1,0x16
    1674:	0000                	unimp
    1676:	0002                	c.slli64	zero
    1678:	9f30                	0x9f30
    167a:	035a                	slli	t1,t1,0x16
    167c:	0000                	unimp
    167e:	0369                	addi	t1,t1,26
    1680:	0000                	unimp
    1682:	0001                	nop
    1684:	905e                	c.add	zero,s7
    1686:	b2000003          	lb	zero,-1248(zero) # fffffb20 <_stack_start+0xfffefb20>
    168a:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    168e:	5e00                	lw	s0,56(a2)
    1690:	03e2                	slli	t2,t2,0x18
    1692:	0000                	unimp
    1694:	03f0                	addi	a2,sp,460
    1696:	0000                	unimp
    1698:	0001                	nop
    169a:	3859                	jal	f30 <memset+0x68>
    169c:	0004                	0x4
    169e:	4600                	lw	s0,8(a2)
    16a0:	0004                	0x4
    16a2:	0100                	addi	s0,sp,128
    16a4:	5900                	lw	s0,48(a0)
	...
    16ae:	0388                	addi	a0,sp,448
    16b0:	0000                	unimp
    16b2:	0390                	addi	a2,sp,448
    16b4:	0000                	unimp
    16b6:	0001                	nop
    16b8:	9065                	srli	s0,s0,0x39
    16ba:	ac000003          	lb	zero,-1344(zero) # fffffac0 <_stack_start+0xfffefac0>
    16be:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    16c2:	5f00                	lw	s0,56(a4)
    16c4:	03b2                	slli	t2,t2,0xc
    16c6:	0000                	unimp
    16c8:	03f8                	addi	a4,sp,460
    16ca:	0000                	unimp
    16cc:	0001                	nop
    16ce:	1065                	c.nop	-7
    16d0:	0004                	0x4
    16d2:	4600                	lw	s0,8(a2)
    16d4:	0004                	0x4
    16d6:	0100                	addi	s0,sp,128
    16d8:	6500                	flw	fs0,8(a0)
	...
    16e2:	03b2                	slli	t2,t2,0xc
    16e4:	0000                	unimp
    16e6:	03c4                	addi	s1,sp,452
    16e8:	0000                	unimp
    16ea:	0001                	nop
    16ec:	c45f 0003 ca00      	0xca000003c45f
    16f2:	03000003          	lb	zero,48(zero) # 30 <__DYNAMIC+0x30>
    16f6:	7f00                	flw	fs0,56(a4)
    16f8:	9f01                	0x9f01
    16fa:	03ca                	slli	t2,t2,0x12
    16fc:	0000                	unimp
    16fe:	03d4                	addi	a3,sp,452
    1700:	0000                	unimp
    1702:	0001                	nop
    1704:	145f 0004 2600      	0x26000004145f
    170a:	0004                	0x4
    170c:	0100                	addi	s0,sp,128
    170e:	5f00                	lw	s0,56(a4)
    1710:	0426                	slli	s0,s0,0x9
    1712:	0000                	unimp
    1714:	042c                	addi	a1,sp,520
    1716:	0000                	unimp
    1718:	017f0003          	lb	zero,23(t5)
    171c:	2c9f 0004 3800      	0x380000042c9f
    1722:	0004                	0x4
    1724:	0100                	addi	s0,sp,128
    1726:	5f00                	lw	s0,56(a4)
	...
    1730:	03e6                	slli	t2,t2,0x19
    1732:	0000                	unimp
    1734:	0410                	addi	a2,sp,512
    1736:	0000                	unimp
    1738:	0006                	c.slli	zero,0x1
    173a:	00149403          	lh	s0,1(s1)
    173e:	9f00                	0x9f00
	...
    1748:	034a                	slli	t1,t1,0x12
    174a:	0000                	unimp
    174c:	0402                	c.slli64	s0
    174e:	0000                	unimp
    1750:	0002                	c.slli64	zero
    1752:	008a                	slli	ra,ra,0x2
    1754:	0410                	addi	a2,sp,512
    1756:	0000                	unimp
    1758:	0446                	slli	s0,s0,0x11
    175a:	0000                	unimp
    175c:	0002                	c.slli64	zero
    175e:	008a                	slli	ra,ra,0x2
	...
    1768:	034c                	addi	a1,sp,388
    176a:	0000                	unimp
    176c:	03ea                	slli	t2,t2,0x1a
    176e:	0000                	unimp
    1770:	0002                	c.slli64	zero
    1772:	0072                	c.slli	zero,0x1c
    1774:	03ea                	slli	t2,t2,0x1a
    1776:	0000                	unimp
    1778:	03f6                	slli	t2,t2,0x1d
    177a:	0000                	unimp
    177c:	000c                	0xc
    177e:	008a                	slli	ra,ra,0x2
    1780:	0084                	addi	s1,sp,64
    1782:	2432                	fld	fs0,264(sp)
    1784:	f0090f23          	sb	zero,-226(s2)
    1788:	1c1a                	slli	s8,s8,0x26
    178a:	03f6                	slli	t2,t2,0x1d
    178c:	0000                	unimp
    178e:	0402                	c.slli64	s0
    1790:	0000                	unimp
    1792:	000d                	c.nop	3
    1794:	008a                	slli	ra,ra,0x2
    1796:	325d01f3          	0x325d01f3
    179a:	2324                	fld	fs1,64(a4)
    179c:	1af0090f          	0x1af0090f
    17a0:	101c                	addi	a5,sp,32
    17a2:	0004                	0x4
    17a4:	4600                	lw	s0,8(a2)
    17a6:	0004                	0x4
    17a8:	0200                	addi	s0,sp,256
    17aa:	7200                	flw	fs0,32(a2)
	...
    17b4:	4400                	lw	s0,8(s0)
    17b6:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    17ba:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17be:	6500                	flw	fs0,8(a0)
    17c0:	0388                	addi	a0,sp,448
    17c2:	0000                	unimp
    17c4:	0390                	addi	a2,sp,448
    17c6:	0000                	unimp
    17c8:	7f840003          	lb	zero,2040(s0)
    17cc:	909f 0003 b200      	0xb2000003909f
    17d2:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    17d6:	6500                	flw	fs0,8(a0)
    17d8:	03b2                	slli	t2,t2,0xc
    17da:	0000                	unimp
    17dc:	03f6                	slli	t2,t2,0x1d
    17de:	0000                	unimp
    17e0:	7f840003          	lb	zero,2040(s0)
    17e4:	f69f 0003 1000      	0x10000003f69f
    17ea:	0004                	0x4
    17ec:	0600                	addi	s0,sp,768
    17ee:	f300                	fsw	fs0,32(a4)
    17f0:	5d01                	li	s10,-32
    17f2:	1c31                	addi	s8,s8,-20
    17f4:	109f 0004 4600      	0x46000004109f
    17fa:	0004                	0x4
    17fc:	0300                	addi	s0,sp,384
    17fe:	8400                	0x8400
    1800:	9f7f                	0x9f7f
	...
    180a:	02fc                	addi	a5,sp,332
    180c:	0000                	unimp
    180e:	03f4                	addi	a3,sp,460
    1810:	0000                	unimp
    1812:	0001                	nop
    1814:	0003f463          	bgeu	t2,zero,181c <result+0x130>
    1818:	f600                	fsw	fs0,40(a2)
    181a:	06000003          	lb	zero,96(zero) # 60 <__DYNAMIC+0x60>
    181e:	8400                	0x8400
    1820:	8800                	0x8800
    1822:	2200                	fld	fs0,0(a2)
    1824:	f69f 0003 fe00      	0xfe000003f69f
    182a:	07000003          	lb	zero,112(zero) # 70 <__DYNAMIC+0x70>
    182e:	8800                	0x8800
    1830:	f300                	fsw	fs0,32(a4)
    1832:	5d01                	li	s10,-32
    1834:	9f22                	add	t5,t5,s0
    1836:	03fe                	slli	t2,t2,0x1f
    1838:	0000                	unimp
    183a:	0410                	addi	a2,sp,512
    183c:	0000                	unimp
    183e:	000a                	c.slli	zero,0x2
    1840:	f35b01f3          	0xf35b01f3
    1844:	5d01                	li	s10,-32
    1846:	3122                	fld	ft2,40(sp)
    1848:	9f1c                	0x9f1c
    184a:	0410                	addi	a2,sp,512
    184c:	0000                	unimp
    184e:	0446                	slli	s0,s0,0x11
    1850:	0000                	unimp
    1852:	0001                	nop
    1854:	00000063          	beqz	zero,1854 <result+0x168>
    1858:	0000                	unimp
    185a:	0000                	unimp
    185c:	4a00                	lw	s0,16(a2)
    185e:	fe000003          	lb	zero,-32(zero) # ffffffe0 <_stack_start+0xfffeffe0>
    1862:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1866:	6800                	flw	fs0,16(s0)
    1868:	03fe                	slli	t2,t2,0x1f
    186a:	0000                	unimp
    186c:	0410                	addi	a2,sp,512
    186e:	0000                	unimp
    1870:	0006                	c.slli	zero,0x1
    1872:	315b01f3          	0x315b01f3
    1876:	9f1c                	0x9f1c
    1878:	0410                	addi	a2,sp,512
    187a:	0000                	unimp
    187c:	0446                	slli	s0,s0,0x11
    187e:	0000                	unimp
    1880:	0001                	nop
    1882:	0068                	addi	a0,sp,12
    1884:	0000                	unimp
    1886:	0000                	unimp
    1888:	0000                	unimp
    188a:	4a00                	lw	s0,16(a2)
    188c:	88000003          	lb	zero,-1920(zero) # fffff880 <_stack_start+0xfffef880>
    1890:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    1894:	6500                	flw	fs0,8(a0)
    1896:	0388                	addi	a0,sp,448
    1898:	0000                	unimp
    189a:	0390                	addi	a2,sp,448
    189c:	0000                	unimp
    189e:	7f840003          	lb	zero,2040(s0)
    18a2:	909f 0003 b200      	0xb2000003909f
    18a8:	01000003          	lb	zero,16(zero) # 10 <__DYNAMIC+0x10>
    18ac:	6500                	flw	fs0,8(a0)
    18ae:	03b2                	slli	t2,t2,0xc
    18b0:	0000                	unimp
    18b2:	03f6                	slli	t2,t2,0x1d
    18b4:	0000                	unimp
    18b6:	7f840003          	lb	zero,2040(s0)
    18ba:	f69f 0003 1000      	0x10000003f69f
    18c0:	0004                	0x4
    18c2:	0600                	addi	s0,sp,768
    18c4:	f300                	fsw	fs0,32(a4)
    18c6:	5d01                	li	s10,-32
    18c8:	1c31                	addi	s8,s8,-20
    18ca:	109f 0004 4600      	0x46000004109f
    18d0:	0004                	0x4
    18d2:	0300                	addi	s0,sp,384
    18d4:	8400                	0x8400
    18d6:	9f7f                	0x9f7f
	...
    18e0:	00dc                	addi	a5,sp,68
    18e2:	0000                	unimp
    18e4:	0164                	addi	s1,sp,140
    18e6:	0000                	unimp
    18e8:	0001                	nop
    18ea:	645a                	flw	fs0,148(sp)
    18ec:	0001                	nop
    18ee:	6d00                	flw	fs0,24(a0)
    18f0:	0001                	nop
    18f2:	0100                	addi	s0,sp,128
    18f4:	5b00                	lw	s0,48(a4)
    18f6:	016d                	addi	sp,sp,27
    18f8:	0000                	unimp
    18fa:	01aa                	slli	gp,gp,0xa
    18fc:	0000                	unimp
    18fe:	0004                	0x4
    1900:	9f5a01f3          	0x9f5a01f3
    1904:	01aa                	slli	gp,gp,0xa
    1906:	0000                	unimp
    1908:	01cc                	addi	a1,sp,196
    190a:	0000                	unimp
    190c:	0001                	nop
    190e:	cc5a                	sw	s6,24(sp)
    1910:	0001                	nop
    1912:	e800                	fsw	fs0,16(s0)
    1914:	0002                	c.slli64	zero
    1916:	0400                	addi	s0,sp,512
    1918:	f300                	fsw	fs0,32(a4)
    191a:	5a01                	li	s4,-32
    191c:	009f 0000 0000      	0x9f
    1922:	0000                	unimp
    1924:	dc00                	sw	s0,56(s0)
    1926:	0000                	unimp
    1928:	5000                	lw	s0,32(s0)
    192a:	0001                	nop
    192c:	0100                	addi	s0,sp,128
    192e:	5b00                	lw	s0,48(a4)
    1930:	0150                	addi	a2,sp,132
    1932:	0000                	unimp
    1934:	016d                	addi	sp,sp,27
    1936:	0000                	unimp
    1938:	0001                	nop
    193a:	6d60                	flw	fs0,92(a0)
    193c:	0001                	nop
    193e:	aa00                	fsd	fs0,16(a2)
    1940:	0001                	nop
    1942:	0300                	addi	s0,sp,384
    1944:	7800                	flw	fs0,48(s0)
    1946:	7fb4                	flw	fa3,120(a5)
    1948:	01aa                	slli	gp,gp,0xa
    194a:	0000                	unimp
    194c:	01cc                	addi	a1,sp,196
    194e:	0000                	unimp
    1950:	0001                	nop
    1952:	cc60                	sw	s0,92(s0)
    1954:	0001                	nop
    1956:	2600                	fld	fs0,8(a2)
    1958:	0002                	c.slli64	zero
    195a:	0300                	addi	s0,sp,384
    195c:	7800                	flw	fs0,48(s0)
    195e:	7fb4                	flw	fa3,120(a5)
    1960:	0226                	slli	tp,tp,0x9
    1962:	0000                	unimp
    1964:	02e8                	addi	a0,sp,332
    1966:	0000                	unimp
    1968:	b4910003          	lb	zero,-1207(sp)
    196c:	007f                	0x7f
    196e:	0000                	unimp
    1970:	0000                	unimp
    1972:	0000                	unimp
    1974:	dc00                	sw	s0,56(s0)
    1976:	0000                	unimp
    1978:	5200                	lw	s0,32(a2)
    197a:	0001                	nop
    197c:	0100                	addi	s0,sp,128
    197e:	5c00                	lw	s0,56(s0)
    1980:	0152                	slli	sp,sp,0x14
    1982:	0000                	unimp
    1984:	016d                	addi	sp,sp,27
    1986:	0000                	unimp
    1988:	0001                	nop
    198a:	6d61                	lui	s10,0x18
    198c:	0001                	nop
    198e:	aa00                	fsd	fs0,16(a2)
    1990:	0001                	nop
    1992:	0300                	addi	s0,sp,384
    1994:	7800                	flw	fs0,48(s0)
    1996:	7fb0                	flw	fa2,120(a5)
    1998:	01aa                	slli	gp,gp,0xa
    199a:	0000                	unimp
    199c:	01cc                	addi	a1,sp,196
    199e:	0000                	unimp
    19a0:	0001                	nop
    19a2:	cc61                	beqz	s0,1a7a <ti_2+0x136>
    19a4:	0001                	nop
    19a6:	2200                	fld	fs0,0(a2)
    19a8:	0002                	c.slli64	zero
    19aa:	0300                	addi	s0,sp,384
    19ac:	7800                	flw	fs0,48(s0)
    19ae:	7fb0                	flw	fa2,120(a5)
    19b0:	0222                	slli	tp,tp,0x8
    19b2:	0000                	unimp
    19b4:	0246                	slli	tp,tp,0x11
    19b6:	0000                	unimp
    19b8:	0002                	c.slli64	zero
    19ba:	0072                	c.slli	zero,0x1c
    19bc:	0246                	slli	tp,tp,0x11
    19be:	0000                	unimp
    19c0:	0248                	addi	a0,sp,260
    19c2:	0000                	unimp
    19c4:	b0720003          	lb	zero,-1273(tp) # fffffb07 <_stack_start+0xfffefb07>
    19c8:	487f                	0x487f
    19ca:	0002                	c.slli64	zero
    19cc:	e800                	fsw	fs0,16(s0)
    19ce:	0002                	c.slli64	zero
    19d0:	0300                	addi	s0,sp,384
    19d2:	9100                	0x9100
    19d4:	7fb0                	flw	fa2,120(a5)
	...
    19de:	00dc                	addi	a5,sp,68
    19e0:	0000                	unimp
    19e2:	00e6                	slli	ra,ra,0x19
    19e4:	0000                	unimp
    19e6:	0001                	nop
    19e8:	e65d                	bnez	a2,1a96 <ti_2+0x152>
    19ea:	0000                	unimp
    19ec:	2a00                	fld	fs0,16(a2)
    19ee:	0002                	c.slli64	zero
    19f0:	0100                	addi	s0,sp,128
    19f2:	6200                	flw	fs0,0(a2)
    19f4:	022a                	slli	tp,tp,0xa
    19f6:	0000                	unimp
    19f8:	0248                	addi	a0,sp,260
    19fa:	0000                	unimp
    19fc:	0004                	0x4
    19fe:	9f5d01f3          	0x9f5d01f3
    1a02:	0248                	addi	a0,sp,260
    1a04:	0000                	unimp
    1a06:	02e8                	addi	a0,sp,332
    1a08:	0000                	unimp
    1a0a:	0001                	nop
    1a0c:	0062                	c.slli	zero,0x18
    1a0e:	0000                	unimp
    1a10:	0000                	unimp
    1a12:	0000                	unimp
    1a14:	dc00                	sw	s0,56(s0)
    1a16:	0000                	unimp
    1a18:	6d00                	flw	fs0,24(a0)
    1a1a:	0001                	nop
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	5e00                	lw	s0,56(a2)
    1a20:	016d                	addi	sp,sp,27
    1a22:	0000                	unimp
    1a24:	01aa                	slli	gp,gp,0xa
    1a26:	0000                	unimp
    1a28:	0001                	nop
    1a2a:	0001aa67          	0x1aa67
    1a2e:	cc00                	sw	s0,24(s0)
    1a30:	0001                	nop
    1a32:	0100                	addi	s0,sp,128
    1a34:	5e00                	lw	s0,56(a2)
    1a36:	01cc                	addi	a1,sp,196
    1a38:	0000                	unimp
    1a3a:	0234                	addi	a3,sp,264
    1a3c:	0000                	unimp
    1a3e:	0001                	nop
    1a40:	00023467          	0x23467
    1a44:	4800                	lw	s0,16(s0)
    1a46:	0002                	c.slli64	zero
    1a48:	0400                	addi	s0,sp,512
    1a4a:	f300                	fsw	fs0,32(a4)
    1a4c:	5e01                	li	t3,-32
    1a4e:	489f 0002 e800      	0xe8000002489f
    1a54:	0002                	c.slli64	zero
    1a56:	0100                	addi	s0,sp,128
    1a58:	6700                	flw	fs0,8(a4)
	...
    1a62:	00dc                	addi	a5,sp,68
    1a64:	0000                	unimp
    1a66:	0118                	addi	a4,sp,128
    1a68:	0000                	unimp
    1a6a:	0001                	nop
    1a6c:	185f 0001 2600      	0x26000001185f
    1a72:	0002                	c.slli64	zero
    1a74:	0300                	addi	s0,sp,384
    1a76:	7800                	flw	fs0,48(s0)
    1a78:	7fb8                	flw	fa4,120(a5)
    1a7a:	0226                	slli	tp,tp,0x9
    1a7c:	0000                	unimp
    1a7e:	02e8                	addi	a0,sp,332
    1a80:	0000                	unimp
    1a82:	b8910003          	lb	zero,-1143(sp)
    1a86:	007f                	0x7f
    1a88:	0000                	unimp
    1a8a:	0000                	unimp
    1a8c:	0000                	unimp
    1a8e:	4600                	lw	s0,8(a2)
    1a90:	0001                	nop
    1a92:	5a00                	lw	s0,48(a2)
    1a94:	0001                	nop
    1a96:	0200                	addi	s0,sp,256
    1a98:	8a00                	0x8a00
    1a9a:	5a00                	lw	s0,48(a2)
    1a9c:	0001                	nop
    1a9e:	0400                	addi	s0,sp,512
    1aa0:	0002                	c.slli64	zero
    1aa2:	0200                	addi	s0,sp,256
    1aa4:	8400                	0x8400
    1aa6:	0400                	addi	s0,sp,512
    1aa8:	0002                	c.slli64	zero
    1aaa:	3a00                	fld	fs0,48(a2)
    1aac:	0002                	c.slli64	zero
    1aae:	0200                	addi	s0,sp,256
    1ab0:	8a00                	0x8a00
    1ab2:	4800                	lw	s0,16(s0)
    1ab4:	0002                	c.slli64	zero
    1ab6:	9400                	0x9400
    1ab8:	0002                	c.slli64	zero
    1aba:	0200                	addi	s0,sp,256
    1abc:	8400                	0x8400
    1abe:	9400                	0x9400
    1ac0:	0002                	c.slli64	zero
    1ac2:	e800                	fsw	fs0,16(s0)
    1ac4:	0002                	c.slli64	zero
    1ac6:	0200                	addi	s0,sp,256
    1ac8:	8a00                	0x8a00
	...
    1ad2:	4800                	lw	s0,16(s0)
    1ad4:	0001                	nop
    1ad6:	5a00                	lw	s0,48(a2)
    1ad8:	0001                	nop
    1ada:	0200                	addi	s0,sp,256
    1adc:	3000                	fld	fs0,32(s0)
    1ade:	5a9f 0001 6000      	0x600000015a9f
    1ae4:	0001                	nop
    1ae6:	0100                	addi	s0,sp,128
    1ae8:	5c00                	lw	s0,56(s0)
    1aea:	016e                	slli	sp,sp,0x1b
    1aec:	0000                	unimp
    1aee:	017a                	slli	sp,sp,0x1e
    1af0:	0000                	unimp
    1af2:	0002                	c.slli64	zero
    1af4:	9f30                	0x9f30
    1af6:	017a                	slli	sp,sp,0x1e
    1af8:	0000                	unimp
    1afa:	0182                	c.slli64	gp
    1afc:	0000                	unimp
    1afe:	0001                	nop
    1b00:	0001865b          	0x1865b
    1b04:	8a00                	0x8a00
    1b06:	0001                	nop
    1b08:	0200                	addi	s0,sp,256
    1b0a:	3000                	fld	fs0,32(s0)
    1b0c:	8a9f 0001 a000      	0xa00000018a9f
    1b12:	0001                	nop
    1b14:	0100                	addi	s0,sp,128
    1b16:	5b00                	lw	s0,48(a4)
    1b18:	01aa                	slli	gp,gp,0xa
    1b1a:	0000                	unimp
    1b1c:	01cc                	addi	a1,sp,196
    1b1e:	0000                	unimp
    1b20:	0001                	nop
    1b22:	cc5c                	sw	a5,28(s0)
    1b24:	0001                	nop
    1b26:	dc00                	sw	s0,56(s0)
    1b28:	0001                	nop
    1b2a:	0100                	addi	s0,sp,128
    1b2c:	5b00                	lw	s0,48(a4)
    1b2e:	01dc                	addi	a5,sp,196
    1b30:	0000                	unimp
    1b32:	01e2                	slli	gp,gp,0x18
    1b34:	0000                	unimp
    1b36:	7f7b0003          	lb	zero,2039(s6) # 517f7 <_stack_start+0x417f7>
    1b3a:	e29f 0001 f400      	0xf4000001e29f
    1b40:	0001                	nop
    1b42:	0100                	addi	s0,sp,128
    1b44:	5b00                	lw	s0,48(a4)
    1b46:	01f4                	addi	a3,sp,204
    1b48:	0000                	unimp
    1b4a:	01fa                	slli	gp,gp,0x1e
    1b4c:	0000                	unimp
    1b4e:	7f7b0003          	lb	zero,2039(s6)
    1b52:	fa9f 0001 fe00      	0xfe000001fa9f
    1b58:	0001                	nop
    1b5a:	0100                	addi	s0,sp,128
    1b5c:	5b00                	lw	s0,48(a4)
    1b5e:	0204                	addi	s1,sp,256
    1b60:	0000                	unimp
    1b62:	0210                	addi	a2,sp,256
    1b64:	0000                	unimp
    1b66:	0001                	nop
    1b68:	945e                	add	s0,s0,s7
    1b6a:	0002                	c.slli64	zero
    1b6c:	b200                	fsd	fs0,32(a2)
    1b6e:	0002                	c.slli64	zero
    1b70:	0100                	addi	s0,sp,128
    1b72:	5e00                	lw	s0,56(a2)
    1b74:	02b2                	slli	t0,t0,0xc
    1b76:	0000                	unimp
    1b78:	02be                	slli	t0,t0,0xf
    1b7a:	0000                	unimp
    1b7c:	0001                	nop
    1b7e:	0002be5b          	0x2be5b
    1b82:	ca00                	sw	s0,16(a2)
    1b84:	0002                	c.slli64	zero
    1b86:	0300                	addi	s0,sp,384
    1b88:	7b00                	flw	fs0,48(a4)
    1b8a:	9f7f                	0x9f7f
    1b8c:	02ca                	slli	t0,t0,0x12
    1b8e:	0000                	unimp
    1b90:	02d4                	addi	a3,sp,324
    1b92:	0000                	unimp
    1b94:	0001                	nop
    1b96:	0000005b          	0x5b
    1b9a:	0000                	unimp
    1b9c:	0000                	unimp
    1b9e:	a200                	fsd	fs0,0(a2)
    1ba0:	0001                	nop
    1ba2:	aa00                	fsd	fs0,16(a2)
    1ba4:	0001                	nop
    1ba6:	0100                	addi	s0,sp,128
    1ba8:	6900                	flw	fs0,16(a0)
    1baa:	01aa                	slli	gp,gp,0xa
    1bac:	0000                	unimp
    1bae:	01c6                	slli	gp,gp,0x11
    1bb0:	0000                	unimp
    1bb2:	0001                	nop
    1bb4:	fe5f 0001 0400      	0x4000001fe5f
    1bba:	0002                	c.slli64	zero
    1bbc:	0100                	addi	s0,sp,128
    1bbe:	6900                	flw	fs0,16(a0)
    1bc0:	0214                	addi	a3,sp,256
    1bc2:	0000                	unimp
    1bc4:	021a                	slli	tp,tp,0x6
    1bc6:	0000                	unimp
    1bc8:	0001                	nop
    1bca:	1a5d                	addi	s4,s4,-9
    1bcc:	0002                	c.slli64	zero
    1bce:	4800                	lw	s0,16(s0)
    1bd0:	0002                	c.slli64	zero
    1bd2:	0100                	addi	s0,sp,128
    1bd4:	5f00                	lw	s0,56(a4)
    1bd6:	0248                	addi	a0,sp,260
    1bd8:	0000                	unimp
    1bda:	0294                	addi	a3,sp,320
    1bdc:	0000                	unimp
    1bde:	0001                	nop
    1be0:	9469                	srai	s0,s0,0x3a
    1be2:	0002                	c.slli64	zero
    1be4:	9800                	0x9800
    1be6:	0002                	c.slli64	zero
    1be8:	0100                	addi	s0,sp,128
    1bea:	5c00                	lw	s0,56(s0)
    1bec:	0298                	addi	a4,sp,320
    1bee:	0000                	unimp
    1bf0:	02a2                	slli	t0,t0,0x8
    1bf2:	0000                	unimp
    1bf4:	7f7c0003          	lb	zero,2039(s8)
    1bf8:	a29f 0002 ac00      	0xac000002a29f
    1bfe:	0002                	c.slli64	zero
    1c00:	0100                	addi	s0,sp,128
    1c02:	5c00                	lw	s0,56(s0)
    1c04:	02b2                	slli	t0,t0,0xc
    1c06:	0000                	unimp
    1c08:	02d8                	addi	a4,sp,324
    1c0a:	0000                	unimp
    1c0c:	0001                	nop
    1c0e:	d85d                	beqz	s0,1bc4 <random_keys+0xf0>
    1c10:	0002                	c.slli64	zero
    1c12:	dc00                	sw	s0,56(s0)
    1c14:	0002                	c.slli64	zero
    1c16:	0100                	addi	s0,sp,128
    1c18:	5f00                	lw	s0,56(a4)
    1c1a:	02dc                	addi	a5,sp,324
    1c1c:	0000                	unimp
    1c1e:	02e6                	slli	t0,t0,0x19
    1c20:	0000                	unimp
    1c22:	7f7f0003          	lb	zero,2039(t5)
    1c26:	e69f 0002 e800      	0xe8000002e69f
    1c2c:	0002                	c.slli64	zero
    1c2e:	0100                	addi	s0,sp,128
    1c30:	5f00                	lw	s0,56(a4)
	...
    1c3a:	0248                	addi	a0,sp,260
    1c3c:	0000                	unimp
    1c3e:	025a                	slli	tp,tp,0x16
    1c40:	0000                	unimp
    1c42:	0001                	nop
    1c44:	5a5f 0002 6000      	0x600000025a5f
    1c4a:	0002                	c.slli64	zero
    1c4c:	0300                	addi	s0,sp,384
    1c4e:	7f00                	flw	fs0,56(a4)
    1c50:	9f01                	0x9f01
    1c52:	0260                	addi	s0,sp,268
    1c54:	0000                	unimp
    1c56:	026c                	addi	a1,sp,268
    1c58:	0000                	unimp
    1c5a:	0001                	nop
    1c5c:	705f 0002 8200      	0x82000002705f
    1c62:	0002                	c.slli64	zero
    1c64:	0100                	addi	s0,sp,128
    1c66:	5f00                	lw	s0,56(a4)
    1c68:	0282                	c.slli64	t0
    1c6a:	0000                	unimp
    1c6c:	0288                	addi	a0,sp,320
    1c6e:	0000                	unimp
    1c70:	017f0003          	lb	zero,23(t5)
    1c74:	889f 0002 9400      	0x94000002889f
    1c7a:	0002                	c.slli64	zero
    1c7c:	0100                	addi	s0,sp,128
    1c7e:	5f00                	lw	s0,56(a4)
	...
    1c88:	021e                	slli	tp,tp,0x7
    1c8a:	0000                	unimp
    1c8c:	0248                	addi	a0,sp,260
    1c8e:	0000                	unimp
    1c90:	0006                	c.slli	zero,0x1
    1c92:	00123c03          	0x123c03
    1c96:	9f00                	0x9f00
	...
    1ca0:	0146                	slli	sp,sp,0x11
    1ca2:	0000                	unimp
    1ca4:	0232                	slli	tp,tp,0xc
    1ca6:	0000                	unimp
    1ca8:	0002                	c.slli64	zero
    1caa:	0086                	slli	ra,ra,0x1
    1cac:	0232                	slli	tp,tp,0xc
    1cae:	0000                	unimp
    1cb0:	023a                	slli	tp,tp,0xe
    1cb2:	0000                	unimp
    1cb4:	000e                	c.slli	zero,0x3
    1cb6:	008a                	slli	ra,ra,0x2
    1cb8:	b491                	j	16fc <result+0x10>
    1cba:	067f                	0x67f
    1cbc:	2432                	fld	fs0,264(sp)
    1cbe:	f0090f23          	sb	zero,-226(s2)
    1cc2:	1c1a                	slli	s8,s8,0x26
    1cc4:	0248                	addi	a0,sp,260
    1cc6:	0000                	unimp
    1cc8:	02e8                	addi	a0,sp,332
    1cca:	0000                	unimp
    1ccc:	0002                	c.slli64	zero
    1cce:	0086                	slli	ra,ra,0x1
	...
    1cd8:	0148                	addi	a0,sp,132
    1cda:	0000                	unimp
    1cdc:	0222                	slli	tp,tp,0x8
    1cde:	0000                	unimp
    1ce0:	0002                	c.slli64	zero
    1ce2:	0072                	c.slli	zero,0x1c
    1ce4:	0222                	slli	tp,tp,0x8
    1ce6:	0000                	unimp
    1ce8:	022a                	slli	tp,tp,0xa
    1cea:	0000                	unimp
    1cec:	000c                	0xc
    1cee:	0086                	slli	ra,ra,0x1
    1cf0:	0082                	c.slli64	ra
    1cf2:	2432                	fld	fs0,264(sp)
    1cf4:	f0090f23          	sb	zero,-226(s2)
    1cf8:	1c1a                	slli	s8,s8,0x26
    1cfa:	022a                	slli	tp,tp,0xa
    1cfc:	0000                	unimp
    1cfe:	0232                	slli	tp,tp,0xc
    1d00:	0000                	unimp
    1d02:	000d                	c.nop	3
    1d04:	0086                	slli	ra,ra,0x1
    1d06:	325d01f3          	0x325d01f3
    1d0a:	2324                	fld	fs1,64(a4)
    1d0c:	1af0090f          	0x1af0090f
    1d10:	321c                	fld	fa5,32(a2)
    1d12:	0002                	c.slli64	zero
    1d14:	3a00                	fld	fs0,48(a2)
    1d16:	0002                	c.slli64	zero
    1d18:	1900                	addi	s0,sp,176
    1d1a:	8a00                	0x8a00
    1d1c:	9100                	0x9100
    1d1e:	7fb4                	flw	fa3,120(a5)
    1d20:	3206                	fld	ft4,96(sp)
    1d22:	2324                	fld	fs1,64(a4)
    1d24:	1af0090f          	0x1af0090f
    1d28:	f31c                	fsw	fa5,32(a4)
    1d2a:	5d01                	li	s10,-32
    1d2c:	2432                	fld	fs0,264(sp)
    1d2e:	f0090f23          	sb	zero,-226(s2)
    1d32:	1c1a                	slli	s8,s8,0x26
    1d34:	0248                	addi	a0,sp,260
    1d36:	0000                	unimp
    1d38:	02e8                	addi	a0,sp,332
    1d3a:	0000                	unimp
    1d3c:	0002                	c.slli64	zero
    1d3e:	0072                	c.slli	zero,0x1c
	...
    1d48:	0146                	slli	sp,sp,0x11
    1d4a:	0000                	unimp
    1d4c:	01a2                	slli	gp,gp,0x8
    1d4e:	0000                	unimp
    1d50:	0001                	nop
    1d52:	a269                	j	1edc <random_keys+0x408>
    1d54:	0001                	nop
    1d56:	aa00                	fsd	fs0,16(a2)
    1d58:	0001                	nop
    1d5a:	0300                	addi	s0,sp,384
    1d5c:	8200                	0x8200
    1d5e:	9f7f                	0x9f7f
    1d60:	01aa                	slli	gp,gp,0xa
    1d62:	0000                	unimp
    1d64:	01fe                	slli	gp,gp,0x1f
    1d66:	0000                	unimp
    1d68:	0001                	nop
    1d6a:	fe69                	bnez	a2,1d44 <random_keys+0x270>
    1d6c:	0001                	nop
    1d6e:	2a00                	fld	fs0,16(a2)
    1d70:	0002                	c.slli64	zero
    1d72:	0300                	addi	s0,sp,384
    1d74:	8200                	0x8200
    1d76:	9f7f                	0x9f7f
    1d78:	022a                	slli	tp,tp,0xa
    1d7a:	0000                	unimp
    1d7c:	0248                	addi	a0,sp,260
    1d7e:	0000                	unimp
    1d80:	0006                	c.slli	zero,0x1
    1d82:	315d01f3          	0x315d01f3
    1d86:	9f1c                	0x9f1c
    1d88:	0248                	addi	a0,sp,260
    1d8a:	0000                	unimp
    1d8c:	02e8                	addi	a0,sp,332
    1d8e:	0000                	unimp
    1d90:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x176>
    1d94:	009f 0000 0000      	0x9f
    1d9a:	0000                	unimp
    1d9c:	f200                	fsw	fs0,32(a2)
    1d9e:	0000                	unimp
    1da0:	3600                	fld	fs0,40(a2)
    1da2:	0002                	c.slli64	zero
    1da4:	0100                	addi	s0,sp,128
    1da6:	6800                	flw	fs0,16(s0)
    1da8:	0236                	slli	tp,tp,0xd
    1daa:	0000                	unimp
    1dac:	0248                	addi	a0,sp,260
    1dae:	0000                	unimp
    1db0:	b491000b          	0xb491000b
    1db4:	067f                	0x67f
    1db6:	225d01f3          	0x225d01f3
    1dba:	1c31                	addi	s8,s8,-20
    1dbc:	489f 0002 e800      	0xe8000002489f
    1dc2:	0002                	c.slli64	zero
    1dc4:	0100                	addi	s0,sp,128
    1dc6:	6800                	flw	fs0,16(s0)
	...
    1dd0:	0146                	slli	sp,sp,0x11
    1dd2:	0000                	unimp
    1dd4:	0230                	addi	a2,sp,264
    1dd6:	0000                	unimp
    1dd8:	0001                	nop
    1dda:	3065                	jal	1682 <product2+0x1ee>
    1ddc:	0002                	c.slli64	zero
    1dde:	4800                	lw	s0,16(s0)
    1de0:	0002                	c.slli64	zero
    1de2:	0700                	addi	s0,sp,896
    1de4:	9100                	0x9100
    1de6:	7fb4                	flw	fa3,120(a5)
    1de8:	3106                	fld	ft2,96(sp)
    1dea:	9f1c                	0x9f1c
    1dec:	0248                	addi	a0,sp,260
    1dee:	0000                	unimp
    1df0:	02e8                	addi	a0,sp,332
    1df2:	0000                	unimp
    1df4:	0001                	nop
    1df6:	0065                	c.nop	25
    1df8:	0000                	unimp
    1dfa:	0000                	unimp
    1dfc:	0000                	unimp
    1dfe:	4600                	lw	s0,8(a2)
    1e00:	0001                	nop
    1e02:	a200                	fsd	fs0,0(a2)
    1e04:	0001                	nop
    1e06:	0100                	addi	s0,sp,128
    1e08:	6900                	flw	fs0,16(a0)
    1e0a:	01a2                	slli	gp,gp,0x8
    1e0c:	0000                	unimp
    1e0e:	01aa                	slli	gp,gp,0xa
    1e10:	0000                	unimp
    1e12:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x176>
    1e16:	aa9f 0001 fe00      	0xfe000001aa9f
    1e1c:	0001                	nop
    1e1e:	0100                	addi	s0,sp,128
    1e20:	6900                	flw	fs0,16(a0)
    1e22:	01fe                	slli	gp,gp,0x1f
    1e24:	0000                	unimp
    1e26:	022a                	slli	tp,tp,0xa
    1e28:	0000                	unimp
    1e2a:	7f820003          	lb	zero,2040(tp) # 7f8 <ext_euclid+0x176>
    1e2e:	2a9f 0002 4800      	0x480000022a9f
    1e34:	0002                	c.slli64	zero
    1e36:	0600                	addi	s0,sp,768
    1e38:	f300                	fsw	fs0,32(a4)
    1e3a:	5d01                	li	s10,-32
    1e3c:	1c31                	addi	s8,s8,-20
    1e3e:	489f 0002 e800      	0xe8000002489f
    1e44:	0002                	c.slli64	zero
    1e46:	0300                	addi	s0,sp,384
    1e48:	8200                	0x8200
    1e4a:	9f7f                	0x9f7f
	...
    1e54:	00ba                	slli	ra,ra,0xe
    1e56:	0000                	unimp
    1e58:	00c0                	addi	s0,sp,68
    1e5a:	0000                	unimp
    1e5c:	0001                	nop
    1e5e:	c05c                	sw	a5,4(s0)
    1e60:	0000                	unimp
    1e62:	dc00                	sw	s0,56(s0)
    1e64:	0000                	unimp
    1e66:	0400                	addi	s0,sp,512
    1e68:	f300                	fsw	fs0,32(a4)
    1e6a:	5c01                	li	s8,-32
    1e6c:	009f 0000 0000      	0x9f
    1e72:	0000                	unimp
    1e74:	ba00                	fsd	fs0,48(a2)
    1e76:	0000                	unimp
    1e78:	c400                	sw	s0,8(s0)
    1e7a:	0000                	unimp
    1e7c:	0200                	addi	s0,sp,256
    1e7e:	3000                	fld	fs0,32(s0)
    1e80:	c49f 0000 dc00      	0xdc000000c49f
    1e86:	0000                	unimp
    1e88:	0100                	addi	s0,sp,128
    1e8a:	5f00                	lw	s0,56(a4)
	...
    1e94:	00ce                	slli	ra,ra,0x13
    1e96:	0000                	unimp
    1e98:	00d4                	addi	a3,sp,68
    1e9a:	0000                	unimp
    1e9c:	0006                	c.slli	zero,0x1
    1e9e:	007e007b          	0x7e007b
    1ea2:	9f22                	add	t5,t5,s0
    1ea4:	00d4                	addi	a3,sp,68
    1ea6:	0000                	unimp
    1ea8:	00d8                	addi	a4,sp,68
    1eaa:	0000                	unimp
    1eac:	0001                	nop
    1eae:	005e                	c.slli	zero,0x17
    1eb0:	0000                	unimp
    1eb2:	0000                	unimp
    1eb4:	0000                	unimp
    1eb6:	ce00                	sw	s0,24(a2)
    1eb8:	0000                	unimp
    1eba:	d200                	sw	s0,32(a2)
    1ebc:	0000                	unimp
    1ebe:	0600                	addi	s0,sp,768
    1ec0:	7a00                	flw	fs0,48(a2)
    1ec2:	7e00                	flw	fs0,56(a2)
    1ec4:	2200                	fld	fs0,0(a2)
    1ec6:	d29f 0000 d800      	0xd8000000d29f
    1ecc:	0000                	unimp
    1ece:	0100                	addi	s0,sp,128
    1ed0:	5d00                	lw	s0,56(a0)
	...
    1eda:	0092                	slli	ra,ra,0x4
    1edc:	0000                	unimp
    1ede:	0098                	addi	a4,sp,64
    1ee0:	0000                	unimp
    1ee2:	0001                	nop
    1ee4:	985c                	0x985c
    1ee6:	0000                	unimp
    1ee8:	b400                	fsd	fs0,40(s0)
    1eea:	0000                	unimp
    1eec:	0400                	addi	s0,sp,512
    1eee:	f300                	fsw	fs0,32(a4)
    1ef0:	5c01                	li	s8,-32
    1ef2:	009f 0000 0000      	0x9f
    1ef8:	0000                	unimp
    1efa:	9200                	0x9200
    1efc:	0000                	unimp
    1efe:	9c00                	0x9c00
    1f00:	0000                	unimp
    1f02:	0200                	addi	s0,sp,256
    1f04:	3000                	fld	fs0,32(s0)
    1f06:	9c9f 0000 b400      	0xb40000009c9f
    1f0c:	0000                	unimp
    1f0e:	0100                	addi	s0,sp,128
    1f10:	5f00                	lw	s0,56(a4)
	...
    1f1a:	00a6                	slli	ra,ra,0x9
    1f1c:	0000                	unimp
    1f1e:	00ac                	addi	a1,sp,72
    1f20:	0000                	unimp
    1f22:	0006                	c.slli	zero,0x1
    1f24:	007e007b          	0x7e007b
    1f28:	9f22                	add	t5,t5,s0
    1f2a:	00ac                	addi	a1,sp,72
    1f2c:	0000                	unimp
    1f2e:	00b0                	addi	a2,sp,72
    1f30:	0000                	unimp
    1f32:	0001                	nop
    1f34:	005e                	c.slli	zero,0x17
    1f36:	0000                	unimp
    1f38:	0000                	unimp
    1f3a:	0000                	unimp
    1f3c:	a600                	fsd	fs0,8(a2)
    1f3e:	0000                	unimp
    1f40:	aa00                	fsd	fs0,16(a2)
    1f42:	0000                	unimp
    1f44:	0600                	addi	s0,sp,768
    1f46:	7a00                	flw	fs0,48(a2)
    1f48:	7e00                	flw	fs0,56(a2)
    1f4a:	2200                	fld	fs0,0(a2)
    1f4c:	aa9f 0000 b000      	0xb0000000aa9f
    1f52:	0000                	unimp
    1f54:	0100                	addi	s0,sp,128
    1f56:	5d00                	lw	s0,56(a0)
	...
    1f60:	008c                	addi	a1,sp,64
    1f62:	0000                	unimp
    1f64:	0090                	addi	a2,sp,64
    1f66:	0000                	unimp
    1f68:	0001                	nop
    1f6a:	005a                	c.slli	zero,0x16
    1f6c:	0000                	unimp
    1f6e:	0000                	unimp
    1f70:	0000                	unimp
    1f72:	b400                	fsd	fs0,40(s0)
    1f74:	0000                	unimp
    1f76:	b800                	fsd	fs0,48(s0)
    1f78:	0000                	unimp
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	5a00                	lw	s0,48(a2)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
  .endr
   0:	0024                	addi	s1,sp,8
   2:	0000                	unimp
   4:	0002                	c.slli64	zero
   6:	0000                	unimp
   8:	0000                	unimp
   a:	0004                	0x4
   c:	0000                	unimp
   e:	0000                	unimp
  10:	008c                	addi	a1,sp,64
  12:	0000                	unimp
  14:	0ce8                	addi	a0,sp,604
  16:	0000                	unimp
  18:	0f70                	addi	a2,sp,924
  1a:	0000                	unimp
  1c:	0138                	addi	a4,sp,136
	...
  26:	0000                	unimp
  28:	0024                	addi	s1,sp,8
  2a:	0000                	unimp
  2c:	0002                	c.slli64	zero
  2e:	00001b0f          	0x1b0f
  32:	0004                	0x4
  34:	0000                	unimp
  36:	0000                	unimp
  38:	0d74                	addi	a3,sp,668
  3a:	0000                	unimp
  3c:	0076                	c.slli	zero,0x1d
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	008c                	addi	a1,sp,64
   2:	0000                	unimp
   4:	0d74                	addi	a3,sp,668
   6:	0000                	unimp
   8:	0f70                	addi	a2,sp,924
   a:	0000                	unimp
   c:	10a8                	addi	a0,sp,104
	...
  16:	0000                	unimp
  18:	ffff                	0xffff
  1a:	ffff                	0xffff
  1c:	0000                	unimp
  1e:	0000                	unimp
  20:	0d74                	addi	a3,sp,668
  22:	0000                	unimp
  24:	0dea                	slli	s11,s11,0x1a
  26:	0000                	unimp
  28:	0000                	unimp
  2a:	0000                	unimp
  2c:	008c                	addi	a1,sp,64
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	2770                	fld	fa2,200(a4)
       2:	0000                	unimp
       4:	00f30003          	lb	zero,15(t1)
       8:	0000                	unimp
       a:	0101                	addi	sp,sp,0
       c:	000d0efb          	0xd0efb
      10:	0101                	addi	sp,sp,0
      12:	0101                	addi	sp,sp,0
      14:	0000                	unimp
      16:	0100                	addi	s0,sp,128
      18:	0000                	unimp
      1a:	2f01                	jal	72a <ext_euclid+0xa8>
      1c:	2f74706f          	j	47b12 <_stack_start+0x37b12>
      20:	6972                	flw	fs2,28(sp)
      22:	2f766373          	csrrsi	t1,0x2f7,12
      26:	696c                	flw	fa1,84(a0)
      28:	2f62                	fld	ft10,24(sp)
      2a:	2f636367          	0x2f636367
      2e:	6972                	flw	fs2,28(sp)
      30:	33766373          	csrrsi	t1,mhpmevent23,12
      34:	2d32                	fld	fs10,264(sp)
      36:	6e75                	lui	t3,0x1d
      38:	776f6e6b          	0x776f6e6b
      3c:	2d6e                	fld	fs10,216(sp)
      3e:	6c65                	lui	s8,0x19
      40:	2f66                	fld	ft10,88(sp)
      42:	2e39                	jal	360 <polymult2+0x78>
      44:	2e32                	fld	ft8,264(sp)
      46:	2f30                	fld	fa2,88(a4)
      48:	6e69                	lui	t3,0x1a
      4a:	64756c63          	bltu	a0,t2,6a2 <ext_euclid+0x20>
      4e:	0065                	c.nop	25
      50:	74706f2f          	0x74706f2f
      54:	7369722f          	0x7369722f
      58:	722f7663          	bgeu	t5,sp,784 <ext_euclid+0x102>
      5c:	7369                	lui	t1,0xffffa
      5e:	32337663          	bgeu	t1,gp,38a <polymult2+0xa2>
      62:	752d                	lui	a0,0xfffeb
      64:	6b6e                	flw	fs6,216(sp)
      66:	6f6e                	flw	ft10,216(sp)
      68:	652d6e77          	0x652d6e77
      6c:	666c                	flw	fa1,76(a2)
      6e:	636e692f          	0x636e692f
      72:	756c                	flw	fa1,108(a0)
      74:	6564                	flw	fs1,76(a0)
      76:	7379732f          	0x7379732f
      7a:	2f00                	fld	fs0,24(a4)
  jal x0, default_exc_handler
      7c:	2f74706f          	j	47b72 <_stack_start+0x37b72>
  jal x0, reset_handler
      80:	6972                	flw	fs2,28(sp)
      82:	2f766373          	csrrsi	t1,0x2f7,12
  jal x0, default_exc_handler
      86:	6972                	flw	fs2,28(sp)
  jal x0, default_exc_handler
      88:	33766373          	csrrsi	t1,mhpmevent23,12
    asm volatile(
      8c:	2d32                	fld	fs10,264(sp)
      8e:	6e75                	lui	t3,0x1d
}
      90:	776f6e6b          	0x776f6e6b
    for(i=0;i<(length/3);i++) {
      94:	2d6e                	fld	fs10,216(sp)
      96:	6c65                	lui	s8,0x19
      98:	2f66                	fld	ft10,88(sp)
      9a:	6e69                	lui	t3,0x1a
      9c:	64756c63          	bltu	a0,t2,6f4 <ext_euclid+0x72>
}
      a0:	0065                	c.nop	25
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
      a2:	4e00                	lw	s0,24(a2)
      a4:	5254                	lw	a3,36(a2)
    asm volatile(
      a6:	5f55                	li	t5,-11
      a8:	3834                	fld	fa3,112(s0)
      aa:	625f 7469 2e4d      	0x2e4d7469625f
    for(i=0;i<(length/3);i++) {
      b0:	00000063          	beqz	zero,b0 <array_add+0x1e>
    asm volatile(
      b4:	7300                	flw	fs0,32(a4)
      b6:	6474                	flw	fa3,76(s0)
}
      b8:	6564                	flw	fs1,76(a0)
    for(i=0;i<(length/3);i++) {
      ba:	2e66                	fld	ft8,88(sp)
      bc:	0068                	addi	a0,sp,12
      be:	0001                	nop
      c0:	5f00                	lw	s0,56(a4)
      c2:	7974                	flw	fa3,116(a0)
      c4:	6570                	flw	fa2,76(a0)
      c6:	00682e73          	csrrs	t3,0x6,a6
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
      ca:	0002                	c.slli64	zero
      cc:	7200                	flw	fs0,32(a2)
    asm volatile(
      ce:	6565                	lui	a0,0x19
      d0:	746e                	flw	fs0,248(sp)
      d2:	682e                	flw	fa6,200(sp)
      d4:	0200                	addi	s0,sp,256
      d6:	0000                	unimp
    for(i=0;i<(length/3);i++) {
      d8:	6f6c                	flw	fa1,92(a4)
      da:	682e6b63          	bltu	t3,sp,770 <ext_euclid+0xee>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      de:	0200                	addi	s0,sp,256
      e0:	0000                	unimp
      e2:	6c647473          	csrrci	s0,0x6c6,8
    int line[size_b][size_a + size_b];
      e6:	6269                	lui	tp,0x1a
      e8:	682e                	flw	fa6,200(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      ea:	0300                	addi	s0,sp,384
      ec:	0000                	unimp
    int line[size_b][size_a + size_b];
      ee:	623c                	flw	fa5,64(a2)
      f0:	6975                	lui	s2,0x1d
      f2:	746c                	flw	fa1,108(s0)
      f4:	692d                	lui	s2,0xb
      f6:	3e6e                	fld	ft8,248(sp)
      f8:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
      fa:	0000                	unimp
      fc:	0500                	addi	s0,sp,640
      fe:	02050033          	mul	zero,a0,zero
     102:	008c                	addi	a1,sp,64
     104:	0000                	unimp
     106:	05010e03          	lb	t3,80(sp)
     10a:	0305                	addi	t1,t1,1
     10c:	00000907          	0x907
     110:	0301                	addi	t1,t1,0
    int line[size_b][size_a + size_b];
     112:	0909                	addi	s2,s2,2
    int pola[size_a];
     114:	0004                	0x4
     116:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     118:	0601                	addi	a2,a2,0
    int pola[size_a];
     11a:	00090303          	lb	t1,0(s2) # b000 <_stack_len+0x7000>
    int line[size_b][size_a + size_b];
     11e:	0100                	addi	s0,sp,128
    int pola[size_a];
     120:	2e05                	jal	450 <polydiv+0xa>
    int line[size_b][size_a + size_b];
     122:	0306                	slli	t1,t1,0x1
    int pola[size_a];
     124:	0901                	addi	s2,s2,0
     126:	0002                	c.slli64	zero
    int polb[size_b];
     128:	0501                	addi	a0,a0,0
     12a:	0301                	addi	t1,t1,0
     12c:	0901                	addi	s2,s2,0
    int pola[size_a];
     12e:	0000                	unimp
    int polb[size_b];
     130:	0501                	addi	a0,a0,0
     132:	0305                	addi	t1,t1,1
            line[i][j] = 0;
     134:	0901                	addi	s2,s2,0
     136:	0000                	unimp
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     138:	0501                	addi	a0,a0,0
     13a:	0616                	slli	a2,a2,0x5
    int pola[size_a];
     13c:	00090003          	lb	zero,0(s2)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
     140:	0100                	addi	s0,sp,128
    int line[size_b][size_a + size_b];
     142:	0a05                	addi	s4,s4,1
     144:	08090003          	lb	zero,128(s2)
            line[i][j] = 0;
     148:	0100                	addi	s0,sp,128
     14a:	0d05                	addi	s10,s10,1
     14c:	0200                	addi	s0,sp,256
    for (i = 0; i < size_b; ++i){
     14e:	0104                	addi	s1,sp,128
     150:	0306                	slli	t1,t1,0x1
            product[j] = 0;
     152:	0900                	addi	s0,sp,144
     154:	0002                	c.slli64	zero
     156:	0501                	addi	a0,a0,0
     158:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     15a:	0402                	c.slli64	s0
     15c:	0601                	addi	a2,a2,0
    array_equ(pola,a,size_a);
     15e:	00090003          	lb	zero,0(s2)
     162:	0100                	addi	s0,sp,128
     164:	0105                	addi	sp,sp,1
     166:	04090303          	lb	t1,64(s2)
     16a:	0100                	addi	s0,sp,128
     16c:	0905                	addi	s2,s2,1
    for (i = 0; i < size_a; ++i){
     16e:	0200                	addi	s0,sp,256
     170:	0304                	addi	s1,sp,384
     172:	0306                	slli	t1,t1,0x1
     174:	097e                	slli	s2,s2,0x1f
     176:	0002                	c.slli64	zero
     178:	0501                	addi	a0,a0,0
     17a:	0005                	c.nop	1
     17c:	0402                	c.slli64	s0
    array_equ(polb,b,size_b);
     17e:	09700303          	lb	t1,151(zero) # 97 <array_add+0x5>
     182:	0004                	0x4
     184:	0001                	nop
   for (i = 0; i < size_b; ++i){
     186:	0402                	c.slli64	s0
     188:	09090303          	lb	t1,144(s2)
     18c:	000a                	c.slli	zero,0x2
    if(star_mult == 1){
     18e:	0501                	addi	a0,a0,0
     190:	001a                	c.slli	zero,0x6
     192:	0402                	c.slli64	s0
     194:	09060303          	lb	t1,144(a2) # fffe0090 <_stack_start+0xfffd0090>
     198:	0000                	unimp
     19a:	0501                	addi	a0,a0,0
     19c:	0402001b          	0x402001b
     1a0:	00030603          	lb	a2,0(t1) # ffffa000 <_stack_start+0xfffea000>
        for (j = size_b -1; j >= 0; j = j-1){
     1a4:	0009                	c.nop	2
            for (k = size_a-1; k >= 0; k = k-1 ){
     1a6:	0100                	addi	s0,sp,128
     1a8:	3305                	jal	fffffec8 <_stack_start+0xfffefec8>
            product[j] = 0;
     1aa:	0306                	slli	t1,t1,0x1
     1ac:	0906                	slli	s2,s2,0x1
     1ae:	0004                	0x4
            line[i][j] = 0;
     1b0:	0501                	addi	a0,a0,0
     1b2:	0305                	addi	t1,t1,1
            product[j] = 0;
     1b4:	0906                	slli	s2,s2,0x1
     1b6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
     1b8:	0301                	addi	t1,t1,0
     1ba:	0909                	addi	s2,s2,2
     1bc:	0004                	0x4
     1be:	0501                	addi	a0,a0,0
    for (i = 0; i < size_b; ++i){
     1c0:	0601                	addi	a2,a2,0
     1c2:	00090203          	lb	tp,0(s2)
     1c6:	0100                	addi	s0,sp,128
        for(j = 0; j < size_a + size_b -1; ++j){
     1c8:	2c05                	jal	3f8 <polymult2+0x110>
     1ca:	0306                	slli	t1,t1,0x1
            pola[i] = pola[i] + mod;
     1cc:	0901                	addi	s2,s2,0
     1ce:	0002                	c.slli64	zero
        while (pola[i] < 0){
     1d0:	0501                	addi	a0,a0,0
     1d2:	0301                	addi	t1,t1,0
     1d4:	0901                	addi	s2,s2,0
        pola[i] = pola[i] % mod;
     1d6:	0000                	unimp
     1d8:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     1da:	0305                	addi	t1,t1,1
     1dc:	0901                	addi	s2,s2,0
        pola[i] = pola[i] % mod;
     1de:	0000                	unimp
     1e0:	0501                	addi	a0,a0,0
    for (i = 0; i < size_a; ++i){
     1e2:	0616                	slli	a2,a2,0x5
            polb[i] = polb[i] + mod;
     1e4:	00090003          	lb	zero,0(s2)
        while (polb[i] < 0){
     1e8:	0100                	addi	s0,sp,128
     1ea:	0a05                	addi	s4,s4,1
     1ec:	08090003          	lb	zero,128(s2)
        polb[i] = polb[i] % mod;
     1f0:	0100                	addi	s0,sp,128
   for (i = 0; i < size_b; ++i){
     1f2:	0d05                	addi	s10,s10,1
     1f4:	0200                	addi	s0,sp,256
        polb[i] = polb[i] % mod;
     1f6:	0104                	addi	s1,sp,128
     1f8:	0306                	slli	t1,t1,0x1
   for (i = 0; i < size_b; ++i){
     1fa:	0900                	addi	s0,sp,144
    if(star_mult == 1){
     1fc:	0002                	c.slli64	zero
        for (j = size_b -1; j >= 0; j = j-1){
     1fe:	0501                	addi	a0,a0,0
     200:	0005                	c.nop	1
        for(j = 0; j < size_a + size_b -1; ++j){
     202:	0402                	c.slli64	s0
    for (i = 0; i < size_b; ++i){
     204:	0601                	addi	a2,a2,0
     206:	00090003          	lb	zero,0(s2)
     20a:	0100                	addi	s0,sp,128
     20c:	0105                	addi	sp,sp,1
     20e:	04090303          	lb	t1,64(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     212:	0100                	addi	s0,sp,128
     214:	0905                	addi	s2,s2,1
     216:	0200                	addi	s0,sp,256
    for(j = 0; j < size_a + size_b -1; ++j){
     218:	0304                	addi	s1,sp,384
     21a:	0306                	slli	t1,t1,0x1
     21c:	097e                	slli	s2,s2,0x1f
}
     21e:	0002                	c.slli64	zero
     220:	0501                	addi	a0,a0,0
     222:	0005                	c.nop	1
     224:	0402                	c.slli64	s0
     226:	09710303          	lb	t1,151(sp)
     22a:	0004                	0x4
     22c:	0001                	nop
     22e:	0402                	c.slli64	s0
     230:	09090303          	lb	t1,144(s2)
     234:	000a                	c.slli	zero,0x2
     236:	0501                	addi	a0,a0,0
     238:	001a                	c.slli	zero,0x6
     23a:	0402                	c.slli64	s0
     23c:	09050303          	lb	t1,144(a0) # 19090 <_stack_start+0x9090>
     240:	0000                	unimp
     242:	0501                	addi	a0,a0,0
     244:	0402001b          	0x402001b
                line[size_b-1-j][k] = pola[k]*polb[j];
     248:	00030603          	lb	a2,0(t1)
     24c:	0009                	c.nop	2
     24e:	0100                	addi	s0,sp,128
     250:	4e05                	li	t3,1
     252:	0306                	slli	t1,t1,0x1
     254:	090a                	slli	s2,s2,0x2
     256:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     258:	0501                	addi	a0,a0,0
                line[size_b-1-j][k] = pola[k]*polb[j];
     25a:	0305                	addi	t1,t1,1
     25c:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
            for (k = size_a-1; k >= 0; k = k-1 ){
     260:	0501                	addi	a0,a0,0
     262:	064e                	slli	a2,a2,0x13
        for (j = size_b -1; j >= 0; j = j-1){
     264:	00097d03          	0x97d03
     268:	0100                	addi	s0,sp,128
     26a:	1d05                	addi	s10,s10,-31
            for (k = size_a-1; k >= 0; k = k-1 ){
     26c:	08090303          	lb	t1,128(s2)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     270:	0100                	addi	s0,sp,128
     272:	4e05                	li	t3,1
     274:	06097d03          	0x6097d03
     278:	0100                	addi	s0,sp,128
     27a:	0905                	addi	s2,s2,1
     27c:	04090303          	lb	t1,64(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     280:	0100                	addi	s0,sp,128
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     282:	4e05                	li	t3,1
     284:	0c097d03          	0xc097d03
            for (k = size_a-1; k >= 0; k = k-1 ){
     288:	0100                	addi	s0,sp,128
     28a:	14090003          	lb	zero,320(s2)
        for (j = size_b -1; j >= 0; j = j-1){
     28e:	0100                	addi	s0,sp,128
     290:	0905                	addi	s2,s2,1
     292:	04090303          	lb	t1,64(s2)
        for(j = 0; j < size_a + size_b -1; ++j){
     296:	0100                	addi	s0,sp,128
     298:	02090303          	lb	t1,32(s2)
            line[i][j] = line[i][j] % mod;
     29c:	0100                	addi	s0,sp,128
     29e:	04097d03          	0x4097d03
        for(j = 0; j < size_a + size_b -1; ++j){
     2a2:	0100                	addi	s0,sp,128
     2a4:	02090303          	lb	t1,32(s2)
    for (i = 0; i < size_b; ++i){
     2a8:	0100                	addi	s0,sp,128
     2aa:	02097d03          	0x2097d03
        for(j = 0; j < size_a + size_b -1; ++j){
     2ae:	0100                	addi	s0,sp,128
     2b0:	04090303          	lb	t1,64(s2)
            product[j] += line[i][j];
     2b4:	0100                	addi	s0,sp,128
     2b6:	02097d03          	0x2097d03
     2ba:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     2bc:	02090303          	lb	t1,32(s2)
            product[j] += line[i][j];
     2c0:	0100                	addi	s0,sp,128
     2c2:	04090103          	lb	sp,64(s2)
     2c6:	0100                	addi	s0,sp,128
     2c8:	06097f03          	0x6097f03
        for(i = 0; i < size_b; ++i){
     2cc:	0100                	addi	s0,sp,128
    for(j = 0; j < size_a + size_b -1; ++j){
     2ce:	02090103          	lb	sp,32(s2)
     2d2:	0100                	addi	s0,sp,128
        for(i = 0; i < size_b; ++i){
     2d4:	1405                	addi	s0,s0,-31
     2d6:	04090503          	lb	a0,64(s2)
    for(j = 0; j < size_a + size_b -1; ++j){
     2da:	0100                	addi	s0,sp,128
     2dc:	4e05                	li	t3,1
        product[j] = product[j] % mod;
     2de:	04097403          	0x4097403
     2e2:	0100                	addi	s0,sp,128
     2e4:	0905                	addi	s2,s2,1
    for(j = 0; j < size_a + size_b -1; ++j){
     2e6:	04090603          	lb	a2,64(s2)
    int line[size_b][size_a + size_b];
     2ea:	0100                	addi	s0,sp,128
     2ec:	4e05                	li	t3,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     2ee:	04097a03          	0x4097a03
     2f2:	0100                	addi	s0,sp,128
     2f4:	0905                	addi	s2,s2,1
     2f6:	02090303          	lb	t1,32(s2)
    int line[size_b][size_a + size_b];
     2fa:	0100                	addi	s0,sp,128
     2fc:	0505                	addi	a0,a0,1
     2fe:	0306                	slli	t1,t1,0x1
     300:	0901                	addi	s2,s2,0
     302:	0004                	0x4
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     304:	0301                	addi	t1,t1,0
     306:	0901                	addi	s2,s2,0
     308:	0000                	unimp
     30a:	0301                	addi	t1,t1,0
     30c:	0901                	addi	s2,s2,0
     30e:	0000                	unimp
     310:	0301                	addi	t1,t1,0
     312:	0901                	addi	s2,s2,0
     314:	0000                	unimp
    int line[size_b][size_a + size_b];
     316:	0501                	addi	a0,a0,0
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     318:	0609                	addi	a2,a2,2
     31a:	00090003          	lb	zero,0(s2)
    int line[size_b][size_a + size_b];
     31e:	0100                	addi	s0,sp,128
     320:	0505                	addi	a0,a0,1
    int pola[size_a];
     322:	0306                	slli	t1,t1,0x1
     324:	00020903          	lb	s2,0(tp) # 1a000 <_stack_start+0xa000>
     328:	0501                	addi	a0,a0,0
    int line[size_b][size_a + size_b];
     32a:	0614                	addi	a3,sp,768
    int pola[size_a];
     32c:	00090203          	lb	tp,0(s2)
    int polb[size_b];
     330:	0100                	addi	s0,sp,128
     332:	0505                	addi	a0,a0,1
     334:	06097e03          	0x6097e03
     338:	0100                	addi	s0,sp,128
     33a:	0c05                	addi	s8,s8,1
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     33c:	02090003          	lb	zero,32(s2)
    int line[size_b][size_a + size_b];
     340:	0100                	addi	s0,sp,128
     342:	1805                	addi	a6,a6,-31
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
     344:	02090303          	lb	t1,32(s2)
    int pola[size_a];
     348:	0100                	addi	s0,sp,128
    int polb[size_b];
     34a:	1105                	addi	sp,sp,-31
    for (i = 0; i < size_b; ++i){
     34c:	0200                	addi	s0,sp,256
     34e:	0104                	addi	s1,sp,128
     350:	0306                	slli	t1,t1,0x1
            product2[j] = 0;
     352:	097d                	addi	s2,s2,31
     354:	0008                	0x8
     356:	0501                	addi	a0,a0,0
     358:	0005                	c.nop	1
    for (i = 0; i < size_b; ++i){
     35a:	0402                	c.slli64	s0
     35c:	0601                	addi	a2,a2,0
    array_equ(pola,a,size_a);
     35e:	00090003          	lb	zero,0(s2)
     362:	0100                	addi	s0,sp,128
     364:	04090703          	lb	a4,64(s2)
     368:	0100                	addi	s0,sp,128
    array_equ(polb,b,size_b);
     36a:	0306                	slli	t1,t1,0x1
     36c:	0900                	addi	s0,sp,144
     36e:	000a                	c.slli	zero,0x2
     370:	0301                	addi	t1,t1,0
     372:	0902                	c.slli64	s2
     374:	0006                	c.slli	zero,0x1
    if(star_mult == 1){
     376:	0501                	addi	a0,a0,0
     378:	060c                	addi	a1,sp,768
     37a:	0a090003          	lb	zero,160(s2)
     37e:	0100                	addi	s0,sp,128
     380:	1105                	addi	sp,sp,-31
     382:	0200                	addi	s0,sp,256
     384:	0104                	addi	s1,sp,128
     386:	0306                	slli	t1,t1,0x1
        for (j = size_b -1; j >= 0; j = j-1){
     388:	0900                	addi	s0,sp,144
     38a:	0002                	c.slli64	zero
            for (k = size_a-1; k >= 0; k = k-1 ){
     38c:	0501                	addi	a0,a0,0
     38e:	0005                	c.nop	1
            product2[j] = 0;
     390:	0402                	c.slli64	s0
     392:	0601                	addi	a2,a2,0
     394:	00090003          	lb	zero,0(s2)
            line[i][j] = 0;
     398:	0100                	addi	s0,sp,128
            product2[j] = 0;
     39a:	0306                	slli	t1,t1,0x1
     39c:	00040907          	0x40907
        for(j = 0; j < size_a + size_b -1; ++j){
     3a0:	0501                	addi	a0,a0,0
     3a2:	0304                	addi	s1,sp,384
     3a4:	0902                	c.slli64	s2
    for (i = 0; i < size_b; ++i){
     3a6:	0008                	0x8
     3a8:	0501                	addi	a0,a0,0
     3aa:	0003060b          	0x3060b
        for(j = 0; j < size_a + size_b -1; ++j){
     3ae:	0209                	addi	tp,tp,2
     3b0:	0100                	addi	s0,sp,128
                line[size_b-1-j][k] = pola[k]*polb[j];
     3b2:	1005                	c.nop	-31
     3b4:	0200                	addi	s0,sp,256
     3b6:	0104                	addi	s1,sp,128
     3b8:	0306                	slli	t1,t1,0x1
     3ba:	0900                	addi	s0,sp,144
     3bc:	0002                	c.slli64	zero
     3be:	0501                	addi	a0,a0,0
     3c0:	0004                	0x4
            for (k = size_a-1; k >= 0; k = k-1 ){
     3c2:	0402                	c.slli64	s0
                line[size_b-1-j][k] = pola[k]*polb[j];
     3c4:	0601                	addi	a2,a2,0
     3c6:	00090003          	lb	zero,0(s2)
            for (k = size_a-1; k >= 0; k = k-1 ){
     3ca:	0100                	addi	s0,sp,128
     3cc:	0505                	addi	a0,a0,1
        for (j = size_b -1; j >= 0; j = j-1){
     3ce:	0306                	slli	t1,t1,0x1
     3d0:	090a                	slli	s2,s2,0x2
     3d2:	0004                	0x4
     3d4:	0501                	addi	a0,a0,0
     3d6:	00030607          	0x30607
        array_add(product2,line[i],size_a+size_b-1);
     3da:	0009                	c.nop	2
     3dc:	0100                	addi	s0,sp,128
     3de:	1d05                	addi	s10,s10,-31
     3e0:	0200                	addi	s0,sp,256
    for(i=0;i<size_b;++i){
     3e2:	0104                	addi	s1,sp,128
     3e4:	0306                	slli	t1,t1,0x1
}
     3e6:	0908                	addi	a0,sp,144
     3e8:	0014                	0x14
     3ea:	0501                	addi	a0,a0,0
     3ec:	0009                	c.nop	2
     3ee:	0402                	c.slli64	s0
     3f0:	0601                	addi	a2,a2,0
     3f2:	00090003          	lb	zero,0(s2)
     3f6:	0100                	addi	s0,sp,128
     3f8:	1405                	addi	s0,s0,-31
     3fa:	04090103          	lb	sp,64(s2)
     3fe:	0100                	addi	s0,sp,128
     400:	0d05                	addi	s10,s10,1
     402:	0200                	addi	s0,sp,256
     404:	0304                	addi	s1,sp,384
     406:	0306                	slli	t1,t1,0x1
     408:	095d                	addi	s2,s2,23
     40a:	0004                	0x4
     40c:	0501                	addi	a0,a0,0
     40e:	0018                	0x18
            for (k = size_a-1; k >= 0; k = k-1 ){
     410:	0402                	c.slli64	s0
     412:	01030603          	lb	a2,16(t1)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     416:	0009                	c.nop	2
     418:	0100                	addi	s0,sp,128
     41a:	0200                	addi	s0,sp,256
     41c:	0304                	addi	s1,sp,384
     41e:	06097f03          	0x6097f03
     422:	0100                	addi	s0,sp,128
            for (k = size_a-1; k >= 0; k = k-1 ){
     424:	0d05                	addi	s10,s10,1
                line[size_b-1-j][k + j] = pola[k]*polb[j];
     426:	0200                	addi	s0,sp,256
     428:	0304                	addi	s1,sp,384
     42a:	0306                	slli	t1,t1,0x1
            for (k = size_a-1; k >= 0; k = k-1 ){
     42c:	0901                	addi	s2,s2,0
     42e:	0004                	0x4
        for (j = size_b -1; j >= 0; j = j-1){
     430:	0501                	addi	a0,a0,0
     432:	0018                	0x18
     434:	0402                	c.slli64	s0
     436:	00030603          	lb	a2,0(t1)
        array_add(product2,line[i],size_a+size_b-1);
     43a:	0009                	c.nop	2
     43c:	0100                	addi	s0,sp,128
     43e:	2c05                	jal	66e <polydiv+0x228>
    for(i=0;i<size_b;++i){
     440:	0200                	addi	s0,sp,256
     442:	0304                	addi	s1,sp,384
     444:	0306                	slli	t1,t1,0x1
    int v[size_N];
     446:	097e                	slli	s2,s2,0x1f
     448:	0004                	0x4
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44a:	0501                	addi	a0,a0,0
    int v[size_N];
     44c:	0014                	0x14
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     44e:	0402                	c.slli64	s0
     450:	0301                	addi	t1,t1,0
     452:	0900                	addi	s0,sp,144
     454:	0004                	0x4
     456:	0501                	addi	a0,a0,0
     458:	0009                	c.nop	2
     45a:	0402                	c.slli64	s0
     45c:	0601                	addi	a2,a2,0
     45e:	00090003          	lb	zero,0(s2)
     462:	0100                	addi	s0,sp,128
     464:	1d05                	addi	s10,s10,-31
    int v[size_N];
     466:	0200                	addi	s0,sp,256
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     468:	0204                	addi	s1,sp,256
     46a:	0306                	slli	t1,t1,0x1
    int v[size_N];
     46c:	097f                	0x97f
     46e:	0004                	0x4
     470:	0501                	addi	a0,a0,0
    int q[size_N];
     472:	0103060f          	0x103060f
     476:	0809                	addi	a6,a6,2
    int num_temp[size_N];
     478:	0100                	addi	s0,sp,128
     47a:	0d05                	addi	s10,s10,1
    int denum_temp[size_D];
     47c:	0306                	slli	t1,t1,0x1
     47e:	090a                	slli	s2,s2,0x2
     480:	0004                	0x4
    int num_temp[size_N];
     482:	0501                	addi	a0,a0,0
    int denum_temp[size_D];
     484:	061f 0003 0009      	0x90003061f
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     48a:	0100                	addi	s0,sp,128
     48c:	1505                	addi	a0,a0,-31
    int v[size_N];
     48e:	02090003          	lb	zero,32(s2)
    array_equ(num_temp,num,size_N);
     492:	0100                	addi	s0,sp,128
     494:	0f05                	addi	t5,t5,1
     496:	0306                	slli	t1,t1,0x1
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
     498:	097f                	0x97f
     49a:	0002                	c.slli64	zero
    int denum_temp[size_D];
     49c:	0501                	addi	a0,a0,0
     49e:	0614                	addi	a3,sp,768
    array_equ(num_temp,num,size_N);
     4a0:	00090003          	lb	zero,0(s2)
    for (i = 0; i < size_N; ++i){
     4a4:	0100                	addi	s0,sp,128
     4a6:	0f05                	addi	t5,t5,1
     4a8:	02090003          	lb	zero,32(s2)
     4ac:	0100                	addi	s0,sp,128
    array_equ(denum_temp,denum,size_D);
     4ae:	0905                	addi	s2,s2,1
     4b0:	0200                	addi	s0,sp,256
     4b2:	0204                	addi	s1,sp,256
     4b4:	0306                	slli	t1,t1,0x1
    for (i = 0; i < size_D; ++i) {
     4b6:	00040903          	lb	s2,0(s0)
     4ba:	0501                	addi	a0,a0,0
     4bc:	0402001b          	0x402001b
    for (i = 0; i < size_N; ++i){
     4c0:	0602                	c.slli64	a2
     4c2:	00090003          	lb	zero,0(s2)
    for (i = size_D-1; i >= 0; i = i-1){
     4c6:	0100                	addi	s0,sp,128
     4c8:	1d05                	addi	s10,s10,-31
     4ca:	0200                	addi	s0,sp,256
     4cc:	0204                	addi	s1,sp,256
     4ce:	04097c03          	0x4097c03
    for (i = 0; i < size_N; ++i){
     4d2:	0100                	addi	s0,sp,128
        if ( (b_N*u)%mod == 1 )
     4d4:	1105                	addi	sp,sp,-31
    for (u = 0; u < mod; ++u){
     4d6:	0200                	addi	s0,sp,256
     4d8:	0204                	addi	s1,sp,256
     4da:	04090403          	lb	s0,64(s2)
            num_temp[i] = num_temp[i] + mod;
     4de:	0100                	addi	s0,sp,128
     4e0:	1d05                	addi	s10,s10,-31
        while (num_temp[i] < 0) {
     4e2:	0200                	addi	s0,sp,256
     4e4:	0204                	addi	s1,sp,256
     4e6:	0306                	slli	t1,t1,0x1
        num_temp[i] = num_temp[i] % mod;
     4e8:	097c                	addi	a5,sp,156
     4ea:	0004                	0x4
    for (i = 0; i < size_N; ++i){
     4ec:	0501                	addi	a0,a0,0
     4ee:	030d                	addi	t1,t1,3
        num_temp[i] = num_temp[i] % mod;
     4f0:	0002090b          	0x2090b
    for (i = 0; i < size_N; ++i){
     4f4:	0501                	addi	a0,a0,0
            denum_temp[i] = denum_temp[i] + mod;
     4f6:	061f 0003 0009      	0x90003061f
        while (denum_temp[i] < 0) {
     4fc:	0100                	addi	s0,sp,128
     4fe:	1505                	addi	a0,a0,-31
        denum_temp[i] = denum_temp[i] % mod;
     500:	02090003          	lb	zero,32(s2)
    for (i = 0; i < size_D; ++i) {
     504:	0100                	addi	s0,sp,128
     506:	0f05                	addi	t5,t5,1
        denum_temp[i] = denum_temp[i] % mod;
     508:	0306                	slli	t1,t1,0x1
     50a:	097f                	0x97f
    for (i = 0; i < size_D; ++i) {
     50c:	0002                	c.slli64	zero
        q[i] = 0;
     50e:	0501                	addi	a0,a0,0
     510:	0614                	addi	a3,sp,768
     512:	00090003          	lb	zero,0(s2)
        v[i] = 0;
     516:	0100                	addi	s0,sp,128
        q[i] = 0;
     518:	0f05                	addi	t5,t5,1
     51a:	02090003          	lb	zero,32(s2)
        v[i] = 0;
     51e:	0100                	addi	s0,sp,128
    for (i = 0; i < size_N; ++i){
     520:	0905                	addi	s2,s2,1
     522:	0200                	addi	s0,sp,256
        if( denum_temp[i] != 0 )
     524:	0204                	addi	s1,sp,256
    for (i = size_D-1; i >= 0; i = i-1){
     526:	0306                	slli	t1,t1,0x1
     528:	00040903          	lb	s2,0(s0)
        if ( (b_N*u)%mod == 1 )
     52c:	0501                	addi	a0,a0,0
     52e:	0402001b          	0x402001b
     532:	0602                	c.slli64	a2
    for (u = 0; u < mod; ++u){
     534:	00090003          	lb	zero,0(s2)
        if( num_temp[i] != 0 )
     538:	0100                	addi	s0,sp,128
    for (i = size_N-1; i >= 0; i = i-1){
     53a:	1c05                	addi	s8,s8,-31
     53c:	0200                	addi	s0,sp,256
     53e:	0204                	addi	s1,sp,256
     540:	04097c03          	0x4097c03
     544:	0100                	addi	s0,sp,128
     546:	1105                	addi	sp,sp,-31
    while (d >= d2){
     548:	0200                	addi	s0,sp,256
     54a:	0204                	addi	s1,sp,256
    array_equ(result,q,size_N);
     54c:	04090403          	lb	s0,64(s2)
     550:	0100                	addi	s0,sp,128
     552:	1c05                	addi	s8,s8,-31
     554:	0200                	addi	s0,sp,256
     556:	0204                	addi	s1,sp,256
     558:	0306                	slli	t1,t1,0x1
    for(i = size_N; i < (2*size_N); ++i){
     55a:	097c                	addi	a5,sp,156
     55c:	0004                	0x4
        result[i] = num_temp[i-size_N];
     55e:	0501                	addi	a0,a0,0
     560:	0a030607          	0xa030607
     564:	0209                	addi	tp,tp,2
    for(i = size_N; i < (2*size_N); ++i){
     566:	0100                	addi	s0,sp,128
     568:	1d05                	addi	s10,s10,-31
}
     56a:	0200                	addi	s0,sp,256
     56c:	0104                	addi	s1,sp,128
     56e:	0306                	slli	t1,t1,0x1
     570:	0901                	addi	s2,s2,0
     572:	0002                	c.slli64	zero
     574:	0501                	addi	a0,a0,0
     576:	0009                	c.nop	2
     578:	0402                	c.slli64	s0
     57a:	0601                	addi	a2,a2,0
     57c:	00090003          	lb	zero,0(s2)
     580:	0100                	addi	s0,sp,128
     582:	0f05                	addi	t5,t5,1
     584:	04091003          	lh	zero,64(s2)
     588:	0100                	addi	s0,sp,128
     58a:	1105                	addi	sp,sp,-31
     58c:	0200                	addi	s0,sp,256
     58e:	0104                	addi	s1,sp,128
     590:	0306                	slli	t1,t1,0x1
     592:	097f                	0x97f
        v[(d-d2)] = u*r_d;
     594:	0002                	c.slli64	zero
     596:	0501                	addi	a0,a0,0
     598:	0005                	c.nop	1
     59a:	0402                	c.slli64	s0
     59c:	0601                	addi	a2,a2,0
     59e:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     5a2:	0100                	addi	s0,sp,128
     5a4:	0c090003          	lb	zero,192(s2)
     5a8:	0100                	addi	s0,sp,128
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
     5aa:	0b05                	addi	s6,s6,1
     5ac:	02090703          	lb	a4,32(s2)
     5b0:	0100                	addi	s0,sp,128
     5b2:	1005                	c.nop	-31
     5b4:	0200                	addi	s0,sp,256
     5b6:	0104                	addi	s1,sp,128
        for (i = 0; i < size_N; ++i){
     5b8:	0306                	slli	t1,t1,0x1
     5ba:	0900                	addi	s0,sp,144
     5bc:	0002                	c.slli64	zero
     5be:	0501                	addi	a0,a0,0
     5c0:	0005                	c.nop	1
        for (i = 0; i < size_N; ++i){
     5c2:	0402                	c.slli64	s0
     5c4:	0601                	addi	a2,a2,0
     5c6:	00090003          	lb	zero,0(s2)
        for (i = 0; i < size_N; ++i){
     5ca:	0100                	addi	s0,sp,128
     5cc:	0b05                	addi	s6,s6,1
     5ce:	04090703          	lb	a4,64(s2)
    array_add(q,v,size_N);
     5d2:	0100                	addi	s0,sp,128
     5d4:	1005                	c.nop	-31
     5d6:	0200                	addi	s0,sp,256
        for(i = 0; i < size_N; ++i){
     5d8:	0104                	addi	s1,sp,128
     5da:	0306                	slli	t1,t1,0x1
     5dc:	0900                	addi	s0,sp,144
     5de:	0002                	c.slli64	zero
        for (i = size_N-1; i >= 0; i = i-1){
     5e0:	0501                	addi	a0,a0,0
     5e2:	0005                	c.nop	1
     5e4:	0402                	c.slli64	s0
     5e6:	0601                	addi	a2,a2,0
     5e8:	00090003          	lb	zero,0(s2)
     5ec:	0100                	addi	s0,sp,128
     5ee:	0306                	slli	t1,t1,0x1
     5f0:	0905                	addi	s2,s2,1
            v[i] = v[i] % mod;
     5f2:	0004                	0x4
        for (i = 0; i < size_N; ++i){
     5f4:	0301                	addi	t1,t1,0
     5f6:	0902                	c.slli64	s2
            v[i] = v[i] % mod;
     5f8:	0000                	unimp
     5fa:	0501                	addi	a0,a0,0
     5fc:	0601                	addi	a2,a2,0
     5fe:	00090103          	lb	sp,0(s2)
                product[i] = product[i] + mod;
     602:	0100                	addi	s0,sp,128
     604:	1105                	addi	sp,sp,-31
            while (product[i] < 0) {
     606:	0200                	addi	s0,sp,256
     608:	0304                	addi	s1,sp,384
     60a:	0306                	slli	t1,t1,0x1
            product[i] = product[i] % mod;
     60c:	095d                	addi	s2,s2,23
     60e:	002a                	c.slli	zero,0xa
        for (i = 0; i < size_N; ++i){
     610:	0501                	addi	a0,a0,0
     612:	0025                	c.nop	9
            product[i] = product[i] % mod;
     614:	0402                	c.slli64	s0
     616:	00030603          	lb	a2,0(t1)
            num_temp[i] = num_temp[i] - product[i];
     61a:	0409                	addi	s0,s0,2
     61c:	0100                	addi	s0,sp,128
     61e:	2b05                	jal	b4e <generate_keys+0x21e>
     620:	0200                	addi	s0,sp,256
     622:	0304                	addi	s1,sp,384
        for (i = 0; i < size_N; ++i){
     624:	04090003          	lb	zero,64(s2)
            num_temp[i] = num_temp[i] - product[i];
     628:	0100                	addi	s0,sp,128
     62a:	2e05                	jal	95a <generate_keys+0x2a>
     62c:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     62e:	0304                	addi	s1,sp,384
                num_temp[i] = num_temp[i] + mod;
     630:	02090003          	lb	zero,32(s2)
            while (num_temp[i] < 0){
     634:	0100                	addi	s0,sp,128
     636:	2a05                	jal	766 <ext_euclid+0xe4>
     638:	0200                	addi	s0,sp,256
            num_temp[i] = num_temp[i] % mod;
     63a:	0304                	addi	s1,sp,384
     63c:	06097f03          	0x6097f03
        for (i = 0; i < size_N; ++i){
     640:	0100                	addi	s0,sp,128
            num_temp[i] = num_temp[i] % mod;
     642:	2e05                	jal	972 <generate_keys+0x42>
     644:	0200                	addi	s0,sp,256
        for (i = 0; i < size_N; ++i){
     646:	0304                	addi	s1,sp,384
            q[i] = q[i] % mod;
     648:	02090103          	lb	sp,32(s2)
        for(i = 0; i < size_N; ++i){
     64c:	0100                	addi	s0,sp,128
            q[i] = q[i] % mod;
     64e:	2505                	jal	c6e <ntru_encyrpt+0x4a>
     650:	0200                	addi	s0,sp,256
     652:	0304                	addi	s1,sp,384
     654:	04090003          	lb	zero,64(s2)
            if( num_temp[i] != 0 )
     658:	0100                	addi	s0,sp,128
        for (i = size_N-1; i >= 0; i = i-1){
     65a:	2805                	jal	68a <ext_euclid+0x8>
     65c:	0200                	addi	s0,sp,256
            v[i] = 0;
     65e:	0304                	addi	s1,sp,384
     660:	0306                	slli	t1,t1,0x1
     662:	097f                	0x97f
     664:	0002                	c.slli64	zero
     666:	0501                	addi	a0,a0,0
        for (i = 0; i < size_N; ++i){
     668:	0020                	addi	s0,sp,8
     66a:	0402                	c.slli64	s0
     66c:	0301                	addi	t1,t1,0
     66e:	0900                	addi	s0,sp,144
        result[i] = num_temp[i-size_N];
     670:	0000                	unimp
     672:	0501                	addi	a0,a0,0
     674:	000d                	c.nop	3
     676:	0402                	c.slli64	s0
     678:	0601                	addi	a2,a2,0
     67a:	00090003          	lb	zero,0(s2)
    for(i = size_N; i < (2*size_N); ++i){
     67e:	0100                	addi	s0,sp,128
     680:	2505                	jal	ca0 <ntru_encyrpt+0x7c>
    int ri_2[size]; // MX-ring poly, a
     682:	0200                	addi	s0,sp,256
     684:	0204                	addi	s1,sp,256
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     686:	0306                	slli	t1,t1,0x1
    int ri_2[size]; // MX-ring poly, a
     688:	097f                	0x97f
     68a:	0004                	0x4
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     68c:	0501                	addi	a0,a0,0
     68e:	04020027          	0x4020027
     692:	0602                	c.slli64	a2
     694:	00090003          	lb	zero,0(s2)
     698:	0100                	addi	s0,sp,128
     69a:	1405                	addi	s0,s0,-31
     69c:	08090103          	lb	sp,128(s2)
     6a0:	0100                	addi	s0,sp,128
     6a2:	1105                	addi	sp,sp,-31
     6a4:	0200                	addi	s0,sp,256
     6a6:	0304                	addi	s1,sp,384
    int ri_2[size]; // MX-ring poly, a
     6a8:	0306                	slli	t1,t1,0x1
     6aa:	0908                	addi	a0,sp,144
     6ac:	0004                	0x4
    int ri_1[size]; // f-random poly, f[N] = 0, b
     6ae:	0501                	addi	a0,a0,0
     6b0:	0029                	c.nop	10
     6b2:	0402                	c.slli64	s0
    int ri[size];
     6b4:	00030603          	lb	a2,0(t1)
     6b8:	0409                	addi	s0,s0,2
    int ti_1[size]; // ti_1[0] = 1
     6ba:	0100                	addi	s0,sp,128
     6bc:	2f05                	jal	dec <memcpy+0x2>
     6be:	0200                	addi	s0,sp,256
    int ti[size];
     6c0:	0304                	addi	s1,sp,384
     6c2:	04090003          	lb	zero,64(s2)
    int qi_1[size];
     6c6:	0100                	addi	s0,sp,128
     6c8:	3205                	jal	ffffffe8 <_stack_start+0xfffeffe8>
     6ca:	0200                	addi	s0,sp,256
    int temp[size];
     6cc:	0304                	addi	s1,sp,384
     6ce:	02090003          	lb	zero,32(s2)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
     6d2:	0100                	addi	s0,sp,128
     6d4:	2a05                	jal	804 <ext_euclid+0x182>
    int ri_2[size]; // MX-ring poly, a
     6d6:	0200                	addi	s0,sp,256
     6d8:	0304                	addi	s1,sp,384
    int temp[size];
     6da:	06097f03          	0x6097f03
        ti_2[i] = 0;
     6de:	0100                	addi	s0,sp,128
     6e0:	3205                	jal	0 <__DYNAMIC>
     6e2:	0200                	addi	s0,sp,256
     6e4:	0304                	addi	s1,sp,384
    for (i = 0; i < size; ++i) {
     6e6:	02090103          	lb	sp,32(s2)
    array_equ(ri_2,polyR,size);
     6ea:	0100                	addi	s0,sp,128
     6ec:	2905                	jal	b1c <generate_keys+0x1ec>
     6ee:	0200                	addi	s0,sp,256
     6f0:	0304                	addi	s1,sp,384
    array_equ(ri_1,polyf,size);
     6f2:	04090003          	lb	zero,64(s2)
     6f6:	0100                	addi	s0,sp,128
     6f8:	2805                	jal	728 <ext_euclid+0xa6>
    ti_1[0] = 1;
     6fa:	0200                	addi	s0,sp,256
     6fc:	0304                	addi	s1,sp,384
     6fe:	0306                	slli	t1,t1,0x1
        for (i = N + 1; i < (2 * N + 2); ++i) {
     700:	097f                	0x97f
     702:	0002                	c.slli64	zero
     704:	0501                	addi	a0,a0,0
     706:	0020                	addi	s0,sp,8
        for (i = 0; i < N + 1; ++i) {
     708:	0402                	c.slli64	s0
     70a:	0301                	addi	t1,t1,0
        ti_2[i] = 0;
     70c:	0900                	addi	s0,sp,144
     70e:	0000                	unimp
     710:	0501                	addi	a0,a0,0
     712:	000d                	c.nop	3
        ti_1[i] = 0;
     714:	0402                	c.slli64	s0
        ti_2[i] = 0;
     716:	0601                	addi	a2,a2,0
     718:	00090003          	lb	zero,0(s2)
        ti_1[i] = 0;
     71c:	0100                	addi	s0,sp,128
    for (i = 0; i < size; ++i) {
     71e:	2505                	jal	d3e <ntru_deceypt+0x92>
     720:	0200                	addi	s0,sp,256
                ri_2[i] = ri_2[i] + mod;
     722:	0204                	addi	s1,sp,256
     724:	0306                	slli	t1,t1,0x1
            while (ri_2[i] < 0) {
     726:	097f                	0x97f
     728:	0004                	0x4
     72a:	0501                	addi	a0,a0,0
            ri_2[i] = ri_2[i] % mod;
     72c:	04020027          	0x4020027
        for (i = 0; i < N + 1; ++i) {
     730:	0602                	c.slli64	a2
            ri_2[i] = ri_2[i] % mod;
     732:	00090003          	lb	zero,0(s2)
        for (i = 0; i < N + 1; ++i) {
     736:	0100                	addi	s0,sp,128
     738:	0d05                	addi	s10,s10,1
     73a:	0200                	addi	s0,sp,256
     73c:	0304                	addi	s1,sp,384
     73e:	0306                	slli	t1,t1,0x1
     740:	090a                	slli	s2,s2,0x2
        for (i = 0; i < N + 1; ++i) {
     742:	0008                	0x8
     744:	0501                	addi	a0,a0,0
     746:	0025                	c.nop	9
        res = polydiv(ri_2, N + 1, ri_1, N + 1, mod);
     748:	0402                	c.slli64	s0
     74a:	00030603          	lb	a2,0(t1)
     74e:	0009                	c.nop	2
     750:	0100                	addi	s0,sp,128
     752:	2c05                	jal	982 <generate_keys+0x52>
        for (i = N + 1; i < (2 * N + 2); ++i) {
     754:	0200                	addi	s0,sp,256
     756:	0304                	addi	s1,sp,384
     758:	02097f03          	0x2097f03
     75c:	0100                	addi	s0,sp,128
     75e:	2505                	jal	d7e <reset_handler+0x6>
     760:	0200                	addi	s0,sp,256
        for (i = 0; i < N + 1; ++i) {
     762:	0304                	addi	s1,sp,384
     764:	04090103          	lb	sp,64(s2)
     768:	0100                	addi	s0,sp,128
     76a:	1805                	addi	a6,a6,-31
        for (i = 0; i < N + 1; ++i) {
     76c:	0200                	addi	s0,sp,256
     76e:	0304                	addi	s1,sp,384
     770:	04090003          	lb	zero,64(s2)
        res1 = polydiv(temp, N + 1, ri_1, N + 1, mod);
     774:	0100                	addi	s0,sp,128
     776:	2c05                	jal	9a6 <generate_keys+0x76>
     778:	0200                	addi	s0,sp,256
     77a:	0304                	addi	s1,sp,384
     77c:	0306                	slli	t1,t1,0x1
     77e:	097f                	0x97f
    array_equ(qi_1,res1,size);
     780:	0004                	0x4
     782:	0501                	addi	a0,a0,0
     784:	0014                	0x14
        for (i = 0; i < N + 1; ++i) {
     786:	0402                	c.slli64	s0
     788:	0301                	addi	t1,t1,0
     78a:	0900                	addi	s0,sp,144
     78c:	0000                	unimp
        res2 = polymult(qi_1, N + 1, ti_1, N + 1, mod, 0);
     78e:	0501                	addi	a0,a0,0
     790:	0009                	c.nop	2
     792:	0402                	c.slli64	s0
     794:	0601                	addi	a2,a2,0
     796:	00090003          	lb	zero,0(s2)
     79a:	0100                	addi	s0,sp,128
     79c:	1d05                	addi	s10,s10,-31
    array_equ(temp,res2,size);
     79e:	0200                	addi	s0,sp,256
     7a0:	0204                	addi	s1,sp,256
     7a2:	0306                	slli	t1,t1,0x1
        for (i = 0; i < N + 1; ++i) {
     7a4:	097f                	0x97f
     7a6:	0004                	0x4
     7a8:	0501                	addi	a0,a0,0
     7aa:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     7ae:	0809                	addi	a6,a6,2
     7b0:	0100                	addi	s0,sp,128
     7b2:	0d05                	addi	s10,s10,1
        for (i = 0; i < N + 1; ++i) {
     7b4:	0200                	addi	s0,sp,256
     7b6:	0304                	addi	s1,sp,384
     7b8:	0306                	slli	t1,t1,0x1
array_equ(ri_2,ri_1,size);
     7ba:	0908                	addi	a0,sp,144
     7bc:	0004                	0x4
     7be:	0501                	addi	a0,a0,0
     7c0:	0022                	c.slli	zero,0x8
array_equ(ri_1,ri,size);
     7c2:	0402                	c.slli64	s0
     7c4:	00030603          	lb	a2,0(t1)
     7c8:	0009                	c.nop	2
array_equ(ti_2,ti_1,size);
     7ca:	0100                	addi	s0,sp,128
     7cc:	1805                	addi	a6,a6,-31
     7ce:	0200                	addi	s0,sp,256
     7d0:	0304                	addi	s1,sp,384
     7d2:	04090003          	lb	zero,64(s2)
     7d6:	0100                	addi	s0,sp,128
array_equ(ti_1,ti,size);
     7d8:	2205                	jal	8f8 <ext_euclid+0x276>
     7da:	0200                	addi	s0,sp,256
     7dc:	0304                	addi	s1,sp,384
     7de:	02090003          	lb	zero,32(s2)
        for (i = 0; i < N + 1; ++i) {
     7e2:	0100                	addi	s0,sp,128
     7e4:	2005                	jal	804 <ext_euclid+0x182>
     7e6:	0200                	addi	s0,sp,256
    while (controlR != 0) {
     7e8:	0304                	addi	s1,sp,384
     7ea:	04097f03          	0x4097f03
            if (((ri_2[0] * j) % mod) == 1)
     7ee:	0100                	addi	s0,sp,128
        for (j = 0; j < mod; ++j) {
     7f0:	2205                	jal	910 <ext_euclid+0x28e>
     7f2:	0200                	addi	s0,sp,256
     7f4:	0304                	addi	s1,sp,384
     7f6:	02090103          	lb	sp,32(s2)
     7fa:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     7fc:	1805                	addi	a6,a6,-31
     7fe:	0200                	addi	s0,sp,256
    }
     800:	0304                	addi	s1,sp,384
     802:	06090003          	lb	zero,96(s2)
     806:	0100                	addi	s0,sp,128
     808:	2005                	jal	828 <ext_euclid+0x1a6>
     80a:	0200                	addi	s0,sp,256
     80c:	0304                	addi	s1,sp,384
     80e:	0306                	slli	t1,t1,0x1
     810:	097f                	0x97f
     812:	0006                	c.slli	zero,0x1
     814:	0501                	addi	a0,a0,0
     816:	0014                	0x14
     818:	0402                	c.slli64	s0
     81a:	0301                	addi	t1,t1,0
     81c:	0900                	addi	s0,sp,144
     81e:	0000                	unimp
     820:	0501                	addi	a0,a0,0
     822:	0009                	c.nop	2
     824:	0402                	c.slli64	s0
     826:	0601                	addi	a2,a2,0
     828:	00090003          	lb	zero,0(s2)
                ri_1[i] = ri_1[i] + mod;
     82c:	0100                	addi	s0,sp,128
            while (ri_1[i] < 0) {
     82e:	2805                	jal	85e <ext_euclid+0x1dc>
     830:	0200                	addi	s0,sp,256
     832:	0204                	addi	s1,sp,256
            ri_1[i] = ri_1[i] % mod;
     834:	0306                	slli	t1,t1,0x1
     836:	097f                	0x97f
        for (i = 0; i < N + 1; ++i) {
     838:	0004                	0x4
     83a:	0501                	addi	a0,a0,0
            ri_1[i] = ri_1[i] % mod;
     83c:	0103060f          	0x103060f
        for (i = 0; i < N + 1; ++i) {
     840:	0609                	addi	a2,a2,2
            ri[i - (N + 1)] = res[i];
     842:	0100                	addi	s0,sp,128
     844:	0905                	addi	s2,s2,1
     846:	0200                	addi	s0,sp,256
     848:	0304                	addi	s1,sp,384
        for (i = N + 1; i < (2 * N + 2); ++i) {
     84a:	0306                	slli	t1,t1,0x1
     84c:	00040907          	0x40907
            ri[i - (N + 1)] = res[i];
     850:	0501                	addi	a0,a0,0
        for (i = N + 1; i < (2 * N + 2); ++i) {
     852:	0021                	c.nop	8
            temp[i] = ri_2[i] - ri[i];
     854:	0402                	c.slli64	s0
     856:	00030603          	lb	a2,0(t1)
     85a:	0009                	c.nop	2
     85c:	0100                	addi	s0,sp,128
     85e:	2805                	jal	88e <ext_euclid+0x20c>
     860:	0200                	addi	s0,sp,256
     862:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     864:	02097f03          	0x2097f03
            temp[i] = ri_2[i] - ri[i];
     868:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     86a:	2105                	jal	c8a <ntru_encyrpt+0x66>
     86c:	0200                	addi	s0,sp,256
                temp[i] = temp[i] + mod;
     86e:	0304                	addi	s1,sp,384
     870:	04090103          	lb	sp,64(s2)
            while (temp[i] < 0) {
     874:	0100                	addi	s0,sp,128
     876:	1405                	addi	s0,s0,-31
            temp[i] = temp[i] % mod;
     878:	0200                	addi	s0,sp,256
     87a:	0304                	addi	s1,sp,384
        for (i = 0; i < N + 1; ++i) {
     87c:	04090003          	lb	zero,64(s2)
            temp[i] = temp[i] % mod;
     880:	0100                	addi	s0,sp,128
     882:	2805                	jal	8b2 <ext_euclid+0x230>
        for (i = 0; i < N + 1; ++i) {
     884:	0200                	addi	s0,sp,256
                qi_1[i] = qi_1[i] + mod;
     886:	0304                	addi	s1,sp,384
     888:	0306                	slli	t1,t1,0x1
            while (qi_1[i] < 0) {
     88a:	097f                	0x97f
     88c:	0004                	0x4
     88e:	0501                	addi	a0,a0,0
            qi_1[i] = qi_1[i] % mod;
     890:	0346                	slli	t1,t1,0x11
     892:	090a                	slli	s2,s2,0x2
        for (i = 0; i < N + 1; ++i) {
     894:	0002                	c.slli64	zero
     896:	0501                	addi	a0,a0,0
            qi_1[i] = qi_1[i] % mod;
     898:	0305                	addi	t1,t1,1
     89a:	0902                	c.slli64	s2
        for (i = 0; i < N + 1; ++i) {
     89c:	0000                	unimp
                temp[i] = temp[i] + mod;
     89e:	0501                	addi	a0,a0,0
     8a0:	0646                	slli	a2,a2,0x11
     8a2:	00097e03          	0x97e03
            while (temp[i] < 0) {
     8a6:	0100                	addi	s0,sp,128
     8a8:	1d05                	addi	s10,s10,-31
     8aa:	02090203          	lb	tp,32(s2)
            temp[i] = temp[i] % mod;
     8ae:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8b0:	4605                	li	a2,1
     8b2:	04097e03          	0x4097e03
            temp[i] = temp[i] % mod;
     8b6:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8b8:	0905                	addi	s2,s2,1
            ti[i] = ti_2[i] - temp[i];
     8ba:	0a090203          	lb	tp,160(s2)
     8be:	0100                	addi	s0,sp,128
     8c0:	4605                	li	a2,1
     8c2:	0c097e03          	0xc097e03
     8c6:	0100                	addi	s0,sp,128
     8c8:	0905                	addi	s2,s2,1
     8ca:	12090203          	lb	tp,288(s2)
     8ce:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8d0:	4605                	li	a2,1
            ti[i] = ti_2[i] - temp[i];
     8d2:	02097e03          	0x2097e03
        for (i = 0; i < N + 1; ++i) {
     8d6:	0100                	addi	s0,sp,128
     8d8:	0905                	addi	s2,s2,1
                ti[i] = ti[i] + mod;
     8da:	04090203          	lb	tp,64(s2)
            while (ti[i] < 0) {
     8de:	0100                	addi	s0,sp,128
     8e0:	4605                	li	a2,1
     8e2:	02097e03          	0x2097e03
            ti[i] = ti[i] % mod;
     8e6:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8e8:	0905                	addi	s2,s2,1
     8ea:	00090203          	lb	tp,0(s2)
            ti[i] = ti[i] % mod;
     8ee:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     8f0:	04090303          	lb	t1,64(s2)
              qi_1[i] = 0;
     8f4:	0100                	addi	s0,sp,128
     8f6:	08097d03          	0x8097d03
            controlR += ri[i];
     8fa:	0100                	addi	s0,sp,128
     8fc:	02090303          	lb	t1,32(s2)
              qi_1[i] = 0;
     900:	0100                	addi	s0,sp,128
        for (i = 0; i < N + 1; ++i) {
     902:	04090103          	lb	sp,64(s2)
     906:	0100                	addi	s0,sp,128
            if (((ri_2[0] * j) % mod) == 1)
     908:	06097f03          	0x6097f03
     90c:	0100                	addi	s0,sp,128
     90e:	02090103          	lb	sp,32(s2)
     912:	0100                	addi	s0,sp,128
     914:	4605                	li	a2,1
     916:	04097a03          	0x4097a03
        for (j = 0; j < mod; ++j) {
     91a:	0100                	addi	s0,sp,128
            ti_2[i] = (ti_2[i] * j) % mod;
     91c:	0905                	addi	s2,s2,1
        for (i = 0; i < N + 1; ++i) {
     91e:	04090203          	lb	tp,64(s2)
            ti_2[i] = (ti_2[i] * j) % mod;
     922:	0100                	addi	s0,sp,128
     924:	0505                	addi	a0,a0,1
     926:	0306                	slli	t1,t1,0x1
     928:	0901                	addi	s2,s2,0
     92a:	0004                	0x4
     92c:	0301                	addi	t1,t1,0
        for (i = 0; i < N + 1; ++i) {
     92e:	0901                	addi	s2,s2,0
int* generate_keys(int N, int p, int q){
     930:	0000                	unimp
     932:	0301                	addi	t1,t1,0
     934:	0901                	addi	s2,s2,0
     936:	0000                	unimp
     938:	0501                	addi	a0,a0,0
     93a:	0646                	slli	a2,a2,0x11
     93c:	00097b03          	0x97b03
     940:	0100                	addi	s0,sp,128
     942:	0905                	addi	s2,s2,1
     944:	02090503          	lb	a0,32(s2)
     948:	0100                	addi	s0,sp,128
     94a:	0505                	addi	a0,a0,1
     94c:	0306                	slli	t1,t1,0x1
     94e:	0901                	addi	s2,s2,0
     950:	0004                	0x4
     952:	0501                	addi	a0,a0,0
     954:	0609                	addi	a2,a2,2
     956:	00090003          	lb	zero,0(s2)
     95a:	0100                	addi	s0,sp,128
     95c:	0505                	addi	a0,a0,1
     95e:	0306                	slli	t1,t1,0x1
     960:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
     964:	0501                	addi	a0,a0,0
     966:	060c                	addi	a1,sp,768
     968:	04090003          	lb	zero,64(s2)
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     96c:	0100                	addi	s0,sp,128
     96e:	1905                	addi	s2,s2,-31
     970:	02090303          	lb	t1,32(s2)
     974:	0100                	addi	s0,sp,128
     976:	1105                	addi	sp,sp,-31
     978:	0200                	addi	s0,sp,256
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     97a:	0104                	addi	s1,sp,128
     97c:	0306                	slli	t1,t1,0x1
     97e:	097d                	addi	s2,s2,31
     980:	0008                	0x8
     982:	0501                	addi	a0,a0,0
    int f[55] = {-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1, -1, 0, 1, 0, -1, 0, 1, 1, 0, 0,  -1, 0, 1, 0, 0, 1, 1, 1,  -1, 0, 1, 0, 0, 1, 1, 1,    -1, 0, 1, 0, 0, 1, 1, 1};
     984:	0005                	c.nop	1
     986:	0402                	c.slli64	s0
     988:	0601                	addi	a2,a2,0
     98a:	00090003          	lb	zero,0(s2)
     98e:	0100                	addi	s0,sp,128
     990:	04090b03          	lb	s6,64(s2)
     994:	0100                	addi	s0,sp,128
     996:	0306                	slli	t1,t1,0x1
     998:	0900                	addi	s0,sp,144
     99a:	000a                	c.slli	zero,0x2
     99c:	0301                	addi	t1,t1,0
     99e:	0906                	slli	s2,s2,0x1
     9a0:	0002                	c.slli64	zero
     9a2:	0301                	addi	t1,t1,0
     9a4:	000c0903          	lb	s2,0(s8) # 19000 <_stack_start+0x9000>
     9a8:	0501                	addi	a0,a0,0
     9aa:	00030607          	0x30607
     9ae:	0009                	c.nop	2
     9b0:	0100                	addi	s0,sp,128
     9b2:	1d05                	addi	s10,s10,-31
     9b4:	0200                	addi	s0,sp,256
     9b6:	0104                	addi	s1,sp,128
     9b8:	0306                	slli	t1,t1,0x1
     9ba:	0908                	addi	a0,sp,144
     9bc:	0012                	c.slli	zero,0x4
     9be:	0501                	addi	a0,a0,0
     9c0:	0009                	c.nop	2
     9c2:	0402                	c.slli64	s0
     9c4:	0601                	addi	a2,a2,0
     9c6:	00090003          	lb	zero,0(s2)
     9ca:	0100                	addi	s0,sp,128
     9cc:	1405                	addi	s0,s0,-31
     9ce:	04090103          	lb	sp,64(s2)
     9d2:	0100                	addi	s0,sp,128
     9d4:	0d05                	addi	s10,s10,1
     9d6:	0200                	addi	s0,sp,256
     9d8:	0304                	addi	s1,sp,384
     9da:	0306                	slli	t1,t1,0x1
     9dc:	0965                	addi	s2,s2,25
     9de:	0004                	0x4
     9e0:	0501                	addi	a0,a0,0
     9e2:	0019                	c.nop	6
     9e4:	0402                	c.slli64	s0
     9e6:	01030603          	lb	a2,16(t1)
     9ea:	0009                	c.nop	2
     9ec:	0100                	addi	s0,sp,128
     9ee:	1805                	addi	a6,a6,-31
    int polyR[N+1];
     9f0:	0200                	addi	s0,sp,256
     9f2:	0304                	addi	s1,sp,384
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     9f4:	06097f03          	0x6097f03
    int polyR[N+1];
     9f8:	0100                	addi	s0,sp,128
     9fa:	0d05                	addi	s10,s10,1
     9fc:	0200                	addi	s0,sp,256
     9fe:	0304                	addi	s1,sp,384
     a00:	0306                	slli	t1,t1,0x1
     a02:	0901                	addi	s2,s2,0
    polyR[N] = 1;
     a04:	0004                	0x4
     a06:	0501                	addi	a0,a0,0
     a08:	0019                	c.nop	6
     a0a:	0402                	c.slli64	s0
     a0c:	00030603          	lb	a2,0(t1)
    int g[55] = {-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1, -1, 0, 1, 0, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0, 1, -1, 0, 1, 0, 1,   1, 0, 0, 1, -1, 0, 1, 0, 1};
     a10:	0009                	c.nop	2
     a12:	0100                	addi	s0,sp,128
     a14:	2c05                	jal	c44 <ntru_encyrpt+0x20>
     a16:	0200                	addi	s0,sp,256
     a18:	0304                	addi	s1,sp,384
     a1a:	0306                	slli	t1,t1,0x1
     a1c:	097e                	slli	s2,s2,0x1f
     a1e:	0004                	0x4
     a20:	0501                	addi	a0,a0,0
     a22:	0014                	0x14
     a24:	0402                	c.slli64	s0
     a26:	0301                	addi	t1,t1,0
     a28:	0900                	addi	s0,sp,144
     a2a:	0004                	0x4
     a2c:	0501                	addi	a0,a0,0
     a2e:	0009                	c.nop	2
     a30:	0402                	c.slli64	s0
     a32:	0601                	addi	a2,a2,0
     a34:	00090003          	lb	zero,0(s2)
     a38:	0100                	addi	s0,sp,128
     a3a:	1d05                	addi	s10,s10,-31
     a3c:	0200                	addi	s0,sp,256
     a3e:	0204                	addi	s1,sp,256
     a40:	0306                	slli	t1,t1,0x1
     a42:	097f                	0x97f
     a44:	0004                	0x4
     a46:	0501                	addi	a0,a0,0
     a48:	0103060f          	0x103060f
     a4c:	0809                	addi	a6,a6,2
     a4e:	0100                	addi	s0,sp,128
     a50:	1105                	addi	sp,sp,-31
     a52:	0200                	addi	s0,sp,256
     a54:	0304                	addi	s1,sp,384
     a56:	0306                	slli	t1,t1,0x1
     a58:	0916                	slli	s2,s2,0x5
     a5a:	0004                	0x4
     a5c:	0501                	addi	a0,a0,0
     a5e:	0025                	c.nop	9
     a60:	0402                	c.slli64	s0
     a62:	00030603          	lb	a2,0(t1)
     a66:	0409                	addi	s0,s0,2
     a68:	0100                	addi	s0,sp,128
     a6a:	2b05                	jal	f9a <main+0x2a>
     a6c:	0200                	addi	s0,sp,256
     a6e:	0304                	addi	s1,sp,384
     a70:	04090003          	lb	zero,64(s2)
    polyR[0] = -1;
     a74:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     a76:	2e05                	jal	da6 <reset_handler+0x2e>
     a78:	0200                	addi	s0,sp,256
     a7a:	0304                	addi	s1,sp,384
     a7c:	02090003          	lb	zero,32(s2)
    for (i = N; i < 55; ++i ){
     a80:	0100                	addi	s0,sp,128
     a82:	2a05                	jal	bb2 <generate_keys+0x282>
     a84:	0200                	addi	s0,sp,256
    for(i = 0; i < N; ++i){
     a86:	0304                	addi	s1,sp,384
        random_keys[i] = f[i];
     a88:	06097f03          	0x6097f03
     a8c:	0100                	addi	s0,sp,128
     a8e:	2e05                	jal	dbe <reset_handler+0x46>
    for(i = 0; i < N; ++i){
     a90:	0200                	addi	s0,sp,256
     a92:	0304                	addi	s1,sp,384
     a94:	02090103          	lb	sp,32(s2)
    for(i = N; i < (2*N); ++i){
     a98:	0100                	addi	s0,sp,128
     a9a:	2505                	jal	10ba <__DTOR_END__+0x2>
     a9c:	0200                	addi	s0,sp,256
     a9e:	0304                	addi	s1,sp,384
        random_keys[i] = g[i-N];
     aa0:	04090003          	lb	zero,64(s2)
     aa4:	0100                	addi	s0,sp,128
     aa6:	2805                	jal	ad6 <generate_keys+0x1a6>
    for(i = N; i < (2*N); ++i){
     aa8:	0200                	addi	s0,sp,256
     aaa:	0304                	addi	s1,sp,384
    for(i = (2*N); i < (3*N); ++i){
     aac:	0306                	slli	t1,t1,0x1
     aae:	097f                	0x97f
     ab0:	0002                	c.slli64	zero
    fp = ext_euclid(polyR, f, (N+1), p);
     ab2:	0501                	addi	a0,a0,0
     ab4:	0020                	addi	s0,sp,8
     ab6:	0402                	c.slli64	s0
     ab8:	0301                	addi	t1,t1,0
     aba:	0900                	addi	s0,sp,144
     abc:	0000                	unimp
    for(i = (2*N); i < (3*N); ++i){
     abe:	0501                	addi	a0,a0,0
        random_keys[i] = fp[i-(2*N)];
     ac0:	000d                	c.nop	3
     ac2:	0402                	c.slli64	s0
     ac4:	0601                	addi	a2,a2,0
     ac6:	00090003          	lb	zero,0(s2)
    for(i = (2*N); i < (3*N); ++i){
     aca:	0100                	addi	s0,sp,128
    fq = ext_euclid(polyR, f, (N+1), q);
     acc:	2505                	jal	10ec <__DTOR_END__+0x34>
     ace:	0200                	addi	s0,sp,256
     ad0:	0204                	addi	s1,sp,256
     ad2:	0306                	slli	t1,t1,0x1
     ad4:	097f                	0x97f
     ad6:	0004                	0x4
    for(i = (3*N); i < (4*N); ++i){
     ad8:	0501                	addi	a0,a0,0
     ada:	04020027          	0x4020027
     ade:	0602                	c.slli64	a2
        random_keys[i] = fq[i-(3*N)];
     ae0:	00090003          	lb	zero,0(s2)
     ae4:	0100                	addi	s0,sp,128
     ae6:	1d05                	addi	s10,s10,-31
    for(i = (3*N); i < (4*N); ++i){
     ae8:	0200                	addi	s0,sp,256
     aea:	0104                	addi	s1,sp,128
    fg = polymult2(fq, N, g, N, 0);
     aec:	0306                	slli	t1,t1,0x1
     aee:	0900                	addi	s0,sp,144
     af0:	0006                	c.slli	zero,0x1
     af2:	0501                	addi	a0,a0,0
     af4:	0009                	c.nop	2
     af6:	0402                	c.slli64	s0
    for(i = 0; i < (2*N-1); ++i){
     af8:	0601                	addi	a2,a2,0
     afa:	00090003          	lb	zero,0(s2)
     afe:	0100                	addi	s0,sp,128
     b00:	1405                	addi	s0,s0,-31
     b02:	04090803          	lb	a6,64(s2)
    pk = polydiv(fg, (2*N-1), polyR, (N+1), q);
     b06:	0100                	addi	s0,sp,128
     b08:	0905                	addi	s2,s2,1
     b0a:	02090a03          	lb	s4,32(s2)
    for(i = (4*N); i < (5*N); ++i){
     b0e:	0100                	addi	s0,sp,128
     b10:	0d05                	addi	s10,s10,1
     b12:	0200                	addi	s0,sp,256
     b14:	0104                	addi	s1,sp,128
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     b16:	0306                	slli	t1,t1,0x1
     b18:	097d                	addi	s2,s2,31
     b1a:	0008                	0x8
     b1c:	0501                	addi	a0,a0,0
    for(i = (4*N); i < (5*N); ++i){
     b1e:	0005                	c.nop	1
     b20:	0402                	c.slli64	s0
     b22:	0601                	addi	a2,a2,0
    for(i = (5*N); i < (6*N+1); ++i){
     b24:	00090003          	lb	zero,0(s2)
        random_keys[i] = polyR[i-(5*N)];
     b28:	0100                	addi	s0,sp,128
     b2a:	0306                	slli	t1,t1,0x1
     b2c:	00040907          	0x40907
    for(i = (5*N); i < (6*N+1); ++i){
     b30:	0301                	addi	t1,t1,0
     b32:	0902                	c.slli64	s2
     b34:	0000                	unimp
     b36:	0501                	addi	a0,a0,0
     b38:	0601                	addi	a2,a2,0
     b3a:	00090103          	lb	sp,0(s2)
}
     b3e:	0100                	addi	s0,sp,128
     b40:	1405                	addi	s0,s0,-31
     b42:	2a096803          	0x2a096803
     b46:	0100                	addi	s0,sp,128
     b48:	1105                	addi	sp,sp,-31
     b4a:	0200                	addi	s0,sp,256
     b4c:	0304                	addi	s1,sp,384
     b4e:	0306                	slli	t1,t1,0x1
     b50:	0908                	addi	a0,sp,144
     b52:	0004                	0x4
     b54:	0501                	addi	a0,a0,0
     b56:	0029                	c.nop	10
     b58:	0402                	c.slli64	s0
     b5a:	00030603          	lb	a2,0(t1)
     b5e:	0409                	addi	s0,s0,2
     b60:	0100                	addi	s0,sp,128
     b62:	2f05                	jal	1292 <_bss_start+0x56>
     b64:	0200                	addi	s0,sp,256
     b66:	0304                	addi	s1,sp,384
     b68:	04090003          	lb	zero,64(s2)
     b6c:	0100                	addi	s0,sp,128
     b6e:	3205                	jal	48e <polydiv+0x48>
     b70:	0200                	addi	s0,sp,256
     b72:	0304                	addi	s1,sp,384
     b74:	02090003          	lb	zero,32(s2)
     b78:	0100                	addi	s0,sp,128
     b7a:	2a05                	jal	caa <ntru_encyrpt+0x86>
        polyR[i] = 0;
     b7c:	0200                	addi	s0,sp,256
     b7e:	0304                	addi	s1,sp,384
     b80:	06097f03          	0x6097f03
     b84:	0100                	addi	s0,sp,128
    for(i = 1; i < N; ++i){
     b86:	3205                	jal	4a6 <polydiv+0x60>
     b88:	0200                	addi	s0,sp,256
        f[i] = 0;
     b8a:	0304                	addi	s1,sp,384
     b8c:	02090103          	lb	sp,32(s2)
     b90:	0100                	addi	s0,sp,128
     b92:	2905                	jal	fc2 <main+0x52>
     b94:	0200                	addi	s0,sp,256
     b96:	0304                	addi	s1,sp,384
        g[i] = 0;
     b98:	04090003          	lb	zero,64(s2)
     b9c:	0100                	addi	s0,sp,128
     b9e:	2805                	jal	bce <generate_keys+0x29e>
     ba0:	0200                	addi	s0,sp,256
    for (i = N; i < 55; ++i ){
     ba2:	0304                	addi	s1,sp,384
     ba4:	0306                	slli	t1,t1,0x1
        random_keys[i] = f[i];
     ba6:	097f                	0x97f
     ba8:	0002                	c.slli64	zero
     baa:	0501                	addi	a0,a0,0
     bac:	0020                	addi	s0,sp,8
     bae:	0402                	c.slli64	s0
     bb0:	0301                	addi	t1,t1,0
     bb2:	0900                	addi	s0,sp,144
     bb4:	0000                	unimp
    for(i = 0; i < N; ++i){
     bb6:	0501                	addi	a0,a0,0
        random_keys[i] = f[i];
     bb8:	000d                	c.nop	3
    for(i = 0; i < N; ++i){
     bba:	0402                	c.slli64	s0
        random_keys[i] = g[i-N];
     bbc:	0601                	addi	a2,a2,0
     bbe:	00090003          	lb	zero,0(s2)
     bc2:	0100                	addi	s0,sp,128
     bc4:	2505                	jal	11e4 <__DTOR_END__+0x12c>
    for(i = N; i < (2*N); ++i){
     bc6:	0200                	addi	s0,sp,256
     bc8:	0204                	addi	s1,sp,256
     bca:	0306                	slli	t1,t1,0x1
        random_keys[i] = fp[i-(2*N)];
     bcc:	097f                	0x97f
     bce:	0004                	0x4
     bd0:	0501                	addi	a0,a0,0
     bd2:	04020027          	0x4020027
    for(i = (2*N); i < (3*N); ++i){
     bd6:	0602                	c.slli64	a2
     bd8:	00090003          	lb	zero,0(s2)
        random_keys[i] = fq[i-(3*N)];
     bdc:	0100                	addi	s0,sp,128
     bde:	0905                	addi	s2,s2,1
     be0:	0200                	addi	s0,sp,256
     be2:	0304                	addi	s1,sp,384
     be4:	0306                	slli	t1,t1,0x1
     be6:	0008090b          	0x8090b
    for(i = (3*N); i < (4*N); ++i){
     bea:	0501                	addi	a0,a0,0
        random_keys[i] = fq[i-(3*N)];
     bec:	0016                	c.slli	zero,0x5
    for(i = (3*N); i < (4*N); ++i){
     bee:	0402                	c.slli64	s0
        fg[i] = fg[i]*p;
     bf0:	097d0303          	lb	t1,151(s10) # 18097 <_stack_start+0x8097>
    for(i = 0; i < (2*N-1); ++i){
     bf4:	0008                	0x8
        fg[i] = fg[i]*p;
     bf6:	0501                	addi	a0,a0,0
     bf8:	090c0343          	fmadd.s	ft6,fs8,fa6,ft1,rne
     bfc:	0006                	c.slli	zero,0x1
    for(i = 0; i < (2*N-1); ++i){
     bfe:	0501                	addi	a0,a0,0
        random_keys[i] = pk[i-(4*N)+(2*N-1)];
     c00:	0305                	addi	t1,t1,1
     c02:	0902                	c.slli64	s2
     c04:	0000                	unimp
     c06:	0301                	addi	t1,t1,0
     c08:	0901                	addi	s2,s2,0
     c0a:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
     c0c:	0301                	addi	t1,t1,0
     c0e:	0902                	c.slli64	s2
        random_keys[i] = polyR[i-(5*N)];
     c10:	0000                	unimp
     c12:	0501                	addi	a0,a0,0
     c14:	0609                	addi	a2,a2,2
     c16:	00090003          	lb	zero,0(s2)
     c1a:	0100                	addi	s0,sp,128
     c1c:	4305                	li	t1,1
    for(i = (5*N); i < (6*N+1); ++i){
     c1e:	04097b03          	0x4097b03
     c22:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c24:	0905                	addi	s2,s2,1
     c26:	02090503          	lb	a0,32(s2)
     c2a:	0100                	addi	s0,sp,128
     c2c:	4305                	li	t1,1
     c2e:	02097b03          	0x2097b03
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c32:	0100                	addi	s0,sp,128
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c34:	0905                	addi	s2,s2,1
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c36:	18090503          	lb	a0,384(s2)
     c3a:	0100                	addi	s0,sp,128
     c3c:	4305                	li	t1,1
     c3e:	02097b03          	0x2097b03
int* ntru_encyrpt(int N, int q, int* message, int* public_key, int* polyR){
     c42:	0100                	addi	s0,sp,128
     c44:	0905                	addi	s2,s2,1
     c46:	04090503          	lb	a0,64(s2)
    int random_val[48] = { 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, -1, 1, -1, 1, 0,1, 1, 0, 1, -1, 1, -1, 0, 1, -1, 0, 1, -1, 1, -1, 0,1, 1, 0, -1, 1, -1, 1, 0};
     c4a:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c4c:	06090103          	lb	sp,96(s2)
     c50:	0100                	addi	s0,sp,128
     c52:	06090203          	lb	tp,96(s2)
     c56:	0100                	addi	s0,sp,128
     c58:	04090103          	lb	sp,64(s2)
     c5c:	0100                	addi	s0,sp,128
array_add(temp,message,48);
     c5e:	06097f03          	0x6097f03
     c62:	0100                	addi	s0,sp,128
    temp = polymult(public_key,N,random_val,48,q,0);
     c64:	02090103          	lb	sp,32(s2)
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c68:	0100                	addi	s0,sp,128
array_add(temp,message,48);
     c6a:	4305                	li	t1,1
     c6c:	06097703          	0x6097703
    CT = polydiv(temp,(2*N),polyR,(N+1),q);
     c70:	0100                	addi	s0,sp,128
     c72:	0905                	addi	s2,s2,1
     c74:	04090503          	lb	a0,64(s2)
     c78:	0100                	addi	s0,sp,128
     c7a:	0505                	addi	a0,a0,1
     c7c:	0306                	slli	t1,t1,0x1
    for(i = (2*N); i < (3*N); ++i){
     c7e:	0901                	addi	s2,s2,0
     c80:	0004                	0x4
     c82:	0301                	addi	t1,t1,0
     c84:	0901                	addi	s2,s2,0
     c86:	0000                	unimp
     c88:	0301                	addi	t1,t1,0
}
     c8a:	0901                	addi	s2,s2,0
     c8c:	0000                	unimp
     c8e:	0301                	addi	t1,t1,0
     c90:	0901                	addi	s2,s2,0
     c92:	0000                	unimp
     c94:	0601                	addi	a2,a2,0
     c96:	00090203          	lb	tp,0(s2)
        CT[i-(2*N)] = CT[i];
     c9a:	0100                	addi	s0,sp,128
     c9c:	4305                	li	t1,1
     c9e:	06097503          	0x6097503
    for(i = (2*N); i < (3*N); ++i){
     ca2:	0100                	addi	s0,sp,128
     ca4:	0905                	addi	s2,s2,1
        CT[i-(2*N)] = CT[i];
     ca6:	04090903          	lb	s2,64(s2)
    for(i = (2*N); i < (3*N); ++i){
     caa:	0100                	addi	s0,sp,128
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cac:	0505                	addi	a0,a0,1
     cae:	04090203          	lb	tp,64(s2)
     cb2:	0100                	addi	s0,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     cb4:	0905                	addi	s2,s2,1
     cb6:	02097e03          	0x2097e03
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cba:	0100                	addi	s0,sp,128
     cbc:	0505                	addi	a0,a0,1
     cbe:	0306                	slli	t1,t1,0x1
     cc0:	0902                	c.slli64	s2
     cc2:	0002                	c.slli64	zero
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cc4:	0301                	addi	t1,t1,0
     cc6:	0902                	c.slli64	s2
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cc8:	0000                	unimp
     cca:	0501                	addi	a0,a0,0
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     ccc:	060c                	addi	a1,sp,768
     cce:	04090003          	lb	zero,64(s2)
int* ntru_deceypt(int N, int p, int q, int* secret_key_f, int* secret_key_fp, int* Enc_Message, int* polyR){
     cd2:	0100                	addi	s0,sp,128
     cd4:	1105                	addi	sp,sp,-31
     cd6:	0200                	addi	s0,sp,256
     cd8:	0104                	addi	s1,sp,128
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     cda:	0306                	slli	t1,t1,0x1
     cdc:	0900                	addi	s0,sp,144
    a = polymult2(secret_key_f,N,Enc_Message,N,0);
     cde:	0002                	c.slli64	zero
     ce0:	0501                	addi	a0,a0,0
    a2 = polydiv(a,(2*N),polyR,(N+1),q);
     ce2:	0005                	c.nop	1
     ce4:	0402                	c.slli64	s0
     ce6:	0601                	addi	a2,a2,0
     ce8:	00090003          	lb	zero,0(s2)
     cec:	0100                	addi	s0,sp,128
     cee:	0306                	slli	t1,t1,0x1
     cf0:	00040907          	0x40907
    for(i = (2*N); i < ((2*N)+N); ++i){
     cf4:	0301                	addi	t1,t1,0
     cf6:	0902                	c.slli64	s2
     cf8:	0008                	0x8
     cfa:	0501                	addi	a0,a0,0
     cfc:	060c                	addi	a1,sp,768
        if(a2[i] <= q/2)
     cfe:	02090003          	lb	zero,32(s2)
     d02:	0100                	addi	s0,sp,128
    for (i = 0; i < N; ++i){
     d04:	1105                	addi	sp,sp,-31
     d06:	0200                	addi	s0,sp,256
     d08:	0104                	addi	s1,sp,128
    c = polymult2(secret_key_fp,N,a2,N,0);
     d0a:	0306                	slli	t1,t1,0x1
     d0c:	0900                	addi	s0,sp,144
     d0e:	0002                	c.slli64	zero
     d10:	0501                	addi	a0,a0,0
     d12:	0005                	c.nop	1
     d14:	0402                	c.slli64	s0
    c2 = polydiv(c,(2*N),polyR,(N+1),p);
     d16:	0601                	addi	a2,a2,0
     d18:	00090003          	lb	zero,0(s2)
     d1c:	0100                	addi	s0,sp,128
     d1e:	0c05                	addi	s8,s8,1
     d20:	04090a03          	lb	s4,64(s2)
    for(i = (2*N); i < ((2*N)+N); ++i){
     d24:	0100                	addi	s0,sp,128
     d26:	1105                	addi	sp,sp,-31
}
     d28:	0200                	addi	s0,sp,256
     d2a:	0104                	addi	s1,sp,128
     d2c:	0306                	slli	t1,t1,0x1
     d2e:	0900                	addi	s0,sp,144
     d30:	0002                	c.slli64	zero
     d32:	0501                	addi	a0,a0,0
     d34:	0005                	c.nop	1
     d36:	0402                	c.slli64	s0
     d38:	0601                	addi	a2,a2,0
     d3a:	00090003          	lb	zero,0(s2)
        a2[i-(2*N)] = a2[i];
     d3e:	0100                	addi	s0,sp,128
     d40:	1805                	addi	a6,a6,-31
     d42:	0200                	addi	s0,sp,256
     d44:	0104                	addi	s1,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d46:	0306                	slli	t1,t1,0x1
     d48:	0906                	slli	s2,s2,0x1
        a2[i-(2*N)] = a2[i];
     d4a:	0004                	0x4
     d4c:	0501                	addi	a0,a0,0
    for(i = (2*N); i < ((2*N)+N); ++i){
     d4e:	0005                	c.nop	1
        if(a2[i] <= q/2)
     d50:	0402                	c.slli64	s0
     d52:	0601                	addi	a2,a2,0
     d54:	08090003          	lb	zero,128(s2)
            a2[i] = (-1)*(q-a2[i]);
     d58:	0100                	addi	s0,sp,128
     d5a:	0c05                	addi	s8,s8,1
    for (i = 0; i < N; ++i){
     d5c:	0200                	addi	s0,sp,256
     d5e:	0104                	addi	s1,sp,128
     d60:	04097a03          	0x4097a03
        c2[i-(2*N)] = c2[i];
     d64:	0100                	addi	s0,sp,128
     d66:	0200                	addi	s0,sp,256
     d68:	0104                	addi	s1,sp,128
    for(i = (2*N); i < ((2*N)+N); ++i){
     d6a:	04090f03          	lb	t5,64(s2)
        c2[i-(2*N)] = c2[i];
     d6e:	0100                	addi	s0,sp,128
     d70:	1105                	addi	sp,sp,-31
    for(i = (2*N); i < ((2*N)+N); ++i){
     d72:	0200                	addi	s0,sp,256
  jal x0, default_exc_handler
     d74:	0104                	addi	s1,sp,128
     d76:	0306                	slli	t1,t1,0x1
  mv  x1, x0
     d78:	097f                	0x97f
     d7a:	0002                	c.slli64	zero
  mv  x2, x1
     d7c:	0501                	addi	a0,a0,0
  mv  x3, x1
     d7e:	0005                	c.nop	1
  mv  x4, x1
     d80:	0402                	c.slli64	s0
  mv  x5, x1
     d82:	0601                	addi	a2,a2,0
  mv  x6, x1
     d84:	00090003          	lb	zero,0(s2)
  mv  x8, x1
     d88:	0100                	addi	s0,sp,128
  mv  x9, x1
     d8a:	0d05                	addi	s10,s10,1
  mv x10, x1
     d8c:	0306                	slli	t1,t1,0x1
  mv x11, x1
     d8e:	0961                	addi	s2,s2,24
  mv x12, x1
     d90:	0008                	0x8
  mv x13, x1
     d92:	0501                	addi	a0,a0,0
  mv x14, x1
     d94:	00030627          	0x30627
  mv x16, x1
     d98:	0009                	c.nop	2
  mv x17, x1
     d9a:	0100                	addi	s0,sp,128
  mv x18, x1
     d9c:	1905                	addi	s2,s2,-31
  mv x19, x1
     d9e:	02090003          	lb	zero,32(s2)
  mv x21, x1
     da2:	0100                	addi	s0,sp,128
  mv x22, x1
     da4:	0f05                	addi	t5,t5,1
  mv x23, x1
     da6:	0306                	slli	t1,t1,0x1
  mv x24, x1
     da8:	097f                	0x97f
  mv x25, x1
     daa:	0002                	c.slli64	zero
  mv x26, x1
     dac:	0501                	addi	a0,a0,0
  mv x27, x1
     dae:	0618                	addi	a4,sp,768
  mv x28, x1
     db0:	00090003          	lb	zero,0(s2)
  mv x30, x1
     db4:	0100                	addi	s0,sp,128
  mv x31, x1
     db6:	0f05                	addi	t5,t5,1
  la   x2, _stack_start
     db8:	02090003          	lb	zero,32(s2)
     dbc:	0100                	addi	s0,sp,128
     dbe:	0905                	addi	s2,s2,1
  la x26, _bss_start
     dc0:	0200                	addi	s0,sp,256
     dc2:	0204                	addi	s1,sp,256
     dc4:	0306                	slli	t1,t1,0x1
     dc6:	00040903          	lb	s2,0(s0)
  la x27, _bss_end
     dca:	0501                	addi	a0,a0,0
     dcc:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
  bge x26, x27, zero_loop_end
     dd0:	0602                	c.slli64	a2
     dd2:	00090003          	lb	zero,0(s2)
  sw x0, 0(x26)
     dd6:	0100                	addi	s0,sp,128
  addi x26, x26, 4
     dd8:	1d05                	addi	s10,s10,-31
  ble x26, x27, zero_loop
     dda:	0200                	addi	s0,sp,256
     ddc:	0204                	addi	s1,sp,256
  addi x10, x0, 0
     dde:	04097c03          	0x4097c03
  addi x11, x0, 0
     de2:	0100                	addi	s0,sp,128
     de4:	1505                	addi	a0,a0,-31
  jal x1, main
     de6:	0200                	addi	s0,sp,256
     de8:	0204                	addi	s1,sp,256
     dea:	04090403          	lb	s0,64(s2)
     dee:	0100                	addi	s0,sp,128
     df0:	1d05                	addi	s10,s10,-31
     df2:	0200                	addi	s0,sp,256
     df4:	0204                	addi	s1,sp,256
     df6:	0306                	slli	t1,t1,0x1
     df8:	097c                	addi	a5,sp,156
     dfa:	0004                	0x4
     dfc:	0501                	addi	a0,a0,0
     dfe:	030d                	addi	t1,t1,3
     e00:	0002090b          	0x2090b
     e04:	0501                	addi	a0,a0,0
     e06:	0003062b          	0x3062b
     e0a:	0009                	c.nop	2
     e0c:	0100                	addi	s0,sp,128
     e0e:	1b05                	addi	s6,s6,-31
     e10:	02090003          	lb	zero,32(s2)
     e14:	0100                	addi	s0,sp,128
     e16:	0f05                	addi	t5,t5,1
     e18:	0306                	slli	t1,t1,0x1
     e1a:	097f                	0x97f
     e1c:	0002                	c.slli64	zero
     e1e:	0501                	addi	a0,a0,0
     e20:	061a                	slli	a2,a2,0x6
     e22:	00090003          	lb	zero,0(s2)
     e26:	0100                	addi	s0,sp,128
     e28:	0f05                	addi	t5,t5,1
     e2a:	02090003          	lb	zero,32(s2)
     e2e:	0100                	addi	s0,sp,128
     e30:	0905                	addi	s2,s2,1
     e32:	0200                	addi	s0,sp,256
     e34:	0204                	addi	s1,sp,256
     e36:	0306                	slli	t1,t1,0x1
     e38:	00040903          	lb	s2,0(s0)
     e3c:	0501                	addi	a0,a0,0
     e3e:	04020027          	0x4020027
     e42:	0602                	c.slli64	a2
     e44:	00090003          	lb	zero,0(s2)
     e48:	0100                	addi	s0,sp,128
     e4a:	1d05                	addi	s10,s10,-31
     e4c:	0200                	addi	s0,sp,256
     e4e:	0204                	addi	s1,sp,256
     e50:	04097c03          	0x4097c03
     e54:	0100                	addi	s0,sp,128
     e56:	1705                	addi	a4,a4,-31
     e58:	0200                	addi	s0,sp,256
     e5a:	0204                	addi	s1,sp,256
     e5c:	04090403          	lb	s0,64(s2)
     e60:	0100                	addi	s0,sp,128
     e62:	1d05                	addi	s10,s10,-31
     e64:	0200                	addi	s0,sp,256
     e66:	0204                	addi	s1,sp,256
     e68:	0306                	slli	t1,t1,0x1
     e6a:	097c                	addi	a5,sp,156
     e6c:	0004                	0x4
     e6e:	0501                	addi	a0,a0,0
     e70:	0009                	c.nop	2
     e72:	0402                	c.slli64	s0
     e74:	090b0303          	lb	t1,144(s6)
     e78:	0002                	c.slli64	zero
     e7a:	0501                	addi	a0,a0,0
     e7c:	000e                	c.slli	zero,0x3
     e7e:	0402                	c.slli64	s0
     e80:	00030603          	lb	a2,0(t1)
     e84:	0409                	addi	s0,s0,2
     e86:	0100                	addi	s0,sp,128
     e88:	0200                	addi	s0,sp,256
     e8a:	0304                	addi	s1,sp,384
     e8c:	04090103          	lb	sp,64(s2)
     e90:	0100                	addi	s0,sp,128
     e92:	0200                	addi	s0,sp,256
     e94:	0304                	addi	s1,sp,384
     e96:	02097f03          	0x2097f03
     e9a:	0100                	addi	s0,sp,128
     e9c:	0905                	addi	s2,s2,1
     e9e:	0200                	addi	s0,sp,256
     ea0:	0304                	addi	s1,sp,384
     ea2:	0306                	slli	t1,t1,0x1
     ea4:	0901                	addi	s2,s2,0
     ea6:	0004                	0x4
     ea8:	0501                	addi	a0,a0,0
     eaa:	000e                	c.slli	zero,0x3
     eac:	0402                	c.slli64	s0
     eae:	00030603          	lb	a2,0(t1)
     eb2:	0009                	c.nop	2
     eb4:	0100                	addi	s0,sp,128
     eb6:	1d05                	addi	s10,s10,-31
     eb8:	0200                	addi	s0,sp,256
     eba:	0304                	addi	s1,sp,384
     ebc:	0306                	slli	t1,t1,0x1
     ebe:	097e                	slli	s2,s2,0x1f
     ec0:	0004                	0x4
     ec2:	0501                	addi	a0,a0,0
     ec4:	0309                	addi	t1,t1,2
     ec6:	00040907          	0x40907
     eca:	0501                	addi	a0,a0,0
     ecc:	0003060b          	0x3060b
     ed0:	0009                	c.nop	2
     ed2:	0100                	addi	s0,sp,128
     ed4:	2005                	jal	ef4 <memset+0x2c>
     ed6:	0200                	addi	s0,sp,256
     ed8:	0204                	addi	s1,sp,256
     eda:	0306                	slli	t1,t1,0x1
     edc:	097f                	0x97f
     ede:	0002                	c.slli64	zero
     ee0:	0501                	addi	a0,a0,0
     ee2:	0022                	c.slli	zero,0x8
     ee4:	0402                	c.slli64	s0
     ee6:	0602                	c.slli64	a2
     ee8:	00090003          	lb	zero,0(s2)
     eec:	0100                	addi	s0,sp,128
     eee:	0905                	addi	s2,s2,1
     ef0:	0306                	slli	t1,t1,0x1
     ef2:	0909                	addi	s2,s2,2
     ef4:	0004                	0x4
     ef6:	0501                	addi	a0,a0,0
     ef8:	0615                	addi	a2,a2,5
     efa:	00090003          	lb	zero,0(s2)
     efe:	0100                	addi	s0,sp,128
     f00:	0c05                	addi	s8,s8,1
     f02:	06090003          	lb	zero,96(s2)
     f06:	0100                	addi	s0,sp,128
     f08:	1a05                	addi	s4,s4,-31
     f0a:	0200                	addi	s0,sp,256
     f0c:	0204                	addi	s1,sp,256
     f0e:	0306                	slli	t1,t1,0x1
     f10:	097f                	0x97f
     f12:	0004                	0x4
     f14:	0501                	addi	a0,a0,0
     f16:	0309                	addi	t1,t1,2
     f18:	00040907          	0x40907
     f1c:	0501                	addi	a0,a0,0
     f1e:	0003060b          	0x3060b
     f22:	0009                	c.nop	2
     f24:	0100                	addi	s0,sp,128
     f26:	2005                	jal	f46 <memset+0x7e>
     f28:	0200                	addi	s0,sp,256
     f2a:	0204                	addi	s1,sp,256
     f2c:	0306                	slli	t1,t1,0x1
     f2e:	097f                	0x97f
     f30:	0002                	c.slli64	zero
     f32:	0501                	addi	a0,a0,0
     f34:	0022                	c.slli	zero,0x8
     f36:	0402                	c.slli64	s0
     f38:	0602                	c.slli64	a2
     f3a:	00090003          	lb	zero,0(s2)
     f3e:	0100                	addi	s0,sp,128
     f40:	1805                	addi	a6,a6,-31
     f42:	0200                	addi	s0,sp,256
     f44:	0104                	addi	s1,sp,128
     f46:	0306                	slli	t1,t1,0x1
     f48:	0900                	addi	s0,sp,144
     f4a:	0002                	c.slli64	zero
     f4c:	0501                	addi	a0,a0,0
     f4e:	0005                	c.nop	1
     f50:	0402                	c.slli64	s0
     f52:	0601                	addi	a2,a2,0
     f54:	08090003          	lb	zero,128(s2)
     f58:	0100                	addi	s0,sp,128
     f5a:	0b05                	addi	s6,s6,1
     f5c:	0306                	slli	t1,t1,0x1
     f5e:	090c                	addi	a1,sp,144
     f60:	0004                	0x4
     f62:	0501                	addi	a0,a0,0
     f64:	0305                	addi	t1,t1,1
     f66:	0004093f 09020301 	0x90203010004093f
     f6e:	000e                	c.slli	zero,0x3
int main(){
     f70:	0501                	addi	a0,a0,0
     f72:	0003061b          	0x3061b
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f76:	0009                	c.nop	2
     f78:	0100                	addi	s0,sp,128
     f7a:	1305                	addi	t1,t1,-31
     f7c:	04090103          	lb	sp,64(s2)
     f80:	0100                	addi	s0,sp,128
int main(){
     f82:	1505                	addi	a0,a0,-31
     f84:	0200                	addi	s0,sp,256
     f86:	0104                	addi	s1,sp,128
     f88:	0306                	slli	t1,t1,0x1
     f8a:	097f                	0x97f
     f8c:	0008                	0x8
     f8e:	0501                	addi	a0,a0,0
     f90:	0005                	c.nop	1
    resultkon[0] = 0xaaaaaaa0;
     f92:	0402                	c.slli64	s0
     f94:	0601                	addi	a2,a2,0
    int message[48] = {1, 1, 2, 1, 1, 1, 1, 2,1, 1, 0, 1, 1, 2, 1, 0,1, 2, 0, 1, 1, 1, 1, 0,1, 1, 0, 2, 1, 2, 1, 0, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2};
     f96:	00090003          	lb	zero,0(s2)
    resultkon[0] = 0xaaaaaaa0;
     f9a:	0100                	addi	s0,sp,128
     f9c:	0306                	slli	t1,t1,0x1
     f9e:	0904                	addi	s1,sp,144
     fa0:	0004                	0x4
     fa2:	0301                	addi	t1,t1,0
    keys = generate_keys(N, p, q);
     fa4:	0902                	c.slli64	s2
     fa6:	0000                	unimp
     fa8:	0501                	addi	a0,a0,0
     faa:	0601                	addi	a2,a2,0
     fac:	00090103          	lb	sp,0(s2)
    resultkon[0] = 0xaaaaaaa1;
     fb0:	0100                	addi	s0,sp,128
     fb2:	0905                	addi	s2,s2,1
    keys = generate_keys(N, p, q);
     fb4:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xaaaaaaa1;
     fb6:	2a097fbb          	0x2a097fbb
    for(i = 0; i < N; ++i){
     fba:	0100                	addi	s0,sp,128
     fbc:	1605                	addi	a2,a2,-31
        secret_key_f[i] = keys[i];
     fbe:	0306                	slli	t1,t1,0x1
     fc0:	0900                	addi	s0,sp,144
     fc2:	0000                	unimp
     fc4:	0501                	addi	a0,a0,0
     fc6:	030d                	addi	t1,t1,3
     fc8:	0900                	addi	s0,sp,144
    for(i = 0; i < N; ++i){
     fca:	0004                	0x4
     fcc:	0501                	addi	a0,a0,0
     fce:	09000313          	li	t1,144
    for(i = N; i < (2*N); ++i){
     fd2:	0004                	0x4
     fd4:	0501                	addi	a0,a0,0
     fd6:	0609                	addi	a2,a2,2
     fd8:	06090203          	lb	tp,96(s2)
        secret_key_fp[i-(2*N)] = keys[i];
     fdc:	0100                	addi	s0,sp,128
     fde:	1005                	c.nop	-31
     fe0:	0306                	slli	t1,t1,0x1
     fe2:	0900                	addi	s0,sp,144
     fe4:	0002                	c.slli64	zero
    for(i = (2*N); i < (3*N); ++i){
     fe6:	0501                	addi	a0,a0,0
     fe8:	0015                	c.nop	5
    for(i = (3*N); i < (4*N); ++i){
     fea:	0402                	c.slli64	s0
     fec:	0601                	addi	a2,a2,0
     fee:	02090003          	lb	zero,32(s2)
     ff2:	0100                	addi	s0,sp,128
     ff4:	0905                	addi	s2,s2,1
        public_key[i-(4*N)] = keys[i];
     ff6:	0200                	addi	s0,sp,256
     ff8:	0104                	addi	s1,sp,128
     ffa:	0306                	slli	t1,t1,0x1
     ffc:	0900                	addi	s0,sp,144
     ffe:	0000                	unimp
    for(i = (4*N); i < (5*N); ++i){
    1000:	0601                	addi	a2,a2,0
    1002:	04090703          	lb	a4,64(s2)
    1006:	0100                	addi	s0,sp,128
    1008:	1305                	addi	t1,t1,-31
    100a:	0306                	slli	t1,t1,0x1
        ring_poly[i-(5*N)] = keys[i];
    100c:	0900                	addi	s0,sp,144
    100e:	0000                	unimp
    1010:	0501                	addi	a0,a0,0
    1012:	0609                	addi	a2,a2,2
    1014:	0e090303          	lb	t1,224(s2)
    for(i = (5*N); i < (6*N+1); ++i){
    1018:	0100                	addi	s0,sp,128
    resultkon[0] = 0xbbbbbbb0;
    101a:	1005                	c.nop	-31
    101c:	0306                	slli	t1,t1,0x1
    101e:	0900                	addi	s0,sp,144
    1020:	0002                	c.slli64	zero
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1022:	0501                	addi	a0,a0,0
    1024:	0015                	c.nop	5
    1026:	0402                	c.slli64	s0
    1028:	0601                	addi	a2,a2,0
    resultkon[0] = 0xbbbbbbb1;
    102a:	02090003          	lb	zero,32(s2)
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    102e:	0100                	addi	s0,sp,128
    1030:	0905                	addi	s2,s2,1
    resultkon[0] = 0xbbbbbbb0;
    1032:	0200                	addi	s0,sp,256
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1034:	0104                	addi	s1,sp,128
    resultkon[0] = 0xbbbbbbb1;
    1036:	0306                	slli	t1,t1,0x1
    resultkon[0] = 0xccccccc0;
    1038:	0900                	addi	s0,sp,144
    103a:	0000                	unimp
    103c:	0501                	addi	a0,a0,0
    103e:	0310                	addi	a2,sp,384
    Enc_Message = ntru_encyrpt(N, q, message, public_key, ring_poly);
    1040:	0908                	addi	a0,sp,144
    resultkon[0] = 0xccccccc0;
    1042:	0006                	c.slli	zero,0x1
    Dec_Message = ntru_deceypt(N, p, q, secret_key_f, secret_key_fp, Enc_Message, ring_poly);
    1044:	0501                	addi	a0,a0,0
    1046:	0015                	c.nop	5
    1048:	0402                	c.slli64	s0
    104a:	0601                	addi	a2,a2,0
    104c:	02090003          	lb	zero,32(s2)
    1050:	0100                	addi	s0,sp,128
    1052:	0905                	addi	s2,s2,1
    1054:	0200                	addi	s0,sp,256
    1056:	0104                	addi	s1,sp,128
    resultkon[0] = 0xccccccc1;	
    1058:	0306                	slli	t1,t1,0x1
    105a:	0900                	addi	s0,sp,144
            resultkon[0] = 0xDEDEDEDE;
    105c:	0000                	unimp
    105e:	0501                	addi	a0,a0,0
    resultkon[0] = 0xccccccc1;	
    1060:	0310                	addi	a2,sp,384
    1062:	0906                	slli	s2,s2,0x1
            resultkon[0] = 0xDEDEDEDE;
    1064:	0006                	c.slli	zero,0x1
    1066:	0501                	addi	a0,a0,0
    for(i = 0; i < 32; ++i){
    1068:	0015                	c.nop	5
    106a:	0402                	c.slli64	s0
        if(!(message[i] == Dec_Message[i])){
    106c:	0601                	addi	a2,a2,0
    106e:	02090003          	lb	zero,32(s2)
    1072:	0100                	addi	s0,sp,128
    1074:	0905                	addi	s2,s2,1
    1076:	0200                	addi	s0,sp,256
    1078:	0104                	addi	s1,sp,128
    107a:	0306                	slli	t1,t1,0x1
            resultkon[0] = 0xBABABABA;
    107c:	0900                	addi	s0,sp,144
    107e:	0000                	unimp
    1080:	0501                	addi	a0,a0,0
    1082:	0605                	addi	a2,a2,1
    1084:	04090803          	lb	a6,64(s2)
}
    1088:	0100                	addi	s0,sp,128
    108a:	0905                	addi	s2,s2,1
    108c:	08090103          	lb	sp,128(s2)
    1090:	0100                	addi	s0,sp,128
    1092:	0f05                	addi	t5,t5,1
    1094:	0306                	slli	t1,t1,0x1
    1096:	0900                	addi	s0,sp,144
    1098:	0002                	c.slli64	zero
    109a:	0501                	addi	a0,a0,0
    109c:	0014                	0x14
            resultkon[0] = 0xDEDEDEDE;
    109e:	0402                	c.slli64	s0
    for(i = 0; i < 32; ++i){
    10a0:	0601                	addi	a2,a2,0
    10a2:	02090003          	lb	zero,32(s2)
    10a6:	0100                	addi	s0,sp,128
    10a8:	0905                	addi	s2,s2,1
    10aa:	0200                	addi	s0,sp,256
    10ac:	0104                	addi	s1,sp,128
    10ae:	0306                	slli	t1,t1,0x1
    10b0:	0900                	addi	s0,sp,144
    10b2:	0000                	unimp
    10b4:	0501                	addi	a0,a0,0
    10b6:	0310                	addi	a2,sp,384
    10b8:	00040907          	0x40907
    10bc:	0501                	addi	a0,a0,0
    10be:	001c                	0x1c
    10c0:	0402                	c.slli64	s0
    10c2:	0601                	addi	a2,a2,0
    10c4:	02090003          	lb	zero,32(s2)
    10c8:	0100                	addi	s0,sp,128
    10ca:	0905                	addi	s2,s2,1
    10cc:	0200                	addi	s0,sp,256
    10ce:	0104                	addi	s1,sp,128
    10d0:	0306                	slli	t1,t1,0x1
    10d2:	0900                	addi	s0,sp,144
    10d4:	0008                	0x8
    10d6:	0501                	addi	a0,a0,0
    10d8:	000d                	c.nop	3
    10da:	0402                	c.slli64	s0
    10dc:	59030603          	lb	a2,1424(t1)
    10e0:	0809                	addi	a6,a6,2
    10e2:	0100                	addi	s0,sp,128
    10e4:	1905                	addi	s2,s2,-31
    10e6:	0200                	addi	s0,sp,256
    10e8:	0304                	addi	s1,sp,384
    10ea:	0306                	slli	t1,t1,0x1
    10ec:	0900                	addi	s0,sp,144
    10ee:	0000                	unimp
    10f0:	0501                	addi	a0,a0,0
    10f2:	0021                	c.nop	8
    10f4:	0402                	c.slli64	s0
    10f6:	097f0303          	lb	t1,151(t5)
    10fa:	0002                	c.slli64	zero
    10fc:	0501                	addi	a0,a0,0
    10fe:	0019                	c.nop	6
    1100:	0402                	c.slli64	s0
    1102:	09010303          	lb	t1,144(sp)
    1106:	0004                	0x4
    1108:	0501                	addi	a0,a0,0
    110a:	0012                	c.slli	zero,0x4
    110c:	0402                	c.slli64	s0
    110e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1112:	0004                	0x4
    1114:	0501                	addi	a0,a0,0
    1116:	0021                	c.nop	8
    1118:	0402                	c.slli64	s0
    111a:	7f030603          	lb	a2,2032(t1)
    111e:	0409                	addi	s0,s0,2
    1120:	0100                	addi	s0,sp,128
    1122:	1105                	addi	sp,sp,-31
    1124:	02090c03          	lb	s8,32(s2)
    1128:	0100                	addi	s0,sp,128
    112a:	2905                	jal	155a <product2+0xc6>
    112c:	0306                	slli	t1,t1,0x1
    112e:	0900                	addi	s0,sp,144
    1130:	0000                	unimp
    1132:	0501                	addi	a0,a0,0
    1134:	031c                	addi	a5,sp,384
    1136:	0900                	addi	s0,sp,144
    1138:	0002                	c.slli64	zero
    113a:	0501                	addi	a0,a0,0
    113c:	7f030613          	addi	a2,t1,2032
    1140:	0209                	addi	tp,tp,2
    1142:	0100                	addi	s0,sp,128
    1144:	1b05                	addi	s6,s6,-31
    1146:	0306                	slli	t1,t1,0x1
    1148:	0900                	addi	s0,sp,144
    114a:	0000                	unimp
    114c:	0501                	addi	a0,a0,0
    114e:	09000313          	li	t1,144
    1152:	0002                	c.slli64	zero
    1154:	0501                	addi	a0,a0,0
    1156:	000d                	c.nop	3
    1158:	0402                	c.slli64	s0
    115a:	0602                	c.slli64	a2
    115c:	04090303          	lb	t1,64(s2)
    1160:	0100                	addi	s0,sp,128
    1162:	2505                	jal	1782 <result+0x96>
    1164:	0200                	addi	s0,sp,256
    1166:	0204                	addi	s1,sp,256
    1168:	0306                	slli	t1,t1,0x1
    116a:	0900                	addi	s0,sp,144
    116c:	0000                	unimp
    116e:	0501                	addi	a0,a0,0
    1170:	0021                	c.nop	8
    1172:	0402                	c.slli64	s0
    1174:	0302                	c.slli64	t1
    1176:	097c                	addi	a5,sp,156
    1178:	0004                	0x4
    117a:	0501                	addi	a0,a0,0
    117c:	0018                	0x18
    117e:	0402                	c.slli64	s0
    1180:	0302                	c.slli64	t1
    1182:	0904                	addi	s1,sp,144
    1184:	0004                	0x4
    1186:	0501                	addi	a0,a0,0
    1188:	0021                	c.nop	8
    118a:	0402                	c.slli64	s0
    118c:	0602                	c.slli64	a2
    118e:	04097c03          	0x4097c03
    1192:	0100                	addi	s0,sp,128
    1194:	0d05                	addi	s10,s10,1
    1196:	0200                	addi	s0,sp,256
    1198:	0304                	addi	s1,sp,384
    119a:	02090903          	lb	s2,32(s2)
    119e:	0100                	addi	s0,sp,128
    11a0:	3005                	jal	9c0 <generate_keys+0x90>
    11a2:	0200                	addi	s0,sp,256
    11a4:	0304                	addi	s1,sp,384
    11a6:	0306                	slli	t1,t1,0x1
    11a8:	0900                	addi	s0,sp,144
    11aa:	0000                	unimp
    11ac:	0501                	addi	a0,a0,0
    11ae:	04020027          	0x4020027
    11b2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11b6:	0006                	c.slli	zero,0x1
    11b8:	0501                	addi	a0,a0,0
    11ba:	0021                	c.nop	8
    11bc:	0402                	c.slli64	s0
    11be:	097f0303          	lb	t1,151(t5)
    11c2:	0004                	0x4
    11c4:	0501                	addi	a0,a0,0
    11c6:	04020027          	0x4020027
    11ca:	09010303          	lb	t1,144(sp)
    11ce:	0004                	0x4
    11d0:	0501                	addi	a0,a0,0
    11d2:	0019                	c.nop	6
    11d4:	0402                	c.slli64	s0
    11d6:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    11da:	0002                	c.slli64	zero
    11dc:	0501                	addi	a0,a0,0
    11de:	0021                	c.nop	8
    11e0:	0402                	c.slli64	s0
    11e2:	7f030603          	lb	a2,2032(t1)
    11e6:	0409                	addi	s0,s0,2
    11e8:	0100                	addi	s0,sp,128
    11ea:	1105                	addi	sp,sp,-31
    11ec:	02090803          	lb	a6,32(s2)
    11f0:	0100                	addi	s0,sp,128
    11f2:	2b05                	jal	1722 <result+0x36>
    11f4:	0306                	slli	t1,t1,0x1
    11f6:	0900                	addi	s0,sp,144
    11f8:	0000                	unimp
    11fa:	0501                	addi	a0,a0,0
    11fc:	031d                	addi	t1,t1,7
    11fe:	0900                	addi	s0,sp,144
    1200:	0002                	c.slli64	zero
    1202:	0501                	addi	a0,a0,0
    1204:	7f030613          	addi	a2,t1,2032
    1208:	0209                	addi	tp,tp,2
    120a:	0100                	addi	s0,sp,128
    120c:	1c05                	addi	s8,s8,-31
    120e:	0306                	slli	t1,t1,0x1
    1210:	0900                	addi	s0,sp,144
    1212:	0000                	unimp
    1214:	0501                	addi	a0,a0,0
    1216:	09000313          	li	t1,144
    121a:	0002                	c.slli64	zero
    121c:	0501                	addi	a0,a0,0
    121e:	000d                	c.nop	3
    1220:	0402                	c.slli64	s0
    1222:	0602                	c.slli64	a2
    1224:	04090303          	lb	t1,64(s2)
    1228:	0100                	addi	s0,sp,128
    122a:	2705                	jal	194a <ti_2+0x6>
    122c:	0200                	addi	s0,sp,256
    122e:	0204                	addi	s1,sp,256
    1230:	0306                	slli	t1,t1,0x1
    1232:	0900                	addi	s0,sp,144
    1234:	0000                	unimp
    1236:	0501                	addi	a0,a0,0
    1238:	0021                	c.nop	8
    123a:	0402                	c.slli64	s0
    123c:	0302                	c.slli64	t1
    123e:	097c                	addi	a5,sp,156
    1240:	0004                	0x4
    1242:	0501                	addi	a0,a0,0
    1244:	0019                	c.nop	6
    1246:	0402                	c.slli64	s0
    1248:	0302                	c.slli64	t1
    124a:	0904                	addi	s1,sp,144
    124c:	0004                	0x4
    124e:	0501                	addi	a0,a0,0
    1250:	0021                	c.nop	8
    1252:	0402                	c.slli64	s0
    1254:	0602                	c.slli64	a2
    1256:	04097c03          	0x4097c03
    125a:	0100                	addi	s0,sp,128
    125c:	0d05                	addi	s10,s10,1
    125e:	0200                	addi	s0,sp,256
    1260:	0304                	addi	s1,sp,384
    1262:	02090a03          	lb	s4,32(s2)
    1266:	0100                	addi	s0,sp,128
    1268:	1905                	addi	s2,s2,-31
    126a:	0200                	addi	s0,sp,256
    126c:	0304                	addi	s1,sp,384
    126e:	0306                	slli	t1,t1,0x1
    1270:	0900                	addi	s0,sp,144
    1272:	0000                	unimp
    1274:	0501                	addi	a0,a0,0
    1276:	0020                	addi	s0,sp,8
    1278:	0402                	c.slli64	s0
    127a:	097f0303          	lb	t1,151(t5)
    127e:	0002                	c.slli64	zero
    1280:	0501                	addi	a0,a0,0
    1282:	0019                	c.nop	6
    1284:	0402                	c.slli64	s0
    1286:	09010303          	lb	t1,144(sp)
    128a:	0004                	0x4
    128c:	0501                	addi	a0,a0,0
    128e:	0012                	c.slli	zero,0x4
    1290:	0402                	c.slli64	s0
    1292:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1296:	0004                	0x4
    1298:	0501                	addi	a0,a0,0
    129a:	0020                	addi	s0,sp,8
    129c:	0402                	c.slli64	s0
    129e:	7f030603          	lb	a2,2032(t1)
    12a2:	0409                	addi	s0,s0,2
    12a4:	0100                	addi	s0,sp,128
    12a6:	0d05                	addi	s10,s10,1
    12a8:	02090803          	lb	a6,32(s2)
    12ac:	0100                	addi	s0,sp,128
    12ae:	0f05                	addi	t5,t5,1
    12b0:	0306                	slli	t1,t1,0x1
    12b2:	0900                	addi	s0,sp,144
    12b4:	0000                	unimp
    12b6:	0501                	addi	a0,a0,0
    12b8:	0024                	addi	s1,sp,8
    12ba:	0402                	c.slli64	s0
    12bc:	0602                	c.slli64	a2
    12be:	02097f03          	0x2097f03
    12c2:	0100                	addi	s0,sp,128
    12c4:	2605                	jal	15e4 <product2+0x150>
    12c6:	0200                	addi	s0,sp,256
    12c8:	0204                	addi	s1,sp,256
    12ca:	0306                	slli	t1,t1,0x1
    12cc:	0900                	addi	s0,sp,144
    12ce:	0000                	unimp
    12d0:	0501                	addi	a0,a0,0
    12d2:	000d                	c.nop	3
    12d4:	0402                	c.slli64	s0
    12d6:	09030603          	lb	a2,144(t1)
    12da:	0409                	addi	s0,s0,2
    12dc:	0100                	addi	s0,sp,128
    12de:	1205                	addi	tp,tp,-31
    12e0:	0200                	addi	s0,sp,256
    12e2:	0304                	addi	s1,sp,384
    12e4:	0306                	slli	t1,t1,0x1
    12e6:	0900                	addi	s0,sp,144
    12e8:	0000                	unimp
    12ea:	0501                	addi	a0,a0,0
    12ec:	0021                	c.nop	8
    12ee:	0402                	c.slli64	s0
    12f0:	7f030603          	lb	a2,2032(t1)
    12f4:	0a09                	addi	s4,s4,2
    12f6:	0100                	addi	s0,sp,128
    12f8:	1505                	addi	a0,a0,-31
    12fa:	0200                	addi	s0,sp,256
    12fc:	0104                	addi	s1,sp,128
    12fe:	02090003          	lb	zero,32(s2)
    1302:	0100                	addi	s0,sp,128
    1304:	0905                	addi	s2,s2,1
    1306:	0200                	addi	s0,sp,256
    1308:	0104                	addi	s1,sp,128
    130a:	0306                	slli	t1,t1,0x1
    130c:	0900                	addi	s0,sp,144
    130e:	0000                	unimp
    1310:	0001                	nop
    1312:	0402                	c.slli64	s0
    1314:	0d030603          	lb	a2,208(t1)
    1318:	0609                	addi	a2,a2,2
    131a:	0100                	addi	s0,sp,128
    131c:	1305                	addi	t1,t1,-31
    131e:	0200                	addi	s0,sp,256
    1320:	0304                	addi	s1,sp,384
    1322:	0306                	slli	t1,t1,0x1
    1324:	0900                	addi	s0,sp,144
    1326:	0000                	unimp
    1328:	0501                	addi	a0,a0,0
    132a:	0025                	c.nop	9
    132c:	0402                	c.slli64	s0
    132e:	7f030603          	lb	a2,2032(t1)
    1332:	0c09                	addi	s8,s8,2
    1334:	0100                	addi	s0,sp,128
    1336:	3c05                	jal	d66 <ntru_deceypt+0xba>
    1338:	06090a03          	lb	s4,96(s2)
    133c:	0100                	addi	s0,sp,128
    133e:	0505                	addi	a0,a0,1
    1340:	00090203          	lb	tp,0(s2)
    1344:	0100                	addi	s0,sp,128
    1346:	00090103          	lb	sp,0(s2)
    134a:	0100                	addi	s0,sp,128
    134c:	00090103          	lb	sp,0(s2)
    1350:	0100                	addi	s0,sp,128
    1352:	0905                	addi	s2,s2,1
    1354:	0306                	slli	t1,t1,0x1
    1356:	0900                	addi	s0,sp,144
    1358:	0000                	unimp
    135a:	0501                	addi	a0,a0,0
    135c:	033c                	addi	a5,sp,392
    135e:	097c                	addi	a5,sp,156
    1360:	0004                	0x4
    1362:	0501                	addi	a0,a0,0
    1364:	0309                	addi	t1,t1,2
    1366:	0904                	addi	s1,sp,144
    1368:	0002                	c.slli64	zero
    136a:	0501                	addi	a0,a0,0
    136c:	033c                	addi	a5,sp,392
    136e:	097c                	addi	a5,sp,156
    1370:	0004                	0x4
    1372:	0501                	addi	a0,a0,0
    1374:	0309                	addi	t1,t1,2
    1376:	0904                	addi	s1,sp,144
    1378:	001c                	0x1c
    137a:	0301                	addi	t1,t1,0
    137c:	0901                	addi	s2,s2,0
    137e:	0006                	c.slli	zero,0x1
    1380:	0301                	addi	t1,t1,0
    1382:	0901                	addi	s2,s2,0
    1384:	0006                	c.slli	zero,0x1
    1386:	0301                	addi	t1,t1,0
    1388:	0902                	c.slli64	s2
    138a:	0006                	c.slli	zero,0x1
    138c:	0301                	addi	t1,t1,0
    138e:	0901                	addi	s2,s2,0
    1390:	0006                	c.slli	zero,0x1
    1392:	0301                	addi	t1,t1,0
    1394:	0901                	addi	s2,s2,0
    1396:	0006                	c.slli	zero,0x1
    1398:	0301                	addi	t1,t1,0
    139a:	0901                	addi	s2,s2,0
    139c:	0006                	c.slli	zero,0x1
    139e:	0501                	addi	a0,a0,0
    13a0:	033c                	addi	a5,sp,392
    13a2:	0975                	addi	s2,s2,29
    13a4:	0004                	0x4
    13a6:	0501                	addi	a0,a0,0
    13a8:	0309                	addi	t1,t1,2
    13aa:	0904                	addi	s1,sp,144
    13ac:	0006                	c.slli	zero,0x1
    13ae:	0501                	addi	a0,a0,0
    13b0:	0605                	addi	a2,a2,1
    13b2:	04090103          	lb	sp,64(s2)
    13b6:	0100                	addi	s0,sp,128
    13b8:	00090103          	lb	sp,0(s2)
    13bc:	0100                	addi	s0,sp,128
    13be:	00090203          	lb	tp,0(s2)
    13c2:	0100                	addi	s0,sp,128
    13c4:	00090103          	lb	sp,0(s2)
    13c8:	0100                	addi	s0,sp,128
    13ca:	00090103          	lb	sp,0(s2)
    13ce:	0100                	addi	s0,sp,128
    13d0:	00090103          	lb	sp,0(s2)
    13d4:	0100                	addi	s0,sp,128
    13d6:	0905                	addi	s2,s2,1
    13d8:	0306                	slli	t1,t1,0x1
    13da:	0900                	addi	s0,sp,144
    13dc:	0000                	unimp
    13de:	0501                	addi	a0,a0,0
    13e0:	0605                	addi	a2,a2,1
    13e2:	02090103          	lb	sp,32(s2)
    13e6:	0100                	addi	s0,sp,128
    13e8:	00090103          	lb	sp,0(s2)
    13ec:	0100                	addi	s0,sp,128
    13ee:	00090103          	lb	sp,0(s2)
    13f2:	0100                	addi	s0,sp,128
    13f4:	00090103          	lb	sp,0(s2)
    13f8:	0100                	addi	s0,sp,128
    13fa:	00090203          	lb	tp,0(s2)
    13fe:	0100                	addi	s0,sp,128
    1400:	00090103          	lb	sp,0(s2)
    1404:	0100                	addi	s0,sp,128
    1406:	0c05                	addi	s8,s8,1
    1408:	0306                	slli	t1,t1,0x1
    140a:	0900                	addi	s0,sp,144
    140c:	0000                	unimp
    140e:	0501                	addi	a0,a0,0
    1410:	0311                	addi	t1,t1,4
    1412:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    1416:	0001                	nop
    1418:	0402                	c.slli64	s0
    141a:	0601                	addi	a2,a2,0
    141c:	08097d03          	0x8097d03
    1420:	0100                	addi	s0,sp,128
    1422:	0505                	addi	a0,a0,1
    1424:	0200                	addi	s0,sp,256
    1426:	0104                	addi	s1,sp,128
    1428:	0306                	slli	t1,t1,0x1
    142a:	0900                	addi	s0,sp,144
    142c:	0000                	unimp
    142e:	0601                	addi	a2,a2,0
    1430:	04090603          	lb	a2,64(s2)
    1434:	0100                	addi	s0,sp,128
    1436:	08090103          	lb	sp,128(s2)
    143a:	0100                	addi	s0,sp,128
    143c:	08090503          	lb	a0,128(s2)
    1440:	0100                	addi	s0,sp,128
    1442:	0d05                	addi	s10,s10,1
    1444:	0306                	slli	t1,t1,0x1
    1446:	0900                	addi	s0,sp,144
    1448:	0000                	unimp
    144a:	0501                	addi	a0,a0,0
    144c:	0605                	addi	a2,a2,1
    144e:	06090303          	lb	t1,96(s2)
    1452:	0100                	addi	s0,sp,128
    1454:	0b05                	addi	s6,s6,1
    1456:	00090003          	lb	zero,0(s2)
    145a:	0100                	addi	s0,sp,128
    145c:	2405                	jal	167c <product2+0x1e8>
    145e:	0306                	slli	t1,t1,0x1
    1460:	0916                	slli	s2,s2,0x5
    1462:	0000                	unimp
    1464:	0501                	addi	a0,a0,0
    1466:	0310                	addi	a2,sp,384
    1468:	096e                	slli	s2,s2,0x1b
    146a:	0008                	0x8
    146c:	0501                	addi	a0,a0,0
    146e:	0009                	c.nop	2
    1470:	0402                	c.slli64	s0
    1472:	70030603          	lb	a2,1792(t1)
    1476:	0409                	addi	s0,s0,2
    1478:	0100                	addi	s0,sp,128
    147a:	1105                	addi	sp,sp,-31
    147c:	0200                	addi	s0,sp,256
    147e:	0304                	addi	s1,sp,384
    1480:	0306                	slli	t1,t1,0x1
    1482:	0900                	addi	s0,sp,144
    1484:	0004                	0x4
    1486:	0001                	nop
    1488:	0402                	c.slli64	s0
    148a:	09010303          	lb	t1,144(sp)
    148e:	0004                	0x4
    1490:	0001                	nop
    1492:	0402                	c.slli64	s0
    1494:	097f0303          	lb	t1,151(t5)
    1498:	0002                	c.slli64	zero
    149a:	0501                	addi	a0,a0,0
    149c:	0009                	c.nop	2
    149e:	0402                	c.slli64	s0
    14a0:	01030603          	lb	a2,16(t1)
    14a4:	0409                	addi	s0,s0,2
    14a6:	0100                	addi	s0,sp,128
    14a8:	1105                	addi	sp,sp,-31
    14aa:	0200                	addi	s0,sp,256
    14ac:	0304                	addi	s1,sp,384
    14ae:	0306                	slli	t1,t1,0x1
    14b0:	0900                	addi	s0,sp,144
    14b2:	0000                	unimp
    14b4:	0501                	addi	a0,a0,0
    14b6:	0402001b          	0x402001b
    14ba:	7c030603          	lb	a2,1984(t1)
    14be:	0409                	addi	s0,s0,2
    14c0:	0100                	addi	s0,sp,128
    14c2:	1105                	addi	sp,sp,-31
    14c4:	04091503          	lh	a0,64(s2)
    14c8:	0100                	addi	s0,sp,128
    14ca:	2305                	jal	19ea <ti_2+0xa6>
    14cc:	0306                	slli	t1,t1,0x1
    14ce:	0900                	addi	s0,sp,144
    14d0:	0000                	unimp
    14d2:	0501                	addi	a0,a0,0
    14d4:	0319                	addi	t1,t1,6
    14d6:	0900                	addi	s0,sp,144
    14d8:	0002                	c.slli64	zero
    14da:	0501                	addi	a0,a0,0
    14dc:	7f030613          	addi	a2,t1,2032
    14e0:	0209                	addi	tp,tp,2
    14e2:	0100                	addi	s0,sp,128
    14e4:	1805                	addi	a6,a6,-31
    14e6:	0306                	slli	t1,t1,0x1
    14e8:	0900                	addi	s0,sp,144
    14ea:	0000                	unimp
    14ec:	0501                	addi	a0,a0,0
    14ee:	09000313          	li	t1,144
    14f2:	0002                	c.slli64	zero
    14f4:	0501                	addi	a0,a0,0
    14f6:	000d                	c.nop	3
    14f8:	0402                	c.slli64	s0
    14fa:	0602                	c.slli64	a2
    14fc:	04090303          	lb	t1,64(s2)
    1500:	0100                	addi	s0,sp,128
    1502:	1f05                	addi	t5,t5,-31
    1504:	0200                	addi	s0,sp,256
    1506:	0204                	addi	s1,sp,256
    1508:	0306                	slli	t1,t1,0x1
    150a:	0900                	addi	s0,sp,144
    150c:	0000                	unimp
    150e:	0501                	addi	a0,a0,0
    1510:	0020                	addi	s0,sp,8
    1512:	0402                	c.slli64	s0
    1514:	0302                	c.slli64	t1
    1516:	097c                	addi	a5,sp,156
    1518:	0004                	0x4
    151a:	0501                	addi	a0,a0,0
    151c:	0015                	c.nop	5
    151e:	0402                	c.slli64	s0
    1520:	0302                	c.slli64	t1
    1522:	0904                	addi	s1,sp,144
    1524:	0002                	c.slli64	zero
    1526:	0501                	addi	a0,a0,0
    1528:	0020                	addi	s0,sp,8
    152a:	0402                	c.slli64	s0
    152c:	0602                	c.slli64	a2
    152e:	02097c03          	0x2097c03
    1532:	0100                	addi	s0,sp,128
    1534:	1505                	addi	a0,a0,-31
    1536:	0200                	addi	s0,sp,256
    1538:	0104                	addi	s1,sp,128
    153a:	00090003          	lb	zero,0(s2)
    153e:	0100                	addi	s0,sp,128
    1540:	0905                	addi	s2,s2,1
    1542:	0200                	addi	s0,sp,256
    1544:	0104                	addi	s1,sp,128
    1546:	0306                	slli	t1,t1,0x1
    1548:	0900                	addi	s0,sp,144
    154a:	0000                	unimp
    154c:	0501                	addi	a0,a0,0
    154e:	0310                	addi	a2,sp,384
    1550:	0909                	addi	s2,s2,2
    1552:	000e                	c.slli	zero,0x3
    1554:	0501                	addi	a0,a0,0
    1556:	0015                	c.nop	5
    1558:	0402                	c.slli64	s0
    155a:	0601                	addi	a2,a2,0
    155c:	02090003          	lb	zero,32(s2)
    1560:	0100                	addi	s0,sp,128
    1562:	0905                	addi	s2,s2,1
    1564:	0200                	addi	s0,sp,256
    1566:	0104                	addi	s1,sp,128
    1568:	0306                	slli	t1,t1,0x1
    156a:	0900                	addi	s0,sp,144
    156c:	0000                	unimp
    156e:	0601                	addi	a2,a2,0
    1570:	04090803          	lb	a6,64(s2)
    1574:	0100                	addi	s0,sp,128
    1576:	0f05                	addi	t5,t5,1
    1578:	0306                	slli	t1,t1,0x1
    157a:	0900                	addi	s0,sp,144
    157c:	0000                	unimp
    157e:	0501                	addi	a0,a0,0
    1580:	0609                	addi	a2,a2,2
    1582:	0c090103          	lb	sp,192(s2)
    1586:	0100                	addi	s0,sp,128
    1588:	1905                	addi	s2,s2,-31
    158a:	0200                	addi	s0,sp,256
    158c:	0104                	addi	s1,sp,128
    158e:	04090003          	lb	zero,64(s2)
    1592:	0100                	addi	s0,sp,128
    1594:	0905                	addi	s2,s2,1
    1596:	0200                	addi	s0,sp,256
    1598:	0104                	addi	s1,sp,128
    159a:	0306                	slli	t1,t1,0x1
    159c:	0900                	addi	s0,sp,144
    159e:	0000                	unimp
    15a0:	0501                	addi	a0,a0,0
    15a2:	0310                	addi	a2,sp,384
    15a4:	0906                	slli	s2,s2,0x1
    15a6:	000a                	c.slli	zero,0x2
    15a8:	0501                	addi	a0,a0,0
    15aa:	0015                	c.nop	5
    15ac:	0402                	c.slli64	s0
    15ae:	0601                	addi	a2,a2,0
    15b0:	02090003          	lb	zero,32(s2)
    15b4:	0100                	addi	s0,sp,128
    15b6:	0905                	addi	s2,s2,1
    15b8:	0200                	addi	s0,sp,256
    15ba:	0104                	addi	s1,sp,128
    15bc:	0306                	slli	t1,t1,0x1
    15be:	0900                	addi	s0,sp,144
    15c0:	0000                	unimp
    15c2:	0301                	addi	t1,t1,0
    15c4:	0900                	addi	s0,sp,144
    15c6:	0006                	c.slli	zero,0x1
    15c8:	0501                	addi	a0,a0,0
    15ca:	0310                	addi	a2,sp,384
    15cc:	0906                	slli	s2,s2,0x1
    15ce:	0002                	c.slli64	zero
    15d0:	0501                	addi	a0,a0,0
    15d2:	0015                	c.nop	5
    15d4:	0402                	c.slli64	s0
    15d6:	0601                	addi	a2,a2,0
    15d8:	02090003          	lb	zero,32(s2)
    15dc:	0100                	addi	s0,sp,128
    15de:	0905                	addi	s2,s2,1
    15e0:	0200                	addi	s0,sp,256
    15e2:	0104                	addi	s1,sp,128
    15e4:	0306                	slli	t1,t1,0x1
    15e6:	0900                	addi	s0,sp,144
    15e8:	0000                	unimp
    15ea:	0601                	addi	a2,a2,0
    15ec:	04090703          	lb	a4,64(s2)
    15f0:	0100                	addi	s0,sp,128
    15f2:	1005                	c.nop	-31
    15f4:	0306                	slli	t1,t1,0x1
    15f6:	0900                	addi	s0,sp,144
    15f8:	0000                	unimp
    15fa:	0501                	addi	a0,a0,0
    15fc:	0605                	addi	a2,a2,1
    15fe:	0e090403          	lb	s0,224(s2)
    1602:	0100                	addi	s0,sp,128
    1604:	0905                	addi	s2,s2,1
    1606:	06090303          	lb	t1,96(s2)
    160a:	0100                	addi	s0,sp,128
    160c:	1005                	c.nop	-31
    160e:	0306                	slli	t1,t1,0x1
    1610:	0900                	addi	s0,sp,144
    1612:	0002                	c.slli64	zero
    1614:	0501                	addi	a0,a0,0
    1616:	0015                	c.nop	5
    1618:	0402                	c.slli64	s0
    161a:	0601                	addi	a2,a2,0
    161c:	02090003          	lb	zero,32(s2)
    1620:	0100                	addi	s0,sp,128
    1622:	0905                	addi	s2,s2,1
    1624:	0200                	addi	s0,sp,256
    1626:	0104                	addi	s1,sp,128
    1628:	0306                	slli	t1,t1,0x1
    162a:	0900                	addi	s0,sp,144
    162c:	0000                	unimp
    162e:	0601                	addi	a2,a2,0
    1630:	04090a03          	lb	s4,64(s2)
    1634:	0100                	addi	s0,sp,128
    1636:	1005                	c.nop	-31
    1638:	0306                	slli	t1,t1,0x1
    163a:	0900                	addi	s0,sp,144
    163c:	0000                	unimp
    163e:	0501                	addi	a0,a0,0
    1640:	0605                	addi	a2,a2,1
    1642:	10090403          	lb	s0,256(s2)
    1646:	0100                	addi	s0,sp,128
    1648:	0905                	addi	s2,s2,1
    164a:	06090303          	lb	t1,96(s2)
    164e:	0100                	addi	s0,sp,128
    1650:	1005                	c.nop	-31
    1652:	0306                	slli	t1,t1,0x1
    1654:	0900                	addi	s0,sp,144
    1656:	0000                	unimp
    1658:	0501                	addi	a0,a0,0
    165a:	0015                	c.nop	5
    165c:	0402                	c.slli64	s0
    165e:	0601                	addi	a2,a2,0
    1660:	02090003          	lb	zero,32(s2)
    1664:	0100                	addi	s0,sp,128
    1666:	0905                	addi	s2,s2,1
    1668:	0200                	addi	s0,sp,256
    166a:	0104                	addi	s1,sp,128
    166c:	0306                	slli	t1,t1,0x1
    166e:	0900                	addi	s0,sp,144
    1670:	0000                	unimp
    1672:	0501                	addi	a0,a0,0
    1674:	0310                	addi	a2,sp,384
    1676:	0908                	addi	a0,sp,144
    1678:	0006                	c.slli	zero,0x1
    167a:	0501                	addi	a0,a0,0
    167c:	0015                	c.nop	5
    167e:	0402                	c.slli64	s0
    1680:	0601                	addi	a2,a2,0
    1682:	02090003          	lb	zero,32(s2)
    1686:	0100                	addi	s0,sp,128
    1688:	0905                	addi	s2,s2,1
    168a:	0200                	addi	s0,sp,256
    168c:	0104                	addi	s1,sp,128
    168e:	0306                	slli	t1,t1,0x1
    1690:	0900                	addi	s0,sp,144
    1692:	0000                	unimp
    1694:	0501                	addi	a0,a0,0
    1696:	0310                	addi	a2,sp,384
    1698:	0905                	addi	s2,s2,1
    169a:	0006                	c.slli	zero,0x1
    169c:	0501                	addi	a0,a0,0
    169e:	0015                	c.nop	5
    16a0:	0402                	c.slli64	s0
    16a2:	0601                	addi	a2,a2,0
    16a4:	02090003          	lb	zero,32(s2)
    16a8:	0100                	addi	s0,sp,128
    16aa:	0905                	addi	s2,s2,1
    16ac:	0200                	addi	s0,sp,256
    16ae:	0104                	addi	s1,sp,128
    16b0:	0306                	slli	t1,t1,0x1
    16b2:	0900                	addi	s0,sp,144
    16b4:	0000                	unimp
    16b6:	0501                	addi	a0,a0,0
    16b8:	0601                	addi	a2,a2,0
    16ba:	04090a03          	lb	s4,64(s2)
    16be:	0100                	addi	s0,sp,128
    16c0:	08090103          	lb	sp,128(s2)
    16c4:	0100                	addi	s0,sp,128
    16c6:	08090103          	lb	sp,128(s2)
    16ca:	0100                	addi	s0,sp,128
    16cc:	0e090103          	lb	sp,224(s2)
    16d0:	0100                	addi	s0,sp,128
    16d2:	0905                	addi	s2,s2,1
    16d4:	08090203          	lb	tp,128(s2)
    16d8:	0100                	addi	s0,sp,128
    16da:	1205                	addi	tp,tp,-31
    16dc:	0306                	slli	t1,t1,0x1
    16de:	7fa5                	lui	t6,0xfffe9
    16e0:	0009                	c.nop	2
    16e2:	0100                	addi	s0,sp,128
    16e4:	1005                	c.nop	-31
    16e6:	0900db03          	lhu	s6,144(ra) # 5d473c <_stack_start+0x5c473c>
    16ea:	0002                	c.slli64	zero
    16ec:	0501                	addi	a0,a0,0
    16ee:	0015                	c.nop	5
    16f0:	0402                	c.slli64	s0
    16f2:	0601                	addi	a2,a2,0
    16f4:	02090003          	lb	zero,32(s2)
    16f8:	0100                	addi	s0,sp,128
    16fa:	0905                	addi	s2,s2,1
    16fc:	0200                	addi	s0,sp,256
    16fe:	0104                	addi	s1,sp,128
    1700:	0306                	slli	t1,t1,0x1
    1702:	0900                	addi	s0,sp,144
    1704:	0000                	unimp
    1706:	0501                	addi	a0,a0,0
    1708:	a303060b          	0xa303060b
    170c:	097f                	0x97f
    170e:	0004                	0x4
    1710:	0501                	addi	a0,a0,0
    1712:	0610                	addi	a2,sp,768
    1714:	0900e803          	0x900e803
    1718:	0004                	0x4
    171a:	0301                	addi	t1,t1,0
    171c:	0901                	addi	s2,s2,0
    171e:	0002                	c.slli64	zero
    1720:	0501                	addi	a0,a0,0
    1722:	0015                	c.nop	5
    1724:	0402                	c.slli64	s0
    1726:	0601                	addi	a2,a2,0
    1728:	02097f03          	0x2097f03
    172c:	0100                	addi	s0,sp,128
    172e:	0905                	addi	s2,s2,1
    1730:	0200                	addi	s0,sp,256
    1732:	0104                	addi	s1,sp,128
    1734:	0306                	slli	t1,t1,0x1
    1736:	0900                	addi	s0,sp,144
    1738:	0000                	unimp
    173a:	0501                	addi	a0,a0,0
    173c:	0015                	c.nop	5
    173e:	0402                	c.slli64	s0
    1740:	0601                	addi	a2,a2,0
    1742:	0c090c03          	lb	s8,192(s2)
    1746:	0100                	addi	s0,sp,128
    1748:	0905                	addi	s2,s2,1
    174a:	0200                	addi	s0,sp,256
    174c:	0104                	addi	s1,sp,128
    174e:	0306                	slli	t1,t1,0x1
    1750:	0900                	addi	s0,sp,144
    1752:	0000                	unimp
    1754:	0601                	addi	a2,a2,0
    1756:	04090503          	lb	a0,64(s2)
    175a:	0100                	addi	s0,sp,128
    175c:	00090103          	lb	sp,0(s2)
    1760:	0100                	addi	s0,sp,128
    1762:	0505                	addi	a0,a0,1
    1764:	0306                	slli	t1,t1,0x1
    1766:	0901                	addi	s2,s2,0
    1768:	0000                	unimp
    176a:	0501                	addi	a0,a0,0
    176c:	0611                	addi	a2,a2,4
    176e:	097f9403          	lh	s0,151(t6) # fffe9097 <_stack_start+0xfffd9097>
    1772:	002a                	c.slli	zero,0xa
    1774:	0501                	addi	a0,a0,0
    1776:	00030623          	sb	zero,12(t1)
    177a:	0009                	c.nop	2
    177c:	0100                	addi	s0,sp,128
    177e:	1905                	addi	s2,s2,-31
    1780:	02090003          	lb	zero,32(s2)
    1784:	0100                	addi	s0,sp,128
    1786:	1305                	addi	t1,t1,-31
    1788:	0306                	slli	t1,t1,0x1
    178a:	097f                	0x97f
    178c:	0002                	c.slli64	zero
    178e:	0501                	addi	a0,a0,0
    1790:	0618                	addi	a4,sp,768
    1792:	00090003          	lb	zero,0(s2)
    1796:	0100                	addi	s0,sp,128
    1798:	1305                	addi	t1,t1,-31
    179a:	02090003          	lb	zero,32(s2)
    179e:	0100                	addi	s0,sp,128
    17a0:	0d05                	addi	s10,s10,1
    17a2:	0200                	addi	s0,sp,256
    17a4:	0204                	addi	s1,sp,256
    17a6:	0306                	slli	t1,t1,0x1
    17a8:	00040903          	lb	s2,0(s0)
    17ac:	0501                	addi	a0,a0,0
    17ae:	001f 0402 0602      	0x6020402001f
    17b4:	00090003          	lb	zero,0(s2)
    17b8:	0100                	addi	s0,sp,128
    17ba:	2005                	jal	17da <result+0xee>
    17bc:	0200                	addi	s0,sp,256
    17be:	0204                	addi	s1,sp,256
    17c0:	04097c03          	0x4097c03
    17c4:	0100                	addi	s0,sp,128
    17c6:	1505                	addi	a0,a0,-31
    17c8:	0200                	addi	s0,sp,256
    17ca:	0204                	addi	s1,sp,256
    17cc:	04090403          	lb	s0,64(s2)
    17d0:	0100                	addi	s0,sp,128
    17d2:	2005                	jal	17f2 <result+0x106>
    17d4:	0200                	addi	s0,sp,256
    17d6:	0204                	addi	s1,sp,256
    17d8:	0306                	slli	t1,t1,0x1
    17da:	097c                	addi	a5,sp,156
    17dc:	0004                	0x4
    17de:	0501                	addi	a0,a0,0
    17e0:	000d                	c.nop	3
    17e2:	0402                	c.slli64	s0
    17e4:	090a0303          	lb	t1,144(s4)
    17e8:	0002                	c.slli64	zero
    17ea:	0501                	addi	a0,a0,0
    17ec:	0022                	c.slli	zero,0x8
    17ee:	0402                	c.slli64	s0
    17f0:	00030603          	lb	a2,0(t1)
    17f4:	0009                	c.nop	2
    17f6:	0100                	addi	s0,sp,128
    17f8:	2a05                	jal	1928 <result+0x23c>
    17fa:	0200                	addi	s0,sp,256
    17fc:	0304                	addi	s1,sp,384
    17fe:	08097f03          	0x8097f03
    1802:	0100                	addi	s0,sp,128
    1804:	1d05                	addi	s10,s10,-31
    1806:	0200                	addi	s0,sp,256
    1808:	0304                	addi	s1,sp,384
    180a:	04090103          	lb	sp,64(s2)
    180e:	0100                	addi	s0,sp,128
    1810:	2a05                	jal	1940 <result+0x254>
    1812:	0200                	addi	s0,sp,256
    1814:	0304                	addi	s1,sp,384
    1816:	0306                	slli	t1,t1,0x1
    1818:	097f                	0x97f
    181a:	0004                	0x4
    181c:	0501                	addi	a0,a0,0
    181e:	000d                	c.nop	3
    1820:	0402                	c.slli64	s0
    1822:	09070303          	lb	t1,144(a4)
    1826:	0002                	c.slli64	zero
    1828:	0501                	addi	a0,a0,0
    182a:	0402001b          	0x402001b
    182e:	00030603          	lb	a2,0(t1)
    1832:	0009                	c.nop	2
    1834:	0100                	addi	s0,sp,128
    1836:	2305                	jal	1d56 <random_keys+0x282>
    1838:	0200                	addi	s0,sp,256
    183a:	0304                	addi	s1,sp,384
    183c:	04090003          	lb	zero,64(s2)
    1840:	0100                	addi	s0,sp,128
    1842:	1f05                	addi	t5,t5,-31
    1844:	0200                	addi	s0,sp,256
    1846:	0304                	addi	s1,sp,384
    1848:	04090003          	lb	zero,64(s2)
    184c:	0100                	addi	s0,sp,128
    184e:	1505                	addi	a0,a0,-31
    1850:	0200                	addi	s0,sp,256
    1852:	0304                	addi	s1,sp,384
    1854:	04090003          	lb	zero,64(s2)
    1858:	0100                	addi	s0,sp,128
    185a:	2005                	jal	187a <result+0x18e>
    185c:	0200                	addi	s0,sp,256
    185e:	0304                	addi	s1,sp,384
    1860:	04097f03          	0x4097f03
    1864:	0100                	addi	s0,sp,128
    1866:	1f05                	addi	t5,t5,-31
    1868:	0200                	addi	s0,sp,256
    186a:	0304                	addi	s1,sp,384
    186c:	02090103          	lb	sp,32(s2)
    1870:	0100                	addi	s0,sp,128
    1872:	1505                	addi	a0,a0,-31
    1874:	0200                	addi	s0,sp,256
    1876:	0304                	addi	s1,sp,384
    1878:	02090003          	lb	zero,32(s2)
    187c:	0100                	addi	s0,sp,128
    187e:	2005                	jal	189e <result+0x1b2>
    1880:	0200                	addi	s0,sp,256
    1882:	0304                	addi	s1,sp,384
    1884:	0306                	slli	t1,t1,0x1
    1886:	097f                	0x97f
    1888:	0002                	c.slli64	zero
    188a:	0501                	addi	a0,a0,0
    188c:	0311                	addi	t1,t1,4
    188e:	0908                	addi	a0,sp,144
    1890:	0004                	0x4
    1892:	0501                	addi	a0,a0,0
    1894:	00030623          	sb	zero,12(t1)
    1898:	0009                	c.nop	2
    189a:	0100                	addi	s0,sp,128
    189c:	1905                	addi	s2,s2,-31
    189e:	02090003          	lb	zero,32(s2)
    18a2:	0100                	addi	s0,sp,128
    18a4:	1305                	addi	t1,t1,-31
    18a6:	0306                	slli	t1,t1,0x1
    18a8:	097f                	0x97f
    18aa:	0002                	c.slli64	zero
    18ac:	0501                	addi	a0,a0,0
    18ae:	0618                	addi	a4,sp,768
    18b0:	00090003          	lb	zero,0(s2)
    18b4:	0100                	addi	s0,sp,128
    18b6:	1305                	addi	t1,t1,-31
    18b8:	02090003          	lb	zero,32(s2)
    18bc:	0100                	addi	s0,sp,128
    18be:	0d05                	addi	s10,s10,1
    18c0:	0200                	addi	s0,sp,256
    18c2:	0204                	addi	s1,sp,256
    18c4:	0306                	slli	t1,t1,0x1
    18c6:	00040903          	lb	s2,0(s0)
    18ca:	0501                	addi	a0,a0,0
    18cc:	001f 0402 0602      	0x6020402001f
    18d2:	00090003          	lb	zero,0(s2)
    18d6:	0100                	addi	s0,sp,128
    18d8:	2005                	jal	18f8 <result+0x20c>
    18da:	0200                	addi	s0,sp,256
    18dc:	0204                	addi	s1,sp,256
    18de:	04097c03          	0x4097c03
    18e2:	0100                	addi	s0,sp,128
    18e4:	1505                	addi	a0,a0,-31
    18e6:	0200                	addi	s0,sp,256
    18e8:	0204                	addi	s1,sp,256
    18ea:	04090403          	lb	s0,64(s2)
    18ee:	0100                	addi	s0,sp,128
    18f0:	2005                	jal	1910 <result+0x224>
    18f2:	0200                	addi	s0,sp,256
    18f4:	0204                	addi	s1,sp,256
    18f6:	0306                	slli	t1,t1,0x1
    18f8:	097c                	addi	a5,sp,156
    18fa:	0004                	0x4
    18fc:	0501                	addi	a0,a0,0
    18fe:	0311                	addi	t1,t1,4
    1900:	0910                	addi	a2,sp,144
    1902:	0002                	c.slli64	zero
    1904:	0501                	addi	a0,a0,0
    1906:	00030623          	sb	zero,12(t1)
    190a:	0009                	c.nop	2
    190c:	0100                	addi	s0,sp,128
    190e:	1905                	addi	s2,s2,-31
    1910:	02090003          	lb	zero,32(s2)
    1914:	0100                	addi	s0,sp,128
    1916:	1305                	addi	t1,t1,-31
    1918:	0306                	slli	t1,t1,0x1
    191a:	097f                	0x97f
    191c:	0002                	c.slli64	zero
    191e:	0501                	addi	a0,a0,0
    1920:	0618                	addi	a4,sp,768
    1922:	00090003          	lb	zero,0(s2)
    1926:	0100                	addi	s0,sp,128
    1928:	1305                	addi	t1,t1,-31
    192a:	02090003          	lb	zero,32(s2)
    192e:	0100                	addi	s0,sp,128
    1930:	0d05                	addi	s10,s10,1
    1932:	0200                	addi	s0,sp,256
    1934:	0204                	addi	s1,sp,256
    1936:	0306                	slli	t1,t1,0x1
    1938:	00040903          	lb	s2,0(s0)
    193c:	0501                	addi	a0,a0,0
    193e:	001f 0402 0602      	0x6020402001f
    1944:	00090003          	lb	zero,0(s2)
    1948:	0100                	addi	s0,sp,128
    194a:	2005                	jal	196a <ti_2+0x26>
    194c:	0200                	addi	s0,sp,256
    194e:	0204                	addi	s1,sp,256
    1950:	04097c03          	0x4097c03
    1954:	0100                	addi	s0,sp,128
    1956:	1505                	addi	a0,a0,-31
    1958:	0200                	addi	s0,sp,256
    195a:	0204                	addi	s1,sp,256
    195c:	04090403          	lb	s0,64(s2)
    1960:	0100                	addi	s0,sp,128
    1962:	2005                	jal	1982 <ti_2+0x3e>
    1964:	0200                	addi	s0,sp,256
    1966:	0204                	addi	s1,sp,256
    1968:	0306                	slli	t1,t1,0x1
    196a:	097c                	addi	a5,sp,156
    196c:	0004                	0x4
    196e:	0501                	addi	a0,a0,0
    1970:	0311                	addi	t1,t1,4
    1972:	00020913          	mv	s2,tp
    1976:	0501                	addi	a0,a0,0
    1978:	00030623          	sb	zero,12(t1)
    197c:	0009                	c.nop	2
    197e:	0100                	addi	s0,sp,128
    1980:	1905                	addi	s2,s2,-31
    1982:	02090003          	lb	zero,32(s2)
    1986:	0100                	addi	s0,sp,128
    1988:	1305                	addi	t1,t1,-31
    198a:	0306                	slli	t1,t1,0x1
    198c:	097f                	0x97f
    198e:	0004                	0x4
    1990:	0501                	addi	a0,a0,0
    1992:	0618                	addi	a4,sp,768
    1994:	00090003          	lb	zero,0(s2)
    1998:	0100                	addi	s0,sp,128
    199a:	1305                	addi	t1,t1,-31
    199c:	04090003          	lb	zero,64(s2)
    19a0:	0100                	addi	s0,sp,128
    19a2:	0d05                	addi	s10,s10,1
    19a4:	0200                	addi	s0,sp,256
    19a6:	0204                	addi	s1,sp,256
    19a8:	0306                	slli	t1,t1,0x1
    19aa:	00040903          	lb	s2,0(s0)
    19ae:	0501                	addi	a0,a0,0
    19b0:	001f 0402 0602      	0x6020402001f
    19b6:	00090003          	lb	zero,0(s2)
    19ba:	0100                	addi	s0,sp,128
    19bc:	2005                	jal	19dc <ti_2+0x98>
    19be:	0200                	addi	s0,sp,256
    19c0:	0204                	addi	s1,sp,256
    19c2:	04097c03          	0x4097c03
    19c6:	0100                	addi	s0,sp,128
    19c8:	1505                	addi	a0,a0,-31
    19ca:	0200                	addi	s0,sp,256
    19cc:	0204                	addi	s1,sp,256
    19ce:	04090403          	lb	s0,64(s2)
    19d2:	0100                	addi	s0,sp,128
    19d4:	2005                	jal	19f4 <ti_2+0xb0>
    19d6:	0200                	addi	s0,sp,256
    19d8:	0204                	addi	s1,sp,256
    19da:	0306                	slli	t1,t1,0x1
    19dc:	097c                	addi	a5,sp,156
    19de:	0004                	0x4
    19e0:	0501                	addi	a0,a0,0
    19e2:	000d                	c.nop	3
    19e4:	0402                	c.slli64	s0
    19e6:	09090303          	lb	t1,144(s2)
    19ea:	0002                	c.slli64	zero
    19ec:	0501                	addi	a0,a0,0
    19ee:	0019                	c.nop	6
    19f0:	0402                	c.slli64	s0
    19f2:	00030603          	lb	a2,0(t1)
    19f6:	0009                	c.nop	2
    19f8:	0100                	addi	s0,sp,128
    19fa:	2305                	jal	1f1a <random_keys+0x446>
    19fc:	0200                	addi	s0,sp,256
    19fe:	0304                	addi	s1,sp,384
    1a00:	0a090003          	lb	zero,160(s2)
    1a04:	0100                	addi	s0,sp,128
    1a06:	1d05                	addi	s10,s10,-31
    1a08:	0200                	addi	s0,sp,256
    1a0a:	0304                	addi	s1,sp,384
    1a0c:	04090003          	lb	zero,64(s2)
    1a10:	0100                	addi	s0,sp,128
    1a12:	1305                	addi	t1,t1,-31
    1a14:	0200                	addi	s0,sp,256
    1a16:	0304                	addi	s1,sp,384
    1a18:	04090003          	lb	zero,64(s2)
    1a1c:	0100                	addi	s0,sp,128
    1a1e:	2005                	jal	1a3e <ti_2+0xfa>
    1a20:	0200                	addi	s0,sp,256
    1a22:	0304                	addi	s1,sp,384
    1a24:	04097f03          	0x4097f03
    1a28:	0100                	addi	s0,sp,128
    1a2a:	1d05                	addi	s10,s10,-31
    1a2c:	0200                	addi	s0,sp,256
    1a2e:	0304                	addi	s1,sp,384
    1a30:	02090103          	lb	sp,32(s2)
    1a34:	0100                	addi	s0,sp,128
    1a36:	1305                	addi	t1,t1,-31
    1a38:	0200                	addi	s0,sp,256
    1a3a:	0304                	addi	s1,sp,384
    1a3c:	02090003          	lb	zero,32(s2)
    1a40:	0100                	addi	s0,sp,128
    1a42:	2005                	jal	1a62 <ti_2+0x11e>
    1a44:	0200                	addi	s0,sp,256
    1a46:	0304                	addi	s1,sp,384
    1a48:	0306                	slli	t1,t1,0x1
    1a4a:	097f                	0x97f
    1a4c:	0002                	c.slli64	zero
    1a4e:	0501                	addi	a0,a0,0
    1a50:	0311                	addi	t1,t1,4
    1a52:	00040907          	0x40907
    1a56:	0501                	addi	a0,a0,0
    1a58:	061f 0003 0009      	0x90003061f
    1a5e:	0100                	addi	s0,sp,128
    1a60:	1705                	addi	a4,a4,-31
    1a62:	02090003          	lb	zero,32(s2)
    1a66:	0100                	addi	s0,sp,128
    1a68:	1305                	addi	t1,t1,-31
    1a6a:	0306                	slli	t1,t1,0x1
    1a6c:	097f                	0x97f
    1a6e:	0002                	c.slli64	zero
    1a70:	0501                	addi	a0,a0,0
    1a72:	0616                	slli	a2,a2,0x5
    1a74:	00090003          	lb	zero,0(s2)
    1a78:	0100                	addi	s0,sp,128
    1a7a:	1305                	addi	t1,t1,-31
    1a7c:	02090003          	lb	zero,32(s2)
    1a80:	0100                	addi	s0,sp,128
    1a82:	0d05                	addi	s10,s10,1
    1a84:	0200                	addi	s0,sp,256
    1a86:	0204                	addi	s1,sp,256
    1a88:	0306                	slli	t1,t1,0x1
    1a8a:	00040903          	lb	s2,0(s0)
    1a8e:	0501                	addi	a0,a0,0
    1a90:	0402001b          	0x402001b
    1a94:	0602                	c.slli64	a2
    1a96:	00090003          	lb	zero,0(s2)
    1a9a:	0100                	addi	s0,sp,128
    1a9c:	2005                	jal	1abc <ti_2+0x178>
    1a9e:	0200                	addi	s0,sp,256
    1aa0:	0204                	addi	s1,sp,256
    1aa2:	04097c03          	0x4097c03
    1aa6:	0100                	addi	s0,sp,128
    1aa8:	1305                	addi	t1,t1,-31
    1aaa:	0200                	addi	s0,sp,256
    1aac:	0204                	addi	s1,sp,256
    1aae:	04090403          	lb	s0,64(s2)
    1ab2:	0100                	addi	s0,sp,128
    1ab4:	2005                	jal	1ad4 <random_keys>
    1ab6:	0200                	addi	s0,sp,256
    1ab8:	0204                	addi	s1,sp,256
    1aba:	0306                	slli	t1,t1,0x1
    1abc:	097c                	addi	a5,sp,156
    1abe:	0004                	0x4
    1ac0:	0501                	addi	a0,a0,0
    1ac2:	0402000f          	0x402000f
    1ac6:	09140303          	lb	t1,145(s0)
    1aca:	0002                	c.slli64	zero
    1acc:	0501                	addi	a0,a0,0
    1ace:	04020017          	auipc	zero,0x4020
    1ad2:	00030603          	lb	a2,0(t1)
    1ad6:	0409                	addi	s0,s0,2
    1ad8:	0100                	addi	s0,sp,128
    1ada:	1b05                	addi	s6,s6,-31
    1adc:	0200                	addi	s0,sp,256
    1ade:	0304                	addi	s1,sp,384
    1ae0:	04090103          	lb	sp,64(s2)
    1ae4:	0100                	addi	s0,sp,128
    1ae6:	1605                	addi	a2,a2,-31
    1ae8:	0200                	addi	s0,sp,256
    1aea:	0304                	addi	s1,sp,384
    1aec:	02090003          	lb	zero,32(s2)
    1af0:	0100                	addi	s0,sp,128
    1af2:	1705                	addi	a4,a4,-31
    1af4:	0200                	addi	s0,sp,256
    1af6:	0304                	addi	s1,sp,384
    1af8:	02097f03          	0x2097f03
    1afc:	0100                	addi	s0,sp,128
    1afe:	0d05                	addi	s10,s10,1
    1b00:	0200                	addi	s0,sp,256
    1b02:	0304                	addi	s1,sp,384
    1b04:	0306                	slli	t1,t1,0x1
    1b06:	0901                	addi	s2,s2,0
    1b08:	0004                	0x4
    1b0a:	0501                	addi	a0,a0,0
    1b0c:	0020                	addi	s0,sp,8
    1b0e:	0402                	c.slli64	s0
    1b10:	7a030603          	lb	a2,1952(t1)
    1b14:	0009                	c.nop	2
    1b16:	0100                	addi	s0,sp,128
    1b18:	1605                	addi	a2,a2,-31
    1b1a:	0200                	addi	s0,sp,256
    1b1c:	0304                	addi	s1,sp,384
    1b1e:	02090603          	lb	a2,32(s2)
    1b22:	0100                	addi	s0,sp,128
    1b24:	2005                	jal	1b44 <random_keys+0x70>
    1b26:	0200                	addi	s0,sp,256
    1b28:	0304                	addi	s1,sp,384
    1b2a:	0306                	slli	t1,t1,0x1
    1b2c:	097a                	slli	s2,s2,0x1e
    1b2e:	0002                	c.slli64	zero
    1b30:	0501                	addi	a0,a0,0
    1b32:	030d                	addi	t1,t1,3
    1b34:	090c                	addi	a1,sp,144
    1b36:	0002                	c.slli64	zero
    1b38:	0501                	addi	a0,a0,0
    1b3a:	0003061b          	0x3061b
    1b3e:	0009                	c.nop	2
    1b40:	0100                	addi	s0,sp,128
    1b42:	2005                	jal	1b62 <random_keys+0x8e>
    1b44:	08090003          	lb	zero,128(s2)
    1b48:	0100                	addi	s0,sp,128
    1b4a:	1005                	c.nop	-31
    1b4c:	04090003          	lb	zero,64(s2)
    1b50:	0100                	addi	s0,sp,128
    1b52:	1e05                	addi	t3,t3,-31
    1b54:	0200                	addi	s0,sp,256
    1b56:	0204                	addi	s1,sp,256
    1b58:	0306                	slli	t1,t1,0x1
    1b5a:	097f                	0x97f
    1b5c:	0004                	0x4
    1b5e:	0501                	addi	a0,a0,0
    1b60:	000d                	c.nop	3
    1b62:	0402                	c.slli64	s0
    1b64:	090d0303          	lb	t1,144(s10)
    1b68:	0004                	0x4
    1b6a:	0501                	addi	a0,a0,0
    1b6c:	0020                	addi	s0,sp,8
    1b6e:	0402                	c.slli64	s0
    1b70:	00030603          	lb	a2,0(t1)
    1b74:	0009                	c.nop	2
    1b76:	0100                	addi	s0,sp,128
    1b78:	0200                	addi	s0,sp,256
    1b7a:	0304                	addi	s1,sp,384
    1b7c:	02097f03          	0x2097f03
    1b80:	0100                	addi	s0,sp,128
    1b82:	0200                	addi	s0,sp,256
    1b84:	0304                	addi	s1,sp,384
    1b86:	04090103          	lb	sp,64(s2)
    1b8a:	0100                	addi	s0,sp,128
    1b8c:	2505                	jal	21ac <_min_stack+0x1ac>
    1b8e:	0200                	addi	s0,sp,256
    1b90:	0304                	addi	s1,sp,384
    1b92:	04090003          	lb	zero,64(s2)
    1b96:	0100                	addi	s0,sp,128
    1b98:	1505                	addi	a0,a0,-31
    1b9a:	0200                	addi	s0,sp,256
    1b9c:	0304                	addi	s1,sp,384
    1b9e:	04090003          	lb	zero,64(s2)
    1ba2:	0100                	addi	s0,sp,128
    1ba4:	2005                	jal	1bc4 <random_keys+0xf0>
    1ba6:	0200                	addi	s0,sp,256
    1ba8:	0304                	addi	s1,sp,384
    1baa:	0306                	slli	t1,t1,0x1
    1bac:	097f                	0x97f
    1bae:	0004                	0x4
    1bb0:	0501                	addi	a0,a0,0
    1bb2:	0328                	addi	a0,sp,392
    1bb4:	090c                	addi	a1,sp,144
    1bb6:	0002                	c.slli64	zero
    1bb8:	0501                	addi	a0,a0,0
    1bba:	0305                	addi	t1,t1,1
    1bbc:	0902                	c.slli64	s2
    1bbe:	0000                	unimp
    1bc0:	0501                	addi	a0,a0,0
    1bc2:	0628                	addi	a0,sp,776
    1bc4:	00097e03          	0x97e03
    1bc8:	0100                	addi	s0,sp,128
    1bca:	36090003          	lb	zero,864(s2)
    1bce:	0100                	addi	s0,sp,128
    1bd0:	0905                	addi	s2,s2,1
    1bd2:	04090203          	lb	tp,64(s2)
    1bd6:	0100                	addi	s0,sp,128
    1bd8:	10090103          	lb	sp,256(s2)
    1bdc:	0100                	addi	s0,sp,128
    1bde:	0a097f03          	0xa097f03
    1be2:	0100                	addi	s0,sp,128
    1be4:	0505                	addi	a0,a0,1
    1be6:	0306                	slli	t1,t1,0x1
    1be8:	0901                	addi	s2,s2,0
    1bea:	006c                	addi	a1,sp,12
    1bec:	0501                	addi	a0,a0,0
    1bee:	0610                	addi	a2,sp,768
    1bf0:	00090603          	lb	a2,0(s2)
    1bf4:	0100                	addi	s0,sp,128
    1bf6:	0905                	addi	s2,s2,1
    1bf8:	04097a03          	0x4097a03
    1bfc:	0100                	addi	s0,sp,128
    1bfe:	02090603          	lb	a2,32(s2)
    1c02:	0100                	addi	s0,sp,128
    1c04:	0e05                	addi	t3,t3,1
    1c06:	0e090503          	lb	a0,224(s2)
    1c0a:	0100                	addi	s0,sp,128
    1c0c:	0905                	addi	s2,s2,1
    1c0e:	0a097503          	0xa097503
    1c12:	0100                	addi	s0,sp,128
    1c14:	0505                	addi	a0,a0,1
    1c16:	0306                	slli	t1,t1,0x1
    1c18:	0902                	c.slli64	s2
    1c1a:	0064                	addi	s1,sp,12
    1c1c:	0301                	addi	t1,t1,0
    1c1e:	0901                	addi	s2,s2,0
    1c20:	0000                	unimp
    1c22:	0301                	addi	t1,t1,0
    1c24:	0901                	addi	s2,s2,0
    1c26:	0000                	unimp
    1c28:	0301                	addi	t1,t1,0
    1c2a:	0901                	addi	s2,s2,0
    1c2c:	0000                	unimp
    1c2e:	0301                	addi	t1,t1,0
    1c30:	0901                	addi	s2,s2,0
    1c32:	0000                	unimp
    1c34:	0301                	addi	t1,t1,0
    1c36:	0901                	addi	s2,s2,0
    1c38:	0000                	unimp
    1c3a:	0301                	addi	t1,t1,0
    1c3c:	0901                	addi	s2,s2,0
    1c3e:	0000                	unimp
    1c40:	0301                	addi	t1,t1,0
    1c42:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    1c46:	0301                	addi	t1,t1,0
    1c48:	0901                	addi	s2,s2,0
    1c4a:	0000                	unimp
    1c4c:	0501                	addi	a0,a0,0
    1c4e:	060e                	slli	a2,a2,0x3
    1c50:	00090003          	lb	zero,0(s2)
    1c54:	0100                	addi	s0,sp,128
    1c56:	0505                	addi	a0,a0,1
    1c58:	0306                	slli	t1,t1,0x1
    1c5a:	0902                	c.slli64	s2
    1c5c:	0004                	0x4
    1c5e:	0501                	addi	a0,a0,0
    1c60:	0003060b          	0x3060b
    1c64:	0009                	c.nop	2
    1c66:	0100                	addi	s0,sp,128
    1c68:	1005                	c.nop	-31
    1c6a:	0200                	addi	s0,sp,256
    1c6c:	0104                	addi	s1,sp,128
    1c6e:	0306                	slli	t1,t1,0x1
    1c70:	0900                	addi	s0,sp,144
    1c72:	0002                	c.slli64	zero
    1c74:	0501                	addi	a0,a0,0
    1c76:	0005                	c.nop	1
    1c78:	0402                	c.slli64	s0
    1c7a:	0601                	addi	a2,a2,0
    1c7c:	00090003          	lb	zero,0(s2)
    1c80:	0100                	addi	s0,sp,128
    1c82:	06090603          	lb	a2,96(s2)
    1c86:	0100                	addi	s0,sp,128
    1c88:	1105                	addi	sp,sp,-31
    1c8a:	0200                	addi	s0,sp,256
    1c8c:	0104                	addi	s1,sp,128
    1c8e:	0306                	slli	t1,t1,0x1
    1c90:	0900                	addi	s0,sp,144
    1c92:	0004                	0x4
    1c94:	0501                	addi	a0,a0,0
    1c96:	0005                	c.nop	1
    1c98:	0402                	c.slli64	s0
    1c9a:	0601                	addi	a2,a2,0
    1c9c:	00090003          	lb	zero,0(s2)
    1ca0:	0100                	addi	s0,sp,128
    1ca2:	0b05                	addi	s6,s6,1
    1ca4:	04090703          	lb	a4,64(s2)
    1ca8:	0100                	addi	s0,sp,128
    1caa:	1805                	addi	a6,a6,-31
    1cac:	02090103          	lb	sp,32(s2)
    1cb0:	0100                	addi	s0,sp,128
    1cb2:	1005                	c.nop	-31
    1cb4:	0200                	addi	s0,sp,256
    1cb6:	0104                	addi	s1,sp,128
    1cb8:	0306                	slli	t1,t1,0x1
    1cba:	097f                	0x97f
    1cbc:	0008                	0x8
    1cbe:	0501                	addi	a0,a0,0
    1cc0:	0005                	c.nop	1
    1cc2:	0402                	c.slli64	s0
    1cc4:	0601                	addi	a2,a2,0
    1cc6:	00090003          	lb	zero,0(s2)
    1cca:	0100                	addi	s0,sp,128
    1ccc:	1605                	addi	a2,a2,-31
    1cce:	08090503          	lb	a0,128(s2)
    1cd2:	0100                	addi	s0,sp,128
    1cd4:	1805                	addi	a6,a6,-31
    1cd6:	08090103          	lb	sp,128(s2)
    1cda:	0100                	addi	s0,sp,128
    1cdc:	1005                	c.nop	-31
    1cde:	0200                	addi	s0,sp,256
    1ce0:	0104                	addi	s1,sp,128
    1ce2:	0306                	slli	t1,t1,0x1
    1ce4:	097f                	0x97f
    1ce6:	0008                	0x8
    1ce8:	0501                	addi	a0,a0,0
    1cea:	0005                	c.nop	1
    1cec:	0402                	c.slli64	s0
    1cee:	0601                	addi	a2,a2,0
    1cf0:	00090003          	lb	zero,0(s2)
    1cf4:	0100                	addi	s0,sp,128
    1cf6:	0306                	slli	t1,t1,0x1
    1cf8:	0905                	addi	s2,s2,1
    1cfa:	0004                	0x4
    1cfc:	0501                	addi	a0,a0,0
    1cfe:	061a                	slli	a2,a2,0x6
    1d00:	00090303          	lb	t1,0(s2)
    1d04:	0100                	addi	s0,sp,128
    1d06:	0a05                	addi	s4,s4,1
    1d08:	06097d03          	0x6097d03
    1d0c:	0100                	addi	s0,sp,128
    1d0e:	0505                	addi	a0,a0,1
    1d10:	0306                	slli	t1,t1,0x1
    1d12:	000c0903          	lb	s2,0(s8)
    1d16:	0501                	addi	a0,a0,0
    1d18:	0618                	addi	a4,sp,768
    1d1a:	02090103          	lb	sp,32(s2)
    1d1e:	0100                	addi	s0,sp,128
    1d20:	1405                	addi	s0,s0,-31
    1d22:	0200                	addi	s0,sp,256
    1d24:	0104                	addi	s1,sp,128
    1d26:	0306                	slli	t1,t1,0x1
    1d28:	097f                	0x97f
    1d2a:	0008                	0x8
    1d2c:	0501                	addi	a0,a0,0
    1d2e:	0005                	c.nop	1
    1d30:	0402                	c.slli64	s0
    1d32:	0601                	addi	a2,a2,0
    1d34:	00090003          	lb	zero,0(s2)
    1d38:	0100                	addi	s0,sp,128
    1d3a:	0306                	slli	t1,t1,0x1
    1d3c:	0906                	slli	s2,s2,0x1
    1d3e:	0004                	0x4
    1d40:	0501                	addi	a0,a0,0
    1d42:	060a                	slli	a2,a2,0x2
    1d44:	00090003          	lb	zero,0(s2)
    1d48:	0100                	addi	s0,sp,128
    1d4a:	0505                	addi	a0,a0,1
    1d4c:	0306                	slli	t1,t1,0x1
    1d4e:	0904                	addi	s1,sp,144
    1d50:	000c                	0xc
    1d52:	0501                	addi	a0,a0,0
    1d54:	061a                	slli	a2,a2,0x6
    1d56:	06090003          	lb	zero,96(s2)
    1d5a:	0100                	addi	s0,sp,128
    1d5c:	1805                	addi	a6,a6,-31
    1d5e:	02090103          	lb	sp,32(s2)
    1d62:	0100                	addi	s0,sp,128
    1d64:	1405                	addi	s0,s0,-31
    1d66:	0200                	addi	s0,sp,256
    1d68:	0104                	addi	s1,sp,128
    1d6a:	0306                	slli	t1,t1,0x1
    1d6c:	097f                	0x97f
    1d6e:	0008                	0x8
    1d70:	0501                	addi	a0,a0,0
    1d72:	0005                	c.nop	1
    1d74:	0402                	c.slli64	s0
    1d76:	0601                	addi	a2,a2,0
    1d78:	00090003          	lb	zero,0(s2)
    1d7c:	0100                	addi	s0,sp,128
    1d7e:	0306                	slli	t1,t1,0x1
    1d80:	0905                	addi	s2,s2,1
    1d82:	0004                	0x4
    1d84:	0501                	addi	a0,a0,0
    1d86:	060a                	slli	a2,a2,0x2
    1d88:	00090003          	lb	zero,0(s2)
    1d8c:	0100                	addi	s0,sp,128
    1d8e:	0505                	addi	a0,a0,1
    1d90:	0306                	slli	t1,t1,0x1
    1d92:	000c0903          	lb	s2,0(s8)
    1d96:	0501                	addi	a0,a0,0
    1d98:	0003060b          	0x3060b
    1d9c:	0209                	addi	tp,tp,2
    1d9e:	0100                	addi	s0,sp,128
    1da0:	1805                	addi	a6,a6,-31
    1da2:	02090003          	lb	zero,32(s2)
    1da6:	0100                	addi	s0,sp,128
    1da8:	1005                	c.nop	-31
    1daa:	0200                	addi	s0,sp,256
    1dac:	0104                	addi	s1,sp,128
    1dae:	0306                	slli	t1,t1,0x1
    1db0:	0900                	addi	s0,sp,144
    1db2:	0004                	0x4
    1db4:	0501                	addi	a0,a0,0
    1db6:	0005                	c.nop	1
    1db8:	0402                	c.slli64	s0
    1dba:	0601                	addi	a2,a2,0
    1dbc:	00090003          	lb	zero,0(s2)
    1dc0:	0100                	addi	s0,sp,128
    1dc2:	0306                	slli	t1,t1,0x1
    1dc4:	0906                	slli	s2,s2,0x1
    1dc6:	0004                	0x4
    1dc8:	0501                	addi	a0,a0,0
    1dca:	060a                	slli	a2,a2,0x2
    1dcc:	00090003          	lb	zero,0(s2)
    1dd0:	0100                	addi	s0,sp,128
    1dd2:	0505                	addi	a0,a0,1
    1dd4:	0306                	slli	t1,t1,0x1
    1dd6:	0904                	addi	s1,sp,144
    1dd8:	0008                	0x8
    1dda:	0501                	addi	a0,a0,0
    1ddc:	061a                	slli	a2,a2,0x6
    1dde:	00090003          	lb	zero,0(s2)
    1de2:	0100                	addi	s0,sp,128
    1de4:	1805                	addi	a6,a6,-31
    1de6:	0a090103          	lb	sp,160(s2)
    1dea:	0100                	addi	s0,sp,128
    1dec:	1405                	addi	s0,s0,-31
    1dee:	0200                	addi	s0,sp,256
    1df0:	0104                	addi	s1,sp,128
    1df2:	0306                	slli	t1,t1,0x1
    1df4:	097f                	0x97f
    1df6:	0008                	0x8
    1df8:	0501                	addi	a0,a0,0
    1dfa:	0005                	c.nop	1
    1dfc:	0402                	c.slli64	s0
    1dfe:	0601                	addi	a2,a2,0
    1e00:	02090003          	lb	zero,32(s2)
    1e04:	0100                	addi	s0,sp,128
    1e06:	1a05                	addi	s4,s4,-31
    1e08:	04090503          	lb	a0,64(s2)
    1e0c:	0100                	addi	s0,sp,128
    1e0e:	1805                	addi	a6,a6,-31
    1e10:	04090103          	lb	sp,64(s2)
    1e14:	0100                	addi	s0,sp,128
    1e16:	1a05                	addi	s4,s4,-31
    1e18:	08097f03          	0x8097f03
    1e1c:	0100                	addi	s0,sp,128
    1e1e:	1405                	addi	s0,s0,-31
    1e20:	0200                	addi	s0,sp,256
    1e22:	0104                	addi	s1,sp,128
    1e24:	0306                	slli	t1,t1,0x1
    1e26:	0900                	addi	s0,sp,144
    1e28:	0008                	0x8
    1e2a:	0501                	addi	a0,a0,0
    1e2c:	0005                	c.nop	1
    1e2e:	0402                	c.slli64	s0
    1e30:	0601                	addi	a2,a2,0
    1e32:	00090003          	lb	zero,0(s2)
    1e36:	0100                	addi	s0,sp,128
    1e38:	0306                	slli	t1,t1,0x1
    1e3a:	0906                	slli	s2,s2,0x1
    1e3c:	0004                	0x4
    1e3e:	0301                	addi	t1,t1,0
    1e40:	0902                	c.slli64	s2
    1e42:	0000                	unimp
    1e44:	0501                	addi	a0,a0,0
    1e46:	0601                	addi	a2,a2,0
    1e48:	00090103          	lb	sp,0(s2)
    1e4c:	0100                	addi	s0,sp,128
    1e4e:	0905                	addi	s2,s2,1
    1e50:	0200                	addi	s0,sp,256
    1e52:	0304                	addi	s1,sp,384
    1e54:	0306                	slli	t1,t1,0x1
    1e56:	7fbd                	lui	t6,0xfffef
    1e58:	4009                	c.li	zero,2
    1e5a:	0100                	addi	s0,sp,128
    1e5c:	1205                	addi	tp,tp,-31
    1e5e:	0200                	addi	s0,sp,256
    1e60:	0304                	addi	s1,sp,384
    1e62:	0306                	slli	t1,t1,0x1
    1e64:	0900                	addi	s0,sp,144
    1e66:	0000                	unimp
    1e68:	0501                	addi	a0,a0,0
    1e6a:	04020017          	auipc	zero,0x4020
    1e6e:	7f030603          	lb	a2,2032(t1)
    1e72:	0a09                	addi	s4,s4,2
    1e74:	0100                	addi	s0,sp,128
    1e76:	0905                	addi	s2,s2,1
    1e78:	0200                	addi	s0,sp,256
    1e7a:	0304                	addi	s1,sp,384
    1e7c:	04090703          	lb	a4,64(s2)
    1e80:	0100                	addi	s0,sp,128
    1e82:	0e05                	addi	t3,t3,1
    1e84:	0200                	addi	s0,sp,256
    1e86:	0304                	addi	s1,sp,384
    1e88:	0306                	slli	t1,t1,0x1
    1e8a:	0900                	addi	s0,sp,144
    1e8c:	0004                	0x4
    1e8e:	0501                	addi	a0,a0,0
    1e90:	0009                	c.nop	2
    1e92:	0402                	c.slli64	s0
    1e94:	01030603          	lb	a2,16(t1)
    1e98:	0a09                	addi	s4,s4,2
    1e9a:	0100                	addi	s0,sp,128
    1e9c:	0e05                	addi	t3,t3,1
    1e9e:	0200                	addi	s0,sp,256
    1ea0:	0304                	addi	s1,sp,384
    1ea2:	0306                	slli	t1,t1,0x1
    1ea4:	0900                	addi	s0,sp,144
    1ea6:	0000                	unimp
    1ea8:	0501                	addi	a0,a0,0
    1eaa:	0019                	c.nop	6
    1eac:	0402                	c.slli64	s0
    1eae:	7e030603          	lb	a2,2016(t1)
    1eb2:	0a09                	addi	s4,s4,2
    1eb4:	0100                	addi	s0,sp,128
    1eb6:	0905                	addi	s2,s2,1
    1eb8:	0200                	addi	s0,sp,256
    1eba:	0304                	addi	s1,sp,384
    1ebc:	04090803          	lb	a6,64(s2)
    1ec0:	0100                	addi	s0,sp,128
    1ec2:	1b05                	addi	s6,s6,-31
    1ec4:	0200                	addi	s0,sp,256
    1ec6:	0304                	addi	s1,sp,384
    1ec8:	0306                	slli	t1,t1,0x1
    1eca:	0900                	addi	s0,sp,144
    1ecc:	0004                	0x4
    1ece:	0501                	addi	a0,a0,0
    1ed0:	0018                	0x18
    1ed2:	0402                	c.slli64	s0
    1ed4:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ed8:	0004                	0x4
    1eda:	0501                	addi	a0,a0,0
    1edc:	0402001b          	0x402001b
    1ee0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ee4:	0004                	0x4
    1ee6:	0501                	addi	a0,a0,0
    1ee8:	0018                	0x18
    1eea:	0402                	c.slli64	s0
    1eec:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ef0:	0002                	c.slli64	zero
    1ef2:	0501                	addi	a0,a0,0
    1ef4:	04020017          	auipc	zero,0x4020
    1ef8:	097f0303          	lb	t1,151(t5)
    1efc:	0002                	c.slli64	zero
    1efe:	0501                	addi	a0,a0,0
    1f00:	0018                	0x18
    1f02:	0402                	c.slli64	s0
    1f04:	09010303          	lb	t1,144(sp)
    1f08:	0002                	c.slli64	zero
    1f0a:	0501                	addi	a0,a0,0
    1f0c:	04020017          	auipc	zero,0x4020
    1f10:	7f030603          	lb	a2,2032(t1)
    1f14:	0209                	addi	tp,tp,2
    1f16:	0100                	addi	s0,sp,128
    1f18:	0905                	addi	s2,s2,1
    1f1a:	0200                	addi	s0,sp,256
    1f1c:	0304                	addi	s1,sp,384
    1f1e:	02090603          	lb	a2,32(s2)
    1f22:	0100                	addi	s0,sp,128
    1f24:	1805                	addi	a6,a6,-31
    1f26:	0200                	addi	s0,sp,256
    1f28:	0304                	addi	s1,sp,384
    1f2a:	0306                	slli	t1,t1,0x1
    1f2c:	0900                	addi	s0,sp,144
    1f2e:	0000                	unimp
    1f30:	0501                	addi	a0,a0,0
    1f32:	0402001b          	0x402001b
    1f36:	7f030603          	lb	a2,2032(t1)
    1f3a:	0a09                	addi	s4,s4,2
    1f3c:	0100                	addi	s0,sp,128
    1f3e:	0905                	addi	s2,s2,1
    1f40:	0200                	addi	s0,sp,256
    1f42:	0304                	addi	s1,sp,384
    1f44:	06090903          	lb	s2,96(s2)
    1f48:	0100                	addi	s0,sp,128
    1f4a:	1c05                	addi	s8,s8,-31
    1f4c:	0200                	addi	s0,sp,256
    1f4e:	0304                	addi	s1,sp,384
    1f50:	0306                	slli	t1,t1,0x1
    1f52:	0900                	addi	s0,sp,144
    1f54:	0000                	unimp
    1f56:	0501                	addi	a0,a0,0
    1f58:	0018                	0x18
    1f5a:	0402                	c.slli64	s0
    1f5c:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1f60:	0002                	c.slli64	zero
    1f62:	0501                	addi	a0,a0,0
    1f64:	001f 0402 0603      	0x6030402001f
    1f6a:	08097f03          	0x8097f03
    1f6e:	0100                	addi	s0,sp,128
    1f70:	0905                	addi	s2,s2,1
    1f72:	0200                	addi	s0,sp,256
    1f74:	0304                	addi	s1,sp,384
    1f76:	06090b03          	lb	s6,96(s2)
    1f7a:	0100                	addi	s0,sp,128
    1f7c:	1c05                	addi	s8,s8,-31
    1f7e:	0200                	addi	s0,sp,256
    1f80:	0304                	addi	s1,sp,384
    1f82:	0306                	slli	t1,t1,0x1
    1f84:	0900                	addi	s0,sp,144
    1f86:	0004                	0x4
    1f88:	0501                	addi	a0,a0,0
    1f8a:	0018                	0x18
    1f8c:	0402                	c.slli64	s0
    1f8e:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1f92:	0008                	0x8
    1f94:	0501                	addi	a0,a0,0
    1f96:	001f 0402 0303      	0x3030402001f
    1f9c:	097f                	0x97f
    1f9e:	0002                	c.slli64	zero
    1fa0:	0501                	addi	a0,a0,0
    1fa2:	0018                	0x18
    1fa4:	0402                	c.slli64	s0
    1fa6:	09010303          	lb	t1,144(sp)
    1faa:	0002                	c.slli64	zero
    1fac:	0501                	addi	a0,a0,0
    1fae:	001f 0402 0603      	0x6030402001f
    1fb4:	02097f03          	0x2097f03
    1fb8:	0100                	addi	s0,sp,128
    1fba:	0905                	addi	s2,s2,1
    1fbc:	0200                	addi	s0,sp,256
    1fbe:	0304                	addi	s1,sp,384
    1fc0:	02090903          	lb	s2,32(s2)
    1fc4:	0100                	addi	s0,sp,128
    1fc6:	1605                	addi	a2,a2,-31
    1fc8:	0200                	addi	s0,sp,256
    1fca:	0304                	addi	s1,sp,384
    1fcc:	0306                	slli	t1,t1,0x1
    1fce:	0900                	addi	s0,sp,144
    1fd0:	0000                	unimp
    1fd2:	0501                	addi	a0,a0,0
    1fd4:	001d                	c.nop	7
    1fd6:	0402                	c.slli64	s0
    1fd8:	097f0303          	lb	t1,151(t5)
    1fdc:	0002                	c.slli64	zero
    1fde:	0501                	addi	a0,a0,0
    1fe0:	0016                	c.slli	zero,0x5
    1fe2:	0402                	c.slli64	s0
    1fe4:	09010303          	lb	t1,144(sp)
    1fe8:	0004                	0x4
    1fea:	0501                	addi	a0,a0,0
    1fec:	0402000f          	0x402000f
    1ff0:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    1ff4:	0004                	0x4
    1ff6:	0501                	addi	a0,a0,0
    1ff8:	001d                	c.nop	7
    1ffa:	0402                	c.slli64	s0
    1ffc:	7f030603          	lb	a2,2032(t1)
    2000:	0409                	addi	s0,s0,2
    2002:	0100                	addi	s0,sp,128
    2004:	0905                	addi	s2,s2,1
    2006:	0200                	addi	s0,sp,256
    2008:	0304                	addi	s1,sp,384
    200a:	02090b03          	lb	s6,32(s2)
    200e:	0100                	addi	s0,sp,128
    2010:	1c05                	addi	s8,s8,-31
    2012:	0200                	addi	s0,sp,256
    2014:	0304                	addi	s1,sp,384
    2016:	0306                	slli	t1,t1,0x1
    2018:	0900                	addi	s0,sp,144
    201a:	0000                	unimp
    201c:	0501                	addi	a0,a0,0
    201e:	0018                	0x18
    2020:	0402                	c.slli64	s0
    2022:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2026:	0004                	0x4
    2028:	0501                	addi	a0,a0,0
    202a:	001f 0402 0603      	0x6030402001f
    2030:	08097f03          	0x8097f03
    2034:	0100                	addi	s0,sp,128
    2036:	0905                	addi	s2,s2,1
    2038:	0200                	addi	s0,sp,256
    203a:	0304                	addi	s1,sp,384
    203c:	04090603          	lb	a2,64(s2)
    2040:	0100                	addi	s0,sp,128
    2042:	1805                	addi	a6,a6,-31
    2044:	0200                	addi	s0,sp,256
    2046:	0304                	addi	s1,sp,384
    2048:	0306                	slli	t1,t1,0x1
    204a:	0900                	addi	s0,sp,144
    204c:	0004                	0x4
    204e:	0501                	addi	a0,a0,0
    2050:	001f 0402 0303      	0x3030402001f
    2056:	0900                	addi	s0,sp,144
    2058:	0004                	0x4
    205a:	0501                	addi	a0,a0,0
    205c:	0018                	0x18
    205e:	0402                	c.slli64	s0
    2060:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2064:	0004                	0x4
    2066:	0501                	addi	a0,a0,0
    2068:	0021                	c.nop	8
    206a:	0402                	c.slli64	s0
    206c:	097f0303          	lb	t1,151(t5)
    2070:	0002                	c.slli64	zero
    2072:	0501                	addi	a0,a0,0
    2074:	0018                	0x18
    2076:	0402                	c.slli64	s0
    2078:	09010303          	lb	t1,144(sp)
    207c:	0002                	c.slli64	zero
    207e:	0501                	addi	a0,a0,0
    2080:	0021                	c.nop	8
    2082:	0402                	c.slli64	s0
    2084:	7f030603          	lb	a2,2032(t1)
    2088:	0209                	addi	tp,tp,2
    208a:	0100                	addi	s0,sp,128
    208c:	4b05                	li	s6,1
    208e:	02090c03          	lb	s8,32(s2)
    2092:	0100                	addi	s0,sp,128
    2094:	0505                	addi	a0,a0,1
    2096:	00090203          	lb	tp,0(s2)
    209a:	0100                	addi	s0,sp,128
    209c:	00090103          	lb	sp,0(s2)
    20a0:	0100                	addi	s0,sp,128
    20a2:	00090203          	lb	tp,0(s2)
    20a6:	0100                	addi	s0,sp,128
    20a8:	4b05                	li	s6,1
    20aa:	0306                	slli	t1,t1,0x1
    20ac:	0000097b          	0x97b
    20b0:	0501                	addi	a0,a0,0
    20b2:	0309                	addi	t1,t1,2
    20b4:	0905                	addi	s2,s2,1
    20b6:	000c                	0xc
    20b8:	0501                	addi	a0,a0,0
    20ba:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    20be:	0004                	0x4
    20c0:	0501                	addi	a0,a0,0
    20c2:	0309                	addi	t1,t1,2
    20c4:	0905                	addi	s2,s2,1
    20c6:	0002                	c.slli64	zero
    20c8:	0501                	addi	a0,a0,0
    20ca:	097b034b          	fnmsub.s	ft6,fs6,fs7,ft1,rne
    20ce:	000a                	c.slli	zero,0x2
    20d0:	0301                	addi	t1,t1,0
    20d2:	0900                	addi	s0,sp,144
    20d4:	0006                	c.slli	zero,0x1
    20d6:	0501                	addi	a0,a0,0
    20d8:	0309                	addi	t1,t1,2
    20da:	0905                	addi	s2,s2,1
    20dc:	0004                	0x4
    20de:	0501                	addi	a0,a0,0
    20e0:	0605                	addi	a2,a2,1
    20e2:	02090103          	lb	sp,32(s2)
    20e6:	0100                	addi	s0,sp,128
    20e8:	00090103          	lb	sp,0(s2)
    20ec:	0100                	addi	s0,sp,128
    20ee:	00090303          	lb	t1,0(s2)
    20f2:	0100                	addi	s0,sp,128
    20f4:	0c05                	addi	s8,s8,1
    20f6:	0306                	slli	t1,t1,0x1
    20f8:	0900                	addi	s0,sp,144
    20fa:	0000                	unimp
    20fc:	0501                	addi	a0,a0,0
    20fe:	0301                	addi	t1,t1,0
    2100:	00120907          	0x120907
    2104:	0501                	addi	a0,a0,0
    2106:	030c                	addi	a1,sp,384
    2108:	0979                	addi	s2,s2,30
    210a:	0006                	c.slli	zero,0x1
    210c:	0501                	addi	a0,a0,0
    210e:	0601                	addi	a2,a2,0
    2110:	02090703          	lb	a4,32(s2)
    2114:	0100                	addi	s0,sp,128
    2116:	0a05                	addi	s4,s4,1
    2118:	0306                	slli	t1,t1,0x1
    211a:	00000903          	lb	s2,0(zero) # 0 <__DYNAMIC>
    211e:	0501                	addi	a0,a0,0
    2120:	0301                	addi	t1,t1,0
    2122:	097d                	addi	s2,s2,31
    2124:	0004                	0x4
    2126:	0501                	addi	a0,a0,0
    2128:	0605                	addi	a2,a2,1
    212a:	04090303          	lb	t1,64(s2)
    212e:	0100                	addi	s0,sp,128
    2130:	0a05                	addi	s4,s4,1
    2132:	0306                	slli	t1,t1,0x1
    2134:	0900                	addi	s0,sp,144
    2136:	0000                	unimp
    2138:	0501                	addi	a0,a0,0
    213a:	0605                	addi	a2,a2,1
    213c:	10090203          	lb	tp,256(s2)
    2140:	0100                	addi	s0,sp,128
    2142:	1a05                	addi	s4,s4,-31
    2144:	0306                	slli	t1,t1,0x1
    2146:	0900                	addi	s0,sp,144
    2148:	0000                	unimp
    214a:	0501                	addi	a0,a0,0
    214c:	0014                	0x14
    214e:	0402                	c.slli64	s0
    2150:	0601                	addi	a2,a2,0
    2152:	08090003          	lb	zero,128(s2)
    2156:	0100                	addi	s0,sp,128
    2158:	0505                	addi	a0,a0,1
    215a:	0200                	addi	s0,sp,256
    215c:	0104                	addi	s1,sp,128
    215e:	0306                	slli	t1,t1,0x1
    2160:	0900                	addi	s0,sp,144
    2162:	0000                	unimp
    2164:	0501                	addi	a0,a0,0
    2166:	0301                	addi	t1,t1,0
    2168:	0909                	addi	s2,s2,2
    216a:	0004                	0x4
    216c:	0501                	addi	a0,a0,0
    216e:	0009                	c.nop	2
    2170:	0402                	c.slli64	s0
    2172:	78030603          	lb	a2,1920(t1)
    2176:	1009                	c.nop	-30
    2178:	0100                	addi	s0,sp,128
    217a:	1905                	addi	s2,s2,-31
    217c:	0200                	addi	s0,sp,256
    217e:	0304                	addi	s1,sp,384
    2180:	0306                	slli	t1,t1,0x1
    2182:	0900                	addi	s0,sp,144
    2184:	0000                	unimp
    2186:	0501                	addi	a0,a0,0
    2188:	001f 0402 0303      	0x3030402001f
    218e:	097f                	0x97f
    2190:	0008                	0x8
    2192:	0501                	addi	a0,a0,0
    2194:	0015                	c.nop	5
    2196:	0402                	c.slli64	s0
    2198:	09010303          	lb	t1,144(sp)
    219c:	0004                	0x4
    219e:	0501                	addi	a0,a0,0
    21a0:	001f 0402 0603      	0x6030402001f
    21a6:	04097f03          	0x4097f03
    21aa:	0100                	addi	s0,sp,128
    21ac:	6c05                	lui	s8,0x1
    21ae:	02090c03          	lb	s8,32(s2)
    21b2:	0100                	addi	s0,sp,128
    21b4:	0505                	addi	a0,a0,1
    21b6:	00090203          	lb	tp,0(s2)
    21ba:	0100                	addi	s0,sp,128
    21bc:	00090103          	lb	sp,0(s2)
    21c0:	0100                	addi	s0,sp,128
    21c2:	00090103          	lb	sp,0(s2)
    21c6:	0100                	addi	s0,sp,128
    21c8:	00090103          	lb	sp,0(s2)
    21cc:	0100                	addi	s0,sp,128
    21ce:	00090103          	lb	sp,0(s2)
    21d2:	0100                	addi	s0,sp,128
    21d4:	00090103          	lb	sp,0(s2)
    21d8:	0100                	addi	s0,sp,128
    21da:	00090303          	lb	t1,0(s2)
    21de:	0100                	addi	s0,sp,128
    21e0:	6c05                	lui	s8,0x1
    21e2:	0306                	slli	t1,t1,0x1
    21e4:	0976                	slli	s2,s2,0x1d
    21e6:	0000                	unimp
    21e8:	0501                	addi	a0,a0,0
    21ea:	031e                	slli	t1,t1,0x7
    21ec:	0911                	addi	s2,s2,4
    21ee:	0008                	0x8
    21f0:	0501                	addi	a0,a0,0
    21f2:	036c                	addi	a1,sp,396
    21f4:	0006096f          	jal	s2,621f4 <_stack_start+0x521f4>
    21f8:	0501                	addi	a0,a0,0
    21fa:	0309                	addi	t1,t1,2
    21fc:	090a                	slli	s2,s2,0x2
    21fe:	000a                	c.slli	zero,0x2
    2200:	0501                	addi	a0,a0,0
    2202:	036c                	addi	a1,sp,396
    2204:	0976                	slli	s2,s2,0x1d
    2206:	0004                	0x4
    2208:	0501                	addi	a0,a0,0
    220a:	0309                	addi	t1,t1,2
    220c:	090a                	slli	s2,s2,0x2
    220e:	0004                	0x4
    2210:	0501                	addi	a0,a0,0
    2212:	036c                	addi	a1,sp,396
    2214:	0976                	slli	s2,s2,0x1d
    2216:	0004                	0x4
    2218:	0301                	addi	t1,t1,0
    221a:	0900                	addi	s0,sp,144
    221c:	0008                	0x8
    221e:	0501                	addi	a0,a0,0
    2220:	030a                	slli	t1,t1,0x2
    2222:	090e                	slli	s2,s2,0x3
    2224:	0002                	c.slli64	zero
    2226:	0501                	addi	a0,a0,0
    2228:	0309                	addi	t1,t1,2
    222a:	097c                	addi	a5,sp,156
    222c:	0004                	0x4
    222e:	0501                	addi	a0,a0,0
    2230:	0605                	addi	a2,a2,1
    2232:	04090403          	lb	s0,64(s2)
    2236:	0100                	addi	s0,sp,128
    2238:	0a05                	addi	s4,s4,1
    223a:	0306                	slli	t1,t1,0x1
    223c:	0900                	addi	s0,sp,144
    223e:	0000                	unimp
    2240:	0501                	addi	a0,a0,0
    2242:	0605                	addi	a2,a2,1
    2244:	12090303          	lb	t1,288(s2)
    2248:	0100                	addi	s0,sp,128
    224a:	0b05                	addi	s6,s6,1
    224c:	0306                	slli	t1,t1,0x1
    224e:	0900                	addi	s0,sp,144
    2250:	0004                	0x4
    2252:	0501                	addi	a0,a0,0
    2254:	0014                	0x14
    2256:	0402                	c.slli64	s0
    2258:	0601                	addi	a2,a2,0
    225a:	02090003          	lb	zero,32(s2)
    225e:	0100                	addi	s0,sp,128
    2260:	0505                	addi	a0,a0,1
    2262:	0200                	addi	s0,sp,256
    2264:	0104                	addi	s1,sp,128
    2266:	0306                	slli	t1,t1,0x1
    2268:	0900                	addi	s0,sp,144
    226a:	0000                	unimp
    226c:	0501                	addi	a0,a0,0
    226e:	0316                	slli	t1,t1,0x5
    2270:	0906                	slli	s2,s2,0x1
    2272:	0004                	0x4
    2274:	0501                	addi	a0,a0,0
    2276:	030c                	addi	a1,sp,384
    2278:	097f                	0x97f
    227a:	0006                	c.slli	zero,0x1
    227c:	0501                	addi	a0,a0,0
    227e:	0011                	c.nop	4
    2280:	0402                	c.slli64	s0
    2282:	0601                	addi	a2,a2,0
    2284:	02090003          	lb	zero,32(s2)
    2288:	0100                	addi	s0,sp,128
    228a:	0505                	addi	a0,a0,1
    228c:	0200                	addi	s0,sp,256
    228e:	0104                	addi	s1,sp,128
    2290:	0306                	slli	t1,t1,0x1
    2292:	0900                	addi	s0,sp,144
    2294:	0000                	unimp
    2296:	0601                	addi	a2,a2,0
    2298:	04090803          	lb	a6,64(s2)
    229c:	0100                	addi	s0,sp,128
    229e:	0905                	addi	s2,s2,1
    22a0:	0306                	slli	t1,t1,0x1
    22a2:	0900                	addi	s0,sp,144
    22a4:	0000                	unimp
    22a6:	0501                	addi	a0,a0,0
    22a8:	0605                	addi	a2,a2,1
    22aa:	0c090403          	lb	s0,192(s2)
    22ae:	0100                	addi	s0,sp,128
    22b0:	0a05                	addi	s4,s4,1
    22b2:	0306                	slli	t1,t1,0x1
    22b4:	0900                	addi	s0,sp,144
    22b6:	0000                	unimp
    22b8:	0501                	addi	a0,a0,0
    22ba:	0605                	addi	a2,a2,1
    22bc:	0c090103          	lb	sp,192(s2)
    22c0:	0100                	addi	s0,sp,128
    22c2:	1405                	addi	s0,s0,-31
    22c4:	0200                	addi	s0,sp,256
    22c6:	0104                	addi	s1,sp,128
    22c8:	02090003          	lb	zero,32(s2)
    22cc:	0100                	addi	s0,sp,128
    22ce:	0505                	addi	a0,a0,1
    22d0:	0200                	addi	s0,sp,256
    22d2:	0104                	addi	s1,sp,128
    22d4:	0306                	slli	t1,t1,0x1
    22d6:	0900                	addi	s0,sp,144
    22d8:	0000                	unimp
    22da:	0501                	addi	a0,a0,0
    22dc:	0301                	addi	t1,t1,0
    22de:	00040907          	0x40907
    22e2:	0501                	addi	a0,a0,0
    22e4:	0009                	c.nop	2
    22e6:	0402                	c.slli64	s0
    22e8:	68030603          	lb	a2,1664(t1)
    22ec:	1609                	addi	a2,a2,-30
    22ee:	0100                	addi	s0,sp,128
    22f0:	1905                	addi	s2,s2,-31
    22f2:	0200                	addi	s0,sp,256
    22f4:	0304                	addi	s1,sp,384
    22f6:	0306                	slli	t1,t1,0x1
    22f8:	0900                	addi	s0,sp,144
    22fa:	0000                	unimp
    22fc:	0501                	addi	a0,a0,0
    22fe:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2302:	097f0303          	lb	t1,151(t5)
    2306:	0008                	0x8
    2308:	0501                	addi	a0,a0,0
    230a:	0015                	c.nop	5
    230c:	0402                	c.slli64	s0
    230e:	09010303          	lb	t1,144(sp)
    2312:	0004                	0x4
    2314:	0501                	addi	a0,a0,0
    2316:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    231a:	7f030603          	lb	a2,2032(t1)
    231e:	0409                	addi	s0,s0,2
    2320:	0100                	addi	s0,sp,128
    2322:	0905                	addi	s2,s2,1
    2324:	02090603          	lb	a2,32(s2)
    2328:	0100                	addi	s0,sp,128
    232a:	0e05                	addi	t3,t3,1
    232c:	0306                	slli	t1,t1,0x1
    232e:	0900                	addi	s0,sp,144
    2330:	0000                	unimp
    2332:	0501                	addi	a0,a0,0
    2334:	0900030b          	0x900030b
    2338:	0002                	c.slli64	zero
    233a:	0501                	addi	a0,a0,0
    233c:	060d                	addi	a2,a2,3
    233e:	04090303          	lb	t1,64(s2)
    2342:	0100                	addi	s0,sp,128
    2344:	1905                	addi	s2,s2,-31
    2346:	0306                	slli	t1,t1,0x1
    2348:	0900                	addi	s0,sp,144
    234a:	0000                	unimp
    234c:	0501                	addi	a0,a0,0
    234e:	09000313          	li	t1,144
    2352:	0004                	0x4
    2354:	0501                	addi	a0,a0,0
    2356:	0018                	0x18
    2358:	0402                	c.slli64	s0
    235a:	0602                	c.slli64	a2
    235c:	02097c03          	0x2097c03
    2360:	0100                	addi	s0,sp,128
    2362:	0905                	addi	s2,s2,1
    2364:	0200                	addi	s0,sp,256
    2366:	0304                	addi	s1,sp,384
    2368:	06090e03          	lb	t3,96(s2)
    236c:	0100                	addi	s0,sp,128
    236e:	1905                	addi	s2,s2,-31
    2370:	0200                	addi	s0,sp,256
    2372:	0304                	addi	s1,sp,384
    2374:	0306                	slli	t1,t1,0x1
    2376:	0900                	addi	s0,sp,144
    2378:	0000                	unimp
    237a:	0501                	addi	a0,a0,0
    237c:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2380:	097f0303          	lb	t1,151(t5)
    2384:	0008                	0x8
    2386:	0501                	addi	a0,a0,0
    2388:	0015                	c.nop	5
    238a:	0402                	c.slli64	s0
    238c:	09010303          	lb	t1,144(sp)
    2390:	0004                	0x4
    2392:	0501                	addi	a0,a0,0
    2394:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    2398:	7f030603          	lb	a2,2032(t1)
    239c:	0409                	addi	s0,s0,2
    239e:	0100                	addi	s0,sp,128
    23a0:	0209                	addi	tp,tp,2
    23a2:	0000                	unimp
    23a4:	0101                	addi	sp,sp,0
    23a6:	0b05                	addi	s6,s6,1
    23a8:	0500                	addi	s0,sp,640
    23aa:	7002                	flw	ft0,32(sp)
    23ac:	0300000f          	fence	rw,unknown
    23b0:	05a1                	addi	a1,a1,8
    23b2:	0501                	addi	a0,a0,0
    23b4:	0305                	addi	t1,t1,1
    23b6:	0901                	addi	s2,s2,0
    23b8:	0000                	unimp
    23ba:	0301                	addi	t1,t1,0
    23bc:	0901                	addi	s2,s2,0
    23be:	0000                	unimp
    23c0:	0301                	addi	t1,t1,0
    23c2:	0901                	addi	s2,s2,0
    23c4:	0000                	unimp
    23c6:	0301                	addi	t1,t1,0
    23c8:	0901                	addi	s2,s2,0
    23ca:	0000                	unimp
    23cc:	0301                	addi	t1,t1,0
    23ce:	0901                	addi	s2,s2,0
    23d0:	0000                	unimp
    23d2:	0301                	addi	t1,t1,0
    23d4:	0901                	addi	s2,s2,0
    23d6:	0000                	unimp
    23d8:	0301                	addi	t1,t1,0
    23da:	0902                	c.slli64	s2
    23dc:	0000                	unimp
    23de:	0501                	addi	a0,a0,0
    23e0:	7803060b          	0x7803060b
    23e4:	0009                	c.nop	2
    23e6:	0100                	addi	s0,sp,128
    23e8:	0905                	addi	s2,s2,1
    23ea:	04090803          	lb	a6,64(s2)
    23ee:	0100                	addi	s0,sp,128
    23f0:	0b05                	addi	s6,s6,1
    23f2:	0e097803          	0xe097803
    23f6:	0100                	addi	s0,sp,128
    23f8:	1205                	addi	tp,tp,-31
    23fa:	10091803          	lh	a6,256(s2)
    23fe:	0100                	addi	s0,sp,128
    2400:	0905                	addi	s2,s2,1
    2402:	04097003          	0x4097003
    2406:	0100                	addi	s0,sp,128
    2408:	0505                	addi	a0,a0,1
    240a:	0306                	slli	t1,t1,0x1
    240c:	0901                	addi	s2,s2,0
    240e:	0002                	c.slli64	zero
    2410:	0301                	addi	t1,t1,0
    2412:	0901                	addi	s2,s2,0
    2414:	0000                	unimp
    2416:	0301                	addi	t1,t1,0
    2418:	0901                	addi	s2,s2,0
    241a:	0000                	unimp
    241c:	0301                	addi	t1,t1,0
    241e:	0901                	addi	s2,s2,0
    2420:	0000                	unimp
    2422:	0301                	addi	t1,t1,0
    2424:	0901                	addi	s2,s2,0
    2426:	0000                	unimp
    2428:	0301                	addi	t1,t1,0
    242a:	0901                	addi	s2,s2,0
    242c:	0000                	unimp
    242e:	0301                	addi	t1,t1,0
    2430:	0901                	addi	s2,s2,0
    2432:	0000                	unimp
    2434:	0301                	addi	t1,t1,0
    2436:	0909                	addi	s2,s2,2
    2438:	0000                	unimp
    243a:	0501                	addi	a0,a0,0
    243c:	0612                	slli	a2,a2,0x4
    243e:	00090003          	lb	zero,0(s2)
    2442:	0100                	addi	s0,sp,128
    2444:	0c05                	addi	s8,s8,1
    2446:	0c090103          	lb	sp,192(s2)
    244a:	0100                	addi	s0,sp,128
    244c:	1205                	addi	tp,tp,-31
    244e:	0a097f03          	0xa097f03
    2452:	0100                	addi	s0,sp,128
    2454:	0505                	addi	a0,a0,1
    2456:	0306                	slli	t1,t1,0x1
    2458:	0901                	addi	s2,s2,0
    245a:	0002                	c.slli64	zero
    245c:	0501                	addi	a0,a0,0
    245e:	0612                	slli	a2,a2,0x4
    2460:	00090103          	lb	sp,0(s2)
    2464:	0100                	addi	s0,sp,128
    2466:	0c05                	addi	s8,s8,1
    2468:	04097f03          	0x4097f03
    246c:	0100                	addi	s0,sp,128
    246e:	0505                	addi	a0,a0,1
    2470:	0306                	slli	t1,t1,0x1
    2472:	0901                	addi	s2,s2,0
    2474:	0002                	c.slli64	zero
    2476:	0501                	addi	a0,a0,0
    2478:	0612                	slli	a2,a2,0x4
    247a:	00090003          	lb	zero,0(s2)
    247e:	0100                	addi	s0,sp,128
    2480:	0505                	addi	a0,a0,1
    2482:	0306                	slli	t1,t1,0x1
    2484:	0902                	c.slli64	s2
    2486:	0004                	0x4
    2488:	0501                	addi	a0,a0,0
    248a:	0310                	addi	a2,sp,384
    248c:	0900                	addi	s0,sp,144
    248e:	0000                	unimp
    2490:	0501                	addi	a0,a0,0
    2492:	0605                	addi	a2,a2,1
    2494:	00090003          	lb	zero,0(s2)
    2498:	0100                	addi	s0,sp,128
    249a:	0905                	addi	s2,s2,1
    249c:	0200                	addi	s0,sp,256
    249e:	0304                	addi	s1,sp,384
    24a0:	0306                	slli	t1,t1,0x1
    24a2:	0902                	c.slli64	s2
    24a4:	0004                	0x4
    24a6:	0501                	addi	a0,a0,0
    24a8:	001f 0402 0603      	0x6030402001f
    24ae:	00090003          	lb	zero,0(s2)
    24b2:	0100                	addi	s0,sp,128
    24b4:	1905                	addi	s2,s2,-31
    24b6:	0200                	addi	s0,sp,256
    24b8:	0304                	addi	s1,sp,384
    24ba:	06090003          	lb	zero,96(s2)
    24be:	0100                	addi	s0,sp,128
    24c0:	1705                	addi	a4,a4,-31
    24c2:	0200                	addi	s0,sp,256
    24c4:	0304                	addi	s1,sp,384
    24c6:	0306                	slli	t1,t1,0x1
    24c8:	097e                	slli	s2,s2,0x1f
    24ca:	0006                	c.slli	zero,0x1
    24cc:	0501                	addi	a0,a0,0
    24ce:	0010                	0x10
    24d0:	0402                	c.slli64	s0
    24d2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    24d6:	0000                	unimp
    24d8:	0501                	addi	a0,a0,0
    24da:	0005                	c.nop	1
    24dc:	0402                	c.slli64	s0
    24de:	00030603          	lb	a2,0(t1)
    24e2:	0209                	addi	tp,tp,2
    24e4:	0100                	addi	s0,sp,128
    24e6:	0905                	addi	s2,s2,1
    24e8:	0200                	addi	s0,sp,256
    24ea:	0304                	addi	s1,sp,384
    24ec:	0306                	slli	t1,t1,0x1
    24ee:	0909                	addi	s2,s2,2
    24f0:	0004                	0x4
    24f2:	0501                	addi	a0,a0,0
    24f4:	0402001b          	0x402001b
    24f8:	097e0303          	lb	t1,151(t3) # 1a097 <_stack_start+0xa097>
    24fc:	0000                	unimp
    24fe:	0501                	addi	a0,a0,0
    2500:	0010                	0x10
    2502:	0402                	c.slli64	s0
    2504:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2508:	0000                	unimp
    250a:	0501                	addi	a0,a0,0
    250c:	0009                	c.nop	2
    250e:	0402                	c.slli64	s0
    2510:	09090303          	lb	t1,144(s2)
    2514:	000c                	0xc
    2516:	0501                	addi	a0,a0,0
    2518:	0026                	c.slli	zero,0x9
    251a:	0402                	c.slli64	s0
    251c:	00030603          	lb	a2,0(t1)
    2520:	0009                	c.nop	2
    2522:	0100                	addi	s0,sp,128
    2524:	2005                	jal	2544 <_min_stack+0x544>
    2526:	0200                	addi	s0,sp,256
    2528:	0304                	addi	s1,sp,384
    252a:	06090003          	lb	zero,96(s2)
    252e:	0100                	addi	s0,sp,128
    2530:	1f05                	addi	t5,t5,-31
    2532:	0200                	addi	s0,sp,256
    2534:	0304                	addi	s1,sp,384
    2536:	0306                	slli	t1,t1,0x1
    2538:	097e                	slli	s2,s2,0x1f
    253a:	0004                	0x4
    253c:	0501                	addi	a0,a0,0
    253e:	0014                	0x14
    2540:	0402                	c.slli64	s0
    2542:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2546:	0000                	unimp
    2548:	0501                	addi	a0,a0,0
    254a:	0005                	c.nop	1
    254c:	0402                	c.slli64	s0
    254e:	00030603          	lb	a2,0(t1)
    2552:	0009                	c.nop	2
    2554:	0100                	addi	s0,sp,128
    2556:	0905                	addi	s2,s2,1
    2558:	0200                	addi	s0,sp,256
    255a:	0304                	addi	s1,sp,384
    255c:	0306                	slli	t1,t1,0x1
    255e:	0909                	addi	s2,s2,2
    2560:	0004                	0x4
    2562:	0501                	addi	a0,a0,0
    2564:	001f 0402 0303      	0x3030402001f
    256a:	097e                	slli	s2,s2,0x1f
    256c:	0000                	unimp
    256e:	0501                	addi	a0,a0,0
    2570:	0014                	0x14
    2572:	0402                	c.slli64	s0
    2574:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2578:	0000                	unimp
    257a:	0501                	addi	a0,a0,0
    257c:	0009                	c.nop	2
    257e:	0402                	c.slli64	s0
    2580:	09090303          	lb	t1,144(s2)
    2584:	000c                	0xc
    2586:	0501                	addi	a0,a0,0
    2588:	04020023          	sb	zero,64(tp) # 40 <__DYNAMIC+0x40>
    258c:	00030603          	lb	a2,0(t1)
    2590:	0009                	c.nop	2
    2592:	0100                	addi	s0,sp,128
    2594:	1d05                	addi	s10,s10,-31
    2596:	0200                	addi	s0,sp,256
    2598:	0304                	addi	s1,sp,384
    259a:	06090003          	lb	zero,96(s2)
    259e:	0100                	addi	s0,sp,128
    25a0:	1f05                	addi	t5,t5,-31
    25a2:	0200                	addi	s0,sp,256
    25a4:	0304                	addi	s1,sp,384
    25a6:	0306                	slli	t1,t1,0x1
    25a8:	097e                	slli	s2,s2,0x1f
    25aa:	0004                	0x4
    25ac:	0501                	addi	a0,a0,0
    25ae:	0014                	0x14
    25b0:	0402                	c.slli64	s0
    25b2:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    25b6:	0000                	unimp
    25b8:	0501                	addi	a0,a0,0
    25ba:	0005                	c.nop	1
    25bc:	0402                	c.slli64	s0
    25be:	00030603          	lb	a2,0(t1)
    25c2:	0009                	c.nop	2
    25c4:	0100                	addi	s0,sp,128
    25c6:	0905                	addi	s2,s2,1
    25c8:	0200                	addi	s0,sp,256
    25ca:	0304                	addi	s1,sp,384
    25cc:	0306                	slli	t1,t1,0x1
    25ce:	0909                	addi	s2,s2,2
    25d0:	000c                	0xc
    25d2:	0501                	addi	a0,a0,0
    25d4:	0022                	c.slli	zero,0x8
    25d6:	0402                	c.slli64	s0
    25d8:	00030603          	lb	a2,0(t1)
    25dc:	0009                	c.nop	2
    25de:	0100                	addi	s0,sp,128
    25e0:	1c05                	addi	s8,s8,-31
    25e2:	0200                	addi	s0,sp,256
    25e4:	0304                	addi	s1,sp,384
    25e6:	06090003          	lb	zero,96(s2)
    25ea:	0100                	addi	s0,sp,128
    25ec:	2105                	jal	2a0c <_min_stack+0xa0c>
    25ee:	0200                	addi	s0,sp,256
    25f0:	0304                	addi	s1,sp,384
    25f2:	0306                	slli	t1,t1,0x1
    25f4:	097e                	slli	s2,s2,0x1f
    25f6:	0004                	0x4
    25f8:	0501                	addi	a0,a0,0
    25fa:	0014                	0x14
    25fc:	0402                	c.slli64	s0
    25fe:	09000303          	lb	t1,144(zero) # 90 <instr_add+0x4>
    2602:	0000                	unimp
    2604:	0501                	addi	a0,a0,0
    2606:	0005                	c.nop	1
    2608:	0402                	c.slli64	s0
    260a:	00030603          	lb	a2,0(t1)
    260e:	0009                	c.nop	2
    2610:	0100                	addi	s0,sp,128
    2612:	0306                	slli	t1,t1,0x1
    2614:	0908                	addi	a0,sp,144
    2616:	0004                	0x4
    2618:	0501                	addi	a0,a0,0
    261a:	0612                	slli	a2,a2,0x4
    261c:	00090003          	lb	zero,0(s2)
    2620:	0100                	addi	s0,sp,128
    2622:	1305                	addi	t1,t1,-31
    2624:	08090103          	lb	sp,128(s2)
    2628:	0100                	addi	s0,sp,128
    262a:	1205                	addi	tp,tp,-31
    262c:	08090103          	lb	sp,128(s2)
    2630:	0100                	addi	s0,sp,128
    2632:	1305                	addi	t1,t1,-31
    2634:	04097f03          	0x4097f03
    2638:	0100                	addi	s0,sp,128
    263a:	1205                	addi	tp,tp,-31
    263c:	04097f03          	0x4097f03
    2640:	0100                	addi	s0,sp,128
    2642:	0505                	addi	a0,a0,1
    2644:	0306                	slli	t1,t1,0x1
    2646:	0901                	addi	s2,s2,0
    2648:	0002                	c.slli64	zero
    264a:	0501                	addi	a0,a0,0
    264c:	00030613          	mv	a2,t1
    2650:	0009                	c.nop	2
    2652:	0100                	addi	s0,sp,128
    2654:	1205                	addi	tp,tp,-31
    2656:	02090103          	lb	sp,32(s2)
    265a:	0100                	addi	s0,sp,128
    265c:	02090903          	lb	s2,32(s2)
    2660:	0100                	addi	s0,sp,128
    2662:	1305                	addi	t1,t1,-31
    2664:	08097603          	0x8097603
    2668:	0100                	addi	s0,sp,128
    266a:	0505                	addi	a0,a0,1
    266c:	0306                	slli	t1,t1,0x1
    266e:	0901                	addi	s2,s2,0
    2670:	0002                	c.slli64	zero
    2672:	0301                	addi	t1,t1,0
    2674:	0909                	addi	s2,s2,2
    2676:	0000                	unimp
    2678:	0501                	addi	a0,a0,0
    267a:	0612                	slli	a2,a2,0x4
    267c:	00090003          	lb	zero,0(s2)
    2680:	0100                	addi	s0,sp,128
    2682:	0505                	addi	a0,a0,1
    2684:	0306                	slli	t1,t1,0x1
    2686:	0901                	addi	s2,s2,0
    2688:	0002                	c.slli64	zero
    268a:	0501                	addi	a0,a0,0
    268c:	00030613          	mv	a2,t1
    2690:	0009                	c.nop	2
    2692:	0100                	addi	s0,sp,128
    2694:	0505                	addi	a0,a0,1
    2696:	0306                	slli	t1,t1,0x1
    2698:	0901                	addi	s2,s2,0
    269a:	0014                	0x14
    269c:	0501                	addi	a0,a0,0
    269e:	0612                	slli	a2,a2,0x4
    26a0:	00090003          	lb	zero,0(s2)
    26a4:	0100                	addi	s0,sp,128
    26a6:	1a05                	addi	s4,s4,-31
    26a8:	04091b03          	lh	s6,64(s2)
    26ac:	0100                	addi	s0,sp,128
    26ae:	1205                	addi	tp,tp,-31
    26b0:	04096503          	0x4096503
    26b4:	0100                	addi	s0,sp,128
    26b6:	0505                	addi	a0,a0,1
    26b8:	0306                	slli	t1,t1,0x1
    26ba:	00020913          	mv	s2,tp
    26be:	0501                	addi	a0,a0,0
    26c0:	0310                	addi	a2,sp,384
    26c2:	0900                	addi	s0,sp,144
    26c4:	0000                	unimp
    26c6:	0501                	addi	a0,a0,0
    26c8:	0612                	slli	a2,a2,0x4
    26ca:	00096d03          	0x96d03
    26ce:	0100                	addi	s0,sp,128
    26d0:	1a05                	addi	s4,s4,-31
    26d2:	02091b03          	lh	s6,32(s2)
    26d6:	0100                	addi	s0,sp,128
    26d8:	0505                	addi	a0,a0,1
    26da:	04097803          	0x4097803
    26de:	0100                	addi	s0,sp,128
    26e0:	0905                	addi	s2,s2,1
    26e2:	0306                	slli	t1,t1,0x1
    26e4:	0901                	addi	s2,s2,0
    26e6:	0004                	0x4
    26e8:	0501                	addi	a0,a0,0
    26ea:	0003060b          	0x3060b
    26ee:	0009                	c.nop	2
    26f0:	0100                	addi	s0,sp,128
    26f2:	2705                	jal	2e12 <_min_stack+0xe12>
    26f4:	02090003          	lb	zero,32(s2)
    26f8:	0100                	addi	s0,sp,128
    26fa:	0b05                	addi	s6,s6,1
    26fc:	04090003          	lb	zero,64(s2)
    2700:	0100                	addi	s0,sp,128
    2702:	0d05                	addi	s10,s10,1
    2704:	0306                	slli	t1,t1,0x1
    2706:	0902                	c.slli64	s2
    2708:	000a                	c.slli	zero,0x2
    270a:	0501                	addi	a0,a0,0
    270c:	061a                	slli	a2,a2,0x6
    270e:	00090003          	lb	zero,0(s2)
    2712:	0100                	addi	s0,sp,128
    2714:	0d05                	addi	s10,s10,1
    2716:	0306                	slli	t1,t1,0x1
    2718:	0902                	c.slli64	s2
    271a:	000a                	c.slli	zero,0x2
    271c:	0501                	addi	a0,a0,0
    271e:	0305                	addi	t1,t1,1
    2720:	0909                	addi	s2,s2,2
    2722:	0000                	unimp
    2724:	0501                	addi	a0,a0,0
    2726:	0601                	addi	a2,a2,0
    2728:	00090103          	lb	sp,0(s2)
    272c:	0100                	addi	s0,sp,128
    272e:	0d05                	addi	s10,s10,1
    2730:	0200                	addi	s0,sp,256
    2732:	0204                	addi	s1,sp,256
    2734:	0306                	slli	t1,t1,0x1
    2736:	0979                	addi	s2,s2,30
    2738:	0018                	0x18
    273a:	0501                	addi	a0,a0,0
    273c:	001a                	c.slli	zero,0x6
    273e:	0402                	c.slli64	s0
    2740:	0602                	c.slli64	a2
    2742:	00090003          	lb	zero,0(s2)
    2746:	0100                	addi	s0,sp,128
    2748:	1805                	addi	a6,a6,-31
    274a:	0200                	addi	s0,sp,256
    274c:	0204                	addi	s1,sp,256
    274e:	0306                	slli	t1,t1,0x1
    2750:	0978                	addi	a4,sp,156
    2752:	0002                	c.slli64	zero
    2754:	0501                	addi	a0,a0,0
    2756:	0010                	0x10
    2758:	0402                	c.slli64	s0
    275a:	0302                	c.slli64	t1
    275c:	0900                	addi	s0,sp,144
    275e:	0000                	unimp
    2760:	0501                	addi	a0,a0,0
    2762:	0005                	c.nop	1
    2764:	0402                	c.slli64	s0
    2766:	0602                	c.slli64	a2
    2768:	02090003          	lb	zero,32(s2)
    276c:	0100                	addi	s0,sp,128
    276e:	0609                	addi	a2,a2,2
    2770:	0000                	unimp
    2772:	0101                	addi	sp,sp,0
    2774:	0150                	addi	a2,sp,132
    2776:	0000                	unimp
    2778:	001d0003          	lb	zero,1(s10)
    277c:	0000                	unimp
    277e:	0101                	addi	sp,sp,0
    2780:	000d0efb          	0xd0efb
    2784:	0101                	addi	sp,sp,0
    2786:	0101                	addi	sp,sp,0
    2788:	0000                	unimp
    278a:	0100                	addi	s0,sp,128
    278c:	0000                	unimp
    278e:	0001                	nop
    2790:	30747263          	bgeu	s0,t2,2a94 <_min_stack+0xa94>
    2794:	532e                	lw	t1,232(sp)
    2796:	0000                	unimp
    2798:	0000                	unimp
    279a:	0000                	unimp
    279c:	0205                	addi	tp,tp,1
    279e:	0d74                	addi	a3,sp,668
    27a0:	0000                	unimp
    27a2:	0315                	addi	t1,t1,5
    27a4:	0904                	addi	s1,sp,144
    27a6:	0004                	0x4
    27a8:	0301                	addi	t1,t1,0
    27aa:	0901                	addi	s2,s2,0
    27ac:	0004                	0x4
    27ae:	0301                	addi	t1,t1,0
    27b0:	0901                	addi	s2,s2,0
    27b2:	0002                	c.slli64	zero
    27b4:	0301                	addi	t1,t1,0
    27b6:	0901                	addi	s2,s2,0
    27b8:	0002                	c.slli64	zero
    27ba:	0301                	addi	t1,t1,0
    27bc:	0901                	addi	s2,s2,0
    27be:	0002                	c.slli64	zero
    27c0:	0301                	addi	t1,t1,0
    27c2:	0901                	addi	s2,s2,0
    27c4:	0002                	c.slli64	zero
    27c6:	0301                	addi	t1,t1,0
    27c8:	0901                	addi	s2,s2,0
    27ca:	0002                	c.slli64	zero
    27cc:	0301                	addi	t1,t1,0
    27ce:	0901                	addi	s2,s2,0
    27d0:	0002                	c.slli64	zero
    27d2:	0301                	addi	t1,t1,0
    27d4:	0901                	addi	s2,s2,0
    27d6:	0002                	c.slli64	zero
    27d8:	0301                	addi	t1,t1,0
    27da:	0901                	addi	s2,s2,0
    27dc:	0002                	c.slli64	zero
    27de:	0301                	addi	t1,t1,0
    27e0:	0901                	addi	s2,s2,0
    27e2:	0002                	c.slli64	zero
    27e4:	0301                	addi	t1,t1,0
    27e6:	0901                	addi	s2,s2,0
    27e8:	0002                	c.slli64	zero
    27ea:	0301                	addi	t1,t1,0
    27ec:	0901                	addi	s2,s2,0
    27ee:	0002                	c.slli64	zero
    27f0:	0301                	addi	t1,t1,0
    27f2:	0901                	addi	s2,s2,0
    27f4:	0002                	c.slli64	zero
    27f6:	0301                	addi	t1,t1,0
    27f8:	0901                	addi	s2,s2,0
    27fa:	0002                	c.slli64	zero
    27fc:	0301                	addi	t1,t1,0
    27fe:	0901                	addi	s2,s2,0
    2800:	0002                	c.slli64	zero
    2802:	0301                	addi	t1,t1,0
    2804:	0901                	addi	s2,s2,0
    2806:	0002                	c.slli64	zero
    2808:	0301                	addi	t1,t1,0
    280a:	0901                	addi	s2,s2,0
    280c:	0002                	c.slli64	zero
    280e:	0301                	addi	t1,t1,0
    2810:	0901                	addi	s2,s2,0
    2812:	0002                	c.slli64	zero
    2814:	0301                	addi	t1,t1,0
    2816:	0901                	addi	s2,s2,0
    2818:	0002                	c.slli64	zero
    281a:	0301                	addi	t1,t1,0
    281c:	0901                	addi	s2,s2,0
    281e:	0002                	c.slli64	zero
    2820:	0301                	addi	t1,t1,0
    2822:	0901                	addi	s2,s2,0
    2824:	0002                	c.slli64	zero
    2826:	0301                	addi	t1,t1,0
    2828:	0901                	addi	s2,s2,0
    282a:	0002                	c.slli64	zero
    282c:	0301                	addi	t1,t1,0
    282e:	0901                	addi	s2,s2,0
    2830:	0002                	c.slli64	zero
    2832:	0301                	addi	t1,t1,0
    2834:	0901                	addi	s2,s2,0
    2836:	0002                	c.slli64	zero
    2838:	0301                	addi	t1,t1,0
    283a:	0901                	addi	s2,s2,0
    283c:	0002                	c.slli64	zero
    283e:	0301                	addi	t1,t1,0
    2840:	0901                	addi	s2,s2,0
    2842:	0002                	c.slli64	zero
    2844:	0301                	addi	t1,t1,0
    2846:	0901                	addi	s2,s2,0
    2848:	0002                	c.slli64	zero
    284a:	0301                	addi	t1,t1,0
    284c:	0901                	addi	s2,s2,0
    284e:	0002                	c.slli64	zero
    2850:	0301                	addi	t1,t1,0
    2852:	0901                	addi	s2,s2,0
    2854:	0002                	c.slli64	zero
    2856:	0301                	addi	t1,t1,0
    2858:	0901                	addi	s2,s2,0
    285a:	0002                	c.slli64	zero
    285c:	0301                	addi	t1,t1,0
    285e:	00020903          	lb	s2,0(tp) # 0 <__DYNAMIC>
    2862:	0301                	addi	t1,t1,0
    2864:	0906                	slli	s2,s2,0x1
    2866:	0008                	0x8
    2868:	0301                	addi	t1,t1,0
    286a:	0901                	addi	s2,s2,0
    286c:	0008                	0x8
    286e:	0301                	addi	t1,t1,0
    2870:	0902                	c.slli64	s2
    2872:	0008                	0x8
    2874:	0301                	addi	t1,t1,0
    2876:	00040903          	lb	s2,0(s0)
    287a:	0301                	addi	t1,t1,0
    287c:	0901                	addi	s2,s2,0
    287e:	0004                	0x4
    2880:	0301                	addi	t1,t1,0
    2882:	0901                	addi	s2,s2,0
    2884:	0002                	c.slli64	zero
    2886:	0301                	addi	t1,t1,0
    2888:	0906                	slli	s2,s2,0x1
    288a:	0004                	0x4
    288c:	0301                	addi	t1,t1,0
    288e:	0901                	addi	s2,s2,0
    2890:	0004                	0x4
    2892:	0301                	addi	t1,t1,0
    2894:	0901                	addi	s2,s2,0
    2896:	0004                	0x4
    2898:	0901                	addi	s2,s2,0
    289a:	0004                	0x4
    289c:	0100                	addi	s0,sp,128
    289e:	0001                	nop
    28a0:	0205                	addi	tp,tp,1
    28a2:	0000                	unimp
    28a4:	0000                	unimp
    28a6:	0100cb03          	lbu	s6,16(ra)
    28aa:	7c090103          	lb	sp,1984(s2)
    28ae:	0100                	addi	s0,sp,128
    28b0:	04090403          	lb	s0,64(s2)
    28b4:	0100                	addi	s0,sp,128
    28b6:	04090403          	lb	s0,64(s2)
    28ba:	0100                	addi	s0,sp,128
    28bc:	04090403          	lb	s0,64(s2)
    28c0:	0100                	addi	s0,sp,128
    28c2:	0409                	addi	s0,s0,2
    28c4:	0000                	unimp
    28c6:	0101                	addi	sp,sp,0

Disassembly of section .debug_str:

00000000 <.debug_str>:
  .endr
   0:	645f 6f73 685f      	0x685f6f73645f
   6:	6e61                	lui	t3,0x18
   8:	6c64                	flw	fs1,92(s0)
   a:	0065                	c.nop	25
   c:	6f70                	flw	fa2,92(a4)
   e:	616c                	flw	fa1,68(a0)
  10:	5f00                	lw	s0,56(a4)
  12:	657a6973          	csrrsi	s2,0x657,20
  16:	5f00                	lw	s0,56(a4)
  18:	6172                	flw	ft2,28(sp)
  1a:	646e                	flw	fs0,216(sp)
  1c:	3834                	fld	fa3,112(s0)
  1e:	5f00                	lw	s0,56(a4)
  20:	6d65                	lui	s10,0x19
  22:	7265                	lui	tp,0xffff9
  24:	636e6567          	0x636e6567
  28:	0079                	c.nop	30
  2a:	6f70                	flw	fa2,92(a4)
  2c:	796c                	flw	fa1,116(a0)
  2e:	756d                	lui	a0,0xffffb
  30:	746c                	flw	fa1,108(s0)
  32:	0032                	c.slli	zero,0xc
  34:	645f 7461 0061      	0x617461645f
  3a:	6e69                	lui	t3,0x1a
  3c:	5f727473          	csrrci	s0,0x5f7,4
  40:	6461                	lui	s0,0x18
  42:	0064                	addi	s1,sp,12
  44:	775f 7263 6f74      	0x6f747263775f
  4a:	626d                	lui	tp,0x1b
  4c:	735f 6174 6574      	0x65746174735f
  52:	5f00                	lw	s0,56(a4)
  54:	72736377          	0x72736377
  58:	6f74                	flw	fa3,92(a4)
  5a:	626d                	lui	tp,0x1b
  5c:	74735f73          	csrrwi	t5,0x747,6
  60:	7461                	lui	s0,0xffff8
  62:	0065                	c.nop	25
  64:	5f5f 7562 6c69      	0x6c6975625f5f
  6a:	6974                	flw	fa3,84(a0)
  6c:	5f6e                	lw	t5,248(sp)
  6e:	656d                	lui	a0,0x1b
  70:	736d                	lui	t1,0xffffb
  72:	7465                	lui	s0,0xffff9
  74:	6c00                	flw	fs0,24(s0)
  76:	20676e6f          	jal	t3,7627c <_stack_start+0x6627c>
  7a:	6f6c                	flw	fa1,92(a4)
  jal x0, default_exc_handler
  7c:	676e                	flw	fa4,216(sp)
  7e:	7520                	flw	fs0,104(a0)
  jal x0, reset_handler
  80:	736e                	flw	ft6,248(sp)
  82:	6769                	lui	a4,0x1a
  jal x0, default_exc_handler
  84:	656e                	flw	fa0,216(sp)
  86:	2064                	fld	fs1,192(s0)
  jal x0, default_exc_handler
  88:	6e69                	lui	t3,0x1a
  8a:	0074                	addi	a3,sp,12
    asm volatile(
  8c:	6544                	flw	fs1,12(a0)
  8e:	654d5f63          	bge	s10,s4,6ec <ext_euclid+0x6a>
    for(i=0;i<(length/3);i++) {
  92:	67617373          	csrrci	t1,0x676,2
  96:	0065                	c.nop	25
  98:	6c5f 6662 6973      	0x697366626c5f
  9e:	657a                	flw	fa0,156(sp)
}
  a0:	7200                	flw	fs0,32(a2)
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	6e61                	lui	t3,0x18
  a4:	6f64                	flw	fs1,92(a4)
    asm volatile(
  a6:	5f6d                	li	t5,-5
  a8:	7379656b          	0x7379656b
  ac:	5f00                	lw	s0,56(a4)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
    asm volatile(
  b4:	5f65                	li	t5,-7
  b6:	0074                	addi	a3,sp,12
}
  b8:	72636573          	csrrsi	a0,0x726,6
    for(i=0;i<(length/3);i++) {
  bc:	7465                	lui	s0,0xffff9
  be:	6b5f 7965 665f      	0x665f79656b5f
  c4:	7300                	flw	fs0,32(a4)
  c6:	6365                	lui	t1,0x19
}
  c8:	6572                	flw	fa0,28(sp)
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  ca:	5f74                	lw	a3,124(a4)
  cc:	5f79656b          	0x5f79656b
    asm volatile(
  d0:	6d5f0067          	jr	1749(t5)
  d4:	7262                	flw	ft4,56(sp)
  d6:	6f74                	flw	fa3,92(a4)
    for(i=0;i<(length/3);i++) {
  d8:	735f6377          	0x735f6377
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  dc:	6174                	flw	fa3,68(a0)
  de:	6574                	flw	fa3,76(a0)
  e0:	5f00                	lw	s0,56(a4)
  e2:	6f746377          	0x6f746377
    int line[size_b][size_a + size_b];
  e6:	626d                	lui	tp,0x1b
  e8:	735f 6174 6574      	0x65746174735f
  ee:	5f00                	lw	s0,56(a4)
  f0:	745f 5f6d 6573      	0x65735f6d745f
  f6:	6f6c0063          	beq	s8,s6,7d6 <ext_euclid+0x154>
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fa:	676e                	flw	fa4,216(sp)
  fc:	6c20                	flw	fs0,88(s0)
  fe:	20676e6f          	jal	t3,76304 <_stack_start+0x66304>
 102:	6e69                	lui	t3,0x1a
 104:	0074                	addi	a3,sp,12
 106:	657a6973          	csrrsi	s2,0x657,20
 10a:	4e5f 7000 6c6f      	0x6c6f70004e5f
 110:	6d79                	lui	s10,0x1e
    int line[size_b][size_a + size_b];
 112:	6c75                	lui	s8,0x1d
    int pola[size_a];
 114:	0074                	addi	a3,sp,12
 116:	755f 7562 0066      	0x667562755f
    int line[size_b][size_a + size_b];
 11c:	625f 7361 0065      	0x657361625f
 122:	6d6f682f          	0x6d6f682f
    int pola[size_a];
 126:	2f65                	jal	8de <ext_euclid+0x25c>
    int polb[size_b];
 128:	6f74                	flw	fa3,92(a4)
 12a:	6170                	flw	fa2,68(a0)
 12c:	636c                	flw	fa1,68(a4)
    int pola[size_a];
 12e:	7365442f          	0x7365442f
    int polb[size_b];
 132:	706f746b          	0x706f746b
            line[i][j] = 0;
 136:	6f72702f          	0x6f72702f
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 13a:	656a                	flw	fa0,152(sp)
    int pola[size_a];
 13c:	656c                	flw	fa1,76(a0)
 13e:	2f72                	fld	ft10,280(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 140:	75636c6f          	jal	s8,36896 <_stack_start+0x26896>
    int line[size_b][size_a + size_b];
 144:	2f6d                	jal	8fe <ext_euclid+0x27c>
    int polb[size_b];
 146:	2e36                	fld	ft8,328(sp)
            line[i][j] = 0;
 148:	6461                	lui	s0,0x18
 14a:	2b64                	fld	fs1,208(a4)
 14c:	7165                	addi	sp,sp,-400
    for (i = 0; i < size_b; ++i){
 14e:	0075                	c.nop	29
 150:	5f5f 6d74 685f      	0x685f6d745f5f
            product[j] = 0;
 156:	0072756f          	jal	a0,2795c <_stack_start+0x1795c>
    for (i = 0; i < size_b; ++i){
 15a:	5f5f 6673 5f00      	0x5f0066735f5f
    array_equ(pola,a,size_a);
 160:	655f6e6f          	jal	t3,f6fb4 <_stack_start+0xe6fb4>
 164:	6978                	flw	fa4,84(a0)
 166:	5f74                	lw	a3,124(a4)
 168:	7261                	lui	tp,0xffff8
 16a:	5f007367          	0x5f007367
    for (i = 0; i < size_a; ++i){
 16e:	6b6f6f63          	bltu	t5,s6,82c <ext_euclid+0x1aa>
 172:	6569                	lui	a0,0x1a
 174:	5f00                	lw	s0,56(a4)
 176:	735f 6c67 6575      	0x65756c67735f
 17c:	7200                	flw	fs0,32(a2)
    array_equ(polb,b,size_b);
 17e:	7365                	lui	t1,0xffff9
 180:	0031                	c.nop	12
 182:	6572                	flw	fa0,28(sp)
 184:	5f003273          	csrrc	tp,0x5f0,zero
   for (i = 0; i < size_b; ++i){
 188:	6c66                	flw	fs8,88(sp)
 18a:	6761                	lui	a4,0x18
 18c:	695f0073          	0x695f0073
    if(star_mult == 1){
 190:	78635f73          	csrrwi	t5,0x786,6
 194:	0061                	c.nop	24
 196:	735f 6474 6e69      	0x6e696474735f
 19c:	5f00                	lw	s0,56(a4)
 19e:	6c62                	flw	fs8,24(sp)
 1a0:	7a69736b          	0x7a69736b
        for (j = size_b -1; j >= 0; j = j-1){
 1a4:	0065                	c.nop	25
            for (k = size_a-1; k >= 0; k = k-1 ){
 1a6:	7270                	flw	fa2,100(a2)
 1a8:	6375646f          	jal	s0,56fde <_stack_start+0x46fde>
            product[j] = 0;
 1ac:	0074                	addi	a3,sp,12
 1ae:	6f70                	flw	fa2,92(a4)
            line[i][j] = 0;
 1b0:	796c                	flw	fa1,116(a0)
 1b2:	6964                	flw	fs1,84(a0)
            product[j] = 0;
 1b4:	0076                	c.slli	zero,0x1d
 1b6:	6f70                	flw	fa2,92(a4)
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	796c                	flw	fa1,116(a0)
 1ba:	0066                	c.slli	zero,0x19
 1bc:	635f 7476 7562      	0x75627476635f
    for (i = 0; i < size_b; ++i){
 1c2:	0066                	c.slli	zero,0x19
 1c4:	6f5f 6666 6573      	0x657366666f5f
        for(j = 0; j < size_a + size_b -1; ++j){
 1ca:	0074                	addi	a3,sp,12
            pola[i] = pola[i] + mod;
 1cc:	6d5f 7362 7472      	0x747273626d5f
        while (pola[i] < 0){
 1d2:	7363776f          	jal	a4,37908 <_stack_start+0x27908>
        pola[i] = pola[i] % mod;
 1d6:	735f 6174 6574      	0x65746174735f
    for (i = 0; i < size_a; ++i){
 1dc:	5f00                	lw	s0,56(a4)
        pola[i] = pola[i] % mod;
 1de:	626d                	lui	tp,0x1b
 1e0:	6c72                	flw	fs8,28(sp)
    for (i = 0; i < size_a; ++i){
 1e2:	6e65                	lui	t3,0x19
            polb[i] = polb[i] + mod;
 1e4:	735f 6174 6574      	0x65746174735f
        while (polb[i] < 0){
 1ea:	5f00                	lw	s0,56(a4)
 1ec:	6e66                	flw	ft8,88(sp)
        polb[i] = polb[i] % mod;
 1ee:	7261                	lui	tp,0xffff8
 1f0:	6e007367          	0x6e007367
   for (i = 0; i < size_b; ++i){
 1f4:	7274                	flw	fa3,100(a2)
        polb[i] = polb[i] % mod;
 1f6:	5f75                	li	t5,-3
 1f8:	6564                	flw	fs1,76(a0)
   for (i = 0; i < size_b; ++i){
 1fa:	70796563          	bltu	s2,t2,904 <ext_euclid+0x282>
        for (j = size_b -1; j >= 0; j = j-1){
 1fe:	0074                	addi	a3,sp,12
 200:	665f 736e 5f00      	0x5f00736e665f
    for (i = 0; i < size_b; ++i){
 206:	6e676973          	csrrsi	s2,0x6e6,14
 20a:	5f00                	lw	s0,56(a4)
 20c:	6c66                	flw	fs8,88(sp)
 20e:	5f6b636f          	jal	t1,b6804 <_stack_start+0xa6804>
    for(j = 0; j < size_a + size_b -1; ++j){
 212:	0074                	addi	a3,sp,12
 214:	735f 6474 7265      	0x72656474735f
    for(j = 0; j < size_a + size_b -1; ++j){
 21a:	0072                	c.slli	zero,0x1c
 21c:	425f 6769 6e69      	0x6e696769425f
}
 222:	0074                	addi	a3,sp,12
 224:	675f 6d61 616d      	0x616d6d61675f
 22a:	735f 6769 676e      	0x676e6769735f
 230:	6d61                	lui	s10,0x18
 232:	5f00                	lw	s0,56(a4)
 234:	6572                	flw	fa0,28(sp)
 236:	6461                	lui	s0,0x18
 238:	5f00                	lw	s0,56(a4)
 23a:	6572                	flw	fa0,28(sp)
 23c:	746c7573          	csrrci	a0,0x746,24
 240:	6b5f 5f00 745f      	0x745f5f006b5f
 246:	006d                	c.nop	27
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	6564                	flw	fs1,76(a0)
 24a:	756e                	flw	fa0,248(sp)
 24c:	5f6d                	li	t5,-5
 24e:	6574                	flw	fa3,76(a0)
 250:	706d                	c.lui	zero,0xffffb
 252:	5f00                	lw	s0,56(a4)
 254:	775f 6863 0062      	0x626863775f
 25a:	6572                	flw	fa0,28(sp)
 25c:	746c7573          	csrrci	a0,0x746,24
            for (k = size_a-1; k >= 0; k = k-1 ){
 260:	006e6f6b          	0x6e6f6b
        for (j = size_b -1; j >= 0; j = j-1){
 264:	735f 6474 756f      	0x756f6474735f
 26a:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 26c:	635f 7476 656c      	0x656c7476635f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 272:	006e                	c.slli	zero,0x1b
 274:	72636573          	csrrsi	a0,0x726,6
 278:	7465                	lui	s0,0xffff9
 27a:	6b5f 7965 665f      	0x665f79656b5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 280:	0071                	c.nop	28
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 282:	665f 6c69 0065      	0x656c69665f
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	6572                	flw	fa0,28(sp)
 28a:	7574                	flw	fa3,108(a0)
        for (j = size_b -1; j >= 0; j = j-1){
 28c:	6e72                	flw	ft8,28(sp)
 28e:	615f 6464 6572      	0x65726464615f
            line[i][j] = line[i][j] % mod;
 294:	00317373          	csrrci	t1,fcsr,2
        for(j = 0; j < size_a + size_b -1; ++j){
 298:	6572                	flw	fa0,28(sp)
            line[i][j] = line[i][j] % mod;
 29a:	7574                	flw	fa3,108(a0)
 29c:	6e72                	flw	ft8,28(sp)
 29e:	615f 6464 6572      	0x65726464615f
        for(j = 0; j < size_a + size_b -1; ++j){
 2a4:	00327373          	csrrci	t1,fcsr,4
    for (i = 0; i < size_b; ++i){
 2a8:	6572                	flw	fa0,28(sp)
 2aa:	7574                	flw	fa3,108(a0)
 2ac:	6e72                	flw	ft8,28(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2ae:	615f 6464 6572      	0x65726464615f
            product[j] += line[i][j];
 2b4:	00337373          	csrrci	t1,fcsr,6
 2b8:	6572                	flw	fa0,28(sp)
 2ba:	7574                	flw	fa3,108(a0)
        for(i = 0; i < size_b; ++i){
 2bc:	6e72                	flw	ft8,28(sp)
            product[j] += line[i][j];
 2be:	615f 6464 6572      	0x65726464615f
 2c4:	00347373          	csrrci	t1,fcsr,8
 2c8:	6e5f 6f69 7362      	0x73626f696e5f
    for(j = 0; j < size_a + size_b -1; ++j){
 2ce:	7200                	flw	fs0,32(a2)
 2d0:	7465                	lui	s0,0xffff9
 2d2:	7275                	lui	tp,0xffffd
        for(i = 0; i < size_b; ++i){
 2d4:	5f6e                	lw	t5,248(sp)
 2d6:	6461                	lui	s0,0x18
        product[j] = product[j] % mod;
 2d8:	7264                	flw	fs1,100(a2)
    for(j = 0; j < size_a + size_b -1; ++j){
 2da:	7365                	lui	t1,0xffff9
 2dc:	72003673          	csrrc	a2,0x720,zero
        product[j] = product[j] % mod;
 2e0:	7465                	lui	s0,0xffff9
 2e2:	7275                	lui	tp,0xffffd
 2e4:	5f6e                	lw	t5,248(sp)
    for(j = 0; j < size_a + size_b -1; ++j){
 2e6:	6461                	lui	s0,0x18
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2e8:	7264                	flw	fs1,100(a2)
    int line[size_b][size_a + size_b];
 2ea:	7365                	lui	t1,0xffff9
 2ec:	73003773          	csrrc	a4,0x730,zero
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 2f0:	6f68                	flw	fa0,92(a4)
 2f2:	7472                	flw	fs0,60(sp)
 2f4:	7520                	flw	fs0,104(a0)
 2f6:	736e                	flw	ft6,248(sp)
    int line[size_b][size_a + size_b];
 2f8:	6769                	lui	a4,0x1a
 2fa:	656e                	flw	fa0,216(sp)
 2fc:	2064                	fld	fs1,192(s0)
 2fe:	6e69                	lui	t3,0x1a
 300:	0074                	addi	a3,sp,12
 302:	615f 6574 6978      	0x69786574615f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 308:	3074                	fld	fa3,224(s0)
 30a:	5f00                	lw	s0,56(a4)
 30c:	6e676973          	csrrsi	s2,0x6e6,14
 310:	6c61                	lui	s8,0x18
 312:	625f 6675 5f00      	0x5f006675625f
 318:	7361                	lui	t1,0xffff8
 31a:	6d697463          	bgeu	s2,s6,9e2 <generate_keys+0xb2>
    int line[size_b][size_a + size_b];
 31e:	5f65                	li	t5,-7
 320:	7562                	flw	fa0,56(sp)
    int pola[size_a];
 322:	0066                	c.slli	zero,0x19
 324:	725f 7365 6c75      	0x6c757365725f
    int line[size_b][size_a + size_b];
 32a:	0074                	addi	a3,sp,12
    int pola[size_a];
 32c:	5f5f 6377 0068      	0x6863775f5f
    int polb[size_b];
 332:	746e6977          	0x746e6977
    int pola[size_a];
 336:	745f 6700 6e65      	0x6e656700745f
int *polymult2(int *a, int size_a, int *b, int size_b, int star_mult){
 33c:	7265                	lui	tp,0xffff9
 33e:	7461                	lui	s0,0xffff8
    int line[size_b][size_a + size_b];
 340:	5f65                	li	t5,-7
 342:	7379656b          	0x7379656b
    int pola[size_a];
 346:	5f00                	lw	s0,56(a4)
 348:	625f 6975 746c      	0x746c6975625f
    for (i = 0; i < size_b; ++i){
 34e:	6e69                	lui	t3,0x1a
 350:	6d5f 6d65 7063      	0x70636d656d5f
            product2[j] = 0;
 356:	0079                	c.nop	30
 358:	6c5f 636f 006b      	0x6b636f6c5f
    array_equ(pola,a,size_a);
 35e:	544e                	lw	s0,240(sp)
 360:	5552                	lw	a0,52(sp)
 362:	345f 5f38 6962      	0x69625f38345f
 368:	4d74                	lw	a3,92(a0)
    array_equ(polb,b,size_b);
 36a:	632e                	flw	ft6,200(sp)
 36c:	7000                	flw	fs0,32(s0)
 36e:	6f72                	flw	ft10,28(sp)
 370:	7564                	flw	fs1,108(a0)
 372:	00327463          	bgeu	tp,gp,37a <polymult2+0x92>
    if(star_mult == 1){
 376:	7865                	lui	a6,0xffff9
 378:	5f74                	lw	a3,124(a4)
 37a:	7565                	lui	a0,0xffff9
 37c:	64696c63          	bltu	s2,t1,9d4 <generate_keys+0xa4>
 380:	5f00                	lw	s0,56(a4)
 382:	74697277          	0x74697277
 386:	0065                	c.nop	25
        for (j = size_b -1; j >= 0; j = j-1){
 388:	5f5f 6d74 795f      	0x795f6d745f5f
            for (k = size_a-1; k >= 0; k = k-1 ){
 38e:	6165                	addi	sp,sp,112
            product2[j] = 0;
 390:	0072                	c.slli	zero,0x1c
 392:	6f70                	flw	fa2,92(a4)
 394:	626c                	flw	fa1,68(a2)
            line[i][j] = 0;
 396:	7200                	flw	fs0,32(a2)
 398:	6e61                	lui	t3,0x18
            product2[j] = 0;
 39a:	6f64                	flw	fs1,92(a4)
 39c:	5f6d                	li	t5,-5
        for(j = 0; j < size_a + size_b -1; ++j){
 39e:	6176                	flw	ft2,92(sp)
 3a0:	006c                	addi	a1,sp,12
 3a2:	6e5f 616d 6c6c      	0x6c6c616d6e5f
    for (i = 0; i < size_b; ++i){
 3a8:	6c00636f          	jal	t1,6a68 <_stack_len+0x2a68>
 3ac:	20676e6f          	jal	t3,765b2 <_stack_start+0x665b2>
        for(j = 0; j < size_a + size_b -1; ++j){
 3b0:	6f64                	flw	fs1,92(a4)
                line[size_b-1-j][k] = pola[k]*polb[j];
 3b2:	6275                	lui	tp,0x1d
 3b4:	656c                	flw	fa1,76(a0)
 3b6:	5f00                	lw	s0,56(a4)
 3b8:	656e                	flw	fa0,216(sp)
 3ba:	7478                	flw	fa4,108(s0)
 3bc:	0066                	c.slli	zero,0x19
 3be:	7261                	lui	tp,0xffff8
 3c0:	6172                	flw	ft2,28(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 3c2:	5f79                	li	t5,-2
                line[size_b-1-j][k] = pola[k]*polb[j];
 3c4:	7165                	addi	sp,sp,-400
 3c6:	0075                	c.nop	29
 3c8:	656d                	lui	a0,0x1b
            for (k = size_a-1; k >= 0; k = k-1 ){
 3ca:	67617373          	csrrci	t1,0x676,2
        for (j = size_b -1; j >= 0; j = j-1){
 3ce:	0065                	c.nop	25
 3d0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 3d6:	72006e6f          	jal	t3,6af6 <_stack_len+0x2af6>
        array_add(product2,line[i],size_a+size_b-1);
 3da:	7465                	lui	s0,0xffff9
 3dc:	7275                	lui	tp,0xffffd
 3de:	5f6e                	lw	t5,248(sp)
 3e0:	6461                	lui	s0,0x18
    for(i=0;i<size_b;++i){
 3e2:	7264                	flw	fs1,100(a2)
 3e4:	7365                	lui	t1,0xffff9
}
 3e6:	5f003573          	csrrc	a0,0x5f0,zero
 3ea:	7461                	lui	s0,0xffff8
 3ec:	7865                	lui	a6,0xffff9
 3ee:	7469                	lui	s0,0xffffa
 3f0:	7300                	flw	fs0,32(a4)
 3f2:	6275                	lui	tp,0x1d
 3f4:	6174706f          	j	4820a <_stack_start+0x3820a>
 3f8:	6772                	flw	fa4,28(sp)
 3fa:	5f00                	lw	s0,56(a4)
 3fc:	735f 6964 6964      	0x69646964735f
 402:	696e                	flw	fs2,216(sp)
 404:	0074                	addi	a3,sp,12
 406:	6f5f 6666 745f      	0x745f66666f5f
 40c:	4500                	lw	s0,8(a0)
 40e:	636e                	flw	ft6,216(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 410:	4d5f 7365 6173      	0x617373654d5f
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 416:	63006567          	0x63006567
 41a:	72746e6f          	jal	t3,47340 <_stack_start+0x37340>
 41e:	00526c6f          	jal	s8,26c22 <_stack_start+0x16c22>
 422:	665f 6572 6c65      	0x6c656572665f
 428:	7369                	lui	t1,0xffffa
 42a:	0074                	addi	a3,sp,12
            for (k = size_a-1; k >= 0; k = k-1 ){
 42c:	6972                	flw	fs2,28(sp)
 42e:	676e                	flw	fa4,216(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 430:	705f 6c6f 0079      	0x796c6f705f
 436:	4c5f 434f 5f4b      	0x5f4b434f4c5f
        array_add(product2,line[i],size_a+size_b-1);
 43c:	4552                	lw	a0,20(sp)
 43e:	53525543          	fmadd.d	fa0,ft4,fs5,fa0,unknown
    for(i=0;i<size_b;++i){
 442:	5649                	li	a2,-14
 444:	5f45                	li	t5,-15
    int v[size_N];
 446:	0054                	addi	a3,sp,4
 448:	6974                	flw	fa3,84(a0)
int *polydiv(int *num, int size_N, int*denum, int size_D, int mod){
 44a:	315f 7400 5f69      	0x5f697400315f
 450:	0032                	c.slli	zero,0xc
 452:	6e75                	lui	t3,0x1d
 454:	6e676973          	csrrsi	s2,0x6e6,14
 458:	6465                	lui	s0,0x19
 45a:	6320                	flw	fs0,64(a4)
 45c:	6168                	flw	fa0,68(a0)
 45e:	0072                	c.slli	zero,0x1c
 460:	6971                	lui	s2,0x1c
 462:	315f 5f00 656e      	0x656e5f00315f
 468:	685f0077          	0x685f0077
    int v[size_N];
 46c:	655f 7272 6f6e      	0x6f6e7272655f
    int q[size_N];
 472:	7300                	flw	fs0,32(a4)
 474:	6f68                	flw	fa0,92(a4)
 476:	7472                	flw	fs0,60(sp)
    int num_temp[size_N];
 478:	6920                	flw	fs0,80(a0)
 47a:	746e                	flw	fs0,248(sp)
    int denum_temp[size_D];
 47c:	5f00                	lw	s0,56(a4)
 47e:	745f 5f6d 6479      	0x64795f6d745f
 484:	7961                	lui	s2,0xffff8
 486:	5f00                	lw	s0,56(a4)
 488:	735f 7562 0066      	0x667562735f
    int v[size_N];
 48e:	665f 616c 7367      	0x7367616c665f
    array_equ(num_temp,num,size_N);
 494:	0032                	c.slli	zero,0xc
 496:	695f 626f 0073      	0x73626f695f
    int denum_temp[size_D];
 49c:	5f5f 4946 454c      	0x454c49465f5f
 4a2:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_N; ++i){
 4a4:	626d                	lui	tp,0x1b
 4a6:	74617473          	csrrci	s0,0x746,2
 4aa:	5f65                	li	t5,-7
 4ac:	0074                	addi	a3,sp,12
    array_equ(denum_temp,denum,size_D);
 4ae:	5f5f 4673 4c49      	0x4c4946735f5f
 4b4:	0045                	c.nop	17
    for (i = 0; i < size_D; ++i) {
 4b6:	6d5f 7362 6174      	0x617473626d5f
 4bc:	6574                	flw	fa3,76(a0)
    for (i = 0; i < size_N; ++i){
 4be:	5f00                	lw	s0,56(a4)
 4c0:	6172                	flw	ft2,28(sp)
 4c2:	646e                	flw	fs0,216(sp)
    for (i = size_D-1; i >= 0; i = i-1){
 4c4:	6e5f 7865 0074      	0x7478656e5f
 4ca:	6d5f 6c62 6e65      	0x6e656c626d5f
    for (i = 0; i < size_N; ++i){
 4d0:	735f 6174 6574      	0x65746174735f
    for (u = 0; u < mod; ++u){
 4d6:	5f00                	lw	s0,56(a4)
 4d8:	6e69                	lui	t3,0x1a
 4da:	695f0063          	beq	t5,s5,b5a <generate_keys+0x22a>
            num_temp[i] = num_temp[i] + mod;
 4de:	646e                	flw	fs0,216(sp)
 4e0:	5f00                	lw	s0,56(a4)
        while (num_temp[i] < 0) {
 4e2:	6f6c                	flw	fa1,92(a4)
 4e4:	656c6163          	bltu	s8,s6,b26 <generate_keys+0x1f6>
        num_temp[i] = num_temp[i] % mod;
 4e8:	5f00                	lw	s0,56(a4)
 4ea:	635f 656c 6e61      	0x6e61656c635f
 4f0:	7075                	c.lui	zero,0xffffd
 4f2:	5f00                	lw	s0,56(a4)
    for (i = 0; i < size_N; ++i){
 4f4:	6e75                	lui	t3,0x1d
            denum_temp[i] = denum_temp[i] + mod;
 4f6:	63657073          	csrci	0x636,10
        while (denum_temp[i] < 0) {
 4fa:	6669                	lui	a2,0x1a
 4fc:	6569                	lui	a0,0x1a
 4fe:	5f64                	lw	s1,124(a4)
        denum_temp[i] = denum_temp[i] % mod;
 500:	6f6c                	flw	fa1,92(a4)
 502:	656c6163          	bltu	s8,s6,b44 <generate_keys+0x214>
    for (i = 0; i < size_D; ++i) {
 506:	695f 666e 006f      	0x6f666e695f
 50c:	6d5f 7861 6477      	0x647778616d5f
        q[i] = 0;
 512:	725f0073          	0x725f0073
        v[i] = 0;
 516:	6565                	lui	a0,0x19
        q[i] = 0;
 518:	746e                	flw	fs0,248(sp)
 51a:	7300                	flw	fs0,32(a4)
        v[i] = 0;
 51c:	6174                	flw	fa3,68(a0)
 51e:	5f72                	lw	t5,60(sp)
    for (i = 0; i < size_N; ++i){
 520:	756d                	lui	a0,0xffffb
 522:	746c                	flw	fa1,108(s0)
        if( denum_temp[i] != 0 )
 524:	5f00                	lw	s0,56(a4)
    for (i = size_D-1; i >= 0; i = i-1){
 526:	64656573          	csrrsi	a0,0x646,10
        if ( (b_N*u)%mod == 1 )
 52a:	7200                	flw	fs0,32(a2)
 52c:	5f69                	li	t5,-6
 52e:	0032                	c.slli	zero,0xc
 530:	5f5f 6f63 6e75      	0x6e756f635f5f
    for (u = 0; u < mod; ++u){
 536:	0074                	addi	a3,sp,12
        if( num_temp[i] != 0 )
 538:	5f5f 6176 756c      	0x756c61765f5f
    for (i = size_N-1; i >= 0; i = i-1){
 53e:	0065                	c.nop	25
 540:	735f 6565 006b      	0x6b6565735f
 546:	665f 6f70 5f73      	0x5f736f70665f
    array_equ(result,q,size_N);
 54c:	0074                	addi	a3,sp,12
 54e:	656c                	flw	fa1,76(a0)
 550:	676e                	flw	fa4,216(sp)
 552:	6874                	flw	fa3,84(s0)
 554:	5f00                	lw	s0,56(a4)
 556:	745f 5f6d 696d      	0x696d5f6d745f
    for(i = size_N; i < (2*size_N); ++i){
 55c:	006e                	c.slli	zero,0x1b
        result[i] = num_temp[i-size_N];
 55e:	7570                	flw	fa2,108(a0)
 560:	6c62                	flw	fs8,24(sp)
 562:	6369                	lui	t1,0x1a
 564:	6b5f 7965 6100      	0x610079656b5f
}
 56a:	7272                	flw	ft4,60(sp)
 56c:	7961                	lui	s2,0xffff8
 56e:	615f 6464 5f00      	0x5f006464615f
 574:	74727473          	csrrci	s0,0x747,4
 578:	6c5f6b6f          	jal	s6,f743c <_stack_start+0xe743c>
 57c:	7361                	lui	t1,0xffff8
 57e:	0074                	addi	a3,sp,12
 580:	665f 746e 7079      	0x7079746e665f
 586:	7365                	lui	t1,0xffff9
 588:	7300                	flw	fs0,32(a4)
 58a:	6365                	lui	t1,0x19
 58c:	6572                	flw	fa0,28(sp)
 58e:	5f74                	lw	a3,124(a4)
 590:	5f79656b          	0x5f79656b
        v[(d-d2)] = u*r_d;
 594:	7066                	flw	ft0,120(sp)
 596:	5f00                	lw	s0,56(a4)
 598:	555f 6f4c 676e      	0x676e6f4c555f
 59e:	7200                	flw	fs0,32(a2)
 5a0:	5f69                	li	t5,-6
        for (i = 0; i < size_N; ++i){
 5a2:	0031                	c.nop	12
 5a4:	675f 7465 6164      	0x61647465675f
        product = polymult(denum_temp,size_D,v,size_D,mod,0);
 5aa:	6574                	flw	fa3,76(a0)
 5ac:	655f 7272 5f00      	0x5f007272655f
 5b2:	626f6c67          	0x626f6c67
 5b6:	6c61                	lui	s8,0x18
        for (i = 0; i < size_N; ++i){
 5b8:	695f 706d 7275      	0x7275706d695f
 5be:	5f65                	li	t5,-7
 5c0:	7470                	flw	fa2,108(s0)
        for (i = 0; i < size_N; ++i){
 5c2:	0072                	c.slli	zero,0x1c
 5c4:	20554e47          	fmsub.s	ft8,fa0,ft5,ft4,rmm
 5c8:	20373143          	fmadd.s	ft2,fa4,ft3,ft4,rup
        for (i = 0; i < size_N; ++i){
 5cc:	2e39                	jal	8ea <ext_euclid+0x268>
 5ce:	2e32                	fld	ft8,264(sp)
    array_add(q,v,size_N);
 5d0:	2030                	fld	fa2,64(s0)
 5d2:	6d2d                	lui	s10,0xb
 5d4:	7261                	lui	tp,0xffff8
 5d6:	723d6863          	bltu	s10,gp,d06 <ntru_deceypt+0x5a>
        for(i = 0; i < size_N; ++i){
 5da:	3376                	fld	ft6,376(sp)
 5dc:	6932                	flw	fs2,12(sp)
 5de:	636d                	lui	t1,0x1b
        for (i = size_N-1; i >= 0; i = i-1){
 5e0:	2d20                	fld	fs0,88(a0)
 5e2:	616d                	addi	sp,sp,240
 5e4:	6962                	flw	fs2,24(sp)
 5e6:	693d                	lui	s2,0xf
 5e8:	706c                	flw	fa1,100(s0)
 5ea:	2d203233          	0x2d203233
 5ee:	636d                	lui	t1,0x1b
 5f0:	6f6d                	lui	t5,0x1b
            v[i] = v[i] % mod;
 5f2:	6564                	flw	fs1,76(a0)
        for (i = 0; i < size_N; ++i){
 5f4:	3d6c                	fld	fa1,248(a0)
 5f6:	656d                	lui	a0,0x1b
            v[i] = v[i] % mod;
 5f8:	6164                	flw	fs1,68(a0)
 5fa:	796e                	flw	fs2,248(sp)
 5fc:	2d20                	fld	fs0,88(a0)
 5fe:	746d                	lui	s0,0xffffb
        for (i = 0; i < size_N; ++i){
 600:	6e75                	lui	t3,0x1d
                product[i] = product[i] + mod;
 602:	3d65                	jal	4ba <polydiv+0x74>
 604:	6f72                	flw	ft10,28(sp)
            while (product[i] < 0) {
 606:	74656b63          	bltu	a0,t1,d5c <ntru_deceypt+0xb0>
 60a:	2d20                	fld	fs0,88(a0)
            product[i] = product[i] % mod;
 60c:	4f2d2067          	0x4f2d2067
        for (i = 0; i < size_N; ++i){
 610:	662d2073          	csrs	0x662,s10
            product[i] = product[i] % mod;
 614:	6976                	flw	fs2,92(sp)
 616:	69626973          	csrrsi	s2,0x696,4
            num_temp[i] = num_temp[i] - product[i];
 61a:	696c                	flw	fa1,84(a0)
 61c:	7974                	flw	fa3,116(a0)
 61e:	683d                	lui	a6,0xf
 620:	6469                	lui	s0,0x1a
 622:	6564                	flw	fs1,76(a0)
        for (i = 0; i < size_N; ++i){
 624:	006e                	c.slli	zero,0x1b
 626:	755f 756e 6573      	0x6573756e755f
            num_temp[i] = num_temp[i] - product[i];
 62c:	5f64                	lw	s1,124(a4)
        for (i = 0; i < size_N; ++i){
 62e:	6172                	flw	ft2,28(sp)
                num_temp[i] = num_temp[i] + mod;
 630:	646e                	flw	fs0,216(sp)
 632:	6c00                	flw	fs0,24(s0)
            while (num_temp[i] < 0){
 634:	6e69                	lui	t3,0x1a
 636:	0065                	c.nop	25
 638:	775f 7364 5f00      	0x5f007364775f
        for (i = 0; i < size_N; ++i){
 63e:	745f 5f6d 6477      	0x64775f6d745f
            num_temp[i] = num_temp[i] % mod;
 644:	7961                	lui	s2,0xffff8
        for (i = 0; i < size_N; ++i){
 646:	5f00                	lw	s0,56(a4)
            q[i] = q[i] % mod;
 648:	65756c67          	0x65756c67
        for(i = 0; i < size_N; ++i){
 64c:	6900                	flw	fs0,16(a0)
            q[i] = q[i] % mod;
 64e:	736e                	flw	ft6,248(sp)
 650:	7274                	flw	fa3,100(a2)
 652:	655f 7571 6e00      	0x6e007571655f
            if( num_temp[i] != 0 )
 658:	7274                	flw	fa3,100(a2)
        for (i = size_N-1; i >= 0; i = i-1){
 65a:	5f75                	li	t5,-3
 65c:	6e65                	lui	t3,0x19
            v[i] = 0;
 65e:	70727963          	bgeu	tp,t2,d70 <ntru_deceypt+0xc4>
 662:	0074                	addi	a3,sp,12
 664:	735f 6973 657a      	0x657a6973735f
        for (i = 0; i < size_N; ++i){
 66a:	745f 5f00 366c      	0x366c5f00745f
        result[i] = num_temp[i-size_N];
 670:	6134                	flw	fa3,64(a0)
 672:	625f 6675 6400      	0x64006675625f
 678:	6e65                	lui	t3,0x19
 67a:	6d75                	lui	s10,0x1d
    for(i = size_N; i < (2*size_N); ++i){
 67c:	5f00                	lw	s0,56(a4)
 67e:	5f676973          	csrrsi	s2,0x5f6,14
    int ri_2[size]; // MX-ring poly, a
 682:	7566                	flw	fa0,120(sp)
 684:	636e                	flw	ft6,216(sp)
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 686:	5f00                	lw	s0,56(a4)
    int ri_2[size]; // MX-ring poly, a
 688:	626e                	flw	ft4,216(sp)
 68a:	6675                	lui	a2,0x1d
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 68c:	5f00                	lw	s0,56(a4)
 68e:	6e75                	lui	t3,0x1d
 690:	7375                	lui	t1,0xffffd
 692:	6465                	lui	s0,0x19
 694:	7000                	flw	fs0,32(s0)
 696:	52796c6f          	jal	s8,973bc <_stack_start+0x873bc>
 69a:	7300                	flw	fs0,32(a4)
 69c:	7a69                	lui	s4,0xffffa
 69e:	5f65                	li	t5,-7
 6a0:	0044                	addi	s1,sp,4
 6a2:	5f5f 6d74 695f      	0x695f6d745f5f
    int ri_2[size]; // MX-ring poly, a
 6a8:	74736473          	csrrsi	s0,0x747,6
 6ac:	5f00                	lw	s0,56(a4)
    int ri_1[size]; // f-random poly, f[N] = 0, b
 6ae:	6f6c                	flw	fa1,92(a4)
 6b0:	746c6163          	bltu	s8,t1,df2 <memcpy+0x8>
    int ri[size];
 6b4:	6d69                	lui	s10,0x1a
 6b6:	5f65                	li	t5,-7
 6b8:	7562                	flw	fa0,56(sp)
    int ti_1[size]; // ti_1[0] = 1
 6ba:	0066                	c.slli	zero,0x19
 6bc:	635f 6f6c 6573      	0x65736f6c635f
    int ti[size];
 6c2:	5f00                	lw	s0,56(a4)
 6c4:	3472                	fld	fs0,312(sp)
    int qi_1[size];
 6c6:	0038                	addi	a4,sp,8
 6c8:	6d5f 7462 776f      	0x776f74626d5f
    int temp[size];
 6ce:	74735f63          	bge	t1,t2,e2c <memcpy+0x42>
int* ext_euclid(int* polyR, int* polyf, int size, int mod) {
 6d2:	7461                	lui	s0,0xffff8
 6d4:	0065                	c.nop	25
    int ri_2[size]; // MX-ring poly, a
 6d6:	705f 7335 6d00      	0x6d007335705f
    for (i = 0; i < size; ++i) {
 6dc:	6961                	lui	s2,0x18
        ti_2[i] = 0;
 6de:	006e                	c.slli	zero,0x1b
 6e0:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
    for (i = 0; i < size; ++i) {
 6e6:	6164                	flw	fs1,68(a0)
 6e8:	0079                	c.nop	30
    array_equ(ri_2,polyR,size);
 6ea:	657a6973          	csrrsi	s2,0x657,20
 6ee:	615f 7300 7a69      	0x7a697300615f
    array_equ(ri_1,polyf,size);
 6f4:	5f65                	li	t5,-7
 6f6:	0062                	c.slli	zero,0x18
 6f8:	30747263          	bgeu	s0,t2,9fc <generate_keys+0xcc>
    ti_1[0] = 1;
 6fc:	532e                	lw	t1,232(sp)
 6fe:	4700                	lw	s0,8(a4)
        for (i = N + 1; i < (2 * N + 2); ++i) {
 700:	554e                	lw	a0,240(sp)
 702:	4120                	lw	s0,64(a0)
 704:	2e322053          	0x2e322053
        for (i = 0; i < N + 1; ++i) {
 708:	          	snez	tp,zero

Disassembly of section .comment:

00000000 <.comment>:
  .endr
   0:	3a434347          	fmsub.d	ft6,ft6,ft4,ft7,rmm
   4:	2820                	fld	fs0,80(s0)
   6:	29554e47          	fmsub.s	ft8,fa0,fs5,ft5,rmm
   a:	3920                	fld	fs0,112(a0)
   c:	322e                	fld	ft4,232(sp)
   e:	302e                	fld	ft0,232(sp)
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
   0:	2541                	jal	680 <polydiv+0x23a>
   2:	0000                	unimp
   4:	7200                	flw	fs0,32(a2)
   6:	7369                	lui	t1,0xffffa
   8:	01007663          	bgeu	zero,a6,14 <__DYNAMIC+0x14>
   c:	0000001b          	0x1b
  10:	1004                	addi	s1,sp,32
  12:	7205                	lui	tp,0xfffe1
  14:	3376                	fld	ft6,376(sp)
  16:	6932                	flw	fs2,12(sp)
  18:	7032                	flw	ft0,44(sp)
  1a:	5f30                	lw	a2,120(a4)
  1c:	326d                	jal	fffff9c6 <_stack_start+0xfffef9c6>
  1e:	3070                	fld	fa2,224(s0)
  20:	635f 7032 0030      	0x307032635f

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	000c                	0xc
   2:	0000                	unimp
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	0001                	nop
   a:	7c01                	lui	s8,0xfffe0
   c:	0d01                	addi	s10,s10,0
   e:	0002                	c.slli64	zero
  10:	000c                	0xc
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	008c                	addi	a1,sp,64
  1a:	0000                	unimp
  1c:	0006                	c.slli	zero,0x1
  1e:	0000                	unimp
  20:	000c                	0xc
  22:	0000                	unimp
  24:	0000                	unimp
  26:	0000                	unimp
  28:	0092                	slli	ra,ra,0x4
  2a:	0000                	unimp
  2c:	0022                	c.slli	zero,0x8
  2e:	0000                	unimp
  30:	000c                	0xc
  32:	0000                	unimp
  34:	0000                	unimp
  36:	0000                	unimp
  38:	00b4                	addi	a3,sp,72
  3a:	0000                	unimp
  3c:	0006                	c.slli	zero,0x1
  3e:	0000                	unimp
  40:	000c                	0xc
  42:	0000                	unimp
  44:	0000                	unimp
  46:	0000                	unimp
  48:	00ba                	slli	ra,ra,0xe
  4a:	0000                	unimp
  4c:	0022                	c.slli	zero,0x8
  4e:	0000                	unimp
  50:	0058                	addi	a4,sp,4
  52:	0000                	unimp
  54:	0000                	unimp
  56:	0000                	unimp
  58:	00dc                	addi	a5,sp,68
  5a:	0000                	unimp
  5c:	020c                	addi	a1,sp,256
  5e:	0000                	unimp
  60:	0e42                	slli	t3,t3,0x10
  62:	4250                	lw	a2,4(a2)
  64:	0492                	slli	s1,s1,0x4
  66:	9346                	add	t1,t1,a7
  68:	4805                	li	a6,1
  6a:	0a98                	addi	a4,sp,336
  6c:	88500d9b          	0x88500d9b
  70:	8902                	jr	s2
  72:	080c4203          	lbu	tp,128(s8) # fffe0080 <_stack_start+0xfffd0080>
  76:	4e00                	lw	s0,24(a2)
  78:	0694                	addi	a3,sp,832
  7a:	0795                	addi	a5,a5,5
  jal x0, default_exc_handler
  7c:	0896                	slli	a7,a7,0x5
  7e:	0b990997          	auipc	s3,0xb990
  jal x0, reset_handler
  82:	0c9a                	slli	s9,s9,0x6
  jal x0, default_exc_handler
  84:	0181                	addi	gp,gp,0
  86:	0a011403          	lh	s0,160(sp)
  jal x0, default_exc_handler
  8a:	020c                	addi	a1,sp,256
    asm volatile(
  8c:	4250                	lw	a2,4(a2)
  8e:	42c1                	li	t0,16
}
  90:	42c8                	lw	a0,4(a3)
    for(i=0;i<(length/3);i++) {
  92:	42c9                	li	t0,18
  94:	42d2                	lw	t0,20(sp)
  96:	42d442d3          	0x42d442d3
  9a:	42d5                	li	t0,21
  9c:	42d6                	lw	t0,84(sp)
  9e:	42d842d7          	0x42d842d7
        instr_add((unsigned int*)&a1[3 * i], (unsigned int*)&a2[3*i]);
  a2:	42d9                	li	t0,22
  a4:	42da                	lw	t0,148(sp)
    asm volatile(
  a6:	000e4adb          	0xe4adb
  aa:	0b42                	slli	s6,s6,0x10
  ac:	0058                	addi	a4,sp,4
  ae:	0000                	unimp
    for(i=0;i<(length/3);i++) {
  b0:	0000                	unimp
  b2:	0000                	unimp
    asm volatile(
  b4:	02e8                	addi	a0,sp,332
  b6:	0000                	unimp
}
  b8:	015e                	slli	sp,sp,0x17
    for(i=0;i<(length/3);i++) {
  ba:	0000                	unimp
  bc:	0e42                	slli	t3,t3,0x10
  be:	4650                	lw	a2,12(a2)
  c0:	0896                	slli	a7,a7,0x5
  c2:	9348                	0x9348
  c4:	9705                	srai	a4,a4,0x21
  c6:	6209                	lui	tp,0x2
}
  c8:	0288                	addi	a0,sp,320
        instr_equ((unsigned int*)&a1[3 * i],(unsigned int*) &a2[3*i]);
  ca:	0389                	addi	t2,t2,2
  cc:	0492                	slli	s1,s1,0x4
    asm volatile(
  ce:	0694                	addi	a3,sp,832
  d0:	0795                	addi	a5,a5,5
  d2:	0a98                	addi	a4,sp,336
  d4:	0b99                	addi	s7,s7,6
  d6:	0c9a                	slli	s9,s9,0x6
    for(i=0;i<(length/3);i++) {
  d8:	01810d9b          	0x1810d9b
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  dc:	0c42                	slli	s8,s8,0x10
  de:	0008                	0x8
  e0:	ce02                	sw	zero,28(sp)
  e2:	0c0a                	slli	s8,s8,0x2
    int line[size_b][size_a + size_b];
  e4:	5002                	0x5002
  e6:	c142                	sw	a6,128(sp)
  e8:	c842                	sw	a6,16(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  ea:	c942                	sw	a6,144(sp)
  ec:	d242                	sw	a6,36(sp)
    int line[size_b][size_a + size_b];
  ee:	d342                	sw	a6,164(sp)
  f0:	d442                	sw	a6,40(sp)
  f2:	d542                	sw	a6,168(sp)
  f4:	d642                	sw	a6,44(sp)
  f6:	d742                	sw	a6,172(sp)
  f8:	d842                	sw	a6,48(sp)
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
  fa:	d942                	sw	a6,176(sp)
  fc:	da42                	sw	a6,52(sp)
  fe:	db42                	sw	a6,180(sp)
 100:	0e4a                	slli	t3,t3,0x12
 102:	4200                	lw	s0,0(a2)
 104:	0000000b          	0xb
 108:	0054                	addi	a3,sp,4
 10a:	0000                	unimp
 10c:	0000                	unimp
 10e:	0000                	unimp
 110:	0446                	slli	s0,s0,0x11
    int line[size_b][size_a + size_b];
 112:	0000                	unimp
    int pola[size_a];
 114:	023c                	addi	a5,sp,264
 116:	0000                	unimp
    int line[size_b][size_a + size_b];
 118:	0e46                	slli	t3,t3,0x11
    int pola[size_a];
 11a:	5e40                	lw	s0,60(a2)
    int line[size_b][size_a + size_b];
 11c:	0288                	addi	a0,sp,320
 11e:	0389                	addi	t2,t2,2
    int pola[size_a];
 120:	0492                	slli	s1,s1,0x4
    int line[size_b][size_a + size_b];
 122:	06940593          	addi	a1,s0,105 # ffff8069 <_stack_start+0xfffe8069>
    int pola[size_a];
 126:	0795                	addi	a5,a5,5
    int polb[size_b];
 128:	0896                	slli	a7,a7,0x5
 12a:	0a980997          	auipc	s3,0xa980
    int pola[size_a];
 12e:	0b99                	addi	s7,s7,6
    int polb[size_b];
 130:	0c9a                	slli	s9,s9,0x6
 132:	01810d9b          	0x1810d9b
            line[i][j] = 0;
 136:	0c42                	slli	s8,s8,0x10
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 138:	0008                	0x8
 13a:	0a010203          	lb	tp,160(sp)
    int pola[size_a];
 13e:	020c                	addi	a1,sp,256
int *polymult(int *a, int size_a, int *b, int size_b, int mod, int star_mult){
 140:	4240                	lw	s0,4(a2)
    int line[size_b][size_a + size_b];
 142:	42c1                	li	t0,16
 144:	42c8                	lw	a0,4(a3)
    int polb[size_b];
 146:	42c9                	li	t0,18
            line[i][j] = 0;
 148:	42d2                	lw	t0,20(sp)
 14a:	42d442d3          	0x42d442d3
    for (i = 0; i < size_b; ++i){
 14e:	42d5                	li	t0,21
 150:	42d6                	lw	t0,84(sp)
            product[j] = 0;
 152:	42d842d7          	0x42d842d7
 156:	42d9                	li	t0,22
 158:	42da                	lw	t0,148(sp)
    for (i = 0; i < size_b; ++i){
 15a:	000e4adb          	0xe4adb
    array_equ(pola,a,size_a);
 15e:	0b42                	slli	s6,s6,0x10
 160:	0054                	addi	a3,sp,4
 162:	0000                	unimp
 164:	0000                	unimp
 166:	0000                	unimp
 168:	0682                	c.slli64	a3
 16a:	0000                	unimp
 16c:	02ae                	slli	t0,t0,0xb
    for (i = 0; i < size_a; ++i){
 16e:	0000                	unimp
 170:	0e46                	slli	t3,t3,0x11
 172:	5e50                	lw	a2,60(a2)
 174:	0288                	addi	a0,sp,320
 176:	0389                	addi	t2,t2,2
 178:	0492                	slli	s1,s1,0x4
 17a:	06940593          	addi	a1,s0,105
    array_equ(polb,b,size_b);
 17e:	0795                	addi	a5,a5,5
 180:	0896                	slli	a7,a7,0x5
 182:	0a980997          	auipc	s3,0xa980
   for (i = 0; i < size_b; ++i){
 186:	0b99                	addi	s7,s7,6
 188:	0c9a                	slli	s9,s9,0x6
 18a:	01810d9b          	0x1810d9b
    if(star_mult == 1){
 18e:	0c42                	slli	s8,s8,0x10
 190:	0008                	0x8
 192:	0a015c03          	lhu	s8,160(sp)
 196:	020c                	addi	a1,sp,256
 198:	4250                	lw	a2,4(a2)
 19a:	42c1                	li	t0,16
 19c:	42c8                	lw	a0,4(a3)
 19e:	42c9                	li	t0,18
 1a0:	42d2                	lw	t0,20(sp)
        for (j = size_b -1; j >= 0; j = j-1){
 1a2:	42d442d3          	0x42d442d3
            for (k = size_a-1; k >= 0; k = k-1 ){
 1a6:	42d5                	li	t0,21
 1a8:	42d6                	lw	t0,84(sp)
            product[j] = 0;
 1aa:	42d842d7          	0x42d842d7
 1ae:	42d9                	li	t0,22
            line[i][j] = 0;
 1b0:	42da                	lw	t0,148(sp)
 1b2:	000e4adb          	0xe4adb
            product[j] = 0;
 1b6:	0b42                	slli	s6,s6,0x10
        for(j = 0; j < size_a + size_b -1; ++j){
 1b8:	0054                	addi	a3,sp,4
 1ba:	0000                	unimp
 1bc:	0000                	unimp
 1be:	0000                	unimp
    for (i = 0; i < size_b; ++i){
 1c0:	0930                	addi	a2,sp,152
 1c2:	0000                	unimp
 1c4:	02f4                	addi	a3,sp,332
 1c6:	0000                	unimp
        for(j = 0; j < size_a + size_b -1; ++j){
 1c8:	0e42                	slli	t3,t3,0x10
 1ca:	03f0                	addi	a2,sp,460
            pola[i] = pola[i] + mod;
 1cc:	814c                	0x814c
 1ce:	8801                	andi	s0,s0,0
        while (pola[i] < 0){
 1d0:	8902                	jr	s2
 1d2:	080c4203          	lbu	tp,128(s8)
        pola[i] = pola[i] % mod;
 1d6:	6400                	flw	fs0,8(s0)
 1d8:	0492                	slli	s1,s1,0x4
    for (i = 0; i < size_a; ++i){
 1da:	06940593          	addi	a1,s0,105
        pola[i] = pola[i] % mod;
 1de:	0795                	addi	a5,a5,5
 1e0:	0896                	slli	a7,a7,0x5
    for (i = 0; i < size_a; ++i){
 1e2:	0c9a0997          	auipc	s3,0xc9a0
            polb[i] = polb[i] + mod;
 1e6:	0a98                	addi	a4,sp,336
        while (polb[i] < 0){
 1e8:	0b99                	addi	s7,s7,6
 1ea:	0a01dc03          	lhu	s8,160(gp)
        polb[i] = polb[i] % mod;
 1ee:	020c                	addi	a1,sp,256
 1f0:	03f0                	addi	a2,sp,460
   for (i = 0; i < size_b; ++i){
 1f2:	c144                	sw	s1,4(a0)
 1f4:	c844                	sw	s1,20(s0)
        polb[i] = polb[i] % mod;
 1f6:	c944                	sw	s1,20(a0)
 1f8:	d244                	sw	s1,36(a2)
   for (i = 0; i < size_b; ++i){
 1fa:	d344                	sw	s1,36(a4)
    if(star_mult == 1){
 1fc:	d444                	sw	s1,44(s0)
        for (j = size_b -1; j >= 0; j = j-1){
 1fe:	d544                	sw	s1,44(a0)
 200:	d644                	sw	s1,44(a2)
        for(j = 0; j < size_a + size_b -1; ++j){
 202:	d744                	sw	s1,44(a4)
    for (i = 0; i < size_b; ++i){
 204:	d844                	sw	s1,52(s0)
 206:	d944                	sw	s1,52(a0)
 208:	da44                	sw	s1,52(a2)
 20a:	0e4a                	slli	t3,t3,0x12
 20c:	4200                	lw	s0,0(a2)
 20e:	0034000b          	0x34000b
    for(j = 0; j < size_a + size_b -1; ++j){
 212:	0000                	unimp
 214:	0000                	unimp
 216:	0000                	unimp
    for(j = 0; j < size_a + size_b -1; ++j){
 218:	0c24                	addi	s1,sp,536
 21a:	0000                	unimp
 21c:	0088                	addi	a0,sp,64
}
 21e:	0000                	unimp
 220:	0e42                	slli	t3,t3,0x10
 222:	01e0                	addi	s0,sp,204
 224:	8844                	0x8844
 226:	8902                	jr	s2
 228:	04924a03          	lbu	s4,73(tp) # 2049 <_min_stack+0x49>
 22c:	8152                	mv	sp,s4
 22e:	9301                	srli	a4,a4,0x20
 230:	9405                	srai	s0,s0,0x21
 232:	0206                	slli	tp,tp,0x1
 234:	0a46                	slli	s4,s4,0x11
 236:	42c1                	li	t0,16
 238:	42c8                	lw	a0,4(a3)
 23a:	42c9                	li	t0,18
 23c:	42d2                	lw	t0,20(sp)
 23e:	42d442d3          	0x42d442d3
 242:	000e                	c.slli	zero,0x3
 244:	0b42                	slli	s6,s6,0x10
 246:	0000                	unimp
                line[size_b-1-j][k] = pola[k]*polb[j];
 248:	0040                	addi	s0,sp,4
 24a:	0000                	unimp
 24c:	0000                	unimp
 24e:	0000                	unimp
 250:	0cac                	addi	a1,sp,600
 252:	0000                	unimp
 254:	00c8                	addi	a0,sp,68
 256:	0000                	unimp
            for (k = size_a-1; k >= 0; k = k-1 ){
 258:	0e42                	slli	t3,t3,0x10
                line[size_b-1-j][k] = pola[k]*polb[j];
 25a:	4430                	lw	a2,72(s0)
 25c:	0288                	addi	a0,sp,320
 25e:	924e0593          	addi	a1,t3,-1756 # 1c924 <_stack_start+0xc924>
            for (k = size_a-1; k >= 0; k = k-1 ){
 262:	9504                	0x9504
        for (j = size_b -1; j >= 0; j = j-1){
 264:	58099707          	0x58099707
 268:	0181                	addi	gp,gp,0
 26a:	0389                	addi	t2,t2,2
            for (k = size_a-1; k >= 0; k = k-1 ){
 26c:	0694                	addi	a3,sp,832
 26e:	0896                	slli	a7,a7,0x5
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 270:	5202                	lw	tp,32(sp)
 272:	c10a                	sw	sp,128(sp)
 274:	c842                	sw	a6,16(sp)
 276:	c942                	sw	a6,144(sp)
 278:	d242                	sw	a6,36(sp)
 27a:	d342                	sw	a6,164(sp)
 27c:	d442                	sw	a6,40(sp)
 27e:	d542                	sw	a6,168(sp)
            for (k = size_a-1; k >= 0; k = k-1 ){
 280:	d642                	sw	a6,44(sp)
                line[size_b-1-j][k + j] = pola[k]*polb[j];
 282:	d742                	sw	a6,172(sp)
 284:	0e42                	slli	t3,t3,0x10
 286:	4200                	lw	s0,0(a2)
            for (k = size_a-1; k >= 0; k = k-1 ){
 288:	0000000b          	0xb
        for (j = size_b -1; j >= 0; j = j-1){
 28c:	002c                	addi	a1,sp,8
 28e:	0000                	unimp
 290:	0000                	unimp
 292:	0000                	unimp
            line[i][j] = line[i][j] % mod;
 294:	0f70                	addi	a2,sp,924
        for(j = 0; j < size_a + size_b -1; ++j){
 296:	0000                	unimp
 298:	0138                	addi	a4,sp,136
            line[i][j] = line[i][j] % mod;
 29a:	0000                	unimp
 29c:	0e44                	addi	s1,sp,788
 29e:	08b0                	addi	a2,sp,88
 2a0:	815e                	mv	sp,s7
        for(j = 0; j < size_a + size_b -1; ++j){
 2a2:	8801                	andi	s0,s0,0
 2a4:	8902                	jr	s2
    for (i = 0; i < size_b; ++i){
 2a6:	03049203          	lh	tp,48(s1)
 2aa:	00f8                	addi	a4,sp,76
 2ac:	c10a                	sw	sp,128(sp)
        for(j = 0; j < size_a + size_b -1; ++j){
 2ae:	c844                	sw	s1,20(s0)
 2b0:	c944                	sw	s1,20(a0)
            product[j] += line[i][j];
 2b2:	d244                	sw	s1,36(a2)
 2b4:	0e46                	slli	t3,t3,0x11
 2b6:	4200                	lw	s0,0(a2)
 2b8:	0000000b          	0xb
